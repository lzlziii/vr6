using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;
using AOT;
using Animations;
using Audio;
using Cities;
using CurvedUI;
using Deisim;
using Deisim.Enums;
using Deisim.Map;
using Deisim.Structs;
using Disasters;
using Humans;
using Humans.Equipments;
using Il2CppDummyDll;
using JetBrains.Annotations;
using Miracles;
using Mock;
using MyronUtils;
using MyronVR;
using MyronVR.Enums;
using MyronVR.Interactions;
using MyronVR.Locomotion;
using MyronVR.Vendors;
using Naval;
using Newtonsoft.Json;
using Oculus.Platform;
using Pathfinding;
using Pooling;
using PrimitivesScriptableObjects;
using Realms;
using Realms.OmenDecisions;
using Realms.RelationModifiers;
using Serialization;
using Structs;
using TMPro;
using Terrains;
using Trading;
using Unity.Burst;
using Unity.Collections;
using Unity.Jobs;
using Unity.Mathematics;
using UnityEngine;
using UnityEngine.AI;
using UnityEngine.Audio;
using UnityEngine.EventSystems;
using UnityEngine.Events;
using UnityEngine.Serialization;
using UnityEngine.UI;
using UnityEngine.XR;
using Viveport;
using Viveport.Internal;
using VolumetricAudio;

[assembly: AssemblyVersion("0.0.0.0")]
[Token(Token = "0x2000002")]
public class CUI_CameraRotationOnButtonHeld : MonoBehaviour
{
	[Token(Token = "0x4000001")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private float Sensitivity;

	[Token(Token = "0x4000002")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private Vector3 oldMousePos;

	[Token(Token = "0x4000003")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool move;

	[Token(Token = "0x6000001")]
	[Address(RVA = "0xADE79C", Offset = "0xADE79C", VA = "0xADE79C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000002")]
	[Address(RVA = "0xADE7BC", Offset = "0xADE7BC", VA = "0xADE7BC")]
	public CUI_CameraRotationOnButtonHeld()
	{
	}
}
[Token(Token = "0x2000003")]
public class CUI_MoveAlong : MonoBehaviour
{
	[Token(Token = "0x6000003")]
	[Address(RVA = "0xADE7D4", Offset = "0xADE7D4", VA = "0xADE7D4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000004")]
	[Address(RVA = "0xADE7D8", Offset = "0xADE7D8", VA = "0xADE7D8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000005")]
	[Address(RVA = "0xADE9F4", Offset = "0xADE9F4", VA = "0xADE9F4")]
	public CUI_MoveAlong()
	{
	}
}
[Token(Token = "0x2000004")]
public class CUI_MoveHeartbeat : MonoBehaviour
{
	[Token(Token = "0x4000004")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float speed;

	[Token(Token = "0x4000005")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool wrapAroundParent;

	[Token(Token = "0x4000006")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private RectTransform rectie;

	[Token(Token = "0x4000007")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private RectTransform parentRectie;

	[Token(Token = "0x6000006")]
	[Address(RVA = "0xADE9FC", Offset = "0xADE9FC", VA = "0xADE9FC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000007")]
	[Address(RVA = "0xADEAD8", Offset = "0xADEAD8", VA = "0xADEAD8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000008")]
	[Address(RVA = "0xADEBF8", Offset = "0xADEBF8", VA = "0xADEBF8")]
	public CUI_MoveHeartbeat()
	{
	}
}
[Token(Token = "0x2000005")]
public class CUI_rotation_anim : MonoBehaviour
{
	[Token(Token = "0x4000008")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 Rotation;

	[Token(Token = "0x6000009")]
	[Address(RVA = "0xADEC08", Offset = "0xADEC08", VA = "0xADEC08")]
	private void Start()
	{
	}

	[Token(Token = "0x600000A")]
	[Address(RVA = "0xADEC0C", Offset = "0xADEC0C", VA = "0xADEC0C")]
	private void Update()
	{
	}

	[Token(Token = "0x600000B")]
	[Address(RVA = "0xADEDF0", Offset = "0xADEDF0", VA = "0xADEDF0")]
	public CUI_rotation_anim()
	{
	}
}
[Token(Token = "0x2000006")]
public class CUI_ShowParentCoordinates : MonoBehaviour
{
	[Token(Token = "0x600000C")]
	[Address(RVA = "0xADEDF8", Offset = "0xADEDF8", VA = "0xADEDF8")]
	private void Start()
	{
	}

	[Token(Token = "0x600000D")]
	[Address(RVA = "0xADEEC8", Offset = "0xADEEC8", VA = "0xADEEC8")]
	private void Update()
	{
	}

	[Token(Token = "0x600000E")]
	[Address(RVA = "0xADEECC", Offset = "0xADEECC", VA = "0xADEECC")]
	public CUI_ShowParentCoordinates()
	{
	}
}
[Token(Token = "0x2000007")]
public class CUI_touchpad : MonoBehaviour
{
	[Token(Token = "0x4000009")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private RectTransform container;

	[Token(Token = "0x400000A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private RectTransform dot;

	[Token(Token = "0x600000F")]
	[Address(RVA = "0xADEED4", Offset = "0xADEED4", VA = "0xADEED4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000010")]
	[Address(RVA = "0xADEF54", Offset = "0xADEF54", VA = "0xADEF54")]
	private void MoveDotOnTouchpadAxisChanged(object o, ViveInputArgs args)
	{
	}

	[Token(Token = "0x6000011")]
	[Address(RVA = "0xADF008", Offset = "0xADF008", VA = "0xADF008")]
	public CUI_touchpad()
	{
	}
}
[Token(Token = "0x2000008")]
[ExecuteInEditMode]
public class CurvedUIInputModule : StandaloneInputModule
{
	[Token(Token = "0x2000009")]
	public enum CUIControlMethod
	{
		[Token(Token = "0x4000026")]
		MOUSE = 0,
		[Token(Token = "0x4000027")]
		GAZE = 1,
		[Token(Token = "0x4000028")]
		WORLD_MOUSE = 2,
		[Token(Token = "0x4000029")]
		CUSTOM_RAY = 3,
		[Token(Token = "0x400002A")]
		STEAMVR_LEGACY = 4,
		[Token(Token = "0x400002B")]
		OCULUSVR = 5,
		[Token(Token = "0x400002C")]
		GOOGLEVR = 7,
		[Token(Token = "0x400002D")]
		STEAMVR_2 = 8,
		[Token(Token = "0x400002E")]
		UNITY_XR = 9
	}

	[Token(Token = "0x200000A")]
	public enum Hand
	{
		[Token(Token = "0x4000030")]
		Both,
		[Token(Token = "0x4000031")]
		Right,
		[Token(Token = "0x4000032")]
		Left
	}

	[Token(Token = "0x400000B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	[SerializeField]
	private CUIControlMethod controlMethod;

	[Token(Token = "0x400000C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[SerializeField]
	private string submitButtonName;

	[Token(Token = "0x400000D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[SerializeField]
	private Camera mainEventCamera;

	[Token(Token = "0x400000E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	[SerializeField]
	private LayerMask raycastLayerMask;

	[Token(Token = "0x400000F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	[SerializeField]
	private bool gazeUseTimedClick;

	[Token(Token = "0x4000010")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	[SerializeField]
	private float gazeClickTimer;

	[Token(Token = "0x4000011")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	[SerializeField]
	private float gazeClickTimerDelay;

	[Token(Token = "0x4000012")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	[SerializeField]
	private Image gazeTimedClickProgressImage;

	[Token(Token = "0x4000013")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	[SerializeField]
	private float worldSpaceMouseSensitivity;

	[Token(Token = "0x4000014")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	[SerializeField]
	private Hand usedHand;

	[Token(Token = "0x4000015")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	[SerializeField]
	[FormerlySerializedAs("controllerTransformOverride")]
	private Transform pointerTransformOverride;

	[Token(Token = "0x4000016")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static bool disableOtherInputModulesOnStart;

	[Token(Token = "0x4000017")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static CurvedUIInputModule instance;

	[Token(Token = "0x4000018")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private GameObject currentDragging;

	[Token(Token = "0x4000019")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private GameObject currentPointedAt;

	[Token(Token = "0x400001A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private GameObject m_rightController;

	[Token(Token = "0x400001B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private GameObject m_leftController;

	[Token(Token = "0x400001C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private float gazeTimerProgress;

	[Token(Token = "0x400001D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
	private Ray customControllerRay;

	[Token(Token = "0x400001E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
	private float dragThreshold;

	[Token(Token = "0x400001F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private bool pressedDown;

	[Token(Token = "0x4000020")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x139")]
	private bool pressedLastFrame;

	[Token(Token = "0x4000021")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
	private Vector3 lastMouseOnScreenPos;

	[Token(Token = "0x4000022")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private Vector2 worldSpaceMouseInCanvasSpace;

	[Token(Token = "0x4000023")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	private Vector2 lastWorldSpaceMouseOnCanvas;

	[Token(Token = "0x4000024")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	private Vector2 worldSpaceMouseOnCanvasDelta;

	[Token(Token = "0x17000001")]
	public static CurvedUIInputModule Instance
	{
		[Token(Token = "0x600001F")]
		[Address(RVA = "0xADF7CC", Offset = "0xADF7CC", VA = "0xADF7CC")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000020")]
		[Address(RVA = "0xADF8C0", Offset = "0xADF8C0", VA = "0xADF8C0")]
		private set
		{
		}
	}

	[Token(Token = "0x17000002")]
	public static CUIControlMethod ControlMethod
	{
		[Token(Token = "0x6000021")]
		[Address(RVA = "0xADF738", Offset = "0xADF738", VA = "0xADF738")]
		get
		{
			return default(CUIControlMethod);
		}
		[Token(Token = "0x6000022")]
		[Address(RVA = "0xADF920", Offset = "0xADF920", VA = "0xADF920")]
		set
		{
		}
	}

	[Token(Token = "0x17000003")]
	public LayerMask RaycastLayerMask
	{
		[Token(Token = "0x6000023")]
		[Address(RVA = "0xADF9A4", Offset = "0xADF9A4", VA = "0xADF9A4")]
		get
		{
			return default(LayerMask);
		}
		[Token(Token = "0x6000024")]
		[Address(RVA = "0xADF9AC", Offset = "0xADF9AC", VA = "0xADF9AC")]
		set
		{
		}
	}

	[Token(Token = "0x17000004")]
	public Hand UsedHand
	{
		[Token(Token = "0x6000025")]
		[Address(RVA = "0xADF9B4", Offset = "0xADF9B4", VA = "0xADF9B4")]
		get
		{
			return default(Hand);
		}
		[Token(Token = "0x6000026")]
		[Address(RVA = "0xADF9BC", Offset = "0xADF9BC", VA = "0xADF9BC")]
		set
		{
		}
	}

	[Token(Token = "0x17000005")]
	public Transform ControllerTransform
	{
		[Token(Token = "0x6000027")]
		[Address(RVA = "0xADF9C4", Offset = "0xADF9C4", VA = "0xADF9C4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000006")]
	public Vector3 ControllerPointingDirection
	{
		[Token(Token = "0x6000028")]
		[Address(RVA = "0xADFAE8", Offset = "0xADFAE8", VA = "0xADFAE8")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x17000007")]
	public Vector3 ControllerPointingOrigin
	{
		[Token(Token = "0x6000029")]
		[Address(RVA = "0xADFB8C", Offset = "0xADFB8C", VA = "0xADFB8C")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x17000008")]
	public Transform PointerTransformOverride
	{
		[Token(Token = "0x600002A")]
		[Address(RVA = "0xADFA84", Offset = "0xADFA84", VA = "0xADFA84")]
		get
		{
			return null;
		}
		[Token(Token = "0x600002B")]
		[Address(RVA = "0xADFC30", Offset = "0xADFC30", VA = "0xADFC30")]
		set
		{
		}
	}

	[Token(Token = "0x17000009")]
	public GameObject CurrentPointedAt
	{
		[Token(Token = "0x600002C")]
		[Address(RVA = "0xADFC9C", Offset = "0xADFC9C", VA = "0xADFC9C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700000A")]
	public Camera EventCamera
	{
		[Token(Token = "0x600002D")]
		[Address(RVA = "0xADFCA4", Offset = "0xADFCA4", VA = "0xADFCA4")]
		get
		{
			return null;
		}
		[Token(Token = "0x600002E")]
		[Address(RVA = "0xADF164", Offset = "0xADF164", VA = "0xADF164")]
		set
		{
		}
	}

	[Token(Token = "0x1700000B")]
	public static Ray CustomControllerRay
	{
		[Token(Token = "0x6000030")]
		[Address(RVA = "0xADFEE0", Offset = "0xADFEE0", VA = "0xADFEE0")]
		get
		{
			return default(Ray);
		}
		[Token(Token = "0x6000031")]
		[Address(RVA = "0xADFF50", Offset = "0xADFF50", VA = "0xADFF50")]
		set
		{
		}
	}

	[Token(Token = "0x1700000C")]
	public static bool CustomControllerButtonState
	{
		[Token(Token = "0x6000032")]
		[Address(RVA = "0xADFFD8", Offset = "0xADFFD8", VA = "0xADFFD8")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000033")]
		[Address(RVA = "0xAE0034", Offset = "0xAE0034", VA = "0xAE0034")]
		set
		{
		}
	}

	[Token(Token = "0x1700000D")]
	[Obsolete("Use CustomControllerButtonState instead.")]
	public static bool CustomControllerButtonDown
	{
		[Token(Token = "0x6000034")]
		[Address(RVA = "0xAE0098", Offset = "0xAE0098", VA = "0xAE0098")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000035")]
		[Address(RVA = "0xAE00F4", Offset = "0xAE00F4", VA = "0xAE00F4")]
		set
		{
		}
	}

	[Token(Token = "0x1700000E")]
	public Vector2 WorldSpaceMouseInCanvasSpace
	{
		[Token(Token = "0x6000036")]
		[Address(RVA = "0xAE0158", Offset = "0xAE0158", VA = "0xAE0158")]
		get
		{
			return default(Vector2);
		}
		[Token(Token = "0x6000037")]
		[Address(RVA = "0xAE0164", Offset = "0xAE0164", VA = "0xAE0164")]
		set
		{
		}
	}

	[Token(Token = "0x1700000F")]
	public Vector2 WorldSpaceMouseInCanvasSpaceDelta
	{
		[Token(Token = "0x6000038")]
		[Address(RVA = "0xAE0178", Offset = "0xAE0178", VA = "0xAE0178")]
		get
		{
			return default(Vector2);
		}
	}

	[Token(Token = "0x17000010")]
	public float WorldSpaceMouseSensitivity
	{
		[Token(Token = "0x6000039")]
		[Address(RVA = "0xAE0188", Offset = "0xAE0188", VA = "0xAE0188")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600003A")]
		[Address(RVA = "0xAE0190", Offset = "0xAE0190", VA = "0xAE0190")]
		set
		{
		}
	}

	[Token(Token = "0x17000011")]
	public bool GazeUseTimedClick
	{
		[Token(Token = "0x600003B")]
		[Address(RVA = "0xAE0198", Offset = "0xAE0198", VA = "0xAE0198")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600003C")]
		[Address(RVA = "0xAE01A0", Offset = "0xAE01A0", VA = "0xAE01A0")]
		set
		{
		}
	}

	[Token(Token = "0x17000012")]
	public float GazeClickTimer
	{
		[Token(Token = "0x600003D")]
		[Address(RVA = "0xAE01AC", Offset = "0xAE01AC", VA = "0xAE01AC")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600003E")]
		[Address(RVA = "0xAE01B4", Offset = "0xAE01B4", VA = "0xAE01B4")]
		set
		{
		}
	}

	[Token(Token = "0x17000013")]
	public float GazeClickTimerDelay
	{
		[Token(Token = "0x600003F")]
		[Address(RVA = "0xAE01C4", Offset = "0xAE01C4", VA = "0xAE01C4")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000040")]
		[Address(RVA = "0xAE01CC", Offset = "0xAE01CC", VA = "0xAE01CC")]
		set
		{
		}
	}

	[Token(Token = "0x17000014")]
	public float GazeTimerProgress
	{
		[Token(Token = "0x6000041")]
		[Address(RVA = "0xAE01DC", Offset = "0xAE01DC", VA = "0xAE01DC")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000015")]
	public Image GazeTimedClickProgressImage
	{
		[Token(Token = "0x6000042")]
		[Address(RVA = "0xAE01E4", Offset = "0xAE01E4", VA = "0xAE01E4")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000043")]
		[Address(RVA = "0xAE01EC", Offset = "0xAE01EC", VA = "0xAE01EC")]
		set
		{
		}
	}

	[Token(Token = "0x6000012")]
	[Address(RVA = "0xADF010", Offset = "0xADF010", VA = "0xADF010", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000013")]
	[Address(RVA = "0xADF214", Offset = "0xADF214", VA = "0xADF214", Slot = "6")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000014")]
	[Address(RVA = "0xADF240", Offset = "0xADF240", VA = "0xADF240", Slot = "32")]
	protected virtual void Update()
	{
	}

	[Token(Token = "0x6000015")]
	[Address(RVA = "0xADF43C", Offset = "0xADF43C", VA = "0xADF43C", Slot = "17")]
	public override void Process()
	{
	}

	[Token(Token = "0x6000016")]
	[Address(RVA = "0xADF5CC", Offset = "0xADF5CC", VA = "0xADF5CC", Slot = "33")]
	protected virtual void ProcessGaze()
	{
	}

	[Token(Token = "0x6000017")]
	[Address(RVA = "0xADF628", Offset = "0xADF628", VA = "0xADF628", Slot = "34")]
	protected virtual void ProcessCustomRayController()
	{
	}

	[Token(Token = "0x6000018")]
	[Address(RVA = "0xADF630", Offset = "0xADF630", VA = "0xADF630", Slot = "28")]
	protected override MouseState GetMousePointerEventData(int id)
	{
		return null;
	}

	[Token(Token = "0x6000019")]
	[Address(RVA = "0xADF794", Offset = "0xADF794", VA = "0xADF794")]
	private PointerEventData.FramePressState CustomRayFramePressedState()
	{
		return default(PointerEventData.FramePressState);
	}

	[Token(Token = "0x600001A")]
	[Address(RVA = "0xADF7C0", Offset = "0xADF7C0", VA = "0xADF7C0", Slot = "35")]
	protected virtual void ProcessViveControllers()
	{
	}

	[Token(Token = "0x600001B")]
	[Address(RVA = "0xADF7C4", Offset = "0xADF7C4", VA = "0xADF7C4", Slot = "36")]
	protected virtual void ProcessOculusVRController()
	{
	}

	[Token(Token = "0x600001C")]
	[Address(RVA = "0xADF5C8", Offset = "0xADF5C8", VA = "0xADF5C8")]
	private void ProcessSteamVR2Controllers()
	{
	}

	[Token(Token = "0x600001D")]
	[Address(RVA = "0xADF7C8", Offset = "0xADF7C8", VA = "0xADF7C8", Slot = "37")]
	protected virtual void ProcessUnityXRController()
	{
	}

	[Token(Token = "0x600001E")]
	private static T EnableInputModule<T>() where T : BaseInputModule
	{
		return null;
	}

	[Token(Token = "0x600002F")]
	[Address(RVA = "0xADFCAC", Offset = "0xADFCAC", VA = "0xADFCAC")]
	public Ray GetEventRay([Optional] Camera eventCam)
	{
		return default(Ray);
	}

	[Token(Token = "0x6000044")]
	[Address(RVA = "0xAE01F4", Offset = "0xAE01F4", VA = "0xAE01F4")]
	public CurvedUIInputModule()
	{
	}
}
[Token(Token = "0x200000B")]
public class lightScript : MonoBehaviour
{
	[Token(Token = "0x4000033")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool Impact;

	[Token(Token = "0x4000034")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float Sqr;

	[Token(Token = "0x6000046")]
	[Address(RVA = "0xAE0330", Offset = "0xAE0330", VA = "0xAE0330")]
	private void Start()
	{
	}

	[Token(Token = "0x6000047")]
	[Address(RVA = "0xAE043C", Offset = "0xAE043C", VA = "0xAE043C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000048")]
	[Address(RVA = "0xAE056C", Offset = "0xAE056C", VA = "0xAE056C")]
	public lightScript()
	{
	}
}
[Token(Token = "0x200000C")]
public class loopScript : MonoBehaviour
{
	[Token(Token = "0x200000D")]
	[CompilerGenerated]
	private sealed class <EffectLoop>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000037")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000038")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000039")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public loopScript <>4__this;

		[Token(Token = "0x400003A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GameObject <effectPlayer>5__2;

		[Token(Token = "0x17000016")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000050")]
			[Address(RVA = "0xAE083C", Offset = "0xAE083C", VA = "0xAE083C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000017")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000052")]
			[Address(RVA = "0xAE0884", Offset = "0xAE0884", VA = "0xAE0884", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600004D")]
		[Address(RVA = "0xAE0638", Offset = "0xAE0638", VA = "0xAE0638")]
		[DebuggerHidden]
		public <EffectLoop>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x600004E")]
		[Address(RVA = "0xAE0670", Offset = "0xAE0670", VA = "0xAE0670", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600004F")]
		[Address(RVA = "0xAE0674", Offset = "0xAE0674", VA = "0xAE0674", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000051")]
		[Address(RVA = "0xAE0844", Offset = "0xAE0844", VA = "0xAE0844", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000035")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject chosenEffect;

	[Token(Token = "0x4000036")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float loopTimeLimit;

	[Token(Token = "0x6000049")]
	[Address(RVA = "0xAE0574", Offset = "0xAE0574", VA = "0xAE0574")]
	private void Start()
	{
	}

	[Token(Token = "0x600004A")]
	[Address(RVA = "0xAE0578", Offset = "0xAE0578", VA = "0xAE0578")]
	public void PlayEffect()
	{
	}

	[Token(Token = "0x600004B")]
	[Address(RVA = "0xAE05C4", Offset = "0xAE05C4", VA = "0xAE05C4")]
	[IteratorStateMachine(typeof(<EffectLoop>d__4))]
	private IEnumerator EffectLoop()
	{
		return null;
	}

	[Token(Token = "0x600004C")]
	[Address(RVA = "0xAE0660", Offset = "0xAE0660", VA = "0xAE0660")]
	public loopScript()
	{
	}
}
[Token(Token = "0x200000E")]
[RequireComponent(typeof(ParticleSystem))]
public class CFX_AutoDestructShuriken : MonoBehaviour
{
	[Token(Token = "0x200000F")]
	[CompilerGenerated]
	private sealed class <CheckIfAlive>d__2 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400003C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400003D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400003E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CFX_AutoDestructShuriken <>4__this;

		[Token(Token = "0x17000018")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000059")]
			[Address(RVA = "0xAE0AC0", Offset = "0xAE0AC0", VA = "0xAE0AC0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000019")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600005B")]
			[Address(RVA = "0xAE0B08", Offset = "0xAE0B08", VA = "0xAE0B08", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000056")]
		[Address(RVA = "0xAE094C", Offset = "0xAE094C", VA = "0xAE094C")]
		[DebuggerHidden]
		public <CheckIfAlive>d__2(int <>1__state)
		{
		}

		[Token(Token = "0x6000057")]
		[Address(RVA = "0xAE097C", Offset = "0xAE097C", VA = "0xAE097C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000058")]
		[Address(RVA = "0xAE0980", Offset = "0xAE0980", VA = "0xAE0980", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600005A")]
		[Address(RVA = "0xAE0AC8", Offset = "0xAE0AC8", VA = "0xAE0AC8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400003B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool OnlyDeactivate;

	[Token(Token = "0x6000053")]
	[Address(RVA = "0xAE088C", Offset = "0xAE088C", VA = "0xAE088C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000054")]
	[Address(RVA = "0xAE08D8", Offset = "0xAE08D8", VA = "0xAE08D8")]
	[IteratorStateMachine(typeof(<CheckIfAlive>d__2))]
	private IEnumerator CheckIfAlive()
	{
		return null;
	}

	[Token(Token = "0x6000055")]
	[Address(RVA = "0xAE0974", Offset = "0xAE0974", VA = "0xAE0974")]
	public CFX_AutoDestructShuriken()
	{
	}
}
[Token(Token = "0x2000010")]
public class CFX_AutodestructWhenNoChildren : MonoBehaviour
{
	[Token(Token = "0x600005C")]
	[Address(RVA = "0xAE0B10", Offset = "0xAE0B10", VA = "0xAE0B10")]
	private void Update()
	{
	}

	[Token(Token = "0x600005D")]
	[Address(RVA = "0xAE0BA8", Offset = "0xAE0BA8", VA = "0xAE0BA8")]
	public CFX_AutodestructWhenNoChildren()
	{
	}
}
[Token(Token = "0x2000011")]
public class CFX_InspectorHelp : MonoBehaviour
{
	[Token(Token = "0x400003F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool Locked;

	[Token(Token = "0x4000040")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string Title;

	[Token(Token = "0x4000041")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string HelpText;

	[Token(Token = "0x4000042")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int MsgType;

	[Token(Token = "0x600005E")]
	[Address(RVA = "0xAE0BB0", Offset = "0xAE0BB0", VA = "0xAE0BB0")]
	[ContextMenu("Unlock editing")]
	private void Unlock()
	{
	}

	[Token(Token = "0x600005F")]
	[Address(RVA = "0xAE0BB8", Offset = "0xAE0BB8", VA = "0xAE0BB8")]
	public CFX_InspectorHelp()
	{
	}
}
[Token(Token = "0x2000012")]
[RequireComponent(typeof(Light))]
public class CFX_LightIntensityFade : MonoBehaviour
{
	[Token(Token = "0x4000043")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float duration;

	[Token(Token = "0x4000044")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float delay;

	[Token(Token = "0x4000045")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float finalIntensity;

	[Token(Token = "0x4000046")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float baseIntensity;

	[Token(Token = "0x4000047")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool autodestruct;

	[Token(Token = "0x4000048")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float p_lifetime;

	[Token(Token = "0x4000049")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float p_delay;

	[Token(Token = "0x6000060")]
	[Address(RVA = "0xAE0BC0", Offset = "0xAE0BC0", VA = "0xAE0BC0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000061")]
	[Address(RVA = "0xAE0C20", Offset = "0xAE0C20", VA = "0xAE0C20")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000062")]
	[Address(RVA = "0xAE0C9C", Offset = "0xAE0C9C", VA = "0xAE0C9C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000063")]
	[Address(RVA = "0xAE0E00", Offset = "0xAE0E00", VA = "0xAE0E00")]
	public CFX_LightIntensityFade()
	{
	}
}
[Token(Token = "0x2000013")]
public class CFX_ShurikenThreadFix : MonoBehaviour
{
	[Token(Token = "0x2000014")]
	[CompilerGenerated]
	private sealed class <WaitFrame>d__2 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400004B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400004C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400004D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CFX_ShurikenThreadFix <>4__this;

		[Token(Token = "0x1700001A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600006A")]
			[Address(RVA = "0xAE1054", Offset = "0xAE1054", VA = "0xAE1054", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700001B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600006C")]
			[Address(RVA = "0xAE109C", Offset = "0xAE109C", VA = "0xAE109C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000067")]
		[Address(RVA = "0xAE0F70", Offset = "0xAE0F70", VA = "0xAE0F70")]
		[DebuggerHidden]
		public <WaitFrame>d__2(int <>1__state)
		{
		}

		[Token(Token = "0x6000068")]
		[Address(RVA = "0xAE0FA0", Offset = "0xAE0FA0", VA = "0xAE0FA0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000069")]
		[Address(RVA = "0xAE0FA4", Offset = "0xAE0FA4", VA = "0xAE0FA4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600006B")]
		[Address(RVA = "0xAE105C", Offset = "0xAE105C", VA = "0xAE105C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400004A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ParticleSystem[] systems;

	[Token(Token = "0x6000064")]
	[Address(RVA = "0xAE0E10", Offset = "0xAE0E10", VA = "0xAE0E10")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000065")]
	[Address(RVA = "0xAE0EFC", Offset = "0xAE0EFC", VA = "0xAE0EFC")]
	[IteratorStateMachine(typeof(<WaitFrame>d__2))]
	private IEnumerator WaitFrame()
	{
		return null;
	}

	[Token(Token = "0x6000066")]
	[Address(RVA = "0xAE0F98", Offset = "0xAE0F98", VA = "0xAE0F98")]
	public CFX_ShurikenThreadFix()
	{
	}
}
[Token(Token = "0x2000015")]
public class CFX_SpawnSystem : MonoBehaviour
{
	[Token(Token = "0x400004E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static CFX_SpawnSystem instance;

	[Token(Token = "0x400004F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] objectsToPreload;

	[Token(Token = "0x4000050")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int[] objectsToPreloadTimes;

	[Token(Token = "0x4000051")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool hideObjectsInHierarchy;

	[Token(Token = "0x4000052")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool spawnAsChildren;

	[Token(Token = "0x4000053")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
	public bool onlyGetInactiveObjects;

	[Token(Token = "0x4000054")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B")]
	public bool instantiateIfNeeded;

	[Token(Token = "0x4000055")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private bool allObjectsLoaded;

	[Token(Token = "0x4000056")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Dictionary<int, List<GameObject>> instantiatedObjects;

	[Token(Token = "0x4000057")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Dictionary<int, int> poolCursors;

	[Token(Token = "0x1700001C")]
	public static bool AllObjectsLoaded
	{
		[Token(Token = "0x6000070")]
		[Address(RVA = "0xAE2034", Offset = "0xAE2034", VA = "0xAE2034")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600006D")]
	[Address(RVA = "0xAE10A4", Offset = "0xAE10A4", VA = "0xAE10A4")]
	public static GameObject GetNextObject(GameObject sourceObj, bool activateObject = true)
	{
		return null;
	}

	[Token(Token = "0x600006E")]
	[Address(RVA = "0xAE1824", Offset = "0xAE1824", VA = "0xAE1824")]
	public static void PreloadObject(GameObject sourceObj, int poolSize = 1)
	{
	}

	[Token(Token = "0x600006F")]
	[Address(RVA = "0xAE1BD0", Offset = "0xAE1BD0", VA = "0xAE1BD0")]
	public static void UnloadObjects(GameObject sourceObj)
	{
	}

	[Token(Token = "0x6000071")]
	[Address(RVA = "0xAE188C", Offset = "0xAE188C", VA = "0xAE188C")]
	private void addObjectToPool(GameObject sourceObject, int number)
	{
	}

	[Token(Token = "0x6000072")]
	[Address(RVA = "0xAE1C28", Offset = "0xAE1C28", VA = "0xAE1C28")]
	private void removeObjectsFromPool(GameObject sourceObject)
	{
	}

	[Token(Token = "0x6000073")]
	[Address(RVA = "0xAE16C4", Offset = "0xAE16C4", VA = "0xAE16C4")]
	private void increasePoolCursor(int uniqueId)
	{
	}

	[Token(Token = "0x6000074")]
	[Address(RVA = "0xAE2088", Offset = "0xAE2088", VA = "0xAE2088")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000075")]
	[Address(RVA = "0xAE2188", Offset = "0xAE2188", VA = "0xAE2188")]
	private void Start()
	{
	}

	[Token(Token = "0x6000076")]
	[Address(RVA = "0xAE2208", Offset = "0xAE2208", VA = "0xAE2208")]
	public CFX_SpawnSystem()
	{
	}
}
[Token(Token = "0x2000016")]
public class AnimationControl : MonoBehaviour
{
	[Token(Token = "0x4000058")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private string currentAnimation;

	[Token(Token = "0x6000077")]
	[Address(RVA = "0xAE2354", Offset = "0xAE2354", VA = "0xAE2354")]
	private void Start()
	{
	}

	[Token(Token = "0x6000078")]
	[Address(RVA = "0xAE2358", Offset = "0xAE2358", VA = "0xAE2358")]
	private void Update()
	{
	}

	[Token(Token = "0x6000079")]
	[Address(RVA = "0xAE235C", Offset = "0xAE235C", VA = "0xAE235C")]
	public void SetAnimation(string animationName)
	{
	}

	[Token(Token = "0x600007A")]
	[Address(RVA = "0xAE2424", Offset = "0xAE2424", VA = "0xAE2424")]
	public void SetAnimationIdle()
	{
	}

	[Token(Token = "0x600007B")]
	[Address(RVA = "0xAE24B8", Offset = "0xAE24B8", VA = "0xAE24B8")]
	public void SetDeathAnimation(int numOfClips)
	{
	}

	[Token(Token = "0x600007C")]
	[Address(RVA = "0xAE25BC", Offset = "0xAE25BC", VA = "0xAE25BC")]
	public AnimationControl()
	{
	}
}
[Token(Token = "0x2000017")]
public class AnimSpeed : MonoBehaviour
{
	[Token(Token = "0x4000059")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Animator anim;

	[Token(Token = "0x400005A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float Speed;

	[Token(Token = "0x600007D")]
	[Address(RVA = "0xAE2614", Offset = "0xAE2614", VA = "0xAE2614")]
	private void Start()
	{
	}

	[Token(Token = "0x600007E")]
	[Address(RVA = "0xAE2680", Offset = "0xAE2680", VA = "0xAE2680")]
	private void Update()
	{
	}

	[Token(Token = "0x600007F")]
	[Address(RVA = "0xAE26A4", Offset = "0xAE26A4", VA = "0xAE26A4")]
	public AnimSpeed()
	{
	}
}
[Token(Token = "0x2000018")]
public class DeathButtonControl : MonoBehaviour
{
	[Token(Token = "0x400005B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int countOfAnimations;

	[Token(Token = "0x400005C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Button button;

	[Token(Token = "0x6000080")]
	[Address(RVA = "0xAE26AC", Offset = "0xAE26AC", VA = "0xAE26AC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000081")]
	[Address(RVA = "0xAE2888", Offset = "0xAE2888", VA = "0xAE2888")]
	private void Update()
	{
	}

	[Token(Token = "0x6000082")]
	[Address(RVA = "0xAE288C", Offset = "0xAE288C", VA = "0xAE288C")]
	public DeathButtonControl()
	{
	}
}
[Token(Token = "0x2000019")]
public class KillSwitch : MonoBehaviour
{
	[Token(Token = "0x400005D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Animator anim;

	[Token(Token = "0x6000083")]
	[Address(RVA = "0xAE2894", Offset = "0xAE2894", VA = "0xAE2894")]
	private void Start()
	{
	}

	[Token(Token = "0x6000084")]
	[Address(RVA = "0xAE28EC", Offset = "0xAE28EC", VA = "0xAE28EC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000085")]
	[Address(RVA = "0xAE2960", Offset = "0xAE2960", VA = "0xAE2960")]
	public KillSwitch()
	{
	}
}
[Token(Token = "0x200001A")]
public class PanelControl : MonoBehaviour
{
	[Token(Token = "0x6000086")]
	[Address(RVA = "0xAE2968", Offset = "0xAE2968", VA = "0xAE2968")]
	private void Start()
	{
	}

	[Token(Token = "0x6000087")]
	[Address(RVA = "0xAE296C", Offset = "0xAE296C", VA = "0xAE296C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000088")]
	[Address(RVA = "0xAE2970", Offset = "0xAE2970", VA = "0xAE2970")]
	public void PanelToggle()
	{
	}

	[Token(Token = "0x6000089")]
	[Address(RVA = "0xAE29C0", Offset = "0xAE29C0", VA = "0xAE29C0")]
	public PanelControl()
	{
	}
}
[Token(Token = "0x200001B")]
public class PeriodicShake : MonoBehaviour
{
	[Token(Token = "0x200001C")]
	[CompilerGenerated]
	private sealed class <Shake>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000062")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000063")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000064")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PeriodicShake <>4__this;

		[Token(Token = "0x4000065")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <elapsed>5__2;

		[Token(Token = "0x4000066")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <randomStartX>5__3;

		[Token(Token = "0x4000067")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <randomStartY>5__4;

		[Token(Token = "0x4000068")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 <originalCamPos>5__5;

		[Token(Token = "0x1700001D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000091")]
			[Address(RVA = "0xAE2C9C", Offset = "0xAE2C9C", VA = "0xAE2C9C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700001E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000093")]
			[Address(RVA = "0xAE2CE4", Offset = "0xAE2CE4", VA = "0xAE2CE4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600008E")]
		[Address(RVA = "0xAE2AA8", Offset = "0xAE2AA8", VA = "0xAE2AA8")]
		[DebuggerHidden]
		public <Shake>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x600008F")]
		[Address(RVA = "0xAE2AF0", Offset = "0xAE2AF0", VA = "0xAE2AF0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000090")]
		[Address(RVA = "0xAE2AF4", Offset = "0xAE2AF4", VA = "0xAE2AF4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000092")]
		[Address(RVA = "0xAE2CA4", Offset = "0xAE2CA4", VA = "0xAE2CA4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400005E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float duration;

	[Token(Token = "0x400005F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float speed;

	[Token(Token = "0x4000060")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float magnitude;

	[Token(Token = "0x4000061")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool test;

	[Token(Token = "0x600008A")]
	[Address(RVA = "0xAE29C8", Offset = "0xAE29C8", VA = "0xAE29C8")]
	public void PlayShake()
	{
	}

	[Token(Token = "0x600008B")]
	[Address(RVA = "0xAE2A20", Offset = "0xAE2A20", VA = "0xAE2A20")]
	private void Update()
	{
	}

	[Token(Token = "0x600008C")]
	[Address(RVA = "0xAE2A34", Offset = "0xAE2A34", VA = "0xAE2A34")]
	[IteratorStateMachine(typeof(<Shake>d__6))]
	private IEnumerator Shake()
	{
		return null;
	}

	[Token(Token = "0x600008D")]
	[Address(RVA = "0xAE2AD0", Offset = "0xAE2AD0", VA = "0xAE2AD0")]
	public PeriodicShake()
	{
	}
}
[Token(Token = "0x200001D")]
public class PlaySound : MonoBehaviour
{
	[Token(Token = "0x4000069")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioSet animalSoundAudioSet;

	[Token(Token = "0x400006A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioSet walkingAudioSet;

	[Token(Token = "0x400006B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioSet eatingAudioSet;

	[Token(Token = "0x400006C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioSet runningAudioSet;

	[Token(Token = "0x400006D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AudioSet attackingAudioSet;

	[Token(Token = "0x400006E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AudioSet deathAudioSet;

	[Token(Token = "0x400006F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public AudioSet sleepingAudioSet;

	[Token(Token = "0x6000094")]
	[Address(RVA = "0xAE2CEC", Offset = "0xAE2CEC", VA = "0xAE2CEC")]
	private void AnimalSound()
	{
	}

	[Token(Token = "0x6000095")]
	[Address(RVA = "0xAE2D68", Offset = "0xAE2D68", VA = "0xAE2D68")]
	private void Walking()
	{
	}

	[Token(Token = "0x6000096")]
	[Address(RVA = "0xAE2DE4", Offset = "0xAE2DE4", VA = "0xAE2DE4")]
	private void Eating()
	{
	}

	[Token(Token = "0x6000097")]
	[Address(RVA = "0xAE2E60", Offset = "0xAE2E60", VA = "0xAE2E60")]
	private void Running()
	{
	}

	[Token(Token = "0x6000098")]
	[Address(RVA = "0xAE2EDC", Offset = "0xAE2EDC", VA = "0xAE2EDC")]
	private void Attacking()
	{
	}

	[Token(Token = "0x6000099")]
	[Address(RVA = "0xAE2F58", Offset = "0xAE2F58", VA = "0xAE2F58")]
	private void Death()
	{
	}

	[Token(Token = "0x600009A")]
	[Address(RVA = "0xAE2FD4", Offset = "0xAE2FD4", VA = "0xAE2FD4")]
	private void Sleeping()
	{
	}

	[Token(Token = "0x600009B")]
	[Address(RVA = "0xAE3050", Offset = "0xAE3050", VA = "0xAE3050")]
	public PlaySound()
	{
	}
}
[Token(Token = "0x200001E")]
public class CameraSmooth : MonoBehaviour
{
	[Token(Token = "0x200001F")]
	[CompilerGenerated]
	private sealed class <SetCameraPosition>d__18 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400007D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400007E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400007F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CameraSmooth <>4__this;

		[Token(Token = "0x4000080")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 mouseForce;

		[Token(Token = "0x4000081")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 <destination>5__2;

		[Token(Token = "0x1700001F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60000A8")]
			[Address(RVA = "0xAE37D0", Offset = "0xAE37D0", VA = "0xAE37D0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000020")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60000AA")]
			[Address(RVA = "0xAE3818", Offset = "0xAE3818", VA = "0xAE3818", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60000A5")]
		[Address(RVA = "0xAE3508", Offset = "0xAE3508", VA = "0xAE3508")]
		[DebuggerHidden]
		public <SetCameraPosition>d__18(int <>1__state)
		{
		}

		[Token(Token = "0x60000A6")]
		[Address(RVA = "0xAE35A0", Offset = "0xAE35A0", VA = "0xAE35A0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60000A7")]
		[Address(RVA = "0xAE35A4", Offset = "0xAE35A4", VA = "0xAE35A4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60000A9")]
		[Address(RVA = "0xAE37D8", Offset = "0xAE37D8", VA = "0xAE37D8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000020")]
	[CompilerGenerated]
	private sealed class <ZoomIn>d__19 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000082")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000083")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000084")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CameraSmooth <>4__this;

		[Token(Token = "0x4000085")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 <zoomedPosition>5__2;

		[Token(Token = "0x4000086")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 <zoomedRotation>5__3;

		[Token(Token = "0x17000021")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60000AE")]
			[Address(RVA = "0xAE3B10", Offset = "0xAE3B10", VA = "0xAE3B10", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000022")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60000B0")]
			[Address(RVA = "0xAE3B58", Offset = "0xAE3B58", VA = "0xAE3B58", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60000AB")]
		[Address(RVA = "0xAE3530", Offset = "0xAE3530", VA = "0xAE3530")]
		[DebuggerHidden]
		public <ZoomIn>d__19(int <>1__state)
		{
		}

		[Token(Token = "0x60000AC")]
		[Address(RVA = "0xAE3820", Offset = "0xAE3820", VA = "0xAE3820", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60000AD")]
		[Address(RVA = "0xAE3824", Offset = "0xAE3824", VA = "0xAE3824", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60000AF")]
		[Address(RVA = "0xAE3B18", Offset = "0xAE3B18", VA = "0xAE3B18", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000021")]
	[CompilerGenerated]
	private sealed class <ZoomOut>d__20 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000087")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000088")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000089")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CameraSmooth <>4__this;

		[Token(Token = "0x400008A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 <zoomedPosition>5__2;

		[Token(Token = "0x400008B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 <zoomedRotation>5__3;

		[Token(Token = "0x17000023")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60000B4")]
			[Address(RVA = "0xAE3E50", Offset = "0xAE3E50", VA = "0xAE3E50", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000024")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60000B6")]
			[Address(RVA = "0xAE3E98", Offset = "0xAE3E98", VA = "0xAE3E98", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60000B1")]
		[Address(RVA = "0xAE3558", Offset = "0xAE3558", VA = "0xAE3558")]
		[DebuggerHidden]
		public <ZoomOut>d__20(int <>1__state)
		{
		}

		[Token(Token = "0x60000B2")]
		[Address(RVA = "0xAE3B60", Offset = "0xAE3B60", VA = "0xAE3B60", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60000B3")]
		[Address(RVA = "0xAE3B64", Offset = "0xAE3B64", VA = "0xAE3B64", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60000B5")]
		[Address(RVA = "0xAE3E58", Offset = "0xAE3E58", VA = "0xAE3E58", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000070")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool isStarted;

	[Token(Token = "0x4000071")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float movingForce;

	[Token(Token = "0x4000072")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float zoomAngle;

	[Token(Token = "0x4000073")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float zoomHeight;

	[Token(Token = "0x4000074")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float zoomSpeed;

	[Token(Token = "0x4000075")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Vector3 defaultRotation;

	[Token(Token = "0x4000076")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector3 defaultPosition;

	[Token(Token = "0x4000077")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private bool zoomingOut;

	[Token(Token = "0x4000078")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
	private bool zoomingIn;

	[Token(Token = "0x4000079")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float interval;

	[Token(Token = "0x400007A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float intervalCache;

	[Token(Token = "0x400007B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3 mouseForce;

	[Token(Token = "0x400007C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private Vector3 LastMousePosition;

	[Token(Token = "0x600009C")]
	[Address(RVA = "0xAE3058", Offset = "0xAE3058", VA = "0xAE3058")]
	private void Start()
	{
	}

	[Token(Token = "0x600009D")]
	[Address(RVA = "0xAE30B0", Offset = "0xAE30B0", VA = "0xAE30B0")]
	private void Update()
	{
	}

	[Token(Token = "0x600009E")]
	[Address(RVA = "0xAE31B8", Offset = "0xAE31B8", VA = "0xAE31B8")]
	private void StartMove()
	{
	}

	[Token(Token = "0x600009F")]
	[Address(RVA = "0xAE3324", Offset = "0xAE3324", VA = "0xAE3324")]
	private void StopMove()
	{
	}

	[Token(Token = "0x60000A0")]
	[Address(RVA = "0xAE31E8", Offset = "0xAE31E8", VA = "0xAE31E8")]
	private void Move()
	{
	}

	[Token(Token = "0x60000A1")]
	[Address(RVA = "0xAE3470", Offset = "0xAE3470", VA = "0xAE3470")]
	[IteratorStateMachine(typeof(<SetCameraPosition>d__18))]
	private IEnumerator SetCameraPosition(Vector3 mouseForce)
	{
		return null;
	}

	[Token(Token = "0x60000A2")]
	[Address(RVA = "0xAE33FC", Offset = "0xAE33FC", VA = "0xAE33FC")]
	[IteratorStateMachine(typeof(<ZoomIn>d__19))]
	private IEnumerator ZoomIn()
	{
		return null;
	}

	[Token(Token = "0x60000A3")]
	[Address(RVA = "0xAE3388", Offset = "0xAE3388", VA = "0xAE3388")]
	[IteratorStateMachine(typeof(<ZoomOut>d__20))]
	private IEnumerator ZoomOut()
	{
		return null;
	}

	[Token(Token = "0x60000A4")]
	[Address(RVA = "0xAE3580", Offset = "0xAE3580", VA = "0xAE3580")]
	public CameraSmooth()
	{
	}
}
[Token(Token = "0x2000022")]
public class Move : MonoBehaviour
{
	[Token(Token = "0x400008C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float speed;

	[Token(Token = "0x400008D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float spacing;

	[Token(Token = "0x400008E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Vector3 pos;

	[Token(Token = "0x60000B7")]
	[Address(RVA = "0xAE3EA0", Offset = "0xAE3EA0", VA = "0xAE3EA0")]
	private void Start()
	{
	}

	[Token(Token = "0x60000B8")]
	[Address(RVA = "0xAE3ED0", Offset = "0xAE3ED0", VA = "0xAE3ED0")]
	private void Update()
	{
	}

	[Token(Token = "0x60000B9")]
	[Address(RVA = "0xAE4078", Offset = "0xAE4078", VA = "0xAE4078")]
	public Move()
	{
	}
}
[Token(Token = "0x2000023")]
[DisallowMultipleComponent]
public class Outline : MonoBehaviour
{
	[Token(Token = "0x2000024")]
	public enum Mode
	{
		[Token(Token = "0x400009E")]
		OutlineAll,
		[Token(Token = "0x400009F")]
		OutlineVisible,
		[Token(Token = "0x40000A0")]
		OutlineHidden,
		[Token(Token = "0x40000A1")]
		OutlineAndSilhouette,
		[Token(Token = "0x40000A2")]
		SilhouetteOnly
	}

	[Serializable]
	[Token(Token = "0x2000025")]
	private class ListVector3
	{
		[Token(Token = "0x40000A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<Vector3> data;

		[Token(Token = "0x60000CC")]
		[Address(RVA = "0xAE6060", Offset = "0xAE6060", VA = "0xAE6060")]
		public ListVector3()
		{
		}
	}

	[Token(Token = "0x400008F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly HashSet<Mesh> RegisteredMeshes;

	[Token(Token = "0x4000090")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Mode outlineMode;

	[Token(Token = "0x4000091")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private Color outlineColor;

	[Token(Token = "0x4000092")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Range(0f, 10f)]
	[SerializeField]
	private float outlineWidth;

	[Token(Token = "0x4000093")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("Precompute enabled: Per-vertex calculations are performed in the editor and serialized with the object. Precompute disabled: Per-vertex calculations are performed at runtime in Awake(). This may cause a pause for large meshes.")]
	[SerializeField]
	[Header("Optional")]
	private bool precomputeOutline;

	[Token(Token = "0x4000094")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private List<Mesh> bakeKeys;

	[Token(Token = "0x4000095")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private List<ListVector3> bakeValues;

	[Token(Token = "0x4000096")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private List<Renderer> renderers;

	[Token(Token = "0x4000097")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Material outlineMaskMaterial;

	[Token(Token = "0x4000098")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Material outlineFillMaterial;

	[Token(Token = "0x4000099")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool needsUpdate;

	[Token(Token = "0x400009A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static readonly int OutlineColorProperty;

	[Token(Token = "0x400009B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static readonly int ZTestProperty;

	[Token(Token = "0x400009C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static readonly int OutlineWidthProperty;

	[Token(Token = "0x17000025")]
	public Mode OutlineMode
	{
		[Token(Token = "0x60000BA")]
		[Address(RVA = "0xAE408C", Offset = "0xAE408C", VA = "0xAE408C")]
		get
		{
			return default(Mode);
		}
		[Token(Token = "0x60000BB")]
		[Address(RVA = "0xAE4094", Offset = "0xAE4094", VA = "0xAE4094")]
		set
		{
		}
	}

	[Token(Token = "0x17000026")]
	public Color OutlineColor
	{
		[Token(Token = "0x60000BC")]
		[Address(RVA = "0xAE40A4", Offset = "0xAE40A4", VA = "0xAE40A4")]
		get
		{
			return default(Color);
		}
		[Token(Token = "0x60000BD")]
		[Address(RVA = "0xAE40B0", Offset = "0xAE40B0", VA = "0xAE40B0")]
		set
		{
		}
	}

	[Token(Token = "0x17000027")]
	public float OutlineWidth
	{
		[Token(Token = "0x60000BE")]
		[Address(RVA = "0xAE40C4", Offset = "0xAE40C4", VA = "0xAE40C4")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60000BF")]
		[Address(RVA = "0xAE40CC", Offset = "0xAE40CC", VA = "0xAE40CC")]
		set
		{
		}
	}

	[Token(Token = "0x60000C0")]
	[Address(RVA = "0xAE40DC", Offset = "0xAE40DC", VA = "0xAE40DC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000C1")]
	[Address(RVA = "0xAE47B8", Offset = "0xAE47B8", VA = "0xAE47B8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000C2")]
	[Address(RVA = "0xAE4AA4", Offset = "0xAE4AA4", VA = "0xAE4AA4")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x60000C3")]
	[Address(RVA = "0xAE4F60", Offset = "0xAE4F60", VA = "0xAE4F60")]
	private void Update()
	{
	}

	[Token(Token = "0x60000C4")]
	[Address(RVA = "0xAE51AC", Offset = "0xAE51AC", VA = "0xAE51AC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60000C5")]
	[Address(RVA = "0xAE53F4", Offset = "0xAE53F4", VA = "0xAE53F4")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60000C6")]
	[Address(RVA = "0xAE4C04", Offset = "0xAE4C04", VA = "0xAE4C04")]
	private void Bake()
	{
	}

	[Token(Token = "0x60000C7")]
	[Address(RVA = "0xAE44B0", Offset = "0xAE44B0", VA = "0xAE44B0")]
	private void LoadSmoothNormals()
	{
	}

	[Token(Token = "0x60000C8")]
	[Address(RVA = "0xAE545C", Offset = "0xAE545C", VA = "0xAE545C")]
	private List<Vector3> SmoothNormals(Mesh mesh)
	{
		return null;
	}

	[Token(Token = "0x60000C9")]
	[Address(RVA = "0xAE4F74", Offset = "0xAE4F74", VA = "0xAE4F74")]
	private void UpdateMaterialProperties()
	{
	}

	[Token(Token = "0x60000CA")]
	[Address(RVA = "0xAE6068", Offset = "0xAE6068", VA = "0xAE6068")]
	public Outline()
	{
	}
}
[Token(Token = "0x2000027")]
[SelectionBase]
public class Addon : MonoBehaviour, IBurnable
{
	[Token(Token = "0x40000A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Configuration", order = 1)]
	public TerrainType Terrain;

	[Token(Token = "0x40000A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public BuildingType Type;

	[Token(Token = "0x40000A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TechLevel TechLevel;

	[Token(Token = "0x40000AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject SfxFire;

	[Token(Token = "0x40000AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool isCrafter;

	[Token(Token = "0x40000AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	public bool concreteGround;

	[Token(Token = "0x40000AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Header("Informations", order = 2)]
	public Town Town;

	[Token(Token = "0x40000AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool loaded;

	[Token(Token = "0x40000AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private GameObject fireVfxInstance;

	[Token(Token = "0x40000B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool isBurning;

	[Token(Token = "0x40000B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private float startBurningTime;

	[Token(Token = "0x17000028")]
	public bool CanBeIgnited
	{
		[Token(Token = "0x60000DA")]
		[Address(RVA = "0xAE6C44", Offset = "0xAE6C44", VA = "0xAE6C44", Slot = "6")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60000D1")]
	[Address(RVA = "0xAE6420", Offset = "0xAE6420", VA = "0xAE6420")]
	public void LoadData(AddonData data, Town city)
	{
	}

	[Token(Token = "0x60000D2")]
	[Address(RVA = "0xAE654C", Offset = "0xAE654C", VA = "0xAE654C")]
	public AddonData ToData()
	{
		return null;
	}

	[Token(Token = "0x60000D3")]
	[Address(RVA = "0xAE6680", Offset = "0xAE6680", VA = "0xAE6680")]
	private void Start()
	{
	}

	[Token(Token = "0x60000D4")]
	[Address(RVA = "0xAE67E0", Offset = "0xAE67E0", VA = "0xAE67E0")]
	private void Update()
	{
	}

	[Token(Token = "0x60000D5")]
	[Address(RVA = "0xAE6830", Offset = "0xAE6830", VA = "0xAE6830")]
	public void CleanAndDestroy(float delay)
	{
	}

	[Token(Token = "0x60000D6")]
	[Address(RVA = "0xAE6780", Offset = "0xAE6780", VA = "0xAE6780")]
	private void SetRotation(Direction direction)
	{
	}

	[Token(Token = "0x60000D7")]
	[Address(RVA = "0xAE68AC", Offset = "0xAE68AC", VA = "0xAE68AC")]
	public void SetTown(Town town)
	{
	}

	[Token(Token = "0x60000D8")]
	[Address(RVA = "0xAE69BC", Offset = "0xAE69BC", VA = "0xAE69BC", Slot = "4")]
	public void Burn()
	{
	}

	[Token(Token = "0x60000D9")]
	[Address(RVA = "0xAE6B7C", Offset = "0xAE6B7C", VA = "0xAE6B7C", Slot = "5")]
	public void Extinguish(bool crowd = false)
	{
	}

	[Token(Token = "0x60000DB")]
	[Address(RVA = "0xAE6C54", Offset = "0xAE6C54", VA = "0xAE6C54")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60000DC")]
	[Address(RVA = "0xAE6DFC", Offset = "0xAE6DFC", VA = "0xAE6DFC")]
	public void OnColorChanged(Color newColor)
	{
	}

	[Token(Token = "0x60000DD")]
	[Address(RVA = "0xAE6EA4", Offset = "0xAE6EA4", VA = "0xAE6EA4")]
	public Addon()
	{
	}
}
[Token(Token = "0x2000028")]
[RequireComponent(typeof(AudioSource))]
public class AmbientAudioSource : MonoBehaviour
{
	[Token(Token = "0x40000B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioSet audioSet;

	[Token(Token = "0x40000B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioSource audioSource;

	[Token(Token = "0x60000DE")]
	[Address(RVA = "0xAE6EAC", Offset = "0xAE6EAC", VA = "0xAE6EAC")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x60000DF")]
	[Address(RVA = "0xAE6F04", Offset = "0xAE6F04", VA = "0xAE6F04")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000E0")]
	[Address(RVA = "0xAE702C", Offset = "0xAE702C", VA = "0xAE702C")]
	public AmbientAudioSource()
	{
	}
}
[Token(Token = "0x2000029")]
public class AnimalSpawner : MonoBehaviour, IPlayerAwareReactive, IHideShow, IElectrocutable, ITooltipProvider, IKinematicObject
{
	[Token(Token = "0x40000B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimalType AnimalType;

	[Token(Token = "0x40000B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string AnimalToolTipKey;

	[Token(Token = "0x40000B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject MainDisplay;

	[Token(Token = "0x40000B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject LowFiDisplay;

	[Token(Token = "0x40000B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject HiFiDisplay;

	[Token(Token = "0x40000B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float MoveSpeed;

	[Token(Token = "0x40000BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float CloseDistance;

	[Token(Token = "0x40000BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Position gamePosition;

	[Token(Token = "0x40000BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float AttackAnimationDelay;

	[Token(Token = "0x40000BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool IsPlayerAware;

	[Token(Token = "0x40000BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
	public bool isAttacking;

	[Token(Token = "0x40000BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5A")]
	private bool hidden;

	[Token(Token = "0x40000C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5B")]
	private bool isWalking;

	[Token(Token = "0x40000C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private bool isDead;

	[Token(Token = "0x40000C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private AnimalSpawner prey;

	[Token(Token = "0x40000C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Animator animator;

	[Token(Token = "0x40000C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Rigidbody rigidbody;

	[Token(Token = "0x40000C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Vector3 destination;

	[Token(Token = "0x40000C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private Vector3 position;

	[Token(Token = "0x40000C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private bool positionRefreshed;

	[Token(Token = "0x40000C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Resource resource;

	[Token(Token = "0x40000C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private float startAttackTime;

	[Token(Token = "0x40000CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly int IsDead;

	[Token(Token = "0x40000CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static readonly int IsDead_0;

	[Token(Token = "0x40000CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static readonly int IsWalking;

	[Token(Token = "0x40000CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static readonly int IsRunning;

	[Token(Token = "0x40000CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static readonly int IsSwimming;

	[Token(Token = "0x40000CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private static readonly int IsAttacking;

	[Token(Token = "0x40000D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private int floorAndWaterLayerMask;

	[Token(Token = "0x40000D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public Vector3 lowFiAlivePos;

	[Token(Token = "0x40000D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	public Vector3 lowFiAliveRot;

	[Token(Token = "0x40000D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public Vector3 lowFiDeathPos;

	[Token(Token = "0x40000D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	public Vector3 lowFiDeathRot;

	[Token(Token = "0x17000029")]
	public bool IsAlive
	{
		[Token(Token = "0x60000E1")]
		[Address(RVA = "0xAE7034", Offset = "0xAE7034", VA = "0xAE7034")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700002A")]
	public Vector3 GetPosition
	{
		[Token(Token = "0x60000F0")]
		[Address(RVA = "0xAE7AA8", Offset = "0xAE7AA8", VA = "0xAE7AA8")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x60000E2")]
	[Address(RVA = "0xAE7044", Offset = "0xAE7044", VA = "0xAE7044")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000E3")]
	[Address(RVA = "0xAE7370", Offset = "0xAE7370", VA = "0xAE7370")]
	private void Update()
	{
	}

	[Token(Token = "0x60000E4")]
	[Address(RVA = "0xAE777C", Offset = "0xAE777C", VA = "0xAE777C", Slot = "4")]
	public void SetPlayerAware(bool value)
	{
	}

	[Token(Token = "0x60000E5")]
	[Address(RVA = "0xAE7230", Offset = "0xAE7230", VA = "0xAE7230")]
	private void RefreshDisplay()
	{
	}

	[Token(Token = "0x60000E6")]
	[Address(RVA = "0xAE7950", Offset = "0xAE7950", VA = "0xAE7950", Slot = "5")]
	public bool IsTown(out Town town)
	{
		return default(bool);
	}

	[Token(Token = "0x60000E7")]
	[Address(RVA = "0xAE7970", Offset = "0xAE7970", VA = "0xAE7970", Slot = "6")]
	public void Hide()
	{
	}

	[Token(Token = "0x60000E8")]
	[Address(RVA = "0xAE799C", Offset = "0xAE799C", VA = "0xAE799C", Slot = "7")]
	public void Show()
	{
	}

	[Token(Token = "0x60000E9")]
	[Address(RVA = "0xAE79CC", Offset = "0xAE79CC", VA = "0xAE79CC")]
	public void Die()
	{
	}

	[Token(Token = "0x60000EA")]
	[Address(RVA = "0xAE7A00", Offset = "0xAE7A00", VA = "0xAE7A00")]
	public void Respawn()
	{
	}

	[Token(Token = "0x60000EB")]
	[Address(RVA = "0xAE7A20", Offset = "0xAE7A20", VA = "0xAE7A20")]
	public bool SetDestination(Vector3 newDestination)
	{
		return default(bool);
	}

	[Token(Token = "0x60000EC")]
	[Address(RVA = "0xAE743C", Offset = "0xAE743C", VA = "0xAE743C")]
	private void MoveToDestination()
	{
	}

	[Token(Token = "0x60000ED")]
	[Address(RVA = "0xAE7788", Offset = "0xAE7788", VA = "0xAE7788")]
	public void SetIsWalking()
	{
	}

	[Token(Token = "0x60000EE")]
	[Address(RVA = "0xAE7C70", Offset = "0xAE7C70", VA = "0xAE7C70")]
	public void SetIsAttacking()
	{
	}

	[Token(Token = "0x60000EF")]
	[Address(RVA = "0xAE7868", Offset = "0xAE7868", VA = "0xAE7868")]
	private void SetIsDead()
	{
	}

	[Token(Token = "0x60000F1")]
	[Address(RVA = "0xAE7CF8", Offset = "0xAE7CF8", VA = "0xAE7CF8")]
	public void Attack(AnimalSpawner other)
	{
	}

	[Token(Token = "0x60000F2")]
	[Address(RVA = "0xAE7BDC", Offset = "0xAE7BDC", VA = "0xAE7BDC")]
	private void DoAttack()
	{
	}

	[Token(Token = "0x60000F3")]
	[Address(RVA = "0xAE776C", Offset = "0xAE776C", VA = "0xAE776C")]
	private void EndAttack()
	{
	}

	[Token(Token = "0x60000F4")]
	[Address(RVA = "0xAE7DA0", Offset = "0xAE7DA0", VA = "0xAE7DA0", Slot = "8")]
	public void Electrocute()
	{
	}

	[Token(Token = "0x60000F5")]
	[Address(RVA = "0xAE7DA4", Offset = "0xAE7DA4", VA = "0xAE7DA4")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60000F6")]
	[Address(RVA = "0xAE7D3C", Offset = "0xAE7D3C", VA = "0xAE7D3C")]
	public void DieAndDestroy()
	{
	}

	[Token(Token = "0x60000F7")]
	[Address(RVA = "0xAE7E18", Offset = "0xAE7E18", VA = "0xAE7E18")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x60000F8")]
	[Address(RVA = "0xAE7F20", Offset = "0xAE7F20", VA = "0xAE7F20", Slot = "9")]
	public TooltipDescription GetTooltip()
	{
		return default(TooltipDescription);
	}

	[Token(Token = "0x60000F9")]
	[Address(RVA = "0xAE8018", Offset = "0xAE8018", VA = "0xAE8018")]
	private static string GetLocalizedText(string key)
	{
		return null;
	}

	[Token(Token = "0x60000FA")]
	[Address(RVA = "0xAE8074", Offset = "0xAE8074", VA = "0xAE8074")]
	private string GetKeyFromResourceType(ResourceType resourceType)
	{
		return null;
	}

	[Token(Token = "0x60000FB")]
	[Address(RVA = "0xAE81B4", Offset = "0xAE81B4", VA = "0xAE81B4", Slot = "10")]
	public bool IsOnValidGround()
	{
		return default(bool);
	}

	[Token(Token = "0x60000FC")]
	[Address(RVA = "0xAE81BC", Offset = "0xAE81BC", VA = "0xAE81BC", Slot = "11")]
	public bool CanPlaySound()
	{
		return default(bool);
	}

	[Token(Token = "0x60000FD")]
	[Address(RVA = "0xAE81CC", Offset = "0xAE81CC", VA = "0xAE81CC", Slot = "12")]
	public void OnGrab()
	{
	}

	[Token(Token = "0x60000FE")]
	[Address(RVA = "0xAE8230", Offset = "0xAE8230", VA = "0xAE8230", Slot = "13")]
	public void OnGrounded()
	{
	}

	[Token(Token = "0x60000FF")]
	[Address(RVA = "0xAE82B0", Offset = "0xAE82B0", VA = "0xAE82B0", Slot = "14")]
	public bool ResetPositionOnGround()
	{
		return default(bool);
	}

	[Token(Token = "0x6000100")]
	[Address(RVA = "0xAE82B8", Offset = "0xAE82B8", VA = "0xAE82B8")]
	public AnimalSpawner()
	{
	}
}
[Token(Token = "0x200002A")]
public class AreaOfEffect : MonoBehaviour
{
	[Token(Token = "0x200002B")]
	[CompilerGenerated]
	private sealed class <ApplyEffect>d__19 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40000E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40000E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40000E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Collider[] surroundingObjects;

		[Token(Token = "0x40000EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public MiracleEffect effect;

		[Token(Token = "0x40000EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 miraclePosition;

		[Token(Token = "0x40000EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AreaOfEffect <>4__this;

		[Token(Token = "0x40000ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public int resultCount;

		[Token(Token = "0x40000EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private int <done>5__2;

		[Token(Token = "0x40000EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool <atLeastOne>5__3;

		[Token(Token = "0x40000F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private int <index>5__4;

		[Token(Token = "0x1700002B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600010A")]
			[Address(RVA = "0xAE8EEC", Offset = "0xAE8EEC", VA = "0xAE8EEC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700002C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600010C")]
			[Address(RVA = "0xAE8F34", Offset = "0xAE8F34", VA = "0xAE8F34", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000107")]
		[Address(RVA = "0xAE8A34", Offset = "0xAE8A34", VA = "0xAE8A34")]
		[DebuggerHidden]
		public <ApplyEffect>d__19(int <>1__state)
		{
		}

		[Token(Token = "0x6000108")]
		[Address(RVA = "0xAE8B18", Offset = "0xAE8B18", VA = "0xAE8B18", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000109")]
		[Address(RVA = "0xAE8B1C", Offset = "0xAE8B1C", VA = "0xAE8B1C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600010B")]
		[Address(RVA = "0xAE8EF4", Offset = "0xAE8EF4", VA = "0xAE8EF4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200002C")]
	[CompilerGenerated]
	private sealed class <FadeOutTransform>d__20 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40000F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40000F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40000F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float delay;

		[Token(Token = "0x40000F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform transformToScale;

		[Token(Token = "0x40000F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float duration;

		[Token(Token = "0x40000F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool destroy;

		[Token(Token = "0x40000F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float <time>5__2;

		[Token(Token = "0x40000F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float <startValue>5__3;

		[Token(Token = "0x1700002D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000110")]
			[Address(RVA = "0xAE90EC", Offset = "0xAE90EC", VA = "0xAE90EC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700002E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000112")]
			[Address(RVA = "0xAE9134", Offset = "0xAE9134", VA = "0xAE9134", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600010D")]
		[Address(RVA = "0xAE8A5C", Offset = "0xAE8A5C", VA = "0xAE8A5C")]
		[DebuggerHidden]
		public <FadeOutTransform>d__20(int <>1__state)
		{
		}

		[Token(Token = "0x600010E")]
		[Address(RVA = "0xAE8F3C", Offset = "0xAE8F3C", VA = "0xAE8F3C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600010F")]
		[Address(RVA = "0xAE8F40", Offset = "0xAE8F40", VA = "0xAE8F40", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000111")]
		[Address(RVA = "0xAE90F4", Offset = "0xAE90F4", VA = "0xAE90F4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200002D")]
	[CompilerGenerated]
	private sealed class <SelfDestruct>d__21 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40000F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40000FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40000FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float delay;

		[Token(Token = "0x40000FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AreaOfEffect <>4__this;

		[Token(Token = "0x1700002F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000116")]
			[Address(RVA = "0xAE9234", Offset = "0xAE9234", VA = "0xAE9234", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000030")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000118")]
			[Address(RVA = "0xAE927C", Offset = "0xAE927C", VA = "0xAE927C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000113")]
		[Address(RVA = "0xAE8A84", Offset = "0xAE8A84", VA = "0xAE8A84")]
		[DebuggerHidden]
		public <SelfDestruct>d__21(int <>1__state)
		{
		}

		[Token(Token = "0x6000114")]
		[Address(RVA = "0xAE913C", Offset = "0xAE913C", VA = "0xAE913C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000115")]
		[Address(RVA = "0xAE9140", Offset = "0xAE9140", VA = "0xAE9140", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000117")]
		[Address(RVA = "0xAE923C", Offset = "0xAE923C", VA = "0xAE923C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40000D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Miracle Configuration")]
	public MiracleType miracleType;

	[Token(Token = "0x40000D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("The miracle effect that will be applied on every object in the area")]
	public MiracleEffect miracleEffect;

	[Token(Token = "0x40000D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("Is it a positive or negative miracle? It affect how observers will behave when they see it")]
	public bool positiveMiracle;

	[Token(Token = "0x40000D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Tooltip("The radius to consider for observers")]
	public float observableRadius;

	[Token(Token = "0x40000D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[FormerlySerializedAs("Radius")]
	public float effectRadius;

	[Token(Token = "0x40000DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[Tooltip("When the effect is applied wait a delay before applying this effect to the next object in radius")]
	public bool delayBetween;

	[Token(Token = "0x40000DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Tooltip("How much time to wait if delay between is checked")]
	public float delayBetweenEach;

	[Token(Token = "0x40000DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[Tooltip("Check this if you want to change the scale of a visual effect overt time")]
	[Header("Scaling Configuration")]
	public bool changeScale;

	[Token(Token = "0x40000DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform effectToScale;

	[Token(Token = "0x40000DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float fadeOutScaleDelay;

	[Token(Token = "0x40000DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float scaleDuration;

	[Token(Token = "0x40000E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Tooltip("Check this if you want to prevent the scaled transform to be destroyed at the end of the scale duration")]
	public bool keepScaledTransform;

	[Token(Token = "0x40000E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[Tooltip("How much time before we destroy this AOE")]
	public float duration;

	[Token(Token = "0x40000E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Tooltip("A sound effect to play on impact")]
	[Header("Audio Configuration")]
	public AudioSet SoundEffects;

	[Token(Token = "0x40000E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Tooltip("A loop to play on impact and stop after duration")]
	public StartLoopStopManager StartLoopStopManager;

	[Token(Token = "0x40000E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[Tooltip("How much time before we send the stop signal to the audio loop")]
	public float loopDuration;

	[Token(Token = "0x40000E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private Vector3 position;

	[Token(Token = "0x40000E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private readonly Collider[] overlapSphereResult;

	[Token(Token = "0x6000102")]
	[Address(RVA = "0xAE842C", Offset = "0xAE842C", VA = "0xAE842C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000103")]
	[Address(RVA = "0xAE8838", Offset = "0xAE8838", VA = "0xAE8838")]
	[IteratorStateMachine(typeof(<ApplyEffect>d__19))]
	private IEnumerator ApplyEffect(Vector3 miraclePosition, MiracleEffect effect, Collider[] surroundingObjects, int resultCount)
	{
		return null;
	}

	[Token(Token = "0x6000104")]
	[Address(RVA = "0xAE8910", Offset = "0xAE8910", VA = "0xAE8910")]
	[IteratorStateMachine(typeof(<FadeOutTransform>d__20))]
	private static IEnumerator FadeOutTransform(Transform transformToScale, float duration, bool destroy = true, float delay = 0f)
	{
		return null;
	}

	[Token(Token = "0x6000105")]
	[Address(RVA = "0xAE89B0", Offset = "0xAE89B0", VA = "0xAE89B0")]
	[IteratorStateMachine(typeof(<SelfDestruct>d__21))]
	private IEnumerator SelfDestruct(float delay)
	{
		return null;
	}

	[Token(Token = "0x6000106")]
	[Address(RVA = "0xAE8AAC", Offset = "0xAE8AAC", VA = "0xAE8AAC")]
	public AreaOfEffect()
	{
	}
}
[Token(Token = "0x200002E")]
[SelectionBase]
public class Army : MonoBehaviour, IPathFollowerObserver
{
	[Token(Token = "0x200002F")]
	public enum Formation
	{
		[Token(Token = "0x4000112")]
		Columns,
		[Token(Token = "0x4000113")]
		Line,
		[Token(Token = "0x4000114")]
		Circle
	}

	[Token(Token = "0x2000030")]
	public enum ArmyStatus
	{
		[Token(Token = "0x4000116")]
		Creation,
		[Token(Token = "0x4000117")]
		Recruit,
		[Token(Token = "0x4000118")]
		Wait,
		[Token(Token = "0x4000119")]
		Move,
		[Token(Token = "0x400011A")]
		FightArmies,
		[Token(Token = "0x400011B")]
		Capture,
		[Token(Token = "0x400011C")]
		Regroup
	}

	[Token(Token = "0x40000FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public NavigationAgentConfiguration navigationAgentConfiguration;

	[Token(Token = "0x40000FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<Human> units;

	[Token(Token = "0x40000FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Town originTown;

	[Token(Token = "0x4000100")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject bannerPlaceholder;

	[Token(Token = "0x4000101")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private ArmyStatus internalArmyStatus;

	[Token(Token = "0x4000102")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private MilitaryObjective currentObjective;

	[Token(Token = "0x4000103")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private MilitaryObjective mainObjective;

	[Token(Token = "0x4000104")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[CanBeNull]
	private MilitaryObjective capturingObjective;

	[Token(Token = "0x4000105")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private PathFollower pathFollower;

	[Token(Token = "0x4000106")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float lastRecruitTime;

	[Token(Token = "0x4000107")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Banner banner;

	[Token(Token = "0x4000108")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Vector3 bannerLocalPosition;

	[Token(Token = "0x4000109")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private Formation currentFormation;

	[Token(Token = "0x400010A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private float startWaitTime;

	[Token(Token = "0x400010B")]
	private const float MaxWaitTime = 15f;

	[Token(Token = "0x400010C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly HashSet<Job> Recruits;

	[Token(Token = "0x400010D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public readonly List<Army> OpposingArmies;

	[NonSerialized]
	[Token(Token = "0x400010E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Realm Realm;

	[NonSerialized]
	[Token(Token = "0x400010F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Vector3 BattlePosition;

	[Token(Token = "0x4000110")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static readonly Vector3 WaterOffset;

	[Token(Token = "0x17000031")]
	public ArmyStatus Status
	{
		[Token(Token = "0x600011A")]
		[Address(RVA = "0xAE9324", Offset = "0xAE9324", VA = "0xAE9324")]
		get
		{
			return default(ArmyStatus);
		}
		[Token(Token = "0x600011B")]
		[Address(RVA = "0xAE932C", Offset = "0xAE932C", VA = "0xAE932C")]
		private set
		{
		}
	}

	[Token(Token = "0x17000032")]
	public MilitaryObjective Objective
	{
		[Token(Token = "0x600011C")]
		[Address(RVA = "0xAE9528", Offset = "0xAE9528", VA = "0xAE9528")]
		get
		{
			return null;
		}
		[Token(Token = "0x600011D")]
		[Address(RVA = "0xAE95B0", Offset = "0xAE95B0", VA = "0xAE95B0")]
		private set
		{
		}
	}

	[Token(Token = "0x6000119")]
	[Address(RVA = "0xAE9284", Offset = "0xAE9284", VA = "0xAE9284")]
	private void Awake()
	{
	}

	[Token(Token = "0x600011E")]
	[Address(RVA = "0xAE96C0", Offset = "0xAE96C0", VA = "0xAE96C0")]
	private static Vector3[] FindColumnsFormationPositions(Vector3 startPosition, float distance, int positionCount)
	{
		return null;
	}

	[Token(Token = "0x600011F")]
	[Address(RVA = "0xAE9824", Offset = "0xAE9824", VA = "0xAE9824")]
	private static Vector3[] FindLineFormationPositions(Vector3 startPosition, float distance, int positionCount)
	{
		return null;
	}

	[Token(Token = "0x6000120")]
	[Address(RVA = "0xAE9950", Offset = "0xAE9950", VA = "0xAE9950")]
	public static Vector3[] FindCircleFormationPositions(Vector3 startPosition, float distance, int positionCount)
	{
		return null;
	}

	[Token(Token = "0x6000121")]
	[Address(RVA = "0xAE95B4", Offset = "0xAE95B4", VA = "0xAE95B4")]
	private void ChangeObjective(MilitaryObjective newObjective)
	{
	}

	[Token(Token = "0x6000122")]
	[Address(RVA = "0xAE9BC8", Offset = "0xAE9BC8", VA = "0xAE9BC8")]
	public void Init(Town town, MilitaryObjective militaryObjective)
	{
	}

	[Token(Token = "0x6000123")]
	[Address(RVA = "0xAE9330", Offset = "0xAE9330", VA = "0xAE9330")]
	private void ChangeState(ArmyStatus newState)
	{
	}

	[Token(Token = "0x6000124")]
	[Address(RVA = "0xAE9DFC", Offset = "0xAE9DFC", VA = "0xAE9DFC")]
	private Formation GetFormation(ArmyStatus newState)
	{
		return default(Formation);
	}

	[Token(Token = "0x6000125")]
	[Address(RVA = "0xAE9E94", Offset = "0xAE9E94", VA = "0xAE9E94")]
	private void Update()
	{
	}

	[Token(Token = "0x6000126")]
	[Address(RVA = "0xAEA67C", Offset = "0xAEA67C", VA = "0xAEA67C")]
	private void Wait()
	{
	}

	[Token(Token = "0x6000127")]
	[Address(RVA = "0xAEA854", Offset = "0xAEA854", VA = "0xAEA854")]
	private void Regroup()
	{
	}

	[Token(Token = "0x6000128")]
	[Address(RVA = "0xAEAA38", Offset = "0xAEAA38", VA = "0xAEAA38")]
	private bool UnitsInFormation()
	{
		return default(bool);
	}

	[Token(Token = "0x6000129")]
	private static void RemoveNulls<T>(List<T> list) where T : MonoBehaviour
	{
	}

	[Token(Token = "0x600012A")]
	[Address(RVA = "0xAEA0D4", Offset = "0xAEA0D4", VA = "0xAEA0D4")]
	private static void RemoveNullAndDeadUnits(List<Human> list)
	{
	}

	[Token(Token = "0x600012B")]
	[Address(RVA = "0xAEA7AC", Offset = "0xAEA7AC", VA = "0xAEA7AC")]
	private void FightArmies()
	{
	}

	[Token(Token = "0x600012C")]
	[Address(RVA = "0xAEA1CC", Offset = "0xAEA1CC", VA = "0xAEA1CC")]
	private void Recruit()
	{
	}

	[Token(Token = "0x600012D")]
	[Address(RVA = "0xAEACBC", Offset = "0xAEACBC", VA = "0xAEACBC")]
	public Vector3 GetFormationPosition(Vector3 capturePosition, Human unit)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600012E")]
	[Address(RVA = "0xAEAD90", Offset = "0xAEAD90", VA = "0xAEAD90")]
	public Vector3 GetFormationPosition(int index, Vector3 position, Formation formation)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600012F")]
	[Address(RVA = "0xAE9A80", Offset = "0xAE9A80", VA = "0xAE9A80")]
	public void Disperse()
	{
	}

	[Token(Token = "0x6000130")]
	[Address(RVA = "0xAEB02C", Offset = "0xAEB02C", VA = "0xAEB02C", Slot = "4")]
	public void OnStuck()
	{
	}

	[Token(Token = "0x6000131")]
	[Address(RVA = "0xAEB034", Offset = "0xAEB034", VA = "0xAEB034", Slot = "5")]
	public void OnMove(Vector3 newLocalPos)
	{
	}

	[Token(Token = "0x6000132")]
	[Address(RVA = "0xAEB038", Offset = "0xAEB038", VA = "0xAEB038")]
	private void RefreshFormation(Vector3 center)
	{
	}

	[Token(Token = "0x6000133")]
	[Address(RVA = "0xAEB274", Offset = "0xAEB274", VA = "0xAEB274", Slot = "6")]
	public void OnDestinationReached()
	{
	}

	[Token(Token = "0x6000134")]
	[Address(RVA = "0xAEB3A4", Offset = "0xAEB3A4", VA = "0xAEB3A4", Slot = "7")]
	public void OnNarrowPassage(Vector3 nextPathNodePosition)
	{
	}

	[Token(Token = "0x6000135")]
	[Address(RVA = "0xAEB524", Offset = "0xAEB524", VA = "0xAEB524", Slot = "8")]
	public void OnNarrowPassageEnd()
	{
	}

	[Token(Token = "0x6000136")]
	[Address(RVA = "0xAEB52C", Offset = "0xAEB52C", VA = "0xAEB52C")]
	public void OnObjectiveCaptured()
	{
	}

	[Token(Token = "0x6000137")]
	[Address(RVA = "0xAE9C90", Offset = "0xAE9C90", VA = "0xAE9C90")]
	private void DisplayBanner(Town city)
	{
	}

	[Token(Token = "0x6000138")]
	[Address(RVA = "0xAEB580", Offset = "0xAEB580", VA = "0xAEB580")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000139")]
	[Address(RVA = "0xAEB79C", Offset = "0xAEB79C", VA = "0xAEB79C")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x600013A")]
	[Address(RVA = "0xAEB830", Offset = "0xAEB830", VA = "0xAEB830")]
	public Army()
	{
	}
}
[Token(Token = "0x2000031")]
[CreateAssetMenu(menuName = "Audio/Human Audio Collection")]
public class HumanAudioCollection : ScriptableObject
{
	[Token(Token = "0x400011D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public HumanAudioSetDescriptor[] audioSets;

	[Token(Token = "0x600013C")]
	[Address(RVA = "0xAEBA04", Offset = "0xAEBA04", VA = "0xAEBA04")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x600013D")]
	[Address(RVA = "0xAEBDCC", Offset = "0xAEBDCC", VA = "0xAEBDCC")]
	public void Sort()
	{
	}

	[Token(Token = "0x600013E")]
	[Address(RVA = "0xAEBE14", Offset = "0xAEBE14", VA = "0xAEBE14")]
	public HumanAudioCollection()
	{
	}
}
[Serializable]
[Token(Token = "0x2000032")]
public struct HumanAudioSetDescriptor : IComparable<HumanAudioSetDescriptor>
{
	[Token(Token = "0x400011E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[HideInInspector]
	public string name;

	[Token(Token = "0x400011F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public HumanSoundType SoundType;

	[Token(Token = "0x4000120")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public HumanSoundGenderAgeType ApplicableGenderAge;

	[Token(Token = "0x4000121")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public HumanBeliefType ApplicableBeliefType;

	[Token(Token = "0x4000122")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public bool crowd;

	[Token(Token = "0x4000123")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
	[Tooltip("Prevent to stop this sound if a new sound is played by the same human before it's end.")]
	public bool noInterrupt;

	[Token(Token = "0x4000124")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x16")]
	[Tooltip("Other sounds will be interrupted only if this is a voice sound")]
	public bool voiceSound;

	[Token(Token = "0x4000125")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioSet AudioSet;

	[Token(Token = "0x600013F")]
	[Address(RVA = "0xAEBE1C", Offset = "0xAEBE1C", VA = "0xAEBE1C", Slot = "4")]
	public int CompareTo(HumanAudioSetDescriptor other)
	{
		return default(int);
	}
}
[Token(Token = "0x2000033")]
public class MixerGroupSlider : MonoBehaviour
{
	[Token(Token = "0x4000126")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string mixerExposedParam;

	[Token(Token = "0x4000127")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Slider slider;

	[Token(Token = "0x6000140")]
	[Address(RVA = "0xAEBE30", Offset = "0xAEBE30", VA = "0xAEBE30")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000141")]
	[Address(RVA = "0xAEBE88", Offset = "0xAEBE88", VA = "0xAEBE88")]
	private void Start()
	{
	}

	[Token(Token = "0x6000142")]
	[Address(RVA = "0xAEBEC0", Offset = "0xAEBEC0", VA = "0xAEBEC0")]
	public void SetLevel(float sliderValue)
	{
	}

	[Token(Token = "0x6000143")]
	[Address(RVA = "0xAEBF4C", Offset = "0xAEBF4C", VA = "0xAEBF4C")]
	public MixerGroupSlider()
	{
	}
}
[Token(Token = "0x2000034")]
public class AutoRotation : MonoBehaviour
{
	[Token(Token = "0x4000128")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float degreePerSec;

	[Token(Token = "0x4000129")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Vector3 rotationAxis;

	[Token(Token = "0x6000144")]
	[Address(RVA = "0xAEBF54", Offset = "0xAEBF54", VA = "0xAEBF54")]
	private void Start()
	{
	}

	[Token(Token = "0x6000145")]
	[Address(RVA = "0xAEC03C", Offset = "0xAEC03C", VA = "0xAEC03C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000146")]
	[Address(RVA = "0xAEC098", Offset = "0xAEC098", VA = "0xAEC098")]
	public AutoRotation()
	{
	}
}
[Token(Token = "0x2000035")]
public class AutoSaveDisplay : MonoBehaviour
{
	[Token(Token = "0x2000036")]
	[CompilerGenerated]
	private sealed class <HideMessage>d__5 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400012C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400012D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400012E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AutoSaveDisplay <>4__this;

		[Token(Token = "0x400012F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float delay;

		[Token(Token = "0x17000033")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600014F")]
			[Address(RVA = "0xAEC324", Offset = "0xAEC324", VA = "0xAEC324", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000034")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000151")]
			[Address(RVA = "0xAEC36C", Offset = "0xAEC36C", VA = "0xAEC36C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600014C")]
		[Address(RVA = "0xAEC268", Offset = "0xAEC268", VA = "0xAEC268")]
		[DebuggerHidden]
		public <HideMessage>d__5(int <>1__state)
		{
		}

		[Token(Token = "0x600014D")]
		[Address(RVA = "0xAEC298", Offset = "0xAEC298", VA = "0xAEC298", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600014E")]
		[Address(RVA = "0xAEC29C", Offset = "0xAEC29C", VA = "0xAEC29C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000150")]
		[Address(RVA = "0xAEC32C", Offset = "0xAEC32C", VA = "0xAEC32C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400012A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject message;

	[Token(Token = "0x400012B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float hideRequestTime;

	[Token(Token = "0x6000147")]
	[Address(RVA = "0xAEC100", Offset = "0xAEC100", VA = "0xAEC100")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000148")]
	[Address(RVA = "0xAEC188", Offset = "0xAEC188", VA = "0xAEC188")]
	public void Display()
	{
	}

	[Token(Token = "0x6000149")]
	[Address(RVA = "0xAEC1A8", Offset = "0xAEC1A8", VA = "0xAEC1A8")]
	public void Hide()
	{
	}

	[Token(Token = "0x600014A")]
	[Address(RVA = "0xAEC1E4", Offset = "0xAEC1E4", VA = "0xAEC1E4")]
	[IteratorStateMachine(typeof(<HideMessage>d__5))]
	private IEnumerator HideMessage(float delay)
	{
		return null;
	}

	[Token(Token = "0x600014B")]
	[Address(RVA = "0xAEC290", Offset = "0xAEC290", VA = "0xAEC290")]
	public AutoSaveDisplay()
	{
	}
}
[Token(Token = "0x2000037")]
public class AutoSaveLoader : MonoBehaviour
{
	[Token(Token = "0x4000130")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SaveDisplay saveDisplay;

	[Token(Token = "0x4000131")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("This group will be enabled if the selected save exist.")]
	public CanvasGroup saveExistGroup;

	[Token(Token = "0x4000132")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Window window;

	[Token(Token = "0x6000152")]
	[Address(RVA = "0xAEC374", Offset = "0xAEC374", VA = "0xAEC374")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000153")]
	[Address(RVA = "0xAEC3CC", Offset = "0xAEC3CC", VA = "0xAEC3CC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000154")]
	[Address(RVA = "0xAEC4B8", Offset = "0xAEC4B8", VA = "0xAEC4B8")]
	public void Load()
	{
	}

	[Token(Token = "0x6000155")]
	[Address(RVA = "0xAEC4D4", Offset = "0xAEC4D4", VA = "0xAEC4D4")]
	public AutoSaveLoader()
	{
	}
}
[Token(Token = "0x2000038")]
[RequireComponent(typeof(Resource))]
public class BurnableResource : MonoBehaviour, IBurnable
{
	[Token(Token = "0x4000133")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Resource resource;

	[Token(Token = "0x17000035")]
	public bool CanBeIgnited
	{
		[Token(Token = "0x6000159")]
		[Address(RVA = "0xAEC624", Offset = "0xAEC624", VA = "0xAEC624", Slot = "6")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000156")]
	[Address(RVA = "0xAEC4DC", Offset = "0xAEC4DC", VA = "0xAEC4DC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000157")]
	[Address(RVA = "0xAEC5EC", Offset = "0xAEC5EC", VA = "0xAEC5EC", Slot = "4")]
	public void Burn()
	{
	}

	[Token(Token = "0x6000158")]
	[Address(RVA = "0xAEC608", Offset = "0xAEC608", VA = "0xAEC608", Slot = "5")]
	public void Extinguish(bool crowd = false)
	{
	}

	[Token(Token = "0x600015A")]
	[Address(RVA = "0xAEC658", Offset = "0xAEC658", VA = "0xAEC658")]
	public BurnableResource()
	{
	}
}
[Token(Token = "0x2000039")]
public static class CanvasUtils
{
	[Token(Token = "0x600015B")]
	[Address(RVA = "0xAEC660", Offset = "0xAEC660", VA = "0xAEC660")]
	private static void DisableCanvasGroup(CanvasGroup canvasGroup)
	{
	}

	[Token(Token = "0x600015C")]
	[Address(RVA = "0xAEC6AC", Offset = "0xAEC6AC", VA = "0xAEC6AC")]
	private static void SetChildrenDirty(CanvasGroup canvasGroup)
	{
	}

	[Token(Token = "0x600015D")]
	[Address(RVA = "0xAEC748", Offset = "0xAEC748", VA = "0xAEC748")]
	private static void EnableCanvasGroup(CanvasGroup canvasGroup)
	{
	}

	[Token(Token = "0x600015E")]
	[Address(RVA = "0xAEC4A4", Offset = "0xAEC4A4", VA = "0xAEC4A4")]
	public static void ManageCanvasGroup(bool value, CanvasGroup canvasGroup)
	{
	}
}
[Token(Token = "0x200003A")]
public class Caravan : MonoBehaviour
{
	[Token(Token = "0x4000134")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 Origin;

	[Token(Token = "0x4000135")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Vector3 Destination;

	[Token(Token = "0x4000136")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ResourceType CarriedResource;

	[Token(Token = "0x4000137")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public int Amount;

	[Token(Token = "0x4000138")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool _init;

	[Token(Token = "0x4000139")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float _speed;

	[Token(Token = "0x400013A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float _startTime;

	[Token(Token = "0x400013B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float _journeyLength;

	[Token(Token = "0x400013C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject CarryGeneric;

	[Token(Token = "0x400013D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private GameObject boxInstance;

	[Token(Token = "0x600015F")]
	[Address(RVA = "0xAEC790", Offset = "0xAEC790", VA = "0xAEC790")]
	public void Init(Vector3 origin, Vector3 destination, ResourceType resourceType, int amount)
	{
	}

	[Token(Token = "0x6000160")]
	[Address(RVA = "0xAEC8BC", Offset = "0xAEC8BC", VA = "0xAEC8BC")]
	private void InstantiateResourceDisplay()
	{
	}

	[Token(Token = "0x6000161")]
	[Address(RVA = "0xAEC9BC", Offset = "0xAEC9BC", VA = "0xAEC9BC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000162")]
	[Address(RVA = "0xAECC08", Offset = "0xAECC08", VA = "0xAECC08")]
	public Caravan()
	{
	}
}
[Token(Token = "0x200003B")]
[Obsolete("Old menu.", false)]
public class CheckBoxHandler : MonoBehaviour, IPointerEnterHandler, IEventSystemHandler, IPointerDownHandler
{
	[Token(Token = "0x400013E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Toggle toggle;

	[Token(Token = "0x400013F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MenuButton menuButton;

	[Token(Token = "0x4000140")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("If you set a canvas group here it will be locked/unlocked by the state of this checkbox")]
	public CanvasGroup unlockCanvasGroup;

	[Token(Token = "0x6000163")]
	[Address(RVA = "0xAECC18", Offset = "0xAECC18", VA = "0xAECC18")]
	private void Start()
	{
	}

	[Token(Token = "0x6000164")]
	[Address(RVA = "0xAECFDC", Offset = "0xAECFDC", VA = "0xAECFDC")]
	private void ManageCanvasGroup(Toggle changedToggle)
	{
	}

	[Token(Token = "0x6000165")]
	[Address(RVA = "0xAECC1C", Offset = "0xAECC1C", VA = "0xAECC1C")]
	private void RefreshCheckboxValue()
	{
	}

	[Token(Token = "0x6000166")]
	[Address(RVA = "0xAED004", Offset = "0xAED004", VA = "0xAED004")]
	public void Toggle()
	{
	}

	[Token(Token = "0x6000167")]
	[Address(RVA = "0xAED008", Offset = "0xAED008", VA = "0xAED008", Slot = "4")]
	public void OnPointerEnter(PointerEventData eventData)
	{
	}

	[Token(Token = "0x6000168")]
	[Address(RVA = "0xAED060", Offset = "0xAED060", VA = "0xAED060", Slot = "5")]
	public void OnPointerDown(PointerEventData eventData)
	{
	}

	[Token(Token = "0x6000169")]
	[Address(RVA = "0xAED0B8", Offset = "0xAED0B8", VA = "0xAED0B8")]
	public CheckBoxHandler()
	{
	}
}
[Token(Token = "0x200003C")]
public class Cleaner : MonoBehaviour
{
	[Token(Token = "0x600016A")]
	[Address(RVA = "0xAED0C0", Offset = "0xAED0C0", VA = "0xAED0C0")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600016B")]
	[Address(RVA = "0xAED0E4", Offset = "0xAED0E4", VA = "0xAED0E4")]
	private void OnTriggerStay(Collider other)
	{
	}

	[Token(Token = "0x600016C")]
	[Address(RVA = "0xAED108", Offset = "0xAED108", VA = "0xAED108")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x600016D")]
	[Address(RVA = "0xAED12C", Offset = "0xAED12C", VA = "0xAED12C")]
	public Cleaner()
	{
	}
}
[Token(Token = "0x200003D")]
public class CoastManager : MonoBehaviour
{
	[Token(Token = "0x4000141")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public DockCollection DockCollection;

	[Token(Token = "0x4000142")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public CoastCollection CoastCollection;

	[Token(Token = "0x4000143")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly int Color;

	[Token(Token = "0x4000144")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static readonly int ColorSlope;

	[Token(Token = "0x4000145")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static readonly int ColorAdjacent;

	[Token(Token = "0x4000146")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static readonly int ColorSlopeAdjacent;

	[Token(Token = "0x4000147")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private List<GameObject> CoastObjects;

	[Token(Token = "0x600016E")]
	[Address(RVA = "0xAED134", Offset = "0xAED134", VA = "0xAED134")]
	public void Awake()
	{
	}

	[Token(Token = "0x600016F")]
	[Address(RVA = "0xAED138", Offset = "0xAED138", VA = "0xAED138")]
	public void RefreshBorders()
	{
	}

	[Token(Token = "0x6000170")]
	[Address(RVA = "0xAED610", Offset = "0xAED610", VA = "0xAED610")]
	private void PlacementStraightCoast(Position adjTile)
	{
	}

	[Token(Token = "0x6000171")]
	[Address(RVA = "0xAEDBB8", Offset = "0xAEDBB8", VA = "0xAEDBB8")]
	private void PlacementCornerLeft(Position forwardTile, Position leftTile, Position forwardLeft)
	{
	}

	[Token(Token = "0x6000172")]
	[Address(RVA = "0xAEE76C", Offset = "0xAEE76C", VA = "0xAEE76C")]
	private void PlacementCornerRight(Position forwardTile, Position rightTile, Position forwardRight)
	{
	}

	[Token(Token = "0x6000173")]
	[Address(RVA = "0xAED604", Offset = "0xAED604", VA = "0xAED604")]
	private void DeleteGameobject(GameObject go)
	{
	}

	[Token(Token = "0x6000174")]
	[Address(RVA = "0xAEF328", Offset = "0xAEF328", VA = "0xAEF328")]
	private GameObject MakeGameObject(GameObject go, Vector3 pos, Quaternion rot)
	{
		return null;
	}

	[Token(Token = "0x6000175")]
	[Address(RVA = "0xAEF3B0", Offset = "0xAEF3B0", VA = "0xAEF3B0")]
	private static void SetColor(GameObject coast, Color color, Color colorSlope)
	{
	}

	[Token(Token = "0x6000176")]
	[Address(RVA = "0xAEF4FC", Offset = "0xAEF4FC", VA = "0xAEF4FC")]
	private static void SetColorBlending(GameObject coast, Color color, Color colorSlope, Color colorAdjacent, Color colorSlopeAdjacent)
	{
	}

	[Token(Token = "0x6000177")]
	[Address(RVA = "0xAEF6C4", Offset = "0xAEF6C4", VA = "0xAEF6C4")]
	public CoastManager()
	{
	}
}
[Token(Token = "0x200003E")]
public class ConfirmDialog : MonoBehaviour
{
	[Token(Token = "0x200003F")]
	public delegate void ConfirmDialogCallback(bool result);

	[Token(Token = "0x4000148")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TextMeshProUGUI messageDisplay;

	[Token(Token = "0x4000149")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextMeshProUGUI detailsMessageDisplay;

	[Token(Token = "0x400014A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public CanvasGroup canvasGroup;

	[Token(Token = "0x400014B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private ConfirmDialogCallback _callback;

	[Token(Token = "0x6000179")]
	[Address(RVA = "0xAEF848", Offset = "0xAEF848", VA = "0xAEF848")]
	public void InitConfirmDialog(string message, string detailMessage, ConfirmDialogCallback callback)
	{
	}

	[Token(Token = "0x600017A")]
	[Address(RVA = "0xAEFA50", Offset = "0xAEFA50", VA = "0xAEFA50")]
	public void Ok()
	{
	}

	[Token(Token = "0x600017B")]
	[Address(RVA = "0xAEFB1C", Offset = "0xAEFB1C", VA = "0xAEFB1C")]
	public void Cancel()
	{
	}

	[Token(Token = "0x600017C")]
	[Address(RVA = "0xAEFA84", Offset = "0xAEFA84", VA = "0xAEFA84")]
	private void Hide()
	{
	}

	[Token(Token = "0x600017D")]
	[Address(RVA = "0xAEF9B8", Offset = "0xAEF9B8", VA = "0xAEF9B8")]
	private void Show()
	{
	}

	[Token(Token = "0x600017E")]
	[Address(RVA = "0xAEFB50", Offset = "0xAEFB50", VA = "0xAEFB50")]
	public ConfirmDialog()
	{
	}
}
[Token(Token = "0x2000040")]
[SelectionBase]
public class Crafter : MonoBehaviour, IResourceConsumer
{
	[Token(Token = "0x400014C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject activeSfx;

	[Token(Token = "0x400014D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public CrafterConfiguration configuration;

	[Token(Token = "0x400014E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Town town;

	[Token(Token = "0x400014F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool active;

	[Token(Token = "0x4000150")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float lastCraftTime;

	[Token(Token = "0x4000151")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private ResourceType missingResource;

	[Token(Token = "0x6000183")]
	[Address(RVA = "0xAE6980", Offset = "0xAE6980", VA = "0xAE6980")]
	public void SetTown(Town newTown)
	{
	}

	[Token(Token = "0x6000184")]
	[Address(RVA = "0xAEFCD8", Offset = "0xAEFCD8", VA = "0xAEFCD8")]
	public void OnDestroy()
	{
	}

	[Token(Token = "0x6000185")]
	[Address(RVA = "0xAEFCF8", Offset = "0xAEFCF8", VA = "0xAEFCF8")]
	public void Craft(float currentFrameTime)
	{
	}

	[Token(Token = "0x6000186")]
	[Address(RVA = "0xAEFD3C", Offset = "0xAEFD3C", VA = "0xAEFD3C")]
	public void SetMissingResource(ResourceType resourceType)
	{
	}

	[Token(Token = "0x6000187")]
	[Address(RVA = "0xAEFD74", Offset = "0xAEFD74", VA = "0xAEFD74", Slot = "4")]
	public bool IsResourceNeeded(out ResourceStatus resourceStatus)
	{
		return default(bool);
	}

	[Token(Token = "0x6000188")]
	[Address(RVA = "0xAEFE20", Offset = "0xAEFE20", VA = "0xAEFE20")]
	public Crafter()
	{
	}
}
[Token(Token = "0x2000041")]
[CreateAssetMenu(menuName = "Cities/Crafter Configuration")]
public class CrafterConfiguration : ScriptableObject
{
	[Token(Token = "0x4000152")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ResourceQuantity[] neededResources;

	[Token(Token = "0x4000153")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ResourceQuantity[] craftedResources;

	[Token(Token = "0x4000154")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float craftDelay;

	[Token(Token = "0x6000189")]
	[Address(RVA = "0xAEFE30", Offset = "0xAEFE30", VA = "0xAEFE30")]
	public CrafterConfiguration()
	{
	}
}
[Token(Token = "0x2000042")]
public class CreateHumanImpact : MonoBehaviour
{
	[Token(Token = "0x600018A")]
	[Address(RVA = "0xAEFE40", Offset = "0xAEFE40", VA = "0xAEFE40")]
	private void Start()
	{
	}

	[Token(Token = "0x600018B")]
	[Address(RVA = "0xAEFE44", Offset = "0xAEFE44", VA = "0xAEFE44")]
	private void Update()
	{
	}

	[Token(Token = "0x600018C")]
	[Address(RVA = "0xAEFE48", Offset = "0xAEFE48", VA = "0xAEFE48")]
	public CreateHumanImpact()
	{
	}
}
[Token(Token = "0x2000043")]
public class DamagePositionManager : MonoBehaviour
{
	[Token(Token = "0x4000155")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<GameObject> damagePositions;

	[Token(Token = "0x600018D")]
	[Address(RVA = "0xAEFE50", Offset = "0xAEFE50", VA = "0xAEFE50")]
	public GameObject FindDamagePosition(Vector3 attackPosition)
	{
		return null;
	}

	[Token(Token = "0x600018E")]
	[Address(RVA = "0xAF003C", Offset = "0xAF003C", VA = "0xAF003C")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x600018F")]
	[Address(RVA = "0xAF0260", Offset = "0xAF0260", VA = "0xAF0260")]
	public DamagePositionManager()
	{
	}
}
[Token(Token = "0x2000044")]
public class DebugTextDisplay : MonoBehaviour
{
	[Token(Token = "0x4000156")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private TMP_Text textMeshPro;

	[Token(Token = "0x6000190")]
	[Address(RVA = "0xAF0268", Offset = "0xAF0268", VA = "0xAF0268")]
	private void Start()
	{
	}

	[Token(Token = "0x6000191")]
	[Address(RVA = "0xAF02F4", Offset = "0xAF02F4", VA = "0xAF02F4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000192")]
	[Address(RVA = "0xAF035C", Offset = "0xAF035C", VA = "0xAF035C")]
	public DebugTextDisplay()
	{
	}
}
[Token(Token = "0x2000045")]
public class DecorativeScreen : MonoBehaviour
{
	[Token(Token = "0x4000157")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<GameObject> frames;

	[Token(Token = "0x4000158")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float frameSwapDelay;

	[Token(Token = "0x4000159")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float lastSwapTime;

	[Token(Token = "0x400015A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int currentFrameIndex;

	[Token(Token = "0x6000193")]
	[Address(RVA = "0xAF0364", Offset = "0xAF0364", VA = "0xAF0364")]
	private void Start()
	{
	}

	[Token(Token = "0x6000194")]
	[Address(RVA = "0xAF0434", Offset = "0xAF0434", VA = "0xAF0434")]
	private void Update()
	{
	}

	[Token(Token = "0x6000195")]
	[Address(RVA = "0xAF036C", Offset = "0xAF036C", VA = "0xAF036C")]
	private void SetFrame(int frameIndex)
	{
	}

	[Token(Token = "0x6000196")]
	[Address(RVA = "0xAF047C", Offset = "0xAF047C", VA = "0xAF047C")]
	public DecorativeScreen()
	{
	}
}
[Token(Token = "0x2000046")]
public class DeisimLogo : MonoBehaviour
{
	[Token(Token = "0x400015B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform explosionSource;

	[Token(Token = "0x400015C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioSet logoExplosionAudioSet;

	[NonSerialized]
	[Token(Token = "0x400015D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool destroyed;

	[Token(Token = "0x6000197")]
	[Address(RVA = "0xAF048C", Offset = "0xAF048C", VA = "0xAF048C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000198")]
	[Address(RVA = "0xAF057C", Offset = "0xAF057C", VA = "0xAF057C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000199")]
	[Address(RVA = "0xAF0788", Offset = "0xAF0788", VA = "0xAF0788")]
	public DeisimLogo()
	{
	}
}
[Token(Token = "0x2000047")]
public class DesktopInteractor : Interactor
{
	[Token(Token = "0x400015E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Vector3 mousePointerWorldSpace;

	[Token(Token = "0x400015F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	public float smoothTime;

	[Token(Token = "0x4000160")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Vector3 velocity;

	[Token(Token = "0x4000161")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private Camera mainCam;

	[Token(Token = "0x4000162")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private Vector3 hidePosition;

	[Token(Token = "0x600019A")]
	[Address(RVA = "0xAF0790", Offset = "0xAF0790", VA = "0xAF0790")]
	private void Start()
	{
	}

	[Token(Token = "0x600019B")]
	[Address(RVA = "0xAF0814", Offset = "0xAF0814", VA = "0xAF0814")]
	private new void LateUpdate()
	{
	}

	[Token(Token = "0x600019C")]
	[Address(RVA = "0xAF0A10", Offset = "0xAF0A10", VA = "0xAF0A10")]
	private void LookAtPlayerPosition()
	{
	}

	[Token(Token = "0x600019D")]
	[Address(RVA = "0xAF0AB8", Offset = "0xAF0AB8", VA = "0xAF0AB8", Slot = "4")]
	public override void ThrowDesktop()
	{
	}

	[Token(Token = "0x600019E")]
	[Address(RVA = "0xAF0D44", Offset = "0xAF0D44", VA = "0xAF0D44")]
	public void HideShow(bool hide)
	{
	}

	[Token(Token = "0x600019F")]
	[Address(RVA = "0xAF0DD4", Offset = "0xAF0DD4", VA = "0xAF0DD4")]
	public DesktopInteractor()
	{
	}
}
[Token(Token = "0x2000048")]
public class DesktopMiracleButton : MonoBehaviour
{
	[Token(Token = "0x4000163")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Button button;

	[Token(Token = "0x4000164")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public SpellType spellType;

	[Token(Token = "0x4000165")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public MiracleType miracleType;

	[Token(Token = "0x4000166")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TerrainType terrainType;

	[Token(Token = "0x4000167")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private UIController uiController;

	[Token(Token = "0x60001A0")]
	[Address(RVA = "0xAF0E40", Offset = "0xAF0E40", VA = "0xAF0E40")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001A1")]
	[Address(RVA = "0xAF0ED0", Offset = "0xAF0ED0", VA = "0xAF0ED0")]
	public void OnClick()
	{
	}

	[Token(Token = "0x60001A2")]
	[Address(RVA = "0xAF117C", Offset = "0xAF117C", VA = "0xAF117C")]
	private void Update()
	{
	}

	[Token(Token = "0x60001A3")]
	[Address(RVA = "0xAF1180", Offset = "0xAF1180", VA = "0xAF1180")]
	private void CheckDeityRank()
	{
	}

	[Token(Token = "0x60001A4")]
	[Address(RVA = "0xAF1338", Offset = "0xAF1338", VA = "0xAF1338")]
	public DesktopMiracleButton()
	{
	}
}
[Token(Token = "0x2000049")]
public class Disease : MonoBehaviour
{
	[Token(Token = "0x4000168")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float chanceToHappen;

	[Token(Token = "0x60001A5")]
	[Address(RVA = "0xAF1340", Offset = "0xAF1340", VA = "0xAF1340")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60001A6")]
	[Address(RVA = "0xAF1458", Offset = "0xAF1458", VA = "0xAF1458")]
	public Disease()
	{
	}
}
[Token(Token = "0x200004A")]
public class Dispel : MonoBehaviour
{
	[Token(Token = "0x60001A7")]
	[Address(RVA = "0xAF146C", Offset = "0xAF146C", VA = "0xAF146C")]
	public void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60001A8")]
	[Address(RVA = "0xAF15B0", Offset = "0xAF15B0", VA = "0xAF15B0")]
	public Dispel()
	{
	}
}
[Token(Token = "0x200004B")]
public class EditButtonDisabler : MonoBehaviour
{
	[Token(Token = "0x60001A9")]
	[Address(RVA = "0xAF15B8", Offset = "0xAF15B8", VA = "0xAF15B8")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001AA")]
	[Address(RVA = "0xAF15BC", Offset = "0xAF15BC", VA = "0xAF15BC")]
	public EditButtonDisabler()
	{
	}
}
[Token(Token = "0x200004C")]
public class EmptyReticle : MonoBehaviour
{
	[Token(Token = "0x200004D")]
	[CompilerGenerated]
	private sealed class <Appears>d__1 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000169")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400016A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400016B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EmptyReticle <>4__this;

		[Token(Token = "0x400016C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 <finalScale>5__2;

		[Token(Token = "0x400016D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 <startScale>5__3;

		[Token(Token = "0x400016E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float <time>5__4;

		[Token(Token = "0x17000036")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60001B1")]
			[Address(RVA = "0xAF17D8", Offset = "0xAF17D8", VA = "0xAF17D8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000037")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60001B3")]
			[Address(RVA = "0xAF1820", Offset = "0xAF1820", VA = "0xAF1820", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001AE")]
		[Address(RVA = "0xAF1658", Offset = "0xAF1658", VA = "0xAF1658")]
		[DebuggerHidden]
		public <Appears>d__1(int <>1__state)
		{
		}

		[Token(Token = "0x60001AF")]
		[Address(RVA = "0xAF1688", Offset = "0xAF1688", VA = "0xAF1688", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001B0")]
		[Address(RVA = "0xAF168C", Offset = "0xAF168C", VA = "0xAF168C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001B2")]
		[Address(RVA = "0xAF17E0", Offset = "0xAF17E0", VA = "0xAF17E0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x60001AB")]
	[Address(RVA = "0xAF15C4", Offset = "0xAF15C4", VA = "0xAF15C4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60001AC")]
	[Address(RVA = "0xAF15E4", Offset = "0xAF15E4", VA = "0xAF15E4")]
	[IteratorStateMachine(typeof(<Appears>d__1))]
	private IEnumerator Appears()
	{
		return null;
	}

	[Token(Token = "0x60001AD")]
	[Address(RVA = "0xAF1680", Offset = "0xAF1680", VA = "0xAF1680")]
	public EmptyReticle()
	{
	}
}
[Token(Token = "0x200004E")]
public class EmptyTerrain : MonoBehaviour
{
	[Token(Token = "0x200004F")]
	[CompilerGenerated]
	private sealed class <InitTutorial>d__2 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000170")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000171")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000172")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EmptyTerrain <>4__this;

		[Token(Token = "0x17000038")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60001BC")]
			[Address(RVA = "0xAF2600", Offset = "0xAF2600", VA = "0xAF2600", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000039")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60001BE")]
			[Address(RVA = "0xAF2648", Offset = "0xAF2648", VA = "0xAF2648", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001B9")]
		[Address(RVA = "0xAF1A8C", Offset = "0xAF1A8C", VA = "0xAF1A8C")]
		[DebuggerHidden]
		public <InitTutorial>d__2(int <>1__state)
		{
		}

		[Token(Token = "0x60001BA")]
		[Address(RVA = "0xAF236C", Offset = "0xAF236C", VA = "0xAF236C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001BB")]
		[Address(RVA = "0xAF2370", Offset = "0xAF2370", VA = "0xAF2370", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001BD")]
		[Address(RVA = "0xAF2608", Offset = "0xAF2608", VA = "0xAF2608", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400016F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject Tooltip;

	[Token(Token = "0x60001B4")]
	[Address(RVA = "0xAF1828", Offset = "0xAF1828", VA = "0xAF1828")]
	private void Start()
	{
	}

	[Token(Token = "0x60001B5")]
	[Address(RVA = "0xAF1A18", Offset = "0xAF1A18", VA = "0xAF1A18")]
	[IteratorStateMachine(typeof(<InitTutorial>d__2))]
	private IEnumerator InitTutorial()
	{
		return null;
	}

	[Token(Token = "0x60001B6")]
	[Address(RVA = "0xAF1AB4", Offset = "0xAF1AB4", VA = "0xAF1AB4")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60001B7")]
	[Address(RVA = "0xAF22B4", Offset = "0xAF22B4", VA = "0xAF22B4")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60001B8")]
	[Address(RVA = "0xAF2364", Offset = "0xAF2364", VA = "0xAF2364")]
	public EmptyTerrain()
	{
	}
}
[Token(Token = "0x2000050")]
public class EnergyDisplayUpdater : MonoBehaviour
{
	[Token(Token = "0x4000173")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public FloatVariable mana;

	[Token(Token = "0x4000174")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private TextMeshPro textMeshPro;

	[Token(Token = "0x4000175")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float displayedValue;

	[Token(Token = "0x4000176")]
	private const string Normal = "{0:1}";

	[Token(Token = "0x4000177")]
	private const string Orange = "<color=\"orange\">{0:1} </color>";

	[Token(Token = "0x4000178")]
	private const string Red = "<color=\"red\">{0:1} </color>";

	[Token(Token = "0x60001BF")]
	[Address(RVA = "0xAF2650", Offset = "0xAF2650", VA = "0xAF2650")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001C0")]
	[Address(RVA = "0xAF2748", Offset = "0xAF2748", VA = "0xAF2748")]
	private void Update()
	{
	}

	[Token(Token = "0x60001C1")]
	[Address(RVA = "0xAF28B8", Offset = "0xAF28B8", VA = "0xAF28B8")]
	public EnergyDisplayUpdater()
	{
	}
}
[Token(Token = "0x2000051")]
public class EventFeature : MonoBehaviour
{
	[Token(Token = "0x4000179")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Range(1f, 31f)]
	public int EventStartDay;

	[Token(Token = "0x400017A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Range(1f, 12f)]
	public int EventStartMonth;

	[Token(Token = "0x400017B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Range(1f, 31f)]
	public int EventEndDay;

	[Token(Token = "0x400017C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Range(1f, 12f)]
	public int EventEndMonth;

	[Token(Token = "0x60001C2")]
	[Address(RVA = "0xAF28C0", Offset = "0xAF28C0", VA = "0xAF28C0")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001C3")]
	[Address(RVA = "0xAF2A8C", Offset = "0xAF2A8C", VA = "0xAF2A8C")]
	public EventFeature()
	{
	}
}
[Token(Token = "0x2000052")]
public class Exploder : MonoBehaviour
{
	[Token(Token = "0x2000053")]
	public interface IOnExplode
	{
		[Token(Token = "0x60001C8")]
		void OnExplode(Collision cause);
	}

	[Token(Token = "0x400017D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject ExplosionPrefab;

	[Token(Token = "0x400017E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Collision cause;

	[Token(Token = "0x400017F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly Collider[] SurroundingObservers;

	[Token(Token = "0x4000180")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float magnitudeThreshold;

	[Token(Token = "0x60001C4")]
	[Address(RVA = "0xAF2A94", Offset = "0xAF2A94", VA = "0xAF2A94")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x60001C5")]
	[Address(RVA = "0xAF2BA0", Offset = "0xAF2BA0", VA = "0xAF2BA0")]
	public void Explode(bool impactKarma)
	{
	}

	[Token(Token = "0x60001C6")]
	[Address(RVA = "0xAF307C", Offset = "0xAF307C", VA = "0xAF307C")]
	public Exploder()
	{
	}
}
[Token(Token = "0x2000054")]
public static class FileManager
{
	[Token(Token = "0x4000181")]
	public const string ModsFolder = "mods";

	[Token(Token = "0x4000182")]
	public const string LocalizationFolder = "localization";

	[Token(Token = "0x4000183")]
	private const string SaveFolder = "Saves";

	[Token(Token = "0x4000184")]
	private const string Extension = ".json";

	[Token(Token = "0x4000185")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static readonly string DataPath;

	[Token(Token = "0x60001C9")]
	[Address(RVA = "0xAF3100", Offset = "0xAF3100", VA = "0xAF3100")]
	public static string LoadFileAsText(string fileName, string folder)
	{
		return null;
	}

	[Token(Token = "0x60001CA")]
	[Address(RVA = "0xAF3310", Offset = "0xAF3310", VA = "0xAF3310")]
	private static string LoadFileAsTextAndroid(string androidFilePath)
	{
		return null;
	}

	[Token(Token = "0x60001CB")]
	[Address(RVA = "0xAF3404", Offset = "0xAF3404", VA = "0xAF3404")]
	private static string GetFolderPath(string folderName)
	{
		return null;
	}

	[Token(Token = "0x60001CC")]
	[Address(RVA = "0xAF3470", Offset = "0xAF3470", VA = "0xAF3470")]
	public static string GetFilePath(string fileName, string folder)
	{
		return null;
	}

	[Token(Token = "0x60001CD")]
	[Address(RVA = "0xAF350C", Offset = "0xAF350C", VA = "0xAF350C")]
	public static string GetAndroidFilePath(string fileName, string folder)
	{
		return null;
	}

	[Token(Token = "0x60001CE")]
	[Address(RVA = "0xAF35C8", Offset = "0xAF35C8", VA = "0xAF35C8")]
	public static bool Exists(string fileName, string folder)
	{
		return default(bool);
	}

	[Token(Token = "0x60001CF")]
	[Address(RVA = "0xAF3634", Offset = "0xAF3634", VA = "0xAF3634")]
	public static string GetSavePath(string saveName)
	{
		return null;
	}

	[Token(Token = "0x60001D0")]
	[Address(RVA = "0xAF3748", Offset = "0xAF3748", VA = "0xAF3748")]
	public static string GetAndroidModsPath(string modName)
	{
		return null;
	}

	[Token(Token = "0x60001D1")]
	[Address(RVA = "0xAF380C", Offset = "0xAF380C", VA = "0xAF380C")]
	public static void WriteJson(string json, string fileName, string folder)
	{
	}

	[Token(Token = "0x60001D2")]
	[Address(RVA = "0xAF38B4", Offset = "0xAF38B4", VA = "0xAF38B4")]
	public static void RemoveFile(string fileName, string folder)
	{
	}

	[Token(Token = "0x60001D3")]
	[Address(RVA = "0xAF3A60", Offset = "0xAF3A60", VA = "0xAF3A60")]
	public static void CopyFile(string fileName, string destFileName, string folder)
	{
	}
}
[Token(Token = "0x2000055")]
public class FirePit : MonoBehaviour
{
	[Token(Token = "0x60001D5")]
	[Address(RVA = "0xAF3C00", Offset = "0xAF3C00", VA = "0xAF3C00")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60001D6")]
	[Address(RVA = "0xAF3CC4", Offset = "0xAF3CC4", VA = "0xAF3CC4")]
	public FirePit()
	{
	}
}
[Token(Token = "0x2000056")]
public class Follow : MonoBehaviour
{
	[Token(Token = "0x4000186")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool followPosition;

	[Token(Token = "0x4000187")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool followRotation;

	[Token(Token = "0x4000188")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform target;

	[Token(Token = "0x60001D7")]
	[Address(RVA = "0xAF3CCC", Offset = "0xAF3CCC", VA = "0xAF3CCC")]
	private void Update()
	{
	}

	[Token(Token = "0x60001D8")]
	[Address(RVA = "0xAF3DB8", Offset = "0xAF3DB8", VA = "0xAF3DB8")]
	public Follow()
	{
	}
}
[Token(Token = "0x2000057")]
public class GameController : MonoBehaviour
{
	[Token(Token = "0x2000058")]
	[CompilerGenerated]
	private sealed class <LoadTownData>d__234 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40001FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40001FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40001FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameController <>4__this;

		[Token(Token = "0x40001FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<TownData> townsData;

		[Token(Token = "0x40001FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int saveVersion;

		[Token(Token = "0x40001FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public RealmManagerData realmManagerData;

		[Token(Token = "0x4000200")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<TownData>.Enumerator <>7__wrap1;

		[Token(Token = "0x4000201")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private TownData <data>5__3;

		[Token(Token = "0x4000202")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Town <town>5__4;

		[Token(Token = "0x4000203")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private List<HumanData>.Enumerator <>7__wrap4;

		[Token(Token = "0x4000204")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int <i>5__6;

		[Token(Token = "0x17000060")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600029E")]
			[Address(RVA = "0xAFB5A8", Offset = "0xAFB5A8", VA = "0xAFB5A8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000061")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60002A0")]
			[Address(RVA = "0xAFB5F0", Offset = "0xAFB5F0", VA = "0xAFB5F0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000299")]
		[Address(RVA = "0xAFA948", Offset = "0xAFA948", VA = "0xAFA948")]
		[DebuggerHidden]
		public <LoadTownData>d__234(int <>1__state)
		{
		}

		[Token(Token = "0x600029A")]
		[Address(RVA = "0xAFA970", Offset = "0xAFA970", VA = "0xAFA970", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600029B")]
		[Address(RVA = "0xAFAA2C", Offset = "0xAFAA2C", VA = "0xAFAA2C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600029C")]
		[Address(RVA = "0xAFB558", Offset = "0xAFB558", VA = "0xAFB558")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x600029D")]
		[Address(RVA = "0xAFB508", Offset = "0xAFB508", VA = "0xAFB508")]
		private void <>m__Finally2()
		{
		}

		[Token(Token = "0x600029F")]
		[Address(RVA = "0xAFB5B0", Offset = "0xAFB5B0", VA = "0xAFB5B0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200005A")]
	[CompilerGenerated]
	private sealed class <CreateFirstTownCoroutine>d__254 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000207")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000208")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000209")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameController <>4__this;

		[Token(Token = "0x400020A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Town <town>5__2;

		[Token(Token = "0x400020B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int <i>5__3;

		[Token(Token = "0x17000062")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60002A7")]
			[Address(RVA = "0xAFBAAC", Offset = "0xAFBAAC", VA = "0xAFBAAC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000063")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60002A9")]
			[Address(RVA = "0xAFBAF4", Offset = "0xAFBAF4", VA = "0xAFBAF4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60002A4")]
		[Address(RVA = "0xAFB6E0", Offset = "0xAFB6E0", VA = "0xAFB6E0")]
		[DebuggerHidden]
		public <CreateFirstTownCoroutine>d__254(int <>1__state)
		{
		}

		[Token(Token = "0x60002A5")]
		[Address(RVA = "0xAFB708", Offset = "0xAFB708", VA = "0xAFB708", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60002A6")]
		[Address(RVA = "0xAFB70C", Offset = "0xAFB70C", VA = "0xAFB70C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60002A8")]
		[Address(RVA = "0xAFBAB4", Offset = "0xAFBAB4", VA = "0xAFBAB4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200005B")]
	[CompilerGenerated]
	private sealed class <WaitForLoadGameData>d__256 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400020C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400020D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400020E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Task<GameData> gameData;

		[Token(Token = "0x17000064")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60002AD")]
			[Address(RVA = "0xAFBBCC", Offset = "0xAFBBCC", VA = "0xAFBBCC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000065")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60002AF")]
			[Address(RVA = "0xAFBC14", Offset = "0xAFBC14", VA = "0xAFBC14", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60002AA")]
		[Address(RVA = "0xAFBAFC", Offset = "0xAFBAFC", VA = "0xAFBAFC")]
		[DebuggerHidden]
		public <WaitForLoadGameData>d__256(int <>1__state)
		{
		}

		[Token(Token = "0x60002AB")]
		[Address(RVA = "0xAFBB24", Offset = "0xAFBB24", VA = "0xAFBB24", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60002AC")]
		[Address(RVA = "0xAFBB28", Offset = "0xAFBB28", VA = "0xAFBB28", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60002AE")]
		[Address(RVA = "0xAFBBD4", Offset = "0xAFBBD4", VA = "0xAFBBD4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200005D")]
	[CompilerGenerated]
	private sealed class <VoidMiracle>d__339 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000210")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000211")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000212")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 position;

		[Token(Token = "0x17000066")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60002B5")]
			[Address(RVA = "0xAFBD4C", Offset = "0xAFBD4C", VA = "0xAFBD4C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000067")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60002B7")]
			[Address(RVA = "0xAFBD94", Offset = "0xAFBD94", VA = "0xAFBD94", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60002B2")]
		[Address(RVA = "0xAFBC38", Offset = "0xAFBC38", VA = "0xAFBC38")]
		[DebuggerHidden]
		public <VoidMiracle>d__339(int <>1__state)
		{
		}

		[Token(Token = "0x60002B3")]
		[Address(RVA = "0xAFBC60", Offset = "0xAFBC60", VA = "0xAFBC60", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60002B4")]
		[Address(RVA = "0xAFBC64", Offset = "0xAFBC64", VA = "0xAFBC64", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60002B6")]
		[Address(RVA = "0xAFBD54", Offset = "0xAFBD54", VA = "0xAFBD54", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000189")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Player Player;

	[Token(Token = "0x400018A")]
	public const int AutoSaveSlot = 0;

	[Token(Token = "0x400018B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string debugMessage;

	[Token(Token = "0x400018F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public NameManager nameManager;

	[Token(Token = "0x4000191")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public ViewSwitcher ViewSwitcher;

	[Token(Token = "0x4000192")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Platform Platform;

	[Token(Token = "0x4000193")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public int autoLoadSlot;

	[Token(Token = "0x4000194")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float AutoSaveDelay;

	[Token(Token = "0x4000195")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[Header("Configuration", order = 1)]
	public int InitialMankind;

	[Token(Token = "0x4000196")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float BeliefCheckDelay;

	[Token(Token = "0x4000197")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float HeresySpreadDelay;

	[Token(Token = "0x4000198")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public int ManaStep;

	[Token(Token = "0x4000199")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public TextDisplay TextDisplay;

	[Token(Token = "0x400019A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public AutoSaveDisplay AutoSaveDisplay;

	[Token(Token = "0x400019B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public bool limitTerrainAmount;

	[Token(Token = "0x400019C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public float MultiTerrainCostMultiplier;

	[Token(Token = "0x400019D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private int maxTerrainAmount;

	[Token(Token = "0x400019E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private float _lastTerrainTransformation;

	[Token(Token = "0x400019F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private float _lastNewTown;

	[Token(Token = "0x40001A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[Header("Prefabs", order = 3)]
	public GameObject HumanPrefab;

	[Token(Token = "0x40001A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public GameObject TownPrefab;

	[Token(Token = "0x40001A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public GameObject DesertTownPrefab;

	[Token(Token = "0x40001A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public GameObject ArticTownPrefab;

	[Token(Token = "0x40001A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public GameObject AsianTownPrefab;

	[Token(Token = "0x40001A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public GameObject AfricanTownPrefab;

	[Token(Token = "0x40001A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public GameObject PirateTownPrefab;

	[Token(Token = "0x40001A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public GameObject MapManagerPrefab;

	[Token(Token = "0x40001A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public GameObject LifeManagerPrefab;

	[Token(Token = "0x40001A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public GameObject TutorialHint2;

	[Token(Token = "0x40001AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public GameObject TutorialHint3;

	[Token(Token = "0x40001AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public GameObject TutorialHint4;

	[Token(Token = "0x40001AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public GameObject TutorialHint5;

	[Token(Token = "0x40001AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public GameObject TutorialHint6;

	[Token(Token = "0x40001AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public GameObject NoManaVFXPrefab;

	[Token(Token = "0x40001AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	[Header("Informations", order = 4)]
	public GameObject SelectedObject;

	[Token(Token = "0x40001B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public readonly List<Human> Mankind;

	[Token(Token = "0x40001B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public readonly List<Human> Heretics;

	[Token(Token = "0x40001B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public readonly List<Town> Towns;

	[Token(Token = "0x40001B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	public readonly List<Resource> Resources;

	[Token(Token = "0x40001B4")]
	private const int ResourcesRefreshPerFrame = 50;

	[Token(Token = "0x40001B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private int lastResourceRefreshIndex;

	[Token(Token = "0x40001B6")]
	private const int TownRefreshPerFrame = 1;

	[Token(Token = "0x40001B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
	private int lastTownRefreshIndex;

	[Token(Token = "0x40001B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public bool FirstPlayerTerrain;

	[Token(Token = "0x40001B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
	private float _lastBeliefCheckTime;

	[Token(Token = "0x40001BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private float lastHeresyCheckTime;

	[Token(Token = "0x40001BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private GameObject _currentTutorialHint;

	[Token(Token = "0x40001BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public Transform playerProbe;

	[Token(Token = "0x40001C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	private bool gripToGrab;

	[Token(Token = "0x40001C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
	public float heightOffset;

	[Token(Token = "0x40001C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
	private Vector3 _playerPosition;

	[Token(Token = "0x40001C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	private bool _playerPositionRefreshed;

	[Token(Token = "0x40001C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x181")]
	private bool playerScaleRefreshed;

	[Token(Token = "0x40001C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
	private float playerScale;

	[Token(Token = "0x40001CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	private bool _checkNumberOfTerrains;

	[NonSerialized]
	[Token(Token = "0x40001CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x189")]
	private bool initialized;

	[Token(Token = "0x40001CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
	private float _lastAutoSaveTime;

	[Token(Token = "0x40001CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	private bool animalOrMineralAddedThisFrame;

	[Token(Token = "0x40001CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
	private ControllerType controllerType;

	[Token(Token = "0x40001CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	private int currentTutorialPhase;

	[Token(Token = "0x40001D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
	private TechLevel maxTechLevel;

	[Token(Token = "0x40001D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	public IBeforeExitAction BeforeExitAction;

	[Token(Token = "0x40001D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	private List<EmptyTerrain> emptyTerrains;

	[Token(Token = "0x40001D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	private float lastDeityRankIncrease;

	[Token(Token = "0x40001D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B4")]
	private float deityRankGracePeriod;

	[Token(Token = "0x40001D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static Rules rules;

	[Token(Token = "0x40001D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	public DesktopInteractor desktopInteractor;

	[Token(Token = "0x40001D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	[HideInInspector]
	public float CurrentUserSpeed;

	[Token(Token = "0x40001D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C4")]
	public float DefaultUserSpeed;

	[Token(Token = "0x40001D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
	[HideInInspector]
	public bool lockLanguage;

	[Token(Token = "0x40001DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C9")]
	private bool grabControls;

	[Token(Token = "0x40001DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1CA")]
	private bool grabMovement;

	[Token(Token = "0x40001DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1CB")]
	private bool grab3dMovement;

	[Token(Token = "0x40001DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
	private bool grabRotation;

	[Token(Token = "0x40001DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1CD")]
	private bool grabScaling;

	[Token(Token = "0x40001DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1CE")]
	private bool reverseGrabScaling;

	[Token(Token = "0x40001E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1CF")]
	private bool stickMovement;

	[Token(Token = "0x40001E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
	private bool stickTeleportMovement;

	[Token(Token = "0x40001E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D1")]
	private bool stickRotation;

	[Token(Token = "0x40001E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D4")]
	private int stickRotationStep;

	[Token(Token = "0x40001E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
	private bool sandbox;

	[Token(Token = "0x40001E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D9")]
	private bool heresy;

	[Token(Token = "0x40001E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1DA")]
	private bool disasters;

	[NonSerialized]
	[Token(Token = "0x40001E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1DB")]
	private bool loading;

	[NonSerialized]
	[Token(Token = "0x40001E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1DC")]
	private bool restarting;

	[Token(Token = "0x40001E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
	private int saveSlot;

	[Token(Token = "0x40001EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E4")]
	private int quality;

	[Token(Token = "0x40001EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
	private int lang;

	[Token(Token = "0x40001EC")]
	private const int spiritObjective = 5;

	[Token(Token = "0x40001ED")]
	private const int minorObjective = 15;

	[Token(Token = "0x40001EE")]
	private const int intermediateHumanObjective = 30;

	[Token(Token = "0x40001EF")]
	private const int greaterObjective = 50;

	[Token(Token = "0x40001F0")]
	private const int superiorObjective = 70;

	[Token(Token = "0x40001F1")]
	private const int mightyObjective = 100;

	[Token(Token = "0x40001F2")]
	private const int LoadAmountPerFrame = 1;

	[Token(Token = "0x40001F3")]
	private const int LoadHumanAmountPerFrame = 4;

	[Token(Token = "0x40001F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static PlayerAwareManager playerAwareManager;

	[Token(Token = "0x40001F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1EC")]
	public HardwareLevel currentHardwareLevel;

	[Token(Token = "0x1700003A")]
	public static GameController Instance
	{
		[Token(Token = "0x60001DA")]
		[Address(RVA = "0xAF44BC", Offset = "0xAF44BC", VA = "0xAF44BC")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60001DB")]
		[Address(RVA = "0xAF4504", Offset = "0xAF4504", VA = "0xAF4504")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1700003B")]
	public static GameData Data
	{
		[Token(Token = "0x60001DC")]
		[Address(RVA = "0xAF455C", Offset = "0xAF455C", VA = "0xAF455C")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60001DD")]
		[Address(RVA = "0xAF45A4", Offset = "0xAF45A4", VA = "0xAF45A4")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1700003C")]
	public MapManager MapManager
	{
		[Token(Token = "0x60001DE")]
		[Address(RVA = "0xAF45F4", Offset = "0xAF45F4", VA = "0xAF45F4")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60001DF")]
		[Address(RVA = "0xAF45FC", Offset = "0xAF45FC", VA = "0xAF45FC")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1700003D")]
	public LifeManager LifeManager
	{
		[Token(Token = "0x60001E0")]
		[Address(RVA = "0xAF4604", Offset = "0xAF4604", VA = "0xAF4604")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60001E1")]
		[Address(RVA = "0xAF460C", Offset = "0xAF460C", VA = "0xAF460C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1700003E")]
	public bool Ready
	{
		[Token(Token = "0x60001E2")]
		[Address(RVA = "0xAF4614", Offset = "0xAF4614", VA = "0xAF4614")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700003F")]
	public int SaveSlot
	{
		[Token(Token = "0x60001E3")]
		[Address(RVA = "0xAF4634", Offset = "0xAF4634", VA = "0xAF4634")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60001E4")]
		[Address(RVA = "0xAF463C", Offset = "0xAF463C", VA = "0xAF463C")]
		set
		{
		}
	}

	[Token(Token = "0x17000040")]
	public float Karma
	{
		[Token(Token = "0x60001E5")]
		[Address(RVA = "0xAF48A8", Offset = "0xAF48A8", VA = "0xAF48A8")]
		[CompilerGenerated]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60001E6")]
		[Address(RVA = "0xAF48B0", Offset = "0xAF48B0", VA = "0xAF48B0")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000041")]
	public GodAlignment Alignment
	{
		[Token(Token = "0x60001E7")]
		[Address(RVA = "0xAF48B8", Offset = "0xAF48B8", VA = "0xAF48B8")]
		[CompilerGenerated]
		get
		{
			return default(GodAlignment);
		}
		[Token(Token = "0x60001E8")]
		[Address(RVA = "0xAF48C0", Offset = "0xAF48C0", VA = "0xAF48C0")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000042")]
	public DeityRank DeityRank
	{
		[Token(Token = "0x60001E9")]
		[Address(RVA = "0xAF48C8", Offset = "0xAF48C8", VA = "0xAF48C8")]
		[CompilerGenerated]
		get
		{
			return default(DeityRank);
		}
		[Token(Token = "0x60001EA")]
		[Address(RVA = "0xAF48D0", Offset = "0xAF48D0", VA = "0xAF48D0")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000043")]
	public int DisplayedPopulationObjective
	{
		[Token(Token = "0x60001EB")]
		[Address(RVA = "0xAF48D8", Offset = "0xAF48D8", VA = "0xAF48D8")]
		[CompilerGenerated]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60001EC")]
		[Address(RVA = "0xAF48E0", Offset = "0xAF48E0", VA = "0xAF48E0")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000044")]
	public bool Sandbox
	{
		[Token(Token = "0x60001ED")]
		[Address(RVA = "0xAF48E8", Offset = "0xAF48E8", VA = "0xAF48E8")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60001EE")]
		[Address(RVA = "0xAF48F0", Offset = "0xAF48F0", VA = "0xAF48F0")]
		set
		{
		}
	}

	[Token(Token = "0x17000045")]
	public bool Disasters
	{
		[Token(Token = "0x60001EF")]
		[Address(RVA = "0xAF4BFC", Offset = "0xAF4BFC", VA = "0xAF4BFC")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60001F0")]
		[Address(RVA = "0xAF4C04", Offset = "0xAF4C04", VA = "0xAF4C04")]
		set
		{
		}
	}

	[Token(Token = "0x17000046")]
	public bool Heresy
	{
		[Token(Token = "0x60001F1")]
		[Address(RVA = "0xAF4C10", Offset = "0xAF4C10", VA = "0xAF4C10")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60001F2")]
		[Address(RVA = "0xAF4C18", Offset = "0xAF4C18", VA = "0xAF4C18")]
		set
		{
		}
	}

	[Token(Token = "0x17000047")]
	public bool GrabControls
	{
		[Token(Token = "0x60001F3")]
		[Address(RVA = "0xAF4CD0", Offset = "0xAF4CD0", VA = "0xAF4CD0")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60001F4")]
		[Address(RVA = "0xAF4CD8", Offset = "0xAF4CD8", VA = "0xAF4CD8")]
		set
		{
		}
	}

	[Token(Token = "0x17000048")]
	public bool GrabMovement
	{
		[Token(Token = "0x60001F5")]
		[Address(RVA = "0xAF4CE4", Offset = "0xAF4CE4", VA = "0xAF4CE4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60001F6")]
		[Address(RVA = "0xAF4CEC", Offset = "0xAF4CEC", VA = "0xAF4CEC")]
		set
		{
		}
	}

	[Token(Token = "0x17000049")]
	public bool Grab3dMovement
	{
		[Token(Token = "0x60001F7")]
		[Address(RVA = "0xAF4CF8", Offset = "0xAF4CF8", VA = "0xAF4CF8")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60001F8")]
		[Address(RVA = "0xAF4D00", Offset = "0xAF4D00", VA = "0xAF4D00")]
		set
		{
		}
	}

	[Token(Token = "0x1700004A")]
	public bool GrabRotation
	{
		[Token(Token = "0x60001F9")]
		[Address(RVA = "0xAF4D0C", Offset = "0xAF4D0C", VA = "0xAF4D0C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60001FA")]
		[Address(RVA = "0xAF4D14", Offset = "0xAF4D14", VA = "0xAF4D14")]
		set
		{
		}
	}

	[Token(Token = "0x1700004B")]
	public bool GrabScaling
	{
		[Token(Token = "0x60001FB")]
		[Address(RVA = "0xAF4D20", Offset = "0xAF4D20", VA = "0xAF4D20")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60001FC")]
		[Address(RVA = "0xAF4D28", Offset = "0xAF4D28", VA = "0xAF4D28")]
		set
		{
		}
	}

	[Token(Token = "0x1700004C")]
	public bool ReverseGrabScaling
	{
		[Token(Token = "0x60001FD")]
		[Address(RVA = "0xAF4D34", Offset = "0xAF4D34", VA = "0xAF4D34")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60001FE")]
		[Address(RVA = "0xAF4D3C", Offset = "0xAF4D3C", VA = "0xAF4D3C")]
		set
		{
		}
	}

	[Token(Token = "0x1700004D")]
	public bool StickMovement
	{
		[Token(Token = "0x60001FF")]
		[Address(RVA = "0xAF4D48", Offset = "0xAF4D48", VA = "0xAF4D48")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000200")]
		[Address(RVA = "0xAF4D50", Offset = "0xAF4D50", VA = "0xAF4D50")]
		set
		{
		}
	}

	[Token(Token = "0x1700004E")]
	public bool StickTeleportMovement
	{
		[Token(Token = "0x6000201")]
		[Address(RVA = "0xAF4D5C", Offset = "0xAF4D5C", VA = "0xAF4D5C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000202")]
		[Address(RVA = "0xAF4D64", Offset = "0xAF4D64", VA = "0xAF4D64")]
		set
		{
		}
	}

	[Token(Token = "0x1700004F")]
	public bool StickRotation
	{
		[Token(Token = "0x6000203")]
		[Address(RVA = "0xAF4D70", Offset = "0xAF4D70", VA = "0xAF4D70")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000204")]
		[Address(RVA = "0xAF4D78", Offset = "0xAF4D78", VA = "0xAF4D78")]
		set
		{
		}
	}

	[Token(Token = "0x17000050")]
	public int StickRotationStep
	{
		[Token(Token = "0x6000205")]
		[Address(RVA = "0xAF4D84", Offset = "0xAF4D84", VA = "0xAF4D84")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000206")]
		[Address(RVA = "0xAF4D8C", Offset = "0xAF4D8C", VA = "0xAF4D8C")]
		set
		{
		}
	}

	[Token(Token = "0x17000051")]
	public bool GripToGrab
	{
		[Token(Token = "0x6000207")]
		[Address(RVA = "0xAF4D94", Offset = "0xAF4D94", VA = "0xAF4D94")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000208")]
		[Address(RVA = "0xAF4D9C", Offset = "0xAF4D9C", VA = "0xAF4D9C")]
		set
		{
		}
	}

	[Token(Token = "0x17000052")]
	public bool MultiTerrain
	{
		[Token(Token = "0x6000209")]
		[Address(RVA = "0xAF4DA8", Offset = "0xAF4DA8", VA = "0xAF4DA8")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600020A")]
		[Address(RVA = "0xAF4DB0", Offset = "0xAF4DB0", VA = "0xAF4DB0")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000053")]
	public bool TutorialDone
	{
		[Token(Token = "0x600020B")]
		[Address(RVA = "0xAF4DBC", Offset = "0xAF4DBC", VA = "0xAF4DBC")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600020C")]
		[Address(RVA = "0xAF4DC4", Offset = "0xAF4DC4", VA = "0xAF4DC4")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000054")]
	public int Quality
	{
		[Token(Token = "0x600020D")]
		[Address(RVA = "0xAF4DD0", Offset = "0xAF4DD0", VA = "0xAF4DD0")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x600020E")]
		[Address(RVA = "0xAF4DD8", Offset = "0xAF4DD8", VA = "0xAF4DD8")]
		set
		{
		}
	}

	[Token(Token = "0x17000055")]
	public int Lang
	{
		[Token(Token = "0x600020F")]
		[Address(RVA = "0xAF4DE0", Offset = "0xAF4DE0", VA = "0xAF4DE0")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000210")]
		[Address(RVA = "0xAF4DE8", Offset = "0xAF4DE8", VA = "0xAF4DE8")]
		set
		{
		}
	}

	[Token(Token = "0x17000056")]
	public bool Pause
	{
		[Token(Token = "0x6000211")]
		[Address(RVA = "0xAF4DF0", Offset = "0xAF4DF0", VA = "0xAF4DF0")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000212")]
		[Address(RVA = "0xAF4DF8", Offset = "0xAF4DF8", VA = "0xAF4DF8")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000057")]
	public Vector3 PlayerPosition
	{
		[Token(Token = "0x6000213")]
		[Address(RVA = "0xAF4E04", Offset = "0xAF4E04", VA = "0xAF4E04")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x17000058")]
	public float PlayerScale
	{
		[Token(Token = "0x6000214")]
		[Address(RVA = "0xAF4F4C", Offset = "0xAF4F4C", VA = "0xAF4F4C")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000059")]
	public int TownCheckRadius
	{
		[Token(Token = "0x6000215")]
		[Address(RVA = "0xAF506C", Offset = "0xAF506C", VA = "0xAF506C")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700005A")]
	public string SaveMessage
	{
		[Token(Token = "0x600022C")]
		[Address(RVA = "0xAF6124", Offset = "0xAF6124", VA = "0xAF6124")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x600022D")]
		[Address(RVA = "0xAF612C", Offset = "0xAF612C", VA = "0xAF612C")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x1700005B")]
	public bool Loading
	{
		[Token(Token = "0x6000236")]
		[Address(RVA = "0xAF78C0", Offset = "0xAF78C0", VA = "0xAF78C0")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000237")]
		[Address(RVA = "0xAF78C8", Offset = "0xAF78C8", VA = "0xAF78C8")]
		set
		{
		}
	}

	[Token(Token = "0x1700005C")]
	public bool Restarting
	{
		[Token(Token = "0x6000238")]
		[Address(RVA = "0xAF78D4", Offset = "0xAF78D4", VA = "0xAF78D4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000239")]
		[Address(RVA = "0xAF78DC", Offset = "0xAF78DC", VA = "0xAF78DC")]
		set
		{
		}
	}

	[Token(Token = "0x1700005D")]
	public bool MapLoading
	{
		[Token(Token = "0x600023A")]
		[Address(RVA = "0xAF78E8", Offset = "0xAF78E8", VA = "0xAF78E8")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600023B")]
		[Address(RVA = "0xAF78F0", Offset = "0xAF78F0", VA = "0xAF78F0")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x1700005E")]
	public bool AnimalLoading
	{
		[Token(Token = "0x600023C")]
		[Address(RVA = "0xAF78FC", Offset = "0xAF78FC", VA = "0xAF78FC")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600023D")]
		[Address(RVA = "0xAF7904", Offset = "0xAF7904", VA = "0xAF7904")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x1700005F")]
	public bool TownsLoading
	{
		[Token(Token = "0x600023E")]
		[Address(RVA = "0xAF7910", Offset = "0xAF7910", VA = "0xAF7910")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600023F")]
		[Address(RVA = "0xAF7918", Offset = "0xAF7918", VA = "0xAF7918")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x60001D9")]
	[Address(RVA = "0xAF3DC0", Offset = "0xAF3DC0", VA = "0xAF3DC0")]
	public GameData ToData()
	{
		return null;
	}

	[Token(Token = "0x6000216")]
	[Address(RVA = "0xAF50F0", Offset = "0xAF50F0", VA = "0xAF50F0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000217")]
	[Address(RVA = "0xAF58F0", Offset = "0xAF58F0", VA = "0xAF58F0")]
	private void SetCurrentHardwareLvl()
	{
	}

	[Token(Token = "0x6000218")]
	[Address(RVA = "0xAF5BF4", Offset = "0xAF5BF4", VA = "0xAF5BF4")]
	public void MaxPerf()
	{
	}

	[Token(Token = "0x6000219")]
	[Address(RVA = "0xAF59F0", Offset = "0xAF59F0", VA = "0xAF59F0")]
	public void RelaxPerf()
	{
	}

	[Token(Token = "0x600021A")]
	[Address(RVA = "0xAF5C6C", Offset = "0xAF5C6C", VA = "0xAF5C6C")]
	public void MaxGPU()
	{
	}

	[Token(Token = "0x600021B")]
	[Address(RVA = "0xAF5CD0", Offset = "0xAF5CD0", VA = "0xAF5CD0")]
	public void MaxCPU()
	{
	}

	[Token(Token = "0x600021C")]
	[Address(RVA = "0xAF5D34", Offset = "0xAF5D34", VA = "0xAF5D34")]
	public void RelaxGPU()
	{
	}

	[Token(Token = "0x600021D")]
	[Address(RVA = "0xAF5D98", Offset = "0xAF5D98", VA = "0xAF5D98")]
	public void RelaxCPU()
	{
	}

	[Token(Token = "0x600021E")]
	[Address(RVA = "0xAF54E8", Offset = "0xAF54E8", VA = "0xAF54E8")]
	private void ClearCollections()
	{
	}

	[Token(Token = "0x600021F")]
	[Address(RVA = "0xAF5A68", Offset = "0xAF5A68", VA = "0xAF5A68")]
	private void DetectLocalization()
	{
	}

	[Token(Token = "0x6000220")]
	[Address(RVA = "0xAF5DFC", Offset = "0xAF5DFC", VA = "0xAF5DFC")]
	public void RegisterViewSwitcher(ViewSwitcher viewSwitcher)
	{
	}

	[Token(Token = "0x6000221")]
	[Address(RVA = "0xAF5E04", Offset = "0xAF5E04", VA = "0xAF5E04")]
	public void RegisterTextDisplay(TextDisplay textDisplay)
	{
	}

	[Token(Token = "0x6000222")]
	[Address(RVA = "0xAF5E0C", Offset = "0xAF5E0C", VA = "0xAF5E0C")]
	public void RegisterAutoSaveDisplay(AutoSaveDisplay autoSaveDisplay)
	{
	}

	[Token(Token = "0x6000223")]
	[Address(RVA = "0xAF55F4", Offset = "0xAF55F4", VA = "0xAF55F4")]
	private void LoadPlayerPrefs()
	{
	}

	[Token(Token = "0x6000224")]
	[Address(RVA = "0xAF4644", Offset = "0xAF4644", VA = "0xAF4644")]
	public void SavePlayerPrefs()
	{
	}

	[Token(Token = "0x6000225")]
	[Address(RVA = "0xAF5E14", Offset = "0xAF5E14", VA = "0xAF5E14")]
	public bool ToggleMultiTerrain()
	{
		return default(bool);
	}

	[Token(Token = "0x6000226")]
	[Address(RVA = "0xAF5E88", Offset = "0xAF5E88", VA = "0xAF5E88")]
	public int GetMankindCount()
	{
		return default(int);
	}

	[Token(Token = "0x6000227")]
	[Address(RVA = "0xAF5ED0", Offset = "0xAF5ED0", VA = "0xAF5ED0")]
	public int GetHereticsCount()
	{
		return default(int);
	}

	[Token(Token = "0x6000228")]
	[Address(RVA = "0xAF5F18", Offset = "0xAF5F18", VA = "0xAF5F18")]
	public int GetTownCount()
	{
		return default(int);
	}

	[Token(Token = "0x6000229")]
	[Address(RVA = "0xAF5F60", Offset = "0xAF5F60", VA = "0xAF5F60")]
	public int GetKarmaCount()
	{
		return default(int);
	}

	[Token(Token = "0x600022A")]
	[Address(RVA = "0xAF4210", Offset = "0xAF4210", VA = "0xAF4210")]
	public int GetFaithCount()
	{
		return default(int);
	}

	[Token(Token = "0x600022B")]
	[Address(RVA = "0xAF603C", Offset = "0xAF603C", VA = "0xAF603C")]
	public void Save()
	{
	}

	[Token(Token = "0x600022E")]
	[Address(RVA = "0xAF613C", Offset = "0xAF613C", VA = "0xAF613C")]
	public void Load()
	{
	}

	[Token(Token = "0x600022F")]
	[Address(RVA = "0xAF6244", Offset = "0xAF6244", VA = "0xAF6244")]
	public void LoadAutoSave()
	{
	}

	[Token(Token = "0x6000230")]
	[Address(RVA = "0xAF6348", Offset = "0xAF6348", VA = "0xAF6348")]
	private void Start()
	{
	}

	[Token(Token = "0x6000231")]
	[Address(RVA = "0xAF66C8", Offset = "0xAF66C8", VA = "0xAF66C8")]
	public void UnlockLevelAchievement(TechLevel currentLevel)
	{
	}

	[Token(Token = "0x6000232")]
	[Address(RVA = "0xAF66E0", Offset = "0xAF66E0", VA = "0xAF66E0")]
	public void UnlockAchievement(Achievement achievement)
	{
	}

	[Token(Token = "0x6000233")]
	[Address(RVA = "0xAF6798", Offset = "0xAF6798", VA = "0xAF6798")]
	private void InitGame(GameData gameData)
	{
	}

	[Token(Token = "0x6000234")]
	[Address(RVA = "0xAF6C10", Offset = "0xAF6C10", VA = "0xAF6C10")]
	[IteratorStateMachine(typeof(<LoadTownData>d__234))]
	private IEnumerator LoadTownData(List<TownData> townsData, RealmManagerData realmManagerData, int saveVersion)
	{
		return null;
	}

	[Token(Token = "0x6000235")]
	[Address(RVA = "0xAF6CC4", Offset = "0xAF6CC4", VA = "0xAF6CC4")]
	private void ResumeTutorial()
	{
	}

	[Token(Token = "0x6000240")]
	[Address(RVA = "0xAF7924", Offset = "0xAF7924", VA = "0xAF7924")]
	[IteratorStateMachine(typeof(<CreateFirstTownCoroutine>d__254))]
	private IEnumerator CreateFirstTownCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000241")]
	[Address(RVA = "0xAF7998", Offset = "0xAF7998", VA = "0xAF7998")]
	public void WaitForLoadGame(Task<GameData> gameData)
	{
	}

	[Token(Token = "0x6000242")]
	[Address(RVA = "0xAF79C0", Offset = "0xAF79C0", VA = "0xAF79C0")]
	[IteratorStateMachine(typeof(<WaitForLoadGameData>d__256))]
	private IEnumerator WaitForLoadGameData(Task<GameData> gameData)
	{
		return null;
	}

	[Token(Token = "0x6000243")]
	[Address(RVA = "0xAF7A34", Offset = "0xAF7A34", VA = "0xAF7A34")]
	public static void LoadGame(GameData gameData)
	{
	}

	[Token(Token = "0x6000244")]
	[Address(RVA = "0xAF7AEC", Offset = "0xAF7AEC", VA = "0xAF7AEC")]
	public void Select(GameObject selectedGameObject)
	{
	}

	[Token(Token = "0x6000245")]
	[Address(RVA = "0xAF7AFC", Offset = "0xAF7AFC", VA = "0xAF7AFC")]
	public GameObject RemoveZone(Vector3 impactPosition)
	{
		return null;
	}

	[Token(Token = "0x6000246")]
	[Address(RVA = "0xAF7B18", Offset = "0xAF7B18", VA = "0xAF7B18")]
	public void RemoveAndSwitchZone(Vector3 transformPosition, TerrainType terrainType)
	{
	}

	[Token(Token = "0x6000247")]
	[Address(RVA = "0xAF1C74", Offset = "0xAF1C74", VA = "0xAF1C74")]
	public void TrySwitchZone(Spell spell)
	{
	}

	[Token(Token = "0x6000248")]
	[Address(RVA = "0xAF7C08", Offset = "0xAF7C08", VA = "0xAF7C08")]
	private void DisplayMessage(Deisim.Enums.Message message)
	{
	}

	[Token(Token = "0x6000249")]
	[Address(RVA = "0xAF7B64", Offset = "0xAF7B64", VA = "0xAF7B64")]
	public void SwitchZone(TerrainType type, int radius = 0)
	{
	}

	[Token(Token = "0x600024A")]
	[Address(RVA = "0xAF7C88", Offset = "0xAF7C88", VA = "0xAF7C88")]
	public static void RemoveSpell(Component spell)
	{
	}

	[Token(Token = "0x600024B")]
	[Address(RVA = "0xAF7E9C", Offset = "0xAF7E9C", VA = "0xAF7E9C")]
	public void AddLava(Vector3 volcanoPosition, int distance)
	{
	}

	[Token(Token = "0x600024C")]
	[Address(RVA = "0xAF7EB8", Offset = "0xAF7EB8", VA = "0xAF7EB8")]
	public void RemoveLava(Vector3 volcanoPosition)
	{
	}

	[Token(Token = "0x600024D")]
	[Address(RVA = "0xAE8D64", Offset = "0xAE8D64", VA = "0xAE8D64")]
	public void RetrieveEnergy(MiracleType miracleType)
	{
	}

	[Token(Token = "0x600024E")]
	[Address(RVA = "0xAF7ED4", Offset = "0xAF7ED4", VA = "0xAF7ED4")]
	public void RetrieveEnergy(float cost)
	{
	}

	[Token(Token = "0x600024F")]
	[Address(RVA = "0xAF7C2C", Offset = "0xAF7C2C", VA = "0xAF7C2C")]
	public bool CheckAndConsumeEnergy(float amount, bool isTerrain)
	{
		return default(bool);
	}

	[Token(Token = "0x6000250")]
	[Address(RVA = "0xAF7F88", Offset = "0xAF7F88", VA = "0xAF7F88")]
	internal bool RequestNewTown(Position position, TownType type, TerrainType terrainType, out Town newTown)
	{
		return default(bool);
	}

	[Token(Token = "0x6000251")]
	[Address(RVA = "0xAF80DC", Offset = "0xAF80DC", VA = "0xAF80DC")]
	private Town NewTown(Position position, TownType type)
	{
		return null;
	}

	[Token(Token = "0x6000252")]
	[Address(RVA = "0xAF846C", Offset = "0xAF846C", VA = "0xAF846C")]
	internal void RemoveTown(Town town)
	{
	}

	[Token(Token = "0x6000253")]
	[Address(RVA = "0xAE6D08", Offset = "0xAE6D08", VA = "0xAE6D08")]
	public void RemoveAddon(Addon addon)
	{
	}

	[Token(Token = "0x6000254")]
	[Address(RVA = "0xAF85C0", Offset = "0xAF85C0", VA = "0xAF85C0")]
	internal Human NewHuman()
	{
		return null;
	}

	[Token(Token = "0x6000255")]
	[Address(RVA = "0xAF8800", Offset = "0xAF8800", VA = "0xAF8800")]
	private void CheckMankindAchievements()
	{
	}

	[Token(Token = "0x6000256")]
	[Address(RVA = "0xAF88AC", Offset = "0xAF88AC", VA = "0xAF88AC")]
	internal Addon NewAddon(Addon addonPrefab, Position position, bool loadedAddon = false)
	{
		return null;
	}

	[Token(Token = "0x6000257")]
	[Address(RVA = "0xAF89F4", Offset = "0xAF89F4", VA = "0xAF89F4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000258")]
	[Address(RVA = "0xAF9254", Offset = "0xAF9254", VA = "0xAF9254")]
	private void RefreshResources()
	{
	}

	[Token(Token = "0x6000259")]
	[Address(RVA = "0xAF9318", Offset = "0xAF9318", VA = "0xAF9318")]
	private void RefreshTowns()
	{
	}

	[Token(Token = "0x600025A")]
	[Address(RVA = "0xAF93DC", Offset = "0xAF93DC", VA = "0xAF93DC")]
	private void RefreshHumans()
	{
	}

	[Token(Token = "0x600025B")]
	[Address(RVA = "0xAF4900", Offset = "0xAF4900", VA = "0xAF4900")]
	private void RefreshDeityRank(bool ignoreGracePeriod = false)
	{
	}

	[Token(Token = "0x600025C")]
	[Address(RVA = "0xAF7F28", Offset = "0xAF7F28", VA = "0xAF7F28")]
	private float ManaMax()
	{
		return default(float);
	}

	[Token(Token = "0x600025D")]
	[Address(RVA = "0xAF8CFC", Offset = "0xAF8CFC", VA = "0xAF8CFC")]
	private void CollectBelief()
	{
	}

	[Token(Token = "0x600025E")]
	[Address(RVA = "0xAF1C30", Offset = "0xAF1C30", VA = "0xAF1C30")]
	internal bool FirstEmptyTerrainThisFrame()
	{
		return default(bool);
	}

	[Token(Token = "0x600025F")]
	[Address(RVA = "0xAF8428", Offset = "0xAF8428", VA = "0xAF8428")]
	internal bool FirstNewTownThisFrame()
	{
		return default(bool);
	}

	[Token(Token = "0x6000260")]
	[Address(RVA = "0xAF9494", Offset = "0xAF9494", VA = "0xAF9494")]
	public void Restart()
	{
	}

	[Token(Token = "0x6000261")]
	[Address(RVA = "0xAF95F0", Offset = "0xAF95F0", VA = "0xAF95F0")]
	public bool PerformMiracle(Spell miracle)
	{
		return default(bool);
	}

	[Token(Token = "0x6000262")]
	[Address(RVA = "0xAF3010", Offset = "0xAF3010", VA = "0xAF3010")]
	public void ChangeKarma(float value)
	{
	}

	[Token(Token = "0x6000263")]
	[Address(RVA = "0xAF253C", Offset = "0xAF253C", VA = "0xAF253C")]
	public void StartTutorial(GameObject firstTutorialHint)
	{
	}

	[Token(Token = "0x6000264")]
	[Address(RVA = "0xAF6F28", Offset = "0xAF6F28", VA = "0xAF6F28")]
	public void TutorialPhase2(Town town)
	{
	}

	[Token(Token = "0x6000265")]
	[Address(RVA = "0xAF70A4", Offset = "0xAF70A4", VA = "0xAF70A4")]
	public void TutorialPhase3(Town town)
	{
	}

	[Token(Token = "0x6000266")]
	[Address(RVA = "0xAF7210", Offset = "0xAF7210", VA = "0xAF7210")]
	public void TutorialPhase4(Town town)
	{
	}

	[Token(Token = "0x6000267")]
	[Address(RVA = "0xAF737C", Offset = "0xAF737C", VA = "0xAF737C")]
	public void TutorialPhase5(Town town)
	{
	}

	[Token(Token = "0x6000268")]
	[Address(RVA = "0xAF74E8", Offset = "0xAF74E8", VA = "0xAF74E8")]
	public void TutorialPhase6(Town town)
	{
	}

	[Token(Token = "0x6000269")]
	[Address(RVA = "0xAF7650", Offset = "0xAF7650", VA = "0xAF7650")]
	public void TutorialPhase7()
	{
	}

	[Token(Token = "0x600026A")]
	[Address(RVA = "0xAF77BC", Offset = "0xAF77BC", VA = "0xAF77BC")]
	public void TutorialPhase8()
	{
	}

	[Token(Token = "0x600026B")]
	[Address(RVA = "0xAF9798", Offset = "0xAF9798", VA = "0xAF9798")]
	public void EndTutorial()
	{
	}

	[Token(Token = "0x600026C")]
	[Address(RVA = "0xAF9890", Offset = "0xAF9890", VA = "0xAF9890")]
	public void HeightInc()
	{
	}

	[Token(Token = "0x600026D")]
	[Address(RVA = "0xAF98AC", Offset = "0xAF98AC", VA = "0xAF98AC")]
	public void HeightDec()
	{
	}

	[Token(Token = "0x600026E")]
	[Address(RVA = "0xAF91D4", Offset = "0xAF91D4", VA = "0xAF91D4")]
	[ContextMenu("Force Auto Save")]
	private void AutoSave()
	{
	}

	[Token(Token = "0x600026F")]
	[Address(RVA = "0xAF98C8", Offset = "0xAF98C8", VA = "0xAF98C8")]
	public void RegisterResource(Resource resource)
	{
	}

	[Token(Token = "0x6000270")]
	[Address(RVA = "0xAF99B0", Offset = "0xAF99B0", VA = "0xAF99B0")]
	public void UnregisterResource(Resource resource)
	{
	}

	[Token(Token = "0x6000271")]
	[Address(RVA = "0xAF6498", Offset = "0xAF6498", VA = "0xAF6498")]
	private static ControllerType DetectControllerType()
	{
		return default(ControllerType);
	}

	[Token(Token = "0x6000272")]
	[Address(RVA = "0xAF9A10", Offset = "0xAF9A10", VA = "0xAF9A10")]
	public void MiracleMenuOpened()
	{
	}

	[Token(Token = "0x6000273")]
	[Address(RVA = "0xAF9AC8", Offset = "0xAF9AC8", VA = "0xAF9AC8")]
	public void MiracleGrabbed()
	{
	}

	[Token(Token = "0x6000274")]
	[Address(RVA = "0xAF9B80", Offset = "0xAF9B80", VA = "0xAF9B80")]
	public void TerrainMiracleDestroyed()
	{
	}

	[Token(Token = "0x6000275")]
	[Address(RVA = "0xAF9C38", Offset = "0xAF9C38", VA = "0xAF9C38")]
	public void MainMenuOpened()
	{
	}

	[Token(Token = "0x6000276")]
	[Address(RVA = "0xAF9C7C", Offset = "0xAF9C7C", VA = "0xAF9C7C")]
	public void TeleportRequested()
	{
	}

	[Token(Token = "0x6000277")]
	[Address(RVA = "0xAF9CC0", Offset = "0xAF9CC0", VA = "0xAF9CC0")]
	public void SwitchQualityLevel()
	{
	}

	[Token(Token = "0x6000278")]
	[Address(RVA = "0xAF9D34", Offset = "0xAF9D34", VA = "0xAF9D34")]
	[ContextMenu("Switch language")]
	public void SwitchLanguage()
	{
	}

	[Token(Token = "0x6000279")]
	[Address(RVA = "0xAF9E48", Offset = "0xAF9E48", VA = "0xAF9E48")]
	public bool AddAnimal(Vector3 position)
	{
		return default(bool);
	}

	[Token(Token = "0x600027A")]
	[Address(RVA = "0xAF8FC0", Offset = "0xAF8FC0", VA = "0xAF8FC0")]
	private void CreateHeretic()
	{
	}

	[Token(Token = "0x600027B")]
	[Address(RVA = "0xAF9F40", Offset = "0xAF9F40", VA = "0xAF9F40")]
	public void NewHeretic(Human human)
	{
	}

	[Token(Token = "0x600027C")]
	[Address(RVA = "0xAFA004", Offset = "0xAFA004", VA = "0xAFA004")]
	public bool AddMineral(Vector3 position)
	{
		return default(bool);
	}

	[Token(Token = "0x600027D")]
	[Address(RVA = "0xAFA084", Offset = "0xAFA084", VA = "0xAFA084")]
	public bool AddStone(Vector3 position)
	{
		return default(bool);
	}

	[Token(Token = "0x600027E")]
	[Address(RVA = "0xAFA104", Offset = "0xAFA104", VA = "0xAFA104")]
	public void ConvertTerrain(Vector3 position, TerrainType newTerrainType)
	{
	}

	[Token(Token = "0x600027F")]
	[Address(RVA = "0xAFA120", Offset = "0xAFA120", VA = "0xAFA120")]
	public string GetNewCityName(TownType type)
	{
		return null;
	}

	[Token(Token = "0x6000280")]
	[Address(RVA = "0xAFA13C", Offset = "0xAFA13C", VA = "0xAFA13C")]
	public void RegisterBeforeExitAction(IBeforeExitAction beforeExitAction)
	{
	}

	[Token(Token = "0x6000281")]
	[Address(RVA = "0xAFA14C", Offset = "0xAFA14C", VA = "0xAFA14C")]
	public void Exit()
	{
	}

	[Token(Token = "0x6000282")]
	[Address(RVA = "0xAFA1F8", Offset = "0xAFA1F8", VA = "0xAFA1F8")]
	public void SetFloorType(Vector3 position, bool natural = false, bool partiallyNatural = false)
	{
	}

	[Token(Token = "0x6000283")]
	[Address(RVA = "0xAFA21C", Offset = "0xAFA21C", VA = "0xAFA21C")]
	public TechLevel GetMaxTechLevel()
	{
		return default(TechLevel);
	}

	[Token(Token = "0x6000284")]
	[Address(RVA = "0xAFA224", Offset = "0xAFA224", VA = "0xAFA224")]
	public void RefreshMaxTechLevel(TechLevel techLevel)
	{
	}

	[Token(Token = "0x6000285")]
	[Address(RVA = "0xAFA238", Offset = "0xAFA238", VA = "0xAFA238")]
	[ContextMenu("Count terrains")]
	public void CountTerrains()
	{
	}

	[Token(Token = "0x6000286")]
	[Address(RVA = "0xAF1968", Offset = "0xAF1968", VA = "0xAF1968")]
	public void RegisterEmptyTerrain(EmptyTerrain emptyTerrain)
	{
	}

	[Token(Token = "0x6000287")]
	[Address(RVA = "0xAF230C", Offset = "0xAF230C", VA = "0xAF230C")]
	public void UnregisterEmptyTerrain(EmptyTerrain emptyTerrain)
	{
	}

	[Token(Token = "0x6000288")]
	[Address(RVA = "0xAF8CAC", Offset = "0xAF8CAC", VA = "0xAF8CAC")]
	[ContextMenu("Increase Speed")]
	public void IncreaseSpeed()
	{
	}

	[Token(Token = "0x6000289")]
	[Address(RVA = "0xAF8CD4", Offset = "0xAF8CD4", VA = "0xAF8CD4")]
	[ContextMenu("Decrease Speed")]
	public void DecreaseSpeed()
	{
	}

	[Token(Token = "0x600028A")]
	[Address(RVA = "0xAFA3E0", Offset = "0xAFA3E0", VA = "0xAFA3E0")]
	private void SetUserSpeed()
	{
	}

	[Token(Token = "0x600028B")]
	[Address(RVA = "0xAFA450", Offset = "0xAFA450", VA = "0xAFA450")]
	[ContextMenu("Default Speed")]
	public void DefaultSpeed()
	{
	}

	[Token(Token = "0x600028C")]
	[Address(RVA = "0xAFA45C", Offset = "0xAFA45C", VA = "0xAFA45C")]
	private void OnApplicationPause(bool pauseStatus)
	{
	}

	[Token(Token = "0x600028D")]
	[Address(RVA = "0xAFA510", Offset = "0xAFA510", VA = "0xAFA510")]
	public void PauseGame()
	{
	}

	[Token(Token = "0x600028E")]
	[Address(RVA = "0xAFA51C", Offset = "0xAFA51C", VA = "0xAFA51C")]
	public void ResumeGame()
	{
	}

	[Token(Token = "0x600028F")]
	[Address(RVA = "0xAFA57C", Offset = "0xAFA57C", VA = "0xAFA57C")]
	[ContextMenu("Load Game")]
	public void ManualLoadGame()
	{
	}

	[Token(Token = "0x6000290")]
	[Address(RVA = "0xAFA588", Offset = "0xAFA588", VA = "0xAFA588")]
	public void LockLanguage(bool locked)
	{
	}

	[Token(Token = "0x6000291")]
	[Address(RVA = "0xAF9EC8", Offset = "0xAF9EC8", VA = "0xAF9EC8")]
	public void NotifyBadCombination(Vector3 position)
	{
	}

	[Token(Token = "0x6000292")]
	[Address(RVA = "0xAFA594", Offset = "0xAFA594", VA = "0xAFA594")]
	public void NotifyCityUpgrade(string cityName, Color32 cityNameColor, TechLevel techLevel)
	{
	}

	[Token(Token = "0x6000293")]
	[Address(RVA = "0xAF8674", Offset = "0xAF8674", VA = "0xAF8674")]
	public void AddHuman(Human human)
	{
	}

	[Token(Token = "0x6000294")]
	[Address(RVA = "0xAFA5B4", Offset = "0xAFA5B4", VA = "0xAFA5B4")]
	public void RemoveHuman(Human human)
	{
	}

	[Token(Token = "0x6000295")]
	[Address(RVA = "0xAFA62C", Offset = "0xAFA62C", VA = "0xAFA62C")]
	[IteratorStateMachine(typeof(<VoidMiracle>d__339))]
	private static IEnumerator VoidMiracle(Vector3 position)
	{
		return null;
	}

	[Token(Token = "0x6000296")]
	[Address(RVA = "0xAFA6B0", Offset = "0xAFA6B0", VA = "0xAFA6B0")]
	public void PerformVoidMiracle(Vector3 miraclePosition)
	{
	}

	[Token(Token = "0x6000297")]
	[Address(RVA = "0xAFA6D0", Offset = "0xAFA6D0", VA = "0xAFA6D0")]
	public bool AddMaelstrom(Vector3 miraclePosition)
	{
		return default(bool);
	}

	[Token(Token = "0x6000298")]
	[Address(RVA = "0xAFA750", Offset = "0xAFA750", VA = "0xAFA750")]
	public GameController()
	{
	}
}
[Token(Token = "0x200005E")]
public class HandAnimator : MonoBehaviour
{
	[Token(Token = "0x4000213")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool _pointing;

	[Token(Token = "0x4000214")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	private bool _hold;

	[Token(Token = "0x4000215")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Animator _handAnimator;

	[Token(Token = "0x60002B8")]
	[Address(RVA = "0xAFBD9C", Offset = "0xAFBD9C", VA = "0xAFBD9C")]
	private void Start()
	{
	}

	[Token(Token = "0x60002B9")]
	[Address(RVA = "0xAFBDF4", Offset = "0xAFBDF4", VA = "0xAFBDF4")]
	public void PointOn()
	{
	}

	[Token(Token = "0x60002BA")]
	[Address(RVA = "0xAFBE4C", Offset = "0xAFBE4C", VA = "0xAFBE4C")]
	public void PointOff()
	{
	}

	[Token(Token = "0x60002BB")]
	[Address(RVA = "0xAFBEA4", Offset = "0xAFBEA4", VA = "0xAFBEA4")]
	public void GrabOn()
	{
	}

	[Token(Token = "0x60002BC")]
	[Address(RVA = "0xAFBF28", Offset = "0xAFBF28", VA = "0xAFBF28")]
	public void GrabOff()
	{
	}

	[Token(Token = "0x60002BD")]
	[Address(RVA = "0xAFBF80", Offset = "0xAFBF80", VA = "0xAFBF80")]
	public void Dispel()
	{
	}

	[Token(Token = "0x60002BE")]
	[Address(RVA = "0xAFBFD4", Offset = "0xAFBFD4", VA = "0xAFBFD4")]
	public void Action()
	{
	}

	[Token(Token = "0x60002BF")]
	[Address(RVA = "0xAFC028", Offset = "0xAFC028", VA = "0xAFC028")]
	public HandAnimator()
	{
	}
}
[Token(Token = "0x200005F")]
public class HandTextFader : MonoBehaviour
{
	[Token(Token = "0x4000216")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TextMeshPro textMeshPro;

	[Token(Token = "0x4000217")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public HandTextFaderConfiguration configuration;

	[Token(Token = "0x4000218")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool init;

	[Token(Token = "0x4000219")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Color textColor;

	[Token(Token = "0x400021A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Transform target;

	[Token(Token = "0x400021B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Transform thisTransform;

	[Token(Token = "0x60002C0")]
	[Address(RVA = "0xAFC030", Offset = "0xAFC030", VA = "0xAFC030")]
	private void Awake()
	{
	}

	[Token(Token = "0x60002C1")]
	[Address(RVA = "0xAFC1C4", Offset = "0xAFC1C4", VA = "0xAFC1C4")]
	private void Update()
	{
	}

	[Token(Token = "0x60002C2")]
	[Address(RVA = "0xAFC5B0", Offset = "0xAFC5B0", VA = "0xAFC5B0")]
	public HandTextFader()
	{
	}
}
[Token(Token = "0x2000060")]
[CreateAssetMenu(menuName = "Locomotion/Hand Text Fader Configuration")]
public class HandTextFaderConfiguration : ScriptableObject
{
	[Token(Token = "0x400021C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Range(0f, 1f)]
	public float minFadeOutThreshold;

	[Token(Token = "0x400021D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Range(0f, 1f)]
	public float maxFadeOutThreshold;

	[Token(Token = "0x60002C3")]
	[Address(RVA = "0xAFC5B8", Offset = "0xAFC5B8", VA = "0xAFC5B8")]
	public HandTextFaderConfiguration()
	{
	}
}
[Token(Token = "0x2000061")]
public class Head : MonoBehaviour
{
	[Token(Token = "0x400021E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioSet eatAudioSet;

	[Token(Token = "0x60002C4")]
	[Address(RVA = "0xAFC5CC", Offset = "0xAFC5CC", VA = "0xAFC5CC")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60002C5")]
	[Address(RVA = "0xAFC788", Offset = "0xAFC788", VA = "0xAFC788")]
	public Head()
	{
	}
}
[Token(Token = "0x2000062")]
public class HeightModifier : MonoBehaviour
{
	[Token(Token = "0x400021F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TextMeshProUGUI modifierDisplay;

	[Token(Token = "0x60002C6")]
	[Address(RVA = "0xAFC790", Offset = "0xAFC790", VA = "0xAFC790")]
	public void Increase()
	{
	}

	[Token(Token = "0x60002C7")]
	[Address(RVA = "0xAFC864", Offset = "0xAFC864", VA = "0xAFC864")]
	public void Decrease()
	{
	}

	[Token(Token = "0x60002C8")]
	[Address(RVA = "0xAFC7F0", Offset = "0xAFC7F0", VA = "0xAFC7F0")]
	private void RefreshDisplay()
	{
	}

	[Token(Token = "0x60002C9")]
	[Address(RVA = "0xAFC8C4", Offset = "0xAFC8C4", VA = "0xAFC8C4")]
	public HeightModifier()
	{
	}
}
[Token(Token = "0x2000063")]
public class HeldObject : MonoBehaviour
{
	[Token(Token = "0x4000220")]
	private const int PhysicalLayer = 13;

	[Token(Token = "0x4000221")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool init;

	[Token(Token = "0x4000222")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Interactor interactor;

	[Token(Token = "0x4000223")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private InteractableObject interactableObject;

	[Token(Token = "0x4000224")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Rigidbody grabbedRigidbody;

	[Token(Token = "0x4000225")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private CollisionDetectionMode initialCollisionDetection;

	[Token(Token = "0x60002CA")]
	[Address(RVA = "0xAFC8CC", Offset = "0xAFC8CC", VA = "0xAFC8CC")]
	public void Init(Interactor grabber, InteractableObject grabbedObject)
	{
	}

	[Token(Token = "0x60002CB")]
	[Address(RVA = "0xAFC9D4", Offset = "0xAFC9D4", VA = "0xAFC9D4")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60002CC")]
	[Address(RVA = "0xAFCA5C", Offset = "0xAFCA5C", VA = "0xAFCA5C")]
	private void OnCollisionEnter(Collision other)
	{
	}

	[Token(Token = "0x60002CD")]
	[Address(RVA = "0xAFD054", Offset = "0xAFD054", VA = "0xAFD054")]
	public HeldObject()
	{
	}
}
[Token(Token = "0x2000064")]
[SelectionBase]
public class Human : MonoBehaviour, IBurnable, IPoisonable, IHealable, IElectrocutable, IMiracleObserver, IPlayerAwareReactive, ICapturable, ISqueezable, IEatableByPlayer, ILocalizedText, ITooltipProvider
{
	[Token(Token = "0x2000066")]
	[CompilerGenerated]
	private sealed class <SpreadHeresy>d__207 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400029C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400029D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400029E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Human <>4__this;

		[Token(Token = "0x400029F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <overlapSphereResultCount>5__2;

		[Token(Token = "0x40002A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int <i>5__3;

		[Token(Token = "0x40002A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Town <town>5__4;

		[Token(Token = "0x40002A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private PathManager.PathRequest <pathToTownRequest>5__5;

		[Token(Token = "0x1700007C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600038D")]
			[Address(RVA = "0xB08408", Offset = "0xB08408", VA = "0xB08408", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700007D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600038F")]
			[Address(RVA = "0xB08450", Offset = "0xB08450", VA = "0xB08450", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600038A")]
		[Address(RVA = "0xB037B0", Offset = "0xB037B0", VA = "0xB037B0")]
		[DebuggerHidden]
		public <SpreadHeresy>d__207(int <>1__state)
		{
		}

		[Token(Token = "0x600038B")]
		[Address(RVA = "0xB07E98", Offset = "0xB07E98", VA = "0xB07E98", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600038C")]
		[Address(RVA = "0xB07E9C", Offset = "0xB07E9C", VA = "0xB07E9C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600038E")]
		[Address(RVA = "0xB08410", Offset = "0xB08410", VA = "0xB08410", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000067")]
	[CompilerGenerated]
	private sealed class <WaitForPath>d__218 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40002A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40002A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40002A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Human <>4__this;

		[Token(Token = "0x1700007E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000393")]
			[Address(RVA = "0xB0850C", Offset = "0xB0850C", VA = "0xB0850C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700007F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000395")]
			[Address(RVA = "0xB08554", Offset = "0xB08554", VA = "0xB08554", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000390")]
		[Address(RVA = "0xB03CB0", Offset = "0xB03CB0", VA = "0xB03CB0")]
		[DebuggerHidden]
		public <WaitForPath>d__218(int <>1__state)
		{
		}

		[Token(Token = "0x6000391")]
		[Address(RVA = "0xB08458", Offset = "0xB08458", VA = "0xB08458", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000392")]
		[Address(RVA = "0xB0845C", Offset = "0xB0845C", VA = "0xB0845C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000394")]
		[Address(RVA = "0xB08514", Offset = "0xB08514", VA = "0xB08514", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000068")]
	[CompilerGenerated]
	private sealed class <FindHomeCoroutine>d__231 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40002A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40002A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40002A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Human <>4__this;

		[Token(Token = "0x40002A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool forcedByPlayer;

		[Token(Token = "0x40002AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Realm <realmOfNewCity>5__2;

		[Token(Token = "0x40002AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Town <previousHomeland>5__3;

		[Token(Token = "0x40002AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float <lowestSqrDist>5__4;

		[Token(Token = "0x40002AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private int <lowestSteps>5__5;

		[Token(Token = "0x40002AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Town <currentSelectedTown>5__6;

		[Token(Token = "0x40002AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int <i>5__7;

		[Token(Token = "0x40002B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float <sqrDistanceToTown>5__8;

		[Token(Token = "0x40002B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private PathManager.PathRequest <requestPathToTown>5__9;

		[Token(Token = "0x17000080")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000399")]
			[Address(RVA = "0xB09000", Offset = "0xB09000", VA = "0xB09000", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000081")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600039B")]
			[Address(RVA = "0xB09048", Offset = "0xB09048", VA = "0xB09048", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000396")]
		[Address(RVA = "0xB0409C", Offset = "0xB0409C", VA = "0xB0409C")]
		[DebuggerHidden]
		public <FindHomeCoroutine>d__231(int <>1__state)
		{
		}

		[Token(Token = "0x6000397")]
		[Address(RVA = "0xB0855C", Offset = "0xB0855C", VA = "0xB0855C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000398")]
		[Address(RVA = "0xB08560", Offset = "0xB08560", VA = "0xB08560", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600039A")]
		[Address(RVA = "0xB09008", Offset = "0xB09008", VA = "0xB09008", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000069")]
	[CompilerGenerated]
	private sealed class <CreateNewTown>d__232 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40002B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40002B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40002B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Human <>4__this;

		[Token(Token = "0x40002B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 searchPosition;

		[Token(Token = "0x40002B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public int maxRadius;

		[Token(Token = "0x40002B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int minRadius;

		[Token(Token = "0x40002B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public bool closest;

		[Token(Token = "0x40002B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Realm realmOfNewCity;

		[Token(Token = "0x40002BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private MapManager.FreeTerrainRequest <request>5__2;

		[Token(Token = "0x40002BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private TownType <civilisationType>5__3;

		[Token(Token = "0x40002BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private TerrainType <terrainType>5__4;

		[Token(Token = "0x40002BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private MapManager.FreeTerrainRequest <pirateRequest>5__5;

		[Token(Token = "0x17000082")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600039F")]
			[Address(RVA = "0xB0977C", Offset = "0xB0977C", VA = "0xB0977C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000083")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60003A1")]
			[Address(RVA = "0xB097C4", Offset = "0xB097C4", VA = "0xB097C4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600039C")]
		[Address(RVA = "0xB04198", Offset = "0xB04198", VA = "0xB04198")]
		[DebuggerHidden]
		public <CreateNewTown>d__232(int <>1__state)
		{
		}

		[Token(Token = "0x600039D")]
		[Address(RVA = "0xB09050", Offset = "0xB09050", VA = "0xB09050", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600039E")]
		[Address(RVA = "0xB09054", Offset = "0xB09054", VA = "0xB09054", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60003A0")]
		[Address(RVA = "0xB09784", Offset = "0xB09784", VA = "0xB09784", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200006A")]
	[CompilerGenerated]
	private sealed class <FindResourceOfType>d__251 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40002BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40002BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40002C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Human <>4__this;

		[Token(Token = "0x40002C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ResourceType resourceType;

		[Token(Token = "0x40002C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int <mapUnit>5__2;

		[Token(Token = "0x40002C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool <nearestResourceFound>5__3;

		[Token(Token = "0x40002C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private PathManager.PathRequest <shortestPath>5__4;

		[Token(Token = "0x40002C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Resource <nearestResource>5__5;

		[Token(Token = "0x40002C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3 <searchPosition>5__6;

		[Token(Token = "0x40002C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private int <overlapSphereResultCount>5__7;

		[Token(Token = "0x40002C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int <count>5__8;

		[Token(Token = "0x40002C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private int <i>5__9;

		[Token(Token = "0x40002CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Resource <resource>5__10;

		[Token(Token = "0x40002CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3 <resourcePosition>5__11;

		[Token(Token = "0x40002CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private PathManager.PathRequest <pathToResource>5__12;

		[Token(Token = "0x17000084")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60003A5")]
			[Address(RVA = "0xB09EB8", Offset = "0xB09EB8", VA = "0xB09EB8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000085")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60003A7")]
			[Address(RVA = "0xB09F00", Offset = "0xB09F00", VA = "0xB09F00", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60003A2")]
		[Address(RVA = "0xB05010", Offset = "0xB05010", VA = "0xB05010")]
		[DebuggerHidden]
		public <FindResourceOfType>d__251(int <>1__state)
		{
		}

		[Token(Token = "0x60003A3")]
		[Address(RVA = "0xB097CC", Offset = "0xB097CC", VA = "0xB097CC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60003A4")]
		[Address(RVA = "0xB097D0", Offset = "0xB097D0", VA = "0xB097D0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60003A6")]
		[Address(RVA = "0xB09EC0", Offset = "0xB09EC0", VA = "0xB09EC0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200006B")]
	[CompilerGenerated]
	private sealed class <RequestBodyInstantiation>d__280 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40002CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40002CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40002CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Human <>4__this;

		[Token(Token = "0x17000086")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60003AB")]
			[Address(RVA = "0xB09FEC", Offset = "0xB09FEC", VA = "0xB09FEC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000087")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60003AD")]
			[Address(RVA = "0xB0A034", Offset = "0xB0A034", VA = "0xB0A034", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60003A8")]
		[Address(RVA = "0xB06278", Offset = "0xB06278", VA = "0xB06278")]
		[DebuggerHidden]
		public <RequestBodyInstantiation>d__280(int <>1__state)
		{
		}

		[Token(Token = "0x60003A9")]
		[Address(RVA = "0xB09F08", Offset = "0xB09F08", VA = "0xB09F08", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60003AA")]
		[Address(RVA = "0xB09F0C", Offset = "0xB09F0C", VA = "0xB09F0C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60003AC")]
		[Address(RVA = "0xB09FF4", Offset = "0xB09FF4", VA = "0xB09FF4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200006C")]
	[CompilerGenerated]
	private sealed class <CheckHomeRunCoroutine>d__305 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40002D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40002D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40002D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Human <>4__this;

		[Token(Token = "0x40002D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <checkTime>5__2;

		[Token(Token = "0x40002D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector3 <initialPos>5__3;

		[Token(Token = "0x17000088")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60003B1")]
			[Address(RVA = "0xB0A23C", Offset = "0xB0A23C", VA = "0xB0A23C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000089")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60003B3")]
			[Address(RVA = "0xB0A284", Offset = "0xB0A284", VA = "0xB0A284", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60003AE")]
		[Address(RVA = "0xB06A40", Offset = "0xB06A40", VA = "0xB06A40")]
		[DebuggerHidden]
		public <CheckHomeRunCoroutine>d__305(int <>1__state)
		{
		}

		[Token(Token = "0x60003AF")]
		[Address(RVA = "0xB0A03C", Offset = "0xB0A03C", VA = "0xB0A03C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60003B0")]
		[Address(RVA = "0xB0A040", Offset = "0xB0A040", VA = "0xB0A040", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60003B2")]
		[Address(RVA = "0xB0A244", Offset = "0xB0A244", VA = "0xB0A244", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000226")]
	private const float Epsilon = 0.001f;

	[Token(Token = "0x4000227")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Configuration")]
	public HumanConfiguration configuration;

	[Token(Token = "0x4000228")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public NameManager nameManager;

	[Token(Token = "0x4000229")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AnimationTriggerCollection animationTriggers;

	[Token(Token = "0x400022A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AnimationBoolCollection animationBool;

	[Token(Token = "0x400022B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AnimationFloatCollection animationFloat;

	[Token(Token = "0x400022C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public NavigationConstraints navigationConstraints;

	[Token(Token = "0x400022D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public NavigationAgentConfiguration navigationAgentConfiguration;

	[Token(Token = "0x400022E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Coroutine homeRunCheckCoroutine;

	[Token(Token = "0x400022F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float WalkSpeed;

	[Token(Token = "0x4000230")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float IdlingCircleRadius;

	[Token(Token = "0x4000231")]
	private const int MobileLayer = 12;

	[NonSerialized]
	[Token(Token = "0x4000232")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool IsGrabbed;

	[NonSerialized]
	[Token(Token = "0x4000233")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
	private bool IsTrowed;

	[NonSerialized]
	[Token(Token = "0x4000234")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Rigidbody rb;

	[Token(Token = "0x4000235")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Vector3 Destination;

	[Token(Token = "0x4000236")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private Vector3 idlingPosition;

	[NonSerialized]
	[Token(Token = "0x4000237")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public string FirstName;

	[NonSerialized]
	[Token(Token = "0x4000238")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Town HomeLand;

	[NonSerialized]
	[Token(Token = "0x4000239")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public bool Female;

	[NonSerialized]
	[Token(Token = "0x400023A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x99")]
	public bool Child;

	[NonSerialized]
	[Token(Token = "0x400023B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	public int Age;

	[NonSerialized]
	[Token(Token = "0x400023C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public int Food;

	[NonSerialized]
	[Token(Token = "0x400023D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	public int Hp;

	[NonSerialized]
	[Token(Token = "0x400023E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public Job Job;

	[NonSerialized]
	[Token(Token = "0x400023F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	public int VariationId;

	[NonSerialized]
	[Token(Token = "0x4000240")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public float Favor;

	[NonSerialized]
	[Token(Token = "0x4000241")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	public bool IsPlayerAware;

	[NonSerialized]
	[Token(Token = "0x4000242")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB5")]
	public bool IsBurning;

	[Token(Token = "0x4000243")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private Activity activityInternal;

	[Token(Token = "0x4000244")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private EquipmentItem leftHandEquipmentInternal;

	[Token(Token = "0x4000245")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private EquipmentItem rightHandEquipmentInternal;

	[Token(Token = "0x4000246")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private EquipmentItem bodyEquipmentInternal;

	[Token(Token = "0x400024D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private Activity previousActivity;

	[Token(Token = "0x400024E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
	private Activity nextActivity;

	[Token(Token = "0x400024F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private int carriedAmount;

	[Token(Token = "0x4000250")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	private float lastCheckTime;

	[Token(Token = "0x4000251")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private float lastEatTime;

	[Token(Token = "0x4000252")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
	private ResourceType currentSearch;

	[Token(Token = "0x4000253")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private float lastDot;

	[Token(Token = "0x4000254")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
	private float lastBirthdayTime;

	[Token(Token = "0x4000255")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private float waitStartTime;

	[Token(Token = "0x4000256")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
	private float waitDuration;

	[Token(Token = "0x4000257")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private float lastTeachTime;

	[Token(Token = "0x4000258")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
	private float lastFearTime;

	[Token(Token = "0x4000259")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private float lastAiLoopTime;

	[Token(Token = "0x400025A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
	private float aiSeed;

	[Token(Token = "0x400025B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private float currentFrameTime;

	[Token(Token = "0x400025C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private HumanSoundManager soundManager;

	[Token(Token = "0x400025D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private HumanModelManager modelManager;

	[Token(Token = "0x400025E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private Vector3 relativePos;

	[Token(Token = "0x400025F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
	private float distance;

	[Token(Token = "0x4000260")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	private Vector3 direction;

	[Token(Token = "0x4000261")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	private Human currentOpponent;

	[Token(Token = "0x4000262")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	private float lastAttackTime;

	[Token(Token = "0x4000263")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
	private bool attacked;

	[Token(Token = "0x4000264")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	private float currentCloseDistance;

	[Token(Token = "0x4000265")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	private GameObject currentIndicator;

	[Token(Token = "0x4000266")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	private bool captured;

	[Token(Token = "0x4000267")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
	private RaycastHit groundRaycastHit;

	[Token(Token = "0x4000268")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	private bool waitForPath;

	[Token(Token = "0x4000269")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	private PathManager.PathRequest pathRequest;

	[Token(Token = "0x400026A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
	private int currentPathNodeIndex;

	[Token(Token = "0x400026B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
	private Coroutine waitForPathCoroutine;

	[Token(Token = "0x400026C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
	private Coroutine findResourceCoroutine;

	[Token(Token = "0x400026D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
	private Color gizmoColor;

	[Token(Token = "0x400026E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
	private bool findHomeInProgress;

	[Token(Token = "0x400026F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F1")]
	private bool createNewTownInProgress;

	[Token(Token = "0x4000270")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F2")]
	private bool searchInProgress;

	[Token(Token = "0x4000271")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
	public HashSet<Trait> traits;

	[Token(Token = "0x4000272")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
	private bool screamFall;

	[Token(Token = "0x4000273")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
	private MilitaryObjective militaryObjective;

	[Token(Token = "0x4000274")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
	private Vector3? battlePosition;

	[Token(Token = "0x4000275")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
	private float lastFallCheckTime;

	[Token(Token = "0x4000276")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int FallCheckThisFrame;

	[Token(Token = "0x4000277")]
	private const int FallCheckBudget = 5;

	[Token(Token = "0x4000278")]
	private const float FallCheckDelay = 0.5f;

	[Token(Token = "0x4000279")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static int FindResourceOfTypeThisFrame;

	[Token(Token = "0x400027A")]
	private const int FindResourceOfTypeBudget = 1;

	[Token(Token = "0x400027B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static int BodyInstantiationsThisFrame;

	[Token(Token = "0x400027C")]
	private const int BodyInstantiationsBudget = 1;

	[Token(Token = "0x400027E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
	private bool inWaterInternal;

	[Token(Token = "0x400027F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x231")]
	private bool isWalkingInternal;

	[Token(Token = "0x4000280")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x232")]
	private bool isFightingInternal;

	[Token(Token = "0x4000281")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x233")]
	private bool inFormationInternal;

	[Token(Token = "0x4000282")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x234")]
	private bool isRunningInternal;

	[Token(Token = "0x4000283")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x235")]
	private bool isFallingInternal;

	[Token(Token = "0x4000284")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x236")]
	private bool isDeadInternal;

	[Token(Token = "0x4000285")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x237")]
	private bool isCarryingInternal;

	[Token(Token = "0x4000286")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
	private Vector3 grabbedPosition;

	[Token(Token = "0x4000287")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x244")]
	private Activity grabbedActivity;

	[Token(Token = "0x4000288")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
	private readonly Collider[] overlapSphereResult;

	[Token(Token = "0x4000289")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
	private readonly List<Human> tempHumanList1;

	[Token(Token = "0x400028A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
	private readonly List<Human> tempHumanList2;

	[Token(Token = "0x400028B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
	private readonly List<Human> attackers;

	[Token(Token = "0x400028C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static readonly List<TerrainType> WaterTerrains;

	[Token(Token = "0x400028D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
	private StringBuilder stringBuilder;

	[Token(Token = "0x400028E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
	private int floorLayer;

	[Token(Token = "0x400028F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x274")]
	private int waterLayer;

	[Token(Token = "0x4000290")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
	private int mobileLayer;

	[Token(Token = "0x4000291")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x27C")]
	private int townLayer;

	[Token(Token = "0x4000292")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
	private int resourcesLayer;

	[Token(Token = "0x4000293")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x284")]
	private int treesLayer;

	[Token(Token = "0x4000294")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
	private int gatheringZoneLayer;

	[Token(Token = "0x4000295")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28C")]
	private int floorAndWaterLayerMask;

	[Token(Token = "0x4000296")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
	private int fleeCollisionLayerMask;

	[Token(Token = "0x4000297")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x294")]
	private Vector3 capturePosition;

	[Token(Token = "0x17000068")]
	public Activity Activity
	{
		[Token(Token = "0x60002CE")]
		[Address(RVA = "0xAFD05C", Offset = "0xAFD05C", VA = "0xAFD05C")]
		get
		{
			return default(Activity);
		}
		[Token(Token = "0x60002CF")]
		[Address(RVA = "0xAFD064", Offset = "0xAFD064", VA = "0xAFD064")]
		set
		{
		}
	}

	[Token(Token = "0x17000069")]
	public EquipmentItem leftHandEquipment
	{
		[Token(Token = "0x60002D0")]
		[Address(RVA = "0xAFD794", Offset = "0xAFD794", VA = "0xAFD794")]
		get
		{
			return null;
		}
		[Token(Token = "0x60002D1")]
		[Address(RVA = "0xAFD81C", Offset = "0xAFD81C", VA = "0xAFD81C")]
		set
		{
		}
	}

	[Token(Token = "0x1700006A")]
	public EquipmentItem rightHandEquipment
	{
		[Token(Token = "0x60002D2")]
		[Address(RVA = "0xAFD824", Offset = "0xAFD824", VA = "0xAFD824")]
		get
		{
			return null;
		}
		[Token(Token = "0x60002D3")]
		[Address(RVA = "0xAFD8AC", Offset = "0xAFD8AC", VA = "0xAFD8AC")]
		set
		{
		}
	}

	[Token(Token = "0x1700006B")]
	public EquipmentItem bodyEquipment
	{
		[Token(Token = "0x60002D4")]
		[Address(RVA = "0xAFD8B4", Offset = "0xAFD8B4", VA = "0xAFD8B4")]
		get
		{
			return null;
		}
		[Token(Token = "0x60002D5")]
		[Address(RVA = "0xAFD93C", Offset = "0xAFD93C", VA = "0xAFD93C")]
		set
		{
		}
	}

	[Token(Token = "0x1700006C")]
	public ResourceType CarriedType
	{
		[Token(Token = "0x60002D6")]
		[Address(RVA = "0xAFD9A4", Offset = "0xAFD9A4", VA = "0xAFD9A4")]
		[CompilerGenerated]
		get
		{
			return default(ResourceType);
		}
		[Token(Token = "0x60002D7")]
		[Address(RVA = "0xAFD9AC", Offset = "0xAFD9AC", VA = "0xAFD9AC")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1700006D")]
	public Resource CurrentGathering
	{
		[Token(Token = "0x60002D8")]
		[Address(RVA = "0xAFD9B4", Offset = "0xAFD9B4", VA = "0xAFD9B4")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60002D9")]
		[Address(RVA = "0xAFD9BC", Offset = "0xAFD9BC", VA = "0xAFD9BC")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1700006E")]
	public DeathCause CauseOfDeath
	{
		[Token(Token = "0x60002DA")]
		[Address(RVA = "0xAFD9C4", Offset = "0xAFD9C4", VA = "0xAFD9C4")]
		[CompilerGenerated]
		get
		{
			return default(DeathCause);
		}
		[Token(Token = "0x60002DB")]
		[Address(RVA = "0xAFD9CC", Offset = "0xAFD9CC", VA = "0xAFD9CC")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1700006F")]
	public bool Hungry
	{
		[Token(Token = "0x60002DC")]
		[Address(RVA = "0xAFD9D4", Offset = "0xAFD9D4", VA = "0xAFD9D4")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60002DD")]
		[Address(RVA = "0xAFD9DC", Offset = "0xAFD9DC", VA = "0xAFD9DC")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000070")]
	public FaithLevel FaithLevel
	{
		[Token(Token = "0x60002DE")]
		[Address(RVA = "0xAFD9E8", Offset = "0xAFD9E8", VA = "0xAFD9E8")]
		[CompilerGenerated]
		get
		{
			return default(FaithLevel);
		}
		[Token(Token = "0x60002DF")]
		[Address(RVA = "0xAFD9F0", Offset = "0xAFD9F0", VA = "0xAFD9F0")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000071")]
	public bool IsSick
	{
		[Token(Token = "0x60002E0")]
		[Address(RVA = "0xAFD9F8", Offset = "0xAFD9F8", VA = "0xAFD9F8")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60002E1")]
		[Address(RVA = "0xAFDA00", Offset = "0xAFDA00", VA = "0xAFDA00")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000072")]
	public Army Army
	{
		[Token(Token = "0x60002E2")]
		[Address(RVA = "0xAFDA0C", Offset = "0xAFDA0C", VA = "0xAFDA0C")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60002E3")]
		[Address(RVA = "0xAFDA14", Offset = "0xAFDA14", VA = "0xAFDA14")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000073")]
	public bool InWater
	{
		[Token(Token = "0x60002E4")]
		[Address(RVA = "0xAFDA24", Offset = "0xAFDA24", VA = "0xAFDA24")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60002E5")]
		[Address(RVA = "0xAFDA2C", Offset = "0xAFDA2C", VA = "0xAFDA2C")]
		private set
		{
		}
	}

	[Token(Token = "0x17000074")]
	public bool IsCarrying
	{
		[Token(Token = "0x60002E6")]
		[Address(RVA = "0xAFDAA4", Offset = "0xAFDAA4", VA = "0xAFDAA4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60002E7")]
		[Address(RVA = "0xAFDAAC", Offset = "0xAFDAAC", VA = "0xAFDAAC")]
		private set
		{
		}
	}

	[Token(Token = "0x17000075")]
	public bool IsDead
	{
		[Token(Token = "0x60002E8")]
		[Address(RVA = "0xAFDAF4", Offset = "0xAFDAF4", VA = "0xAFDAF4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60002E9")]
		[Address(RVA = "0xAFDAFC", Offset = "0xAFDAFC", VA = "0xAFDAFC")]
		private set
		{
		}
	}

	[Token(Token = "0x17000076")]
	public bool IsFalling
	{
		[Token(Token = "0x60002EA")]
		[Address(RVA = "0xAFDB44", Offset = "0xAFDB44", VA = "0xAFDB44")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60002EB")]
		[Address(RVA = "0xAFDB4C", Offset = "0xAFDB4C", VA = "0xAFDB4C")]
		private set
		{
		}
	}

	[Token(Token = "0x17000077")]
	public bool IsWalking
	{
		[Token(Token = "0x60002EC")]
		[Address(RVA = "0xAFDB94", Offset = "0xAFDB94", VA = "0xAFDB94")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60002ED")]
		[Address(RVA = "0xAFD208", Offset = "0xAFD208", VA = "0xAFD208")]
		set
		{
		}
	}

	[Token(Token = "0x17000078")]
	public bool IsFighting
	{
		[Token(Token = "0x60002EE")]
		[Address(RVA = "0xAFDBE4", Offset = "0xAFDBE4", VA = "0xAFDBE4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60002EF")]
		[Address(RVA = "0xAFDBEC", Offset = "0xAFDBEC", VA = "0xAFDBEC")]
		private set
		{
		}
	}

	[Token(Token = "0x17000079")]
	public bool InFormation
	{
		[Token(Token = "0x60002F0")]
		[Address(RVA = "0xAFDC34", Offset = "0xAFDC34", VA = "0xAFDC34")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60002F1")]
		[Address(RVA = "0xAFDC3C", Offset = "0xAFDC3C", VA = "0xAFDC3C")]
		private set
		{
		}
	}

	[Token(Token = "0x1700007A")]
	public bool IsRunning
	{
		[Token(Token = "0x60002F2")]
		[Address(RVA = "0xAFDC84", Offset = "0xAFDC84", VA = "0xAFDC84")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60002F3")]
		[Address(RVA = "0xAFDB9C", Offset = "0xAFDB9C", VA = "0xAFDB9C")]
		private set
		{
		}
	}

	[Token(Token = "0x1700007B")]
	public bool CanBeIgnited
	{
		[Token(Token = "0x6000350")]
		[Address(RVA = "0xB05868", Offset = "0xB05868", VA = "0xB05868", Slot = "6")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60002F4")]
	[Address(RVA = "0xAFDC8C", Offset = "0xAFDC8C", VA = "0xAFDC8C")]
	public HumanData ToData()
	{
		return null;
	}

	[Token(Token = "0x60002F5")]
	[Address(RVA = "0xAFDE48", Offset = "0xAFDE48", VA = "0xAFDE48")]
	private void Awake()
	{
	}

	[Token(Token = "0x60002F6")]
	[Address(RVA = "0xAFE378", Offset = "0xAFE378", VA = "0xAFE378")]
	private void Start()
	{
	}

	[Token(Token = "0x60002F7")]
	[Address(RVA = "0xAFE86C", Offset = "0xAFE86C", VA = "0xAFE86C")]
	private bool CheckDelayWithSeed(float lastOccurence, float delay)
	{
		return default(bool);
	}

	[Token(Token = "0x60002F8")]
	[Address(RVA = "0xAFBA44", Offset = "0xAFBA44", VA = "0xAFBA44")]
	public void SetFemale(bool value)
	{
	}

	[Token(Token = "0x60002F9")]
	[Address(RVA = "0xAFE2C4", Offset = "0xAFE2C4", VA = "0xAFE2C4")]
	public void RenameHuman()
	{
	}

	[Token(Token = "0x60002FA")]
	[Address(RVA = "0xAFCED0", Offset = "0xAFCED0", VA = "0xAFCED0")]
	public void Throw()
	{
	}

	[Token(Token = "0x60002FB")]
	[Address(RVA = "0xAFE94C", Offset = "0xAFE94C", VA = "0xAFE94C")]
	private void BurningRoutine()
	{
	}

	[Token(Token = "0x60002FC")]
	[Address(RVA = "0xAFEC38", Offset = "0xAFEC38", VA = "0xAFEC38")]
	private void SicknessRoutine()
	{
	}

	[Token(Token = "0x60002FD")]
	[Address(RVA = "0xAFECDC", Offset = "0xAFECDC", VA = "0xAFECDC")]
	private void CheckBirthday()
	{
	}

	[Token(Token = "0x60002FE")]
	[Address(RVA = "0xAFED8C", Offset = "0xAFED8C", VA = "0xAFED8C")]
	private void CheckTeach()
	{
	}

	[Token(Token = "0x60002FF")]
	[Address(RVA = "0xAFEDE8", Offset = "0xAFEDE8", VA = "0xAFEDE8")]
	public void Grab()
	{
	}

	[Token(Token = "0x6000300")]
	[Address(RVA = "0xAFF164", Offset = "0xAFF164", VA = "0xAFF164")]
	private void CheckGrabbedOrThrown()
	{
	}

	[Token(Token = "0x6000301")]
	[Address(RVA = "0xAFF1C0", Offset = "0xAFF1C0", VA = "0xAFF1C0")]
	private void Thrown()
	{
	}

	[Token(Token = "0x6000302")]
	[Address(RVA = "0xAFF728", Offset = "0xAFF728", VA = "0xAFF728")]
	private bool CheckHunger()
	{
		return default(bool);
	}

	[Token(Token = "0x6000303")]
	[Address(RVA = "0xAFF770", Offset = "0xAFF770", VA = "0xAFF770")]
	public void AiLoop()
	{
	}

	[Token(Token = "0x6000304")]
	[Address(RVA = "0xB010D8", Offset = "0xB010D8", VA = "0xB010D8")]
	private void InBattle()
	{
	}

	[Token(Token = "0x6000305")]
	[Address(RVA = "0xB01080", Offset = "0xB01080", VA = "0xB01080")]
	private void Train()
	{
	}

	[Token(Token = "0x6000306")]
	[Address(RVA = "0xB010D4", Offset = "0xB010D4", VA = "0xB010D4")]
	private void InFormationBehavior()
	{
	}

	[Token(Token = "0x6000307")]
	[Address(RVA = "0xB01010", Offset = "0xB01010", VA = "0xB01010")]
	private void Stuck()
	{
	}

	[Token(Token = "0x6000308")]
	[Address(RVA = "0xB00000", Offset = "0xB00000", VA = "0xB00000")]
	private void Hunt()
	{
	}

	[Token(Token = "0x6000309")]
	[Address(RVA = "0xB01558", Offset = "0xB01558", VA = "0xB01558")]
	public void CaptureObjective(MilitaryObjective objective)
	{
	}

	[Token(Token = "0x600030A")]
	[Address(RVA = "0xB00868", Offset = "0xB00868", VA = "0xB00868")]
	private void ChargePosition(Vector3 position)
	{
	}

	[Token(Token = "0x600030B")]
	[Address(RVA = "0xB01618", Offset = "0xB01618", VA = "0xB01618")]
	private bool FindOpponent(out Human opponent)
	{
		return default(bool);
	}

	[Token(Token = "0x600030C")]
	[Address(RVA = "0xB01F60", Offset = "0xB01F60", VA = "0xB01F60")]
	private void FindSurroundingHumans(List<Human> list, Vector3 position, float radius)
	{
	}

	[Token(Token = "0x600030D")]
	[Address(RVA = "0xB01958", Offset = "0xB01958", VA = "0xB01958")]
	private bool SelectBestOpponent(List<Human> potentialOpponents, out Human opponent)
	{
		return default(bool);
	}

	[Token(Token = "0x600030E")]
	[Address(RVA = "0xB01918", Offset = "0xB01918", VA = "0xB01918")]
	private void Attack(Human newOpponent)
	{
	}

	[Token(Token = "0x600030F")]
	[Address(RVA = "0xB009A0", Offset = "0xB009A0", VA = "0xB009A0")]
	private void Attack()
	{
	}

	[Token(Token = "0x6000310")]
	[Address(RVA = "0xB02234", Offset = "0xB02234", VA = "0xB02234")]
	private void RemoveAttacker(Human human)
	{
	}

	[Token(Token = "0x6000311")]
	[Address(RVA = "0xB020F8", Offset = "0xB020F8", VA = "0xB020F8")]
	private void Attacked(Human human)
	{
	}

	[Token(Token = "0x6000312")]
	[Address(RVA = "0xB023CC", Offset = "0xB023CC", VA = "0xB023CC")]
	public void Refresh()
	{
	}

	[Token(Token = "0x6000313")]
	[Address(RVA = "0xB033A4", Offset = "0xB033A4", VA = "0xB033A4")]
	public void CheckIfFalling()
	{
	}

	[Token(Token = "0x6000314")]
	[Address(RVA = "0xAFEFA4", Offset = "0xAFEFA4", VA = "0xAFEFA4")]
	public void StopFight()
	{
	}

	[Token(Token = "0x6000315")]
	[Address(RVA = "0xB00F04", Offset = "0xB00F04", VA = "0xB00F04")]
	private void ReturnToTown()
	{
	}

	[Token(Token = "0x6000316")]
	[Address(RVA = "0xB007F4", Offset = "0xB007F4", VA = "0xB007F4")]
	private void Hide()
	{
	}

	[Token(Token = "0x6000317")]
	[Address(RVA = "0xB00678", Offset = "0xB00678", VA = "0xB00678")]
	private void Teach()
	{
	}

	[Token(Token = "0x6000318")]
	[Address(RVA = "0xB0373C", Offset = "0xB0373C", VA = "0xB0373C")]
	[IteratorStateMachine(typeof(<SpreadHeresy>d__207))]
	public IEnumerator SpreadHeresy()
	{
		return null;
	}

	[Token(Token = "0x6000319")]
	[Address(RVA = "0xB00294", Offset = "0xB00294", VA = "0xB00294")]
	private void Eat()
	{
	}

	[Token(Token = "0x600031A")]
	[Address(RVA = "0xB00328", Offset = "0xB00328", VA = "0xB00328")]
	private void GetFood()
	{
	}

	[Token(Token = "0x600031B")]
	[Address(RVA = "0xB00664", Offset = "0xB00664", VA = "0xB00664")]
	private void Travel()
	{
	}

	[Token(Token = "0x600031C")]
	[Address(RVA = "0xAFF518", Offset = "0xAFF518", VA = "0xAFF518")]
	private void Grounded()
	{
	}

	[Token(Token = "0x600031D")]
	[Address(RVA = "0xB038A0", Offset = "0xB038A0", VA = "0xB038A0")]
	private void DisplayIndicator(GameObject indicatorPrefab)
	{
	}

	[Token(Token = "0x600031E")]
	[Address(RVA = "0xAFD1EC", Offset = "0xAFD1EC", VA = "0xAFD1EC")]
	public bool SetDestination(Vector3? destination)
	{
		return default(bool);
	}

	[Token(Token = "0x600031F")]
	[Address(RVA = "0xB011F4", Offset = "0xB011F4", VA = "0xB011F4")]
	public bool SetDestination(Vector3? destination, float tolerance)
	{
		return default(bool);
	}

	[Token(Token = "0x6000320")]
	[Address(RVA = "0xB03938", Offset = "0xB03938", VA = "0xB03938")]
	private bool SetFinalDestination(Vector3? destination, float tolerance)
	{
		return default(bool);
	}

	[Token(Token = "0x6000321")]
	[Address(RVA = "0xB03A40", Offset = "0xB03A40", VA = "0xB03A40")]
	private void RequestPath(Vector3 destination)
	{
	}

	[Token(Token = "0x6000322")]
	[Address(RVA = "0xB03AF8", Offset = "0xB03AF8", VA = "0xB03AF8")]
	private void RequestPath(Position destination)
	{
	}

	[Token(Token = "0x6000323")]
	[Address(RVA = "0xB03C3C", Offset = "0xB03C3C", VA = "0xB03C3C")]
	[IteratorStateMachine(typeof(<WaitForPath>d__218))]
	private IEnumerator WaitForPath()
	{
		return null;
	}

	[Token(Token = "0x6000324")]
	[Address(RVA = "0xB03AF0", Offset = "0xB03AF0", VA = "0xB03AF0")]
	private static Vector3 GroundedPosition(Vector3 position)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000325")]
	[Address(RVA = "0xAFED14", Offset = "0xAFED14", VA = "0xAFED14")]
	private void HappyBirthDay()
	{
	}

	[Token(Token = "0x6000326")]
	[Address(RVA = "0xB03D14", Offset = "0xB03D14", VA = "0xB03D14")]
	public void Work(Work work)
	{
	}

	[Token(Token = "0x6000327")]
	[Address(RVA = "0xAFD6F8", Offset = "0xAFD6F8", VA = "0xAFD6F8")]
	private void CleanupAnimationVariables()
	{
	}

	[Token(Token = "0x6000328")]
	[Address(RVA = "0xAFD4A4", Offset = "0xAFD4A4", VA = "0xAFD4A4")]
	private void StartIdling()
	{
	}

	[Token(Token = "0x6000329")]
	[Address(RVA = "0xB03D38", Offset = "0xB03D38", VA = "0xB03D38")]
	private void PrayForSomething()
	{
	}

	[Token(Token = "0x600032A")]
	[Address(RVA = "0xB03D84", Offset = "0xB03D84", VA = "0xB03D84")]
	public void MakeChild(int amount, bool heir)
	{
	}

	[Token(Token = "0x600032B")]
	[Address(RVA = "0xAFB9F0", Offset = "0xAFB9F0", VA = "0xAFB9F0")]
	public static Vector3 RandomPositionInTown(Vector3 townPosition)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600032C")]
	[Address(RVA = "0xAFFDE0", Offset = "0xAFFDE0", VA = "0xAFFDE0")]
	private void PlayWithAnotherChild()
	{
	}

	[Token(Token = "0x600032D")]
	[Address(RVA = "0xB00168", Offset = "0xB00168", VA = "0xB00168")]
	private void Build()
	{
	}

	[Token(Token = "0x600032E")]
	[Address(RVA = "0xB03F78", Offset = "0xB03F78", VA = "0xB03F78")]
	private void ChangeTown(Town oldTown, Town newTown)
	{
	}

	[Token(Token = "0x600032F")]
	[Address(RVA = "0xAFFD84", Offset = "0xAFFD84", VA = "0xAFFD84")]
	public void FindHome(bool forcedByPlayer = false)
	{
	}

	[Token(Token = "0x6000330")]
	[Address(RVA = "0xB04014", Offset = "0xB04014", VA = "0xB04014")]
	[IteratorStateMachine(typeof(<FindHomeCoroutine>d__231))]
	private IEnumerator FindHomeCoroutine(bool forcedByPlayer = false)
	{
		return null;
	}

	[Token(Token = "0x6000331")]
	[Address(RVA = "0xB040C4", Offset = "0xB040C4", VA = "0xB040C4")]
	[IteratorStateMachine(typeof(<CreateNewTown>d__232))]
	private IEnumerator CreateNewTown(Vector3 searchPosition, int minRadius, int maxRadius, bool closest, [Optional] Realm realmOfNewCity)
	{
		return null;
	}

	[Token(Token = "0x6000332")]
	[Address(RVA = "0xB00584", Offset = "0xB00584", VA = "0xB00584")]
	private void Carry()
	{
	}

	[Token(Token = "0x6000333")]
	[Address(RVA = "0xB041C0", Offset = "0xB041C0", VA = "0xB041C0")]
	private void TransferResourceToHomeland()
	{
	}

	[Token(Token = "0x6000334")]
	[Address(RVA = "0xB0370C", Offset = "0xB0370C", VA = "0xB0370C")]
	private void EndActivity()
	{
	}

	[Token(Token = "0x6000335")]
	[Address(RVA = "0xB00520", Offset = "0xB00520", VA = "0xB00520")]
	private void Search(ResourceType resourceType)
	{
	}

	[Token(Token = "0x6000336")]
	[Address(RVA = "0xB0427C", Offset = "0xB0427C", VA = "0xB0427C")]
	private void NoResourceFound()
	{
	}

	[Token(Token = "0x6000337")]
	[Address(RVA = "0xB042AC", Offset = "0xB042AC", VA = "0xB042AC")]
	private void ResourceFound(Resource resource)
	{
	}

	[Token(Token = "0x6000338")]
	[Address(RVA = "0xB04374", Offset = "0xB04374", VA = "0xB04374")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000339")]
	[Address(RVA = "0xB04884", Offset = "0xB04884", VA = "0xB04884")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x600033A")]
	[Address(RVA = "0xB045F4", Offset = "0xB045F4", VA = "0xB045F4")]
	private void StopBurning(bool crowd)
	{
	}

	[Token(Token = "0x600033B")]
	[Address(RVA = "0xB046CC", Offset = "0xB046CC", VA = "0xB046CC")]
	private void GatherAtPosition(Resource resource)
	{
	}

	[Token(Token = "0x600033C")]
	[Address(RVA = "0xB00400", Offset = "0xB00400", VA = "0xB00400")]
	private void Gather(Resource resource)
	{
	}

	[Token(Token = "0x600033D")]
	[Address(RVA = "0xB04A58", Offset = "0xB04A58", VA = "0xB04A58")]
	private void SwitchResource(ResourceType type)
	{
	}

	[Token(Token = "0x600033E")]
	[Address(RVA = "0xB04A84", Offset = "0xB04A84", VA = "0xB04A84")]
	private void DropResource()
	{
	}

	[Token(Token = "0x600033F")]
	[Address(RVA = "0xB02988", Offset = "0xB02988", VA = "0xB02988")]
	private void MoveToDestination()
	{
	}

	[Token(Token = "0x6000340")]
	[Address(RVA = "0xB02724", Offset = "0xB02724", VA = "0xB02724")]
	private bool IsStuck()
	{
		return default(bool);
	}

	[Token(Token = "0x6000341")]
	[Address(RVA = "0xAFE454", Offset = "0xAFE454", VA = "0xAFE454")]
	public void SetNewPositionOnGround(Vector3 newLocalPosition)
	{
	}

	[Token(Token = "0x6000342")]
	[Address(RVA = "0xB02378", Offset = "0xB02378", VA = "0xB02378")]
	public void WarMode(bool formation = false)
	{
	}

	[Token(Token = "0x6000343")]
	[Address(RVA = "0xAFF138", Offset = "0xAFF138", VA = "0xAFF138")]
	public void PeaceMode()
	{
	}

	[Token(Token = "0x6000344")]
	[Address(RVA = "0xB041F8", Offset = "0xB041F8", VA = "0xB041F8")]
	[IteratorStateMachine(typeof(<FindResourceOfType>d__251))]
	private IEnumerator FindResourceOfType(ResourceType resourceType)
	{
		return null;
	}

	[Token(Token = "0x6000345")]
	[Address(RVA = "0xB03D0C", Offset = "0xB03D0C", VA = "0xB03D0C")]
	public void Die(DeathCause cause)
	{
	}

	[Token(Token = "0x6000346")]
	[Address(RVA = "0xAFF3EC", Offset = "0xAFF3EC", VA = "0xAFF3EC")]
	private void Die()
	{
	}

	[Token(Token = "0x6000347")]
	[Address(RVA = "0xB051C0", Offset = "0xB051C0", VA = "0xB051C0")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000348")]
	[Address(RVA = "0xB051C4", Offset = "0xB051C4", VA = "0xB051C4")]
	public void Explode()
	{
	}

	[Token(Token = "0x6000349")]
	[Address(RVA = "0xB054F4", Offset = "0xB054F4", VA = "0xB054F4")]
	private void TakeFallDamage(float impactMagnitude)
	{
	}

	[Token(Token = "0x600034A")]
	[Address(RVA = "0xB05038", Offset = "0xB05038", VA = "0xB05038")]
	private void RemoveFromTownAndMankind()
	{
	}

	[Token(Token = "0x600034B")]
	[Address(RVA = "0xAFCE88", Offset = "0xAFCE88", VA = "0xAFCE88")]
	public void Hurt(DamageType damageType)
	{
	}

	[Token(Token = "0x600034C")]
	[Address(RVA = "0xAFE9F0", Offset = "0xAFE9F0", VA = "0xAFE9F0")]
	private void DecreaseHp(int amount, DamageType damageType)
	{
	}

	[Token(Token = "0x600034D")]
	[Address(RVA = "0xB037D8", Offset = "0xB037D8", VA = "0xB037D8")]
	private void IncreaseHp(int amount)
	{
	}

	[Token(Token = "0x600034E")]
	[Address(RVA = "0xB05640", Offset = "0xB05640", VA = "0xB05640", Slot = "4")]
	public void Burn()
	{
	}

	[Token(Token = "0x600034F")]
	[Address(RVA = "0xB05860", Offset = "0xB05860", VA = "0xB05860", Slot = "5")]
	public void Extinguish(bool crowd = false)
	{
	}

	[Token(Token = "0x6000351")]
	[Address(RVA = "0xB05878", Offset = "0xB05878", VA = "0xB05878", Slot = "10")]
	public void SeeMiracle(bool positive, Vector3 position, MiracleType miracleType)
	{
	}

	[Token(Token = "0x6000352")]
	[Address(RVA = "0xB05A74", Offset = "0xB05A74", VA = "0xB05A74")]
	private void Fear(Vector3 position)
	{
	}

	[Token(Token = "0x6000353")]
	[Address(RVA = "0xB0228C", Offset = "0xB0228C", VA = "0xB0228C")]
	public void LookAt(Vector3 position)
	{
	}

	[Token(Token = "0x6000354")]
	[Address(RVA = "0xB03068", Offset = "0xB03068", VA = "0xB03068")]
	private void Flee()
	{
	}

	[Token(Token = "0x6000355")]
	[Address(RVA = "0xAFBA60", Offset = "0xAFBA60", VA = "0xAFBA60")]
	public void RefreshModel()
	{
	}

	[Token(Token = "0x6000356")]
	[Address(RVA = "0xAFE888", Offset = "0xAFE888", VA = "0xAFE888")]
	private void SetTrigger(AnimationTrigger aTrigger)
	{
	}

	[Token(Token = "0x6000357")]
	[Address(RVA = "0xAFDA74", Offset = "0xAFDA74", VA = "0xAFDA74")]
	private void SetBool(AnimationBool aBool, bool value, bool expires = false, float duration = 0f)
	{
	}

	[Token(Token = "0x6000358")]
	[Address(RVA = "0xB05C58", Offset = "0xB05C58", VA = "0xB05C58", Slot = "7")]
	public void StartDisease()
	{
	}

	[Token(Token = "0x6000359")]
	[Address(RVA = "0xB05E14", Offset = "0xB05E14", VA = "0xB05E14")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x600035A")]
	[Address(RVA = "0xAFB258", Offset = "0xAFB258", VA = "0xAFB258")]
	public void LoadState(HumanData humanData, Town town)
	{
	}

	[Token(Token = "0x600035B")]
	[Address(RVA = "0xAFFC2C", Offset = "0xAFFC2C", VA = "0xAFFC2C")]
	public void SwitchJob(Job newJob)
	{
	}

	[Token(Token = "0x600035C")]
	[Address(RVA = "0xB06068", Offset = "0xB06068", VA = "0xB06068", Slot = "8")]
	public void Heal(bool crowd)
	{
	}

	[Token(Token = "0x600035D")]
	[Address(RVA = "0xB060A8", Offset = "0xB060A8", VA = "0xB060A8")]
	private void Cure(bool crowd = false)
	{
	}

	[Token(Token = "0x600035E")]
	[Address(RVA = "0xB06194", Offset = "0xB06194", VA = "0xB06194", Slot = "9")]
	public void Electrocute()
	{
	}

	[Token(Token = "0x600035F")]
	[Address(RVA = "0xB061AC", Offset = "0xB061AC", VA = "0xB061AC", Slot = "11")]
	public void SetPlayerAware(bool value)
	{
	}

	[Token(Token = "0x6000360")]
	[Address(RVA = "0xB06204", Offset = "0xB06204", VA = "0xB06204")]
	[IteratorStateMachine(typeof(<RequestBodyInstantiation>d__280))]
	private IEnumerator RequestBodyInstantiation()
	{
		return null;
	}

	[Token(Token = "0x6000361")]
	[Address(RVA = "0xB062A0", Offset = "0xB062A0", VA = "0xB062A0", Slot = "12")]
	public bool IsTown(out Town town)
	{
		return default(bool);
	}

	[Token(Token = "0x6000362")]
	[Address(RVA = "0xB062C0", Offset = "0xB062C0", VA = "0xB062C0")]
	public void RefreshFavor(float favor)
	{
	}

	[Token(Token = "0x6000363")]
	[Address(RVA = "0xB06404", Offset = "0xB06404", VA = "0xB06404")]
	public void Touch()
	{
	}

	[Token(Token = "0x6000364")]
	[Address(RVA = "0xB06420", Offset = "0xB06420", VA = "0xB06420")]
	public void UnTouch()
	{
	}

	[Token(Token = "0x6000365")]
	[Address(RVA = "0xB01388", Offset = "0xB01388", VA = "0xB01388")]
	public void Shoot()
	{
	}

	[Token(Token = "0x6000366")]
	[Address(RVA = "0xB064FC", Offset = "0xB064FC", VA = "0xB064FC")]
	public void Aim()
	{
	}

	[Token(Token = "0x6000367")]
	[Address(RVA = "0xB065AC", Offset = "0xB065AC", VA = "0xB065AC", Slot = "13")]
	public void Captured()
	{
	}

	[Token(Token = "0x6000368")]
	[Address(RVA = "0xB06620", Offset = "0xB06620", VA = "0xB06620", Slot = "14")]
	public Vector3 StartCapture()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000369")]
	[Address(RVA = "0xB06670", Offset = "0xB06670", VA = "0xB06670", Slot = "15")]
	public void Free()
	{
	}

	[Token(Token = "0x600036A")]
	[Address(RVA = "0xB066B4", Offset = "0xB066B4", VA = "0xB066B4", Slot = "16")]
	public Transform GetTransform()
	{
		return null;
	}

	[Token(Token = "0x600036B")]
	[Address(RVA = "0xB066BC", Offset = "0xB066BC", VA = "0xB066BC", Slot = "17")]
	public bool Squeeze()
	{
		return default(bool);
	}

	[Token(Token = "0x600036C")]
	[Address(RVA = "0xB066D0", Offset = "0xB066D0", VA = "0xB066D0")]
	[ContextMenu("Switch to Scientist")]
	public void SwitchToScientist()
	{
	}

	[Token(Token = "0x600036D")]
	[Address(RVA = "0xB066D8", Offset = "0xB066D8", VA = "0xB066D8")]
	[ContextMenu("Switch to Champion")]
	public void SwitchToChampion()
	{
	}

	[Token(Token = "0x600036E")]
	[Address(RVA = "0xB066E0", Offset = "0xB066E0", VA = "0xB066E0")]
	[ContextMenu("Switch to Heretic")]
	public void SwitchToHeretic()
	{
	}

	[Token(Token = "0x600036F")]
	[Address(RVA = "0xB066E8", Offset = "0xB066E8", VA = "0xB066E8")]
	[ContextMenu("Switch to Prophet")]
	public void SwitchToProphet()
	{
	}

	[Token(Token = "0x6000370")]
	[Address(RVA = "0xB066F0", Offset = "0xB066F0", VA = "0xB066F0")]
	[ContextMenu("Switch to Shaman")]
	public void SwitchToShaman()
	{
	}

	[Token(Token = "0x6000371")]
	[Address(RVA = "0xB066F8", Offset = "0xB066F8", VA = "0xB066F8")]
	[ContextMenu("Switch to Priest")]
	public void SwitchToPriest()
	{
	}

	[Token(Token = "0x6000372")]
	[Address(RVA = "0xB03CD8", Offset = "0xB03CD8", VA = "0xB03CD8")]
	public void MakeAdult()
	{
	}

	[Token(Token = "0x6000373")]
	[Address(RVA = "0xB06700", Offset = "0xB06700", VA = "0xB06700", Slot = "18")]
	public bool TryEatByPlayer()
	{
		return default(bool);
	}

	[Token(Token = "0x6000374")]
	[Address(RVA = "0xB06784", Offset = "0xB06784", VA = "0xB06784")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x6000375")]
	[Address(RVA = "0xB06964", Offset = "0xB06964", VA = "0xB06964")]
	public void Hello()
	{
	}

	[Token(Token = "0x6000376")]
	[Address(RVA = "0xB06998", Offset = "0xB06998", VA = "0xB06998")]
	public void Scream()
	{
	}

	[Token(Token = "0x6000377")]
	[Address(RVA = "0xB04A90", Offset = "0xB04A90", VA = "0xB04A90")]
	[ContextMenu("Debug Current Path")]
	public void DebugCurrentPath()
	{
	}

	[Token(Token = "0x6000378")]
	[Address(RVA = "0xAFD01C", Offset = "0xAFD01C", VA = "0xAFD01C")]
	public void CheckHomeRun()
	{
	}

	[Token(Token = "0x6000379")]
	[Address(RVA = "0xB069CC", Offset = "0xB069CC", VA = "0xB069CC")]
	[IteratorStateMachine(typeof(<CheckHomeRunCoroutine>d__305))]
	private IEnumerator CheckHomeRunCoroutine()
	{
		return null;
	}

	[Token(Token = "0x600037A")]
	[Address(RVA = "0xB06A68", Offset = "0xB06A68", VA = "0xB06A68")]
	public void JoinFormation(Vector3 formationPosition)
	{
	}

	[Token(Token = "0x600037B")]
	[Address(RVA = "0xB06B24", Offset = "0xB06B24", VA = "0xB06B24")]
	public void WaitAndReturnToTown(int index)
	{
	}

	[Token(Token = "0x600037C")]
	[Address(RVA = "0xB06BE0", Offset = "0xB06BE0", VA = "0xB06BE0")]
	public void RefreshModelManager()
	{
	}

	[Token(Token = "0x600037D")]
	[Address(RVA = "0xB06F78", Offset = "0xB06F78", VA = "0xB06F78", Slot = "20")]
	public TooltipDescription GetTooltip()
	{
		return default(TooltipDescription);
	}

	[Token(Token = "0x600037E")]
	[Address(RVA = "0xB0706C", Offset = "0xB0706C", VA = "0xB0706C", Slot = "19")]
	public void RefreshLabel()
	{
	}

	[Token(Token = "0x600037F")]
	[Address(RVA = "0xB0760C", Offset = "0xB0760C", VA = "0xB0760C")]
	private string RefreshStatus()
	{
		return null;
	}

	[Token(Token = "0x6000380")]
	[Address(RVA = "0xB0755C", Offset = "0xB0755C", VA = "0xB0755C")]
	private static string GetLocalizationKey(DeathCause deathCause)
	{
		return null;
	}

	[Token(Token = "0x6000381")]
	[Address(RVA = "0xB07758", Offset = "0xB07758", VA = "0xB07758")]
	private static string GetLocalizedText(Job job, Human human)
	{
		return null;
	}

	[Token(Token = "0x6000382")]
	[Address(RVA = "0xB07500", Offset = "0xB07500", VA = "0xB07500")]
	private static string GetLocalizedText(string key)
	{
		return null;
	}

	[Token(Token = "0x6000383")]
	[Address(RVA = "0xB079D0", Offset = "0xB079D0", VA = "0xB079D0")]
	public Human()
	{
	}
}
[Token(Token = "0x200006D")]
public class HumanAnimationEvenReceiver : MonoBehaviour
{
	[Token(Token = "0x40002D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private HumanSoundManager soundManager;

	[Token(Token = "0x40002D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Human human;

	[Token(Token = "0x40002D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool lowEndHardware;

	[Token(Token = "0x60003B4")]
	[Address(RVA = "0xB0A28C", Offset = "0xB0A28C", VA = "0xB0A28C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60003B5")]
	[Address(RVA = "0xB0A36C", Offset = "0xB0A36C", VA = "0xB0A36C")]
	public void Shoot()
	{
	}

	[Token(Token = "0x60003B6")]
	[Address(RVA = "0xB0A3CC", Offset = "0xB0A3CC", VA = "0xB0A3CC")]
	public void Aim()
	{
	}

	[Token(Token = "0x60003B7")]
	[Address(RVA = "0xB0A3E4", Offset = "0xB0A3E4", VA = "0xB0A3E4")]
	public void Land()
	{
	}

	[Token(Token = "0x60003B8")]
	[Address(RVA = "0xB0A408", Offset = "0xB0A408", VA = "0xB0A408")]
	public void HammerHitGround()
	{
	}

	[Token(Token = "0x60003B9")]
	[Address(RVA = "0xB0A42C", Offset = "0xB0A42C", VA = "0xB0A42C")]
	public void FootStep()
	{
	}

	[Token(Token = "0x60003BA")]
	[Address(RVA = "0xB0A458", Offset = "0xB0A458", VA = "0xB0A458")]
	public void SwimLeft()
	{
	}

	[Token(Token = "0x60003BB")]
	[Address(RVA = "0xB0A484", Offset = "0xB0A484", VA = "0xB0A484")]
	public void SwimRight()
	{
	}

	[Token(Token = "0x60003BC")]
	[Address(RVA = "0xB0A4B0", Offset = "0xB0A4B0", VA = "0xB0A4B0")]
	public HumanAnimationEvenReceiver()
	{
	}
}
[Token(Token = "0x200006E")]
[CreateAssetMenu(menuName = "Human/Human Configuration")]
public class HumanConfiguration : ScriptableObject
{
	[Token(Token = "0x40002D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Mobile Configuration", order = 1)]
	public float walkSpeed;

	[Token(Token = "0x40002D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float idlingCircleRadius;

	[Token(Token = "0x40002DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float idlingDirectionTimer;

	[Token(Token = "0x40002DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float closeDistance;

	[Token(Token = "0x40002DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Header("Traits configuration")]
	public TraitsGenerator traitsGenerator;

	[Token(Token = "0x40002DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Header("Throw velocities configuration")]
	public float throwSlowVelocity;

	[Token(Token = "0x40002DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float throwFunVelocity;

	[Token(Token = "0x40002DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float throwFearVelocity;

	[Token(Token = "0x40002E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[Header("Drop activity recovery configuration")]
	[Tooltip("If the human is dropped close from the grab position he will try to recover his previous activity")]
	public float recoverActivityDistance;

	[Token(Token = "0x40002E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("If the human is dropped far from his homeland he will try to find a new home")]
	public float homeLandMaxDistance;

	[Token(Token = "0x40002E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Tooltip("The activities that can be recovered when the human is dropped close to the grab position")]
	public List<Activity> recoverableActivities;

	[Token(Token = "0x40002E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Tooltip("The activity set when the human is dropped and it's activity is not recoverable")]
	public Activity dropActivity;

	[Token(Token = "0x40002E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[Header("Resource Gathering Configuration")]
	public float searchDelay;

	[Token(Token = "0x40002E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float searchRadius;

	[Token(Token = "0x40002E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public int carryAmount;

	[Token(Token = "0x40002E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Header("Age Configuration")]
	public int adultAge;

	[Token(Token = "0x40002E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public int oldAge;

	[Token(Token = "0x40002E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[Header("Food Configuration")]
	public int eatAmount;

	[Token(Token = "0x40002EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public int maxEatAmount;

	[Token(Token = "0x40002EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public int hungerDamage;

	[Token(Token = "0x40002EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	[Header("Combat configuration")]
	public int maxHealth;

	[Token(Token = "0x40002ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public float searchEnemyRadius;

	[Token(Token = "0x40002EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public int maxAttackers;

	[Token(Token = "0x40002EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[Header("Heresy configuration")]
	public float faithImpact;

	[Token(Token = "0x40002F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public float heresySpreadRadius;

	[Token(Token = "0x40002F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[Header("Equipment Slots configuration")]
	public EquipmentSlot leftHand;

	[Token(Token = "0x40002F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public EquipmentSlot rightHand;

	[Token(Token = "0x40002F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public EquipmentSlot body;

	[Token(Token = "0x40002F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public EquipmentItem leftFist;

	[Token(Token = "0x40002F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public EquipmentItem rightFist;

	[Token(Token = "0x40002F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public EquipmentItem nakedBody;

	[Token(Token = "0x40002F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[Header("Animations configuration", order = 3)]
	public RandomizedAnimation boost;

	[Token(Token = "0x40002F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[Header("Timers configuration")]
	public float aiLoopDelay;

	[Token(Token = "0x40002F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	public float birthdayDelay;

	[Token(Token = "0x40002FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public float eatCheckDelay;

	[Token(Token = "0x40002FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	public float dotDelay;

	[Token(Token = "0x40002FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public float teachDelay;

	[Token(Token = "0x40002FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	[Header("Offsets")]
	public Vector3 headOffset;

	[Token(Token = "0x40002FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public Vector3 waterOffset;

	[Token(Token = "0x40002FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	[Header("Prefabs")]
	public GameObject homeIndicator;

	[Token(Token = "0x4000300")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public GameObject splash;

	[Token(Token = "0x4000301")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public GameObject fireVfx;

	[Token(Token = "0x4000302")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public GameObject sicknessVfx;

	[Token(Token = "0x4000303")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public GameObject leaderCrown;

	[Token(Token = "0x4000304")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public GameObject heirCrown;

	[Token(Token = "0x4000305")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public GameObject bodyExplosion;

	[Token(Token = "0x60003BD")]
	[Address(RVA = "0xB0A4B8", Offset = "0xB0A4B8", VA = "0xB0A4B8")]
	public HumanConfiguration()
	{
	}
}
[Token(Token = "0x200006F")]
public class HumanCreator : MonoBehaviour
{
	[Token(Token = "0x60003BE")]
	[Address(RVA = "0xB0A554", Offset = "0xB0A554", VA = "0xB0A554")]
	private void Start()
	{
	}

	[Token(Token = "0x60003BF")]
	[Address(RVA = "0xB0A558", Offset = "0xB0A558", VA = "0xB0A558")]
	private void Update()
	{
	}

	[Token(Token = "0x60003C0")]
	[Address(RVA = "0xB0A55C", Offset = "0xB0A55C", VA = "0xB0A55C")]
	public HumanCreator()
	{
	}
}
[Token(Token = "0x2000070")]
public class HumanModelManager : MonoBehaviour
{
	[Token(Token = "0x4000306")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public HumanModelDatabase humanDB;

	[Token(Token = "0x4000307")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public EquipmentSelector equipmentSelector;

	[Token(Token = "0x4000308")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AnimationTriggerCollection animationTriggers;

	[Token(Token = "0x4000309")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AnimationFloatCollection animationFloat;

	[Token(Token = "0x400030A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public HumanMaterialConfiguration materialConfiguration;

	[Token(Token = "0x400030B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public ResourcePrefabCollection carriedResources;

	[Token(Token = "0x400030D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Animator animator;

	[Token(Token = "0x400030E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Human human;

	[Token(Token = "0x400030F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Transform currentRightHand;

	[Token(Token = "0x4000310")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Transform currentLeftHand;

	[Token(Token = "0x4000311")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Transform currentBodyTransform;

	[Token(Token = "0x4000312")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private SkinnedMeshRenderer skinnedMeshRenderer;

	[Token(Token = "0x4000313")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private MeshRenderer meshRenderer;

	[Token(Token = "0x4000314")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private GameObject fireVfxInstance;

	[Token(Token = "0x4000315")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private GameObject sicknessVfxInstance;

	[Token(Token = "0x4000316")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private GameObject currentModel;

	[Token(Token = "0x4000317")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private GameObject currentModelPrefab;

	[Token(Token = "0x4000318")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private GameObject currentLeftHandTool;

	[Token(Token = "0x4000319")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private GameObject currentRightHandTool;

	[Token(Token = "0x400031A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private GameObject currentCarriedObject;

	[Token(Token = "0x400031B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private GameObject currentCrownPrefab;

	[Token(Token = "0x400031C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private GameObject crownInstance;

	[Token(Token = "0x400031D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private Outline outline;

	[Token(Token = "0x400031E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private readonly Dictionary<int, bool> animatorVariables;

	[Token(Token = "0x400031F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private readonly Dictionary<int, float> animatorVariablesExpiry;

	[Token(Token = "0x4000320")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private readonly List<int> expiredThisFrame;

	[Token(Token = "0x4000321")]
	private const string RightHandIdentifier = "mixamorig:RightHand";

	[Token(Token = "0x4000322")]
	private const string LeftHandIdentifier = "mixamorig:LeftHand";

	[Token(Token = "0x4000323")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly int DeadAnimationPlayed;

	[Token(Token = "0x4000324")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static readonly int IsDead;

	[Token(Token = "0x4000325")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public AnimationBool InWaterAnimationBool;

	[Token(Token = "0x4000326")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public AnimationBool IsDeathAnimationBool;

	[Token(Token = "0x1700008A")]
	private bool Animated
	{
		[Token(Token = "0x60003C1")]
		[Address(RVA = "0xB0A564", Offset = "0xB0A564", VA = "0xB0A564")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60003C2")]
		[Address(RVA = "0xB0A56C", Offset = "0xB0A56C", VA = "0xB0A56C")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x60003C3")]
	[Address(RVA = "0xAFE2A8", Offset = "0xAFE2A8", VA = "0xAFE2A8")]
	public void Init(Human humanToManage)
	{
	}

	[Token(Token = "0x60003C4")]
	[Address(RVA = "0xB0A578", Offset = "0xB0A578", VA = "0xB0A578")]
	private void InstantiateModel(GameObject prefab, bool animated)
	{
	}

	[Token(Token = "0x60003C5")]
	[Address(RVA = "0xB0ABC8", Offset = "0xB0ABC8", VA = "0xB0ABC8")]
	private void SetAnimatorVariables(Animator animator)
	{
	}

	[Token(Token = "0x60003C6")]
	[Address(RVA = "0xB05B18", Offset = "0xB05B18", VA = "0xB05B18")]
	public void RefreshModel()
	{
	}

	[Token(Token = "0x60003C7")]
	[Address(RVA = "0xB0AF78", Offset = "0xB0AF78", VA = "0xB0AF78")]
	private void RefreshCrown()
	{
	}

	[Token(Token = "0x60003C8")]
	[Address(RVA = "0xB0B0C0", Offset = "0xB0B0C0", VA = "0xB0B0C0")]
	private void EquipInHand(GameObject prefab, bool rightHand = true)
	{
	}

	[Token(Token = "0x60003C9")]
	[Address(RVA = "0xB0B280", Offset = "0xB0B280", VA = "0xB0B280")]
	private void Carry(GameObject prefab)
	{
	}

	[Token(Token = "0x60003CA")]
	[Address(RVA = "0xAFD2F4", Offset = "0xAFD2F4", VA = "0xAFD2F4")]
	public void RefreshEquipment()
	{
	}

	[Token(Token = "0x60003CB")]
	[Address(RVA = "0xB0AA50", Offset = "0xB0AA50", VA = "0xB0AA50")]
	private void RemoveEquipments()
	{
	}

	[Token(Token = "0x60003CC")]
	[Address(RVA = "0xB0B2C4", Offset = "0xB0B2C4", VA = "0xB0B2C4")]
	private void EquipSet(Equipment equipment)
	{
	}

	[Token(Token = "0x60003CD")]
	[Address(RVA = "0xAFD2CC", Offset = "0xAFD2CC", VA = "0xAFD2CC")]
	public void RemoveCarriedObject()
	{
	}

	[Token(Token = "0x60003CE")]
	[Address(RVA = "0xAFD264", Offset = "0xAFD264", VA = "0xAFD264")]
	public void RefreshCarriedObjects()
	{
	}

	[Token(Token = "0x60003CF")]
	[Address(RVA = "0xB0B3FC", Offset = "0xB0B3FC", VA = "0xB0B3FC")]
	private void Equip(EquipmentItem equipmentItem)
	{
	}

	[Token(Token = "0x60003D0")]
	[Address(RVA = "0xB05720", Offset = "0xB05720", VA = "0xB05720")]
	public void Burn()
	{
	}

	[Token(Token = "0x60003D1")]
	[Address(RVA = "0xB049CC", Offset = "0xB049CC", VA = "0xB049CC")]
	public void StopBurning()
	{
	}

	[Token(Token = "0x60003D2")]
	[Address(RVA = "0xB05CCC", Offset = "0xB05CCC", VA = "0xB05CCC")]
	public void StartSickness()
	{
	}

	[Token(Token = "0x60003D3")]
	[Address(RVA = "0xB06100", Offset = "0xB06100", VA = "0xB06100")]
	public void StopSickness()
	{
	}

	[Token(Token = "0x60003D4")]
	[Address(RVA = "0xB05198", Offset = "0xB05198", VA = "0xB05198")]
	public void Die()
	{
	}

	[Token(Token = "0x60003D5")]
	[Address(RVA = "0xB0602C", Offset = "0xB0602C", VA = "0xB0602C")]
	public void SetMaterial()
	{
	}

	[Token(Token = "0x60003D6")]
	[Address(RVA = "0xAFE8B8", Offset = "0xAFE8B8", VA = "0xAFE8B8")]
	public void SetAlwaysVisible()
	{
	}

	[Token(Token = "0x60003D7")]
	[Address(RVA = "0xB0380C", Offset = "0xB0380C", VA = "0xB0380C")]
	public void ResetVisibility()
	{
	}

	[Token(Token = "0x60003D8")]
	[Address(RVA = "0xAFD5FC", Offset = "0xAFD5FC", VA = "0xAFD5FC")]
	public void SetBool(AnimationBool animationBool, bool newValue, bool expires = false, float duration = 0f)
	{
	}

	[Token(Token = "0x60003D9")]
	[Address(RVA = "0xB0AADC", Offset = "0xB0AADC", VA = "0xB0AADC")]
	private void RefreshLODModelPosition()
	{
	}

	[Token(Token = "0x60003DA")]
	[Address(RVA = "0xB0B730", Offset = "0xB0B730", VA = "0xB0B730")]
	private void SetBool(int hash, bool newValue, bool expires = false, float duration = 0f)
	{
	}

	[Token(Token = "0x60003DB")]
	[Address(RVA = "0xB05B78", Offset = "0xB05B78", VA = "0xB05B78")]
	public void SetTrigger(AnimationTrigger trigger)
	{
	}

	[Token(Token = "0x60003DC")]
	[Address(RVA = "0xB06300", Offset = "0xB06300", VA = "0xB06300")]
	public void SetFloat(AnimationFloat floatName, float value)
	{
	}

	[Token(Token = "0x60003DD")]
	[Address(RVA = "0xB06BF8", Offset = "0xB06BF8", VA = "0xB06BF8")]
	public void Refresh()
	{
	}

	[Token(Token = "0x60003DE")]
	[Address(RVA = "0xB0641C", Offset = "0xB0641C", VA = "0xB0641C")]
	public void Touch()
	{
	}

	[Token(Token = "0x60003DF")]
	[Address(RVA = "0xB0B884", Offset = "0xB0B884", VA = "0xB0B884")]
	private void DisplayOutline()
	{
	}

	[Token(Token = "0x60003E0")]
	[Address(RVA = "0xB0AEB8", Offset = "0xB0AEB8", VA = "0xB0AEB8")]
	private void DisplayFilledOutline()
	{
	}

	[Token(Token = "0x60003E1")]
	[Address(RVA = "0xB0ADB4", Offset = "0xB0ADB4", VA = "0xB0ADB4")]
	private void AddOutline()
	{
	}

	[Token(Token = "0x60003E2")]
	[Address(RVA = "0xB06438", Offset = "0xB06438", VA = "0xB06438")]
	public void UnTouch()
	{
	}

	[Token(Token = "0x60003E3")]
	[Address(RVA = "0xB05F90", Offset = "0xB05F90", VA = "0xB05F90")]
	public void RemoveSilhouette()
	{
	}

	[Token(Token = "0x60003E4")]
	[Address(RVA = "0xB01198", Offset = "0xB01198", VA = "0xB01198")]
	public bool FireRandomizedAnimation(RandomizedAnimation randomizedAnimation)
	{
		return default(bool);
	}

	[Token(Token = "0x60003E5")]
	[Address(RVA = "0xB0B944", Offset = "0xB0B944", VA = "0xB0B944")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60003E6")]
	[Address(RVA = "0xB0BA20", Offset = "0xB0BA20", VA = "0xB0BA20")]
	public HumanModelManager()
	{
	}
}
[Token(Token = "0x2000071")]
[CreateAssetMenu(fileName = "HumanModelDatabase", menuName = "Human/HumanModelDatabase", order = 1)]
public class HumanModelDatabase : ScriptableObject
{
	[Token(Token = "0x4000327")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject debugBody;

	[Token(Token = "0x4000328")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject dummyBody;

	[Token(Token = "0x4000329")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Vector3 defaultBodyPos;

	[Token(Token = "0x400032A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public Vector3 defaultBodyRot;

	[Token(Token = "0x400032B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Vector3 inWaterBodyPos;

	[Token(Token = "0x400032C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public Vector3 inWaterBodyRot;

	[Token(Token = "0x400032D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Vector3 deathBodyPos;

	[Token(Token = "0x400032E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public Vector3 deathBodyRot;

	[Token(Token = "0x400032F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public List<HumanModelList> humanModelLists;

	[Token(Token = "0x4000330")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private readonly Dictionary<HumanModelRequest, GameObject> cache;

	[Token(Token = "0x60003E8")]
	[Address(RVA = "0xB43D28", Offset = "0xB43D28", VA = "0xB43D28")]
	private void PrepareCache()
	{
	}

	[Token(Token = "0x60003E9")]
	[Address(RVA = "0xB44068", Offset = "0xB44068", VA = "0xB44068")]
	public bool GetHumanModel(Human human, out GameObject result, out bool animated)
	{
		return default(bool);
	}

	[Token(Token = "0x60003EA")]
	[Address(RVA = "0xB441B4", Offset = "0xB441B4", VA = "0xB441B4")]
	public bool Search(HumanModelRequest request, out GameObject result, out bool animated)
	{
		return default(bool);
	}

	[Token(Token = "0x60003EB")]
	[Address(RVA = "0xB4439C", Offset = "0xB4439C", VA = "0xB4439C")]
	public HumanModelDatabase()
	{
	}
}
[Token(Token = "0x2000072")]
public class HumanSoundManager : MonoBehaviour
{
	[Token(Token = "0x4000331")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public HumanAudioCollection defaultAudioCollection;

	[Token(Token = "0x4000332")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public FootstepAudioCollection defaultFootstepAudioCollection;

	[Token(Token = "0x4000333")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioSet swimLeft;

	[Token(Token = "0x4000334")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioSet swimRight;

	[Token(Token = "0x4000335")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Human human;

	[Token(Token = "0x4000336")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private AudioSource lastInterruptableAudioSource;

	[Token(Token = "0x4000337")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private HumanAudioCollection internalCurrentAudioCollection;

	[Token(Token = "0x4000338")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private FootstepAudioCollection internalCurrentFootstepAudioCollection;

	[Token(Token = "0x1700008B")]
	public HumanAudioCollection CurrentAudioCollection
	{
		[Token(Token = "0x60003EC")]
		[Address(RVA = "0xB44424", Offset = "0xB44424", VA = "0xB44424")]
		get
		{
			return null;
		}
		[Token(Token = "0x60003ED")]
		[Address(RVA = "0xB4442C", Offset = "0xB4442C", VA = "0xB4442C")]
		set
		{
		}
	}

	[Token(Token = "0x1700008C")]
	public FootstepAudioCollection CurrentFootstepAudioCollection
	{
		[Token(Token = "0x60003EE")]
		[Address(RVA = "0xB444B4", Offset = "0xB444B4", VA = "0xB444B4")]
		get
		{
			return null;
		}
		[Token(Token = "0x60003EF")]
		[Address(RVA = "0xB444BC", Offset = "0xB444BC", VA = "0xB444BC")]
		set
		{
		}
	}

	[Token(Token = "0x60003F0")]
	[Address(RVA = "0xB44544", Offset = "0xB44544", VA = "0xB44544")]
	private void Awake()
	{
	}

	[Token(Token = "0x60003F1")]
	[Address(RVA = "0xB445B4", Offset = "0xB445B4", VA = "0xB445B4")]
	public void PlaySound(HumanSoundType soundType, bool crowd = false)
	{
	}

	[Token(Token = "0x60003F2")]
	[Address(RVA = "0xB446F0", Offset = "0xB446F0", VA = "0xB446F0")]
	private void PlaySoundFromCollection(HumanSoundType soundType, bool crowd = false)
	{
	}

	[Token(Token = "0x60003F3")]
	[Address(RVA = "0xB4488C", Offset = "0xB4488C", VA = "0xB4488C")]
	private void PlaySoundFromSet(AudioSet audioSet, HumanSoundType soundType, bool noInterrupt, bool voiceSound)
	{
	}

	[Token(Token = "0x60003F4")]
	[Address(RVA = "0xB44994", Offset = "0xB44994", VA = "0xB44994")]
	private static void InterruptSound(AudioSource audioSource)
	{
	}

	[Token(Token = "0x60003F5")]
	[Address(RVA = "0xB449EC", Offset = "0xB449EC", VA = "0xB449EC")]
	private void PlaySoundFromSet(AudioSet audioSet)
	{
	}

	[Token(Token = "0x60003F6")]
	[Address(RVA = "0xB44A70", Offset = "0xB44A70", VA = "0xB44A70")]
	public void PlayGatherSound(Resource resource)
	{
	}

	[Token(Token = "0x60003F7")]
	[Address(RVA = "0xB44B9C", Offset = "0xB44B9C", VA = "0xB44B9C")]
	public void PlayFootstep()
	{
	}

	[Token(Token = "0x60003F8")]
	[Address(RVA = "0xB44D9C", Offset = "0xB44D9C", VA = "0xB44D9C")]
	public void PlaySwimLeft()
	{
	}

	[Token(Token = "0x60003F9")]
	[Address(RVA = "0xB44E40", Offset = "0xB44E40", VA = "0xB44E40")]
	public void PlaySwimRight()
	{
	}

	[Token(Token = "0x60003FA")]
	[Address(RVA = "0xB44EE4", Offset = "0xB44EE4", VA = "0xB44EE4")]
	public HumanSoundManager()
	{
	}
}
[Token(Token = "0x2000073")]
public class Humans_Test_CameraController : MonoBehaviour
{
	[Token(Token = "0x4000339")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float inputForward;

	[Token(Token = "0x400033A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float inputRight;

	[Token(Token = "0x400033B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float inputUp;

	[Token(Token = "0x400033C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private bool inputMouse_1;

	[Token(Token = "0x400033D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
	private bool inputMouse_2;

	[Token(Token = "0x400033E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
	private bool asLeaveInputMouse_2;

	[Token(Token = "0x400033F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector3 mouseWorldPosition;

	[Token(Token = "0x4000340")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float mouseX;

	[Token(Token = "0x4000341")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float mouseY;

	[Token(Token = "0x4000342")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float inputScrollWheel;

	[Token(Token = "0x4000343")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private float speedForward;

	[Token(Token = "0x4000344")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	private float speedRight;

	[Token(Token = "0x4000345")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private float speedUp;

	[Token(Token = "0x4000346")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[SerializeField]
	private float speedMouse;

	[Token(Token = "0x4000347")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private float speedScrollWheel;

	[Token(Token = "0x60003FB")]
	[Address(RVA = "0xB44EEC", Offset = "0xB44EEC", VA = "0xB44EEC")]
	private void Update()
	{
	}

	[Token(Token = "0x60003FC")]
	[Address(RVA = "0xB4506C", Offset = "0xB4506C", VA = "0xB4506C")]
	private void Move()
	{
	}

	[Token(Token = "0x60003FD")]
	[Address(RVA = "0xB4531C", Offset = "0xB4531C", VA = "0xB4531C")]
	private void Rotate()
	{
	}

	[Token(Token = "0x60003FE")]
	[Address(RVA = "0xB455F4", Offset = "0xB455F4", VA = "0xB455F4")]
	public Humans_Test_CameraController()
	{
	}
}
[Token(Token = "0x2000074")]
public class InputController : MonoBehaviour
{
	[Token(Token = "0x4000348")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private GameController gameController;

	[Token(Token = "0x4000349")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector3 currentMousePosition;

	[Token(Token = "0x400034A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float moveSpeed;

	[Token(Token = "0x400034B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float minOffset;

	[Token(Token = "0x400034C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float moveEdge;

	[Token(Token = "0x400034D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float minFocal;

	[Token(Token = "0x400034E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float maxFocal;

	[Token(Token = "0x400034F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float defaultFocal;

	[Token(Token = "0x4000350")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float zoomSpeed;

	[Token(Token = "0x4000351")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Camera camera;

	[Token(Token = "0x4000352")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private GameObject _selectedTerrain;

	[Token(Token = "0x4000353")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject Miracle;

	[Token(Token = "0x4000354")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public bool moveOnEdges;

	[Token(Token = "0x4000355")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private Vector3 ResetCamera;

	[Token(Token = "0x4000356")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Vector3 Origin;

	[Token(Token = "0x4000357")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private Vector3 Diference;

	[Token(Token = "0x4000358")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private bool dragInProgress;

	[Token(Token = "0x4000359")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private Vector3 startMousePosition;

	[Token(Token = "0x400035A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Vector3 previousMousePosition;

	[Token(Token = "0x400035B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private KeyCode RightKey;

	[Token(Token = "0x400035C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private KeyCode LefttKey;

	[Token(Token = "0x400035D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private KeyCode UpKey;

	[Token(Token = "0x400035E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private KeyCode DownKey;

	[Token(Token = "0x400035F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private Transform cameraParent;

	[Token(Token = "0x4000360")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private Transform cameraTransform;

	[Token(Token = "0x4000361")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private Quaternion resetRotation;

	[Token(Token = "0x4000362")]
	private const float OffsetErrorDetection = 10f;

	[Token(Token = "0x4000363")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private Vector3 pivot;

	[Token(Token = "0x4000364")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	private Vector3 cameraDestPosition;

	[Token(Token = "0x60003FF")]
	[Address(RVA = "0xB455FC", Offset = "0xB455FC", VA = "0xB455FC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000400")]
	[Address(RVA = "0xB45734", Offset = "0xB45734", VA = "0xB45734")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000401")]
	[Address(RVA = "0xB45F20", Offset = "0xB45F20", VA = "0xB45F20")]
	private void Move()
	{
	}

	[Token(Token = "0x6000402")]
	[Address(RVA = "0xB46444", Offset = "0xB46444", VA = "0xB46444")]
	private void Update()
	{
	}

	[Token(Token = "0x6000403")]
	[Address(RVA = "0xB463E0", Offset = "0xB463E0", VA = "0xB463E0")]
	private static void ReleaseLeftClick()
	{
	}

	[Token(Token = "0x6000404")]
	[Address(RVA = "0xB45FE8", Offset = "0xB45FE8", VA = "0xB45FE8")]
	private void Click()
	{
	}

	[Token(Token = "0x6000405")]
	[Address(RVA = "0xB46568", Offset = "0xB46568", VA = "0xB46568")]
	public InputController()
	{
	}
}
[Token(Token = "0x2000075")]
public class InteractableHuman : InteractableObject
{
	[Token(Token = "0x4000365")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Human human;

	[Token(Token = "0x6000406")]
	[Address(RVA = "0xB46598", Offset = "0xB46598", VA = "0xB46598")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000407")]
	[Address(RVA = "0xB465A4", Offset = "0xB465A4", VA = "0xB465A4", Slot = "8")]
	public override void Touch(Interactor interactor)
	{
	}

	[Token(Token = "0x6000408")]
	[Address(RVA = "0xB466E4", Offset = "0xB466E4", VA = "0xB466E4", Slot = "9")]
	public override void UnTouch(Interactor interactor)
	{
	}

	[Token(Token = "0x6000409")]
	[Address(RVA = "0xB46824", Offset = "0xB46824", VA = "0xB46824", Slot = "5")]
	public override void Grab(Interactor interactor)
	{
	}

	[Token(Token = "0x600040A")]
	[Address(RVA = "0xB46964", Offset = "0xB46964", VA = "0xB46964", Slot = "6")]
	public override void Throw(Interactor interactor)
	{
	}

	[Token(Token = "0x600040B")]
	[Address(RVA = "0xB46AA4", Offset = "0xB46AA4", VA = "0xB46AA4")]
	public InteractableHuman()
	{
	}
}
[Token(Token = "0x2000076")]
public class InteractableSpell : InteractableObject, ISqueezable
{
	[Token(Token = "0x4000366")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private float autoDestructTime;

	[Token(Token = "0x4000367")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[Header("Miracle Configuration")]
	public Spell Spell;

	[Token(Token = "0x4000368")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private DeityRank rank;

	[Token(Token = "0x4000369")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private DeityRank displayLockedRank;

	[Token(Token = "0x400036A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public GameObject label;

	[Token(Token = "0x400036B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public GameObject model;

	[Token(Token = "0x400036C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public GameObject lockedModel;

	[Token(Token = "0x400036D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public GameObject spellModel;

	[Token(Token = "0x400036E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public bool oldSpell;

	[Token(Token = "0x400036F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE1")]
	[Header("Rotation Configuration")]
	public bool Rotation;

	[Token(Token = "0x4000370")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public Transform rotatingPart;

	[Token(Token = "0x4000371")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	[HideInInspector]
	public GameObject Controller;

	[Token(Token = "0x4000372")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	[HideInInspector]
	public SpellLockState lockState;

	[Token(Token = "0x600040C")]
	[Address(RVA = "0xB46AAC", Offset = "0xB46AAC", VA = "0xB46AAC")]
	protected void Awake()
	{
	}

	[Token(Token = "0x600040D")]
	[Address(RVA = "0xB46DCC", Offset = "0xB46DCC", VA = "0xB46DCC")]
	private void RefreshLockState()
	{
	}

	[Token(Token = "0x600040E")]
	[Address(RVA = "0xB46DB8", Offset = "0xB46DB8", VA = "0xB46DB8")]
	private void SetRules(MiracleDescriptor miracleDescriptor)
	{
	}

	[Token(Token = "0x600040F")]
	[Address(RVA = "0xB46E40", Offset = "0xB46E40", VA = "0xB46E40")]
	private void Lock()
	{
	}

	[Token(Token = "0x6000410")]
	[Address(RVA = "0xB46F14", Offset = "0xB46F14", VA = "0xB46F14")]
	private void Unlock()
	{
	}

	[Token(Token = "0x6000411")]
	[Address(RVA = "0xB46FE0", Offset = "0xB46FE0", VA = "0xB46FE0", Slot = "5")]
	public override void Grab(Interactor interactor)
	{
	}

	[Token(Token = "0x6000412")]
	[Address(RVA = "0xB4719C", Offset = "0xB4719C", VA = "0xB4719C", Slot = "6")]
	public override void Throw(Interactor interactor)
	{
	}

	[Token(Token = "0x6000413")]
	[Address(RVA = "0xB472AC", Offset = "0xB472AC", VA = "0xB472AC")]
	protected void Update()
	{
	}

	[Token(Token = "0x6000414")]
	[Address(RVA = "0xB473E8", Offset = "0xB473E8", VA = "0xB473E8", Slot = "11")]
	public bool Squeeze()
	{
		return default(bool);
	}

	[Token(Token = "0x6000415")]
	[Address(RVA = "0xB4746C", Offset = "0xB4746C", VA = "0xB4746C")]
	public void Dispel()
	{
	}

	[Token(Token = "0x6000416")]
	[Address(RVA = "0xB47544", Offset = "0xB47544", VA = "0xB47544", Slot = "10")]
	protected override bool KeepLayer()
	{
		return default(bool);
	}

	[Token(Token = "0x6000417")]
	[Address(RVA = "0xB4754C", Offset = "0xB4754C", VA = "0xB4754C")]
	public InteractableSpell()
	{
	}
}
[Token(Token = "0x2000077")]
public interface IPlayerAwareReactive
{
	[Token(Token = "0x6000418")]
	void SetPlayerAware(bool value);

	[Token(Token = "0x6000419")]
	bool IsTown(out Town town);
}
[Token(Token = "0x2000078")]
public interface IResourceConsumer
{
	[Token(Token = "0x600041A")]
	bool IsResourceNeeded(out ResourceStatus resourceStatus);
}
[Token(Token = "0x2000079")]
public class KarmaFeature : MonoBehaviour
{
	[Token(Token = "0x4000373")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[MinMax(0, 100, ShowEditRange = true)]
	public Vector2 KarmaRange;

	[Token(Token = "0x600041B")]
	[Address(RVA = "0xB47574", Offset = "0xB47574", VA = "0xB47574")]
	private void Awake()
	{
	}

	[Token(Token = "0x600041C")]
	[Address(RVA = "0xB47648", Offset = "0xB47648", VA = "0xB47648")]
	public KarmaFeature()
	{
	}
}
[Token(Token = "0x200007A")]
public class KeyboardOpener : MonoBehaviour
{
	[Token(Token = "0x4000374")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TMP_InputField inputField;

	[Token(Token = "0x600041D")]
	[Address(RVA = "0xB4765C", Offset = "0xB4765C", VA = "0xB4765C")]
	public KeyboardOpener()
	{
	}
}
[Token(Token = "0x200007B")]
public class Lava : MonoBehaviour
{
	[Token(Token = "0x600041E")]
	[Address(RVA = "0xB47664", Offset = "0xB47664", VA = "0xB47664")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600041F")]
	[Address(RVA = "0xB47750", Offset = "0xB47750", VA = "0xB47750")]
	public Lava()
	{
	}
}
[Token(Token = "0x200007C")]
public class LifeManager : MonoBehaviour
{
	[Token(Token = "0x4000375")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float PositionCheckTime;

	[Token(Token = "0x4000376")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float PriorityDistance;

	[Token(Token = "0x4000377")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float RoamTime;

	[Token(Token = "0x4000378")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int animalsPerFrame;

	[Token(Token = "0x4000379")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private MapManager mapManager;

	[Token(Token = "0x400037A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Map map;

	[Token(Token = "0x400037B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private List<KeyValuePair<Position, AnimalType>> animalsToMove;

	[Token(Token = "0x400037C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private List<KeyValuePair<Position, AnimalType>> animalsCloseToMove;

	[Token(Token = "0x400037D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private List<KeyValuePair<Position, AnimalType>> animalsToDestroy;

	[Token(Token = "0x400037E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float lastPositionCheckTime;

	[Token(Token = "0x400037F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private float lastRoamTime;

	[Token(Token = "0x4000380")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool positionChangedOnPreviousFrame;

	[Token(Token = "0x4000381")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private int unit;

	[Token(Token = "0x4000382")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private AnimalType[] predators;

	[Token(Token = "0x4000383")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Dictionary<AnimalType, TerrainType[]> animalPreferences;

	[Token(Token = "0x6000420")]
	[Address(RVA = "0xB47758", Offset = "0xB47758", VA = "0xB47758")]
	private void Start()
	{
	}

	[Token(Token = "0x6000421")]
	[Address(RVA = "0xB4790C", Offset = "0xB4790C", VA = "0xB4790C")]
	private static void SetAnimalPreferences(Dictionary<AnimalType, TerrainType[]> animalPreferences)
	{
	}

	[Token(Token = "0x6000422")]
	[Address(RVA = "0xB47C20", Offset = "0xB47C20", VA = "0xB47C20")]
	private void Update()
	{
	}

	[Token(Token = "0x6000423")]
	[Address(RVA = "0xB48798", Offset = "0xB48798", VA = "0xB48798")]
	private void DoMove(List<KeyValuePair<Position, AnimalType>> list, bool isPlayerAware)
	{
	}

	[Token(Token = "0x6000424")]
	[Address(RVA = "0xB48A20", Offset = "0xB48A20", VA = "0xB48A20")]
	private bool Move(KeyValuePair<Position, AnimalType> animal, bool isPlayerAware)
	{
		return default(bool);
	}

	[Token(Token = "0x6000425")]
	[Address(RVA = "0xB48618", Offset = "0xB48618", VA = "0xB48618")]
	private void DoDestroy(List<KeyValuePair<Position, AnimalType>> list)
	{
	}

	[Token(Token = "0x6000426")]
	[Address(RVA = "0xB48314", Offset = "0xB48314", VA = "0xB48314")]
	private static void ExtractPriority(Vector3 playerPosition, List<KeyValuePair<Position, AnimalType>> list, List<KeyValuePair<Position, AnimalType>> priorityList, int mapManagerUnit, float priorityDistance)
	{
	}

	[Token(Token = "0x6000427")]
	[Address(RVA = "0xB47D44", Offset = "0xB47D44", VA = "0xB47D44")]
	private void CheckAnimalPosition(Vector3 playerPosition)
	{
	}

	[Token(Token = "0x6000428")]
	[Address(RVA = "0xB48E5C", Offset = "0xB48E5C", VA = "0xB48E5C")]
	public void MoveAnimal(AnimalSpawner animalSpawner, Vector3 transformPosition)
	{
	}

	[Token(Token = "0x6000429")]
	[Address(RVA = "0xB4922C", Offset = "0xB4922C", VA = "0xB4922C")]
	public void GrabAnimal(AnimalSpawner animal)
	{
	}

	[Token(Token = "0x600042A")]
	[Address(RVA = "0xB49268", Offset = "0xB49268", VA = "0xB49268")]
	public LifeManager()
	{
	}
}
[Token(Token = "0x200007D")]
public class LocalizationManager : MonoBehaviour
{
	[Token(Token = "0x4000384")]
	private const string Localizationcharlist = "localizationcharlist.txt";

	[Token(Token = "0x4000385")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static LocalizationManager instance;

	[Token(Token = "0x4000386")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Dictionary<string, string> localizedText;

	[Token(Token = "0x4000387")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Dictionary<string, string> fallbackLocalizedText;

	[Token(Token = "0x4000388")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool isReady;

	[Token(Token = "0x4000389")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private HashSet<ILocalizedText> activeLocalizedTextList;

	[Token(Token = "0x400038A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private TMP_FontAsset ActiveFont;

	[Token(Token = "0x400038B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private string[] supportedLanguages;

	[Token(Token = "0x400038C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private TMP_FontAsset MainFont;

	[Token(Token = "0x400038D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private TMP_FontAsset CJKFont;

	[Token(Token = "0x400038E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private TMP_FontAsset CyrillicFont;

	[Token(Token = "0x400038F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private TMP_FontAsset ThaiFont;

	[Token(Token = "0x4000390")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private TMP_FontAsset ExtendedFont;

	[Token(Token = "0x600042B")]
	[Address(RVA = "0xB49300", Offset = "0xB49300", VA = "0xB49300")]
	private void Awake()
	{
	}

	[Token(Token = "0x600042C")]
	[Address(RVA = "0xB494C0", Offset = "0xB494C0", VA = "0xB494C0")]
	private void LoadLocalizedTextFromCsv(string fileName, bool fallback = false)
	{
	}

	[Token(Token = "0x600042D")]
	[Address(RVA = "0xB49950", Offset = "0xB49950", VA = "0xB49950")]
	public string GetLocalizedValue(string key)
	{
		return null;
	}

	[Token(Token = "0x600042E")]
	[Address(RVA = "0xB49A08", Offset = "0xB49A08", VA = "0xB49A08")]
	public TMP_FontAsset GetLocalizedFont()
	{
		return null;
	}

	[Token(Token = "0x600042F")]
	[Address(RVA = "0xB49A10", Offset = "0xB49A10", VA = "0xB49A10")]
	public bool GetIsReady()
	{
		return default(bool);
	}

	[Token(Token = "0x6000430")]
	[Address(RVA = "0xB49A18", Offset = "0xB49A18", VA = "0xB49A18")]
	public void Register(ILocalizedText visibleLocalizedText)
	{
	}

	[Token(Token = "0x6000431")]
	[Address(RVA = "0xB49A70", Offset = "0xB49A70", VA = "0xB49A70")]
	public void Unregister(ILocalizedText visibleLocalizedText)
	{
	}

	[Token(Token = "0x6000432")]
	[Address(RVA = "0xB49AC8", Offset = "0xB49AC8", VA = "0xB49AC8")]
	public int SwitchLanguage()
	{
		return default(int);
	}

	[Token(Token = "0x6000433")]
	[Address(RVA = "0xB49B24", Offset = "0xB49B24", VA = "0xB49B24")]
	private int SwitchLanguage(Languages selectedLanguage)
	{
		return default(int);
	}

	[Token(Token = "0x6000434")]
	[Address(RVA = "0xB49CA4", Offset = "0xB49CA4", VA = "0xB49CA4")]
	private void InitSupportedLanguages()
	{
	}

	[Token(Token = "0x6000435")]
	[Address(RVA = "0xB49FE4", Offset = "0xB49FE4", VA = "0xB49FE4")]
	public int LoadLanguage(int selectedLanguage)
	{
		return default(int);
	}

	[Token(Token = "0x6000436")]
	[Address(RVA = "0xB49D84", Offset = "0xB49D84", VA = "0xB49D84")]
	public int LoadLanguage(Languages selectedLanguage)
	{
		return default(int);
	}

	[Token(Token = "0x6000437")]
	[Address(RVA = "0xB49FE8", Offset = "0xB49FE8", VA = "0xB49FE8")]
	private void RefreshVisibleLocalizedText()
	{
	}

	[Token(Token = "0x6000438")]
	[Address(RVA = "0xB4A438", Offset = "0xB4A438", VA = "0xB4A438")]
	public static string GetResourceTypeKey(ResourceType resourceType)
	{
		return null;
	}

	[Token(Token = "0x6000439")]
	[Address(RVA = "0xB4A5E8", Offset = "0xB4A5E8", VA = "0xB4A5E8")]
	public static string GetCultureTypeKey(TownType type)
	{
		return null;
	}

	[Token(Token = "0x600043A")]
	[Address(RVA = "0xB4A6E4", Offset = "0xB4A6E4", VA = "0xB4A6E4")]
	public static string GetTechLevelKey(TechLevel techLevel)
	{
		return null;
	}

	[Token(Token = "0x600043B")]
	[Address(RVA = "0xB4A7E0", Offset = "0xB4A7E0", VA = "0xB4A7E0")]
	public static string GetBeliefTypeKey(Realm.RealmBeliefType type)
	{
		return null;
	}

	[Token(Token = "0x600043C")]
	[Address(RVA = "0xB4A8B8", Offset = "0xB4A8B8", VA = "0xB4A8B8")]
	public static string GetTreatyTypeKey(Treaty.TreatyType type)
	{
		return null;
	}

	[Token(Token = "0x600043D")]
	[Address(RVA = "0xB4A990", Offset = "0xB4A990", VA = "0xB4A990")]
	public static void GenerateCharList()
	{
	}

	[Token(Token = "0x600043E")]
	[Address(RVA = "0xB4B4E4", Offset = "0xB4B4E4", VA = "0xB4B4E4")]
	public LocalizationManager()
	{
	}
}
[Token(Token = "0x200007E")]
public class LocalizedMiracleLabel : MonoBehaviour, ILocalizedText
{
	[Token(Token = "0x4000391")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Spell miracle;

	[Token(Token = "0x4000392")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string key;

	[Token(Token = "0x4000393")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TextMeshPro textMeshPro;

	[Token(Token = "0x4000394")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float manaCost;

	[Token(Token = "0x600043F")]
	[Address(RVA = "0xB4B4EC", Offset = "0xB4B4EC", VA = "0xB4B4EC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000440")]
	[Address(RVA = "0xB4B7B8", Offset = "0xB4B7B8", VA = "0xB4B7B8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000441")]
	[Address(RVA = "0xB4B69C", Offset = "0xB4B69C", VA = "0xB4B69C", Slot = "4")]
	public void RefreshLabel()
	{
	}

	[Token(Token = "0x6000442")]
	[Address(RVA = "0xB4B620", Offset = "0xB4B620", VA = "0xB4B620")]
	private void FindManaCost()
	{
	}

	[Token(Token = "0x6000443")]
	[Address(RVA = "0xB4B810", Offset = "0xB4B810", VA = "0xB4B810")]
	public LocalizedMiracleLabel()
	{
	}
}
[Token(Token = "0x200007F")]
public class LocalizedSaveSlot : MonoBehaviour, ILocalizedText
{
	[Token(Token = "0x4000395")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TextMeshProUGUI textMeshProUi;

	[Token(Token = "0x4000396")]
	private const string AutoSaveKey = "auto_save";

	[Token(Token = "0x4000397")]
	private const string Key = "save_slot";

	[Token(Token = "0x4000398")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int saveSlotNumber;

	[Token(Token = "0x4000399")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private bool init;

	[Token(Token = "0x6000444")]
	[Address(RVA = "0xB4B818", Offset = "0xB4B818", VA = "0xB4B818")]
	public void Start()
	{
	}

	[Token(Token = "0x6000445")]
	[Address(RVA = "0xB4B9A4", Offset = "0xB4B9A4", VA = "0xB4B9A4")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000446")]
	[Address(RVA = "0xB4B89C", Offset = "0xB4B89C", VA = "0xB4B89C", Slot = "4")]
	public void RefreshLabel()
	{
	}

	[Token(Token = "0x6000447")]
	[Address(RVA = "0xB4B9FC", Offset = "0xB4B9FC", VA = "0xB4B9FC")]
	public void SetSaveSlot(int number)
	{
	}

	[Token(Token = "0x6000448")]
	[Address(RVA = "0xB4BA04", Offset = "0xB4BA04", VA = "0xB4BA04")]
	public void SelectSaveSlot(bool value)
	{
	}

	[Token(Token = "0x6000449")]
	[Address(RVA = "0xB4BCB0", Offset = "0xB4BCB0", VA = "0xB4BCB0")]
	[ContextMenu("Set tmpro")]
	private void SetTMProField()
	{
	}

	[Token(Token = "0x600044A")]
	[Address(RVA = "0xB4BD08", Offset = "0xB4BD08", VA = "0xB4BD08")]
	public LocalizedSaveSlot()
	{
	}
}
[Token(Token = "0x2000080")]
public class LocalizedText : MonoBehaviour, ILocalizedText
{
	[Token(Token = "0x400039A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string key;

	[Token(Token = "0x400039B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextMeshPro textMeshPro;

	[Token(Token = "0x400039C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TextMeshProUGUI textMeshProUi;

	[Token(Token = "0x400039D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool isCanvasText;

	[Token(Token = "0x400039E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	private bool init;

	[Token(Token = "0x600044B")]
	[Address(RVA = "0xB4BD10", Offset = "0xB4BD10", VA = "0xB4BD10")]
	public void Awake()
	{
	}

	[Token(Token = "0x600044C")]
	[Address(RVA = "0xB4BDE4", Offset = "0xB4BDE4", VA = "0xB4BDE4")]
	public void Start()
	{
	}

	[Token(Token = "0x600044D")]
	[Address(RVA = "0xB4BD14", Offset = "0xB4BD14", VA = "0xB4BD14")]
	private void Init()
	{
	}

	[Token(Token = "0x600044E")]
	[Address(RVA = "0xB4BF80", Offset = "0xB4BF80", VA = "0xB4BF80")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600044F")]
	[Address(RVA = "0xB4BE70", Offset = "0xB4BE70", VA = "0xB4BE70", Slot = "4")]
	public void RefreshLabel()
	{
	}

	[Token(Token = "0x6000450")]
	[Address(RVA = "0xB4BFE0", Offset = "0xB4BFE0", VA = "0xB4BFE0")]
	public void SetKey(string newKey)
	{
	}

	[Token(Token = "0x6000451")]
	[Address(RVA = "0xB4C030", Offset = "0xB4C030", VA = "0xB4C030")]
	public LocalizedText()
	{
	}
}
[Token(Token = "0x2000081")]
public interface ILocalizedText
{
	[Token(Token = "0x6000452")]
	void RefreshLabel();
}
[Token(Token = "0x2000082")]
public class LockLanguageDisplay : MonoBehaviour
{
	[Token(Token = "0x400039F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Image image;

	[Token(Token = "0x6000453")]
	[Address(RVA = "0xB4C038", Offset = "0xB4C038", VA = "0xB4C038")]
	private void Update()
	{
	}

	[Token(Token = "0x6000454")]
	[Address(RVA = "0xB4C0BC", Offset = "0xB4C0BC", VA = "0xB4C0BC")]
	public LockLanguageDisplay()
	{
	}
}
[Token(Token = "0x2000083")]
public class LookAtPlayer : MonoBehaviour
{
	[Token(Token = "0x40003A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Transform thisTransform;

	[Token(Token = "0x40003A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Transform target;

	[Token(Token = "0x6000455")]
	[Address(RVA = "0xB4C0C4", Offset = "0xB4C0C4", VA = "0xB4C0C4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000456")]
	[Address(RVA = "0xB4C184", Offset = "0xB4C184", VA = "0xB4C184")]
	private void Update()
	{
	}

	[Token(Token = "0x6000457")]
	[Address(RVA = "0xB4C0F0", Offset = "0xB4C0F0", VA = "0xB4C0F0")]
	private void LookAtPlayerPosition()
	{
	}

	[Token(Token = "0x6000458")]
	[Address(RVA = "0xB4C188", Offset = "0xB4C188", VA = "0xB4C188")]
	private void SetRotation()
	{
	}

	[Token(Token = "0x6000459")]
	[Address(RVA = "0xB4C210", Offset = "0xB4C210", VA = "0xB4C210")]
	public LookAtPlayer()
	{
	}
}
[Token(Token = "0x2000084")]
public class MainMenu : MonoBehaviour
{
	[Token(Token = "0x2000085")]
	public enum MenuEvents
	{
		[Token(Token = "0x40003B0")]
		Open,
		[Token(Token = "0x40003B1")]
		Close,
		[Token(Token = "0x40003B2")]
		PopupOpen,
		[Token(Token = "0x40003B3")]
		PopupClose,
		[Token(Token = "0x40003B4")]
		Hover,
		[Token(Token = "0x40003B5")]
		Click
	}

	[Token(Token = "0x2000086")]
	[CompilerGenerated]
	private sealed class <SetZeroTimeScaleDelayed>d__21 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40003B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40003B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40003B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MainMenu <>4__this;

		[Token(Token = "0x1700008E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600046B")]
			[Address(RVA = "0xB4E2D0", Offset = "0xB4E2D0", VA = "0xB4E2D0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700008F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600046D")]
			[Address(RVA = "0xB4E318", Offset = "0xB4E318", VA = "0xB4E318", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000468")]
		[Address(RVA = "0xB4DF18", Offset = "0xB4DF18", VA = "0xB4DF18")]
		[DebuggerHidden]
		public <SetZeroTimeScaleDelayed>d__21(int <>1__state)
		{
		}

		[Token(Token = "0x6000469")]
		[Address(RVA = "0xB4E20C", Offset = "0xB4E20C", VA = "0xB4E20C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600046A")]
		[Address(RVA = "0xB4E210", Offset = "0xB4E210", VA = "0xB4E210", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600046C")]
		[Address(RVA = "0xB4E2D8", Offset = "0xB4E2D8", VA = "0xB4E2D8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40003A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float autoCloseDistance;

	[Token(Token = "0x40003A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float baseScale;

	[Token(Token = "0x40003A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static MainMenu Instance;

	[Token(Token = "0x40003A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int maxNotifications;

	[Token(Token = "0x40003A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public NewMainUIController menuInstance;

	[Token(Token = "0x40003A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Header("Audio Configuration")]
	public AudioSet hoverAudioSet;

	[Token(Token = "0x40003A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AudioSet clickAudioSet;

	[Token(Token = "0x40003A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AudioSet menuOpenAudioSet;

	[Token(Token = "0x40003AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public AudioSet menuCloseAudioSet;

	[Token(Token = "0x40003AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public AudioSet popupOpenAudioSet;

	[Token(Token = "0x40003AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Canvas mainCanvas;

	[Token(Token = "0x40003AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public List<Notification> notifications;

	[Token(Token = "0x1700008D")]
	public bool IsOpen
	{
		[Token(Token = "0x600045A")]
		[Address(RVA = "0xB4C218", Offset = "0xB4C218", VA = "0xB4C218")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600045B")]
		[Address(RVA = "0xB4C220", Offset = "0xB4C220", VA = "0xB4C220")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x600045C")]
	[Address(RVA = "0xB4C22C", Offset = "0xB4C22C", VA = "0xB4C22C")]
	private void Awake()
	{
	}

	[Token(Token = "0x600045D")]
	[Address(RVA = "0xB4C57C", Offset = "0xB4C57C", VA = "0xB4C57C")]
	public void Update()
	{
	}

	[Token(Token = "0x600045E")]
	[Address(RVA = "0xB4CA28", Offset = "0xB4CA28", VA = "0xB4CA28")]
	public void Reset()
	{
	}

	[Token(Token = "0x600045F")]
	[Address(RVA = "0xB4CA54", Offset = "0xB4CA54", VA = "0xB4CA54")]
	public void Open(Transform displayTarget)
	{
	}

	[Token(Token = "0x6000460")]
	[Address(RVA = "0xB4DEA4", Offset = "0xB4DEA4", VA = "0xB4DEA4")]
	[IteratorStateMachine(typeof(<SetZeroTimeScaleDelayed>d__21))]
	private IEnumerator SetZeroTimeScaleDelayed()
	{
		return null;
	}

	[Token(Token = "0x6000461")]
	[Address(RVA = "0xB4DC60", Offset = "0xB4DC60", VA = "0xB4DC60")]
	public void SendEvent(MenuEvents menuEvent)
	{
	}

	[Token(Token = "0x6000462")]
	[Address(RVA = "0xB4DF40", Offset = "0xB4DF40", VA = "0xB4DF40")]
	private void TriggerHapticPulse()
	{
	}

	[Token(Token = "0x6000463")]
	[Address(RVA = "0xB4C720", Offset = "0xB4C720", VA = "0xB4C720")]
	public void Close()
	{
	}

	[Token(Token = "0x6000464")]
	[Address(RVA = "0xB4C494", Offset = "0xB4C494", VA = "0xB4C494")]
	private void Hide()
	{
	}

	[Token(Token = "0x6000465")]
	[Address(RVA = "0xB46534", Offset = "0xB46534", VA = "0xB46534")]
	public bool Toggle()
	{
		return default(bool);
	}

	[Token(Token = "0x6000466")]
	[Address(RVA = "0xB4DFE0", Offset = "0xB4DFE0", VA = "0xB4DFE0")]
	public void StoreNotification(Notification notification)
	{
	}

	[Token(Token = "0x6000467")]
	[Address(RVA = "0xB4E204", Offset = "0xB4E204", VA = "0xB4E204")]
	public MainMenu()
	{
	}
}
[Token(Token = "0x2000087")]
public class MapManager : MonoBehaviour
{
	[Token(Token = "0x2000088")]
	public struct TerrainSwapRequest
	{
		[Token(Token = "0x40003EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Position Position;

		[Token(Token = "0x40003EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public TerrainType NewTerrainType;

		[Token(Token = "0x6000497")]
		[Address(RVA = "0xB511F8", Offset = "0xB511F8", VA = "0xB511F8")]
		public TerrainSwapRequest(Position position, TerrainType newTerrainType)
		{
		}
	}

	[Token(Token = "0x2000089")]
	public class FreeTerrainRequest
	{
		[Token(Token = "0x40003ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 Center;

		[Token(Token = "0x40003EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int Size;

		[Token(Token = "0x40003EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int MINSize;

		[Token(Token = "0x40003F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public TerrainType Type;

		[Token(Token = "0x40003F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool CheckTowns;

		[Token(Token = "0x40003F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool Closest;

		[Token(Token = "0x40003F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		public bool Finished;

		[Token(Token = "0x40003F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B")]
		public bool Success;

		[Token(Token = "0x40003F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Position Result;

		[Token(Token = "0x6000498")]
		[Address(RVA = "0xB51204", Offset = "0xB51204", VA = "0xB51204")]
		public FreeTerrainRequest(Vector3 center, int size, int minSize, TerrainType type, bool checkTowns, bool closest = true)
		{
		}

		[Token(Token = "0x6000499")]
		[Address(RVA = "0xB51280", Offset = "0xB51280", VA = "0xB51280")]
		public void Retry(TerrainType newType)
		{
		}
	}

	[Token(Token = "0x200008A")]
	public class AdjacentTerrainTypeCountRequest
	{
		[Token(Token = "0x40003F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Position Center;

		[Token(Token = "0x40003F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TerrainType[] Types;

		[Token(Token = "0x40003F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<Position> Terrains;

		[Token(Token = "0x40003F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int Interest;

		[Token(Token = "0x40003FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool Finished;

		[Token(Token = "0x40003FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		public bool Success;

		[Token(Token = "0x40003FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Position Result;

		[Token(Token = "0x600049A")]
		[Address(RVA = "0xB4F354", Offset = "0xB4F354", VA = "0xB4F354")]
		public AdjacentTerrainTypeCountRequest(Position center, TerrainType[] types)
		{
		}

		[Token(Token = "0x600049B")]
		[Address(RVA = "0xB5128C", Offset = "0xB5128C", VA = "0xB5128C")]
		public void Retry(TerrainType[] newTypes)
		{
		}
	}

	[Token(Token = "0x200008B")]
	public class FreeAdjacentTerrainRequest
	{
		[Token(Token = "0x40003FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 Center;

		[Token(Token = "0x40003FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int Size;

		[Token(Token = "0x40003FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int MINSize;

		[Token(Token = "0x4000400")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public TerrainType TypeA;

		[Token(Token = "0x4000401")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TerrainType TypeB;

		[Token(Token = "0x4000402")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool CheckTowns;

		[Token(Token = "0x4000403")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		public bool Finished;

		[Token(Token = "0x4000404")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E")]
		public bool Success;

		[Token(Token = "0x4000405")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Position Result;

		[Token(Token = "0x600049C")]
		[Address(RVA = "0xB51330", Offset = "0xB51330", VA = "0xB51330")]
		public FreeAdjacentTerrainRequest(Vector3 center, int size, int minSize, TerrainType typeA, TerrainType typeB)
		{
		}

		[Token(Token = "0x600049D")]
		[Address(RVA = "0xB51398", Offset = "0xB51398", VA = "0xB51398")]
		public void Retry(TerrainType newTypeA, TerrainType newTypeB)
		{
		}
	}

	[Token(Token = "0x200008C")]
	public class FreePortLocationRequest
	{
		[Token(Token = "0x4000406")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 Center;

		[Token(Token = "0x4000407")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int Size;

		[Token(Token = "0x4000408")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int MINSize;

		[Token(Token = "0x4000409")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public TerrainType TypeA;

		[Token(Token = "0x400040A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int MaxAmountAdjacentWaterTiles;

		[Token(Token = "0x400040B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int MinAmountAdjacentWaterTiles;

		[Token(Token = "0x400040C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int Interest;

		[Token(Token = "0x400040D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Position WaterAccessTile;

		[Token(Token = "0x400040E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public List<Position> WaterAccessTiles;

		[Token(Token = "0x400040F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool Finished;

		[Token(Token = "0x4000410")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		public bool Success;

		[Token(Token = "0x4000411")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public Position Result;

		[Token(Token = "0x4000412")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public List<Position> WaterTiles;

		[Token(Token = "0x600049E")]
		[Address(RVA = "0xB513A4", Offset = "0xB513A4", VA = "0xB513A4")]
		public FreePortLocationRequest(Vector3 center, int size, int minSize, TerrainType typeA, int minAmountAdjacentWaterTiles, int maxAmountAdjacentWaterTiles)
		{
		}

		[Token(Token = "0x600049F")]
		[Address(RVA = "0xB514BC", Offset = "0xB514BC", VA = "0xB514BC")]
		public FreePortLocationRequest(Vector3 center, int minAmountAdjacentWaterTiles, int maxAmountAdjacentWaterTiles)
		{
		}

		[Token(Token = "0x60004A0")]
		[Address(RVA = "0xB515B0", Offset = "0xB515B0", VA = "0xB515B0")]
		public void Retry(TerrainType typeA)
		{
		}

		[Token(Token = "0x60004A1")]
		[Address(RVA = "0xB51670", Offset = "0xB51670", VA = "0xB51670")]
		public void Retry()
		{
		}
	}

	[Token(Token = "0x200008D")]
	public class FreeCoastRequest
	{
		[Token(Token = "0x4000413")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 Center;

		[Token(Token = "0x4000414")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int Size;

		[Token(Token = "0x4000415")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int MINSize;

		[Token(Token = "0x4000416")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool Finished;

		[Token(Token = "0x4000417")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		public bool Success;

		[Token(Token = "0x4000418")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Position Result;

		[Token(Token = "0x60004A2")]
		[Address(RVA = "0xB51728", Offset = "0xB51728", VA = "0xB51728")]
		public FreeCoastRequest(Vector3 center, int size, int minSize)
		{
		}
	}

	[Token(Token = "0x200008E")]
	[CompilerGenerated]
	private sealed class <FindCoastInRadius>d__60 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000419")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400041A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400041B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FreeCoastRequest request;

		[Token(Token = "0x400041C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public MapManager <>4__this;

		[Token(Token = "0x400041D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Position[] <>7__wrap1;

		[Token(Token = "0x400041E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int <>7__wrap2;

		[Token(Token = "0x400041F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Position <position>5__4;

		[Token(Token = "0x4000420")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Direction[] <>7__wrap4;

		[Token(Token = "0x4000421")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int <>7__wrap5;

		[Token(Token = "0x4000422")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private PathManager.PathRequest <pathRequest>5__7;

		[Token(Token = "0x17000090")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60004A6")]
			[Address(RVA = "0xB51B90", Offset = "0xB51B90", VA = "0xB51B90", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000091")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60004A8")]
			[Address(RVA = "0xB51BD8", Offset = "0xB51BD8", VA = "0xB51BD8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60004A3")]
		[Address(RVA = "0xB4EF18", Offset = "0xB4EF18", VA = "0xB4EF18")]
		[DebuggerHidden]
		public <FindCoastInRadius>d__60(int <>1__state)
		{
		}

		[Token(Token = "0x60004A4")]
		[Address(RVA = "0xB5177C", Offset = "0xB5177C", VA = "0xB5177C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60004A5")]
		[Address(RVA = "0xB51780", Offset = "0xB51780", VA = "0xB51780", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60004A7")]
		[Address(RVA = "0xB51B98", Offset = "0xB51B98", VA = "0xB51B98", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200008F")]
	[CompilerGenerated]
	private sealed class <FindFreeTerrainInRadiusOfTerrain>d__61 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000423")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000424")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000425")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FreeAdjacentTerrainRequest request;

		[Token(Token = "0x4000426")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public MapManager <>4__this;

		[Token(Token = "0x4000427")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Position <candidatePosition>5__2;

		[Token(Token = "0x4000428")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Position[] <radius>5__3;

		[Token(Token = "0x4000429")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int <index>5__4;

		[Token(Token = "0x400042A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Position <position>5__5;

		[Token(Token = "0x400042B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private PathManager.PathRequest <pathRequest>5__6;

		[Token(Token = "0x17000092")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60004AC")]
			[Address(RVA = "0xB51FD0", Offset = "0xB51FD0", VA = "0xB51FD0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000093")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60004AE")]
			[Address(RVA = "0xB52018", Offset = "0xB52018", VA = "0xB52018", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60004A9")]
		[Address(RVA = "0xB4EFD0", Offset = "0xB4EFD0", VA = "0xB4EFD0")]
		[DebuggerHidden]
		public <FindFreeTerrainInRadiusOfTerrain>d__61(int <>1__state)
		{
		}

		[Token(Token = "0x60004AA")]
		[Address(RVA = "0xB51BE0", Offset = "0xB51BE0", VA = "0xB51BE0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60004AB")]
		[Address(RVA = "0xB51BE4", Offset = "0xB51BE4", VA = "0xB51BE4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60004AD")]
		[Address(RVA = "0xB51FD8", Offset = "0xB51FD8", VA = "0xB51FD8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000090")]
	[CompilerGenerated]
	private sealed class <FindFreePortLocation>d__62 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400042C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400042D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400042E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FreePortLocationRequest request;

		[Token(Token = "0x400042F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public MapManager <>4__this;

		[Token(Token = "0x4000430")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Position <candidatePosition>5__2;

		[Token(Token = "0x4000431")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Position[] <radius>5__3;

		[Token(Token = "0x4000432")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int <index>5__4;

		[Token(Token = "0x4000433")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Position <position>5__5;

		[Token(Token = "0x4000434")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private PathManager.PathRequest <pathRequest>5__6;

		[Token(Token = "0x17000094")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60004B2")]
			[Address(RVA = "0xB5239C", Offset = "0xB5239C", VA = "0xB5239C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000095")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60004B4")]
			[Address(RVA = "0xB523E4", Offset = "0xB523E4", VA = "0xB523E4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60004AF")]
		[Address(RVA = "0xB4F088", Offset = "0xB4F088", VA = "0xB4F088")]
		[DebuggerHidden]
		public <FindFreePortLocation>d__62(int <>1__state)
		{
		}

		[Token(Token = "0x60004B0")]
		[Address(RVA = "0xB52020", Offset = "0xB52020", VA = "0xB52020", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60004B1")]
		[Address(RVA = "0xB52024", Offset = "0xB52024", VA = "0xB52024", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60004B3")]
		[Address(RVA = "0xB523A4", Offset = "0xB523A4", VA = "0xB523A4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000091")]
	[CompilerGenerated]
	private sealed class <FindFreeTerrainInRadius>d__67 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000435")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000436")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000437")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FreeTerrainRequest request;

		[Token(Token = "0x4000438")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public MapManager <>4__this;

		[Token(Token = "0x4000439")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Position <candidatePosition>5__2;

		[Token(Token = "0x400043A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Position[] <radius>5__3;

		[Token(Token = "0x400043B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int <index>5__4;

		[Token(Token = "0x400043C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Position <position>5__5;

		[Token(Token = "0x400043D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private PathManager.PathRequest <pathRequest>5__6;

		[Token(Token = "0x17000096")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60004B8")]
			[Address(RVA = "0xB527B0", Offset = "0xB527B0", VA = "0xB527B0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000097")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60004BA")]
			[Address(RVA = "0xB527F8", Offset = "0xB527F8", VA = "0xB527F8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60004B5")]
		[Address(RVA = "0xB4FA40", Offset = "0xB4FA40", VA = "0xB4FA40")]
		[DebuggerHidden]
		public <FindFreeTerrainInRadius>d__67(int <>1__state)
		{
		}

		[Token(Token = "0x60004B6")]
		[Address(RVA = "0xB523EC", Offset = "0xB523EC", VA = "0xB523EC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60004B7")]
		[Address(RVA = "0xB523F0", Offset = "0xB523F0", VA = "0xB523F0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60004B9")]
		[Address(RVA = "0xB527B8", Offset = "0xB527B8", VA = "0xB527B8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000092")]
	[CompilerGenerated]
	private sealed class <LoadData>d__72 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400043E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400043F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000440")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<KeyValuePair<Position, TerrainType>> gameDataTerrainData;

		[Token(Token = "0x4000441")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public MapManager <>4__this;

		[Token(Token = "0x4000442")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int amountPerFrame;

		[Token(Token = "0x4000443")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int <count>5__2;

		[Token(Token = "0x4000444")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<KeyValuePair<Position, TerrainType>>.Enumerator <>7__wrap2;

		[Token(Token = "0x17000098")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60004BF")]
			[Address(RVA = "0xB52BB4", Offset = "0xB52BB4", VA = "0xB52BB4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000099")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60004C1")]
			[Address(RVA = "0xB52BFC", Offset = "0xB52BFC", VA = "0xB52BFC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60004BB")]
		[Address(RVA = "0xB4FF40", Offset = "0xB4FF40", VA = "0xB4FF40")]
		[DebuggerHidden]
		public <LoadData>d__72(int <>1__state)
		{
		}

		[Token(Token = "0x60004BC")]
		[Address(RVA = "0xB52800", Offset = "0xB52800", VA = "0xB52800", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60004BD")]
		[Address(RVA = "0xB5281C", Offset = "0xB5281C", VA = "0xB5281C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60004BE")]
		[Address(RVA = "0xB52B64", Offset = "0xB52B64", VA = "0xB52B64")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x60004C0")]
		[Address(RVA = "0xB52BBC", Offset = "0xB52BBC", VA = "0xB52BBC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000093")]
	[CompilerGenerated]
	private sealed class <LoadAnimalData>d__73 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000445")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000446")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000447")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<KeyValuePair<Position, AnimalType>> gameDataAnimalData;

		[Token(Token = "0x4000448")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public MapManager <>4__this;

		[Token(Token = "0x4000449")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int amountPerFrame;

		[Token(Token = "0x400044A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int <count>5__2;

		[Token(Token = "0x400044B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<KeyValuePair<Position, AnimalType>>.Enumerator <>7__wrap2;

		[Token(Token = "0x1700009A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60004C6")]
			[Address(RVA = "0xB53070", Offset = "0xB53070", VA = "0xB53070", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700009B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60004C8")]
			[Address(RVA = "0xB530B8", Offset = "0xB530B8", VA = "0xB530B8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60004C2")]
		[Address(RVA = "0xB4FF68", Offset = "0xB4FF68", VA = "0xB4FF68")]
		[DebuggerHidden]
		public <LoadAnimalData>d__73(int <>1__state)
		{
		}

		[Token(Token = "0x60004C3")]
		[Address(RVA = "0xB52C04", Offset = "0xB52C04", VA = "0xB52C04", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60004C4")]
		[Address(RVA = "0xB52C20", Offset = "0xB52C20", VA = "0xB52C20", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60004C5")]
		[Address(RVA = "0xB53020", Offset = "0xB53020", VA = "0xB53020")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x60004C7")]
		[Address(RVA = "0xB53078", Offset = "0xB53078", VA = "0xB53078", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40003B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Configuration", order = 1)]
	public int Unit;

	[Token(Token = "0x40003BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int unit;

	[Token(Token = "0x40003BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Map Map;

	[Token(Token = "0x40003BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Header("Terrains_Prefabs", order = 2)]
	public GameObject EmptyTerrain;

	[Token(Token = "0x40003BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject GrassTerrain;

	[Token(Token = "0x40003BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject DirtTerrain;

	[Token(Token = "0x40003BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject SnowTerrain;

	[Token(Token = "0x40003C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject ForestTerrain;

	[Token(Token = "0x40003C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject PineForestTerrain;

	[Token(Token = "0x40003C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject SakuraForestTerrain;

	[Token(Token = "0x40003C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public GameObject WaterTerrain;

	[Token(Token = "0x40003C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public GameObject DeepWaterTerrain;

	[Token(Token = "0x40003C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public GameObject DesertTerrain;

	[Token(Token = "0x40003C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public GameObject OasisTerrain;

	[Token(Token = "0x40003C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public GameObject SavanahTerrain;

	[Token(Token = "0x40003C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public GameObject MountainTerrain;

	[Token(Token = "0x40003C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public GameObject VolcanoTerrain;

	[Token(Token = "0x40003CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public GameObject LavaTerrain;

	[Token(Token = "0x40003CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public GameObject SwampTerrain;

	[Token(Token = "0x40003CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public GameObject PirateSkullTerrain;

	[Token(Token = "0x40003CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public GameObject IronMineTerrain;

	[Token(Token = "0x40003CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public GameObject CopperMineTerrain;

	[Token(Token = "0x40003CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public GameObject CoalMineTerrain;

	[Token(Token = "0x40003D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public GameObject GoldMineTerrain;

	[Token(Token = "0x40003D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public GameObject IronFieldTerrain;

	[Token(Token = "0x40003D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public GameObject CopperFieldTerrain;

	[Token(Token = "0x40003D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public GameObject CoalFieldTerrain;

	[Token(Token = "0x40003D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public GameObject GoldFieldTerrain;

	[Token(Token = "0x40003D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public GameObject AlienCrashGrassTerrain;

	[Token(Token = "0x40003D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public GameObject AlienCrashSnowTerrain;

	[Token(Token = "0x40003D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public GameObject AlienCrashSandTerrain;

	[Token(Token = "0x40003D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public GameObject StoneGrassTerrain;

	[Token(Token = "0x40003D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public GameObject StoneSnowTerrain;

	[Token(Token = "0x40003DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public GameObject StoneSandTerrain;

	[Token(Token = "0x40003DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public GameObject MaelstromTerrain;

	[Token(Token = "0x40003DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	public GameObject DeepMaelstromTerrain;

	[Token(Token = "0x40003DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	[Header("Animals_Prefabs", order = 2)]
	public GameObject DeerSpawnerPrefab;

	[Token(Token = "0x40003DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public GameObject WolfSpawnerPrefab;

	[Token(Token = "0x40003DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public GameObject CrocodileSpawnerPrefab;

	[Token(Token = "0x40003E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public GameObject SharkSpawnerPrefab;

	[Token(Token = "0x40003E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public GameObject PolarBearSpawnerPrefab;

	[Token(Token = "0x40003E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	public GameObject CowSpawnerPrefab;

	[Token(Token = "0x40003E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	public GameObject ElephantSpawnerPrefab;

	[Token(Token = "0x40003E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	public GameObject RabbitSpawnerPrefab;

	[Token(Token = "0x40003E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	public GameObject GiraffeSpawnerPrefab;

	[Token(Token = "0x40003E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	public GameObject FishSpawnerPrefab;

	[Token(Token = "0x40003E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	public GameObject SnakeSpawnerPrefab;

	[Token(Token = "0x40003E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	private GameObject _terrains;

	[Token(Token = "0x40003E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	private Queue<TerrainSwapRequest> swapRequests;

	[Token(Token = "0x40003EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static readonly List<TerrainType> CoastExcludedTerrainType;

	[Token(Token = "0x600046E")]
	[Address(RVA = "0xB4E320", Offset = "0xB4E320", VA = "0xB4E320")]
	public void Init(GameController controller)
	{
	}

	[Token(Token = "0x600046F")]
	[Address(RVA = "0xB4E3DC", Offset = "0xB4E3DC", VA = "0xB4E3DC")]
	public void CreateBaseTerrain()
	{
	}

	[Token(Token = "0x6000470")]
	[Address(RVA = "0xB4E6B4", Offset = "0xB4E6B4", VA = "0xB4E6B4")]
	public void AddTerrain(GameObject emptyTerrain, TerrainType type, int radius)
	{
	}

	[Token(Token = "0x6000471")]
	[Address(RVA = "0xB4E824", Offset = "0xB4E824", VA = "0xB4E824")]
	private GameObject AddTerrain(Position position, TerrainType type)
	{
		return null;
	}

	[Token(Token = "0x6000472")]
	[Address(RVA = "0xB4E980", Offset = "0xB4E980", VA = "0xB4E980")]
	internal void AddLava(Vector3 volcanoPosition, int distance)
	{
	}

	[Token(Token = "0x6000473")]
	[Address(RVA = "0xB4EA40", Offset = "0xB4EA40", VA = "0xB4EA40")]
	internal void RemoveLava(Vector3 volcanoPosition)
	{
	}

	[Token(Token = "0x6000474")]
	[Address(RVA = "0xB4EC1C", Offset = "0xB4EC1C", VA = "0xB4EC1C")]
	public void AddEmptyTerrain(Position position)
	{
	}

	[Token(Token = "0x6000475")]
	[Address(RVA = "0xB4E480", Offset = "0xB4E480", VA = "0xB4E480")]
	private GameObject InstantiateTerrain(TerrainType type, Position position)
	{
		return null;
	}

	[Token(Token = "0x6000476")]
	[Address(RVA = "0xB4EC94", Offset = "0xB4EC94", VA = "0xB4EC94")]
	private GameObject InstantiateAnimal(AnimalType type, Position position)
	{
		return null;
	}

	[Token(Token = "0x6000477")]
	[Address(RVA = "0xB4EE88", Offset = "0xB4EE88", VA = "0xB4EE88")]
	[IteratorStateMachine(typeof(<FindCoastInRadius>d__60))]
	public IEnumerator FindCoastInRadius(FreeCoastRequest request)
	{
		return null;
	}

	[Token(Token = "0x6000478")]
	[Address(RVA = "0xB4EF40", Offset = "0xB4EF40", VA = "0xB4EF40")]
	[IteratorStateMachine(typeof(<FindFreeTerrainInRadiusOfTerrain>d__61))]
	public IEnumerator FindFreeTerrainInRadiusOfTerrain(FreeAdjacentTerrainRequest request)
	{
		return null;
	}

	[Token(Token = "0x6000479")]
	[Address(RVA = "0xB4EFF8", Offset = "0xB4EFF8", VA = "0xB4EFF8")]
	[IteratorStateMachine(typeof(<FindFreePortLocation>d__62))]
	public IEnumerator FindFreePortLocation(FreePortLocationRequest request)
	{
		return null;
	}

	[Token(Token = "0x600047A")]
	[Address(RVA = "0xB4F0B0", Offset = "0xB4F0B0", VA = "0xB4F0B0")]
	public bool LookForAdjacentTiles(Position positionPort, FreePortLocationRequest request)
	{
		return default(bool);
	}

	[Token(Token = "0x600047B")]
	[Address(RVA = "0xB4F688", Offset = "0xB4F688", VA = "0xB4F688")]
	public bool AddTown(Vector3 position, GameObject townGameObject)
	{
		return default(bool);
	}

	[Token(Token = "0x600047C")]
	[Address(RVA = "0xB4F72C", Offset = "0xB4F72C", VA = "0xB4F72C")]
	public void AddBuilding(Position position, BuildingType type, Addon addon)
	{
	}

	[Token(Token = "0x600047D")]
	[Address(RVA = "0xB4F7C8", Offset = "0xB4F7C8", VA = "0xB4F7C8")]
	public void RemoveBuilding(Vector3 position, Addon addon)
	{
	}

	[Token(Token = "0x600047E")]
	[Address(RVA = "0xB4F9B0", Offset = "0xB4F9B0", VA = "0xB4F9B0")]
	[IteratorStateMachine(typeof(<FindFreeTerrainInRadius>d__67))]
	public IEnumerator FindFreeTerrainInRadius(FreeTerrainRequest request)
	{
		return null;
	}

	[Token(Token = "0x600047F")]
	[Address(RVA = "0xB4FA68", Offset = "0xB4FA68", VA = "0xB4FA68")]
	private void FindAdjacentTerrains(AdjacentTerrainTypeCountRequest request, int maxAmount)
	{
	}

	[Token(Token = "0x6000480")]
	[Address(RVA = "0xB4F41C", Offset = "0xB4F41C", VA = "0xB4F41C")]
	private void LookAtAdjacentTerrains(AdjacentTerrainTypeCountRequest request, Position position, int maxAmount)
	{
	}

	[Token(Token = "0x6000481")]
	[Address(RVA = "0xB4FBA4", Offset = "0xB4FBA4", VA = "0xB4FBA4")]
	public bool FindCoast(Vector3 position, out Direction coastDirection)
	{
		return default(bool);
	}

	[Token(Token = "0x6000482")]
	[Address(RVA = "0xB4FD0C", Offset = "0xB4FD0C", VA = "0xB4FD0C")]
	public void Load(List<KeyValuePair<Position, TerrainType>> gameDataTerrainData, List<KeyValuePair<Position, AnimalType>> gameDataAnimalData, int amountPerFrame)
	{
	}

	[Token(Token = "0x6000483")]
	[Address(RVA = "0xB4FE10", Offset = "0xB4FE10", VA = "0xB4FE10")]
	[IteratorStateMachine(typeof(<LoadData>d__72))]
	private IEnumerator LoadData(List<KeyValuePair<Position, TerrainType>> gameDataTerrainData, int amountPerFrame)
	{
		return null;
	}

	[Token(Token = "0x6000484")]
	[Address(RVA = "0xB4FEA8", Offset = "0xB4FEA8", VA = "0xB4FEA8")]
	[IteratorStateMachine(typeof(<LoadAnimalData>d__73))]
	private IEnumerator LoadAnimalData(List<KeyValuePair<Position, AnimalType>> gameDataAnimalData, int amountPerFrame)
	{
		return null;
	}

	[Token(Token = "0x6000485")]
	[Address(RVA = "0xB4EBC8", Offset = "0xB4EBC8", VA = "0xB4EBC8")]
	public GameObject RemoveTerrain(Vector3 impactPosition)
	{
		return null;
	}

	[Token(Token = "0x6000486")]
	[Address(RVA = "0xB4FF90", Offset = "0xB4FF90", VA = "0xB4FF90")]
	private void ClearTile(Position position)
	{
	}

	[Token(Token = "0x6000487")]
	[Address(RVA = "0xB50190", Offset = "0xB50190", VA = "0xB50190")]
	public bool AddAnimal(Vector3 position)
	{
		return default(bool);
	}

	[Token(Token = "0x6000488")]
	[Address(RVA = "0xB50324", Offset = "0xB50324", VA = "0xB50324")]
	public bool AddMineralField(Vector3 position)
	{
		return default(bool);
	}

	[Token(Token = "0x6000489")]
	[Address(RVA = "0xB5043C", Offset = "0xB5043C", VA = "0xB5043C")]
	public bool AddStone(Vector3 position)
	{
		return default(bool);
	}

	[Token(Token = "0x600048A")]
	[Address(RVA = "0xB50554", Offset = "0xB50554", VA = "0xB50554")]
	public void SwitchZone(Vector3 v3, TerrainType newTerrainType)
	{
	}

	[Token(Token = "0x600048B")]
	[Address(RVA = "0xB505C8", Offset = "0xB505C8", VA = "0xB505C8")]
	private void Update()
	{
	}

	[Token(Token = "0x600048C")]
	[Address(RVA = "0xB50858", Offset = "0xB50858", VA = "0xB50858")]
	public void RequestSwap(TerrainSwapRequest swapRequest)
	{
	}

	[Token(Token = "0x600048D")]
	[Address(RVA = "0xB4F864", Offset = "0xB4F864", VA = "0xB4F864")]
	public void SetFloorType(Vector3 position, bool natural = false, bool partiallyNatural = false)
	{
	}

	[Token(Token = "0x600048E")]
	[Address(RVA = "0xB508C0", Offset = "0xB508C0", VA = "0xB508C0")]
	public bool CheckTownInRadius(Position position, int townCheckRadius)
	{
		return default(bool);
	}

	[Token(Token = "0x600048F")]
	[Address(RVA = "0xB44CC8", Offset = "0xB44CC8", VA = "0xB44CC8")]
	public DeisimTileData GetInfoForPosition(Vector3 position)
	{
		return default(DeisimTileData);
	}

	[Token(Token = "0x6000490")]
	[Address(RVA = "0xB5097C", Offset = "0xB5097C", VA = "0xB5097C")]
	public DeisimTileData GetInfoForPosition(Position position)
	{
		return default(DeisimTileData);
	}

	[Token(Token = "0x6000491")]
	[Address(RVA = "0xB50AEC", Offset = "0xB50AEC", VA = "0xB50AEC")]
	private bool CheckConcreteGround(DeisimTileData tileData)
	{
		return default(bool);
	}

	[Token(Token = "0x6000492")]
	[Address(RVA = "0xB50C44", Offset = "0xB50C44", VA = "0xB50C44")]
	public bool IsLandClaimed(Position position, out int owner)
	{
		return default(bool);
	}

	[Token(Token = "0x6000493")]
	[Address(RVA = "0xB50CBC", Offset = "0xB50CBC", VA = "0xB50CBC")]
	public void ClaimLand(Position position, int id)
	{
	}

	[Token(Token = "0x6000494")]
	[Address(RVA = "0xB50D6C", Offset = "0xB50D6C", VA = "0xB50D6C")]
	public bool AddMaelstrom(Vector3 miraclePosition)
	{
		return default(bool);
	}

	[Token(Token = "0x6000495")]
	[Address(RVA = "0xB50E74", Offset = "0xB50E74", VA = "0xB50E74")]
	public MapManager()
	{
	}
}
[Token(Token = "0x2000094")]
public class MeshCombiner : MonoBehaviour
{
	[Token(Token = "0x60004C9")]
	[Address(RVA = "0xB530C0", Offset = "0xB530C0", VA = "0xB530C0")]
	private void Start()
	{
	}

	[Token(Token = "0x60004CA")]
	[Address(RVA = "0xB53330", Offset = "0xB53330", VA = "0xB53330")]
	public MeshCombiner()
	{
	}
}
[Token(Token = "0x2000095")]
public class AlternatingBGList : MonoBehaviour
{
	[Token(Token = "0x400044C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private string BackgroundName;

	[Token(Token = "0x400044D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private bool StartFirst;

	[Token(Token = "0x400044E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private int Offset;

	[Token(Token = "0x60004CB")]
	[Address(RVA = "0xB53338", Offset = "0xB53338", VA = "0xB53338")]
	private void Start()
	{
	}

	[Token(Token = "0x60004CC")]
	[Address(RVA = "0xB53724", Offset = "0xB53724", VA = "0xB53724")]
	private void OnTransformChildrenChanged()
	{
	}

	[Token(Token = "0x60004CD")]
	[Address(RVA = "0xB5333C", Offset = "0xB5333C", VA = "0xB5333C")]
	[ContextMenu("ValidateBackgrounds")]
	public void ValidateBackgrounds()
	{
	}

	[Token(Token = "0x60004CE")]
	[Address(RVA = "0xB53728", Offset = "0xB53728", VA = "0xB53728")]
	public AlternatingBGList()
	{
	}
}
[Token(Token = "0x2000096")]
public class AnimationStateHelper : MonoBehaviour
{
	[Token(Token = "0x2000097")]
	[CompilerGenerated]
	private sealed class <DelayedAction>d__23 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000460")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000461")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000462")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float delay;

		[Token(Token = "0x4000463")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action f;

		[Token(Token = "0x1700009C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60004E0")]
			[Address(RVA = "0xB542EC", Offset = "0xB542EC", VA = "0xB542EC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700009D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60004E2")]
			[Address(RVA = "0xB54334", Offset = "0xB54334", VA = "0xB54334", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60004DD")]
		[Address(RVA = "0xB54060", Offset = "0xB54060", VA = "0xB54060")]
		[DebuggerHidden]
		public <DelayedAction>d__23(int <>1__state)
		{
		}

		[Token(Token = "0x60004DE")]
		[Address(RVA = "0xB54224", Offset = "0xB54224", VA = "0xB54224", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60004DF")]
		[Address(RVA = "0xB54228", Offset = "0xB54228", VA = "0xB54228", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60004E1")]
		[Address(RVA = "0xB542F4", Offset = "0xB542F4", VA = "0xB542F4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000098")]
	[CompilerGenerated]
	private sealed class <DelayedAnimation>d__24 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000464")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000465")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000466")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AnimationStateHelper <>4__this;

		[Token(Token = "0x4000467")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string anim;

		[Token(Token = "0x1700009E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60004E6")]
			[Address(RVA = "0xB543F8", Offset = "0xB543F8", VA = "0xB543F8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700009F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60004E8")]
			[Address(RVA = "0xB54440", Offset = "0xB54440", VA = "0xB54440", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60004E3")]
		[Address(RVA = "0xB54088", Offset = "0xB54088", VA = "0xB54088")]
		[DebuggerHidden]
		public <DelayedAnimation>d__24(int <>1__state)
		{
		}

		[Token(Token = "0x60004E4")]
		[Address(RVA = "0xB5433C", Offset = "0xB5433C", VA = "0xB5433C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60004E5")]
		[Address(RVA = "0xB54340", Offset = "0xB54340", VA = "0xB54340", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60004E7")]
		[Address(RVA = "0xB54400", Offset = "0xB54400", VA = "0xB54400", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000099")]
	[CompilerGenerated]
	private sealed class <DelayedDisableInHierarchy>d__25 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000468")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000469")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400046A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AnimationStateHelper <>4__this;

		[Token(Token = "0x170000A0")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60004EC")]
			[Address(RVA = "0xB54550", Offset = "0xB54550", VA = "0xB54550", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A1")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60004EE")]
			[Address(RVA = "0xB54598", Offset = "0xB54598", VA = "0xB54598", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60004E9")]
		[Address(RVA = "0xB540B0", Offset = "0xB540B0", VA = "0xB540B0")]
		[DebuggerHidden]
		public <DelayedDisableInHierarchy>d__25(int <>1__state)
		{
		}

		[Token(Token = "0x60004EA")]
		[Address(RVA = "0xB54448", Offset = "0xB54448", VA = "0xB54448", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60004EB")]
		[Address(RVA = "0xB5444C", Offset = "0xB5444C", VA = "0xB5444C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60004ED")]
		[Address(RVA = "0xB54558", Offset = "0xB54558", VA = "0xB54558", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400044F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private bool StartState;

	[Token(Token = "0x4000450")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private string EnableAnim;

	[Token(Token = "0x4000451")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private string DisableAnim;

	[Token(Token = "0x4000452")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private string EnableState;

	[Token(Token = "0x4000453")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private string DisableState;

	[Token(Token = "0x4000454")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	[FormerlySerializedAs("Animator")]
	private Animator Anim;

	[Token(Token = "0x4000455")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private bool SetStateOnStart;

	[Token(Token = "0x4000456")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	[FormerlySerializedAs("OnEnable")]
	private UnityEvent OnEnableEvent;

	[Token(Token = "0x4000457")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[FormerlySerializedAs("OnDisable")]
	[SerializeField]
	private UnityEvent OnDisableEvent;

	[Token(Token = "0x4000458")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private float EventEnableDelay;

	[Token(Token = "0x4000459")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[SerializeField]
	private float EventDisableDelay;

	[Token(Token = "0x400045A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private bool ToggleLayoutGroups;

	[Token(Token = "0x400045B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
	[SerializeField]
	private bool DisableInHierarchyOnInactive;

	[Token(Token = "0x400045C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
	[SerializeField]
	private bool DelayAnimations;

	[Token(Token = "0x400045D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6B")]
	[SerializeField]
	private bool DebugMsg;

	[Token(Token = "0x400045E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private bool state;

	[Token(Token = "0x400045F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6D")]
	private bool disabled;

	[Token(Token = "0x60004CF")]
	[Address(RVA = "0xB53738", Offset = "0xB53738", VA = "0xB53738")]
	private void Awake()
	{
	}

	[Token(Token = "0x60004D0")]
	[Address(RVA = "0xB53A4C", Offset = "0xB53A4C", VA = "0xB53A4C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60004D1")]
	[Address(RVA = "0xB53A58", Offset = "0xB53A58", VA = "0xB53A58")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60004D2")]
	[Address(RVA = "0xB53A9C", Offset = "0xB53A9C", VA = "0xB53A9C")]
	public void SetStateExplicit(bool target)
	{
	}

	[Token(Token = "0x60004D3")]
	[Address(RVA = "0xB53AB0", Offset = "0xB53AB0", VA = "0xB53AB0")]
	public void SetState(bool target)
	{
	}

	[Token(Token = "0x60004D4")]
	[Address(RVA = "0xB54050", Offset = "0xB54050", VA = "0xB54050")]
	public void ToggleState()
	{
	}

	[Token(Token = "0x60004D5")]
	[Address(RVA = "0xB53954", Offset = "0xB53954", VA = "0xB53954")]
	[IteratorStateMachine(typeof(<DelayedAction>d__23))]
	private IEnumerator DelayedAction(Action f, float delay)
	{
		return null;
	}

	[Token(Token = "0x60004D6")]
	[Address(RVA = "0xB53FC0", Offset = "0xB53FC0", VA = "0xB53FC0")]
	[IteratorStateMachine(typeof(<DelayedAnimation>d__24))]
	private IEnumerator DelayedAnimation(string anim)
	{
		return null;
	}

	[Token(Token = "0x60004D7")]
	[Address(RVA = "0xB539D8", Offset = "0xB539D8", VA = "0xB539D8")]
	[IteratorStateMachine(typeof(<DelayedDisableInHierarchy>d__25))]
	private IEnumerator DelayedDisableInHierarchy()
	{
		return null;
	}

	[Token(Token = "0x60004D8")]
	[Address(RVA = "0xB540D8", Offset = "0xB540D8", VA = "0xB540D8")]
	public AnimationStateHelper()
	{
	}
}
[Token(Token = "0x200009A")]
public class ConfirmWindow : MonoBehaviour
{
	[Token(Token = "0x400046B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private TextMeshProUGUI TitleTxt;

	[Token(Token = "0x400046C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private TextMeshProUGUI BodyTxt;

	[Token(Token = "0x400046D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private UnityEvent OnOpenSelf;

	[Token(Token = "0x400046E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private UnityEvent OnCloseSelf;

	[Token(Token = "0x400046F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private UnityAction OnAccept;

	[Token(Token = "0x4000470")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private UnityAction OnDecline;

	[Token(Token = "0x60004EF")]
	[Address(RVA = "0xB545A0", Offset = "0xB545A0", VA = "0xB545A0")]
	public void Show(string title, string body, UnityAction onAccept, UnityAction onDecline)
	{
	}

	[Token(Token = "0x60004F0")]
	[Address(RVA = "0xB54680", Offset = "0xB54680", VA = "0xB54680")]
	public void BtnAccept()
	{
	}

	[Token(Token = "0x60004F1")]
	[Address(RVA = "0xB546B8", Offset = "0xB546B8", VA = "0xB546B8")]
	public void BtnDecline()
	{
	}

	[Token(Token = "0x60004F2")]
	[Address(RVA = "0xB546F0", Offset = "0xB546F0", VA = "0xB546F0")]
	public ConfirmWindow()
	{
	}
}
[Token(Token = "0x200009B")]
public class DeisimDataList : MonoBehaviour
{
	[Token(Token = "0x60004F3")]
	[Address(RVA = "0xB546F8", Offset = "0xB546F8", VA = "0xB546F8")]
	public void ShowData(List<string> data)
	{
	}

	[Token(Token = "0x60004F4")]
	[Address(RVA = "0xB546FC", Offset = "0xB546FC", VA = "0xB546FC")]
	public void ShowData(List<Tuple<string, UnityAction>> data)
	{
	}

	[Token(Token = "0x60004F5")]
	[Address(RVA = "0xB54700", Offset = "0xB54700", VA = "0xB54700")]
	public void ShowData(List<Tuple<string, string>> data)
	{
	}

	[Token(Token = "0x60004F6")]
	[Address(RVA = "0xB54704", Offset = "0xB54704", VA = "0xB54704")]
	public void ShowData(List<Tuple<string, List<string>>> data)
	{
	}

	[Token(Token = "0x60004F7")]
	[Address(RVA = "0xB54708", Offset = "0xB54708", VA = "0xB54708")]
	public void ShowData(List<Tuple<string, List<Tuple<string, string>>>> data)
	{
	}

	[Token(Token = "0x60004F8")]
	[Address(RVA = "0xB5470C", Offset = "0xB5470C", VA = "0xB5470C")]
	public void ShowData(List<Tuple<string, List<Tuple<string, string, UnityAction>>>> data)
	{
	}

	[Token(Token = "0x60004F9")]
	[Address(RVA = "0xB54710", Offset = "0xB54710", VA = "0xB54710")]
	public DeisimDataList()
	{
	}
}
[Token(Token = "0x200009C")]
public class InputWindow : MonoBehaviour
{
	[Token(Token = "0x4000471")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private TextMeshProUGUI TitleTxt;

	[Token(Token = "0x4000472")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private TextMeshProUGUI BodyTxt;

	[Token(Token = "0x4000473")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private UnityEvent OnOpenSelf;

	[Token(Token = "0x4000474")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private UnityEvent OnCloseSelf;

	[Token(Token = "0x4000475")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private TMP_InputField InputField;

	[Token(Token = "0x4000476")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private UnityAction<string> OnAccept;

	[Token(Token = "0x4000477")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private UnityAction<string> OnDecline;

	[Token(Token = "0x60004FA")]
	[Address(RVA = "0xB54718", Offset = "0xB54718", VA = "0xB54718")]
	public void Show(string title, string body, string prefill, UnityAction<string> onAccept, UnityAction<string> onDecline)
	{
	}

	[Token(Token = "0x60004FB")]
	[Address(RVA = "0xB54810", Offset = "0xB54810", VA = "0xB54810")]
	public void BtnAccept()
	{
	}

	[Token(Token = "0x60004FC")]
	[Address(RVA = "0xB54854", Offset = "0xB54854", VA = "0xB54854")]
	public void BtnDecline()
	{
	}

	[Token(Token = "0x60004FD")]
	[Address(RVA = "0xB54898", Offset = "0xB54898", VA = "0xB54898")]
	public InputWindow()
	{
	}
}
[Token(Token = "0x200009D")]
public class NewMainUIController : MonoBehaviour
{
	[Token(Token = "0x200009E")]
	private enum UIState
	{
		[Token(Token = "0x40004BB")]
		home,
		[Token(Token = "0x40004BC")]
		settings,
		[Token(Token = "0x40004BD")]
		save,
		[Token(Token = "0x40004BE")]
		load
	}

	[Token(Token = "0x20000A4")]
	[CompilerGenerated]
	private sealed class <WaitForLoadSaveData>d__84 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40004CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40004CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40004CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Task<GameData> loadGameData;

		[Token(Token = "0x40004D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public NewMainUIController <>4__this;

		[Token(Token = "0x170000A2")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000553")]
			[Address(RVA = "0xB5A104", Offset = "0xB5A104", VA = "0xB5A104", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A3")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000555")]
			[Address(RVA = "0xB5A14C", Offset = "0xB5A14C", VA = "0xB5A14C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000550")]
		[Address(RVA = "0xB59E14", Offset = "0xB59E14", VA = "0xB59E14")]
		[DebuggerHidden]
		public <WaitForLoadSaveData>d__84(int <>1__state)
		{
		}

		[Token(Token = "0x6000551")]
		[Address(RVA = "0xB59E3C", Offset = "0xB59E3C", VA = "0xB59E3C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000552")]
		[Address(RVA = "0xB59E40", Offset = "0xB59E40", VA = "0xB59E40", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000554")]
		[Address(RVA = "0xB5A10C", Offset = "0xB5A10C", VA = "0xB5A10C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000478")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private UIState curState;

	[Token(Token = "0x4000479")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Header("Misc")]
	[SerializeField]
	private UnityEvent OnOpen;

	[Token(Token = "0x400047A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private UnityEvent OnClose;

	[Token(Token = "0x400047B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private ConfirmWindow ConfirmWindow;

	[Token(Token = "0x400047C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private InputWindow RenameWindow;

	[Token(Token = "0x400047D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Header("State change events")]
	[SerializeField]
	private UnityEvent OnStateHome;

	[Token(Token = "0x400047E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private UnityEvent OnStateSettings;

	[Token(Token = "0x400047F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private UnityEvent OnStateSave;

	[Token(Token = "0x4000480")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private UnityEvent OnStateLoad;

	[Token(Token = "0x4000481")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public AudioSet teleportSound;

	[Token(Token = "0x4000482")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private GameObject LanguageLockOnBtn;

	[Token(Token = "0x4000483")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private GameObject LanguageLockOffBtn;

	[Token(Token = "0x4000484")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[Header("Home")]
	[SerializeField]
	private TextMeshProUGUI GameSpeedTxt;

	[Token(Token = "0x4000485")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[Header("Home - stats")]
	[SerializeField]
	private TextMeshProUGUI StatDeityTypeTxt;

	[Token(Token = "0x4000486")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private TextMeshProUGUI StatCitiesTxt;

	[Token(Token = "0x4000487")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private TextMeshProUGUI StatKingdomsTxt;

	[Token(Token = "0x4000488")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	private TextMeshProUGUI StatHumansTxt;

	[Token(Token = "0x4000489")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	private TextMeshProUGUI StatHereticsTxt;

	[Token(Token = "0x400048A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[SerializeField]
	private TextMeshProUGUI StatFaithTxt;

	[Token(Token = "0x400048B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[SerializeField]
	private TextMeshProUGUI StatKarmaTxt;

	[Token(Token = "0x400048C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[SerializeField]
	private ObjNotifListUI ObjectivesList;

	[Token(Token = "0x400048D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[SerializeField]
	private ObjNotifListUI NotificationList;

	[Token(Token = "0x400048E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private int selectedKingdom;

	[Token(Token = "0x400048F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	private int selectedCity;

	[Token(Token = "0x4000490")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private List<Town> towns;

	[Token(Token = "0x4000491")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private SortedSet<Realm> realms;

	[Token(Token = "0x4000492")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	[Header("Home - city")]
	[SerializeField]
	private TextMeshProUGUI CityNameLbl;

	[Token(Token = "0x4000493")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	[SerializeField]
	private TextMeshProUGUI CityKingdomNameLbl;

	[Token(Token = "0x4000494")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	[SerializeField]
	private TextMeshProUGUI CityKingdomTypeLbl;

	[Token(Token = "0x4000495")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	[SerializeField]
	private StatisticsListUI CityStatList;

	[Token(Token = "0x4000496")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	[SerializeField]
	private Toggle CityButton;

	[Token(Token = "0x4000497")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private readonly List<Tuple<string, List<string>, List<string>>> cityScreenData;

	[Token(Token = "0x4000498")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private readonly List<Tuple<string, List<string>, List<string>>> kingdomScreenData;

	[Token(Token = "0x4000499")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	[SerializeField]
	[Header("Home - kingdom")]
	private TextMeshProUGUI KingdomNameLbl;

	[Token(Token = "0x400049A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	[SerializeField]
	private TextMeshProUGUI KingdomTypeLbl;

	[Token(Token = "0x400049B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	[SerializeField]
	private StatisticsListUI KingdomStatList;

	[Token(Token = "0x400049C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	[SerializeField]
	private Toggle KingdomButton;

	[Token(Token = "0x400049D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	[SerializeField]
	[Header("Save/Load")]
	private SaveSlotList SaveSlotList;

	[Token(Token = "0x400049E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	[SerializeField]
	private Button LoadBtn;

	[Token(Token = "0x400049F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public LocalizedSaveSlot selectedSaveSlotName;

	[Token(Token = "0x40004A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	private readonly List<string> saveNames;

	[Token(Token = "0x40004A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	private readonly List<UnityAction> saveActions;

	[Token(Token = "0x40004A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	private bool saveSlotsPopulated;

	[Token(Token = "0x40004A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	private Coroutine waitForLoadCoroutine;

	[Token(Token = "0x40004A4")]
	private const string NoValue = "-";

	[Token(Token = "0x40004A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	[Header("Settings")]
	[SerializeField]
	private Toggle SettingsSandboxTgl;

	[Token(Token = "0x40004A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	[SerializeField]
	private Toggle SettingsHeresyTgl;

	[Token(Token = "0x40004A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	[SerializeField]
	private Toggle SettingsDistastersTgl;

	[Token(Token = "0x40004A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	[SerializeField]
	private TextMeshProUGUI SettingsHeightTxt;

	[Token(Token = "0x40004A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	[SerializeField]
	private Toggle SettingsGrabCtrlTgl;

	[Token(Token = "0x40004AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	[SerializeField]
	private Toggle SettingsGrabMoveTgl;

	[Token(Token = "0x40004AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	[SerializeField]
	private Toggle SettingsGrabMove3DTgl;

	[Token(Token = "0x40004AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	[SerializeField]
	private Toggle SettingsGrabRotateTgl;

	[Token(Token = "0x40004AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	[SerializeField]
	private Toggle SettingsGrabScaleTgl;

	[Token(Token = "0x40004AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	[SerializeField]
	private Toggle SettingsGrabScaleInvTgl;

	[Token(Token = "0x40004AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	[SerializeField]
	private Toggle SettingsStickMoveTgl;

	[Token(Token = "0x40004B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
	[SerializeField]
	private Toggle SettingsStickSmoothRdio;

	[Token(Token = "0x40004B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
	[SerializeField]
	private Toggle SettingsStickTeleportRdio;

	[Token(Token = "0x40004B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
	[SerializeField]
	private Toggle SettingsStickRotTgl;

	[Token(Token = "0x40004B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
	[SerializeField]
	private Toggle SettingsStickRotInfRdio;

	[Token(Token = "0x40004B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
	[SerializeField]
	private Toggle SettingsStickRot15Rdio;

	[Token(Token = "0x40004B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
	[SerializeField]
	private Toggle SettingsStickRot30Rdio;

	[Token(Token = "0x40004B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
	[SerializeField]
	private Toggle SettingsStickRot45Rdio;

	[Token(Token = "0x40004B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
	[SerializeField]
	private Toggle SettingsStickRot90Rdio;

	[Token(Token = "0x40004B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
	[SerializeField]
	private Toggle SettingsGrabObjTriggerRdio;

	[Token(Token = "0x40004B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
	[SerializeField]
	private Toggle SettingsGrabObjGripRdio;

	[Token(Token = "0x60004FE")]
	[Address(RVA = "0xB4CA48", Offset = "0xB4CA48", VA = "0xB4CA48")]
	public void Reset()
	{
	}

	[Token(Token = "0x60004FF")]
	[Address(RVA = "0xB548A0", Offset = "0xB548A0", VA = "0xB548A0")]
	private void SetUIState(UIState state, bool force = false)
	{
	}

	[Token(Token = "0x6000500")]
	[Address(RVA = "0xB4CE0C", Offset = "0xB4CE0C", VA = "0xB4CE0C")]
	public void Open()
	{
	}

	[Token(Token = "0x6000501")]
	[Address(RVA = "0xB57568", Offset = "0xB57568", VA = "0xB57568")]
	public void Close()
	{
	}

	[Token(Token = "0x6000502")]
	[Address(RVA = "0xB4CF6C", Offset = "0xB4CF6C", VA = "0xB4CF6C")]
	public void SetNotifications(List<Notification> notif)
	{
	}

	[Token(Token = "0x6000503")]
	[Address(RVA = "0xB4D328", Offset = "0xB4D328", VA = "0xB4D328")]
	public void GenerateObjectives()
	{
	}

	[Token(Token = "0x6000504")]
	[Address(RVA = "0xB57584", Offset = "0xB57584", VA = "0xB57584")]
	private void SetObjectives(List<string> titles, List<string> data, List<UnityAction> unityActions)
	{
	}

	[Token(Token = "0x6000505")]
	[Address(RVA = "0xB575A0", Offset = "0xB575A0", VA = "0xB575A0")]
	public void BtnHome()
	{
	}

	[Token(Token = "0x6000506")]
	[Address(RVA = "0xB575AC", Offset = "0xB575AC", VA = "0xB575AC")]
	public void BtnLanguage()
	{
	}

	[Token(Token = "0x6000507")]
	[Address(RVA = "0xB57624", Offset = "0xB57624", VA = "0xB57624")]
	public void BtnLanguageLock(bool locked)
	{
	}

	[Token(Token = "0x6000508")]
	[Address(RVA = "0xB57680", Offset = "0xB57680", VA = "0xB57680")]
	public void BtnSettings()
	{
	}

	[Token(Token = "0x6000509")]
	[Address(RVA = "0xB5768C", Offset = "0xB5768C", VA = "0xB5768C")]
	public void BtnSave()
	{
	}

	[Token(Token = "0x600050A")]
	[Address(RVA = "0xB57698", Offset = "0xB57698", VA = "0xB57698")]
	public void BtnLoad()
	{
	}

	[Token(Token = "0x600050B")]
	[Address(RVA = "0xB576A4", Offset = "0xB576A4", VA = "0xB576A4")]
	public void BtnRestart()
	{
	}

	[Token(Token = "0x600050C")]
	[Address(RVA = "0xB57828", Offset = "0xB57828", VA = "0xB57828")]
	public void BtnQuit()
	{
	}

	[Token(Token = "0x600050D")]
	[Address(RVA = "0xB579AC", Offset = "0xB579AC", VA = "0xB579AC")]
	public void BtnClose()
	{
	}

	[Token(Token = "0x600050E")]
	[Address(RVA = "0xB5494C", Offset = "0xB5494C", VA = "0xB5494C")]
	private void LoadHomeScreenData()
	{
	}

	[Token(Token = "0x600050F")]
	[Address(RVA = "0xB55778", Offset = "0xB55778", VA = "0xB55778")]
	private void RefreshDeityRankDisplay()
	{
	}

	[Token(Token = "0x6000510")]
	[Address(RVA = "0xB579FC", Offset = "0xB579FC", VA = "0xB579FC")]
	public void BtnSelectNextKingdom()
	{
	}

	[Token(Token = "0x6000511")]
	[Address(RVA = "0xB57A6C", Offset = "0xB57A6C", VA = "0xB57A6C")]
	public void BtnSelectPrevKingdom()
	{
	}

	[Token(Token = "0x6000512")]
	[Address(RVA = "0xB57ADC", Offset = "0xB57ADC", VA = "0xB57ADC")]
	public void BtnSelectNextCity()
	{
	}

	[Token(Token = "0x6000513")]
	[Address(RVA = "0xB57B40", Offset = "0xB57B40", VA = "0xB57B40")]
	public void BtnSelectPrevCity()
	{
	}

	[Token(Token = "0x6000514")]
	[Address(RVA = "0xB57BA4", Offset = "0xB57BA4", VA = "0xB57BA4")]
	public void BtnRenameCity()
	{
	}

	[Token(Token = "0x6000515")]
	[Address(RVA = "0xB57DA4", Offset = "0xB57DA4", VA = "0xB57DA4")]
	public void BtnRenameKingdom()
	{
	}

	[Token(Token = "0x6000516")]
	[Address(RVA = "0xB57F48", Offset = "0xB57F48", VA = "0xB57F48")]
	public void BtnFocusCity()
	{
	}

	[Token(Token = "0x6000517")]
	[Address(RVA = "0xB582C8", Offset = "0xB582C8", VA = "0xB582C8")]
	public void BtnFocusKingdom()
	{
	}

	[Token(Token = "0x6000518")]
	[Address(RVA = "0xB58044", Offset = "0xB58044", VA = "0xB58044")]
	public void Focus(Vector3 position)
	{
	}

	[Token(Token = "0x6000519")]
	[Address(RVA = "0xB554E0", Offset = "0xB554E0", VA = "0xB554E0")]
	private void DisplayCityData()
	{
	}

	[Token(Token = "0x600051A")]
	[Address(RVA = "0xB559BC", Offset = "0xB559BC", VA = "0xB559BC")]
	public void OnCityScreenActivated()
	{
	}

	[Token(Token = "0x600051B")]
	[Address(RVA = "0xB55600", Offset = "0xB55600", VA = "0xB55600")]
	private void DisplayKingdomData()
	{
	}

	[Token(Token = "0x600051C")]
	[Address(RVA = "0xB566DC", Offset = "0xB566DC", VA = "0xB566DC")]
	public void OnKingdomScreenActivated()
	{
	}

	[Token(Token = "0x600051D")]
	[Address(RVA = "0xB556C8", Offset = "0xB556C8", VA = "0xB556C8")]
	private void RefreshGameSpeedLabel()
	{
	}

	[Token(Token = "0x600051E")]
	[Address(RVA = "0xB5836C", Offset = "0xB5836C", VA = "0xB5836C")]
	public void BtnGameSpeedSlower()
	{
	}

	[Token(Token = "0x600051F")]
	[Address(RVA = "0xB583CC", Offset = "0xB583CC", VA = "0xB583CC")]
	public void BtnGameSpeedReset()
	{
	}

	[Token(Token = "0x6000520")]
	[Address(RVA = "0xB5842C", Offset = "0xB5842C", VA = "0xB5842C")]
	public void BtnGameSpeedFaster()
	{
	}

	[Token(Token = "0x6000521")]
	[Address(RVA = "0xB553E0", Offset = "0xB553E0", VA = "0xB553E0")]
	private void LoadSaveScreenData()
	{
	}

	[Token(Token = "0x6000522")]
	[Address(RVA = "0xB5848C", Offset = "0xB5848C", VA = "0xB5848C")]
	public void SaveBtnSave()
	{
	}

	[Token(Token = "0x6000523")]
	[Address(RVA = "0xB4BA70", Offset = "0xB4BA70", VA = "0xB4BA70")]
	public void SelectSaveSlot(int i)
	{
	}

	[Token(Token = "0x6000524")]
	[Address(RVA = "0xB586EC", Offset = "0xB586EC", VA = "0xB586EC")]
	[IteratorStateMachine(typeof(<WaitForLoadSaveData>d__84))]
	private IEnumerator WaitForLoadSaveData(Task<GameData> loadGameData)
	{
		return null;
	}

	[Token(Token = "0x6000525")]
	[Address(RVA = "0xB5877C", Offset = "0xB5877C", VA = "0xB5877C")]
	public void BtnChangeSaveSlotName()
	{
	}

	[Token(Token = "0x6000526")]
	[Address(RVA = "0xB587E4", Offset = "0xB587E4", VA = "0xB587E4")]
	public void LoadBtnLoad()
	{
	}

	[Token(Token = "0x6000527")]
	[Address(RVA = "0xB54C34", Offset = "0xB54C34", VA = "0xB54C34")]
	private void LoadSettingsScreenData()
	{
	}

	[Token(Token = "0x6000528")]
	[Address(RVA = "0xB58968", Offset = "0xB58968", VA = "0xB58968")]
	public void BtnSettingsSandbox(bool value)
	{
	}

	[Token(Token = "0x6000529")]
	[Address(RVA = "0xB589D0", Offset = "0xB589D0", VA = "0xB589D0")]
	public void BtnSettingsHeresy(bool value)
	{
	}

	[Token(Token = "0x600052A")]
	[Address(RVA = "0xB58A2C", Offset = "0xB58A2C", VA = "0xB58A2C")]
	public void BtnSettingsDisaster(bool value)
	{
	}

	[Token(Token = "0x600052B")]
	[Address(RVA = "0xB58A88", Offset = "0xB58A88", VA = "0xB58A88")]
	public void BtnSettingsHeightIncrease()
	{
	}

	[Token(Token = "0x600052C")]
	[Address(RVA = "0xB58B7C", Offset = "0xB58B7C", VA = "0xB58B7C")]
	public void BtnSettingsHeightDecrease()
	{
	}

	[Token(Token = "0x600052D")]
	[Address(RVA = "0xB58C70", Offset = "0xB58C70", VA = "0xB58C70")]
	public void BtnSettingsPresetImmersion()
	{
	}

	[Token(Token = "0x600052E")]
	[Address(RVA = "0xB58ED4", Offset = "0xB58ED4", VA = "0xB58ED4")]
	public void BtnSettingsPresetComfort()
	{
	}

	[Token(Token = "0x600052F")]
	[Address(RVA = "0xB59138", Offset = "0xB59138", VA = "0xB59138")]
	public void BtnSettingsHelp()
	{
	}

	[Token(Token = "0x6000530")]
	[Address(RVA = "0xB591A8", Offset = "0xB591A8", VA = "0xB591A8")]
	public void BtnSettingsGrabCtrl(bool value)
	{
	}

	[Token(Token = "0x6000531")]
	[Address(RVA = "0xB59204", Offset = "0xB59204", VA = "0xB59204")]
	public void BtnSettingsGrabMove(bool value)
	{
	}

	[Token(Token = "0x6000532")]
	[Address(RVA = "0xB59260", Offset = "0xB59260", VA = "0xB59260")]
	public void BtnSettingsGrabMove3D(bool value)
	{
	}

	[Token(Token = "0x6000533")]
	[Address(RVA = "0xB592BC", Offset = "0xB592BC", VA = "0xB592BC")]
	public void BtnSettingsGrabRotate(bool value)
	{
	}

	[Token(Token = "0x6000534")]
	[Address(RVA = "0xB59318", Offset = "0xB59318", VA = "0xB59318")]
	public void BtnSettingsGrabScale(bool value)
	{
	}

	[Token(Token = "0x6000535")]
	[Address(RVA = "0xB59374", Offset = "0xB59374", VA = "0xB59374")]
	public void BtnSettingsGrabScaleInv(bool value)
	{
	}

	[Token(Token = "0x6000536")]
	[Address(RVA = "0xB593D0", Offset = "0xB593D0", VA = "0xB593D0")]
	public void BtnSettingsStickMove(bool value)
	{
	}

	[Token(Token = "0x6000537")]
	[Address(RVA = "0xB5942C", Offset = "0xB5942C", VA = "0xB5942C")]
	public void BtnSettingsStickSmooth(bool value)
	{
	}

	[Token(Token = "0x6000538")]
	[Address(RVA = "0xB59488", Offset = "0xB59488", VA = "0xB59488")]
	public void BtnSettingsStickTeleport(bool value)
	{
	}

	[Token(Token = "0x6000539")]
	[Address(RVA = "0xB594E4", Offset = "0xB594E4", VA = "0xB594E4")]
	public void BtnSettingsStickRot(bool value)
	{
	}

	[Token(Token = "0x600053A")]
	[Address(RVA = "0xB59540", Offset = "0xB59540", VA = "0xB59540")]
	public void BtnSettingsStickRotInf(bool value)
	{
	}

	[Token(Token = "0x600053B")]
	[Address(RVA = "0xB595AC", Offset = "0xB595AC", VA = "0xB595AC")]
	public void BtnSettingsStickRot15(bool value)
	{
	}

	[Token(Token = "0x600053C")]
	[Address(RVA = "0xB59618", Offset = "0xB59618", VA = "0xB59618")]
	public void BtnSettingsStickRot30(bool value)
	{
	}

	[Token(Token = "0x600053D")]
	[Address(RVA = "0xB59684", Offset = "0xB59684", VA = "0xB59684")]
	public void BtnSettingsStickRot45(bool value)
	{
	}

	[Token(Token = "0x600053E")]
	[Address(RVA = "0xB596F0", Offset = "0xB596F0", VA = "0xB596F0")]
	public void BtnSettingsStickRot90(bool value)
	{
	}

	[Token(Token = "0x600053F")]
	[Address(RVA = "0xB5975C", Offset = "0xB5975C", VA = "0xB5975C")]
	public void BtnSettingsGrabObjTrigger(bool value)
	{
	}

	[Token(Token = "0x6000540")]
	[Address(RVA = "0xB597B8", Offset = "0xB597B8", VA = "0xB597B8")]
	public void BtnSettingsGrabObjGrip(bool value)
	{
	}

	[Token(Token = "0x6000541")]
	[Address(RVA = "0xB59814", Offset = "0xB59814", VA = "0xB59814")]
	public NewMainUIController()
	{
	}
}
[Token(Token = "0x20000A5")]
public class ObjNotifListUI : MonoBehaviour
{
	[Token(Token = "0x20000A6")]
	[CompilerGenerated]
	private sealed class <DelayedListUpdateEvent>d__12 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40004D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40004DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40004DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ObjNotifListUI <>4__this;

		[Token(Token = "0x40004DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LayoutGroup layout;

		[Token(Token = "0x170000A4")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600055F")]
			[Address(RVA = "0xB5ACD0", Offset = "0xB5ACD0", VA = "0xB5ACD0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A5")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000561")]
			[Address(RVA = "0xB5AD18", Offset = "0xB5AD18", VA = "0xB5AD18", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600055C")]
		[Address(RVA = "0xB5AA20", Offset = "0xB5AA20", VA = "0xB5AA20")]
		[DebuggerHidden]
		public <DelayedListUpdateEvent>d__12(int <>1__state)
		{
		}

		[Token(Token = "0x600055D")]
		[Address(RVA = "0xB5AB58", Offset = "0xB5AB58", VA = "0xB5AB58", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600055E")]
		[Address(RVA = "0xB5AB5C", Offset = "0xB5AB5C", VA = "0xB5AB5C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000560")]
		[Address(RVA = "0xB5ACD8", Offset = "0xB5ACD8", VA = "0xB5ACD8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40004D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject ListEntryToInstantiate;

	[Token(Token = "0x40004D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private string BtnIconName;

	[Token(Token = "0x40004D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private string TitleLblName;

	[Token(Token = "0x40004D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private string DataLblName;

	[Token(Token = "0x40004D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private bool StripHTMLTags;

	[Token(Token = "0x40004D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	[SerializeField]
	private bool InverseListDirection;

	[Token(Token = "0x40004D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
	[SerializeField]
	private bool FlashLayoutGroups;

	[Token(Token = "0x40004D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private readonly List<GameObject> entries;

	[Token(Token = "0x6000556")]
	[Address(RVA = "0xB5A154", Offset = "0xB5A154", VA = "0xB5A154")]
	private static string StripHtml(string input)
	{
		return null;
	}

	[Token(Token = "0x6000557")]
	[Address(RVA = "0xB5A1F0", Offset = "0xB5A1F0", VA = "0xB5A1F0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000558")]
	[Address(RVA = "0xB5A210", Offset = "0xB5A210", VA = "0xB5A210")]
	public void DisplayList(List<string> titles, List<string> data, List<UnityAction> onclick)
	{
	}

	[Token(Token = "0x6000559")]
	[Address(RVA = "0xB5A8EC", Offset = "0xB5A8EC", VA = "0xB5A8EC")]
	public void FiddleContentSizeAndLayout()
	{
	}

	[Token(Token = "0x600055A")]
	[Address(RVA = "0xB5A990", Offset = "0xB5A990", VA = "0xB5A990")]
	[IteratorStateMachine(typeof(<DelayedListUpdateEvent>d__12))]
	private IEnumerator DelayedListUpdateEvent(LayoutGroup layout)
	{
		return null;
	}

	[Token(Token = "0x600055B")]
	[Address(RVA = "0xB5AA48", Offset = "0xB5AA48", VA = "0xB5AA48")]
	public ObjNotifListUI()
	{
	}
}
[Token(Token = "0x20000A7")]
public class OnBoolEvent : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x20000A8")]
	public class BoolEvent : UnityEvent<bool>
	{
		[Token(Token = "0x6000564")]
		[Address(RVA = "0xB5ADB0", Offset = "0xB5ADB0", VA = "0xB5ADB0")]
		public BoolEvent()
		{
		}
	}

	[Token(Token = "0x40004DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private bool Invert;

	[Token(Token = "0x40004DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private UnityEvent OnTrue;

	[Token(Token = "0x40004DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private UnityEvent OnFalse;

	[Token(Token = "0x40004E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private BoolEvent OnValue;

	[Token(Token = "0x6000562")]
	[Address(RVA = "0xB5AD20", Offset = "0xB5AD20", VA = "0xB5AD20")]
	public void DoValue(bool val)
	{
	}

	[Token(Token = "0x6000563")]
	[Address(RVA = "0xB5ADA8", Offset = "0xB5ADA8", VA = "0xB5ADA8")]
	public OnBoolEvent()
	{
	}
}
[Token(Token = "0x20000A9")]
public class SaveSlotList : MonoBehaviour
{
	[Token(Token = "0x20000AD")]
	[CompilerGenerated]
	private sealed class <DelayedUpdateEvent>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40004EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40004EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40004ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SaveSlotList <>4__this;

		[Token(Token = "0x170000A6")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000572")]
			[Address(RVA = "0xB5B874", Offset = "0xB5B874", VA = "0xB5B874", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A7")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000574")]
			[Address(RVA = "0xB5B8BC", Offset = "0xB5B8BC", VA = "0xB5B8BC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600056F")]
		[Address(RVA = "0xB5B6DC", Offset = "0xB5B6DC", VA = "0xB5B6DC")]
		[DebuggerHidden]
		public <DelayedUpdateEvent>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x6000570")]
		[Address(RVA = "0xB5B7B8", Offset = "0xB5B7B8", VA = "0xB5B7B8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000571")]
		[Address(RVA = "0xB5B7BC", Offset = "0xB5B7BC", VA = "0xB5B7BC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000573")]
		[Address(RVA = "0xB5B87C", Offset = "0xB5B87C", VA = "0xB5B87C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40004E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject AutoSaveItem;

	[Token(Token = "0x40004E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject ListItemToInstantiate;

	[Token(Token = "0x40004E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private UnityEvent OnListUpdate;

	[Token(Token = "0x40004E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Header("Use context menu to pregen")]
	[SerializeField]
	private int PregenAmount;

	[Token(Token = "0x40004E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private List<GameObject> entries;

	[Token(Token = "0x6000565")]
	[Address(RVA = "0xB5ADF8", Offset = "0xB5ADF8", VA = "0xB5ADF8")]
	[ContextMenu("Pregenerate entries")]
	private void Pregenerate()
	{
	}

	[Token(Token = "0x6000566")]
	[Address(RVA = "0xB5AFE8", Offset = "0xB5AFE8", VA = "0xB5AFE8")]
	public void PopulateList(List<string> text, UnityAction<int> OnSlotClick)
	{
	}

	[Token(Token = "0x6000567")]
	[Address(RVA = "0xB5B668", Offset = "0xB5B668", VA = "0xB5B668")]
	[IteratorStateMachine(typeof(<DelayedUpdateEvent>d__7))]
	private IEnumerator DelayedUpdateEvent()
	{
		return null;
	}

	[Token(Token = "0x6000568")]
	[Address(RVA = "0xB5B704", Offset = "0xB5B704", VA = "0xB5B704")]
	public SaveSlotList()
	{
	}
}
[Token(Token = "0x20000AE")]
public class StatisticsListUI : MonoBehaviour, ILocalizedText
{
	[Token(Token = "0x40004EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject CategoryLivePrefab;

	[Token(Token = "0x40004EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private string CategoryTitleObjName;

	[Token(Token = "0x40004F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private string CategoryEntryObjName;

	[Token(Token = "0x40004F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private string CategoryFieldPreadd;

	[Token(Token = "0x40004F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private string EntryLabelObjName;

	[Token(Token = "0x40004F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private string EntryStatObjName;

	[Token(Token = "0x40004F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private bool StripHTMLTags;

	[Token(Token = "0x40004F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private UnityEvent OnListUpdate;

	[Token(Token = "0x40004F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private List<GameObject> entries;

	[Token(Token = "0x40004F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool localizeFields;

	[Token(Token = "0x40004F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private List<Tuple<string, List<string>, List<string>>> savedData;

	[Token(Token = "0x6000575")]
	[Address(RVA = "0xB5B8C4", Offset = "0xB5B8C4", VA = "0xB5B8C4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000576")]
	[Address(RVA = "0xB5B934", Offset = "0xB5B934", VA = "0xB5B934")]
	public void DisplayList(List<Tuple<string, List<string>, List<string>>> data, bool localize = false)
	{
	}

	[Token(Token = "0x6000577")]
	[Address(RVA = "0xB5C2E0", Offset = "0xB5C2E0", VA = "0xB5C2E0", Slot = "4")]
	public void RefreshLabel()
	{
	}

	[Token(Token = "0x6000578")]
	[Address(RVA = "0xB5C2F8", Offset = "0xB5C2F8", VA = "0xB5C2F8")]
	public StatisticsListUI()
	{
	}
}
[Token(Token = "0x20000AF")]
public class TextMeshColourChanger : MonoBehaviour
{
	[Token(Token = "0x40004F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private List<Color> Colours;

	[Token(Token = "0x40004FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private TextMeshProUGUI TextFieldOverride;

	[Token(Token = "0x40004FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private TextMeshProUGUI field;

	[Token(Token = "0x6000579")]
	[Address(RVA = "0xB5C3F8", Offset = "0xB5C3F8", VA = "0xB5C3F8")]
	private void Awake()
	{
	}

	[Token(Token = "0x600057A")]
	[Address(RVA = "0xB5C458", Offset = "0xB5C458", VA = "0xB5C458")]
	public void SetColor(int i)
	{
	}

	[Token(Token = "0x600057B")]
	[Address(RVA = "0xB5C61C", Offset = "0xB5C61C", VA = "0xB5C61C")]
	public TextMeshColourChanger()
	{
	}
}
[Token(Token = "0x20000B0")]
public class MinMaxAttribute : PropertyAttribute
{
	[Token(Token = "0x40004FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float MinLimit;

	[Token(Token = "0x40004FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float MaxLimit;

	[Token(Token = "0x40004FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool ShowEditRange;

	[Token(Token = "0x40004FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	public bool ShowDebugValues;

	[Token(Token = "0x600057C")]
	[Address(RVA = "0xB5C624", Offset = "0xB5C624", VA = "0xB5C624")]
	public MinMaxAttribute(int min, int max)
	{
	}
}
[Token(Token = "0x20000B1")]
public class Moon : MonoBehaviour
{
	[Token(Token = "0x4000500")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Material snowMaterial;

	[Token(Token = "0x4000501")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Material grassMaterial;

	[Token(Token = "0x4000502")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Material waterMaterial;

	[Token(Token = "0x4000503")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Material sakuraMaterial;

	[Token(Token = "0x4000504")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Material lavaMaterial;

	[Token(Token = "0x4000505")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Material stoneMaterial;

	[Token(Token = "0x4000506")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Material desertMaterial;

	[Token(Token = "0x4000507")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Material swampMaterial;

	[Token(Token = "0x4000508")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public MeshRenderer meshRenderer;

	[Token(Token = "0x4000509")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public AudioSource audioSource;

	[Token(Token = "0x400050A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Material groundMaterial;

	[Token(Token = "0x400050B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Material holeMaterial;

	[Token(Token = "0x600057D")]
	[Address(RVA = "0xB5C660", Offset = "0xB5C660", VA = "0xB5C660")]
	private void Start()
	{
	}

	[Token(Token = "0x600057E")]
	[Address(RVA = "0xB5C750", Offset = "0xB5C750", VA = "0xB5C750")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600057F")]
	[Address(RVA = "0xB5C690", Offset = "0xB5C690", VA = "0xB5C690")]
	private void UpdateMaterials()
	{
	}

	[Token(Token = "0x6000580")]
	[Address(RVA = "0xB5C990", Offset = "0xB5C990", VA = "0xB5C990")]
	public Moon()
	{
	}
}
[Token(Token = "0x20000B2")]
public class MyMenuItem : InteractableObject, ILocalizedText
{
	[Token(Token = "0x400050C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	public MenuButton Button;

	[Token(Token = "0x400050D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public GameObject ActivatedVisual;

	[Token(Token = "0x400050E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public GameObject DesactivatedVisual;

	[Token(Token = "0x400050F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private TextMeshPro _label;

	[Token(Token = "0x4000510")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public DeityRank Rank;

	[Token(Token = "0x4000511")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public AudioClip useSound;

	[Token(Token = "0x4000512")]
	private const string ROTATION = "rotation";

	[Token(Token = "0x4000513")]
	private const string MOVEMENT = "movement";

	[Token(Token = "0x4000514")]
	private const string Y_AXIS_MOVEMENT = "y_axis_movement";

	[Token(Token = "0x4000515")]
	private const string SCALE = "scale";

	[Token(Token = "0x4000516")]
	private const string REVERSEDSCALING = "reversed_scaling";

	[Token(Token = "0x4000517")]
	private const string SANDBOX = "sandbox";

	[Token(Token = "0x4000518")]
	private const string MENU = "menu_";

	[Token(Token = "0x4000519")]
	private const string ENABLE = "_enable";

	[Token(Token = "0x400051A")]
	private const string DISABLE = "_disable";

	[Token(Token = "0x400051B")]
	private const string QUALITY = "quality_";

	[Token(Token = "0x400051C")]
	private const string LANGUAGE = "language";

	[Token(Token = "0x400051D")]
	private const string HERESY = "heresy";

	[Token(Token = "0x400051E")]
	private const string DISASTERS = "disasters";

	[Token(Token = "0x400051F")]
	private const string GRIPTOGRAB = "grip_to_grab";

	[Token(Token = "0x4000520")]
	private const string LANGUAGE_NAME = "language_name";

	[Token(Token = "0x6000581")]
	[Address(RVA = "0xB5C998", Offset = "0xB5C998", VA = "0xB5C998")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000582")]
	[Address(RVA = "0xB5CAA8", Offset = "0xB5CAA8", VA = "0xB5CAA8", Slot = "4")]
	public override void Start()
	{
	}

	[Token(Token = "0x6000583")]
	[Address(RVA = "0xB5CF80", Offset = "0xB5CF80", VA = "0xB5CF80")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000584")]
	[Address(RVA = "0xB5CFDC", Offset = "0xB5CFDC", VA = "0xB5CFDC")]
	private void RefreshLabel(bool currentValue, string Suffix)
	{
	}

	[Token(Token = "0x6000585")]
	[Address(RVA = "0xB5D130", Offset = "0xB5D130", VA = "0xB5D130")]
	private void RefreshQualityLabel()
	{
	}

	[Token(Token = "0x6000586")]
	[Address(RVA = "0xB5D1FC", Offset = "0xB5D1FC", VA = "0xB5D1FC")]
	private void RefreshLanguageLabel()
	{
	}

	[Token(Token = "0x6000587")]
	[Address(RVA = "0xB5D2E8", Offset = "0xB5D2E8", VA = "0xB5D2E8")]
	private void RefreshVisual(bool currentValue)
	{
	}

	[Token(Token = "0x6000588")]
	[Address(RVA = "0xB5D330", Offset = "0xB5D330", VA = "0xB5D330", Slot = "7")]
	public override bool Use(Interactor interactor)
	{
		return default(bool);
	}

	[Token(Token = "0x6000589")]
	[Address(RVA = "0xB5D0C8", Offset = "0xB5D0C8", VA = "0xB5D0C8")]
	private static string EnabledText(bool value)
	{
		return null;
	}

	[Token(Token = "0x600058A")]
	[Address(RVA = "0xB5CB50", Offset = "0xB5CB50", VA = "0xB5CB50", Slot = "11")]
	public void RefreshLabel()
	{
	}

	[Token(Token = "0x600058B")]
	[Address(RVA = "0xB5DD74", Offset = "0xB5DD74", VA = "0xB5DD74")]
	public MyMenuItem()
	{
	}
}
[Token(Token = "0x20000B3")]
public class ControllerActionReceiver : MonoBehaviour
{
	[Token(Token = "0x4000521")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Interactor interactor;

	[Token(Token = "0x4000522")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject selectorPrefab;

	[Token(Token = "0x4000523")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public HandAnimator handAnimator;

	[Token(Token = "0x4000524")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public TeleportDestinationPointer teleportDestinationPointer;

	[Token(Token = "0x4000525")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public CurvedUILaserBeam uiLaserBeam;

	[Token(Token = "0x4000526")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private GameObject miracleMenuInstance;

	[Token(Token = "0x4000527")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static float lastLookBack;

	[Token(Token = "0x600058C")]
	[Address(RVA = "0xB5DD7C", Offset = "0xB5DD7C", VA = "0xB5DD7C")]
	public void ToggleMenu()
	{
	}

	[Token(Token = "0x600058D")]
	[Address(RVA = "0xB5DF3C", Offset = "0xB5DF3C", VA = "0xB5DF3C")]
	public void ToggleMiracleMenu()
	{
	}

	[Token(Token = "0x600058E")]
	[Address(RVA = "0xB5E22C", Offset = "0xB5E22C", VA = "0xB5E22C")]
	public void Grab()
	{
	}

	[Token(Token = "0x600058F")]
	[Address(RVA = "0xB5E25C", Offset = "0xB5E25C", VA = "0xB5E25C")]
	public void Release()
	{
	}

	[Token(Token = "0x6000590")]
	[Address(RVA = "0xB5E28C", Offset = "0xB5E28C", VA = "0xB5E28C")]
	public void Squeeze()
	{
	}

	[Token(Token = "0x6000591")]
	[Address(RVA = "0xB5E2CC", Offset = "0xB5E2CC", VA = "0xB5E2CC")]
	public bool StartTeleport()
	{
		return default(bool);
	}

	[Token(Token = "0x6000592")]
	[Address(RVA = "0xB5E31C", Offset = "0xB5E31C", VA = "0xB5E31C")]
	public Transform SelectTeleportDestination()
	{
		return null;
	}

	[Token(Token = "0x6000593")]
	[Address(RVA = "0xB5E34C", Offset = "0xB5E34C", VA = "0xB5E34C")]
	public bool Use()
	{
		return default(bool);
	}

	[Token(Token = "0x6000594")]
	[Address(RVA = "0xB5E368", Offset = "0xB5E368", VA = "0xB5E368")]
	public void StopUsing()
	{
	}

	[Token(Token = "0x6000595")]
	[Address(RVA = "0xB5E384", Offset = "0xB5E384", VA = "0xB5E384")]
	public void CancelPointers()
	{
	}

	[Token(Token = "0x6000596")]
	[Address(RVA = "0xB5E3A0", Offset = "0xB5E3A0", VA = "0xB5E3A0")]
	public void CloseOpenedMenus()
	{
	}

	[Token(Token = "0x6000597")]
	[Address(RVA = "0xB5E474", Offset = "0xB5E474", VA = "0xB5E474")]
	public void InteractUI()
	{
	}

	[Token(Token = "0x6000598")]
	[Address(RVA = "0xB5E57C", Offset = "0xB5E57C", VA = "0xB5E57C")]
	public void StopInteractUI()
	{
	}

	[Token(Token = "0x6000599")]
	[Address(RVA = "0xB5E5D0", Offset = "0xB5E5D0", VA = "0xB5E5D0")]
	public void Hide()
	{
	}

	[Token(Token = "0x600059A")]
	[Address(RVA = "0xB5E5FC", Offset = "0xB5E5FC", VA = "0xB5E5FC")]
	public void Show()
	{
	}

	[Token(Token = "0x600059B")]
	[Address(RVA = "0xB5E628", Offset = "0xB5E628", VA = "0xB5E628")]
	public ControllerActionReceiver()
	{
	}
}
[Token(Token = "0x20000B4")]
public class InterractableKinematicObject : InteractableObject
{
	[Token(Token = "0x4000528")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private KinematicManager manager;

	[Token(Token = "0x600059C")]
	[Address(RVA = "0xB5E630", Offset = "0xB5E630", VA = "0xB5E630", Slot = "4")]
	public override void Start()
	{
	}

	[Token(Token = "0x600059D")]
	[Address(RVA = "0xB5E73C", Offset = "0xB5E73C", VA = "0xB5E73C", Slot = "5")]
	public override void Grab(Interactor interactor)
	{
	}

	[Token(Token = "0x600059E")]
	[Address(RVA = "0xB5EA40", Offset = "0xB5EA40", VA = "0xB5EA40", Slot = "6")]
	public override void Throw(Interactor interactor)
	{
	}

	[Token(Token = "0x600059F")]
	[Address(RVA = "0xB5EBD4", Offset = "0xB5EBD4", VA = "0xB5EBD4")]
	public InterractableKinematicObject()
	{
	}
}
[Token(Token = "0x20000B5")]
[RequireComponent(typeof(Rigidbody))]
public class KinematicManager : MonoBehaviour
{
	[Token(Token = "0x4000529")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioSet grabAudioSet;

	[Token(Token = "0x400052A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioSet groundAudioSet;

	[Token(Token = "0x400052B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public InteractableObject interactableObject;

	[Token(Token = "0x400052C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Rigidbody rb;

	[Token(Token = "0x400052D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private IKinematicObject kinematicObjectInternal;

	[Token(Token = "0x400052E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float throwTime;

	[Token(Token = "0x400052F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private AnimalSpawner _animalSpawner;

	[Token(Token = "0x4000530")]
	private const float GracePeriod = 0.05f;

	[Token(Token = "0x4000531")]
	private const float SqrSpeed = 0.040000003f;

	[Token(Token = "0x4000532")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private int baseLayer;

	[Token(Token = "0x170000A8")]
	public IKinematicObject KinematicObject
	{
		[Token(Token = "0x60005A1")]
		[Address(RVA = "0xB5EBE4", Offset = "0xB5EBE4", VA = "0xB5EBE4")]
		get
		{
			return null;
		}
		[Token(Token = "0x60005A0")]
		[Address(RVA = "0xB5EBDC", Offset = "0xB5EBDC", VA = "0xB5EBDC")]
		private set
		{
		}
	}

	[Token(Token = "0x60005A2")]
	[Address(RVA = "0xB5ECBC", Offset = "0xB5ECBC", VA = "0xB5ECBC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60005A3")]
	[Address(RVA = "0xB5ED44", Offset = "0xB5ED44", VA = "0xB5ED44")]
	private void Start()
	{
	}

	[Token(Token = "0x60005A4")]
	[Address(RVA = "0xB5ED9C", Offset = "0xB5ED9C", VA = "0xB5ED9C")]
	private void Update()
	{
	}

	[Token(Token = "0x60005A5")]
	[Address(RVA = "0xB5EB90", Offset = "0xB5EB90", VA = "0xB5EB90")]
	public void Throw()
	{
	}

	[Token(Token = "0x60005A6")]
	[Address(RVA = "0xB5E88C", Offset = "0xB5E88C", VA = "0xB5E88C")]
	public void Grab()
	{
	}

	[Token(Token = "0x60005A7")]
	[Address(RVA = "0xB5EED0", Offset = "0xB5EED0", VA = "0xB5EED0")]
	private void Grounded()
	{
	}

	[Token(Token = "0x60005A8")]
	[Address(RVA = "0xB5E704", Offset = "0xB5E704", VA = "0xB5E704")]
	public void SetKinematicAndDisableInterpolation(bool value)
	{
	}

	[Token(Token = "0x60005A9")]
	[Address(RVA = "0xB5F190", Offset = "0xB5F190", VA = "0xB5F190")]
	public KinematicManager()
	{
	}
}
[Token(Token = "0x20000B6")]
public class NameAndDetailDisplay : MonoBehaviour
{
	[Token(Token = "0x4000533")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool init;

	[Token(Token = "0x4000534")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Transform target;

	[Token(Token = "0x4000535")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Transform thisTransform;

	[Token(Token = "0x60005AA")]
	[Address(RVA = "0xB5F1A8", Offset = "0xB5F1A8", VA = "0xB5F1A8")]
	private void Awake()
	{
	}

	[Token(Token = "0x60005AB")]
	[Address(RVA = "0xB5F1CC", Offset = "0xB5F1CC", VA = "0xB5F1CC")]
	private void Update()
	{
	}

	[Token(Token = "0x60005AC")]
	[Address(RVA = "0xB5F344", Offset = "0xB5F344", VA = "0xB5F344")]
	private void SetRotation()
	{
	}

	[Token(Token = "0x60005AD")]
	[Address(RVA = "0xB5F3CC", Offset = "0xB5F3CC", VA = "0xB5F3CC")]
	public NameAndDetailDisplay()
	{
	}
}
[Token(Token = "0x20000B7")]
[CreateAssetMenu(menuName = "Name Manager")]
public class NameManager : ScriptableObject
{
	[Token(Token = "0x4000536")]
	private const string CityFilename = "city_names.json";

	[Token(Token = "0x4000537")]
	private const string KingdomFilename = "kingdom_names.json";

	[Token(Token = "0x4000538")]
	private const string EuropeanMaleFilename = "european_first_names_male.txt";

	[Token(Token = "0x4000539")]
	private const string EuropeanFemaleFilename = "european_first_names_female.txt";

	[Token(Token = "0x400053A")]
	private const string AfricanMaleFilename = "african_first_names_male.txt";

	[Token(Token = "0x400053B")]
	private const string AfricanFemaleFilename = "african_first_names_female.txt";

	[Token(Token = "0x400053C")]
	private const string AsianMaleFilename = "asian_first_names_male.txt";

	[Token(Token = "0x400053D")]
	private const string AsianFemaleFilename = "asian_first_names_female.txt";

	[Token(Token = "0x400053E")]
	private const string NordicMaleFilename = "nordic_first_names_male.txt";

	[Token(Token = "0x400053F")]
	private const string NordicFemaleFilename = "nordic_first_names_female.txt";

	[Token(Token = "0x4000540")]
	private const string OrientalMaleFilename = "oriental_first_names_male.txt";

	[Token(Token = "0x4000541")]
	private const string OrientalFemaleFilename = "oriental_first_names_female.txt";

	[Token(Token = "0x4000542")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private NameCollection cityNames;

	[Token(Token = "0x4000543")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private NameCollection kingdomNames;

	[Token(Token = "0x4000544")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private List<string> europeanMaleFirstNames;

	[Token(Token = "0x4000545")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private List<string> europeanFemaleFirstNames;

	[Token(Token = "0x4000546")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private List<string> africanMaleFirstNames;

	[Token(Token = "0x4000547")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private List<string> africanFemaleFirstNames;

	[Token(Token = "0x4000548")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private List<string> asianMaleFirstNames;

	[Token(Token = "0x4000549")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private List<string> asianFemaleFirstNames;

	[Token(Token = "0x400054A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private List<string> nordicMaleFirstNames;

	[Token(Token = "0x400054B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private List<string> nordicFemaleFirstNames;

	[Token(Token = "0x400054C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private List<string> orientalMaleFirstNames;

	[Token(Token = "0x400054D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private List<string> orientalFemaleFirstNames;

	[Token(Token = "0x400054E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private readonly HashSet<string> existingCityNames;

	[Token(Token = "0x400054F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private readonly HashSet<string> existingKingdomNames;

	[Token(Token = "0x60005AE")]
	[Address(RVA = "0xB5F3D4", Offset = "0xB5F3D4", VA = "0xB5F3D4")]
	public void Init()
	{
	}

	[Token(Token = "0x60005AF")]
	[Address(RVA = "0xB5F68C", Offset = "0xB5F68C", VA = "0xB5F68C")]
	private void ReloadKingdomNames()
	{
	}

	[Token(Token = "0x60005B0")]
	[Address(RVA = "0xB5F744", Offset = "0xB5F744", VA = "0xB5F744")]
	private static List<string> LoadList(string filename, string folder)
	{
		return null;
	}

	[Token(Token = "0x60005B1")]
	[Address(RVA = "0xB5F93C", Offset = "0xB5F93C", VA = "0xB5F93C")]
	public string GetCityName(TownType townType)
	{
		return null;
	}

	[Token(Token = "0x60005B2")]
	[Address(RVA = "0xB5FC1C", Offset = "0xB5FC1C", VA = "0xB5FC1C")]
	public string GetKingdomName(TownType townType)
	{
		return null;
	}

	[Token(Token = "0x60005B3")]
	[Address(RVA = "0xB5F9C8", Offset = "0xB5F9C8", VA = "0xB5F9C8")]
	private static string GetNameFromList(List<string> list, HashSet<string> existingNames)
	{
		return null;
	}

	[Token(Token = "0x60005B4")]
	[Address(RVA = "0xB5FD8C", Offset = "0xB5FD8C", VA = "0xB5FD8C")]
	private static void RegisterName(string assignedName, HashSet<string> existingNames)
	{
	}

	[Token(Token = "0x60005B5")]
	[Address(RVA = "0xB5FDE4", Offset = "0xB5FDE4", VA = "0xB5FDE4")]
	public void RegisterCityName(string assignedName)
	{
	}

	[Token(Token = "0x60005B6")]
	[Address(RVA = "0xB5FDF4", Offset = "0xB5FDF4", VA = "0xB5FDF4")]
	public void RegisterRealmName(string realmName)
	{
	}

	[Token(Token = "0x60005B7")]
	[Address(RVA = "0xB5FE04", Offset = "0xB5FE04", VA = "0xB5FE04")]
	public void UnRegisterRealmName(string realmName)
	{
	}

	[Token(Token = "0x60005B8")]
	[Address(RVA = "0xB5FE5C", Offset = "0xB5FE5C", VA = "0xB5FE5C")]
	public string GetHumanFirstName(TownType civilisation, bool female)
	{
		return null;
	}

	[Token(Token = "0x60005B9")]
	[Address(RVA = "0xB5FF90", Offset = "0xB5FF90", VA = "0xB5FF90")]
	public NameManager()
	{
	}
}
[Token(Token = "0x20000B9")]
public class CanonsManager : MonoBehaviour
{
	[Token(Token = "0x4000552")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<GameObject> leftCanons;

	[Token(Token = "0x4000553")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<GameObject> rightCanons;

	[Token(Token = "0x60005BD")]
	[Address(RVA = "0xB60148", Offset = "0xB60148", VA = "0xB60148")]
	public CanonsManager()
	{
	}
}
[Token(Token = "0x20000BA")]
public class PirateShipAnimationController : MonoBehaviour
{
	[Token(Token = "0x4000554")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Animator pirateAnimator;

	[Token(Token = "0x4000555")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly int IsPickedUp;

	[Token(Token = "0x4000556")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static readonly int Prepare;

	[Token(Token = "0x4000557")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static readonly int Fire;

	[Token(Token = "0x4000558")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static readonly int Close;

	[Token(Token = "0x60005BE")]
	[Address(RVA = "0xB60150", Offset = "0xB60150", VA = "0xB60150")]
	[ContextMenu("Grab")]
	public void Grab()
	{
	}

	[Token(Token = "0x60005BF")]
	[Address(RVA = "0xB601C4", Offset = "0xB601C4", VA = "0xB601C4")]
	[ContextMenu("Throw")]
	public void Throw()
	{
	}

	[Token(Token = "0x60005C0")]
	[Address(RVA = "0xB60238", Offset = "0xB60238", VA = "0xB60238")]
	[ContextMenu("Open the hatch")]
	public void OpenHatch()
	{
	}

	[Token(Token = "0x60005C1")]
	[Address(RVA = "0xB602A8", Offset = "0xB602A8", VA = "0xB602A8")]
	[ContextMenu("Fire the canons")]
	public void FireCanon()
	{
	}

	[Token(Token = "0x60005C2")]
	[Address(RVA = "0xB60318", Offset = "0xB60318", VA = "0xB60318")]
	[ContextMenu("Close the hatch")]
	public void CloseHatch()
	{
	}

	[Token(Token = "0x60005C3")]
	[Address(RVA = "0xB60388", Offset = "0xB60388", VA = "0xB60388")]
	public PirateShipAnimationController()
	{
	}
}
[Token(Token = "0x20000BB")]
public class NeedsDisplay : MonoBehaviour
{
	[Token(Token = "0x4000559")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Configuration", order = 0)]
	public bool displaySpecificNeed;

	[Token(Token = "0x400055A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject sphere;

	[Token(Token = "0x400055B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject label;

	[Token(Token = "0x400055C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject importedResourceDisplay;

	[Token(Token = "0x400055D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject resized;

	[Token(Token = "0x400055E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject question;

	[Token(Token = "0x400055F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public TextMeshPro stockDisplay;

	[Token(Token = "0x4000560")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public TextFader stockDisplayFader;

	[Token(Token = "0x4000561")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public TextFader labelDisplayFader;

	[Token(Token = "0x4000562")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public TextFader importedResourceDisplayFader;

	[Token(Token = "0x4000563")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[Header("Resources", order = 1)]
	public GameObject alienTech;

	[Token(Token = "0x4000564")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public GameObject clothes;

	[Token(Token = "0x4000565")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public GameObject coal;

	[Token(Token = "0x4000566")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public GameObject copperIngot;

	[Token(Token = "0x4000567")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public GameObject copperOre;

	[Token(Token = "0x4000568")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public GameObject electronics;

	[Token(Token = "0x4000569")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public GameObject firearms;

	[Token(Token = "0x400056A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public GameObject food;

	[Token(Token = "0x400056B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public GameObject fur;

	[Token(Token = "0x400056C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public GameObject goldIngot;

	[Token(Token = "0x400056D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public GameObject goldOre;

	[Token(Token = "0x400056E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public GameObject ironIngot;

	[Token(Token = "0x400056F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public GameObject ironOre;

	[Token(Token = "0x4000570")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public GameObject jewels;

	[Token(Token = "0x4000571")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public GameObject knowledge;

	[Token(Token = "0x4000572")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public GameObject meat;

	[Token(Token = "0x4000573")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public GameObject oil;

	[Token(Token = "0x4000574")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public GameObject steel;

	[Token(Token = "0x4000575")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public GameObject tools;

	[Token(Token = "0x4000576")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public GameObject stone;

	[Token(Token = "0x4000577")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public GameObject uranium;

	[Token(Token = "0x4000578")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public GameObject water;

	[Token(Token = "0x4000579")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public GameObject weapons;

	[Token(Token = "0x400057A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public GameObject wood;

	[Token(Token = "0x400057B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	public IResourceConsumer ResourceConsumer;

	[Token(Token = "0x400057C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private ResourceType displayedNeed;

	[Token(Token = "0x400057D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
	private StockLevel displayedStockLevel;

	[Token(Token = "0x400057E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private bool init;

	[Token(Token = "0x400057F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private Transform resizedTransform;

	[Token(Token = "0x4000580")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private GameObject[] children;

	[Token(Token = "0x4000581")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	private LocalizedText labelLocalizedText;

	[Token(Token = "0x4000582")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	private GameObject enabledChild;

	[Token(Token = "0x4000583")]
	private const string Blank = "";

	[Token(Token = "0x4000584")]
	private const string Stock = "{0}/{1}";

	[Token(Token = "0x4000585")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	private int? currentStock;

	[Token(Token = "0x60005C5")]
	[Address(RVA = "0xB6048C", Offset = "0xB6048C", VA = "0xB6048C")]
	private void Start()
	{
	}

	[Token(Token = "0x60005C6")]
	[Address(RVA = "0xB60670", Offset = "0xB60670", VA = "0xB60670")]
	private void Update()
	{
	}

	[Token(Token = "0x60005C7")]
	[Address(RVA = "0xB60D60", Offset = "0xB60D60", VA = "0xB60D60")]
	private void EnableChild(GameObject child)
	{
	}

	[Token(Token = "0x60005C8")]
	[Address(RVA = "0xB60DA0", Offset = "0xB60DA0", VA = "0xB60DA0")]
	public NeedsDisplay()
	{
	}
}
[Token(Token = "0x20000BC")]
public class ObjectiveDisplay : MonoBehaviour
{
	[Token(Token = "0x4000586")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TextMeshProUGUI textMeshProUi;

	[Token(Token = "0x4000587")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float lastRefreshTime;

	[Token(Token = "0x4000588")]
	private const float RefreshDelay = 1f;

	[Token(Token = "0x60005C9")]
	[Address(RVA = "0xB60DB0", Offset = "0xB60DB0", VA = "0xB60DB0")]
	private void Start()
	{
	}

	[Token(Token = "0x60005CA")]
	[Address(RVA = "0xB60E18", Offset = "0xB60E18", VA = "0xB60E18")]
	private void Update()
	{
	}

	[Token(Token = "0x60005CB")]
	[Address(RVA = "0xB60E50", Offset = "0xB60E50", VA = "0xB60E50")]
	private void RefreshLabel()
	{
	}

	[Token(Token = "0x60005CC")]
	[Address(RVA = "0xB61200", Offset = "0xB61200", VA = "0xB61200")]
	public ObjectiveDisplay()
	{
	}
}
[Token(Token = "0x20000BD")]
[CreateAssetMenu]
public class Player : ScriptableObject
{
	[Token(Token = "0x4000589")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public FloatVariable mana;

	[Token(Token = "0x400058A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public FloatVariable size;

	[Token(Token = "0x60005CD")]
	[Address(RVA = "0xB61210", Offset = "0xB61210", VA = "0xB61210")]
	public Player()
	{
	}
}
[Token(Token = "0x20000BE")]
public class PlayerAwareManager : MonoBehaviour
{
	[Token(Token = "0x20000BF")]
	[CompilerGenerated]
	private sealed class <ScheduleChangeTrack>d__49 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40005B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40005B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40005B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PlayerAwareManager <>4__this;

		[Token(Token = "0x40005B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <trackChangeRequest>5__2;

		[Token(Token = "0x170000A9")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60005DC")]
			[Address(RVA = "0xB62878", Offset = "0xB62878", VA = "0xB62878", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000AA")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60005DE")]
			[Address(RVA = "0xB628C0", Offset = "0xB628C0", VA = "0xB628C0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60005D9")]
		[Address(RVA = "0xB624C0", Offset = "0xB624C0", VA = "0xB624C0")]
		[DebuggerHidden]
		public <ScheduleChangeTrack>d__49(int <>1__state)
		{
		}

		[Token(Token = "0x60005DA")]
		[Address(RVA = "0xB62614", Offset = "0xB62614", VA = "0xB62614", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60005DB")]
		[Address(RVA = "0xB62618", Offset = "0xB62618", VA = "0xB62618", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60005DD")]
		[Address(RVA = "0xB62880", Offset = "0xB62880", VA = "0xB62880", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400058B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static readonly float maxAudioDistance;

	[Token(Token = "0x400058C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioSourceConfiguration MusicAudioSourceConfiguration;

	[Token(Token = "0x400058D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float CrossFadeTime;

	[Token(Token = "0x400058E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float maxVolume;

	[Token(Token = "0x400058F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float minTrackChangeDelay;

	[Token(Token = "0x4000590")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float trackChangeRequestDelay;

	[Token(Token = "0x4000591")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioClip RegularTribalClip;

	[Token(Token = "0x4000592")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AudioClip EuropeanAntiqueClip;

	[Token(Token = "0x4000593")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AudioClip RegularMedievalClip;

	[Token(Token = "0x4000594")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public AudioClip IndustrialClip;

	[Token(Token = "0x4000595")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public AudioClip DesertClip;

	[Token(Token = "0x4000596")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public AudioClip AsianClip;

	[Token(Token = "0x4000597")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public AudioClip IceClip;

	[Token(Token = "0x4000598")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public AudioClip AfricanClip;

	[Token(Token = "0x4000599")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public AudioClip PirateClip;

	[Token(Token = "0x400059A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public AudioClip EuropeanModernClip;

	[Token(Token = "0x400059B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public AudioClip FutureClip;

	[Token(Token = "0x400059C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public AudioClip HomeClip;

	[Token(Token = "0x400059D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public SphereCollider sphereCollider;

	[Token(Token = "0x400059E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public float lowHardwareRadius;

	[Token(Token = "0x400059F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	public float mediumHardwareRadius;

	[Token(Token = "0x40005A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public float highHardwareRadius;

	[Token(Token = "0x40005A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private AudioSource RegularTribal;

	[Token(Token = "0x40005A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private AudioSource EuropeanAntique;

	[Token(Token = "0x40005A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private AudioSource RegularMedieval;

	[Token(Token = "0x40005A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private AudioSource Industrial;

	[Token(Token = "0x40005A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private AudioSource Desert;

	[Token(Token = "0x40005A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private AudioSource Ice;

	[Token(Token = "0x40005A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private AudioSource Asian;

	[Token(Token = "0x40005A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private AudioSource African;

	[Token(Token = "0x40005A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private AudioSource Pirate;

	[Token(Token = "0x40005AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private AudioSource EuropeanModern;

	[Token(Token = "0x40005AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private AudioSource Future;

	[Token(Token = "0x40005AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private AudioSource Home;

	[Token(Token = "0x40005AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private AudioSource nextAudioSource;

	[Token(Token = "0x40005AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private AudioSource playingAudioSource;

	[Token(Token = "0x40005AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private Dictionary<TownType, int> townCounters;

	[Token(Token = "0x40005B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private Dictionary<TownType, int> townAgeCounters;

	[Token(Token = "0x40005B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private List<Town> surroundingTowns;

	[Token(Token = "0x40005B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private float lastTrackChange;

	[Token(Token = "0x40005B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private Coroutine scheduleChangeTrackCoroutine;

	[Token(Token = "0x60005CE")]
	[Address(RVA = "0xB61218", Offset = "0xB61218", VA = "0xB61218")]
	private void Awake()
	{
	}

	[Token(Token = "0x60005CF")]
	[Address(RVA = "0xB6132C", Offset = "0xB6132C", VA = "0xB6132C")]
	private void Start()
	{
	}

	[Token(Token = "0x60005D0")]
	[Address(RVA = "0xB6188C", Offset = "0xB6188C", VA = "0xB6188C")]
	private AudioSource NewMusicAudioSource(AudioClip clip)
	{
		return null;
	}

	[Token(Token = "0x60005D1")]
	[Address(RVA = "0xB61A70", Offset = "0xB61A70", VA = "0xB61A70")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60005D2")]
	[Address(RVA = "0xB621DC", Offset = "0xB621DC", VA = "0xB621DC")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x60005D3")]
	[Address(RVA = "0xB61C98", Offset = "0xB61C98", VA = "0xB61C98")]
	private void RefreshAgeCounter()
	{
	}

	[Token(Token = "0x60005D4")]
	[Address(RVA = "0xB61EC8", Offset = "0xB61EC8", VA = "0xB61EC8")]
	private void RefreshMusic()
	{
	}

	[Token(Token = "0x60005D5")]
	[Address(RVA = "0xB61970", Offset = "0xB61970", VA = "0xB61970")]
	private void ChangeTrack(AudioSource newAudioSource)
	{
	}

	[Token(Token = "0x60005D6")]
	[Address(RVA = "0xB6244C", Offset = "0xB6244C", VA = "0xB6244C")]
	[IteratorStateMachine(typeof(<ScheduleChangeTrack>d__49))]
	private IEnumerator ScheduleChangeTrack()
	{
		return null;
	}

	[Token(Token = "0x60005D7")]
	[Address(RVA = "0xB624E8", Offset = "0xB624E8", VA = "0xB624E8")]
	public PlayerAwareManager()
	{
	}
}
[Token(Token = "0x20000C0")]
public class CoroutineIterator : MonoBehaviour
{
	[Token(Token = "0x60005DF")]
	[Address(RVA = "0xB628C8", Offset = "0xB628C8", VA = "0xB628C8")]
	public CoroutineIterator()
	{
	}
}
[Token(Token = "0x20000C1")]
public class OutlineRemover : MonoBehaviour
{
	[Token(Token = "0x60005E0")]
	[Address(RVA = "0xB628D0", Offset = "0xB628D0", VA = "0xB628D0")]
	public void RemoveOutline()
	{
	}

	[Token(Token = "0x60005E1")]
	[Address(RVA = "0xB6298C", Offset = "0xB6298C", VA = "0xB6298C")]
	public OutlineRemover()
	{
	}
}
[Token(Token = "0x20000C2")]
public class PoolableObject : MonoBehaviour
{
	[Token(Token = "0x20000C3")]
	[CompilerGenerated]
	private sealed class <DelayedDisable>d__24 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40005C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40005C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40005C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float time;

		[Token(Token = "0x40005C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public PoolableObject <>4__this;

		[Token(Token = "0x170000AC")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60005F5")]
			[Address(RVA = "0xB635C8", Offset = "0xB635C8", VA = "0xB635C8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000AD")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60005F7")]
			[Address(RVA = "0xB63610", Offset = "0xB63610", VA = "0xB63610", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60005F2")]
		[Address(RVA = "0xB632B8", Offset = "0xB632B8", VA = "0xB632B8")]
		[DebuggerHidden]
		public <DelayedDisable>d__24(int <>1__state)
		{
		}

		[Token(Token = "0x60005F3")]
		[Address(RVA = "0xB633EC", Offset = "0xB633EC", VA = "0xB633EC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60005F4")]
		[Address(RVA = "0xB633F0", Offset = "0xB633F0", VA = "0xB633F0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60005F6")]
		[Address(RVA = "0xB635D0", Offset = "0xB635D0", VA = "0xB635D0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000C4")]
	[CompilerGenerated]
	private sealed class <DelayedUnpoolEvent>d__27 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40005C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40005CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40005CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PoolableObject <>4__this;

		[Token(Token = "0x170000AE")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60005FB")]
			[Address(RVA = "0xB63688", Offset = "0xB63688", VA = "0xB63688", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000AF")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60005FD")]
			[Address(RVA = "0xB636D0", Offset = "0xB636D0", VA = "0xB636D0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60005F8")]
		[Address(RVA = "0xB63354", Offset = "0xB63354", VA = "0xB63354")]
		[DebuggerHidden]
		public <DelayedUnpoolEvent>d__27(int <>1__state)
		{
		}

		[Token(Token = "0x60005F9")]
		[Address(RVA = "0xB63618", Offset = "0xB63618", VA = "0xB63618", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60005FA")]
		[Address(RVA = "0xB6361C", Offset = "0xB6361C", VA = "0xB6361C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60005FC")]
		[Address(RVA = "0xB63690", Offset = "0xB63690", VA = "0xB63690", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40005B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Dictionary<string, Stack<PoolableObject>> _pool;

	[Token(Token = "0x40005B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static Transform PoolParent;

	[Token(Token = "0x40005BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("How many of these should we pre pool when the game start?")]
	public int prePoolAmount;

	[Token(Token = "0x40005BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private string ID;

	[Token(Token = "0x40005BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private bool SelfPooling;

	[Token(Token = "0x40005BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	public float PoolTime;

	[Token(Token = "0x40005BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private bool UnpoolEventOnStart;

	[Token(Token = "0x40005BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	[FormerlySerializedAs("OnUnpool")]
	[Tooltip("Events called when the object is taken from the pool to be instantiated")]
	private UnityEvent OnGetFromPool;

	[Token(Token = "0x40005C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("Events called when the object is sent back to the pool")]
	[SerializeField]
	private UnityEvent OnPool;

	[Token(Token = "0x40005C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private float PoolDelay;

	[Token(Token = "0x40005C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	internal float Timer;

	[Token(Token = "0x40005C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool pooled;

	[Token(Token = "0x40005C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Coroutine selfPoolCoroutine;

	[Token(Token = "0x170000AB")]
	private static Dictionary<string, Stack<PoolableObject>> pool
	{
		[Token(Token = "0x60005E2")]
		[Address(RVA = "0xB62994", Offset = "0xB62994", VA = "0xB62994")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60005E3")]
	[Address(RVA = "0xB62A44", Offset = "0xB62A44", VA = "0xB62A44")]
	private void Awake()
	{
	}

	[Token(Token = "0x60005E4")]
	[Address(RVA = "0xB62BA8", Offset = "0xB62BA8", VA = "0xB62BA8")]
	public static void TryPool(GameObject go)
	{
	}

	[Token(Token = "0x60005E5")]
	[Address(RVA = "0xB62D4C", Offset = "0xB62D4C", VA = "0xB62D4C")]
	public static GameObject TryGetPoolable(GameObject go, Vector3 pos, Quaternion rot, Transform parent)
	{
		return null;
	}

	[Token(Token = "0x60005E6")]
	[Address(RVA = "0xB62E34", Offset = "0xB62E34", VA = "0xB62E34")]
	public static GameObject TryGetPoolable(GameObject go, Transform parent)
	{
		return null;
	}

	[Token(Token = "0x60005E7")]
	[Address(RVA = "0xB62D90", Offset = "0xB62D90", VA = "0xB62D90")]
	public static GameObject TryGetPoolable(GameObject go, Vector3 pos, Quaternion rot)
	{
		return null;
	}

	[Token(Token = "0x60005E8")]
	[Address(RVA = "0xB62F04", Offset = "0xB62F04", VA = "0xB62F04")]
	public static GameObject TryGetPoolable(GameObject go)
	{
		return null;
	}

	[Token(Token = "0x60005E9")]
	[Address(RVA = "0xB630A8", Offset = "0xB630A8", VA = "0xB630A8")]
	[ContextMenu("Assign ID")]
	private void AssignID()
	{
	}

	[Token(Token = "0x60005EA")]
	[Address(RVA = "0xB630E8", Offset = "0xB630E8", VA = "0xB630E8")]
	private void Start()
	{
	}

	[Token(Token = "0x60005EB")]
	[Address(RVA = "0xB62C7C", Offset = "0xB62C7C", VA = "0xB62C7C")]
	public void Pool()
	{
	}

	[Token(Token = "0x60005EC")]
	[Address(RVA = "0xB63234", Offset = "0xB63234", VA = "0xB63234")]
	[IteratorStateMachine(typeof(<DelayedDisable>d__24))]
	private IEnumerator DelayedDisable(float time)
	{
		return null;
	}

	[Token(Token = "0x60005ED")]
	[Address(RVA = "0xB63044", Offset = "0xB63044", VA = "0xB63044")]
	private void Unpool()
	{
	}

	[Token(Token = "0x60005EE")]
	[Address(RVA = "0xB63114", Offset = "0xB63114", VA = "0xB63114")]
	private static void AddToStack(string ID, PoolableObject p)
	{
	}

	[Token(Token = "0x60005EF")]
	[Address(RVA = "0xB632E0", Offset = "0xB632E0", VA = "0xB632E0")]
	[IteratorStateMachine(typeof(<DelayedUnpoolEvent>d__27))]
	private IEnumerator DelayedUnpoolEvent()
	{
		return null;
	}

	[Token(Token = "0x60005F0")]
	[Address(RVA = "0xB6337C", Offset = "0xB6337C", VA = "0xB6337C")]
	public void OnValidate()
	{
	}

	[Token(Token = "0x60005F1")]
	[Address(RVA = "0xB6338C", Offset = "0xB6338C", VA = "0xB6338C")]
	public PoolableObject()
	{
	}
}
[Token(Token = "0x20000C5")]
public class PoolableObjectInitializer : MonoBehaviour
{
	[Token(Token = "0x40005CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static bool init;

	[Token(Token = "0x40005CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PoolableObjectDatabase database;

	[Token(Token = "0x60005FE")]
	[Address(RVA = "0xB636D8", Offset = "0xB636D8", VA = "0xB636D8")]
	private void Awake()
	{
	}

	[Token(Token = "0x60005FF")]
	[Address(RVA = "0xB63C10", Offset = "0xB63C10", VA = "0xB63C10")]
	public PoolableObjectInitializer()
	{
	}
}
[Token(Token = "0x20000C6")]
[CreateAssetMenu(fileName = "Float", menuName = "Primitives/Float Variable", order = 0)]
public class FloatVariable : ScriptableObject
{
	[Token(Token = "0x40005CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float value;

	[Token(Token = "0x6000600")]
	[Address(RVA = "0xB63C18", Offset = "0xB63C18", VA = "0xB63C18")]
	public static implicit operator float(FloatVariable floatVariable)
	{
		return default(float);
	}

	[Token(Token = "0x6000601")]
	[Address(RVA = "0xB63C30", Offset = "0xB63C30", VA = "0xB63C30")]
	public FloatVariable()
	{
	}
}
[Token(Token = "0x20000C7")]
public class QualitySelector : MonoBehaviour, ILocalizedText
{
	[Token(Token = "0x40005CF")]
	private const string Quality = "quality_";

	[Token(Token = "0x40005D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TextMeshProUGUI modifierDisplay;

	[Token(Token = "0x6000602")]
	[Address(RVA = "0xB63C38", Offset = "0xB63C38", VA = "0xB63C38")]
	private void Start()
	{
	}

	[Token(Token = "0x6000603")]
	[Address(RVA = "0xB63CA4", Offset = "0xB63CA4", VA = "0xB63CA4")]
	public void Increase()
	{
	}

	[Token(Token = "0x6000604")]
	[Address(RVA = "0xB63E88", Offset = "0xB63E88", VA = "0xB63E88")]
	public void Decrease()
	{
	}

	[Token(Token = "0x6000605")]
	[Address(RVA = "0xB63D98", Offset = "0xB63D98", VA = "0xB63D98", Slot = "4")]
	public void RefreshLabel()
	{
	}

	[Token(Token = "0x6000606")]
	[Address(RVA = "0xB63F74", Offset = "0xB63F74", VA = "0xB63F74")]
	public QualitySelector()
	{
	}
}
[Token(Token = "0x20000C8")]
public class RandomRotation : MonoBehaviour
{
	[Token(Token = "0x40005D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 rotationAxis;

	[Token(Token = "0x6000607")]
	[Address(RVA = "0xB63F7C", Offset = "0xB63F7C", VA = "0xB63F7C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000608")]
	[Address(RVA = "0xB63FE0", Offset = "0xB63FE0", VA = "0xB63FE0")]
	public RandomRotation()
	{
	}
}
[Token(Token = "0x20000C9")]
public class RandomScale : MonoBehaviour
{
	[Token(Token = "0x40005D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<Vector3> possibleScales;

	[Token(Token = "0x6000609")]
	[Address(RVA = "0xB64040", Offset = "0xB64040", VA = "0xB64040")]
	private void Awake()
	{
	}

	[Token(Token = "0x600060A")]
	[Address(RVA = "0xB64138", Offset = "0xB64138", VA = "0xB64138")]
	public RandomScale()
	{
	}
}
[Token(Token = "0x20000CA")]
public class RepairTimer : MonoBehaviour
{
	[Token(Token = "0x40005D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public FloatVariable repairTime;

	[Token(Token = "0x40005D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject repairedModelPrefab;

	[Token(Token = "0x40005D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioSet repairSound;

	[Token(Token = "0x40005D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float startTime;

	[Token(Token = "0x600060B")]
	[Address(RVA = "0xB64140", Offset = "0xB64140", VA = "0xB64140")]
	private void Start()
	{
	}

	[Token(Token = "0x600060C")]
	[Address(RVA = "0xB6415C", Offset = "0xB6415C", VA = "0xB6415C")]
	private void Update()
	{
	}

	[Token(Token = "0x600060D")]
	[Address(RVA = "0xB642C4", Offset = "0xB642C4", VA = "0xB642C4")]
	public RepairTimer()
	{
	}
}
[Token(Token = "0x20000CB")]
[SelectionBase]
public class Resource : MonoBehaviour, IRegenerable, ISwarmFood
{
	[Token(Token = "0x40005D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Configuration", order = 1)]
	public ResourceDisplayType ResourceDisplayType;

	[Token(Token = "0x40005D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int InitialAmount;

	[Token(Token = "0x40005D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioSet GatheringSounds;

	[Token(Token = "0x40005DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool Regenerate;

	[Token(Token = "0x40005DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float RegenerationTime;

	[Token(Token = "0x40005DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject HideShowEventReceiverGameObject;

	[Token(Token = "0x40005DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private IHideShow hideShowEventReceiver;

	[Token(Token = "0x40005DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool MustBeKilled;

	[Token(Token = "0x40005DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	public bool Killed;

	[Token(Token = "0x40005E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
	public bool AllowMultipleGatherers;

	[Token(Token = "0x40005E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Header("Size Based", order = 2)]
	public GameObject SizedComponent;

	[Token(Token = "0x40005E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float MinComponentSize;

	[Token(Token = "0x40005E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float MaxComponentSize;

	[Token(Token = "0x40005E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Header("Prefab Based", order = 3)]
	public GameObject DepletedPrefab;

	[Token(Token = "0x40005E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public GameObject[] fullPrefabs;

	[Token(Token = "0x40005E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public bool RandomRotation;

	[Token(Token = "0x40005E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[Header("Plant Based", order = 4)]
	public GameObject PlantComponent;

	[Token(Token = "0x40005E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public float MinPlantSize;

	[Token(Token = "0x40005E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public float MaxPlantSize;

	[Token(Token = "0x40005EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[Header("Terrain Convert", order = 5)]
	public TerrainType NewTerrainType;

	[Token(Token = "0x40005EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	[Header("Burnable Resource", order = 6)]
	public bool IsBurnable;

	[Token(Token = "0x40005EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public GameObject FirePrefab;

	[Token(Token = "0x40005ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public GameObject BurnedPrefab;

	[Token(Token = "0x40005EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[Header("Informations", order = 5)]
	public int Amount;

	[Token(Token = "0x40005EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	public ResourceType Type;

	[Token(Token = "0x40005F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private GameObject currentPrefabInstance;

	[Token(Token = "0x40005F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private float depletedTime;

	[Token(Token = "0x40005F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private InteractableObject interObject;

	[Token(Token = "0x40005F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private bool regenerateMemory;

	[NonSerialized]
	[Token(Token = "0x40005F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC1")]
	public bool isBurning;

	[NonSerialized]
	[Token(Token = "0x40005F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC2")]
	public bool isConsumed;

	[Token(Token = "0x40005F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private GameObject fireVfxInstance;

	[Token(Token = "0x40005F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private float burnStartTime;

	[Token(Token = "0x40005FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public AnimalSpawner animalSpawner;

	[Token(Token = "0x40005FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private float lastTagTime;

	[Token(Token = "0x40005FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	private bool isTagged;

	[Token(Token = "0x40005FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private Rigidbody rb;

	[Token(Token = "0x170000B0")]
	public bool Busy
	{
		[Token(Token = "0x600060E")]
		[Address(RVA = "0xB642CC", Offset = "0xB642CC", VA = "0xB642CC")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600060F")]
		[Address(RVA = "0xB642D4", Offset = "0xB642D4", VA = "0xB642D4")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170000B1")]
	public bool IsEmpty
	{
		[Token(Token = "0x6000610")]
		[Address(RVA = "0xB642E0", Offset = "0xB642E0", VA = "0xB642E0")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000611")]
		[Address(RVA = "0xB642E8", Offset = "0xB642E8", VA = "0xB642E8")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170000B2")]
	public bool IsTagged
	{
		[Token(Token = "0x6000612")]
		[Address(RVA = "0xB642F4", Offset = "0xB642F4", VA = "0xB642F4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000613")]
		[Address(RVA = "0xB64350", Offset = "0xB64350", VA = "0xB64350")]
		set
		{
		}
	}

	[Token(Token = "0x6000614")]
	[Address(RVA = "0xB64378", Offset = "0xB64378", VA = "0xB64378")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000615")]
	[Address(RVA = "0xB644E8", Offset = "0xB644E8", VA = "0xB644E8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000616")]
	[Address(RVA = "0xB645E0", Offset = "0xB645E0", VA = "0xB645E0")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x6000617")]
	[Address(RVA = "0xB6473C", Offset = "0xB6473C", VA = "0xB6473C")]
	internal void Refresh()
	{
	}

	[Token(Token = "0x6000618")]
	[Address(RVA = "0xB647E8", Offset = "0xB647E8", VA = "0xB647E8")]
	private void Consume()
	{
	}

	[Token(Token = "0x6000619")]
	[Address(RVA = "0xB64B90", Offset = "0xB64B90", VA = "0xB64B90")]
	public bool IsBusy()
	{
		return default(bool);
	}

	[Token(Token = "0x600061A")]
	[Address(RVA = "0xB64C8C", Offset = "0xB64C8C", VA = "0xB64C8C")]
	private void ResizeComponent()
	{
	}

	[Token(Token = "0x600061B")]
	[Address(RVA = "0xB64884", Offset = "0xB64884", VA = "0xB64884")]
	private void ResizePlant()
	{
	}

	[Token(Token = "0x600061C")]
	[Address(RVA = "0xB649A4", Offset = "0xB649A4", VA = "0xB649A4")]
	private void EmptyValueOnly()
	{
	}

	[Token(Token = "0x600061D")]
	[Address(RVA = "0xB64DA4", Offset = "0xB64DA4", VA = "0xB64DA4")]
	private void Empty()
	{
	}

	[Token(Token = "0x600061E")]
	[Address(RVA = "0xB649C8", Offset = "0xB649C8", VA = "0xB649C8")]
	private void DisplayPrefab(GameObject prefab)
	{
	}

	[Token(Token = "0x600061F")]
	[Address(RVA = "0xB6454C", Offset = "0xB6454C", VA = "0xB6454C")]
	private void Full()
	{
	}

	[Token(Token = "0x6000620")]
	[Address(RVA = "0xB652E4", Offset = "0xB652E4", VA = "0xB652E4")]
	private void Show()
	{
	}

	[Token(Token = "0x6000621")]
	[Address(RVA = "0xB65004", Offset = "0xB65004", VA = "0xB65004")]
	private void Hide()
	{
	}

	[Token(Token = "0x6000622")]
	[Address(RVA = "0xB650A4", Offset = "0xB650A4", VA = "0xB650A4")]
	private void DisplayRandomizedFullPrefab()
	{
	}

	[Token(Token = "0x6000623")]
	[Address(RVA = "0xB653A0", Offset = "0xB653A0", VA = "0xB653A0")]
	public int Gather(int gatheredAmount)
	{
		return default(int);
	}

	[Token(Token = "0x6000624")]
	[Address(RVA = "0xB65410", Offset = "0xB65410", VA = "0xB65410", Slot = "4")]
	public bool DoRegenerate()
	{
		return default(bool);
	}

	[Token(Token = "0x6000625")]
	[Address(RVA = "0xB65460", Offset = "0xB65460", VA = "0xB65460", Slot = "5")]
	public bool Eat()
	{
		return default(bool);
	}

	[Token(Token = "0x6000626")]
	[Address(RVA = "0xB65488", Offset = "0xB65488", VA = "0xB65488")]
	public void Burn()
	{
	}

	[Token(Token = "0x6000627")]
	[Address(RVA = "0xB64AA8", Offset = "0xB64AA8", VA = "0xB64AA8")]
	public void Extinguish()
	{
	}

	[Token(Token = "0x6000628")]
	[Address(RVA = "0xB65604", Offset = "0xB65604", VA = "0xB65604")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000629")]
	[Address(RVA = "0xB656CC", Offset = "0xB656CC", VA = "0xB656CC")]
	public void Kill()
	{
	}

	[Token(Token = "0x600062A")]
	[Address(RVA = "0xB656F4", Offset = "0xB656F4", VA = "0xB656F4")]
	public Resource()
	{
	}
}
[Token(Token = "0x20000CC")]
[CreateAssetMenu(fileName = "Resource Info Configuration", menuName = "Trading/Resource Info Configuration", order = 0)]
public class ResourceInfoConfiguration : ScriptableObject
{
	[Token(Token = "0x40005FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float DistanceBeginPoint;

	[Token(Token = "0x40005FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float DurationAlive;

	[Token(Token = "0x4000600")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float MovingSpeed;

	[Token(Token = "0x600062B")]
	[Address(RVA = "0xB65714", Offset = "0xB65714", VA = "0xB65714")]
	public ResourceInfoConfiguration()
	{
	}
}
[Token(Token = "0x20000CD")]
public class ResourceTradingDisplay : MonoBehaviour, ILocalizedText
{
	[Token(Token = "0x20000CE")]
	[CompilerGenerated]
	private sealed class <Appears>d__12 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000608")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000609")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400060A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float delay;

		[Token(Token = "0x400060B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ResourceTradingDisplay <>4__this;

		[Token(Token = "0x400060C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 <endPosition>5__2;

		[Token(Token = "0x400060D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float <time>5__3;

		[Token(Token = "0x170000B3")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000637")]
			[Address(RVA = "0xB6615C", Offset = "0xB6615C", VA = "0xB6615C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B4")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000639")]
			[Address(RVA = "0xB661A4", Offset = "0xB661A4", VA = "0xB661A4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000634")]
		[Address(RVA = "0xB65E54", Offset = "0xB65E54", VA = "0xB65E54")]
		[DebuggerHidden]
		public <Appears>d__12(int <>1__state)
		{
		}

		[Token(Token = "0x6000635")]
		[Address(RVA = "0xB65F40", Offset = "0xB65F40", VA = "0xB65F40", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000636")]
		[Address(RVA = "0xB65F44", Offset = "0xB65F44", VA = "0xB65F44", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000638")]
		[Address(RVA = "0xB66164", Offset = "0xB66164", VA = "0xB66164", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000601")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform BeginPosition;

	[Token(Token = "0x4000602")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ResourceInfoConfiguration ResourceInfoConfiguration;

	[Token(Token = "0x4000603")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool IsLoading;

	[Token(Token = "0x4000604")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Dictionary<ResourceType, int> Cargo;

	[Token(Token = "0x4000605")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private TextMeshPro textMeshPro;

	[Token(Token = "0x4000606")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private StringBuilder stringBuilder;

	[Token(Token = "0x4000607")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Coroutine appearsCoroutine;

	[Token(Token = "0x600062C")]
	[Address(RVA = "0xB65730", Offset = "0xB65730", VA = "0xB65730")]
	private void Awake()
	{
	}

	[Token(Token = "0x600062D")]
	[Address(RVA = "0xB65788", Offset = "0xB65788", VA = "0xB65788")]
	private void Start()
	{
	}

	[Token(Token = "0x600062E")]
	[Address(RVA = "0xB657E0", Offset = "0xB657E0", VA = "0xB657E0")]
	public void OnPool()
	{
	}

	[Token(Token = "0x600062F")]
	[Address(RVA = "0xB65868", Offset = "0xB65868", VA = "0xB65868")]
	public void OnUnPool()
	{
	}

	[Token(Token = "0x6000630")]
	[Address(RVA = "0xB658C4", Offset = "0xB658C4", VA = "0xB658C4")]
	public void Init(Dictionary<ResourceType, int> cargo, bool isLoading, float delay = 0.1f)
	{
	}

	[Token(Token = "0x6000631")]
	[Address(RVA = "0xB65DD0", Offset = "0xB65DD0", VA = "0xB65DD0")]
	[IteratorStateMachine(typeof(<Appears>d__12))]
	private IEnumerator Appears(float delay)
	{
		return null;
	}

	[Token(Token = "0x6000632")]
	[Address(RVA = "0xB65ABC", Offset = "0xB65ABC", VA = "0xB65ABC", Slot = "4")]
	public void RefreshLabel()
	{
	}

	[Token(Token = "0x6000633")]
	[Address(RVA = "0xB65E7C", Offset = "0xB65E7C", VA = "0xB65E7C")]
	public ResourceTradingDisplay()
	{
	}
}
[Serializable]
[Token(Token = "0x20000CF")]
public class Rules
{
	[Token(Token = "0x400060E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int version;

	[Token(Token = "0x400060F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public int maxTerrainDefault;

	[Token(Token = "0x4000610")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int maxTerrainQuest;

	[Token(Token = "0x4000611")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int maxTerrainQuest2;

	[Token(Token = "0x4000612")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<MiracleDescriptor> miracles;

	[Token(Token = "0x600063A")]
	[Address(RVA = "0xB661AC", Offset = "0xB661AC", VA = "0xB661AC")]
	public Rules()
	{
	}
}
[Serializable]
[Token(Token = "0x20000D0")]
public struct MiracleDescriptor
{
	[Token(Token = "0x4000613")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public SpellType SpellType;

	[Token(Token = "0x4000614")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public MiracleType MiracleType;

	[Token(Token = "0x4000615")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public TerrainType TerrainType;

	[Token(Token = "0x4000616")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public DeityRank DisplayDeityRank;

	[Token(Token = "0x4000617")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public DeityRank UnlockDeityRank;

	[Token(Token = "0x4000618")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float Cost;

	[Token(Token = "0x4000619")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float Karma;
}
[Token(Token = "0x20000D1")]
public static class RulesManager
{
	[Token(Token = "0x400061A")]
	private const int CurrentRuleVersion = 4;

	[Token(Token = "0x600063B")]
	[Address(RVA = "0xB661B4", Offset = "0xB661B4", VA = "0xB661B4")]
	public static Rules LoadRules()
	{
		return null;
	}

	[Token(Token = "0x600063C")]
	[Address(RVA = "0xB663A8", Offset = "0xB663A8", VA = "0xB663A8")]
	private static Rules GenerateRules()
	{
		return null;
	}

	[Token(Token = "0x600063D")]
	[Address(RVA = "0xB67C50", Offset = "0xB67C50", VA = "0xB67C50")]
	public static void GenerateRulesFile()
	{
	}

	[Token(Token = "0x600063E")]
	[Address(RVA = "0xB66CE0", Offset = "0xB66CE0", VA = "0xB66CE0")]
	private static void AddNonTerrainMiracles(List<MiracleDescriptor> miracleDescriptors)
	{
	}

	[Token(Token = "0x600063F")]
	[Address(RVA = "0xB66528", Offset = "0xB66528", VA = "0xB66528")]
	private static void AddTerrainMiracles(List<MiracleDescriptor> miracleDescriptors)
	{
	}
}
[Token(Token = "0x20000D2")]
public class SaveDisplay : MonoBehaviour, ILocalizedText
{
	[Token(Token = "0x20000D3")]
	[CompilerGenerated]
	private sealed class <WaitForLoadSaveData>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400061F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000620")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000621")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Task<GameData> loadGameData;

		[Token(Token = "0x4000622")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public SaveDisplay <>4__this;

		[Token(Token = "0x170000B5")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600064A")]
			[Address(RVA = "0xB68954", Offset = "0xB68954", VA = "0xB68954", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B6")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600064C")]
			[Address(RVA = "0xB6899C", Offset = "0xB6899C", VA = "0xB6899C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000647")]
		[Address(RVA = "0xB6800C", Offset = "0xB6800C", VA = "0xB6800C")]
		[DebuggerHidden]
		public <WaitForLoadSaveData>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x6000648")]
		[Address(RVA = "0xB68898", Offset = "0xB68898", VA = "0xB68898", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000649")]
		[Address(RVA = "0xB6889C", Offset = "0xB6889C", VA = "0xB6889C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600064B")]
		[Address(RVA = "0xB6895C", Offset = "0xB6895C", VA = "0xB6895C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400061B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool init;

	[Token(Token = "0x400061C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private int saveSlot;

	[Token(Token = "0x400061D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private TextMeshProUGUI textMeshProUGUI;

	[Token(Token = "0x400061E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private GameData data;

	[Token(Token = "0x6000640")]
	[Address(RVA = "0xB67E4C", Offset = "0xB67E4C", VA = "0xB67E4C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000641")]
	[Address(RVA = "0xB67E50", Offset = "0xB67E50", VA = "0xB67E50")]
	private void Init()
	{
	}

	[Token(Token = "0x6000642")]
	[Address(RVA = "0xB67EF0", Offset = "0xB67EF0", VA = "0xB67EF0")]
	public void SetSaveSlot(int slot)
	{
	}

	[Token(Token = "0x6000643")]
	[Address(RVA = "0xB67F7C", Offset = "0xB67F7C", VA = "0xB67F7C")]
	[IteratorStateMachine(typeof(<WaitForLoadSaveData>d__7))]
	private IEnumerator WaitForLoadSaveData(Task<GameData> loadGameData)
	{
		return null;
	}

	[Token(Token = "0x6000644")]
	[Address(RVA = "0xB68034", Offset = "0xB68034", VA = "0xB68034")]
	private void DisplayInfo()
	{
	}

	[Token(Token = "0x6000645")]
	[Address(RVA = "0xB6888C", Offset = "0xB6888C", VA = "0xB6888C", Slot = "4")]
	public void RefreshLabel()
	{
	}

	[Token(Token = "0x6000646")]
	[Address(RVA = "0xB68890", Offset = "0xB68890", VA = "0xB68890")]
	public SaveDisplay()
	{
	}
}
[Token(Token = "0x20000D4")]
public class SaveIndicator : MonoBehaviour
{
	[Token(Token = "0x4000623")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private TextMeshPro _textMeshPro;

	[Token(Token = "0x600064D")]
	[Address(RVA = "0xB689A4", Offset = "0xB689A4", VA = "0xB689A4")]
	private void Awake()
	{
	}

	[Token(Token = "0x600064E")]
	[Address(RVA = "0xB68A5C", Offset = "0xB68A5C", VA = "0xB68A5C")]
	private void Update()
	{
	}

	[Token(Token = "0x600064F")]
	[Address(RVA = "0xB68A60", Offset = "0xB68A60", VA = "0xB68A60")]
	public void RefreshText()
	{
	}

	[Token(Token = "0x6000650")]
	[Address(RVA = "0xB68AC8", Offset = "0xB68AC8", VA = "0xB68AC8")]
	public SaveIndicator()
	{
	}
}
[Token(Token = "0x20000D5")]
public class SaveSelector : MonoBehaviour
{
	[Token(Token = "0x4000624")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("The Game Object that will display the summary of the selected save.")]
	public SaveDisplay saveDisplayer;

	[Token(Token = "0x4000625")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextMeshProUGUI slotDisplay;

	[Token(Token = "0x4000626")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("This group will be enabled if the selected save exist.")]
	public CanvasGroup saveExistGroup;

	[Token(Token = "0x4000627")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Window window;

	[Token(Token = "0x6000651")]
	[Address(RVA = "0xB68AD0", Offset = "0xB68AD0", VA = "0xB68AD0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000652")]
	[Address(RVA = "0xB68B28", Offset = "0xB68B28", VA = "0xB68B28")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000653")]
	[Address(RVA = "0xB68B84", Offset = "0xB68B84", VA = "0xB68B84")]
	public void SetSlot(int newSlot)
	{
	}

	[Token(Token = "0x6000654")]
	[Address(RVA = "0xB68CBC", Offset = "0xB68CBC", VA = "0xB68CBC")]
	public void Increase()
	{
	}

	[Token(Token = "0x6000655")]
	[Address(RVA = "0xB68D1C", Offset = "0xB68D1C", VA = "0xB68D1C")]
	public void Decrease()
	{
	}

	[Token(Token = "0x6000656")]
	[Address(RVA = "0xB68D84", Offset = "0xB68D84", VA = "0xB68D84")]
	public void SaveGame()
	{
	}

	[Token(Token = "0x6000657")]
	[Address(RVA = "0xB68DA4", Offset = "0xB68DA4", VA = "0xB68DA4")]
	public void LoadGame()
	{
	}

	[Token(Token = "0x6000658")]
	[Address(RVA = "0xB68DC0", Offset = "0xB68DC0", VA = "0xB68DC0")]
	public SaveSelector()
	{
	}
}
[Token(Token = "0x20000D6")]
public class SaveSlotDisplayer : MonoBehaviour
{
	[Token(Token = "0x4000628")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private TextMeshPro _textMeshPro;

	[Token(Token = "0x4000629")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private GameController _controller;

	[Token(Token = "0x6000659")]
	[Address(RVA = "0xB68DC8", Offset = "0xB68DC8", VA = "0xB68DC8")]
	private void Start()
	{
	}

	[Token(Token = "0x600065A")]
	[Address(RVA = "0xB68E60", Offset = "0xB68E60", VA = "0xB68E60")]
	private void Update()
	{
	}

	[Token(Token = "0x600065B")]
	[Address(RVA = "0xB68ED8", Offset = "0xB68ED8", VA = "0xB68ED8")]
	public void RefreshText()
	{
	}

	[Token(Token = "0x600065C")]
	[Address(RVA = "0xB68F64", Offset = "0xB68F64", VA = "0xB68F64")]
	public SaveSlotDisplayer()
	{
	}
}
[Token(Token = "0x20000D7")]
public class SelectiveCuller : MonoBehaviour
{
	[Token(Token = "0x400062A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static SelectiveCuller Instance;

	[Token(Token = "0x400062B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Camera[] cameras;

	[Token(Token = "0x600065D")]
	[Address(RVA = "0xB68F6C", Offset = "0xB68F6C", VA = "0xB68F6C")]
	private void Awake()
	{
	}

	[Token(Token = "0x600065E")]
	[Address(RVA = "0xB68FFC", Offset = "0xB68FFC", VA = "0xB68FFC")]
	private void Start()
	{
	}

	[Token(Token = "0x600065F")]
	[Address(RVA = "0xB6905C", Offset = "0xB6905C", VA = "0xB6905C")]
	public void ChangeCulling(HardwareLevel hardwareLevel, bool aggressive)
	{
	}

	[Token(Token = "0x6000660")]
	[Address(RVA = "0xB692EC", Offset = "0xB692EC", VA = "0xB692EC")]
	public SelectiveCuller()
	{
	}
}
[Token(Token = "0x20000D8")]
public class Selector : MonoBehaviour
{
	[Token(Token = "0x6000661")]
	[Address(RVA = "0xB692F4", Offset = "0xB692F4", VA = "0xB692F4")]
	internal void CloseQuietly()
	{
	}

	[Token(Token = "0x6000662")]
	[Address(RVA = "0xB69360", Offset = "0xB69360", VA = "0xB69360")]
	public Selector()
	{
	}
}
[Token(Token = "0x20000D9")]
public class SelfDestruct : MonoBehaviour
{
	[Token(Token = "0x20000DA")]
	[CompilerGenerated]
	private sealed class <FadeOutTransform>d__5 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000631")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000632")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000633")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float delay;

		[Token(Token = "0x4000634")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float duration;

		[Token(Token = "0x4000635")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform transformToScale;

		[Token(Token = "0x4000636")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool destroy;

		[Token(Token = "0x4000637")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <time>5__2;

		[Token(Token = "0x170000B7")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600066A")]
			[Address(RVA = "0xB696C0", Offset = "0xB696C0", VA = "0xB696C0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B8")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600066C")]
			[Address(RVA = "0xB69708", Offset = "0xB69708", VA = "0xB69708", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000667")]
		[Address(RVA = "0xB69404", Offset = "0xB69404", VA = "0xB69404")]
		[DebuggerHidden]
		public <FadeOutTransform>d__5(int <>1__state)
		{
		}

		[Token(Token = "0x6000668")]
		[Address(RVA = "0xB69530", Offset = "0xB69530", VA = "0xB69530", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000669")]
		[Address(RVA = "0xB69534", Offset = "0xB69534", VA = "0xB69534", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600066B")]
		[Address(RVA = "0xB696C8", Offset = "0xB696C8", VA = "0xB696C8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000DB")]
	[CompilerGenerated]
	private sealed class <SelfDestructWithDelay>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000638")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000639")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400063A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float delay;

		[Token(Token = "0x400063B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public SelfDestruct <>4__this;

		[Token(Token = "0x170000B9")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000670")]
			[Address(RVA = "0xB69808", Offset = "0xB69808", VA = "0xB69808", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000BA")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000672")]
			[Address(RVA = "0xB69850", Offset = "0xB69850", VA = "0xB69850", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600066D")]
		[Address(RVA = "0xB694B0", Offset = "0xB694B0", VA = "0xB694B0")]
		[DebuggerHidden]
		public <SelfDestructWithDelay>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x600066E")]
		[Address(RVA = "0xB69710", Offset = "0xB69710", VA = "0xB69710", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600066F")]
		[Address(RVA = "0xB69714", Offset = "0xB69714", VA = "0xB69714", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000671")]
		[Address(RVA = "0xB69810", Offset = "0xB69810", VA = "0xB69810", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400062C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float DestroyDelay;

	[Token(Token = "0x400062D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool changeScale;

	[Token(Token = "0x400062E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform effectToScale;

	[Token(Token = "0x400062F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float fadeOutScaleDelay;

	[Token(Token = "0x4000630")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float scaleDuration;

	[Token(Token = "0x6000663")]
	[Address(RVA = "0xB69368", Offset = "0xB69368", VA = "0xB69368")]
	[IteratorStateMachine(typeof(<FadeOutTransform>d__5))]
	private static IEnumerator FadeOutTransform(Transform transformToScale, float duration, bool destroy = true, float delay = 0f)
	{
		return null;
	}

	[Token(Token = "0x6000664")]
	[Address(RVA = "0xB6942C", Offset = "0xB6942C", VA = "0xB6942C")]
	[IteratorStateMachine(typeof(<SelfDestructWithDelay>d__6))]
	private IEnumerator SelfDestructWithDelay(float delay)
	{
		return null;
	}

	[Token(Token = "0x6000665")]
	[Address(RVA = "0xB694D8", Offset = "0xB694D8", VA = "0xB694D8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000666")]
	[Address(RVA = "0xB69528", Offset = "0xB69528", VA = "0xB69528")]
	public SelfDestruct()
	{
	}
}
[Token(Token = "0x20000DC")]
public class SelfRegisterPlayerAwareProbe : MonoBehaviour
{
	[Token(Token = "0x6000673")]
	[Address(RVA = "0xB69858", Offset = "0xB69858", VA = "0xB69858")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000674")]
	[Address(RVA = "0xB698C4", Offset = "0xB698C4", VA = "0xB698C4")]
	public SelfRegisterPlayerAwareProbe()
	{
	}
}
[Token(Token = "0x20000DD")]
public class NameCollection
{
	[Token(Token = "0x400063C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public List<string> african;

	[Token(Token = "0x400063D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<string> asian;

	[Token(Token = "0x400063E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<string> arabic;

	[Token(Token = "0x400063F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<string> nordic;

	[Token(Token = "0x4000640")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public List<string> european;

	[Token(Token = "0x6000675")]
	[Address(RVA = "0xB698CC", Offset = "0xB698CC", VA = "0xB698CC")]
	public NameCollection()
	{
	}
}
[Token(Token = "0x20000DE")]
public class ShootEventReceiver : MonoBehaviour
{
	[Token(Token = "0x4000641")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ParticleSystem shootFx;

	[Token(Token = "0x6000676")]
	[Address(RVA = "0xB698D4", Offset = "0xB698D4", VA = "0xB698D4")]
	public void OnShoot()
	{
	}

	[Token(Token = "0x6000677")]
	[Address(RVA = "0xB698F0", Offset = "0xB698F0", VA = "0xB698F0")]
	public ShootEventReceiver()
	{
	}
}
[Token(Token = "0x20000DF")]
public class SimpleHideShowReceiver : MonoBehaviour, IHideShow
{
	[Token(Token = "0x4000642")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject gameObjectToHide;

	[Token(Token = "0x6000678")]
	[Address(RVA = "0xB698F8", Offset = "0xB698F8", VA = "0xB698F8", Slot = "4")]
	public void Hide()
	{
	}

	[Token(Token = "0x6000679")]
	[Address(RVA = "0xB69980", Offset = "0xB69980", VA = "0xB69980", Slot = "5")]
	public void Show()
	{
	}

	[Token(Token = "0x600067A")]
	[Address(RVA = "0xB69A08", Offset = "0xB69A08", VA = "0xB69A08")]
	public SimpleHideShowReceiver()
	{
	}
}
[Token(Token = "0x20000E0")]
public class SmoothCamera : MonoBehaviour
{
	[Token(Token = "0x4000643")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Camera cameraTarget;

	[Token(Token = "0x4000644")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Camera cameraSelf;

	[Token(Token = "0x4000645")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool enableSmooth;

	[Token(Token = "0x4000646")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Range(0f, 12f)]
	public float lerpPositionRate;

	[Token(Token = "0x4000647")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Range(1f, 12f)]
	public float lerpRotationRate;

	[Token(Token = "0x600067B")]
	[Address(RVA = "0xB69A10", Offset = "0xB69A10", VA = "0xB69A10")]
	public void Start()
	{
	}

	[Token(Token = "0x600067C")]
	[Address(RVA = "0xB69BD4", Offset = "0xB69BD4", VA = "0xB69BD4")]
	public void FixedUpdate()
	{
	}

	[Token(Token = "0x600067D")]
	[Address(RVA = "0xB69E74", Offset = "0xB69E74", VA = "0xB69E74")]
	public SmoothCamera()
	{
	}
}
[Token(Token = "0x20000E1")]
public class SmoothFollowVR : MonoBehaviour
{
	[Token(Token = "0x4000648")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform target;

	[Token(Token = "0x4000649")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float smoothTime;

	[Token(Token = "0x400064A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Vector3 velocity;

	[Token(Token = "0x400064B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Vector3 defaultTargetScale;

	[Token(Token = "0x400064C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private Vector3 defaultObjectScale;

	[Token(Token = "0x600067E")]
	[Address(RVA = "0xB69E90", Offset = "0xB69E90", VA = "0xB69E90")]
	private void Awake()
	{
	}

	[Token(Token = "0x600067F")]
	[Address(RVA = "0xB69FE0", Offset = "0xB69FE0", VA = "0xB69FE0")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000680")]
	[Address(RVA = "0xB6A1F4", Offset = "0xB6A1F4", VA = "0xB6A1F4")]
	public SmoothFollowVR()
	{
	}
}
[Token(Token = "0x20000E2")]
[CreateAssetMenu(fileName = "Spawner Configuration", menuName = "Spawner Configuration", order = 0)]
public class SpawnerConfiguration : ScriptableObject
{
	[Token(Token = "0x400064D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("How much time to spawn a new instance")]
	public float spawnDelay;

	[Token(Token = "0x400064E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Tooltip("How many instance can be active at the same time")]
	public int maxInstances;

	[Token(Token = "0x400064F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("The prefab to instantiate")]
	public GameObject prefab;

	[Token(Token = "0x6000681")]
	[Address(RVA = "0xB6A260", Offset = "0xB6A260", VA = "0xB6A260")]
	public SpawnerConfiguration()
	{
	}
}
[Token(Token = "0x20000E3")]
public class SpeedDisplay : MonoBehaviour
{
	[Token(Token = "0x4000650")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TextMeshProUGUI textMeshProUi;

	[Token(Token = "0x6000682")]
	[Address(RVA = "0xB6A274", Offset = "0xB6A274", VA = "0xB6A274")]
	private void Start()
	{
	}

	[Token(Token = "0x6000683")]
	[Address(RVA = "0xB6A348", Offset = "0xB6A348", VA = "0xB6A348")]
	private void Update()
	{
	}

	[Token(Token = "0x6000684")]
	[Address(RVA = "0xB6A278", Offset = "0xB6A278", VA = "0xB6A278")]
	private void RefreshLabel()
	{
	}

	[Token(Token = "0x6000685")]
	[Address(RVA = "0xB6A34C", Offset = "0xB6A34C", VA = "0xB6A34C")]
	public SpeedDisplay()
	{
	}
}
[Token(Token = "0x20000E4")]
[SelectionBase]
public class Spell : MonoBehaviour, ITooltipProvider
{
	[Token(Token = "0x4000651")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SpellType SpellType;

	[Token(Token = "0x4000652")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Header("Miracle Configuration", order = 1)]
	public GameObject ImpactPrefab;

	[Token(Token = "0x4000653")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public MiracleType MiracleType;

	[Token(Token = "0x4000654")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject Tail;

	[Token(Token = "0x4000655")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Header("Deisim Terrain Configuration", order = 2)]
	public TerrainType TerrainType;

	[Token(Token = "0x4000656")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Header("Audio Configuration", order = 3)]
	public AudioSet TerrainSounds;

	[Token(Token = "0x4000657")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool active;

	[Token(Token = "0x4000658")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	private bool alreadyCollided;

	[Token(Token = "0x4000659")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool LastHumanCreatedIsMale;

	[NonSerialized]
	[Token(Token = "0x400065A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public MiracleDescriptor MiracleDescriptor;

	[Token(Token = "0x400065B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[Header("Spell Tooltip Info", order = 4)]
	public string tooltipTitleKey;

	[Token(Token = "0x400065C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public string tooltipDescriptionKey;

	[Token(Token = "0x170000BB")]
	public float Cost
	{
		[Token(Token = "0x6000686")]
		[Address(RVA = "0xB6A354", Offset = "0xB6A354", VA = "0xB6A354")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170000BC")]
	public float Karma
	{
		[Token(Token = "0x6000687")]
		[Address(RVA = "0xB6A35C", Offset = "0xB6A35C", VA = "0xB6A35C")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x6000688")]
	[Address(RVA = "0xB6A364", Offset = "0xB6A364", VA = "0xB6A364")]
	public void Awake()
	{
	}

	[Token(Token = "0x6000689")]
	[Address(RVA = "0xB6A520", Offset = "0xB6A520", VA = "0xB6A520")]
	public void FixedUpdate()
	{
	}

	[Token(Token = "0x600068A")]
	[Address(RVA = "0xB6A528", Offset = "0xB6A528", VA = "0xB6A528")]
	public void Init()
	{
	}

	[Token(Token = "0x600068B")]
	[Address(RVA = "0xB6A534", Offset = "0xB6A534", VA = "0xB6A534")]
	public void Disable()
	{
	}

	[Token(Token = "0x600068C")]
	[Address(RVA = "0xB6A53C", Offset = "0xB6A53C", VA = "0xB6A53C")]
	public bool IsActive()
	{
		return default(bool);
	}

	[Token(Token = "0x600068D")]
	[Address(RVA = "0xB6A544", Offset = "0xB6A544", VA = "0xB6A544")]
	public void OnCollisionEnter(Collision other)
	{
	}

	[Token(Token = "0x600068E")]
	[Address(RVA = "0xB6B27C", Offset = "0xB6B27C", VA = "0xB6B27C", Slot = "4")]
	public TooltipDescription GetTooltip()
	{
		return default(TooltipDescription);
	}

	[Token(Token = "0x600068F")]
	[Address(RVA = "0xB6B368", Offset = "0xB6B368", VA = "0xB6B368")]
	public Spell()
	{
	}
}
[Token(Token = "0x20000E5")]
[CreateAssetMenu(menuName = "Spell/Spell list")]
public class SpellList : ScriptableObject
{
	[Token(Token = "0x400065D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] powers;

	[Token(Token = "0x6000690")]
	[Address(RVA = "0xB6B370", Offset = "0xB6B370", VA = "0xB6B370")]
	public SpellList()
	{
	}
}
[Token(Token = "0x20000E6")]
public class SpellWheel : MonoBehaviour
{
	[Token(Token = "0x400065E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool debug;

	[Token(Token = "0x400065F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public SpellList powerList;

	[Token(Token = "0x4000660")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float radiusFactor;

	[Token(Token = "0x4000661")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float spellSize;

	[Token(Token = "0x4000662")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private GameObject trigger;

	[Token(Token = "0x4000663")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private GameObject textInfo;

	[Token(Token = "0x4000664")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private GameObject text;

	[Token(Token = "0x4000665")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private List<GameObject> items;

	[Token(Token = "0x6000691")]
	[Address(RVA = "0xB6B378", Offset = "0xB6B378", VA = "0xB6B378")]
	private void Start()
	{
	}

	[Token(Token = "0x6000692")]
	[Address(RVA = "0xB6B828", Offset = "0xB6B828", VA = "0xB6B828")]
	public void openWheel()
	{
	}

	[Token(Token = "0x6000693")]
	[Address(RVA = "0xB6B874", Offset = "0xB6B874", VA = "0xB6B874")]
	public void closeWheel()
	{
	}

	[Token(Token = "0x6000694")]
	[Address(RVA = "0xB6B3B4", Offset = "0xB6B3B4", VA = "0xB6B3B4")]
	private void CreateWheel(Vector3 center)
	{
	}

	[Token(Token = "0x6000695")]
	[Address(RVA = "0xB6BA68", Offset = "0xB6BA68", VA = "0xB6BA68")]
	public SpellWheel()
	{
	}
}
[Token(Token = "0x20000E7")]
public class SpellWheelManager : MonoBehaviour
{
	[Token(Token = "0x4000666")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static SpellWheelManager _instance;

	[Token(Token = "0x4000667")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private List<GameObject> wheelItems;

	[Token(Token = "0x4000668")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject lands;

	[Token(Token = "0x4000669")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject miracles;

	[Token(Token = "0x400066A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject creature;

	[Token(Token = "0x400066B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[HideInInspector]
	public Transform lookTarget;

	[Token(Token = "0x400066C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool subMenuOpen;

	[Token(Token = "0x6000696")]
	[Address(RVA = "0xB6BAFC", Offset = "0xB6BAFC", VA = "0xB6BAFC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000697")]
	[Address(RVA = "0xB6BBC8", Offset = "0xB6BBC8", VA = "0xB6BBC8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000698")]
	[Address(RVA = "0xB6BBCC", Offset = "0xB6BBCC", VA = "0xB6BBCC")]
	public void openLands()
	{
	}

	[Token(Token = "0x6000699")]
	[Address(RVA = "0xB6BCB8", Offset = "0xB6BCB8", VA = "0xB6BCB8")]
	public void openMiracle()
	{
	}

	[Token(Token = "0x600069A")]
	[Address(RVA = "0xB6BD3C", Offset = "0xB6BD3C", VA = "0xB6BD3C")]
	public void openCreatures()
	{
	}

	[Token(Token = "0x600069B")]
	[Address(RVA = "0xB6BC50", Offset = "0xB6BC50", VA = "0xB6BC50")]
	public void openSubMenu(SpellWheel[] subSpell)
	{
	}

	[Token(Token = "0x600069C")]
	[Address(RVA = "0xB6BDC0", Offset = "0xB6BDC0", VA = "0xB6BDC0")]
	public void close()
	{
	}

	[Token(Token = "0x600069D")]
	[Address(RVA = "0xB6BE0C", Offset = "0xB6BE0C", VA = "0xB6BE0C")]
	public void initMenu()
	{
	}

	[Token(Token = "0x600069E")]
	[Address(RVA = "0xB6BE58", Offset = "0xB6BE58", VA = "0xB6BE58")]
	public SpellWheelManager()
	{
	}
}
[Token(Token = "0x20000E8")]
public class SpreadFire : MonoBehaviour
{
	[Token(Token = "0x20000E9")]
	[CompilerGenerated]
	private sealed class <BurnSurroundingsCoroutine>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000672")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000673")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000674")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SpreadFire <>4__this;

		[Token(Token = "0x170000BD")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60006A6")]
			[Address(RVA = "0xB6C3A4", Offset = "0xB6C3A4", VA = "0xB6C3A4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000BE")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60006A8")]
			[Address(RVA = "0xB6C3EC", Offset = "0xB6C3EC", VA = "0xB6C3EC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60006A3")]
		[Address(RVA = "0xB6BF98", Offset = "0xB6BF98", VA = "0xB6BF98")]
		[DebuggerHidden]
		public <BurnSurroundingsCoroutine>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x60006A4")]
		[Address(RVA = "0xB6C040", Offset = "0xB6C040", VA = "0xB6C040", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60006A5")]
		[Address(RVA = "0xB6C044", Offset = "0xB6C044", VA = "0xB6C044", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60006A7")]
		[Address(RVA = "0xB6C3AC", Offset = "0xB6C3AC", VA = "0xB6C3AC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400066D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float radius;

	[Token(Token = "0x400066E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int FireSpreadThisFrame;

	[Token(Token = "0x400066F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static readonly Collider[] QueryResult;

	[Token(Token = "0x4000670")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float startTime;

	[Token(Token = "0x4000671")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float delay;

	[Token(Token = "0x600069F")]
	[Address(RVA = "0xB6BEE0", Offset = "0xB6BEE0", VA = "0xB6BEE0")]
	private void Awake()
	{
	}

	[Token(Token = "0x60006A0")]
	[Address(RVA = "0xB6BF24", Offset = "0xB6BF24", VA = "0xB6BF24")]
	[IteratorStateMachine(typeof(<BurnSurroundingsCoroutine>d__6))]
	private IEnumerator BurnSurroundingsCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60006A1")]
	[Address(RVA = "0xB6BFC0", Offset = "0xB6BFC0", VA = "0xB6BFC0")]
	public SpreadFire()
	{
	}
}
[Serializable]
[Token(Token = "0x20000EA")]
public struct ResourceQuantity
{
	[Token(Token = "0x4000675")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ResourceType ResourceType;

	[Token(Token = "0x4000676")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public int Quantity;
}
[Token(Token = "0x20000EB")]
public struct ResourceStatus
{
	[Token(Token = "0x4000677")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public readonly ResourceType ResourceType;

	[Token(Token = "0x4000678")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public readonly int CurrentStock;

	[Token(Token = "0x4000679")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public readonly int MaxStock;

	[Token(Token = "0x170000BF")]
	public float Percentage
	{
		[Token(Token = "0x60006A9")]
		[Address(RVA = "0xB6C3F4", Offset = "0xB6C3F4", VA = "0xB6C3F4")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170000C0")]
	public StockLevel StockLevel
	{
		[Token(Token = "0x60006AA")]
		[Address(RVA = "0xB60CF0", Offset = "0xB60CF0", VA = "0xB60CF0")]
		get
		{
			return default(StockLevel);
		}
	}

	[Token(Token = "0x60006AB")]
	[Address(RVA = "0xB6C474", Offset = "0xB6C474", VA = "0xB6C474")]
	public ResourceStatus(ResourceType resourceType, int currentStock, int maxStock)
	{
	}

	[Token(Token = "0x60006AC")]
	[Address(RVA = "0xB6C414", Offset = "0xB6C414", VA = "0xB6C414")]
	public static StockLevel GetStockLevel(int currentStock, int maxStock)
	{
		return default(StockLevel);
	}

	[Token(Token = "0x60006AD")]
	[Address(RVA = "0xB6C480", Offset = "0xB6C480", VA = "0xB6C480", Slot = "3")]
	public override string ToString()
	{
		return null;
	}
}
[Token(Token = "0x20000EC")]
public class TeamColorManager : MonoBehaviour
{
	[Token(Token = "0x400067A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<Renderer> renderers;

	[Token(Token = "0x400067B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly int TeamColor;

	[Token(Token = "0x60006AE")]
	[Address(RVA = "0xB6C6C0", Offset = "0xB6C6C0", VA = "0xB6C6C0")]
	public void OnColorChanged(Color newColor)
	{
	}

	[Token(Token = "0x60006AF")]
	[Address(RVA = "0xB6C914", Offset = "0xB6C914", VA = "0xB6C914")]
	public TeamColorManager()
	{
	}
}
[Token(Token = "0x20000ED")]
public class TeamColorSetter : MonoBehaviour
{
	[Token(Token = "0x400067C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<Renderer> renderers;

	[Token(Token = "0x400067D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly int TeamColor;

	[Token(Token = "0x60006B1")]
	[Address(RVA = "0xB6CA04", Offset = "0xB6CA04", VA = "0xB6CA04")]
	private void Awake()
	{
	}

	[Token(Token = "0x60006B2")]
	[Address(RVA = "0xB6CB30", Offset = "0xB6CB30", VA = "0xB6CB30")]
	private void Start()
	{
	}

	[Token(Token = "0x60006B3")]
	[Address(RVA = "0xB6CEBC", Offset = "0xB6CEBC", VA = "0xB6CEBC")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x60006B4")]
	[Address(RVA = "0xB6CC68", Offset = "0xB6CC68", VA = "0xB6CC68")]
	public void OnColorChanged(Color newColor)
	{
	}

	[Token(Token = "0x60006B5")]
	[Address(RVA = "0xB6D000", Offset = "0xB6D000", VA = "0xB6D000")]
	public TeamColorSetter()
	{
	}
}
[Token(Token = "0x20000EE")]
public class TerrainRandomizer : MonoBehaviour
{
	[Token(Token = "0x60006B7")]
	[Address(RVA = "0xB6D070", Offset = "0xB6D070", VA = "0xB6D070")]
	private void Start()
	{
	}

	[Token(Token = "0x60006B8")]
	[Address(RVA = "0xB6D14C", Offset = "0xB6D14C", VA = "0xB6D14C")]
	public TerrainRandomizer()
	{
	}
}
[Serializable]
[Token(Token = "0x20000EF")]
public class CoastTypeList
{
	[Token(Token = "0x400067E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ColorVariable TerrainColor;

	[Token(Token = "0x400067F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ColorVariable TerrainSlopeColor;

	[Token(Token = "0x4000680")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public CombinedTerrainCollection TerrainTypes;

	[Token(Token = "0x60006B9")]
	[Address(RVA = "0xB6D154", Offset = "0xB6D154", VA = "0xB6D154")]
	public CoastTypeList()
	{
	}
}
[Token(Token = "0x20000F0")]
[CreateAssetMenu(menuName = "Terrains/Coast Collection")]
public class CoastCollection : ScriptableObject
{
	[Token(Token = "0x4000681")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float coastOffset;

	[Token(Token = "0x4000682")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float cornerOffset;

	[Token(Token = "0x4000683")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float heightCoast;

	[Token(Token = "0x4000684")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject StraightCoastPrefab;

	[Token(Token = "0x4000685")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject InnerRightCornerCoastPrefab;

	[Token(Token = "0x4000686")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject InnerLeftCornerCoastPrefab;

	[Token(Token = "0x4000687")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject OuterRightCornerCoastPrefab;

	[Token(Token = "0x4000688")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject OuterLeftCornerCoastPrefab;

	[Token(Token = "0x4000689")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject EndRightPieceCoastPrefab;

	[Token(Token = "0x400068A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject EndLeftPieceCoastPrefab;

	[Token(Token = "0x400068B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public GameObject ConnectorRightCoastPrefab;

	[Token(Token = "0x400068C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public GameObject ConnectorLeftCoastPrefab;

	[Token(Token = "0x400068D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public CombinedTerrainCollection CoastlessTiles;

	[Token(Token = "0x400068E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public CombinedTerrainCollection CoastlessTilesWithEnd;

	[Token(Token = "0x400068F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public List<CoastTypeList> CoastTypeLists;

	[Token(Token = "0x60006BA")]
	[Address(RVA = "0xB6D15C", Offset = "0xB6D15C", VA = "0xB6D15C")]
	public bool SelectCoastColor(TerrainType terrainType, out Color terrainColor, out Color terrainSlopeColor)
	{
		return default(bool);
	}

	[Token(Token = "0x60006BB")]
	[Address(RVA = "0xB6D378", Offset = "0xB6D378", VA = "0xB6D378")]
	public CoastCollection()
	{
	}
}
[Token(Token = "0x20000F1")]
[CreateAssetMenu(menuName = "Terrains/Combined Terrain Collection")]
public class CombinedTerrainCollection : ScriptableObject
{
	[Token(Token = "0x4000690")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<TerrainCollection> TerrainCollections;

	[Token(Token = "0x4000691")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<TerrainType> TerrainTypes;

	[Token(Token = "0x60006BC")]
	[Address(RVA = "0xB6D418", Offset = "0xB6D418", VA = "0xB6D418")]
	private List<TerrainType> GetValues()
	{
		return null;
	}

	[Token(Token = "0x60006BD")]
	[Address(RVA = "0xB6D7B4", Offset = "0xB6D7B4", VA = "0xB6D7B4")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x60006BE")]
	[Address(RVA = "0xB6D470", Offset = "0xB6D470", VA = "0xB6D470")]
	public void RefreshList()
	{
	}

	[Token(Token = "0x60006BF")]
	[Address(RVA = "0xB6D368", Offset = "0xB6D368", VA = "0xB6D368")]
	public static implicit operator List<TerrainType>(CombinedTerrainCollection combinedTerrainCollection)
	{
		return null;
	}

	[Token(Token = "0x60006C0")]
	[Address(RVA = "0xB6D7B8", Offset = "0xB6D7B8", VA = "0xB6D7B8")]
	public CombinedTerrainCollection()
	{
	}
}
[Token(Token = "0x20000F2")]
[SelectionBase]
public class DeisimTerrain : MonoBehaviour
{
	[Token(Token = "0x20000F3")]
	[CompilerGenerated]
	private sealed class <Create>d__38 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40006B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40006B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40006B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DeisimTerrain <>4__this;

		[Token(Token = "0x40006B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Transform <thisTransform>5__2;

		[Token(Token = "0x40006B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 <finalPos>5__3;

		[Token(Token = "0x40006B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float <finalY>5__4;

		[Token(Token = "0x40006BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float <startY>5__5;

		[Token(Token = "0x40006BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float <time>5__6;

		[Token(Token = "0x170000C2")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60006D3")]
			[Address(RVA = "0xB6FDF4", Offset = "0xB6FDF4", VA = "0xB6FDF4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C3")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60006D5")]
			[Address(RVA = "0xB6FE3C", Offset = "0xB6FE3C", VA = "0xB6FE3C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60006D0")]
		[Address(RVA = "0xB6DBC4", Offset = "0xB6DBC4", VA = "0xB6DBC4")]
		[DebuggerHidden]
		public <Create>d__38(int <>1__state)
		{
		}

		[Token(Token = "0x60006D1")]
		[Address(RVA = "0xB6FA2C", Offset = "0xB6FA2C", VA = "0xB6FA2C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60006D2")]
		[Address(RVA = "0xB6FA30", Offset = "0xB6FA30", VA = "0xB6FA30", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60006D4")]
		[Address(RVA = "0xB6FDFC", Offset = "0xB6FDFC", VA = "0xB6FDFC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000692")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TerrainAnimationConfiguration animationConfiguration;

	[Token(Token = "0x4000693")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Renderer Renderer;

	[Token(Token = "0x4000694")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public CoastManager CoastManager;

	[Token(Token = "0x4000695")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public TerrainType type;

	[Token(Token = "0x4000696")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject Column;

	[Token(Token = "0x4000697")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject Decoration;

	[Token(Token = "0x4000698")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public DeisimTerrainColorCollection DeisimTerrainColorCollection;

	[Token(Token = "0x4000699")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public CombinedTerrainCollection CoastlessTiles;

	[Token(Token = "0x400069A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Header("Mountain", order = 2)]
	public GameObject GrassMountain;

	[Token(Token = "0x400069B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public GameObject SnowMountain;

	[Token(Token = "0x400069C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public GameObject SandMountain;

	[Token(Token = "0x400069D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Color mainColor;

	[Token(Token = "0x400069E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Color westColor;

	[Token(Token = "0x400069F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Color northColor;

	[Token(Token = "0x40006A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private Color eastColor;

	[Token(Token = "0x40006A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Color southColor;

	[Token(Token = "0x40006A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private Color northWestColor;

	[Token(Token = "0x40006A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private Color northEastColor;

	[Token(Token = "0x40006A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private Color southWestColor;

	[Token(Token = "0x40006A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private Color southEastColor;

	[Token(Token = "0x40006A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private Color midTopColor;

	[Token(Token = "0x40006A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private Color midColor;

	[Token(Token = "0x40006A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private Color midBotColor;

	[Token(Token = "0x40006A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private Color botColor;

	[Token(Token = "0x40006AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private bool columnVisible;

	[Token(Token = "0x40006AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly int Color;

	[Token(Token = "0x40006AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static readonly int ColorMidTop;

	[Token(Token = "0x40006AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static readonly int ColorMid;

	[Token(Token = "0x40006AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static readonly int ColorMidBot;

	[Token(Token = "0x40006AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static readonly int ColorBot;

	[Token(Token = "0x40006B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public TerrainColorManager TerrainColorManager;

	[Token(Token = "0x40006B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public bool isColumnAlwaysVisible;

	[Token(Token = "0x40006B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	private RegisterAmbientArea ambience;

	[Token(Token = "0x170000C1")]
	public bool isMoving
	{
		[Token(Token = "0x60006C1")]
		[Address(RVA = "0xB6D890", Offset = "0xB6D890", VA = "0xB6D890")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60006C2")]
		[Address(RVA = "0xB6D898", Offset = "0xB6D898", VA = "0xB6D898")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x60006C3")]
	[Address(RVA = "0xB6D8A4", Offset = "0xB6D8A4", VA = "0xB6D8A4")]
	private void SetInstancedMaterialData()
	{
	}

	[Token(Token = "0x60006C4")]
	[Address(RVA = "0xB6DB50", Offset = "0xB6DB50", VA = "0xB6DB50")]
	[IteratorStateMachine(typeof(<Create>d__38))]
	private IEnumerator Create()
	{
		return null;
	}

	[Token(Token = "0x60006C5")]
	[Address(RVA = "0xB6DBEC", Offset = "0xB6DBEC", VA = "0xB6DBEC")]
	private void Start()
	{
	}

	[Token(Token = "0x60006C6")]
	[Address(RVA = "0xB6E63C", Offset = "0xB6E63C", VA = "0xB6E63C")]
	public void UpdateNeighbour(DeisimTerrain neighbour, Direction direction)
	{
	}

	[Token(Token = "0x60006C7")]
	[Address(RVA = "0xB6E078", Offset = "0xB6E078", VA = "0xB6E078")]
	public void SetWaterColor()
	{
	}

	[Token(Token = "0x60006C8")]
	[Address(RVA = "0xB6E73C", Offset = "0xB6E73C", VA = "0xB6E73C")]
	public void CheckTerrainSwap()
	{
	}

	[Token(Token = "0x60006C9")]
	[Address(RVA = "0xB6E170", Offset = "0xB6E170", VA = "0xB6E170")]
	public void RefreshBorders()
	{
	}

	[Token(Token = "0x60006CA")]
	[Address(RVA = "0xB6F4A4", Offset = "0xB6F4A4", VA = "0xB6F4A4")]
	private void ApplyColumnState()
	{
	}

	[Token(Token = "0x60006CB")]
	[Address(RVA = "0xB6ED20", Offset = "0xB6ED20", VA = "0xB6ED20")]
	private void RefreshMountain()
	{
	}

	[Token(Token = "0x60006CC")]
	[Address(RVA = "0xB6F6F4", Offset = "0xB6F6F4", VA = "0xB6F6F4")]
	public void SetFloorToConcrete(bool partial)
	{
	}

	[Token(Token = "0x60006CD")]
	[Address(RVA = "0xB6F800", Offset = "0xB6F800", VA = "0xB6F800")]
	public void ShowNaturalGround()
	{
	}

	[Token(Token = "0x60006CE")]
	[Address(RVA = "0xB6F8FC", Offset = "0xB6F8FC", VA = "0xB6F8FC")]
	public DeisimTerrain()
	{
	}
}
[Serializable]
[Token(Token = "0x20000F6")]
public class TerrainColorList
{
	[Token(Token = "0x40006BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool IsWater;

	[Token(Token = "0x40006C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
	public bool DoesTerrainBlend;

	[Token(Token = "0x40006C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ColorVariable MainColor;

	[Token(Token = "0x40006C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ColorVariable MidTopColor;

	[Token(Token = "0x40006C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ColorVariable MidColor;

	[Token(Token = "0x40006C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ColorVariable MidBotColor;

	[Token(Token = "0x40006C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public ColorVariable BotColor;

	[Token(Token = "0x40006C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public CombinedTerrainCollection TerrainTypes;

	[Token(Token = "0x60006DB")]
	[Address(RVA = "0xB6FF20", Offset = "0xB6FF20", VA = "0xB6FF20")]
	public TerrainColorList()
	{
	}
}
[Token(Token = "0x20000F7")]
[CreateAssetMenu(menuName = "Terrains/Terrain Color Collection")]
public class DeisimTerrainColorCollection : ScriptableObject
{
	[Token(Token = "0x40006C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Material BaseTerrainMaterial;

	[Token(Token = "0x40006C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Material BorderTerrainMaterial;

	[Token(Token = "0x40006C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<TerrainColorList> TerrainColorLists;

	[Token(Token = "0x60006DC")]
	[Address(RVA = "0xB6DDEC", Offset = "0xB6DDEC", VA = "0xB6DDEC")]
	public bool SelectTerrainColor(TerrainType terrain, out Color mainColor, out Color midTopColor, out Color midColor, out Color midBotColor, out Color botColor, out bool isWater)
	{
		return default(bool);
	}

	[Token(Token = "0x60006DD")]
	[Address(RVA = "0xB6FF30", Offset = "0xB6FF30", VA = "0xB6FF30")]
	public bool SelectTerrainColor(TerrainType terrain, out Color mainColor, out bool isWater)
	{
		return default(bool);
	}

	[Token(Token = "0x60006DE")]
	[Address(RVA = "0xB6F4E0", Offset = "0xB6F4E0", VA = "0xB6F4E0")]
	public bool SelectTerrainColor(TerrainType terrain, out Color mainColor, out bool isWater, out bool doesTerrainBlend)
	{
		return default(bool);
	}

	[Token(Token = "0x60006DF")]
	[Address(RVA = "0xB7012C", Offset = "0xB7012C", VA = "0xB7012C")]
	public DeisimTerrainColorCollection()
	{
	}
}
[Token(Token = "0x20000F8")]
public class MaelstromBehavior : MonoBehaviour
{
	[Token(Token = "0x40006CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private List<Collider> affectedObjects;

	[Token(Token = "0x40006CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Color color;

	[Token(Token = "0x40006CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float size;

	[Token(Token = "0x40006CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float _elapsedTime;

	[Token(Token = "0x40006CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public MaelstromConfiguration configuration;

	[Token(Token = "0x40006CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool isUpdateNeeded;

	[Token(Token = "0x40006D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public MeshRenderer maelstromMaterialMeshRenderer;

	[Token(Token = "0x40006D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly int SizeID;

	[Token(Token = "0x40006D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static readonly int ColorID;

	[Token(Token = "0x40006D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static readonly LayerMask HandsLayer;

	[Token(Token = "0x40006D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool isEnabled;

	[Token(Token = "0x40006D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private float CreationCooldown;

	[Token(Token = "0x40006D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float CreationTimer;

	[Token(Token = "0x60006E0")]
	[Address(RVA = "0xB701B4", Offset = "0xB701B4", VA = "0xB701B4")]
	private void Start()
	{
	}

	[Token(Token = "0x60006E1")]
	[Address(RVA = "0xB701F0", Offset = "0xB701F0", VA = "0xB701F0")]
	private void Update()
	{
	}

	[Token(Token = "0x60006E2")]
	[Address(RVA = "0xB7034C", Offset = "0xB7034C", VA = "0xB7034C")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60006E3")]
	[Address(RVA = "0xB705D0", Offset = "0xB705D0", VA = "0xB705D0")]
	private void EnterCollider(Collider other)
	{
	}

	[Token(Token = "0x60006E4")]
	[Address(RVA = "0xB70904", Offset = "0xB70904", VA = "0xB70904")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x60006E5")]
	[Address(RVA = "0xB709C0", Offset = "0xB709C0", VA = "0xB709C0")]
	private void OnTriggerStay(Collider other)
	{
	}

	[Token(Token = "0x60006E6")]
	[Address(RVA = "0xB70EE4", Offset = "0xB70EE4", VA = "0xB70EE4")]
	private void CheckForExplode(Collider other)
	{
	}

	[Token(Token = "0x60006E7")]
	[Address(RVA = "0xB70FB8", Offset = "0xB70FB8", VA = "0xB70FB8")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x60006E8")]
	[Address(RVA = "0xB6ED0C", Offset = "0xB6ED0C", VA = "0xB6ED0C")]
	public void SetColor(Color c)
	{
	}

	[Token(Token = "0x60006E9")]
	[Address(RVA = "0xB70280", Offset = "0xB70280", VA = "0xB70280")]
	private void UpdateMaterialProperty()
	{
	}

	[Token(Token = "0x60006EA")]
	[Address(RVA = "0xB71218", Offset = "0xB71218", VA = "0xB71218")]
	public MaelstromBehavior()
	{
	}
}
[Token(Token = "0x20000F9")]
[CreateAssetMenu(menuName = "Terrains/Terrain Collection")]
public class TerrainCollection : ScriptableObject
{
	[Token(Token = "0x40006D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<TerrainType> TerrainTypes;

	[Token(Token = "0x60006EC")]
	[Address(RVA = "0xB71364", Offset = "0xB71364", VA = "0xB71364")]
	public static implicit operator List<TerrainType>(TerrainCollection terrainCollection)
	{
		return null;
	}

	[Token(Token = "0x60006ED")]
	[Address(RVA = "0xB7137C", Offset = "0xB7137C", VA = "0xB7137C")]
	public TerrainCollection()
	{
	}
}
[Token(Token = "0x20000FA")]
public class TextDisplay : MonoBehaviour, ILocalizedText
{
	[Token(Token = "0x20000FB")]
	[CompilerGenerated]
	private sealed class <FadeOutMessage>d__17 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40006E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40006E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40006E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float duration;

		[Token(Token = "0x40006E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TextDisplay <>4__this;

		[Token(Token = "0x40006E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <start>5__2;

		[Token(Token = "0x170000C4")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600070E")]
			[Address(RVA = "0xB75FDC", Offset = "0xB75FDC", VA = "0xB75FDC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C5")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000710")]
			[Address(RVA = "0xB76024", Offset = "0xB76024", VA = "0xB76024", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600070B")]
		[Address(RVA = "0xB71B88", Offset = "0xB71B88", VA = "0xB71B88")]
		[DebuggerHidden]
		public <FadeOutMessage>d__17(int <>1__state)
		{
		}

		[Token(Token = "0x600070C")]
		[Address(RVA = "0xB75F40", Offset = "0xB75F40", VA = "0xB75F40", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600070D")]
		[Address(RVA = "0xB75F44", Offset = "0xB75F44", VA = "0xB75F44", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600070F")]
		[Address(RVA = "0xB75FE4", Offset = "0xB75FE4", VA = "0xB75FE4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000FC")]
	[CompilerGenerated]
	private sealed class <DisplayLoadingMessages>d__18 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40006E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40006E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40006E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TextDisplay <>4__this;

		[Token(Token = "0x40006EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string <lastLoadingKey>5__2;

		[Token(Token = "0x40006EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private string <currentLoadingKey>5__3;

		[Token(Token = "0x40006EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool <done>5__4;

		[Token(Token = "0x170000C6")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000714")]
			[Address(RVA = "0xB76268", Offset = "0xB76268", VA = "0xB76268", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C7")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000716")]
			[Address(RVA = "0xB762B0", Offset = "0xB762B0", VA = "0xB762B0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000711")]
		[Address(RVA = "0xB71BB0", Offset = "0xB71BB0", VA = "0xB71BB0")]
		[DebuggerHidden]
		public <DisplayLoadingMessages>d__18(int <>1__state)
		{
		}

		[Token(Token = "0x6000712")]
		[Address(RVA = "0xB7602C", Offset = "0xB7602C", VA = "0xB7602C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000713")]
		[Address(RVA = "0xB76030", Offset = "0xB76030", VA = "0xB76030", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000715")]
		[Address(RVA = "0xB76270", Offset = "0xB76270", VA = "0xB76270", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40006D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private TMP_Text textMeshPro;

	[Token(Token = "0x40006D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Coroutine fadeOutMessageCoroutine;

	[Token(Token = "0x40006DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Coroutine loadingMessageCoroutine;

	[Token(Token = "0x40006DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private string lastKey;

	[Token(Token = "0x40006DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float lastMessageTime;

	[Token(Token = "0x40006DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly string cityNameTag;

	[Token(Token = "0x40006DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static readonly string realmNameTag;

	[Token(Token = "0x40006DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static readonly string leaderNameTag;

	[Token(Token = "0x40006E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static readonly string otherRealmNameTag;

	[Token(Token = "0x40006E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static readonly string amountTag;

	[Token(Token = "0x60006EE")]
	[Address(RVA = "0xB71384", Offset = "0xB71384", VA = "0xB71384")]
	private void Awake()
	{
	}

	[Token(Token = "0x60006EF")]
	[Address(RVA = "0xB71478", Offset = "0xB71478", VA = "0xB71478")]
	private void Start()
	{
	}

	[Token(Token = "0x60006F0")]
	[Address(RVA = "0xB71504", Offset = "0xB71504", VA = "0xB71504")]
	public void SetText(Deisim.Enums.Message message, ControllerType controllerType)
	{
	}

	[Token(Token = "0x60006F1")]
	[Address(RVA = "0xB719F8", Offset = "0xB719F8", VA = "0xB719F8")]
	public void Clear()
	{
	}

	[Token(Token = "0x60006F2")]
	[Address(RVA = "0xB71A60", Offset = "0xB71A60", VA = "0xB71A60")]
	public void DisplayLoadingProgress()
	{
	}

	[Token(Token = "0x60006F3")]
	[Address(RVA = "0xB71878", Offset = "0xB71878", VA = "0xB71878")]
	public void SetText(string message, float duration, [Optional] Vector3? position)
	{
	}

	[Token(Token = "0x60006F4")]
	[Address(RVA = "0xB718E0", Offset = "0xB718E0", VA = "0xB718E0")]
	private void SetText(string message, [Optional] Vector3? position)
	{
	}

	[Token(Token = "0x60006F5")]
	[Address(RVA = "0xB71B04", Offset = "0xB71B04", VA = "0xB71B04")]
	[IteratorStateMachine(typeof(<FadeOutMessage>d__17))]
	private IEnumerator FadeOutMessage(float duration)
	{
		return null;
	}

	[Token(Token = "0x60006F6")]
	[Address(RVA = "0xB71A90", Offset = "0xB71A90", VA = "0xB71A90")]
	[IteratorStateMachine(typeof(<DisplayLoadingMessages>d__18))]
	private IEnumerator DisplayLoadingMessages()
	{
		return null;
	}

	[Token(Token = "0x60006F7")]
	[Address(RVA = "0xB717E0", Offset = "0xB717E0", VA = "0xB717E0")]
	private string GetLocalizedValue(string key)
	{
		return null;
	}

	[Token(Token = "0x60006F8")]
	[Address(RVA = "0xB71BD8", Offset = "0xB71BD8", VA = "0xB71BD8", Slot = "4")]
	public void RefreshLabel()
	{
	}

	[Token(Token = "0x60006F9")]
	[Address(RVA = "0xB71C68", Offset = "0xB71C68", VA = "0xB71C68")]
	public void NotifyCityUpgrade(string cityName, Color32 cityNameColor, TechLevel techLevel)
	{
	}

	[Token(Token = "0x60006FA")]
	[Address(RVA = "0xB72064", Offset = "0xB72064", VA = "0xB72064")]
	public void NotifyNewRealm(Realm realm)
	{
	}

	[Token(Token = "0x60006FB")]
	[Address(RVA = "0xB72564", Offset = "0xB72564", VA = "0xB72564")]
	public void NotifyRealmDestroyed(string realmName, Color color)
	{
	}

	[Token(Token = "0x60006FC")]
	[Address(RVA = "0xB72824", Offset = "0xB72824", VA = "0xB72824")]
	public void NotifyRealmSplit(string realmName, Color color, int parts)
	{
	}

	[Token(Token = "0x60006FD")]
	[Address(RVA = "0xB72B28", Offset = "0xB72B28", VA = "0xB72B28")]
	public void NotifyNewLeader(Realm realm)
	{
	}

	[Token(Token = "0x60006FE")]
	[Address(RVA = "0xB72E10", Offset = "0xB72E10", VA = "0xB72E10")]
	public void NotifyCityCapture(Town city, Realm realm)
	{
	}

	[Token(Token = "0x60006FF")]
	[Address(RVA = "0xB732F4", Offset = "0xB732F4", VA = "0xB732F4")]
	public void NotifyNewArmy(Town city, Realm realm)
	{
	}

	[Token(Token = "0x6000700")]
	[Address(RVA = "0xB737D8", Offset = "0xB737D8", VA = "0xB737D8")]
	public void NotifyWar(Realm realm1, Realm realm2)
	{
	}

	[Token(Token = "0x6000701")]
	[Address(RVA = "0xB73C3C", Offset = "0xB73C3C", VA = "0xB73C3C")]
	public void NotifyTradeAgreement(Realm realm1, Realm realm2)
	{
	}

	[Token(Token = "0x6000702")]
	[Address(RVA = "0xB740A0", Offset = "0xB740A0", VA = "0xB740A0")]
	public void NotifyTradeAgreementEnd(Realm realm1, Realm realm2)
	{
	}

	[Token(Token = "0x6000703")]
	[Address(RVA = "0xB74504", Offset = "0xB74504", VA = "0xB74504")]
	public void NotifyPeace(Realm realm1, Realm realm2)
	{
	}

	[Token(Token = "0x6000704")]
	[Address(RVA = "0xB74968", Offset = "0xB74968", VA = "0xB74968")]
	public void NotifyNewCapital(Realm realm)
	{
	}

	[Token(Token = "0x6000705")]
	[Address(RVA = "0xB74E5C", Offset = "0xB74E5C", VA = "0xB74E5C")]
	public void NotifyTooManyPlayerRealms()
	{
	}

	[Token(Token = "0x6000706")]
	[Address(RVA = "0xB74EBC", Offset = "0xB74EBC", VA = "0xB74EBC")]
	public void NotifyRebellion(Realm realm)
	{
	}

	[Token(Token = "0x6000707")]
	[Address(RVA = "0xB753B0", Offset = "0xB753B0", VA = "0xB753B0")]
	public void NotifyHereticRebellion(Realm realm)
	{
	}

	[Token(Token = "0x6000708")]
	[Address(RVA = "0xB758A4", Offset = "0xB758A4", VA = "0xB758A4")]
	public void NotifyOmenDecision(OmenDecision omenDecision, Realm realm, Town target, string traits)
	{
	}

	[Token(Token = "0x6000709")]
	[Address(RVA = "0xB75E14", Offset = "0xB75E14", VA = "0xB75E14")]
	public TextDisplay()
	{
	}
}
[Token(Token = "0x20000FD")]
public class TextFader : MonoBehaviour
{
	[Token(Token = "0x20000FE")]
	[CompilerGenerated]
	private sealed class <CrossFadeAlpha>d__15 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40006F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40006F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40006FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TextFader <>4__this;

		[Token(Token = "0x40006FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TextMeshPro text;

		[Token(Token = "0x40006FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float startAlpha;

		[Token(Token = "0x40006FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float duration;

		[Token(Token = "0x40006FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float targetAlpha;

		[Token(Token = "0x40006FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Color <color>5__2;

		[Token(Token = "0x4000700")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float <initialAlpha>5__3;

		[Token(Token = "0x4000701")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float <time>5__4;

		[Token(Token = "0x170000C8")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000720")]
			[Address(RVA = "0xB769E4", Offset = "0xB769E4", VA = "0xB769E4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C9")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000722")]
			[Address(RVA = "0xB76A2C", Offset = "0xB76A2C", VA = "0xB76A2C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600071D")]
		[Address(RVA = "0xB76820", Offset = "0xB76820", VA = "0xB76820")]
		[DebuggerHidden]
		public <CrossFadeAlpha>d__15(int <>1__state)
		{
		}

		[Token(Token = "0x600071E")]
		[Address(RVA = "0xB76864", Offset = "0xB76864", VA = "0xB76864", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600071F")]
		[Address(RVA = "0xB76868", Offset = "0xB76868", VA = "0xB76868", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000721")]
		[Address(RVA = "0xB769EC", Offset = "0xB769EC", VA = "0xB769EC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40006ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TextMeshPro textMeshPro;

	[Token(Token = "0x40006EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("Fade out the text when it is too close to the player")]
	public float minViewDistance;

	[Token(Token = "0x40006EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Tooltip("Fade out the text when it is too far to the player")]
	public float maxViewDistance;

	[Token(Token = "0x40006F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("The duration of the cross fade animation")]
	public float crossFadeDuration;

	[NonSerialized]
	[Token(Token = "0x40006F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private bool isVisible;

	[NonSerialized]
	[Token(Token = "0x40006F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
	private bool init;

	[Token(Token = "0x40006F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Color textColor;

	[Token(Token = "0x40006F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Transform target;

	[Token(Token = "0x40006F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Transform thisTransform;

	[Token(Token = "0x40006F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Coroutine fadeCoroutine;

	[Token(Token = "0x40006F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool hideText;

	[Token(Token = "0x6000717")]
	[Address(RVA = "0xB762B8", Offset = "0xB762B8", VA = "0xB762B8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000718")]
	[Address(RVA = "0xB76424", Offset = "0xB76424", VA = "0xB76424")]
	public void HideText()
	{
	}

	[Token(Token = "0x6000719")]
	[Address(RVA = "0xB7645C", Offset = "0xB7645C", VA = "0xB7645C")]
	public void ShowText()
	{
	}

	[Token(Token = "0x600071A")]
	[Address(RVA = "0xB76490", Offset = "0xB76490", VA = "0xB76490")]
	private void Update()
	{
	}

	[Token(Token = "0x600071B")]
	[Address(RVA = "0xB7676C", Offset = "0xB7676C", VA = "0xB7676C")]
	[IteratorStateMachine(typeof(<CrossFadeAlpha>d__15))]
	private IEnumerator CrossFadeAlpha(TextMeshPro text, float startAlpha, float targetAlpha, float duration)
	{
		return null;
	}

	[Token(Token = "0x600071C")]
	[Address(RVA = "0xB76848", Offset = "0xB76848", VA = "0xB76848")]
	public TextFader()
	{
	}
}
[Token(Token = "0x20000FF")]
public struct TooltipDescription
{
	[Token(Token = "0x4000702")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public string Title;

	[Token(Token = "0x4000703")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public string Description;

	[Token(Token = "0x4000704")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public TMP_FontAsset Font;
}
[Token(Token = "0x2000100")]
public class TooltipDisplay : MonoBehaviour
{
	[Token(Token = "0x4000705")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TextMeshPro text;

	[Token(Token = "0x4000706")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ITooltipProvider tooltipProviderInternal;

	[Token(Token = "0x170000CA")]
	public ITooltipProvider TooltipProvider
	{
		[Token(Token = "0x6000724")]
		[Address(RVA = "0xB76B00", Offset = "0xB76B00", VA = "0xB76B00")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000723")]
		[Address(RVA = "0xB76A34", Offset = "0xB76A34", VA = "0xB76A34")]
		set
		{
		}
	}

	[Token(Token = "0x6000725")]
	[Address(RVA = "0xB76B08", Offset = "0xB76B08", VA = "0xB76B08")]
	private void Update()
	{
	}

	[Token(Token = "0x6000726")]
	[Address(RVA = "0xB76C84", Offset = "0xB76C84", VA = "0xB76C84")]
	public TooltipDisplay()
	{
	}
}
[Token(Token = "0x2000101")]
public class Tornado : MonoBehaviour
{
	[Token(Token = "0x4000707")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float Duration;

	[Token(Token = "0x4000708")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float CreationDelay;

	[Token(Token = "0x4000709")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float DirectionChangeDelay;

	[Token(Token = "0x400070A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float DestroyDelay;

	[Token(Token = "0x400070B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float Speed;

	[Token(Token = "0x400070C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject Sfx;

	[Token(Token = "0x400070D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Vector3 StartSize;

	[Token(Token = "0x400070E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public Vector3 NormalScale;

	[Token(Token = "0x400070F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Vector3 EndScale;

	[Token(Token = "0x4000710")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float _startTime;

	[Token(Token = "0x4000711")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float _lastDirectionChange;

	[Token(Token = "0x4000712")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private float _destroyStartTime;

	[Token(Token = "0x4000713")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private bool _isGrowing;

	[Token(Token = "0x4000714")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
	private bool _isDying;

	[Token(Token = "0x4000715")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Transform _sfxTransform;

	[Token(Token = "0x4000716")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Rigidbody _rigidbody;

	[Token(Token = "0x4000717")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private bool _observed;

	[Token(Token = "0x4000718")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private StartLoopStopManager startLoopStop;

	[Token(Token = "0x6000727")]
	[Address(RVA = "0xB76C8C", Offset = "0xB76C8C", VA = "0xB76C8C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000728")]
	[Address(RVA = "0xB76D68", Offset = "0xB76D68", VA = "0xB76D68")]
	private void MakePeopleFlee()
	{
	}

	[Token(Token = "0x6000729")]
	[Address(RVA = "0xB76F70", Offset = "0xB76F70", VA = "0xB76F70")]
	private void Update()
	{
	}

	[Token(Token = "0x600072A")]
	[Address(RVA = "0xB77280", Offset = "0xB77280", VA = "0xB77280")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600072B")]
	[Address(RVA = "0xB775F0", Offset = "0xB775F0", VA = "0xB775F0")]
	private void OnTriggerStay(Collider other)
	{
	}

	[Token(Token = "0x600072C")]
	[Address(RVA = "0xB776CC", Offset = "0xB776CC", VA = "0xB776CC")]
	public Tornado()
	{
	}
}
[Token(Token = "0x2000102")]
public class TouchedObjectObserver : MonoBehaviour
{
	[Token(Token = "0x4000719")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Interactor Interactor;

	[Token(Token = "0x400071A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private InteractableObject InteractableObject;

	[Token(Token = "0x400071B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private HashSet<Interactor> Interactors;

	[Token(Token = "0x600072D")]
	[Address(RVA = "0xB776D4", Offset = "0xB776D4", VA = "0xB776D4")]
	public void AddInteractor(Interactor interactor, InteractableObject interactableObject)
	{
	}

	[Token(Token = "0x600072E")]
	[Address(RVA = "0xB77748", Offset = "0xB77748", VA = "0xB77748")]
	public void RemoveInteractor(Interactor interactor)
	{
	}

	[Token(Token = "0x600072F")]
	[Address(RVA = "0xB777FC", Offset = "0xB777FC", VA = "0xB777FC")]
	public void Awake()
	{
	}

	[Token(Token = "0x6000730")]
	[Address(RVA = "0xB77878", Offset = "0xB77878", VA = "0xB77878")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000731")]
	[Address(RVA = "0xB77918", Offset = "0xB77918", VA = "0xB77918")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000732")]
	[Address(RVA = "0xB7787C", Offset = "0xB7787C", VA = "0xB7787C")]
	private void NotifyInteractors()
	{
	}

	[Token(Token = "0x6000733")]
	[Address(RVA = "0xB7791C", Offset = "0xB7791C", VA = "0xB7791C")]
	public TouchedObjectObserver()
	{
	}
}
[Serializable]
[Token(Token = "0x2000103")]
public struct UpgradeCondition
{
	[Token(Token = "0x400071C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ResourceType ResourceType;

	[Token(Token = "0x400071D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public int Stock;
}
[Token(Token = "0x2000104")]
[SelectionBase]
public class Town : MonoBehaviour, IBurnable, IMiracleObserver, ISwarmFood, IPlayerAwareReactive, IResourceConsumer
{
	[Token(Token = "0x2000105")]
	[CompilerGenerated]
	private sealed class <TradeGoodIfPathAvailable>d__122 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000764")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000765")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000766")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Town <>4__this;

		[Token(Token = "0x4000767")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Town partner;

		[Token(Token = "0x4000768")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private PathManager.PathRequest <tradeRouteRequest>5__2;

		[Token(Token = "0x170000DA")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60007A0")]
			[Address(RVA = "0xB7F2C8", Offset = "0xB7F2C8", VA = "0xB7F2C8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000DB")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60007A2")]
			[Address(RVA = "0xB7F310", Offset = "0xB7F310", VA = "0xB7F310", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600079D")]
		[Address(RVA = "0xB7BD40", Offset = "0xB7BD40", VA = "0xB7BD40")]
		[DebuggerHidden]
		public <TradeGoodIfPathAvailable>d__122(int <>1__state)
		{
		}

		[Token(Token = "0x600079E")]
		[Address(RVA = "0xB7F118", Offset = "0xB7F118", VA = "0xB7F118", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600079F")]
		[Address(RVA = "0xB7F11C", Offset = "0xB7F11C", VA = "0xB7F11C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60007A1")]
		[Address(RVA = "0xB7F2D0", Offset = "0xB7F2D0", VA = "0xB7F2D0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000106")]
	[CompilerGenerated]
	private sealed class <SendCaravan>d__126 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000769")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400076A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400076B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Town <>4__this;

		[Token(Token = "0x400076C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int delay;

		[Token(Token = "0x400076D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Town town;

		[Token(Token = "0x400076E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public ResourceType resource;

		[Token(Token = "0x400076F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public int amount;

		[Token(Token = "0x4000770")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float <startTime>5__2;

		[Token(Token = "0x170000DC")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60007A6")]
			[Address(RVA = "0xB7F4F4", Offset = "0xB7F4F4", VA = "0xB7F4F4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000DD")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60007A8")]
			[Address(RVA = "0xB7F53C", Offset = "0xB7F53C", VA = "0xB7F53C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60007A3")]
		[Address(RVA = "0xB7C4E0", Offset = "0xB7C4E0", VA = "0xB7C4E0")]
		[DebuggerHidden]
		public <SendCaravan>d__126(int <>1__state)
		{
		}

		[Token(Token = "0x60007A4")]
		[Address(RVA = "0xB7F318", Offset = "0xB7F318", VA = "0xB7F318", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60007A5")]
		[Address(RVA = "0xB7F31C", Offset = "0xB7F31C", VA = "0xB7F31C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60007A7")]
		[Address(RVA = "0xB7F4FC", Offset = "0xB7F4FC", VA = "0xB7F4FC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000107")]
	[CompilerGenerated]
	private sealed class <SendCaravanToCrafter>d__127 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000771")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000772")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000773")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Town <>4__this;

		[Token(Token = "0x4000774")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int delay;

		[Token(Token = "0x4000775")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Crafter crafter;

		[Token(Token = "0x4000776")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public ResourceType resource;

		[Token(Token = "0x4000777")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public int amount;

		[Token(Token = "0x4000778")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float <startTime>5__2;

		[Token(Token = "0x170000DE")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60007AC")]
			[Address(RVA = "0xB7F720", Offset = "0xB7F720", VA = "0xB7F720", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000DF")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60007AE")]
			[Address(RVA = "0xB7F768", Offset = "0xB7F768", VA = "0xB7F768", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60007A9")]
		[Address(RVA = "0xB7C508", Offset = "0xB7C508", VA = "0xB7C508")]
		[DebuggerHidden]
		public <SendCaravanToCrafter>d__127(int <>1__state)
		{
		}

		[Token(Token = "0x60007AA")]
		[Address(RVA = "0xB7F544", Offset = "0xB7F544", VA = "0xB7F544", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60007AB")]
		[Address(RVA = "0xB7F548", Offset = "0xB7F548", VA = "0xB7F548", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60007AD")]
		[Address(RVA = "0xB7F728", Offset = "0xB7F728", VA = "0xB7F728", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000108")]
	[CompilerGenerated]
	private sealed class <SendCaravanFromCrafter>d__128 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000779")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400077A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400077B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Town <>4__this;

		[Token(Token = "0x400077C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int delay;

		[Token(Token = "0x400077D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Crafter crafter;

		[Token(Token = "0x400077E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public ResourceType resource;

		[Token(Token = "0x400077F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public int amount;

		[Token(Token = "0x4000780")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float <startTime>5__2;

		[Token(Token = "0x170000E0")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60007B2")]
			[Address(RVA = "0xB7F950", Offset = "0xB7F950", VA = "0xB7F950", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000E1")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60007B4")]
			[Address(RVA = "0xB7F998", Offset = "0xB7F998", VA = "0xB7F998", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60007AF")]
		[Address(RVA = "0xB7C530", Offset = "0xB7C530", VA = "0xB7C530")]
		[DebuggerHidden]
		public <SendCaravanFromCrafter>d__128(int <>1__state)
		{
		}

		[Token(Token = "0x60007B0")]
		[Address(RVA = "0xB7F770", Offset = "0xB7F770", VA = "0xB7F770", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60007B1")]
		[Address(RVA = "0xB7F774", Offset = "0xB7F774", VA = "0xB7F774", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60007B3")]
		[Address(RVA = "0xB7F958", Offset = "0xB7F958", VA = "0xB7F958", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000109")]
	[CompilerGenerated]
	private sealed class <CheckAddons>d__131 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000781")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000782")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000783")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Town <>4__this;

		[Token(Token = "0x4000784")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Addon <addon>5__2;

		[Token(Token = "0x4000785")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private MapManager.FreeTerrainRequest <request>5__3;

		[Token(Token = "0x4000786")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private MapManager.FreePortLocationRequest <coastRequest>5__4;

		[Token(Token = "0x170000E2")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60007B8")]
			[Address(RVA = "0xB8095C", Offset = "0xB8095C", VA = "0xB8095C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000E3")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60007BA")]
			[Address(RVA = "0xB809A4", Offset = "0xB809A4", VA = "0xB809A4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60007B5")]
		[Address(RVA = "0xB7C5D0", Offset = "0xB7C5D0", VA = "0xB7C5D0")]
		[DebuggerHidden]
		public <CheckAddons>d__131(int <>1__state)
		{
		}

		[Token(Token = "0x60007B6")]
		[Address(RVA = "0xB7F9A0", Offset = "0xB7F9A0", VA = "0xB7F9A0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60007B7")]
		[Address(RVA = "0xB7F9A4", Offset = "0xB7F9A4", VA = "0xB7F9A4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60007B9")]
		[Address(RVA = "0xB80964", Offset = "0xB80964", VA = "0xB80964", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200010A")]
	[CompilerGenerated]
	private sealed class <LoadAddons>d__161 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000787")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000788")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000789")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<AddonData> dataAddons;

		[Token(Token = "0x400078A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int saveVersion;

		[Token(Token = "0x400078B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Town <>4__this;

		[Token(Token = "0x400078C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int loadAmountPerFrame;

		[Token(Token = "0x400078D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private int <unit>5__2;

		[Token(Token = "0x400078E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int <count>5__3;

		[Token(Token = "0x400078F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<AddonData>.Enumerator <>7__wrap3;

		[Token(Token = "0x170000E4")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60007BF")]
			[Address(RVA = "0xB80DB0", Offset = "0xB80DB0", VA = "0xB80DB0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000E5")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60007C1")]
			[Address(RVA = "0xB80DF8", Offset = "0xB80DF8", VA = "0xB80DF8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60007BB")]
		[Address(RVA = "0xB7DC10", Offset = "0xB7DC10", VA = "0xB7DC10")]
		[DebuggerHidden]
		public <LoadAddons>d__161(int <>1__state)
		{
		}

		[Token(Token = "0x60007BC")]
		[Address(RVA = "0xB809AC", Offset = "0xB809AC", VA = "0xB809AC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60007BD")]
		[Address(RVA = "0xB809C8", Offset = "0xB809C8", VA = "0xB809C8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60007BE")]
		[Address(RVA = "0xB80D60", Offset = "0xB80D60", VA = "0xB80D60")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x60007C0")]
		[Address(RVA = "0xB80DB8", Offset = "0xB80DB8", VA = "0xB80DB8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400071F")]
	private const string Simple = "{0}/{1}";

	[Token(Token = "0x4000720")]
	private const string Overpopulated = "{0}/{1} (+{2})";

	[Token(Token = "0x4000721")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private string nameInternal;

	[Token(Token = "0x4000722")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Header("Configuration", order = 1)]
	public CityConfiguration configuration;

	[Token(Token = "0x4000723")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public TownType Type;

	[Token(Token = "0x4000724")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AddonCollection addonsCollection;

	[Token(Token = "0x4000725")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject altar;

	[Token(Token = "0x4000726")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject firePit;

	[Token(Token = "0x4000727")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject needsDisplay;

	[Token(Token = "0x4000728")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public CityImportConfiguration cityImportConfiguration;

	[Token(Token = "0x4000729")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public CityLevelUpConfiguration cityLevelUpConfiguration;

	[Token(Token = "0x400072A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[Header("Levels", order = 2)]
	public GameObject Level0;

	[Token(Token = "0x400072B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public GameObject Level1;

	[Token(Token = "0x400072C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public GameObject Level2;

	[Token(Token = "0x400072D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public GameObject Level3;

	[Token(Token = "0x400072E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public GameObject Level4;

	[Token(Token = "0x400072F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public GameObject Level5;

	[Token(Token = "0x4000730")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public GameObject Level6;

	[Token(Token = "0x4000731")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[Header("Events")]
	public UnityEvent<Color> teamColorChangeEvent;

	[Token(Token = "0x4000732")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public UnityEvent<float> faithChangeEvent;

	[Token(Token = "0x4000733")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public UnityEvent<float> happinessChangeEvent;

	[Token(Token = "0x4000734")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private bool isPlayerAware;

	[Token(Token = "0x4000735")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private Queue<Work> neededWork;

	[Token(Token = "0x4000736")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private HashSet<ResourceType> neededResources;

	[Token(Token = "0x4000737")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private HashSet<ResourceType> surplusResources;

	[Token(Token = "0x4000738")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private float lastResourceCheck;

	[Token(Token = "0x4000739")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	private float lastWokDispatch;

	[Token(Token = "0x400073A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private float lastAddonCheck;

	[Token(Token = "0x400073B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	private float lastAddonUpgradeCheck;

	[Token(Token = "0x400073C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private float lastReproductionTime;

	[Token(Token = "0x400073D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	private float lastColonizationTime;

	[Token(Token = "0x400073E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private float lastTradeTime;

	[Token(Token = "0x400073F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
	private float currentFrameTime;

	[Token(Token = "0x4000740")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private float lastCrafterTime;

	[Token(Token = "0x4000741")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	private float minCrafterDelay;

	[Token(Token = "0x4000743")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private Dictionary<ResourceType, int> stock;

	[Token(Token = "0x4000744")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private Dictionary<ResourceType, int> maxStock;

	[Token(Token = "0x4000745")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private List<UpgradeCondition> upgradeConditions;

	[Token(Token = "0x4000747")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private bool checkAddonsInProgress;

	[Token(Token = "0x4000748")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private Realm realm;

	[Token(Token = "0x4000749")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private Dictionary<BuildingType, int> buildingTypesCount;

	[Token(Token = "0x400074A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private bool init;

	[Token(Token = "0x400074B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
	private int currentLevel;

	[Token(Token = "0x400074C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	private float faithInternal;

	[Token(Token = "0x400074D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
	private float happinessInternal;

	[Token(Token = "0x400074E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	private int baseMaxPopulation;

	[Token(Token = "0x400074F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
	private int maxPopulation;

	[Token(Token = "0x4000750")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	private int remainingWork;

	[Token(Token = "0x4000751")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
	private int levelUpWork;

	[Token(Token = "0x4000752")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	private bool levelUpPossible;

	[Token(Token = "0x4000753")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x169")]
	private bool isBuilding;

	[Token(Token = "0x4000754")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x16A")]
	private bool loaded;

	[Token(Token = "0x4000755")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x16B")]
	private bool tutorialTown;

	[Token(Token = "0x4000756")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
	private bool tutorialCheckFood;

	[Token(Token = "0x4000757")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x16D")]
	private bool tutorialCheckWood;

	[Token(Token = "0x4000758")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x16E")]
	private bool tutorialCheckBuild;

	[Token(Token = "0x4000759")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x16F")]
	private bool tutorialCheckHeretic;

	[Token(Token = "0x400075A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	private bool isBurning;

	[Token(Token = "0x400075B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
	private float startBurningTime;

	[Token(Token = "0x400075C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	private GameObject fireVfxInstance;

	[Token(Token = "0x400075D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	private List<Crafter> crafters;

	[Token(Token = "0x400075F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	public TextMeshPro NameDisplayer;

	[Token(Token = "0x4000760")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	public TextMeshPro PopulationDisplayer;

	[Token(Token = "0x4000761")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly ResourceType[] primaryResources;

	[Token(Token = "0x4000762")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	private FaithLevel internalFaithLevel;

	[Token(Token = "0x4000763")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
	private int? displayedPopulation;

	[Token(Token = "0x170000CB")]
	public Guid Id
	{
		[Token(Token = "0x6000734")]
		[Address(RVA = "0xB77924", Offset = "0xB77924", VA = "0xB77924")]
		[CompilerGenerated]
		get
		{
			return default(Guid);
		}
		[Token(Token = "0x6000735")]
		[Address(RVA = "0xB77930", Offset = "0xB77930", VA = "0xB77930")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170000CC")]
	public string Name
	{
		[Token(Token = "0x6000736")]
		[Address(RVA = "0xB77938", Offset = "0xB77938", VA = "0xB77938")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000737")]
		[Address(RVA = "0xB77940", Offset = "0xB77940", VA = "0xB77940")]
		set
		{
		}
	}

	[Token(Token = "0x170000CD")]
	public HashSet<ResourceType> ImportList
	{
		[Token(Token = "0x6000738")]
		[Address(RVA = "0xB77C18", Offset = "0xB77C18", VA = "0xB77C18")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000CE")]
	public HashSet<ResourceType> ExportList
	{
		[Token(Token = "0x6000739")]
		[Address(RVA = "0xB77C20", Offset = "0xB77C20", VA = "0xB77C20")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000CF")]
	public HashSet<Human> CitizensList
	{
		[Token(Token = "0x600073A")]
		[Address(RVA = "0xB77C28", Offset = "0xB77C28", VA = "0xB77C28")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x600073B")]
		[Address(RVA = "0xB77C30", Offset = "0xB77C30", VA = "0xB77C30")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170000D0")]
	private List<Addon> Addons
	{
		[Token(Token = "0x600073C")]
		[Address(RVA = "0xB77C40", Offset = "0xB77C40", VA = "0xB77C40")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x600073D")]
		[Address(RVA = "0xB77C48", Offset = "0xB77C48", VA = "0xB77C48")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170000D1")]
	public ResourceStatus currentNeedStatus
	{
		[Token(Token = "0x600073E")]
		[Address(RVA = "0xB77C58", Offset = "0xB77C58", VA = "0xB77C58")]
		[CompilerGenerated]
		get
		{
			return default(ResourceStatus);
		}
		[Token(Token = "0x600073F")]
		[Address(RVA = "0xB77C68", Offset = "0xB77C68", VA = "0xB77C68")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170000D2")]
	public TechLevel TechLevel
	{
		[Token(Token = "0x6000740")]
		[Address(RVA = "0xB77C74", Offset = "0xB77C74", VA = "0xB77C74")]
		get
		{
			return default(TechLevel);
		}
	}

	[Token(Token = "0x170000D3")]
	public float Faith
	{
		[Token(Token = "0x6000741")]
		[Address(RVA = "0xB77C7C", Offset = "0xB77C7C", VA = "0xB77C7C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000742")]
		[Address(RVA = "0xB77C84", Offset = "0xB77C84", VA = "0xB77C84")]
		private set
		{
		}
	}

	[Token(Token = "0x170000D4")]
	public FaithLevel FaithLevel
	{
		[Token(Token = "0x6000743")]
		[Address(RVA = "0xB77E84", Offset = "0xB77E84", VA = "0xB77E84")]
		get
		{
			return default(FaithLevel);
		}
		[Token(Token = "0x6000744")]
		[Address(RVA = "0xB77D38", Offset = "0xB77D38", VA = "0xB77D38")]
		private set
		{
		}
	}

	[Token(Token = "0x170000D5")]
	public float Happiness
	{
		[Token(Token = "0x6000745")]
		[Address(RVA = "0xB77F0C", Offset = "0xB77F0C", VA = "0xB77F0C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000746")]
		[Address(RVA = "0xB77F14", Offset = "0xB77F14", VA = "0xB77F14")]
		private set
		{
		}
	}

	[Token(Token = "0x170000D6")]
	public Realm Realm
	{
		[Token(Token = "0x6000747")]
		[Address(RVA = "0xB77FA8", Offset = "0xB77FA8", VA = "0xB77FA8")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000748")]
		[Address(RVA = "0xB77FB0", Offset = "0xB77FB0", VA = "0xB77FB0")]
		set
		{
		}
	}

	[Token(Token = "0x170000D7")]
	private int Population
	{
		[Token(Token = "0x600074B")]
		[Address(RVA = "0xB78798", Offset = "0xB78798", VA = "0xB78798")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170000D8")]
	public Position Position
	{
		[Token(Token = "0x600074C")]
		[Address(RVA = "0xB787E0", Offset = "0xB787E0", VA = "0xB787E0")]
		get
		{
			return default(Position);
		}
	}

	[Token(Token = "0x170000D9")]
	public bool CanBeIgnited
	{
		[Token(Token = "0x600077B")]
		[Address(RVA = "0xB7D750", Offset = "0xB7D750", VA = "0xB7D750", Slot = "6")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000749")]
	[Address(RVA = "0xB7795C", Offset = "0xB7795C", VA = "0xB7795C")]
	public void RefreshNameDisplay()
	{
	}

	[Token(Token = "0x600074A")]
	[Address(RVA = "0xB781E0", Offset = "0xB781E0", VA = "0xB781E0")]
	public TownData ToData()
	{
		return null;
	}

	[Token(Token = "0x600074D")]
	[Address(RVA = "0xB788A4", Offset = "0xB788A4", VA = "0xB788A4")]
	public bool IsFull()
	{
		return default(bool);
	}

	[Token(Token = "0x600074E")]
	[Address(RVA = "0xB788C4", Offset = "0xB788C4", VA = "0xB788C4")]
	private void Awake()
	{
	}

	[Token(Token = "0x600074F")]
	[Address(RVA = "0xB78C48", Offset = "0xB78C48", VA = "0xB78C48")]
	private void Start()
	{
	}

	[Token(Token = "0x6000750")]
	[Address(RVA = "0xB77E8C", Offset = "0xB77E8C", VA = "0xB77E8C")]
	private void SetNameColor()
	{
	}

	[Token(Token = "0x6000751")]
	[Address(RVA = "0xB72558", Offset = "0xB72558", VA = "0xB72558")]
	public static Color32 GetNameColor()
	{
		return default(Color32);
	}

	[Token(Token = "0x6000752")]
	[Address(RVA = "0xB78CDC", Offset = "0xB78CDC", VA = "0xB78CDC")]
	private void ResetCounters()
	{
	}

	[Token(Token = "0x6000753")]
	[Address(RVA = "0xB79348", Offset = "0xB79348", VA = "0xB79348")]
	private void SetPopulationDisplay()
	{
	}

	[Token(Token = "0x6000754")]
	[Address(RVA = "0xB79468", Offset = "0xB79468", VA = "0xB79468")]
	public void Refresh()
	{
	}

	[Token(Token = "0x6000755")]
	[Address(RVA = "0xB7B1F4", Offset = "0xB7B1F4", VA = "0xB7B1F4")]
	public void HappinessChanged(float newValue)
	{
	}

	[Token(Token = "0x6000756")]
	[Address(RVA = "0xB7A7E0", Offset = "0xB7A7E0", VA = "0xB7A7E0")]
	private void UpgradeAddons()
	{
	}

	[Token(Token = "0x6000757")]
	[Address(RVA = "0xB7B380", Offset = "0xB7B380", VA = "0xB7B380")]
	private bool SwitchAddon(Addon previousAddon, BuildingType addonType, TechLevel addonTechLevel)
	{
		return default(bool);
	}

	[Token(Token = "0x6000758")]
	[Address(RVA = "0xB7AD98", Offset = "0xB7AD98", VA = "0xB7AD98")]
	private void CheckCrafters()
	{
	}

	[Token(Token = "0x6000759")]
	[Address(RVA = "0xB7AA24", Offset = "0xB7AA24", VA = "0xB7AA24")]
	private void CheckTrade()
	{
	}

	[Token(Token = "0x600075A")]
	[Address(RVA = "0xB7BCB0", Offset = "0xB7BCB0", VA = "0xB7BCB0")]
	[IteratorStateMachine(typeof(<TradeGoodIfPathAvailable>d__122))]
	private IEnumerator TradeGoodIfPathAvailable(Town partner)
	{
		return null;
	}

	[Token(Token = "0x600075B")]
	[Address(RVA = "0xB7BD68", Offset = "0xB7BD68", VA = "0xB7BD68")]
	private void TradeGoods(Town partner)
	{
	}

	[Token(Token = "0x600075C")]
	[Address(RVA = "0xB7C298", Offset = "0xB7C298", VA = "0xB7C298")]
	private void Trade(Town partner, ResourceType soldResource, ResourceType acquiredResource, int amount, int boxes)
	{
	}

	[Token(Token = "0x600075D")]
	[Address(RVA = "0xB7C394", Offset = "0xB7C394", VA = "0xB7C394")]
	private void GiveAway(Town partner, ResourceType soldResource, int amount, int boxes)
	{
	}

	[Token(Token = "0x600075E")]
	[Address(RVA = "0xB7C434", Offset = "0xB7C434", VA = "0xB7C434")]
	[IteratorStateMachine(typeof(<SendCaravan>d__126))]
	private IEnumerator SendCaravan(Town town, ResourceType resource, int amount, int delay)
	{
		return null;
	}

	[Token(Token = "0x600075F")]
	[Address(RVA = "0xB7BB58", Offset = "0xB7BB58", VA = "0xB7BB58")]
	[IteratorStateMachine(typeof(<SendCaravanToCrafter>d__127))]
	private IEnumerator SendCaravanToCrafter(Crafter crafter, ResourceType resource, int amount, int delay)
	{
		return null;
	}

	[Token(Token = "0x6000760")]
	[Address(RVA = "0xB7BC04", Offset = "0xB7BC04", VA = "0xB7BC04")]
	[IteratorStateMachine(typeof(<SendCaravanFromCrafter>d__128))]
	private IEnumerator SendCaravanFromCrafter(Crafter crafter, ResourceType resource, int amount, int delay)
	{
		return null;
	}

	[Token(Token = "0x6000761")]
	[Address(RVA = "0xB7A370", Offset = "0xB7A370", VA = "0xB7A370")]
	private void CheckReproduction()
	{
	}

	[Token(Token = "0x6000762")]
	[Address(RVA = "0xB7C558", Offset = "0xB7C558", VA = "0xB7C558")]
	private int GetCount(BuildingType buildingType)
	{
		return default(int);
	}

	[Token(Token = "0x6000763")]
	[Address(RVA = "0xB7A76C", Offset = "0xB7A76C", VA = "0xB7A76C")]
	[IteratorStateMachine(typeof(<CheckAddons>d__131))]
	private IEnumerator CheckAddons()
	{
		return null;
	}

	[Token(Token = "0x6000764")]
	[Address(RVA = "0xB7A5AC", Offset = "0xB7A5AC", VA = "0xB7A5AC")]
	private void DispatchWork()
	{
	}

	[Token(Token = "0x6000765")]
	[Address(RVA = "0xB79B24", Offset = "0xB79B24", VA = "0xB79B24")]
	private void GenerateWork()
	{
	}

	[Token(Token = "0x6000766")]
	[Address(RVA = "0xB7C624", Offset = "0xB7C624", VA = "0xB7C624")]
	public static bool Contains(ResourceType[] resourceTypes, ResourceType typeToSearch)
	{
		return default(bool);
	}

	[Token(Token = "0x6000767")]
	[Address(RVA = "0xB7C5F8", Offset = "0xB7C5F8", VA = "0xB7C5F8")]
	private StockLevel GetStockLevel(ResourceType resourceType)
	{
		return default(StockLevel);
	}

	[Token(Token = "0x6000768")]
	[Address(RVA = "0xB79B0C", Offset = "0xB79B0C", VA = "0xB79B0C")]
	private void RefreshResourceBalance()
	{
	}

	[Token(Token = "0x6000769")]
	[Address(RVA = "0xB7C71C", Offset = "0xB7C71C", VA = "0xB7C71C")]
	private void RefreshSurplusResources()
	{
	}

	[Token(Token = "0x600076A")]
	[Address(RVA = "0xB7974C", Offset = "0xB7974C", VA = "0xB7974C")]
	private void RefreshNeededResources()
	{
	}

	[Token(Token = "0x600076B")]
	[Address(RVA = "0xB792A4", Offset = "0xB792A4", VA = "0xB792A4")]
	private void RefreshMaxResources()
	{
	}

	[Token(Token = "0x600076C")]
	[Address(RVA = "0xB7C950", Offset = "0xB7C950", VA = "0xB7C950")]
	private void RefreshMaxPopulation()
	{
	}

	[Token(Token = "0x600076D")]
	[Address(RVA = "0xB79F78", Offset = "0xB79F78", VA = "0xB79F78")]
	private void CheckLevelUp()
	{
	}

	[Token(Token = "0x600076E")]
	[Address(RVA = "0xB7CBC4", Offset = "0xB7CBC4", VA = "0xB7CBC4")]
	internal bool TransferManPower()
	{
		return default(bool);
	}

	[Token(Token = "0x600076F")]
	[Address(RVA = "0xB7B988", Offset = "0xB7B988", VA = "0xB7B988")]
	internal void AddResource(ResourceType resourceType, int amount)
	{
	}

	[Token(Token = "0x6000770")]
	[Address(RVA = "0xB7B898", Offset = "0xB7B898", VA = "0xB7B898")]
	public int GetResource(ResourceType resourceType, int neededAmount)
	{
		return default(int);
	}

	[Token(Token = "0x6000771")]
	[Address(RVA = "0xB7CC0C", Offset = "0xB7CC0C", VA = "0xB7CC0C")]
	private void LevelUp()
	{
	}

	[Token(Token = "0x6000772")]
	[Address(RVA = "0xB78E1C", Offset = "0xB78E1C", VA = "0xB78E1C")]
	private void DisplayCurrentLevelAssets()
	{
	}

	[Token(Token = "0x6000773")]
	[Address(RVA = "0xB7CF74", Offset = "0xB7CF74", VA = "0xB7CF74")]
	public void AddHuman(Human human)
	{
	}

	[Token(Token = "0x6000774")]
	[Address(RVA = "0xB7A1B0", Offset = "0xB7A1B0", VA = "0xB7A1B0")]
	private void CheckPopulationLimit()
	{
	}

	[Token(Token = "0x6000775")]
	[Address(RVA = "0xB7D094", Offset = "0xB7D094", VA = "0xB7D094")]
	public void RemoveHuman(Human human)
	{
	}

	[Token(Token = "0x6000776")]
	[Address(RVA = "0xB7D180", Offset = "0xB7D180", VA = "0xB7D180")]
	public void RemoveAddon(Addon addon)
	{
	}

	[Token(Token = "0x6000777")]
	[Address(RVA = "0xB79658", Offset = "0xB79658", VA = "0xB79658")]
	private void CleanAndDestroy(float delay = 1f)
	{
	}

	[Token(Token = "0x6000778")]
	[Address(RVA = "0xB7D1D8", Offset = "0xB7D1D8", VA = "0xB7D1D8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000779")]
	[Address(RVA = "0xB7D4C0", Offset = "0xB7D4C0", VA = "0xB7D4C0", Slot = "4")]
	public void Burn()
	{
	}

	[Token(Token = "0x600077A")]
	[Address(RVA = "0xB7D688", Offset = "0xB7D688", VA = "0xB7D688", Slot = "5")]
	public void Extinguish(bool atLeastOne)
	{
	}

	[Token(Token = "0x600077C")]
	[Address(RVA = "0xB7D760", Offset = "0xB7D760", VA = "0xB7D760")]
	public void ImpactFaith(float value, bool atheism = false)
	{
	}

	[Token(Token = "0x600077D")]
	[Address(RVA = "0xB7D8A8", Offset = "0xB7D8A8", VA = "0xB7D8A8")]
	public void ImpactHappiness(float modification)
	{
	}

	[Token(Token = "0x600077E")]
	[Address(RVA = "0xB7D8B4", Offset = "0xB7D8B4", VA = "0xB7D8B4", Slot = "7")]
	public void SeeMiracle(bool positive, Vector3 position, MiracleType miracleType)
	{
	}

	[Token(Token = "0x600077F")]
	[Address(RVA = "0xB7D944", Offset = "0xB7D944", VA = "0xB7D944")]
	public void LoadState(TownData data, int saveVersion, int loadAmountPerFrame)
	{
	}

	[Token(Token = "0x6000780")]
	[Address(RVA = "0xB7DB68", Offset = "0xB7DB68", VA = "0xB7DB68")]
	[IteratorStateMachine(typeof(<LoadAddons>d__161))]
	private IEnumerator LoadAddons(List<AddonData> dataAddons, int saveVersion, int loadAmountPerFrame)
	{
		return null;
	}

	[Token(Token = "0x6000781")]
	[Address(RVA = "0xB7B63C", Offset = "0xB7B63C", VA = "0xB7B63C")]
	private void AddAddon(Addon newAddon)
	{
	}

	[Token(Token = "0x6000782")]
	[Address(RVA = "0xB7DC38", Offset = "0xB7DC38", VA = "0xB7DC38")]
	public bool GetPort(out Port port)
	{
		return default(bool);
	}

	[Token(Token = "0x6000783")]
	[Address(RVA = "0xB7DDFC", Offset = "0xB7DDFC", VA = "0xB7DDFC", Slot = "8")]
	public bool Eat()
	{
		return default(bool);
	}

	[Token(Token = "0x6000784")]
	[Address(RVA = "0xB7DE5C", Offset = "0xB7DE5C", VA = "0xB7DE5C", Slot = "9")]
	public void SetPlayerAware(bool value)
	{
	}

	[Token(Token = "0x6000785")]
	[Address(RVA = "0xB7DE84", Offset = "0xB7DE84", VA = "0xB7DE84", Slot = "10")]
	public bool IsTown(out Town town)
	{
		return default(bool);
	}

	[Token(Token = "0x6000786")]
	[Address(RVA = "0xB7DEA8", Offset = "0xB7DEA8", VA = "0xB7DEA8")]
	public int GetTownLevel()
	{
		return default(int);
	}

	[Token(Token = "0x6000787")]
	[Address(RVA = "0xB7C8D8", Offset = "0xB7C8D8", VA = "0xB7C8D8")]
	private static int GetResourceAmount(ResourceType resourceType, Dictionary<ResourceType, int> stock)
	{
		return default(int);
	}

	[Token(Token = "0x6000788")]
	[Address(RVA = "0xB7DEB0", Offset = "0xB7DEB0", VA = "0xB7DEB0")]
	public void AddCrafter(Crafter crafter)
	{
	}

	[Token(Token = "0x6000789")]
	[Address(RVA = "0xB7E0D0", Offset = "0xB7E0D0", VA = "0xB7E0D0")]
	public void RemoveCrafter(Crafter crafter)
	{
	}

	[Token(Token = "0x600078A")]
	[Address(RVA = "0xB7DF64", Offset = "0xB7DF64", VA = "0xB7DF64")]
	private void RefreshCrafterTime()
	{
	}

	[Token(Token = "0x600078B")]
	[Address(RVA = "0xB7E130", Offset = "0xB7E130", VA = "0xB7E130")]
	private string GetStockInfo(ResourceType resourceType)
	{
		return null;
	}

	[Token(Token = "0x600078C")]
	[Address(RVA = "0xB7C670", Offset = "0xB7C670", VA = "0xB7C670")]
	private ResourceStatus GetResourceStatus(ResourceType resourceType)
	{
		return default(ResourceStatus);
	}

	[Token(Token = "0x600078D")]
	[Address(RVA = "0xB7E15C", Offset = "0xB7E15C", VA = "0xB7E15C", Slot = "11")]
	public bool IsResourceNeeded(out ResourceStatus resourceStatus)
	{
		return default(bool);
	}

	[Token(Token = "0x600078E")]
	[Address(RVA = "0xB7E174", Offset = "0xB7E174", VA = "0xB7E174")]
	public bool Inspire(Realm.RealmBeliefType beliefType, Vector3 bestKingPosition)
	{
		return default(bool);
	}

	[Token(Token = "0x600078F")]
	[Address(RVA = "0xB78D28", Offset = "0xB78D28", VA = "0xB78D28")]
	public void Init()
	{
	}

	[Token(Token = "0x6000790")]
	[Address(RVA = "0xB7E28C", Offset = "0xB7E28C", VA = "0xB7E28C")]
	public void OnColorChanged(Color newColor)
	{
	}

	[Token(Token = "0x6000791")]
	[Address(RVA = "0xB7E554", Offset = "0xB7E554", VA = "0xB7E554")]
	public void TutorialTown()
	{
	}

	[Token(Token = "0x6000792")]
	[Address(RVA = "0xB7E560", Offset = "0xB7E560", VA = "0xB7E560")]
	public void TutorialCheckFood()
	{
	}

	[Token(Token = "0x6000793")]
	[Address(RVA = "0xB7E56C", Offset = "0xB7E56C", VA = "0xB7E56C")]
	public void TutorialCheckWood()
	{
	}

	[Token(Token = "0x6000794")]
	[Address(RVA = "0xB7E628", Offset = "0xB7E628", VA = "0xB7E628")]
	public void TutorialCheckBuild()
	{
	}

	[Token(Token = "0x6000795")]
	[Address(RVA = "0xB7E634", Offset = "0xB7E634", VA = "0xB7E634")]
	public void TutorialCheckHeretic()
	{
	}

	[Token(Token = "0x6000796")]
	[Address(RVA = "0xB7E858", Offset = "0xB7E858", VA = "0xB7E858")]
	[ContextMenu("Level Up")]
	public void ForceLevelUp()
	{
	}

	[Token(Token = "0x6000797")]
	[Address(RVA = "0xB7E85C", Offset = "0xB7E85C", VA = "0xB7E85C")]
	[ContextMenu("Debug Stock")]
	public void DebugStock()
	{
	}

	[Token(Token = "0x6000798")]
	[Address(RVA = "0xB7EBE8", Offset = "0xB7EBE8", VA = "0xB7EBE8")]
	[ContextMenu("Debug Work")]
	public void DebugWork()
	{
	}

	[Token(Token = "0x6000799")]
	[Address(RVA = "0xB7EE28", Offset = "0xB7EE28", VA = "0xB7EE28")]
	[ContextMenu("Debug Citizens")]
	public void DebugCitizens()
	{
	}

	[Token(Token = "0x600079A")]
	[Address(RVA = "0xB7EFFC", Offset = "0xB7EFFC", VA = "0xB7EFFC")]
	public Town()
	{
	}
}
[Token(Token = "0x200010B")]
public class TransformFollow : MonoBehaviour
{
	[Token(Token = "0x200010C")]
	public enum FollowMoment
	{
		[Token(Token = "0x40007A2")]
		OnFixedUpdate,
		[Token(Token = "0x40007A3")]
		OnUpdate,
		[Token(Token = "0x40007A4")]
		OnLateUpdate,
		[Token(Token = "0x40007A5")]
		OnPreRender,
		[Token(Token = "0x40007A6")]
		OnPreCull
	}

	[Token(Token = "0x4000790")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Object Settings")]
	[Tooltip("The game object to follow. The followed property values will be taken from this one.")]
	public GameObject gameObjectToFollow;

	[Token(Token = "0x4000791")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("The game object to change the property values of. If left empty the game object this script is attached to will be changed.")]
	public GameObject gameObjectToChange;

	[Token(Token = "0x4000792")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("Whether to follow the position of the given game object.")]
	[Header("Position Settings")]
	public bool followsPosition;

	[Token(Token = "0x4000793")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	[Tooltip("Whether to smooth the position when following `gameObjectToFollow`.")]
	public bool smoothsPosition;

	[Token(Token = "0x4000794")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Tooltip("The maximum allowed distance between the unsmoothed source and the smoothed target per frame to use for smoothing.")]
	public float maxAllowedPerFrameDistanceDifference;

	[Token(Token = "0x4000796")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[Tooltip("Whether to follow the rotation of the given game object.")]
	[Header("Rotation Settings")]
	public bool followsRotation;

	[Token(Token = "0x4000797")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
	[Tooltip("Whether to smooth the rotation when following `gameObjectToFollow`.")]
	public bool smoothsRotation;

	[Token(Token = "0x4000798")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("The maximum allowed angle between the unsmoothed source and the smoothed target per frame to use for smoothing.")]
	public float maxAllowedPerFrameAngleDifference;

	[Token(Token = "0x400079A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[Tooltip("Whether to follow the scale of the given game object.")]
	[Header("Scale Settings")]
	public bool followsScale;

	[Token(Token = "0x400079B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
	[Tooltip("Whether to smooth the scale when following `gameObjectToFollow`.")]
	public bool smoothsScale;

	[Token(Token = "0x400079C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Tooltip("The maximum allowed size between the unsmoothed source and the smoothed target per frame to use for smoothing.")]
	public float maxAllowedPerFrameSizeDifference;

	[Token(Token = "0x400079D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[Tooltip("The moment at which to follow.")]
	[SerializeField]
	[Header("Follow Settings")]
	private FollowMoment _moment;

	[Token(Token = "0x400079E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	protected Transform transformToFollow;

	[Token(Token = "0x400079F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	protected Transform transformToChange;

	[Token(Token = "0x170000E6")]
	public Vector3 targetPosition
	{
		[Token(Token = "0x60007C2")]
		[Address(RVA = "0xB80E00", Offset = "0xB80E00", VA = "0xB80E00")]
		[CompilerGenerated]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x60007C3")]
		[Address(RVA = "0xB80E0C", Offset = "0xB80E0C", VA = "0xB80E0C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170000E7")]
	public Quaternion targetRotation
	{
		[Token(Token = "0x60007C4")]
		[Address(RVA = "0xB80E18", Offset = "0xB80E18", VA = "0xB80E18")]
		[CompilerGenerated]
		get
		{
			return default(Quaternion);
		}
		[Token(Token = "0x60007C5")]
		[Address(RVA = "0xB80E24", Offset = "0xB80E24", VA = "0xB80E24")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170000E8")]
	public FollowMoment moment
	{
		[Token(Token = "0x60007C6")]
		[Address(RVA = "0xB80E30", Offset = "0xB80E30", VA = "0xB80E30")]
		get
		{
			return default(FollowMoment);
		}
		[Token(Token = "0x60007C7")]
		[Address(RVA = "0xB80E38", Offset = "0xB80E38", VA = "0xB80E38")]
		set
		{
		}
	}

	[Token(Token = "0x170000E9")]
	public Vector3 targetScale
	{
		[Token(Token = "0x60007C8")]
		[Address(RVA = "0xB81154", Offset = "0xB81154", VA = "0xB81154")]
		[CompilerGenerated]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x60007C9")]
		[Address(RVA = "0xB81160", Offset = "0xB81160", VA = "0xB81160")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x60007CA")]
	[Address(RVA = "0xB8116C", Offset = "0xB8116C", VA = "0xB8116C")]
	public void Follow()
	{
	}

	[Token(Token = "0x60007CB")]
	[Address(RVA = "0xB81720", Offset = "0xB81720", VA = "0xB81720")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60007CC")]
	[Address(RVA = "0xB81940", Offset = "0xB81940", VA = "0xB81940")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60007CD")]
	[Address(RVA = "0xB81AF4", Offset = "0xB81AF4", VA = "0xB81AF4")]
	protected void FixedUpdate()
	{
	}

	[Token(Token = "0x60007CE")]
	[Address(RVA = "0xB81B04", Offset = "0xB81B04", VA = "0xB81B04")]
	protected void Update()
	{
	}

	[Token(Token = "0x60007CF")]
	[Address(RVA = "0xB81B18", Offset = "0xB81B18", VA = "0xB81B18")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60007D0")]
	[Address(RVA = "0xB81B2C", Offset = "0xB81B2C", VA = "0xB81B2C")]
	private void OnCamPreRender(Camera cam)
	{
	}

	[Token(Token = "0x60007D1")]
	[Address(RVA = "0xB81BDC", Offset = "0xB81BDC", VA = "0xB81BDC")]
	private void OnCamPreCull(Camera cam)
	{
	}

	[Token(Token = "0x60007D2")]
	[Address(RVA = "0xB81214", Offset = "0xB81214", VA = "0xB81214")]
	private void CacheTransforms()
	{
	}

	[Token(Token = "0x60007D3")]
	[Address(RVA = "0xB81350", Offset = "0xB81350", VA = "0xB81350")]
	private void FollowPosition()
	{
	}

	[Token(Token = "0x60007D4")]
	[Address(RVA = "0xB8148C", Offset = "0xB8148C", VA = "0xB8148C")]
	private void FollowRotation()
	{
	}

	[Token(Token = "0x60007D5")]
	[Address(RVA = "0xB815C8", Offset = "0xB815C8", VA = "0xB815C8")]
	private void FollowScale()
	{
	}

	[Token(Token = "0x60007D6")]
	[Address(RVA = "0xB81C8C", Offset = "0xB81C8C", VA = "0xB81C8C")]
	public TransformFollow()
	{
	}
}
[Token(Token = "0x200010D")]
public class UFO : InterractableKinematicObject, Exploder.IOnExplode, IElectrocutable, IBurnable
{
	[Token(Token = "0x200010E")]
	private enum State
	{
		[Token(Token = "0x40007BD")]
		Approach,
		[Token(Token = "0x40007BE")]
		Scan,
		[Token(Token = "0x40007BF")]
		Capture,
		[Token(Token = "0x40007C0")]
		ReturnToHome,
		[Token(Token = "0x40007C1")]
		Grabbed,
		[Token(Token = "0x40007C2")]
		Thrown,
		[Token(Token = "0x40007C3")]
		Crashing
	}

	[Token(Token = "0x200010F")]
	[CompilerGenerated]
	private sealed class <RecoverCoroutine>d__31 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40007C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40007C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40007C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UFO <>4__this;

		[Token(Token = "0x170000EB")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60007ED")]
			[Address(RVA = "0xB82D54", Offset = "0xB82D54", VA = "0xB82D54", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000EC")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60007EF")]
			[Address(RVA = "0xB82D9C", Offset = "0xB82D9C", VA = "0xB82D9C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60007EA")]
		[Address(RVA = "0xB82724", Offset = "0xB82724", VA = "0xB82724")]
		[DebuggerHidden]
		public <RecoverCoroutine>d__31(int <>1__state)
		{
		}

		[Token(Token = "0x60007EB")]
		[Address(RVA = "0xB82B58", Offset = "0xB82B58", VA = "0xB82B58", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60007EC")]
		[Address(RVA = "0xB82B5C", Offset = "0xB82B5C", VA = "0xB82B5C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60007EE")]
		[Address(RVA = "0xB82D5C", Offset = "0xB82D5C", VA = "0xB82D5C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40007A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[Header("UFO Configuration", order = 1)]
	public float speed;

	[Token(Token = "0x40007A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	public float altitude;

	[Token(Token = "0x40007A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public float captureSpeed;

	[Token(Token = "0x40007AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	public float closeDistance;

	[Token(Token = "0x40007AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public float captureDistance;

	[Token(Token = "0x40007AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	public float searchRadius;

	[Token(Token = "0x40007AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public float recoverDelay;

	[Token(Token = "0x40007AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public Transform captureBeam;

	[Token(Token = "0x40007AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public GameObject beamSfx;

	[Token(Token = "0x40007B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public AutoRotation rotatingModel;

	[Token(Token = "0x40007B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private Vector3 origin;

	[Token(Token = "0x40007B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
	[SerializeField]
	private State currentState;

	[Token(Token = "0x40007B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	[SerializeField]
	private Vector3 currentDestination;

	[Token(Token = "0x40007B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	[SerializeField]
	private ICapturable currentTarget;

	[Token(Token = "0x40007B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	[SerializeField]
	private Transform currentTargetTransform;

	[Token(Token = "0x40007B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private bool isMoving;

	[Token(Token = "0x40007B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private Transform cachedTransform;

	[Token(Token = "0x40007B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private IEnumerator throwCoroutine;

	[Token(Token = "0x40007B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private float throwTime;

	[Token(Token = "0x40007BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private Disaster creator;

	[Token(Token = "0x40007BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private bool crashed;

	[Token(Token = "0x170000EA")]
	public bool CanBeIgnited
	{
		[Token(Token = "0x60007E8")]
		[Address(RVA = "0xB82B40", Offset = "0xB82B40", VA = "0xB82B40", Slot = "15")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60007D7")]
	[Address(RVA = "0xB81CC8", Offset = "0xB81CC8", VA = "0xB81CC8")]
	private void Awake()
	{
	}

	[Token(Token = "0x60007D8")]
	[Address(RVA = "0xB81D04", Offset = "0xB81D04", VA = "0xB81D04")]
	private void Update()
	{
	}

	[Token(Token = "0x60007D9")]
	[Address(RVA = "0xB81F84", Offset = "0xB81F84", VA = "0xB81F84")]
	public void SetDestination(Vector3 destination)
	{
	}

	[Token(Token = "0x60007DA")]
	[Address(RVA = "0xB81D1C", Offset = "0xB81D1C", VA = "0xB81D1C")]
	private void MoveToDestination()
	{
	}

	[Token(Token = "0x60007DB")]
	[Address(RVA = "0xB8232C", Offset = "0xB8232C", VA = "0xB8232C")]
	private void Scan()
	{
	}

	[Token(Token = "0x60007DC")]
	[Address(RVA = "0xB81F9C", Offset = "0xB81F9C", VA = "0xB81F9C")]
	private void CaptureTarget(ICapturable target)
	{
	}

	[Token(Token = "0x60007DD")]
	[Address(RVA = "0xB824C0", Offset = "0xB824C0", VA = "0xB824C0")]
	public void ReturnToSpace(Vector3 ufoOrigin)
	{
	}

	[Token(Token = "0x60007DE")]
	[Address(RVA = "0xB8252C", Offset = "0xB8252C", VA = "0xB8252C", Slot = "5")]
	public override void Grab(Interactor interactor)
	{
	}

	[Token(Token = "0x60007DF")]
	[Address(RVA = "0xB8263C", Offset = "0xB8263C", VA = "0xB8263C", Slot = "6")]
	public override void Throw(Interactor interactor)
	{
	}

	[Token(Token = "0x60007E0")]
	[Address(RVA = "0xB826B0", Offset = "0xB826B0", VA = "0xB826B0")]
	[IteratorStateMachine(typeof(<RecoverCoroutine>d__31))]
	private IEnumerator RecoverCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60007E1")]
	[Address(RVA = "0xB8274C", Offset = "0xB8274C", VA = "0xB8274C")]
	public void Init(Disaster disaster, Vector3 ufoOrigin, Vector3 bestPosition)
	{
	}

	[Token(Token = "0x60007E2")]
	[Address(RVA = "0xB827B8", Offset = "0xB827B8", VA = "0xB827B8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60007E3")]
	[Address(RVA = "0xB827E8", Offset = "0xB827E8", VA = "0xB827E8", Slot = "11")]
	public void OnExplode(Collision cause)
	{
	}

	[Token(Token = "0x60007E4")]
	[Address(RVA = "0xB82A38", Offset = "0xB82A38", VA = "0xB82A38", Slot = "12")]
	public void Electrocute()
	{
	}

	[Token(Token = "0x60007E5")]
	[Address(RVA = "0xB82A3C", Offset = "0xB82A3C", VA = "0xB82A3C")]
	private void Crash()
	{
	}

	[Token(Token = "0x60007E6")]
	[Address(RVA = "0xB82B38", Offset = "0xB82B38", VA = "0xB82B38", Slot = "13")]
	public void Burn()
	{
	}

	[Token(Token = "0x60007E7")]
	[Address(RVA = "0xB82B3C", Offset = "0xB82B3C", VA = "0xB82B3C", Slot = "14")]
	public void Extinguish(bool crowd = false)
	{
	}

	[Token(Token = "0x60007E9")]
	[Address(RVA = "0xB82B48", Offset = "0xB82B48", VA = "0xB82B48")]
	public UFO()
	{
	}
}
[Token(Token = "0x2000110")]
public class UIButton : MonoBehaviour, IPointerEnterHandler, IEventSystemHandler, IPointerExitHandler, IPointerDownHandler, IPointerUpHandler
{
	[Token(Token = "0x60007F0")]
	[Address(RVA = "0xB82DA4", Offset = "0xB82DA4", VA = "0xB82DA4", Slot = "8")]
	public virtual void OnPointerEnter(PointerEventData eventData)
	{
	}

	[Token(Token = "0x60007F1")]
	[Address(RVA = "0xB82E18", Offset = "0xB82E18", VA = "0xB82E18", Slot = "9")]
	public virtual void OnPointerExit(PointerEventData eventData)
	{
	}

	[Token(Token = "0x60007F2")]
	[Address(RVA = "0xB82E28", Offset = "0xB82E28", VA = "0xB82E28", Slot = "10")]
	public virtual void OnPointerDown(PointerEventData eventData)
	{
	}

	[Token(Token = "0x60007F3")]
	[Address(RVA = "0xB82E9C", Offset = "0xB82E9C", VA = "0xB82E9C", Slot = "11")]
	public virtual void OnPointerUp(PointerEventData eventData)
	{
	}

	[Token(Token = "0x60007F4")]
	[Address(RVA = "0xB82EAC", Offset = "0xB82EAC", VA = "0xB82EAC")]
	public UIButton()
	{
	}
}
[Token(Token = "0x2000111")]
public class UIController : MonoBehaviour
{
	[Token(Token = "0x40007C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private GameController gameController;

	[Token(Token = "0x40007C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Player Player;

	[Token(Token = "0x40007C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TextMeshProUGUI energyDisplay;

	[Token(Token = "0x40007CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public InputController InputController;

	[Token(Token = "0x60007F5")]
	[Address(RVA = "0xB82EB4", Offset = "0xB82EB4", VA = "0xB82EB4")]
	private void Start()
	{
	}

	[Token(Token = "0x60007F6")]
	[Address(RVA = "0xB82F08", Offset = "0xB82F08", VA = "0xB82F08")]
	private void Update()
	{
	}

	[Token(Token = "0x60007F7")]
	[Address(RVA = "0xB82F70", Offset = "0xB82F70", VA = "0xB82F70")]
	public void SelectTerrainMiracle(TerrainType terrainType)
	{
	}

	[Token(Token = "0x60007F8")]
	[Address(RVA = "0xB831E0", Offset = "0xB831E0", VA = "0xB831E0")]
	public void ToggleMultiTerrain()
	{
	}

	[Token(Token = "0x60007F9")]
	[Address(RVA = "0xB8322C", Offset = "0xB8322C", VA = "0xB8322C")]
	public void SelectMiracle(MiracleType miracleType)
	{
	}

	[Token(Token = "0x60007FA")]
	[Address(RVA = "0xB8352C", Offset = "0xB8352C", VA = "0xB8352C")]
	public void CreateHeretic()
	{
	}

	[Token(Token = "0x60007FB")]
	[Address(RVA = "0xB835D8", Offset = "0xB835D8", VA = "0xB835D8")]
	public UIController()
	{
	}
}
[Token(Token = "0x2000112")]
public class VersionIndicator : MonoBehaviour, ILocalizedText
{
	[Token(Token = "0x40007CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private TextMeshPro textMeshPro;

	[Token(Token = "0x40007CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool isCanvasText;

	[Token(Token = "0x40007CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TextMeshProUGUI textMeshProUi;

	[Token(Token = "0x60007FC")]
	[Address(RVA = "0xB835E0", Offset = "0xB835E0", VA = "0xB835E0")]
	private void Start()
	{
	}

	[Token(Token = "0x60007FD")]
	[Address(RVA = "0xB8367C", Offset = "0xB8367C", VA = "0xB8367C", Slot = "4")]
	public void RefreshLabel()
	{
	}

	[Token(Token = "0x60007FE")]
	[Address(RVA = "0xB83764", Offset = "0xB83764", VA = "0xB83764")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60007FF")]
	[Address(RVA = "0xB837C0", Offset = "0xB837C0", VA = "0xB837C0")]
	public VersionIndicator()
	{
	}
}
[Token(Token = "0x2000113")]
public class ViewSwitcher : MonoBehaviour
{
	[Token(Token = "0x40007CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public FloatVariable playerSize;

	[Token(Token = "0x40007CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float TableViewSize;

	[Token(Token = "0x40007D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float StandingViewSize;

	[Token(Token = "0x40007D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float StrategicViewSize;

	[Token(Token = "0x40007D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public Views CurrentView;

	[Token(Token = "0x40007D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform playAreaTransform;

	[Token(Token = "0x40007D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Views previousView;

	[Token(Token = "0x40007D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float heightOffset;

	[Token(Token = "0x6000800")]
	[Address(RVA = "0xB837C8", Offset = "0xB837C8", VA = "0xB837C8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000801")]
	[Address(RVA = "0xB83824", Offset = "0xB83824", VA = "0xB83824")]
	public void Start()
	{
	}

	[Token(Token = "0x6000802")]
	[Address(RVA = "0xB8388C", Offset = "0xB8388C", VA = "0xB8388C")]
	public void SwitchView()
	{
	}

	[Token(Token = "0x6000803")]
	[Address(RVA = "0xB83858", Offset = "0xB83858", VA = "0xB83858")]
	private void RefreshView()
	{
	}

	[Token(Token = "0x6000804")]
	[Address(RVA = "0xB838B4", Offset = "0xB838B4", VA = "0xB838B4")]
	private void NewScale(float scale)
	{
	}

	[Token(Token = "0x6000805")]
	[Address(RVA = "0xB83B04", Offset = "0xB83B04", VA = "0xB83B04")]
	public void HeightInc()
	{
	}

	[Token(Token = "0x6000806")]
	[Address(RVA = "0xB83B18", Offset = "0xB83B18", VA = "0xB83B18")]
	public void HeightDec()
	{
	}

	[Token(Token = "0x6000807")]
	[Address(RVA = "0xB83A34", Offset = "0xB83A34", VA = "0xB83A34")]
	private void RefreshHeight()
	{
	}

	[Token(Token = "0x6000808")]
	[Address(RVA = "0xB83B2C", Offset = "0xB83B2C", VA = "0xB83B2C")]
	public ViewSwitcher()
	{
	}
}
[Token(Token = "0x2000114")]
public class Volcano : MonoBehaviour
{
	[Token(Token = "0x40007D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Configuration", order = 1)]
	public float Burninglength;

	[Token(Token = "0x40007D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float LavaDelay;

	[Token(Token = "0x40007D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float ActivationCost;

	[Token(Token = "0x40007D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Header("Display Configuration", order = 2)]
	public GameObject Particles;

	[Token(Token = "0x40007DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject Ground;

	[Token(Token = "0x40007DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject GroundLava;

	[Token(Token = "0x40007DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	private bool _lavaAdded;

	[Token(Token = "0x40007DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
	private bool _lava2Added;

	[Token(Token = "0x40007DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x43")]
	private bool _burn;

	[Token(Token = "0x40007E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float _explosionTime;

	[Token(Token = "0x40007E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private StartLoopStopManager startLoopStop;

	[Token(Token = "0x40007E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool init;

	[Token(Token = "0x170000ED")]
	public bool Active
	{
		[Token(Token = "0x6000809")]
		[Address(RVA = "0xB83B34", Offset = "0xB83B34", VA = "0xB83B34")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600080A")]
		[Address(RVA = "0xB83B3C", Offset = "0xB83B3C", VA = "0xB83B3C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x600080B")]
	[Address(RVA = "0xB83B48", Offset = "0xB83B48", VA = "0xB83B48")]
	private void Start()
	{
	}

	[Token(Token = "0x600080C")]
	[Address(RVA = "0xB83C2C", Offset = "0xB83C2C", VA = "0xB83C2C")]
	private void Update()
	{
	}

	[Token(Token = "0x600080D")]
	[Address(RVA = "0xB83CE4", Offset = "0xB83CE4", VA = "0xB83CE4")]
	private void AddLava(bool first)
	{
	}

	[Token(Token = "0x600080E")]
	[Address(RVA = "0xB83E00", Offset = "0xB83E00", VA = "0xB83E00")]
	private void RemoveLava()
	{
	}

	[Token(Token = "0x600080F")]
	[Address(RVA = "0xB83E88", Offset = "0xB83E88", VA = "0xB83E88")]
	public void WakeUp()
	{
	}

	[Token(Token = "0x6000810")]
	[Address(RVA = "0xB84124", Offset = "0xB84124", VA = "0xB84124")]
	public void FailWakeUp()
	{
	}

	[Token(Token = "0x6000811")]
	[Address(RVA = "0xB83BB8", Offset = "0xB83BB8", VA = "0xB83BB8")]
	public void Sleep()
	{
	}

	[Token(Token = "0x6000812")]
	[Address(RVA = "0xB841BC", Offset = "0xB841BC", VA = "0xB841BC")]
	public Volcano()
	{
	}
}
[Token(Token = "0x2000115")]
public class VolcanoInteract : InteractableObject, ITooltipProvider
{
	[Token(Token = "0x40007E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Volcano volcano;

	[Token(Token = "0x6000813")]
	[Address(RVA = "0xB841C4", Offset = "0xB841C4", VA = "0xB841C4", Slot = "7")]
	public override bool Use(Interactor interactor)
	{
		return default(bool);
	}

	[Token(Token = "0x6000814")]
	[Address(RVA = "0xB84498", Offset = "0xB84498", VA = "0xB84498", Slot = "11")]
	public TooltipDescription GetTooltip()
	{
		return default(TooltipDescription);
	}

	[Token(Token = "0x6000815")]
	[Address(RVA = "0xB84580", Offset = "0xB84580", VA = "0xB84580")]
	private static string GetLocalizedText(string key)
	{
		return null;
	}

	[Token(Token = "0x6000816")]
	[Address(RVA = "0xB845DC", Offset = "0xB845DC", VA = "0xB845DC")]
	public VolcanoInteract()
	{
	}
}
[Token(Token = "0x2000116")]
public class VolcanoSacrificeHole : MonoBehaviour
{
	[Token(Token = "0x6000817")]
	[Address(RVA = "0xB845E4", Offset = "0xB845E4", VA = "0xB845E4")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000818")]
	[Address(RVA = "0xB846B8", Offset = "0xB846B8", VA = "0xB846B8")]
	public VolcanoSacrificeHole()
	{
	}
}
[Token(Token = "0x2000117")]
public class VRWarning : MonoBehaviour
{
	[Token(Token = "0x6000819")]
	[Address(RVA = "0xB846C0", Offset = "0xB846C0", VA = "0xB846C0")]
	private void Update()
	{
	}

	[Token(Token = "0x600081A")]
	[Address(RVA = "0xB847A0", Offset = "0xB847A0", VA = "0xB847A0")]
	private static bool IsVRPresent()
	{
		return default(bool);
	}

	[Token(Token = "0x600081B")]
	[Address(RVA = "0xB8499C", Offset = "0xB8499C", VA = "0xB8499C")]
	public VRWarning()
	{
	}
}
[Token(Token = "0x2000118")]
public class Window : MonoBehaviour
{
	[Token(Token = "0x2000119")]
	[CompilerGenerated]
	private sealed class <WaitForSave>d__21 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40007EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40007F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40007F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Window <>4__this;

		[Token(Token = "0x40007F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int saveSlot;

		[Token(Token = "0x170000EE")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000837")]
			[Address(RVA = "0xB85A98", Offset = "0xB85A98", VA = "0xB85A98", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000EF")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000839")]
			[Address(RVA = "0xB85AE0", Offset = "0xB85AE0", VA = "0xB85AE0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000834")]
		[Address(RVA = "0xB853D8", Offset = "0xB853D8", VA = "0xB853D8")]
		[DebuggerHidden]
		public <WaitForSave>d__21(int <>1__state)
		{
		}

		[Token(Token = "0x6000835")]
		[Address(RVA = "0xB859D8", Offset = "0xB859D8", VA = "0xB859D8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000836")]
		[Address(RVA = "0xB859DC", Offset = "0xB859DC", VA = "0xB859DC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000838")]
		[Address(RVA = "0xB85AA0", Offset = "0xB85AA0", VA = "0xB85AA0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200011A")]
	[CompilerGenerated]
	private sealed class <RunPopupDestroy>d__27 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40007F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40007F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40007F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Window <>4__this;

		[Token(Token = "0x170000F0")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600083D")]
			[Address(RVA = "0xB85BF8", Offset = "0xB85BF8", VA = "0xB85BF8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000F1")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600083F")]
			[Address(RVA = "0xB85C40", Offset = "0xB85C40", VA = "0xB85C40", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600083A")]
		[Address(RVA = "0xB856BC", Offset = "0xB856BC", VA = "0xB856BC")]
		[DebuggerHidden]
		public <RunPopupDestroy>d__27(int <>1__state)
		{
		}

		[Token(Token = "0x600083B")]
		[Address(RVA = "0xB85AE8", Offset = "0xB85AE8", VA = "0xB85AE8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600083C")]
		[Address(RVA = "0xB85AEC", Offset = "0xB85AEC", VA = "0xB85AEC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600083E")]
		[Address(RVA = "0xB85C00", Offset = "0xB85C00", VA = "0xB85C00", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200011B")]
	[CompilerGenerated]
	private sealed class <FadeCanvas>d__28 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40007F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40007F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40007F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CanvasGroup canvas;

		[Token(Token = "0x40007F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float duration;

		[Token(Token = "0x40007FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float endAlpha;

		[Token(Token = "0x40007FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float startAlpha;

		[Token(Token = "0x40007FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <startTime>5__2;

		[Token(Token = "0x40007FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float <endTime>5__3;

		[Token(Token = "0x40007FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private CurvedUIVertexEffect[] <curvedElements>5__4;

		[Token(Token = "0x170000F2")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000843")]
			[Address(RVA = "0xB85EA0", Offset = "0xB85EA0", VA = "0xB85EA0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000F3")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000845")]
			[Address(RVA = "0xB85EE8", Offset = "0xB85EE8", VA = "0xB85EE8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000840")]
		[Address(RVA = "0xB856E4", Offset = "0xB856E4", VA = "0xB856E4")]
		[DebuggerHidden]
		public <FadeCanvas>d__28(int <>1__state)
		{
		}

		[Token(Token = "0x6000841")]
		[Address(RVA = "0xB85C48", Offset = "0xB85C48", VA = "0xB85C48", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000842")]
		[Address(RVA = "0xB85C4C", Offset = "0xB85C4C", VA = "0xB85C4C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000844")]
		[Address(RVA = "0xB85EA8", Offset = "0xB85EA8", VA = "0xB85EA8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40007E4")]
	private const float Active = 1f;

	[Token(Token = "0x40007E5")]
	private const float Inactive = 0.2f;

	[Token(Token = "0x40007E6")]
	private const float Hidden = 0f;

	[Token(Token = "0x40007E7")]
	private const float FadeDuration = 0.5f;

	[Token(Token = "0x40007E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float destroyTime;

	[Token(Token = "0x40007E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ConfirmDialog confirmDialog;

	[Token(Token = "0x40007EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public CanvasGroup mainCanvaGroup;

	[Token(Token = "0x40007EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public CanvasGroup firstPage;

	[Token(Token = "0x40007EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private CanvasGroup currentPage;

	[Token(Token = "0x40007ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private CanvasGroup previousPage;

	[Token(Token = "0x40007EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private SaveSelector saveSelector;

	[Token(Token = "0x600081C")]
	[Address(RVA = "0xB849A4", Offset = "0xB849A4", VA = "0xB849A4")]
	private void Start()
	{
	}

	[Token(Token = "0x600081D")]
	[Address(RVA = "0xB849AC", Offset = "0xB849AC", VA = "0xB849AC")]
	public void Navigate(CanvasGroup nextPage)
	{
	}

	[Token(Token = "0x600081E")]
	[Address(RVA = "0xB84B74", Offset = "0xB84B74", VA = "0xB84B74")]
	public void QuitGame()
	{
	}

	[Token(Token = "0x600081F")]
	[Address(RVA = "0xB84C68", Offset = "0xB84C68", VA = "0xB84C68")]
	public void RestartGame()
	{
	}

	[Token(Token = "0x6000820")]
	[Address(RVA = "0xB84D5C", Offset = "0xB84D5C", VA = "0xB84D5C")]
	public void SaveGame(SaveSelector selector)
	{
	}

	[Token(Token = "0x6000821")]
	[Address(RVA = "0xB84FC4", Offset = "0xB84FC4", VA = "0xB84FC4")]
	public void LoadGame()
	{
	}

	[Token(Token = "0x6000822")]
	[Address(RVA = "0xB850B8", Offset = "0xB850B8", VA = "0xB850B8")]
	public void LoadAutoSave()
	{
	}

	[Token(Token = "0x6000823")]
	[Address(RVA = "0xB851AC", Offset = "0xB851AC", VA = "0xB851AC")]
	private void QuitGameConfirmCallback(bool result)
	{
	}

	[Token(Token = "0x6000824")]
	[Address(RVA = "0xB85288", Offset = "0xB85288", VA = "0xB85288")]
	private void RestartGameConfirmCallback(bool result)
	{
	}

	[Token(Token = "0x6000825")]
	[Address(RVA = "0xB84EE8", Offset = "0xB84EE8", VA = "0xB84EE8")]
	private void SaveGameConfirmCallback(bool result)
	{
	}

	[Token(Token = "0x6000826")]
	[Address(RVA = "0xB85354", Offset = "0xB85354", VA = "0xB85354")]
	[IteratorStateMachine(typeof(<WaitForSave>d__21))]
	private IEnumerator WaitForSave(int saveSlot)
	{
		return null;
	}

	[Token(Token = "0x6000827")]
	[Address(RVA = "0xB85400", Offset = "0xB85400", VA = "0xB85400")]
	private void LoadGameConfirmCallback(bool result)
	{
	}

	[Token(Token = "0x6000828")]
	[Address(RVA = "0xB854AC", Offset = "0xB854AC", VA = "0xB854AC")]
	private void LoadAutoSaveConfirmCallback(bool result)
	{
	}

	[Token(Token = "0x6000829")]
	[Address(RVA = "0xB85558", Offset = "0xB85558", VA = "0xB85558")]
	public void SwitchLanguage()
	{
	}

	[Token(Token = "0x600082A")]
	[Address(RVA = "0xB85334", Offset = "0xB85334", VA = "0xB85334")]
	public void Close()
	{
	}

	[Token(Token = "0x600082B")]
	[Address(RVA = "0xB85618", Offset = "0xB85618", VA = "0xB85618")]
	public void Back()
	{
	}

	[Token(Token = "0x600082C")]
	[Address(RVA = "0xB855A4", Offset = "0xB855A4", VA = "0xB855A4")]
	[IteratorStateMachine(typeof(<RunPopupDestroy>d__27))]
	private IEnumerator RunPopupDestroy()
	{
		return null;
	}

	[Token(Token = "0x600082D")]
	[Address(RVA = "0xB84ADC", Offset = "0xB84ADC", VA = "0xB84ADC")]
	[IteratorStateMachine(typeof(<FadeCanvas>d__28))]
	public static IEnumerator FadeCanvas(CanvasGroup canvas, float startAlpha, float endAlpha, float duration)
	{
		return null;
	}

	[Token(Token = "0x600082E")]
	[Address(RVA = "0xB8570C", Offset = "0xB8570C", VA = "0xB8570C")]
	public void Reset()
	{
	}

	[Token(Token = "0x600082F")]
	[Address(RVA = "0xB8588C", Offset = "0xB8588C", VA = "0xB8588C")]
	public void IncSpeed()
	{
	}

	[Token(Token = "0x6000830")]
	[Address(RVA = "0xB858D8", Offset = "0xB858D8", VA = "0xB858D8")]
	public void DecSpeed()
	{
	}

	[Token(Token = "0x6000831")]
	[Address(RVA = "0xB85924", Offset = "0xB85924", VA = "0xB85924")]
	public void NormalSpeed()
	{
	}

	[Token(Token = "0x6000832")]
	[Address(RVA = "0xB85970", Offset = "0xB85970", VA = "0xB85970")]
	public void LockLanguage()
	{
	}

	[Token(Token = "0x6000833")]
	[Address(RVA = "0xB859C8", Offset = "0xB859C8", VA = "0xB859C8")]
	public Window()
	{
	}
}
[Token(Token = "0x200011C")]
public struct Work : IEquatable<Work>
{
	[Token(Token = "0x40007FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public Activity Activity;

	[Token(Token = "0x4000800")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public ResourceType Resource;

	[Token(Token = "0x6000846")]
	[Address(RVA = "0xB85EF0", Offset = "0xB85EF0", VA = "0xB85EF0", Slot = "4")]
	public bool Equals(Work other)
	{
		return default(bool);
	}
}
[Token(Token = "0x200011D")]
public class Yoyo : MonoBehaviour
{
	[Token(Token = "0x4000801")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float degreePerSec;

	[Token(Token = "0x4000802")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float duration;

	[Token(Token = "0x4000803")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool returning;

	[Token(Token = "0x4000804")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Vector3 rotationAxis;

	[Token(Token = "0x4000805")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float movementStartTime;

	[Token(Token = "0x6000847")]
	[Address(RVA = "0xB85F18", Offset = "0xB85F18", VA = "0xB85F18")]
	private void Start()
	{
	}

	[Token(Token = "0x6000848")]
	[Address(RVA = "0xB86010", Offset = "0xB86010", VA = "0xB86010")]
	private void Update()
	{
	}

	[Token(Token = "0x6000849")]
	[Address(RVA = "0xB86104", Offset = "0xB86104", VA = "0xB86104")]
	public Yoyo()
	{
	}
}
[Token(Token = "0x200011E")]
public static class BuildConstants
{
	[Token(Token = "0x200011F")]
	public enum ReleaseType
	{
		[Token(Token = "0x400080D")]
		None,
		[Token(Token = "0x400080E")]
		Release
	}

	[Token(Token = "0x2000120")]
	public enum Platform
	{
		[Token(Token = "0x4000810")]
		None,
		[Token(Token = "0x4000811")]
		Android,
		[Token(Token = "0x4000812")]
		PC
	}

	[Token(Token = "0x2000121")]
	public enum Architecture
	{
		[Token(Token = "0x4000814")]
		None,
		[Token(Token = "0x4000815")]
		Android,
		[Token(Token = "0x4000816")]
		Windows_x64
	}

	[Token(Token = "0x2000122")]
	public enum Distribution
	{
		[Token(Token = "0x4000818")]
		None,
		[Token(Token = "0x4000819")]
		PICO,
		[Token(Token = "0x400081A")]
		OCULUS,
		[Token(Token = "0x400081B")]
		STEAM,
		[Token(Token = "0x400081C")]
		ITCHIO,
		[Token(Token = "0x400081D")]
		VIVEPORT
	}

	[Token(Token = "0x4000806")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static readonly DateTime buildDate;

	[Token(Token = "0x4000807")]
	public const string version = "1.40";

	[Token(Token = "0x4000808")]
	public const ReleaseType releaseType = ReleaseType.Release;

	[Token(Token = "0x4000809")]
	public const Platform platform = Platform.Android;

	[Token(Token = "0x400080A")]
	public const Architecture architecture = Architecture.Android;

	[Token(Token = "0x400080B")]
	public const Distribution distribution = Distribution.OCULUS;
}
[Token(Token = "0x2000123")]
public class ViveportDemo : MonoBehaviour
{
	[Token(Token = "0x2000124")]
	private class MyLicenseChecker : Viveport.Api.LicenseChecker
	{
		[Token(Token = "0x600085D")]
		[Address(RVA = "0xB8AB48", Offset = "0xB8AB48", VA = "0xB8AB48", Slot = "4")]
		public override void OnSuccess(long issueTime, long expirationTime, int latestVersion, bool updateRequired)
		{
		}

		[Token(Token = "0x600085E")]
		[Address(RVA = "0xB8ACB0", Offset = "0xB8ACB0", VA = "0xB8ACB0", Slot = "5")]
		public override void OnFailure(int errorCode, string errorMessage)
		{
		}

		[Token(Token = "0x600085F")]
		[Address(RVA = "0xB89178", Offset = "0xB89178", VA = "0xB89178")]
		public MyLicenseChecker()
		{
		}
	}

	[Token(Token = "0x400081E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int nInitValue;

	[Token(Token = "0x400081F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private int nResult;

	[Token(Token = "0x4000820")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int nWidth;

	[Token(Token = "0x4000821")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private int nHeight;

	[Token(Token = "0x4000822")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int nXStart;

	[Token(Token = "0x4000823")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private int nYStart;

	[Token(Token = "0x4000824")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private string stringToEdit;

	[Token(Token = "0x4000825")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private string StatsCount;

	[Token(Token = "0x4000826")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private string achivToEdit;

	[Token(Token = "0x4000827")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private string leaderboardToEdit;

	[Token(Token = "0x4000828")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private string leaderboardUserName;

	[Token(Token = "0x4000829")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private string leaderboardScore;

	[Token(Token = "0x400082A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static bool bInit;

	[Token(Token = "0x400082B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
	private static bool bIsReady;

	[Token(Token = "0x400082C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
	private static bool bUserProfileIsReady;

	[Token(Token = "0x400082D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3")]
	private static bool bArcadeIsReady;

	[Token(Token = "0x400082E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static bool bTokenIsReady;

	[Token(Token = "0x400082F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static string msgBuffer;

	[Token(Token = "0x4000830")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static string APP_ID;

	[Token(Token = "0x4000831")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static string APP_KEY;

	[Token(Token = "0x600084B")]
	[Address(RVA = "0xB861D8", Offset = "0xB861D8", VA = "0xB861D8")]
	private static void Log(string msg)
	{
	}

	[Token(Token = "0x600084C")]
	[Address(RVA = "0xB862A4", Offset = "0xB862A4", VA = "0xB862A4")]
	private void Start()
	{
	}

	[Token(Token = "0x600084D")]
	[Address(RVA = "0xB86638", Offset = "0xB86638", VA = "0xB86638")]
	private void Update()
	{
	}

	[Token(Token = "0x600084E")]
	[Address(RVA = "0xB8663C", Offset = "0xB8663C", VA = "0xB8663C")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x600084F")]
	[Address(RVA = "0xB89D64", Offset = "0xB89D64", VA = "0xB89D64")]
	private static void InitStatusHandler(int nResult)
	{
	}

	[Token(Token = "0x6000850")]
	[Address(RVA = "0xB89E84", Offset = "0xB89E84", VA = "0xB89E84")]
	private static void IsReadyHandler(int nResult)
	{
	}

	[Token(Token = "0x6000851")]
	[Address(RVA = "0xB89FA4", Offset = "0xB89FA4", VA = "0xB89FA4")]
	private static void IsTokenReadyHandler(int nResult)
	{
	}

	[Token(Token = "0x6000852")]
	[Address(RVA = "0xB8A0C0", Offset = "0xB8A0C0", VA = "0xB8A0C0")]
	private static void UserProfileIsReadyHandler(int nResult)
	{
	}

	[Token(Token = "0x6000853")]
	[Address(RVA = "0xB8A194", Offset = "0xB8A194", VA = "0xB8A194")]
	private static void GetSessionTokenHandler(int nResult, string message)
	{
	}

	[Token(Token = "0x6000854")]
	[Address(RVA = "0xB8A2D0", Offset = "0xB8A2D0", VA = "0xB8A2D0")]
	private static void QueryRunTimeHandler(int nResult, int nMode)
	{
	}

	[Token(Token = "0x6000855")]
	[Address(RVA = "0xB8A3CC", Offset = "0xB8A3CC", VA = "0xB8A3CC")]
	private static void IsArcadeLeaderboardReadyHandler(int nResult)
	{
	}

	[Token(Token = "0x6000856")]
	[Address(RVA = "0xB8A4EC", Offset = "0xB8A4EC", VA = "0xB8A4EC")]
	private static void ShutdownHandler(int nResult)
	{
	}

	[Token(Token = "0x6000857")]
	[Address(RVA = "0xB8A5F4", Offset = "0xB8A5F4", VA = "0xB8A5F4")]
	private static void DownloadStatsHandler(int nResult)
	{
	}

	[Token(Token = "0x6000858")]
	[Address(RVA = "0xB8A6CC", Offset = "0xB8A6CC", VA = "0xB8A6CC")]
	private static void UploadStatsHandler(int nResult)
	{
	}

	[Token(Token = "0x6000859")]
	[Address(RVA = "0xB8A7A4", Offset = "0xB8A7A4", VA = "0xB8A7A4")]
	private static void DownloadLeaderboardHandler(int nResult)
	{
	}

	[Token(Token = "0x600085A")]
	[Address(RVA = "0xB8A87C", Offset = "0xB8A87C", VA = "0xB8A87C")]
	private static void UploadLeaderboardScoreHandler(int nResult)
	{
	}

	[Token(Token = "0x600085B")]
	[Address(RVA = "0xB8A954", Offset = "0xB8A954", VA = "0xB8A954")]
	public ViveportDemo()
	{
	}
}
[Token(Token = "0x2000125")]
public class ViveportDemo_ArcadeSession : MonoBehaviour
{
	[Token(Token = "0x4000832")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int nWidth;

	[Token(Token = "0x4000833")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private int nHeight;

	[Token(Token = "0x4000834")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int nXStart;

	[Token(Token = "0x4000835")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private int nYStart;

	[Token(Token = "0x4000836")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static string VIVEPORT_ARCADE_APP_TEST_ID;

	[Token(Token = "0x6000860")]
	[Address(RVA = "0xB8AD88", Offset = "0xB8AD88", VA = "0xB8AD88")]
	private void Start()
	{
	}

	[Token(Token = "0x6000861")]
	[Address(RVA = "0xB8AE64", Offset = "0xB8AE64", VA = "0xB8AE64")]
	private void Update()
	{
	}

	[Token(Token = "0x6000862")]
	[Address(RVA = "0xB8AE68", Offset = "0xB8AE68", VA = "0xB8AE68")]
	private void InitStatusHandler(int nResult)
	{
	}

	[Token(Token = "0x6000863")]
	[Address(RVA = "0xB8AF58", Offset = "0xB8AF58", VA = "0xB8AF58")]
	public ViveportDemo_ArcadeSession()
	{
	}
}
[Token(Token = "0x2000126")]
public class ViveportDemo_Deeplink : MonoBehaviour
{
	[Token(Token = "0x2000127")]
	private class GotoAppDeeplinkChecker : Viveport.Deeplink.DeeplinkChecker
	{
		[Token(Token = "0x600086F")]
		[Address(RVA = "0xB8BCBC", Offset = "0xB8BCBC", VA = "0xB8BCBC", Slot = "4")]
		public override void OnSuccess()
		{
		}

		[Token(Token = "0x6000870")]
		[Address(RVA = "0xB8BEF8", Offset = "0xB8BEF8", VA = "0xB8BEF8", Slot = "5")]
		public override void OnFailure(int errorCode, string errorMessage)
		{
		}

		[Token(Token = "0x6000871")]
		[Address(RVA = "0xB8B8FC", Offset = "0xB8B8FC", VA = "0xB8B8FC")]
		public GotoAppDeeplinkChecker()
		{
		}
	}

	[Token(Token = "0x200012A")]
	private class GotoStoreDeeplinkChecker : Viveport.Deeplink.DeeplinkChecker
	{
		[Token(Token = "0x6000877")]
		[Address(RVA = "0xB8C1A8", Offset = "0xB8C1A8", VA = "0xB8C1A8", Slot = "4")]
		public override void OnSuccess()
		{
		}

		[Token(Token = "0x6000878")]
		[Address(RVA = "0xB8C2CC", Offset = "0xB8C2CC", VA = "0xB8C2CC", Slot = "5")]
		public override void OnFailure(int errorCode, string errorMessage)
		{
		}

		[Token(Token = "0x6000879")]
		[Address(RVA = "0xB8BA44", Offset = "0xB8BA44", VA = "0xB8BA44")]
		public GotoStoreDeeplinkChecker()
		{
		}
	}

	[Token(Token = "0x200012D")]
	private class GoToAppOrGoToStoreDeeplinkChecker : Viveport.Deeplink.DeeplinkChecker
	{
		[Token(Token = "0x600087F")]
		[Address(RVA = "0xB8C574", Offset = "0xB8C574", VA = "0xB8C574", Slot = "4")]
		public override void OnSuccess()
		{
		}

		[Token(Token = "0x6000880")]
		[Address(RVA = "0xB8C698", Offset = "0xB8C698", VA = "0xB8C698", Slot = "5")]
		public override void OnFailure(int errorCode, string errorMessage)
		{
		}

		[Token(Token = "0x6000881")]
		[Address(RVA = "0xB8BAA8", Offset = "0xB8BAA8", VA = "0xB8BAA8")]
		public GoToAppOrGoToStoreDeeplinkChecker()
		{
		}
	}

	[Token(Token = "0x4000837")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static string VIVEPORT_ID;

	[Token(Token = "0x4000838")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static string VIVEPORT_KEY;

	[Token(Token = "0x4000839")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private string GoToApp_Viveport_ID;

	[Token(Token = "0x400083A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private string GoToStore_Viveport_ID;

	[Token(Token = "0x400083B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private string LaunchData;

	[Token(Token = "0x400083C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private string LaunchBranchName;

	[Token(Token = "0x400083D")]
	private const int SUCCESS = 0;

	[Token(Token = "0x400083E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static bool bInitComplete;

	[Token(Token = "0x6000865")]
	[Address(RVA = "0xB8AFD8", Offset = "0xB8AFD8", VA = "0xB8AFD8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000866")]
	[Address(RVA = "0xB8B0C8", Offset = "0xB8B0C8", VA = "0xB8B0C8")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000867")]
	[Address(RVA = "0xB8B16C", Offset = "0xB8B16C", VA = "0xB8B16C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000868")]
	[Address(RVA = "0xB8B23C", Offset = "0xB8B23C", VA = "0xB8B23C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000869")]
	[Address(RVA = "0xB8B2D4", Offset = "0xB8B2D4", VA = "0xB8B2D4")]
	private static void InitStatusHandler(int nResult)
	{
	}

	[Token(Token = "0x600086A")]
	[Address(RVA = "0xB8B5C0", Offset = "0xB8B5C0", VA = "0xB8B5C0")]
	private static void IsReadyHandler(int nResult)
	{
	}

	[Token(Token = "0x600086B")]
	[Address(RVA = "0xB8B69C", Offset = "0xB8B69C", VA = "0xB8B69C")]
	private static void ShutdownHandler(int nResult)
	{
	}

	[Token(Token = "0x600086C")]
	[Address(RVA = "0xB8B6A0", Offset = "0xB8B6A0", VA = "0xB8B6A0")]
	private void Update()
	{
	}

	[Token(Token = "0x600086D")]
	[Address(RVA = "0xB8BB58", Offset = "0xB8BB58", VA = "0xB8BB58")]
	public ViveportDemo_Deeplink()
	{
	}
}
[Token(Token = "0x2000130")]
public class ViveportDemo_DLC : MonoBehaviour
{
	[Token(Token = "0x400084B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int nWidth;

	[Token(Token = "0x400084C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private int nHeight;

	[Token(Token = "0x400084D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int nXStart;

	[Token(Token = "0x400084E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private int nYStart;

	[Token(Token = "0x400084F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static string APP_ID;

	[Token(Token = "0x4000850")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static bool bInit;

	[Token(Token = "0x6000887")]
	[Address(RVA = "0xB8C940", Offset = "0xB8C940", VA = "0xB8C940")]
	private void Start()
	{
	}

	[Token(Token = "0x6000888")]
	[Address(RVA = "0xB8CA10", Offset = "0xB8CA10", VA = "0xB8CA10")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000889")]
	[Address(RVA = "0xB8CDC4", Offset = "0xB8CDC4", VA = "0xB8CDC4")]
	private static void InitStatusHandler(int nResult)
	{
	}

	[Token(Token = "0x600088A")]
	[Address(RVA = "0xB8CDC8", Offset = "0xB8CDC8", VA = "0xB8CDC8")]
	private static void ShutdownHandler(int nResult)
	{
	}

	[Token(Token = "0x600088B")]
	[Address(RVA = "0xB8CDCC", Offset = "0xB8CDCC", VA = "0xB8CDCC")]
	private static void IsDLCReadyHandler(int nResult)
	{
	}

	[Token(Token = "0x600088C")]
	[Address(RVA = "0xB8CDD0", Offset = "0xB8CDD0", VA = "0xB8CDD0")]
	public ViveportDemo_DLC()
	{
	}
}
[Token(Token = "0x2000131")]
public class ViveportDemo_IAP : MonoBehaviour
{
	[Token(Token = "0x2000132")]
	public class Item
	{
		[Token(Token = "0x400085D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string ticket;

		[Token(Token = "0x400085E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string[] items;

		[Token(Token = "0x400085F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string subscription_ticket;

		[Token(Token = "0x6000895")]
		[Address(RVA = "0xB8EC28", Offset = "0xB8EC28", VA = "0xB8EC28")]
		public Item()
		{
		}
	}

	[Token(Token = "0x2000133")]
	private class Result : Viveport.IAPurchase.IAPurchaseListener
	{
		[Token(Token = "0x4000860")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Item mItem;

		[Token(Token = "0x6000896")]
		[Address(RVA = "0xB8ECAC", Offset = "0xB8ECAC", VA = "0xB8ECAC", Slot = "4")]
		public override void OnSuccess(string pchCurrencyName)
		{
		}

		[Token(Token = "0x6000897")]
		[Address(RVA = "0xB8ED6C", Offset = "0xB8ED6C", VA = "0xB8ED6C", Slot = "5")]
		public override void OnRequestSuccess(string pchPurchaseId)
		{
		}

		[Token(Token = "0x6000898")]
		[Address(RVA = "0xB8EE30", Offset = "0xB8EE30", VA = "0xB8EE30", Slot = "6")]
		public override void OnPurchaseSuccess(string pchPurchaseId)
		{
		}

		[Token(Token = "0x6000899")]
		[Address(RVA = "0xB8EF20", Offset = "0xB8EF20", VA = "0xB8EF20", Slot = "7")]
		public override void OnQuerySuccess(Viveport.IAPurchase.QueryResponse response)
		{
		}

		[Token(Token = "0x600089A")]
		[Address(RVA = "0xB8EFC4", Offset = "0xB8EFC4", VA = "0xB8EFC4", Slot = "8")]
		public override void OnQuerySuccess(Viveport.IAPurchase.QueryListResponse response)
		{
		}

		[Token(Token = "0x600089B")]
		[Address(RVA = "0xB8F7DC", Offset = "0xB8F7DC", VA = "0xB8F7DC", Slot = "9")]
		public override void OnBalanceSuccess(string pchBalance)
		{
		}

		[Token(Token = "0x600089C")]
		[Address(RVA = "0xB8F868", Offset = "0xB8F868", VA = "0xB8F868", Slot = "11")]
		public override void OnRequestSubscriptionSuccess(string pchSubscriptionId)
		{
		}

		[Token(Token = "0x600089D")]
		[Address(RVA = "0xB8F92C", Offset = "0xB8F92C", VA = "0xB8F92C", Slot = "12")]
		public override void OnRequestSubscriptionWithPlanIDSuccess(string pchSubscriptionId)
		{
		}

		[Token(Token = "0x600089E")]
		[Address(RVA = "0xB8F9F0", Offset = "0xB8F9F0", VA = "0xB8F9F0", Slot = "13")]
		public override void OnSubscribeSuccess(string pchSubscriptionId)
		{
		}

		[Token(Token = "0x600089F")]
		[Address(RVA = "0xB8FAE0", Offset = "0xB8FAE0", VA = "0xB8FAE0", Slot = "14")]
		public override void OnQuerySubscriptionSuccess(Viveport.IAPurchase.Subscription[] subscriptionlist)
		{
		}

		[Token(Token = "0x60008A0")]
		[Address(RVA = "0xB8FF9C", Offset = "0xB8FF9C", VA = "0xB8FF9C", Slot = "15")]
		public override void OnQuerySubscriptionListSuccess(Viveport.IAPurchase.Subscription[] subscriptionlist)
		{
		}

		[Token(Token = "0x60008A1")]
		[Address(RVA = "0xB90458", Offset = "0xB90458", VA = "0xB90458", Slot = "16")]
		public override void OnCancelSubscriptionSuccess(bool bCanceled)
		{
		}

		[Token(Token = "0x60008A2")]
		[Address(RVA = "0xB904FC", Offset = "0xB904FC", VA = "0xB904FC", Slot = "10")]
		public override void OnFailure(int nCode, string pchMessage)
		{
		}

		[Token(Token = "0x60008A3")]
		[Address(RVA = "0xB8D05C", Offset = "0xB8D05C", VA = "0xB8D05C")]
		public Result()
		{
		}
	}

	[Token(Token = "0x4000851")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int nWidth;

	[Token(Token = "0x4000852")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private int nHeight;

	[Token(Token = "0x4000853")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int nXStart;

	[Token(Token = "0x4000854")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private int nYStart;

	[Token(Token = "0x4000855")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static string IAP_APP_TEST_ID;

	[Token(Token = "0x4000856")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static string IAP_APP_TEST_KEY;

	[Token(Token = "0x4000857")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Result mListener;

	[Token(Token = "0x4000858")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static bool bIsDuplicatedSubscription;

	[Token(Token = "0x4000859")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
	private static bool bInit_Done;

	[Token(Token = "0x400085A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
	private static bool bIsReady_Done;

	[Token(Token = "0x400085B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13")]
	private static bool bShutdown_Done;

	[Token(Token = "0x400085C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Text winText;

	[Token(Token = "0x600088E")]
	[Address(RVA = "0xB8CE64", Offset = "0xB8CE64", VA = "0xB8CE64")]
	private void Start()
	{
	}

	[Token(Token = "0x600088F")]
	[Address(RVA = "0xB8D0CC", Offset = "0xB8D0CC", VA = "0xB8D0CC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000890")]
	[Address(RVA = "0xB8D0D0", Offset = "0xB8D0D0", VA = "0xB8D0D0")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000891")]
	[Address(RVA = "0xB8E9B8", Offset = "0xB8E9B8", VA = "0xB8E9B8")]
	private static void InitStatusHandler(int nResult)
	{
	}

	[Token(Token = "0x6000892")]
	[Address(RVA = "0xB8EA90", Offset = "0xB8EA90", VA = "0xB8EA90")]
	private static void ShutdownStatusHandler(int nResult)
	{
	}

	[Token(Token = "0x6000893")]
	[Address(RVA = "0xB8EB68", Offset = "0xB8EB68", VA = "0xB8EB68")]
	public ViveportDemo_IAP()
	{
	}
}
[Token(Token = "0x2000134")]
public class ViveportDemo_MainThreadDispatcher : MonoBehaviour
{
	[Token(Token = "0x2000135")]
	private class ThisCallbackWillNotWorkFine : Viveport.IAPurchase.IAPurchaseListener
	{
		[Token(Token = "0x60008A8")]
		[Address(RVA = "0xB90804", Offset = "0xB90804", VA = "0xB90804", Slot = "4")]
		public override void OnSuccess(string pchCurrencyName)
		{
		}

		[Token(Token = "0x60008A9")]
		[Address(RVA = "0xB908A0", Offset = "0xB908A0", VA = "0xB908A0")]
		public ThisCallbackWillNotWorkFine()
		{
		}
	}

	[Token(Token = "0x2000136")]
	private class ThisCallbackWillWorkFine_01 : Viveport.IAPurchase.IAPurchaseListener
	{
		[Token(Token = "0x60008AA")]
		[Address(RVA = "0xB908A8", Offset = "0xB908A8", VA = "0xB908A8", Slot = "4")]
		public override void OnSuccess(string pchCurrencyName)
		{
		}

		[Token(Token = "0x60008AB")]
		[Address(RVA = "0xB90764", Offset = "0xB90764", VA = "0xB90764")]
		public ThisCallbackWillWorkFine_01()
		{
		}
	}

	[Token(Token = "0x2000138")]
	private class ThisCallbackWillWorkFine_02 : Viveport.IAPurchase.IAPurchaseListener
	{
		[Token(Token = "0x2000139")]
		[CompilerGenerated]
		private sealed class <ShowResult>d__1 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000866")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000867")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000868")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string pchCurrencyName;

			[Token(Token = "0x170000F4")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60008B4")]
				[Address(RVA = "0xB90E20", Offset = "0xB90E20", VA = "0xB90E20", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000F5")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60008B6")]
				[Address(RVA = "0xB90E68", Offset = "0xB90E68", VA = "0xB90E68", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60008B1")]
			[Address(RVA = "0xB90D0C", Offset = "0xB90D0C", VA = "0xB90D0C")]
			[DebuggerHidden]
			public <ShowResult>d__1(int <>1__state)
			{
			}

			[Token(Token = "0x60008B2")]
			[Address(RVA = "0xB90D3C", Offset = "0xB90D3C", VA = "0xB90D3C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60008B3")]
			[Address(RVA = "0xB90D40", Offset = "0xB90D40", VA = "0xB90D40", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60008B5")]
			[Address(RVA = "0xB90E28", Offset = "0xB90E28", VA = "0xB90E28", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x60008AE")]
		[Address(RVA = "0xB90A40", Offset = "0xB90A40", VA = "0xB90A40", Slot = "4")]
		public override void OnSuccess(string pchCurrencyName)
		{
		}

		[Token(Token = "0x60008AF")]
		[Address(RVA = "0xB90AB0", Offset = "0xB90AB0", VA = "0xB90AB0")]
		[IteratorStateMachine(typeof(<ShowResult>d__1))]
		private IEnumerator ShowResult(string pchCurrencyName)
		{
			return null;
		}

		[Token(Token = "0x60008B0")]
		[Address(RVA = "0xB90D34", Offset = "0xB90D34", VA = "0xB90D34")]
		public ThisCallbackWillWorkFine_02()
		{
		}
	}

	[Token(Token = "0x4000861")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text uiText;

	[Token(Token = "0x4000862")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Text myApiResultText;

	[Token(Token = "0x4000863")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static readonly string appId;

	[Token(Token = "0x4000864")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static readonly string apiKey;

	[Token(Token = "0x60008A4")]
	[Address(RVA = "0xB905CC", Offset = "0xB905CC", VA = "0xB905CC")]
	private void Start()
	{
	}

	[Token(Token = "0x60008A5")]
	[Address(RVA = "0xB906C4", Offset = "0xB906C4", VA = "0xB906C4")]
	private void InitCallback(int errorCode)
	{
	}

	[Token(Token = "0x60008A6")]
	[Address(RVA = "0xB9076C", Offset = "0xB9076C", VA = "0xB9076C")]
	public ViveportDemo_MainThreadDispatcher()
	{
	}
}
[Token(Token = "0x200013A")]
public class ViveportDemo_Subscription : MonoBehaviour
{
	[Token(Token = "0x4000869")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int nWidth;

	[Token(Token = "0x400086A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private int nHeight;

	[Token(Token = "0x400086B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static bool bIsReady;

	[Token(Token = "0x400086C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int nXStart;

	[Token(Token = "0x400086D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private int nYStart;

	[Token(Token = "0x400086E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static string APP_ID;

	[Token(Token = "0x400086F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static bool bInit;

	[Token(Token = "0x60008B7")]
	[Address(RVA = "0xB90E70", Offset = "0xB90E70", VA = "0xB90E70")]
	private void Start()
	{
	}

	[Token(Token = "0x60008B8")]
	[Address(RVA = "0xB90F40", Offset = "0xB90F40", VA = "0xB90F40")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x60008B9")]
	[Address(RVA = "0xB91BCC", Offset = "0xB91BCC", VA = "0xB91BCC")]
	private static void InitStatusHandler(int nResult)
	{
	}

	[Token(Token = "0x60008BA")]
	[Address(RVA = "0xB91CEC", Offset = "0xB91CEC", VA = "0xB91CEC")]
	private static void ShutdownHandler(int nResult)
	{
	}

	[Token(Token = "0x60008BB")]
	[Address(RVA = "0xB91CF0", Offset = "0xB91CF0", VA = "0xB91CF0")]
	private static void IsReadyHandler(int nResult, string message)
	{
	}

	[Token(Token = "0x60008BC")]
	[Address(RVA = "0xB91E20", Offset = "0xB91E20", VA = "0xB91E20")]
	public ViveportDemo_Subscription()
	{
	}
}
[Token(Token = "0x200013B")]
public class HandAnimatorManager : MonoBehaviour
{
	[Token(Token = "0x4000870")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public StateModel[] stateModels;

	[Token(Token = "0x4000871")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Animator handAnimator;

	[Token(Token = "0x4000872")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int currentState;

	[Token(Token = "0x4000873")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private int lastState;

	[Token(Token = "0x60008BE")]
	[Address(RVA = "0xB91EAC", Offset = "0xB91EAC", VA = "0xB91EAC")]
	private void Start()
	{
	}

	[Token(Token = "0x60008BF")]
	[Address(RVA = "0xB91F04", Offset = "0xB91F04", VA = "0xB91F04")]
	private void Update()
	{
	}

	[Token(Token = "0x60008C0")]
	[Address(RVA = "0xB92118", Offset = "0xB92118", VA = "0xB92118")]
	private void TurnOnState(int stateNumber)
	{
	}

	[Token(Token = "0x60008C1")]
	[Address(RVA = "0xB921D4", Offset = "0xB921D4", VA = "0xB921D4")]
	public HandAnimatorManager()
	{
	}
}
[Serializable]
[Token(Token = "0x200013C")]
public class StateModel
{
	[Token(Token = "0x4000874")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int stateNumber;

	[Token(Token = "0x4000875")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject go;

	[Token(Token = "0x60008C2")]
	[Address(RVA = "0xB921E8", Offset = "0xB921E8", VA = "0xB921E8")]
	public StateModel()
	{
	}
}
[Token(Token = "0x200013D")]
public class HandAnimatorManagerVR : MonoBehaviour
{
	[Token(Token = "0x4000876")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public StateModel[] stateModels;

	[Token(Token = "0x4000877")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Animator handAnimator;

	[Token(Token = "0x4000878")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int currentState;

	[Token(Token = "0x4000879")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private int lastState;

	[Token(Token = "0x400087A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool action;

	[Token(Token = "0x400087B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	public bool hold;

	[Token(Token = "0x400087C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public string changeKey;

	[Token(Token = "0x400087D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public string actionKey;

	[Token(Token = "0x400087E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public string holdKey;

	[Token(Token = "0x400087F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public int numberOfAnimations;

	[Token(Token = "0x60008C3")]
	[Address(RVA = "0xB921F0", Offset = "0xB921F0", VA = "0xB921F0")]
	private void Start()
	{
	}

	[Token(Token = "0x60008C4")]
	[Address(RVA = "0xB922D4", Offset = "0xB922D4", VA = "0xB922D4")]
	private void Update()
	{
	}

	[Token(Token = "0x60008C5")]
	[Address(RVA = "0xB923F4", Offset = "0xB923F4", VA = "0xB923F4")]
	private void TurnOnState(int stateNumber)
	{
	}

	[Token(Token = "0x60008C6")]
	[Address(RVA = "0xB924B0", Offset = "0xB924B0", VA = "0xB924B0")]
	public HandAnimatorManagerVR()
	{
	}
}
namespace PublicKeyConvert
{
	[Token(Token = "0x200013E")]
	public class PEMKeyLoader
	{
		[Token(Token = "0x4000880")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static byte[] SeqOID;

		[Token(Token = "0x60008C7")]
		[Address(RVA = "0xB9256C", Offset = "0xB9256C", VA = "0xB9256C")]
		private static bool CompareBytearrays(byte[] a, byte[] b)
		{
			return default(bool);
		}

		[Token(Token = "0x60008C8")]
		[Address(RVA = "0xB925DC", Offset = "0xB925DC", VA = "0xB925DC")]
		public static RSACryptoServiceProvider CryptoServiceProviderFromPublicKeyInfo(byte[] x509key)
		{
			return null;
		}

		[Token(Token = "0x60008C9")]
		[Address(RVA = "0xB92C40", Offset = "0xB92C40", VA = "0xB92C40")]
		public static RSACryptoServiceProvider CryptoServiceProviderFromPublicKeyInfo(string base64EncodedKey)
		{
			return null;
		}

		[Token(Token = "0x60008CA")]
		[Address(RVA = "0xB92D48", Offset = "0xB92D48", VA = "0xB92D48")]
		public PEMKeyLoader()
		{
		}
	}
}
namespace Viveport
{
	[Token(Token = "0x200013F")]
	public class MainThreadDispatcher : MonoBehaviour
	{
		[Token(Token = "0x2000141")]
		[CompilerGenerated]
		private sealed class <ActionWrapper>d__12 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000885")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000886")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000887")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Action action;

			[Token(Token = "0x170000F6")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60008E2")]
				[Address(RVA = "0xB932DC", Offset = "0xB932DC", VA = "0xB932DC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000F7")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60008E4")]
				[Address(RVA = "0xB93324", Offset = "0xB93324", VA = "0xB93324", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60008DF")]
			[Address(RVA = "0xB9316C", Offset = "0xB9316C", VA = "0xB9316C")]
			[DebuggerHidden]
			public <ActionWrapper>d__12(int <>1__state)
			{
			}

			[Token(Token = "0x60008E0")]
			[Address(RVA = "0xB9326C", Offset = "0xB9326C", VA = "0xB9326C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60008E1")]
			[Address(RVA = "0xB93270", Offset = "0xB93270", VA = "0xB93270", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60008E3")]
			[Address(RVA = "0xB932E4", Offset = "0xB932E4", VA = "0xB932E4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000142")]
		[CompilerGenerated]
		private sealed class <ActionWrapper>d__13<T1> : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000888")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>1__state;

			[Token(Token = "0x4000889")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private object <>2__current;

			[Token(Token = "0x400088A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Action<T1> action;

			[Token(Token = "0x400088B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public T1 param1;

			[Token(Token = "0x170000F8")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60008E8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000F9")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60008EA")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60008E5")]
			[DebuggerHidden]
			public <ActionWrapper>d__13(int <>1__state)
			{
			}

			[Token(Token = "0x60008E6")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60008E7")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60008E9")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000143")]
		[CompilerGenerated]
		private sealed class <ActionWrapper>d__14<T1, T2> : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400088C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>1__state;

			[Token(Token = "0x400088D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private object <>2__current;

			[Token(Token = "0x400088E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Action<T1, T2> action;

			[Token(Token = "0x400088F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public T1 param1;

			[Token(Token = "0x4000890")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public T2 param2;

			[Token(Token = "0x170000FA")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60008EE")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000FB")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60008F0")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60008EB")]
			[DebuggerHidden]
			public <ActionWrapper>d__14(int <>1__state)
			{
			}

			[Token(Token = "0x60008EC")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60008ED")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60008EF")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000144")]
		[CompilerGenerated]
		private sealed class <ActionWrapper>d__15<T1, T2, T3> : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000891")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>1__state;

			[Token(Token = "0x4000892")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private object <>2__current;

			[Token(Token = "0x4000893")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Action<T1, T2, T3> action;

			[Token(Token = "0x4000894")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public T1 param1;

			[Token(Token = "0x4000895")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public T2 param2;

			[Token(Token = "0x4000896")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public T3 param3;

			[Token(Token = "0x170000FC")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60008F4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000FD")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60008F6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60008F1")]
			[DebuggerHidden]
			public <ActionWrapper>d__15(int <>1__state)
			{
			}

			[Token(Token = "0x60008F2")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60008F3")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60008F5")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000145")]
		[CompilerGenerated]
		private sealed class <ActionWrapper>d__16<T1, T2, T3, T4> : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000897")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>1__state;

			[Token(Token = "0x4000898")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private object <>2__current;

			[Token(Token = "0x4000899")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Action<T1, T2, T3, T4> action;

			[Token(Token = "0x400089A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public T1 param1;

			[Token(Token = "0x400089B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public T2 param2;

			[Token(Token = "0x400089C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public T3 param3;

			[Token(Token = "0x400089D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public T4 param4;

			[Token(Token = "0x170000FE")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60008FA")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000FF")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60008FC")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60008F7")]
			[DebuggerHidden]
			public <ActionWrapper>d__16(int <>1__state)
			{
			}

			[Token(Token = "0x60008F8")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60008F9")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60008FB")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000881")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Queue<Action> actions;

		[Token(Token = "0x4000882")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static MainThreadDispatcher instance;

		[Token(Token = "0x60008CC")]
		[Address(RVA = "0xB92DF0", Offset = "0xB92DF0", VA = "0xB92DF0")]
		private void Awake()
		{
		}

		[Token(Token = "0x60008CD")]
		[Address(RVA = "0xB92EF0", Offset = "0xB92EF0", VA = "0xB92EF0")]
		public void Update()
		{
		}

		[Token(Token = "0x60008CE")]
		[Address(RVA = "0xB8BDE0", Offset = "0xB8BDE0", VA = "0xB8BDE0")]
		public static MainThreadDispatcher Instance()
		{
			return null;
		}

		[Token(Token = "0x60008CF")]
		[Address(RVA = "0xB93094", Offset = "0xB93094", VA = "0xB93094")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60008D0")]
		[Address(RVA = "0xB90B24", Offset = "0xB90B24", VA = "0xB90B24")]
		public void Enqueue(IEnumerator action)
		{
		}

		[Token(Token = "0x60008D1")]
		[Address(RVA = "0xB8BEDC", Offset = "0xB8BEDC", VA = "0xB8BEDC")]
		public void Enqueue(Action action)
		{
		}

		[Token(Token = "0x60008D2")]
		public void Enqueue<T1>(Action<T1> action, T1 param1)
		{
		}

		[Token(Token = "0x60008D3")]
		public void Enqueue<T1, T2>(Action<T1, T2> action, T1 param1, T2 param2)
		{
		}

		[Token(Token = "0x60008D4")]
		public void Enqueue<T1, T2, T3>(Action<T1, T2, T3> action, T1 param1, T2 param2, T3 param3)
		{
		}

		[Token(Token = "0x60008D5")]
		public void Enqueue<T1, T2, T3, T4>(Action<T1, T2, T3, T4> action, T1 param1, T2 param2, T3 param3, T4 param4)
		{
		}

		[Token(Token = "0x60008D6")]
		[Address(RVA = "0xB930F8", Offset = "0xB930F8", VA = "0xB930F8")]
		[IteratorStateMachine(typeof(<ActionWrapper>d__12))]
		private IEnumerator ActionWrapper(Action action)
		{
			return null;
		}

		[Token(Token = "0x60008D7")]
		[IteratorStateMachine(typeof(<ActionWrapper>d__13<>))]
		private IEnumerator ActionWrapper<T1>(Action<T1> action, T1 param1)
		{
			return null;
		}

		[Token(Token = "0x60008D8")]
		[IteratorStateMachine(typeof(<ActionWrapper>d__14<, >))]
		private IEnumerator ActionWrapper<T1, T2>(Action<T1, T2> action, T1 param1, T2 param2)
		{
			return null;
		}

		[Token(Token = "0x60008D9")]
		[IteratorStateMachine(typeof(<ActionWrapper>d__15<, , >))]
		private IEnumerator ActionWrapper<T1, T2, T3>(Action<T1, T2, T3> action, T1 param1, T2 param2, T3 param3)
		{
			return null;
		}

		[Token(Token = "0x60008DA")]
		[IteratorStateMachine(typeof(<ActionWrapper>d__16<, , , >))]
		private IEnumerator ActionWrapper<T1, T2, T3, T4>(Action<T1, T2, T3, T4> action, T1 param1, T2 param2, T3 param3, T4 param4)
		{
			return null;
		}

		[Token(Token = "0x60008DB")]
		[Address(RVA = "0xB93194", Offset = "0xB93194", VA = "0xB93194")]
		public MainThreadDispatcher()
		{
		}
	}
	[Token(Token = "0x2000146")]
	public enum Locale
	{
		[Token(Token = "0x400089F")]
		US,
		[Token(Token = "0x40008A0")]
		DE,
		[Token(Token = "0x40008A1")]
		JP,
		[Token(Token = "0x40008A2")]
		KR,
		[Token(Token = "0x40008A3")]
		RU,
		[Token(Token = "0x40008A4")]
		CN,
		[Token(Token = "0x40008A5")]
		TW,
		[Token(Token = "0x40008A6")]
		FR
	}
	[Token(Token = "0x2000147")]
	public delegate void StatusCallback(int nResult);
	[Token(Token = "0x2000148")]
	public delegate void StatusCallback2(int nResult, string message);
	[Token(Token = "0x2000149")]
	public delegate void QueryRuntimeModeCallback(int nResult, int emu);
	[Token(Token = "0x200014A")]
	public class Leaderboard
	{
		[Token(Token = "0x17000100")]
		public int Rank
		{
			[Token(Token = "0x6000909")]
			[Address(RVA = "0xB9360C", Offset = "0xB9360C", VA = "0xB9360C")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600090A")]
			[Address(RVA = "0xB93614", Offset = "0xB93614", VA = "0xB93614")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000101")]
		public int Score
		{
			[Token(Token = "0x600090B")]
			[Address(RVA = "0xB9361C", Offset = "0xB9361C", VA = "0xB9361C")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600090C")]
			[Address(RVA = "0xB93624", Offset = "0xB93624", VA = "0xB93624")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000102")]
		public string UserName
		{
			[Token(Token = "0x600090D")]
			[Address(RVA = "0xB9362C", Offset = "0xB9362C", VA = "0xB9362C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600090E")]
			[Address(RVA = "0xB93634", Offset = "0xB93634", VA = "0xB93634")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x600090F")]
		[Address(RVA = "0xB9363C", Offset = "0xB9363C", VA = "0xB9363C")]
		public Leaderboard()
		{
		}
	}
	[Token(Token = "0x200014B")]
	public class SubscriptionStatus
	{
		[Token(Token = "0x200014C")]
		public enum Platform
		{
			[Token(Token = "0x40008AD")]
			Windows,
			[Token(Token = "0x40008AE")]
			Android
		}

		[Token(Token = "0x200014D")]
		public enum TransactionType
		{
			[Token(Token = "0x40008B0")]
			Unknown,
			[Token(Token = "0x40008B1")]
			Paid,
			[Token(Token = "0x40008B2")]
			Redeem,
			[Token(Token = "0x40008B3")]
			FreeTrial
		}

		[Token(Token = "0x17000103")]
		public List<Platform> Platforms
		{
			[Token(Token = "0x6000910")]
			[Address(RVA = "0xB93644", Offset = "0xB93644", VA = "0xB93644")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000911")]
			[Address(RVA = "0xB9364C", Offset = "0xB9364C", VA = "0xB9364C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000104")]
		public TransactionType Type
		{
			[Token(Token = "0x6000912")]
			[Address(RVA = "0xB93654", Offset = "0xB93654", VA = "0xB93654")]
			[CompilerGenerated]
			get
			{
				return default(TransactionType);
			}
			[Token(Token = "0x6000913")]
			[Address(RVA = "0xB9365C", Offset = "0xB9365C", VA = "0xB9365C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6000914")]
		[Address(RVA = "0xB93664", Offset = "0xB93664", VA = "0xB93664")]
		public SubscriptionStatus()
		{
		}
	}
	[Token(Token = "0x200014E")]
	public class Api
	{
		[Token(Token = "0x200014F")]
		public abstract class LicenseChecker
		{
			[Token(Token = "0x600091D")]
			public abstract void OnSuccess(long issueTime, long expirationTime, int latestVersion, bool updateRequired);

			[Token(Token = "0x600091E")]
			public abstract void OnFailure(int errorCode, string errorMessage);

			[Token(Token = "0x600091F")]
			[Address(RVA = "0xB8AD80", Offset = "0xB8AD80", VA = "0xB8AD80")]
			protected LicenseChecker()
			{
			}
		}

		[Token(Token = "0x40008B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static readonly List<GetLicenseCallback> InternalGetLicenseCallbacks;

		[Token(Token = "0x40008B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal static readonly List<Viveport.Internal.StatusCallback> InternalStatusCallbacks;

		[Token(Token = "0x40008B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal static readonly List<Viveport.Internal.QueryRuntimeModeCallback> InternalQueryRunTimeCallbacks;

		[Token(Token = "0x40008B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal static readonly List<Viveport.Internal.StatusCallback2> InternalStatusCallback2s;

		[Token(Token = "0x40008B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal static readonly List<LicenseChecker> InternalLicenseCheckers;

		[Token(Token = "0x40008B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static Viveport.Internal.StatusCallback initIl2cppCallback;

		[Token(Token = "0x40008BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static Viveport.Internal.StatusCallback shutdownIl2cppCallback;

		[Token(Token = "0x40008BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static Viveport.Internal.QueryRuntimeModeCallback queryRuntimeModeIl2cppCallback;

		[Token(Token = "0x40008BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private static readonly string VERSION;

		[Token(Token = "0x40008BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private static string _appId;

		[Token(Token = "0x40008BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private static string _appKey;

		[Token(Token = "0x6000915")]
		[Address(RVA = "0xB89180", Offset = "0xB89180", VA = "0xB89180")]
		public static void GetLicense(LicenseChecker checker, string appId, string appKey)
		{
		}

		[Token(Token = "0x6000916")]
		[Address(RVA = "0xB936F4", Offset = "0xB936F4", VA = "0xB936F4")]
		[MonoPInvokeCallback(typeof(Viveport.Internal.StatusCallback))]
		private static void InitIl2cppCallback(int errorCode)
		{
		}

		[Token(Token = "0x6000917")]
		[Address(RVA = "0xB86448", Offset = "0xB86448", VA = "0xB86448")]
		public static int Init(StatusCallback callback, string appId)
		{
			return default(int);
		}

		[Token(Token = "0x6000918")]
		[Address(RVA = "0xB93768", Offset = "0xB93768", VA = "0xB93768")]
		[MonoPInvokeCallback(typeof(Viveport.Internal.StatusCallback))]
		private static void ShutdownIl2cppCallback(int errorCode)
		{
		}

		[Token(Token = "0x6000919")]
		[Address(RVA = "0xB88CF8", Offset = "0xB88CF8", VA = "0xB88CF8")]
		public static int Shutdown(StatusCallback callback)
		{
			return default(int);
		}

		[Token(Token = "0x600091A")]
		[Address(RVA = "0xB88ED0", Offset = "0xB88ED0", VA = "0xB88ED0")]
		public static string Version()
		{
			return null;
		}

		[Token(Token = "0x600091B")]
		[Address(RVA = "0xB93DEC", Offset = "0xB93DEC", VA = "0xB93DEC")]
		public Api()
		{
		}
	}
	[Token(Token = "0x2000150")]
	public class User
	{
		[Token(Token = "0x40008BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Viveport.Internal.StatusCallback isReadyIl2cppCallback;

		[Token(Token = "0x6000920")]
		[Address(RVA = "0xB94048", Offset = "0xB94048", VA = "0xB94048")]
		[MonoPInvokeCallback(typeof(Viveport.Internal.StatusCallback))]
		private static void IsReadyIl2cppCallback(int errorCode)
		{
		}

		[Token(Token = "0x6000921")]
		[Address(RVA = "0xB89288", Offset = "0xB89288", VA = "0xB89288")]
		public static int IsReady(StatusCallback callback)
		{
			return default(int);
		}

		[Token(Token = "0x6000922")]
		[Address(RVA = "0xB89480", Offset = "0xB89480", VA = "0xB89480")]
		public static string GetUserId()
		{
			return null;
		}

		[Token(Token = "0x6000923")]
		[Address(RVA = "0xB894A4", Offset = "0xB894A4", VA = "0xB894A4")]
		public static string GetUserName()
		{
			return null;
		}

		[Token(Token = "0x6000924")]
		[Address(RVA = "0xB894C8", Offset = "0xB894C8", VA = "0xB894C8")]
		public static string GetUserAvatarUrl()
		{
			return null;
		}

		[Token(Token = "0x6000925")]
		[Address(RVA = "0xB940AC", Offset = "0xB940AC", VA = "0xB940AC")]
		public User()
		{
		}
	}
	[Token(Token = "0x2000151")]
	public class UserStats
	{
		[Token(Token = "0x2000152")]
		public enum LeaderBoardRequestType
		{
			[Token(Token = "0x40008C6")]
			GlobalData,
			[Token(Token = "0x40008C7")]
			GlobalDataAroundUser,
			[Token(Token = "0x40008C8")]
			LocalData,
			[Token(Token = "0x40008C9")]
			LocalDataAroundUser
		}

		[Token(Token = "0x2000153")]
		public enum LeaderBoardTimeRange
		{
			[Token(Token = "0x40008CB")]
			AllTime,
			[Token(Token = "0x40008CC")]
			Daily,
			[Token(Token = "0x40008CD")]
			Weekly,
			[Token(Token = "0x40008CE")]
			Monthly
		}

		[Token(Token = "0x2000154")]
		public enum LeaderBoardSortMethod
		{
			[Token(Token = "0x40008D0")]
			None,
			[Token(Token = "0x40008D1")]
			Ascending,
			[Token(Token = "0x40008D2")]
			Descending
		}

		[Token(Token = "0x2000155")]
		public enum LeaderBoardDiaplayType
		{
			[Token(Token = "0x40008D4")]
			None,
			[Token(Token = "0x40008D5")]
			Numeric,
			[Token(Token = "0x40008D6")]
			TimeSeconds,
			[Token(Token = "0x40008D7")]
			TimeMilliSeconds
		}

		[Token(Token = "0x2000156")]
		public enum LeaderBoardScoreMethod
		{
			[Token(Token = "0x40008D9")]
			None,
			[Token(Token = "0x40008DA")]
			KeepBest,
			[Token(Token = "0x40008DB")]
			ForceUpdate
		}

		[Token(Token = "0x2000157")]
		public enum AchievementDisplayAttribute
		{
			[Token(Token = "0x40008DD")]
			Name,
			[Token(Token = "0x40008DE")]
			Desc,
			[Token(Token = "0x40008DF")]
			Hidden
		}

		[Token(Token = "0x40008C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Viveport.Internal.StatusCallback isReadyIl2cppCallback;

		[Token(Token = "0x40008C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Viveport.Internal.StatusCallback downloadStatsIl2cppCallback;

		[Token(Token = "0x40008C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static Viveport.Internal.StatusCallback uploadStatsIl2cppCallback;

		[Token(Token = "0x40008C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static Viveport.Internal.StatusCallback downloadLeaderboardScoresIl2cppCallback;

		[Token(Token = "0x40008C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static Viveport.Internal.StatusCallback uploadLeaderboardScoreIl2cppCallback;

		[Token(Token = "0x6000926")]
		[Address(RVA = "0xB940B4", Offset = "0xB940B4", VA = "0xB940B4")]
		[MonoPInvokeCallback(typeof(Viveport.Internal.StatusCallback))]
		private static void IsReadyIl2cppCallback(int errorCode)
		{
		}

		[Token(Token = "0x6000927")]
		[Address(RVA = "0xB88F80", Offset = "0xB88F80", VA = "0xB88F80")]
		public static int IsReady(StatusCallback callback)
		{
			return default(int);
		}

		[Token(Token = "0x6000928")]
		[Address(RVA = "0xB94118", Offset = "0xB94118", VA = "0xB94118")]
		[MonoPInvokeCallback(typeof(Viveport.Internal.StatusCallback))]
		private static void DownloadStatsIl2cppCallback(int errorCode)
		{
		}

		[Token(Token = "0x6000929")]
		[Address(RVA = "0xB894EC", Offset = "0xB894EC", VA = "0xB894EC")]
		public static int DownloadStats(StatusCallback callback)
		{
			return default(int);
		}

		[Token(Token = "0x600092A")]
		[Address(RVA = "0xB898CC", Offset = "0xB898CC", VA = "0xB898CC")]
		public static int GetStat(string name, int defaultValue)
		{
			return default(int);
		}

		[Token(Token = "0x600092B")]
		[Address(RVA = "0xB942A8", Offset = "0xB942A8", VA = "0xB942A8")]
		public static float GetStat(string name, float defaultValue)
		{
			return default(float);
		}

		[Token(Token = "0x600092C")]
		[Address(RVA = "0xB898D4", Offset = "0xB898D4", VA = "0xB898D4")]
		public static void SetStat(string name, int value)
		{
		}

		[Token(Token = "0x600092D")]
		[Address(RVA = "0xB942B0", Offset = "0xB942B0", VA = "0xB942B0")]
		public static void SetStat(string name, float value)
		{
		}

		[Token(Token = "0x600092E")]
		[Address(RVA = "0xB9417C", Offset = "0xB9417C", VA = "0xB9417C")]
		[MonoPInvokeCallback(typeof(Viveport.Internal.StatusCallback))]
		private static void UploadStatsIl2cppCallback(int errorCode)
		{
		}

		[Token(Token = "0x600092F")]
		[Address(RVA = "0xB896DC", Offset = "0xB896DC", VA = "0xB896DC")]
		public static int UploadStats(StatusCallback callback)
		{
			return default(int);
		}

		[Token(Token = "0x6000930")]
		[Address(RVA = "0xB898DC", Offset = "0xB898DC", VA = "0xB898DC")]
		public static bool GetAchievement(string pchName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000931")]
		[Address(RVA = "0xB898F4", Offset = "0xB898F4", VA = "0xB898F4")]
		public static int GetAchievementUnlockTime(string pchName)
		{
			return default(int);
		}

		[Token(Token = "0x6000932")]
		[Address(RVA = "0xB942B8", Offset = "0xB942B8", VA = "0xB942B8")]
		public static string GetAchievementIcon(string pchName)
		{
			return null;
		}

		[Token(Token = "0x6000933")]
		[Address(RVA = "0xB898FC", Offset = "0xB898FC", VA = "0xB898FC")]
		public static string GetAchievementDisplayAttribute(string pchName, AchievementDisplayAttribute attr)
		{
			return null;
		}

		[Token(Token = "0x6000934")]
		[Address(RVA = "0xB89904", Offset = "0xB89904", VA = "0xB89904")]
		public static string GetAchievementDisplayAttribute(string pchName, AchievementDisplayAttribute attr, Locale locale)
		{
			return null;
		}

		[Token(Token = "0x6000935")]
		[Address(RVA = "0xB898E4", Offset = "0xB898E4", VA = "0xB898E4")]
		public static int SetAchievement(string pchName)
		{
			return default(int);
		}

		[Token(Token = "0x6000936")]
		[Address(RVA = "0xB898EC", Offset = "0xB898EC", VA = "0xB898EC")]
		public static int ClearAchievement(string pchName)
		{
			return default(int);
		}

		[Token(Token = "0x6000937")]
		[Address(RVA = "0xB941E0", Offset = "0xB941E0", VA = "0xB941E0")]
		[MonoPInvokeCallback(typeof(Viveport.Internal.StatusCallback))]
		private static void DownloadLeaderboardScoresIl2cppCallback(int errorCode)
		{
		}

		[Token(Token = "0x6000938")]
		[Address(RVA = "0xB8990C", Offset = "0xB8990C", VA = "0xB8990C")]
		public static int DownloadLeaderboardScores(StatusCallback callback, string pchLeaderboardName, LeaderBoardRequestType eLeaderboardDataRequest, LeaderBoardTimeRange eLeaderboardDataTimeRange, int nRangeStart, int nRangeEnd)
		{
			return default(int);
		}

		[Token(Token = "0x6000939")]
		[Address(RVA = "0xB94244", Offset = "0xB94244", VA = "0xB94244")]
		[MonoPInvokeCallback(typeof(Viveport.Internal.StatusCallback))]
		private static void UploadLeaderboardScoreIl2cppCallback(int errorCode)
		{
		}

		[Token(Token = "0x600093A")]
		[Address(RVA = "0xB89B3C", Offset = "0xB89B3C", VA = "0xB89B3C")]
		public static int UploadLeaderboardScore(StatusCallback callback, string pchLeaderboardName, int nScore)
		{
			return default(int);
		}

		[Token(Token = "0x600093B")]
		[Address(RVA = "0xB89D4C", Offset = "0xB89D4C", VA = "0xB89D4C")]
		public static Leaderboard GetLeaderboardScore(int index)
		{
			return null;
		}

		[Token(Token = "0x600093C")]
		[Address(RVA = "0xB89D44", Offset = "0xB89D44", VA = "0xB89D44")]
		public static int GetLeaderboardScoreCount()
		{
			return default(int);
		}

		[Token(Token = "0x600093D")]
		[Address(RVA = "0xB89D54", Offset = "0xB89D54", VA = "0xB89D54")]
		public static LeaderBoardSortMethod GetLeaderboardSortMethod()
		{
			return default(LeaderBoardSortMethod);
		}

		[Token(Token = "0x600093E")]
		[Address(RVA = "0xB89D5C", Offset = "0xB89D5C", VA = "0xB89D5C")]
		public static LeaderBoardDiaplayType GetLeaderboardDisplayType()
		{
			return default(LeaderBoardDiaplayType);
		}

		[Token(Token = "0x600093F")]
		[Address(RVA = "0xB942C0", Offset = "0xB942C0", VA = "0xB942C0")]
		public UserStats()
		{
		}
	}
	[Token(Token = "0x2000158")]
	public class ArcadeLeaderboard
	{
		[Token(Token = "0x6000940")]
		[Address(RVA = "0xB942C8", Offset = "0xB942C8", VA = "0xB942C8")]
		public ArcadeLeaderboard()
		{
		}
	}
	[Token(Token = "0x2000159")]
	public class IAPurchase
	{
		[Token(Token = "0x200015A")]
		private class IAPHandler : BaseHandler
		{
			[Token(Token = "0x40008ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private static IAPurchaseListener listener;

			[Token(Token = "0x600095C")]
			[Address(RVA = "0xB948B4", Offset = "0xB948B4", VA = "0xB948B4")]
			public IAPHandler(IAPurchaseListener cb)
			{
			}

			[Token(Token = "0x600095D")]
			[Address(RVA = "0xB94924", Offset = "0xB94924", VA = "0xB94924")]
			public IAPurchaseCallback getIsReadyHandler()
			{
				return null;
			}

			[Token(Token = "0x600095E")]
			[Address(RVA = "0xB94F18", Offset = "0xB94F18", VA = "0xB94F18", Slot = "4")]
			protected override void IsReadyHandler(int code, string message)
			{
			}

			[Token(Token = "0x600095F")]
			[Address(RVA = "0xB94A64", Offset = "0xB94A64", VA = "0xB94A64")]
			public IAPurchaseCallback getRequestHandler()
			{
				return null;
			}

			[Token(Token = "0x6000960")]
			[Address(RVA = "0xB953D0", Offset = "0xB953D0", VA = "0xB953D0", Slot = "5")]
			protected override void RequestHandler(int code, string message)
			{
			}

			[Token(Token = "0x6000961")]
			[Address(RVA = "0xB94AD0", Offset = "0xB94AD0", VA = "0xB94AD0")]
			public IAPurchaseCallback getPurchaseHandler()
			{
				return null;
			}

			[Token(Token = "0x6000962")]
			[Address(RVA = "0xB95888", Offset = "0xB95888", VA = "0xB95888", Slot = "6")]
			protected override void PurchaseHandler(int code, string message)
			{
			}

			[Token(Token = "0x6000963")]
			[Address(RVA = "0xB94B3C", Offset = "0xB94B3C", VA = "0xB94B3C")]
			public IAPurchaseCallback getQueryHandler()
			{
				return null;
			}

			[Token(Token = "0x6000964")]
			[Address(RVA = "0xB95DC4", Offset = "0xB95DC4", VA = "0xB95DC4", Slot = "7")]
			protected override void QueryHandler(int code, string message)
			{
			}

			[Token(Token = "0x6000965")]
			[Address(RVA = "0xB94BA8", Offset = "0xB94BA8", VA = "0xB94BA8")]
			public IAPurchaseCallback getQueryListHandler()
			{
				return null;
			}

			[Token(Token = "0x6000966")]
			[Address(RVA = "0xB9687C", Offset = "0xB9687C", VA = "0xB9687C", Slot = "8")]
			protected override void QueryListHandler(int code, string message)
			{
			}

			[Token(Token = "0x6000967")]
			[Address(RVA = "0xB94C14", Offset = "0xB94C14", VA = "0xB94C14")]
			public IAPurchaseCallback getBalanceHandler()
			{
				return null;
			}

			[Token(Token = "0x6000968")]
			[Address(RVA = "0xB97888", Offset = "0xB97888", VA = "0xB97888", Slot = "9")]
			protected override void BalanceHandler(int code, string message)
			{
			}

			[Token(Token = "0x6000969")]
			[Address(RVA = "0xB94C80", Offset = "0xB94C80", VA = "0xB94C80")]
			public IAPurchaseCallback getRequestSubscriptionHandler()
			{
				return null;
			}

			[Token(Token = "0x600096A")]
			[Address(RVA = "0xB97DCC", Offset = "0xB97DCC", VA = "0xB97DCC", Slot = "10")]
			protected override void RequestSubscriptionHandler(int code, string message)
			{
			}

			[Token(Token = "0x600096B")]
			[Address(RVA = "0xB94CEC", Offset = "0xB94CEC", VA = "0xB94CEC")]
			public IAPurchaseCallback getRequestSubscriptionWithPlanIDHandler()
			{
				return null;
			}

			[Token(Token = "0x600096C")]
			[Address(RVA = "0xB98278", Offset = "0xB98278", VA = "0xB98278", Slot = "11")]
			protected override void RequestSubscriptionWithPlanIDHandler(int code, string message)
			{
			}

			[Token(Token = "0x600096D")]
			[Address(RVA = "0xB94D58", Offset = "0xB94D58", VA = "0xB94D58")]
			public IAPurchaseCallback getSubscribeHandler()
			{
				return null;
			}

			[Token(Token = "0x600096E")]
			[Address(RVA = "0xB98724", Offset = "0xB98724", VA = "0xB98724", Slot = "12")]
			protected override void SubscribeHandler(int code, string message)
			{
			}

			[Token(Token = "0x600096F")]
			[Address(RVA = "0xB94DC4", Offset = "0xB94DC4", VA = "0xB94DC4")]
			public IAPurchaseCallback getQuerySubscriptionHandler()
			{
				return null;
			}

			[Token(Token = "0x6000970")]
			[Address(RVA = "0xB98E50", Offset = "0xB98E50", VA = "0xB98E50", Slot = "13")]
			protected override void QuerySubscriptionHandler(int code, string message)
			{
			}

			[Token(Token = "0x6000971")]
			[Address(RVA = "0xB94E30", Offset = "0xB94E30", VA = "0xB94E30")]
			public IAPurchaseCallback getQuerySubscriptionListHandler()
			{
				return null;
			}

			[Token(Token = "0x6000972")]
			[Address(RVA = "0xB99314", Offset = "0xB99314", VA = "0xB99314", Slot = "14")]
			protected override void QuerySubscriptionListHandler(int code, string message)
			{
			}

			[Token(Token = "0x6000973")]
			[Address(RVA = "0xB94E9C", Offset = "0xB94E9C", VA = "0xB94E9C")]
			public IAPurchaseCallback getCancelSubscriptionHandler()
			{
				return null;
			}

			[Token(Token = "0x6000974")]
			[Address(RVA = "0xB997D8", Offset = "0xB997D8", VA = "0xB997D8", Slot = "15")]
			protected override void CancelSubscriptionHandler(int code, string message)
			{
			}
		}

		[Token(Token = "0x200015B")]
		private abstract class BaseHandler
		{
			[Token(Token = "0x6000975")]
			protected abstract void IsReadyHandler(int code, string message);

			[Token(Token = "0x6000976")]
			protected abstract void RequestHandler(int code, string message);

			[Token(Token = "0x6000977")]
			protected abstract void PurchaseHandler(int code, string message);

			[Token(Token = "0x6000978")]
			protected abstract void QueryHandler(int code, string message);

			[Token(Token = "0x6000979")]
			protected abstract void QueryListHandler(int code, string message);

			[Token(Token = "0x600097A")]
			protected abstract void BalanceHandler(int code, string message);

			[Token(Token = "0x600097B")]
			protected abstract void RequestSubscriptionHandler(int code, string message);

			[Token(Token = "0x600097C")]
			protected abstract void RequestSubscriptionWithPlanIDHandler(int code, string message);

			[Token(Token = "0x600097D")]
			protected abstract void SubscribeHandler(int code, string message);

			[Token(Token = "0x600097E")]
			protected abstract void QuerySubscriptionHandler(int code, string message);

			[Token(Token = "0x600097F")]
			protected abstract void QuerySubscriptionListHandler(int code, string message);

			[Token(Token = "0x6000980")]
			protected abstract void CancelSubscriptionHandler(int code, string message);

			[Token(Token = "0x6000981")]
			[Address(RVA = "0xB94F10", Offset = "0xB94F10", VA = "0xB94F10")]
			protected BaseHandler()
			{
			}
		}

		[Token(Token = "0x200015C")]
		public class IAPurchaseListener
		{
			[Token(Token = "0x6000982")]
			[Address(RVA = "0xB99B84", Offset = "0xB99B84", VA = "0xB99B84", Slot = "4")]
			public virtual void OnSuccess(string pchCurrencyName)
			{
			}

			[Token(Token = "0x6000983")]
			[Address(RVA = "0xB99B88", Offset = "0xB99B88", VA = "0xB99B88", Slot = "5")]
			public virtual void OnRequestSuccess(string pchPurchaseId)
			{
			}

			[Token(Token = "0x6000984")]
			[Address(RVA = "0xB99B8C", Offset = "0xB99B8C", VA = "0xB99B8C", Slot = "6")]
			public virtual void OnPurchaseSuccess(string pchPurchaseId)
			{
			}

			[Token(Token = "0x6000985")]
			[Address(RVA = "0xB99B90", Offset = "0xB99B90", VA = "0xB99B90", Slot = "7")]
			public virtual void OnQuerySuccess(QueryResponse response)
			{
			}

			[Token(Token = "0x6000986")]
			[Address(RVA = "0xB99B94", Offset = "0xB99B94", VA = "0xB99B94", Slot = "8")]
			public virtual void OnQuerySuccess(QueryListResponse response)
			{
			}

			[Token(Token = "0x6000987")]
			[Address(RVA = "0xB99B98", Offset = "0xB99B98", VA = "0xB99B98", Slot = "9")]
			public virtual void OnBalanceSuccess(string pchBalance)
			{
			}

			[Token(Token = "0x6000988")]
			[Address(RVA = "0xB99B9C", Offset = "0xB99B9C", VA = "0xB99B9C", Slot = "10")]
			public virtual void OnFailure(int nCode, string pchMessage)
			{
			}

			[Token(Token = "0x6000989")]
			[Address(RVA = "0xB99BA0", Offset = "0xB99BA0", VA = "0xB99BA0", Slot = "11")]
			public virtual void OnRequestSubscriptionSuccess(string pchSubscriptionId)
			{
			}

			[Token(Token = "0x600098A")]
			[Address(RVA = "0xB99BA4", Offset = "0xB99BA4", VA = "0xB99BA4", Slot = "12")]
			public virtual void OnRequestSubscriptionWithPlanIDSuccess(string pchSubscriptionId)
			{
			}

			[Token(Token = "0x600098B")]
			[Address(RVA = "0xB99BA8", Offset = "0xB99BA8", VA = "0xB99BA8", Slot = "13")]
			public virtual void OnSubscribeSuccess(string pchSubscriptionId)
			{
			}

			[Token(Token = "0x600098C")]
			[Address(RVA = "0xB99BAC", Offset = "0xB99BAC", VA = "0xB99BAC", Slot = "14")]
			public virtual void OnQuerySubscriptionSuccess(Subscription[] subscriptionlist)
			{
			}

			[Token(Token = "0x600098D")]
			[Address(RVA = "0xB99BB0", Offset = "0xB99BB0", VA = "0xB99BB0", Slot = "15")]
			public virtual void OnQuerySubscriptionListSuccess(Subscription[] subscriptionlist)
			{
			}

			[Token(Token = "0x600098E")]
			[Address(RVA = "0xB99BB4", Offset = "0xB99BB4", VA = "0xB99BB4", Slot = "16")]
			public virtual void OnCancelSubscriptionSuccess(bool bCanceled)
			{
			}

			[Token(Token = "0x600098F")]
			[Address(RVA = "0xB905C4", Offset = "0xB905C4", VA = "0xB905C4")]
			public IAPurchaseListener()
			{
			}
		}

		[Token(Token = "0x200015D")]
		public class QueryResponse
		{
			[Token(Token = "0x17000105")]
			public string order_id
			{
				[Token(Token = "0x6000990")]
				[Address(RVA = "0xB99BB8", Offset = "0xB99BB8", VA = "0xB99BB8")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x6000991")]
				[Address(RVA = "0xB99BC0", Offset = "0xB99BC0", VA = "0xB99BC0")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x17000106")]
			public string purchase_id
			{
				[Token(Token = "0x6000992")]
				[Address(RVA = "0xB99BC8", Offset = "0xB99BC8", VA = "0xB99BC8")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x6000993")]
				[Address(RVA = "0xB99BD0", Offset = "0xB99BD0", VA = "0xB99BD0")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x17000107")]
			public string status
			{
				[Token(Token = "0x6000994")]
				[Address(RVA = "0xB99BD8", Offset = "0xB99BD8", VA = "0xB99BD8")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x6000995")]
				[Address(RVA = "0xB99BE0", Offset = "0xB99BE0", VA = "0xB99BE0")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x17000108")]
			public string price
			{
				[Token(Token = "0x6000996")]
				[Address(RVA = "0xB99BE8", Offset = "0xB99BE8", VA = "0xB99BE8")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x6000997")]
				[Address(RVA = "0xB99BF0", Offset = "0xB99BF0", VA = "0xB99BF0")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x17000109")]
			public string currency
			{
				[Token(Token = "0x6000998")]
				[Address(RVA = "0xB99BF8", Offset = "0xB99BF8", VA = "0xB99BF8")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x6000999")]
				[Address(RVA = "0xB99C00", Offset = "0xB99C00", VA = "0xB99C00")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x1700010A")]
			public long paid_timestamp
			{
				[Token(Token = "0x600099A")]
				[Address(RVA = "0xB99C08", Offset = "0xB99C08", VA = "0xB99C08")]
				[CompilerGenerated]
				get
				{
					return default(long);
				}
				[Token(Token = "0x600099B")]
				[Address(RVA = "0xB99C10", Offset = "0xB99C10", VA = "0xB99C10")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x600099C")]
			[Address(RVA = "0xB96874", Offset = "0xB96874", VA = "0xB96874")]
			public QueryResponse()
			{
			}
		}

		[Token(Token = "0x200015E")]
		public class QueryResponse2
		{
			[Token(Token = "0x1700010B")]
			public string order_id
			{
				[Token(Token = "0x600099D")]
				[Address(RVA = "0xB99C18", Offset = "0xB99C18", VA = "0xB99C18")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x600099E")]
				[Address(RVA = "0xB99C20", Offset = "0xB99C20", VA = "0xB99C20")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x1700010C")]
			public string app_id
			{
				[Token(Token = "0x600099F")]
				[Address(RVA = "0xB99C28", Offset = "0xB99C28", VA = "0xB99C28")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x60009A0")]
				[Address(RVA = "0xB99C30", Offset = "0xB99C30", VA = "0xB99C30")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x1700010D")]
			public string purchase_id
			{
				[Token(Token = "0x60009A1")]
				[Address(RVA = "0xB99C38", Offset = "0xB99C38", VA = "0xB99C38")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x60009A2")]
				[Address(RVA = "0xB99C40", Offset = "0xB99C40", VA = "0xB99C40")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x1700010E")]
			public string user_data
			{
				[Token(Token = "0x60009A3")]
				[Address(RVA = "0xB99C48", Offset = "0xB99C48", VA = "0xB99C48")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x60009A4")]
				[Address(RVA = "0xB99C50", Offset = "0xB99C50", VA = "0xB99C50")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x1700010F")]
			public string price
			{
				[Token(Token = "0x60009A5")]
				[Address(RVA = "0xB99C58", Offset = "0xB99C58", VA = "0xB99C58")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x60009A6")]
				[Address(RVA = "0xB99C60", Offset = "0xB99C60", VA = "0xB99C60")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x17000110")]
			public string currency
			{
				[Token(Token = "0x60009A7")]
				[Address(RVA = "0xB99C68", Offset = "0xB99C68", VA = "0xB99C68")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x60009A8")]
				[Address(RVA = "0xB99C70", Offset = "0xB99C70", VA = "0xB99C70")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x17000111")]
			public long paid_timestamp
			{
				[Token(Token = "0x60009A9")]
				[Address(RVA = "0xB99C78", Offset = "0xB99C78", VA = "0xB99C78")]
				[CompilerGenerated]
				get
				{
					return default(long);
				}
				[Token(Token = "0x60009AA")]
				[Address(RVA = "0xB99C80", Offset = "0xB99C80", VA = "0xB99C80")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x60009AB")]
			[Address(RVA = "0xB97878", Offset = "0xB97878", VA = "0xB97878")]
			public QueryResponse2()
			{
			}
		}

		[Token(Token = "0x200015F")]
		public class QueryListResponse
		{
			[Token(Token = "0x40008FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public List<QueryResponse2> purchaseList;

			[Token(Token = "0x17000112")]
			public int total
			{
				[Token(Token = "0x60009AC")]
				[Address(RVA = "0xB99C88", Offset = "0xB99C88", VA = "0xB99C88")]
				[CompilerGenerated]
				get
				{
					return default(int);
				}
				[Token(Token = "0x60009AD")]
				[Address(RVA = "0xB99C90", Offset = "0xB99C90", VA = "0xB99C90")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x17000113")]
			public int from
			{
				[Token(Token = "0x60009AE")]
				[Address(RVA = "0xB99C98", Offset = "0xB99C98", VA = "0xB99C98")]
				[CompilerGenerated]
				get
				{
					return default(int);
				}
				[Token(Token = "0x60009AF")]
				[Address(RVA = "0xB99CA0", Offset = "0xB99CA0", VA = "0xB99CA0")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x17000114")]
			public int to
			{
				[Token(Token = "0x60009B0")]
				[Address(RVA = "0xB99CA8", Offset = "0xB99CA8", VA = "0xB99CA8")]
				[CompilerGenerated]
				get
				{
					return default(int);
				}
				[Token(Token = "0x60009B1")]
				[Address(RVA = "0xB99CB0", Offset = "0xB99CB0", VA = "0xB99CB0")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x60009B2")]
			[Address(RVA = "0xB97880", Offset = "0xB97880", VA = "0xB97880")]
			public QueryListResponse()
			{
			}
		}

		[Token(Token = "0x2000160")]
		public class StatusDetailTransaction
		{
			[Token(Token = "0x17000115")]
			public long create_time
			{
				[Token(Token = "0x60009B3")]
				[Address(RVA = "0xB99CB8", Offset = "0xB99CB8", VA = "0xB99CB8")]
				[CompilerGenerated]
				get
				{
					return default(long);
				}
				[Token(Token = "0x60009B4")]
				[Address(RVA = "0xB99CC0", Offset = "0xB99CC0", VA = "0xB99CC0")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x17000116")]
			public string payment_method
			{
				[Token(Token = "0x60009B5")]
				[Address(RVA = "0xB99CC8", Offset = "0xB99CC8", VA = "0xB99CC8")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x60009B6")]
				[Address(RVA = "0xB99CD0", Offset = "0xB99CD0", VA = "0xB99CD0")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x17000117")]
			public string status
			{
				[Token(Token = "0x60009B7")]
				[Address(RVA = "0xB99CD8", Offset = "0xB99CD8", VA = "0xB99CD8")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x60009B8")]
				[Address(RVA = "0xB99CE0", Offset = "0xB99CE0", VA = "0xB99CE0")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x60009B9")]
			[Address(RVA = "0xB99CE8", Offset = "0xB99CE8", VA = "0xB99CE8")]
			public StatusDetailTransaction()
			{
			}
		}

		[Token(Token = "0x2000161")]
		public class StatusDetail
		{
			[Token(Token = "0x17000118")]
			public long date_next_charge
			{
				[Token(Token = "0x60009BA")]
				[Address(RVA = "0xB99CF0", Offset = "0xB99CF0", VA = "0xB99CF0")]
				[CompilerGenerated]
				get
				{
					return default(long);
				}
				[Token(Token = "0x60009BB")]
				[Address(RVA = "0xB99CF8", Offset = "0xB99CF8", VA = "0xB99CF8")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x17000119")]
			public StatusDetailTransaction[] transactions
			{
				[Token(Token = "0x60009BC")]
				[Address(RVA = "0xB99D00", Offset = "0xB99D00", VA = "0xB99D00")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x60009BD")]
				[Address(RVA = "0xB99D08", Offset = "0xB99D08", VA = "0xB99D08")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x1700011A")]
			public string cancel_reason
			{
				[Token(Token = "0x60009BE")]
				[Address(RVA = "0xB99D10", Offset = "0xB99D10", VA = "0xB99D10")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x60009BF")]
				[Address(RVA = "0xB99D18", Offset = "0xB99D18", VA = "0xB99D18")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x60009C0")]
			[Address(RVA = "0xB99D20", Offset = "0xB99D20", VA = "0xB99D20")]
			public StatusDetail()
			{
			}
		}

		[Token(Token = "0x2000162")]
		public class TimePeriod
		{
			[Token(Token = "0x1700011B")]
			public string time_type
			{
				[Token(Token = "0x60009C1")]
				[Address(RVA = "0xB99D28", Offset = "0xB99D28", VA = "0xB99D28")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x60009C2")]
				[Address(RVA = "0xB99D30", Offset = "0xB99D30", VA = "0xB99D30")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x1700011C")]
			public int value
			{
				[Token(Token = "0x60009C3")]
				[Address(RVA = "0xB99D38", Offset = "0xB99D38", VA = "0xB99D38")]
				[CompilerGenerated]
				get
				{
					return default(int);
				}
				[Token(Token = "0x60009C4")]
				[Address(RVA = "0xB99D40", Offset = "0xB99D40", VA = "0xB99D40")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x60009C5")]
			[Address(RVA = "0xB99D48", Offset = "0xB99D48", VA = "0xB99D48")]
			public TimePeriod()
			{
			}
		}

		[Token(Token = "0x2000163")]
		public class Subscription
		{
			[Token(Token = "0x1700011D")]
			public string app_id
			{
				[Token(Token = "0x60009C6")]
				[Address(RVA = "0xB99D50", Offset = "0xB99D50", VA = "0xB99D50")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x60009C7")]
				[Address(RVA = "0xB99D58", Offset = "0xB99D58", VA = "0xB99D58")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x1700011E")]
			public string order_id
			{
				[Token(Token = "0x60009C8")]
				[Address(RVA = "0xB99D60", Offset = "0xB99D60", VA = "0xB99D60")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x60009C9")]
				[Address(RVA = "0xB99D68", Offset = "0xB99D68", VA = "0xB99D68")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x1700011F")]
			public string subscription_id
			{
				[Token(Token = "0x60009CA")]
				[Address(RVA = "0xB99D70", Offset = "0xB99D70", VA = "0xB99D70")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x60009CB")]
				[Address(RVA = "0xB99D78", Offset = "0xB99D78", VA = "0xB99D78")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x17000120")]
			public string price
			{
				[Token(Token = "0x60009CC")]
				[Address(RVA = "0xB99D80", Offset = "0xB99D80", VA = "0xB99D80")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x60009CD")]
				[Address(RVA = "0xB99D88", Offset = "0xB99D88", VA = "0xB99D88")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x17000121")]
			public string currency
			{
				[Token(Token = "0x60009CE")]
				[Address(RVA = "0xB99D90", Offset = "0xB99D90", VA = "0xB99D90")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x60009CF")]
				[Address(RVA = "0xB99D98", Offset = "0xB99D98", VA = "0xB99D98")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x17000122")]
			public long subscribed_timestamp
			{
				[Token(Token = "0x60009D0")]
				[Address(RVA = "0xB99DA0", Offset = "0xB99DA0", VA = "0xB99DA0")]
				[CompilerGenerated]
				get
				{
					return default(long);
				}
				[Token(Token = "0x60009D1")]
				[Address(RVA = "0xB99DA8", Offset = "0xB99DA8", VA = "0xB99DA8")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x17000123")]
			public TimePeriod free_trial_period
			{
				[Token(Token = "0x60009D2")]
				[Address(RVA = "0xB99DB0", Offset = "0xB99DB0", VA = "0xB99DB0")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x60009D3")]
				[Address(RVA = "0xB99DB8", Offset = "0xB99DB8", VA = "0xB99DB8")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x17000124")]
			public TimePeriod charge_period
			{
				[Token(Token = "0x60009D4")]
				[Address(RVA = "0xB99DC0", Offset = "0xB99DC0", VA = "0xB99DC0")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x60009D5")]
				[Address(RVA = "0xB99DC8", Offset = "0xB99DC8", VA = "0xB99DC8")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x17000125")]
			public int number_of_charge_period
			{
				[Token(Token = "0x60009D6")]
				[Address(RVA = "0xB99DD0", Offset = "0xB99DD0", VA = "0xB99DD0")]
				[CompilerGenerated]
				get
				{
					return default(int);
				}
				[Token(Token = "0x60009D7")]
				[Address(RVA = "0xB99DD8", Offset = "0xB99DD8", VA = "0xB99DD8")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x17000126")]
			public string plan_id
			{
				[Token(Token = "0x60009D8")]
				[Address(RVA = "0xB99DE0", Offset = "0xB99DE0", VA = "0xB99DE0")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x60009D9")]
				[Address(RVA = "0xB99DE8", Offset = "0xB99DE8", VA = "0xB99DE8")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x17000127")]
			public string plan_name
			{
				[Token(Token = "0x60009DA")]
				[Address(RVA = "0xB99DF0", Offset = "0xB99DF0", VA = "0xB99DF0")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x60009DB")]
				[Address(RVA = "0xB99DF8", Offset = "0xB99DF8", VA = "0xB99DF8")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x17000128")]
			public string status
			{
				[Token(Token = "0x60009DC")]
				[Address(RVA = "0xB99E00", Offset = "0xB99E00", VA = "0xB99E00")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x60009DD")]
				[Address(RVA = "0xB99E08", Offset = "0xB99E08", VA = "0xB99E08")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x17000129")]
			public StatusDetail status_detail
			{
				[Token(Token = "0x60009DE")]
				[Address(RVA = "0xB99E10", Offset = "0xB99E10", VA = "0xB99E10")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x60009DF")]
				[Address(RVA = "0xB99E18", Offset = "0xB99E18", VA = "0xB99E18")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x60009E0")]
			[Address(RVA = "0xB99E20", Offset = "0xB99E20", VA = "0xB99E20")]
			public Subscription()
			{
			}
		}

		[Token(Token = "0x2000164")]
		public class QuerySubscritionResponse
		{
			[Token(Token = "0x1700012A")]
			public int statusCode
			{
				[Token(Token = "0x60009E1")]
				[Address(RVA = "0xB99E28", Offset = "0xB99E28", VA = "0xB99E28")]
				[CompilerGenerated]
				get
				{
					return default(int);
				}
				[Token(Token = "0x60009E2")]
				[Address(RVA = "0xB99E30", Offset = "0xB99E30", VA = "0xB99E30")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x1700012B")]
			public string message
			{
				[Token(Token = "0x60009E3")]
				[Address(RVA = "0xB99E38", Offset = "0xB99E38", VA = "0xB99E38")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x60009E4")]
				[Address(RVA = "0xB99E40", Offset = "0xB99E40", VA = "0xB99E40")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x1700012C")]
			public List<Subscription> subscriptions
			{
				[Token(Token = "0x60009E5")]
				[Address(RVA = "0xB99E48", Offset = "0xB99E48", VA = "0xB99E48")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x60009E6")]
				[Address(RVA = "0xB99E50", Offset = "0xB99E50", VA = "0xB99E50")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x60009E7")]
			[Address(RVA = "0xB99E58", Offset = "0xB99E58", VA = "0xB99E58")]
			public QuerySubscritionResponse()
			{
			}
		}

		[Token(Token = "0x40008E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static IAPurchaseCallback isReadyIl2cppCallback;

		[Token(Token = "0x40008E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static IAPurchaseCallback request01Il2cppCallback;

		[Token(Token = "0x40008E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static IAPurchaseCallback request02Il2cppCallback;

		[Token(Token = "0x40008E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static IAPurchaseCallback purchaseIl2cppCallback;

		[Token(Token = "0x40008E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static IAPurchaseCallback query01Il2cppCallback;

		[Token(Token = "0x40008E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static IAPurchaseCallback query02Il2cppCallback;

		[Token(Token = "0x40008E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static IAPurchaseCallback getBalanceIl2cppCallback;

		[Token(Token = "0x40008E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static IAPurchaseCallback requestSubscriptionIl2cppCallback;

		[Token(Token = "0x40008E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private static IAPurchaseCallback requestSubscriptionWithPlanIDIl2cppCallback;

		[Token(Token = "0x40008E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private static IAPurchaseCallback subscribeIl2cppCallback;

		[Token(Token = "0x40008EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private static IAPurchaseCallback querySubscriptionIl2cppCallback;

		[Token(Token = "0x40008EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private static IAPurchaseCallback querySubscriptionListIl2cppCallback;

		[Token(Token = "0x40008EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private static IAPurchaseCallback cancelSubscriptionIl2cppCallback;

		[Token(Token = "0x6000941")]
		[Address(RVA = "0xB942D0", Offset = "0xB942D0", VA = "0xB942D0")]
		[MonoPInvokeCallback(typeof(IAPurchaseCallback))]
		private static void IsReadyIl2cppCallback(int errorCode, string message)
		{
		}

		[Token(Token = "0x6000942")]
		[Address(RVA = "0xB8DD78", Offset = "0xB8DD78", VA = "0xB8DD78")]
		public static void IsReady(IAPurchaseListener listener, string pchAppKey)
		{
		}

		[Token(Token = "0x6000943")]
		[Address(RVA = "0xB94344", Offset = "0xB94344", VA = "0xB94344")]
		[MonoPInvokeCallback(typeof(IAPurchaseCallback))]
		private static void Request01Il2cppCallback(int errorCode, string message)
		{
		}

		[Token(Token = "0x6000944")]
		[Address(RVA = "0xB8DE68", Offset = "0xB8DE68", VA = "0xB8DE68")]
		public static void Request(IAPurchaseListener listener, string pchPrice)
		{
		}

		[Token(Token = "0x6000945")]
		[Address(RVA = "0xB943B8", Offset = "0xB943B8", VA = "0xB943B8")]
		[MonoPInvokeCallback(typeof(IAPurchaseCallback))]
		private static void Request02Il2cppCallback(int errorCode, string message)
		{
		}

		[Token(Token = "0x6000946")]
		[Address(RVA = "0xB8E344", Offset = "0xB8E344", VA = "0xB8E344")]
		public static void Request(IAPurchaseListener listener, string pchPrice, string pchUserData)
		{
		}

		[Token(Token = "0x6000947")]
		[Address(RVA = "0xB9442C", Offset = "0xB9442C", VA = "0xB9442C")]
		[MonoPInvokeCallback(typeof(IAPurchaseCallback))]
		private static void PurchaseIl2cppCallback(int errorCode, string message)
		{
		}

		[Token(Token = "0x6000948")]
		[Address(RVA = "0xB8DF54", Offset = "0xB8DF54", VA = "0xB8DF54")]
		public static void Purchase(IAPurchaseListener listener, string pchPurchaseId)
		{
		}

		[Token(Token = "0x6000949")]
		[Address(RVA = "0xB944A0", Offset = "0xB944A0", VA = "0xB944A0")]
		[MonoPInvokeCallback(typeof(IAPurchaseCallback))]
		private static void Query01Il2cppCallback(int errorCode, string message)
		{
		}

		[Token(Token = "0x600094A")]
		[Address(RVA = "0xB8E040", Offset = "0xB8E040", VA = "0xB8E040")]
		public static void Query(IAPurchaseListener listener, string pchPurchaseId)
		{
		}

		[Token(Token = "0x600094B")]
		[Address(RVA = "0xB94514", Offset = "0xB94514", VA = "0xB94514")]
		[MonoPInvokeCallback(typeof(IAPurchaseCallback))]
		private static void Query02Il2cppCallback(int errorCode, string message)
		{
		}

		[Token(Token = "0x600094C")]
		[Address(RVA = "0xB8E7F0", Offset = "0xB8E7F0", VA = "0xB8E7F0")]
		public static void Query(IAPurchaseListener listener)
		{
		}

		[Token(Token = "0x600094D")]
		[Address(RVA = "0xB94588", Offset = "0xB94588", VA = "0xB94588")]
		[MonoPInvokeCallback(typeof(IAPurchaseCallback))]
		private static void GetBalanceIl2cppCallback(int errorCode, string message)
		{
		}

		[Token(Token = "0x600094E")]
		[Address(RVA = "0xB8E12C", Offset = "0xB8E12C", VA = "0xB8E12C")]
		public static void GetBalance(IAPurchaseListener listener)
		{
		}

		[Token(Token = "0x600094F")]
		[Address(RVA = "0xB945FC", Offset = "0xB945FC", VA = "0xB945FC")]
		[MonoPInvokeCallback(typeof(IAPurchaseCallback))]
		private static void RequestSubscriptionIl2cppCallback(int errorCode, string message)
		{
		}

		[Token(Token = "0x6000950")]
		[Address(RVA = "0xB8E210", Offset = "0xB8E210", VA = "0xB8E210")]
		public static void RequestSubscription(IAPurchaseListener listener, string pchPrice, string pchFreeTrialType, int nFreeTrialValue, string pchChargePeriodType, int nChargePeriodValue, int nNumberOfChargePeriod, string pchPlanId)
		{
		}

		[Token(Token = "0x6000951")]
		[Address(RVA = "0xB94670", Offset = "0xB94670", VA = "0xB94670")]
		[MonoPInvokeCallback(typeof(IAPurchaseCallback))]
		private static void RequestSubscriptionWithPlanIDIl2cppCallback(int errorCode, string message)
		{
		}

		[Token(Token = "0x6000952")]
		[Address(RVA = "0xB8E440", Offset = "0xB8E440", VA = "0xB8E440")]
		public static void RequestSubscriptionWithPlanID(IAPurchaseListener listener, string pchPlanId)
		{
		}

		[Token(Token = "0x6000953")]
		[Address(RVA = "0xB946E4", Offset = "0xB946E4", VA = "0xB946E4")]
		[MonoPInvokeCallback(typeof(IAPurchaseCallback))]
		private static void SubscribeIl2cppCallback(int errorCode, string message)
		{
		}

		[Token(Token = "0x6000954")]
		[Address(RVA = "0xB8E52C", Offset = "0xB8E52C", VA = "0xB8E52C")]
		public static void Subscribe(IAPurchaseListener listener, string pchSubscriptionId)
		{
		}

		[Token(Token = "0x6000955")]
		[Address(RVA = "0xB94758", Offset = "0xB94758", VA = "0xB94758")]
		[MonoPInvokeCallback(typeof(IAPurchaseCallback))]
		private static void QuerySubscriptionIl2cppCallback(int errorCode, string message)
		{
		}

		[Token(Token = "0x6000956")]
		[Address(RVA = "0xB8E618", Offset = "0xB8E618", VA = "0xB8E618")]
		public static void QuerySubscription(IAPurchaseListener listener, string pchSubscriptionId)
		{
		}

		[Token(Token = "0x6000957")]
		[Address(RVA = "0xB947CC", Offset = "0xB947CC", VA = "0xB947CC")]
		[MonoPInvokeCallback(typeof(IAPurchaseCallback))]
		private static void QuerySubscriptionListIl2cppCallback(int errorCode, string message)
		{
		}

		[Token(Token = "0x6000958")]
		[Address(RVA = "0xB8E8D4", Offset = "0xB8E8D4", VA = "0xB8E8D4")]
		public static void QuerySubscriptionList(IAPurchaseListener listener)
		{
		}

		[Token(Token = "0x6000959")]
		[Address(RVA = "0xB94840", Offset = "0xB94840", VA = "0xB94840")]
		[MonoPInvokeCallback(typeof(IAPurchaseCallback))]
		private static void CancelSubscriptionIl2cppCallback(int errorCode, string message)
		{
		}

		[Token(Token = "0x600095A")]
		[Address(RVA = "0xB8E704", Offset = "0xB8E704", VA = "0xB8E704")]
		public static void CancelSubscription(IAPurchaseListener listener, string pchSubscriptionId)
		{
		}

		[Token(Token = "0x600095B")]
		[Address(RVA = "0xB94F08", Offset = "0xB94F08", VA = "0xB94F08")]
		public IAPurchase()
		{
		}
	}
	[Token(Token = "0x2000165")]
	public class DLC
	{
		[Token(Token = "0x60009E8")]
		[Address(RVA = "0xB99E60", Offset = "0xB99E60", VA = "0xB99E60")]
		public DLC()
		{
		}
	}
	[Token(Token = "0x2000166")]
	public class Subscription
	{
		[Token(Token = "0x4000917")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Viveport.Internal.StatusCallback2 isReadyIl2cppCallback;

		[Token(Token = "0x60009E9")]
		[Address(RVA = "0xB99E68", Offset = "0xB99E68", VA = "0xB99E68")]
		[MonoPInvokeCallback(typeof(Viveport.Internal.StatusCallback2))]
		private static void IsReadyIl2cppCallback(int errorCode, string message)
		{
		}

		[Token(Token = "0x60009EA")]
		[Address(RVA = "0xB91880", Offset = "0xB91880", VA = "0xB91880")]
		public static void IsReady(StatusCallback2 callback)
		{
		}

		[Token(Token = "0x60009EB")]
		[Address(RVA = "0xB91A78", Offset = "0xB91A78", VA = "0xB91A78")]
		public static SubscriptionStatus GetUserStatus()
		{
			return null;
		}

		[Token(Token = "0x60009EC")]
		[Address(RVA = "0xB99FB0", Offset = "0xB99FB0", VA = "0xB99FB0")]
		public Subscription()
		{
		}
	}
	[Token(Token = "0x2000167")]
	public class Deeplink
	{
		[Token(Token = "0x2000168")]
		public abstract class DeeplinkChecker
		{
			[Token(Token = "0x60009F5")]
			public abstract void OnSuccess();

			[Token(Token = "0x60009F6")]
			public abstract void OnFailure(int errorCode, string errorMessage);

			[Token(Token = "0x60009F7")]
			[Address(RVA = "0xB8C008", Offset = "0xB8C008", VA = "0xB8C008")]
			protected DeeplinkChecker()
			{
			}
		}

		[Token(Token = "0x4000918")]
		private const int MaxIdLength = 256;

		[Token(Token = "0x4000919")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Viveport.Internal.StatusCallback isReadyIl2cppCallback;

		[Token(Token = "0x400091A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Viveport.Internal.StatusCallback2 goToAppIl2cppCallback;

		[Token(Token = "0x400091B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static Viveport.Internal.StatusCallback2 goToAppWithBranchNameIl2cppCallback;

		[Token(Token = "0x400091C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static Viveport.Internal.StatusCallback2 goToStoreIl2cppCallback;

		[Token(Token = "0x400091D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static Viveport.Internal.StatusCallback2 goToAppOrGoToStoreIl2cppCallback;

		[Token(Token = "0x60009ED")]
		[Address(RVA = "0xB99FB8", Offset = "0xB99FB8", VA = "0xB99FB8")]
		[MonoPInvokeCallback(typeof(Viveport.Internal.StatusCallback))]
		private static void IsReadyIl2cppCallback(int errorCode)
		{
		}

		[Token(Token = "0x60009EE")]
		[Address(RVA = "0xB8B3C8", Offset = "0xB8B3C8", VA = "0xB8B3C8")]
		public static void IsReady(StatusCallback callback)
		{
		}

		[Token(Token = "0x60009EF")]
		[Address(RVA = "0xB8B904", Offset = "0xB8B904", VA = "0xB8B904")]
		public static void GoToApp(DeeplinkChecker checker, string appId, string launchData)
		{
		}

		[Token(Token = "0x60009F0")]
		[Address(RVA = "0xB8B9A4", Offset = "0xB8B9A4", VA = "0xB8B9A4")]
		public static void GoToApp(DeeplinkChecker checker, string appId, string launchData, string branchName)
		{
		}

		[Token(Token = "0x60009F1")]
		[Address(RVA = "0xB8BA4C", Offset = "0xB8BA4C", VA = "0xB8BA4C")]
		public static void GoToStore(DeeplinkChecker checker, string appId = "")
		{
		}

		[Token(Token = "0x60009F2")]
		[Address(RVA = "0xB8BAB0", Offset = "0xB8BAB0", VA = "0xB8BAB0")]
		public static void GoToAppOrGoToStore(DeeplinkChecker checker, string appId, string launchData)
		{
		}

		[Token(Token = "0x60009F3")]
		[Address(RVA = "0xB8BB50", Offset = "0xB8BB50", VA = "0xB8BB50")]
		public static string GetAppLaunchData()
		{
			return null;
		}

		[Token(Token = "0x60009F4")]
		[Address(RVA = "0xB9A01C", Offset = "0xB9A01C", VA = "0xB9A01C")]
		public Deeplink()
		{
		}
	}
	[Token(Token = "0x2000169")]
	internal class Token
	{
		[Token(Token = "0x60009F8")]
		[Address(RVA = "0xB9A024", Offset = "0xB9A024", VA = "0xB9A024")]
		public Token()
		{
		}
	}
}
namespace Viveport.Internal
{
	[Token(Token = "0x200016A")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	internal delegate void GetLicenseCallback(string message, string signature);
	[Token(Token = "0x200016B")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	internal delegate void StatusCallback(int nResult);
	[Token(Token = "0x200016C")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	internal delegate void StatusCallback2(int nResult, string message);
	[Token(Token = "0x200016D")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	internal delegate void QueryRuntimeModeCallback(int nResult, int nMode);
	[Token(Token = "0x200016E")]
	internal enum ELeaderboardDataRequest
	{
		[Token(Token = "0x400091F")]
		k_ELeaderboardDataRequestGlobal,
		[Token(Token = "0x4000920")]
		k_ELeaderboardDataRequestGlobalAroundUser,
		[Token(Token = "0x4000921")]
		k_ELeaderboardDataRequestLocal,
		[Token(Token = "0x4000922")]
		k_ELeaderboardDataRequestLocaleAroundUser
	}
	[Token(Token = "0x200016F")]
	internal enum ELeaderboardDataTimeRange
	{
		[Token(Token = "0x4000924")]
		k_ELeaderboardDataScropeAllTime,
		[Token(Token = "0x4000925")]
		k_ELeaderboardDataScropeDaily,
		[Token(Token = "0x4000926")]
		k_ELeaderboardDataScropeWeekly,
		[Token(Token = "0x4000927")]
		k_ELeaderboardDataScropeMonthly
	}
	[Token(Token = "0x2000170")]
	internal enum ELeaderboardSortMethod
	{
		[Token(Token = "0x4000929")]
		k_ELeaderboardSortMethodNone,
		[Token(Token = "0x400092A")]
		k_ELeaderboardSortMethodAscending,
		[Token(Token = "0x400092B")]
		k_ELeaderboardSortMethodDescending
	}
	[Token(Token = "0x2000171")]
	internal enum ELeaderboardDisplayType
	{
		[Token(Token = "0x400092D")]
		k_ELeaderboardDisplayTypeNone,
		[Token(Token = "0x400092E")]
		k_ELeaderboardDisplayTypeNumeric,
		[Token(Token = "0x400092F")]
		k_ELeaderboardDisplayTypeTimeSeconds,
		[Token(Token = "0x4000930")]
		k_ELeaderboardDisplayTypeTimeMilliSeconds
	}
	[Token(Token = "0x2000172")]
	internal enum ELeaderboardUploadScoreMethod
	{
		[Token(Token = "0x4000932")]
		k_ELeaderboardUploadScoreMethodNone,
		[Token(Token = "0x4000933")]
		k_ELeaderboardUploadScoreMethodKeepBest,
		[Token(Token = "0x4000934")]
		k_ELeaderboardUploadScoreMethodForceUpdate
	}
	[Token(Token = "0x2000173")]
	internal enum ESubscriptionTransactionType
	{
		[Token(Token = "0x4000936")]
		UNKNOWN,
		[Token(Token = "0x4000937")]
		PAID,
		[Token(Token = "0x4000938")]
		REDEEM,
		[Token(Token = "0x4000939")]
		FREEE_TRIAL
	}
	[Token(Token = "0x2000174")]
	internal enum ELocale
	{
		[Token(Token = "0x400093B")]
		k_ELocaleUS,
		[Token(Token = "0x400093C")]
		k_ELocaleDE,
		[Token(Token = "0x400093D")]
		k_ELocaleJP,
		[Token(Token = "0x400093E")]
		k_ELocaleKR,
		[Token(Token = "0x400093F")]
		k_ELocaleRU,
		[Token(Token = "0x4000940")]
		k_ELocaleCN,
		[Token(Token = "0x4000941")]
		k_ELocaleTW,
		[Token(Token = "0x4000942")]
		k_ELocaleFR
	}
	[Token(Token = "0x2000175")]
	internal enum EAchievementDisplayAttribute
	{
		[Token(Token = "0x4000944")]
		k_EAchievementDisplayAttributeName,
		[Token(Token = "0x4000945")]
		k_EAchievementDisplayAttributeDesc,
		[Token(Token = "0x4000946")]
		k_EAchievementDisplayAttributeHidden
	}
	[Token(Token = "0x2000176")]
	internal struct LeaderboardEntry_t
	{
		[Token(Token = "0x4000947")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal int m_nGlobalRank;

		[Token(Token = "0x4000948")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		internal int m_nScore;

		[Token(Token = "0x4000949")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal string m_pUserName;
	}
	[Token(Token = "0x2000177")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	internal delegate void IAPurchaseCallback(int code, string message);
	[Token(Token = "0x2000178")]
	internal struct IAPCurrency_t
	{
		[Token(Token = "0x400094A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal string m_pName;

		[Token(Token = "0x400094B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal string m_pSymbol;
	}
	[Token(Token = "0x2000179")]
	internal class Api
	{
		[Token(Token = "0x200017A")]
		internal class AndroidLicenseChecker : AndroidJavaProxy
		{
			[Token(Token = "0x400094C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private Viveport.Api.LicenseChecker checker;

			[Token(Token = "0x6000A12")]
			[Address(RVA = "0xB9A4EC", Offset = "0xB9A4EC", VA = "0xB9A4EC")]
			internal AndroidLicenseChecker(Viveport.Api.LicenseChecker checker)
			{
			}

			[Token(Token = "0x6000A13")]
			[Address(RVA = "0xB9A580", Offset = "0xB9A580", VA = "0xB9A580")]
			internal void onSuccess(long issueTime, long expirationTime, int latestVersion, bool updateRequired)
			{
			}

			[Token(Token = "0x6000A14")]
			[Address(RVA = "0xB9A694", Offset = "0xB9A694", VA = "0xB9A694")]
			internal void onFailure(int errorCode, string errorMessage)
			{
			}
		}

		[Token(Token = "0x6000A0D")]
		[Address(RVA = "0xB93A68", Offset = "0xB93A68", VA = "0xB93A68")]
		internal static int Init(StatusCallback callback, string pchAppKey)
		{
			return default(int);
		}

		[Token(Token = "0x6000A0E")]
		[Address(RVA = "0xB93C00", Offset = "0xB93C00", VA = "0xB93C00")]
		internal static int Shutdown(StatusCallback callback)
		{
			return default(int);
		}

		[Token(Token = "0x6000A0F")]
		[Address(RVA = "0xB93D1C", Offset = "0xB93D1C", VA = "0xB93D1C")]
		internal static string Version()
		{
			return null;
		}

		[Token(Token = "0x6000A10")]
		[Address(RVA = "0xB937DC", Offset = "0xB937DC", VA = "0xB937DC")]
		internal static void GetLicense(Viveport.Api.LicenseChecker checker, string appId, string appKey)
		{
		}

		[Token(Token = "0x6000A11")]
		[Address(RVA = "0xB9A578", Offset = "0xB9A578", VA = "0xB9A578")]
		public Api()
		{
		}
	}
	[Token(Token = "0x200017B")]
	internal class User
	{
		[Token(Token = "0x6000A15")]
		[Address(RVA = "0xB9A77C", Offset = "0xB9A77C", VA = "0xB9A77C")]
		internal static int IsReady(StatusCallback callback)
		{
			return default(int);
		}

		[Token(Token = "0x6000A16")]
		[Address(RVA = "0xB9AA64", Offset = "0xB9AA64", VA = "0xB9AA64")]
		internal static string GetUserId()
		{
			return null;
		}

		[Token(Token = "0x6000A17")]
		[Address(RVA = "0xB9AB48", Offset = "0xB9AB48", VA = "0xB9AB48")]
		internal static string GetUserName()
		{
			return null;
		}

		[Token(Token = "0x6000A18")]
		[Address(RVA = "0xB9AC2C", Offset = "0xB9AC2C", VA = "0xB9AC2C")]
		internal static string GetUserAvatarUrl()
		{
			return null;
		}

		[Token(Token = "0x6000A19")]
		[Address(RVA = "0xB9AD10", Offset = "0xB9AD10", VA = "0xB9AD10")]
		public User()
		{
		}
	}
	[Token(Token = "0x200017C")]
	internal class UserStats
	{
		[Token(Token = "0x6000A1A")]
		[Address(RVA = "0xB9AD18", Offset = "0xB9AD18", VA = "0xB9AD18")]
		internal static int IsReady(StatusCallback callback)
		{
			return default(int);
		}

		[Token(Token = "0x6000A1B")]
		[Address(RVA = "0xB9AF70", Offset = "0xB9AF70", VA = "0xB9AF70")]
		internal static int DownloadStats(StatusCallback callback)
		{
			return default(int);
		}

		[Token(Token = "0x6000A1C")]
		[Address(RVA = "0xB9B0BC", Offset = "0xB9B0BC", VA = "0xB9B0BC")]
		internal static int UploadStats(StatusCallback callback)
		{
			return default(int);
		}

		[Token(Token = "0x6000A1D")]
		[Address(RVA = "0xB9B208", Offset = "0xB9B208", VA = "0xB9B208")]
		internal static int SetStat(string pchName, int nData)
		{
			return default(int);
		}

		[Token(Token = "0x6000A1E")]
		[Address(RVA = "0xB9B35C", Offset = "0xB9B35C", VA = "0xB9B35C")]
		internal static int SetStat(string pchName, float fData)
		{
			return default(int);
		}

		[Token(Token = "0x6000A1F")]
		[Address(RVA = "0xB9B4B8", Offset = "0xB9B4B8", VA = "0xB9B4B8")]
		internal static int GetStat(string pchName, int nData)
		{
			return default(int);
		}

		[Token(Token = "0x6000A20")]
		[Address(RVA = "0xB9B60C", Offset = "0xB9B60C", VA = "0xB9B60C")]
		internal static float GetStat(string pchName, float fData)
		{
			return default(float);
		}

		[Token(Token = "0x6000A21")]
		[Address(RVA = "0xB9B768", Offset = "0xB9B768", VA = "0xB9B768")]
		internal static bool GetAchievement(string pchName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A22")]
		[Address(RVA = "0xB9B848", Offset = "0xB9B848", VA = "0xB9B848")]
		internal static int GetAchievementUnlockTime(string pchName)
		{
			return default(int);
		}

		[Token(Token = "0x6000A23")]
		[Address(RVA = "0xB9B928", Offset = "0xB9B928", VA = "0xB9B928")]
		internal static int SetAchievement(string pchName)
		{
			return default(int);
		}

		[Token(Token = "0x6000A24")]
		[Address(RVA = "0xB9BA08", Offset = "0xB9BA08", VA = "0xB9BA08")]
		internal static int ClearAchievement(string pchName)
		{
			return default(int);
		}

		[Token(Token = "0x6000A25")]
		[Address(RVA = "0xB9BAE8", Offset = "0xB9BAE8", VA = "0xB9BAE8")]
		internal static string GetAchievementDisplayAttribute(string pchName, EAchievementDisplayAttribute attr)
		{
			return null;
		}

		[Token(Token = "0x6000A26")]
		[Address(RVA = "0xB9BC3C", Offset = "0xB9BC3C", VA = "0xB9BC3C")]
		internal static string GetAchievementDisplayAttribute(string pchName, EAchievementDisplayAttribute attr, ELocale locale)
		{
			return null;
		}

		[Token(Token = "0x6000A27")]
		[Address(RVA = "0xB9BDDC", Offset = "0xB9BDDC", VA = "0xB9BDDC")]
		internal static string GetAchievementIcon(string pchName)
		{
			return null;
		}

		[Token(Token = "0x6000A28")]
		[Address(RVA = "0xB9BEBC", Offset = "0xB9BEBC", VA = "0xB9BEBC")]
		internal static int DownloadLeaderboardScores(StatusCallback callback, string pchLeaderboardName, ELeaderboardDataRequest nDataRequest, ELeaderboardDataTimeRange nTimeRange, int nRangeStart, int nRangeEnd)
		{
			return default(int);
		}

		[Token(Token = "0x6000A29")]
		[Address(RVA = "0xB9C1A8", Offset = "0xB9C1A8", VA = "0xB9C1A8")]
		internal static int UploadLeaderboardScore(StatusCallback callback, string pchLeaderboardName, int nScores)
		{
			return default(int);
		}

		[Token(Token = "0x6000A2A")]
		[Address(RVA = "0xB9C3A0", Offset = "0xB9C3A0", VA = "0xB9C3A0")]
		internal static Leaderboard GetLeaderboardScore(int nIndex)
		{
			return null;
		}

		[Token(Token = "0x6000A2B")]
		[Address(RVA = "0xB9C640", Offset = "0xB9C640", VA = "0xB9C640")]
		internal static int GetLeaderboardScoreCount()
		{
			return default(int);
		}

		[Token(Token = "0x6000A2C")]
		[Address(RVA = "0xB9C70C", Offset = "0xB9C70C", VA = "0xB9C70C")]
		internal static ELeaderboardSortMethod GetLeaderboardSortMethod()
		{
			return default(ELeaderboardSortMethod);
		}

		[Token(Token = "0x6000A2D")]
		[Address(RVA = "0xB9C7D8", Offset = "0xB9C7D8", VA = "0xB9C7D8")]
		internal static ELeaderboardDisplayType GetLeaderboardDisplayType()
		{
			return default(ELeaderboardDisplayType);
		}

		[Token(Token = "0x6000A2E")]
		[Address(RVA = "0xB9C8A4", Offset = "0xB9C8A4", VA = "0xB9C8A4")]
		public UserStats()
		{
		}
	}
	[Token(Token = "0x200017D")]
	internal class Deeplink
	{
		[Token(Token = "0x200017E")]
		internal class AndroidDeeplinkChecker : AndroidJavaProxy
		{
			[Token(Token = "0x400094D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private Viveport.Deeplink.DeeplinkChecker checker;

			[Token(Token = "0x6000A35")]
			[Address(RVA = "0xB9CC68", Offset = "0xB9CC68", VA = "0xB9CC68")]
			internal AndroidDeeplinkChecker(Viveport.Deeplink.DeeplinkChecker checker)
			{
			}

			[Token(Token = "0x6000A36")]
			[Address(RVA = "0xB9D108", Offset = "0xB9D108", VA = "0xB9D108")]
			internal void onSuccess()
			{
			}

			[Token(Token = "0x6000A37")]
			[Address(RVA = "0xB9D238", Offset = "0xB9D238", VA = "0xB9D238")]
			internal void onFailure(int errorCode, string errorMessage)
			{
			}
		}

		[Token(Token = "0x6000A2F")]
		[Address(RVA = "0xB9C8AC", Offset = "0xB9C8AC", VA = "0xB9C8AC")]
		internal static void IsReady(StatusCallback callback)
		{
		}

		[Token(Token = "0x6000A30")]
		[Address(RVA = "0xB9CAB8", Offset = "0xB9CAB8", VA = "0xB9CAB8")]
		internal static void GoToApp(Viveport.Deeplink.DeeplinkChecker checker, string appId, string launchData)
		{
		}

		[Token(Token = "0x6000A31")]
		[Address(RVA = "0xB9CCF4", Offset = "0xB9CCF4", VA = "0xB9CCF4")]
		internal static void GoToStore(Viveport.Deeplink.DeeplinkChecker checker, string appId)
		{
		}

		[Token(Token = "0x6000A32")]
		[Address(RVA = "0xB9CE6C", Offset = "0xB9CE6C", VA = "0xB9CE6C")]
		internal static void GoToAppOrGoToStore(Viveport.Deeplink.DeeplinkChecker checker, string appId, string launchData)
		{
		}

		[Token(Token = "0x6000A33")]
		[Address(RVA = "0xB9D01C", Offset = "0xB9D01C", VA = "0xB9D01C")]
		internal static string GetAppLaunchData()
		{
			return null;
		}

		[Token(Token = "0x6000A34")]
		[Address(RVA = "0xB9D100", Offset = "0xB9D100", VA = "0xB9D100")]
		public Deeplink()
		{
		}
	}
	[Token(Token = "0x200017F")]
	internal class IAPurchase
	{
		[Token(Token = "0x6000A38")]
		[Address(RVA = "0xB9D31C", Offset = "0xB9D31C", VA = "0xB9D31C")]
		internal static void IsReady(IAPurchaseCallback callback, string pchAppKey)
		{
		}

		[Token(Token = "0x6000A39")]
		[Address(RVA = "0xB9D62C", Offset = "0xB9D62C", VA = "0xB9D62C")]
		internal static void Request(IAPurchaseCallback callback, string pchPrice)
		{
		}

		[Token(Token = "0x6000A3A")]
		[Address(RVA = "0xB9D7A4", Offset = "0xB9D7A4", VA = "0xB9D7A4")]
		internal static void Request(IAPurchaseCallback callback, string pchPrice, string pchUserData)
		{
		}

		[Token(Token = "0x6000A3B")]
		[Address(RVA = "0xB9D954", Offset = "0xB9D954", VA = "0xB9D954")]
		internal static void Purchase(IAPurchaseCallback callback, string pchPurchaseId)
		{
		}

		[Token(Token = "0x6000A3C")]
		[Address(RVA = "0xB9DACC", Offset = "0xB9DACC", VA = "0xB9DACC")]
		internal static void Query(IAPurchaseCallback callback, string pchPurchaseId)
		{
		}

		[Token(Token = "0x6000A3D")]
		[Address(RVA = "0xB9DC44", Offset = "0xB9DC44", VA = "0xB9DC44")]
		internal static void Query(IAPurchaseCallback callback)
		{
		}

		[Token(Token = "0x6000A3E")]
		[Address(RVA = "0xB9DD7C", Offset = "0xB9DD7C", VA = "0xB9DD7C")]
		internal static void GetBalance(IAPurchaseCallback callback)
		{
		}

		[Token(Token = "0x6000A3F")]
		[Address(RVA = "0xB9DEB4", Offset = "0xB9DEB4", VA = "0xB9DEB4")]
		internal static void RequestSubscription(IAPurchaseCallback callback, string pchPrice, string pchFreeTrialType, int nFreeTrialValue, string pchChargePeriodType, int nChargePeriodValue, int nNumberOfChargePeriod, string pchPlanId)
		{
		}

		[Token(Token = "0x6000A40")]
		[Address(RVA = "0xB9E1EC", Offset = "0xB9E1EC", VA = "0xB9E1EC")]
		internal static void RequestSubscriptionWithPlanID(IAPurchaseCallback callback, string pchPlanId)
		{
		}

		[Token(Token = "0x6000A41")]
		[Address(RVA = "0xB9E364", Offset = "0xB9E364", VA = "0xB9E364")]
		internal static void Subscribe(IAPurchaseCallback callback, string pchSubscriptionId)
		{
		}

		[Token(Token = "0x6000A42")]
		[Address(RVA = "0xB9E4DC", Offset = "0xB9E4DC", VA = "0xB9E4DC")]
		internal static void QuerySubscription(IAPurchaseCallback callback, string pchSubscriptionId)
		{
		}

		[Token(Token = "0x6000A43")]
		[Address(RVA = "0xB9E654", Offset = "0xB9E654", VA = "0xB9E654")]
		internal static void QuerySubscriptionList(IAPurchaseCallback callback)
		{
		}

		[Token(Token = "0x6000A44")]
		[Address(RVA = "0xB9E78C", Offset = "0xB9E78C", VA = "0xB9E78C")]
		internal static void CancelSubscription(IAPurchaseCallback callback, string pchSubscriptionId)
		{
		}

		[Token(Token = "0x6000A45")]
		[Address(RVA = "0xB9E904", Offset = "0xB9E904", VA = "0xB9E904")]
		public IAPurchase()
		{
		}
	}
	[Token(Token = "0x2000180")]
	internal class Subscription
	{
		[Token(Token = "0x6000A46")]
		[Address(RVA = "0xB9E90C", Offset = "0xB9E90C", VA = "0xB9E90C")]
		internal static int IsReady(StatusCallback2 callback)
		{
			return default(int);
		}

		[Token(Token = "0x6000A47")]
		[Address(RVA = "0xB9EBE4", Offset = "0xB9EBE4", VA = "0xB9EBE4")]
		internal static bool IsWindowsSubscriber()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A48")]
		[Address(RVA = "0xB9ECB0", Offset = "0xB9ECB0", VA = "0xB9ECB0")]
		internal static bool IsAndroidSubscriber()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A49")]
		[Address(RVA = "0xB9ED7C", Offset = "0xB9ED7C", VA = "0xB9ED7C")]
		internal static ESubscriptionTransactionType GetTransactionType()
		{
			return default(ESubscriptionTransactionType);
		}

		[Token(Token = "0x6000A4A")]
		[Address(RVA = "0xB9EEE4", Offset = "0xB9EEE4", VA = "0xB9EEE4")]
		public Subscription()
		{
		}
	}
	[Token(Token = "0x2000181")]
	internal class Android
	{
		[Token(Token = "0x400094E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static AndroidJavaObject _api;

		[Token(Token = "0x400094F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static AndroidJavaObject _iAPurchase;

		[Token(Token = "0x4000950")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static AndroidJavaClass _unityPlayer;

		[Token(Token = "0x4000951")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static AndroidJavaObject _user;

		[Token(Token = "0x4000952")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static AndroidJavaObject _userStats;

		[Token(Token = "0x4000953")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static AndroidJavaObject _subscription;

		[Token(Token = "0x4000954")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static AndroidJavaObject _deeplink;

		[Token(Token = "0x1700012D")]
		internal static AndroidJavaClass UnityPlayer
		{
			[Token(Token = "0x6000A51")]
			[Address(RVA = "0xB9F000", Offset = "0xB9F000", VA = "0xB9F000")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700012E")]
		internal static AndroidJavaObject CurrentActivity
		{
			[Token(Token = "0x6000A52")]
			[Address(RVA = "0xB9F0B4", Offset = "0xB9F0B4", VA = "0xB9F0B4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700012F")]
		internal static AndroidJavaObject CurrentContext
		{
			[Token(Token = "0x6000A53")]
			[Address(RVA = "0xB9A9D4", Offset = "0xB9A9D4", VA = "0xB9A9D4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A4B")]
		[Address(RVA = "0xB9EEEC", Offset = "0xB9EEEC", VA = "0xB9EEEC")]
		internal static AndroidJavaObject GetJavaAPI()
		{
			return null;
		}

		[Token(Token = "0x6000A4C")]
		[Address(RVA = "0xB9A8C8", Offset = "0xB9A8C8", VA = "0xB9A8C8")]
		internal static AndroidJavaObject GetJavaUser()
		{
			return null;
		}

		[Token(Token = "0x6000A4D")]
		[Address(RVA = "0xB9AE64", Offset = "0xB9AE64", VA = "0xB9AE64")]
		internal static AndroidJavaObject GetJavaUserStats()
		{
			return null;
		}

		[Token(Token = "0x6000A4E")]
		[Address(RVA = "0xB9D494", Offset = "0xB9D494", VA = "0xB9D494")]
		internal static AndroidJavaObject GetJavaIAPurchase()
		{
			return null;
		}

		[Token(Token = "0x6000A4F")]
		[Address(RVA = "0xB9EA4C", Offset = "0xB9EA4C", VA = "0xB9EA4C")]
		internal static AndroidJavaObject GetJavaSubscription()
		{
			return null;
		}

		[Token(Token = "0x6000A50")]
		[Address(RVA = "0xB9C9AC", Offset = "0xB9C9AC", VA = "0xB9C9AC")]
		internal static AndroidJavaObject GetDeeplink()
		{
			return null;
		}

		[Token(Token = "0x6000A54")]
		[Address(RVA = "0xB9F110", Offset = "0xB9F110", VA = "0xB9F110")]
		public Android()
		{
		}
	}
	[Token(Token = "0x2000182")]
	internal class AndroidPluginCallback : AndroidJavaProxy
	{
		[Token(Token = "0x4000955")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private IAPurchaseCallback callback;

		[Token(Token = "0x4000956")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private StatusCallback statusCallback;

		[Token(Token = "0x4000957")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private StatusCallback2 statusCallback2;

		[Token(Token = "0x6000A55")]
		[Address(RVA = "0xB9D5A0", Offset = "0xB9D5A0", VA = "0xB9D5A0")]
		internal AndroidPluginCallback(IAPurchaseCallback callback)
		{
		}

		[Token(Token = "0x6000A56")]
		[Address(RVA = "0xB9A9D8", Offset = "0xB9A9D8", VA = "0xB9A9D8")]
		internal AndroidPluginCallback(StatusCallback callback)
		{
		}

		[Token(Token = "0x6000A57")]
		[Address(RVA = "0xB9EB58", Offset = "0xB9EB58", VA = "0xB9EB58")]
		internal AndroidPluginCallback(StatusCallback2 callback)
		{
		}

		[Token(Token = "0x6000A58")]
		[Address(RVA = "0xB9F118", Offset = "0xB9F118", VA = "0xB9F118")]
		internal void onResult(int statusCode, string result)
		{
		}
	}
}
namespace Viveport.Arcade
{
	[Token(Token = "0x2000183")]
	internal class Session
	{
		[Token(Token = "0x6000A59")]
		[Address(RVA = "0xB9F23C", Offset = "0xB9F23C", VA = "0xB9F23C")]
		public Session()
		{
		}
	}
}
namespace Viveport.Core
{
	[Token(Token = "0x2000184")]
	public class Logger
	{
		[Token(Token = "0x4000958")]
		private const string LoggerTypeNameUnity = "UnityEngine.Debug";

		[Token(Token = "0x4000959")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool _hasDetected;

		[Token(Token = "0x400095A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		private static bool _usingUnityLog;

		[Token(Token = "0x400095B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Type _unityLogType;

		[Token(Token = "0x6000A5A")]
		[Address(RVA = "0xB9D190", Offset = "0xB9D190", VA = "0xB9D190")]
		public static void Log(string message)
		{
		}

		[Token(Token = "0x6000A5B")]
		[Address(RVA = "0xB9F59C", Offset = "0xB9F59C", VA = "0xB9F59C")]
		private static void ConsoleLog(string message)
		{
		}

		[Token(Token = "0x6000A5C")]
		[Address(RVA = "0xB9F244", Offset = "0xB9F244", VA = "0xB9F244")]
		private static void UnityLog(string message)
		{
		}

		[Token(Token = "0x6000A5D")]
		[Address(RVA = "0xB9F62C", Offset = "0xB9F62C", VA = "0xB9F62C")]
		private static Type GetType(string typeName)
		{
			return null;
		}

		[Token(Token = "0x6000A5E")]
		[Address(RVA = "0xB9F770", Offset = "0xB9F770", VA = "0xB9F770")]
		public Logger()
		{
		}
	}
}
namespace LitJson
{
	[Token(Token = "0x2000185")]
	public enum JsonType
	{
		[Token(Token = "0x400095D")]
		None,
		[Token(Token = "0x400095E")]
		Object,
		[Token(Token = "0x400095F")]
		Array,
		[Token(Token = "0x4000960")]
		String,
		[Token(Token = "0x4000961")]
		Int,
		[Token(Token = "0x4000962")]
		Long,
		[Token(Token = "0x4000963")]
		Double,
		[Token(Token = "0x4000964")]
		Boolean
	}
	[Token(Token = "0x2000186")]
	public interface IJsonWrapper : IList, ICollection, IEnumerable, IOrderedDictionary, IDictionary
	{
		[Token(Token = "0x17000130")]
		bool IsArray
		{
			[Token(Token = "0x6000A60")]
			get;
		}

		[Token(Token = "0x17000131")]
		bool IsBoolean
		{
			[Token(Token = "0x6000A61")]
			get;
		}

		[Token(Token = "0x17000132")]
		bool IsDouble
		{
			[Token(Token = "0x6000A62")]
			get;
		}

		[Token(Token = "0x17000133")]
		bool IsInt
		{
			[Token(Token = "0x6000A63")]
			get;
		}

		[Token(Token = "0x17000134")]
		bool IsLong
		{
			[Token(Token = "0x6000A64")]
			get;
		}

		[Token(Token = "0x17000135")]
		bool IsObject
		{
			[Token(Token = "0x6000A65")]
			get;
		}

		[Token(Token = "0x17000136")]
		bool IsString
		{
			[Token(Token = "0x6000A66")]
			get;
		}

		[Token(Token = "0x6000A67")]
		bool GetBoolean();

		[Token(Token = "0x6000A68")]
		double GetDouble();

		[Token(Token = "0x6000A69")]
		int GetInt();

		[Token(Token = "0x6000A6A")]
		JsonType GetJsonType();

		[Token(Token = "0x6000A6B")]
		long GetLong();

		[Token(Token = "0x6000A6C")]
		string GetString();

		[Token(Token = "0x6000A6D")]
		void SetBoolean(bool val);

		[Token(Token = "0x6000A6E")]
		void SetDouble(double val);

		[Token(Token = "0x6000A6F")]
		void SetInt(int val);

		[Token(Token = "0x6000A70")]
		void SetJsonType(JsonType type);

		[Token(Token = "0x6000A71")]
		void SetLong(long val);

		[Token(Token = "0x6000A72")]
		void SetString(string val);

		[Token(Token = "0x6000A73")]
		string ToJson();

		[Token(Token = "0x6000A74")]
		void ToJson(JsonWriter writer);
	}
	[Token(Token = "0x2000187")]
	public class JsonData : IJsonWrapper, IList, ICollection, IEnumerable, IOrderedDictionary, IDictionary, IEquatable<JsonData>
	{
		[Token(Token = "0x4000965")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IList<JsonData> inst_array;

		[Token(Token = "0x4000966")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool inst_boolean;

		[Token(Token = "0x4000967")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private double inst_double;

		[Token(Token = "0x4000968")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int inst_int;

		[Token(Token = "0x4000969")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private long inst_long;

		[Token(Token = "0x400096A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private IDictionary<string, JsonData> inst_object;

		[Token(Token = "0x400096B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private string inst_string;

		[Token(Token = "0x400096C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private string json;

		[Token(Token = "0x400096D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private JsonType type;

		[Token(Token = "0x400096E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private IList<KeyValuePair<string, JsonData>> object_list;

		[Token(Token = "0x17000137")]
		public int Count
		{
			[Token(Token = "0x6000A75")]
			[Address(RVA = "0xB9F7C4", Offset = "0xB9F7C4", VA = "0xB9F7C4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000138")]
		public bool IsArray
		{
			[Token(Token = "0x6000A76")]
			[Address(RVA = "0xB9F944", Offset = "0xB9F944", VA = "0xB9F944")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000139")]
		public bool IsBoolean
		{
			[Token(Token = "0x6000A77")]
			[Address(RVA = "0xB9F954", Offset = "0xB9F954", VA = "0xB9F954")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700013A")]
		public bool IsDouble
		{
			[Token(Token = "0x6000A78")]
			[Address(RVA = "0xB9F964", Offset = "0xB9F964", VA = "0xB9F964")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700013B")]
		public bool IsInt
		{
			[Token(Token = "0x6000A79")]
			[Address(RVA = "0xB9F974", Offset = "0xB9F974", VA = "0xB9F974")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700013C")]
		public bool IsLong
		{
			[Token(Token = "0x6000A7A")]
			[Address(RVA = "0xB9F984", Offset = "0xB9F984", VA = "0xB9F984")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700013D")]
		public bool IsObject
		{
			[Token(Token = "0x6000A7B")]
			[Address(RVA = "0xB9F994", Offset = "0xB9F994", VA = "0xB9F994")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700013E")]
		public bool IsString
		{
			[Token(Token = "0x6000A7C")]
			[Address(RVA = "0xB9F9A4", Offset = "0xB9F9A4", VA = "0xB9F9A4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700013F")]
		private int System.Collections.ICollection.Count
		{
			[Token(Token = "0x6000A7D")]
			[Address(RVA = "0xB9F9B4", Offset = "0xB9F9B4", VA = "0xB9F9B4", Slot = "37")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000140")]
		private bool System.Collections.ICollection.IsSynchronized
		{
			[Token(Token = "0x6000A7E")]
			[Address(RVA = "0xB9F9B8", Offset = "0xB9F9B8", VA = "0xB9F9B8", Slot = "39")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000141")]
		private object System.Collections.ICollection.SyncRoot
		{
			[Token(Token = "0x6000A7F")]
			[Address(RVA = "0xB9FA64", Offset = "0xB9FA64", VA = "0xB9FA64", Slot = "38")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000142")]
		private bool System.Collections.IDictionary.IsFixedSize
		{
			[Token(Token = "0x6000A80")]
			[Address(RVA = "0xB9FB10", Offset = "0xB9FB10", VA = "0xB9FB10", Slot = "54")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000143")]
		private bool System.Collections.IDictionary.IsReadOnly
		{
			[Token(Token = "0x6000A81")]
			[Address(RVA = "0xB9FD40", Offset = "0xB9FD40", VA = "0xB9FD40", Slot = "53")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000144")]
		private ICollection System.Collections.IDictionary.Keys
		{
			[Token(Token = "0x6000A82")]
			[Address(RVA = "0xB9FDEC", Offset = "0xB9FDEC", VA = "0xB9FDEC", Slot = "48")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000145")]
		private ICollection System.Collections.IDictionary.Values
		{
			[Token(Token = "0x6000A83")]
			[Address(RVA = "0xBA01B8", Offset = "0xBA01B8", VA = "0xBA01B8", Slot = "49")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000146")]
		private bool LitJson.IJsonWrapper.IsArray
		{
			[Token(Token = "0x6000A84")]
			[Address(RVA = "0xBA0584", Offset = "0xBA0584", VA = "0xBA0584", Slot = "4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000147")]
		private bool LitJson.IJsonWrapper.IsBoolean
		{
			[Token(Token = "0x6000A85")]
			[Address(RVA = "0xBA0594", Offset = "0xBA0594", VA = "0xBA0594", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000148")]
		private bool LitJson.IJsonWrapper.IsDouble
		{
			[Token(Token = "0x6000A86")]
			[Address(RVA = "0xBA05A4", Offset = "0xBA05A4", VA = "0xBA05A4", Slot = "6")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000149")]
		private bool LitJson.IJsonWrapper.IsInt
		{
			[Token(Token = "0x6000A87")]
			[Address(RVA = "0xBA05B4", Offset = "0xBA05B4", VA = "0xBA05B4", Slot = "7")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700014A")]
		private bool LitJson.IJsonWrapper.IsLong
		{
			[Token(Token = "0x6000A88")]
			[Address(RVA = "0xBA05C4", Offset = "0xBA05C4", VA = "0xBA05C4", Slot = "8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700014B")]
		private bool LitJson.IJsonWrapper.IsObject
		{
			[Token(Token = "0x6000A89")]
			[Address(RVA = "0xBA05D4", Offset = "0xBA05D4", VA = "0xBA05D4", Slot = "9")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700014C")]
		private bool LitJson.IJsonWrapper.IsString
		{
			[Token(Token = "0x6000A8A")]
			[Address(RVA = "0xBA05E4", Offset = "0xBA05E4", VA = "0xBA05E4", Slot = "10")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700014D")]
		private bool System.Collections.IList.IsFixedSize
		{
			[Token(Token = "0x6000A8B")]
			[Address(RVA = "0xBA05F4", Offset = "0xBA05F4", VA = "0xBA05F4", Slot = "31")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700014E")]
		private bool System.Collections.IList.IsReadOnly
		{
			[Token(Token = "0x6000A8C")]
			[Address(RVA = "0xBA07CC", Offset = "0xBA07CC", VA = "0xBA07CC", Slot = "30")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700014F")]
		private object System.Collections.IDictionary.Item
		{
			[Token(Token = "0x6000A8D")]
			[Address(RVA = "0xBA0878", Offset = "0xBA0878", VA = "0xBA0878", Slot = "46")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A8E")]
			[Address(RVA = "0xBA0928", Offset = "0xBA0928", VA = "0xBA0928", Slot = "47")]
			set
			{
			}
		}

		[Token(Token = "0x17000150")]
		private object System.Collections.Specialized.IOrderedDictionary.Item
		{
			[Token(Token = "0x6000A8F")]
			[Address(RVA = "0xBA0E24", Offset = "0xBA0E24", VA = "0xBA0E24", Slot = "41")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A90")]
			[Address(RVA = "0xBA0EE8", Offset = "0xBA0EE8", VA = "0xBA0EE8", Slot = "42")]
			set
			{
			}
		}

		[Token(Token = "0x17000151")]
		private object System.Collections.IList.Item
		{
			[Token(Token = "0x6000A91")]
			[Address(RVA = "0xBA10F4", Offset = "0xBA10F4", VA = "0xBA10F4", Slot = "25")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A92")]
			[Address(RVA = "0xBA11A4", Offset = "0xBA11A4", VA = "0xBA11A4", Slot = "26")]
			set
			{
			}
		}

		[Token(Token = "0x17000152")]
		public JsonData this[string prop_name]
		{
			[Token(Token = "0x6000A93")]
			[Address(RVA = "0xBA1484", Offset = "0xBA1484", VA = "0xBA1484")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A94")]
			[Address(RVA = "0xBA0A94", Offset = "0xBA0A94", VA = "0xBA0A94")]
			set
			{
			}
		}

		[Token(Token = "0x17000153")]
		public JsonData this[int index]
		{
			[Token(Token = "0x6000A95")]
			[Address(RVA = "0xBA1534", Offset = "0xBA1534", VA = "0xBA1534")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A96")]
			[Address(RVA = "0xBA11DC", Offset = "0xBA11DC", VA = "0xBA11DC")]
			set
			{
			}
		}

		[Token(Token = "0x6000A97")]
		[Address(RVA = "0xBA1684", Offset = "0xBA1684", VA = "0xBA1684")]
		public JsonData()
		{
		}

		[Token(Token = "0x6000A98")]
		[Address(RVA = "0xBA168C", Offset = "0xBA168C", VA = "0xBA168C")]
		public JsonData(bool boolean)
		{
		}

		[Token(Token = "0x6000A99")]
		[Address(RVA = "0xBA16BC", Offset = "0xBA16BC", VA = "0xBA16BC")]
		public JsonData(double number)
		{
		}

		[Token(Token = "0x6000A9A")]
		[Address(RVA = "0xBA16EC", Offset = "0xBA16EC", VA = "0xBA16EC")]
		public JsonData(int number)
		{
		}

		[Token(Token = "0x6000A9B")]
		[Address(RVA = "0xBA171C", Offset = "0xBA171C", VA = "0xBA171C")]
		public JsonData(long number)
		{
		}

		[Token(Token = "0x6000A9C")]
		[Address(RVA = "0xBA174C", Offset = "0xBA174C", VA = "0xBA174C")]
		public JsonData(object obj)
		{
		}

		[Token(Token = "0x6000A9D")]
		[Address(RVA = "0xBA1980", Offset = "0xBA1980", VA = "0xBA1980")]
		public JsonData(string str)
		{
		}

		[Token(Token = "0x6000A9E")]
		[Address(RVA = "0xBA19B8", Offset = "0xBA19B8", VA = "0xBA19B8")]
		public static implicit operator JsonData(bool data)
		{
			return null;
		}

		[Token(Token = "0x6000A9F")]
		[Address(RVA = "0xBA1A28", Offset = "0xBA1A28", VA = "0xBA1A28")]
		public static implicit operator JsonData(double data)
		{
			return null;
		}

		[Token(Token = "0x6000AA0")]
		[Address(RVA = "0xBA1A9C", Offset = "0xBA1A9C", VA = "0xBA1A9C")]
		public static implicit operator JsonData(int data)
		{
			return null;
		}

		[Token(Token = "0x6000AA1")]
		[Address(RVA = "0xBA1B08", Offset = "0xBA1B08", VA = "0xBA1B08")]
		public static implicit operator JsonData(long data)
		{
			return null;
		}

		[Token(Token = "0x6000AA2")]
		[Address(RVA = "0xBA1B74", Offset = "0xBA1B74", VA = "0xBA1B74")]
		public static implicit operator JsonData(string data)
		{
			return null;
		}

		[Token(Token = "0x6000AA3")]
		[Address(RVA = "0xBA1BEC", Offset = "0xBA1BEC", VA = "0xBA1BEC")]
		public static explicit operator bool(JsonData data)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AA4")]
		[Address(RVA = "0xBA1C5C", Offset = "0xBA1C5C", VA = "0xBA1C5C")]
		public static explicit operator double(JsonData data)
		{
			return default(double);
		}

		[Token(Token = "0x6000AA5")]
		[Address(RVA = "0xBA1CCC", Offset = "0xBA1CCC", VA = "0xBA1CCC")]
		public static explicit operator int(JsonData data)
		{
			return default(int);
		}

		[Token(Token = "0x6000AA6")]
		[Address(RVA = "0xBA1D3C", Offset = "0xBA1D3C", VA = "0xBA1D3C")]
		public static explicit operator long(JsonData data)
		{
			return default(long);
		}

		[Token(Token = "0x6000AA7")]
		[Address(RVA = "0xBA1DAC", Offset = "0xBA1DAC", VA = "0xBA1DAC")]
		public static explicit operator string(JsonData data)
		{
			return null;
		}

		[Token(Token = "0x6000AA8")]
		[Address(RVA = "0xBA1E1C", Offset = "0xBA1E1C", VA = "0xBA1E1C", Slot = "36")]
		private void System.Collections.ICollection.CopyTo(Array array, int index)
		{
		}

		[Token(Token = "0x6000AA9")]
		[Address(RVA = "0xBA1EDC", Offset = "0xBA1EDC", VA = "0xBA1EDC", Slot = "51")]
		private void System.Collections.IDictionary.Add(object key, object value)
		{
		}

		[Token(Token = "0x6000AAA")]
		[Address(RVA = "0xBA20A8", Offset = "0xBA20A8", VA = "0xBA20A8", Slot = "52")]
		private void System.Collections.IDictionary.Clear()
		{
		}

		[Token(Token = "0x6000AAB")]
		[Address(RVA = "0xBA21DC", Offset = "0xBA21DC", VA = "0xBA21DC", Slot = "50")]
		private bool System.Collections.IDictionary.Contains(object key)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AAC")]
		[Address(RVA = "0xBA2290", Offset = "0xBA2290", VA = "0xBA2290", Slot = "55")]
		private IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000AAD")]
		[Address(RVA = "0xBA2328", Offset = "0xBA2328", VA = "0xBA2328", Slot = "56")]
		private void System.Collections.IDictionary.Remove(object key)
		{
		}

		[Token(Token = "0x6000AAE")]
		[Address(RVA = "0xBA25B4", Offset = "0xBA25B4", VA = "0xBA25B4", Slot = "40")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000AAF")]
		[Address(RVA = "0xBA265C", Offset = "0xBA265C", VA = "0xBA265C", Slot = "11")]
		private bool LitJson.IJsonWrapper.GetBoolean()
		{
			return default(bool);
		}

		[Token(Token = "0x6000AB0")]
		[Address(RVA = "0xBA26C4", Offset = "0xBA26C4", VA = "0xBA26C4", Slot = "12")]
		private double LitJson.IJsonWrapper.GetDouble()
		{
			return default(double);
		}

		[Token(Token = "0x6000AB1")]
		[Address(RVA = "0xBA272C", Offset = "0xBA272C", VA = "0xBA272C", Slot = "13")]
		private int LitJson.IJsonWrapper.GetInt()
		{
			return default(int);
		}

		[Token(Token = "0x6000AB2")]
		[Address(RVA = "0xBA2794", Offset = "0xBA2794", VA = "0xBA2794", Slot = "15")]
		private long LitJson.IJsonWrapper.GetLong()
		{
			return default(long);
		}

		[Token(Token = "0x6000AB3")]
		[Address(RVA = "0xBA27FC", Offset = "0xBA27FC", VA = "0xBA27FC", Slot = "16")]
		private string LitJson.IJsonWrapper.GetString()
		{
			return null;
		}

		[Token(Token = "0x6000AB4")]
		[Address(RVA = "0xBA2864", Offset = "0xBA2864", VA = "0xBA2864", Slot = "17")]
		private void LitJson.IJsonWrapper.SetBoolean(bool val)
		{
		}

		[Token(Token = "0x6000AB5")]
		[Address(RVA = "0xBA2880", Offset = "0xBA2880", VA = "0xBA2880", Slot = "18")]
		private void LitJson.IJsonWrapper.SetDouble(double val)
		{
		}

		[Token(Token = "0x6000AB6")]
		[Address(RVA = "0xBA2898", Offset = "0xBA2898", VA = "0xBA2898", Slot = "19")]
		private void LitJson.IJsonWrapper.SetInt(int val)
		{
		}

		[Token(Token = "0x6000AB7")]
		[Address(RVA = "0xBA28B0", Offset = "0xBA28B0", VA = "0xBA28B0", Slot = "21")]
		private void LitJson.IJsonWrapper.SetLong(long val)
		{
		}

		[Token(Token = "0x6000AB8")]
		[Address(RVA = "0xBA28C8", Offset = "0xBA28C8", VA = "0xBA28C8", Slot = "22")]
		private void LitJson.IJsonWrapper.SetString(string val)
		{
		}

		[Token(Token = "0x6000AB9")]
		[Address(RVA = "0xBA28F4", Offset = "0xBA28F4", VA = "0xBA28F4", Slot = "23")]
		private string LitJson.IJsonWrapper.ToJson()
		{
			return null;
		}

		[Token(Token = "0x6000ABA")]
		[Address(RVA = "0xBA29C8", Offset = "0xBA29C8", VA = "0xBA29C8", Slot = "24")]
		private void LitJson.IJsonWrapper.ToJson(JsonWriter writer)
		{
		}

		[Token(Token = "0x6000ABB")]
		[Address(RVA = "0xBA29FC", Offset = "0xBA29FC", VA = "0xBA29FC", Slot = "27")]
		private int System.Collections.IList.Add(object value)
		{
			return default(int);
		}

		[Token(Token = "0x6000ABC")]
		[Address(RVA = "0xBA2AD0", Offset = "0xBA2AD0", VA = "0xBA2AD0", Slot = "29")]
		private void System.Collections.IList.Clear()
		{
		}

		[Token(Token = "0x6000ABD")]
		[Address(RVA = "0xBA2B8C", Offset = "0xBA2B8C", VA = "0xBA2B8C", Slot = "28")]
		private bool System.Collections.IList.Contains(object value)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ABE")]
		[Address(RVA = "0xBA2C40", Offset = "0xBA2C40", VA = "0xBA2C40", Slot = "32")]
		private int System.Collections.IList.IndexOf(object value)
		{
			return default(int);
		}

		[Token(Token = "0x6000ABF")]
		[Address(RVA = "0xBA2CF4", Offset = "0xBA2CF4", VA = "0xBA2CF4", Slot = "33")]
		private void System.Collections.IList.Insert(int index, object value)
		{
		}

		[Token(Token = "0x6000AC0")]
		[Address(RVA = "0xBA2DC8", Offset = "0xBA2DC8", VA = "0xBA2DC8", Slot = "34")]
		private void System.Collections.IList.Remove(object value)
		{
		}

		[Token(Token = "0x6000AC1")]
		[Address(RVA = "0xBA2E8C", Offset = "0xBA2E8C", VA = "0xBA2E8C", Slot = "35")]
		private void System.Collections.IList.RemoveAt(int index)
		{
		}

		[Token(Token = "0x6000AC2")]
		[Address(RVA = "0xBA2F50", Offset = "0xBA2F50", VA = "0xBA2F50", Slot = "43")]
		private IDictionaryEnumerator System.Collections.Specialized.IOrderedDictionary.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000AC3")]
		[Address(RVA = "0xBA3074", Offset = "0xBA3074", VA = "0xBA3074", Slot = "44")]
		private void System.Collections.Specialized.IOrderedDictionary.Insert(int idx, object key, object value)
		{
		}

		[Token(Token = "0x6000AC4")]
		[Address(RVA = "0xBA31C0", Offset = "0xBA31C0", VA = "0xBA31C0", Slot = "45")]
		private void System.Collections.Specialized.IOrderedDictionary.RemoveAt(int idx)
		{
		}

		[Token(Token = "0x6000AC5")]
		[Address(RVA = "0xB9F870", Offset = "0xB9F870", VA = "0xB9F870")]
		private ICollection EnsureCollection()
		{
			return null;
		}

		[Token(Token = "0x6000AC6")]
		[Address(RVA = "0xB9FBBC", Offset = "0xB9FBBC", VA = "0xB9FBBC")]
		private IDictionary EnsureDictionary()
		{
			return null;
		}

		[Token(Token = "0x6000AC7")]
		[Address(RVA = "0xBA06A0", Offset = "0xBA06A0", VA = "0xBA06A0")]
		private IList EnsureList()
		{
			return null;
		}

		[Token(Token = "0x6000AC8")]
		[Address(RVA = "0xBA0A04", Offset = "0xBA0A04", VA = "0xBA0A04")]
		private JsonData ToJsonData(object obj)
		{
			return null;
		}

		[Token(Token = "0x6000AC9")]
		[Address(RVA = "0xBA336C", Offset = "0xBA336C", VA = "0xBA336C")]
		private static void WriteJson(IJsonWrapper obj, JsonWriter writer)
		{
		}

		[Token(Token = "0x6000ACA")]
		[Address(RVA = "0xBA2A00", Offset = "0xBA2A00", VA = "0xBA2A00")]
		public int Add(object value)
		{
			return default(int);
		}

		[Token(Token = "0x6000ACB")]
		[Address(RVA = "0xBA4850", Offset = "0xBA4850", VA = "0xBA4850")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000ACC")]
		[Address(RVA = "0xBA4960", Offset = "0xBA4960", VA = "0xBA4960", Slot = "57")]
		public bool Equals(JsonData x)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ACD")]
		[Address(RVA = "0xBA4A4C", Offset = "0xBA4A4C", VA = "0xBA4A4C", Slot = "14")]
		public JsonType GetJsonType()
		{
			return default(JsonType);
		}

		[Token(Token = "0x6000ACE")]
		[Address(RVA = "0xBA4A54", Offset = "0xBA4A54", VA = "0xBA4A54", Slot = "20")]
		public void SetJsonType(JsonType type)
		{
		}

		[Token(Token = "0x6000ACF")]
		[Address(RVA = "0xBA28F8", Offset = "0xBA28F8", VA = "0xBA28F8")]
		public string ToJson()
		{
			return null;
		}

		[Token(Token = "0x6000AD0")]
		[Address(RVA = "0xBA29CC", Offset = "0xBA29CC", VA = "0xBA29CC")]
		public void ToJson(JsonWriter writer)
		{
		}

		[Token(Token = "0x6000AD1")]
		[Address(RVA = "0xBA4C68", Offset = "0xBA4C68", VA = "0xBA4C68", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000188")]
	internal class OrderedDictionaryEnumerator : IDictionaryEnumerator, IEnumerator
	{
		[Token(Token = "0x400096F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IEnumerator<KeyValuePair<string, JsonData>> list_enumerator;

		[Token(Token = "0x17000154")]
		public object Current
		{
			[Token(Token = "0x6000AD2")]
			[Address(RVA = "0xBA4D5C", Offset = "0xBA4D5C", VA = "0xBA4D5C", Slot = "8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000155")]
		public DictionaryEntry Entry
		{
			[Token(Token = "0x6000AD3")]
			[Address(RVA = "0xBA4DC0", Offset = "0xBA4DC0", VA = "0xBA4DC0", Slot = "6")]
			get
			{
				return default(DictionaryEntry);
			}
		}

		[Token(Token = "0x17000156")]
		public object Key
		{
			[Token(Token = "0x6000AD4")]
			[Address(RVA = "0xBA4EA8", Offset = "0xBA4EA8", VA = "0xBA4EA8", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000157")]
		public object Value
		{
			[Token(Token = "0x6000AD5")]
			[Address(RVA = "0xBA4F54", Offset = "0xBA4F54", VA = "0xBA4F54", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000AD6")]
		[Address(RVA = "0xBA3044", Offset = "0xBA3044", VA = "0xBA3044")]
		public OrderedDictionaryEnumerator(IEnumerator<KeyValuePair<string, JsonData>> enumerator)
		{
		}

		[Token(Token = "0x6000AD7")]
		[Address(RVA = "0xBA5008", Offset = "0xBA5008", VA = "0xBA5008", Slot = "7")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000AD8")]
		[Address(RVA = "0xBA50A8", Offset = "0xBA50A8", VA = "0xBA50A8", Slot = "9")]
		public void Reset()
		{
		}
	}
	[Token(Token = "0x2000189")]
	public class JsonException : ApplicationException
	{
		[Token(Token = "0x6000AD9")]
		[Address(RVA = "0xBA514C", Offset = "0xBA514C", VA = "0xBA514C")]
		public JsonException()
		{
		}

		[Token(Token = "0x6000ADA")]
		[Address(RVA = "0xBA5154", Offset = "0xBA5154", VA = "0xBA5154")]
		internal JsonException(ParserToken token)
		{
		}

		[Token(Token = "0x6000ADB")]
		[Address(RVA = "0xBA51F0", Offset = "0xBA51F0", VA = "0xBA51F0")]
		internal JsonException(ParserToken token, Exception inner_exception)
		{
		}

		[Token(Token = "0x6000ADC")]
		[Address(RVA = "0xBA5294", Offset = "0xBA5294", VA = "0xBA5294")]
		internal JsonException(int c)
		{
		}

		[Token(Token = "0x6000ADD")]
		[Address(RVA = "0xBA5330", Offset = "0xBA5330", VA = "0xBA5330")]
		internal JsonException(int c, Exception inner_exception)
		{
		}

		[Token(Token = "0x6000ADE")]
		[Address(RVA = "0xBA53D4", Offset = "0xBA53D4", VA = "0xBA53D4")]
		public JsonException(string message)
		{
		}

		[Token(Token = "0x6000ADF")]
		[Address(RVA = "0xBA53DC", Offset = "0xBA53DC", VA = "0xBA53DC")]
		public JsonException(string message, Exception inner_exception)
		{
		}
	}
	[Token(Token = "0x200018A")]
	internal struct PropertyMetadata
	{
		[Token(Token = "0x4000970")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public MemberInfo Info;

		[Token(Token = "0x4000971")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool IsField;

		[Token(Token = "0x4000972")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Type Type;
	}
	[Token(Token = "0x200018B")]
	internal struct ArrayMetadata
	{
		[Token(Token = "0x4000973")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Type element_type;

		[Token(Token = "0x4000974")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private bool is_array;

		[Token(Token = "0x4000975")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
		private bool is_list;

		[Token(Token = "0x17000158")]
		public Type ElementType
		{
			[Token(Token = "0x6000AE0")]
			[Address(RVA = "0xBA53E4", Offset = "0xBA53E4", VA = "0xBA53E4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000AE1")]
			[Address(RVA = "0xBA548C", Offset = "0xBA548C", VA = "0xBA548C")]
			set
			{
			}
		}

		[Token(Token = "0x17000159")]
		public bool IsArray
		{
			[Token(Token = "0x6000AE2")]
			[Address(RVA = "0xBA5494", Offset = "0xBA5494", VA = "0xBA5494")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000AE3")]
			[Address(RVA = "0xBA549C", Offset = "0xBA549C", VA = "0xBA549C")]
			set
			{
			}
		}

		[Token(Token = "0x1700015A")]
		public bool IsList
		{
			[Token(Token = "0x6000AE4")]
			[Address(RVA = "0xBA54A8", Offset = "0xBA54A8", VA = "0xBA54A8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000AE5")]
			[Address(RVA = "0xBA54B0", Offset = "0xBA54B0", VA = "0xBA54B0")]
			set
			{
			}
		}
	}
	[Token(Token = "0x200018C")]
	internal struct ObjectMetadata
	{
		[Token(Token = "0x4000976")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Type element_type;

		[Token(Token = "0x4000977")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private bool is_dictionary;

		[Token(Token = "0x4000978")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IDictionary<string, PropertyMetadata> properties;

		[Token(Token = "0x1700015B")]
		public Type ElementType
		{
			[Token(Token = "0x6000AE6")]
			[Address(RVA = "0xBA54BC", Offset = "0xBA54BC", VA = "0xBA54BC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000AE7")]
			[Address(RVA = "0xBA5564", Offset = "0xBA5564", VA = "0xBA5564")]
			set
			{
			}
		}

		[Token(Token = "0x1700015C")]
		public bool IsDictionary
		{
			[Token(Token = "0x6000AE8")]
			[Address(RVA = "0xBA556C", Offset = "0xBA556C", VA = "0xBA556C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000AE9")]
			[Address(RVA = "0xBA5574", Offset = "0xBA5574", VA = "0xBA5574")]
			set
			{
			}
		}

		[Token(Token = "0x1700015D")]
		public IDictionary<string, PropertyMetadata> Properties
		{
			[Token(Token = "0x6000AEA")]
			[Address(RVA = "0xBA5580", Offset = "0xBA5580", VA = "0xBA5580")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000AEB")]
			[Address(RVA = "0xBA5588", Offset = "0xBA5588", VA = "0xBA5588")]
			set
			{
			}
		}
	}
	[Token(Token = "0x200018D")]
	internal delegate void ExporterFunc(object obj, JsonWriter writer);
	[Token(Token = "0x200018E")]
	public delegate void ExporterFunc<T>(T obj, JsonWriter writer);
	[Token(Token = "0x200018F")]
	internal delegate object ImporterFunc(object input);
	[Token(Token = "0x2000190")]
	public delegate TValue ImporterFunc<TJson, TValue>(TJson input);
	[Token(Token = "0x2000191")]
	public delegate IJsonWrapper WrapperFactory();
	[Token(Token = "0x2000192")]
	public class JsonMapper
	{
		[Token(Token = "0x4000979")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int max_nesting_depth;

		[Token(Token = "0x400097A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static IFormatProvider datetime_format;

		[Token(Token = "0x400097B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static IDictionary<Type, ExporterFunc> base_exporters_table;

		[Token(Token = "0x400097C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static IDictionary<Type, ExporterFunc> custom_exporters_table;

		[Token(Token = "0x400097D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static IDictionary<Type, IDictionary<Type, ImporterFunc>> base_importers_table;

		[Token(Token = "0x400097E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static IDictionary<Type, IDictionary<Type, ImporterFunc>> custom_importers_table;

		[Token(Token = "0x400097F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static IDictionary<Type, ArrayMetadata> array_metadata;

		[Token(Token = "0x4000980")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static readonly object array_metadata_lock;

		[Token(Token = "0x4000981")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private static IDictionary<Type, IDictionary<Type, MethodInfo>> conv_ops;

		[Token(Token = "0x4000982")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private static readonly object conv_ops_lock;

		[Token(Token = "0x4000983")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private static IDictionary<Type, ObjectMetadata> object_metadata;

		[Token(Token = "0x4000984")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private static readonly object object_metadata_lock;

		[Token(Token = "0x4000985")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private static IDictionary<Type, IList<PropertyMetadata>> type_properties;

		[Token(Token = "0x4000986")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private static readonly object type_properties_lock;

		[Token(Token = "0x4000987")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private static JsonWriter static_writer;

		[Token(Token = "0x4000988")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private static readonly object static_writer_lock;

		[Token(Token = "0x6000B00")]
		[Address(RVA = "0xBA59A0", Offset = "0xBA59A0", VA = "0xBA59A0")]
		static JsonMapper()
		{
		}

		[Token(Token = "0x6000B01")]
		[Address(RVA = "0xBA78BC", Offset = "0xBA78BC", VA = "0xBA78BC")]
		private static void AddArrayMetadata(Type type)
		{
		}

		[Token(Token = "0x6000B02")]
		[Address(RVA = "0xBA7D44", Offset = "0xBA7D44", VA = "0xBA7D44")]
		private static void AddObjectMetadata(Type type)
		{
		}

		[Token(Token = "0x6000B03")]
		[Address(RVA = "0xBA84C0", Offset = "0xBA84C0", VA = "0xBA84C0")]
		private static void AddTypeProperties(Type type)
		{
		}

		[Token(Token = "0x6000B04")]
		[Address(RVA = "0xBA89FC", Offset = "0xBA89FC", VA = "0xBA89FC")]
		private static MethodInfo GetConvOp(Type t1, Type t2)
		{
			return null;
		}

		[Token(Token = "0x6000B05")]
		[Address(RVA = "0xBA9288", Offset = "0xBA9288", VA = "0xBA9288")]
		private static object ReadValue(Type inst_type, JsonReader reader)
		{
			return null;
		}

		[Token(Token = "0x6000B06")]
		[Address(RVA = "0xBAA5F8", Offset = "0xBAA5F8", VA = "0xBAA5F8")]
		private static IJsonWrapper ReadValue(WrapperFactory factory, JsonReader reader)
		{
			return null;
		}

		[Token(Token = "0x6000B07")]
		[Address(RVA = "0xBA5E88", Offset = "0xBA5E88", VA = "0xBA5E88")]
		private static void RegisterBaseExporters()
		{
		}

		[Token(Token = "0x6000B08")]
		[Address(RVA = "0xBA6BAC", Offset = "0xBA6BAC", VA = "0xBA6BAC")]
		private static void RegisterBaseImporters()
		{
		}

		[Token(Token = "0x6000B09")]
		[Address(RVA = "0xBAAC50", Offset = "0xBAAC50", VA = "0xBAAC50")]
		private static void RegisterImporter(IDictionary<Type, IDictionary<Type, ImporterFunc>> table, Type json_type, Type value_type, ImporterFunc importer)
		{
		}

		[Token(Token = "0x6000B0A")]
		[Address(RVA = "0xBAAE94", Offset = "0xBAAE94", VA = "0xBAAE94")]
		private static void WriteValue(object obj, JsonWriter writer, bool writer_is_private, int depth)
		{
		}

		[Token(Token = "0x6000B0B")]
		[Address(RVA = "0xBAC670", Offset = "0xBAC670", VA = "0xBAC670")]
		public static string ToJson(object obj)
		{
			return null;
		}

		[Token(Token = "0x6000B0C")]
		[Address(RVA = "0xBAC8D8", Offset = "0xBAC8D8", VA = "0xBAC8D8")]
		public static void ToJson(object obj, JsonWriter writer)
		{
		}

		[Token(Token = "0x6000B0D")]
		[Address(RVA = "0xBAC944", Offset = "0xBAC944", VA = "0xBAC944")]
		public static JsonData ToObject(JsonReader reader)
		{
			return null;
		}

		[Token(Token = "0x6000B0E")]
		[Address(RVA = "0xBACAFC", Offset = "0xBACAFC", VA = "0xBACAFC")]
		public static JsonData ToObject(TextReader reader)
		{
			return null;
		}

		[Token(Token = "0x6000B0F")]
		[Address(RVA = "0xBACC88", Offset = "0xBACC88", VA = "0xBACC88")]
		public static JsonData ToObject(string json)
		{
			return null;
		}

		[Token(Token = "0x6000B10")]
		public static T ToObject<T>(JsonReader reader)
		{
			return (T)null;
		}

		[Token(Token = "0x6000B11")]
		public static T ToObject<T>(TextReader reader)
		{
			return (T)null;
		}

		[Token(Token = "0x6000B12")]
		public static T ToObject<T>(string json)
		{
			return (T)null;
		}

		[Token(Token = "0x6000B13")]
		[Address(RVA = "0xBACA98", Offset = "0xBACA98", VA = "0xBACA98")]
		public static IJsonWrapper ToWrapper(WrapperFactory factory, JsonReader reader)
		{
			return null;
		}

		[Token(Token = "0x6000B14")]
		[Address(RVA = "0xBACDDC", Offset = "0xBACDDC", VA = "0xBACDDC")]
		public static IJsonWrapper ToWrapper(WrapperFactory factory, string json)
		{
			return null;
		}

		[Token(Token = "0x6000B15")]
		public static void RegisterExporter<T>(ExporterFunc<T> exporter)
		{
		}

		[Token(Token = "0x6000B16")]
		public static void RegisterImporter<TJson, TValue>(ImporterFunc<TJson, TValue> importer)
		{
		}

		[Token(Token = "0x6000B17")]
		[Address(RVA = "0xBACEE8", Offset = "0xBACEE8", VA = "0xBACEE8")]
		public static void UnregisterExporters()
		{
		}

		[Token(Token = "0x6000B18")]
		[Address(RVA = "0xBACFB4", Offset = "0xBACFB4", VA = "0xBACFB4")]
		public static void UnregisterImporters()
		{
		}

		[Token(Token = "0x6000B19")]
		[Address(RVA = "0xBAD080", Offset = "0xBAD080", VA = "0xBAD080")]
		public JsonMapper()
		{
		}
	}
	[Token(Token = "0x2000196")]
	public enum JsonToken
	{
		[Token(Token = "0x40009A7")]
		None,
		[Token(Token = "0x40009A8")]
		ObjectStart,
		[Token(Token = "0x40009A9")]
		PropertyName,
		[Token(Token = "0x40009AA")]
		ObjectEnd,
		[Token(Token = "0x40009AB")]
		ArrayStart,
		[Token(Token = "0x40009AC")]
		ArrayEnd,
		[Token(Token = "0x40009AD")]
		Int,
		[Token(Token = "0x40009AE")]
		Long,
		[Token(Token = "0x40009AF")]
		Double,
		[Token(Token = "0x40009B0")]
		String,
		[Token(Token = "0x40009B1")]
		Boolean,
		[Token(Token = "0x40009B2")]
		Null
	}
	[Token(Token = "0x2000197")]
	public class JsonReader
	{
		[Token(Token = "0x40009B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static IDictionary<int, IDictionary<int, int[]>> parse_table;

		[Token(Token = "0x40009B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Stack<int> automaton_stack;

		[Token(Token = "0x40009B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int current_input;

		[Token(Token = "0x40009B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private int current_symbol;

		[Token(Token = "0x40009B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool end_of_json;

		[Token(Token = "0x40009B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		private bool end_of_input;

		[Token(Token = "0x40009B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Lexer lexer;

		[Token(Token = "0x40009BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool parser_in_string;

		[Token(Token = "0x40009BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool parser_return;

		[Token(Token = "0x40009BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		private bool read_started;

		[Token(Token = "0x40009BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private TextReader reader;

		[Token(Token = "0x40009BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool reader_is_owned;

		[Token(Token = "0x40009BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private object token_value;

		[Token(Token = "0x40009C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private JsonToken token;

		[Token(Token = "0x1700015E")]
		public bool AllowComments
		{
			[Token(Token = "0x6000B3A")]
			[Address(RVA = "0xBAE45C", Offset = "0xBAE45C", VA = "0xBAE45C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000B3B")]
			[Address(RVA = "0xBAE478", Offset = "0xBAE478", VA = "0xBAE478")]
			set
			{
			}
		}

		[Token(Token = "0x1700015F")]
		public bool AllowSingleQuotedStrings
		{
			[Token(Token = "0x6000B3C")]
			[Address(RVA = "0xBAE498", Offset = "0xBAE498", VA = "0xBAE498")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000B3D")]
			[Address(RVA = "0xBAE4B4", Offset = "0xBAE4B4", VA = "0xBAE4B4")]
			set
			{
			}
		}

		[Token(Token = "0x17000160")]
		public bool EndOfInput
		{
			[Token(Token = "0x6000B3E")]
			[Address(RVA = "0xBAE4D4", Offset = "0xBAE4D4", VA = "0xBAE4D4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000161")]
		public bool EndOfJson
		{
			[Token(Token = "0x6000B3F")]
			[Address(RVA = "0xBAE4DC", Offset = "0xBAE4DC", VA = "0xBAE4DC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000162")]
		public JsonToken Token
		{
			[Token(Token = "0x6000B40")]
			[Address(RVA = "0xBAE4E4", Offset = "0xBAE4E4", VA = "0xBAE4E4")]
			get
			{
				return default(JsonToken);
			}
		}

		[Token(Token = "0x17000163")]
		public object Value
		{
			[Token(Token = "0x6000B41")]
			[Address(RVA = "0xBAE4EC", Offset = "0xBAE4EC", VA = "0xBAE4EC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B42")]
		[Address(RVA = "0xBAE4F4", Offset = "0xBAE4F4", VA = "0xBAE4F4")]
		static JsonReader()
		{
		}

		[Token(Token = "0x6000B43")]
		[Address(RVA = "0xBACE70", Offset = "0xBACE70", VA = "0xBACE70")]
		public JsonReader(string json_text)
		{
		}

		[Token(Token = "0x6000B44")]
		[Address(RVA = "0xBACC80", Offset = "0xBACC80", VA = "0xBACC80")]
		public JsonReader(TextReader reader)
		{
		}

		[Token(Token = "0x6000B45")]
		[Address(RVA = "0xBAEBD4", Offset = "0xBAEBD4", VA = "0xBAEBD4")]
		private JsonReader(TextReader reader, bool owned)
		{
		}

		[Token(Token = "0x6000B46")]
		[Address(RVA = "0xBAE4F8", Offset = "0xBAE4F8", VA = "0xBAE4F8")]
		private static void PopulateParseTable()
		{
		}

		[Token(Token = "0x6000B47")]
		[Address(RVA = "0xBAEF84", Offset = "0xBAEF84", VA = "0xBAEF84")]
		private static void TableAddCol(ParserToken row, int col, params int[] symbols)
		{
		}

		[Token(Token = "0x6000B48")]
		[Address(RVA = "0xBAEE6C", Offset = "0xBAEE6C", VA = "0xBAEE6C")]
		private static void TableAddRow(ParserToken rule)
		{
		}

		[Token(Token = "0x6000B49")]
		[Address(RVA = "0xBAF0E4", Offset = "0xBAF0E4", VA = "0xBAF0E4")]
		private void ProcessNumber(string number)
		{
		}

		[Token(Token = "0x6000B4A")]
		[Address(RVA = "0xBAF254", Offset = "0xBAF254", VA = "0xBAF254")]
		private void ProcessSymbol()
		{
		}

		[Token(Token = "0x6000B4B")]
		[Address(RVA = "0xBAF40C", Offset = "0xBAF40C", VA = "0xBAF40C")]
		private bool ReadToken()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B4C")]
		[Address(RVA = "0xBAF634", Offset = "0xBAF634", VA = "0xBAF634")]
		public void Close()
		{
		}

		[Token(Token = "0x6000B4D")]
		[Address(RVA = "0xBAA184", Offset = "0xBAA184", VA = "0xBAA184")]
		public bool Read()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000198")]
	internal enum Condition
	{
		[Token(Token = "0x40009C2")]
		InArray,
		[Token(Token = "0x40009C3")]
		InObject,
		[Token(Token = "0x40009C4")]
		NotAProperty,
		[Token(Token = "0x40009C5")]
		Property,
		[Token(Token = "0x40009C6")]
		Value
	}
	[Token(Token = "0x2000199")]
	internal class WriterContext
	{
		[Token(Token = "0x40009C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int Count;

		[Token(Token = "0x40009C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool InArray;

		[Token(Token = "0x40009C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
		public bool InObject;

		[Token(Token = "0x40009CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16")]
		public bool ExpectingValue;

		[Token(Token = "0x40009CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int Padding;

		[Token(Token = "0x6000B4E")]
		[Address(RVA = "0xBAF688", Offset = "0xBAF688", VA = "0xBAF688")]
		public WriterContext()
		{
		}
	}
	[Token(Token = "0x200019A")]
	public class JsonWriter
	{
		[Token(Token = "0x40009CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static NumberFormatInfo number_format;

		[Token(Token = "0x40009CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private WriterContext context;

		[Token(Token = "0x40009CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Stack<WriterContext> ctx_stack;

		[Token(Token = "0x40009CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool has_reached_end;

		[Token(Token = "0x40009D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private char[] hex_seq;

		[Token(Token = "0x40009D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int indentation;

		[Token(Token = "0x40009D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int indent_value;

		[Token(Token = "0x40009D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private StringBuilder inst_string_builder;

		[Token(Token = "0x40009D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool pretty_print;

		[Token(Token = "0x40009D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		private bool validate;

		[Token(Token = "0x40009D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private TextWriter writer;

		[Token(Token = "0x17000164")]
		public int IndentValue
		{
			[Token(Token = "0x6000B4F")]
			[Address(RVA = "0xBAF690", Offset = "0xBAF690", VA = "0xBAF690")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000B50")]
			[Address(RVA = "0xBAF698", Offset = "0xBAF698", VA = "0xBAF698")]
			set
			{
			}
		}

		[Token(Token = "0x17000165")]
		public bool PrettyPrint
		{
			[Token(Token = "0x6000B51")]
			[Address(RVA = "0xBAF6AC", Offset = "0xBAF6AC", VA = "0xBAF6AC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000B52")]
			[Address(RVA = "0xBAF6B4", Offset = "0xBAF6B4", VA = "0xBAF6B4")]
			set
			{
			}
		}

		[Token(Token = "0x17000166")]
		public TextWriter TextWriter
		{
			[Token(Token = "0x6000B53")]
			[Address(RVA = "0xBAF6C0", Offset = "0xBAF6C0", VA = "0xBAF6C0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000167")]
		public bool Validate
		{
			[Token(Token = "0x6000B54")]
			[Address(RVA = "0xBAF6C8", Offset = "0xBAF6C8", VA = "0xBAF6C8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000B55")]
			[Address(RVA = "0xBAF6D0", Offset = "0xBAF6D0", VA = "0xBAF6D0")]
			set
			{
			}
		}

		[Token(Token = "0x6000B56")]
		[Address(RVA = "0xBAF6DC", Offset = "0xBAF6DC", VA = "0xBAF6DC")]
		static JsonWriter()
		{
		}

		[Token(Token = "0x6000B57")]
		[Address(RVA = "0xBA5DBC", Offset = "0xBA5DBC", VA = "0xBA5DBC")]
		public JsonWriter()
		{
		}

		[Token(Token = "0x6000B58")]
		[Address(RVA = "0xBAF86C", Offset = "0xBAF86C", VA = "0xBAF86C")]
		public JsonWriter(StringBuilder sb)
		{
		}

		[Token(Token = "0x6000B59")]
		[Address(RVA = "0xBA4BE0", Offset = "0xBA4BE0", VA = "0xBA4BE0")]
		public JsonWriter(TextWriter writer)
		{
		}

		[Token(Token = "0x6000B5A")]
		[Address(RVA = "0xBAF8E0", Offset = "0xBAF8E0", VA = "0xBAF8E0")]
		private void DoValidation(Condition cond)
		{
		}

		[Token(Token = "0x6000B5B")]
		[Address(RVA = "0xBAF738", Offset = "0xBAF738", VA = "0xBAF738")]
		private void Init()
		{
		}

		[Token(Token = "0x6000B5C")]
		[Address(RVA = "0xBAFA7C", Offset = "0xBAFA7C", VA = "0xBAFA7C")]
		private static void IntToHex(int n, char[] hex)
		{
		}

		[Token(Token = "0x6000B5D")]
		[Address(RVA = "0xBAFAF4", Offset = "0xBAFAF4", VA = "0xBAFAF4")]
		private void Indent()
		{
		}

		[Token(Token = "0x6000B5E")]
		[Address(RVA = "0xBAFB0C", Offset = "0xBAFB0C", VA = "0xBAFB0C")]
		private void Put(string str)
		{
		}

		[Token(Token = "0x6000B5F")]
		[Address(RVA = "0xBAFB98", Offset = "0xBAFB98", VA = "0xBAFB98")]
		private void PutNewline()
		{
		}

		[Token(Token = "0x6000B60")]
		[Address(RVA = "0xBAFBA0", Offset = "0xBAFBA0", VA = "0xBAFBA0")]
		private void PutNewline(bool add_comma)
		{
		}

		[Token(Token = "0x6000B61")]
		[Address(RVA = "0xBAFC28", Offset = "0xBAFC28", VA = "0xBAFC28")]
		private void PutString(string str)
		{
		}

		[Token(Token = "0x6000B62")]
		[Address(RVA = "0xBAFF30", Offset = "0xBAFF30", VA = "0xBAFF30")]
		private void Unindent()
		{
		}

		[Token(Token = "0x6000B63")]
		[Address(RVA = "0xBAFF48", Offset = "0xBAFF48", VA = "0xBAFF48", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000B64")]
		[Address(RVA = "0xBAC7E8", Offset = "0xBAC7E8", VA = "0xBAC7E8")]
		public void Reset()
		{
		}

		[Token(Token = "0x6000B65")]
		[Address(RVA = "0xBA3FD4", Offset = "0xBA3FD4", VA = "0xBA3FD4")]
		public void Write(bool boolean)
		{
		}

		[Token(Token = "0x6000B66")]
		[Address(RVA = "0xBAD3D0", Offset = "0xBAD3D0", VA = "0xBAD3D0")]
		public void Write(decimal number)
		{
		}

		[Token(Token = "0x6000B67")]
		[Address(RVA = "0xBA406C", Offset = "0xBA406C", VA = "0xBA406C")]
		public void Write(double number)
		{
		}

		[Token(Token = "0x6000B68")]
		[Address(RVA = "0xBA41A8", Offset = "0xBA41A8", VA = "0xBA41A8")]
		public void Write(int number)
		{
		}

		[Token(Token = "0x6000B69")]
		[Address(RVA = "0xBA427C", Offset = "0xBA427C", VA = "0xBA427C")]
		public void Write(long number)
		{
		}

		[Token(Token = "0x6000B6A")]
		[Address(RVA = "0xBA3F48", Offset = "0xBA3F48", VA = "0xBA3F48")]
		public void Write(string str)
		{
		}

		[Token(Token = "0x6000B6B")]
		[Address(RVA = "0xBAC59C", Offset = "0xBAC59C", VA = "0xBAC59C")]
		public void Write(ulong number)
		{
		}

		[Token(Token = "0x6000B6C")]
		[Address(RVA = "0xBA4448", Offset = "0xBA4448", VA = "0xBA4448")]
		public void WriteArrayEnd()
		{
		}

		[Token(Token = "0x6000B6D")]
		[Address(RVA = "0xBA4350", Offset = "0xBA4350", VA = "0xBA4350")]
		public void WriteArrayStart()
		{
		}

		[Token(Token = "0x6000B6E")]
		[Address(RVA = "0xBA4750", Offset = "0xBA4750", VA = "0xBA4750")]
		public void WriteObjectEnd()
		{
		}

		[Token(Token = "0x6000B6F")]
		[Address(RVA = "0xBA4548", Offset = "0xBA4548", VA = "0xBA4548")]
		public void WriteObjectStart()
		{
		}

		[Token(Token = "0x6000B70")]
		[Address(RVA = "0xBA4640", Offset = "0xBA4640", VA = "0xBA4640")]
		public void WritePropertyName(string property_name)
		{
		}
	}
	[Token(Token = "0x200019B")]
	internal class FsmContext
	{
		[Token(Token = "0x40009D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool Return;

		[Token(Token = "0x40009D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int NextState;

		[Token(Token = "0x40009D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Lexer L;

		[Token(Token = "0x40009DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int StateStack;

		[Token(Token = "0x6000B71")]
		[Address(RVA = "0xBAFFB0", Offset = "0xBAFFB0", VA = "0xBAFFB0")]
		public FsmContext()
		{
		}
	}
	[Token(Token = "0x200019C")]
	internal class Lexer
	{
		[Token(Token = "0x200019D")]
		private delegate bool StateHandler(FsmContext ctx);

		[Token(Token = "0x40009DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int[] fsm_return_table;

		[Token(Token = "0x40009DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static StateHandler[] fsm_handler_table;

		[Token(Token = "0x40009DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool allow_comments;

		[Token(Token = "0x40009DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		private bool allow_single_quoted_strings;

		[Token(Token = "0x40009DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		private bool end_of_input;

		[Token(Token = "0x40009E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private FsmContext fsm_context;

		[Token(Token = "0x40009E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int input_buffer;

		[Token(Token = "0x40009E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int input_char;

		[Token(Token = "0x40009E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private TextReader reader;

		[Token(Token = "0x40009E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int state;

		[Token(Token = "0x40009E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private StringBuilder string_buffer;

		[Token(Token = "0x40009E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private string string_value;

		[Token(Token = "0x40009E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int token;

		[Token(Token = "0x40009E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private int unichar;

		[Token(Token = "0x17000168")]
		public bool AllowComments
		{
			[Token(Token = "0x6000B72")]
			[Address(RVA = "0xBAFFB8", Offset = "0xBAFFB8", VA = "0xBAFFB8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000B73")]
			[Address(RVA = "0xBAFFC0", Offset = "0xBAFFC0", VA = "0xBAFFC0")]
			set
			{
			}
		}

		[Token(Token = "0x17000169")]
		public bool AllowSingleQuotedStrings
		{
			[Token(Token = "0x6000B74")]
			[Address(RVA = "0xBAFFCC", Offset = "0xBAFFCC", VA = "0xBAFFCC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000B75")]
			[Address(RVA = "0xBAFFD4", Offset = "0xBAFFD4", VA = "0xBAFFD4")]
			set
			{
			}
		}

		[Token(Token = "0x1700016A")]
		public bool EndOfInput
		{
			[Token(Token = "0x6000B76")]
			[Address(RVA = "0xBAFFE0", Offset = "0xBAFFE0", VA = "0xBAFFE0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700016B")]
		public int Token
		{
			[Token(Token = "0x6000B77")]
			[Address(RVA = "0xBAFFE8", Offset = "0xBAFFE8", VA = "0xBAFFE8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700016C")]
		public string StringValue
		{
			[Token(Token = "0x6000B78")]
			[Address(RVA = "0xBAFFF0", Offset = "0xBAFFF0", VA = "0xBAFFF0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B79")]
		[Address(RVA = "0xBAFFF8", Offset = "0xBAFFF8", VA = "0xBAFFF8")]
		static Lexer()
		{
		}

		[Token(Token = "0x6000B7A")]
		[Address(RVA = "0xBAED6C", Offset = "0xBAED6C", VA = "0xBAED6C")]
		public Lexer(TextReader reader)
		{
		}

		[Token(Token = "0x6000B7B")]
		[Address(RVA = "0xBB0B94", Offset = "0xBB0B94", VA = "0xBB0B94")]
		private static int HexValue(int digit)
		{
			return default(int);
		}

		[Token(Token = "0x6000B7C")]
		[Address(RVA = "0xBAFFFC", Offset = "0xBAFFFC", VA = "0xBAFFFC")]
		private static void PopulateFsmTables()
		{
		}

		[Token(Token = "0x6000B7D")]
		[Address(RVA = "0xBB0D54", Offset = "0xBB0D54", VA = "0xBB0D54")]
		private static char ProcessEscChar(int esc_char)
		{
			return default(char);
		}

		[Token(Token = "0x6000B7E")]
		[Address(RVA = "0xBB0E44", Offset = "0xBB0E44", VA = "0xBB0E44")]
		private static bool State1(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B7F")]
		[Address(RVA = "0xBB1048", Offset = "0xBB1048", VA = "0xBB1048")]
		private static bool State2(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B80")]
		[Address(RVA = "0xBB10EC", Offset = "0xBB10EC", VA = "0xBB10EC")]
		private static bool State3(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B81")]
		[Address(RVA = "0xBB1228", Offset = "0xBB1228", VA = "0xBB1228")]
		private static bool State4(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B82")]
		[Address(RVA = "0xBB1324", Offset = "0xBB1324", VA = "0xBB1324")]
		private static bool State5(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B83")]
		[Address(RVA = "0xBB13A4", Offset = "0xBB13A4", VA = "0xBB13A4")]
		private static bool State6(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B84")]
		[Address(RVA = "0xBB14A0", Offset = "0xBB14A0", VA = "0xBB14A0")]
		private static bool State7(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B85")]
		[Address(RVA = "0xBB1534", Offset = "0xBB1534", VA = "0xBB1534")]
		private static bool State8(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B86")]
		[Address(RVA = "0xBB15F0", Offset = "0xBB15F0", VA = "0xBB15F0")]
		private static bool State9(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B87")]
		[Address(RVA = "0xBB165C", Offset = "0xBB165C", VA = "0xBB165C")]
		private static bool State10(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B88")]
		[Address(RVA = "0xBB16C8", Offset = "0xBB16C8", VA = "0xBB16C8")]
		private static bool State11(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B89")]
		[Address(RVA = "0xBB1734", Offset = "0xBB1734", VA = "0xBB1734")]
		private static bool State12(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B8A")]
		[Address(RVA = "0xBB17A0", Offset = "0xBB17A0", VA = "0xBB17A0")]
		private static bool State13(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B8B")]
		[Address(RVA = "0xBB180C", Offset = "0xBB180C", VA = "0xBB180C")]
		private static bool State14(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B8C")]
		[Address(RVA = "0xBB1878", Offset = "0xBB1878", VA = "0xBB1878")]
		private static bool State15(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B8D")]
		[Address(RVA = "0xBB18E4", Offset = "0xBB18E4", VA = "0xBB18E4")]
		private static bool State16(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B8E")]
		[Address(RVA = "0xBB1950", Offset = "0xBB1950", VA = "0xBB1950")]
		private static bool State17(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B8F")]
		[Address(RVA = "0xBB19BC", Offset = "0xBB19BC", VA = "0xBB19BC")]
		private static bool State18(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B90")]
		[Address(RVA = "0xBB1A28", Offset = "0xBB1A28", VA = "0xBB1A28")]
		private static bool State19(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B91")]
		[Address(RVA = "0xBB1AD0", Offset = "0xBB1AD0", VA = "0xBB1AD0")]
		private static bool State20(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B92")]
		[Address(RVA = "0xBB1B3C", Offset = "0xBB1B3C", VA = "0xBB1B3C")]
		private static bool State21(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B93")]
		[Address(RVA = "0xBB1C74", Offset = "0xBB1C74", VA = "0xBB1C74")]
		private static bool State22(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B94")]
		[Address(RVA = "0xBB1DF0", Offset = "0xBB1DF0", VA = "0xBB1DF0")]
		private static bool State23(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B95")]
		[Address(RVA = "0xBB1E98", Offset = "0xBB1E98", VA = "0xBB1E98")]
		private static bool State24(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B96")]
		[Address(RVA = "0xBB1F0C", Offset = "0xBB1F0C", VA = "0xBB1F0C")]
		private static bool State25(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B97")]
		[Address(RVA = "0xBB1F88", Offset = "0xBB1F88", VA = "0xBB1F88")]
		private static bool State26(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B98")]
		[Address(RVA = "0xBB1FF0", Offset = "0xBB1FF0", VA = "0xBB1FF0")]
		private static bool State27(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B99")]
		[Address(RVA = "0xBB2058", Offset = "0xBB2058", VA = "0xBB2058")]
		private static bool State28(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B9A")]
		[Address(RVA = "0xBB101C", Offset = "0xBB101C", VA = "0xBB101C")]
		private bool GetChar()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B9B")]
		[Address(RVA = "0xBB20D0", Offset = "0xBB20D0", VA = "0xBB20D0")]
		private int NextChar()
		{
			return default(int);
		}

		[Token(Token = "0x6000B9C")]
		[Address(RVA = "0xBAF460", Offset = "0xBAF460", VA = "0xBAF460")]
		public bool NextToken()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B9D")]
		[Address(RVA = "0xBB121C", Offset = "0xBB121C", VA = "0xBB121C")]
		private void UngetChar()
		{
		}
	}
	[Token(Token = "0x200019E")]
	internal enum ParserToken
	{
		[Token(Token = "0x40009EA")]
		None = 65536,
		[Token(Token = "0x40009EB")]
		Number,
		[Token(Token = "0x40009EC")]
		True,
		[Token(Token = "0x40009ED")]
		False,
		[Token(Token = "0x40009EE")]
		Null,
		[Token(Token = "0x40009EF")]
		CharSeq,
		[Token(Token = "0x40009F0")]
		Char,
		[Token(Token = "0x40009F1")]
		Text,
		[Token(Token = "0x40009F2")]
		Object,
		[Token(Token = "0x40009F3")]
		ObjectPrime,
		[Token(Token = "0x40009F4")]
		Pair,
		[Token(Token = "0x40009F5")]
		PairRest,
		[Token(Token = "0x40009F6")]
		Array,
		[Token(Token = "0x40009F7")]
		ArrayPrime,
		[Token(Token = "0x40009F8")]
		Value,
		[Token(Token = "0x40009F9")]
		ValueRest,
		[Token(Token = "0x40009FA")]
		String,
		[Token(Token = "0x40009FB")]
		End,
		[Token(Token = "0x40009FC")]
		Epsilon
	}
}
namespace Trading
{
	[Token(Token = "0x200019F")]
	public class TradeManager : MonoBehaviour
	{
		[Token(Token = "0x20001A0")]
		[CompilerGenerated]
		private sealed class <ProcessRequest>d__18 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000A07")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000A08")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000A09")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TradeManager <>4__this;

			[Token(Token = "0x4000A0A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public TradeRouteRequest request;

			[Token(Token = "0x4000A0B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private TradeNode <origin>5__2;

			[Token(Token = "0x4000A0C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private Realm <realm>5__3;

			[Token(Token = "0x4000A0D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private Vector3 <originPosition>5__4;

			[Token(Token = "0x4000A0E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			private bool <destinationFound>5__5;

			[Token(Token = "0x4000A0F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private TradeNode <destinationNode>5__6;

			[Token(Token = "0x4000A10")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private float <destinationScore>5__7;

			[Token(Token = "0x4000A11")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private List<TradeNode>.Enumerator <>7__wrap7;

			[Token(Token = "0x4000A12")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			private TradeNode <tradeNode>5__9;

			[Token(Token = "0x4000A13")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			private float <nodeScore>5__10;

			[Token(Token = "0x4000A14")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			private PathManager.PathRequest <pathRequest>5__11;

			[Token(Token = "0x1700016D")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000BB1")]
				[Address(RVA = "0xBB415C", Offset = "0xBB415C", VA = "0xBB415C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700016E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000BB3")]
				[Address(RVA = "0xBB41A4", Offset = "0xBB41A4", VA = "0xBB41A4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000BAD")]
			[Address(RVA = "0xBB3198", Offset = "0xBB3198", VA = "0xBB3198")]
			[DebuggerHidden]
			public <ProcessRequest>d__18(int <>1__state)
			{
			}

			[Token(Token = "0x6000BAE")]
			[Address(RVA = "0xBB33CC", Offset = "0xBB33CC", VA = "0xBB33CC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000BAF")]
			[Address(RVA = "0xBB33E8", Offset = "0xBB33E8", VA = "0xBB33E8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000BB0")]
			[Address(RVA = "0xBB410C", Offset = "0xBB410C", VA = "0xBB410C")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6000BB2")]
			[Address(RVA = "0xBB4164", Offset = "0xBB4164", VA = "0xBB4164", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40009FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TradeManagerConfiguration configuration;

		[Token(Token = "0x40009FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static TradeManager Instance;

		[Token(Token = "0x40009FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly List<TradeNode> TradeNodes;

		[Token(Token = "0x4000A00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static Dictionary<PathManager.PathfindingWorld, List<TradeNode>> tradeWorlds;

		[Token(Token = "0x4000A01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static readonly List<TradeNode> TempList;

		[Token(Token = "0x4000A02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static Dictionary<Guid, TradeRouteRequest> requests;

		[Token(Token = "0x4000A03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static Queue<Guid> requestsQueue;

		[Token(Token = "0x4000A04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Coroutine planTradeRouteCoroutine;

		[Token(Token = "0x4000A05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static readonly Array PathfindingWorldValues;

		[Token(Token = "0x4000A06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool processingRequest;

		[Token(Token = "0x6000BA2")]
		[Address(RVA = "0xBB2164", Offset = "0xBB2164", VA = "0xBB2164")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000BA3")]
		[Address(RVA = "0xBB26A0", Offset = "0xBB26A0", VA = "0xBB26A0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000BA4")]
		[Address(RVA = "0xBB2728", Offset = "0xBB2728", VA = "0xBB2728")]
		private void ScheduleJobs()
		{
		}

		[Token(Token = "0x6000BA5")]
		[Address(RVA = "0xBB28B4", Offset = "0xBB28B4", VA = "0xBB28B4")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000BA6")]
		[Address(RVA = "0xBB2C6C", Offset = "0xBB2C6C", VA = "0xBB2C6C")]
		public void RegisterTradeNode(TradeNode node)
		{
		}

		[Token(Token = "0x6000BA7")]
		[Address(RVA = "0xBB2E94", Offset = "0xBB2E94", VA = "0xBB2E94")]
		public void UnRegisterTradeNode(TradeNode node)
		{
		}

		[Token(Token = "0x6000BA8")]
		[Address(RVA = "0xBB2F7C", Offset = "0xBB2F7C", VA = "0xBB2F7C")]
		public TradeRouteRequest RequestTradeRoute(TradeNode origin, NavigationAgentConfiguration navigationAgentConfiguration)
		{
			return null;
		}

		[Token(Token = "0x6000BA9")]
		[Address(RVA = "0xBB310C", Offset = "0xBB310C", VA = "0xBB310C")]
		public static void CancelRequest(TradeRouteRequest request)
		{
		}

		[Token(Token = "0x6000BAA")]
		[Address(RVA = "0xBB2824", Offset = "0xBB2824", VA = "0xBB2824")]
		[IteratorStateMachine(typeof(<ProcessRequest>d__18))]
		private IEnumerator ProcessRequest(TradeRouteRequest request)
		{
			return null;
		}

		[Token(Token = "0x6000BAB")]
		[Address(RVA = "0xBB31C0", Offset = "0xBB31C0", VA = "0xBB31C0")]
		public TradeManager()
		{
		}
	}
	[Token(Token = "0x20001A1")]
	[CreateAssetMenu(fileName = "Trade Manager Configuration", menuName = "Trading/Trade Manager Configuration", order = 0)]
	public class TradeManagerConfiguration : ScriptableObject
	{
		[Token(Token = "0x4000A15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float maxTradeDistance;

		[Token(Token = "0x4000A16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool requireTradeAgreement;

		[Token(Token = "0x4000A17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float mostNeededResourceScore;

		[Token(Token = "0x4000A18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float neededResourceScore;

		[Token(Token = "0x4000A19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float exportedResourceScore;

		[Token(Token = "0x4000A1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float travelCost;

		[Token(Token = "0x6000BB4")]
		[Address(RVA = "0xBB41AC", Offset = "0xBB41AC", VA = "0xBB41AC")]
		public TradeManagerConfiguration()
		{
		}
	}
	[Token(Token = "0x20001A2")]
	public class TradeNode : MonoBehaviour
	{
		[Token(Token = "0x4000A1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TradeNodeConfiguration configuration;

		[Token(Token = "0x4000A1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Town city;

		[Token(Token = "0x1700016F")]
		public ResourceType PriorityImport
		{
			[Token(Token = "0x6000BB5")]
			[Address(RVA = "0xBB402C", Offset = "0xBB402C", VA = "0xBB402C")]
			get
			{
				return default(ResourceType);
			}
		}

		[Token(Token = "0x17000170")]
		public HashSet<ResourceType> ImportList
		{
			[Token(Token = "0x6000BB6")]
			[Address(RVA = "0xBB3FF4", Offset = "0xBB3FF4", VA = "0xBB3FF4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000171")]
		public HashSet<ResourceType> ExportList
		{
			[Token(Token = "0x6000BB7")]
			[Address(RVA = "0xBB4010", Offset = "0xBB4010", VA = "0xBB4010")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000172")]
		public Position Position
		{
			[Token(Token = "0x6000BB8")]
			[Address(RVA = "0xBB4048", Offset = "0xBB4048", VA = "0xBB4048")]
			get
			{
				return default(Position);
			}
		}

		[Token(Token = "0x17000173")]
		public Realm Realm
		{
			[Token(Token = "0x6000BB9")]
			[Address(RVA = "0xBB3FD8", Offset = "0xBB3FD8", VA = "0xBB3FD8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000BBA")]
		[Address(RVA = "0xBB41C8", Offset = "0xBB41C8", VA = "0xBB41C8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000BBB")]
		[Address(RVA = "0xBB4230", Offset = "0xBB4230", VA = "0xBB4230")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000BBC")]
		[Address(RVA = "0xBB4298", Offset = "0xBB4298", VA = "0xBB4298")]
		public TradeNode()
		{
		}
	}
	[Token(Token = "0x20001A3")]
	[CreateAssetMenu(fileName = "Trade Node Configuration", menuName = "Trading/Trade Node Configuration", order = 0)]
	public class TradeNodeConfiguration : ScriptableObject
	{
		[Token(Token = "0x4000A1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PathManager.PathfindingWorld pathfindingWorld;

		[Token(Token = "0x6000BBD")]
		[Address(RVA = "0xBB42A0", Offset = "0xBB42A0", VA = "0xBB42A0")]
		public TradeNodeConfiguration()
		{
		}
	}
	[Token(Token = "0x20001A4")]
	public class TradeRouteRequest
	{
		[Token(Token = "0x20001A5")]
		public enum TradeRouteRequestStatus
		{
			[Token(Token = "0x4000A24")]
			Waiting,
			[Token(Token = "0x4000A25")]
			InProgress,
			[Token(Token = "0x4000A26")]
			Success,
			[Token(Token = "0x4000A27")]
			Failure,
			[Token(Token = "0x4000A28")]
			Cancelled
		}

		[Token(Token = "0x4000A1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Guid ID;

		[Token(Token = "0x4000A1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TradeRouteRequestStatus Status;

		[Token(Token = "0x4000A20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly TradeNode Origin;

		[Token(Token = "0x4000A21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public TradeNode Destination;

		[Token(Token = "0x4000A22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public NavigationAgentConfiguration NavigationAgentConfiguration;

		[Token(Token = "0x6000BBE")]
		[Address(RVA = "0xBB30B8", Offset = "0xBB30B8", VA = "0xBB30B8")]
		public TradeRouteRequest(TradeNode origin, NavigationAgentConfiguration navigationAgentConfiguration)
		{
		}
	}
}
namespace Terrains
{
	[Token(Token = "0x20001A6")]
	[CreateAssetMenu(fileName = "Maelstrom Configuration", menuName = "Terrains/Maelstrom Configuration", order = 0)]
	public class MaelstromConfiguration : ScriptableObject
	{
		[Token(Token = "0x4000A29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float minSizeMaelstrom;

		[Token(Token = "0x4000A2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float maxSizeMaelstrom;

		[Token(Token = "0x4000A2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float durationMaelstromGrowth;

		[Token(Token = "0x4000A2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float pullStrength;

		[Token(Token = "0x4000A2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float downwardsDrag;

		[Token(Token = "0x4000A2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Range(0.01f, 10f)]
		public float maxSizePull;

		[Token(Token = "0x4000A2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Range(0.01f, 10f)]
		public float minSizePull;

		[Token(Token = "0x4000A30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("How fast the object will spin, degrees per second")]
		public float rotationSpeed;

		[Token(Token = "0x4000A31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The threshold that needs to be met before the maelstrom forces will act on it")]
		public float kinematicThresholdEnter;

		[Token(Token = "0x4000A32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("The threshold that needs to be met before the maelstrom forces will lose it's grip over the object")]
		public float kinematicThresholdExit;

		[Token(Token = "0x4000A33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The threshold that needs to be met before the maelstrom forces will explode objects with an exploder component")]
		public float exploderTriggerThreshold;

		[Token(Token = "0x4000A34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("The threshold that needs to be met before the maelstrom forces will lose it's grip over the object")]
		public float kinematicThresholdExitSmallEntities;

		[Token(Token = "0x6000BBF")]
		[Address(RVA = "0xBB42A8", Offset = "0xBB42A8", VA = "0xBB42A8")]
		public MaelstromConfiguration()
		{
		}
	}
	[Token(Token = "0x20001A7")]
	[CreateAssetMenu(menuName = "Terrains/Animation Configuration")]
	public class TerrainAnimationConfiguration : ScriptableObject
	{
		[Token(Token = "0x4000A35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float duration;

		[Token(Token = "0x4000A36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float bounceDuration;

		[Token(Token = "0x4000A37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float finalDuration;

		[Token(Token = "0x4000A38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float initialYOffset;

		[Token(Token = "0x4000A39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float bounceYOffset;

		[Token(Token = "0x6000BC0")]
		[Address(RVA = "0xBB42D4", Offset = "0xBB42D4", VA = "0xBB42D4")]
		public TerrainAnimationConfiguration()
		{
		}
	}
	[Token(Token = "0x20001A8")]
	public class TerrainColorManager : MonoBehaviour
	{
		[Token(Token = "0x4000A3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Renderer NorthRenderer;

		[Token(Token = "0x4000A3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Renderer NorthEastRenderer;

		[Token(Token = "0x4000A3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Renderer EastRenderer;

		[Token(Token = "0x4000A3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Renderer SouthEastRenderer;

		[Token(Token = "0x4000A3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Renderer SouthRenderer;

		[Token(Token = "0x4000A3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Renderer SouthWestRenderer;

		[Token(Token = "0x4000A40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Renderer WestRenderer;

		[Token(Token = "0x4000A41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Renderer NorthWestRenderer;

		[Token(Token = "0x4000A42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Renderer CentralRenderer;

		[Token(Token = "0x4000A43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int Color;

		[Token(Token = "0x4000A44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static readonly int LeftColor;

		[Token(Token = "0x4000A45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly int RightColor;

		[Token(Token = "0x4000A46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static readonly int DiagonalColor;

		[Token(Token = "0x4000A47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly int IsColorTheSame;

		[Token(Token = "0x6000BC1")]
		[Address(RVA = "0xBB42F4", Offset = "0xBB42F4", VA = "0xBB42F4")]
		public void SetColors(Color mainColor, Color westColor, Color northColor, Color eastColor, Color southColor, Color northWestColor, Color northEastColor, Color southWestColor, Color southEastColor)
		{
		}

		[Token(Token = "0x6000BC2")]
		[Address(RVA = "0xBB4A14", Offset = "0xBB4A14", VA = "0xBB4A14")]
		private void SetColor(Renderer renderer, Color mainColor)
		{
		}

		[Token(Token = "0x6000BC3")]
		[Address(RVA = "0xBB4578", Offset = "0xBB4578", VA = "0xBB4578")]
		private void SetColor(Renderer renderer, Color mainColor, Color otherColor)
		{
		}

		[Token(Token = "0x6000BC4")]
		[Address(RVA = "0xBB4734", Offset = "0xBB4734", VA = "0xBB4734")]
		private void SetColor(Renderer renderer, Color mainColor, Color leftColor, Color rightColor, Color diagonalColor)
		{
		}

		[Token(Token = "0x6000BC5")]
		[Address(RVA = "0xBB4AEC", Offset = "0xBB4AEC", VA = "0xBB4AEC")]
		public void ShowRenderers()
		{
		}

		[Token(Token = "0x6000BC6")]
		[Address(RVA = "0xBB4BB0", Offset = "0xBB4BB0", VA = "0xBB4BB0")]
		public void HideRenderers()
		{
		}

		[Token(Token = "0x6000BC7")]
		[Address(RVA = "0xBB4C74", Offset = "0xBB4C74", VA = "0xBB4C74")]
		public TerrainColorManager()
		{
		}
	}
}
namespace Structs
{
	[Serializable]
	[Token(Token = "0x20001A9")]
	public struct Notification
	{
		[Token(Token = "0x4000A48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string message;

		[Token(Token = "0x4000A49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Vector3? position;
	}
}
namespace Serialization
{
	[Serializable]
	[Token(Token = "0x20001AA")]
	public class AddonData
	{
		[Token(Token = "0x4000A4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3Data Position;

		[Token(Token = "0x4000A4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3Data Rotation;

		[Token(Token = "0x4000A4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public BuildingType Type;

		[Token(Token = "0x4000A4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public TechLevel TechLevel;

		[Token(Token = "0x4000A4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public List<ShipData> Ships;

		[Token(Token = "0x6000BC9")]
		[Address(RVA = "0xBB4DA4", Offset = "0xBB4DA4", VA = "0xBB4DA4")]
		public AddonData()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001AB")]
	public class GameData
	{
		[Token(Token = "0x4000A4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<TownData> TownsData;

		[Token(Token = "0x4000A50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<KeyValuePair<Position, TerrainType>> TerrainData;

		[Token(Token = "0x4000A51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<KeyValuePair<Position, AnimalType>> AnimalData;

		[Token(Token = "0x4000A52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public RealmManagerData RealmManagerData;

		[Token(Token = "0x4000A53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int Mankind;

		[Token(Token = "0x4000A54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public int Heretics;

		[Token(Token = "0x4000A55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int Cities;

		[Token(Token = "0x4000A56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public int Realms;

		[Token(Token = "0x4000A57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int Faith;

		[Token(Token = "0x4000A58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float Mana;

		[Token(Token = "0x4000A59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float Karma;

		[Token(Token = "0x4000A5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public int SaveVersion;

		[Token(Token = "0x4000A5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool Heresy;

		[Token(Token = "0x4000A5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		public bool Disasters;

		[Token(Token = "0x4000A5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
		public bool Sandbox;

		[Token(Token = "0x4000A5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x53")]
		public bool TutorialDone;

		[Token(Token = "0x4000A5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public int TutorialPhase;

		[Token(Token = "0x4000A60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public DateTime SaveDate;

		[Token(Token = "0x6000BCA")]
		[Address(RVA = "0xBB4DAC", Offset = "0xBB4DAC", VA = "0xBB4DAC")]
		public GameData()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001AC")]
	public class HumanData
	{
		[Token(Token = "0x4000A61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string FirstName;

		[Token(Token = "0x4000A62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3Data Position;

		[Token(Token = "0x4000A63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool Female;

		[Token(Token = "0x4000A64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int Age;

		[Token(Token = "0x4000A65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int Food;

		[Token(Token = "0x4000A66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int Hp;

		[Token(Token = "0x4000A67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Job Job;

		[Token(Token = "0x4000A68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool IsSick;

		[Token(Token = "0x4000A69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		public bool IsBurning;

		[Token(Token = "0x4000A6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string[] Traits;

		[Token(Token = "0x6000BCB")]
		[Address(RVA = "0xBB4DB4", Offset = "0xBB4DB4", VA = "0xBB4DB4")]
		public HumanData()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001AD")]
	public class PortData
	{
		[Token(Token = "0x4000A6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3Data Position;

		[Token(Token = "0x4000A6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<ShipData> Ships;

		[Token(Token = "0x6000BCC")]
		[Address(RVA = "0xBB4DBC", Offset = "0xBB4DBC", VA = "0xBB4DBC")]
		public PortData()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001AE")]
	public class RealmData
	{
		[Token(Token = "0x4000A6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Guid id;

		[Token(Token = "0x4000A6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string name;

		[Token(Token = "0x4000A6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<Guid> cities;

		[Token(Token = "0x4000A70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Guid capitalId;

		[Token(Token = "0x4000A71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string heraldicColor;

		[Token(Token = "0x4000A72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string heraldicSymbol;

		[Token(Token = "0x4000A73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Realm.RealmBeliefType beliefType;

		[Token(Token = "0x6000BCD")]
		[Address(RVA = "0xBB4DC4", Offset = "0xBB4DC4", VA = "0xBB4DC4")]
		public RealmData()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001AF")]
	public class RealmManagerData
	{
		[Token(Token = "0x4000A74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<RealmData> realmData;

		[Token(Token = "0x4000A75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<RealmRelationData> realmRelationData;

		[Token(Token = "0x4000A76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<RealmTreatyData> realmTreatyData;

		[Token(Token = "0x6000BCE")]
		[Address(RVA = "0xBB4DCC", Offset = "0xBB4DCC", VA = "0xBB4DCC")]
		public RealmManagerData()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001B0")]
	public class RealmRelationData
	{
		[Token(Token = "0x4000A77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Guid realm1;

		[Token(Token = "0x4000A78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Guid realm2;

		[Token(Token = "0x4000A79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int value;

		[Token(Token = "0x6000BCF")]
		[Address(RVA = "0xBB4DD4", Offset = "0xBB4DD4", VA = "0xBB4DD4")]
		public RealmRelationData()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001B1")]
	public class RealmTreatyData
	{
		[Token(Token = "0x4000A7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Guid realm1;

		[Token(Token = "0x4000A7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Guid realm2;

		[Token(Token = "0x4000A7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Treaty.TreatyType type;

		[Token(Token = "0x6000BD0")]
		[Address(RVA = "0xBB4DDC", Offset = "0xBB4DDC", VA = "0xBB4DDC")]
		public RealmTreatyData()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001B2")]
	public class ShipData
	{
		[Token(Token = "0x4000A7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3Data Position;

		[Token(Token = "0x4000A7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3Data Rotation;

		[Token(Token = "0x4000A7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Ship.Type Type;

		[Token(Token = "0x4000A80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int Hp;

		[Token(Token = "0x4000A81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public List<KeyValuePair<ResourceType, int>> Cargo;

		[Token(Token = "0x6000BD1")]
		[Address(RVA = "0xBB4DE4", Offset = "0xBB4DE4", VA = "0xBB4DE4")]
		public ShipData()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001B3")]
	public class TownData
	{
		[Token(Token = "0x4000A82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Guid Id;

		[Token(Token = "0x4000A83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string Name;

		[Token(Token = "0x4000A84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3Data Position;

		[Token(Token = "0x4000A85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public int CurrentLevel;

		[Token(Token = "0x4000A86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public TownType Type;

		[Token(Token = "0x4000A87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float Faith;

		[Token(Token = "0x4000A88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float Favor;

		[Token(Token = "0x4000A89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public int RemainingWork;

		[Token(Token = "0x4000A8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool IsBuilding;

		[Token(Token = "0x4000A8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public List<AddonData> Addons;

		[Token(Token = "0x4000A8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public List<HumanData> Citizens;

		[Token(Token = "0x4000A8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public List<KeyValuePair<ResourceType, int>> Stock;

		[Token(Token = "0x6000BD2")]
		[Address(RVA = "0xBB4DEC", Offset = "0xBB4DEC", VA = "0xBB4DEC")]
		public TownData()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001B4")]
	public struct Vector3Data
	{
		[Token(Token = "0x4000A8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float x;

		[Token(Token = "0x4000A8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float y;

		[Token(Token = "0x4000A90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float z;

		[Token(Token = "0x6000BD3")]
		[Address(RVA = "0xBB4DF4", Offset = "0xBB4DF4", VA = "0xBB4DF4")]
		public Vector3Data(float x, float y, float z)
		{
		}

		[Token(Token = "0x6000BD4")]
		[Address(RVA = "0xBB4E00", Offset = "0xBB4E00", VA = "0xBB4E00")]
		public static implicit operator Vector3(Vector3Data vector3Data)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000BD5")]
		[Address(RVA = "0xBB4E04", Offset = "0xBB4E04", VA = "0xBB4E04")]
		public static implicit operator Vector3Data(Vector3 vector3)
		{
			return default(Vector3Data);
		}
	}
}
namespace Realms
{
	[Token(Token = "0x20001B5")]
	public class ArmyManager : MonoBehaviour
	{
		[Token(Token = "0x20001B6")]
		[CompilerGenerated]
		private sealed class <CheckAttackCoroutine>d__16 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000A9A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000A9B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000A9C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ArmyManager <>4__this;

			[Token(Token = "0x4000A9D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Realm[] <>7__wrap1;

			[Token(Token = "0x4000A9E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private int <>7__wrap2;

			[Token(Token = "0x4000A9F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private Realm <realm>5__4;

			[Token(Token = "0x17000175")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000BEB")]
				[Address(RVA = "0xBB67A8", Offset = "0xBB67A8", VA = "0xBB67A8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000176")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000BED")]
				[Address(RVA = "0xBB67F0", Offset = "0xBB67F0", VA = "0xBB67F0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000BE8")]
			[Address(RVA = "0xBB5250", Offset = "0xBB5250", VA = "0xBB5250")]
			[DebuggerHidden]
			public <CheckAttackCoroutine>d__16(int <>1__state)
			{
			}

			[Token(Token = "0x6000BE9")]
			[Address(RVA = "0xBB6010", Offset = "0xBB6010", VA = "0xBB6010", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000BEA")]
			[Address(RVA = "0xBB6014", Offset = "0xBB6014", VA = "0xBB6014", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000BEC")]
			[Address(RVA = "0xBB67B0", Offset = "0xBB67B0", VA = "0xBB67B0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20001B7")]
		[CompilerGenerated]
		private sealed class <FindClosestTargetCoroutine>d__17 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000AA0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000AA1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000AA2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Dictionary<Town, HashSet<Town>> possibleTargets;

			[Token(Token = "0x4000AA3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public ArmyManager <>4__this;

			[Token(Token = "0x4000AA4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public bool waitBetweenCreations;

			[Token(Token = "0x4000AA5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private Dictionary<Town, HashSet<Town>>.KeyCollection.Enumerator <>7__wrap1;

			[Token(Token = "0x17000177")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000BF2")]
				[Address(RVA = "0xBB6B5C", Offset = "0xBB6B5C", VA = "0xBB6B5C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000178")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000BF4")]
				[Address(RVA = "0xBB6BA4", Offset = "0xBB6BA4", VA = "0xBB6BA4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000BEE")]
			[Address(RVA = "0xBB5314", Offset = "0xBB5314", VA = "0xBB5314")]
			[DebuggerHidden]
			public <FindClosestTargetCoroutine>d__17(int <>1__state)
			{
			}

			[Token(Token = "0x6000BEF")]
			[Address(RVA = "0xBB67F8", Offset = "0xBB67F8", VA = "0xBB67F8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000BF0")]
			[Address(RVA = "0xBB6814", Offset = "0xBB6814", VA = "0xBB6814", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000BF1")]
			[Address(RVA = "0xBB6B0C", Offset = "0xBB6B0C", VA = "0xBB6B0C")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6000BF3")]
			[Address(RVA = "0xBB6B64", Offset = "0xBB6B64", VA = "0xBB6B64", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20001B8")]
		[CompilerGenerated]
		private sealed class <AttackClosestTargetCoroutine>d__18 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000AA6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000AA7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000AA8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Town attacker;

			[Token(Token = "0x4000AA9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public HashSet<Town> targets;

			[Token(Token = "0x4000AAA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public bool waitBetweenCreations;

			[Token(Token = "0x4000AAB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public ArmyManager <>4__this;

			[Token(Token = "0x4000AAC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private ClosestReachablePositionPathRequest <request>5__2;

			[Token(Token = "0x4000AAD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private HashSet<Town>.Enumerator <>7__wrap2;

			[Token(Token = "0x4000AAE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private Town <target>5__4;

			[Token(Token = "0x17000179")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000BF9")]
				[Address(RVA = "0xBB72D4", Offset = "0xBB72D4", VA = "0xBB72D4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700017A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000BFB")]
				[Address(RVA = "0xBB731C", Offset = "0xBB731C", VA = "0xBB731C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000BF5")]
			[Address(RVA = "0xBB53F4", Offset = "0xBB53F4", VA = "0xBB53F4")]
			[DebuggerHidden]
			public <AttackClosestTargetCoroutine>d__18(int <>1__state)
			{
			}

			[Token(Token = "0x6000BF6")]
			[Address(RVA = "0xBB6BAC", Offset = "0xBB6BAC", VA = "0xBB6BAC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000BF7")]
			[Address(RVA = "0xBB6BC8", Offset = "0xBB6BC8", VA = "0xBB6BC8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000BF8")]
			[Address(RVA = "0xBB7284", Offset = "0xBB7284", VA = "0xBB7284")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6000BFA")]
			[Address(RVA = "0xBB72DC", Offset = "0xBB72DC", VA = "0xBB72DC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20001B9")]
		[CompilerGenerated]
		private sealed class <AttackByClosestCityCoroutine>d__19 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000AAF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000AB0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000AB1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Town target;

			[Token(Token = "0x4000AB2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public HashSet<Town> cities;

			[Token(Token = "0x4000AB3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public ArmyManager <>4__this;

			[Token(Token = "0x4000AB4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private ClosestReachablePositionPathRequest <request>5__2;

			[Token(Token = "0x4000AB5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private HashSet<Town>.Enumerator <>7__wrap2;

			[Token(Token = "0x4000AB6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private Town <city>5__4;

			[Token(Token = "0x1700017B")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000C00")]
				[Address(RVA = "0xBB7A38", Offset = "0xBB7A38", VA = "0xBB7A38", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700017C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000C02")]
				[Address(RVA = "0xBB7A80", Offset = "0xBB7A80", VA = "0xBB7A80", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000BFC")]
			[Address(RVA = "0xBB54C0", Offset = "0xBB54C0", VA = "0xBB54C0")]
			[DebuggerHidden]
			public <AttackByClosestCityCoroutine>d__19(int <>1__state)
			{
			}

			[Token(Token = "0x6000BFD")]
			[Address(RVA = "0xBB7324", Offset = "0xBB7324", VA = "0xBB7324", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000BFE")]
			[Address(RVA = "0xBB7340", Offset = "0xBB7340", VA = "0xBB7340", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000BFF")]
			[Address(RVA = "0xBB79E8", Offset = "0xBB79E8", VA = "0xBB79E8")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6000C01")]
			[Address(RVA = "0xBB7A40", Offset = "0xBB7A40", VA = "0xBB7A40", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20001BA")]
		[CompilerGenerated]
		private sealed class <StartConflictCoroutine>d__25 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000AB7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000AB8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000AB9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ArmyManager <>4__this;

			[Token(Token = "0x4000ABA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Realm realm1;

			[Token(Token = "0x4000ABB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Realm realm2;

			[Token(Token = "0x4000ABC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private Realm[] <realmsArray>5__2;

			[Token(Token = "0x4000ABD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private Realm[] <>7__wrap2;

			[Token(Token = "0x4000ABE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private int <>7__wrap3;

			[Token(Token = "0x1700017D")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000C06")]
				[Address(RVA = "0xBB93C4", Offset = "0xBB93C4", VA = "0xBB93C4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700017E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000C08")]
				[Address(RVA = "0xBB940C", Offset = "0xBB940C", VA = "0xBB940C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000C03")]
			[Address(RVA = "0xBB8A88", Offset = "0xBB8A88", VA = "0xBB8A88")]
			[DebuggerHidden]
			public <StartConflictCoroutine>d__25(int <>1__state)
			{
			}

			[Token(Token = "0x6000C04")]
			[Address(RVA = "0xBB8AB0", Offset = "0xBB8AB0", VA = "0xBB8AB0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000C05")]
			[Address(RVA = "0xBB8AB4", Offset = "0xBB8AB4", VA = "0xBB8AB4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000C07")]
			[Address(RVA = "0xBB93CC", Offset = "0xBB93CC", VA = "0xBB93CC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000A92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ArmyManagerConfiguration configuration;

		[Token(Token = "0x4000A93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private HashSet<Army> armies;

		[Token(Token = "0x4000A94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Coroutine checkAttackCoroutine;

		[Token(Token = "0x4000A95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<Coroutine> findClosestTargetCoroutines;

		[Token(Token = "0x4000A96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<Coroutine> attackClosestTargetCoroutines;

		[Token(Token = "0x4000A97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool checkAttackInProgress;

		[Token(Token = "0x4000A98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float lastArmyCreation;

		[Token(Token = "0x4000A99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly List<Army> armiesToDisperse;

		[Token(Token = "0x17000174")]
		public static ArmyManager Instance
		{
			[Token(Token = "0x6000BD6")]
			[Address(RVA = "0xBB4E08", Offset = "0xBB4E08", VA = "0xBB4E08")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000BD7")]
			[Address(RVA = "0xBB4E50", Offset = "0xBB4E50", VA = "0xBB4E50")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000BD8")]
		[Address(RVA = "0xBB4EA8", Offset = "0xBB4EA8", VA = "0xBB4EA8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000BD9")]
		[Address(RVA = "0xBB5048", Offset = "0xBB5048", VA = "0xBB5048")]
		private void Start()
		{
		}

		[Token(Token = "0x6000BDA")]
		[Address(RVA = "0xBB5144", Offset = "0xBB5144", VA = "0xBB5144")]
		private void Update()
		{
		}

		[Token(Token = "0x6000BDB")]
		[Address(RVA = "0xBB5188", Offset = "0xBB5188", VA = "0xBB5188")]
		private void CheckAttack()
		{
		}

		[Token(Token = "0x6000BDC")]
		[Address(RVA = "0xBB51DC", Offset = "0xBB51DC", VA = "0xBB51DC")]
		[IteratorStateMachine(typeof(<CheckAttackCoroutine>d__16))]
		private IEnumerator CheckAttackCoroutine()
		{
			return null;
		}

		[Token(Token = "0x6000BDD")]
		[Address(RVA = "0xBB5278", Offset = "0xBB5278", VA = "0xBB5278")]
		[IteratorStateMachine(typeof(<FindClosestTargetCoroutine>d__17))]
		private IEnumerator FindClosestTargetCoroutine(Realm realm, Dictionary<Town, HashSet<Town>> possibleTargets, bool waitBetweenCreations)
		{
			return null;
		}

		[Token(Token = "0x6000BDE")]
		[Address(RVA = "0xBB533C", Offset = "0xBB533C", VA = "0xBB533C")]
		[IteratorStateMachine(typeof(<AttackClosestTargetCoroutine>d__18))]
		private IEnumerator AttackClosestTargetCoroutine(Town attacker, HashSet<Town> targets, bool waitBetweenCreations)
		{
			return null;
		}

		[Token(Token = "0x6000BDF")]
		[Address(RVA = "0xBB541C", Offset = "0xBB541C", VA = "0xBB541C")]
		[IteratorStateMachine(typeof(<AttackByClosestCityCoroutine>d__19))]
		private IEnumerator AttackByClosestCityCoroutine(Town target, HashSet<Town> cities)
		{
			return null;
		}

		[Token(Token = "0x6000BE0")]
		[Address(RVA = "0xBB54E8", Offset = "0xBB54E8", VA = "0xBB54E8")]
		private void CreateArmy(Town attacker, MilitaryObjective objective, bool notifyPlayer)
		{
		}

		[Token(Token = "0x6000BE1")]
		[Address(RVA = "0xBB57B4", Offset = "0xBB57B4", VA = "0xBB57B4")]
		public bool FindArmy(Town city, out Army army)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BE2")]
		[Address(RVA = "0xBB5978", Offset = "0xBB5978", VA = "0xBB5978")]
		public void RemoveArmy(Army army)
		{
		}

		[Token(Token = "0x6000BE3")]
		[Address(RVA = "0xBB59D0", Offset = "0xBB59D0", VA = "0xBB59D0")]
		public void AttackCity(Realm realm, Town target)
		{
		}

		[Token(Token = "0x6000BE4")]
		[Address(RVA = "0xBB5AB8", Offset = "0xBB5AB8", VA = "0xBB5AB8")]
		public void StartConflict(Realm realm1, Realm realm2)
		{
		}

		[Token(Token = "0x6000BE5")]
		[Address(RVA = "0xBB5AD8", Offset = "0xBB5AD8", VA = "0xBB5AD8")]
		[IteratorStateMachine(typeof(<StartConflictCoroutine>d__25))]
		private IEnumerator StartConflictCoroutine(Realm realm1, Realm realm2)
		{
			return null;
		}

		[Token(Token = "0x6000BE6")]
		[Address(RVA = "0xBB5B7C", Offset = "0xBB5B7C", VA = "0xBB5B7C")]
		public void DisperseArmies(Realm realm)
		{
		}

		[Token(Token = "0x6000BE7")]
		[Address(RVA = "0xBB5F80", Offset = "0xBB5F80", VA = "0xBB5F80")]
		public ArmyManager()
		{
		}
	}
	[Token(Token = "0x20001BC")]
	[CreateAssetMenu(menuName = "Realms/Army Manager Configuration")]
	public class ArmyManagerConfiguration : ScriptableObject
	{
		[Token(Token = "0x4000AC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Army armyPrefab;

		[Token(Token = "0x4000AC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("How much time before we check if a realm will attack a city or another realm")]
		public Timer attackTimer;

		[Token(Token = "0x4000AC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("How much time before we can create a new army when an army has been created in the world")]
		public float delayBetweenArmyCreation;

		[Token(Token = "0x4000AC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("The max distance between 2 cities to send an attack")]
		public float attackMaxDistance;

		[Token(Token = "0x4000AC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("How many units the army will train before it is considered ready")]
		public int unitsPerArmy;

		[Token(Token = "0x4000AC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("The distance between the units in the formation")]
		public float distanceBetweenUnits;

		[Token(Token = "0x4000AC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The distance between the units in the formation")]
		public float circleFormationRadius;

		[Token(Token = "0x4000AC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("The tolerance multiplier used when checking if units are in formation")]
		public float formationToleranceMultiplier;

		[Token(Token = "0x4000AC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("How much time it takes to train the units when they are all recruited")]
		public float timeToTrain;

		[Token(Token = "0x4000ACA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("How much time we wait between each recruit")]
		public float delayBetweenRecruit;

		[Token(Token = "0x4000ACB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("The soldiers will stay in this radius around the battlefield during capture and battles")]
		public float battlefieldRadius;

		[Token(Token = "0x6000C0C")]
		[Address(RVA = "0xBB94E8", Offset = "0xBB94E8", VA = "0xBB94E8")]
		public ArmyManagerConfiguration()
		{
		}
	}
	[Token(Token = "0x20001BD")]
	public class Banner : MonoBehaviour
	{
		[Token(Token = "0x4000ACC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int TeamColor;

		[Token(Token = "0x6000C0D")]
		[Address(RVA = "0xBB9514", Offset = "0xBB9514", VA = "0xBB9514")]
		public void Init(Realm realm)
		{
		}

		[Token(Token = "0x6000C0E")]
		[Address(RVA = "0xBB9634", Offset = "0xBB9634", VA = "0xBB9634")]
		public Banner()
		{
		}
	}
	[Token(Token = "0x20001BE")]
	[CreateAssetMenu(menuName = "Realms/Borders Configuration")]
	public class BorderConfiguration : ScriptableObject
	{
		[Token(Token = "0x4000ACD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Color color;

		[Token(Token = "0x4000ACE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float width;

		[Token(Token = "0x4000ACF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Material material;

		[Token(Token = "0x4000AD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public BorderRenderer borderRendererPrefab;

		[Token(Token = "0x6000C10")]
		[Address(RVA = "0xBB96A4", Offset = "0xBB96A4", VA = "0xBB96A4")]
		public BorderConfiguration()
		{
		}
	}
	[Token(Token = "0x20001BF")]
	public class BorderRenderer : MonoBehaviour
	{
		[Token(Token = "0x4000AD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private BorderConfiguration configuration;

		[Token(Token = "0x4000AD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private HashSet<Position> lands;

		[Token(Token = "0x4000AD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private HashSet<Position> borders;

		[Token(Token = "0x4000AD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private HashSet<Vector3> borderPoints;

		[Token(Token = "0x4000AD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<Vector3> orderedBorderPoints;

		[Token(Token = "0x4000AD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<LineRenderer> lineRenderers;

		[Token(Token = "0x4000AD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<int> lineStartIndexes;

		[Token(Token = "0x4000AD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Vector3 Offset;

		[Token(Token = "0x6000C11")]
		[Address(RVA = "0xBB96AC", Offset = "0xBB96AC", VA = "0xBB96AC")]
		public void Init(HashSet<Position> groupOfTerritories, BorderConfiguration borderConfiguration)
		{
		}

		[Token(Token = "0x6000C12")]
		[Address(RVA = "0xBB9868", Offset = "0xBB9868", VA = "0xBB9868")]
		private void FindBorders()
		{
		}

		[Token(Token = "0x6000C13")]
		[Address(RVA = "0xBBA338", Offset = "0xBBA338", VA = "0xBBA338")]
		private bool IsBorder(Position land)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C14")]
		[Address(RVA = "0xBB9A24", Offset = "0xBB9A24", VA = "0xBB9A24")]
		private void GenerateBorderPoints()
		{
		}

		[Token(Token = "0x6000C15")]
		[Address(RVA = "0xBBA40C", Offset = "0xBBA40C", VA = "0xBBA40C")]
		private void SortBorderPoints()
		{
		}

		[Token(Token = "0x6000C16")]
		[Address(RVA = "0xBB9EE0", Offset = "0xBB9EE0", VA = "0xBB9EE0")]
		private void DrawBorders()
		{
		}

		[Token(Token = "0x6000C17")]
		[Address(RVA = "0xBB9D28", Offset = "0xBB9D28", VA = "0xBB9D28")]
		private void RemoveBorders()
		{
		}

		[Token(Token = "0x6000C18")]
		[Address(RVA = "0xBBAE10", Offset = "0xBBAE10", VA = "0xBBAE10")]
		[ContextMenu("Debug Lands")]
		public void DebugLands()
		{
		}

		[Token(Token = "0x6000C19")]
		[Address(RVA = "0xBBB20C", Offset = "0xBBB20C", VA = "0xBBB20C")]
		public BorderRenderer()
		{
		}
	}
	[Token(Token = "0x20001C0")]
	public class CastleMilitaryObjective : MilitaryObjective
	{
		[Token(Token = "0x4000AD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private MilitaryObjective city;

		[Token(Token = "0x4000ADA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public GameObject destroyedCastlePrefab;

		[Token(Token = "0x6000C1B")]
		[Address(RVA = "0xBBB268", Offset = "0xBBB268", VA = "0xBBB268")]
		private void Start()
		{
		}

		[Token(Token = "0x6000C1C")]
		[Address(RVA = "0xBBB358", Offset = "0xBBB358", VA = "0xBBB358", Slot = "4")]
		protected override void OnCaptured(Army army)
		{
		}

		[Token(Token = "0x6000C1D")]
		[Address(RVA = "0xBBB4B8", Offset = "0xBBB4B8", VA = "0xBBB4B8", Slot = "5")]
		public override bool IsFinalObjective(out MilitaryObjective nextObjective)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C1E")]
		[Address(RVA = "0xBBB4DC", Offset = "0xBBB4DC", VA = "0xBBB4DC", Slot = "6")]
		public override Town GetRelatedCity()
		{
			return null;
		}

		[Token(Token = "0x6000C1F")]
		[Address(RVA = "0xBBB4FC", Offset = "0xBBB4FC", VA = "0xBBB4FC")]
		public CastleMilitaryObjective()
		{
		}
	}
	[Token(Token = "0x20001C1")]
	public class CityMilitaryObjective : MilitaryObjective
	{
		[Token(Token = "0x4000ADB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Town city;

		[Token(Token = "0x6000C20")]
		[Address(RVA = "0xBBB628", Offset = "0xBBB628", VA = "0xBBB628")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000C21")]
		[Address(RVA = "0xBBB680", Offset = "0xBBB680", VA = "0xBBB680", Slot = "4")]
		protected override void OnCaptured(Army army)
		{
		}

		[Token(Token = "0x6000C22")]
		[Address(RVA = "0xBBB9B4", Offset = "0xBBB9B4", VA = "0xBBB9B4", Slot = "5")]
		public override bool IsFinalObjective(out MilitaryObjective nextObjective)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C23")]
		[Address(RVA = "0xBBB9D4", Offset = "0xBBB9D4", VA = "0xBBB9D4", Slot = "6")]
		public override Town GetRelatedCity()
		{
			return null;
		}

		[Token(Token = "0x6000C24")]
		[Address(RVA = "0xBBB9DC", Offset = "0xBBB9DC", VA = "0xBBB9DC")]
		public CityMilitaryObjective()
		{
		}
	}
	[Token(Token = "0x20001C2")]
	[CreateAssetMenu(menuName = "Realms/Heraldry/Heraldic Generator")]
	public class HeraldicGenerator : ScriptableObject
	{
		[Token(Token = "0x4000ADC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Color holyKingdomColor;

		[Token(Token = "0x4000ADD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Color hereticKingdomColor;

		[Token(Token = "0x4000ADE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public List<HeraldicSymbol> heraldicSymbols;

		[Token(Token = "0x4000ADF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public List<Color> colors;

		[Token(Token = "0x4000AE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly List<Heraldry> possibilities;

		[Token(Token = "0x6000C25")]
		[Address(RVA = "0xBBB9E0", Offset = "0xBBB9E0", VA = "0xBBB9E0")]
		public Heraldry GenerateNewHeraldry(Realm.RealmBeliefType realmBeliefType)
		{
			return default(Heraldry);
		}

		[Token(Token = "0x6000C26")]
		[Address(RVA = "0xBBC090", Offset = "0xBBC090", VA = "0xBBC090")]
		public Heraldry LoadState(string colorHtml, string symbol, Realm.RealmBeliefType type)
		{
			return default(Heraldry);
		}

		[Token(Token = "0x6000C27")]
		[Address(RVA = "0xBBBB8C", Offset = "0xBBBB8C", VA = "0xBBBB8C")]
		private Heraldry GetHolyKingdomHeraldry()
		{
			return default(Heraldry);
		}

		[Token(Token = "0x6000C28")]
		[Address(RVA = "0xBBBC40", Offset = "0xBBBC40", VA = "0xBBBC40")]
		private Heraldry GetHereticKingdomHeraldry()
		{
			return default(Heraldry);
		}

		[Token(Token = "0x6000C29")]
		[Address(RVA = "0xBBBCF4", Offset = "0xBBBCF4", VA = "0xBBBCF4")]
		private void GeneratePossibilities()
		{
		}

		[Token(Token = "0x6000C2A")]
		[Address(RVA = "0xBBC26C", Offset = "0xBBC26C", VA = "0xBBC26C")]
		public void GeneratesPossibilities(SortedSet<Realm> realms)
		{
		}

		[Token(Token = "0x6000C2B")]
		[Address(RVA = "0xBBC85C", Offset = "0xBBC85C", VA = "0xBBC85C")]
		public HeraldicGenerator()
		{
		}
	}
	[Token(Token = "0x20001C5")]
	[CreateAssetMenu(menuName = "Realms/Heraldry/Heraldic Symbol")]
	public class HeraldicSymbol : ScriptableObject
	{
		[Token(Token = "0x4000AE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string key;

		[Token(Token = "0x4000AE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Sprite symbol2D;

		[Token(Token = "0x4000AE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Banner africanBanner;

		[Token(Token = "0x4000AE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Banner asianBanner;

		[Token(Token = "0x4000AE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Banner europeanBanner;

		[Token(Token = "0x4000AE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Banner nordicBanner;

		[Token(Token = "0x4000AE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Banner orientalBanner;

		[Token(Token = "0x6000C30")]
		[Address(RVA = "0xBBC9C4", Offset = "0xBBC9C4", VA = "0xBBC9C4")]
		public Banner GetBanner(TownType townType)
		{
			return null;
		}

		[Token(Token = "0x6000C31")]
		[Address(RVA = "0xBBCA14", Offset = "0xBBCA14", VA = "0xBBCA14")]
		public HeraldicSymbol()
		{
		}
	}
	[Token(Token = "0x20001C6")]
	public struct Heraldry
	{
		[Token(Token = "0x4000AEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Color Color;

		[Token(Token = "0x4000AEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public HeraldicSymbol Symbol;
	}
	[Token(Token = "0x20001C7")]
	[DisallowMultipleComponent]
	public abstract class MilitaryObjective : MonoBehaviour
	{
		[Token(Token = "0x20001C8")]
		[CompilerGenerated]
		private sealed class <Capture>d__11 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000AF3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000AF4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000AF5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MilitaryObjective <>4__this;

			[Token(Token = "0x4000AF6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float captureDuration;

			[Token(Token = "0x1700017F")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000C42")]
				[Address(RVA = "0xBBD2D0", Offset = "0xBBD2D0", VA = "0xBBD2D0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000180")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000C44")]
				[Address(RVA = "0xBBD318", Offset = "0xBBD318", VA = "0xBBD318", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000C3F")]
			[Address(RVA = "0xBBCD80", Offset = "0xBBCD80", VA = "0xBBCD80")]
			[DebuggerHidden]
			public <Capture>d__11(int <>1__state)
			{
			}

			[Token(Token = "0x6000C40")]
			[Address(RVA = "0xBBD218", Offset = "0xBBD218", VA = "0xBBD218", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000C41")]
			[Address(RVA = "0xBBD21C", Offset = "0xBBD21C", VA = "0xBBD21C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000C43")]
			[Address(RVA = "0xBBD2D8", Offset = "0xBBD2D8", VA = "0xBBD2D8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000AEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MilitaryObjectiveConfiguration militaryObjectiveConfiguration;

		[Token(Token = "0x4000AED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly HashSet<Army> attackersArmies;

		[Token(Token = "0x4000AEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly HashSet<MilitaryObjective> defenses;

		[Token(Token = "0x4000AEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly List<Army> capturingArmies;

		[Token(Token = "0x4000AF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool captureInProgress;

		[Token(Token = "0x4000AF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float captureStartTime;

		[Token(Token = "0x4000AF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Coroutine captureCoroutine;

		[Token(Token = "0x6000C32")]
		[Address(RVA = "0xBBCA1C", Offset = "0xBBCA1C", VA = "0xBBCA1C")]
		public void Attack(Army attackingArmy)
		{
		}

		[Token(Token = "0x6000C33")]
		[Address(RVA = "0xBBB300", Offset = "0xBBB300", VA = "0xBBB300")]
		public void AddDefense(MilitaryObjective defense)
		{
		}

		[Token(Token = "0x6000C34")]
		[Address(RVA = "0xBBB460", Offset = "0xBBB460", VA = "0xBBB460")]
		public void RemoveDefense(MilitaryObjective defense)
		{
		}

		[Token(Token = "0x6000C35")]
		[Address(RVA = "0xBBCA74", Offset = "0xBBCA74", VA = "0xBBCA74")]
		public bool StartCapture(Army army, out HashSet<MilitaryObjective> remainingDefenses)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C36")]
		[Address(RVA = "0xBBCCFC", Offset = "0xBBCCFC", VA = "0xBBCCFC")]
		[IteratorStateMachine(typeof(<Capture>d__11))]
		private IEnumerator Capture(float captureDuration)
		{
			return null;
		}

		[Token(Token = "0x6000C37")]
		[Address(RVA = "0xBBCBB4", Offset = "0xBBCBB4", VA = "0xBBCBB4")]
		private bool IsDefended(out HashSet<MilitaryObjective> remainingDefenses)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C38")]
		[Address(RVA = "0xBBCDA8", Offset = "0xBBCDA8", VA = "0xBBCDA8")]
		private void Reset()
		{
		}

		[Token(Token = "0x6000C39")]
		[Address(RVA = "0xBBD020", Offset = "0xBBD020", VA = "0xBBD020")]
		private void Capture()
		{
		}

		[Token(Token = "0x6000C3A")]
		private static void RemoveNulls<T>(List<T> list) where T : MonoBehaviour
		{
		}

		[Token(Token = "0x6000C3B")]
		protected abstract void OnCaptured(Army army);

		[Token(Token = "0x6000C3C")]
		public abstract bool IsFinalObjective(out MilitaryObjective nextObjective);

		[Token(Token = "0x6000C3D")]
		public abstract Town GetRelatedCity();

		[Token(Token = "0x6000C3E")]
		[Address(RVA = "0xBBB500", Offset = "0xBBB500", VA = "0xBBB500")]
		protected MilitaryObjective()
		{
		}
	}
	[Token(Token = "0x20001CA")]
	[CreateAssetMenu(fileName = "Military Objective Configuration", menuName = "Realms/Military Objective Configuration", order = 0)]
	public class MilitaryObjectiveConfiguration : ScriptableObject
	{
		[Token(Token = "0x4000AFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float captureDuration;

		[Token(Token = "0x6000C49")]
		[Address(RVA = "0xBBD450", Offset = "0xBBD450", VA = "0xBBD450")]
		public MilitaryObjectiveConfiguration()
		{
		}
	}
	[Token(Token = "0x20001CB")]
	public class Realm : IComparable<Realm>
	{
		[Token(Token = "0x20001CC")]
		public enum RealmBeliefType
		{
			[Token(Token = "0x4000B06")]
			Player,
			[Token(Token = "0x4000B07")]
			Neutral,
			[Token(Token = "0x4000B08")]
			Heretic
		}

		[Token(Token = "0x4000AFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Guid Id;

		[Token(Token = "0x4000AFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string Name;

		[Token(Token = "0x4000AFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Guid CapitalId;

		[Token(Token = "0x4000AFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Dictionary<Guid, Town> Cities;

		[Token(Token = "0x4000AFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Human Leader;

		[Token(Token = "0x4000B00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public List<Human> Heirs;

		[Token(Token = "0x4000B01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public RealmType Type;

		[Token(Token = "0x4000B02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Heraldry Heraldry;

		[Token(Token = "0x4000B03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public RealmBeliefType BeliefType;

		[Token(Token = "0x17000181")]
		public HashSet<TownType> Cultures
		{
			[Token(Token = "0x6000C4A")]
			[Address(RVA = "0xBBD460", Offset = "0xBBD460", VA = "0xBBD460")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000182")]
		public Position CapitalPosition
		{
			[Token(Token = "0x6000C4B")]
			[Address(RVA = "0xBBD624", Offset = "0xBBD624", VA = "0xBBD624")]
			[CompilerGenerated]
			get
			{
				return default(Position);
			}
			[Token(Token = "0x6000C4C")]
			[Address(RVA = "0xBBD634", Offset = "0xBBD634", VA = "0xBBD634")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000183")]
		public Town Capital
		{
			[Token(Token = "0x6000C4F")]
			[Address(RVA = "0xBBE128", Offset = "0xBBE128", VA = "0xBBE128")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C50")]
			[Address(RVA = "0xBBD8EC", Offset = "0xBBD8EC", VA = "0xBBD8EC")]
			private set
			{
			}
		}

		[Token(Token = "0x17000184")]
		public List<Town> Lands
		{
			[Token(Token = "0x6000C53")]
			[Address(RVA = "0xBBEC00", Offset = "0xBBEC00", VA = "0xBBEC00")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C4D")]
		[Address(RVA = "0xBBD640", Offset = "0xBBD640", VA = "0xBBD640")]
		public Realm(Town capital, Human leader, RealmBeliefType beliefType)
		{
		}

		[Token(Token = "0x6000C4E")]
		[Address(RVA = "0xBBDB10", Offset = "0xBBDB10", VA = "0xBBDB10")]
		public Realm(RealmData data)
		{
		}

		[Token(Token = "0x6000C51")]
		[Address(RVA = "0xBBE18C", Offset = "0xBBE18C", VA = "0xBBE18C")]
		public void ChangeCapitalOrDestroy()
		{
		}

		[Token(Token = "0x6000C52")]
		[Address(RVA = "0xBBE2F8", Offset = "0xBBE2F8", VA = "0xBBE2F8")]
		private static bool SelectBestCapital(Realm realm, out Town bestCapital)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C54")]
		[Address(RVA = "0xBBEE64", Offset = "0xBBEE64", VA = "0xBBEE64")]
		public RealmData ToData()
		{
			return null;
		}

		[Token(Token = "0x6000C55")]
		[Address(RVA = "0xBBF160", Offset = "0xBBF160", VA = "0xBBF160", Slot = "4")]
		public int CompareTo(Realm other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001CD")]
	public class RealmDisplay : MonoBehaviour
	{
		[Token(Token = "0x4000B09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TextMeshPro realmName;

		[Token(Token = "0x4000B0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocalizedText realmType;

		[Token(Token = "0x4000B0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool init;

		[Token(Token = "0x4000B0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Realm realm;

		[Token(Token = "0x6000C56")]
		[Address(RVA = "0xBBF184", Offset = "0xBBF184", VA = "0xBBF184")]
		public void Init(Realm realmToDisplay)
		{
		}

		[Token(Token = "0x6000C57")]
		[Address(RVA = "0xBBF51C", Offset = "0xBBF51C", VA = "0xBBF51C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000C58")]
		[Address(RVA = "0xBBF1A0", Offset = "0xBBF1A0", VA = "0xBBF1A0")]
		public void Refresh()
		{
		}

		[Token(Token = "0x6000C59")]
		[Address(RVA = "0xBBF5A4", Offset = "0xBBF5A4", VA = "0xBBF5A4")]
		public RealmDisplay()
		{
		}
	}
	[Token(Token = "0x20001CE")]
	public class RealmManager : MonoBehaviour
	{
		[Token(Token = "0x20001D4")]
		[CompilerGenerated]
		private sealed class <InterpretOmen>d__69 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000B22")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000B23")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000B24")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public RealmManager <>4__this;

			[Token(Token = "0x4000B25")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public bool goodOmen;

			[Token(Token = "0x4000B26")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Realm realm;

			[Token(Token = "0x4000B27")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Town target;

			[Token(Token = "0x1700018E")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000CA7")]
				[Address(RVA = "0xBC6984", Offset = "0xBC6984", VA = "0xBC6984", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700018F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000CA9")]
				[Address(RVA = "0xBC69CC", Offset = "0xBC69CC", VA = "0xBC69CC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000CA4")]
			[Address(RVA = "0xBC52B8", Offset = "0xBC52B8", VA = "0xBC52B8")]
			[DebuggerHidden]
			public <InterpretOmen>d__69(int <>1__state)
			{
			}

			[Token(Token = "0x6000CA5")]
			[Address(RVA = "0xBC5C4C", Offset = "0xBC5C4C", VA = "0xBC5C4C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000CA6")]
			[Address(RVA = "0xBC5C50", Offset = "0xBC5C50", VA = "0xBC5C50", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000CA8")]
			[Address(RVA = "0xBC698C", Offset = "0xBC698C", VA = "0xBC698C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000B0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RealmManagerConfiguration configuration;

		[Token(Token = "0x4000B0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public OmenDecisionMaker goodOmenDecisionMaker;

		[Token(Token = "0x4000B10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public OmenDecisionMaker badOmenDecisionMaker;

		[Token(Token = "0x4000B11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private SortedSet<Realm> realms;

		[Token(Token = "0x4000B12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly List<Realm> realmsToDestroy;

		[Token(Token = "0x4000B13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Dictionary<Guid, RealmDisplay> realmDisplays;

		[Token(Token = "0x4000B16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Coroutine checkAttackCoroutine;

		[Token(Token = "0x17000185")]
		public static RealmManager Instance
		{
			[Token(Token = "0x6000C5A")]
			[Address(RVA = "0xBBF5AC", Offset = "0xBBF5AC", VA = "0xBBF5AC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C5B")]
			[Address(RVA = "0xBBF5F4", Offset = "0xBBF5F4", VA = "0xBBF5F4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000186")]
		public HashSet<Treaty> treaties
		{
			[Token(Token = "0x6000C5C")]
			[Address(RVA = "0xBBF64C", Offset = "0xBBF64C", VA = "0xBBF64C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C5D")]
			[Address(RVA = "0xBBF654", Offset = "0xBBF654", VA = "0xBBF654")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000187")]
		public Dictionary<RealmPair, int> relations
		{
			[Token(Token = "0x6000C5E")]
			[Address(RVA = "0xBBF65C", Offset = "0xBBF65C", VA = "0xBBF65C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C5F")]
			[Address(RVA = "0xBBF664", Offset = "0xBBF664", VA = "0xBBF664")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000188")]
		public static SortedSet<Realm> Realms
		{
			[Token(Token = "0x6000C60")]
			[Address(RVA = "0xBBF66C", Offset = "0xBBF66C", VA = "0xBBF66C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000189")]
		public bool InspirationAllowed
		{
			[Token(Token = "0x6000C61")]
			[Address(RVA = "0xBBF6B8", Offset = "0xBBF6B8", VA = "0xBBF6B8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700018A")]
		public int PlayerRealmsCount
		{
			[Token(Token = "0x6000C62")]
			[Address(RVA = "0xBBF934", Offset = "0xBBF934", VA = "0xBBF934")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700018B")]
		public int HereticRealmsCount
		{
			[Token(Token = "0x6000C63")]
			[Address(RVA = "0xBBFAA8", Offset = "0xBBFAA8", VA = "0xBBFAA8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700018C")]
		public int NeutralRealmsCount
		{
			[Token(Token = "0x6000C64")]
			[Address(RVA = "0xBBFC1C", Offset = "0xBBFC1C", VA = "0xBBFC1C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700018D")]
		public int RealmsCount
		{
			[Token(Token = "0x6000C65")]
			[Address(RVA = "0xBBFD90", Offset = "0xBBFD90", VA = "0xBBFD90")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000C66")]
		[Address(RVA = "0xBBFDE0", Offset = "0xBBFDE0", VA = "0xBBFDE0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000C67")]
		[Address(RVA = "0xBBFF80", Offset = "0xBBFF80", VA = "0xBBFF80")]
		private void Start()
		{
		}

		[Token(Token = "0x6000C68")]
		[Address(RVA = "0xBC00EC", Offset = "0xBC00EC", VA = "0xBC00EC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000C69")]
		[Address(RVA = "0xBC05E0", Offset = "0xBC05E0", VA = "0xBC05E0")]
		private bool CheckCapitals()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C6A")]
		[Address(RVA = "0xBC024C", Offset = "0xBC024C", VA = "0xBC024C")]
		private bool CheckLeaders()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C6B")]
		[Address(RVA = "0xBC1034", Offset = "0xBC1034", VA = "0xBC1034")]
		private void Rebellion()
		{
		}

		[Token(Token = "0x6000C6C")]
		[Address(RVA = "0xBC132C", Offset = "0xBC132C", VA = "0xBC132C")]
		private void HereticRebellion()
		{
		}

		[Token(Token = "0x6000C6D")]
		[Address(RVA = "0xBC1D08", Offset = "0xBC1D08", VA = "0xBC1D08")]
		private void CreateRelations(Realm newRealm)
		{
		}

		[Token(Token = "0x6000C6E")]
		[Address(RVA = "0xBC161C", Offset = "0xBC161C", VA = "0xBC161C")]
		private bool FindBestRebelCity(Realm realm, out Town bestRebelCity)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C6F")]
		[Address(RVA = "0xBC1ED4", Offset = "0xBC1ED4", VA = "0xBC1ED4")]
		private bool FindBestHereticRebelCity(Realm playerRealm, out Town bestRebelCity)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C70")]
		[Address(RVA = "0xBC0D04", Offset = "0xBC0D04", VA = "0xBC0D04")]
		private void UpdateTreaties()
		{
		}

		[Token(Token = "0x6000C71")]
		[Address(RVA = "0xBC0974", Offset = "0xBC0974", VA = "0xBC0974")]
		private void UpdateRelations()
		{
		}

		[Token(Token = "0x6000C72")]
		[Address(RVA = "0xBB92C4", Offset = "0xBB92C4", VA = "0xBB92C4")]
		public static bool IsInPeace(Realm realm1, Realm realm2)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C73")]
		[Address(RVA = "0xBC26DC", Offset = "0xBC26DC", VA = "0xBC26DC")]
		public static bool IsTradeAllowed(Realm realm1, Realm realm2)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C74")]
		[Address(RVA = "0xBC2118", Offset = "0xBC2118", VA = "0xBC2118")]
		public void StartWar(Realm realm1, Realm realm2)
		{
		}

		[Token(Token = "0x6000C75")]
		[Address(RVA = "0xBC2470", Offset = "0xBC2470", VA = "0xBC2470")]
		public void EndWar(Realm realm1, Realm realm2)
		{
		}

		[Token(Token = "0x6000C76")]
		[Address(RVA = "0xBC27E8", Offset = "0xBC27E8", VA = "0xBC27E8")]
		public void AllowTrade(Realm realm1, Realm realm2)
		{
		}

		[Token(Token = "0x6000C77")]
		[Address(RVA = "0xBC2988", Offset = "0xBC2988", VA = "0xBC2988")]
		public void StopTrading(Realm realm1, Realm realm2)
		{
		}

		[Token(Token = "0x6000C78")]
		[Address(RVA = "0xBC2B70", Offset = "0xBC2B70", VA = "0xBC2B70")]
		public bool NewRealm(Town capital, Human leader, Realm.RealmBeliefType realmBeliefType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C79")]
		[Address(RVA = "0xBC1C28", Offset = "0xBC1C28", VA = "0xBC1C28")]
		private void NewRealmDisplay(Realm realm)
		{
		}

		[Token(Token = "0x6000C7A")]
		[Address(RVA = "0xBC2EC8", Offset = "0xBC2EC8", VA = "0xBC2EC8")]
		private void RemoveRealmDisplayIfExist(Realm realm)
		{
		}

		[Token(Token = "0x6000C7B")]
		[Address(RVA = "0xBC2FAC", Offset = "0xBC2FAC", VA = "0xBC2FAC")]
		public void OnLeaderDie(Human leader)
		{
		}

		[Token(Token = "0x6000C7C")]
		[Address(RVA = "0xBC3348", Offset = "0xBC3348", VA = "0xBC3348")]
		public void OnHeirDie(Human heir)
		{
		}

		[Token(Token = "0x6000C7D")]
		[Address(RVA = "0xBC3170", Offset = "0xBC3170", VA = "0xBC3170")]
		private void NewLeader(Realm realm)
		{
		}

		[Token(Token = "0x6000C7E")]
		[Address(RVA = "0xBBE5D8", Offset = "0xBBE5D8", VA = "0xBBE5D8")]
		public void DestroyRealm(Realm realm)
		{
		}

		[Token(Token = "0x6000C7F")]
		[Address(RVA = "0xBC34E8", Offset = "0xBC34E8", VA = "0xBC34E8")]
		public RealmManagerData ToData()
		{
			return null;
		}

		[Token(Token = "0x6000C80")]
		[Address(RVA = "0xBC39A0", Offset = "0xBC39A0", VA = "0xBC39A0")]
		public void LoadState(RealmManagerData realmManagerData)
		{
		}

		[Token(Token = "0x6000C81")]
		[Address(RVA = "0xBC42E0", Offset = "0xBC42E0", VA = "0xBC42E0")]
		public string GetLeaderTitle(Human human)
		{
			return null;
		}

		[Token(Token = "0x6000C82")]
		[Address(RVA = "0xBC4508", Offset = "0xBC4508", VA = "0xBC4508")]
		public string GetHeirTitle(Human human)
		{
			return null;
		}

		[Token(Token = "0x6000C83")]
		[Address(RVA = "0xBC471C", Offset = "0xBC471C", VA = "0xBC471C")]
		public void NewHeir(Human child)
		{
		}

		[Token(Token = "0x6000C84")]
		[Address(RVA = "0xBC4A04", Offset = "0xBC4A04", VA = "0xBC4A04")]
		[ContextMenu("Debug Realms")]
		public void DebugRealms()
		{
		}

		[Token(Token = "0x6000C85")]
		[Address(RVA = "0xBC4CA0", Offset = "0xBC4CA0", VA = "0xBC4CA0")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000C86")]
		[Address(RVA = "0xBBB6A8", Offset = "0xBBB6A8", VA = "0xBBB6A8")]
		public static void AddCityToRealm(Town city, Realm realm, bool captured = false)
		{
		}

		[Token(Token = "0x6000C87")]
		[Address(RVA = "0xBC1A48", Offset = "0xBC1A48", VA = "0xBC1A48")]
		public static void RemoveCityFromRealm(Guid id)
		{
		}

		[Token(Token = "0x6000C88")]
		[Address(RVA = "0xBC4FB0", Offset = "0xBC4FB0", VA = "0xBC4FB0")]
		private static void OnCapitalDestroyed(Realm realm)
		{
		}

		[Token(Token = "0x6000C89")]
		[Address(RVA = "0xBBE56C", Offset = "0xBBE56C", VA = "0xBBE56C")]
		public static void OnCapitalChanged(Realm realm)
		{
		}

		[Token(Token = "0x6000C8A")]
		[Address(RVA = "0xBC4F04", Offset = "0xBC4F04", VA = "0xBC4F04")]
		private static void RefreshRealmDisplay(Realm realm)
		{
		}

		[Token(Token = "0x6000C8B")]
		[Address(RVA = "0xBC5058", Offset = "0xBC5058", VA = "0xBC5058")]
		public void OnOmen(Town target, bool goodOmen)
		{
		}

		[Token(Token = "0x6000C8C")]
		[Address(RVA = "0xBC5200", Offset = "0xBC5200", VA = "0xBC5200")]
		[IteratorStateMachine(typeof(<InterpretOmen>d__69))]
		private IEnumerator InterpretOmen(Realm realm, Town target, bool goodOmen)
		{
			return null;
		}

		[Token(Token = "0x6000C8D")]
		[Address(RVA = "0xBC1808", Offset = "0xBC1808", VA = "0xBC1808")]
		public static bool FindBestKing(HashSet<Human> citizensList, Vector3 bestKingPosition, out Human bestKingCandidate)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C8E")]
		[Address(RVA = "0xBC52E0", Offset = "0xBC52E0", VA = "0xBC52E0")]
		public void ImproveRelations(Realm realm, Realm otherRealm, int value)
		{
		}

		[Token(Token = "0x6000C8F")]
		[Address(RVA = "0xBC53B4", Offset = "0xBC53B4", VA = "0xBC53B4")]
		public bool GetRealmForLeaderOrHeir(Human human, out Realm realm)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C90")]
		[Address(RVA = "0xBC55F8", Offset = "0xBC55F8", VA = "0xBC55F8")]
		public void RenameRealm(Realm realm, string newName)
		{
		}

		[Token(Token = "0x6000C91")]
		[Address(RVA = "0xBC5820", Offset = "0xBC5820", VA = "0xBC5820")]
		public RealmManager()
		{
		}
	}
	[Token(Token = "0x20001D5")]
	[CreateAssetMenu(menuName = "Realms/Realm Manager Configuration")]
	public class RealmManagerConfiguration : ScriptableObject
	{
		[Token(Token = "0x4000B28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RealmDisplay realmDisplayPrefab;

		[Token(Token = "0x4000B29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HeraldicGenerator heraldicGenerator;

		[Token(Token = "0x4000B2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Max Realms Configuration")]
		[Tooltip("How many realms the player can inspire at the same time")]
		public int maxPlayerRealm;

		[Token(Token = "0x4000B2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("How many heretics realms can be in the world at the same time")]
		public int maxHereticRealm;

		[Token(Token = "0x4000B2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("How many neutral realms are allowed in the world at the same time")]
		public int maxNeutralRealm;

		[Token(Token = "0x4000B2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("There will be no rebellion in the player realm if it has less than this number")]
		public int minCitiesForRebellion;

		[Token(Token = "0x4000B2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Range(0f, 1f)]
		[Tooltip("The percentage of chance to have an first heir when a new child is born in the capital")]
		[Header("Heirs Configuration")]
		public float firstHeirChance;

		[Token(Token = "0x4000B2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("The percentage of chance to have another heir when a new child is born in the capital")]
		[Range(0f, 1f)]
		public float heirChance;

		[Token(Token = "0x4000B30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int maxHeirs;

		[Token(Token = "0x4000B31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Header("Realm Types Configuration")]
		public List<RealmType> realmTypes;

		[Token(Token = "0x4000B32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The realm type that will be assigned if no other types is possible")]
		public RealmType fallBackRealmType;

		[Token(Token = "0x4000B33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("Relations Configuration")]
		public List<RelationModifier> relationModifiers;

		[Token(Token = "0x4000B34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public int minRelationValue;

		[Token(Token = "0x4000B35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public int maxRelationValue;

		[Token(Token = "0x4000B36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public int startWarRelationThreshold;

		[Token(Token = "0x4000B37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public int endWarRelationThreshold;

		[Token(Token = "0x4000B38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public int startTradeRelationThreshold;

		[Token(Token = "0x4000B39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public int endTradeRelationThreshold;

		[Token(Token = "0x4000B3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public OmenDecisionMaker omenDecisionMaker;

		[Token(Token = "0x4000B3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Header("Audio Configuration")]
		public AudioSet newRealmSound;

		[Token(Token = "0x4000B3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public AudioSet realmLeaderChangedSound;

		[Token(Token = "0x4000B3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public AudioSet realmSplitSound;

		[Token(Token = "0x4000B3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public AudioSet realmDestroyedSound;

		[Token(Token = "0x4000B3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public AudioSet realmWarSound;

		[Token(Token = "0x4000B40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public AudioSet realmPeaceSound;

		[Token(Token = "0x4000B41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public AudioSet realmTradeSound;

		[Token(Token = "0x4000B42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public AudioSet createArmySound;

		[Token(Token = "0x4000B43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public AudioSet captureCitySound;

		[Token(Token = "0x4000B44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public AudioSet newRebelRealmSound;

		[Token(Token = "0x4000B45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Header("Timers Configuration")]
		public Timer realmRelationUpdateTimer;

		[Token(Token = "0x4000B46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public Timer realmTreatyUpdateTimer;

		[Token(Token = "0x4000B47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public Timer rebellionTimer;

		[Token(Token = "0x4000B48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public Timer hereticRebellionTimer;

		[Token(Token = "0x6000CAA")]
		[Address(RVA = "0xBBD92C", Offset = "0xBBD92C", VA = "0xBBD92C")]
		public RealmType FindRealmType(Realm realm)
		{
			return null;
		}

		[Token(Token = "0x6000CAB")]
		[Address(RVA = "0xBC69D4", Offset = "0xBC69D4", VA = "0xBC69D4")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6000CAC")]
		[Address(RVA = "0xBC69E8", Offset = "0xBC69E8", VA = "0xBC69E8")]
		public RealmManagerConfiguration()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001D6")]
	public struct RealmPair : IEquatable<RealmPair>
	{
		[Token(Token = "0x4000B49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly Realm Realm1;

		[Token(Token = "0x4000B4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly Realm Realm2;

		[Token(Token = "0x6000CAD")]
		[Address(RVA = "0xBC20E0", Offset = "0xBC20E0", VA = "0xBC20E0")]
		public RealmPair(Realm realm1, Realm realm2)
		{
		}

		[Token(Token = "0x6000CAE")]
		[Address(RVA = "0xBC6A10", Offset = "0xBC6A10", VA = "0xBC6A10", Slot = "4")]
		public bool Equals(RealmPair other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CAF")]
		[Address(RVA = "0xBC6A8C", Offset = "0xBC6A8C", VA = "0xBC6A8C", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CB0")]
		[Address(RVA = "0xBC6B04", Offset = "0xBC6B04", VA = "0xBC6B04", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001D7")]
	[CreateAssetMenu(menuName = "Realms/Realm Type")]
	public class RealmType : ScriptableObject
	{
		[Token(Token = "0x4000B4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The minimum number of cities for a realm to be on that type")]
		public int minCity;

		[Token(Token = "0x4000B4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("The minimum number of different cultures for a realm to be on that type")]
		public int minCulture;

		[Token(Token = "0x4000B4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The localization key for the name of the realm type ex: kingdom")]
		public string realmTypeName;

		[Token(Token = "0x4000B4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The localization key for the name of the male leader ex: king")]
		public string leaderNameMale;

		[Token(Token = "0x4000B4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The localization key for the name of the female leader ex: queen")]
		public string leaderNameFemale;

		[Token(Token = "0x4000B50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The localization key for the name of the heir ex: prince")]
		public string heirMaleName;

		[Token(Token = "0x4000B51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The localization key for the name of the heiress ex: princess")]
		public string heirFemaleName;

		[Token(Token = "0x6000CB1")]
		[Address(RVA = "0xBC6B68", Offset = "0xBC6B68", VA = "0xBC6B68")]
		public RealmType()
		{
		}
	}
	[Token(Token = "0x20001D8")]
	public class Territory : MonoBehaviour
	{
		[Token(Token = "0x4000B52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int id;

		[Token(Token = "0x4000B53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BorderConfiguration configuration;

		[Token(Token = "0x4000B56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<BorderRenderer> borderRenderers;

		[Token(Token = "0x4000B57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private BorderConfiguration configurationInstance;

		[Token(Token = "0x17000190")]
		public HashSet<Position> Lands
		{
			[Token(Token = "0x6000CB2")]
			[Address(RVA = "0xBC6B78", Offset = "0xBC6B78", VA = "0xBC6B78")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CB3")]
			[Address(RVA = "0xBC6B80", Offset = "0xBC6B80", VA = "0xBC6B80")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000191")]
		public List<HashSet<Position>> Groups
		{
			[Token(Token = "0x6000CB4")]
			[Address(RVA = "0xBC6B88", Offset = "0xBC6B88", VA = "0xBC6B88")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CB5")]
			[Address(RVA = "0xBC6B90", Offset = "0xBC6B90", VA = "0xBC6B90")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000CB6")]
		[Address(RVA = "0xBC6B98", Offset = "0xBC6B98", VA = "0xBC6B98")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000CB7")]
		[Address(RVA = "0xBC6D04", Offset = "0xBC6D04", VA = "0xBC6D04")]
		public void AddLand(Position position)
		{
		}

		[Token(Token = "0x6000CB8")]
		[Address(RVA = "0xBC74CC", Offset = "0xBC74CC", VA = "0xBC74CC")]
		private void GenerateBorders()
		{
		}

		[Token(Token = "0x6000CB9")]
		[Address(RVA = "0xBC74D0", Offset = "0xBC74D0", VA = "0xBC74D0")]
		public void RemoveLand(Position position)
		{
		}

		[Token(Token = "0x6000CBA")]
		[Address(RVA = "0xBC6DF8", Offset = "0xBC6DF8", VA = "0xBC6DF8")]
		private static List<HashSet<Position>> GroupAdjacentLands(Position[] lands)
		{
			return null;
		}

		[Token(Token = "0x6000CBB")]
		[Address(RVA = "0xBC7580", Offset = "0xBC7580", VA = "0xBC7580")]
		[ContextMenu("Debug Lands")]
		public void DebugLands()
		{
		}

		[Token(Token = "0x6000CBC")]
		[Address(RVA = "0xBC76B4", Offset = "0xBC76B4", VA = "0xBC76B4")]
		public Territory()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001D9")]
	public struct Treaty : IEquatable<Treaty>
	{
		[Token(Token = "0x20001DA")]
		public enum TreatyType
		{
			[Token(Token = "0x4000B5C")]
			Trade,
			[Token(Token = "0x4000B5D")]
			War
		}

		[Token(Token = "0x4000B58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly Realm Realm1;

		[Token(Token = "0x4000B59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly Realm Realm2;

		[Token(Token = "0x4000B5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly TreatyType Type;

		[Token(Token = "0x6000CBD")]
		[Address(RVA = "0xBC2B34", Offset = "0xBC2B34", VA = "0xBC2B34")]
		public Treaty(Realm realm1, Realm realm2, TreatyType type)
		{
		}

		[Token(Token = "0x6000CBE")]
		[Address(RVA = "0xBC76BC", Offset = "0xBC76BC", VA = "0xBC76BC", Slot = "4")]
		public bool Equals(Treaty other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CBF")]
		[Address(RVA = "0xBC774C", Offset = "0xBC774C", VA = "0xBC774C", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CC0")]
		[Address(RVA = "0xBC77DC", Offset = "0xBC77DC", VA = "0xBC77DC", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
}
namespace Realms.RelationModifiers
{
	[Token(Token = "0x20001DB")]
	[CreateAssetMenu(menuName = "Realms/Relation Modifiers/Cultural Differences")]
	public class CulturalDifferencesRelationModifier : RelationModifier
	{
		[Token(Token = "0x4000B5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The value returned if the cultures are similar")]
		public int positiveValue;

		[Token(Token = "0x4000B5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("The value returned if the cultures are different")]
		public int negativeValue;

		[Token(Token = "0x4000B60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Dictionary<TownType, int> counters;

		[Token(Token = "0x6000CC1")]
		[Address(RVA = "0xBC784C", Offset = "0xBC784C", VA = "0xBC784C", Slot = "4")]
		protected override int Evaluate(Realm realm1, Realm realm2)
		{
			return default(int);
		}

		[Token(Token = "0x6000CC2")]
		[Address(RVA = "0xBC78A8", Offset = "0xBC78A8", VA = "0xBC78A8")]
		public CulturalDifferencesRelationModifier()
		{
		}
	}
	[Token(Token = "0x20001DC")]
	[CreateAssetMenu(menuName = "Realms/Relation Modifiers/Leader Differences")]
	public class LeaderDifferencesRelationModifier : RelationModifier
	{
		[Token(Token = "0x4000B61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The value returned if the leaders are similar")]
		public int positiveValue;

		[Token(Token = "0x4000B62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("The value returned if the leaders are different")]
		public int negativeValue;

		[Token(Token = "0x6000CC3")]
		[Address(RVA = "0xBC78B8", Offset = "0xBC78B8", VA = "0xBC78B8", Slot = "4")]
		protected override int Evaluate(Realm realm1, Realm realm2)
		{
			return default(int);
		}

		[Token(Token = "0x6000CC4")]
		[Address(RVA = "0xBC7DBC", Offset = "0xBC7DBC", VA = "0xBC7DBC")]
		public LeaderDifferencesRelationModifier()
		{
		}
	}
	[Token(Token = "0x20001DD")]
	[CreateAssetMenu(menuName = "Realms/Relation Modifier")]
	public class RelationModifier : ScriptableObject
	{
		[Token(Token = "0x4000B63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The key used to find the localized text describing this relation modifier")]
		public string localizationKey;

		[Token(Token = "0x6000CC5")]
		[Address(RVA = "0xBC2B28", Offset = "0xBC2B28", VA = "0xBC2B28")]
		public int Evaluate(RealmPair realmPair)
		{
			return default(int);
		}

		[Token(Token = "0x6000CC6")]
		[Address(RVA = "0xBC7DC4", Offset = "0xBC7DC4", VA = "0xBC7DC4", Slot = "4")]
		protected virtual int Evaluate(Realm realm1, Realm realm2)
		{
			return default(int);
		}

		[Token(Token = "0x6000CC7")]
		[Address(RVA = "0xBC78B0", Offset = "0xBC78B0", VA = "0xBC78B0")]
		public RelationModifier()
		{
		}
	}
	[Token(Token = "0x20001DE")]
	[CreateAssetMenu(menuName = "Realms/Relation Modifiers/Religious Differences")]
	public class ReligiousDifferencesRelationModifier : RelationModifier
	{
		[Token(Token = "0x4000B64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The value returned if the faith is similar")]
		public int positiveValue;

		[Token(Token = "0x4000B65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("The value returned if the faith is different")]
		public int negativeValue;

		[Token(Token = "0x6000CC8")]
		[Address(RVA = "0xBC7DCC", Offset = "0xBC7DCC", VA = "0xBC7DCC", Slot = "4")]
		protected override int Evaluate(Realm realm1, Realm realm2)
		{
			return default(int);
		}

		[Token(Token = "0x6000CC9")]
		[Address(RVA = "0xBC7E48", Offset = "0xBC7E48", VA = "0xBC7E48")]
		public ReligiousDifferencesRelationModifier()
		{
		}
	}
}
namespace Realms.OmenDecisions
{
	[Token(Token = "0x20001DF")]
	[CreateAssetMenu(fileName = "Attack", menuName = "Realms/Omen Decisions/Attack", order = 0)]
	public class AttackOmenDecision : OmenDecision
	{
		[Token(Token = "0x6000CCA")]
		[Address(RVA = "0xBC7E50", Offset = "0xBC7E50", VA = "0xBC7E50", Slot = "4")]
		public override bool Execute(Realm realm, Town target)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CCB")]
		[Address(RVA = "0xBC7EE4", Offset = "0xBC7EE4", VA = "0xBC7EE4")]
		public AttackOmenDecision()
		{
		}
	}
	[Token(Token = "0x20001E0")]
	[CreateAssetMenu(fileName = "Burn City", menuName = "Realms/Omen Decisions/Brun City", order = 0)]
	public class BurnCityOmenDecision : OmenDecision
	{
		[Token(Token = "0x6000CCC")]
		[Address(RVA = "0xBC7EF4", Offset = "0xBC7EF4", VA = "0xBC7EF4", Slot = "4")]
		public override bool Execute(Realm realm, Town target)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CCD")]
		[Address(RVA = "0xBC7F2C", Offset = "0xBC7F2C", VA = "0xBC7F2C")]
		public BurnCityOmenDecision()
		{
		}
	}
	[Token(Token = "0x20001E1")]
	[CreateAssetMenu(fileName = "Change Happiness", menuName = "Realms/Omen Decisions/Change Happiness", order = 0)]
	public class ChangeHappinessOmenDecision : OmenDecision
	{
		[Token(Token = "0x4000B66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int value;

		[Token(Token = "0x6000CCE")]
		[Address(RVA = "0xBC7F34", Offset = "0xBC7F34", VA = "0xBC7F34", Slot = "4")]
		public override bool Execute(Realm realm, Town target)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CCF")]
		[Address(RVA = "0xBC7F78", Offset = "0xBC7F78", VA = "0xBC7F78")]
		public ChangeHappinessOmenDecision()
		{
		}
	}
	[Token(Token = "0x20001E2")]
	[CreateAssetMenu(fileName = "Improve Relations", menuName = "Realms/Omen Decisions/Improve Relations", order = 0)]
	public class ImproveRelationsOmenDecision : OmenDecision
	{
		[Token(Token = "0x4000B67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Min(0f)]
		public int value;

		[Token(Token = "0x6000CD0")]
		[Address(RVA = "0xBC7F80", Offset = "0xBC7F80", VA = "0xBC7F80", Slot = "4")]
		public override bool Execute(Realm realm, Town target)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CD1")]
		[Address(RVA = "0xBC800C", Offset = "0xBC800C", VA = "0xBC800C")]
		public ImproveRelationsOmenDecision()
		{
		}
	}
	[Token(Token = "0x20001E3")]
	[CreateAssetMenu(fileName = "Minor Decision", menuName = "Realms/Omen Decisions/Minor Decision", order = 0)]
	public class MinorOmenDecision : OmenDecision
	{
		[Token(Token = "0x6000CD2")]
		[Address(RVA = "0xBC8014", Offset = "0xBC8014", VA = "0xBC8014", Slot = "4")]
		public override bool Execute(Realm realm, Town target)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CD3")]
		[Address(RVA = "0xBC801C", Offset = "0xBC801C", VA = "0xBC801C")]
		public MinorOmenDecision()
		{
		}
	}
	[Token(Token = "0x20001E4")]
	public abstract class OmenDecision : ScriptableObject
	{
		[Token(Token = "0x4000B68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string localizedMessageKey;

		[Token(Token = "0x4000B69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioSet audioNotification;

		[Token(Token = "0x6000CD4")]
		public abstract bool Execute(Realm realm, Town target);

		[Token(Token = "0x6000CD5")]
		[Address(RVA = "0xBC7EEC", Offset = "0xBC7EEC", VA = "0xBC7EEC")]
		protected OmenDecision()
		{
		}
	}
	[Token(Token = "0x20001E5")]
	[CreateAssetMenu(fileName = "Omen Decision Maker", menuName = "Realms/Omen Decision Maker", order = 0)]
	public class OmenDecisionMaker : ScriptableObject
	{
		[Serializable]
		[Token(Token = "0x20001E6")]
		public struct TraitsDecisions
		{
			[Token(Token = "0x4000B74")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Trait trait;

			[Token(Token = "0x4000B75")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public OmenDecision controlledCity;

			[Token(Token = "0x4000B76")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public OmenDecision freeCity;

			[Token(Token = "0x4000B77")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public OmenDecision neutralCity;

			[Token(Token = "0x4000B78")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public OmenDecision friendlyCity;

			[Token(Token = "0x4000B79")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public OmenDecision enemyCity;
		}

		[Token(Token = "0x4000B6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("How much time we wait after the omen before we can make a decision")]
		public float decisionTime;

		[Token(Token = "0x4000B6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Common Sense")]
		public string commonSenseKey;

		[Token(Token = "0x4000B6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public OmenDecision controlledCity;

		[Token(Token = "0x4000B6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public OmenDecision freeCity;

		[Token(Token = "0x4000B6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public OmenDecision neutralCity;

		[Token(Token = "0x4000B6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public OmenDecision friendlyCity;

		[Token(Token = "0x4000B70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public OmenDecision enemyCity;

		[Token(Token = "0x4000B71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Decisions")]
		public List<TraitsDecisions> decisions;

		[Token(Token = "0x4000B72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Dictionary<OmenDecision, int> votesCounts;

		[Token(Token = "0x4000B73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Dictionary<Trait, OmenDecision> votes;

		[Token(Token = "0x6000CD6")]
		[Address(RVA = "0xBC5D38", Offset = "0xBC5D38", VA = "0xBC5D38")]
		public void OnOmen(Realm realm, Town target)
		{
		}

		[Token(Token = "0x6000CD7")]
		[Address(RVA = "0xBC80F8", Offset = "0xBC80F8", VA = "0xBC80F8")]
		private void TryExecute(OmenDecision omenDecision, Realm realm, Town target, string traits)
		{
		}

		[Token(Token = "0x6000CD8")]
		[Address(RVA = "0xBC8024", Offset = "0xBC8024", VA = "0xBC8024")]
		private void VoteFor(OmenDecision voteForDecision)
		{
		}

		[Token(Token = "0x6000CD9")]
		[Address(RVA = "0xBC82A0", Offset = "0xBC82A0", VA = "0xBC82A0")]
		public OmenDecisionMaker()
		{
		}
	}
	[Token(Token = "0x20001E7")]
	[CreateAssetMenu(fileName = "Start War", menuName = "Realms/Omen Decisions/Start War", order = 0)]
	public class StartWarOmenDecision : OmenDecision
	{
		[Token(Token = "0x6000CDA")]
		[Address(RVA = "0xBC83A4", Offset = "0xBC83A4", VA = "0xBC83A4", Slot = "4")]
		public override bool Execute(Realm realm, Town target)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CDB")]
		[Address(RVA = "0xBC8438", Offset = "0xBC8438", VA = "0xBC8438")]
		public StartWarOmenDecision()
		{
		}
	}
}
namespace PrimitivesScriptableObjects
{
	[Token(Token = "0x20001E8")]
	[CreateAssetMenu(fileName = "ColorList", menuName = "Colors/Color List Variable", order = 0)]
	public class ColorListVariable : ScriptableObject
	{
		[Token(Token = "0x4000B7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<Color> colors;

		[Token(Token = "0x6000CDC")]
		[Address(RVA = "0xBC8440", Offset = "0xBC8440", VA = "0xBC8440")]
		public static implicit operator Color(ColorListVariable colorVariable)
		{
			return default(Color);
		}

		[Token(Token = "0x6000CDD")]
		[Address(RVA = "0xBC84B8", Offset = "0xBC84B8", VA = "0xBC84B8")]
		public ColorListVariable()
		{
		}
	}
	[Token(Token = "0x20001E9")]
	[CreateAssetMenu(fileName = "Color", menuName = "Colors/Color Variable", order = 0)]
	public class ColorVariable : ScriptableObject
	{
		[Token(Token = "0x4000B7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Color value;

		[Token(Token = "0x6000CDE")]
		[Address(RVA = "0xBC84C0", Offset = "0xBC84C0", VA = "0xBC84C0")]
		public static implicit operator Color(ColorVariable colorVariable)
		{
			return default(Color);
		}

		[Token(Token = "0x6000CDF")]
		[Address(RVA = "0xBC84DC", Offset = "0xBC84DC", VA = "0xBC84DC")]
		public ColorVariable()
		{
		}
	}
}
namespace Pooling
{
	[Token(Token = "0x20001EA")]
	[CreateAssetMenu(fileName = "PoolableObject Collection", menuName = "Pooling/Poolable Objects Collection", order = 0)]
	public class PoolableObjectCollection : ScriptableObject
	{
		[Token(Token = "0x4000B7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<PoolableObject> poolableObjects;

		[Token(Token = "0x6000CE0")]
		[Address(RVA = "0xBC84E4", Offset = "0xBC84E4", VA = "0xBC84E4")]
		public PoolableObjectCollection()
		{
		}
	}
	[Token(Token = "0x20001EB")]
	[CreateAssetMenu(fileName = "PoolableObject Database", menuName = "Pooling/Poolable Objects Database", order = 0)]
	public class PoolableObjectDatabase : ScriptableObject
	{
		[Token(Token = "0x4000B7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<PoolableObjectCollection> poolableObjectsCollections;

		[Token(Token = "0x6000CE1")]
		[Address(RVA = "0xBC84EC", Offset = "0xBC84EC", VA = "0xBC84EC")]
		public PoolableObjectDatabase()
		{
		}
	}
	[Token(Token = "0x20001EC")]
	[RequireComponent(typeof(PoolableObject))]
	public class SelfPooler : MonoBehaviour
	{
		[Token(Token = "0x4000B7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PoolableObject poolableObject;

		[Token(Token = "0x6000CE2")]
		[Address(RVA = "0xBC84F4", Offset = "0xBC84F4", VA = "0xBC84F4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000CE3")]
		[Address(RVA = "0xBC8560", Offset = "0xBC8560", VA = "0xBC8560")]
		public SelfPooler()
		{
		}
	}
}
namespace Platforms
{
	[Token(Token = "0x20001ED")]
	public class OculusPlatformController : PlatformController
	{
		[Token(Token = "0x4000B7F")]
		public const string RiftAppId = "1101455296589556";

		[Token(Token = "0x4000B80")]
		public const string QuestAppId = "3526702020710931";

		[Token(Token = "0x17000192")]
		protected override bool IsCurrentPlatform
		{
			[Token(Token = "0x6000CE4")]
			[Address(RVA = "0xBC8568", Offset = "0xBC8568", VA = "0xBC8568", Slot = "4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000CE5")]
		[Address(RVA = "0xBC8570", Offset = "0xBC8570", VA = "0xBC8570")]
		private void Start()
		{
		}

		[Token(Token = "0x6000CE6")]
		[Address(RVA = "0xBC871C", Offset = "0xBC871C", VA = "0xBC871C")]
		private void EntitlementRequestCallback(Oculus.Platform.Message msg)
		{
		}

		[Token(Token = "0x6000CE7")]
		[Address(RVA = "0xBC88EC", Offset = "0xBC88EC", VA = "0xBC88EC", Slot = "5")]
		protected override void InitPlatform()
		{
		}

		[Token(Token = "0x6000CE8")]
		[Address(RVA = "0xBC88F8", Offset = "0xBC88F8", VA = "0xBC88F8", Slot = "6")]
		protected override void ReallyUnlockAchievement(string achievementKey)
		{
		}

		[Token(Token = "0x6000CE9")]
		[Address(RVA = "0xBC8A14", Offset = "0xBC8A14", VA = "0xBC8A14")]
		public OculusPlatformController()
		{
		}
	}
	[Token(Token = "0x20001EF")]
	public class PicoPlatformController : PlatformController
	{
		[Token(Token = "0x4000B84")]
		private const string AppId = "a28b1dacaac54cc3523e7d95849fc74b";

		[Token(Token = "0x4000B85")]
		private const string PublicKey = "441de29c1cae14379ce03ca8a1837369";

		[Token(Token = "0x6000CEE")]
		[Address(RVA = "0xBC8D08", Offset = "0xBC8D08", VA = "0xBC8D08")]
		public PicoPlatformController()
		{
		}
	}
	[Token(Token = "0x20001F0")]
	public abstract class PlatformController : MonoBehaviour
	{
		[Token(Token = "0x4000B86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static PlatformController Instance;

		[Token(Token = "0x4000B87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected bool Init;

		[Token(Token = "0x17000193")]
		protected virtual bool IsCurrentPlatform
		{
			[Token(Token = "0x6000CEF")]
			[Address(RVA = "0xBC8D10", Offset = "0xBC8D10", VA = "0xBC8D10", Slot = "4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000CF0")]
		[Address(RVA = "0xBC8D18", Offset = "0xBC8D18", VA = "0xBC8D18")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000CF1")]
		[Address(RVA = "0xBC8DE0", Offset = "0xBC8DE0", VA = "0xBC8DE0", Slot = "5")]
		protected virtual void InitPlatform()
		{
		}

		[Token(Token = "0x6000CF2")]
		[Address(RVA = "0xBC8DEC", Offset = "0xBC8DEC", VA = "0xBC8DEC")]
		public void ReallyUnlockAchievement(Achievement achievement)
		{
		}

		[Token(Token = "0x6000CF3")]
		[Address(RVA = "0xBC8EE0", Offset = "0xBC8EE0", VA = "0xBC8EE0", Slot = "6")]
		protected virtual void ReallyUnlockAchievement(string achievementKey)
		{
		}

		[Token(Token = "0x6000CF4")]
		[Address(RVA = "0xBC8A1C", Offset = "0xBC8A1C", VA = "0xBC8A1C")]
		protected PlatformController()
		{
		}
	}
	[Token(Token = "0x20001F1")]
	public class SteamPlatformController : PlatformController
	{
		[Token(Token = "0x6000CF5")]
		[Address(RVA = "0xBC8EE4", Offset = "0xBC8EE4", VA = "0xBC8EE4")]
		public SteamPlatformController()
		{
		}
	}
	[Token(Token = "0x20001F2")]
	public class ViveportPlatformController : PlatformController, IBeforeExitAction
	{
		[Token(Token = "0x4000B88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static string VIVEPORT_ID;

		[Token(Token = "0x4000B89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static string VIVEPORT_KEY;

		[Token(Token = "0x4000B8A")]
		private const int SUCCESS = 0;

		[Token(Token = "0x4000B8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static bool bInitComplete;

		[Token(Token = "0x6000CF6")]
		[Address(RVA = "0xBC8EEC", Offset = "0xBC8EEC", VA = "0xBC8EEC", Slot = "7")]
		public void ExecuteBeforeQuit()
		{
		}

		[Token(Token = "0x6000CF7")]
		[Address(RVA = "0xBC8EF0", Offset = "0xBC8EF0", VA = "0xBC8EF0")]
		public ViveportPlatformController()
		{
		}
	}
}
namespace Pathfinding
{
	[Token(Token = "0x20001F3")]
	public class ClosestReachablePositionPathRequest
	{
		[Token(Token = "0x4000B8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<PathManager.PathRequest> PathRequests;

		[Token(Token = "0x4000B8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly float startTime;

		[Token(Token = "0x17000194")]
		public PathManager.PathStatus Status
		{
			[Token(Token = "0x6000CF9")]
			[Address(RVA = "0xBC8FA4", Offset = "0xBC8FA4", VA = "0xBC8FA4")]
			get
			{
				return default(PathManager.PathStatus);
			}
		}

		[Token(Token = "0x17000195")]
		public PathManager.PathRequest ClosestPathRequest
		{
			[Token(Token = "0x6000CFA")]
			[Address(RVA = "0xBC9168", Offset = "0xBC9168", VA = "0xBC9168")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000196")]
		public bool Finished
		{
			[Token(Token = "0x6000CFC")]
			[Address(RVA = "0xBC93B0", Offset = "0xBC93B0", VA = "0xBC93B0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000197")]
		public bool Outdated
		{
			[Token(Token = "0x6000CFD")]
			[Address(RVA = "0xBC9358", Offset = "0xBC9358", VA = "0xBC9358")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000CFB")]
		[Address(RVA = "0xBC93D8", Offset = "0xBC93D8", VA = "0xBC93D8")]
		public ClosestReachablePositionPathRequest(Position startPosition, HashSet<Position> destinations)
		{
		}
	}
	[Token(Token = "0x20001F4")]
	[CreateAssetMenu(menuName = "Pathfinding/Navigation Agent Configuration")]
	public class NavigationAgentConfiguration : ScriptableObject
	{
		[Token(Token = "0x20001F5")]
		public enum WalkSpeed
		{
			[Token(Token = "0x4000B99")]
			Slow,
			[Token(Token = "0x4000B9A")]
			Normal,
			[Token(Token = "0x4000B9B")]
			Fast
		}

		[Token(Token = "0x4000B8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PathManager.PathfindingWorld pathfindingWorld;

		[Token(Token = "0x4000B8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public WalkSpeed defaultWalkSpeed;

		[Token(Token = "0x4000B90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float slowWalkSpeed;

		[Token(Token = "0x4000B91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float normalWalkSpeed;

		[Token(Token = "0x4000B92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float fastWalkSpeed;

		[Token(Token = "0x4000B93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float closeDistance;

		[Token(Token = "0x4000B94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool diagonalAllowed;

		[Token(Token = "0x4000B95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("Tolerance to consider that a path node has been reached")]
		public float closeToNodeDistance;

		[Token(Token = "0x4000B96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Tolerance to consider that a the contact point between 2 diagonal tiles had been reached")]
		public float closeToDiagonalContactPointDistance;

		[Token(Token = "0x4000B97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("Tolerance to consider that an agent is able to reach an adjacent walkable tile")]
		public float stuckGraceDistance;

		[Token(Token = "0x6000CFE")]
		[Address(RVA = "0xBC9780", Offset = "0xBC9780", VA = "0xBC9780")]
		public float GetSpeed(WalkSpeed currentWalkSpeed)
		{
			return default(float);
		}

		[Token(Token = "0x6000CFF")]
		[Address(RVA = "0xBC97B0", Offset = "0xBC97B0", VA = "0xBC97B0")]
		public NavigationAgentConfiguration()
		{
		}
	}
	[Token(Token = "0x20001F6")]
	[CreateAssetMenu(menuName = "Pathfinding/Navigation Constraints")]
	public class NavigationConstraints : ScriptableObject
	{
		[Token(Token = "0x4000B9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TerrainPathConstraint[] constraints;

		[Token(Token = "0x6000D00")]
		[Address(RVA = "0xBC97E8", Offset = "0xBC97E8", VA = "0xBC97E8")]
		public void OnValidate()
		{
		}

		[Token(Token = "0x6000D01")]
		[Address(RVA = "0xBC9964", Offset = "0xBC9964", VA = "0xBC9964")]
		public bool IsWalkable(TerrainType terrainType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D02")]
		[Address(RVA = "0xBC99DC", Offset = "0xBC99DC", VA = "0xBC99DC")]
		public NavigationConstraints()
		{
		}
	}
	[Token(Token = "0x20001F7")]
	[CreateAssetMenu(menuName = "Pathfinding/Pathfinding Configuration")]
	public class PathfindingConfiguration : ScriptableObject
	{
		[Token(Token = "0x4000B9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("How much path the system compute per frame")]
		public int pathPerFrame;

		[Token(Token = "0x4000B9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Cost multiplier for straight movements")]
		public int straightCost;

		[Token(Token = "0x4000B9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Cost multiplier for diagonal movements")]
		public int diagonalCost;

		[Token(Token = "0x4000BA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("How much requests we accumulate in the Queue before we display a warning")]
		public int queueWarning;

		[Token(Token = "0x4000BA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("How much tiles of the pathfinding world we update per frame")]
		public int updateWorldTilePerFrame;

		[Token(Token = "0x6000D03")]
		[Address(RVA = "0xBC99E4", Offset = "0xBC99E4", VA = "0xBC99E4")]
		public PathfindingConfiguration()
		{
		}
	}
	[Token(Token = "0x20001F8")]
	public class PathFollower : MonoBehaviour
	{
		[Token(Token = "0x20001F9")]
		[CompilerGenerated]
		private sealed class <WaitForPath>d__28 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000BAC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000BAD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000BAE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PathFollower <>4__this;

			[Token(Token = "0x1700019C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000D21")]
				[Address(RVA = "0xBCBC80", Offset = "0xBCBC80", VA = "0xBCBC80", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700019D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000D23")]
				[Address(RVA = "0xBCBCC8", Offset = "0xBCBCC8", VA = "0xBCBCC8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000D1E")]
			[Address(RVA = "0xBCB6B0", Offset = "0xBCB6B0", VA = "0xBCB6B0")]
			[DebuggerHidden]
			public <WaitForPath>d__28(int <>1__state)
			{
			}

			[Token(Token = "0x6000D1F")]
			[Address(RVA = "0xBCBA98", Offset = "0xBCBA98", VA = "0xBCBA98", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000D20")]
			[Address(RVA = "0xBCBA9C", Offset = "0xBCBA9C", VA = "0xBCBA9C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000D22")]
			[Address(RVA = "0xBCBC88", Offset = "0xBCBC88", VA = "0xBCBC88", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000BA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private PathManager.PathRequest pathRequest;

		[Token(Token = "0x4000BA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		private bool waitForPath;

		[Token(Token = "0x4000BA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int currentPathNodeIndex;

		[Token(Token = "0x4000BA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly List<IPathFollowerObserver> observers;

		[Token(Token = "0x4000BA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public NavigationAgentConfiguration navigationAgentConfiguration;

		[Token(Token = "0x4000BA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public NavigationAgentConfiguration.WalkSpeed currentWalkSpeed;

		[Token(Token = "0x4000BA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Coroutine waitForPathCoroutine;

		[Token(Token = "0x4000BAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool diagonal;

		[Token(Token = "0x4000BAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 internalDestination;

		[Token(Token = "0x17000198")]
		public bool IsWalking
		{
			[Token(Token = "0x6000D04")]
			[Address(RVA = "0xBC9A00", Offset = "0xBC9A00", VA = "0xBC9A00")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D05")]
			[Address(RVA = "0xBC9A08", Offset = "0xBC9A08", VA = "0xBC9A08")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000199")]
		public bool IsWaitingForPath
		{
			[Token(Token = "0x6000D06")]
			[Address(RVA = "0xBC9A14", Offset = "0xBC9A14", VA = "0xBC9A14")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700019A")]
		public bool HasPath
		{
			[Token(Token = "0x6000D07")]
			[Address(RVA = "0xBC9A1C", Offset = "0xBC9A1C", VA = "0xBC9A1C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700019B")]
		public Vector3 Destination
		{
			[Token(Token = "0x6000D09")]
			[Address(RVA = "0xBC9A6C", Offset = "0xBC9A6C", VA = "0xBC9A6C")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000D0A")]
			[Address(RVA = "0xBC9A78", Offset = "0xBC9A78", VA = "0xBC9A78")]
			set
			{
			}
		}

		[Token(Token = "0x6000D08")]
		[Address(RVA = "0xBC9A3C", Offset = "0xBC9A3C", VA = "0xBC9A3C")]
		public void Awake()
		{
		}

		[Token(Token = "0x6000D0B")]
		[Address(RVA = "0xBC9B20", Offset = "0xBC9B20", VA = "0xBC9B20")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D0C")]
		[Address(RVA = "0xBC9B04", Offset = "0xBC9B04", VA = "0xBC9B04")]
		public bool SetDestination(Vector3? newDestination)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D0D")]
		[Address(RVA = "0xBCB210", Offset = "0xBCB210", VA = "0xBCB210")]
		public bool SetDestination(Vector3? newDestination, float tolerance)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D0E")]
		[Address(RVA = "0xBCB3A0", Offset = "0xBCB3A0", VA = "0xBCB3A0")]
		private bool SetFinalDestination(Vector3? newDestination, float tolerance)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D0F")]
		[Address(RVA = "0xBCB4F4", Offset = "0xBCB4F4", VA = "0xBCB4F4")]
		private static Vector3 GroundedPosition(Vector3 position)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000D10")]
		[Address(RVA = "0xBCA6A0", Offset = "0xBCA6A0", VA = "0xBCA6A0")]
		private void RequestPath(Vector3 newDestination)
		{
		}

		[Token(Token = "0x6000D11")]
		[Address(RVA = "0xBCB500", Offset = "0xBCB500", VA = "0xBCB500")]
		private void RequestPath(Position newDestination)
		{
		}

		[Token(Token = "0x6000D12")]
		[Address(RVA = "0xBCB63C", Offset = "0xBCB63C", VA = "0xBCB63C")]
		[IteratorStateMachine(typeof(<WaitForPath>d__28))]
		private IEnumerator WaitForPath()
		{
			return null;
		}

		[Token(Token = "0x6000D13")]
		[Address(RVA = "0xBCA4A8", Offset = "0xBCA4A8", VA = "0xBCA4A8")]
		private void OnStuck()
		{
		}

		[Token(Token = "0x6000D14")]
		[Address(RVA = "0xBCB044", Offset = "0xBCB044", VA = "0xBCB044")]
		private void OnMove(Vector3 newLocalPos)
		{
		}

		[Token(Token = "0x6000D15")]
		[Address(RVA = "0xBCACD0", Offset = "0xBCACD0", VA = "0xBCACD0")]
		private void OnDiagonalMovement(Vector3 nextPathPosition)
		{
		}

		[Token(Token = "0x6000D16")]
		[Address(RVA = "0xBCAE9C", Offset = "0xBCAE9C", VA = "0xBCAE9C")]
		private void OnDiagonalMovementEnd()
		{
		}

		[Token(Token = "0x6000D17")]
		[Address(RVA = "0xBCA304", Offset = "0xBCA304", VA = "0xBCA304")]
		private void OnDestinationReached()
		{
		}

		[Token(Token = "0x6000D18")]
		[Address(RVA = "0xBCB6D8", Offset = "0xBCB6D8", VA = "0xBCB6D8")]
		public void AddObserver(IPathFollowerObserver observer)
		{
		}

		[Token(Token = "0x6000D19")]
		[Address(RVA = "0xBCA750", Offset = "0xBCA750", VA = "0xBCA750")]
		[ContextMenu("Debug Current Path")]
		public void DebugCurrentPath()
		{
		}

		[Token(Token = "0x6000D1A")]
		[Address(RVA = "0xBCB788", Offset = "0xBCB788", VA = "0xBCB788")]
		public void Init()
		{
		}

		[Token(Token = "0x6000D1B")]
		[Address(RVA = "0xBCB7A8", Offset = "0xBCB7A8", VA = "0xBCB7A8")]
		public void InvalidatePath()
		{
		}

		[Token(Token = "0x6000D1C")]
		[Address(RVA = "0xBCB7C0", Offset = "0xBCB7C0", VA = "0xBCB7C0")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000D1D")]
		[Address(RVA = "0xBCB9D0", Offset = "0xBCB9D0", VA = "0xBCB9D0")]
		public PathFollower()
		{
		}
	}
	[Token(Token = "0x20001FA")]
	public interface IPathFollowerObserver
	{
		[Token(Token = "0x6000D24")]
		void OnStuck();

		[Token(Token = "0x6000D25")]
		void OnMove(Vector3 newLocalPos);

		[Token(Token = "0x6000D26")]
		void OnDestinationReached();

		[Token(Token = "0x6000D27")]
		void OnNarrowPassage(Vector3 nextPathNodePosition);

		[Token(Token = "0x6000D28")]
		void OnNarrowPassageEnd();
	}
	[Token(Token = "0x20001FB")]
	public class PathManager : MonoBehaviour
	{
		[Token(Token = "0x20001FC")]
		[BurstCompile]
		private struct FindPathJob : IJob
		{
			[Token(Token = "0x4000BBC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[ReadOnly]
			public Guid requestId;

			[Token(Token = "0x4000BBD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[ReadOnly]
			public int2 startPosition;

			[Token(Token = "0x4000BBE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[ReadOnly]
			public int2 endPosition;

			[Token(Token = "0x4000BBF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[ReadOnly]
			public NativeHashMap<Position, PathNode> currentWorld;

			[Token(Token = "0x4000BC0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[ReadOnly]
			public int straightCost;

			[Token(Token = "0x4000BC1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			[ReadOnly]
			public bool diagonalAllowed;

			[Token(Token = "0x4000BC2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[ReadOnly]
			public int diagonalCost;

			[Token(Token = "0x4000BC3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public NativeList<Position> path;

			[Token(Token = "0x6000D3D")]
			[Address(RVA = "0xBCD1C0", Offset = "0xBCD1C0", VA = "0xBCD1C0", Slot = "4")]
			public void Execute()
			{
			}
		}

		[Token(Token = "0x20001FD")]
		private struct PathNode
		{
			[Token(Token = "0x4000BC4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int X;

			[Token(Token = "0x4000BC5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public int Y;

			[Token(Token = "0x4000BC6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public int GCost;

			[Token(Token = "0x4000BC7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public int HCost;

			[Token(Token = "0x4000BC8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int FCost;

			[Token(Token = "0x4000BC9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public bool IsWalkable;

			[Token(Token = "0x4000BCA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int Penalty;

			[Token(Token = "0x4000BCB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Position CameFromNodeIndex;

			[Token(Token = "0x1700019E")]
			public Position Index
			{
				[Token(Token = "0x6000D3E")]
				[Address(RVA = "0xBCCF80", Offset = "0xBCCF80", VA = "0xBCCF80")]
				get
				{
					return default(Position);
				}
			}

			[Token(Token = "0x6000D3F")]
			[Address(RVA = "0xBCDB64", Offset = "0xBCDB64", VA = "0xBCDB64")]
			public void CalculateFCost()
			{
			}
		}

		[Token(Token = "0x20001FE")]
		public class PathRequest
		{
			[Token(Token = "0x4000BCC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Guid ID;

			[Token(Token = "0x4000BCD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Position StartPosition;

			[Token(Token = "0x4000BCE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public Position EndPosition;

			[Token(Token = "0x4000BCF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public PathStatus Status;

			[Token(Token = "0x4000BD0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public Position[] Path;

			[Token(Token = "0x4000BD1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public float StartTime;

			[Token(Token = "0x4000BD2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			public PathfindingWorld World;

			[Token(Token = "0x4000BD3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public bool DiagonalAllowed;

			[Token(Token = "0x1700019F")]
			public bool Finished
			{
				[Token(Token = "0x6000D41")]
				[Address(RVA = "0xBCDB74", Offset = "0xBCDB74", VA = "0xBCDB74")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x170001A0")]
			public bool Outdated
			{
				[Token(Token = "0x6000D42")]
				[Address(RVA = "0xBCA648", Offset = "0xBCA648", VA = "0xBCA648")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6000D40")]
			[Address(RVA = "0xBCC970", Offset = "0xBCC970", VA = "0xBCC970")]
			public PathRequest(Position startPosition, Position endPosition, PathfindingWorld world, bool diagonalAllowed)
			{
			}
		}

		[Token(Token = "0x20001FF")]
		public enum PathStatus
		{
			[Token(Token = "0x4000BD5")]
			Waiting,
			[Token(Token = "0x4000BD6")]
			InProgress,
			[Token(Token = "0x4000BD7")]
			Success,
			[Token(Token = "0x4000BD8")]
			Error,
			[Token(Token = "0x4000BD9")]
			Cancelled
		}

		[Token(Token = "0x2000200")]
		public enum PathfindingWorld
		{
			[Token(Token = "0x4000BDB")]
			Ground,
			[Token(Token = "0x4000BDC")]
			Naval
		}

		[Token(Token = "0x2000201")]
		[CompilerGenerated]
		private sealed class <UpdateWorldData>d__17 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000BDD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000BDE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000BDF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Dictionary<Position, TerrainType>.KeyCollection tilesPositions;

			[Token(Token = "0x4000BE0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public NavigationConstraints navigationConstraints;

			[Token(Token = "0x4000BE1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public NavigationConstraints navalNavigationConstraints;

			[Token(Token = "0x4000BE2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public PathfindingConfiguration configuration;

			[Token(Token = "0x4000BE3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private Dictionary<Position, TerrainType> <terrainData>5__2;

			[Token(Token = "0x4000BE4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private int <count>5__3;

			[Token(Token = "0x4000BE5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private Dictionary<Position, TerrainType>.KeyCollection.Enumerator <>7__wrap3;

			[Token(Token = "0x170001A1")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000D47")]
				[Address(RVA = "0xBCDEE0", Offset = "0xBCDEE0", VA = "0xBCDEE0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001A2")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000D49")]
				[Address(RVA = "0xBCDF28", Offset = "0xBCDF28", VA = "0xBCDF28", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000D43")]
			[Address(RVA = "0xBCC640", Offset = "0xBCC640", VA = "0xBCC640")]
			[DebuggerHidden]
			public <UpdateWorldData>d__17(int <>1__state)
			{
			}

			[Token(Token = "0x6000D44")]
			[Address(RVA = "0xBCDB84", Offset = "0xBCDB84", VA = "0xBCDB84", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000D45")]
			[Address(RVA = "0xBCDBA0", Offset = "0xBCDBA0", VA = "0xBCDBA0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000D46")]
			[Address(RVA = "0xBCDE90", Offset = "0xBCDE90", VA = "0xBCDE90")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6000D48")]
			[Address(RVA = "0xBCDEE8", Offset = "0xBCDEE8", VA = "0xBCDEE8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000202")]
		[CompilerGenerated]
		private sealed class <WaitForPath>d__24 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000BE6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000BE7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000BE8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PathRequest pathRequest;

			[Token(Token = "0x4000BE9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public PathManager <>4__this;

			[Token(Token = "0x4000BEA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private NativeList<Position> <result>5__2;

			[Token(Token = "0x4000BEB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private FindPathJob <job>5__3;

			[Token(Token = "0x4000BEC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			private JobHandle <jobHandle>5__4;

			[Token(Token = "0x170001A3")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000D4D")]
				[Address(RVA = "0xBCE418", Offset = "0xBCE418", VA = "0xBCE418", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001A4")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000D4F")]
				[Address(RVA = "0xBCE460", Offset = "0xBCE460", VA = "0xBCE460", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000D4A")]
			[Address(RVA = "0xBCCCD8", Offset = "0xBCCCD8", VA = "0xBCCCD8")]
			[DebuggerHidden]
			public <WaitForPath>d__24(int <>1__state)
			{
			}

			[Token(Token = "0x6000D4B")]
			[Address(RVA = "0xBCDF30", Offset = "0xBCDF30", VA = "0xBCDF30", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000D4C")]
			[Address(RVA = "0xBCDF34", Offset = "0xBCDF34", VA = "0xBCDF34", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000D4E")]
			[Address(RVA = "0xBCE420", Offset = "0xBCE420", VA = "0xBCE420", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000BAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PathfindingConfiguration configuration;

		[Token(Token = "0x4000BB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public NavigationConstraints navigationConstraints;

		[Token(Token = "0x4000BB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public NavigationConstraints navalNavigationConstraints;

		[Token(Token = "0x4000BB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static PathManager instance;

		[Token(Token = "0x4000BB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Dictionary<Guid, PathRequest> requests;

		[Token(Token = "0x4000BB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static Queue<Guid> requestsQueue;

		[Token(Token = "0x4000BB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool init;

		[Token(Token = "0x4000BB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static NativeHashMap<Position, PathNode> currentWorld;

		[Token(Token = "0x4000BB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static NativeHashMap<Position, PathNode> currentNavalWorld;

		[Token(Token = "0x4000BB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static List<JobHandle> jobHandles;

		[Token(Token = "0x4000BB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private static bool buildingWorld;

		[Token(Token = "0x4000BBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public static float LastBuildWorldTime;

		[Token(Token = "0x4000BBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private static Coroutine updateWorldCoroutine;

		[Token(Token = "0x6000D29")]
		[Address(RVA = "0xBCBCD0", Offset = "0xBCBCD0", VA = "0xBCBCD0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000D2A")]
		[Address(RVA = "0xBCBE28", Offset = "0xBCBE28", VA = "0xBCBE28")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D2B")]
		[Address(RVA = "0xBCBF68", Offset = "0xBCBF68", VA = "0xBCBF68")]
		private void Init()
		{
		}

		[Token(Token = "0x6000D2C")]
		[Address(RVA = "0xBCC0E8", Offset = "0xBCC0E8", VA = "0xBCC0E8")]
		[BurstCompile]
		public static void BuildCurrentWorldNodes()
		{
		}

		[Token(Token = "0x6000D2D")]
		[Address(RVA = "0xBCC580", Offset = "0xBCC580", VA = "0xBCC580")]
		[IteratorStateMachine(typeof(<UpdateWorldData>d__17))]
		[BurstCompile]
		private static IEnumerator UpdateWorldData(Dictionary<Position, TerrainType>.KeyCollection tilesPositions, NavigationConstraints navigationConstraints, NavigationConstraints navalNavigationConstraints, PathfindingConfiguration configuration)
		{
			return null;
		}

		[Token(Token = "0x6000D2E")]
		[Address(RVA = "0xBCC668", Offset = "0xBCC668", VA = "0xBCC668")]
		[BurstCompile]
		private static void UpdateWorldData(Position position, TerrainType newTerrainType, NavigationConstraints navigationConstraints, NavigationConstraints navalNavigationConstraints)
		{
		}

		[Token(Token = "0x6000D2F")]
		[Address(RVA = "0xBCC3EC", Offset = "0xBCC3EC", VA = "0xBCC3EC")]
		[BurstCompile]
		private static void ForceJobCompletion()
		{
		}

		[Token(Token = "0x6000D30")]
		[Address(RVA = "0xBC9668", Offset = "0xBC9668", VA = "0xBC9668")]
		public static PathRequest RequestPath(Position start, Position destination, PathfindingWorld world, bool diagonalAllowed)
		{
			return null;
		}

		[Token(Token = "0x6000D31")]
		[Address(RVA = "0xBCB478", Offset = "0xBCB478", VA = "0xBCB478")]
		public static void CancelPathRequest(PathRequest pathRequest)
		{
		}

		[Token(Token = "0x6000D32")]
		[Address(RVA = "0xBCCA30", Offset = "0xBCCA30", VA = "0xBCCA30")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D33")]
		[Address(RVA = "0xBCCAC0", Offset = "0xBCCAC0", VA = "0xBCCAC0")]
		[BurstCompile]
		private void ScheduleJobs()
		{
		}

		[Token(Token = "0x6000D34")]
		[Address(RVA = "0xBCCC48", Offset = "0xBCCC48", VA = "0xBCCC48")]
		[IteratorStateMachine(typeof(<WaitForPath>d__24))]
		private IEnumerator WaitForPath(PathRequest pathRequest)
		{
			return null;
		}

		[Token(Token = "0x6000D35")]
		[Address(RVA = "0xBCCD00", Offset = "0xBCCD00", VA = "0xBCCD00")]
		private static void CalculatePath(NativeList<Position> path, NativeHashMap<Position, PathNode> pathNodeArray, PathNode endNode)
		{
		}

		[Token(Token = "0x6000D36")]
		[Address(RVA = "0xBCCE48", Offset = "0xBCCE48", VA = "0xBCCE48")]
		private static int CalculateDistanceCost(int2 aPosition, int2 bPosition, int diagonalCost, int straightCost, int penalty = 0)
		{
			return default(int);
		}

		[Token(Token = "0x6000D37")]
		[Address(RVA = "0xBCCE90", Offset = "0xBCCE90", VA = "0xBCCE90")]
		private static Position GetLowestCostFNodeIndex(NativeArray<Position> openList, NativeHashMap<Position, PathNode> pathNodeArray)
		{
			return default(Position);
		}

		[Token(Token = "0x6000D38")]
		[Address(RVA = "0xBCC860", Offset = "0xBCC860", VA = "0xBCC860")]
		[BurstCompile]
		private static PathNode GetPathNodeForTerrainType(Position position, TerrainType terrainType, NavigationConstraints navigationConstraints)
		{
			return default(PathNode);
		}

		[Token(Token = "0x6000D39")]
		[Address(RVA = "0xBCCFB4", Offset = "0xBCCFB4", VA = "0xBCCFB4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000D3A")]
		[Address(RVA = "0xBCD074", Offset = "0xBCD074", VA = "0xBCD074")]
		[ContextMenu("Show Pathfinding Queue")]
		public void ShowPathfindingQueue()
		{
		}

		[Token(Token = "0x6000D3B")]
		[Address(RVA = "0xBCD140", Offset = "0xBCD140", VA = "0xBCD140")]
		public static ClosestReachablePositionPathRequest GetPathToClosestReachablePosition(Position start, HashSet<Position> destinations)
		{
			return null;
		}

		[Token(Token = "0x6000D3C")]
		[Address(RVA = "0xBCD1B8", Offset = "0xBCD1B8", VA = "0xBCD1B8")]
		public PathManager()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000203")]
	public struct TerrainPathConstraint
	{
		[Token(Token = "0x4000BED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[HideInInspector]
		public string name;

		[Token(Token = "0x4000BEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public TerrainType terrainType;

		[Token(Token = "0x4000BEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool isWalkable;

		[Token(Token = "0x4000BF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int penalty;
	}
}
namespace Naval
{
	[Serializable]
	[Token(Token = "0x2000204")]
	public class DockPiece
	{
		[Token(Token = "0x4000BF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GameObject DockPrefab;

		[Token(Token = "0x4000BF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TechLevel TechLevel;

		[Token(Token = "0x4000BF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public TownType TownType;

		[Token(Token = "0x4000BF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CoastType CoastType;

		[Token(Token = "0x6000D50")]
		[Address(RVA = "0xBCE468", Offset = "0xBCE468", VA = "0xBCE468")]
		public DockPiece(TechLevel techLevel, TownType townType, CoastType coastType)
		{
		}

		[Token(Token = "0x6000D51")]
		[Address(RVA = "0xBCE4A4", Offset = "0xBCE4A4", VA = "0xBCE4A4")]
		public DockPiece(TechLevel techLevel, TownType townType, CoastType coastType, GameObject dockPrefab)
		{
		}
	}
	[Token(Token = "0x2000205")]
	[CreateAssetMenu(menuName = "Cities/Docks Collection")]
	public class DockCollection : ScriptableObject
	{
		[Token(Token = "0x4000BF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public List<DockPiece> Docks;

		[Token(Token = "0x6000D52")]
		[Address(RVA = "0xBCE4F0", Offset = "0xBCE4F0", VA = "0xBCE4F0")]
		public bool SelectDockPrefab(TechLevel techLevel, TownType townType, CoastType coastType, out GameObject prefab)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D53")]
		[Address(RVA = "0xBCE724", Offset = "0xBCE724", VA = "0xBCE724")]
		public void AddCollection(TechLevel techLevel, TownType townType)
		{
		}

		[Token(Token = "0x6000D54")]
		[Address(RVA = "0xBCECBC", Offset = "0xBCECBC", VA = "0xBCECBC")]
		public void RemoveCollection(TechLevel techLevel, TownType townType)
		{
		}

		[Token(Token = "0x6000D55")]
		[Address(RVA = "0xBCF148", Offset = "0xBCF148", VA = "0xBCF148")]
		public void CopyEntriesForAllCivilizations()
		{
		}

		[Token(Token = "0x6000D56")]
		[Address(RVA = "0xBCFD84", Offset = "0xBCFD84", VA = "0xBCFD84")]
		public DockCollection()
		{
		}
	}
	[Token(Token = "0x2000206")]
	[CreateAssetMenu(menuName = "Naval/NavalBalanceConfiguration")]
	public class NavalBalanceConfiguration : ScriptableObject
	{
		[Token(Token = "0x4000BF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float durationLandInWater;

		[Token(Token = "0x4000BF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float sinkSpeed;

		[Token(Token = "0x4000BF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float durationResurface;

		[Token(Token = "0x4000BF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float depthScaleSecondTime;

		[Token(Token = "0x4000BFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float sinkingCleanVFXDelay;

		[Token(Token = "0x4000BFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float homelessShipSinkDelay;

		[Token(Token = "0x4000BFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float maxSinkDepth;

		[Token(Token = "0x4000BFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Range(0f, 360f)]
		public float minAngle;

		[Token(Token = "0x4000BFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Range(0f, 360f)]
		public float maxAngle;

		[Token(Token = "0x6000D57")]
		[Address(RVA = "0xBCFD8C", Offset = "0xBCFD8C", VA = "0xBCFD8C")]
		public NavalBalanceConfiguration()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000207")]
	public class FreeTransactionSpotToken
	{
		[Token(Token = "0x4000BFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Position postion;

		[Token(Token = "0x4000C00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float expirationTime;

		[Token(Token = "0x4000C01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool active;

		[Token(Token = "0x6000D58")]
		[Address(RVA = "0xBCFDB8", Offset = "0xBCFDB8", VA = "0xBCFDB8")]
		public FreeTransactionSpotToken(float timeOutDuration, Position postion)
		{
		}

		[Token(Token = "0x6000D59")]
		[Address(RVA = "0xBCFE0C", Offset = "0xBCFE0C", VA = "0xBCFE0C")]
		public bool OnValidateToken()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D5A")]
		[Address(RVA = "0xBCFE44", Offset = "0xBCFE44", VA = "0xBCFE44")]
		public void InvalidateToken()
		{
		}
	}
	[Token(Token = "0x2000208")]
	public class Port : MonoBehaviour
	{
		[Token(Token = "0x4000C02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SpawnerConfiguration spawnerConfiguration;

		[Token(Token = "0x4000C03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly List<Ship> ships;

		[Token(Token = "0x4000C04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TradeNode tradeNode;

		[Token(Token = "0x4000C05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform boatSpawn;

		[Token(Token = "0x4000C06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Town city;

		[Token(Token = "0x4000C07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public PortConfiguration PortConfiguration;

		[Token(Token = "0x4000C08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<FreeTransactionSpotToken> transactionSpotTokens;

		[Token(Token = "0x4000C09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float respawnStartTime;

		[Token(Token = "0x4000C0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private MapManager.FreePortLocationRequest request;

		[Token(Token = "0x6000D5B")]
		[Address(RVA = "0xBCFE4C", Offset = "0xBCFE4C", VA = "0xBCFE4C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D5C")]
		[Address(RVA = "0xBCFF60", Offset = "0xBCFF60", VA = "0xBCFF60")]
		public void RotateToWater()
		{
		}

		[Token(Token = "0x6000D5D")]
		[Address(RVA = "0xBD01A0", Offset = "0xBD01A0", VA = "0xBD01A0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D5E")]
		[Address(RVA = "0xBD0490", Offset = "0xBD0490", VA = "0xBD0490")]
		private bool SpawnShip(out Ship ship)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D5F")]
		[Address(RVA = "0xBD0780", Offset = "0xBD0780", VA = "0xBD0780")]
		[ContextMenu("Reset Spawner")]
		public void ResetSpawnTimer()
		{
		}

		[Token(Token = "0x6000D60")]
		[Address(RVA = "0xBD0388", Offset = "0xBD0388", VA = "0xBD0388")]
		private void UpdateTokens()
		{
		}

		[Token(Token = "0x6000D61")]
		[Address(RVA = "0xBD0290", Offset = "0xBD0290", VA = "0xBD0290")]
		private static void RemoveNullAndDeadUnits(List<Ship> list)
		{
		}

		[Token(Token = "0x6000D62")]
		[Address(RVA = "0xBD078C", Offset = "0xBD078C", VA = "0xBD078C")]
		public void OnColorChanged(Color newColor)
		{
		}

		[Token(Token = "0x6000D63")]
		[Address(RVA = "0xBD05EC", Offset = "0xBD05EC", VA = "0xBD05EC")]
		public bool AddShip(Ship ship)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D64")]
		[Address(RVA = "0xBD0B3C", Offset = "0xBD0B3C", VA = "0xBD0B3C")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6000D65")]
		[Address(RVA = "0xBD0BD4", Offset = "0xBD0BD4", VA = "0xBD0BD4")]
		public bool IsPointCloseToPort(Vector3 position)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D66")]
		[Address(RVA = "0xBD0C40", Offset = "0xBD0C40", VA = "0xBD0C40")]
		public bool LookForFreeTransactionSpot(out FreeTransactionSpotToken transactionSpotToken)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D67")]
		[Address(RVA = "0xBD10B0", Offset = "0xBD10B0", VA = "0xBD10B0")]
		public List<ShipData> ToData()
		{
			return null;
		}

		[Token(Token = "0x6000D68")]
		[Address(RVA = "0xBD14A0", Offset = "0xBD14A0", VA = "0xBD14A0")]
		public void LoadData(List<ShipData> data)
		{
		}

		[Token(Token = "0x6000D69")]
		[Address(RVA = "0xBD1754", Offset = "0xBD1754", VA = "0xBD1754")]
		public Port()
		{
		}
	}
	[Token(Token = "0x2000209")]
	[CreateAssetMenu(fileName = "Port Configuration", menuName = "Naval/Port Configuration", order = 0)]
	public class PortConfiguration : ScriptableObject
	{
		[Token(Token = "0x4000C0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float ShipRadiusBeforeEntry;

		[Token(Token = "0x4000C0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float TokenValidationDuration;

		[Token(Token = "0x6000D6A")]
		[Address(RVA = "0xBD1834", Offset = "0xBD1834", VA = "0xBD1834")]
		public PortConfiguration()
		{
		}
	}
	[Token(Token = "0x200020A")]
	public class SailsManager : MonoBehaviour
	{
		[Token(Token = "0x4000C0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Ship.Type ShipType;

		[Token(Token = "0x4000C0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private Color ShipColor;

		[Token(Token = "0x4000C0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public List<MeshRenderer> sails;

		[Token(Token = "0x4000C10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int MainTexSt;

		[Token(Token = "0x4000C11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static readonly int TeamColor;

		[Token(Token = "0x6000D6B")]
		[Address(RVA = "0xBD1848", Offset = "0xBD1848", VA = "0xBD1848")]
		public void RefreshSailsTexture(Ship.Type shipType)
		{
		}

		[Token(Token = "0x6000D6C")]
		[Address(RVA = "0xBD1B2C", Offset = "0xBD1B2C", VA = "0xBD1B2C")]
		public void RefreshSailsTeamColor(Color color)
		{
		}

		[Token(Token = "0x6000D6D")]
		[Address(RVA = "0xBD1AF8", Offset = "0xBD1AF8", VA = "0xBD1AF8")]
		private static Vector4 GetTilingAndOffset(Ship.Type type)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6000D6E")]
		[Address(RVA = "0xBD1DF4", Offset = "0xBD1DF4", VA = "0xBD1DF4")]
		public SailsManager()
		{
		}
	}
	[Token(Token = "0x200020B")]
	[SelectionBase]
	public class Ship : MonoBehaviour, IPathFollowerObserver, ITooltipProvider, IGrabStateObserver, IKinematicObject, IPlayerAwareReactive, IBurnable
	{
		[Token(Token = "0x200020C")]
		public enum Type
		{
			[Token(Token = "0x4000C47")]
			Trade,
			[Token(Token = "0x4000C48")]
			Pirate,
			[Token(Token = "0x4000C49")]
			Military,
			[Token(Token = "0x4000C4A")]
			Fisher
		}

		[Token(Token = "0x200020D")]
		public enum ShipState
		{
			[Token(Token = "0x4000C4C")]
			Idle,
			[Token(Token = "0x4000C4D")]
			Planning,
			[Token(Token = "0x4000C4E")]
			Traveling,
			[Token(Token = "0x4000C4F")]
			Plundering,
			[Token(Token = "0x4000C50")]
			Fighting,
			[Token(Token = "0x4000C51")]
			Sinking,
			[Token(Token = "0x4000C52")]
			Destroyed
		}

		[Token(Token = "0x200020E")]
		public enum TravelingStep
		{
			[Token(Token = "0x4000C54")]
			MoveToHomePort,
			[Token(Token = "0x4000C55")]
			Load,
			[Token(Token = "0x4000C56")]
			MoveToDestinationPort,
			[Token(Token = "0x4000C57")]
			Exchange,
			[Token(Token = "0x4000C58")]
			ReturnToHomePort,
			[Token(Token = "0x4000C59")]
			Unload,
			[Token(Token = "0x4000C5A")]
			Finished
		}

		[Token(Token = "0x200020F")]
		[CompilerGenerated]
		private sealed class <FindPlunderingTarget>d__81 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000C5B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000C5C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000C5D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Ship <>4__this;

			[Token(Token = "0x4000C5E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private bool <importantTarget>5__2;

			[Token(Token = "0x4000C5F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private int <lowestSteps>5__3;

			[Token(Token = "0x4000C60")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private int <resultCount>5__4;

			[Token(Token = "0x4000C61")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private int <index>5__5;

			[Token(Token = "0x4000C62")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private Ship <ship>5__6;

			[Token(Token = "0x4000C63")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private bool <isImportantTarget>5__7;

			[Token(Token = "0x4000C64")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private PathManager.PathRequest <requestPathToShip>5__8;

			[Token(Token = "0x170001AD")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000DC0")]
				[Address(RVA = "0xBD7FAC", Offset = "0xBD7FAC", VA = "0xBD7FAC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001AE")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000DC2")]
				[Address(RVA = "0xBD7FF4", Offset = "0xBD7FF4", VA = "0xBD7FF4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000DBD")]
			[Address(RVA = "0xBD7A50", Offset = "0xBD7A50", VA = "0xBD7A50")]
			[DebuggerHidden]
			public <FindPlunderingTarget>d__81(int <>1__state)
			{
			}

			[Token(Token = "0x6000DBE")]
			[Address(RVA = "0xBD7A78", Offset = "0xBD7A78", VA = "0xBD7A78", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000DBF")]
			[Address(RVA = "0xBD7A7C", Offset = "0xBD7A7C", VA = "0xBD7A7C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000DC1")]
			[Address(RVA = "0xBD7FB4", Offset = "0xBD7FB4", VA = "0xBD7FB4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000210")]
		[CompilerGenerated]
		private sealed class <ReadjustShip>d__119 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000C65")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000C66")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000C67")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Ship <>4__this;

			[Token(Token = "0x4000C68")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Vector3 <originalPosition>5__2;

			[Token(Token = "0x4000C69")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private Vector3 <firstPosition>5__3;

			[Token(Token = "0x4000C6A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private Quaternion <originalRotation>5__4;

			[Token(Token = "0x4000C6B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private Vector3 <secondPosition>5__5;

			[Token(Token = "0x4000C6C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			private Quaternion <desiredRotation>5__6;

			[Token(Token = "0x4000C6D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			private float <time>5__7;

			[Token(Token = "0x4000C6E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			private float <totalDuration>5__8;

			[Token(Token = "0x4000C6F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			private Vector3 <thirdPosition>5__9;

			[Token(Token = "0x170001AF")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000DC6")]
				[Address(RVA = "0xBD863C", Offset = "0xBD863C", VA = "0xBD863C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001B0")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000DC8")]
				[Address(RVA = "0xBD8684", Offset = "0xBD8684", VA = "0xBD8684", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000DC3")]
			[Address(RVA = "0xBD7FFC", Offset = "0xBD7FFC", VA = "0xBD7FFC")]
			[DebuggerHidden]
			public <ReadjustShip>d__119(int <>1__state)
			{
			}

			[Token(Token = "0x6000DC4")]
			[Address(RVA = "0xBD8024", Offset = "0xBD8024", VA = "0xBD8024", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000DC5")]
			[Address(RVA = "0xBD8028", Offset = "0xBD8028", VA = "0xBD8028", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000DC7")]
			[Address(RVA = "0xBD8644", Offset = "0xBD8644", VA = "0xBD8644", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000211")]
		[CompilerGenerated]
		private sealed class <SinkShip>d__120 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000C70")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000C71")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000C72")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Ship <>4__this;

			[Token(Token = "0x4000C73")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <time>5__2;

			[Token(Token = "0x170001B1")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000DCC")]
				[Address(RVA = "0xBD8890", Offset = "0xBD8890", VA = "0xBD8890", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001B2")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000DCE")]
				[Address(RVA = "0xBD88D8", Offset = "0xBD88D8", VA = "0xBD88D8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000DC9")]
			[Address(RVA = "0xBD868C", Offset = "0xBD868C", VA = "0xBD868C")]
			[DebuggerHidden]
			public <SinkShip>d__120(int <>1__state)
			{
			}

			[Token(Token = "0x6000DCA")]
			[Address(RVA = "0xBD86B4", Offset = "0xBD86B4", VA = "0xBD86B4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000DCB")]
			[Address(RVA = "0xBD86B8", Offset = "0xBD86B8", VA = "0xBD86B8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000DCD")]
			[Address(RVA = "0xBD8898", Offset = "0xBD8898", VA = "0xBD8898", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000C12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Type type;

		[Token(Token = "0x4000C13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InteractableObject interactableObject;

		[Token(Token = "0x4000C14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public PathFollower pathFollower;

		[Token(Token = "0x4000C15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Port portInternal;

		[Token(Token = "0x4000C16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Town city;

		[Token(Token = "0x4000C17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public readonly Dictionary<ResourceType, int> Cargo;

		[Token(Token = "0x4000C18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Animator animator;

		[Token(Token = "0x4000C19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public ShipModelManager modelManager;

		[Token(Token = "0x4000C1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public ShipAnimationsVariables animationsVariables;

		[Token(Token = "0x4000C1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public GameObject prefabTextCargo;

		[Token(Token = "0x4000C1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool startWaitFrame;

		[Token(Token = "0x4000C1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float currentHealth;

		[Token(Token = "0x4000C1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public string ShipTitleKey;

		[Token(Token = "0x4000C1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public string ShipTypeDescriptionKey;

		[Token(Token = "0x4000C20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public TerrainCollection droppableTerrains;

		[Token(Token = "0x4000C21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public GameObject waterSplash;

		[Token(Token = "0x4000C22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Transform sinkPosition;

		[Token(Token = "0x4000C23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Transform outcomePosition;

		[Token(Token = "0x4000C24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public NavalBalanceConfiguration navalBalanceConfiguration;

		[Token(Token = "0x4000C25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private bool IsPlayerAware;

		[Token(Token = "0x4000C26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA9")]
		private bool IsHandlingOnGround;

		[Token(Token = "0x4000C27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private int floorLayer;

		[Token(Token = "0x4000C28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private bool lookForTargetInProgress;

		[Token(Token = "0x4000C29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Coroutine lookForTargetCoroutine;

		[Token(Token = "0x4000C2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public bool debugStates;

		[Token(Token = "0x4000C2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private int waterLayer;

		[Token(Token = "0x4000C2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private bool inWater;

		[Token(Token = "0x4000C2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private FreeTransactionSpotToken transactionSpotToken;

		[Token(Token = "0x4000C2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public MaelstromConfiguration MaelstromConfiguration;

		[Token(Token = "0x4000C2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public int cargoSlotSize;

		[Token(Token = "0x4000C30")]
		private const float MinAngleBeforeRotation = 5f;

		[Token(Token = "0x4000C31")]
		private const float DistanceBeforeInterception = 0.5f;

		[Token(Token = "0x4000C32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private GrabState currentGrabStateInternal;

		[Token(Token = "0x4000C34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private ShipState stateInternal;

		[Token(Token = "0x4000C35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private TravelingStep currentTravelingStepInternal;

		[Token(Token = "0x4000C36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private TradeRouteRequest request;

		[Token(Token = "0x4000C37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private bool waitForRoute;

		[Token(Token = "0x4000C38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Ship plunderingTarget;

		[Token(Token = "0x4000C39")]
		private const float PlanRouteDelay = 2f;

		[Token(Token = "0x4000C3A")]
		private const float LoadingDelay = 5f;

		[Token(Token = "0x4000C3B")]
		private const float ExchangeDelay = 5f;

		[Token(Token = "0x4000C3C")]
		private const float UnloadingDelay = 5f;

		[Token(Token = "0x4000C3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private float lastPlanRoute;

		[Token(Token = "0x4000C3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		private float waitStartTime;

		[Token(Token = "0x4000C3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private float lookingForPortStartTime;

		[Token(Token = "0x4000C40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Collider[] overlapSphereResults;

		[Token(Token = "0x4000C41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private float aiSeed;

		[Token(Token = "0x4000C42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		private float currentFrameTime;

		[Token(Token = "0x4000C43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private float lastDot;

		[Token(Token = "0x4000C44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		public float dotDelay;

		[Token(Token = "0x170001A5")]
		public Port Port
		{
			[Token(Token = "0x6000D70")]
			[Address(RVA = "0xBD1E98", Offset = "0xBD1E98", VA = "0xBD1E98")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D71")]
			[Address(RVA = "0xBD0A88", Offset = "0xBD0A88", VA = "0xBD0A88")]
			set
			{
			}
		}

		[Token(Token = "0x170001A6")]
		private bool IsTokenValid
		{
			[Token(Token = "0x6000D72")]
			[Address(RVA = "0xBD1EA0", Offset = "0xBD1EA0", VA = "0xBD1EA0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001A7")]
		public GrabState GrabState
		{
			[Token(Token = "0x6000D73")]
			[Address(RVA = "0xBD1EF8", Offset = "0xBD1EF8", VA = "0xBD1EF8")]
			get
			{
				return default(GrabState);
			}
			[Token(Token = "0x6000D74")]
			[Address(RVA = "0xBD1F00", Offset = "0xBD1F00", VA = "0xBD1F00")]
			set
			{
			}
		}

		[Token(Token = "0x170001A8")]
		public ShipState State
		{
			[Token(Token = "0x6000D76")]
			[Address(RVA = "0xBD1FA8", Offset = "0xBD1FA8", VA = "0xBD1FA8")]
			get
			{
				return default(ShipState);
			}
			[Token(Token = "0x6000D77")]
			[Address(RVA = "0xBD1FB0", Offset = "0xBD1FB0", VA = "0xBD1FB0")]
			set
			{
			}
		}

		[Token(Token = "0x170001A9")]
		public TravelingStep CurrentTravelingStep
		{
			[Token(Token = "0x6000D78")]
			[Address(RVA = "0xBD21F8", Offset = "0xBD21F8", VA = "0xBD21F8")]
			get
			{
				return default(TravelingStep);
			}
			[Token(Token = "0x6000D79")]
			[Address(RVA = "0xBD2200", Offset = "0xBD2200", VA = "0xBD2200")]
			set
			{
			}
		}

		[Token(Token = "0x170001AA")]
		public bool IsDead
		{
			[Token(Token = "0x6000D7A")]
			[Address(RVA = "0xBD2280", Offset = "0xBD2280", VA = "0xBD2280")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D7B")]
			[Address(RVA = "0xBD2288", Offset = "0xBD2288", VA = "0xBD2288")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001AB")]
		public bool IsBurning
		{
			[Token(Token = "0x6000DB3")]
			[Address(RVA = "0xBD68B0", Offset = "0xBD68B0", VA = "0xBD68B0")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000DB4")]
			[Address(RVA = "0xBD68B8", Offset = "0xBD68B8", VA = "0xBD68B8")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170001AC")]
		public bool CanBeIgnited
		{
			[Token(Token = "0x6000DB6")]
			[Address(RVA = "0xBD68C4", Offset = "0xBD68C4", VA = "0xBD68C4", Slot = "20")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000D75")]
		[Address(RVA = "0xBD1F78", Offset = "0xBD1F78", VA = "0xBD1F78")]
		private void TryResumeState()
		{
		}

		[Token(Token = "0x6000D7C")]
		[Address(RVA = "0xBD2294", Offset = "0xBD2294", VA = "0xBD2294")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000D7D")]
		[Address(RVA = "0xBD2330", Offset = "0xBD2330", VA = "0xBD2330")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D7E")]
		[Address(RVA = "0xBD2360", Offset = "0xBD2360", VA = "0xBD2360")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D7F")]
		[Address(RVA = "0xBD23E0", Offset = "0xBD23E0", VA = "0xBD23E0")]
		private void PreGrabState()
		{
		}

		[Token(Token = "0x6000D80")]
		[Address(RVA = "0xBD2C94", Offset = "0xBD2C94", VA = "0xBD2C94")]
		private void GrabbedBehavior()
		{
		}

		[Token(Token = "0x6000D81")]
		[Address(RVA = "0xBD2C98", Offset = "0xBD2C98", VA = "0xBD2C98")]
		private void ThrownBehavior()
		{
		}

		[Token(Token = "0x6000D82")]
		[Address(RVA = "0xBD2C9C", Offset = "0xBD2C9C", VA = "0xBD2C9C")]
		private void CleanVariables()
		{
		}

		[Token(Token = "0x6000D83")]
		[Address(RVA = "0xBD2400", Offset = "0xBD2400", VA = "0xBD2400")]
		private void FreeBehavior()
		{
		}

		[Token(Token = "0x6000D84")]
		[Address(RVA = "0xBD336C", Offset = "0xBD336C", VA = "0xBD336C")]
		private void Plundering()
		{
		}

		[Token(Token = "0x6000D85")]
		[Address(RVA = "0xBD4030", Offset = "0xBD4030", VA = "0xBD4030")]
		[IteratorStateMachine(typeof(<FindPlunderingTarget>d__81))]
		private IEnumerator FindPlunderingTarget()
		{
			return null;
		}

		[Token(Token = "0x6000D86")]
		[Address(RVA = "0xBD359C", Offset = "0xBD359C", VA = "0xBD359C")]
		private void Fighting()
		{
		}

		[Token(Token = "0x6000D87")]
		[Address(RVA = "0xBD4124", Offset = "0xBD4124", VA = "0xBD4124")]
		private void Shoot()
		{
		}

		[Token(Token = "0x6000D88")]
		[Address(RVA = "0xBD46A8", Offset = "0xBD46A8", VA = "0xBD46A8")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000D89")]
		[Address(RVA = "0xBD4484", Offset = "0xBD4484", VA = "0xBD4484")]
		private bool ReceiveDamage(float damage, out Dictionary<ResourceType, int> loot, Vector3 attackPosition)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D8A")]
		[Address(RVA = "0xBD485C", Offset = "0xBD485C", VA = "0xBD485C")]
		private bool ReceiveDamage(float damage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D8B")]
		[Address(RVA = "0xBD40E4", Offset = "0xBD40E4", VA = "0xBD40E4")]
		private void FireLeft()
		{
		}

		[Token(Token = "0x6000D8C")]
		[Address(RVA = "0xBD40A4", Offset = "0xBD40A4", VA = "0xBD40A4")]
		private void FireRight()
		{
		}

		[Token(Token = "0x6000D8D")]
		[Address(RVA = "0xBD20FC", Offset = "0xBD20FC", VA = "0xBD20FC")]
		private void OpenHatches()
		{
		}

		[Token(Token = "0x6000D8E")]
		[Address(RVA = "0xBD21B4", Offset = "0xBD21B4", VA = "0xBD21B4")]
		private void CloseHatches()
		{
		}

		[Token(Token = "0x6000D8F")]
		[Address(RVA = "0xBD494C", Offset = "0xBD494C", VA = "0xBD494C")]
		[ContextMenu("Plan Route")]
		private void PlanRoute()
		{
		}

		[Token(Token = "0x6000D90")]
		[Address(RVA = "0xBD2CDC", Offset = "0xBD2CDC", VA = "0xBD2CDC")]
		private void Idle()
		{
		}

		[Token(Token = "0x6000D91")]
		[Address(RVA = "0xBD3330", Offset = "0xBD3330", VA = "0xBD3330")]
		private void Destroyed()
		{
		}

		[Token(Token = "0x6000D92")]
		[Address(RVA = "0xBD32FC", Offset = "0xBD32FC", VA = "0xBD32FC")]
		private void Sinking()
		{
		}

		[Token(Token = "0x6000D93")]
		[Address(RVA = "0xBD2F64", Offset = "0xBD2F64", VA = "0xBD2F64")]
		private void Traveling()
		{
		}

		[Token(Token = "0x6000D94")]
		[Address(RVA = "0xBD497C", Offset = "0xBD497C", VA = "0xBD497C")]
		private bool CloseToDestinationPort(Port portDock)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D95")]
		[Address(RVA = "0xBD4ADC", Offset = "0xBD4ADC", VA = "0xBD4ADC")]
		private void LoadCargo()
		{
		}

		[Token(Token = "0x6000D96")]
		[Address(RVA = "0xBD5354", Offset = "0xBD5354", VA = "0xBD5354")]
		private void UnloadCargo()
		{
		}

		[Token(Token = "0x6000D97")]
		[Address(RVA = "0xBD4DD4", Offset = "0xBD4DD4", VA = "0xBD4DD4")]
		private void Exchange()
		{
		}

		[Token(Token = "0x6000D98")]
		[Address(RVA = "0xBD2E34", Offset = "0xBD2E34", VA = "0xBD2E34")]
		private void Planning()
		{
		}

		[Token(Token = "0x6000D99")]
		[Address(RVA = "0xBD55E0", Offset = "0xBD55E0", VA = "0xBD55E0", Slot = "4")]
		public void OnStuck()
		{
		}

		[Token(Token = "0x6000D9A")]
		[Address(RVA = "0xBD5624", Offset = "0xBD5624", VA = "0xBD5624", Slot = "5")]
		public void OnMove(Vector3 newLocalPos)
		{
		}

		[Token(Token = "0x6000D9B")]
		[Address(RVA = "0xBD5668", Offset = "0xBD5668", VA = "0xBD5668", Slot = "6")]
		public void OnDestinationReached()
		{
		}

		[Token(Token = "0x6000D9C")]
		[Address(RVA = "0xBD56F0", Offset = "0xBD56F0", VA = "0xBD56F0", Slot = "7")]
		public void OnNarrowPassage(Vector3 nextPathNodePosition)
		{
		}

		[Token(Token = "0x6000D9D")]
		[Address(RVA = "0xBD56F4", Offset = "0xBD56F4", VA = "0xBD56F4", Slot = "8")]
		public void OnNarrowPassageEnd()
		{
		}

		[Token(Token = "0x6000D9E")]
		[Address(RVA = "0xBD0950", Offset = "0xBD0950", VA = "0xBD0950")]
		public void OnColorChanged(Color newColor)
		{
		}

		[Token(Token = "0x6000D9F")]
		[Address(RVA = "0xBD56F8", Offset = "0xBD56F8", VA = "0xBD56F8")]
		public void Shoot(int canonIndex, bool leftCanons)
		{
		}

		[Token(Token = "0x6000DA0")]
		[Address(RVA = "0xBD5898", Offset = "0xBD5898", VA = "0xBD5898")]
		public void Open()
		{
		}

		[Token(Token = "0x6000DA1")]
		[Address(RVA = "0xBD594C", Offset = "0xBD594C", VA = "0xBD594C")]
		public void Close()
		{
		}

		[Token(Token = "0x6000DA2")]
		[Address(RVA = "0xBD5A00", Offset = "0xBD5A00", VA = "0xBD5A00")]
		public void Reload()
		{
		}

		[Token(Token = "0x6000DA3")]
		[Address(RVA = "0xBD5AB4", Offset = "0xBD5AB4", VA = "0xBD5AB4")]
		public void PreShoot()
		{
		}

		[Token(Token = "0x6000DA4")]
		[Address(RVA = "0xBD5B68", Offset = "0xBD5B68", VA = "0xBD5B68", Slot = "9")]
		public TooltipDescription GetTooltip()
		{
			return default(TooltipDescription);
		}

		[Token(Token = "0x6000DA5")]
		[Address(RVA = "0xBD6198", Offset = "0xBD6198", VA = "0xBD6198")]
		private static string GetLocalizedText(string key)
		{
			return null;
		}

		[Token(Token = "0x6000DA6")]
		[Address(RVA = "0xBD61F4", Offset = "0xBD61F4", VA = "0xBD61F4", Slot = "10")]
		public void OnGrabStateChanged(GrabState newGrabState)
		{
		}

		[Token(Token = "0x6000DA7")]
		[Address(RVA = "0xBD61F8", Offset = "0xBD61F8", VA = "0xBD61F8", Slot = "11")]
		public bool IsOnValidGround()
		{
			return default(bool);
		}

		[Token(Token = "0x6000DA8")]
		[Address(RVA = "0xBD6320", Offset = "0xBD6320", VA = "0xBD6320", Slot = "12")]
		public bool CanPlaySound()
		{
			return default(bool);
		}

		[Token(Token = "0x6000DA9")]
		[Address(RVA = "0xBD6328", Offset = "0xBD6328", VA = "0xBD6328", Slot = "13")]
		public void OnGrab()
		{
		}

		[Token(Token = "0x6000DAA")]
		[Address(RVA = "0xBD6354", Offset = "0xBD6354", VA = "0xBD6354", Slot = "14")]
		public void OnGrounded()
		{
		}

		[Token(Token = "0x6000DAB")]
		[Address(RVA = "0xBD64E8", Offset = "0xBD64E8", VA = "0xBD64E8")]
		[IteratorStateMachine(typeof(<ReadjustShip>d__119))]
		private IEnumerator ReadjustShip()
		{
			return null;
		}

		[Token(Token = "0x6000DAC")]
		[Address(RVA = "0xBD2140", Offset = "0xBD2140", VA = "0xBD2140")]
		[IteratorStateMachine(typeof(<SinkShip>d__120))]
		private IEnumerator SinkShip()
		{
			return null;
		}

		[Token(Token = "0x6000DAD")]
		[Address(RVA = "0xBD655C", Offset = "0xBD655C", VA = "0xBD655C", Slot = "15")]
		public bool ResetPositionOnGround()
		{
			return default(bool);
		}

		[Token(Token = "0x6000DAE")]
		[Address(RVA = "0xBD6564", Offset = "0xBD6564", VA = "0xBD6564")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000DAF")]
		[Address(RVA = "0xBD6738", Offset = "0xBD6738", VA = "0xBD6738")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6000DB0")]
		[Address(RVA = "0xBD6840", Offset = "0xBD6840", VA = "0xBD6840", Slot = "16")]
		public void SetPlayerAware(bool value)
		{
		}

		[Token(Token = "0x6000DB1")]
		[Address(RVA = "0xBD684C", Offset = "0xBD684C", VA = "0xBD684C", Slot = "17")]
		public bool IsTown(out Town town)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DB2")]
		[Address(RVA = "0xBD686C", Offset = "0xBD686C", VA = "0xBD686C", Slot = "18")]
		public void Burn()
		{
		}

		[Token(Token = "0x6000DB5")]
		[Address(RVA = "0xBD6704", Offset = "0xBD6704", VA = "0xBD6704", Slot = "19")]
		public void Extinguish(bool crowd = false)
		{
		}

		[Token(Token = "0x6000DB7")]
		[Address(RVA = "0xBD2CA4", Offset = "0xBD2CA4", VA = "0xBD2CA4")]
		private void BurningRoutine()
		{
		}

		[Token(Token = "0x6000DB8")]
		[Address(RVA = "0xBD68D4", Offset = "0xBD68D4", VA = "0xBD68D4")]
		private bool CheckDelayWithSeed(float lastOccurence, float delay)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DB9")]
		[Address(RVA = "0xBD1330", Offset = "0xBD1330", VA = "0xBD1330")]
		public ShipData ToData()
		{
			return null;
		}

		[Token(Token = "0x6000DBA")]
		[Address(RVA = "0xBD1604", Offset = "0xBD1604", VA = "0xBD1604")]
		public void LoadData(ShipData data)
		{
		}

		[Token(Token = "0x6000DBB")]
		[Address(RVA = "0xBD68F0", Offset = "0xBD68F0", VA = "0xBD68F0")]
		public Ship()
		{
		}
	}
	[Token(Token = "0x2000212")]
	public class ShipAnimationEventReceiver : MonoBehaviour
	{
		[Token(Token = "0x4000C74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Ship ship;

		[Token(Token = "0x6000DCF")]
		[Address(RVA = "0xBD88E0", Offset = "0xBD88E0", VA = "0xBD88E0")]
		public void PreShoot()
		{
		}

		[Token(Token = "0x6000DD0")]
		[Address(RVA = "0xBD88FC", Offset = "0xBD88FC", VA = "0xBD88FC")]
		public void ShootLeft(int canonIndex)
		{
		}

		[Token(Token = "0x6000DD1")]
		[Address(RVA = "0xBD891C", Offset = "0xBD891C", VA = "0xBD891C")]
		public void ShootRight(int canonIndex)
		{
		}

		[Token(Token = "0x6000DD2")]
		[Address(RVA = "0xBD893C", Offset = "0xBD893C", VA = "0xBD893C")]
		public void Open()
		{
		}

		[Token(Token = "0x6000DD3")]
		[Address(RVA = "0xBD8958", Offset = "0xBD8958", VA = "0xBD8958")]
		public void Close()
		{
		}

		[Token(Token = "0x6000DD4")]
		[Address(RVA = "0xBD8974", Offset = "0xBD8974", VA = "0xBD8974")]
		public void Reload()
		{
		}

		[Token(Token = "0x6000DD5")]
		[Address(RVA = "0xBD8990", Offset = "0xBD8990", VA = "0xBD8990")]
		public ShipAnimationEventReceiver()
		{
		}
	}
	[Token(Token = "0x2000213")]
	[CreateAssetMenu(fileName = "Ship Animation Variables", menuName = "Animations/Ship Animation Variables", order = 0)]
	public class ShipAnimationsVariables : ScriptableObject
	{
		[Token(Token = "0x4000C75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AnimationBool isMoving;

		[Token(Token = "0x4000C76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AnimationBool combatMode;

		[Token(Token = "0x4000C77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimationTrigger fireCanonsLeft;

		[Token(Token = "0x4000C78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimationTrigger fireCanonsRight;

		[Token(Token = "0x6000DD6")]
		[Address(RVA = "0xBD8998", Offset = "0xBD8998", VA = "0xBD8998")]
		public ShipAnimationsVariables()
		{
		}
	}
	[Token(Token = "0x2000214")]
	[CreateAssetMenu(fileName = "Ship Model", menuName = "Naval/Ship Model", order = 0)]
	public class ShipModel : ScriptableObject
	{
		[Token(Token = "0x4000C79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject prefab;

		[Token(Token = "0x4000C7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LayeredAudioSet layeredAudioLoop;

		[Token(Token = "0x4000C7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AudioSet openHatchesSound;

		[Token(Token = "0x4000C7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AudioSet closeHatchesSound;

		[Token(Token = "0x4000C7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AudioSet preShootSound;

		[Token(Token = "0x4000C7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AudioSet fireSound;

		[Token(Token = "0x4000C7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public AudioSet reloadSound;

		[Token(Token = "0x4000C80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AudioSet damageSound;

		[Token(Token = "0x4000C81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public AudioSet destroyedSound;

		[Token(Token = "0x4000C82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public AudioSet sinkingSound;

		[Token(Token = "0x4000C83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public AudioSet grabbedFromWaterSound;

		[Token(Token = "0x4000C84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public AudioSet droppedIntoWaterSound;

		[Token(Token = "0x4000C85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[FormerlySerializedAs("fireVFX")]
		public GameObject canonFireVFX;

		[Token(Token = "0x4000C86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public GameObject onFireVFX;

		[Token(Token = "0x4000C87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public GameObject damageVFX;

		[Token(Token = "0x4000C88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public GameObject explosionVFX;

		[Token(Token = "0x4000C89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public FloatVariable maxHealth;

		[Token(Token = "0x4000C8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public FloatVariable armor;

		[Token(Token = "0x4000C8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public FloatVariable damage;

		[Token(Token = "0x4000C8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public FloatVariable canonMinRange;

		[Token(Token = "0x4000C8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public FloatVariable canonMaxRange;

		[Token(Token = "0x4000C8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public FloatVariable minCanonAngle;

		[Token(Token = "0x4000C8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public FloatVariable maxCanonAngle;

		[Token(Token = "0x4000C90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public FloatVariable rotationSpeed;

		[Token(Token = "0x4000C91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public FloatVariable shootDelay;

		[Token(Token = "0x4000C92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public FloatVariable shootAnimationDuration;

		[Token(Token = "0x4000C93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public NavigationAgentConfiguration.WalkSpeed speed;

		[Token(Token = "0x6000DD7")]
		[Address(RVA = "0xBD89A0", Offset = "0xBD89A0", VA = "0xBD89A0")]
		public ShipModel()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000215")]
	public class ShipModelResponse
	{
		[Token(Token = "0x4000C94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public TownType civilizationType;

		[Token(Token = "0x4000C95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public TechLevel techLevel;

		[Token(Token = "0x4000C96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Ship.Type shipType;

		[Token(Token = "0x4000C97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ShipModel model;

		[Token(Token = "0x6000DD8")]
		[Address(RVA = "0xBD89B0", Offset = "0xBD89B0", VA = "0xBD89B0")]
		public ShipModelResponse()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000216")]
	public class ShipModelQuery
	{
		[Token(Token = "0x4000C98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public TownType civilizationType;

		[Token(Token = "0x4000C99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public TechLevel techLevel;

		[Token(Token = "0x4000C9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Ship.Type shipType;

		[Token(Token = "0x6000DD9")]
		[Address(RVA = "0xBD89B8", Offset = "0xBD89B8", VA = "0xBD89B8")]
		public ShipModelQuery()
		{
		}
	}
	[Token(Token = "0x2000217")]
	[CreateAssetMenu(fileName = "Ship Model Collection", menuName = "Naval/Ship model collection", order = 0)]
	public class ShipModelCollection : ScriptableObject
	{
		[Token(Token = "0x4000C9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ShipModel defaultValue;

		[Token(Token = "0x4000C9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public List<ShipModelResponse> values;

		[Token(Token = "0x6000DDA")]
		[Address(RVA = "0xBD89C0", Offset = "0xBD89C0", VA = "0xBD89C0")]
		public ShipModel GetShip(TownType civilizationType, TechLevel techLevel, Ship.Type shipType)
		{
			return null;
		}

		[Token(Token = "0x6000DDB")]
		[Address(RVA = "0xBD8B48", Offset = "0xBD8B48", VA = "0xBD8B48")]
		public ShipModelCollection()
		{
		}
	}
	[Token(Token = "0x2000218")]
	public class ShipModelManager : MonoBehaviour
	{
		[Token(Token = "0x4000C9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Ship ship;

		[Token(Token = "0x4000C9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ShipModelCollection shipModelCollection;

		[Token(Token = "0x4000C9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LayeredAudioSetPlayer loopPlayer;

		[Token(Token = "0x4000CA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject modelInstance;

		[Token(Token = "0x4000CA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public PathFollower pathFollower;

		[Token(Token = "0x4000CA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private GameObject fireVfxInstance;

		[Token(Token = "0x4000CA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private ShipModel shipModelInternal;

		[NonSerialized]
		[Token(Token = "0x4000CA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public CanonsManager canonsManager;

		[Token(Token = "0x170001B3")]
		public ShipModel ShipModel
		{
			[Token(Token = "0x6000DDC")]
			[Address(RVA = "0xBD8B50", Offset = "0xBD8B50", VA = "0xBD8B50")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000DDD")]
			[Address(RVA = "0xBD8B58", Offset = "0xBD8B58", VA = "0xBD8B58")]
			private set
			{
			}
		}

		[Token(Token = "0x6000DDE")]
		[Address(RVA = "0xBD8BF8", Offset = "0xBD8BF8", VA = "0xBD8BF8")]
		public void RefreshModel()
		{
		}

		[Token(Token = "0x6000DDF")]
		[Address(RVA = "0xBD8FB8", Offset = "0xBD8FB8", VA = "0xBD8FB8")]
		private void FindCanonManager()
		{
		}

		[Token(Token = "0x6000DE0")]
		[Address(RVA = "0xBD8ED0", Offset = "0xBD8ED0", VA = "0xBD8ED0")]
		private void RefreshSailsTexture()
		{
		}

		[Token(Token = "0x6000DE1")]
		[Address(RVA = "0xBD9060", Offset = "0xBD9060", VA = "0xBD9060")]
		public void Burn()
		{
		}

		[Token(Token = "0x6000DE2")]
		[Address(RVA = "0xBD9198", Offset = "0xBD9198", VA = "0xBD9198")]
		public void StopBurning()
		{
		}

		[Token(Token = "0x6000DE3")]
		[Address(RVA = "0xBD9224", Offset = "0xBD9224", VA = "0xBD9224")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000DE4")]
		[Address(RVA = "0xBD9248", Offset = "0xBD9248", VA = "0xBD9248")]
		public ShipModelManager()
		{
		}
	}
}
namespace MyronVR
{
	[Token(Token = "0x2000219")]
	public class ActionManager : MonoBehaviour
	{
		[Token(Token = "0x4000CA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ControllerActionReceiver leftHand;

		[Token(Token = "0x4000CA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ControllerActionReceiver rightHand;

		[Token(Token = "0x4000CA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float minRotationDelay;

		[Token(Token = "0x4000CA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float smoothRotationSpeed;

		[Token(Token = "0x4000CA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float smoothMovementSpeed;

		[Token(Token = "0x4000CAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Audio", order = 1)]
		public AudioSet snapTurnAudioSet;

		[Token(Token = "0x4000CAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AudioSet teleportStartAudioSet;

		[Token(Token = "0x4000CAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public AudioSet teleportEndAudioSet;

		[Token(Token = "0x4000CAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly Dictionary<ControllerEnum, ControllerActionReceiver> receivers;

		[Token(Token = "0x4000CAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float lastRotationTime;

		[Token(Token = "0x4000CAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private bool useThisFrame;

		[Token(Token = "0x6000DE5")]
		[Address(RVA = "0xBD9250", Offset = "0xBD9250", VA = "0xBD9250")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000DE6")]
		[Address(RVA = "0xBD92C0", Offset = "0xBD92C0", VA = "0xBD92C0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000DE7")]
		[Address(RVA = "0xBD92C8", Offset = "0xBD92C8", VA = "0xBD92C8")]
		public void Grab(ControllerEnum controllerEnum)
		{
		}

		[Token(Token = "0x6000DE8")]
		[Address(RVA = "0xBD93DC", Offset = "0xBD93DC", VA = "0xBD93DC")]
		public void Release(ControllerEnum controllerEnum)
		{
		}

		[Token(Token = "0x6000DE9")]
		[Address(RVA = "0xBD945C", Offset = "0xBD945C", VA = "0xBD945C")]
		public void ToggleMenu(ControllerEnum controllerEnum)
		{
		}

		[Token(Token = "0x6000DEA")]
		[Address(RVA = "0xBD9614", Offset = "0xBD9614", VA = "0xBD9614")]
		public void ToggleMiracleMenu(ControllerEnum controllerEnum)
		{
		}

		[Token(Token = "0x6000DEB")]
		[Address(RVA = "0xBD97CC", Offset = "0xBD97CC", VA = "0xBD97CC")]
		public void Squeeze(ControllerEnum controllerEnum)
		{
		}

		[Token(Token = "0x6000DEC")]
		[Address(RVA = "0xBD984C", Offset = "0xBD984C", VA = "0xBD984C")]
		public void GrabWorld(ControllerEnum controllerEnum)
		{
		}

		[Token(Token = "0x6000DED")]
		[Address(RVA = "0xBD9944", Offset = "0xBD9944", VA = "0xBD9944")]
		public void ReleaseWorld(ControllerEnum controllerEnum)
		{
		}

		[Token(Token = "0x6000DEE")]
		[Address(RVA = "0xBD9A1C", Offset = "0xBD9A1C", VA = "0xBD9A1C")]
		public void StartTeleport(ControllerEnum controllerEnum)
		{
		}

		[Token(Token = "0x6000DEF")]
		[Address(RVA = "0xBD9D70", Offset = "0xBD9D70", VA = "0xBD9D70")]
		public void DoTeleport(ControllerEnum controllerEnum)
		{
		}

		[Token(Token = "0x6000DF0")]
		[Address(RVA = "0xBDA020", Offset = "0xBDA020", VA = "0xBDA020")]
		public void Use(ControllerEnum controllerEnum)
		{
		}

		[Token(Token = "0x6000DF1")]
		[Address(RVA = "0xBDA0E4", Offset = "0xBDA0E4", VA = "0xBDA0E4")]
		public void StopUsing(ControllerEnum controllerEnum)
		{
		}

		[Token(Token = "0x6000DF2")]
		[Address(RVA = "0xBDA164", Offset = "0xBDA164", VA = "0xBDA164")]
		public void SwitchView()
		{
		}

		[Token(Token = "0x6000DF3")]
		[Address(RVA = "0xBDA334", Offset = "0xBDA334", VA = "0xBDA334")]
		public void RotateByAngle(int angle)
		{
		}

		[Token(Token = "0x6000DF4")]
		[Address(RVA = "0xBDA838", Offset = "0xBDA838", VA = "0xBDA838")]
		public void LookBack()
		{
		}

		[Token(Token = "0x6000DF5")]
		[Address(RVA = "0xBDA650", Offset = "0xBDA650", VA = "0xBDA650")]
		public void SmoothRotation(int direction)
		{
		}

		[Token(Token = "0x6000DF6")]
		[Address(RVA = "0xBD9CF0", Offset = "0xBD9CF0", VA = "0xBD9CF0")]
		public void SmoothMovement(Vector3 direction)
		{
		}

		[Token(Token = "0x6000DF7")]
		[Address(RVA = "0xBDA4E4", Offset = "0xBDA4E4", VA = "0xBDA4E4")]
		private void CancelAllPointers()
		{
		}

		[Token(Token = "0x6000DF8")]
		[Address(RVA = "0xBDAC04", Offset = "0xBDAC04", VA = "0xBDAC04")]
		public void InteractUI(ControllerEnum controllerEnum)
		{
		}

		[Token(Token = "0x6000DF9")]
		[Address(RVA = "0xBDAC84", Offset = "0xBDAC84", VA = "0xBDAC84")]
		public void StopInteractUI(ControllerEnum controllerEnum)
		{
		}

		[Token(Token = "0x6000DFA")]
		[Address(RVA = "0xBDAD04", Offset = "0xBDAD04", VA = "0xBDAD04")]
		public void HideControllers()
		{
		}

		[Token(Token = "0x6000DFB")]
		[Address(RVA = "0xBDADB0", Offset = "0xBDADB0", VA = "0xBDADB0")]
		public void ShowControllers()
		{
		}

		[Token(Token = "0x6000DFC")]
		[Address(RVA = "0xBDAE5C", Offset = "0xBDAE5C", VA = "0xBDAE5C")]
		public ActionManager()
		{
		}
	}
	[Token(Token = "0x200021A")]
	public class DefaultKinematicObject : MonoBehaviour, IKinematicObject
	{
		[Token(Token = "0x6000DFD")]
		[Address(RVA = "0xBDAEF0", Offset = "0xBDAEF0", VA = "0xBDAEF0", Slot = "4")]
		public bool IsOnValidGround()
		{
			return default(bool);
		}

		[Token(Token = "0x6000DFE")]
		[Address(RVA = "0xBDAEF8", Offset = "0xBDAEF8", VA = "0xBDAEF8", Slot = "5")]
		public bool CanPlaySound()
		{
			return default(bool);
		}

		[Token(Token = "0x6000DFF")]
		[Address(RVA = "0xBDAF00", Offset = "0xBDAF00", VA = "0xBDAF00", Slot = "6")]
		public void OnGrab()
		{
		}

		[Token(Token = "0x6000E00")]
		[Address(RVA = "0xBDAF04", Offset = "0xBDAF04", VA = "0xBDAF04", Slot = "7")]
		public void OnGrounded()
		{
		}

		[Token(Token = "0x6000E01")]
		[Address(RVA = "0xBDAF08", Offset = "0xBDAF08", VA = "0xBDAF08", Slot = "8")]
		public bool ResetPositionOnGround()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E02")]
		[Address(RVA = "0xBDAF10", Offset = "0xBDAF10", VA = "0xBDAF10")]
		public DefaultKinematicObject()
		{
		}
	}
	[Token(Token = "0x200021B")]
	public interface ISqueezable
	{
		[Token(Token = "0x6000E03")]
		bool Squeeze();
	}
	[Token(Token = "0x200021C")]
	public class TeleportDestinationPointer : MonoBehaviour
	{
		[Token(Token = "0x4000CB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform origin;

		[Token(Token = "0x4000CB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleporterConfiguration configuration;

		[Token(Token = "0x4000CB2")]
		private const float BeamAdjustOffset = 0.0001f;

		[Token(Token = "0x4000CB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 fixedForwardBeamForward;

		[Token(Token = "0x4000CB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private RaycastHit destinationHit;

		[Token(Token = "0x4000CB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GameObject lineContainer;

		[Token(Token = "0x4000CB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject destinationMarker;

		[Token(Token = "0x4000CB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private List<GameObject> generatedPoints;

		[Token(Token = "0x4000CB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private bool isActive;

		[Token(Token = "0x4000CB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private CurveUtils.BezierCurveGenerator bezierCurveGenerator;

		[Token(Token = "0x4000CBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private int layerMask;

		[Token(Token = "0x170001B4")]
		public bool IsActive
		{
			[Token(Token = "0x6000E04")]
			[Address(RVA = "0xBDAF18", Offset = "0xBDAF18", VA = "0xBDAF18")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000E05")]
		[Address(RVA = "0xBDAF20", Offset = "0xBDAF20", VA = "0xBDAF20")]
		public void Start()
		{
		}

		[Token(Token = "0x6000E06")]
		[Address(RVA = "0xBDB118", Offset = "0xBDB118", VA = "0xBDB118")]
		public void Enable()
		{
		}

		[Token(Token = "0x6000E07")]
		[Address(RVA = "0xBDB2A4", Offset = "0xBDB2A4", VA = "0xBDB2A4")]
		public void Update()
		{
		}

		[Token(Token = "0x6000E08")]
		[Address(RVA = "0xBDBFB4", Offset = "0xBDBFB4", VA = "0xBDBFB4")]
		public Transform Select()
		{
			return null;
		}

		[Token(Token = "0x6000E09")]
		[Address(RVA = "0xBDB19C", Offset = "0xBDB19C", VA = "0xBDB19C")]
		private void CreateTracer()
		{
		}

		[Token(Token = "0x6000E0A")]
		[Address(RVA = "0xBDB318", Offset = "0xBDB318", VA = "0xBDB318")]
		private Vector3 ProjectForwardBeam()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000E0B")]
		[Address(RVA = "0xBDB694", Offset = "0xBDB694", VA = "0xBDB694")]
		private Vector3 ProjectDownBeam(Vector3 jointPosition)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000E0C")]
		[Address(RVA = "0xBDB934", Offset = "0xBDB934", VA = "0xBDB934")]
		private void AdjustForEarlyCollisions(Vector3 jointPosition, Vector3 downPosition)
		{
		}

		[Token(Token = "0x6000E0D")]
		[Address(RVA = "0xBDC070", Offset = "0xBDC070", VA = "0xBDC070")]
		private void DisplayCurvedBeam(Vector3 jointPosition, Vector3 downPosition)
		{
		}

		[Token(Token = "0x6000E0E")]
		[Address(RVA = "0xBDC1AC", Offset = "0xBDC1AC", VA = "0xBDC1AC")]
		private void SetPointerCursor()
		{
		}

		[Token(Token = "0x6000E0F")]
		[Address(RVA = "0xBDBE74", Offset = "0xBDBE74", VA = "0xBDBE74")]
		private void MakeRenderersVisible()
		{
		}

		[Token(Token = "0x6000E10")]
		[Address(RVA = "0xBDC260", Offset = "0xBDC260", VA = "0xBDC260")]
		private void ToggleRendererVisibility(GameObject givenObject, bool state)
		{
		}

		[Token(Token = "0x6000E11")]
		[Address(RVA = "0xBDC348", Offset = "0xBDC348", VA = "0xBDC348")]
		public TeleportDestinationPointer()
		{
		}
	}
	[Token(Token = "0x200021D")]
	public class MyronVr : MonoBehaviour
	{
		[Token(Token = "0x4000CBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ActionManager actionManager;

		[Token(Token = "0x4000CBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static IVendorSdk activeSdk;

		[Token(Token = "0x4000CBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static bool hasActiveSdk;

		[Token(Token = "0x6000E12")]
		[Address(RVA = "0xBDC350", Offset = "0xBDC350", VA = "0xBDC350")]
		public void Update()
		{
		}

		[Token(Token = "0x6000E13")]
		[Address(RVA = "0xBDD7BC", Offset = "0xBDD7BC", VA = "0xBDD7BC")]
		private void CheckThumbstickPositions()
		{
		}

		[Token(Token = "0x6000E14")]
		[Address(RVA = "0xBDE0B4", Offset = "0xBDE0B4", VA = "0xBDE0B4")]
		private void CheckTouchPadPress()
		{
		}

		[Token(Token = "0x6000E15")]
		[Address(RVA = "0xBDD2BC", Offset = "0xBDD2BC", VA = "0xBDD2BC")]
		private void CheckButtonsA()
		{
		}

		[Token(Token = "0x6000E16")]
		[Address(RVA = "0xBDD3A0", Offset = "0xBDD3A0", VA = "0xBDD3A0")]
		private void CheckButtonsB()
		{
		}

		[Token(Token = "0x6000E17")]
		[Address(RVA = "0xBDD484", Offset = "0xBDD484", VA = "0xBDD484")]
		private void CheckButtonsX()
		{
		}

		[Token(Token = "0x6000E18")]
		[Address(RVA = "0xBDD568", Offset = "0xBDD568", VA = "0xBDD568")]
		private void CheckButtonsY()
		{
		}

		[Token(Token = "0x6000E19")]
		[Address(RVA = "0xBDD648", Offset = "0xBDD648", VA = "0xBDD648")]
		private void CheckMenuButton()
		{
		}

		[Token(Token = "0x6000E1A")]
		[Address(RVA = "0xBDCE34", Offset = "0xBDCE34", VA = "0xBDCE34")]
		private void CheckGrip()
		{
		}

		[Token(Token = "0x6000E1B")]
		[Address(RVA = "0xBDC58C", Offset = "0xBDC58C", VA = "0xBDC58C")]
		private void CheckTriggers()
		{
		}

		[Token(Token = "0x6000E1C")]
		[Address(RVA = "0xBDE330", Offset = "0xBDE330", VA = "0xBDE330")]
		public static Vector3 GetPosition(ControllerEnum controllerEnum)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000E1D")]
		[Address(RVA = "0xBDE43C", Offset = "0xBDE43C", VA = "0xBDE43C")]
		public static Vector3 GetVelocity(ControllerEnum controllerEnum)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000E1E")]
		[Address(RVA = "0xBDE548", Offset = "0xBDE548", VA = "0xBDE548")]
		public static Vector3 GetAngularVelocity(ControllerEnum controllerEnum)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000E1F")]
		[Address(RVA = "0xBDE654", Offset = "0xBDE654", VA = "0xBDE654")]
		public static Vector3 GetAcceleration(ControllerEnum controllerEnum)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000E20")]
		[Address(RVA = "0xBDE760", Offset = "0xBDE760", VA = "0xBDE760")]
		public static Transform GetTransformForNode(XRNode xrNode)
		{
			return null;
		}

		[Token(Token = "0x6000E21")]
		[Address(RVA = "0xBDE824", Offset = "0xBDE824", VA = "0xBDE824")]
		public static void TriggerHapticPulse(ControllerEnum controllerEnum, HapticPulseType hapticPulseType)
		{
		}

		[Token(Token = "0x6000E22")]
		[Address(RVA = "0xBDEAC4", Offset = "0xBDEAC4", VA = "0xBDEAC4")]
		public static void TriggerHapticsByAudioClip(AudioClip clip, ControllerEnum[] controllerEnum, bool flipChannels, HapticPulseType fallback)
		{
		}

		[Token(Token = "0x6000E23")]
		[Address(RVA = "0xBDECB4", Offset = "0xBDECB4", VA = "0xBDECB4")]
		public MyronVr()
		{
		}
	}
	[Token(Token = "0x200021E")]
	public enum HapticPulseType
	{
		[Token(Token = "0x4000CBF")]
		SubtleShort,
		[Token(Token = "0x4000CC0")]
		SubtleLong,
		[Token(Token = "0x4000CC1")]
		BigShort,
		[Token(Token = "0x4000CC2")]
		BigLong
	}
}
namespace MyronVR.Vendors
{
	[Token(Token = "0x200021F")]
	public abstract class BaseVendorSdk : MonoBehaviour, IVendorSdk
	{
		[Token(Token = "0x2000220")]
		[CompilerGenerated]
		private sealed class <Start>d__1 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000CCE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000CCF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000CD0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public BaseVendorSdk <>4__this;

			[Token(Token = "0x170001B5")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000E5A")]
				[Address(RVA = "0xBDF740", Offset = "0xBDF740", VA = "0xBDF740", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001B6")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000E5C")]
				[Address(RVA = "0xBDF788", Offset = "0xBDF788", VA = "0xBDF788", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000E57")]
			[Address(RVA = "0xBDEF0C", Offset = "0xBDEF0C", VA = "0xBDEF0C")]
			[DebuggerHidden]
			public <Start>d__1(int <>1__state)
			{
			}

			[Token(Token = "0x6000E58")]
			[Address(RVA = "0xBDF640", Offset = "0xBDF640", VA = "0xBDF640", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000E59")]
			[Address(RVA = "0xBDF644", Offset = "0xBDF644", VA = "0xBDF644", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000E5B")]
			[Address(RVA = "0xBDF748", Offset = "0xBDF748", VA = "0xBDF748", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000CC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform trackingSpace;

		[Token(Token = "0x4000CC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform head;

		[Token(Token = "0x4000CC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform leftController;

		[Token(Token = "0x4000CC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform rightController;

		[Token(Token = "0x4000CC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform displayTarget;

		[Token(Token = "0x4000CC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform menuDisplayTarget;

		[Token(Token = "0x4000CC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool forcedPause;

		[Token(Token = "0x4000CCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected static List<XRInputSubsystem> InputSubsystems;

		[Token(Token = "0x4000CCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected InputDevice leftDevice;

		[Token(Token = "0x4000CCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected InputDevice rightDevice;

		[Token(Token = "0x4000CCD")]
		private const double DeadZoneThreshold = 0.5;

		[Token(Token = "0x6000E24")]
		[Address(RVA = "0xBDECBC", Offset = "0xBDECBC", VA = "0xBDECBC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000E25")]
		[Address(RVA = "0xBDEE98", Offset = "0xBDEE98", VA = "0xBDEE98")]
		[IteratorStateMachine(typeof(<Start>d__1))]
		public IEnumerator Start()
		{
			return null;
		}

		[Token(Token = "0x6000E26")]
		[Address(RVA = "0xBDEF34", Offset = "0xBDEF34", VA = "0xBDEF34", Slot = "40")]
		protected virtual bool Init()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E27")]
		[Address(RVA = "0xBDF16C", Offset = "0xBDF16C", VA = "0xBDF16C", Slot = "41")]
		public virtual bool IsActionsMappingSupported()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E28")]
		[Address(RVA = "0xBDF174", Offset = "0xBDF174", VA = "0xBDF174", Slot = "42")]
		public virtual bool IsAudioClipHapticsSupported()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E29")]
		[Address(RVA = "0xBDF17C", Offset = "0xBDF17C", VA = "0xBDF17C", Slot = "6")]
		public bool IsForcedPause()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E2A")]
		[Address(RVA = "0xBDF184", Offset = "0xBDF184", VA = "0xBDF184")]
		private void OnApplicationPause(bool pauseStatus)
		{
		}

		[Token(Token = "0x6000E2B")]
		[Address(RVA = "0xBDF290", Offset = "0xBDF290", VA = "0xBDF290")]
		protected static void PauseTimeAndSound()
		{
		}

		[Token(Token = "0x6000E2C")]
		[Address(RVA = "0xBDF2B0", Offset = "0xBDF2B0", VA = "0xBDF2B0")]
		protected static void ResumeTimeAndSound()
		{
		}

		[Token(Token = "0x6000E2D")]
		public abstract MyronXrSdkEnum GetSdkType();

		[Token(Token = "0x6000E2E")]
		[Address(RVA = "0xBDF358", Offset = "0xBDF358", VA = "0xBDF358", Slot = "8")]
		public Transform GetCenterOfView()
		{
			return null;
		}

		[Token(Token = "0x6000E2F")]
		[Address(RVA = "0xBDF360", Offset = "0xBDF360", VA = "0xBDF360", Slot = "9")]
		public Transform GetMenuDisplayTarget()
		{
			return null;
		}

		[Token(Token = "0x6000E30")]
		[Address(RVA = "0xBDF368", Offset = "0xBDF368", VA = "0xBDF368")]
		public static bool IsAxisUp(Vector2 axis2D)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E31")]
		[Address(RVA = "0xBDF390", Offset = "0xBDF390", VA = "0xBDF390")]
		public static bool IsAxisDown(Vector2 axis2D)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E32")]
		[Address(RVA = "0xBDF3B8", Offset = "0xBDF3B8", VA = "0xBDF3B8")]
		public static bool IsAxisLeft(Vector2 axis2D)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E33")]
		[Address(RVA = "0xBDF3E0", Offset = "0xBDF3E0", VA = "0xBDF3E0")]
		public static bool IsAxisRight(Vector2 axis2D)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E34")]
		[Address(RVA = "0xBDF408", Offset = "0xBDF408", VA = "0xBDF408")]
		public static bool IsAxisCenter(Vector2 axis2D)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E35")]
		public abstract Vector3 GetPosition(ControllerEnum controllerEnum);

		[Token(Token = "0x6000E36")]
		public abstract Vector3 GetVelocity(ControllerEnum controllerEnum);

		[Token(Token = "0x6000E37")]
		public abstract Vector3 GetAngularVelocity(ControllerEnum controllerEnum);

		[Token(Token = "0x6000E38")]
		public abstract Vector3 GetAcceleration(ControllerEnum controllerEnum);

		[Token(Token = "0x6000E39")]
		public abstract Vector3 GetAngularAcceleration(ControllerEnum controllerEnum);

		[Token(Token = "0x6000E3A")]
		public abstract bool TriggerPressed(ControllerEnum controllerEnum);

		[Token(Token = "0x6000E3B")]
		public abstract bool TriggerReleased(ControllerEnum controllerEnum);

		[Token(Token = "0x6000E3C")]
		public abstract bool GripPressed(ControllerEnum controllerEnum);

		[Token(Token = "0x6000E3D")]
		public abstract bool GripReleased(ControllerEnum controllerEnum);

		[Token(Token = "0x6000E3E")]
		public abstract bool ButtonAPressed(ControllerEnum controllerEnum);

		[Token(Token = "0x6000E3F")]
		public abstract bool ButtonAReleased(ControllerEnum controllerEnum);

		[Token(Token = "0x6000E40")]
		public abstract bool ButtonBPressed(ControllerEnum controllerEnum);

		[Token(Token = "0x6000E41")]
		public abstract bool ButtonBReleased(ControllerEnum controllerEnum);

		[Token(Token = "0x6000E42")]
		public abstract bool ButtonXPressed(ControllerEnum controllerEnum);

		[Token(Token = "0x6000E43")]
		public abstract bool ButtonXReleased(ControllerEnum controllerEnum);

		[Token(Token = "0x6000E44")]
		public abstract bool ButtonYPressed(ControllerEnum controllerEnum);

		[Token(Token = "0x6000E45")]
		public abstract bool ButtonYReleased(ControllerEnum controllerEnum);

		[Token(Token = "0x6000E46")]
		[Address(RVA = "0xBDF498", Offset = "0xBDF498", VA = "0xBDF498", Slot = "27")]
		public Transform GetTransformForNode(XRNode xrNode)
		{
			return null;
		}

		[Token(Token = "0x6000E47")]
		public abstract bool ThumbStickUp(ControllerEnum controllerEnum);

		[Token(Token = "0x6000E48")]
		public abstract bool ThumbStickUpReleased(ControllerEnum controllerEnum);

		[Token(Token = "0x6000E49")]
		public abstract bool ThumbStickDown(ControllerEnum controllerEnum);

		[Token(Token = "0x6000E4A")]
		public abstract bool ThumbStickLeft(ControllerEnum controllerEnum);

		[Token(Token = "0x6000E4B")]
		public abstract bool ThumbStickRight(ControllerEnum controllerEnum);

		[Token(Token = "0x6000E4C")]
		public abstract bool ThumbStickPressed(ControllerEnum controllerEnum);

		[Token(Token = "0x6000E4D")]
		public abstract bool ThumbStickReleased(ControllerEnum controllerEnum);

		[Token(Token = "0x6000E4E")]
		public abstract void TriggerHapticPulse(ControllerEnum controllerEnum, float strength, float duration, float pulseInterval);

		[Token(Token = "0x6000E4F")]
		[Address(RVA = "0xBDF560", Offset = "0xBDF560", VA = "0xBDF560", Slot = "69")]
		public virtual void TriggerHapticByAudioClip(AudioClip clip, ControllerEnum[] controllerEnum, bool flipChannels)
		{
		}

		[Token(Token = "0x6000E50")]
		public abstract bool ButtonStartPressed(ControllerEnum controllerEnum);

		[Token(Token = "0x6000E51")]
		public abstract void CheckActions(ActionManager actionManager);

		[Token(Token = "0x6000E52")]
		[Address(RVA = "0xBDF564", Offset = "0xBDF564", VA = "0xBDF564", Slot = "72")]
		public virtual float GetThrowMultiplier()
		{
			return default(float);
		}

		[Token(Token = "0x6000E53")]
		[Address(RVA = "0xBDF56C", Offset = "0xBDF56C", VA = "0xBDF56C")]
		protected InputDevice GetInputDevice(ControllerEnum controllerEnum)
		{
			return default(InputDevice);
		}

		[Token(Token = "0x6000E54")]
		[Address(RVA = "0xBDF594", Offset = "0xBDF594", VA = "0xBDF594")]
		protected static int GetIndex(ControllerEnum controllerEnum)
		{
			return default(int);
		}

		[Token(Token = "0x6000E55")]
		[Address(RVA = "0xBDF5A0", Offset = "0xBDF5A0", VA = "0xBDF5A0")]
		protected BaseVendorSdk()
		{
		}
	}
	[Token(Token = "0x2000221")]
	public interface IVendorSdk
	{
		[Token(Token = "0x6000E5D")]
		bool IsActionsMappingSupported();

		[Token(Token = "0x6000E5E")]
		bool IsAudioClipHapticsSupported();

		[Token(Token = "0x6000E5F")]
		bool IsForcedPause();

		[Token(Token = "0x6000E60")]
		MyronXrSdkEnum GetSdkType();

		[Token(Token = "0x6000E61")]
		Transform GetCenterOfView();

		[Token(Token = "0x6000E62")]
		Transform GetMenuDisplayTarget();

		[Token(Token = "0x6000E63")]
		Vector3 GetPosition(ControllerEnum controllerEnum);

		[Token(Token = "0x6000E64")]
		Vector3 GetVelocity(ControllerEnum controllerEnum);

		[Token(Token = "0x6000E65")]
		Vector3 GetAngularVelocity(ControllerEnum controllerEnum);

		[Token(Token = "0x6000E66")]
		Vector3 GetAcceleration(ControllerEnum controllerEnum);

		[Token(Token = "0x6000E67")]
		Vector3 GetAngularAcceleration(ControllerEnum controllerEnum);

		[Token(Token = "0x6000E68")]
		bool TriggerPressed(ControllerEnum controllerEnum);

		[Token(Token = "0x6000E69")]
		bool TriggerReleased(ControllerEnum controllerEnum);

		[Token(Token = "0x6000E6A")]
		bool GripPressed(ControllerEnum controllerEnum);

		[Token(Token = "0x6000E6B")]
		bool GripReleased(ControllerEnum controllerEnum);

		[Token(Token = "0x6000E6C")]
		bool ButtonAPressed(ControllerEnum controllerEnum);

		[Token(Token = "0x6000E6D")]
		bool ButtonAReleased(ControllerEnum controllerEnum);

		[Token(Token = "0x6000E6E")]
		bool ButtonBPressed(ControllerEnum controllerEnum);

		[Token(Token = "0x6000E6F")]
		bool ButtonBReleased(ControllerEnum controllerEnum);

		[Token(Token = "0x6000E70")]
		bool ButtonXPressed(ControllerEnum controllerEnum);

		[Token(Token = "0x6000E71")]
		bool ButtonXReleased(ControllerEnum controllerEnum);

		[Token(Token = "0x6000E72")]
		bool ButtonYPressed(ControllerEnum controllerEnum);

		[Token(Token = "0x6000E73")]
		bool ButtonYReleased(ControllerEnum controllerEnum);

		[Token(Token = "0x6000E74")]
		Transform GetTransformForNode(XRNode xrNode);

		[Token(Token = "0x6000E75")]
		bool ThumbStickUp(ControllerEnum controllerEnum);

		[Token(Token = "0x6000E76")]
		bool ThumbStickUpReleased(ControllerEnum controllerEnum);

		[Token(Token = "0x6000E77")]
		bool ThumbStickDown(ControllerEnum controllerEnum);

		[Token(Token = "0x6000E78")]
		bool ThumbStickLeft(ControllerEnum controllerEnum);

		[Token(Token = "0x6000E79")]
		bool ThumbStickRight(ControllerEnum controllerEnum);

		[Token(Token = "0x6000E7A")]
		bool ThumbStickPressed(ControllerEnum controllerEnum);

		[Token(Token = "0x6000E7B")]
		bool ThumbStickReleased(ControllerEnum controllerEnum);

		[Token(Token = "0x6000E7C")]
		void TriggerHapticPulse(ControllerEnum controllerEnum, float strength, float duration, float pulseInterval);

		[Token(Token = "0x6000E7D")]
		void TriggerHapticByAudioClip(AudioClip clip, ControllerEnum[] controllerEnum, bool flipChannels);

		[Token(Token = "0x6000E7E")]
		bool ButtonStartPressed(ControllerEnum controllerEnum);

		[Token(Token = "0x6000E7F")]
		void CheckActions(ActionManager actionManager);

		[Token(Token = "0x6000E80")]
		float GetThrowMultiplier();
	}
	[Token(Token = "0x2000222")]
	public class OculusQuestSdk : OculusSdk
	{
		[Token(Token = "0x6000E81")]
		[Address(RVA = "0xBDF790", Offset = "0xBDF790", VA = "0xBDF790")]
		public OculusQuestSdk()
		{
		}
	}
	[Token(Token = "0x2000223")]
	public class OculusSdk : BaseVendorSdk
	{
		[Token(Token = "0x4000CD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool[] _currentThumbStickUp;

		[Token(Token = "0x4000CD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private bool[] _currentThumbStickDown;

		[Token(Token = "0x4000CD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private bool[] _currentThumbStickLeft;

		[Token(Token = "0x4000CD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private bool[] _currentThumbStickRight;

		[Token(Token = "0x4000CD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool[] _lastThumbStickUp;

		[Token(Token = "0x6000E82")]
		[Address(RVA = "0xBDF894", Offset = "0xBDF894", VA = "0xBDF894")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E83")]
		[Address(RVA = "0xBDF988", Offset = "0xBDF988", VA = "0xBDF988")]
		private void CopyButtonStates()
		{
		}

		[Token(Token = "0x6000E84")]
		[Address(RVA = "0xBDF994", Offset = "0xBDF994", VA = "0xBDF994")]
		private void RefreshButtonStates()
		{
		}

		[Token(Token = "0x6000E85")]
		[Address(RVA = "0xBDFD1C", Offset = "0xBDFD1C", VA = "0xBDFD1C", Slot = "43")]
		public override MyronXrSdkEnum GetSdkType()
		{
			return default(MyronXrSdkEnum);
		}

		[Token(Token = "0x6000E86")]
		[Address(RVA = "0xBDFD24", Offset = "0xBDFD24", VA = "0xBDFD24", Slot = "44")]
		public override Vector3 GetPosition(ControllerEnum controllerEnum)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000E87")]
		[Address(RVA = "0xBDFD88", Offset = "0xBDFD88", VA = "0xBDFD88", Slot = "45")]
		public override Vector3 GetVelocity(ControllerEnum controllerEnum)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000E88")]
		[Address(RVA = "0xBDFDEC", Offset = "0xBDFDEC", VA = "0xBDFDEC", Slot = "46")]
		public override Vector3 GetAngularVelocity(ControllerEnum controllerEnum)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000E89")]
		[Address(RVA = "0xBDFE50", Offset = "0xBDFE50", VA = "0xBDFE50", Slot = "47")]
		public override Vector3 GetAcceleration(ControllerEnum controllerEnum)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000E8A")]
		[Address(RVA = "0xBDFEB4", Offset = "0xBDFEB4", VA = "0xBDFEB4", Slot = "48")]
		public override Vector3 GetAngularAcceleration(ControllerEnum controllerEnum)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000E8B")]
		[Address(RVA = "0xBDFF18", Offset = "0xBDFF18", VA = "0xBDFF18", Slot = "49")]
		public override bool TriggerPressed(ControllerEnum controllerEnum)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E8C")]
		[Address(RVA = "0xBDFF80", Offset = "0xBDFF80", VA = "0xBDFF80", Slot = "50")]
		public override bool TriggerReleased(ControllerEnum controllerEnum)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E8D")]
		[Address(RVA = "0xBDFFE8", Offset = "0xBDFFE8", VA = "0xBDFFE8", Slot = "51")]
		public override bool GripPressed(ControllerEnum controllerEnum)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E8E")]
		[Address(RVA = "0xBE0050", Offset = "0xBE0050", VA = "0xBE0050", Slot = "52")]
		public override bool GripReleased(ControllerEnum controllerEnum)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E8F")]
		[Address(RVA = "0xBE00B8", Offset = "0xBE00B8", VA = "0xBE00B8", Slot = "53")]
		public override bool ButtonAPressed(ControllerEnum controllerEnum)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E90")]
		[Address(RVA = "0xBE0120", Offset = "0xBE0120", VA = "0xBE0120", Slot = "54")]
		public override bool ButtonAReleased(ControllerEnum controllerEnum)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E91")]
		[Address(RVA = "0xBE0188", Offset = "0xBE0188", VA = "0xBE0188", Slot = "55")]
		public override bool ButtonBPressed(ControllerEnum controllerEnum)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E92")]
		[Address(RVA = "0xBE01F0", Offset = "0xBE01F0", VA = "0xBE01F0", Slot = "56")]
		public override bool ButtonBReleased(ControllerEnum controllerEnum)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E93")]
		[Address(RVA = "0xBE0258", Offset = "0xBE0258", VA = "0xBE0258", Slot = "57")]
		public override bool ButtonXPressed(ControllerEnum controllerEnum)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E94")]
		[Address(RVA = "0xBE02C0", Offset = "0xBE02C0", VA = "0xBE02C0", Slot = "58")]
		public override bool ButtonXReleased(ControllerEnum controllerEnum)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E95")]
		[Address(RVA = "0xBE0328", Offset = "0xBE0328", VA = "0xBE0328", Slot = "59")]
		public override bool ButtonYPressed(ControllerEnum controllerEnum)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E96")]
		[Address(RVA = "0xBE0390", Offset = "0xBE0390", VA = "0xBE0390", Slot = "60")]
		public override bool ButtonYReleased(ControllerEnum controllerEnum)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E97")]
		[Address(RVA = "0xBE03F8", Offset = "0xBE03F8", VA = "0xBE03F8", Slot = "61")]
		public override bool ThumbStickUp(ControllerEnum controllerEnum)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E98")]
		[Address(RVA = "0xBE0484", Offset = "0xBE0484", VA = "0xBE0484", Slot = "62")]
		public override bool ThumbStickUpReleased(ControllerEnum controllerEnum)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E99")]
		[Address(RVA = "0xBE0550", Offset = "0xBE0550", VA = "0xBE0550", Slot = "63")]
		public override bool ThumbStickDown(ControllerEnum controllerEnum)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E9A")]
		[Address(RVA = "0xBE05DC", Offset = "0xBE05DC", VA = "0xBE05DC", Slot = "64")]
		public override bool ThumbStickLeft(ControllerEnum controllerEnum)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E9B")]
		[Address(RVA = "0xBE0668", Offset = "0xBE0668", VA = "0xBE0668", Slot = "65")]
		public override bool ThumbStickRight(ControllerEnum controllerEnum)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E9C")]
		[Address(RVA = "0xBE06F4", Offset = "0xBE06F4", VA = "0xBE06F4", Slot = "66")]
		public override bool ThumbStickPressed(ControllerEnum controllerEnum)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E9D")]
		[Address(RVA = "0xBE075C", Offset = "0xBE075C", VA = "0xBE075C", Slot = "67")]
		public override bool ThumbStickReleased(ControllerEnum controllerEnum)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E9E")]
		[Address(RVA = "0xBE07C4", Offset = "0xBE07C4", VA = "0xBE07C4", Slot = "68")]
		public override void TriggerHapticPulse(ControllerEnum controllerEnum, float strength, float duration, float pulseInterval)
		{
		}

		[Token(Token = "0x6000E9F")]
		[Address(RVA = "0xBE086C", Offset = "0xBE086C", VA = "0xBE086C", Slot = "70")]
		public override bool ButtonStartPressed(ControllerEnum controllerEnum)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EA0")]
		[Address(RVA = "0xBE08D4", Offset = "0xBE08D4", VA = "0xBE08D4", Slot = "71")]
		public override void CheckActions(ActionManager actionManager)
		{
		}

		[Token(Token = "0x6000EA1")]
		[Address(RVA = "0xBDFD0C", Offset = "0xBDFD0C", VA = "0xBDFD0C")]
		private static OVRInput.Controller GetController(ControllerEnum controllerEnum)
		{
			return default(OVRInput.Controller);
		}

		[Token(Token = "0x6000EA2")]
		[Address(RVA = "0xBDF794", Offset = "0xBDF794", VA = "0xBDF794")]
		public OculusSdk()
		{
		}
	}
	[Token(Token = "0x2000224")]
	public class PicoVrSdk : BaseVendorSdk
	{
		[Token(Token = "0x4000CD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool[] _currentTriggersStates;

		[Token(Token = "0x4000CD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private bool[] _currentGripStates;

		[Token(Token = "0x4000CD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private bool[] _currentButtonAxStates;

		[Token(Token = "0x4000CD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private bool[] _currentButtonByStates;

		[Token(Token = "0x4000CDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool[] _currentThumbstickStates;

		[Token(Token = "0x4000CDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private bool[] _currentMenuButtonStates;

		[Token(Token = "0x4000CDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private bool[] _currentThumbStickUp;

		[Token(Token = "0x4000CDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private bool[] _currentThumbStickDown;

		[Token(Token = "0x4000CDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private bool[] _currentThumbStickLeft;

		[Token(Token = "0x4000CDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private bool[] _currentThumbStickRight;

		[Token(Token = "0x4000CE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private bool[] _lastTriggersStates;

		[Token(Token = "0x4000CE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private bool[] _lastGripStates;

		[Token(Token = "0x4000CE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private bool[] _lastButtonAxStates;

		[Token(Token = "0x4000CE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private bool[] _lastButtonByStates;

		[Token(Token = "0x4000CE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private bool[] _lastThumbstickStates;

		[Token(Token = "0x4000CE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private bool[] _lastMenuButtonStates;

		[Token(Token = "0x4000CE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private bool[] _lastThumbStickUp;

		[Token(Token = "0x4000CE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private bool[] _lastThumbStickDown;

		[Token(Token = "0x4000CE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private bool[] _lastThumbStickLeft;

		[Token(Token = "0x4000CE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private bool[] _lastThumbStickRight;

		[Token(Token = "0x6000EA3")]
		[Address(RVA = "0xBE0914", Offset = "0xBE0914", VA = "0xBE0914", Slot = "40")]
		protected override bool Init()
		{
			return default(bool);
		}

		[Token(Token = "0x6000EA4")]
		[Address(RVA = "0xBE0CA8", Offset = "0xBE0CA8", VA = "0xBE0CA8", Slot = "42")]
		public override bool IsAudioClipHapticsSupported()
		{
			return default(bool);
		}

		[Token(Token = "0x6000EA5")]
		[Address(RVA = "0xBE0B54", Offset = "0xBE0B54", VA = "0xBE0B54")]
		private void ResetButtonStates()
		{
		}

		[Token(Token = "0x6000EA6")]
		[Address(RVA = "0xBE0CB0", Offset = "0xBE0CB0", VA = "0xBE0CB0")]
		private void RefreshButtonStates()
		{
		}

		[Token(Token = "0x6000EA7")]
		[Address(RVA = "0xBE123C", Offset = "0xBE123C", VA = "0xBE123C")]
		private void CopyButtonStates()
		{
		}

		[Token(Token = "0x6000EA8")]
		[Address(RVA = "0xBE1170", Offset = "0xBE1170", VA = "0xBE1170")]
		private bool[] GetBoolForCommonUsages(InputFeatureUsage<bool> inputFeatureUsage)
		{
			return null;
		}

		[Token(Token = "0x6000EA9")]
		[Address(RVA = "0xBE12E4", Offset = "0xBE12E4", VA = "0xBE12E4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000EAA")]
		[Address(RVA = "0xBE12FC", Offset = "0xBE12FC", VA = "0xBE12FC", Slot = "43")]
		public override MyronXrSdkEnum GetSdkType()
		{
			return default(MyronXrSdkEnum);
		}

		[Token(Token = "0x6000EAB")]
		[Address(RVA = "0xBE1304", Offset = "0xBE1304", VA = "0xBE1304", Slot = "44")]
		public override Vector3 GetPosition(ControllerEnum controllerEnum)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000EAC")]
		[Address(RVA = "0xBE13BC", Offset = "0xBE13BC", VA = "0xBE13BC", Slot = "45")]
		public override Vector3 GetVelocity(ControllerEnum controllerEnum)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000EAD")]
		[Address(RVA = "0xBE1474", Offset = "0xBE1474", VA = "0xBE1474", Slot = "46")]
		public override Vector3 GetAngularVelocity(ControllerEnum controllerEnum)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000EAE")]
		[Address(RVA = "0xBE152C", Offset = "0xBE152C", VA = "0xBE152C", Slot = "47")]
		public override Vector3 GetAcceleration(ControllerEnum controllerEnum)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000EAF")]
		[Address(RVA = "0xBE15E4", Offset = "0xBE15E4", VA = "0xBE15E4", Slot = "48")]
		public override Vector3 GetAngularAcceleration(ControllerEnum controllerEnum)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000EB0")]
		[Address(RVA = "0xBE169C", Offset = "0xBE169C", VA = "0xBE169C", Slot = "49")]
		public override bool TriggerPressed(ControllerEnum controllerEnum)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EB1")]
		[Address(RVA = "0xBE1768", Offset = "0xBE1768", VA = "0xBE1768", Slot = "50")]
		public override bool TriggerReleased(ControllerEnum controllerEnum)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EB2")]
		[Address(RVA = "0xBE1834", Offset = "0xBE1834", VA = "0xBE1834", Slot = "51")]
		public override bool GripPressed(ControllerEnum controllerEnum)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EB3")]
		[Address(RVA = "0xBE1900", Offset = "0xBE1900", VA = "0xBE1900", Slot = "52")]
		public override bool GripReleased(ControllerEnum controllerEnum)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EB4")]
		[Address(RVA = "0xBE19CC", Offset = "0xBE19CC", VA = "0xBE19CC", Slot = "53")]
		public override bool ButtonAPressed(ControllerEnum controllerEnum)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EB5")]
		[Address(RVA = "0xBE1A98", Offset = "0xBE1A98", VA = "0xBE1A98", Slot = "54")]
		public override bool ButtonAReleased(ControllerEnum controllerEnum)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EB6")]
		[Address(RVA = "0xBE1B64", Offset = "0xBE1B64", VA = "0xBE1B64", Slot = "55")]
		public override bool ButtonBPressed(ControllerEnum controllerEnum)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EB7")]
		[Address(RVA = "0xBE1C30", Offset = "0xBE1C30", VA = "0xBE1C30", Slot = "56")]
		public override bool ButtonBReleased(ControllerEnum controllerEnum)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EB8")]
		[Address(RVA = "0xBE1CFC", Offset = "0xBE1CFC", VA = "0xBE1CFC", Slot = "57")]
		public override bool ButtonXPressed(ControllerEnum controllerEnum)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EB9")]
		[Address(RVA = "0xBE1DC8", Offset = "0xBE1DC8", VA = "0xBE1DC8", Slot = "58")]
		public override bool ButtonXReleased(ControllerEnum controllerEnum)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EBA")]
		[Address(RVA = "0xBE1E94", Offset = "0xBE1E94", VA = "0xBE1E94", Slot = "59")]
		public override bool ButtonYPressed(ControllerEnum controllerEnum)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EBB")]
		[Address(RVA = "0xBE1F60", Offset = "0xBE1F60", VA = "0xBE1F60", Slot = "60")]
		public override bool ButtonYReleased(ControllerEnum controllerEnum)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EBC")]
		[Address(RVA = "0xBE202C", Offset = "0xBE202C", VA = "0xBE202C", Slot = "61")]
		public override bool ThumbStickUp(ControllerEnum controllerEnum)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EBD")]
		[Address(RVA = "0xBE20B8", Offset = "0xBE20B8", VA = "0xBE20B8", Slot = "62")]
		public override bool ThumbStickUpReleased(ControllerEnum controllerEnum)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EBE")]
		[Address(RVA = "0xBE2184", Offset = "0xBE2184", VA = "0xBE2184", Slot = "63")]
		public override bool ThumbStickDown(ControllerEnum controllerEnum)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EBF")]
		[Address(RVA = "0xBE2210", Offset = "0xBE2210", VA = "0xBE2210", Slot = "64")]
		public override bool ThumbStickLeft(ControllerEnum controllerEnum)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EC0")]
		[Address(RVA = "0xBE229C", Offset = "0xBE229C", VA = "0xBE229C", Slot = "65")]
		public override bool ThumbStickRight(ControllerEnum controllerEnum)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EC1")]
		[Address(RVA = "0xBE2328", Offset = "0xBE2328", VA = "0xBE2328", Slot = "66")]
		public override bool ThumbStickPressed(ControllerEnum controllerEnum)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EC2")]
		[Address(RVA = "0xBE23F4", Offset = "0xBE23F4", VA = "0xBE23F4", Slot = "67")]
		public override bool ThumbStickReleased(ControllerEnum controllerEnum)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EC3")]
		[Address(RVA = "0xBE24C0", Offset = "0xBE24C0", VA = "0xBE24C0", Slot = "68")]
		public override void TriggerHapticPulse(ControllerEnum controllerEnum, float strength, float duration, float pulseInterval)
		{
		}

		[Token(Token = "0x6000EC4")]
		[Address(RVA = "0xBE25C8", Offset = "0xBE25C8", VA = "0xBE25C8", Slot = "69")]
		public override void TriggerHapticByAudioClip(AudioClip clip, ControllerEnum[] controllerEnum, bool flipChannels)
		{
		}

		[Token(Token = "0x6000EC5")]
		[Address(RVA = "0xBE26EC", Offset = "0xBE26EC", VA = "0xBE26EC", Slot = "70")]
		public override bool ButtonStartPressed(ControllerEnum controllerEnum)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EC6")]
		[Address(RVA = "0xBE27B8", Offset = "0xBE27B8", VA = "0xBE27B8", Slot = "71")]
		public override void CheckActions(ActionManager actionManager)
		{
		}

		[Token(Token = "0x6000EC7")]
		[Address(RVA = "0xBE27F8", Offset = "0xBE27F8", VA = "0xBE27F8", Slot = "72")]
		public override float GetThrowMultiplier()
		{
			return default(float);
		}

		[Token(Token = "0x6000EC8")]
		[Address(RVA = "0xBE2804", Offset = "0xBE2804", VA = "0xBE2804")]
		public PicoVrSdk()
		{
		}
	}
	[Token(Token = "0x2000225")]
	public class SdkSelector : MonoBehaviour
	{
		[Token(Token = "0x4000CEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MyronXrSdkEnum editorSdk;

		[Token(Token = "0x4000CEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<BaseVendorSdk> vendorSdks;

		[Token(Token = "0x6000EC9")]
		[Address(RVA = "0xBE2AAC", Offset = "0xBE2AAC", VA = "0xBE2AAC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000ECA")]
		[Address(RVA = "0xBE2CE8", Offset = "0xBE2CE8", VA = "0xBE2CE8")]
		private static MyronXrSdkEnum GetCurrentSdk()
		{
			return default(MyronXrSdkEnum);
		}

		[Token(Token = "0x6000ECB")]
		[Address(RVA = "0xBE2CF0", Offset = "0xBE2CF0", VA = "0xBE2CF0")]
		public SdkSelector()
		{
		}
	}
	[Token(Token = "0x2000226")]
	public class SteamVRSdk : BaseVendorSdk
	{
		[Token(Token = "0x6000ECC")]
		[Address(RVA = "0xBE2D78", Offset = "0xBE2D78", VA = "0xBE2D78", Slot = "41")]
		public override bool IsActionsMappingSupported()
		{
			return default(bool);
		}

		[Token(Token = "0x6000ECD")]
		[Address(RVA = "0xBE2D80", Offset = "0xBE2D80", VA = "0xBE2D80", Slot = "43")]
		public override MyronXrSdkEnum GetSdkType()
		{
			return default(MyronXrSdkEnum);
		}

		[Token(Token = "0x6000ECE")]
		[Address(RVA = "0xBE2D88", Offset = "0xBE2D88", VA = "0xBE2D88", Slot = "44")]
		public override Vector3 GetPosition(ControllerEnum controllerEnum)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000ECF")]
		[Address(RVA = "0xBE2DCC", Offset = "0xBE2DCC", VA = "0xBE2DCC", Slot = "45")]
		public override Vector3 GetVelocity(ControllerEnum controllerEnum)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000ED0")]
		[Address(RVA = "0xBE2E10", Offset = "0xBE2E10", VA = "0xBE2E10", Slot = "46")]
		public override Vector3 GetAngularVelocity(ControllerEnum controllerEnum)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000ED1")]
		[Address(RVA = "0xBE2E54", Offset = "0xBE2E54", VA = "0xBE2E54", Slot = "47")]
		public override Vector3 GetAcceleration(ControllerEnum controllerEnum)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000ED2")]
		[Address(RVA = "0xBE2E94", Offset = "0xBE2E94", VA = "0xBE2E94", Slot = "48")]
		public override Vector3 GetAngularAcceleration(ControllerEnum controllerEnum)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000ED3")]
		[Address(RVA = "0xBE2ED4", Offset = "0xBE2ED4", VA = "0xBE2ED4", Slot = "49")]
		public override bool TriggerPressed(ControllerEnum controllerEnum)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ED4")]
		[Address(RVA = "0xBE2F14", Offset = "0xBE2F14", VA = "0xBE2F14", Slot = "50")]
		public override bool TriggerReleased(ControllerEnum controllerEnum)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ED5")]
		[Address(RVA = "0xBE2F54", Offset = "0xBE2F54", VA = "0xBE2F54", Slot = "51")]
		public override bool GripPressed(ControllerEnum controllerEnum)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ED6")]
		[Address(RVA = "0xBE2F94", Offset = "0xBE2F94", VA = "0xBE2F94", Slot = "52")]
		public override bool GripReleased(ControllerEnum controllerEnum)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ED7")]
		[Address(RVA = "0xBE2FD4", Offset = "0xBE2FD4", VA = "0xBE2FD4", Slot = "53")]
		public override bool ButtonAPressed(ControllerEnum controllerEnum)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ED8")]
		[Address(RVA = "0xBE3014", Offset = "0xBE3014", VA = "0xBE3014", Slot = "54")]
		public override bool ButtonAReleased(ControllerEnum controllerEnum)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ED9")]
		[Address(RVA = "0xBE3054", Offset = "0xBE3054", VA = "0xBE3054", Slot = "55")]
		public override bool ButtonBPressed(ControllerEnum controllerEnum)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EDA")]
		[Address(RVA = "0xBE3094", Offset = "0xBE3094", VA = "0xBE3094", Slot = "56")]
		public override bool ButtonBReleased(ControllerEnum controllerEnum)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EDB")]
		[Address(RVA = "0xBE30D4", Offset = "0xBE30D4", VA = "0xBE30D4", Slot = "57")]
		public override bool ButtonXPressed(ControllerEnum controllerEnum)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EDC")]
		[Address(RVA = "0xBE3114", Offset = "0xBE3114", VA = "0xBE3114", Slot = "58")]
		public override bool ButtonXReleased(ControllerEnum controllerEnum)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EDD")]
		[Address(RVA = "0xBE3154", Offset = "0xBE3154", VA = "0xBE3154", Slot = "59")]
		public override bool ButtonYPressed(ControllerEnum controllerEnum)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EDE")]
		[Address(RVA = "0xBE3194", Offset = "0xBE3194", VA = "0xBE3194", Slot = "60")]
		public override bool ButtonYReleased(ControllerEnum controllerEnum)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EDF")]
		[Address(RVA = "0xBE31D4", Offset = "0xBE31D4", VA = "0xBE31D4", Slot = "61")]
		public override bool ThumbStickUp(ControllerEnum controllerEnum)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EE0")]
		[Address(RVA = "0xBE3214", Offset = "0xBE3214", VA = "0xBE3214", Slot = "62")]
		public override bool ThumbStickUpReleased(ControllerEnum controllerEnum)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EE1")]
		[Address(RVA = "0xBE3254", Offset = "0xBE3254", VA = "0xBE3254", Slot = "63")]
		public override bool ThumbStickDown(ControllerEnum controllerEnum)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EE2")]
		[Address(RVA = "0xBE3294", Offset = "0xBE3294", VA = "0xBE3294", Slot = "64")]
		public override bool ThumbStickLeft(ControllerEnum controllerEnum)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EE3")]
		[Address(RVA = "0xBE32D4", Offset = "0xBE32D4", VA = "0xBE32D4", Slot = "65")]
		public override bool ThumbStickRight(ControllerEnum controllerEnum)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EE4")]
		[Address(RVA = "0xBE3314", Offset = "0xBE3314", VA = "0xBE3314", Slot = "66")]
		public override bool ThumbStickPressed(ControllerEnum controllerEnum)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EE5")]
		[Address(RVA = "0xBE3354", Offset = "0xBE3354", VA = "0xBE3354", Slot = "67")]
		public override bool ThumbStickReleased(ControllerEnum controllerEnum)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EE6")]
		[Address(RVA = "0xBE3394", Offset = "0xBE3394", VA = "0xBE3394", Slot = "68")]
		public override void TriggerHapticPulse(ControllerEnum controllerEnum, float strength, float duration, float pulseInterval)
		{
		}

		[Token(Token = "0x6000EE7")]
		[Address(RVA = "0xBE3398", Offset = "0xBE3398", VA = "0xBE3398", Slot = "70")]
		public override bool ButtonStartPressed(ControllerEnum controllerEnum)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EE8")]
		[Address(RVA = "0xBE33D8", Offset = "0xBE33D8", VA = "0xBE33D8", Slot = "71")]
		public override void CheckActions(ActionManager actionManager)
		{
		}

		[Token(Token = "0x6000EE9")]
		[Address(RVA = "0xBE33DC", Offset = "0xBE33DC", VA = "0xBE33DC")]
		private static void CheckActionsForController(ActionManager actionManager, ControllerEnum controllerEnum)
		{
		}

		[Token(Token = "0x6000EEA")]
		[Address(RVA = "0xBE33E0", Offset = "0xBE33E0", VA = "0xBE33E0")]
		public SteamVRSdk()
		{
		}
	}
}
namespace MyronVR.Tracking
{
	[Token(Token = "0x2000227")]
	public class XrAlias : MonoBehaviour
	{
		[Token(Token = "0x4000CEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public XRNode xrNode;

		[Token(Token = "0x4000CED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 offset;

		[Token(Token = "0x4000CEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 localScale;

		[Token(Token = "0x4000CEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool lookAtTarget;

		[Token(Token = "0x6000EEB")]
		[Address(RVA = "0xBE3438", Offset = "0xBE3438", VA = "0xBE3438")]
		private void Update()
		{
		}

		[Token(Token = "0x6000EEC")]
		[Address(RVA = "0xBE3650", Offset = "0xBE3650", VA = "0xBE3650")]
		public XrAlias()
		{
		}
	}
}
namespace MyronVR.Locomotion
{
	[Token(Token = "0x2000228")]
	public class LocomotionManager : MonoBehaviour
	{
		[Token(Token = "0x4000CF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static LocomotionManager Instance;

		[Token(Token = "0x4000CF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FloatVariable playerSize;

		[Token(Token = "0x4000CF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float minScale;

		[Token(Token = "0x4000CF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float maxScale;

		[Token(Token = "0x4000CF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool useOffsetTransform;

		[Token(Token = "0x4000CF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject rotationIndicator;

		[Token(Token = "0x4000CF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool trackingInProgress;

		[Token(Token = "0x4000CF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Transform playArea;

		[Token(Token = "0x4000CF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Transform head;

		[Token(Token = "0x4000CF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Transform leftHand;

		[Token(Token = "0x4000CFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform rightHand;

		[Token(Token = "0x4000CFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform grabbingController;

		[Token(Token = "0x4000CFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float startDistance;

		[Token(Token = "0x4000CFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float startScale;

		[Token(Token = "0x4000CFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool init;

		[Token(Token = "0x4000CFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private Vector3 startControllerScaledLocalPosition;

		[Token(Token = "0x4000D00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private bool grabInProgress;

		[Token(Token = "0x4000D01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private Vector3 startControllerWorldPosition;

		[Token(Token = "0x4000D02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool useRotationIndicator;

		[Token(Token = "0x4000D03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private GameObject rotationIndicatorInstance;

		[Token(Token = "0x4000D04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private bool previousControllerPositionRegistered;

		[Token(Token = "0x4000D05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private Vector3 previousControllerPosition;

		[Token(Token = "0x4000D06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private bool leftHandGrab;

		[Token(Token = "0x4000D07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB1")]
		private bool rightHandGrab;

		[Token(Token = "0x4000D08")]
		private const float OffsetErrorDetection = 10f;

		[Token(Token = "0x6000EED")]
		[Address(RVA = "0xBE36E4", Offset = "0xBE36E4", VA = "0xBE36E4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000EEE")]
		[Address(RVA = "0xBE37FC", Offset = "0xBE37FC", VA = "0xBE37FC")]
		private void Init()
		{
		}

		[Token(Token = "0x6000EEF")]
		[Address(RVA = "0xBE39F4", Offset = "0xBE39F4", VA = "0xBE39F4")]
		public void StartTracking(bool leftHandGrab, bool rightHandGrab)
		{
		}

		[Token(Token = "0x6000EF0")]
		[Address(RVA = "0xBE3BA0", Offset = "0xBE3BA0", VA = "0xBE3BA0")]
		private static Vector3 IgnoreY(Vector3 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000EF1")]
		[Address(RVA = "0xBD939C", Offset = "0xBD939C", VA = "0xBD939C")]
		public void StopTracking()
		{
		}

		[Token(Token = "0x6000EF2")]
		[Address(RVA = "0xBE3B6C", Offset = "0xBE3B6C", VA = "0xBE3B6C")]
		private void StartGrab()
		{
		}

		[Token(Token = "0x6000EF3")]
		[Address(RVA = "0xBE3BA8", Offset = "0xBE3BA8", VA = "0xBE3BA8")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000EF4")]
		[Address(RVA = "0xBE3D20", Offset = "0xBE3D20", VA = "0xBE3D20")]
		private void Move()
		{
		}

		[Token(Token = "0x6000EF5")]
		[Address(RVA = "0xBDAA64", Offset = "0xBDAA64", VA = "0xBDAA64")]
		public void Move(Vector3 direction, float speed)
		{
		}

		[Token(Token = "0x6000EF6")]
		[Address(RVA = "0xBE3F54", Offset = "0xBE3F54", VA = "0xBE3F54")]
		private void SetScale(float distance)
		{
		}

		[Token(Token = "0x6000EF7")]
		[Address(RVA = "0xBDA6D4", Offset = "0xBDA6D4", VA = "0xBDA6D4")]
		public void RotateByAngle(float angle)
		{
		}

		[Token(Token = "0x6000EF8")]
		[Address(RVA = "0xBD9904", Offset = "0xBD9904", VA = "0xBD9904")]
		public void GrabWorld(Interactor interactor)
		{
		}

		[Token(Token = "0x6000EF9")]
		[Address(RVA = "0xBD99E8", Offset = "0xBD99E8", VA = "0xBD99E8")]
		public void ReleaseWorld(Interactor interactor)
		{
		}

		[Token(Token = "0x6000EFA")]
		[Address(RVA = "0xBD9FF8", Offset = "0xBD9FF8", VA = "0xBD9FF8")]
		public void Teleport(Transform destination)
		{
		}

		[Token(Token = "0x6000EFB")]
		[Address(RVA = "0xBE40D0", Offset = "0xBE40D0", VA = "0xBE40D0")]
		public void Teleport(Vector3 destinationPosition)
		{
		}

		[Token(Token = "0x6000EFC")]
		[Address(RVA = "0xBE4150", Offset = "0xBE4150", VA = "0xBE4150")]
		public LocomotionManager()
		{
		}
	}
	[Token(Token = "0x2000229")]
	[CreateAssetMenu(menuName = "Locomotion/Teleporter Configuration")]
	public class TeleporterConfiguration : ScriptableObject
	{
		[Token(Token = "0x4000D09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject pointsPrefab;

		[Token(Token = "0x4000D0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject destinationPrefab;

		[Token(Token = "0x4000D0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public FloatVariable playerSize;

		[Token(Token = "0x4000D0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The number of items to render in the bezier curve tracer beam.")]
		public int tracerDensity;

		[Token(Token = "0x4000D0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("The size of the ground cursor. This number also affects the size of the objects in the bezier curve tracer beam.")]
		public float cursorRadius;

		[Token(Token = "0x4000D0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The maximum length of the projected beam.")]
		[SerializeField]
		private Vector2 maximumLength;

		[Token(Token = "0x4000D0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The maximum angle in degrees of the origin before the beam curve height is restricted. A lower angle setting will prevent the beam being projected high into the sky and curving back down.")]
		[Range(1f, 100f)]
		public float heightLimitAngle;

		[Token(Token = "0x4000D10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("The amount of height offset to apply to the projected beam to generate a smoother curve even when the beam is pointing straight.")]
		public float curveOffset;

		[Token(Token = "0x4000D11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public int collisionCheckFrequency;

		[Token(Token = "0x4000D12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("Rescale each tracer element according to the length of the Bezier curve.")]
		public bool rescaleTracer;

		[Token(Token = "0x6000EFD")]
		[Address(RVA = "0xBDC04C", Offset = "0xBDC04C", VA = "0xBDC04C")]
		public Vector2 MaximumLength()
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000EFE")]
		[Address(RVA = "0xBE4160", Offset = "0xBE4160", VA = "0xBE4160")]
		public TeleporterConfiguration()
		{
		}
	}
}
namespace MyronVR.Interactions
{
	[Token(Token = "0x200022A")]
	public class InteractableObject : MonoBehaviour
	{
		[Token(Token = "0x4000D13")]
		private const int PhysicalLayer = 13;

		[Token(Token = "0x4000D14")]
		private const int HeldLayer = 3;

		[Token(Token = "0x4000D15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Configuration", order = 1)]
		public bool canBeGrabbed;

		[Token(Token = "0x4000D16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool canBeDropped;

		[Token(Token = "0x4000D17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public bool canBeUsed;

		[Token(Token = "0x4000D18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
		public bool canBeSqueezed;

		[Token(Token = "0x4000D19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool destroyParentOnUse;

		[Token(Token = "0x4000D1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("When multiple objects are touched the highest priority object will be used to selected.")]
		public int priority;

		[Token(Token = "0x4000D1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Handle position when grabbed with left hand.")]
		public Transform handleLeft;

		[Token(Token = "0x4000D1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Handle position when grabbed with right hand.")]
		public Transform handleRight;

		[Token(Token = "0x4000D1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Touch Options", order = 2)]
		public bool usedOnTouch;

		[Token(Token = "0x4000D1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		public bool changeMaterialOnTouch;

		[Token(Token = "0x4000D1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Material touchedMaterial;

		[Token(Token = "0x4000D20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public MeshRenderer meshToChangeOnTouch;

		[Token(Token = "0x4000D21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Joint joint;

		[Token(Token = "0x4000D22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Rigidbody cachedRigidbody;

		[Token(Token = "0x4000D23")]
		private const float MinUseDelay = 0.25f;

		[Token(Token = "0x4000D24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float lastUseTime;

		[Token(Token = "0x4000D25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private bool touched;

		[Token(Token = "0x4000D26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected Interactor currentGrabber;

		[Token(Token = "0x4000D27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Material[] originalMaterials;

		[Token(Token = "0x4000D28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private bool materialChanged;

		[Token(Token = "0x4000D29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float lastGrabTime;

		[Token(Token = "0x4000D2A")]
		private const float SqueezeGraceDelay = 0.5f;

		[Token(Token = "0x4000D2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Outline outline;

		[Token(Token = "0x4000D2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected bool delegateOutline;

		[Token(Token = "0x4000D2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public VariableAudioSetSelector collisionSoundEffects;

		[Token(Token = "0x4000D2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public bool alwaysKeepLayer;

		[Token(Token = "0x4000D2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public List<IGrabStateObserver> grabStateObservers;

		[Token(Token = "0x4000D30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private GrabState grabStateInternal;

		[Token(Token = "0x170001B7")]
		public GrabState GrabState
		{
			[Token(Token = "0x6000EFF")]
			[Address(RVA = "0xBE4188", Offset = "0xBE4188", VA = "0xBE4188")]
			get
			{
				return default(GrabState);
			}
			[Token(Token = "0x6000F00")]
			[Address(RVA = "0xBE4190", Offset = "0xBE4190", VA = "0xBE4190")]
			set
			{
			}
		}

		[Token(Token = "0x170001B8")]
		public bool IsGrabbed
		{
			[Token(Token = "0x6000F01")]
			[Address(RVA = "0xBE4370", Offset = "0xBE4370", VA = "0xBE4370")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000F02")]
		[Address(RVA = "0xBE4380", Offset = "0xBE4380", VA = "0xBE4380", Slot = "4")]
		public virtual void Start()
		{
		}

		[Token(Token = "0x6000F03")]
		[Address(RVA = "0xBE43E4", Offset = "0xBE43E4", VA = "0xBE43E4", Slot = "5")]
		public virtual void Grab(Interactor interactor)
		{
		}

		[Token(Token = "0x6000F04")]
		[Address(RVA = "0xBE4540", Offset = "0xBE4540", VA = "0xBE4540", Slot = "6")]
		public virtual void Throw(Interactor interactor)
		{
		}

		[Token(Token = "0x6000F05")]
		[Address(RVA = "0xBE44E8", Offset = "0xBE44E8", VA = "0xBE44E8")]
		private void SetLayer(int layer)
		{
		}

		[Token(Token = "0x6000F06")]
		[Address(RVA = "0xBE45F0", Offset = "0xBE45F0", VA = "0xBE45F0")]
		public void UpdatePosition(Vector3 newPosition, Quaternion newRotation)
		{
		}

		[Token(Token = "0x6000F07")]
		[Address(RVA = "0xBE4678", Offset = "0xBE4678", VA = "0xBE4678", Slot = "7")]
		public virtual bool Use(Interactor interactor)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F08")]
		[Address(RVA = "0xBE47CC", Offset = "0xBE47CC", VA = "0xBE47CC", Slot = "8")]
		public virtual void Touch(Interactor interactor)
		{
		}

		[Token(Token = "0x6000F09")]
		[Address(RVA = "0xBE4BD4", Offset = "0xBE4BD4", VA = "0xBE4BD4")]
		private Color GetOutlineColor()
		{
			return default(Color);
		}

		[Token(Token = "0x6000F0A")]
		[Address(RVA = "0xBE4AA4", Offset = "0xBE4AA4", VA = "0xBE4AA4")]
		private void ChangeMaterials()
		{
		}

		[Token(Token = "0x6000F0B")]
		[Address(RVA = "0xBE4C20", Offset = "0xBE4C20", VA = "0xBE4C20")]
		private void RevertMaterials()
		{
		}

		[Token(Token = "0x6000F0C")]
		[Address(RVA = "0xBE4C54", Offset = "0xBE4C54", VA = "0xBE4C54", Slot = "9")]
		public virtual void UnTouch(Interactor interactor)
		{
		}

		[Token(Token = "0x6000F0D")]
		[Address(RVA = "0xBE4D48", Offset = "0xBE4D48", VA = "0xBE4D48")]
		public bool SqueezeIfPossible()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F0E")]
		[Address(RVA = "0xBE4E38", Offset = "0xBE4E38", VA = "0xBE4E38")]
		public bool ForceSqueezeIfPossible()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F0F")]
		[Address(RVA = "0xBE4F0C", Offset = "0xBE4F0C", VA = "0xBE4F0C")]
		public void StopUsing(Interactor interactor)
		{
		}

		[Token(Token = "0x6000F10")]
		[Address(RVA = "0xBE4F10", Offset = "0xBE4F10", VA = "0xBE4F10", Slot = "10")]
		protected virtual bool KeepLayer()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F11")]
		[Address(RVA = "0xBE4F18", Offset = "0xBE4F18", VA = "0xBE4F18")]
		public void AddGrabStateObserver(IGrabStateObserver observer)
		{
		}

		[Token(Token = "0x6000F12")]
		[Address(RVA = "0xBE5000", Offset = "0xBE5000", VA = "0xBE5000")]
		public InteractableObject()
		{
		}
	}
	[Token(Token = "0x200022B")]
	[SelectionBase]
	public class Interactor : MonoBehaviour
	{
		[Token(Token = "0x4000D31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ControllerEnum controller;

		[Token(Token = "0x4000D32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform grabAttachPoint;

		[Token(Token = "0x4000D33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform idealTouchPoint;

		[Token(Token = "0x4000D34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform idealButtonTouchPoint;

		[Token(Token = "0x4000D35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public TooltipDisplay tooltipDisplay;

		[Token(Token = "0x4000D36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Audio Configuration")]
		public AudioSet GrabAudioSet;

		[Token(Token = "0x4000D37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public AudioSet ThrowAudioSet;

		[Token(Token = "0x4000D38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AudioSet SqueezeAudioSet;

		[Token(Token = "0x4000D3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private InteractableObject selectedObject;

		[Token(Token = "0x4000D3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private InteractableObject previouslySelectedObject;

		[Token(Token = "0x4000D3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Rigidbody interactorRigidbody;

		[Token(Token = "0x4000D3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Transform cachedTransform;

		[Token(Token = "0x4000D3F")]
		private const float ThrowMultiplier = 0.8f;

		[Token(Token = "0x4000D40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private HashSet<InteractableObject> touchedObjects;

		[Token(Token = "0x4000D41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private HashSet<InteractableObject> touchedButtons;

		[Token(Token = "0x170001B9")]
		public InteractableObject GrabbedObject
		{
			[Token(Token = "0x6000F13")]
			[Address(RVA = "0xBE5090", Offset = "0xBE5090", VA = "0xBE5090")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F14")]
			[Address(RVA = "0xBE5098", Offset = "0xBE5098", VA = "0xBE5098")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x170001BA")]
		public bool IsGrabbing
		{
			[Token(Token = "0x6000F15")]
			[Address(RVA = "0xBE50A0", Offset = "0xBE50A0", VA = "0xBE50A0")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000F16")]
			[Address(RVA = "0xBE50A8", Offset = "0xBE50A8", VA = "0xBE50A8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000F17")]
		[Address(RVA = "0xBE50B4", Offset = "0xBE50B4", VA = "0xBE50B4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000F18")]
		[Address(RVA = "0xBE52B0", Offset = "0xBE52B0", VA = "0xBE52B0")]
		public void Update()
		{
		}

		[Token(Token = "0x6000F19")]
		[Address(RVA = "0xBE531C", Offset = "0xBE531C", VA = "0xBE531C")]
		public void RemoveTouchedObject(InteractableObject touchedObject)
		{
		}

		[Token(Token = "0x6000F1A")]
		[Address(RVA = "0xBE5524", Offset = "0xBE5524", VA = "0xBE5524")]
		public void LateUpdate()
		{
		}

		[Token(Token = "0x6000F1B")]
		[Address(RVA = "0xBE5628", Offset = "0xBE5628", VA = "0xBE5628")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000F1C")]
		[Address(RVA = "0xBE5760", Offset = "0xBE5760", VA = "0xBE5760")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6000F1D")]
		[Address(RVA = "0xBE5884", Offset = "0xBE5884", VA = "0xBE5884")]
		private void SelectObject(InteractableObject interactableObject)
		{
		}

		[Token(Token = "0x6000F1E")]
		[Address(RVA = "0xBE5428", Offset = "0xBE5428", VA = "0xBE5428")]
		private void SelectTouchedObject()
		{
		}

		[Token(Token = "0x6000F1F")]
		[Address(RVA = "0xBE59BC", Offset = "0xBE59BC", VA = "0xBE59BC")]
		private static InteractableObject FindClosestObject(IEnumerable<InteractableObject> objectsToCheck, Transform idealPosition)
		{
			return null;
		}

		[Token(Token = "0x6000F20")]
		[Address(RVA = "0xBE5994", Offset = "0xBE5994", VA = "0xBE5994")]
		private void TouchObject(InteractableObject touchedObject)
		{
		}

		[Token(Token = "0x6000F21")]
		[Address(RVA = "0xBE5400", Offset = "0xBE5400", VA = "0xBE5400")]
		private void UnTouchObject(InteractableObject touchedObject)
		{
		}

		[Token(Token = "0x6000F22")]
		[Address(RVA = "0xBE5D2C", Offset = "0xBE5D2C", VA = "0xBE5D2C")]
		public bool Grab()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F23")]
		[Address(RVA = "0xBE5F30", Offset = "0xBE5F30", VA = "0xBE5F30")]
		public void Throw()
		{
		}

		[Token(Token = "0x6000F24")]
		[Address(RVA = "0xBE62E0", Offset = "0xBE62E0", VA = "0xBE62E0", Slot = "4")]
		public virtual void ThrowDesktop()
		{
		}

		[Token(Token = "0x6000F25")]
		[Address(RVA = "0xBE44D8", Offset = "0xBE44D8", VA = "0xBE44D8")]
		public void Swap()
		{
		}

		[Token(Token = "0x6000F26")]
		[Address(RVA = "0xBE6320", Offset = "0xBE6320", VA = "0xBE6320")]
		public void ForceGrab(InteractableObject interactableObject)
		{
		}

		[Token(Token = "0x6000F27")]
		[Address(RVA = "0xBE633C", Offset = "0xBE633C", VA = "0xBE633C")]
		public bool Squeeze(bool force = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F28")]
		[Address(RVA = "0xBE63F4", Offset = "0xBE63F4", VA = "0xBE63F4")]
		public bool Use()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F29")]
		[Address(RVA = "0xBE6488", Offset = "0xBE6488", VA = "0xBE6488")]
		public void StopUsing()
		{
		}

		[Token(Token = "0x6000F2A")]
		[Address(RVA = "0xBE64F8", Offset = "0xBE64F8", VA = "0xBE64F8")]
		[ContextMenu("Debug Touched Objects")]
		public void ViewTouchedObjects()
		{
		}

		[Token(Token = "0x6000F2B")]
		[Address(RVA = "0xBE66B4", Offset = "0xBE66B4", VA = "0xBE66B4")]
		public Vector3 GetVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000F2C")]
		[Address(RVA = "0xBE66BC", Offset = "0xBE66BC", VA = "0xBE66BC")]
		public Vector3 GetAngularVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000F2D")]
		[Address(RVA = "0xBE66C4", Offset = "0xBE66C4", VA = "0xBE66C4")]
		public Interactor()
		{
		}
	}
}
namespace MyronVR.Enums
{
	[Token(Token = "0x200022C")]
	public enum ControllerEnum
	{
		[Token(Token = "0x4000D43")]
		None,
		[Token(Token = "0x4000D44")]
		LHandController,
		[Token(Token = "0x4000D45")]
		RHandController
	}
	[Token(Token = "0x200022D")]
	public enum MyronXrSdkEnum
	{
		[Token(Token = "0x4000D47")]
		None,
		[Token(Token = "0x4000D48")]
		SteamVR,
		[Token(Token = "0x4000D49")]
		Oculus,
		[Token(Token = "0x4000D4A")]
		Pico
	}
}
namespace MyronUtils
{
	[Token(Token = "0x200022E")]
	public class CurveUtils
	{
		[Token(Token = "0x200022F")]
		public static class Bezier
		{
			[Token(Token = "0x6000F2F")]
			[Address(RVA = "0xBE66D4", Offset = "0xBE66D4", VA = "0xBE66D4")]
			public static Vector3 GetPoint(Vector3 p0, Vector3 p1, Vector3 p2, float t)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6000F30")]
			[Address(RVA = "0xBE6748", Offset = "0xBE6748", VA = "0xBE6748")]
			public static Vector3 GetFirstDerivative(Vector3 p0, Vector3 p1, Vector3 p2, float t)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6000F31")]
			[Address(RVA = "0xBE67A4", Offset = "0xBE67A4", VA = "0xBE67A4")]
			public static Vector3 GetPoint(Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3, float t)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6000F32")]
			[Address(RVA = "0xBE6850", Offset = "0xBE6850", VA = "0xBE6850")]
			public static Vector3 GetFirstDerivative(Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3, float t)
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x2000230")]
		public class BezierCurveGenerator : MonoBehaviour
		{
			[Token(Token = "0x2000231")]
			public enum BezierControlPointMode
			{
				[Token(Token = "0x4000D56")]
				Free,
				[Token(Token = "0x4000D57")]
				Aligned,
				[Token(Token = "0x4000D58")]
				Mirrored
			}

			[Token(Token = "0x4000D4B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			protected Vector3[] points;

			[Token(Token = "0x4000D4C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			protected GameObject[] items;

			[Token(Token = "0x4000D4D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			protected BezierControlPointMode[] modes;

			[Token(Token = "0x4000D4E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			protected bool loop;

			[Token(Token = "0x4000D4F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			protected int frequency;

			[Token(Token = "0x4000D50")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			protected bool customTracer;

			[Token(Token = "0x4000D51")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
			protected bool rescalePointerTracer;

			[Token(Token = "0x4000D52")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			protected GameObject tracerLineRenderer;

			[Token(Token = "0x4000D53")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			protected LineRenderer customLineRenderer;

			[Token(Token = "0x4000D54")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			protected bool lineRendererAndItem;

			[Token(Token = "0x170001BB")]
			protected virtual bool Loop
			{
				[Token(Token = "0x6000F3A")]
				[Address(RVA = "0xBE72C4", Offset = "0xBE72C4", VA = "0xBE72C4", Slot = "11")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6000F3B")]
				[Address(RVA = "0xBE72CC", Offset = "0xBE72CC", VA = "0xBE72CC", Slot = "12")]
				set
				{
				}
			}

			[Token(Token = "0x170001BC")]
			protected virtual int ControlPointCount
			{
				[Token(Token = "0x6000F3C")]
				[Address(RVA = "0xBE7340", Offset = "0xBE7340", VA = "0xBE7340", Slot = "13")]
				get
				{
					return default(int);
				}
			}

			[Token(Token = "0x170001BD")]
			protected virtual int CurveCount
			{
				[Token(Token = "0x6000F40")]
				[Address(RVA = "0xBE78B8", Offset = "0xBE78B8", VA = "0xBE78B8", Slot = "17")]
				get
				{
					return default(int);
				}
			}

			[Token(Token = "0x6000F33")]
			[Address(RVA = "0xBE6900", Offset = "0xBE6900", VA = "0xBE6900", Slot = "4")]
			public virtual void Create(int setFrequency, float radius, GameObject tracer, bool rescaleTracer = false)
			{
			}

			[Token(Token = "0x6000F34")]
			[Address(RVA = "0xBE6E54", Offset = "0xBE6E54", VA = "0xBE6E54", Slot = "5")]
			public virtual void SetPoints(Vector3[] controlPoints, Material material, Color color)
			{
			}

			[Token(Token = "0x6000F35")]
			[Address(RVA = "0xBE6EC0", Offset = "0xBE6EC0", VA = "0xBE6EC0", Slot = "6")]
			public virtual Vector3[] GetPoints(Vector3[] controlPoints)
			{
				return null;
			}

			[Token(Token = "0x6000F36")]
			[Address(RVA = "0xBE7008", Offset = "0xBE7008", VA = "0xBE7008", Slot = "7")]
			public virtual void TogglePoints(bool state)
			{
			}

			[Token(Token = "0x6000F37")]
			[Address(RVA = "0xBE70B0", Offset = "0xBE70B0", VA = "0xBE70B0", Slot = "8")]
			protected virtual void OnDisable()
			{
			}

			[Token(Token = "0x6000F38")]
			[Address(RVA = "0xBE7138", Offset = "0xBE7138", VA = "0xBE7138", Slot = "9")]
			protected virtual void PointsInit(Vector3[] controlPoints)
			{
			}

			[Token(Token = "0x6000F39")]
			[Address(RVA = "0xBE71AC", Offset = "0xBE71AC", VA = "0xBE71AC", Slot = "10")]
			protected virtual GameObject CreateSphere()
			{
				return null;
			}

			[Token(Token = "0x6000F3D")]
			[Address(RVA = "0xBE735C", Offset = "0xBE735C", VA = "0xBE735C", Slot = "14")]
			protected virtual Vector3 GetControlPoint(int index)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6000F3E")]
			[Address(RVA = "0xBE7398", Offset = "0xBE7398", VA = "0xBE7398", Slot = "15")]
			protected virtual void SetControlPoint(int index, Vector3 point)
			{
			}

			[Token(Token = "0x6000F3F")]
			[Address(RVA = "0xBE75E4", Offset = "0xBE75E4", VA = "0xBE75E4", Slot = "16")]
			protected virtual void EnforceMode(int index)
			{
			}

			[Token(Token = "0x6000F41")]
			[Address(RVA = "0xBE78F0", Offset = "0xBE78F0", VA = "0xBE78F0", Slot = "18")]
			protected virtual Vector3 GetPoint(float t)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6000F42")]
			[Address(RVA = "0xBE7A50", Offset = "0xBE7A50", VA = "0xBE7A50", Slot = "19")]
			protected virtual void SetObjects(Material material, Color color)
			{
			}

			[Token(Token = "0x6000F43")]
			[Address(RVA = "0xBE7B0C", Offset = "0xBE7B0C", VA = "0xBE7B0C", Slot = "20")]
			protected virtual void SetPointData(Material material, Color color, float stepSize)
			{
			}

			[Token(Token = "0x6000F44")]
			[Address(RVA = "0xBE7CC4", Offset = "0xBE7CC4", VA = "0xBE7CC4", Slot = "21")]
			protected virtual void SetItemPosition(int currentIndex, Vector3 setPosition, Material material, Color color, float stepSize)
			{
			}

			[Token(Token = "0x6000F45")]
			[Address(RVA = "0xBE8064", Offset = "0xBE8064", VA = "0xBE8064", Slot = "22")]
			protected virtual void SetItemMaterial(GameObject item, Material material, Color color)
			{
			}

			[Token(Token = "0x6000F46")]
			[Address(RVA = "0xBE81BC", Offset = "0xBE81BC", VA = "0xBE81BC", Slot = "23")]
			protected virtual void SetMaterial(Material material, Color color)
			{
			}

			[Token(Token = "0x6000F47")]
			[Address(RVA = "0xBE830C", Offset = "0xBE830C", VA = "0xBE830C")]
			private static Color ColorDarken(Color color, float percent)
			{
				return default(Color);
			}

			[Token(Token = "0x6000F48")]
			[Address(RVA = "0xBE8344", Offset = "0xBE8344", VA = "0xBE8344")]
			private static float NumberPercent(float value, float percent)
			{
				return default(float);
			}

			[Token(Token = "0x6000F49")]
			[Address(RVA = "0xBE8374", Offset = "0xBE8374", VA = "0xBE8374")]
			public BezierCurveGenerator()
			{
			}
		}

		[Token(Token = "0x6000F2E")]
		[Address(RVA = "0xBE66CC", Offset = "0xBE66CC", VA = "0xBE66CC")]
		public CurveUtils()
		{
		}
	}
	[Token(Token = "0x2000232")]
	public static class MathUtils
	{
		[Token(Token = "0x6000F4A")]
		[Address(RVA = "0xBE6FF4", Offset = "0xBE6FF4", VA = "0xBE6FF4")]
		public static float DividerToMultiplier(float value)
		{
			return default(float);
		}

		[Token(Token = "0x6000F4B")]
		[Address(RVA = "0xBE837C", Offset = "0xBE837C", VA = "0xBE837C")]
		public static Color ColorDarken(Color color, float percent)
		{
			return default(Color);
		}

		[Token(Token = "0x6000F4C")]
		[Address(RVA = "0xBE83B4", Offset = "0xBE83B4", VA = "0xBE83B4")]
		public static float NumberPercent(float value, float percent)
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000233")]
	public static class ObjectUtils
	{
		[Token(Token = "0x6000F4D")]
		public static bool IsNull<T>(this T obj)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000234")]
	[CreateAssetMenu(fileName = "Prefab Randomizer", menuName = "Utils/Prefab Randomizer", order = 0)]
	public class PrefabRandomizer : ScriptableObject
	{
		[Token(Token = "0x4000D59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject[] prefabs;

		[Token(Token = "0x4000D5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("If enabled the randomizer will never return the same prefab twice until all prefabs have been returned once. Otherwise it will pick a random prefab.")]
		public bool returnAllBeforeRepeat;

		[Token(Token = "0x4000D5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int lastIndex;

		[Token(Token = "0x4000D5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<int> remainingIndexes;

		[Token(Token = "0x6000F4E")]
		[Address(RVA = "0xBE83E4", Offset = "0xBE83E4", VA = "0xBE83E4")]
		public GameObject Next()
		{
			return null;
		}

		[Token(Token = "0x6000F4F")]
		[Address(RVA = "0xBE8698", Offset = "0xBE8698", VA = "0xBE8698")]
		public PrefabRandomizer()
		{
		}
	}
	[Token(Token = "0x2000235")]
	[CreateAssetMenu(fileName = "RandomizedAnimation", menuName = "Utils/Randomized Animation", order = 0)]
	public class RandomizedAnimation : ScriptableObject
	{
		[Token(Token = "0x4000D5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int triggerId;

		[Token(Token = "0x4000D5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The randomizer used to check if the animation will occur or not")]
		public Randomizer randomizer;

		[Token(Token = "0x4000D5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The name of the trigger that will be fired if the animation occurs")]
		public string triggerName;

		[Token(Token = "0x4000D60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("An optional audio set to play a sound when the animation occurs")]
		public AudioSet audioSet;

		[Token(Token = "0x4000D61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool init;

		[Token(Token = "0x6000F50")]
		[Address(RVA = "0xBE86B0", Offset = "0xBE86B0", VA = "0xBE86B0")]
		public bool Fire(Animator animator, Vector3 position)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F51")]
		[Address(RVA = "0xBE883C", Offset = "0xBE883C", VA = "0xBE883C")]
		public RandomizedAnimation()
		{
		}
	}
	[Token(Token = "0x2000236")]
	public class RandomizedObject : MonoBehaviour
	{
		[Token(Token = "0x4000D62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PrefabRandomizer prefabRandomizer;

		[Token(Token = "0x4000D63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GameObject instancedObject;

		[Token(Token = "0x6000F52")]
		[Address(RVA = "0xBE8844", Offset = "0xBE8844", VA = "0xBE8844")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F53")]
		[Address(RVA = "0xBE8848", Offset = "0xBE8848", VA = "0xBE8848")]
		[ContextMenu("Instantiate Prefab")]
		public void InstantiatePrefab()
		{
		}

		[Token(Token = "0x6000F54")]
		[Address(RVA = "0xBE88AC", Offset = "0xBE88AC", VA = "0xBE88AC")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6000F55")]
		[Address(RVA = "0xBE88FC", Offset = "0xBE88FC", VA = "0xBE88FC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000F56")]
		[Address(RVA = "0xBE8908", Offset = "0xBE8908", VA = "0xBE8908")]
		public RandomizedObject()
		{
		}
	}
	[Token(Token = "0x2000237")]
	[CreateAssetMenu(fileName = "Randomizer", menuName = "Utils/Randomizer")]
	public class Randomizer : ScriptableObject
	{
		[Token(Token = "0x4000D64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0f, 1f)]
		[Tooltip("The percentage of chance for this to happen")]
		public float probability;

		[Token(Token = "0x4000D65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("The minimum delay between 2 occurrences")]
		public float minDelay;

		[Token(Token = "0x4000D66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[TextArea]
		public string description;

		[Token(Token = "0x4000D67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float lastOccurence;

		[Token(Token = "0x6000F57")]
		[Address(RVA = "0xBE87B4", Offset = "0xBE87B4", VA = "0xBE87B4")]
		public bool TestOccurence()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F58")]
		[Address(RVA = "0xBE8910", Offset = "0xBE8910", VA = "0xBE8910")]
		public Randomizer()
		{
		}
	}
	[Token(Token = "0x2000238")]
	[CreateAssetMenu(menuName = "Utils/Timer")]
	public class Timer : ScriptableObject
	{
		[Token(Token = "0x4000D68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float duration;

		[NonSerialized]
		[Token(Token = "0x4000D69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float lastTickTime;

		[Token(Token = "0x170001BE")]
		public bool Finished
		{
			[Token(Token = "0x6000F59")]
			[Address(RVA = "0xBE8928", Offset = "0xBE8928", VA = "0xBE8928")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000F5A")]
		[Address(RVA = "0xBE8974", Offset = "0xBE8974", VA = "0xBE8974")]
		public void ForceTimerEnd()
		{
		}

		[Token(Token = "0x6000F5B")]
		[Address(RVA = "0xBE8980", Offset = "0xBE8980", VA = "0xBE8980")]
		public void Restart()
		{
		}

		[Token(Token = "0x6000F5C")]
		[Address(RVA = "0xBE899C", Offset = "0xBE899C", VA = "0xBE899C")]
		public Timer()
		{
		}
	}
	[Token(Token = "0x2000239")]
	public static class VectorUtils
	{
		[Token(Token = "0x6000F5D")]
		[Address(RVA = "0xBE89AC", Offset = "0xBE89AC", VA = "0xBE89AC")]
		public static bool IsACloseToB(Vector3 a, Vector3 b, float closeDistance)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F5E")]
		[Address(RVA = "0xBE89DC", Offset = "0xBE89DC", VA = "0xBE89DC")]
		public static bool IsACloserToPointThanB(Vector3 a, Vector3 b, Vector3 point)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F5F")]
		[Address(RVA = "0xBE8A30", Offset = "0xBE8A30", VA = "0xBE8A30")]
		public static Position ToPosition(this Vector3 v)
		{
			return default(Position);
		}
	}
}
namespace Mock
{
	[Token(Token = "0x200023A")]
	[SelectionBase]
	public class HumanMock : MonoBehaviour
	{
		[Token(Token = "0x4000D6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Basic Parameters")]
		public TownType TownType;

		[Token(Token = "0x4000D6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public TechLevel TechLevel;

		[Token(Token = "0x4000D6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Job Job;

		[Token(Token = "0x4000D6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool Female;

		[Token(Token = "0x4000D6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		public bool Child;

		[Token(Token = "0x4000D6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int VariationID;

		[Token(Token = "0x4000D70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Color TeamColor;

		[Token(Token = "0x4000D71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Header("Activity Parameters")]
		public Activity Activity;

		[Token(Token = "0x4000D72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public ResourceType CurrentGathering;

		[Token(Token = "0x4000D73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Header("Floor Parameters (for footsteps)")]
		public TerrainType TerrainType;

		[Token(Token = "0x4000D74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool ConcreteGround;

		[Token(Token = "0x4000D75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Configuration")]
		public HumanConfiguration configuration;

		[Token(Token = "0x4000D76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private EquipmentItem leftHandEquipmentInternal;

		[Token(Token = "0x4000D77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private EquipmentItem rightHandEquipmentInternal;

		[Token(Token = "0x4000D78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private EquipmentItem bodyEquipmentInternal;

		[Token(Token = "0x170001BF")]
		public EquipmentItem leftHandEquipment
		{
			[Token(Token = "0x6000F60")]
			[Address(RVA = "0xBE8AD4", Offset = "0xBE8AD4", VA = "0xBE8AD4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F61")]
			[Address(RVA = "0xBE8B5C", Offset = "0xBE8B5C", VA = "0xBE8B5C")]
			set
			{
			}
		}

		[Token(Token = "0x170001C0")]
		public EquipmentItem rightHandEquipment
		{
			[Token(Token = "0x6000F62")]
			[Address(RVA = "0xBE8B64", Offset = "0xBE8B64", VA = "0xBE8B64")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F63")]
			[Address(RVA = "0xBE8BEC", Offset = "0xBE8BEC", VA = "0xBE8BEC")]
			set
			{
			}
		}

		[Token(Token = "0x170001C1")]
		public EquipmentItem bodyEquipment
		{
			[Token(Token = "0x6000F64")]
			[Address(RVA = "0xBE8BF4", Offset = "0xBE8BF4", VA = "0xBE8BF4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F65")]
			[Address(RVA = "0xBE8C7C", Offset = "0xBE8C7C", VA = "0xBE8C7C")]
			set
			{
			}
		}

		[Token(Token = "0x170001C2")]
		public FaithLevel Team
		{
			[Token(Token = "0x6000F66")]
			[Address(RVA = "0xBE8E40", Offset = "0xBE8E40", VA = "0xBE8E40")]
			get
			{
				return default(FaithLevel);
			}
		}

		[Token(Token = "0x6000F67")]
		[Address(RVA = "0xBE8E48", Offset = "0xBE8E48", VA = "0xBE8E48")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F68")]
		[Address(RVA = "0xBE9128", Offset = "0xBE9128", VA = "0xBE9128")]
		public void Shoot()
		{
		}

		[Token(Token = "0x6000F69")]
		[Address(RVA = "0xBE91D8", Offset = "0xBE91D8", VA = "0xBE91D8")]
		public void Aim()
		{
		}

		[Token(Token = "0x6000F6A")]
		[Address(RVA = "0xBE9288", Offset = "0xBE9288", VA = "0xBE9288")]
		public void MeleeAttack()
		{
		}

		[Token(Token = "0x6000F6B")]
		[Address(RVA = "0xBE9338", Offset = "0xBE9338", VA = "0xBE9338")]
		public HumanMock()
		{
		}
	}
	[Token(Token = "0x200023B")]
	public class HumanMockAnimationEventReceiver : MonoBehaviour
	{
		[Token(Token = "0x4000D79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private HumanMockSoundManager soundManager;

		[Token(Token = "0x4000D7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private HumanMock human;

		[Token(Token = "0x6000F6C")]
		[Address(RVA = "0xBE934C", Offset = "0xBE934C", VA = "0xBE934C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000F6D")]
		[Address(RVA = "0xBE93DC", Offset = "0xBE93DC", VA = "0xBE93DC")]
		public void Shoot()
		{
		}

		[Token(Token = "0x6000F6E")]
		[Address(RVA = "0xBE943C", Offset = "0xBE943C", VA = "0xBE943C")]
		public void Aim()
		{
		}

		[Token(Token = "0x6000F6F")]
		[Address(RVA = "0xBE9454", Offset = "0xBE9454", VA = "0xBE9454")]
		public void Land()
		{
		}

		[Token(Token = "0x6000F70")]
		[Address(RVA = "0xBE947C", Offset = "0xBE947C", VA = "0xBE947C")]
		public void HammerHitGround()
		{
		}

		[Token(Token = "0x6000F71")]
		[Address(RVA = "0xBE949C", Offset = "0xBE949C", VA = "0xBE949C")]
		public void FootStep()
		{
		}

		[Token(Token = "0x6000F72")]
		[Address(RVA = "0xBE9588", Offset = "0xBE9588", VA = "0xBE9588")]
		public HumanMockAnimationEventReceiver()
		{
		}
	}
	[Token(Token = "0x200023C")]
	public class HumanMockModelManager : MonoBehaviour
	{
		[Token(Token = "0x4000D7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HumanModelDatabase humanDB;

		[Token(Token = "0x4000D7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EquipmentSelector equipmentSelector;

		[Token(Token = "0x4000D7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public HumanMaterialConfiguration materialConfiguration;

		[Token(Token = "0x4000D7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimationTriggerCollection animationTriggers;

		[Token(Token = "0x4000D7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AnimationBoolCollection animationBooleans;

		[Token(Token = "0x4000D80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public ResourcePrefabCollection carriedResources;

		[Token(Token = "0x4000D81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public EquipmentItem leftFist;

		[Token(Token = "0x4000D82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public EquipmentItem rightFist;

		[Token(Token = "0x4000D84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Animator animator;

		[Token(Token = "0x4000D85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public HumanMock human;

		[Token(Token = "0x4000D86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Transform currentRightHand;

		[Token(Token = "0x4000D87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Transform currentLeftHand;

		[Token(Token = "0x4000D88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Transform currentBodyTransform;

		[Token(Token = "0x4000D89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public GameObject currentModel;

		[Token(Token = "0x4000D8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private GameObject currentModelPrefab;

		[Token(Token = "0x4000D8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private GameObject currentLeftHandTool;

		[Token(Token = "0x4000D8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private GameObject currentRightHandTool;

		[Token(Token = "0x4000D8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private SkinnedMeshRenderer skinnedMeshRenderer;

		[Token(Token = "0x4000D8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private GameObject currentCarriedObject;

		[Token(Token = "0x4000D8F")]
		private const string RightHandIdentifier = "mixamorig:RightHand";

		[Token(Token = "0x4000D90")]
		private const string LeftHandIdentifier = "mixamorig:LeftHand";

		[Token(Token = "0x4000D91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int TeamColor;

		[Token(Token = "0x170001C3")]
		private bool Animated
		{
			[Token(Token = "0x6000F73")]
			[Address(RVA = "0xBE9590", Offset = "0xBE9590", VA = "0xBE9590")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000F74")]
			[Address(RVA = "0xBE9598", Offset = "0xBE9598", VA = "0xBE9598")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6000F75")]
		[Address(RVA = "0xBE95A4", Offset = "0xBE95A4", VA = "0xBE95A4")]
		private void InstantiateModel(GameObject prefab, bool animated)
		{
		}

		[Token(Token = "0x6000F76")]
		[Address(RVA = "0xBE8EB0", Offset = "0xBE8EB0", VA = "0xBE8EB0")]
		public void RefreshModel()
		{
		}

		[Token(Token = "0x6000F77")]
		[Address(RVA = "0xBE98BC", Offset = "0xBE98BC", VA = "0xBE98BC")]
		private void SetMaterial()
		{
		}

		[Token(Token = "0x6000F78")]
		[Address(RVA = "0xBE99EC", Offset = "0xBE99EC", VA = "0xBE99EC")]
		private void EquipInHand(GameObject prefab, bool rightHand = true)
		{
		}

		[Token(Token = "0x6000F79")]
		[Address(RVA = "0xBE8F5C", Offset = "0xBE8F5C", VA = "0xBE8F5C")]
		public void RefreshEquipment()
		{
		}

		[Token(Token = "0x6000F7A")]
		[Address(RVA = "0xBE9B78", Offset = "0xBE9B78", VA = "0xBE9B78")]
		public void EquipSet(Equipment equipment)
		{
		}

		[Token(Token = "0x6000F7B")]
		[Address(RVA = "0xBE9CB0", Offset = "0xBE9CB0", VA = "0xBE9CB0")]
		private void Equip(EquipmentItem equipmentItem)
		{
		}

		[Token(Token = "0x6000F7C")]
		[Address(RVA = "0xBE9FE4", Offset = "0xBE9FE4", VA = "0xBE9FE4")]
		public void SetTrigger(AnimationTrigger trigger)
		{
		}

		[Token(Token = "0x6000F7D")]
		[Address(RVA = "0xBEA08C", Offset = "0xBEA08C", VA = "0xBEA08C")]
		public void SetBool(AnimationBool animationBool, bool value)
		{
		}

		[Token(Token = "0x6000F7E")]
		[Address(RVA = "0xBEA13C", Offset = "0xBEA13C", VA = "0xBEA13C")]
		public void RefreshCarriedObjects()
		{
		}

		[Token(Token = "0x6000F7F")]
		[Address(RVA = "0xBEA200", Offset = "0xBEA200", VA = "0xBEA200")]
		private void Carry(GameObject prefab)
		{
		}

		[Token(Token = "0x6000F80")]
		[Address(RVA = "0xBEA2A4", Offset = "0xBEA2A4", VA = "0xBEA2A4")]
		public HumanMockModelManager()
		{
		}
	}
	[Token(Token = "0x200023D")]
	public class HumanMockSoundManager : MonoBehaviour
	{
		[Token(Token = "0x4000D92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HumanAudioCollection defaultAudioCollection;

		[Token(Token = "0x4000D93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FootstepAudioCollection defaultFootstepAudioCollection;

		[Token(Token = "0x4000D94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[FormerlySerializedAs("_human")]
		public HumanMock human;

		[Token(Token = "0x4000D95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AudioSource lastInteruptableAudioSource;

		[Token(Token = "0x4000D96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private HumanAudioCollection internalCurrentAudioCollection;

		[Token(Token = "0x4000D97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private FootstepAudioCollection internalCurrentFootstepAudioCollection;

		[Token(Token = "0x170001C4")]
		public HumanAudioCollection CurrentAudioCollection
		{
			[Token(Token = "0x6000F82")]
			[Address(RVA = "0xBEA314", Offset = "0xBEA314", VA = "0xBEA314")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F83")]
			[Address(RVA = "0xBE8D30", Offset = "0xBE8D30", VA = "0xBE8D30")]
			set
			{
			}
		}

		[Token(Token = "0x170001C5")]
		public FootstepAudioCollection CurrentFootstepAudioCollection
		{
			[Token(Token = "0x6000F84")]
			[Address(RVA = "0xBEA31C", Offset = "0xBEA31C", VA = "0xBEA31C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F85")]
			[Address(RVA = "0xBE8DB8", Offset = "0xBE8DB8", VA = "0xBE8DB8")]
			set
			{
			}
		}

		[Token(Token = "0x6000F86")]
		[Address(RVA = "0xBEA324", Offset = "0xBEA324", VA = "0xBEA324")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000F87")]
		[Address(RVA = "0xBE9474", Offset = "0xBE9474", VA = "0xBE9474")]
		public void PlaySound(HumanSoundType soundType, bool crowd = false)
		{
		}

		[Token(Token = "0x6000F88")]
		[Address(RVA = "0xBEA344", Offset = "0xBEA344", VA = "0xBEA344")]
		private void PlaySoundFromCollection(HumanSoundType soundType, bool crowd = false)
		{
		}

		[Token(Token = "0x6000F89")]
		[Address(RVA = "0xBEA4C0", Offset = "0xBEA4C0", VA = "0xBEA4C0")]
		private void PlaySoundFromSet(AudioSet audioSet, HumanSoundType soundType, bool noInterrupt, bool voiceSound)
		{
		}

		[Token(Token = "0x6000F8A")]
		[Address(RVA = "0xBEA5C8", Offset = "0xBEA5C8", VA = "0xBEA5C8")]
		private static void InterruptSound(AudioSource audioSource)
		{
		}

		[Token(Token = "0x6000F8B")]
		[Address(RVA = "0xBEA620", Offset = "0xBEA620", VA = "0xBEA620")]
		private void PlaySoundFromSet(AudioSet audioSet)
		{
		}

		[Token(Token = "0x6000F8C")]
		[Address(RVA = "0xBEA6A4", Offset = "0xBEA6A4", VA = "0xBEA6A4")]
		public void PlayGatherSound(Resource resource)
		{
		}

		[Token(Token = "0x6000F8D")]
		[Address(RVA = "0xBE94B4", Offset = "0xBE94B4", VA = "0xBE94B4")]
		public void PlayFootstep()
		{
		}

		[Token(Token = "0x6000F8E")]
		[Address(RVA = "0xBEA7D8", Offset = "0xBEA7D8", VA = "0xBEA7D8")]
		public HumanMockSoundManager()
		{
		}
	}
	[Token(Token = "0x200023E")]
	[SelectionBase]
	public class ShipMock : MonoBehaviour
	{
		[Token(Token = "0x4000D98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Basic Parameters")]
		public TownType TownType;

		[Token(Token = "0x4000D99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public TechLevel TechLevel;

		[Token(Token = "0x4000D9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Ship.Type type;

		[Token(Token = "0x4000D9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Color teamColor;

		[Token(Token = "0x4000D9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public ShipAnimationsVariables animationsVariables;

		[Token(Token = "0x4000D9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Animator animator;

		[Token(Token = "0x4000D9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private ShipMockModelManager modelManager;

		[Token(Token = "0x6000F8F")]
		[Address(RVA = "0xBEA7E0", Offset = "0xBEA7E0", VA = "0xBEA7E0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F90")]
		[Address(RVA = "0xBEAB60", Offset = "0xBEAB60", VA = "0xBEAB60")]
		public void Idle()
		{
		}

		[Token(Token = "0x6000F91")]
		[Address(RVA = "0xBEABA4", Offset = "0xBEABA4", VA = "0xBEABA4")]
		public void Move()
		{
		}

		[Token(Token = "0x6000F92")]
		[Address(RVA = "0xBEABE8", Offset = "0xBEABE8", VA = "0xBEABE8")]
		public void OpenHatches()
		{
		}

		[Token(Token = "0x6000F93")]
		[Address(RVA = "0xBEAC2C", Offset = "0xBEAC2C", VA = "0xBEAC2C")]
		public void FireLeft()
		{
		}

		[Token(Token = "0x6000F94")]
		[Address(RVA = "0xBEAC6C", Offset = "0xBEAC6C", VA = "0xBEAC6C")]
		public void FireRight()
		{
		}

		[Token(Token = "0x6000F95")]
		[Address(RVA = "0xBEACAC", Offset = "0xBEACAC", VA = "0xBEACAC")]
		public void CloseHatches()
		{
		}

		[Token(Token = "0x6000F96")]
		[Address(RVA = "0xBEACF0", Offset = "0xBEACF0", VA = "0xBEACF0")]
		public void Shoot(int canonIndex, bool leftCanons)
		{
		}

		[Token(Token = "0x6000F97")]
		[Address(RVA = "0xBEAF00", Offset = "0xBEAF00", VA = "0xBEAF00")]
		public void Open()
		{
		}

		[Token(Token = "0x6000F98")]
		[Address(RVA = "0xBEAFB4", Offset = "0xBEAFB4", VA = "0xBEAFB4")]
		public void Close()
		{
		}

		[Token(Token = "0x6000F99")]
		[Address(RVA = "0xBEB068", Offset = "0xBEB068", VA = "0xBEB068")]
		public void PreShoot()
		{
		}

		[Token(Token = "0x6000F9A")]
		[Address(RVA = "0xBEB11C", Offset = "0xBEB11C", VA = "0xBEB11C")]
		public void Reload()
		{
		}

		[Token(Token = "0x6000F9B")]
		[Address(RVA = "0xBEB1D0", Offset = "0xBEB1D0", VA = "0xBEB1D0")]
		public void UpdateColor()
		{
		}

		[Token(Token = "0x6000F9C")]
		[Address(RVA = "0xBEB2DC", Offset = "0xBEB2DC", VA = "0xBEB2DC")]
		public ShipMock()
		{
		}
	}
	[Token(Token = "0x200023F")]
	public class ShipMockAnimationEventReceiver : MonoBehaviour
	{
		[Token(Token = "0x4000D9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ShipMock shipMock;

		[Token(Token = "0x6000F9D")]
		[Address(RVA = "0xBEB2E4", Offset = "0xBEB2E4", VA = "0xBEB2E4")]
		public void PreShoot()
		{
		}

		[Token(Token = "0x6000F9E")]
		[Address(RVA = "0xBEB360", Offset = "0xBEB360", VA = "0xBEB360")]
		public void ShootLeft(int canonIndex)
		{
		}

		[Token(Token = "0x6000F9F")]
		[Address(RVA = "0xBEB43C", Offset = "0xBEB43C", VA = "0xBEB43C")]
		public void ShootRight(int canonIndex)
		{
		}

		[Token(Token = "0x6000FA0")]
		[Address(RVA = "0xBEB518", Offset = "0xBEB518", VA = "0xBEB518")]
		public void Open()
		{
		}

		[Token(Token = "0x6000FA1")]
		[Address(RVA = "0xBEB594", Offset = "0xBEB594", VA = "0xBEB594")]
		public void Close()
		{
		}

		[Token(Token = "0x6000FA2")]
		[Address(RVA = "0xBEB610", Offset = "0xBEB610", VA = "0xBEB610")]
		public void Reload()
		{
		}

		[Token(Token = "0x6000FA3")]
		[Address(RVA = "0xBEB68C", Offset = "0xBEB68C", VA = "0xBEB68C")]
		public ShipMockAnimationEventReceiver()
		{
		}
	}
	[Token(Token = "0x2000240")]
	public class ShipMockModelManager : MonoBehaviour
	{
		[Token(Token = "0x4000DA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ShipMock ship;

		[Token(Token = "0x4000DA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ShipModelCollection shipModelCollection;

		[Token(Token = "0x4000DA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LayeredAudioSetPlayer loopPlayer;

		[Token(Token = "0x4000DA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject modelInstance;

		[Token(Token = "0x4000DA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public PathFollower pathFollower;

		[Token(Token = "0x4000DA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private ShipModel shipModelInternal;

		[NonSerialized]
		[Token(Token = "0x4000DA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public CanonsManager canonsManager;

		[Token(Token = "0x170001C6")]
		public ShipModel ShipModel
		{
			[Token(Token = "0x6000FA4")]
			[Address(RVA = "0xBEB694", Offset = "0xBEB694", VA = "0xBEB694")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FA5")]
			[Address(RVA = "0xBEB69C", Offset = "0xBEB69C", VA = "0xBEB69C")]
			private set
			{
			}
		}

		[Token(Token = "0x6000FA6")]
		[Address(RVA = "0xBEA854", Offset = "0xBEA854", VA = "0xBEA854")]
		public void RefreshModel()
		{
		}

		[Token(Token = "0x6000FA7")]
		[Address(RVA = "0xBEAA78", Offset = "0xBEAA78", VA = "0xBEAA78")]
		public void RefreshSailsTexture()
		{
		}

		[Token(Token = "0x6000FA8")]
		[Address(RVA = "0xBEB73C", Offset = "0xBEB73C", VA = "0xBEB73C")]
		private void FindCanonManager()
		{
		}

		[Token(Token = "0x6000FA9")]
		[Address(RVA = "0xBEB864", Offset = "0xBEB864", VA = "0xBEB864")]
		public ShipMockModelManager()
		{
		}
	}
}
namespace Miracles
{
	[Token(Token = "0x2000241")]
	[CreateAssetMenu(menuName = "Miracles/Effects/Burn Effect")]
	public class BurnEffect : MiracleEffect
	{
		[Token(Token = "0x6000FAA")]
		[Address(RVA = "0xBEB86C", Offset = "0xBEB86C", VA = "0xBEB86C", Slot = "4")]
		protected override bool Apply(Vector3 miraclePosition, GameObject gameObject, bool atLeastOne)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FAB")]
		[Address(RVA = "0xBEB938", Offset = "0xBEB938", VA = "0xBEB938")]
		public BurnEffect()
		{
		}
	}
	[Token(Token = "0x2000242")]
	[CreateAssetMenu(menuName = "Miracles/Effects/Christmas Gift Effect")]
	public class ChristmasGiftEffect : MiracleEffect
	{
		[Token(Token = "0x6000FAC")]
		[Address(RVA = "0xBEB948", Offset = "0xBEB948", VA = "0xBEB948", Slot = "4")]
		protected override bool Apply(Vector3 miraclePosition, GameObject gameObject, bool atLeastOne)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FAD")]
		[Address(RVA = "0xBEB9A4", Offset = "0xBEB9A4", VA = "0xBEB9A4")]
		public ChristmasGiftEffect()
		{
		}
	}
	[Token(Token = "0x2000243")]
	[CreateAssetMenu(menuName = "Miracles/Effects/Electrocute Effect")]
	public class ElectrocuteEffect : MiracleEffect
	{
		[Token(Token = "0x6000FAE")]
		[Address(RVA = "0xBEB9AC", Offset = "0xBEB9AC", VA = "0xBEB9AC", Slot = "4")]
		protected override bool Apply(Vector3 miraclePosition, GameObject gameObject, bool atLeastOne)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FAF")]
		[Address(RVA = "0xBEBA78", Offset = "0xBEBA78", VA = "0xBEBA78")]
		public ElectrocuteEffect()
		{
		}
	}
	[Token(Token = "0x2000244")]
	[CreateAssetMenu(menuName = "Miracles/Effects/Halloween Fear Effect")]
	public class HalloweenFearEffect : MiracleEffect
	{
		[Token(Token = "0x6000FB0")]
		[Address(RVA = "0xBEBA80", Offset = "0xBEBA80", VA = "0xBEBA80", Slot = "4")]
		protected override bool Apply(Vector3 miraclePosition, GameObject gameObject, bool atLeastOne)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FB1")]
		[Address(RVA = "0xBEBADC", Offset = "0xBEBADC", VA = "0xBEBADC")]
		public HalloweenFearEffect()
		{
		}
	}
	[Token(Token = "0x2000245")]
	[CreateAssetMenu(menuName = "Miracles/Effects/Heal Effect")]
	public class HealEffect : MiracleEffect
	{
		[Token(Token = "0x6000FB2")]
		[Address(RVA = "0xBEBAE4", Offset = "0xBEBAE4", VA = "0xBEBAE4", Slot = "4")]
		protected override bool Apply(Vector3 miraclePosition, GameObject gameObject, bool atLeastOne)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FB3")]
		[Address(RVA = "0xBEBBB8", Offset = "0xBEBBB8", VA = "0xBEBBB8")]
		public HealEffect()
		{
		}
	}
	[Token(Token = "0x2000246")]
	[CreateAssetMenu(menuName = "Miracles/Effects/Inspiration Effect")]
	public class InspirationEffect : MiracleEffect
	{
		[Token(Token = "0x6000FB4")]
		[Address(RVA = "0xBEBBC0", Offset = "0xBEBBC0", VA = "0xBEBBC0", Slot = "4")]
		protected override bool Apply(Vector3 miraclePosition, GameObject gameObject, bool atLeastOne)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FB5")]
		[Address(RVA = "0xBEBCA4", Offset = "0xBEBCA4", VA = "0xBEBCA4")]
		public InspirationEffect()
		{
		}
	}
	[Token(Token = "0x2000247")]
	public abstract class MiracleEffect : ScriptableObject
	{
		[Token(Token = "0x4000DA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Check this if you want this effect to be applied only once per miracle")]
		public bool limitToOne;

		[Token(Token = "0x4000DA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The visual effect to instantiate for each successful effect")]
		public GameObject visualEffect;

		[Token(Token = "0x6000FB6")]
		[Address(RVA = "0xBEBCAC", Offset = "0xBEBCAC", VA = "0xBEBCAC")]
		public bool ApplyEffect(Vector3 miraclePosition, GameObject gameObject, bool atLeastOne)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FB7")]
		protected abstract bool Apply(Vector3 miraclePosition, GameObject gameObject, bool atLeastOne);

		[Token(Token = "0x6000FB8")]
		[Address(RVA = "0xBEBD84", Offset = "0xBEBD84", VA = "0xBEBD84", Slot = "5")]
		protected virtual Vector3 FindEffectPosition(Vector3 miraclePosition, GameObject gameObject)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000FB9")]
		[Address(RVA = "0xBEB940", Offset = "0xBEB940", VA = "0xBEB940")]
		protected MiracleEffect()
		{
		}
	}
	[Token(Token = "0x2000248")]
	[CreateAssetMenu(menuName = "Miracles/Effects/Omen Effect")]
	public class OmenEffect : MiracleEffect
	{
		[Token(Token = "0x4000DA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool goodOmen;

		[Token(Token = "0x6000FBA")]
		[Address(RVA = "0xBEBDAC", Offset = "0xBEBDAC", VA = "0xBEBDAC", Slot = "4")]
		protected override bool Apply(Vector3 miraclePosition, GameObject gameObject, bool atLeastOne)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FBB")]
		[Address(RVA = "0xBEBED8", Offset = "0xBEBED8", VA = "0xBEBED8", Slot = "5")]
		protected override Vector3 FindEffectPosition(Vector3 miraclePosition, GameObject gameObject)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000FBC")]
		[Address(RVA = "0xBEBFBC", Offset = "0xBEBFBC", VA = "0xBEBFBC")]
		public OmenEffect()
		{
		}
	}
	[Token(Token = "0x2000249")]
	[CreateAssetMenu(menuName = "Miracles/Effects/Poison Effect")]
	public class PoisonEffect : MiracleEffect
	{
		[Token(Token = "0x6000FBD")]
		[Address(RVA = "0xBEBFC4", Offset = "0xBEBFC4", VA = "0xBEBFC4", Slot = "4")]
		protected override bool Apply(Vector3 miraclePosition, GameObject gameObject, bool atLeastOne)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FBE")]
		[Address(RVA = "0xBEC090", Offset = "0xBEC090", VA = "0xBEC090")]
		public PoisonEffect()
		{
		}
	}
	[Token(Token = "0x200024A")]
	[CreateAssetMenu(menuName = "Miracles/Effects/Regeneration Effect")]
	public class RegenerationEffect : MiracleEffect
	{
		[Token(Token = "0x6000FBF")]
		[Address(RVA = "0xBEC098", Offset = "0xBEC098", VA = "0xBEC098", Slot = "4")]
		protected override bool Apply(Vector3 miraclePosition, GameObject gameObject, bool atLeastOne)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FC0")]
		[Address(RVA = "0xBEC168", Offset = "0xBEC168", VA = "0xBEC168")]
		public RegenerationEffect()
		{
		}
	}
	[Token(Token = "0x200024B")]
	[CreateAssetMenu(menuName = "Miracles/Effects/Swarm Eat Effect")]
	public class SwarmEatEffect : MiracleEffect
	{
		[Token(Token = "0x6000FC1")]
		[Address(RVA = "0xBEC170", Offset = "0xBEC170", VA = "0xBEC170", Slot = "4")]
		protected override bool Apply(Vector3 miraclePosition, GameObject gameObject, bool atLeastOne)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FC2")]
		[Address(RVA = "0xBEC240", Offset = "0xBEC240", VA = "0xBEC240")]
		public SwarmEatEffect()
		{
		}
	}
	[Token(Token = "0x200024C")]
	[CreateAssetMenu(menuName = "Miracles/Effects/Water Effect")]
	public class WaterEffect : MiracleEffect
	{
		[Token(Token = "0x6000FC3")]
		[Address(RVA = "0xBEC248", Offset = "0xBEC248", VA = "0xBEC248", Slot = "4")]
		protected override bool Apply(Vector3 miraclePosition, GameObject gameObject, bool atLeastOne)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FC4")]
		[Address(RVA = "0xBEC320", Offset = "0xBEC320", VA = "0xBEC320")]
		public WaterEffect()
		{
		}
	}
}
namespace Humans_Test_SceneScripts
{
	[Token(Token = "0x200024D")]
	public class Humans_Test_CanvasManager : MonoBehaviour
	{
		[Token(Token = "0x4000DAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Parent for all columns")]
		[SerializeField]
		private Transform columnParent;

		[Token(Token = "0x4000DAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Prefab to spawn all column, one column for each civilisation")]
		[SerializeField]
		private GameObject columnPrefab;

		[Token(Token = "0x4000DAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Prefab to spawn all row, one row for each level tech")]
		[SerializeField]
		private GameObject rowPrefab;

		[Token(Token = "0x4000DAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector2 coordButton;

		[Token(Token = "0x4000DAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<GameObject> allColumns;

		[Token(Token = "0x4000DAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private GameObject[,] allRows;

		[Token(Token = "0x4000DB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private HumanMockModelManager[] hmmm;

		[Token(Token = "0x6000FC5")]
		[Address(RVA = "0xBEC328", Offset = "0xBEC328", VA = "0xBEC328")]
		public List<GameObject> MakeUi(float spaceColumn, float spaceRow)
		{
			return null;
		}

		[Token(Token = "0x6000FC6")]
		[Address(RVA = "0xBECF84", Offset = "0xBECF84", VA = "0xBECF84")]
		public void MakeAnim(string anim)
		{
		}

		[Token(Token = "0x6000FC7")]
		[Address(RVA = "0xBED314", Offset = "0xBED314", VA = "0xBED314")]
		public Humans_Test_CanvasManager()
		{
		}
	}
	[Token(Token = "0x200024E")]
	public class Humans_Test_Rowbutton : MonoBehaviour
	{
		[Token(Token = "0x4000DB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public Vector3 coords;

		[Token(Token = "0x4000DB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[HideInInspector]
		public float spacingColumn;

		[Token(Token = "0x4000DB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public float spacingRow;

		[Token(Token = "0x4000DB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector3 nearestPoint;

		[Token(Token = "0x4000DB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float dist;

		[Token(Token = "0x6000FC8")]
		[Address(RVA = "0xBED3CC", Offset = "0xBED3CC", VA = "0xBED3CC")]
		public void TeleportPlayer()
		{
		}

		[Token(Token = "0x6000FC9")]
		[Address(RVA = "0xBED76C", Offset = "0xBED76C", VA = "0xBED76C")]
		public Humans_Test_Rowbutton()
		{
		}
	}
	[Token(Token = "0x200024F")]
	public class Humans_Test_Spawner : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000250")]
		private struct Parents
		{
			[Token(Token = "0x4000DBF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Transform[] African_techParents;

			[Token(Token = "0x4000DC0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Transform[] Asian_techParents;

			[Token(Token = "0x4000DC1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform[] European_techParents;

			[Token(Token = "0x4000DC2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Transform[] Nordic_techParents;

			[Token(Token = "0x4000DC3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Transform[] Oriental_techParents;
		}

		[Serializable]
		[Token(Token = "0x2000251")]
		private struct Spacing
		{
			[Token(Token = "0x4000DC4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Tooltip("Space between all civilisation")]
			public float spaceTown;

			[Token(Token = "0x4000DC5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[Tooltip("Space between all tech")]
			public float spaceTech;

			[Token(Token = "0x4000DC6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Tooltip("Space between all job")]
			public float spaceJob;

			[Token(Token = "0x4000DC7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[Tooltip("Space between all child")]
			public float spaceChild;

			[Token(Token = "0x4000DC8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("Space between all female")]
			public float spaceFemale;

			[Token(Token = "0x4000DC9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("Space between all variants")]
			public float spaceVariant;
		}

		[Token(Token = "0x4000DB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[Tooltip("The prefab of HumanMock")]
		private GameObject humanMockPrefab;

		[Token(Token = "0x4000DB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Parents of all civilisation in hierachie")]
		[SerializeField]
		private Parents parents;

		[Token(Token = "0x4000DB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		[Tooltip("Space between all cathegories")]
		private Spacing spacing;

		[Token(Token = "0x4000DB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int townIndex;

		[Token(Token = "0x4000DBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private int techIndex;

		[Token(Token = "0x4000DBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int jobIndex;

		[Token(Token = "0x4000DBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("UI script")]
		[SerializeField]
		private Humans_Test_CanvasManager htcm;

		[Token(Token = "0x4000DBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Show debug messages or not")]
		[SerializeField]
		private bool showDebugMessages;

		[Token(Token = "0x4000DBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[HideInInspector]
		public List<GameObject> spawnedHumans;

		[Token(Token = "0x6000FCA")]
		[Address(RVA = "0xBED7D0", Offset = "0xBED7D0", VA = "0xBED7D0")]
		public void SpawnHumans()
		{
		}

		[Token(Token = "0x6000FCB")]
		[Address(RVA = "0xBED874", Offset = "0xBED874", VA = "0xBED874")]
		public void KillHumans()
		{
		}

		[Token(Token = "0x6000FCC")]
		[Address(RVA = "0xBEE538", Offset = "0xBEE538", VA = "0xBEE538")]
		private void Start()
		{
		}

		[Token(Token = "0x6000FCD")]
		[Address(RVA = "0xBED948", Offset = "0xBED948", VA = "0xBED948")]
		private void SpawnLoop()
		{
		}

		[Token(Token = "0x6000FCE")]
		[Address(RVA = "0xBEE53C", Offset = "0xBEE53C", VA = "0xBEE53C")]
		private void SpawningHuman(TownType town, TechLevel tech, Job job, int childInt, int femaleInt, int variant)
		{
		}

		[Token(Token = "0x6000FCF")]
		[Address(RVA = "0xBEEB14", Offset = "0xBEEB14", VA = "0xBEEB14")]
		private Transform GetGoodParent(TownType town, int techLevel)
		{
			return null;
		}

		[Token(Token = "0x6000FD0")]
		[Address(RVA = "0xBEEA90", Offset = "0xBEEA90", VA = "0xBEEA90")]
		private void UpdateUi()
		{
		}

		[Token(Token = "0x6000FD1")]
		[Address(RVA = "0xBEE4C0", Offset = "0xBEE4C0", VA = "0xBEE4C0")]
		public void SafeDestroy(GameObject obj)
		{
		}

		[Token(Token = "0x6000FD2")]
		[Address(RVA = "0xBEEB9C", Offset = "0xBEEB9C", VA = "0xBEEB9C")]
		public Humans_Test_Spawner()
		{
		}
	}
}
namespace Humans
{
	[Token(Token = "0x2000252")]
	[CreateAssetMenu(fileName = "Human Material Configuration", menuName = "Human/Material Configuration", order = 0)]
	public class HumanMaterialConfiguration : ScriptableObject
	{
		[Token(Token = "0x4000DCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Materials", order = 4)]
		public Material baseMaterial;

		[Token(Token = "0x4000DCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Material sickMaterial;

		[Token(Token = "0x4000DCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Clothes colors")]
		public Color neutralColor;

		[Token(Token = "0x4000DCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Color hereticColor;

		[Token(Token = "0x4000DCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Color homelessColor;

		[Token(Token = "0x4000DCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("Outlines colors")]
		public Color believerOutlineColor;

		[Token(Token = "0x4000DD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Color leaderOutlineColor;

		[Token(Token = "0x4000DD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Color neutralOutlineColor;

		[Token(Token = "0x4000DD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Color hereticOutlineColor;

		[Token(Token = "0x4000DD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int TeamColor;

		[Token(Token = "0x6000FD3")]
		[Address(RVA = "0xBEEC24", Offset = "0xBEEC24", VA = "0xBEEC24")]
		public void SetMaterial(Human human, Renderer renderer)
		{
		}

		[Token(Token = "0x6000FD4")]
		[Address(RVA = "0xBEEE94", Offset = "0xBEEE94", VA = "0xBEEE94")]
		public Color GetOutlineColor(Human human)
		{
			return default(Color);
		}

		[Token(Token = "0x6000FD5")]
		[Address(RVA = "0xBEEF84", Offset = "0xBEEF84", VA = "0xBEEF84")]
		public HumanMaterialConfiguration()
		{
		}
	}
	[Token(Token = "0x2000253")]
	[CreateAssetMenu(fileName = "HumanModelList", menuName = "Human/ModelList", order = 1)]
	public class HumanModelList : ScriptableObject
	{
		[Token(Token = "0x4000DD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<HumanModelResponse> humanList;

		[Token(Token = "0x6000FD7")]
		[Address(RVA = "0xBEEFF4", Offset = "0xBEEFF4", VA = "0xBEEFF4")]
		public void OnValidate()
		{
		}

		[Token(Token = "0x6000FD8")]
		[Address(RVA = "0xBEF378", Offset = "0xBEF378", VA = "0xBEF378")]
		public HumanModelList()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000254")]
	public struct HumanModelRequest : IEquatable<HumanModelRequest>
	{
		[Token(Token = "0x170001C7")]
		public readonly TownType TownType
		{
			[Token(Token = "0x6000FD9")]
			[Address(RVA = "0xBEF400", Offset = "0xBEF400", VA = "0xBEF400")]
			[CompilerGenerated]
			get
			{
				return default(TownType);
			}
		}

		[Token(Token = "0x170001C8")]
		public readonly TechLevel TechLevel
		{
			[Token(Token = "0x6000FDA")]
			[Address(RVA = "0xBEF408", Offset = "0xBEF408", VA = "0xBEF408")]
			[CompilerGenerated]
			get
			{
				return default(TechLevel);
			}
		}

		[Token(Token = "0x170001C9")]
		public readonly bool Female
		{
			[Token(Token = "0x6000FDB")]
			[Address(RVA = "0xBEF410", Offset = "0xBEF410", VA = "0xBEF410")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001CA")]
		public readonly bool Child
		{
			[Token(Token = "0x6000FDC")]
			[Address(RVA = "0xBEF418", Offset = "0xBEF418", VA = "0xBEF418")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001CB")]
		public readonly Job Job
		{
			[Token(Token = "0x6000FDD")]
			[Address(RVA = "0xBEF420", Offset = "0xBEF420", VA = "0xBEF420")]
			[CompilerGenerated]
			get
			{
				return default(Job);
			}
		}

		[Token(Token = "0x170001CC")]
		public int VariationID
		{
			[Token(Token = "0x6000FDE")]
			[Address(RVA = "0xBEF428", Offset = "0xBEF428", VA = "0xBEF428")]
			[CompilerGenerated]
			readonly get
			{
				return default(int);
			}
			[Token(Token = "0x6000FDF")]
			[Address(RVA = "0xBEF430", Offset = "0xBEF430", VA = "0xBEF430")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6000FE0")]
		[Address(RVA = "0xBEF438", Offset = "0xBEF438", VA = "0xBEF438")]
		public HumanModelRequest(TownType townType, TechLevel techLevel, bool female, bool child, Job job, int variationId)
		{
		}

		[Token(Token = "0x6000FE1")]
		[Address(RVA = "0xBEF454", Offset = "0xBEF454", VA = "0xBEF454")]
		public HumanModelRequest(TownType townType, TechLevel techLevel, bool female, bool child, Job job)
		{
		}

		[Token(Token = "0x6000FE2")]
		[Address(RVA = "0xBEF470", Offset = "0xBEF470", VA = "0xBEF470", Slot = "4")]
		public bool Equals(HumanModelRequest other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FE3")]
		[Address(RVA = "0xBEF4FC", Offset = "0xBEF4FC", VA = "0xBEF4FC", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FE4")]
		[Address(RVA = "0xBEF58C", Offset = "0xBEF58C", VA = "0xBEF58C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000FE5")]
		[Address(RVA = "0xBEF5C8", Offset = "0xBEF5C8", VA = "0xBEF5C8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x2000255")]
	public class HumanModelResponse
	{
		[Token(Token = "0x4000DDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x4000DDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TownType townType;

		[Token(Token = "0x4000DDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public TechLevel techLevel;

		[Token(Token = "0x4000DDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool female;

		[Token(Token = "0x4000DDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool child;

		[Token(Token = "0x4000DE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Job job;

		[Token(Token = "0x4000DE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int variationID;

		[Token(Token = "0x4000DE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject prefab;

		[Token(Token = "0x6000FE6")]
		[Address(RVA = "0xBEFA30", Offset = "0xBEFA30", VA = "0xBEFA30")]
		public HumanModelResponse()
		{
		}
	}
	[Token(Token = "0x2000256")]
	[CreateAssetMenu(fileName = "Resource Prefab Collection", menuName = "Cities/Resources Prefab Collection", order = 0)]
	public class ResourcePrefabCollection : ScriptableObject
	{
		[Serializable]
		[Token(Token = "0x2000257")]
		public class ResourcePrefab
		{
			[Token(Token = "0x4000DE5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public ResourceType resourceType;

			[Token(Token = "0x4000DE6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public GameObject prefab;

			[Token(Token = "0x6000FE9")]
			[Address(RVA = "0xBEFBEC", Offset = "0xBEFBEC", VA = "0xBEFBEC")]
			public ResourcePrefab()
			{
			}
		}

		[Token(Token = "0x4000DE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject fallbackPrefab;

		[Token(Token = "0x4000DE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<ResourcePrefab> resources;

		[Token(Token = "0x6000FE7")]
		[Address(RVA = "0xBEFA38", Offset = "0xBEFA38", VA = "0xBEFA38")]
		public GameObject FindResourcePrefab(ResourceType resourceType)
		{
			return null;
		}

		[Token(Token = "0x6000FE8")]
		[Address(RVA = "0xBEFBE4", Offset = "0xBEFBE4", VA = "0xBEFBE4")]
		public ResourcePrefabCollection()
		{
		}
	}
	[Token(Token = "0x2000258")]
	[CreateAssetMenu(fileName = "Trait", menuName = "Human/Trait", order = 0)]
	public class Trait : ScriptableObject
	{
		[Token(Token = "0x4000DE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The key used in the save files and to find the localization name of this trait")]
		public string key;

		[Token(Token = "0x4000DE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 1f)]
		[Tooltip("The percentage of chance to have this trait")]
		public float probability;

		[Token(Token = "0x4000DE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The human will not get this trait if he already have one of theses traits")]
		public List<Trait> incompatibleWith;

		[Token(Token = "0x6000FEA")]
		[Address(RVA = "0xBEFBF4", Offset = "0xBEFBF4", VA = "0xBEFBF4")]
		public Trait()
		{
		}
	}
	[Token(Token = "0x2000259")]
	[CreateAssetMenu(fileName = "Traits Generator", menuName = "Human/Trait Generator", order = 1)]
	public class TraitsGenerator : ScriptableObject
	{
		[Token(Token = "0x4000DEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int minTraits;

		[Token(Token = "0x4000DEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int maxTraits;

		[Token(Token = "0x4000DEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int maxAttempts;

		[Token(Token = "0x4000DED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<Trait> possibleTraits;

		[Token(Token = "0x6000FEB")]
		[Address(RVA = "0xBEFC04", Offset = "0xBEFC04", VA = "0xBEFC04")]
		public HashSet<Trait> GenerateTraits()
		{
			return null;
		}

		[Token(Token = "0x6000FEC")]
		[Address(RVA = "0xBEFFB4", Offset = "0xBEFFB4", VA = "0xBEFFB4")]
		public HashSet<Trait> LoadTraits(string[] keys)
		{
			return null;
		}

		[Token(Token = "0x6000FED")]
		[Address(RVA = "0xBF01D4", Offset = "0xBF01D4", VA = "0xBF01D4")]
		public TraitsGenerator()
		{
		}
	}
}
namespace Humans.Equipments
{
	[Token(Token = "0x200025B")]
	[CreateAssetMenu(fileName = "Attack Stats", menuName = "Human/Attack Stats", order = 0)]
	public class AttackStats : ScriptableObject
	{
		[Token(Token = "0x4000DEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Melee Configuration")]
		public FloatVariable meleeDamage;

		[Token(Token = "0x4000DF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FloatVariable meleeAttackDelay;

		[Token(Token = "0x4000DF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public FloatVariable meleeMaxRange;

		[Token(Token = "0x4000DF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Ranged Configuration")]
		public bool ranged;

		[Token(Token = "0x4000DF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public FloatVariable minRange;

		[Token(Token = "0x4000DF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public FloatVariable maxRange;

		[Token(Token = "0x4000DF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public FloatVariable rangedDamage;

		[Token(Token = "0x4000DF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public FloatVariable rangedAttackDelay;

		[Token(Token = "0x6000FF0")]
		[Address(RVA = "0xBF0214", Offset = "0xBF0214", VA = "0xBF0214")]
		public bool IsInRange(Vector3 currentPosition, Vector3 targetPosition, out bool rangedWeapon, out bool tooClose, out float currentMaxRange)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FF1")]
		[Address(RVA = "0xBF02A0", Offset = "0xBF02A0", VA = "0xBF02A0")]
		public AttackStats()
		{
		}
	}
	[Token(Token = "0x200025C")]
	[CreateAssetMenu(fileName = "Defense Stats", menuName = "Human/Defense Stats", order = 0)]
	public class DefenseStats : ScriptableObject
	{
		[Token(Token = "0x4000DF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FloatVariable damageReduction;

		[Token(Token = "0x6000FF2")]
		[Address(RVA = "0xBF02A8", Offset = "0xBF02A8", VA = "0xBF02A8")]
		public DefenseStats()
		{
		}
	}
	[Token(Token = "0x200025D")]
	[CreateAssetMenu(fileName = "Equipment", menuName = "Human/Equipment", order = 0)]
	public class Equipment : ScriptableObject
	{
		[Token(Token = "0x4000DF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The items of this equipment set")]
		public List<EquipmentItem> items;

		[Token(Token = "0x4000DF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Keep empty to allow all jobs")]
		public List<Job> applicableJobs;

		[Token(Token = "0x4000DFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Keep empty to allow all tech levels")]
		public List<TechLevel> applicableTechLevel;

		[Token(Token = "0x4000DFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Keep empty to allow all civilizations")]
		public List<TownType> applicableCivilizations;

		[Token(Token = "0x4000DFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Keep empty to allow all activities")]
		public List<Activity> applicableActivities;

		[Token(Token = "0x4000DFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Gathering only")]
		[Tooltip("Keep empty to allow all resource types")]
		public List<ResourceType> applicableResourceTypes;

		[Token(Token = "0x6000FF3")]
		[Address(RVA = "0xBF02B0", Offset = "0xBF02B0", VA = "0xBF02B0")]
		public Equipment()
		{
		}
	}
	[Token(Token = "0x200025E")]
	[CreateAssetMenu(fileName = "Equipment Item", menuName = "Human/Equipment Item", order = 0)]
	public class EquipmentItem : ScriptableObject
	{
		[Token(Token = "0x4000DFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject prefab;

		[Token(Token = "0x4000DFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<EquipmentSlot> slots;

		[Token(Token = "0x4000E00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Stats")]
		public AttackStats attackStats;

		[Token(Token = "0x4000E01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public DefenseStats defenseStats;

		[Token(Token = "0x4000E02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Audio Configuration")]
		public AudioSet meleeAttackSound;

		[Token(Token = "0x4000E03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AudioSet meleeMissSound;

		[Token(Token = "0x4000E04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public AudioSet aimSound;

		[Token(Token = "0x4000E05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AudioSet shootSound;

		[Token(Token = "0x4000E06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("Animation Parameters")]
		public AnimationTrigger meleeAttackTrigger;

		[Token(Token = "0x4000E07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public AnimationTrigger shootTrigger;

		[Token(Token = "0x4000E08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Header("Audio Modifiers - Body only")]
		public HumanAudioCollection overrideVoiceCollection;

		[Token(Token = "0x4000E09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public FootstepAudioCollection overrideFootstepsCollection;

		[Token(Token = "0x170001CD")]
		public float RangedMaxRange
		{
			[Token(Token = "0x6000FF6")]
			[Address(RVA = "0xBF04EC", Offset = "0xBF04EC", VA = "0xBF04EC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001CE")]
		public int MeleeDamage
		{
			[Token(Token = "0x6000FF7")]
			[Address(RVA = "0xBF05AC", Offset = "0xBF05AC", VA = "0xBF05AC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001CF")]
		public float MeleeAttackDelay
		{
			[Token(Token = "0x6000FF8")]
			[Address(RVA = "0xBF06BC", Offset = "0xBF06BC", VA = "0xBF06BC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001D0")]
		public float RangedAttackDelay
		{
			[Token(Token = "0x6000FF9")]
			[Address(RVA = "0xBF077C", Offset = "0xBF077C", VA = "0xBF077C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000FF4")]
		[Address(RVA = "0xBF02B8", Offset = "0xBF02B8", VA = "0xBF02B8")]
		public bool RangedPossible(out float maxRange)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FF5")]
		[Address(RVA = "0xBF0370", Offset = "0xBF0370", VA = "0xBF0370")]
		public bool IsInRange(Vector3 currentPosition, Vector3 targetPosition, out bool rangedWeapon, out bool tooClose, out float maxRange)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FFA")]
		[Address(RVA = "0xBF083C", Offset = "0xBF083C", VA = "0xBF083C")]
		public EquipmentItem()
		{
		}
	}
	[Token(Token = "0x200025F")]
	[CreateAssetMenu(fileName = "Equipment Selector", menuName = "Human/Equipment Selector", order = 0)]
	public class EquipmentSelector : ScriptableObject
	{
		[Token(Token = "0x4000E0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<Equipment> equipments;

		[Token(Token = "0x6000FFB")]
		[Address(RVA = "0xBF0844", Offset = "0xBF0844", VA = "0xBF0844")]
		public bool FindEquipment(out Equipment equipmentFound, TownType civilization, Job job, TechLevel techLevel, [Optional] Activity? activity, [Optional] ResourceType? gatheringResource)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FFC")]
		[Address(RVA = "0xBF0FD0", Offset = "0xBF0FD0", VA = "0xBF0FD0")]
		public EquipmentSelector()
		{
		}
	}
	[Token(Token = "0x2000260")]
	[CreateAssetMenu(fileName = "Equipment Slot", menuName = "Human/Equipment Slot", order = 0)]
	public class EquipmentSlot : ScriptableObject
	{
		[Token(Token = "0x6000FFD")]
		[Address(RVA = "0xBF0FD8", Offset = "0xBF0FD8", VA = "0xBF0FD8")]
		public EquipmentSlot()
		{
		}
	}
}
namespace Extensions
{
	[Token(Token = "0x2000261")]
	public static class Vector3Extensions
	{
		[Token(Token = "0x6000FFE")]
		[Address(RVA = "0xBF0FE0", Offset = "0xBF0FE0", VA = "0xBF0FE0")]
		public static float SqrDistance(this Vector3 first, Vector3 second)
		{
			return default(float);
		}

		[Token(Token = "0x6000FFF")]
		[Address(RVA = "0xBF04BC", Offset = "0xBF04BC", VA = "0xBF04BC")]
		public static bool IsCloseTo(this Vector3 first, Vector3 second, float closeDistance)
		{
			return default(bool);
		}

		[Token(Token = "0x6001000")]
		[Address(RVA = "0xBF1004", Offset = "0xBF1004", VA = "0xBF1004")]
		public static bool Approx(Vector3 first, Vector3 second, float closeDistance)
		{
			return default(bool);
		}

		[Token(Token = "0x6001001")]
		[Address(RVA = "0xBF1034", Offset = "0xBF1034", VA = "0xBF1034")]
		public static Vector3 MidPoint(this Vector3 first, Vector3 second)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001002")]
		[Address(RVA = "0xBF1054", Offset = "0xBF1054", VA = "0xBF1054")]
		public static Vector3 Center(Vector3 vec1, Vector3 vec2)
		{
			return default(Vector3);
		}
	}
}
namespace Disasters
{
	[Token(Token = "0x2000262")]
	public class AlienContact : Disaster
	{
		[Token(Token = "0x4000E0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public UFO ufoPrefab;

		[Token(Token = "0x4000E0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Vector3 ufoOrigin;

		[Token(Token = "0x4000E0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private UFO ufoInstance;

		[Token(Token = "0x6001003")]
		[Address(RVA = "0xBF1074", Offset = "0xBF1074", VA = "0xBF1074", Slot = "4")]
		public override bool IsPossible()
		{
			return default(bool);
		}

		[Token(Token = "0x6001004")]
		[Address(RVA = "0xBF10C8", Offset = "0xBF10C8", VA = "0xBF10C8", Slot = "5")]
		public override Vector3? StartDisaster(Vector3[] previousDisasterPositions, float minDistanceFromPreviousDisasters)
		{
			return null;
		}

		[Token(Token = "0x6001005")]
		[Address(RVA = "0xBF14A8", Offset = "0xBF14A8", VA = "0xBF14A8")]
		private void Init(Vector3 bestPosition)
		{
		}

		[Token(Token = "0x6001006")]
		[Address(RVA = "0xBF179C", Offset = "0xBF179C", VA = "0xBF179C", Slot = "6")]
		public override void EndDisaster()
		{
		}

		[Token(Token = "0x6001007")]
		[Address(RVA = "0xBF183C", Offset = "0xBF183C", VA = "0xBF183C", Slot = "7")]
		public override void NotifyEndOfSubDisaster(GameObject emitter)
		{
		}

		[Token(Token = "0x6001008")]
		[Address(RVA = "0xBF1848", Offset = "0xBF1848", VA = "0xBF1848")]
		public AlienContact()
		{
		}
	}
	[Token(Token = "0x2000263")]
	public abstract class Disaster : MonoBehaviour
	{
		[Token(Token = "0x2000264")]
		[CompilerGenerated]
		private sealed class <EndAfterDuration>d__12 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000E18")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000E19")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000E1A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float time;

			[Token(Token = "0x4000E1B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Disaster <>4__this;

			[Token(Token = "0x170001D1")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001015")]
				[Address(RVA = "0xBF1CE0", Offset = "0xBF1CE0", VA = "0xBF1CE0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001D2")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001017")]
				[Address(RVA = "0xBF1D28", Offset = "0xBF1D28", VA = "0xBF1D28", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001012")]
			[Address(RVA = "0xBF1B80", Offset = "0xBF1B80", VA = "0xBF1B80")]
			[DebuggerHidden]
			public <EndAfterDuration>d__12(int <>1__state)
			{
			}

			[Token(Token = "0x6001013")]
			[Address(RVA = "0xBF1C1C", Offset = "0xBF1C1C", VA = "0xBF1C1C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001014")]
			[Address(RVA = "0xBF1C20", Offset = "0xBF1C20", VA = "0xBF1C20", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001016")]
			[Address(RVA = "0xBF1CE8", Offset = "0xBF1CE8", VA = "0xBF1CE8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000E0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected static readonly Collider[] OverlapResults;

		[Token(Token = "0x4000E0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public DisasterType disasterType;

		[Token(Token = "0x4000E10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Frequency frequency;

		[Token(Token = "0x4000E11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float radius;

		[Token(Token = "0x4000E12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject symbol;

		[Token(Token = "0x4000E13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AudioSet soundEffect;

		[Token(Token = "0x4000E14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[FormerlySerializedAs("sfx")]
		public GameObject visualEffect;

		[Token(Token = "0x4000E15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float duration;

		[Token(Token = "0x4000E16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		protected static LayerMask Mobiles;

		[Token(Token = "0x4000E17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		protected static LayerMask TreesAndBuildings;

		[Token(Token = "0x6001009")]
		[Address(RVA = "0xBF18E4", Offset = "0xBF18E4", VA = "0xBF18E4")]
		private void Awake()
		{
		}

		[Token(Token = "0x600100A")]
		[Address(RVA = "0xBF1408", Offset = "0xBF1408", VA = "0xBF1408")]
		protected static float GetShortedDistanceFromLastPreviousDisasters(Vector3 position, Vector3[] previousDisasterPositions)
		{
			return default(float);
		}

		[Token(Token = "0x600100B")]
		[Address(RVA = "0xBF1718", Offset = "0xBF1718", VA = "0xBF1718")]
		[IteratorStateMachine(typeof(<EndAfterDuration>d__12))]
		protected IEnumerator EndAfterDuration(float time)
		{
			return null;
		}

		[Token(Token = "0x600100C")]
		public abstract bool IsPossible();

		[Token(Token = "0x600100D")]
		public abstract Vector3? StartDisaster(Vector3[] previousDisasterPositions, float minDistanceFromPreviousDisasters);

		[Token(Token = "0x600100E")]
		public abstract void EndDisaster();

		[Token(Token = "0x600100F")]
		public abstract void NotifyEndOfSubDisaster(GameObject emitter);

		[Token(Token = "0x6001010")]
		[Address(RVA = "0xBF18C8", Offset = "0xBF18C8", VA = "0xBF18C8")]
		protected Disaster()
		{
		}
	}
	[Token(Token = "0x2000265")]
	public class DisasterManager : MonoBehaviour
	{
		[Token(Token = "0x4000E1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public DisasterManagerConfiguration configuration;

		[Token(Token = "0x4000E1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<Disaster> disastersPool;

		[Token(Token = "0x4000E1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float lastDisasterTime;

		[Token(Token = "0x4000E1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3[] previousDisastersPositions;

		[Token(Token = "0x4000E20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private DisasterType[] previousDisastersTypes;

		[Token(Token = "0x6001018")]
		[Address(RVA = "0xBF1D30", Offset = "0xBF1D30", VA = "0xBF1D30")]
		private void Start()
		{
		}

		[Token(Token = "0x6001019")]
		[Address(RVA = "0xBF21D4", Offset = "0xBF21D4", VA = "0xBF21D4")]
		private void Update()
		{
		}

		[Token(Token = "0x600101A")]
		[Address(RVA = "0xBF2408", Offset = "0xBF2408", VA = "0xBF2408")]
		[ContextMenu("Disaster routine")]
		private void DisasterRoutine()
		{
		}

		[Token(Token = "0x600101B")]
		[Address(RVA = "0xBF2DDC", Offset = "0xBF2DDC", VA = "0xBF2DDC")]
		private void SaveInMemory(DisasterType disasterType, Vector3 position)
		{
		}

		[Token(Token = "0x600101C")]
		[Address(RVA = "0xBF2B98", Offset = "0xBF2B98", VA = "0xBF2B98")]
		private bool StartDisaster(Disaster disaster, bool ignorePreConditions = false)
		{
			return default(bool);
		}

		[Token(Token = "0x600101D")]
		[Address(RVA = "0xBF334C", Offset = "0xBF334C", VA = "0xBF334C")]
		private static void ReduceSpeedIfNeeded()
		{
		}

		[Token(Token = "0x600101E")]
		[Address(RVA = "0xBF2A78", Offset = "0xBF2A78", VA = "0xBF2A78")]
		[ContextMenu("Start Alien Contact")]
		private void StartAlienContact()
		{
		}

		[Token(Token = "0x600101F")]
		[Address(RVA = "0xBF33B8", Offset = "0xBF33B8", VA = "0xBF33B8")]
		[ContextMenu("Start Fire")]
		private void StartFire()
		{
		}

		[Token(Token = "0x6001020")]
		[Address(RVA = "0xBF34D0", Offset = "0xBF34D0", VA = "0xBF34D0")]
		[ContextMenu("Start Plague")]
		private void StartPlague()
		{
		}

		[Token(Token = "0x6001021")]
		[Address(RVA = "0xBF35E8", Offset = "0xBF35E8", VA = "0xBF35E8")]
		public DisasterManager()
		{
		}
	}
	[Token(Token = "0x2000268")]
	[CreateAssetMenu(menuName = "Disasters/Disaster Manager Configuration")]
	public class DisasterManagerConfiguration : ScriptableObject
	{
		[Token(Token = "0x4000E28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int minTownAmount;

		[Token(Token = "0x4000E29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int memorySize;

		[Token(Token = "0x4000E2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float disasterCheckDelay;

		[Token(Token = "0x4000E2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float minDistanceFromLastDisasterPosition;

		[Token(Token = "0x4000E2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float gracePeriod;

		[Token(Token = "0x4000E2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public List<Disaster> disastersPrefabs;

		[Token(Token = "0x600102B")]
		[Address(RVA = "0xBF3744", Offset = "0xBF3744", VA = "0xBF3744")]
		public DisasterManagerConfiguration()
		{
		}
	}
	[Token(Token = "0x2000269")]
	public class Plague : Disaster
	{
		[Token(Token = "0x200026A")]
		[CompilerGenerated]
		private sealed class <ApplyEffect>d__3 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000E2E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000E2F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000E30")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Collider[] surroundingObjects;

			[Token(Token = "0x4000E31")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Plague <>4__this;

			[Token(Token = "0x4000E32")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public int resultCount;

			[Token(Token = "0x4000E33")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private int <done>5__2;

			[Token(Token = "0x4000E34")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int <index>5__3;

			[Token(Token = "0x170001D3")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001036")]
				[Address(RVA = "0xBF40FC", Offset = "0xBF40FC", VA = "0xBF40FC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001D4")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001038")]
				[Address(RVA = "0xBF4144", Offset = "0xBF4144", VA = "0xBF4144", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001033")]
			[Address(RVA = "0xBF3D9C", Offset = "0xBF3D9C", VA = "0xBF3D9C")]
			[DebuggerHidden]
			public <ApplyEffect>d__3(int <>1__state)
			{
			}

			[Token(Token = "0x6001034")]
			[Address(RVA = "0xBF3E90", Offset = "0xBF3E90", VA = "0xBF3E90", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001035")]
			[Address(RVA = "0xBF3E94", Offset = "0xBF3E94", VA = "0xBF3E94", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001037")]
			[Address(RVA = "0xBF4104", Offset = "0xBF4104", VA = "0xBF4104", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x600102C")]
		[Address(RVA = "0xBF3768", Offset = "0xBF3768", VA = "0xBF3768", Slot = "4")]
		public override bool IsPossible()
		{
			return default(bool);
		}

		[Token(Token = "0x600102D")]
		[Address(RVA = "0xBF37BC", Offset = "0xBF37BC", VA = "0xBF37BC", Slot = "5")]
		public override Vector3? StartDisaster(Vector3[] previousDisasterPositions, float minDistanceFromPreviousDisasters)
		{
			return null;
		}

		[Token(Token = "0x600102E")]
		[Address(RVA = "0xBF3AFC", Offset = "0xBF3AFC", VA = "0xBF3AFC")]
		private void Init(Vector3 bestPosition)
		{
		}

		[Token(Token = "0x600102F")]
		[Address(RVA = "0xBF3D04", Offset = "0xBF3D04", VA = "0xBF3D04")]
		[IteratorStateMachine(typeof(<ApplyEffect>d__3))]
		private IEnumerator ApplyEffect(Collider[] surroundingObjects, int resultCount)
		{
			return null;
		}

		[Token(Token = "0x6001030")]
		[Address(RVA = "0xBF3DC4", Offset = "0xBF3DC4", VA = "0xBF3DC4", Slot = "6")]
		public override void EndDisaster()
		{
		}

		[Token(Token = "0x6001031")]
		[Address(RVA = "0xBF3DE4", Offset = "0xBF3DE4", VA = "0xBF3DE4", Slot = "7")]
		public override void NotifyEndOfSubDisaster(GameObject emitter)
		{
		}

		[Token(Token = "0x6001032")]
		[Address(RVA = "0xBF3E24", Offset = "0xBF3E24", VA = "0xBF3E24")]
		public Plague()
		{
		}
	}
	[Token(Token = "0x200026B")]
	public class WildFire : Disaster
	{
		[Token(Token = "0x200026C")]
		[CompilerGenerated]
		private sealed class <ApplyEffect>d__5 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000E35")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000E36")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000E37")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Collider[] surroundingObjects;

			[Token(Token = "0x4000E38")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public WildFire <>4__this;

			[Token(Token = "0x4000E39")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public int resultCount;

			[Token(Token = "0x4000E3A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private int <done>5__2;

			[Token(Token = "0x4000E3B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int <index>5__3;

			[Token(Token = "0x170001D5")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001043")]
				[Address(RVA = "0xBF4C04", Offset = "0xBF4C04", VA = "0xBF4C04", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001D6")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001045")]
				[Address(RVA = "0xBF4C4C", Offset = "0xBF4C4C", VA = "0xBF4C4C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001040")]
			[Address(RVA = "0xBF4904", Offset = "0xBF4904", VA = "0xBF4904")]
			[DebuggerHidden]
			public <ApplyEffect>d__5(int <>1__state)
			{
			}

			[Token(Token = "0x6001041")]
			[Address(RVA = "0xBF4998", Offset = "0xBF4998", VA = "0xBF4998", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001042")]
			[Address(RVA = "0xBF499C", Offset = "0xBF499C", VA = "0xBF499C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001044")]
			[Address(RVA = "0xBF4C0C", Offset = "0xBF4C0C", VA = "0xBF4C0C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x6001039")]
		[Address(RVA = "0xBF414C", Offset = "0xBF414C", VA = "0xBF414C", Slot = "4")]
		public override bool IsPossible()
		{
			return default(bool);
		}

		[Token(Token = "0x600103A")]
		[Address(RVA = "0xBF41A0", Offset = "0xBF41A0", VA = "0xBF41A0", Slot = "5")]
		public override Vector3? StartDisaster(Vector3[] previousDisasterPositions, float minDistanceFromPreviousDisasters)
		{
			return null;
		}

		[Token(Token = "0x600103B")]
		[Address(RVA = "0xBF4604", Offset = "0xBF4604", VA = "0xBF4604")]
		private void Init(Vector3 bestPosition)
		{
		}

		[Token(Token = "0x600103C")]
		[Address(RVA = "0xBF48A4", Offset = "0xBF48A4", VA = "0xBF48A4", Slot = "6")]
		public override void EndDisaster()
		{
		}

		[Token(Token = "0x600103D")]
		[Address(RVA = "0xBF48C4", Offset = "0xBF48C4", VA = "0xBF48C4", Slot = "7")]
		public override void NotifyEndOfSubDisaster(GameObject emitter)
		{
		}

		[Token(Token = "0x600103E")]
		[Address(RVA = "0xBF480C", Offset = "0xBF480C", VA = "0xBF480C")]
		[IteratorStateMachine(typeof(<ApplyEffect>d__5))]
		private IEnumerator ApplyEffect(Collider[] surroundingObjects, int resultCount)
		{
			return null;
		}

		[Token(Token = "0x600103F")]
		[Address(RVA = "0xBF492C", Offset = "0xBF492C", VA = "0xBF492C")]
		public WildFire()
		{
		}
	}
}
namespace Deisim
{
	[Token(Token = "0x200026D")]
	public interface IBeforeExitAction
	{
		[Token(Token = "0x6001046")]
		void ExecuteBeforeQuit();
	}
	[Token(Token = "0x200026E")]
	internal interface IBurnable
	{
		[Token(Token = "0x170001D7")]
		bool CanBeIgnited
		{
			[Token(Token = "0x6001049")]
			get;
		}

		[Token(Token = "0x6001047")]
		void Burn();

		[Token(Token = "0x6001048")]
		void Extinguish(bool crowd = false);
	}
	[Token(Token = "0x200026F")]
	public interface ICapturable
	{
		[Token(Token = "0x600104A")]
		void Captured();

		[Token(Token = "0x600104B")]
		Vector3 StartCapture();

		[Token(Token = "0x600104C")]
		void Free();

		[Token(Token = "0x600104D")]
		Transform GetTransform();
	}
	[Token(Token = "0x2000270")]
	public interface IEatableByPlayer
	{
		[Token(Token = "0x600104E")]
		bool TryEatByPlayer();
	}
	[Token(Token = "0x2000271")]
	public interface IElectrocutable
	{
		[Token(Token = "0x600104F")]
		void Electrocute();
	}
	[Token(Token = "0x2000272")]
	public interface IGrabStateObserver
	{
		[Token(Token = "0x6001050")]
		void OnGrabStateChanged(GrabState newGrabState);
	}
	[Token(Token = "0x2000273")]
	public interface IHealable
	{
		[Token(Token = "0x6001051")]
		void Heal(bool crowd);
	}
	[Token(Token = "0x2000274")]
	public interface IHideShow
	{
		[Token(Token = "0x6001052")]
		void Hide();

		[Token(Token = "0x6001053")]
		void Show();
	}
	[Token(Token = "0x2000275")]
	public interface IKinematicObject
	{
		[Token(Token = "0x6001054")]
		bool IsOnValidGround();

		[Token(Token = "0x6001055")]
		bool CanPlaySound();

		[Token(Token = "0x6001056")]
		void OnGrab();

		[Token(Token = "0x6001057")]
		void OnGrounded();

		[Token(Token = "0x6001058")]
		bool ResetPositionOnGround();
	}
	[Token(Token = "0x2000276")]
	public interface IMiracleObserver
	{
		[Token(Token = "0x6001059")]
		void SeeMiracle(bool positive, Vector3 position, MiracleType miracleType);
	}
	[Token(Token = "0x2000277")]
	internal interface IPoisonable
	{
		[Token(Token = "0x600105A")]
		void StartDisease();
	}
	[Token(Token = "0x2000278")]
	public interface IRegenerable
	{
		[Token(Token = "0x600105B")]
		bool DoRegenerate();
	}
	[Token(Token = "0x2000279")]
	public interface ISwarmFood
	{
		[Token(Token = "0x600105C")]
		bool Eat();
	}
	[Token(Token = "0x200027A")]
	public interface ITooltipProvider
	{
		[Token(Token = "0x600105D")]
		TooltipDescription GetTooltip();
	}
	[Token(Token = "0x200027B")]
	public static class SaveManager
	{
		[Token(Token = "0x4000E3C")]
		private const string Extension = ".json";

		[Token(Token = "0x4000E3D")]
		private const string SaveFolder = "Saves";

		[Token(Token = "0x4000E3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly JsonSerializerSettings Settings;

		[Token(Token = "0x4000E3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Task<string> serializationTask;

		[Token(Token = "0x4000E40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly string DataPath;

		[Token(Token = "0x600105E")]
		[Address(RVA = "0xBF4C54", Offset = "0xBF4C54", VA = "0xBF4C54")]
		private static void Save(string saveName)
		{
		}

		[Token(Token = "0x600105F")]
		[Address(RVA = "0xBF4F70", Offset = "0xBF4F70", VA = "0xBF4F70")]
		private static bool Load(string saveName)
		{
			return default(bool);
		}

		[Token(Token = "0x6001060")]
		[Address(RVA = "0xBF50F8", Offset = "0xBF50F8", VA = "0xBF50F8")]
		private static Task<GameData> LoadGameData(string saveName)
		{
			return null;
		}

		[Token(Token = "0x6001061")]
		[Address(RVA = "0xBF5370", Offset = "0xBF5370", VA = "0xBF5370")]
		private static bool Exist(string saveName)
		{
			return default(bool);
		}

		[Token(Token = "0x6001062")]
		[Address(RVA = "0xBF4E5C", Offset = "0xBF4E5C", VA = "0xBF4E5C")]
		private static string GetSavePath(string saveName)
		{
			return null;
		}

		[Token(Token = "0x6001063")]
		[Address(RVA = "0xBF53CC", Offset = "0xBF53CC", VA = "0xBF53CC")]
		private static string GetSaveName(int saveSlot)
		{
			return null;
		}

		[Token(Token = "0x6001064")]
		[Address(RVA = "0xBF5450", Offset = "0xBF5450", VA = "0xBF5450")]
		public static void Save(int slot)
		{
		}

		[Token(Token = "0x6001065")]
		[Address(RVA = "0xBF54A8", Offset = "0xBF54A8", VA = "0xBF54A8")]
		public static bool Load(int slot)
		{
			return default(bool);
		}

		[Token(Token = "0x6001066")]
		[Address(RVA = "0xBF5500", Offset = "0xBF5500", VA = "0xBF5500")]
		public static Task<GameData> LoadGameData(int slot)
		{
			return null;
		}

		[Token(Token = "0x6001067")]
		[Address(RVA = "0xBF5558", Offset = "0xBF5558", VA = "0xBF5558")]
		public static bool Exist(int slot)
		{
			return default(bool);
		}
	}
}
namespace Deisim.UI
{
	[Token(Token = "0x200027E")]
	[AddComponentMenu("UI/Effects/Gradient")]
	public class Gradient : BaseMeshEffect
	{
		[Token(Token = "0x200027F")]
		public struct Matrix2X3
		{
			[Token(Token = "0x4000E47")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public float m00;

			[Token(Token = "0x4000E48")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public float m01;

			[Token(Token = "0x4000E49")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public float m02;

			[Token(Token = "0x4000E4A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public float m10;

			[Token(Token = "0x4000E4B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float m11;

			[Token(Token = "0x4000E4C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float m12;

			[Token(Token = "0x6001071")]
			[Address(RVA = "0xBF5DFC", Offset = "0xBF5DFC", VA = "0xBF5DFC")]
			public Matrix2X3(float m00, float m01, float m02, float m10, float m11, float m12)
			{
			}

			[Token(Token = "0x6001072")]
			[Address(RVA = "0xBF5DCC", Offset = "0xBF5DCC", VA = "0xBF5DCC")]
			public static Vector2 operator *(Matrix2X3 m, Vector2 v)
			{
				return default(Vector2);
			}
		}

		[Token(Token = "0x4000E44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color Color1;

		[Token(Token = "0x4000E45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Color Color2;

		[Token(Token = "0x4000E46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Range(-180f, 180f)]
		public float Angle;

		[Token(Token = "0x600106D")]
		[Address(RVA = "0xBF583C", Offset = "0xBF583C", VA = "0xBF583C", Slot = "20")]
		public override void ModifyMesh(VertexHelper vh)
		{
		}

		[Token(Token = "0x600106E")]
		[Address(RVA = "0xBF5D18", Offset = "0xBF5D18", VA = "0xBF5D18")]
		private static Matrix2X3 LocalPositionMatrix(Rect rect, Vector2 dir)
		{
			return default(Matrix2X3);
		}

		[Token(Token = "0x600106F")]
		[Address(RVA = "0xBF5CF0", Offset = "0xBF5CF0", VA = "0xBF5CF0")]
		private static Vector2 RotationDir(float angle)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001070")]
		[Address(RVA = "0xBF5E0C", Offset = "0xBF5E0C", VA = "0xBF5E0C")]
		public Gradient()
		{
		}
	}
}
namespace Deisim.Structs
{
	[Token(Token = "0x2000280")]
	public struct DeisimTileData
	{
		[Token(Token = "0x4000E4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Position Position;

		[Token(Token = "0x4000E4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool TerrainFound;

		[Token(Token = "0x4000E4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public TerrainType TerrainType;

		[Token(Token = "0x4000E50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool AnimalFound;

		[Token(Token = "0x4000E51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AnimalType AnimalType;

		[Token(Token = "0x4000E52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool BuildingFound;

		[Token(Token = "0x4000E53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BuildingType BuildingType;

		[Token(Token = "0x4000E54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool ConcreteGround;
	}
	[Token(Token = "0x2000281")]
	public struct ResourceData
	{
		[Token(Token = "0x4000E55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ResourceType ResourceType;

		[Token(Token = "0x4000E56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public bool Regenerate;

		[Token(Token = "0x4000E57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float LastRegenerationTime;

		[Token(Token = "0x4000E58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float RegenerationDelay;

		[Token(Token = "0x4000E59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int Quantity;

		[Token(Token = "0x4000E5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int MaxQuantity;
	}
}
namespace Deisim.Map
{
	[Token(Token = "0x2000282")]
	public class ComboChecker
	{
		[Token(Token = "0x4000E5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Dictionary<string, ComboName> Combos;

		[Token(Token = "0x6001073")]
		[Address(RVA = "0xBF5E24", Offset = "0xBF5E24", VA = "0xBF5E24")]
		public ComboChecker()
		{
		}

		[Token(Token = "0x6001074")]
		[Address(RVA = "0xBF5FC4", Offset = "0xBF5FC4", VA = "0xBF5FC4")]
		public List<ComboName> CheckCombos(Dictionary<Position, TerrainType> data, Position position)
		{
			return null;
		}

		[Token(Token = "0x6001075")]
		[Address(RVA = "0xBF64D0", Offset = "0xBF64D0", VA = "0xBF64D0")]
		private static string FindRadius(IDictionary<Position, TerrainType> data, Position position, int distance, Direction startingDirection)
		{
			return null;
		}

		[Token(Token = "0x6001076")]
		[Address(RVA = "0xBF5EDC", Offset = "0xBF5EDC", VA = "0xBF5EDC")]
		private void AddCombo(ComboName comboName)
		{
		}

		[Token(Token = "0x6001077")]
		[Address(RVA = "0xBF8D8C", Offset = "0xBF8D8C", VA = "0xBF8D8C")]
		private void AddPermutationsToCombos(ComboName comboName, List<TerrainType> terrainTypesList)
		{
		}

		[Token(Token = "0x6001078")]
		[Address(RVA = "0xBF8CBC", Offset = "0xBF8CBC", VA = "0xBF8CBC")]
		private static void AddToList(ICollection<TerrainType> terrainTypesList, TerrainType type, int amount)
		{
		}

		[Token(Token = "0x6001079")]
		[Address(RVA = "0xBF63F0", Offset = "0xBF63F0", VA = "0xBF63F0")]
		private static string TerrainEnumToString(TerrainType terrainType)
		{
			return null;
		}
	}
	[Token(Token = "0x2000283")]
	public class Map
	{
		[Token(Token = "0x4000E5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Dictionary<Position, TerrainType> Data;

		[Token(Token = "0x4000E5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Dictionary<Position, BuildingType> BuildingData;

		[Token(Token = "0x4000E5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Dictionary<Position, AnimalType> AnimalData;

		[Token(Token = "0x4000E5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Dictionary<Position, int> TerritoryData;

		[Token(Token = "0x4000E60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Dictionary<Position, GameObject> TerrainGameObjects;

		[Token(Token = "0x4000E61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Dictionary<Position, GameObject> BuildingGameObjects;

		[Token(Token = "0x4000E62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Dictionary<Position, GameObject> AnimalGameObjects;

		[Token(Token = "0x4000E63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly MapManager manager;

		[Token(Token = "0x600107A")]
		[Address(RVA = "0xBF90C8", Offset = "0xBF90C8", VA = "0xBF90C8")]
		public Map(MapManager manager)
		{
		}

		[Token(Token = "0x600107B")]
		[Address(RVA = "0xBF931C", Offset = "0xBF931C", VA = "0xBF931C")]
		public void Init()
		{
		}

		[Token(Token = "0x600107C")]
		[Address(RVA = "0xBF93FC", Offset = "0xBF93FC", VA = "0xBF93FC")]
		public bool IsTerrainOfType(Position position, TerrainType typeToSearch)
		{
			return default(bool);
		}

		[Token(Token = "0x600107D")]
		[Address(RVA = "0xBF948C", Offset = "0xBF948C", VA = "0xBF948C")]
		public bool IsTerrainOfTypes(Position position, TerrainType[] typesToSearch)
		{
			return default(bool);
		}

		[Token(Token = "0x600107E")]
		[Address(RVA = "0xBF9528", Offset = "0xBF9528", VA = "0xBF9528")]
		public bool IsTerrainOfTypes(Position position, List<TerrainType> typesToSearch)
		{
			return default(bool);
		}

		[Token(Token = "0x600107F")]
		[Address(RVA = "0xBF96B0", Offset = "0xBF96B0", VA = "0xBF96B0")]
		public bool IsTerrainBuildt(Position position)
		{
			return default(bool);
		}

		[Token(Token = "0x6001080")]
		[Address(RVA = "0xBF9734", Offset = "0xBF9734", VA = "0xBF9734")]
		public bool IsTerrainBuiltAndOverTechLevel(Position position, TechLevel techLevel)
		{
			return default(bool);
		}

		[Token(Token = "0x6001081")]
		[Address(RVA = "0xBF984C", Offset = "0xBF984C", VA = "0xBF984C")]
		public bool IsTerrainBuildByType(Position position, BuildingType buildingType)
		{
			return default(bool);
		}

		[Token(Token = "0x6001082")]
		[Address(RVA = "0xBF98DC", Offset = "0xBF98DC", VA = "0xBF98DC")]
		public bool IsTownBuildt(Position position)
		{
			return default(bool);
		}

		[Token(Token = "0x6001083")]
		[Address(RVA = "0xBF9960", Offset = "0xBF9960", VA = "0xBF9960")]
		public void AddEmptyZone(Position position)
		{
		}

		[Token(Token = "0x6001084")]
		[Address(RVA = "0xBF9364", Offset = "0xBF9364", VA = "0xBF9364")]
		public void AddZone(Position position, TerrainType type)
		{
		}

		[Token(Token = "0x6001085")]
		[Address(RVA = "0xBF9D58", Offset = "0xBF9D58", VA = "0xBF9D58")]
		public bool AddBuilding(Position position, BuildingType type)
		{
			return default(bool);
		}

		[Token(Token = "0x6001086")]
		[Address(RVA = "0xBF9EF0", Offset = "0xBF9EF0", VA = "0xBF9EF0")]
		public bool RemoveBuilding(Position position, Addon addon)
		{
			return default(bool);
		}

		[Token(Token = "0x6001087")]
		[Address(RVA = "0xBFA0D4", Offset = "0xBFA0D4", VA = "0xBFA0D4")]
		public bool RemoveBuilding(Position position)
		{
			return default(bool);
		}

		[Token(Token = "0x6001088")]
		[Address(RVA = "0xBFA914", Offset = "0xBFA914", VA = "0xBFA914")]
		public void SwitchZone(Position position, TerrainType type)
		{
		}

		[Token(Token = "0x6001089")]
		[Address(RVA = "0xBF99E8", Offset = "0xBF99E8", VA = "0xBF99E8")]
		private void CheckBorders(Position position)
		{
		}

		[Token(Token = "0x600108A")]
		[Address(RVA = "0xBFA9A0", Offset = "0xBFA9A0", VA = "0xBFA9A0")]
		private void CheckBorder(Position position)
		{
		}

		[Token(Token = "0x600108B")]
		[Address(RVA = "0xBFAA30", Offset = "0xBFAA30", VA = "0xBFAA30")]
		internal void AddTerrainGameObject(GameObject gameObject, Position position)
		{
		}

		[Token(Token = "0x600108C")]
		[Address(RVA = "0xBFAAB8", Offset = "0xBFAAB8", VA = "0xBFAAB8")]
		internal void AddBuildingGameObject(GameObject gameObject, Position position)
		{
		}

		[Token(Token = "0x600108D")]
		[Address(RVA = "0xBFAB28", Offset = "0xBFAB28", VA = "0xBFAB28")]
		internal void AddAnimalGameObject(GameObject gameObject, Position position)
		{
		}

		[Token(Token = "0x600108E")]
		[Address(RVA = "0xBFA360", Offset = "0xBFA360", VA = "0xBFA360")]
		public void RefreshNeighbours(GameObject gameObject, Position position)
		{
		}

		[Token(Token = "0x600108F")]
		[Address(RVA = "0xBFABCC", Offset = "0xBFABCC", VA = "0xBFABCC")]
		internal GameObject RetrieveGameObject(Position position)
		{
			return null;
		}

		[Token(Token = "0x6001090")]
		[Address(RVA = "0xBFAC44", Offset = "0xBFAC44", VA = "0xBFAC44")]
		internal void RemoveGameObject(Position position)
		{
		}

		[Token(Token = "0x6001091")]
		[Address(RVA = "0xBFACAC", Offset = "0xBFACAC", VA = "0xBFACAC")]
		internal void RemoveAnimalIfNeeded(Position position, AnimalSpawner animalSpawner)
		{
		}

		[Token(Token = "0x6001092")]
		[Address(RVA = "0xBFAE00", Offset = "0xBFAE00", VA = "0xBFAE00")]
		internal void RemoveAnimal(Position position)
		{
		}

		[Token(Token = "0x6001093")]
		[Address(RVA = "0xBFAF08", Offset = "0xBFAF08", VA = "0xBFAF08")]
		internal GameObject RemoveAnimalFromDataOnly(Position position)
		{
			return null;
		}

		[Token(Token = "0x6001094")]
		[Address(RVA = "0xBFAFEC", Offset = "0xBFAFEC", VA = "0xBFAFEC")]
		public bool AddAnimal(Position position, AnimalType type)
		{
			return default(bool);
		}

		[Token(Token = "0x6001095")]
		[Address(RVA = "0xBFB098", Offset = "0xBFB098", VA = "0xBFB098")]
		public bool IsEmptyZone(Position position)
		{
			return default(bool);
		}

		[Token(Token = "0x6001096")]
		[Address(RVA = "0xBFB120", Offset = "0xBFB120", VA = "0xBFB120")]
		public bool IsAnimalPresent(Position position)
		{
			return default(bool);
		}

		[Token(Token = "0x6001097")]
		[Address(RVA = "0xBFA250", Offset = "0xBFA250", VA = "0xBFA250")]
		public void RefreshNeighbours(Addon addon)
		{
		}

		[Token(Token = "0x6001098")]
		[Address(RVA = "0xBFB198", Offset = "0xBFB198", VA = "0xBFB198")]
		public void RefreshNeighbours(Town town)
		{
		}
	}
}
namespace Cities
{
	[Token(Token = "0x2000284")]
	[CreateAssetMenu(menuName = "Cities/Addons Collection")]
	public class AddonCollection : ScriptableObject
	{
		[Token(Token = "0x4000E64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<Addon> addons;

		[Token(Token = "0x6001099")]
		[Address(RVA = "0xBFB2A8", Offset = "0xBFB2A8", VA = "0xBFB2A8")]
		public bool SelectAddonPrefab(BuildingType buildingType, TechLevel techLevel, out Addon prefab)
		{
			return default(bool);
		}

		[Token(Token = "0x600109A")]
		[Address(RVA = "0xBFB514", Offset = "0xBFB514", VA = "0xBFB514")]
		public AddonCollection()
		{
		}
	}
	[Token(Token = "0x2000285")]
	public class Altar : MonoBehaviour
	{
		[Token(Token = "0x4000E65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Values")]
		public float faith;

		[Token(Token = "0x4000E66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float happiness;

		[Token(Token = "0x4000E67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool resourceNeeded;

		[Token(Token = "0x4000E68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public ResourceType need;

		[Token(Token = "0x4000E69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Configuration")]
		public AltarConfiguration configuration;

		[Token(Token = "0x4000E6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform faithTarget;

		[Token(Token = "0x4000E6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform happinessTarget;

		[NonSerialized]
		[Token(Token = "0x4000E6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private GameObject faithColumn;

		[NonSerialized]
		[Token(Token = "0x4000E6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private GameObject faithColumnPrefab;

		[NonSerialized]
		[Token(Token = "0x4000E6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Transform faithColumnTransform;

		[NonSerialized]
		[Token(Token = "0x4000E6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private GameObject happinessColumn;

		[NonSerialized]
		[Token(Token = "0x4000E70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GameObject happinessColumnPrefab;

		[NonSerialized]
		[Token(Token = "0x4000E71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Transform happinessColumnTransform;

		[Token(Token = "0x600109B")]
		[Address(RVA = "0xBFB51C", Offset = "0xBFB51C", VA = "0xBFB51C")]
		public void RefreshFaithColumn(float faithValue)
		{
		}

		[Token(Token = "0x600109C")]
		[Address(RVA = "0xBFB7BC", Offset = "0xBFB7BC", VA = "0xBFB7BC")]
		public void RefreshHappinessColumn(float happinessValue)
		{
		}

		[Token(Token = "0x600109D")]
		[Address(RVA = "0xBFBA5C", Offset = "0xBFBA5C", VA = "0xBFBA5C")]
		public Altar()
		{
		}
	}
	[Token(Token = "0x2000286")]
	[CreateAssetMenu(fileName = "Altar Configuration", menuName = "Cities/Altar Configuration", order = 0)]
	public class AltarConfiguration : ScriptableObject
	{
		[Token(Token = "0x4000E72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float columnMinHeight;

		[Token(Token = "0x4000E73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float columnMaxHeight;

		[Token(Token = "0x4000E74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Faith")]
		public FloatVariable minFaith;

		[Token(Token = "0x4000E75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public FloatVariable maxFaith;

		[Token(Token = "0x4000E76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public FloatVariable mediumFaithThreshold;

		[Token(Token = "0x4000E77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public FloatVariable highFaithThreshold;

		[Token(Token = "0x4000E78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject lowFaithColumnPrefab;

		[Token(Token = "0x4000E79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject mediumFaithColumnPrefab;

		[Token(Token = "0x4000E7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public GameObject highFaithColumnPrefab;

		[Token(Token = "0x4000E7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("Happiness")]
		public FloatVariable minHappiness;

		[Token(Token = "0x4000E7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public FloatVariable maxHappiness;

		[Token(Token = "0x4000E7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public FloatVariable mediumHappinessThreshold;

		[Token(Token = "0x4000E7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public FloatVariable highHappinessThreshold;

		[Token(Token = "0x4000E7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public GameObject lowHappinessColumnPrefab;

		[Token(Token = "0x4000E80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public GameObject mediumHappinessColumnPrefab;

		[Token(Token = "0x4000E81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public GameObject highHappinessColumnPrefab;

		[Token(Token = "0x600109E")]
		[Address(RVA = "0xBFB76C", Offset = "0xBFB76C", VA = "0xBFB76C")]
		public GameObject GetFaithColumn(float value)
		{
			return null;
		}

		[Token(Token = "0x600109F")]
		[Address(RVA = "0xBFBA0C", Offset = "0xBFBA0C", VA = "0xBFBA0C")]
		public GameObject GetHappinessColumn(float value)
		{
			return null;
		}

		[Token(Token = "0x60010A0")]
		[Address(RVA = "0xBFBA64", Offset = "0xBFBA64", VA = "0xBFBA64")]
		public AltarConfiguration()
		{
		}
	}
	[Token(Token = "0x2000287")]
	[CreateAssetMenu(menuName = "Cities/City Configuration")]
	public class CityConfiguration : ScriptableObject
	{
		[Token(Token = "0x4000E82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Color defaultCityColor;

		[Token(Token = "0x4000E83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int workQueueSizeLimit;

		[Token(Token = "0x4000E84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public TechLevel minAltarTechLevel;

		[Token(Token = "0x4000E85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AudioSet upgradeCity;

		[Token(Token = "0x4000E86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject vfxFire;

		[Token(Token = "0x4000E87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject caravan;

		[Token(Token = "0x4000E88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Header("Timers and delays")]
		public float resourceRefreshDelay;

		[Token(Token = "0x4000E89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float workDispatchDelay;

		[Token(Token = "0x4000E8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float addonRefreshDelay;

		[Token(Token = "0x4000E8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float addonUpgradeDelay;

		[Token(Token = "0x4000E8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float reproductionDelay;

		[Token(Token = "0x4000E8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float colonizationDelay;

		[Token(Token = "0x4000E8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float tradeDelay;

		[Token(Token = "0x4000E8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Header("Distances")]
		public int maxAddonRadius;

		[Token(Token = "0x4000E90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public int urbanDistance;

		[Token(Token = "0x4000E91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float tradeDistance;

		[Token(Token = "0x4000E92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Header("Faith")]
		public FloatVariable minFaith;

		[Token(Token = "0x4000E93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public FloatVariable maxFaith;

		[Token(Token = "0x4000E94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public FloatVariable mediumFaithThreshold;

		[Token(Token = "0x4000E95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public FloatVariable highFaithThreshold;

		[Token(Token = "0x4000E96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Header("Happiness")]
		public FloatVariable minHappiness;

		[Token(Token = "0x4000E97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public FloatVariable maxHappiness;

		[Token(Token = "0x4000E98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Header("Population")]
		public int maxPopulation;

		[Token(Token = "0x4000E99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public int maxPopulationMobileVR;

		[Token(Token = "0x4000E9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public int maxPopulationLowEndMobileVR;

		[Token(Token = "0x4000E9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public int villagePopulationBonus;

		[Token(Token = "0x4000E9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public int urbanBlockPopulationBonus;

		[Token(Token = "0x60010A1")]
		[Address(RVA = "0xBFBA6C", Offset = "0xBFBA6C", VA = "0xBFBA6C")]
		public CityConfiguration()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000288")]
	public class ResourceImport
	{
		[Token(Token = "0x4000E9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ResourceType ResourceType;

		[Token(Token = "0x4000E9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool IsImported;

		[Token(Token = "0x60010A2")]
		[Address(RVA = "0xBFBA90", Offset = "0xBFBA90", VA = "0xBFBA90")]
		public ResourceImport(ResourceType resourceType, bool isImported)
		{
		}
	}
	[Token(Token = "0x2000289")]
	[CreateAssetMenu(menuName = "Cities/City Import Configuration")]
	public class CityImportConfiguration : ScriptableObject
	{
		[Token(Token = "0x4000E9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public List<ResourceImport> ResourcesToBeImported;

		[Token(Token = "0x60010A3")]
		[Address(RVA = "0xBFBAC0", Offset = "0xBFBAC0", VA = "0xBFBAC0")]
		public void FillImportList()
		{
		}

		[Token(Token = "0x60010A4")]
		[Address(RVA = "0xBFC02C", Offset = "0xBFC02C", VA = "0xBFC02C")]
		public bool IsTheResourceImported(ResourceType resourceType)
		{
			return default(bool);
		}

		[Token(Token = "0x60010A5")]
		[Address(RVA = "0xBFC198", Offset = "0xBFC198", VA = "0xBFC198")]
		public CityImportConfiguration()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200028A")]
	public class CityLevelUpconditions
	{
		[Token(Token = "0x4000EA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public TechLevel TechLevel;

		[Token(Token = "0x4000EA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LevelUpAgeConfiguration LevelUpAgeConfiguration;

		[Token(Token = "0x60010A6")]
		[Address(RVA = "0xBFC220", Offset = "0xBFC220", VA = "0xBFC220")]
		public CityLevelUpconditions()
		{
		}
	}
	[Token(Token = "0x200028B")]
	[CreateAssetMenu(menuName = "Cities/City Level Up Configuration")]
	public class CityLevelUpConfiguration : ScriptableObject
	{
		[Token(Token = "0x4000EA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public List<CityLevelUpconditions> CityLevelUpconditionsList;

		[Token(Token = "0x60010A7")]
		[Address(RVA = "0xBFC228", Offset = "0xBFC228", VA = "0xBFC228")]
		public void FillIn(TechLevel techLevel, Dictionary<ResourceType, int> maxStock, List<UpgradeCondition> upgradeConditions, out int baseMaxPopulation, out int levelUpWork, out bool levelUpPossible)
		{
		}

		[Token(Token = "0x60010A8")]
		[Address(RVA = "0xBFC5F0", Offset = "0xBFC5F0", VA = "0xBFC5F0")]
		public CityLevelUpConfiguration()
		{
		}
	}
	[Token(Token = "0x200028C")]
	public class FarmColor : MonoBehaviour
	{
		[Token(Token = "0x4000EA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ColorListVariable colorListVariable;

		[Token(Token = "0x4000EA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject renderParent;

		[Token(Token = "0x4000EA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<Renderer[]> renderers;

		[Token(Token = "0x4000EA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int ColorID;

		[Token(Token = "0x60010A9")]
		[Address(RVA = "0xBFC5F8", Offset = "0xBFC5F8", VA = "0xBFC5F8")]
		private void Start()
		{
		}

		[Token(Token = "0x60010AA")]
		[Address(RVA = "0xBFC928", Offset = "0xBFC928", VA = "0xBFC928")]
		public FarmColor()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200028D")]
	public class MaxStockConfiguration
	{
		[Token(Token = "0x4000EA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ResourceType ResourceType;

		[Token(Token = "0x4000EA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int MaxStock;

		[Token(Token = "0x4000EA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool isLevelUpCondition;

		[Token(Token = "0x60010AC")]
		[Address(RVA = "0xBFCA18", Offset = "0xBFCA18", VA = "0xBFCA18")]
		public MaxStockConfiguration()
		{
		}
	}
	[Token(Token = "0x200028E")]
	[CreateAssetMenu(menuName = "Cities/Level Up AgeConfiguration")]
	public class LevelUpAgeConfiguration : ScriptableObject
	{
		[Token(Token = "0x4000EAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public List<MaxStockConfiguration> MaxStocks;

		[Token(Token = "0x4000EAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int BaseMaxPopulation;

		[Token(Token = "0x4000EAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int LevelUpWork;

		[Token(Token = "0x4000EAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool LevelUpPossible;

		[Token(Token = "0x60010AD")]
		[Address(RVA = "0xBFCA20", Offset = "0xBFCA20", VA = "0xBFCA20")]
		public LevelUpAgeConfiguration()
		{
		}
	}
}
namespace Audio
{
	[Token(Token = "0x200028F")]
	public enum AmbienceType
	{
		[Token(Token = "0x4000EAF")]
		Grassland,
		[Token(Token = "0x4000EB0")]
		Water,
		[Token(Token = "0x4000EB1")]
		City,
		[Token(Token = "0x4000EB2")]
		Desert,
		[Token(Token = "0x4000EB3")]
		Snow,
		[Token(Token = "0x4000EB4")]
		Swamp,
		[Token(Token = "0x4000EB5")]
		Volcano,
		[Token(Token = "0x4000EB6")]
		Wildfire,
		[Token(Token = "0x4000EB7")]
		Factory,
		[Token(Token = "0x4000EB8")]
		SmallFire,
		[Token(Token = "0x4000EB9")]
		Futurist,
		[Token(Token = "0x4000EBA")]
		Campfire,
		[Token(Token = "0x4000EBB")]
		Maelstrom
	}
	[Token(Token = "0x2000290")]
	public class AmbientSoundManager : MonoBehaviour
	{
		[Token(Token = "0x4000EBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly List<RegisterAmbientArea> Areas;

		[Token(Token = "0x4000EBE")]
		private const int DistanceChecksPerFrame = 10;

		[Token(Token = "0x4000EBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int lastDistanceCheckIndex;

		[Token(Token = "0x4000EC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public VA_AudioSource campfire;

		[Token(Token = "0x4000EC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public VA_AudioSource city;

		[Token(Token = "0x4000EC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public VA_AudioSource desert;

		[Token(Token = "0x4000EC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public VA_AudioSource factory;

		[Token(Token = "0x4000EC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public VA_AudioSource futurist;

		[Token(Token = "0x4000EC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public VA_AudioSource grassland;

		[Token(Token = "0x4000EC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public VA_AudioSource maelstrom;

		[Token(Token = "0x4000EC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public VA_AudioSource smallFire;

		[Token(Token = "0x4000EC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public VA_AudioSource snow;

		[Token(Token = "0x4000EC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public VA_AudioSource swamp;

		[Token(Token = "0x4000ECA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public VA_AudioSource volcano;

		[Token(Token = "0x4000ECB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public VA_AudioSource water;

		[Token(Token = "0x4000ECC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public VA_AudioSource wildfire;

		[Token(Token = "0x4000ECD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float squaredCloseDistance;

		[Token(Token = "0x170001D8")]
		public static AmbientSoundManager Instance
		{
			[Token(Token = "0x60010AE")]
			[Address(RVA = "0xBFCA30", Offset = "0xBFCA30", VA = "0xBFCA30")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60010AF")]
			[Address(RVA = "0xBFCA88", Offset = "0xBFCA88", VA = "0xBFCA88")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60010B0")]
		[Address(RVA = "0xBFCAF0", Offset = "0xBFCAF0", VA = "0xBFCAF0")]
		private void Awake()
		{
		}

		[Token(Token = "0x60010B1")]
		[Address(RVA = "0xBFCD18", Offset = "0xBFCD18", VA = "0xBFCD18")]
		private void Update()
		{
		}

		[Token(Token = "0x60010B2")]
		[Address(RVA = "0xBFCF64", Offset = "0xBFCF64", VA = "0xBFCF64")]
		public static void AddAreaToUpdate(RegisterAmbientArea area)
		{
		}

		[Token(Token = "0x60010B3")]
		[Address(RVA = "0xBFD08C", Offset = "0xBFD08C", VA = "0xBFD08C")]
		public static void RemoveAreaToUpdate(RegisterAmbientArea area)
		{
		}

		[Token(Token = "0x60010B4")]
		[Address(RVA = "0xBFD114", Offset = "0xBFD114", VA = "0xBFD114")]
		public void Register(AmbienceType type, VA_Shape zone)
		{
		}

		[Token(Token = "0x60010B5")]
		[Address(RVA = "0xBFD414", Offset = "0xBFD414", VA = "0xBFD414")]
		public void UnRegister(AmbienceType type, VA_Shape zone)
		{
		}

		[Token(Token = "0x60010B6")]
		[Address(RVA = "0xBFD2A4", Offset = "0xBFD2A4", VA = "0xBFD2A4")]
		private static void Register(VA_AudioSource source, VA_Shape zone)
		{
		}

		[Token(Token = "0x60010B7")]
		[Address(RVA = "0xBFD5A4", Offset = "0xBFD5A4", VA = "0xBFD5A4")]
		private static void UnRegister(VA_AudioSource source, VA_Shape zone)
		{
		}

		[Token(Token = "0x60010B8")]
		[Address(RVA = "0xBFD6C0", Offset = "0xBFD6C0", VA = "0xBFD6C0")]
		public AmbientSoundManager()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000291")]
	public struct AudioClipDescriptor
	{
		[Token(Token = "0x4000ECE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AudioClip clip;

		[Token(Token = "0x4000ECF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[Range(0f, 1f)]
		public float volume;
	}
	[Token(Token = "0x2000292")]
	public class AudioManager : MonoBehaviour
	{
		[Token(Token = "0x2000293")]
		[CompilerGenerated]
		private sealed class <TransitionToDefaultSnapshot>d__11 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000ED7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000ED8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000ED9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public AudioClip clip;

			[Token(Token = "0x4000EDA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public AudioSourceConfiguration audioSourceConfiguration;

			[Token(Token = "0x4000EDB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public AudioManager <>4__this;

			[Token(Token = "0x4000EDC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <startTime>5__2;

			[Token(Token = "0x170001D9")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60010DA")]
				[Address(RVA = "0xBFFB18", Offset = "0xBFFB18", VA = "0xBFFB18", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001DA")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60010DC")]
				[Address(RVA = "0xBFFB60", Offset = "0xBFFB60", VA = "0xBFFB60", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60010D7")]
			[Address(RVA = "0xBFE844", Offset = "0xBFE844", VA = "0xBFE844")]
			[DebuggerHidden]
			public <TransitionToDefaultSnapshot>d__11(int <>1__state)
			{
			}

			[Token(Token = "0x60010D8")]
			[Address(RVA = "0xBFFA10", Offset = "0xBFFA10", VA = "0xBFFA10", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60010D9")]
			[Address(RVA = "0xBFFA14", Offset = "0xBFFA14", VA = "0xBFFA14", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60010DB")]
			[Address(RVA = "0xBFFB20", Offset = "0xBFFB20", VA = "0xBFFB20", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000294")]
		[CompilerGenerated]
		private sealed class <CrossFade>d__15 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000EDD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000EDE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000EDF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float crossFadeTime;

			[Token(Token = "0x4000EE0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public AudioSource oldSource;

			[Token(Token = "0x4000EE1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float maxVolume;

			[Token(Token = "0x4000EE2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public AudioSource newSource;

			[Token(Token = "0x4000EE3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private float <time>5__2;

			[Token(Token = "0x170001DB")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60010E0")]
				[Address(RVA = "0xBFFCB4", Offset = "0xBFFCB4", VA = "0xBFFCB4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001DC")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60010E2")]
				[Address(RVA = "0xBFFCFC", Offset = "0xBFFCFC", VA = "0xBFFCFC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60010DD")]
			[Address(RVA = "0xBFEF74", Offset = "0xBFEF74", VA = "0xBFEF74")]
			[DebuggerHidden]
			public <CrossFade>d__15(int <>1__state)
			{
			}

			[Token(Token = "0x60010DE")]
			[Address(RVA = "0xBFFB68", Offset = "0xBFFB68", VA = "0xBFFB68", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60010DF")]
			[Address(RVA = "0xBFFB6C", Offset = "0xBFFB6C", VA = "0xBFFB6C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60010E1")]
			[Address(RVA = "0xBFFCBC", Offset = "0xBFFCBC", VA = "0xBFFCBC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000295")]
		[CompilerGenerated]
		private sealed class <FadeIn>d__16 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000EE4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000EE5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000EE6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float fadeInDelay;

			[Token(Token = "0x4000EE7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public float duration;

			[Token(Token = "0x4000EE8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public AudioSource audioSource;

			[Token(Token = "0x4000EE9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float maxVolume;

			[Token(Token = "0x4000EEA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <time>5__2;

			[Token(Token = "0x170001DD")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60010E6")]
				[Address(RVA = "0xBFFE50", Offset = "0xBFFE50", VA = "0xBFFE50", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001DE")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60010E8")]
				[Address(RVA = "0xBFFE98", Offset = "0xBFFE98", VA = "0xBFFE98", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60010E3")]
			[Address(RVA = "0xBFF034", Offset = "0xBFF034", VA = "0xBFF034")]
			[DebuggerHidden]
			public <FadeIn>d__16(int <>1__state)
			{
			}

			[Token(Token = "0x60010E4")]
			[Address(RVA = "0xBFFD04", Offset = "0xBFFD04", VA = "0xBFFD04", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60010E5")]
			[Address(RVA = "0xBFFD08", Offset = "0xBFFD08", VA = "0xBFFD08", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60010E7")]
			[Address(RVA = "0xBFFE58", Offset = "0xBFFE58", VA = "0xBFFE58", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000296")]
		[CompilerGenerated]
		private sealed class <FadeOut>d__17 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000EEB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000EEC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000EED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public AudioSource audioSource;

			[Token(Token = "0x4000EEE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float duration;

			[Token(Token = "0x4000EEF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public bool destroy;

			[Token(Token = "0x4000EF0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <time>5__2;

			[Token(Token = "0x4000EF1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <startVol>5__3;

			[Token(Token = "0x170001DF")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60010EC")]
				[Address(RVA = "0xC00088", Offset = "0xC00088", VA = "0xC00088", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001E0")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60010EE")]
				[Address(RVA = "0xC000D0", Offset = "0xC000D0", VA = "0xC000D0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60010E9")]
			[Address(RVA = "0xBFF0F4", Offset = "0xBFF0F4", VA = "0xBFF0F4")]
			[DebuggerHidden]
			public <FadeOut>d__17(int <>1__state)
			{
			}

			[Token(Token = "0x60010EA")]
			[Address(RVA = "0xBFFEA0", Offset = "0xBFFEA0", VA = "0xBFFEA0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60010EB")]
			[Address(RVA = "0xBFFEA4", Offset = "0xBFFEA4", VA = "0xBFFEA4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60010ED")]
			[Address(RVA = "0xC00090", Offset = "0xC00090", VA = "0xC00090", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000297")]
		[CompilerGenerated]
		private sealed class <PoolAudioSourceCoroutine>d__21 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000EF2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000EF3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000EF4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float delay;

			[Token(Token = "0x4000EF5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public GameObject gameObject;

			[Token(Token = "0x170001E1")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60010F2")]
				[Address(RVA = "0xC002C4", Offset = "0xC002C4", VA = "0xC002C4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001E2")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60010F4")]
				[Address(RVA = "0xC0030C", Offset = "0xC0030C", VA = "0xC0030C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60010EF")]
			[Address(RVA = "0xBFF1A0", Offset = "0xBFF1A0", VA = "0xBFF1A0")]
			[DebuggerHidden]
			public <PoolAudioSourceCoroutine>d__21(int <>1__state)
			{
			}

			[Token(Token = "0x60010F0")]
			[Address(RVA = "0xC000D8", Offset = "0xC000D8", VA = "0xC000D8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60010F1")]
			[Address(RVA = "0xC000DC", Offset = "0xC000DC", VA = "0xC000DC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60010F3")]
			[Address(RVA = "0xC002CC", Offset = "0xC002CC", VA = "0xC002CC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000ED0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioManagerConfiguation configuration;

		[Token(Token = "0x4000ED1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static AudioManager instance;

		[Token(Token = "0x4000ED2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static float lastSoundDuplicateResetTime;

		[Token(Token = "0x4000ED3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly HashSet<AudioClip> RecentlyPlayedClips;

		[Token(Token = "0x4000ED4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Coroutine transitionToDefaultSnapshot;

		[Token(Token = "0x4000ED5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static List<GameObject> Pool;

		[Token(Token = "0x4000ED6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static Transform PoolParent;

		[Token(Token = "0x60010BA")]
		[Address(RVA = "0xBFD76C", Offset = "0xBFD76C", VA = "0xBFD76C")]
		private void Awake()
		{
		}

		[Token(Token = "0x60010BB")]
		[Address(RVA = "0xBFD8F4", Offset = "0xBFD8F4", VA = "0xBFD8F4")]
		public static AudioSource PlayAudioClipAsChildren(AudioSet audioSet, Transform parent, bool loop = false, float volume = 1f)
		{
			return null;
		}

		[Token(Token = "0x60010BC")]
		[Address(RVA = "0xBFE3B0", Offset = "0xBFE3B0", VA = "0xBFE3B0")]
		public static AudioSource PlayAudioClipAsChildren(VariableAudioSetSelector variableAudioSet, float value, Transform parent, bool loop = false)
		{
			return null;
		}

		[Token(Token = "0x60010BD")]
		[Address(RVA = "0xBFE23C", Offset = "0xBFE23C", VA = "0xBFE23C")]
		private void TransitionToSnapshot(AudioClip clip, AudioSourceConfiguration audioSourceConfiguration)
		{
		}

		[Token(Token = "0x60010BE")]
		[Address(RVA = "0xBFE7A0", Offset = "0xBFE7A0", VA = "0xBFE7A0")]
		[IteratorStateMachine(typeof(<TransitionToDefaultSnapshot>d__11))]
		private IEnumerator TransitionToDefaultSnapshot(AudioClip clip, AudioSourceConfiguration audioSourceConfiguration)
		{
			return null;
		}

		[Token(Token = "0x60010BF")]
		[Address(RVA = "0xBF2EDC", Offset = "0xBF2EDC", VA = "0xBF2EDC")]
		public static AudioClip PlayClipAtPoint(AudioSet audioSet, Vector3 position, float volume = 1f)
		{
			return null;
		}

		[Token(Token = "0x60010C0")]
		[Address(RVA = "0xBFE9C4", Offset = "0xBFE9C4", VA = "0xBFE9C4")]
		public static AudioClip PlayClipAtPoint(VariableAudioSetSelector variableAudioSet, float value, Vector3 position)
		{
			return null;
		}

		[Token(Token = "0x60010C1")]
		[Address(RVA = "0xBFE154", Offset = "0xBFE154", VA = "0xBFE154")]
		public static void ConfigureAudioSource(AudioSource audioSource, AudioSourceConfiguration audioSourceConfiguration)
		{
		}

		[Token(Token = "0x60010C2")]
		[Address(RVA = "0xBFEECC", Offset = "0xBFEECC", VA = "0xBFEECC")]
		[IteratorStateMachine(typeof(<CrossFade>d__15))]
		public static IEnumerator CrossFade(AudioSource oldSource, AudioSource newSource, float crossFadeTime, float maxVolume = 1f)
		{
			return null;
		}

		[Token(Token = "0x60010C3")]
		[Address(RVA = "0xBFEF9C", Offset = "0xBFEF9C", VA = "0xBFEF9C")]
		[IteratorStateMachine(typeof(<FadeIn>d__16))]
		public static IEnumerator FadeIn(AudioSource audioSource, float duration, float maxVolume = 1f, float fadeInDelay = 0f)
		{
			return null;
		}

		[Token(Token = "0x60010C4")]
		[Address(RVA = "0xBFF05C", Offset = "0xBFF05C", VA = "0xBFF05C")]
		[IteratorStateMachine(typeof(<FadeOut>d__17))]
		public static IEnumerator FadeOut(AudioSource audioSource, float duration, bool destroy = true)
		{
			return null;
		}

		[Token(Token = "0x60010C5")]
		[Address(RVA = "0xBFDFB8", Offset = "0xBFDFB8", VA = "0xBFDFB8")]
		private static bool IsDuplicate(AudioClip clip)
		{
			return default(bool);
		}

		[Token(Token = "0x60010C6")]
		[Address(RVA = "0xBFE2F8", Offset = "0xBFE2F8", VA = "0xBFE2F8")]
		private static void DestroyAudioSource(UnityEngine.Object gameObject, AudioClipDescriptor clipDescriptor)
		{
		}

		[Token(Token = "0x60010C7")]
		[Address(RVA = "0xBFE86C", Offset = "0xBFE86C", VA = "0xBFE86C")]
		private static void PoolAudioSource(GameObject gameObject, AudioClipDescriptor clipDescriptor)
		{
		}

		[Token(Token = "0x60010C8")]
		[Address(RVA = "0xBFF11C", Offset = "0xBFF11C", VA = "0xBFF11C")]
		[IteratorStateMachine(typeof(<PoolAudioSourceCoroutine>d__21))]
		private static IEnumerator PoolAudioSourceCoroutine(GameObject gameObject, float delay)
		{
			return null;
		}

		[Token(Token = "0x60010C9")]
		[Address(RVA = "0xBFF1C8", Offset = "0xBFF1C8", VA = "0xBFF1C8")]
		public static void SetPlayerPrefVolumes()
		{
		}

		[Token(Token = "0x60010CA")]
		[Address(RVA = "0xBFF2B8", Offset = "0xBFF2B8", VA = "0xBFF2B8")]
		public static void SetLevel(string mixerExposedParam, float value)
		{
		}

		[Token(Token = "0x60010CB")]
		[Address(RVA = "0xBFF344", Offset = "0xBFF344", VA = "0xBFF344")]
		public static void PlayNoManaAtPosition(Vector3 position)
		{
		}

		[Token(Token = "0x60010CC")]
		[Address(RVA = "0xBFF3DC", Offset = "0xBFF3DC", VA = "0xBFF3DC")]
		public static void PlayGameOverAtPosition(Vector3 position)
		{
		}

		[Token(Token = "0x60010CD")]
		[Address(RVA = "0xBFF474", Offset = "0xBFF474", VA = "0xBFF474")]
		public static void PlayNextDeityRankAtPosition(Vector3 position)
		{
		}

		[Token(Token = "0x60010CE")]
		[Address(RVA = "0xBFF50C", Offset = "0xBFF50C", VA = "0xBFF50C")]
		public static void PlaySoundTutorialNext(Vector3 position)
		{
		}

		[Token(Token = "0x60010CF")]
		[Address(RVA = "0xBFF5A4", Offset = "0xBFF5A4", VA = "0xBFF5A4")]
		public static void PlaySoundTutorialEnd(Vector3 position)
		{
		}

		[Token(Token = "0x60010D0")]
		[Address(RVA = "0xBFF63C", Offset = "0xBFF63C", VA = "0xBFF63C")]
		public static void PlaySoundBadCombination(Vector3 position)
		{
		}

		[Token(Token = "0x60010D1")]
		[Address(RVA = "0xBFF6D4", Offset = "0xBFF6D4", VA = "0xBFF6D4")]
		public static void PlayHomeRunSoundAtPosition()
		{
		}

		[Token(Token = "0x60010D2")]
		[Address(RVA = "0xBFF788", Offset = "0xBFF788", VA = "0xBFF788")]
		public static void InterruptSound(AudioSource audioSource)
		{
		}

		[Token(Token = "0x60010D3")]
		[Address(RVA = "0xBFF810", Offset = "0xBFF810", VA = "0xBFF810")]
		public static void PlayMiracleSelectorOpenAtPosition()
		{
		}

		[Token(Token = "0x60010D4")]
		[Address(RVA = "0xBFF8C4", Offset = "0xBFF8C4", VA = "0xBFF8C4")]
		public static void PlayMiracleSelectorCloseAtPosition()
		{
		}

		[Token(Token = "0x60010D5")]
		[Address(RVA = "0xBFF978", Offset = "0xBFF978", VA = "0xBFF978")]
		public AudioManager()
		{
		}
	}
	[Token(Token = "0x2000298")]
	[CreateAssetMenu(menuName = "Audio/Audio Manager Configuration")]
	public class AudioManagerConfiguation : ScriptableObject
	{
		[Token(Token = "0x4000EF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioMixer audioMixer;

		[Token(Token = "0x4000EF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioMixerSnapshot defaultSnapshot;

		[Token(Token = "0x4000EF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AudioSet gameOverSound;

		[Token(Token = "0x4000EF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AudioSet nextDeityRankSound;

		[Token(Token = "0x4000EFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AudioSet noManaSound;

		[Token(Token = "0x4000EFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AudioSet tutorialNextSound;

		[Token(Token = "0x4000EFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public AudioSet tutorialEndSound;

		[Token(Token = "0x4000EFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AudioSet badCombinationSound;

		[Token(Token = "0x4000EFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public AudioSet homeRunSound;

		[Token(Token = "0x4000EFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public AudioSet miracleSelectorOpenSound;

		[Token(Token = "0x4000F00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public AudioSet miracleSelectorCloseSound;

		[Token(Token = "0x4000F01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float duplicateSoundCheckDelay;

		[Token(Token = "0x4000F02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public float interruptionFadeOutDelay;

		[Token(Token = "0x60010F5")]
		[Address(RVA = "0xC00314", Offset = "0xC00314", VA = "0xC00314")]
		public AudioManagerConfiguation()
		{
		}
	}
	[Token(Token = "0x2000299")]
	[CreateAssetMenu(menuName = "Audio/Audio Set")]
	public class AudioSet : ScriptableObject
	{
		[Token(Token = "0x4000F03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioClipDescriptor[] clips;

		[Token(Token = "0x4000F04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 1f)]
		public float BaseVolume;

		[Token(Token = "0x4000F05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Range(-3f, 3f)]
		public float BasePitch;

		[Token(Token = "0x4000F06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Range(-3f, 3f)]
		public float MaxPitchMultiplier;

		[Token(Token = "0x4000F07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Range(-3f, 3f)]
		public float MinPitchMultiplier;

		[Token(Token = "0x4000F08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AudioSourceConfiguration AudioSourceConfiguration;

		[Token(Token = "0x4000F09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("If enabled the audio set will never return the same sounds twice until all sounds have been played once. Otherwise it will pick a random sound.")]
		public bool PlayAllSoundsBeforeRepeat;

		[Token(Token = "0x4000F0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Range(0f, 1f)]
		[Tooltip("The percentage of chance to play that audio set")]
		public float probability;

		[Token(Token = "0x4000F0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("If checked the audio set will not return a sound if too many of them are still played")]
		[Header("Limit Configuration")]
		public bool limitSimultaneousSounds;

		[Token(Token = "0x4000F0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("The limit of simultaneous sounds that are allowed when Limit Simultaneous Sounds is Checked ")]
		[Min(1f)]
		public int simultaneousSoundLimit;

		[Token(Token = "0x4000F0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int lastSoundIndex;

		[Token(Token = "0x4000F0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private List<int> remainingClipsIndexes;

		[Token(Token = "0x4000F0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private List<float> clipRequestTimes;

		[Token(Token = "0x4000F10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float maxClipLength;

		[Token(Token = "0x60010F6")]
		[Address(RVA = "0xC00328", Offset = "0xC00328", VA = "0xC00328")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60010F7")]
		[Address(RVA = "0xC004F8", Offset = "0xC004F8", VA = "0xC004F8")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x60010F8")]
		[Address(RVA = "0xBFDC78", Offset = "0xBFDC78", VA = "0xBFDC78")]
		public AudioClipDescriptor RandomClip()
		{
			return default(AudioClipDescriptor);
		}

		[Token(Token = "0x60010F9")]
		[Address(RVA = "0xBFE130", Offset = "0xBFE130", VA = "0xBFE130")]
		public float RandomPitch()
		{
			return default(float);
		}

		[Token(Token = "0x60010FA")]
		[Address(RVA = "0xBFDB74", Offset = "0xBFDB74", VA = "0xBFDB74")]
		public bool IsPossible()
		{
			return default(bool);
		}

		[Token(Token = "0x60010FB")]
		[Address(RVA = "0xC006C8", Offset = "0xC006C8", VA = "0xC006C8")]
		public AudioSet()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200029B")]
	[CreateAssetMenu(menuName = "Audio/Audio Source Configuration")]
	public class AudioSourceConfiguration : ScriptableObject
	{
		[Token(Token = "0x4000F13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioMixerGroup output;

		[Token(Token = "0x4000F14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 1f)]
		public float spatialBlend;

		[Token(Token = "0x4000F15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Range(0f, 5f)]
		[Header("3D Sound Settings")]
		public float dopplerLevel;

		[Token(Token = "0x4000F16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Range(0f, 360f)]
		public float spread;

		[Token(Token = "0x4000F17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public AudioRolloffMode volumeRolloff;

		[Token(Token = "0x4000F18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float minDistance;

		[Token(Token = "0x4000F19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float maxDistance;

		[Token(Token = "0x4000F1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool setCustomCurve;

		[Token(Token = "0x4000F1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AnimationCurve customDistanceCurve;

		[Token(Token = "0x4000F1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool setCustomReverbZoneMixCurve;

		[Token(Token = "0x4000F1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AnimationCurve reverbZoneMixCurve;

		[Token(Token = "0x4000F1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Set to true to transition to a mixer snapshot during this sound duration. Ignored for loops.")]
		public bool transitionToSnapshot;

		[Token(Token = "0x4000F1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The snapshot we want to transition to.")]
		public AudioMixerSnapshot audioMixerSnapshot;

		[Token(Token = "0x4000F20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Define how long is the transition between the 2 snapshots.")]
		public float transitionTime;

		[Token(Token = "0x4000F21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Range(0f, 1f)]
		[Tooltip("The percentage of the clip before we start fading out. The fade out will take the rest of the time.")]
		public float fadeOutPercentage;

		[Token(Token = "0x6001100")]
		[Address(RVA = "0xC007B0", Offset = "0xC007B0", VA = "0xC007B0")]
		public AudioSourceConfiguration()
		{
		}
	}
	[Token(Token = "0x200029C")]
	[CreateAssetMenu(menuName = "Audio/Footstep Audio Collection")]
	public class FootstepAudioCollection : ScriptableObject
	{
		[Token(Token = "0x4000F22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FootstepAudioSetDescriptor[] audioSets;

		[Token(Token = "0x6001101")]
		[Address(RVA = "0xC00A04", Offset = "0xC00A04", VA = "0xC00A04")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6001102")]
		[Address(RVA = "0xC00B38", Offset = "0xC00B38", VA = "0xC00B38")]
		public void Sort()
		{
		}

		[Token(Token = "0x6001103")]
		[Address(RVA = "0xC00B80", Offset = "0xC00B80", VA = "0xC00B80")]
		public FootstepAudioSetDescriptor Select(TerrainType terrainType, bool concreteGround = false)
		{
			return default(FootstepAudioSetDescriptor);
		}

		[Token(Token = "0x6001104")]
		[Address(RVA = "0xC00C5C", Offset = "0xC00C5C", VA = "0xC00C5C")]
		public FootstepAudioCollection()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200029D")]
	public struct FootstepAudioSetDescriptor : IComparable<FootstepAudioSetDescriptor>
	{
		[Token(Token = "0x4000F23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[HideInInspector]
		public string name;

		[Token(Token = "0x4000F24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public GroundType GroundType;

		[Token(Token = "0x4000F25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AudioSet AudioSet;

		[Token(Token = "0x6001105")]
		[Address(RVA = "0xC00C64", Offset = "0xC00C64", VA = "0xC00C64", Slot = "4")]
		public int CompareTo(FootstepAudioSetDescriptor other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x200029E")]
	public class Layer
	{
		[Token(Token = "0x4000F26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Tooltip("The audio set containing the clips to play")]
		public AudioSet audioSet;

		[Token(Token = "0x4000F27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Initial delay before the first sound is played")]
		[Range(0f, 360f)]
		public float initialDelay;

		[Token(Token = "0x4000F28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Minimum time that will pass before try to play another sound")]
		[Range(0f, 360f)]
		public float timeMin;

		[Token(Token = "0x4000F29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Maximum time that will pass before try to play another sound")]
		[Range(0f, 360f)]
		public float timeMax;

		[Token(Token = "0x6001106")]
		[Address(RVA = "0xC00C78", Offset = "0xC00C78", VA = "0xC00C78")]
		public Layer()
		{
		}
	}
	[Token(Token = "0x200029F")]
	[CreateAssetMenu(menuName = "Audio/Layered Audio Set")]
	public class LayeredAudioSet : ScriptableObject
	{
		[Token(Token = "0x4000F2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("A global volume multiplier applied to all layers")]
		[Range(0f, 1f)]
		public float volume;

		[Token(Token = "0x4000F2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<Layer> layers;

		[Token(Token = "0x6001107")]
		[Address(RVA = "0xC00C80", Offset = "0xC00C80", VA = "0xC00C80")]
		public LayeredAudioSet()
		{
		}
	}
	[Token(Token = "0x20002A0")]
	public class LayeredAudioSetPlayer : MonoBehaviour
	{
		[Token(Token = "0x4000F2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LayeredAudioSet layeredAudioSet;

		[Token(Token = "0x4000F2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool playClipsAsChildren;

		[Token(Token = "0x4000F2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float[] _lastPlayTimes;

		[Token(Token = "0x4000F2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float[] _randomTimes;

		[Token(Token = "0x6001108")]
		[Address(RVA = "0xC00C90", Offset = "0xC00C90", VA = "0xC00C90")]
		private void Start()
		{
		}

		[Token(Token = "0x6001109")]
		[Address(RVA = "0xC00C94", Offset = "0xC00C94", VA = "0xC00C94")]
		public void Init()
		{
		}

		[Token(Token = "0x600110A")]
		[Address(RVA = "0xC00E2C", Offset = "0xC00E2C", VA = "0xC00E2C")]
		private void Update()
		{
		}

		[Token(Token = "0x600110B")]
		[Address(RVA = "0xC00F9C", Offset = "0xC00F9C", VA = "0xC00F9C")]
		private void PlayClip(AudioSet audioSet, float volume)
		{
		}

		[Token(Token = "0x600110C")]
		[Address(RVA = "0xC01090", Offset = "0xC01090", VA = "0xC01090")]
		public LayeredAudioSetPlayer()
		{
		}
	}
	[Token(Token = "0x20002A1")]
	public class RegisterAmbientArea : MonoBehaviour
	{
		[Token(Token = "0x4000F30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AmbienceType ambienceType;

		[Token(Token = "0x4000F31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public VA_Shape shape;

		[Token(Token = "0x4000F32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool canMove;

		[Token(Token = "0x4000F33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		private bool registered;

		[Token(Token = "0x4000F34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector3 position;

		[Token(Token = "0x4000F35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform thisTransform;

		[Token(Token = "0x4000F36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 cachedPosition;

		[Token(Token = "0x600110D")]
		[Address(RVA = "0xC01098", Offset = "0xC01098", VA = "0xC01098")]
		private void Awake()
		{
		}

		[Token(Token = "0x600110E")]
		[Address(RVA = "0xC010B8", Offset = "0xC010B8", VA = "0xC010B8")]
		private void Start()
		{
		}

		[Token(Token = "0x600110F")]
		[Address(RVA = "0xC010BC", Offset = "0xC010BC", VA = "0xC010BC")]
		public void Enable()
		{
		}

		[Token(Token = "0x6001110")]
		[Address(RVA = "0xC0114C", Offset = "0xC0114C", VA = "0xC0114C")]
		public void Disable()
		{
		}

		[Token(Token = "0x6001111")]
		[Address(RVA = "0xBFCEC8", Offset = "0xBFCEC8", VA = "0xBFCEC8")]
		public void CheckDistanceFromPlayer(Vector3 playerPosition, float squaredCloseDistance)
		{
		}

		[Token(Token = "0x6001112")]
		[Address(RVA = "0xC013A4", Offset = "0xC013A4", VA = "0xC013A4")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6001113")]
		[Address(RVA = "0xC012A4", Offset = "0xC012A4", VA = "0xC012A4")]
		private void Register()
		{
		}

		[Token(Token = "0x6001114")]
		[Address(RVA = "0xC011A8", Offset = "0xC011A8", VA = "0xC011A8")]
		private void Unregister()
		{
		}

		[Token(Token = "0x6001115")]
		[Address(RVA = "0xC01454", Offset = "0xC01454", VA = "0xC01454")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001116")]
		[Address(RVA = "0xC01458", Offset = "0xC01458", VA = "0xC01458")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001117")]
		[Address(RVA = "0xC0145C", Offset = "0xC0145C", VA = "0xC0145C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001118")]
		[Address(RVA = "0xC01460", Offset = "0xC01460", VA = "0xC01460")]
		public RegisterAmbientArea()
		{
		}
	}
	[Token(Token = "0x20002A2")]
	public class SimpleAudioSetPlayer : MonoBehaviour
	{
		[Token(Token = "0x4000F37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioSet audioSet;

		[Token(Token = "0x4000F38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Can the sound be played in a static position or do we need it to be a children of a moving object")]
		public bool playAsChildren;

		[Token(Token = "0x4000F39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		[Tooltip("Must the sound be played in loop? Only possible if the sound is played as children")]
		public bool loop;

		[Token(Token = "0x4000F3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		[Tooltip("Must the sound be played when the gameObject start or only when PlayAudioSet() is called")]
		public bool playOnStart;

		[Token(Token = "0x6001119")]
		[Address(RVA = "0xC01468", Offset = "0xC01468", VA = "0xC01468")]
		private void Start()
		{
		}

		[Token(Token = "0x600111A")]
		[Address(RVA = "0xC01478", Offset = "0xC01478", VA = "0xC01478")]
		public void PlayAudioSet()
		{
		}

		[Token(Token = "0x600111B")]
		[Address(RVA = "0xC01570", Offset = "0xC01570", VA = "0xC01570")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x600111C")]
		[Address(RVA = "0xC01574", Offset = "0xC01574", VA = "0xC01574")]
		public SimpleAudioSetPlayer()
		{
		}
	}
	[Token(Token = "0x20002A3")]
	[CreateAssetMenu(menuName = "Audio/Start Loop Stop")]
	public class StartLoopStop : ScriptableObject
	{
		[Token(Token = "0x4000F3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioSet startAudioSet;

		[Token(Token = "0x4000F3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioSet loopAudioSet;

		[Token(Token = "0x4000F3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AudioSet stopAudioSet;

		[Token(Token = "0x4000F3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("How much time before we start fading in the loop sound")]
		public float fadeInDelay;

		[Token(Token = "0x4000F3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("How much time the fade in to loop sound takes when started")]
		public float fadeInDuration;

		[Token(Token = "0x4000F40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("How much time the fade out takes")]
		public float fadeOutDuration;

		[Token(Token = "0x4000F41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("How much time after the start of the fade out before start playing the stop sound")]
		public float stopDelay;

		[Token(Token = "0x600111D")]
		[Address(RVA = "0xC01584", Offset = "0xC01584", VA = "0xC01584")]
		public StartLoopStop()
		{
		}
	}
	[Token(Token = "0x20002A4")]
	public class StartLoopStopManager : MonoBehaviour
	{
		[Token(Token = "0x20002A5")]
		[CompilerGenerated]
		private sealed class <WaitAndStopLoop>d__5 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000F45")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000F46")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000F47")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float delay;

			[Token(Token = "0x4000F48")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public StartLoopStopManager <>4__this;

			[Token(Token = "0x170001E3")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001127")]
				[Address(RVA = "0xC01A18", Offset = "0xC01A18", VA = "0xC01A18", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001E4")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001129")]
				[Address(RVA = "0xC01A60", Offset = "0xC01A60", VA = "0xC01A60", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001124")]
			[Address(RVA = "0xC017DC", Offset = "0xC017DC", VA = "0xC017DC")]
			[DebuggerHidden]
			public <WaitAndStopLoop>d__5(int <>1__state)
			{
			}

			[Token(Token = "0x6001125")]
			[Address(RVA = "0xC0195C", Offset = "0xC0195C", VA = "0xC0195C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001126")]
			[Address(RVA = "0xC01960", Offset = "0xC01960", VA = "0xC01960", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001128")]
			[Address(RVA = "0xC01A20", Offset = "0xC01A20", VA = "0xC01A20", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20002A6")]
		[CompilerGenerated]
		private sealed class <PlayStop>d__7 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000F49")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000F4A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000F4B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public StartLoopStopManager <>4__this;

			[Token(Token = "0x170001E5")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600112D")]
				[Address(RVA = "0xC01B80", Offset = "0xC01B80", VA = "0xC01B80", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001E6")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600112F")]
				[Address(RVA = "0xC01BC8", Offset = "0xC01BC8", VA = "0xC01BC8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600112A")]
			[Address(RVA = "0xC0192C", Offset = "0xC0192C", VA = "0xC0192C")]
			[DebuggerHidden]
			public <PlayStop>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x600112B")]
			[Address(RVA = "0xC01A68", Offset = "0xC01A68", VA = "0xC01A68", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600112C")]
			[Address(RVA = "0xC01A6C", Offset = "0xC01A6C", VA = "0xC01A6C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600112E")]
			[Address(RVA = "0xC01B88", Offset = "0xC01B88", VA = "0xC01B88", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000F42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public StartLoopStop startLoopStop;

		[Token(Token = "0x4000F43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private AudioSource loopAudioSource;

		[Token(Token = "0x4000F44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Coroutine fadeInCoroutine;

		[Token(Token = "0x600111E")]
		[Address(RVA = "0xC0158C", Offset = "0xC0158C", VA = "0xC0158C")]
		public void StartLoop()
		{
		}

		[Token(Token = "0x600111F")]
		[Address(RVA = "0xC01738", Offset = "0xC01738", VA = "0xC01738")]
		public void StopLoopAfterDelay(float delay)
		{
		}

		[Token(Token = "0x6001120")]
		[Address(RVA = "0xC01758", Offset = "0xC01758", VA = "0xC01758")]
		[IteratorStateMachine(typeof(<WaitAndStopLoop>d__5))]
		private IEnumerator WaitAndStopLoop(float delay)
		{
			return null;
		}

		[Token(Token = "0x6001121")]
		[Address(RVA = "0xC01804", Offset = "0xC01804", VA = "0xC01804")]
		public void StopLoop()
		{
		}

		[Token(Token = "0x6001122")]
		[Address(RVA = "0xC018B8", Offset = "0xC018B8", VA = "0xC018B8")]
		[IteratorStateMachine(typeof(<PlayStop>d__7))]
		private IEnumerator PlayStop()
		{
			return null;
		}

		[Token(Token = "0x6001123")]
		[Address(RVA = "0xC01954", Offset = "0xC01954", VA = "0xC01954")]
		public StartLoopStopManager()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002A7")]
	public struct VariableAudioSetDescriptor
	{
		[Token(Token = "0x4000F4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AudioSet audioSet;

		[Token(Token = "0x4000F4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float threshold;
	}
	[Token(Token = "0x20002A8")]
	[CreateAssetMenu(menuName = "Audio/Variable Audio Set Selector")]
	public class VariableAudioSetSelector : ScriptableObject
	{
		[Token(Token = "0x4000F4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VariableAudioSetDescriptor[] audioSets;

		[Token(Token = "0x4000F4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float minValue;

		[Token(Token = "0x4000F50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float maxValue;

		[Token(Token = "0x4000F51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimationCurve volumeCurve;

		[Token(Token = "0x4000F52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimationCurve pitchCurve;

		[Token(Token = "0x6001130")]
		[Address(RVA = "0xBFE6D4", Offset = "0xBFE6D4", VA = "0xBFE6D4")]
		public AudioSet Select(float value)
		{
			return null;
		}

		[Token(Token = "0x6001131")]
		[Address(RVA = "0xBFE76C", Offset = "0xBFE76C", VA = "0xBFE76C")]
		public float CurveValue(float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001132")]
		[Address(RVA = "0xC01BD0", Offset = "0xC01BD0", VA = "0xC01BD0")]
		public VariableAudioSetSelector()
		{
		}
	}
}
namespace Animations
{
	[Token(Token = "0x20002A9")]
	[CreateAssetMenu(fileName = "Animation Bool", menuName = "Animations/Bool", order = 0)]
	public class AnimationBool : AnimationParameter
	{
		[Token(Token = "0x6001133")]
		[Address(RVA = "0xC01DFC", Offset = "0xC01DFC", VA = "0xC01DFC", Slot = "4")]
		public override ParameterType Type()
		{
			return default(ParameterType);
		}

		[Token(Token = "0x6001134")]
		[Address(RVA = "0xC01E04", Offset = "0xC01E04", VA = "0xC01E04")]
		public AnimationBool()
		{
		}
	}
	[Token(Token = "0x20002AA")]
	[CreateAssetMenu(fileName = "Animation Bool Collection", menuName = "Animations/Bool Collection", order = 0)]
	public class AnimationBoolCollection : ScriptableObject
	{
		[Token(Token = "0x4000F53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AnimationBool inWater;

		[Token(Token = "0x4000F54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AnimationBool isCarrying;

		[Token(Token = "0x4000F55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimationBool isDead;

		[Token(Token = "0x4000F56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimationBool isFalling;

		[Token(Token = "0x4000F57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AnimationBool isWalking;

		[Token(Token = "0x4000F58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AnimationBool fight;

		[Token(Token = "0x4000F59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public AnimationBool inFormation;

		[Token(Token = "0x4000F5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AnimationBool isRunning;

		[Token(Token = "0x4000F5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public AnimationBool flee;

		[Token(Token = "0x4000F5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public AnimationBool hide;

		[Token(Token = "0x4000F5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public AnimationBool isPraying;

		[Token(Token = "0x4000F5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public AnimationBool isBuilding;

		[Token(Token = "0x6001135")]
		[Address(RVA = "0xC01E14", Offset = "0xC01E14", VA = "0xC01E14")]
		public AnimationBoolCollection()
		{
		}
	}
	[Token(Token = "0x20002AB")]
	[CreateAssetMenu(fileName = "Animation Float", menuName = "Animations/Float", order = 0)]
	public class AnimationFloat : AnimationParameter
	{
		[Token(Token = "0x6001136")]
		[Address(RVA = "0xC01E1C", Offset = "0xC01E1C", VA = "0xC01E1C", Slot = "4")]
		public override ParameterType Type()
		{
			return default(ParameterType);
		}

		[Token(Token = "0x6001137")]
		[Address(RVA = "0xC01E24", Offset = "0xC01E24", VA = "0xC01E24")]
		public AnimationFloat()
		{
		}
	}
	[Token(Token = "0x20002AC")]
	[CreateAssetMenu(fileName = "Animation Float Collection", menuName = "Animations/Float Collection", order = 0)]
	public class AnimationFloatCollection : ScriptableObject
	{
		[Token(Token = "0x4000F5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AnimationFloat happiness;

		[Token(Token = "0x6001138")]
		[Address(RVA = "0xC01E2C", Offset = "0xC01E2C", VA = "0xC01E2C")]
		public AnimationFloatCollection()
		{
		}
	}
	[Token(Token = "0x20002AD")]
	[CreateAssetMenu(fileName = "Animation Int", menuName = "Animations/Int", order = 0)]
	public class AnimationInt : AnimationParameter
	{
		[Token(Token = "0x6001139")]
		[Address(RVA = "0xC01E34", Offset = "0xC01E34", VA = "0xC01E34", Slot = "4")]
		public override ParameterType Type()
		{
			return default(ParameterType);
		}

		[Token(Token = "0x600113A")]
		[Address(RVA = "0xC01E3C", Offset = "0xC01E3C", VA = "0xC01E3C")]
		public AnimationInt()
		{
		}
	}
	[Token(Token = "0x20002AE")]
	public abstract class AnimationParameter : ScriptableObject
	{
		[Token(Token = "0x20002AF")]
		public enum ParameterType
		{
			[Token(Token = "0x4000F64")]
			Float,
			[Token(Token = "0x4000F65")]
			Int,
			[Token(Token = "0x4000F66")]
			Bool,
			[Token(Token = "0x4000F67")]
			Trigger
		}

		[Token(Token = "0x4000F60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string value;

		[NonSerialized]
		[Token(Token = "0x4000F61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool init;

		[NonSerialized]
		[Token(Token = "0x4000F62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int hash;

		[Token(Token = "0x170001E7")]
		public int Hash
		{
			[Token(Token = "0x600113B")]
			[Address(RVA = "0xC01E44", Offset = "0xC01E44", VA = "0xC01E44")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x600113C")]
		public abstract ParameterType Type();

		[Token(Token = "0x600113D")]
		[Address(RVA = "0xC01E7C", Offset = "0xC01E7C", VA = "0xC01E7C")]
		private int Init()
		{
			return default(int);
		}

		[Token(Token = "0x600113E")]
		[Address(RVA = "0xC01E0C", Offset = "0xC01E0C", VA = "0xC01E0C")]
		protected AnimationParameter()
		{
		}
	}
	[Token(Token = "0x20002B0")]
	[CreateAssetMenu(fileName = "Animation Trigger", menuName = "Animations/Trigger", order = 0)]
	public class AnimationTrigger : AnimationParameter
	{
		[Token(Token = "0x600113F")]
		[Address(RVA = "0xC01EA4", Offset = "0xC01EA4", VA = "0xC01EA4", Slot = "4")]
		public override ParameterType Type()
		{
			return default(ParameterType);
		}

		[Token(Token = "0x6001140")]
		[Address(RVA = "0xC01EAC", Offset = "0xC01EAC", VA = "0xC01EAC")]
		public AnimationTrigger()
		{
		}
	}
	[Token(Token = "0x20002B1")]
	[CreateAssetMenu(fileName = "Animation Trigger Collection", menuName = "Animations/Trigger Collection", order = 0)]
	public class AnimationTriggerCollection : ScriptableObject
	{
		[Token(Token = "0x4000F68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AnimationTrigger attack;

		[Token(Token = "0x4000F69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AnimationTrigger burn;

		[Token(Token = "0x4000F6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimationTrigger cough;

		[Token(Token = "0x4000F6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimationTrigger getHit;

		[Token(Token = "0x4000F6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AnimationTrigger thrown;

		[Token(Token = "0x4000F6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AnimationTrigger greet;

		[Token(Token = "0x4000F6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public AnimationTrigger callForHelp;

		[Token(Token = "0x4000F6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AnimationTrigger shootBow;

		[Token(Token = "0x4000F70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public AnimationTrigger shootFirearm;

		[Token(Token = "0x4000F71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public AnimationTrigger teach;

		[Token(Token = "0x4000F72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public AnimationTrigger eat;

		[Token(Token = "0x4000F73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public AnimationTrigger bored;

		[Token(Token = "0x4000F74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public AnimationTrigger cutWood;

		[Token(Token = "0x4000F75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public AnimationTrigger mine;

		[Token(Token = "0x4000F76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public AnimationTrigger gather;

		[Token(Token = "0x4000F77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public AnimationTrigger fish;

		[Token(Token = "0x4000F78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public AnimationTrigger applaud;

		[Token(Token = "0x6001141")]
		[Address(RVA = "0xC01EB4", Offset = "0xC01EB4", VA = "0xC01EB4")]
		public AnimationTriggerCollection()
		{
		}
	}
}
namespace UnityStandardAssets.Water
{
	[Token(Token = "0x20002B2")]
	[ExecuteInEditMode]
	public class Water : MonoBehaviour
	{
		[Token(Token = "0x20002B3")]
		public enum WaterMode
		{
			[Token(Token = "0x4000F88")]
			Simple,
			[Token(Token = "0x4000F89")]
			Reflective,
			[Token(Token = "0x4000F8A")]
			Refractive
		}

		[Token(Token = "0x4000F79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public WaterMode waterMode;

		[Token(Token = "0x4000F7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool disablePixelLights;

		[Token(Token = "0x4000F7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int textureSize;

		[Token(Token = "0x4000F7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float clipPlaneOffset;

		[Token(Token = "0x4000F7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LayerMask reflectLayers;

		[Token(Token = "0x4000F7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public LayerMask refractLayers;

		[Token(Token = "0x4000F7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Dictionary<Camera, Camera> m_ReflectionCameras;

		[Token(Token = "0x4000F80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Dictionary<Camera, Camera> m_RefractionCameras;

		[Token(Token = "0x4000F81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private RenderTexture m_ReflectionTexture;

		[Token(Token = "0x4000F82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private RenderTexture m_RefractionTexture;

		[Token(Token = "0x4000F83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private WaterMode m_HardwareWaterSupport;

		[Token(Token = "0x4000F84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private int m_OldReflectionTextureSize;

		[Token(Token = "0x4000F85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int m_OldRefractionTextureSize;

		[Token(Token = "0x4000F86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool s_InsideWater;

		[Token(Token = "0x6001142")]
		[Address(RVA = "0xC01EBC", Offset = "0xC01EBC", VA = "0xC01EBC")]
		public void OnWillRenderObject()
		{
		}

		[Token(Token = "0x6001143")]
		[Address(RVA = "0xC03644", Offset = "0xC03644", VA = "0xC03644")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001144")]
		[Address(RVA = "0xC039AC", Offset = "0xC039AC", VA = "0xC039AC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001145")]
		[Address(RVA = "0xC031C4", Offset = "0xC031C4", VA = "0xC031C4")]
		private void UpdateCameraModes(Camera src, Camera dest)
		{
		}

		[Token(Token = "0x6001146")]
		[Address(RVA = "0xC02858", Offset = "0xC02858", VA = "0xC02858")]
		private void CreateWaterObjects(Camera currentCamera, out Camera reflectionCamera, out Camera refractionCamera)
		{
		}

		[Token(Token = "0x6001147")]
		[Address(RVA = "0xC02844", Offset = "0xC02844", VA = "0xC02844")]
		private WaterMode GetWaterMode()
		{
			return default(WaterMode);
		}

		[Token(Token = "0x6001148")]
		[Address(RVA = "0xC026D8", Offset = "0xC026D8", VA = "0xC026D8")]
		private WaterMode FindHardwareWaterSupport()
		{
			return default(WaterMode);
		}

		[Token(Token = "0x6001149")]
		[Address(RVA = "0xC03494", Offset = "0xC03494", VA = "0xC03494")]
		private Vector4 CameraSpacePlane(Camera cam, Vector3 pos, Vector3 normal, float sideSign)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600114A")]
		[Address(RVA = "0xC03400", Offset = "0xC03400", VA = "0xC03400")]
		private static void CalculateReflectionMatrix(ref Matrix4x4 reflectionMat, Vector4 plane)
		{
		}

		[Token(Token = "0x600114B")]
		[Address(RVA = "0xC03C58", Offset = "0xC03C58", VA = "0xC03C58")]
		public Water()
		{
		}
	}
}
namespace UnityStandardAssets.ImageEffects
{
	[Token(Token = "0x20002B4")]
	public enum AAMode
	{
		[Token(Token = "0x4000F8C")]
		FXAA2,
		[Token(Token = "0x4000F8D")]
		FXAA3Console,
		[Token(Token = "0x4000F8E")]
		FXAA1PresetA,
		[Token(Token = "0x4000F8F")]
		FXAA1PresetB,
		[Token(Token = "0x4000F90")]
		NFAA,
		[Token(Token = "0x4000F91")]
		SSAA,
		[Token(Token = "0x4000F92")]
		DLAA
	}
	[Token(Token = "0x20002B5")]
	[RequireComponent(typeof(Camera))]
	[AddComponentMenu("Image Effects/Other/Antialiasing")]
	[ExecuteInEditMode]
	public class Antialiasing : PostEffectsBase
	{
		[Token(Token = "0x4000F93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public AAMode mode;

		[Token(Token = "0x4000F94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool showGeneratedNormals;

		[Token(Token = "0x4000F95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float offsetScale;

		[Token(Token = "0x4000F96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float blurRadius;

		[Token(Token = "0x4000F97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float edgeThresholdMin;

		[Token(Token = "0x4000F98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float edgeThreshold;

		[Token(Token = "0x4000F99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float edgeSharpness;

		[Token(Token = "0x4000F9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool dlaaSharp;

		[Token(Token = "0x4000F9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Shader ssaaShader;

		[Token(Token = "0x4000F9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Material ssaa;

		[Token(Token = "0x4000F9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Shader dlaaShader;

		[Token(Token = "0x4000F9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Material dlaa;

		[Token(Token = "0x4000F9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Shader nfaaShader;

		[Token(Token = "0x4000FA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Material nfaa;

		[Token(Token = "0x4000FA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Shader shaderFXAAPreset2;

		[Token(Token = "0x4000FA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Material materialFXAAPreset2;

		[Token(Token = "0x4000FA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Shader shaderFXAAPreset3;

		[Token(Token = "0x4000FA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Material materialFXAAPreset3;

		[Token(Token = "0x4000FA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Shader shaderFXAAII;

		[Token(Token = "0x4000FA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Material materialFXAAII;

		[Token(Token = "0x4000FA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Shader shaderFXAAIII;

		[Token(Token = "0x4000FA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Material materialFXAAIII;

		[Token(Token = "0x600114C")]
		[Address(RVA = "0xC03D58", Offset = "0xC03D58", VA = "0xC03D58")]
		public Material CurrentAAMaterial()
		{
			return null;
		}

		[Token(Token = "0x600114D")]
		[Address(RVA = "0xC03DC0", Offset = "0xC03DC0", VA = "0xC03DC0", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x600114E")]
		[Address(RVA = "0xC03F30", Offset = "0xC03F30", VA = "0xC03F30")]
		public void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600114F")]
		[Address(RVA = "0xC043F4", Offset = "0xC043F4", VA = "0xC043F4")]
		public Antialiasing()
		{
		}
	}
	[Token(Token = "0x20002B6")]
	[ExecuteInEditMode]
	[AddComponentMenu("Image Effects/Bloom and Glow/Bloom")]
	[RequireComponent(typeof(Camera))]
	public class Bloom : PostEffectsBase
	{
		[Token(Token = "0x20002B7")]
		public enum LensFlareStyle
		{
			[Token(Token = "0x4000FC8")]
			Ghosting,
			[Token(Token = "0x4000FC9")]
			Anamorphic,
			[Token(Token = "0x4000FCA")]
			Combined
		}

		[Token(Token = "0x20002B8")]
		public enum TweakMode
		{
			[Token(Token = "0x4000FCC")]
			Basic,
			[Token(Token = "0x4000FCD")]
			Complex
		}

		[Token(Token = "0x20002B9")]
		public enum HDRBloomMode
		{
			[Token(Token = "0x4000FCF")]
			Auto,
			[Token(Token = "0x4000FD0")]
			On,
			[Token(Token = "0x4000FD1")]
			Off
		}

		[Token(Token = "0x20002BA")]
		public enum BloomScreenBlendMode
		{
			[Token(Token = "0x4000FD3")]
			Screen,
			[Token(Token = "0x4000FD4")]
			Add
		}

		[Token(Token = "0x20002BB")]
		public enum BloomQuality
		{
			[Token(Token = "0x4000FD6")]
			Cheap,
			[Token(Token = "0x4000FD7")]
			High
		}

		[Token(Token = "0x4000FA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public TweakMode tweakMode;

		[Token(Token = "0x4000FAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BloomScreenBlendMode screenBlendMode;

		[Token(Token = "0x4000FAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public HDRBloomMode hdr;

		[Token(Token = "0x4000FAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool doHdr;

		[Token(Token = "0x4000FAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float sepBlurSpread;

		[Token(Token = "0x4000FAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public BloomQuality quality;

		[Token(Token = "0x4000FAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float bloomIntensity;

		[Token(Token = "0x4000FB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float bloomThreshold;

		[Token(Token = "0x4000FB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Color bloomThresholdColor;

		[Token(Token = "0x4000FB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public int bloomBlurIterations;

		[Token(Token = "0x4000FB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int hollywoodFlareBlurIterations;

		[Token(Token = "0x4000FB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float flareRotation;

		[Token(Token = "0x4000FB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public LensFlareStyle lensflareMode;

		[Token(Token = "0x4000FB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float hollyStretchWidth;

		[Token(Token = "0x4000FB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float lensflareIntensity;

		[Token(Token = "0x4000FB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float lensflareThreshold;

		[Token(Token = "0x4000FB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float lensFlareSaturation;

		[Token(Token = "0x4000FBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public Color flareColorA;

		[Token(Token = "0x4000FBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public Color flareColorB;

		[Token(Token = "0x4000FBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public Color flareColorC;

		[Token(Token = "0x4000FBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public Color flareColorD;

		[Token(Token = "0x4000FBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public Texture2D lensFlareVignetteMask;

		[Token(Token = "0x4000FBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Shader lensFlareShader;

		[Token(Token = "0x4000FC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Material lensFlareMaterial;

		[Token(Token = "0x4000FC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public Shader screenBlendShader;

		[Token(Token = "0x4000FC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Material screenBlend;

		[Token(Token = "0x4000FC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public Shader blurAndFlaresShader;

		[Token(Token = "0x4000FC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Material blurAndFlaresMaterial;

		[Token(Token = "0x4000FC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public Shader brightPassFilterShader;

		[Token(Token = "0x4000FC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Material brightPassFilterMaterial;

		[Token(Token = "0x6001150")]
		[Address(RVA = "0xC04418", Offset = "0xC04418", VA = "0xC04418", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6001151")]
		[Address(RVA = "0xC04504", Offset = "0xC04504", VA = "0xC04504")]
		public void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6001152")]
		[Address(RVA = "0xC05674", Offset = "0xC05674", VA = "0xC05674")]
		private void AddTo(float intensity_, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x6001153")]
		[Address(RVA = "0xC054DC", Offset = "0xC054DC", VA = "0xC054DC")]
		private void BlendFlares(RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x6001154")]
		[Address(RVA = "0xC05230", Offset = "0xC05230", VA = "0xC05230")]
		private void BrightFilter(float thresh, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x6001155")]
		[Address(RVA = "0xC0515C", Offset = "0xC0515C", VA = "0xC0515C")]
		private void BrightFilter(Color threshColor, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x6001156")]
		[Address(RVA = "0xC052F0", Offset = "0xC052F0", VA = "0xC052F0")]
		private void Vignette(float amount, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x6001157")]
		[Address(RVA = "0xC05738", Offset = "0xC05738", VA = "0xC05738")]
		public Bloom()
		{
		}
	}
	[Token(Token = "0x20002BC")]
	[RequireComponent(typeof(Camera))]
	[ExecuteInEditMode]
	[AddComponentMenu("Image Effects/Bloom and Glow/Bloom (Optimized)")]
	public class BloomOptimized : PostEffectsBase
	{
		[Token(Token = "0x20002BD")]
		public enum Resolution
		{
			[Token(Token = "0x4000FE1")]
			Low,
			[Token(Token = "0x4000FE2")]
			High
		}

		[Token(Token = "0x20002BE")]
		public enum BlurType
		{
			[Token(Token = "0x4000FE4")]
			Standard,
			[Token(Token = "0x4000FE5")]
			Sgx
		}

		[Token(Token = "0x4000FD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Range(0f, 1.5f)]
		public float threshold;

		[Token(Token = "0x4000FD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 2.5f)]
		public float intensity;

		[Token(Token = "0x4000FDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Range(0.25f, 5.5f)]
		public float blurSize;

		[Token(Token = "0x4000FDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Resolution resolution;

		[Token(Token = "0x4000FDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Range(1f, 4f)]
		public int blurIterations;

		[Token(Token = "0x4000FDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public BlurType blurType;

		[Token(Token = "0x4000FDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Shader fastBloomShader;

		[Token(Token = "0x4000FDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material fastBloomMaterial;

		[Token(Token = "0x6001158")]
		[Address(RVA = "0xB0CBE4", Offset = "0xB0CBE4", VA = "0xB0CBE4", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6001159")]
		[Address(RVA = "0xB0D214", Offset = "0xB0D214", VA = "0xB0D214")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600115A")]
		[Address(RVA = "0xB0D2A0", Offset = "0xB0D2A0", VA = "0xB0D2A0")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600115B")]
		[Address(RVA = "0xB0D610", Offset = "0xB0D610", VA = "0xB0D610")]
		public BloomOptimized()
		{
		}
	}
	[Token(Token = "0x20002BF")]
	[AddComponentMenu("Image Effects/Blur/Blur")]
	[ExecuteInEditMode]
	public class Blur : MonoBehaviour
	{
		[Token(Token = "0x4000FE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0f, 10f)]
		public int iterations;

		[Token(Token = "0x4000FE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Range(0f, 1f)]
		public float blurSpread;

		[Token(Token = "0x4000FE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Shader blurShader;

		[Token(Token = "0x4000FE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Material m_Material;

		[Token(Token = "0x170001E8")]
		protected Material material
		{
			[Token(Token = "0x600115C")]
			[Address(RVA = "0xB0D650", Offset = "0xB0D650", VA = "0xB0D650")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600115D")]
		[Address(RVA = "0xB0D758", Offset = "0xB0D758", VA = "0xB0D758")]
		protected void OnDisable()
		{
		}

		[Token(Token = "0x600115E")]
		[Address(RVA = "0xB0D804", Offset = "0xB0D804", VA = "0xB0D804")]
		protected void Start()
		{
		}

		[Token(Token = "0x600115F")]
		[Address(RVA = "0xB0D8B4", Offset = "0xB0D8B4", VA = "0xB0D8B4")]
		public void FourTapCone(RenderTexture source, RenderTexture dest, int iteration)
		{
		}

		[Token(Token = "0x6001160")]
		[Address(RVA = "0xB0D9C4", Offset = "0xB0D9C4", VA = "0xB0D9C4")]
		private void DownSample4x(RenderTexture source, RenderTexture dest)
		{
		}

		[Token(Token = "0x6001161")]
		[Address(RVA = "0xB0DAC0", Offset = "0xB0DAC0", VA = "0xB0DAC0")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6001162")]
		[Address(RVA = "0xB0DC1C", Offset = "0xB0DC1C", VA = "0xB0DC1C")]
		public Blur()
		{
		}
	}
	[Token(Token = "0x20002C0")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(Camera))]
	[AddComponentMenu("Image Effects/Blur/Blur (Optimized)")]
	public class BlurOptimized : PostEffectsBase
	{
		[Token(Token = "0x20002C1")]
		public enum BlurType
		{
			[Token(Token = "0x4000FF1")]
			StandardGauss,
			[Token(Token = "0x4000FF2")]
			SgxGauss
		}

		[Token(Token = "0x4000FEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Range(0f, 2f)]
		public int downsample;

		[Token(Token = "0x4000FEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 10f)]
		public float blurSize;

		[Token(Token = "0x4000FEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Range(1f, 4f)]
		public int blurIterations;

		[Token(Token = "0x4000FED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public BlurType blurType;

		[Token(Token = "0x4000FEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Shader blurShader;

		[Token(Token = "0x4000FEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Material blurMaterial;

		[Token(Token = "0x6001163")]
		[Address(RVA = "0xB0DC34", Offset = "0xB0DC34", VA = "0xB0DC34", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6001164")]
		[Address(RVA = "0xB0DC9C", Offset = "0xB0DC9C", VA = "0xB0DC9C")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x6001165")]
		[Address(RVA = "0xB0DD28", Offset = "0xB0DD28", VA = "0xB0DD28")]
		public void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6001166")]
		[Address(RVA = "0xB0E050", Offset = "0xB0E050", VA = "0xB0E050")]
		public BlurOptimized()
		{
		}
	}
	[Token(Token = "0x20002C2")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(Camera))]
	[AddComponentMenu("Image Effects/Camera/Camera Motion Blur")]
	public class CameraMotionBlur : PostEffectsBase
	{
		[Token(Token = "0x20002C3")]
		public enum MotionBlurFilter
		{
			[Token(Token = "0x4001012")]
			CameraMotion,
			[Token(Token = "0x4001013")]
			LocalBlur,
			[Token(Token = "0x4001014")]
			Reconstruction,
			[Token(Token = "0x4001015")]
			ReconstructionDX11,
			[Token(Token = "0x4001016")]
			ReconstructionDisc
		}

		[Token(Token = "0x4000FF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static float MAX_RADIUS;

		[Token(Token = "0x4000FF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public MotionBlurFilter filterType;

		[Token(Token = "0x4000FF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool preview;

		[Token(Token = "0x4000FF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector3 previewScale;

		[Token(Token = "0x4000FF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float movementScale;

		[Token(Token = "0x4000FF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float rotationScale;

		[Token(Token = "0x4000FF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float maxVelocity;

		[Token(Token = "0x4000FFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float minVelocity;

		[Token(Token = "0x4000FFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float velocityScale;

		[Token(Token = "0x4000FFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float softZDistance;

		[Token(Token = "0x4000FFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public int velocityDownsample;

		[Token(Token = "0x4000FFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public LayerMask excludeLayers;

		[Token(Token = "0x4000FFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private GameObject tmpCam;

		[Token(Token = "0x4001000")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Shader shader;

		[Token(Token = "0x4001001")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Shader dx11MotionBlurShader;

		[Token(Token = "0x4001002")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Shader replacementClear;

		[Token(Token = "0x4001003")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Material motionBlurMaterial;

		[Token(Token = "0x4001004")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Material dx11MotionBlurMaterial;

		[Token(Token = "0x4001005")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Texture2D noiseTexture;

		[Token(Token = "0x4001006")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float jitter;

		[Token(Token = "0x4001007")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public bool showVelocity;

		[Token(Token = "0x4001008")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float showVelocityScale;

		[Token(Token = "0x4001009")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private Matrix4x4 currentViewProjMat;

		[Token(Token = "0x400100A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private Matrix4x4 prevViewProjMat;

		[Token(Token = "0x400100B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		private int prevFrameCount;

		[Token(Token = "0x400100C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private bool wasActive;

		[Token(Token = "0x400100D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		private Vector3 prevFrameForward;

		[Token(Token = "0x400100E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private Vector3 prevFrameUp;

		[Token(Token = "0x400100F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		private Vector3 prevFramePos;

		[Token(Token = "0x4001010")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private Camera _camera;

		[Token(Token = "0x6001167")]
		[Address(RVA = "0xB0E078", Offset = "0xB0E078", VA = "0xB0E078")]
		private void CalculateViewProjection()
		{
		}

		[Token(Token = "0x6001168")]
		[Address(RVA = "0xB0E17C", Offset = "0xB0E17C", VA = "0xB0E17C")]
		private new void Start()
		{
		}

		[Token(Token = "0x6001169")]
		[Address(RVA = "0xB0E300", Offset = "0xB0E300", VA = "0xB0E300")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600116A")]
		[Address(RVA = "0xB0E3C0", Offset = "0xB0E3C0", VA = "0xB0E3C0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600116B")]
		[Address(RVA = "0xB0E524", Offset = "0xB0E524", VA = "0xB0E524", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x600116C")]
		[Address(RVA = "0xB0E620", Offset = "0xB0E620", VA = "0xB0E620")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600116D")]
		[Address(RVA = "0xB0E260", Offset = "0xB0E260", VA = "0xB0E260")]
		private void Remember()
		{
		}

		[Token(Token = "0x600116E")]
		[Address(RVA = "0xB0FDD0", Offset = "0xB0FDD0", VA = "0xB0FDD0")]
		private Camera GetTmpCam()
		{
			return null;
		}

		[Token(Token = "0x600116F")]
		[Address(RVA = "0xB0FD4C", Offset = "0xB0FD4C", VA = "0xB0FD4C")]
		private void StartFrame()
		{
		}

		[Token(Token = "0x6001170")]
		[Address(RVA = "0xB0FDC0", Offset = "0xB0FDC0", VA = "0xB0FDC0")]
		private static int divRoundUp(int x, int d)
		{
			return default(int);
		}

		[Token(Token = "0x6001171")]
		[Address(RVA = "0xB10164", Offset = "0xB10164", VA = "0xB10164")]
		public CameraMotionBlur()
		{
		}
	}
	[Token(Token = "0x20002C4")]
	[ExecuteInEditMode]
	[AddComponentMenu("Image Effects/Color Adjustments/Color Correction (Curves, Saturation)")]
	public class ColorCorrectionCurves : PostEffectsBase
	{
		[Token(Token = "0x20002C5")]
		public enum ColorCorrectionMode
		{
			[Token(Token = "0x4001030")]
			Simple,
			[Token(Token = "0x4001031")]
			Advanced
		}

		[Token(Token = "0x4001017")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AnimationCurve redChannel;

		[Token(Token = "0x4001018")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimationCurve greenChannel;

		[Token(Token = "0x4001019")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimationCurve blueChannel;

		[Token(Token = "0x400101A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool useDepthCorrection;

		[Token(Token = "0x400101B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AnimationCurve zCurve;

		[Token(Token = "0x400101C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public AnimationCurve depthRedChannel;

		[Token(Token = "0x400101D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AnimationCurve depthGreenChannel;

		[Token(Token = "0x400101E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public AnimationCurve depthBlueChannel;

		[Token(Token = "0x400101F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material ccMaterial;

		[Token(Token = "0x4001020")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Material ccDepthMaterial;

		[Token(Token = "0x4001021")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Material selectiveCcMaterial;

		[Token(Token = "0x4001022")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Texture2D rgbChannelTex;

		[Token(Token = "0x4001023")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Texture2D rgbDepthChannelTex;

		[Token(Token = "0x4001024")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Texture2D zCurveTex;

		[Token(Token = "0x4001025")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float saturation;

		[Token(Token = "0x4001026")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public bool selectiveCc;

		[Token(Token = "0x4001027")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Color selectiveFromColor;

		[Token(Token = "0x4001028")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Color selectiveToColor;

		[Token(Token = "0x4001029")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public ColorCorrectionMode mode;

		[Token(Token = "0x400102A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public bool updateTextures;

		[Token(Token = "0x400102B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public Shader colorCorrectionCurvesShader;

		[Token(Token = "0x400102C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public Shader simpleColorCorrectionCurvesShader;

		[Token(Token = "0x400102D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Shader colorCorrectionSelectiveShader;

		[Token(Token = "0x400102E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private bool updateTexturesOnStartup;

		[Token(Token = "0x6001173")]
		[Address(RVA = "0xB10310", Offset = "0xB10310", VA = "0xB10310")]
		private new void Start()
		{
		}

		[Token(Token = "0x6001174")]
		[Address(RVA = "0xB10340", Offset = "0xB10340", VA = "0xB10340")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001175")]
		[Address(RVA = "0xB10344", Offset = "0xB10344", VA = "0xB10344", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6001176")]
		[Address(RVA = "0xB105F4", Offset = "0xB105F4", VA = "0xB105F4")]
		public void UpdateParameters()
		{
		}

		[Token(Token = "0x6001177")]
		[Address(RVA = "0xB108E8", Offset = "0xB108E8", VA = "0xB108E8")]
		private void UpdateTextures()
		{
		}

		[Token(Token = "0x6001178")]
		[Address(RVA = "0xB108EC", Offset = "0xB108EC", VA = "0xB108EC")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6001179")]
		[Address(RVA = "0xB10BF8", Offset = "0xB10BF8", VA = "0xB10BF8")]
		public ColorCorrectionCurves()
		{
		}
	}
	[Token(Token = "0x20002C6")]
	[ExecuteInEditMode]
	[AddComponentMenu("Image Effects/Color Adjustments/Color Correction (3D Lookup Texture)")]
	public class ColorCorrectionLookup : PostEffectsBase
	{
		[Token(Token = "0x4001032")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Shader shader;

		[Token(Token = "0x4001033")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Material material;

		[Token(Token = "0x4001034")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Texture3D converted3DLut;

		[Token(Token = "0x4001035")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string basedOnTempTex;

		[Token(Token = "0x600117A")]
		[Address(RVA = "0xB11290", Offset = "0xB11290", VA = "0xB11290", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x600117B")]
		[Address(RVA = "0xB112F4", Offset = "0xB112F4", VA = "0xB112F4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600117C")]
		[Address(RVA = "0xB11390", Offset = "0xB11390", VA = "0xB11390")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600117D")]
		[Address(RVA = "0xB11420", Offset = "0xB11420", VA = "0xB11420")]
		public void SetIdentityLut()
		{
		}

		[Token(Token = "0x600117E")]
		[Address(RVA = "0xB1161C", Offset = "0xB1161C", VA = "0xB1161C")]
		public bool ValidDimensions(Texture2D tex2d)
		{
			return default(bool);
		}

		[Token(Token = "0x600117F")]
		[Address(RVA = "0xB1171C", Offset = "0xB1171C", VA = "0xB1171C")]
		public void Convert(Texture2D temp2DTex, string path)
		{
		}

		[Token(Token = "0x6001180")]
		[Address(RVA = "0xB11A64", Offset = "0xB11A64", VA = "0xB11A64")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6001181")]
		[Address(RVA = "0xB11C58", Offset = "0xB11C58", VA = "0xB11C58")]
		public ColorCorrectionLookup()
		{
		}
	}
	[Token(Token = "0x20002C7")]
	[ExecuteInEditMode]
	[AddComponentMenu("Image Effects/Color Adjustments/Color Correction (Ramp)")]
	public class ColorCorrectionRamp : ImageEffectBase
	{
		[Token(Token = "0x4001036")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Texture textureRamp;

		[Token(Token = "0x6001182")]
		[Address(RVA = "0xB11CBC", Offset = "0xB11CBC", VA = "0xB11CBC")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6001183")]
		[Address(RVA = "0xB11E44", Offset = "0xB11E44", VA = "0xB11E44")]
		public ColorCorrectionRamp()
		{
		}
	}
	[Token(Token = "0x20002C8")]
	[RequireComponent(typeof(Camera))]
	[ExecuteInEditMode]
	[AddComponentMenu("Image Effects/Color Adjustments/Contrast Enhance (Unsharp Mask)")]
	public class ContrastEnhance : PostEffectsBase
	{
		[Token(Token = "0x4001037")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Range(0f, 1f)]
		public float intensity;

		[Token(Token = "0x4001038")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 0.999f)]
		public float threshold;

		[Token(Token = "0x4001039")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Material separableBlurMaterial;

		[Token(Token = "0x400103A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Material contrastCompositeMaterial;

		[Token(Token = "0x400103B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Range(0f, 1f)]
		public float blurSpread;

		[Token(Token = "0x400103C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Shader separableBlurShader;

		[Token(Token = "0x400103D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader contrastCompositeShader;

		[Token(Token = "0x6001184")]
		[Address(RVA = "0xB11E54", Offset = "0xB11E54", VA = "0xB11E54", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6001185")]
		[Address(RVA = "0xB11EE0", Offset = "0xB11EE0", VA = "0xB11EE0")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6001186")]
		[Address(RVA = "0xB1220C", Offset = "0xB1220C", VA = "0xB1220C")]
		public ContrastEnhance()
		{
		}
	}
	[Token(Token = "0x20002C9")]
	[ExecuteInEditMode]
	[AddComponentMenu("Image Effects/Color Adjustments/Contrast Stretch")]
	public class ContrastStretch : MonoBehaviour
	{
		[Token(Token = "0x400103E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0.0001f, 1f)]
		public float adaptationSpeed;

		[Token(Token = "0x400103F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Range(0f, 1f)]
		public float limitMinimum;

		[Token(Token = "0x4001040")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 1f)]
		public float limitMaximum;

		[Token(Token = "0x4001041")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private RenderTexture[] adaptRenderTex;

		[Token(Token = "0x4001042")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int curAdaptIndex;

		[Token(Token = "0x4001043")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Shader shaderLum;

		[Token(Token = "0x4001044")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material m_materialLum;

		[Token(Token = "0x4001045")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader shaderReduce;

		[Token(Token = "0x4001046")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Material m_materialReduce;

		[Token(Token = "0x4001047")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Shader shaderAdapt;

		[Token(Token = "0x4001048")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material m_materialAdapt;

		[Token(Token = "0x4001049")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Shader shaderApply;

		[Token(Token = "0x400104A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Material m_materialApply;

		[Token(Token = "0x170001E9")]
		protected Material materialLum
		{
			[Token(Token = "0x6001187")]
			[Address(RVA = "0xB12230", Offset = "0xB12230", VA = "0xB12230")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001EA")]
		protected Material materialReduce
		{
			[Token(Token = "0x6001188")]
			[Address(RVA = "0xB12304", Offset = "0xB12304", VA = "0xB12304")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001EB")]
		protected Material materialAdapt
		{
			[Token(Token = "0x6001189")]
			[Address(RVA = "0xB123D8", Offset = "0xB123D8", VA = "0xB123D8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001EC")]
		protected Material materialApply
		{
			[Token(Token = "0x600118A")]
			[Address(RVA = "0xB124AC", Offset = "0xB124AC", VA = "0xB124AC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600118B")]
		[Address(RVA = "0xB12580", Offset = "0xB12580", VA = "0xB12580")]
		private void Start()
		{
		}

		[Token(Token = "0x600118C")]
		[Address(RVA = "0xB12604", Offset = "0xB12604", VA = "0xB12604")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600118D")]
		[Address(RVA = "0xB12750", Offset = "0xB12750", VA = "0xB12750")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600118E")]
		[Address(RVA = "0xB1292C", Offset = "0xB1292C", VA = "0xB1292C")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600118F")]
		[Address(RVA = "0xB12B6C", Offset = "0xB12B6C", VA = "0xB12B6C")]
		private void CalculateAdaptation(Texture curTexture)
		{
		}

		[Token(Token = "0x6001190")]
		[Address(RVA = "0xB12D24", Offset = "0xB12D24", VA = "0xB12D24")]
		public ContrastStretch()
		{
		}
	}
	[Token(Token = "0x20002CA")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(Camera))]
	[AddComponentMenu("Image Effects/Edge Detection/Crease Shading")]
	public class CreaseShading : PostEffectsBase
	{
		[Token(Token = "0x400104B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float intensity;

		[Token(Token = "0x400104C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int softness;

		[Token(Token = "0x400104D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float spread;

		[Token(Token = "0x400104E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Shader blurShader;

		[Token(Token = "0x400104F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Material blurMaterial;

		[Token(Token = "0x4001050")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Shader depthFetchShader;

		[Token(Token = "0x4001051")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material depthFetchMaterial;

		[Token(Token = "0x4001052")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader creaseApplyShader;

		[Token(Token = "0x4001053")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Material creaseApplyMaterial;

		[Token(Token = "0x6001191")]
		[Address(RVA = "0xB12DA0", Offset = "0xB12DA0", VA = "0xB12DA0", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6001192")]
		[Address(RVA = "0xB12E50", Offset = "0xB12E50", VA = "0xB12E50")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6001193")]
		[Address(RVA = "0xB131C8", Offset = "0xB131C8", VA = "0xB131C8")]
		public CreaseShading()
		{
		}
	}
	[Token(Token = "0x20002CB")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(Camera))]
	[AddComponentMenu("Image Effects/Camera/Depth of Field (deprecated)")]
	public class DepthOfFieldDeprecated : PostEffectsBase
	{
		[Token(Token = "0x20002CC")]
		public enum Dof34QualitySetting
		{
			[Token(Token = "0x4001080")]
			OnlyBackground = 1,
			[Token(Token = "0x4001081")]
			BackgroundAndForeground
		}

		[Token(Token = "0x20002CD")]
		public enum DofResolution
		{
			[Token(Token = "0x4001083")]
			High = 2,
			[Token(Token = "0x4001084")]
			Medium,
			[Token(Token = "0x4001085")]
			Low
		}

		[Token(Token = "0x20002CE")]
		public enum DofBlurriness
		{
			[Token(Token = "0x4001087")]
			Low = 1,
			[Token(Token = "0x4001088")]
			High = 2,
			[Token(Token = "0x4001089")]
			VeryHigh = 4
		}

		[Token(Token = "0x20002CF")]
		public enum BokehDestination
		{
			[Token(Token = "0x400108B")]
			Background = 1,
			[Token(Token = "0x400108C")]
			Foreground,
			[Token(Token = "0x400108D")]
			BackgroundAndForeground
		}

		[Token(Token = "0x4001054")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int SMOOTH_DOWNSAMPLE_PASS;

		[Token(Token = "0x4001055")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static float BOKEH_EXTRA_BLUR;

		[Token(Token = "0x4001056")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Dof34QualitySetting quality;

		[Token(Token = "0x4001057")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DofResolution resolution;

		[Token(Token = "0x4001058")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool simpleTweakMode;

		[Token(Token = "0x4001059")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float focalPoint;

		[Token(Token = "0x400105A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float smoothness;

		[Token(Token = "0x400105B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float focalZDistance;

		[Token(Token = "0x400105C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float focalZStartCurve;

		[Token(Token = "0x400105D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float focalZEndCurve;

		[Token(Token = "0x400105E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float focalStartCurve;

		[Token(Token = "0x400105F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float focalEndCurve;

		[Token(Token = "0x4001060")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float focalDistance01;

		[Token(Token = "0x4001061")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform objectFocus;

		[Token(Token = "0x4001062")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float focalSize;

		[Token(Token = "0x4001063")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public DofBlurriness bluriness;

		[Token(Token = "0x4001064")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float maxBlurSpread;

		[Token(Token = "0x4001065")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float foregroundBlurExtrude;

		[Token(Token = "0x4001066")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Shader dofBlurShader;

		[Token(Token = "0x4001067")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Material dofBlurMaterial;

		[Token(Token = "0x4001068")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Shader dofShader;

		[Token(Token = "0x4001069")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Material dofMaterial;

		[Token(Token = "0x400106A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public bool visualize;

		[Token(Token = "0x400106B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public BokehDestination bokehDestination;

		[Token(Token = "0x400106C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float widthOverHeight;

		[Token(Token = "0x400106D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float oneOverBaseSize;

		[Token(Token = "0x400106E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public bool bokeh;

		[Token(Token = "0x400106F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
		public bool bokehSupport;

		[Token(Token = "0x4001070")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Shader bokehShader;

		[Token(Token = "0x4001071")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Texture2D bokehTexture;

		[Token(Token = "0x4001072")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public float bokehScale;

		[Token(Token = "0x4001073")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public float bokehIntensity;

		[Token(Token = "0x4001074")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public float bokehThresholdContrast;

		[Token(Token = "0x4001075")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public float bokehThresholdLuminance;

		[Token(Token = "0x4001076")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public int bokehDownsample;

		[Token(Token = "0x4001077")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Material bokehMaterial;

		[Token(Token = "0x4001078")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Camera _camera;

		[Token(Token = "0x4001079")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private RenderTexture foregroundTexture;

		[Token(Token = "0x400107A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private RenderTexture mediumRezWorkTexture;

		[Token(Token = "0x400107B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private RenderTexture finalDefocus;

		[Token(Token = "0x400107C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private RenderTexture lowRezWorkTexture;

		[Token(Token = "0x400107D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private RenderTexture bokehSource;

		[Token(Token = "0x400107E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private RenderTexture bokehSource2;

		[Token(Token = "0x6001194")]
		[Address(RVA = "0xB131F0", Offset = "0xB131F0", VA = "0xB131F0")]
		private void CreateMaterials()
		{
		}

		[Token(Token = "0x6001195")]
		[Address(RVA = "0xB132F0", Offset = "0xB132F0", VA = "0xB132F0", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6001196")]
		[Address(RVA = "0xB13418", Offset = "0xB13418", VA = "0xB13418")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001197")]
		[Address(RVA = "0xB13580", Offset = "0xB13580", VA = "0xB13580")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001198")]
		[Address(RVA = "0xB13600", Offset = "0xB13600", VA = "0xB13600")]
		private float FocalDistance01(float worldDist)
		{
			return default(float);
		}

		[Token(Token = "0x6001199")]
		[Address(RVA = "0xB136EC", Offset = "0xB136EC", VA = "0xB136EC")]
		private int GetDividerBasedOnQuality()
		{
			return default(int);
		}

		[Token(Token = "0x600119A")]
		[Address(RVA = "0xB13710", Offset = "0xB13710", VA = "0xB13710")]
		private int GetLowResolutionDividerBasedOnQuality(int baseDivider)
		{
			return default(int);
		}

		[Token(Token = "0x600119B")]
		[Address(RVA = "0xB13734", Offset = "0xB13734", VA = "0xB13734")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600119C")]
		[Address(RVA = "0xB144A0", Offset = "0xB144A0", VA = "0xB144A0")]
		private void Blur(RenderTexture from, RenderTexture to, DofBlurriness iterations, int blurPass, float spread)
		{
		}

		[Token(Token = "0x600119D")]
		[Address(RVA = "0xB14A50", Offset = "0xB14A50", VA = "0xB14A50")]
		private void BlurFg(RenderTexture from, RenderTexture to, DofBlurriness iterations, int blurPass, float spread)
		{
		}

		[Token(Token = "0x600119E")]
		[Address(RVA = "0xB14DC4", Offset = "0xB14DC4", VA = "0xB14DC4")]
		private void BlurHex(RenderTexture from, RenderTexture to, int blurPass, float spread, RenderTexture tmp)
		{
		}

		[Token(Token = "0x600119F")]
		[Address(RVA = "0xB14378", Offset = "0xB14378", VA = "0xB14378")]
		private void Downsample(RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x60011A0")]
		[Address(RVA = "0xB14680", Offset = "0xB14680", VA = "0xB14680")]
		private void AddBokeh(RenderTexture bokehInfo, RenderTexture tempTex, RenderTexture finalTarget)
		{
		}

		[Token(Token = "0x60011A1")]
		[Address(RVA = "0xB14C5C", Offset = "0xB14C5C", VA = "0xB14C5C")]
		private void ReleaseTextures()
		{
		}

		[Token(Token = "0x60011A2")]
		[Address(RVA = "0xB13FC8", Offset = "0xB13FC8", VA = "0xB13FC8")]
		private void AllocateTextures(bool blurForeground, RenderTexture source, int divider, int lowTexDivider)
		{
		}

		[Token(Token = "0x60011A3")]
		[Address(RVA = "0xB1519C", Offset = "0xB1519C", VA = "0xB1519C")]
		public DepthOfFieldDeprecated()
		{
		}
	}
	[Token(Token = "0x20002D0")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(Camera))]
	[AddComponentMenu("Image Effects/Displacement/Fisheye")]
	public class Fisheye : PostEffectsBase
	{
		[Token(Token = "0x400108E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Range(0f, 1.5f)]
		public float strengthX;

		[Token(Token = "0x400108F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 1.5f)]
		public float strengthY;

		[Token(Token = "0x4001090")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Shader fishEyeShader;

		[Token(Token = "0x4001091")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Material fisheyeMaterial;

		[Token(Token = "0x60011A5")]
		[Address(RVA = "0xB1526C", Offset = "0xB1526C", VA = "0xB1526C", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60011A6")]
		[Address(RVA = "0xB152D4", Offset = "0xB152D4", VA = "0xB152D4")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60011A7")]
		[Address(RVA = "0xB15408", Offset = "0xB15408", VA = "0xB15408")]
		public Fisheye()
		{
		}
	}
	[Token(Token = "0x20002D1")]
	[AddComponentMenu("Image Effects/Rendering/Global Fog")]
	[RequireComponent(typeof(Camera))]
	[ExecuteInEditMode]
	internal class GlobalFog : PostEffectsBase
	{
		[Token(Token = "0x4001092")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
		[Tooltip("Apply distance-based fog?")]
		public bool distanceFog;

		[Token(Token = "0x4001093")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Exclude far plane pixels from distance-based fog? (Skybox or clear color)")]
		public bool excludeFarPixels;

		[Token(Token = "0x4001094")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		[Tooltip("Distance fog is based on radial distance from camera when checked")]
		public bool useRadialDistance;

		[Token(Token = "0x4001095")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
		[Tooltip("Apply height-based fog?")]
		public bool heightFog;

		[Token(Token = "0x4001096")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Fog top Y coordinate")]
		public float height;

		[Token(Token = "0x4001097")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Range(0.001f, 10f)]
		public float heightDensity;

		[Token(Token = "0x4001098")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Push fog away from the camera by this amount")]
		public float startDistance;

		[Token(Token = "0x4001099")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Shader fogShader;

		[Token(Token = "0x400109A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Material fogMaterial;

		[Token(Token = "0x60011A8")]
		[Address(RVA = "0xB1542C", Offset = "0xB1542C", VA = "0xB1542C", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60011A9")]
		[Address(RVA = "0xB15494", Offset = "0xB15494", VA = "0xB15494")]
		[ImageEffectOpaque]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60011AA")]
		[Address(RVA = "0xB15DCC", Offset = "0xB15DCC", VA = "0xB15DCC")]
		private static void CustomGraphicsBlit(RenderTexture source, RenderTexture dest, Material fxMaterial, int passNr)
		{
		}

		[Token(Token = "0x60011AB")]
		[Address(RVA = "0xB15F2C", Offset = "0xB15F2C", VA = "0xB15F2C")]
		public GlobalFog()
		{
		}
	}
	[Token(Token = "0x20002D2")]
	[AddComponentMenu("")]
	[RequireComponent(typeof(Camera))]
	public class ImageEffectBase : MonoBehaviour
	{
		[Token(Token = "0x400109B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Shader shader;

		[Token(Token = "0x400109C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Material m_Material;

		[Token(Token = "0x170001ED")]
		protected Material material
		{
			[Token(Token = "0x60011AD")]
			[Address(RVA = "0xB11D70", Offset = "0xB11D70", VA = "0xB11D70")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60011AC")]
		[Address(RVA = "0xB15F58", Offset = "0xB15F58", VA = "0xB15F58", Slot = "4")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x60011AE")]
		[Address(RVA = "0xB15FF8", Offset = "0xB15FF8", VA = "0xB15FF8", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x60011AF")]
		[Address(RVA = "0xB11E4C", Offset = "0xB11E4C", VA = "0xB11E4C")]
		public ImageEffectBase()
		{
		}
	}
	[Token(Token = "0x20002D3")]
	[AddComponentMenu("")]
	public class ImageEffects
	{
		[Token(Token = "0x60011B0")]
		[Address(RVA = "0xB16084", Offset = "0xB16084", VA = "0xB16084")]
		public static void RenderDistortion(Material material, RenderTexture source, RenderTexture destination, float angle, Vector2 center, Vector2 radius)
		{
		}

		[Token(Token = "0x60011B1")]
		[Address(RVA = "0xB162F4", Offset = "0xB162F4", VA = "0xB162F4")]
		[Obsolete("Use Graphics.Blit(source,dest) instead")]
		public static void Blit(RenderTexture source, RenderTexture dest)
		{
		}

		[Token(Token = "0x60011B2")]
		[Address(RVA = "0xB1635C", Offset = "0xB1635C", VA = "0xB1635C")]
		[Obsolete("Use Graphics.Blit(source, destination, material) instead")]
		public static void BlitWithMaterial(Material material, RenderTexture source, RenderTexture dest)
		{
		}

		[Token(Token = "0x60011B3")]
		[Address(RVA = "0xB163CC", Offset = "0xB163CC", VA = "0xB163CC")]
		public ImageEffects()
		{
		}
	}
	[Token(Token = "0x20002D4")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(Camera))]
	[AddComponentMenu("Image Effects/Blur/Motion Blur (Color Accumulation)")]
	public class MotionBlur : ImageEffectBase
	{
		[Token(Token = "0x400109D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Range(0f, 0.92f)]
		public float blurAmount;

		[Token(Token = "0x400109E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool extraBlur;

		[Token(Token = "0x400109F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private RenderTexture accumTexture;

		[Token(Token = "0x60011B4")]
		[Address(RVA = "0xB163D4", Offset = "0xB163D4", VA = "0xB163D4", Slot = "4")]
		protected override void Start()
		{
		}

		[Token(Token = "0x60011B5")]
		[Address(RVA = "0xB16408", Offset = "0xB16408", VA = "0xB16408", Slot = "5")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x60011B6")]
		[Address(RVA = "0xB1646C", Offset = "0xB1646C", VA = "0xB1646C")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60011B7")]
		[Address(RVA = "0xB167D4", Offset = "0xB167D4", VA = "0xB167D4")]
		public MotionBlur()
		{
		}
	}
	[Token(Token = "0x20002D5")]
	[RequireComponent(typeof(Camera))]
	[AddComponentMenu("Image Effects/Noise/Noise And Grain (Filmic)")]
	[ExecuteInEditMode]
	public class NoiseAndGrain : PostEffectsBase
	{
		[Token(Token = "0x40010A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float intensityMultiplier;

		[Token(Token = "0x40010A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float generalIntensity;

		[Token(Token = "0x40010A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float blackIntensity;

		[Token(Token = "0x40010A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float whiteIntensity;

		[Token(Token = "0x40010A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float midGrey;

		[Token(Token = "0x40010A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool dx11Grain;

		[Token(Token = "0x40010A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float softness;

		[Token(Token = "0x40010A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool monochrome;

		[Token(Token = "0x40010A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector3 intensities;

		[Token(Token = "0x40010A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector3 tiling;

		[Token(Token = "0x40010AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float monochromeTiling;

		[Token(Token = "0x40010AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public FilterMode filterMode;

		[Token(Token = "0x40010AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Texture2D noiseTexture;

		[Token(Token = "0x40010AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Shader noiseShader;

		[Token(Token = "0x40010AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Material noiseMaterial;

		[Token(Token = "0x40010AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Shader dx11NoiseShader;

		[Token(Token = "0x40010B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Material dx11NoiseMaterial;

		[Token(Token = "0x40010B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static float TILE_AMOUNT;

		[Token(Token = "0x60011B8")]
		[Address(RVA = "0xB167E8", Offset = "0xB167E8", VA = "0xB167E8", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60011B9")]
		[Address(RVA = "0xB16884", Offset = "0xB16884", VA = "0xB16884")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60011BA")]
		[Address(RVA = "0xB17084", Offset = "0xB17084", VA = "0xB17084")]
		private static void DrawNoiseQuadGrid(RenderTexture source, RenderTexture dest, Material fxMaterial, Texture2D noise, int passNr)
		{
		}

		[Token(Token = "0x60011BB")]
		[Address(RVA = "0xB173C4", Offset = "0xB173C4", VA = "0xB173C4")]
		public NoiseAndGrain()
		{
		}
	}
	[Token(Token = "0x20002D6")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(Camera))]
	public class PostEffectsBase : MonoBehaviour
	{
		[Token(Token = "0x40010B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected bool supportHDRTextures;

		[Token(Token = "0x40010B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		protected bool supportDX11;

		[Token(Token = "0x40010B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		protected bool isSupported;

		[Token(Token = "0x60011BD")]
		[Address(RVA = "0xB0CD50", Offset = "0xB0CD50", VA = "0xB0CD50")]
		protected Material CheckShaderAndCreateMaterial(Shader s, Material m2Create)
		{
			return null;
		}

		[Token(Token = "0x60011BE")]
		[Address(RVA = "0xB17480", Offset = "0xB17480", VA = "0xB17480")]
		protected Material CreateMaterial(Shader s, Material m2Create)
		{
			return null;
		}

		[Token(Token = "0x60011BF")]
		[Address(RVA = "0xB17664", Offset = "0xB17664", VA = "0xB17664")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60011C0")]
		[Address(RVA = "0xB17670", Offset = "0xB17670", VA = "0xB17670")]
		protected bool CheckSupport()
		{
			return default(bool);
		}

		[Token(Token = "0x60011C1")]
		[Address(RVA = "0xB17678", Offset = "0xB17678", VA = "0xB17678", Slot = "4")]
		public virtual bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60011C2")]
		[Address(RVA = "0xB10334", Offset = "0xB10334", VA = "0xB10334")]
		protected void Start()
		{
		}

		[Token(Token = "0x60011C3")]
		[Address(RVA = "0xB0CC4C", Offset = "0xB0CC4C", VA = "0xB0CC4C")]
		protected bool CheckSupport(bool needDepth)
		{
			return default(bool);
		}

		[Token(Token = "0x60011C4")]
		[Address(RVA = "0xB0E5C8", Offset = "0xB0E5C8", VA = "0xB0E5C8")]
		protected bool CheckSupport(bool needDepth, bool needHdr)
		{
			return default(bool);
		}

		[Token(Token = "0x60011C5")]
		[Address(RVA = "0xB17738", Offset = "0xB17738", VA = "0xB17738")]
		public bool Dx11Support()
		{
			return default(bool);
		}

		[Token(Token = "0x60011C6")]
		[Address(RVA = "0xB0D15C", Offset = "0xB0D15C", VA = "0xB0D15C")]
		protected void ReportAutoDisable()
		{
		}

		[Token(Token = "0x60011C7")]
		[Address(RVA = "0xB17740", Offset = "0xB17740", VA = "0xB17740")]
		private bool CheckShader(Shader s)
		{
			return default(bool);
		}

		[Token(Token = "0x60011C8")]
		[Address(RVA = "0xB17460", Offset = "0xB17460", VA = "0xB17460")]
		protected void NotSupported()
		{
		}

		[Token(Token = "0x60011C9")]
		[Address(RVA = "0xB179C4", Offset = "0xB179C4", VA = "0xB179C4")]
		protected void DrawBorder(RenderTexture dest, Material material)
		{
		}

		[Token(Token = "0x60011CA")]
		[Address(RVA = "0xB0D63C", Offset = "0xB0D63C", VA = "0xB0D63C")]
		public PostEffectsBase()
		{
		}
	}
	[Token(Token = "0x20002D7")]
	[RequireComponent(typeof(Camera))]
	[ExecuteInEditMode]
	internal class PostEffectsHelper : MonoBehaviour
	{
		[Token(Token = "0x60011CB")]
		[Address(RVA = "0xB17D3C", Offset = "0xB17D3C", VA = "0xB17D3C")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60011CC")]
		[Address(RVA = "0xB17DA4", Offset = "0xB17DA4", VA = "0xB17DA4")]
		private static void DrawLowLevelPlaneAlignedWithCamera(float dist, RenderTexture source, RenderTexture dest, Material material, Camera cameraForProjectionMatrix)
		{
		}

		[Token(Token = "0x60011CD")]
		[Address(RVA = "0xB17FF0", Offset = "0xB17FF0", VA = "0xB17FF0")]
		private static void DrawBorder(RenderTexture dest, Material material)
		{
		}

		[Token(Token = "0x60011CE")]
		[Address(RVA = "0xB18364", Offset = "0xB18364", VA = "0xB18364")]
		private static void DrawLowLevelQuad(float x1, float x2, float y1, float y2, RenderTexture source, RenderTexture dest, Material material)
		{
		}

		[Token(Token = "0x60011CF")]
		[Address(RVA = "0xB18508", Offset = "0xB18508", VA = "0xB18508")]
		public PostEffectsHelper()
		{
		}
	}
	[Token(Token = "0x20002D8")]
	internal class Quads
	{
		[Token(Token = "0x40010B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Mesh[] meshes;

		[Token(Token = "0x40010B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static int currentQuads;

		[Token(Token = "0x60011D0")]
		[Address(RVA = "0xB18510", Offset = "0xB18510", VA = "0xB18510")]
		private static bool HasMeshes()
		{
			return default(bool);
		}

		[Token(Token = "0x60011D1")]
		[Address(RVA = "0xB1341C", Offset = "0xB1341C", VA = "0xB1341C")]
		public static void Cleanup()
		{
		}

		[Token(Token = "0x60011D2")]
		[Address(RVA = "0xB14F64", Offset = "0xB14F64", VA = "0xB14F64")]
		public static Mesh[] GetMeshes(int totalWidth, int totalHeight)
		{
			return null;
		}

		[Token(Token = "0x60011D3")]
		[Address(RVA = "0xB185E0", Offset = "0xB185E0", VA = "0xB185E0")]
		private static Mesh GetMesh(int triCount, int triOffset, int totalWidth, int totalHeight)
		{
			return null;
		}

		[Token(Token = "0x60011D4")]
		[Address(RVA = "0xB18964", Offset = "0xB18964", VA = "0xB18964")]
		public Quads()
		{
		}
	}
	[Token(Token = "0x20002D9")]
	[AddComponentMenu("Image Effects/Other/Screen Overlay")]
	[RequireComponent(typeof(Camera))]
	[ExecuteInEditMode]
	public class ScreenOverlay : PostEffectsBase
	{
		[Token(Token = "0x20002DA")]
		public enum OverlayBlendMode
		{
			[Token(Token = "0x40010BD")]
			Additive,
			[Token(Token = "0x40010BE")]
			ScreenBlend,
			[Token(Token = "0x40010BF")]
			Multiply,
			[Token(Token = "0x40010C0")]
			Overlay,
			[Token(Token = "0x40010C1")]
			AlphaBlend
		}

		[Token(Token = "0x40010B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public OverlayBlendMode blendMode;

		[Token(Token = "0x40010B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float intensity;

		[Token(Token = "0x40010B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Texture2D texture;

		[Token(Token = "0x40010BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Shader overlayShader;

		[Token(Token = "0x40010BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Material overlayMaterial;

		[Token(Token = "0x60011D5")]
		[Address(RVA = "0xB1896C", Offset = "0xB1896C", VA = "0xB1896C", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60011D6")]
		[Address(RVA = "0xB189D4", Offset = "0xB189D4", VA = "0xB189D4")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60011D7")]
		[Address(RVA = "0xB18B24", Offset = "0xB18B24", VA = "0xB18B24")]
		public ScreenOverlay()
		{
		}
	}
	[Token(Token = "0x20002DB")]
	[RequireComponent(typeof(Camera))]
	[ExecuteInEditMode]
	[AddComponentMenu("Image Effects/Rendering/Screen Space Ambient Obscurance")]
	internal class ScreenSpaceAmbientObscurance : PostEffectsBase
	{
		[Token(Token = "0x40010C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Range(0f, 3f)]
		public float intensity;

		[Token(Token = "0x40010C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0.1f, 3f)]
		public float radius;

		[Token(Token = "0x40010C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Range(0f, 3f)]
		public int blurIterations;

		[Token(Token = "0x40010C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Range(0f, 5f)]
		public float blurFilterDistance;

		[Token(Token = "0x40010C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Range(0f, 1f)]
		public int downsample;

		[Token(Token = "0x40010C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Texture2D rand;

		[Token(Token = "0x40010C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Shader aoShader;

		[Token(Token = "0x40010C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material aoMaterial;

		[Token(Token = "0x60011D8")]
		[Address(RVA = "0xB18B44", Offset = "0xB18B44", VA = "0xB18B44", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60011D9")]
		[Address(RVA = "0xB18BAC", Offset = "0xB18BAC", VA = "0xB18BAC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60011DA")]
		[Address(RVA = "0xB18C3C", Offset = "0xB18C3C", VA = "0xB18C3C")]
		[ImageEffectOpaque]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60011DB")]
		[Address(RVA = "0xB191EC", Offset = "0xB191EC", VA = "0xB191EC")]
		public ScreenSpaceAmbientObscurance()
		{
		}
	}
	[Token(Token = "0x20002DC")]
	[AddComponentMenu("Image Effects/Rendering/Screen Space Ambient Occlusion")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(Camera))]
	public class ScreenSpaceAmbientOcclusion : MonoBehaviour
	{
		[Token(Token = "0x20002DD")]
		public enum SSAOSamples
		{
			[Token(Token = "0x40010D6")]
			Low,
			[Token(Token = "0x40010D7")]
			Medium,
			[Token(Token = "0x40010D8")]
			High
		}

		[Token(Token = "0x40010CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0.05f, 1f)]
		public float m_Radius;

		[Token(Token = "0x40010CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public SSAOSamples m_SampleCount;

		[Token(Token = "0x40010CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0.5f, 4f)]
		public float m_OcclusionIntensity;

		[Token(Token = "0x40010CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Range(0f, 4f)]
		public int m_Blur;

		[Token(Token = "0x40010CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Range(1f, 6f)]
		public int m_Downsampling;

		[Token(Token = "0x40010CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Range(0.2f, 2f)]
		public float m_OcclusionAttenuation;

		[Token(Token = "0x40010D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Range(1E-05f, 0.5f)]
		public float m_MinZ;

		[Token(Token = "0x40010D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Shader m_SSAOShader;

		[Token(Token = "0x40010D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material m_SSAOMaterial;

		[Token(Token = "0x40010D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Texture2D m_RandomTexture;

		[Token(Token = "0x40010D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool m_Supported;

		[Token(Token = "0x60011DC")]
		[Address(RVA = "0xB19218", Offset = "0xB19218", VA = "0xB19218")]
		private static Material CreateMaterial(Shader shader)
		{
			return null;
		}

		[Token(Token = "0x60011DD")]
		[Address(RVA = "0xB192C4", Offset = "0xB192C4", VA = "0xB192C4")]
		private static void DestroyMaterial(Material mat)
		{
		}

		[Token(Token = "0x60011DE")]
		[Address(RVA = "0xB19348", Offset = "0xB19348", VA = "0xB19348")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60011DF")]
		[Address(RVA = "0xB19350", Offset = "0xB19350", VA = "0xB19350")]
		private void Start()
		{
		}

		[Token(Token = "0x60011E0")]
		[Address(RVA = "0xB194F0", Offset = "0xB194F0", VA = "0xB194F0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60011E1")]
		[Address(RVA = "0xB19418", Offset = "0xB19418", VA = "0xB19418")]
		private void CreateMaterials()
		{
		}

		[Token(Token = "0x60011E2")]
		[Address(RVA = "0xB1955C", Offset = "0xB1955C", VA = "0xB1955C")]
		[ImageEffectOpaque]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60011E3")]
		[Address(RVA = "0xB19B30", Offset = "0xB19B30", VA = "0xB19B30")]
		public ScreenSpaceAmbientOcclusion()
		{
		}
	}
	[Token(Token = "0x20002DE")]
	[AddComponentMenu("Image Effects/Camera/Tilt Shift (Lens Blur)")]
	[RequireComponent(typeof(Camera))]
	internal class TiltShift : PostEffectsBase
	{
		[Token(Token = "0x20002DF")]
		public enum TiltShiftMode
		{
			[Token(Token = "0x40010E1")]
			TiltShiftMode,
			[Token(Token = "0x40010E2")]
			IrisMode
		}

		[Token(Token = "0x20002E0")]
		public enum TiltShiftQuality
		{
			[Token(Token = "0x40010E4")]
			Preview,
			[Token(Token = "0x40010E5")]
			Normal,
			[Token(Token = "0x40010E6")]
			High
		}

		[Token(Token = "0x40010D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public TiltShiftMode mode;

		[Token(Token = "0x40010DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TiltShiftQuality quality;

		[Token(Token = "0x40010DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Range(0f, 15f)]
		public float blurArea;

		[Token(Token = "0x40010DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Range(0f, 25f)]
		public float maxBlurSize;

		[Token(Token = "0x40010DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Range(0f, 1f)]
		public int downsample;

		[Token(Token = "0x40010DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Shader tiltShiftShader;

		[Token(Token = "0x40010DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Material tiltShiftMaterial;

		[Token(Token = "0x60011E4")]
		[Address(RVA = "0xB19B64", Offset = "0xB19B64", VA = "0xB19B64", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60011E5")]
		[Address(RVA = "0xB19BCC", Offset = "0xB19BCC", VA = "0xB19BCC")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60011E6")]
		[Address(RVA = "0xB19E5C", Offset = "0xB19E5C", VA = "0xB19E5C")]
		public TiltShift()
		{
		}
	}
	[Token(Token = "0x20002E1")]
	[AddComponentMenu("Image Effects/Color Adjustments/Tonemapping")]
	[RequireComponent(typeof(Camera))]
	[ExecuteInEditMode]
	public class Tonemapping : PostEffectsBase
	{
		[Token(Token = "0x20002E2")]
		public enum TonemapperType
		{
			[Token(Token = "0x40010F5")]
			SimpleReinhard,
			[Token(Token = "0x40010F6")]
			UserCurve,
			[Token(Token = "0x40010F7")]
			Hable,
			[Token(Token = "0x40010F8")]
			Photographic,
			[Token(Token = "0x40010F9")]
			OptimizedHejiDawson,
			[Token(Token = "0x40010FA")]
			AdaptiveReinhard,
			[Token(Token = "0x40010FB")]
			AdaptiveReinhardAutoWhite
		}

		[Token(Token = "0x20002E3")]
		public enum AdaptiveTexSize
		{
			[Token(Token = "0x40010FD")]
			Square16 = 0x10,
			[Token(Token = "0x40010FE")]
			Square32 = 0x20,
			[Token(Token = "0x40010FF")]
			Square64 = 0x40,
			[Token(Token = "0x4001100")]
			Square128 = 0x80,
			[Token(Token = "0x4001101")]
			Square256 = 0x100,
			[Token(Token = "0x4001102")]
			Square512 = 0x200,
			[Token(Token = "0x4001103")]
			Square1024 = 0x400
		}

		[Token(Token = "0x40010E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public TonemapperType type;

		[Token(Token = "0x40010E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AdaptiveTexSize adaptiveTextureSize;

		[Token(Token = "0x40010E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimationCurve remapCurve;

		[Token(Token = "0x40010EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Texture2D curveTex;

		[Token(Token = "0x40010EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float exposureAdjustment;

		[Token(Token = "0x40010EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float middleGrey;

		[Token(Token = "0x40010ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float white;

		[Token(Token = "0x40010EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float adaptionSpeed;

		[Token(Token = "0x40010EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader tonemapper;

		[Token(Token = "0x40010F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool validRenderTextureFormat;

		[Token(Token = "0x40010F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Material tonemapMaterial;

		[Token(Token = "0x40010F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private RenderTexture rt;

		[Token(Token = "0x40010F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private RenderTextureFormat rtFormat;

		[Token(Token = "0x60011E7")]
		[Address(RVA = "0xB19E80", Offset = "0xB19E80", VA = "0xB19E80", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60011E8")]
		[Address(RVA = "0xB19FE4", Offset = "0xB19FE4", VA = "0xB19FE4")]
		public float UpdateCurve()
		{
			return default(float);
		}

		[Token(Token = "0x60011E9")]
		[Address(RVA = "0xB1A264", Offset = "0xB1A264", VA = "0xB1A264")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60011EA")]
		[Address(RVA = "0xB1A3BC", Offset = "0xB1A3BC", VA = "0xB1A3BC")]
		private bool CreateInternalRenderTexture()
		{
			return default(bool);
		}

		[Token(Token = "0x60011EB")]
		[Address(RVA = "0xB1A4BC", Offset = "0xB1A4BC", VA = "0xB1A4BC")]
		[ImageEffectTransformsToLDR]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60011EC")]
		[Address(RVA = "0xB1AC5C", Offset = "0xB1AC5C", VA = "0xB1AC5C")]
		public Tonemapping()
		{
		}
	}
	[Token(Token = "0x20002E4")]
	internal class Triangles
	{
		[Token(Token = "0x4001104")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Mesh[] meshes;

		[Token(Token = "0x4001105")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static int currentTris;

		[Token(Token = "0x60011ED")]
		[Address(RVA = "0xB1AC94", Offset = "0xB1AC94", VA = "0xB1AC94")]
		private static bool HasMeshes()
		{
			return default(bool);
		}

		[Token(Token = "0x60011EE")]
		[Address(RVA = "0xB1AD68", Offset = "0xB1AD68", VA = "0xB1AD68")]
		private static void Cleanup()
		{
		}

		[Token(Token = "0x60011EF")]
		[Address(RVA = "0xB1AECC", Offset = "0xB1AECC", VA = "0xB1AECC")]
		private static Mesh[] GetMeshes(int totalWidth, int totalHeight)
		{
			return null;
		}

		[Token(Token = "0x60011F0")]
		[Address(RVA = "0xB1B104", Offset = "0xB1B104", VA = "0xB1B104")]
		private static Mesh GetMesh(int triCount, int triOffset, int totalWidth, int totalHeight)
		{
			return null;
		}

		[Token(Token = "0x60011F1")]
		[Address(RVA = "0xB1B3F8", Offset = "0xB1B3F8", VA = "0xB1B3F8")]
		public Triangles()
		{
		}
	}
	[Token(Token = "0x20002E5")]
	[AddComponentMenu("Image Effects/Camera/Vignette and Chromatic Aberration")]
	[RequireComponent(typeof(Camera))]
	[ExecuteInEditMode]
	public class VignetteAndChromaticAberration : PostEffectsBase
	{
		[Token(Token = "0x20002E6")]
		public enum AberrationMode
		{
			[Token(Token = "0x4001115")]
			Simple,
			[Token(Token = "0x4001116")]
			Advanced
		}

		[Token(Token = "0x4001106")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public AberrationMode mode;

		[Token(Token = "0x4001107")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float intensity;

		[Token(Token = "0x4001108")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float chromaticAberration;

		[Token(Token = "0x4001109")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float axialAberration;

		[Token(Token = "0x400110A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float blur;

		[Token(Token = "0x400110B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float blurSpread;

		[Token(Token = "0x400110C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float luminanceDependency;

		[Token(Token = "0x400110D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float blurDistance;

		[Token(Token = "0x400110E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Shader vignetteShader;

		[Token(Token = "0x400110F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader separableBlurShader;

		[Token(Token = "0x4001110")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Shader chromAberrationShader;

		[Token(Token = "0x4001111")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Material m_VignetteMaterial;

		[Token(Token = "0x4001112")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material m_SeparableBlurMaterial;

		[Token(Token = "0x4001113")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Material m_ChromAberrationMaterial;

		[Token(Token = "0x60011F2")]
		[Address(RVA = "0xB1B400", Offset = "0xB1B400", VA = "0xB1B400", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60011F3")]
		[Address(RVA = "0xB1B4B0", Offset = "0xB1B4B0", VA = "0xB1B4B0")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60011F4")]
		[Address(RVA = "0xB1BA04", Offset = "0xB1BA04", VA = "0xB1BA04")]
		public VignetteAndChromaticAberration()
		{
		}
	}
}
namespace LowPolyAnimalPack
{
	[Token(Token = "0x20002E7")]
	public class AnimalManager : MonoBehaviour
	{
		[Token(Token = "0x4001117")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private bool peaceTime;

		[Token(Token = "0x4001118")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<WanderScript> animals;

		[Token(Token = "0x4001119")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static AnimalManager instance;

		[Token(Token = "0x170001EE")]
		public bool PeaceTime
		{
			[Token(Token = "0x60011F5")]
			[Address(RVA = "0xB1BA40", Offset = "0xB1BA40", VA = "0xB1BA40")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60011F6")]
			[Address(RVA = "0xB1BA48", Offset = "0xB1BA48", VA = "0xB1BA48")]
			set
			{
			}
		}

		[Token(Token = "0x170001EF")]
		public static AnimalManager Instance
		{
			[Token(Token = "0x60011F7")]
			[Address(RVA = "0xB1BC98", Offset = "0xB1BC98", VA = "0xB1BC98")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60011F8")]
		[Address(RVA = "0xB1BCE0", Offset = "0xB1BCE0", VA = "0xB1BCE0")]
		private void Awake()
		{
		}

		[Token(Token = "0x60011F9")]
		[Address(RVA = "0xB1BDF0", Offset = "0xB1BDF0", VA = "0xB1BDF0")]
		private void Start()
		{
		}

		[Token(Token = "0x60011FA")]
		[Address(RVA = "0xB1BA50", Offset = "0xB1BA50", VA = "0xB1BA50")]
		public void SwitchPeaceTime(bool enabled)
		{
		}

		[Token(Token = "0x60011FB")]
		[Address(RVA = "0xB1BE7C", Offset = "0xB1BE7C", VA = "0xB1BE7C")]
		public void Nuke()
		{
		}

		[Token(Token = "0x60011FC")]
		[Address(RVA = "0xB1C020", Offset = "0xB1C020", VA = "0xB1C020")]
		public AnimalManager()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002E8")]
	public class AnimalState
	{
		[Token(Token = "0x400111A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string stateName;

		[Token(Token = "0x400111B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string animationBool;

		[Token(Token = "0x60011FD")]
		[Address(RVA = "0xB1C0A8", Offset = "0xB1C0A8", VA = "0xB1C0A8")]
		public AnimalState()
		{
		}
	}
	[Token(Token = "0x20002E9")]
	public class AudioManager : MonoBehaviour
	{
		[Token(Token = "0x20002EA")]
		[CompilerGenerated]
		private sealed class <ReturnToPool>d__8 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001122")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001123")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001124")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float delay;

			[Token(Token = "0x4001125")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public GameObject obj;

			[Token(Token = "0x170001F0")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001205")]
				[Address(RVA = "0xB1CB00", Offset = "0xB1CB00", VA = "0xB1CB00", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001F1")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001207")]
				[Address(RVA = "0xB1CB48", Offset = "0xB1CB48", VA = "0xB1CB48", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001202")]
			[Address(RVA = "0xB1C980", Offset = "0xB1C980", VA = "0xB1C980")]
			[DebuggerHidden]
			public <ReturnToPool>d__8(int <>1__state)
			{
			}

			[Token(Token = "0x6001203")]
			[Address(RVA = "0xB1CA3C", Offset = "0xB1CA3C", VA = "0xB1CA3C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001204")]
			[Address(RVA = "0xB1CA40", Offset = "0xB1CA40", VA = "0xB1CA40", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001206")]
			[Address(RVA = "0xB1CB08", Offset = "0xB1CB08", VA = "0xB1CB08", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400111C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static AudioManager instance;

		[Token(Token = "0x400111D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private bool muteSound;

		[Token(Token = "0x400111E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private int objectPoolLength;

		[Token(Token = "0x400111F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float soundDistance;

		[Token(Token = "0x4001120")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private bool logSounds;

		[Token(Token = "0x4001121")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<AudioSource> pool;

		[Token(Token = "0x60011FE")]
		[Address(RVA = "0xB1C134", Offset = "0xB1C134", VA = "0xB1C134")]
		private void Awake()
		{
		}

		[Token(Token = "0x60011FF")]
		[Address(RVA = "0xB1C354", Offset = "0xB1C354", VA = "0xB1C354")]
		public static void PlaySound(AudioClip clip, Vector3 pos)
		{
		}

		[Token(Token = "0x6001200")]
		[Address(RVA = "0xB1C8FC", Offset = "0xB1C8FC", VA = "0xB1C8FC")]
		[IteratorStateMachine(typeof(<ReturnToPool>d__8))]
		private IEnumerator ReturnToPool(GameObject obj, float delay)
		{
			return null;
		}

		[Token(Token = "0x6001201")]
		[Address(RVA = "0xB1C9A8", Offset = "0xB1C9A8", VA = "0xB1C9A8")]
		public AudioManager()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002EB")]
	public class IdleState : AnimalState
	{
		[Token(Token = "0x4001126")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float minStateTime;

		[Token(Token = "0x4001127")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float maxStateTime;

		[Token(Token = "0x4001128")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Chance of it choosing this state, in comparion to other state weights.")]
		public int stateWeight;

		[Token(Token = "0x6001208")]
		[Address(RVA = "0xB1CB50", Offset = "0xB1CB50", VA = "0xB1CB50")]
		public IdleState()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002EC")]
	public class MovementState : AnimalState
	{
		[Token(Token = "0x4001129")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float maxStateTime;

		[Token(Token = "0x400112A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float moveSpeed;

		[Token(Token = "0x400112B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float turnSpeed;

		[Token(Token = "0x6001209")]
		[Address(RVA = "0xB1CB6C", Offset = "0xB1CB6C", VA = "0xB1CB6C")]
		public MovementState()
		{
		}
	}
	[Token(Token = "0x20002ED")]
	public class SurfaceRotation : MonoBehaviour
	{
		[Token(Token = "0x400112C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string terrainLayer;

		[Token(Token = "0x400112D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int layer;

		[Token(Token = "0x400112E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private bool rotate;

		[Token(Token = "0x400112F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Quaternion targetRotation;

		[Token(Token = "0x4001130")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float rotationSpeed;

		[Token(Token = "0x600120A")]
		[Address(RVA = "0xB1CB88", Offset = "0xB1CB88", VA = "0xB1CB88")]
		private void Awake()
		{
		}

		[Token(Token = "0x600120B")]
		[Address(RVA = "0xB1CC34", Offset = "0xB1CC34", VA = "0xB1CC34")]
		private void Start()
		{
		}

		[Token(Token = "0x600120C")]
		[Address(RVA = "0xB1CE58", Offset = "0xB1CE58", VA = "0xB1CE58")]
		private void Update()
		{
		}

		[Token(Token = "0x600120D")]
		[Address(RVA = "0xB1D108", Offset = "0xB1D108", VA = "0xB1D108")]
		public void SetRotationSpeed(float speed)
		{
		}

		[Token(Token = "0x600120E")]
		[Address(RVA = "0xB1D118", Offset = "0xB1D118", VA = "0xB1D118")]
		private void OnBecameVisible()
		{
		}

		[Token(Token = "0x600120F")]
		[Address(RVA = "0xB1D124", Offset = "0xB1D124", VA = "0xB1D124")]
		private void OnBecameInvisible()
		{
		}

		[Token(Token = "0x6001210")]
		[Address(RVA = "0xB1D12C", Offset = "0xB1D12C", VA = "0xB1D12C")]
		public SurfaceRotation()
		{
		}
	}
	[Token(Token = "0x20002EE")]
	[RequireComponent(typeof(Animator))]
	[RequireComponent(typeof(CharacterController))]
	public class WanderScript : MonoBehaviour
	{
		[Token(Token = "0x20002EF")]
		[CompilerGenerated]
		private sealed class <InitYield>d__54 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400115F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001160")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001161")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public WanderScript <>4__this;

			[Token(Token = "0x170001F4")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001234")]
				[Address(RVA = "0xB20534", Offset = "0xB20534", VA = "0xB20534", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001F5")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001236")]
				[Address(RVA = "0xB2057C", Offset = "0xB2057C", VA = "0xB2057C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001231")]
			[Address(RVA = "0xB1DB08", Offset = "0xB1DB08", VA = "0xB1DB08")]
			[DebuggerHidden]
			public <InitYield>d__54(int <>1__state)
			{
			}

			[Token(Token = "0x6001232")]
			[Address(RVA = "0xB2044C", Offset = "0xB2044C", VA = "0xB2044C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001233")]
			[Address(RVA = "0xB20450", Offset = "0xB20450", VA = "0xB20450", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001235")]
			[Address(RVA = "0xB2053C", Offset = "0xB2053C", VA = "0xB2053C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20002F0")]
		[CompilerGenerated]
		private sealed class <IdleState>d__57 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001162")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001163")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001164")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public WanderScript <>4__this;

			[Token(Token = "0x4001165")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float stateTime;

			[Token(Token = "0x170001F6")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600123A")]
				[Address(RVA = "0xB206C8", Offset = "0xB206C8", VA = "0xB206C8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001F7")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600123C")]
				[Address(RVA = "0xB20710", Offset = "0xB20710", VA = "0xB20710", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001237")]
			[Address(RVA = "0xB1EFF0", Offset = "0xB1EFF0", VA = "0xB1EFF0")]
			[DebuggerHidden]
			public <IdleState>d__57(int <>1__state)
			{
			}

			[Token(Token = "0x6001238")]
			[Address(RVA = "0xB20584", Offset = "0xB20584", VA = "0xB20584", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001239")]
			[Address(RVA = "0xB20588", Offset = "0xB20588", VA = "0xB20588", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600123B")]
			[Address(RVA = "0xB206D0", Offset = "0xB206D0", VA = "0xB206D0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20002F1")]
		[CompilerGenerated]
		private sealed class <MovementState>d__59 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001166")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001167")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001168")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public WanderScript <>4__this;

			[Token(Token = "0x4001169")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 target;

			[Token(Token = "0x400116A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <timeMoving>5__2;

			[Token(Token = "0x170001F8")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001240")]
				[Address(RVA = "0xB20954", Offset = "0xB20954", VA = "0xB20954", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001F9")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001242")]
				[Address(RVA = "0xB2099C", Offset = "0xB2099C", VA = "0xB2099C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600123D")]
			[Address(RVA = "0xB1F1C0", Offset = "0xB1F1C0", VA = "0xB1F1C0")]
			[DebuggerHidden]
			public <MovementState>d__59(int <>1__state)
			{
			}

			[Token(Token = "0x600123E")]
			[Address(RVA = "0xB20718", Offset = "0xB20718", VA = "0xB20718", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600123F")]
			[Address(RVA = "0xB2071C", Offset = "0xB2071C", VA = "0xB2071C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001241")]
			[Address(RVA = "0xB2095C", Offset = "0xB2095C", VA = "0xB2095C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20002F2")]
		[CompilerGenerated]
		private sealed class <NonNavMeshMovementState>d__60 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400116B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400116C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400116D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public WanderScript <>4__this;

			[Token(Token = "0x400116E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 target;

			[Token(Token = "0x400116F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <walkTime>5__2;

			[Token(Token = "0x4001170")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <timeUntilAbortWalk>5__3;

			[Token(Token = "0x170001FA")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001246")]
				[Address(RVA = "0xB20E34", Offset = "0xB20E34", VA = "0xB20E34", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001FB")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001248")]
				[Address(RVA = "0xB20E7C", Offset = "0xB20E7C", VA = "0xB20E7C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001243")]
			[Address(RVA = "0xB1F1E8", Offset = "0xB1F1E8", VA = "0xB1F1E8")]
			[DebuggerHidden]
			public <NonNavMeshMovementState>d__60(int <>1__state)
			{
			}

			[Token(Token = "0x6001244")]
			[Address(RVA = "0xB209A4", Offset = "0xB209A4", VA = "0xB209A4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001245")]
			[Address(RVA = "0xB209A8", Offset = "0xB209A8", VA = "0xB209A8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001247")]
			[Address(RVA = "0xB20E3C", Offset = "0xB20E3C", VA = "0xB20E3C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20002F3")]
		[CompilerGenerated]
		private sealed class <RunAwayState>d__62 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001171")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001172")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001173")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public WanderScript <>4__this;

			[Token(Token = "0x4001174")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 target;

			[Token(Token = "0x4001175")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public WanderScript predator;

			[Token(Token = "0x4001176")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private float <timeMoving>5__2;

			[Token(Token = "0x170001FC")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600124C")]
				[Address(RVA = "0xB21184", Offset = "0xB21184", VA = "0xB21184", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001FD")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600124E")]
				[Address(RVA = "0xB211CC", Offset = "0xB211CC", VA = "0xB211CC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001249")]
			[Address(RVA = "0xB1F2C4", Offset = "0xB1F2C4", VA = "0xB1F2C4")]
			[DebuggerHidden]
			public <RunAwayState>d__62(int <>1__state)
			{
			}

			[Token(Token = "0x600124A")]
			[Address(RVA = "0xB20E84", Offset = "0xB20E84", VA = "0xB20E84", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600124B")]
			[Address(RVA = "0xB20E88", Offset = "0xB20E88", VA = "0xB20E88", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600124D")]
			[Address(RVA = "0xB2118C", Offset = "0xB2118C", VA = "0xB2118C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20002F4")]
		[CompilerGenerated]
		private sealed class <NonNavMeshRunAwayState>d__64 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001177")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001178")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001179")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public WanderScript <>4__this;

			[Token(Token = "0x400117A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 target;

			[Token(Token = "0x400117B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public WanderScript predator;

			[Token(Token = "0x400117C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private float <walkTime>5__2;

			[Token(Token = "0x400117D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			private float <timeUntilAbortWalk>5__3;

			[Token(Token = "0x170001FE")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001252")]
				[Address(RVA = "0xB2173C", Offset = "0xB2173C", VA = "0xB2173C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001FF")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001254")]
				[Address(RVA = "0xB21784", Offset = "0xB21784", VA = "0xB21784", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600124F")]
			[Address(RVA = "0xB1F3A0", Offset = "0xB1F3A0", VA = "0xB1F3A0")]
			[DebuggerHidden]
			public <NonNavMeshRunAwayState>d__64(int <>1__state)
			{
			}

			[Token(Token = "0x6001250")]
			[Address(RVA = "0xB211D4", Offset = "0xB211D4", VA = "0xB211D4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001251")]
			[Address(RVA = "0xB211D8", Offset = "0xB211D8", VA = "0xB211D8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001253")]
			[Address(RVA = "0xB21744", Offset = "0xB21744", VA = "0xB21744", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20002F5")]
		[CompilerGenerated]
		private sealed class <ChaseState>d__66 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400117E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400117F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001180")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public WanderScript <>4__this;

			[Token(Token = "0x4001181")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public WanderScript prey;

			[Token(Token = "0x4001182")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <timeMoving>5__2;

			[Token(Token = "0x4001183")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private bool <gotAway>5__3;

			[Token(Token = "0x17000200")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001258")]
				[Address(RVA = "0xB21DAC", Offset = "0xB21DAC", VA = "0xB21DAC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000201")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600125A")]
				[Address(RVA = "0xB21DF4", Offset = "0xB21DF4", VA = "0xB21DF4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001255")]
			[Address(RVA = "0xB1F518", Offset = "0xB1F518", VA = "0xB1F518")]
			[DebuggerHidden]
			public <ChaseState>d__66(int <>1__state)
			{
			}

			[Token(Token = "0x6001256")]
			[Address(RVA = "0xB2178C", Offset = "0xB2178C", VA = "0xB2178C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001257")]
			[Address(RVA = "0xB21790", Offset = "0xB21790", VA = "0xB21790", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001259")]
			[Address(RVA = "0xB21DB4", Offset = "0xB21DB4", VA = "0xB21DB4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20002F6")]
		[CompilerGenerated]
		private sealed class <NonNavMeshChaseState>d__67 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001184")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001185")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001186")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public WanderScript <>4__this;

			[Token(Token = "0x4001187")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public WanderScript prey;

			[Token(Token = "0x4001188")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <walkTime>5__2;

			[Token(Token = "0x4001189")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private bool <gotAway>5__3;

			[Token(Token = "0x400118A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <timeUntilAbortWalk>5__4;

			[Token(Token = "0x17000202")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600125E")]
				[Address(RVA = "0xB2267C", Offset = "0xB2267C", VA = "0xB2267C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000203")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001260")]
				[Address(RVA = "0xB226C4", Offset = "0xB226C4", VA = "0xB226C4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600125B")]
			[Address(RVA = "0xB1F540", Offset = "0xB1F540", VA = "0xB1F540")]
			[DebuggerHidden]
			public <NonNavMeshChaseState>d__67(int <>1__state)
			{
			}

			[Token(Token = "0x600125C")]
			[Address(RVA = "0xB21DFC", Offset = "0xB21DFC", VA = "0xB21DFC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600125D")]
			[Address(RVA = "0xB21E00", Offset = "0xB21E00", VA = "0xB21E00", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600125F")]
			[Address(RVA = "0xB22684", Offset = "0xB22684", VA = "0xB22684", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20002F7")]
		[CompilerGenerated]
		private sealed class <MakeAttack>d__69 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400118B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400118C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400118D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public WanderScript target;

			[Token(Token = "0x400118E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public WanderScript <>4__this;

			[Token(Token = "0x400118F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <timer>5__2;

			[Token(Token = "0x17000204")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001264")]
				[Address(RVA = "0xB22834", Offset = "0xB22834", VA = "0xB22834", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000205")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001266")]
				[Address(RVA = "0xB2287C", Offset = "0xB2287C", VA = "0xB2287C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001261")]
			[Address(RVA = "0xB1F7E0", Offset = "0xB1F7E0", VA = "0xB1F7E0")]
			[DebuggerHidden]
			public <MakeAttack>d__69(int <>1__state)
			{
			}

			[Token(Token = "0x6001262")]
			[Address(RVA = "0xB226CC", Offset = "0xB226CC", VA = "0xB226CC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001263")]
			[Address(RVA = "0xB226D0", Offset = "0xB226D0", VA = "0xB226D0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001265")]
			[Address(RVA = "0xB2283C", Offset = "0xB2283C", VA = "0xB2283C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20002F8")]
		[CompilerGenerated]
		private sealed class <TurnToLookAtTarget>d__75 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001190")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001191")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001192")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Transform target;

			[Token(Token = "0x4001193")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public WanderScript <>4__this;

			[Token(Token = "0x17000206")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600126A")]
				[Address(RVA = "0xB22AC8", Offset = "0xB22AC8", VA = "0xB22AC8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000207")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600126C")]
				[Address(RVA = "0xB22B10", Offset = "0xB22B10", VA = "0xB22B10", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001267")]
			[Address(RVA = "0xB201D4", Offset = "0xB201D4", VA = "0xB201D4")]
			[DebuggerHidden]
			public <TurnToLookAtTarget>d__75(int <>1__state)
			{
			}

			[Token(Token = "0x6001268")]
			[Address(RVA = "0xB22884", Offset = "0xB22884", VA = "0xB22884", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001269")]
			[Address(RVA = "0xB22888", Offset = "0xB22888", VA = "0xB22888", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600126B")]
			[Address(RVA = "0xB22AD0", Offset = "0xB22AD0", VA = "0xB22AD0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20002F9")]
		[CompilerGenerated]
		private sealed class <ChaseCheck>d__77 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001194")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001195")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001196")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public WanderScript <>4__this;

			[Token(Token = "0x4001197")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public WanderScript chasingAnimal;

			[Token(Token = "0x17000208")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001270")]
				[Address(RVA = "0xB22DF0", Offset = "0xB22DF0", VA = "0xB22DF0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000209")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001272")]
				[Address(RVA = "0xB22E38", Offset = "0xB22E38", VA = "0xB22E38", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600126D")]
			[Address(RVA = "0xB2028C", Offset = "0xB2028C", VA = "0xB2028C")]
			[DebuggerHidden]
			public <ChaseCheck>d__77(int <>1__state)
			{
			}

			[Token(Token = "0x600126E")]
			[Address(RVA = "0xB22B18", Offset = "0xB22B18", VA = "0xB22B18", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600126F")]
			[Address(RVA = "0xB22B1C", Offset = "0xB22B1C", VA = "0xB22B1C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001271")]
			[Address(RVA = "0xB22DF8", Offset = "0xB22DF8", VA = "0xB22DF8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001131")]
		private const float contingencyDistance = 1f;

		[Token(Token = "0x4001132")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Animation States")]
		[Space(5f)]
		[SerializeField]
		private IdleState[] idleStates;

		[Token(Token = "0x4001133")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private MovementState[] movementStates;

		[Token(Token = "0x4001134")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private AnimalState[] attackingStates;

		[Token(Token = "0x4001135")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private AnimalState[] deathStates;

		[Token(Token = "0x4001136")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Space]
		[Header("AI")]
		[Space(5f)]
		[SerializeField]
		private string species;

		[Token(Token = "0x4001137")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[Tooltip("How far away from it's origin this animal will wander by itself.")]
		private float wanderZone;

		[Token(Token = "0x4001138")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[SerializeField]
		[Tooltip("How dominent this animal is in the food chain, agressive animals will attack less dominant animals.")]
		private int dominance;

		[Token(Token = "0x4001139")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int originalDominance;

		[Token(Token = "0x400113A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[SerializeField]
		[Tooltip("How far this animal can sense a predator.")]
		private float awareness;

		[Token(Token = "0x400113B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		[Tooltip("How far this animal can sense it's prey.")]
		private float scent;

		[Token(Token = "0x400113C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float originalScent;

		[Token(Token = "0x400113D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("How many seconds this animal can run for before it gets tired.")]
		[SerializeField]
		private float stamina;

		[Token(Token = "0x400113E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[SerializeField]
		[Tooltip("How much this damage this animal does to another animal.")]
		private float power;

		[Token(Token = "0x400113F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("How much health this animal has.")]
		[SerializeField]
		private float toughness;

		[Token(Token = "0x4001140")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Range(0f, 100f)]
		[Tooltip("Chance of this animal attacking another animal.")]
		[SerializeField]
		private float agression;

		[Token(Token = "0x4001141")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float originalAgression;

		[Token(Token = "0x4001142")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Tooltip("How quickly the animal does damage to another animal (every 'attackSpeed' seconds will cause 'power' amount of damage).")]
		[SerializeField]
		private float attackSpeed;

		[Token(Token = "0x4001143")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		[Tooltip("If true, this animal will attack other animals of the same specices.")]
		private bool territorial;

		[Token(Token = "0x4001144")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		[SerializeField]
		[Tooltip("Stealthy animals can't be detected by other animals.")]
		private bool stealthy;

		[Token(Token = "0x4001145")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x72")]
		[SerializeField]
		[Tooltip("If true, this animal will never leave it's zone, even if it's chasing or running away from another animal.")]
		private bool constainedToWanderZone;

		[Token(Token = "0x4001146")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		[Tooltip("This animal will be peaceful towards species in this list.")]
		private string[] nonAgressiveTowards;

		[Token(Token = "0x4001147")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static List<WanderScript> allAnimals;

		[Token(Token = "0x4001148")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		[Header("Surface Rotation")]
		[Space(5f)]
		[Tooltip("If true, this animal will rotate to match the terrain. Ensure you have set the layer of the terrain as 'Terrain'.")]
		[Space]
		private bool matchSurfaceRotation;

		[Token(Token = "0x4001149")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[SerializeField]
		[Tooltip("How fast the animnal rotates to match the surface rotation.")]
		private float surfaceRotationSpeed;

		[Token(Token = "0x400114A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("If true, AI changes to this animal will be logged in the console.")]
		[Space]
		[Header("Debug")]
		[Space(5f)]
		[SerializeField]
		private bool logChanges;

		[Token(Token = "0x400114B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x89")]
		[SerializeField]
		[Tooltip("If true, gizmos will be drawn in the editor.")]
		private bool showGizmos;

		[Token(Token = "0x400114C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8A")]
		[SerializeField]
		private bool drawWanderRange;

		[Token(Token = "0x400114D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8B")]
		[SerializeField]
		private bool drawScentRange;

		[Token(Token = "0x400114E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[SerializeField]
		private bool drawAwarenessRange;

		[Token(Token = "0x400114F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Color distanceColor;

		[Token(Token = "0x4001150")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Color awarnessColor;

		[Token(Token = "0x4001151")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Color scentColor;

		[Token(Token = "0x4001152")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Animator animator;

		[Token(Token = "0x4001153")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private CharacterController characterController;

		[Token(Token = "0x4001154")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private NavMeshAgent navMeshAgent;

		[Token(Token = "0x4001155")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Vector3 origin;

		[Token(Token = "0x4001156")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private int totalIdleStateWeight;

		[Token(Token = "0x4001157")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private int currentState;

		[Token(Token = "0x4001158")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private bool dead;

		[Token(Token = "0x4001159")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xED")]
		private bool moving;

		[Token(Token = "0x400115A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEE")]
		private bool useNavMesh;

		[Token(Token = "0x400115B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Vector3 targetLocation;

		[Token(Token = "0x400115C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		private float currentMoveSpeed;

		[Token(Token = "0x400115D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private float currentTurnSpeed;

		[Token(Token = "0x400115E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		private bool attacking;

		[Token(Token = "0x170001F2")]
		public float MaxDistance
		{
			[Token(Token = "0x6001211")]
			[Address(RVA = "0xB1D194", Offset = "0xB1D194", VA = "0xB1D194")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001212")]
			[Address(RVA = "0xB1D19C", Offset = "0xB1D19C", VA = "0xB1D19C")]
			set
			{
			}
		}

		[Token(Token = "0x170001F3")]
		public static List<WanderScript> AllAnimals
		{
			[Token(Token = "0x6001213")]
			[Address(RVA = "0xB1D1A4", Offset = "0xB1D1A4", VA = "0xB1D1A4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001214")]
		[Address(RVA = "0xB1D1FC", Offset = "0xB1D1FC", VA = "0xB1D1FC")]
		public void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6001215")]
		[Address(RVA = "0xB1D678", Offset = "0xB1D678", VA = "0xB1D678")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001216")]
		[Address(RVA = "0xB1D9E8", Offset = "0xB1D9E8", VA = "0xB1D9E8")]
		private void Start()
		{
		}

		[Token(Token = "0x6001217")]
		[Address(RVA = "0xB1DA94", Offset = "0xB1DA94", VA = "0xB1DA94")]
		[IteratorStateMachine(typeof(<InitYield>d__54))]
		private IEnumerator InitYield()
		{
			return null;
		}

		[Token(Token = "0x6001218")]
		[Address(RVA = "0xB1DB30", Offset = "0xB1DB30", VA = "0xB1DB30")]
		private void DecideNextState(bool wasIdle, bool firstState = false)
		{
		}

		[Token(Token = "0x6001219")]
		[Address(RVA = "0xB1EDD8", Offset = "0xB1EDD8", VA = "0xB1EDD8")]
		private void BeginIdleState(bool firstState = false)
		{
		}

		[Token(Token = "0x600121A")]
		[Address(RVA = "0xB1EF6C", Offset = "0xB1EF6C", VA = "0xB1EF6C")]
		[IteratorStateMachine(typeof(<IdleState>d__57))]
		private IEnumerator IdleState(float stateTime)
		{
			return null;
		}

		[Token(Token = "0x600121B")]
		[Address(RVA = "0xB1EC94", Offset = "0xB1EC94", VA = "0xB1EC94")]
		private void BeginWanderState()
		{
		}

		[Token(Token = "0x600121C")]
		[Address(RVA = "0xB1F090", Offset = "0xB1F090", VA = "0xB1F090")]
		[IteratorStateMachine(typeof(<MovementState>d__59))]
		private IEnumerator MovementState(Vector3 target)
		{
			return null;
		}

		[Token(Token = "0x600121D")]
		[Address(RVA = "0xB1F128", Offset = "0xB1F128", VA = "0xB1F128")]
		[IteratorStateMachine(typeof(<NonNavMeshMovementState>d__60))]
		private IEnumerator NonNavMeshMovementState(Vector3 target)
		{
			return null;
		}

		[Token(Token = "0x600121E")]
		[Address(RVA = "0xB1E4FC", Offset = "0xB1E4FC", VA = "0xB1E4FC")]
		private void RunAwayFromAnimal(WanderScript predator)
		{
		}

		[Token(Token = "0x600121F")]
		[Address(RVA = "0xB1F210", Offset = "0xB1F210", VA = "0xB1F210")]
		[IteratorStateMachine(typeof(<RunAwayState>d__62))]
		private IEnumerator RunAwayState(Vector3 target, WanderScript predator)
		{
			return null;
		}

		[Token(Token = "0x6001220")]
		[Address(RVA = "0xB1E868", Offset = "0xB1E868", VA = "0xB1E868")]
		private void NonNavMeshRunAwayFromAnimal(WanderScript predator)
		{
		}

		[Token(Token = "0x6001221")]
		[Address(RVA = "0xB1F2EC", Offset = "0xB1F2EC", VA = "0xB1F2EC")]
		[IteratorStateMachine(typeof(<NonNavMeshRunAwayState>d__64))]
		private IEnumerator NonNavMeshRunAwayState(Vector3 target, WanderScript predator)
		{
			return null;
		}

		[Token(Token = "0x6001222")]
		[Address(RVA = "0xB1EB4C", Offset = "0xB1EB4C", VA = "0xB1EB4C")]
		private void ChaseAnimal(WanderScript prey)
		{
		}

		[Token(Token = "0x6001223")]
		[Address(RVA = "0xB1F3F8", Offset = "0xB1F3F8", VA = "0xB1F3F8")]
		[IteratorStateMachine(typeof(<ChaseState>d__66))]
		private IEnumerator ChaseState(WanderScript prey)
		{
			return null;
		}

		[Token(Token = "0x6001224")]
		[Address(RVA = "0xB1F488", Offset = "0xB1F488", VA = "0xB1F488")]
		[IteratorStateMachine(typeof(<NonNavMeshChaseState>d__67))]
		private IEnumerator NonNavMeshChaseState(WanderScript prey)
		{
			return null;
		}

		[Token(Token = "0x6001225")]
		[Address(RVA = "0xB1F568", Offset = "0xB1F568", VA = "0xB1F568")]
		private void AttackAnimal(WanderScript target)
		{
		}

		[Token(Token = "0x6001226")]
		[Address(RVA = "0xB1F750", Offset = "0xB1F750", VA = "0xB1F750")]
		[IteratorStateMachine(typeof(<MakeAttack>d__69))]
		private IEnumerator MakeAttack(WanderScript target)
		{
			return null;
		}

		[Token(Token = "0x6001227")]
		[Address(RVA = "0xB1F808", Offset = "0xB1F808", VA = "0xB1F808")]
		private void GetAttacked(WanderScript attacker)
		{
		}

		[Token(Token = "0x6001228")]
		[Address(RVA = "0xB1FBB8", Offset = "0xB1FBB8", VA = "0xB1FBB8")]
		private void TakeDamage(float damage)
		{
		}

		[Token(Token = "0x6001229")]
		[Address(RVA = "0xB1FBD4", Offset = "0xB1FBD4", VA = "0xB1FBD4")]
		public void Die()
		{
		}

		[Token(Token = "0x600122A")]
		[Address(RVA = "0xB1DA64", Offset = "0xB1DA64", VA = "0xB1DA64")]
		public void SetPeaceTime(bool peace)
		{
		}

		[Token(Token = "0x600122B")]
		[Address(RVA = "0xB1F018", Offset = "0xB1F018", VA = "0xB1F018")]
		private Vector3 RandonPointInRange()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600122C")]
		[Address(RVA = "0xB1FB28", Offset = "0xB1FB28", VA = "0xB1FB28")]
		[IteratorStateMachine(typeof(<TurnToLookAtTarget>d__75))]
		private IEnumerator TurnToLookAtTarget(Transform target)
		{
			return null;
		}

		[Token(Token = "0x600122D")]
		[Address(RVA = "0xB1F3C8", Offset = "0xB1F3C8", VA = "0xB1F3C8")]
		private void BeginChase(WanderScript chasingAnimal)
		{
		}

		[Token(Token = "0x600122E")]
		[Address(RVA = "0xB201FC", Offset = "0xB201FC", VA = "0xB201FC")]
		[IteratorStateMachine(typeof(<ChaseCheck>d__77))]
		private IEnumerator ChaseCheck(WanderScript chasingAnimal)
		{
			return null;
		}

		[Token(Token = "0x600122F")]
		[Address(RVA = "0xB202B4", Offset = "0xB202B4", VA = "0xB202B4")]
		public WanderScript()
		{
		}
	}
}
namespace EditorGUITable
{
	[Token(Token = "0x20002FA")]
	public class ReorderableTableAttribute : TableAttribute
	{
		[Token(Token = "0x6001273")]
		[Address(RVA = "0xB22E40", Offset = "0xB22E40", VA = "0xB22E40")]
		public ReorderableTableAttribute()
		{
		}

		[Token(Token = "0x6001274")]
		[Address(RVA = "0xB22E50", Offset = "0xB22E50", VA = "0xB22E50")]
		public ReorderableTableAttribute(params string[] properties)
		{
		}

		[Token(Token = "0x6001275")]
		[Address(RVA = "0xB22EB0", Offset = "0xB22EB0", VA = "0xB22EB0")]
		public ReorderableTableAttribute(string[] properties, float[] widths, params string[] tableOptions)
		{
		}

		[Token(Token = "0x6001276")]
		[Address(RVA = "0xB22FFC", Offset = "0xB22FFC", VA = "0xB22FFC")]
		public ReorderableTableAttribute(string[] properties, params string[] tableOptions)
		{
		}
	}
	[Token(Token = "0x20002FB")]
	public class TableAttribute : PropertyAttribute
	{
		[Token(Token = "0x4001198")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string[] properties;

		[Token(Token = "0x4001199")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string[] tableOptions;

		[Token(Token = "0x6001277")]
		[Address(RVA = "0xB22E48", Offset = "0xB22E48", VA = "0xB22E48")]
		public TableAttribute()
		{
		}

		[Token(Token = "0x6001278")]
		[Address(RVA = "0xB22E80", Offset = "0xB22E80", VA = "0xB22E80")]
		public TableAttribute(params string[] properties)
		{
		}

		[Token(Token = "0x6001279")]
		[Address(RVA = "0xB22EB4", Offset = "0xB22EB4", VA = "0xB22EB4")]
		public TableAttribute(string[] properties, float[] widths, params string[] tableOptions)
		{
		}

		[Token(Token = "0x600127A")]
		[Address(RVA = "0xB23000", Offset = "0xB23000", VA = "0xB23000")]
		public TableAttribute(string[] properties, params string[] tableOptions)
		{
		}

		[Token(Token = "0x600127B")]
		[Address(RVA = "0xB2304C", Offset = "0xB2304C", VA = "0xB2304C")]
		private string AppendWidth(string property, float width)
		{
			return null;
		}
	}
}
namespace CurvedUI
{
	[Token(Token = "0x20002FD")]
	public class CUI_AnimateCurvedFillOnStart : MonoBehaviour
	{
		[Token(Token = "0x600127E")]
		[Address(RVA = "0xB2316C", Offset = "0xB2316C", VA = "0xB2316C")]
		private void Update()
		{
		}

		[Token(Token = "0x600127F")]
		[Address(RVA = "0xB23308", Offset = "0xB23308", VA = "0xB23308")]
		public CUI_AnimateCurvedFillOnStart()
		{
		}
	}
	[Token(Token = "0x20002FE")]
	public class CUI_CameraController : MonoBehaviour
	{
		[Token(Token = "0x400119C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static CUI_CameraController instance;

		[Token(Token = "0x400119D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Transform CameraObject;

		[Token(Token = "0x400119E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float rotationMargin;

		[Token(Token = "0x400119F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private bool runInEditorOnly;

		[Token(Token = "0x6001280")]
		[Address(RVA = "0xB23310", Offset = "0xB23310", VA = "0xB23310")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001281")]
		[Address(RVA = "0xB23368", Offset = "0xB23368", VA = "0xB23368")]
		public CUI_CameraController()
		{
		}
	}
	[Token(Token = "0x20002FF")]
	public class CUI_ChangeColor : MonoBehaviour
	{
		[Token(Token = "0x6001282")]
		[Address(RVA = "0xB23380", Offset = "0xB23380", VA = "0xB23380")]
		public void ChangeColorToBlue()
		{
		}

		[Token(Token = "0x6001283")]
		[Address(RVA = "0xB233F4", Offset = "0xB233F4", VA = "0xB233F4")]
		public void ChangeColorToCyan()
		{
		}

		[Token(Token = "0x6001284")]
		[Address(RVA = "0xB23468", Offset = "0xB23468", VA = "0xB23468")]
		public void ChangeColorToWhite()
		{
		}

		[Token(Token = "0x6001285")]
		[Address(RVA = "0xB234DC", Offset = "0xB234DC", VA = "0xB234DC")]
		public CUI_ChangeColor()
		{
		}
	}
	[Token(Token = "0x2000300")]
	public class CUI_ChangeValueOnHold : MonoBehaviour, IPointerEnterHandler, IEventSystemHandler, IPointerExitHandler
	{
		[Token(Token = "0x40011A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool pressed;

		[Token(Token = "0x40011A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		private bool selected;

		[Token(Token = "0x40011A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Image bg;

		[Token(Token = "0x40011A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Color SelectedColor;

		[Token(Token = "0x40011A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Color NormalColor;

		[Token(Token = "0x40011A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private CanvasGroup IntroCG;

		[Token(Token = "0x40011A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private CanvasGroup MenuCG;

		[Token(Token = "0x6001286")]
		[Address(RVA = "0xB234E4", Offset = "0xB234E4", VA = "0xB234E4")]
		private void Update()
		{
		}

		[Token(Token = "0x6001287")]
		[Address(RVA = "0xB23560", Offset = "0xB23560", VA = "0xB23560")]
		private void ChangeVal()
		{
		}

		[Token(Token = "0x6001288")]
		[Address(RVA = "0xB236B0", Offset = "0xB236B0", VA = "0xB236B0", Slot = "4")]
		public void OnPointerEnter(PointerEventData data)
		{
		}

		[Token(Token = "0x6001289")]
		[Address(RVA = "0xB2373C", Offset = "0xB2373C", VA = "0xB2373C", Slot = "5")]
		public void OnPointerExit(PointerEventData data)
		{
		}

		[Token(Token = "0x600128A")]
		[Address(RVA = "0xB237C4", Offset = "0xB237C4", VA = "0xB237C4")]
		public CUI_ChangeValueOnHold()
		{
		}
	}
	[Token(Token = "0x2000301")]
	public class CUI_DragBetweenCanvases : MonoBehaviour, IBeginDragHandler, IEventSystemHandler, IEndDragHandler, IDragHandler
	{
		[Token(Token = "0x40011A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Vector2 dragPoint;

		[Token(Token = "0x600128B")]
		[Address(RVA = "0xB237CC", Offset = "0xB237CC", VA = "0xB237CC", Slot = "4")]
		public void OnBeginDrag(PointerEventData data)
		{
		}

		[Token(Token = "0x600128C")]
		[Address(RVA = "0xB23AE8", Offset = "0xB23AE8", VA = "0xB23AE8", Slot = "6")]
		public void OnDrag(PointerEventData data)
		{
		}

		[Token(Token = "0x600128D")]
		[Address(RVA = "0xB23F8C", Offset = "0xB23F8C", VA = "0xB23F8C", Slot = "5")]
		public void OnEndDrag(PointerEventData data)
		{
		}

		[Token(Token = "0x600128E")]
		[Address(RVA = "0xB2390C", Offset = "0xB2390C", VA = "0xB2390C")]
		private void RaycastPosition(out Vector2 newPos)
		{
		}

		[Token(Token = "0x600128F")]
		[Address(RVA = "0xB23FF4", Offset = "0xB23FF4", VA = "0xB23FF4")]
		public CUI_DragBetweenCanvases()
		{
		}
	}
	[Token(Token = "0x2000302")]
	public class CUI_draggable : MonoBehaviour, IBeginDragHandler, IEventSystemHandler, IEndDragHandler, IDragHandler
	{
		[Token(Token = "0x40011A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Vector2 savedVector;

		[Token(Token = "0x40011A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool isDragged;

		[Token(Token = "0x6001290")]
		[Address(RVA = "0xB23FFC", Offset = "0xB23FFC", VA = "0xB23FFC", Slot = "4")]
		public void OnBeginDrag(PointerEventData data)
		{
		}

		[Token(Token = "0x6001291")]
		[Address(RVA = "0xB24320", Offset = "0xB24320", VA = "0xB24320", Slot = "6")]
		public void OnDrag(PointerEventData data)
		{
		}

		[Token(Token = "0x6001292")]
		[Address(RVA = "0xB24324", Offset = "0xB24324", VA = "0xB24324", Slot = "5")]
		public void OnEndDrag(PointerEventData data)
		{
		}

		[Token(Token = "0x6001293")]
		[Address(RVA = "0xB24398", Offset = "0xB24398", VA = "0xB24398")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001294")]
		[Address(RVA = "0xB24144", Offset = "0xB24144", VA = "0xB24144")]
		private void RaycastPosition(out Vector2 newPos)
		{
		}

		[Token(Token = "0x6001295")]
		[Address(RVA = "0xB244AC", Offset = "0xB244AC", VA = "0xB244AC")]
		public CUI_draggable()
		{
		}
	}
	[Token(Token = "0x2000303")]
	public class CUI_GunController : MonoBehaviour
	{
		[Token(Token = "0x40011AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private CurvedUISettings ControlledCanvas;

		[Token(Token = "0x40011AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Transform LaserBeamTransform;

		[Token(Token = "0x6001296")]
		[Address(RVA = "0xB244B4", Offset = "0xB244B4", VA = "0xB244B4")]
		private void Update()
		{
		}

		[Token(Token = "0x6001297")]
		[Address(RVA = "0xB24958", Offset = "0xB24958", VA = "0xB24958")]
		public CUI_GunController()
		{
		}
	}
	[Token(Token = "0x2000305")]
	public class CUI_GunMovement : MonoBehaviour
	{
		[Token(Token = "0x40011AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private CurvedUISettings mySettings;

		[Token(Token = "0x40011AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Transform pivot;

		[Token(Token = "0x40011B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float sensitivity;

		[Token(Token = "0x40011B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector3 lastMouse;

		[Token(Token = "0x600129B")]
		[Address(RVA = "0xB24A94", Offset = "0xB24A94", VA = "0xB24A94")]
		private void Start()
		{
		}

		[Token(Token = "0x600129C")]
		[Address(RVA = "0xB24AB4", Offset = "0xB24AB4", VA = "0xB24AB4")]
		private void Update()
		{
		}

		[Token(Token = "0x600129D")]
		[Address(RVA = "0xB24C3C", Offset = "0xB24C3C", VA = "0xB24C3C")]
		public CUI_GunMovement()
		{
		}
	}
	[Token(Token = "0x2000306")]
	public class CUI_inventory_paralax : MonoBehaviour
	{
		[Token(Token = "0x40011B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Transform front;

		[Token(Token = "0x40011B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Transform back;

		[Token(Token = "0x40011B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 initFG;

		[Token(Token = "0x40011B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 initBG;

		[Token(Token = "0x40011B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float change;

		[Token(Token = "0x600129E")]
		[Address(RVA = "0xB24C50", Offset = "0xB24C50", VA = "0xB24C50")]
		private void Start()
		{
		}

		[Token(Token = "0x600129F")]
		[Address(RVA = "0xB24C94", Offset = "0xB24C94", VA = "0xB24C94")]
		private void Update()
		{
		}

		[Token(Token = "0x60012A0")]
		[Address(RVA = "0xB24EA8", Offset = "0xB24EA8", VA = "0xB24EA8")]
		public CUI_inventory_paralax()
		{
		}
	}
	[Token(Token = "0x2000307")]
	public class CUI_OrientOnCurvedSpace : MonoBehaviour
	{
		[Token(Token = "0x40011B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public CurvedUISettings mySettings;

		[Token(Token = "0x60012A1")]
		[Address(RVA = "0xB24EB8", Offset = "0xB24EB8", VA = "0xB24EB8")]
		private void Awake()
		{
		}

		[Token(Token = "0x60012A2")]
		[Address(RVA = "0xB24F10", Offset = "0xB24F10", VA = "0xB24F10")]
		private void Update()
		{
		}

		[Token(Token = "0x60012A3")]
		[Address(RVA = "0xB250AC", Offset = "0xB250AC", VA = "0xB250AC")]
		public CUI_OrientOnCurvedSpace()
		{
		}
	}
	[Token(Token = "0x2000308")]
	public class CUI_PerlinNoisePosition : MonoBehaviour
	{
		[Token(Token = "0x40011B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float samplingSpeed;

		[Token(Token = "0x40011B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector2 Range;

		[Token(Token = "0x40011BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private RectTransform rectie;

		[Token(Token = "0x60012A4")]
		[Address(RVA = "0xB250B4", Offset = "0xB250B4", VA = "0xB250B4")]
		private void Start()
		{
		}

		[Token(Token = "0x60012A5")]
		[Address(RVA = "0xB25134", Offset = "0xB25134", VA = "0xB25134")]
		private void Update()
		{
		}

		[Token(Token = "0x60012A6")]
		[Address(RVA = "0xB25208", Offset = "0xB25208", VA = "0xB25208")]
		public CUI_PerlinNoisePosition()
		{
		}
	}
	[Token(Token = "0x2000309")]
	public class CUI_PerlinNoiseRotation : MonoBehaviour
	{
		[Token(Token = "0x40011BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float samplingSpeed;

		[Token(Token = "0x40011BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float maxrotation;

		[Token(Token = "0x40011BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private RectTransform rectie;

		[Token(Token = "0x60012A7")]
		[Address(RVA = "0xB25218", Offset = "0xB25218", VA = "0xB25218")]
		private void Start()
		{
		}

		[Token(Token = "0x60012A8")]
		[Address(RVA = "0xB25298", Offset = "0xB25298", VA = "0xB25298")]
		private void Update()
		{
		}

		[Token(Token = "0x60012A9")]
		[Address(RVA = "0xB25318", Offset = "0xB25318", VA = "0xB25318")]
		public CUI_PerlinNoiseRotation()
		{
		}
	}
	[Token(Token = "0x200030A")]
	public class CUI_PickImageFromSet : MonoBehaviour
	{
		[Token(Token = "0x40011BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static CUI_PickImageFromSet picked;

		[Token(Token = "0x60012AA")]
		[Address(RVA = "0xB2532C", Offset = "0xB2532C", VA = "0xB2532C")]
		public void PickThis()
		{
		}

		[Token(Token = "0x60012AB")]
		[Address(RVA = "0xB254CC", Offset = "0xB254CC", VA = "0xB254CC")]
		public CUI_PickImageFromSet()
		{
		}
	}
	[Token(Token = "0x200030B")]
	public class CUI_RaycastToCanvas : MonoBehaviour
	{
		[Token(Token = "0x40011BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private CurvedUISettings mySettings;

		[Token(Token = "0x60012AC")]
		[Address(RVA = "0xB254D4", Offset = "0xB254D4", VA = "0xB254D4")]
		private void Start()
		{
		}

		[Token(Token = "0x60012AD")]
		[Address(RVA = "0xB2552C", Offset = "0xB2552C", VA = "0xB2552C")]
		private void Update()
		{
		}

		[Token(Token = "0x60012AE")]
		[Address(RVA = "0xB25610", Offset = "0xB25610", VA = "0xB25610")]
		public CUI_RaycastToCanvas()
		{
		}
	}
	[Token(Token = "0x200030C")]
	public class CUI_RiseChildrenOverTime : MonoBehaviour
	{
		[Token(Token = "0x40011C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float current;

		[Token(Token = "0x40011C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float Speed;

		[Token(Token = "0x40011C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float RiseBy;

		[Token(Token = "0x60012AF")]
		[Address(RVA = "0xB25618", Offset = "0xB25618", VA = "0xB25618")]
		private void Start()
		{
		}

		[Token(Token = "0x60012B0")]
		[Address(RVA = "0xB2561C", Offset = "0xB2561C", VA = "0xB2561C")]
		private void Update()
		{
		}

		[Token(Token = "0x60012B1")]
		[Address(RVA = "0xB2599C", Offset = "0xB2599C", VA = "0xB2599C")]
		public CUI_RiseChildrenOverTime()
		{
		}
	}
	[Token(Token = "0x200030D")]
	public class CUI_TMPChecker : MonoBehaviour
	{
		[Token(Token = "0x40011C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject testMsg;

		[Token(Token = "0x40011C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GameObject enabledMsg;

		[Token(Token = "0x40011C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private GameObject disabledMsg;

		[Token(Token = "0x60012B2")]
		[Address(RVA = "0xB259B0", Offset = "0xB259B0", VA = "0xB259B0")]
		private void Start()
		{
		}

		[Token(Token = "0x60012B3")]
		[Address(RVA = "0xB25A20", Offset = "0xB25A20", VA = "0xB25A20")]
		public CUI_TMPChecker()
		{
		}
	}
	[Token(Token = "0x200030E")]
	public class CUI_ViveButtonState : MonoBehaviour
	{
		[Token(Token = "0x200030F")]
		private enum ViveButton
		{
			[Token(Token = "0x40011CA")]
			Trigger,
			[Token(Token = "0x40011CB")]
			TouchpadTouch,
			[Token(Token = "0x40011CC")]
			TouchpadPress,
			[Token(Token = "0x40011CD")]
			Grip,
			[Token(Token = "0x40011CE")]
			Menu
		}

		[Token(Token = "0x40011C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Color ActiveColor;

		[Token(Token = "0x40011C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Color InActiveColor;

		[Token(Token = "0x40011C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private ViveButton ShowStateFor;

		[Token(Token = "0x60012B4")]
		[Address(RVA = "0xB25A28", Offset = "0xB25A28", VA = "0xB25A28")]
		public CUI_ViveButtonState()
		{
		}
	}
	[Token(Token = "0x2000310")]
	public class CUI_ViveHapticPulse : MonoBehaviour
	{
		[Token(Token = "0x40011CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float PulseStrength;

		[Token(Token = "0x60012B5")]
		[Address(RVA = "0xB25A48", Offset = "0xB25A48", VA = "0xB25A48")]
		private void Start()
		{
		}

		[Token(Token = "0x60012B6")]
		[Address(RVA = "0xB25A54", Offset = "0xB25A54", VA = "0xB25A54")]
		public void SetPulseStrength(float newStr)
		{
		}

		[Token(Token = "0x60012B7")]
		[Address(RVA = "0xB25A70", Offset = "0xB25A70", VA = "0xB25A70")]
		public void TriggerPulse()
		{
		}

		[Token(Token = "0x60012B8")]
		[Address(RVA = "0xB25A74", Offset = "0xB25A74", VA = "0xB25A74")]
		public CUI_ViveHapticPulse()
		{
		}
	}
	[Token(Token = "0x2000311")]
	public class CUI_WorldSpaceCursorFollow : MonoBehaviour
	{
		[Token(Token = "0x40011D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private CurvedUISettings mySettings;

		[Token(Token = "0x60012B9")]
		[Address(RVA = "0xB25A7C", Offset = "0xB25A7C", VA = "0xB25A7C")]
		private void Start()
		{
		}

		[Token(Token = "0x60012BA")]
		[Address(RVA = "0xB25BA8", Offset = "0xB25BA8", VA = "0xB25BA8")]
		private void Update()
		{
		}

		[Token(Token = "0x60012BB")]
		[Address(RVA = "0xB25C34", Offset = "0xB25C34", VA = "0xB25C34")]
		public CUI_WorldSpaceCursorFollow()
		{
		}
	}
	[Token(Token = "0x2000312")]
	public class CUI_WorldSpaceMouseMultipleCanvases : MonoBehaviour
	{
		[Token(Token = "0x40011D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private List<CurvedUISettings> ControlledCanvases;

		[Token(Token = "0x40011D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Transform WorldSpaceMouse;

		[Token(Token = "0x40011D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private CurvedUISettings MouseCanvas;

		[Token(Token = "0x60012BC")]
		[Address(RVA = "0xB25C3C", Offset = "0xB25C3C", VA = "0xB25C3C")]
		private void Update()
		{
		}

		[Token(Token = "0x60012BD")]
		[Address(RVA = "0xB25F38", Offset = "0xB25F38", VA = "0xB25F38")]
		public CUI_WorldSpaceMouseMultipleCanvases()
		{
		}
	}
	[Token(Token = "0x2000313")]
	public class CurvedUIEventSystem : EventSystem
	{
		[Token(Token = "0x40011D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static CurvedUIEventSystem instance;

		[Token(Token = "0x60012BE")]
		[Address(RVA = "0xB25F40", Offset = "0xB25F40", VA = "0xB25F40", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x60012BF")]
		[Address(RVA = "0xB25FA4", Offset = "0xB25FA4", VA = "0xB25FA4", Slot = "17")]
		protected override void OnApplicationFocus(bool hasFocus)
		{
		}

		[Token(Token = "0x60012C0")]
		[Address(RVA = "0xB25FB0", Offset = "0xB25FB0", VA = "0xB25FB0")]
		public CurvedUIEventSystem()
		{
		}
	}
	[Token(Token = "0x2000314")]
	public static class CurvedUIExtensionMethods
	{
		[Token(Token = "0x60012C1")]
		[Address(RVA = "0xB26008", Offset = "0xB26008", VA = "0xB26008")]
		public static bool AlmostEqual(this Vector3 a, Vector3 b, double accuracy = 0.01)
		{
			return default(bool);
		}

		[Token(Token = "0x60012C2")]
		[Address(RVA = "0xB24E8C", Offset = "0xB24E8C", VA = "0xB24E8C")]
		public static float Remap(this float value, float from1, float to1, float from2, float to2)
		{
			return default(float);
		}

		[Token(Token = "0x60012C3")]
		[Address(RVA = "0xB26038", Offset = "0xB26038", VA = "0xB26038")]
		public static float RemapAndClamp(this float value, float from1, float to1, float from2, float to2)
		{
			return default(float);
		}

		[Token(Token = "0x60012C4")]
		[Address(RVA = "0xB26078", Offset = "0xB26078", VA = "0xB26078")]
		public static float Remap(this int value, float from1, float to1, float from2, float to2)
		{
			return default(float);
		}

		[Token(Token = "0x60012C5")]
		[Address(RVA = "0xB26098", Offset = "0xB26098", VA = "0xB26098")]
		public static double Remap(this double value, double from1, double to1, double from2, double to2)
		{
			return default(double);
		}

		[Token(Token = "0x60012C6")]
		[Address(RVA = "0xB26064", Offset = "0xB26064", VA = "0xB26064")]
		public static float Clamp(this float value, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x60012C7")]
		[Address(RVA = "0xB260B4", Offset = "0xB260B4", VA = "0xB260B4")]
		public static float Clamp(this int value, int min, int max)
		{
			return default(float);
		}

		[Token(Token = "0x60012C8")]
		[Address(RVA = "0xB260CC", Offset = "0xB260CC", VA = "0xB260CC")]
		public static int Abs(this int value)
		{
			return default(int);
		}

		[Token(Token = "0x60012C9")]
		[Address(RVA = "0xB26124", Offset = "0xB26124", VA = "0xB26124")]
		public static float Abs(this float value)
		{
			return default(float);
		}

		[Token(Token = "0x60012CA")]
		[Address(RVA = "0xB2612C", Offset = "0xB2612C", VA = "0xB2612C")]
		public static int ToInt(this float value)
		{
			return default(int);
		}

		[Token(Token = "0x60012CB")]
		[Address(RVA = "0xB26208", Offset = "0xB26208", VA = "0xB26208")]
		public static int FloorToInt(this float value)
		{
			return default(int);
		}

		[Token(Token = "0x60012CC")]
		[Address(RVA = "0xB26274", Offset = "0xB26274", VA = "0xB26274")]
		public static int CeilToInt(this float value)
		{
			return default(int);
		}

		[Token(Token = "0x60012CD")]
		[Address(RVA = "0xB24948", Offset = "0xB24948", VA = "0xB24948")]
		public static Vector3 ModifyX(this Vector3 trans, float newVal)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60012CE")]
		[Address(RVA = "0xB24950", Offset = "0xB24950", VA = "0xB24950")]
		public static Vector3 ModifyY(this Vector3 trans, float newVal)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60012CF")]
		[Address(RVA = "0xB24940", Offset = "0xB24940", VA = "0xB24940")]
		public static Vector3 ModifyZ(this Vector3 trans, float newVal)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60012D0")]
		[Address(RVA = "0xB262E0", Offset = "0xB262E0", VA = "0xB262E0")]
		public static Vector2 ModifyVectorX(this Vector2 trans, float newVal)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60012D1")]
		[Address(RVA = "0xB262E8", Offset = "0xB262E8", VA = "0xB262E8")]
		public static Vector2 ModifyVectorY(this Vector2 trans, float newVal)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60012D2")]
		[Address(RVA = "0xB23EAC", Offset = "0xB23EAC", VA = "0xB23EAC")]
		public static void ResetTransform(this Transform trans)
		{
		}

		[Token(Token = "0x60012D3")]
		public static T AddComponentIfMissing<T>(this GameObject go) where T : Component
		{
			return null;
		}

		[Token(Token = "0x60012D4")]
		public static T AddComponentIfMissing<T>(this Component go) where T : Component
		{
			return null;
		}
	}
	[Token(Token = "0x2000315")]
	public class CurvedUIHandSwitcher : MonoBehaviour
	{
		[Token(Token = "0x40011D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject LaserBeam;

		[Token(Token = "0x40011D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[Tooltip("If true, when player clicks the trigger on the other hand, we'll instantly set it as UI controlling hand and move the pointer to it.")]
		private bool autoSwitchHands;

		[Token(Token = "0x40011D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Optional")]
		[Tooltip("If set, pointer will be placed as a child of this transform, instead of the current VR SDKs Camera Rig.")]
		[SerializeField]
		private Transform leftHandOverride;

		[Token(Token = "0x40011D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("If set, pointer will be placed as a child of this transform, instead of the current VR SDKs Camera Rig.")]
		[SerializeField]
		private Transform rightHandOverride;

		[Token(Token = "0x60012D5")]
		[Address(RVA = "0xB262F0", Offset = "0xB262F0", VA = "0xB262F0")]
		private void SwitchHandTo(CurvedUIInputModule.Hand newHand)
		{
		}

		[Token(Token = "0x60012D6")]
		[Address(RVA = "0xB2658C", Offset = "0xB2658C", VA = "0xB2658C")]
		public CurvedUIHandSwitcher()
		{
		}
	}
	[Token(Token = "0x2000316")]
	public class CurvedUIInputFieldCaret : MonoBehaviour, ISelectHandler, IEventSystemHandler, IDeselectHandler
	{
		[Token(Token = "0x2000317")]
		[CompilerGenerated]
		private sealed class <CaretBlinker>d__11 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40011E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40011E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40011E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public CurvedUIInputFieldCaret <>4__this;

			[Token(Token = "0x1700020D")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60012E9")]
				[Address(RVA = "0xB2716C", Offset = "0xB2716C", VA = "0xB2716C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700020E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60012EB")]
				[Address(RVA = "0xB271B4", Offset = "0xB271B4", VA = "0xB271B4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60012E6")]
			[Address(RVA = "0xB26D5C", Offset = "0xB26D5C", VA = "0xB26D5C")]
			[DebuggerHidden]
			public <CaretBlinker>d__11(int <>1__state)
			{
			}

			[Token(Token = "0x60012E7")]
			[Address(RVA = "0xB27050", Offset = "0xB27050", VA = "0xB27050", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60012E8")]
			[Address(RVA = "0xB27054", Offset = "0xB27054", VA = "0xB27054", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60012EA")]
			[Address(RVA = "0xB27174", Offset = "0xB27174", VA = "0xB27174", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40011D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private InputField myField;

		[Token(Token = "0x40011DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private RectTransform myCaret;

		[Token(Token = "0x40011DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Color origCaretColor;

		[Token(Token = "0x40011DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Color origSelectionColor;

		[Token(Token = "0x40011DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool selected;

		[Token(Token = "0x40011DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		private bool selectingText;

		[Token(Token = "0x40011DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private int lastCharDist;

		[Token(Token = "0x1700020A")]
		public Color CaretColor
		{
			[Token(Token = "0x60012DF")]
			[Address(RVA = "0xB26FD8", Offset = "0xB26FD8", VA = "0xB26FD8")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x60012E0")]
			[Address(RVA = "0xB26FE4", Offset = "0xB26FE4", VA = "0xB26FE4")]
			set
			{
			}
		}

		[Token(Token = "0x1700020B")]
		public Color SelectionColor
		{
			[Token(Token = "0x60012E1")]
			[Address(RVA = "0xB26FF0", Offset = "0xB26FF0", VA = "0xB26FF0")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x60012E2")]
			[Address(RVA = "0xB26FFC", Offset = "0xB26FFC", VA = "0xB26FFC")]
			set
			{
			}
		}

		[Token(Token = "0x1700020C")]
		public float CaretBlinkRate
		{
			[Token(Token = "0x60012E3")]
			[Address(RVA = "0xB27008", Offset = "0xB27008", VA = "0xB27008")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60012E4")]
			[Address(RVA = "0xB27024", Offset = "0xB27024", VA = "0xB27024")]
			set
			{
			}
		}

		[Token(Token = "0x60012D7")]
		[Address(RVA = "0xB2659C", Offset = "0xB2659C", VA = "0xB2659C")]
		private void Awake()
		{
		}

		[Token(Token = "0x60012D8")]
		[Address(RVA = "0xB265F4", Offset = "0xB265F4", VA = "0xB265F4")]
		private void Update()
		{
		}

		[Token(Token = "0x60012D9")]
		[Address(RVA = "0xB268B8", Offset = "0xB268B8", VA = "0xB268B8", Slot = "4")]
		public void OnSelect(BaseEventData eventData)
		{
		}

		[Token(Token = "0x60012DA")]
		[Address(RVA = "0xB26D28", Offset = "0xB26D28", VA = "0xB26D28", Slot = "5")]
		public void OnDeselect(BaseEventData eventData)
		{
		}

		[Token(Token = "0x60012DB")]
		[Address(RVA = "0xB26CB4", Offset = "0xB26CB4", VA = "0xB26CB4")]
		[IteratorStateMachine(typeof(<CaretBlinker>d__11))]
		private IEnumerator CaretBlinker()
		{
			return null;
		}

		[Token(Token = "0x60012DC")]
		[Address(RVA = "0xB26968", Offset = "0xB26968", VA = "0xB26968")]
		private void CreateCaret()
		{
		}

		[Token(Token = "0x60012DD")]
		[Address(RVA = "0xB26604", Offset = "0xB26604", VA = "0xB26604")]
		private void UpdateCaret()
		{
		}

		[Token(Token = "0x60012DE")]
		[Address(RVA = "0xB26D84", Offset = "0xB26D84", VA = "0xB26D84")]
		private Vector2 GetLocalPositionInText(int charNo)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60012E5")]
		[Address(RVA = "0xB27040", Offset = "0xB27040", VA = "0xB27040")]
		public CurvedUIInputFieldCaret()
		{
		}
	}
	[Token(Token = "0x2000318")]
	public class CurvedUILaserBeam : MonoBehaviour
	{
		[Token(Token = "0x40011E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Transform LaserBeamTransform;

		[Token(Token = "0x40011E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Transform LaserBeamDot;

		[Token(Token = "0x40011E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private bool hideWhenNotAimingAtCanvas;

		[Token(Token = "0x40011E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static CurvedUILaserBeam current;

		[Token(Token = "0x40011E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public FloatVariable playerSize;

		[Token(Token = "0x40011E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Interactor CurrentInteractor;

		[Token(Token = "0x1700020F")]
		public static CurvedUILaserBeam Current
		{
			[Token(Token = "0x60012EE")]
			[Address(RVA = "0xB27AB0", Offset = "0xB27AB0", VA = "0xB27AB0")]
			get
			{
				return null;
			}
			[Token(Token = "0x60012EF")]
			[Address(RVA = "0xB27818", Offset = "0xB27818", VA = "0xB27818")]
			set
			{
			}
		}

		[Token(Token = "0x60012EC")]
		[Address(RVA = "0xB271BC", Offset = "0xB271BC", VA = "0xB271BC")]
		protected void Update()
		{
		}

		[Token(Token = "0x60012ED")]
		[Address(RVA = "0xB279C0", Offset = "0xB279C0", VA = "0xB279C0")]
		public static Ray SetCurvedUIRay(Transform laserBeamTransform)
		{
			return default(Ray);
		}

		[Token(Token = "0x60012F0")]
		[Address(RVA = "0xB27920", Offset = "0xB27920", VA = "0xB27920")]
		private void EnablePointer()
		{
		}

		[Token(Token = "0x60012F1")]
		[Address(RVA = "0xB27970", Offset = "0xB27970", VA = "0xB27970")]
		private void DisablePointer()
		{
		}

		[Token(Token = "0x60012F2")]
		[Address(RVA = "0xB27AF8", Offset = "0xB27AF8", VA = "0xB27AF8")]
		public CurvedUILaserBeam()
		{
		}
	}
	[Token(Token = "0x200031A")]
	public class CurvedUIPhysicsRaycaster : BaseRaycaster
	{
		[Token(Token = "0x40011EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		protected int sortOrder;

		[Token(Token = "0x40011EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private RaycastHit hitInfo;

		[Token(Token = "0x40011ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private RaycastResult result;

		[Token(Token = "0x17000210")]
		public int CompoundEventMask
		{
			[Token(Token = "0x60012F8")]
			[Address(RVA = "0xB27FB4", Offset = "0xB27FB4", VA = "0xB27FB4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000211")]
		public override Camera eventCamera
		{
			[Token(Token = "0x60012F9")]
			[Address(RVA = "0xB280A8", Offset = "0xB280A8", VA = "0xB280A8", Slot = "18")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000212")]
		public virtual int Depth
		{
			[Token(Token = "0x60012FA")]
			[Address(RVA = "0xB28164", Offset = "0xB28164", VA = "0xB28164", Slot = "22")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000213")]
		public override int sortOrderPriority
		{
			[Token(Token = "0x60012FB")]
			[Address(RVA = "0xB28228", Offset = "0xB28228", VA = "0xB28228", Slot = "20")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60012F6")]
		[Address(RVA = "0xB27C58", Offset = "0xB27C58", VA = "0xB27C58")]
		protected CurvedUIPhysicsRaycaster()
		{
		}

		[Token(Token = "0x60012F7")]
		[Address(RVA = "0xB27C68", Offset = "0xB27C68", VA = "0xB27C68", Slot = "17")]
		public override void Raycast(PointerEventData eventData, List<RaycastResult> resultAppendList)
		{
		}
	}
	[Token(Token = "0x200031B")]
	public class CurvedUIPointerEventData : PointerEventData
	{
		[Token(Token = "0x200031C")]
		public enum ControllerType
		{
			[Token(Token = "0x40011F1")]
			NONE = -1,
			[Token(Token = "0x40011F2")]
			VIVE
		}

		[Token(Token = "0x40011EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		public GameObject Controller;

		[Token(Token = "0x40011EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		public Vector2 TouchPadAxis;

		[Token(Token = "0x60012FC")]
		[Address(RVA = "0xB28230", Offset = "0xB28230", VA = "0xB28230")]
		public CurvedUIPointerEventData(EventSystem eventSystem)
		{
		}
	}
	[Token(Token = "0x200031D")]
	public class CurvedUIRaycaster : GraphicRaycaster
	{
		[Token(Token = "0x40011F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private bool showDebug;

		[Token(Token = "0x40011F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		private bool overrideEventData;

		[Token(Token = "0x40011F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Canvas myCanvas;

		[Token(Token = "0x40011F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private CurvedUISettings mySettings;

		[Token(Token = "0x40011F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector3 cyllinderMidPoint;

		[Token(Token = "0x40011F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private List<GameObject> objectsUnderPointer;

		[Token(Token = "0x40011F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Vector2 lastCanvasPos;

		[Token(Token = "0x40011FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject colliderContainer;

		[Token(Token = "0x40011FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private PointerEventData lastFrameEventData;

		[Token(Token = "0x40011FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private PointerEventData curEventData;

		[Token(Token = "0x40011FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private PointerEventData eventDataToUse;

		[Token(Token = "0x40011FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Ray cachedRay;

		[Token(Token = "0x40011FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Graphic gph;

		[Token(Token = "0x4001200")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private List<GameObject> selectablesUnderGaze;

		[Token(Token = "0x4001201")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private List<GameObject> selectablesUnderGazeLastFrame;

		[Token(Token = "0x4001202")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private float objectsUnderGazeLastChangeTime;

		[Token(Token = "0x4001203")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private bool gazeClickExecuted;

		[Token(Token = "0x4001204")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCD")]
		private bool pointingAtCanvas;

		[Token(Token = "0x4001205")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCE")]
		private bool pointingAtCanvasLastFrame;

		[NonSerialized]
		[Token(Token = "0x4001206")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private List<Graphic> m_RaycastResults;

		[NonSerialized]
		[Token(Token = "0x4001207")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly List<Graphic> s_SortedGraphics;

		[Token(Token = "0x17000214")]
		private Image GazeProgressImage
		{
			[Token(Token = "0x6001310")]
			[Address(RVA = "0xB29050", Offset = "0xB29050", VA = "0xB29050")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000215")]
		public bool PointingAtCanvas
		{
			[Token(Token = "0x6001319")]
			[Address(RVA = "0xB2FF28", Offset = "0xB2FF28", VA = "0xB2FF28")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60012FD")]
		[Address(RVA = "0xB28290", Offset = "0xB28290", VA = "0xB28290", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x60012FE")]
		[Address(RVA = "0xB2839C", Offset = "0xB2839C", VA = "0xB2839C", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x60012FF")]
		[Address(RVA = "0xB28AD0", Offset = "0xB28AD0", VA = "0xB28AD0", Slot = "22")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6001300")]
		[Address(RVA = "0xB28EB4", Offset = "0xB28EB4", VA = "0xB28EB4")]
		private void ProcessGazeTimedClick()
		{
		}

		[Token(Token = "0x6001301")]
		[Address(RVA = "0xB28E94", Offset = "0xB28E94", VA = "0xB28E94")]
		private void ResetGazeTimedClick()
		{
		}

		[Token(Token = "0x6001302")]
		[Address(RVA = "0xB295B8", Offset = "0xB295B8", VA = "0xB295B8", Slot = "17")]
		public override void Raycast(PointerEventData eventData, List<RaycastResult> resultAppendList)
		{
		}

		[Token(Token = "0x6001303")]
		[Address(RVA = "0xB2A854", Offset = "0xB2A854", VA = "0xB2A854", Slot = "23")]
		public virtual bool RaycastToCyllinderCanvas(Ray ray3D, out Vector2 o_canvasPos, bool OutputInCanvasSpace = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6001304")]
		[Address(RVA = "0xB2AFFC", Offset = "0xB2AFFC", VA = "0xB2AFFC", Slot = "24")]
		public virtual bool RaycastToCyllinderVerticalCanvas(Ray ray3D, out Vector2 o_canvasPos, bool OutputInCanvasSpace = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6001305")]
		[Address(RVA = "0xB2B6D0", Offset = "0xB2B6D0", VA = "0xB2B6D0", Slot = "25")]
		public virtual bool RaycastToRingCanvas(Ray ray3D, out Vector2 o_canvasPos, bool OutputInCanvasSpace = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6001306")]
		[Address(RVA = "0xB2BCCC", Offset = "0xB2BCCC", VA = "0xB2BCCC", Slot = "26")]
		public virtual bool RaycastToSphereCanvas(Ray ray3D, out Vector2 o_canvasPos, bool OutputInCanvasSpace = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6001307")]
		[Address(RVA = "0xB2A240", Offset = "0xB2A240", VA = "0xB2A240")]
		private void FlatRaycast(PointerEventData eventData, List<RaycastResult> resultAppendList)
		{
		}

		[Token(Token = "0x6001308")]
		[Address(RVA = "0xB2C85C", Offset = "0xB2C85C", VA = "0xB2C85C")]
		private static void FlatRaycastAndSort(Canvas canvas, Camera eventCamera, Vector2 pointerPosition, IList<Graphic> foundGraphics, List<Graphic> results)
		{
		}

		[Token(Token = "0x6001309")]
		[Address(RVA = "0xB285EC", Offset = "0xB285EC", VA = "0xB285EC")]
		protected void CreateCollider()
		{
		}

		[Token(Token = "0x600130A")]
		[Address(RVA = "0xB2E858", Offset = "0xB2E858", VA = "0xB2E858")]
		private void SetupMeshColliderUsingMesh(Mesh meshie)
		{
		}

		[Token(Token = "0x600130B")]
		[Address(RVA = "0xB2CDD0", Offset = "0xB2CDD0", VA = "0xB2CDD0")]
		private GameObject CreateConvexCyllinderCollider(bool vertical = false)
		{
			return null;
		}

		[Token(Token = "0x600130C")]
		[Address(RVA = "0xB2DA68", Offset = "0xB2DA68", VA = "0xB2DA68")]
		private Mesh CreateCyllinderColliderMesh(bool vertical = false)
		{
			return null;
		}

		[Token(Token = "0x600130D")]
		[Address(RVA = "0xB2E90C", Offset = "0xB2E90C", VA = "0xB2E90C")]
		private Mesh CreateSphereColliderMesh()
		{
			return null;
		}

		[Token(Token = "0x600130E")]
		[Address(RVA = "0xB2F60C", Offset = "0xB2F60C", VA = "0xB2F60C")]
		private bool IsInLayerMask(int layer, LayerMask layermask)
		{
			return default(bool);
		}

		[Token(Token = "0x600130F")]
		[Address(RVA = "0xB2AF2C", Offset = "0xB2AF2C", VA = "0xB2AF2C")]
		private LayerMask GetRaycastLayerMask()
		{
			return default(LayerMask);
		}

		[Token(Token = "0x6001311")]
		[Address(RVA = "0xB2AF8C", Offset = "0xB2AF8C", VA = "0xB2AF8C")]
		private float AngleSigned(Vector3 v1, Vector3 v2, Vector3 n)
		{
			return default(float);
		}

		[Token(Token = "0x6001312")]
		[Address(RVA = "0xB2F658", Offset = "0xB2F658", VA = "0xB2F658")]
		private bool ShouldStartDrag(Vector2 pressPos, Vector2 currentPos, float threshold, bool useDragThreshold)
		{
			return default(bool);
		}

		[Token(Token = "0x6001313")]
		[Address(RVA = "0xB2F688", Offset = "0xB2F688", VA = "0xB2F688", Slot = "27")]
		protected virtual void ProcessMove(PointerEventData pointerEvent)
		{
		}

		[Token(Token = "0x6001314")]
		[Address(RVA = "0xB29D00", Offset = "0xB29D00", VA = "0xB29D00")]
		protected void UpdateSelectedObjects(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001315")]
		[Address(RVA = "0xB2F6A0", Offset = "0xB2F6A0", VA = "0xB2F6A0")]
		protected void HandlePointerExitAndEnter(PointerEventData currentPointerData, GameObject newEnterTarget)
		{
		}

		[Token(Token = "0x6001316")]
		[Address(RVA = "0xB2FC74", Offset = "0xB2FC74", VA = "0xB2FC74")]
		protected static GameObject FindCommonRoot(GameObject g1, GameObject g2)
		{
			return null;
		}

		[Token(Token = "0x6001317")]
		[Address(RVA = "0xB2FDE8", Offset = "0xB2FDE8", VA = "0xB2FDE8")]
		private bool GetScreenSpacePointByRay(Ray ray, out Vector2 o_positionOnCanvas)
		{
			return default(bool);
		}

		[Token(Token = "0x6001318")]
		[Address(RVA = "0xB2841C", Offset = "0xB2841C", VA = "0xB2841C")]
		private bool CheckEventCamera()
		{
			return default(bool);
		}

		[Token(Token = "0x600131A")]
		[Address(RVA = "0xB2FF30", Offset = "0xB2FF30", VA = "0xB2FF30")]
		public void RebuildCollider()
		{
		}

		[Token(Token = "0x600131B")]
		[Address(RVA = "0xB248B4", Offset = "0xB248B4", VA = "0xB248B4")]
		public List<GameObject> GetObjectsUnderPointer()
		{
			return null;
		}

		[Token(Token = "0x600131C")]
		[Address(RVA = "0xB2FF64", Offset = "0xB2FF64", VA = "0xB2FF64")]
		public List<GameObject> GetObjectsUnderScreenPos(Vector2 screenPos, [Optional] Camera eventCamera)
		{
			return null;
		}

		[Token(Token = "0x600131D")]
		[Address(RVA = "0xB30040", Offset = "0xB30040", VA = "0xB30040")]
		public List<GameObject> GetObjectsHitByRay(Ray ray)
		{
			return null;
		}

		[Token(Token = "0x600131E")]
		[Address(RVA = "0xB290B0", Offset = "0xB290B0", VA = "0xB290B0")]
		public void Click()
		{
		}

		[Token(Token = "0x600131F")]
		[Address(RVA = "0xB2F0C8", Offset = "0xB2F0C8", VA = "0xB2F0C8")]
		private void ModifyQuad(List<Vector3> verts, int vertexIndex, Vector2 requiredSize)
		{
		}

		[Token(Token = "0x6001320")]
		[Address(RVA = "0xB305A4", Offset = "0xB305A4", VA = "0xB305A4")]
		private Vector3 TesselateQuad(List<Vector3> quad, float x, float y)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001321")]
		[Address(RVA = "0xB30898", Offset = "0xB30898", VA = "0xB30898")]
		public CurvedUIRaycaster()
		{
		}
	}
	[Token(Token = "0x200031F")]
	[RequireComponent(typeof(Canvas))]
	[AddComponentMenu("CurvedUI/CurvedUISettings")]
	public class CurvedUISettings : MonoBehaviour
	{
		[Token(Token = "0x2000320")]
		public enum CurvedUIShape
		{
			[Token(Token = "0x400121E")]
			CYLINDER,
			[Token(Token = "0x400121F")]
			RING,
			[Token(Token = "0x4001220")]
			SPHERE,
			[Token(Token = "0x4001221")]
			CYLINDER_VERTICAL
		}

		[Token(Token = "0x400120C")]
		public const string Version = "3.2";

		[Token(Token = "0x400120D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private CurvedUIShape shape;

		[Token(Token = "0x400120E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float quality;

		[Token(Token = "0x400120F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private bool interactable;

		[Token(Token = "0x4001210")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		[SerializeField]
		private bool blocksRaycasts;

		[Token(Token = "0x4001211")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		[SerializeField]
		private bool forceUseBoxCollider;

		[Token(Token = "0x4001212")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private int angle;

		[Token(Token = "0x4001213")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private bool preserveAspect;

		[Token(Token = "0x4001214")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private int vertAngle;

		[Token(Token = "0x4001215")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private float ringFill;

		[Token(Token = "0x4001216")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private int ringExternalDiamater;

		[Token(Token = "0x4001217")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private bool ringFlipVertical;

		[Token(Token = "0x4001218")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private int baseCircleSegments;

		[Token(Token = "0x4001219")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector2 savedRectSize;

		[Token(Token = "0x400121A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float savedRadius;

		[Token(Token = "0x400121B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Canvas myCanvas;

		[Token(Token = "0x400121C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private RectTransform m_rectTransform;

		[Token(Token = "0x17000216")]
		private RectTransform RectTransform
		{
			[Token(Token = "0x6001332")]
			[Address(RVA = "0xB30D1C", Offset = "0xB30D1C", VA = "0xB30D1C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000217")]
		public int BaseCircleSegments
		{
			[Token(Token = "0x600133B")]
			[Address(RVA = "0xB32768", Offset = "0xB32768", VA = "0xB32768")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000218")]
		public int Angle
		{
			[Token(Token = "0x600133C")]
			[Address(RVA = "0xB32770", Offset = "0xB32770", VA = "0xB32770")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600133D")]
			[Address(RVA = "0xB32778", Offset = "0xB32778", VA = "0xB32778")]
			set
			{
			}
		}

		[Token(Token = "0x17000219")]
		public float Quality
		{
			[Token(Token = "0x600133E")]
			[Address(RVA = "0xB3278C", Offset = "0xB3278C", VA = "0xB3278C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600133F")]
			[Address(RVA = "0xB32794", Offset = "0xB32794", VA = "0xB32794")]
			set
			{
			}
		}

		[Token(Token = "0x1700021A")]
		public CurvedUIShape Shape
		{
			[Token(Token = "0x6001340")]
			[Address(RVA = "0xB327B0", Offset = "0xB327B0", VA = "0xB327B0")]
			get
			{
				return default(CurvedUIShape);
			}
			[Token(Token = "0x6001341")]
			[Address(RVA = "0xB327B8", Offset = "0xB327B8", VA = "0xB327B8")]
			set
			{
			}
		}

		[Token(Token = "0x1700021B")]
		public int VerticalAngle
		{
			[Token(Token = "0x6001342")]
			[Address(RVA = "0xB327D8", Offset = "0xB327D8", VA = "0xB327D8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001343")]
			[Address(RVA = "0xB327E0", Offset = "0xB327E0", VA = "0xB327E0")]
			set
			{
			}
		}

		[Token(Token = "0x1700021C")]
		public float RingFill
		{
			[Token(Token = "0x6001344")]
			[Address(RVA = "0xB32800", Offset = "0xB32800", VA = "0xB32800")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001345")]
			[Address(RVA = "0xB32808", Offset = "0xB32808", VA = "0xB32808")]
			set
			{
			}
		}

		[Token(Token = "0x1700021D")]
		public float SavedRadius
		{
			[Token(Token = "0x6001346")]
			[Address(RVA = "0xB31800", Offset = "0xB31800", VA = "0xB31800")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700021E")]
		public int RingExternalDiameter
		{
			[Token(Token = "0x6001347")]
			[Address(RVA = "0xB32824", Offset = "0xB32824", VA = "0xB32824")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001348")]
			[Address(RVA = "0xB3282C", Offset = "0xB3282C", VA = "0xB3282C")]
			set
			{
			}
		}

		[Token(Token = "0x1700021F")]
		public bool RingFlipVertical
		{
			[Token(Token = "0x6001349")]
			[Address(RVA = "0xB3284C", Offset = "0xB3284C", VA = "0xB3284C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600134A")]
			[Address(RVA = "0xB32854", Offset = "0xB32854", VA = "0xB32854")]
			set
			{
			}
		}

		[Token(Token = "0x17000220")]
		public bool PreserveAspect
		{
			[Token(Token = "0x600134B")]
			[Address(RVA = "0xB32874", Offset = "0xB32874", VA = "0xB32874")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600134C")]
			[Address(RVA = "0xB3287C", Offset = "0xB3287C", VA = "0xB3287C")]
			set
			{
			}
		}

		[Token(Token = "0x17000221")]
		public bool Interactable
		{
			[Token(Token = "0x600134D")]
			[Address(RVA = "0xB3289C", Offset = "0xB3289C", VA = "0xB3289C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600134E")]
			[Address(RVA = "0xB328A4", Offset = "0xB328A4", VA = "0xB328A4")]
			set
			{
			}
		}

		[Token(Token = "0x17000222")]
		public bool ForceUseBoxCollider
		{
			[Token(Token = "0x600134F")]
			[Address(RVA = "0xB328B0", Offset = "0xB328B0", VA = "0xB328B0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001350")]
			[Address(RVA = "0xB328B8", Offset = "0xB328B8", VA = "0xB328B8")]
			set
			{
			}
		}

		[Token(Token = "0x17000223")]
		public bool BlocksRaycasts
		{
			[Token(Token = "0x6001351")]
			[Address(RVA = "0xB328C4", Offset = "0xB328C4", VA = "0xB328C4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001352")]
			[Address(RVA = "0xB328CC", Offset = "0xB328CC", VA = "0xB328CC")]
			set
			{
			}
		}

		[Token(Token = "0x17000224")]
		[Obsolete("Use RaycastLayerMask property instead.")]
		public bool RaycastMyLayerOnly
		{
			[Token(Token = "0x6001353")]
			[Address(RVA = "0xB3299C", Offset = "0xB3299C", VA = "0xB3299C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001354")]
			[Address(RVA = "0xB329A4", Offset = "0xB329A4", VA = "0xB329A4")]
			set
			{
			}
		}

		[Token(Token = "0x17000225")]
		public bool PointingAtCanvas
		{
			[Token(Token = "0x6001356")]
			[Address(RVA = "0xB32A44", Offset = "0xB32A44", VA = "0xB32A44")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000226")]
		public CurvedUIInputModule.CUIControlMethod ControlMethod
		{
			[Token(Token = "0x6001358")]
			[Address(RVA = "0xB32C00", Offset = "0xB32C00", VA = "0xB32C00")]
			get
			{
				return default(CurvedUIInputModule.CUIControlMethod);
			}
			[Token(Token = "0x6001359")]
			[Address(RVA = "0xB32C50", Offset = "0xB32C50", VA = "0xB32C50")]
			set
			{
			}
		}

		[Token(Token = "0x17000227")]
		public bool GazeUseTimedClick
		{
			[Token(Token = "0x600135D")]
			[Address(RVA = "0xB33030", Offset = "0xB33030", VA = "0xB33030")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600135E")]
			[Address(RVA = "0xB33090", Offset = "0xB33090", VA = "0xB33090")]
			set
			{
			}
		}

		[Token(Token = "0x17000228")]
		public float GazeClickTimer
		{
			[Token(Token = "0x600135F")]
			[Address(RVA = "0xB330F8", Offset = "0xB330F8", VA = "0xB330F8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001360")]
			[Address(RVA = "0xB33158", Offset = "0xB33158", VA = "0xB33158")]
			set
			{
			}
		}

		[Token(Token = "0x17000229")]
		public float GazeClickTimerDelay
		{
			[Token(Token = "0x6001361")]
			[Address(RVA = "0xB331C8", Offset = "0xB331C8", VA = "0xB331C8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001362")]
			[Address(RVA = "0xB33228", Offset = "0xB33228", VA = "0xB33228")]
			set
			{
			}
		}

		[Token(Token = "0x1700022A")]
		public float GazeTimerProgress
		{
			[Token(Token = "0x6001363")]
			[Address(RVA = "0xB33298", Offset = "0xB33298", VA = "0xB33298")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6001328")]
		[Address(RVA = "0xB30C9C", Offset = "0xB30C9C", VA = "0xB30C9C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001329")]
		[Address(RVA = "0xB30DEC", Offset = "0xB30DEC", VA = "0xB30DEC")]
		private void Start()
		{
		}

		[Token(Token = "0x600132A")]
		[Address(RVA = "0xB312AC", Offset = "0xB312AC", VA = "0xB312AC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600132B")]
		[Address(RVA = "0xB3134C", Offset = "0xB3134C", VA = "0xB3134C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600132C")]
		[Address(RVA = "0xB313EC", Offset = "0xB313EC", VA = "0xB313EC")]
		private void Update()
		{
		}

		[Token(Token = "0x600132D")]
		[Address(RVA = "0xB3150C", Offset = "0xB3150C", VA = "0xB3150C")]
		private void SetUIAngle(int newAngle)
		{
		}

		[Token(Token = "0x600132E")]
		[Address(RVA = "0xB31728", Offset = "0xB31728", VA = "0xB31728")]
		private Vector3 CanvasToCyllinder(Vector3 pos)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600132F")]
		[Address(RVA = "0xB31824", Offset = "0xB31824", VA = "0xB31824")]
		private Vector3 CanvasToCyllinderVertical(Vector3 pos)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001330")]
		[Address(RVA = "0xB318FC", Offset = "0xB318FC", VA = "0xB318FC")]
		private Vector3 CanvasToRing(Vector3 pos)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001331")]
		[Address(RVA = "0xB319DC", Offset = "0xB319DC", VA = "0xB319DC")]
		private Vector3 CanvasToSphere(Vector3 pos)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001333")]
		[Address(RVA = "0xB31B8C", Offset = "0xB31B8C", VA = "0xB31B8C")]
		public void AddEffectToChildren()
		{
		}

		[Token(Token = "0x6001334")]
		[Address(RVA = "0xB31F18", Offset = "0xB31F18", VA = "0xB31F18")]
		public Vector3 VertexPositionToCurvedCanvas(Vector3 pos)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001335")]
		[Address(RVA = "0xB31FA0", Offset = "0xB31FA0", VA = "0xB31FA0")]
		public Vector3 CanvasToCurvedCanvas(Vector3 pos)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001336")]
		[Address(RVA = "0xB32108", Offset = "0xB32108", VA = "0xB32108")]
		public Vector3 CanvasToCurvedCanvasNormal(Vector3 pos)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001337")]
		[Address(RVA = "0xB323B0", Offset = "0xB323B0", VA = "0xB323B0")]
		public bool RaycastToCanvasSpace(Ray ray, out Vector2 o_positionOnCanvas)
		{
			return default(bool);
		}

		[Token(Token = "0x6001338")]
		[Address(RVA = "0xB31174", Offset = "0xB31174", VA = "0xB31174")]
		public float GetCyllinderRadiusInCanvasSpace()
		{
			return default(float);
		}

		[Token(Token = "0x6001339")]
		[Address(RVA = "0xB32564", Offset = "0xB32564", VA = "0xB32564")]
		public Vector2 GetTesslationSize(bool modifiedByQuality = true)
		{
			return default(Vector2);
		}

		[Token(Token = "0x600133A")]
		[Address(RVA = "0xB326CC", Offset = "0xB326CC", VA = "0xB326CC")]
		private float GetSegmentsByAngle(float angle)
		{
			return default(float);
		}

		[Token(Token = "0x6001355")]
		[Address(RVA = "0xB329A8", Offset = "0xB329A8", VA = "0xB329A8")]
		public void SetAllChildrenDirty(bool recalculateCurveOnly = false)
		{
		}

		[Token(Token = "0x6001357")]
		[Address(RVA = "0xB32B44", Offset = "0xB32B44", VA = "0xB32B44")]
		public void Click()
		{
		}

		[Token(Token = "0x600135A")]
		[Address(RVA = "0xB32CA8", Offset = "0xB32CA8", VA = "0xB32CA8")]
		public List<GameObject> GetObjectsUnderPointer()
		{
			return null;
		}

		[Token(Token = "0x600135B")]
		[Address(RVA = "0xB32DA8", Offset = "0xB32DA8", VA = "0xB32DA8")]
		public List<GameObject> GetObjectsUnderScreenPos(Vector2 pos, [Optional] Camera eventCamera)
		{
			return null;
		}

		[Token(Token = "0x600135C")]
		[Address(RVA = "0xB32F04", Offset = "0xB32F04", VA = "0xB32F04")]
		public List<GameObject> GetObjectsHitByRay(Ray ray)
		{
			return null;
		}

		[Token(Token = "0x6001364")]
		[Address(RVA = "0xB332F8", Offset = "0xB332F8", VA = "0xB332F8")]
		public CurvedUISettings()
		{
		}
	}
	[Token(Token = "0x2000321")]
	public class CurvedUIVertexEffect : BaseMeshEffect
	{
		[Token(Token = "0x4001222")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Check to skip tesselation pass on this object. CurvedUI will not create additional vertices to make this object have a smoother curve. Checking this can solve some issues if you create your own procedural mesh for this object. Default false.")]
		public bool DoNotTesselate;

		[Token(Token = "0x4001223")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Canvas myCanvas;

		[Token(Token = "0x4001224")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private CurvedUISettings mySettings;

		[Token(Token = "0x4001225")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Graphic myGraphic;

		[Token(Token = "0x4001226")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Text myText;

		[Token(Token = "0x4001227")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private TextMeshProUGUI myTMP;

		[Token(Token = "0x4001228")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private CurvedUITMPSubmesh myTMPSubMesh;

		[Token(Token = "0x4001229")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool m_tesselationRequired;

		[Token(Token = "0x400122A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		private bool curvingRequired;

		[Token(Token = "0x400122B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5A")]
		private bool TransformMisaligned;

		[Token(Token = "0x400122C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Matrix4x4 CanvasToWorld;

		[Token(Token = "0x400122D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private Matrix4x4 CanvasToLocal;

		[Token(Token = "0x400122E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private Matrix4x4 MyToWorld;

		[Token(Token = "0x400122F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		private Matrix4x4 MyToLocal;

		[Token(Token = "0x4001230")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private List<UIVertex> m_tesselatedVerts;

		[Token(Token = "0x4001231")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private List<UIVertex> m_curvedVerts;

		[Token(Token = "0x4001232")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private List<UIVertex> m_vertsInQuads;

		[Token(Token = "0x4001233")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private UIVertex m_ret;

		[Token(Token = "0x4001234")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		private UIVertex[] m_quad;

		[Token(Token = "0x4001235")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		private float[] m_weights;

		[Token(Token = "0x4001236")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		[SerializeField]
		[HideInInspector]
		private Vector3 savedPos;

		[Token(Token = "0x4001237")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x204")]
		[HideInInspector]
		[SerializeField]
		private Vector3 savedUp;

		[Token(Token = "0x4001238")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		[SerializeField]
		[HideInInspector]
		private Vector2 savedRectSize;

		[Token(Token = "0x4001239")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		[HideInInspector]
		[SerializeField]
		private Color savedColor;

		[Token(Token = "0x400123A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		[HideInInspector]
		[SerializeField]
		private Vector4 savedTextUV0;

		[Token(Token = "0x400123B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
		[SerializeField]
		[HideInInspector]
		private float savedFill;

		[Token(Token = "0x400123C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x23C")]
		private Vector4 _uv0;

		[Token(Token = "0x400123D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24C")]
		private Vector4 _uv1;

		[Token(Token = "0x400123E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25C")]
		private Vector3 _pos;

		[Token(Token = "0x1700022B")]
		private bool tesselationRequired
		{
			[Token(Token = "0x6001365")]
			[Address(RVA = "0xB3333C", Offset = "0xB3333C", VA = "0xB3333C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001366")]
			[Address(RVA = "0xB33344", Offset = "0xB33344", VA = "0xB33344")]
			set
			{
			}
		}

		[Token(Token = "0x1700022C")]
		public bool TesselationRequired
		{
			[Token(Token = "0x6001379")]
			[Address(RVA = "0xB367C4", Offset = "0xB367C4", VA = "0xB367C4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600137A")]
			[Address(RVA = "0xB367B8", Offset = "0xB367B8", VA = "0xB367B8")]
			set
			{
			}
		}

		[Token(Token = "0x1700022D")]
		public bool CurvingRequired
		{
			[Token(Token = "0x600137B")]
			[Address(RVA = "0xB367CC", Offset = "0xB367CC", VA = "0xB367CC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600137C")]
			[Address(RVA = "0xB367D4", Offset = "0xB367D4", VA = "0xB367D4")]
			set
			{
			}
		}

		[Token(Token = "0x6001367")]
		[Address(RVA = "0xB33350", Offset = "0xB33350", VA = "0xB33350", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6001368")]
		[Address(RVA = "0xB33454", Offset = "0xB33454", VA = "0xB33454", Slot = "5")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6001369")]
		[Address(RVA = "0xB33728", Offset = "0xB33728", VA = "0xB33728", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x600136A")]
		[Address(RVA = "0xB33DD0", Offset = "0xB33DD0", VA = "0xB33DD0", Slot = "7")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x600136B")]
		[Address(RVA = "0xB33F68", Offset = "0xB33F68", VA = "0xB33F68")]
		private void TesselationRequiredCallback()
		{
		}

		[Token(Token = "0x600136C")]
		[Address(RVA = "0xB33F74", Offset = "0xB33F74", VA = "0xB33F74")]
		private void FontTextureRebuiltCallback(Font fontie)
		{
		}

		[Token(Token = "0x600136D")]
		[Address(RVA = "0xB34000", Offset = "0xB34000", VA = "0xB34000")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600136E")]
		[Address(RVA = "0xB34754", Offset = "0xB34754", VA = "0xB34754", Slot = "20")]
		public override void ModifyMesh(VertexHelper vh)
		{
		}

		[Token(Token = "0x600136F")]
		[Address(RVA = "0xB35738", Offset = "0xB35738", VA = "0xB35738")]
		public void ModifyTMPMesh(ref List<UIVertex> vertexList)
		{
		}

		[Token(Token = "0x6001370")]
		[Address(RVA = "0xB34E30", Offset = "0xB34E30", VA = "0xB34E30")]
		private bool ShouldModify()
		{
			return default(bool);
		}

		[Token(Token = "0x6001371")]
		[Address(RVA = "0xB34F14", Offset = "0xB34F14", VA = "0xB34F14")]
		private void CheckTextFontMaterial()
		{
		}

		[Token(Token = "0x6001372")]
		[Address(RVA = "0xB33610", Offset = "0xB33610", VA = "0xB33610")]
		public CurvedUISettings FindParentSettings(bool forceNew = false)
		{
			return null;
		}

		[Token(Token = "0x6001373")]
		[Address(RVA = "0xB35428", Offset = "0xB35428", VA = "0xB35428")]
		private UIVertex CurveVertex(UIVertex input, float cylinder_angle, float radius, Vector2 canvasSize)
		{
			return default(UIVertex);
		}

		[Token(Token = "0x6001374")]
		[Address(RVA = "0xB351A8", Offset = "0xB351A8", VA = "0xB351A8")]
		private void TesselateGeometry(List<UIVertex> verts)
		{
		}

		[Token(Token = "0x6001375")]
		[Address(RVA = "0xB35E2C", Offset = "0xB35E2C", VA = "0xB35E2C")]
		private void ModifyQuad(List<UIVertex> verts, int vertexIndex, Vector2 requiredSize)
		{
		}

		[Token(Token = "0x6001376")]
		[Address(RVA = "0xB35A14", Offset = "0xB35A14", VA = "0xB35A14")]
		private void TrisToQuads(List<UIVertex> verts)
		{
		}

		[Token(Token = "0x6001377")]
		[Address(RVA = "0xB36538", Offset = "0xB36538", VA = "0xB36538")]
		private UIVertex TesselateQuad(float x, float y)
		{
			return default(UIVertex);
		}

		[Token(Token = "0x6001378")]
		[Address(RVA = "0xB3171C", Offset = "0xB3171C", VA = "0xB3171C")]
		public void SetDirty()
		{
		}

		[Token(Token = "0x600137D")]
		[Address(RVA = "0xB367E0", Offset = "0xB367E0", VA = "0xB367E0")]
		public CurvedUIVertexEffect()
		{
		}
	}
	[Token(Token = "0x2000322")]
	public class CurvedUIViveController : MonoBehaviour
	{
		[Token(Token = "0x600137E")]
		[Address(RVA = "0xB36928", Offset = "0xB36928", VA = "0xB36928")]
		public CurvedUIViveController()
		{
		}
	}
	[Token(Token = "0x2000323")]
	public struct ViveInputArgs
	{
		[Token(Token = "0x400123F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint controllerIndex;

		[Token(Token = "0x4001240")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float buttonPressure;

		[Token(Token = "0x4001241")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Vector2 touchpadAxis;
	}
	[Token(Token = "0x2000324")]
	public delegate void ViveInputEvent(object sender, ViveInputArgs e);
	[Token(Token = "0x2000325")]
	public delegate void ViveEvent(object sender);
	[Token(Token = "0x2000326")]
	[ExecuteInEditMode]
	public class CurvedUITMP : MonoBehaviour
	{
		[Token(Token = "0x4001242")]
		private const int TesselationBudget = 2;

		[Token(Token = "0x4001243")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static int TesselationThisFrame;

		[Token(Token = "0x4001244")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private CurvedUIVertexEffect crvdVE;

		[Token(Token = "0x4001245")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private TextMeshProUGUI tmpText;

		[Token(Token = "0x4001246")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private CurvedUISettings mySettings;

		[Token(Token = "0x4001247")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<UIVertex> m_UIVerts;

		[Token(Token = "0x4001248")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private UIVertex m_tempVertex;

		[Token(Token = "0x4001249")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private CurvedUITMPSubmesh m_tempSubMsh;

		[Token(Token = "0x400124A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector2 savedSize;

		[Token(Token = "0x400124B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Vector3 savedUp;

		[Token(Token = "0x400124C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private Vector3 savedPos;

		[Token(Token = "0x400124D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Vector3 savedLocalScale;

		[Token(Token = "0x400124E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private Vector3 savedGlobalScale;

		[Token(Token = "0x400124F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private List<CurvedUITMPSubmesh> subMeshes;

		[Token(Token = "0x4001250")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public bool Dirty;

		[Token(Token = "0x4001251")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF1")]
		private bool curvingRequired;

		[Token(Token = "0x4001252")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF2")]
		private bool tesselationRequired;

		[Token(Token = "0x4001253")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF3")]
		private bool quitting;

		[Token(Token = "0x4001254")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Vector3[] vertices;

		[Token(Token = "0x6001387")]
		[Address(RVA = "0xB36CA0", Offset = "0xB36CA0", VA = "0xB36CA0")]
		private void Start()
		{
		}

		[Token(Token = "0x6001388")]
		[Address(RVA = "0xB36D50", Offset = "0xB36D50", VA = "0xB36D50")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001389")]
		[Address(RVA = "0xB37034", Offset = "0xB37034", VA = "0xB37034")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600138A")]
		[Address(RVA = "0xB371B0", Offset = "0xB371B0", VA = "0xB371B0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600138B")]
		[Address(RVA = "0xB371BC", Offset = "0xB371BC", VA = "0xB371BC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600138C")]
		[Address(RVA = "0xB37A48", Offset = "0xB37A48", VA = "0xB37A48")]
		private void CreateUIVertexList(Mesh mesh)
		{
		}

		[Token(Token = "0x600138D")]
		[Address(RVA = "0xB383D4", Offset = "0xB383D4", VA = "0xB383D4")]
		private void GetUIVertexFromMesh(ref UIVertex vert, int i)
		{
		}

		[Token(Token = "0x600138E")]
		[Address(RVA = "0xB37D10", Offset = "0xB37D10", VA = "0xB37D10")]
		private void FillMeshWithUIVertexList(Mesh mesh, List<UIVertex> list)
		{
		}

		[Token(Token = "0x600138F")]
		[Address(RVA = "0xB36F04", Offset = "0xB36F04", VA = "0xB36F04")]
		private void FindTMP()
		{
		}

		[Token(Token = "0x6001390")]
		[Address(RVA = "0xB37E70", Offset = "0xB37E70", VA = "0xB37E70")]
		private void FindSubmeshes()
		{
		}

		[Token(Token = "0x6001391")]
		[Address(RVA = "0xB37760", Offset = "0xB37760", VA = "0xB37760")]
		private bool ShouldTesselate()
		{
			return default(bool);
		}

		[Token(Token = "0x6001392")]
		[Address(RVA = "0xB38418", Offset = "0xB38418", VA = "0xB38418")]
		private void TMPTextChangedCallback(object obj)
		{
		}

		[Token(Token = "0x6001393")]
		[Address(RVA = "0xB38434", Offset = "0xB38434", VA = "0xB38434")]
		private void TesselationRequiredCallback()
		{
		}

		[Token(Token = "0x6001394")]
		[Address(RVA = "0xB38440", Offset = "0xB38440", VA = "0xB38440")]
		public CurvedUITMP()
		{
		}
	}
	[Token(Token = "0x2000327")]
	[ExecuteInEditMode]
	public class CurvedUITMPInputFieldCaret : MonoBehaviour, ISelectHandler, IEventSystemHandler, IDeselectHandler
	{
		[Token(Token = "0x2000328")]
		[CompilerGenerated]
		private sealed class <CaretBlinker>d__10 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400125B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400125C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400125D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public CurvedUITMPInputFieldCaret <>4__this;

			[Token(Token = "0x17000231")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60013A8")]
				[Address(RVA = "0xB39350", Offset = "0xB39350", VA = "0xB39350", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000232")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60013AA")]
				[Address(RVA = "0xB39398", Offset = "0xB39398", VA = "0xB39398", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60013A5")]
			[Address(RVA = "0xB390F4", Offset = "0xB390F4", VA = "0xB390F4")]
			[DebuggerHidden]
			public <CaretBlinker>d__10(int <>1__state)
			{
			}

			[Token(Token = "0x60013A6")]
			[Address(RVA = "0xB39234", Offset = "0xB39234", VA = "0xB39234", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60013A7")]
			[Address(RVA = "0xB39238", Offset = "0xB39238", VA = "0xB39238", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60013A9")]
			[Address(RVA = "0xB39358", Offset = "0xB39358", VA = "0xB39358", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001255")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private TMP_InputField myField;

		[Token(Token = "0x4001256")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private RectTransform myCaret;

		[Token(Token = "0x4001257")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Color origCaretColor;

		[Token(Token = "0x4001258")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Color origSelectionColor;

		[Token(Token = "0x4001259")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool selected;

		[Token(Token = "0x400125A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		private bool selectingText;

		[Token(Token = "0x1700022E")]
		public Color CaretColor
		{
			[Token(Token = "0x600139E")]
			[Address(RVA = "0xB391C4", Offset = "0xB391C4", VA = "0xB391C4")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x600139F")]
			[Address(RVA = "0xB391D0", Offset = "0xB391D0", VA = "0xB391D0")]
			set
			{
			}
		}

		[Token(Token = "0x1700022F")]
		public Color SelectionColor
		{
			[Token(Token = "0x60013A0")]
			[Address(RVA = "0xB391DC", Offset = "0xB391DC", VA = "0xB391DC")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x60013A1")]
			[Address(RVA = "0xB391E8", Offset = "0xB391E8", VA = "0xB391E8")]
			set
			{
			}
		}

		[Token(Token = "0x17000230")]
		public float CaretBlinkRate
		{
			[Token(Token = "0x60013A2")]
			[Address(RVA = "0xB391F4", Offset = "0xB391F4", VA = "0xB391F4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60013A3")]
			[Address(RVA = "0xB39210", Offset = "0xB39210", VA = "0xB39210")]
			set
			{
			}
		}

		[Token(Token = "0x6001395")]
		[Address(RVA = "0xB38518", Offset = "0xB38518", VA = "0xB38518")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001396")]
		[Address(RVA = "0xB3898C", Offset = "0xB3898C", VA = "0xB3898C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001397")]
		[Address(RVA = "0xB38C30", Offset = "0xB38C30", VA = "0xB38C30", Slot = "4")]
		public void OnSelect(BaseEventData eventData)
		{
		}

		[Token(Token = "0x6001398")]
		[Address(RVA = "0xB390C0", Offset = "0xB390C0", VA = "0xB390C0", Slot = "5")]
		public void OnDeselect(BaseEventData eventData)
		{
		}

		[Token(Token = "0x6001399")]
		[Address(RVA = "0xB3904C", Offset = "0xB3904C", VA = "0xB3904C")]
		[IteratorStateMachine(typeof(<CaretBlinker>d__10))]
		private IEnumerator CaretBlinker()
		{
			return null;
		}

		[Token(Token = "0x600139A")]
		[Address(RVA = "0xB38CE0", Offset = "0xB38CE0", VA = "0xB38CE0")]
		private void CreateCaret()
		{
		}

		[Token(Token = "0x600139B")]
		[Address(RVA = "0xB3899C", Offset = "0xB3899C", VA = "0xB3899C")]
		private void UpdateCaret()
		{
		}

		[Token(Token = "0x600139C")]
		[Address(RVA = "0xB3911C", Offset = "0xB3911C", VA = "0xB3911C")]
		private Vector2 GetLocalPositionInText(int charNo)
		{
			return default(Vector2);
		}

		[Token(Token = "0x600139D")]
		[Address(RVA = "0xB385CC", Offset = "0xB385CC", VA = "0xB385CC")]
		private void CheckAndConvertMask()
		{
		}

		[Token(Token = "0x60013A4")]
		[Address(RVA = "0xB3922C", Offset = "0xB3922C", VA = "0xB3922C")]
		public CurvedUITMPInputFieldCaret()
		{
		}
	}
	[Token(Token = "0x2000329")]
	[ExecuteInEditMode]
	public class CurvedUITMPSubmesh : MonoBehaviour
	{
		[Token(Token = "0x400125E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private VertexHelper vh;

		[Token(Token = "0x400125F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Mesh straightMesh;

		[Token(Token = "0x4001260")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Mesh curvedMesh;

		[Token(Token = "0x4001261")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private CurvedUIVertexEffect crvdVE;

		[Token(Token = "0x4001262")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private TMP_SubMeshUI TMPsub;

		[Token(Token = "0x4001263")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private TextMeshProUGUI TMPtext;

		[Token(Token = "0x60013AB")]
		[Address(RVA = "0xB37FEC", Offset = "0xB37FEC", VA = "0xB37FEC")]
		public void UpdateSubmesh(bool tesselate, bool curve)
		{
		}

		[Token(Token = "0x60013AC")]
		[Address(RVA = "0xB393A0", Offset = "0xB393A0", VA = "0xB393A0")]
		public CurvedUITMPSubmesh()
		{
		}
	}
	[Token(Token = "0x200032A")]
	[Conditional("UNITY_CCU")]
	[AttributeUsage(AttributeTargets.Assembly, AllowMultiple = true)]
	public class OptionalDependencyAttribute : Attribute
	{
		[Token(Token = "0x4001264")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string dependentClass;

		[Token(Token = "0x4001265")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string define;

		[Token(Token = "0x60013AD")]
		[Address(RVA = "0xB393A8", Offset = "0xB393A8", VA = "0xB393A8")]
		public OptionalDependencyAttribute(string dependentClass, string define)
		{
		}
	}
}
namespace Bhaptics.SDK2
{
	[Token(Token = "0x200032B")]
	public class PlayParamSample : MonoBehaviour
	{
		[Token(Token = "0x200032C")]
		[CompilerGenerated]
		private sealed class <OnClickPlayCor>d__54 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001283")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001284")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001285")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PlayParamSample <>4__this;

			[Token(Token = "0x17000238")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60013C9")]
				[Address(RVA = "0xB3AC48", Offset = "0xB3AC48", VA = "0xB3AC48", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000239")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60013CB")]
				[Address(RVA = "0xB3AC90", Offset = "0xB3AC90", VA = "0xB3AC90", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60013C6")]
			[Address(RVA = "0xB3A628", Offset = "0xB3A628", VA = "0xB3A628")]
			[DebuggerHidden]
			public <OnClickPlayCor>d__54(int <>1__state)
			{
			}

			[Token(Token = "0x60013C7")]
			[Address(RVA = "0xB3A9DC", Offset = "0xB3A9DC", VA = "0xB3A9DC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60013C8")]
			[Address(RVA = "0xB3A9E0", Offset = "0xB3A9E0", VA = "0xB3A9E0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60013CA")]
			[Address(RVA = "0xB3AC50", Offset = "0xB3AC50", VA = "0xB3AC50", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001266")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly string SampleAppID;

		[Token(Token = "0x4001267")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly string SampleApiKey;

		[Token(Token = "0x4001268")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Canvas")]
		[SerializeField]
		private Canvas initCanvas;

		[Token(Token = "0x4001269")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Canvas mainCanvas;

		[Token(Token = "0x400126A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Dropdown")]
		[SerializeField]
		private Dropdown eventsDropdown;

		[Token(Token = "0x400126B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[Header("Slider")]
		private Slider sliderIntensity;

		[Token(Token = "0x400126C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private Slider sliderDuration;

		[Token(Token = "0x400126D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private Slider sliderAngleX;

		[Token(Token = "0x400126E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private Slider sliderOffsetY;

		[Token(Token = "0x400126F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Header("Text")]
		[SerializeField]
		private Text intensityValueText;

		[Token(Token = "0x4001270")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private Text durationValueText;

		[Token(Token = "0x4001271")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private Text angleXValueText;

		[Token(Token = "0x4001272")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private Text offsetYValueText;

		[Token(Token = "0x4001273")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private Text playButtonText;

		[Token(Token = "0x4001274")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Header("Button")]
		[SerializeField]
		private Button intensityResetButton;

		[Token(Token = "0x4001275")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		private Button durationResetButton;

		[Token(Token = "0x4001276")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		private Button angleXResetButton;

		[Token(Token = "0x4001277")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		private Button offsetYResetButton;

		[Token(Token = "0x4001278")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Header("Sample")]
		[SerializeField]
		private BhapticsSettings sampleSettings;

		[Token(Token = "0x4001279")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private int requestId;

		[Token(Token = "0x400127A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private string eventName;

		[Token(Token = "0x400127B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private MappingMetaData[] events;

		[Token(Token = "0x400127C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Coroutine onClickPlayCoroutine;

		[Token(Token = "0x400127D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private BhapticsSettings currentSettings;

		[Token(Token = "0x400127E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private float intensity;

		[Token(Token = "0x400127F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private float duration;

		[Token(Token = "0x4001280")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private float angleX;

		[Token(Token = "0x4001281")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private float offsetY;

		[Token(Token = "0x4001282")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private int selectedIndex;

		[Token(Token = "0x17000233")]
		public float Intensity
		{
			[Token(Token = "0x60013AE")]
			[Address(RVA = "0xB393EC", Offset = "0xB393EC", VA = "0xB393EC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60013AF")]
			[Address(RVA = "0xB393F4", Offset = "0xB393F4", VA = "0xB393F4")]
			set
			{
			}
		}

		[Token(Token = "0x17000234")]
		public float Duration
		{
			[Token(Token = "0x60013B0")]
			[Address(RVA = "0xB39534", Offset = "0xB39534", VA = "0xB39534")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60013B1")]
			[Address(RVA = "0xB3953C", Offset = "0xB3953C", VA = "0xB3953C")]
			set
			{
			}
		}

		[Token(Token = "0x17000235")]
		public float AngleX
		{
			[Token(Token = "0x60013B2")]
			[Address(RVA = "0xB3967C", Offset = "0xB3967C", VA = "0xB3967C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60013B3")]
			[Address(RVA = "0xB39684", Offset = "0xB39684", VA = "0xB39684")]
			set
			{
			}
		}

		[Token(Token = "0x17000236")]
		public float OffsetY
		{
			[Token(Token = "0x60013B4")]
			[Address(RVA = "0xB397C4", Offset = "0xB397C4", VA = "0xB397C4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60013B5")]
			[Address(RVA = "0xB397CC", Offset = "0xB397CC", VA = "0xB397CC")]
			set
			{
			}
		}

		[Token(Token = "0x17000237")]
		public int SelectedIndex
		{
			[Token(Token = "0x60013B6")]
			[Address(RVA = "0xB3990C", Offset = "0xB3990C", VA = "0xB3990C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60013B7")]
			[Address(RVA = "0xB39914", Offset = "0xB39914", VA = "0xB39914")]
			set
			{
			}
		}

		[Token(Token = "0x60013B8")]
		[Address(RVA = "0xB3991C", Offset = "0xB3991C", VA = "0xB3991C")]
		private void Start()
		{
		}

		[Token(Token = "0x60013B9")]
		[Address(RVA = "0xB39A38", Offset = "0xB39A38", VA = "0xB39A38")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60013BA")]
		[Address(RVA = "0xB39A5C", Offset = "0xB39A5C", VA = "0xB39A5C")]
		public void OnClickPlay()
		{
		}

		[Token(Token = "0x60013BB")]
		[Address(RVA = "0xB39CE4", Offset = "0xB39CE4", VA = "0xB39CE4")]
		public void SetOffsetY(string offsetYStr)
		{
		}

		[Token(Token = "0x60013BC")]
		[Address(RVA = "0xB39D24", Offset = "0xB39D24", VA = "0xB39D24")]
		public void OpenDeveloperPortal()
		{
		}

		[Token(Token = "0x60013BD")]
		[Address(RVA = "0xB39D68", Offset = "0xB39D68", VA = "0xB39D68")]
		public void OpenGuideLink()
		{
		}

		[Token(Token = "0x60013BE")]
		[Address(RVA = "0xB39DAC", Offset = "0xB39DAC", VA = "0xB39DAC")]
		public void UseSampleSettings()
		{
		}

		[Token(Token = "0x60013BF")]
		[Address(RVA = "0xB3A1CC", Offset = "0xB3A1CC", VA = "0xB3A1CC")]
		private void PlayHaptic(string eventName, float intensity, float duration, float angleX, float offsetY)
		{
		}

		[Token(Token = "0x60013C0")]
		[Address(RVA = "0xB39B70", Offset = "0xB39B70", VA = "0xB39B70")]
		private void StopHaptic()
		{
		}

		[Token(Token = "0x60013C1")]
		[Address(RVA = "0xB3A570", Offset = "0xB3A570", VA = "0xB3A570")]
		private void ResetValues()
		{
		}

		[Token(Token = "0x60013C2")]
		[Address(RVA = "0xB39AFC", Offset = "0xB39AFC", VA = "0xB39AFC")]
		[IteratorStateMachine(typeof(<OnClickPlayCor>d__54))]
		private IEnumerator OnClickPlayCor()
		{
			return null;
		}

		[Token(Token = "0x60013C3")]
		[Address(RVA = "0xB3A650", Offset = "0xB3A650", VA = "0xB3A650")]
		private void SetupApplicationData()
		{
		}

		[Token(Token = "0x60013C4")]
		[Address(RVA = "0xB39990", Offset = "0xB39990", VA = "0xB39990")]
		private void CheckApplicationSetting()
		{
		}

		[Token(Token = "0x60013C5")]
		[Address(RVA = "0xB3A918", Offset = "0xB3A918", VA = "0xB3A918")]
		public PlayParamSample()
		{
		}
	}
	[Token(Token = "0x200032D")]
	public class AndroidHaptic
	{
		[Token(Token = "0x4001286")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected static AndroidJavaObject androidJavaObject;

		[Token(Token = "0x4001287")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly object[] PlayParams;

		[Token(Token = "0x4001288")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly object[] PlayParamParams;

		[Token(Token = "0x4001289")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static readonly object[] EmptyParams;

		[Token(Token = "0x400128A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static readonly object[] IsPlayingParams;

		[Token(Token = "0x400128B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static readonly object[] StopByRequestIdParams;

		[Token(Token = "0x400128C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static readonly object[] StopByEventIdParams;

		[Token(Token = "0x400128D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static readonly object[] PingParams;

		[Token(Token = "0x400128E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<HapticDevice> deviceList;

		[Token(Token = "0x400128F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected IntPtr AndroidJavaObjectPtr;

		[Token(Token = "0x4001290")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected IntPtr InitializePtr;

		[Token(Token = "0x4001291")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected IntPtr PlayPtr;

		[Token(Token = "0x4001292")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected IntPtr PlayPosPtr;

		[Token(Token = "0x4001293")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected IntPtr PlayParamPtr;

		[Token(Token = "0x4001294")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected IntPtr PlayPosParamPtr;

		[Token(Token = "0x4001295")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected IntPtr StopIntPtr;

		[Token(Token = "0x4001296")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected IntPtr StopByEventIdPtr;

		[Token(Token = "0x4001297")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected IntPtr StopAllPtr;

		[Token(Token = "0x4001298")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected IntPtr SubmitRegisteredPtr;

		[Token(Token = "0x4001299")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected IntPtr SubmitRegisteredWithTimePtr;

		[Token(Token = "0x400129A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected IntPtr RegisterPtr;

		[Token(Token = "0x400129B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected IntPtr RegisterReflectedPtr;

		[Token(Token = "0x400129C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected IntPtr PingPtr;

		[Token(Token = "0x400129D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected IntPtr PingAllPtr;

		[Token(Token = "0x400129E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected IntPtr IsRegisteredPtr;

		[Token(Token = "0x400129F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected IntPtr IsPlayingPtr;

		[Token(Token = "0x40012A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected IntPtr IsPlayingAnythingPtr;

		[Token(Token = "0x40012A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		protected IntPtr IsPlayingByEventIdPtr;

		[Token(Token = "0x40012A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected IntPtr IsPlayingByRequestIdPtr;

		[Token(Token = "0x40012A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		protected IntPtr ToggleStreamPtr;

		[Token(Token = "0x40012A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected IntPtr IsStreamingEnablePtr;

		[Token(Token = "0x40012A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		protected IntPtr GetStreamingHostsPtr;

		[Token(Token = "0x40012A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		protected IntPtr ShowBluetoothPtr;

		[Token(Token = "0x40012A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		protected IntPtr RefreshPairingInfoPtr;

		[Token(Token = "0x60013CC")]
		[Address(RVA = "0xB3AC98", Offset = "0xB3AC98", VA = "0xB3AC98")]
		public AndroidHaptic()
		{
		}

		[Token(Token = "0x60013CD")]
		[Address(RVA = "0xB3B98C", Offset = "0xB3B98C", VA = "0xB3B98C")]
		public bool CheckBhapticsAvailable()
		{
			return default(bool);
		}

		[Token(Token = "0x60013CE")]
		[Address(RVA = "0xB3B714", Offset = "0xB3B714", VA = "0xB3B714")]
		public List<HapticDevice> GetDevices()
		{
			return null;
		}

		[Token(Token = "0x60013CF")]
		[Address(RVA = "0xB3BBF0", Offset = "0xB3BBF0", VA = "0xB3BBF0")]
		public void Initialize(string workspaceId, string sdkKey, string json)
		{
		}

		[Token(Token = "0x60013D0")]
		[Address(RVA = "0xB3BE70", Offset = "0xB3BE70", VA = "0xB3BE70")]
		public bool IsConnect()
		{
			return default(bool);
		}

		[Token(Token = "0x60013D1")]
		[Address(RVA = "0xB3BE78", Offset = "0xB3BE78", VA = "0xB3BE78")]
		public bool IsPlaying()
		{
			return default(bool);
		}

		[Token(Token = "0x60013D2")]
		[Address(RVA = "0xB3BF9C", Offset = "0xB3BF9C", VA = "0xB3BF9C")]
		public bool IsPlayingByEventId(string eventId)
		{
			return default(bool);
		}

		[Token(Token = "0x60013D3")]
		[Address(RVA = "0xB3C090", Offset = "0xB3C090", VA = "0xB3C090")]
		public bool IsPlayingByRequestId(int requestId)
		{
			return default(bool);
		}

		[Token(Token = "0x60013D4")]
		[Address(RVA = "0xB3C1B0", Offset = "0xB3C1B0", VA = "0xB3C1B0")]
		public int Play(string eventId)
		{
			return default(int);
		}

		[Token(Token = "0x60013D5")]
		[Address(RVA = "0xB3C334", Offset = "0xB3C334", VA = "0xB3C334")]
		public int PlayParam(string eventId, float intensity, float duration, float angleX, float offsetY)
		{
			return default(int);
		}

		[Token(Token = "0x60013D6")]
		[Address(RVA = "0xB3C628", Offset = "0xB3C628", VA = "0xB3C628")]
		public int PlayMotors(int position, int[] motors, int durationMillis)
		{
			return default(int);
		}

		[Token(Token = "0x60013D7")]
		[Address(RVA = "0xB3C818", Offset = "0xB3C818", VA = "0xB3C818")]
		public bool StopByRequestId(int key)
		{
			return default(bool);
		}

		[Token(Token = "0x60013D8")]
		[Address(RVA = "0xB3C938", Offset = "0xB3C938", VA = "0xB3C938")]
		public bool StopByEventId(string eventId)
		{
			return default(bool);
		}

		[Token(Token = "0x60013D9")]
		[Address(RVA = "0xB3CB48", Offset = "0xB3CB48", VA = "0xB3CB48")]
		public bool Stop()
		{
			return default(bool);
		}

		[Token(Token = "0x60013DA")]
		[Address(RVA = "0xB3CCF8", Offset = "0xB3CCF8", VA = "0xB3CCF8")]
		public void Dispose()
		{
		}

		[Token(Token = "0x60013DB")]
		[Address(RVA = "0xB3CE10", Offset = "0xB3CE10", VA = "0xB3CE10")]
		public void TogglePosition(string address)
		{
		}

		[Token(Token = "0x60013DC")]
		[Address(RVA = "0xB3CF50", Offset = "0xB3CF50", VA = "0xB3CF50")]
		public void PingAll()
		{
		}

		[Token(Token = "0x60013DD")]
		[Address(RVA = "0xB3CFE0", Offset = "0xB3CFE0", VA = "0xB3CFE0")]
		public void Ping(string address)
		{
		}

		[Token(Token = "0x60013DE")]
		[Address(RVA = "0xB3BDE4", Offset = "0xB3BDE4", VA = "0xB3BDE4")]
		private void CallNativeVoidMethod(IntPtr methodPtr, object[] param)
		{
		}

		[Token(Token = "0x60013DF")]
		[Address(RVA = "0xB3BF0C", Offset = "0xB3BF0C", VA = "0xB3BF0C")]
		private bool CallNativeBoolMethod(IntPtr methodPtr, object[] param)
		{
			return default(bool);
		}

		[Token(Token = "0x60013E0")]
		[Address(RVA = "0xB3C2A4", Offset = "0xB3C2A4", VA = "0xB3C2A4")]
		private int CallNativeIntMethod(IntPtr methodPtr, object[] param)
		{
			return default(int);
		}
	}
	[Token(Token = "0x200032E")]
	internal class AndroidUtils
	{
		[Token(Token = "0x60013E2")]
		[Address(RVA = "0xB3D0D0", Offset = "0xB3D0D0", VA = "0xB3D0D0")]
		public static void CallNativeVoidMethod(IntPtr androidObjPtr, IntPtr methodPtr, object[] param)
		{
		}

		[Token(Token = "0x60013E3")]
		[Address(RVA = "0xB3D2D8", Offset = "0xB3D2D8", VA = "0xB3D2D8")]
		public static bool CallNativeBoolMethod(IntPtr androidObjPtr, IntPtr methodPtr, object[] param)
		{
			return default(bool);
		}

		[Token(Token = "0x60013E4")]
		[Address(RVA = "0xB3D4E8", Offset = "0xB3D4E8", VA = "0xB3D4E8")]
		public static int CallNativeIntMethod(IntPtr androidObjPtr, IntPtr methodPtr, object[] param)
		{
			return default(int);
		}

		[Token(Token = "0x60013E5")]
		[Address(RVA = "0xB3D840", Offset = "0xB3D840", VA = "0xB3D840")]
		public AndroidUtils()
		{
		}
	}
	[Token(Token = "0x200032F")]
	public class BhapticsLibrary
	{
		[Token(Token = "0x40012A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly object Lock;

		[Token(Token = "0x40012A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly List<HapticDevice> EmptyDevices;

		[Token(Token = "0x40012AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static AndroidHaptic android;

		[Token(Token = "0x40012AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static bool _initialized;

		[Token(Token = "0x40012AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		private static bool isAvailable;

		[Token(Token = "0x40012AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		private static bool isAvailableChecked;

		[Token(Token = "0x60013E6")]
		[Address(RVA = "0xB3D848", Offset = "0xB3D848", VA = "0xB3D848")]
		public static bool IsBhapticsAvailable()
		{
			return default(bool);
		}

		[Token(Token = "0x60013E7")]
		[Address(RVA = "0xB3D8DC", Offset = "0xB3D8DC", VA = "0xB3D8DC")]
		public static bool IsBhapticsAvailableForce()
		{
			return default(bool);
		}

		[Token(Token = "0x60013E8")]
		[Address(RVA = "0xB39E40", Offset = "0xB39E40", VA = "0xB39E40")]
		public static bool Initialize(string appId, string apiKey, string json)
		{
			return default(bool);
		}

		[Token(Token = "0x60013E9")]
		[Address(RVA = "0xB3DDE0", Offset = "0xB3DDE0", VA = "0xB3DDE0")]
		public static void Destroy()
		{
		}

		[Token(Token = "0x60013EA")]
		[Address(RVA = "0xB3DFB0", Offset = "0xB3DFB0", VA = "0xB3DFB0")]
		public static bool IsConnect(PositionType type)
		{
			return default(bool);
		}

		[Token(Token = "0x60013EB")]
		[Address(RVA = "0xB3E2E0", Offset = "0xB3E2E0", VA = "0xB3E2E0")]
		public static int Play(string eventId)
		{
			return default(int);
		}

		[Token(Token = "0x60013EC")]
		[Address(RVA = "0xB3A330", Offset = "0xB3A330", VA = "0xB3A330")]
		public static int PlayParam(string eventId, float intensity, float duration, float angleX, float offsetY)
		{
			return default(int);
		}

		[Token(Token = "0x60013ED")]
		[Address(RVA = "0xB3E554", Offset = "0xB3E554", VA = "0xB3E554")]
		public static int PlayMotors(int position, int[] motors, int durationMillis)
		{
			return default(int);
		}

		[Token(Token = "0x60013EE")]
		[Address(RVA = "0xB3E6FC", Offset = "0xB3E6FC", VA = "0xB3E6FC")]
		public static bool StopByEventId(string eventId)
		{
			return default(bool);
		}

		[Token(Token = "0x60013EF")]
		[Address(RVA = "0xB3A498", Offset = "0xB3A498", VA = "0xB3A498")]
		public static bool StopInt(int requestId)
		{
			return default(bool);
		}

		[Token(Token = "0x60013F0")]
		[Address(RVA = "0xB3E8EC", Offset = "0xB3E8EC", VA = "0xB3E8EC")]
		public static bool StopAll()
		{
			return default(bool);
		}

		[Token(Token = "0x60013F1")]
		[Address(RVA = "0xB3EA28", Offset = "0xB3EA28", VA = "0xB3EA28")]
		public static bool IsPlaying()
		{
			return default(bool);
		}

		[Token(Token = "0x60013F2")]
		[Address(RVA = "0xB3EB64", Offset = "0xB3EB64", VA = "0xB3EB64")]
		public static bool IsPlayingByEventId(string eventId)
		{
			return default(bool);
		}

		[Token(Token = "0x60013F3")]
		[Address(RVA = "0xB3AB70", Offset = "0xB3AB70", VA = "0xB3AB70")]
		public static bool IsPlayingByRequestId(int requestId)
		{
			return default(bool);
		}

		[Token(Token = "0x60013F4")]
		[Address(RVA = "0xB3ED58", Offset = "0xB3ED58", VA = "0xB3ED58")]
		public static List<HapticDevice> GetDevices()
		{
			return null;
		}

		[Token(Token = "0x60013F5")]
		[Address(RVA = "0xB3E04C", Offset = "0xB3E04C", VA = "0xB3E04C")]
		public static List<HapticDevice> GetConnectedDevices(PositionType pos)
		{
			return null;
		}

		[Token(Token = "0x60013F6")]
		[Address(RVA = "0xB3EFF4", Offset = "0xB3EFF4", VA = "0xB3EFF4")]
		public static List<HapticDevice> GetPairedDevices(PositionType pos)
		{
			return null;
		}

		[Token(Token = "0x60013F7")]
		[Address(RVA = "0xB3F280", Offset = "0xB3F280", VA = "0xB3F280")]
		public static void Ping(PositionType pos)
		{
		}

		[Token(Token = "0x60013F8")]
		[Address(RVA = "0xB3F40C", Offset = "0xB3F40C", VA = "0xB3F40C")]
		public static void Ping(HapticDevice targetDevice)
		{
		}

		[Token(Token = "0x60013F9")]
		[Address(RVA = "0xB3F580", Offset = "0xB3F580", VA = "0xB3F580")]
		public static void PingAll()
		{
		}

		[Token(Token = "0x60013FA")]
		[Address(RVA = "0xB3F6B8", Offset = "0xB3F6B8", VA = "0xB3F6B8")]
		public static void TogglePosition(HapticDevice targetDevice)
		{
		}

		[Token(Token = "0x60013FB")]
		[Address(RVA = "0xB3F828", Offset = "0xB3F828", VA = "0xB3F828")]
		public static void OnApplicationFocus()
		{
		}

		[Token(Token = "0x60013FC")]
		[Address(RVA = "0xB3F874", Offset = "0xB3F874", VA = "0xB3F874")]
		public static void OnApplicationPause()
		{
		}

		[Token(Token = "0x60013FD")]
		[Address(RVA = "0xB3F8C0", Offset = "0xB3F8C0", VA = "0xB3F8C0")]
		public BhapticsLibrary()
		{
		}
	}
	[Token(Token = "0x2000330")]
	public class bhaptics_library
	{
		[Token(Token = "0x40012AE")]
		private const string ModuleName = "bhaptics_library";

		[PreserveSig]
		[Token(Token = "0x60013FF")]
		[Address(RVA = "0xB3DD04", Offset = "0xB3DD04", VA = "0xB3DD04")]
		public static extern bool registryAndInit(string sdkAPIKey, string workspaceId, string initData);

		[PreserveSig]
		[Token(Token = "0x6001400")]
		[Address(RVA = "0xB3F9C8", Offset = "0xB3F9C8", VA = "0xB3F9C8")]
		public static extern bool registryAndInitHost(string sdkAPIKey, string workspaceId, string initData, string url);

		[PreserveSig]
		[Token(Token = "0x6001401")]
		[Address(RVA = "0xB3DC94", Offset = "0xB3DC94", VA = "0xB3DC94")]
		public static extern bool wsIsConnected();

		[PreserveSig]
		[Token(Token = "0x6001402")]
		[Address(RVA = "0xB3DF4C", Offset = "0xB3DF4C", VA = "0xB3DF4C")]
		public static extern void wsClose();

		[PreserveSig]
		[Token(Token = "0x6001403")]
		[Address(RVA = "0xB3FAC0", Offset = "0xB3FAC0", VA = "0xB3FAC0")]
		public static extern bool reInitMessage(string sdkAPIKey, string workspaceId, string initData);

		[PreserveSig]
		[Token(Token = "0x6001404")]
		[Address(RVA = "0xB3E3F4", Offset = "0xB3E3F4", VA = "0xB3E3F4")]
		public static extern int play(string key);

		[PreserveSig]
		[Token(Token = "0x6001405")]
		[Address(RVA = "0xB3E488", Offset = "0xB3E488", VA = "0xB3E488")]
		public static extern int playPosParam(string key, int position, float intensity, float duration, float angleX, float offsetY);

		[PreserveSig]
		[Token(Token = "0x6001406")]
		[Address(RVA = "0xB3E86C", Offset = "0xB3E86C", VA = "0xB3E86C")]
		public static extern bool stop(int key);

		[PreserveSig]
		[Token(Token = "0x6001407")]
		[Address(RVA = "0xB3E7D4", Offset = "0xB3E7D4", VA = "0xB3E7D4")]
		public static extern bool stopByEventId(string eventId);

		[PreserveSig]
		[Token(Token = "0x6001408")]
		[Address(RVA = "0xB3E9B8", Offset = "0xB3E9B8", VA = "0xB3E9B8")]
		public static extern bool stopAll();

		[PreserveSig]
		[Token(Token = "0x6001409")]
		[Address(RVA = "0xB3EAF4", Offset = "0xB3EAF4", VA = "0xB3EAF4")]
		public static extern bool isPlaying();

		[PreserveSig]
		[Token(Token = "0x600140A")]
		[Address(RVA = "0xB3ECD4", Offset = "0xB3ECD4", VA = "0xB3ECD4")]
		public static extern bool isPlayingByRequestId(int key);

		[PreserveSig]
		[Token(Token = "0x600140B")]
		[Address(RVA = "0xB3EC3C", Offset = "0xB3EC3C", VA = "0xB3EC3C")]
		public static extern bool isPlayingByEventId(string eventId);

		[PreserveSig]
		[Token(Token = "0x600140C")]
		[Address(RVA = "0xB3FB9C", Offset = "0xB3FB9C", VA = "0xB3FB9C")]
		public static extern bool isbHapticsConnected(int position);

		[PreserveSig]
		[Token(Token = "0x600140D")]
		[Address(RVA = "0xB3F4E8", Offset = "0xB3F4E8", VA = "0xB3F4E8")]
		public static extern bool ping(string address);

		[PreserveSig]
		[Token(Token = "0x600140E")]
		[Address(RVA = "0xB3F648", Offset = "0xB3F648", VA = "0xB3F648")]
		public static extern bool pingAll();

		[PreserveSig]
		[Token(Token = "0x600140F")]
		[Address(RVA = "0xB3F790", Offset = "0xB3F790", VA = "0xB3F790")]
		public static extern bool swapPosition(string address);

		[PreserveSig]
		[Token(Token = "0x6001410")]
		[Address(RVA = "0xB3FC20", Offset = "0xB3FC20", VA = "0xB3FC20")]
		public static extern IntPtr getDeviceInfoJson();

		[PreserveSig]
		[Token(Token = "0x6001411")]
		[Address(RVA = "0xB3DB30", Offset = "0xB3DB30", VA = "0xB3DB30")]
		public static extern bool isPlayerInstalled();

		[PreserveSig]
		[Token(Token = "0x6001412")]
		[Address(RVA = "0xB3DBA0", Offset = "0xB3DBA0", VA = "0xB3DBA0")]
		public static extern bool isPlayerRunning();

		[PreserveSig]
		[Token(Token = "0x6001413")]
		[Address(RVA = "0xB3DC10", Offset = "0xB3DC10", VA = "0xB3DC10")]
		public static extern bool launchPlayer(bool b);

		[PreserveSig]
		[Token(Token = "0x6001414")]
		[Address(RVA = "0xB3FC88", Offset = "0xB3FC88", VA = "0xB3FC88")]
		public static extern IntPtr bHapticsGetHapticMessage(string apiKey, string appId, int lastVersion, out int status);

		[PreserveSig]
		[Token(Token = "0x6001415")]
		[Address(RVA = "0xB3FD54", Offset = "0xB3FD54", VA = "0xB3FD54")]
		public static extern IntPtr bHapticsGetHapticMappings(string apiKey, string appId, int lastVersion, out int status);

		[PreserveSig]
		[Token(Token = "0x6001416")]
		[Address(RVA = "0xB3E658", Offset = "0xB3E658", VA = "0xB3E658")]
		public static extern int playDot(int position, int durationMillis, int[] motors, int size);

		[Token(Token = "0x6001417")]
		[Address(RVA = "0xB3EE48", Offset = "0xB3EE48", VA = "0xB3EE48")]
		public static List<HapticDevice> GetDevices()
		{
			return null;
		}

		[Token(Token = "0x6001418")]
		[Address(RVA = "0xB40090", Offset = "0xB40090", VA = "0xB40090")]
		public static List<MappingMetaData> EditorGetEventList(string appId, string apiKey, int lastVersion, out int status)
		{
			return null;
		}

		[Token(Token = "0x6001419")]
		[Address(RVA = "0xB4027C", Offset = "0xB4027C", VA = "0xB4027C")]
		public static string EditorGetSettings(string appId, string apiKey, int lastVersion, out int status2)
		{
			return null;
		}

		[Token(Token = "0x600141A")]
		[Address(RVA = "0xB3FE20", Offset = "0xB3FE20", VA = "0xB3FE20")]
		private static string PtrToStringUtf8(IntPtr ptr)
		{
			return null;
		}

		[Token(Token = "0x600141B")]
		[Address(RVA = "0xB40308", Offset = "0xB40308", VA = "0xB40308")]
		public bhaptics_library()
		{
		}
	}
	[Token(Token = "0x2000331")]
	public class BhapticsEvent
	{
		[Token(Token = "0x40012AF")]
		public const string MIRACLE_LOCUSTS = "miracle_locusts";

		[Token(Token = "0x40012B0")]
		public const string PLACE_TERRAIN_GRASS = "place_terrain_grass";

		[Token(Token = "0x40012B1")]
		public const string MIRACLE_TORNADO = "miracle_tornado";

		[Token(Token = "0x40012B2")]
		public const string ALERT = "alert";

		[Token(Token = "0x40012B3")]
		public const string MIRACLE_CREATURE = "miracle_creature";

		[Token(Token = "0x40012B4")]
		public const string MIRACLE_OMEN_INSPIRATION = "miracle_omen_inspiration";

		[Token(Token = "0x40012B5")]
		public const string THUNDER = "thunder";

		[Token(Token = "0x40012B6")]
		public const string NEARBYEXPLOSION = "nearbyexplosion";

		[Token(Token = "0x40012B7")]
		public const string ENVIRONMENTFIRE_1 = "environmentfire_1";

		[Token(Token = "0x40012B8")]
		public const string THROW_RIGHT = "throw_right";

		[Token(Token = "0x40012B9")]
		public const string ENVIRONMENTFIRE_2 = "environmentfire_2";

		[Token(Token = "0x40012BA")]
		public const string PLACE_TERRAIN_WATER = "place_terrain_water";

		[Token(Token = "0x40012BB")]
		public const string THROW_LEFT = "throw_left";

		[Token(Token = "0x40012BC")]
		public const string PLACE_TERRAIN_ROCK = "place_terrain_rock";

		[Token(Token = "0x40012BD")]
		public const string MIRACLE_ELECTROCUTED = "miracle_electrocuted";

		[Token(Token = "0x40012BE")]
		public const string GAMELAUNCH = "gamelaunch";

		[Token(Token = "0x40012BF")]
		public const string PLACE_TERRAIN_MOUNTAIN = "place_terrain_mountain";

		[Token(Token = "0x40012C0")]
		public const string MIRACLE_DISEASE = "miracle_disease";

		[Token(Token = "0x40012C1")]
		public const string NEW_MIRACLES_AVAILABLE = "new_miracles_available";

		[Token(Token = "0x40012C2")]
		public const string HUGEEXPLOSION = "hugeexplosion";

		[Token(Token = "0x40012C3")]
		public const string ENVIRONMENTEXPLOSION_1 = "environmentexplosion_1";

		[Token(Token = "0x40012C4")]
		public const string PLACE_TERRAIN_FOREST = "place_terrain_forest";

		[Token(Token = "0x40012C5")]
		public const string MIRACLE_RAIN = "miracle_rain";

		[Token(Token = "0x40012C6")]
		public const string MIRACLE_REGEN = "miracle_regen";

		[Token(Token = "0x600141C")]
		[Address(RVA = "0xB40310", Offset = "0xB40310", VA = "0xB40310")]
		public BhapticsEvent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000332")]
	internal class Device
	{
		[Token(Token = "0x40012C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool paired;

		[Token(Token = "0x40012C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string deviceName;

		[Token(Token = "0x40012C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int position;

		[Token(Token = "0x40012CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool connected;

		[Token(Token = "0x40012CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string address;

		[Token(Token = "0x40012CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int battery;

		[Token(Token = "0x40012CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool audioJackIn;

		[Token(Token = "0x600141D")]
		[Address(RVA = "0xB40318", Offset = "0xB40318", VA = "0xB40318")]
		public Device()
		{
		}
	}
	[Token(Token = "0x2000333")]
	public enum PositionType
	{
		[Token(Token = "0x40012CF")]
		Vest,
		[Token(Token = "0x40012D0")]
		ForearmL,
		[Token(Token = "0x40012D1")]
		ForearmR,
		[Token(Token = "0x40012D2")]
		Head,
		[Token(Token = "0x40012D3")]
		HandL,
		[Token(Token = "0x40012D4")]
		HandR,
		[Token(Token = "0x40012D5")]
		FootL,
		[Token(Token = "0x40012D6")]
		FootR,
		[Token(Token = "0x40012D7")]
		GloveL,
		[Token(Token = "0x40012D8")]
		GloveR
	}
	[Serializable]
	[Token(Token = "0x2000334")]
	public class MappingMetaData
	{
		[Token(Token = "0x40012D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int durationMillis;

		[Token(Token = "0x40012DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string key;

		[Token(Token = "0x40012DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string description;

		[Token(Token = "0x40012DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool isAudio;

		[Token(Token = "0x40012DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public long updateTime;

		[Token(Token = "0x40012DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string[] positions;

		[Token(Token = "0x600141E")]
		[Address(RVA = "0xB40320", Offset = "0xB40320", VA = "0xB40320")]
		public MappingMetaData()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000335")]
	internal class MappingMessage
	{
		[Token(Token = "0x40012DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool status;

		[Token(Token = "0x40012E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<MappingMetaData> message;

		[Token(Token = "0x600141F")]
		[Address(RVA = "0xB40234", Offset = "0xB40234", VA = "0xB40234")]
		public static MappingMessage CreateFromJSON(string jsonString)
		{
			return null;
		}

		[Token(Token = "0x6001420")]
		[Address(RVA = "0xB40328", Offset = "0xB40328", VA = "0xB40328")]
		public MappingMessage()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000336")]
	public class DeployMessage
	{
		[Token(Token = "0x40012E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x40012E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int version;

		[Token(Token = "0x6001421")]
		[Address(RVA = "0xB40330", Offset = "0xB40330", VA = "0xB40330")]
		public DeployMessage()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000337")]
	public class DeployHttpMessage
	{
		[Token(Token = "0x40012E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool status;

		[Token(Token = "0x40012E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public DeployMessage message;

		[Token(Token = "0x6001422")]
		[Address(RVA = "0xB40338", Offset = "0xB40338", VA = "0xB40338")]
		public static DeployHttpMessage CreateFromJSON(string jsonString)
		{
			return null;
		}

		[Token(Token = "0x6001423")]
		[Address(RVA = "0xB40380", Offset = "0xB40380", VA = "0xB40380")]
		public DeployHttpMessage()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000338")]
	public class HapticDevice
	{
		[Token(Token = "0x40012E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool IsPaired;

		[Token(Token = "0x40012E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool IsConnected;

		[Token(Token = "0x40012E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string DeviceName;

		[Token(Token = "0x40012E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PositionType Position;

		[Token(Token = "0x40012E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string Address;

		[Token(Token = "0x40012EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public PositionType[] Candidates;

		[Token(Token = "0x40012EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool IsAudioJack;

		[Token(Token = "0x40012EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public int Battery;

		[Token(Token = "0x6001424")]
		[Address(RVA = "0xB40388", Offset = "0xB40388", VA = "0xB40388")]
		public HapticDevice()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000339")]
	internal class DeviceListMessage
	{
		[Token(Token = "0x40012ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Device[] devices;

		[Token(Token = "0x6001425")]
		[Address(RVA = "0xB40390", Offset = "0xB40390", VA = "0xB40390")]
		public DeviceListMessage()
		{
		}
	}
	[Token(Token = "0x200033A")]
	public class BhapticsHelpers
	{
		[Token(Token = "0x6001426")]
		[Address(RVA = "0xB40398", Offset = "0xB40398", VA = "0xB40398")]
		public static float Angle(Vector3 fwd, Vector3 targetDir)
		{
			return default(float);
		}

		[Token(Token = "0x6001427")]
		[Address(RVA = "0xB4053C", Offset = "0xB4053C", VA = "0xB4053C")]
		private static int AngleDir(Vector3 fwd, Vector3 targetDir, Vector3 up)
		{
			return default(int);
		}

		[Token(Token = "0x6001428")]
		[Address(RVA = "0xB40594", Offset = "0xB40594", VA = "0xB40594")]
		public static string ErrorCodeToMessage(int code)
		{
			return null;
		}

		[Token(Token = "0x6001429")]
		[Address(RVA = "0xB3BAA0", Offset = "0xB3BAA0", VA = "0xB3BAA0")]
		public static List<HapticDevice> ConvertToBhapticsDevices(string[] deviceJson)
		{
			return null;
		}

		[Token(Token = "0x600142A")]
		[Address(RVA = "0xB3FF64", Offset = "0xB3FF64", VA = "0xB3FF64")]
		internal static List<HapticDevice> Convert(Device[] deviceJson)
		{
			return null;
		}

		[Token(Token = "0x600142B")]
		[Address(RVA = "0xB406AC", Offset = "0xB406AC", VA = "0xB406AC")]
		private static HapticDevice Convert(Device d)
		{
			return null;
		}

		[Token(Token = "0x600142C")]
		[Address(RVA = "0xB4078C", Offset = "0xB4078C", VA = "0xB4078C")]
		private static PositionType[] ToCandidates(int type)
		{
			return null;
		}

		[Token(Token = "0x600142D")]
		[Address(RVA = "0xB4077C", Offset = "0xB4077C", VA = "0xB4077C")]
		private static PositionType ToDeviceType(int type)
		{
			return default(PositionType);
		}

		[Token(Token = "0x600142E")]
		[Address(RVA = "0xB408EC", Offset = "0xB408EC", VA = "0xB408EC")]
		public BhapticsHelpers()
		{
		}
	}
	[Token(Token = "0x200033B")]
	public class BhapticsSDK2 : MonoBehaviour
	{
		[Token(Token = "0x40012EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static BhapticsSDK2 instance;

		[Token(Token = "0x40012EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private BhapticsSettings bhapticsSettings;

		[Token(Token = "0x600142F")]
		[Address(RVA = "0xB408F4", Offset = "0xB408F4", VA = "0xB408F4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001430")]
		[Address(RVA = "0xB40DC4", Offset = "0xB40DC4", VA = "0xB40DC4")]
		private void OnApplicationFocus(bool pauseStatus)
		{
		}

		[Token(Token = "0x6001431")]
		[Address(RVA = "0xB40E28", Offset = "0xB40E28", VA = "0xB40E28")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001432")]
		[Address(RVA = "0xB40ECC", Offset = "0xB40ECC", VA = "0xB40ECC")]
		public BhapticsSDK2()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200033C")]
	public class BhapticsConfig
	{
		[Token(Token = "0x40012F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string appId;

		[Token(Token = "0x40012F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string apiKey;

		[Token(Token = "0x6001433")]
		[Address(RVA = "0xB40ED4", Offset = "0xB40ED4", VA = "0xB40ED4")]
		public BhapticsConfig()
		{
		}
	}
	[Token(Token = "0x200033D")]
	public class BhapticsSettings : ScriptableObject
	{
		[Token(Token = "0x40012F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static BhapticsSettings instance;

		[Token(Token = "0x40012F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private string appName;

		[Token(Token = "0x40012F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private string appId;

		[Token(Token = "0x40012F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private string apiKey;

		[Token(Token = "0x40012F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private int lastDeployVersion;

		[Token(Token = "0x40012F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private MappingMetaData[] eventData;

		[Token(Token = "0x40012F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		[SerializeField]
		private string defaultDeploy;

		[Token(Token = "0x1700023A")]
		public static BhapticsSettings Instance
		{
			[Token(Token = "0x6001434")]
			[Address(RVA = "0xB39944", Offset = "0xB39944", VA = "0xB39944")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700023B")]
		public string AppName
		{
			[Token(Token = "0x6001435")]
			[Address(RVA = "0xB41134", Offset = "0xB41134", VA = "0xB41134")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001436")]
			[Address(RVA = "0xB4113C", Offset = "0xB4113C", VA = "0xB4113C")]
			set
			{
			}
		}

		[Token(Token = "0x1700023C")]
		public string AppId
		{
			[Token(Token = "0x6001437")]
			[Address(RVA = "0xB41144", Offset = "0xB41144", VA = "0xB41144")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001438")]
			[Address(RVA = "0xB4114C", Offset = "0xB4114C", VA = "0xB4114C")]
			set
			{
			}
		}

		[Token(Token = "0x1700023D")]
		public string ApiKey
		{
			[Token(Token = "0x6001439")]
			[Address(RVA = "0xB41154", Offset = "0xB41154", VA = "0xB41154")]
			get
			{
				return null;
			}
			[Token(Token = "0x600143A")]
			[Address(RVA = "0xB4115C", Offset = "0xB4115C", VA = "0xB4115C")]
			set
			{
			}
		}

		[Token(Token = "0x1700023E")]
		public MappingMetaData[] EventData
		{
			[Token(Token = "0x600143B")]
			[Address(RVA = "0xB41164", Offset = "0xB41164", VA = "0xB41164")]
			get
			{
				return null;
			}
			[Token(Token = "0x600143C")]
			[Address(RVA = "0xB4116C", Offset = "0xB4116C", VA = "0xB4116C")]
			set
			{
			}
		}

		[Token(Token = "0x1700023F")]
		public int LastDeployVersion
		{
			[Token(Token = "0x600143D")]
			[Address(RVA = "0xB41174", Offset = "0xB41174", VA = "0xB41174")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600143E")]
			[Address(RVA = "0xB4117C", Offset = "0xB4117C", VA = "0xB4117C")]
			set
			{
			}
		}

		[Token(Token = "0x17000240")]
		public string DefaultDeploy
		{
			[Token(Token = "0x600143F")]
			[Address(RVA = "0xB41184", Offset = "0xB41184", VA = "0xB41184")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001440")]
			[Address(RVA = "0xB4118C", Offset = "0xB4118C", VA = "0xB4118C")]
			set
			{
			}
		}

		[Token(Token = "0x6001441")]
		[Address(RVA = "0xB41194", Offset = "0xB41194", VA = "0xB41194")]
		public static void VerifyScriptableObject()
		{
		}

		[Token(Token = "0x6001442")]
		[Address(RVA = "0xB41198", Offset = "0xB41198", VA = "0xB41198")]
		public static void ResetInstance()
		{
		}

		[Token(Token = "0x6001443")]
		[Address(RVA = "0xB40F3C", Offset = "0xB40F3C", VA = "0xB40F3C")]
		private static void LoadInstance()
		{
		}

		[Token(Token = "0x6001444")]
		[Address(RVA = "0xB4139C", Offset = "0xB4139C", VA = "0xB4139C")]
		public BhapticsSettings()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200033E")]
	public class PositonIconSetting
	{
		[Token(Token = "0x40012F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Sprite connect;

		[Token(Token = "0x40012FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Sprite disconnect;

		[Token(Token = "0x6001445")]
		[Address(RVA = "0xB4142C", Offset = "0xB4142C", VA = "0xB4142C")]
		public PositonIconSetting()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200033F")]
	public class IconSetting
	{
		[Token(Token = "0x40012FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Header("Setting Icons")]
		public PositonIconSetting Vest;

		[Token(Token = "0x40012FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PositonIconSetting Head;

		[Token(Token = "0x40012FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PositonIconSetting Arm;

		[Token(Token = "0x40012FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public PositonIconSetting Foot;

		[Token(Token = "0x40012FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public PositonIconSetting Hand;

		[Token(Token = "0x4001300")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public PositonIconSetting GloveL;

		[Token(Token = "0x4001301")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public PositonIconSetting GloveR;

		[Token(Token = "0x6001446")]
		[Address(RVA = "0xB41434", Offset = "0xB41434", VA = "0xB41434")]
		public IconSetting()
		{
		}
	}
	[Token(Token = "0x2000340")]
	public class BhapticsDeviceUI : MonoBehaviour
	{
		[Token(Token = "0x4001302")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static string SelectHexColor;

		[Token(Token = "0x4001303")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static string SelectHoverHexColor;

		[Token(Token = "0x4001304")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static string DisableHexColor;

		[Token(Token = "0x4001305")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static string DisableHoverHexColor;

		[Token(Token = "0x4001306")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[Header("UI")]
		private Image icon;

		[Token(Token = "0x4001307")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private IconSetting widgetSetting;

		[Token(Token = "0x4001308")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Sprite TactsuitWiredIcon;

		[Token(Token = "0x4001309")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Image batteryLowImage;

		[Token(Token = "0x400130A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Connect Menu")]
		[SerializeField]
		private GameObject ConnectMenu;

		[Token(Token = "0x400130B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Button pingButton;

		[Token(Token = "0x400130C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private Button lButton;

		[Token(Token = "0x400130D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private Button rButton;

		[Token(Token = "0x400130E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private GameObject wiredNotification;

		[Token(Token = "0x400130F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		[Header("Disconnect Menu")]
		private GameObject DisconnectMenu;

		[Token(Token = "0x4001310")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private HapticDevice device;

		[Token(Token = "0x6001447")]
		[Address(RVA = "0xB4143C", Offset = "0xB4143C", VA = "0xB4143C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001448")]
		[Address(RVA = "0xB4161C", Offset = "0xB4161C", VA = "0xB4161C")]
		public void RefreshDevice(HapticDevice d)
		{
		}

		[Token(Token = "0x6001449")]
		[Address(RVA = "0xB417F8", Offset = "0xB417F8", VA = "0xB417F8")]
		private void RenderConnectMenu()
		{
		}

		[Token(Token = "0x600144A")]
		[Address(RVA = "0xB41880", Offset = "0xB41880", VA = "0xB41880")]
		private void RenderDisconnectMenu()
		{
		}

		[Token(Token = "0x600144B")]
		[Address(RVA = "0xB418F0", Offset = "0xB418F0", VA = "0xB418F0")]
		private void UpdateButtons()
		{
		}

		[Token(Token = "0x600144C")]
		[Address(RVA = "0xB416CC", Offset = "0xB416CC", VA = "0xB416CC")]
		private void UpdateIcon(HapticDevice d)
		{
		}

		[Token(Token = "0x600144D")]
		[Address(RVA = "0xB41CD4", Offset = "0xB41CD4", VA = "0xB41CD4")]
		private Sprite GetSprite(PositonIconSetting icon, bool connected)
		{
			return null;
		}

		[Token(Token = "0x600144E")]
		[Address(RVA = "0xB41CF8", Offset = "0xB41CF8", VA = "0xB41CF8")]
		private void Ping()
		{
		}

		[Token(Token = "0x600144F")]
		[Address(RVA = "0xB41D60", Offset = "0xB41D60", VA = "0xB41D60")]
		private void ToLeft()
		{
		}

		[Token(Token = "0x6001450")]
		[Address(RVA = "0xB41E20", Offset = "0xB41E20", VA = "0xB41E20")]
		private void ToRight()
		{
		}

		[Token(Token = "0x6001451")]
		[Address(RVA = "0xB41EE0", Offset = "0xB41EE0", VA = "0xB41EE0")]
		private Color ToColor(string hex)
		{
			return default(Color);
		}

		[Token(Token = "0x6001452")]
		[Address(RVA = "0xB41BA0", Offset = "0xB41BA0", VA = "0xB41BA0")]
		private void ChangeButtonColor(Button targetButton, bool isSelect)
		{
		}

		[Token(Token = "0x6001453")]
		[Address(RVA = "0xB41B58", Offset = "0xB41B58", VA = "0xB41B58")]
		private static bool IsLeft(PositionType pos)
		{
			return default(bool);
		}

		[Token(Token = "0x6001454")]
		[Address(RVA = "0xB41B7C", Offset = "0xB41B7C", VA = "0xB41B7C")]
		private static bool IsRight(PositionType pos)
		{
			return default(bool);
		}

		[Token(Token = "0x6001455")]
		[Address(RVA = "0xB41F14", Offset = "0xB41F14", VA = "0xB41F14")]
		public BhapticsDeviceUI()
		{
		}
	}
	[Token(Token = "0x2000341")]
	public class BhapticsUI : MonoBehaviour
	{
		[Token(Token = "0x4001311")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float intervalRefreshTime;

		[Token(Token = "0x4001312")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private RectTransform mainPanel;

		[Token(Token = "0x4001313")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[Header("Devices UI")]
		private Transform devicesContainer;

		[Token(Token = "0x4001314")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Transform deviceListPageUi;

		[Token(Token = "0x4001315")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Button deviceListNextPageButton;

		[Token(Token = "0x4001316")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Button deviceListBackPageButton;

		[Token(Token = "0x4001317")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private Text deviceListPageText;

		[Token(Token = "0x4001318")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private BhapticsDeviceUI devicePrefab;

		[Token(Token = "0x4001319")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("No Paired Device UI")]
		[SerializeField]
		private GameObject noPairedDeviceUi;

		[Token(Token = "0x400131A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private Button helpButton;

		[Token(Token = "0x400131B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private Button bHapticsLinkButton;

		[Token(Token = "0x400131C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private GameObject helpUi;

		[Token(Token = "0x400131D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private GameObject helpDescriptionPC;

		[Token(Token = "0x400131E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private GameObject helpDescriptionQuest;

		[Token(Token = "0x400131F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private Button helpCloseButton;

		[Token(Token = "0x4001320")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private List<BhapticsDeviceUI> controllers;

		[Token(Token = "0x4001321")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private BoxCollider mainPanelCollider;

		[Token(Token = "0x4001322")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Vector2 defaultMainPanelSize;

		[Token(Token = "0x4001323")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Vector2 defaultDeviceContainerSize;

		[Token(Token = "0x4001324")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private int deviceListSize;

		[Token(Token = "0x4001325")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private int deviceListPageIndex;

		[Token(Token = "0x4001326")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private int expandHeight;

		[Token(Token = "0x4001327")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private int expandDeviceCount;

		[Token(Token = "0x4001328")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private int pageActivateDeviceCount;

		[Token(Token = "0x4001329")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private int pageExpandHeight;

		[Token(Token = "0x400132A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private int maxPageIndex;

		[Token(Token = "0x6001457")]
		[Address(RVA = "0xB42010", Offset = "0xB42010", VA = "0xB42010")]
		private void Start()
		{
		}

		[Token(Token = "0x6001458")]
		[Address(RVA = "0xB424BC", Offset = "0xB424BC", VA = "0xB424BC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001459")]
		[Address(RVA = "0xB42508", Offset = "0xB42508", VA = "0xB42508")]
		private void Refresh()
		{
		}

		[Token(Token = "0x600145A")]
		[Address(RVA = "0xB42BE8", Offset = "0xB42BE8", VA = "0xB42BE8")]
		private void OnHelp()
		{
		}

		[Token(Token = "0x600145B")]
		[Address(RVA = "0xB42BF0", Offset = "0xB42BF0", VA = "0xB42BF0")]
		private void CloseHelpNotification()
		{
		}

		[Token(Token = "0x600145C")]
		[Address(RVA = "0xB42BF8", Offset = "0xB42BF8", VA = "0xB42BF8")]
		private void OpenLink()
		{
		}

		[Token(Token = "0x600145D")]
		[Address(RVA = "0xB42C3C", Offset = "0xB42C3C", VA = "0xB42C3C")]
		private void NextPage()
		{
		}

		[Token(Token = "0x600145E")]
		[Address(RVA = "0xB42C60", Offset = "0xB42C60", VA = "0xB42C60")]
		private void BackPage()
		{
		}

		[Token(Token = "0x600145F")]
		[Address(RVA = "0xB42B5C", Offset = "0xB42B5C", VA = "0xB42B5C")]
		private void SetActiveHelpGameObject(bool value)
		{
		}

		[Token(Token = "0x6001460")]
		[Address(RVA = "0xB42C84", Offset = "0xB42C84", VA = "0xB42C84")]
		public BhapticsUI()
		{
		}
	}
}
