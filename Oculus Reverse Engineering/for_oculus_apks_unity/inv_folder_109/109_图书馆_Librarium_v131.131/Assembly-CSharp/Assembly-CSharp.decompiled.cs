using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Net;
using System.Net.Sockets;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.Serialization;
using System.Timers;
using API;
using Autohand;
using Autohand.Demo;
using DG.Tweening;
using HighlightPlus;
using Il2CppDummyDll;
using JetBrains.Annotations;
using Librarium;
using Librarium.Puzzles;
using Librarium.UserEvents;
using Librarium_IAP;
using LiteNetLib;
using LiteNetLib.Utils;
using Localization;
using NaughtyAttributes;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using Oculus.Platform.Models;
using Oculus.Platform.Samples.EntitlementCheck;
using Pathfinding;
using Spiffyware.General;
using TMPro;
using UnityEngine;
using UnityEngine.AI;
using UnityEngine.Audio;
using UnityEngine.EventSystems;
using UnityEngine.Events;
using UnityEngine.InputSystem;
using UnityEngine.Networking;
using UnityEngine.Rendering;
using UnityEngine.Rendering.Universal;
using UnityEngine.SceneManagement;
using UnityEngine.Serialization;
using UnityEngine.UI;
using UnityEngine.Video;
using UnityEngine.XR;
using UnityEngine.XR.Interaction.Toolkit;
using VRUiKits.Utils;
using YVR.IME;
using YVR.Platform;

[assembly: AssemblyVersion("0.0.0.0")]
[Token(Token = "0x2000002")]
[ExecuteInEditMode]
[RequireComponent(typeof(LineRenderer))]
public class LineWave : MonoBehaviour
{
	[Token(Token = "0x2000003")]
	public enum Origins
	{
		[Token(Token = "0x400001E")]
		Start,
		[Token(Token = "0x400001F")]
		Middle
	}

	[Token(Token = "0x4000001")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float ampT;

	[Token(Token = "0x4000002")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Material traceMaterial;

	[Token(Token = "0x4000003")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float traceWidth;

	[Token(Token = "0x4000004")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject targetOptional;

	[Token(Token = "0x4000005")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float altRotation;

	[Token(Token = "0x4000006")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public Origins origin;

	[Token(Token = "0x4000007")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public int size;

	[Token(Token = "0x4000008")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float lengh;

	[Token(Token = "0x4000009")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float freq;

	[Token(Token = "0x400000A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float amp;

	[Token(Token = "0x400000B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool ampByFreq;

	[Token(Token = "0x400000C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
	public bool centered;

	[Token(Token = "0x400000D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
	public bool centCrest;

	[Token(Token = "0x400000E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x53")]
	public bool warp;

	[Token(Token = "0x400000F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public bool warpInvert;

	[Token(Token = "0x4000010")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float warpRandom;

	[Token(Token = "0x4000011")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float walkManual;

	[Token(Token = "0x4000012")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public float walkAuto;

	[Token(Token = "0x4000013")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public bool spiral;

	[Token(Token = "0x4000014")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float start;

	[Token(Token = "0x4000015")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private float warpT;

	[Token(Token = "0x4000016")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float angle;

	[Token(Token = "0x4000017")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private float sinAngle;

	[Token(Token = "0x4000018")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float sinAngleZ;

	[Token(Token = "0x4000019")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private double walkShift;

	[Token(Token = "0x400001A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Vector3 posVtx2;

	[Token(Token = "0x400001B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private Vector3 posVtxSizeMinusOne;

	[Token(Token = "0x400001C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private LineRenderer lrComp;

	[Token(Token = "0x6000001")]
	[Address(RVA = "0xD3F918", Offset = "0xD3F918", VA = "0xD3F918")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000002")]
	[Address(RVA = "0xD3F9A0", Offset = "0xD3F9A0", VA = "0xD3F9A0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000003")]
	[Address(RVA = "0xD3FEBC", Offset = "0xD3FEBC", VA = "0xD3FEBC")]
	public LineWave()
	{
	}
}
[Token(Token = "0x2000004")]
[RequireComponent(typeof(LineRenderer))]
public class LineWaveCollider : MonoBehaviour
{
	[Token(Token = "0x2000005")]
	public enum Origins
	{
		[Token(Token = "0x4000045")]
		Start,
		[Token(Token = "0x4000046")]
		Middle
	}

	[Token(Token = "0x2000006")]
	public enum WaveColliders
	{
		[Token(Token = "0x4000048")]
		Box,
		[Token(Token = "0x4000049")]
		Sphere
	}

	[Token(Token = "0x4000020")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float ampT;

	[Token(Token = "0x4000021")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Material traceMaterial;

	[Token(Token = "0x4000022")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float traceWidth;

	[Token(Token = "0x4000023")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject targetOptional;

	[Token(Token = "0x4000024")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float altRotation;

	[Token(Token = "0x4000025")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public Origins origin;

	[Token(Token = "0x4000026")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public int size;

	[Token(Token = "0x4000027")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float lengh;

	[Token(Token = "0x4000028")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float freq;

	[Token(Token = "0x4000029")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float amp;

	[Token(Token = "0x400002A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool ampByFreq;

	[Token(Token = "0x400002B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
	public bool centered;

	[Token(Token = "0x400002C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
	public bool centCrest;

	[Token(Token = "0x400002D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x53")]
	public bool warp;

	[Token(Token = "0x400002E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public bool warpInvert;

	[Token(Token = "0x400002F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float warpRandom;

	[Token(Token = "0x4000030")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float walkManual;

	[Token(Token = "0x4000031")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public float walkAuto;

	[Token(Token = "0x4000032")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public bool spiral;

	[Token(Token = "0x4000033")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float start;

	[Token(Token = "0x4000034")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private float warpT;

	[Token(Token = "0x4000035")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float angle;

	[Token(Token = "0x4000036")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private float sinAngle;

	[Token(Token = "0x4000037")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float sinAngleZ;

	[Token(Token = "0x4000038")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private double walkShift;

	[Token(Token = "0x4000039")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Vector3 posVtx2;

	[Token(Token = "0x400003A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private Vector3 posVtxSizeMinusOne;

	[Token(Token = "0x400003B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private LineRenderer lrComp;

	[Token(Token = "0x400003C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private List<Vector3> linePositions;

	[Token(Token = "0x400003D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public WaveColliders waveCollider;

	[Token(Token = "0x400003E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private List<GameObject> colliders;

	[Token(Token = "0x400003F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private GameObject Colliders;

	[Token(Token = "0x4000040")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private GameObject colliderGO;

	[Token(Token = "0x4000041")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private Type colType;

	[Token(Token = "0x4000042")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public float colliderSize;

	[Token(Token = "0x4000043")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	public int collidersGap;

	[Token(Token = "0x6000004")]
	[Address(RVA = "0xD3FEFC", Offset = "0xD3FEFC", VA = "0xD3FEFC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000005")]
	[Address(RVA = "0xD40174", Offset = "0xD40174", VA = "0xD40174")]
	private void Update()
	{
	}

	[Token(Token = "0x6000006")]
	[Address(RVA = "0xD40E50", Offset = "0xD40E50", VA = "0xD40E50")]
	public LineWaveCollider()
	{
	}
}
[Token(Token = "0x2000007")]
public class guiE3 : MonoBehaviour
{
	[Token(Token = "0x400004A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject waveSphere;

	[Token(Token = "0x6000007")]
	[Address(RVA = "0xD40EA0", Offset = "0xD40EA0", VA = "0xD40EA0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000008")]
	[Address(RVA = "0xD40EA4", Offset = "0xD40EA4", VA = "0xD40EA4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000009")]
	[Address(RVA = "0xD40EA8", Offset = "0xD40EA8", VA = "0xD40EA8")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x600000A")]
	[Address(RVA = "0xD40FE0", Offset = "0xD40FE0", VA = "0xD40FE0")]
	public guiE3()
	{
	}
}
[Token(Token = "0x2000008")]
public class guiMenu : MonoBehaviour
{
	[Token(Token = "0x400004B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject sphere1;

	[Token(Token = "0x400004C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject sphere2;

	[Token(Token = "0x400004D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject sphere3;

	[Token(Token = "0x400004E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject cam;

	[Token(Token = "0x400004F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GUIStyle tgStyle;

	[Token(Token = "0x4000050")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private GameObject activeSphere;

	[Token(Token = "0x4000051")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float guiWidth;

	[Token(Token = "0x4000052")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float guiHeight;

	[Token(Token = "0x4000053")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private string[] tbContent;

	[Token(Token = "0x4000054")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private int tgInt;

	[Token(Token = "0x600000B")]
	[Address(RVA = "0xD40FE8", Offset = "0xD40FE8", VA = "0xD40FE8")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x600000C")]
	[Address(RVA = "0xD41E90", Offset = "0xD41E90", VA = "0xD41E90")]
	private void Update()
	{
	}

	[Token(Token = "0x600000D")]
	[Address(RVA = "0xD41F78", Offset = "0xD41F78", VA = "0xD41F78")]
	public guiMenu()
	{
	}
}
[Token(Token = "0x2000009")]
public class meanPos : MonoBehaviour
{
	[Token(Token = "0x4000055")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] objects;

	[Token(Token = "0x4000056")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Vector3 posSum;

	[Token(Token = "0x600000E")]
	[Address(RVA = "0xD42114", Offset = "0xD42114", VA = "0xD42114")]
	private void Update()
	{
	}

	[Token(Token = "0x600000F")]
	[Address(RVA = "0xD4222C", Offset = "0xD4222C", VA = "0xD4222C")]
	public meanPos()
	{
	}
}
[Token(Token = "0x200000A")]
[AddComponentMenu("Camera-Control/Mouse Orbit with zoom")]
public class MouseOrbitImproved : MonoBehaviour
{
	[Token(Token = "0x4000057")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform target;

	[Token(Token = "0x4000058")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float distance;

	[Token(Token = "0x4000059")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float xSpeed;

	[Token(Token = "0x400005A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float ySpeed;

	[Token(Token = "0x400005B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float yMinLimit;

	[Token(Token = "0x400005C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float yMaxLimit;

	[Token(Token = "0x400005D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float distanceMin;

	[Token(Token = "0x400005E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float distanceMax;

	[Token(Token = "0x400005F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Rigidbody rigidbodyM;

	[Token(Token = "0x4000060")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float x;

	[Token(Token = "0x4000061")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float y;

	[Token(Token = "0x6000010")]
	[Address(RVA = "0xD42234", Offset = "0xD42234", VA = "0xD42234")]
	private void Start()
	{
	}

	[Token(Token = "0x6000011")]
	[Address(RVA = "0xD42308", Offset = "0xD42308", VA = "0xD42308")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000012")]
	[Address(RVA = "0xD42604", Offset = "0xD42604", VA = "0xD42604")]
	public static float ClampAngle(float angle, float min, float max)
	{
		return default(float);
	}

	[Token(Token = "0x6000013")]
	[Address(RVA = "0xD42640", Offset = "0xD42640", VA = "0xD42640")]
	public MouseOrbitImproved()
	{
	}
}
[Serializable]
[Token(Token = "0x200000B")]
public struct DeviceData
{
	[Token(Token = "0x4000062")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public string[] deviceNames;

	[Token(Token = "0x4000063")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public Vector3 position;

	[Token(Token = "0x4000064")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Vector3 rotation;

	[Token(Token = "0x6000014")]
	[Address(RVA = "0xD42668", Offset = "0xD42668", VA = "0xD42668")]
	public DeviceData(string name, Vector3 pos, Vector3 rot)
	{
	}

	[Token(Token = "0x6000015")]
	[Address(RVA = "0xD42758", Offset = "0xD42758", VA = "0xD42758")]
	public DeviceData(string[] names, Vector3 pos, Vector3 rot)
	{
	}
}
[Token(Token = "0x200000C")]
public class XRHandOffset : MonoBehaviour
{
	[Token(Token = "0x4000065")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("DO NOT CHANGE THIS UNLESS YOU ARE REDOING THE RELATIVE POSITIONS. This is the device that you are using to setup the innital proper orientation of the hand, all offsets are relative to this device")]
	public string defaultDevice;

	[Token(Token = "0x4000066")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	public Transform[] rightOffsets;

	[Token(Token = "0x4000067")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	public Transform[] leftOffsets;

	[Token(Token = "0x4000068")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	public DeviceData[] devices;

	[Token(Token = "0x4000069")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool offsetDone;

	[Token(Token = "0x400006A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	private bool hasProvider;

	[Token(Token = "0x6000016")]
	[Address(RVA = "0xD427AC", Offset = "0xD427AC", VA = "0xD427AC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000017")]
	[Address(RVA = "0xD42BF4", Offset = "0xD42BF4", VA = "0xD42BF4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000018")]
	[Address(RVA = "0xD42C88", Offset = "0xD42C88", VA = "0xD42C88")]
	internal void AdjustPositions(XRHandOffset otherOffset)
	{
	}

	[Token(Token = "0x6000019")]
	[Address(RVA = "0xD42988", Offset = "0xD42988", VA = "0xD42988")]
	private void DeviceConnected(UnityEngine.XR.InputDevice inputDevice)
	{
	}

	[Token(Token = "0x600001A")]
	[Address(RVA = "0xD43084", Offset = "0xD43084", VA = "0xD43084")]
	private Vector3 GetPositionOffset(string from, string to)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600001B")]
	[Address(RVA = "0xD4324C", Offset = "0xD4324C", VA = "0xD4324C")]
	private Vector3 GetRotationOffset(string from, string to)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600001C")]
	[Address(RVA = "0xD42E3C", Offset = "0xD42E3C", VA = "0xD42E3C")]
	protected Vector3 GetDefaultPositionOffset()
	{
		return default(Vector3);
	}

	[Token(Token = "0x600001D")]
	[Address(RVA = "0xD42F60", Offset = "0xD42F60", VA = "0xD42F60")]
	protected Vector3 GetDefaultRotationOffset()
	{
		return default(Vector3);
	}

	[Token(Token = "0x600001E")]
	[Address(RVA = "0xD43414", Offset = "0xD43414", VA = "0xD43414")]
	public XRHandOffset()
	{
	}
}
[Token(Token = "0x200000D")]
public static class AutoExtensions
{
	[Token(Token = "0x600001F")]
	public static bool CanGetComponent<T>(this Component componentClass, out T component)
	{
		return default(bool);
	}

	[Token(Token = "0x6000020")]
	public static bool CanGetComponent<T>(this GameObject componentClass, out T component)
	{
		return default(bool);
	}
}
[Token(Token = "0x200000E")]
public class BowlingManager : MonoBehaviour
{
	[Token(Token = "0x400006B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Bowling Ball Settings")]
	public GameObject bowlingBall;

	[Token(Token = "0x400006C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Header("Bowling Pin Settings")]
	public Vector3 pinCenter;

	[Token(Token = "0x400006D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float pinSpaceX;

	[Token(Token = "0x400006E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float pinSpaceZ;

	[Token(Token = "0x400006F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public List<GameObject> pins;

	[Token(Token = "0x4000070")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Vector3 ballPosition;

	[Token(Token = "0x6000021")]
	[Address(RVA = "0xD437E4", Offset = "0xD437E4", VA = "0xD437E4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000022")]
	[Address(RVA = "0xD43A1C", Offset = "0xD43A1C", VA = "0xD43A1C")]
	public void ResetBall()
	{
	}

	[Token(Token = "0x6000023")]
	[Address(RVA = "0xD43820", Offset = "0xD43820", VA = "0xD43820")]
	public void ResetPins()
	{
	}

	[Token(Token = "0x6000024")]
	[Address(RVA = "0xD43AC0", Offset = "0xD43AC0", VA = "0xD43AC0")]
	public BowlingManager()
	{
	}
}
[Token(Token = "0x200000F")]
public class DemoExitCondition : MonoBehaviour
{
	[Token(Token = "0x6000025")]
	[Address(RVA = "0xD43B48", Offset = "0xD43B48", VA = "0xD43B48")]
	private void Update()
	{
	}

	[Token(Token = "0x6000026")]
	[Address(RVA = "0xD43BE0", Offset = "0xD43BE0", VA = "0xD43BE0")]
	public DemoExitCondition()
	{
	}
}
[Token(Token = "0x2000010")]
public class OpenLink : MonoBehaviour
{
	[Token(Token = "0x4000071")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string URL;

	[Token(Token = "0x6000027")]
	[Address(RVA = "0xD43BE8", Offset = "0xD43BE8", VA = "0xD43BE8")]
	public void OpenLinkURL()
	{
	}

	[Token(Token = "0x6000028")]
	[Address(RVA = "0xD43BF4", Offset = "0xD43BF4", VA = "0xD43BF4")]
	public OpenLink()
	{
	}
}
[Token(Token = "0x2000011")]
public class PlatformMover : MonoBehaviour
{
	[Token(Token = "0x2000012")]
	[CompilerGenerated]
	private sealed class <Move>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000075")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000076")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000077")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PlatformMover <>4__this;

		[Token(Token = "0x4000078")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <timePassed>5__2;

		[Token(Token = "0x17000001")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600002F")]
			[Address(RVA = "0xD43F58", Offset = "0xD43F58", VA = "0xD43F58", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000002")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000031")]
			[Address(RVA = "0xD43FA0", Offset = "0xD43FA0", VA = "0xD43FA0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600002C")]
		[Address(RVA = "0xD43CB4", Offset = "0xD43CB4", VA = "0xD43CB4")]
		[DebuggerHidden]
		public <Move>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x600002D")]
		[Address(RVA = "0xD43CEC", Offset = "0xD43CEC", VA = "0xD43CEC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600002E")]
		[Address(RVA = "0xD43CF0", Offset = "0xD43CF0", VA = "0xD43CF0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000030")]
		[Address(RVA = "0xD43F60", Offset = "0xD43F60", VA = "0xD43F60", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000072")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 toRange;

	[Token(Token = "0x4000073")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float time;

	[Token(Token = "0x4000074")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector3 startPos;

	[Token(Token = "0x6000029")]
	[Address(RVA = "0xD43BFC", Offset = "0xD43BFC", VA = "0xD43BFC")]
	private void Start()
	{
	}

	[Token(Token = "0x600002A")]
	[Address(RVA = "0xD43C40", Offset = "0xD43C40", VA = "0xD43C40")]
	[IteratorStateMachine(typeof(<Move>d__4))]
	private IEnumerator Move()
	{
		return null;
	}

	[Token(Token = "0x600002B")]
	[Address(RVA = "0xD43CDC", Offset = "0xD43CDC", VA = "0xD43CDC")]
	public PlatformMover()
	{
	}
}
[Token(Token = "0x2000013")]
public class UnlockChest : MonoBehaviour
{
	[Token(Token = "0x4000079")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public HingeJoint joint;

	[Token(Token = "0x6000032")]
	[Address(RVA = "0xD43FA8", Offset = "0xD43FA8", VA = "0xD43FA8")]
	public void Unlock()
	{
	}

	[Token(Token = "0x6000033")]
	[Address(RVA = "0xD44100", Offset = "0xD44100", VA = "0xD44100")]
	public void Lock()
	{
	}

	[Token(Token = "0x6000034")]
	[Address(RVA = "0xD44234", Offset = "0xD44234", VA = "0xD44234")]
	public UnlockChest()
	{
	}
}
[Token(Token = "0x2000014")]
public class TextFieldInspector : MonoBehaviour
{
	[Token(Token = "0x400007A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[TextArea]
	public string text;

	[Token(Token = "0x6000035")]
	[Address(RVA = "0xD4423C", Offset = "0xD4423C", VA = "0xD4423C")]
	public TextFieldInspector()
	{
	}
}
[Token(Token = "0x2000015")]
public class TextInformation : MonoBehaviour
{
	[Token(Token = "0x400007B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject activateImage;

	[Token(Token = "0x400007C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject deactivateImage;

	[Token(Token = "0x400007D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject[] texts;

	[Token(Token = "0x400007E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool active;

	[Token(Token = "0x6000036")]
	[Address(RVA = "0xD44244", Offset = "0xD44244", VA = "0xD44244")]
	public void ActivateText()
	{
	}

	[Token(Token = "0x6000037")]
	[Address(RVA = "0xD442D8", Offset = "0xD442D8", VA = "0xD442D8")]
	public void DeactivateText()
	{
	}

	[Token(Token = "0x6000038")]
	[Address(RVA = "0xD44368", Offset = "0xD44368", VA = "0xD44368")]
	public void ToggleText()
	{
	}

	[Token(Token = "0x6000039")]
	[Address(RVA = "0xD44378", Offset = "0xD44378", VA = "0xD44378")]
	public TextInformation()
	{
	}
}
[Token(Token = "0x2000016")]
public class TMPSizeProtector : MonoBehaviour
{
	[Token(Token = "0x400007F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float size;

	[Token(Token = "0x600003A")]
	[Address(RVA = "0xD44380", Offset = "0xD44380", VA = "0xD44380")]
	private void Start()
	{
	}

	[Token(Token = "0x600003B")]
	[Address(RVA = "0xD44440", Offset = "0xD44440", VA = "0xD44440")]
	public TMPSizeProtector()
	{
	}
}
[Token(Token = "0x2000017")]
public static class JointExtensions
{
	[Token(Token = "0x600003C")]
	[Address(RVA = "0xD44448", Offset = "0xD44448", VA = "0xD44448")]
	public static Vector3 Angles(this ConfigurableJoint joint)
	{
		return default(Vector3);
	}
}
[Token(Token = "0x2000018")]
[RequireComponent(typeof(PlacePoint))]
public class PlacePointEventDebugger : MonoBehaviour
{
	[Token(Token = "0x4000080")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private PlacePoint placePoint;

	[Token(Token = "0x600003E")]
	[Address(RVA = "0xD44864", Offset = "0xD44864", VA = "0xD44864")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600003F")]
	[Address(RVA = "0xD44C5C", Offset = "0xD44C5C", VA = "0xD44C5C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000040")]
	[Address(RVA = "0xD45054", Offset = "0xD45054", VA = "0xD45054")]
	public PlacePointEventDebugger()
	{
	}
}
[Token(Token = "0x200001A")]
[DefaultExecutionOrder(-100000)]
public class IgnoreHandLayer : MonoBehaviour
{
	[Token(Token = "0x400008A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool includeChildren;

	[Token(Token = "0x400008B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private int startLayer;

	[Token(Token = "0x600004B")]
	[Address(RVA = "0xD45614", Offset = "0xD45614", VA = "0xD45614")]
	private void Awake()
	{
	}

	[Token(Token = "0x600004C")]
	[Address(RVA = "0xD45688", Offset = "0xD45688", VA = "0xD45688")]
	private void LateStart()
	{
	}

	[Token(Token = "0x600004D")]
	[Address(RVA = "0xD456E8", Offset = "0xD456E8", VA = "0xD456E8")]
	internal void SetLayerRecursive(Transform obj, int newLayer)
	{
	}

	[Token(Token = "0x600004E")]
	[Address(RVA = "0xD45784", Offset = "0xD45784", VA = "0xD45784")]
	public IgnoreHandLayer()
	{
	}
}
[Token(Token = "0x200001B")]
public class HeadCameraSmoothing : MonoBehaviour
{
	[Token(Token = "0x400008C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 lastPos;

	[Token(Token = "0x400008D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Quaternion lastRot;

	[Token(Token = "0x600004F")]
	[Address(RVA = "0xD45794", Offset = "0xD45794", VA = "0xD45794")]
	public void LateUpdate()
	{
	}

	[Token(Token = "0x6000050")]
	[Address(RVA = "0xD457E4", Offset = "0xD457E4", VA = "0xD457E4")]
	public HeadCameraSmoothing()
	{
	}
}
[Token(Token = "0x200001C")]
public class HandEventTemplate : MonoBehaviour
{
	[Token(Token = "0x400008E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Autohand.Hand hand;

	[Token(Token = "0x6000051")]
	[Address(RVA = "0xD457EC", Offset = "0xD457EC", VA = "0xD457EC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000052")]
	[Address(RVA = "0xD45D08", Offset = "0xD45D08", VA = "0xD45D08")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000053")]
	[Address(RVA = "0xD46224", Offset = "0xD46224", VA = "0xD46224")]
	private void OnBeforeGrabbed(Autohand.Hand hand, Grabbable grab)
	{
	}

	[Token(Token = "0x6000054")]
	[Address(RVA = "0xD46228", Offset = "0xD46228", VA = "0xD46228")]
	private void OnGrabbed(Autohand.Hand hand, Grabbable grab)
	{
	}

	[Token(Token = "0x6000055")]
	[Address(RVA = "0xD4622C", Offset = "0xD4622C", VA = "0xD4622C")]
	private void OnBeforeReleased(Autohand.Hand hand, Grabbable grab)
	{
	}

	[Token(Token = "0x6000056")]
	[Address(RVA = "0xD46230", Offset = "0xD46230", VA = "0xD46230")]
	private void OnReleased(Autohand.Hand hand, Grabbable grab)
	{
	}

	[Token(Token = "0x6000057")]
	[Address(RVA = "0xD46234", Offset = "0xD46234", VA = "0xD46234")]
	private void OnForcedRelease(Autohand.Hand hand, Grabbable grab)
	{
	}

	[Token(Token = "0x6000058")]
	[Address(RVA = "0xD46238", Offset = "0xD46238", VA = "0xD46238")]
	private void OnGrabJointBreak(Autohand.Hand hand, Grabbable grab)
	{
	}

	[Token(Token = "0x6000059")]
	[Address(RVA = "0xD4623C", Offset = "0xD4623C", VA = "0xD4623C")]
	private void OnHighlight(Autohand.Hand hand, Grabbable grab)
	{
	}

	[Token(Token = "0x600005A")]
	[Address(RVA = "0xD46240", Offset = "0xD46240", VA = "0xD46240")]
	private void OnStopHighlight(Autohand.Hand hand, Grabbable grab)
	{
	}

	[Token(Token = "0x600005B")]
	[Address(RVA = "0xD46244", Offset = "0xD46244", VA = "0xD46244")]
	private void OnSqueezed(Autohand.Hand hand, Grabbable grab)
	{
	}

	[Token(Token = "0x600005C")]
	[Address(RVA = "0xD46248", Offset = "0xD46248", VA = "0xD46248")]
	private void OnUnsqueezed(Autohand.Hand hand, Grabbable grab)
	{
	}

	[Token(Token = "0x600005D")]
	[Address(RVA = "0xD4624C", Offset = "0xD4624C", VA = "0xD4624C")]
	private void OnTriggerGrab(Autohand.Hand hand, Grabbable grab)
	{
	}

	[Token(Token = "0x600005E")]
	[Address(RVA = "0xD46250", Offset = "0xD46250", VA = "0xD46250")]
	private void OnTriggerRelease(Autohand.Hand hand, Grabbable grab)
	{
	}

	[Token(Token = "0x600005F")]
	[Address(RVA = "0xD46254", Offset = "0xD46254", VA = "0xD46254")]
	private void OnHandCollisionStart(Autohand.Hand hand, GameObject other)
	{
	}

	[Token(Token = "0x6000060")]
	[Address(RVA = "0xD46258", Offset = "0xD46258", VA = "0xD46258")]
	private void OnHandCollisionStop(Autohand.Hand hand, GameObject other)
	{
	}

	[Token(Token = "0x6000061")]
	[Address(RVA = "0xD4625C", Offset = "0xD4625C", VA = "0xD4625C")]
	private void OnHandTriggerStart(Autohand.Hand hand, GameObject other)
	{
	}

	[Token(Token = "0x6000062")]
	[Address(RVA = "0xD46260", Offset = "0xD46260", VA = "0xD46260")]
	private void OnHandTriggerStop(Autohand.Hand hand, GameObject other)
	{
	}

	[Token(Token = "0x6000063")]
	[Address(RVA = "0xD46264", Offset = "0xD46264", VA = "0xD46264")]
	public HandEventTemplate()
	{
	}
}
[Token(Token = "0x200001D")]
public class PlacePointEventTemplate : MonoBehaviour
{
	[Token(Token = "0x400008F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PlacePoint placePoint;

	[Token(Token = "0x6000064")]
	[Address(RVA = "0xD4626C", Offset = "0xD4626C", VA = "0xD4626C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000065")]
	[Address(RVA = "0xD464DC", Offset = "0xD464DC", VA = "0xD464DC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000066")]
	[Address(RVA = "0xD4674C", Offset = "0xD4674C", VA = "0xD4674C")]
	public void OnPlace(PlacePoint point, Grabbable grab)
	{
	}

	[Token(Token = "0x6000067")]
	[Address(RVA = "0xD46750", Offset = "0xD46750", VA = "0xD46750")]
	public void OnRemove(PlacePoint point, Grabbable grab)
	{
	}

	[Token(Token = "0x6000068")]
	[Address(RVA = "0xD46754", Offset = "0xD46754", VA = "0xD46754")]
	public void OnHighlight(PlacePoint point, Grabbable grab)
	{
	}

	[Token(Token = "0x6000069")]
	[Address(RVA = "0xD46758", Offset = "0xD46758", VA = "0xD46758")]
	public void OnStopHighlight(PlacePoint point, Grabbable grab)
	{
	}

	[Token(Token = "0x600006A")]
	[Address(RVA = "0xD4675C", Offset = "0xD4675C", VA = "0xD4675C")]
	public PlacePointEventTemplate()
	{
	}
}
[Token(Token = "0x200001E")]
public class AutoHandSettings : ScriptableObject
{
	[Token(Token = "0x4000090")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("Whether the popup should be ignored on launch or not")]
	public bool ignoreSetup;

	[Token(Token = "0x4000091")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Tooltip("-1 is custom, 0 is low, 1 is medium, 2 is high")]
	public float quality;

	[Token(Token = "0x600006B")]
	[Address(RVA = "0xD46764", Offset = "0xD46764", VA = "0xD46764")]
	public static void ClearSettings()
	{
	}

	[Token(Token = "0x600006C")]
	[Address(RVA = "0xD467D4", Offset = "0xD467D4", VA = "0xD467D4")]
	public AutoHandSettings()
	{
	}
}
[Token(Token = "0x200001F")]
public class CollisionIgnores : MonoBehaviour
{
	[Token(Token = "0x4000092")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool disableOnStart;

	[Token(Token = "0x4000093")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Collider[] cols1;

	[Token(Token = "0x4000094")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Collider[] cols2;

	[Token(Token = "0x600006D")]
	[Address(RVA = "0xD467E4", Offset = "0xD467E4", VA = "0xD467E4")]
	private void Start()
	{
	}

	[Token(Token = "0x600006E")]
	[Address(RVA = "0xD4688C", Offset = "0xD4688C", VA = "0xD4688C")]
	public void EnableCollisions()
	{
	}

	[Token(Token = "0x600006F")]
	[Address(RVA = "0xD467E8", Offset = "0xD467E8", VA = "0xD467E8")]
	public void DisableCollisions()
	{
	}

	[Token(Token = "0x6000070")]
	[Address(RVA = "0xD46930", Offset = "0xD46930", VA = "0xD46930")]
	public CollisionIgnores()
	{
	}
}
[Token(Token = "0x2000020")]
public class CollisionSound : MonoBehaviour
{
	[Token(Token = "0x2000021")]
	[CompilerGenerated]
	private sealed class <SoundPlayBuffer>d__13 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400009F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40000A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40000A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CollisionSound <>4__this;

		[Token(Token = "0x17000003")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600007A")]
			[Address(RVA = "0xD46F88", Offset = "0xD46F88", VA = "0xD46F88", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000004")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600007C")]
			[Address(RVA = "0xD46FD0", Offset = "0xD46FD0", VA = "0xD46FD0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000077")]
		[Address(RVA = "0xD46DF4", Offset = "0xD46DF4", VA = "0xD46DF4")]
		[DebuggerHidden]
		public <SoundPlayBuffer>d__13(int <>1__state)
		{
		}

		[Token(Token = "0x6000078")]
		[Address(RVA = "0xD46EB4", Offset = "0xD46EB4", VA = "0xD46EB4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000079")]
		[Address(RVA = "0xD46EB8", Offset = "0xD46EB8", VA = "0xD46EB8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600007B")]
		[Address(RVA = "0xD46F90", Offset = "0xD46F90", VA = "0xD46F90", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000022")]
	[CompilerGenerated]
	private sealed class <SoundPlayBuffer>d__14 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40000A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40000A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40000A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CollisionSound <>4__this;

		[Token(Token = "0x40000A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float time;

		[Token(Token = "0x17000005")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000080")]
			[Address(RVA = "0xD470AC", Offset = "0xD470AC", VA = "0xD470AC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000006")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000082")]
			[Address(RVA = "0xD470F4", Offset = "0xD470F4", VA = "0xD470F4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600007D")]
		[Address(RVA = "0xD46E1C", Offset = "0xD46E1C", VA = "0xD46E1C")]
		[DebuggerHidden]
		public <SoundPlayBuffer>d__14(int <>1__state)
		{
		}

		[Token(Token = "0x600007E")]
		[Address(RVA = "0xD46FD8", Offset = "0xD46FD8", VA = "0xD46FD8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600007F")]
		[Address(RVA = "0xD46FDC", Offset = "0xD46FDC", VA = "0xD46FDC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000081")]
		[Address(RVA = "0xD470B4", Offset = "0xD470B4", VA = "0xD470B4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000095")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("The layers that cause the sound to play")]
	public LayerMask collisionTriggers;

	[Token(Token = "0x4000096")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("Source to play sound from")]
	public AudioSource source;

	[Token(Token = "0x4000097")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("Source to play sound from")]
	public AudioClip clip;

	[Token(Token = "0x4000098")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Space]
	[Tooltip("Source to play sound from")]
	public AnimationCurve velocityVolumeCurve;

	[Token(Token = "0x4000099")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float volumeAmp;

	[Token(Token = "0x400009A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float velocityAmp;

	[Token(Token = "0x400009B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float soundRepeatDelay;

	[Token(Token = "0x400009C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Rigidbody body;

	[Token(Token = "0x400009D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool canPlaySound;

	[Token(Token = "0x400009E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Coroutine playSoundRoutine;

	[Token(Token = "0x6000071")]
	[Address(RVA = "0xD46940", Offset = "0xD46940", VA = "0xD46940")]
	private void Start()
	{
	}

	[Token(Token = "0x6000072")]
	[Address(RVA = "0xD46A38", Offset = "0xD46A38", VA = "0xD46A38")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000073")]
	[Address(RVA = "0xD46A4C", Offset = "0xD46A4C", VA = "0xD46A4C")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6000074")]
	[Address(RVA = "0xD46D80", Offset = "0xD46D80", VA = "0xD46D80")]
	[IteratorStateMachine(typeof(<SoundPlayBuffer>d__13))]
	private IEnumerator SoundPlayBuffer()
	{
		return null;
	}

	[Token(Token = "0x6000075")]
	[Address(RVA = "0xD469B4", Offset = "0xD469B4", VA = "0xD469B4")]
	[IteratorStateMachine(typeof(<SoundPlayBuffer>d__14))]
	private IEnumerator SoundPlayBuffer(float time)
	{
		return null;
	}

	[Token(Token = "0x6000076")]
	[Address(RVA = "0xD46E44", Offset = "0xD46E44", VA = "0xD46E44")]
	public CollisionSound()
	{
	}
}
[Token(Token = "0x2000023")]
[RequireComponent(typeof(Rigidbody))]
public class MagneticBody : MonoBehaviour
{
	[Token(Token = "0x40000A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int magneticIndex;

	[Token(Token = "0x40000A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float strengthMultiplyer;

	[Token(Token = "0x40000A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityMagneticEvent magneticEnter;

	[Token(Token = "0x40000A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityMagneticEvent magneticExit;

	[Token(Token = "0x40000AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	public Rigidbody body;

	[Token(Token = "0x6000083")]
	[Address(RVA = "0xD470FC", Offset = "0xD470FC", VA = "0xD470FC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000084")]
	[Address(RVA = "0xD47154", Offset = "0xD47154", VA = "0xD47154")]
	public MagneticBody()
	{
	}
}
[Token(Token = "0x2000024")]
[RequireComponent(typeof(TextMeshPro))]
public class DebugLogPanel : MonoBehaviour
{
	[Token(Token = "0x40000AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("Granularity. Sometimes you may not want to see everything being sent to the console.")]
	[SerializeField]
	[Header("Visual Feedback")]
	private LogType LogLevel;

	[Token(Token = "0x40000AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Tooltip("Maximum number of messages before deleting the older messages.")]
	[SerializeField]
	private int maxNumberOfMessages;

	[Token(Token = "0x40000AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("Check this if you want the stack trace printed after the message.")]
	[SerializeField]
	private bool includeStackTrace;

	[Token(Token = "0x40000AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	[SerializeField]
	[Tooltip("Play a sound when the message panel is updated.")]
	[Header("Auditory Feedback")]
	private bool playSoundOnMessage;

	[Token(Token = "0x40000AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
	private bool newMessageArrived;

	[Token(Token = "0x40000B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private TextMeshPro debugText;

	[Token(Token = "0x40000B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Queue<string> messageQueue;

	[Token(Token = "0x40000B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private AudioSource messageSound;

	[Token(Token = "0x6000085")]
	[Address(RVA = "0xD47164", Offset = "0xD47164", VA = "0xD47164")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000086")]
	[Address(RVA = "0xD4729C", Offset = "0xD4729C", VA = "0xD4729C")]
	private void Application_logMessageReceivedThreaded(string condition, string stackTrace, LogType type)
	{
	}

	[Token(Token = "0x6000087")]
	[Address(RVA = "0xD4746C", Offset = "0xD4746C", VA = "0xD4746C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000088")]
	[Address(RVA = "0xD474EC", Offset = "0xD474EC", VA = "0xD474EC")]
	private void PrintQueue()
	{
	}

	[Token(Token = "0x6000089")]
	[Address(RVA = "0xD47618", Offset = "0xD47618", VA = "0xD47618")]
	private void Update()
	{
	}

	[Token(Token = "0x600008A")]
	[Address(RVA = "0xD47638", Offset = "0xD47638", VA = "0xD47638")]
	public DebugLogPanel()
	{
	}
}
[Token(Token = "0x2000025")]
public class FlatKitDepthNormals : ScriptableRendererFeature
{
	[Token(Token = "0x2000026")]
	private class DepthNormalsPass : ScriptableRenderPass
	{
		[Token(Token = "0x40000B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private RenderTargetHandle _depthAttachmentHandle;

		[Token(Token = "0x40000B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private RenderTextureDescriptor _descriptor;

		[Token(Token = "0x40000BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		private FilteringSettings _filteringSettings;

		[Token(Token = "0x40000BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private readonly Material _depthNormalsMaterial;

		[Token(Token = "0x40000BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private readonly string _profilerTag;

		[Token(Token = "0x40000BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private readonly ShaderTagId _shaderTagId;

		[Token(Token = "0x40000BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		private readonly int _depthBufferBits;

		[Token(Token = "0x600008E")]
		[Address(RVA = "0xD477E4", Offset = "0xD477E4", VA = "0xD477E4")]
		public DepthNormalsPass(RenderQueueRange renderQueueRange, LayerMask layerMask, Material material)
		{
		}

		[Token(Token = "0x600008F")]
		[Address(RVA = "0xD47A04", Offset = "0xD47A04", VA = "0xD47A04")]
		public void Setup(RenderTextureDescriptor baseDescriptor, RenderTargetHandle depthRTHandle)
		{
		}

		[Token(Token = "0x6000090")]
		[Address(RVA = "0xD47A70", Offset = "0xD47A70", VA = "0xD47A70", Slot = "6")]
		public override void Configure(CommandBuffer cmd, RenderTextureDescriptor cameraTextureDescriptor)
		{
		}

		[Token(Token = "0x6000091")]
		[Address(RVA = "0xD47B3C", Offset = "0xD47B3C", VA = "0xD47B3C", Slot = "9")]
		public override void Execute(ScriptableRenderContext context, ref RenderingData renderingData)
		{
		}

		[Token(Token = "0x6000092")]
		[Address(RVA = "0xD47DF4", Offset = "0xD47DF4", VA = "0xD47DF4", Slot = "4")]
		public override void FrameCleanup(CommandBuffer cmd)
		{
		}
	}

	[Token(Token = "0x40000B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool overrideRenderEvent;

	[Token(Token = "0x40000B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public RenderPassEvent renderEvent;

	[Token(Token = "0x40000B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private DepthNormalsPass _depthNormalsPass;

	[Token(Token = "0x40000B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private RenderTargetHandle _depthNormalsTexture;

	[Token(Token = "0x40000B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Material _depthNormalsMaterial;

	[Token(Token = "0x600008B")]
	[Address(RVA = "0xD47648", Offset = "0xD47648", VA = "0xD47648")]
	public FlatKitDepthNormals(RenderTargetHandle depthNormalsTexture)
	{
	}

	[Token(Token = "0x600008C")]
	[Address(RVA = "0xD47688", Offset = "0xD47688", VA = "0xD47688", Slot = "5")]
	public override void Create()
	{
	}

	[Token(Token = "0x600008D")]
	[Address(RVA = "0xD47928", Offset = "0xD47928", VA = "0xD47928", Slot = "7")]
	public override void AddRenderPasses(ScriptableRenderer renderer, ref RenderingData renderingData)
	{
	}
}
[Token(Token = "0x2000027")]
public class FlyCam : MonoBehaviour
{
	[Token(Token = "0x40000BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float movementSpeed;

	[Token(Token = "0x40000C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float fastMovementSpeed;

	[Token(Token = "0x40000C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float freeLookSensitivity;

	[Token(Token = "0x40000C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float zoomSensitivity;

	[Token(Token = "0x40000C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float fastZoomSensitivity;

	[Token(Token = "0x40000C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private bool looking;

	[Token(Token = "0x6000093")]
	[Address(RVA = "0xD47EF0", Offset = "0xD47EF0", VA = "0xD47EF0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000094")]
	[Address(RVA = "0xD48750", Offset = "0xD48750", VA = "0xD48750")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000095")]
	[Address(RVA = "0xD48704", Offset = "0xD48704", VA = "0xD48704")]
	public void StartLooking()
	{
	}

	[Token(Token = "0x6000096")]
	[Address(RVA = "0xD4872C", Offset = "0xD4872C", VA = "0xD4872C")]
	public void StopLooking()
	{
	}

	[Token(Token = "0x6000097")]
	[Address(RVA = "0xD48774", Offset = "0xD48774", VA = "0xD48774")]
	public FlyCam()
	{
	}
}
[Token(Token = "0x2000028")]
public class UW : MonoBehaviour
{
	[Token(Token = "0x40000C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float ScrollX;

	[Token(Token = "0x40000C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float ScrollY;

	[Token(Token = "0x6000098")]
	[Address(RVA = "0xD48790", Offset = "0xD48790", VA = "0xD48790")]
	private void Update()
	{
	}

	[Token(Token = "0x6000099")]
	[Address(RVA = "0xD4882C", Offset = "0xD4882C", VA = "0xD4882C")]
	public UW()
	{
	}
}
[Token(Token = "0x2000029")]
public class StartAndStopTween : MonoBehaviour
{
	[Token(Token = "0x40000C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject target;

	[Token(Token = "0x600009A")]
	[Address(RVA = "0xD4883C", Offset = "0xD4883C", VA = "0xD4883C")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x600009B")]
	[Address(RVA = "0xD48ABC", Offset = "0xD48ABC", VA = "0xD48ABC")]
	public StartAndStopTween()
	{
	}
}
[Token(Token = "0x200002A")]
public class EventParamMappings
{
	[Token(Token = "0x40000C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Dictionary<iTweenEvent.TweenType, Dictionary<string, Type>> mappings;

	[Token(Token = "0x600009C")]
	[Address(RVA = "0xD48AC4", Offset = "0xD48AC4", VA = "0xD48AC4")]
	static EventParamMappings()
	{
	}

	[Token(Token = "0x600009D")]
	[Address(RVA = "0xD559D0", Offset = "0xD559D0", VA = "0xD559D0")]
	public EventParamMappings()
	{
	}
}
[Token(Token = "0x200002B")]
public class Vector3OrTransform
{
	[Token(Token = "0x40000C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static readonly string[] choices;

	[Token(Token = "0x40000CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static readonly int vector3Selected;

	[Token(Token = "0x40000CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public static readonly int transformSelected;

	[Token(Token = "0x40000CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int selected;

	[Token(Token = "0x40000CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Vector3 vector;

	[Token(Token = "0x40000CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform transform;

	[Token(Token = "0x600009E")]
	[Address(RVA = "0xD559D8", Offset = "0xD559D8", VA = "0xD559D8")]
	public Vector3OrTransform()
	{
	}
}
[Token(Token = "0x200002C")]
public class Vector3OrTransformArray
{
	[Token(Token = "0x40000CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static readonly string[] choices;

	[Token(Token = "0x40000D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static readonly int vector3Selected;

	[Token(Token = "0x40000D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public static readonly int transformSelected;

	[Token(Token = "0x40000D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static readonly int iTweenPathSelected;

	[Token(Token = "0x40000D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int selected;

	[Token(Token = "0x40000D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3[] vectorArray;

	[Token(Token = "0x40000D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform[] transformArray;

	[Token(Token = "0x40000D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string pathName;

	[Token(Token = "0x60000A0")]
	[Address(RVA = "0xD55B3C", Offset = "0xD55B3C", VA = "0xD55B3C")]
	public Vector3OrTransformArray()
	{
	}
}
[Serializable]
[Token(Token = "0x200002D")]
public class ArrayIndexes
{
	[Token(Token = "0x40000D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int[] indexes;

	[Token(Token = "0x60000A2")]
	[Address(RVA = "0xD55D04", Offset = "0xD55D04", VA = "0xD55D04")]
	public ArrayIndexes()
	{
	}
}
[Token(Token = "0x200002E")]
public class iTweenEvent : MonoBehaviour
{
	[Token(Token = "0x200002F")]
	public enum TweenType
	{
		[Token(Token = "0x40000F6")]
		AudioFrom,
		[Token(Token = "0x40000F7")]
		AudioTo,
		[Token(Token = "0x40000F8")]
		AudioUpdate,
		[Token(Token = "0x40000F9")]
		CameraFadeFrom,
		[Token(Token = "0x40000FA")]
		CameraFadeTo,
		[Token(Token = "0x40000FB")]
		ColorFrom,
		[Token(Token = "0x40000FC")]
		ColorTo,
		[Token(Token = "0x40000FD")]
		ColorUpdate,
		[Token(Token = "0x40000FE")]
		FadeFrom,
		[Token(Token = "0x40000FF")]
		FadeTo,
		[Token(Token = "0x4000100")]
		FadeUpdate,
		[Token(Token = "0x4000101")]
		LookFrom,
		[Token(Token = "0x4000102")]
		LookTo,
		[Token(Token = "0x4000103")]
		LookUpdate,
		[Token(Token = "0x4000104")]
		MoveAdd,
		[Token(Token = "0x4000105")]
		MoveBy,
		[Token(Token = "0x4000106")]
		MoveFrom,
		[Token(Token = "0x4000107")]
		MoveTo,
		[Token(Token = "0x4000108")]
		MoveUpdate,
		[Token(Token = "0x4000109")]
		PunchPosition,
		[Token(Token = "0x400010A")]
		PunchRotation,
		[Token(Token = "0x400010B")]
		PunchScale,
		[Token(Token = "0x400010C")]
		RotateAdd,
		[Token(Token = "0x400010D")]
		RotateBy,
		[Token(Token = "0x400010E")]
		RotateFrom,
		[Token(Token = "0x400010F")]
		RotateTo,
		[Token(Token = "0x4000110")]
		RotateUpdate,
		[Token(Token = "0x4000111")]
		ScaleAdd,
		[Token(Token = "0x4000112")]
		ScaleBy,
		[Token(Token = "0x4000113")]
		ScaleFrom,
		[Token(Token = "0x4000114")]
		ScaleTo,
		[Token(Token = "0x4000115")]
		ScaleUpdate,
		[Token(Token = "0x4000116")]
		ShakePosition,
		[Token(Token = "0x4000117")]
		ShakeRotation,
		[Token(Token = "0x4000118")]
		ShakeScale,
		[Token(Token = "0x4000119")]
		Stab
	}

	[Token(Token = "0x2000031")]
	[CompilerGenerated]
	private sealed class <StartEvent>d__38 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400011B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400011C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400011D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public iTweenEvent <>4__this;

		[Token(Token = "0x17000008")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60000B7")]
			[Address(RVA = "0xD59830", Offset = "0xD59830", VA = "0xD59830", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000009")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60000B9")]
			[Address(RVA = "0xD59878", Offset = "0xD59878", VA = "0xD59878", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60000B4")]
		[Address(RVA = "0xD58838", Offset = "0xD58838", VA = "0xD58838")]
		[DebuggerHidden]
		public <StartEvent>d__38(int <>1__state)
		{
		}

		[Token(Token = "0x60000B5")]
		[Address(RVA = "0xD588F0", Offset = "0xD588F0", VA = "0xD588F0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60000B6")]
		[Address(RVA = "0xD588F4", Offset = "0xD588F4", VA = "0xD588F4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60000B8")]
		[Address(RVA = "0xD59838", Offset = "0xD59838", VA = "0xD59838", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40000D8")]
	public const string VERSION = "0.6.1";

	[Token(Token = "0x40000D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string tweenName;

	[Token(Token = "0x40000DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool playAutomatically;

	[Token(Token = "0x40000DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float delay;

	[Token(Token = "0x40000DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TweenType type;

	[Token(Token = "0x40000DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool showIconInInspector;

	[Token(Token = "0x40000DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private string[] keys;

	[Token(Token = "0x40000DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private int[] indexes;

	[Token(Token = "0x40000E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private string[] metadatas;

	[Token(Token = "0x40000E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private int[] ints;

	[Token(Token = "0x40000E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private float[] floats;

	[Token(Token = "0x40000E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private bool[] bools;

	[Token(Token = "0x40000E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private string[] strings;

	[Token(Token = "0x40000E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private Vector3[] vector3s;

	[Token(Token = "0x40000E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private Color[] colors;

	[Token(Token = "0x40000E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private Space[] spaces;

	[Token(Token = "0x40000E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private iTween.EaseType[] easeTypes;

	[Token(Token = "0x40000E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private iTween.LoopType[] loopTypes;

	[Token(Token = "0x40000EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private GameObject[] gameObjects;

	[Token(Token = "0x40000EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	private Transform[] transforms;

	[Token(Token = "0x40000EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	private AudioClip[] audioClips;

	[Token(Token = "0x40000ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[SerializeField]
	private AudioSource[] audioSources;

	[Token(Token = "0x40000EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[SerializeField]
	private ArrayIndexes[] vector3Arrays;

	[Token(Token = "0x40000EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[SerializeField]
	private ArrayIndexes[] transformArrays;

	[Token(Token = "0x40000F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[SerializeField]
	private iTweenPath[] paths;

	[Token(Token = "0x40000F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private Dictionary<string, object> values;

	[Token(Token = "0x40000F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private bool stopped;

	[Token(Token = "0x40000F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private iTween instantiatedTween;

	[Token(Token = "0x40000F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private string internalName;

	[Token(Token = "0x17000007")]
	public Dictionary<string, object> Values
	{
		[Token(Token = "0x60000A4")]
		[Address(RVA = "0xD55FFC", Offset = "0xD55FFC", VA = "0xD55FFC")]
		get
		{
			return null;
		}
		[Token(Token = "0x60000A5")]
		[Address(RVA = "0xD56E40", Offset = "0xD56E40", VA = "0xD56E40")]
		set
		{
		}
	}

	[Token(Token = "0x60000A3")]
	[Address(RVA = "0xD55D0C", Offset = "0xD55D0C", VA = "0xD55D0C")]
	public static iTweenEvent GetEvent(GameObject obj, string name)
	{
		return null;
	}

	[Token(Token = "0x60000A6")]
	[Address(RVA = "0xD5864C", Offset = "0xD5864C", VA = "0xD5864C")]
	public void Start()
	{
	}

	[Token(Token = "0x60000A7")]
	[Address(RVA = "0xD5865C", Offset = "0xD5865C", VA = "0xD5865C")]
	public void Play()
	{
	}

	[Token(Token = "0x60000A8")]
	[Address(RVA = "0xD5869C", Offset = "0xD5869C", VA = "0xD5869C")]
	public void Stop()
	{
	}

	[Token(Token = "0x60000A9")]
	[Address(RVA = "0xD587C0", Offset = "0xD587C0", VA = "0xD587C0")]
	public void OnDrawGizmos()
	{
	}

	[Token(Token = "0x60000AA")]
	[Address(RVA = "0xD5874C", Offset = "0xD5874C", VA = "0xD5874C")]
	[IteratorStateMachine(typeof(<StartEvent>d__38))]
	private IEnumerator StartEvent()
	{
		return null;
	}

	[Token(Token = "0x60000AB")]
	[Address(RVA = "0xD56E5C", Offset = "0xD56E5C", VA = "0xD56E5C")]
	private void SerializeValues()
	{
	}

	[Token(Token = "0x60000AC")]
	private void AddToList<T>(List<string> keyList, List<int> indexList, IList<T> valueList, List<string> metadataList, KeyValuePair<string, object> pair)
	{
	}

	[Token(Token = "0x60000AD")]
	private void AddToList<T>(List<string> keyList, List<int> indexList, IList<T> valueList, List<string> metadataList, KeyValuePair<string, object> pair, string metadata)
	{
	}

	[Token(Token = "0x60000AE")]
	private void AddToList<T>(List<string> keyList, List<int> indexList, IList<T> valueList, List<string> metadataList, string key, object value)
	{
	}

	[Token(Token = "0x60000AF")]
	private void AddToList<T>(List<string> keyList, List<int> indexList, IList<T> valueList, List<string> metadataList, string key, object value, string metadata)
	{
	}

	[Token(Token = "0x60000B0")]
	[Address(RVA = "0xD56020", Offset = "0xD56020", VA = "0xD56020")]
	private void DeserializeValues()
	{
	}

	[Token(Token = "0x60000B1")]
	[Address(RVA = "0xD58860", Offset = "0xD58860", VA = "0xD58860")]
	public iTweenEvent()
	{
	}
}
[Token(Token = "0x2000032")]
public class iTweenPath : MonoBehaviour
{
	[Token(Token = "0x400011E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string pathName;

	[Token(Token = "0x400011F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Color pathColor;

	[Token(Token = "0x4000120")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public List<Vector3> nodes;

	[Token(Token = "0x4000121")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int nodeCount;

	[Token(Token = "0x4000122")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Dictionary<string, iTweenPath> paths;

	[Token(Token = "0x4000123")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public bool initialized;

	[Token(Token = "0x4000124")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public string initialName;

	[Token(Token = "0x60000BA")]
	[Address(RVA = "0xD59880", Offset = "0xD59880", VA = "0xD59880")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000BB")]
	[Address(RVA = "0xD59984", Offset = "0xD59984", VA = "0xD59984")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x60000BC")]
	[Address(RVA = "0xD596D8", Offset = "0xD596D8", VA = "0xD596D8")]
	public static Vector3[] GetPath(string requestedName)
	{
		return null;
	}

	[Token(Token = "0x60000BD")]
	[Address(RVA = "0xD59A70", Offset = "0xD59A70", VA = "0xD59A70")]
	public iTweenPath()
	{
	}
}
[Token(Token = "0x2000033")]
[RequireComponent(typeof(MeshRenderer))]
[RequireComponent(typeof(MeshFilter))]
public class MeshCombiner : MonoBehaviour
{
	[Token(Token = "0x4000125")]
	private const int Mesh16BitBufferVertexLimit = 65535;

	[Token(Token = "0x4000126")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private bool createMultiMaterialMesh;

	[Token(Token = "0x4000127")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	[SerializeField]
	private bool combineInactiveChildren;

	[Token(Token = "0x4000128")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	[SerializeField]
	private bool deactivateCombinedChildren;

	[Token(Token = "0x4000129")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
	[SerializeField]
	private bool deactivateCombinedChildrenMeshRenderers;

	[Token(Token = "0x400012A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private bool generateUVMap;

	[Token(Token = "0x400012B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	[SerializeField]
	private bool destroyCombinedChildren;

	[Token(Token = "0x400012C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private string folderPath;

	[Token(Token = "0x400012D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("MeshFilters with Meshes which we don't want to combine into one Mesh.")]
	[SerializeField]
	private MeshFilter[] meshFiltersToSkip;

	[Token(Token = "0x1700000A")]
	public bool CreateMultiMaterialMesh
	{
		[Token(Token = "0x60000BF")]
		[Address(RVA = "0xD59D14", Offset = "0xD59D14", VA = "0xD59D14")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60000C0")]
		[Address(RVA = "0xD59D1C", Offset = "0xD59D1C", VA = "0xD59D1C")]
		set
		{
		}
	}

	[Token(Token = "0x1700000B")]
	public bool CombineInactiveChildren
	{
		[Token(Token = "0x60000C1")]
		[Address(RVA = "0xD59D28", Offset = "0xD59D28", VA = "0xD59D28")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60000C2")]
		[Address(RVA = "0xD59D30", Offset = "0xD59D30", VA = "0xD59D30")]
		set
		{
		}
	}

	[Token(Token = "0x1700000C")]
	public bool DeactivateCombinedChildren
	{
		[Token(Token = "0x60000C3")]
		[Address(RVA = "0xD59D3C", Offset = "0xD59D3C", VA = "0xD59D3C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60000C4")]
		[Address(RVA = "0xD59D44", Offset = "0xD59D44", VA = "0xD59D44")]
		set
		{
		}
	}

	[Token(Token = "0x1700000D")]
	public bool DeactivateCombinedChildrenMeshRenderers
	{
		[Token(Token = "0x60000C5")]
		[Address(RVA = "0xD59D78", Offset = "0xD59D78", VA = "0xD59D78")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60000C6")]
		[Address(RVA = "0xD59D80", Offset = "0xD59D80", VA = "0xD59D80")]
		set
		{
		}
	}

	[Token(Token = "0x1700000E")]
	public bool GenerateUVMap
	{
		[Token(Token = "0x60000C7")]
		[Address(RVA = "0xD59DA0", Offset = "0xD59DA0", VA = "0xD59DA0")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60000C8")]
		[Address(RVA = "0xD59DA8", Offset = "0xD59DA8", VA = "0xD59DA8")]
		set
		{
		}
	}

	[Token(Token = "0x1700000F")]
	public bool DestroyCombinedChildren
	{
		[Token(Token = "0x60000C9")]
		[Address(RVA = "0xD59DB4", Offset = "0xD59DB4", VA = "0xD59DB4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60000CA")]
		[Address(RVA = "0xD59DBC", Offset = "0xD59DBC", VA = "0xD59DBC")]
		set
		{
		}
	}

	[Token(Token = "0x17000010")]
	public string FolderPath
	{
		[Token(Token = "0x60000CB")]
		[Address(RVA = "0xD59DE0", Offset = "0xD59DE0", VA = "0xD59DE0")]
		get
		{
			return null;
		}
		[Token(Token = "0x60000CC")]
		[Address(RVA = "0xD59DE8", Offset = "0xD59DE8", VA = "0xD59DE8")]
		set
		{
		}
	}

	[Token(Token = "0x60000CD")]
	[Address(RVA = "0xD59D60", Offset = "0xD59D60", VA = "0xD59D60")]
	private void CheckDeactivateCombinedChildren()
	{
	}

	[Token(Token = "0x60000CE")]
	[Address(RVA = "0xD59DD0", Offset = "0xD59DD0", VA = "0xD59DD0")]
	private void CheckDestroyCombinedChildren()
	{
	}

	[Token(Token = "0x60000CF")]
	[Address(RVA = "0xD59DF0", Offset = "0xD59DF0", VA = "0xD59DF0")]
	public void CombineMeshes(bool showCreatedMeshInfo)
	{
	}

	[Token(Token = "0x60000D0")]
	[Address(RVA = "0xD5B7FC", Offset = "0xD5B7FC", VA = "0xD5B7FC")]
	private MeshFilter[] GetMeshFiltersToCombine()
	{
		return null;
	}

	[Token(Token = "0x60000D1")]
	[Address(RVA = "0xD5A11C", Offset = "0xD5A11C", VA = "0xD5A11C")]
	private void CombineMeshesWithSingleMaterial(bool showCreatedMeshInfo)
	{
	}

	[Token(Token = "0x60000D2")]
	[Address(RVA = "0xD5A90C", Offset = "0xD5A90C", VA = "0xD5A90C")]
	private void CombineMeshesWithMutliMaterial(bool showCreatedMeshInfo)
	{
	}

	[Token(Token = "0x60000D3")]
	[Address(RVA = "0xD5BB0C", Offset = "0xD5BB0C", VA = "0xD5BB0C")]
	private void DeactivateCombinedGameObjects(MeshFilter[] meshFilters)
	{
	}

	[Token(Token = "0x60000D4")]
	[Address(RVA = "0xD5BB08", Offset = "0xD5BB08", VA = "0xD5BB08")]
	private void GenerateUV(Mesh combinedMesh)
	{
	}

	[Token(Token = "0x60000D5")]
	[Address(RVA = "0xD5BCB8", Offset = "0xD5BCB8", VA = "0xD5BCB8")]
	public MeshCombiner()
	{
	}
}
[Token(Token = "0x2000037")]
public class ParticleLineSpawner : MonoBehaviour
{
	[Token(Token = "0x4000134")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] particles;

	[Token(Token = "0x4000135")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int maxButtons;

	[Token(Token = "0x4000136")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool spawnOnAwake;

	[Token(Token = "0x4000137")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string removeTextFromButton;

	[Token(Token = "0x4000138")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public string removeTextFromMaterialButton;

	[Token(Token = "0x4000139")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float autoChangeDelay;

	[Token(Token = "0x400013A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private int page;

	[Token(Token = "0x400013B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int pages;

	[Token(Token = "0x400013C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private GameObject currentGO;

	[Token(Token = "0x400013D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Color currentColor;

	[Token(Token = "0x400013E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool isPS;

	[Token(Token = "0x400013F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
	private bool _active;

	[Token(Token = "0x4000140")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private int counter;

	[Token(Token = "0x4000141")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public GUIStyle bigStyle;

	[Token(Token = "0x60000DD")]
	[Address(RVA = "0xD5BF38", Offset = "0xD5BF38", VA = "0xD5BF38")]
	public void Start()
	{
	}

	[Token(Token = "0x60000DE")]
	[Address(RVA = "0xD5C1D0", Offset = "0xD5C1D0", VA = "0xD5C1D0")]
	public void Update()
	{
	}

	[Token(Token = "0x60000DF")]
	[Address(RVA = "0xD5C278", Offset = "0xD5C278", VA = "0xD5C278")]
	public void NextModel()
	{
	}

	[Token(Token = "0x60000E0")]
	[Address(RVA = "0xD5C2C8", Offset = "0xD5C2C8", VA = "0xD5C2C8")]
	public void AddMovement()
	{
	}

	[Token(Token = "0x60000E1")]
	[Address(RVA = "0xD5C328", Offset = "0xD5C328", VA = "0xD5C328")]
	public void Duplicate()
	{
	}

	[Token(Token = "0x60000E2")]
	[Address(RVA = "0xD5C42C", Offset = "0xD5C42C", VA = "0xD5C42C")]
	public void DestroyAll()
	{
	}

	[Token(Token = "0x60000E3")]
	[Address(RVA = "0xD5C580", Offset = "0xD5C580", VA = "0xD5C580")]
	public void OnGUI()
	{
	}

	[Token(Token = "0x60000E4")]
	[Address(RVA = "0xD5C100", Offset = "0xD5C100", VA = "0xD5C100")]
	public void ReplaceGO(GameObject _go)
	{
	}

	[Token(Token = "0x60000E5")]
	[Address(RVA = "0xD5CAA0", Offset = "0xD5CAA0", VA = "0xD5CAA0")]
	public void PlayPS(ParticleSystem _ps, int _nr)
	{
	}

	[Token(Token = "0x60000E6")]
	[Address(RVA = "0xD5CACC", Offset = "0xD5CACC", VA = "0xD5CACC")]
	public ParticleLineSpawner()
	{
	}
}
[Token(Token = "0x2000039")]
public class PL_RandomMovement : MonoBehaviour
{
	[Token(Token = "0x200003A")]
	[CompilerGenerated]
	private sealed class <Start>d__5 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000149")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400014A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400014B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PL_RandomMovement <>4__this;

		[Token(Token = "0x17000011")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60000F2")]
			[Address(RVA = "0xD5CFBC", Offset = "0xD5CFBC", VA = "0xD5CFBC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000012")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60000F4")]
			[Address(RVA = "0xD5D004", Offset = "0xD5D004", VA = "0xD5D004", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60000EF")]
		[Address(RVA = "0xD5CBF4", Offset = "0xD5CBF4", VA = "0xD5CBF4")]
		[DebuggerHidden]
		public <Start>d__5(int <>1__state)
		{
		}

		[Token(Token = "0x60000F0")]
		[Address(RVA = "0xD5CDE8", Offset = "0xD5CDE8", VA = "0xD5CDE8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60000F1")]
		[Address(RVA = "0xD5CDEC", Offset = "0xD5CDEC", VA = "0xD5CDEC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60000F3")]
		[Address(RVA = "0xD5CFC4", Offset = "0xD5CFC4", VA = "0xD5CFC4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200003B")]
	[CompilerGenerated]
	private sealed class <Spawn>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400014C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400014D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400014E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PL_RandomMovement <>4__this;

		[Token(Token = "0x17000013")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60000F8")]
			[Address(RVA = "0xD5D120", Offset = "0xD5D120", VA = "0xD5D120", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000014")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60000FA")]
			[Address(RVA = "0xD5D168", Offset = "0xD5D168", VA = "0xD5D168", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60000F5")]
		[Address(RVA = "0xD5CCD8", Offset = "0xD5CCD8", VA = "0xD5CCD8")]
		[DebuggerHidden]
		public <Spawn>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x60000F6")]
		[Address(RVA = "0xD5D00C", Offset = "0xD5D00C", VA = "0xD5D00C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60000F7")]
		[Address(RVA = "0xD5D010", Offset = "0xD5D010", VA = "0xD5D010", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60000F9")]
		[Address(RVA = "0xD5D128", Offset = "0xD5D128", VA = "0xD5D128", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000144")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 rp;

	[Token(Token = "0x4000145")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int counter;

	[Token(Token = "0x4000146")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float speed;

	[Token(Token = "0x4000147")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int duplicate;

	[Token(Token = "0x4000148")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool duped;

	[Token(Token = "0x60000EA")]
	[Address(RVA = "0xD5CB80", Offset = "0xD5CB80", VA = "0xD5CB80")]
	[IteratorStateMachine(typeof(<Start>d__5))]
	public IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x60000EB")]
	[Address(RVA = "0xD5CC1C", Offset = "0xD5CC1C", VA = "0xD5CC1C")]
	public void RandomPos()
	{
	}

	[Token(Token = "0x60000EC")]
	[Address(RVA = "0xD5CC64", Offset = "0xD5CC64", VA = "0xD5CC64")]
	[IteratorStateMachine(typeof(<Spawn>d__7))]
	public IEnumerator Spawn()
	{
		return null;
	}

	[Token(Token = "0x60000ED")]
	[Address(RVA = "0xD5CD00", Offset = "0xD5CD00", VA = "0xD5CD00")]
	public void Update()
	{
	}

	[Token(Token = "0x60000EE")]
	[Address(RVA = "0xD5CDE0", Offset = "0xD5CDE0", VA = "0xD5CDE0")]
	public PL_RandomMovement()
	{
	}
}
[Token(Token = "0x200003C")]
public class PL_RandomRotate : MonoBehaviour
{
	[Token(Token = "0x400014F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Quaternion rotTarget;

	[Token(Token = "0x4000150")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float rotateEverySecond;

	[Token(Token = "0x60000FB")]
	[Address(RVA = "0xD5D170", Offset = "0xD5D170", VA = "0xD5D170")]
	public void Start()
	{
	}

	[Token(Token = "0x60000FC")]
	[Address(RVA = "0xD5D1F4", Offset = "0xD5D1F4", VA = "0xD5D1F4")]
	public void Update()
	{
	}

	[Token(Token = "0x60000FD")]
	[Address(RVA = "0xD5D1D4", Offset = "0xD5D1D4", VA = "0xD5D1D4")]
	public void randomRot()
	{
	}

	[Token(Token = "0x60000FE")]
	[Address(RVA = "0xD5D2B4", Offset = "0xD5D2B4", VA = "0xD5D2B4")]
	public PL_RandomRotate()
	{
	}
}
[Token(Token = "0x200003D")]
public class SBCrossfadeAnimations : MonoBehaviour
{
	[Token(Token = "0x4000151")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Animation a;

	[Token(Token = "0x4000152")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ArrayList animations;

	[Token(Token = "0x4000153")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int current;

	[Token(Token = "0x60000FF")]
	[Address(RVA = "0xD5D2C4", Offset = "0xD5D2C4", VA = "0xD5D2C4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000100")]
	[Address(RVA = "0xD5D348", Offset = "0xD5D348", VA = "0xD5D348")]
	private void CreateAnimationList()
	{
	}

	[Token(Token = "0x6000101")]
	[Address(RVA = "0xD5D6A4", Offset = "0xD5D6A4", VA = "0xD5D6A4")]
	private void CrossfadeRandom()
	{
	}

	[Token(Token = "0x6000102")]
	[Address(RVA = "0xD5D79C", Offset = "0xD5D79C", VA = "0xD5D79C")]
	public SBCrossfadeAnimations()
	{
	}
}
[Token(Token = "0x200003E")]
public class SBDemoRotate : MonoBehaviour
{
	[Token(Token = "0x4000154")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float speed;

	[Token(Token = "0x6000103")]
	[Address(RVA = "0xD5D7A4", Offset = "0xD5D7A4", VA = "0xD5D7A4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000104")]
	[Address(RVA = "0xD5D848", Offset = "0xD5D848", VA = "0xD5D848")]
	public SBDemoRotate()
	{
	}
}
[Token(Token = "0x200003F")]
public class VertexColorToonLight : MonoBehaviour
{
	[Token(Token = "0x4000155")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform lig;

	[Token(Token = "0x4000156")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Renderer ren;

	[Token(Token = "0x4000157")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float distanceMultiplier;

	[Token(Token = "0x4000158")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Material mat;

	[Token(Token = "0x6000105")]
	[Address(RVA = "0xD5D858", Offset = "0xD5D858", VA = "0xD5D858")]
	private void Start()
	{
	}

	[Token(Token = "0x6000106")]
	[Address(RVA = "0xD5D888", Offset = "0xD5D888", VA = "0xD5D888")]
	private void Update()
	{
	}

	[Token(Token = "0x6000107")]
	[Address(RVA = "0xD5DA0C", Offset = "0xD5DA0C", VA = "0xD5DA0C")]
	public VertexColorToonLight()
	{
	}
}
[Token(Token = "0x2000040")]
[ExecuteInEditMode]
public class ParticleLines : MonoBehaviour
{
	[Token(Token = "0x4000159")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SimpleLineRenderer _line;

	[Token(Token = "0x400015A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ParticleSystem _ps;

	[Token(Token = "0x400015B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool _sortParticleOnLife;

	[Token(Token = "0x400015C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool _sortParticleOnDistance;

	[Token(Token = "0x400015D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
	public bool _freezeZeroParticle;

	[Token(Token = "0x400015E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public Color startColor;

	[Token(Token = "0x400015F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public Color endColor;

	[Token(Token = "0x4000160")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public bool _gradients;

	[Token(Token = "0x4000161")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Gradient _gradientStart;

	[Token(Token = "0x4000162")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Gradient _gradientEnd;

	[Token(Token = "0x4000163")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public float _gradientSpeed;

	[Token(Token = "0x4000164")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public bool _randomGradientStart;

	[Token(Token = "0x4000165")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
	public bool _gradientLight;

	[Token(Token = "0x4000166")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Light _light;

	[Token(Token = "0x4000167")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public bool _vertexCountIntensity;

	[Token(Token = "0x4000168")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public float _vertexCountIntensityMultiplier;

	[Token(Token = "0x4000169")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public bool _flicker;

	[Token(Token = "0x400016A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public AnimationCurve _lightFlicker;

	[Token(Token = "0x400016B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public string _positionLight;

	[Token(Token = "0x400016C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public bool _tileLineMaterial;

	[Token(Token = "0x400016D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	public float _tileMultiplier;

	[Token(Token = "0x400016E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public bool _fixedTileMaterial;

	[Token(Token = "0x400016F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x99")]
	public bool _tileAnimate;

	[Token(Token = "0x4000170")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	public float _tileAnimateSpeed;

	[Token(Token = "0x4000171")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public bool animateScale;

	[Token(Token = "0x4000172")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	public float startScaleMultiplier;

	[Token(Token = "0x4000173")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public AnimationCurve startScale;

	[Token(Token = "0x4000174")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public float endScaleMultiplier;

	[Token(Token = "0x4000175")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public AnimationCurve endScale;

	[Token(Token = "0x4000176")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public float _scaleSpeed;

	[Token(Token = "0x4000177")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	public Vector3 _rotationSpeed;

	[Token(Token = "0x4000178")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public int _sortInterval;

	[Token(Token = "0x4000179")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	private int _lineVertex;

	[Token(Token = "0x400017A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private ParticleSystem.Particle[] myParticles;

	[Token(Token = "0x400017B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private ParticleSystem.Particle[] myParticlesX;

	[Token(Token = "0x400017C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private ParticleSystem.Particle[] myParticlesY;

	[Token(Token = "0x400017D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private float _gradientCounter;

	[Token(Token = "0x400017E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	private float _randomNumber;

	[Token(Token = "0x400017F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private float _saveLightIntensity;

	[Token(Token = "0x4000180")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
	private int _randomInt;

	[Token(Token = "0x4000181")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public int _cutEndSegments;

	[Token(Token = "0x4000182")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	public int _lineResolution;

	[Token(Token = "0x4000183")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public int _currentResolution;

	[Token(Token = "0x4000184")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
	public int sorted;

	[Token(Token = "0x4000185")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public Material lineMaterial;

	[Token(Token = "0x4000186")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public MeshRenderer cacheMeshRenderer;

	[Token(Token = "0x6000108")]
	[Address(RVA = "0xD5DA1C", Offset = "0xD5DA1C", VA = "0xD5DA1C")]
	public void Start()
	{
	}

	[Token(Token = "0x6000109")]
	[Address(RVA = "0xD5DD00", Offset = "0xD5DD00", VA = "0xD5DD00")]
	public int GetFrameCount()
	{
		return default(int);
	}

	[Token(Token = "0x600010A")]
	[Address(RVA = "0xD5DD20", Offset = "0xD5DD20", VA = "0xD5DD20")]
	public int Compare(float first, float second)
	{
		return default(int);
	}

	[Token(Token = "0x600010B")]
	[Address(RVA = "0xD5DD3C", Offset = "0xD5DD3C", VA = "0xD5DD3C")]
	public void SetLine()
	{
	}

	[Token(Token = "0x600010C")]
	[Address(RVA = "0xD5DEA0", Offset = "0xD5DEA0", VA = "0xD5DEA0")]
	public void SortLifetime()
	{
	}

	[Token(Token = "0x600010D")]
	[Address(RVA = "0xD5E0E8", Offset = "0xD5E0E8", VA = "0xD5E0E8")]
	public void SortDistance()
	{
	}

	[Token(Token = "0x600010E")]
	[Address(RVA = "0xD5DF60", Offset = "0xD5DF60", VA = "0xD5DF60")]
	public void CreateLine()
	{
	}

	[Token(Token = "0x600010F")]
	[Address(RVA = "0xD5E1A8", Offset = "0xD5E1A8", VA = "0xD5E1A8")]
	public void LerpLine()
	{
	}

	[Token(Token = "0x6000110")]
	[Address(RVA = "0xD5E2F0", Offset = "0xD5E2F0", VA = "0xD5E2F0")]
	public void SetLineResolution()
	{
	}

	[Token(Token = "0x6000111")]
	[Address(RVA = "0xD5E870", Offset = "0xD5E870", VA = "0xD5E870")]
	public void LinePos()
	{
	}

	[Token(Token = "0x6000112")]
	[Address(RVA = "0xD5EA74", Offset = "0xD5EA74", VA = "0xD5EA74")]
	public void Update()
	{
	}

	[Token(Token = "0x6000113")]
	[Address(RVA = "0xD5F304", Offset = "0xD5F304", VA = "0xD5F304")]
	public ParticleLines()
	{
	}
}
[Token(Token = "0x2000041")]
[ExecuteInEditMode]
[RequireComponent(typeof(MeshFilter), typeof(MeshRenderer))]
public class SimpleLineRenderer : MonoBehaviour
{
	[Token(Token = "0x4000187")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Mesh mesh;

	[Token(Token = "0x4000188")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int[] triangles;

	[Token(Token = "0x4000189")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector2[] uvs;

	[Token(Token = "0x400018A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public List<Vertex> points;

	[Token(Token = "0x400018B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int currentVertexPointCount;

	[Token(Token = "0x400018C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[HideInInspector]
	public Transform cacheTransform;

	[Token(Token = "0x400018D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public LayerMask layerMask;

	[Token(Token = "0x400018E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public bool hardEdge;

	[Token(Token = "0x400018F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
	public bool localSpace;

	[Token(Token = "0x6000116")]
	[Address(RVA = "0xD5F5A0", Offset = "0xD5F5A0", VA = "0xD5F5A0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000117")]
	[Address(RVA = "0xD5F6A4", Offset = "0xD5F6A4", VA = "0xD5F6A4")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000118")]
	[Address(RVA = "0xD60144", Offset = "0xD60144", VA = "0xD60144")]
	private void EditorInit()
	{
	}

	[Token(Token = "0x6000119")]
	[Address(RVA = "0xD5DE00", Offset = "0xD5DE00", VA = "0xD5DE00")]
	public void SetPosition(int index, Vector3 position)
	{
	}

	[Token(Token = "0x600011A")]
	[Address(RVA = "0xD60234", Offset = "0xD60234", VA = "0xD60234")]
	public void SetWidth(int index, float width)
	{
	}

	[Token(Token = "0x600011B")]
	[Address(RVA = "0xD5F224", Offset = "0xD5F224", VA = "0xD5F224")]
	public void SetWidth(float startWidth, float endWidth)
	{
	}

	[Token(Token = "0x600011C")]
	[Address(RVA = "0xD5F100", Offset = "0xD5F100", VA = "0xD5F100")]
	public void SetColor(Color startColor, Color endColor)
	{
	}

	[Token(Token = "0x600011D")]
	[Address(RVA = "0xD602C0", Offset = "0xD602C0", VA = "0xD602C0")]
	public void SetColor(int index, Color color)
	{
	}

	[Token(Token = "0x600011E")]
	[Address(RVA = "0xD5F79C", Offset = "0xD5F79C", VA = "0xD5F79C")]
	public void UpdateLineMesh(Camera targetCamera)
	{
	}

	[Token(Token = "0x600011F")]
	[Address(RVA = "0xD5E3A8", Offset = "0xD5E3A8", VA = "0xD5E3A8")]
	public void SetVertexCount(int vertexPointCount)
	{
	}

	[Token(Token = "0x6000120")]
	[Address(RVA = "0xD603D4", Offset = "0xD603D4", VA = "0xD603D4")]
	public SimpleLineRenderer()
	{
	}
}
[Token(Token = "0x2000042")]
public class Vertex
{
	[Token(Token = "0x4000190")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Vector3 position;

	[Token(Token = "0x4000191")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Color color;

	[Token(Token = "0x4000192")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float width;

	[Token(Token = "0x6000121")]
	[Address(RVA = "0xD60364", Offset = "0xD60364", VA = "0xD60364")]
	public Vertex()
	{
	}
}
[Token(Token = "0x2000043")]
public class RotateSimple : MonoBehaviour
{
	[Token(Token = "0x4000193")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool randomizeAxisOnStart;

	[Token(Token = "0x4000194")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Vector3 axis;

	[Token(Token = "0x4000195")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float speed;

	[Token(Token = "0x6000122")]
	[Address(RVA = "0xD603FC", Offset = "0xD603FC", VA = "0xD603FC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000123")]
	[Address(RVA = "0xD6040C", Offset = "0xD6040C", VA = "0xD6040C")]
	[ContextMenu("Randomize")]
	public void RandomizeAxis()
	{
	}

	[Token(Token = "0x6000124")]
	[Address(RVA = "0xD60534", Offset = "0xD60534", VA = "0xD60534")]
	private void Update()
	{
	}

	[Token(Token = "0x6000125")]
	[Address(RVA = "0xD6064C", Offset = "0xD6064C", VA = "0xD6064C")]
	public RotateSimple()
	{
	}
}
[Token(Token = "0x2000044")]
[DisallowMultipleComponent]
public class Outline : MonoBehaviour
{
	[Token(Token = "0x2000045")]
	public enum Mode
	{
		[Token(Token = "0x40001A3")]
		OutlineAll,
		[Token(Token = "0x40001A4")]
		OutlineVisible,
		[Token(Token = "0x40001A5")]
		OutlineHidden,
		[Token(Token = "0x40001A6")]
		OutlineAndSilhouette,
		[Token(Token = "0x40001A7")]
		SilhouetteOnly
	}

	[Serializable]
	[Token(Token = "0x2000046")]
	private class ListVector3
	{
		[Token(Token = "0x40001A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<Vector3> data;

		[Token(Token = "0x6000138")]
		[Address(RVA = "0xD61C88", Offset = "0xD61C88", VA = "0xD61C88")]
		public ListVector3()
		{
		}
	}

	[Token(Token = "0x4000196")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static HashSet<Mesh> registeredMeshes;

	[Token(Token = "0x4000197")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool toggleOutlineAvailability;

	[Token(Token = "0x4000198")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private Mode outlineMode;

	[Token(Token = "0x4000199")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Color outlineColor;

	[Token(Token = "0x400019A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	[Range(0f, 10f)]
	private float outlineWidth;

	[Token(Token = "0x400019B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[Header("Optional")]
	[SerializeField]
	[Tooltip("Precompute enabled: Per-vertex calculations are performed in the editor and serialized with the object. Precompute disabled: Per-vertex calculations are performed at runtime in Awake(). This may cause a pause for large meshes.")]
	private bool precomputeOutline;

	[Token(Token = "0x400019C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	[HideInInspector]
	private List<Mesh> bakeKeys;

	[Token(Token = "0x400019D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	[HideInInspector]
	private List<ListVector3> bakeValues;

	[Token(Token = "0x400019E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Renderer[] renderers;

	[Token(Token = "0x400019F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Material outlineMaskMaterial;

	[Token(Token = "0x40001A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Material outlineFillMaterial;

	[Token(Token = "0x40001A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool needsUpdate;

	[Token(Token = "0x17000015")]
	public Mode OutlineMode
	{
		[Token(Token = "0x6000126")]
		[Address(RVA = "0xD6065C", Offset = "0xD6065C", VA = "0xD6065C")]
		get
		{
			return default(Mode);
		}
		[Token(Token = "0x6000127")]
		[Address(RVA = "0xD60664", Offset = "0xD60664", VA = "0xD60664")]
		set
		{
		}
	}

	[Token(Token = "0x17000016")]
	public Color OutlineColor
	{
		[Token(Token = "0x6000128")]
		[Address(RVA = "0xD60674", Offset = "0xD60674", VA = "0xD60674")]
		get
		{
			return default(Color);
		}
		[Token(Token = "0x6000129")]
		[Address(RVA = "0xD60680", Offset = "0xD60680", VA = "0xD60680")]
		set
		{
		}
	}

	[Token(Token = "0x17000017")]
	public float OutlineWidth
	{
		[Token(Token = "0x600012A")]
		[Address(RVA = "0xD60694", Offset = "0xD60694", VA = "0xD60694")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600012B")]
		[Address(RVA = "0xD6069C", Offset = "0xD6069C", VA = "0xD6069C")]
		set
		{
		}
	}

	[Token(Token = "0x600012C")]
	[Address(RVA = "0xD606AC", Offset = "0xD606AC", VA = "0xD606AC")]
	private void Awake()
	{
	}

	[Token(Token = "0x600012D")]
	[Address(RVA = "0xD60844", Offset = "0xD60844", VA = "0xD60844")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600012E")]
	[Address(RVA = "0xD60A00", Offset = "0xD60A00", VA = "0xD60A00")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x600012F")]
	[Address(RVA = "0xD60D90", Offset = "0xD60D90", VA = "0xD60D90")]
	private void Update()
	{
	}

	[Token(Token = "0x6000130")]
	[Address(RVA = "0xD60F50", Offset = "0xD60F50", VA = "0xD60F50")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000131")]
	[Address(RVA = "0xD61068", Offset = "0xD61068", VA = "0xD61068")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000132")]
	[Address(RVA = "0xD60B18", Offset = "0xD60B18", VA = "0xD60B18")]
	private void Bake()
	{
	}

	[Token(Token = "0x6000133")]
	[Address(RVA = "0xD61C90", Offset = "0xD61C90", VA = "0xD61C90")]
	private void LoadSmoothNormals()
	{
	}

	[Token(Token = "0x6000134")]
	[Address(RVA = "0xD610D0", Offset = "0xD610D0", VA = "0xD610D0")]
	private List<Vector3> SmoothNormals(Mesh mesh)
	{
		return null;
	}

	[Token(Token = "0x6000135")]
	[Address(RVA = "0xD60DA4", Offset = "0xD60DA4", VA = "0xD60DA4")]
	private void UpdateMaterialProperties()
	{
	}

	[Token(Token = "0x6000136")]
	[Address(RVA = "0xD62050", Offset = "0xD62050", VA = "0xD62050")]
	public Outline()
	{
	}
}
[Token(Token = "0x2000048")]
public abstract class SerializableDictionaryBase<TKey, TValue, TValueStorage> : Dictionary<TKey, TValue>, ISerializationCallbackReceiver
{
	[Token(Token = "0x40001AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[SerializeField]
	private TKey[] m_keys;

	[Token(Token = "0x40001AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[SerializeField]
	private TValueStorage[] m_values;

	[Token(Token = "0x600013D")]
	public SerializableDictionaryBase()
	{
	}

	[Token(Token = "0x600013E")]
	public SerializableDictionaryBase(IDictionary<TKey, TValue> dict)
	{
	}

	[Token(Token = "0x600013F")]
	protected SerializableDictionaryBase(SerializationInfo info, StreamingContext context)
	{
	}

	[Token(Token = "0x6000140")]
	protected abstract void SetValue(TValueStorage[] storage, int i, TValue value);

	[Token(Token = "0x6000141")]
	protected abstract TValue GetValue(TValueStorage[] storage, int i);

	[Token(Token = "0x6000142")]
	public void CopyFrom(IDictionary<TKey, TValue> dict)
	{
	}

	[Token(Token = "0x6000143")]
	public void OnAfterDeserialize()
	{
	}

	[Token(Token = "0x6000144")]
	public void OnBeforeSerialize()
	{
	}
}
[Token(Token = "0x2000049")]
public class SerializableDictionary<TKey, TValue> : SerializableDictionaryBase<TKey, TValue, TValue>
{
	[Token(Token = "0x6000145")]
	public SerializableDictionary()
	{
	}

	[Token(Token = "0x6000146")]
	public SerializableDictionary(IDictionary<TKey, TValue> dict)
	{
	}

	[Token(Token = "0x6000147")]
	protected SerializableDictionary(SerializationInfo info, StreamingContext context)
	{
	}

	[Token(Token = "0x6000148")]
	protected override TValue GetValue(TValue[] storage, int i)
	{
		return (TValue)null;
	}

	[Token(Token = "0x6000149")]
	protected override void SetValue(TValue[] storage, int i, TValue value)
	{
	}
}
[Token(Token = "0x200004A")]
public static class SerializableDictionary
{
	[Token(Token = "0x200004B")]
	public class Storage<T>
	{
		[Token(Token = "0x40001AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T data;

		[Token(Token = "0x600014A")]
		public Storage()
		{
		}
	}
}
[Token(Token = "0x200004C")]
public class SerializableDictionary<TKey, TValue, TValueStorage> : SerializableDictionaryBase<TKey, TValue, TValueStorage> where TValueStorage : SerializableDictionary.Storage<TValue>, new()
{
	[Token(Token = "0x600014B")]
	public SerializableDictionary()
	{
	}

	[Token(Token = "0x600014C")]
	public SerializableDictionary(IDictionary<TKey, TValue> dict)
	{
	}

	[Token(Token = "0x600014D")]
	protected SerializableDictionary(SerializationInfo info, StreamingContext context)
	{
	}

	[Token(Token = "0x600014E")]
	protected override TValue GetValue(TValueStorage[] storage, int i)
	{
		return (TValue)null;
	}

	[Token(Token = "0x600014F")]
	protected override void SetValue(TValueStorage[] storage, int i, TValue value)
	{
	}
}
[Token(Token = "0x200004D")]
[ExecuteInEditMode]
public class SkyboxBlender : MonoBehaviour
{
	[Token(Token = "0x200004E")]
	[SerializeField]
	public enum BlendMode
	{
		[Token(Token = "0x40001C3")]
		Linear,
		[Token(Token = "0x40001C4")]
		Smoothstep,
		[Token(Token = "0x40001C5")]
		Maximum,
		[Token(Token = "0x40001C6")]
		Add,
		[Token(Token = "0x40001C7")]
		Substract,
		[Token(Token = "0x40001C8")]
		Multiply
	}

	[Token(Token = "0x200004F")]
	[SerializeField]
	public enum ProbeResolution
	{
		[Token(Token = "0x40001CA")]
		_16,
		[Token(Token = "0x40001CB")]
		_32,
		[Token(Token = "0x40001CC")]
		_64,
		[Token(Token = "0x40001CD")]
		_128,
		[Token(Token = "0x40001CE")]
		_256,
		[Token(Token = "0x40001CF")]
		_512,
		[Token(Token = "0x40001D0")]
		_1024,
		[Token(Token = "0x40001D1")]
		_2048
	}

	[Token(Token = "0x40001AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	public Material skyBox1;

	[Token(Token = "0x40001B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	public Material skyBox2;

	[Token(Token = "0x40001B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	public Material blendedSkybox;

	[Token(Token = "0x40001B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Range(0f, 8f)]
	[SerializeField]
	public float exposure;

	[Token(Token = "0x40001B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[Range(0f, 360f)]
	[SerializeField]
	public float rotation;

	[Token(Token = "0x40001B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	public Color tint;

	[Token(Token = "0x40001B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	[Range(0f, 1f)]
	public float invertColors;

	[Token(Token = "0x40001B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[SerializeField]
	public BlendMode blendMode;

	[Token(Token = "0x40001B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Range(0f, 1f)]
	[SerializeField]
	public float blend;

	[Token(Token = "0x40001B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[SerializeField]
	public bool bindOnStart;

	[Token(Token = "0x40001B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
	[SerializeField]
	public bool updateLightingOnStart;

	[Token(Token = "0x40001BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x56")]
	[SerializeField]
	public bool updateLightingEveryFrame;

	[Token(Token = "0x40001BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x57")]
	[SerializeField]
	public bool updateReflectionsOnStart;

	[Token(Token = "0x40001BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	public bool updateReflectionsEveryFrame;

	[Token(Token = "0x40001BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[SerializeField]
	public ProbeResolution reflectionResolution;

	[Token(Token = "0x40001BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private ReflectionProbe probeComponent;

	[Token(Token = "0x40001BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private GameObject probeGameObject;

	[Token(Token = "0x40001C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Cubemap blendedCubemap;

	[Token(Token = "0x40001C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private int renderId;

	[Token(Token = "0x6000150")]
	[Address(RVA = "0xD62330", Offset = "0xD62330", VA = "0xD62330")]
	private void Start()
	{
	}

	[Token(Token = "0x6000151")]
	[Address(RVA = "0xD62A9C", Offset = "0xD62A9C", VA = "0xD62A9C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000152")]
	[Address(RVA = "0xD62AD4", Offset = "0xD62AD4", VA = "0xD62AD4")]
	private int GetProbeResolution(ProbeResolution probeResolution)
	{
		return default(int);
	}

	[Token(Token = "0x6000153")]
	[Address(RVA = "0xD62AF4", Offset = "0xD62AF4", VA = "0xD62AF4")]
	private void CreateReflectionProbe()
	{
	}

	[Token(Token = "0x6000154")]
	[Address(RVA = "0xD62CEC", Offset = "0xD62CEC", VA = "0xD62CEC")]
	public void UpdateReflectionProbe()
	{
	}

	[Token(Token = "0x6000155")]
	[Address(RVA = "0xD628C4", Offset = "0xD628C4", VA = "0xD628C4")]
	public void UpdateLighting()
	{
	}

	[Token(Token = "0x6000156")]
	[Address(RVA = "0xD628CC", Offset = "0xD628CC", VA = "0xD628CC")]
	public void UpdateReflections()
	{
	}

	[Token(Token = "0x6000157")]
	[Address(RVA = "0xD62E78", Offset = "0xD62E78", VA = "0xD62E78")]
	private int GetBlendModeIndex(BlendMode blendMode)
	{
		return default(int);
	}

	[Token(Token = "0x6000158")]
	[Address(RVA = "0xD6237C", Offset = "0xD6237C", VA = "0xD6237C")]
	public void BindTextures()
	{
	}

	[Token(Token = "0x6000159")]
	[Address(RVA = "0xD62768", Offset = "0xD62768", VA = "0xD62768")]
	private void UpdateBlendedMaterialParameters()
	{
	}

	[Token(Token = "0x600015A")]
	[Address(RVA = "0xD62E9C", Offset = "0xD62E9C", VA = "0xD62E9C")]
	public SkyboxBlender()
	{
	}
}
[Token(Token = "0x2000050")]
public class DebugUIBuilder : MonoBehaviour
{
	[Token(Token = "0x2000051")]
	public delegate void OnClick();

	[Token(Token = "0x2000052")]
	public delegate void OnToggleValueChange(Toggle t);

	[Token(Token = "0x2000053")]
	public delegate void OnSlider(float f);

	[Token(Token = "0x2000054")]
	public delegate bool ActiveUpdate();

	[Token(Token = "0x40001D2")]
	public const int DEBUG_PANE_CENTER = 0;

	[Token(Token = "0x40001D3")]
	public const int DEBUG_PANE_RIGHT = 1;

	[Token(Token = "0x40001D4")]
	public const int DEBUG_PANE_LEFT = 2;

	[Token(Token = "0x40001D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private RectTransform buttonPrefab;

	[Token(Token = "0x40001D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private RectTransform labelPrefab;

	[Token(Token = "0x40001D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private RectTransform sliderPrefab;

	[Token(Token = "0x40001D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private RectTransform dividerPrefab;

	[Token(Token = "0x40001D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private RectTransform togglePrefab;

	[Token(Token = "0x40001DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private RectTransform radioPrefab;

	[Token(Token = "0x40001DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private RectTransform textPrefab;

	[Token(Token = "0x40001DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private GameObject uiHelpersToInstantiate;

	[Token(Token = "0x40001DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private Transform[] targetContentPanels;

	[Token(Token = "0x40001DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool[] reEnable;

	[Token(Token = "0x40001DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private List<GameObject> toEnable;

	[Token(Token = "0x40001E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private List<GameObject> toDisable;

	[Token(Token = "0x40001E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static DebugUIBuilder instance;

	[Token(Token = "0x40001E2")]
	private const float elementSpacing = 16f;

	[Token(Token = "0x40001E3")]
	public const float marginH = 16f;

	[Token(Token = "0x40001E4")]
	public const float marginV = 16f;

	[Token(Token = "0x40001E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Vector2[] insertPositions;

	[Token(Token = "0x40001E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private List<RectTransform>[] insertedElements;

	[Token(Token = "0x40001E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Vector3 menuOffset;

	[Token(Token = "0x40001E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private OVRCameraRig rig;

	[Token(Token = "0x40001E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private Dictionary<string, ToggleGroup> radioGroups;

	[Token(Token = "0x40001EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private LaserPointer lp;

	[Token(Token = "0x40001EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private LineRenderer lr;

	[Token(Token = "0x40001EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public LaserPointer.LaserBeamBehavior laserBeamBehavior;

	[Token(Token = "0x40001ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	public bool isHorizontal;

	[Token(Token = "0x600015B")]
	[Address(RVA = "0xD62ED0", Offset = "0xD62ED0", VA = "0xD62ED0")]
	public void Awake()
	{
	}

	[Token(Token = "0x600015C")]
	[Address(RVA = "0xD63434", Offset = "0xD63434", VA = "0xD63434")]
	public void Show()
	{
	}

	[Token(Token = "0x600015D")]
	[Address(RVA = "0xD639BC", Offset = "0xD639BC", VA = "0xD639BC")]
	public void Hide()
	{
	}

	[Token(Token = "0x600015E")]
	[Address(RVA = "0xD637A0", Offset = "0xD637A0", VA = "0xD637A0")]
	private void Relayout()
	{
	}

	[Token(Token = "0x600015F")]
	[Address(RVA = "0xD63B38", Offset = "0xD63B38", VA = "0xD63B38")]
	private void AddRect(RectTransform r, int targetCanvas)
	{
	}

	[Token(Token = "0x6000160")]
	[Address(RVA = "0xD63EB4", Offset = "0xD63EB4", VA = "0xD63EB4")]
	public RectTransform AddButton(string label, OnClick handler, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x6000161")]
	[Address(RVA = "0xD64140", Offset = "0xD64140", VA = "0xD64140")]
	public RectTransform AddLabel(string label, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x6000162")]
	[Address(RVA = "0xD64238", Offset = "0xD64238", VA = "0xD64238")]
	public RectTransform AddSlider(string label, float min, float max, OnSlider onValueChanged, bool wholeNumbersOnly = false, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x6000163")]
	[Address(RVA = "0xD64408", Offset = "0xD64408", VA = "0xD64408")]
	public RectTransform AddDivider(int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x6000164")]
	[Address(RVA = "0xD644A0", Offset = "0xD644A0", VA = "0xD644A0")]
	public RectTransform AddToggle(string label, OnToggleValueChange onValueChanged, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x6000165")]
	[Address(RVA = "0xD6467C", Offset = "0xD6467C", VA = "0xD6467C")]
	public RectTransform AddToggle(string label, OnToggleValueChange onValueChanged, bool defaultValue, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x6000166")]
	[Address(RVA = "0xD64878", Offset = "0xD64878", VA = "0xD64878")]
	public RectTransform AddRadio(string label, string group, OnToggleValueChange handler, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x6000167")]
	[Address(RVA = "0xD64B70", Offset = "0xD64B70", VA = "0xD64B70")]
	public RectTransform AddTextField(string label, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x6000168")]
	[Address(RVA = "0xD64C60", Offset = "0xD64C60", VA = "0xD64C60")]
	public void ToggleLaserPointer(bool isOn)
	{
	}

	[Token(Token = "0x6000169")]
	[Address(RVA = "0xD64CF4", Offset = "0xD64CF4", VA = "0xD64CF4")]
	public DebugUIBuilder()
	{
	}
}
[Token(Token = "0x200005A")]
public class HandedInputSelector : MonoBehaviour
{
	[Token(Token = "0x40001F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private OVRCameraRig m_CameraRig;

	[Token(Token = "0x40001F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private OVRInputModule m_InputModule;

	[Token(Token = "0x6000184")]
	[Address(RVA = "0xD65364", Offset = "0xD65364", VA = "0xD65364")]
	private void Start()
	{
	}

	[Token(Token = "0x6000185")]
	[Address(RVA = "0xD65408", Offset = "0xD65408", VA = "0xD65408")]
	private void Update()
	{
	}

	[Token(Token = "0x6000186")]
	[Address(RVA = "0xD654A4", Offset = "0xD654A4", VA = "0xD654A4")]
	private void SetActiveController(OVRInput.Controller c)
	{
	}

	[Token(Token = "0x6000187")]
	[Address(RVA = "0xD654DC", Offset = "0xD654DC", VA = "0xD654DC")]
	public HandedInputSelector()
	{
	}
}
[Token(Token = "0x200005B")]
public class LaserPointer : OVRCursor
{
	[Token(Token = "0x200005C")]
	public enum LaserBeamBehavior
	{
		[Token(Token = "0x4000202")]
		On,
		[Token(Token = "0x4000203")]
		Off,
		[Token(Token = "0x4000204")]
		OnWhenHitTarget
	}

	[Token(Token = "0x40001F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject cursorVisual;

	[Token(Token = "0x40001F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float maxLength;

	[Token(Token = "0x40001FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private LaserBeamBehavior _laserBeamBehavior;

	[Token(Token = "0x40001FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool m_restoreOnInputAcquired;

	[Token(Token = "0x40001FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Vector3 _startPoint;

	[Token(Token = "0x40001FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector3 _forward;

	[Token(Token = "0x40001FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private Vector3 _endPoint;

	[Token(Token = "0x40001FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool _hitTarget;

	[Token(Token = "0x4000200")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private LineRenderer lineRenderer;

	[Token(Token = "0x17000018")]
	public LaserBeamBehavior laserBeamBehavior
	{
		[Token(Token = "0x6000189")]
		[Address(RVA = "0xD654E4", Offset = "0xD654E4", VA = "0xD654E4")]
		get
		{
			return default(LaserBeamBehavior);
		}
		[Token(Token = "0x6000188")]
		[Address(RVA = "0xD633F4", Offset = "0xD633F4", VA = "0xD633F4")]
		set
		{
		}
	}

	[Token(Token = "0x600018A")]
	[Address(RVA = "0xD654EC", Offset = "0xD654EC", VA = "0xD654EC")]
	private void Awake()
	{
	}

	[Token(Token = "0x600018B")]
	[Address(RVA = "0xD65544", Offset = "0xD65544", VA = "0xD65544")]
	private void Start()
	{
	}

	[Token(Token = "0x600018C")]
	[Address(RVA = "0xD6567C", Offset = "0xD6567C", VA = "0xD6567C", Slot = "5")]
	public override void SetCursorStartDest(Vector3 start, Vector3 dest, Vector3 normal)
	{
	}

	[Token(Token = "0x600018D")]
	[Address(RVA = "0xD65698", Offset = "0xD65698", VA = "0xD65698", Slot = "4")]
	public override void SetCursorRay(Transform t)
	{
	}

	[Token(Token = "0x600018E")]
	[Address(RVA = "0xD656E8", Offset = "0xD656E8", VA = "0xD656E8")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x600018F")]
	[Address(RVA = "0xD65888", Offset = "0xD65888", VA = "0xD65888")]
	private void UpdateLaserBeam(Vector3 start, Vector3 end)
	{
	}

	[Token(Token = "0x6000190")]
	[Address(RVA = "0xD65998", Offset = "0xD65998", VA = "0xD65998")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000191")]
	[Address(RVA = "0xD65A1C", Offset = "0xD65A1C", VA = "0xD65A1C")]
	public void OnInputFocusLost()
	{
	}

	[Token(Token = "0x6000192")]
	[Address(RVA = "0xD65ADC", Offset = "0xD65ADC", VA = "0xD65ADC")]
	public void OnInputFocusAcquired()
	{
	}

	[Token(Token = "0x6000193")]
	[Address(RVA = "0xD65B84", Offset = "0xD65B84", VA = "0xD65B84")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000194")]
	[Address(RVA = "0xD65C70", Offset = "0xD65C70", VA = "0xD65C70")]
	public LaserPointer()
	{
	}
}
[Token(Token = "0x200005D")]
[RequireComponent(typeof(CharacterController))]
[RequireComponent(typeof(OVRPlayerController))]
public class CharacterCameraConstraint : MonoBehaviour
{
	[Token(Token = "0x4000205")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("This should be a reference to the OVRCameraRig that is usually a child of the PlayerController.")]
	public OVRCameraRig CameraRig;

	[Token(Token = "0x4000206")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("This value represents the character capsule's distance from the HMD's position. When the player is moving in legal space without collisions, this will be zero.")]
	public float CurrentDistance;

	[Token(Token = "0x4000207")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Tooltip("When true, the camera will fade to black when the HMD is moved into collidable geometry.")]
	public bool EnableFadeout;

	[Token(Token = "0x4000208")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
	[Tooltip("When true, the camera will be prevented from passing through collidable geometry. This is usually considered uncomfortable for users.")]
	public bool EnableCollision;

	[Token(Token = "0x4000209")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
	[Tooltip("When true, adjust the character controller height on the fly to match the HMD's offset from the ground which will allow ducking to go through smaller spaces.")]
	public bool DynamicHeight;

	[Token(Token = "0x400020A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("This should be set to 1 to make the screen completely fade out when the HMD is inside world geometry. Lesser values can be useful for testing.")]
	public float MaxFade;

	[Token(Token = "0x400020B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Tooltip("This value is used to control how far from the character capsule the HMD must be before the fade to black begins.")]
	public float FadeMinDistance;

	[Token(Token = "0x400020C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("This value is used to control how far from the character capsule the HMD must be before the fade to black is complete. This should be tuned so that it is fully faded in before the camera will clip geometry that the player should not be able see beyond.")]
	public float FadeMaxDistance;

	[Token(Token = "0x400020D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private readonly Action _cameraUpdateAction;

	[Token(Token = "0x400020E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private readonly Action _preCharacterMovementAction;

	[Token(Token = "0x400020F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private CharacterController _character;

	[Token(Token = "0x4000210")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private OVRPlayerController _playerController;

	[Token(Token = "0x6000195")]
	[Address(RVA = "0xD65C80", Offset = "0xD65C80", VA = "0xD65C80")]
	private CharacterCameraConstraint()
	{
	}

	[Token(Token = "0x6000196")]
	[Address(RVA = "0xD65D6C", Offset = "0xD65D6C", VA = "0xD65D6C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000197")]
	[Address(RVA = "0xD65DFC", Offset = "0xD65DFC", VA = "0xD65DFC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000198")]
	[Address(RVA = "0xD65E34", Offset = "0xD65E34", VA = "0xD65E34")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000199")]
	[Address(RVA = "0xD65E6C", Offset = "0xD65E6C", VA = "0xD65E6C")]
	private void CameraUpdate()
	{
	}

	[Token(Token = "0x600019A")]
	[Address(RVA = "0xD66150", Offset = "0xD66150", VA = "0xD66150")]
	private void PreCharacterMovement()
	{
	}
}
[Token(Token = "0x200005E")]
public class LocomotionController : MonoBehaviour
{
	[Token(Token = "0x4000211")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVRCameraRig CameraRig;

	[Token(Token = "0x4000212")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public CharacterController CharacterController;

	[Token(Token = "0x4000213")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public OVRPlayerController PlayerController;

	[Token(Token = "0x600019B")]
	[Address(RVA = "0xD66544", Offset = "0xD66544", VA = "0xD66544")]
	private void Start()
	{
	}

	[Token(Token = "0x600019C")]
	[Address(RVA = "0xD666B4", Offset = "0xD666B4", VA = "0xD666B4")]
	public LocomotionController()
	{
	}
}
[Token(Token = "0x200005F")]
public class LocomotionTeleport : MonoBehaviour
{
	[Token(Token = "0x2000060")]
	public enum States
	{
		[Token(Token = "0x4000237")]
		Ready,
		[Token(Token = "0x4000238")]
		Aim,
		[Token(Token = "0x4000239")]
		CancelAim,
		[Token(Token = "0x400023A")]
		PreTeleport,
		[Token(Token = "0x400023B")]
		CancelTeleport,
		[Token(Token = "0x400023C")]
		Teleporting,
		[Token(Token = "0x400023D")]
		PostTeleport
	}

	[Token(Token = "0x2000061")]
	public enum TeleportIntentions
	{
		[Token(Token = "0x400023F")]
		None,
		[Token(Token = "0x4000240")]
		Aim,
		[Token(Token = "0x4000241")]
		PreTeleport,
		[Token(Token = "0x4000242")]
		Teleport
	}

	[Token(Token = "0x2000062")]
	public enum AimCollisionTypes
	{
		[Token(Token = "0x4000244")]
		Point,
		[Token(Token = "0x4000245")]
		Sphere,
		[Token(Token = "0x4000246")]
		Capsule
	}

	[Token(Token = "0x2000063")]
	public class AimData
	{
		[Token(Token = "0x4000247")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public RaycastHit TargetHitInfo;

		[Token(Token = "0x4000248")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public bool TargetValid;

		[Token(Token = "0x4000249")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector3? Destination;

		[Token(Token = "0x400024A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float Radius;

		[Token(Token = "0x1700001C")]
		public List<Vector3> Points
		{
			[Token(Token = "0x60001D2")]
			[Address(RVA = "0xD68414", Offset = "0xD68414", VA = "0xD68414")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60001D3")]
			[Address(RVA = "0xD6841C", Offset = "0xD6841C", VA = "0xD6841C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60001D1")]
		[Address(RVA = "0xD6838C", Offset = "0xD6838C", VA = "0xD6838C")]
		public AimData()
		{
		}

		[Token(Token = "0x60001D4")]
		[Address(RVA = "0xD68424", Offset = "0xD68424", VA = "0xD68424")]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x2000064")]
	[CompilerGenerated]
	private sealed class <ReadyStateCoroutine>d__52 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400024C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400024D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400024E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x1700001D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60001D8")]
			[Address(RVA = "0xD6858C", Offset = "0xD6858C", VA = "0xD6858C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700001E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60001DA")]
			[Address(RVA = "0xD685D4", Offset = "0xD685D4", VA = "0xD685D4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001D5")]
		[Address(RVA = "0xD670C0", Offset = "0xD670C0", VA = "0xD670C0")]
		[DebuggerHidden]
		public <ReadyStateCoroutine>d__52(int <>1__state)
		{
		}

		[Token(Token = "0x60001D6")]
		[Address(RVA = "0xD6847C", Offset = "0xD6847C", VA = "0xD6847C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001D7")]
		[Address(RVA = "0xD68480", Offset = "0xD68480", VA = "0xD68480", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001D9")]
		[Address(RVA = "0xD68594", Offset = "0xD68594", VA = "0xD68594", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000065")]
	[CompilerGenerated]
	private sealed class <AimStateCoroutine>d__64 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400024F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000250")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000251")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x1700001F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60001DE")]
			[Address(RVA = "0xD68738", Offset = "0xD68738", VA = "0xD68738", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000020")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60001E0")]
			[Address(RVA = "0xD68780", Offset = "0xD68780", VA = "0xD68780", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001DB")]
		[Address(RVA = "0xD67548", Offset = "0xD67548", VA = "0xD67548")]
		[DebuggerHidden]
		public <AimStateCoroutine>d__64(int <>1__state)
		{
		}

		[Token(Token = "0x60001DC")]
		[Address(RVA = "0xD685DC", Offset = "0xD685DC", VA = "0xD685DC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001DD")]
		[Address(RVA = "0xD685E0", Offset = "0xD685E0", VA = "0xD685E0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001DF")]
		[Address(RVA = "0xD68740", Offset = "0xD68740", VA = "0xD68740", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000066")]
	[CompilerGenerated]
	private sealed class <CancelAimStateCoroutine>d__68 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000252")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000253")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000254")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x17000021")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60001E4")]
			[Address(RVA = "0xD68838", Offset = "0xD68838", VA = "0xD68838", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000022")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60001E6")]
			[Address(RVA = "0xD68880", Offset = "0xD68880", VA = "0xD68880", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001E1")]
		[Address(RVA = "0xD6771C", Offset = "0xD6771C", VA = "0xD6771C")]
		[DebuggerHidden]
		public <CancelAimStateCoroutine>d__68(int <>1__state)
		{
		}

		[Token(Token = "0x60001E2")]
		[Address(RVA = "0xD68788", Offset = "0xD68788", VA = "0xD68788", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001E3")]
		[Address(RVA = "0xD6878C", Offset = "0xD6878C", VA = "0xD6878C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001E5")]
		[Address(RVA = "0xD68840", Offset = "0xD68840", VA = "0xD68840", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000067")]
	[CompilerGenerated]
	private sealed class <PreTeleportStateCoroutine>d__72 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000255")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000256")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000257")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x17000023")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60001EA")]
			[Address(RVA = "0xD68970", Offset = "0xD68970", VA = "0xD68970", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000024")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60001EC")]
			[Address(RVA = "0xD689B8", Offset = "0xD689B8", VA = "0xD689B8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001E7")]
		[Address(RVA = "0xD678F0", Offset = "0xD678F0", VA = "0xD678F0")]
		[DebuggerHidden]
		public <PreTeleportStateCoroutine>d__72(int <>1__state)
		{
		}

		[Token(Token = "0x60001E8")]
		[Address(RVA = "0xD68888", Offset = "0xD68888", VA = "0xD68888", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001E9")]
		[Address(RVA = "0xD6888C", Offset = "0xD6888C", VA = "0xD6888C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001EB")]
		[Address(RVA = "0xD68978", Offset = "0xD68978", VA = "0xD68978", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000068")]
	[CompilerGenerated]
	private sealed class <CancelTeleportStateCoroutine>d__76 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000258")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000259")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400025A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x17000025")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60001F0")]
			[Address(RVA = "0xD68A70", Offset = "0xD68A70", VA = "0xD68A70", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000026")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60001F2")]
			[Address(RVA = "0xD68AB8", Offset = "0xD68AB8", VA = "0xD68AB8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001ED")]
		[Address(RVA = "0xD67AC4", Offset = "0xD67AC4", VA = "0xD67AC4")]
		[DebuggerHidden]
		public <CancelTeleportStateCoroutine>d__76(int <>1__state)
		{
		}

		[Token(Token = "0x60001EE")]
		[Address(RVA = "0xD689C0", Offset = "0xD689C0", VA = "0xD689C0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001EF")]
		[Address(RVA = "0xD689C4", Offset = "0xD689C4", VA = "0xD689C4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001F1")]
		[Address(RVA = "0xD68A78", Offset = "0xD68A78", VA = "0xD68A78", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000069")]
	[CompilerGenerated]
	private sealed class <TeleportingStateCoroutine>d__80 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400025B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400025C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400025D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x17000027")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60001F6")]
			[Address(RVA = "0xD68BA4", Offset = "0xD68BA4", VA = "0xD68BA4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000028")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60001F8")]
			[Address(RVA = "0xD68BEC", Offset = "0xD68BEC", VA = "0xD68BEC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001F3")]
		[Address(RVA = "0xD67C98", Offset = "0xD67C98", VA = "0xD67C98")]
		[DebuggerHidden]
		public <TeleportingStateCoroutine>d__80(int <>1__state)
		{
		}

		[Token(Token = "0x60001F4")]
		[Address(RVA = "0xD68AC0", Offset = "0xD68AC0", VA = "0xD68AC0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001F5")]
		[Address(RVA = "0xD68AC4", Offset = "0xD68AC4", VA = "0xD68AC4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001F7")]
		[Address(RVA = "0xD68BAC", Offset = "0xD68BAC", VA = "0xD68BAC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200006A")]
	[CompilerGenerated]
	private sealed class <PostTeleportStateCoroutine>d__84 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400025E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400025F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000260")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x17000029")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60001FC")]
			[Address(RVA = "0xD68CF4", Offset = "0xD68CF4", VA = "0xD68CF4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700002A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60001FE")]
			[Address(RVA = "0xD68D3C", Offset = "0xD68D3C", VA = "0xD68D3C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001F9")]
		[Address(RVA = "0xD67E6C", Offset = "0xD67E6C", VA = "0xD67E6C")]
		[DebuggerHidden]
		public <PostTeleportStateCoroutine>d__84(int <>1__state)
		{
		}

		[Token(Token = "0x60001FA")]
		[Address(RVA = "0xD68BF4", Offset = "0xD68BF4", VA = "0xD68BF4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001FB")]
		[Address(RVA = "0xD68BF8", Offset = "0xD68BF8", VA = "0xD68BF8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001FD")]
		[Address(RVA = "0xD68CFC", Offset = "0xD68CFC", VA = "0xD68CFC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000214")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("Allow linear movement prior to the teleport system being activated.")]
	public bool EnableMovementDuringReady;

	[Token(Token = "0x4000215")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	[Tooltip("Allow linear movement while the teleport system is in the process of aiming for a teleport target.")]
	public bool EnableMovementDuringAim;

	[Token(Token = "0x4000216")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	[Tooltip("Allow linear movement while the teleport system is in the process of configuring the landing orientation.")]
	public bool EnableMovementDuringPreTeleport;

	[Token(Token = "0x4000217")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
	[Tooltip("Allow linear movement after the teleport has occurred but before the system has returned to the ready state.")]
	public bool EnableMovementDuringPostTeleport;

	[Token(Token = "0x4000218")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Tooltip("Allow rotation prior to the teleport system being activated.")]
	public bool EnableRotationDuringReady;

	[Token(Token = "0x4000219")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	[Tooltip("Allow rotation while the teleport system is in the process of aiming for a teleport target.")]
	public bool EnableRotationDuringAim;

	[Token(Token = "0x400021A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
	[Tooltip("Allow rotation while the teleport system is in the process of configuring the landing orientation.")]
	public bool EnableRotationDuringPreTeleport;

	[Token(Token = "0x400021B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F")]
	[Tooltip("Allow rotation after the teleport has occurred but before the system has returned to the ready state.")]
	public bool EnableRotationDuringPostTeleport;

	[NonSerialized]
	[Token(Token = "0x400021D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TeleportAimHandler AimHandler;

	[Token(Token = "0x400021E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("This prefab will be instantiated as needed and updated to match the current aim target.")]
	public TeleportDestination TeleportDestinationPrefab;

	[Token(Token = "0x400021F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Tooltip("TeleportDestinationPrefab will be instantiated into this layer.")]
	public int TeleportDestinationLayer;

	[NonSerialized]
	[Token(Token = "0x4000221")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public TeleportInputHandler InputHandler;

	[NonSerialized]
	[Token(Token = "0x4000222")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public TeleportIntentions CurrentIntention;

	[NonSerialized]
	[Token(Token = "0x4000223")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public bool IsPreTeleportRequested;

	[NonSerialized]
	[Token(Token = "0x4000224")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
	public bool IsTransitioning;

	[NonSerialized]
	[Token(Token = "0x4000225")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x56")]
	public bool IsPostTeleportRequested;

	[Token(Token = "0x4000226")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private TeleportDestination _teleportDestination;

	[Token(Token = "0x4000228")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[Tooltip("When aiming at possible destinations, the aim collision type determines which shape to use for collision tests.")]
	public AimCollisionTypes AimCollisionType;

	[Token(Token = "0x4000229")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[Tooltip("Use the character collision radius/height/skinwidth for sphere/capsule collision tests.")]
	public bool UseCharacterCollisionData;

	[Token(Token = "0x400022A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[Tooltip("Radius of the sphere or capsule used for collision testing when aiming to possible teleport destinations. Ignored if UseCharacterCollisionData is true.")]
	public float AimCollisionRadius;

	[Token(Token = "0x400022B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	[Tooltip("Height of the capsule used for collision testing when aiming to possible teleport destinations. Ignored if UseCharacterCollisionData is true.")]
	public float AimCollisionHeight;

	[Token(Token = "0x17000019")]
	public States CurrentState
	{
		[Token(Token = "0x600019F")]
		[Address(RVA = "0xD66704", Offset = "0xD66704", VA = "0xD66704")]
		[CompilerGenerated]
		get
		{
			return default(States);
		}
		[Token(Token = "0x60001A0")]
		[Address(RVA = "0xD6670C", Offset = "0xD6670C", VA = "0xD6670C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1700001A")]
	public Quaternion DestinationRotation
	{
		[Token(Token = "0x60001A4")]
		[Address(RVA = "0xD668DC", Offset = "0xD668DC", VA = "0xD668DC")]
		get
		{
			return default(Quaternion);
		}
	}

	[Token(Token = "0x1700001B")]
	public LocomotionController LocomotionController
	{
		[Token(Token = "0x60001A5")]
		[Address(RVA = "0xD66900", Offset = "0xD66900", VA = "0xD66900")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60001A6")]
		[Address(RVA = "0xD66908", Offset = "0xD66908", VA = "0xD66908")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x14000001")]
	public event Action<bool, Vector3?, Quaternion?, Quaternion?> UpdateTeleportDestination
	{
		[Token(Token = "0x60001A1")]
		[Address(RVA = "0xD66714", Offset = "0xD66714", VA = "0xD66714")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60001A2")]
		[Address(RVA = "0xD667C4", Offset = "0xD667C4", VA = "0xD667C4")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000002")]
	public event Action EnterStateReady
	{
		[Token(Token = "0x60001B0")]
		[Address(RVA = "0xD66F88", Offset = "0xD66F88", VA = "0xD66F88")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60001B1")]
		[Address(RVA = "0xD67024", Offset = "0xD67024", VA = "0xD67024")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000003")]
	public event Action EnterStateAim
	{
		[Token(Token = "0x60001B3")]
		[Address(RVA = "0xD670E8", Offset = "0xD670E8", VA = "0xD670E8")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60001B4")]
		[Address(RVA = "0xD67184", Offset = "0xD67184", VA = "0xD67184")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000004")]
	public event Action<AimData> UpdateAimData
	{
		[Token(Token = "0x60001B5")]
		[Address(RVA = "0xD67220", Offset = "0xD67220", VA = "0xD67220")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60001B6")]
		[Address(RVA = "0xD672D0", Offset = "0xD672D0", VA = "0xD672D0")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000005")]
	public event Action ExitStateAim
	{
		[Token(Token = "0x60001B8")]
		[Address(RVA = "0xD6739C", Offset = "0xD6739C", VA = "0xD6739C")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60001B9")]
		[Address(RVA = "0xD67438", Offset = "0xD67438", VA = "0xD67438")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000006")]
	public event Action EnterStateCancelAim
	{
		[Token(Token = "0x60001BB")]
		[Address(RVA = "0xD67570", Offset = "0xD67570", VA = "0xD67570")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60001BC")]
		[Address(RVA = "0xD6760C", Offset = "0xD6760C", VA = "0xD6760C")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000007")]
	public event Action EnterStatePreTeleport
	{
		[Token(Token = "0x60001BE")]
		[Address(RVA = "0xD67744", Offset = "0xD67744", VA = "0xD67744")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60001BF")]
		[Address(RVA = "0xD677E0", Offset = "0xD677E0", VA = "0xD677E0")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000008")]
	public event Action EnterStateCancelTeleport
	{
		[Token(Token = "0x60001C1")]
		[Address(RVA = "0xD67918", Offset = "0xD67918", VA = "0xD67918")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60001C2")]
		[Address(RVA = "0xD679B4", Offset = "0xD679B4", VA = "0xD679B4")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000009")]
	public event Action EnterStateTeleporting
	{
		[Token(Token = "0x60001C4")]
		[Address(RVA = "0xD67AEC", Offset = "0xD67AEC", VA = "0xD67AEC")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60001C5")]
		[Address(RVA = "0xD67B88", Offset = "0xD67B88", VA = "0xD67B88")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400000A")]
	public event Action EnterStatePostTeleport
	{
		[Token(Token = "0x60001C7")]
		[Address(RVA = "0xD67CC0", Offset = "0xD67CC0", VA = "0xD67CC0")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60001C8")]
		[Address(RVA = "0xD67D5C", Offset = "0xD67D5C", VA = "0xD67D5C")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400000B")]
	public event Action<Transform, Vector3, Quaternion> Teleported
	{
		[Token(Token = "0x60001CA")]
		[Address(RVA = "0xD67E94", Offset = "0xD67E94", VA = "0xD67E94")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60001CB")]
		[Address(RVA = "0xD67F44", Offset = "0xD67F44", VA = "0xD67F44")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x600019D")]
	[Address(RVA = "0xD666BC", Offset = "0xD666BC", VA = "0xD666BC")]
	public void EnableMovement(bool ready, bool aim, bool pre, bool post)
	{
	}

	[Token(Token = "0x600019E")]
	[Address(RVA = "0xD666E0", Offset = "0xD666E0", VA = "0xD666E0")]
	public void EnableRotation(bool ready, bool aim, bool pre, bool post)
	{
	}

	[Token(Token = "0x60001A3")]
	[Address(RVA = "0xD66874", Offset = "0xD66874", VA = "0xD66874")]
	public void OnUpdateTeleportDestination(bool isValidDestination, Vector3? position, Quaternion? rotation, Quaternion? landingRotation)
	{
	}

	[Token(Token = "0x60001A7")]
	[Address(RVA = "0xD66910", Offset = "0xD66910", VA = "0xD66910")]
	public bool AimCollisionTest(Vector3 start, Vector3 end, LayerMask aimCollisionLayerMask, out RaycastHit hitInfo)
	{
		return default(bool);
	}

	[Token(Token = "0x60001A8")]
	[Address(RVA = "0xD66BD8", Offset = "0xD66BD8", VA = "0xD66BD8")]
	[Conditional("DEBUG_TELEPORT_STATES")]
	protected void LogState(string msg)
	{
	}

	[Token(Token = "0x60001A9")]
	[Address(RVA = "0xD66C80", Offset = "0xD66C80", VA = "0xD66C80")]
	protected void CreateNewTeleportDestination()
	{
	}

	[Token(Token = "0x60001AA")]
	[Address(RVA = "0xD66D6C", Offset = "0xD66D6C", VA = "0xD66D6C")]
	private void DeactivateDestination()
	{
	}

	[Token(Token = "0x60001AB")]
	[Address(RVA = "0xD66DA8", Offset = "0xD66DA8", VA = "0xD66DA8")]
	public void RecycleTeleportDestination(TeleportDestination oldDestination)
	{
	}

	[Token(Token = "0x60001AC")]
	[Address(RVA = "0xD66E58", Offset = "0xD66E58", VA = "0xD66E58")]
	private void EnableMotion(bool enableLinear, bool enableRotation)
	{
	}

	[Token(Token = "0x60001AD")]
	[Address(RVA = "0xD66E88", Offset = "0xD66E88", VA = "0xD66E88")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001AE")]
	[Address(RVA = "0xD66EE8", Offset = "0xD66EE8", VA = "0xD66EE8", Slot = "4")]
	public virtual void OnEnable()
	{
	}

	[Token(Token = "0x60001AF")]
	[Address(RVA = "0xD66F80", Offset = "0xD66F80", VA = "0xD66F80", Slot = "5")]
	public virtual void OnDisable()
	{
	}

	[Token(Token = "0x60001B2")]
	[Address(RVA = "0xD66F0C", Offset = "0xD66F0C", VA = "0xD66F0C")]
	[IteratorStateMachine(typeof(<ReadyStateCoroutine>d__52))]
	protected IEnumerator ReadyStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60001B7")]
	[Address(RVA = "0xD67380", Offset = "0xD67380", VA = "0xD67380")]
	public void OnUpdateAimData(AimData aimData)
	{
	}

	[Token(Token = "0x60001BA")]
	[Address(RVA = "0xD674D4", Offset = "0xD674D4", VA = "0xD674D4")]
	[IteratorStateMachine(typeof(<AimStateCoroutine>d__64))]
	protected IEnumerator AimStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60001BD")]
	[Address(RVA = "0xD676A8", Offset = "0xD676A8", VA = "0xD676A8")]
	[IteratorStateMachine(typeof(<CancelAimStateCoroutine>d__68))]
	protected IEnumerator CancelAimStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60001C0")]
	[Address(RVA = "0xD6787C", Offset = "0xD6787C", VA = "0xD6787C")]
	[IteratorStateMachine(typeof(<PreTeleportStateCoroutine>d__72))]
	protected IEnumerator PreTeleportStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60001C3")]
	[Address(RVA = "0xD67A50", Offset = "0xD67A50", VA = "0xD67A50")]
	[IteratorStateMachine(typeof(<CancelTeleportStateCoroutine>d__76))]
	protected IEnumerator CancelTeleportStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60001C6")]
	[Address(RVA = "0xD67C24", Offset = "0xD67C24", VA = "0xD67C24")]
	[IteratorStateMachine(typeof(<TeleportingStateCoroutine>d__80))]
	protected IEnumerator TeleportingStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60001C9")]
	[Address(RVA = "0xD67DF8", Offset = "0xD67DF8", VA = "0xD67DF8")]
	[IteratorStateMachine(typeof(<PostTeleportStateCoroutine>d__84))]
	protected IEnumerator PostTeleportStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60001CC")]
	[Address(RVA = "0xD67FF4", Offset = "0xD67FF4", VA = "0xD67FF4")]
	public void DoTeleport()
	{
	}

	[Token(Token = "0x60001CD")]
	[Address(RVA = "0xD68128", Offset = "0xD68128", VA = "0xD68128")]
	public Vector3 GetCharacterPosition()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60001CE")]
	[Address(RVA = "0xD68158", Offset = "0xD68158", VA = "0xD68158")]
	public Quaternion GetHeadRotationY()
	{
		return default(Quaternion);
	}

	[Token(Token = "0x60001CF")]
	[Address(RVA = "0xD68294", Offset = "0xD68294", VA = "0xD68294")]
	public void DoWarp(Vector3 startPos, float positionPercent)
	{
	}

	[Token(Token = "0x60001D0")]
	[Address(RVA = "0xD6837C", Offset = "0xD6837C", VA = "0xD6837C")]
	public LocomotionTeleport()
	{
	}
}
[Token(Token = "0x200006B")]
public class SimpleCapsuleWithStickMovement : MonoBehaviour
{
	[Token(Token = "0x4000261")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool EnableLinearMovement;

	[Token(Token = "0x4000262")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool EnableRotation;

	[Token(Token = "0x4000263")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	public bool HMDRotatesPlayer;

	[Token(Token = "0x4000264")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
	public bool RotationEitherThumbstick;

	[Token(Token = "0x4000265")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float RotationAngle;

	[Token(Token = "0x4000266")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float Speed;

	[Token(Token = "0x4000267")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public OVRCameraRig CameraRig;

	[Token(Token = "0x4000268")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool ReadyToSnapTurn;

	[Token(Token = "0x4000269")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Rigidbody _rigidbody;

	[Token(Token = "0x1400000C")]
	public event Action CameraUpdated
	{
		[Token(Token = "0x60001FF")]
		[Address(RVA = "0xD68D44", Offset = "0xD68D44", VA = "0xD68D44")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000200")]
		[Address(RVA = "0xD68DE0", Offset = "0xD68DE0", VA = "0xD68DE0")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400000D")]
	public event Action PreCharacterMove
	{
		[Token(Token = "0x6000201")]
		[Address(RVA = "0xD68E7C", Offset = "0xD68E7C", VA = "0xD68E7C")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000202")]
		[Address(RVA = "0xD68F18", Offset = "0xD68F18", VA = "0xD68F18")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6000203")]
	[Address(RVA = "0xD68FB4", Offset = "0xD68FB4", VA = "0xD68FB4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000204")]
	[Address(RVA = "0xD69094", Offset = "0xD69094", VA = "0xD69094")]
	private void Start()
	{
	}

	[Token(Token = "0x6000205")]
	[Address(RVA = "0xD69098", Offset = "0xD69098", VA = "0xD69098")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000206")]
	[Address(RVA = "0xD6910C", Offset = "0xD6910C", VA = "0xD6910C")]
	private void RotatePlayerToHMD()
	{
	}

	[Token(Token = "0x6000207")]
	[Address(RVA = "0xD69230", Offset = "0xD69230", VA = "0xD69230")]
	private void StickMovement()
	{
	}

	[Token(Token = "0x6000208")]
	[Address(RVA = "0xD694A8", Offset = "0xD694A8", VA = "0xD694A8")]
	private void SnapTurn()
	{
	}

	[Token(Token = "0x6000209")]
	[Address(RVA = "0xD696C8", Offset = "0xD696C8", VA = "0xD696C8")]
	public SimpleCapsuleWithStickMovement()
	{
	}
}
[Token(Token = "0x200006C")]
public abstract class TeleportAimHandler : TeleportSupport
{
	[Token(Token = "0x600020A")]
	[Address(RVA = "0xD696E8", Offset = "0xD696E8", VA = "0xD696E8", Slot = "4")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x600020B")]
	[Address(RVA = "0xD69714", Offset = "0xD69714", VA = "0xD69714", Slot = "5")]
	protected override void OnDisable()
	{
	}

	[Token(Token = "0x600020C")]
	public abstract void GetPoints(List<Vector3> points);

	[Token(Token = "0x600020D")]
	[Address(RVA = "0xD697A4", Offset = "0xD697A4", VA = "0xD697A4")]
	protected TeleportAimHandler()
	{
	}
}
[Token(Token = "0x200006D")]
public class TeleportAimHandlerLaser : TeleportAimHandler
{
	[Token(Token = "0x400026C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Tooltip("Maximum range for aiming.")]
	public float Range;

	[Token(Token = "0x600020E")]
	[Address(RVA = "0xD697AC", Offset = "0xD697AC", VA = "0xD697AC", Slot = "8")]
	public override void GetPoints(List<Vector3> points)
	{
	}

	[Token(Token = "0x600020F")]
	[Address(RVA = "0xD6993C", Offset = "0xD6993C", VA = "0xD6993C")]
	public TeleportAimHandlerLaser()
	{
	}
}
[Token(Token = "0x200006E")]
public class TeleportAimHandlerParabolic : TeleportAimHandler
{
	[Token(Token = "0x400026D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Tooltip("Maximum range for aiming.")]
	public float Range;

	[Token(Token = "0x400026E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("The MinimumElevation is relative to the AimPosition.")]
	public float MinimumElevation;

	[Token(Token = "0x400026F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Tooltip("The Gravity is used in conjunction with AimVelocity and the aim direction to simulate a projectile.")]
	public float Gravity;

	[Token(Token = "0x4000270")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("The AimVelocity is the initial speed of the faked projectile.")]
	[Range(0.001f, 50f)]
	public float AimVelocity;

	[Token(Token = "0x4000271")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[Range(0.001f, 1f)]
	[Tooltip("The AimStep is the how much to subdivide the iteration.")]
	public float AimStep;

	[Token(Token = "0x6000210")]
	[Address(RVA = "0xD6994C", Offset = "0xD6994C", VA = "0xD6994C", Slot = "8")]
	public override void GetPoints(List<Vector3> points)
	{
	}

	[Token(Token = "0x6000211")]
	[Address(RVA = "0xD69B20", Offset = "0xD69B20", VA = "0xD69B20")]
	public TeleportAimHandlerParabolic()
	{
	}
}
[Token(Token = "0x200006F")]
public class TeleportAimVisualLaser : TeleportSupport
{
	[Token(Token = "0x4000272")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("This prefab will be instantiated when the aim visual is awakened, and will be set active when the user is aiming, and deactivated when they are done aiming.")]
	public LineRenderer LaserPrefab;

	[Token(Token = "0x4000273")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private readonly Action _enterAimStateAction;

	[Token(Token = "0x4000274")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private readonly Action _exitAimStateAction;

	[Token(Token = "0x4000275")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private readonly Action<LocomotionTeleport.AimData> _updateAimDataAction;

	[Token(Token = "0x4000276")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private LineRenderer _lineRenderer;

	[Token(Token = "0x4000277")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3[] _linePoints;

	[Token(Token = "0x6000212")]
	[Address(RVA = "0xD69B34", Offset = "0xD69B34", VA = "0xD69B34")]
	public TeleportAimVisualLaser()
	{
	}

	[Token(Token = "0x6000213")]
	[Address(RVA = "0xD69C60", Offset = "0xD69C60", VA = "0xD69C60")]
	private void EnterAimState()
	{
	}

	[Token(Token = "0x6000214")]
	[Address(RVA = "0xD69C8C", Offset = "0xD69C8C", VA = "0xD69C8C")]
	private void ExitAimState()
	{
	}

	[Token(Token = "0x6000215")]
	[Address(RVA = "0xD69CB8", Offset = "0xD69CB8", VA = "0xD69CB8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000216")]
	[Address(RVA = "0xD69D5C", Offset = "0xD69D5C", VA = "0xD69D5C", Slot = "6")]
	protected override void AddEventHandlers()
	{
	}

	[Token(Token = "0x6000217")]
	[Address(RVA = "0xD69DA4", Offset = "0xD69DA4", VA = "0xD69DA4", Slot = "7")]
	protected override void RemoveEventHandlers()
	{
	}

	[Token(Token = "0x6000218")]
	[Address(RVA = "0xD69DF0", Offset = "0xD69DF0", VA = "0xD69DF0")]
	private void UpdateAimData(LocomotionTeleport.AimData obj)
	{
	}
}
[Token(Token = "0x2000070")]
public class TeleportDestination : MonoBehaviour
{
	[Token(Token = "0x4000279")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("If the target handler provides a target position, this transform will be moved to that position and it's game object enabled. A target position being provided does not mean the position is valid, only that the aim handler found something to test as a destination.")]
	public Transform PositionIndicator;

	[Token(Token = "0x400027A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("This transform will be rotated to match the rotation of the aiming target. Simple teleport destinations should assign this to the object containing this component. More complex teleport destinations might assign this to a sub-object that is used to indicate the landing orientation independently from the rest of the destination indicator, such as when world space effects are required. This will typically be a child of the PositionIndicator.")]
	public Transform OrientationIndicator;

	[Token(Token = "0x400027B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("After the player teleports, the character controller will have it's rotation set to this value. It is different from the OrientationIndicator transform.rotation in order to support both head-relative and forward-facing teleport modes (See TeleportOrientationHandlerThumbstick.cs).")]
	public Quaternion LandingRotation;

	[NonSerialized]
	[Token(Token = "0x400027C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public LocomotionTeleport LocomotionTeleport;

	[NonSerialized]
	[Token(Token = "0x400027D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public LocomotionTeleport.States TeleportState;

	[Token(Token = "0x400027E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private readonly Action<bool, Vector3?, Quaternion?, Quaternion?> _updateTeleportDestinationAction;

	[Token(Token = "0x400027F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool _eventsActive;

	[Token(Token = "0x1700002B")]
	public bool IsValidDestination
	{
		[Token(Token = "0x6000219")]
		[Address(RVA = "0xD69EEC", Offset = "0xD69EEC", VA = "0xD69EEC")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600021A")]
		[Address(RVA = "0xD69EF4", Offset = "0xD69EF4", VA = "0xD69EF4")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1400000E")]
	public event Action<TeleportDestination> Deactivated
	{
		[Token(Token = "0x600021F")]
		[Address(RVA = "0xD6A07C", Offset = "0xD6A07C", VA = "0xD6A07C")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000220")]
		[Address(RVA = "0xD6A12C", Offset = "0xD6A12C", VA = "0xD6A12C")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x600021B")]
	[Address(RVA = "0xD69F00", Offset = "0xD69F00", VA = "0xD69F00")]
	private TeleportDestination()
	{
	}

	[Token(Token = "0x600021C")]
	[Address(RVA = "0xD69F84", Offset = "0xD69F84", VA = "0xD69F84")]
	public void OnEnable()
	{
	}

	[Token(Token = "0x600021D")]
	[Address(RVA = "0xD6A048", Offset = "0xD6A048", VA = "0xD6A048")]
	private void TryDisableEventHandlers()
	{
	}

	[Token(Token = "0x600021E")]
	[Address(RVA = "0xD6A078", Offset = "0xD6A078", VA = "0xD6A078")]
	public void OnDisable()
	{
	}

	[Token(Token = "0x6000221")]
	[Address(RVA = "0xD66D84", Offset = "0xD66D84", VA = "0xD66D84")]
	public void OnDeactivated()
	{
	}

	[Token(Token = "0x6000222")]
	[Address(RVA = "0xD6A1DC", Offset = "0xD6A1DC", VA = "0xD6A1DC")]
	public void Recycle()
	{
	}

	[Token(Token = "0x6000223")]
	[Address(RVA = "0xD6A1F8", Offset = "0xD6A1F8", VA = "0xD6A1F8", Slot = "4")]
	public virtual void UpdateTeleportDestination(bool isValidDestination, Vector3? position, Quaternion? rotation, Quaternion? landingRotation)
	{
	}
}
[Token(Token = "0x2000071")]
public abstract class TeleportInputHandler : TeleportSupport
{
	[Token(Token = "0x2000072")]
	[CompilerGenerated]
	private sealed class <TeleportReadyCoroutine>d__5 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000283")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000284")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000285")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportInputHandler <>4__this;

		[Token(Token = "0x1700002C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000230")]
			[Address(RVA = "0xE410D4", Offset = "0xE410D4", VA = "0xE410D4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700002D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000232")]
			[Address(RVA = "0xE4111C", Offset = "0xE4111C", VA = "0xE4111C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600022D")]
		[Address(RVA = "0xE4101C", Offset = "0xE4101C", VA = "0xE4101C")]
		[DebuggerHidden]
		public <TeleportReadyCoroutine>d__5(int <>1__state)
		{
		}

		[Token(Token = "0x600022E")]
		[Address(RVA = "0xE41044", Offset = "0xE41044", VA = "0xE41044", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600022F")]
		[Address(RVA = "0xE41048", Offset = "0xE41048", VA = "0xE41048", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000231")]
		[Address(RVA = "0xE410DC", Offset = "0xE410DC", VA = "0xE410DC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000073")]
	[CompilerGenerated]
	private sealed class <TeleportAimCoroutine>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000286")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000287")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000288")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportInputHandler <>4__this;

		[Token(Token = "0x1700002E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000236")]
			[Address(RVA = "0xE411E8", Offset = "0xE411E8", VA = "0xE411E8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700002F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000238")]
			[Address(RVA = "0xE41230", Offset = "0xE41230", VA = "0xE41230", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000233")]
		[Address(RVA = "0xE41124", Offset = "0xE41124", VA = "0xE41124")]
		[DebuggerHidden]
		public <TeleportAimCoroutine>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x6000234")]
		[Address(RVA = "0xE4114C", Offset = "0xE4114C", VA = "0xE4114C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000235")]
		[Address(RVA = "0xE41150", Offset = "0xE41150", VA = "0xE41150", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000237")]
		[Address(RVA = "0xE411F0", Offset = "0xE411F0", VA = "0xE411F0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000281")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private readonly Action _startReadyAction;

	[Token(Token = "0x4000282")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private readonly Action _startAimAction;

	[Token(Token = "0x6000224")]
	[Address(RVA = "0xD6A3EC", Offset = "0xD6A3EC", VA = "0xD6A3EC")]
	protected TeleportInputHandler()
	{
	}

	[Token(Token = "0x6000225")]
	[Address(RVA = "0xD6A4C0", Offset = "0xD6A4C0", VA = "0xD6A4C0", Slot = "6")]
	protected override void AddEventHandlers()
	{
	}

	[Token(Token = "0x6000226")]
	[Address(RVA = "0xD6A510", Offset = "0xD6A510", VA = "0xD6A510", Slot = "7")]
	protected override void RemoveEventHandlers()
	{
	}

	[Token(Token = "0x6000227")]
	[Address(RVA = "0xD6A5C0", Offset = "0xD6A5C0", VA = "0xD6A5C0")]
	[IteratorStateMachine(typeof(<TeleportReadyCoroutine>d__5))]
	private IEnumerator TeleportReadyCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000228")]
	[Address(RVA = "0xD6A634", Offset = "0xD6A634", VA = "0xD6A634")]
	[IteratorStateMachine(typeof(<TeleportAimCoroutine>d__6))]
	private IEnumerator TeleportAimCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000229")]
	public abstract LocomotionTeleport.TeleportIntentions GetIntention();

	[Token(Token = "0x600022A")]
	public abstract void GetAimData(out Ray aimRay);
}
[Token(Token = "0x2000074")]
public class TeleportInputHandlerHMD : TeleportInputHandler
{
	[Token(Token = "0x400028A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("The button used to begin aiming for a teleport.")]
	public OVRInput.RawButton AimButton;

	[Token(Token = "0x400028B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[Tooltip("The button used to trigger the teleport after aiming. It can be the same button as the AimButton, however you cannot abort a teleport if it is.")]
	public OVRInput.RawButton TeleportButton;

	[Token(Token = "0x400028C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Tooltip("When true, the system will not use the PreTeleport intention which will allow a teleport to occur on a button downpress. When false, the button downpress will trigger the PreTeleport intention and the Teleport intention when the button is released.")]
	public bool FastTeleport;

	[Token(Token = "0x17000030")]
	public Transform Pointer
	{
		[Token(Token = "0x6000239")]
		[Address(RVA = "0xE41238", Offset = "0xE41238", VA = "0xE41238")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x600023A")]
		[Address(RVA = "0xE41240", Offset = "0xE41240", VA = "0xE41240")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x600023B")]
	[Address(RVA = "0xE41248", Offset = "0xE41248", VA = "0xE41248", Slot = "8")]
	public override LocomotionTeleport.TeleportIntentions GetIntention()
	{
		return default(LocomotionTeleport.TeleportIntentions);
	}

	[Token(Token = "0x600023C")]
	[Address(RVA = "0xE41374", Offset = "0xE41374", VA = "0xE41374", Slot = "9")]
	public override void GetAimData(out Ray aimRay)
	{
	}

	[Token(Token = "0x600023D")]
	[Address(RVA = "0xE41428", Offset = "0xE41428", VA = "0xE41428")]
	public TeleportInputHandlerHMD()
	{
	}
}
[Token(Token = "0x2000075")]
public class TeleportInputHandlerTouch : TeleportInputHandlerHMD
{
	[Token(Token = "0x2000076")]
	public enum InputModes
	{
		[Token(Token = "0x4000297")]
		CapacitiveButtonForAimAndTeleport,
		[Token(Token = "0x4000298")]
		SeparateButtonsForAimAndTeleport,
		[Token(Token = "0x4000299")]
		ThumbstickTeleport,
		[Token(Token = "0x400029A")]
		ThumbstickTeleportForwardBackOnly
	}

	[Token(Token = "0x2000077")]
	public enum AimCapTouchButtons
	{
		[Token(Token = "0x400029C")]
		A,
		[Token(Token = "0x400029D")]
		B,
		[Token(Token = "0x400029E")]
		LeftTrigger,
		[Token(Token = "0x400029F")]
		LeftThumbstick,
		[Token(Token = "0x40002A0")]
		RightTrigger,
		[Token(Token = "0x40002A1")]
		RightThumbstick,
		[Token(Token = "0x40002A2")]
		X,
		[Token(Token = "0x40002A3")]
		Y
	}

	[Token(Token = "0x400028D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Transform LeftHand;

	[Token(Token = "0x400028E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Transform RightHand;

	[Token(Token = "0x400028F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Tooltip("CapacitiveButtonForAimAndTeleport=Activate aiming via cap touch detection, press the same button to teleport.\nSeparateButtonsForAimAndTeleport=Use one button to begin aiming, and another to trigger the teleport.\nThumbstickTeleport=Push a thumbstick to begin aiming, release to teleport.")]
	public InputModes InputMode;

	[Token(Token = "0x4000290")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private readonly OVRInput.RawButton[] _rawButtons;

	[Token(Token = "0x4000291")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private readonly OVRInput.RawTouch[] _rawTouch;

	[Token(Token = "0x4000292")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[Tooltip("Select the controller to be used for aiming. Supports LTouch, RTouch, or Touch for either.")]
	public OVRInput.Controller AimingController;

	[Token(Token = "0x4000293")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private OVRInput.Controller InitiatingController;

	[Token(Token = "0x4000294")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[Tooltip("Select the button to use for triggering aim and teleport when InputMode==CapacitiveButtonForAimAndTeleport")]
	public AimCapTouchButtons CapacitiveAimAndTeleportButton;

	[Token(Token = "0x4000295")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	[Tooltip("The thumbstick magnitude required to trigger aiming and teleports when InputMode==InputModes.ThumbstickTeleport")]
	public float ThumbstickTeleportThreshold;

	[Token(Token = "0x600023E")]
	[Address(RVA = "0xE41430", Offset = "0xE41430", VA = "0xE41430")]
	private void Start()
	{
	}

	[Token(Token = "0x600023F")]
	[Address(RVA = "0xE41434", Offset = "0xE41434", VA = "0xE41434", Slot = "8")]
	public override LocomotionTeleport.TeleportIntentions GetIntention()
	{
		return default(LocomotionTeleport.TeleportIntentions);
	}

	[Token(Token = "0x6000240")]
	[Address(RVA = "0xE41868", Offset = "0xE41868", VA = "0xE41868", Slot = "9")]
	public override void GetAimData(out Ray aimRay)
	{
	}

	[Token(Token = "0x6000241")]
	[Address(RVA = "0xE41924", Offset = "0xE41924", VA = "0xE41924")]
	public TeleportInputHandlerTouch()
	{
	}
}
[Token(Token = "0x2000078")]
public abstract class TeleportOrientationHandler : TeleportSupport
{
	[Token(Token = "0x2000079")]
	public enum OrientationModes
	{
		[Token(Token = "0x40002A8")]
		HeadRelative,
		[Token(Token = "0x40002A9")]
		ForwardFacing
	}

	[Token(Token = "0x200007A")]
	[CompilerGenerated]
	private sealed class <UpdateOrientationCoroutine>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40002AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40002AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40002AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportOrientationHandler <>4__this;

		[Token(Token = "0x17000031")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600024E")]
			[Address(RVA = "0xE41E04", Offset = "0xE41E04", VA = "0xE41E04", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000032")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000250")]
			[Address(RVA = "0xE41E4C", Offset = "0xE41E4C", VA = "0xE41E4C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600024B")]
		[Address(RVA = "0xE41C14", Offset = "0xE41C14", VA = "0xE41C14")]
		[DebuggerHidden]
		public <UpdateOrientationCoroutine>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x600024C")]
		[Address(RVA = "0xE41D54", Offset = "0xE41D54", VA = "0xE41D54", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600024D")]
		[Address(RVA = "0xE41D58", Offset = "0xE41D58", VA = "0xE41D58", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600024F")]
		[Address(RVA = "0xE41E0C", Offset = "0xE41E0C", VA = "0xE41E0C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40002A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private readonly Action _updateOrientationAction;

	[Token(Token = "0x40002A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private readonly Action<LocomotionTeleport.AimData> _updateAimDataAction;

	[Token(Token = "0x40002A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected LocomotionTeleport.AimData AimData;

	[Token(Token = "0x6000242")]
	[Address(RVA = "0xE41A18", Offset = "0xE41A18", VA = "0xE41A18")]
	protected TeleportOrientationHandler()
	{
	}

	[Token(Token = "0x6000243")]
	[Address(RVA = "0xE41B08", Offset = "0xE41B08", VA = "0xE41B08")]
	private void UpdateAimData(LocomotionTeleport.AimData aimData)
	{
	}

	[Token(Token = "0x6000244")]
	[Address(RVA = "0xE41B10", Offset = "0xE41B10", VA = "0xE41B10", Slot = "6")]
	protected override void AddEventHandlers()
	{
	}

	[Token(Token = "0x6000245")]
	[Address(RVA = "0xE41B5C", Offset = "0xE41B5C", VA = "0xE41B5C", Slot = "7")]
	protected override void RemoveEventHandlers()
	{
	}

	[Token(Token = "0x6000246")]
	[Address(RVA = "0xE41BA0", Offset = "0xE41BA0", VA = "0xE41BA0")]
	[IteratorStateMachine(typeof(<UpdateOrientationCoroutine>d__7))]
	private IEnumerator UpdateOrientationCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000247")]
	protected abstract void InitializeTeleportDestination();

	[Token(Token = "0x6000248")]
	protected abstract void UpdateTeleportDestination();

	[Token(Token = "0x6000249")]
	[Address(RVA = "0xE41C3C", Offset = "0xE41C3C", VA = "0xE41C3C")]
	protected Quaternion GetLandingOrientation(OrientationModes mode, Quaternion rotation)
	{
		return default(Quaternion);
	}
}
[Token(Token = "0x200007B")]
public class TeleportOrientationHandler360 : TeleportOrientationHandler
{
	[Token(Token = "0x6000251")]
	[Address(RVA = "0xE41E54", Offset = "0xE41E54", VA = "0xE41E54", Slot = "8")]
	protected override void InitializeTeleportDestination()
	{
	}

	[Token(Token = "0x6000252")]
	[Address(RVA = "0xE41E58", Offset = "0xE41E58", VA = "0xE41E58", Slot = "9")]
	protected override void UpdateTeleportDestination()
	{
	}

	[Token(Token = "0x6000253")]
	[Address(RVA = "0xE41ED0", Offset = "0xE41ED0", VA = "0xE41ED0")]
	public TeleportOrientationHandler360()
	{
	}
}
[Token(Token = "0x200007C")]
public class TeleportOrientationHandlerHMD : TeleportOrientationHandler
{
	[Token(Token = "0x40002AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("HeadRelative=Character will orient to match the arrow. ForwardFacing=When user orients to match the arrow, they will be facing the sensors.")]
	public OrientationModes OrientationMode;

	[Token(Token = "0x40002AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[Tooltip("Should the destination orientation be updated during the aim state in addition to the PreTeleport state?")]
	public bool UpdateOrientationDuringAim;

	[Token(Token = "0x40002AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Tooltip("How far from the destination must the HMD be pointing before using it for orientation")]
	public float AimDistanceThreshold;

	[Token(Token = "0x40002B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[Tooltip("How far from the destination must the HMD be pointing before rejecting the teleport")]
	public float AimDistanceMaxRange;

	[Token(Token = "0x40002B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Quaternion _initialRotation;

	[Token(Token = "0x6000254")]
	[Address(RVA = "0xE41ED4", Offset = "0xE41ED4", VA = "0xE41ED4", Slot = "8")]
	protected override void InitializeTeleportDestination()
	{
	}

	[Token(Token = "0x6000255")]
	[Address(RVA = "0xE41F24", Offset = "0xE41F24", VA = "0xE41F24", Slot = "9")]
	protected override void UpdateTeleportDestination()
	{
	}

	[Token(Token = "0x6000256")]
	[Address(RVA = "0xE423A0", Offset = "0xE423A0", VA = "0xE423A0")]
	public TeleportOrientationHandlerHMD()
	{
	}
}
[Token(Token = "0x200007D")]
public class TeleportOrientationHandlerThumbstick : TeleportOrientationHandler
{
	[Token(Token = "0x40002B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("HeadRelative=Character will orient to match the arrow. ForwardFacing=When user orients to match the arrow, they will be facing the sensors.")]
	public OrientationModes OrientationMode;

	[Token(Token = "0x40002B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[Tooltip("Which thumbstick is to be used for adjusting the teleport orientation. Supports LTouch, RTouch, or Touch for either.")]
	public OVRInput.Controller Thumbstick;

	[Token(Token = "0x40002B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Tooltip("The orientation will only change if the thumbstick magnitude is above this value. This will usually be larger than the TeleportInputHandlerTouch.ThumbstickTeleportThreshold.")]
	public float RotateStickThreshold;

	[Token(Token = "0x40002B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private Quaternion _initialRotation;

	[Token(Token = "0x40002B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private Quaternion _currentRotation;

	[Token(Token = "0x40002B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private Vector2 _lastValidDirection;

	[Token(Token = "0x6000257")]
	[Address(RVA = "0xE423A4", Offset = "0xE423A4", VA = "0xE423A4", Slot = "8")]
	protected override void InitializeTeleportDestination()
	{
	}

	[Token(Token = "0x6000258")]
	[Address(RVA = "0xE423DC", Offset = "0xE423DC", VA = "0xE423DC", Slot = "9")]
	protected override void UpdateTeleportDestination()
	{
	}

	[Token(Token = "0x6000259")]
	[Address(RVA = "0xE428B4", Offset = "0xE428B4", VA = "0xE428B4")]
	public TeleportOrientationHandlerThumbstick()
	{
	}
}
[Token(Token = "0x200007E")]
public class TeleportPoint : MonoBehaviour
{
	[Token(Token = "0x40002B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float dimmingSpeed;

	[Token(Token = "0x40002B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float fullIntensity;

	[Token(Token = "0x40002BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float lowIntensity;

	[Token(Token = "0x40002BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform destTransform;

	[Token(Token = "0x40002BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float lastLookAtTime;

	[Token(Token = "0x600025A")]
	[Address(RVA = "0xE428C4", Offset = "0xE428C4", VA = "0xE428C4")]
	private void Start()
	{
	}

	[Token(Token = "0x600025B")]
	[Address(RVA = "0xE428C8", Offset = "0xE428C8", VA = "0xE428C8")]
	public Transform GetDestTransform()
	{
		return null;
	}

	[Token(Token = "0x600025C")]
	[Address(RVA = "0xE428D0", Offset = "0xE428D0", VA = "0xE428D0")]
	private void Update()
	{
	}

	[Token(Token = "0x600025D")]
	[Address(RVA = "0xE429BC", Offset = "0xE429BC", VA = "0xE429BC")]
	public void OnLookAt()
	{
	}

	[Token(Token = "0x600025E")]
	[Address(RVA = "0xE429D8", Offset = "0xE429D8", VA = "0xE429D8")]
	public TeleportPoint()
	{
	}
}
[Token(Token = "0x200007F")]
public abstract class TeleportSupport : MonoBehaviour
{
	[Token(Token = "0x40002BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool _eventsActive;

	[Token(Token = "0x17000033")]
	protected LocomotionTeleport LocomotionTeleport
	{
		[Token(Token = "0x600025F")]
		[Address(RVA = "0xE429F0", Offset = "0xE429F0", VA = "0xE429F0")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000260")]
		[Address(RVA = "0xE429F8", Offset = "0xE429F8", VA = "0xE429F8")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x6000261")]
	[Address(RVA = "0xE42A00", Offset = "0xE42A00", VA = "0xE42A00", Slot = "4")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x6000262")]
	[Address(RVA = "0xE42A68", Offset = "0xE42A68", VA = "0xE42A68", Slot = "5")]
	protected virtual void OnDisable()
	{
	}

	[Token(Token = "0x6000263")]
	[Address(RVA = "0xE42A90", Offset = "0xE42A90", VA = "0xE42A90")]
	[Conditional("DEBUG_TELEPORT_EVENT_HANDLERS")]
	private void LogEventHandler(string msg)
	{
	}

	[Token(Token = "0x6000264")]
	[Address(RVA = "0xE41B50", Offset = "0xE41B50", VA = "0xE41B50", Slot = "6")]
	protected virtual void AddEventHandlers()
	{
	}

	[Token(Token = "0x6000265")]
	[Address(RVA = "0xE41B98", Offset = "0xE41B98", VA = "0xE41B98", Slot = "7")]
	protected virtual void RemoveEventHandlers()
	{
	}

	[Token(Token = "0x6000266")]
	[Address(RVA = "0xE41B00", Offset = "0xE41B00", VA = "0xE41B00")]
	protected TeleportSupport()
	{
	}
}
[Token(Token = "0x2000080")]
public abstract class TeleportTargetHandler : TeleportSupport
{
	[Token(Token = "0x2000081")]
	[CompilerGenerated]
	private sealed class <TargetAimCoroutine>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40002C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40002C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40002C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportTargetHandler <>4__this;

		[Token(Token = "0x17000034")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000272")]
			[Address(RVA = "0xE4317C", Offset = "0xE4317C", VA = "0xE4317C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000035")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000274")]
			[Address(RVA = "0xE431C4", Offset = "0xE431C4", VA = "0xE431C4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600026F")]
		[Address(RVA = "0xE42D44", Offset = "0xE42D44", VA = "0xE42D44")]
		[DebuggerHidden]
		public <TargetAimCoroutine>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x6000270")]
		[Address(RVA = "0xE42EC4", Offset = "0xE42EC4", VA = "0xE42EC4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000271")]
		[Address(RVA = "0xE42EC8", Offset = "0xE42EC8", VA = "0xE42EC8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000273")]
		[Address(RVA = "0xE43184", Offset = "0xE43184", VA = "0xE43184", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40002BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Tooltip("This bitmask controls which game object layers will be included in the targeting collision tests.")]
	public LayerMask AimCollisionLayerMask;

	[Token(Token = "0x40002C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected readonly LocomotionTeleport.AimData AimData;

	[Token(Token = "0x40002C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private readonly Action _startAimAction;

	[Token(Token = "0x40002C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private readonly List<Vector3> _aimPoints;

	[Token(Token = "0x40002C3")]
	private const float ERROR_MARGIN = 0.1f;

	[Token(Token = "0x6000267")]
	[Address(RVA = "0xE42B60", Offset = "0xE42B60", VA = "0xE42B60")]
	protected TeleportTargetHandler()
	{
	}

	[Token(Token = "0x6000268")]
	[Address(RVA = "0xE42C7C", Offset = "0xE42C7C", VA = "0xE42C7C", Slot = "6")]
	protected override void AddEventHandlers()
	{
	}

	[Token(Token = "0x6000269")]
	[Address(RVA = "0xE42CA8", Offset = "0xE42CA8", VA = "0xE42CA8", Slot = "7")]
	protected override void RemoveEventHandlers()
	{
	}

	[Token(Token = "0x600026A")]
	[Address(RVA = "0xE42CD0", Offset = "0xE42CD0", VA = "0xE42CD0")]
	[IteratorStateMachine(typeof(<TargetAimCoroutine>d__7))]
	private IEnumerator TargetAimCoroutine()
	{
		return null;
	}

	[Token(Token = "0x600026B")]
	[Address(RVA = "0xE42D6C", Offset = "0xE42D6C", VA = "0xE42D6C", Slot = "8")]
	protected virtual void ResetAimData()
	{
	}

	[Token(Token = "0x600026C")]
	protected abstract bool ConsiderTeleport(Vector3 start, ref Vector3 end);

	[Token(Token = "0x600026D")]
	[Address(RVA = "0xE42D88", Offset = "0xE42D88", VA = "0xE42D88", Slot = "10")]
	public virtual Vector3? ConsiderDestination(Vector3 location)
	{
		return null;
	}
}
[Token(Token = "0x2000082")]
public class TeleportTargetHandlerNavMesh : TeleportTargetHandler
{
	[Token(Token = "0x40002C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public int NavMeshAreaMask;

	[Token(Token = "0x40002C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private NavMeshPath _path;

	[Token(Token = "0x6000275")]
	[Address(RVA = "0xE431CC", Offset = "0xE431CC", VA = "0xE431CC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000276")]
	[Address(RVA = "0xE43234", Offset = "0xE43234", VA = "0xE43234", Slot = "9")]
	protected override bool ConsiderTeleport(Vector3 start, ref Vector3 end)
	{
		return default(bool);
	}

	[Token(Token = "0x6000277")]
	[Address(RVA = "0xE433A0", Offset = "0xE433A0", VA = "0xE433A0", Slot = "10")]
	public override Vector3? ConsiderDestination(Vector3 location)
	{
		return null;
	}

	[Token(Token = "0x6000278")]
	[Address(RVA = "0xE43490", Offset = "0xE43490", VA = "0xE43490")]
	[Conditional("SHOW_PATH_RESULT")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6000279")]
	[Address(RVA = "0xE43494", Offset = "0xE43494", VA = "0xE43494")]
	public TeleportTargetHandlerNavMesh()
	{
	}
}
[Token(Token = "0x2000083")]
public class TeleportTargetHandlerNode : TeleportTargetHandler
{
	[Token(Token = "0x40002C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("When checking line of sight to the destination, add this value to the vertical offset for targeting collision checks.")]
	public float LOSOffset;

	[Token(Token = "0x40002CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[Tooltip("Teleport logic will only work with TeleportPoint components that exist in the layers specified by this mask.")]
	public LayerMask TeleportLayerMask;

	[Token(Token = "0x600027A")]
	[Address(RVA = "0xE434A0", Offset = "0xE434A0", VA = "0xE434A0", Slot = "9")]
	protected override bool ConsiderTeleport(Vector3 start, ref Vector3 end)
	{
		return default(bool);
	}

	[Token(Token = "0x600027B")]
	[Address(RVA = "0xE436A0", Offset = "0xE436A0", VA = "0xE436A0")]
	public TeleportTargetHandlerNode()
	{
	}
}
[Token(Token = "0x2000084")]
public class TeleportTargetHandlerPhysical : TeleportTargetHandler
{
	[Token(Token = "0x600027C")]
	[Address(RVA = "0xE436AC", Offset = "0xE436AC", VA = "0xE436AC", Slot = "9")]
	protected override bool ConsiderTeleport(Vector3 start, ref Vector3 end)
	{
		return default(bool);
	}

	[Token(Token = "0x600027D")]
	[Address(RVA = "0xE43818", Offset = "0xE43818", VA = "0xE43818")]
	public TeleportTargetHandlerPhysical()
	{
	}
}
[Token(Token = "0x2000085")]
public abstract class TeleportTransition : TeleportSupport
{
	[Token(Token = "0x600027E")]
	[Address(RVA = "0xE4381C", Offset = "0xE4381C", VA = "0xE4381C", Slot = "6")]
	protected override void AddEventHandlers()
	{
	}

	[Token(Token = "0x600027F")]
	[Address(RVA = "0xE438A4", Offset = "0xE438A4", VA = "0xE438A4", Slot = "7")]
	protected override void RemoveEventHandlers()
	{
	}

	[Token(Token = "0x6000280")]
	protected abstract void LocomotionTeleportOnEnterStateTeleporting();

	[Token(Token = "0x6000281")]
	[Address(RVA = "0xE43928", Offset = "0xE43928", VA = "0xE43928")]
	protected TeleportTransition()
	{
	}
}
[Token(Token = "0x2000086")]
public class TeleportTransitionBlink : TeleportTransition
{
	[Token(Token = "0x2000087")]
	[CompilerGenerated]
	private sealed class <BlinkCoroutine>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40002CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40002CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40002D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportTransitionBlink <>4__this;

		[Token(Token = "0x40002D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <elapsedTime>5__2;

		[Token(Token = "0x40002D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <teleportTime>5__3;

		[Token(Token = "0x40002D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool <teleported>5__4;

		[Token(Token = "0x17000036")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000288")]
			[Address(RVA = "0xE43C90", Offset = "0xE43C90", VA = "0xE43C90", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000037")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600028A")]
			[Address(RVA = "0xE43CD8", Offset = "0xE43CD8", VA = "0xE43CD8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000285")]
		[Address(RVA = "0xE439C4", Offset = "0xE439C4", VA = "0xE439C4")]
		[DebuggerHidden]
		public <BlinkCoroutine>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x6000286")]
		[Address(RVA = "0xE43B88", Offset = "0xE43B88", VA = "0xE43B88", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000287")]
		[Address(RVA = "0xE43B8C", Offset = "0xE43B8C", VA = "0xE43B8C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000289")]
		[Address(RVA = "0xE43C98", Offset = "0xE43C98", VA = "0xE43C98", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40002CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Range(0.01f, 2f)]
	[Tooltip("How long the transition takes. Usually this is greater than Teleport Delay.")]
	public float TransitionDuration;

	[Token(Token = "0x40002CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Range(0f, 1f)]
	[Tooltip("At what percentage of the elapsed transition time does the teleport occur?")]
	public float TeleportDelay;

	[Token(Token = "0x40002CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("Fade to black over the duration of the transition")]
	public AnimationCurve FadeLevels;

	[Token(Token = "0x6000282")]
	[Address(RVA = "0xE43930", Offset = "0xE43930", VA = "0xE43930", Slot = "8")]
	protected override void LocomotionTeleportOnEnterStateTeleporting()
	{
	}

	[Token(Token = "0x6000283")]
	[Address(RVA = "0xE43950", Offset = "0xE43950", VA = "0xE43950")]
	[IteratorStateMachine(typeof(<BlinkCoroutine>d__4))]
	protected IEnumerator BlinkCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000284")]
	[Address(RVA = "0xE439EC", Offset = "0xE439EC", VA = "0xE439EC")]
	public TeleportTransitionBlink()
	{
	}
}
[Token(Token = "0x2000088")]
public class TeleportTransitionInstant : TeleportTransition
{
	[Token(Token = "0x600028B")]
	[Address(RVA = "0xE43CE0", Offset = "0xE43CE0", VA = "0xE43CE0", Slot = "8")]
	protected override void LocomotionTeleportOnEnterStateTeleporting()
	{
	}

	[Token(Token = "0x600028C")]
	[Address(RVA = "0xE43CFC", Offset = "0xE43CFC", VA = "0xE43CFC")]
	public TeleportTransitionInstant()
	{
	}
}
[Token(Token = "0x2000089")]
public class TeleportTransitionWarp : TeleportTransition
{
	[Token(Token = "0x200008A")]
	[CompilerGenerated]
	private sealed class <DoWarp>d__3 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40002D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40002D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40002D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportTransitionWarp <>4__this;

		[Token(Token = "0x40002D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 <startPosition>5__2;

		[Token(Token = "0x40002DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <elapsedTime>5__3;

		[Token(Token = "0x17000038")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000293")]
			[Address(RVA = "0xE43F2C", Offset = "0xE43F2C", VA = "0xE43F2C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000039")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000295")]
			[Address(RVA = "0xE43F74", Offset = "0xE43F74", VA = "0xE43F74", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000290")]
		[Address(RVA = "0xE43D98", Offset = "0xE43D98", VA = "0xE43D98")]
		[DebuggerHidden]
		public <DoWarp>d__3(int <>1__state)
		{
		}

		[Token(Token = "0x6000291")]
		[Address(RVA = "0xE43E08", Offset = "0xE43E08", VA = "0xE43E08", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000292")]
		[Address(RVA = "0xE43E0C", Offset = "0xE43E0C", VA = "0xE43E0C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000294")]
		[Address(RVA = "0xE43F34", Offset = "0xE43F34", VA = "0xE43F34", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40002D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Range(0.01f, 1f)]
	[Tooltip("How much time the warp transition takes to complete.")]
	public float TransitionDuration;

	[Token(Token = "0x40002D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[HideInInspector]
	public AnimationCurve PositionLerp;

	[Token(Token = "0x600028D")]
	[Address(RVA = "0xE43D04", Offset = "0xE43D04", VA = "0xE43D04", Slot = "8")]
	protected override void LocomotionTeleportOnEnterStateTeleporting()
	{
	}

	[Token(Token = "0x600028E")]
	[Address(RVA = "0xE43D24", Offset = "0xE43D24", VA = "0xE43D24")]
	[IteratorStateMachine(typeof(<DoWarp>d__3))]
	private IEnumerator DoWarp()
	{
		return null;
	}

	[Token(Token = "0x600028F")]
	[Address(RVA = "0xE43DC0", Offset = "0xE43DC0", VA = "0xE43DC0")]
	public TeleportTransitionWarp()
	{
	}
}
[Token(Token = "0x200008B")]
public static class NativeVideoPlayer
{
	[Token(Token = "0x200008C")]
	public enum PlabackState
	{
		[Token(Token = "0x40002F3")]
		Idle = 1,
		[Token(Token = "0x40002F4")]
		Preparing,
		[Token(Token = "0x40002F5")]
		Buffering,
		[Token(Token = "0x40002F6")]
		Ready,
		[Token(Token = "0x40002F7")]
		Ended
	}

	[Token(Token = "0x200008D")]
	public enum StereoMode
	{
		[Token(Token = "0x40002F9")]
		Unknown = -1,
		[Token(Token = "0x40002FA")]
		Mono,
		[Token(Token = "0x40002FB")]
		TopBottom,
		[Token(Token = "0x40002FC")]
		LeftRight,
		[Token(Token = "0x40002FD")]
		Mesh
	}

	[Token(Token = "0x40002DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static IntPtr? _Activity;

	[Token(Token = "0x40002DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static IntPtr? _VideoPlayerClass;

	[Token(Token = "0x40002DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static readonly jvalue[] EmptyParams;

	[Token(Token = "0x40002DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static IntPtr getIsPlayingMethodId;

	[Token(Token = "0x40002DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private static IntPtr getCurrentPlaybackStateMethodId;

	[Token(Token = "0x40002E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private static IntPtr getDurationMethodId;

	[Token(Token = "0x40002E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private static IntPtr getStereoModeMethodId;

	[Token(Token = "0x40002E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private static IntPtr getWidthMethodId;

	[Token(Token = "0x40002E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private static IntPtr getHeightMethodId;

	[Token(Token = "0x40002E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private static IntPtr getPlaybackPositionMethodId;

	[Token(Token = "0x40002E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private static IntPtr setPlaybackPositionMethodId;

	[Token(Token = "0x40002E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private static jvalue[] setPlaybackPositionParams;

	[Token(Token = "0x40002E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private static IntPtr playVideoMethodId;

	[Token(Token = "0x40002E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private static jvalue[] playVideoParams;

	[Token(Token = "0x40002E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private static IntPtr stopMethodId;

	[Token(Token = "0x40002EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private static IntPtr resumeMethodId;

	[Token(Token = "0x40002EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private static IntPtr pauseMethodId;

	[Token(Token = "0x40002EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private static IntPtr setPlaybackSpeedMethodId;

	[Token(Token = "0x40002ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private static jvalue[] setPlaybackSpeedParams;

	[Token(Token = "0x40002EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private static IntPtr setLoopingMethodId;

	[Token(Token = "0x40002EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private static jvalue[] setLoopingParams;

	[Token(Token = "0x40002F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private static IntPtr setListenerRotationQuaternionMethodId;

	[Token(Token = "0x40002F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private static jvalue[] setListenerRotationQuaternionParams;

	[Token(Token = "0x1700003A")]
	private static IntPtr VideoPlayerClass
	{
		[Token(Token = "0x6000296")]
		[Address(RVA = "0xE43F7C", Offset = "0xE43F7C", VA = "0xE43F7C")]
		get
		{
			return default(IntPtr);
		}
	}

	[Token(Token = "0x1700003B")]
	private static IntPtr Activity
	{
		[Token(Token = "0x6000297")]
		[Address(RVA = "0xE44238", Offset = "0xE44238", VA = "0xE44238")]
		get
		{
			return default(IntPtr);
		}
	}

	[Token(Token = "0x1700003C")]
	public static bool IsAvailable
	{
		[Token(Token = "0x6000298")]
		[Address(RVA = "0xE444A4", Offset = "0xE444A4", VA = "0xE444A4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700003D")]
	public static bool IsPlaying
	{
		[Token(Token = "0x6000299")]
		[Address(RVA = "0xE44508", Offset = "0xE44508", VA = "0xE44508")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700003E")]
	public static PlabackState CurrentPlaybackState
	{
		[Token(Token = "0x600029A")]
		[Address(RVA = "0xE445FC", Offset = "0xE445FC", VA = "0xE445FC")]
		get
		{
			return default(PlabackState);
		}
	}

	[Token(Token = "0x1700003F")]
	public static long Duration
	{
		[Token(Token = "0x600029B")]
		[Address(RVA = "0xE446F4", Offset = "0xE446F4", VA = "0xE446F4")]
		get
		{
			return default(long);
		}
	}

	[Token(Token = "0x17000040")]
	public static StereoMode VideoStereoMode
	{
		[Token(Token = "0x600029C")]
		[Address(RVA = "0xE447EC", Offset = "0xE447EC", VA = "0xE447EC")]
		get
		{
			return default(StereoMode);
		}
	}

	[Token(Token = "0x17000041")]
	public static int VideoWidth
	{
		[Token(Token = "0x600029D")]
		[Address(RVA = "0xE448E4", Offset = "0xE448E4", VA = "0xE448E4")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000042")]
	public static int VideoHeight
	{
		[Token(Token = "0x600029E")]
		[Address(RVA = "0xE449DC", Offset = "0xE449DC", VA = "0xE449DC")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000043")]
	public static long PlaybackPosition
	{
		[Token(Token = "0x600029F")]
		[Address(RVA = "0xE44AD4", Offset = "0xE44AD4", VA = "0xE44AD4")]
		get
		{
			return default(long);
		}
		[Token(Token = "0x60002A0")]
		[Address(RVA = "0xE44BCC", Offset = "0xE44BCC", VA = "0xE44BCC")]
		set
		{
		}
	}

	[Token(Token = "0x60002A1")]
	[Address(RVA = "0xE44D24", Offset = "0xE44D24", VA = "0xE44D24")]
	public static void PlayVideo(string path, string drmLicenseUrl, IntPtr surfaceObj)
	{
	}

	[Token(Token = "0x60002A2")]
	[Address(RVA = "0xE44F2C", Offset = "0xE44F2C", VA = "0xE44F2C")]
	public static void Stop()
	{
	}

	[Token(Token = "0x60002A3")]
	[Address(RVA = "0xE45024", Offset = "0xE45024", VA = "0xE45024")]
	public static void Play()
	{
	}

	[Token(Token = "0x60002A4")]
	[Address(RVA = "0xE4511C", Offset = "0xE4511C", VA = "0xE4511C")]
	public static void Pause()
	{
	}

	[Token(Token = "0x60002A5")]
	[Address(RVA = "0xE45214", Offset = "0xE45214", VA = "0xE45214")]
	public static void SetPlaybackSpeed(float speed)
	{
	}

	[Token(Token = "0x60002A6")]
	[Address(RVA = "0xE45374", Offset = "0xE45374", VA = "0xE45374")]
	public static void SetLooping(bool looping)
	{
	}

	[Token(Token = "0x60002A7")]
	[Address(RVA = "0xE454D0", Offset = "0xE454D0", VA = "0xE454D0")]
	public static void SetListenerRotation(Quaternion rotation)
	{
	}
}
[Token(Token = "0x200008E")]
public class ButtonDownListener : MonoBehaviour, IPointerDownHandler, IEventSystemHandler
{
	[Token(Token = "0x1400000F")]
	public event Action onButtonDown
	{
		[Token(Token = "0x60002A9")]
		[Address(RVA = "0xE45714", Offset = "0xE45714", VA = "0xE45714")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60002AA")]
		[Address(RVA = "0xE457B0", Offset = "0xE457B0", VA = "0xE457B0")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x60002AB")]
	[Address(RVA = "0xE4584C", Offset = "0xE4584C", VA = "0xE4584C", Slot = "4")]
	public void OnPointerDown(PointerEventData eventData)
	{
	}

	[Token(Token = "0x60002AC")]
	[Address(RVA = "0xE45868", Offset = "0xE45868", VA = "0xE45868")]
	public ButtonDownListener()
	{
	}
}
[Token(Token = "0x200008F")]
public class MediaPlayerImage : Image
{
	[Token(Token = "0x2000090")]
	public enum ButtonType
	{
		[Token(Token = "0x4000301")]
		Play,
		[Token(Token = "0x4000302")]
		Pause,
		[Token(Token = "0x4000303")]
		FastForward,
		[Token(Token = "0x4000304")]
		Rewind,
		[Token(Token = "0x4000305")]
		SkipForward,
		[Token(Token = "0x4000306")]
		SkipBack,
		[Token(Token = "0x4000307")]
		Stop
	}

	[Token(Token = "0x40002FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	[SerializeField]
	private ButtonType m_ButtonType;

	[Token(Token = "0x17000044")]
	public ButtonType buttonType
	{
		[Token(Token = "0x60002AD")]
		[Address(RVA = "0xE45870", Offset = "0xE45870", VA = "0xE45870")]
		get
		{
			return default(ButtonType);
		}
		[Token(Token = "0x60002AE")]
		[Address(RVA = "0xE45878", Offset = "0xE45878", VA = "0xE45878")]
		set
		{
		}
	}

	[Token(Token = "0x60002AF")]
	[Address(RVA = "0xE4589C", Offset = "0xE4589C", VA = "0xE4589C", Slot = "44")]
	protected override void OnPopulateMesh(VertexHelper toFill)
	{
	}

	[Token(Token = "0x60002B0")]
	[Address(RVA = "0xE466F0", Offset = "0xE466F0", VA = "0xE466F0")]
	public MediaPlayerImage()
	{
	}
}
[Token(Token = "0x2000091")]
public class MoviePlayerSample : MonoBehaviour
{
	[Token(Token = "0x2000092")]
	public enum VideoShape
	{
		[Token(Token = "0x400031C")]
		_360,
		[Token(Token = "0x400031D")]
		_180,
		[Token(Token = "0x400031E")]
		Quad
	}

	[Token(Token = "0x2000093")]
	public enum VideoStereo
	{
		[Token(Token = "0x4000320")]
		Mono,
		[Token(Token = "0x4000321")]
		TopBottom,
		[Token(Token = "0x4000322")]
		LeftRight,
		[Token(Token = "0x4000323")]
		BottomTop
	}

	[Token(Token = "0x2000094")]
	[CompilerGenerated]
	private sealed class <Start>d__33 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000324")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000325")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000326")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MoviePlayerSample <>4__this;

		[Token(Token = "0x17000048")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60002C7")]
			[Address(RVA = "0xE47C08", Offset = "0xE47C08", VA = "0xE47C08", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000049")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60002C9")]
			[Address(RVA = "0xE47C50", Offset = "0xE47C50", VA = "0xE47C50", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60002C4")]
		[Address(RVA = "0xE46DD4", Offset = "0xE46DD4", VA = "0xE46DD4")]
		[DebuggerHidden]
		public <Start>d__33(int <>1__state)
		{
		}

		[Token(Token = "0x60002C5")]
		[Address(RVA = "0xE47A5C", Offset = "0xE47A5C", VA = "0xE47A5C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60002C6")]
		[Address(RVA = "0xE47A60", Offset = "0xE47A60", VA = "0xE47A60", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60002C8")]
		[Address(RVA = "0xE47C10", Offset = "0xE47C10", VA = "0xE47C10", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000308")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool videoPausedBeforeAppPause;

	[Token(Token = "0x4000309")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private VideoPlayer videoPlayer;

	[Token(Token = "0x400030A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private OVROverlay overlay;

	[Token(Token = "0x400030B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Renderer mediaRenderer;

	[Token(Token = "0x400030F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private RenderTexture copyTexture;

	[Token(Token = "0x4000310")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Material externalTex2DMaterial;

	[Token(Token = "0x4000311")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public string MovieName;

	[Token(Token = "0x4000312")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public string DrmLicenseUrl;

	[Token(Token = "0x4000313")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public bool LoopVideo;

	[Token(Token = "0x4000314")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public VideoShape Shape;

	[Token(Token = "0x4000315")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public VideoStereo Stereo;

	[Token(Token = "0x4000316")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public bool AutoDetectStereoLayout;

	[Token(Token = "0x4000317")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7D")]
	public bool DisplayMono;

	[Token(Token = "0x4000318")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private VideoShape _LastShape;

	[Token(Token = "0x4000319")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private VideoStereo _LastStereo;

	[Token(Token = "0x400031A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private bool _LastDisplayMono;

	[Token(Token = "0x17000045")]
	public bool IsPlaying
	{
		[Token(Token = "0x60002B1")]
		[Address(RVA = "0xE46748", Offset = "0xE46748", VA = "0xE46748")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60002B2")]
		[Address(RVA = "0xE46750", Offset = "0xE46750", VA = "0xE46750")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000046")]
	public long Duration
	{
		[Token(Token = "0x60002B3")]
		[Address(RVA = "0xE4675C", Offset = "0xE4675C", VA = "0xE4675C")]
		[CompilerGenerated]
		get
		{
			return default(long);
		}
		[Token(Token = "0x60002B4")]
		[Address(RVA = "0xE46764", Offset = "0xE46764", VA = "0xE46764")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000047")]
	public long PlaybackPosition
	{
		[Token(Token = "0x60002B5")]
		[Address(RVA = "0xE4676C", Offset = "0xE4676C", VA = "0xE4676C")]
		[CompilerGenerated]
		get
		{
			return default(long);
		}
		[Token(Token = "0x60002B6")]
		[Address(RVA = "0xE46774", Offset = "0xE46774", VA = "0xE46774")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x60002B7")]
	[Address(RVA = "0xE4677C", Offset = "0xE4677C", VA = "0xE4677C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60002B8")]
	[Address(RVA = "0xE46A00", Offset = "0xE46A00", VA = "0xE46A00")]
	private bool IsLocalVideo(string movieName)
	{
		return default(bool);
	}

	[Token(Token = "0x60002B9")]
	[Address(RVA = "0xE46A60", Offset = "0xE46A60", VA = "0xE46A60")]
	private void UpdateShapeAndStereo()
	{
	}

	[Token(Token = "0x60002BA")]
	[Address(RVA = "0xE46D60", Offset = "0xE46D60", VA = "0xE46D60")]
	[IteratorStateMachine(typeof(<Start>d__33))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x60002BB")]
	[Address(RVA = "0xE46DFC", Offset = "0xE46DFC", VA = "0xE46DFC")]
	public void Play(string moviePath, string drmLicencesUrl)
	{
	}

	[Token(Token = "0x60002BC")]
	[Address(RVA = "0xE470C4", Offset = "0xE470C4", VA = "0xE470C4")]
	public void Play()
	{
	}

	[Token(Token = "0x60002BD")]
	[Address(RVA = "0xE47148", Offset = "0xE47148", VA = "0xE47148")]
	public void Pause()
	{
	}

	[Token(Token = "0x60002BE")]
	[Address(RVA = "0xE471C8", Offset = "0xE471C8", VA = "0xE471C8")]
	public void SeekTo(long position)
	{
	}

	[Token(Token = "0x60002BF")]
	[Address(RVA = "0xE472B4", Offset = "0xE472B4", VA = "0xE472B4")]
	private void Update()
	{
	}

	[Token(Token = "0x60002C0")]
	[Address(RVA = "0xE47850", Offset = "0xE47850", VA = "0xE47850")]
	public void SetPlaybackSpeed(float speed)
	{
	}

	[Token(Token = "0x60002C1")]
	[Address(RVA = "0xE478EC", Offset = "0xE478EC", VA = "0xE478EC")]
	public void Stop()
	{
	}

	[Token(Token = "0x60002C2")]
	[Address(RVA = "0xE4796C", Offset = "0xE4796C", VA = "0xE4796C")]
	private void OnApplicationPause(bool appWasPaused)
	{
	}

	[Token(Token = "0x60002C3")]
	[Address(RVA = "0xE47A4C", Offset = "0xE47A4C", VA = "0xE47A4C")]
	public MoviePlayerSample()
	{
	}
}
[Token(Token = "0x2000096")]
public class MoviePlayerSampleControls : MonoBehaviour
{
	[Token(Token = "0x2000097")]
	private enum PlaybackState
	{
		[Token(Token = "0x4000340")]
		Playing,
		[Token(Token = "0x4000341")]
		Paused,
		[Token(Token = "0x4000342")]
		Rewinding,
		[Token(Token = "0x4000343")]
		FastForwarding
	}

	[Token(Token = "0x400032A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public MoviePlayerSample Player;

	[Token(Token = "0x400032B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public OVRInputModule InputModule;

	[Token(Token = "0x400032C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public OVRGazePointer GazePointer;

	[Token(Token = "0x400032D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject LeftHand;

	[Token(Token = "0x400032E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject RightHand;

	[Token(Token = "0x400032F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Canvas Canvas;

	[Token(Token = "0x4000330")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public ButtonDownListener PlayPause;

	[Token(Token = "0x4000331")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public MediaPlayerImage PlayPauseImage;

	[Token(Token = "0x4000332")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Slider ProgressBar;

	[Token(Token = "0x4000333")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public ButtonDownListener FastForward;

	[Token(Token = "0x4000334")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public MediaPlayerImage FastForwardImage;

	[Token(Token = "0x4000335")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public ButtonDownListener Rewind;

	[Token(Token = "0x4000336")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public MediaPlayerImage RewindImage;

	[Token(Token = "0x4000337")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public float TimeoutTime;

	[Token(Token = "0x4000338")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private bool _isVisible;

	[Token(Token = "0x4000339")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private float _lastButtonTime;

	[Token(Token = "0x400033A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private bool _didSeek;

	[Token(Token = "0x400033B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private long _seekPreviousPosition;

	[Token(Token = "0x400033C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private long _rewindStartPosition;

	[Token(Token = "0x400033D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private float _rewindStartTime;

	[Token(Token = "0x400033E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private PlaybackState _state;

	[Token(Token = "0x60002CC")]
	[Address(RVA = "0xE47D2C", Offset = "0xE47D2C", VA = "0xE47D2C")]
	private void Start()
	{
	}

	[Token(Token = "0x60002CD")]
	[Address(RVA = "0xE48058", Offset = "0xE48058", VA = "0xE48058")]
	private void OnPlayPauseClicked()
	{
	}

	[Token(Token = "0x60002CE")]
	[Address(RVA = "0xE48228", Offset = "0xE48228", VA = "0xE48228")]
	private void OnFastForwardClicked()
	{
	}

	[Token(Token = "0x60002CF")]
	[Address(RVA = "0xE4834C", Offset = "0xE4834C", VA = "0xE4834C")]
	private void OnRewindClicked()
	{
	}

	[Token(Token = "0x60002D0")]
	[Address(RVA = "0xE48448", Offset = "0xE48448", VA = "0xE48448")]
	private void OnSeekBarMoved(float value)
	{
	}

	[Token(Token = "0x60002D1")]
	[Address(RVA = "0xE48320", Offset = "0xE48320", VA = "0xE48320")]
	private void Seek(long pos)
	{
	}

	[Token(Token = "0x60002D2")]
	[Address(RVA = "0xE484A8", Offset = "0xE484A8", VA = "0xE484A8")]
	private void Update()
	{
	}

	[Token(Token = "0x60002D3")]
	[Address(RVA = "0xE47F58", Offset = "0xE47F58", VA = "0xE47F58")]
	private void SetVisible(bool visible)
	{
	}

	[Token(Token = "0x60002D4")]
	[Address(RVA = "0xE487D8", Offset = "0xE487D8", VA = "0xE487D8")]
	public MoviePlayerSampleControls()
	{
	}
}
[Token(Token = "0x2000098")]
public static class VectorUtil
{
	[Token(Token = "0x60002D5")]
	[Address(RVA = "0xE477D8", Offset = "0xE477D8", VA = "0xE477D8")]
	public static Vector4 ToVector(this Rect rect)
	{
		return default(Vector4);
	}
}
[Token(Token = "0x2000099")]
public class AppDeeplinkUI : MonoBehaviour
{
	[Token(Token = "0x4000344")]
	private const ulong UNITY_COMPANION_APP_ID = 3535750239844224uL;

	[Token(Token = "0x4000345")]
	private const ulong UNREAL_COMPANION_APP_ID = 4055411724486843uL;

	[Token(Token = "0x4000346")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private RectTransform deeplinkAppId;

	[Token(Token = "0x4000347")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private RectTransform deeplinkMessage;

	[Token(Token = "0x4000348")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private RectTransform uiLaunchType;

	[Token(Token = "0x4000349")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private RectTransform uiLaunchSource;

	[Token(Token = "0x400034A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private RectTransform uiDeepLinkMessage;

	[Token(Token = "0x400034B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool inMenu;

	[Token(Token = "0x60002D6")]
	[Address(RVA = "0xE487E8", Offset = "0xE487E8", VA = "0xE487E8")]
	private void Start()
	{
	}

	[Token(Token = "0x60002D7")]
	[Address(RVA = "0xE48E24", Offset = "0xE48E24", VA = "0xE48E24")]
	private void Update()
	{
	}

	[Token(Token = "0x60002D8")]
	[Address(RVA = "0xE49080", Offset = "0xE49080", VA = "0xE49080")]
	private void LaunchUnrealDeeplinkSample()
	{
	}

	[Token(Token = "0x60002D9")]
	[Address(RVA = "0xE491E4", Offset = "0xE491E4", VA = "0xE491E4")]
	private void LaunchSelf()
	{
	}

	[Token(Token = "0x60002DA")]
	[Address(RVA = "0xE4934C", Offset = "0xE4934C", VA = "0xE4934C")]
	private void LaunchOtherApp()
	{
	}

	[Token(Token = "0x60002DB")]
	[Address(RVA = "0xE494D0", Offset = "0xE494D0", VA = "0xE494D0")]
	public AppDeeplinkUI()
	{
	}
}
[Token(Token = "0x200009A")]
public class CustomDebugUI : MonoBehaviour
{
	[Token(Token = "0x400034C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private RectTransform textPrefab;

	[Token(Token = "0x400034D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static CustomDebugUI instance;

	[Token(Token = "0x400034E")]
	private const BindingFlags privateFlags = BindingFlags.Instance | BindingFlags.NonPublic;

	[Token(Token = "0x60002DC")]
	[Address(RVA = "0xE494E0", Offset = "0xE494E0", VA = "0xE494E0")]
	private void Awake()
	{
	}

	[Token(Token = "0x60002DD")]
	[Address(RVA = "0xE49538", Offset = "0xE49538", VA = "0xE49538")]
	private void Start()
	{
	}

	[Token(Token = "0x60002DE")]
	[Address(RVA = "0xE4953C", Offset = "0xE4953C", VA = "0xE4953C")]
	private void Update()
	{
	}

	[Token(Token = "0x60002DF")]
	[Address(RVA = "0xE48BCC", Offset = "0xE48BCC", VA = "0xE48BCC")]
	public RectTransform AddTextField(string label, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x60002E0")]
	[Address(RVA = "0xE49540", Offset = "0xE49540", VA = "0xE49540")]
	public void RemoveFromCanvas(RectTransform element, int targetCanvas = 0)
	{
	}

	[Token(Token = "0x60002E1")]
	[Address(RVA = "0xE4975C", Offset = "0xE4975C", VA = "0xE4975C")]
	public CustomDebugUI()
	{
	}
}
[Token(Token = "0x200009B")]
public class DebugUISample : MonoBehaviour
{
	[Token(Token = "0x400034F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool inMenu;

	[Token(Token = "0x4000350")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Text sliderText;

	[Token(Token = "0x60002E2")]
	[Address(RVA = "0xE49764", Offset = "0xE49764", VA = "0xE49764")]
	private void Start()
	{
	}

	[Token(Token = "0x60002E3")]
	[Address(RVA = "0xE49CBC", Offset = "0xE49CBC", VA = "0xE49CBC")]
	public void TogglePressed(Toggle t)
	{
	}

	[Token(Token = "0x60002E4")]
	[Address(RVA = "0xE49D68", Offset = "0xE49D68", VA = "0xE49D68")]
	public void RadioPressed(string radioLabel, string group, Toggle t)
	{
	}

	[Token(Token = "0x60002E5")]
	[Address(RVA = "0xE49FF8", Offset = "0xE49FF8", VA = "0xE49FF8")]
	public void SliderPressed(float f)
	{
	}

	[Token(Token = "0x60002E6")]
	[Address(RVA = "0xE4A0CC", Offset = "0xE4A0CC", VA = "0xE4A0CC")]
	private void Update()
	{
	}

	[Token(Token = "0x60002E7")]
	[Address(RVA = "0xE4A1A4", Offset = "0xE4A1A4", VA = "0xE4A1A4")]
	private void LogButtonPressed()
	{
	}

	[Token(Token = "0x60002E8")]
	[Address(RVA = "0xE4A20C", Offset = "0xE4A20C", VA = "0xE4A20C")]
	public DebugUISample()
	{
	}
}
[Token(Token = "0x200009C")]
public class AnalyticsUI : MonoBehaviour
{
	[Token(Token = "0x60002ED")]
	[Address(RVA = "0xE4A3B4", Offset = "0xE4A3B4", VA = "0xE4A3B4")]
	public AnalyticsUI()
	{
	}
}
[Token(Token = "0x200009D")]
public class SampleUI : MonoBehaviour
{
	[Token(Token = "0x4000351")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private RectTransform collectionButton;

	[Token(Token = "0x4000352")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private RectTransform inputText;

	[Token(Token = "0x4000353")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private RectTransform valueText;

	[Token(Token = "0x4000354")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool inMenu;

	[Token(Token = "0x60002EE")]
	[Address(RVA = "0xE4A3BC", Offset = "0xE4A3BC", VA = "0xE4A3BC")]
	private void Start()
	{
	}

	[Token(Token = "0x60002EF")]
	[Address(RVA = "0xE4A454", Offset = "0xE4A454", VA = "0xE4A454")]
	private void Update()
	{
	}

	[Token(Token = "0x60002F0")]
	[Address(RVA = "0xE4A52C", Offset = "0xE4A52C", VA = "0xE4A52C")]
	private string GetText()
	{
		return null;
	}

	[Token(Token = "0x60002F1")]
	[Address(RVA = "0xE4A588", Offset = "0xE4A588", VA = "0xE4A588")]
	public SampleUI()
	{
	}
}
[Token(Token = "0x200009E")]
public class StartCrashlytics : MonoBehaviour
{
	[Token(Token = "0x60002F2")]
	[Address(RVA = "0xE4A590", Offset = "0xE4A590", VA = "0xE4A590")]
	public StartCrashlytics()
	{
	}
}
[Token(Token = "0x200009F")]
public class HandsActiveChecker : MonoBehaviour
{
	[Token(Token = "0x20000A0")]
	[CompilerGenerated]
	private sealed class <GetCenterEye>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000359")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400035A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400035B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HandsActiveChecker <>4__this;

		[Token(Token = "0x1700004A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60002FA")]
			[Address(RVA = "0xE4A9A0", Offset = "0xE4A9A0", VA = "0xE4A9A0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700004B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60002FC")]
			[Address(RVA = "0xE4A9E8", Offset = "0xE4A9E8", VA = "0xE4A9E8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60002F7")]
		[Address(RVA = "0xE4A83C", Offset = "0xE4A83C", VA = "0xE4A83C")]
		[DebuggerHidden]
		public <GetCenterEye>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x60002F8")]
		[Address(RVA = "0xE4A86C", Offset = "0xE4A86C", VA = "0xE4A86C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60002F9")]
		[Address(RVA = "0xE4A870", Offset = "0xE4A870", VA = "0xE4A870", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60002FB")]
		[Address(RVA = "0xE4A9A8", Offset = "0xE4A9A8", VA = "0xE4A9A8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000355")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject _notificationPrefab;

	[Token(Token = "0x4000356")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private GameObject _notification;

	[Token(Token = "0x4000357")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private OVRCameraRig _cameraRig;

	[Token(Token = "0x4000358")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform _centerEye;

	[Token(Token = "0x60002F3")]
	[Address(RVA = "0xE4A598", Offset = "0xE4A598", VA = "0xE4A598")]
	private void Awake()
	{
	}

	[Token(Token = "0x60002F4")]
	[Address(RVA = "0xE4A6A4", Offset = "0xE4A6A4", VA = "0xE4A6A4")]
	private void Update()
	{
	}

	[Token(Token = "0x60002F5")]
	[Address(RVA = "0xE4A630", Offset = "0xE4A630", VA = "0xE4A630")]
	[IteratorStateMachine(typeof(<GetCenterEye>d__6))]
	private IEnumerator GetCenterEye()
	{
		return null;
	}

	[Token(Token = "0x60002F6")]
	[Address(RVA = "0xE4A864", Offset = "0xE4A864", VA = "0xE4A864")]
	public HandsActiveChecker()
	{
	}
}
[Token(Token = "0x20000A1")]
[ExecuteInEditMode]
public class CharacterCapsule : MonoBehaviour
{
	[Token(Token = "0x400035C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private CharacterController _character;

	[Token(Token = "0x400035D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private MeshFilter _meshFilter;

	[Token(Token = "0x400035E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float _height;

	[Token(Token = "0x400035F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float _radius;

	[Token(Token = "0x4000360")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Range(4f, 32f)]
	public int SubdivisionsU;

	[Token(Token = "0x4000361")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[Range(4f, 32f)]
	public int SubdivisionsV;

	[Token(Token = "0x4000362")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int _subdivisionU;

	[Token(Token = "0x4000363")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private int _subdivisionV;

	[Token(Token = "0x4000364")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Vector3[] _vertices;

	[Token(Token = "0x4000365")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int[] _triangles;

	[Token(Token = "0x60002FD")]
	[Address(RVA = "0xE4A9F0", Offset = "0xE4A9F0", VA = "0xE4A9F0")]
	private void Update()
	{
	}

	[Token(Token = "0x60002FE")]
	[Address(RVA = "0xE4C398", Offset = "0xE4C398", VA = "0xE4C398")]
	public CharacterCapsule()
	{
	}
}
[Token(Token = "0x20000A2")]
public class LocomotionSampleSupport : MonoBehaviour
{
	[Token(Token = "0x4000366")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private LocomotionController lc;

	[Token(Token = "0x4000367")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool inMenu;

	[Token(Token = "0x1700004C")]
	private LocomotionTeleport TeleportController
	{
		[Token(Token = "0x60002FF")]
		[Address(RVA = "0xE4C3A0", Offset = "0xE4C3A0", VA = "0xE4C3A0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000300")]
	[Address(RVA = "0xE4C3F0", Offset = "0xE4C3F0", VA = "0xE4C3F0")]
	public void Start()
	{
	}

	[Token(Token = "0x6000301")]
	[Address(RVA = "0xE4C808", Offset = "0xE4C808", VA = "0xE4C808")]
	public void Update()
	{
	}

	[Token(Token = "0x6000302")]
	[Address(RVA = "0xE4C8E0", Offset = "0xE4C8E0", VA = "0xE4C8E0")]
	[Conditional("DEBUG_LOCOMOTION_PANEL")]
	private static void Log(string msg)
	{
	}

	[Token(Token = "0x6000303")]
	public static TActivate ActivateCategory<TCategory, TActivate>(GameObject target) where TCategory : MonoBehaviour where TActivate : MonoBehaviour
	{
		return null;
	}

	[Token(Token = "0x6000304")]
	protected void ActivateHandlers<TInput, TAim, TTarget, TOrientation, TTransition>() where TInput : TeleportInputHandler where TAim : TeleportAimHandler where TTarget : TeleportTargetHandler where TOrientation : TeleportOrientationHandler where TTransition : TeleportTransition
	{
	}

	[Token(Token = "0x6000305")]
	protected void ActivateInput<TActivate>() where TActivate : TeleportInputHandler
	{
	}

	[Token(Token = "0x6000306")]
	protected void ActivateAim<TActivate>() where TActivate : TeleportAimHandler
	{
	}

	[Token(Token = "0x6000307")]
	protected void ActivateTarget<TActivate>() where TActivate : TeleportTargetHandler
	{
	}

	[Token(Token = "0x6000308")]
	protected void ActivateOrientation<TActivate>() where TActivate : TeleportOrientationHandler
	{
	}

	[Token(Token = "0x6000309")]
	protected void ActivateTransition<TActivate>() where TActivate : TeleportTransition
	{
	}

	[Token(Token = "0x600030A")]
	protected TActivate ActivateCategory<TCategory, TActivate>() where TCategory : MonoBehaviour where TActivate : MonoBehaviour
	{
		return null;
	}

	[Token(Token = "0x600030B")]
	[Address(RVA = "0xE4C938", Offset = "0xE4C938", VA = "0xE4C938")]
	protected void UpdateToggle(Toggle toggle, bool enabled)
	{
	}

	[Token(Token = "0x600030C")]
	[Address(RVA = "0xE4C978", Offset = "0xE4C978", VA = "0xE4C978")]
	private void SetupNonCap()
	{
	}

	[Token(Token = "0x600030D")]
	[Address(RVA = "0xE4C9E4", Offset = "0xE4C9E4", VA = "0xE4C9E4")]
	private void SetupTeleportDefaults()
	{
	}

	[Token(Token = "0x600030E")]
	[Address(RVA = "0xE4CB30", Offset = "0xE4CB30", VA = "0xE4CB30")]
	protected GameObject AddInstance(GameObject template, string label)
	{
		return null;
	}

	[Token(Token = "0x600030F")]
	[Address(RVA = "0xE4CC00", Offset = "0xE4CC00", VA = "0xE4CC00")]
	private void SetupNodeTeleport()
	{
	}

	[Token(Token = "0x6000310")]
	[Address(RVA = "0xE4C6E4", Offset = "0xE4C6E4", VA = "0xE4C6E4")]
	private void SetupTwoStickTeleport()
	{
	}

	[Token(Token = "0x6000311")]
	[Address(RVA = "0xE4CCD0", Offset = "0xE4CCD0", VA = "0xE4CCD0")]
	private void SetupWalkOnly()
	{
	}

	[Token(Token = "0x6000312")]
	[Address(RVA = "0xE4CD1C", Offset = "0xE4CD1C", VA = "0xE4CD1C")]
	private void SetupLeftStrafeRightTeleport()
	{
	}

	[Token(Token = "0x6000313")]
	[Address(RVA = "0xE4CE2C", Offset = "0xE4CE2C", VA = "0xE4CE2C")]
	public LocomotionSampleSupport()
	{
	}
}
[Token(Token = "0x20000A3")]
[RequireComponent(typeof(Canvas))]
public class OVROverlayCanvas : MonoBehaviour
{
	[Token(Token = "0x20000A4")]
	public enum DrawMode
	{
		[Token(Token = "0x400037D")]
		Opaque,
		[Token(Token = "0x400037E")]
		OpaqueWithClip,
		[Token(Token = "0x400037F")]
		TransparentDefaultAlpha,
		[Token(Token = "0x4000380")]
		TransparentCorrectAlpha
	}

	[Token(Token = "0x4000368")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	[SerializeField]
	private Shader _transparentShader;

	[Token(Token = "0x4000369")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[HideInInspector]
	[SerializeField]
	private Shader _opaqueShader;

	[Token(Token = "0x400036A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private RectTransform _rectTransform;

	[Token(Token = "0x400036B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Canvas _canvas;

	[Token(Token = "0x400036C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Camera _camera;

	[Token(Token = "0x400036D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private OVROverlay _overlay;

	[Token(Token = "0x400036E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private RenderTexture _renderTexture;

	[Token(Token = "0x400036F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private MeshRenderer _meshRenderer;

	[Token(Token = "0x4000370")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Mesh _quad;

	[Token(Token = "0x4000371")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Material _defaultMat;

	[Token(Token = "0x4000372")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public int MaxTextureSize;

	[Token(Token = "0x4000373")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public int MinTextureSize;

	[Token(Token = "0x4000374")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public float PixelsPerUnit;

	[Token(Token = "0x4000375")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public int DrawRate;

	[Token(Token = "0x4000376")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public int DrawFrameOffset;

	[Token(Token = "0x4000377")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public bool Expensive;

	[Token(Token = "0x4000378")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public int Layer;

	[Token(Token = "0x4000379")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public DrawMode Opacity;

	[Token(Token = "0x400037A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private bool ScaleViewport;

	[Token(Token = "0x400037B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly Plane[] _FrustumPlanes;

	[Token(Token = "0x1700004D")]
	public bool overlayEnabled
	{
		[Token(Token = "0x600031A")]
		[Address(RVA = "0xE4E470", Offset = "0xE4E470", VA = "0xE4E470")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600031B")]
		[Address(RVA = "0xE4E4F4", Offset = "0xE4E4F4", VA = "0xE4E4F4")]
		set
		{
		}
	}

	[Token(Token = "0x6000314")]
	[Address(RVA = "0xE4CE34", Offset = "0xE4CE34", VA = "0xE4CE34")]
	private void Start()
	{
	}

	[Token(Token = "0x6000315")]
	[Address(RVA = "0xE4DAF8", Offset = "0xE4DAF8", VA = "0xE4DAF8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000316")]
	[Address(RVA = "0xE4DB6C", Offset = "0xE4DB6C", VA = "0xE4DB6C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000317")]
	[Address(RVA = "0xE4DC3C", Offset = "0xE4DC3C", VA = "0xE4DC3C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000318")]
	[Address(RVA = "0xE4DD0C", Offset = "0xE4DD0C", VA = "0xE4DD0C", Slot = "4")]
	protected virtual bool ShouldRender()
	{
		return default(bool);
	}

	[Token(Token = "0x6000319")]
	[Address(RVA = "0xE4DF10", Offset = "0xE4DF10", VA = "0xE4DF10")]
	private void Update()
	{
	}

	[Token(Token = "0x600031C")]
	[Address(RVA = "0xE4E5B0", Offset = "0xE4E5B0", VA = "0xE4E5B0")]
	public OVROverlayCanvas()
	{
	}
}
[Token(Token = "0x20000A5")]
public class AugmentedObject : MonoBehaviour
{
	[Token(Token = "0x4000381")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVRInput.Controller controllerHand;

	[Token(Token = "0x4000382")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform shadow;

	[Token(Token = "0x4000383")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool groundShadow;

	[Token(Token = "0x600031E")]
	[Address(RVA = "0xE4E66C", Offset = "0xE4E66C", VA = "0xE4E66C")]
	private void Start()
	{
	}

	[Token(Token = "0x600031F")]
	[Address(RVA = "0xE4EA0C", Offset = "0xE4EA0C", VA = "0xE4EA0C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000320")]
	[Address(RVA = "0xE4EBA0", Offset = "0xE4EBA0", VA = "0xE4EBA0")]
	public void Grab(OVRInput.Controller grabHand)
	{
	}

	[Token(Token = "0x6000321")]
	[Address(RVA = "0xE4EBA8", Offset = "0xE4EBA8", VA = "0xE4EBA8")]
	public void Release()
	{
	}

	[Token(Token = "0x6000322")]
	[Address(RVA = "0xE4EB90", Offset = "0xE4EB90", VA = "0xE4EB90")]
	private void ToggleShadowType()
	{
	}

	[Token(Token = "0x6000323")]
	[Address(RVA = "0xE4EBB0", Offset = "0xE4EBB0", VA = "0xE4EBB0")]
	public AugmentedObject()
	{
	}
}
[Token(Token = "0x20000A6")]
public class BrushController : MonoBehaviour
{
	[Token(Token = "0x20000A7")]
	[CompilerGenerated]
	private sealed class <FadeCameraClearColor>d__8 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000388")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000389")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400038A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float fadeTime;

		[Token(Token = "0x400038B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Color newColor;

		[Token(Token = "0x400038C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <timer>5__2;

		[Token(Token = "0x400038D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Color <currentColor>5__3;

		[Token(Token = "0x1700004E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600032E")]
			[Address(RVA = "0xE4F2F8", Offset = "0xE4F2F8", VA = "0xE4F2F8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700004F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000330")]
			[Address(RVA = "0xE4F340", Offset = "0xE4F340", VA = "0xE4F340", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600032B")]
		[Address(RVA = "0xE4F19C", Offset = "0xE4F19C", VA = "0xE4F19C")]
		[DebuggerHidden]
		public <FadeCameraClearColor>d__8(int <>1__state)
		{
		}

		[Token(Token = "0x600032C")]
		[Address(RVA = "0xE4F1F4", Offset = "0xE4F1F4", VA = "0xE4F1F4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600032D")]
		[Address(RVA = "0xE4F1F8", Offset = "0xE4F1F8", VA = "0xE4F1F8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600032F")]
		[Address(RVA = "0xE4F300", Offset = "0xE4F300", VA = "0xE4F300", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000A8")]
	[CompilerGenerated]
	private sealed class <FadeSphere>d__9 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400038E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400038F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000390")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BrushController <>4__this;

		[Token(Token = "0x4000391")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float fadeTime;

		[Token(Token = "0x4000392")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Color newColor;

		[Token(Token = "0x4000393")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public bool disableOnFinish;

		[Token(Token = "0x4000394")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float <timer>5__2;

		[Token(Token = "0x4000395")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Color <currentColor>5__3;

		[Token(Token = "0x17000050")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000334")]
			[Address(RVA = "0xE4F4C4", Offset = "0xE4F4C4", VA = "0xE4F4C4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000051")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000336")]
			[Address(RVA = "0xE4F50C", Offset = "0xE4F50C", VA = "0xE4F50C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000331")]
		[Address(RVA = "0xE4F1C4", Offset = "0xE4F1C4", VA = "0xE4F1C4")]
		[DebuggerHidden]
		public <FadeSphere>d__9(int <>1__state)
		{
		}

		[Token(Token = "0x6000332")]
		[Address(RVA = "0xE4F348", Offset = "0xE4F348", VA = "0xE4F348", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000333")]
		[Address(RVA = "0xE4F34C", Offset = "0xE4F34C", VA = "0xE4F34C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000335")]
		[Address(RVA = "0xE4F4CC", Offset = "0xE4F4CC", VA = "0xE4F4CC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000384")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PassthroughBrush brush;

	[Token(Token = "0x4000385")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MeshRenderer backgroundSphere;

	[Token(Token = "0x4000386")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private IEnumerator grabRoutine;

	[Token(Token = "0x4000387")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private IEnumerator releaseRoutine;

	[Token(Token = "0x6000324")]
	[Address(RVA = "0xE4EBB8", Offset = "0xE4EBB8", VA = "0xE4EBB8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000325")]
	[Address(RVA = "0xE4EE98", Offset = "0xE4EE98", VA = "0xE4EE98")]
	private void Update()
	{
	}

	[Token(Token = "0x6000326")]
	[Address(RVA = "0xE4EEE8", Offset = "0xE4EEE8", VA = "0xE4EEE8")]
	public void Grab(OVRInput.Controller grabHand)
	{
	}

	[Token(Token = "0x6000327")]
	[Address(RVA = "0xE4F060", Offset = "0xE4F060", VA = "0xE4F060")]
	public void Release()
	{
	}

	[Token(Token = "0x6000328")]
	[Address(RVA = "0xE4F104", Offset = "0xE4F104", VA = "0xE4F104")]
	[IteratorStateMachine(typeof(<FadeCameraClearColor>d__8))]
	private IEnumerator FadeCameraClearColor(Color newColor, float fadeTime)
	{
		return null;
	}

	[Token(Token = "0x6000329")]
	[Address(RVA = "0xE4EFA0", Offset = "0xE4EFA0", VA = "0xE4EFA0")]
	[IteratorStateMachine(typeof(<FadeSphere>d__9))]
	private IEnumerator FadeSphere(Color newColor, float fadeTime, bool disableOnFinish = false)
	{
		return null;
	}

	[Token(Token = "0x600032A")]
	[Address(RVA = "0xE4F1EC", Offset = "0xE4F1EC", VA = "0xE4F1EC")]
	public BrushController()
	{
	}
}
[Token(Token = "0x20000A9")]
public class EnableUnpremultipliedAlpha : MonoBehaviour
{
	[Token(Token = "0x6000337")]
	[Address(RVA = "0xE4F514", Offset = "0xE4F514", VA = "0xE4F514")]
	private void Start()
	{
	}

	[Token(Token = "0x6000338")]
	[Address(RVA = "0xE4F568", Offset = "0xE4F568", VA = "0xE4F568")]
	public EnableUnpremultipliedAlpha()
	{
	}
}
[Token(Token = "0x20000AA")]
public class Flashlight : MonoBehaviour
{
	[Token(Token = "0x4000396")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject lightVolume;

	[Token(Token = "0x4000397")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Light spotlight;

	[Token(Token = "0x4000398")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject bulbGlow;

	[Token(Token = "0x6000339")]
	[Address(RVA = "0xE4F570", Offset = "0xE4F570", VA = "0xE4F570")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x600033A")]
	[Address(RVA = "0xE4F744", Offset = "0xE4F744", VA = "0xE4F744")]
	public void ToggleFlashlight()
	{
	}

	[Token(Token = "0x600033B")]
	[Address(RVA = "0xE4F7D4", Offset = "0xE4F7D4", VA = "0xE4F7D4")]
	public void EnableFlashlight(bool doEnable)
	{
	}

	[Token(Token = "0x600033C")]
	[Address(RVA = "0xE4F830", Offset = "0xE4F830", VA = "0xE4F830")]
	public Flashlight()
	{
	}
}
[Token(Token = "0x20000AB")]
public class FlashlightController : MonoBehaviour
{
	[Token(Token = "0x20000AC")]
	[CompilerGenerated]
	private sealed class <FadeLighting>d__17 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40003A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40003A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40003A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FlashlightController <>4__this;

		[Token(Token = "0x40003A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float fadeTime;

		[Token(Token = "0x40003A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Color newColor;

		[Token(Token = "0x40003A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float sceneLightIntensity;

		[Token(Token = "0x40003A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float <timer>5__2;

		[Token(Token = "0x40003AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Color <currentColor>5__3;

		[Token(Token = "0x40003AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float <currentLight>5__4;

		[Token(Token = "0x17000052")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000349")]
			[Address(RVA = "0xE50A08", Offset = "0xE50A08", VA = "0xE50A08", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000053")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600034B")]
			[Address(RVA = "0xE50A50", Offset = "0xE50A50", VA = "0xE50A50", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000346")]
		[Address(RVA = "0xE50770", Offset = "0xE50770", VA = "0xE50770")]
		[DebuggerHidden]
		public <FadeLighting>d__17(int <>1__state)
		{
		}

		[Token(Token = "0x6000347")]
		[Address(RVA = "0xE50838", Offset = "0xE50838", VA = "0xE50838", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000348")]
		[Address(RVA = "0xE5083C", Offset = "0xE5083C", VA = "0xE5083C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600034A")]
		[Address(RVA = "0xE50A10", Offset = "0xE50A10", VA = "0xE50A10", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000399")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Light sceneLight;

	[Token(Token = "0x400039A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform flashlightRoot;

	[Token(Token = "0x400039B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector3 localPosition;

	[Token(Token = "0x400039C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Quaternion localRotation;

	[Token(Token = "0x400039D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public TextMesh infoText;

	[Token(Token = "0x400039E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private GrabObject externalController;

	[Token(Token = "0x400039F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private OVRSkeleton[] skeletons;

	[Token(Token = "0x40003A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private OVRHand[] hands;

	[Token(Token = "0x40003A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private int handIndex;

	[Token(Token = "0x40003A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private bool pinching;

	[Token(Token = "0x600033D")]
	[Address(RVA = "0xE4F838", Offset = "0xE4F838", VA = "0xE4F838")]
	private void Start()
	{
	}

	[Token(Token = "0x600033E")]
	[Address(RVA = "0xE4FB20", Offset = "0xE4FB20", VA = "0xE4FB20")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x600033F")]
	[Address(RVA = "0xE4FE0C", Offset = "0xE4FE0C", VA = "0xE4FE0C")]
	private void FindHands()
	{
	}

	[Token(Token = "0x6000340")]
	[Address(RVA = "0xE50134", Offset = "0xE50134", VA = "0xE50134")]
	private void AlignWithHand(OVRHand hand, OVRSkeleton skeleton)
	{
	}

	[Token(Token = "0x6000341")]
	[Address(RVA = "0xE5040C", Offset = "0xE5040C", VA = "0xE5040C")]
	private void AlignWithController(OVRInput.Controller controller)
	{
	}

	[Token(Token = "0x6000342")]
	[Address(RVA = "0xE504F4", Offset = "0xE504F4", VA = "0xE504F4")]
	public void Grab(OVRInput.Controller grabHand)
	{
	}

	[Token(Token = "0x6000343")]
	[Address(RVA = "0xE5068C", Offset = "0xE5068C", VA = "0xE5068C")]
	public void Release()
	{
	}

	[Token(Token = "0x6000344")]
	[Address(RVA = "0xE505DC", Offset = "0xE505DC", VA = "0xE505DC")]
	[IteratorStateMachine(typeof(<FadeLighting>d__17))]
	private IEnumerator FadeLighting(Color newColor, float sceneLightIntensity, float fadeTime)
	{
		return null;
	}

	[Token(Token = "0x6000345")]
	[Address(RVA = "0xE50798", Offset = "0xE50798", VA = "0xE50798")]
	public FlashlightController()
	{
	}
}
[Token(Token = "0x20000AD")]
public class GrabObject : MonoBehaviour
{
	[Token(Token = "0x20000AE")]
	public enum ManipulationType
	{
		[Token(Token = "0x40003B5")]
		Default,
		[Token(Token = "0x40003B6")]
		ForcedHand,
		[Token(Token = "0x40003B7")]
		DollyHand,
		[Token(Token = "0x40003B8")]
		DollyAttached,
		[Token(Token = "0x40003B9")]
		HorizontalScaled,
		[Token(Token = "0x40003BA")]
		VerticalScaled,
		[Token(Token = "0x40003BB")]
		Menu
	}

	[Token(Token = "0x20000AF")]
	public delegate void GrabbedObject(OVRInput.Controller grabHand);

	[Token(Token = "0x20000B0")]
	public delegate void ReleasedObject();

	[Token(Token = "0x20000B1")]
	public delegate void SetCursorPosition(Vector3 cursorPosition);

	[Token(Token = "0x40003AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[TextArea]
	public string ObjectName;

	[Token(Token = "0x40003AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[TextArea]
	public string ObjectInstructions;

	[Token(Token = "0x40003AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ManipulationType objectManipulationType;

	[Token(Token = "0x40003AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool showLaserWhileGrabbed;

	[Token(Token = "0x40003B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	public Quaternion grabbedRotation;

	[Token(Token = "0x40003B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GrabbedObject GrabbedObjectDelegate;

	[Token(Token = "0x40003B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public ReleasedObject ReleasedObjectDelegate;

	[Token(Token = "0x40003B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public SetCursorPosition CursorPositionDelegate;

	[Token(Token = "0x600034C")]
	[Address(RVA = "0xE50A58", Offset = "0xE50A58", VA = "0xE50A58")]
	public void Grab(OVRInput.Controller grabHand)
	{
	}

	[Token(Token = "0x600034D")]
	[Address(RVA = "0xE50AB8", Offset = "0xE50AB8", VA = "0xE50AB8")]
	public void Release()
	{
	}

	[Token(Token = "0x600034E")]
	[Address(RVA = "0xE50AD4", Offset = "0xE50AD4", VA = "0xE50AD4")]
	public void CursorPos(Vector3 cursorPos)
	{
	}

	[Token(Token = "0x600034F")]
	[Address(RVA = "0xE50AF0", Offset = "0xE50AF0", VA = "0xE50AF0")]
	public GrabObject()
	{
	}
}
[Token(Token = "0x20000B2")]
public class HandMeshMask : MonoBehaviour
{
	[Token(Token = "0x40003BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVRSkeleton referenceHand;

	[Token(Token = "0x40003BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Material maskMaterial;

	[Token(Token = "0x40003BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("The segments around the tip of a finger")]
	public int radialDivisions;

	[Token(Token = "0x40003BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Tooltip("The fade range (finger width is 2x this)")]
	public float borderSize;

	[Token(Token = "0x40003C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("Along the fingers, each knuckle scales down by this amount.  Default is zero for uniform width along entire finger.")]
	public float fingerTaper;

	[Token(Token = "0x40003C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[Tooltip("Shorten the last bone of each finger; need this to account for bone structure (end bone is at finger tip instead of center). Default is 1.")]
	public float fingerTipLength;

	[Token(Token = "0x40003C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Tooltip("Move the base of the 4 main fingers towards the tips, to avoid a visible mesh crack between finger webbing. Default is 0.")]
	public float webOffset;

	[Token(Token = "0x40003C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float handScale;

	[Token(Token = "0x40003C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private GameObject maskMeshObject;

	[Token(Token = "0x40003C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Mesh maskMesh;

	[Token(Token = "0x40003C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3[] handVertices;

	[Token(Token = "0x40003C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Vector2[] handUVs;

	[Token(Token = "0x40003C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Color32[] handColors;

	[Token(Token = "0x40003C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private int[] handTriangles;

	[Token(Token = "0x40003CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private int vertCounter;

	[Token(Token = "0x40003CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private int triCounter;

	[Token(Token = "0x600035C")]
	[Address(RVA = "0xE50DA8", Offset = "0xE50DA8", VA = "0xE50DA8")]
	private void Awake()
	{
	}

	[Token(Token = "0x600035D")]
	[Address(RVA = "0xE51008", Offset = "0xE51008", VA = "0xE51008")]
	private void Update()
	{
	}

	[Token(Token = "0x600035E")]
	[Address(RVA = "0xE511D0", Offset = "0xE511D0", VA = "0xE511D0")]
	private void CreateHandMesh()
	{
	}

	[Token(Token = "0x600035F")]
	[Address(RVA = "0xE51824", Offset = "0xE51824", VA = "0xE51824")]
	private void AddKnuckleMesh(int knuckleVerts, float point1scale, float point2scale, Vector3 point1, Vector3 point2)
	{
	}

	[Token(Token = "0x6000360")]
	[Address(RVA = "0xE51DBC", Offset = "0xE51DBC", VA = "0xE51DBC")]
	private void AddPalmMesh(int knuckleVerts)
	{
	}

	[Token(Token = "0x6000361")]
	[Address(RVA = "0xE540C4", Offset = "0xE540C4", VA = "0xE540C4")]
	private void AddVertex(Vector3 position, Vector2 uv, Color color)
	{
	}

	[Token(Token = "0x6000362")]
	[Address(RVA = "0xE54438", Offset = "0xE54438", VA = "0xE54438")]
	public HandMeshMask()
	{
	}
}
[Token(Token = "0x20000B3")]
public class HandMeshUI : MonoBehaviour
{
	[Token(Token = "0x40003CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SphereCollider[] knobs;

	[Token(Token = "0x40003CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextMesh[] readouts;

	[Token(Token = "0x40003CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int rightHeldKnob;

	[Token(Token = "0x40003CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private int leftHeldKnob;

	[Token(Token = "0x40003D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public OVRSkeleton leftHand;

	[Token(Token = "0x40003D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public OVRSkeleton rightHand;

	[Token(Token = "0x40003D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public HandMeshMask leftMask;

	[Token(Token = "0x40003D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public HandMeshMask rightMask;

	[Token(Token = "0x6000363")]
	[Address(RVA = "0xE60770", Offset = "0xE60770", VA = "0xE60770")]
	private void Start()
	{
	}

	[Token(Token = "0x6000364")]
	[Address(RVA = "0xE60AD8", Offset = "0xE60AD8", VA = "0xE60AD8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000365")]
	[Address(RVA = "0xE6080C", Offset = "0xE6080C", VA = "0xE6080C")]
	private void SetSliderValue(int sliderID, float value, bool isNormalized)
	{
	}

	[Token(Token = "0x6000366")]
	[Address(RVA = "0xE60F40", Offset = "0xE60F40", VA = "0xE60F40")]
	private void CheckForHands()
	{
	}

	[Token(Token = "0x6000367")]
	[Address(RVA = "0xE614B0", Offset = "0xE614B0", VA = "0xE614B0")]
	public HandMeshUI()
	{
	}
}
[Token(Token = "0x20000B4")]
public class ObjectManipulator : MonoBehaviour
{
	[Token(Token = "0x20000B5")]
	[CompilerGenerated]
	private sealed class <StartDemo>d__23 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40003E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40003E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40003E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ObjectManipulator <>4__this;

		[Token(Token = "0x40003EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <timer>5__2;

		[Token(Token = "0x40003EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <fadeTime>5__3;

		[Token(Token = "0x17000054")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000377")]
			[Address(RVA = "0xE63D3C", Offset = "0xE63D3C", VA = "0xE63D3C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000055")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000379")]
			[Address(RVA = "0xE63D84", Offset = "0xE63D84", VA = "0xE63D84", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000374")]
		[Address(RVA = "0xE6367C", Offset = "0xE6367C", VA = "0xE6367C")]
		[DebuggerHidden]
		public <StartDemo>d__23(int <>1__state)
		{
		}

		[Token(Token = "0x6000375")]
		[Address(RVA = "0xE63A64", Offset = "0xE63A64", VA = "0xE63A64", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000376")]
		[Address(RVA = "0xE63A68", Offset = "0xE63A68", VA = "0xE63A68", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000378")]
		[Address(RVA = "0xE63D44", Offset = "0xE63D44", VA = "0xE63D44", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40003D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private OVRInput.Controller controller;

	[Token(Token = "0x40003D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private GameObject hoverObject;

	[Token(Token = "0x40003D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private GameObject grabObject;

	[Token(Token = "0x40003D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float grabTime;

	[Token(Token = "0x40003D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Vector3 localGrabOffset;

	[Token(Token = "0x40003D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Quaternion localGrabRotation;

	[Token(Token = "0x40003DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3 camGrabPosition;

	[Token(Token = "0x40003DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private Quaternion camGrabRotation;

	[Token(Token = "0x40003DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private Vector3 handGrabPosition;

	[Token(Token = "0x40003DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Quaternion handGrabRotation;

	[Token(Token = "0x40003DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Vector3 cursorPosition;

	[Token(Token = "0x40003DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private float rotationOffset;

	[Token(Token = "0x40003E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public LineRenderer laser;

	[Token(Token = "0x40003E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Transform objectInfo;

	[Token(Token = "0x40003E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public TextMesh objectNameLabel;

	[Token(Token = "0x40003E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public TextMesh objectInstructionsLabel;

	[Token(Token = "0x40003E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public Image objectInfoBG;

	[Token(Token = "0x40003E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public GameObject demoObjects;

	[Token(Token = "0x40003E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public OVRPassthroughLayer passthrough;

	[Token(Token = "0x6000368")]
	[Address(RVA = "0xE614C0", Offset = "0xE614C0", VA = "0xE614C0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000369")]
	[Address(RVA = "0xE616BC", Offset = "0xE616BC", VA = "0xE616BC")]
	private void Update()
	{
	}

	[Token(Token = "0x600036A")]
	[Address(RVA = "0xE625E8", Offset = "0xE625E8", VA = "0xE625E8")]
	private void GrabHoverObject(GameObject grbObj, Vector3 controllerPos, Quaternion controllerRot)
	{
	}

	[Token(Token = "0x600036B")]
	[Address(RVA = "0xE63380", Offset = "0xE63380", VA = "0xE63380")]
	private void ReleaseObject()
	{
	}

	[Token(Token = "0x600036C")]
	[Address(RVA = "0xE61648", Offset = "0xE61648", VA = "0xE61648")]
	[IteratorStateMachine(typeof(<StartDemo>d__23))]
	private IEnumerator StartDemo()
	{
		return null;
	}

	[Token(Token = "0x600036D")]
	[Address(RVA = "0xE6190C", Offset = "0xE6190C", VA = "0xE6190C")]
	private void FindHoverObject(Vector3 controllerPos, Quaternion controllerRot)
	{
	}

	[Token(Token = "0x600036E")]
	[Address(RVA = "0xE628E0", Offset = "0xE628E0", VA = "0xE628E0")]
	private void ManipulateObject(GameObject obj, Vector3 controllerPos, Quaternion controllerRot)
	{
	}

	[Token(Token = "0x600036F")]
	[Address(RVA = "0xE636A4", Offset = "0xE636A4", VA = "0xE636A4")]
	private void ClampGrabOffset(ref Vector3 localOffset, float thumbY)
	{
	}

	[Token(Token = "0x6000370")]
	[Address(RVA = "0xE63758", Offset = "0xE63758", VA = "0xE63758")]
	private Vector3 ClampScale(Vector3 localScale, Vector2 thumb)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000371")]
	[Address(RVA = "0xE63788", Offset = "0xE63788", VA = "0xE63788")]
	private void CheckForDominantHand()
	{
	}

	[Token(Token = "0x6000372")]
	[Address(RVA = "0xE63560", Offset = "0xE63560", VA = "0xE63560")]
	private void AssignInstructions(GrabObject targetObject)
	{
	}

	[Token(Token = "0x6000373")]
	[Address(RVA = "0xE63878", Offset = "0xE63878", VA = "0xE63878")]
	public ObjectManipulator()
	{
	}
}
[Token(Token = "0x20000B6")]
public class OverlayPassthrough : MonoBehaviour
{
	[Token(Token = "0x40003EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private OVRPassthroughLayer passthroughLayer;

	[Token(Token = "0x600037A")]
	[Address(RVA = "0xE63D8C", Offset = "0xE63D8C", VA = "0xE63D8C")]
	private void Start()
	{
	}

	[Token(Token = "0x600037B")]
	[Address(RVA = "0xE63EF8", Offset = "0xE63EF8", VA = "0xE63EF8")]
	private void Update()
	{
	}

	[Token(Token = "0x600037C")]
	[Address(RVA = "0xE63FAC", Offset = "0xE63FAC", VA = "0xE63FAC")]
	public OverlayPassthrough()
	{
	}
}
[Token(Token = "0x20000B7")]
public class PassthroughBrush : MonoBehaviour
{
	[Token(Token = "0x20000B8")]
	public enum BrushState
	{
		[Token(Token = "0x40003F8")]
		Idle,
		[Token(Token = "0x40003F9")]
		Inking
	}

	[Token(Token = "0x40003ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVRInput.Controller controllerHand;

	[Token(Token = "0x40003EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject lineSegmentPrefab;

	[Token(Token = "0x40003EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject lineContainer;

	[Token(Token = "0x40003F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool forceActive;

	[Token(Token = "0x40003F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private LineRenderer currentLineSegment;

	[Token(Token = "0x40003F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private List<Vector3> inkPositions;

	[Token(Token = "0x40003F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float minInkDist;

	[Token(Token = "0x40003F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float strokeWidth;

	[Token(Token = "0x40003F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float strokeLength;

	[Token(Token = "0x40003F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private BrushState brushStatus;

	[Token(Token = "0x600037D")]
	[Address(RVA = "0xE63FB4", Offset = "0xE63FB4", VA = "0xE63FB4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600037E")]
	[Address(RVA = "0xE63FBC", Offset = "0xE63FBC", VA = "0xE63FBC")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x600037F")]
	[Address(RVA = "0xE6426C", Offset = "0xE6426C", VA = "0xE6426C")]
	private void StartLine(Vector3 inkPos)
	{
	}

	[Token(Token = "0x6000380")]
	[Address(RVA = "0xE644A0", Offset = "0xE644A0", VA = "0xE644A0")]
	private void UpdateLine(Vector3 inkPos)
	{
	}

	[Token(Token = "0x6000381")]
	[Address(RVA = "0xE646E0", Offset = "0xE646E0", VA = "0xE646E0")]
	public void ClearLines()
	{
	}

	[Token(Token = "0x6000382")]
	[Address(RVA = "0xE64184", Offset = "0xE64184", VA = "0xE64184")]
	public void UndoInkLine()
	{
	}

	[Token(Token = "0x6000383")]
	[Address(RVA = "0xE647B0", Offset = "0xE647B0", VA = "0xE647B0")]
	public PassthroughBrush()
	{
	}
}
[Token(Token = "0x20000B9")]
public class PassthroughController : MonoBehaviour
{
	[Token(Token = "0x40003FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private OVRPassthroughLayer passthroughLayer;

	[Token(Token = "0x6000384")]
	[Address(RVA = "0xE6484C", Offset = "0xE6484C", VA = "0xE6484C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000385")]
	[Address(RVA = "0xE649B8", Offset = "0xE649B8", VA = "0xE649B8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000386")]
	[Address(RVA = "0xE64BA0", Offset = "0xE64BA0", VA = "0xE64BA0")]
	public PassthroughController()
	{
	}
}
[Token(Token = "0x20000BA")]
public class PassthroughProjectionSurface : MonoBehaviour
{
	[Token(Token = "0x40003FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private OVRPassthroughLayer passthroughLayer;

	[Token(Token = "0x40003FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MeshFilter projectionObject;

	[Token(Token = "0x40003FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private MeshRenderer quadOutline;

	[Token(Token = "0x6000387")]
	[Address(RVA = "0xE64BA8", Offset = "0xE64BA8", VA = "0xE64BA8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000388")]
	[Address(RVA = "0xE64D90", Offset = "0xE64D90", VA = "0xE64D90")]
	private void Update()
	{
	}

	[Token(Token = "0x6000389")]
	[Address(RVA = "0xE64F30", Offset = "0xE64F30", VA = "0xE64F30")]
	public PassthroughProjectionSurface()
	{
	}
}
[Token(Token = "0x20000BB")]
public class PassthroughStyler : MonoBehaviour
{
	[Token(Token = "0x20000BC")]
	[CompilerGenerated]
	private sealed class <FadeToCurrentStyle>d__19 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400040D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400040E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400040F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PassthroughStyler <>4__this;

		[Token(Token = "0x4000410")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float fadeTime;

		[Token(Token = "0x4000411")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <timer>5__2;

		[Token(Token = "0x4000412")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <brightness>5__3;

		[Token(Token = "0x4000413")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <contrast>5__4;

		[Token(Token = "0x4000414")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float <posterize>5__5;

		[Token(Token = "0x4000415")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Color <edgeCol>5__6;

		[Token(Token = "0x17000056")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600039C")]
			[Address(RVA = "0xE65BC0", Offset = "0xE65BC0", VA = "0xE65BC0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000057")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600039E")]
			[Address(RVA = "0xE65C08", Offset = "0xE65C08", VA = "0xE65C08", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000399")]
		[Address(RVA = "0xE658E8", Offset = "0xE658E8", VA = "0xE658E8")]
		[DebuggerHidden]
		public <FadeToCurrentStyle>d__19(int <>1__state)
		{
		}

		[Token(Token = "0x600039A")]
		[Address(RVA = "0xE65A4C", Offset = "0xE65A4C", VA = "0xE65A4C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600039B")]
		[Address(RVA = "0xE65A50", Offset = "0xE65A50", VA = "0xE65A50", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600039D")]
		[Address(RVA = "0xE65BC8", Offset = "0xE65BC8", VA = "0xE65BC8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000BD")]
	[CompilerGenerated]
	private sealed class <FadeToDefaultPassthrough>d__20 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000416")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000417")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000418")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PassthroughStyler <>4__this;

		[Token(Token = "0x4000419")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float fadeTime;

		[Token(Token = "0x400041A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <timer>5__2;

		[Token(Token = "0x400041B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <brightness>5__3;

		[Token(Token = "0x400041C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <contrast>5__4;

		[Token(Token = "0x400041D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float <posterize>5__5;

		[Token(Token = "0x400041E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Color <edgeCol>5__6;

		[Token(Token = "0x17000058")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60003A2")]
			[Address(RVA = "0xE65D98", Offset = "0xE65D98", VA = "0xE65D98", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000059")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60003A4")]
			[Address(RVA = "0xE65DE0", Offset = "0xE65DE0", VA = "0xE65DE0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600039F")]
		[Address(RVA = "0xE65910", Offset = "0xE65910", VA = "0xE65910")]
		[DebuggerHidden]
		public <FadeToDefaultPassthrough>d__20(int <>1__state)
		{
		}

		[Token(Token = "0x60003A0")]
		[Address(RVA = "0xE65C10", Offset = "0xE65C10", VA = "0xE65C10", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60003A1")]
		[Address(RVA = "0xE65C14", Offset = "0xE65C14", VA = "0xE65C14", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60003A3")]
		[Address(RVA = "0xE65DA0", Offset = "0xE65DA0", VA = "0xE65DA0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40003FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVRInput.Controller controllerHand;

	[Token(Token = "0x40003FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public OVRPassthroughLayer passthroughLayer;

	[Token(Token = "0x4000400")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private IEnumerator fadeIn;

	[Token(Token = "0x4000401")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private IEnumerator fadeOut;

	[Token(Token = "0x4000402")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public RectTransform[] menuOptions;

	[Token(Token = "0x4000403")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public RectTransform colorWheel;

	[Token(Token = "0x4000404")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Texture2D colorTexture;

	[Token(Token = "0x4000405")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3 cursorPosition;

	[Token(Token = "0x4000406")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private bool settingColor;

	[Token(Token = "0x4000407")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Color savedColor;

	[Token(Token = "0x4000408")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float savedBrightness;

	[Token(Token = "0x4000409")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private float savedContrast;

	[Token(Token = "0x400040A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float savedPosterize;

	[Token(Token = "0x400040B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public CanvasGroup mainCanvas;

	[Token(Token = "0x400040C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public GameObject[] compactObjects;

	[Token(Token = "0x600038A")]
	[Address(RVA = "0xE64F38", Offset = "0xE64F38", VA = "0xE64F38")]
	private void Start()
	{
	}

	[Token(Token = "0x600038B")]
	[Address(RVA = "0xE6526C", Offset = "0xE6526C", VA = "0xE6526C")]
	private void Update()
	{
	}

	[Token(Token = "0x600038C")]
	[Address(RVA = "0xE6560C", Offset = "0xE6560C", VA = "0xE6560C")]
	public void Grab(OVRInput.Controller grabHand)
	{
	}

	[Token(Token = "0x600038D")]
	[Address(RVA = "0xE65780", Offset = "0xE65780", VA = "0xE65780")]
	public void Release()
	{
	}

	[Token(Token = "0x600038E")]
	[Address(RVA = "0xE656FC", Offset = "0xE656FC", VA = "0xE656FC")]
	[IteratorStateMachine(typeof(<FadeToCurrentStyle>d__19))]
	private IEnumerator FadeToCurrentStyle(float fadeTime)
	{
		return null;
	}

	[Token(Token = "0x600038F")]
	[Address(RVA = "0xE65864", Offset = "0xE65864", VA = "0xE65864")]
	[IteratorStateMachine(typeof(<FadeToDefaultPassthrough>d__20))]
	private IEnumerator FadeToDefaultPassthrough(float fadeTime)
	{
		return null;
	}

	[Token(Token = "0x6000390")]
	[Address(RVA = "0xE65938", Offset = "0xE65938", VA = "0xE65938")]
	public void OnBrightnessChanged(float newValue)
	{
	}

	[Token(Token = "0x6000391")]
	[Address(RVA = "0xE65958", Offset = "0xE65958", VA = "0xE65958")]
	public void OnContrastChanged(float newValue)
	{
	}

	[Token(Token = "0x6000392")]
	[Address(RVA = "0xE65978", Offset = "0xE65978", VA = "0xE65978")]
	public void OnPosterizeChanged(float newValue)
	{
	}

	[Token(Token = "0x6000393")]
	[Address(RVA = "0xE65998", Offset = "0xE65998", VA = "0xE65998")]
	public void OnAlphaChanged(float newValue)
	{
	}

	[Token(Token = "0x6000394")]
	[Address(RVA = "0xE65204", Offset = "0xE65204", VA = "0xE65204")]
	private void ShowFullMenu(bool doShow)
	{
	}

	[Token(Token = "0x6000395")]
	[Address(RVA = "0xE659CC", Offset = "0xE659CC", VA = "0xE659CC")]
	public void Cursor(Vector3 cP)
	{
	}

	[Token(Token = "0x6000396")]
	[Address(RVA = "0xE659D8", Offset = "0xE659D8", VA = "0xE659D8")]
	public void DoColorDrag(bool doDrag)
	{
	}

	[Token(Token = "0x6000397")]
	[Address(RVA = "0xE65284", Offset = "0xE65284", VA = "0xE65284")]
	public void GetColorFromWheel()
	{
	}

	[Token(Token = "0x6000398")]
	[Address(RVA = "0xE659E4", Offset = "0xE659E4", VA = "0xE659E4")]
	public PassthroughStyler()
	{
	}
}
[Token(Token = "0x20000BE")]
public class PassthroughSurface : MonoBehaviour
{
	[Token(Token = "0x400041F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVRPassthroughLayer passthroughLayer;

	[Token(Token = "0x4000420")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MeshFilter projectionObject;

	[Token(Token = "0x60003A5")]
	[Address(RVA = "0xE65DE8", Offset = "0xE65DE8", VA = "0xE65DE8")]
	private void Start()
	{
	}

	[Token(Token = "0x60003A6")]
	[Address(RVA = "0xE65E9C", Offset = "0xE65E9C", VA = "0xE65E9C")]
	public PassthroughSurface()
	{
	}
}
[Token(Token = "0x20000BF")]
public class SceneSampler : MonoBehaviour
{
	[Token(Token = "0x4000421")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int currentSceneIndex;

	[Token(Token = "0x4000422")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject displayText;

	[Token(Token = "0x60003A7")]
	[Address(RVA = "0xE65EA4", Offset = "0xE65EA4", VA = "0xE65EA4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60003A8")]
	[Address(RVA = "0xE65F10", Offset = "0xE65F10", VA = "0xE65F10")]
	private void Update()
	{
	}

	[Token(Token = "0x60003A9")]
	[Address(RVA = "0xE66204", Offset = "0xE66204", VA = "0xE66204")]
	public SceneSampler()
	{
	}
}
[Token(Token = "0x20000C0")]
public class SelectivePassthroughExperience : MonoBehaviour
{
	[Token(Token = "0x4000423")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject leftMaskObject;

	[Token(Token = "0x4000424")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject rightMaskObject;

	[Token(Token = "0x60003AA")]
	[Address(RVA = "0xE6620C", Offset = "0xE6620C", VA = "0xE6620C")]
	private void Update()
	{
	}

	[Token(Token = "0x60003AB")]
	[Address(RVA = "0xE66660", Offset = "0xE66660", VA = "0xE66660")]
	public SelectivePassthroughExperience()
	{
	}
}
[Token(Token = "0x20000C1")]
public class SPPquad : MonoBehaviour
{
	[Token(Token = "0x4000425")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private OVRPassthroughLayer passthroughLayer;

	[Token(Token = "0x4000426")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MeshFilter projectionObject;

	[Token(Token = "0x4000427")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private OVRInput.Controller controllerHand;

	[Token(Token = "0x60003AC")]
	[Address(RVA = "0xE66668", Offset = "0xE66668", VA = "0xE66668")]
	private void Start()
	{
	}

	[Token(Token = "0x60003AD")]
	[Address(RVA = "0xE668D0", Offset = "0xE668D0", VA = "0xE668D0")]
	public void Grab(OVRInput.Controller grabHand)
	{
	}

	[Token(Token = "0x60003AE")]
	[Address(RVA = "0xE6691C", Offset = "0xE6691C", VA = "0xE6691C")]
	public void Release()
	{
	}

	[Token(Token = "0x60003AF")]
	[Address(RVA = "0xE6695C", Offset = "0xE6695C", VA = "0xE6695C")]
	public SPPquad()
	{
	}
}
[Token(Token = "0x20000C2")]
public class StartMenu : MonoBehaviour
{
	[Token(Token = "0x4000428")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVROverlay overlay;

	[Token(Token = "0x4000429")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public OVROverlay text;

	[Token(Token = "0x400042A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public OVRCameraRig vrRig;

	[Token(Token = "0x60003B0")]
	[Address(RVA = "0xE66964", Offset = "0xE66964", VA = "0xE66964")]
	private void Start()
	{
	}

	[Token(Token = "0x60003B1")]
	[Address(RVA = "0xE66B70", Offset = "0xE66B70", VA = "0xE66B70")]
	private void LoadScene(int idx)
	{
	}

	[Token(Token = "0x60003B2")]
	[Address(RVA = "0xE66C74", Offset = "0xE66C74", VA = "0xE66C74")]
	public StartMenu()
	{
	}
}
[Token(Token = "0x20000C4")]
public class ClueGrabDetection : MonoBehaviour
{
	[Token(Token = "0x400042D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Rigidbody KeysRigidbody;

	[Token(Token = "0x60003B5")]
	[Address(RVA = "0xE66C98", Offset = "0xE66C98", VA = "0xE66C98")]
	private void Start()
	{
	}

	[Token(Token = "0x60003B6")]
	[Address(RVA = "0xE66E90", Offset = "0xE66E90", VA = "0xE66E90")]
	public ClueGrabDetection()
	{
	}
}
[Token(Token = "0x20000C6")]
public class PlayerAndEightProximityCheck : MonoBehaviour
{
	[Token(Token = "0x4000430")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Collider enterCollider;

	[Token(Token = "0x4000431")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Collider exitCollider;

	[Token(Token = "0x60003BB")]
	[Address(RVA = "0xE6700C", Offset = "0xE6700C", VA = "0xE6700C")]
	private void Start()
	{
	}

	[Token(Token = "0x60003BC")]
	[Address(RVA = "0xE67010", Offset = "0xE67010", VA = "0xE67010")]
	private void Update()
	{
	}

	[Token(Token = "0x60003BD")]
	[Address(RVA = "0xE67014", Offset = "0xE67014", VA = "0xE67014")]
	public PlayerAndEightProximityCheck()
	{
	}
}
[Token(Token = "0x20000C7")]
public class TutorialVRController : MonoBehaviour
{
	[Token(Token = "0x4000432")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject leftVRController;

	[Token(Token = "0x4000433")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject leftJoyStickHighlight;

	[Token(Token = "0x4000434")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject leftGripButtonHighlight;

	[Token(Token = "0x4000435")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject leftTriggerButtonHighlight;

	[Token(Token = "0x4000436")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject rightVRController;

	[Token(Token = "0x4000437")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject rightJoyStickHighlight;

	[Token(Token = "0x4000438")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject rightGripButtonHighlight;

	[Token(Token = "0x4000439")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject rightTriggerButtonHighlight;

	[Token(Token = "0x400043A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Transform leftHand;

	[Token(Token = "0x400043B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Transform rightHand;

	[Token(Token = "0x60003BE")]
	[Address(RVA = "0xE6701C", Offset = "0xE6701C", VA = "0xE6701C")]
	private void Start()
	{
	}

	[Token(Token = "0x60003BF")]
	[Address(RVA = "0xE67380", Offset = "0xE67380", VA = "0xE67380")]
	private void ShowingGripButton()
	{
	}

	[Token(Token = "0x60003C0")]
	[Address(RVA = "0xE67430", Offset = "0xE67430", VA = "0xE67430")]
	private void ShowingTriggerButton()
	{
	}

	[Token(Token = "0x60003C1")]
	[Address(RVA = "0xE674E0", Offset = "0xE674E0", VA = "0xE674E0")]
	private void ShowingJoystick()
	{
	}

	[Token(Token = "0x60003C2")]
	[Address(RVA = "0xE672B4", Offset = "0xE672B4", VA = "0xE672B4")]
	private void ToggleVisible(bool enable)
	{
	}

	[Token(Token = "0x60003C3")]
	[Address(RVA = "0xE67590", Offset = "0xE67590", VA = "0xE67590")]
	private void Update()
	{
	}

	[Token(Token = "0x60003C4")]
	[Address(RVA = "0xE67734", Offset = "0xE67734", VA = "0xE67734")]
	public TutorialVRController()
	{
	}
}
[Token(Token = "0x20000C8")]
public class AttackParticlesController : MonoBehaviour
{
	[Token(Token = "0x400043C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float speed;

	[Token(Token = "0x400043D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ParticleSystem ps;

	[Token(Token = "0x400043E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[HideInInspector]
	public GameObject parentStaff;

	[Token(Token = "0x60003C5")]
	[Address(RVA = "0xE6773C", Offset = "0xE6773C", VA = "0xE6773C")]
	private void Start()
	{
	}

	[Token(Token = "0x60003C6")]
	[Address(RVA = "0xE677A4", Offset = "0xE677A4", VA = "0xE677A4")]
	private void Update()
	{
	}

	[Token(Token = "0x60003C7")]
	[Address(RVA = "0xE678C8", Offset = "0xE678C8", VA = "0xE678C8")]
	private void OnParticleCollision(GameObject other)
	{
	}

	[Token(Token = "0x60003C8")]
	[Address(RVA = "0xE67C34", Offset = "0xE67C34", VA = "0xE67C34")]
	public AttackParticlesController()
	{
	}
}
[Token(Token = "0x20000C9")]
public class StaffController : MonoBehaviour
{
	[Token(Token = "0x400043F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject preAttackVFX;

	[Token(Token = "0x4000440")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject attackVFX;

	[Token(Token = "0x4000441")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject collisionVFX;

	[Token(Token = "0x4000442")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private GameObject attackParticle;

	[Token(Token = "0x4000443")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private GameObject preAttackParticle;

	[Token(Token = "0x4000444")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private GameObject collisionParticle;

	[Token(Token = "0x4000445")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Vector3 attackTarget;

	[Token(Token = "0x60003C9")]
	[Address(RVA = "0xE67C44", Offset = "0xE67C44", VA = "0xE67C44")]
	private void Start()
	{
	}

	[Token(Token = "0x60003CA")]
	[Address(RVA = "0xE67C48", Offset = "0xE67C48", VA = "0xE67C48")]
	private void Update()
	{
	}

	[Token(Token = "0x60003CB")]
	[Address(RVA = "0xE679C0", Offset = "0xE679C0", VA = "0xE679C0")]
	public void particleCollision(GameObject collisionObject)
	{
	}

	[Token(Token = "0x60003CC")]
	[Address(RVA = "0xE6825C", Offset = "0xE6825C", VA = "0xE6825C")]
	public StaffController()
	{
	}
}
[Token(Token = "0x20000CA")]
[DefaultExecutionOrder(10)]
[AddComponentMenu("XR/Action Based Controller Manager")]
public class ActionBasedControllerManager : MonoBehaviour
{
	[Token(Token = "0x20000CB")]
	public enum StateId
	{
		[Token(Token = "0x400045A")]
		None,
		[Token(Token = "0x400045B")]
		Select,
		[Token(Token = "0x400045C")]
		Teleport,
		[Token(Token = "0x400045D")]
		Interact
	}

	[Serializable]
	[Token(Token = "0x20000CC")]
	public class StateEnterEvent : UnityEvent<StateId>
	{
		[Token(Token = "0x60003F6")]
		[Address(RVA = "0xE69CFC", Offset = "0xE69CFC", VA = "0xE69CFC")]
		public StateEnterEvent()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20000CD")]
	public class StateUpdateEvent : UnityEvent
	{
		[Token(Token = "0x60003F7")]
		[Address(RVA = "0xE69D44", Offset = "0xE69D44", VA = "0xE69D44")]
		public StateUpdateEvent()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20000CE")]
	public class StateExitEvent : UnityEvent<StateId>
	{
		[Token(Token = "0x60003F8")]
		[Address(RVA = "0xE69D4C", Offset = "0xE69D4C", VA = "0xE69D4C")]
		public StateExitEvent()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20000CF")]
	public class ControllerState
	{
		[Token(Token = "0x400045E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		[Tooltip("Sets the controller state to be active. For the default states, setting this value to true will automatically update their StateUpdateEvent.")]
		private bool m_Enabled;

		[Token(Token = "0x400045F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		[HideInInspector]
		private StateId m_Id;

		[Token(Token = "0x4000460")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private StateEnterEvent m_OnEnter;

		[Token(Token = "0x4000461")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private StateUpdateEvent m_OnUpdate;

		[Token(Token = "0x4000462")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private StateExitEvent m_OnExit;

		[Token(Token = "0x17000065")]
		public bool enabled
		{
			[Token(Token = "0x60003F9")]
			[Address(RVA = "0xE69D94", Offset = "0xE69D94", VA = "0xE69D94")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60003FA")]
			[Address(RVA = "0xE69D9C", Offset = "0xE69D9C", VA = "0xE69D9C")]
			set
			{
			}
		}

		[Token(Token = "0x17000066")]
		public StateId id
		{
			[Token(Token = "0x60003FB")]
			[Address(RVA = "0xE69DA8", Offset = "0xE69DA8", VA = "0xE69DA8")]
			get
			{
				return default(StateId);
			}
			[Token(Token = "0x60003FC")]
			[Address(RVA = "0xE69DB0", Offset = "0xE69DB0", VA = "0xE69DB0")]
			set
			{
			}
		}

		[Token(Token = "0x17000067")]
		public StateEnterEvent onEnter
		{
			[Token(Token = "0x60003FD")]
			[Address(RVA = "0xE69DB8", Offset = "0xE69DB8", VA = "0xE69DB8")]
			get
			{
				return null;
			}
			[Token(Token = "0x60003FE")]
			[Address(RVA = "0xE69DC0", Offset = "0xE69DC0", VA = "0xE69DC0")]
			set
			{
			}
		}

		[Token(Token = "0x17000068")]
		public StateUpdateEvent onUpdate
		{
			[Token(Token = "0x60003FF")]
			[Address(RVA = "0xE69DC8", Offset = "0xE69DC8", VA = "0xE69DC8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000400")]
			[Address(RVA = "0xE69DD0", Offset = "0xE69DD0", VA = "0xE69DD0")]
			set
			{
			}
		}

		[Token(Token = "0x17000069")]
		public StateExitEvent onExit
		{
			[Token(Token = "0x6000401")]
			[Address(RVA = "0xE69DD8", Offset = "0xE69DD8", VA = "0xE69DD8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000402")]
			[Address(RVA = "0xE69DE0", Offset = "0xE69DE0", VA = "0xE69DE0")]
			set
			{
			}
		}

		[Token(Token = "0x6000403")]
		[Address(RVA = "0xE69C04", Offset = "0xE69C04", VA = "0xE69C04")]
		public ControllerState(StateId defaultId = StateId.None)
		{
		}
	}

	[Token(Token = "0x4000446")]
	public const int kControllerManagerUpdateOrder = 10;

	[Token(Token = "0x4000447")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Space]
	[Header("Controller GameObjects")]
	[SerializeField]
	[FormerlySerializedAs("m_BaseControllerGO")]
	[Tooltip("The base controller GameObject, used for changing default settings on its components during state transitions.")]
	private GameObject m_BaseControllerGameObject;

	[Token(Token = "0x4000448")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("The teleport controller GameObject, used for changing default settings on its components during state transitions.")]
	[FormerlySerializedAs("m_TeleportControllerGO")]
	[SerializeField]
	private GameObject m_TeleportControllerGameObject;

	[Token(Token = "0x4000449")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Space]
	[Header("Controller Actions")]
	[SerializeField]
	[Tooltip("The reference to the action of activating the teleport mode for this controller.")]
	private InputActionReference m_TeleportModeActivate;

	[Token(Token = "0x400044A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("The reference to the action of canceling the teleport mode for this controller.")]
	[SerializeField]
	private InputActionReference m_TeleportModeCancel;

	[Token(Token = "0x400044B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	[Tooltip("The reference to the action of turning the XR rig with this controller.")]
	private InputActionReference m_Turn;

	[Token(Token = "0x400044C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("The reference to the action of moving the XR rig with this controller.")]
	[SerializeField]
	private InputActionReference m_Move;

	[Token(Token = "0x400044D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[FormerlySerializedAs("m_TranslateObject")]
	[Tooltip("The reference to the action of translating the selected object of this controller.")]
	[SerializeField]
	private InputActionReference m_TranslateAnchor;

	[Token(Token = "0x400044E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	[FormerlySerializedAs("m_RotateObject")]
	[Tooltip("The reference to the action of rotating the selected object of this controller.")]
	private InputActionReference m_RotateAnchor;

	[Token(Token = "0x400044F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	[Header("Default States")]
	[Space]
	[Tooltip("The default Select state and events for the controller.")]
	private ControllerState m_SelectState;

	[Token(Token = "0x4000450")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	[Tooltip("The default Teleport state and events for the controller.")]
	private ControllerState m_TeleportState;

	[Token(Token = "0x4000451")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[Tooltip("The default Interact state and events for the controller.")]
	[SerializeField]
	private ControllerState m_InteractState;

	[Token(Token = "0x4000452")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private readonly List<ControllerState> m_DefaultStates;

	[Token(Token = "0x4000453")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private XRBaseController m_BaseController;

	[Token(Token = "0x4000454")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private IXRSelectInteractor m_BaseInteractor;

	[Token(Token = "0x4000455")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private XRInteractorLineVisual m_BaseLineVisual;

	[Token(Token = "0x4000456")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private XRBaseController m_TeleportController;

	[Token(Token = "0x4000457")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private IXRInteractor m_TeleportInteractor;

	[Token(Token = "0x4000458")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private XRInteractorLineVisual m_TeleportLineVisual;

	[Token(Token = "0x1700005A")]
	public GameObject baseControllerGameObject
	{
		[Token(Token = "0x60003CD")]
		[Address(RVA = "0xE68264", Offset = "0xE68264", VA = "0xE68264")]
		get
		{
			return null;
		}
		[Token(Token = "0x60003CE")]
		[Address(RVA = "0xE6826C", Offset = "0xE6826C", VA = "0xE6826C")]
		set
		{
		}
	}

	[Token(Token = "0x1700005B")]
	public GameObject teleportControllerGameObject
	{
		[Token(Token = "0x60003CF")]
		[Address(RVA = "0xE68274", Offset = "0xE68274", VA = "0xE68274")]
		get
		{
			return null;
		}
		[Token(Token = "0x60003D0")]
		[Address(RVA = "0xE6827C", Offset = "0xE6827C", VA = "0xE6827C")]
		set
		{
		}
	}

	[Token(Token = "0x1700005C")]
	public InputActionReference teleportModeActivate
	{
		[Token(Token = "0x60003D1")]
		[Address(RVA = "0xE68284", Offset = "0xE68284", VA = "0xE68284")]
		get
		{
			return null;
		}
		[Token(Token = "0x60003D2")]
		[Address(RVA = "0xE6828C", Offset = "0xE6828C", VA = "0xE6828C")]
		set
		{
		}
	}

	[Token(Token = "0x1700005D")]
	public InputActionReference teleportModeCancel
	{
		[Token(Token = "0x60003D3")]
		[Address(RVA = "0xE68294", Offset = "0xE68294", VA = "0xE68294")]
		get
		{
			return null;
		}
		[Token(Token = "0x60003D4")]
		[Address(RVA = "0xE6829C", Offset = "0xE6829C", VA = "0xE6829C")]
		set
		{
		}
	}

	[Token(Token = "0x1700005E")]
	public InputActionReference turn
	{
		[Token(Token = "0x60003D5")]
		[Address(RVA = "0xE682A4", Offset = "0xE682A4", VA = "0xE682A4")]
		get
		{
			return null;
		}
		[Token(Token = "0x60003D6")]
		[Address(RVA = "0xE682AC", Offset = "0xE682AC", VA = "0xE682AC")]
		set
		{
		}
	}

	[Token(Token = "0x1700005F")]
	public InputActionReference move
	{
		[Token(Token = "0x60003D7")]
		[Address(RVA = "0xE682B4", Offset = "0xE682B4", VA = "0xE682B4")]
		get
		{
			return null;
		}
		[Token(Token = "0x60003D8")]
		[Address(RVA = "0xE682BC", Offset = "0xE682BC", VA = "0xE682BC")]
		set
		{
		}
	}

	[Token(Token = "0x17000060")]
	public InputActionReference translateAnchor
	{
		[Token(Token = "0x60003D9")]
		[Address(RVA = "0xE682C4", Offset = "0xE682C4", VA = "0xE682C4")]
		get
		{
			return null;
		}
		[Token(Token = "0x60003DA")]
		[Address(RVA = "0xE682CC", Offset = "0xE682CC", VA = "0xE682CC")]
		set
		{
		}
	}

	[Token(Token = "0x17000061")]
	public InputActionReference rotateAnchor
	{
		[Token(Token = "0x60003DB")]
		[Address(RVA = "0xE682D4", Offset = "0xE682D4", VA = "0xE682D4")]
		get
		{
			return null;
		}
		[Token(Token = "0x60003DC")]
		[Address(RVA = "0xE682DC", Offset = "0xE682DC", VA = "0xE682DC")]
		set
		{
		}
	}

	[Token(Token = "0x17000062")]
	public ControllerState selectState
	{
		[Token(Token = "0x60003DD")]
		[Address(RVA = "0xE682E4", Offset = "0xE682E4", VA = "0xE682E4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000063")]
	public ControllerState teleportState
	{
		[Token(Token = "0x60003DE")]
		[Address(RVA = "0xE682EC", Offset = "0xE682EC", VA = "0xE682EC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000064")]
	public ControllerState interactState
	{
		[Token(Token = "0x60003DF")]
		[Address(RVA = "0xE682F4", Offset = "0xE682F4", VA = "0xE682F4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60003E0")]
	[Address(RVA = "0xE682FC", Offset = "0xE682FC", VA = "0xE682FC")]
	protected void OnEnable()
	{
	}

	[Token(Token = "0x60003E1")]
	[Address(RVA = "0xE68CC0", Offset = "0xE68CC0", VA = "0xE68CC0")]
	protected void OnDisable()
	{
	}

	[Token(Token = "0x60003E2")]
	[Address(RVA = "0xE6902C", Offset = "0xE6902C", VA = "0xE6902C")]
	protected void Start()
	{
	}

	[Token(Token = "0x60003E3")]
	[Address(RVA = "0xE69244", Offset = "0xE69244", VA = "0xE69244")]
	protected void Update()
	{
	}

	[Token(Token = "0x60003E4")]
	[Address(RVA = "0xE691A4", Offset = "0xE691A4", VA = "0xE691A4")]
	private void TransitionState(ControllerState fromState, ControllerState toState)
	{
	}

	[Token(Token = "0x60003E5")]
	[Address(RVA = "0xE68678", Offset = "0xE68678", VA = "0xE68678")]
	private void FindBaseControllerComponents()
	{
	}

	[Token(Token = "0x60003E6")]
	[Address(RVA = "0xE68A14", Offset = "0xE68A14", VA = "0xE68A14")]
	private void FindTeleportControllerComponents()
	{
	}

	[Token(Token = "0x60003E7")]
	[Address(RVA = "0xE693A0", Offset = "0xE693A0", VA = "0xE693A0")]
	private void SetBaseController(bool enable)
	{
	}

	[Token(Token = "0x60003E8")]
	[Address(RVA = "0xE6953C", Offset = "0xE6953C", VA = "0xE6953C")]
	private void SetTeleportController(bool enable)
	{
	}

	[Token(Token = "0x60003E9")]
	[Address(RVA = "0xE69698", Offset = "0xE69698", VA = "0xE69698")]
	private void OnEnterSelectState(StateId previousStateId)
	{
	}

	[Token(Token = "0x60003EA")]
	[Address(RVA = "0xE69734", Offset = "0xE69734", VA = "0xE69734")]
	private void OnExitSelectState(StateId nextStateId)
	{
	}

	[Token(Token = "0x60003EB")]
	[Address(RVA = "0xE697BC", Offset = "0xE697BC", VA = "0xE697BC")]
	private void OnEnterTeleportState(StateId previousStateId)
	{
	}

	[Token(Token = "0x60003EC")]
	[Address(RVA = "0xE697C4", Offset = "0xE697C4", VA = "0xE697C4")]
	private void OnExitTeleportState(StateId nextStateId)
	{
	}

	[Token(Token = "0x60003ED")]
	[Address(RVA = "0xE697CC", Offset = "0xE697CC", VA = "0xE697CC")]
	private void OnEnterInteractState(StateId previousStateId)
	{
	}

	[Token(Token = "0x60003EE")]
	[Address(RVA = "0xE697E8", Offset = "0xE697E8", VA = "0xE697E8")]
	private void OnExitInteractState(StateId nextStateId)
	{
	}

	[Token(Token = "0x60003EF")]
	[Address(RVA = "0xE69804", Offset = "0xE69804", VA = "0xE69804")]
	private void OnUpdateSelectState()
	{
	}

	[Token(Token = "0x60003F0")]
	[Address(RVA = "0xE699B0", Offset = "0xE699B0", VA = "0xE699B0")]
	private void OnUpdateTeleportState()
	{
	}

	[Token(Token = "0x60003F1")]
	[Address(RVA = "0xE69A30", Offset = "0xE69A30", VA = "0xE69A30")]
	private void OnUpdateInteractState()
	{
	}

	[Token(Token = "0x60003F2")]
	[Address(RVA = "0xE69700", Offset = "0xE69700", VA = "0xE69700")]
	private static void EnableAction(InputActionReference actionReference)
	{
	}

	[Token(Token = "0x60003F3")]
	[Address(RVA = "0xE69788", Offset = "0xE69788", VA = "0xE69788")]
	private static void DisableAction(InputActionReference actionReference)
	{
	}

	[Token(Token = "0x60003F4")]
	[Address(RVA = "0xE6992C", Offset = "0xE6992C", VA = "0xE6992C")]
	private static InputAction GetInputAction(InputActionReference actionReference)
	{
		return null;
	}

	[Token(Token = "0x60003F5")]
	[Address(RVA = "0xE69AF0", Offset = "0xE69AF0", VA = "0xE69AF0")]
	public ActionBasedControllerManager()
	{
	}
}
[Token(Token = "0x20000D0")]
public class ActionStateParser : MonoBehaviour
{
	[Token(Token = "0x4000463")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	public InputActionProperty inputAction;

	[Token(Token = "0x4000464")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private InputAction _inputAction;

	[Token(Token = "0x4000465")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public UnityEvent<InputAction.CallbackContext> OnStarted;

	[Token(Token = "0x4000466")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public UnityEvent<InputAction.CallbackContext> OnPerformed;

	[Token(Token = "0x4000467")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public UnityEvent<InputAction.CallbackContext> OnCanceled;

	[Token(Token = "0x6000404")]
	[Address(RVA = "0xE69DE8", Offset = "0xE69DE8", VA = "0xE69DE8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000405")]
	[Address(RVA = "0xE69F50", Offset = "0xE69F50", VA = "0xE69F50")]
	public ActionStateParser()
	{
	}
}
[Token(Token = "0x20000D1")]
public class ActivateGravityOnGrab : MonoBehaviour
{
	[Token(Token = "0x4000468")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Grabbable thisGrabbable;

	[Token(Token = "0x4000469")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Rigidbody thisRigidbody;

	[Token(Token = "0x6000406")]
	[Address(RVA = "0xE69F58", Offset = "0xE69F58", VA = "0xE69F58")]
	private void Start()
	{
	}

	[Token(Token = "0x6000407")]
	[Address(RVA = "0xE6A05C", Offset = "0xE6A05C", VA = "0xE6A05C")]
	private void Activate(Autohand.Hand hand, Grabbable grabbable)
	{
	}

	[Token(Token = "0x6000408")]
	[Address(RVA = "0xE6A094", Offset = "0xE6A094", VA = "0xE6A094")]
	public ActivateGravityOnGrab()
	{
	}
}
[Token(Token = "0x20000D2")]
public class AnimationCollisionTrigger : MonoBehaviour
{
	[Token(Token = "0x400046A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Animator animator;

	[Token(Token = "0x400046B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string enterAnimation;

	[Token(Token = "0x400046C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string exitAnimation;

	[Token(Token = "0x6000409")]
	[Address(RVA = "0xE6A09C", Offset = "0xE6A09C", VA = "0xE6A09C")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600040A")]
	[Address(RVA = "0xE6A118", Offset = "0xE6A118", VA = "0xE6A118")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x600040B")]
	[Address(RVA = "0xE6A194", Offset = "0xE6A194", VA = "0xE6A194")]
	public AnimationCollisionTrigger()
	{
	}
}
[Token(Token = "0x20000D3")]
public class AssessmentEvent
{
	[Token(Token = "0x400046D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Guid assessmentId;

	[Token(Token = "0x400046E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Guid questionId;

	[Token(Token = "0x400046F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AssessmentQuestionType questionType;

	[Token(Token = "0x4000470")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float score;

	[Token(Token = "0x4000471")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public long epochMilliseconds;

	[Token(Token = "0x600040C")]
	[Address(RVA = "0xE6A19C", Offset = "0xE6A19C", VA = "0xE6A19C")]
	public AssessmentEvent(Guid assessmentId, Guid questionId, AssessmentQuestionType questionType, float score)
	{
	}
}
[Token(Token = "0x20000D4")]
public enum AssessmentQuestionType
{
	[Token(Token = "0x4000473")]
	Card,
	[Token(Token = "0x4000474")]
	CuratedMultiChoice
}
[Token(Token = "0x20000D5")]
public class LocalizedString
{
	[Token(Token = "0x4000475")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int id;

	[Token(Token = "0x4000476")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string localizedString;

	[Token(Token = "0x600040D")]
	[Address(RVA = "0xE6A268", Offset = "0xE6A268", VA = "0xE6A268")]
	public LocalizedString()
	{
	}

	[Token(Token = "0x600040E")]
	[Address(RVA = "0xE6A270", Offset = "0xE6A270", VA = "0xE6A270")]
	public LocalizedString(APIGetAppStringsForLanguage.ResponseString responseString)
	{
	}
}
[Token(Token = "0x20000D6")]
public class AssetBundleMeta
{
	[Token(Token = "0x4000477")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string bundle;

	[Token(Token = "0x4000478")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string bundleS3URL;

	[Token(Token = "0x4000479")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public uint version;

	[Token(Token = "0x400047A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool active;

	[Token(Token = "0x600040F")]
	[Address(RVA = "0xE6A2B0", Offset = "0xE6A2B0", VA = "0xE6A2B0")]
	public AssetBundleMeta(APIGetAssetBundlesMeta.ResponseAssetBundle rsb, bool useDev)
	{
	}
}
[Token(Token = "0x20000D7")]
public class CardPosition
{
	[Token(Token = "0x400047B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Guid cardId;

	[Token(Token = "0x400047C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Room room;

	[Token(Token = "0x400047D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Vector3 position;

	[Token(Token = "0x400047E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector3 eulerRotation;

	[Token(Token = "0x6000410")]
	[Address(RVA = "0xE6A604", Offset = "0xE6A604", VA = "0xE6A604")]
	public CardPosition(Guid cardId, Room room, Vector3 position, Vector3 eulerRotation)
	{
	}

	[Token(Token = "0x6000411")]
	[Address(RVA = "0xE6A67C", Offset = "0xE6A67C", VA = "0xE6A67C")]
	public CardPosition(APIGetCardPositionsInStack.ResponseCardPosition responseCardPosition, Room room)
	{
	}

	[Token(Token = "0x6000412")]
	[Address(RVA = "0xE6A6E0", Offset = "0xE6A6E0", VA = "0xE6A6E0")]
	public CardPosition(CardPackage card, Room room)
	{
	}
}
[Token(Token = "0x20000D8")]
public class BasicCard
{
	[Token(Token = "0x400047F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Guid cardId;

	[Token(Token = "0x4000480")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string frontText;

	[Token(Token = "0x4000481")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string backText;

	[Token(Token = "0x4000482")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Guid propId;

	[Token(Token = "0x4000483")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public string propName;

	[Token(Token = "0x4000484")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool isStackParent;

	[Token(Token = "0x4000485")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public string backNote;

	[Token(Token = "0x4000486")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public ImageMeta frontImageMeta;

	[Token(Token = "0x4000487")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public ImageMeta backImageMeta;

	[Token(Token = "0x6000413")]
	[Address(RVA = "0xE6A754", Offset = "0xE6A754", VA = "0xE6A754")]
	public BasicCard(Guid cardId, string frontText, string backText, Guid propId, string propName, bool isStackParent, string backNote)
	{
	}

	[Token(Token = "0x6000414")]
	[Address(RVA = "0xE6A804", Offset = "0xE6A804", VA = "0xE6A804")]
	public BasicCard(APIGetCardsInStack.ResponseCard responseCard)
	{
	}

	[Token(Token = "0x6000415")]
	[Address(RVA = "0xE6ACE0", Offset = "0xE6ACE0", VA = "0xE6ACE0")]
	public BasicCard(BasicCard bc)
	{
	}
}
[Token(Token = "0x20000D9")]
public class DeckListItem
{
	[Token(Token = "0x4000488")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Guid deckId;

	[Token(Token = "0x4000489")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string deckName;

	[Token(Token = "0x400048A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool viewAccess;

	[Token(Token = "0x400048B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool editAccess;

	[Token(Token = "0x400048C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public string creator;

	[Token(Token = "0x400048D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool librariumDeck;

	[Token(Token = "0x400048E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float overallRating;

	[Token(Token = "0x400048F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public int userRating;

	[Token(Token = "0x4000490")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public Language language;

	[Token(Token = "0x4000491")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool skipProgramaticMultipleChoice;

	[Token(Token = "0x4000492")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	public bool skipCuratedMultipleChoice;

	[Token(Token = "0x6000416")]
	[Address(RVA = "0xE6AD80", Offset = "0xE6AD80", VA = "0xE6AD80")]
	public DeckListItem(APIGetDeckListItem.ResponseDeckListItem responseItem)
	{
	}

	[Token(Token = "0x6000417")]
	[Address(RVA = "0xE6AE14", Offset = "0xE6AE14", VA = "0xE6AE14")]
	public DeckListItem(APIGetUserDeckList.ResponseUserDeckListItem responseItem)
	{
	}
}
[Token(Token = "0x20000DA")]
public class Bundle
{
	[Token(Token = "0x4000493")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Guid itemId;

	[Token(Token = "0x4000494")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool isDeck;

	[Token(Token = "0x4000495")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string name;

	[Token(Token = "0x4000496")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public string description;

	[Token(Token = "0x4000497")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int itemCount;

	[Token(Token = "0x4000498")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public string color;

	[Token(Token = "0x4000499")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public List<MarketplaceListing> listings;

	[Token(Token = "0x400049A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public List<ImageMeta> images;

	[Token(Token = "0x400049B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public List<Bundle> children;

	[Token(Token = "0x6000418")]
	[Address(RVA = "0xE6AEA8", Offset = "0xE6AEA8", VA = "0xE6AEA8")]
	public Bundle()
	{
	}

	[Token(Token = "0x6000419")]
	[Address(RVA = "0xE6AEB0", Offset = "0xE6AEB0", VA = "0xE6AEB0")]
	public Bundle(APIGetFullBundleSetForItem.ResponseMarketplaceBundle responseMarketplaceBundle)
	{
	}
}
[Token(Token = "0x20000DB")]
public class MarketplaceListing
{
	[Token(Token = "0x400049C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Guid listingId;

	[Token(Token = "0x400049D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ListingType listingType;

	[Token(Token = "0x600041A")]
	[Address(RVA = "0xE6B30C", Offset = "0xE6B30C", VA = "0xE6B30C")]
	public MarketplaceListing(APIGetFullBundleSetForItem.ResponseListing rl)
	{
	}
}
[Token(Token = "0x20000DC")]
public class ImageMeta
{
	[Token(Token = "0x400049E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string image;

	[Token(Token = "0x400049F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string imageS3url;

	[Token(Token = "0x600041B")]
	[Address(RVA = "0xE6A964", Offset = "0xE6A964", VA = "0xE6A964")]
	public ImageMeta(ResponseS3Image ri)
	{
	}
}
[Token(Token = "0x20000DD")]
public enum ListingType
{
	[Token(Token = "0x40004A1")]
	Test,
	[Token(Token = "0x40004A2")]
	Purchase,
	[Token(Token = "0x40004A3")]
	MonthlySubscription
}
[Token(Token = "0x20000DE")]
public class SearchItem
{
	[Token(Token = "0x40004A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Guid itemId;

	[Token(Token = "0x40004A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public SearchItemType itemType;

	[Token(Token = "0x40004A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string name;

	[Token(Token = "0x40004A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public string description;

	[Token(Token = "0x40004A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int itemCount;

	[Token(Token = "0x600041C")]
	[Address(RVA = "0xE6B350", Offset = "0xE6B350", VA = "0xE6B350")]
	public SearchItem(APIGetItemsForSearch.ResponseItemSearch ris)
	{
	}
}
[Token(Token = "0x20000DF")]
public enum SearchItemType
{
	[Token(Token = "0x40004AA")]
	MarketplaceMegaBundle = 3,
	[Token(Token = "0x40004AB")]
	MarketplaceBundle = 2,
	[Token(Token = "0x40004AC")]
	MarketplaceDeck = 1,
	[Token(Token = "0x40004AD")]
	CommunityDeck = 0
}
[Token(Token = "0x20000E0")]
public class PropMeta
{
	[Token(Token = "0x40004AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Guid propId;

	[Token(Token = "0x40004AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string name;

	[Token(Token = "0x40004B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string prefabName;

	[Token(Token = "0x40004B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public string assetBundle;

	[Token(Token = "0x600041D")]
	[Address(RVA = "0xE6B3BC", Offset = "0xE6B3BC", VA = "0xE6B3BC")]
	public PropMeta(APIGetProps.ResponseProp rp)
	{
	}
}
[Token(Token = "0x20000E1")]
public class PurchasedItem
{
	[Token(Token = "0x40004B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string listingId;

	[Token(Token = "0x40004B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool oculusPurchased;

	[Token(Token = "0x600041E")]
	[Address(RVA = "0xE6B424", Offset = "0xE6B424", VA = "0xE6B424")]
	public PurchasedItem(APIGetPurchasedMarketplaceListings.ResponsePurchasedItem responsePurchasedItem)
	{
	}
}
[Token(Token = "0x20000E2")]
public class APICommunicator : MonoBehaviour
{
	[Token(Token = "0x20000E3")]
	public enum Endpoint
	{
		[Token(Token = "0x40004C5")]
		Register,
		[Token(Token = "0x40004C6")]
		Login,
		[Token(Token = "0x40004C7")]
		SessionLogin,
		[Token(Token = "0x40004C8")]
		RefreshToken,
		[Token(Token = "0x40004C9")]
		AddUserEvent,
		[Token(Token = "0x40004CA")]
		GetDynamoDecks,
		[Token(Token = "0x40004CB")]
		LoadCardsInDynamoDeck,
		[Token(Token = "0x40004CC")]
		GetMatch,
		[Token(Token = "0x40004CD")]
		SaveCard,
		[Token(Token = "0x40004CE")]
		AddDeck,
		[Token(Token = "0x40004CF")]
		GetDeck,
		[Token(Token = "0x40004D0")]
		DeleteCard,
		[Token(Token = "0x40004D1")]
		StartAssessment,
		[Token(Token = "0x40004D2")]
		EndAssessment,
		[Token(Token = "0x40004D3")]
		AddCardAssessment
	}

	[Token(Token = "0x20000E4")]
	[CompilerGenerated]
	private sealed class <Start>d__16 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40004D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40004D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40004D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public APICommunicator <>4__this;

		[Token(Token = "0x1700006A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600042F")]
			[Address(RVA = "0xE6C104", Offset = "0xE6C104", VA = "0xE6C104", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700006B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000431")]
			[Address(RVA = "0xE6C14C", Offset = "0xE6C14C", VA = "0xE6C14C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600042C")]
		[Address(RVA = "0xE6B4DC", Offset = "0xE6B4DC", VA = "0xE6B4DC")]
		[DebuggerHidden]
		public <Start>d__16(int <>1__state)
		{
		}

		[Token(Token = "0x600042D")]
		[Address(RVA = "0xE6BEA8", Offset = "0xE6BEA8", VA = "0xE6BEA8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600042E")]
		[Address(RVA = "0xE6BEAC", Offset = "0xE6BEAC", VA = "0xE6BEAC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000430")]
		[Address(RVA = "0xE6C10C", Offset = "0xE6C10C", VA = "0xE6C10C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000E5")]
	[CompilerGenerated]
	private sealed class <DoDeleteCard>d__18 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40004D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40004D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40004D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public APICommunicator <>4__this;

		[Token(Token = "0x40004DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string cardID;

		[Token(Token = "0x40004DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private UnityWebRequest <uwr>5__2;

		[Token(Token = "0x1700006C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000436")]
			[Address(RVA = "0xE6C454", Offset = "0xE6C454", VA = "0xE6C454", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700006D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000438")]
			[Address(RVA = "0xE6C49C", Offset = "0xE6C49C", VA = "0xE6C49C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000432")]
		[Address(RVA = "0xE6B770", Offset = "0xE6B770", VA = "0xE6B770")]
		[DebuggerHidden]
		public <DoDeleteCard>d__18(int <>1__state)
		{
		}

		[Token(Token = "0x6000433")]
		[Address(RVA = "0xE6C154", Offset = "0xE6C154", VA = "0xE6C154", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000434")]
		[Address(RVA = "0xE6C170", Offset = "0xE6C170", VA = "0xE6C170", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000435")]
		[Address(RVA = "0xE6C3A4", Offset = "0xE6C3A4", VA = "0xE6C3A4")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x6000437")]
		[Address(RVA = "0xE6C45C", Offset = "0xE6C45C", VA = "0xE6C45C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000E6")]
	[CompilerGenerated]
	private sealed class <>c__DisplayClass19_0
	{
		[Token(Token = "0x40004DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool rdsCallSuccess;

		[Token(Token = "0x40004DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public APICommunicator <>4__this;

		[Token(Token = "0x40004DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public APIGetUserDeckList getDecksComm;

		[Token(Token = "0x6000439")]
		[Address(RVA = "0xE6C4A4", Offset = "0xE6C4A4", VA = "0xE6C4A4")]
		public <>c__DisplayClass19_0()
		{
		}

		[Token(Token = "0x600043A")]
		[Address(RVA = "0xE6C4AC", Offset = "0xE6C4AC", VA = "0xE6C4AC")]
		internal void <MigrateDecksToRDS>b__0(bool success)
		{
		}
	}

	[Token(Token = "0x20000E7")]
	[CompilerGenerated]
	private sealed class <>c__DisplayClass19_1
	{
		[Token(Token = "0x40004DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public KeyValuePair<string, SerializableDeck> kvp;

		[Token(Token = "0x40004E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public <>c__DisplayClass19_0 CS$<>8__locals1;

		[Token(Token = "0x600043B")]
		[Address(RVA = "0xE6C4DC", Offset = "0xE6C4DC", VA = "0xE6C4DC")]
		public <>c__DisplayClass19_1()
		{
		}

		[Token(Token = "0x600043C")]
		[Address(RVA = "0xE6C4E4", Offset = "0xE6C4E4", VA = "0xE6C4E4")]
		internal bool <MigrateDecksToRDS>b__1(DeckListItem x)
		{
			return default(bool);
		}
	}

	[Token(Token = "0x20000E8")]
	[CompilerGenerated]
	private sealed class <>c__DisplayClass19_2
	{
		[Token(Token = "0x40004E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public APICreateDeck createDeckComm;

		[Token(Token = "0x40004E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public <>c__DisplayClass19_1 CS$<>8__locals2;

		[Token(Token = "0x600043D")]
		[Address(RVA = "0xE6C53C", Offset = "0xE6C53C", VA = "0xE6C53C")]
		public <>c__DisplayClass19_2()
		{
		}

		[Token(Token = "0x600043E")]
		[Address(RVA = "0xE6C544", Offset = "0xE6C544", VA = "0xE6C544")]
		internal void <MigrateDecksToRDS>b__2(bool rdsCallSuccess)
		{
		}
	}

	[Token(Token = "0x20000E9")]
	[CompilerGenerated]
	private sealed class <MigrateDecksToRDS>d__19 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40004E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40004E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40004E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public APICommunicator <>4__this;

		[Token(Token = "0x40004E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private <>c__DisplayClass19_0 <>8__1;

		[Token(Token = "0x40004E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private <>c__DisplayClass19_2 <>8__2;

		[Token(Token = "0x40004E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Dictionary<string, SerializableDeck>.Enumerator <>7__wrap1;

		[Token(Token = "0x40004E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int <cardOrderZeroIndex>5__3;

		[Token(Token = "0x40004EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private List<SerializableProp>.Enumerator <>7__wrap3;

		[Token(Token = "0x40004EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private SerializableProp <zeroCard>5__5;

		[Token(Token = "0x40004EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private int <cardOrderFirstIndex>5__6;

		[Token(Token = "0x40004ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private List<SerializableProp>.Enumerator <>7__wrap6;

		[Token(Token = "0x40004EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private SerializableProp <firstCard>5__8;

		[Token(Token = "0x40004EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private int <cardOrderSecondIndex>5__9;

		[Token(Token = "0x40004F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private List<SerializableProp>.Enumerator <>7__wrap9;

		[Token(Token = "0x1700006E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000446")]
			[Address(RVA = "0xE6D7B0", Offset = "0xE6D7B0", VA = "0xE6D7B0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700006F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000448")]
			[Address(RVA = "0xE6D7F8", Offset = "0xE6D7F8", VA = "0xE6D7F8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600043F")]
		[Address(RVA = "0xE6B80C", Offset = "0xE6B80C", VA = "0xE6B80C")]
		[DebuggerHidden]
		public <MigrateDecksToRDS>d__19(int <>1__state)
		{
		}

		[Token(Token = "0x6000440")]
		[Address(RVA = "0xE6C580", Offset = "0xE6C580", VA = "0xE6C580", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000441")]
		[Address(RVA = "0xE6C750", Offset = "0xE6C750", VA = "0xE6C750", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000442")]
		[Address(RVA = "0xE6D760", Offset = "0xE6D760", VA = "0xE6D760")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x6000443")]
		[Address(RVA = "0xE6D710", Offset = "0xE6D710", VA = "0xE6D710")]
		private void <>m__Finally2()
		{
		}

		[Token(Token = "0x6000444")]
		[Address(RVA = "0xE6D6C0", Offset = "0xE6D6C0", VA = "0xE6D6C0")]
		private void <>m__Finally3()
		{
		}

		[Token(Token = "0x6000445")]
		[Address(RVA = "0xE6D670", Offset = "0xE6D670", VA = "0xE6D670")]
		private void <>m__Finally4()
		{
		}

		[Token(Token = "0x6000447")]
		[Address(RVA = "0xE6D7B8", Offset = "0xE6D7B8", VA = "0xE6D7B8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000EB")]
	[CompilerGenerated]
	private sealed class <MigrateCardToRDS>d__20 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40004F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40004F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40004F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public APICommunicator <>4__this;

		[Token(Token = "0x40004F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Guid deckId;

		[Token(Token = "0x40004F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Guid stackParentId;

		[Token(Token = "0x40004F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public int stackIndex;

		[Token(Token = "0x40004F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public SerializableProp card;

		[Token(Token = "0x40004FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Room room;

		[Token(Token = "0x17000070")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600044E")]
			[Address(RVA = "0xE6DCE0", Offset = "0xE6DCE0", VA = "0xE6DCE0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000071")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000450")]
			[Address(RVA = "0xE6DD28", Offset = "0xE6DD28", VA = "0xE6DD28", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600044B")]
		[Address(RVA = "0xE6B904", Offset = "0xE6B904", VA = "0xE6B904")]
		[DebuggerHidden]
		public <MigrateCardToRDS>d__20(int <>1__state)
		{
		}

		[Token(Token = "0x600044C")]
		[Address(RVA = "0xE6D834", Offset = "0xE6D834", VA = "0xE6D834", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600044D")]
		[Address(RVA = "0xE6D838", Offset = "0xE6D838", VA = "0xE6D838", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600044F")]
		[Address(RVA = "0xE6DCE8", Offset = "0xE6DCE8", VA = "0xE6DCE8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000EC")]
	[CompilerGenerated]
	private sealed class <DoLoadDynamoCardsForDeckOrStack>d__23 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40004FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40004FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40004FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public APICommunicator <>4__this;

		[Token(Token = "0x40004FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string deckOrStackId;

		[Token(Token = "0x40004FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Action<CardsInDeck> callback;

		[Token(Token = "0x4000500")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private UnityWebRequest <uwr>5__2;

		[Token(Token = "0x17000072")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000455")]
			[Address(RVA = "0xE6E22C", Offset = "0xE6E22C", VA = "0xE6E22C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000073")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000457")]
			[Address(RVA = "0xE6E274", Offset = "0xE6E274", VA = "0xE6E274", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000451")]
		[Address(RVA = "0xE6BB70", Offset = "0xE6BB70", VA = "0xE6BB70")]
		[DebuggerHidden]
		public <DoLoadDynamoCardsForDeckOrStack>d__23(int <>1__state)
		{
		}

		[Token(Token = "0x6000452")]
		[Address(RVA = "0xE6DD30", Offset = "0xE6DD30", VA = "0xE6DD30", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000453")]
		[Address(RVA = "0xE6DD4C", Offset = "0xE6DD4C", VA = "0xE6DD4C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000454")]
		[Address(RVA = "0xE6E17C", Offset = "0xE6E17C", VA = "0xE6E17C")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x6000456")]
		[Address(RVA = "0xE6E234", Offset = "0xE6E234", VA = "0xE6E234", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000ED")]
	[CompilerGenerated]
	private sealed class <DoGetDynamoDecksForUser>d__24 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000501")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000502")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000503")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public APICommunicator <>4__this;

		[Token(Token = "0x4000504")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action<List<SerializableDeck>> callback;

		[Token(Token = "0x4000505")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private UnityWebRequest <uwr>5__2;

		[Token(Token = "0x17000074")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600045C")]
			[Address(RVA = "0xE6E6AC", Offset = "0xE6E6AC", VA = "0xE6E6AC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000075")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600045E")]
			[Address(RVA = "0xE6E6F4", Offset = "0xE6E6F4", VA = "0xE6E6F4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000458")]
		[Address(RVA = "0xE6BC28", Offset = "0xE6BC28", VA = "0xE6BC28")]
		[DebuggerHidden]
		public <DoGetDynamoDecksForUser>d__24(int <>1__state)
		{
		}

		[Token(Token = "0x6000459")]
		[Address(RVA = "0xE6E27C", Offset = "0xE6E27C", VA = "0xE6E27C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600045A")]
		[Address(RVA = "0xE6E298", Offset = "0xE6E298", VA = "0xE6E298", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600045B")]
		[Address(RVA = "0xE6E5FC", Offset = "0xE6E5FC", VA = "0xE6E5FC")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x600045D")]
		[Address(RVA = "0xE6E6B4", Offset = "0xE6E6B4", VA = "0xE6E6B4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000EE")]
	[CompilerGenerated]
	private sealed class <DoGetMnemonicMatch>d__25 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000506")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000507")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000508")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string termToMatch;

		[Token(Token = "0x4000509")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public APICommunicator <>4__this;

		[Token(Token = "0x400050A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private UnityWebRequest <uwr>5__2;

		[Token(Token = "0x17000076")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000463")]
			[Address(RVA = "0xE6EB84", Offset = "0xE6EB84", VA = "0xE6EB84", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000077")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000465")]
			[Address(RVA = "0xE6EBCC", Offset = "0xE6EBCC", VA = "0xE6EBCC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600045F")]
		[Address(RVA = "0xE6BCE0", Offset = "0xE6BCE0", VA = "0xE6BCE0")]
		[DebuggerHidden]
		public <DoGetMnemonicMatch>d__25(int <>1__state)
		{
		}

		[Token(Token = "0x6000460")]
		[Address(RVA = "0xE6E6FC", Offset = "0xE6E6FC", VA = "0xE6E6FC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000461")]
		[Address(RVA = "0xE6E718", Offset = "0xE6E718", VA = "0xE6E718", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000462")]
		[Address(RVA = "0xE6EAD4", Offset = "0xE6EAD4", VA = "0xE6EAD4")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x6000464")]
		[Address(RVA = "0xE6EB8C", Offset = "0xE6EB8C", VA = "0xE6EB8C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40004B4")]
	private const string baseDevAPI = "https://hup6hqiv8g.execute-api.us-west-2.amazonaws.com/dev/";

	[Token(Token = "0x40004B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Dictionary<string, SerializableDeck> dynamoUserDecks;

	[Token(Token = "0x40004B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<DeckListItem> rdsUserDecks;

	[Token(Token = "0x40004B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Guid latestNewDeckId;

	[Token(Token = "0x40004B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Guid latestNewCardId;

	[Token(Token = "0x40004B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Guid latestNewFirstStackParentId;

	[Token(Token = "0x40004BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Guid latestNewSecondStackParentId;

	[Token(Token = "0x40004BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private int latestStackOrder;

	[Token(Token = "0x40004BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private CardsInDeck latestDynamoZeroOrderCardStack;

	[Token(Token = "0x40004BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private CardsInDeck latestDynamoFirstOrderCardStack;

	[Token(Token = "0x40004BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private CardsInDeck latestDynamoSecondOrderCardStack;

	[Token(Token = "0x40004BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Action<string> GetMnemonicMatch;

	[Token(Token = "0x40004C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static Action<string> OnMnemonicMatchReceived;

	[Token(Token = "0x40004C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static Action<string> DeleteCard;

	[Token(Token = "0x40004C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private LoginResponse registerResponse;

	[Token(Token = "0x40004C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private RefreshTokenResponse refreshTokenResponse;

	[Token(Token = "0x600041F")]
	[Address(RVA = "0xE6B468", Offset = "0xE6B468", VA = "0xE6B468")]
	[IteratorStateMachine(typeof(<Start>d__16))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x6000420")]
	[Address(RVA = "0xE6B504", Offset = "0xE6B504", VA = "0xE6B504")]
	private string GetEndpoint(Endpoint endpoint)
	{
		return null;
	}

	[Token(Token = "0x6000421")]
	[Address(RVA = "0xE6B6E0", Offset = "0xE6B6E0", VA = "0xE6B6E0")]
	[IteratorStateMachine(typeof(<DoDeleteCard>d__18))]
	private IEnumerator DoDeleteCard(string cardID)
	{
		return null;
	}

	[Token(Token = "0x6000422")]
	[Address(RVA = "0xE6B798", Offset = "0xE6B798", VA = "0xE6B798")]
	[IteratorStateMachine(typeof(<MigrateDecksToRDS>d__19))]
	public IEnumerator MigrateDecksToRDS()
	{
		return null;
	}

	[Token(Token = "0x6000423")]
	[Address(RVA = "0xE6B834", Offset = "0xE6B834", VA = "0xE6B834")]
	[IteratorStateMachine(typeof(<MigrateCardToRDS>d__20))]
	private IEnumerator MigrateCardToRDS(Guid deckId, Guid stackParentId, int stackIndex, SerializableProp card, Room room)
	{
		return null;
	}

	[Token(Token = "0x6000424")]
	[Address(RVA = "0xE6B92C", Offset = "0xE6B92C", VA = "0xE6B92C")]
	private void CatchLoadedMigrationDynamoDecks(List<SerializableDeck> loadedDecks)
	{
	}

	[Token(Token = "0x6000425")]
	[Address(RVA = "0xE6BA9C", Offset = "0xE6BA9C", VA = "0xE6BA9C")]
	private void CatchLoadedMigrationDynamoCards(CardsInDeck loadedCards)
	{
	}

	[Token(Token = "0x6000426")]
	[Address(RVA = "0xE6BACC", Offset = "0xE6BACC", VA = "0xE6BACC")]
	[IteratorStateMachine(typeof(<DoLoadDynamoCardsForDeckOrStack>d__23))]
	private IEnumerator DoLoadDynamoCardsForDeckOrStack(string deckOrStackId, Action<CardsInDeck> callback)
	{
		return null;
	}

	[Token(Token = "0x6000427")]
	[Address(RVA = "0xE6BB98", Offset = "0xE6BB98", VA = "0xE6BB98")]
	[IteratorStateMachine(typeof(<DoGetDynamoDecksForUser>d__24))]
	private IEnumerator DoGetDynamoDecksForUser(Action<List<SerializableDeck>> callback)
	{
		return null;
	}

	[Token(Token = "0x6000428")]
	[Address(RVA = "0xE6BC50", Offset = "0xE6BC50", VA = "0xE6BC50")]
	[IteratorStateMachine(typeof(<DoGetMnemonicMatch>d__25))]
	private IEnumerator DoGetMnemonicMatch(string termToMatch)
	{
		return null;
	}

	[Token(Token = "0x6000429")]
	[Address(RVA = "0xE6BD08", Offset = "0xE6BD08", VA = "0xE6BD08")]
	public APICommunicator()
	{
	}
}
[Token(Token = "0x20000EF")]
public class CardsInDeck
{
	[Token(Token = "0x400050B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string deck;

	[Token(Token = "0x400050C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<SerializableProp> cards;

	[Token(Token = "0x6000466")]
	[Address(RVA = "0xE6E174", Offset = "0xE6E174", VA = "0xE6E174")]
	public CardsInDeck()
	{
	}
}
[Token(Token = "0x20000F0")]
public class RefreshTokenResponse
{
	[Token(Token = "0x400050D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string access_token;

	[Token(Token = "0x400050E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string refresh_token;

	[Token(Token = "0x6000467")]
	[Address(RVA = "0xE6EBD4", Offset = "0xE6EBD4", VA = "0xE6EBD4")]
	public RefreshTokenResponse(string accessToken, string refreshToken)
	{
	}

	[Token(Token = "0x6000468")]
	[Address(RVA = "0xE6BE60", Offset = "0xE6BE60", VA = "0xE6BE60")]
	public RefreshTokenResponse()
	{
	}
}
[Token(Token = "0x20000F1")]
public class LoginResponse
{
	[Token(Token = "0x400050F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string user_id;

	[Token(Token = "0x4000510")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string username;

	[Token(Token = "0x4000511")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string access_token;

	[Token(Token = "0x4000512")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string refresh_token;

	[Token(Token = "0x6000469")]
	[Address(RVA = "0xE6EC18", Offset = "0xE6EC18", VA = "0xE6EC18")]
	public LoginResponse(string user_id, string username, string access_token, string refresh_token)
	{
	}

	[Token(Token = "0x600046A")]
	[Address(RVA = "0xE6BE58", Offset = "0xE6BE58", VA = "0xE6BE58")]
	public LoginResponse()
	{
	}
}
[Token(Token = "0x20000F2")]
public class ErrorResponse
{
	[Token(Token = "0x4000513")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string code;

	[Token(Token = "0x4000514")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string name;

	[Token(Token = "0x4000515")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string message;

	[Token(Token = "0x600046B")]
	[Address(RVA = "0xE6EC8C", Offset = "0xE6EC8C", VA = "0xE6EC8C")]
	public ErrorResponse(string code, string name, string message)
	{
	}
}
[Token(Token = "0x20000F3")]
public class MnemonicMatchResponse
{
	[Token(Token = "0x4000516")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string match;

	[Token(Token = "0x600046C")]
	[Address(RVA = "0xE6ECEC", Offset = "0xE6ECEC", VA = "0xE6ECEC")]
	public MnemonicMatchResponse()
	{
	}
}
[Token(Token = "0x20000F4")]
public class AssessmentManager : Singleton<AssessmentManager>
{
	[Token(Token = "0x20000F5")]
	public class GnosisCreditPayload
	{
		[Token(Token = "0x400051F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Guid processId;

		[Token(Token = "0x4000520")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float[] credits;

		[Token(Token = "0x6000480")]
		[Address(RVA = "0xE70370", Offset = "0xE70370", VA = "0xE70370")]
		public GnosisCreditPayload(Guid processId, float pointsForWrong, float pointsForRight)
		{
		}
	}

	[Token(Token = "0x20000F6")]
	[CompilerGenerated]
	private sealed class <>c__DisplayClass12_0
	{
		[Token(Token = "0x4000521")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AssessmentManager <>4__this;

		[Token(Token = "0x4000522")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public APIStartDeckSession deckSessionComm;

		[Token(Token = "0x4000523")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public APIStartAssessment assessmentComm;

		[Token(Token = "0x6000481")]
		[Address(RVA = "0xE70704", Offset = "0xE70704", VA = "0xE70704")]
		public <>c__DisplayClass12_0()
		{
		}

		[Token(Token = "0x6000482")]
		[Address(RVA = "0xE7070C", Offset = "0xE7070C", VA = "0xE7070C")]
		internal void <co_StartNewDeckSessionAndImplicitMemAssessment>b__0(bool successful)
		{
		}

		[Token(Token = "0x6000483")]
		[Address(RVA = "0xE70738", Offset = "0xE70738", VA = "0xE70738")]
		internal void <co_StartNewDeckSessionAndImplicitMemAssessment>b__1(bool successful)
		{
		}
	}

	[Token(Token = "0x20000F7")]
	[CompilerGenerated]
	private sealed class <co_StartNewDeckSessionAndImplicitMemAssessment>d__12 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000524")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000525")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000526")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AssessmentManager <>4__this;

		[Token(Token = "0x4000527")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Guid deckId;

		[Token(Token = "0x4000528")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private <>c__DisplayClass12_0 <>8__1;

		[Token(Token = "0x17000078")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000487")]
			[Address(RVA = "0xE70C24", Offset = "0xE70C24", VA = "0xE70C24", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000079")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000489")]
			[Address(RVA = "0xE70C6C", Offset = "0xE70C6C", VA = "0xE70C6C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000484")]
		[Address(RVA = "0xE6F434", Offset = "0xE6F434", VA = "0xE6F434")]
		[DebuggerHidden]
		public <co_StartNewDeckSessionAndImplicitMemAssessment>d__12(int <>1__state)
		{
		}

		[Token(Token = "0x6000485")]
		[Address(RVA = "0xE707E4", Offset = "0xE707E4", VA = "0xE707E4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000486")]
		[Address(RVA = "0xE707E8", Offset = "0xE707E8", VA = "0xE707E8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000488")]
		[Address(RVA = "0xE70C2C", Offset = "0xE70C2C", VA = "0xE70C2C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000F8")]
	[CompilerGenerated]
	private sealed class <>c__DisplayClass14_0
	{
		[Token(Token = "0x4000529")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AssessmentManager <>4__this;

		[Token(Token = "0x400052A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public APIStartAssessment startAssessmentComm;

		[Token(Token = "0x600048A")]
		[Address(RVA = "0xE70C74", Offset = "0xE70C74", VA = "0xE70C74")]
		public <>c__DisplayClass14_0()
		{
		}

		[Token(Token = "0x600048B")]
		[Address(RVA = "0xE70C7C", Offset = "0xE70C7C", VA = "0xE70C7C")]
		internal void <co_CycleMemorizationAssessment>b__0(bool successful)
		{
		}
	}

	[Token(Token = "0x20000F9")]
	[CompilerGenerated]
	private sealed class <co_CycleMemorizationAssessment>d__14 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400052B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400052C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400052D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AssessmentManager <>4__this;

		[Token(Token = "0x400052E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private <>c__DisplayClass14_0 <>8__1;

		[Token(Token = "0x1700007A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600048F")]
			[Address(RVA = "0xE71018", Offset = "0xE71018", VA = "0xE71018", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700007B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000491")]
			[Address(RVA = "0xE71060", Offset = "0xE71060", VA = "0xE71060", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600048C")]
		[Address(RVA = "0xE6F4F0", Offset = "0xE6F4F0", VA = "0xE6F4F0")]
		[DebuggerHidden]
		public <co_CycleMemorizationAssessment>d__14(int <>1__state)
		{
		}

		[Token(Token = "0x600048D")]
		[Address(RVA = "0xE70CF8", Offset = "0xE70CF8", VA = "0xE70CF8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600048E")]
		[Address(RVA = "0xE70CFC", Offset = "0xE70CFC", VA = "0xE70CFC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000490")]
		[Address(RVA = "0xE71020", Offset = "0xE71020", VA = "0xE71020", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000517")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Action<float[]> OnGnosisCredited;

	[Token(Token = "0x4000518")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool supressAssessmentSave;

	[Token(Token = "0x4000519")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Guid currentDeckSessionId;

	[Token(Token = "0x400051A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Guid currentDeckForDeckSession;

	[Token(Token = "0x400051B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Dictionary<AssessmentType, Guid> currentAssessmentIds;

	[Token(Token = "0x400051C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private List<AssessmentEvent> currentAssessmentEvents;

	[Token(Token = "0x400051D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Dictionary<AssessmentType, float[]> currentGnosisPools;

	[Token(Token = "0x400051E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private List<GnosisCreditPayload> processingGnosisCredits;

	[Token(Token = "0x600046D")]
	[Address(RVA = "0xE6ECF4", Offset = "0xE6ECF4", VA = "0xE6ECF4", Slot = "5")]
	protected override void DidAwake()
	{
	}

	[Token(Token = "0x600046E")]
	[Address(RVA = "0xE6F300", Offset = "0xE6F300", VA = "0xE6F300")]
	public bool HasCurrentDeckSession()
	{
		return default(bool);
	}

	[Token(Token = "0x600046F")]
	[Address(RVA = "0xE6F374", Offset = "0xE6F374", VA = "0xE6F374")]
	private void ToggleAssessmentSave(bool turnOn)
	{
	}

	[Token(Token = "0x6000470")]
	[Address(RVA = "0xE6F384", Offset = "0xE6F384", VA = "0xE6F384")]
	private void StartNewDeckSessionAndImplicitMemAssessment(Guid deckId)
	{
	}

	[Token(Token = "0x6000471")]
	[Address(RVA = "0xE6F3AC", Offset = "0xE6F3AC", VA = "0xE6F3AC")]
	[IteratorStateMachine(typeof(<co_StartNewDeckSessionAndImplicitMemAssessment>d__12))]
	private IEnumerator co_StartNewDeckSessionAndImplicitMemAssessment(Guid deckId)
	{
		return null;
	}

	[Token(Token = "0x6000472")]
	[Address(RVA = "0xE6F45C", Offset = "0xE6F45C", VA = "0xE6F45C")]
	public void CycleMemorizationAssessment()
	{
	}

	[Token(Token = "0x6000473")]
	[Address(RVA = "0xE6F47C", Offset = "0xE6F47C", VA = "0xE6F47C")]
	[IteratorStateMachine(typeof(<co_CycleMemorizationAssessment>d__14))]
	private IEnumerator co_CycleMemorizationAssessment()
	{
		return null;
	}

	[Token(Token = "0x6000474")]
	[Address(RVA = "0xE6F518", Offset = "0xE6F518", VA = "0xE6F518")]
	private void EndDeckSessionAndImplicitMemAssessment(Guid deckId)
	{
	}

	[Token(Token = "0x6000475")]
	[Address(RVA = "0xE6F180", Offset = "0xE6F180", VA = "0xE6F180")]
	private void ClearAndInitializeGnosisForMemSession()
	{
	}

	[Token(Token = "0x6000476")]
	[Address(RVA = "0xE6F1FC", Offset = "0xE6F1FC", VA = "0xE6F1FC")]
	private void ClearAndInitializeDataCachesForDeckSession()
	{
	}

	[Token(Token = "0x6000477")]
	[Address(RVA = "0xE6F90C", Offset = "0xE6F90C", VA = "0xE6F90C")]
	private void BeginMultipleChoiceAssessment()
	{
	}

	[Token(Token = "0x6000478")]
	[Address(RVA = "0xE6FB54", Offset = "0xE6FB54", VA = "0xE6FB54")]
	private void AddMemorizationEvent(PropMemorizationType memType, ManagedProp prop)
	{
	}

	[Token(Token = "0x6000479")]
	[Address(RVA = "0xE70008", Offset = "0xE70008", VA = "0xE70008")]
	private void AddMultipleChoiceAssessment(bool guessedRight, Guid questionId, AssessmentQuestionType qType)
	{
	}

	[Token(Token = "0x600047A")]
	[Address(RVA = "0xE6FDDC", Offset = "0xE6FDDC", VA = "0xE6FDDC")]
	private void SaveAssessmentEventSet()
	{
	}

	[Token(Token = "0x600047B")]
	[Address(RVA = "0xE70240", Offset = "0xE70240", VA = "0xE70240")]
	private void CompleteMultipleChoiceAssessment()
	{
	}

	[Token(Token = "0x600047C")]
	[Address(RVA = "0xE6FDA0", Offset = "0xE6FDA0", VA = "0xE6FDA0")]
	private float GetGnosisEarned(AssessmentType type, bool correct)
	{
		return default(float);
	}

	[Token(Token = "0x600047D")]
	[Address(RVA = "0xE6F6D0", Offset = "0xE6F6D0", VA = "0xE6F6D0")]
	private void CreditGnosis(float[] gnosisToCredit)
	{
	}

	[Token(Token = "0x600047E")]
	[Address(RVA = "0xE7041C", Offset = "0xE7041C", VA = "0xE7041C")]
	private void CreditGnosisCallback(Guid processId, bool successful, string message)
	{
	}

	[Token(Token = "0x600047F")]
	[Address(RVA = "0xE70578", Offset = "0xE70578", VA = "0xE70578")]
	public AssessmentManager()
	{
	}
}
[Token(Token = "0x20000FD")]
public enum AssessmentType
{
	[Token(Token = "0x4000535")]
	Test,
	[Token(Token = "0x4000536")]
	Memorization,
	[Token(Token = "0x4000537")]
	MultipleChoice
}
[Token(Token = "0x20000FE")]
public class AssetBundleLoader : MonoBehaviour
{
	[Token(Token = "0x20000FF")]
	[CompilerGenerated]
	private sealed class <DownloadAssetBundle>d__2 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000539")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400053A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400053B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AssetBundleLoader <>4__this;

		[Token(Token = "0x400053C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private UnityWebRequest <www>5__2;

		[Token(Token = "0x400053D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AssetBundle <bundle>5__3;

		[Token(Token = "0x400053E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private string[] <>7__wrap3;

		[Token(Token = "0x400053F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int <>7__wrap4;

		[Token(Token = "0x1700007C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600049F")]
			[Address(RVA = "0xE71480", Offset = "0xE71480", VA = "0xE71480", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700007D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60004A1")]
			[Address(RVA = "0xE714C8", Offset = "0xE714C8", VA = "0xE714C8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600049C")]
		[Address(RVA = "0xE71248", Offset = "0xE71248", VA = "0xE71248")]
		[DebuggerHidden]
		public <DownloadAssetBundle>d__2(int <>1__state)
		{
		}

		[Token(Token = "0x600049D")]
		[Address(RVA = "0xE71278", Offset = "0xE71278", VA = "0xE71278", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600049E")]
		[Address(RVA = "0xE7127C", Offset = "0xE7127C", VA = "0xE7127C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60004A0")]
		[Address(RVA = "0xE71488", Offset = "0xE71488", VA = "0xE71488", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000538")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string[] propNames;

	[Token(Token = "0x6000499")]
	[Address(RVA = "0xE711B4", Offset = "0xE711B4", VA = "0xE711B4")]
	private void Start()
	{
	}

	[Token(Token = "0x600049A")]
	[Address(RVA = "0xE711D4", Offset = "0xE711D4", VA = "0xE711D4")]
	[IteratorStateMachine(typeof(<DownloadAssetBundle>d__2))]
	private IEnumerator DownloadAssetBundle()
	{
		return null;
	}

	[Token(Token = "0x600049B")]
	[Address(RVA = "0xE71270", Offset = "0xE71270", VA = "0xE71270")]
	public AssetBundleLoader()
	{
	}
}
[Token(Token = "0x2000100")]
public class AudioManager : MonoBehaviour
{
	[Token(Token = "0x4000540")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float musicLevel;

	[Token(Token = "0x4000541")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float voiceLevel;

	[Token(Token = "0x4000542")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float sfxLevel;

	[Token(Token = "0x60004A2")]
	[Address(RVA = "0xE714D0", Offset = "0xE714D0", VA = "0xE714D0")]
	private void Awake()
	{
	}

	[Token(Token = "0x60004A3")]
	[Address(RVA = "0xE71688", Offset = "0xE71688", VA = "0xE71688")]
	private void SetMusicVolume(float value)
	{
	}

	[Token(Token = "0x60004A4")]
	[Address(RVA = "0xE71708", Offset = "0xE71708", VA = "0xE71708")]
	private void SetSFXVolume(float value)
	{
	}

	[Token(Token = "0x60004A5")]
	[Address(RVA = "0xE71788", Offset = "0xE71788", VA = "0xE71788")]
	private void SetVoiceVolume(float value)
	{
	}

	[Token(Token = "0x60004A6")]
	[Address(RVA = "0xE71808", Offset = "0xE71808", VA = "0xE71808")]
	public AudioManager()
	{
	}
}
[Token(Token = "0x2000101")]
public class AudioMixTrigger : MonoBehaviour
{
	[Token(Token = "0x4000543")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private AudioMixerSnapshot audioMixerSnapshot;

	[Token(Token = "0x60004A7")]
	[Address(RVA = "0xE71810", Offset = "0xE71810", VA = "0xE71810")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60004A8")]
	[Address(RVA = "0xE71830", Offset = "0xE71830", VA = "0xE71830")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x60004A9")]
	[Address(RVA = "0xE71850", Offset = "0xE71850", VA = "0xE71850")]
	public AudioMixTrigger()
	{
	}
}
[Token(Token = "0x2000102")]
public class AudioPlayOnCollision : MonoBehaviour
{
	[Token(Token = "0x4000544")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public new string tag;

	[Token(Token = "0x4000545")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioSource audioSource;

	[Token(Token = "0x60004AA")]
	[Address(RVA = "0xE71858", Offset = "0xE71858", VA = "0xE71858")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60004AB")]
	[Address(RVA = "0xE7189C", Offset = "0xE7189C", VA = "0xE7189C")]
	public AudioPlayOnCollision()
	{
	}
}
[Token(Token = "0x2000103")]
[RequireComponent(typeof(XRGrabInteractable))]
public class BubbleGun : MonoBehaviour
{
	[Token(Token = "0x4000546")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private XRGrabInteractable m_InteractableBase;

	[Token(Token = "0x4000547")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Animator m_Animator;

	[Token(Token = "0x4000548")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private ParticleSystem m_BubbleParticleSystem;

	[Token(Token = "0x4000549")]
	private const string k_AnimTriggerDown = "TriggerDown";

	[Token(Token = "0x400054A")]
	private const string k_AnimTriggerUp = "TriggerUp";

	[Token(Token = "0x400054B")]
	private const float k_HeldThreshold = 0.1f;

	[Token(Token = "0x400054C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float m_TriggerHeldTime;

	[Token(Token = "0x400054D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private bool m_TriggerDown;

	[Token(Token = "0x60004AC")]
	[Address(RVA = "0xE718A4", Offset = "0xE718A4", VA = "0xE718A4")]
	protected void Start()
	{
	}

	[Token(Token = "0x60004AD")]
	[Address(RVA = "0xE71AB0", Offset = "0xE71AB0", VA = "0xE71AB0")]
	protected void Update()
	{
	}

	[Token(Token = "0x60004AE")]
	[Address(RVA = "0xE71B24", Offset = "0xE71B24", VA = "0xE71B24")]
	private void TriggerReleased(DeactivateEventArgs args)
	{
	}

	[Token(Token = "0x60004AF")]
	[Address(RVA = "0xE71B90", Offset = "0xE71B90", VA = "0xE71B90")]
	private void TriggerPulled(ActivateEventArgs args)
	{
	}

	[Token(Token = "0x60004B0")]
	[Address(RVA = "0xE71BF0", Offset = "0xE71BF0", VA = "0xE71BF0")]
	private void DroppedGun(SelectExitEventArgs args)
	{
	}

	[Token(Token = "0x60004B1")]
	[Address(RVA = "0xE71C5C", Offset = "0xE71C5C", VA = "0xE71C5C")]
	public void ShootEvent()
	{
	}

	[Token(Token = "0x60004B2")]
	[Address(RVA = "0xE71C7C", Offset = "0xE71C7C", VA = "0xE71C7C")]
	public BubbleGun()
	{
	}
}
[Token(Token = "0x2000104")]
public class BurningCardEffect : MonoBehaviour
{
	[Token(Token = "0x2000105")]
	[CompilerGenerated]
	private sealed class <Start>d__3 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000551")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000552")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000553")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BurningCardEffect <>4__this;

		[Token(Token = "0x4000554")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Transform <hmd>5__2;

		[Token(Token = "0x4000555")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <currentTime>5__3;

		[Token(Token = "0x1700007E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60004B8")]
			[Address(RVA = "0xE71F64", Offset = "0xE71F64", VA = "0xE71F64", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700007F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60004BA")]
			[Address(RVA = "0xE71FAC", Offset = "0xE71FAC", VA = "0xE71FAC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60004B5")]
		[Address(RVA = "0xE71CF8", Offset = "0xE71CF8", VA = "0xE71CF8")]
		[DebuggerHidden]
		public <Start>d__3(int <>1__state)
		{
		}

		[Token(Token = "0x60004B6")]
		[Address(RVA = "0xE71D28", Offset = "0xE71D28", VA = "0xE71D28", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60004B7")]
		[Address(RVA = "0xE71D2C", Offset = "0xE71D2C", VA = "0xE71D2C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60004B9")]
		[Address(RVA = "0xE71F6C", Offset = "0xE71F6C", VA = "0xE71F6C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400054E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform target;

	[Token(Token = "0x400054F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Renderer thisRenderer;

	[Token(Token = "0x4000550")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float dissolveTime;

	[Token(Token = "0x60004B3")]
	[Address(RVA = "0xE71C84", Offset = "0xE71C84", VA = "0xE71C84")]
	[IteratorStateMachine(typeof(<Start>d__3))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x60004B4")]
	[Address(RVA = "0xE71D20", Offset = "0xE71D20", VA = "0xE71D20")]
	public BurningCardEffect()
	{
	}
}
[Token(Token = "0x2000106")]
public class ButtonTester : MonoBehaviour
{
	[Token(Token = "0x60004BB")]
	[Address(RVA = "0xE71FB4", Offset = "0xE71FB4", VA = "0xE71FB4")]
	public void Button1()
	{
	}

	[Token(Token = "0x60004BC")]
	[Address(RVA = "0xE71FB8", Offset = "0xE71FB8", VA = "0xE71FB8")]
	public void Button2()
	{
	}

	[Token(Token = "0x60004BD")]
	[Address(RVA = "0xE71FBC", Offset = "0xE71FBC", VA = "0xE71FBC")]
	public void Button3()
	{
	}

	[Token(Token = "0x60004BE")]
	[Address(RVA = "0xE71FC0", Offset = "0xE71FC0", VA = "0xE71FC0")]
	public void Button4()
	{
	}

	[Token(Token = "0x60004BF")]
	[Address(RVA = "0xE71FC4", Offset = "0xE71FC4", VA = "0xE71FC4")]
	public void Button5()
	{
	}

	[Token(Token = "0x60004C0")]
	[Address(RVA = "0xE71FC8", Offset = "0xE71FC8", VA = "0xE71FC8")]
	public void Button6()
	{
	}

	[Token(Token = "0x60004C1")]
	[Address(RVA = "0xE71FCC", Offset = "0xE71FCC", VA = "0xE71FCC")]
	public void Button7()
	{
	}

	[Token(Token = "0x60004C2")]
	[Address(RVA = "0xE71FD0", Offset = "0xE71FD0", VA = "0xE71FD0")]
	public void Button8()
	{
	}

	[Token(Token = "0x60004C3")]
	[Address(RVA = "0xE71FD4", Offset = "0xE71FD4", VA = "0xE71FD4")]
	public void Button9()
	{
	}

	[Token(Token = "0x60004C4")]
	[Address(RVA = "0xE71FD8", Offset = "0xE71FD8", VA = "0xE71FD8")]
	public void Button10()
	{
	}

	[Token(Token = "0x60004C5")]
	[Address(RVA = "0xE71FDC", Offset = "0xE71FDC", VA = "0xE71FDC")]
	public ButtonTester()
	{
	}
}
[Token(Token = "0x2000107")]
public class CardRotation : MonoBehaviour
{
	[Token(Token = "0x2000108")]
	[CompilerGenerated]
	private sealed class <WaitThenHideButtons>d__27 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400056E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400056F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000570")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float seconds;

		[Token(Token = "0x4000571")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public CardRotation <>4__this;

		[Token(Token = "0x17000080")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60004D6")]
			[Address(RVA = "0xE736B0", Offset = "0xE736B0", VA = "0xE736B0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000081")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60004D8")]
			[Address(RVA = "0xE736F8", Offset = "0xE736F8", VA = "0xE736F8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60004D3")]
		[Address(RVA = "0xE72310", Offset = "0xE72310", VA = "0xE72310")]
		[DebuggerHidden]
		public <WaitThenHideButtons>d__27(int <>1__state)
		{
		}

		[Token(Token = "0x60004D4")]
		[Address(RVA = "0xE735B8", Offset = "0xE735B8", VA = "0xE735B8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60004D5")]
		[Address(RVA = "0xE735BC", Offset = "0xE735BC", VA = "0xE735BC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60004D7")]
		[Address(RVA = "0xE736B8", Offset = "0xE736B8", VA = "0xE736B8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000109")]
	[CompilerGenerated]
	private sealed class <SetCanRotate>d__29 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000572")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000573")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000574")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CardRotation <>4__this;

		[Token(Token = "0x17000082")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60004DC")]
			[Address(RVA = "0xE737BC", Offset = "0xE737BC", VA = "0xE737BC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000083")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60004DE")]
			[Address(RVA = "0xE73804", Offset = "0xE73804", VA = "0xE73804", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60004D9")]
		[Address(RVA = "0xE72D00", Offset = "0xE72D00", VA = "0xE72D00")]
		[DebuggerHidden]
		public <SetCanRotate>d__29(int <>1__state)
		{
		}

		[Token(Token = "0x60004DA")]
		[Address(RVA = "0xE73700", Offset = "0xE73700", VA = "0xE73700", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60004DB")]
		[Address(RVA = "0xE73704", Offset = "0xE73704", VA = "0xE73704", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60004DD")]
		[Address(RVA = "0xE737C4", Offset = "0xE737C4", VA = "0xE737C4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200010A")]
	[CompilerGenerated]
	private sealed class <co_Rotate>d__34 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000575")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000576")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000577")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CardRotation <>4__this;

		[Token(Token = "0x17000084")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60004E2")]
			[Address(RVA = "0xE73F04", Offset = "0xE73F04", VA = "0xE73F04", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000085")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60004E4")]
			[Address(RVA = "0xE73F4C", Offset = "0xE73F4C", VA = "0xE73F4C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60004DF")]
		[Address(RVA = "0xE73580", Offset = "0xE73580", VA = "0xE73580")]
		[DebuggerHidden]
		public <co_Rotate>d__34(int <>1__state)
		{
		}

		[Token(Token = "0x60004E0")]
		[Address(RVA = "0xE7380C", Offset = "0xE7380C", VA = "0xE7380C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60004E1")]
		[Address(RVA = "0xE73810", Offset = "0xE73810", VA = "0xE73810", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60004E3")]
		[Address(RVA = "0xE73F0C", Offset = "0xE73F0C", VA = "0xE73F0C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000556")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public FlashcardController flashcardController;

	[Token(Token = "0x4000557")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject card;

	[Token(Token = "0x4000558")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject iconBackground;

	[Token(Token = "0x4000559")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[FormerlySerializedAs("ps")]
	public ParticleSystem pickupParticles;

	[Token(Token = "0x400055A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public TextMeshPro frontText;

	[Token(Token = "0x400055B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public TextMeshPro backText;

	[Token(Token = "0x400055C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public TextMeshPro notesText;

	[Token(Token = "0x400055D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[FormerlySerializedAs("iconText")]
	public TextMeshPro propNameLabel;

	[Token(Token = "0x400055E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public ParticleSystem successParticles;

	[Token(Token = "0x400055F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public UIManualButton notYetButton;

	[Token(Token = "0x4000560")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public UIManualButton successButton;

	[Token(Token = "0x4000561")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public GameObject notesBackground;

	[Token(Token = "0x4000562")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public AudioSource audioSource;

	[Token(Token = "0x4000563")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public AudioClip memorizedSound;

	[Token(Token = "0x4000564")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public AudioClip notYetSound;

	[Token(Token = "0x4000565")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public AudioClip cardFlipSound;

	[Token(Token = "0x4000566")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public AudioClip pickupSound;

	[Token(Token = "0x4000567")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public AudioClip buildupSound;

	[Token(Token = "0x4000568")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public bool isShowingBack;

	[Token(Token = "0x4000569")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public Action<bool> OnCardRotated;

	[Token(Token = "0x400056A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private Vector3 cardOrigSize;

	[Token(Token = "0x400056B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	private Vector3 cardOrigPos;

	[Token(Token = "0x400056C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private bool canRotate;

	[Token(Token = "0x400056D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private Action<GameObject> OnPropPickup;

	[Token(Token = "0x60004C6")]
	[Address(RVA = "0xE71FE4", Offset = "0xE71FE4", VA = "0xE71FE4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60004C7")]
	[Address(RVA = "0xE721E4", Offset = "0xE721E4", VA = "0xE721E4")]
	private void OnSuccessButtonHit()
	{
	}

	[Token(Token = "0x60004C8")]
	[Address(RVA = "0xE722BC", Offset = "0xE722BC", VA = "0xE722BC")]
	private void OnNotYetButtonHit()
	{
	}

	[Token(Token = "0x60004C9")]
	[Address(RVA = "0xE72238", Offset = "0xE72238", VA = "0xE72238")]
	[IteratorStateMachine(typeof(<WaitThenHideButtons>d__27))]
	private IEnumerator WaitThenHideButtons(float seconds)
	{
		return null;
	}

	[Token(Token = "0x60004CA")]
	[Address(RVA = "0xE72338", Offset = "0xE72338", VA = "0xE72338")]
	public void ActivateCard()
	{
	}

	[Token(Token = "0x60004CB")]
	[Address(RVA = "0xE72C8C", Offset = "0xE72C8C", VA = "0xE72C8C")]
	[IteratorStateMachine(typeof(<SetCanRotate>d__29))]
	private IEnumerator SetCanRotate()
	{
		return null;
	}

	[Token(Token = "0x60004CC")]
	[Address(RVA = "0xE72D28", Offset = "0xE72D28", VA = "0xE72D28")]
	public void DeactivateCard()
	{
	}

	[Token(Token = "0x60004CD")]
	[Address(RVA = "0xE72C34", Offset = "0xE72C34", VA = "0xE72C34")]
	private void ResetPositionAndScale()
	{
	}

	[Token(Token = "0x60004CE")]
	[Address(RVA = "0xE72AC4", Offset = "0xE72AC4", VA = "0xE72AC4")]
	private void ResetRotation()
	{
	}

	[Token(Token = "0x60004CF")]
	[Address(RVA = "0xE7349C", Offset = "0xE7349C", VA = "0xE7349C")]
	public void Rotate()
	{
	}

	[Token(Token = "0x60004D0")]
	[Address(RVA = "0xE7350C", Offset = "0xE7350C", VA = "0xE7350C")]
	[IteratorStateMachine(typeof(<co_Rotate>d__34))]
	private IEnumerator co_Rotate()
	{
		return null;
	}

	[Token(Token = "0x60004D1")]
	[Address(RVA = "0xE733E0", Offset = "0xE733E0", VA = "0xE733E0")]
	private void SetAndPublishRotationIfNeeded(bool showFront)
	{
	}

	[Token(Token = "0x60004D2")]
	[Address(RVA = "0xE735A8", Offset = "0xE735A8", VA = "0xE735A8")]
	public CardRotation()
	{
	}
}
[Token(Token = "0x200010B")]
public class ChildEnableSyncer : MonoBehaviour
{
	[Token(Token = "0x4000578")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private List<GameObject> childObjects;

	[Token(Token = "0x60004E5")]
	[Address(RVA = "0xE73F54", Offset = "0xE73F54", VA = "0xE73F54")]
	private void Awake()
	{
	}

	[Token(Token = "0x60004E6")]
	[Address(RVA = "0xE73F74", Offset = "0xE73F74", VA = "0xE73F74")]
	private void AddAllChildren(Transform thisParent)
	{
	}

	[Token(Token = "0x60004E7")]
	[Address(RVA = "0xE742F0", Offset = "0xE742F0", VA = "0xE742F0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60004E8")]
	[Address(RVA = "0xE74450", Offset = "0xE74450", VA = "0xE74450")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60004E9")]
	[Address(RVA = "0xE742F8", Offset = "0xE742F8", VA = "0xE742F8")]
	private void ToggleChildren(bool turnOn)
	{
	}

	[Token(Token = "0x60004EA")]
	[Address(RVA = "0xE74458", Offset = "0xE74458", VA = "0xE74458")]
	public ChildEnableSyncer()
	{
	}
}
[Token(Token = "0x200010C")]
public class ChoiceCube : MonoBehaviour
{
	[Token(Token = "0x200010D")]
	[CompilerGenerated]
	private sealed class <ShowArrows>d__11 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000583")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000584")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000585")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ChoiceCube <>4__this;

		[Token(Token = "0x17000086")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60004F3")]
			[Address(RVA = "0xE7540C", Offset = "0xE7540C", VA = "0xE7540C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000087")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60004F5")]
			[Address(RVA = "0xE75454", Offset = "0xE75454", VA = "0xE75454", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60004F0")]
		[Address(RVA = "0xE74610", Offset = "0xE74610", VA = "0xE74610")]
		[DebuggerHidden]
		public <ShowArrows>d__11(int <>1__state)
		{
		}

		[Token(Token = "0x60004F1")]
		[Address(RVA = "0xE74B20", Offset = "0xE74B20", VA = "0xE74B20", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60004F2")]
		[Address(RVA = "0xE74B24", Offset = "0xE74B24", VA = "0xE74B24", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60004F4")]
		[Address(RVA = "0xE75414", Offset = "0xE75414", VA = "0xE75414", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200010E")]
	[CompilerGenerated]
	private sealed class <DestroyNextFrame>d__12 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000586")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000587")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000588")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ChoiceCube <>4__this;

		[Token(Token = "0x17000088")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60004F9")]
			[Address(RVA = "0xE76540", Offset = "0xE76540", VA = "0xE76540", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000089")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60004FB")]
			[Address(RVA = "0xE76588", Offset = "0xE76588", VA = "0xE76588", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60004F6")]
		[Address(RVA = "0xE7645C", Offset = "0xE7645C", VA = "0xE7645C")]
		[DebuggerHidden]
		public <DestroyNextFrame>d__12(int <>1__state)
		{
		}

		[Token(Token = "0x60004F7")]
		[Address(RVA = "0xE76484", Offset = "0xE76484", VA = "0xE76484", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60004F8")]
		[Address(RVA = "0xE76488", Offset = "0xE76488", VA = "0xE76488", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60004FA")]
		[Address(RVA = "0xE76548", Offset = "0xE76548", VA = "0xE76548", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000579")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject yesEffect;

	[Token(Token = "0x400057A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject noEffect;

	[Token(Token = "0x400057B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject yesArrow;

	[Token(Token = "0x400057C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject noArrow;

	[Token(Token = "0x400057D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Transform thisTransform;

	[Token(Token = "0x400057E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool yesFaceIsUp;

	[Token(Token = "0x400057F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	private bool noFaceIsUp;

	[Token(Token = "0x4000580")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Renderer yesArrowRenderer;

	[Token(Token = "0x4000581")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Renderer noArrowRenderer;

	[Token(Token = "0x4000582")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool decisionHasBeenMade;

	[Token(Token = "0x60004EB")]
	[Address(RVA = "0xE744E0", Offset = "0xE744E0", VA = "0xE744E0")]
	private void Awake()
	{
	}

	[Token(Token = "0x60004EC")]
	[Address(RVA = "0xE7459C", Offset = "0xE7459C", VA = "0xE7459C")]
	[IteratorStateMachine(typeof(<ShowArrows>d__11))]
	private IEnumerator ShowArrows()
	{
		return null;
	}

	[Token(Token = "0x60004ED")]
	[Address(RVA = "0xE74638", Offset = "0xE74638", VA = "0xE74638")]
	[IteratorStateMachine(typeof(<DestroyNextFrame>d__12))]
	private IEnumerator DestroyNextFrame()
	{
		return null;
	}

	[Token(Token = "0x60004EE")]
	[Address(RVA = "0xE746AC", Offset = "0xE746AC", VA = "0xE746AC")]
	private void Update()
	{
	}

	[Token(Token = "0x60004EF")]
	[Address(RVA = "0xE74B18", Offset = "0xE74B18", VA = "0xE74B18")]
	public ChoiceCube()
	{
	}
}
[Token(Token = "0x200010F")]
public class ChoiceCubeSummon : MonoBehaviour
{
	[Token(Token = "0x2000110")]
	[CompilerGenerated]
	private sealed class <Summon>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400058C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400058D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400058E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ChoiceCubeSummon <>4__this;

		[Token(Token = "0x400058F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 <summonPosition>5__2;

		[Token(Token = "0x1700008A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000503")]
			[Address(RVA = "0xE76F80", Offset = "0xE76F80", VA = "0xE76F80", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700008B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000505")]
			[Address(RVA = "0xE76FC8", Offset = "0xE76FC8", VA = "0xE76FC8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000500")]
		[Address(RVA = "0xE766B8", Offset = "0xE766B8", VA = "0xE766B8")]
		[DebuggerHidden]
		public <Summon>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x6000501")]
		[Address(RVA = "0xE76708", Offset = "0xE76708", VA = "0xE76708", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000502")]
		[Address(RVA = "0xE7670C", Offset = "0xE7670C", VA = "0xE7670C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000504")]
		[Address(RVA = "0xE76F88", Offset = "0xE76F88", VA = "0xE76F88", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000589")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject choiceCube;

	[Token(Token = "0x400058A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject summonEffect;

	[Token(Token = "0x400058B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform hmd;

	[Token(Token = "0x60004FC")]
	[Address(RVA = "0xE76590", Offset = "0xE76590", VA = "0xE76590")]
	private void Awake()
	{
	}

	[Token(Token = "0x60004FD")]
	[Address(RVA = "0xE76644", Offset = "0xE76644", VA = "0xE76644")]
	[IteratorStateMachine(typeof(<Summon>d__4))]
	private IEnumerator Summon()
	{
		return null;
	}

	[Token(Token = "0x60004FE")]
	[Address(RVA = "0xE766E0", Offset = "0xE766E0", VA = "0xE766E0")]
	public ChoiceCubeSummon()
	{
	}
}
[Token(Token = "0x2000111")]
public class ColorFader : Singleton<ColorFader>
{
	[Token(Token = "0x4000590")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Renderer thisRenderer;

	[Token(Token = "0x4000591")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool startFadedIn;

	[Token(Token = "0x6000506")]
	[Address(RVA = "0xE76FD0", Offset = "0xE76FD0", VA = "0xE76FD0", Slot = "5")]
	protected override void DidAwake()
	{
	}

	[Token(Token = "0x6000507")]
	[Address(RVA = "0xE77018", Offset = "0xE77018", VA = "0xE77018")]
	public void FadeIn(Color fadeColor, float fadeTime)
	{
	}

	[Token(Token = "0x6000508")]
	[Address(RVA = "0xE77494", Offset = "0xE77494", VA = "0xE77494")]
	public void FadeOut(Color fadeColor, float fadeTime)
	{
	}

	[Token(Token = "0x6000509")]
	[Address(RVA = "0xE77910", Offset = "0xE77910", VA = "0xE77910")]
	private void UpdateColor(Color newColor)
	{
	}

	[Token(Token = "0x600050A")]
	[Address(RVA = "0xE77968", Offset = "0xE77968", VA = "0xE77968")]
	public ColorFader()
	{
	}
}
[Token(Token = "0x2000112")]
public class CommunityDeckManager : Singleton<CommunityDeckManager>
{
	[Token(Token = "0x2000113")]
	[CompilerGenerated]
	private sealed class <DisableDecksAtDistance>d__15 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400059F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40005A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40005A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CommunityDeckManager <>4__this;

		[Token(Token = "0x1700008C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000517")]
			[Address(RVA = "0xE78A64", Offset = "0xE78A64", VA = "0xE78A64", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700008D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000519")]
			[Address(RVA = "0xE78AAC", Offset = "0xE78AAC", VA = "0xE78AAC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000514")]
		[Address(RVA = "0xE78024", Offset = "0xE78024", VA = "0xE78024")]
		[DebuggerHidden]
		public <DisableDecksAtDistance>d__15(int <>1__state)
		{
		}

		[Token(Token = "0x6000515")]
		[Address(RVA = "0xE788F0", Offset = "0xE788F0", VA = "0xE788F0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000516")]
		[Address(RVA = "0xE788F4", Offset = "0xE788F4", VA = "0xE788F4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000518")]
		[Address(RVA = "0xE78A6C", Offset = "0xE78A6C", VA = "0xE78A6C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000592")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform[] shelfRegisters;

	[Token(Token = "0x4000593")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject deckPrefab;

	[Token(Token = "0x4000594")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UIManualButton refreshButton;

	[Token(Token = "0x4000595")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float disableDecksDistance;

	[Token(Token = "0x4000596")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private List<ManagedDeck> communityDecks;

	[Token(Token = "0x4000597")]
	private const int decksPerRegister = 3;

	[Token(Token = "0x4000598")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Transform thisTransform;

	[Token(Token = "0x4000599")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Transform hmdTransform;

	[Token(Token = "0x400059A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool decksLoaded;

	[Token(Token = "0x400059B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
	private bool decksTogglableOn;

	[Token(Token = "0x400059C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
	private bool inDeckRange;

	[Token(Token = "0x400059D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x53")]
	private bool decksToggledOn;

	[Token(Token = "0x400059E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private int pageIndex;

	[Token(Token = "0x600050B")]
	[Address(RVA = "0xE779B0", Offset = "0xE779B0", VA = "0xE779B0", Slot = "5")]
	protected override void DidAwake()
	{
	}

	[Token(Token = "0x600050C")]
	[Address(RVA = "0xE77AD8", Offset = "0xE77AD8", VA = "0xE77AD8")]
	private void Start()
	{
	}

	[Token(Token = "0x600050D")]
	[Address(RVA = "0xE77FB0", Offset = "0xE77FB0", VA = "0xE77FB0")]
	[IteratorStateMachine(typeof(<DisableDecksAtDistance>d__15))]
	private IEnumerator DisableDecksAtDistance()
	{
		return null;
	}

	[Token(Token = "0x600050E")]
	[Address(RVA = "0xE7804C", Offset = "0xE7804C", VA = "0xE7804C")]
	public void SetDecksTogglable(bool decksTogglableOn)
	{
	}

	[Token(Token = "0x600050F")]
	[Address(RVA = "0xE78058", Offset = "0xE78058", VA = "0xE78058")]
	private void TryToggleDecks()
	{
	}

	[Token(Token = "0x6000510")]
	[Address(RVA = "0xE78268", Offset = "0xE78268", VA = "0xE78268")]
	private void SpawnCommunityDecks(List<DeckPackage> decks)
	{
	}

	[Token(Token = "0x6000511")]
	[Address(RVA = "0xE77B08", Offset = "0xE77B08", VA = "0xE77B08")]
	private void GetNextDeckPage()
	{
	}

	[Token(Token = "0x6000512")]
	[Address(RVA = "0xE78818", Offset = "0xE78818", VA = "0xE78818")]
	private void Update()
	{
	}

	[Token(Token = "0x6000513")]
	[Address(RVA = "0xE78844", Offset = "0xE78844", VA = "0xE78844")]
	public CommunityDeckManager()
	{
	}
}
[Token(Token = "0x2000114")]
[RequireComponent(typeof(XRGrabInteractable), typeof(Renderer))]
public class ComplexCube : MonoBehaviour
{
	[Token(Token = "0x40005A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private XRBaseInteractable m_Interactable;

	[Token(Token = "0x40005A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Renderer m_Renderer;

	[Token(Token = "0x40005A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Color s_HoveredColor;

	[Token(Token = "0x40005A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static Color s_SelectedColor;

	[Token(Token = "0x600051A")]
	[Address(RVA = "0xE78AB4", Offset = "0xE78AB4", VA = "0xE78AB4")]
	protected void OnEnable()
	{
	}

	[Token(Token = "0x600051B")]
	[Address(RVA = "0xE78E1C", Offset = "0xE78E1C", VA = "0xE78E1C")]
	protected void OnDisable()
	{
	}

	[Token(Token = "0x600051C")]
	[Address(RVA = "0xE78FF8", Offset = "0xE78FF8", VA = "0xE78FF8", Slot = "4")]
	protected virtual void OnFirstHoverEntered(HoverEnterEventArgs args)
	{
	}

	[Token(Token = "0x600051D")]
	[Address(RVA = "0xE78FFC", Offset = "0xE78FFC", VA = "0xE78FFC", Slot = "5")]
	protected virtual void OnLastHoverExited(HoverExitEventArgs args)
	{
	}

	[Token(Token = "0x600051E")]
	[Address(RVA = "0xE79000", Offset = "0xE79000", VA = "0xE79000", Slot = "6")]
	protected virtual void OnFirstSelectEntered(SelectEnterEventArgs args)
	{
	}

	[Token(Token = "0x600051F")]
	[Address(RVA = "0xE79004", Offset = "0xE79004", VA = "0xE79004", Slot = "7")]
	protected virtual void OnLastSelectExited(SelectExitEventArgs args)
	{
	}

	[Token(Token = "0x6000520")]
	[Address(RVA = "0xE78D04", Offset = "0xE78D04", VA = "0xE78D04")]
	protected void UpdateColor()
	{
	}

	[Token(Token = "0x6000521")]
	[Address(RVA = "0xE79008", Offset = "0xE79008", VA = "0xE79008")]
	public ComplexCube()
	{
	}
}
[Token(Token = "0x2000115")]
[DefaultExecutionOrder(10)]
public class ControllerManager : MonoBehaviour
{
	[Token(Token = "0x2000116")]
	private struct InteractorController
	{
		[Token(Token = "0x40005B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public GameObject m_GO;

		[Token(Token = "0x40005B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public XRController m_XRController;

		[Token(Token = "0x40005B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public XRInteractorLineVisual m_LineRenderer;

		[Token(Token = "0x40005B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public XRBaseInteractor m_Interactor;

		[Token(Token = "0x6000534")]
		[Address(RVA = "0xE79B80", Offset = "0xE79B80", VA = "0xE79B80")]
		public void Attach(GameObject gameObject)
		{
		}

		[Token(Token = "0x6000535")]
		[Address(RVA = "0xE79DA4", Offset = "0xE79DA4", VA = "0xE79DA4")]
		public void Enter()
		{
		}

		[Token(Token = "0x6000536")]
		[Address(RVA = "0xE79CB8", Offset = "0xE79CB8", VA = "0xE79CB8")]
		public void Leave()
		{
		}
	}

	[Token(Token = "0x2000117")]
	public enum ControllerStates
	{
		[Token(Token = "0x40005B8")]
		Select,
		[Token(Token = "0x40005B9")]
		Teleport,
		[Token(Token = "0x40005BA")]
		MAX
	}

	[Token(Token = "0x2000118")]
	private struct ControllerState
	{
		[Token(Token = "0x40005BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private ControllerStates m_State;

		[Token(Token = "0x40005BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private InteractorController[] m_Interactors;

		[Token(Token = "0x6000537")]
		[Address(RVA = "0xE7931C", Offset = "0xE7931C", VA = "0xE7931C")]
		public void Initialize()
		{
		}

		[Token(Token = "0x6000538")]
		[Address(RVA = "0xE793C0", Offset = "0xE793C0", VA = "0xE793C0")]
		public void ClearAll()
		{
		}

		[Token(Token = "0x6000539")]
		[Address(RVA = "0xE7937C", Offset = "0xE7937C", VA = "0xE7937C")]
		public void SetGameObject(ControllerStates state, GameObject parentGamObject)
		{
		}

		[Token(Token = "0x600053A")]
		[Address(RVA = "0xE79520", Offset = "0xE79520", VA = "0xE79520")]
		public void SetState(ControllerStates nextState)
		{
		}
	}

	[Token(Token = "0x40005A6")]
	public const int kControllerManagerUpdateOrder = 10;

	[Token(Token = "0x40005A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[Tooltip("The buttons on the controller that will trigger a transition to the Teleport Controller.")]
	private List<InputHelpers.Button> m_ActivationButtons;

	[Token(Token = "0x40005A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[Tooltip("The buttons on the controller that will force a deactivation of the teleport option.")]
	private List<InputHelpers.Button> m_DeactivationButtons;

	[Token(Token = "0x40005A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("The Game Object which represents the left hand for normal interaction purposes.")]
	[SerializeField]
	private GameObject m_LeftBaseController;

	[Token(Token = "0x40005AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	[Tooltip("The Game Object which represents the left hand when teleporting.")]
	private GameObject m_LeftTeleportController;

	[Token(Token = "0x40005AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	[Tooltip("The Game Object which represents the right hand for normal interaction purposes.")]
	private GameObject m_RightBaseController;

	[Token(Token = "0x40005AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("The Game Object which represents the right hand when teleporting.")]
	[SerializeField]
	private GameObject m_RightTeleportController;

	[Token(Token = "0x40005AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private UnityEngine.XR.InputDevice m_RightController;

	[Token(Token = "0x40005AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private UnityEngine.XR.InputDevice m_LeftController;

	[Token(Token = "0x40005AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private bool m_LeftTeleportDeactivated;

	[Token(Token = "0x40005B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
	private bool m_RightTeleportDeactivated;

	[Token(Token = "0x40005B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private ControllerState m_RightControllerState;

	[Token(Token = "0x40005B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private ControllerState m_LeftControllerState;

	[Token(Token = "0x1700008E")]
	public List<InputHelpers.Button> activationButtons
	{
		[Token(Token = "0x6000523")]
		[Address(RVA = "0xE79074", Offset = "0xE79074", VA = "0xE79074")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000524")]
		[Address(RVA = "0xE7907C", Offset = "0xE7907C", VA = "0xE7907C")]
		set
		{
		}
	}

	[Token(Token = "0x1700008F")]
	public List<InputHelpers.Button> deactivationButtons
	{
		[Token(Token = "0x6000525")]
		[Address(RVA = "0xE79084", Offset = "0xE79084", VA = "0xE79084")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000526")]
		[Address(RVA = "0xE7908C", Offset = "0xE7908C", VA = "0xE7908C")]
		set
		{
		}
	}

	[Token(Token = "0x17000090")]
	public GameObject leftBaseController
	{
		[Token(Token = "0x6000527")]
		[Address(RVA = "0xE79094", Offset = "0xE79094", VA = "0xE79094")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000528")]
		[Address(RVA = "0xE7909C", Offset = "0xE7909C", VA = "0xE7909C")]
		set
		{
		}
	}

	[Token(Token = "0x17000091")]
	public GameObject leftTeleportController
	{
		[Token(Token = "0x6000529")]
		[Address(RVA = "0xE790A4", Offset = "0xE790A4", VA = "0xE790A4")]
		get
		{
			return null;
		}
		[Token(Token = "0x600052A")]
		[Address(RVA = "0xE790AC", Offset = "0xE790AC", VA = "0xE790AC")]
		set
		{
		}
	}

	[Token(Token = "0x17000092")]
	public GameObject rightBaseController
	{
		[Token(Token = "0x600052B")]
		[Address(RVA = "0xE790B4", Offset = "0xE790B4", VA = "0xE790B4")]
		get
		{
			return null;
		}
		[Token(Token = "0x600052C")]
		[Address(RVA = "0xE790BC", Offset = "0xE790BC", VA = "0xE790BC")]
		set
		{
		}
	}

	[Token(Token = "0x17000093")]
	public GameObject rightTeleportController
	{
		[Token(Token = "0x600052D")]
		[Address(RVA = "0xE790C4", Offset = "0xE790C4", VA = "0xE790C4")]
		get
		{
			return null;
		}
		[Token(Token = "0x600052E")]
		[Address(RVA = "0xE790CC", Offset = "0xE790CC", VA = "0xE790CC")]
		set
		{
		}
	}

	[Token(Token = "0x600052F")]
	[Address(RVA = "0xE790D4", Offset = "0xE790D4", VA = "0xE790D4")]
	protected void OnEnable()
	{
	}

	[Token(Token = "0x6000530")]
	[Address(RVA = "0xE794A0", Offset = "0xE794A0", VA = "0xE794A0")]
	protected void OnDisable()
	{
	}

	[Token(Token = "0x6000531")]
	[Address(RVA = "0xE79424", Offset = "0xE79424", VA = "0xE79424")]
	private void RegisterDevices(UnityEngine.XR.InputDevice connectedDevice)
	{
	}

	[Token(Token = "0x6000532")]
	[Address(RVA = "0xE795B4", Offset = "0xE795B4", VA = "0xE795B4")]
	protected void Update()
	{
	}

	[Token(Token = "0x6000533")]
	[Address(RVA = "0xE79AC8", Offset = "0xE79AC8", VA = "0xE79AC8")]
	public ControllerManager()
	{
	}
}
[Token(Token = "0x2000119")]
public class CoveLocker : MonoBehaviour
{
	[Token(Token = "0x40005BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<GameObject> coveLock;

	[Token(Token = "0x40005BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private GameObject thisGO;

	[Token(Token = "0x600053B")]
	[Address(RVA = "0xE79E94", Offset = "0xE79E94", VA = "0xE79E94")]
	private void Awake()
	{
	}

	[Token(Token = "0x600053C")]
	[Address(RVA = "0xE79FE0", Offset = "0xE79FE0", VA = "0xE79FE0")]
	private void Start()
	{
	}

	[Token(Token = "0x600053D")]
	[Address(RVA = "0xE7A1B4", Offset = "0xE7A1B4", VA = "0xE7A1B4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600053E")]
	[Address(RVA = "0xE7A05C", Offset = "0xE7A05C", VA = "0xE7A05C")]
	private void ToggleLock(bool enable)
	{
	}

	[Token(Token = "0x600053F")]
	[Address(RVA = "0xE7A230", Offset = "0xE7A230", VA = "0xE7A230")]
	public CoveLocker()
	{
	}
}
[Token(Token = "0x200011A")]
public class DeckManager : Singleton<DeckManager>
{
	[Token(Token = "0x200011B")]
	[CompilerGenerated]
	private sealed class <>c__DisplayClass28_0
	{
		[Token(Token = "0x40005D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public DeckManager <>4__this;

		[Token(Token = "0x40005D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool morePages;

		[Token(Token = "0x6000568")]
		[Address(RVA = "0xE7C62C", Offset = "0xE7C62C", VA = "0xE7C62C")]
		public <>c__DisplayClass28_0()
		{
		}
	}

	[Token(Token = "0x200011D")]
	[CompilerGenerated]
	private sealed class <co_LoadAllUserDeckListPages>d__28 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40005D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40005D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40005D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DeckManager <>4__this;

		[Token(Token = "0x40005D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private <>c__DisplayClass28_0 <>8__1;

		[Token(Token = "0x40005D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int <page>5__2;

		[Token(Token = "0x17000097")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600056E")]
			[Address(RVA = "0xE7CD4C", Offset = "0xE7CD4C", VA = "0xE7CD4C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000098")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000570")]
			[Address(RVA = "0xE7CD94", Offset = "0xE7CD94", VA = "0xE7CD94", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600056B")]
		[Address(RVA = "0xE7A60C", Offset = "0xE7A60C", VA = "0xE7A60C")]
		[DebuggerHidden]
		public <co_LoadAllUserDeckListPages>d__28(int <>1__state)
		{
		}

		[Token(Token = "0x600056C")]
		[Address(RVA = "0xE7CA70", Offset = "0xE7CA70", VA = "0xE7CA70", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600056D")]
		[Address(RVA = "0xE7CA74", Offset = "0xE7CA74", VA = "0xE7CA74", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600056F")]
		[Address(RVA = "0xE7CD54", Offset = "0xE7CD54", VA = "0xE7CD54", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200011E")]
	[CompilerGenerated]
	private sealed class <co_OverrideUserDecks>d__30 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40005D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40005DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40005DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DeckManager <>4__this;

		[Token(Token = "0x40005DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<Guid>.Enumerator <>7__wrap1;

		[Token(Token = "0x17000099")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000575")]
			[Address(RVA = "0xE7CFDC", Offset = "0xE7CFDC", VA = "0xE7CFDC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700009A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000577")]
			[Address(RVA = "0xE7D024", Offset = "0xE7D024", VA = "0xE7D024", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000571")]
		[Address(RVA = "0xE7A6D4", Offset = "0xE7A6D4", VA = "0xE7A6D4")]
		[DebuggerHidden]
		public <co_OverrideUserDecks>d__30(int <>1__state)
		{
		}

		[Token(Token = "0x6000572")]
		[Address(RVA = "0xE7CD9C", Offset = "0xE7CD9C", VA = "0xE7CD9C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000573")]
		[Address(RVA = "0xE7CDB8", Offset = "0xE7CDB8", VA = "0xE7CDB8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000574")]
		[Address(RVA = "0xE7CF8C", Offset = "0xE7CF8C", VA = "0xE7CF8C")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x6000576")]
		[Address(RVA = "0xE7CFE4", Offset = "0xE7CFE4", VA = "0xE7CFE4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200011F")]
	[CompilerGenerated]
	private sealed class <co_CallbackAfterCommDecksLoadComplete>d__32 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40005DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40005DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40005DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DeckManager <>4__this;

		[Token(Token = "0x40005E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action<List<DeckPackage>> onCommunityDeckListLoaded;

		[Token(Token = "0x1700009B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600057B")]
			[Address(RVA = "0xE7D0F8", Offset = "0xE7D0F8", VA = "0xE7D0F8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700009C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600057D")]
			[Address(RVA = "0xE7D140", Offset = "0xE7D140", VA = "0xE7D140", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000578")]
		[Address(RVA = "0xE7AA64", Offset = "0xE7AA64", VA = "0xE7AA64")]
		[DebuggerHidden]
		public <co_CallbackAfterCommDecksLoadComplete>d__32(int <>1__state)
		{
		}

		[Token(Token = "0x6000579")]
		[Address(RVA = "0xE7D02C", Offset = "0xE7D02C", VA = "0xE7D02C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600057A")]
		[Address(RVA = "0xE7D030", Offset = "0xE7D030", VA = "0xE7D030", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600057C")]
		[Address(RVA = "0xE7D100", Offset = "0xE7D100", VA = "0xE7D100", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000122")]
	[CompilerGenerated]
	private sealed class <>c__DisplayClass35_0
	{
		[Token(Token = "0x40005E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public DeckManager <>4__this;

		[Token(Token = "0x40005E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Dictionary<Language, List<Guid>> communityDecksByLanguage;

		[Token(Token = "0x40005E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool morePages;

		[Token(Token = "0x6000583")]
		[Address(RVA = "0xE7D258", Offset = "0xE7D258", VA = "0xE7D258")]
		public <>c__DisplayClass35_0()
		{
		}
	}

	[Token(Token = "0x2000124")]
	[CompilerGenerated]
	private sealed class <co_LoadAllCommunityDeckListPages>d__35 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40005E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40005EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40005EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DeckManager <>4__this;

		[Token(Token = "0x40005EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private <>c__DisplayClass35_0 <>8__1;

		[Token(Token = "0x40005ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public List<Language> languages;

		[Token(Token = "0x40005EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Action<List<DeckPackage>> onCommunityDeckListLoaded;

		[Token(Token = "0x40005EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int <page>5__2;

		[Token(Token = "0x1700009D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000589")]
			[Address(RVA = "0xE7DCC8", Offset = "0xE7DCC8", VA = "0xE7DCC8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700009E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600058B")]
			[Address(RVA = "0xE7DD10", Offset = "0xE7DD10", VA = "0xE7DD10", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000586")]
		[Address(RVA = "0xE7B18C", Offset = "0xE7B18C", VA = "0xE7B18C")]
		[DebuggerHidden]
		public <co_LoadAllCommunityDeckListPages>d__35(int <>1__state)
		{
		}

		[Token(Token = "0x6000587")]
		[Address(RVA = "0xE7D73C", Offset = "0xE7D73C", VA = "0xE7D73C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000588")]
		[Address(RVA = "0xE7D740", Offset = "0xE7D740", VA = "0xE7D740", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600058A")]
		[Address(RVA = "0xE7DCD0", Offset = "0xE7DCD0", VA = "0xE7DCD0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000127")]
	[CompilerGenerated]
	private sealed class <co_LoadDeck>d__41 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40005F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40005F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40005F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DeckManager <>4__this;

		[Token(Token = "0x40005F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Guid deckId;

		[Token(Token = "0x1700009F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000593")]
			[Address(RVA = "0xE7E020", Offset = "0xE7E020", VA = "0xE7E020", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A0")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000595")]
			[Address(RVA = "0xE7E068", Offset = "0xE7E068", VA = "0xE7E068", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000590")]
		[Address(RVA = "0xE7B6D8", Offset = "0xE7B6D8", VA = "0xE7B6D8")]
		[DebuggerHidden]
		public <co_LoadDeck>d__41(int <>1__state)
		{
		}

		[Token(Token = "0x6000591")]
		[Address(RVA = "0xE7DDFC", Offset = "0xE7DDFC", VA = "0xE7DDFC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000592")]
		[Address(RVA = "0xE7DE00", Offset = "0xE7DE00", VA = "0xE7DE00", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000594")]
		[Address(RVA = "0xE7E028", Offset = "0xE7E028", VA = "0xE7E028", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000128")]
	[CompilerGenerated]
	private sealed class <co_LoadRootStackForDeck>d__42 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40005F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40005F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40005FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DeckManager <>4__this;

		[Token(Token = "0x40005FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Guid deckId;

		[Token(Token = "0x170000A1")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000599")]
			[Address(RVA = "0xE7E0FC", Offset = "0xE7E0FC", VA = "0xE7E0FC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A2")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600059B")]
			[Address(RVA = "0xE7E144", Offset = "0xE7E144", VA = "0xE7E144", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000596")]
		[Address(RVA = "0xE7B788", Offset = "0xE7B788", VA = "0xE7B788")]
		[DebuggerHidden]
		public <co_LoadRootStackForDeck>d__42(int <>1__state)
		{
		}

		[Token(Token = "0x6000597")]
		[Address(RVA = "0xE7E070", Offset = "0xE7E070", VA = "0xE7E070", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000598")]
		[Address(RVA = "0xE7E074", Offset = "0xE7E074", VA = "0xE7E074", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600059A")]
		[Address(RVA = "0xE7E104", Offset = "0xE7E104", VA = "0xE7E104", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000129")]
	[CompilerGenerated]
	private sealed class <co_LoadStackForActiveDeck>d__43 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40005FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40005FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40005FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DeckManager <>4__this;

		[Token(Token = "0x40005FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Guid stackParenId;

		[Token(Token = "0x170000A3")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600059F")]
			[Address(RVA = "0xE7E1E4", Offset = "0xE7E1E4", VA = "0xE7E1E4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A4")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60005A1")]
			[Address(RVA = "0xE7E22C", Offset = "0xE7E22C", VA = "0xE7E22C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600059C")]
		[Address(RVA = "0xE7B838", Offset = "0xE7B838", VA = "0xE7B838")]
		[DebuggerHidden]
		public <co_LoadStackForActiveDeck>d__43(int <>1__state)
		{
		}

		[Token(Token = "0x600059D")]
		[Address(RVA = "0xE7E14C", Offset = "0xE7E14C", VA = "0xE7E14C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600059E")]
		[Address(RVA = "0xE7E150", Offset = "0xE7E150", VA = "0xE7E150", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60005A0")]
		[Address(RVA = "0xE7E1EC", Offset = "0xE7E1EC", VA = "0xE7E1EC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200012B")]
	[CompilerGenerated]
	private sealed class <co_LoadStackForDeck>d__44 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000604")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000605")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000606")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DeckManager <>4__this;

		[Token(Token = "0x4000607")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Guid deckId;

		[Token(Token = "0x4000608")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Guid stackParenId;

		[Token(Token = "0x170000A5")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60005A7")]
			[Address(RVA = "0xE7EB18", Offset = "0xE7EB18", VA = "0xE7EB18", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A6")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60005A9")]
			[Address(RVA = "0xE7EB60", Offset = "0xE7EB60", VA = "0xE7EB60", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60005A4")]
		[Address(RVA = "0xE7B8FC", Offset = "0xE7B8FC", VA = "0xE7B8FC")]
		[DebuggerHidden]
		public <co_LoadStackForDeck>d__44(int <>1__state)
		{
		}

		[Token(Token = "0x60005A5")]
		[Address(RVA = "0xE7E8D4", Offset = "0xE7E8D4", VA = "0xE7E8D4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60005A6")]
		[Address(RVA = "0xE7E8D8", Offset = "0xE7E8D8", VA = "0xE7E8D8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60005A8")]
		[Address(RVA = "0xE7EB20", Offset = "0xE7EB20", VA = "0xE7EB20", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200012C")]
	[CompilerGenerated]
	private sealed class <co_LoadPositionsForStackForActiveDeckInCurrentRoom>d__45 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000609")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400060A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400060B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DeckManager <>4__this;

		[Token(Token = "0x400060C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Guid stackParentId;

		[Token(Token = "0x170000A7")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60005AD")]
			[Address(RVA = "0xE7EC48", Offset = "0xE7EC48", VA = "0xE7EC48", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A8")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60005AF")]
			[Address(RVA = "0xE7EC90", Offset = "0xE7EC90", VA = "0xE7EC90", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60005AA")]
		[Address(RVA = "0xE7B9AC", Offset = "0xE7B9AC", VA = "0xE7B9AC")]
		[DebuggerHidden]
		public <co_LoadPositionsForStackForActiveDeckInCurrentRoom>d__45(int <>1__state)
		{
		}

		[Token(Token = "0x60005AB")]
		[Address(RVA = "0xE7EB68", Offset = "0xE7EB68", VA = "0xE7EB68", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60005AC")]
		[Address(RVA = "0xE7EB6C", Offset = "0xE7EB6C", VA = "0xE7EB6C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60005AE")]
		[Address(RVA = "0xE7EC50", Offset = "0xE7EC50", VA = "0xE7EC50", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200012E")]
	[CompilerGenerated]
	private sealed class <co_LoadPositionsForStackForDeckInRoom>d__46 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000612")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000613")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000614")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DeckManager <>4__this;

		[Token(Token = "0x4000615")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Guid deckId;

		[Token(Token = "0x4000616")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Guid stackParentId;

		[Token(Token = "0x4000617")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Room room;

		[Token(Token = "0x170000A9")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60005B5")]
			[Address(RVA = "0xE7F008", Offset = "0xE7F008", VA = "0xE7F008", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000AA")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60005B7")]
			[Address(RVA = "0xE7F050", Offset = "0xE7F050", VA = "0xE7F050", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60005B2")]
		[Address(RVA = "0xE7BA80", Offset = "0xE7BA80", VA = "0xE7BA80")]
		[DebuggerHidden]
		public <co_LoadPositionsForStackForDeckInRoom>d__46(int <>1__state)
		{
		}

		[Token(Token = "0x60005B3")]
		[Address(RVA = "0xE7EDF8", Offset = "0xE7EDF8", VA = "0xE7EDF8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60005B4")]
		[Address(RVA = "0xE7EDFC", Offset = "0xE7EDFC", VA = "0xE7EDFC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60005B6")]
		[Address(RVA = "0xE7F010", Offset = "0xE7F010", VA = "0xE7F010", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200012F")]
	[CompilerGenerated]
	private sealed class <co_SaveCachedCardPositionsOnIdle>d__50 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000618")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000619")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400061A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DeckManager <>4__this;

		[Token(Token = "0x400061B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <countdownInterval>5__2;

		[Token(Token = "0x170000AB")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60005BB")]
			[Address(RVA = "0xE7F41C", Offset = "0xE7F41C", VA = "0xE7F41C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000AC")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60005BD")]
			[Address(RVA = "0xE7F464", Offset = "0xE7F464", VA = "0xE7F464", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60005B8")]
		[Address(RVA = "0xE7BCB0", Offset = "0xE7BCB0", VA = "0xE7BCB0")]
		[DebuggerHidden]
		public <co_SaveCachedCardPositionsOnIdle>d__50(int <>1__state)
		{
		}

		[Token(Token = "0x60005B9")]
		[Address(RVA = "0xE7F058", Offset = "0xE7F058", VA = "0xE7F058", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60005BA")]
		[Address(RVA = "0xE7F05C", Offset = "0xE7F05C", VA = "0xE7F05C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60005BC")]
		[Address(RVA = "0xE7F424", Offset = "0xE7F424", VA = "0xE7F424", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000130")]
	[CompilerGenerated]
	private sealed class <SetAndSpawnActiveDeck>d__55 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400061C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400061D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400061E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DeckManager <>4__this;

		[Token(Token = "0x400061F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Guid deckId;

		[Token(Token = "0x4000620")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool suppressPositionSave;

		[Token(Token = "0x170000AD")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60005C1")]
			[Address(RVA = "0xE7F660", Offset = "0xE7F660", VA = "0xE7F660", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000AE")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60005C3")]
			[Address(RVA = "0xE7F6A8", Offset = "0xE7F6A8", VA = "0xE7F6A8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60005BE")]
		[Address(RVA = "0xE7C3F4", Offset = "0xE7C3F4", VA = "0xE7C3F4")]
		[DebuggerHidden]
		public <SetAndSpawnActiveDeck>d__55(int <>1__state)
		{
		}

		[Token(Token = "0x60005BF")]
		[Address(RVA = "0xE7F46C", Offset = "0xE7F46C", VA = "0xE7F46C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60005C0")]
		[Address(RVA = "0xE7F470", Offset = "0xE7F470", VA = "0xE7F470", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60005C2")]
		[Address(RVA = "0xE7F668", Offset = "0xE7F668", VA = "0xE7F668", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40005BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public MemorizationScoreUI memScoreUI;

	[Token(Token = "0x40005C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Action<Guid> OnNewDeckActivated;

	[Token(Token = "0x40005C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Action<Guid> OnActiveDeckCleared;

	[Token(Token = "0x40005C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int deckIndexSpawned;

	[Token(Token = "0x40005C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Dictionary<Guid, DeckPackage> decks;

	[Token(Token = "0x40005C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private List<Guid> userDeckIds;

	[Token(Token = "0x40005C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private List<Guid> userDecksOverride;

	[Token(Token = "0x40005C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private List<Guid> communityDeckList;

	[Token(Token = "0x40005CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private List<Guid> delayCacheClearingDecks;

	[Token(Token = "0x40005CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Dictionary<Guid, CardPosition> cachedCardPositionSaves;

	[Token(Token = "0x40005CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private int saveIdleDelaySeconds;

	[Token(Token = "0x40005CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private float cardPositionSaveCountdownTimer;

	[Token(Token = "0x40005CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private bool saveCoroutineRunning;

	[Token(Token = "0x40005CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
	private bool loadingCommDecks;

	[Token(Token = "0x17000094")]
	public DeckPackage activeDeck
	{
		[Token(Token = "0x6000542")]
		[Address(RVA = "0xE7A2A8", Offset = "0xE7A2A8", VA = "0xE7A2A8")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000543")]
		[Address(RVA = "0xE7A2B0", Offset = "0xE7A2B0", VA = "0xE7A2B0")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000095")]
	public bool loadCoroutineIsRunning
	{
		[Token(Token = "0x6000544")]
		[Address(RVA = "0xE7A2B8", Offset = "0xE7A2B8", VA = "0xE7A2B8")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000545")]
		[Address(RVA = "0xE7A2C0", Offset = "0xE7A2C0", VA = "0xE7A2C0")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000096")]
	public bool deckListLoadCompleted
	{
		[Token(Token = "0x6000546")]
		[Address(RVA = "0xE7A2CC", Offset = "0xE7A2CC", VA = "0xE7A2CC")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000547")]
		[Address(RVA = "0xE7A2D4", Offset = "0xE7A2D4", VA = "0xE7A2D4")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x6000548")]
	[Address(RVA = "0xE7A2E0", Offset = "0xE7A2E0", VA = "0xE7A2E0", Slot = "5")]
	protected override void DidAwake()
	{
	}

	[Token(Token = "0x6000549")]
	[Address(RVA = "0xE7A3D4", Offset = "0xE7A3D4", VA = "0xE7A3D4")]
	public void LoadAllUserDeckListPages()
	{
	}

	[Token(Token = "0x600054A")]
	[Address(RVA = "0xE7A598", Offset = "0xE7A598", VA = "0xE7A598")]
	[IteratorStateMachine(typeof(<co_LoadAllUserDeckListPages>d__28))]
	private IEnumerator co_LoadAllUserDeckListPages()
	{
		return null;
	}

	[Token(Token = "0x600054B")]
	[Address(RVA = "0xE7A634", Offset = "0xE7A634", VA = "0xE7A634")]
	public void OverrideUserDecks(List<Guid> overrideDeckIds)
	{
	}

	[Token(Token = "0x600054C")]
	[Address(RVA = "0xE7A660", Offset = "0xE7A660", VA = "0xE7A660")]
	[IteratorStateMachine(typeof(<co_OverrideUserDecks>d__30))]
	private IEnumerator co_OverrideUserDecks()
	{
		return null;
	}

	[Token(Token = "0x600054D")]
	[Address(RVA = "0xE7874C", Offset = "0xE7874C", VA = "0xE7874C")]
	public void GetCommunityDeckList(Action<List<DeckPackage>> onCommunityDeckListLoaded)
	{
	}

	[Token(Token = "0x600054E")]
	[Address(RVA = "0xE7A6FC", Offset = "0xE7A6FC", VA = "0xE7A6FC")]
	[IteratorStateMachine(typeof(<co_CallbackAfterCommDecksLoadComplete>d__32))]
	private IEnumerator co_CallbackAfterCommDecksLoadComplete(Action<List<DeckPackage>> onCommunityDeckListLoaded)
	{
		return null;
	}

	[Token(Token = "0x600054F")]
	[Address(RVA = "0xE7A78C", Offset = "0xE7A78C", VA = "0xE7A78C")]
	private List<DeckPackage> GetCommunityDeckPackages()
	{
		return null;
	}

	[Token(Token = "0x6000550")]
	[Address(RVA = "0xE7AA8C", Offset = "0xE7AA8C", VA = "0xE7AA8C")]
	private List<DeckPackage> SortDeckPackagesByLanguage(List<DeckPackage> origList)
	{
		return null;
	}

	[Token(Token = "0x6000551")]
	[Address(RVA = "0xE7A9C0", Offset = "0xE7A9C0", VA = "0xE7A9C0")]
	[IteratorStateMachine(typeof(<co_LoadAllCommunityDeckListPages>d__35))]
	private IEnumerator co_LoadAllCommunityDeckListPages(Action<List<DeckPackage>> onCommunityDeckListLoaded, [Optional] List<Language> languages)
	{
		return null;
	}

	[Token(Token = "0x6000552")]
	[Address(RVA = "0xE7B1B4", Offset = "0xE7B1B4", VA = "0xE7B1B4")]
	public bool HasActiveDeck()
	{
		return default(bool);
	}

	[Token(Token = "0x6000553")]
	[Address(RVA = "0xE7B1C4", Offset = "0xE7B1C4", VA = "0xE7B1C4")]
	public void ClearActiveDeck()
	{
	}

	[Token(Token = "0x6000554")]
	[Address(RVA = "0xE7B218", Offset = "0xE7B218", VA = "0xE7B218")]
	public void AddDeckToUserSet(Guid deckId, bool grantSharedAccess)
	{
	}

	[Token(Token = "0x6000555")]
	[Address(RVA = "0xE7B448", Offset = "0xE7B448", VA = "0xE7B448")]
	private void AddDeckToUserSet(Guid deckId)
	{
	}

	[Token(Token = "0x6000556")]
	[Address(RVA = "0xE7B670", Offset = "0xE7B670", VA = "0xE7B670")]
	public DeckPackage GetDeck(Guid deckId)
	{
		return null;
	}

	[Token(Token = "0x6000557")]
	[Address(RVA = "0xE7B5E8", Offset = "0xE7B5E8", VA = "0xE7B5E8")]
	[IteratorStateMachine(typeof(<co_LoadDeck>d__41))]
	public IEnumerator co_LoadDeck(Guid deckId)
	{
		return null;
	}

	[Token(Token = "0x6000558")]
	[Address(RVA = "0xE7B700", Offset = "0xE7B700", VA = "0xE7B700")]
	[IteratorStateMachine(typeof(<co_LoadRootStackForDeck>d__42))]
	public IEnumerator co_LoadRootStackForDeck(Guid deckId)
	{
		return null;
	}

	[Token(Token = "0x6000559")]
	[Address(RVA = "0xE7B7B0", Offset = "0xE7B7B0", VA = "0xE7B7B0")]
	[IteratorStateMachine(typeof(<co_LoadStackForActiveDeck>d__43))]
	public IEnumerator co_LoadStackForActiveDeck(Guid stackParenId)
	{
		return null;
	}

	[Token(Token = "0x600055A")]
	[Address(RVA = "0xE7B860", Offset = "0xE7B860", VA = "0xE7B860")]
	[IteratorStateMachine(typeof(<co_LoadStackForDeck>d__44))]
	public IEnumerator co_LoadStackForDeck(Guid deckId, Guid stackParenId)
	{
		return null;
	}

	[Token(Token = "0x600055B")]
	[Address(RVA = "0xE7B924", Offset = "0xE7B924", VA = "0xE7B924")]
	[IteratorStateMachine(typeof(<co_LoadPositionsForStackForActiveDeckInCurrentRoom>d__45))]
	public IEnumerator co_LoadPositionsForStackForActiveDeckInCurrentRoom(Guid stackParentId)
	{
		return null;
	}

	[Token(Token = "0x600055C")]
	[Address(RVA = "0xE7B9D4", Offset = "0xE7B9D4", VA = "0xE7B9D4")]
	[IteratorStateMachine(typeof(<co_LoadPositionsForStackForDeckInRoom>d__46))]
	public IEnumerator co_LoadPositionsForStackForDeckInRoom(Guid deckId, Guid stackParentId, Room room)
	{
		return null;
	}

	[Token(Token = "0x600055D")]
	[Address(RVA = "0xE7BAA8", Offset = "0xE7BAA8", VA = "0xE7BAA8")]
	public void ClearDecks()
	{
	}

	[Token(Token = "0x600055E")]
	[Address(RVA = "0xE7A3FC", Offset = "0xE7A3FC", VA = "0xE7A3FC")]
	public void ClearUserDecks()
	{
	}

	[Token(Token = "0x600055F")]
	[Address(RVA = "0xE7BB4C", Offset = "0xE7BB4C", VA = "0xE7BB4C")]
	private void AddPositionUpdateForAPISave(CardPosition cp)
	{
	}

	[Token(Token = "0x6000560")]
	[Address(RVA = "0xE7BC3C", Offset = "0xE7BC3C", VA = "0xE7BC3C")]
	[IteratorStateMachine(typeof(<co_SaveCachedCardPositionsOnIdle>d__50))]
	private IEnumerator co_SaveCachedCardPositionsOnIdle()
	{
		return null;
	}

	[Token(Token = "0x6000561")]
	[Address(RVA = "0xE7BCD8", Offset = "0xE7BCD8", VA = "0xE7BCD8")]
	public List<DeckPackage> GetUserDeckListItems(int maxDecksToReturn = 3)
	{
		return null;
	}

	[Token(Token = "0x6000562")]
	[Address(RVA = "0xE7BFF8", Offset = "0xE7BFF8", VA = "0xE7BFF8")]
	public int GetUserDeckPageCount(int itemsPerPage)
	{
		return default(int);
	}

	[Token(Token = "0x6000563")]
	[Address(RVA = "0xE7C070", Offset = "0xE7C070", VA = "0xE7C070")]
	public List<DeckPackage> GetUserDeckPage(int page, int itemsPerPage)
	{
		return null;
	}

	[Token(Token = "0x6000564")]
	[Address(RVA = "0xE7C238", Offset = "0xE7C238", VA = "0xE7C238")]
	public bool CardsHaveLoadedForDeckId(string deckId)
	{
		return default(bool);
	}

	[Token(Token = "0x6000565")]
	[Address(RVA = "0xE7C358", Offset = "0xE7C358", VA = "0xE7C358")]
	[IteratorStateMachine(typeof(<SetAndSpawnActiveDeck>d__55))]
	public IEnumerator SetAndSpawnActiveDeck(Guid deckId, bool suppressPositionSave = false)
	{
		return null;
	}

	[Token(Token = "0x6000566")]
	[Address(RVA = "0xE7C41C", Offset = "0xE7C41C", VA = "0xE7C41C")]
	public bool UserHasDeckId(Guid deckId)
	{
		return default(bool);
	}

	[Token(Token = "0x6000567")]
	[Address(RVA = "0xE7C490", Offset = "0xE7C490", VA = "0xE7C490")]
	public DeckManager()
	{
	}
}
[Token(Token = "0x2000131")]
public class DeckListByLanguage
{
	[Token(Token = "0x4000621")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Language language;

	[Token(Token = "0x4000622")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<DeckPackage> deckList;

	[Token(Token = "0x60005C4")]
	[Address(RVA = "0xE7B154", Offset = "0xE7B154", VA = "0xE7B154")]
	public DeckListByLanguage(Language language, List<DeckPackage> deckList)
	{
	}
}
[Token(Token = "0x2000132")]
public class DeckPackage
{
	[Token(Token = "0x4000623")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private DeckListItem deckListItem;

	[Token(Token = "0x4000624")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Dictionary<Guid, CardStack> stacksInDeck;

	[Token(Token = "0x60005C5")]
	[Address(RVA = "0xE7C9CC", Offset = "0xE7C9CC", VA = "0xE7C9CC")]
	public DeckPackage(DeckListItem deckListItem)
	{
	}

	[Token(Token = "0x60005C6")]
	[Address(RVA = "0xE7E4F4", Offset = "0xE7E4F4", VA = "0xE7E4F4")]
	public void AddCardStack(Guid stackParentId, List<BasicCard> cards)
	{
	}

	[Token(Token = "0x60005C7")]
	[Address(RVA = "0xE7ED2C", Offset = "0xE7ED2C", VA = "0xE7ED2C")]
	public void InitializeCardPositionsForStackAndRoom(Guid stackParentId, Room room, List<CardPosition> positions)
	{
	}

	[Token(Token = "0x60005C8")]
	[Address(RVA = "0xE7FB8C", Offset = "0xE7FB8C", VA = "0xE7FB8C")]
	public DeckListItem GetDeckListItem()
	{
		return null;
	}

	[Token(Token = "0x60005C9")]
	[Address(RVA = "0xE7C2C0", Offset = "0xE7C2C0", VA = "0xE7C2C0")]
	public CardStack GetRootCardStack()
	{
		return null;
	}

	[Token(Token = "0x60005CA")]
	[Address(RVA = "0xE7E5F4", Offset = "0xE7E5F4", VA = "0xE7E5F4")]
	public CardStack GetCardStack(Guid stackParentId)
	{
		return null;
	}
}
[Token(Token = "0x2000133")]
public class CardStack
{
	[Token(Token = "0x4000625")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Dictionary<Guid, CardPackage> cardsInStack;

	[Token(Token = "0x4000626")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private List<Guid> cardOrder;

	[Token(Token = "0x60005CB")]
	[Address(RVA = "0xE7F6B0", Offset = "0xE7F6B0", VA = "0xE7F6B0")]
	public CardStack(List<BasicCard> cards, bool userCanUpdate)
	{
	}

	[Token(Token = "0x60005CC")]
	[Address(RVA = "0xE7FC74", Offset = "0xE7FC74", VA = "0xE7FC74")]
	public CardStack(CardStack cs)
	{
	}

	[Token(Token = "0x60005CD")]
	[Address(RVA = "0xE7F9DC", Offset = "0xE7F9DC", VA = "0xE7F9DC")]
	public void InitializeCardPositionsForRoom(Room room, List<CardPosition> positions)
	{
	}

	[Token(Token = "0x60005CE")]
	[Address(RVA = "0xE8026C", Offset = "0xE8026C", VA = "0xE8026C")]
	public int GetStackCount()
	{
		return default(int);
	}

	[Token(Token = "0x60005CF")]
	[Address(RVA = "0xE802B4", Offset = "0xE802B4", VA = "0xE802B4")]
	public CardPackage GetCardInStack(Guid cardId)
	{
		return null;
	}

	[Token(Token = "0x60005D0")]
	[Address(RVA = "0xE7E6A0", Offset = "0xE7E6A0", VA = "0xE7E6A0")]
	public List<CardPackage> GetOrderedCardStack()
	{
		return null;
	}

	[Token(Token = "0x60005D1")]
	[Address(RVA = "0xE8031C", Offset = "0xE8031C", VA = "0xE8031C")]
	public List<CardPackage> GetOrderedCardStackCopy()
	{
		return null;
	}
}
[Token(Token = "0x2000134")]
public class CardPackage
{
	[Token(Token = "0x4000627")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Action<CardPosition> OnPositionUpdated;

	[Token(Token = "0x4000628")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool userCanUpdate;

	[Token(Token = "0x4000629")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private BasicCard basicCard;

	[Token(Token = "0x400062A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Dictionary<Room, Vector3> positions;

	[Token(Token = "0x400062B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Dictionary<Room, Vector3> eulerRotations;

	[Token(Token = "0x60005D2")]
	[Address(RVA = "0xE7FB94", Offset = "0xE7FB94", VA = "0xE7FB94")]
	public CardPackage(BasicCard basicCard, bool userCanUpdate)
	{
	}

	[Token(Token = "0x60005D3")]
	[Address(RVA = "0xE7FFBC", Offset = "0xE7FFBC", VA = "0xE7FFBC")]
	public CardPackage(CardPackage cardPackage)
	{
	}

	[Token(Token = "0x60005D4")]
	[Address(RVA = "0xE807B8", Offset = "0xE807B8", VA = "0xE807B8")]
	public bool GetUserCanUpdate()
	{
		return default(bool);
	}

	[Token(Token = "0x60005D5")]
	[Address(RVA = "0xE807C0", Offset = "0xE807C0", VA = "0xE807C0")]
	public void ClearPositionRotationForRoom(Room room)
	{
	}

	[Token(Token = "0x60005D6")]
	[Address(RVA = "0xE80268", Offset = "0xE80268", VA = "0xE80268")]
	public void InitializePositionForRoom(Room room, Vector3 position, Vector3 eulerRotation)
	{
	}

	[Token(Token = "0x60005D7")]
	[Address(RVA = "0xE80974", Offset = "0xE80974", VA = "0xE80974")]
	public void UpsertPositionRotationForRoom(Room room, Vector3 position, Vector3 eulerRotation)
	{
	}

	[Token(Token = "0x60005D8")]
	[Address(RVA = "0xE8082C", Offset = "0xE8082C", VA = "0xE8082C")]
	private void SetPositionForRoom(Room room, Vector3 position, Vector3 eulerRotation)
	{
	}

	[Token(Token = "0x60005D9")]
	[Address(RVA = "0xE80A6C", Offset = "0xE80A6C", VA = "0xE80A6C")]
	public BasicCard GetBasicCard()
	{
		return null;
	}

	[Token(Token = "0x60005DA")]
	[Address(RVA = "0xE8058C", Offset = "0xE8058C", VA = "0xE8058C")]
	public List<Room> GetRoomsWithPositions()
	{
		return null;
	}

	[Token(Token = "0x60005DB")]
	[Address(RVA = "0xE80630", Offset = "0xE80630", VA = "0xE80630")]
	public Vector3 GetPropPositionForRoom(Room room)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60005DC")]
	[Address(RVA = "0xE806F4", Offset = "0xE806F4", VA = "0xE806F4")]
	public Vector3 GetPropRotationForRoom(Room room)
	{
		return default(Vector3);
	}
}
[Token(Token = "0x2000135")]
public class ManagedDeck : MonoBehaviour
{
	[Token(Token = "0x2000136")]
	[CompilerGenerated]
	private sealed class <LoadDeck>d__18 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400063A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400063B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400063C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ManagedDeck <>4__this;

		[Token(Token = "0x170000AF")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60005F4")]
			[Address(RVA = "0xE8140C", Offset = "0xE8140C", VA = "0xE8140C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B0")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60005F6")]
			[Address(RVA = "0xE81454", Offset = "0xE81454", VA = "0xE81454", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60005F1")]
		[Address(RVA = "0xE80DA8", Offset = "0xE80DA8", VA = "0xE80DA8")]
		[DebuggerHidden]
		public <LoadDeck>d__18(int <>1__state)
		{
		}

		[Token(Token = "0x60005F2")]
		[Address(RVA = "0xE81288", Offset = "0xE81288", VA = "0xE81288", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60005F3")]
		[Address(RVA = "0xE8128C", Offset = "0xE8128C", VA = "0xE8128C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60005F5")]
		[Address(RVA = "0xE81414", Offset = "0xE81414", VA = "0xE81414", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000137")]
	[CompilerGenerated]
	private sealed class <DoPickup>d__22 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400063D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400063E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400063F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ManagedDeck <>4__this;

		[Token(Token = "0x170000B1")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60005FA")]
			[Address(RVA = "0xE81740", Offset = "0xE81740", VA = "0xE81740", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B2")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60005FC")]
			[Address(RVA = "0xE81788", Offset = "0xE81788", VA = "0xE81788", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60005F7")]
		[Address(RVA = "0xE80E78", Offset = "0xE80E78", VA = "0xE80E78")]
		[DebuggerHidden]
		public <DoPickup>d__22(int <>1__state)
		{
		}

		[Token(Token = "0x60005F8")]
		[Address(RVA = "0xE8145C", Offset = "0xE8145C", VA = "0xE8145C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60005F9")]
		[Address(RVA = "0xE81460", Offset = "0xE81460", VA = "0xE81460", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60005FB")]
		[Address(RVA = "0xE81748", Offset = "0xE81748", VA = "0xE81748", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400062C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Guid deckId;

	[Token(Token = "0x400062D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool isPreloadedDeck;

	[Token(Token = "0x400062E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool isPreviewDeck;

	[Token(Token = "0x400062F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public DeckPackage deck;

	[Token(Token = "0x4000630")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public TextMeshPro roomLabel;

	[Token(Token = "0x4000631")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public TextMeshPro deckNameLabel;

	[Token(Token = "0x4000632")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public TextMeshPro creatorLabel;

	[Token(Token = "0x4000633")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Grabbable grabbable;

	[Token(Token = "0x4000634")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Autohand.Hand grabbingHand;

	[Token(Token = "0x4000635")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Renderer ratingRenderer;

	[Token(Token = "0x4000636")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Renderer thisRenderer;

	[Token(Token = "0x4000637")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Material librariumMaterial;

	[Token(Token = "0x4000638")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Material iapMaterial;

	[Token(Token = "0x4000639")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private bool deckLoading;

	[Token(Token = "0x60005DD")]
	[Address(RVA = "0xE80A74", Offset = "0xE80A74", VA = "0xE80A74")]
	private void Start()
	{
	}

	[Token(Token = "0x60005DE")]
	[Address(RVA = "0xE80BA0", Offset = "0xE80BA0", VA = "0xE80BA0")]
	public void ConfigToInspectorSetDeck()
	{
	}

	[Token(Token = "0x60005DF")]
	[Address(RVA = "0xE80C34", Offset = "0xE80C34", VA = "0xE80C34")]
	private void SetCreatorNameAndMaterial(string creatorName, bool isLibrariumDeck, Guid deckId)
	{
	}

	[Token(Token = "0x60005E0")]
	[Address(RVA = "0xE78630", Offset = "0xE78630", VA = "0xE78630")]
	public void ConfigToDesignatedDeck(DeckPackage dp, bool isPreviewDeck)
	{
	}

	[Token(Token = "0x60005E1")]
	[Address(RVA = "0xE80BC0", Offset = "0xE80BC0", VA = "0xE80BC0")]
	[IteratorStateMachine(typeof(<LoadDeck>d__18))]
	private IEnumerator LoadDeck()
	{
		return null;
	}

	[Token(Token = "0x60005E2")]
	[Address(RVA = "0xE80DD0", Offset = "0xE80DD0", VA = "0xE80DD0")]
	private void ProcessDeckLoadStart()
	{
	}

	[Token(Token = "0x60005E3")]
	[Address(RVA = "0xE80DDC", Offset = "0xE80DDC", VA = "0xE80DDC")]
	private void ProcessDeckLoadComplete()
	{
	}

	[Token(Token = "0x60005E4")]
	[Address(RVA = "0xE80DE4", Offset = "0xE80DE4", VA = "0xE80DE4")]
	public void OnPickedUp()
	{
	}

	[Token(Token = "0x60005E5")]
	[Address(RVA = "0xE80E04", Offset = "0xE80E04", VA = "0xE80E04")]
	[IteratorStateMachine(typeof(<DoPickup>d__22))]
	private IEnumerator DoPickup()
	{
		return null;
	}

	[Token(Token = "0x60005E6")]
	[Address(RVA = "0xE80EA0", Offset = "0xE80EA0", VA = "0xE80EA0")]
	public void OnReleased()
	{
	}

	[Token(Token = "0x60005E7")]
	[Address(RVA = "0xE811D8", Offset = "0xE811D8", VA = "0xE811D8")]
	public void ShowPreviewCards()
	{
	}

	[Token(Token = "0x60005E8")]
	[Address(RVA = "0xE81028", Offset = "0xE81028", VA = "0xE81028")]
	public void HidePreviewCards()
	{
	}

	[Token(Token = "0x60005E9")]
	[Address(RVA = "0xE81248", Offset = "0xE81248", VA = "0xE81248")]
	public ManagedDeck()
	{
	}
}
[Token(Token = "0x2000138")]
public class ManagedProp : MonoBehaviour
{
	[Token(Token = "0x200013A")]
	[CompilerGenerated]
	private sealed class <Start>d__38 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400065E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400065F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000660")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ManagedProp <>4__this;

		[Token(Token = "0x170000B6")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600061F")]
			[Address(RVA = "0xE833CC", Offset = "0xE833CC", VA = "0xE833CC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B7")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000621")]
			[Address(RVA = "0xE83414", Offset = "0xE83414", VA = "0xE83414", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600061C")]
		[Address(RVA = "0xE818AC", Offset = "0xE818AC", VA = "0xE818AC")]
		[DebuggerHidden]
		public <Start>d__38(int <>1__state)
		{
		}

		[Token(Token = "0x600061D")]
		[Address(RVA = "0xE82B84", Offset = "0xE82B84", VA = "0xE82B84", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600061E")]
		[Address(RVA = "0xE82B88", Offset = "0xE82B88", VA = "0xE82B88", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000620")]
		[Address(RVA = "0xE833D4", Offset = "0xE833D4", VA = "0xE833D4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200013B")]
	[CompilerGenerated]
	private sealed class <co_DistanceCull>d__39 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000661")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000662")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000663")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ManagedProp <>4__this;

		[Token(Token = "0x170000B8")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000625")]
			[Address(RVA = "0xE83618", Offset = "0xE83618", VA = "0xE83618", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B9")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000627")]
			[Address(RVA = "0xE83660", Offset = "0xE83660", VA = "0xE83660", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000622")]
		[Address(RVA = "0xE81948", Offset = "0xE81948", VA = "0xE81948")]
		[DebuggerHidden]
		public <co_DistanceCull>d__39(int <>1__state)
		{
		}

		[Token(Token = "0x6000623")]
		[Address(RVA = "0xE8341C", Offset = "0xE8341C", VA = "0xE8341C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000624")]
		[Address(RVA = "0xE83420", Offset = "0xE83420", VA = "0xE83420", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000626")]
		[Address(RVA = "0xE83620", Offset = "0xE83620", VA = "0xE83620", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200013C")]
	[CompilerGenerated]
	private sealed class <StartStateSavingDelayedActivation>d__41 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000664")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000665")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000666")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ManagedProp <>4__this;

		[Token(Token = "0x170000BA")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600062B")]
			[Address(RVA = "0xE83720", Offset = "0xE83720", VA = "0xE83720", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000BB")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600062D")]
			[Address(RVA = "0xE83768", Offset = "0xE83768", VA = "0xE83768", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000628")]
		[Address(RVA = "0xE81AF4", Offset = "0xE81AF4", VA = "0xE81AF4")]
		[DebuggerHidden]
		public <StartStateSavingDelayedActivation>d__41(int <>1__state)
		{
		}

		[Token(Token = "0x6000629")]
		[Address(RVA = "0xE83668", Offset = "0xE83668", VA = "0xE83668", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600062A")]
		[Address(RVA = "0xE8366C", Offset = "0xE8366C", VA = "0xE8366C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600062C")]
		[Address(RVA = "0xE83728", Offset = "0xE83728", VA = "0xE83728", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000641")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TraversableProp traversableProp;

	[Token(Token = "0x4000642")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool addToDeckManager;

	[Token(Token = "0x4000643")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public CardPackage prop;

	[Token(Token = "0x4000644")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool hasBeenViewedThisSession;

	[Token(Token = "0x4000645")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Autohand.Hand grabbingHand;

	[Token(Token = "0x4000646")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float distanceAlongTraversablePath;

	[Token(Token = "0x4000647")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Grabbable grabbable;

	[Token(Token = "0x4000648")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool hasSavedFromStopping;

	[Token(Token = "0x4000649")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Transform thisTransform;

	[Token(Token = "0x400064A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Rigidbody thisRigidbody;

	[Token(Token = "0x400064B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private List<ManagedProp> children;

	[Token(Token = "0x400064C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private bool isNested;

	[Token(Token = "0x400064D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
	private bool startStarted;

	[Token(Token = "0x400064E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7A")]
	private bool startCompleted;

	[Token(Token = "0x400064F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7B")]
	public bool hasBeenMemorized;

	[Token(Token = "0x4000650")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public bool suppressPositionSave;

	[Token(Token = "0x4000651")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7D")]
	public bool doNotInitialize;

	[Token(Token = "0x4000652")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private int currentChildStackIndex;

	[Token(Token = "0x4000653")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private Vector3 originalPosition;

	[Token(Token = "0x4000654")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Vector3 originalEulerAngles;

	[Token(Token = "0x4000655")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private HighlightEffect highlightEffect;

	[Token(Token = "0x4000656")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private WaitForSeconds distToHMDDelay;

	[Token(Token = "0x4000657")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private float verticalThresholdToHMD;

	[Token(Token = "0x4000658")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	private float xzThresholdToHMD;

	[Token(Token = "0x4000659")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private MeshRenderer[] meshRenderers;

	[Token(Token = "0x170000B3")]
	public DeckManager deckManager
	{
		[Token(Token = "0x60005FD")]
		[Address(RVA = "0xE81790", Offset = "0xE81790", VA = "0xE81790")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60005FE")]
		[Address(RVA = "0xE81798", Offset = "0xE81798", VA = "0xE81798")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170000B4")]
	public bool tempDisableAutomaticStateSaving
	{
		[Token(Token = "0x60005FF")]
		[Address(RVA = "0xE817A0", Offset = "0xE817A0", VA = "0xE817A0")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000600")]
		[Address(RVA = "0xE817A8", Offset = "0xE817A8", VA = "0xE817A8")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170000B5")]
	public bool permDisableAutomaticStateSaving
	{
		[Token(Token = "0x6000601")]
		[Address(RVA = "0xE817B4", Offset = "0xE817B4", VA = "0xE817B4")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000602")]
		[Address(RVA = "0xE817BC", Offset = "0xE817BC", VA = "0xE817BC")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x6000603")]
	[Address(RVA = "0xE817C8", Offset = "0xE817C8", VA = "0xE817C8")]
	public void Awake()
	{
	}

	[Token(Token = "0x6000604")]
	[Address(RVA = "0xE81838", Offset = "0xE81838", VA = "0xE81838")]
	[IteratorStateMachine(typeof(<Start>d__38))]
	public IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x6000605")]
	[Address(RVA = "0xE818D4", Offset = "0xE818D4", VA = "0xE818D4")]
	[IteratorStateMachine(typeof(<co_DistanceCull>d__39))]
	private IEnumerator co_DistanceCull()
	{
		return null;
	}

	[Token(Token = "0x6000606")]
	[Address(RVA = "0xE81970", Offset = "0xE81970", VA = "0xE81970")]
	private void SetupHighlight()
	{
	}

	[Token(Token = "0x6000607")]
	[Address(RVA = "0xE81A80", Offset = "0xE81A80", VA = "0xE81A80")]
	[IteratorStateMachine(typeof(<StartStateSavingDelayedActivation>d__41))]
	private IEnumerator StartStateSavingDelayedActivation()
	{
		return null;
	}

	[Token(Token = "0x6000608")]
	[Address(RVA = "0xE81B1C", Offset = "0xE81B1C", VA = "0xE81B1C")]
	private Transform GetThisTransform()
	{
		return null;
	}

	[Token(Token = "0x6000609")]
	[Address(RVA = "0xE81BB0", Offset = "0xE81BB0", VA = "0xE81BB0")]
	public void SetTempDisabledAutomaticStateSaving(bool disabled)
	{
	}

	[Token(Token = "0x600060A")]
	[Address(RVA = "0xE81BBC", Offset = "0xE81BBC", VA = "0xE81BBC")]
	public void SetPermDisabledAutomaticStateSaving(bool disabled)
	{
	}

	[Token(Token = "0x600060B")]
	[Address(RVA = "0xE81BC8", Offset = "0xE81BC8", VA = "0xE81BC8")]
	public void SetAsNestedParent(bool enable)
	{
	}

	[Token(Token = "0x600060C")]
	[Address(RVA = "0xE81D90", Offset = "0xE81D90", VA = "0xE81D90")]
	public void AddChildGUIDToDictionary(ManagedProp child)
	{
	}

	[Token(Token = "0x600060D")]
	[Address(RVA = "0xE81E40", Offset = "0xE81E40", VA = "0xE81E40")]
	public void SetIsNested()
	{
	}

	[Token(Token = "0x600060E")]
	[Address(RVA = "0xE81E4C", Offset = "0xE81E4C", VA = "0xE81E4C")]
	public void ResetPosition(Vector3 offset)
	{
	}

	[Token(Token = "0x600060F")]
	[Address(RVA = "0xE8201C", Offset = "0xE8201C", VA = "0xE8201C")]
	public Vector3 GetStartPosition()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000610")]
	[Address(RVA = "0xE82090", Offset = "0xE82090", VA = "0xE82090")]
	public Vector3 GetStartRotation()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000611")]
	[Address(RVA = "0xE82104", Offset = "0xE82104", VA = "0xE82104")]
	public bool GetChildrenWereAllMemorized()
	{
		return default(bool);
	}

	[Token(Token = "0x6000612")]
	[Address(RVA = "0xE82250", Offset = "0xE82250", VA = "0xE82250")]
	private void Update()
	{
	}

	[Token(Token = "0x6000613")]
	[Address(RVA = "0xE82350", Offset = "0xE82350", VA = "0xE82350")]
	[ContextMenu("Save Prop State")]
	public void SavePropState()
	{
	}

	[Token(Token = "0x6000614")]
	[Address(RVA = "0xE824D8", Offset = "0xE824D8", VA = "0xE824D8")]
	public ManagedProp()
	{
	}
}
[Token(Token = "0x200013D")]
public class PurchasableDeck : MonoBehaviour
{
	[Token(Token = "0x4000667")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string sku;

	[Token(Token = "0x4000668")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextMeshPro deckNameLabel;

	[Token(Token = "0x600062E")]
	[Address(RVA = "0xE83770", Offset = "0xE83770", VA = "0xE83770")]
	private void Start()
	{
	}

	[Token(Token = "0x600062F")]
	[Address(RVA = "0xE837A4", Offset = "0xE837A4", VA = "0xE837A4")]
	public PurchasableDeck()
	{
	}
}
[Token(Token = "0x200013E")]
public class DeckRetriever : MonoBehaviour
{
	[Token(Token = "0x200013F")]
	[CompilerGenerated]
	private sealed class <SpawnOriginalDeckAfterTime>d__14 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000672")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000673")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000674")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DeckRetriever <>4__this;

		[Token(Token = "0x170000BC")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600063B")]
			[Address(RVA = "0xE840F0", Offset = "0xE840F0", VA = "0xE840F0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000BD")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600063D")]
			[Address(RVA = "0xE84138", Offset = "0xE84138", VA = "0xE84138", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000638")]
		[Address(RVA = "0xE83C70", Offset = "0xE83C70", VA = "0xE83C70")]
		[DebuggerHidden]
		public <SpawnOriginalDeckAfterTime>d__14(int <>1__state)
		{
		}

		[Token(Token = "0x6000639")]
		[Address(RVA = "0xE83D88", Offset = "0xE83D88", VA = "0xE83D88", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600063A")]
		[Address(RVA = "0xE83D8C", Offset = "0xE83D8C", VA = "0xE83D8C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600063C")]
		[Address(RVA = "0xE840F8", Offset = "0xE840F8", VA = "0xE840F8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000669")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Renderer[] renderers;

	[Token(Token = "0x400066A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Material blueMaterial;

	[Token(Token = "0x400066B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Material grayMaterial;

	[Token(Token = "0x400066C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioSource audioSource;

	[Token(Token = "0x400066D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private DeckPackage deckToClose;

	[Token(Token = "0x400066E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int handsOnStay;

	[Token(Token = "0x400066F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private bool hasBeenPushed;

	[Token(Token = "0x4000670")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
	private bool isEnabled;

	[Token(Token = "0x4000671")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Autohand.Hand rHand;

	[Token(Token = "0x6000630")]
	[Address(RVA = "0xE837AC", Offset = "0xE837AC", VA = "0xE837AC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000631")]
	[Address(RVA = "0xE83AAC", Offset = "0xE83AAC", VA = "0xE83AAC")]
	private void ToggleOn(Autohand.Hand hand, Grabbable grabbable)
	{
	}

	[Token(Token = "0x6000632")]
	[Address(RVA = "0xE83AB4", Offset = "0xE83AB4", VA = "0xE83AB4")]
	private void ToggleOff(Autohand.Hand hand, Grabbable grabbable)
	{
	}

	[Token(Token = "0x6000633")]
	[Address(RVA = "0xE83940", Offset = "0xE83940", VA = "0xE83940")]
	private void Toggle(bool enable)
	{
	}

	[Token(Token = "0x6000634")]
	[Address(RVA = "0xE83ABC", Offset = "0xE83ABC", VA = "0xE83ABC")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000635")]
	[Address(RVA = "0xE83BFC", Offset = "0xE83BFC", VA = "0xE83BFC")]
	[IteratorStateMachine(typeof(<SpawnOriginalDeckAfterTime>d__14))]
	private IEnumerator SpawnOriginalDeckAfterTime()
	{
		return null;
	}

	[Token(Token = "0x6000636")]
	[Address(RVA = "0xE83C98", Offset = "0xE83C98", VA = "0xE83C98")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000637")]
	[Address(RVA = "0xE83D78", Offset = "0xE83D78", VA = "0xE83D78")]
	public DeckRetriever()
	{
	}
}
[Token(Token = "0x2000140")]
public class DetectMovementService : MonoBehaviour
{
	[Token(Token = "0x4000675")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform targetTransform;

	[Token(Token = "0x4000676")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Vector3 oldForward;

	[Token(Token = "0x600063E")]
	[Address(RVA = "0xE84140", Offset = "0xE84140", VA = "0xE84140")]
	private void Start()
	{
	}

	[Token(Token = "0x600063F")]
	[Address(RVA = "0xE8416C", Offset = "0xE8416C", VA = "0xE8416C")]
	private void DetectRotation()
	{
	}

	[Token(Token = "0x6000640")]
	[Address(RVA = "0xE84218", Offset = "0xE84218", VA = "0xE84218")]
	private void Update()
	{
	}

	[Token(Token = "0x6000641")]
	[Address(RVA = "0xE8421C", Offset = "0xE8421C", VA = "0xE8421C")]
	public DetectMovementService()
	{
	}
}
[Token(Token = "0x2000141")]
public class DirectionIndicator : MonoBehaviour
{
	[Token(Token = "0x2000142")]
	[CompilerGenerated]
	private sealed class <PointToTarget>d__13 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000681")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000682")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000683")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DirectionIndicator <>4__this;

		[Token(Token = "0x170000BE")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600064B")]
			[Address(RVA = "0xE84D2C", Offset = "0xE84D2C", VA = "0xE84D2C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000BF")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600064D")]
			[Address(RVA = "0xE84D74", Offset = "0xE84D74", VA = "0xE84D74", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000648")]
		[Address(RVA = "0xE84760", Offset = "0xE84760", VA = "0xE84760")]
		[DebuggerHidden]
		public <PointToTarget>d__13(int <>1__state)
		{
		}

		[Token(Token = "0x6000649")]
		[Address(RVA = "0xE847A4", Offset = "0xE847A4", VA = "0xE847A4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600064A")]
		[Address(RVA = "0xE847A8", Offset = "0xE847A8", VA = "0xE847A8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600064C")]
		[Address(RVA = "0xE84D34", Offset = "0xE84D34", VA = "0xE84D34", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000677")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform target;

	[Token(Token = "0x4000678")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform hmd;

	[Token(Token = "0x4000679")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject pointerPrefab;

	[Token(Token = "0x400067A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject destroyPointerEffectPrefab;

	[Token(Token = "0x400067B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float distanceFromHmd;

	[Token(Token = "0x400067C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float translationSmoothing;

	[Token(Token = "0x400067D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private RotateToFaceObject pointerRotator;

	[Token(Token = "0x400067E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private PointingHandIndicatorEffect phie;

	[Token(Token = "0x400067F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Transform pointer;

	[Token(Token = "0x4000680")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private GameObject destroyPointerEffect;

	[Token(Token = "0x6000642")]
	[Address(RVA = "0xE84224", Offset = "0xE84224", VA = "0xE84224")]
	private void Start()
	{
	}

	[Token(Token = "0x6000643")]
	[Address(RVA = "0xE844D4", Offset = "0xE844D4", VA = "0xE844D4")]
	public void SetTarget(Transform target)
	{
	}

	[Token(Token = "0x6000644")]
	[Address(RVA = "0xE8462C", Offset = "0xE8462C", VA = "0xE8462C")]
	private void SpawnDestroyEffect()
	{
	}

	[Token(Token = "0x6000645")]
	[Address(RVA = "0xE846EC", Offset = "0xE846EC", VA = "0xE846EC")]
	[IteratorStateMachine(typeof(<PointToTarget>d__13))]
	private IEnumerator PointToTarget()
	{
		return null;
	}

	[Token(Token = "0x6000646")]
	[Address(RVA = "0xE84788", Offset = "0xE84788", VA = "0xE84788")]
	public DirectionIndicator()
	{
	}
}
[Token(Token = "0x2000143")]
public class DisableTester : MonoBehaviour
{
	[Token(Token = "0x600064E")]
	[Address(RVA = "0xE84D7C", Offset = "0xE84D7C", VA = "0xE84D7C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600064F")]
	[Address(RVA = "0xE84D80", Offset = "0xE84D80", VA = "0xE84D80")]
	public DisableTester()
	{
	}
}
[Token(Token = "0x2000144")]
public class DiversHelmetController : MonoBehaviour
{
	[Token(Token = "0x4000684")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Rigidbody helmetRb;

	[Token(Token = "0x4000685")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform helmet;

	[Token(Token = "0x4000686")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Grabbable grabbable;

	[Token(Token = "0x4000687")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject diveHelmetInternal;

	[Token(Token = "0x4000688")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject diveHelmetExternal;

	[Token(Token = "0x4000689")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float positionLerpMultiplier;

	[Token(Token = "0x400068A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float rotationLerpMultiplier;

	[Token(Token = "0x400068B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float helmetPositionOnHead;

	[Token(Token = "0x400068C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public AudioSource onHeadAudioSource;

	[Token(Token = "0x400068D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public AudioSource inWaterAudioSource;

	[Token(Token = "0x400068E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public SwitchboardPuzzleTrigger onWaterLowered;

	[Token(Token = "0x400068F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public PublishTriggerEnterExit zoneCollider;

	[Token(Token = "0x4000690")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private bool helmetAttached;

	[Token(Token = "0x4000691")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
	private bool inDoNotRemoveZone;

	[Token(Token = "0x4000692")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Transform playerHead;

	[Token(Token = "0x4000693")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private int doNotRemoveZoneCounter;

	[Token(Token = "0x4000694")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private Vector3 velocity;

	[Token(Token = "0x6000650")]
	[Address(RVA = "0xE84D88", Offset = "0xE84D88", VA = "0xE84D88")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000651")]
	[Address(RVA = "0xE84F20", Offset = "0xE84F20", VA = "0xE84F20")]
	private void Start()
	{
	}

	[Token(Token = "0x6000652")]
	[Address(RVA = "0xE85298", Offset = "0xE85298", VA = "0xE85298")]
	private void RegisterNoRemovalZoneEnter(Collider other)
	{
	}

	[Token(Token = "0x6000653")]
	[Address(RVA = "0xE85350", Offset = "0xE85350", VA = "0xE85350")]
	private void RegisterNoRemovalZoneExit(Collider other)
	{
	}

	[Token(Token = "0x6000654")]
	[Address(RVA = "0xE8540C", Offset = "0xE8540C", VA = "0xE8540C")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000655")]
	[Address(RVA = "0xE854F8", Offset = "0xE854F8", VA = "0xE854F8")]
	public DiversHelmetController()
	{
	}
}
[Token(Token = "0x2000145")]
public class DontDestroyOnLoad : MonoBehaviour
{
	[Token(Token = "0x600065B")]
	[Address(RVA = "0xE85820", Offset = "0xE85820", VA = "0xE85820")]
	private void Awake()
	{
	}

	[Token(Token = "0x600065C")]
	[Address(RVA = "0xE8595C", Offset = "0xE8595C", VA = "0xE8595C")]
	public DontDestroyOnLoad()
	{
	}
}
[Token(Token = "0x2000146")]
public class DropCard : MonoBehaviour
{
	[Token(Token = "0x4000695")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TextMeshPro frontText;

	[Token(Token = "0x600065E")]
	[Address(RVA = "0xE859D0", Offset = "0xE859D0", VA = "0xE859D0")]
	public DropCard()
	{
	}
}
[Token(Token = "0x2000147")]
[RequireComponent(typeof(Grabbable))]
public class DropObjectEffect : MonoBehaviour
{
	[Token(Token = "0x2000148")]
	[CompilerGenerated]
	private sealed class <DoDropEffect>d__10 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400069E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400069F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40006A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DropObjectEffect <>4__this;

		[Token(Token = "0x40006A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float delay;

		[Token(Token = "0x170000C0")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000669")]
			[Address(RVA = "0xE86104", Offset = "0xE86104", VA = "0xE86104", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C1")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600066B")]
			[Address(RVA = "0xE8614C", Offset = "0xE8614C", VA = "0xE8614C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000666")]
		[Address(RVA = "0xE85CF4", Offset = "0xE85CF4", VA = "0xE85CF4")]
		[DebuggerHidden]
		public <DoDropEffect>d__10(int <>1__state)
		{
		}

		[Token(Token = "0x6000667")]
		[Address(RVA = "0xE85EA8", Offset = "0xE85EA8", VA = "0xE85EA8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000668")]
		[Address(RVA = "0xE85EAC", Offset = "0xE85EAC", VA = "0xE85EAC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600066A")]
		[Address(RVA = "0xE8610C", Offset = "0xE8610C", VA = "0xE8610C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000696")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Action onPoofComplete;

	[Token(Token = "0x4000697")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject poofEffect;

	[Token(Token = "0x4000698")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float timeBeforePoof;

	[Token(Token = "0x4000699")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool respawnInOriginalSpot;

	[Token(Token = "0x400069A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected Grabbable grabbable;

	[Token(Token = "0x400069B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected bool isDropping;

	[Token(Token = "0x400069C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	protected Vector3 origPos;

	[Token(Token = "0x400069D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected Vector3 origRot;

	[Token(Token = "0x600065F")]
	[Address(RVA = "0xE859D8", Offset = "0xE859D8", VA = "0xE859D8", Slot = "4")]
	protected virtual void Start()
	{
	}

	[Token(Token = "0x6000660")]
	[Address(RVA = "0xE85BCC", Offset = "0xE85BCC", VA = "0xE85BCC", Slot = "5")]
	public virtual void DropEffect(float delay)
	{
	}

	[Token(Token = "0x6000661")]
	[Address(RVA = "0xE85C70", Offset = "0xE85C70", VA = "0xE85C70", Slot = "6")]
	[IteratorStateMachine(typeof(<DoDropEffect>d__10))]
	protected virtual IEnumerator DoDropEffect(float delay)
	{
		return null;
	}

	[Token(Token = "0x6000662")]
	[Address(RVA = "0xE85D1C", Offset = "0xE85D1C", VA = "0xE85D1C", Slot = "7")]
	protected virtual void RespawnInOriginalSpot()
	{
	}

	[Token(Token = "0x6000663")]
	[Address(RVA = "0xE85E34", Offset = "0xE85E34", VA = "0xE85E34")]
	public DropObjectEffect()
	{
	}
}
[Token(Token = "0x2000149")]
public class EightController : Singleton<EightController>
{
	[Token(Token = "0x200014B")]
	[CompilerGenerated]
	private sealed class <co_ProcessExpression>d__30 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40006C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40006C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40006C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EightController <>4__this;

		[Token(Token = "0x40006C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public EightExpressionType expressionType;

		[Token(Token = "0x40006C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Action onCompleteCallback;

		[Token(Token = "0x40006C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float <timer>5__2;

		[Token(Token = "0x40006C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Dictionary<float, EightAnimations>.Enumerator <>7__wrap2;

		[Token(Token = "0x40006C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private KeyValuePair<float, EightAnimations> <animationAtTime>5__4;

		[Token(Token = "0x170000C2")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000691")]
			[Address(RVA = "0xE88CC0", Offset = "0xE88CC0", VA = "0xE88CC0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C3")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000693")]
			[Address(RVA = "0xE88D08", Offset = "0xE88D08", VA = "0xE88D08", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600068D")]
		[Address(RVA = "0xE86AA8", Offset = "0xE86AA8", VA = "0xE86AA8")]
		[DebuggerHidden]
		public <co_ProcessExpression>d__30(int <>1__state)
		{
		}

		[Token(Token = "0x600068E")]
		[Address(RVA = "0xE88804", Offset = "0xE88804", VA = "0xE88804", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600068F")]
		[Address(RVA = "0xE88820", Offset = "0xE88820", VA = "0xE88820", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000690")]
		[Address(RVA = "0xE88C70", Offset = "0xE88C70", VA = "0xE88C70")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x6000692")]
		[Address(RVA = "0xE88CC8", Offset = "0xE88CC8", VA = "0xE88CC8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200014C")]
	[CompilerGenerated]
	private sealed class <ProcessSubtitles>d__31 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40006C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40006C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40006CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EightController <>4__this;

		[Token(Token = "0x40006CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public EightExpressionType expressionType;

		[Token(Token = "0x40006CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <timer>5__2;

		[Token(Token = "0x40006CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private EightExpression <exp>5__3;

		[Token(Token = "0x40006CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<float>.Enumerator <>7__wrap3;

		[Token(Token = "0x40006CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float <subTime>5__5;

		[Token(Token = "0x170000C4")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000698")]
			[Address(RVA = "0xE892B8", Offset = "0xE892B8", VA = "0xE892B8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C5")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600069A")]
			[Address(RVA = "0xE89300", Offset = "0xE89300", VA = "0xE89300", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000694")]
		[Address(RVA = "0xE86B54", Offset = "0xE86B54", VA = "0xE86B54")]
		[DebuggerHidden]
		public <ProcessSubtitles>d__31(int <>1__state)
		{
		}

		[Token(Token = "0x6000695")]
		[Address(RVA = "0xE88D10", Offset = "0xE88D10", VA = "0xE88D10", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000696")]
		[Address(RVA = "0xE88D2C", Offset = "0xE88D2C", VA = "0xE88D2C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000697")]
		[Address(RVA = "0xE89268", Offset = "0xE89268", VA = "0xE89268")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x6000699")]
		[Address(RVA = "0xE892C0", Offset = "0xE892C0", VA = "0xE892C0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200014E")]
	[CompilerGenerated]
	private sealed class <co_MaterializeAndExpress>d__38 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40006D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40006D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40006D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EightController <>4__this;

		[Token(Token = "0x40006D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 approachOrigin;

		[Token(Token = "0x40006D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector3 approachDestination;

		[Token(Token = "0x40006D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public EightExpressionType expression;

		[Token(Token = "0x40006D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Vector3 departDestination;

		[Token(Token = "0x40006D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Action callback;

		[Token(Token = "0x170000C6")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60006A0")]
			[Address(RVA = "0xE89668", Offset = "0xE89668", VA = "0xE89668", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C7")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60006A2")]
			[Address(RVA = "0xE896B0", Offset = "0xE896B0", VA = "0xE896B0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600069D")]
		[Address(RVA = "0xE87F48", Offset = "0xE87F48", VA = "0xE87F48")]
		[DebuggerHidden]
		public <co_MaterializeAndExpress>d__38(int <>1__state)
		{
		}

		[Token(Token = "0x600069E")]
		[Address(RVA = "0xE89364", Offset = "0xE89364", VA = "0xE89364", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600069F")]
		[Address(RVA = "0xE89368", Offset = "0xE89368", VA = "0xE89368", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60006A1")]
		[Address(RVA = "0xE89670", Offset = "0xE89670", VA = "0xE89670", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200014F")]
	[CompilerGenerated]
	private sealed class <co_MaterializeByPlayerAndExpress>d__40 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40006D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40006DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40006DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EightController <>4__this;

		[Token(Token = "0x40006DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float finalDist;

		[Token(Token = "0x40006DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float spawnDist;

		[Token(Token = "0x40006DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public EightExpressionType expression;

		[Token(Token = "0x40006DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Action callback;

		[Token(Token = "0x40006E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private (Vector3, Vector3) <playerNearFarPoints>5__2;

		[Token(Token = "0x170000C8")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60006A6")]
			[Address(RVA = "0xE899EC", Offset = "0xE899EC", VA = "0xE899EC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C9")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60006A8")]
			[Address(RVA = "0xE89A34", Offset = "0xE89A34", VA = "0xE89A34", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60006A3")]
		[Address(RVA = "0xE88090", Offset = "0xE88090", VA = "0xE88090")]
		[DebuggerHidden]
		public <co_MaterializeByPlayerAndExpress>d__40(int <>1__state)
		{
		}

		[Token(Token = "0x60006A4")]
		[Address(RVA = "0xE896B8", Offset = "0xE896B8", VA = "0xE896B8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60006A5")]
		[Address(RVA = "0xE896BC", Offset = "0xE896BC", VA = "0xE896BC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60006A7")]
		[Address(RVA = "0xE899F4", Offset = "0xE899F4", VA = "0xE899F4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000150")]
	[CompilerGenerated]
	private sealed class <FadeMove>d__42 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40006E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40006E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40006E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EightController <>4__this;

		[Token(Token = "0x40006E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 origin;

		[Token(Token = "0x40006E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool fadeIn;

		[Token(Token = "0x40006E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector3 destination;

		[Token(Token = "0x170000CA")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60006AC")]
			[Address(RVA = "0xE8A0B8", Offset = "0xE8A0B8", VA = "0xE8A0B8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000CB")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60006AE")]
			[Address(RVA = "0xE8A100", Offset = "0xE8A100", VA = "0xE8A100", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60006A9")]
		[Address(RVA = "0xE88560", Offset = "0xE88560", VA = "0xE88560")]
		[DebuggerHidden]
		public <FadeMove>d__42(int <>1__state)
		{
		}

		[Token(Token = "0x60006AA")]
		[Address(RVA = "0xE89A3C", Offset = "0xE89A3C", VA = "0xE89A3C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60006AB")]
		[Address(RVA = "0xE89A40", Offset = "0xE89A40", VA = "0xE89A40", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60006AD")]
		[Address(RVA = "0xE8A0C0", Offset = "0xE8A0C0", VA = "0xE8A0C0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000151")]
	[CompilerGenerated]
	private sealed class <FaceEight>d__44 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40006E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40006E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x170000CC")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60006B2")]
			[Address(RVA = "0xE8A15C", Offset = "0xE8A15C", VA = "0xE8A15C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000CD")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60006B4")]
			[Address(RVA = "0xE8A1A4", Offset = "0xE8A1A4", VA = "0xE8A1A4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60006AF")]
		[Address(RVA = "0xE885E8", Offset = "0xE885E8", VA = "0xE885E8")]
		[DebuggerHidden]
		public <FaceEight>d__44(int <>1__state)
		{
		}

		[Token(Token = "0x60006B0")]
		[Address(RVA = "0xE8A108", Offset = "0xE8A108", VA = "0xE8A108", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60006B1")]
		[Address(RVA = "0xE8A10C", Offset = "0xE8A10C", VA = "0xE8A10C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60006B3")]
		[Address(RVA = "0xE8A164", Offset = "0xE8A164", VA = "0xE8A164", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40006A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PublishTriggerEnterExit enterCollider;

	[Token(Token = "0x40006A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public PublishTriggerEnterExit exitCollider;

	[Token(Token = "0x40006A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public EightExpressionRepository expressionRepository;

	[Token(Token = "0x40006A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Animator animator;

	[Token(Token = "0x40006A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AudioSource audioSource;

	[Token(Token = "0x40006A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AudioClip audioTest;

	[Token(Token = "0x40006A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float walkingSpeed;

	[Token(Token = "0x40006A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float runningSpeed;

	[Token(Token = "0x40006AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float normalTurnSpeed;

	[Token(Token = "0x40006AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float quickTurnSpeed;

	[Token(Token = "0x40006AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Action OnEightMoveComplete;

	[Token(Token = "0x40006AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Transform thisTransform;

	[Token(Token = "0x40006AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public EightDissolver eightDissolver;

	[Token(Token = "0x40006AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public float approachStartDistance;

	[Token(Token = "0x40006B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public float approachEndDistance;

	[Token(Token = "0x40006B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public float eightHeightAboveNode;

	[Token(Token = "0x40006B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public GameObject eightsBook;

	[Token(Token = "0x40006B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public RotateToFaceObject[] eyeRotators;

	[Token(Token = "0x40006B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[CanBeNull]
	public EightExpressionType testExpression;

	[Token(Token = "0x40006B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private bool playerProximate;

	[Token(Token = "0x40006B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private GameObject thisGameObject;

	[Token(Token = "0x40006B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private Transform playerTrans;

	[Token(Token = "0x40006B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Coroutine materializeCoroutine;

	[Token(Token = "0x40006B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Coroutine fadeMoveCoroutine;

	[Token(Token = "0x40006BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private Coroutine expressionCoroutine;

	[Token(Token = "0x40006BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private Coroutine subtitleCoroutine;

	[Token(Token = "0x600066C")]
	[Address(RVA = "0xE86154", Offset = "0xE86154", VA = "0xE86154", Slot = "5")]
	protected override void DidAwake()
	{
	}

	[Token(Token = "0x600066D")]
	[Address(RVA = "0xE863EC", Offset = "0xE863EC", VA = "0xE863EC")]
	private void Start()
	{
	}

	[Token(Token = "0x600066E")]
	[Address(RVA = "0xE8662C", Offset = "0xE8662C", VA = "0xE8662C")]
	private void ResetAnimationTriggers()
	{
	}

	[Token(Token = "0x600066F")]
	[Address(RVA = "0xE86384", Offset = "0xE86384", VA = "0xE86384")]
	public void ProcessExpression(EightExpressionType expressionType, Action onCompleteCallback)
	{
	}

	[Token(Token = "0x6000670")]
	[Address(RVA = "0xE86A10", Offset = "0xE86A10", VA = "0xE86A10")]
	[IteratorStateMachine(typeof(<co_ProcessExpression>d__30))]
	private IEnumerator co_ProcessExpression(EightExpressionType expressionType, Action onCompleteCallback)
	{
		return null;
	}

	[Token(Token = "0x6000671")]
	[Address(RVA = "0xE86AD0", Offset = "0xE86AD0", VA = "0xE86AD0")]
	[IteratorStateMachine(typeof(<ProcessSubtitles>d__31))]
	private IEnumerator ProcessSubtitles(EightExpressionType expressionType)
	{
		return null;
	}

	[Token(Token = "0x6000672")]
	[Address(RVA = "0xE86954", Offset = "0xE86954", VA = "0xE86954")]
	private void CancelExpression()
	{
	}

	[Token(Token = "0x6000673")]
	[Address(RVA = "0xE86B7C", Offset = "0xE86B7C", VA = "0xE86B7C")]
	public void CancelAllEightActivity()
	{
	}

	[Token(Token = "0x6000674")]
	[Address(RVA = "0xE86BDC", Offset = "0xE86BDC", VA = "0xE86BDC")]
	private void ToggleEightPropsAndEyeFocus(bool showProp, EightAnimations propToShow)
	{
	}

	[Token(Token = "0x6000675")]
	[Address(RVA = "0xE87408", Offset = "0xE87408", VA = "0xE87408")]
	public void Move(EightMovement payload)
	{
	}

	[Token(Token = "0x6000676")]
	[Address(RVA = "0xE87CD8", Offset = "0xE87CD8", VA = "0xE87CD8")]
	private void OnMoveComplete()
	{
	}

	[Token(Token = "0x6000677")]
	[Address(RVA = "0xE87D7C", Offset = "0xE87D7C", VA = "0xE87D7C")]
	public void MaterializeAndExpress(Vector3 approachOrigin, Vector3 approachDestination, Vector3 departDestination, EightExpressionType expression, Action callback)
	{
	}

	[Token(Token = "0x6000678")]
	[Address(RVA = "0xE87E50", Offset = "0xE87E50", VA = "0xE87E50")]
	[IteratorStateMachine(typeof(<co_MaterializeAndExpress>d__38))]
	private IEnumerator co_MaterializeAndExpress(Vector3 approachOrigin, Vector3 approachDestination, Vector3 departDestination, EightExpressionType expression, Action callback)
	{
		return null;
	}

	[Token(Token = "0x6000679")]
	[Address(RVA = "0xE87F70", Offset = "0xE87F70", VA = "0xE87F70")]
	public void MaterializeByPlayerAndExpress(EightExpressionType expression, Action callback)
	{
	}

	[Token(Token = "0x600067A")]
	[Address(RVA = "0xE87FE4", Offset = "0xE87FE4", VA = "0xE87FE4")]
	[IteratorStateMachine(typeof(<co_MaterializeByPlayerAndExpress>d__40))]
	private IEnumerator co_MaterializeByPlayerAndExpress(float spawnDist, float finalDist, EightExpressionType expression, Action callback)
	{
		return null;
	}

	[Token(Token = "0x600067B")]
	[Address(RVA = "0xE880B8", Offset = "0xE880B8", VA = "0xE880B8")]
	private (Vector3, Vector3) GetPlayerBasedNearFar(float nearDist, float farDist, float forwardOffset)
	{
		return default((Vector3, Vector3));
	}

	[Token(Token = "0x600067C")]
	[Address(RVA = "0xE88498", Offset = "0xE88498", VA = "0xE88498")]
	[IteratorStateMachine(typeof(<FadeMove>d__42))]
	private IEnumerator FadeMove(Vector3 origin, Vector3 destination, bool fadeIn)
	{
		return null;
	}

	[Token(Token = "0x600067D")]
	[Address(RVA = "0xE87C30", Offset = "0xE87C30", VA = "0xE87C30")]
	private float GetTravelTime(bool isRunning, float distance)
	{
		return default(float);
	}

	[Token(Token = "0x600067E")]
	[Address(RVA = "0xE88588", Offset = "0xE88588", VA = "0xE88588")]
	[IteratorStateMachine(typeof(<FaceEight>d__44))]
	private IEnumerator FaceEight(Vector3 targetFacingForward, bool quickTurn)
	{
		return null;
	}

	[Token(Token = "0x600067F")]
	[Address(RVA = "0xE88610", Offset = "0xE88610", VA = "0xE88610")]
	public void StopTalking()
	{
	}

	[Token(Token = "0x6000680")]
	[Address(RVA = "0xE87C4C", Offset = "0xE87C4C", VA = "0xE87C4C")]
	public void PlayAnimation(EightAnimations animation)
	{
	}

	[Token(Token = "0x6000681")]
	[Address(RVA = "0xE8862C", Offset = "0xE8862C", VA = "0xE8862C")]
	private void ProcessProximityCollider(bool entered)
	{
	}

	[Token(Token = "0x6000682")]
	[Address(RVA = "0xE886F4", Offset = "0xE886F4", VA = "0xE886F4")]
	private bool IsUserProximateToEight()
	{
		return default(bool);
	}

	[Token(Token = "0x6000683")]
	[Address(RVA = "0xE886FC", Offset = "0xE886FC", VA = "0xE886FC")]
	public EightController()
	{
	}
}
[Token(Token = "0x2000152")]
public enum EightAudioClips
{
	[Token(Token = "0x40006EA")]
	Intro,
	[Token(Token = "0x40006EB")]
	GrabTheApple,
	[Token(Token = "0x40006EC")]
	LearningAboutCurio,
	[Token(Token = "0x40006ED")]
	CurioWereYouRight,
	[Token(Token = "0x40006EE")]
	Movement,
	[Token(Token = "0x40006EF")]
	OverHere,
	[Token(Token = "0x40006F0")]
	ExplainTomeOfKnowledge,
	[Token(Token = "0x40006F1")]
	SpawnDeckFromTome,
	[Token(Token = "0x40006F2")]
	ExplainingTheDeck,
	[Token(Token = "0x40006F3")]
	ThrowHarder,
	[Token(Token = "0x40006F4")]
	ReleaseTheGripButton,
	[Token(Token = "0x40006F5")]
	KeepTrying,
	[Token(Token = "0x40006F6")]
	MemoryPalace,
	[Token(Token = "0x40006F7")]
	StudyADeck,
	[Token(Token = "0x40006F8")]
	FirstPropOfDeck,
	[Token(Token = "0x40006F9")]
	Humm,
	[Token(Token = "0x40006FA")]
	KeepLooking,
	[Token(Token = "0x40006FB")]
	GoodMemory,
	[Token(Token = "0x40006FC")]
	RememberHoldItOverYourHead,
	[Token(Token = "0x40006FD")]
	FollowMe,
	[Token(Token = "0x40006FE")]
	OverHereJoinMe,
	[Token(Token = "0x40006FF")]
	PickUpTheFactBlaster,
	[Token(Token = "0x4000700")]
	ShootCorrectAnswers,
	[Token(Token = "0x4000701")]
	DroppedFactBlaster,
	[Token(Token = "0x4000702")]
	Perfect,
	[Token(Token = "0x4000703")]
	ThatPrettyGood,
	[Token(Token = "0x4000704")]
	NotTooBad,
	[Token(Token = "0x4000705")]
	WeHaveWorkToDo,
	[Token(Token = "0x4000706")]
	TestYourselfOnYourOwnDecks,
	[Token(Token = "0x4000707")]
	YouveAboutGotTheBasics,
	[Token(Token = "0x4000708")]
	YouAlreadyKnowWhatAKeyIs,
	[Token(Token = "0x4000709")]
	WelcomeToTheStore,
	[Token(Token = "0x400070A")]
	OtherKeysWillBeHarder,
	[Token(Token = "0x400070B")]
	MetaHat,
	[Token(Token = "0x400070C")]
	PremierContent,
	[Token(Token = "0x400070D")]
	SearchForLirbarium,
	[Token(Token = "0x400070E")]
	GoFindADeck,
	[Token(Token = "0x400070F")]
	ExcellentWork,
	[Token(Token = "0x4000710")]
	FlipTheNotecard,
	[Token(Token = "0x4000711")]
	KnewYoudGetIt,
	[Token(Token = "0x4000712")]
	KeepBlasting,
	[Token(Token = "0x4000713")]
	KeepUsingThumbsticks,
	[Token(Token = "0x4000714")]
	LetsGiveThatAnotherGo,
	[Token(Token = "0x4000715")]
	MaybeNextTime,
	[Token(Token = "0x4000716")]
	RetryPickUpApple,
	[Token(Token = "0x4000717")]
	Splendid,
	[Token(Token = "0x4000718")]
	Wonderful,
	[Token(Token = "0x4000719")]
	YouCanGiveTheDeckAGoodThrow
}
[Token(Token = "0x2000153")]
public enum EightAnimations
{
	[Token(Token = "0x400071B")]
	None = -1,
	[Token(Token = "0x400071C")]
	Idle = 0,
	[Token(Token = "0x400071D")]
	Walk = 1,
	[Token(Token = "0x400071E")]
	Talking = 4,
	[Token(Token = "0x400071F")]
	Sad = 5,
	[Token(Token = "0x4000720")]
	Happy = 6,
	[Token(Token = "0x4000721")]
	Thinking = 7,
	[Token(Token = "0x4000722")]
	PointHigh = 9,
	[Token(Token = "0x4000723")]
	PointLow = 10,
	[Token(Token = "0x4000724")]
	Gasp = 11,
	[Token(Token = "0x4000725")]
	StandingReading = 12,
	[Token(Token = "0x4000726")]
	Dusting = 13,
	[Token(Token = "0x4000727")]
	StopTalking = 14
}
[Token(Token = "0x2000154")]
public class EightMovement
{
	[Token(Token = "0x4000728")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Vector3 destination;

	[Token(Token = "0x4000729")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool usePathGraph;

	[Token(Token = "0x400072A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	public bool isRunning;

	[Token(Token = "0x400072B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform lookAtTransform;

	[Token(Token = "0x400072C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool applyHeightOffset;

	[Token(Token = "0x60006B5")]
	[Address(RVA = "0xE8A1AC", Offset = "0xE8A1AC", VA = "0xE8A1AC")]
	public EightMovement(Vector3 destination, bool usePathGraph, bool isRunning, Transform lookAtTransform, bool applyHeightOffset)
	{
	}
}
[Token(Token = "0x2000155")]
public enum EightExpressionType
{
	[Token(Token = "0x400072E")]
	None = -1,
	[Token(Token = "0x400072F")]
	HelloImEight,
	[Token(Token = "0x4000730")]
	NowWeKnowEachOther,
	[Token(Token = "0x4000731")]
	OhRightItsACurio,
	[Token(Token = "0x4000732")]
	WereYouRight,
	[Token(Token = "0x4000733")]
	MovementIsALittleWeird,
	[Token(Token = "0x4000734")]
	OverHere,
	[Token(Token = "0x4000735")]
	LookAtPalm,
	[Token(Token = "0x4000736")]
	ThrowDeckIntoSky,
	[Token(Token = "0x4000737")]
	LibraryIsMemoryPalace,
	[Token(Token = "0x4000738")]
	GoStudyDeck,
	[Token(Token = "0x4000739")]
	HummingOne,
	[Token(Token = "0x400073A")]
	FirstPropOfDeck,
	[Token(Token = "0x400073B")]
	KeepLooking,
	[Token(Token = "0x400073C")]
	GoodMemory,
	[Token(Token = "0x400073D")]
	FollowUpOnMemorizing,
	[Token(Token = "0x400073E")]
	WhenYouGetThemFindMe,
	[Token(Token = "0x400073F")]
	OverHereJoinMe,
	[Token(Token = "0x4000740")]
	PickUpTheFactBlaster,
	[Token(Token = "0x4000741")]
	ShootCorrectAnswers,
	[Token(Token = "0x4000742")]
	DontRunFromChallenge,
	[Token(Token = "0x4000743")]
	Perfect,
	[Token(Token = "0x4000744")]
	ThatPrettyGood,
	[Token(Token = "0x4000745")]
	NotTooBad,
	[Token(Token = "0x4000746")]
	WeHaveWorkToDo,
	[Token(Token = "0x4000747")]
	TestYourselfOnYourOwnDecks,
	[Token(Token = "0x4000748")]
	YouveAboutGotTheBasics,
	[Token(Token = "0x4000749")]
	FollowTheFootprints,
	[Token(Token = "0x400074A")]
	YouAlreadyKnowWhatAKeyIs,
	[Token(Token = "0x400074B")]
	MoreKeysOutThere,
	[Token(Token = "0x400074C")]
	WelcomeToTheStore,
	[Token(Token = "0x400074D")]
	ExplainStore,
	[Token(Token = "0x400074E")]
	MakeYourOwnDecks,
	[Token(Token = "0x400074F")]
	GoFindADeck,
	[Token(Token = "0x4000750")]
	ExcellentWork,
	[Token(Token = "0x4000751")]
	FlipTheNotecard,
	[Token(Token = "0x4000752")]
	KeepBlasting,
	[Token(Token = "0x4000753")]
	KeepUsingThumbsticks,
	[Token(Token = "0x4000754")]
	LetsGiveThatAnotherGo,
	[Token(Token = "0x4000755")]
	MaybeNextTime,
	[Token(Token = "0x4000756")]
	RetryPickUpApple,
	[Token(Token = "0x4000757")]
	Splendid,
	[Token(Token = "0x4000758")]
	Wonderful,
	[Token(Token = "0x4000759")]
	YouCanGiveTheDeckAGoodThrow,
	[Token(Token = "0x400075A")]
	HelpFillPages,
	[Token(Token = "0x400075B")]
	MyPlanetWasDestroyed,
	[Token(Token = "0x400075C")]
	WasChosenToGo,
	[Token(Token = "0x400075D")]
	SailedAcrossTheVoid,
	[Token(Token = "0x400075E")]
	PlanetForgeInObservatory,
	[Token(Token = "0x400075F")]
	YouRestoredMyPlanet,
	[Token(Token = "0x4000760")]
	RemindPurpleOutline,
	[Token(Token = "0x4000761")]
	PutCurioOnHead,
	[Token(Token = "0x4000762")]
	WeAreInsideCurio,
	[Token(Token = "0x4000763")]
	PressBToPopOut,
	[Token(Token = "0x4000764")]
	TakeRevealerAllAround,
	[Token(Token = "0x4000765")]
	XylophoneInMusicRoom,
	[Token(Token = "0x4000766")]
	ReturnMusicFromShelves,
	[Token(Token = "0x4000767")]
	DontForgetToPlaySong,
	[Token(Token = "0x4000768")]
	RemindSunForBauble,
	[Token(Token = "0x4000769")]
	SomethingInTheGlobe,
	[Token(Token = "0x400076A")]
	MusicShelvesRemind,
	[Token(Token = "0x400076B")]
	NightLilyNeedsStars,
	[Token(Token = "0x400076C")]
	RemindGoToNightLily,
	[Token(Token = "0x400076D")]
	TryOutStarSong,
	[Token(Token = "0x400076E")]
	RemindPlayStarSong,
	[Token(Token = "0x400076F")]
	PutBaubleInWindow,
	[Token(Token = "0x4000770")]
	RemindPlantRoomPainting,
	[Token(Token = "0x4000771")]
	PictureInPlantRoom,
	[Token(Token = "0x4000772")]
	KnightNeedSword,
	[Token(Token = "0x4000773")]
	RemindKnightNeedSword,
	[Token(Token = "0x4000774")]
	ThereIsALantern,
	[Token(Token = "0x4000775")]
	RemindUseLantern,
	[Token(Token = "0x4000776")]
	FindOtherStarPiece,
	[Token(Token = "0x4000777")]
	RememberGatherStar,
	[Token(Token = "0x4000778")]
	StarFragCouldHelp,
	[Token(Token = "0x4000779")]
	HeardAboutMeteor,
	[Token(Token = "0x400077A")]
	RemindPlaySongGoToCove,
	[Token(Token = "0x400077B")]
	DiveHelmet,
	[Token(Token = "0x400077C")]
	ImBraverThanThought,
	[Token(Token = "0x400077D")]
	RemindStarInElevator,
	[Token(Token = "0x400077E")]
	RemindCreateCrystals,
	[Token(Token = "0x400077F")]
	BringEverythingToKiln,
	[Token(Token = "0x4000780")]
	RemindCrystalsInPlanetForge,
	[Token(Token = "0x4000781")]
	EnjoyPurchaseOne,
	[Token(Token = "0x4000782")]
	EnjoyPurchaseTwo,
	[Token(Token = "0x4000783")]
	OoTopShelf,
	[Token(Token = "0x4000784")]
	YouWillEnjoyThat,
	[Token(Token = "0x4000785")]
	AmIReallyFreeToDo,
	[Token(Token = "0x4000786")]
	ClearThroat,
	[Token(Token = "0x4000787")]
	CoughOne,
	[Token(Token = "0x4000788")]
	CoughTwo,
	[Token(Token = "0x4000789")]
	HorsesAndCoolers,
	[Token(Token = "0x400078A")]
	HowAmINotMyself,
	[Token(Token = "0x400078B")]
	SetMindInMotion,
	[Token(Token = "0x400078C")]
	MumblingOne,
	[Token(Token = "0x400078D")]
	MumblingTwo,
	[Token(Token = "0x400078E")]
	SlurpOne,
	[Token(Token = "0x400078F")]
	SlurpTwo,
	[Token(Token = "0x4000790")]
	SlurpThree,
	[Token(Token = "0x4000791")]
	TentaclePops,
	[Token(Token = "0x4000792")]
	TentacleSuction,
	[Token(Token = "0x4000793")]
	HereIsAPresent,
	[Token(Token = "0x4000794")]
	DragonEyes,
	[Token(Token = "0x4000795")]
	RemindDragonEyes,
	[Token(Token = "0x4000796")]
	RemindNightLilySeed,
	[Token(Token = "0x4000797")]
	RemindMeteor,
	[Token(Token = "0x4000798")]
	DiveHelmetReminder,
	[Token(Token = "0x4000799")]
	YouCanActivatePlanetForge,
	[Token(Token = "0x400079A")]
	ReleaseGripButton
}
[Token(Token = "0x2000156")]
public class EightDissolver : MonoBehaviour
{
	[Token(Token = "0x2000157")]
	[CompilerGenerated]
	private sealed class <co_FadeEight>d__14 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40007A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40007A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40007AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EightDissolver <>4__this;

		[Token(Token = "0x40007AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool fadeIn;

		[Token(Token = "0x40007AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private ParticleSystem.EmissionModule <emitter>5__2;

		[Token(Token = "0x170000CE")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60006BC")]
			[Address(RVA = "0xE8A728", Offset = "0xE8A728", VA = "0xE8A728", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000CF")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60006BE")]
			[Address(RVA = "0xE8A770", Offset = "0xE8A770", VA = "0xE8A770", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60006B9")]
		[Address(RVA = "0xE8A2AC", Offset = "0xE8A2AC", VA = "0xE8A2AC")]
		[DebuggerHidden]
		public <co_FadeEight>d__14(int <>1__state)
		{
		}

		[Token(Token = "0x60006BA")]
		[Address(RVA = "0xE8A2E8", Offset = "0xE8A2E8", VA = "0xE8A2E8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60006BB")]
		[Address(RVA = "0xE8A2EC", Offset = "0xE8A2EC", VA = "0xE8A2EC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60006BD")]
		[Address(RVA = "0xE8A730", Offset = "0xE8A730", VA = "0xE8A730", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400079B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Renderer eightRenderer;

	[Token(Token = "0x400079C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Renderer[] eyeRenderers;

	[Token(Token = "0x400079D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Renderer[] browRenderers;

	[Token(Token = "0x400079E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Material[] dissolveMaterials;

	[Token(Token = "0x400079F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Material[] solidMaterials;

	[Token(Token = "0x40007A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public ParticleSystem dissolveParticles;

	[Token(Token = "0x40007A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject floatingParticles;

	[Token(Token = "0x40007A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float dissolveTime;

	[Token(Token = "0x40007A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private float dissolveCountdown;

	[Token(Token = "0x40007A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float clothesVisibleCutoff;

	[Token(Token = "0x40007A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float clothesInvisibleCutoff;

	[Token(Token = "0x40007A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float skinVisibleCutoff;

	[Token(Token = "0x40007A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private float skinInvisibleCutoff;

	[Token(Token = "0x60006B6")]
	[Address(RVA = "0xE8A094", Offset = "0xE8A094", VA = "0xE8A094")]
	public void FadeEight(bool fadeIn)
	{
	}

	[Token(Token = "0x60006B7")]
	[Address(RVA = "0xE8A224", Offset = "0xE8A224", VA = "0xE8A224")]
	[IteratorStateMachine(typeof(<co_FadeEight>d__14))]
	private IEnumerator co_FadeEight(bool fadeIn)
	{
		return null;
	}

	[Token(Token = "0x60006B8")]
	[Address(RVA = "0xE8A2D4", Offset = "0xE8A2D4", VA = "0xE8A2D4")]
	public EightDissolver()
	{
	}
}
[Token(Token = "0x2000158")]
[CreateAssetMenu(fileName = "EightExpression", menuName = "ScriptableObjects/EightExpression", order = 1)]
public class EightExpression : ScriptableObject
{
	[Token(Token = "0x40007AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioClip vo;

	[Token(Token = "0x40007AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public FloatEightAnimationDictionary animationAtTime;

	[Token(Token = "0x40007AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public FloatStringDictionary subtitleAtTime;

	[Token(Token = "0x40007B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public FloatAllStringKeyDictionary subtitleKeyAtTime;

	[Token(Token = "0x40007B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private List<float> orderedSubtitleTimes;

	[Token(Token = "0x60006BF")]
	[Address(RVA = "0xE89094", Offset = "0xE89094", VA = "0xE89094")]
	public List<float> GetOrderedSubtitleTimes()
	{
		return null;
	}

	[Token(Token = "0x60006C0")]
	[Address(RVA = "0xE89184", Offset = "0xE89184", VA = "0xE89184")]
	public float GetSubtitleLengthFromTimeKey(float timeKey)
	{
		return default(float);
	}

	[Token(Token = "0x60006C1")]
	[Address(RVA = "0xE8A778", Offset = "0xE8A778", VA = "0xE8A778")]
	public EightExpression()
	{
	}
}
[Serializable]
[Token(Token = "0x2000159")]
public class FloatEightAnimationDictionary : SerializableDictionary<float, EightAnimations>
{
	[Token(Token = "0x60006C2")]
	[Address(RVA = "0xE8A800", Offset = "0xE8A800", VA = "0xE8A800")]
	public FloatEightAnimationDictionary()
	{
	}
}
[Serializable]
[Token(Token = "0x200015A")]
public class FloatStringDictionary : SerializableDictionary<float, string>
{
	[Token(Token = "0x60006C3")]
	[Address(RVA = "0xE8A848", Offset = "0xE8A848", VA = "0xE8A848")]
	public FloatStringDictionary()
	{
	}
}
[Serializable]
[Token(Token = "0x200015B")]
public class FloatAllStringKeyDictionary : SerializableDictionary<float, AllStrings>
{
	[Token(Token = "0x60006C4")]
	[Address(RVA = "0xE8A890", Offset = "0xE8A890", VA = "0xE8A890")]
	public FloatAllStringKeyDictionary()
	{
	}
}
[Token(Token = "0x200015C")]
[CreateAssetMenu(fileName = "EightExpressionRepo", menuName = "ScriptableObjects/EightExpressionRepository", order = 1)]
public class EightExpressionRepository : ScriptableObject
{
	[Token(Token = "0x40007B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ExpressionTypeToExpression expressions;

	[Token(Token = "0x60006C5")]
	[Address(RVA = "0xE8A8D8", Offset = "0xE8A8D8", VA = "0xE8A8D8")]
	public EightExpressionRepository()
	{
	}
}
[Serializable]
[Token(Token = "0x200015D")]
public class ExpressionTypeToExpression : SerializableDictionary<EightExpressionType, EightExpression>
{
	[Token(Token = "0x60006C6")]
	[Address(RVA = "0xE8A8E0", Offset = "0xE8A8E0", VA = "0xE8A8E0")]
	public ExpressionTypeToExpression()
	{
	}
}
[Token(Token = "0x200015E")]
public class EightPointerController : MonoBehaviour
{
	[Token(Token = "0x40007B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Animator animator;

	[Token(Token = "0x40007B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform target;

	[Token(Token = "0x40007B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform shoulderBone;

	[Token(Token = "0x60006C7")]
	[Address(RVA = "0xE8A928", Offset = "0xE8A928", VA = "0xE8A928")]
	private void Start()
	{
	}

	[Token(Token = "0x60006C8")]
	[Address(RVA = "0xE8A92C", Offset = "0xE8A92C", VA = "0xE8A92C")]
	public EightPointerController()
	{
	}
}
[Token(Token = "0x200015F")]
public class EightStorybook : MonoBehaviour
{
	[Token(Token = "0x2000160")]
	[CompilerGenerated]
	private sealed class <co_AutoTurnToTargetPage>d__24 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40007C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40007CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40007CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int newAvailablePage;

		[Token(Token = "0x40007CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public EightStorybook <>4__this;

		[Token(Token = "0x170000D0")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60006D9")]
			[Address(RVA = "0xE8B4D0", Offset = "0xE8B4D0", VA = "0xE8B4D0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000D1")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60006DB")]
			[Address(RVA = "0xE8B518", Offset = "0xE8B518", VA = "0xE8B518", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60006D6")]
		[Address(RVA = "0xE8AD28", Offset = "0xE8AD28", VA = "0xE8AD28")]
		[DebuggerHidden]
		public <co_AutoTurnToTargetPage>d__24(int <>1__state)
		{
		}

		[Token(Token = "0x60006D7")]
		[Address(RVA = "0xE8B3B0", Offset = "0xE8B3B0", VA = "0xE8B3B0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60006D8")]
		[Address(RVA = "0xE8B3B4", Offset = "0xE8B3B4", VA = "0xE8B3B4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60006DA")]
		[Address(RVA = "0xE8B4D8", Offset = "0xE8B4D8", VA = "0xE8B4D8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40007B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Texture[] pages;

	[Token(Token = "0x40007B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Texture[] flipPages;

	[Token(Token = "0x40007B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Texture blankPage;

	[Token(Token = "0x40007B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Renderer leftPage;

	[Token(Token = "0x40007BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Renderer rightPage;

	[Token(Token = "0x40007BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Renderer flipFront;

	[Token(Token = "0x40007BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Renderer flipBack;

	[Token(Token = "0x40007BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public PageFlipper[] pageFlipper;

	[Token(Token = "0x40007BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public int pagesAvailable;

	[Token(Token = "0x40007BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public int currentPage;

	[Token(Token = "0x40007C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public ParticleSystem pop;

	[Token(Token = "0x40007C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public PublishTriggerEnterExit leftTrigger;

	[Token(Token = "0x40007C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public PublishTriggerEnterExit rightTrigger;

	[Token(Token = "0x40007C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private bool playerFlippable;

	[Token(Token = "0x40007C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private float animationLength;

	[Token(Token = "0x40007C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Color origFlipColor;

	[Token(Token = "0x40007C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Color invisFlipColor;

	[Token(Token = "0x40007C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private ParticleSystem.EmissionModule emitter;

	[Token(Token = "0x40007C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private bool isFlipping;

	[Token(Token = "0x60006C9")]
	[Address(RVA = "0xE8A934", Offset = "0xE8A934", VA = "0xE8A934")]
	private void Start()
	{
	}

	[Token(Token = "0x60006CA")]
	[Address(RVA = "0xE8AB54", Offset = "0xE8AB54", VA = "0xE8AB54")]
	public void SetPagesAvailable(int pagesAvailable)
	{
	}

	[Token(Token = "0x60006CB")]
	[Address(RVA = "0xE8AB68", Offset = "0xE8AB68", VA = "0xE8AB68")]
	public void SetPagesAvailable(int pagesAvailable, int currentPage)
	{
	}

	[Token(Token = "0x60006CC")]
	[Address(RVA = "0xE8AC78", Offset = "0xE8AC78", VA = "0xE8AC78")]
	public void TogglePlayerFlippable(bool enable)
	{
	}

	[Token(Token = "0x60006CD")]
	[Address(RVA = "0xE8AC84", Offset = "0xE8AC84", VA = "0xE8AC84")]
	public void AutoTurnToTargetPage(int newAvailablePage)
	{
	}

	[Token(Token = "0x60006CE")]
	[Address(RVA = "0xE8ACA4", Offset = "0xE8ACA4", VA = "0xE8ACA4")]
	[IteratorStateMachine(typeof(<co_AutoTurnToTargetPage>d__24))]
	private IEnumerator co_AutoTurnToTargetPage(int newAvailablePage)
	{
		return null;
	}

	[Token(Token = "0x60006CF")]
	[Address(RVA = "0xE8AD50", Offset = "0xE8AD50", VA = "0xE8AD50")]
	private int TranslateCurrentPageToAvailablePage()
	{
		return default(int);
	}

	[Token(Token = "0x60006D0")]
	[Address(RVA = "0xE8AD70", Offset = "0xE8AD70", VA = "0xE8AD70")]
	private void FlipForward()
	{
	}

	[Token(Token = "0x60006D1")]
	[Address(RVA = "0xE8B070", Offset = "0xE8B070", VA = "0xE8B070")]
	private void FlipBackward()
	{
	}

	[Token(Token = "0x60006D2")]
	[Address(RVA = "0xE8B370", Offset = "0xE8B370", VA = "0xE8B370")]
	public EightStorybook()
	{
	}
}
[Token(Token = "0x2000162")]
public class EightAudioAnimationCombined : MonoBehaviour
{
	[Token(Token = "0x2000163")]
	public enum EightAnimation
	{
		[Token(Token = "0x40007D5")]
		Idle,
		[Token(Token = "0x40007D6")]
		Walk,
		[Token(Token = "0x40007D7")]
		PointHigh,
		[Token(Token = "0x40007D8")]
		PointLow
	}

	[Token(Token = "0x2000164")]
	[CompilerGenerated]
	private sealed class <co_AudioClips>d__8 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40007D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40007DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40007DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EightAudioAnimationCombined <>4__this;

		[Token(Token = "0x40007DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <i>5__2;

		[Token(Token = "0x170000D2")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60006E7")]
			[Address(RVA = "0xE8B9BC", Offset = "0xE8B9BC", VA = "0xE8B9BC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000D3")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60006E9")]
			[Address(RVA = "0xE8BA04", Offset = "0xE8BA04", VA = "0xE8BA04", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60006E4")]
		[Address(RVA = "0xE8B7CC", Offset = "0xE8B7CC", VA = "0xE8B7CC")]
		[DebuggerHidden]
		public <co_AudioClips>d__8(int <>1__state)
		{
		}

		[Token(Token = "0x60006E5")]
		[Address(RVA = "0xE8B8A8", Offset = "0xE8B8A8", VA = "0xE8B8A8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60006E6")]
		[Address(RVA = "0xE8B8AC", Offset = "0xE8B8AC", VA = "0xE8B8AC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60006E8")]
		[Address(RVA = "0xE8B9C4", Offset = "0xE8B9C4", VA = "0xE8B9C4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000165")]
	[CompilerGenerated]
	private sealed class <co_Animation>d__9 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40007DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40007DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40007DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EightAudioAnimationCombined <>4__this;

		[Token(Token = "0x40007E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <i>5__2;

		[Token(Token = "0x170000D4")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60006ED")]
			[Address(RVA = "0xE8BB78", Offset = "0xE8BB78", VA = "0xE8BB78", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000D5")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60006EF")]
			[Address(RVA = "0xE8BBC0", Offset = "0xE8BBC0", VA = "0xE8BBC0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60006EA")]
		[Address(RVA = "0xE8B7F4", Offset = "0xE8B7F4", VA = "0xE8B7F4")]
		[DebuggerHidden]
		public <co_Animation>d__9(int <>1__state)
		{
		}

		[Token(Token = "0x60006EB")]
		[Address(RVA = "0xE8BA0C", Offset = "0xE8BA0C", VA = "0xE8BA0C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60006EC")]
		[Address(RVA = "0xE8BA10", Offset = "0xE8BA10", VA = "0xE8BA10", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60006EE")]
		[Address(RVA = "0xE8BB80", Offset = "0xE8BB80", VA = "0xE8BB80", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40007CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Animator eightAnimator;

	[Token(Token = "0x40007D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioSource eightVO;

	[Token(Token = "0x40007D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioClip[] clips;

	[Token(Token = "0x40007D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public EightAnimation[] animations;

	[Token(Token = "0x40007D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public List<float> animationDelays;

	[Token(Token = "0x60006DE")]
	[Address(RVA = "0xE8B5A4", Offset = "0xE8B5A4", VA = "0xE8B5A4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60006DF")]
	[Address(RVA = "0xE8B658", Offset = "0xE8B658", VA = "0xE8B658")]
	public void RunPackage()
	{
	}

	[Token(Token = "0x60006E0")]
	[Address(RVA = "0xE8B758", Offset = "0xE8B758", VA = "0xE8B758")]
	[IteratorStateMachine(typeof(<co_AudioClips>d__8))]
	private IEnumerator co_AudioClips()
	{
		return null;
	}

	[Token(Token = "0x60006E1")]
	[Address(RVA = "0xE8B6E4", Offset = "0xE8B6E4", VA = "0xE8B6E4")]
	[IteratorStateMachine(typeof(<co_Animation>d__9))]
	private IEnumerator co_Animation()
	{
		return null;
	}

	[Token(Token = "0x60006E2")]
	[Address(RVA = "0xE8B81C", Offset = "0xE8B81C", VA = "0xE8B81C")]
	private void Update()
	{
	}

	[Token(Token = "0x60006E3")]
	[Address(RVA = "0xE8B8A0", Offset = "0xE8B8A0", VA = "0xE8B8A0")]
	public EightAudioAnimationCombined()
	{
	}
}
[Token(Token = "0x2000166")]
public class Elevator : MonoBehaviour
{
	[Token(Token = "0x2000167")]
	public class ElevatorAction
	{
		[Token(Token = "0x60006F8")]
		[Address(RVA = "0xE8F5CC", Offset = "0xE8F5CC", VA = "0xE8F5CC")]
		public ElevatorAction()
		{
		}
	}

	[Token(Token = "0x2000168")]
	public class ElevatorSceneTransition : ElevatorAction
	{
		[Token(Token = "0x40007F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Room unloadScene;

		[Token(Token = "0x40007F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Room loadScene;

		[Token(Token = "0x60006F9")]
		[Address(RVA = "0xE8F5D4", Offset = "0xE8F5D4", VA = "0xE8F5D4")]
		public ElevatorSceneTransition(Room unloadScene, Room loadScene)
		{
		}
	}

	[Token(Token = "0x2000169")]
	public class ElevatorRotation : ElevatorAction
	{
		[Token(Token = "0x40007F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float rotationEulers;

		[Token(Token = "0x60006FA")]
		[Address(RVA = "0xE8F600", Offset = "0xE8F600", VA = "0xE8F600")]
		public ElevatorRotation(float rotationEulers)
		{
		}
	}

	[Token(Token = "0x200016A")]
	public class ElevatorMove : ElevatorAction
	{
		[Token(Token = "0x40007F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float height;

		[Token(Token = "0x60006FB")]
		[Address(RVA = "0xE8F628", Offset = "0xE8F628", VA = "0xE8F628")]
		public ElevatorMove(float height)
		{
		}
	}

	[Token(Token = "0x40007E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ElevatorConfig stopConfigurations;

	[Token(Token = "0x40007E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ElevatorButton[] buttons;

	[Token(Token = "0x40007E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioSource audioSource;

	[Token(Token = "0x40007E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject secretDoor;

	[Token(Token = "0x40007E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public List<GameObject> elevatorShaftColliders;

	[Token(Token = "0x40007E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject rope;

	[Token(Token = "0x40007E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public int currentFloor;

	[Token(Token = "0x40007E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float currentHeight;

	[Token(Token = "0x40007E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private List<ElevatorFloorConfiguration> moveActions;

	[Token(Token = "0x40007EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private List<ElevatorAction> actions;

	[Token(Token = "0x40007EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Transform player;

	[Token(Token = "0x40007EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Transform playerParent;

	[Token(Token = "0x40007ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private bool respondToButtonPresses;

	[Token(Token = "0x40007EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Transform thisTransform;

	[Token(Token = "0x40007EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private ElevatorButtonType lastButtonPressedType;

	[Token(Token = "0x60006F0")]
	[Address(RVA = "0xE8BBC8", Offset = "0xE8BBC8", VA = "0xE8BBC8")]
	private void Start()
	{
	}

	[Token(Token = "0x60006F1")]
	[Address(RVA = "0xE8BDCC", Offset = "0xE8BDCC", VA = "0xE8BDCC")]
	public void QueueMoveNew(int targetFloor, ElevatorButtonType buttonType)
	{
	}

	[Token(Token = "0x60006F2")]
	[Address(RVA = "0xE8D010", Offset = "0xE8D010", VA = "0xE8D010")]
	private void ExecuteNextElevatorAction()
	{
	}

	[Token(Token = "0x60006F3")]
	[Address(RVA = "0xE8D560", Offset = "0xE8D560", VA = "0xE8D560")]
	private void ToggleFloorTeleportAreas(bool activate)
	{
	}

	[Token(Token = "0x60006F4")]
	[Address(RVA = "0xE8E19C", Offset = "0xE8E19C", VA = "0xE8E19C")]
	private void OnSceneTransitionComplete()
	{
	}

	[Token(Token = "0x60006F5")]
	[Address(RVA = "0xE8DBE4", Offset = "0xE8DBE4", VA = "0xE8DBE4")]
	private void TranslateToHeight(float height)
	{
	}

	[Token(Token = "0x60006F6")]
	[Address(RVA = "0xE8D6B8", Offset = "0xE8D6B8", VA = "0xE8D6B8")]
	private void Rotate180()
	{
	}

	[Token(Token = "0x60006F7")]
	[Address(RVA = "0xE8E4EC", Offset = "0xE8E4EC", VA = "0xE8E4EC")]
	public Elevator()
	{
	}
}
[Token(Token = "0x200016B")]
public class ElevatorButton : MonoBehaviour
{
	[Token(Token = "0x40007F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ElevatorButtonType buttonType;

	[Token(Token = "0x40007F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioSource elevatorButtonNoise;

	[Token(Token = "0x40007F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Action<int, ElevatorButtonType> OnButtonPressed;

	[Token(Token = "0x40007F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int floor;

	[Token(Token = "0x60006FC")]
	[Address(RVA = "0xE8F650", Offset = "0xE8F650", VA = "0xE8F650")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60006FD")]
	[Address(RVA = "0xE8F760", Offset = "0xE8F760", VA = "0xE8F760")]
	public ElevatorButton()
	{
	}
}
[Token(Token = "0x200016C")]
public enum ElevatorButtonType
{
	[Token(Token = "0x40007F9")]
	CallButton,
	[Token(Token = "0x40007FA")]
	MoveButton
}
[Token(Token = "0x200016D")]
public class ElevatorConfig : ScriptableObject
{
	[Token(Token = "0x40007FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ElevatorFloorConfiguration[] configurations;

	[Token(Token = "0x60006FE")]
	[Address(RVA = "0xE8F768", Offset = "0xE8F768", VA = "0xE8F768")]
	public ElevatorFloorConfiguration GetConfigForFloor(int floor)
	{
		return null;
	}

	[Token(Token = "0x60006FF")]
	[Address(RVA = "0xE8F848", Offset = "0xE8F848", VA = "0xE8F848")]
	public List<ElevatorFloorConfiguration> GetMoveActions(int originFloor, int destinationFloor)
	{
		return null;
	}

	[Token(Token = "0x6000700")]
	[Address(RVA = "0xE8F9EC", Offset = "0xE8F9EC", VA = "0xE8F9EC")]
	public ElevatorConfig()
	{
	}
}
[Serializable]
[Token(Token = "0x200016F")]
public class ElevatorFloorConfiguration
{
	[Token(Token = "0x40007FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int floor;

	[Token(Token = "0x40007FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float height;

	[Token(Token = "0x40007FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool rotateOnLowerEnd;

	[Token(Token = "0x4000800")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool rotateOnUpperEnd;

	[Token(Token = "0x4000801")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	public bool rotateBeforeSceneOnAscent;

	[Token(Token = "0x4000802")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
	public bool rotateBeforeSceneOnDescent;

	[Token(Token = "0x4000803")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Room unloadSceneOnLowerEnd;

	[Token(Token = "0x4000804")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Room unloadSceneOnUpperEnd;

	[Token(Token = "0x4000805")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Room loadSceneOnLowerEnd;

	[Token(Token = "0x4000806")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Room loadSceneOnUpperEnd;

	[Token(Token = "0x6000703")]
	[Address(RVA = "0xE8FA18", Offset = "0xE8FA18", VA = "0xE8FA18")]
	public ElevatorFloorConfiguration()
	{
	}
}
[Token(Token = "0x2000170")]
public class FactBlasterUnlocker : MonoBehaviour
{
	[Token(Token = "0x4000807")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject highlightEffect;

	[Token(Token = "0x4000808")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject subtleEffect;

	[Token(Token = "0x6000704")]
	[Address(RVA = "0xE8FA20", Offset = "0xE8FA20", VA = "0xE8FA20")]
	private void Start()
	{
	}

	[Token(Token = "0x6000705")]
	[Address(RVA = "0xE8FBE8", Offset = "0xE8FBE8", VA = "0xE8FBE8")]
	public FactBlasterUnlocker()
	{
	}
}
[Token(Token = "0x2000171")]
public class FlashcardController : Singleton<FlashcardController>
{
	[Token(Token = "0x2000172")]
	[CompilerGenerated]
	private sealed class <UpdateUI>d__23 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000815")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000816")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x170000D6")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600071A")]
			[Address(RVA = "0xE90D7C", Offset = "0xE90D7C", VA = "0xE90D7C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000D7")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600071C")]
			[Address(RVA = "0xE90DC4", Offset = "0xE90DC4", VA = "0xE90DC4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000717")]
		[Address(RVA = "0xE9097C", Offset = "0xE9097C", VA = "0xE9097C")]
		[DebuggerHidden]
		public <UpdateUI>d__23(int <>1__state)
		{
		}

		[Token(Token = "0x6000718")]
		[Address(RVA = "0xE90CA4", Offset = "0xE90CA4", VA = "0xE90CA4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000719")]
		[Address(RVA = "0xE90CA8", Offset = "0xE90CA8", VA = "0xE90CA8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600071B")]
		[Address(RVA = "0xE90D84", Offset = "0xE90D84", VA = "0xE90D84", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000809")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Action OnCardScoreWasUpdated;

	[Token(Token = "0x400080A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public CardRotation cardRotation;

	[Token(Token = "0x400080B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform hmd;

	[Token(Token = "0x400080C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Renderer brainBar;

	[Token(Token = "0x400080D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public DropCard dropCard1;

	[Token(Token = "0x400080E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public DropCard dropCard2;

	[Token(Token = "0x400080F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform dropCard1Anchor;

	[Token(Token = "0x4000810")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Transform dropCard2Anchor;

	[Token(Token = "0x4000811")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Transform thisTransform;

	[Token(Token = "0x4000812")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Transform mpTransform;

	[Token(Token = "0x4000813")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public ManagedProp managedProp;

	[Token(Token = "0x4000814")]
	private const int totalGuessRefCount = 4;

	[Token(Token = "0x6000708")]
	[Address(RVA = "0xE8FDDC", Offset = "0xE8FDDC", VA = "0xE8FDDC", Slot = "5")]
	protected override void DidAwake()
	{
	}

	[Token(Token = "0x6000709")]
	[Address(RVA = "0xE8FF48", Offset = "0xE8FF48", VA = "0xE8FF48")]
	private void Init()
	{
	}

	[Token(Token = "0x600070A")]
	[Address(RVA = "0xE90198", Offset = "0xE90198", VA = "0xE90198")]
	public void ShowDropCardsIfNecessary(bool isShowingFront)
	{
	}

	[Token(Token = "0x600070B")]
	[Address(RVA = "0xE90588", Offset = "0xE90588", VA = "0xE90588")]
	public void HideDropCards()
	{
	}

	[Token(Token = "0x600070C")]
	[Address(RVA = "0xE9062C", Offset = "0xE9062C", VA = "0xE9062C")]
	public void SetupFromPickedUpProp(ManagedProp thisManagedProp)
	{
	}

	[Token(Token = "0x600070D")]
	[Address(RVA = "0xE9067C", Offset = "0xE9067C", VA = "0xE9067C")]
	public void RotateCard()
	{
	}

	[Token(Token = "0x600070E")]
	[Address(RVA = "0xE90698", Offset = "0xE90698", VA = "0xE90698")]
	private void ReleaseFromProp(ManagedProp go)
	{
	}

	[Token(Token = "0x600070F")]
	[Address(RVA = "0xE90710", Offset = "0xE90710", VA = "0xE90710")]
	private void ReleaseFromProp()
	{
	}

	[Token(Token = "0x6000710")]
	[Address(RVA = "0xE90788", Offset = "0xE90788", VA = "0xE90788")]
	private void FinalizePropReleaseAndReset()
	{
	}

	[Token(Token = "0x6000711")]
	[Address(RVA = "0xE907BC", Offset = "0xE907BC", VA = "0xE907BC")]
	private void CalibrateScoreRootsToGuessRefCount()
	{
	}

	[Token(Token = "0x6000712")]
	[Address(RVA = "0xE90818", Offset = "0xE90818", VA = "0xE90818")]
	private void RecordCardGuessResult(bool guessedRight)
	{
	}

	[Token(Token = "0x6000713")]
	[Address(RVA = "0xE9091C", Offset = "0xE9091C", VA = "0xE9091C")]
	[IteratorStateMachine(typeof(<UpdateUI>d__23))]
	private IEnumerator UpdateUI()
	{
		return null;
	}

	[Token(Token = "0x6000714")]
	[Address(RVA = "0xE909A4", Offset = "0xE909A4", VA = "0xE909A4")]
	public void SetGuessedThisGrab(bool remembered)
	{
	}

	[Token(Token = "0x6000715")]
	[Address(RVA = "0xE909AC", Offset = "0xE909AC", VA = "0xE909AC")]
	public void Update()
	{
	}

	[Token(Token = "0x6000716")]
	[Address(RVA = "0xE90C5C", Offset = "0xE90C5C", VA = "0xE90C5C")]
	public FlashcardController()
	{
	}
}
[Token(Token = "0x2000173")]
public enum PropMemorizationType
{
	[Token(Token = "0x4000818")]
	Remembered,
	[Token(Token = "0x4000819")]
	NotRemembered,
	[Token(Token = "0x400081A")]
	Interrupted
}
[Token(Token = "0x2000174")]
public class FlashcardPreview : MonoBehaviour
{
	[Token(Token = "0x400081B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TextMeshPro frontText;

	[Token(Token = "0x400081C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextMeshPro backText;

	[Token(Token = "0x400081D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TextMeshPro iconText;

	[Token(Token = "0x400081E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform thisTransform;

	[Token(Token = "0x600071D")]
	[Address(RVA = "0xE90DCC", Offset = "0xE90DCC", VA = "0xE90DCC")]
	private void Start()
	{
	}

	[Token(Token = "0x600071E")]
	[Address(RVA = "0xE90DF0", Offset = "0xE90DF0", VA = "0xE90DF0")]
	public FlashcardPreview()
	{
	}
}
[Token(Token = "0x2000175")]
public class FloatingMovement : MonoBehaviour
{
	[Token(Token = "0x400081F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float bobSpeed;

	[Token(Token = "0x4000820")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float bobHeight;

	[Token(Token = "0x4000821")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float rotationRate;

	[Token(Token = "0x4000822")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float rotationLimit;

	[Token(Token = "0x4000823")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool rotationX;

	[Token(Token = "0x4000824")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool rotationY;

	[Token(Token = "0x4000825")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
	public bool rotationZ;

	[Token(Token = "0x4000826")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B")]
	public bool randomStart;

	[Token(Token = "0x4000827")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float currentYPos;

	[Token(Token = "0x4000828")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float currentXEuler;

	[Token(Token = "0x4000829")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float currentYEuler;

	[Token(Token = "0x400082A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float currentZEuler;

	[Token(Token = "0x400082B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float randomYieldTime;

	[Token(Token = "0x600071F")]
	[Address(RVA = "0xE90DF8", Offset = "0xE90DF8", VA = "0xE90DF8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000720")]
	[Address(RVA = "0xE90E90", Offset = "0xE90E90", VA = "0xE90E90")]
	public void ResetInitialPosition()
	{
	}

	[Token(Token = "0x6000721")]
	[Address(RVA = "0xE90EBC", Offset = "0xE90EBC", VA = "0xE90EBC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000722")]
	[Address(RVA = "0xE910A0", Offset = "0xE910A0", VA = "0xE910A0")]
	public FloatingMovement()
	{
	}
}
[Token(Token = "0x2000176")]
public class FollowTransform : MonoBehaviour
{
	[Token(Token = "0x400082C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform target;

	[Token(Token = "0x400082D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector3 positionOffset;

	[Token(Token = "0x400082E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float lerpFactor;

	[Token(Token = "0x400082F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform thisTransform;

	[Token(Token = "0x6000723")]
	[Address(RVA = "0xE910A8", Offset = "0xE910A8", VA = "0xE910A8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000724")]
	[Address(RVA = "0xE910CC", Offset = "0xE910CC", VA = "0xE910CC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000725")]
	[Address(RVA = "0xE9111C", Offset = "0xE9111C", VA = "0xE9111C")]
	public FollowTransform()
	{
	}
}
[Token(Token = "0x2000177")]
public class Footprint : MonoBehaviour
{
	[Token(Token = "0x2000178")]
	[CompilerGenerated]
	private sealed class <Start>d__2 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000832")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000833")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000834")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Footprint <>4__this;

		[Token(Token = "0x170000D8")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600072B")]
			[Address(RVA = "0xE9131C", Offset = "0xE9131C", VA = "0xE9131C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000D9")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600072D")]
			[Address(RVA = "0xE91364", Offset = "0xE91364", VA = "0xE91364", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000728")]
		[Address(RVA = "0xE91198", Offset = "0xE91198", VA = "0xE91198")]
		[DebuggerHidden]
		public <Start>d__2(int <>1__state)
		{
		}

		[Token(Token = "0x6000729")]
		[Address(RVA = "0xE911D0", Offset = "0xE911D0", VA = "0xE911D0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600072A")]
		[Address(RVA = "0xE911D4", Offset = "0xE911D4", VA = "0xE911D4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600072C")]
		[Address(RVA = "0xE91324", Offset = "0xE91324", VA = "0xE91324", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000830")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float lifetime;

	[Token(Token = "0x4000831")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Renderer thisRenderer;

	[Token(Token = "0x6000726")]
	[Address(RVA = "0xE91124", Offset = "0xE91124", VA = "0xE91124")]
	[IteratorStateMachine(typeof(<Start>d__2))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x6000727")]
	[Address(RVA = "0xE911C0", Offset = "0xE911C0", VA = "0xE911C0")]
	public Footprint()
	{
	}
}
[Token(Token = "0x2000179")]
public class Footprinter : MonoBehaviour
{
	[Token(Token = "0x200017A")]
	[CompilerGenerated]
	private sealed class <DrawFootprintsAlongPath>d__15 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000842")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000843")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000844")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<Vector3> path;

		[Token(Token = "0x4000845")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Footprinter <>4__this;

		[Token(Token = "0x4000846")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<Vector3> <raisedPath>5__2;

		[Token(Token = "0x4000847")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool <isLeft>5__3;

		[Token(Token = "0x170000DA")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000738")]
			[Address(RVA = "0xE920A8", Offset = "0xE920A8", VA = "0xE920A8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000DB")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600073A")]
			[Address(RVA = "0xE920F0", Offset = "0xE920F0", VA = "0xE920F0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000735")]
		[Address(RVA = "0xE916E4", Offset = "0xE916E4", VA = "0xE916E4")]
		[DebuggerHidden]
		public <DrawFootprintsAlongPath>d__15(int <>1__state)
		{
		}

		[Token(Token = "0x6000736")]
		[Address(RVA = "0xE918E8", Offset = "0xE918E8", VA = "0xE918E8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000737")]
		[Address(RVA = "0xE918EC", Offset = "0xE918EC", VA = "0xE918EC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000739")]
		[Address(RVA = "0xE920B0", Offset = "0xE920B0", VA = "0xE920B0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000835")]
	private const float HUMAN_WALKING_SPEED_MPS = 1.44f;

	[Token(Token = "0x4000836")]
	private const float HUMAN_STRIDE_LENGTH_M = 0.66f;

	[Token(Token = "0x4000837")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform mainCamera;

	[Token(Token = "0x4000838")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform leftFootprint;

	[Token(Token = "0x4000839")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform leftOrigin;

	[Token(Token = "0x400083A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform rightOrigin;

	[Token(Token = "0x400083B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float walkSpeedMultiplier;

	[Token(Token = "0x400083C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float strideMultiplier;

	[Token(Token = "0x400083D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float playerDistToPropThreshold;

	[Token(Token = "0x400083E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float playerDistToFootprinterThreshold;

	[Token(Token = "0x400083F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public AudioSource audioSource;

	[Token(Token = "0x4000840")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Transform thisTransform;

	[Token(Token = "0x4000841")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Tween pathTween;

	[Token(Token = "0x600072E")]
	[Address(RVA = "0xE9136C", Offset = "0xE9136C", VA = "0xE9136C")]
	private void Start()
	{
	}

	[Token(Token = "0x600072F")]
	[Address(RVA = "0xE91608", Offset = "0xE91608", VA = "0xE91608")]
	private void StopFootprints()
	{
	}

	[Token(Token = "0x6000730")]
	[Address(RVA = "0xE91654", Offset = "0xE91654", VA = "0xE91654")]
	[IteratorStateMachine(typeof(<DrawFootprintsAlongPath>d__15))]
	private IEnumerator DrawFootprintsAlongPath(List<Vector3> path)
	{
		return null;
	}

	[Token(Token = "0x6000731")]
	[Address(RVA = "0xE9170C", Offset = "0xE9170C", VA = "0xE9170C")]
	public Footprinter()
	{
	}
}
[Token(Token = "0x200017B")]
public class FurnitureSettings : MonoBehaviour
{
	[Token(Token = "0x4000848")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] lamps;

	[Token(Token = "0x4000849")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject[] adirondacks;

	[Token(Token = "0x400084A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject[] loungeChairs;

	[Token(Token = "0x400084B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject[] barstools;

	[Token(Token = "0x400084C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject[] stoolsWithBack;

	[Token(Token = "0x400084D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject[] sofas;

	[Token(Token = "0x400084E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject[] funkySofas;

	[Token(Token = "0x600073B")]
	[Address(RVA = "0xE920F8", Offset = "0xE920F8", VA = "0xE920F8")]
	public FurnitureSettings()
	{
	}
}
[Token(Token = "0x200017C")]
public class FurnitureSpawner : MonoBehaviour
{
	[Token(Token = "0x400084F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Func<FurnitureLayout, Transform[]> GetPropPositionsByFurnitureLayout;

	[Token(Token = "0x4000850")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] furnitureLayouts;

	[Token(Token = "0x4000851")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Material[] lampMaterials;

	[Token(Token = "0x4000852")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Material[] adirondackMaterials;

	[Token(Token = "0x4000853")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Material[] loungeChairMaterials;

	[Token(Token = "0x4000854")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Material[] barstoolMaterials;

	[Token(Token = "0x4000855")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Material[] stoolsWithBackMaterials;

	[Token(Token = "0x4000856")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Material[] sofaMaterials;

	[Token(Token = "0x4000857")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Material[] funkySofaMaterials;

	[Token(Token = "0x4000858")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private GameObject currentFurnitureLayout;

	[Token(Token = "0x4000859")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private GameObject currentLargeProp;

	[Token(Token = "0x600073C")]
	[Address(RVA = "0xE92100", Offset = "0xE92100", VA = "0xE92100")]
	public void Start()
	{
	}

	[Token(Token = "0x600073D")]
	[Address(RVA = "0xE9234C", Offset = "0xE9234C", VA = "0xE9234C")]
	private Transform[] ReturnPropPositionsByFurnitureLayout(FurnitureLayout layout)
	{
		return null;
	}

	[Token(Token = "0x600073E")]
	[Address(RVA = "0xE923C0", Offset = "0xE923C0", VA = "0xE923C0")]
	private void SpawnFurnitureLayoutWithColor(FurnitureLayout layout, FurnitureColor color)
	{
	}

	[Token(Token = "0x600073F")]
	[Address(RVA = "0xE929D8", Offset = "0xE929D8", VA = "0xE929D8")]
	public FurnitureSpawner()
	{
	}
}
[Token(Token = "0x200017D")]
public enum FurnitureLayout
{
	[Token(Token = "0x400085B")]
	ChairAndStool,
	[Token(Token = "0x400085C")]
	FaceOff,
	[Token(Token = "0x400085D")]
	FunkyShelves,
	[Token(Token = "0x400085E")]
	LotsOfSurfaceArea,
	[Token(Token = "0x400085F")]
	RoughlyPhallic,
	[Token(Token = "0x4000860")]
	SimpleCouchAndShelf,
	[Token(Token = "0x4000861")]
	SuperBasicCouch,
	[Token(Token = "0x4000862")]
	ThePsychOffice,
	[Token(Token = "0x4000863")]
	TwoChairsAndCoffeeTable,
	[Token(Token = "0x4000864")]
	Picnic
}
[Token(Token = "0x200017E")]
public enum FurnitureColor
{
	[Token(Token = "0x4000866")]
	Black,
	[Token(Token = "0x4000867")]
	Blue,
	[Token(Token = "0x4000868")]
	Green,
	[Token(Token = "0x4000869")]
	Red,
	[Token(Token = "0x400086A")]
	Yellow
}
[Token(Token = "0x200017F")]
public class GameLoadManager : MonoBehaviour
{
	[Token(Token = "0x2000180")]
	[CompilerGenerated]
	private sealed class <LoadScenesAsync>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400086E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400086F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000870")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameLoadManager <>4__this;

		[Token(Token = "0x4000871")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private AsyncOperation <asyncPersistant>5__2;

		[Token(Token = "0x4000872")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AsyncOperation <asyncLibrary>5__3;

		[Token(Token = "0x170000DC")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000748")]
			[Address(RVA = "0xE93148", Offset = "0xE93148", VA = "0xE93148", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000DD")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600074A")]
			[Address(RVA = "0xE93190", Offset = "0xE93190", VA = "0xE93190", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000745")]
		[Address(RVA = "0xE92B20", Offset = "0xE92B20", VA = "0xE92B20")]
		[DebuggerHidden]
		public <LoadScenesAsync>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x6000746")]
		[Address(RVA = "0xE92B5C", Offset = "0xE92B5C", VA = "0xE92B5C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000747")]
		[Address(RVA = "0xE92B60", Offset = "0xE92B60", VA = "0xE92B60", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000749")]
		[Address(RVA = "0xE93150", Offset = "0xE93150", VA = "0xE93150", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400086B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ColorFader fader;

	[Token(Token = "0x400086C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject loadingScene;

	[Token(Token = "0x400086D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool sessionStarted;

	[Token(Token = "0x6000741")]
	[Address(RVA = "0xE929E8", Offset = "0xE929E8", VA = "0xE929E8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000742")]
	[Address(RVA = "0xE92AAC", Offset = "0xE92AAC", VA = "0xE92AAC")]
	[IteratorStateMachine(typeof(<LoadScenesAsync>d__4))]
	private IEnumerator LoadScenesAsync()
	{
		return null;
	}

	[Token(Token = "0x6000743")]
	[Address(RVA = "0xE92B48", Offset = "0xE92B48", VA = "0xE92B48")]
	private void SetSessionStarted()
	{
	}

	[Token(Token = "0x6000744")]
	[Address(RVA = "0xE92B54", Offset = "0xE92B54", VA = "0xE92B54")]
	public GameLoadManager()
	{
	}
}
[Token(Token = "0x2000181")]
public class GenericSwitchboard
{
	[Token(Token = "0x2000182")]
	private struct SwitchboardActionItem
	{
		[Token(Token = "0x4000875")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public object action;

		[Token(Token = "0x4000876")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public object target;
	}

	[Token(Token = "0x4000873")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static GenericSwitchboard _sharedInstance;

	[Token(Token = "0x4000874")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Dictionary<string, List<SwitchboardActionItem>> actionItemsByKey;

	[Token(Token = "0x170000DE")]
	public static GenericSwitchboard SharedInstance
	{
		[Token(Token = "0x600074B")]
		[Address(RVA = "0xE8FB5C", Offset = "0xE8FB5C", VA = "0xE8FB5C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600074C")]
	[Address(RVA = "0xE8FF44", Offset = "0xE8FF44", VA = "0xE8FF44")]
	public void AddActionForKey(Action theAction, string actionKey, object target)
	{
	}

	[Token(Token = "0x600074D")]
	public void AddActionForKey<T>(Action<T> theAction, string actionKey, object target)
	{
	}

	[Token(Token = "0x600074E")]
	public void AddActionForKey<T1, T2>(Action<T1, T2> theAction, string actionKey, object target)
	{
	}

	[Token(Token = "0x600074F")]
	public void AddActionForKey<T1, T2, T3>(Action<T1, T2, T3> theAction, string actionKey, object target)
	{
	}

	[Token(Token = "0x6000750")]
	public void AddActionForKey<T1, T2, T3, T4>(Action<T1, T2, T3, T4> theAction, string actionKey, object target)
	{
	}

	[Token(Token = "0x6000751")]
	[Address(RVA = "0xE93220", Offset = "0xE93220", VA = "0xE93220")]
	private void AddActionToListForKey(object theAction, string actionKey, object target)
	{
	}

	[Token(Token = "0x6000752")]
	[Address(RVA = "0xE93490", Offset = "0xE93490", VA = "0xE93490")]
	private bool CheckTargetIsInvalidAndRemoveActionIfNot(string actionKey, object target)
	{
		return default(bool);
	}

	[Token(Token = "0x6000753")]
	[Address(RVA = "0xE91800", Offset = "0xE91800", VA = "0xE91800")]
	public void TriggerActionForKey(string actionKey)
	{
	}

	[Token(Token = "0x6000754")]
	public void TriggerActionForKey<T>(string actionKey, T param1)
	{
	}

	[Token(Token = "0x6000755")]
	public void TriggerActionForKey<T1, T2>(string actionKey, T1 param1, T2 param2)
	{
	}

	[Token(Token = "0x6000756")]
	public void TriggerActionForKey<T1, T2, T3>(string actionKey, T1 param1, T2 param2, T3 param3)
	{
	}

	[Token(Token = "0x6000757")]
	public void TriggerActionForKey<T1, T2, T3, T4>(string actionKey, T1 param1, T2 param2, T3 param3, T4 param4)
	{
	}

	[Token(Token = "0x6000758")]
	[Address(RVA = "0xE8FC74", Offset = "0xE8FC74", VA = "0xE8FC74")]
	public void RemoveActionsForKeyAndTarget(string actionKey, object target)
	{
	}

	[Token(Token = "0x6000759")]
	public void AddFunctionForKey<TResult>(Func<TResult> theFunc, string functKey, object target)
	{
	}

	[Token(Token = "0x600075A")]
	public void AddFunctionForKey<T, TResult>(Func<T, TResult> theFunc, string functKey, object target)
	{
	}

	[Token(Token = "0x600075B")]
	public void AddFunctionForKey<T1, T2, TResult>(Func<T1, T2, TResult> theFunc, string functKey, object target)
	{
	}

	[Token(Token = "0x600075C")]
	public void AddFunctionForKey<T1, T2, T3, TResult>(Func<T1, T2, T3, TResult> theFunc, string functKey, object target)
	{
	}

	[Token(Token = "0x600075D")]
	[Address(RVA = "0xE936D0", Offset = "0xE936D0", VA = "0xE936D0")]
	public void RemoveFunctionForKeyAndTarget(string actionKey, object target)
	{
	}

	[Token(Token = "0x600075E")]
	[Address(RVA = "0xE936D4", Offset = "0xE936D4", VA = "0xE936D4")]
	private bool CheckTargetIsInvalidAndRemoveFunctionIfNot(string functKey, object target)
	{
		return default(bool);
	}

	[Token(Token = "0x600075F")]
	public T TriggerFunctionForKey<T>(string functKey)
	{
		return (T)null;
	}

	[Token(Token = "0x6000760")]
	public TResult TriggerFunctionForKey<T, TResult>(string functKey, T param1)
	{
		return (TResult)null;
	}

	[Token(Token = "0x6000761")]
	public TResult TriggerFunctionForKey<T1, T2, TResult>(string functKey, T1 param1, T2 param2)
	{
		return (TResult)null;
	}

	[Token(Token = "0x6000762")]
	public TResult TriggerFunctionForKey<T1, T2, T3, TResult>(string functKey, T1 param1, T2 param2, T3 param3)
	{
		return (TResult)null;
	}

	[Token(Token = "0x6000763")]
	[Address(RVA = "0xE93584", Offset = "0xE93584", VA = "0xE93584")]
	private void IterateThroughActionItems(string actionKey, Func<SwitchboardActionItem, bool> checkingFunction)
	{
	}

	[Token(Token = "0x6000764")]
	[Address(RVA = "0xE93198", Offset = "0xE93198", VA = "0xE93198")]
	public GenericSwitchboard()
	{
	}
}
[Token(Token = "0x200018C")]
public class GnosisTracker : Singleton<GnosisTracker>
{
	[Token(Token = "0x200018D")]
	[CompilerGenerated]
	private sealed class <Start>d__8 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40008A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40008A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40008A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GnosisTracker <>4__this;

		[Token(Token = "0x170000E0")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000785")]
			[Address(RVA = "0xE93E68", Offset = "0xE93E68", VA = "0xE93E68", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000E1")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000787")]
			[Address(RVA = "0xE93EB0", Offset = "0xE93EB0", VA = "0xE93EB0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000782")]
		[Address(RVA = "0xE9395C", Offset = "0xE9395C", VA = "0xE9395C")]
		[DebuggerHidden]
		public <Start>d__8(int <>1__state)
		{
		}

		[Token(Token = "0x6000783")]
		[Address(RVA = "0xE93BA0", Offset = "0xE93BA0", VA = "0xE93BA0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000784")]
		[Address(RVA = "0xE93BA4", Offset = "0xE93BA4", VA = "0xE93BA4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000786")]
		[Address(RVA = "0xE93E70", Offset = "0xE93E70", VA = "0xE93E70", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200018E")]
	[CompilerGenerated]
	private sealed class <SubscribeToInit>d__9 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40008A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40008A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40008AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GnosisTracker <>4__this;

		[Token(Token = "0x170000E2")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600078B")]
			[Address(RVA = "0xE940A0", Offset = "0xE940A0", VA = "0xE940A0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000E3")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600078D")]
			[Address(RVA = "0xE940E8", Offset = "0xE940E8", VA = "0xE940E8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000788")]
		[Address(RVA = "0xE939F8", Offset = "0xE939F8", VA = "0xE939F8")]
		[DebuggerHidden]
		public <SubscribeToInit>d__9(int <>1__state)
		{
		}

		[Token(Token = "0x6000789")]
		[Address(RVA = "0xE93EB8", Offset = "0xE93EB8", VA = "0xE93EB8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600078A")]
		[Address(RVA = "0xE93EBC", Offset = "0xE93EBC", VA = "0xE93EBC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600078C")]
		[Address(RVA = "0xE940A8", Offset = "0xE940A8", VA = "0xE940A8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40008A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float sessionCreditedEffort;

	[Token(Token = "0x40008A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float sessionCreditedAccuracy;

	[Token(Token = "0x40008A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private UserEventTrigger onboCompleteTrigger;

	[Token(Token = "0x170000DF")]
	public float initialSessionGnosis
	{
		[Token(Token = "0x6000777")]
		[Address(RVA = "0xE938D4", Offset = "0xE938D4", VA = "0xE938D4")]
		[CompilerGenerated]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000778")]
		[Address(RVA = "0xE938DC", Offset = "0xE938DC", VA = "0xE938DC")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x6000779")]
	[Address(RVA = "0xE938E4", Offset = "0xE938E4", VA = "0xE938E4", Slot = "5")]
	protected override void DidAwake()
	{
	}

	[Token(Token = "0x600077A")]
	[Address(RVA = "0xE938E8", Offset = "0xE938E8", VA = "0xE938E8")]
	[IteratorStateMachine(typeof(<Start>d__8))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x600077B")]
	[Address(RVA = "0xE93984", Offset = "0xE93984", VA = "0xE93984")]
	[IteratorStateMachine(typeof(<SubscribeToInit>d__9))]
	private IEnumerator SubscribeToInit()
	{
		return null;
	}

	[Token(Token = "0x600077C")]
	[Address(RVA = "0xE93A20", Offset = "0xE93A20", VA = "0xE93A20")]
	public float GetGnosisTotal()
	{
		return default(float);
	}

	[Token(Token = "0x600077D")]
	[Address(RVA = "0xE93A2C", Offset = "0xE93A2C", VA = "0xE93A2C")]
	public float UseSessionEffort()
	{
		return default(float);
	}

	[Token(Token = "0x600077E")]
	[Address(RVA = "0xE93A38", Offset = "0xE93A38", VA = "0xE93A38")]
	public float UseSessionAccuracy()
	{
		return default(float);
	}

	[Token(Token = "0x600077F")]
	[Address(RVA = "0xE93A44", Offset = "0xE93A44", VA = "0xE93A44")]
	public GnosisTracker()
	{
	}
}
[Token(Token = "0x200018F")]
public class GrabbablePickup : MonoBehaviour
{
	[Token(Token = "0x40008AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Rigidbody thisRigidbody;

	[Token(Token = "0x40008AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject splashEffect;

	[Token(Token = "0x600078E")]
	[Address(RVA = "0xE940F0", Offset = "0xE940F0", VA = "0xE940F0")]
	public void SetToPickupable(Autohand.Hand hand, Grabbable grabbable)
	{
	}

	[Token(Token = "0x600078F")]
	[Address(RVA = "0xE942F0", Offset = "0xE942F0", VA = "0xE942F0")]
	public GrabbablePickup()
	{
	}
}
[Token(Token = "0x2000190")]
public class GrabDistanceIndicator : MonoBehaviour
{
	[Token(Token = "0x40008AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Autohand.Hand hand;

	[Token(Token = "0x40008AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GrabDistanceIndicatorVisual indicator;

	[Token(Token = "0x40008AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Transform handTransform;

	[Token(Token = "0x40008B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform target;

	[Token(Token = "0x40008B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Transform lastTarget;

	[Token(Token = "0x40008B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float timer;

	[Token(Token = "0x40008B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float timerDuration;

	[Token(Token = "0x40008B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static bool targetIsHeld;

	[Token(Token = "0x40008B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
	private static bool targetIsHighlighted;

	[Token(Token = "0x6000790")]
	[Address(RVA = "0xE942F8", Offset = "0xE942F8", VA = "0xE942F8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000791")]
	[Address(RVA = "0xE94514", Offset = "0xE94514", VA = "0xE94514")]
	private void ResetTimer()
	{
	}

	[Token(Token = "0x6000792")]
	[Address(RVA = "0xE94520", Offset = "0xE94520", VA = "0xE94520")]
	private void Update()
	{
	}

	[Token(Token = "0x6000793")]
	[Address(RVA = "0xE948AC", Offset = "0xE948AC", VA = "0xE948AC")]
	public GrabDistanceIndicator()
	{
	}
}
[Token(Token = "0x2000191")]
public class HapticXRHandControllerLink : XRHandControllerLink
{
	[Token(Token = "0x40008B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Action<bool, float, float> SendHapticFeedback;

	[Token(Token = "0x6000799")]
	[Address(RVA = "0xE949DC", Offset = "0xE949DC", VA = "0xE949DC")]
	private void Awake()
	{
	}

	[Token(Token = "0x600079A")]
	[Address(RVA = "0xE94AF8", Offset = "0xE94AF8", VA = "0xE94AF8")]
	public HapticXRHandControllerLink()
	{
	}
}
[Token(Token = "0x2000192")]
public class HardwareBuildTargeter : Singleton<HardwareBuildTargeter>
{
	[Token(Token = "0x40008B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SupportedPlatforms platform;

	[Token(Token = "0x40008B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public EntitlementCheck metaEntitlementCheck;

	[Token(Token = "0x40008B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public YVREntitlementCheck yvrEntitlementCheck;

	[Token(Token = "0x40008BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public List<PlatformSpecificMarketplaceSKU> platformSpecificMarketplaceSKUs;

	[Token(Token = "0x40008BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private string s3URL;

	[Token(Token = "0x600079C")]
	[Address(RVA = "0xE94B3C", Offset = "0xE94B3C", VA = "0xE94B3C", Slot = "5")]
	protected override void DidAwake()
	{
	}

	[Token(Token = "0x600079D")]
	[Address(RVA = "0xE94B98", Offset = "0xE94B98", VA = "0xE94B98")]
	private void GetPlatformSpecificMarketplaceSKUs()
	{
	}

	[Token(Token = "0x600079E")]
	[Address(RVA = "0xE94C4C", Offset = "0xE94C4C", VA = "0xE94C4C")]
	public Guid GetValidatedGuid(string subGuid)
	{
		return default(Guid);
	}

	[Token(Token = "0x600079F")]
	[Address(RVA = "0xE94D74", Offset = "0xE94D74", VA = "0xE94D74")]
	public string GetYVRStringFromGuid(Guid guid)
	{
		return null;
	}

	[Token(Token = "0x60007A0")]
	[Address(RVA = "0xE94E8C", Offset = "0xE94E8C", VA = "0xE94E8C")]
	public HardwareBuildTargeter()
	{
	}
}
[Token(Token = "0x2000195")]
public class PlatformSpecificMarketplaceSKU
{
	[Token(Token = "0x40008BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Guid guid;

	[Token(Token = "0x40008BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string YVRGuid;

	[Token(Token = "0x60007A6")]
	[Address(RVA = "0xE952D8", Offset = "0xE952D8", VA = "0xE952D8")]
	public PlatformSpecificMarketplaceSKU(string guid, string yvrGuid)
	{
	}
}
[Token(Token = "0x2000196")]
public class ResponsePlatformSpecificMarketplaceSKU
{
	[Token(Token = "0x40008C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string guid;

	[Token(Token = "0x40008C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string yvrGuid;

	[Token(Token = "0x60007A7")]
	[Address(RVA = "0xE95368", Offset = "0xE95368", VA = "0xE95368")]
	public ResponsePlatformSpecificMarketplaceSKU()
	{
	}
}
[Token(Token = "0x2000197")]
public enum SupportedPlatforms
{
	[Token(Token = "0x40008C3")]
	MetaQuest2,
	[Token(Token = "0x40008C4")]
	YVR_D1
}
[Token(Token = "0x2000198")]
public class HardwareSpecificTextureSelector : MonoBehaviour
{
	[Token(Token = "0x40008C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Texture2D[] texturesByEnum;

	[Token(Token = "0x40008C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Renderer rnd;

	[Token(Token = "0x60007A8")]
	[Address(RVA = "0xE95370", Offset = "0xE95370", VA = "0xE95370")]
	private void Start()
	{
	}

	[Token(Token = "0x60007A9")]
	[Address(RVA = "0xE9543C", Offset = "0xE9543C", VA = "0xE9543C")]
	public HardwareSpecificTextureSelector()
	{
	}
}
[Token(Token = "0x2000199")]
public class HeadGestureDetector : MonoBehaviour
{
	[Token(Token = "0x200019A")]
	private enum HeadShakeDirection
	{
		[Token(Token = "0x40008CD")]
		Left,
		[Token(Token = "0x40008CE")]
		Right
	}

	[Token(Token = "0x40008C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform hmd;

	[Token(Token = "0x40008C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Transform target;

	[Token(Token = "0x40008C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float headRotationalThresholdForDotProduct;

	[Token(Token = "0x40008CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float timer;

	[Token(Token = "0x40008CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private List<HeadShakeDirection> headShakes;

	[Token(Token = "0x60007AA")]
	[Address(RVA = "0xE95444", Offset = "0xE95444", VA = "0xE95444")]
	private void Start()
	{
	}

	[Token(Token = "0x60007AB")]
	[Address(RVA = "0xE95508", Offset = "0xE95508", VA = "0xE95508")]
	private void ToggleHeadShakeGestureDetection(Transform obj)
	{
	}

	[Token(Token = "0x60007AC")]
	[Address(RVA = "0xE95510", Offset = "0xE95510", VA = "0xE95510")]
	private void DetectHeadShakeGesture()
	{
	}

	[Token(Token = "0x60007AD")]
	[Address(RVA = "0xE95720", Offset = "0xE95720", VA = "0xE95720")]
	private void CountdownTimer()
	{
	}

	[Token(Token = "0x60007AE")]
	[Address(RVA = "0xE9574C", Offset = "0xE9574C", VA = "0xE9574C")]
	private void Update()
	{
	}

	[Token(Token = "0x60007AF")]
	[Address(RVA = "0xE957D8", Offset = "0xE957D8", VA = "0xE957D8")]
	public HeadGestureDetector()
	{
	}
}
[Token(Token = "0x200019B")]
public class HMD : Singleton<HMD>
{
	[Token(Token = "0x40008CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform leftHand;

	[Token(Token = "0x40008D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform rightHand;

	[Token(Token = "0x40008D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform hmdTransform;

	[Token(Token = "0x40008D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform playerControllerTransform;

	[Token(Token = "0x40008D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public LineRenderer leftLineRenderer;

	[Token(Token = "0x40008D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public LineRenderer rightLineRenderer;

	[Token(Token = "0x40008D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public XRInteractorLineVisual leftILV;

	[Token(Token = "0x40008D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public XRInteractorLineVisual rightILV;

	[Token(Token = "0x40008D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public XRRayInteractor leftXRRayInteractor;

	[Token(Token = "0x40008D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public XRRayInteractor rightXRRayInteractor;

	[Token(Token = "0x60007B0")]
	[Address(RVA = "0xE957EC", Offset = "0xE957EC", VA = "0xE957EC", Slot = "5")]
	protected override void DidAwake()
	{
	}

	[Token(Token = "0x60007B1")]
	[Address(RVA = "0xE95810", Offset = "0xE95810", VA = "0xE95810")]
	public void ToggleRayInteraction(bool enable)
	{
	}

	[Token(Token = "0x60007B2")]
	[Address(RVA = "0xE9586C", Offset = "0xE9586C", VA = "0xE9586C")]
	public HMD()
	{
	}
}
[Token(Token = "0x200019C")]
public class IAPManager : Singleton<IAPManager>
{
	[Token(Token = "0x200019D")]
	[CompilerGenerated]
	private sealed class <>c__DisplayClass9_0
	{
		[Token(Token = "0x40008DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool getSkuSuccess;

		[Token(Token = "0x40008E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<string> additionSkus;

		[Token(Token = "0x40008E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<PurchasedItem> skusInDb;

		[Token(Token = "0x40008E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public APIGetPurchasedMarketplaceListings apiComm;

		[Token(Token = "0x40008E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public List<Guid> confirmedIAPListingIds;

		[Token(Token = "0x60007BF")]
		[Address(RVA = "0xE965AC", Offset = "0xE965AC", VA = "0xE965AC")]
		public <>c__DisplayClass9_0()
		{
		}

		[Token(Token = "0x60007C0")]
		[Address(RVA = "0xE965B4", Offset = "0xE965B4", VA = "0xE965B4")]
		internal void <co_UpdateUserAccessFromPurchaseList>b__0(bool successful)
		{
		}
	}

	[Token(Token = "0x200019F")]
	[CompilerGenerated]
	private sealed class <co_UpdateUserAccessFromPurchaseList>d__9 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40008E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40008E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40008E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<Guid> confirmedIAPListingIds;

		[Token(Token = "0x40008EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public IAPManager <>4__this;

		[Token(Token = "0x40008EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private <>c__DisplayClass9_0 <>8__1;

		[Token(Token = "0x40008EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<string>.Enumerator <>7__wrap1;

		[Token(Token = "0x40008ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private List<PurchasedItem>.Enumerator <>7__wrap2;

		[Token(Token = "0x170000E4")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60007CA")]
			[Address(RVA = "0xE973B8", Offset = "0xE973B8", VA = "0xE973B8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000E5")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60007CC")]
			[Address(RVA = "0xE97400", Offset = "0xE97400", VA = "0xE97400", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60007C5")]
		[Address(RVA = "0xE95C78", Offset = "0xE95C78", VA = "0xE95C78")]
		[DebuggerHidden]
		public <co_UpdateUserAccessFromPurchaseList>d__9(int <>1__state)
		{
		}

		[Token(Token = "0x60007C6")]
		[Address(RVA = "0xE969DC", Offset = "0xE969DC", VA = "0xE969DC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60007C7")]
		[Address(RVA = "0xE96A14", Offset = "0xE96A14", VA = "0xE96A14", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60007C8")]
		[Address(RVA = "0xE97318", Offset = "0xE97318", VA = "0xE97318")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x60007C9")]
		[Address(RVA = "0xE97368", Offset = "0xE97368", VA = "0xE97368")]
		private void <>m__Finally2()
		{
		}

		[Token(Token = "0x60007CB")]
		[Address(RVA = "0xE973C0", Offset = "0xE973C0", VA = "0xE973C0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40008D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Dictionary<Guid, string> priceByListingIdDict;

	[Token(Token = "0x40008DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Action OnUserDeckAccessValidated;

	[Token(Token = "0x40008DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private IAPProcessor processor;

	[Token(Token = "0x40008DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private PurchaseList userPurchases;

	[Token(Token = "0x40008DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool purchasesReturned;

	[Token(Token = "0x40008DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private List<Bundle> marketplaceBundles;

	[Token(Token = "0x60007B3")]
	[Address(RVA = "0xE958B4", Offset = "0xE958B4", VA = "0xE958B4", Slot = "5")]
	protected override void DidAwake()
	{
	}

	[Token(Token = "0x60007B4")]
	[Address(RVA = "0xE95AF8", Offset = "0xE95AF8", VA = "0xE95AF8")]
	public void UpdateUserListingsAccessFromIAPPurchaseHistoryStart()
	{
	}

	[Token(Token = "0x60007B5")]
	[Address(RVA = "0xE95BBC", Offset = "0xE95BBC", VA = "0xE95BBC")]
	private void UpdateUserListingsAccessFromIAPPurchaseHistoryStartCompletion(bool successful, List<Guid> confirmedIAPListingIds)
	{
	}

	[Token(Token = "0x60007B6")]
	[Address(RVA = "0xE95BE8", Offset = "0xE95BE8", VA = "0xE95BE8")]
	[IteratorStateMachine(typeof(<co_UpdateUserAccessFromPurchaseList>d__9))]
	private IEnumerator co_UpdateUserAccessFromPurchaseList(List<Guid> confirmedIAPListingIds)
	{
		return null;
	}

	[Token(Token = "0x60007B7")]
	[Address(RVA = "0xE95CA0", Offset = "0xE95CA0", VA = "0xE95CA0")]
	public void GetListingPricesStart(List<Guid> listings)
	{
	}

	[Token(Token = "0x60007B8")]
	[Address(RVA = "0xE95D54", Offset = "0xE95D54", VA = "0xE95D54")]
	private List<Guid> GetListingsThatNeedAPrice(List<Guid> rawListingSet)
	{
		return null;
	}

	[Token(Token = "0x60007B9")]
	[Address(RVA = "0xE95F98", Offset = "0xE95F98", VA = "0xE95F98")]
	private List<Guid> GetListingsThatNeedAPrice(List<string> rawListingSet)
	{
		return null;
	}

	[Token(Token = "0x60007BA")]
	[Address(RVA = "0xE961EC", Offset = "0xE961EC", VA = "0xE961EC")]
	private void GetListingPricesCompletion(bool successful, Dictionary<Guid, string> priceDictionary)
	{
	}

	[Token(Token = "0x60007BB")]
	[Address(RVA = "0xE963C4", Offset = "0xE963C4", VA = "0xE963C4")]
	public void PurchaseListing(Guid listingId, Action<bool, string> onFinishedCallback)
	{
	}

	[Token(Token = "0x60007BC")]
	[Address(RVA = "0xE963E4", Offset = "0xE963E4", VA = "0xE963E4")]
	public void FetchProductPricesWithCallback(List<string> skus, Action<bool> onFinishedCallback)
	{
	}

	[Token(Token = "0x60007BD")]
	[Address(RVA = "0xE964F0", Offset = "0xE964F0", VA = "0xE964F0")]
	public bool ValidateGotListings()
	{
		return default(bool);
	}

	[Token(Token = "0x60007BE")]
	[Address(RVA = "0xE96510", Offset = "0xE96510", VA = "0xE96510")]
	public IAPManager()
	{
	}
}
[Token(Token = "0x20001A1")]
public class YVRIAPProcessor : IAPProcessor
{
	[Token(Token = "0x40008F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Dictionary<Guid, Goods> goodsByGuid;

	[Token(Token = "0x60007CF")]
	[Address(RVA = "0xE95974", Offset = "0xE95974", VA = "0xE95974")]
	public YVRIAPProcessor()
	{
	}

	[Token(Token = "0x60007D0")]
	[Address(RVA = "0xE9745C", Offset = "0xE9745C", VA = "0xE9745C", Slot = "7")]
	public override bool ValidateGotListings()
	{
		return default(bool);
	}

	[Token(Token = "0x60007D1")]
	[Address(RVA = "0xE974B8", Offset = "0xE974B8", VA = "0xE974B8", Slot = "4")]
	public override void GetPurchasedListings(Action<bool, List<Guid>> callback)
	{
	}

	[Token(Token = "0x60007D2")]
	[Address(RVA = "0xE97630", Offset = "0xE97630", VA = "0xE97630", Slot = "5")]
	public override void GetListingPrices(List<Guid> listingIds, Action<bool, Dictionary<Guid, string>> callback)
	{
	}

	[Token(Token = "0x60007D3")]
	[Address(RVA = "0xE97F78", Offset = "0xE97F78", VA = "0xE97F78", Slot = "6")]
	public override void PurchaseListing(Guid listingId, Action<bool, string> callback)
	{
	}
}
[Token(Token = "0x20001A4")]
public class IMEXRInput : MonoBehaviour
{
	[Token(Token = "0x20001A5")]
	[CompilerGenerated]
	private sealed class <WaitOneFrameAndToggle>d__15 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40008F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40008FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40008FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public IMEXRInput <>4__this;

		[Token(Token = "0x170000E9")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60007E7")]
			[Address(RVA = "0xE98C04", Offset = "0xE98C04", VA = "0xE98C04", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000EA")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60007E9")]
			[Address(RVA = "0xE98C4C", Offset = "0xE98C4C", VA = "0xE98C4C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60007E4")]
		[Address(RVA = "0xE98AE8", Offset = "0xE98AE8", VA = "0xE98AE8")]
		[DebuggerHidden]
		public <WaitOneFrameAndToggle>d__15(int <>1__state)
		{
		}

		[Token(Token = "0x60007E5")]
		[Address(RVA = "0xE98B98", Offset = "0xE98B98", VA = "0xE98B98", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60007E6")]
		[Address(RVA = "0xE98B9C", Offset = "0xE98B9C", VA = "0xE98B9C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60007E8")]
		[Address(RVA = "0xE98C0C", Offset = "0xE98C0C", VA = "0xE98C0C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40008F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private XRRayInteractor xrRayInteractor;

	[Token(Token = "0x170000E6")]
	public bool IsButtonHeldDown
	{
		[Token(Token = "0x60007D9")]
		[Address(RVA = "0xE989E4", Offset = "0xE989E4", VA = "0xE989E4")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60007DA")]
		[Address(RVA = "0xE989EC", Offset = "0xE989EC", VA = "0xE989EC")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170000E7")]
	public bool IsButtonReleasedThisFrame
	{
		[Token(Token = "0x60007DB")]
		[Address(RVA = "0xE989F8", Offset = "0xE989F8", VA = "0xE989F8")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60007DC")]
		[Address(RVA = "0xE98A00", Offset = "0xE98A00", VA = "0xE98A00")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170000E8")]
	public bool IsButtonPressedThisFrame
	{
		[Token(Token = "0x60007DD")]
		[Address(RVA = "0xE98A0C", Offset = "0xE98A0C", VA = "0xE98A0C")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60007DE")]
		[Address(RVA = "0xE98A14", Offset = "0xE98A14", VA = "0xE98A14")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x60007DF")]
	[Address(RVA = "0xE98A20", Offset = "0xE98A20", VA = "0xE98A20")]
	public void OnPressed()
	{
	}

	[Token(Token = "0x60007E0")]
	[Address(RVA = "0xE98ABC", Offset = "0xE98ABC", VA = "0xE98ABC")]
	public void OnReleased()
	{
	}

	[Token(Token = "0x60007E1")]
	[Address(RVA = "0xE98A48", Offset = "0xE98A48", VA = "0xE98A48")]
	[IteratorStateMachine(typeof(<WaitOneFrameAndToggle>d__15))]
	private IEnumerator WaitOneFrameAndToggle()
	{
		return null;
	}

	[Token(Token = "0x60007E2")]
	[Address(RVA = "0xE98B10", Offset = "0xE98B10", VA = "0xE98B10")]
	public Ray GetRay()
	{
		return default(Ray);
	}

	[Token(Token = "0x60007E3")]
	[Address(RVA = "0xE98B90", Offset = "0xE98B90", VA = "0xE98B90")]
	public IMEXRInput()
	{
	}
}
[Token(Token = "0x20001A6")]
public class IMEXRInputDataProvider : IMEInputDataProvider
{
	[Token(Token = "0x40008FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private IMEXRInput input;

	[Token(Token = "0x170000EB")]
	protected override bool isButton
	{
		[Token(Token = "0x60007EB")]
		[Address(RVA = "0xE98C84", Offset = "0xE98C84", VA = "0xE98C84", Slot = "4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000EC")]
	protected override bool isButtonDown
	{
		[Token(Token = "0x60007EC")]
		[Address(RVA = "0xE98CA0", Offset = "0xE98CA0", VA = "0xE98CA0", Slot = "5")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000ED")]
	protected override bool isButtonUp
	{
		[Token(Token = "0x60007ED")]
		[Address(RVA = "0xE98CBC", Offset = "0xE98CBC", VA = "0xE98CBC", Slot = "6")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000EE")]
	protected override Ray ray
	{
		[Token(Token = "0x60007EE")]
		[Address(RVA = "0xE98CD8", Offset = "0xE98CD8", VA = "0xE98CD8", Slot = "7")]
		get
		{
			return default(Ray);
		}
	}

	[Token(Token = "0x60007EA")]
	[Address(RVA = "0xE98C54", Offset = "0xE98C54", VA = "0xE98C54")]
	public IMEXRInputDataProvider(IMEXRInput input)
	{
	}
}
[Token(Token = "0x20001A7")]
public class IMEXRManager : IMEManager
{
	[Token(Token = "0x60007EF")]
	[Address(RVA = "0xE98D14", Offset = "0xE98D14", VA = "0xE98D14", Slot = "4")]
	protected override IMEInputDataProvider GenerateIMEInputDataProvider(IMEInputDataProvider inputDataProvider)
	{
		return null;
	}

	[Token(Token = "0x60007F0")]
	[Address(RVA = "0xE98DD0", Offset = "0xE98DD0", VA = "0xE98DD0")]
	public IMEXRManager()
	{
	}
}
[Token(Token = "0x20001A8")]
public class InfoPopup : Singleton<InfoPopup>
{
	[Token(Token = "0x40008FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform target;

	[Token(Token = "0x40008FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public LineRenderer lineRenderer;

	[Token(Token = "0x40008FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public RotateToFaceObject rotator;

	[Token(Token = "0x4000900")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float distanceBehindTarget;

	[Token(Token = "0x4000901")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float distanceAboveTarget;

	[Token(Token = "0x4000902")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float lerpSpeed;

	[Token(Token = "0x4000903")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public TextMeshPro label;

	[Token(Token = "0x4000904")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Transform lineEndPosition;

	[Token(Token = "0x4000905")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Renderer thisRenderer;

	[Token(Token = "0x4000906")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Transform thisTransform;

	[Token(Token = "0x4000907")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Transform hmd;

	[Token(Token = "0x4000908")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private ManagedProp lastPickedUpProp;

	[Token(Token = "0x4000909")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private ManagedProp currentlyPickedUpProp;

	[Token(Token = "0x400090A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private FlashcardController flashcardController;

	[Token(Token = "0x400090B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Grabbable lastPickedUpPropGrabbable;

	[Token(Token = "0x400090C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private bool isLocked;

	[Token(Token = "0x60007F1")]
	[Address(RVA = "0xE98DD8", Offset = "0xE98DD8", VA = "0xE98DD8")]
	private void Start()
	{
	}

	[Token(Token = "0x60007F2")]
	[Address(RVA = "0xE990D4", Offset = "0xE990D4", VA = "0xE990D4")]
	public void ExplainPropInteraction(bool enable)
	{
	}

	[Token(Token = "0x60007F3")]
	[Address(RVA = "0xE99444", Offset = "0xE99444", VA = "0xE99444")]
	private void FlipCard(bool flipped)
	{
	}

	[Token(Token = "0x60007F4")]
	[Address(RVA = "0xE995E8", Offset = "0xE995E8", VA = "0xE995E8")]
	private void PropPickup(ManagedProp prop)
	{
	}

	[Token(Token = "0x60007F5")]
	[Address(RVA = "0xE99718", Offset = "0xE99718", VA = "0xE99718")]
	private void PropReleaseDelegate(Autohand.Hand hand, Grabbable grabbable)
	{
	}

	[Token(Token = "0x60007F6")]
	[Address(RVA = "0xE997B8", Offset = "0xE997B8", VA = "0xE997B8")]
	private void HighlightProp(Transform prop)
	{
	}

	[Token(Token = "0x60007F7")]
	[Address(RVA = "0xE99A5C", Offset = "0xE99A5C", VA = "0xE99A5C")]
	private void Unlock()
	{
	}

	[Token(Token = "0x60007F8")]
	[Address(RVA = "0xE99354", Offset = "0xE99354", VA = "0xE99354")]
	public void SetTarget([CanBeNull] Transform target, string message = "", bool shouldLock = false)
	{
	}

	[Token(Token = "0x60007F9")]
	[Address(RVA = "0xE9900C", Offset = "0xE9900C", VA = "0xE9900C")]
	private void ToggleComponents(bool enable)
	{
	}

	[Token(Token = "0x60007FA")]
	[Address(RVA = "0xE99A64", Offset = "0xE99A64", VA = "0xE99A64")]
	private void Update()
	{
	}

	[Token(Token = "0x60007FB")]
	[Address(RVA = "0xE99D88", Offset = "0xE99D88", VA = "0xE99D88", Slot = "5")]
	protected override void DidAwake()
	{
	}

	[Token(Token = "0x60007FC")]
	[Address(RVA = "0xE99D8C", Offset = "0xE99D8C", VA = "0xE99D8C")]
	public InfoPopup()
	{
	}
}
[Token(Token = "0x20001A9")]
public class InteractionEnabler : MonoBehaviour
{
	[Token(Token = "0x20001AA")]
	[CompilerGenerated]
	private sealed class <Start>d__2 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400090F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000910")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000911")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InteractionEnabler <>4__this;

		[Token(Token = "0x170000EF")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000802")]
			[Address(RVA = "0xE99F98", Offset = "0xE99F98", VA = "0xE99F98", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000F0")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000804")]
			[Address(RVA = "0xE99FE0", Offset = "0xE99FE0", VA = "0xE99FE0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60007FF")]
		[Address(RVA = "0xE99E5C", Offset = "0xE99E5C", VA = "0xE99E5C")]
		[DebuggerHidden]
		public <Start>d__2(int <>1__state)
		{
		}

		[Token(Token = "0x6000800")]
		[Address(RVA = "0xE99E8C", Offset = "0xE99E8C", VA = "0xE99E8C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000801")]
		[Address(RVA = "0xE99E90", Offset = "0xE99E90", VA = "0xE99E90", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000803")]
		[Address(RVA = "0xE99FA0", Offset = "0xE99FA0", VA = "0xE99FA0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400090D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Renderer[] renderersToEnable;

	[Token(Token = "0x400090E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public LineRenderer line;

	[Token(Token = "0x60007FD")]
	[Address(RVA = "0xE99DE8", Offset = "0xE99DE8", VA = "0xE99DE8")]
	[IteratorStateMachine(typeof(<Start>d__2))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x60007FE")]
	[Address(RVA = "0xE99E84", Offset = "0xE99E84", VA = "0xE99E84")]
	public InteractionEnabler()
	{
	}
}
[Token(Token = "0x20001AB")]
public class JingleManager : MonoBehaviour
{
	[Token(Token = "0x4000912")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioSource audioSource;

	[Token(Token = "0x4000913")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioClip puzzleSolvedClip;

	[Token(Token = "0x6000805")]
	[Address(RVA = "0xE99FE8", Offset = "0xE99FE8", VA = "0xE99FE8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000806")]
	[Address(RVA = "0xE9A134", Offset = "0xE9A134", VA = "0xE9A134")]
	public JingleManager()
	{
	}
}
[Token(Token = "0x20001AC")]
public class KaplanManager : Singleton<KaplanManager>
{
	[Token(Token = "0x20001AD")]
	[CompilerGenerated]
	private sealed class <DoPreloadDeck>d__5 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000916")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000917")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000918")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public KaplanManager <>4__this;

		[Token(Token = "0x170000F1")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000812")]
			[Address(RVA = "0xE9A42C", Offset = "0xE9A42C", VA = "0xE9A42C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000F2")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000814")]
			[Address(RVA = "0xE9A474", Offset = "0xE9A474", VA = "0xE9A474", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600080F")]
		[Address(RVA = "0xE9A230", Offset = "0xE9A230", VA = "0xE9A230")]
		[DebuggerHidden]
		public <DoPreloadDeck>d__5(int <>1__state)
		{
		}

		[Token(Token = "0x6000810")]
		[Address(RVA = "0xE9A368", Offset = "0xE9A368", VA = "0xE9A368", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000811")]
		[Address(RVA = "0xE9A36C", Offset = "0xE9A36C", VA = "0xE9A36C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000813")]
		[Address(RVA = "0xE9A434", Offset = "0xE9A434", VA = "0xE9A434", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001AE")]
	[CompilerGenerated]
	private sealed class <DoSpawnDeck>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000919")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400091A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400091B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public KaplanManager <>4__this;

		[Token(Token = "0x170000F3")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000818")]
			[Address(RVA = "0xE9A588", Offset = "0xE9A588", VA = "0xE9A588", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000F4")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600081A")]
			[Address(RVA = "0xE9A5D0", Offset = "0xE9A5D0", VA = "0xE9A5D0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000815")]
		[Address(RVA = "0xE9A2CC", Offset = "0xE9A2CC", VA = "0xE9A2CC")]
		[DebuggerHidden]
		public <DoSpawnDeck>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x6000816")]
		[Address(RVA = "0xE9A47C", Offset = "0xE9A47C", VA = "0xE9A47C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000817")]
		[Address(RVA = "0xE9A480", Offset = "0xE9A480", VA = "0xE9A480", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000819")]
		[Address(RVA = "0xE9A590", Offset = "0xE9A590", VA = "0xE9A590", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000914")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private SerializableDeck userFirstDeck;

	[Token(Token = "0x4000915")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private string deckId;

	[Token(Token = "0x6000809")]
	[Address(RVA = "0xE9A194", Offset = "0xE9A194", VA = "0xE9A194")]
	private new void Awake()
	{
	}

	[Token(Token = "0x600080A")]
	[Address(RVA = "0xE9A198", Offset = "0xE9A198", VA = "0xE9A198", Slot = "5")]
	protected override void DidAwake()
	{
	}

	[Token(Token = "0x600080B")]
	[Address(RVA = "0xE9A19C", Offset = "0xE9A19C", VA = "0xE9A19C")]
	private void Init()
	{
	}

	[Token(Token = "0x600080C")]
	[Address(RVA = "0xE9A1BC", Offset = "0xE9A1BC", VA = "0xE9A1BC")]
	[IteratorStateMachine(typeof(<DoPreloadDeck>d__5))]
	private IEnumerator DoPreloadDeck()
	{
		return null;
	}

	[Token(Token = "0x600080D")]
	[Address(RVA = "0xE9A258", Offset = "0xE9A258", VA = "0xE9A258")]
	[IteratorStateMachine(typeof(<DoSpawnDeck>d__6))]
	private IEnumerator DoSpawnDeck()
	{
		return null;
	}

	[Token(Token = "0x600080E")]
	[Address(RVA = "0xE9A2F4", Offset = "0xE9A2F4", VA = "0xE9A2F4")]
	public KaplanManager()
	{
	}
}
[Token(Token = "0x20001AF")]
public class KeyboardWrapper : MonoBehaviour
{
	[Token(Token = "0x400091C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject yvrKeyboard;

	[Token(Token = "0x600081B")]
	[Address(RVA = "0xE9A5D8", Offset = "0xE9A5D8", VA = "0xE9A5D8")]
	public void OpenKeyboard()
	{
	}

	[Token(Token = "0x600081C")]
	[Address(RVA = "0xE9A70C", Offset = "0xE9A70C", VA = "0xE9A70C")]
	public KeyboardWrapper()
	{
	}
}
[Token(Token = "0x20001B0")]
public class LayerDebugger : MonoBehaviour
{
	[Token(Token = "0x600081D")]
	[Address(RVA = "0xE9A714", Offset = "0xE9A714", VA = "0xE9A714")]
	private void OnCollisionEnter(Collision other)
	{
	}

	[Token(Token = "0x600081E")]
	[Address(RVA = "0xE9A718", Offset = "0xE9A718", VA = "0xE9A718")]
	public LayerDebugger()
	{
	}
}
[Token(Token = "0x20001B1")]
public class PlayerLanguageData
{
	[Token(Token = "0x400091D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int selection;

	[Token(Token = "0x600081F")]
	[Address(RVA = "0xE9A720", Offset = "0xE9A720", VA = "0xE9A720")]
	public PlayerLanguageData()
	{
	}

	[Token(Token = "0x6000820")]
	[Address(RVA = "0xE9A728", Offset = "0xE9A728", VA = "0xE9A728")]
	public PlayerLanguageData(int selection)
	{
	}
}
[Token(Token = "0x20001B2")]
public class PlayerLanguageCache
{
	[Token(Token = "0x400091E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int cachedLanguageVersion;

	[Token(Token = "0x400091F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string cachedLanguageStrings;

	[Token(Token = "0x6000821")]
	[Address(RVA = "0xE9A750", Offset = "0xE9A750", VA = "0xE9A750")]
	public PlayerLanguageCache()
	{
	}

	[Token(Token = "0x6000822")]
	[Address(RVA = "0xE9A758", Offset = "0xE9A758", VA = "0xE9A758")]
	public PlayerLanguageCache(int cachedLanguageVersion, string cachedLanguageStrings)
	{
	}
}
[Token(Token = "0x20001B3")]
public class LoginUIController : MonoBehaviour
{
	[Token(Token = "0x20001B4")]
	private enum CanvasType
	{
		[Token(Token = "0x4000934")]
		None,
		[Token(Token = "0x4000935")]
		UserType,
		[Token(Token = "0x4000936")]
		Language,
		[Token(Token = "0x4000937")]
		Login,
		[Token(Token = "0x4000938")]
		Register
	}

	[Token(Token = "0x20001B5")]
	[CompilerGenerated]
	private sealed class <SpawnLoginScreen>d__22 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000939")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400093A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400093B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LoginUIController <>4__this;

		[Token(Token = "0x400093C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public CanvasType canvasType;

		[Token(Token = "0x170000F5")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000833")]
			[Address(RVA = "0xE9B7D8", Offset = "0xE9B7D8", VA = "0xE9B7D8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000F6")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000835")]
			[Address(RVA = "0xE9B820", Offset = "0xE9B820", VA = "0xE9B820", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000830")]
		[Address(RVA = "0xE9AD28", Offset = "0xE9AD28", VA = "0xE9AD28")]
		[DebuggerHidden]
		public <SpawnLoginScreen>d__22(int <>1__state)
		{
		}

		[Token(Token = "0x6000831")]
		[Address(RVA = "0xE9B56C", Offset = "0xE9B56C", VA = "0xE9B56C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000832")]
		[Address(RVA = "0xE9B570", Offset = "0xE9B570", VA = "0xE9B570", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000834")]
		[Address(RVA = "0xE9B7E0", Offset = "0xE9B7E0", VA = "0xE9B7E0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000920")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject keyboard;

	[Token(Token = "0x4000921")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextMeshPro instructions;

	[Token(Token = "0x4000922")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Canvas registerCanvas;

	[Token(Token = "0x4000923")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Canvas languageCanvas;

	[Token(Token = "0x4000924")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Canvas loginCanvas;

	[Token(Token = "0x4000925")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Canvas userTypeCanvas;

	[Token(Token = "0x4000926")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public TMP_InputField loginUsernameTextField;

	[Token(Token = "0x4000927")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public TMP_InputField loginPasswordTextField;

	[Token(Token = "0x4000928")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public TMP_InputField registerUsernameTextField;

	[Token(Token = "0x4000929")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public TMP_InputField registerPasswordTextField;

	[Token(Token = "0x400092A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public TMP_InputField emailTextField;

	[Token(Token = "0x400092B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public TMP_InputField phoneTextField;

	[Token(Token = "0x400092C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public TMP_InputField firstNameTextField;

	[Token(Token = "0x400092D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public TMP_InputField lastNameTextField;

	[Token(Token = "0x400092E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public GameObject spawnEffect;

	[Token(Token = "0x400092F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Transform hmd;

	[Token(Token = "0x4000930")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private bool loggingIn;

	[Token(Token = "0x4000931")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private string instructionsText;

	[Token(Token = "0x4000932")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private CanvasType _currentCanvasType;

	[Token(Token = "0x6000823")]
	[Address(RVA = "0xE9A790", Offset = "0xE9A790", VA = "0xE9A790")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000824")]
	[Address(RVA = "0xE9ABDC", Offset = "0xE9ABDC", VA = "0xE9ABDC")]
	private void SetCurrentCanvas(CanvasType canvasType)
	{
	}

	[Token(Token = "0x6000825")]
	[Address(RVA = "0xE9ACA4", Offset = "0xE9ACA4", VA = "0xE9ACA4")]
	[IteratorStateMachine(typeof(<SpawnLoginScreen>d__22))]
	private IEnumerator SpawnLoginScreen(CanvasType canvasType)
	{
		return null;
	}

	[Token(Token = "0x6000826")]
	[Address(RVA = "0xE9AD50", Offset = "0xE9AD50", VA = "0xE9AD50")]
	public void SubmitLoginDetails()
	{
	}

	[Token(Token = "0x6000827")]
	[Address(RVA = "0xE9AE90", Offset = "0xE9AE90", VA = "0xE9AE90")]
	public void ShowLoginCanvas()
	{
	}

	[Token(Token = "0x6000828")]
	[Address(RVA = "0xE9AF44", Offset = "0xE9AF44", VA = "0xE9AF44")]
	public void ShowRegisterCanvas()
	{
	}

	[Token(Token = "0x6000829")]
	[Address(RVA = "0xE9AFF8", Offset = "0xE9AFF8", VA = "0xE9AFF8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600082A")]
	[Address(RVA = "0xE9B300", Offset = "0xE9B300", VA = "0xE9B300")]
	private void OnLoginFailed(string errorMessage)
	{
	}

	[Token(Token = "0x600082B")]
	[Address(RVA = "0xE9B330", Offset = "0xE9B330", VA = "0xE9B330")]
	public LoginUIController()
	{
	}
}
[Token(Token = "0x20001B6")]
public class LogoutController : MonoBehaviour
{
	[Token(Token = "0x6000836")]
	[Address(RVA = "0xE9B828", Offset = "0xE9B828", VA = "0xE9B828")]
	private void OnCollisionEnter(Collision other)
	{
	}

	[Token(Token = "0x6000837")]
	[Address(RVA = "0xE9B90C", Offset = "0xE9B90C", VA = "0xE9B90C")]
	public LogoutController()
	{
	}
}
[Token(Token = "0x20001B7")]
public class ManualLOD : MonoBehaviour
{
	[Token(Token = "0x20001B8")]
	[CompilerGenerated]
	private sealed class <DistanceCheck>d__5 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000941")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000942")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000943")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ManualLOD <>4__this;

		[Token(Token = "0x170000F7")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600083F")]
			[Address(RVA = "0xE9BF6C", Offset = "0xE9BF6C", VA = "0xE9BF6C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000F8")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000841")]
			[Address(RVA = "0xE9BFB4", Offset = "0xE9BFB4", VA = "0xE9BFB4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600083C")]
		[Address(RVA = "0xE9BA08", Offset = "0xE9BA08", VA = "0xE9BA08")]
		[DebuggerHidden]
		public <DistanceCheck>d__5(int <>1__state)
		{
		}

		[Token(Token = "0x600083D")]
		[Address(RVA = "0xE9BB00", Offset = "0xE9BB00", VA = "0xE9BB00", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600083E")]
		[Address(RVA = "0xE9BB04", Offset = "0xE9BB04", VA = "0xE9BB04", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000840")]
		[Address(RVA = "0xE9BF74", Offset = "0xE9BF74", VA = "0xE9BF74", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400093D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ManualLODItem[] items;

	[Token(Token = "0x400093E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float dotToShowLOD;

	[Token(Token = "0x400093F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Transform hmd;

	[Token(Token = "0x4000940")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private WaitForSeconds distCheckDelay;

	[Token(Token = "0x6000838")]
	[Address(RVA = "0xE9B914", Offset = "0xE9B914", VA = "0xE9B914")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000839")]
	[Address(RVA = "0xE9B994", Offset = "0xE9B994", VA = "0xE9B994")]
	[IteratorStateMachine(typeof(<DistanceCheck>d__5))]
	private IEnumerator DistanceCheck()
	{
		return null;
	}

	[Token(Token = "0x600083A")]
	[Address(RVA = "0xE9BA30", Offset = "0xE9BA30", VA = "0xE9BA30")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600083B")]
	[Address(RVA = "0xE9BA7C", Offset = "0xE9BA7C", VA = "0xE9BA7C")]
	public ManualLOD()
	{
	}
}
[Token(Token = "0x20001B9")]
public class ManualLODItem : MonoBehaviour
{
	[Token(Token = "0x4000944")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] originals;

	[Token(Token = "0x4000945")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Renderer[] renderers;

	[Token(Token = "0x4000946")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject lodObject;

	[Token(Token = "0x4000947")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform center;

	[Token(Token = "0x4000948")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float distanceToEnable;

	[Token(Token = "0x4000949")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float customDistanceY;

	[Token(Token = "0x400094A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool doNotDisableIfBelowY;

	[Token(Token = "0x400094B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	public bool dotProductCheckHMD;

	[Token(Token = "0x6000842")]
	[Address(RVA = "0xE9BE20", Offset = "0xE9BE20", VA = "0xE9BE20")]
	public void ToggleLOD(bool enable)
	{
	}

	[Token(Token = "0x6000843")]
	[Address(RVA = "0xE9BFBC", Offset = "0xE9BFBC", VA = "0xE9BFBC")]
	public ManualLODItem()
	{
	}
}
[Token(Token = "0x20001BA")]
public class MarketplaceListingProvider : Singleton<MarketplaceListingProvider>
{
	[Token(Token = "0x20001BC")]
	[CompilerGenerated]
	private sealed class <>c__DisplayClass3_0
	{
		[Token(Token = "0x400094E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public MarketplaceListingProvider <>4__this;

		[Token(Token = "0x400094F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool morePages;

		[Token(Token = "0x600084C")]
		[Address(RVA = "0xE9C320", Offset = "0xE9C320", VA = "0xE9C320")]
		public <>c__DisplayClass3_0()
		{
		}
	}

	[Token(Token = "0x20001BE")]
	[CompilerGenerated]
	private sealed class <co_LoadFlatMarketplaceListings>d__3 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000952")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000953")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000954")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MarketplaceListingProvider <>4__this;

		[Token(Token = "0x4000955")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private <>c__DisplayClass3_0 <>8__1;

		[Token(Token = "0x4000956")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int <page>5__2;

		[Token(Token = "0x170000F9")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000852")]
			[Address(RVA = "0xE9C7C8", Offset = "0xE9C7C8", VA = "0xE9C7C8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000FA")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000854")]
			[Address(RVA = "0xE9C810", Offset = "0xE9C810", VA = "0xE9C810", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600084F")]
		[Address(RVA = "0xE9C210", Offset = "0xE9C210", VA = "0xE9C210")]
		[DebuggerHidden]
		public <co_LoadFlatMarketplaceListings>d__3(int <>1__state)
		{
		}

		[Token(Token = "0x6000850")]
		[Address(RVA = "0xE9C558", Offset = "0xE9C558", VA = "0xE9C558", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000851")]
		[Address(RVA = "0xE9C55C", Offset = "0xE9C55C", VA = "0xE9C55C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000853")]
		[Address(RVA = "0xE9C7D0", Offset = "0xE9C7D0", VA = "0xE9C7D0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400094C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private List<Bundle> bundles;

	[Token(Token = "0x6000844")]
	[Address(RVA = "0xE9BFC4", Offset = "0xE9BFC4", VA = "0xE9BFC4", Slot = "5")]
	protected override void DidAwake()
	{
	}

	[Token(Token = "0x6000845")]
	[Address(RVA = "0xE9C0B8", Offset = "0xE9C0B8", VA = "0xE9C0B8")]
	public bool GetDeckIsIAP(Guid guid)
	{
		return default(bool);
	}

	[Token(Token = "0x6000846")]
	[Address(RVA = "0xE9C19C", Offset = "0xE9C19C", VA = "0xE9C19C")]
	[CanBeNull]
	[IteratorStateMachine(typeof(<co_LoadFlatMarketplaceListings>d__3))]
	private IEnumerator co_LoadFlatMarketplaceListings()
	{
		return null;
	}

	[Token(Token = "0x6000847")]
	[Address(RVA = "0xE9C238", Offset = "0xE9C238", VA = "0xE9C238")]
	public List<Bundle> GetAllMarketplaceItems()
	{
		return null;
	}

	[Token(Token = "0x6000848")]
	[Address(RVA = "0xE9C240", Offset = "0xE9C240", VA = "0xE9C240")]
	public MarketplaceListingProvider()
	{
	}
}
[Token(Token = "0x20001BF")]
public class MultiVariateLinearRegression
{
	[Token(Token = "0x20001C0")]
	private class ErrorIndexPair
	{
		[Token(Token = "0x400095A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int index;

		[Token(Token = "0x400095B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float errorMag;

		[Token(Token = "0x600085A")]
		[Address(RVA = "0xE9D9DC", Offset = "0xE9D9DC", VA = "0xE9D9DC")]
		public ErrorIndexPair(int index, float errorMag)
		{
		}
	}

	[Token(Token = "0x4000957")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float a;

	[Token(Token = "0x4000958")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float[] bCoefficients;

	[Token(Token = "0x4000959")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float e;

	[Token(Token = "0x6000855")]
	[Address(RVA = "0xE9C818", Offset = "0xE9C818", VA = "0xE9C818")]
	public MultiVariateLinearRegression()
	{
	}

	[Token(Token = "0x6000856")]
	[Address(RVA = "0xE9C820", Offset = "0xE9C820", VA = "0xE9C820")]
	public MultiVariateLinearRegression(List<float[]> dataPoints)
	{
	}

	[Token(Token = "0x6000857")]
	[Address(RVA = "0xE9D37C", Offset = "0xE9D37C", VA = "0xE9D37C")]
	public bool CheckRegressionValid()
	{
		return default(bool);
	}

	[Token(Token = "0x6000858")]
	[Address(RVA = "0xE9D3E0", Offset = "0xE9D3E0", VA = "0xE9D3E0")]
	public float GetValueWithError(float[] indVars, float percentileFactor)
	{
		return default(float);
	}

	[Token(Token = "0x6000859")]
	[Address(RVA = "0xE9D588", Offset = "0xE9D588", VA = "0xE9D588")]
	public List<float[]> TrimMostOutlyingData(float factorForTrim, List<float[]> rawData)
	{
		return null;
	}
}
[Token(Token = "0x20001C2")]
public class MonoIndVarLinearRegression
{
	[Token(Token = "0x400095E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float b;

	[Token(Token = "0x400095F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float a;

	[Token(Token = "0x4000960")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float e;

	[Token(Token = "0x600085E")]
	[Address(RVA = "0xE9DAA4", Offset = "0xE9DAA4", VA = "0xE9DAA4")]
	public MonoIndVarLinearRegression(List<float[]> dataPoints)
	{
	}

	[Token(Token = "0x600085F")]
	[Address(RVA = "0xE9DDCC", Offset = "0xE9DDCC", VA = "0xE9DDCC")]
	public float GetValueWithError(float x, float percentileFactor)
	{
		return default(float);
	}
}
[Token(Token = "0x20001C3")]
public class BiIndVarLinearRegression
{
	[Token(Token = "0x4000961")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float b1;

	[Token(Token = "0x4000962")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float b2;

	[Token(Token = "0x4000963")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float a;

	[Token(Token = "0x4000964")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float e;

	[Token(Token = "0x6000860")]
	[Address(RVA = "0xE9DE94", Offset = "0xE9DE94", VA = "0xE9DE94")]
	public BiIndVarLinearRegression(List<float[]> dataPoints)
	{
	}

	[Token(Token = "0x6000861")]
	[Address(RVA = "0xE9E284", Offset = "0xE9E284", VA = "0xE9E284")]
	public float GetValueWithError(float x1, float x2, float percentileFactor)
	{
		return default(float);
	}
}
[Token(Token = "0x20001C4")]
public class TriIndVarLinearRegression
{
	[Token(Token = "0x4000965")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float b1;

	[Token(Token = "0x4000966")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float b2;

	[Token(Token = "0x4000967")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float b3;

	[Token(Token = "0x4000968")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float a;

	[Token(Token = "0x4000969")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float e;

	[Token(Token = "0x6000862")]
	[Address(RVA = "0xE9E358", Offset = "0xE9E358", VA = "0xE9E358")]
	public TriIndVarLinearRegression(List<float[]> dataPoints)
	{
	}

	[Token(Token = "0x6000863")]
	[Address(RVA = "0xE9E758", Offset = "0xE9E758", VA = "0xE9E758")]
	public float GetValueWithError(float x1, float x2, float percentileFactor)
	{
		return default(float);
	}
}
[Token(Token = "0x20001C5")]
public class ClusterSet
{
	[Token(Token = "0x20001C6")]
	public class IndexClusterSetAtRadius
	{
		[Token(Token = "0x400096B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<IndexClusterAtRadius> clustersSetsByRadius;

		[Token(Token = "0x400096C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float clusterRefRadius;

		[Token(Token = "0x6000865")]
		[Address(RVA = "0xE9F634", Offset = "0xE9F634", VA = "0xE9F634")]
		public IndexClusterSetAtRadius(float refRadius)
		{
		}
	}

	[Token(Token = "0x20001C7")]
	public class IndexClusterAtRadius
	{
		[Token(Token = "0x400096D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<int> cluster;

		[Token(Token = "0x400096E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float clusterRefRadius;

		[Token(Token = "0x400096F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector2 clusterCenter;

		[Token(Token = "0x4000970")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int centerMostIndex;

		[Token(Token = "0x6000866")]
		[Address(RVA = "0xE9F6CC", Offset = "0xE9F6CC", VA = "0xE9F6CC")]
		public IndexClusterAtRadius(float refRadius)
		{
		}
	}

	[Token(Token = "0x20001C8")]
	public class IndexedPointDistanceSet
	{
		[Token(Token = "0x4000971")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int originalPointIndex;

		[Token(Token = "0x4000972")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public DistanceBetweenValue[] distanceBetweenSet;

		[Token(Token = "0x6000867")]
		[Address(RVA = "0xE9F4E8", Offset = "0xE9F4E8", VA = "0xE9F4E8")]
		public IndexedPointDistanceSet(int originalPointIndex, int pointCount)
		{
		}
	}

	[Token(Token = "0x20001C9")]
	public class DistanceBetweenValue
	{
		[Token(Token = "0x4000973")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int refPointIndex;

		[Token(Token = "0x4000974")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float distance;

		[Token(Token = "0x6000868")]
		[Address(RVA = "0xE9F560", Offset = "0xE9F560", VA = "0xE9F560")]
		public DistanceBetweenValue(int refPointIndex, float distance)
		{
		}

		[Token(Token = "0x6000869")]
		[Address(RVA = "0xE9F598", Offset = "0xE9F598", VA = "0xE9F598")]
		public DistanceBetweenValue(int refPointIndex, Vector2 refPointPosition, Vector2 basePointPosition)
		{
		}
	}

	[Token(Token = "0x400096A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public List<IndexClusterSetAtRadius> radiusOrderedClusterSets;

	[Token(Token = "0x6000864")]
	[Address(RVA = "0xE9E82C", Offset = "0xE9E82C", VA = "0xE9E82C")]
	public ClusterSet(List<Vector2> points, List<float> testRadii, int minClusterCount)
	{
	}
}
[Token(Token = "0x20001CB")]
public static class MathAndStats
{
	[Token(Token = "0x600086D")]
	[Address(RVA = "0xE9CEF4", Offset = "0xE9CEF4", VA = "0xE9CEF4")]
	public static float[,] MatrixInverse(float[,] matrix)
	{
		return null;
	}

	[Token(Token = "0x600086E")]
	[Address(RVA = "0xE9F834", Offset = "0xE9F834", VA = "0xE9F834")]
	private static int MatrixDecompose(float[,] m, out float[,] lum, out int[] perm)
	{
		return default(int);
	}

	[Token(Token = "0x600086F")]
	[Address(RVA = "0xE9FCB8", Offset = "0xE9FCB8", VA = "0xE9FCB8")]
	private static float[] Helper(float[,] luMatrix, float[] b)
	{
		return null;
	}

	[Token(Token = "0x6000870")]
	[Address(RVA = "0xE9FEFC", Offset = "0xE9FEFC", VA = "0xE9FEFC")]
	private static float[] Slice2DArrayDimension(float[,] inputArray, int dimension)
	{
		return null;
	}

	[Token(Token = "0x6000871")]
	[Address(RVA = "0xEA0018", Offset = "0xEA0018", VA = "0xEA0018")]
	private static float[,] OverwriteRowIn2DArray(float[,] inputArray, float[] row, int dimension)
	{
		return null;
	}

	[Token(Token = "0x6000872")]
	[Address(RVA = "0xE9D168", Offset = "0xE9D168", VA = "0xE9D168")]
	public static float[,] MatrixMultiplication(float[,] firstMatrix, float[,] secondMatrix)
	{
		return null;
	}

	[Token(Token = "0x6000873")]
	[Address(RVA = "0xEA00F0", Offset = "0xEA00F0", VA = "0xEA00F0")]
	public static float[][,] DolittleMatrixDecomposition(float[,] matrix)
	{
		return null;
	}

	[Token(Token = "0x6000874")]
	[Address(RVA = "0xEA050C", Offset = "0xEA050C", VA = "0xEA050C")]
	public static float[] RoundFloatsToDecimalPlace(float[] rawArray, int targetPlaces)
	{
		return null;
	}

	[Token(Token = "0x6000875")]
	[Address(RVA = "0xE9D4F8", Offset = "0xE9D4F8", VA = "0xE9D4F8")]
	public static float FindStdNrmZFromPercentileFactor(float percentileFactor, float baseZMag, float deltaZ)
	{
		return default(float);
	}

	[Token(Token = "0x6000876")]
	[Address(RVA = "0xEA060C", Offset = "0xEA060C", VA = "0xEA060C")]
	public static float FindPercentileFactorFromStdNrmZ(float targStdNrmZ, float baseZMag, float deltaZ)
	{
		return default(float);
	}

	[Token(Token = "0x6000877")]
	[Address(RVA = "0xEA06A0", Offset = "0xEA06A0", VA = "0xEA06A0")]
	public static float FindCentroidDeviation(List<Vector3> points, Vector3 centroid)
	{
		return default(float);
	}

	[Token(Token = "0x6000878")]
	[Address(RVA = "0xEA0888", Offset = "0xEA0888", VA = "0xEA0888")]
	public static Vector3 FindCentroidFromPoints(List<Vector3> points)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000879")]
	[Address(RVA = "0xEA0A74", Offset = "0xEA0A74", VA = "0xEA0A74")]
	public static float FindMean(float[] numberSet)
	{
		return default(float);
	}

	[Token(Token = "0x600087A")]
	[Address(RVA = "0xEA0B08", Offset = "0xEA0B08", VA = "0xEA0B08")]
	public static float[] FindMeanAndStndDev(float[] numberSet)
	{
		return null;
	}

	[Token(Token = "0x600087B")]
	[Address(RVA = "0xEA0C70", Offset = "0xEA0C70", VA = "0xEA0C70")]
	public static float[] FindStatsSet(float[] numberSet)
	{
		return null;
	}

	[Token(Token = "0x600087C")]
	[Address(RVA = "0xEA0C30", Offset = "0xEA0C30", VA = "0xEA0C30")]
	public static float GetStdDevFromVarSumAndSetSize(float varSum, int setCount)
	{
		return default(float);
	}

	[Token(Token = "0x600087D")]
	[Address(RVA = "0xEA10C0", Offset = "0xEA10C0", VA = "0xEA10C0")]
	public static float GetMedian(float[] numberSet)
	{
		return default(float);
	}

	[Token(Token = "0x600087E")]
	[Address(RVA = "0xEA113C", Offset = "0xEA113C", VA = "0xEA113C")]
	public static float[] FindMeanAndStandardDeviationRemovingOutliers(float[] numberSet, float outlierStdDevThreshold, int minObsCount)
	{
		return null;
	}

	[Token(Token = "0x600087F")]
	[Address(RVA = "0xEA1358", Offset = "0xEA1358", VA = "0xEA1358")]
	public static List<float> AddNewValueToSetAndRemoveMostOutlyingValue(List<float> currentSet, float newValue)
	{
		return null;
	}

	[Token(Token = "0x6000880")]
	[Address(RVA = "0xEA14F0", Offset = "0xEA14F0", VA = "0xEA14F0")]
	public static float[] FindMeanAndStndDev(double[] numberSet)
	{
		return null;
	}

	[Token(Token = "0x6000881")]
	[Address(RVA = "0xEA1598", Offset = "0xEA1598", VA = "0xEA1598")]
	public static float[] FindQuadraticRoots(float a, float b, float c)
	{
		return null;
	}

	[Token(Token = "0x6000882")]
	[Address(RVA = "0xEA0AA0", Offset = "0xEA0AA0", VA = "0xEA0AA0")]
	public static float SetNaNToZero(float refValue)
	{
		return default(float);
	}

	[Token(Token = "0x6000883")]
	[Address(RVA = "0xEA1674", Offset = "0xEA1674", VA = "0xEA1674")]
	public static List<Vector3> FindKinematicArc(int verticesCount, bool shortRun, Vector3 origin, Vector3 launchVelocity, float yAccel, float targetY)
	{
		return null;
	}

	[Token(Token = "0x6000884")]
	[Address(RVA = "0xEA1938", Offset = "0xEA1938", VA = "0xEA1938")]
	public static List<Vector3> GetPointsAlongCubicBezierCurve(int verticesCount, Vector3 origin, Vector3 orginHandle, Vector3 destination, Vector3 destinationHandle)
	{
		return null;
	}

	[Token(Token = "0x6000885")]
	[Address(RVA = "0xEA1BB8", Offset = "0xEA1BB8", VA = "0xEA1BB8")]
	public static Vector2 ProjectUnitRayOntoRotatedPlane(Vector2 projVectorDirection, Vector2 spaceVectorDirection)
	{
		return default(Vector2);
	}

	[Token(Token = "0x6000886")]
	[Address(RVA = "0xEA1BD4", Offset = "0xEA1BD4", VA = "0xEA1BD4")]
	public static Vector2 ProjectRotatedUnitRayOntoWorldPlane(Vector2 projVectorDirection, Vector2 spaceVectorDirection)
	{
		return default(Vector2);
	}

	[Token(Token = "0x6000887")]
	[Address(RVA = "0xEA1BF0", Offset = "0xEA1BF0", VA = "0xEA1BF0")]
	public static Vector2 ClampRotationOfVectorRelativeToAnother(float rotRefParallelDotMin, Vector2 refVectorDirection, Vector2 rotatedVector)
	{
		return default(Vector2);
	}

	[Token(Token = "0x6000888")]
	[Address(RVA = "0xEA1E1C", Offset = "0xEA1E1C", VA = "0xEA1E1C")]
	public static Vector2 ProjectVectorOntoEllipse(Vector2 vectorToProjectDirection, Vector2 ellipseXAxisDirection, Vector2 ellipseRunAndRiseMagnitudes)
	{
		return default(Vector2);
	}

	[Token(Token = "0x6000889")]
	[Address(RVA = "0xEA2028", Offset = "0xEA2028", VA = "0xEA2028")]
	public static List<Vector3> GetParabolaBetweenPoints(Vector3 start, Vector3 end, float height, int resolution)
	{
		return null;
	}

	[Token(Token = "0x600088A")]
	[Address(RVA = "0xEA2194", Offset = "0xEA2194", VA = "0xEA2194")]
	public static Vector3 GetPointOnParabola(Vector3 start, Vector3 end, float height, float t)
	{
		return default(Vector3);
	}
}
[Token(Token = "0x20001CC")]
public class MemorizationScoreUI : MonoBehaviour
{
	[Token(Token = "0x4000977")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TextMeshPro deckName;

	[Token(Token = "0x4000978")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextMeshPro percentageLabel;

	[Token(Token = "0x4000979")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Renderer progressBarRenderer;

	[Token(Token = "0x600088B")]
	[Address(RVA = "0xEA23B4", Offset = "0xEA23B4", VA = "0xEA23B4")]
	public void UpdateScore(SerializableDeck deck)
	{
	}

	[Token(Token = "0x600088C")]
	[Address(RVA = "0xEA25D0", Offset = "0xEA25D0", VA = "0xEA25D0")]
	public MemorizationScoreUI()
	{
	}
}
[Token(Token = "0x20001CD")]
[RequireComponent(typeof(MeshFilter))]
public class MeshInverter : MonoBehaviour
{
	[Token(Token = "0x600088D")]
	[Address(RVA = "0xEA25D8", Offset = "0xEA25D8", VA = "0xEA25D8")]
	private void Start()
	{
	}

	[Token(Token = "0x600088E")]
	[Address(RVA = "0xEA2838", Offset = "0xEA2838", VA = "0xEA2838")]
	public MeshInverter()
	{
	}
}
[Token(Token = "0x20001CE")]
public class BrainControl : MonoBehaviour
{
	[Token(Token = "0x20001CF")]
	[CompilerGenerated]
	private sealed class <DoReturnToHead>d__10 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400097F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000980")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000981")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BrainControl <>4__this;

		[Token(Token = "0x4000982")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GameObject <tempBrainParent>5__2;

		[Token(Token = "0x170000FB")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600089C")]
			[Address(RVA = "0xEA38F0", Offset = "0xEA38F0", VA = "0xEA38F0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000FC")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600089E")]
			[Address(RVA = "0xEA3938", Offset = "0xEA3938", VA = "0xEA3938", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000899")]
		[Address(RVA = "0xEA2A1C", Offset = "0xEA2A1C", VA = "0xEA2A1C")]
		[DebuggerHidden]
		public <DoReturnToHead>d__10(int <>1__state)
		{
		}

		[Token(Token = "0x600089A")]
		[Address(RVA = "0xEA2D88", Offset = "0xEA2D88", VA = "0xEA2D88", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600089B")]
		[Address(RVA = "0xEA2D8C", Offset = "0xEA2D8C", VA = "0xEA2D8C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600089D")]
		[Address(RVA = "0xEA38F8", Offset = "0xEA38F8", VA = "0xEA38F8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001D0")]
	[CompilerGenerated]
	private sealed class <DoJumpToTarget>d__11 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000983")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000984")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000985")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BrainControl <>4__this;

		[Token(Token = "0x4000986")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GameObject <tempBrainParent>5__2;

		[Token(Token = "0x170000FD")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60008A2")]
			[Address(RVA = "0xEA44B0", Offset = "0xEA44B0", VA = "0xEA44B0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000FE")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60008A4")]
			[Address(RVA = "0xEA44F8", Offset = "0xEA44F8", VA = "0xEA44F8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600089F")]
		[Address(RVA = "0xEA2AB8", Offset = "0xEA2AB8", VA = "0xEA2AB8")]
		[DebuggerHidden]
		public <DoJumpToTarget>d__11(int <>1__state)
		{
		}

		[Token(Token = "0x60008A0")]
		[Address(RVA = "0xEA3940", Offset = "0xEA3940", VA = "0xEA3940", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60008A1")]
		[Address(RVA = "0xEA3944", Offset = "0xEA3944", VA = "0xEA3944", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60008A3")]
		[Address(RVA = "0xEA44B8", Offset = "0xEA44B8", VA = "0xEA44B8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400097A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Rigidbody rigidBody;

	[Token(Token = "0x400097B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Collider thisCollider;

	[Token(Token = "0x400097C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Transform thisTransform;

	[Token(Token = "0x400097D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform origParent;

	[Token(Token = "0x400097E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Transform target;

	[Token(Token = "0x600088F")]
	[Address(RVA = "0xEA2840", Offset = "0xEA2840", VA = "0xEA2840")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000890")]
	[Address(RVA = "0xEA2898", Offset = "0xEA2898", VA = "0xEA2898")]
	private void Start()
	{
	}

	[Token(Token = "0x6000891")]
	[Address(RVA = "0xEA28EC", Offset = "0xEA28EC", VA = "0xEA28EC")]
	public void EnableGravity()
	{
	}

	[Token(Token = "0x6000892")]
	[Address(RVA = "0xEA2924", Offset = "0xEA2924", VA = "0xEA2924")]
	public void DisableGravity()
	{
	}

	[Token(Token = "0x6000893")]
	[Address(RVA = "0xEA295C", Offset = "0xEA295C", VA = "0xEA295C")]
	public void ReturnToHead()
	{
	}

	[Token(Token = "0x6000894")]
	[Address(RVA = "0xEA29A8", Offset = "0xEA29A8", VA = "0xEA29A8")]
	[IteratorStateMachine(typeof(<DoReturnToHead>d__10))]
	private IEnumerator DoReturnToHead()
	{
		return null;
	}

	[Token(Token = "0x6000895")]
	[Address(RVA = "0xEA2A44", Offset = "0xEA2A44", VA = "0xEA2A44")]
	[IteratorStateMachine(typeof(<DoJumpToTarget>d__11))]
	private IEnumerator DoJumpToTarget()
	{
		return null;
	}

	[Token(Token = "0x6000896")]
	[Address(RVA = "0xEA2AE0", Offset = "0xEA2AE0", VA = "0xEA2AE0")]
	public void SetTarget(Transform target)
	{
	}

	[Token(Token = "0x6000897")]
	[Address(RVA = "0xEA2BCC", Offset = "0xEA2BCC", VA = "0xEA2BCC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000898")]
	[Address(RVA = "0xEA2D80", Offset = "0xEA2D80", VA = "0xEA2D80")]
	public BrainControl()
	{
	}
}
[Token(Token = "0x20001D1")]
public class GunController : MonoBehaviour
{
	[Token(Token = "0x20001D2")]
	[CompilerGenerated]
	private sealed class <Start>d__21 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400099C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400099D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400099E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GunController <>4__this;

		[Token(Token = "0x170000FF")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60008B7")]
			[Address(RVA = "0xEA64E4", Offset = "0xEA64E4", VA = "0xEA64E4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000100")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60008B9")]
			[Address(RVA = "0xEA652C", Offset = "0xEA652C", VA = "0xEA652C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60008B4")]
		[Address(RVA = "0xEA6128", Offset = "0xEA6128", VA = "0xEA6128")]
		[DebuggerHidden]
		public <Start>d__21(int <>1__state)
		{
		}

		[Token(Token = "0x60008B5")]
		[Address(RVA = "0xEA6150", Offset = "0xEA6150", VA = "0xEA6150", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60008B6")]
		[Address(RVA = "0xEA6154", Offset = "0xEA6154", VA = "0xEA6154", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60008B8")]
		[Address(RVA = "0xEA64EC", Offset = "0xEA64EC", VA = "0xEA64EC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001D3")]
	[CompilerGenerated]
	private sealed class <WaitAndReturn>d__22 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400099F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40009A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40009A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GunController <>4__this;

		[Token(Token = "0x17000101")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60008BD")]
			[Address(RVA = "0xEA660C", Offset = "0xEA660C", VA = "0xEA660C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000102")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60008BF")]
			[Address(RVA = "0xEA6654", Offset = "0xEA6654", VA = "0xEA6654", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60008BA")]
		[Address(RVA = "0xEA6534", Offset = "0xEA6534", VA = "0xEA6534")]
		[DebuggerHidden]
		public <WaitAndReturn>d__22(int <>1__state)
		{
		}

		[Token(Token = "0x60008BB")]
		[Address(RVA = "0xEA655C", Offset = "0xEA655C", VA = "0xEA655C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60008BC")]
		[Address(RVA = "0xEA6560", Offset = "0xEA6560", VA = "0xEA6560", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60008BE")]
		[Address(RVA = "0xEA6614", Offset = "0xEA6614", VA = "0xEA6614", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001D4")]
	[CompilerGenerated]
	private sealed class <ReloadGunAfterTime>d__28 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40009A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40009A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40009A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float time;

		[Token(Token = "0x40009A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GunController <>4__this;

		[Token(Token = "0x17000103")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60008C3")]
			[Address(RVA = "0xEA6748", Offset = "0xEA6748", VA = "0xEA6748", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000104")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60008C5")]
			[Address(RVA = "0xEA6790", Offset = "0xEA6790", VA = "0xEA6790", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60008C0")]
		[Address(RVA = "0xEA665C", Offset = "0xEA665C", VA = "0xEA665C")]
		[DebuggerHidden]
		public <ReloadGunAfterTime>d__28(int <>1__state)
		{
		}

		[Token(Token = "0x60008C1")]
		[Address(RVA = "0xEA6684", Offset = "0xEA6684", VA = "0xEA6684", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60008C2")]
		[Address(RVA = "0xEA6688", Offset = "0xEA6688", VA = "0xEA6688", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60008C4")]
		[Address(RVA = "0xEA6750", Offset = "0xEA6750", VA = "0xEA6750", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000987")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject gunAimer;

	[Token(Token = "0x4000988")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject rayProjectile;

	[Token(Token = "0x4000989")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject gunMuzzleFlash;

	[Token(Token = "0x400098A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject energySourceParticles;

	[Token(Token = "0x400098B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject brainTractorBeam;

	[Token(Token = "0x400098C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AudioSource brainAudio;

	[Token(Token = "0x400098D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject spawnedBrain;

	[Token(Token = "0x400098E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject lockedGunObject;

	[Token(Token = "0x400098F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject unlockedGunObject;

	[Token(Token = "0x4000990")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public DropObjectEffect dropObjectEffect;

	[Token(Token = "0x4000991")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private SelectableAnswerObject currentlyHighlighted;

	[Token(Token = "0x4000992")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private SelectableAnswerObject selectedAnswer;

	[Token(Token = "0x4000993")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Grabbable grabbable;

	[Token(Token = "0x4000994")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private BrainControl brainControl;

	[Token(Token = "0x4000995")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private GameObject shotProjectileObj;

	[Token(Token = "0x4000996")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private bool grabbedFromMenu;

	[Token(Token = "0x4000997")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
	private bool hasFired;

	[Token(Token = "0x4000998")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Collider brainCollider;

	[Token(Token = "0x4000999")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private Autohand.Hand hand;

	[Token(Token = "0x400099A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private bool minigameDisabledForTossUpSpin;

	[Token(Token = "0x400099B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private WaitForSeconds poofDelay;

	[Token(Token = "0x60008A5")]
	[Address(RVA = "0xEA4500", Offset = "0xEA4500", VA = "0xEA4500")]
	[IteratorStateMachine(typeof(<Start>d__21))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x60008A6")]
	[Address(RVA = "0xEA4574", Offset = "0xEA4574", VA = "0xEA4574")]
	[IteratorStateMachine(typeof(<WaitAndReturn>d__22))]
	private IEnumerator WaitAndReturn()
	{
		return null;
	}

	[Token(Token = "0x60008A7")]
	[Address(RVA = "0xEA45E8", Offset = "0xEA45E8", VA = "0xEA45E8")]
	private void LockGun(bool locked)
	{
	}

	[Token(Token = "0x60008A8")]
	[Address(RVA = "0xEA4648", Offset = "0xEA4648", VA = "0xEA4648")]
	public void OnTriggerButtonPressedLeft()
	{
	}

	[Token(Token = "0x60008A9")]
	[Address(RVA = "0xEA48CC", Offset = "0xEA48CC", VA = "0xEA48CC")]
	public void OnTriggerButtonPressedRight()
	{
	}

	[Token(Token = "0x60008AA")]
	[Address(RVA = "0xEA4958", Offset = "0xEA4958", VA = "0xEA4958")]
	public void ResetBrain()
	{
	}

	[Token(Token = "0x60008AB")]
	[Address(RVA = "0xEA46D4", Offset = "0xEA46D4", VA = "0xEA46D4")]
	public void ShootProjectile()
	{
	}

	[Token(Token = "0x60008AC")]
	[Address(RVA = "0xEA4A00", Offset = "0xEA4A00", VA = "0xEA4A00")]
	[IteratorStateMachine(typeof(<ReloadGunAfterTime>d__28))]
	private IEnumerator ReloadGunAfterTime(float time)
	{
		return null;
	}

	[Token(Token = "0x60008AD")]
	[Address(RVA = "0xEA4A84", Offset = "0xEA4A84", VA = "0xEA4A84")]
	public GunController()
	{
	}
}
[Token(Token = "0x20001D5")]
public class MultipleChoiceQuestion
{
	[Token(Token = "0x40009A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Guid questionId;

	[Token(Token = "0x40009A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string text;

	[Token(Token = "0x40009A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AssessmentQuestionType questionType;

	[Token(Token = "0x40009A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ImageMeta imageMeta;

	[Token(Token = "0x40009AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public List<MultipleChoiceAnswer> answers;

	[Token(Token = "0x60008C6")]
	[Address(RVA = "0xEA6798", Offset = "0xEA6798", VA = "0xEA6798")]
	public MultipleChoiceQuestion(APIGetMultipleChoiceForDeck.ResponseMultipleChoiceQuestion responseMultipleChoiceQuestion)
	{
	}

	[Token(Token = "0x60008C7")]
	[Address(RVA = "0xEA6A54", Offset = "0xEA6A54", VA = "0xEA6A54")]
	public MultipleChoiceQuestion(Guid cardId, string text, AssessmentQuestionType questionType)
	{
	}

	[Token(Token = "0x60008C8")]
	[Address(RVA = "0xEA6B18", Offset = "0xEA6B18", VA = "0xEA6B18")]
	public void AddMultipleChoiceAnswer(CardPackage card, string text, bool correctAnswer)
	{
	}
}
[Token(Token = "0x20001D6")]
public class MultipleChoiceAnswer
{
	[Token(Token = "0x40009AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public CardPackage card;

	[Token(Token = "0x40009AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string text;

	[Token(Token = "0x40009AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool isRightAnswer;

	[Token(Token = "0x40009AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ImageMeta imageMeta;

	[Token(Token = "0x60008C9")]
	[Address(RVA = "0xEA69A8", Offset = "0xEA69A8", VA = "0xEA69A8")]
	public MultipleChoiceAnswer(APIGetMultipleChoiceForDeck.ResponseMultipleChoiceAnswer responseMultipleChoiceAnswer)
	{
	}

	[Token(Token = "0x60008CA")]
	[Address(RVA = "0xEA6C1C", Offset = "0xEA6C1C", VA = "0xEA6C1C")]
	public MultipleChoiceAnswer(CardPackage card, string text, bool isRightAnswer)
	{
	}
}
[Token(Token = "0x20001D7")]
public class MultipleChoiceObject : MonoBehaviour
{
	[Token(Token = "0x40009AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SelectableAnswerObject[] selectableAnswerObjects;

	[Token(Token = "0x40009B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextMeshPro cardText;

	[Token(Token = "0x40009B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TextMeshPro deckName;

	[Token(Token = "0x40009B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public TextMeshPro score;

	[Token(Token = "0x60008CB")]
	[Address(RVA = "0xEA6C74", Offset = "0xEA6C74", VA = "0xEA6C74")]
	public MultipleChoiceObject()
	{
	}
}
[Token(Token = "0x20001D8")]
public class ProjectileMover : MonoBehaviour
{
	[Token(Token = "0x20001D9")]
	[CompilerGenerated]
	private sealed class <Start>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40009B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40009B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40009B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ProjectileMover <>4__this;

		[Token(Token = "0x17000105")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60008D3")]
			[Address(RVA = "0xEA6FD4", Offset = "0xEA6FD4", VA = "0xEA6FD4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000106")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60008D5")]
			[Address(RVA = "0xEA701C", Offset = "0xEA701C", VA = "0xEA701C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60008D0")]
		[Address(RVA = "0xEA6CF0", Offset = "0xEA6CF0", VA = "0xEA6CF0")]
		[DebuggerHidden]
		public <Start>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x60008D1")]
		[Address(RVA = "0xEA6EB8", Offset = "0xEA6EB8", VA = "0xEA6EB8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60008D2")]
		[Address(RVA = "0xEA6EBC", Offset = "0xEA6EBC", VA = "0xEA6EBC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60008D4")]
		[Address(RVA = "0xEA6FDC", Offset = "0xEA6FDC", VA = "0xEA6FDC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40009B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float speed;

	[Token(Token = "0x40009B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float lifetime;

	[Token(Token = "0x40009B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject hitEffect;

	[Token(Token = "0x40009B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Transform thisTransform;

	[Token(Token = "0x60008CC")]
	[Address(RVA = "0xEA6C7C", Offset = "0xEA6C7C", VA = "0xEA6C7C")]
	[IteratorStateMachine(typeof(<Start>d__4))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x60008CD")]
	[Address(RVA = "0xEA6D18", Offset = "0xEA6D18", VA = "0xEA6D18")]
	private void Update()
	{
	}

	[Token(Token = "0x60008CE")]
	[Address(RVA = "0xEA6D58", Offset = "0xEA6D58", VA = "0xEA6D58")]
	private void OnCollisionEnter(Collision other)
	{
	}

	[Token(Token = "0x60008CF")]
	[Address(RVA = "0xEA6EB0", Offset = "0xEA6EB0", VA = "0xEA6EB0")]
	public ProjectileMover()
	{
	}
}
[Token(Token = "0x20001DA")]
public class SelectableAnswerObject : MonoBehaviour
{
	[Token(Token = "0x40009BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject selectParticles;

	[Token(Token = "0x40009BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform quadCenter;

	[Token(Token = "0x40009BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Action<SelectableAnswerObject> OnSelected;

	[Token(Token = "0x40009BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public MultipleChoiceQuestion question;

	[Token(Token = "0x40009BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int thisAnswerIndex;

	[Token(Token = "0x40009BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Renderer backgroundRenderer;

	[Token(Token = "0x40009C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Material selectedMat;

	[Token(Token = "0x40009C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Material deselectedMat;

	[Token(Token = "0x40009C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public TextMeshPro textField;

	[Token(Token = "0x40009C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Transform spawnPoint;

	[Token(Token = "0x40009C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public bool canBeSelected;

	[Token(Token = "0x60008D6")]
	[Address(RVA = "0xEA7024", Offset = "0xEA7024", VA = "0xEA7024")]
	private void OnCollisionEnter(Collision other)
	{
	}

	[Token(Token = "0x60008D7")]
	[Address(RVA = "0xEA70C0", Offset = "0xEA70C0", VA = "0xEA70C0")]
	public void Highlight()
	{
	}

	[Token(Token = "0x60008D8")]
	[Address(RVA = "0xEA71C0", Offset = "0xEA71C0", VA = "0xEA71C0")]
	public void Unhighlight()
	{
	}

	[Token(Token = "0x60008D9")]
	[Address(RVA = "0xEA7288", Offset = "0xEA7288", VA = "0xEA7288")]
	public MultipleChoiceAnswer GetAnswer()
	{
		return null;
	}

	[Token(Token = "0x60008DA")]
	[Address(RVA = "0xEA72E4", Offset = "0xEA72E4", VA = "0xEA72E4")]
	public SelectableAnswerObject()
	{
	}
}
[Token(Token = "0x20001DB")]
public class VictoryPlaqueController : MonoBehaviour
{
	[Token(Token = "0x20001DC")]
	[CompilerGenerated]
	private sealed class <Start>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40009CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40009CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40009CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public VictoryPlaqueController <>4__this;

		[Token(Token = "0x17000107")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60008E1")]
			[Address(RVA = "0xEA7AF4", Offset = "0xEA7AF4", VA = "0xEA7AF4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000108")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60008E3")]
			[Address(RVA = "0xEA7B3C", Offset = "0xEA7B3C", VA = "0xEA7B3C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60008DE")]
		[Address(RVA = "0xEA7360", Offset = "0xEA7360", VA = "0xEA7360")]
		[DebuggerHidden]
		public <Start>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x60008DF")]
		[Address(RVA = "0xEA74C8", Offset = "0xEA74C8", VA = "0xEA74C8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60008E0")]
		[Address(RVA = "0xEA74CC", Offset = "0xEA74CC", VA = "0xEA74CC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60008E2")]
		[Address(RVA = "0xEA7AFC", Offset = "0xEA7AFC", VA = "0xEA7AFC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40009C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TextMeshPro correctLabel;

	[Token(Token = "0x40009C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextMeshPro percentLabel;

	[Token(Token = "0x40009C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject finishParticles;

	[Token(Token = "0x40009C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioSource audioSource;

	[Token(Token = "0x40009C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int finalSetScore;

	[Token(Token = "0x40009CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float lifetime;

	[Token(Token = "0x60008DB")]
	[Address(RVA = "0xEA72EC", Offset = "0xEA72EC", VA = "0xEA72EC")]
	[IteratorStateMachine(typeof(<Start>d__6))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x60008DC")]
	[Address(RVA = "0xEA7388", Offset = "0xEA7388", VA = "0xEA7388")]
	public void SetScore(int correct, int total)
	{
	}

	[Token(Token = "0x60008DD")]
	[Address(RVA = "0xEA74C0", Offset = "0xEA74C0", VA = "0xEA74C0")]
	public VictoryPlaqueController()
	{
	}
}
[Token(Token = "0x20001DD")]
public class MusicManager : MonoBehaviour
{
	[Token(Token = "0x20001DE")]
	[CompilerGenerated]
	private sealed class <Start>d__5 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40009D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40009D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40009D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MusicManager <>4__this;

		[Token(Token = "0x17000109")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60008EC")]
			[Address(RVA = "0xEA7FC4", Offset = "0xEA7FC4", VA = "0xEA7FC4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700010A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60008EE")]
			[Address(RVA = "0xEA800C", Offset = "0xEA800C", VA = "0xEA800C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60008E9")]
		[Address(RVA = "0xEA7BB8", Offset = "0xEA7BB8", VA = "0xEA7BB8")]
		[DebuggerHidden]
		public <Start>d__5(int <>1__state)
		{
		}

		[Token(Token = "0x60008EA")]
		[Address(RVA = "0xEA7E40", Offset = "0xEA7E40", VA = "0xEA7E40", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60008EB")]
		[Address(RVA = "0xEA7E44", Offset = "0xEA7E44", VA = "0xEA7E44", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60008ED")]
		[Address(RVA = "0xEA7FCC", Offset = "0xEA7FCC", VA = "0xEA7FCC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001DF")]
	[CompilerGenerated]
	private sealed class <co_MusicLoop>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40009D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40009D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40009D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MusicManager <>4__this;

		[Token(Token = "0x40009D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<AudioClip> <randomizedPlaylist>5__2;

		[Token(Token = "0x40009DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<AudioClip>.Enumerator <>7__wrap2;

		[Token(Token = "0x1700010B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60008F3")]
			[Address(RVA = "0xEA8310", Offset = "0xEA8310", VA = "0xEA8310", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700010C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60008F5")]
			[Address(RVA = "0xEA8358", Offset = "0xEA8358", VA = "0xEA8358", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60008EF")]
		[Address(RVA = "0xEA7C54", Offset = "0xEA7C54", VA = "0xEA7C54")]
		[DebuggerHidden]
		public <co_MusicLoop>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x60008F0")]
		[Address(RVA = "0xEA8014", Offset = "0xEA8014", VA = "0xEA8014", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60008F1")]
		[Address(RVA = "0xEA8030", Offset = "0xEA8030", VA = "0xEA8030", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60008F2")]
		[Address(RVA = "0xEA82C0", Offset = "0xEA82C0", VA = "0xEA82C0")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x60008F4")]
		[Address(RVA = "0xEA8318", Offset = "0xEA8318", VA = "0xEA8318", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40009CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioSource audioSource;

	[Token(Token = "0x40009CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioClip[] music;

	[Token(Token = "0x40009D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioClip creditsMusic;

	[Token(Token = "0x40009D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Coroutine musicLoop;

	[Token(Token = "0x40009D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int songsPlayed;

	[Token(Token = "0x60008E4")]
	[Address(RVA = "0xEA7B44", Offset = "0xEA7B44", VA = "0xEA7B44")]
	[IteratorStateMachine(typeof(<Start>d__5))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x60008E5")]
	[Address(RVA = "0xEA7BE0", Offset = "0xEA7BE0", VA = "0xEA7BE0")]
	[IteratorStateMachine(typeof(<co_MusicLoop>d__6))]
	private IEnumerator co_MusicLoop()
	{
		return null;
	}

	[Token(Token = "0x60008E6")]
	[Address(RVA = "0xEA7C7C", Offset = "0xEA7C7C", VA = "0xEA7C7C")]
	private List<AudioClip> RandomizePlaylist()
	{
		return null;
	}

	[Token(Token = "0x60008E7")]
	[Address(RVA = "0xEA7DB0", Offset = "0xEA7DB0", VA = "0xEA7DB0")]
	private void PlayCreditsMusic(bool enable)
	{
	}

	[Token(Token = "0x60008E8")]
	[Address(RVA = "0xEA7E38", Offset = "0xEA7E38", VA = "0xEA7E38")]
	public MusicManager()
	{
	}
}
[Token(Token = "0x20001E1")]
public class NightLilyController : MonoBehaviour
{
	[Token(Token = "0x40009DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Animator animator;

	[Token(Token = "0x40009DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject fruit;

	[Token(Token = "0x60008F9")]
	[Address(RVA = "0xEA83E0", Offset = "0xEA83E0", VA = "0xEA83E0")]
	public void Start()
	{
	}

	[Token(Token = "0x60008FA")]
	[Address(RVA = "0xEA8438", Offset = "0xEA8438", VA = "0xEA8438")]
	public NightLilyController()
	{
	}
}
[Token(Token = "0x20001E2")]
public class ObjectDisabler : MonoBehaviour
{
	[Token(Token = "0x40009DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] group1;

	[Token(Token = "0x40009E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject[] group2;

	[Token(Token = "0x40009E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject[] group3;

	[Token(Token = "0x40009E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int gn1;

	[Token(Token = "0x40009E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public int gn2;

	[Token(Token = "0x40009E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int gn3;

	[Token(Token = "0x40009E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private bool group1Enabled;

	[Token(Token = "0x40009E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
	private bool group2Enabled;

	[Token(Token = "0x40009E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3E")]
	private bool group3Enabled;

	[Token(Token = "0x60008FB")]
	[Address(RVA = "0xEA8440", Offset = "0xEA8440", VA = "0xEA8440")]
	private void Start()
	{
	}

	[Token(Token = "0x60008FC")]
	[Address(RVA = "0xEA8508", Offset = "0xEA8508", VA = "0xEA8508")]
	public ObjectDisabler()
	{
	}
}
[Token(Token = "0x20001E3")]
public class ObjectReveal : MonoBehaviour
{
	[Token(Token = "0x60008FE")]
	[Address(RVA = "0xEA8678", Offset = "0xEA8678", VA = "0xEA8678")]
	private void Start()
	{
	}

	[Token(Token = "0x60008FF")]
	[Address(RVA = "0xEA867C", Offset = "0xEA867C", VA = "0xEA867C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000900")]
	[Address(RVA = "0xEA8680", Offset = "0xEA8680", VA = "0xEA8680")]
	public ObjectReveal()
	{
	}
}
[Token(Token = "0x20001E4")]
public class ObjectRevealer : MonoBehaviour
{
	[Token(Token = "0x40009E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform forwardPointer;

	[Token(Token = "0x40009E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float ammountDissolved;

	[Token(Token = "0x40009EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float duration;

	[Token(Token = "0x40009EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Material dissolveShader;

	[Token(Token = "0x40009EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool revealed;

	[Token(Token = "0x40009ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Transform targetObject;

	[Token(Token = "0x40009EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private LayerMask revealerMask;

	[Token(Token = "0x6000901")]
	[Address(RVA = "0xEA8688", Offset = "0xEA8688", VA = "0xEA8688")]
	private void Start()
	{
	}

	[Token(Token = "0x6000902")]
	[Address(RVA = "0xEA8694", Offset = "0xEA8694", VA = "0xEA8694")]
	public void CheckObjectForClue()
	{
	}

	[Token(Token = "0x6000903")]
	[Address(RVA = "0xEA8820", Offset = "0xEA8820", VA = "0xEA8820")]
	private void Update()
	{
	}

	[Token(Token = "0x6000904")]
	[Address(RVA = "0xEA8930", Offset = "0xEA8930", VA = "0xEA8930")]
	public ObjectRevealer()
	{
	}
}
[Token(Token = "0x20001E5")]
public class OculusCharacterHeightFixer : MonoBehaviour
{
	[Token(Token = "0x6000905")]
	[Address(RVA = "0xEA8940", Offset = "0xEA8940", VA = "0xEA8940")]
	private void Start()
	{
	}

	[Token(Token = "0x6000906")]
	[Address(RVA = "0xEA89E0", Offset = "0xEA89E0", VA = "0xEA89E0")]
	public OculusCharacterHeightFixer()
	{
	}
}
[Token(Token = "0x20001E6")]
public class OnboardingController : Singleton<OnboardingController>
{
	[Token(Token = "0x20001E7")]
	[CompilerGenerated]
	private sealed class <co_WaitAndTryStartOnbo>d__32 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000A0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public OnboardingController <>4__this;

		[Token(Token = "0x1700010D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600094D")]
			[Address(RVA = "0xEAD940", Offset = "0xEAD940", VA = "0xEAD940", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700010E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600094F")]
			[Address(RVA = "0xEAD988", Offset = "0xEAD988", VA = "0xEAD988", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600094A")]
		[Address(RVA = "0xEA8DE8", Offset = "0xEA8DE8", VA = "0xEA8DE8")]
		[DebuggerHidden]
		public <co_WaitAndTryStartOnbo>d__32(int <>1__state)
		{
		}

		[Token(Token = "0x600094B")]
		[Address(RVA = "0xEAD730", Offset = "0xEAD730", VA = "0xEAD730", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600094C")]
		[Address(RVA = "0xEAD734", Offset = "0xEAD734", VA = "0xEAD734", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600094E")]
		[Address(RVA = "0xEAD948", Offset = "0xEAD948", VA = "0xEAD948", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001E8")]
	[CompilerGenerated]
	private sealed class <co_StartOnboRepeat>d__34 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000A11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public OnboardingController <>4__this;

		[Token(Token = "0x1700010F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000953")]
			[Address(RVA = "0xEADBD0", Offset = "0xEADBD0", VA = "0xEADBD0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000110")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000955")]
			[Address(RVA = "0xEADC18", Offset = "0xEADC18", VA = "0xEADC18", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000950")]
		[Address(RVA = "0xEA8EB0", Offset = "0xEA8EB0", VA = "0xEA8EB0")]
		[DebuggerHidden]
		public <co_StartOnboRepeat>d__34(int <>1__state)
		{
		}

		[Token(Token = "0x6000951")]
		[Address(RVA = "0xEAD990", Offset = "0xEAD990", VA = "0xEAD990", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000952")]
		[Address(RVA = "0xEAD994", Offset = "0xEAD994", VA = "0xEAD994", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000954")]
		[Address(RVA = "0xEADBD8", Offset = "0xEADBD8", VA = "0xEADBD8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001EA")]
	[CompilerGenerated]
	private sealed class <WaitAndPlayExpression>d__40 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000A3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ExpressionAfterTime exp;

		[Token(Token = "0x4000A3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public OnboardingController <>4__this;

		[Token(Token = "0x17000111")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000980")]
			[Address(RVA = "0xEADF24", Offset = "0xEADF24", VA = "0xEADF24", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000112")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000982")]
			[Address(RVA = "0xEADF6C", Offset = "0xEADF6C", VA = "0xEADF6C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600097D")]
		[Address(RVA = "0xEABDF0", Offset = "0xEABDF0", VA = "0xEABDF0")]
		[DebuggerHidden]
		public <WaitAndPlayExpression>d__40(int <>1__state)
		{
		}

		[Token(Token = "0x600097E")]
		[Address(RVA = "0xEADD2C", Offset = "0xEADD2C", VA = "0xEADD2C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600097F")]
		[Address(RVA = "0xEADD30", Offset = "0xEADD30", VA = "0xEADD30", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000981")]
		[Address(RVA = "0xEADF2C", Offset = "0xEADF2C", VA = "0xEADF2C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001EB")]
	[CompilerGenerated]
	private sealed class <OnboardingStart>d__51 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000A3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public OnboardingController <>4__this;

		[Token(Token = "0x17000113")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000986")]
			[Address(RVA = "0xEAE3E4", Offset = "0xEAE3E4", VA = "0xEAE3E4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000114")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000988")]
			[Address(RVA = "0xEAE42C", Offset = "0xEAE42C", VA = "0xEAE42C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000983")]
		[Address(RVA = "0xEAC3D4", Offset = "0xEAC3D4", VA = "0xEAC3D4")]
		[DebuggerHidden]
		public <OnboardingStart>d__51(int <>1__state)
		{
		}

		[Token(Token = "0x6000984")]
		[Address(RVA = "0xEADF74", Offset = "0xEADF74", VA = "0xEADF74", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000985")]
		[Address(RVA = "0xEADF78", Offset = "0xEADF78", VA = "0xEADF78", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000987")]
		[Address(RVA = "0xEAE3EC", Offset = "0xEAE3EC", VA = "0xEAE3EC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001EC")]
	[CompilerGenerated]
	private sealed class <CreateNewLibraryCard>d__52 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000A41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public OnboardingController <>4__this;

		[Token(Token = "0x17000115")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600098C")]
			[Address(RVA = "0xEAE65C", Offset = "0xEAE65C", VA = "0xEAE65C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000116")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600098E")]
			[Address(RVA = "0xEAE6A4", Offset = "0xEAE6A4", VA = "0xEAE6A4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000989")]
		[Address(RVA = "0xEAC3FC", Offset = "0xEAC3FC", VA = "0xEAC3FC")]
		[DebuggerHidden]
		public <CreateNewLibraryCard>d__52(int <>1__state)
		{
		}

		[Token(Token = "0x600098A")]
		[Address(RVA = "0xEAE434", Offset = "0xEAE434", VA = "0xEAE434", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600098B")]
		[Address(RVA = "0xEAE438", Offset = "0xEAE438", VA = "0xEAE438", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600098D")]
		[Address(RVA = "0xEAE664", Offset = "0xEAE664", VA = "0xEAE664", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001ED")]
	[CompilerGenerated]
	private sealed class <InitialLearnAboutCurio>d__53 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000A44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public OnboardingController <>4__this;

		[Token(Token = "0x17000117")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000992")]
			[Address(RVA = "0xEAEC24", Offset = "0xEAEC24", VA = "0xEAEC24", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000118")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000994")]
			[Address(RVA = "0xEAEC6C", Offset = "0xEAEC6C", VA = "0xEAEC6C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600098F")]
		[Address(RVA = "0xEAC424", Offset = "0xEAC424", VA = "0xEAC424")]
		[DebuggerHidden]
		public <InitialLearnAboutCurio>d__53(int <>1__state)
		{
		}

		[Token(Token = "0x6000990")]
		[Address(RVA = "0xEAE6AC", Offset = "0xEAE6AC", VA = "0xEAE6AC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000991")]
		[Address(RVA = "0xEAE6B0", Offset = "0xEAE6B0", VA = "0xEAE6B0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000993")]
		[Address(RVA = "0xEAEC2C", Offset = "0xEAEC2C", VA = "0xEAEC2C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001EE")]
	[CompilerGenerated]
	private sealed class <AppleReset>d__56 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000A47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public OnboardingController <>4__this;

		[Token(Token = "0x17000119")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000998")]
			[Address(RVA = "0xEAEF40", Offset = "0xEAEF40", VA = "0xEAEF40", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700011A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600099A")]
			[Address(RVA = "0xEAEF88", Offset = "0xEAEF88", VA = "0xEAEF88", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000995")]
		[Address(RVA = "0xEAC534", Offset = "0xEAC534", VA = "0xEAC534")]
		[DebuggerHidden]
		public <AppleReset>d__56(int <>1__state)
		{
		}

		[Token(Token = "0x6000996")]
		[Address(RVA = "0xEAEC74", Offset = "0xEAEC74", VA = "0xEAEC74", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000997")]
		[Address(RVA = "0xEAEC78", Offset = "0xEAEC78", VA = "0xEAEC78", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000999")]
		[Address(RVA = "0xEAEF48", Offset = "0xEAEF48", VA = "0xEAEF48", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001EF")]
	[CompilerGenerated]
	private sealed class <LearnAboutNotecardAndFlip>d__58 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000A4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public OnboardingController <>4__this;

		[Token(Token = "0x1700011B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600099E")]
			[Address(RVA = "0xEAF340", Offset = "0xEAF340", VA = "0xEAF340", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700011C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60009A0")]
			[Address(RVA = "0xEAF388", Offset = "0xEAF388", VA = "0xEAF388", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600099B")]
		[Address(RVA = "0xEAC7FC", Offset = "0xEAC7FC", VA = "0xEAC7FC")]
		[DebuggerHidden]
		public <LearnAboutNotecardAndFlip>d__58(int <>1__state)
		{
		}

		[Token(Token = "0x600099C")]
		[Address(RVA = "0xEAEF90", Offset = "0xEAEF90", VA = "0xEAEF90", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600099D")]
		[Address(RVA = "0xEAEF94", Offset = "0xEAEF94", VA = "0xEAEF94", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600099F")]
		[Address(RVA = "0xEAF348", Offset = "0xEAF348", VA = "0xEAF348", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001F0")]
	[CompilerGenerated]
	private sealed class <LearnAboutNotecardRepeat>d__59 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000A4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public OnboardingController <>4__this;

		[Token(Token = "0x1700011D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60009A4")]
			[Address(RVA = "0xEAF704", Offset = "0xEAF704", VA = "0xEAF704", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700011E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60009A6")]
			[Address(RVA = "0xEAF74C", Offset = "0xEAF74C", VA = "0xEAF74C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009A1")]
		[Address(RVA = "0xEAC824", Offset = "0xEAC824", VA = "0xEAC824")]
		[DebuggerHidden]
		public <LearnAboutNotecardRepeat>d__59(int <>1__state)
		{
		}

		[Token(Token = "0x60009A2")]
		[Address(RVA = "0xEAF390", Offset = "0xEAF390", VA = "0xEAF390", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60009A3")]
		[Address(RVA = "0xEAF394", Offset = "0xEAF394", VA = "0xEAF394", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60009A5")]
		[Address(RVA = "0xEAF70C", Offset = "0xEAF70C", VA = "0xEAF70C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001F1")]
	[CompilerGenerated]
	private sealed class <LearnMemorizing>d__61 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000A50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public OnboardingController <>4__this;

		[Token(Token = "0x1700011F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60009AA")]
			[Address(RVA = "0xEAFB20", Offset = "0xEAFB20", VA = "0xEAFB20", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000120")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60009AC")]
			[Address(RVA = "0xEAFB68", Offset = "0xEAFB68", VA = "0xEAFB68", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009A7")]
		[Address(RVA = "0xEAC924", Offset = "0xEAC924", VA = "0xEAC924")]
		[DebuggerHidden]
		public <LearnMemorizing>d__61(int <>1__state)
		{
		}

		[Token(Token = "0x60009A8")]
		[Address(RVA = "0xEAF754", Offset = "0xEAF754", VA = "0xEAF754", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60009A9")]
		[Address(RVA = "0xEAF758", Offset = "0xEAF758", VA = "0xEAF758", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60009AB")]
		[Address(RVA = "0xEAFB28", Offset = "0xEAFB28", VA = "0xEAFB28", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001F2")]
	[CompilerGenerated]
	private sealed class <MemorizeRepeat>d__62 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000A53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public OnboardingController <>4__this;

		[Token(Token = "0x17000121")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60009B0")]
			[Address(RVA = "0xEAFF00", Offset = "0xEAFF00", VA = "0xEAFF00", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000122")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60009B2")]
			[Address(RVA = "0xEAFF48", Offset = "0xEAFF48", VA = "0xEAFF48", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009AD")]
		[Address(RVA = "0xEAC94C", Offset = "0xEAC94C", VA = "0xEAC94C")]
		[DebuggerHidden]
		public <MemorizeRepeat>d__62(int <>1__state)
		{
		}

		[Token(Token = "0x60009AE")]
		[Address(RVA = "0xEAFB70", Offset = "0xEAFB70", VA = "0xEAFB70", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60009AF")]
		[Address(RVA = "0xEAFB74", Offset = "0xEAFB74", VA = "0xEAFB74", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60009B1")]
		[Address(RVA = "0xEAFF08", Offset = "0xEAFF08", VA = "0xEAFF08", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001F3")]
	[CompilerGenerated]
	private sealed class <LearnLibMovement>d__64 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000A56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public OnboardingController <>4__this;

		[Token(Token = "0x4000A57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GameObject <splashEffect>5__2;

		[Token(Token = "0x17000123")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60009B6")]
			[Address(RVA = "0xEB066C", Offset = "0xEB066C", VA = "0xEB066C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000124")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60009B8")]
			[Address(RVA = "0xEB06B4", Offset = "0xEB06B4", VA = "0xEB06B4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009B3")]
		[Address(RVA = "0xEACA9C", Offset = "0xEACA9C", VA = "0xEACA9C")]
		[DebuggerHidden]
		public <LearnLibMovement>d__64(int <>1__state)
		{
		}

		[Token(Token = "0x60009B4")]
		[Address(RVA = "0xEAFF50", Offset = "0xEAFF50", VA = "0xEAFF50", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60009B5")]
		[Address(RVA = "0xEAFF54", Offset = "0xEAFF54", VA = "0xEAFF54", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60009B7")]
		[Address(RVA = "0xEB0674", Offset = "0xEB0674", VA = "0xEB0674", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001F4")]
	[CompilerGenerated]
	private sealed class <RegisterPlayerRotation>d__65 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000A5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public OnboardingController <>4__this;

		[Token(Token = "0x4000A5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private OnboardingState <startingState>5__2;

		[Token(Token = "0x4000A5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector3 <lastForward>5__3;

		[Token(Token = "0x17000125")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60009BC")]
			[Address(RVA = "0xEB08C0", Offset = "0xEB08C0", VA = "0xEB08C0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000126")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60009BE")]
			[Address(RVA = "0xEB0908", Offset = "0xEB0908", VA = "0xEB0908", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009B9")]
		[Address(RVA = "0xEACAC4", Offset = "0xEACAC4", VA = "0xEACAC4")]
		[DebuggerHidden]
		public <RegisterPlayerRotation>d__65(int <>1__state)
		{
		}

		[Token(Token = "0x60009BA")]
		[Address(RVA = "0xEB06BC", Offset = "0xEB06BC", VA = "0xEB06BC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60009BB")]
		[Address(RVA = "0xEB06C0", Offset = "0xEB06C0", VA = "0xEB06C0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60009BD")]
		[Address(RVA = "0xEB08C8", Offset = "0xEB08C8", VA = "0xEB08C8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001F5")]
	[CompilerGenerated]
	private sealed class <EightMovesAndBeckonsTomeOfKnowledge>d__68 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000A5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public OnboardingController <>4__this;

		[Token(Token = "0x17000127")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60009C2")]
			[Address(RVA = "0xEB0BA4", Offset = "0xEB0BA4", VA = "0xEB0BA4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000128")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60009C4")]
			[Address(RVA = "0xEB0BEC", Offset = "0xEB0BEC", VA = "0xEB0BEC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009BF")]
		[Address(RVA = "0xEACBD8", Offset = "0xEACBD8", VA = "0xEACBD8")]
		[DebuggerHidden]
		public <EightMovesAndBeckonsTomeOfKnowledge>d__68(int <>1__state)
		{
		}

		[Token(Token = "0x60009C0")]
		[Address(RVA = "0xEB0910", Offset = "0xEB0910", VA = "0xEB0910", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60009C1")]
		[Address(RVA = "0xEB0914", Offset = "0xEB0914", VA = "0xEB0914", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60009C3")]
		[Address(RVA = "0xEB0BAC", Offset = "0xEB0BAC", VA = "0xEB0BAC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001F6")]
	[CompilerGenerated]
	private sealed class <IntroToTomeOfKnowledge>d__70 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000A62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public OnboardingController <>4__this;

		[Token(Token = "0x17000129")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60009C8")]
			[Address(RVA = "0xEB1028", Offset = "0xEB1028", VA = "0xEB1028", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700012A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60009CA")]
			[Address(RVA = "0xEB1070", Offset = "0xEB1070", VA = "0xEB1070", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009C5")]
		[Address(RVA = "0xEACCB0", Offset = "0xEACCB0", VA = "0xEACCB0")]
		[DebuggerHidden]
		public <IntroToTomeOfKnowledge>d__70(int <>1__state)
		{
		}

		[Token(Token = "0x60009C6")]
		[Address(RVA = "0xEB0BF4", Offset = "0xEB0BF4", VA = "0xEB0BF4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60009C7")]
		[Address(RVA = "0xEB0BF8", Offset = "0xEB0BF8", VA = "0xEB0BF8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60009C9")]
		[Address(RVA = "0xEB1030", Offset = "0xEB1030", VA = "0xEB1030", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001F7")]
	[CompilerGenerated]
	private sealed class <SpawnFirstDeck>d__72 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000A65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public OnboardingController <>4__this;

		[Token(Token = "0x1700012B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60009CE")]
			[Address(RVA = "0xEB1310", Offset = "0xEB1310", VA = "0xEB1310", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700012C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60009D0")]
			[Address(RVA = "0xEB1358", Offset = "0xEB1358", VA = "0xEB1358", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009CB")]
		[Address(RVA = "0xEACD3C", Offset = "0xEACD3C", VA = "0xEACD3C")]
		[DebuggerHidden]
		public <SpawnFirstDeck>d__72(int <>1__state)
		{
		}

		[Token(Token = "0x60009CC")]
		[Address(RVA = "0xEB1078", Offset = "0xEB1078", VA = "0xEB1078", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60009CD")]
		[Address(RVA = "0xEB107C", Offset = "0xEB107C", VA = "0xEB107C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60009CF")]
		[Address(RVA = "0xEB1318", Offset = "0xEB1318", VA = "0xEB1318", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001F8")]
	[CompilerGenerated]
	private sealed class <PlaceInfoPopupOnDeckWhenTomeOpen>d__73 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000A68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public OnboardingController <>4__this;

		[Token(Token = "0x4000A69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GameObject <deck>5__2;

		[Token(Token = "0x1700012D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60009D4")]
			[Address(RVA = "0xEB1688", Offset = "0xEB1688", VA = "0xEB1688", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700012E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60009D6")]
			[Address(RVA = "0xEB16D0", Offset = "0xEB16D0", VA = "0xEB16D0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009D1")]
		[Address(RVA = "0xEACDD8", Offset = "0xEACDD8", VA = "0xEACDD8")]
		[DebuggerHidden]
		public <PlaceInfoPopupOnDeckWhenTomeOpen>d__73(int <>1__state)
		{
		}

		[Token(Token = "0x60009D2")]
		[Address(RVA = "0xEB1360", Offset = "0xEB1360", VA = "0xEB1360", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60009D3")]
		[Address(RVA = "0xEB1364", Offset = "0xEB1364", VA = "0xEB1364", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60009D5")]
		[Address(RVA = "0xEB1690", Offset = "0xEB1690", VA = "0xEB1690", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001F9")]
	[CompilerGenerated]
	private sealed class <FollowTheFootsteps>d__76 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000A6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public OnboardingController <>4__this;

		[Token(Token = "0x1700012F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60009DA")]
			[Address(RVA = "0xEB1AA0", Offset = "0xEB1AA0", VA = "0xEB1AA0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000130")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60009DC")]
			[Address(RVA = "0xEB1AE8", Offset = "0xEB1AE8", VA = "0xEB1AE8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009D7")]
		[Address(RVA = "0xEACFDC", Offset = "0xEACFDC", VA = "0xEACFDC")]
		[DebuggerHidden]
		public <FollowTheFootsteps>d__76(int <>1__state)
		{
		}

		[Token(Token = "0x60009D8")]
		[Address(RVA = "0xEB16D8", Offset = "0xEB16D8", VA = "0xEB16D8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60009D9")]
		[Address(RVA = "0xEB16DC", Offset = "0xEB16DC", VA = "0xEB16DC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60009DB")]
		[Address(RVA = "0xEB1AA8", Offset = "0xEB1AA8", VA = "0xEB1AA8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001FA")]
	[CompilerGenerated]
	private sealed class <StudiedAudio>d__77 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000A6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public OnboardingController <>4__this;

		[Token(Token = "0x17000131")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60009E0")]
			[Address(RVA = "0xEB1DE8", Offset = "0xEB1DE8", VA = "0xEB1DE8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000132")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60009E2")]
			[Address(RVA = "0xEB1E30", Offset = "0xEB1E30", VA = "0xEB1E30", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009DD")]
		[Address(RVA = "0xEAD004", Offset = "0xEAD004", VA = "0xEAD004")]
		[DebuggerHidden]
		public <StudiedAudio>d__77(int <>1__state)
		{
		}

		[Token(Token = "0x60009DE")]
		[Address(RVA = "0xEB1AF0", Offset = "0xEB1AF0", VA = "0xEB1AF0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60009DF")]
		[Address(RVA = "0xEB1AF4", Offset = "0xEB1AF4", VA = "0xEB1AF4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60009E1")]
		[Address(RVA = "0xEB1DF0", Offset = "0xEB1DF0", VA = "0xEB1DF0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001FB")]
	[CompilerGenerated]
	private sealed class <LookAtCardReminder>d__80 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000A72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public OnboardingController <>4__this;

		[Token(Token = "0x17000133")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60009E6")]
			[Address(RVA = "0xEB1FD4", Offset = "0xEB1FD4", VA = "0xEB1FD4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000134")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60009E8")]
			[Address(RVA = "0xEB201C", Offset = "0xEB201C", VA = "0xEB201C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009E3")]
		[Address(RVA = "0xEAD0F0", Offset = "0xEAD0F0", VA = "0xEAD0F0")]
		[DebuggerHidden]
		public <LookAtCardReminder>d__80(int <>1__state)
		{
		}

		[Token(Token = "0x60009E4")]
		[Address(RVA = "0xEB1E38", Offset = "0xEB1E38", VA = "0xEB1E38", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60009E5")]
		[Address(RVA = "0xEB1E3C", Offset = "0xEB1E3C", VA = "0xEB1E3C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60009E7")]
		[Address(RVA = "0xEB1FDC", Offset = "0xEB1FDC", VA = "0xEB1FDC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001FC")]
	[CompilerGenerated]
	private sealed class <EightMovesAndBeckonsFactBlaster>d__81 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000A75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public OnboardingController <>4__this;

		[Token(Token = "0x17000135")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60009EC")]
			[Address(RVA = "0xEB2404", Offset = "0xEB2404", VA = "0xEB2404", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000136")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60009EE")]
			[Address(RVA = "0xEB244C", Offset = "0xEB244C", VA = "0xEB244C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009E9")]
		[Address(RVA = "0xEAD118", Offset = "0xEAD118", VA = "0xEAD118")]
		[DebuggerHidden]
		public <EightMovesAndBeckonsFactBlaster>d__81(int <>1__state)
		{
		}

		[Token(Token = "0x60009EA")]
		[Address(RVA = "0xEB2024", Offset = "0xEB2024", VA = "0xEB2024", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60009EB")]
		[Address(RVA = "0xEB2028", Offset = "0xEB2028", VA = "0xEB2028", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60009ED")]
		[Address(RVA = "0xEB240C", Offset = "0xEB240C", VA = "0xEB240C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001FD")]
	[CompilerGenerated]
	private sealed class <IntroToFactBlaster>d__82 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000A78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public OnboardingController <>4__this;

		[Token(Token = "0x17000137")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60009F2")]
			[Address(RVA = "0xEB2680", Offset = "0xEB2680", VA = "0xEB2680", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000138")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60009F4")]
			[Address(RVA = "0xEB26C8", Offset = "0xEB26C8", VA = "0xEB26C8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009EF")]
		[Address(RVA = "0xEAD140", Offset = "0xEAD140", VA = "0xEAD140")]
		[DebuggerHidden]
		public <IntroToFactBlaster>d__82(int <>1__state)
		{
		}

		[Token(Token = "0x60009F0")]
		[Address(RVA = "0xEB2454", Offset = "0xEB2454", VA = "0xEB2454", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60009F1")]
		[Address(RVA = "0xEB2458", Offset = "0xEB2458", VA = "0xEB2458", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60009F3")]
		[Address(RVA = "0xEB2688", Offset = "0xEB2688", VA = "0xEB2688", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001FE")]
	[CompilerGenerated]
	private sealed class <BlasterReset>d__83 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000A7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public OnboardingController <>4__this;

		[Token(Token = "0x17000139")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60009F8")]
			[Address(RVA = "0xEB28FC", Offset = "0xEB28FC", VA = "0xEB28FC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700013A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60009FA")]
			[Address(RVA = "0xEB2944", Offset = "0xEB2944", VA = "0xEB2944", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009F5")]
		[Address(RVA = "0xEAD168", Offset = "0xEAD168", VA = "0xEAD168")]
		[DebuggerHidden]
		public <BlasterReset>d__83(int <>1__state)
		{
		}

		[Token(Token = "0x60009F6")]
		[Address(RVA = "0xEB26D0", Offset = "0xEB26D0", VA = "0xEB26D0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60009F7")]
		[Address(RVA = "0xEB26D4", Offset = "0xEB26D4", VA = "0xEB26D4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60009F9")]
		[Address(RVA = "0xEB2904", Offset = "0xEB2904", VA = "0xEB2904", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001FF")]
	[CompilerGenerated]
	private sealed class <DoTheAssessment>d__85 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000A7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public OnboardingController <>4__this;

		[Token(Token = "0x1700013B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60009FE")]
			[Address(RVA = "0xEB2C74", Offset = "0xEB2C74", VA = "0xEB2C74", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700013C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000A00")]
			[Address(RVA = "0xEB2CBC", Offset = "0xEB2CBC", VA = "0xEB2CBC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009FB")]
		[Address(RVA = "0xEAD2A8", Offset = "0xEAD2A8", VA = "0xEAD2A8")]
		[DebuggerHidden]
		public <DoTheAssessment>d__85(int <>1__state)
		{
		}

		[Token(Token = "0x60009FC")]
		[Address(RVA = "0xEB294C", Offset = "0xEB294C", VA = "0xEB294C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60009FD")]
		[Address(RVA = "0xEB2950", Offset = "0xEB2950", VA = "0xEB2950", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60009FF")]
		[Address(RVA = "0xEB2C7C", Offset = "0xEB2C7C", VA = "0xEB2C7C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000200")]
	[CompilerGenerated]
	private sealed class <AssessmentFeedback>d__87 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000A81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public OnboardingController <>4__this;

		[Token(Token = "0x1700013D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000A04")]
			[Address(RVA = "0xEB352C", Offset = "0xEB352C", VA = "0xEB352C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700013E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000A06")]
			[Address(RVA = "0xEB3574", Offset = "0xEB3574", VA = "0xEB3574", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A01")]
		[Address(RVA = "0xEAD36C", Offset = "0xEAD36C", VA = "0xEAD36C")]
		[DebuggerHidden]
		public <AssessmentFeedback>d__87(int <>1__state)
		{
		}

		[Token(Token = "0x6000A02")]
		[Address(RVA = "0xEB2CC4", Offset = "0xEB2CC4", VA = "0xEB2CC4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000A03")]
		[Address(RVA = "0xEB2CC8", Offset = "0xEB2CC8", VA = "0xEB2CC8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A05")]
		[Address(RVA = "0xEB3534", Offset = "0xEB3534", VA = "0xEB3534", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000201")]
	[CompilerGenerated]
	private sealed class <EightMovesAndBeckonsStore>d__88 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000A84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public OnboardingController <>4__this;

		[Token(Token = "0x1700013F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000A0A")]
			[Address(RVA = "0xEB3888", Offset = "0xEB3888", VA = "0xEB3888", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000140")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000A0C")]
			[Address(RVA = "0xEB38D0", Offset = "0xEB38D0", VA = "0xEB38D0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A07")]
		[Address(RVA = "0xEAD394", Offset = "0xEAD394", VA = "0xEAD394")]
		[DebuggerHidden]
		public <EightMovesAndBeckonsStore>d__88(int <>1__state)
		{
		}

		[Token(Token = "0x6000A08")]
		[Address(RVA = "0xEB357C", Offset = "0xEB357C", VA = "0xEB357C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000A09")]
		[Address(RVA = "0xEB3580", Offset = "0xEB3580", VA = "0xEB3580", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A0B")]
		[Address(RVA = "0xEB3890", Offset = "0xEB3890", VA = "0xEB3890", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000202")]
	[CompilerGenerated]
	private sealed class <HereIsAKey>d__89 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000A87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public OnboardingController <>4__this;

		[Token(Token = "0x17000141")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000A10")]
			[Address(RVA = "0xEB3D44", Offset = "0xEB3D44", VA = "0xEB3D44", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000142")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000A12")]
			[Address(RVA = "0xEB3D8C", Offset = "0xEB3D8C", VA = "0xEB3D8C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A0D")]
		[Address(RVA = "0xEAD3BC", Offset = "0xEAD3BC", VA = "0xEAD3BC")]
		[DebuggerHidden]
		public <HereIsAKey>d__89(int <>1__state)
		{
		}

		[Token(Token = "0x6000A0E")]
		[Address(RVA = "0xEB38D8", Offset = "0xEB38D8", VA = "0xEB38D8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000A0F")]
		[Address(RVA = "0xEB38DC", Offset = "0xEB38DC", VA = "0xEB38DC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A11")]
		[Address(RVA = "0xEB3D4C", Offset = "0xEB3D4C", VA = "0xEB3D4C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000203")]
	[CompilerGenerated]
	private sealed class <GoUnlockTheStore>d__91 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000A8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public OnboardingController <>4__this;

		[Token(Token = "0x17000143")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000A16")]
			[Address(RVA = "0xEB40B4", Offset = "0xEB40B4", VA = "0xEB40B4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000144")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000A18")]
			[Address(RVA = "0xEB40FC", Offset = "0xEB40FC", VA = "0xEB40FC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A13")]
		[Address(RVA = "0xEAD484", Offset = "0xEAD484", VA = "0xEAD484")]
		[DebuggerHidden]
		public <GoUnlockTheStore>d__91(int <>1__state)
		{
		}

		[Token(Token = "0x6000A14")]
		[Address(RVA = "0xEB3D94", Offset = "0xEB3D94", VA = "0xEB3D94", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000A15")]
		[Address(RVA = "0xEB3D98", Offset = "0xEB3D98", VA = "0xEB3D98", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A17")]
		[Address(RVA = "0xEB40BC", Offset = "0xEB40BC", VA = "0xEB40BC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000204")]
	[CompilerGenerated]
	private sealed class <ThisIsTheStore>d__93 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000A8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public OnboardingController <>4__this;

		[Token(Token = "0x17000145")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000A1C")]
			[Address(RVA = "0xEB4AD4", Offset = "0xEB4AD4", VA = "0xEB4AD4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000146")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000A1E")]
			[Address(RVA = "0xEB4B1C", Offset = "0xEB4B1C", VA = "0xEB4B1C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A19")]
		[Address(RVA = "0xEAD55C", Offset = "0xEAD55C", VA = "0xEAD55C")]
		[DebuggerHidden]
		public <ThisIsTheStore>d__93(int <>1__state)
		{
		}

		[Token(Token = "0x6000A1A")]
		[Address(RVA = "0xEB4104", Offset = "0xEB4104", VA = "0xEB4104", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000A1B")]
		[Address(RVA = "0xEB4108", Offset = "0xEB4108", VA = "0xEB4108", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A1D")]
		[Address(RVA = "0xEB4ADC", Offset = "0xEB4ADC", VA = "0xEB4ADC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40009EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OnboardingStateMachine onboardingStateMachine;

	[Token(Token = "0x40009F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject stool;

	[Token(Token = "0x40009F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject abilitySplashParticle;

	[Token(Token = "0x40009F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject theKey;

	[Token(Token = "0x40009F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public string tutorialDeckIdString;

	[Token(Token = "0x40009F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private RepeatOnboardingButton repeatOnboardingButton;

	[Token(Token = "0x40009F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private EightController eight;

	[Token(Token = "0x40009F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Autohand.Hand leftHand;

	[Token(Token = "0x40009F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Autohand.Hand rightHand;

	[Token(Token = "0x40009F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private CardPackage onboAppleCardPackage;

	[Token(Token = "0x40009F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private int numberOfPlayerRotations;

	[Token(Token = "0x40009FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private int numberOfTeleports;

	[Token(Token = "0x40009FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private int cardsStudiedInDeck;

	[Token(Token = "0x40009FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private int correctFactBlasterAnswers;

	[Token(Token = "0x40009FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private bool eightMoveComplete;

	[Token(Token = "0x40009FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
	private bool lastCardGuessedCorrect;

	[Token(Token = "0x40009FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7A")]
	private bool spawningApple;

	[Token(Token = "0x4000A00")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private ManagedProp appleCurio;

	[Token(Token = "0x4000A01")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private GameObject firstDeck;

	[Token(Token = "0x4000A02")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private GameObject keyForPlayer;

	[Token(Token = "0x4000A03")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private GameObject stoolForApple;

	[Token(Token = "0x4000A04")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private List<Coroutine> activeCoroutines;

	[Token(Token = "0x4000A05")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private List<string> activeSwitchboardTriggers;

	[Token(Token = "0x4000A06")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private List<GameObject> transientStateObjects;

	[Token(Token = "0x4000A07")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private Vector3 eightPrevPosition;

	[Token(Token = "0x4000A08")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private Transform playerTransform;

	[Token(Token = "0x4000A09")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private GameObject factBlaster;

	[Token(Token = "0x4000A0A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private GameObject factBlasterCage;

	[Token(Token = "0x4000A0B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private bool bypassStore;

	[Token(Token = "0x6000907")]
	[Address(RVA = "0xEA89E8", Offset = "0xEA89E8", VA = "0xEA89E8", Slot = "5")]
	protected override void DidAwake()
	{
	}

	[Token(Token = "0x6000908")]
	[Address(RVA = "0xEA8C08", Offset = "0xEA8C08", VA = "0xEA8C08")]
	public void RegisterRepeatOnboardingButton(RepeatOnboardingButton rob)
	{
	}

	[Token(Token = "0x6000909")]
	[Address(RVA = "0xEA8D00", Offset = "0xEA8D00", VA = "0xEA8D00")]
	private void WaitAndTryStartOnbo()
	{
	}

	[Token(Token = "0x600090A")]
	[Address(RVA = "0xEA8D74", Offset = "0xEA8D74", VA = "0xEA8D74")]
	[IteratorStateMachine(typeof(<co_WaitAndTryStartOnbo>d__32))]
	private IEnumerator co_WaitAndTryStartOnbo()
	{
		return null;
	}

	[Token(Token = "0x600090B")]
	[Address(RVA = "0xEA8E10", Offset = "0xEA8E10", VA = "0xEA8E10")]
	private void StartOnboRepeat()
	{
	}

	[Token(Token = "0x600090C")]
	[Address(RVA = "0xEA8E3C", Offset = "0xEA8E3C", VA = "0xEA8E3C")]
	[IteratorStateMachine(typeof(<co_StartOnboRepeat>d__34))]
	private IEnumerator co_StartOnboRepeat()
	{
		return null;
	}

	[Token(Token = "0x600090D")]
	[Address(RVA = "0xEA8ED8", Offset = "0xEA8ED8", VA = "0xEA8ED8")]
	private void StartOnbo()
	{
	}

	[Token(Token = "0x600090E")]
	[Address(RVA = "0xEA92B4", Offset = "0xEA92B4", VA = "0xEA92B4")]
	private void GenerateCardForTutorialApple()
	{
	}

	[Token(Token = "0x600090F")]
	[Address(RVA = "0xEA958C", Offset = "0xEA958C", VA = "0xEA958C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000910")]
	[Address(RVA = "0xEA9590", Offset = "0xEA9590", VA = "0xEA9590")]
	private void EightRotationControl()
	{
	}

	[Token(Token = "0x6000911")]
	[Address(RVA = "0xEA9888", Offset = "0xEA9888", VA = "0xEA9888")]
	private void ProcessOnboardingStateChange(OnboardingState state)
	{
	}

	[Token(Token = "0x6000912")]
	[Address(RVA = "0xEAB284", Offset = "0xEAB284", VA = "0xEAB284")]
	[IteratorStateMachine(typeof(<WaitAndPlayExpression>d__40))]
	private IEnumerator WaitAndPlayExpression(ExpressionAfterTime exp)
	{
		return null;
	}

	[Token(Token = "0x6000913")]
	[Address(RVA = "0xEAB0A8", Offset = "0xEAB0A8", VA = "0xEAB0A8")]
	private void StartOnboCoroutine(IEnumerator coroutine)
	{
	}

	[Token(Token = "0x6000914")]
	[Address(RVA = "0xEAB5CC", Offset = "0xEAB5CC", VA = "0xEAB5CC")]
	private void AddOnboSwitchboardTrigger(Action theAction, string actionKey, object target)
	{
	}

	[Token(Token = "0x6000915")]
	private void AddOnboSwitchboardTrigger<T>(Action<T> theAction, string actionKey, object target)
	{
	}

	[Token(Token = "0x6000916")]
	private void AddOnboSwitchboardTrigger<T1, T2>(Action<T1, T2> theAction, string actionKey, object target)
	{
	}

	[Token(Token = "0x6000917")]
	[Address(RVA = "0xEABE18", Offset = "0xEABE18", VA = "0xEABE18")]
	private bool UserHoldingObject()
	{
		return default(bool);
	}

	[Token(Token = "0x6000918")]
	[Address(RVA = "0xEAB00C", Offset = "0xEAB00C", VA = "0xEAB00C")]
	private void ClearAllForNextState()
	{
	}

	[Token(Token = "0x6000919")]
	[Address(RVA = "0xEABEDC", Offset = "0xEABEDC", VA = "0xEABEDC")]
	private void StopAllActiveOnboCoroutines()
	{
	}

	[Token(Token = "0x600091A")]
	[Address(RVA = "0xEAC05C", Offset = "0xEAC05C", VA = "0xEAC05C")]
	private void DestroyAllTransiantGameObjects()
	{
	}

	[Token(Token = "0x600091B")]
	[Address(RVA = "0xEAC1F4", Offset = "0xEAC1F4", VA = "0xEAC1F4")]
	private void RemoveAllActiveOnboTriggers()
	{
	}

	[Token(Token = "0x600091C")]
	[Address(RVA = "0xEAC394", Offset = "0xEAC394", VA = "0xEAC394")]
	private void ProccessEightMoveComplete()
	{
	}

	[Token(Token = "0x600091D")]
	[Address(RVA = "0xEAB034", Offset = "0xEAB034", VA = "0xEAB034")]
	[IteratorStateMachine(typeof(<OnboardingStart>d__51))]
	private IEnumerator OnboardingStart()
	{
		return null;
	}

	[Token(Token = "0x600091E")]
	[Address(RVA = "0xEAB164", Offset = "0xEAB164", VA = "0xEAB164")]
	[IteratorStateMachine(typeof(<CreateNewLibraryCard>d__52))]
	private IEnumerator CreateNewLibraryCard()
	{
		return null;
	}

	[Token(Token = "0x600091F")]
	[Address(RVA = "0xEAB1D8", Offset = "0xEAB1D8", VA = "0xEAB1D8")]
	[IteratorStateMachine(typeof(<InitialLearnAboutCurio>d__53))]
	private IEnumerator InitialLearnAboutCurio()
	{
		return null;
	}

	[Token(Token = "0x6000920")]
	[Address(RVA = "0xEAC44C", Offset = "0xEAC44C", VA = "0xEAC44C")]
	private void CatchAppleSpawn(ManagedProp prop)
	{
	}

	[Token(Token = "0x6000921")]
	[Address(RVA = "0xEAC46C", Offset = "0xEAC46C", VA = "0xEAC46C")]
	private void RespondToAppleReleaseDelegate(GameObject apple)
	{
	}

	[Token(Token = "0x6000922")]
	[Address(RVA = "0xEAB314", Offset = "0xEAB314", VA = "0xEAB314")]
	[IteratorStateMachine(typeof(<AppleReset>d__56))]
	private IEnumerator AppleReset()
	{
		return null;
	}

	[Token(Token = "0x6000923")]
	[Address(RVA = "0xEAC55C", Offset = "0xEAC55C", VA = "0xEAC55C")]
	public void ProcessPlayerCurioPickup(ManagedProp curio)
	{
	}

	[Token(Token = "0x6000924")]
	[Address(RVA = "0xEAB388", Offset = "0xEAB388", VA = "0xEAB388")]
	[IteratorStateMachine(typeof(<LearnAboutNotecardAndFlip>d__58))]
	private IEnumerator LearnAboutNotecardAndFlip()
	{
		return null;
	}

	[Token(Token = "0x6000925")]
	[Address(RVA = "0xEAB3FC", Offset = "0xEAB3FC", VA = "0xEAB3FC")]
	[IteratorStateMachine(typeof(<LearnAboutNotecardRepeat>d__59))]
	private IEnumerator LearnAboutNotecardRepeat()
	{
		return null;
	}

	[Token(Token = "0x6000926")]
	[Address(RVA = "0xEAC84C", Offset = "0xEAC84C", VA = "0xEAC84C")]
	public void ProcessPlayerFlippedCard(bool isShowingFront)
	{
	}

	[Token(Token = "0x6000927")]
	[Address(RVA = "0xEAB470", Offset = "0xEAB470", VA = "0xEAB470")]
	[IteratorStateMachine(typeof(<LearnMemorizing>d__61))]
	private IEnumerator LearnMemorizing()
	{
		return null;
	}

	[Token(Token = "0x6000928")]
	[Address(RVA = "0xEAB4E4", Offset = "0xEAB4E4", VA = "0xEAB4E4")]
	[IteratorStateMachine(typeof(<MemorizeRepeat>d__62))]
	private IEnumerator MemorizeRepeat()
	{
		return null;
	}

	[Token(Token = "0x6000929")]
	[Address(RVA = "0xEAC974", Offset = "0xEAC974", VA = "0xEAC974")]
	public void ProcessPlayerMemorizedProp(PropMemorizationType type, ManagedProp mp)
	{
	}

	[Token(Token = "0x600092A")]
	[Address(RVA = "0xEAB6B0", Offset = "0xEAB6B0", VA = "0xEAB6B0")]
	[IteratorStateMachine(typeof(<LearnLibMovement>d__64))]
	private IEnumerator LearnLibMovement()
	{
		return null;
	}

	[Token(Token = "0x600092B")]
	[Address(RVA = "0xEAB558", Offset = "0xEAB558", VA = "0xEAB558")]
	[IteratorStateMachine(typeof(<RegisterPlayerRotation>d__65))]
	private IEnumerator RegisterPlayerRotation()
	{
		return null;
	}

	[Token(Token = "0x600092C")]
	[Address(RVA = "0xEACAEC", Offset = "0xEACAEC", VA = "0xEACAEC")]
	private void ProcessPlayerTeleport()
	{
	}

	[Token(Token = "0x600092D")]
	[Address(RVA = "0xEACAFC", Offset = "0xEACAFC", VA = "0xEACAFC")]
	private void IsLearnedMovementComplete()
	{
	}

	[Token(Token = "0x600092E")]
	[Address(RVA = "0xEAB724", Offset = "0xEAB724", VA = "0xEAB724")]
	[IteratorStateMachine(typeof(<EightMovesAndBeckonsTomeOfKnowledge>d__68))]
	private IEnumerator EightMovesAndBeckonsTomeOfKnowledge()
	{
		return null;
	}

	[Token(Token = "0x600092F")]
	[Address(RVA = "0xEACC00", Offset = "0xEACC00", VA = "0xEACC00")]
	private void ProcessPlayerGotToEight(bool approachedEight)
	{
	}

	[Token(Token = "0x6000930")]
	[Address(RVA = "0xEAB798", Offset = "0xEAB798", VA = "0xEAB798")]
	[IteratorStateMachine(typeof(<IntroToTomeOfKnowledge>d__70))]
	private IEnumerator IntroToTomeOfKnowledge()
	{
		return null;
	}

	[Token(Token = "0x6000931")]
	[Address(RVA = "0xEACCD8", Offset = "0xEACCD8", VA = "0xEACCD8")]
	public void ProcessPlayerOpenedTome()
	{
	}

	[Token(Token = "0x6000932")]
	[Address(RVA = "0xEAB80C", Offset = "0xEAB80C", VA = "0xEAB80C")]
	[IteratorStateMachine(typeof(<SpawnFirstDeck>d__72))]
	private IEnumerator SpawnFirstDeck()
	{
		return null;
	}

	[Token(Token = "0x6000933")]
	[Address(RVA = "0xEACD64", Offset = "0xEACD64", VA = "0xEACD64")]
	[IteratorStateMachine(typeof(<PlaceInfoPopupOnDeckWhenTomeOpen>d__73))]
	private IEnumerator PlaceInfoPopupOnDeckWhenTomeOpen()
	{
		return null;
	}

	[Token(Token = "0x6000934")]
	[Address(RVA = "0xEACE00", Offset = "0xEACE00", VA = "0xEACE00")]
	private void RespondToReleaseDelegate(Autohand.Hand hand, Grabbable grabbable)
	{
	}

	[Token(Token = "0x6000935")]
	[Address(RVA = "0xEACF48", Offset = "0xEACF48", VA = "0xEACF48")]
	public void ProcessPlayerSpawnedDeck()
	{
	}

	[Token(Token = "0x6000936")]
	[Address(RVA = "0xEAB880", Offset = "0xEAB880", VA = "0xEAB880")]
	[IteratorStateMachine(typeof(<FollowTheFootsteps>d__76))]
	private IEnumerator FollowTheFootsteps()
	{
		return null;
	}

	[Token(Token = "0x6000937")]
	[Address(RVA = "0xEAB8F4", Offset = "0xEAB8F4", VA = "0xEAB8F4")]
	[IteratorStateMachine(typeof(<StudiedAudio>d__77))]
	private IEnumerator StudiedAudio()
	{
		return null;
	}

	[Token(Token = "0x6000938")]
	[Address(RVA = "0xEAD02C", Offset = "0xEAD02C", VA = "0xEAD02C")]
	private EightExpressionType? GetAudioForCardStudied(int cardNumber)
	{
		return null;
	}

	[Token(Token = "0x6000939")]
	[Address(RVA = "0xEAC7EC", Offset = "0xEAC7EC", VA = "0xEAC7EC")]
	private bool IsOnBoDeckMemorizationComplete()
	{
		return default(bool);
	}

	[Token(Token = "0x600093A")]
	[Address(RVA = "0xEAB968", Offset = "0xEAB968", VA = "0xEAB968")]
	[IteratorStateMachine(typeof(<LookAtCardReminder>d__80))]
	private IEnumerator LookAtCardReminder()
	{
		return null;
	}

	[Token(Token = "0x600093B")]
	[Address(RVA = "0xEAB9DC", Offset = "0xEAB9DC", VA = "0xEAB9DC")]
	[IteratorStateMachine(typeof(<EightMovesAndBeckonsFactBlaster>d__81))]
	private IEnumerator EightMovesAndBeckonsFactBlaster()
	{
		return null;
	}

	[Token(Token = "0x600093C")]
	[Address(RVA = "0xEABA50", Offset = "0xEABA50", VA = "0xEABA50")]
	[IteratorStateMachine(typeof(<IntroToFactBlaster>d__82))]
	private IEnumerator IntroToFactBlaster()
	{
		return null;
	}

	[Token(Token = "0x600093D")]
	[Address(RVA = "0xEABAC4", Offset = "0xEABAC4", VA = "0xEABAC4")]
	[IteratorStateMachine(typeof(<BlasterReset>d__83))]
	private IEnumerator BlasterReset()
	{
		return null;
	}

	[Token(Token = "0x600093E")]
	[Address(RVA = "0xEAD190", Offset = "0xEAD190", VA = "0xEAD190")]
	public void ProcessPlayerPickedUpBlaster(bool pickedUp)
	{
	}

	[Token(Token = "0x600093F")]
	[Address(RVA = "0xEABB38", Offset = "0xEABB38", VA = "0xEABB38")]
	[IteratorStateMachine(typeof(<DoTheAssessment>d__85))]
	private IEnumerator DoTheAssessment()
	{
		return null;
	}

	[Token(Token = "0x6000940")]
	[Address(RVA = "0xEAD2D0", Offset = "0xEAD2D0", VA = "0xEAD2D0")]
	public void ProcessPlayerDidTest(int numCorrect)
	{
	}

	[Token(Token = "0x6000941")]
	[Address(RVA = "0xEABBAC", Offset = "0xEABBAC", VA = "0xEABBAC")]
	[IteratorStateMachine(typeof(<AssessmentFeedback>d__87))]
	private IEnumerator AssessmentFeedback()
	{
		return null;
	}

	[Token(Token = "0x6000942")]
	[Address(RVA = "0xEABC20", Offset = "0xEABC20", VA = "0xEABC20")]
	[IteratorStateMachine(typeof(<EightMovesAndBeckonsStore>d__88))]
	private IEnumerator EightMovesAndBeckonsStore()
	{
		return null;
	}

	[Token(Token = "0x6000943")]
	[Address(RVA = "0xEABC94", Offset = "0xEABC94", VA = "0xEABC94")]
	[IteratorStateMachine(typeof(<HereIsAKey>d__89))]
	private IEnumerator HereIsAKey()
	{
		return null;
	}

	[Token(Token = "0x6000944")]
	[Address(RVA = "0xEAD3E4", Offset = "0xEAD3E4", VA = "0xEAD3E4")]
	public void ProcessPlayerGotKey(TriggerType type, PuzzleTriggeredDetails ptd)
	{
	}

	[Token(Token = "0x6000945")]
	[Address(RVA = "0xEABD08", Offset = "0xEABD08", VA = "0xEABD08")]
	[IteratorStateMachine(typeof(<GoUnlockTheStore>d__91))]
	private IEnumerator GoUnlockTheStore()
	{
		return null;
	}

	[Token(Token = "0x6000946")]
	[Address(RVA = "0xEAD4AC", Offset = "0xEAD4AC", VA = "0xEAD4AC")]
	public void ProcessPlayerPutKeyInStoreLock(TriggerType type, PuzzleTriggeredDetails ptd)
	{
	}

	[Token(Token = "0x6000947")]
	[Address(RVA = "0xEABD7C", Offset = "0xEABD7C", VA = "0xEABD7C")]
	[IteratorStateMachine(typeof(<ThisIsTheStore>d__93))]
	private IEnumerator ThisIsTheStore()
	{
		return null;
	}

	[Token(Token = "0x6000948")]
	[Address(RVA = "0xEAD584", Offset = "0xEAD584", VA = "0xEAD584")]
	public OnboardingController()
	{
	}
}
[Token(Token = "0x2000205")]
public class ExpressionAfterTime
{
	[Token(Token = "0x4000A8E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public EightExpressionType expression;

	[Token(Token = "0x4000A8F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float time;

	[Token(Token = "0x6000A1F")]
	[Address(RVA = "0xEAB24C", Offset = "0xEAB24C", VA = "0xEAB24C")]
	public ExpressionAfterTime(EightExpressionType expression, float time)
	{
	}
}
[Token(Token = "0x2000206")]
public class OnboardingLogin : MonoBehaviour
{
	[Token(Token = "0x6000A20")]
	[Address(RVA = "0xEB4B24", Offset = "0xEB4B24", VA = "0xEB4B24")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000A21")]
	[Address(RVA = "0xEB4BF4", Offset = "0xEB4BF4", VA = "0xEB4BF4")]
	public OnboardingLogin()
	{
	}
}
[Token(Token = "0x2000207")]
public class OnboardingStateMachine : MonoBehaviour
{
	[Token(Token = "0x4000A90")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private OnboardingState currentState;

	[Token(Token = "0x4000A91")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<OnboardingState> visitedStates;

	[Token(Token = "0x4000A92")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Dictionary<OnboardingStateTransition, OnboardingState> stateDictionary;

	[Token(Token = "0x6000A22")]
	[Address(RVA = "0xEB4BFC", Offset = "0xEB4BFC", VA = "0xEB4BFC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000A23")]
	[Address(RVA = "0xEB6480", Offset = "0xEB6480", VA = "0xEB6480")]
	public OnboardingState GetCurrentState()
	{
		return default(OnboardingState);
	}

	[Token(Token = "0x6000A24")]
	[Address(RVA = "0xEAC794", Offset = "0xEAC794", VA = "0xEAC794")]
	public bool WasStateVisited(OnboardingState state)
	{
		return default(bool);
	}

	[Token(Token = "0x6000A25")]
	[Address(RVA = "0xEB6488", Offset = "0xEB6488", VA = "0xEB6488")]
	private void TransitionState(OnboardingCommand command)
	{
	}

	[Token(Token = "0x6000A26")]
	[Address(RVA = "0xEB6648", Offset = "0xEB6648", VA = "0xEB6648")]
	private void AddCurrentToVistedStates()
	{
	}

	[Token(Token = "0x6000A27")]
	[Address(RVA = "0xEB6718", Offset = "0xEB6718", VA = "0xEB6718")]
	private void ResetStateMachine()
	{
	}

	[Token(Token = "0x6000A28")]
	[Address(RVA = "0xEB6724", Offset = "0xEB6724", VA = "0xEB6724")]
	public OnboardingStateMachine()
	{
	}
}
[Token(Token = "0x2000209")]
public enum OnboardingState
{
	[Token(Token = "0x4000A96")]
	Timeout,
	[Token(Token = "0x4000A97")]
	None,
	[Token(Token = "0x4000A98")]
	Validating,
	[Token(Token = "0x4000A99")]
	Start,
	[Token(Token = "0x4000A9A")]
	NewLibraryCard,
	[Token(Token = "0x4000A9B")]
	IntroCurio,
	[Token(Token = "0x4000A9C")]
	AppleReset,
	[Token(Token = "0x4000A9D")]
	WaitForApple,
	[Token(Token = "0x4000A9E")]
	LearnNoteCard,
	[Token(Token = "0x4000A9F")]
	WaitForFlip,
	[Token(Token = "0x4000AA0")]
	NoteCardRepeat,
	[Token(Token = "0x4000AA1")]
	LearnMemorize,
	[Token(Token = "0x4000AA2")]
	WaitForMemorize,
	[Token(Token = "0x4000AA3")]
	MemorizeRepeat,
	[Token(Token = "0x4000AA4")]
	LearnMovement,
	[Token(Token = "0x4000AA5")]
	WaitForMovement,
	[Token(Token = "0x4000AA6")]
	EightMovesAndBeckonsTomeOfKnowledge,
	[Token(Token = "0x4000AA7")]
	EightMovesAndBeckonsFactBlaster,
	[Token(Token = "0x4000AA8")]
	WaitForProximityTomeOfKnowledge,
	[Token(Token = "0x4000AA9")]
	WaitForProximityFactBlaster,
	[Token(Token = "0x4000AAA")]
	IntroToTomeOfKnowledge,
	[Token(Token = "0x4000AAB")]
	WaitForTomeOpen,
	[Token(Token = "0x4000AAC")]
	SpawnFirstDeck,
	[Token(Token = "0x4000AAD")]
	WaitForFirstDeckSpawn,
	[Token(Token = "0x4000AAE")]
	FollowFootstepsToFirstCurio,
	[Token(Token = "0x4000AAF")]
	WaitForPropStudied,
	[Token(Token = "0x4000AB0")]
	LookAtBackOfCardReminder,
	[Token(Token = "0x4000AB1")]
	StudyPropFeedback,
	[Token(Token = "0x4000AB2")]
	WaitForPutDownPropAfterMemorize,
	[Token(Token = "0x4000AB3")]
	WaitForFactBlasterPickUp,
	[Token(Token = "0x4000AB4")]
	IntroToFactBlaster,
	[Token(Token = "0x4000AB5")]
	BlasterReset,
	[Token(Token = "0x4000AB6")]
	IntroToAssessment,
	[Token(Token = "0x4000AB7")]
	WaitForAssessmentComplete,
	[Token(Token = "0x4000AB8")]
	AssessmentFeedback,
	[Token(Token = "0x4000AB9")]
	EightMovesAndBeckonsStore,
	[Token(Token = "0x4000ABA")]
	WaitForProximityStore,
	[Token(Token = "0x4000ABB")]
	EightOffersKeyToPlayer,
	[Token(Token = "0x4000ABC")]
	WaitForPlayerToTakeKey,
	[Token(Token = "0x4000ABD")]
	KeyReset,
	[Token(Token = "0x4000ABE")]
	WaitForPlayerUnlockStore,
	[Token(Token = "0x4000ABF")]
	WelcomeToTheStore
}
[Token(Token = "0x200020A")]
public enum OnboardingCommand
{
	[Token(Token = "0x4000AC1")]
	StateTimeout,
	[Token(Token = "0x4000AC2")]
	Start,
	[Token(Token = "0x4000AC3")]
	StateComplete,
	[Token(Token = "0x4000AC4")]
	PickedUpAppleBeforeLearnNoteCard,
	[Token(Token = "0x4000AC5")]
	PickedUpAppleAfterLearnNoteCard,
	[Token(Token = "0x4000AC6")]
	ItemInHand,
	[Token(Token = "0x4000AC7")]
	DroppedItem,
	[Token(Token = "0x4000AC8")]
	SpawnedTheDeck,
	[Token(Token = "0x4000AC9")]
	PlayerProximateToEight,
	[Token(Token = "0x4000ACA")]
	PickedUpFactBlasterFirstTime,
	[Token(Token = "0x4000ACB")]
	PickedUpFactBlasterLaterTimes,
	[Token(Token = "0x4000ACC")]
	AssessmentComplete,
	[Token(Token = "0x4000ACD")]
	CardFlippedBeforeLearnMemorize,
	[Token(Token = "0x4000ACE")]
	CardFlippedAfterLearnMemorize,
	[Token(Token = "0x4000ACF")]
	Memorized,
	[Token(Token = "0x4000AD0")]
	MovementPracticed,
	[Token(Token = "0x4000AD1")]
	MorePropsToStudy,
	[Token(Token = "0x4000AD2")]
	AllPropsStudied,
	[Token(Token = "0x4000AD3")]
	KeyTaken,
	[Token(Token = "0x4000AD4")]
	PlayerUnlocksStore,
	[Token(Token = "0x4000AD5")]
	Exit,
	[Token(Token = "0x4000AD6")]
	Restart,
	[Token(Token = "0x4000AD7")]
	SkipAhead,
	[Token(Token = "0x4000AD8")]
	OpenedTomeOfKnowledge
}
[Token(Token = "0x200020B")]
public class OnboardingStateTransition
{
	[Token(Token = "0x4000AD9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public OnboardingState currentState;

	[Token(Token = "0x4000ADA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public OnboardingCommand command;

	[Token(Token = "0x6000A2B")]
	[Address(RVA = "0xEB6454", Offset = "0xEB6454", VA = "0xEB6454")]
	public OnboardingStateTransition(OnboardingState currentState, OnboardingCommand command)
	{
	}
}
[Token(Token = "0x200020C")]
public class RepeatOnboardingButton : MonoBehaviour
{
	[Token(Token = "0x4000ADB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UIManualButton button;

	[Token(Token = "0x4000ADC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject buttonParentObject;

	[Token(Token = "0x4000ADD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Autohand.Hand lHand;

	[Token(Token = "0x4000ADE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Autohand.Hand rHand;

	[Token(Token = "0x4000ADF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool isEnablable;

	[Token(Token = "0x6000A2C")]
	[Address(RVA = "0xEB6828", Offset = "0xEB6828", VA = "0xEB6828")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000A2D")]
	[Address(RVA = "0xEB6A30", Offset = "0xEB6A30", VA = "0xEB6A30")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A2E")]
	[Address(RVA = "0xEA92A0", Offset = "0xEA92A0", VA = "0xEA92A0")]
	public void ToggleEnablable(bool isEnablable)
	{
	}

	[Token(Token = "0x6000A2F")]
	[Address(RVA = "0xEB6B4C", Offset = "0xEB6B4C", VA = "0xEB6B4C")]
	private void ToggleOn(Autohand.Hand hand, Grabbable grabbable)
	{
	}

	[Token(Token = "0x6000A30")]
	[Address(RVA = "0xEB6B70", Offset = "0xEB6B70", VA = "0xEB6B70")]
	private void ToggleOff(Autohand.Hand hand, Grabbable grabbable)
	{
	}

	[Token(Token = "0x6000A31")]
	[Address(RVA = "0xEB6A40", Offset = "0xEB6A40", VA = "0xEB6A40")]
	public void ToggleButtonParent(bool enable, bool skipLeft, bool skipRight)
	{
	}

	[Token(Token = "0x6000A32")]
	[Address(RVA = "0xEB6B94", Offset = "0xEB6B94", VA = "0xEB6B94")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000A33")]
	[Address(RVA = "0xEB6CEC", Offset = "0xEB6CEC", VA = "0xEB6CEC")]
	public RepeatOnboardingButton()
	{
	}
}
[Token(Token = "0x200020D")]
public class PageFlipper : MonoBehaviour
{
	[Token(Token = "0x4000AE0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Animator animator;

	[Token(Token = "0x4000AE1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector3 yForwardRotationStart;

	[Token(Token = "0x4000AE2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public Vector3 yBackwardRotationStart;

	[Token(Token = "0x6000A34")]
	[Address(RVA = "0xEB6CFC", Offset = "0xEB6CFC", VA = "0xEB6CFC")]
	public void FlipForward()
	{
	}

	[Token(Token = "0x6000A35")]
	[Address(RVA = "0xEB6D78", Offset = "0xEB6D78", VA = "0xEB6D78")]
	public void FlipBackward()
	{
	}

	[Token(Token = "0x6000A36")]
	[Address(RVA = "0xEB6DF4", Offset = "0xEB6DF4", VA = "0xEB6DF4")]
	public PageFlipper()
	{
	}
}
[Token(Token = "0x200020E")]
public class PalmMenuManager : MonoBehaviour
{
	[Token(Token = "0x200020F")]
	[CompilerGenerated]
	private sealed class <DoStartGripTimer>d__19 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000AF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000AF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000AF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PalmMenuManager <>4__this;

		[Token(Token = "0x4000AF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <gripTimer>5__2;

		[Token(Token = "0x17000147")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000A4D")]
			[Address(RVA = "0xEB8710", Offset = "0xEB8710", VA = "0xEB8710", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000148")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000A4F")]
			[Address(RVA = "0xEB8758", Offset = "0xEB8758", VA = "0xEB8758", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A4A")]
		[Address(RVA = "0xEB7394", Offset = "0xEB7394", VA = "0xEB7394")]
		[DebuggerHidden]
		public <DoStartGripTimer>d__19(int <>1__state)
		{
		}

		[Token(Token = "0x6000A4B")]
		[Address(RVA = "0xEB8664", Offset = "0xEB8664", VA = "0xEB8664", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000A4C")]
		[Address(RVA = "0xEB8668", Offset = "0xEB8668", VA = "0xEB8668", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A4E")]
		[Address(RVA = "0xEB8718", Offset = "0xEB8718", VA = "0xEB8718", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000210")]
	[CompilerGenerated]
	private sealed class <OpenMenu>d__26 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000AF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000AF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000AF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PalmMenuManager <>4__this;

		[Token(Token = "0x4000AFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<GameObject>.Enumerator <>7__wrap1;

		[Token(Token = "0x17000149")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000A54")]
			[Address(RVA = "0xEB8B30", Offset = "0xEB8B30", VA = "0xEB8B30", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700014A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000A56")]
			[Address(RVA = "0xEB8B78", Offset = "0xEB8B78", VA = "0xEB8B78", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A50")]
		[Address(RVA = "0xEB7E6C", Offset = "0xEB7E6C", VA = "0xEB7E6C")]
		[DebuggerHidden]
		public <OpenMenu>d__26(int <>1__state)
		{
		}

		[Token(Token = "0x6000A51")]
		[Address(RVA = "0xEB8760", Offset = "0xEB8760", VA = "0xEB8760", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000A52")]
		[Address(RVA = "0xEB877C", Offset = "0xEB877C", VA = "0xEB877C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A53")]
		[Address(RVA = "0xEB8AE0", Offset = "0xEB8AE0", VA = "0xEB8AE0")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x6000A55")]
		[Address(RVA = "0xEB8B38", Offset = "0xEB8B38", VA = "0xEB8B38", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000AE3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioSource bookPopNoise;

	[Token(Token = "0x4000AE4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public DeckManager deckManager;

	[Token(Token = "0x4000AE5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject deckPrefab;

	[Token(Token = "0x4000AE6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform[] spawnPoints;

	[Token(Token = "0x4000AE7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Autohand.Hand menuHand;

	[Token(Token = "0x4000AE8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Autohand.Hand grabbingHand;

	[Token(Token = "0x4000AE9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject yesObject;

	[Token(Token = "0x4000AEA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject noObject;

	[Token(Token = "0x4000AEB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private List<GameObject> spawnedDecks;

	[Token(Token = "0x4000AEC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool menuIsOpen;

	[Token(Token = "0x4000AED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private Vector3 origObjectScale;

	[Token(Token = "0x4000AEE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float origHandReachDistance;

	[Token(Token = "0x4000AEF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private bool awaitingYesOrNoChoice;

	[Token(Token = "0x4000AF0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private List<GameObject> itemsInMenu;

	[Token(Token = "0x4000AF1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private bool gripButtonWasPressedWithinThreshold;

	[Token(Token = "0x4000AF2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private float gripButtonWaitTime;

	[Token(Token = "0x6000A37")]
	[Address(RVA = "0xEB6DFC", Offset = "0xEB6DFC", VA = "0xEB6DFC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A38")]
	[Address(RVA = "0xEB70FC", Offset = "0xEB70FC", VA = "0xEB70FC")]
	private void FullReset()
	{
	}

	[Token(Token = "0x6000A39")]
	[Address(RVA = "0xEB72C4", Offset = "0xEB72C4", VA = "0xEB72C4")]
	public void StartGripTimer()
	{
	}

	[Token(Token = "0x6000A3A")]
	[Address(RVA = "0xEB7320", Offset = "0xEB7320", VA = "0xEB7320")]
	[IteratorStateMachine(typeof(<DoStartGripTimer>d__19))]
	private IEnumerator DoStartGripTimer()
	{
		return null;
	}

	[Token(Token = "0x6000A3B")]
	[Address(RVA = "0xEB7100", Offset = "0xEB7100", VA = "0xEB7100")]
	private void ResetMenuItems()
	{
	}

	[Token(Token = "0x6000A3C")]
	[Address(RVA = "0xEB73BC", Offset = "0xEB73BC", VA = "0xEB73BC")]
	private void RemoveGameObjectFromList(GameObject go)
	{
	}

	[Token(Token = "0x6000A3D")]
	[Address(RVA = "0xEB7470", Offset = "0xEB7470", VA = "0xEB7470")]
	private void ResetObjectScale(GameObject go)
	{
	}

	[Token(Token = "0x6000A3E")]
	[Address(RVA = "0xEB751C", Offset = "0xEB751C", VA = "0xEB751C")]
	private void AnimateIn(GameObject go)
	{
	}

	[Token(Token = "0x6000A3F")]
	[Address(RVA = "0xEB793C", Offset = "0xEB793C", VA = "0xEB793C")]
	private void ResetObject(GameObject go)
	{
	}

	[Token(Token = "0x6000A40")]
	[Address(RVA = "0xEB7A48", Offset = "0xEB7A48", VA = "0xEB7A48")]
	private void SpawnYesNoObjectsIntoPalmPositions()
	{
	}

	[Token(Token = "0x6000A41")]
	[Address(RVA = "0xEB7DF8", Offset = "0xEB7DF8", VA = "0xEB7DF8")]
	[IteratorStateMachine(typeof(<OpenMenu>d__26))]
	private IEnumerator OpenMenu()
	{
		return null;
	}

	[Token(Token = "0x6000A42")]
	[Address(RVA = "0xEB7E94", Offset = "0xEB7E94", VA = "0xEB7E94")]
	private void PopulateSpawnedDecks()
	{
	}

	[Token(Token = "0x6000A43")]
	[Address(RVA = "0xEB817C", Offset = "0xEB817C", VA = "0xEB817C")]
	private void CloseMenu()
	{
	}

	[Token(Token = "0x6000A44")]
	[Address(RVA = "0xEB83D4", Offset = "0xEB83D4", VA = "0xEB83D4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000A45")]
	[Address(RVA = "0xEB8584", Offset = "0xEB8584", VA = "0xEB8584")]
	public PalmMenuManager()
	{
	}
}
[Token(Token = "0x2000211")]
public class PanpipeController : MonoBehaviour
{
	[Token(Token = "0x2000212")]
	[CompilerGenerated]
	private sealed class <CheckPipeIsPlaying>d__13 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000B06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000B07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000B08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PanpipeController <>4__this;

		[Token(Token = "0x1700014B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000A63")]
			[Address(RVA = "0xEB92EC", Offset = "0xEB92EC", VA = "0xEB92EC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700014C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000A65")]
			[Address(RVA = "0xEB9334", Offset = "0xEB9334", VA = "0xEB9334", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A60")]
		[Address(RVA = "0xEB8DBC", Offset = "0xEB8DBC", VA = "0xEB8DBC")]
		[DebuggerHidden]
		public <CheckPipeIsPlaying>d__13(int <>1__state)
		{
		}

		[Token(Token = "0x6000A61")]
		[Address(RVA = "0xEB91B0", Offset = "0xEB91B0", VA = "0xEB91B0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000A62")]
		[Address(RVA = "0xEB91B4", Offset = "0xEB91B4", VA = "0xEB91B4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A64")]
		[Address(RVA = "0xEB92F4", Offset = "0xEB92F4", VA = "0xEB92F4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000213")]
	[CompilerGenerated]
	private sealed class <WaitAndTriggerPlayedForTime>d__17 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000B09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000B0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000B0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PanpipeController <>4__this;

		[Token(Token = "0x1700014D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000A69")]
			[Address(RVA = "0xEB941C", Offset = "0xEB941C", VA = "0xEB941C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700014E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000A6B")]
			[Address(RVA = "0xEB9464", Offset = "0xEB9464", VA = "0xEB9464", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A66")]
		[Address(RVA = "0xEB90D8", Offset = "0xEB90D8", VA = "0xEB90D8")]
		[DebuggerHidden]
		public <WaitAndTriggerPlayedForTime>d__17(int <>1__state)
		{
		}

		[Token(Token = "0x6000A67")]
		[Address(RVA = "0xEB933C", Offset = "0xEB933C", VA = "0xEB933C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000A68")]
		[Address(RVA = "0xEB9340", Offset = "0xEB9340", VA = "0xEB9340", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A6A")]
		[Address(RVA = "0xEB9424", Offset = "0xEB9424", VA = "0xEB9424", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000214")]
	[CompilerGenerated]
	private sealed class <WaitAndCancelPlayTimer>d__18 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000B0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000B0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000B0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PanpipeController <>4__this;

		[Token(Token = "0x1700014F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000A6F")]
			[Address(RVA = "0xEB9550", Offset = "0xEB9550", VA = "0xEB9550", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000150")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000A71")]
			[Address(RVA = "0xEB9598", Offset = "0xEB9598", VA = "0xEB9598", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A6C")]
		[Address(RVA = "0xEB9100", Offset = "0xEB9100", VA = "0xEB9100")]
		[DebuggerHidden]
		public <WaitAndCancelPlayTimer>d__18(int <>1__state)
		{
		}

		[Token(Token = "0x6000A6D")]
		[Address(RVA = "0xEB946C", Offset = "0xEB946C", VA = "0xEB946C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000A6E")]
		[Address(RVA = "0xEB9470", Offset = "0xEB9470", VA = "0xEB9470", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A70")]
		[Address(RVA = "0xEB9558", Offset = "0xEB9558", VA = "0xEB9558", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000AFB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform lips;

	[Token(Token = "0x4000AFC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Grabbable grabbable;

	[Token(Token = "0x4000AFD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ParticleSystem[] windParticles;

	[Token(Token = "0x4000AFE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public RotateToFaceObject rotator;

	[Token(Token = "0x4000AFF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public PanpipePipe[] pipes;

	[Token(Token = "0x4000B00")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float neededPlayTime;

	[Token(Token = "0x4000B01")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float playingTimeoutSecs;

	[Token(Token = "0x4000B02")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public SimpleTriggerBridge playedTrigger;

	[Token(Token = "0x4000B03")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private List<ParticleSystem.EmissionModule> emitters;

	[Token(Token = "0x4000B04")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Coroutine playingTimer;

	[Token(Token = "0x4000B05")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Coroutine playingTimeoutTimer;

	[Token(Token = "0x6000A57")]
	[Address(RVA = "0xEB8B80", Offset = "0xEB8B80", VA = "0xEB8B80")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A58")]
	[Address(RVA = "0xEB8C7C", Offset = "0xEB8C7C", VA = "0xEB8C7C")]
	public void SetLipsParent()
	{
	}

	[Token(Token = "0x6000A59")]
	[Address(RVA = "0xEB8D48", Offset = "0xEB8D48", VA = "0xEB8D48")]
	[IteratorStateMachine(typeof(<CheckPipeIsPlaying>d__13))]
	private IEnumerator CheckPipeIsPlaying()
	{
		return null;
	}

	[Token(Token = "0x6000A5A")]
	[Address(RVA = "0xEB8DE4", Offset = "0xEB8DE4", VA = "0xEB8DE4")]
	private void EnableParticles(bool enable)
	{
	}

	[Token(Token = "0x6000A5B")]
	[Address(RVA = "0xEB8EA0", Offset = "0xEB8EA0", VA = "0xEB8EA0")]
	public void ResetLipsParent()
	{
	}

	[Token(Token = "0x6000A5C")]
	[Address(RVA = "0xEB8F38", Offset = "0xEB8F38", VA = "0xEB8F38")]
	private void ToggleSongPlayedTimer(bool playing)
	{
	}

	[Token(Token = "0x6000A5D")]
	[Address(RVA = "0xEB8FF0", Offset = "0xEB8FF0", VA = "0xEB8FF0")]
	[IteratorStateMachine(typeof(<WaitAndTriggerPlayedForTime>d__17))]
	private IEnumerator WaitAndTriggerPlayedForTime()
	{
		return null;
	}

	[Token(Token = "0x6000A5E")]
	[Address(RVA = "0xEB9064", Offset = "0xEB9064", VA = "0xEB9064")]
	[IteratorStateMachine(typeof(<WaitAndCancelPlayTimer>d__18))]
	private IEnumerator WaitAndCancelPlayTimer()
	{
		return null;
	}

	[Token(Token = "0x6000A5F")]
	[Address(RVA = "0xEB9128", Offset = "0xEB9128", VA = "0xEB9128")]
	public PanpipeController()
	{
	}
}
[Token(Token = "0x2000215")]
public class PanpipePipe : MonoBehaviour
{
	[Token(Token = "0x2000216")]
	[CompilerGenerated]
	private sealed class <PlayTimer>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000B13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000B14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000B15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PanpipePipe <>4__this;

		[Token(Token = "0x17000151")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000A7A")]
			[Address(RVA = "0xEB98E4", Offset = "0xEB98E4", VA = "0xEB98E4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000152")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000A7C")]
			[Address(RVA = "0xEB992C", Offset = "0xEB992C", VA = "0xEB992C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A77")]
		[Address(RVA = "0xEB97FC", Offset = "0xEB97FC", VA = "0xEB97FC")]
		[DebuggerHidden]
		public <PlayTimer>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x6000A78")]
		[Address(RVA = "0xEB982C", Offset = "0xEB982C", VA = "0xEB982C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000A79")]
		[Address(RVA = "0xEB9830", Offset = "0xEB9830", VA = "0xEB9830", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A7B")]
		[Address(RVA = "0xEB98EC", Offset = "0xEB98EC", VA = "0xEB98EC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000B0F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioSource audioSource;

	[Token(Token = "0x4000B10")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MusicNote note;

	[Token(Token = "0x4000B11")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool isPlaying;

	[Token(Token = "0x4000B12")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float origVolume;

	[Token(Token = "0x6000A72")]
	[Address(RVA = "0xEB95A0", Offset = "0xEB95A0", VA = "0xEB95A0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A73")]
	[Address(RVA = "0xEB962C", Offset = "0xEB962C", VA = "0xEB962C")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000A74")]
	[Address(RVA = "0xEB975C", Offset = "0xEB975C", VA = "0xEB975C")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000A75")]
	[Address(RVA = "0xEB96E8", Offset = "0xEB96E8", VA = "0xEB96E8")]
	[IteratorStateMachine(typeof(<PlayTimer>d__7))]
	private IEnumerator PlayTimer()
	{
		return null;
	}

	[Token(Token = "0x6000A76")]
	[Address(RVA = "0xEB9824", Offset = "0xEB9824", VA = "0xEB9824")]
	public PanpipePipe()
	{
	}
}
[Token(Token = "0x2000217")]
public class ParticleHelper : MonoBehaviour
{
	[Token(Token = "0x2000218")]
	[CompilerGenerated]
	private sealed class <Start>d__5 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000B1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000B1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000B1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ParticleHelper <>4__this;

		[Token(Token = "0x17000153")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000A84")]
			[Address(RVA = "0xEB9D34", Offset = "0xEB9D34", VA = "0xEB9D34", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000154")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000A86")]
			[Address(RVA = "0xEB9D7C", Offset = "0xEB9D7C", VA = "0xEB9D7C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A81")]
		[Address(RVA = "0xEB9A00", Offset = "0xEB9A00", VA = "0xEB9A00")]
		[DebuggerHidden]
		public <Start>d__5(int <>1__state)
		{
		}

		[Token(Token = "0x6000A82")]
		[Address(RVA = "0xEB9B14", Offset = "0xEB9B14", VA = "0xEB9B14", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000A83")]
		[Address(RVA = "0xEB9B18", Offset = "0xEB9B18", VA = "0xEB9B18", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A85")]
		[Address(RVA = "0xEB9D3C", Offset = "0xEB9D3C", VA = "0xEB9D3C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000B16")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private ParticleSystem[] particleSystems;

	[Token(Token = "0x4000B17")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float timeToStopParticles;

	[Token(Token = "0x4000B18")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float timeToStopEmitting;

	[Token(Token = "0x4000B19")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float timeToDie;

	[Token(Token = "0x6000A7D")]
	[Address(RVA = "0xEB9934", Offset = "0xEB9934", VA = "0xEB9934")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000A7E")]
	[Address(RVA = "0xEB998C", Offset = "0xEB998C", VA = "0xEB998C")]
	[IteratorStateMachine(typeof(<Start>d__5))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x6000A7F")]
	[Address(RVA = "0xEB9A28", Offset = "0xEB9A28", VA = "0xEB9A28")]
	public void EnableEmission(bool enable)
	{
	}

	[Token(Token = "0x6000A80")]
	[Address(RVA = "0xEB9B0C", Offset = "0xEB9B0C", VA = "0xEB9B0C")]
	public ParticleHelper()
	{
	}
}
[Token(Token = "0x2000219")]
public class NodeList : MonoBehaviour
{
	[Token(Token = "0x4000B1D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<Pathfinding.Node> nodes;

	[Token(Token = "0x6000A87")]
	[Address(RVA = "0xEB9D84", Offset = "0xEB9D84", VA = "0xEB9D84")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000A88")]
	[Address(RVA = "0xEB9DF4", Offset = "0xEB9DF4", VA = "0xEB9DF4")]
	public NodeList()
	{
	}
}
[Token(Token = "0x200021A")]
public class PropPositionList : MonoBehaviour
{
	[Token(Token = "0x4000B1E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<Transform> positions;

	[Token(Token = "0x6000A89")]
	[Address(RVA = "0xEB9DFC", Offset = "0xEB9DFC", VA = "0xEB9DFC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000A8A")]
	[Address(RVA = "0xEB9E6C", Offset = "0xEB9E6C", VA = "0xEB9E6C")]
	public PropPositionList()
	{
	}
}
[Token(Token = "0x200021B")]
public class OculusPerformanceManager : MonoBehaviour
{
	[Token(Token = "0x6000A8B")]
	[Address(RVA = "0xEB9E74", Offset = "0xEB9E74", VA = "0xEB9E74")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000A8C")]
	[Address(RVA = "0xEB9EC8", Offset = "0xEB9EC8", VA = "0xEB9EC8")]
	public OculusPerformanceManager()
	{
	}
}
[Token(Token = "0x200021C")]
public class PlacementPuzzlePiece : MonoBehaviour
{
	[Token(Token = "0x4000B1F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform centerTransform;

	[Token(Token = "0x4000B20")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform targetLocation;

	[Token(Token = "0x4000B21")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform connectionLocation;

	[Token(Token = "0x4000B22")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Grabbable thisGrabbable;

	[Token(Token = "0x4000B23")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Rigidbody thisRigidbody;

	[Token(Token = "0x4000B24")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool hasBeenPlaced;

	[Token(Token = "0x4000B25")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	private bool currentlyMoving;

	[Token(Token = "0x4000B26")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
	private bool hasJoint;

	[Token(Token = "0x4000B27")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private GameObject currentSelectingFinger;

	[Token(Token = "0x6000A8D")]
	[Address(RVA = "0xEB9ED0", Offset = "0xEB9ED0", VA = "0xEB9ED0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A8E")]
	[Address(RVA = "0xEB9FB0", Offset = "0xEB9FB0", VA = "0xEB9FB0")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000A8F")]
	[Address(RVA = "0xEBA154", Offset = "0xEBA154", VA = "0xEBA154")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6000A90")]
	[Address(RVA = "0xEBA1EC", Offset = "0xEBA1EC", VA = "0xEBA1EC")]
	private void UpdateMovement()
	{
	}

	[Token(Token = "0x6000A91")]
	[Address(RVA = "0xEBA2E4", Offset = "0xEBA2E4", VA = "0xEBA2E4")]
	private void OnCollisionExit(Collision other)
	{
	}

	[Token(Token = "0x6000A92")]
	[Address(RVA = "0xEBA0FC", Offset = "0xEBA0FC", VA = "0xEBA0FC")]
	private void PiecePlacedForPuzzle()
	{
	}

	[Token(Token = "0x6000A93")]
	[Address(RVA = "0xEBA3C0", Offset = "0xEBA3C0", VA = "0xEBA3C0")]
	private void MakeNewConection()
	{
	}

	[Token(Token = "0x6000A94")]
	[Address(RVA = "0xEBA56C", Offset = "0xEBA56C", VA = "0xEBA56C")]
	private void UpdateOreintation()
	{
	}

	[Token(Token = "0x6000A95")]
	[Address(RVA = "0xEBA610", Offset = "0xEBA610", VA = "0xEBA610")]
	private void Update()
	{
	}

	[Token(Token = "0x6000A96")]
	[Address(RVA = "0xEBA648", Offset = "0xEBA648", VA = "0xEBA648")]
	public PlacementPuzzlePiece()
	{
	}
}
[Token(Token = "0x200021D")]
public class PointerController : MonoBehaviour
{
	[Token(Token = "0x4000B28")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LineRenderer line;

	[Token(Token = "0x4000B29")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public LayerMask layerMask;

	[Token(Token = "0x4000B2A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject hitBall;

	[Token(Token = "0x6000A97")]
	[Address(RVA = "0xEBA650", Offset = "0xEBA650", VA = "0xEBA650")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A98")]
	[Address(RVA = "0xEBA670", Offset = "0xEBA670", VA = "0xEBA670")]
	private void AlignLineRenderer(LineRenderer lineRenderer)
	{
	}

	[Token(Token = "0x6000A99")]
	[Address(RVA = "0xEBA7A4", Offset = "0xEBA7A4", VA = "0xEBA7A4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000A9A")]
	[Address(RVA = "0xEBA7A8", Offset = "0xEBA7A8", VA = "0xEBA7A8")]
	public PointerController()
	{
	}
}
[Token(Token = "0x200021E")]
public class PointingHandIndicatorEffect : MonoBehaviour
{
	[Token(Token = "0x2000220")]
	[CompilerGenerated]
	private sealed class <co_PerformVisualEffect>d__31 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000B46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000B47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000B48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PointingHandIndicatorEffect <>4__this;

		[Token(Token = "0x17000155")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000AB0")]
			[Address(RVA = "0xEBCF10", Offset = "0xEBCF10", VA = "0xEBCF10", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000156")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000AB2")]
			[Address(RVA = "0xEBCF58", Offset = "0xEBCF58", VA = "0xEBCF58", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000AAD")]
		[Address(RVA = "0xEBC0BC", Offset = "0xEBC0BC", VA = "0xEBC0BC")]
		[DebuggerHidden]
		public <co_PerformVisualEffect>d__31(int <>1__state)
		{
		}

		[Token(Token = "0x6000AAE")]
		[Address(RVA = "0xEBCAC4", Offset = "0xEBCAC4", VA = "0xEBCAC4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000AAF")]
		[Address(RVA = "0xEBCAC8", Offset = "0xEBCAC8", VA = "0xEBCAC8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000AB1")]
		[Address(RVA = "0xEBCF18", Offset = "0xEBCF18", VA = "0xEBCF18", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000223")]
	[CompilerGenerated]
	private sealed class <co_PerformAnimatedActionAtPercentage>d__35 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000B50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000B51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000B52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float delay;

		[Token(Token = "0x4000B53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float duration;

		[Token(Token = "0x4000B54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action<float> animationAction;

		[Token(Token = "0x4000B55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float startVal;

		[Token(Token = "0x4000B56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float endVal;

		[Token(Token = "0x4000B57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float <startTime>5__2;

		[Token(Token = "0x17000157")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000ABA")]
			[Address(RVA = "0xEBD3C8", Offset = "0xEBD3C8", VA = "0xEBD3C8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000158")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000ABC")]
			[Address(RVA = "0xEBD410", Offset = "0xEBD410", VA = "0xEBD410", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000AB7")]
		[Address(RVA = "0xEBC5B0", Offset = "0xEBC5B0", VA = "0xEBC5B0")]
		[DebuggerHidden]
		public <co_PerformAnimatedActionAtPercentage>d__35(int <>1__state)
		{
		}

		[Token(Token = "0x6000AB8")]
		[Address(RVA = "0xEBD244", Offset = "0xEBD244", VA = "0xEBD244", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000AB9")]
		[Address(RVA = "0xEBD248", Offset = "0xEBD248", VA = "0xEBD248", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000ABB")]
		[Address(RVA = "0xEBD3D0", Offset = "0xEBD3D0", VA = "0xEBD3D0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000B2B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform transformToPointTo;

	[Token(Token = "0x4000B2C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform playerTransform;

	[Token(Token = "0x4000B2D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float autoStopOnPlayerDistance;

	[Token(Token = "0x4000B2E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private bool keepPulsingHand;

	[Token(Token = "0x4000B2F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private ParticleSystem backgrondGlowParticles;

	[Token(Token = "0x4000B30")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private ParticleSystem inwardPreSpawnParticles;

	[Token(Token = "0x4000B31")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private ParticleSystem spawnParticles;

	[Token(Token = "0x4000B32")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private ParticleSystem disappearParticles;

	[Token(Token = "0x4000B33")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private AudioSource spawnAudioSource;

	[Token(Token = "0x4000B34")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private AudioSource pointAudioSource;

	[Token(Token = "0x4000B35")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private AudioSource disappearAudioSource;

	[Token(Token = "0x4000B36")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private LineRenderer lineToObjectIndicator;

	[Token(Token = "0x4000B37")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private Transform handHolderTransform;

	[Token(Token = "0x4000B38")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private float preSpawnWaitDuration;

	[Token(Token = "0x4000B39")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	[SerializeField]
	private float startHandPulseDelay;

	[Token(Token = "0x4000B3A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private float durationBetweenHandPulses;

	[Token(Token = "0x4000B3B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	[SerializeField]
	private bool useLines;

	[Token(Token = "0x4000B3C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x85")]
	[SerializeField]
	private bool shouldHighlightProps;

	[Token(Token = "0x4000B3D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public float sphereCollisionDetectionSize;

	[Token(Token = "0x4000B3E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	[SerializeField]
	private LayerMask collisionDetectionLayers;

	[Token(Token = "0x4000B3F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Transform holderReferenceTransform;

	[Token(Token = "0x4000B40")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Vector3 handHolderStartPosition;

	[Token(Token = "0x4000B41")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Coroutine indicatorCoroutine;

	[Token(Token = "0x6000A9B")]
	[Address(RVA = "0xEBB7B0", Offset = "0xEBB7B0", VA = "0xEBB7B0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000A9C")]
	[Address(RVA = "0xEBB7DC", Offset = "0xEBB7DC", VA = "0xEBB7DC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A9D")]
	[Address(RVA = "0xEBB944", Offset = "0xEBB944", VA = "0xEBB944")]
	private void HighlightProp(Transform propTransform)
	{
	}

	[Token(Token = "0x6000A9E")]
	[Address(RVA = "0xEBB9DC", Offset = "0xEBB9DC", VA = "0xEBB9DC")]
	public void BeginIndicatingAtTransformRelativeToPlayerTransform(Transform thingToIndicate, Transform playerRefTransform, float distance = 0.5f)
	{
	}

	[Token(Token = "0x6000A9F")]
	[Address(RVA = "0xEBBF10", Offset = "0xEBBF10", VA = "0xEBBF10")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6000AA0")]
	[Address(RVA = "0xEBBF5C", Offset = "0xEBBF5C", VA = "0xEBBF5C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000AA1")]
	[Address(RVA = "0xEBBF60", Offset = "0xEBBF60", VA = "0xEBBF60")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000AA2")]
	[Address(RVA = "0xEBBEBC", Offset = "0xEBBEBC", VA = "0xEBBEBC")]
	public void PerformVisualEffect()
	{
	}

	[Token(Token = "0x6000AA3")]
	[Address(RVA = "0xEBC048", Offset = "0xEBC048", VA = "0xEBC048")]
	[IteratorStateMachine(typeof(<co_PerformVisualEffect>d__31))]
	private IEnumerator co_PerformVisualEffect()
	{
		return null;
	}

	[Token(Token = "0x6000AA4")]
	[Address(RVA = "0xEBC0E4", Offset = "0xEBC0E4", VA = "0xEBC0E4")]
	private void PerformHandPointDoublePulse()
	{
	}

	[Token(Token = "0x6000AA5")]
	[Address(RVA = "0xEBC138", Offset = "0xEBC138", VA = "0xEBC138")]
	private void DoHandMoveAnimation(bool outward, float duration = 0.2f, float delay = 0f)
	{
	}

	[Token(Token = "0x6000AA6")]
	[Address(RVA = "0xEBC4EC", Offset = "0xEBC4EC", VA = "0xEBC4EC")]
	private Coroutine PerformAnimatedActionAtPercentage(Action<float> animationAction, float duration = 1f, float startVal = 0f, float endVal = 1f, float delay = 0f)
	{
		return null;
	}

	[Token(Token = "0x6000AA7")]
	[Address(RVA = "0xEBC514", Offset = "0xEBC514", VA = "0xEBC514")]
	[IteratorStateMachine(typeof(<co_PerformAnimatedActionAtPercentage>d__35))]
	private IEnumerator co_PerformAnimatedActionAtPercentage(Action<float> animationAction, float duration = 1f, float startVal = 0f, float endVal = 1f, float delay = 0f)
	{
		return null;
	}

	[Token(Token = "0x6000AA8")]
	[Address(RVA = "0xEBC5D8", Offset = "0xEBC5D8", VA = "0xEBC5D8")]
	[ContextMenu("Disable colliders")]
	public void DisableColliders()
	{
	}

	[Token(Token = "0x6000AA9")]
	[Address(RVA = "0xEBC5F8", Offset = "0xEBC5F8", VA = "0xEBC5F8")]
	private void DisableCollidersInTransform(Transform root)
	{
	}

	[Token(Token = "0x6000AAA")]
	[Address(RVA = "0xEBC944", Offset = "0xEBC944", VA = "0xEBC944")]
	public PointingHandIndicatorEffect()
	{
	}
}
[Token(Token = "0x2000224")]
[ExecuteInEditMode]
public class PrefabAABB : MonoBehaviour
{
	[Token(Token = "0x4000B58")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Bounds bounds;

	[Token(Token = "0x4000B59")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform _transform;

	[Token(Token = "0x4000B5A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector3 gizmoCenter;

	[Token(Token = "0x4000B5B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private Vector3 gizmoExtent;

	[Token(Token = "0x6000ABD")]
	[Address(RVA = "0xEBD418", Offset = "0xEBD418", VA = "0xEBD418")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6000ABE")]
	[Address(RVA = "0xEBD494", Offset = "0xEBD494", VA = "0xEBD494")]
	private void Reset()
	{
	}

	[Token(Token = "0x6000ABF")]
	[Address(RVA = "0xEBD8EC", Offset = "0xEBD8EC", VA = "0xEBD8EC")]
	public Bounds WorldBounds()
	{
		return default(Bounds);
	}

	[Token(Token = "0x6000AC0")]
	[Address(RVA = "0xEBDA44", Offset = "0xEBDA44", VA = "0xEBDA44")]
	[ContextMenu("Recalculate Bounds")]
	public void RecalculateBounds()
	{
	}

	[Token(Token = "0x6000AC1")]
	[Address(RVA = "0xEBD498", Offset = "0xEBD498", VA = "0xEBD498")]
	public void RecalculateBounds2()
	{
	}

	[Token(Token = "0x6000AC2")]
	[Address(RVA = "0xEBDC90", Offset = "0xEBDC90", VA = "0xEBDC90")]
	public PrefabAABB()
	{
	}
}
[Token(Token = "0x2000225")]
public class PropCatcher : MonoBehaviour
{
	[Token(Token = "0x6000AC3")]
	[Address(RVA = "0xEBDC98", Offset = "0xEBDC98", VA = "0xEBDC98")]
	private void OnCollisionEnter(Collision other)
	{
	}

	[Token(Token = "0x6000AC4")]
	[Address(RVA = "0xEBDE4C", Offset = "0xEBDE4C", VA = "0xEBDE4C")]
	public PropCatcher()
	{
	}
}
[Token(Token = "0x2000226")]
public class PropHighlighter : MonoBehaviour
{
	[Token(Token = "0x4000B5C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ParticleHelper particleHelper;

	[Token(Token = "0x4000B5D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Transform currentProp;

	[Token(Token = "0x4000B5E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Transform thisTransform;

	[Token(Token = "0x6000AC5")]
	[Address(RVA = "0xEBDE54", Offset = "0xEBDE54", VA = "0xEBDE54")]
	private void Start()
	{
	}

	[Token(Token = "0x6000AC6")]
	[Address(RVA = "0xEBE090", Offset = "0xEBE090", VA = "0xEBE090")]
	private void StopHighlightingProp(bool allCardsCompleted)
	{
	}

	[Token(Token = "0x6000AC7")]
	[Address(RVA = "0xEBE0C4", Offset = "0xEBE0C4", VA = "0xEBE0C4")]
	private void ProcessOnPropPickup(ManagedProp prop)
	{
	}

	[Token(Token = "0x6000AC8")]
	[Address(RVA = "0xEBE248", Offset = "0xEBE248", VA = "0xEBE248")]
	private void HighlightProp(Transform prop)
	{
	}

	[Token(Token = "0x6000AC9")]
	[Address(RVA = "0xEBE42C", Offset = "0xEBE42C", VA = "0xEBE42C")]
	public Transform CurrentHighlightedTransform()
	{
		return null;
	}

	[Token(Token = "0x6000ACA")]
	[Address(RVA = "0xEBE434", Offset = "0xEBE434", VA = "0xEBE434")]
	public void OnDestroy()
	{
	}

	[Token(Token = "0x6000ACB")]
	[Address(RVA = "0xEBE4F0", Offset = "0xEBE4F0", VA = "0xEBE4F0")]
	public PropHighlighter()
	{
	}
}
[Token(Token = "0x2000227")]
public class PropPositions : MonoBehaviour
{
	[Token(Token = "0x4000B5F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform[] positions;

	[Token(Token = "0x6000ACC")]
	[Address(RVA = "0xEBE4F8", Offset = "0xEBE4F8", VA = "0xEBE4F8")]
	public PropPositions()
	{
	}
}
[Token(Token = "0x2000228")]
public class PropSpawner : MonoBehaviour
{
	[Token(Token = "0x2000229")]
	public class ManagedPropRequest
	{
		[Token(Token = "0x4000B6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public CardPackage card;

		[Token(Token = "0x4000B70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Action<ManagedProp> callback;

		[Token(Token = "0x4000B71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool enableCollider;

		[Token(Token = "0x4000B72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool suppressPositionSave;

		[Token(Token = "0x6000AE2")]
		[Address(RVA = "0xEBF648", Offset = "0xEBF648", VA = "0xEBF648")]
		public ManagedPropRequest(CardPackage card, Action<ManagedProp> callback, bool enableCollider, bool suppressPositionSave)
		{
		}
	}

	[Token(Token = "0x200022A")]
	[CompilerGenerated]
	private sealed class <co_CatchAsyncLoadedPropAsset>d__23 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000B73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000B74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000B75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PropSpawner <>4__this;

		[Token(Token = "0x4000B76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Guid requestId;

		[Token(Token = "0x4000B77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject prefab;

		[Token(Token = "0x4000B78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private ManagedPropRequest <thisRequest>5__2;

		[Token(Token = "0x4000B79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private GameObject <newProp>5__3;

		[Token(Token = "0x17000159")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000AE6")]
			[Address(RVA = "0xEC0030", Offset = "0xEC0030", VA = "0xEC0030", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700015A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000AE8")]
			[Address(RVA = "0xEC0078", Offset = "0xEC0078", VA = "0xEC0078", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000AE3")]
		[Address(RVA = "0xEBF76C", Offset = "0xEBF76C", VA = "0xEBF76C")]
		[DebuggerHidden]
		public <co_CatchAsyncLoadedPropAsset>d__23(int <>1__state)
		{
		}

		[Token(Token = "0x6000AE4")]
		[Address(RVA = "0xEBFC58", Offset = "0xEBFC58", VA = "0xEBFC58", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000AE5")]
		[Address(RVA = "0xEBFC5C", Offset = "0xEBFC5C", VA = "0xEBFC5C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000AE7")]
		[Address(RVA = "0xEC0038", Offset = "0xEC0038", VA = "0xEC0038", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200022B")]
	[CompilerGenerated]
	private sealed class <DoSpawnProps>d__28 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000B7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000B7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000B7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CardStack propList;

		[Token(Token = "0x4000B7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ManagedProp nestingParent;

		[Token(Token = "0x4000B7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public PropSpawner <>4__this;

		[Token(Token = "0x4000B7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public List<Transform> nestedPropPositions;

		[Token(Token = "0x4000B80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool suppressPositionSave;

		[Token(Token = "0x4000B81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Room <currentRoom>5__2;

		[Token(Token = "0x4000B82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<Transform> <nestedPropPositionsCopy>5__3;

		[Token(Token = "0x4000B83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private List<ManagedProp> <stackTarget>5__4;

		[Token(Token = "0x4000B84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int <currentSectionIndex>5__5;

		[Token(Token = "0x4000B85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private List<List<Vector3>> <propPositionCopy>5__6;

		[Token(Token = "0x4000B86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool[] <propSectionExhausted>5__7;

		[Token(Token = "0x4000B87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private List<CardPackage>.Enumerator <>7__wrap7;

		[Token(Token = "0x4000B88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private CardPackage <prop>5__9;

		[Token(Token = "0x1700015B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000AED")]
			[Address(RVA = "0xEC1644", Offset = "0xEC1644", VA = "0xEC1644", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700015C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000AEF")]
			[Address(RVA = "0xEC168C", Offset = "0xEC168C", VA = "0xEC168C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000AE9")]
		[Address(RVA = "0xEBF970", Offset = "0xEBF970", VA = "0xEBF970")]
		[DebuggerHidden]
		public <DoSpawnProps>d__28(int <>1__state)
		{
		}

		[Token(Token = "0x6000AEA")]
		[Address(RVA = "0xEC0080", Offset = "0xEC0080", VA = "0xEC0080", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000AEB")]
		[Address(RVA = "0xEC00AC", Offset = "0xEC00AC", VA = "0xEC00AC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000AEC")]
		[Address(RVA = "0xEC15F4", Offset = "0xEC15F4", VA = "0xEC15F4")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x6000AEE")]
		[Address(RVA = "0xEC164C", Offset = "0xEC164C", VA = "0xEC164C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000B60")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ParticleSystem propPointer;

	[Token(Token = "0x4000B61")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector3 defaultLocation;

	[Token(Token = "0x4000B62")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioSource audioSource;

	[Token(Token = "0x4000B63")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool resetPropPositions;

	[Token(Token = "0x4000B64")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public List<ManagedProp> spawnedProps;

	[Token(Token = "0x4000B65")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private List<Transform> propPositionSections;

	[Token(Token = "0x4000B66")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private List<List<Vector3>> propPositions;

	[Token(Token = "0x4000B67")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private List<ManagedProp> currentlySpawnedNestedProps;

	[Token(Token = "0x4000B68")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Vector3 spawnCenter;

	[Token(Token = "0x4000B69")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public ManagedProp temporaryParentProp;

	[Token(Token = "0x4000B6A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private bool deckIsSpawning;

	[Token(Token = "0x4000B6B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Dictionary<Guid, ManagedPropRequest> managedPropRequests;

	[Token(Token = "0x4000B6C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private bool spawningProp;

	[Token(Token = "0x4000B6D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private ManagedProp lastSpawnedProp;

	[Token(Token = "0x4000B6E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private WaitForSeconds propSpawnDelay;

	[Token(Token = "0x6000ACD")]
	[Address(RVA = "0xEBE500", Offset = "0xEBE500", VA = "0xEBE500")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000ACE")]
	[Address(RVA = "0xEBECE8", Offset = "0xEBECE8", VA = "0xEBECE8")]
	private void PopulatePropPositions()
	{
	}

	[Token(Token = "0x6000ACF")]
	[Address(RVA = "0xEBEF14", Offset = "0xEBEF14", VA = "0xEBEF14")]
	private void ResetPropsForNewRun(bool allCardsCompleted)
	{
	}

	[Token(Token = "0x6000AD0")]
	[Address(RVA = "0xEBF118", Offset = "0xEBF118", VA = "0xEBF118")]
	private void ToggleLibraryProps(bool enable)
	{
	}

	[Token(Token = "0x6000AD1")]
	[Address(RVA = "0xEBF2D4", Offset = "0xEBF2D4", VA = "0xEBF2D4")]
	private void ClearLibraryProps()
	{
	}

	[Token(Token = "0x6000AD2")]
	[Address(RVA = "0xEBF4CC", Offset = "0xEBF4CC", VA = "0xEBF4CC")]
	private void SpawnProp(CardPackage prop, bool enableCollider, Action<ManagedProp> callback)
	{
	}

	[Token(Token = "0x6000AD3")]
	[Address(RVA = "0xEBF4DC", Offset = "0xEBF4DC", VA = "0xEBF4DC")]
	private void SpawnProp(CardPackage card, bool enableCollider, bool suppressPositionSave, Action<ManagedProp> callback)
	{
	}

	[Token(Token = "0x6000AD4")]
	[Address(RVA = "0xEBF6A8", Offset = "0xEBF6A8", VA = "0xEBF6A8")]
	private void CatchAsyncLoadedPropAsset(Guid requestId, GameObject prefab)
	{
	}

	[Token(Token = "0x6000AD5")]
	[Address(RVA = "0xEBF6C8", Offset = "0xEBF6C8", VA = "0xEBF6C8")]
	[IteratorStateMachine(typeof(<co_CatchAsyncLoadedPropAsset>d__23))]
	private IEnumerator co_CatchAsyncLoadedPropAsset(Guid requestId, GameObject prefab)
	{
		return null;
	}

	[Token(Token = "0x6000AD6")]
	[Address(RVA = "0xEBF794", Offset = "0xEBF794", VA = "0xEBF794")]
	private void SpawnRootProps(CardStack rootStack)
	{
	}

	[Token(Token = "0x6000AD7")]
	[Address(RVA = "0xEBF870", Offset = "0xEBF870", VA = "0xEBF870")]
	private void SpawnRootProps(CardStack rootStack, bool suppressPositionSave)
	{
	}

	[Token(Token = "0x6000AD8")]
	[Address(RVA = "0xEBF880", Offset = "0xEBF880", VA = "0xEBF880")]
	private void SpawnProps(CardStack propList, List<Transform> nestedPropPositions, ManagedProp nestingParent)
	{
	}

	[Token(Token = "0x6000AD9")]
	[Address(RVA = "0xEBF7A4", Offset = "0xEBF7A4", VA = "0xEBF7A4")]
	private void SpawnProps(CardStack propList, List<Transform> nestedPropPositions, ManagedProp nestingParent, bool suppressPositionSave)
	{
	}

	[Token(Token = "0x6000ADA")]
	[Address(RVA = "0xEBF8A4", Offset = "0xEBF8A4", VA = "0xEBF8A4")]
	[IteratorStateMachine(typeof(<DoSpawnProps>d__28))]
	private IEnumerator DoSpawnProps(CardStack propList, List<Transform> nestedPropPositions, ManagedProp nestingParent, bool suppressPositionSave)
	{
		return null;
	}

	[Token(Token = "0x6000ADB")]
	[Address(RVA = "0xEBF998", Offset = "0xEBF998", VA = "0xEBF998")]
	private void CatchSpawnedProp(ManagedProp prop)
	{
	}

	[Token(Token = "0x6000ADC")]
	[Address(RVA = "0xEBF9A4", Offset = "0xEBF9A4", VA = "0xEBF9A4")]
	public PropSpawner()
	{
	}
}
[Token(Token = "0x200022C")]
public class PropTraversalEffectController : MonoBehaviour
{
	[Token(Token = "0x200022D")]
	[CompilerGenerated]
	private sealed class <>c__DisplayClass37_0
	{
		[Token(Token = "0x4000BAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform enlargedPropTransform;

		[Token(Token = "0x4000BAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PropTraversalEffectController <>4__this;

		[Token(Token = "0x4000BAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 enlargedPropBasePosition;

		[Token(Token = "0x6000B09")]
		[Address(RVA = "0xEC3C00", Offset = "0xEC3C00", VA = "0xEC3C00")]
		public <>c__DisplayClass37_0()
		{
		}

		[Token(Token = "0x6000B0A")]
		[Address(RVA = "0xEC3C08", Offset = "0xEC3C08", VA = "0xEC3C08")]
		internal void <co_BeginTransitionEffect>b__0(float percentage)
		{
		}

		[Token(Token = "0x6000B0B")]
		[Address(RVA = "0xEC3DDC", Offset = "0xEC3DDC", VA = "0xEC3DDC")]
		internal void <co_BeginTransitionEffect>b__1(float percentage)
		{
		}
	}

	[Token(Token = "0x200022E")]
	[CompilerGenerated]
	private sealed class <co_BeginTransitionEffect>d__37 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000BAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000BAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000BAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PropTraversalEffectController <>4__this;

		[Token(Token = "0x4000BB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int propCeptionDepthIn;

		[Token(Token = "0x4000BB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform playerRigTransform;

		[Token(Token = "0x4000BB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public ColorFader colorFader;

		[Token(Token = "0x4000BB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private <>c__DisplayClass37_0 <>8__1;

		[Token(Token = "0x4000BB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3 <propMoveToPos>5__2;

		[Token(Token = "0x4000BB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float <fadeInDuration>5__3;

		[Token(Token = "0x4000BB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float <firstMovementDuration>5__4;

		[Token(Token = "0x4000BB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float <buildUpDuration>5__5;

		[Token(Token = "0x4000BB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float <startTime>5__6;

		[Token(Token = "0x4000BB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private ParticleSystem <buildUpParticles>5__7;

		[Token(Token = "0x4000BBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private ParticleSystem.MainModule <buildUpParticlesMain>5__8;

		[Token(Token = "0x1700015E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000B0F")]
			[Address(RVA = "0xEC5038", Offset = "0xEC5038", VA = "0xEC5038", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700015F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000B11")]
			[Address(RVA = "0xEC5080", Offset = "0xEC5080", VA = "0xEC5080", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B0C")]
		[Address(RVA = "0xEC1984", Offset = "0xEC1984", VA = "0xEC1984")]
		[DebuggerHidden]
		public <co_BeginTransitionEffect>d__37(int <>1__state)
		{
		}

		[Token(Token = "0x6000B0D")]
		[Address(RVA = "0xEC3E8C", Offset = "0xEC3E8C", VA = "0xEC3E8C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000B0E")]
		[Address(RVA = "0xEC3E90", Offset = "0xEC3E90", VA = "0xEC3E90", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B10")]
		[Address(RVA = "0xEC5040", Offset = "0xEC5040", VA = "0xEC5040", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200022F")]
	[CompilerGenerated]
	private sealed class <>c__DisplayClass38_0
	{
		[Token(Token = "0x4000BBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PropTraversalEffectController <>4__this;

		[Token(Token = "0x4000BBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform enlargedPropTransform;

		[Token(Token = "0x4000BBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 enlargedPropBasePosition;

		[Token(Token = "0x6000B12")]
		[Address(RVA = "0xEC5088", Offset = "0xEC5088", VA = "0xEC5088")]
		public <>c__DisplayClass38_0()
		{
		}

		[Token(Token = "0x6000B13")]
		[Address(RVA = "0xEC5090", Offset = "0xEC5090", VA = "0xEC5090")]
		internal void <co_ReverseTransitionEffect>b__0(float percentage)
		{
		}

		[Token(Token = "0x6000B14")]
		[Address(RVA = "0xEC5140", Offset = "0xEC5140", VA = "0xEC5140")]
		internal void <co_ReverseTransitionEffect>b__1(float percentage)
		{
		}
	}

	[Token(Token = "0x2000230")]
	[CompilerGenerated]
	private sealed class <co_ReverseTransitionEffect>d__38 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000BBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000BBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000BC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PropTraversalEffectController <>4__this;

		[Token(Token = "0x4000BC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private <>c__DisplayClass38_0 <>8__1;

		[Token(Token = "0x4000BC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform <playerRigTransform>5__2;

		[Token(Token = "0x4000BC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float <scaleOutDuration>5__3;

		[Token(Token = "0x4000BC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float <particleImplosionDelay>5__4;

		[Token(Token = "0x4000BC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float <holdDelay>5__5;

		[Token(Token = "0x4000BC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float <remainingScaleOutDuration>5__6;

		[Token(Token = "0x17000160")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000B18")]
			[Address(RVA = "0xEC5F14", Offset = "0xEC5F14", VA = "0xEC5F14", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000161")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000B1A")]
			[Address(RVA = "0xEC5F5C", Offset = "0xEC5F5C", VA = "0xEC5F5C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B15")]
		[Address(RVA = "0xEC1A20", Offset = "0xEC1A20", VA = "0xEC1A20")]
		[DebuggerHidden]
		public <co_ReverseTransitionEffect>d__38(int <>1__state)
		{
		}

		[Token(Token = "0x6000B16")]
		[Address(RVA = "0xEC5334", Offset = "0xEC5334", VA = "0xEC5334", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000B17")]
		[Address(RVA = "0xEC5338", Offset = "0xEC5338", VA = "0xEC5338", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B19")]
		[Address(RVA = "0xEC5F1C", Offset = "0xEC5F1C", VA = "0xEC5F1C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000233")]
	[CompilerGenerated]
	private sealed class <co_PerformAnimatedActionAtPercentage>d__48 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000BD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000BD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000BD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float delay;

		[Token(Token = "0x4000BD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float duration;

		[Token(Token = "0x4000BD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action<float> animationAction;

		[Token(Token = "0x4000BD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float startVal;

		[Token(Token = "0x4000BD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float endVal;

		[Token(Token = "0x4000BD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float <startTime>5__2;

		[Token(Token = "0x17000162")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000B22")]
			[Address(RVA = "0xEC6528", Offset = "0xEC6528", VA = "0xEC6528", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000163")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000B24")]
			[Address(RVA = "0xEC6570", Offset = "0xEC6570", VA = "0xEC6570", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B1F")]
		[Address(RVA = "0xEC31AC", Offset = "0xEC31AC", VA = "0xEC31AC")]
		[DebuggerHidden]
		public <co_PerformAnimatedActionAtPercentage>d__48(int <>1__state)
		{
		}

		[Token(Token = "0x6000B20")]
		[Address(RVA = "0xEC63A4", Offset = "0xEC63A4", VA = "0xEC63A4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000B21")]
		[Address(RVA = "0xEC63A8", Offset = "0xEC63A8", VA = "0xEC63A8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B23")]
		[Address(RVA = "0xEC6530", Offset = "0xEC6530", VA = "0xEC6530", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000234")]
	[CompilerGenerated]
	private sealed class <co_DoPropTestStuff>d__54 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000BD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000BDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000BDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<string> jsonStrings;

		[Token(Token = "0x17000164")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000B28")]
			[Address(RVA = "0xEC685C", Offset = "0xEC685C", VA = "0xEC685C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000165")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000B2A")]
			[Address(RVA = "0xEC68A4", Offset = "0xEC68A4", VA = "0xEC68A4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B25")]
		[Address(RVA = "0xEC34B8", Offset = "0xEC34B8", VA = "0xEC34B8")]
		[DebuggerHidden]
		public <co_DoPropTestStuff>d__54(int <>1__state)
		{
		}

		[Token(Token = "0x6000B26")]
		[Address(RVA = "0xEC6578", Offset = "0xEC6578", VA = "0xEC6578", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000B27")]
		[Address(RVA = "0xEC657C", Offset = "0xEC657C", VA = "0xEC657C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B29")]
		[Address(RVA = "0xEC6864", Offset = "0xEC6864", VA = "0xEC6864", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000235")]
	[CompilerGenerated]
	private sealed class <co_BeginLerpedMovement>d__55 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000BDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000BDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000BDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform t;

		[Token(Token = "0x4000BDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float duration;

		[Token(Token = "0x4000BE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 endPos;

		[Token(Token = "0x4000BE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 <startPos>5__2;

		[Token(Token = "0x4000BE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float <startTime>5__3;

		[Token(Token = "0x17000166")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000B2E")]
			[Address(RVA = "0xEC69C8", Offset = "0xEC69C8", VA = "0xEC69C8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000167")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000B30")]
			[Address(RVA = "0xEC6A10", Offset = "0xEC6A10", VA = "0xEC6A10", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B2B")]
		[Address(RVA = "0xEC357C", Offset = "0xEC357C", VA = "0xEC357C")]
		[DebuggerHidden]
		public <co_BeginLerpedMovement>d__55(int <>1__state)
		{
		}

		[Token(Token = "0x6000B2C")]
		[Address(RVA = "0xEC68AC", Offset = "0xEC68AC", VA = "0xEC68AC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000B2D")]
		[Address(RVA = "0xEC68B0", Offset = "0xEC68B0", VA = "0xEC68B0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B2F")]
		[Address(RVA = "0xEC69D0", Offset = "0xEC69D0", VA = "0xEC69D0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000B89")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform largePropFloorAreaTransformTemplate;

	[Token(Token = "0x4000B8A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Transform largePropFloorAreaTransform;

	[Token(Token = "0x4000B8B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private ParticleSystem buildUpParticlesTemplate;

	[Token(Token = "0x4000B8C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private ParticleSystem explodeParticlesTemplate;

	[Token(Token = "0x4000B8D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private ParticleSystem implodeParticlesTemplate;

	[Token(Token = "0x4000B8E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private ParticleSystem poofParticlesTemplate;

	[Token(Token = "0x4000B8F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private List<SoundEffectController> startInteractionSoundEffects;

	[Token(Token = "0x4000B90")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private List<SoundEffectController> buildUpSoundEffects;

	[Token(Token = "0x4000B91")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private List<SoundEffectController> expansionSoundEffects;

	[Token(Token = "0x4000B92")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private List<SoundEffectController> startReversalSoundEffects;

	[Token(Token = "0x4000B93")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private List<SoundEffectController> contractionSoundEffects;

	[Token(Token = "0x4000B94")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private List<SoundEffectController> finalMovementSoundEffects;

	[Token(Token = "0x4000B95")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private float implosionPercentageDelay;

	[Token(Token = "0x4000B96")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	[SerializeField]
	private float poofPercentageDelay;

	[Token(Token = "0x4000B97")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private InputActionReference exitPropAction;

	[Token(Token = "0x4000B98")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Vector3? largePropFloorAreaFullScale;

	[Token(Token = "0x4000B99")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private ManagedProp activeOriginalProp;

	[Token(Token = "0x4000B9A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private ManagedProp activeProp;

	[Token(Token = "0x4000B9B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private List<ManagedProp> createdProps;

	[Token(Token = "0x4000B9C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private Transform playerTransform;

	[Token(Token = "0x4000B9D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private ColorFader colorFader;

	[Token(Token = "0x4000B9E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private FurnitureSettings furnitureSettings;

	[Token(Token = "0x4000B9F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private TraversableProp traversablePropScript;

	[Token(Token = "0x4000BA0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private Transform refTransform;

	[Token(Token = "0x4000BA1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private float colorFadeFullScale;

	[Token(Token = "0x4000BA2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	private Vector3 playerRigStartPosition;

	[Token(Token = "0x4000BA3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private Vector3 propSerializedStartPosition;

	[Token(Token = "0x4000BA4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	private Vector3 propSerializedStartRoation;

	[Token(Token = "0x4000BA5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private Vector3 activePropStartLocalScale;

	[Token(Token = "0x4000BA6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
	private int propCeptionDepth;

	[Token(Token = "0x4000BA7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public TraverseProp traversePropScript;

	[Token(Token = "0x4000BA8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public PropSpawner propSpawner;

	[Token(Token = "0x4000BA9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	[TextArea]
	public List<string> jsonStringsForProps;

	[Token(Token = "0x1700015D")]
	public bool traversalIsActive
	{
		[Token(Token = "0x6000AF0")]
		[Address(RVA = "0xEC1694", Offset = "0xEC1694", VA = "0xEC1694")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000AF1")]
	[Address(RVA = "0xEC16F4", Offset = "0xEC16F4", VA = "0xEC16F4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000AF2")]
	[Address(RVA = "0xEC17C4", Offset = "0xEC17C4", VA = "0xEC17C4")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000AF3")]
	[Address(RVA = "0xEC1868", Offset = "0xEC1868", VA = "0xEC1868")]
	public float CenterPositionYOffset()
	{
		return default(float);
	}

	[Token(Token = "0x6000AF4")]
	[Address(RVA = "0xEC187C", Offset = "0xEC187C", VA = "0xEC187C")]
	public Vector3 CenterPositionForRig()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000AF5")]
	[Address(RVA = "0xEC18A0", Offset = "0xEC18A0", VA = "0xEC18A0")]
	public void WillBeginTransitionOnProp(ManagedProp prop)
	{
	}

	[Token(Token = "0x6000AF6")]
	[Address(RVA = "0xEC18D0", Offset = "0xEC18D0", VA = "0xEC18D0")]
	[IteratorStateMachine(typeof(<co_BeginTransitionEffect>d__37))]
	public IEnumerator co_BeginTransitionEffect(ColorFader colorFader, int propCeptionDepthIn, Transform playerRigTransform)
	{
		return null;
	}

	[Token(Token = "0x6000AF7")]
	[Address(RVA = "0xEC19AC", Offset = "0xEC19AC", VA = "0xEC19AC")]
	[IteratorStateMachine(typeof(<co_ReverseTransitionEffect>d__38))]
	public IEnumerator co_ReverseTransitionEffect()
	{
		return null;
	}

	[Token(Token = "0x6000AF8")]
	[Address(RVA = "0xEC1A48", Offset = "0xEC1A48", VA = "0xEC1A48")]
	private void ResetSubPropsOfEnlargedPropTransform(Transform enlargedPropTransform, bool toKinematic)
	{
	}

	[Token(Token = "0x6000AF9")]
	[Address(RVA = "0xEC2084", Offset = "0xEC2084", VA = "0xEC2084")]
	private void AnimatePropsOfEnlargedPropTransform(Transform enlargedPropTransform, bool animateIn)
	{
	}

	[Token(Token = "0x6000AFA")]
	[Address(RVA = "0xEC2684", Offset = "0xEC2684", VA = "0xEC2684")]
	private void MovePropToPositionAlongBezierPath(Vector3 propStartPos, Vector3 propMoveToPos, Quaternion startRotation, Quaternion endRotation, float duration, bool inWorldSpace)
	{
	}

	[Token(Token = "0x6000AFB")]
	[Address(RVA = "0xEC2898", Offset = "0xEC2898", VA = "0xEC2898")]
	private Vector3 PointAheadOfVRLookDirectionByDistance(Transform headReferenceTransform, float lookAheadDistance)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000AFC")]
	[Address(RVA = "0xEC2B88", Offset = "0xEC2B88", VA = "0xEC2B88")]
	private void ScaleFurniture(bool scaleIn, float duration)
	{
	}

	[Token(Token = "0x6000AFD")]
	[Address(RVA = "0xEC2C98", Offset = "0xEC2C98", VA = "0xEC2C98")]
	private void PlaySoundEffects(List<SoundEffectController> soundEffects)
	{
	}

	[Token(Token = "0x6000AFE")]
	[Address(RVA = "0xEC2D3C", Offset = "0xEC2D3C", VA = "0xEC2D3C")]
	private void PlaySoundEffects(List<SoundEffectController> soundEffects, Vector3 position)
	{
	}

	[Token(Token = "0x6000AFF")]
	[Address(RVA = "0xEC2FE4", Offset = "0xEC2FE4", VA = "0xEC2FE4")]
	private void PlayParticleEmitterAtPosition(ParticleSystem particleSystemTemplate, Vector3 position)
	{
	}

	[Token(Token = "0x6000B00")]
	[Address(RVA = "0xEC2660", Offset = "0xEC2660", VA = "0xEC2660")]
	private Coroutine PerformAnimatedActionAtPercentage(Action<float> animationAction, float duration = 1f, float startVal = 0f, float endVal = 1f, float delay = 0f)
	{
		return null;
	}

	[Token(Token = "0x6000B01")]
	[Address(RVA = "0xEC3110", Offset = "0xEC3110", VA = "0xEC3110")]
	[IteratorStateMachine(typeof(<co_PerformAnimatedActionAtPercentage>d__48))]
	private IEnumerator co_PerformAnimatedActionAtPercentage(Action<float> animationAction, float duration = 1f, float startVal = 0f, float endVal = 1f, float delay = 0f)
	{
		return null;
	}

	[Token(Token = "0x6000B02")]
	[Address(RVA = "0xEC31D4", Offset = "0xEC31D4", VA = "0xEC31D4")]
	private void UpdateTestingCode()
	{
	}

	[Token(Token = "0x6000B03")]
	[Address(RVA = "0xEC32E0", Offset = "0xEC32E0", VA = "0xEC32E0")]
	private void CreatePropsForTesting()
	{
	}

	[Token(Token = "0x6000B04")]
	[Address(RVA = "0xEC3444", Offset = "0xEC3444", VA = "0xEC3444")]
	[IteratorStateMachine(typeof(<co_DoPropTestStuff>d__54))]
	private IEnumerator co_DoPropTestStuff(List<string> jsonStrings)
	{
		return null;
	}

	[Token(Token = "0x6000B05")]
	[Address(RVA = "0xEC34E0", Offset = "0xEC34E0", VA = "0xEC34E0")]
	[IteratorStateMachine(typeof(<co_BeginLerpedMovement>d__55))]
	private IEnumerator co_BeginLerpedMovement(Transform t, Vector3 endPos, float duration = 0.5f)
	{
		return null;
	}

	[Token(Token = "0x6000B06")]
	[Address(RVA = "0xEC35A4", Offset = "0xEC35A4", VA = "0xEC35A4")]
	public PropTraversalEffectController()
	{
	}
}
[Token(Token = "0x2000236")]
public class PropUpdater : Singleton<PropUpdater>
{
	[Token(Token = "0x4000BE3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject poofEffect;

	[Token(Token = "0x6000B31")]
	[Address(RVA = "0xEBFFCC", Offset = "0xEBFFCC", VA = "0xEBFFCC")]
	public void UpdateProp(GameObject prop)
	{
	}

	[Token(Token = "0x6000B32")]
	[Address(RVA = "0xEC6A18", Offset = "0xEC6A18", VA = "0xEC6A18", Slot = "5")]
	protected override void DidAwake()
	{
	}

	[Token(Token = "0x6000B33")]
	[Address(RVA = "0xEC6A1C", Offset = "0xEC6A1C", VA = "0xEC6A1C")]
	public PropUpdater()
	{
	}
}
[Token(Token = "0x2000237")]
public class PublishTriggerEnterExit : MonoBehaviour
{
	[Token(Token = "0x2000238")]
	[CompilerGenerated]
	private sealed class <co_DisableForTime>d__17 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000BEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000BF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000BF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool isEnter;

		[Token(Token = "0x4000BF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public PublishTriggerEnterExit <>4__this;

		[Token(Token = "0x17000168")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000B42")]
			[Address(RVA = "0xEC7128", Offset = "0xEC7128", VA = "0xEC7128", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000169")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000B44")]
			[Address(RVA = "0xEC7170", Offset = "0xEC7170", VA = "0xEC7170", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B3F")]
		[Address(RVA = "0xEC6F18", Offset = "0xEC6F18", VA = "0xEC6F18")]
		[DebuggerHidden]
		public <co_DisableForTime>d__17(int <>1__state)
		{
		}

		[Token(Token = "0x6000B40")]
		[Address(RVA = "0xEC7030", Offset = "0xEC7030", VA = "0xEC7030", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000B41")]
		[Address(RVA = "0xEC7034", Offset = "0xEC7034", VA = "0xEC7034", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B43")]
		[Address(RVA = "0xEC7130", Offset = "0xEC7130", VA = "0xEC7130", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000BE4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Action<Collider> OnTriggerEnterAction;

	[Token(Token = "0x4000BE5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Action<Collider> OnTriggerExitAction;

	[Token(Token = "0x4000BE6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<string> limitToTags;

	[Token(Token = "0x4000BE7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float disableOnTransitionSecs;

	[Token(Token = "0x4000BE8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool limitToNoneToSomeTransition;

	[Token(Token = "0x4000BE9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Collider[] colliders;

	[Token(Token = "0x4000BEA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int countInside;

	[Token(Token = "0x4000BEB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private bool enterReFireDisabled;

	[Token(Token = "0x4000BEC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
	private bool exitReFireDisabled;

	[Token(Token = "0x4000BED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Coroutine enterDisableTimer;

	[Token(Token = "0x4000BEE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Coroutine exitDisableTimer;

	[Token(Token = "0x6000B34")]
	[Address(RVA = "0xEC6A64", Offset = "0xEC6A64", VA = "0xEC6A64")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000B35")]
	[Address(RVA = "0xEC6ACC", Offset = "0xEC6ACC", VA = "0xEC6ACC")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000B36")]
	[Address(RVA = "0xEC6D64", Offset = "0xEC6D64", VA = "0xEC6D64")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000B37")]
	[Address(RVA = "0xEC6DD8", Offset = "0xEC6DD8", VA = "0xEC6DD8")]
	public void ToggleCollision(bool turnOn)
	{
	}

	[Token(Token = "0x6000B38")]
	[Address(RVA = "0xEC6B40", Offset = "0xEC6B40", VA = "0xEC6B40")]
	private bool FoundTag(Collider other)
	{
		return default(bool);
	}

	[Token(Token = "0x6000B39")]
	[Address(RVA = "0xEC6CEC", Offset = "0xEC6CEC", VA = "0xEC6CEC")]
	private void TryDisable(bool isEnter)
	{
	}

	[Token(Token = "0x6000B3A")]
	[Address(RVA = "0xEC6E90", Offset = "0xEC6E90", VA = "0xEC6E90")]
	[IteratorStateMachine(typeof(<co_DisableForTime>d__17))]
	private IEnumerator co_DisableForTime(bool isEnter)
	{
		return null;
	}

	[Token(Token = "0x6000B3B")]
	[Address(RVA = "0xEC6F40", Offset = "0xEC6F40", VA = "0xEC6F40")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000B3C")]
	[Address(RVA = "0xEC6F44", Offset = "0xEC6F44", VA = "0xEC6F44")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000B3D")]
	[Address(RVA = "0xEC6E50", Offset = "0xEC6E50", VA = "0xEC6E50")]
	private void InactivationReset()
	{
	}

	[Token(Token = "0x6000B3E")]
	[Address(RVA = "0xEC6F48", Offset = "0xEC6F48", VA = "0xEC6F48")]
	public PublishTriggerEnterExit()
	{
	}
}
[Token(Token = "0x2000239")]
public class PurchaseCounterController : MonoBehaviour
{
	[Token(Token = "0x4000BF3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject purchaseParticlesPrefab;

	[Token(Token = "0x4000BF4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject failParticlesPrefab;

	[Token(Token = "0x4000BF5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject successScreen;

	[Token(Token = "0x4000BF6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private List<SerializableDeck> iapTestDecks;

	[Token(Token = "0x6000B45")]
	[Address(RVA = "0xEC7178", Offset = "0xEC7178", VA = "0xEC7178")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000B46")]
	[Address(RVA = "0xEC78D0", Offset = "0xEC78D0", VA = "0xEC78D0")]
	private void OnCollisionEnter(Collision other)
	{
	}

	[Token(Token = "0x6000B47")]
	[Address(RVA = "0xEC79F4", Offset = "0xEC79F4", VA = "0xEC79F4")]
	private void PurchaseFailed(string error)
	{
	}

	[Token(Token = "0x6000B48")]
	[Address(RVA = "0xEC7AA0", Offset = "0xEC7AA0", VA = "0xEC7AA0")]
	private void PurchaseSuccessful(string sku)
	{
	}

	[Token(Token = "0x6000B49")]
	[Address(RVA = "0xEC7C60", Offset = "0xEC7C60", VA = "0xEC7C60")]
	public PurchaseCounterController()
	{
	}
}
[Token(Token = "0x200023B")]
public class PuzzleManager : MonoBehaviour
{
	[Token(Token = "0x200023C")]
	[CompilerGenerated]
	private sealed class <Start>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000BFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000BFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x1700016A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000B54")]
			[Address(RVA = "0xEC81C8", Offset = "0xEC81C8", VA = "0xEC81C8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700016B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000B56")]
			[Address(RVA = "0xEC8210", Offset = "0xEC8210", VA = "0xEC8210", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B51")]
		[Address(RVA = "0xEC7F08", Offset = "0xEC7F08", VA = "0xEC7F08")]
		[DebuggerHidden]
		public <Start>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x6000B52")]
		[Address(RVA = "0xEC80F0", Offset = "0xEC80F0", VA = "0xEC80F0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000B53")]
		[Address(RVA = "0xEC80F4", Offset = "0xEC80F4", VA = "0xEC80F4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B55")]
		[Address(RVA = "0xEC81D0", Offset = "0xEC81D0", VA = "0xEC81D0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000BF8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Action OnPuzzleStateDataUpdated;

	[Token(Token = "0x4000BF9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static Func<string, int> GetPuzzleState;

	[Token(Token = "0x4000BFA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static Action<string, int> SetPuzzleState;

	[Token(Token = "0x4000BFB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private PuzzleStateData puzzleStateData;

	[Token(Token = "0x4000BFC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Dictionary<string, int> puzzleStates;

	[Token(Token = "0x6000B4C")]
	[Address(RVA = "0xEC7C90", Offset = "0xEC7C90", VA = "0xEC7C90")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000B4D")]
	[Address(RVA = "0xEC7EA8", Offset = "0xEC7EA8", VA = "0xEC7EA8")]
	[IteratorStateMachine(typeof(<Start>d__6))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x6000B4E")]
	[Address(RVA = "0xEC7F30", Offset = "0xEC7F30", VA = "0xEC7F30")]
	private int FindAndReturnPuzzleState(string state)
	{
		return default(int);
	}

	[Token(Token = "0x6000B4F")]
	[Address(RVA = "0xEC7FC4", Offset = "0xEC7FC4", VA = "0xEC7FC4")]
	private void SetLocalPuzzleState(string puzzleKey, int state)
	{
	}

	[Token(Token = "0x6000B50")]
	[Address(RVA = "0xEC8068", Offset = "0xEC8068", VA = "0xEC8068")]
	public PuzzleManager()
	{
	}
}
[Token(Token = "0x200023D")]
public class PuzzleStateData
{
	[Token(Token = "0x4000BFF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public PuzzleData[] puzzles;

	[Token(Token = "0x6000B57")]
	[Address(RVA = "0xEC8218", Offset = "0xEC8218", VA = "0xEC8218")]
	public PuzzleStateData()
	{
	}
}
[Token(Token = "0x200023E")]
public class PuzzleData
{
	[Token(Token = "0x4000C00")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool complete;

	[Token(Token = "0x4000C01")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PuzzleElementData[] elements;

	[Token(Token = "0x6000B58")]
	[Address(RVA = "0xEC8220", Offset = "0xEC8220", VA = "0xEC8220")]
	public PuzzleData()
	{
	}
}
[Token(Token = "0x200023F")]
public class PuzzleElementData
{
	[Token(Token = "0x4000C02")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool complete;

	[Token(Token = "0x6000B59")]
	[Address(RVA = "0xEC8228", Offset = "0xEC8228", VA = "0xEC8228")]
	public PuzzleElementData()
	{
	}
}
[Token(Token = "0x2000240")]
public class SimpleTouchPuzzle : PuzzleElement
{
	[Token(Token = "0x6000B5A")]
	[Address(RVA = "0xEC8230", Offset = "0xEC8230", VA = "0xEC8230", Slot = "4")]
	public override void Initialize(int state)
	{
	}

	[Token(Token = "0x6000B5B")]
	[Address(RVA = "0xEC8268", Offset = "0xEC8268", VA = "0xEC8268")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000B5C")]
	[Address(RVA = "0xEC82E4", Offset = "0xEC82E4", VA = "0xEC82E4")]
	public SimpleTouchPuzzle()
	{
	}
}
[Token(Token = "0x2000241")]
public class SongPuzzle : PuzzleElement
{
	[Token(Token = "0x6000B5D")]
	[Address(RVA = "0xEC82EC", Offset = "0xEC82EC", VA = "0xEC82EC", Slot = "4")]
	public override void Initialize(int state)
	{
	}

	[Token(Token = "0x6000B5E")]
	[Address(RVA = "0xEC83D0", Offset = "0xEC83D0", VA = "0xEC83D0")]
	private void OnSongWasCompleted(string songName)
	{
	}

	[Token(Token = "0x6000B5F")]
	[Address(RVA = "0xEC8418", Offset = "0xEC8418", VA = "0xEC8418")]
	public SongPuzzle()
	{
	}
}
[Token(Token = "0x2000242")]
[CreateAssetMenu(fileName = "PuzzleHint", menuName = "ScriptableObjects/PuzzleHint", order = 2)]
public class PuzzleHint : ScriptableObject
{
	[Token(Token = "0x4000C03")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PuzzleHintClass hintClass;

	[Token(Token = "0x4000C04")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<UserEvent> purchaseReqs;

	[Token(Token = "0x4000C05")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public RequirementScope reqsScope;

	[Token(Token = "0x4000C06")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public List<UserEvent> purchaseAntiReqs;

	[Token(Token = "0x4000C07")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public RequirementScope antiReqsScope;

	[Token(Token = "0x4000C08")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public UserEvent purchaseEvent;

	[Token(Token = "0x4000C09")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool allowRepeatPurchase;

	[Token(Token = "0x4000C0A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public EightExpressionType expressionType;

	[Token(Token = "0x4000C0B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public string subtitle;

	[Token(Token = "0x4000C0C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public AllStrings subtitleKey;

	[Token(Token = "0x4000C10")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Action<bool> OnHintAvailableToggled;

	[Token(Token = "0x4000C11")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Action<bool> OnHintPurchasedToggled;

	[Token(Token = "0x4000C12")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private UserEventTrigger reqsTrigger;

	[Token(Token = "0x4000C13")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private bool reqsTriggered;

	[Token(Token = "0x4000C14")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private UserEventTrigger antiReqsTrigger;

	[Token(Token = "0x4000C15")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private bool antiReqsTriggered;

	[Token(Token = "0x4000C16")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private UserEventTrigger purchasedTrigger;

	[Token(Token = "0x1700016C")]
	public bool hintAvailable
	{
		[Token(Token = "0x6000B60")]
		[Address(RVA = "0xEC8420", Offset = "0xEC8420", VA = "0xEC8420")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000B61")]
		[Address(RVA = "0xEC8428", Offset = "0xEC8428", VA = "0xEC8428")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1700016D")]
	public bool hintPurchased
	{
		[Token(Token = "0x6000B62")]
		[Address(RVA = "0xEC8434", Offset = "0xEC8434", VA = "0xEC8434")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000B63")]
		[Address(RVA = "0xEC843C", Offset = "0xEC843C", VA = "0xEC843C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1700016E")]
	public float gnosisPrice
	{
		[Token(Token = "0x6000B64")]
		[Address(RVA = "0xEC8448", Offset = "0xEC8448", VA = "0xEC8448")]
		[CompilerGenerated]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000B65")]
		[Address(RVA = "0xEC8450", Offset = "0xEC8450", VA = "0xEC8450")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x6000B66")]
	[Address(RVA = "0xEC8458", Offset = "0xEC8458", VA = "0xEC8458")]
	public void Initialize()
	{
	}

	[Token(Token = "0x6000B67")]
	[Address(RVA = "0xEC8860", Offset = "0xEC8860", VA = "0xEC8860")]
	private void Reevaluate()
	{
	}

	[Token(Token = "0x6000B68")]
	[Address(RVA = "0xEC88AC", Offset = "0xEC88AC", VA = "0xEC88AC")]
	public void SetGnosisPrice(float price)
	{
	}

	[Token(Token = "0x6000B69")]
	[Address(RVA = "0xEC88B4", Offset = "0xEC88B4", VA = "0xEC88B4")]
	public PuzzleHint()
	{
	}
}
[Token(Token = "0x2000243")]
public enum PuzzleHintClass
{
	[Token(Token = "0x4000C18")]
	Advance,
	[Token(Token = "0x4000C19")]
	Hint,
	[Token(Token = "0x4000C1A")]
	Reminder
}
[Token(Token = "0x2000244")]
public class PuzzleHintManager : Singleton<PuzzleHintManager>
{
	[Token(Token = "0x2000245")]
	public class PurchasePayload
	{
		[Token(Token = "0x4000C20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Guid processId;

		[Token(Token = "0x4000C21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PuzzleHint hint;

		[Token(Token = "0x4000C22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action<bool, string> purchaseCallback;

		[Token(Token = "0x4000C23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Action hintCompleteCallback;

		[Token(Token = "0x6000B78")]
		[Address(RVA = "0xEC9BE0", Offset = "0xEC9BE0", VA = "0xEC9BE0")]
		public PurchasePayload(Guid processId, PuzzleHint hint, Action<bool, string> purchaseCallback, Action hintCompleteCallback)
		{
		}
	}

	[Token(Token = "0x2000246")]
	[CompilerGenerated]
	private sealed class <co_InitializeOnUserEventsReady>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000C24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000C25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000C26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PuzzleHintManager <>4__this;

		[Token(Token = "0x1700016F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000B7C")]
			[Address(RVA = "0xECA0C4", Offset = "0xECA0C4", VA = "0xECA0C4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000170")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000B7E")]
			[Address(RVA = "0xECA10C", Offset = "0xECA10C", VA = "0xECA10C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B79")]
		[Address(RVA = "0xEC8A58", Offset = "0xEC8A58", VA = "0xEC8A58")]
		[DebuggerHidden]
		public <co_InitializeOnUserEventsReady>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x6000B7A")]
		[Address(RVA = "0xEC9FD0", Offset = "0xEC9FD0", VA = "0xEC9FD0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000B7B")]
		[Address(RVA = "0xEC9FD4", Offset = "0xEC9FD4", VA = "0xEC9FD4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B7D")]
		[Address(RVA = "0xECA0CC", Offset = "0xECA0CC", VA = "0xECA0CC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000C1B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<PuzzleHint> hintSet;

	[Token(Token = "0x4000C1C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<PuzzleHintReminder> reminderSet;

	[Token(Token = "0x4000C1D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float remainderSessionDelayBaseMinutes;

	[Token(Token = "0x4000C1E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float reminderSessionDelayRandomFactor;

	[Token(Token = "0x4000C1F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private List<PurchasePayload> activePurchasePayloads;

	[Token(Token = "0x6000B6D")]
	[Address(RVA = "0xEC89C0", Offset = "0xEC89C0", VA = "0xEC89C0", Slot = "5")]
	protected override void DidAwake()
	{
	}

	[Token(Token = "0x6000B6E")]
	[Address(RVA = "0xEC89C4", Offset = "0xEC89C4", VA = "0xEC89C4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000B6F")]
	[Address(RVA = "0xEC89E4", Offset = "0xEC89E4", VA = "0xEC89E4")]
	[IteratorStateMachine(typeof(<co_InitializeOnUserEventsReady>d__7))]
	private IEnumerator co_InitializeOnUserEventsReady()
	{
		return null;
	}

	[Token(Token = "0x6000B70")]
	[Address(RVA = "0xEC8A80", Offset = "0xEC8A80", VA = "0xEC8A80")]
	private void InitializeHints()
	{
	}

	[Token(Token = "0x6000B71")]
	[Address(RVA = "0xEC8C20", Offset = "0xEC8C20", VA = "0xEC8C20")]
	private void InitializeReminders()
	{
	}

	[Token(Token = "0x6000B72")]
	[Address(RVA = "0xEC906C", Offset = "0xEC906C", VA = "0xEC906C")]
	public Dictionary<PuzzleHintClass, List<PuzzleHint>> GetAvailableHints()
	{
		return null;
	}

	[Token(Token = "0x6000B73")]
	[Address(RVA = "0xEC965C", Offset = "0xEC965C", VA = "0xEC965C")]
	public List<PuzzleHint> GetPurchasedHints()
	{
		return null;
	}

	[Token(Token = "0x6000B74")]
	[Address(RVA = "0xEC9764", Offset = "0xEC9764", VA = "0xEC9764")]
	public void PurchaseHint(PuzzleHint hint, Action<bool, string> purchaseCallback, Action hintCompleteCallback)
	{
	}

	[Token(Token = "0x6000B75")]
	[Address(RVA = "0xEC9C54", Offset = "0xEC9C54", VA = "0xEC9C54")]
	private void CompletePurchaseHint(Guid processId, bool successful, string message)
	{
	}

	[Token(Token = "0x6000B76")]
	[Address(RVA = "0xEC8C00", Offset = "0xEC8C00", VA = "0xEC8C00")]
	public float GetHintGnosisPrice(PuzzleHintClass hintClass)
	{
		return default(float);
	}

	[Token(Token = "0x6000B77")]
	[Address(RVA = "0xEC9F34", Offset = "0xEC9F34", VA = "0xEC9F34")]
	public PuzzleHintManager()
	{
	}
}
[Token(Token = "0x2000249")]
[CreateAssetMenu(fileName = "PuzzleHintReminder", menuName = "ScriptableObjects/PuzzleHintReminder", order = 3)]
public class PuzzleHintReminder : ScriptableObject
{
	[Token(Token = "0x200024A")]
	[CompilerGenerated]
	private sealed class <co_CountDownToAvailability>d__8 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000C31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000C32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000C33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PuzzleHintReminder <>4__this;

		[Token(Token = "0x4000C34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float requiredSessionDelaySeconds;

		[Token(Token = "0x17000171")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000B8A")]
			[Address(RVA = "0xECA2F8", Offset = "0xECA2F8", VA = "0xECA2F8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000172")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000B8C")]
			[Address(RVA = "0xECA340", Offset = "0xECA340", VA = "0xECA340", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B87")]
		[Address(RVA = "0xECA1C8", Offset = "0xECA1C8", VA = "0xECA1C8")]
		[DebuggerHidden]
		public <co_CountDownToAvailability>d__8(int <>1__state)
		{
		}

		[Token(Token = "0x6000B88")]
		[Address(RVA = "0xECA200", Offset = "0xECA200", VA = "0xECA200", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000B89")]
		[Address(RVA = "0xECA204", Offset = "0xECA204", VA = "0xECA204", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B8B")]
		[Address(RVA = "0xECA300", Offset = "0xECA300", VA = "0xECA300", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000C2A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UserEvent primaryPurchaseEvent;

	[Token(Token = "0x4000C2B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public UserEvent reminderAvailableEvent;

	[Token(Token = "0x4000C2C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private UserEventTrigger primaryPurchaseTrigger;

	[Token(Token = "0x4000C2D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private UserEventTrigger reminderAvailableTrigger;

	[Token(Token = "0x4000C2E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool alreadyAvailable;

	[Token(Token = "0x4000C2F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	private bool readyForCountdown;

	[Token(Token = "0x4000C30")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float tickSeconds;

	[Token(Token = "0x6000B84")]
	[Address(RVA = "0xEC8DC0", Offset = "0xEC8DC0", VA = "0xEC8DC0")]
	public void Initialize()
	{
	}

	[Token(Token = "0x6000B85")]
	[Address(RVA = "0xEC8FE8", Offset = "0xEC8FE8", VA = "0xEC8FE8")]
	[IteratorStateMachine(typeof(<co_CountDownToAvailability>d__8))]
	public IEnumerator co_CountDownToAvailability(float requiredSessionDelaySeconds)
	{
		return null;
	}

	[Token(Token = "0x6000B86")]
	[Address(RVA = "0xECA1F0", Offset = "0xECA1F0", VA = "0xECA1F0")]
	public PuzzleHintReminder()
	{
	}
}
[Token(Token = "0x200024B")]
public class PuzzleHintTester : MonoBehaviour
{
	[Token(Token = "0x200024D")]
	[CompilerGenerated]
	private sealed class <co_Test>d__1 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000C37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000C38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000C39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PuzzleHintTester <>4__this;

		[Token(Token = "0x17000173")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000B98")]
			[Address(RVA = "0xECB6DC", Offset = "0xECB6DC", VA = "0xECB6DC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000174")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000B9A")]
			[Address(RVA = "0xECB724", Offset = "0xECB724", VA = "0xECB724", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B95")]
		[Address(RVA = "0xECA3DC", Offset = "0xECA3DC", VA = "0xECA3DC")]
		[DebuggerHidden]
		public <co_Test>d__1(int <>1__state)
		{
		}

		[Token(Token = "0x6000B96")]
		[Address(RVA = "0xECAB7C", Offset = "0xECAB7C", VA = "0xECAB7C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000B97")]
		[Address(RVA = "0xECAB80", Offset = "0xECAB80", VA = "0xECAB80", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B99")]
		[Address(RVA = "0xECB6E4", Offset = "0xECB6E4", VA = "0xECB6E4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x6000B8D")]
	[Address(RVA = "0xECA348", Offset = "0xECA348", VA = "0xECA348")]
	private void Start()
	{
	}

	[Token(Token = "0x6000B8E")]
	[Address(RVA = "0xECA368", Offset = "0xECA368", VA = "0xECA368")]
	[IteratorStateMachine(typeof(<co_Test>d__1))]
	private IEnumerator co_Test()
	{
		return null;
	}

	[Token(Token = "0x6000B8F")]
	[Address(RVA = "0xECA404", Offset = "0xECA404", VA = "0xECA404")]
	private void PurchaseCallback(bool successful, string message)
	{
	}

	[Token(Token = "0x6000B90")]
	[Address(RVA = "0xECAAF4", Offset = "0xECAAF4", VA = "0xECAAF4")]
	private void HintCompleteCallback()
	{
	}

	[Token(Token = "0x6000B91")]
	[Address(RVA = "0xECAAF8", Offset = "0xECAAF8", VA = "0xECAAF8")]
	public PuzzleHintTester()
	{
	}
}
[Token(Token = "0x200024E")]
public class LanternController : MonoBehaviour
{
	[Token(Token = "0x4000C3A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject flameBurst;

	[Token(Token = "0x6000B9B")]
	[Address(RVA = "0xECB72C", Offset = "0xECB72C", VA = "0xECB72C")]
	public void OnCollisionEnter(Collision other)
	{
	}

	[Token(Token = "0x6000B9C")]
	[Address(RVA = "0xECB880", Offset = "0xECB880", VA = "0xECB880")]
	public LanternController()
	{
	}
}
[Token(Token = "0x200024F")]
public class ActivateGravity : GenericPuzzleListener
{
	[Token(Token = "0x2000250")]
	public enum ActivationType
	{
		[Token(Token = "0x4000C3E")]
		Activate,
		[Token(Token = "0x4000C3F")]
		Deactivate
	}

	[Token(Token = "0x4000C3B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Rigidbody thisRigidbody;

	[Token(Token = "0x4000C3C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public ActivationType type;

	[Token(Token = "0x6000B9D")]
	[Address(RVA = "0xECB888", Offset = "0xECB888", VA = "0xECB888", Slot = "5")]
	protected override void ProcessToggle(PuzzleTriggeredDetails triggerDetails)
	{
	}

	[Token(Token = "0x6000B9E")]
	[Address(RVA = "0xECB8E8", Offset = "0xECB8E8", VA = "0xECB8E8")]
	public ActivateGravity()
	{
	}
}
[Token(Token = "0x2000251")]
public class BookshelfDropper : PuzzleEffect
{
	[Token(Token = "0x2000252")]
	[CompilerGenerated]
	private sealed class <EffectCoroutine>d__5 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000C45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000C46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000C47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BookshelfDropper <>4__this;

		[Token(Token = "0x17000175")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000BA5")]
			[Address(RVA = "0xECC1A0", Offset = "0xECC1A0", VA = "0xECC1A0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000176")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000BA7")]
			[Address(RVA = "0xECC1E8", Offset = "0xECC1E8", VA = "0xECC1E8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000BA2")]
		[Address(RVA = "0xECB964", Offset = "0xECB964", VA = "0xECB964")]
		[DebuggerHidden]
		public <EffectCoroutine>d__5(int <>1__state)
		{
		}

		[Token(Token = "0x6000BA3")]
		[Address(RVA = "0xECBB18", Offset = "0xECBB18", VA = "0xECBB18", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000BA4")]
		[Address(RVA = "0xECBB1C", Offset = "0xECBB1C", VA = "0xECBB1C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BA6")]
		[Address(RVA = "0xECC1A8", Offset = "0xECC1A8", VA = "0xECC1A8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000C40")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public List<Transform> bookshelf;

	[Token(Token = "0x4000C41")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public GameObject particleEffect;

	[Token(Token = "0x4000C42")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public float distanceToDrop;

	[Token(Token = "0x4000C43")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public AudioSource audioSource;

	[Token(Token = "0x4000C44")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public float dropTime;

	[Token(Token = "0x6000B9F")]
	[Address(RVA = "0xECB8F0", Offset = "0xECB8F0", VA = "0xECB8F0", Slot = "6")]
	[IteratorStateMachine(typeof(<EffectCoroutine>d__5))]
	protected override IEnumerator EffectCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000BA0")]
	[Address(RVA = "0xECB98C", Offset = "0xECB98C", VA = "0xECB98C", Slot = "7")]
	protected override void SetEffectComplete()
	{
	}

	[Token(Token = "0x6000BA1")]
	[Address(RVA = "0xECBB00", Offset = "0xECBB00", VA = "0xECBB00")]
	public BookshelfDropper()
	{
	}
}
[Token(Token = "0x2000253")]
public enum HiddenRoom
{
	[Token(Token = "0x4000C49")]
	MusicRoom,
	[Token(Token = "0x4000C4A")]
	EarthRoom,
	[Token(Token = "0x4000C4B")]
	SailingRoom,
	[Token(Token = "0x4000C4C")]
	FireRoomLower,
	[Token(Token = "0x4000C4D")]
	FireRoomUpper
}
[Token(Token = "0x2000254")]
public enum RequirementType
{
	[Token(Token = "0x4000C4F")]
	Complete,
	[Token(Token = "0x4000C50")]
	Incomplete
}
[Token(Token = "0x2000255")]
public enum RequirementScope
{
	[Token(Token = "0x4000C52")]
	All,
	[Token(Token = "0x4000C53")]
	Any
}
[Token(Token = "0x2000256")]
public enum RequirementOrder
{
	[Token(Token = "0x4000C55")]
	Unordered,
	[Token(Token = "0x4000C56")]
	Ordered
}
[Token(Token = "0x2000257")]
public class ParticleHelperPuzzleEffect : PuzzleEffect
{
	[Token(Token = "0x2000258")]
	[CompilerGenerated]
	private sealed class <EffectCoroutine>d__2 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000C59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000C5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000C5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ParticleHelperPuzzleEffect <>4__this;

		[Token(Token = "0x17000177")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000BAE")]
			[Address(RVA = "0xECC450", Offset = "0xECC450", VA = "0xECC450", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000178")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000BB0")]
			[Address(RVA = "0xECC498", Offset = "0xECC498", VA = "0xECC498", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000BAB")]
		[Address(RVA = "0xECC264", Offset = "0xECC264", VA = "0xECC264")]
		[DebuggerHidden]
		public <EffectCoroutine>d__2(int <>1__state)
		{
		}

		[Token(Token = "0x6000BAC")]
		[Address(RVA = "0xECC298", Offset = "0xECC298", VA = "0xECC298", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000BAD")]
		[Address(RVA = "0xECC29C", Offset = "0xECC29C", VA = "0xECC29C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BAF")]
		[Address(RVA = "0xECC458", Offset = "0xECC458", VA = "0xECC458", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000C57")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public ParticleHelper particleEffect;

	[Token(Token = "0x4000C58")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public bool spawnParticleAtPuzzleCenter;

	[Token(Token = "0x6000BA8")]
	[Address(RVA = "0xECC1F0", Offset = "0xECC1F0", VA = "0xECC1F0", Slot = "6")]
	[IteratorStateMachine(typeof(<EffectCoroutine>d__2))]
	protected override IEnumerator EffectCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000BA9")]
	[Address(RVA = "0xECC28C", Offset = "0xECC28C", VA = "0xECC28C", Slot = "7")]
	protected override void SetEffectComplete()
	{
	}

	[Token(Token = "0x6000BAA")]
	[Address(RVA = "0xECC290", Offset = "0xECC290", VA = "0xECC290")]
	public ParticleHelperPuzzleEffect()
	{
	}
}
[Token(Token = "0x2000259")]
public class PuzzleActivator : GenericPuzzleListener
{
	[Token(Token = "0x200025A")]
	public enum ActivationType
	{
		[Token(Token = "0x4000C62")]
		Activate,
		[Token(Token = "0x4000C63")]
		Deactivate
	}

	[Token(Token = "0x200025B")]
	[CompilerGenerated]
	private sealed class <co_ToggleActivationAtFrameEnd>d__10 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000C64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000C65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000C66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PuzzleActivator <>4__this;

		[Token(Token = "0x4000C67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool activate;

		[Token(Token = "0x17000179")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000BBB")]
			[Address(RVA = "0xECCA88", Offset = "0xECCA88", VA = "0xECCA88", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700017A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000BBD")]
			[Address(RVA = "0xECCAD0", Offset = "0xECCAD0", VA = "0xECCAD0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000BB8")]
		[Address(RVA = "0xECC898", Offset = "0xECC898", VA = "0xECC898")]
		[DebuggerHidden]
		public <co_ToggleActivationAtFrameEnd>d__10(int <>1__state)
		{
		}

		[Token(Token = "0x6000BB9")]
		[Address(RVA = "0xECC998", Offset = "0xECC998", VA = "0xECC998", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000BBA")]
		[Address(RVA = "0xECC99C", Offset = "0xECC99C", VA = "0xECC99C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BBC")]
		[Address(RVA = "0xECCA90", Offset = "0xECCA90", VA = "0xECCA90", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000C5C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public List<GameObject> activatingObjects;

	[Token(Token = "0x4000C5D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public List<SwitchboardPuzzleTrigger> activatingSwitchboardTriggers;

	[Token(Token = "0x4000C5E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public ActivationType activationType;

	[Token(Token = "0x4000C5F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public bool delayToFrameEnd;

	[Token(Token = "0x4000C60")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x75")]
	public bool applyToSelf;

	[Token(Token = "0x6000BB1")]
	[Address(RVA = "0xECC4A0", Offset = "0xECC4A0", VA = "0xECC4A0", Slot = "5")]
	protected override void ProcessToggle(PuzzleTriggeredDetails triggerDetails)
	{
	}

	[Token(Token = "0x6000BB2")]
	[Address(RVA = "0xECC4D8", Offset = "0xECC4D8", VA = "0xECC4D8")]
	private void TryActivate()
	{
	}

	[Token(Token = "0x6000BB3")]
	[Address(RVA = "0xECC504", Offset = "0xECC504", VA = "0xECC504")]
	private void ToggleActivation(bool activate)
	{
	}

	[Token(Token = "0x6000BB4")]
	[Address(RVA = "0xECC5B0", Offset = "0xECC5B0", VA = "0xECC5B0")]
	private void ToggleActivationImmediate(bool activate)
	{
	}

	[Token(Token = "0x6000BB5")]
	[Address(RVA = "0xECC718", Offset = "0xECC718", VA = "0xECC718")]
	private void ToggleSubscriptions(bool activate)
	{
	}

	[Token(Token = "0x6000BB6")]
	[Address(RVA = "0xECC528", Offset = "0xECC528", VA = "0xECC528")]
	[IteratorStateMachine(typeof(<co_ToggleActivationAtFrameEnd>d__10))]
	private IEnumerator co_ToggleActivationAtFrameEnd(bool activate)
	{
		return null;
	}

	[Token(Token = "0x6000BB7")]
	[Address(RVA = "0xECC8C0", Offset = "0xECC8C0", VA = "0xECC8C0")]
	public PuzzleActivator()
	{
	}
}
[Token(Token = "0x200025C")]
public class PuzzleAnimationPlayer : PuzzleEffect
{
	[Token(Token = "0x200025D")]
	[CompilerGenerated]
	private sealed class <EffectCoroutine>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000C6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000C6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000C6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PuzzleAnimationPlayer <>4__this;

		[Token(Token = "0x1700017B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000BC4")]
			[Address(RVA = "0xECCCE4", Offset = "0xECCCE4", VA = "0xECCCE4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700017C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000BC6")]
			[Address(RVA = "0xECCD2C", Offset = "0xECCD2C", VA = "0xECCD2C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000BC1")]
		[Address(RVA = "0xECCB4C", Offset = "0xECCB4C", VA = "0xECCB4C")]
		[DebuggerHidden]
		public <EffectCoroutine>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x6000BC2")]
		[Address(RVA = "0xECCBA4", Offset = "0xECCBA4", VA = "0xECCBA4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000BC3")]
		[Address(RVA = "0xECCBA8", Offset = "0xECCBA8", VA = "0xECCBA8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BC5")]
		[Address(RVA = "0xECCCEC", Offset = "0xECCCEC", VA = "0xECCCEC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000C68")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Animator animator;

	[Token(Token = "0x4000C69")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public string activeAnimation;

	[Token(Token = "0x4000C6A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public string completeAnimationState;

	[Token(Token = "0x4000C6B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public float animationDelay;

	[Token(Token = "0x6000BBE")]
	[Address(RVA = "0xECCAD8", Offset = "0xECCAD8", VA = "0xECCAD8", Slot = "6")]
	[IteratorStateMachine(typeof(<EffectCoroutine>d__4))]
	protected override IEnumerator EffectCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000BBF")]
	[Address(RVA = "0xECCB74", Offset = "0xECCB74", VA = "0xECCB74", Slot = "7")]
	protected override void SetEffectComplete()
	{
	}

	[Token(Token = "0x6000BC0")]
	[Address(RVA = "0xECCB9C", Offset = "0xECCB9C", VA = "0xECCB9C")]
	public PuzzleAnimationPlayer()
	{
	}
}
[Token(Token = "0x200025E")]
public abstract class PuzzleEffect : GenericPuzzleListener
{
	[Token(Token = "0x200025F")]
	[CompilerGenerated]
	private sealed class <StartEffectCoroutine>d__5 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000C73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000C74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000C75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PuzzleEffect <>4__this;

		[Token(Token = "0x1700017D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000BD1")]
			[Address(RVA = "0xECCF8C", Offset = "0xECCF8C", VA = "0xECCF8C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700017E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000BD3")]
			[Address(RVA = "0xECCFD4", Offset = "0xECCFD4", VA = "0xECCFD4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000BCE")]
		[Address(RVA = "0xECCE68", Offset = "0xECCE68", VA = "0xECCE68")]
		[DebuggerHidden]
		public <StartEffectCoroutine>d__5(int <>1__state)
		{
		}

		[Token(Token = "0x6000BCF")]
		[Address(RVA = "0xECCEE0", Offset = "0xECCEE0", VA = "0xECCEE0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000BD0")]
		[Address(RVA = "0xECCEE4", Offset = "0xECCEE4", VA = "0xECCEE4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BD2")]
		[Address(RVA = "0xECCF94", Offset = "0xECCF94", VA = "0xECCF94", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000C6F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public bool useInstantCompleteOnConfig;

	[Token(Token = "0x4000C70")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
	public bool fireCompletionWhenInterrupted;

	[Token(Token = "0x4000C71")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	protected PuzzleTriggeredDetails lastTriggerDetails;

	[Token(Token = "0x4000C72")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private bool effectInProcess;

	[Token(Token = "0x6000BC7")]
	[Address(RVA = "0xECCD34", Offset = "0xECCD34", VA = "0xECCD34", Slot = "5")]
	protected override void ProcessToggle(PuzzleTriggeredDetails triggerDetails)
	{
	}

	[Token(Token = "0x6000BC8")]
	[Address(RVA = "0xECCDF4", Offset = "0xECCDF4", VA = "0xECCDF4")]
	[IteratorStateMachine(typeof(<StartEffectCoroutine>d__5))]
	private IEnumerator StartEffectCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000BC9")]
	protected abstract IEnumerator EffectCoroutine();

	[Token(Token = "0x6000BCA")]
	[Address(RVA = "0xECCE90", Offset = "0xECCE90", VA = "0xECCE90")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000BCB")]
	[Address(RVA = "0xECCDD0", Offset = "0xECCDD0", VA = "0xECCDD0")]
	private void InstantCompleteEffect()
	{
	}

	[Token(Token = "0x6000BCC")]
	protected abstract void SetEffectComplete();

	[Token(Token = "0x6000BCD")]
	[Address(RVA = "0xECBB10", Offset = "0xECBB10", VA = "0xECBB10")]
	protected PuzzleEffect()
	{
	}
}
[Token(Token = "0x2000260")]
public class RingPuzzleEffect : PuzzleEffect
{
	[Token(Token = "0x2000261")]
	[CompilerGenerated]
	private sealed class <EffectCoroutine>d__2 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000C78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000C79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000C7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RingPuzzleEffect <>4__this;

		[Token(Token = "0x1700017F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000BDA")]
			[Address(RVA = "0xECD228", Offset = "0xECD228", VA = "0xECD228", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000180")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000BDC")]
			[Address(RVA = "0xECD270", Offset = "0xECD270", VA = "0xECD270", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000BD7")]
		[Address(RVA = "0xECD050", Offset = "0xECD050", VA = "0xECD050")]
		[DebuggerHidden]
		public <EffectCoroutine>d__2(int <>1__state)
		{
		}

		[Token(Token = "0x6000BD8")]
		[Address(RVA = "0xECD084", Offset = "0xECD084", VA = "0xECD084", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000BD9")]
		[Address(RVA = "0xECD088", Offset = "0xECD088", VA = "0xECD088", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BDB")]
		[Address(RVA = "0xECD230", Offset = "0xECD230", VA = "0xECD230", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000C76")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public List<Renderer> rings;

	[Token(Token = "0x4000C77")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Material ringLitMaterial;

	[Token(Token = "0x6000BD4")]
	[Address(RVA = "0xECCFDC", Offset = "0xECCFDC", VA = "0xECCFDC", Slot = "6")]
	[IteratorStateMachine(typeof(<EffectCoroutine>d__2))]
	protected override IEnumerator EffectCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000BD5")]
	[Address(RVA = "0xECD078", Offset = "0xECD078", VA = "0xECD078", Slot = "7")]
	protected override void SetEffectComplete()
	{
	}

	[Token(Token = "0x6000BD6")]
	[Address(RVA = "0xECD07C", Offset = "0xECD07C", VA = "0xECD07C")]
	public RingPuzzleEffect()
	{
	}
}
[Token(Token = "0x2000262")]
public class StairsToMazeOpener : PuzzleEffect
{
	[Token(Token = "0x2000263")]
	[CompilerGenerated]
	private sealed class <EffectCoroutine>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000C81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000C82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000C83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public StairsToMazeOpener <>4__this;

		[Token(Token = "0x4000C84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GameObject[] <>7__wrap1;

		[Token(Token = "0x4000C85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int <>7__wrap2;

		[Token(Token = "0x17000181")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000BE4")]
			[Address(RVA = "0xECD9A0", Offset = "0xECD9A0", VA = "0xECD9A0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000182")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000BE6")]
			[Address(RVA = "0xECD9E8", Offset = "0xECD9E8", VA = "0xECD9E8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000BE1")]
		[Address(RVA = "0xECD2EC", Offset = "0xECD2EC", VA = "0xECD2EC")]
		[DebuggerHidden]
		public <EffectCoroutine>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x6000BE2")]
		[Address(RVA = "0xECD440", Offset = "0xECD440", VA = "0xECD440", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000BE3")]
		[Address(RVA = "0xECD444", Offset = "0xECD444", VA = "0xECD444", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BE5")]
		[Address(RVA = "0xECD9A8", Offset = "0xECD9A8", VA = "0xECD9A8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000C7B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public GameObject[] stairs;

	[Token(Token = "0x4000C7C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public AudioSource audioSource;

	[Token(Token = "0x4000C7D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public GameObject particleEffect;

	[Token(Token = "0x4000C7E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public GameObject[] origStairCollider;

	[Token(Token = "0x4000C7F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public float targetStairZ;

	[Token(Token = "0x4000C80")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	public bool enableStairCollidersOnComplete;

	[Token(Token = "0x6000BDD")]
	[Address(RVA = "0xECD278", Offset = "0xECD278", VA = "0xECD278", Slot = "6")]
	[IteratorStateMachine(typeof(<EffectCoroutine>d__6))]
	protected override IEnumerator EffectCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000BDE")]
	[Address(RVA = "0xECD314", Offset = "0xECD314", VA = "0xECD314", Slot = "7")]
	protected override void SetEffectComplete()
	{
	}

	[Token(Token = "0x6000BDF")]
	[Address(RVA = "0xECD3C4", Offset = "0xECD3C4", VA = "0xECD3C4")]
	private void ToggleStairColliders(bool enable)
	{
	}

	[Token(Token = "0x6000BE0")]
	[Address(RVA = "0xECD42C", Offset = "0xECD42C", VA = "0xECD42C")]
	public StairsToMazeOpener()
	{
	}
}
[Token(Token = "0x2000264")]
public class SwitchboardForwarder : GenericPuzzleListener
{
	[Token(Token = "0x4000C86")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public TriggerType forwarderType;

	[Token(Token = "0x6000BE7")]
	[Address(RVA = "0xECD9F0", Offset = "0xECD9F0", VA = "0xECD9F0", Slot = "5")]
	protected override void ProcessToggle(PuzzleTriggeredDetails triggerDetails)
	{
	}

	[Token(Token = "0x6000BE8")]
	[Address(RVA = "0xECDA78", Offset = "0xECDA78", VA = "0xECDA78")]
	public SwitchboardForwarder()
	{
	}
}
[Token(Token = "0x2000265")]
public class TestWatermelonSnapper : GenericPuzzleListener
{
	[Token(Token = "0x2000266")]
	[CompilerGenerated]
	private sealed class <TestCoro>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000C8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000C8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000C8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TestWatermelonSnapper <>4__this;

		[Token(Token = "0x17000183")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000BF0")]
			[Address(RVA = "0xECDDB0", Offset = "0xECDDB0", VA = "0xECDDB0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000184")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000BF2")]
			[Address(RVA = "0xECDDF8", Offset = "0xECDDF8", VA = "0xECDDF8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000BED")]
		[Address(RVA = "0xECDB14", Offset = "0xECDB14", VA = "0xECDB14")]
		[DebuggerHidden]
		public <TestCoro>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x6000BEE")]
		[Address(RVA = "0xECDC0C", Offset = "0xECDC0C", VA = "0xECDC0C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000BEF")]
		[Address(RVA = "0xECDC10", Offset = "0xECDC10", VA = "0xECDC10", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BF1")]
		[Address(RVA = "0xECDDB8", Offset = "0xECDDB8", VA = "0xECDDB8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000C87")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Transform moveTrans;

	[Token(Token = "0x4000C88")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Transform snapTrans;

	[Token(Token = "0x4000C89")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Transform testTrans;

	[Token(Token = "0x6000BE9")]
	[Address(RVA = "0xECDA80", Offset = "0xECDA80", VA = "0xECDA80", Slot = "4")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000BEA")]
	[Address(RVA = "0xECDAA0", Offset = "0xECDAA0", VA = "0xECDAA0")]
	[IteratorStateMachine(typeof(<TestCoro>d__4))]
	private IEnumerator TestCoro()
	{
		return null;
	}

	[Token(Token = "0x6000BEB")]
	[Address(RVA = "0xECDB3C", Offset = "0xECDB3C", VA = "0xECDB3C", Slot = "5")]
	protected override void ProcessToggle(PuzzleTriggeredDetails triggerDetails)
	{
	}

	[Token(Token = "0x6000BEC")]
	[Address(RVA = "0xECDC04", Offset = "0xECDC04", VA = "0xECDC04")]
	public TestWatermelonSnapper()
	{
	}
}
[Token(Token = "0x2000267")]
public class UserEventSetter : GenericPuzzleListener
{
	[Token(Token = "0x4000C8D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public UserEvent eventResult;

	[Token(Token = "0x6000BF3")]
	[Address(RVA = "0xECDE00", Offset = "0xECDE00", VA = "0xECDE00", Slot = "5")]
	protected override void ProcessToggle(PuzzleTriggeredDetails triggerDetails)
	{
	}

	[Token(Token = "0x6000BF4")]
	[Address(RVA = "0xECDE80", Offset = "0xECDE80", VA = "0xECDE80")]
	public UserEventSetter()
	{
	}
}
[Token(Token = "0x2000268")]
public class PictureFrameAction : MonoBehaviour
{
	[Token(Token = "0x4000C8E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject paintingWithObject;

	[Token(Token = "0x4000C8F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject effectWithObject;

	[Token(Token = "0x4000C90")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject paintingWithoutObject;

	[Token(Token = "0x4000C91")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject effectWithoutObject;

	[Token(Token = "0x4000C92")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Grabbable objectFromImage;

	[Token(Token = "0x4000C93")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Autohand.Hand handInPicture;

	[Token(Token = "0x4000C94")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool justPlacedObject;

	[Token(Token = "0x6000BF5")]
	[Address(RVA = "0xECDE88", Offset = "0xECDE88", VA = "0xECDE88")]
	private void Start()
	{
	}

	[Token(Token = "0x6000BF6")]
	[Address(RVA = "0xECDF18", Offset = "0xECDF18", VA = "0xECDF18")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000BF7")]
	[Address(RVA = "0xECE028", Offset = "0xECE028", VA = "0xECE028")]
	private void OnTriggerStay(Collider other)
	{
	}

	[Token(Token = "0x6000BF8")]
	[Address(RVA = "0xECE110", Offset = "0xECE110", VA = "0xECE110")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000BF9")]
	[Address(RVA = "0xECE340", Offset = "0xECE340", VA = "0xECE340")]
	public PictureFrameAction()
	{
	}
}
[Token(Token = "0x2000269")]
public class PlanetAnimator : PuzzleEffect
{
	[Token(Token = "0x200026A")]
	[CompilerGenerated]
	private sealed class <EffectCoroutine>d__2 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000C97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000C98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000C99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PlanetAnimator <>4__this;

		[Token(Token = "0x17000185")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000C00")]
			[Address(RVA = "0xECEEFC", Offset = "0xECEEFC", VA = "0xECEEFC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000186")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C02")]
			[Address(RVA = "0xECEF44", Offset = "0xECEF44", VA = "0xECEF44", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000BFD")]
		[Address(RVA = "0xECE3BC", Offset = "0xECE3BC", VA = "0xECE3BC")]
		[DebuggerHidden]
		public <EffectCoroutine>d__2(int <>1__state)
		{
		}

		[Token(Token = "0x6000BFE")]
		[Address(RVA = "0xECE3F0", Offset = "0xECE3F0", VA = "0xECE3F0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000BFF")]
		[Address(RVA = "0xECE3F4", Offset = "0xECE3F4", VA = "0xECE3F4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C01")]
		[Address(RVA = "0xECEF04", Offset = "0xECEF04", VA = "0xECEF04", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000C95")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public GameObject planet;

	[Token(Token = "0x4000C96")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Transform startPoint;

	[Token(Token = "0x6000BFA")]
	[Address(RVA = "0xECE348", Offset = "0xECE348", VA = "0xECE348", Slot = "6")]
	[IteratorStateMachine(typeof(<EffectCoroutine>d__2))]
	protected override IEnumerator EffectCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000BFB")]
	[Address(RVA = "0xECE3E4", Offset = "0xECE3E4", VA = "0xECE3E4", Slot = "7")]
	protected override void SetEffectComplete()
	{
	}

	[Token(Token = "0x6000BFC")]
	[Address(RVA = "0xECE3E8", Offset = "0xECE3E8", VA = "0xECE3E8")]
	public PlanetAnimator()
	{
	}
}
[Token(Token = "0x200026B")]
public class PlanetForge : MonoBehaviour
{
	[Token(Token = "0x4000C9A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject planetChangeEffect;

	[Token(Token = "0x6000C03")]
	[Address(RVA = "0xECEF4C", Offset = "0xECEF4C", VA = "0xECEF4C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000C04")]
	[Address(RVA = "0xECF0E8", Offset = "0xECF0E8", VA = "0xECF0E8")]
	public PlanetForge()
	{
	}
}
[Token(Token = "0x200026C")]
public class PuzzlePieceRoomThreshold : MonoBehaviour
{
	[Token(Token = "0x4000C9B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Room roomA;

	[Token(Token = "0x4000C9C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Room roomB;

	[Token(Token = "0x4000C9D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform refA;

	[Token(Token = "0x4000C9E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform refB;

	[Token(Token = "0x6000C05")]
	[Address(RVA = "0xECF0F0", Offset = "0xECF0F0", VA = "0xECF0F0")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000C06")]
	[Address(RVA = "0xECF298", Offset = "0xECF298", VA = "0xECF298")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000C07")]
	[Address(RVA = "0xECF120", Offset = "0xECF120", VA = "0xECF120")]
	private void ProcessTrigger(GameObject otherGO, bool isEnter)
	{
	}

	[Token(Token = "0x6000C08")]
	[Address(RVA = "0xECF2C8", Offset = "0xECF2C8", VA = "0xECF2C8")]
	private bool ProximityIsRoomA(GameObject otherGO)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C09")]
	[Address(RVA = "0xECF44C", Offset = "0xECF44C", VA = "0xECF44C")]
	public PuzzlePieceRoomThreshold()
	{
	}
}
[Token(Token = "0x200026D")]
public class ShootingStar : PuzzleEffect
{
	[Token(Token = "0x200026E")]
	[CompilerGenerated]
	private sealed class <EffectCoroutine>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000CA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000CA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000CA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ShootingStar <>4__this;

		[Token(Token = "0x17000187")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000C10")]
			[Address(RVA = "0xECF904", Offset = "0xECF904", VA = "0xECF904", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000188")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C12")]
			[Address(RVA = "0xECF94C", Offset = "0xECF94C", VA = "0xECF94C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C0D")]
		[Address(RVA = "0xECF4C8", Offset = "0xECF4C8", VA = "0xECF4C8")]
		[DebuggerHidden]
		public <EffectCoroutine>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x6000C0E")]
		[Address(RVA = "0xECF504", Offset = "0xECF504", VA = "0xECF504", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000C0F")]
		[Address(RVA = "0xECF508", Offset = "0xECF508", VA = "0xECF508", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C11")]
		[Address(RVA = "0xECF90C", Offset = "0xECF90C", VA = "0xECF90C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000C9F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public GameObject shootingStar;

	[Token(Token = "0x4000CA0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public GameObject splashEffect;

	[Token(Token = "0x4000CA1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Transform endPoint;

	[Token(Token = "0x4000CA2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public float timeToFall;

	[Token(Token = "0x6000C0A")]
	[Address(RVA = "0xECF454", Offset = "0xECF454", VA = "0xECF454", Slot = "6")]
	[IteratorStateMachine(typeof(<EffectCoroutine>d__4))]
	protected override IEnumerator EffectCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000C0B")]
	[Address(RVA = "0xECF4F0", Offset = "0xECF4F0", VA = "0xECF4F0", Slot = "7")]
	protected override void SetEffectComplete()
	{
	}

	[Token(Token = "0x6000C0C")]
	[Address(RVA = "0xECF4F4", Offset = "0xECF4F4", VA = "0xECF4F4")]
	public ShootingStar()
	{
	}
}
[Token(Token = "0x200026F")]
[ExecuteInEditMode]
public class ReCalcCubeTexture : MonoBehaviour
{
	[Token(Token = "0x4000CA6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Vector3 _currentScale;

	[Token(Token = "0x4000CA7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool checkForDefaultSize;

	[Token(Token = "0x4000CA8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Vector3 scaleMultiplier;

	[Token(Token = "0x6000C13")]
	[Address(RVA = "0xECF954", Offset = "0xECF954", VA = "0xECF954")]
	private void Start()
	{
	}

	[Token(Token = "0x6000C14")]
	[Address(RVA = "0xECFB04", Offset = "0xECFB04", VA = "0xECFB04")]
	private void Update()
	{
	}

	[Token(Token = "0x6000C15")]
	[Address(RVA = "0xECF958", Offset = "0xECF958", VA = "0xECF958")]
	public void Calculate()
	{
	}

	[Token(Token = "0x6000C16")]
	[Address(RVA = "0xECFCD8", Offset = "0xECFCD8", VA = "0xECFCD8")]
	private Mesh GetMesh()
	{
		return null;
	}

	[Token(Token = "0x6000C17")]
	[Address(RVA = "0xECFD30", Offset = "0xECFD30", VA = "0xECFD30")]
	private Vector2[] SetupUvMap(Vector2[] meshUVs)
	{
		return null;
	}

	[Token(Token = "0x6000C18")]
	[Address(RVA = "0xECFB2C", Offset = "0xECFB2C", VA = "0xECFB2C")]
	private bool CheckForDefaultSize()
	{
		return default(bool);
	}

	[Token(Token = "0x6000C19")]
	[Address(RVA = "0xECFE3C", Offset = "0xECFE3C", VA = "0xECFE3C")]
	public ReCalcCubeTexture()
	{
	}
}
[Token(Token = "0x2000270")]
public class RegisterTraversePropEffect : MonoBehaviour
{
	[Token(Token = "0x4000CA9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ParticleSystem ps;

	[Token(Token = "0x6000C1A")]
	[Address(RVA = "0xECFE9C", Offset = "0xECFE9C", VA = "0xECFE9C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000C1B")]
	[Address(RVA = "0xECFF1C", Offset = "0xECFF1C", VA = "0xECFF1C")]
	public RegisterTraversePropEffect()
	{
	}
}
[Token(Token = "0x2000271")]
public enum Room
{
	[Token(Token = "0x4000CAB")]
	None,
	[Token(Token = "0x4000CAC")]
	Library,
	[Token(Token = "0x4000CAD")]
	Cove,
	[Token(Token = "0x4000CAE")]
	Observatory,
	[Token(Token = "0x4000CAF")]
	Nested,
	[Token(Token = "0x4000CB0")]
	CoveTunnel
}
[Token(Token = "0x2000272")]
public class RotateAndPlaySound : MonoBehaviour
{
	[Token(Token = "0x4000CB1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioSource audioSource;

	[Token(Token = "0x4000CB2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float audioVelocity;

	[Token(Token = "0x4000CB3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Rigidbody rotationRigidBody;

	[Token(Token = "0x6000C1C")]
	[Address(RVA = "0xECFF24", Offset = "0xECFF24", VA = "0xECFF24")]
	private void Update()
	{
	}

	[Token(Token = "0x6000C1D")]
	[Address(RVA = "0xED0020", Offset = "0xED0020", VA = "0xED0020")]
	public RotateAndPlaySound()
	{
	}
}
[Token(Token = "0x2000273")]
public class RotateObject : MonoBehaviour
{
	[Token(Token = "0x4000CB4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 axis;

	[Token(Token = "0x4000CB5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool random;

	[Token(Token = "0x6000C1E")]
	[Address(RVA = "0xED0030", Offset = "0xED0030", VA = "0xED0030")]
	private void Update()
	{
	}

	[Token(Token = "0x6000C1F")]
	[Address(RVA = "0xED00EC", Offset = "0xED00EC", VA = "0xED00EC")]
	public RotateObject()
	{
	}
}
[Token(Token = "0x2000274")]
public class RotateToFaceObject : MonoBehaviour
{
	[Token(Token = "0x4000CB6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform target;

	[Token(Token = "0x4000CB7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool constrainX;

	[Token(Token = "0x4000CB8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool constrainY;

	[Token(Token = "0x4000CB9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
	public bool constrainZ;

	[Token(Token = "0x4000CBA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x23")]
	public bool flipRotation;

	[Token(Token = "0x4000CBB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool targetIsCamera;

	[Token(Token = "0x4000CBC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float rotationMultiplier;

	[Token(Token = "0x4000CBD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float minDotThreshold;

	[Token(Token = "0x4000CBE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool useDotThreshold;

	[Token(Token = "0x4000CBF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Transform thisTransform;

	[Token(Token = "0x6000C20")]
	[Address(RVA = "0xED00F4", Offset = "0xED00F4", VA = "0xED00F4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000C21")]
	[Address(RVA = "0xED0184", Offset = "0xED0184", VA = "0xED0184")]
	private void Update()
	{
	}

	[Token(Token = "0x6000C22")]
	[Address(RVA = "0xED0428", Offset = "0xED0428", VA = "0xED0428")]
	public RotateToFaceObject()
	{
	}
}
[Token(Token = "0x2000275")]
public class RotationPuzzleTrigger : MonoBehaviour
{
	[Token(Token = "0x4000CC0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform wheelOne;

	[Token(Token = "0x4000CC1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform WheelTwo;

	[Token(Token = "0x4000CC2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform WheelThree;

	[Token(Token = "0x4000CC3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float TargetRotationOne;

	[Token(Token = "0x4000CC4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float TargetRotationTwo;

	[Token(Token = "0x4000CC5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float TargetRotationThree;

	[Token(Token = "0x6000C23")]
	[Address(RVA = "0xED043C", Offset = "0xED043C", VA = "0xED043C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000C24")]
	[Address(RVA = "0xED0448", Offset = "0xED0448", VA = "0xED0448")]
	private void TriggerCorrectOrientation()
	{
	}

	[Token(Token = "0x6000C25")]
	[Address(RVA = "0xED044C", Offset = "0xED044C", VA = "0xED044C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000C26")]
	[Address(RVA = "0xED049C", Offset = "0xED049C", VA = "0xED049C")]
	public RotationPuzzleTrigger()
	{
	}
}
[Token(Token = "0x2000276")]
public class SceneLoader : MonoBehaviour
{
	[Token(Token = "0x2000277")]
	[CompilerGenerated]
	private sealed class <TransitionScene>d__8 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000CC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000CC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000CCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SceneLoader <>4__this;

		[Token(Token = "0x4000CCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public SceneTransition trans;

		[Token(Token = "0x1700018A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000C37")]
			[Address(RVA = "0xED225C", Offset = "0xED225C", VA = "0xED225C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700018B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C39")]
			[Address(RVA = "0xED22A4", Offset = "0xED22A4", VA = "0xED22A4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C34")]
		[Address(RVA = "0xED20F8", Offset = "0xED20F8", VA = "0xED20F8")]
		[DebuggerHidden]
		public <TransitionScene>d__8(int <>1__state)
		{
		}

		[Token(Token = "0x6000C35")]
		[Address(RVA = "0xED2120", Offset = "0xED2120", VA = "0xED2120", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000C36")]
		[Address(RVA = "0xED2124", Offset = "0xED2124", VA = "0xED2124", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C38")]
		[Address(RVA = "0xED2264", Offset = "0xED2264", VA = "0xED2264", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000278")]
	[CompilerGenerated]
	private sealed class <LoadScene>d__9 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000CCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000CCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000CCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Room scene;

		[Token(Token = "0x4000CCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private AsyncOperation <async>5__2;

		[Token(Token = "0x1700018C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000C3D")]
			[Address(RVA = "0xED24D0", Offset = "0xED24D0", VA = "0xED24D0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700018D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C3F")]
			[Address(RVA = "0xED2518", Offset = "0xED2518", VA = "0xED2518", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C3A")]
		[Address(RVA = "0xED22AC", Offset = "0xED22AC", VA = "0xED22AC")]
		[DebuggerHidden]
		public <LoadScene>d__9(int <>1__state)
		{
		}

		[Token(Token = "0x6000C3B")]
		[Address(RVA = "0xED22D4", Offset = "0xED22D4", VA = "0xED22D4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000C3C")]
		[Address(RVA = "0xED22D8", Offset = "0xED22D8", VA = "0xED22D8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C3E")]
		[Address(RVA = "0xED24D8", Offset = "0xED24D8", VA = "0xED24D8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000279")]
	[CompilerGenerated]
	private sealed class <co_LoadSceneDestructive>d__12 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000CD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000CD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000CD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Room scene;

		[Token(Token = "0x4000CD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action callback;

		[Token(Token = "0x4000CD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AsyncOperation <async>5__2;

		[Token(Token = "0x1700018E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000C43")]
			[Address(RVA = "0xED26A0", Offset = "0xED26A0", VA = "0xED26A0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700018F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C45")]
			[Address(RVA = "0xED26E8", Offset = "0xED26E8", VA = "0xED26E8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C40")]
		[Address(RVA = "0xED2520", Offset = "0xED2520", VA = "0xED2520")]
		[DebuggerHidden]
		public <co_LoadSceneDestructive>d__12(int <>1__state)
		{
		}

		[Token(Token = "0x6000C41")]
		[Address(RVA = "0xED2548", Offset = "0xED2548", VA = "0xED2548", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000C42")]
		[Address(RVA = "0xED254C", Offset = "0xED254C", VA = "0xED254C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C44")]
		[Address(RVA = "0xED26A8", Offset = "0xED26A8", VA = "0xED26A8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000CC7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<GameObject> persistantObjects;

	[Token(Token = "0x17000189")]
	public bool sceneTransitioning
	{
		[Token(Token = "0x6000C27")]
		[Address(RVA = "0xED04A4", Offset = "0xED04A4", VA = "0xED04A4")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000C28")]
		[Address(RVA = "0xED04AC", Offset = "0xED04AC", VA = "0xED04AC")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x6000C29")]
	[Address(RVA = "0xED04B8", Offset = "0xED04B8", VA = "0xED04B8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000C2A")]
	[Address(RVA = "0xED07E4", Offset = "0xED07E4", VA = "0xED07E4")]
	private void ResetGame()
	{
	}

	[Token(Token = "0x6000C2B")]
	[Address(RVA = "0xED0990", Offset = "0xED0990", VA = "0xED0990")]
	private void StartTransitionScene(SceneTransition trans)
	{
	}

	[Token(Token = "0x6000C2C")]
	[Address(RVA = "0xED09B0", Offset = "0xED09B0", VA = "0xED09B0")]
	[IteratorStateMachine(typeof(<TransitionScene>d__8))]
	private IEnumerator TransitionScene(SceneTransition trans)
	{
		return null;
	}

	[Token(Token = "0x6000C2D")]
	[Address(RVA = "0xED0A40", Offset = "0xED0A40", VA = "0xED0A40")]
	[IteratorStateMachine(typeof(<LoadScene>d__9))]
	private IEnumerator LoadScene(Room scene)
	{
		return null;
	}

	[Token(Token = "0x6000C2E")]
	[Address(RVA = "0xED0AA8", Offset = "0xED0AA8", VA = "0xED0AA8")]
	private void UnloadScene(Room scene)
	{
	}

	[Token(Token = "0x6000C2F")]
	[Address(RVA = "0xED0EDC", Offset = "0xED0EDC", VA = "0xED0EDC")]
	private void LoadSceneDestructive(Room scene, Action callback)
	{
	}

	[Token(Token = "0x6000C30")]
	[Address(RVA = "0xED0EFC", Offset = "0xED0EFC", VA = "0xED0EFC")]
	[IteratorStateMachine(typeof(<co_LoadSceneDestructive>d__12))]
	private IEnumerator co_LoadSceneDestructive(Room scene, Action callback)
	{
		return null;
	}

	[Token(Token = "0x6000C31")]
	[Address(RVA = "0xED0F80", Offset = "0xED0F80", VA = "0xED0F80")]
	public SceneLoader()
	{
	}
}
[Token(Token = "0x200027A")]
public class SceneTransition
{
	[Token(Token = "0x4000CD5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Room originRoom;

	[Token(Token = "0x4000CD6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Room destinationRoom;

	[Token(Token = "0x4000CD7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Room unloadSceneRoom;

	[Token(Token = "0x4000CD8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Room loadSceneRoom;

	[Token(Token = "0x6000C46")]
	[Address(RVA = "0xED26F0", Offset = "0xED26F0", VA = "0xED26F0")]
	public SceneTransition(Room originRoom, Room destinationRoom, Room unloadSceneRoom, Room loadSceneRoom)
	{
	}
}
[Token(Token = "0x200027B")]
public class SceneTransitionThreshold : MonoBehaviour
{
	[Token(Token = "0x4000CD9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Room roomA;

	[Token(Token = "0x4000CDA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Room roomB;

	[Token(Token = "0x4000CDB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Room unloadSceneAtoB;

	[Token(Token = "0x4000CDC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Room unloadSceneBtoA;

	[Token(Token = "0x4000CDD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Room loadSceneAtoB;

	[Token(Token = "0x4000CDE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public Room loadSceneBtoA;

	[Token(Token = "0x4000CDF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform refA;

	[Token(Token = "0x4000CE0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform refB;

	[Token(Token = "0x6000C47")]
	[Address(RVA = "0xED2730", Offset = "0xED2730", VA = "0xED2730")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000C48")]
	[Address(RVA = "0xED281C", Offset = "0xED281C", VA = "0xED281C")]
	private bool ProximityIsRoomA(GameObject otherGO)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C49")]
	[Address(RVA = "0xED29A0", Offset = "0xED29A0", VA = "0xED29A0")]
	private void ProcessTransition(Room destinationRoom)
	{
	}

	[Token(Token = "0x6000C4A")]
	[Address(RVA = "0xED2AC8", Offset = "0xED2AC8", VA = "0xED2AC8")]
	public SceneTransitionThreshold()
	{
	}
}
[Token(Token = "0x200027C")]
public class ScrollingUVs : MonoBehaviour
{
	[Token(Token = "0x4000CE1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int materialIndex;

	[Token(Token = "0x4000CE2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Vector2 uvAnimationRate;

	[Token(Token = "0x4000CE3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string textureName;

	[Token(Token = "0x4000CE4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Vector2 uvOffset;

	[Token(Token = "0x6000C4B")]
	[Address(RVA = "0xED2AD0", Offset = "0xED2AD0", VA = "0xED2AD0")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000C4C")]
	[Address(RVA = "0xED2BAC", Offset = "0xED2BAC", VA = "0xED2BAC")]
	public ScrollingUVs()
	{
	}
}
[Token(Token = "0x200027D")]
public class SerializableDeckList
{
	[Token(Token = "0x4000CE5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public List<SerializableDeck> decks;

	[Token(Token = "0x6000C4D")]
	[Address(RVA = "0xED2C48", Offset = "0xED2C48", VA = "0xED2C48")]
	public SerializableDeckList()
	{
	}
}
[Token(Token = "0x200027E")]
public class SerializableDeck
{
	[Token(Token = "0x4000CE6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string name;

	[Token(Token = "0x4000CE7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string deckid;

	[Token(Token = "0x4000CE8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string userid;

	[Token(Token = "0x4000CE9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Room room;

	[Token(Token = "0x4000CEA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[JsonIgnore]
	public List<SerializableProp> cards;

	[Token(Token = "0x6000C4E")]
	[Address(RVA = "0xED2CD0", Offset = "0xED2CD0", VA = "0xED2CD0")]
	[JsonConstructor]
	public SerializableDeck(string deckid, string name, string userid, int room)
	{
	}

	[Token(Token = "0x6000C4F")]
	[Address(RVA = "0xED2D3C", Offset = "0xED2D3C", VA = "0xED2D3C")]
	public SerializableDeck(SerializableDeck orig)
	{
	}
}
[Token(Token = "0x200027F")]
public class SerializablePropList
{
	[Token(Token = "0x4000CEB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public List<SerializableProp> props;

	[Token(Token = "0x6000C50")]
	[Address(RVA = "0xED2DA0", Offset = "0xED2DA0", VA = "0xED2DA0")]
	public SerializablePropList()
	{
	}
}
[Serializable]
[Token(Token = "0x2000280")]
public class SerializableProp
{
	[Token(Token = "0x4000CEC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string name;

	[Token(Token = "0x4000CED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string prefabName;

	[Token(Token = "0x4000CEE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector3 position;

	[Token(Token = "0x4000CEF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public Vector3 eulerAngles;

	[Token(Token = "0x4000CF0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public string frontText;

	[Token(Token = "0x4000CF1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public string backText;

	[Token(Token = "0x4000CF2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public int timesSuccessful;

	[Token(Token = "0x4000CF3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public int timesUnsuccessful;

	[Token(Token = "0x4000CF4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool userMatchedMnemonic;

	[Token(Token = "0x4000CF5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public string image;

	[Token(Token = "0x4000CF6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public string userid;

	[Token(Token = "0x4000CF7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public string deck;

	[Token(Token = "0x4000CF8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public string category;

	[Token(Token = "0x4000CF9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public string cardid;

	[Token(Token = "0x4000CFA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public int stack;

	[Token(Token = "0x4000CFB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public bool child;

	[Token(Token = "0x4000CFC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public string note;

	[Token(Token = "0x4000CFD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public int stackIndex;

	[Token(Token = "0x6000C51")]
	[Address(RVA = "0xED2E28", Offset = "0xED2E28", VA = "0xED2E28")]
	public SerializableProp(string name, string prefabName, Vector3 position, Vector3 eulerAngles, string frontText, string backText, int timesSuccessful, int timesUnsuccessful, bool userMatchedMnemonic, string image, string userid, string deck, string category, string cardid, int stack, bool child, string note, int stackIndex)
	{
	}

	[Token(Token = "0x6000C52")]
	[Address(RVA = "0xED2FCC", Offset = "0xED2FCC", VA = "0xED2FCC")]
	private int TemporaryKaplanStudyPropOrdering()
	{
		return default(int);
	}
}
[Token(Token = "0x2000281")]
public class SessionManager : Singleton<SessionManager>
{
	[Token(Token = "0x2000282")]
	public enum APIEnvironment
	{
		[Token(Token = "0x4000D1A")]
		Local,
		[Token(Token = "0x4000D1B")]
		Dev,
		[Token(Token = "0x4000D1C")]
		Prod
	}

	[Token(Token = "0x2000283")]
	[CompilerGenerated]
	private sealed class <Start>d__45 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000D1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000D1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000D1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SessionManager <>4__this;

		[Token(Token = "0x4000D20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private WaitForSeconds <waitForLocalization>5__2;

		[Token(Token = "0x17000195")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000C7A")]
			[Address(RVA = "0xED4AE8", Offset = "0xED4AE8", VA = "0xED4AE8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000196")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C7C")]
			[Address(RVA = "0xED4B30", Offset = "0xED4B30", VA = "0xED4B30", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C77")]
		[Address(RVA = "0xED3650", Offset = "0xED3650", VA = "0xED3650")]
		[DebuggerHidden]
		public <Start>d__45(int <>1__state)
		{
		}

		[Token(Token = "0x6000C78")]
		[Address(RVA = "0xED49D4", Offset = "0xED49D4", VA = "0xED49D4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000C79")]
		[Address(RVA = "0xED49D8", Offset = "0xED49D8", VA = "0xED49D8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C7B")]
		[Address(RVA = "0xED4AF0", Offset = "0xED4AF0", VA = "0xED4AF0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000286")]
	[CompilerGenerated]
	private sealed class <co_CompleteLogin>d__53 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000D26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000D27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000D28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SessionManager <>4__this;

		[Token(Token = "0x4000D29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private WaitForSeconds <waitForLocalizedStringLoad>5__2;

		[Token(Token = "0x17000197")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000C84")]
			[Address(RVA = "0xED5340", Offset = "0xED5340", VA = "0xED5340", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000198")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C86")]
			[Address(RVA = "0xED5388", Offset = "0xED5388", VA = "0xED5388", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C81")]
		[Address(RVA = "0xED409C", Offset = "0xED409C", VA = "0xED409C")]
		[DebuggerHidden]
		public <co_CompleteLogin>d__53(int <>1__state)
		{
		}

		[Token(Token = "0x6000C82")]
		[Address(RVA = "0xED5120", Offset = "0xED5120", VA = "0xED5120", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000C83")]
		[Address(RVA = "0xED5124", Offset = "0xED5124", VA = "0xED5124", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C85")]
		[Address(RVA = "0xED5348", Offset = "0xED5348", VA = "0xED5348", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000287")]
	[CompilerGenerated]
	private sealed class <co_CompleteAfterAssetBundlesLoaded>d__54 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000D2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000D2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000D2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SessionManager <>4__this;

		[Token(Token = "0x17000199")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000C8A")]
			[Address(RVA = "0xED5460", Offset = "0xED5460", VA = "0xED5460", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700019A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C8C")]
			[Address(RVA = "0xED54A8", Offset = "0xED54A8", VA = "0xED54A8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C87")]
		[Address(RVA = "0xED4138", Offset = "0xED4138", VA = "0xED4138")]
		[DebuggerHidden]
		public <co_CompleteAfterAssetBundlesLoaded>d__54(int <>1__state)
		{
		}

		[Token(Token = "0x6000C88")]
		[Address(RVA = "0xED5390", Offset = "0xED5390", VA = "0xED5390", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000C89")]
		[Address(RVA = "0xED5394", Offset = "0xED5394", VA = "0xED5394", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C8B")]
		[Address(RVA = "0xED5468", Offset = "0xED5468", VA = "0xED5468", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000288")]
	[CompilerGenerated]
	private sealed class <co_ProcessSessionBlocked>d__57 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000D2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000D2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000D2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string message;

		[Token(Token = "0x1700019B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000C90")]
			[Address(RVA = "0xED57A0", Offset = "0xED57A0", VA = "0xED57A0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700019C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C92")]
			[Address(RVA = "0xED57E8", Offset = "0xED57E8", VA = "0xED57E8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C8D")]
		[Address(RVA = "0xED42E8", Offset = "0xED42E8", VA = "0xED42E8")]
		[DebuggerHidden]
		public <co_ProcessSessionBlocked>d__57(int <>1__state)
		{
		}

		[Token(Token = "0x6000C8E")]
		[Address(RVA = "0xED54B0", Offset = "0xED54B0", VA = "0xED54B0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000C8F")]
		[Address(RVA = "0xED54B4", Offset = "0xED54B4", VA = "0xED54B4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C91")]
		[Address(RVA = "0xED57A8", Offset = "0xED57A8", VA = "0xED57A8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200028A")]
	[CompilerGenerated]
	private sealed class <>c__DisplayClass62_0
	{
		[Token(Token = "0x4000D33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float retryDelaySeconds;

		[Token(Token = "0x4000D34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SessionManager <>4__this;

		[Token(Token = "0x4000D35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Action<bool> <>9__0;

		[Token(Token = "0x6000C95")]
		[Address(RVA = "0xED587C", Offset = "0xED587C", VA = "0xED587C")]
		public <>c__DisplayClass62_0()
		{
		}

		[Token(Token = "0x6000C96")]
		[Address(RVA = "0xED5884", Offset = "0xED5884", VA = "0xED5884")]
		internal void <co_NetworkConnectRetryLoop>b__0(bool success)
		{
		}
	}

	[Token(Token = "0x200028B")]
	[CompilerGenerated]
	private sealed class <co_NetworkConnectRetryLoop>d__62 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000D36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000D37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000D38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SessionManager <>4__this;

		[Token(Token = "0x4000D39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private <>c__DisplayClass62_0 <>8__1;

		[Token(Token = "0x1700019D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000C9A")]
			[Address(RVA = "0xED5B68", Offset = "0xED5B68", VA = "0xED5B68", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700019E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C9C")]
			[Address(RVA = "0xED5BB0", Offset = "0xED5BB0", VA = "0xED5BB0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C97")]
		[Address(RVA = "0xED46C4", Offset = "0xED46C4", VA = "0xED46C4")]
		[DebuggerHidden]
		public <co_NetworkConnectRetryLoop>d__62(int <>1__state)
		{
		}

		[Token(Token = "0x6000C98")]
		[Address(RVA = "0xED58D0", Offset = "0xED58D0", VA = "0xED58D0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000C99")]
		[Address(RVA = "0xED58D4", Offset = "0xED58D4", VA = "0xED58D4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C9B")]
		[Address(RVA = "0xED5B70", Offset = "0xED5B70", VA = "0xED5B70", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000CFE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public APIEnvironment apiEnvironment;

	[Token(Token = "0x4000CFF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool enableProdInDebugBuild;

	[Token(Token = "0x4000D00")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	public bool useDevAssets;

	[Token(Token = "0x4000D01")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
	public bool forceNewLogin;

	[Token(Token = "0x4000D02")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public APICommunicator apiCommunicator;

	[Token(Token = "0x4000D03")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private string testUsername;

	[Token(Token = "0x4000D04")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private string testPassword;

	[Token(Token = "0x4000D05")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Action OnSessionStart;

	[Token(Token = "0x4000D06")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Action OnLoginRequired;

	[Token(Token = "0x4000D07")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Action OnLoginComplete;

	[Token(Token = "0x4000D08")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Action<string> OnLoginFailure;

	[Token(Token = "0x4000D09")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Action<List<UserEvent>> OnUserEventsAvailable;

	[Token(Token = "0x4000D0A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Action<Dictionary<UserAttribute, float>> OnUserAttributesAvailable;

	[Token(Token = "0x4000D10")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private string refreshToken;

	[Token(Token = "0x4000D11")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private bool sessionStarted;

	[Token(Token = "0x4000D12")]
	private const string baseLocalAPI = "http://localhost:3000/";

	[Token(Token = "0x4000D13")]
	private const string baseDevAPI = "https://hup6hqiv8g.execute-api.us-west-2.amazonaws.com/dev/";

	[Token(Token = "0x4000D14")]
	private const string baseProdAPI = "https://vhrtp0tjwd.execute-api.us-west-2.amazonaws.com/prod/";

	[Token(Token = "0x4000D15")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private string s3ContentCreatorsURL;

	[Token(Token = "0x4000D16")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private float baseNetworkRetrySeconds;

	[Token(Token = "0x4000D17")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private float maxNetworkRetrySeconds;

	[Token(Token = "0x4000D18")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private PlayerAccessData playerAccessData;

	[Token(Token = "0x17000190")]
	public Guid userId
	{
		[Token(Token = "0x6000C53")]
		[Address(RVA = "0xED3474", Offset = "0xED3474", VA = "0xED3474")]
		[CompilerGenerated]
		get
		{
			return default(Guid);
		}
		[Token(Token = "0x6000C54")]
		[Address(RVA = "0xED3480", Offset = "0xED3480", VA = "0xED3480")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000191")]
	public string username
	{
		[Token(Token = "0x6000C55")]
		[Address(RVA = "0xED3488", Offset = "0xED3488", VA = "0xED3488")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000C56")]
		[Address(RVA = "0xED3490", Offset = "0xED3490", VA = "0xED3490")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000192")]
	public Guid sessionId
	{
		[Token(Token = "0x6000C57")]
		[Address(RVA = "0xED3498", Offset = "0xED3498", VA = "0xED3498")]
		[CompilerGenerated]
		get
		{
			return default(Guid);
		}
		[Token(Token = "0x6000C58")]
		[Address(RVA = "0xED34A4", Offset = "0xED34A4", VA = "0xED34A4")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000193")]
	public string accessToken
	{
		[Token(Token = "0x6000C59")]
		[Address(RVA = "0xED34AC", Offset = "0xED34AC", VA = "0xED34AC")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000C5A")]
		[Address(RVA = "0xED34B4", Offset = "0xED34B4", VA = "0xED34B4")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000194")]
	public bool isLoggedIn
	{
		[Token(Token = "0x6000C5B")]
		[Address(RVA = "0xED34BC", Offset = "0xED34BC", VA = "0xED34BC")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000C5C")]
		[Address(RVA = "0xED34C4", Offset = "0xED34C4", VA = "0xED34C4")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x6000C5D")]
	[Address(RVA = "0xED34D0", Offset = "0xED34D0", VA = "0xED34D0", Slot = "5")]
	protected override void DidAwake()
	{
	}

	[Token(Token = "0x6000C5E")]
	[Address(RVA = "0xED34F4", Offset = "0xED34F4", VA = "0xED34F4")]
	private void ConfigureForBuildType()
	{
	}

	[Token(Token = "0x6000C5F")]
	[Address(RVA = "0xED35DC", Offset = "0xED35DC", VA = "0xED35DC")]
	[IteratorStateMachine(typeof(<Start>d__45))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x6000C60")]
	[Address(RVA = "0xED3678", Offset = "0xED3678", VA = "0xED3678")]
	public void InitializeToCachedUser()
	{
	}

	[Token(Token = "0x6000C61")]
	[Address(RVA = "0xED3A28", Offset = "0xED3A28", VA = "0xED3A28")]
	public void TryLoginCachedUser()
	{
	}

	[Token(Token = "0x6000C62")]
	[Address(RVA = "0xED3CF0", Offset = "0xED3CF0", VA = "0xED3CF0")]
	public void StartFirstTimeUserPreSession()
	{
	}

	[Token(Token = "0x6000C63")]
	[Address(RVA = "0xED3CF4", Offset = "0xED3CF4", VA = "0xED3CF4")]
	public void CredentialsLogin(string username, string password)
	{
	}

	[Token(Token = "0x6000C64")]
	[Address(RVA = "0xED3D30", Offset = "0xED3D30", VA = "0xED3D30")]
	public void Registration(string username, string password, string email, string firstName, string lastName, string phone)
	{
	}

	[Token(Token = "0x6000C65")]
	[Address(RVA = "0xED3B3C", Offset = "0xED3B3C", VA = "0xED3B3C")]
	private void Login(string password)
	{
	}

	[Token(Token = "0x6000C66")]
	[Address(RVA = "0xED3F1C", Offset = "0xED3F1C", VA = "0xED3F1C")]
	private void OnUserAccessFromPurchaseListUpdated()
	{
	}

	[Token(Token = "0x6000C67")]
	[Address(RVA = "0xED4028", Offset = "0xED4028", VA = "0xED4028")]
	[IteratorStateMachine(typeof(<co_CompleteLogin>d__53))]
	private IEnumerator co_CompleteLogin()
	{
		return null;
	}

	[Token(Token = "0x6000C68")]
	[Address(RVA = "0xED40C4", Offset = "0xED40C4", VA = "0xED40C4")]
	[IteratorStateMachine(typeof(<co_CompleteAfterAssetBundlesLoaded>d__54))]
	private IEnumerator co_CompleteAfterAssetBundlesLoaded()
	{
		return null;
	}

	[Token(Token = "0x6000C69")]
	[Address(RVA = "0xED4160", Offset = "0xED4160", VA = "0xED4160")]
	private void StartSession()
	{
	}

	[Token(Token = "0x6000C6A")]
	[Address(RVA = "0xED4254", Offset = "0xED4254", VA = "0xED4254")]
	private void ProcessSessionBlocked(string message)
	{
	}

	[Token(Token = "0x6000C6B")]
	[Address(RVA = "0xED4274", Offset = "0xED4274", VA = "0xED4274")]
	[IteratorStateMachine(typeof(<co_ProcessSessionBlocked>d__57))]
	private IEnumerator co_ProcessSessionBlocked(string message)
	{
		return null;
	}

	[Token(Token = "0x6000C6C")]
	[Address(RVA = "0xED4310", Offset = "0xED4310", VA = "0xED4310")]
	public void Logout()
	{
	}

	[Token(Token = "0x6000C6D")]
	[Address(RVA = "0xED4340", Offset = "0xED4340", VA = "0xED4340")]
	public string GetRootAPIUrl()
	{
		return null;
	}

	[Token(Token = "0x6000C6E")]
	[Address(RVA = "0xED43B8", Offset = "0xED43B8", VA = "0xED43B8")]
	public void TryRefreshAccess(Action<bool> callback)
	{
	}

	[Token(Token = "0x6000C6F")]
	[Address(RVA = "0xED45EC", Offset = "0xED45EC", VA = "0xED45EC")]
	public void SetNetworkErrorState()
	{
	}

	[Token(Token = "0x6000C70")]
	[Address(RVA = "0xED4650", Offset = "0xED4650", VA = "0xED4650")]
	[IteratorStateMachine(typeof(<co_NetworkConnectRetryLoop>d__62))]
	private IEnumerator co_NetworkConnectRetryLoop()
	{
		return null;
	}

	[Token(Token = "0x6000C71")]
	[Address(RVA = "0xED46EC", Offset = "0xED46EC", VA = "0xED46EC")]
	private void CompleteNetworkErrorState()
	{
	}

	[Token(Token = "0x6000C72")]
	[Address(RVA = "0xED4750", Offset = "0xED4750", VA = "0xED4750")]
	private void SavePlayer()
	{
	}

	[Token(Token = "0x6000C73")]
	[Address(RVA = "0xED37C0", Offset = "0xED37C0", VA = "0xED37C0")]
	private void RestorePlayerFromPrefs()
	{
	}

	[Token(Token = "0x6000C74")]
	[Address(RVA = "0xED3688", Offset = "0xED3688", VA = "0xED3688")]
	private void ResetPlayerInfo()
	{
	}

	[Token(Token = "0x6000C75")]
	[Address(RVA = "0xED4934", Offset = "0xED4934", VA = "0xED4934")]
	public bool UserIsLoggedIn()
	{
		return default(bool);
	}

	[Token(Token = "0x6000C76")]
	[Address(RVA = "0xED4954", Offset = "0xED4954", VA = "0xED4954")]
	public SessionManager()
	{
	}
}
[Token(Token = "0x200028C")]
public enum SessionType
{
	[Token(Token = "0x4000D3B")]
	Test,
	[Token(Token = "0x4000D3C")]
	VR,
	[Token(Token = "0x4000D3D")]
	Mobile
}
[Token(Token = "0x200028D")]
public class PlayerAccessData
{
	[Token(Token = "0x4000D3E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string userId;

	[Token(Token = "0x4000D3F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string username;

	[Token(Token = "0x4000D40")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string accessToken;

	[Token(Token = "0x4000D41")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string refreshToken;

	[Token(Token = "0x6000C9D")]
	[Address(RVA = "0xED492C", Offset = "0xED492C", VA = "0xED492C")]
	public PlayerAccessData()
	{
	}

	[Token(Token = "0x6000C9E")]
	[Address(RVA = "0xED48B8", Offset = "0xED48B8", VA = "0xED48B8")]
	public PlayerAccessData(string userId, string username, string accessToken, string refreshToken)
	{
	}
}
[Token(Token = "0x200028E")]
public class SetTextureTiling : MonoBehaviour
{
	[Token(Token = "0x4000D42")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float scaleX;

	[Token(Token = "0x4000D43")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float scaleY;

	[Token(Token = "0x4000D44")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Renderer thisRenderer;

	[Token(Token = "0x6000C9F")]
	[Address(RVA = "0xED5BB8", Offset = "0xED5BB8", VA = "0xED5BB8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000CA0")]
	[Address(RVA = "0xED5C50", Offset = "0xED5C50", VA = "0xED5C50")]
	public SetTextureTiling()
	{
	}
}
[Token(Token = "0x200028F")]
public class SettingsManager : Singleton<SettingsManager>
{
	[Token(Token = "0x2000291")]
	[CompilerGenerated]
	private sealed class <TriggerSave>d__45 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000D57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000D58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000D59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SettingsManager <>4__this;

		[Token(Token = "0x170001A8")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000CC3")]
			[Address(RVA = "0xED6B50", Offset = "0xED6B50", VA = "0xED6B50", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001A9")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000CC5")]
			[Address(RVA = "0xED6B98", Offset = "0xED6B98", VA = "0xED6B98", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000CC0")]
		[Address(RVA = "0xED656C", Offset = "0xED656C", VA = "0xED656C")]
		[DebuggerHidden]
		public <TriggerSave>d__45(int <>1__state)
		{
		}

		[Token(Token = "0x6000CC1")]
		[Address(RVA = "0xED6A44", Offset = "0xED6A44", VA = "0xED6A44", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000CC2")]
		[Address(RVA = "0xED6A48", Offset = "0xED6A48", VA = "0xED6A48", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CC4")]
		[Address(RVA = "0xED6B58", Offset = "0xED6B58", VA = "0xED6B58", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000D45")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool savePropLocations;

	[Token(Token = "0x4000D46")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool enablePalmMenu;

	[Token(Token = "0x4000D47")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	public bool enableHMDLog;

	[Token(Token = "0x4000D48")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TMP_FontAsset dyslexicFont;

	[Token(Token = "0x4000D49")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TMP_FontAsset standardFont;

	[Token(Token = "0x4000D4A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject hmdLog;

	[Token(Token = "0x4000D54")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private LibSettings settings;

	[Token(Token = "0x1700019F")]
	public bool dyslexicFontEnabled
	{
		[Token(Token = "0x6000CA1")]
		[Address(RVA = "0xED5C58", Offset = "0xED5C58", VA = "0xED5C58")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000CA2")]
		[Address(RVA = "0xED5C60", Offset = "0xED5C60", VA = "0xED5C60")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170001A0")]
	public bool highContrastEnabled
	{
		[Token(Token = "0x6000CA3")]
		[Address(RVA = "0xED5C6C", Offset = "0xED5C6C", VA = "0xED5C6C")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000CA4")]
		[Address(RVA = "0xED5C74", Offset = "0xED5C74", VA = "0xED5C74")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170001A1")]
	public bool teleportEnabled
	{
		[Token(Token = "0x6000CA5")]
		[Address(RVA = "0xED5C80", Offset = "0xED5C80", VA = "0xED5C80")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000CA6")]
		[Address(RVA = "0xED5C88", Offset = "0xED5C88", VA = "0xED5C88")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170001A2")]
	public bool freeMovementEnabled
	{
		[Token(Token = "0x6000CA7")]
		[Address(RVA = "0xED5C94", Offset = "0xED5C94", VA = "0xED5C94")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000CA8")]
		[Address(RVA = "0xED5C9C", Offset = "0xED5C9C", VA = "0xED5C9C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170001A3")]
	public bool subtitlesEnabled
	{
		[Token(Token = "0x6000CA9")]
		[Address(RVA = "0xED5CA8", Offset = "0xED5CA8", VA = "0xED5CA8")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000CAA")]
		[Address(RVA = "0xED5CB0", Offset = "0xED5CB0", VA = "0xED5CB0")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170001A4")]
	public bool tipsEnabled
	{
		[Token(Token = "0x6000CAB")]
		[Address(RVA = "0xED5CBC", Offset = "0xED5CBC", VA = "0xED5CBC")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000CAC")]
		[Address(RVA = "0xED5CC4", Offset = "0xED5CC4", VA = "0xED5CC4")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170001A5")]
	public float masterVolume
	{
		[Token(Token = "0x6000CAD")]
		[Address(RVA = "0xED5CD0", Offset = "0xED5CD0", VA = "0xED5CD0")]
		[CompilerGenerated]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000CAE")]
		[Address(RVA = "0xED5CD8", Offset = "0xED5CD8", VA = "0xED5CD8")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170001A6")]
	public float sfxVolume
	{
		[Token(Token = "0x6000CAF")]
		[Address(RVA = "0xED5CE0", Offset = "0xED5CE0", VA = "0xED5CE0")]
		[CompilerGenerated]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000CB0")]
		[Address(RVA = "0xED5CE8", Offset = "0xED5CE8", VA = "0xED5CE8")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170001A7")]
	public float musicVolume
	{
		[Token(Token = "0x6000CB1")]
		[Address(RVA = "0xED5CF0", Offset = "0xED5CF0", VA = "0xED5CF0")]
		[CompilerGenerated]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000CB2")]
		[Address(RVA = "0xED5CF8", Offset = "0xED5CF8", VA = "0xED5CF8")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x6000CB3")]
	[Address(RVA = "0xED5D00", Offset = "0xED5D00", VA = "0xED5D00", Slot = "5")]
	protected override void DidAwake()
	{
	}

	[Token(Token = "0x6000CB4")]
	[Address(RVA = "0xED5E40", Offset = "0xED5E40", VA = "0xED5E40")]
	private void Start()
	{
	}

	[Token(Token = "0x6000CB5")]
	[Address(RVA = "0xED64F8", Offset = "0xED64F8", VA = "0xED64F8")]
	[IteratorStateMachine(typeof(<TriggerSave>d__45))]
	private IEnumerator TriggerSave()
	{
		return null;
	}

	[Token(Token = "0x6000CB6")]
	[Address(RVA = "0xED6594", Offset = "0xED6594", VA = "0xED6594")]
	private void WaitAndEnableMovement()
	{
	}

	[Token(Token = "0x6000CB7")]
	[Address(RVA = "0xED66F4", Offset = "0xED66F4", VA = "0xED66F4")]
	public bool GetBoolSetting(SettingType setting)
	{
		return default(bool);
	}

	[Token(Token = "0x6000CB8")]
	[Address(RVA = "0xED6750", Offset = "0xED6750", VA = "0xED6750")]
	public float GetFloatSetting(SettingType setting)
	{
		return default(float);
	}

	[Token(Token = "0x6000CB9")]
	[Address(RVA = "0xED6788", Offset = "0xED6788", VA = "0xED6788")]
	public void SaveSetting(SettingType setting, float value)
	{
	}

	[Token(Token = "0x6000CBA")]
	[Address(RVA = "0xED683C", Offset = "0xED683C", VA = "0xED683C")]
	public void SaveSetting(SettingType setting, bool value)
	{
	}

	[Token(Token = "0x6000CBB")]
	[Address(RVA = "0xED61AC", Offset = "0xED61AC", VA = "0xED61AC")]
	private void GetSettingsFromSave()
	{
	}

	[Token(Token = "0x6000CBC")]
	[Address(RVA = "0xED6928", Offset = "0xED6928", VA = "0xED6928")]
	public SettingsManager()
	{
	}
}
[Token(Token = "0x2000292")]
public enum SettingType
{
	[Token(Token = "0x4000D5B")]
	HighContrast,
	[Token(Token = "0x4000D5C")]
	VolumeMaster,
	[Token(Token = "0x4000D5D")]
	VolumeSFX,
	[Token(Token = "0x4000D5E")]
	VolumeMusic,
	[Token(Token = "0x4000D5F")]
	MovementTeleport,
	[Token(Token = "0x4000D60")]
	MovementFree,
	[Token(Token = "0x4000D61")]
	Subtitles,
	[Token(Token = "0x4000D62")]
	Tips
}
[Token(Token = "0x2000293")]
public class LibSettings
{
	[Token(Token = "0x4000D63")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool highContrast;

	[Token(Token = "0x4000D64")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float volumeMaster;

	[Token(Token = "0x4000D65")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float volumeSFX;

	[Token(Token = "0x4000D66")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float volumeMusic;

	[Token(Token = "0x4000D67")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool movementTeleport;

	[Token(Token = "0x4000D68")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool movementFree;

	[Token(Token = "0x4000D69")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
	public bool subtitles;

	[Token(Token = "0x4000D6A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x23")]
	public bool tips;

	[Token(Token = "0x6000CC6")]
	[Address(RVA = "0xED6BA0", Offset = "0xED6BA0", VA = "0xED6BA0")]
	public LibSettings(bool highContrast, float volumeMaster, float volumeSfx, float volumeMusic, bool movementTeleport, bool movementFree, bool subtitles, bool tips)
	{
	}

	[Token(Token = "0x6000CC7")]
	[Address(RVA = "0xED6920", Offset = "0xED6920", VA = "0xED6920")]
	public LibSettings()
	{
	}
}
[Token(Token = "0x2000294")]
public class SettleDetector : MonoBehaviour
{
	[Token(Token = "0x2000295")]
	public delegate void OnSettleDelegate();

	[Token(Token = "0x2000296")]
	[CompilerGenerated]
	private sealed class <OnSettleCoroutine>d__11 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000D71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000D72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000D73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SettleDetector <>4__this;

		[Token(Token = "0x4000D74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool <settled>5__2;

		[Token(Token = "0x4000D75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int <atRestCount>5__3;

		[Token(Token = "0x170001AB")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000CD4")]
			[Address(RVA = "0xED6FF4", Offset = "0xED6FF4", VA = "0xED6FF4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001AC")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000CD6")]
			[Address(RVA = "0xED703C", Offset = "0xED703C", VA = "0xED703C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000CD1")]
		[Address(RVA = "0xED6D10", Offset = "0xED6D10", VA = "0xED6D10")]
		[DebuggerHidden]
		public <OnSettleCoroutine>d__11(int <>1__state)
		{
		}

		[Token(Token = "0x6000CD2")]
		[Address(RVA = "0xED6EA4", Offset = "0xED6EA4", VA = "0xED6EA4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000CD3")]
		[Address(RVA = "0xED6EA8", Offset = "0xED6EA8", VA = "0xED6EA8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CD5")]
		[Address(RVA = "0xED6FFC", Offset = "0xED6FFC", VA = "0xED6FFC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000D6B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OnSettleDelegate onSettleDelegate;

	[Token(Token = "0x4000D6C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Rigidbody rigidBody;

	[Token(Token = "0x4000D6D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int settleFrames;

	[Token(Token = "0x4000D6E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float settleTolerance;

	[Token(Token = "0x4000D70")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	private bool onSettleRunning;

	[Token(Token = "0x170001AA")]
	public bool isSettled
	{
		[Token(Token = "0x6000CC8")]
		[Address(RVA = "0xED6C1C", Offset = "0xED6C1C", VA = "0xED6C1C")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000CC9")]
		[Address(RVA = "0xED6C24", Offset = "0xED6C24", VA = "0xED6C24")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x6000CCA")]
	[Address(RVA = "0xED6C30", Offset = "0xED6C30", VA = "0xED6C30")]
	public bool OnSettleStart()
	{
		return default(bool);
	}

	[Token(Token = "0x6000CCB")]
	[Address(RVA = "0xED6C9C", Offset = "0xED6C9C", VA = "0xED6C9C")]
	[IteratorStateMachine(typeof(<OnSettleCoroutine>d__11))]
	private IEnumerator OnSettleCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000CCC")]
	[Address(RVA = "0xED6D38", Offset = "0xED6D38", VA = "0xED6D38")]
	public SettleDetector()
	{
	}
}
[Token(Token = "0x2000297")]
public class ShakeTransform : MonoBehaviour
{
	[Token(Token = "0x2000298")]
	[CompilerGenerated]
	private sealed class <Shake>d__8 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000D7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000D7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000D7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ShakeTransform <>4__this;

		[Token(Token = "0x170001AD")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000CDE")]
			[Address(RVA = "0xED72E4", Offset = "0xED72E4", VA = "0xED72E4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001AE")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000CE0")]
			[Address(RVA = "0xED732C", Offset = "0xED732C", VA = "0xED732C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000CDB")]
		[Address(RVA = "0xED7120", Offset = "0xED7120", VA = "0xED7120")]
		[DebuggerHidden]
		public <Shake>d__8(int <>1__state)
		{
		}

		[Token(Token = "0x6000CDC")]
		[Address(RVA = "0xED715C", Offset = "0xED715C", VA = "0xED715C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000CDD")]
		[Address(RVA = "0xED7160", Offset = "0xED7160", VA = "0xED7160", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CDF")]
		[Address(RVA = "0xED72EC", Offset = "0xED72EC", VA = "0xED72EC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000D76")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Info")]
	private Vector3 _startPos;

	[Token(Token = "0x4000D77")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float _timer;

	[Token(Token = "0x4000D78")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector3 _randomPos;

	[Token(Token = "0x4000D79")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[Header("Settings")]
	[Range(0f, 10f)]
	public float _time;

	[Token(Token = "0x4000D7A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Range(0f, 2f)]
	public float _distance;

	[Token(Token = "0x4000D7B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[Range(0f, 0.1f)]
	public float _delayBetweenShakes;

	[Token(Token = "0x6000CD7")]
	[Address(RVA = "0xED7044", Offset = "0xED7044", VA = "0xED7044")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x6000CD8")]
	[Address(RVA = "0xED705C", Offset = "0xED705C", VA = "0xED705C")]
	public void Begin()
	{
	}

	[Token(Token = "0x6000CD9")]
	[Address(RVA = "0xED70AC", Offset = "0xED70AC", VA = "0xED70AC")]
	[IteratorStateMachine(typeof(<Shake>d__8))]
	private IEnumerator Shake()
	{
		return null;
	}

	[Token(Token = "0x6000CDA")]
	[Address(RVA = "0xED7148", Offset = "0xED7148", VA = "0xED7148")]
	public ShakeTransform()
	{
	}
}
[Token(Token = "0x2000299")]
public abstract class Singleton<T> : MonoBehaviour where T : MonoBehaviour
{
	[Token(Token = "0x4000D7F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	protected static T instance;

	[Token(Token = "0x170001AF")]
	public static T _sharedInstance
	{
		[Token(Token = "0x6000CE1")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000CE2")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x6000CE3")]
	public static bool Exists()
	{
		return default(bool);
	}

	[Token(Token = "0x6000CE4")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000CE5")]
	protected abstract void DidAwake();

	[Token(Token = "0x6000CE6")]
	protected Singleton()
	{
	}
}
[Token(Token = "0x200029A")]
public class SoundEffectController : MonoBehaviour
{
	[Token(Token = "0x200029B")]
	[CompilerGenerated]
	private sealed class <co_WaitThenDoAction>d__11 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000D84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000D85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000D86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float waitDuration;

		[Token(Token = "0x4000D87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action action;

		[Token(Token = "0x170001B2")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000CF2")]
			[Address(RVA = "0xED7864", Offset = "0xED7864", VA = "0xED7864", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001B3")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000CF4")]
			[Address(RVA = "0xED78AC", Offset = "0xED78AC", VA = "0xED78AC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000CEF")]
		[Address(RVA = "0xED7748", Offset = "0xED7748", VA = "0xED7748")]
		[DebuggerHidden]
		public <co_WaitThenDoAction>d__11(int <>1__state)
		{
		}

		[Token(Token = "0x6000CF0")]
		[Address(RVA = "0xED779C", Offset = "0xED779C", VA = "0xED779C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000CF1")]
		[Address(RVA = "0xED77A0", Offset = "0xED77A0", VA = "0xED77A0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CF3")]
		[Address(RVA = "0xED786C", Offset = "0xED786C", VA = "0xED786C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000D80")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float delay;

	[Token(Token = "0x4000D81")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float stopAfter;

	[Token(Token = "0x4000D82")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AnimationCurve volumeCurve;

	[Token(Token = "0x4000D83")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private AudioSource _audioSource;

	[Token(Token = "0x170001B0")]
	public AudioSource audioSource
	{
		[Token(Token = "0x6000CE7")]
		[Address(RVA = "0xED7334", Offset = "0xED7334", VA = "0xED7334")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001B1")]
	public float timeUntilCompletion
	{
		[Token(Token = "0x6000CE8")]
		[Address(RVA = "0xED73DC", Offset = "0xED73DC", VA = "0xED73DC")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x6000CE9")]
	[Address(RVA = "0xED74B4", Offset = "0xED74B4", VA = "0xED74B4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000CEA")]
	[Address(RVA = "0xED7640", Offset = "0xED7640", VA = "0xED7640")]
	private void Update()
	{
	}

	[Token(Token = "0x6000CEB")]
	[Address(RVA = "0xED7620", Offset = "0xED7620", VA = "0xED7620")]
	private void WaitThenDoAction(float waitDuration, Action action)
	{
	}

	[Token(Token = "0x6000CEC")]
	[Address(RVA = "0xED76C4", Offset = "0xED76C4", VA = "0xED76C4")]
	[IteratorStateMachine(typeof(<co_WaitThenDoAction>d__11))]
	private IEnumerator co_WaitThenDoAction(float waitDuration, Action action)
	{
		return null;
	}

	[Token(Token = "0x6000CED")]
	[Address(RVA = "0xED7770", Offset = "0xED7770", VA = "0xED7770")]
	public SoundEffectController()
	{
	}
}
[Token(Token = "0x200029C")]
public class SplashLoader : MonoBehaviour
{
	[Token(Token = "0x200029D")]
	[CompilerGenerated]
	private sealed class <Start>d__0 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000D88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000D89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x170001B4")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000CFA")]
			[Address(RVA = "0xED7A2C", Offset = "0xED7A2C", VA = "0xED7A2C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001B5")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000CFC")]
			[Address(RVA = "0xED7A74", Offset = "0xED7A74", VA = "0xED7A74", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000CF7")]
		[Address(RVA = "0xED7914", Offset = "0xED7914", VA = "0xED7914")]
		[DebuggerHidden]
		public <Start>d__0(int <>1__state)
		{
		}

		[Token(Token = "0x6000CF8")]
		[Address(RVA = "0xED7944", Offset = "0xED7944", VA = "0xED7944", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000CF9")]
		[Address(RVA = "0xED7948", Offset = "0xED7948", VA = "0xED7948", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CFB")]
		[Address(RVA = "0xED7A34", Offset = "0xED7A34", VA = "0xED7A34", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x6000CF5")]
	[Address(RVA = "0xED78B4", Offset = "0xED78B4", VA = "0xED78B4")]
	[IteratorStateMachine(typeof(<Start>d__0))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x6000CF6")]
	[Address(RVA = "0xED793C", Offset = "0xED793C", VA = "0xED793C")]
	public SplashLoader()
	{
	}
}
[Token(Token = "0x200029E")]
public class SteadyCam : MonoBehaviour
{
	[Token(Token = "0x4000D8A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public iTweenPath path1;

	[Token(Token = "0x6000CFD")]
	[Address(RVA = "0xED7A7C", Offset = "0xED7A7C", VA = "0xED7A7C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000CFE")]
	[Address(RVA = "0xED7CD0", Offset = "0xED7CD0", VA = "0xED7CD0")]
	public SteadyCam()
	{
	}
}
[Token(Token = "0x200029F")]
public class SubtitlesHUD : Singleton<SubtitlesHUD>
{
	[Token(Token = "0x20002A0")]
	[CompilerGenerated]
	private sealed class <Start>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000D91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000D92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000D93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SubtitlesHUD <>4__this;

		[Token(Token = "0x170001B6")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000D0A")]
			[Address(RVA = "0xED8364", Offset = "0xED8364", VA = "0xED8364", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001B7")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000D0C")]
			[Address(RVA = "0xED83AC", Offset = "0xED83AC", VA = "0xED83AC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D07")]
		[Address(RVA = "0xED7D50", Offset = "0xED7D50", VA = "0xED7D50")]
		[DebuggerHidden]
		public <Start>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x6000D08")]
		[Address(RVA = "0xED814C", Offset = "0xED814C", VA = "0xED814C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000D09")]
		[Address(RVA = "0xED8150", Offset = "0xED8150", VA = "0xED8150", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D0B")]
		[Address(RVA = "0xED836C", Offset = "0xED836C", VA = "0xED836C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002A1")]
	[CompilerGenerated]
	private sealed class <Timeout>d__9 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000D94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000D95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000D96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float timeout;

		[Token(Token = "0x4000D97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public SubtitlesHUD <>4__this;

		[Token(Token = "0x170001B8")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000D10")]
			[Address(RVA = "0xED8470", Offset = "0xED8470", VA = "0xED8470", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001B9")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000D12")]
			[Address(RVA = "0xED84B8", Offset = "0xED84B8", VA = "0xED84B8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D0D")]
		[Address(RVA = "0xED7EE0", Offset = "0xED7EE0", VA = "0xED7EE0")]
		[DebuggerHidden]
		public <Timeout>d__9(int <>1__state)
		{
		}

		[Token(Token = "0x6000D0E")]
		[Address(RVA = "0xED83B4", Offset = "0xED83B4", VA = "0xED83B4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000D0F")]
		[Address(RVA = "0xED83B8", Offset = "0xED83B8", VA = "0xED83B8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D11")]
		[Address(RVA = "0xED8478", Offset = "0xED8478", VA = "0xED8478", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000D8B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float rotationLerpMultiplier;

	[Token(Token = "0x4000D8C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextMeshPro label;

	[Token(Token = "0x4000D8D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject background;

	[Token(Token = "0x4000D8E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform thisTransform;

	[Token(Token = "0x4000D8F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Transform playerHead;

	[Token(Token = "0x4000D90")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool subtitlesEnabled;

	[Token(Token = "0x6000CFF")]
	[Address(RVA = "0xED7CD8", Offset = "0xED7CD8", VA = "0xED7CD8", Slot = "5")]
	protected override void DidAwake()
	{
	}

	[Token(Token = "0x6000D00")]
	[Address(RVA = "0xED7CDC", Offset = "0xED7CDC", VA = "0xED7CDC")]
	[IteratorStateMachine(typeof(<Start>d__7))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x6000D01")]
	[Address(RVA = "0xED7D78", Offset = "0xED7D78", VA = "0xED7D78")]
	public void SetMessageWithTimeout(string message, float timeout, bool forceMessage)
	{
	}

	[Token(Token = "0x6000D02")]
	[Address(RVA = "0xED7E5C", Offset = "0xED7E5C", VA = "0xED7E5C")]
	[IteratorStateMachine(typeof(<Timeout>d__9))]
	private IEnumerator Timeout(float timeout)
	{
		return null;
	}

	[Token(Token = "0x6000D03")]
	[Address(RVA = "0xED41E4", Offset = "0xED41E4", VA = "0xED41E4")]
	public void ClearMessage()
	{
	}

	[Token(Token = "0x6000D04")]
	[Address(RVA = "0xED7F08", Offset = "0xED7F08", VA = "0xED7F08")]
	private void Update()
	{
	}

	[Token(Token = "0x6000D05")]
	[Address(RVA = "0xED8064", Offset = "0xED8064", VA = "0xED8064")]
	public SubtitlesHUD()
	{
	}
}
[Token(Token = "0x20002A2")]
public class SuccessUIController : Singleton<SuccessUIController>
{
	[Token(Token = "0x20002A3")]
	[CompilerGenerated]
	private sealed class <DisableAfterSeconds>d__9 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000D9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000D9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000DA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float seconds;

		[Token(Token = "0x4000DA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public SuccessUIController <>4__this;

		[Token(Token = "0x170001BA")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000D1B")]
			[Address(RVA = "0xED9010", Offset = "0xED9010", VA = "0xED9010", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001BB")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000D1D")]
			[Address(RVA = "0xED9058", Offset = "0xED9058", VA = "0xED9058", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D18")]
		[Address(RVA = "0xED8784", Offset = "0xED8784", VA = "0xED8784")]
		[DebuggerHidden]
		public <DisableAfterSeconds>d__9(int <>1__state)
		{
		}

		[Token(Token = "0x6000D19")]
		[Address(RVA = "0xED87F4", Offset = "0xED87F4", VA = "0xED87F4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000D1A")]
		[Address(RVA = "0xED87F8", Offset = "0xED87F8", VA = "0xED87F8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D1C")]
		[Address(RVA = "0xED9018", Offset = "0xED9018", VA = "0xED9018", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000D98")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TextMeshPro instructions;

	[Token(Token = "0x4000D99")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ParticleSystem ps;

	[Token(Token = "0x4000D9A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public FloatingMovement floatingMovement;

	[Token(Token = "0x4000D9B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioSource audioSource;

	[Token(Token = "0x4000D9C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Transform hmd;

	[Token(Token = "0x4000D9D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Vector3 origScale;

	[Token(Token = "0x6000D13")]
	[Address(RVA = "0xED84C0", Offset = "0xED84C0", VA = "0xED84C0", Slot = "5")]
	protected override void DidAwake()
	{
	}

	[Token(Token = "0x6000D14")]
	[Address(RVA = "0xED5600", Offset = "0xED5600", VA = "0xED5600")]
	public void DisplayMessage(string message, float secondsToDisplay)
	{
	}

	[Token(Token = "0x6000D15")]
	[Address(RVA = "0xED8674", Offset = "0xED8674", VA = "0xED8674")]
	private void OnLoginComplete()
	{
	}

	[Token(Token = "0x6000D16")]
	[Address(RVA = "0xED85F0", Offset = "0xED85F0", VA = "0xED85F0")]
	[IteratorStateMachine(typeof(<DisableAfterSeconds>d__9))]
	private IEnumerator DisableAfterSeconds(float seconds)
	{
		return null;
	}

	[Token(Token = "0x6000D17")]
	[Address(RVA = "0xED87AC", Offset = "0xED87AC", VA = "0xED87AC")]
	public SuccessUIController()
	{
	}
}
[Token(Token = "0x20002A4")]
public class TeleportableArea : BaseTeleportationInteractable
{
	[Token(Token = "0x4000DA2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	[SerializeField]
	private bool m_LockTeleportationToCenter;

	[Token(Token = "0x170001BC")]
	public bool lockTeleportationToCenter
	{
		[Token(Token = "0x6000D1E")]
		[Address(RVA = "0xED9060", Offset = "0xED9060", VA = "0xED9060")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000D1F")]
		[Address(RVA = "0xED9068", Offset = "0xED9068", VA = "0xED9068")]
		set
		{
		}
	}

	[Token(Token = "0x6000D20")]
	[Address(RVA = "0xED9074", Offset = "0xED9074", VA = "0xED9074")]
	public TeleportableArea()
	{
	}
}
[Token(Token = "0x20002A5")]
public class TeleportationProviderController : TeleportationProvider
{
	[Token(Token = "0x20002A6")]
	[CompilerGenerated]
	private sealed class <co_BeginLerpedMovement>d__17 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000DAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000DB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000DB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportationProviderController <>4__this;

		[Token(Token = "0x4000DB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 cameraDestination;

		[Token(Token = "0x4000DB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 <startPos>5__2;

		[Token(Token = "0x4000DB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 <endPos>5__3;

		[Token(Token = "0x4000DB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float <duration>5__4;

		[Token(Token = "0x4000DB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float <startTime>5__5;

		[Token(Token = "0x170001BD")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000D2D")]
			[Address(RVA = "0xEDA498", Offset = "0xEDA498", VA = "0xEDA498", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001BE")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000D2F")]
			[Address(RVA = "0xEDA4E0", Offset = "0xEDA4E0", VA = "0xEDA4E0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D2A")]
		[Address(RVA = "0xEDA1FC", Offset = "0xEDA1FC", VA = "0xEDA1FC")]
		[DebuggerHidden]
		public <co_BeginLerpedMovement>d__17(int <>1__state)
		{
		}

		[Token(Token = "0x6000D2B")]
		[Address(RVA = "0xEDA2C8", Offset = "0xEDA2C8", VA = "0xEDA2C8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000D2C")]
		[Address(RVA = "0xEDA2CC", Offset = "0xEDA2CC", VA = "0xEDA2CC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D2E")]
		[Address(RVA = "0xEDA4A0", Offset = "0xEDA4A0", VA = "0xEDA4A0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000DA3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private TeleportationVisualIndicator visualIndicatorPrefab;

	[Token(Token = "0x4000DA4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private InputActionReference thumbStickInputLeft;

	[Token(Token = "0x4000DA5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private InputActionReference thumbStickInputRight;

	[Token(Token = "0x4000DA6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private XRRayInteractor rayInteractorLeft;

	[Token(Token = "0x4000DA7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	private XRRayInteractor rayInteractorRight;

	[Token(Token = "0x4000DA8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	private float shiftTeleportationDuration;

	[Token(Token = "0x4000DA9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[SerializeField]
	private List<Material> spotHighlightMaterials;

	[Token(Token = "0x4000DAA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[SerializeField]
	private LayerMask raycastingLayerMask;

	[Token(Token = "0x4000DAB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private TeleportationVisualIndicator visualIndicator;

	[Token(Token = "0x4000DAC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private Vector2 thumbStickLeft;

	[Token(Token = "0x4000DAD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private Vector2 thumbStickRight;

	[Token(Token = "0x4000DAE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private bool teleporationDeterminationActive;

	[Token(Token = "0x6000D21")]
	[Address(RVA = "0xED907C", Offset = "0xED907C", VA = "0xED907C", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000D22")]
	[Address(RVA = "0xED9244", Offset = "0xED9244", VA = "0xED9244")]
	private void ThumbStickMoved(InputAction.CallbackContext context, bool leftThumbstick)
	{
	}

	[Token(Token = "0x6000D23")]
	[Address(RVA = "0xED92C4", Offset = "0xED92C4", VA = "0xED92C4")]
	private void UpdateVisualIndicator()
	{
	}

	[Token(Token = "0x6000D24")]
	[Address(RVA = "0xED980C", Offset = "0xED980C", VA = "0xED980C")]
	private void UpdateVisualIndicatorForInteractorAndTelportationArea(RaycastHit raycastHit, Transform handReferenceTransform, TeleportableArea teleportableArea)
	{
	}

	[Token(Token = "0x6000D25")]
	[Address(RVA = "0xED9E48", Offset = "0xED9E48", VA = "0xED9E48", Slot = "6")]
	protected override void Update()
	{
	}

	[Token(Token = "0x6000D26")]
	[Address(RVA = "0xEDA164", Offset = "0xEDA164", VA = "0xEDA164")]
	[IteratorStateMachine(typeof(<co_BeginLerpedMovement>d__17))]
	private IEnumerator co_BeginLerpedMovement(Vector3 cameraDestination)
	{
		return null;
	}

	[Token(Token = "0x6000D27")]
	[Address(RVA = "0xEDA224", Offset = "0xEDA224", VA = "0xEDA224")]
	public TeleportationProviderController()
	{
	}
}
[Token(Token = "0x20002A7")]
public class TeleportationProviderOVRController : MonoBehaviour
{
	[Token(Token = "0x20002A8")]
	private class TeleportRequestItem
	{
		[Token(Token = "0x4000DC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 destinationPosition;

		[Token(Token = "0x4000DC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Quaternion destinationRotation;

		[Token(Token = "0x4000DC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float requestTime;

		[Token(Token = "0x6000D3A")]
		[Address(RVA = "0xEDAD30", Offset = "0xEDAD30", VA = "0xEDAD30")]
		public TeleportRequestItem()
		{
		}
	}

	[Token(Token = "0x20002A9")]
	[CompilerGenerated]
	private sealed class <co_BeginLerpedMovement>d__24 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000DCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000DCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000DCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportationProviderOVRController <>4__this;

		[Token(Token = "0x4000DCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 cameraDestination;

		[Token(Token = "0x4000DCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <duration>5__2;

		[Token(Token = "0x4000DCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float <startTime>5__3;

		[Token(Token = "0x4000DD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Vector3 <destPosition>5__4;

		[Token(Token = "0x4000DD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3 <startPos>5__5;

		[Token(Token = "0x4000DD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Vector3 <endPos>5__6;

		[Token(Token = "0x170001BF")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000D3E")]
			[Address(RVA = "0xEDB0D8", Offset = "0xEDB0D8", VA = "0xEDB0D8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001C0")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000D40")]
			[Address(RVA = "0xEDB120", Offset = "0xEDB120", VA = "0xEDB120", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D3B")]
		[Address(RVA = "0xEDAEB4", Offset = "0xEDAEB4", VA = "0xEDAEB4")]
		[DebuggerHidden]
		public <co_BeginLerpedMovement>d__24(int <>1__state)
		{
		}

		[Token(Token = "0x6000D3C")]
		[Address(RVA = "0xEDAF80", Offset = "0xEDAF80", VA = "0xEDAF80", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000D3D")]
		[Address(RVA = "0xEDAF84", Offset = "0xEDAF84", VA = "0xEDAF84", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D3F")]
		[Address(RVA = "0xEDB0E0", Offset = "0xEDB0E0", VA = "0xEDB0E0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000DB7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform playerTransform;

	[Token(Token = "0x4000DB8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private TeleportationVisualIndicator visualIndicatorPrefab;

	[Token(Token = "0x4000DB9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private InputActionReference thumbStickInputLeft;

	[Token(Token = "0x4000DBA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private InputActionReference thumbStickInputRight;

	[Token(Token = "0x4000DBB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Transform rayInteractorLeft;

	[Token(Token = "0x4000DBC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Transform rayInteractorRight;

	[Token(Token = "0x4000DBD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private float shiftTeleportationDuration;

	[Token(Token = "0x4000DBE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private List<Material> spotHighlightMaterials;

	[Token(Token = "0x4000DBF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private LayerMask raycastingLayerMask;

	[Token(Token = "0x4000DC0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private TeleportRequestItem currentTeleporationRequest;

	[Token(Token = "0x4000DC1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private TeleportationVisualIndicator visualIndicator;

	[Token(Token = "0x4000DC2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Vector2 thumbStickLeft;

	[Token(Token = "0x4000DC3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Vector2 thumbStickRight;

	[Token(Token = "0x4000DC4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private bool teleporationDeterminationActive;

	[Token(Token = "0x4000DC5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
	private bool teleportationEnabled;

	[Token(Token = "0x4000DC6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	[SerializeField]
	private float teleportCosmologicalHeightAdjustment;

	[Token(Token = "0x6000D30")]
	[Address(RVA = "0xEDA4E8", Offset = "0xEDA4E8", VA = "0xEDA4E8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000D31")]
	[Address(RVA = "0xEDA644", Offset = "0xEDA644", VA = "0xEDA644")]
	private void Start()
	{
	}

	[Token(Token = "0x6000D32")]
	[Address(RVA = "0xEDA648", Offset = "0xEDA648", VA = "0xEDA648")]
	public void EnableTeleport(bool enable)
	{
	}

	[Token(Token = "0x6000D33")]
	[Address(RVA = "0xEDA654", Offset = "0xEDA654", VA = "0xEDA654")]
	private void ThumbStickMoved(InputAction.CallbackContext context, bool leftThumbstick)
	{
	}

	[Token(Token = "0x6000D34")]
	[Address(RVA = "0xEDA6D4", Offset = "0xEDA6D4", VA = "0xEDA6D4")]
	private void UpdateVisualIndicator()
	{
	}

	[Token(Token = "0x6000D35")]
	[Address(RVA = "0xEDAC20", Offset = "0xEDAC20", VA = "0xEDAC20")]
	private void UpdateVisualIndicatorForInteractorAndTelportationArea(RaycastHit raycastHit, Transform handReferenceTransform, TeleportableArea teleportableArea)
	{
	}

	[Token(Token = "0x6000D36")]
	[Address(RVA = "0xEDAD38", Offset = "0xEDAD38", VA = "0xEDAD38")]
	private void Update()
	{
	}

	[Token(Token = "0x6000D37")]
	[Address(RVA = "0xEDAE1C", Offset = "0xEDAE1C", VA = "0xEDAE1C")]
	[IteratorStateMachine(typeof(<co_BeginLerpedMovement>d__24))]
	private IEnumerator co_BeginLerpedMovement(Vector3 cameraDestination)
	{
		return null;
	}

	[Token(Token = "0x6000D38")]
	[Address(RVA = "0xEDAEDC", Offset = "0xEDAEDC", VA = "0xEDAEDC")]
	public TeleportationProviderOVRController()
	{
	}
}
[Token(Token = "0x20002AA")]
public class TeleportationSpotHighlighter : MonoBehaviour
{
	[Token(Token = "0x4000DD3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private List<ParticleSystem> highlightEmitters;

	[Token(Token = "0x6000D41")]
	[Address(RVA = "0xEDB128", Offset = "0xEDB128", VA = "0xEDB128")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000D42")]
	[Address(RVA = "0xEDB258", Offset = "0xEDB258", VA = "0xEDB258")]
	private void SetVisualsEnabled(bool toEnabled)
	{
	}

	[Token(Token = "0x6000D43")]
	[Address(RVA = "0xEDB3D8", Offset = "0xEDB3D8", VA = "0xEDB3D8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000D44")]
	[Address(RVA = "0xEDB464", Offset = "0xEDB464", VA = "0xEDB464")]
	public TeleportationSpotHighlighter()
	{
	}
}
[Token(Token = "0x20002AB")]
public class TeleportationVisualIndicator : MonoBehaviour
{
	[Token(Token = "0x4000DD4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	protected Transform spotIndicator;

	[Token(Token = "0x4000DD5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	protected Transform lineIndicator;

	[Token(Token = "0x4000DD6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	protected Transform originIndicator;

	[Token(Token = "0x4000DD7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	protected List<LineRenderer> archPathLineRenderers;

	[Token(Token = "0x4000DD8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected float[] lineRendererWidthScalars;

	[Token(Token = "0x4000DD9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	protected float spotPositoningLerping;

	[Token(Token = "0x4000DDA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	protected float midPointPositoningLerping;

	[Token(Token = "0x4000DDB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	protected float midPointPositoningSecondaryScalarLerping;

	[Token(Token = "0x4000DDC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	protected ParticleSystem trailingBurstEmitter;

	[Token(Token = "0x4000DDD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	protected AudioSource archActiveSoundEffect;

	[Token(Token = "0x4000DDE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	protected AudioSource teleportSoundEffect;

	[Token(Token = "0x4000DDF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	protected float bezierFirstMidPointHeight;

	[Token(Token = "0x4000DE0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[SerializeField]
	protected float bezierSecondMidPointHeight;

	[Token(Token = "0x4000DE1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	protected Gradient negativeLineColorGradient;

	[Token(Token = "0x4000DE2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	protected Gradient[] positiveLineColorGradients;

	[Token(Token = "0x4000DE3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public List<Transform> pointsObjs;

	[Token(Token = "0x4000DE5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	protected Vector3[] archPathPoints;

	[Token(Token = "0x4000DE6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	protected Vector3 prevSpotPosition;

	[Token(Token = "0x4000DE7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	protected Vector3 prevMidPointA;

	[Token(Token = "0x4000DE8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	protected Vector3 prevMidPointB;

	[Token(Token = "0x4000DE9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	protected bool visualsShouldBeEnabled;

	[Token(Token = "0x170001C1")]
	public bool isShowingNegativeColor
	{
		[Token(Token = "0x6000D47")]
		[Address(RVA = "0xEDB4FC", Offset = "0xEDB4FC", VA = "0xEDB4FC")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000D48")]
		[Address(RVA = "0xEDB504", Offset = "0xEDB504", VA = "0xEDB504")]
		[CompilerGenerated]
		protected set
		{
		}
	}

	[Token(Token = "0x170001C2")]
	public float visualsPercentage
	{
		[Token(Token = "0x6000D49")]
		[Address(RVA = "0xEDB510", Offset = "0xEDB510", VA = "0xEDB510")]
		[CompilerGenerated]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000D4A")]
		[Address(RVA = "0xEDB518", Offset = "0xEDB518", VA = "0xEDB518")]
		[CompilerGenerated]
		protected set
		{
		}
	}

	[Token(Token = "0x6000D4B")]
	[Address(RVA = "0xEDB520", Offset = "0xEDB520", VA = "0xEDB520", Slot = "4")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x6000D4C")]
	[Address(RVA = "0xEDB650", Offset = "0xEDB650", VA = "0xEDB650")]
	private void Update()
	{
	}

	[Token(Token = "0x6000D4D")]
	[Address(RVA = "0xED991C", Offset = "0xED991C", VA = "0xED991C")]
	public void PerformDidTeleportAnimation()
	{
	}

	[Token(Token = "0x6000D4E")]
	[Address(RVA = "0xEDB984", Offset = "0xEDB984", VA = "0xEDB984", Slot = "5")]
	public virtual void SetVisualsEnabled(bool toEnabled, bool negativeColor = false)
	{
	}

	[Token(Token = "0x6000D4F")]
	[Address(RVA = "0xEDB654", Offset = "0xEDB654", VA = "0xEDB654")]
	private void UpdateVisiblityPercentage()
	{
	}

	[Token(Token = "0x6000D50")]
	[Address(RVA = "0xED9990", Offset = "0xED9990", VA = "0xED9990")]
	public void SetToPositions(Vector3 spotPosition, Vector3 handPosition)
	{
	}

	[Token(Token = "0x6000D51")]
	[Address(RVA = "0xEDBBFC", Offset = "0xEDBBFC", VA = "0xEDBBFC")]
	public TeleportationVisualIndicator()
	{
	}
}
[Token(Token = "0x20002AC")]
public static class TestPing
{
	[Token(Token = "0x4000DEB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool status;

	[Token(Token = "0x4000DEC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
	public static bool isDone;

	[Token(Token = "0x4000DED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static string ipAdd;

	[Token(Token = "0x6000D52")]
	[Address(RVA = "0xEDBD30", Offset = "0xEDBD30", VA = "0xEDBD30")]
	public static bool PingThis()
	{
		return default(bool);
	}

	[Token(Token = "0x6000D53")]
	[Address(RVA = "0xEDBF0C", Offset = "0xEDBF0C", VA = "0xEDBF0C")]
	public static string GetIPAddress()
	{
		return null;
	}

	[Token(Token = "0x6000D54")]
	[Address(RVA = "0xEDC08C", Offset = "0xEDC08C", VA = "0xEDC08C")]
	public static void DoPing()
	{
	}
}
[Token(Token = "0x20002AD")]
[RequireComponent(typeof(ManagedDeck))]
public class TossUpEffect : MonoBehaviour
{
	[Token(Token = "0x20002AE")]
	[CompilerGenerated]
	private sealed class <Pop>d__27 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000E03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000E04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000E05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TossUpEffect <>4__this;

		[Token(Token = "0x170001C4")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000D64")]
			[Address(RVA = "0xEDD078", Offset = "0xEDD078", VA = "0xEDD078", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001C5")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000D66")]
			[Address(RVA = "0xEDD0C0", Offset = "0xEDD0C0", VA = "0xEDD0C0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D61")]
		[Address(RVA = "0xEDC82C", Offset = "0xEDC82C", VA = "0xEDC82C")]
		[DebuggerHidden]
		public <Pop>d__27(int <>1__state)
		{
		}

		[Token(Token = "0x6000D62")]
		[Address(RVA = "0xEDCDA4", Offset = "0xEDCDA4", VA = "0xEDCDA4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000D63")]
		[Address(RVA = "0xEDCDA8", Offset = "0xEDCDA8", VA = "0xEDCDA8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D65")]
		[Address(RVA = "0xEDD080", Offset = "0xEDD080", VA = "0xEDD080", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002AF")]
	[CompilerGenerated]
	private sealed class <Timeout>d__28 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000E06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000E07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000E08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float timeout;

		[Token(Token = "0x4000E09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TossUpEffect <>4__this;

		[Token(Token = "0x170001C6")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000D6A")]
			[Address(RVA = "0xEDD264", Offset = "0xEDD264", VA = "0xEDD264", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001C7")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000D6C")]
			[Address(RVA = "0xEDD2AC", Offset = "0xEDD2AC", VA = "0xEDD2AC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D67")]
		[Address(RVA = "0xEDC8D8", Offset = "0xEDC8D8", VA = "0xEDC8D8")]
		[DebuggerHidden]
		public <Timeout>d__28(int <>1__state)
		{
		}

		[Token(Token = "0x6000D68")]
		[Address(RVA = "0xEDD0C8", Offset = "0xEDD0C8", VA = "0xEDD0C8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000D69")]
		[Address(RVA = "0xEDD0CC", Offset = "0xEDD0CC", VA = "0xEDD0CC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D6B")]
		[Address(RVA = "0xEDD26C", Offset = "0xEDD26C", VA = "0xEDD26C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000DEE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Autohand.Hand hand;

	[Token(Token = "0x4000DEF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject explodeParticles;

	[Token(Token = "0x4000DF0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ShakeTransform shake;

	[Token(Token = "0x4000DF1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioSource audioSource;

	[Token(Token = "0x4000DF2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AudioClip tossUpSoundEffect;

	[Token(Token = "0x4000DF3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float rotationRate;

	[Token(Token = "0x4000DF4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float rotationAccel;

	[Token(Token = "0x4000DF5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float maxRotationRate;

	[Token(Token = "0x4000DF6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float tossUpHeight;

	[Token(Token = "0x4000DF7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float spawnTimeout;

	[Token(Token = "0x4000DF9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Transform thisTransform;

	[Token(Token = "0x4000DFA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Rigidbody thisRigidbody;

	[Token(Token = "0x4000DFB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private ManagedDeck managedDeck;

	[Token(Token = "0x4000DFC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private bool hasBeenTossed;

	[Token(Token = "0x4000DFD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
	private bool validating;

	[Token(Token = "0x4000DFE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private float playerHeight;

	[Token(Token = "0x4000DFF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Coroutine popCoroutine;

	[Token(Token = "0x4000E00")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Coroutine dmCoroutine;

	[Token(Token = "0x4000E01")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Collider thisCollider;

	[Token(Token = "0x4000E02")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private bool checkedSpawningThisToss;

	[Token(Token = "0x170001C3")]
	public bool takeover
	{
		[Token(Token = "0x6000D56")]
		[Address(RVA = "0xEDC18C", Offset = "0xEDC18C", VA = "0xEDC18C")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000D57")]
		[Address(RVA = "0xEDC194", Offset = "0xEDC194", VA = "0xEDC194")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x6000D58")]
	[Address(RVA = "0xEDC1A0", Offset = "0xEDC1A0", VA = "0xEDC1A0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000D59")]
	[Address(RVA = "0xEDC45C", Offset = "0xEDC45C", VA = "0xEDC45C")]
	public void Toss()
	{
	}

	[Token(Token = "0x6000D5A")]
	[Address(RVA = "0xEDC4F4", Offset = "0xEDC4F4", VA = "0xEDC4F4")]
	private void TakeoverAtTossedHeight()
	{
	}

	[Token(Token = "0x6000D5B")]
	[Address(RVA = "0xEDC7B8", Offset = "0xEDC7B8", VA = "0xEDC7B8")]
	[IteratorStateMachine(typeof(<Pop>d__27))]
	private IEnumerator Pop()
	{
		return null;
	}

	[Token(Token = "0x6000D5C")]
	[Address(RVA = "0xEDC854", Offset = "0xEDC854", VA = "0xEDC854")]
	[IteratorStateMachine(typeof(<Timeout>d__28))]
	private IEnumerator Timeout(float timeout)
	{
		return null;
	}

	[Token(Token = "0x6000D5D")]
	[Address(RVA = "0xEDC900", Offset = "0xEDC900", VA = "0xEDC900")]
	public void OnPickup()
	{
	}

	[Token(Token = "0x6000D5E")]
	[Address(RVA = "0xEDC9BC", Offset = "0xEDC9BC", VA = "0xEDC9BC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000D5F")]
	[Address(RVA = "0xEDCC00", Offset = "0xEDCC00", VA = "0xEDCC00")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000D60")]
	[Address(RVA = "0xEDCD90", Offset = "0xEDCD90", VA = "0xEDCD90")]
	public TossUpEffect()
	{
	}
}
[Token(Token = "0x20002B0")]
public class TossUpEffectManager : Singleton<TossUpEffectManager>
{
	[Token(Token = "0x4000E0A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Dictionary<Guid, List<TossUpEffect>> tues;

	[Token(Token = "0x6000D6D")]
	[Address(RVA = "0xEDD2B4", Offset = "0xEDD2B4", VA = "0xEDD2B4", Slot = "5")]
	protected override void DidAwake()
	{
	}

	[Token(Token = "0x6000D6E")]
	[Address(RVA = "0xEDD2B8", Offset = "0xEDD2B8", VA = "0xEDD2B8")]
	public List<TossUpEffect> GetDeckSetIsSpinning(Guid deckid)
	{
		return null;
	}

	[Token(Token = "0x6000D6F")]
	[Address(RVA = "0xEDC2C0", Offset = "0xEDC2C0", VA = "0xEDC2C0")]
	public void RegisterTossUpEffect(Guid deckid, TossUpEffect tue)
	{
	}

	[Token(Token = "0x6000D70")]
	[Address(RVA = "0xEDCCE8", Offset = "0xEDCCE8", VA = "0xEDCCE8")]
	public void UnRegisterTossUpEffect(Guid deckid)
	{
	}

	[Token(Token = "0x6000D71")]
	[Address(RVA = "0xEDC6B4", Offset = "0xEDC6B4", VA = "0xEDC6B4")]
	public bool GetAnyTossUpEffectsAreSpinning()
	{
		return default(bool);
	}

	[Token(Token = "0x6000D72")]
	[Address(RVA = "0xEDD470", Offset = "0xEDD470", VA = "0xEDD470")]
	public TossUpEffectManager()
	{
	}
}
[Token(Token = "0x20002B2")]
public class TraversableProp : MonoBehaviour
{
	[Token(Token = "0x20002B3")]
	[CompilerGenerated]
	private sealed class <SpawnLargeProp>d__15 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000E1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000E1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000E1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TraversableProp <>4__this;

		[Token(Token = "0x4000E1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Guid <stackParentId>5__2;

		[Token(Token = "0x170001C8")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000D82")]
			[Address(RVA = "0xEDE038", Offset = "0xEDE038", VA = "0xEDE038", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001C9")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000D84")]
			[Address(RVA = "0xEDE080", Offset = "0xEDE080", VA = "0xEDE080", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D7F")]
		[Address(RVA = "0xEDD7FC", Offset = "0xEDD7FC", VA = "0xEDD7FC")]
		[DebuggerHidden]
		public <SpawnLargeProp>d__15(int <>1__state)
		{
		}

		[Token(Token = "0x6000D80")]
		[Address(RVA = "0xEDD974", Offset = "0xEDD974", VA = "0xEDD974", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000D81")]
		[Address(RVA = "0xEDD978", Offset = "0xEDD978", VA = "0xEDD978", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D83")]
		[Address(RVA = "0xEDE040", Offset = "0xEDE040", VA = "0xEDE040", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000E0F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject mesh;

	[Token(Token = "0x4000E10")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector3 enlargedPosition;

	[Token(Token = "0x4000E11")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public Vector3 enlargedScale;

	[Token(Token = "0x4000E12")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Vector3 enlargedRotation;

	[Token(Token = "0x4000E13")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public FurnitureLayout furnitureLayout;

	[Token(Token = "0x4000E14")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public FurnitureColor furnitureColor;

	[Token(Token = "0x4000E15")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public bool doNotInvertMesh;

	[Token(Token = "0x4000E16")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private ManagedProp managedProp;

	[Token(Token = "0x4000E17")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private GameObject enlargedProp;

	[Token(Token = "0x4000E18")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Transform origParent;

	[Token(Token = "0x4000E19")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private CardStack nestedPropsToSpawn;

	[Token(Token = "0x6000D78")]
	[Address(RVA = "0xEDD6C4", Offset = "0xEDD6C4", VA = "0xEDD6C4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000D79")]
	[Address(RVA = "0xEDD71C", Offset = "0xEDD71C", VA = "0xEDD71C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000D7A")]
	[Address(RVA = "0xEDD758", Offset = "0xEDD758", VA = "0xEDD758")]
	public void ResetOriginalParent()
	{
	}

	[Token(Token = "0x6000D7B")]
	[Address(RVA = "0xEDD780", Offset = "0xEDD780", VA = "0xEDD780")]
	public GameObject GetEnlargedProp()
	{
		return null;
	}

	[Token(Token = "0x6000D7C")]
	[Address(RVA = "0xEDD788", Offset = "0xEDD788", VA = "0xEDD788")]
	[IteratorStateMachine(typeof(<SpawnLargeProp>d__15))]
	public IEnumerator SpawnLargeProp()
	{
		return null;
	}

	[Token(Token = "0x6000D7D")]
	[Address(RVA = "0xEDD824", Offset = "0xEDD824", VA = "0xEDD824")]
	public void SpawnNestedProps()
	{
	}

	[Token(Token = "0x6000D7E")]
	[Address(RVA = "0xEDD96C", Offset = "0xEDD96C", VA = "0xEDD96C")]
	public TraversableProp()
	{
	}
}
[Token(Token = "0x20002B4")]
public class TraverseProp : MonoBehaviour
{
	[Token(Token = "0x20002B5")]
	[CompilerGenerated]
	private sealed class <OnTriggerEnter>d__18 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000E2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000E2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000E2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Collider other;

		[Token(Token = "0x4000E30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TraverseProp <>4__this;

		[Token(Token = "0x170001CA")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000D90")]
			[Address(RVA = "0xEDED54", Offset = "0xEDED54", VA = "0xEDED54", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001CB")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000D92")]
			[Address(RVA = "0xEDED9C", Offset = "0xEDED9C", VA = "0xEDED9C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D8D")]
		[Address(RVA = "0xEDE278", Offset = "0xEDE278", VA = "0xEDE278")]
		[DebuggerHidden]
		public <OnTriggerEnter>d__18(int <>1__state)
		{
		}

		[Token(Token = "0x6000D8E")]
		[Address(RVA = "0xEDE788", Offset = "0xEDE788", VA = "0xEDE788", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000D8F")]
		[Address(RVA = "0xEDE78C", Offset = "0xEDE78C", VA = "0xEDE78C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D91")]
		[Address(RVA = "0xEDED5C", Offset = "0xEDED5C", VA = "0xEDED5C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002B6")]
	[CompilerGenerated]
	private sealed class <ReturnOneLevel>d__19 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000E31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000E32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000E33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TraverseProp <>4__this;

		[Token(Token = "0x4000E34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private PropTraversalEffectController <propTraversalEffectController>5__2;

		[Token(Token = "0x170001CC")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000D96")]
			[Address(RVA = "0xEDF168", Offset = "0xEDF168", VA = "0xEDF168", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001CD")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000D98")]
			[Address(RVA = "0xEDF1B0", Offset = "0xEDF1B0", VA = "0xEDF1B0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D93")]
		[Address(RVA = "0xEDE314", Offset = "0xEDE314", VA = "0xEDE314")]
		[DebuggerHidden]
		public <ReturnOneLevel>d__19(int <>1__state)
		{
		}

		[Token(Token = "0x6000D94")]
		[Address(RVA = "0xEDEDA4", Offset = "0xEDEDA4", VA = "0xEDEDA4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000D95")]
		[Address(RVA = "0xEDEDA8", Offset = "0xEDEDA8", VA = "0xEDEDA8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D97")]
		[Address(RVA = "0xEDF170", Offset = "0xEDF170", VA = "0xEDF170", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000E1E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject OVRRig;

	[Token(Token = "0x4000E1F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject fader;

	[Token(Token = "0x4000E20")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ParticleSystem ps;

	[Token(Token = "0x4000E21")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private ParticleSystem.EmissionModule emission;

	[Token(Token = "0x4000E22")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool isTraversing;

	[Token(Token = "0x4000E23")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool isInsideProp;

	[Token(Token = "0x4000E24")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private ManagedProp currentlyPickedUpProp;

	[Token(Token = "0x4000E25")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private ManagedProp traversingProp;

	[Token(Token = "0x4000E26")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private int nestedDepth;

	[Token(Token = "0x4000E27")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Transform thisTransform;

	[Token(Token = "0x4000E28")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Transform playerController;

	[Token(Token = "0x4000E29")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private PropTraversalEffectController propTraversalEffectPrefab;

	[Token(Token = "0x4000E2A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private List<PropTraversalEffectController> propTraversalEffectControllerStack;

	[Token(Token = "0x4000E2B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float totalDistance;

	[Token(Token = "0x4000E2C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private float maxDistance;

	[Token(Token = "0x6000D85")]
	[Address(RVA = "0xEDE088", Offset = "0xEDE088", VA = "0xEDE088")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000D86")]
	[Address(RVA = "0xEDE19C", Offset = "0xEDE19C", VA = "0xEDE19C")]
	public void RegisterEffect(ParticleSystem ps)
	{
	}

	[Token(Token = "0x6000D87")]
	[Address(RVA = "0xEDE1E0", Offset = "0xEDE1E0", VA = "0xEDE1E0")]
	private void RegisterPickedUpProp(ManagedProp prop)
	{
	}

	[Token(Token = "0x6000D88")]
	[Address(RVA = "0xEDE1E8", Offset = "0xEDE1E8", VA = "0xEDE1E8")]
	[IteratorStateMachine(typeof(<OnTriggerEnter>d__18))]
	private IEnumerator OnTriggerEnter(Collider other)
	{
		return null;
	}

	[Token(Token = "0x6000D89")]
	[Address(RVA = "0xEDE2A0", Offset = "0xEDE2A0", VA = "0xEDE2A0")]
	[IteratorStateMachine(typeof(<ReturnOneLevel>d__19))]
	private IEnumerator ReturnOneLevel()
	{
		return null;
	}

	[Token(Token = "0x6000D8A")]
	[Address(RVA = "0xEDE33C", Offset = "0xEDE33C", VA = "0xEDE33C")]
	public void TriggerReturnOneLevel()
	{
	}

	[Token(Token = "0x6000D8B")]
	[Address(RVA = "0xEDE440", Offset = "0xEDE440", VA = "0xEDE440")]
	private void Update()
	{
	}

	[Token(Token = "0x6000D8C")]
	[Address(RVA = "0xEDE6F4", Offset = "0xEDE6F4", VA = "0xEDE6F4")]
	public TraverseProp()
	{
	}
}
[Token(Token = "0x20002B7")]
public class TweenObjectToPosition : MonoBehaviour
{
	[Token(Token = "0x4000E35")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 position;

	[Token(Token = "0x4000E36")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool isRelative;

	[Token(Token = "0x4000E37")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
	public bool isLocal;

	[Token(Token = "0x4000E38")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float time;

	[Token(Token = "0x4000E39")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public iTween.EaseType easeType;

	[Token(Token = "0x6000D99")]
	[Address(RVA = "0xEDF1B8", Offset = "0xEDF1B8", VA = "0xEDF1B8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000D9A")]
	[Address(RVA = "0xEDF5B0", Offset = "0xEDF5B0", VA = "0xEDF5B0")]
	public TweenObjectToPosition()
	{
	}
}
[Token(Token = "0x20002B8")]
public class DissolveOpenBook : Singleton<DissolveOpenBook>
{
	[Token(Token = "0x20002B9")]
	public enum BookTab
	{
		[Token(Token = "0x4000E7F")]
		None = -1,
		[Token(Token = "0x4000E80")]
		Settings,
		[Token(Token = "0x4000E81")]
		Decks,
		[Token(Token = "0x4000E82")]
		Gnosis,
		[Token(Token = "0x4000E83")]
		AcceptDeck,
		[Token(Token = "0x4000E84")]
		Refresh
	}

	[Token(Token = "0x20002BA")]
	[CompilerGenerated]
	private sealed class <co_SubToSessionStart>d__71 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000E85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000E86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000E87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DissolveOpenBook <>4__this;

		[Token(Token = "0x170001CE")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000DC7")]
			[Address(RVA = "0xEE20E4", Offset = "0xEE20E4", VA = "0xEE20E4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001CF")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000DC9")]
			[Address(RVA = "0xEE212C", Offset = "0xEE212C", VA = "0xEE212C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000DC4")]
		[Address(RVA = "0xEDF698", Offset = "0xEDF698", VA = "0xEDF698")]
		[DebuggerHidden]
		public <co_SubToSessionStart>d__71(int <>1__state)
		{
		}

		[Token(Token = "0x6000DC5")]
		[Address(RVA = "0xEE1F90", Offset = "0xEE1F90", VA = "0xEE1F90", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000DC6")]
		[Address(RVA = "0xEE1F94", Offset = "0xEE1F94", VA = "0xEE1F94", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000DC8")]
		[Address(RVA = "0xEE20EC", Offset = "0xEE20EC", VA = "0xEE20EC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002BD")]
	[CompilerGenerated]
	private sealed class <co_RefreshTimer>d__77 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000E8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000E8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000E8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DissolveOpenBook <>4__this;

		[Token(Token = "0x170001D0")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000DD2")]
			[Address(RVA = "0xEE2490", Offset = "0xEE2490", VA = "0xEE2490", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001D1")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000DD4")]
			[Address(RVA = "0xEE24D8", Offset = "0xEE24D8", VA = "0xEE24D8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000DCF")]
		[Address(RVA = "0xEE0188", Offset = "0xEE0188", VA = "0xEE0188")]
		[DebuggerHidden]
		public <co_RefreshTimer>d__77(int <>1__state)
		{
		}

		[Token(Token = "0x6000DD0")]
		[Address(RVA = "0xEE2270", Offset = "0xEE2270", VA = "0xEE2270", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000DD1")]
		[Address(RVA = "0xEE2274", Offset = "0xEE2274", VA = "0xEE2274", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000DD3")]
		[Address(RVA = "0xEE2498", Offset = "0xEE2498", VA = "0xEE2498", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002BE")]
	[CompilerGenerated]
	private sealed class <DoStartGripTimer>d__85 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000E8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000E90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000E91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DissolveOpenBook <>4__this;

		[Token(Token = "0x4000E92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <gripTimer>5__2;

		[Token(Token = "0x170001D2")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000DD8")]
			[Address(RVA = "0xEE258C", Offset = "0xEE258C", VA = "0xEE258C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001D3")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000DDA")]
			[Address(RVA = "0xEE25D4", Offset = "0xEE25D4", VA = "0xEE25D4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000DD5")]
		[Address(RVA = "0xEE0D70", Offset = "0xEE0D70", VA = "0xEE0D70")]
		[DebuggerHidden]
		public <DoStartGripTimer>d__85(int <>1__state)
		{
		}

		[Token(Token = "0x6000DD6")]
		[Address(RVA = "0xEE24E0", Offset = "0xEE24E0", VA = "0xEE24E0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000DD7")]
		[Address(RVA = "0xEE24E4", Offset = "0xEE24E4", VA = "0xEE24E4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000DD9")]
		[Address(RVA = "0xEE2594", Offset = "0xEE2594", VA = "0xEE2594", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002BF")]
	[CompilerGenerated]
	private sealed class <FlipToSection>d__86 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000E93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000E94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000E95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DissolveOpenBook <>4__this;

		[Token(Token = "0x4000E96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public BookTab section;

		[Token(Token = "0x170001D4")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000DDE")]
			[Address(RVA = "0xEE28E4", Offset = "0xEE28E4", VA = "0xEE28E4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001D5")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000DE0")]
			[Address(RVA = "0xEE292C", Offset = "0xEE292C", VA = "0xEE292C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000DDB")]
		[Address(RVA = "0xEE0E1C", Offset = "0xEE0E1C", VA = "0xEE0E1C")]
		[DebuggerHidden]
		public <FlipToSection>d__86(int <>1__state)
		{
		}

		[Token(Token = "0x6000DDC")]
		[Address(RVA = "0xEE25DC", Offset = "0xEE25DC", VA = "0xEE25DC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000DDD")]
		[Address(RVA = "0xEE25E0", Offset = "0xEE25E0", VA = "0xEE25E0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000DDF")]
		[Address(RVA = "0xEE28EC", Offset = "0xEE28EC", VA = "0xEE28EC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002C0")]
	[CompilerGenerated]
	private sealed class <co_FlipSettingsPage>d__88 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000E97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000E98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000E99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DissolveOpenBook <>4__this;

		[Token(Token = "0x4000E9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool flipForward;

		[Token(Token = "0x4000E9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int currentSettingsPage;

		[Token(Token = "0x170001D6")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000DE4")]
			[Address(RVA = "0xEE2A68", Offset = "0xEE2A68", VA = "0xEE2A68", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001D7")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000DE6")]
			[Address(RVA = "0xEE2AB0", Offset = "0xEE2AB0", VA = "0xEE2AB0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000DE1")]
		[Address(RVA = "0xEE0F70", Offset = "0xEE0F70", VA = "0xEE0F70")]
		[DebuggerHidden]
		public <co_FlipSettingsPage>d__88(int <>1__state)
		{
		}

		[Token(Token = "0x6000DE2")]
		[Address(RVA = "0xEE2934", Offset = "0xEE2934", VA = "0xEE2934", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000DE3")]
		[Address(RVA = "0xEE2938", Offset = "0xEE2938", VA = "0xEE2938", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000DE5")]
		[Address(RVA = "0xEE2A70", Offset = "0xEE2A70", VA = "0xEE2A70", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002C1")]
	[CompilerGenerated]
	private sealed class <co_FlipDeckPage>d__89 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000E9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000E9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000E9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DissolveOpenBook <>4__this;

		[Token(Token = "0x4000E9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool flipForward;

		[Token(Token = "0x4000EA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public List<DeckPackage> decksOnPage;

		[Token(Token = "0x170001D8")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000DEA")]
			[Address(RVA = "0xEE2B6C", Offset = "0xEE2B6C", VA = "0xEE2B6C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001D9")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000DEC")]
			[Address(RVA = "0xEE2BB4", Offset = "0xEE2BB4", VA = "0xEE2BB4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000DE7")]
		[Address(RVA = "0xEE0F98", Offset = "0xEE0F98", VA = "0xEE0F98")]
		[DebuggerHidden]
		public <co_FlipDeckPage>d__89(int <>1__state)
		{
		}

		[Token(Token = "0x6000DE8")]
		[Address(RVA = "0xEE2AB8", Offset = "0xEE2AB8", VA = "0xEE2AB8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000DE9")]
		[Address(RVA = "0xEE2ABC", Offset = "0xEE2ABC", VA = "0xEE2ABC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000DEB")]
		[Address(RVA = "0xEE2B74", Offset = "0xEE2B74", VA = "0xEE2B74", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002C2")]
	[CompilerGenerated]
	private sealed class <AnimateDeckFlip>d__90 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000EA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000EA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000EA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DissolveOpenBook <>4__this;

		[Token(Token = "0x4000EA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool flipForward;

		[Token(Token = "0x170001DA")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000DF0")]
			[Address(RVA = "0xEE2D00", Offset = "0xEE2D00", VA = "0xEE2D00", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001DB")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000DF2")]
			[Address(RVA = "0xEE2D48", Offset = "0xEE2D48", VA = "0xEE2D48", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000DED")]
		[Address(RVA = "0xEE1048", Offset = "0xEE1048", VA = "0xEE1048")]
		[DebuggerHidden]
		public <AnimateDeckFlip>d__90(int <>1__state)
		{
		}

		[Token(Token = "0x6000DEE")]
		[Address(RVA = "0xEE2BBC", Offset = "0xEE2BBC", VA = "0xEE2BBC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000DEF")]
		[Address(RVA = "0xEE2BC0", Offset = "0xEE2BC0", VA = "0xEE2BC0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000DF1")]
		[Address(RVA = "0xEE2D08", Offset = "0xEE2D08", VA = "0xEE2D08", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002C3")]
	[CompilerGenerated]
	private sealed class <DestroySpawnedDecks>d__91 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000EA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000EA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000EA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DissolveOpenBook <>4__this;

		[Token(Token = "0x4000EA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float timeToShrink;

		[Token(Token = "0x170001DC")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000DF6")]
			[Address(RVA = "0xEE3220", Offset = "0xEE3220", VA = "0xEE3220", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001DD")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000DF8")]
			[Address(RVA = "0xEE3268", Offset = "0xEE3268", VA = "0xEE3268", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000DF3")]
		[Address(RVA = "0xEE10F4", Offset = "0xEE10F4", VA = "0xEE10F4")]
		[DebuggerHidden]
		public <DestroySpawnedDecks>d__91(int <>1__state)
		{
		}

		[Token(Token = "0x6000DF4")]
		[Address(RVA = "0xEE2D50", Offset = "0xEE2D50", VA = "0xEE2D50", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000DF5")]
		[Address(RVA = "0xEE2D54", Offset = "0xEE2D54", VA = "0xEE2D54", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000DF7")]
		[Address(RVA = "0xEE3228", Offset = "0xEE3228", VA = "0xEE3228", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002C4")]
	[CompilerGenerated]
	private sealed class <ForceDropThenGrab>d__93 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000EA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000EAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000EAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject go;

		[Token(Token = "0x4000EAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public DissolveOpenBook <>4__this;

		[Token(Token = "0x4000EAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Grabbable <gb>5__2;

		[Token(Token = "0x170001DE")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000DFC")]
			[Address(RVA = "0xEE338C", Offset = "0xEE338C", VA = "0xEE338C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001DF")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000DFE")]
			[Address(RVA = "0xEE33D4", Offset = "0xEE33D4", VA = "0xEE33D4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000DF9")]
		[Address(RVA = "0xEE130C", Offset = "0xEE130C", VA = "0xEE130C")]
		[DebuggerHidden]
		public <ForceDropThenGrab>d__93(int <>1__state)
		{
		}

		[Token(Token = "0x6000DFA")]
		[Address(RVA = "0xEE3270", Offset = "0xEE3270", VA = "0xEE3270", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000DFB")]
		[Address(RVA = "0xEE3274", Offset = "0xEE3274", VA = "0xEE3274", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000DFD")]
		[Address(RVA = "0xEE3394", Offset = "0xEE3394", VA = "0xEE3394", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002C5")]
	[CompilerGenerated]
	private sealed class <OpenCloseDissolve>d__95 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000EAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000EAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000EB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DissolveOpenBook <>4__this;

		[Token(Token = "0x4000EB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public BookTab tabToOpen;

		[Token(Token = "0x4000EB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private bool <shouldOpen>5__2;

		[Token(Token = "0x4000EB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <dissolveCountdown>5__3;

		[Token(Token = "0x4000EB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private bool <psHasBeenFired>5__4;

		[Token(Token = "0x170001E0")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000E02")]
			[Address(RVA = "0xEE37E0", Offset = "0xEE37E0", VA = "0xEE37E0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001E1")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000E04")]
			[Address(RVA = "0xEE3828", Offset = "0xEE3828", VA = "0xEE3828", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000DFF")]
		[Address(RVA = "0xEE13B8", Offset = "0xEE13B8", VA = "0xEE13B8")]
		[DebuggerHidden]
		public <OpenCloseDissolve>d__95(int <>1__state)
		{
		}

		[Token(Token = "0x6000E00")]
		[Address(RVA = "0xEE33DC", Offset = "0xEE33DC", VA = "0xEE33DC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000E01")]
		[Address(RVA = "0xEE33E0", Offset = "0xEE33E0", VA = "0xEE33E0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E03")]
		[Address(RVA = "0xEE37E8", Offset = "0xEE37E8", VA = "0xEE37E8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000E3A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GnosisPurchaseController gnosisController;

	[Token(Token = "0x4000E3B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ParticleSystem burstParticles;

	[Token(Token = "0x4000E3C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ParticleSystem smokeParticles;

	[Token(Token = "0x4000E3D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Animator animator;

	[Token(Token = "0x4000E3E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public PageFlipper pageFlipper;

	[Token(Token = "0x4000E3F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject pageFlipObject;

	[Token(Token = "0x4000E40")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Renderer thisRenderer;

	[Token(Token = "0x4000E41")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Renderer pageFlipRenderer;

	[Token(Token = "0x4000E42")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Material origMat;

	[Token(Token = "0x4000E43")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Material hcMat;

	[Token(Token = "0x4000E44")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Material pageFlipOrigMat;

	[Token(Token = "0x4000E45")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Material pageFlipHCMat;

	[Token(Token = "0x4000E46")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public float dissolveTime;

	[Token(Token = "0x4000E47")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public AudioSource bookPopNoise;

	[Token(Token = "0x4000E48")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Autohand.Hand menuHand;

	[Token(Token = "0x4000E49")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Autohand.Hand grabbingHand;

	[Token(Token = "0x4000E4A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public GameObject deckPrefab;

	[Token(Token = "0x4000E4B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public GameObject closeDeckPrefab;

	[Token(Token = "0x4000E4C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public Transform[] spawnPoints;

	[Token(Token = "0x4000E4D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public TextMeshPro pageCountLabel;

	[Token(Token = "0x4000E4E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public TextMeshPro settingsPageCountLabel;

	[Token(Token = "0x4000E4F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public PublishTriggerEnterExit[] tabPublishers;

	[Token(Token = "0x4000E50")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public PublishTriggerEnterExit refreshPublisher;

	[Token(Token = "0x4000E51")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public GameObject[] sectionParents;

	[Token(Token = "0x4000E52")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public GameObject[] settingsSubparents;

	[Token(Token = "0x4000E53")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public InputActionReference thumbStickPageTurn;

	[Token(Token = "0x4000E54")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public int currentlyActiveDeckIndex;

	[Token(Token = "0x4000E55")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public Renderer menuHandRenderer;

	[Token(Token = "0x4000E56")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public Color menuHandOutlineColor;

	[Token(Token = "0x4000E57")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public GameObject gnosisAvailableEffect;

	[Token(Token = "0x4000E58")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public UIManualButton logoutButton;

	[Token(Token = "0x4000E59")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public TextMeshPro[] palmTextFields;

	[Token(Token = "0x4000E5A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public TextMeshPro versionLabel;

	[Token(Token = "0x4000E5B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	public GameObject deckRetrievalParticleEffect;

	[Token(Token = "0x4000E5C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private int pageCountDecks;

	[Token(Token = "0x4000E5D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
	private int pageCountSettings;

	[Token(Token = "0x4000E5E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public bool isOpen;

	[Token(Token = "0x4000E5F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
	private float invisibleCutoff;

	[Token(Token = "0x4000E60")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private float visibleCutoff;

	[Token(Token = "0x4000E61")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
	private float particleFireFactor;

	[Token(Token = "0x4000E62")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private ParticleSystem.EmissionModule smokeEmitter;

	[Token(Token = "0x4000E63")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	private Transform hmd;

	[Token(Token = "0x4000E64")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	private Transform thisTransform;

	[Token(Token = "0x4000E65")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	private List<Vector3> spawnedObjectsOrigScales;

	[Token(Token = "0x4000E66")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	private Vector3 origObjectScale;

	[Token(Token = "0x4000E67")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	private List<GameObject> spawnedDecks;

	[Token(Token = "0x4000E68")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	private float origHandReachDistance;

	[Token(Token = "0x4000E69")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
	private bool gripButtonWasPressedWithinThreshold;

	[Token(Token = "0x4000E6A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	private float gripButtonWaitTime;

	[Token(Token = "0x4000E6B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
	private bool pageIsFlipping;

	[Token(Token = "0x4000E6C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	private int deckSlots;

	[Token(Token = "0x4000E6D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
	private int currentPage;

	[Token(Token = "0x4000E6E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	private bool thumbstickIsTilted;

	[Token(Token = "0x4000E6F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
	private BookTab currentTab;

	[Token(Token = "0x4000E70")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	private bool isInOpenableRotation;

	[Token(Token = "0x4000E71")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
	private float openBookReachDistance;

	[Token(Token = "0x4000E72")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	private Color origMenuHandOutlineColor;

	[Token(Token = "0x4000E73")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	private Vector3 originalPageFlipRotation;

	[Token(Token = "0x4000E74")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
	private Transform menuHandTransform;

	[Token(Token = "0x4000E75")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
	private bool onboardingIsComplete;

	[Token(Token = "0x4000E76")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
	private UserEventTrigger onboCompleteTrigger;

	[Token(Token = "0x4000E77")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
	private Vector2 thumbStickLeft;

	[Token(Token = "0x4000E78")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
	private List<BookTab> forbiddenTabs;

	[Token(Token = "0x4000E79")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
	private bool tomeOpenable;

	[Token(Token = "0x4000E7A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F1")]
	private bool decksRetrievable;

	[Token(Token = "0x4000E7B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F2")]
	private bool tomeIsOpen;

	[Token(Token = "0x4000E7C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F4")]
	private float lastRefreshTime;

	[Token(Token = "0x4000E7D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
	private bool refreshIsAvailable;

	[Token(Token = "0x6000D9B")]
	[Address(RVA = "0xEDF5B8", Offset = "0xEDF5B8", VA = "0xEDF5B8", Slot = "5")]
	protected override void DidAwake()
	{
	}

	[Token(Token = "0x6000D9C")]
	[Address(RVA = "0xEDF64C", Offset = "0xEDF64C", VA = "0xEDF64C")]
	private void ResponseToNetworkLoss(bool enable)
	{
	}

	[Token(Token = "0x6000D9D")]
	[Address(RVA = "0xEDF5D8", Offset = "0xEDF5D8", VA = "0xEDF5D8")]
	[IteratorStateMachine(typeof(<co_SubToSessionStart>d__71))]
	private IEnumerator co_SubToSessionStart()
	{
		return null;
	}

	[Token(Token = "0x6000D9E")]
	[Address(RVA = "0xEDF6C0", Offset = "0xEDF6C0", VA = "0xEDF6C0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000D9F")]
	[Address(RVA = "0xEDFE60", Offset = "0xEDFE60", VA = "0xEDFE60")]
	public void RetrieveDeck()
	{
	}

	[Token(Token = "0x6000DA0")]
	[Address(RVA = "0xEDFFD0", Offset = "0xEDFFD0", VA = "0xEDFFD0")]
	private void SetRefreshIsAvailable()
	{
	}

	[Token(Token = "0x6000DA1")]
	[Address(RVA = "0xEE0030", Offset = "0xEE0030", VA = "0xEE0030")]
	public void RefreshDecks()
	{
	}

	[Token(Token = "0x6000DA2")]
	[Address(RVA = "0xEE00AC", Offset = "0xEE00AC", VA = "0xEE00AC")]
	private void ForceRefreshDecks()
	{
	}

	[Token(Token = "0x6000DA3")]
	[Address(RVA = "0xEE0114", Offset = "0xEE0114", VA = "0xEE0114")]
	[IteratorStateMachine(typeof(<co_RefreshTimer>d__77))]
	private IEnumerator co_RefreshTimer()
	{
		return null;
	}

	[Token(Token = "0x6000DA4")]
	[Address(RVA = "0xEE01B0", Offset = "0xEE01B0", VA = "0xEE01B0")]
	public void ToggleTomeOpenable(bool openable)
	{
	}

	[Token(Token = "0x6000DA5")]
	[Address(RVA = "0xED6434", Offset = "0xED6434", VA = "0xED6434")]
	public void SetHighContrast(bool enable)
	{
	}

	[Token(Token = "0x6000DA6")]
	[Address(RVA = "0xEE01BC", Offset = "0xEE01BC", VA = "0xEE01BC")]
	private void PopulateSpawnedDecks(List<DeckPackage> decks)
	{
	}

	[Token(Token = "0x6000DA7")]
	[Address(RVA = "0xEE087C", Offset = "0xEE087C", VA = "0xEE087C")]
	public void SwapDeckRetrieverForDeck(DeckPackage deck)
	{
	}

	[Token(Token = "0x6000DA8")]
	[Address(RVA = "0xEE02A4", Offset = "0xEE02A4", VA = "0xEE02A4")]
	private void PopulateSpawnedDeck(DeckPackage deck, int positionIndex, bool currentlySpawningDeck)
	{
	}

	[Token(Token = "0x6000DA9")]
	[Address(RVA = "0xEE092C", Offset = "0xEE092C", VA = "0xEE092C")]
	private void GetPositionOfThumbstick(InputAction.CallbackContext context)
	{
	}

	[Token(Token = "0x6000DAA")]
	[Address(RVA = "0xEE0CA0", Offset = "0xEE0CA0", VA = "0xEE0CA0")]
	public void StartGripTimer()
	{
	}

	[Token(Token = "0x6000DAB")]
	[Address(RVA = "0xEE0CFC", Offset = "0xEE0CFC", VA = "0xEE0CFC")]
	[IteratorStateMachine(typeof(<DoStartGripTimer>d__85))]
	private IEnumerator DoStartGripTimer()
	{
		return null;
	}

	[Token(Token = "0x6000DAC")]
	[Address(RVA = "0xEE0D98", Offset = "0xEE0D98", VA = "0xEE0D98")]
	[IteratorStateMachine(typeof(<FlipToSection>d__86))]
	private IEnumerator FlipToSection(BookTab section)
	{
		return null;
	}

	[Token(Token = "0x6000DAD")]
	[Address(RVA = "0xEE0A28", Offset = "0xEE0A28", VA = "0xEE0A28")]
	public void FlipPage(bool flipForward)
	{
	}

	[Token(Token = "0x6000DAE")]
	[Address(RVA = "0xEE0EE0", Offset = "0xEE0EE0", VA = "0xEE0EE0")]
	[IteratorStateMachine(typeof(<co_FlipSettingsPage>d__88))]
	private IEnumerator co_FlipSettingsPage(bool flipForward, int currentSettingsPage)
	{
		return null;
	}

	[Token(Token = "0x6000DAF")]
	[Address(RVA = "0xEE0E44", Offset = "0xEE0E44", VA = "0xEE0E44")]
	[IteratorStateMachine(typeof(<co_FlipDeckPage>d__89))]
	private IEnumerator co_FlipDeckPage(bool flipForward, List<DeckPackage> decksOnPage)
	{
		return null;
	}

	[Token(Token = "0x6000DB0")]
	[Address(RVA = "0xEE0FC0", Offset = "0xEE0FC0", VA = "0xEE0FC0")]
	[IteratorStateMachine(typeof(<AnimateDeckFlip>d__90))]
	private IEnumerator AnimateDeckFlip(bool flipForward)
	{
		return null;
	}

	[Token(Token = "0x6000DB1")]
	[Address(RVA = "0xEE1070", Offset = "0xEE1070", VA = "0xEE1070")]
	[IteratorStateMachine(typeof(<DestroySpawnedDecks>d__91))]
	private IEnumerator DestroySpawnedDecks(float timeToShrink)
	{
		return null;
	}

	[Token(Token = "0x6000DB2")]
	[Address(RVA = "0xEE111C", Offset = "0xEE111C", VA = "0xEE111C")]
	private void RemoveGameObjectFromList(GameObject go)
	{
	}

	[Token(Token = "0x6000DB3")]
	[Address(RVA = "0xEE127C", Offset = "0xEE127C", VA = "0xEE127C")]
	[IteratorStateMachine(typeof(<ForceDropThenGrab>d__93))]
	private IEnumerator ForceDropThenGrab(GameObject go)
	{
		return null;
	}

	[Token(Token = "0x6000DB4")]
	[Address(RVA = "0xEE11D0", Offset = "0xEE11D0", VA = "0xEE11D0")]
	private void ResetObjectScale(GameObject go)
	{
	}

	[Token(Token = "0x6000DB5")]
	[Address(RVA = "0xEE1334", Offset = "0xEE1334", VA = "0xEE1334")]
	[IteratorStateMachine(typeof(<OpenCloseDissolve>d__95))]
	private IEnumerator OpenCloseDissolve(BookTab tabToOpen)
	{
		return null;
	}

	[Token(Token = "0x6000DB6")]
	[Address(RVA = "0xEE13E0", Offset = "0xEE13E0", VA = "0xEE13E0")]
	private void SetHandOutlineColor(bool isInOpenablePosition)
	{
	}

	[Token(Token = "0x6000DB7")]
	[Address(RVA = "0xEE1478", Offset = "0xEE1478", VA = "0xEE1478")]
	private void Update()
	{
	}

	[Token(Token = "0x6000DB8")]
	[Address(RVA = "0xEE1668", Offset = "0xEE1668", VA = "0xEE1668")]
	public void TriggerOpenBook()
	{
	}

	[Token(Token = "0x6000DB9")]
	[Address(RVA = "0xEE1878", Offset = "0xEE1878", VA = "0xEE1878")]
	public void TriggerCloseBook()
	{
	}

	[Token(Token = "0x6000DBA")]
	[Address(RVA = "0xEE1A08", Offset = "0xEE1A08", VA = "0xEE1A08")]
	public void ToggleAllowableTab(BookTab tab, bool enable)
	{
	}

	[Token(Token = "0x6000DBB")]
	[Address(RVA = "0xEE1BC4", Offset = "0xEE1BC4", VA = "0xEE1BC4")]
	public void ToggleDeckRetrievable(bool retrievable)
	{
	}

	[Token(Token = "0x6000DBC")]
	[Address(RVA = "0xEE1710", Offset = "0xEE1710", VA = "0xEE1710")]
	private void OpenBook()
	{
	}

	[Token(Token = "0x6000DBD")]
	[Address(RVA = "0xEE1BD0", Offset = "0xEE1BD0", VA = "0xEE1BD0")]
	private bool CheckGrabbableInGrabbingHand()
	{
		return default(bool);
	}

	[Token(Token = "0x6000DBE")]
	[Address(RVA = "0xEE18AC", Offset = "0xEE18AC", VA = "0xEE18AC")]
	private void CloseBook()
	{
	}

	[Token(Token = "0x6000DBF")]
	[Address(RVA = "0xEE1CB4", Offset = "0xEE1CB4", VA = "0xEE1CB4")]
	public DissolveOpenBook()
	{
	}
}
[Token(Token = "0x20002C7")]
public class GnosisPurchaseButton : MonoBehaviour
{
	[Token(Token = "0x4000EB6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PublishTriggerEnterExit buttonCollider;

	[Token(Token = "0x4000EB7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public PuzzleHintClass hintClass;

	[Token(Token = "0x4000EB8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TextMeshPro buttonLabel;

	[Token(Token = "0x4000EB9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Renderer buttonRenderer;

	[Token(Token = "0x4000EBA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Material buttonActiveMat;

	[Token(Token = "0x4000EBB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Material buttonInactiveMat;

	[Token(Token = "0x4000EBC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Action<PuzzleHintClass, float> OnPurchaseMade;

	[Token(Token = "0x6000E07")]
	[Address(RVA = "0xEE3840", Offset = "0xEE3840", VA = "0xEE3840")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000E08")]
	[Address(RVA = "0xEE3928", Offset = "0xEE3928", VA = "0xEE3928")]
	public void InitializeLabel()
	{
	}

	[Token(Token = "0x6000E09")]
	[Address(RVA = "0xEE39D8", Offset = "0xEE39D8", VA = "0xEE39D8")]
	public void ToggleActive(bool activate)
	{
	}

	[Token(Token = "0x6000E0A")]
	[Address(RVA = "0xEE3A2C", Offset = "0xEE3A2C", VA = "0xEE3A2C")]
	public GnosisPurchaseButton()
	{
	}
}
[Token(Token = "0x20002C8")]
public class GnosisPurchaseController : MonoBehaviour
{
	[Token(Token = "0x20002CA")]
	[CompilerGenerated]
	private sealed class <BounceLabelWithColor>d__25 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000ED3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000ED4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000ED5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GnosisPurchaseController <>4__this;

		[Token(Token = "0x4000ED6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Color newColor;

		[Token(Token = "0x170001E2")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000E21")]
			[Address(RVA = "0xEE4E60", Offset = "0xEE4E60", VA = "0xEE4E60", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001E3")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000E23")]
			[Address(RVA = "0xEE4EA8", Offset = "0xEE4EA8", VA = "0xEE4EA8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E1E")]
		[Address(RVA = "0xEE41E8", Offset = "0xEE41E8", VA = "0xEE41E8")]
		[DebuggerHidden]
		public <BounceLabelWithColor>d__25(int <>1__state)
		{
		}

		[Token(Token = "0x6000E1F")]
		[Address(RVA = "0xEE4C1C", Offset = "0xEE4C1C", VA = "0xEE4C1C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000E20")]
		[Address(RVA = "0xEE4C20", Offset = "0xEE4C20", VA = "0xEE4C20", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E22")]
		[Address(RVA = "0xEE4E68", Offset = "0xEE4E68", VA = "0xEE4E68", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002CB")]
	[CompilerGenerated]
	private sealed class <AdjustGnosisDollars>d__26 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000ED7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000ED8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000ED9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GnosisPurchaseController <>4__this;

		[Token(Token = "0x4000EDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int adjustment;

		[Token(Token = "0x4000EDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Color color;

		[Token(Token = "0x4000EDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private int <absValue>5__2;

		[Token(Token = "0x170001E4")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000E27")]
			[Address(RVA = "0xEE50C4", Offset = "0xEE50C4", VA = "0xEE50C4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001E5")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000E29")]
			[Address(RVA = "0xEE510C", Offset = "0xEE510C", VA = "0xEE510C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E24")]
		[Address(RVA = "0xEE42BC", Offset = "0xEE42BC", VA = "0xEE42BC")]
		[DebuggerHidden]
		public <AdjustGnosisDollars>d__26(int <>1__state)
		{
		}

		[Token(Token = "0x6000E25")]
		[Address(RVA = "0xEE4EB0", Offset = "0xEE4EB0", VA = "0xEE4EB0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000E26")]
		[Address(RVA = "0xEE4EB4", Offset = "0xEE4EB4", VA = "0xEE4EB4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E28")]
		[Address(RVA = "0xEE50CC", Offset = "0xEE50CC", VA = "0xEE50CC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002CC")]
	[CompilerGenerated]
	private sealed class <co_CreditGnosis>d__27 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000EDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000EDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000EDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GnosisPurchaseController <>4__this;

		[Token(Token = "0x170001E6")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000E2D")]
			[Address(RVA = "0xEE547C", Offset = "0xEE547C", VA = "0xEE547C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001E7")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000E2F")]
			[Address(RVA = "0xEE54C4", Offset = "0xEE54C4", VA = "0xEE54C4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E2A")]
		[Address(RVA = "0xEE4358", Offset = "0xEE4358", VA = "0xEE4358")]
		[DebuggerHidden]
		public <co_CreditGnosis>d__27(int <>1__state)
		{
		}

		[Token(Token = "0x6000E2B")]
		[Address(RVA = "0xEE5114", Offset = "0xEE5114", VA = "0xEE5114", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000E2C")]
		[Address(RVA = "0xEE5118", Offset = "0xEE5118", VA = "0xEE5118", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E2E")]
		[Address(RVA = "0xEE5484", Offset = "0xEE5484", VA = "0xEE5484", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002CD")]
	[CompilerGenerated]
	private sealed class <co_AddGnosisCents>d__28 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000EE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000EE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000EE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GnosisPurchaseController <>4__this;

		[Token(Token = "0x4000EE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float credit;

		[Token(Token = "0x4000EE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <initialGnosisCents>5__2;

		[Token(Token = "0x4000EE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <finalGnosisCents>5__3;

		[Token(Token = "0x170001E8")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000E33")]
			[Address(RVA = "0xEE5B3C", Offset = "0xEE5B3C", VA = "0xEE5B3C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001E9")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000E35")]
			[Address(RVA = "0xEE5B84", Offset = "0xEE5B84", VA = "0xEE5B84", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E30")]
		[Address(RVA = "0xEE4404", Offset = "0xEE4404", VA = "0xEE4404")]
		[DebuggerHidden]
		public <co_AddGnosisCents>d__28(int <>1__state)
		{
		}

		[Token(Token = "0x6000E31")]
		[Address(RVA = "0xEE54CC", Offset = "0xEE54CC", VA = "0xEE54CC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000E32")]
		[Address(RVA = "0xEE54D0", Offset = "0xEE54D0", VA = "0xEE54D0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E34")]
		[Address(RVA = "0xEE5B44", Offset = "0xEE5B44", VA = "0xEE5B44", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002CE")]
	[CompilerGenerated]
	private sealed class <co_PlayAudioTick>d__29 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000EE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000EE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000EE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GnosisPurchaseController <>4__this;

		[Token(Token = "0x170001EA")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000E39")]
			[Address(RVA = "0xEE5C64", Offset = "0xEE5C64", VA = "0xEE5C64", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001EB")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000E3B")]
			[Address(RVA = "0xEE5CAC", Offset = "0xEE5CAC", VA = "0xEE5CAC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E36")]
		[Address(RVA = "0xEE44A0", Offset = "0xEE44A0", VA = "0xEE44A0")]
		[DebuggerHidden]
		public <co_PlayAudioTick>d__29(int <>1__state)
		{
		}

		[Token(Token = "0x6000E37")]
		[Address(RVA = "0xEE5B8C", Offset = "0xEE5B8C", VA = "0xEE5B8C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000E38")]
		[Address(RVA = "0xEE5B90", Offset = "0xEE5B90", VA = "0xEE5B90", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E3A")]
		[Address(RVA = "0xEE5C6C", Offset = "0xEE5C6C", VA = "0xEE5C6C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000EBD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GnosisPurchaseButton advanceButton;

	[Token(Token = "0x4000EBE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GnosisPurchaseButton hintButton;

	[Token(Token = "0x4000EBF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GnosisPurchaseButton reminderButton;

	[Token(Token = "0x4000EC0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public TextMeshPro gnosisDollarsLabel;

	[Token(Token = "0x4000EC1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public TextMeshPro creditTypeLabel;

	[Token(Token = "0x4000EC2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Renderer gnosisCentsRenderer;

	[Token(Token = "0x4000EC3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public ParticleSystem successParticles;

	[Token(Token = "0x4000EC4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public AudioSource tickUpAudioSource;

	[Token(Token = "0x4000EC5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public AudioSource thresholdAudioSource;

	[Token(Token = "0x4000EC6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public AudioClip purchaseClip;

	[Token(Token = "0x4000EC7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public AudioClip creditClip;

	[Token(Token = "0x4000EC8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Vector3 origLabelScale;

	[Token(Token = "0x4000EC9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public Color origDollarsLabelColor;

	[Token(Token = "0x4000ECA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private float gnosisCents;

	[Token(Token = "0x4000ECB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private int gnosisDollars;

	[Token(Token = "0x4000ECC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Dictionary<PuzzleHintClass, List<PuzzleHint>> hints;

	[Token(Token = "0x4000ECD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private bool isInitialized;

	[Token(Token = "0x4000ECE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA1")]
	private bool isAdjusting;

	[Token(Token = "0x4000ECF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA2")]
	private bool tickUpAudioShouldPlay;

	[Token(Token = "0x4000ED0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA3")]
	private bool dontActivateButtonsOnEnable;

	[Token(Token = "0x6000E0C")]
	[Address(RVA = "0xEE3AB4", Offset = "0xEE3AB4", VA = "0xEE3AB4")]
	private void InitializeButtons()
	{
	}

	[Token(Token = "0x6000E0D")]
	[Address(RVA = "0xEE3CD8", Offset = "0xEE3CD8", VA = "0xEE3CD8")]
	private void SetFromGnosis(float gnosis)
	{
	}

	[Token(Token = "0x6000E0E")]
	[Address(RVA = "0xEE3DE4", Offset = "0xEE3DE4", VA = "0xEE3DE4")]
	private void SetFromSessionInitialGnosis()
	{
	}

	[Token(Token = "0x6000E0F")]
	[Address(RVA = "0xEE3E3C", Offset = "0xEE3E3C", VA = "0xEE3E3C")]
	private void SetFromCurrentGnosis()
	{
	}

	[Token(Token = "0x6000E10")]
	[Address(RVA = "0xEE3E9C", Offset = "0xEE3E9C", VA = "0xEE3E9C")]
	private void PurchaseRandomHintOfClassForDollars(PuzzleHintClass hintClass, float floatPrice)
	{
	}

	[Token(Token = "0x6000E11")]
	[Address(RVA = "0xEE414C", Offset = "0xEE414C", VA = "0xEE414C")]
	[IteratorStateMachine(typeof(<BounceLabelWithColor>d__25))]
	private IEnumerator BounceLabelWithColor(Color newColor)
	{
		return null;
	}

	[Token(Token = "0x6000E12")]
	[Address(RVA = "0xEE4210", Offset = "0xEE4210", VA = "0xEE4210")]
	[IteratorStateMachine(typeof(<AdjustGnosisDollars>d__26))]
	private IEnumerator AdjustGnosisDollars(int adjustment, Color color)
	{
		return null;
	}

	[Token(Token = "0x6000E13")]
	[Address(RVA = "0xEE42E4", Offset = "0xEE42E4", VA = "0xEE42E4")]
	[IteratorStateMachine(typeof(<co_CreditGnosis>d__27))]
	private IEnumerator co_CreditGnosis()
	{
		return null;
	}

	[Token(Token = "0x6000E14")]
	[Address(RVA = "0xEE4380", Offset = "0xEE4380", VA = "0xEE4380")]
	[IteratorStateMachine(typeof(<co_AddGnosisCents>d__28))]
	private IEnumerator co_AddGnosisCents(float credit)
	{
		return null;
	}

	[Token(Token = "0x6000E15")]
	[Address(RVA = "0xEE442C", Offset = "0xEE442C", VA = "0xEE442C")]
	[IteratorStateMachine(typeof(<co_PlayAudioTick>d__29))]
	private IEnumerator co_PlayAudioTick()
	{
		return null;
	}

	[Token(Token = "0x6000E16")]
	[Address(RVA = "0xEE44C8", Offset = "0xEE44C8", VA = "0xEE44C8")]
	private void SetGnosisCents(float newCents)
	{
	}

	[Token(Token = "0x6000E17")]
	[Address(RVA = "0xEE410C", Offset = "0xEE410C", VA = "0xEE410C")]
	private void DeactivateAllButtons()
	{
	}

	[Token(Token = "0x6000E18")]
	[Address(RVA = "0xEE4538", Offset = "0xEE4538", VA = "0xEE4538")]
	private void ActivateButtonsByHintStatus()
	{
	}

	[Token(Token = "0x6000E19")]
	[Address(RVA = "0xEE2810", Offset = "0xEE2810", VA = "0xEE2810")]
	public void SetEnabled()
	{
	}

	[Token(Token = "0x6000E1A")]
	[Address(RVA = "0xEE4B90", Offset = "0xEE4B90", VA = "0xEE4B90")]
	public GnosisPurchaseController()
	{
	}
}
[Token(Token = "0x20002CF")]
public class MovementListener : MonoBehaviour
{
	[Token(Token = "0x20002D0")]
	public enum MovementMode
	{
		[Token(Token = "0x4000EEE")]
		Teleport,
		[Token(Token = "0x4000EEF")]
		Free
	}

	[Token(Token = "0x20002D1")]
	[CompilerGenerated]
	private sealed class <Start>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000EF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000EF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000EF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MovementListener <>4__this;

		[Token(Token = "0x170001EC")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000E48")]
			[Address(RVA = "0xEE61E0", Offset = "0xEE61E0", VA = "0xEE61E0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001ED")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000E4A")]
			[Address(RVA = "0xEE6228", Offset = "0xEE6228", VA = "0xEE6228", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E45")]
		[Address(RVA = "0xEE5FDC", Offset = "0xEE5FDC", VA = "0xEE5FDC")]
		[DebuggerHidden]
		public <Start>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x6000E46")]
		[Address(RVA = "0xEE60F0", Offset = "0xEE60F0", VA = "0xEE60F0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000E47")]
		[Address(RVA = "0xEE60F4", Offset = "0xEE60F4", VA = "0xEE60F4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E49")]
		[Address(RVA = "0xEE61E8", Offset = "0xEE61E8", VA = "0xEE61E8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000EE9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ContinuousMoveProviderBase moveProvider;

	[Token(Token = "0x4000EEA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TeleportationProviderOVRController teleportController;

	[Token(Token = "0x4000EEB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private MovementMode movementMode;

	[Token(Token = "0x4000EEC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private bool tomeIsOpen;

	[Token(Token = "0x6000E3C")]
	[Address(RVA = "0xEE5CB4", Offset = "0xEE5CB4", VA = "0xEE5CB4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000E3D")]
	[Address(RVA = "0xEE5F68", Offset = "0xEE5F68", VA = "0xEE5F68")]
	[IteratorStateMachine(typeof(<Start>d__6))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x6000E3E")]
	[Address(RVA = "0xEE6004", Offset = "0xEE6004", VA = "0xEE6004")]
	private void EnableCurrentMode(bool enable)
	{
	}

	[Token(Token = "0x6000E3F")]
	[Address(RVA = "0xEE6070", Offset = "0xEE6070", VA = "0xEE6070")]
	private void ToggleTeleport(bool enable)
	{
	}

	[Token(Token = "0x6000E40")]
	[Address(RVA = "0xEE6088", Offset = "0xEE6088", VA = "0xEE6088")]
	private void ToggleFreeMovement(bool enable)
	{
	}

	[Token(Token = "0x6000E41")]
	[Address(RVA = "0xEE60A4", Offset = "0xEE60A4", VA = "0xEE60A4")]
	public MovementMode GetCurrentMovementMode()
	{
		return default(MovementMode);
	}

	[Token(Token = "0x6000E42")]
	[Address(RVA = "0xEE60AC", Offset = "0xEE60AC", VA = "0xEE60AC")]
	public MovementListener()
	{
	}
}
[Token(Token = "0x20002D2")]
public class PhysicalUIController : MonoBehaviour
{
	[Token(Token = "0x6000E4B")]
	[Address(RVA = "0xEE6230", Offset = "0xEE6230", VA = "0xEE6230")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000E4C")]
	[Address(RVA = "0xEE64D4", Offset = "0xEE64D4", VA = "0xEE64D4")]
	private void UpdateSetting(SettingType setting, float value)
	{
	}

	[Token(Token = "0x6000E4D")]
	[Address(RVA = "0xEE65E0", Offset = "0xEE65E0", VA = "0xEE65E0")]
	private void UpdateSetting(SettingType setting, bool value)
	{
	}

	[Token(Token = "0x6000E4E")]
	[Address(RVA = "0xEE66E8", Offset = "0xEE66E8", VA = "0xEE66E8")]
	private float GetFloatForKey(SettingType setting)
	{
		return default(float);
	}

	[Token(Token = "0x6000E4F")]
	[Address(RVA = "0xEE6740", Offset = "0xEE6740", VA = "0xEE6740")]
	private bool GetBoolForKey(SettingType setting)
	{
		return default(bool);
	}

	[Token(Token = "0x6000E50")]
	[Address(RVA = "0xEE6798", Offset = "0xEE6798", VA = "0xEE6798")]
	public PhysicalUIController()
	{
	}
}
[Token(Token = "0x20002D3")]
public class PreviewDeckAcquirer : MonoBehaviour
{
	[Token(Token = "0x4000EF3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Autohand.Hand grabbingHand;

	[Token(Token = "0x4000EF4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioSource audioSource;

	[Token(Token = "0x4000EF5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ManagedDeck deck;

	[Token(Token = "0x4000EF6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool isTransitioning;

	[Token(Token = "0x6000E51")]
	[Address(RVA = "0xEE67A0", Offset = "0xEE67A0", VA = "0xEE67A0")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000E52")]
	[Address(RVA = "0xEE7048", Offset = "0xEE7048", VA = "0xEE7048")]
	private void OnScaleComplete()
	{
	}

	[Token(Token = "0x6000E53")]
	[Address(RVA = "0xEE70C4", Offset = "0xEE70C4", VA = "0xEE70C4")]
	public PreviewDeckAcquirer()
	{
	}
}
[Token(Token = "0x20002D4")]
public class TMPColorLerper : MonoBehaviour
{
	[Token(Token = "0x20002D5")]
	[CompilerGenerated]
	private sealed class <Start>d__2 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000EF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000EFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000EFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TMPColorLerper <>4__this;

		[Token(Token = "0x170001EE")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000E59")]
			[Address(RVA = "0xEE7418", Offset = "0xEE7418", VA = "0xEE7418", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001EF")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000E5B")]
			[Address(RVA = "0xEE7460", Offset = "0xEE7460", VA = "0xEE7460", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E56")]
		[Address(RVA = "0xEE7140", Offset = "0xEE7140", VA = "0xEE7140")]
		[DebuggerHidden]
		public <Start>d__2(int <>1__state)
		{
		}

		[Token(Token = "0x6000E57")]
		[Address(RVA = "0xEE7170", Offset = "0xEE7170", VA = "0xEE7170", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000E58")]
		[Address(RVA = "0xEE7174", Offset = "0xEE7174", VA = "0xEE7174", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E5A")]
		[Address(RVA = "0xEE7420", Offset = "0xEE7420", VA = "0xEE7420", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000EF7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TextMeshPro label;

	[Token(Token = "0x4000EF8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float alphaValue;

	[Token(Token = "0x6000E54")]
	[Address(RVA = "0xEE70CC", Offset = "0xEE70CC", VA = "0xEE70CC")]
	[IteratorStateMachine(typeof(<Start>d__2))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x6000E55")]
	[Address(RVA = "0xEE7168", Offset = "0xEE7168", VA = "0xEE7168")]
	public TMPColorLerper()
	{
	}
}
[Token(Token = "0x20002D6")]
public class UIManualButton : MonoBehaviour
{
	[Token(Token = "0x20002D7")]
	[CompilerGenerated]
	private sealed class <Timer>d__10 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000F03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000F04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000F05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UIManualButton <>4__this;

		[Token(Token = "0x170001F0")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000E64")]
			[Address(RVA = "0xEE7C10", Offset = "0xEE7C10", VA = "0xEE7C10", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001F1")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000E66")]
			[Address(RVA = "0xEE7C58", Offset = "0xEE7C58", VA = "0xEE7C58", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E61")]
		[Address(RVA = "0xEE7B0C", Offset = "0xEE7B0C", VA = "0xEE7B0C")]
		[DebuggerHidden]
		public <Timer>d__10(int <>1__state)
		{
		}

		[Token(Token = "0x6000E62")]
		[Address(RVA = "0xEE7B44", Offset = "0xEE7B44", VA = "0xEE7B44", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000E63")]
		[Address(RVA = "0xEE7B48", Offset = "0xEE7B48", VA = "0xEE7B48", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E65")]
		[Address(RVA = "0xEE7C18", Offset = "0xEE7C18", VA = "0xEE7C18", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000EFC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Action OnButtonHit;

	[Token(Token = "0x4000EFD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool canBeHit;

	[Token(Token = "0x4000EFE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject particleEffect;

	[Token(Token = "0x4000EFF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool canBeHitMultipleTimes;

	[Token(Token = "0x4000F00")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Vector3 origScale;

	[Token(Token = "0x4000F01")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Collider thisCollider;

	[Token(Token = "0x4000F02")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private AudioSource audioSource;

	[Token(Token = "0x6000E5C")]
	[Address(RVA = "0xEE7468", Offset = "0xEE7468", VA = "0xEE7468")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000E5D")]
	[Address(RVA = "0xEE7514", Offset = "0xEE7514", VA = "0xEE7514")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000E5E")]
	[Address(RVA = "0xEE7540", Offset = "0xEE7540", VA = "0xEE7540")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000E5F")]
	[Address(RVA = "0xEE7A98", Offset = "0xEE7A98", VA = "0xEE7A98")]
	[IteratorStateMachine(typeof(<Timer>d__10))]
	private IEnumerator Timer()
	{
		return null;
	}

	[Token(Token = "0x6000E60")]
	[Address(RVA = "0xEE7B34", Offset = "0xEE7B34", VA = "0xEE7B34")]
	public UIManualButton()
	{
	}
}
[Token(Token = "0x20002D8")]
public class UpdateControlText : MonoBehaviour
{
	[Token(Token = "0x20002D9")]
	[CompilerGenerated]
	private sealed class <StartTextMeshFade>d__3 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000F07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000F08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000F09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TextMesh textMesh;

		[Token(Token = "0x4000F0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <duration>5__2;

		[Token(Token = "0x4000F0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <t>5__3;

		[Token(Token = "0x170001F2")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000E6F")]
			[Address(RVA = "0xEE80E0", Offset = "0xEE80E0", VA = "0xEE80E0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001F3")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000E71")]
			[Address(RVA = "0xEE8128", Offset = "0xEE8128", VA = "0xEE8128", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E6C")]
		[Address(RVA = "0xEE7E84", Offset = "0xEE7E84", VA = "0xEE7E84")]
		[DebuggerHidden]
		public <StartTextMeshFade>d__3(int <>1__state)
		{
		}

		[Token(Token = "0x6000E6D")]
		[Address(RVA = "0xEE7FA4", Offset = "0xEE7FA4", VA = "0xEE7FA4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000E6E")]
		[Address(RVA = "0xEE7FA8", Offset = "0xEE7FA8", VA = "0xEE7FA8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E70")]
		[Address(RVA = "0xEE80E8", Offset = "0xEE80E8", VA = "0xEE80E8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000F06")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private TextMesh m_TextMesh;

	[Token(Token = "0x6000E67")]
	[Address(RVA = "0xEE7C60", Offset = "0xEE7C60", VA = "0xEE7C60")]
	public void OnSliderEvent(float value)
	{
	}

	[Token(Token = "0x6000E68")]
	[Address(RVA = "0xEE7D38", Offset = "0xEE7D38", VA = "0xEE7D38")]
	public void OnKnobEvent(float value)
	{
	}

	[Token(Token = "0x6000E69")]
	[Address(RVA = "0xEE7E10", Offset = "0xEE7E10", VA = "0xEE7E10")]
	[IteratorStateMachine(typeof(<StartTextMeshFade>d__3))]
	private IEnumerator StartTextMeshFade(TextMesh textMesh)
	{
		return null;
	}

	[Token(Token = "0x6000E6A")]
	[Address(RVA = "0xEE7EAC", Offset = "0xEE7EAC", VA = "0xEE7EAC")]
	public void OnButtonEvent()
	{
	}

	[Token(Token = "0x6000E6B")]
	[Address(RVA = "0xEE7F30", Offset = "0xEE7F30", VA = "0xEE7F30")]
	public UpdateControlText()
	{
	}
}
[Token(Token = "0x20002DA")]
public class UserAttributeManager : Singleton<UserAttributeManager>
{
	[Token(Token = "0x4000F0C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool suppressAPISaving;

	[Token(Token = "0x4000F0E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Action OnUserAttributesInitialized;

	[Token(Token = "0x4000F0F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Dictionary<UserAttribute, float> attributeValues;

	[Token(Token = "0x170001F4")]
	public bool attributesReady
	{
		[Token(Token = "0x6000E72")]
		[Address(RVA = "0xEE8130", Offset = "0xEE8130", VA = "0xEE8130")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000E73")]
		[Address(RVA = "0xEE8138", Offset = "0xEE8138", VA = "0xEE8138")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x6000E74")]
	[Address(RVA = "0xEE8144", Offset = "0xEE8144", VA = "0xEE8144", Slot = "5")]
	protected override void DidAwake()
	{
	}

	[Token(Token = "0x6000E75")]
	[Address(RVA = "0xEE824C", Offset = "0xEE824C", VA = "0xEE824C")]
	private void InitializeUserAttributes(Dictionary<UserAttribute, float> attributeValues)
	{
	}

	[Token(Token = "0x6000E76")]
	[Address(RVA = "0xEE828C", Offset = "0xEE828C", VA = "0xEE828C")]
	public void UpdateAttribute(UserAttribute attribute, float value, [Optional] Guid processId, [Optional] Action<Guid, bool, string> callback)
	{
	}

	[Token(Token = "0x6000E77")]
	[Address(RVA = "0xEE8568", Offset = "0xEE8568", VA = "0xEE8568")]
	private bool TryUpdateLocalAttributeValue(UserAttribute attribute, float value)
	{
		return default(bool);
	}

	[Token(Token = "0x6000E78")]
	[Address(RVA = "0xEE8690", Offset = "0xEE8690", VA = "0xEE8690")]
	public float GetUserAttribute(UserAttribute attribute)
	{
		return default(float);
	}

	[Token(Token = "0x6000E79")]
	[Address(RVA = "0xEE8724", Offset = "0xEE8724", VA = "0xEE8724")]
	public UserAttributeManager()
	{
	}
}
[Token(Token = "0x20002DC")]
public enum UserAttribute
{
	[Token(Token = "0x4000F13")]
	Test,
	[Token(Token = "0x4000F14")]
	Gnosis,
	[Token(Token = "0x4000F15")]
	HighContrast,
	[Token(Token = "0x4000F16")]
	Subtitles,
	[Token(Token = "0x4000F17")]
	Tips,
	[Token(Token = "0x4000F18")]
	MusicVolume,
	[Token(Token = "0x4000F19")]
	SFXVolume,
	[Token(Token = "0x4000F1A")]
	MasterVolume,
	[Token(Token = "0x4000F1B")]
	MovementType,
	[Token(Token = "0x4000F1C")]
	Language,
	[Token(Token = "0x4000F1D")]
	DefaultSettingsWereSet
}
[Token(Token = "0x20002DD")]
public enum UserEvent
{
	[Token(Token = "0x4000F1F")]
	Unknown = 0,
	[Token(Token = "0x4000F20")]
	KeyTestFirst = 1,
	[Token(Token = "0x4000F21")]
	KeyTestSecond = 2,
	[Token(Token = "0x4000F22")]
	KeyTestThird = 3,
	[Token(Token = "0x4000F23")]
	InitialOnboarding = 10010,
	[Token(Token = "0x4000F24")]
	PalmMenuOnboarding = 10020,
	[Token(Token = "0x4000F25")]
	TraversePropOnboarding = 10030,
	[Token(Token = "0x4000F26")]
	BasicBooks = 20010,
	[Token(Token = "0x4000F27")]
	SongOfSunshine = 20020,
	[Token(Token = "0x4000F28")]
	SunRay = 20030,
	[Token(Token = "0x4000F29")]
	Revealer = 20040,
	[Token(Token = "0x4000F2A")]
	ShipsWheelSailingPillarPlacement = 20049,
	[Token(Token = "0x4000F2B")]
	SailingRoom = 20050,
	[Token(Token = "0x4000F2C")]
	KnightDragon = 20060,
	[Token(Token = "0x4000F2D")]
	DragonEyes = 20070,
	[Token(Token = "0x4000F2E")]
	FireOpening = 20080,
	[Token(Token = "0x4000F2F")]
	ShipsWheelCovePlacement = 20089,
	[Token(Token = "0x4000F30")]
	DiveHelmet = 20090,
	[Token(Token = "0x4000F31")]
	LeftStarFragPlaced = 20097,
	[Token(Token = "0x4000F32")]
	RightStarFragPlaced = 20098,
	[Token(Token = "0x4000F33")]
	TopStarFragPlaced = 20099,
	[Token(Token = "0x4000F34")]
	SongOfStarlightFind = 20100,
	[Token(Token = "0x4000F35")]
	SongOfStarlightPlay = 20110,
	[Token(Token = "0x4000F36")]
	ShootingStar = 20120,
	[Token(Token = "0x4000F37")]
	ElevatorPowerUp = 20130,
	[Token(Token = "0x4000F38")]
	FireCrystal = 20140,
	[Token(Token = "0x4000F39")]
	ShipsWheelObservatoryPlacement = 20145,
	[Token(Token = "0x4000F3A")]
	WaterCrystal = 20150,
	[Token(Token = "0x4000F3B")]
	PipeOfWinds = 20160,
	[Token(Token = "0x4000F3C")]
	AirCrystal = 20170,
	[Token(Token = "0x4000F3D")]
	NightLilySeed = 20180,
	[Token(Token = "0x4000F3E")]
	PlantNightLily = 20190,
	[Token(Token = "0x4000F3F")]
	TransplantNightLily = 20200,
	[Token(Token = "0x4000F40")]
	NightLilyFruit = 20210,
	[Token(Token = "0x4000F41")]
	EarthCrystal = 20220,
	[Token(Token = "0x4000F42")]
	FireRing = 20230,
	[Token(Token = "0x4000F43")]
	WaterRing = 20240,
	[Token(Token = "0x4000F44")]
	AirRing = 20250,
	[Token(Token = "0x4000F45")]
	EarthRing = 20260,
	[Token(Token = "0x4000F46")]
	PlanetBorn = 20270,
	[Token(Token = "0x4000F47")]
	WhereIsMyMind = 30010,
	[Token(Token = "0x4000F48")]
	PlightOfPeople = 30015,
	[Token(Token = "0x4000F49")]
	TravelerSeeker = 30020,
	[Token(Token = "0x4000F4A")]
	LostInDarkness = 30025,
	[Token(Token = "0x4000F4B")]
	GreatLibrary = 30030,
	[Token(Token = "0x4000F4C")]
	PlanetReborn = 30035,
	[Token(Token = "0x4000F4D")]
	WhereIsMyMindHint = 30040,
	[Token(Token = "0x4000F4E")]
	PlightOfPeopleHint = 30045,
	[Token(Token = "0x4000F4F")]
	TravelerSeekerHint = 30050,
	[Token(Token = "0x4000F50")]
	LostInDarknessHint = 30055,
	[Token(Token = "0x4000F51")]
	GreatLibraryHint = 30060,
	[Token(Token = "0x4000F52")]
	PlanetRebornHint = 30065,
	[Token(Token = "0x4000F53")]
	TestOnePreReq = 40009,
	[Token(Token = "0x4000F54")]
	TestOneHint = 40010,
	[Token(Token = "0x4000F55")]
	TestOneRepeatAvailable = 40014,
	[Token(Token = "0x4000F56")]
	TestOneRepeat = 40015,
	[Token(Token = "0x4000F57")]
	TestOneComplete = 40016,
	[Token(Token = "0x4000F58")]
	TestTwoPreReq = 40019,
	[Token(Token = "0x4000F59")]
	TestTwoHint = 40020,
	[Token(Token = "0x4000F5A")]
	TestTwoRepeatAvailable = 40024,
	[Token(Token = "0x4000F5B")]
	TestTwoRepeat = 40025,
	[Token(Token = "0x4000F5C")]
	TestTwoComplete = 40026,
	[Token(Token = "0x4000F5D")]
	TestThreePreReq = 40029,
	[Token(Token = "0x4000F5E")]
	TestThreeHint = 40030,
	[Token(Token = "0x4000F5F")]
	TestThreeRepeatAvailable = 40034,
	[Token(Token = "0x4000F60")]
	TestThreeRepeat = 40035,
	[Token(Token = "0x4000F61")]
	TestThreeComplete = 40036,
	[Token(Token = "0x4000F62")]
	BasicBooksHint = 40040,
	[Token(Token = "0x4000F63")]
	BasicBooksRepeatAvailable = 40044,
	[Token(Token = "0x4000F64")]
	BasicBooksRepeat = 40045,
	[Token(Token = "0x4000F65")]
	SongOfSunshineHint = 40050,
	[Token(Token = "0x4000F66")]
	SongOfSunshineRepeatAvailable = 40054,
	[Token(Token = "0x4000F67")]
	SongOfSunshineRepeat = 40055,
	[Token(Token = "0x4000F68")]
	SunBaubleHint = 40060,
	[Token(Token = "0x4000F69")]
	SunBaubleRepeatAvailable = 40064,
	[Token(Token = "0x4000F6A")]
	SunBaubleRepeat = 40065,
	[Token(Token = "0x4000F6B")]
	RevealerHint = 40070,
	[Token(Token = "0x4000F6C")]
	ShipsWheelHint = 40080,
	[Token(Token = "0x4000F6D")]
	ShipsWheelRepeatAvailable = 40084,
	[Token(Token = "0x4000F6E")]
	ShipsWheelRepeat = 40085,
	[Token(Token = "0x4000F6F")]
	KnightAndDragonHint = 40090,
	[Token(Token = "0x4000F70")]
	KnightAndDragonRepeatAvailable = 40094,
	[Token(Token = "0x4000F71")]
	KnightAndDragonRepeat = 40095,
	[Token(Token = "0x4000F72")]
	DragonEyesHint = 40100,
	[Token(Token = "0x4000F73")]
	DragonEyesRepeatAvailable = 40104,
	[Token(Token = "0x4000F74")]
	DragonEyesRepeat = 40105,
	[Token(Token = "0x4000F75")]
	FireOfOpeningHint = 40110,
	[Token(Token = "0x4000F76")]
	FireOfOpeningRepeatAvailable = 40114,
	[Token(Token = "0x4000F77")]
	FireOfOpeningRepeat = 40115,
	[Token(Token = "0x4000F78")]
	DiveHelmetHint = 40120,
	[Token(Token = "0x4000F79")]
	DiveHelmetRepeatAvailable = 40124,
	[Token(Token = "0x4000F7A")]
	DiveHelmetRepeat = 40125,
	[Token(Token = "0x4000F7B")]
	StarFragmentHint = 40140,
	[Token(Token = "0x4000F7C")]
	StarFragmentRepeatAvailable = 40144,
	[Token(Token = "0x4000F7D")]
	StarFragmentRepeat = 40145,
	[Token(Token = "0x4000F7E")]
	SongOfStarlightHint = 40150,
	[Token(Token = "0x4000F7F")]
	SongOfStarlightRepeatAvailable = 40154,
	[Token(Token = "0x4000F80")]
	SongOfStarlightRepeat = 40155,
	[Token(Token = "0x4000F81")]
	MeteorHint = 40160,
	[Token(Token = "0x4000F82")]
	MeteorRepeatAvailable = 40164,
	[Token(Token = "0x4000F83")]
	MeteorRepeat = 40165,
	[Token(Token = "0x4000F84")]
	ElevatorPowerUpHint = 40170,
	[Token(Token = "0x4000F85")]
	ElevatorPowerUpRepeatAvailable = 40174,
	[Token(Token = "0x4000F86")]
	ElevatorPowerUpRepeat = 40175,
	[Token(Token = "0x4000F87")]
	CrystalKilnHint = 40180,
	[Token(Token = "0x4000F88")]
	CrystalKilnRepeatAvailable = 40184,
	[Token(Token = "0x4000F89")]
	CrystalKilnRepeat = 40185,
	[Token(Token = "0x4000F8A")]
	NightLilyPlantHint = 40190,
	[Token(Token = "0x4000F8B")]
	NightLilyPlantRepeatAvailable = 40194,
	[Token(Token = "0x4000F8C")]
	NightLilyPlantRepeat = 40195,
	[Token(Token = "0x4000F8D")]
	NightLilyFruitHint = 40200,
	[Token(Token = "0x4000F8E")]
	NightLilyFruitRepeatAvailable = 40204,
	[Token(Token = "0x4000F8F")]
	NightLilyFruitSeedRepeat = 40205,
	[Token(Token = "0x4000F90")]
	PlanetForgeHint = 40210,
	[Token(Token = "0x4000F91")]
	PlanetForgeRepeatAvailable = 40214,
	[Token(Token = "0x4000F92")]
	PlanetForgeHintRepeat = 40215
}
[Token(Token = "0x20002DE")]
public class MathUtility
{
	[Token(Token = "0x6000E7D")]
	[Address(RVA = "0xEE87E0", Offset = "0xEE87E0", VA = "0xEE87E0")]
	public static Vector3 PointOnCurve(Vector3 p1, Vector3 p2, Vector3 p3, Vector3 p4, float t)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000E7E")]
	[Address(RVA = "0xEE887C", Offset = "0xEE887C", VA = "0xEE887C")]
	public static float EaseInSine(float value, float start = 0f, float end = 1f)
	{
		return default(float);
	}

	[Token(Token = "0x6000E7F")]
	[Address(RVA = "0xEE88B4", Offset = "0xEE88B4", VA = "0xEE88B4")]
	public static float EaseOutSine(float value, float start = 0f, float end = 1f)
	{
		return default(float);
	}

	[Token(Token = "0x6000E80")]
	[Address(RVA = "0xEE88E8", Offset = "0xEE88E8", VA = "0xEE88E8")]
	public static float EaseInOutSine(float value, float start = 0f, float end = 1f)
	{
		return default(float);
	}

	[Token(Token = "0x6000E81")]
	[Address(RVA = "0xEE892C", Offset = "0xEE892C", VA = "0xEE892C")]
	public MathUtility()
	{
	}
}
[Token(Token = "0x20002DF")]
public class ParticleSystemsUtility
{
	[Token(Token = "0x6000E82")]
	[Address(RVA = "0xEE8934", Offset = "0xEE8934", VA = "0xEE8934")]
	public static void SetLoop(ParticleSystem particleSystem, bool toLoop)
	{
	}

	[Token(Token = "0x6000E83")]
	[Address(RVA = "0xEE8974", Offset = "0xEE8974", VA = "0xEE8974")]
	public static void SetTintColor(ParticleSystem particleSystem, Color c)
	{
	}

	[Token(Token = "0x6000E84")]
	[Address(RVA = "0xEE8A38", Offset = "0xEE8A38", VA = "0xEE8A38")]
	public static void SetTintColor(Material material, Color c)
	{
	}

	[Token(Token = "0x6000E85")]
	[Address(RVA = "0xEE8ACC", Offset = "0xEE8ACC", VA = "0xEE8ACC")]
	public static Color GetTintColor(Material material)
	{
		return default(Color);
	}

	[Token(Token = "0x6000E86")]
	[Address(RVA = "0xEE8B20", Offset = "0xEE8B20", VA = "0xEE8B20")]
	public static void SetMaterialRenderQueue(ParticleSystem particleSystem, int renderQueue)
	{
	}

	[Token(Token = "0x6000E87")]
	[Address(RVA = "0xEE8C18", Offset = "0xEE8C18", VA = "0xEE8C18")]
	public ParticleSystemsUtility()
	{
	}
}
[Token(Token = "0x20002E0")]
[RequireComponent(typeof(ParticleSystem))]
public class VacuumParticles : MonoBehaviour
{
	[Token(Token = "0x4000F93")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float suctionVel;

	[Token(Token = "0x4000F94")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float shapeZ;

	[Token(Token = "0x4000F95")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float shapeRad;

	[Token(Token = "0x4000F96")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Tooltip("The power to which uD is raised, causing the Sin variances to have less effect in the middle of the cone the higher it is.")]
	public float uDEccentricity;

	[Token(Token = "0x4000F97")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Vector2 sinFrequency;

	[Token(Token = "0x4000F98")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector2 sinMultiplier;

	[Token(Token = "0x4000F99")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private ParticleSystem partSys;

	[Token(Token = "0x4000F9A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private ParticleSystem.MainModule partSysMain;

	[Token(Token = "0x4000F9B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private ParticleSystem.Particle[] particles;

	[Token(Token = "0x4000F9C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private ParticleSystem.ShapeModule shape;

	[Token(Token = "0x6000E88")]
	[Address(RVA = "0xEE8C20", Offset = "0xEE8C20", VA = "0xEE8C20")]
	private void Start()
	{
	}

	[Token(Token = "0x6000E89")]
	[Address(RVA = "0xEE8D18", Offset = "0xEE8D18", VA = "0xEE8D18")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000E8A")]
	[Address(RVA = "0xEE9074", Offset = "0xEE9074", VA = "0xEE9074")]
	public VacuumParticles()
	{
	}
}
[Token(Token = "0x20002E1")]
public class GhostbustersWave : MonoBehaviour
{
	[Token(Token = "0x4000F9D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LineWave[] lineWaves;

	[Token(Token = "0x4000F9E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public LineRenderer[] lineRenderers;

	[Token(Token = "0x6000E8B")]
	[Address(RVA = "0xEE90E0", Offset = "0xEE90E0", VA = "0xEE90E0")]
	public void ToggleAndSetTarget(bool enable, GameObject target)
	{
	}

	[Token(Token = "0x6000E8C")]
	[Address(RVA = "0xEE91B4", Offset = "0xEE91B4", VA = "0xEE91B4")]
	public GhostbustersWave()
	{
	}
}
[Token(Token = "0x20002E2")]
public class SpinAppear : MonoBehaviour
{
	[Token(Token = "0x20002E3")]
	[CompilerGenerated]
	private sealed class <Start>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000FA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000FA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000FA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SpinAppear <>4__this;

		[Token(Token = "0x4000FA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <currentTime>5__2;

		[Token(Token = "0x4000FAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private ParticleSystem.EmissionModule <emitter>5__3;

		[Token(Token = "0x170001F5")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000E92")]
			[Address(RVA = "0xEE9B5C", Offset = "0xEE9B5C", VA = "0xEE9B5C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001F6")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000E94")]
			[Address(RVA = "0xEE9BA4", Offset = "0xEE9BA4", VA = "0xEE9BA4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E8F")]
		[Address(RVA = "0xEE9230", Offset = "0xEE9230", VA = "0xEE9230")]
		[DebuggerHidden]
		public <Start>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x6000E90")]
		[Address(RVA = "0xEE9268", Offset = "0xEE9268", VA = "0xEE9268", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000E91")]
		[Address(RVA = "0xEE926C", Offset = "0xEE926C", VA = "0xEE926C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E93")]
		[Address(RVA = "0xEE9B64", Offset = "0xEE9B64", VA = "0xEE9B64", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000F9F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Renderer renderer;

	[Token(Token = "0x4000FA0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject initialEffect;

	[Token(Token = "0x4000FA1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ParticleSystem finalEffect;

	[Token(Token = "0x4000FA2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float delayAfterInitialEffect;

	[Token(Token = "0x4000FA3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float delayBeforeFinalEffect;

	[Token(Token = "0x4000FA4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float delayTillQuit;

	[Token(Token = "0x4000FA5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float dissolveTime;

	[Token(Token = "0x6000E8D")]
	[Address(RVA = "0xEE91BC", Offset = "0xEE91BC", VA = "0xEE91BC")]
	[IteratorStateMachine(typeof(<Start>d__7))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x6000E8E")]
	[Address(RVA = "0xEE9258", Offset = "0xEE9258", VA = "0xEE9258")]
	public SpinAppear()
	{
	}
}
[Token(Token = "0x20002E4")]
public class TutorialKeyAppear : MonoBehaviour
{
	[Token(Token = "0x4000FAB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Grabbable grabbable;

	[Token(Token = "0x4000FAC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject particleEffect;

	[Token(Token = "0x6000E95")]
	[Address(RVA = "0xEE9BAC", Offset = "0xEE9BAC", VA = "0xEE9BAC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000E96")]
	[Address(RVA = "0xEEA1AC", Offset = "0xEEA1AC", VA = "0xEEA1AC")]
	public TutorialKeyAppear()
	{
	}
}
[Token(Token = "0x20002E5")]
public class VolumeSetter : MonoBehaviour
{
	[Token(Token = "0x20002E6")]
	[CompilerGenerated]
	private sealed class <Start>d__2 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000FAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000FB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000FB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public VolumeSetter <>4__this;

		[Token(Token = "0x170001F7")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000E9D")]
			[Address(RVA = "0xEEA538", Offset = "0xEEA538", VA = "0xEEA538", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001F8")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000E9F")]
			[Address(RVA = "0xEEA580", Offset = "0xEEA580", VA = "0xEEA580", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E9A")]
		[Address(RVA = "0xEEA248", Offset = "0xEEA248", VA = "0xEEA248")]
		[DebuggerHidden]
		public <Start>d__2(int <>1__state)
		{
		}

		[Token(Token = "0x6000E9B")]
		[Address(RVA = "0xEEA278", Offset = "0xEEA278", VA = "0xEEA278", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000E9C")]
		[Address(RVA = "0xEEA27C", Offset = "0xEEA27C", VA = "0xEEA27C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E9E")]
		[Address(RVA = "0xEEA540", Offset = "0xEEA540", VA = "0xEEA540", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000FAD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioSource audioSource;

	[Token(Token = "0x4000FAE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private AudioMixer audioMixer;

	[Token(Token = "0x6000E98")]
	[Address(RVA = "0xEEA1D4", Offset = "0xEEA1D4", VA = "0xEEA1D4")]
	[IteratorStateMachine(typeof(<Start>d__2))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x6000E99")]
	[Address(RVA = "0xEEA270", Offset = "0xEEA270", VA = "0xEEA270")]
	public VolumeSetter()
	{
	}
}
[Token(Token = "0x20002E7")]
public class VolumeSettingPuzzleTrigger : MonoBehaviour
{
	[Token(Token = "0x4000FB2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject targetBar;

	[Token(Token = "0x4000FB3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject barOne;

	[Token(Token = "0x4000FB4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject barTwo;

	[Token(Token = "0x4000FB5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject barThree;

	[Token(Token = "0x4000FB6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject barFour;

	[Token(Token = "0x4000FB7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject negativeBarOne;

	[Token(Token = "0x4000FB8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject negativeBarTwo;

	[Token(Token = "0x4000FB9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject negativeBarThree;

	[Token(Token = "0x4000FBA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject negativeBarFour;

	[Token(Token = "0x4000FBB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool setAsPositiveCharge;

	[Token(Token = "0x4000FBC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private float maxHeight;

	[Token(Token = "0x4000FBD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float currentHeight;

	[Token(Token = "0x4000FBE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private float targetHeight;

	[Token(Token = "0x6000EA0")]
	[Address(RVA = "0xEEA588", Offset = "0xEEA588", VA = "0xEEA588")]
	private void Start()
	{
	}

	[Token(Token = "0x6000EA1")]
	[Address(RVA = "0xEEA6B0", Offset = "0xEEA6B0", VA = "0xEEA6B0")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000EA2")]
	[Address(RVA = "0xEEA5A0", Offset = "0xEEA5A0", VA = "0xEEA5A0")]
	public void SetPositiveEnergizers()
	{
	}

	[Token(Token = "0x6000EA3")]
	[Address(RVA = "0xEEA9D8", Offset = "0xEEA9D8", VA = "0xEEA9D8")]
	public void SetNegativeEnergizers()
	{
	}

	[Token(Token = "0x6000EA4")]
	[Address(RVA = "0xEEA970", Offset = "0xEEA970", VA = "0xEEA970")]
	private void CalculateEnergyBar()
	{
	}

	[Token(Token = "0x6000EA5")]
	[Address(RVA = "0xEEAAE8", Offset = "0xEEAAE8", VA = "0xEEAAE8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000EA6")]
	[Address(RVA = "0xEEAAEC", Offset = "0xEEAAEC", VA = "0xEEAAEC")]
	public VolumeSettingPuzzleTrigger()
	{
	}
}
[Token(Token = "0x20002E8")]
public class VRCameraSmoother : MonoBehaviour
{
	[Token(Token = "0x4000FBF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform vrCamera;

	[Token(Token = "0x4000FC0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float positionMultiplier;

	[Token(Token = "0x4000FC1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float rotationMultiplier;

	[Token(Token = "0x4000FC2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Transform thisTransform;

	[Token(Token = "0x6000EA7")]
	[Address(RVA = "0xEEAB08", Offset = "0xEEAB08", VA = "0xEEAB08")]
	private void Start()
	{
	}

	[Token(Token = "0x6000EA8")]
	[Address(RVA = "0xEEAB2C", Offset = "0xEEAB2C", VA = "0xEEAB2C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000EA9")]
	[Address(RVA = "0xEEAC70", Offset = "0xEEAC70", VA = "0xEEAC70")]
	public VRCameraSmoother()
	{
	}
}
[Token(Token = "0x20002E9")]
public class WeatherController : MonoBehaviour
{
	[Token(Token = "0x20002EA")]
	[CompilerGenerated]
	private sealed class <co_SubToSunbaubleHint>d__22 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000FD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000FD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000FD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public WeatherController <>4__this;

		[Token(Token = "0x170001F9")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000EBD")]
			[Address(RVA = "0xEEC1BC", Offset = "0xEEC1BC", VA = "0xEEC1BC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001FA")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000EBF")]
			[Address(RVA = "0xEEC204", Offset = "0xEEC204", VA = "0xEEC204", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000EBA")]
		[Address(RVA = "0xEEAF38", Offset = "0xEEAF38", VA = "0xEEAF38")]
		[DebuggerHidden]
		public <co_SubToSunbaubleHint>d__22(int <>1__state)
		{
		}

		[Token(Token = "0x6000EBB")]
		[Address(RVA = "0xEEBF18", Offset = "0xEEBF18", VA = "0xEEBF18", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000EBC")]
		[Address(RVA = "0xEEBF1C", Offset = "0xEEBF1C", VA = "0xEEBF1C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000EBE")]
		[Address(RVA = "0xEEC1C4", Offset = "0xEEC1C4", VA = "0xEEC1C4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000FC3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SkyboxBlender skyboxBlender;

	[Token(Token = "0x4000FC4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Material rainyToSunny;

	[Token(Token = "0x4000FC5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Material sunnyToStarry;

	[Token(Token = "0x4000FC6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Material starryToRainy;

	[Token(Token = "0x4000FC7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject[] rainyParticles;

	[Token(Token = "0x4000FC8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject[] starryParticles;

	[Token(Token = "0x4000FC9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Color rainyFog;

	[Token(Token = "0x4000FCA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Color sunnyFog;

	[Token(Token = "0x4000FCB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Color starryFog;

	[Token(Token = "0x4000FCC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public float rainyFogIntensity;

	[Token(Token = "0x4000FCD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public float sunnyFogIntensity;

	[Token(Token = "0x4000FCE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public float starryFogIntensity;

	[Token(Token = "0x4000FCF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public float blendDuration;

	[Token(Token = "0x4000FD0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public AudioSource audioSource;

	[Token(Token = "0x4000FD1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public AudioSource jingleAudioSource;

	[Token(Token = "0x4000FD2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public AudioClip sunnyAudioClip;

	[Token(Token = "0x4000FD3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public AudioClip starryAudioClip;

	[Token(Token = "0x4000FD4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public AudioClip rainyAudioClip;

	[Token(Token = "0x4000FD5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Weather currentWeather;

	[Token(Token = "0x4000FD6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private UserEventTrigger sunBaubleHintTrigger;

	[Token(Token = "0x6000EAA")]
	[Address(RVA = "0xEEAC78", Offset = "0xEEAC78", VA = "0xEEAC78")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000EAB")]
	[Address(RVA = "0xEEAD40", Offset = "0xEEAD40", VA = "0xEEAD40")]
	private void Start()
	{
	}

	[Token(Token = "0x6000EAC")]
	[Address(RVA = "0xEEAEC4", Offset = "0xEEAEC4", VA = "0xEEAEC4")]
	[IteratorStateMachine(typeof(<co_SubToSunbaubleHint>d__22))]
	private IEnumerator co_SubToSunbaubleHint()
	{
		return null;
	}

	[Token(Token = "0x6000EAD")]
	[Address(RVA = "0xEEAF60", Offset = "0xEEAF60", VA = "0xEEAF60")]
	private void ProcessPlayedSong(string song)
	{
	}

	[Token(Token = "0x6000EAE")]
	[Address(RVA = "0xEEB03C", Offset = "0xEEB03C", VA = "0xEEB03C")]
	private void SetWeatherWithJingle(Weather weather)
	{
	}

	[Token(Token = "0x6000EAF")]
	[Address(RVA = "0xEEB044", Offset = "0xEEB044", VA = "0xEEB044")]
	private void SetWeather(Weather weather, bool playJingle)
	{
	}

	[Token(Token = "0x6000EB0")]
	[Address(RVA = "0xEEBDDC", Offset = "0xEEBDDC", VA = "0xEEBDDC")]
	private void BroadcastWeatherChange()
	{
	}

	[Token(Token = "0x6000EB1")]
	[Address(RVA = "0xEEBE4C", Offset = "0xEEBE4C", VA = "0xEEBE4C")]
	public WeatherController()
	{
	}
}
[Token(Token = "0x20002EC")]
public enum Weather
{
	[Token(Token = "0x4000FE8")]
	Rainy,
	[Token(Token = "0x4000FE9")]
	Sunny,
	[Token(Token = "0x4000FEA")]
	Starry
}
[Token(Token = "0x20002ED")]
public class XRActionBasedControllerWithButtons : ActionBasedController
{
	[Token(Token = "0x4000FEB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
	[SerializeField]
	private InputActionProperty m_ActivateAction;

	[Token(Token = "0x170001FB")]
	public InputActionProperty secondaryButtonAction
	{
		[Token(Token = "0x6000ECE")]
		[Address(RVA = "0xEEC2E4", Offset = "0xEEC2E4", VA = "0xEEC2E4")]
		get
		{
			return default(InputActionProperty);
		}
		[Token(Token = "0x6000ECF")]
		[Address(RVA = "0xEEC2FC", Offset = "0xEEC2FC", VA = "0xEEC2FC")]
		set
		{
		}
	}

	[Token(Token = "0x6000ED0")]
	[Address(RVA = "0xEEC32C", Offset = "0xEEC32C", VA = "0xEEC32C")]
	private void SetInputActionProperty(ref InputActionProperty property, InputActionProperty value)
	{
	}

	[Token(Token = "0x6000ED1")]
	[Address(RVA = "0xEEC3D0", Offset = "0xEEC3D0", VA = "0xEEC3D0")]
	public XRActionBasedControllerWithButtons()
	{
	}
}
[Token(Token = "0x20002EE")]
public class XRDroppableGrabInteractable : XRGrabInteractable
{
	[Token(Token = "0x6000ED2")]
	[Address(RVA = "0xEEC3D8", Offset = "0xEEC3D8", VA = "0xEEC3D8")]
	public void CustomForceDrop(XRBaseInteractor interactor)
	{
	}

	[Token(Token = "0x6000ED3")]
	[Address(RVA = "0xEEC46C", Offset = "0xEEC46C", VA = "0xEEC46C")]
	public XRDroppableGrabInteractable()
	{
	}
}
[Token(Token = "0x20002EF")]
public class XylophoneController : MonoBehaviour
{
	[Token(Token = "0x20002F0")]
	[CompilerGenerated]
	private sealed class <WaitAndPruneTune>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000FEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000FF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000FF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public XylophoneController <>4__this;

		[Token(Token = "0x170001FC")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000EDD")]
			[Address(RVA = "0xEECC9C", Offset = "0xEECC9C", VA = "0xEECC9C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001FD")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000EDF")]
			[Address(RVA = "0xEECCE4", Offset = "0xEECCE4", VA = "0xEECCE4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000EDA")]
		[Address(RVA = "0xEEC7E0", Offset = "0xEEC7E0", VA = "0xEEC7E0")]
		[DebuggerHidden]
		public <WaitAndPruneTune>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x6000EDB")]
		[Address(RVA = "0xEECBEC", Offset = "0xEECBEC", VA = "0xEECBEC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000EDC")]
		[Address(RVA = "0xEECBF0", Offset = "0xEECBF0", VA = "0xEECBF0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000EDE")]
		[Address(RVA = "0xEECCA4", Offset = "0xEECCA4", VA = "0xEECCA4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000FEC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Action OnTuneCleared;

	[Token(Token = "0x4000FED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<Song> songs;

	[Token(Token = "0x4000FEE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private List<MusicNote> currentTune;

	[Token(Token = "0x6000ED4")]
	[Address(RVA = "0xEEC4C4", Offset = "0xEEC4C4", VA = "0xEEC4C4")]
	public void RecordNote(MusicNote note)
	{
	}

	[Token(Token = "0x6000ED5")]
	[Address(RVA = "0xEEC76C", Offset = "0xEEC76C", VA = "0xEEC76C")]
	[IteratorStateMachine(typeof(<WaitAndPruneTune>d__4))]
	private IEnumerator WaitAndPruneTune()
	{
		return null;
	}

	[Token(Token = "0x6000ED6")]
	[Address(RVA = "0xEEC808", Offset = "0xEEC808", VA = "0xEEC808")]
	private void ClearTune()
	{
	}

	[Token(Token = "0x6000ED7")]
	[Address(RVA = "0xEEC5A8", Offset = "0xEEC5A8", VA = "0xEEC5A8")]
	private void ValidateSongPlayed()
	{
	}

	[Token(Token = "0x6000ED8")]
	[Address(RVA = "0xEEC94C", Offset = "0xEEC94C", VA = "0xEEC94C")]
	private string GetTuneString()
	{
		return null;
	}

	[Token(Token = "0x6000ED9")]
	[Address(RVA = "0xEECB14", Offset = "0xEECB14", VA = "0xEECB14")]
	public XylophoneController()
	{
	}
}
[Token(Token = "0x20002F1")]
public enum MusicNote
{
	[Token(Token = "0x4000FF3")]
	C,
	[Token(Token = "0x4000FF4")]
	C_sharp,
	[Token(Token = "0x4000FF5")]
	D,
	[Token(Token = "0x4000FF6")]
	D_sharp,
	[Token(Token = "0x4000FF7")]
	E,
	[Token(Token = "0x4000FF8")]
	F,
	[Token(Token = "0x4000FF9")]
	F_sharp,
	[Token(Token = "0x4000FFA")]
	G,
	[Token(Token = "0x4000FFB")]
	G_sharp,
	[Token(Token = "0x4000FFC")]
	A,
	[Token(Token = "0x4000FFD")]
	A_sharp,
	[Token(Token = "0x4000FFE")]
	B,
	[Token(Token = "0x4000FFF")]
	C_upper
}
[Token(Token = "0x20002F2")]
public class XylophoneTone : MonoBehaviour
{
	[Token(Token = "0x20002F3")]
	[CompilerGenerated]
	private sealed class <NoteTimer>d__10 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001007")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001008")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001009")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public XylophoneTone <>4__this;

		[Token(Token = "0x170001FE")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000EE8")]
			[Address(RVA = "0xEED008", Offset = "0xEED008", VA = "0xEED008", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001FF")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000EEA")]
			[Address(RVA = "0xEED050", Offset = "0xEED050", VA = "0xEED050", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000EE5")]
		[Address(RVA = "0xEECF14", Offset = "0xEECF14", VA = "0xEECF14")]
		[DebuggerHidden]
		public <NoteTimer>d__10(int <>1__state)
		{
		}

		[Token(Token = "0x6000EE6")]
		[Address(RVA = "0xEECF4C", Offset = "0xEECF4C", VA = "0xEECF4C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000EE7")]
		[Address(RVA = "0xEECF50", Offset = "0xEECF50", VA = "0xEECF50", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000EE9")]
		[Address(RVA = "0xEED010", Offset = "0xEED010", VA = "0xEED010", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001000")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public XylophoneController controller;

	[Token(Token = "0x4001001")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MusicNote note;

	[Token(Token = "0x4001002")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioSource audioSource;

	[Token(Token = "0x4001003")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Renderer thisRenderer;

	[Token(Token = "0x4001004")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Material baseMaterial;

	[Token(Token = "0x4001005")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Material hitMaterial;

	[Token(Token = "0x4001006")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool canPlayNote;

	[Token(Token = "0x6000EE0")]
	[Address(RVA = "0xEECCEC", Offset = "0xEECCEC", VA = "0xEECCEC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000EE1")]
	[Address(RVA = "0xEECE0C", Offset = "0xEECE0C", VA = "0xEECE0C")]
	private void ResetKeyColor()
	{
	}

	[Token(Token = "0x6000EE2")]
	[Address(RVA = "0xEECE30", Offset = "0xEECE30", VA = "0xEECE30")]
	private void OnCollisionEnter(Collision other)
	{
	}

	[Token(Token = "0x6000EE3")]
	[Address(RVA = "0xEECEA0", Offset = "0xEECEA0", VA = "0xEECEA0")]
	[IteratorStateMachine(typeof(<NoteTimer>d__10))]
	private IEnumerator NoteTimer()
	{
		return null;
	}

	[Token(Token = "0x6000EE4")]
	[Address(RVA = "0xEECF3C", Offset = "0xEECF3C", VA = "0xEECF3C")]
	public XylophoneTone()
	{
	}
}
[Token(Token = "0x20002F4")]
public class MakeScriptableObject
{
	[Token(Token = "0x6000EEB")]
	[Address(RVA = "0xEED058", Offset = "0xEED058", VA = "0xEED058")]
	public MakeScriptableObject()
	{
	}
}
[Token(Token = "0x20002F5")]
public class Song : ScriptableObject
{
	[Token(Token = "0x400100A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string songTitle;

	[Token(Token = "0x400100B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<MusicNote> notes;

	[Token(Token = "0x6000EEC")]
	[Address(RVA = "0xEEC878", Offset = "0xEEC878", VA = "0xEEC878")]
	public bool SongWasCompleted(List<MusicNote> notesPlayed)
	{
		return default(bool);
	}

	[Token(Token = "0x6000EED")]
	[Address(RVA = "0xEED060", Offset = "0xEED060", VA = "0xEED060")]
	public Song()
	{
	}
}
[Token(Token = "0x20002F6")]
public class ExampleCardItemAction : MonoBehaviour
{
	[Token(Token = "0x400100C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform title;

	[Token(Token = "0x400100D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform description;

	[Token(Token = "0x400100E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Text titleText;

	[Token(Token = "0x400100F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Text descriptionText;

	[Token(Token = "0x6000EEE")]
	[Address(RVA = "0xEED068", Offset = "0xEED068", VA = "0xEED068")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000EEF")]
	[Address(RVA = "0xEED164", Offset = "0xEED164", VA = "0xEED164")]
	private void Start()
	{
	}

	[Token(Token = "0x6000EF0")]
	[Address(RVA = "0xEED3EC", Offset = "0xEED3EC", VA = "0xEED3EC")]
	private void ShowDescription(Card card)
	{
	}

	[Token(Token = "0x6000EF1")]
	[Address(RVA = "0xEED4D8", Offset = "0xEED4D8", VA = "0xEED4D8")]
	public ExampleCardItemAction()
	{
	}
}
[Token(Token = "0x20002F7")]
public class ExampleDynamicCardList : MonoBehaviour
{
	[Token(Token = "0x4001010")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public CardListManager clm;

	[Token(Token = "0x6000EF2")]
	[Address(RVA = "0xEED4E0", Offset = "0xEED4E0", VA = "0xEED4E0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000EF3")]
	[Address(RVA = "0xEED4E4", Offset = "0xEED4E4", VA = "0xEED4E4")]
	public void UpdateList()
	{
	}

	[Token(Token = "0x6000EF4")]
	[Address(RVA = "0xEED850", Offset = "0xEED850", VA = "0xEED850")]
	public ExampleDynamicCardList()
	{
	}
}
[Token(Token = "0x20002F8")]
public class ExampleOptionControl : MonoBehaviour
{
	[Token(Token = "0x4001011")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private OptionsManager optionsManager;

	[Token(Token = "0x6000EF5")]
	[Address(RVA = "0xEED858", Offset = "0xEED858", VA = "0xEED858")]
	private void Start()
	{
	}

	[Token(Token = "0x6000EF6")]
	[Address(RVA = "0xEEDA88", Offset = "0xEEDA88", VA = "0xEEDA88")]
	private void SwitchInteractionMode(int i)
	{
	}

	[Token(Token = "0x6000EF7")]
	[Address(RVA = "0xEEDC10", Offset = "0xEEDC10", VA = "0xEEDC10")]
	public ExampleOptionControl()
	{
	}
}
[Token(Token = "0x20002F9")]
public class InvokeKeyboard : MonoBehaviour, ISelectHandler, IEventSystemHandler, IDeselectHandler
{
	[Token(Token = "0x4001012")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject keyboard;

	[Token(Token = "0x4001013")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool hideKeyboardOnDeslect;

	[Token(Token = "0x6000EF8")]
	[Address(RVA = "0xEEDC18", Offset = "0xEEDC18", VA = "0xEEDC18", Slot = "4")]
	public void OnSelect(BaseEventData eventData)
	{
	}

	[Token(Token = "0x6000EF9")]
	[Address(RVA = "0xEEDC58", Offset = "0xEEDC58", VA = "0xEEDC58", Slot = "5")]
	public void OnDeselect(BaseEventData eventData)
	{
	}

	[Token(Token = "0x6000EFA")]
	[Address(RVA = "0xEEDCA0", Offset = "0xEEDCA0", VA = "0xEEDCA0")]
	public InvokeKeyboard()
	{
	}
}
[Token(Token = "0x20002FA")]
public class SwitchUI : MonoBehaviour
{
	[Token(Token = "0x4001014")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<GameObject> canvas;

	[Token(Token = "0x4001015")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int currentIndex;

	[Token(Token = "0x6000EFB")]
	[Address(RVA = "0xEEDCA8", Offset = "0xEEDCA8", VA = "0xEEDCA8")]
	public void NextUI()
	{
	}

	[Token(Token = "0x6000EFC")]
	[Address(RVA = "0xEEDD6C", Offset = "0xEEDD6C", VA = "0xEEDD6C")]
	public SwitchUI()
	{
	}
}
[Token(Token = "0x20002FB")]
public class IMEInitializer : MonoBehaviour
{
	[Token(Token = "0x4001016")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public IMEManager imeManager;

	[Token(Token = "0x6000EFD")]
	[Address(RVA = "0xEEDD74", Offset = "0xEEDD74", VA = "0xEEDD74")]
	private void Start()
	{
	}

	[Token(Token = "0x6000EFE")]
	[Address(RVA = "0xEEDE0C", Offset = "0xEEDE0C", VA = "0xEEDE0C")]
	public IMEInitializer()
	{
	}
}
[Token(Token = "0x20002FC")]
public class IMETestDemo : MonoBehaviour
{
	[Token(Token = "0x4001017")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TMP_InputField targetText;

	[Token(Token = "0x4001018")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private IMEManager imeManager;

	[Token(Token = "0x6000EFF")]
	[Address(RVA = "0xEEDE14", Offset = "0xEEDE14", VA = "0xEEDE14")]
	private void Start()
	{
	}

	[Token(Token = "0x6000F00")]
	[Address(RVA = "0xEEDFAC", Offset = "0xEEDFAC", VA = "0xEEDFAC")]
	public void ShowIME()
	{
	}

	[Token(Token = "0x6000F01")]
	[Address(RVA = "0xEEDFD0", Offset = "0xEEDFD0", VA = "0xEEDFD0")]
	public void OnIMETextInput(string text)
	{
	}

	[Token(Token = "0x6000F02")]
	[Address(RVA = "0xEEE000", Offset = "0xEEE000", VA = "0xEEE000")]
	public void OnIMECommitCodeInput(IMECommitCode commitCode)
	{
	}

	[Token(Token = "0x6000F03")]
	[Address(RVA = "0xEEE0A4", Offset = "0xEEE0A4", VA = "0xEEE0A4")]
	public IMETestDemo()
	{
	}
}
[Token(Token = "0x20002FD")]
public class YVRTextFieldSelector : MonoBehaviour
{
	[Token(Token = "0x4001019")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private TMP_InputField targetText;

	[Token(Token = "0x400101A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private IMEManager imeManager;

	[Token(Token = "0x400101B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private IMEEntity keyboard;

	[Token(Token = "0x400101C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static TMP_InputField currentText;

	[Token(Token = "0x6000F04")]
	[Address(RVA = "0xEEE0AC", Offset = "0xEEE0AC", VA = "0xEEE0AC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000F05")]
	[Address(RVA = "0xEEE278", Offset = "0xEEE278", VA = "0xEEE278")]
	public void OnSelect(string arg)
	{
	}

	[Token(Token = "0x6000F06")]
	[Address(RVA = "0xEEE2EC", Offset = "0xEEE2EC", VA = "0xEEE2EC")]
	private void OnIMETextInput(string text)
	{
	}

	[Token(Token = "0x6000F07")]
	[Address(RVA = "0xEEE42C", Offset = "0xEEE42C", VA = "0xEEE42C")]
	private void OnIMECommitCodeInput(IMECommitCode commitCode)
	{
	}

	[Token(Token = "0x6000F08")]
	[Address(RVA = "0xEEE538", Offset = "0xEEE538", VA = "0xEEE538")]
	public YVRTextFieldSelector()
	{
	}
}
namespace VRUiKits.Utils
{
	[Token(Token = "0x20002FE")]
	public class ImageHoverOutline : MonoBehaviour, IPointerEnterHandler, IEventSystemHandler, IPointerExitHandler
	{
		[Token(Token = "0x400101D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Image targetImage;

		[Token(Token = "0x400101E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color outlineColor;

		[Token(Token = "0x400101F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float outlineWidth;

		[Token(Token = "0x4001020")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Outline outline;

		[Token(Token = "0x17000200")]
		private Outline _Outline
		{
			[Token(Token = "0x6000F09")]
			[Address(RVA = "0xEEE540", Offset = "0xEEE540", VA = "0xEEE540")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F0A")]
		[Address(RVA = "0xEEE6AC", Offset = "0xEEE6AC", VA = "0xEEE6AC", Slot = "4")]
		public void OnPointerEnter(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000F0B")]
		[Address(RVA = "0xEEE744", Offset = "0xEEE744", VA = "0xEEE744", Slot = "5")]
		public void OnPointerExit(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000F0C")]
		[Address(RVA = "0xEEE7DC", Offset = "0xEEE7DC", VA = "0xEEE7DC")]
		public ImageHoverOutline()
		{
		}
	}
	[Token(Token = "0x20002FF")]
	public class TextHoverScale : MonoBehaviour, IPointerEnterHandler, IEventSystemHandler, IPointerExitHandler
	{
		[Token(Token = "0x4001021")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Text targetText;

		[Token(Token = "0x4001022")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float scale;

		[Token(Token = "0x4001023")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int originSize;

		[Token(Token = "0x17000201")]
		private Text TargetText
		{
			[Token(Token = "0x6000F0D")]
			[Address(RVA = "0xEEE7F8", Offset = "0xEEE7F8", VA = "0xEEE7F8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F0E")]
		[Address(RVA = "0xEEE8D8", Offset = "0xEEE8D8", VA = "0xEEE8D8", Slot = "4")]
		public void OnPointerEnter(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000F0F")]
		[Address(RVA = "0xEEEA48", Offset = "0xEEEA48", VA = "0xEEEA48", Slot = "5")]
		public void OnPointerExit(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000F10")]
		[Address(RVA = "0xEEEAE0", Offset = "0xEEEAE0", VA = "0xEEEAE0")]
		public TextHoverScale()
		{
		}
	}
	[Token(Token = "0x2000300")]
	public class GazeInputModule : UIKitInputModule
	{
		[Token(Token = "0x4001024")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool previewWithoutHeadset;

		[Token(Token = "0x4001025")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		public bool preventRepeatClick;

		[Token(Token = "0x4001026")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public RaycastResult currentRaycast;

		[Token(Token = "0x4001027")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static GazeInputModule Instance;

		[Token(Token = "0x4001028")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private PointerEventData pointerEventData;

		[Token(Token = "0x4001029")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private PointerEventData lastPressedEventData;

		[Token(Token = "0x400102A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private GameObject currentTarget;

		[Token(Token = "0x400102B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private float currentClickTime;

		[Token(Token = "0x6000F11")]
		[Address(RVA = "0xEEEAF4", Offset = "0xEEEAF4", VA = "0xEEEAF4")]
		protected GazeInputModule()
		{
		}

		[Token(Token = "0x6000F12")]
		[Address(RVA = "0xEEEB78", Offset = "0xEEEB78", VA = "0xEEEB78", Slot = "17")]
		public override void Process()
		{
		}

		[Token(Token = "0x6000F13")]
		[Address(RVA = "0xEEEB90", Offset = "0xEEEB90", VA = "0xEEEB90")]
		private void GazeControl()
		{
		}

		[Token(Token = "0x6000F14")]
		[Address(RVA = "0xEEEDA8", Offset = "0xEEEDA8", VA = "0xEEEDA8")]
		private void HandleSelection()
		{
		}

		[Token(Token = "0x6000F15")]
		[Address(RVA = "0xEEF0D8", Offset = "0xEEF0D8", VA = "0xEEF0D8")]
		private void ReleaseLastPress()
		{
		}

		[Token(Token = "0x6000F16")]
		[Address(RVA = "0xEEF1B8", Offset = "0xEEF1B8", VA = "0xEEF1B8", Slot = "23")]
		public override void ActivateModule()
		{
		}

		[Token(Token = "0x6000F17")]
		[Address(RVA = "0xEEF26C", Offset = "0xEEF26C", VA = "0xEEF26C", Slot = "22")]
		public override void DeactivateModule()
		{
		}

		[Token(Token = "0x6000F18")]
		[Address(RVA = "0xEEF288", Offset = "0xEEF288", VA = "0xEEF288")]
		protected void ClearSelection()
		{
		}

		[Token(Token = "0x6000F19")]
		[Address(RVA = "0xEEF2C4", Offset = "0xEEF2C4", VA = "0xEEF2C4", Slot = "27")]
		protected virtual void ProcessMove(PointerEventData pointerEvent)
		{
		}
	}
	[Token(Token = "0x2000301")]
	[RequireComponent(typeof(VREventSystemHelper))]
	public class LaserInputModule : UIKitInputModule
	{
		[Token(Token = "0x400102C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public VRPlatform platform;

		[Token(Token = "0x400102D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public Pointer pointer;

		[Token(Token = "0x400102E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public OVRInput.Button trigger;

		[Token(Token = "0x400102F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private OVRInput.Controller activeController;

		[Token(Token = "0x4001030")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private OVRCameraRig oculusRig;

		[Token(Token = "0x4001031")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GameObject currentTarget;

		[Token(Token = "0x4001032")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float currentClickTime;

		[Token(Token = "0x4001033")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static LaserInputModule _instance;

		[Token(Token = "0x4001034")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Camera helperCamera;

		[Token(Token = "0x4001035")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private UIKitPointer controller;

		[Token(Token = "0x4001036")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool triggerPressed;

		[Token(Token = "0x4001037")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
		private bool triggerPressedLastFrame;

		[Token(Token = "0x4001038")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private PointerEventData pointerEventData;

		[Token(Token = "0x4001039")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Vector3 lastRaycastHitPoint;

		[Token(Token = "0x400103A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private float pressedDistance;

		[Token(Token = "0x17000202")]
		public Transform TargetControllerTransform
		{
			[Token(Token = "0x6000F1A")]
			[Address(RVA = "0xEEF30C", Offset = "0xEEF30C", VA = "0xEEF30C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000203")]
		public static LaserInputModule instance
		{
			[Token(Token = "0x6000F1B")]
			[Address(RVA = "0xEEF350", Offset = "0xEEF350", VA = "0xEEF350")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F1C")]
		[Address(RVA = "0xEEF398", Offset = "0xEEF398", VA = "0xEEF398", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000F1D")]
		[Address(RVA = "0xEEF500", Offset = "0xEEF500", VA = "0xEEF500", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000F1E")]
		[Address(RVA = "0xEEF7FC", Offset = "0xEEF7FC", VA = "0xEEF7FC")]
		private void OnSceneLoaded(Scene scene, LoadSceneMode mode)
		{
		}

		[Token(Token = "0x6000F1F")]
		[Address(RVA = "0xEEF724", Offset = "0xEEF724", VA = "0xEEF724")]
		private void SetCanvasCamera()
		{
		}

		[Token(Token = "0x6000F20")]
		[Address(RVA = "0xEEF7F8", Offset = "0xEEF7F8", VA = "0xEEF7F8")]
		private void SetupHmd()
		{
		}

		[Token(Token = "0x6000F21")]
		[Address(RVA = "0xEEFA3C", Offset = "0xEEFA3C", VA = "0xEEFA3C")]
		public void SetController(UIKitPointer _controller)
		{
		}

		[Token(Token = "0x6000F22")]
		[Address(RVA = "0xEEFA44", Offset = "0xEEFA44", VA = "0xEEFA44")]
		public void RemoveController(UIKitPointer _controller)
		{
		}

		[Token(Token = "0x6000F23")]
		[Address(RVA = "0xEEFAFC", Offset = "0xEEFAFC", VA = "0xEEFAFC", Slot = "17")]
		public override void Process()
		{
		}

		[Token(Token = "0x6000F24")]
		[Address(RVA = "0xEEFBA0", Offset = "0xEEFBA0", VA = "0xEEFBA0")]
		private void UpdateHelperCamera()
		{
		}

		[Token(Token = "0x6000F25")]
		[Address(RVA = "0xEEFEB8", Offset = "0xEEFEB8", VA = "0xEEFEB8")]
		private void CheckTriggerStatus()
		{
		}

		[Token(Token = "0x6000F26")]
		[Address(RVA = "0xEEFC40", Offset = "0xEEFC40", VA = "0xEEFC40")]
		private void ProcessGazePointer()
		{
		}

		[Token(Token = "0x6000F27")]
		[Address(RVA = "0xEEFFBC", Offset = "0xEEFFBC", VA = "0xEEFFBC")]
		private void ProcessLaserPointer()
		{
		}

		[Token(Token = "0x6000F28")]
		[Address(RVA = "0xEF0848", Offset = "0xEF0848", VA = "0xEF0848")]
		private void ProcessPress(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000F29")]
		[Address(RVA = "0xEF02C4", Offset = "0xEF02C4", VA = "0xEF02C4")]
		private PointerEventData GetPointerEventData()
		{
			return null;
		}

		[Token(Token = "0x6000F2A")]
		[Address(RVA = "0xEF11F8", Offset = "0xEF11F8", VA = "0xEF11F8")]
		private bool TriggerReleasedThisFrame()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F2B")]
		[Address(RVA = "0xEF11D8", Offset = "0xEF11D8", VA = "0xEF11D8")]
		private bool TriggerPressedThisFrame()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F2C")]
		[Address(RVA = "0xEF017C", Offset = "0xEF017C", VA = "0xEF017C")]
		private bool SendUpdateEventToSelectedObject()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F2D")]
		[Address(RVA = "0xEF1218", Offset = "0xEF1218", VA = "0xEF1218", Slot = "23")]
		public override void ActivateModule()
		{
		}

		[Token(Token = "0x6000F2E")]
		[Address(RVA = "0xEF12CC", Offset = "0xEF12CC", VA = "0xEF12CC", Slot = "22")]
		public override void DeactivateModule()
		{
		}

		[Token(Token = "0x6000F2F")]
		[Address(RVA = "0xEF12E8", Offset = "0xEF12E8", VA = "0xEF12E8")]
		protected void ClearSelection()
		{
		}

		[Token(Token = "0x6000F30")]
		[Address(RVA = "0xEF1324", Offset = "0xEF1324", VA = "0xEF1324")]
		private bool ShouldStartDrag(float threshold, bool useDragThreshold)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F31")]
		[Address(RVA = "0xEF1340", Offset = "0xEF1340", VA = "0xEF1340", Slot = "27")]
		protected virtual void ProcessMove(PointerEventData pointerEvent)
		{
		}

		[Token(Token = "0x6000F32")]
		[Address(RVA = "0xEF0F40", Offset = "0xEF0F40", VA = "0xEF0F40")]
		private void ProcessDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000F33")]
		[Address(RVA = "0xEEF814", Offset = "0xEEF814", VA = "0xEEF814")]
		private void SetupOculus()
		{
		}

		[Token(Token = "0x6000F34")]
		[Address(RVA = "0xEF1388", Offset = "0xEF1388", VA = "0xEF1388")]
		public LaserInputModule()
		{
		}
	}
	[Token(Token = "0x2000302")]
	public enum VRPlatform
	{
		[Token(Token = "0x400103C")]
		NONE,
		[Token(Token = "0x400103D")]
		OCULUS,
		[Token(Token = "0x400103E")]
		VIVE,
		[Token(Token = "0x400103F")]
		VIVE_STEAM2
	}
	[Token(Token = "0x2000303")]
	public enum Pointer
	{
		[Token(Token = "0x4001041")]
		RightHand,
		[Token(Token = "0x4001042")]
		LeftHand,
		[Token(Token = "0x4001043")]
		Eye
	}
	[Token(Token = "0x2000304")]
	public class MouseInputModule : StandaloneInputModule
	{
		[Token(Token = "0x6000F35")]
		[Address(RVA = "0xEF13A8", Offset = "0xEF13A8", VA = "0xEF13A8", Slot = "17")]
		public override void Process()
		{
		}

		[Token(Token = "0x6000F36")]
		[Address(RVA = "0xEF1400", Offset = "0xEF1400", VA = "0xEF1400")]
		protected new void ProcessMouseEvent()
		{
		}

		[Token(Token = "0x6000F37")]
		[Address(RVA = "0xEF16D8", Offset = "0xEF16D8", VA = "0xEF16D8")]
		private static bool UseMouse(bool pressed, bool released, PointerEventData pointerData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F38")]
		[Address(RVA = "0xEF171C", Offset = "0xEF171C", VA = "0xEF171C")]
		protected new void ProcessMousePress(MouseButtonEventData data)
		{
		}

		[Token(Token = "0x6000F39")]
		[Address(RVA = "0xEF1D84", Offset = "0xEF1D84", VA = "0xEF1D84")]
		public MouseInputModule()
		{
		}
	}
	[Token(Token = "0x2000305")]
	public class GazeProgressCircle : MonoBehaviour
	{
		[Token(Token = "0x2000306")]
		[CompilerGenerated]
		private sealed class <FillCircle>d__5 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001047")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001048")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001049")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GazeProgressCircle <>4__this;

			[Token(Token = "0x400104A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <timer>5__2;

			[Token(Token = "0x17000204")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000F42")]
				[Address(RVA = "0xEF237C", Offset = "0xEF237C", VA = "0xEF237C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000205")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000F44")]
				[Address(RVA = "0xEF23C4", Offset = "0xEF23C4", VA = "0xEF23C4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000F3F")]
			[Address(RVA = "0xEF21E4", Offset = "0xEF21E4", VA = "0xEF21E4")]
			[DebuggerHidden]
			public <FillCircle>d__5(int <>1__state)
			{
			}

			[Token(Token = "0x6000F40")]
			[Address(RVA = "0xEF2214", Offset = "0xEF2214", VA = "0xEF2214", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000F41")]
			[Address(RVA = "0xEF2218", Offset = "0xEF2218", VA = "0xEF2218", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000F43")]
			[Address(RVA = "0xEF2384", Offset = "0xEF2384", VA = "0xEF2384", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001044")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Image circle;

		[Token(Token = "0x4001045")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Coroutine fillCircle;

		[Token(Token = "0x4001046")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private UIKitInputModule m_inputModule;

		[Token(Token = "0x6000F3A")]
		[Address(RVA = "0xEF1D8C", Offset = "0xEF1D8C", VA = "0xEF1D8C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F3B")]
		[Address(RVA = "0xEF1FE4", Offset = "0xEF1FE4", VA = "0xEF1FE4")]
		private void HandleProgressCircle(GameObject target)
		{
		}

		[Token(Token = "0x6000F3C")]
		[Address(RVA = "0xEF2170", Offset = "0xEF2170", VA = "0xEF2170")]
		[IteratorStateMachine(typeof(<FillCircle>d__5))]
		private IEnumerator FillCircle()
		{
			return null;
		}

		[Token(Token = "0x6000F3D")]
		[Address(RVA = "0xEF20A8", Offset = "0xEF20A8", VA = "0xEF20A8")]
		private void ResetGazer()
		{
		}

		[Token(Token = "0x6000F3E")]
		[Address(RVA = "0xEF220C", Offset = "0xEF220C", VA = "0xEF220C")]
		public GazeProgressCircle()
		{
		}
	}
	[Token(Token = "0x2000307")]
	public class LaserPointer : MonoBehaviour
	{
		[Token(Token = "0x400104B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private LineRenderer lr;

		[Token(Token = "0x6000F45")]
		[Address(RVA = "0xEF23CC", Offset = "0xEF23CC", VA = "0xEF23CC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000F46")]
		[Address(RVA = "0xEF2424", Offset = "0xEF2424", VA = "0xEF2424")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000F47")]
		[Address(RVA = "0xEF2614", Offset = "0xEF2614", VA = "0xEF2614")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000F48")]
		[Address(RVA = "0xEF2728", Offset = "0xEF2728", VA = "0xEF2728")]
		public LaserPointer()
		{
		}
	}
	[Token(Token = "0x2000308")]
	public class UIKitPointer : MonoBehaviour
	{
		[Token(Token = "0x400104C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject gazePointer;

		[Token(Token = "0x400104D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject laser;

		[Token(Token = "0x400104E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Pointer? temp;

		[Token(Token = "0x400104F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private bool allowAutoSwitchHand;

		[Token(Token = "0x6000F49")]
		[Address(RVA = "0xEF2730", Offset = "0xEF2730", VA = "0xEF2730")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F4A")]
		[Address(RVA = "0xEF2818", Offset = "0xEF2818", VA = "0xEF2818")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F4B")]
		[Address(RVA = "0xEF2AC8", Offset = "0xEF2AC8", VA = "0xEF2AC8")]
		private void SetPointer(Pointer targetPointer)
		{
		}

		[Token(Token = "0x6000F4C")]
		[Address(RVA = "0xEF2C14", Offset = "0xEF2C14", VA = "0xEF2C14")]
		private void ResetTransform(Transform trans)
		{
		}

		[Token(Token = "0x6000F4D")]
		[Address(RVA = "0xEF2CF4", Offset = "0xEF2CF4", VA = "0xEF2CF4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000F4E")]
		[Address(RVA = "0xEF2DD8", Offset = "0xEF2DD8", VA = "0xEF2DD8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000F4F")]
		[Address(RVA = "0xEF2EC0", Offset = "0xEF2EC0", VA = "0xEF2EC0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000F50")]
		[Address(RVA = "0xEF2FA4", Offset = "0xEF2FA4", VA = "0xEF2FA4")]
		public UIKitPointer()
		{
		}
	}
	[Token(Token = "0x2000309")]
	public class UIKitInputModule : BaseInputModule
	{
		[Token(Token = "0x200030A")]
		public delegate void OnGazeChangedHandler(GameObject target);

		[Token(Token = "0x4001050")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[HideInInspector]
		public float gazeTimeInSeconds;

		[Token(Token = "0x4001051")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[HideInInspector]
		public float delayTimeInSeconds;

		[Token(Token = "0x14000010")]
		public event OnGazeChangedHandler OnGazeChanged
		{
			[Token(Token = "0x6000F51")]
			[Address(RVA = "0xEF1F48", Offset = "0xEF1F48", VA = "0xEF1F48")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000F52")]
			[Address(RVA = "0xEF2FAC", Offset = "0xEF2FAC", VA = "0xEF2FAC")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000F53")]
		[Address(RVA = "0xEEF0BC", Offset = "0xEEF0BC", VA = "0xEEF0BC")]
		protected void RaiseGazeChangeEvent(GameObject target)
		{
		}

		[Token(Token = "0x6000F54")]
		[Address(RVA = "0xEF3048", Offset = "0xEF3048", VA = "0xEF3048", Slot = "17")]
		public override void Process()
		{
		}

		[Token(Token = "0x6000F55")]
		[Address(RVA = "0xEEEB64", Offset = "0xEEEB64", VA = "0xEEEB64")]
		public UIKitInputModule()
		{
		}
	}
	[Token(Token = "0x200030B")]
	public class TextMeshProConverter : MonoBehaviour
	{
		[Token(Token = "0x6000F5A")]
		[Address(RVA = "0xEF308C", Offset = "0xEF308C", VA = "0xEF308C")]
		public static int CheckTextsTotalNumber()
		{
			return default(int);
		}

		[Token(Token = "0x6000F5B")]
		private static List<T> GetAllObjectsInScene<T>() where T : Component
		{
			return null;
		}

		[Token(Token = "0x6000F5C")]
		[Address(RVA = "0xEF30E8", Offset = "0xEF30E8", VA = "0xEF30E8")]
		public TextMeshProConverter()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200030C")]
	public class Card
	{
		[Token(Token = "0x4001053")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string title;

		[Token(Token = "0x4001054")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string subtitle;

		[Token(Token = "0x4001055")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string description;

		[Token(Token = "0x4001056")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Sprite image;

		[Token(Token = "0x6000F5D")]
		[Address(RVA = "0xEED790", Offset = "0xEED790", VA = "0xEED790")]
		public Card()
		{
		}
	}
	[Token(Token = "0x200030D")]
	public class CardItem : MonoBehaviour
	{
		[Token(Token = "0x200030E")]
		public delegate void OnCardClickedHandler(Card card);

		[Token(Token = "0x4001057")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform title;

		[Token(Token = "0x4001058")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform subtitle;

		[Token(Token = "0x4001059")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform description;

		[Token(Token = "0x400105B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Image image;

		[Token(Token = "0x400105C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Card card;

		[Token(Token = "0x17000206")]
		public Text Title
		{
			[Token(Token = "0x6000F60")]
			[Address(RVA = "0xEF318C", Offset = "0xEF318C", VA = "0xEF318C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000207")]
		public Text Subtitle
		{
			[Token(Token = "0x6000F61")]
			[Address(RVA = "0xEF3228", Offset = "0xEF3228", VA = "0xEF3228")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000208")]
		public Text Description
		{
			[Token(Token = "0x6000F62")]
			[Address(RVA = "0xEF32C4", Offset = "0xEF32C4", VA = "0xEF32C4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000209")]
		public Card Card
		{
			[Token(Token = "0x6000F63")]
			[Address(RVA = "0xEF3360", Offset = "0xEF3360", VA = "0xEF3360")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F64")]
			[Address(RVA = "0xEF3368", Offset = "0xEF3368", VA = "0xEF3368")]
			set
			{
			}
		}

		[Token(Token = "0x14000011")]
		public event OnCardClickedHandler OnCardClicked
		{
			[Token(Token = "0x6000F5E")]
			[Address(RVA = "0xEED350", Offset = "0xEED350", VA = "0xEED350")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000F5F")]
			[Address(RVA = "0xEF30F0", Offset = "0xEF30F0", VA = "0xEF30F0")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000F65")]
		[Address(RVA = "0xEF352C", Offset = "0xEF352C", VA = "0xEF352C")]
		public void Awake()
		{
		}

		[Token(Token = "0x6000F66")]
		[Address(RVA = "0xEF3640", Offset = "0xEF3640", VA = "0xEF3640")]
		public CardItem()
		{
		}
	}
	[Token(Token = "0x200030F")]
	public class CardListManager : MonoBehaviour
	{
		[Token(Token = "0x400105D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform listContent;

		[Token(Token = "0x400105E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject itemTemplate;

		[Token(Token = "0x400105F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public List<Card> cardList;

		[Token(Token = "0x4001060")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[HideInInspector]
		public Card selectedCard;

		[Token(Token = "0x4001061")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<CardItem> cardItems;

		[Token(Token = "0x6000F6C")]
		[Address(RVA = "0xEF36B0", Offset = "0xEF36B0", VA = "0xEF36B0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000F6D")]
		[Address(RVA = "0xEED5C4", Offset = "0xEED5C4", VA = "0xEED5C4")]
		public void Reset()
		{
		}

		[Token(Token = "0x6000F6E")]
		[Address(RVA = "0xEF36DC", Offset = "0xEF36DC", VA = "0xEF36DC")]
		public void PopulateList()
		{
		}

		[Token(Token = "0x6000F6F")]
		[Address(RVA = "0xEED798", Offset = "0xEED798", VA = "0xEED798")]
		public void AddCardItem(Card card)
		{
		}

		[Token(Token = "0x6000F70")]
		[Address(RVA = "0xEF3768", Offset = "0xEF3768", VA = "0xEF3768")]
		private void DrawCardItem(Card card)
		{
		}

		[Token(Token = "0x6000F71")]
		[Address(RVA = "0xEF3904", Offset = "0xEF3904", VA = "0xEF3904")]
		private void SetSelectedCard(Card card)
		{
		}

		[Token(Token = "0x6000F72")]
		[Address(RVA = "0xEF390C", Offset = "0xEF390C", VA = "0xEF390C")]
		public CardListManager()
		{
		}
	}
	[Token(Token = "0x2000310")]
	public class InputFocusHelper : MonoBehaviour, ISelectHandler, IEventSystemHandler, IPointerClickHandler, IEndDragHandler
	{
		[Token(Token = "0x2000311")]
		[CompilerGenerated]
		private sealed class <ActivateInputFieldWithCaret>d__9 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001067")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001068")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001069")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public InputFocusHelper <>4__this;

			[Token(Token = "0x400106A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public bool isMoveCaretToEnd;

			[Token(Token = "0x1700020A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000F80")]
				[Address(RVA = "0xEF3E04", Offset = "0xEF3E04", VA = "0xEF3E04", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700020B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000F82")]
				[Address(RVA = "0xEF3E4C", Offset = "0xEF3E4C", VA = "0xEF3E4C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000F7D")]
			[Address(RVA = "0xEF3C58", Offset = "0xEF3C58", VA = "0xEF3C58")]
			[DebuggerHidden]
			public <ActivateInputFieldWithCaret>d__9(int <>1__state)
			{
			}

			[Token(Token = "0x6000F7E")]
			[Address(RVA = "0xEF3D1C", Offset = "0xEF3D1C", VA = "0xEF3D1C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000F7F")]
			[Address(RVA = "0xEF3D20", Offset = "0xEF3D20", VA = "0xEF3D20", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000F81")]
			[Address(RVA = "0xEF3E0C", Offset = "0xEF3E0C", VA = "0xEF3E0C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001062")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private InputField input;

		[Token(Token = "0x4001063")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int caretPosition;

		[Token(Token = "0x4001064")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int selectionAnchorPosition;

		[Token(Token = "0x4001065")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int selectionFocusPosition;

		[Token(Token = "0x4001066")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float originColorAlpha;

		[Token(Token = "0x6000F73")]
		[Address(RVA = "0xEF39E4", Offset = "0xEF39E4", VA = "0xEF39E4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000F74")]
		[Address(RVA = "0xEF3A58", Offset = "0xEF3A58", VA = "0xEF3A58", Slot = "4")]
		public void OnSelect(BaseEventData eventData)
		{
		}

		[Token(Token = "0x6000F75")]
		[Address(RVA = "0xEF3BF8", Offset = "0xEF3BF8", VA = "0xEF3BF8", Slot = "5")]
		public void OnPointerClick(PointerEventData pointerEventData)
		{
		}

		[Token(Token = "0x6000F76")]
		[Address(RVA = "0xEF3C54", Offset = "0xEF3C54", VA = "0xEF3C54", Slot = "7")]
		public virtual void OnEndDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000F77")]
		[Address(RVA = "0xEF3B70", Offset = "0xEF3B70", VA = "0xEF3B70")]
		[IteratorStateMachine(typeof(<ActivateInputFieldWithCaret>d__9))]
		private IEnumerator ActivateInputFieldWithCaret(bool isMoveCaretToEnd)
		{
			return null;
		}

		[Token(Token = "0x6000F78")]
		[Address(RVA = "0xEF3C80", Offset = "0xEF3C80", VA = "0xEF3C80")]
		public void ForceActivate()
		{
		}

		[Token(Token = "0x6000F79")]
		[Address(RVA = "0xEF3BFC", Offset = "0xEF3BFC", VA = "0xEF3BFC")]
		public void StorePositionInfo()
		{
		}

		[Token(Token = "0x6000F7A")]
		[Address(RVA = "0xEF3C9C", Offset = "0xEF3C9C", VA = "0xEF3C9C")]
		private void SetPosition()
		{
		}

		[Token(Token = "0x6000F7B")]
		[Address(RVA = "0xEF3CE8", Offset = "0xEF3CE8", VA = "0xEF3CE8")]
		private void SetSelectionAlpha(float alpha)
		{
		}

		[Token(Token = "0x6000F7C")]
		[Address(RVA = "0xEF3D14", Offset = "0xEF3D14", VA = "0xEF3D14")]
		public InputFocusHelper()
		{
		}
	}
	[Token(Token = "0x2000312")]
	public class UIKitInputField : MonoBehaviour, ISelectHandler, IEventSystemHandler, IPointerClickHandler, IDeselectHandler
	{
		[Token(Token = "0x2000313")]
		public enum ContentType
		{
			[Token(Token = "0x400107A")]
			Standard,
			[Token(Token = "0x400107B")]
			Password
		}

		[Token(Token = "0x2000314")]
		[CompilerGenerated]
		private sealed class <BlinkCaret>d__22 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400107C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400107D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400107E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public UIKitInputField <>4__this;

			[Token(Token = "0x1700020C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000F8F")]
				[Address(RVA = "0xEF46B8", Offset = "0xEF46B8", VA = "0xEF46B8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700020D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000F91")]
				[Address(RVA = "0xEF4700", Offset = "0xEF4700", VA = "0xEF4700", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000F8C")]
			[Address(RVA = "0xEF44FC", Offset = "0xEF44FC", VA = "0xEF44FC")]
			[DebuggerHidden]
			public <BlinkCaret>d__22(int <>1__state)
			{
			}

			[Token(Token = "0x6000F8D")]
			[Address(RVA = "0xEF4588", Offset = "0xEF4588", VA = "0xEF4588", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000F8E")]
			[Address(RVA = "0xEF458C", Offset = "0xEF458C", VA = "0xEF458C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000F90")]
			[Address(RVA = "0xEF46C0", Offset = "0xEF46C0", VA = "0xEF46C0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400106B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RectTransform wrapper;

		[Token(Token = "0x400106C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RectTransform m_textTransform;

		[Token(Token = "0x400106D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public RectTransform m_placeholderTransform;

		[Token(Token = "0x400106E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public RectTransform m_caretTransform;

		[Token(Token = "0x400106F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string text;

		[Token(Token = "0x4001070")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int characterLimit;

		[Token(Token = "0x4001071")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public ContentType contentType;

		[Token(Token = "0x4001072")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Range(0f, 4f)]
		public float caretBlinkRate;

		[Token(Token = "0x4001073")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float maxW_textComponent;

		[Token(Token = "0x4001074")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private string displayedText;

		[Token(Token = "0x4001075")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private string prevText;

		[Token(Token = "0x4001076")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Text textComponent;

		[Token(Token = "0x4001077")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Text caretText;

		[Token(Token = "0x4001078")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Text placeholder;

		[Token(Token = "0x6000F83")]
		[Address(RVA = "0xEF3E54", Offset = "0xEF3E54", VA = "0xEF3E54")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000F84")]
		[Address(RVA = "0xEF3F3C", Offset = "0xEF3F3C", VA = "0xEF3F3C", Slot = "4")]
		public void OnSelect(BaseEventData eventData)
		{
		}

		[Token(Token = "0x6000F85")]
		[Address(RVA = "0xEF4054", Offset = "0xEF4054", VA = "0xEF4054", Slot = "5")]
		public void OnPointerClick(PointerEventData pointerEventData)
		{
		}

		[Token(Token = "0x6000F86")]
		[Address(RVA = "0xEF40D0", Offset = "0xEF40D0", VA = "0xEF40D0", Slot = "6")]
		public void OnDeselect(BaseEventData eventData)
		{
		}

		[Token(Token = "0x6000F87")]
		[Address(RVA = "0xEF3FF8", Offset = "0xEF3FF8", VA = "0xEF3FF8")]
		public void ForceCaretUpdate()
		{
		}

		[Token(Token = "0x6000F88")]
		[Address(RVA = "0xEF4140", Offset = "0xEF4140", VA = "0xEF4140")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000F89")]
		[Address(RVA = "0xEF4290", Offset = "0xEF4290", VA = "0xEF4290")]
		private void CalculateLengthOfText(string text)
		{
		}

		[Token(Token = "0x6000F8A")]
		[Address(RVA = "0xEF4488", Offset = "0xEF4488", VA = "0xEF4488")]
		[IteratorStateMachine(typeof(<BlinkCaret>d__22))]
		private IEnumerator BlinkCaret()
		{
			return null;
		}

		[Token(Token = "0x6000F8B")]
		[Address(RVA = "0xEF4524", Offset = "0xEF4524", VA = "0xEF4524")]
		public UIKitInputField()
		{
		}
	}
	[Token(Token = "0x2000315")]
	public class KeyboardExtentionMethods : MonoBehaviour
	{
		[Token(Token = "0x400107F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject symbols;

		[Token(Token = "0x4001080")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject alphabets;

		[Token(Token = "0x6000F92")]
		[Address(RVA = "0xEF4708", Offset = "0xEF4708", VA = "0xEF4708")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000F93")]
		[Address(RVA = "0xEF480C", Offset = "0xEF480C", VA = "0xEF480C")]
		public void SwitchSymbols()
		{
		}

		[Token(Token = "0x6000F94")]
		[Address(RVA = "0xEF4828", Offset = "0xEF4828", VA = "0xEF4828")]
		public void ToggleObject(GameObject go)
		{
		}

		[Token(Token = "0x6000F95")]
		[Address(RVA = "0xEF485C", Offset = "0xEF485C", VA = "0xEF485C")]
		public KeyboardExtentionMethods()
		{
		}
	}
	[Token(Token = "0x2000316")]
	public class KeyboardManager : MonoBehaviour
	{
		[Token(Token = "0x2000317")]
		public delegate void OnInputValueUpdatedHandler(string value);

		[Token(Token = "0x200031A")]
		[CompilerGenerated]
		private sealed class <WaitTargetProcessEvent>d__25 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400108D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400108E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400108F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Action callback;

			[Token(Token = "0x4001090")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public KeyboardManager <>4__this;

			[Token(Token = "0x17000210")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000FB5")]
				[Address(RVA = "0xEF5AF0", Offset = "0xEF5AF0", VA = "0xEF5AF0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000211")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000FB7")]
				[Address(RVA = "0xEF5B38", Offset = "0xEF5B38", VA = "0xEF5B38", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000FB2")]
			[Address(RVA = "0xEF55AC", Offset = "0xEF55AC", VA = "0xEF55AC")]
			[DebuggerHidden]
			public <WaitTargetProcessEvent>d__25(int <>1__state)
			{
			}

			[Token(Token = "0x6000FB3")]
			[Address(RVA = "0xEF58E0", Offset = "0xEF58E0", VA = "0xEF58E0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000FB4")]
			[Address(RVA = "0xEF58E4", Offset = "0xEF58E4", VA = "0xEF58E4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000FB6")]
			[Address(RVA = "0xEF5AF8", Offset = "0xEF5AF8", VA = "0xEF5AF8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001081")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("User defined")]
		[Tooltip("If the character is uppercase at the initialization")]
		public bool isUppercase;

		[Token(Token = "0x4001082")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Essentials")]
		public Transform keys;

		[Token(Token = "0x4001083")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static InputField lastTarget;

		[Token(Token = "0x4001084")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static InputField target;

		[Token(Token = "0x4001086")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Key[] keyList;

		[Token(Token = "0x4001087")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool capslockFlag;

		[Token(Token = "0x1700020E")]
		public static InputField Target
		{
			[Token(Token = "0x6000F96")]
			[Address(RVA = "0xEF4864", Offset = "0xEF4864", VA = "0xEF4864")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F97")]
			[Address(RVA = "0xEF3B04", Offset = "0xEF3B04", VA = "0xEF3B04")]
			set
			{
			}
		}

		[Token(Token = "0x1700020F")]
		private string Input
		{
			[Token(Token = "0x6000F9A")]
			[Address(RVA = "0xEF4B00", Offset = "0xEF4B00", VA = "0xEF4B00")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F9B")]
			[Address(RVA = "0xEF4B98", Offset = "0xEF4B98", VA = "0xEF4B98")]
			set
			{
			}
		}

		[Token(Token = "0x14000012")]
		public event OnInputValueUpdatedHandler OnInputValueUpdated
		{
			[Token(Token = "0x6000F98")]
			[Address(RVA = "0xEF49C8", Offset = "0xEF49C8", VA = "0xEF49C8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000F99")]
			[Address(RVA = "0xEF4A64", Offset = "0xEF4A64", VA = "0xEF4A64")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000F9C")]
		[Address(RVA = "0xEF4C28", Offset = "0xEF4C28", VA = "0xEF4C28")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000F9D")]
		[Address(RVA = "0xEF4C8C", Offset = "0xEF4C8C", VA = "0xEF4C8C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F9E")]
		[Address(RVA = "0xEF4FBC", Offset = "0xEF4FBC", VA = "0xEF4FBC")]
		public void Backspace()
		{
		}

		[Token(Token = "0x6000F9F")]
		[Address(RVA = "0xEF525C", Offset = "0xEF525C", VA = "0xEF525C")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000FA0")]
		[Address(RVA = "0xEF4EE8", Offset = "0xEF4EE8", VA = "0xEF4EE8")]
		public void CapsLock()
		{
		}

		[Token(Token = "0x6000FA1")]
		[Address(RVA = "0xEF53A0", Offset = "0xEF53A0", VA = "0xEF53A0")]
		public void Shift()
		{
		}

		[Token(Token = "0x6000FA2")]
		[Address(RVA = "0xEF5464", Offset = "0xEF5464", VA = "0xEF5464")]
		public void GenerateInput(string s)
		{
		}

		[Token(Token = "0x6000FA3")]
		[Address(RVA = "0xEF529C", Offset = "0xEF529C", VA = "0xEF529C")]
		public void SetInput(string s)
		{
		}

		[Token(Token = "0x6000FA4")]
		[Address(RVA = "0xEF5110", Offset = "0xEF5110", VA = "0xEF5110")]
		private void ForceInputFieldActivated()
		{
		}

		[Token(Token = "0x6000FA5")]
		[Address(RVA = "0xEF51CC", Offset = "0xEF51CC", VA = "0xEF51CC")]
		[IteratorStateMachine(typeof(<WaitTargetProcessEvent>d__25))]
		private IEnumerator WaitTargetProcessEvent(Action callback)
		{
			return null;
		}

		[Token(Token = "0x6000FA6")]
		[Address(RVA = "0xEF55D4", Offset = "0xEF55D4", VA = "0xEF55D4")]
		private void SimulateKeyboardEvent(string s)
		{
		}

		[Token(Token = "0x6000FA7")]
		[Address(RVA = "0xEF569C", Offset = "0xEF569C", VA = "0xEF569C")]
		public KeyboardManager()
		{
		}
	}
	[Token(Token = "0x200031B")]
	public class Alphabet : Key
	{
		[Token(Token = "0x6000FB8")]
		[Address(RVA = "0xEF5B40", Offset = "0xEF5B40", VA = "0xEF5B40", Slot = "5")]
		public override void CapsLock(bool isUppercase)
		{
		}

		[Token(Token = "0x6000FB9")]
		[Address(RVA = "0xEF5BA4", Offset = "0xEF5BA4", VA = "0xEF5BA4")]
		public Alphabet()
		{
		}
	}
	[Token(Token = "0x200031C")]
	public class Key : MonoBehaviour
	{
		[Token(Token = "0x200031D")]
		public delegate void OnKeyClickedHandler(string key);

		[Token(Token = "0x4001091")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected Text key;

		[Token(Token = "0x14000013")]
		public event OnKeyClickedHandler OnKeyClicked
		{
			[Token(Token = "0x6000FBA")]
			[Address(RVA = "0xEF4E4C", Offset = "0xEF4E4C", VA = "0xEF4E4C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000FBB")]
			[Address(RVA = "0xEF5BB4", Offset = "0xEF5BB4", VA = "0xEF5BB4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000FBC")]
		[Address(RVA = "0xEF5C50", Offset = "0xEF5C50", VA = "0xEF5C50", Slot = "4")]
		public virtual void Awake()
		{
		}

		[Token(Token = "0x6000FBD")]
		[Address(RVA = "0xEF5D60", Offset = "0xEF5D60", VA = "0xEF5D60", Slot = "5")]
		public virtual void CapsLock(bool isUppercase)
		{
		}

		[Token(Token = "0x6000FBE")]
		[Address(RVA = "0xEF5D64", Offset = "0xEF5D64", VA = "0xEF5D64", Slot = "6")]
		public virtual void ShiftKey()
		{
		}

		[Token(Token = "0x6000FBF")]
		[Address(RVA = "0xEF5BAC", Offset = "0xEF5BAC", VA = "0xEF5BAC")]
		public Key()
		{
		}
	}
	[Token(Token = "0x200031E")]
	public class Number : Key
	{
		[Token(Token = "0x6000FC5")]
		[Address(RVA = "0xEF5DEC", Offset = "0xEF5DEC", VA = "0xEF5DEC")]
		public Number()
		{
		}
	}
	[Token(Token = "0x200031F")]
	public class Shift : Key
	{
		[Token(Token = "0x4001093")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Text subscript;

		[Token(Token = "0x6000FC6")]
		[Address(RVA = "0xEF5DF4", Offset = "0xEF5DF4", VA = "0xEF5DF4", Slot = "4")]
		public override void Awake()
		{
		}

		[Token(Token = "0x6000FC7")]
		[Address(RVA = "0xEF5E88", Offset = "0xEF5E88", VA = "0xEF5E88", Slot = "6")]
		public override void ShiftKey()
		{
		}

		[Token(Token = "0x6000FC8")]
		[Address(RVA = "0xEF5F14", Offset = "0xEF5F14", VA = "0xEF5F14")]
		public Shift()
		{
		}
	}
	[Token(Token = "0x2000320")]
	public class Symbol : Key
	{
		[Token(Token = "0x6000FC9")]
		[Address(RVA = "0xEF5F1C", Offset = "0xEF5F1C", VA = "0xEF5F1C")]
		public Symbol()
		{
		}
	}
	[Token(Token = "0x2000321")]
	public class MobileKeyboardManager : MonoBehaviour
	{
		[Token(Token = "0x4001094")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("User defined")]
		[Tooltip("If the character is uppercase at the initialization")]
		public bool isUppercase;

		[Token(Token = "0x4001095")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Essentials")]
		public Transform keys;

		[Token(Token = "0x4001096")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static UIKitInputField target;

		[Token(Token = "0x4001097")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Key[] keyList;

		[Token(Token = "0x4001098")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool capslockFlag;

		[Token(Token = "0x17000212")]
		public static UIKitInputField Target
		{
			[Token(Token = "0x6000FCA")]
			[Address(RVA = "0xEF5F24", Offset = "0xEF5F24", VA = "0xEF5F24")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FCB")]
			[Address(RVA = "0xEF6088", Offset = "0xEF6088", VA = "0xEF6088")]
			set
			{
			}
		}

		[Token(Token = "0x17000213")]
		private string Input
		{
			[Token(Token = "0x6000FCC")]
			[Address(RVA = "0xEF60E0", Offset = "0xEF60E0", VA = "0xEF60E0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FCD")]
			[Address(RVA = "0xEF6178", Offset = "0xEF6178", VA = "0xEF6178")]
			set
			{
			}
		}

		[Token(Token = "0x6000FCE")]
		[Address(RVA = "0xEF625C", Offset = "0xEF625C", VA = "0xEF625C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000FCF")]
		[Address(RVA = "0xEF62C0", Offset = "0xEF62C0", VA = "0xEF62C0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000FD0")]
		[Address(RVA = "0xEF6470", Offset = "0xEF6470", VA = "0xEF6470")]
		public void Backspace()
		{
		}

		[Token(Token = "0x6000FD1")]
		[Address(RVA = "0xEF64C8", Offset = "0xEF64C8", VA = "0xEF64C8")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000FD2")]
		[Address(RVA = "0xEF639C", Offset = "0xEF639C", VA = "0xEF639C")]
		public void CapsLock()
		{
		}

		[Token(Token = "0x6000FD3")]
		[Address(RVA = "0xEF6568", Offset = "0xEF6568", VA = "0xEF6568")]
		public void Shift()
		{
		}

		[Token(Token = "0x6000FD4")]
		[Address(RVA = "0xEF662C", Offset = "0xEF662C", VA = "0xEF662C")]
		public void GenerateInput(string s)
		{
		}

		[Token(Token = "0x6000FD5")]
		[Address(RVA = "0xEF6650", Offset = "0xEF6650", VA = "0xEF6650")]
		public MobileKeyboardManager()
		{
		}
	}
	[Token(Token = "0x2000322")]
	public class KeyboardSuggestions : MonoBehaviour
	{
		[Token(Token = "0x4001099")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public KeyboardManager keyboardManager;

		[Token(Token = "0x400109A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int maxNumberOfSuggestions;

		[Token(Token = "0x400109B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<string> suggestions;

		[Token(Token = "0x400109C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private string pattern;

		[Token(Token = "0x400109D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private SuggestionButton[] suggestionButtons;

		[Token(Token = "0x6000FD6")]
		[Address(RVA = "0xEF6658", Offset = "0xEF6658", VA = "0xEF6658")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000FD7")]
		[Address(RVA = "0xEF680C", Offset = "0xEF680C", VA = "0xEF680C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000FD8")]
		[Address(RVA = "0xEF6AB4", Offset = "0xEF6AB4", VA = "0xEF6AB4")]
		private void Suggest(string word)
		{
		}

		[Token(Token = "0x6000FD9")]
		[Address(RVA = "0xEF6BA0", Offset = "0xEF6BA0", VA = "0xEF6BA0")]
		private bool IsSkipSugestion()
		{
			return default(bool);
		}

		[Token(Token = "0x6000FDA")]
		[Address(RVA = "0xEF6FD8", Offset = "0xEF6FD8", VA = "0xEF6FD8")]
		private void GenerateSuggestionsUI()
		{
		}

		[Token(Token = "0x6000FDB")]
		[Address(RVA = "0xEF7158", Offset = "0xEF7158", VA = "0xEF7158")]
		private void SetSuggestionToCurrentInput(string word)
		{
		}

		[Token(Token = "0x6000FDC")]
		[Address(RVA = "0xEF7374", Offset = "0xEF7374", VA = "0xEF7374")]
		public KeyboardSuggestions()
		{
		}
	}
	[Token(Token = "0x2000323")]
	public class SuggestionButton : MonoBehaviour
	{
		[Token(Token = "0x2000324")]
		public delegate void OnSuggestionClickedHandler(string word);

		[Token(Token = "0x400109E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Text suggestionText;

		[Token(Token = "0x14000014")]
		public event OnSuggestionClickedHandler OnSuggestionClicked
		{
			[Token(Token = "0x6000FDD")]
			[Address(RVA = "0xEF6A18", Offset = "0xEF6A18", VA = "0xEF6A18")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000FDE")]
			[Address(RVA = "0xEF73D4", Offset = "0xEF73D4", VA = "0xEF73D4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000FDF")]
		[Address(RVA = "0xEF7470", Offset = "0xEF7470", VA = "0xEF7470")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000FE0")]
		[Address(RVA = "0xEF70B8", Offset = "0xEF70B8", VA = "0xEF70B8")]
		public void SetSuggestion(string word)
		{
		}

		[Token(Token = "0x6000FE1")]
		[Address(RVA = "0xEF7558", Offset = "0xEF7558", VA = "0xEF7558")]
		public SuggestionButton()
		{
		}
	}
	[Token(Token = "0x2000325")]
	public class SuggestionSetup
	{
		[Token(Token = "0x40010A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static SuggestionSetup instance;

		[Token(Token = "0x40010A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Node root;

		[Token(Token = "0x40010A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string[] textArray;

		[Token(Token = "0x6000FE7")]
		[Address(RVA = "0xEF6748", Offset = "0xEF6748", VA = "0xEF6748")]
		public SuggestionSetup(string[] textArray)
		{
		}

		[Token(Token = "0x6000FE8")]
		[Address(RVA = "0xEF76BC", Offset = "0xEF76BC", VA = "0xEF76BC")]
		private void PreProcess()
		{
		}

		[Token(Token = "0x6000FE9")]
		[Address(RVA = "0xEF6C88", Offset = "0xEF6C88", VA = "0xEF6C88")]
		public List<string> GetSuggestions(string word, int maxNumberOfSuggestions)
		{
			return null;
		}
	}
	[Token(Token = "0x2000326")]
	public class Node
	{
		[Token(Token = "0x40010A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Dictionary<char, Node> nodes;

		[Token(Token = "0x40010A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<int> indexes;

		[Token(Token = "0x6000FEA")]
		[Address(RVA = "0xEF75E4", Offset = "0xEF75E4", VA = "0xEF75E4")]
		public Node()
		{
		}
	}
	[Token(Token = "0x2000327")]
	public class Item : MonoBehaviour
	{
		[Token(Token = "0x2000328")]
		public delegate void OnItemSelectedHandler(Item item);

		[Token(Token = "0x40010A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Button button;

		[Token(Token = "0x40010A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected Color normalColor;

		[Token(Token = "0x40010A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected Color highlightedColor;

		[Token(Token = "0x40010A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Image image;

		[Token(Token = "0x40010AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected Sprite originSprite;

		[Token(Token = "0x40010AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected Sprite highlightedSprite;

		[Token(Token = "0x14000015")]
		public event OnItemSelectedHandler OnItemSelected
		{
			[Token(Token = "0x6000FEB")]
			[Address(RVA = "0xEF78B4", Offset = "0xEF78B4", VA = "0xEF78B4")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000FEC")]
			[Address(RVA = "0xEF7950", Offset = "0xEF7950", VA = "0xEF7950")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000FED")]
		[Address(RVA = "0xEF79EC", Offset = "0xEF79EC", VA = "0xEF79EC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000FEE")]
		[Address(RVA = "0xEF7C48", Offset = "0xEF7C48", VA = "0xEF7C48", Slot = "4")]
		public virtual void Activate()
		{
		}

		[Token(Token = "0x6000FEF")]
		[Address(RVA = "0xEF7DB0", Offset = "0xEF7DB0", VA = "0xEF7DB0", Slot = "5")]
		public virtual void Deactivate()
		{
		}

		[Token(Token = "0x6000FF0")]
		[Address(RVA = "0xEF7EAC", Offset = "0xEF7EAC", VA = "0xEF7EAC")]
		public Item()
		{
		}
	}
	[Token(Token = "0x2000329")]
	public class ListSelectionHelper : MonoBehaviour
	{
		[Token(Token = "0x40010AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform list;

		[Token(Token = "0x40010AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Item initialActivatedItem;

		[Token(Token = "0x40010AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public Item currentSelectedItem;

		[Token(Token = "0x40010AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Item[] items;

		[Token(Token = "0x6000FF6")]
		[Address(RVA = "0xEF8050", Offset = "0xEF8050", VA = "0xEF8050")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000FF7")]
		[Address(RVA = "0xEF80B0", Offset = "0xEF80B0", VA = "0xEF80B0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000FF8")]
		[Address(RVA = "0xEF8204", Offset = "0xEF8204", VA = "0xEF8204")]
		private void SelectionHelper(Item item)
		{
		}

		[Token(Token = "0x6000FF9")]
		[Address(RVA = "0xEF8248", Offset = "0xEF8248", VA = "0xEF8248")]
		public void DeselectCurrentItem()
		{
		}

		[Token(Token = "0x6000FFA")]
		[Address(RVA = "0xEF82D4", Offset = "0xEF82D4", VA = "0xEF82D4")]
		public ListSelectionHelper()
		{
		}
	}
	[Token(Token = "0x200032A")]
	public class MenuItem : Item
	{
		[Token(Token = "0x40010B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public GameObject subMenu;

		[Token(Token = "0x6000FFB")]
		[Address(RVA = "0xEF82DC", Offset = "0xEF82DC", VA = "0xEF82DC", Slot = "4")]
		public override void Activate()
		{
		}

		[Token(Token = "0x6000FFC")]
		[Address(RVA = "0xEF836C", Offset = "0xEF836C", VA = "0xEF836C", Slot = "5")]
		public override void Deactivate()
		{
		}

		[Token(Token = "0x6000FFD")]
		[Address(RVA = "0xEF8410", Offset = "0xEF8410", VA = "0xEF8410")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000FFE")]
		[Address(RVA = "0xEF841C", Offset = "0xEF841C", VA = "0xEF841C")]
		public MenuItem()
		{
		}
	}
	[Token(Token = "0x200032B")]
	public class TabItem : Item
	{
		[Token(Token = "0x40010B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public GameObject relatedPanel;

		[Token(Token = "0x6000FFF")]
		[Address(RVA = "0xEF8424", Offset = "0xEF8424", VA = "0xEF8424", Slot = "4")]
		public override void Activate()
		{
		}

		[Token(Token = "0x6001000")]
		[Address(RVA = "0xEF85EC", Offset = "0xEF85EC", VA = "0xEF85EC", Slot = "5")]
		public override void Deactivate()
		{
		}

		[Token(Token = "0x6001001")]
		[Address(RVA = "0xEF8538", Offset = "0xEF8538", VA = "0xEF8538")]
		private void ToggleCanvasGroupBlockRaycast(bool enabled)
		{
		}

		[Token(Token = "0x6001002")]
		[Address(RVA = "0xEF86F0", Offset = "0xEF86F0", VA = "0xEF86F0")]
		public TabItem()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200032C")]
	public struct Option
	{
		[Token(Token = "0x40010B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string value;
	}
	[Token(Token = "0x200032D")]
	public class OptionItem : MonoBehaviour
	{
		[Token(Token = "0x40010B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Option option;

		[Token(Token = "0x17000214")]
		public string Value
		{
			[Token(Token = "0x6001003")]
			[Address(RVA = "0xEF86F8", Offset = "0xEF86F8", VA = "0xEF86F8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000215")]
		public Option Option
		{
			[Token(Token = "0x6001004")]
			[Address(RVA = "0xEF8700", Offset = "0xEF8700", VA = "0xEF8700")]
			get
			{
				return default(Option);
			}
			[Token(Token = "0x6001005")]
			[Address(RVA = "0xEF8708", Offset = "0xEF8708", VA = "0xEF8708")]
			set
			{
			}
		}

		[Token(Token = "0x6001006")]
		[Address(RVA = "0xEF87E4", Offset = "0xEF87E4", VA = "0xEF87E4")]
		public void Activate()
		{
		}

		[Token(Token = "0x6001007")]
		[Address(RVA = "0xEF8808", Offset = "0xEF8808", VA = "0xEF8808")]
		public void Deactivate()
		{
		}

		[Token(Token = "0x6001008")]
		[Address(RVA = "0xEF882C", Offset = "0xEF882C", VA = "0xEF882C")]
		public OptionItem()
		{
		}
	}
	[Token(Token = "0x200032E")]
	public class OptionsManager : MonoBehaviour
	{
		[Token(Token = "0x200032F")]
		public delegate void OnOptionSelectedHandler(int index);

		[Token(Token = "0x40010B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Template")]
		public GameObject optionTemplate;

		[Token(Token = "0x40010B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public List<Option> optionsList;

		[Token(Token = "0x40010B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[HideInInspector]
		public string selectedValue;

		[Token(Token = "0x40010B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int firstSelectedIndex;

		[Token(Token = "0x40010B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private int selectedIdx;

		[Token(Token = "0x40010BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<OptionItem> optionItems;

		[Token(Token = "0x14000016")]
		public event OnOptionSelectedHandler OnOptionSelected
		{
			[Token(Token = "0x6001009")]
			[Address(RVA = "0xEED9EC", Offset = "0xEED9EC", VA = "0xEED9EC")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600100A")]
			[Address(RVA = "0xEF8834", Offset = "0xEF8834", VA = "0xEF8834")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x600100B")]
		[Address(RVA = "0xEF88D0", Offset = "0xEF88D0", VA = "0xEF88D0")]
		private void Awake()
		{
		}

		[Token(Token = "0x600100C")]
		[Address(RVA = "0xEF8AC4", Offset = "0xEF8AC4", VA = "0xEF8AC4")]
		private void Start()
		{
		}

		[Token(Token = "0x600100D")]
		[Address(RVA = "0xEF88FC", Offset = "0xEF88FC", VA = "0xEF88FC")]
		private void PopulateOptions()
		{
		}

		[Token(Token = "0x600100E")]
		[Address(RVA = "0xEF8C2C", Offset = "0xEF8C2C", VA = "0xEF8C2C")]
		public void PrevOption()
		{
		}

		[Token(Token = "0x600100F")]
		[Address(RVA = "0xEF8CC4", Offset = "0xEF8CC4", VA = "0xEF8CC4")]
		public void NextOption()
		{
		}

		[Token(Token = "0x6001010")]
		[Address(RVA = "0xEF8C38", Offset = "0xEF8C38", VA = "0xEF8C38")]
		public void SetOption(int i)
		{
		}

		[Token(Token = "0x6001011")]
		[Address(RVA = "0xEF8B7C", Offset = "0xEF8B7C", VA = "0xEF8B7C")]
		private void ActivateOption(int i)
		{
		}

		[Token(Token = "0x6001012")]
		[Address(RVA = "0xEF8CD0", Offset = "0xEF8CD0", VA = "0xEF8CD0")]
		private void DeactivateOption(int i)
		{
		}

		[Token(Token = "0x6001013")]
		[Address(RVA = "0xEF8D58", Offset = "0xEF8D58", VA = "0xEF8D58")]
		public OptionsManager()
		{
		}
	}
	[Token(Token = "0x2000330")]
	public enum ButtonDeactiveStyle
	{
		[Token(Token = "0x40010BC")]
		Disabled,
		[Token(Token = "0x40010BD")]
		Hidden
	}
	[Token(Token = "0x2000331")]
	public class Pagination : MonoBehaviour
	{
		[Token(Token = "0x40010BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Target")]
		public Transform targetObject;

		[Token(Token = "0x40010BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Pagination Buttons")]
		public ButtonDeactiveStyle buttonDeactiveStyle;

		[Token(Token = "0x40010C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Button nextBtn;

		[Token(Token = "0x40010C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Button prevBtn;

		[Token(Token = "0x40010C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int currentPage;

		[Token(Token = "0x17000216")]
		public int CurrentPage
		{
			[Token(Token = "0x6001018")]
			[Address(RVA = "0xEF8ED4", Offset = "0xEF8ED4", VA = "0xEF8ED4")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001019")]
			[Address(RVA = "0xEF8EDC", Offset = "0xEF8EDC", VA = "0xEF8EDC")]
			set
			{
			}
		}

		[Token(Token = "0x600101A")]
		[Address(RVA = "0xEF91F8", Offset = "0xEF91F8", VA = "0xEF91F8")]
		private void Start()
		{
		}

		[Token(Token = "0x600101B")]
		[Address(RVA = "0xEF9368", Offset = "0xEF9368", VA = "0xEF9368")]
		public void Next()
		{
		}

		[Token(Token = "0x600101C")]
		[Address(RVA = "0xEF9374", Offset = "0xEF9374", VA = "0xEF9374")]
		public void Prev()
		{
		}

		[Token(Token = "0x600101D")]
		[Address(RVA = "0xEF90B0", Offset = "0xEF90B0", VA = "0xEF90B0")]
		private void PagintionBtnControl(bool nextEnabled, bool prevEnabled)
		{
		}

		[Token(Token = "0x600101E")]
		[Address(RVA = "0xEF9380", Offset = "0xEF9380", VA = "0xEF9380")]
		public Pagination()
		{
		}
	}
	[Token(Token = "0x2000332")]
	[RequireComponent(typeof(ProgressBarManager))]
	public class CircularProgressBar : MonoBehaviour
	{
		[Token(Token = "0x40010C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Image circle;

		[Token(Token = "0x40010C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 1f)]
		public float step;

		[Token(Token = "0x40010C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Value")]
		public Transform valueText;

		[Token(Token = "0x40010C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float min;

		[Token(Token = "0x40010C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float max;

		[Token(Token = "0x40010C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private ProgressBarManager progressBarManager;

		[Token(Token = "0x17000217")]
		public Text ValueText
		{
			[Token(Token = "0x600101F")]
			[Address(RVA = "0xEF9388", Offset = "0xEF9388", VA = "0xEF9388")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000218")]
		public float Value
		{
			[Token(Token = "0x6001020")]
			[Address(RVA = "0xEF93D8", Offset = "0xEF93D8", VA = "0xEF93D8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001021")]
			[Address(RVA = "0xEF93F4", Offset = "0xEF93F4", VA = "0xEF93F4")]
			set
			{
			}
		}

		[Token(Token = "0x6001022")]
		[Address(RVA = "0xEF9410", Offset = "0xEF9410", VA = "0xEF9410")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001023")]
		[Address(RVA = "0xEF9468", Offset = "0xEF9468", VA = "0xEF9468")]
		private void Start()
		{
		}

		[Token(Token = "0x6001024")]
		[Address(RVA = "0xEF985C", Offset = "0xEF985C", VA = "0xEF985C")]
		public void IncreaseValue()
		{
		}

		[Token(Token = "0x6001025")]
		[Address(RVA = "0xEF9920", Offset = "0xEF9920", VA = "0xEF9920")]
		public void DecreaseValue()
		{
		}

		[Token(Token = "0x6001026")]
		[Address(RVA = "0xEF99E4", Offset = "0xEF99E4", VA = "0xEF99E4")]
		private void UpdateValue(float newValue)
		{
		}

		[Token(Token = "0x6001027")]
		[Address(RVA = "0xEF954C", Offset = "0xEF954C", VA = "0xEF954C")]
		private void UpdateValueText(float newValue)
		{
		}

		[Token(Token = "0x6001028")]
		[Address(RVA = "0xEF9A00", Offset = "0xEF9A00", VA = "0xEF9A00")]
		public CircularProgressBar()
		{
		}
	}
	[Token(Token = "0x2000333")]
	public class ProgressBarManager : MonoBehaviour
	{
		[Token(Token = "0x2000334")]
		public delegate void OnValueUpdatedHandler(float updatedValue);

		[Token(Token = "0x2000335")]
		[CompilerGenerated]
		private sealed class <SlideTo>d__10 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40010CC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40010CD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40010CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float target;

			[Token(Token = "0x40010CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public float toValue;

			[Token(Token = "0x40010D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float time;

			[Token(Token = "0x40010D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public ProgressBarManager <>4__this;

			[Token(Token = "0x40010D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <fromValue>5__2;

			[Token(Token = "0x40010D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private float <elapsedTime>5__3;

			[Token(Token = "0x17000219")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001038")]
				[Address(RVA = "0xEF9DC8", Offset = "0xEF9DC8", VA = "0xEF9DC8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700021A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600103A")]
				[Address(RVA = "0xEF9E10", Offset = "0xEF9E10", VA = "0xEF9E10", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001035")]
			[Address(RVA = "0xEF9BEC", Offset = "0xEF9BEC", VA = "0xEF9BEC")]
			[DebuggerHidden]
			public <SlideTo>d__10(int <>1__state)
			{
			}

			[Token(Token = "0x6001036")]
			[Address(RVA = "0xEF9CC0", Offset = "0xEF9CC0", VA = "0xEF9CC0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001037")]
			[Address(RVA = "0xEF9CC4", Offset = "0xEF9CC4", VA = "0xEF9CC4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001039")]
			[Address(RVA = "0xEF9DD0", Offset = "0xEF9DD0", VA = "0xEF9DD0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40010C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Coroutine slideCoroutine;

		[Token(Token = "0x14000017")]
		public event OnValueUpdatedHandler OnValueIsUpdating
		{
			[Token(Token = "0x6001029")]
			[Address(RVA = "0xEF9724", Offset = "0xEF9724", VA = "0xEF9724")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600102A")]
			[Address(RVA = "0xEF9A1C", Offset = "0xEF9A1C", VA = "0xEF9A1C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000018")]
		public event OnValueUpdatedHandler OnValueStopUpgating
		{
			[Token(Token = "0x600102B")]
			[Address(RVA = "0xEF97C0", Offset = "0xEF97C0", VA = "0xEF97C0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600102C")]
			[Address(RVA = "0xEF9AB8", Offset = "0xEF9AB8", VA = "0xEF9AB8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x600102D")]
		[Address(RVA = "0xEF988C", Offset = "0xEF988C", VA = "0xEF988C")]
		public void IncreaseValue(float target, float step, float min, float max)
		{
		}

		[Token(Token = "0x600102E")]
		[Address(RVA = "0xEF9950", Offset = "0xEF9950", VA = "0xEF9950")]
		public void DecreaseValue(float target, float step, float min, float max)
		{
		}

		[Token(Token = "0x600102F")]
		[Address(RVA = "0xEF9B54", Offset = "0xEF9B54", VA = "0xEF9B54")]
		[IteratorStateMachine(typeof(<SlideTo>d__10))]
		private IEnumerator SlideTo(float target, float toValue, float time = 0.2f)
		{
			return null;
		}

		[Token(Token = "0x6001030")]
		[Address(RVA = "0xEF9C14", Offset = "0xEF9C14", VA = "0xEF9C14")]
		public ProgressBarManager()
		{
		}
	}
	[Token(Token = "0x2000336")]
	[RequireComponent(typeof(ProgressBarManager))]
	public class ScrollController : MonoBehaviour
	{
		[Token(Token = "0x40010D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Scrollbar scrollbar;

		[Token(Token = "0x40010D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 1f)]
		public float step;

		[Token(Token = "0x40010D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float min;

		[Token(Token = "0x40010D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float max;

		[Token(Token = "0x40010D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private ProgressBarManager progressBarManager;

		[Token(Token = "0x1700021B")]
		public float Value
		{
			[Token(Token = "0x600103B")]
			[Address(RVA = "0xEF9E18", Offset = "0xEF9E18", VA = "0xEF9E18")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600103C")]
			[Address(RVA = "0xEF9E34", Offset = "0xEF9E34", VA = "0xEF9E34")]
			set
			{
			}
		}

		[Token(Token = "0x600103D")]
		[Address(RVA = "0xEF9E50", Offset = "0xEF9E50", VA = "0xEF9E50")]
		private void Awake()
		{
		}

		[Token(Token = "0x600103E")]
		[Address(RVA = "0xEF9EA8", Offset = "0xEF9EA8", VA = "0xEF9EA8")]
		private void Start()
		{
		}

		[Token(Token = "0x600103F")]
		[Address(RVA = "0xEF9F2C", Offset = "0xEF9F2C", VA = "0xEF9F2C")]
		public void IncreaseValue()
		{
		}

		[Token(Token = "0x6001040")]
		[Address(RVA = "0xEF9F6C", Offset = "0xEF9F6C", VA = "0xEF9F6C")]
		public void DecreaseValue()
		{
		}

		[Token(Token = "0x6001041")]
		[Address(RVA = "0xEF9FAC", Offset = "0xEF9FAC", VA = "0xEF9FAC")]
		private void UpdateValue(float newValue)
		{
		}

		[Token(Token = "0x6001042")]
		[Address(RVA = "0xEF9FC8", Offset = "0xEF9FC8", VA = "0xEF9FC8")]
		public ScrollController()
		{
		}
	}
	[Token(Token = "0x2000337")]
	[RequireComponent(typeof(ProgressBarManager))]
	public class SliderProgressBar : MonoBehaviour
	{
		[Token(Token = "0x2000338")]
		public enum ValueType
		{
			[Token(Token = "0x40010E1")]
			Percentage,
			[Token(Token = "0x40010E2")]
			Number
		}

		[Token(Token = "0x40010D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Slider slider;

		[Token(Token = "0x40010DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float step;

		[Token(Token = "0x40010DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Header("Value")]
		public ValueType valuePresentedAs;

		[Token(Token = "0x40010DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform valueText;

		[Token(Token = "0x40010DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[HideInInspector]
		public float roundedPercentage;

		[Token(Token = "0x40010DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[HideInInspector]
		public float roundedValue;

		[Token(Token = "0x40010DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private ProgressBarManager progressBarManager;

		[Token(Token = "0x1700021C")]
		public Text ValueText
		{
			[Token(Token = "0x6001043")]
			[Address(RVA = "0xEF9FE0", Offset = "0xEF9FE0", VA = "0xEF9FE0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700021D")]
		public float Value
		{
			[Token(Token = "0x6001044")]
			[Address(RVA = "0xEFA030", Offset = "0xEFA030", VA = "0xEFA030")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001045")]
			[Address(RVA = "0xEFA054", Offset = "0xEFA054", VA = "0xEFA054")]
			set
			{
			}
		}

		[Token(Token = "0x6001046")]
		[Address(RVA = "0xEFA078", Offset = "0xEFA078", VA = "0xEFA078")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001047")]
		[Address(RVA = "0xEFA0D0", Offset = "0xEFA0D0", VA = "0xEFA0D0")]
		private void Start()
		{
		}

		[Token(Token = "0x6001048")]
		[Address(RVA = "0xEFA4AC", Offset = "0xEFA4AC", VA = "0xEFA4AC")]
		public void IncreaseValue()
		{
		}

		[Token(Token = "0x6001049")]
		[Address(RVA = "0xEFA500", Offset = "0xEFA500", VA = "0xEFA500")]
		public void DecreaseValue()
		{
		}

		[Token(Token = "0x600104A")]
		[Address(RVA = "0xEFA554", Offset = "0xEFA554", VA = "0xEFA554")]
		private void UpdateValue(float newValue)
		{
		}

		[Token(Token = "0x600104B")]
		[Address(RVA = "0xEFA224", Offset = "0xEFA224", VA = "0xEFA224")]
		private void CalculateValue(float newValue)
		{
		}

		[Token(Token = "0x600104C")]
		[Address(RVA = "0xEFA3AC", Offset = "0xEFA3AC", VA = "0xEFA3AC")]
		private void UpdateValueText(float newValue)
		{
		}

		[Token(Token = "0x600104D")]
		[Address(RVA = "0xEFA578", Offset = "0xEFA578", VA = "0xEFA578")]
		public SliderProgressBar()
		{
		}
	}
	[Token(Token = "0x2000339")]
	public class RadialItem : MonoBehaviour
	{
		[Token(Token = "0x40010E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Color normalColor;

		[Token(Token = "0x40010E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Color hoverColor;

		[Token(Token = "0x40010E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Sprite iconImage;

		[Token(Token = "0x40010E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public UnityEvent onClickEvent;

		[Token(Token = "0x40010E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform icon;

		[Token(Token = "0x40010E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform sector;

		[Token(Token = "0x600104E")]
		[Address(RVA = "0xEFA58C", Offset = "0xEFA58C", VA = "0xEFA58C")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x600104F")]
		[Address(RVA = "0xEFA618", Offset = "0xEFA618", VA = "0xEFA618")]
		public void AdjustFillSize(int total, int index, float radius)
		{
		}

		[Token(Token = "0x6001050")]
		[Address(RVA = "0xEFA7D4", Offset = "0xEFA7D4", VA = "0xEFA7D4")]
		public void Activate()
		{
		}

		[Token(Token = "0x6001051")]
		[Address(RVA = "0xEFA840", Offset = "0xEFA840", VA = "0xEFA840")]
		public void Deactivate()
		{
		}

		[Token(Token = "0x6001052")]
		[Address(RVA = "0xEFA8AC", Offset = "0xEFA8AC", VA = "0xEFA8AC")]
		public void Click()
		{
		}

		[Token(Token = "0x6001053")]
		[Address(RVA = "0xEFA740", Offset = "0xEFA740", VA = "0xEFA740")]
		private Vector3 CalculateIconPosition(float rotation, float radis)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001054")]
		[Address(RVA = "0xEFA8C0", Offset = "0xEFA8C0", VA = "0xEFA8C0")]
		public RadialItem()
		{
		}
	}
	[Token(Token = "0x200033A")]
	[ExecuteInEditMode]
	public class RadialMenuManager : MonoBehaviour
	{
		[Token(Token = "0x40010E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Min(0f)]
		public float iconRadius;

		[Token(Token = "0x40010EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private Vector2 position;

		[Token(Token = "0x40010EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private RadialItem[] radialItems;

		[Token(Token = "0x40010EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float currentAngle;

		[Token(Token = "0x40010ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int previousSelection;

		[Token(Token = "0x40010EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public OVRInput.Controller controller;

		[Token(Token = "0x6001055")]
		[Address(RVA = "0xEFA8C8", Offset = "0xEFA8C8", VA = "0xEFA8C8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001056")]
		[Address(RVA = "0xEFA9E8", Offset = "0xEFA9E8", VA = "0xEFA9E8")]
		private void Update()
		{
		}

		[Token(Token = "0x6001057")]
		[Address(RVA = "0xEFA928", Offset = "0xEFA928", VA = "0xEFA928")]
		public void AdjustRadialItem()
		{
		}

		[Token(Token = "0x6001058")]
		[Address(RVA = "0xEFAB60", Offset = "0xEFAB60", VA = "0xEFAB60")]
		private int GetCurrentSelection(Vector2 position)
		{
			return default(int);
		}

		[Token(Token = "0x6001059")]
		[Address(RVA = "0xEFAB1C", Offset = "0xEFAB1C", VA = "0xEFAB1C")]
		private void Reset()
		{
		}

		[Token(Token = "0x600105A")]
		[Address(RVA = "0xEFABFC", Offset = "0xEFABFC", VA = "0xEFABFC")]
		private void ProcessSelection(int selection)
		{
		}

		[Token(Token = "0x600105B")]
		[Address(RVA = "0xEFAC84", Offset = "0xEFAC84", VA = "0xEFAC84")]
		private void ProcessPress(int selection)
		{
		}

		[Token(Token = "0x600105C")]
		[Address(RVA = "0xEFAD48", Offset = "0xEFAD48", VA = "0xEFAD48")]
		public RadialMenuManager()
		{
		}
	}
	[Token(Token = "0x200033B")]
	public enum XRInputType
	{
		[Token(Token = "0x40010F0")]
		DeviceBased,
		[Token(Token = "0x40010F1")]
		ActionBased
	}
	[Token(Token = "0x200033C")]
	public class Util : MonoBehaviour
	{
		[Token(Token = "0x600105D")]
		public static T SafeDestroy<T>(T obj) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x600105E")]
		public static T SafeDestroyGameObject<T>(T component) where T : Component
		{
			return null;
		}

		[Token(Token = "0x600105F")]
		[Address(RVA = "0xEFAD50", Offset = "0xEFAD50", VA = "0xEFAD50")]
		public static void DestroyChildren(Transform root)
		{
		}

		[Token(Token = "0x6001060")]
		[Address(RVA = "0xEF72F4", Offset = "0xEF72F4", VA = "0xEF72F4")]
		public static string ReplaceLastOccurrence(string Source, string Find, string Replace)
		{
			return null;
		}

		[Token(Token = "0x6001061")]
		[Address(RVA = "0xEFADD4", Offset = "0xEFADD4", VA = "0xEFADD4")]
		public Util()
		{
		}
	}
	[Token(Token = "0x200033D")]
	public class VREventSystemHelper : EventSystem
	{
		[Token(Token = "0x6001062")]
		[Address(RVA = "0xEFADDC", Offset = "0xEFADDC", VA = "0xEFADDC", Slot = "17")]
		protected override void OnApplicationFocus(bool hasFocus)
		{
		}

		[Token(Token = "0x6001063")]
		[Address(RVA = "0xEFADE8", Offset = "0xEFADE8", VA = "0xEFADE8")]
		public VREventSystemHelper()
		{
		}
	}
}
namespace VRUiKits.Demo
{
	[Token(Token = "0x200033E")]
	public class ChangeColor : MonoBehaviour
	{
		[Token(Token = "0x40010F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Material material;

		[Token(Token = "0x40010F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Color color;

		[Token(Token = "0x40010F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool isClicked;

		[Token(Token = "0x6001064")]
		[Address(RVA = "0xEFAE40", Offset = "0xEFAE40", VA = "0xEFAE40")]
		private void Start()
		{
		}

		[Token(Token = "0x6001065")]
		[Address(RVA = "0xEFAEA8", Offset = "0xEFAEA8", VA = "0xEFAEA8")]
		public void PointerEnter()
		{
		}

		[Token(Token = "0x6001066")]
		[Address(RVA = "0xEFAEF8", Offset = "0xEFAEF8", VA = "0xEFAEF8")]
		public void PointerLeave()
		{
		}

		[Token(Token = "0x6001067")]
		[Address(RVA = "0xEFAF30", Offset = "0xEFAF30", VA = "0xEFAF30")]
		public void PointerClick()
		{
		}

		[Token(Token = "0x6001068")]
		[Address(RVA = "0xEFAF6C", Offset = "0xEFAF6C", VA = "0xEFAF6C")]
		public ChangeColor()
		{
		}
	}
	[Token(Token = "0x200033F")]
	public class FaceVRCamera : MonoBehaviour
	{
		[Token(Token = "0x40010F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform vrCamera;

		[Token(Token = "0x40010F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FaceCameraType type;

		[Token(Token = "0x40010F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float distance;

		[Token(Token = "0x6001069")]
		[Address(RVA = "0xEFAF74", Offset = "0xEFAF74", VA = "0xEFAF74")]
		private void Awake()
		{
		}

		[Token(Token = "0x600106A")]
		[Address(RVA = "0xEFAFC0", Offset = "0xEFAFC0", VA = "0xEFAFC0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600106B")]
		[Address(RVA = "0xEFB0D8", Offset = "0xEFB0D8", VA = "0xEFB0D8")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600106C")]
		[Address(RVA = "0xEFAFD4", Offset = "0xEFAFD4", VA = "0xEFAFD4")]
		private void CalibratePosition()
		{
		}

		[Token(Token = "0x600106D")]
		[Address(RVA = "0xEFB0E8", Offset = "0xEFB0E8", VA = "0xEFB0E8")]
		public FaceVRCamera()
		{
		}
	}
	[Token(Token = "0x2000340")]
	public enum FaceCameraType
	{
		[Token(Token = "0x40010F9")]
		Always,
		[Token(Token = "0x40010FA")]
		OnToggle
	}
	[Token(Token = "0x2000341")]
	public class KeyboardDisplay : MonoBehaviour
	{
		[Token(Token = "0x40010FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform vrCamera;

		[Token(Token = "0x40010FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 offset;

		[Token(Token = "0x600106E")]
		[Address(RVA = "0xEFB0F0", Offset = "0xEFB0F0", VA = "0xEFB0F0")]
		private void Awake()
		{
		}

		[Token(Token = "0x600106F")]
		[Address(RVA = "0xEFB158", Offset = "0xEFB158", VA = "0xEFB158")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001070")]
		[Address(RVA = "0xEFB15C", Offset = "0xEFB15C", VA = "0xEFB15C")]
		private void SetPosition()
		{
		}

		[Token(Token = "0x6001071")]
		[Address(RVA = "0xEFB1B8", Offset = "0xEFB1B8", VA = "0xEFB1B8")]
		public KeyboardDisplay()
		{
		}
	}
	[Token(Token = "0x2000342")]
	public class MouseLook : MonoBehaviour
	{
		[Token(Token = "0x40010FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float speed;

		[Token(Token = "0x40010FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float x;

		[Token(Token = "0x40010FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float y;

		[Token(Token = "0x6001072")]
		[Address(RVA = "0xEFB1C0", Offset = "0xEFB1C0", VA = "0xEFB1C0")]
		private void Update()
		{
		}

		[Token(Token = "0x6001073")]
		[Address(RVA = "0xEFB348", Offset = "0xEFB348", VA = "0xEFB348")]
		public MouseLook()
		{
		}
	}
	[Token(Token = "0x2000343")]
	public class ToggleUIKitHelper : MonoBehaviour
	{
		[Token(Token = "0x4001100")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UIKitPointer pointer;

		[Token(Token = "0x4001101")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<GameObject> objectsToToggle;

		[Token(Token = "0x4001102")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public OVRInput.Button trigger;

		[Token(Token = "0x4001103")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public OVRInput.Controller controller;

		[Token(Token = "0x6001074")]
		[Address(RVA = "0xEFB358", Offset = "0xEFB358", VA = "0xEFB358")]
		public void Pause()
		{
		}

		[Token(Token = "0x6001075")]
		[Address(RVA = "0xEFB578", Offset = "0xEFB578", VA = "0xEFB578")]
		public void Run()
		{
		}

		[Token(Token = "0x6001076")]
		[Address(RVA = "0xEFB404", Offset = "0xEFB404", VA = "0xEFB404")]
		private void Toggle(bool enabled)
		{
		}

		[Token(Token = "0x6001077")]
		[Address(RVA = "0xEFB624", Offset = "0xEFB624", VA = "0xEFB624")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001078")]
		[Address(RVA = "0xEFB73C", Offset = "0xEFB73C", VA = "0xEFB73C")]
		public ToggleUIKitHelper()
		{
		}
	}
}
namespace UI
{
	[Token(Token = "0x2000344")]
	public class HighContrastSettingListener : MonoBehaviour
	{
		[Token(Token = "0x4001104")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Renderer[] renderers;

		[Token(Token = "0x4001105")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Material[] origMaterials;

		[Token(Token = "0x4001106")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Material[] hcMaterials;

		[Token(Token = "0x6001079")]
		[Address(RVA = "0xEFB750", Offset = "0xEFB750", VA = "0xEFB750")]
		private void Start()
		{
		}

		[Token(Token = "0x600107A")]
		[Address(RVA = "0xEFB818", Offset = "0xEFB818", VA = "0xEFB818")]
		private void SetHighContrast(bool enable)
		{
		}

		[Token(Token = "0x600107B")]
		[Address(RVA = "0xEFB8A4", Offset = "0xEFB8A4", VA = "0xEFB8A4")]
		public HighContrastSettingListener()
		{
		}
	}
	[Token(Token = "0x2000345")]
	public class LanguageUIComponent : MonoBehaviour
	{
		[Token(Token = "0x2000346")]
		[CompilerGenerated]
		private sealed class <Start>d__3 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001109")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400110A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400110B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public LanguageUIComponent <>4__this;

			[Token(Token = "0x1700021E")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001084")]
				[Address(RVA = "0xEFBB88", Offset = "0xEFBB88", VA = "0xEFBB88", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700021F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001086")]
				[Address(RVA = "0xEFBBD0", Offset = "0xEFBBD0", VA = "0xEFBBD0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001081")]
			[Address(RVA = "0xEFB9F8", Offset = "0xEFB9F8", VA = "0xEFB9F8")]
			[DebuggerHidden]
			public <Start>d__3(int <>1__state)
			{
			}

			[Token(Token = "0x6001082")]
			[Address(RVA = "0xEFBAF0", Offset = "0xEFBAF0", VA = "0xEFBAF0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001083")]
			[Address(RVA = "0xEFBAF4", Offset = "0xEFBAF4", VA = "0xEFBAF4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001085")]
			[Address(RVA = "0xEFBB90", Offset = "0xEFBB90", VA = "0xEFBB90", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001107")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Language languageType;

		[Token(Token = "0x4001108")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PhysicalRadioButton radioButton;

		[Token(Token = "0x600107C")]
		[Address(RVA = "0xEFB8AC", Offset = "0xEFB8AC", VA = "0xEFB8AC")]
		private void Awake()
		{
		}

		[Token(Token = "0x600107D")]
		[Address(RVA = "0xEFB984", Offset = "0xEFB984", VA = "0xEFB984")]
		[IteratorStateMachine(typeof(<Start>d__3))]
		private IEnumerator Start()
		{
			return null;
		}

		[Token(Token = "0x600107E")]
		[Address(RVA = "0xEFBA20", Offset = "0xEFBA20", VA = "0xEFBA20")]
		private void InitializeInteractable()
		{
		}

		[Token(Token = "0x600107F")]
		[Address(RVA = "0xEFBA90", Offset = "0xEFBA90", VA = "0xEFBA90")]
		private void SetLanguage()
		{
		}

		[Token(Token = "0x6001080")]
		[Address(RVA = "0xEFBAE8", Offset = "0xEFBAE8", VA = "0xEFBAE8")]
		public LanguageUIComponent()
		{
		}
	}
	[Token(Token = "0x2000347")]
	public class PhysicalCheckBox : PhysicalUIInteractable
	{
		[Token(Token = "0x2000348")]
		[CompilerGenerated]
		private sealed class <DoInteractionTimeout>d__5 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400110F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001110")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001111")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PhysicalCheckBox <>4__this;

			[Token(Token = "0x17000220")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600108E")]
				[Address(RVA = "0xD6A7C8", Offset = "0xD6A7C8", VA = "0xD6A7C8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000221")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001090")]
				[Address(RVA = "0xD6A810", Offset = "0xD6A810", VA = "0xD6A810", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600108B")]
			[Address(RVA = "0xD6A6E8", Offset = "0xD6A6E8", VA = "0xD6A6E8")]
			[DebuggerHidden]
			public <DoInteractionTimeout>d__5(int <>1__state)
			{
			}

			[Token(Token = "0x600108C")]
			[Address(RVA = "0xD6A710", Offset = "0xD6A710", VA = "0xD6A710", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600108D")]
			[Address(RVA = "0xD6A714", Offset = "0xD6A714", VA = "0xD6A714", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600108F")]
			[Address(RVA = "0xD6A7D0", Offset = "0xD6A7D0", VA = "0xD6A7D0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400110C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject check;

		[Token(Token = "0x400110D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool value;

		[Token(Token = "0x400110E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		private bool isInteracting;

		[Token(Token = "0x6001087")]
		[Address(RVA = "0xEFBBD8", Offset = "0xEFBBD8", VA = "0xEFBBD8", Slot = "4")]
		public override void Initialize(bool pressed)
		{
		}

		[Token(Token = "0x6001088")]
		[Address(RVA = "0xEFBC14", Offset = "0xEFBC14", VA = "0xEFBC14")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6001089")]
		[Address(RVA = "0xEFBD38", Offset = "0xEFBD38", VA = "0xEFBD38")]
		[IteratorStateMachine(typeof(<DoInteractionTimeout>d__5))]
		private IEnumerator DoInteractionTimeout()
		{
			return null;
		}

		[Token(Token = "0x600108A")]
		[Address(RVA = "0xEFBDAC", Offset = "0xEFBDAC", VA = "0xEFBDAC")]
		public PhysicalCheckBox()
		{
		}
	}
	[Token(Token = "0x2000349")]
	public class PhysicalRadioButton : PhysicalUIInteractable
	{
		[Token(Token = "0x4001113")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Action<Guid> OnRadioButtonWasPushed;

		[Token(Token = "0x4001114")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject radioDot;

		[Token(Token = "0x17000222")]
		public Guid buttonId
		{
			[Token(Token = "0x6001091")]
			[Address(RVA = "0xD6A818", Offset = "0xD6A818", VA = "0xD6A818")]
			[CompilerGenerated]
			get
			{
				return default(Guid);
			}
			[Token(Token = "0x6001092")]
			[Address(RVA = "0xD6A824", Offset = "0xD6A824", VA = "0xD6A824")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6001093")]
		[Address(RVA = "0xD6A82C", Offset = "0xD6A82C", VA = "0xD6A82C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001094")]
		[Address(RVA = "0xD6A848", Offset = "0xD6A848", VA = "0xD6A848", Slot = "4")]
		public override void Initialize(bool pressed)
		{
		}

		[Token(Token = "0x6001095")]
		[Address(RVA = "0xD6A86C", Offset = "0xD6A86C", VA = "0xD6A86C")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6001096")]
		[Address(RVA = "0xD6A93C", Offset = "0xD6A93C", VA = "0xD6A93C")]
		public void ToggleButton(bool enable)
		{
		}

		[Token(Token = "0x6001097")]
		[Address(RVA = "0xD6A9B0", Offset = "0xD6A9B0", VA = "0xD6A9B0")]
		public PhysicalRadioButton()
		{
		}
	}
	[Token(Token = "0x200034A")]
	public class PhysicalRadioButtonGroup : MonoBehaviour
	{
		[Token(Token = "0x4001115")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PhysicalRadioButton[] radioButtons;

		[Token(Token = "0x6001098")]
		[Address(RVA = "0xD6A9C0", Offset = "0xD6A9C0", VA = "0xD6A9C0")]
		private void Start()
		{
		}

		[Token(Token = "0x6001099")]
		[Address(RVA = "0xD6AAF8", Offset = "0xD6AAF8", VA = "0xD6AAF8")]
		private void OnRadioButtonWasPushed(Guid buttonId)
		{
		}

		[Token(Token = "0x600109A")]
		[Address(RVA = "0xD6AB84", Offset = "0xD6AB84", VA = "0xD6AB84")]
		public PhysicalRadioButtonGroup()
		{
		}
	}
	[Token(Token = "0x200034B")]
	public class PhysicalSlider : PhysicalUIInteractable
	{
		[Token(Token = "0x4001116")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform origin;

		[Token(Token = "0x4001117")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform destination;

		[Token(Token = "0x4001118")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Material origMaterial;

		[Token(Token = "0x4001119")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Material hitMaterial;

		[Token(Token = "0x400111A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Transform thisTransform;

		[Token(Token = "0x400111B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Renderer thisRenderer;

		[Token(Token = "0x600109B")]
		[Address(RVA = "0xD6AB8C", Offset = "0xD6AB8C", VA = "0xD6AB8C")]
		private void Awake()
		{
		}

		[Token(Token = "0x600109C")]
		[Address(RVA = "0xD6AC00", Offset = "0xD6AC00", VA = "0xD6AC00", Slot = "5")]
		public override void Initialize(float startFactor)
		{
		}

		[Token(Token = "0x600109D")]
		[Address(RVA = "0xD6ACB4", Offset = "0xD6ACB4", VA = "0xD6ACB4")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x600109E")]
		[Address(RVA = "0xD6ACD8", Offset = "0xD6ACD8", VA = "0xD6ACD8")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x600109F")]
		[Address(RVA = "0xD6ACFC", Offset = "0xD6ACFC", VA = "0xD6ACFC")]
		private void OnTriggerStay(Collider other)
		{
		}

		[Token(Token = "0x60010A0")]
		[Address(RVA = "0xD6B09C", Offset = "0xD6B09C", VA = "0xD6B09C")]
		public PhysicalSlider()
		{
		}
	}
	[Token(Token = "0x200034C")]
	public abstract class PhysicalUIInteractable : MonoBehaviour
	{
		[Token(Token = "0x400111C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Action OnInteracted;

		[Token(Token = "0x400111D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Action<bool> OnBoolInteracted;

		[Token(Token = "0x400111E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action<float> OnFloatInteracted;

		[Token(Token = "0x60010A1")]
		[Address(RVA = "0xD6A868", Offset = "0xD6A868", VA = "0xD6A868", Slot = "4")]
		public virtual void Initialize(bool pressed)
		{
		}

		[Token(Token = "0x60010A2")]
		[Address(RVA = "0xD6B0A4", Offset = "0xD6B0A4", VA = "0xD6B0A4", Slot = "5")]
		public virtual void Initialize(float value)
		{
		}

		[Token(Token = "0x60010A3")]
		[Address(RVA = "0xD6A9B8", Offset = "0xD6A9B8", VA = "0xD6A9B8")]
		protected PhysicalUIInteractable()
		{
		}
	}
	[Token(Token = "0x200034D")]
	public class SettingsUIComponent : MonoBehaviour
	{
		[Token(Token = "0x400111F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SettingType settingType;

		[Token(Token = "0x4001120")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PhysicalUIInteractable physicalUIInteractable;

		[Token(Token = "0x60010A4")]
		[Address(RVA = "0xD6B0A8", Offset = "0xD6B0A8", VA = "0xD6B0A8")]
		protected void Awake()
		{
		}

		[Token(Token = "0x60010A5")]
		[Address(RVA = "0xD6B244", Offset = "0xD6B244", VA = "0xD6B244")]
		private void Start()
		{
		}

		[Token(Token = "0x60010A6")]
		[Address(RVA = "0xD6B38C", Offset = "0xD6B38C", VA = "0xD6B38C")]
		private void UpdateValue(bool value)
		{
		}

		[Token(Token = "0x60010A7")]
		[Address(RVA = "0xD6B404", Offset = "0xD6B404", VA = "0xD6B404")]
		private void UpdateValue(float value)
		{
		}

		[Token(Token = "0x60010A8")]
		[Address(RVA = "0xD6B484", Offset = "0xD6B484", VA = "0xD6B484")]
		public SettingsUIComponent()
		{
		}
	}
}
namespace Spiffyware.General
{
	[Serializable]
	[Token(Token = "0x200034E")]
	public class AudioClipModifierProperties
	{
		[Token(Token = "0x4001121")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float volumeScalar;

		[Token(Token = "0x60010A9")]
		[Address(RVA = "0xD6B48C", Offset = "0xD6B48C", VA = "0xD6B48C")]
		public AudioClipModifierProperties()
		{
		}
	}
	[Token(Token = "0x200034F")]
	public class AudioClipModifier
	{
		[Token(Token = "0x60010AA")]
		[Address(RVA = "0xD6B49C", Offset = "0xD6B49C", VA = "0xD6B49C")]
		public static AudioClip ModifyClipWithProperties(AudioClip clip, AudioClipModifierProperties modifierProperties, bool modifyInPlace)
		{
			return null;
		}

		[Token(Token = "0x60010AB")]
		[Address(RVA = "0xD6B744", Offset = "0xD6B744", VA = "0xD6B744")]
		private static void ModifyAudioDataAtPosition(float[] originalAudioSamples, float[] samplesToModify, int offsetFromOriginalSamples, AudioClipModifierProperties modifierProperties)
		{
		}

		[Token(Token = "0x60010AC")]
		[Address(RVA = "0xD6B7BC", Offset = "0xD6B7BC", VA = "0xD6B7BC")]
		public AudioClipModifier()
		{
		}
	}
	[Token(Token = "0x2000351")]
	public class AudioSourceClipModifierController : MonoBehaviour
	{
		[Token(Token = "0x4001125")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioSource audioSourceToModify;

		[Token(Token = "0x4001126")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool modifyInPlace;

		[Token(Token = "0x4001127")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AudioClipModifierProperties modifierProperties;

		[Token(Token = "0x60010B0")]
		[Address(RVA = "0xD6B810", Offset = "0xD6B810", VA = "0xD6B810")]
		private void Awake()
		{
		}

		[Token(Token = "0x60010B1")]
		[Address(RVA = "0xD6B814", Offset = "0xD6B814", VA = "0xD6B814")]
		[ContextMenu("Update Modifications")]
		public void UpdateClipModifications()
		{
		}

		[Token(Token = "0x60010B2")]
		[Address(RVA = "0xD6B95C", Offset = "0xD6B95C", VA = "0xD6B95C")]
		[ContextMenu("Play")]
		public void Play()
		{
		}

		[Token(Token = "0x60010B3")]
		[Address(RVA = "0xD6B978", Offset = "0xD6B978", VA = "0xD6B978")]
		public AudioSourceClipModifierController()
		{
		}
	}
	[Token(Token = "0x2000352")]
	public class VariableAudioItemAsset : ScriptableObject
	{
		[Token(Token = "0x4001128")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AnimationCurve pitchCurve;

		[Token(Token = "0x4001129")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AnimationCurve volumeCurve;

		[Token(Token = "0x60010B4")]
		[Address(RVA = "0xD6B9F4", Offset = "0xD6B9F4", VA = "0xD6B9F4")]
		[ContextMenu("Default to 1")]
		public void DefaultToValue1()
		{
		}

		[Token(Token = "0x60010B5")]
		[Address(RVA = "0xD6BAC0", Offset = "0xD6BAC0", VA = "0xD6BAC0")]
		public VariableAudioItemAsset()
		{
		}
	}
	[Token(Token = "0x2000353")]
	public class JsonDataHolder
	{
		[Token(Token = "0x400112A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<JObject> jObjects;

		[Token(Token = "0x60010B6")]
		[Address(RVA = "0xD6BAC8", Offset = "0xD6BAC8", VA = "0xD6BAC8")]
		public int RootArrayLength()
		{
			return default(int);
		}

		[Token(Token = "0x60010B7")]
		[Address(RVA = "0xD6BB10", Offset = "0xD6BB10", VA = "0xD6BB10")]
		public JsonDataHolder(string stringIn)
		{
		}

		[Token(Token = "0x60010B8")]
		public T GetValueAtPath<T>(string path, [Optional] T defaultValue, int rootIndex = 0, bool raiseWarningIfNotFound = true)
		{
			return (T)null;
		}

		[Token(Token = "0x60010B9")]
		public List<T> GetListOfValuesAtPath<T>(string path, int rootIndex = 0)
		{
			return null;
		}

		[Token(Token = "0x60010BA")]
		[Address(RVA = "0xD6C048", Offset = "0xD6C048", VA = "0xD6C048")]
		public int GetCountOfListAtPath(string path, int rootIndex = 0)
		{
			return default(int);
		}

		[Token(Token = "0x60010BB")]
		[Address(RVA = "0xD6C138", Offset = "0xD6C138", VA = "0xD6C138")]
		public List<string> GetAllFieldNamesOfObjectAtPath(string path, int rootIndex = 0)
		{
			return null;
		}

		[Token(Token = "0x60010BC")]
		[Address(RVA = "0xD6C518", Offset = "0xD6C518", VA = "0xD6C518")]
		private bool TypesMatchAndAreSupported(Type systemType, JTokenType jsonType)
		{
			return default(bool);
		}

		[Token(Token = "0x60010BD")]
		[Address(RVA = "0xD6C74C", Offset = "0xD6C74C", VA = "0xD6C74C")]
		public static string JsonStringForKeysAndObjects(string key1, object value1, [Optional] string key2, [Optional] object value2, [Optional] string key3, [Optional] object value3, [Optional] string key4, [Optional] object value4, [Optional] string key5, [Optional] object value5)
		{
			return null;
		}

		[Token(Token = "0x60010BE")]
		[Address(RVA = "0xD6C8D4", Offset = "0xD6C8D4", VA = "0xD6C8D4")]
		public static string JsonStringForDictionary(Dictionary<string, object> dictionary)
		{
			return null;
		}
	}
	[Token(Token = "0x2000354")]
	public class NotificationCenter
	{
		[Token(Token = "0x2000355")]
		private struct ObserverAction
		{
			[Token(Token = "0x400112D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Action<object> action;

			[Token(Token = "0x400112E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public object targetObject;
		}

		[Token(Token = "0x400112B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static NotificationCenter _sharedInstance;

		[Token(Token = "0x400112C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Dictionary<string, List<ObserverAction>> observerActions;

		[Token(Token = "0x17000223")]
		public static NotificationCenter SharedInstance
		{
			[Token(Token = "0x60010BF")]
			[Address(RVA = "0xD6C92C", Offset = "0xD6C92C", VA = "0xD6C92C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60010C0")]
		[Address(RVA = "0xD6C9B8", Offset = "0xD6C9B8", VA = "0xD6C9B8")]
		public NotificationCenter()
		{
		}

		[Token(Token = "0x60010C1")]
		[Address(RVA = "0xD6CA44", Offset = "0xD6CA44", VA = "0xD6CA44")]
		public void AddObserver(string keyString, object targetObject, Action callback)
		{
		}

		[Token(Token = "0x60010C2")]
		public void AddObserver<T>(string keyString, object targetObject, Action<T> callback)
		{
		}

		[Token(Token = "0x60010C3")]
		[Address(RVA = "0xD6CB44", Offset = "0xD6CB44", VA = "0xD6CB44")]
		public bool RemoveObserver(string keyString, object targetObject, bool raiseErrorIfNoneFound = true)
		{
			return default(bool);
		}

		[Token(Token = "0x60010C4")]
		[Address(RVA = "0xD6CC68", Offset = "0xD6CC68", VA = "0xD6CC68")]
		public void ClearAllAddedObservers()
		{
		}

		[Token(Token = "0x60010C5")]
		[Address(RVA = "0xD6CCB8", Offset = "0xD6CCB8", VA = "0xD6CCB8")]
		public void PostNotification(string keyString, [Optional] object objectVal, bool raiseErrorIfNoneFound = false)
		{
		}
	}
	[Token(Token = "0x2000358")]
	public class DeviceInformation
	{
		[Token(Token = "0x2000359")]
		public enum AspectRatioType
		{
			[Token(Token = "0x4001132")]
			Unknown,
			[Token(Token = "0x4001133")]
			UnknownSquarerThan4x3,
			[Token(Token = "0x4001134")]
			Ratio4x3,
			[Token(Token = "0x4001135")]
			Ratio3x2,
			[Token(Token = "0x4001136")]
			Ratio16x9,
			[Token(Token = "0x4001137")]
			Ratio812x375,
			[Token(Token = "0x4001138")]
			UnknownWiderThan16x9
		}

		[Token(Token = "0x60010CA")]
		[Address(RVA = "0xD6CEA8", Offset = "0xD6CEA8", VA = "0xD6CEA8")]
		public static AspectRatioType AspectRatioTypeForCurrentScreen()
		{
			return default(AspectRatioType);
		}

		[Token(Token = "0x60010CB")]
		[Address(RVA = "0xD6D008", Offset = "0xD6D008", VA = "0xD6D008")]
		public static bool AspectRatioIsCloseToEqual(float aspectRatioVal, float widthValue, float heightValue, bool testBothOrientations = true)
		{
			return default(bool);
		}

		[Token(Token = "0x60010CC")]
		[Address(RVA = "0xD6D0FC", Offset = "0xD6D0FC", VA = "0xD6D0FC")]
		public static float AspectRatioPercentageFrom16x9TowardsiPhoneX()
		{
			return default(float);
		}

		[Token(Token = "0x60010CD")]
		[Address(RVA = "0xD6CFDC", Offset = "0xD6CFDC", VA = "0xD6CFDC")]
		public static float AspectRatioValue()
		{
			return default(float);
		}

		[Token(Token = "0x60010CE")]
		[Address(RVA = "0xD6D1BC", Offset = "0xD6D1BC", VA = "0xD6D1BC")]
		public static bool DeviceIsTablet()
		{
			return default(bool);
		}

		[Token(Token = "0x60010CF")]
		[Address(RVA = "0xD6D1D4", Offset = "0xD6D1D4", VA = "0xD6D1D4")]
		public static bool HasNotch()
		{
			return default(bool);
		}

		[Token(Token = "0x60010D0")]
		[Address(RVA = "0xD6D200", Offset = "0xD6D200", VA = "0xD6D200")]
		public static bool OrientationIsPortrait()
		{
			return default(bool);
		}

		[Token(Token = "0x60010D1")]
		[Address(RVA = "0xD6D228", Offset = "0xD6D228", VA = "0xD6D228")]
		public DeviceInformation()
		{
		}
	}
	[Token(Token = "0x200035A")]
	public class GeometryCreator
	{
		[Token(Token = "0x200035B")]
		public enum Orientation
		{
			[Token(Token = "0x400113A")]
			Horizontal,
			[Token(Token = "0x400113B")]
			Vertical
		}

		[Token(Token = "0x200035C")]
		public enum AnchorPoint
		{
			[Token(Token = "0x400113D")]
			TopLeft,
			[Token(Token = "0x400113E")]
			TopHalf,
			[Token(Token = "0x400113F")]
			TopRight,
			[Token(Token = "0x4001140")]
			RightHalf,
			[Token(Token = "0x4001141")]
			BottomRight,
			[Token(Token = "0x4001142")]
			BottomHalf,
			[Token(Token = "0x4001143")]
			BottomLeft,
			[Token(Token = "0x4001144")]
			LeftHalf,
			[Token(Token = "0x4001145")]
			Center
		}

		[Token(Token = "0x60010D2")]
		[Address(RVA = "0xD6D230", Offset = "0xD6D230", VA = "0xD6D230")]
		public static Mesh CreatePlane()
		{
			return null;
		}

		[Token(Token = "0x60010D3")]
		[Address(RVA = "0xD6D248", Offset = "0xD6D248", VA = "0xD6D248")]
		public static Mesh CreatePlane(float width, float length, int widthSegments, int lengthSegments, Orientation orientation = Orientation.Horizontal)
		{
			return null;
		}

		[Token(Token = "0x60010D4")]
		[Address(RVA = "0xD6D658", Offset = "0xD6D658", VA = "0xD6D658")]
		public static Mesh CreateCube(Vector3 scaleDimensions, Vector3 uvDimensions)
		{
			return null;
		}

		[Token(Token = "0x60010D5")]
		[Address(RVA = "0xD6D730", Offset = "0xD6D730", VA = "0xD6D730")]
		public static Mesh CreateCubeTopDownLeftRightBackFront(Vector3 scaleDimensions, Vector2[] topDownLeftRightBackFrontUvs)
		{
			return null;
		}

		[Token(Token = "0x60010D6")]
		[Address(RVA = "0xD6DC60", Offset = "0xD6DC60", VA = "0xD6DC60")]
		public static void PrintCodeToGenerateMesh(Mesh m)
		{
		}

		[Token(Token = "0x60010D7")]
		[Address(RVA = "0xD6E68C", Offset = "0xD6E68C", VA = "0xD6E68C")]
		public GeometryCreator()
		{
		}
	}
	[Token(Token = "0x200035D")]
	public class ShapeBasedMeshModifier : MonoBehaviour
	{
		[Token(Token = "0x200035E")]
		public enum MeshModifierUpdateMode
		{
			[Token(Token = "0x400114E")]
			None,
			[Token(Token = "0x400114F")]
			AtStart,
			[Token(Token = "0x4001150")]
			AtStartAndDisable,
			[Token(Token = "0x4001151")]
			EveryFrame
		}

		[Token(Token = "0x4001146")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MeshFilter meshFilter;

		[Token(Token = "0x4001147")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Mesh mesh;

		[Token(Token = "0x4001148")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3[] meshOriginalVerts;

		[Token(Token = "0x4001149")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3[] meshModifiedVerts;

		[Token(Token = "0x400114A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public MeshModifierUpdateMode updateMode;

		[Token(Token = "0x400114B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public List<Transform> planes;

		[Token(Token = "0x400114C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public List<Transform> spheres;

		[Token(Token = "0x60010D8")]
		[Address(RVA = "0xD6E694", Offset = "0xD6E694", VA = "0xD6E694")]
		private void Start()
		{
		}

		[Token(Token = "0x60010D9")]
		[Address(RVA = "0xD6EDB0", Offset = "0xD6EDB0", VA = "0xD6EDB0")]
		private void Update()
		{
		}

		[Token(Token = "0x60010DA")]
		[Address(RVA = "0xD6E6F0", Offset = "0xD6E6F0", VA = "0xD6E6F0")]
		private void InitializeMeshInfo()
		{
		}

		[Token(Token = "0x60010DB")]
		[Address(RVA = "0xD6E874", Offset = "0xD6E874", VA = "0xD6E874")]
		public void PerformVertCalculations()
		{
		}

		[Token(Token = "0x60010DC")]
		[Address(RVA = "0xD6EDEC", Offset = "0xD6EDEC", VA = "0xD6EDEC")]
		public ShapeBasedMeshModifier()
		{
		}
	}
	[Token(Token = "0x200035F")]
	public class LiteNetLibConnectionController : INetEventListener, INetLogger
	{
		[Token(Token = "0x4001152")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private NetManager netManager;

		[Token(Token = "0x4001153")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private List<NetPeer> connectedPeers;

		[Token(Token = "0x4001154")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Dictionary<NetPeer, int> latencyByPeers;

		[Token(Token = "0x4001155")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private NetDataWriter dataWriter;

		[Token(Token = "0x4001156")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool autoConnect;

		[Token(Token = "0x4001157")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool verboseLogging;

		[Token(Token = "0x4001159")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Action<ConnectionRequest> peerDidRequestConnectionCallback;

		[Token(Token = "0x400115A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Action<NetPeer> peerDidConnectCallback;

		[Token(Token = "0x400115B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Action<NetPeer, NetDataReader> receivedDataFromPeerCallback;

		[Token(Token = "0x400115C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Action<NetPeer, string> peerDidDisconnectForReasonCallback;

		[Token(Token = "0x400115D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Action<IPEndPoint, string> connectionErrorOccurredCallback;

		[Token(Token = "0x400115E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private string connectionKeyValue;

		[Token(Token = "0x4001160")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float lastDiscoverySendTime;

		[Token(Token = "0x4001161")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float discoverySendRate;

		[Token(Token = "0x4001162")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Action<string> logCallback;

		[Token(Token = "0x17000224")]
		public int portNumber
		{
			[Token(Token = "0x60010DD")]
			[Address(RVA = "0xD6EEAC", Offset = "0xD6EEAC", VA = "0xD6EEAC")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60010DE")]
			[Address(RVA = "0xD6EEB4", Offset = "0xD6EEB4", VA = "0xD6EEB4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000225")]
		public DateTime connectionStartTime
		{
			[Token(Token = "0x60010DF")]
			[Address(RVA = "0xD6EEBC", Offset = "0xD6EEBC", VA = "0xD6EEBC")]
			[CompilerGenerated]
			get
			{
				return default(DateTime);
			}
			[Token(Token = "0x60010E0")]
			[Address(RVA = "0xD6EEC4", Offset = "0xD6EEC4", VA = "0xD6EEC4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000226")]
		public int connectionUpdateRateMilliseconds
		{
			[Token(Token = "0x60010E1")]
			[Address(RVA = "0xD6EECC", Offset = "0xD6EECC", VA = "0xD6EECC")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60010E2")]
			[Address(RVA = "0xD6EEE4", Offset = "0xD6EEE4", VA = "0xD6EEE4")]
			set
			{
			}
		}

		[Token(Token = "0x17000227")]
		public int connectedPeerCount
		{
			[Token(Token = "0x60010E3")]
			[Address(RVA = "0xD6EF54", Offset = "0xD6EF54", VA = "0xD6EF54")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60010E4")]
		[Address(RVA = "0xD6EFA0", Offset = "0xD6EFA0", VA = "0xD6EFA0")]
		public void CreateNetworkConnection(string connectionKey, int portNumberIn = 5100)
		{
		}

		[Token(Token = "0x60010E5")]
		[Address(RVA = "0xD6F280", Offset = "0xD6F280", VA = "0xD6F280")]
		public void UpdateConnection()
		{
		}

		[Token(Token = "0x60010E6")]
		[Address(RVA = "0xD6F3B8", Offset = "0xD6F3B8", VA = "0xD6F3B8")]
		public void DestroyConnection()
		{
		}

		[Token(Token = "0x60010E7")]
		[Address(RVA = "0xD6F45C", Offset = "0xD6F45C", VA = "0xD6F45C")]
		public void SendDataFromDataWriter(NetDataWriter dataWriter, DeliveryMethod reliabilityType = DeliveryMethod.ReliableOrdered)
		{
		}

		[Token(Token = "0x60010E8")]
		[Address(RVA = "0xD6F5C4", Offset = "0xD6F5C4", VA = "0xD6F5C4")]
		private string PeerIdForEndPoint(IPEndPoint endPoint)
		{
			return null;
		}

		[Token(Token = "0x60010E9")]
		[Address(RVA = "0xD6F5F4", Offset = "0xD6F5F4", VA = "0xD6F5F4", Slot = "4")]
		public void OnPeerConnected(NetPeer peer)
		{
		}

		[Token(Token = "0x60010EA")]
		[Address(RVA = "0xD6F7A0", Offset = "0xD6F7A0", VA = "0xD6F7A0", Slot = "8")]
		public void OnNetworkReceiveUnconnected(IPEndPoint remoteEndPoint, NetPacketReader reader, UnconnectedMessageType messageType)
		{
		}

		[Token(Token = "0x60010EB")]
		[Address(RVA = "0xD6FB70", Offset = "0xD6FB70", VA = "0xD6FB70", Slot = "10")]
		public void OnConnectionRequest(ConnectionRequest request)
		{
		}

		[Token(Token = "0x60010EC")]
		[Address(RVA = "0xD6FC20", Offset = "0xD6FC20", VA = "0xD6FC20", Slot = "5")]
		public void OnPeerDisconnected(NetPeer peer, DisconnectInfo disconnectInfo)
		{
		}

		[Token(Token = "0x60010ED")]
		[Address(RVA = "0xD6FD10", Offset = "0xD6FD10", VA = "0xD6FD10", Slot = "7")]
		public void OnNetworkReceive(NetPeer peer, NetPacketReader reader, byte channelNumber, DeliveryMethod deliveryMethod)
		{
		}

		[Token(Token = "0x60010EE")]
		[Address(RVA = "0xD6FD2C", Offset = "0xD6FD2C", VA = "0xD6FD2C", Slot = "6")]
		public void OnNetworkError(IPEndPoint endPoint, SocketError socketErrorCode)
		{
		}

		[Token(Token = "0x60010EF")]
		[Address(RVA = "0xD6FE44", Offset = "0xD6FE44", VA = "0xD6FE44", Slot = "9")]
		public void OnNetworkLatencyUpdate(NetPeer peer, int latency)
		{
		}

		[Token(Token = "0x60010F0")]
		[Address(RVA = "0xD6FEAC", Offset = "0xD6FEAC", VA = "0xD6FEAC")]
		public float HighestLatencyAmongPeers()
		{
			return default(float);
		}

		[Token(Token = "0x60010F1")]
		[Address(RVA = "0xD6EF4C", Offset = "0xD6EF4C", VA = "0xD6EF4C")]
		private void LogError(string logMsg)
		{
		}

		[Token(Token = "0x60010F2")]
		[Address(RVA = "0xD6F1F0", Offset = "0xD6F1F0", VA = "0xD6F1F0")]
		private void Log(string logMsg, bool error = false)
		{
		}

		[Token(Token = "0x60010F3")]
		[Address(RVA = "0xD7009C", Offset = "0xD7009C", VA = "0xD7009C", Slot = "11")]
		public void WriteNet(NetLogLevel level, string str, params object[] args)
		{
		}

		[Token(Token = "0x60010F4")]
		[Address(RVA = "0xD70114", Offset = "0xD70114", VA = "0xD70114")]
		public LiteNetLibConnectionController()
		{
		}
	}
	[Token(Token = "0x2000360")]
	public static class NetDataWriterAndReaderExtensions
	{
		[Token(Token = "0x60010F5")]
		[Address(RVA = "0xD70200", Offset = "0xD70200", VA = "0xD70200")]
		public static void Put(this NetDataWriter dataWriterIn, Rect rect)
		{
		}

		[Token(Token = "0x60010F6")]
		[Address(RVA = "0xD70288", Offset = "0xD70288", VA = "0xD70288")]
		public static Rect GetRect(this NetDataReader dataReaderIn)
		{
			return default(Rect);
		}

		[Token(Token = "0x60010F7")]
		[Address(RVA = "0xD70310", Offset = "0xD70310", VA = "0xD70310")]
		public static void Put(this NetDataWriter dataWriterIn, Color32 c)
		{
		}

		[Token(Token = "0x60010F8")]
		[Address(RVA = "0xD70378", Offset = "0xD70378", VA = "0xD70378")]
		public static Color32 GetColor32(this NetDataReader dataReaderIn)
		{
			return default(Color32);
		}

		[Token(Token = "0x60010F9")]
		[Address(RVA = "0xD703F4", Offset = "0xD703F4", VA = "0xD703F4")]
		public static Vector3 GetVector3(this NetDataReader dataReaderIn)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010FA")]
		[Address(RVA = "0xD70448", Offset = "0xD70448", VA = "0xD70448")]
		public static void Put(this NetDataWriter dataWriterIn, Vector3 vec)
		{
		}

		[Token(Token = "0x60010FB")]
		[Address(RVA = "0xD70494", Offset = "0xD70494", VA = "0xD70494")]
		public static Vector2 GetVector2(this NetDataReader dataReaderIn)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60010FC")]
		[Address(RVA = "0xD704D4", Offset = "0xD704D4", VA = "0xD704D4")]
		public static void Put(this NetDataWriter dataWriterIn, Vector2 vec)
		{
		}

		[Token(Token = "0x60010FD")]
		[Address(RVA = "0xD7050C", Offset = "0xD7050C", VA = "0xD7050C")]
		public static Quaternion GetQuaternion(this NetDataReader dataReaderIn)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60010FE")]
		[Address(RVA = "0xD7057C", Offset = "0xD7057C", VA = "0xD7057C")]
		public static void Put(this NetDataWriter dataWriterIn, Quaternion quaternion)
		{
		}
	}
	[Token(Token = "0x2000361")]
	public class ConstantRateBezierCurve
	{
		[Token(Token = "0x4001163")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private float _length;

		[Token(Token = "0x4001164")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private bool _dirty;

		[Token(Token = "0x4001165")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Vector3 _p0;

		[Token(Token = "0x4001166")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Vector3 _p1;

		[Token(Token = "0x4001167")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 _p2;

		[Token(Token = "0x4001168")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Vector3 _p3;

		[Token(Token = "0x4001169")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3 a;

		[Token(Token = "0x400116A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Vector3 aa;

		[Token(Token = "0x400116B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 bb;

		[Token(Token = "0x400116C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector3 cc;

		[Token(Token = "0x400116D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private int len;

		[Token(Token = "0x400116E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float[] arcLengths;

		[Token(Token = "0x17000228")]
		public float Length
		{
			[Token(Token = "0x60010FF")]
			[Address(RVA = "0xD705E4", Offset = "0xD705E4", VA = "0xD705E4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001100")]
			[Address(RVA = "0xD70658", Offset = "0xD70658", VA = "0xD70658")]
			private set
			{
			}
		}

		[Token(Token = "0x17000229")]
		public Vector3 p0
		{
			[Token(Token = "0x6001101")]
			[Address(RVA = "0xD70660", Offset = "0xD70660", VA = "0xD70660")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001102")]
			[Address(RVA = "0xD7066C", Offset = "0xD7066C", VA = "0xD7066C")]
			set
			{
			}
		}

		[Token(Token = "0x1700022A")]
		public Vector3 p1
		{
			[Token(Token = "0x6001103")]
			[Address(RVA = "0xD70680", Offset = "0xD70680", VA = "0xD70680")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001104")]
			[Address(RVA = "0xD7068C", Offset = "0xD7068C", VA = "0xD7068C")]
			set
			{
			}
		}

		[Token(Token = "0x1700022B")]
		public Vector3 p2
		{
			[Token(Token = "0x6001105")]
			[Address(RVA = "0xD706A0", Offset = "0xD706A0", VA = "0xD706A0")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001106")]
			[Address(RVA = "0xD706AC", Offset = "0xD706AC", VA = "0xD706AC")]
			set
			{
			}
		}

		[Token(Token = "0x1700022C")]
		public Vector3 p3
		{
			[Token(Token = "0x6001107")]
			[Address(RVA = "0xD706C0", Offset = "0xD706C0", VA = "0xD706C0")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001108")]
			[Address(RVA = "0xD706CC", Offset = "0xD706CC", VA = "0xD706CC")]
			set
			{
			}
		}

		[Token(Token = "0x1700022D")]
		public Vector3[] Points
		{
			[Token(Token = "0x6001109")]
			[Address(RVA = "0xD706E0", Offset = "0xD706E0", VA = "0xD706E0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700022E")]
		public float precision
		{
			[Token(Token = "0x600110A")]
			[Address(RVA = "0xD70798", Offset = "0xD70798", VA = "0xD70798")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600110B")]
			[Address(RVA = "0xD707A0", Offset = "0xD707A0", VA = "0xD707A0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x600110C")]
		[Address(RVA = "0xD707A8", Offset = "0xD707A8", VA = "0xD707A8")]
		public ConstantRateBezierCurve(Vector3 a, Vector3 b, Vector3 c, Vector3 d, float precisionIn = 0.04f)
		{
		}

		[Token(Token = "0x600110D")]
		[Address(RVA = "0xD70AE4", Offset = "0xD70AE4", VA = "0xD70AE4")]
		public void ScaleBy(float scalar)
		{
		}

		[Token(Token = "0x600110E")]
		[Address(RVA = "0xD70B14", Offset = "0xD70B14", VA = "0xD70B14")]
		public void ScaleBy(Vector3 scalar)
		{
		}

		[Token(Token = "0x600110F")]
		[Address(RVA = "0xD7085C", Offset = "0xD7085C", VA = "0xD7085C")]
		private void RecalculateBezier(Vector3 a, Vector3 b, Vector3 c, Vector3 d, float precisionIn)
		{
		}

		[Token(Token = "0x6001110")]
		[Address(RVA = "0xD70C6C", Offset = "0xD70C6C", VA = "0xD70C6C")]
		private float Map(float u)
		{
			return default(float);
		}

		[Token(Token = "0x6001111")]
		[Address(RVA = "0xD70C14", Offset = "0xD70C14", VA = "0xD70C14")]
		private Vector3 BezierPoint(float t)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001112")]
		[Address(RVA = "0xD705FC", Offset = "0xD705FC", VA = "0xD705FC")]
		private void RecalculateBezierIfNeeded()
		{
		}

		[Token(Token = "0x6001113")]
		[Address(RVA = "0xD70D64", Offset = "0xD70D64", VA = "0xD70D64")]
		public Vector3 Point(float t)
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x2000362")]
	public class PathBezierSectionController : PathSectionController
	{
		[Token(Token = "0x4001170")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform bezierCurvePoint0;

		[Token(Token = "0x4001171")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform bezierCurvePoint1;

		[Token(Token = "0x4001172")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform bezierCurvePoint2;

		[Token(Token = "0x4001173")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform bezierCurvePoint3;

		[Token(Token = "0x4001174")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float bezierCurvePrecision;

		[Token(Token = "0x4001175")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private ConstantRateBezierCurve bezierCurve;

		[Token(Token = "0x1700022F")]
		public Vector3 startUpVector
		{
			[Token(Token = "0x6001114")]
			[Address(RVA = "0xD70D94", Offset = "0xD70D94", VA = "0xD70D94")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000230")]
		public Vector3 endUpVector
		{
			[Token(Token = "0x6001115")]
			[Address(RVA = "0xD70E58", Offset = "0xD70E58", VA = "0xD70E58")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6001116")]
		[Address(RVA = "0xD70F1C", Offset = "0xD70F1C", VA = "0xD70F1C")]
		private void CheckBezierCurve()
		{
		}

		[Token(Token = "0x6001117")]
		[Address(RVA = "0xD71384", Offset = "0xD71384", VA = "0xD71384")]
		private Transform CreateNewBezierPoint(Vector3 startLocalPos)
		{
			return null;
		}

		[Token(Token = "0x6001118")]
		[Address(RVA = "0xD71548", Offset = "0xD71548", VA = "0xD71548", Slot = "4")]
		public override float SectionLength()
		{
			return default(float);
		}

		[Token(Token = "0x6001119")]
		[Address(RVA = "0xD71574", Offset = "0xD71574", VA = "0xD71574", Slot = "5")]
		public override Vector3 PositionForDistanceIntoSection(float distanceIn)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600111A")]
		[Address(RVA = "0xD715AC", Offset = "0xD715AC", VA = "0xD715AC", Slot = "8")]
		public override float YRotationOffsetForDistance(float dist)
		{
			return default(float);
		}

		[Token(Token = "0x600111B")]
		[Address(RVA = "0xD719E8", Offset = "0xD719E8", VA = "0xD719E8", Slot = "6")]
		public override Quaternion RotationForDistanceIntoSection(float distanceIn)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600111C")]
		[Address(RVA = "0xD71BD4", Offset = "0xD71BD4", VA = "0xD71BD4", Slot = "9")]
		public override void ScaleBy(float scalar)
		{
		}

		[Token(Token = "0x600111D")]
		[Address(RVA = "0xD71C04", Offset = "0xD71C04", VA = "0xD71C04")]
		public void ScaleByVector3(Vector3 scalar)
		{
		}

		[Token(Token = "0x600111E")]
		[Address(RVA = "0xD71C4C", Offset = "0xD71C4C", VA = "0xD71C4C")]
		public PathBezierSectionController()
		{
		}
	}
	[Token(Token = "0x2000363")]
	public class PathSectionCollectionController : PathSectionController
	{
		[Token(Token = "0x2000364")]
		private struct PathSectionAndSubPercentage
		{
			[Token(Token = "0x4001179")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public PathSectionController pathSection;

			[Token(Token = "0x400117A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public float subPercentage;

			[Token(Token = "0x600112B")]
			[Address(RVA = "0xD728EC", Offset = "0xD728EC", VA = "0xD728EC")]
			public PathSectionAndSubPercentage(PathSectionController pathSection, float subPercentage)
			{
			}
		}

		[Token(Token = "0x4001176")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<PathSectionController> pathSubSections;

		[Token(Token = "0x4001177")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool makeIntoLoop;

		[Token(Token = "0x4001178")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float loopifyLastSectionPercentage;

		[Token(Token = "0x600111F")]
		[Address(RVA = "0xD71CDC", Offset = "0xD71CDC", VA = "0xD71CDC")]
		private void GrabPathSectionsFromChildren()
		{
		}

		[Token(Token = "0x6001120")]
		[Address(RVA = "0xD720BC", Offset = "0xD720BC", VA = "0xD720BC", Slot = "4")]
		public override float SectionLength()
		{
			return default(float);
		}

		[Token(Token = "0x6001121")]
		[Address(RVA = "0xD72228", Offset = "0xD72228", VA = "0xD72228", Slot = "5")]
		public override Vector3 PositionForDistanceIntoSection(float distanceIn)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001122")]
		[Address(RVA = "0xD72654", Offset = "0xD72654", VA = "0xD72654", Slot = "6")]
		public override Quaternion RotationForDistanceIntoSection(float distanceIn)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001123")]
		[Address(RVA = "0xD72848", Offset = "0xD72848", VA = "0xD72848", Slot = "7")]
		public override float WidthForDistanceIntoSection(float distanceIn)
		{
			return default(float);
		}

		[Token(Token = "0x6001124")]
		[Address(RVA = "0xD72404", Offset = "0xD72404", VA = "0xD72404")]
		private PathSectionAndSubPercentage PathSubSectionAndSubPercentageForDistance(float dist)
		{
			return default(PathSectionAndSubPercentage);
		}

		[Token(Token = "0x6001125")]
		[Address(RVA = "0xD72914", Offset = "0xD72914", VA = "0xD72914", Slot = "8")]
		public override float YRotationOffsetForDistance(float dist)
		{
			return default(float);
		}

		[Token(Token = "0x6001126")]
		[Address(RVA = "0xD72B5C", Offset = "0xD72B5C", VA = "0xD72B5C", Slot = "9")]
		public override void ScaleBy(float scalar)
		{
		}

		[Token(Token = "0x6001127")]
		[Address(RVA = "0xD72B60", Offset = "0xD72B60", VA = "0xD72B60")]
		[ContextMenu("Rectify Sub Paths")]
		public void RectifySubPaths()
		{
		}

		[Token(Token = "0x6001128")]
		[Address(RVA = "0xD72DC4", Offset = "0xD72DC4", VA = "0xD72DC4")]
		[ContextMenu("Add Straight Path")]
		public void AddStraightPath()
		{
		}

		[Token(Token = "0x6001129")]
		[Address(RVA = "0xD72F18", Offset = "0xD72F18", VA = "0xD72F18")]
		[ContextMenu("Add Bezier Path")]
		public void AddBezierPath()
		{
		}

		[Token(Token = "0x600112A")]
		[Address(RVA = "0xD7306C", Offset = "0xD7306C", VA = "0xD7306C")]
		public PathSectionCollectionController()
		{
		}
	}
	[Token(Token = "0x2000365")]
	public abstract class PathSectionController : MonoBehaviour
	{
		[Token(Token = "0x400117B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool drawGizmoAlways;

		[Token(Token = "0x400117C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float[] widthValues;

		[Token(Token = "0x17000231")]
		public float startWidth
		{
			[Token(Token = "0x600112F")]
			[Address(RVA = "0xD73104", Offset = "0xD73104", VA = "0xD73104")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001130")]
			[Address(RVA = "0xD72D30", Offset = "0xD72D30", VA = "0xD72D30")]
			set
			{
			}
		}

		[Token(Token = "0x17000232")]
		public float endWidth
		{
			[Token(Token = "0x6001131")]
			[Address(RVA = "0xD72D08", Offset = "0xD72D08", VA = "0xD72D08")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001132")]
			[Address(RVA = "0xD73114", Offset = "0xD73114", VA = "0xD73114")]
			set
			{
			}
		}

		[Token(Token = "0x600112C")]
		public abstract float SectionLength();

		[Token(Token = "0x600112D")]
		public abstract Vector3 PositionForDistanceIntoSection(float distanceIn);

		[Token(Token = "0x600112E")]
		public abstract Quaternion RotationForDistanceIntoSection(float distanceIn);

		[Token(Token = "0x6001133")]
		[Address(RVA = "0xD731F8", Offset = "0xD731F8", VA = "0xD731F8", Slot = "7")]
		public virtual float WidthForDistanceIntoSection(float distanceIn)
		{
			return default(float);
		}

		[Token(Token = "0x6001134")]
		[Address(RVA = "0xD73278", Offset = "0xD73278", VA = "0xD73278", Slot = "8")]
		public virtual float YRotationOffsetForDistance(float dist)
		{
			return default(float);
		}

		[Token(Token = "0x6001135")]
		[Address(RVA = "0xD73280", Offset = "0xD73280", VA = "0xD73280")]
		public Vector3 EndPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001136")]
		[Address(RVA = "0xD732A8", Offset = "0xD732A8", VA = "0xD732A8")]
		public Quaternion EndRotation()
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001137")]
		[Address(RVA = "0xD732D0", Offset = "0xD732D0", VA = "0xD732D0")]
		public Quaternion StartRotation()
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001138")]
		public abstract void ScaleBy(float scalar);

		[Token(Token = "0x6001139")]
		[Address(RVA = "0xD732E0", Offset = "0xD732E0", VA = "0xD732E0")]
		public float DistanceValueForPosition(Vector3 worldPosition)
		{
			return default(float);
		}

		[Token(Token = "0x600113A")]
		[Address(RVA = "0xD733A8", Offset = "0xD733A8", VA = "0xD733A8")]
		private float ClosestDistanceValueWithinRangeForPosition(float startDist, float endDist, int testDivisions, Vector3 position)
		{
			return default(float);
		}

		[Token(Token = "0x600113B")]
		[Address(RVA = "0xD734B4", Offset = "0xD734B4", VA = "0xD734B4")]
		public float WrapAroundValueForDistance(float dist)
		{
			return default(float);
		}

		[Token(Token = "0x600113C")]
		[Address(RVA = "0xD73500", Offset = "0xD73500", VA = "0xD73500")]
		private void PerformGizmoDrawing()
		{
		}

		[Token(Token = "0x600113D")]
		[Address(RVA = "0xD71C5C", Offset = "0xD71C5C", VA = "0xD71C5C")]
		protected PathSectionController()
		{
		}
	}
	[Token(Token = "0x2000366")]
	public class PathStraightSectionController : PathSectionController
	{
		[Token(Token = "0x400117D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float sectionLength;

		[Token(Token = "0x400117E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float twistAngle;

		[Token(Token = "0x600113E")]
		[Address(RVA = "0xD737EC", Offset = "0xD737EC", VA = "0xD737EC", Slot = "4")]
		public override float SectionLength()
		{
			return default(float);
		}

		[Token(Token = "0x600113F")]
		[Address(RVA = "0xD737F4", Offset = "0xD737F4", VA = "0xD737F4", Slot = "5")]
		public override Vector3 PositionForDistanceIntoSection(float distanceIn)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001140")]
		[Address(RVA = "0xD7386C", Offset = "0xD7386C", VA = "0xD7386C", Slot = "6")]
		public override Quaternion RotationForDistanceIntoSection(float distanceIn)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001141")]
		[Address(RVA = "0xD73998", Offset = "0xD73998", VA = "0xD73998", Slot = "9")]
		public override void ScaleBy(float scalar)
		{
		}

		[Token(Token = "0x6001142")]
		[Address(RVA = "0xD739A8", Offset = "0xD739A8", VA = "0xD739A8")]
		public PathStraightSectionController()
		{
		}
	}
	[Token(Token = "0x2000367")]
	public class BaseGeneralItemInspectable : BaseMonoBehaviour
	{
		[Token(Token = "0x6001143")]
		[Address(RVA = "0xD739B4", Offset = "0xD739B4", VA = "0xD739B4", Slot = "4")]
		public virtual List<string> AllSupportedProperties()
		{
			return null;
		}

		[Token(Token = "0x6001144")]
		[Address(RVA = "0xD73A24", Offset = "0xD73A24", VA = "0xD73A24", Slot = "5")]
		public virtual List<string> PropertiesAndUIToShow()
		{
			return null;
		}

		[Token(Token = "0x6001145")]
		[Address(RVA = "0xD73A94", Offset = "0xD73A94", VA = "0xD73A94")]
		public BaseGeneralItemInspectable()
		{
		}
	}
	[Token(Token = "0x2000368")]
	public class BaseMonoBehaviour : MonoBehaviour
	{
		[Token(Token = "0x200036A")]
		[CompilerGenerated]
		private sealed class <co_PerformActionAfterDelay>d__2 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001181")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001182")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001183")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float delay;

			[Token(Token = "0x4001184")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Action actionToPerform;

			[Token(Token = "0x17000233")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001155")]
				[Address(RVA = "0xD7405C", Offset = "0xD7405C", VA = "0xD7405C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000234")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001157")]
				[Address(RVA = "0xD740A4", Offset = "0xD740A4", VA = "0xD740A4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001152")]
			[Address(RVA = "0xD73BCC", Offset = "0xD73BCC", VA = "0xD73BCC")]
			[DebuggerHidden]
			public <co_PerformActionAfterDelay>d__2(int <>1__state)
			{
			}

			[Token(Token = "0x6001153")]
			[Address(RVA = "0xD73F94", Offset = "0xD73F94", VA = "0xD73F94", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001154")]
			[Address(RVA = "0xD73F98", Offset = "0xD73F98", VA = "0xD73F98", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001156")]
			[Address(RVA = "0xD74064", Offset = "0xD74064", VA = "0xD74064", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200036B")]
		[CompilerGenerated]
		private sealed class <co_PerformActionWhileTrue>d__4 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001185")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001186")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001187")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Func<bool> actionToPerform;

			[Token(Token = "0x17000235")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600115B")]
				[Address(RVA = "0xD74114", Offset = "0xD74114", VA = "0xD74114", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000236")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600115D")]
				[Address(RVA = "0xD7415C", Offset = "0xD7415C", VA = "0xD7415C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001158")]
			[Address(RVA = "0xD73C88", Offset = "0xD73C88", VA = "0xD73C88")]
			[DebuggerHidden]
			public <co_PerformActionWhileTrue>d__4(int <>1__state)
			{
			}

			[Token(Token = "0x6001159")]
			[Address(RVA = "0xD740AC", Offset = "0xD740AC", VA = "0xD740AC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600115A")]
			[Address(RVA = "0xD740B0", Offset = "0xD740B0", VA = "0xD740B0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600115C")]
			[Address(RVA = "0xD7411C", Offset = "0xD7411C", VA = "0xD7411C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200036C")]
		[CompilerGenerated]
		private sealed class <co_PerformActionAfterFrameCountDelay>d__6 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001188")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001189")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400118A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public int frameCount;

			[Token(Token = "0x400118B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Action actionToPerform;

			[Token(Token = "0x400118C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private int <i>5__2;

			[Token(Token = "0x17000237")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001161")]
				[Address(RVA = "0xD741F4", Offset = "0xD741F4", VA = "0xD741F4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000238")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001163")]
				[Address(RVA = "0xD7423C", Offset = "0xD7423C", VA = "0xD7423C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600115E")]
			[Address(RVA = "0xD73DD8", Offset = "0xD73DD8", VA = "0xD73DD8")]
			[DebuggerHidden]
			public <co_PerformActionAfterFrameCountDelay>d__6(int <>1__state)
			{
			}

			[Token(Token = "0x600115F")]
			[Address(RVA = "0xD74164", Offset = "0xD74164", VA = "0xD74164", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001160")]
			[Address(RVA = "0xD74168", Offset = "0xD74168", VA = "0xD74168", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001162")]
			[Address(RVA = "0xD741FC", Offset = "0xD741FC", VA = "0xD741FC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200036D")]
		[CompilerGenerated]
		private sealed class <co_WaitOnBoolMethodToPerformAction>d__8 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400118D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400118E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400118F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Func<bool> methodToWaitOnWhileReturnsFalse;

			[Token(Token = "0x4001190")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Action actionToPerform;

			[Token(Token = "0x17000239")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001167")]
				[Address(RVA = "0xD742C4", Offset = "0xD742C4", VA = "0xD742C4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700023A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001169")]
				[Address(RVA = "0xD7430C", Offset = "0xD7430C", VA = "0xD7430C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001164")]
			[Address(RVA = "0xD73F6C", Offset = "0xD73F6C", VA = "0xD73F6C")]
			[DebuggerHidden]
			public <co_WaitOnBoolMethodToPerformAction>d__8(int <>1__state)
			{
			}

			[Token(Token = "0x6001165")]
			[Address(RVA = "0xD74244", Offset = "0xD74244", VA = "0xD74244", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001166")]
			[Address(RVA = "0xD74248", Offset = "0xD74248", VA = "0xD74248", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001168")]
			[Address(RVA = "0xD742CC", Offset = "0xD742CC", VA = "0xD742CC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x6001146")]
		[Address(RVA = "0xD73AA4", Offset = "0xD73AA4", VA = "0xD73AA4")]
		public Coroutine PerformActionAfterDelay(Action actionToPerform, float delay, [Optional] MonoBehaviour objectToCallOn)
		{
			return null;
		}

		[Token(Token = "0x6001147")]
		protected void PerformActionWithParameterAfterDelay<T>(Action<T> actionToPerform, T param, float delay)
		{
		}

		[Token(Token = "0x6001148")]
		[Address(RVA = "0xD73B48", Offset = "0xD73B48", VA = "0xD73B48")]
		[IteratorStateMachine(typeof(<co_PerformActionAfterDelay>d__2))]
		protected IEnumerator co_PerformActionAfterDelay(Action actionToPerform, float delay)
		{
			return null;
		}

		[Token(Token = "0x6001149")]
		[Address(RVA = "0xD73BF4", Offset = "0xD73BF4", VA = "0xD73BF4")]
		public void PerformActionWhileTrue(Func<bool> actionToPerform)
		{
		}

		[Token(Token = "0x600114A")]
		[Address(RVA = "0xD73C14", Offset = "0xD73C14", VA = "0xD73C14")]
		[IteratorStateMachine(typeof(<co_PerformActionWhileTrue>d__4))]
		private IEnumerator co_PerformActionWhileTrue(Func<bool> actionToPerform)
		{
			return null;
		}

		[Token(Token = "0x600114B")]
		[Address(RVA = "0xD73CB0", Offset = "0xD73CB0", VA = "0xD73CB0")]
		protected Coroutine PerformActionAfterFrameCountDelay(Action actionToPerform, int frameCount, [Optional] MonoBehaviour objectToCallOn)
		{
			return null;
		}

		[Token(Token = "0x600114C")]
		[Address(RVA = "0xD73D54", Offset = "0xD73D54", VA = "0xD73D54")]
		[IteratorStateMachine(typeof(<co_PerformActionAfterFrameCountDelay>d__6))]
		protected IEnumerator co_PerformActionAfterFrameCountDelay(Action actionToPerform, int frameCount)
		{
			return null;
		}

		[Token(Token = "0x600114D")]
		[Address(RVA = "0xD73E00", Offset = "0xD73E00", VA = "0xD73E00")]
		protected Coroutine WaitOnBoolMethodToPerformAction(Func<bool> methodToWaitOnWhileReturnsFalse, Action actionToPerform, [Optional] MonoBehaviour objectToCallOn)
		{
			return null;
		}

		[Token(Token = "0x600114E")]
		[Address(RVA = "0xD73EDC", Offset = "0xD73EDC", VA = "0xD73EDC")]
		[IteratorStateMachine(typeof(<co_WaitOnBoolMethodToPerformAction>d__8))]
		protected IEnumerator co_WaitOnBoolMethodToPerformAction(Func<bool> methodToWaitOnWhileReturnsFalse, Action actionToPerform)
		{
			return null;
		}

		[Token(Token = "0x600114F")]
		[Address(RVA = "0xD73A9C", Offset = "0xD73A9C", VA = "0xD73A9C")]
		public BaseMonoBehaviour()
		{
		}
	}
	[Token(Token = "0x200036E")]
	public class MonoBehaviourCallbacksController : MonoBehaviour
	{
		[Token(Token = "0x4001191")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Action<MonoBehaviourCallbacksController> onWillRenderObjectCallback;

		[Token(Token = "0x4001192")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Action<MonoBehaviourCallbacksController> onDestroyCallback;

		[Token(Token = "0x4001193")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action<MonoBehaviourCallbacksController> onDisabledCallback;

		[Token(Token = "0x4001194")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Action<MonoBehaviourCallbacksController> onEnabledCallback;

		[Token(Token = "0x600116A")]
		[Address(RVA = "0xD74314", Offset = "0xD74314", VA = "0xD74314")]
		private void OnWillRenderObject()
		{
		}

		[Token(Token = "0x600116B")]
		[Address(RVA = "0xD74334", Offset = "0xD74334", VA = "0xD74334")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600116C")]
		[Address(RVA = "0xD74354", Offset = "0xD74354", VA = "0xD74354")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600116D")]
		[Address(RVA = "0xD74374", Offset = "0xD74374", VA = "0xD74374")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600116E")]
		[Address(RVA = "0xD74394", Offset = "0xD74394", VA = "0xD74394")]
		public MonoBehaviourCallbacksController()
		{
		}
	}
	[Token(Token = "0x200036F")]
	public class MonoBehaviourPhysicsCallbackController : BaseMonoBehaviour
	{
		[Token(Token = "0x4001195")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool logEvents;

		[Token(Token = "0x4001196")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Action<MonoBehaviourPhysicsCallbackController, Collider> onTriggerEnterCallback;

		[Token(Token = "0x4001197")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action<MonoBehaviourPhysicsCallbackController, Collider> onTriggerExitCallback;

		[Token(Token = "0x4001198")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Action<MonoBehaviourPhysicsCallbackController, Collision> onCollisionEnterCallback;

		[Token(Token = "0x4001199")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Action<MonoBehaviourPhysicsCallbackController, Collision> onCollisionExitCallback;

		[Token(Token = "0x600116F")]
		[Address(RVA = "0xD7439C", Offset = "0xD7439C", VA = "0xD7439C")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6001170")]
		[Address(RVA = "0xD74404", Offset = "0xD74404", VA = "0xD74404")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6001171")]
		[Address(RVA = "0xD74468", Offset = "0xD74468", VA = "0xD74468")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6001172")]
		[Address(RVA = "0xD74508", Offset = "0xD74508", VA = "0xD74508")]
		private void OnCollisionExit(Collision collision)
		{
		}

		[Token(Token = "0x6001173")]
		[Address(RVA = "0xD74400", Offset = "0xD74400", VA = "0xD74400")]
		private void Log(string s, UnityEngine.Object paramVal)
		{
		}

		[Token(Token = "0x6001174")]
		[Address(RVA = "0xD74504", Offset = "0xD74504", VA = "0xD74504")]
		private void Log(string s, object paramVal)
		{
		}

		[Token(Token = "0x6001175")]
		[Address(RVA = "0xD7456C", Offset = "0xD7456C", VA = "0xD7456C")]
		public MonoBehaviourPhysicsCallbackController()
		{
		}
	}
	[Token(Token = "0x2000370")]
	public abstract class MonoBehaviourSingleton<T> : BaseMonoBehaviour where T : MonoBehaviour
	{
		[Token(Token = "0x400119A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected static T _sharedInstance;

		[Token(Token = "0x1700023B")]
		protected virtual bool shouldDestroyDuplicateSingletons
		{
			[Token(Token = "0x6001176")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700023C")]
		public static T SharedInstance
		{
			[Token(Token = "0x6001178")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001177")]
		public static bool SharedInstanceHasValue()
		{
			return default(bool);
		}

		[Token(Token = "0x6001179")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x600117A")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600117B")]
		protected abstract void DidAwake();

		[Token(Token = "0x600117C")]
		protected MonoBehaviourSingleton()
		{
		}
	}
	[Token(Token = "0x2000371")]
	public static class UnityGeneralExtensions
	{
		[Token(Token = "0x600117D")]
		[Address(RVA = "0xD74574", Offset = "0xD74574", VA = "0xD74574")]
		public static void SFSetEmissionRate(this ParticleSystem particleSystemIn, float newRate)
		{
		}

		[Token(Token = "0x600117E")]
		[Address(RVA = "0xD745D8", Offset = "0xD745D8", VA = "0xD745D8")]
		public static void SFSetLooped(this ParticleSystem particleSystemIn, bool looped)
		{
		}

		[Token(Token = "0x600117F")]
		[Address(RVA = "0xD74618", Offset = "0xD74618", VA = "0xD74618")]
		public static Color SFWithAlpha(this Color colorIn, float alpha)
		{
			return default(Color);
		}
	}
	[Token(Token = "0x2000372")]
	public class UnityUIBehaviour : BaseMonoBehaviour
	{
		[Token(Token = "0x400119B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private RectTransform _rectTransform;

		[Token(Token = "0x400119C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private CanvasGroup _canvasGroup;

		[Token(Token = "0x1700023D")]
		public RectTransform rectTransform
		{
			[Token(Token = "0x6001180")]
			[Address(RVA = "0xD74620", Offset = "0xD74620", VA = "0xD74620")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700023E")]
		public CanvasGroup canvasGroup
		{
			[Token(Token = "0x6001181")]
			[Address(RVA = "0xD746EC", Offset = "0xD746EC", VA = "0xD746EC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001182")]
		[Address(RVA = "0xD74820", Offset = "0xD74820", VA = "0xD74820")]
		public void SetAnchorToTopCenter(bool includePivot)
		{
		}

		[Token(Token = "0x6001183")]
		[Address(RVA = "0xD748A4", Offset = "0xD748A4", VA = "0xD748A4")]
		public UnityUIBehaviour()
		{
		}
	}
	[Token(Token = "0x2000373")]
	public class UnityUIImageButtonStateMatcher : MonoBehaviour
	{
		[Token(Token = "0x400119D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Button button;

		[Token(Token = "0x400119E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private List<Image> images;

		[Token(Token = "0x6001184")]
		[Address(RVA = "0xD748AC", Offset = "0xD748AC", VA = "0xD748AC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001185")]
		[Address(RVA = "0xD74994", Offset = "0xD74994", VA = "0xD74994")]
		private void Update()
		{
		}

		[Token(Token = "0x6001186")]
		[Address(RVA = "0xD74CA0", Offset = "0xD74CA0", VA = "0xD74CA0")]
		public UnityUIImageButtonStateMatcher()
		{
		}
	}
	[Token(Token = "0x2000374")]
	public class MathUtility
	{
		[Token(Token = "0x400119F")]
		public const float kFactor_MPH_to_MPS = 0.447027f;

		[Token(Token = "0x40011A0")]
		public const float kFactor_MPS_to_MPH = 2.237f;

		[Token(Token = "0x40011A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static uint _pseudoRandomBaseSeed;

		[Token(Token = "0x40011A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static uint _pseudoRandomBaseCount;

		[Token(Token = "0x40011A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static System.Random _random;

		[Token(Token = "0x6001187")]
		[Address(RVA = "0xD74CA8", Offset = "0xD74CA8", VA = "0xD74CA8")]
		public static int BitMaskFor32BitIndexes(int bitIndex)
		{
			return default(int);
		}

		[Token(Token = "0x6001188")]
		[Address(RVA = "0xD74CB4", Offset = "0xD74CB4", VA = "0xD74CB4")]
		public static int BitMaskFor32BitIndexes(params int[] intVals)
		{
			return default(int);
		}

		[Token(Token = "0x6001189")]
		[Address(RVA = "0xD74D78", Offset = "0xD74D78", VA = "0xD74D78")]
		public static bool BitMaskIsTrueAt32BitIndex(int bitMask, int bitIndex)
		{
			return default(bool);
		}

		[Token(Token = "0x600118A")]
		[Address(RVA = "0xD74D8C", Offset = "0xD74D8C", VA = "0xD74D8C")]
		public static int BitMaskIsTrueAt32BitIndex1or0(int bitMask, int bitIndex)
		{
			return default(int);
		}

		[Token(Token = "0x600118B")]
		[Address(RVA = "0xD74DF8", Offset = "0xD74DF8", VA = "0xD74DF8")]
		public static LayerMask LayerMaskWithLayers(params int[] layers)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x600118C")]
		[Address(RVA = "0xD74E70", Offset = "0xD74E70", VA = "0xD74E70")]
		public static ushort PercentageFloatToUShort(float percentageFloat)
		{
			return default(ushort);
		}

		[Token(Token = "0x600118D")]
		[Address(RVA = "0xD74EA4", Offset = "0xD74EA4", VA = "0xD74EA4")]
		public static float UShortToPercentageFloat(ushort shortVal)
		{
			return default(float);
		}

		[Token(Token = "0x600118E")]
		[Address(RVA = "0xD74ED0", Offset = "0xD74ED0", VA = "0xD74ED0")]
		public static byte PercentageFloatToByte(float percentageFloat)
		{
			return default(byte);
		}

		[Token(Token = "0x600118F")]
		[Address(RVA = "0xD74F04", Offset = "0xD74F04", VA = "0xD74F04")]
		public static float ByteToPercentageFloat(byte val)
		{
			return default(float);
		}

		[Token(Token = "0x6001190")]
		[Address(RVA = "0xD74F30", Offset = "0xD74F30", VA = "0xD74F30")]
		public static string ByteArrayToString(byte[] ba, bool addSpacesBetweenBytes = false)
		{
			return null;
		}

		[Token(Token = "0x6001191")]
		[Address(RVA = "0xD75080", Offset = "0xD75080", VA = "0xD75080")]
		public static byte[] StringToByteArray(string hex)
		{
			return null;
		}

		[Token(Token = "0x6001192")]
		[Address(RVA = "0xD75188", Offset = "0xD75188", VA = "0xD75188")]
		public static Rect RectWithCenterAndSize(float centerX, float centerY, float width, float height)
		{
			return default(Rect);
		}

		[Token(Token = "0x6001193")]
		[Address(RVA = "0xD751C8", Offset = "0xD751C8", VA = "0xD751C8")]
		public static float AngleInDegreesBetweenVectors(Vector2 vec1, Vector2 vec2, bool clockwiseNegative = false)
		{
			return default(float);
		}

		[Token(Token = "0x6001194")]
		[Address(RVA = "0xD75404", Offset = "0xD75404", VA = "0xD75404")]
		public static float AngleInDegreesForVector(Vector2 vec)
		{
			return default(float);
		}

		[Token(Token = "0x6001195")]
		[Address(RVA = "0xD75460", Offset = "0xD75460", VA = "0xD75460")]
		public static Vector2 VectorForAngleInDegrees(float angleInDegrees)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001196")]
		[Address(RVA = "0xD75488", Offset = "0xD75488", VA = "0xD75488")]
		public static float AngleInRange0to360(float angleInDegrees)
		{
			return default(float);
		}

		[Token(Token = "0x6001197")]
		[Address(RVA = "0xD754D4", Offset = "0xD754D4", VA = "0xD754D4")]
		public static void SetRandomSeed(int seed)
		{
		}

		[Token(Token = "0x6001198")]
		[Address(RVA = "0xD754DC", Offset = "0xD754DC", VA = "0xD754DC")]
		public static bool RandomBool()
		{
			return default(bool);
		}

		[Token(Token = "0x6001199")]
		[Address(RVA = "0xD754FC", Offset = "0xD754FC", VA = "0xD754FC")]
		public static int Random1OrNeg1()
		{
			return default(int);
		}

		[Token(Token = "0x600119A")]
		[Address(RVA = "0xD75560", Offset = "0xD75560", VA = "0xD75560")]
		public static int RandomPositiveInt()
		{
			return default(int);
		}

		[Token(Token = "0x600119B")]
		[Address(RVA = "0xD75598", Offset = "0xD75598", VA = "0xD75598")]
		public static float Random0to1()
		{
			return default(float);
		}

		[Token(Token = "0x600119C")]
		[Address(RVA = "0xD755A0", Offset = "0xD755A0", VA = "0xD755A0")]
		public static float RandomNeg1to1()
		{
			return default(float);
		}

		[Token(Token = "0x600119D")]
		[Address(RVA = "0xD75664", Offset = "0xD75664", VA = "0xD75664")]
		public static float RandomNegToPos(float baseValue)
		{
			return default(float);
		}

		[Token(Token = "0x600119E")]
		[Address(RVA = "0xD755F4", Offset = "0xD755F4", VA = "0xD755F4")]
		public static float RandomWithinRange(float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x600119F")]
		[Address(RVA = "0xD756C4", Offset = "0xD756C4", VA = "0xD756C4")]
		public static int RandomIntWithinRangeInclusive(int min, int max)
		{
			return default(int);
		}

		[Token(Token = "0x60011A0")]
		[Address(RVA = "0xD756D0", Offset = "0xD756D0", VA = "0xD756D0")]
		public static int RandomIndexForArrayOfLength(int length)
		{
			return default(int);
		}

		[Token(Token = "0x60011A1")]
		[Address(RVA = "0xD75754", Offset = "0xD75754", VA = "0xD75754")]
		public static float RandomFromValueWithDeviation(float value, float deviation)
		{
			return default(float);
		}

		[Token(Token = "0x60011A2")]
		[Address(RVA = "0xD757B8", Offset = "0xD757B8", VA = "0xD757B8")]
		public static float RandomFromValueWithPercentageDeviation(float value, float percentage)
		{
			return default(float);
		}

		[Token(Token = "0x60011A3")]
		[Address(RVA = "0xD75820", Offset = "0xD75820", VA = "0xD75820")]
		public static Vector2 RandomPointWithinEllipse(Vector2 v)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60011A4")]
		[Address(RVA = "0xD7584C", Offset = "0xD7584C", VA = "0xD7584C")]
		public static float RandomEulerAngle()
		{
			return default(float);
		}

		[Token(Token = "0x60011A5")]
		[Address(RVA = "0xD758A4", Offset = "0xD758A4", VA = "0xD758A4")]
		public static void PseudoRandomResetWithSeed(uint newSeed)
		{
		}

		[Token(Token = "0x60011A6")]
		[Address(RVA = "0xD75904", Offset = "0xD75904", VA = "0xD75904")]
		public static uint PseudoRandomInt(uint seedVal = 0u, uint countVal = 0u)
		{
			return default(uint);
		}

		[Token(Token = "0x60011A7")]
		[Address(RVA = "0xD75998", Offset = "0xD75998", VA = "0xD75998")]
		public static uint PseudoRandomCountIncrement(uint incrementVal)
		{
			return default(uint);
		}

		[Token(Token = "0x60011A8")]
		[Address(RVA = "0xD759A4", Offset = "0xD759A4", VA = "0xD759A4")]
		public static float PseudoRandom0to1(uint seedVal = 0u, uint countVal = 0u)
		{
			return default(float);
		}

		[Token(Token = "0x60011A9")]
		[Address(RVA = "0xD75A20", Offset = "0xD75A20", VA = "0xD75A20")]
		public static float PseudoRandom0to1(int seedVal = 0, int countVal = 0)
		{
			return default(float);
		}

		[Token(Token = "0x60011AA")]
		[Address(RVA = "0xD75A9C", Offset = "0xD75A9C", VA = "0xD75A9C")]
		public static float PseudoRandomWithinRange(float min, float max, uint seedVal = 0u, uint countVal = 0u)
		{
			return default(float);
		}

		[Token(Token = "0x60011AB")]
		[Address(RVA = "0xD75B20", Offset = "0xD75B20", VA = "0xD75B20")]
		public static Vector2 PseudoRandomOnUnitCircle(uint seedVal = 0u, uint countVal = 0u, uint countVal2 = 0u)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60011AC")]
		[Address(RVA = "0xD75C40", Offset = "0xD75C40", VA = "0xD75C40")]
		public static Quaternion PseudoRandomRotation(int seedVal = 0, int countVal = 0)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60011AD")]
		[Address(RVA = "0xD75CA4", Offset = "0xD75CA4", VA = "0xD75CA4")]
		public static Quaternion PseudoRandomRotation(uint seedVal = 0u, uint countVal = 0u)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60011AE")]
		public static void ShuffleArray<T>(List<T> array)
		{
		}

		[Token(Token = "0x60011AF")]
		public static void ShuffleArray<T>(T[] array)
		{
		}

		[Token(Token = "0x60011B0")]
		public static void PseudoRandomShuffleWithSeed<T>(T[] array, int seed)
		{
		}

		[Token(Token = "0x60011B1")]
		public static void PseudoRandomShuffleWithSeed<T>(List<T> list, int seed)
		{
		}

		[Token(Token = "0x60011B2")]
		[Address(RVA = "0xD75D88", Offset = "0xD75D88", VA = "0xD75D88")]
		public static int Positive1IfTrue(bool boolVal)
		{
			return default(int);
		}

		[Token(Token = "0x60011B3")]
		[Address(RVA = "0xD75D98", Offset = "0xD75D98", VA = "0xD75D98")]
		public static Vector3 LerpUnbound(Vector3 start, Vector3 end, float percentage)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60011B4")]
		[Address(RVA = "0xD75DC8", Offset = "0xD75DC8", VA = "0xD75DC8")]
		public static float LerpUnbound(float start, float end, float percentage)
		{
			return default(float);
		}

		[Token(Token = "0x60011B5")]
		[Address(RVA = "0xD75DE0", Offset = "0xD75DE0", VA = "0xD75DE0")]
		public static bool ValueIsInBetweenStartAndEnd(float val, float start, float end, bool inclusive = false)
		{
			return default(bool);
		}

		[Token(Token = "0x60011B6")]
		[Address(RVA = "0xD75E10", Offset = "0xD75E10", VA = "0xD75E10")]
		public static float LerpWithinRange(float middleValue, float variance, float percentage, bool clamped = true)
		{
			return default(float);
		}

		[Token(Token = "0x60011B7")]
		[Address(RVA = "0xD75EC4", Offset = "0xD75EC4", VA = "0xD75EC4")]
		public static float DoubleSidedLerp(float startValue, float middleValue, float endValue, float percentage)
		{
			return default(float);
		}

		[Token(Token = "0x60011B8")]
		[Address(RVA = "0xD75F24", Offset = "0xD75F24", VA = "0xD75F24")]
		public static float WrapAroundPercentageLerp(float start, float end, float percentage)
		{
			return default(float);
		}

		[Token(Token = "0x60011B9")]
		[Address(RVA = "0xD75F94", Offset = "0xD75F94", VA = "0xD75F94")]
		public static float LerpFromValueWithDeviation(float middleValue, float deviation, float percentage)
		{
			return default(float);
		}

		[Token(Token = "0x60011BA")]
		[Address(RVA = "0xD75FC0", Offset = "0xD75FC0", VA = "0xD75FC0")]
		public static Vector3 Vector3ValuesDividedByVector3(Vector3 vec1, Vector3 vec2)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60011BB")]
		[Address(RVA = "0xD70C04", Offset = "0xD70C04", VA = "0xD70C04")]
		public static Vector3 Vector3ValuesMultipliedByVector3(Vector3 vec1, Vector3 vec2)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60011BC")]
		[Address(RVA = "0xD75FD0", Offset = "0xD75FD0", VA = "0xD75FD0")]
		public static Vector3 Vector3ValuesMultipliedByVector3(Vector3 vec1, float vec2x, float vec2y, float vec2z)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60011BD")]
		[Address(RVA = "0xD75FE0", Offset = "0xD75FE0", VA = "0xD75FE0")]
		public static float Pow(float val, int exp)
		{
			return default(float);
		}

		[Token(Token = "0x60011BE")]
		[Address(RVA = "0xD7600C", Offset = "0xD7600C", VA = "0xD7600C")]
		public static float ValueWithMaxChange(float currentValue, float targetValue, float maxChange)
		{
			return default(float);
		}

		[Token(Token = "0x60011BF")]
		[Address(RVA = "0xD76038", Offset = "0xD76038", VA = "0xD76038")]
		public static float ValueWithIncreaseOrDecreaseDelta(float currentValue, float increaseDelta, float decreaseDeltaPositive, bool useIncreaseDelta, bool clamped0to1 = false)
		{
			return default(float);
		}

		[Token(Token = "0x60011C0")]
		[Address(RVA = "0xD6D0D8", Offset = "0xD6D0D8", VA = "0xD6D0D8")]
		public static bool ValueIsEqualToValueWithinPercentage(float valueA, float valueB, float withinPercentageValueA)
		{
			return default(bool);
		}

		[Token(Token = "0x60011C1")]
		[Address(RVA = "0xD7606C", Offset = "0xD7606C", VA = "0xD7606C")]
		public static bool ValuesAreCloseToEqual(float valueA, float valueB)
		{
			return default(bool);
		}

		[Token(Token = "0x60011C2")]
		[Address(RVA = "0xD7609C", Offset = "0xD7609C", VA = "0xD7609C")]
		public static bool ValuesAreApproximatelyEqual(float a, float b, float tolerance = 0.0001f)
		{
			return default(bool);
		}

		[Token(Token = "0x60011C3")]
		[Address(RVA = "0xD760AC", Offset = "0xD760AC", VA = "0xD760AC")]
		public static bool ValuesAreCloseToEqual(Vector3 valA, Vector3 valB)
		{
			return default(bool);
		}

		[Token(Token = "0x60011C4")]
		[Address(RVA = "0xD761B4", Offset = "0xD761B4", VA = "0xD761B4")]
		public static float PercentageClampedForEndSectionOfPercentage(float mainPercentageValue, float sectionPercentageStart)
		{
			return default(float);
		}

		[Token(Token = "0x60011C5")]
		[Address(RVA = "0xD761E8", Offset = "0xD761E8", VA = "0xD761E8")]
		public static float ValueAtPercentageBetweenValues(float percentage, float beginVal, float endVal)
		{
			return default(float);
		}

		[Token(Token = "0x60011C6")]
		[Address(RVA = "0xD6D18C", Offset = "0xD6D18C", VA = "0xD6D18C")]
		public static float PercentageOfValueBetweenValues(float value, float startValue, float endValue, bool clamped = true)
		{
			return default(float);
		}

		[Token(Token = "0x60011C7")]
		[Address(RVA = "0xD761F8", Offset = "0xD761F8", VA = "0xD761F8")]
		public static Vector3 PositionFlippedOverAxis(Vector3 pos, int axisIndex)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60011C8")]
		[Address(RVA = "0xD76274", Offset = "0xD76274", VA = "0xD76274")]
		public static Quaternion RotationFlippedOverAxis(Quaternion rot, int axisIndex)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60011C9")]
		[Address(RVA = "0xD76360", Offset = "0xD76360", VA = "0xD76360")]
		public static Vector3 Vector3Null()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60011CA")]
		[Address(RVA = "0xD76374", Offset = "0xD76374", VA = "0xD76374")]
		public static Vector3[] TranslatePath(Vector3[] path, Vector3 translation, bool inPlace = false)
		{
			return null;
		}

		[Token(Token = "0x60011CB")]
		[Address(RVA = "0xD76464", Offset = "0xD76464", VA = "0xD76464")]
		public static Vector3 UnitVectorFromPositionToPosition(Vector3 fromPosition, Vector3 toPosition)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60011CC")]
		[Address(RVA = "0xD71BC4", Offset = "0xD71BC4", VA = "0xD71BC4")]
		public static Vector3 VectorFromPointToPoint(Vector3 startPosition, Vector3 endPosition)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60011CD")]
		[Address(RVA = "0xD76554", Offset = "0xD76554", VA = "0xD76554")]
		public static float SquaredDistance(Vector3 p1, Vector3 p2)
		{
			return default(float);
		}

		[Token(Token = "0x60011CE")]
		[Address(RVA = "0xD76578", Offset = "0xD76578", VA = "0xD76578")]
		public static bool DistanceIsGreaterThanLength(Vector3 p1, Vector3 p2, float length)
		{
			return default(bool);
		}

		[Token(Token = "0x60011CF")]
		[Address(RVA = "0xD765A8", Offset = "0xD765A8", VA = "0xD765A8")]
		public static bool DistanceIsLessThanLength(Vector3 p1, Vector3 p2, float length)
		{
			return default(bool);
		}

		[Token(Token = "0x60011D0")]
		[Address(RVA = "0xD765D8", Offset = "0xD765D8", VA = "0xD765D8")]
		public static Quaternion QuaternionFromVector4(Vector4 vec4)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60011D1")]
		[Address(RVA = "0xD765DC", Offset = "0xD765DC", VA = "0xD765DC")]
		public static Vector4 Vector4FromQuaternion(Quaternion quat)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60011D2")]
		[Address(RVA = "0xD765E0", Offset = "0xD765E0", VA = "0xD765E0")]
		public static Vector3 PositionOnAttractorPath(float percentage, Vector3 startPosition, Vector3 endPosition, Vector3 launchAxis, float upVelocity, int attractExponent = 3, bool clamped = true)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60011D3")]
		[Address(RVA = "0xD76744", Offset = "0xD76744", VA = "0xD76744")]
		public static float SegmentedSetPercentageValue(int segmentIndex, int totalSegments, float fullPercentage)
		{
			return default(float);
		}

		[Token(Token = "0x60011D4")]
		[Address(RVA = "0xD76798", Offset = "0xD76798", VA = "0xD76798")]
		public static int SegmentedSetIndexValue(int totalSegments, float fullPercentage)
		{
			return default(int);
		}

		[Token(Token = "0x60011D5")]
		[Address(RVA = "0xD767D0", Offset = "0xD767D0", VA = "0xD767D0")]
		public MathUtility()
		{
		}
	}
	[Token(Token = "0x2000375")]
	public class StringUtility : MonoBehaviour
	{
		[Token(Token = "0x60011D7")]
		[Address(RVA = "0xD76828", Offset = "0xD76828", VA = "0xD76828")]
		public static string CountdownDisplayStringForTime(float timeRemaining, int secondsDecimalDigits = 0)
		{
			return null;
		}

		[Token(Token = "0x60011D8")]
		[Address(RVA = "0xD768B4", Offset = "0xD768B4", VA = "0xD768B4")]
		public static string CountdownDisplayStringForTime(int hours, int minutes, int seconds = -1, int millisecs = -1, int secondDecimalDigits = 0)
		{
			return null;
		}

		[Token(Token = "0x60011D9")]
		[Address(RVA = "0xD76CFC", Offset = "0xD76CFC", VA = "0xD76CFC")]
		public static string OrdinalWithSuffixForInteger(uint val)
		{
			return null;
		}

		[Token(Token = "0x60011DA")]
		[Address(RVA = "0xD76E14", Offset = "0xD76E14", VA = "0xD76E14")]
		public StringUtility()
		{
		}
	}
	[Token(Token = "0x2000376")]
	public class TimeUtility
	{
		[Token(Token = "0x40011A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static TimeUtility _sharedInstance;

		[Token(Token = "0x40011A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private float[] previousTimeDeltas;

		[Token(Token = "0x40011A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int previousTimeDeltasCurrentIndex;

		[Token(Token = "0x40011A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float nextFPSUpdateTime;

		[Token(Token = "0x40011A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int fpsUpdateCount;

		[Token(Token = "0x40011A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string fpsText;

		[Token(Token = "0x1700023F")]
		public static TimeUtility SharedInstance
		{
			[Token(Token = "0x60011DB")]
			[Address(RVA = "0xD76E1C", Offset = "0xD76E1C", VA = "0xD76E1C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60011DC")]
		[Address(RVA = "0xD76F08", Offset = "0xD76F08", VA = "0xD76F08")]
		public void ResetFrameRateEstimation()
		{
		}

		[Token(Token = "0x60011DD")]
		[Address(RVA = "0xD76F34", Offset = "0xD76F34", VA = "0xD76F34")]
		public void UpdateFrameRateEstimation()
		{
		}

		[Token(Token = "0x60011DE")]
		[Address(RVA = "0xD770F8", Offset = "0xD770F8", VA = "0xD770F8")]
		private Color ColorForFPSValue(float fpsVal)
		{
			return default(Color);
		}

		[Token(Token = "0x60011DF")]
		[Address(RVA = "0xD77188", Offset = "0xD77188", VA = "0xD77188")]
		public void SetGamePaused(bool toPaused)
		{
		}

		[Token(Token = "0x60011E0")]
		[Address(RVA = "0xD76EA8", Offset = "0xD76EA8", VA = "0xD76EA8")]
		public TimeUtility()
		{
		}
	}
	[Token(Token = "0x2000377")]
	public class TransformUtility
	{
		[Token(Token = "0x40011AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int refTransformCreationCount;

		[Token(Token = "0x40011AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static List<Transform> referenceTransforms;

		[Token(Token = "0x60011E1")]
		[Address(RVA = "0xD7718C", Offset = "0xD7718C", VA = "0xD7718C")]
		public static Transform NewGameObject(string name, Transform parent, Vector3 localPos, Quaternion localRotation)
		{
			return null;
		}

		[Token(Token = "0x60011E2")]
		[Address(RVA = "0xD772A4", Offset = "0xD772A4", VA = "0xD772A4")]
		public static Transform NewTransformAtZeroOfParent(string name, Transform parent)
		{
			return null;
		}

		[Token(Token = "0x60011E3")]
		[Address(RVA = "0xD7149C", Offset = "0xD7149C", VA = "0xD7149C")]
		public static void AddChildToParentAtZero(Transform child, Transform parent)
		{
		}

		[Token(Token = "0x60011E4")]
		[Address(RVA = "0xD773B4", Offset = "0xD773B4", VA = "0xD773B4")]
		public static void CopyTransformOfOtherTransform(Transform transformToModify, Transform transformToCopy, bool includingLocalScale = true)
		{
		}

		[Token(Token = "0x60011E5")]
		[Address(RVA = "0xD77434", Offset = "0xD77434", VA = "0xD77434")]
		public static void CopyPositionRotationToTargetFromSource(GameObject targetGameObject, GameObject sourceGameObject, Space space)
		{
		}

		[Token(Token = "0x60011E6")]
		[Address(RVA = "0xD77560", Offset = "0xD77560", VA = "0xD77560")]
		public static void CopyFullTransformToTargetFromSource(GameObject targetGameObject, GameObject sourceGameObject, Space space)
		{
		}

		[Token(Token = "0x60011E7")]
		[Address(RVA = "0xD77610", Offset = "0xD77610", VA = "0xD77610")]
		public static void CopyFullTransformHierarchyToTargetFromSource(GameObject targetGameObject, GameObject sourceGameObject)
		{
		}

		[Token(Token = "0x60011E8")]
		[Address(RVA = "0xD776C0", Offset = "0xD776C0", VA = "0xD776C0")]
		public static void LocalizeTransformToZero(Transform transform, bool includingScale = false)
		{
		}

		[Token(Token = "0x60011E9")]
		[Address(RVA = "0xD777C0", Offset = "0xD777C0", VA = "0xD777C0")]
		public static void LocalizeTransformToZero(GameObject gameObj)
		{
		}

		[Token(Token = "0x60011EA")]
		public static T InstantiateAndFullyCopyTransform<T>(T objToCopy) where T : Component
		{
			return null;
		}

		[Token(Token = "0x60011EB")]
		public static T InstantiatePrefabIntroTransform<T>(T prefab, Transform intoTransform) where T : Component
		{
			return null;
		}

		[Token(Token = "0x60011EC")]
		public static T InstantiatePrefabIntroTransform<T>(T prefab, Transform intoTransform, Vector3 localPos, Quaternion localRot) where T : Component
		{
			return null;
		}

		[Token(Token = "0x60011ED")]
		[Address(RVA = "0xD77834", Offset = "0xD77834", VA = "0xD77834")]
		public static string PathToTransform(Transform t)
		{
			return null;
		}

		[Token(Token = "0x60011EE")]
		[Address(RVA = "0xD6EDD8", Offset = "0xD6EDD8", VA = "0xD6EDD8")]
		public static Vector3 WorldPositionForLocalPositionInTransform(Vector3 localPosition, Transform transform)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60011EF")]
		[Address(RVA = "0xD6EDC4", Offset = "0xD6EDC4", VA = "0xD6EDC4")]
		public static Vector3 LocalPositionInTransformForWorldPosition(Transform transform, Vector3 worldPosition)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60011F0")]
		[Address(RVA = "0xD77AEC", Offset = "0xD77AEC", VA = "0xD77AEC")]
		public static Vector3 LocalDirectionInTransformForWorldDirection(Transform transform, Vector3 worldDirection)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60011F1")]
		[Address(RVA = "0xD77B00", Offset = "0xD77B00", VA = "0xD77B00")]
		public static Vector3 WorldDirectionForLocalDirectionInTransform(Vector3 localDirection, Transform transform)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60011F2")]
		[Address(RVA = "0xD77B14", Offset = "0xD77B14", VA = "0xD77B14")]
		public static Vector3 LocalPositionInTransformEqualToLocalPositionInOtherTransform(Transform targetTransform, Vector3 otherTransformLocalPosition, Transform otherTransform)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60011F3")]
		public static T ComponentFromListClosestToWorldPosition<T>(List<T> componentsList, Vector3 worldPos) where T : Component
		{
			return null;
		}

		[Token(Token = "0x60011F4")]
		[Address(RVA = "0xD716F0", Offset = "0xD716F0", VA = "0xD716F0")]
		public static Transform GetReferenceTransform()
		{
			return null;
		}

		[Token(Token = "0x60011F5")]
		[Address(RVA = "0xD77BB8", Offset = "0xD77BB8", VA = "0xD77BB8")]
		public static Transform GetReferenceTransform(Vector3 position, Quaternion rotation)
		{
			return null;
		}

		[Token(Token = "0x60011F6")]
		[Address(RVA = "0xD77C84", Offset = "0xD77C84", VA = "0xD77C84")]
		public static void ReturnReferenceTransforms(params Transform[] ts)
		{
		}

		[Token(Token = "0x60011F7")]
		[Address(RVA = "0xD71894", Offset = "0xD71894", VA = "0xD71894")]
		public static void ReturnReferenceTransform(Transform t)
		{
		}

		[Token(Token = "0x60011F8")]
		[Address(RVA = "0xD77D24", Offset = "0xD77D24", VA = "0xD77D24")]
		public TransformUtility()
		{
		}
	}
	[Token(Token = "0x2000378")]
	public class TweenUtility
	{
		[Token(Token = "0x60011FA")]
		[Address(RVA = "0xD77DC8", Offset = "0xD77DC8", VA = "0xD77DC8")]
		public static void TweenAnchorPositionAndAlpha(Text textLabel, Vector2 startOffsetAnchorPos, float startAlpha, float endAlpha, float duration, Ease easeType = Ease.OutSine)
		{
		}

		[Token(Token = "0x60011FB")]
		[Address(RVA = "0xD77E48", Offset = "0xD77E48", VA = "0xD77E48")]
		public static void TweenAnchorPositionAndAlpha(Text textLabel, Vector2 endingAnchorPos, Vector2 startOffsetAnchorPos, float startAlpha, float endAlpha, float duration, Ease easeType = Ease.OutSine)
		{
		}

		[Token(Token = "0x60011FC")]
		[Address(RVA = "0xD7800C", Offset = "0xD7800C", VA = "0xD7800C")]
		public static void TweenAnchorPositionAndAlpha(CanvasGroup canvasGroup, Vector2 startOffsetAnchorPos, float startAlpha, float endAlpha, float duration, Ease easeType = Ease.OutSine)
		{
		}

		[Token(Token = "0x60011FD")]
		[Address(RVA = "0xD780B8", Offset = "0xD780B8", VA = "0xD780B8")]
		public static void TweenAnchorPositionAndAlpha(CanvasGroup canvasGroup, Vector2 endingAnchorPos, Vector2 startOffsetAnchorPos, float startAlpha, float endAlpha, float duration, Ease easeType = Ease.OutSine)
		{
		}

		[Token(Token = "0x60011FE")]
		[Address(RVA = "0xD781EC", Offset = "0xD781EC", VA = "0xD781EC")]
		public static void TweenScaleAndAlpha(CanvasGroup canvasGroup, float startScale, float endScale, float startAlpha, float endAlpha, float duration, float delay = 0f, Ease easeType = Ease.OutSine, [Optional] Action<CanvasGroup> onCompleteCallback)
		{
		}

		[Token(Token = "0x60011FF")]
		[Address(RVA = "0xD78454", Offset = "0xD78454", VA = "0xD78454")]
		public static Tween SimpleInterpolationWhileObjectNotNull(UnityEngine.Object safteyObject, Action<float> animationValueSetter, float duration, float startVal = 0f, float endVal = 1f, Ease easeType = Ease.OutSine)
		{
			return null;
		}

		[Token(Token = "0x6001200")]
		[Address(RVA = "0xD78654", Offset = "0xD78654", VA = "0xD78654")]
		public static Tween SimpleInterpolation(Action<float> animationValueSetter, float duration, float startVal = 0f, float endVal = 1f, Ease easeType = Ease.OutSine)
		{
			return null;
		}

		[Token(Token = "0x6001201")]
		[Address(RVA = "0xD78840", Offset = "0xD78840", VA = "0xD78840")]
		public static Tween SimpleAutoReverseInterpolation(Action<float> animationValueSetter, float duration, float startVal = 0f, float endVal = 1f, Ease easeType = Ease.InOutSine)
		{
			return null;
		}

		[Token(Token = "0x6001202")]
		[Address(RVA = "0xD7885C", Offset = "0xD7885C", VA = "0xD7885C")]
		public static Tween SimpleAutoReverseInterpolationSeparateDurations(Action<float> animationValueSetter, float startDuration, float reverseDuration, float startVal = 0f, float endVal = 1f, Ease easeType = Ease.InOutSine, [Optional] Action onCompleteCallback)
		{
			return null;
		}

		[Token(Token = "0x6001203")]
		[Address(RVA = "0xD78AEC", Offset = "0xD78AEC", VA = "0xD78AEC")]
		public static Tween DoublePulseAnimation(Action<float> animationValueSetter, float duration = 0.15f, Ease easeType = Ease.InOutSine, [Optional] Action onCompleteCallback, [Optional] Action onStartCallback)
		{
			return null;
		}

		[Token(Token = "0x6001204")]
		[Address(RVA = "0xD78DE4", Offset = "0xD78DE4", VA = "0xD78DE4")]
		public static void AnimateSizeOfRectTransform(RectTransform rectTransform, float startSize, float endSize, float duration, RectTransform.Axis axis = RectTransform.Axis.Vertical, Ease ease = Ease.OutSine)
		{
		}

		[Token(Token = "0x6001205")]
		[Address(RVA = "0xD78F80", Offset = "0xD78F80", VA = "0xD78F80")]
		public static void AnimateSizeAndPositionOfRectTransform(RectTransform targetRectTransform, RectTransform sourceRectTransform, float duration, Ease ease = Ease.OutSine)
		{
		}

		[Token(Token = "0x6001206")]
		[Address(RVA = "0xD790A0", Offset = "0xD790A0", VA = "0xD790A0")]
		public static Tween FadeAndScaleIn(UnityUIBehaviour unityUIBehaviour, bool setupInitialState = true, float animationDuration = 0.275f, float startingScale = 0.75f, float endingScale = 1f, float delay = 0f)
		{
			return null;
		}

		[Token(Token = "0x6001207")]
		[Address(RVA = "0xD7920C", Offset = "0xD7920C", VA = "0xD7920C")]
		public static Tween FadeAndScaleOut(UnityUIBehaviour unityUIBehaviour, float animationDuration = 0.275f, float endingScale = 0.75f)
		{
			return null;
		}

		[Token(Token = "0x6001208")]
		[Address(RVA = "0xD79260", Offset = "0xD79260", VA = "0xD79260")]
		public static float From0to1Backto0ForPercentage(float percentageIn)
		{
			return default(float);
		}

		[Token(Token = "0x6001209")]
		[Address(RVA = "0xD7928C", Offset = "0xD7928C", VA = "0xD7928C")]
		public static float EaseInOutSine(float value)
		{
			return default(float);
		}

		[Token(Token = "0x600120A")]
		[Address(RVA = "0xD792C0", Offset = "0xD792C0", VA = "0xD792C0")]
		public static float EaseInOutSine(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x600120B")]
		[Address(RVA = "0xD79304", Offset = "0xD79304", VA = "0xD79304")]
		public TweenUtility()
		{
		}
	}
	[Token(Token = "0x200037F")]
	public class UnityFilePathsUtility
	{
		[Token(Token = "0x40011C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static BaseMonoBehaviour coroutineMonoBehaviour;

		[Token(Token = "0x600122D")]
		[Address(RVA = "0xD79BF8", Offset = "0xD79BF8", VA = "0xD79BF8")]
		public static string UnityProjectAssetsFolderPath()
		{
			return null;
		}

		[Token(Token = "0x600122E")]
		[Address(RVA = "0xD79C00", Offset = "0xD79C00", VA = "0xD79C00")]
		public static string ParentFolderOfGitProject()
		{
			return null;
		}

		[Token(Token = "0x600122F")]
		[Address(RVA = "0xD79D58", Offset = "0xD79D58", VA = "0xD79D58")]
		public static string PathOfFolderNextToGitProjectParentFolder(string folderName, bool createIfNeeded = true)
		{
			return null;
		}

		[Token(Token = "0x6001230")]
		[Address(RVA = "0xD79DE0", Offset = "0xD79DE0", VA = "0xD79DE0")]
		public static string UnityProjectAssetsGitIgnoredFolder([Optional] string subFolder, bool createIfNeeded = true)
		{
			return null;
		}

		[Token(Token = "0x6001231")]
		[Address(RVA = "0xD79E9C", Offset = "0xD79E9C", VA = "0xD79E9C")]
		public static List<string> ListOfAllFileNamePathsInGitIgnoredFolder([Optional] string subFolder)
		{
			return null;
		}

		[Token(Token = "0x6001232")]
		[Address(RVA = "0xD79EB0", Offset = "0xD79EB0", VA = "0xD79EB0")]
		public static List<string> ListOfAllFileNamePathsInPath(string path)
		{
			return null;
		}

		[Token(Token = "0x6001233")]
		[Address(RVA = "0xD79F7C", Offset = "0xD79F7C", VA = "0xD79F7C")]
		public static void ShowPathInFileExplorer(string path, bool withDelay = true)
		{
		}

		[Token(Token = "0x6001234")]
		[Address(RVA = "0xD79F80", Offset = "0xD79F80", VA = "0xD79F80")]
		public UnityFilePathsUtility()
		{
		}
	}
}
namespace Pathfinding
{
	[Token(Token = "0x2000380")]
	public class Graph : MonoBehaviour
	{
		[Token(Token = "0x40011C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PropSpawner propSpawner;

		[Token(Token = "0x40011CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform origin;

		[Token(Token = "0x40011CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform destination;

		[Token(Token = "0x40011CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public LineRenderer[] pathLines;

		[Token(Token = "0x40011CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool showLines;

		[Token(Token = "0x40011CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float propReachForNodeRadius;

		[Token(Token = "0x40011CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<Node> nodesInTraversableOrder;

		[Token(Token = "0x40011D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<Node> openSet;

		[Token(Token = "0x40011D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private List<Node> closedSet;

		[Token(Token = "0x40011D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool destinationReached;

		[Token(Token = "0x40011D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Dictionary<Node, List<ManagedProp>> propsByNearestNode;

		[Token(Token = "0x40011D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Transform currentProp;

		[Token(Token = "0x40011D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Node pathBetweenLastOrigin;

		[Token(Token = "0x40011D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Node pathBetweenLastDestination;

		[Token(Token = "0x40011D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private List<GameObject> debugSpheres;

		[Token(Token = "0x6001235")]
		[Address(RVA = "0xD79F88", Offset = "0xD79F88", VA = "0xD79F88")]
		private void Start()
		{
		}

		[Token(Token = "0x6001236")]
		[Address(RVA = "0xD7A504", Offset = "0xD7A504", VA = "0xD7A504")]
		private void MapTraversablePathsToNodes()
		{
		}

		[Token(Token = "0x6001237")]
		[Address(RVA = "0xD7A7B8", Offset = "0xD7A7B8", VA = "0xD7A7B8")]
		private void PropLoadSequence()
		{
		}

		[Token(Token = "0x6001238")]
		[Address(RVA = "0xD7A7D8", Offset = "0xD7A7D8", VA = "0xD7A7D8")]
		private void ClearPropsByNearestNode()
		{
		}

		[Token(Token = "0x6001239")]
		[Address(RVA = "0xD7B20C", Offset = "0xD7B20C", VA = "0xD7B20C")]
		private void RecalculatePath()
		{
		}

		[Token(Token = "0x600123A")]
		[Address(RVA = "0xD7B460", Offset = "0xD7B460", VA = "0xD7B460")]
		private void PointToNextNearestProp(PropMemorizationType memType, ManagedProp mp)
		{
		}

		[Token(Token = "0x600123B")]
		[Address(RVA = "0xD7AD80", Offset = "0xD7AD80", VA = "0xD7AD80")]
		private void PointToNextNearestProp()
		{
		}

		[Token(Token = "0x600123C")]
		[Address(RVA = "0xD7B470", Offset = "0xD7B470", VA = "0xD7B470")]
		private void HighlightCurrentProp()
		{
		}

		[Token(Token = "0x600123D")]
		[Address(RVA = "0xD7B4E0", Offset = "0xD7B4E0", VA = "0xD7B4E0")]
		private void EnableLines(bool enable)
		{
		}

		[Token(Token = "0x600123E")]
		[Address(RVA = "0xD7B550", Offset = "0xD7B550", VA = "0xD7B550")]
		private List<Node> GetRouteBetweenNodes(Node origin, Node destination)
		{
			return null;
		}

		[Token(Token = "0x600123F")]
		[Address(RVA = "0xD7BE80", Offset = "0xD7BE80", VA = "0xD7BE80")]
		private List<Node> CalculatePath(Node endNode)
		{
			return null;
		}

		[Token(Token = "0x6001240")]
		[Address(RVA = "0xD7C040", Offset = "0xD7C040", VA = "0xD7C040")]
		private Node GetNearestNodeToPoint(Vector3 point)
		{
			return null;
		}

		[Token(Token = "0x6001241")]
		[Address(RVA = "0xD7C328", Offset = "0xD7C328", VA = "0xD7C328")]
		private List<Vector3> GetPathBetweenPoints(Vector3 startPoint, Vector3 targetPoint)
		{
			return null;
		}

		[Token(Token = "0x6001242")]
		[Address(RVA = "0xD7B304", Offset = "0xD7B304", VA = "0xD7B304")]
		public void ShowPathBetweenPoints(Vector3 startPoint, Vector3 targetPoint)
		{
		}

		[Token(Token = "0x6001243")]
		[Address(RVA = "0xD7A828", Offset = "0xD7A828", VA = "0xD7A828")]
		private void PopulateNearestNodeFromProps()
		{
		}

		[Token(Token = "0x6001244")]
		[Address(RVA = "0xD7D29C", Offset = "0xD7D29C", VA = "0xD7D29C")]
		private void OrderPropsAlongTraversablePath(Dictionary<Node, List<ManagedProp>> dictionary)
		{
		}

		[Token(Token = "0x6001245")]
		[Address(RVA = "0xD7D73C", Offset = "0xD7D73C", VA = "0xD7D73C")]
		public Graph()
		{
		}
	}
	[Token(Token = "0x2000383")]
	public class Node : MonoBehaviour
	{
		[Token(Token = "0x40011DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<Node> connections;

		[Token(Token = "0x40011DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float f;

		[Token(Token = "0x40011DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float g;

		[Token(Token = "0x40011DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float h;

		[Token(Token = "0x40011E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Node previousNode;

		[Token(Token = "0x40011E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Node prevTraversableNode;

		[Token(Token = "0x40011E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Node nextTraversableNode;

		[Token(Token = "0x40011E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector2 dirToNext;

		[Token(Token = "0x40011E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool nonPropNode;

		[Token(Token = "0x600124E")]
		[Address(RVA = "0xD7D9DC", Offset = "0xD7D9DC", VA = "0xD7D9DC")]
		public Node()
		{
		}
	}
}
namespace Onboarding
{
	[Token(Token = "0x2000384")]
	public class CustomPopulateProp : MonoBehaviour
	{
		[Token(Token = "0x40011E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ManagedProp managedProp;

		[Token(Token = "0x40011E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CardPackage customProp;

		[Token(Token = "0x600124F")]
		[Address(RVA = "0xD7D9E4", Offset = "0xD7D9E4", VA = "0xD7D9E4")]
		private void Start()
		{
		}

		[Token(Token = "0x6001250")]
		[Address(RVA = "0xD7DA08", Offset = "0xD7DA08", VA = "0xD7DA08")]
		public CustomPopulateProp()
		{
		}
	}
}
namespace UnityEngine.XR.Interaction.Toolkit.Examples
{
	[Token(Token = "0x2000385")]
	public class LocomotionConfigurationMenu : MonoBehaviour
	{
		[Token(Token = "0x2000386")]
		private class EnumDropdownCache<T> where T : Enum
		{
			[Token(Token = "0x40011F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly List<T> m_Values;

			[Token(Token = "0x1700024D")]
			public List<Dropdown.OptionData> options
			{
				[Token(Token = "0x6001296")]
				[CompilerGenerated]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001297")]
			public EnumDropdownCache()
			{
			}

			[Token(Token = "0x6001298")]
			public T GetValue(int index)
			{
				return (T)null;
			}

			[Token(Token = "0x6001299")]
			public int FindIndex(T value)
			{
				return default(int);
			}
		}

		[Token(Token = "0x40011E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[Tooltip("Stores the Toggle used to enable or disable continuous movement locomotion.")]
		private Toggle m_ContinuousMoveToggle;

		[Token(Token = "0x40011E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[Tooltip("Stores the Slider used to set the move speed of continuous movement.")]
		private Slider m_MoveSpeedSlider;

		[Token(Token = "0x40011E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[Tooltip("Stores the Text used to display the current move speed of continuous movement.")]
		private Text m_MoveSpeedValueText;

		[Token(Token = "0x40011EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		[Tooltip("Stores the Toggle used to enable or disable strafing (sideways movement) of continuous movement.")]
		private Toggle m_EnableStrafeToggle;

		[Token(Token = "0x40011EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[Tooltip("Stores the Toggle used to enable or disable gravity on continuous movement.")]
		private Toggle m_UseGravityToggle;

		[Token(Token = "0x40011EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[Tooltip("Stores the Dropdown used to select when gravity is applied with continuous movement.")]
		private Dropdown m_GravityApplicationModeDropdown;

		[Token(Token = "0x40011ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Stores the Dropdown used to select the source Transform to define the forward direction of continuous movement.")]
		[SerializeField]
		private Dropdown m_ForwardSourceDropdown;

		[Token(Token = "0x40011EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		[Tooltip("Stores the Toggle used to enable or disable continuous turn locomotion.")]
		private Toggle m_ContinuousTurnToggle;

		[Token(Token = "0x40011EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Stores the Slider used to set the turn speed of continuous turning.")]
		[SerializeField]
		private Slider m_TurnSpeedSlider;

		[Token(Token = "0x40011F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		[Tooltip("Stores the Text used to display the current turn speed of continuous turning.")]
		private Text m_TurnSpeedValueText;

		[Token(Token = "0x40011F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		[Tooltip("Stores the Dropdown used to select the number of degrees to rotate for snap turning.")]
		private Dropdown m_SnapTurnAmountDropdown;

		[Token(Token = "0x40011F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		[Tooltip("Stores the Toggle used to enable or disable 180° snap turns.")]
		private Toggle m_EnableTurnAroundToggle;

		[Token(Token = "0x40011F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		[Tooltip("Stores the behavior that will be used to configure locomotion control schemes and configuration preferences.")]
		private LocomotionSchemeManager m_Manager;

		[Token(Token = "0x40011F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly List<float> k_SnapTurnAmounts;

		[Token(Token = "0x40011F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly List<Dropdown.OptionData> k_SnapTurnAmountOptions;

		[Token(Token = "0x40011F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static EnumDropdownCache<ContinuousMoveProviderBase.GravityApplicationMode> s_GravityApplicationModeDropdownCache;

		[Token(Token = "0x40011F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static EnumDropdownCache<LocomotionSchemeManager.MoveForwardSource> s_ForwardSourceDropdownCache;

		[Token(Token = "0x17000240")]
		public Toggle continuousMoveToggle
		{
			[Token(Token = "0x6001251")]
			[Address(RVA = "0xD7DA10", Offset = "0xD7DA10", VA = "0xD7DA10")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001252")]
			[Address(RVA = "0xD7DA18", Offset = "0xD7DA18", VA = "0xD7DA18")]
			set
			{
			}
		}

		[Token(Token = "0x17000241")]
		public Slider moveSpeedSlider
		{
			[Token(Token = "0x6001253")]
			[Address(RVA = "0xD7DC78", Offset = "0xD7DC78", VA = "0xD7DC78")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001254")]
			[Address(RVA = "0xD7DC80", Offset = "0xD7DC80", VA = "0xD7DC80")]
			set
			{
			}
		}

		[Token(Token = "0x17000242")]
		public Text moveSpeedValueText
		{
			[Token(Token = "0x6001255")]
			[Address(RVA = "0xD7E098", Offset = "0xD7E098", VA = "0xD7E098")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001256")]
			[Address(RVA = "0xD7E0A0", Offset = "0xD7E0A0", VA = "0xD7E0A0")]
			set
			{
			}
		}

		[Token(Token = "0x17000243")]
		public Toggle enableStrafeToggle
		{
			[Token(Token = "0x6001257")]
			[Address(RVA = "0xD7E0E8", Offset = "0xD7E0E8", VA = "0xD7E0E8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001258")]
			[Address(RVA = "0xD7E0F0", Offset = "0xD7E0F0", VA = "0xD7E0F0")]
			set
			{
			}
		}

		[Token(Token = "0x17000244")]
		public Toggle useGravityToggle
		{
			[Token(Token = "0x6001259")]
			[Address(RVA = "0xD7E358", Offset = "0xD7E358", VA = "0xD7E358")]
			get
			{
				return null;
			}
			[Token(Token = "0x600125A")]
			[Address(RVA = "0xD7E360", Offset = "0xD7E360", VA = "0xD7E360")]
			set
			{
			}
		}

		[Token(Token = "0x17000245")]
		public Dropdown gravityApplicationModeDropdown
		{
			[Token(Token = "0x600125B")]
			[Address(RVA = "0xD7E5C8", Offset = "0xD7E5C8", VA = "0xD7E5C8")]
			get
			{
				return null;
			}
			[Token(Token = "0x600125C")]
			[Address(RVA = "0xD7E5D0", Offset = "0xD7E5D0", VA = "0xD7E5D0")]
			set
			{
			}
		}

		[Token(Token = "0x17000246")]
		public Dropdown forwardSourceDropdown
		{
			[Token(Token = "0x600125D")]
			[Address(RVA = "0xD7E8B8", Offset = "0xD7E8B8", VA = "0xD7E8B8")]
			get
			{
				return null;
			}
			[Token(Token = "0x600125E")]
			[Address(RVA = "0xD7E8C0", Offset = "0xD7E8C0", VA = "0xD7E8C0")]
			set
			{
			}
		}

		[Token(Token = "0x17000247")]
		public Toggle continuousTurnToggle
		{
			[Token(Token = "0x600125F")]
			[Address(RVA = "0xD7EBA0", Offset = "0xD7EBA0", VA = "0xD7EBA0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001260")]
			[Address(RVA = "0xD7EBA8", Offset = "0xD7EBA8", VA = "0xD7EBA8")]
			set
			{
			}
		}

		[Token(Token = "0x17000248")]
		public Slider turnSpeedSlider
		{
			[Token(Token = "0x6001261")]
			[Address(RVA = "0xD7EE08", Offset = "0xD7EE08", VA = "0xD7EE08")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001262")]
			[Address(RVA = "0xD7EE10", Offset = "0xD7EE10", VA = "0xD7EE10")]
			set
			{
			}
		}

		[Token(Token = "0x17000249")]
		public Text turnSpeedValueText
		{
			[Token(Token = "0x6001263")]
			[Address(RVA = "0xD7F1FC", Offset = "0xD7F1FC", VA = "0xD7F1FC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001264")]
			[Address(RVA = "0xD7F204", Offset = "0xD7F204", VA = "0xD7F204")]
			set
			{
			}
		}

		[Token(Token = "0x1700024A")]
		public Dropdown snapTurnAmountDropdown
		{
			[Token(Token = "0x6001265")]
			[Address(RVA = "0xD7F24C", Offset = "0xD7F24C", VA = "0xD7F24C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001266")]
			[Address(RVA = "0xD7F254", Offset = "0xD7F254", VA = "0xD7F254")]
			set
			{
			}
		}

		[Token(Token = "0x1700024B")]
		public Toggle enableTurnAroundToggle
		{
			[Token(Token = "0x6001267")]
			[Address(RVA = "0xD7F6FC", Offset = "0xD7F6FC", VA = "0xD7F6FC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001268")]
			[Address(RVA = "0xD7F704", Offset = "0xD7F704", VA = "0xD7F704")]
			set
			{
			}
		}

		[Token(Token = "0x1700024C")]
		public LocomotionSchemeManager manager
		{
			[Token(Token = "0x6001269")]
			[Address(RVA = "0xD7F964", Offset = "0xD7F964", VA = "0xD7F964")]
			get
			{
				return null;
			}
			[Token(Token = "0x600126A")]
			[Address(RVA = "0xD7F96C", Offset = "0xD7F96C", VA = "0xD7F96C")]
			set
			{
			}
		}

		[Token(Token = "0x600126B")]
		[Address(RVA = "0xD7FB44", Offset = "0xD7FB44", VA = "0xD7FB44")]
		protected void Awake()
		{
		}

		[Token(Token = "0x600126C")]
		[Address(RVA = "0xD7FF54", Offset = "0xD7FF54", VA = "0xD7FF54")]
		protected void OnEnable()
		{
		}

		[Token(Token = "0x600126D")]
		[Address(RVA = "0xD80184", Offset = "0xD80184", VA = "0xD80184")]
		protected void OnDisable()
		{
		}

		[Token(Token = "0x600126E")]
		[Address(RVA = "0xD7FA98", Offset = "0xD7FA98", VA = "0xD7FA98")]
		private void SubscribeAll()
		{
		}

		[Token(Token = "0x600126F")]
		[Address(RVA = "0xD7FA18", Offset = "0xD7FA18", VA = "0xD7FA18")]
		private void UnsubscribeAll()
		{
		}

		[Token(Token = "0x6001270")]
		[Address(RVA = "0xD7FB18", Offset = "0xD7FB18", VA = "0xD7FB18")]
		private void RefreshInteractable()
		{
		}

		[Token(Token = "0x6001271")]
		[Address(RVA = "0xD7E05C", Offset = "0xD7E05C", VA = "0xD7E05C")]
		private void RefreshMoveDependentInteractable()
		{
		}

		[Token(Token = "0x6001272")]
		[Address(RVA = "0xD80188", Offset = "0xD80188", VA = "0xD80188")]
		private void RefreshMoveDependentInteractable(bool continuous)
		{
		}

		[Token(Token = "0x6001273")]
		[Address(RVA = "0xD7F1C0", Offset = "0xD7F1C0", VA = "0xD7F1C0")]
		private void RefreshTurnDependentInteractable()
		{
		}

		[Token(Token = "0x6001274")]
		[Address(RVA = "0xD80310", Offset = "0xD80310", VA = "0xD80310")]
		private void RefreshTurnDependentInteractable(bool continuous)
		{
		}

		[Token(Token = "0x6001275")]
		[Address(RVA = "0xD7FF80", Offset = "0xD7FF80", VA = "0xD7FF80")]
		private bool ValidateManager()
		{
			return default(bool);
		}

		[Token(Token = "0x6001276")]
		[Address(RVA = "0xD7DB54", Offset = "0xD7DB54", VA = "0xD7DB54")]
		private void SubscribeContinuousMove(Toggle toggle)
		{
		}

		[Token(Token = "0x6001277")]
		[Address(RVA = "0xD7DDC8", Offset = "0xD7DDC8", VA = "0xD7DDC8")]
		private void SubscribeMoveSpeed(Slider slider, Text valueText)
		{
		}

		[Token(Token = "0x6001278")]
		[Address(RVA = "0xD7E234", Offset = "0xD7E234", VA = "0xD7E234")]
		private void SubscribeEnableStrafe(Toggle toggle)
		{
		}

		[Token(Token = "0x6001279")]
		[Address(RVA = "0xD7E4A4", Offset = "0xD7E4A4", VA = "0xD7E4A4")]
		private void SubscribeUseGravity(Toggle toggle)
		{
		}

		[Token(Token = "0x600127A")]
		[Address(RVA = "0xD7E714", Offset = "0xD7E714", VA = "0xD7E714")]
		private void SubscribeGravityApplicationMode(Dropdown dropdown)
		{
		}

		[Token(Token = "0x600127B")]
		[Address(RVA = "0xD7EA04", Offset = "0xD7EA04", VA = "0xD7EA04")]
		private void SubscribeForwardSource(Dropdown dropdown)
		{
		}

		[Token(Token = "0x600127C")]
		[Address(RVA = "0xD7ECE4", Offset = "0xD7ECE4", VA = "0xD7ECE4")]
		private void SubscribeContinuousTurn(Toggle toggle)
		{
		}

		[Token(Token = "0x600127D")]
		[Address(RVA = "0xD7EF58", Offset = "0xD7EF58", VA = "0xD7EF58")]
		private void SubscribeTurnSpeed(Slider slider, Text valueText)
		{
		}

		[Token(Token = "0x600127E")]
		[Address(RVA = "0xD7F398", Offset = "0xD7F398", VA = "0xD7F398")]
		private void SubscribeSnapTurnAmount(Dropdown dropdown)
		{
		}

		[Token(Token = "0x600127F")]
		[Address(RVA = "0xD7F840", Offset = "0xD7F840", VA = "0xD7F840")]
		private void SubscribeEnableTurnAround(Toggle toggle)
		{
		}

		[Token(Token = "0x6001280")]
		[Address(RVA = "0xD7DA5C", Offset = "0xD7DA5C", VA = "0xD7DA5C")]
		private void UnsubscribeContinuousMove(Toggle toggle)
		{
		}

		[Token(Token = "0x6001281")]
		[Address(RVA = "0xD7DCD0", Offset = "0xD7DCD0", VA = "0xD7DCD0")]
		private void UnsubscribeMoveSpeed(Slider slider)
		{
		}

		[Token(Token = "0x6001282")]
		[Address(RVA = "0xD7E13C", Offset = "0xD7E13C", VA = "0xD7E13C")]
		private void UnsubscribeEnableStrafe(Toggle toggle)
		{
		}

		[Token(Token = "0x6001283")]
		[Address(RVA = "0xD7E3AC", Offset = "0xD7E3AC", VA = "0xD7E3AC")]
		private void UnsubscribeUseGravity(Toggle toggle)
		{
		}

		[Token(Token = "0x6001284")]
		[Address(RVA = "0xD7E61C", Offset = "0xD7E61C", VA = "0xD7E61C")]
		private void UnsubscribeGravityApplicationMode(Dropdown dropdown)
		{
		}

		[Token(Token = "0x6001285")]
		[Address(RVA = "0xD7E90C", Offset = "0xD7E90C", VA = "0xD7E90C")]
		private void UnsubscribeForwardSource(Dropdown dropdown)
		{
		}

		[Token(Token = "0x6001286")]
		[Address(RVA = "0xD7EBEC", Offset = "0xD7EBEC", VA = "0xD7EBEC")]
		private void UnsubscribeContinuousTurn(Toggle toggle)
		{
		}

		[Token(Token = "0x6001287")]
		[Address(RVA = "0xD7EE60", Offset = "0xD7EE60", VA = "0xD7EE60")]
		private void UnsubscribeTurnSpeed(Slider slider)
		{
		}

		[Token(Token = "0x6001288")]
		[Address(RVA = "0xD7F2A0", Offset = "0xD7F2A0", VA = "0xD7F2A0")]
		private void UnsubscribeSnapTurnAmount(Dropdown dropdown)
		{
		}

		[Token(Token = "0x6001289")]
		[Address(RVA = "0xD7F748", Offset = "0xD7F748", VA = "0xD7F748")]
		private void UnsubscribeEnableTurnAround(Toggle toggle)
		{
		}

		[Token(Token = "0x600128A")]
		[Address(RVA = "0xD803E8", Offset = "0xD803E8", VA = "0xD803E8")]
		private void OnContinuousMoveToggleValueChanged(bool value)
		{
		}

		[Token(Token = "0x600128B")]
		[Address(RVA = "0xD8044C", Offset = "0xD8044C", VA = "0xD8044C")]
		private void OnMoveSpeedSliderValueChanged(float value)
		{
		}

		[Token(Token = "0x600128C")]
		[Address(RVA = "0xD80510", Offset = "0xD80510", VA = "0xD80510")]
		private void OnEnableStrafeToggleValueChanged(bool value)
		{
		}

		[Token(Token = "0x600128D")]
		[Address(RVA = "0xD80538", Offset = "0xD80538", VA = "0xD80538")]
		private void OnUseGravityToggleValueChanged(bool value)
		{
		}

		[Token(Token = "0x600128E")]
		[Address(RVA = "0xD80560", Offset = "0xD80560", VA = "0xD80560")]
		private void OnGravityApplicationModeDropdownValueChanged(int index)
		{
		}

		[Token(Token = "0x600128F")]
		[Address(RVA = "0xD805FC", Offset = "0xD805FC", VA = "0xD805FC")]
		private void OnForwardSourceDropdownValueChanged(int index)
		{
		}

		[Token(Token = "0x6001290")]
		[Address(RVA = "0xD806CC", Offset = "0xD806CC", VA = "0xD806CC")]
		private void OnContinuousTurnToggleValueChanged(bool value)
		{
		}

		[Token(Token = "0x6001291")]
		[Address(RVA = "0xD80730", Offset = "0xD80730", VA = "0xD80730")]
		private void OnTurnSpeedSliderValueChanged(float value)
		{
		}

		[Token(Token = "0x6001292")]
		[Address(RVA = "0xD8078C", Offset = "0xD8078C", VA = "0xD8078C")]
		private void OnSnapTurnAmountDropdownValueChanged(int index)
		{
		}

		[Token(Token = "0x6001293")]
		[Address(RVA = "0xD80830", Offset = "0xD80830", VA = "0xD80830")]
		private void OnEnableTurnAroundToggleValueChanged(bool value)
		{
		}

		[Token(Token = "0x6001294")]
		[Address(RVA = "0xD80858", Offset = "0xD80858", VA = "0xD80858")]
		public LocomotionConfigurationMenu()
		{
		}
	}
	[Token(Token = "0x2000387")]
	public class LocomotionSchemeManager : MonoBehaviour
	{
		[Token(Token = "0x2000388")]
		public enum MoveScheme
		{
			[Token(Token = "0x400120A")]
			Noncontinuous,
			[Token(Token = "0x400120B")]
			Continuous
		}

		[Token(Token = "0x2000389")]
		public enum TurnStyle
		{
			[Token(Token = "0x400120D")]
			Snap,
			[Token(Token = "0x400120E")]
			Continuous
		}

		[Token(Token = "0x200038A")]
		public enum MoveForwardSource
		{
			[Token(Token = "0x4001210")]
			Head,
			[Token(Token = "0x4001211")]
			LeftHand,
			[Token(Token = "0x4001212")]
			RightHand
		}

		[Token(Token = "0x40011FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[Tooltip("Controls which movement control scheme to use.")]
		private MoveScheme m_MoveScheme;

		[Token(Token = "0x40011FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Controls which turn style of locomotion to use.")]
		[SerializeField]
		private TurnStyle m_TurnStyle;

		[Token(Token = "0x40011FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Controls which orientation the forward direction of continuous movement is relative to.")]
		[SerializeField]
		private MoveForwardSource m_MoveForwardSource;

		[Token(Token = "0x40011FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[Tooltip("Input action assets associated with locomotion to affect when the active movement control scheme is set. Can use this list by itself or together with the Action Maps list to set control scheme masks by Asset or Map.")]
		private List<InputActionAsset> m_ActionAssets;

		[Token(Token = "0x40011FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		[Tooltip("Input action maps associated with locomotion to affect when the active movement control scheme is set. Can use this list together with the Action Assets list to set control scheme masks by Map instead of the whole Asset.")]
		private List<string> m_ActionMaps;

		[Token(Token = "0x40011FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[Tooltip("Input actions associated with locomotion to affect when the active movement control scheme is set. Can use this list to select exactly the actions to affect instead of setting control scheme masks by Asset or Map.")]
		private List<InputActionReference> m_Actions;

		[Token(Token = "0x4001200")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[Tooltip("Name of an input control scheme that defines the grouping of bindings that should remain enabled when applying any movement control scheme. Control schemes are created and named in the Input Actions window. The other movement control schemes are applied additively to this scheme. Can be an empty string, which means only bindings that match the specified movement control scheme will be enabled.")]
		private string m_BaseControlScheme;

		[Token(Token = "0x4001201")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Name of an input control scheme that defines the grouping of bindings that should remain enabled when applying the noncontinuous movement control scheme. Control schemes are created and named in the Input Actions window. Can be an empty string, which means only bindings that match the base control scheme will be enabled.")]
		[SerializeField]
		private string m_NoncontinuousControlScheme;

		[Token(Token = "0x4001202")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Name of an input control scheme that defines the grouping of bindings that should remain enabled when applying the continuous movement control scheme. Control schemes are created and named in the Input Actions window. Can be an empty string, which means only bindings that match the base control scheme will be enabled.")]
		[SerializeField]
		private string m_ContinuousControlScheme;

		[Token(Token = "0x4001203")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Stores the locomotion provider for continuous movement.")]
		[SerializeField]
		private ContinuousMoveProviderBase m_ContinuousMoveProvider;

		[Token(Token = "0x4001204")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Stores the locomotion provider for continuous turning.")]
		[SerializeField]
		private ContinuousTurnProviderBase m_ContinuousTurnProvider;

		[Token(Token = "0x4001205")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Stores the locomotion provider for snap turning.")]
		[SerializeField]
		private SnapTurnProviderBase m_SnapTurnProvider;

		[Token(Token = "0x4001206")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Stores the \"Head\" Transform used with continuous movement when inputs should be relative to head orientation (usually the main camera).")]
		[SerializeField]
		private Transform m_HeadForwardSource;

		[Token(Token = "0x4001207")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Stores the \"Left Hand\" Transform used with continuous movement when inputs should be relative to the left hand's orientation.")]
		[SerializeField]
		private Transform m_LeftHandForwardSource;

		[Token(Token = "0x4001208")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		[Tooltip("Stores the \"Right Hand\" Transform used with continuous movement when inputs should be relative to the right hand's orientation.")]
		private Transform m_RightHandForwardSource;

		[Token(Token = "0x1700024E")]
		public MoveScheme moveScheme
		{
			[Token(Token = "0x600129A")]
			[Address(RVA = "0xD80BD0", Offset = "0xD80BD0", VA = "0xD80BD0")]
			get
			{
				return default(MoveScheme);
			}
			[Token(Token = "0x600129B")]
			[Address(RVA = "0xD80428", Offset = "0xD80428", VA = "0xD80428")]
			set
			{
			}
		}

		[Token(Token = "0x1700024F")]
		public TurnStyle turnStyle
		{
			[Token(Token = "0x600129C")]
			[Address(RVA = "0xD80D44", Offset = "0xD80D44", VA = "0xD80D44")]
			get
			{
				return default(TurnStyle);
			}
			[Token(Token = "0x600129D")]
			[Address(RVA = "0xD8070C", Offset = "0xD8070C", VA = "0xD8070C")]
			set
			{
			}
		}

		[Token(Token = "0x17000250")]
		public MoveForwardSource moveForwardSource
		{
			[Token(Token = "0x600129E")]
			[Address(RVA = "0xD80F3C", Offset = "0xD80F3C", VA = "0xD80F3C")]
			get
			{
				return default(MoveForwardSource);
			}
			[Token(Token = "0x600129F")]
			[Address(RVA = "0xD806A8", Offset = "0xD806A8", VA = "0xD806A8")]
			set
			{
			}
		}

		[Token(Token = "0x17000251")]
		public List<InputActionAsset> actionAssets
		{
			[Token(Token = "0x60012A0")]
			[Address(RVA = "0xD81148", Offset = "0xD81148", VA = "0xD81148")]
			get
			{
				return null;
			}
			[Token(Token = "0x60012A1")]
			[Address(RVA = "0xD81150", Offset = "0xD81150", VA = "0xD81150")]
			set
			{
			}
		}

		[Token(Token = "0x17000252")]
		public List<string> actionMaps
		{
			[Token(Token = "0x60012A2")]
			[Address(RVA = "0xD81158", Offset = "0xD81158", VA = "0xD81158")]
			get
			{
				return null;
			}
			[Token(Token = "0x60012A3")]
			[Address(RVA = "0xD81160", Offset = "0xD81160", VA = "0xD81160")]
			set
			{
			}
		}

		[Token(Token = "0x17000253")]
		public List<InputActionReference> actions
		{
			[Token(Token = "0x60012A4")]
			[Address(RVA = "0xD81168", Offset = "0xD81168", VA = "0xD81168")]
			get
			{
				return null;
			}
			[Token(Token = "0x60012A5")]
			[Address(RVA = "0xD81170", Offset = "0xD81170", VA = "0xD81170")]
			set
			{
			}
		}

		[Token(Token = "0x17000254")]
		public string baseControlScheme
		{
			[Token(Token = "0x60012A6")]
			[Address(RVA = "0xD81178", Offset = "0xD81178", VA = "0xD81178")]
			get
			{
				return null;
			}
			[Token(Token = "0x60012A7")]
			[Address(RVA = "0xD81180", Offset = "0xD81180", VA = "0xD81180")]
			set
			{
			}
		}

		[Token(Token = "0x17000255")]
		public string noncontinuousControlScheme
		{
			[Token(Token = "0x60012A8")]
			[Address(RVA = "0xD81188", Offset = "0xD81188", VA = "0xD81188")]
			get
			{
				return null;
			}
			[Token(Token = "0x60012A9")]
			[Address(RVA = "0xD81190", Offset = "0xD81190", VA = "0xD81190")]
			set
			{
			}
		}

		[Token(Token = "0x17000256")]
		public string continuousControlScheme
		{
			[Token(Token = "0x60012AA")]
			[Address(RVA = "0xD81198", Offset = "0xD81198", VA = "0xD81198")]
			get
			{
				return null;
			}
			[Token(Token = "0x60012AB")]
			[Address(RVA = "0xD811A0", Offset = "0xD811A0", VA = "0xD811A0")]
			set
			{
			}
		}

		[Token(Token = "0x17000257")]
		public ContinuousMoveProviderBase continuousMoveProvider
		{
			[Token(Token = "0x60012AC")]
			[Address(RVA = "0xD811A8", Offset = "0xD811A8", VA = "0xD811A8")]
			get
			{
				return null;
			}
			[Token(Token = "0x60012AD")]
			[Address(RVA = "0xD811B0", Offset = "0xD811B0", VA = "0xD811B0")]
			set
			{
			}
		}

		[Token(Token = "0x17000258")]
		public ContinuousTurnProviderBase continuousTurnProvider
		{
			[Token(Token = "0x60012AE")]
			[Address(RVA = "0xD811B8", Offset = "0xD811B8", VA = "0xD811B8")]
			get
			{
				return null;
			}
			[Token(Token = "0x60012AF")]
			[Address(RVA = "0xD811C0", Offset = "0xD811C0", VA = "0xD811C0")]
			set
			{
			}
		}

		[Token(Token = "0x17000259")]
		public SnapTurnProviderBase snapTurnProvider
		{
			[Token(Token = "0x60012B0")]
			[Address(RVA = "0xD811C8", Offset = "0xD811C8", VA = "0xD811C8")]
			get
			{
				return null;
			}
			[Token(Token = "0x60012B1")]
			[Address(RVA = "0xD811D0", Offset = "0xD811D0", VA = "0xD811D0")]
			set
			{
			}
		}

		[Token(Token = "0x1700025A")]
		public Transform headForwardSource
		{
			[Token(Token = "0x60012B2")]
			[Address(RVA = "0xD811D8", Offset = "0xD811D8", VA = "0xD811D8")]
			get
			{
				return null;
			}
			[Token(Token = "0x60012B3")]
			[Address(RVA = "0xD811E0", Offset = "0xD811E0", VA = "0xD811E0")]
			set
			{
			}
		}

		[Token(Token = "0x1700025B")]
		public Transform leftHandForwardSource
		{
			[Token(Token = "0x60012B4")]
			[Address(RVA = "0xD811E8", Offset = "0xD811E8", VA = "0xD811E8")]
			get
			{
				return null;
			}
			[Token(Token = "0x60012B5")]
			[Address(RVA = "0xD811F0", Offset = "0xD811F0", VA = "0xD811F0")]
			set
			{
			}
		}

		[Token(Token = "0x1700025C")]
		public Transform rightHandForwardSource
		{
			[Token(Token = "0x60012B6")]
			[Address(RVA = "0xD811F8", Offset = "0xD811F8", VA = "0xD811F8")]
			get
			{
				return null;
			}
			[Token(Token = "0x60012B7")]
			[Address(RVA = "0xD81200", Offset = "0xD81200", VA = "0xD81200")]
			set
			{
			}
		}

		[Token(Token = "0x60012B8")]
		[Address(RVA = "0xD81208", Offset = "0xD81208", VA = "0xD81208")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60012B9")]
		[Address(RVA = "0xD81234", Offset = "0xD81234", VA = "0xD81234")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60012BA")]
		[Address(RVA = "0xD80BD8", Offset = "0xD80BD8", VA = "0xD80BD8")]
		private void SetMoveScheme(MoveScheme scheme)
		{
		}

		[Token(Token = "0x60012BB")]
		[Address(RVA = "0xD80D4C", Offset = "0xD80D4C", VA = "0xD80D4C")]
		private void SetTurnStyle(TurnStyle style)
		{
		}

		[Token(Token = "0x60012BC")]
		[Address(RVA = "0xD80F44", Offset = "0xD80F44", VA = "0xD80F44")]
		private void SetMoveForwardSource(MoveForwardSource forwardSource)
		{
		}

		[Token(Token = "0x60012BD")]
		[Address(RVA = "0xD81288", Offset = "0xD81288", VA = "0xD81288")]
		private void SetBindingMasks(string controlSchemeName)
		{
		}

		[Token(Token = "0x60012BE")]
		[Address(RVA = "0xD81238", Offset = "0xD81238", VA = "0xD81238")]
		private void ClearBindingMasks()
		{
		}

		[Token(Token = "0x60012BF")]
		[Address(RVA = "0xD819A8", Offset = "0xD819A8", VA = "0xD819A8")]
		private InputControlScheme? FindControlScheme(string controlSchemeName, InputActionReference action)
		{
			return null;
		}

		[Token(Token = "0x60012C0")]
		[Address(RVA = "0xD81DB8", Offset = "0xD81DB8", VA = "0xD81DB8")]
		private InputControlScheme? FindControlScheme(string controlSchemeName, InputActionAsset asset)
		{
			return null;
		}

		[Token(Token = "0x60012C1")]
		[Address(RVA = "0xD81B60", Offset = "0xD81B60", VA = "0xD81B60")]
		private static InputBinding? GetBindingMask(InputControlScheme? baseInputControlScheme, InputControlScheme? inputControlScheme)
		{
			return null;
		}

		[Token(Token = "0x60012C2")]
		[Address(RVA = "0xD81F8C", Offset = "0xD81F8C", VA = "0xD81F8C")]
		public LocomotionSchemeManager()
		{
		}
	}
}
namespace Localization
{
	[Token(Token = "0x200038B")]
	public class LocalizationManager : Singleton<LocalizationManager>
	{
		[Token(Token = "0x200038C")]
		[CompilerGenerated]
		private sealed class <>c__DisplayClass30_0
		{
			[Token(Token = "0x400121F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public List<LocalizedString> locStrings;

			[Token(Token = "0x4001220")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public LocalizationManager <>4__this;

			[Token(Token = "0x4001221")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Dictionary<AllStrings, string> newStringsDict;

			[Token(Token = "0x4001222")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public bool morePages;

			[Token(Token = "0x60012D7")]
			[Address(RVA = "0xD83454", Offset = "0xD83454", VA = "0xD83454")]
			public <>c__DisplayClass30_0()
			{
			}
		}

		[Token(Token = "0x200038E")]
		[CompilerGenerated]
		private sealed class <co_LoadAllStringsForLanguage>d__30 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001225")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001226")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001227")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public LocalizationManager <>4__this;

			[Token(Token = "0x4001228")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private <>c__DisplayClass30_0 <>8__1;

			[Token(Token = "0x4001229")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private int <page>5__2;

			[Token(Token = "0x17000260")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60012DD")]
				[Address(RVA = "0xD8392C", Offset = "0xD8392C", VA = "0xD8392C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000261")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60012DF")]
				[Address(RVA = "0xD83974", Offset = "0xD83974", VA = "0xD83974", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60012DA")]
			[Address(RVA = "0xD83204", Offset = "0xD83204", VA = "0xD83204")]
			[DebuggerHidden]
			public <co_LoadAllStringsForLanguage>d__30(int <>1__state)
			{
			}

			[Token(Token = "0x60012DB")]
			[Address(RVA = "0xD83564", Offset = "0xD83564", VA = "0xD83564", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60012DC")]
			[Address(RVA = "0xD83568", Offset = "0xD83568", VA = "0xD83568", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60012DE")]
			[Address(RVA = "0xD83934", Offset = "0xD83934", VA = "0xD83934", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200038F")]
		[CompilerGenerated]
		private sealed class <CacheLanguageStringsInPlayerPrefs>d__32 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400122A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400122B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400122C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public LocalizationManager <>4__this;

			[Token(Token = "0x400122D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public List<LocalizedString> locStrings;

			[Token(Token = "0x17000262")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60012E3")]
				[Address(RVA = "0xD83B94", Offset = "0xD83B94", VA = "0xD83B94", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000263")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60012E5")]
				[Address(RVA = "0xD83BDC", Offset = "0xD83BDC", VA = "0xD83BDC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60012E0")]
			[Address(RVA = "0xD832BC", Offset = "0xD832BC", VA = "0xD832BC")]
			[DebuggerHidden]
			public <CacheLanguageStringsInPlayerPrefs>d__32(int <>1__state)
			{
			}

			[Token(Token = "0x60012E1")]
			[Address(RVA = "0xD8397C", Offset = "0xD8397C", VA = "0xD8397C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60012E2")]
			[Address(RVA = "0xD83980", Offset = "0xD83980", VA = "0xD83980", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60012E4")]
			[Address(RVA = "0xD83B9C", Offset = "0xD83B9C", VA = "0xD83B9C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001213")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Action OnLanguageSelectionRequired;

		[Token(Token = "0x4001214")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Action LanguageWasUpdated;

		[Token(Token = "0x4001217")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject languageSelector;

		[Token(Token = "0x4001219")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Dictionary<Language, int> languageVersions;

		[Token(Token = "0x400121A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int cachedLanguageVersion;

		[Token(Token = "0x400121B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Dictionary<AllStrings, string> allStringsDict;

		[Token(Token = "0x400121C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[CanBeNull]
		private Dictionary<AllStrings, string> preLoginStrings;

		[Token(Token = "0x400121D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private PlayerLanguageData playerLanguageData;

		[Token(Token = "0x400121E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private PlayerLanguageCache playerLanguageCache;

		[Token(Token = "0x1700025D")]
		public bool userLanguageWasSelected
		{
			[Token(Token = "0x60012C3")]
			[Address(RVA = "0xD81F94", Offset = "0xD81F94", VA = "0xD81F94")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60012C4")]
			[Address(RVA = "0xD81F9C", Offset = "0xD81F9C", VA = "0xD81F9C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700025E")]
		public bool allStringsLoaded
		{
			[Token(Token = "0x60012C5")]
			[Address(RVA = "0xD81FA8", Offset = "0xD81FA8", VA = "0xD81FA8")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60012C6")]
			[Address(RVA = "0xD81FB0", Offset = "0xD81FB0", VA = "0xD81FB0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700025F")]
		public Language language
		{
			[Token(Token = "0x60012C7")]
			[Address(RVA = "0xD81FBC", Offset = "0xD81FBC", VA = "0xD81FBC")]
			[CompilerGenerated]
			get
			{
				return default(Language);
			}
			[Token(Token = "0x60012C8")]
			[Address(RVA = "0xD81FC4", Offset = "0xD81FC4", VA = "0xD81FC4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60012C9")]
		[Address(RVA = "0xD81FCC", Offset = "0xD81FCC", VA = "0xD81FCC", Slot = "5")]
		protected override void DidAwake()
		{
		}

		[Token(Token = "0x60012CA")]
		[Address(RVA = "0xD81FD0", Offset = "0xD81FD0", VA = "0xD81FD0")]
		private void PopulateAllStringsDictWithLocalStrings(Language language)
		{
		}

		[Token(Token = "0x60012CB")]
		[Address(RVA = "0xD826AC", Offset = "0xD826AC", VA = "0xD826AC")]
		public void InitializeSessionForLanguage()
		{
		}

		[Token(Token = "0x60012CC")]
		[Address(RVA = "0xD82C4C", Offset = "0xD82C4C", VA = "0xD82C4C")]
		public void UpdateForLanguageVersion(Dictionary<Language, int> newLanguageVersions)
		{
		}

		[Token(Token = "0x60012CD")]
		[Address(RVA = "0xD82CF8", Offset = "0xD82CF8", VA = "0xD82CF8")]
		public void LoginSelectEnglish()
		{
		}

		[Token(Token = "0x60012CE")]
		[Address(RVA = "0xD82E10", Offset = "0xD82E10", VA = "0xD82E10")]
		public void LoginSelectSimplifiedChinese()
		{
		}

		[Token(Token = "0x60012CF")]
		[Address(RVA = "0xD82F28", Offset = "0xD82F28", VA = "0xD82F28")]
		public void LoginSelectTraditionalChinese()
		{
		}

		[Token(Token = "0x60012D0")]
		[Address(RVA = "0xD83040", Offset = "0xD83040", VA = "0xD83040")]
		public void UpdateLanguage(Language newLanguage)
		{
		}

		[Token(Token = "0x60012D1")]
		[Address(RVA = "0xD830F0", Offset = "0xD830F0", VA = "0xD830F0")]
		public void LoadAllStrings()
		{
		}

		[Token(Token = "0x60012D2")]
		[Address(RVA = "0xD83190", Offset = "0xD83190", VA = "0xD83190")]
		[IteratorStateMachine(typeof(<co_LoadAllStringsForLanguage>d__30))]
		private IEnumerator co_LoadAllStringsForLanguage()
		{
			return null;
		}

		[Token(Token = "0x60012D3")]
		[Address(RVA = "0xD829B4", Offset = "0xD829B4", VA = "0xD829B4")]
		private void AddLocalizedStringSetToLanguageDict(Dictionary<AllStrings, string> currentStringsDict, List<LocalizedString> newLocStrings)
		{
		}

		[Token(Token = "0x60012D4")]
		[Address(RVA = "0xD8322C", Offset = "0xD8322C", VA = "0xD8322C")]
		[IteratorStateMachine(typeof(<CacheLanguageStringsInPlayerPrefs>d__32))]
		private IEnumerator CacheLanguageStringsInPlayerPrefs(List<LocalizedString> locStrings)
		{
			return null;
		}

		[Token(Token = "0x60012D5")]
		[Address(RVA = "0xD832E4", Offset = "0xD832E4", VA = "0xD832E4")]
		public string GetString(AllStrings stringEnum, string defaultString)
		{
			return null;
		}

		[Token(Token = "0x60012D6")]
		[Address(RVA = "0xD83388", Offset = "0xD83388", VA = "0xD83388")]
		public LocalizationManager()
		{
		}
	}
	[Token(Token = "0x2000390")]
	public enum Language
	{
		[Token(Token = "0x400122F")]
		None = 99,
		[Token(Token = "0x4001230")]
		English = 1,
		[Token(Token = "0x4001231")]
		SimplifiedChinese = 2,
		[Token(Token = "0x4001232")]
		TraditionalChinese = 3
	}
	[Token(Token = "0x2000391")]
	public enum AllStrings
	{
		[Token(Token = "0x4001234")]
		None = 0,
		[Token(Token = "0x4001235")]
		[InspectorName("TOK/Gnosis/TOK_Gnosis_Advance")]
		TOK_Gnosis_Advance = 1001001,
		[Token(Token = "0x4001236")]
		[InspectorName("TOK/Gnosis/TOK_Gnosis_Hint")]
		TOK_Gnosis_Hint = 1001002,
		[Token(Token = "0x4001237")]
		[InspectorName("TOK/Gnosis/TOK_Gnosis_Reminder")]
		TOK_Gnosis_Reminder = 1001003,
		[Token(Token = "0x4001238")]
		[InspectorName("TOK/Gnosis/TOK_Gnosis_Effort")]
		TOK_Gnosis_Effort = 1001004,
		[Token(Token = "0x4001239")]
		[InspectorName("TOK/Gnosis/TOK_Gnosis_Accuracy")]
		TOK_Gnosis_Accuracy = 1001005,
		[Token(Token = "0x400123A")]
		[InspectorName("TOK/Gnosis/TOK_Gnosis_Title")]
		TOK_Gnosis_Title = 1001006,
		[Token(Token = "0x400123B")]
		[InspectorName("TOK/Gnosis/TOK_Gnosis_Instructions")]
		TOK_Gnosis_Instructions = 1001007,
		[Token(Token = "0x400123C")]
		[InspectorName("TOK/Decks/TOK_Decks_Title")]
		TOK_Decks_Title = 1001008,
		[Token(Token = "0x400123D")]
		[InspectorName("TOK/Decks/TOK_Decks_Instructions")]
		TOK_Decks_Instructions = 1001009,
		[Token(Token = "0x400123E")]
		[InspectorName("TOK/Decks/TOK_Decks_Refresh")]
		TOK_Decks_Refresh = 1001010,
		[Token(Token = "0x400123F")]
		[InspectorName("TOK/Decks/TOK_Deck_Vortex_Instructions_1")]
		TOK_Deck_Vortex_Instructions_1 = 1001011,
		[Token(Token = "0x4001240")]
		[InspectorName("TOK/Decks/TOK_Deck_Vortex_Instructions_2")]
		TOK_Deck_Vortex_Instructions_2 = 1001012,
		[Token(Token = "0x4001241")]
		[InspectorName("TOK/Settings/TOK_Settings_Title")]
		TOK_Settings_Title = 1001013,
		[Token(Token = "0x4001242")]
		[InspectorName("TOK/Settings/TOK_Settings_Volume")]
		TOK_Settings_Volume = 1001014,
		[Token(Token = "0x4001243")]
		[InspectorName("TOK/Settings/TOK_Settings_Master")]
		TOK_Settings_Master = 1001015,
		[Token(Token = "0x4001244")]
		[InspectorName("TOK/Settings/TOK_Settings_Music")]
		TOK_Settings_Music = 1001016,
		[Token(Token = "0x4001245")]
		[InspectorName("TOK/Settings/TOK_Settings_SFX")]
		TOK_Settings_SFX = 1001017,
		[Token(Token = "0x4001246")]
		[InspectorName("TOK/Settings/TOK_Settings_Tips")]
		TOK_Settings_Tips = 1001018,
		[Token(Token = "0x4001247")]
		[InspectorName("TOK/Settings/TOK_Settings_High_Contrast")]
		TOK_Settings_High_Contrast = 1001019,
		[Token(Token = "0x4001248")]
		[InspectorName("TOK/Settings/TOK_Settings_Subtitles")]
		TOK_Settings_Subtitles = 1001020,
		[Token(Token = "0x4001249")]
		[InspectorName("TOK/Settings/TOK_Settings_Teleportation")]
		TOK_Settings_Teleportation = 1001021,
		[Token(Token = "0x400124A")]
		[InspectorName("TOK/Settings/TOK_Settings_Free_Move")]
		TOK_Settings_Free_Move = 1001022,
		[Token(Token = "0x400124B")]
		[InspectorName("TOK/Settings/TOK_Settings_Logout")]
		TOK_Settings_Logout = 1001023,
		[Token(Token = "0x400124C")]
		[InspectorName("TOK/Settings/TOK_Settings_Language")]
		TOK_Settings_Language = 1001024,
		[Token(Token = "0x400124D")]
		[InspectorName("TOK/Settings/TOK_Settings_Language_English")]
		TOK_Settings_Language_English = 1001025,
		[Token(Token = "0x400124E")]
		[InspectorName("TOK/Settings/TOK_Settings_Language_Simplified_Chinese")]
		TOK_Settings_Language_Simplified_Chinese = 1001026,
		[Token(Token = "0x400124F")]
		[InspectorName("TOK/Settings/TOK_Settings_Language_Traditional_Chinese")]
		TOK_Settings_Language_Traditional_Chinese = 1001027,
		[Token(Token = "0x4001250")]
		[InspectorName("TOK/Settings/TOK_Settings_Repeat_Tutorial")]
		TOK_Settings_Repeat_Tutorial = 1001028,
		[Token(Token = "0x4001251")]
		[InspectorName("TOK/Settings/TOK_Settings_Options")]
		TOK_Settings_Options = 1001029,
		[Token(Token = "0x4001252")]
		[InspectorName("TOK/Settings/TOK_Settings_Dyslexia")]
		TOK_Settings_Dyslexia = 1001030,
		[Token(Token = "0x4001253")]
		[InspectorName("TOK/Settings/TOK_Settings_Accessibility")]
		TOK_Settings_Accessibility = 1001031,
		[Token(Token = "0x4001254")]
		[InspectorName("Success/Success_Welcome")]
		Success_Welcome = 1002001,
		[Token(Token = "0x4001255")]
		[InspectorName("Success/Success_Prop_Download_Timer")]
		Success_Prop_Download_Timer = 1002002,
		[Token(Token = "0x4001256")]
		[InspectorName("Success/Success_Prop_Download_Fail")]
		Success_Prop_Download_Fail = 1002003,
		[Token(Token = "0x4001257")]
		[InspectorName("Success/Success_Earn_Gnosis")]
		Success_Earn_Gnosis = 1002004,
		[Token(Token = "0x4001258")]
		[InspectorName("Success/Success_FB_Insufficient_Cards")]
		Success_FB_Insufficient_Cards = 1002005,
		[Token(Token = "0x4001259")]
		[InspectorName("Success/Success_Network_Fail")]
		Success_Network_Fail = 1002006,
		[Token(Token = "0x400125A")]
		[InspectorName("Success/Success_Network_Restored")]
		Success_Network_Restored = 1002007,
		[Token(Token = "0x400125B")]
		[InspectorName("Success/Success_Unverified_Purchases")]
		Success_Unverified_Purchases = 1002008,
		[Token(Token = "0x400125C")]
		[InspectorName("Success/Success_Study_Complete")]
		Success_Study_Complete = 1002009,
		[Token(Token = "0x400125D")]
		[InspectorName("Success/Success_Deck_Unable_To_Spawn")]
		Success_Deck_Unable_To_Spawn = 1002010,
		[Token(Token = "0x400125E")]
		[InspectorName("Success/Success_Prop_Download_Metadata")]
		Success_Prop_Download_Metadata = 1002011,
		[Token(Token = "0x400125F")]
		[InspectorName("Success/Success_Prop_Download_An_Asset_Bundle")]
		Success_Prop_Download_An_Asset_Bundle = 1002012,
		[Token(Token = "0x4001260")]
		[InspectorName("Puzzle/Puzzle_Storybook_Unlock")]
		Puzzle_Storybook_Unlock = 1003000,
		[Token(Token = "0x4001261")]
		[InspectorName("Puzzle/Puzzle_Planet_Reborn_Success")]
		Puzzle_Planet_Reborn_Success = 1003001,
		[Token(Token = "0x4001262")]
		[InspectorName("Expressions/A-F/Exp_BringEverythingToKiln_1")]
		Exp_BringEverythingToKiln_1 = 1004001,
		[Token(Token = "0x4001263")]
		[InspectorName("Expressions/A-F/Exp_BringEverythingToKiln_2")]
		Exp_BringEverythingToKiln_2 = 1004002,
		[Token(Token = "0x4001264")]
		[InspectorName("Expressions/A-F/Exp_BringEverythingToKiln_3")]
		Exp_BringEverythingToKiln_3 = 1004003,
		[Token(Token = "0x4001265")]
		[InspectorName("Expressions/A-F/Exp_DiveHelmet_1")]
		Exp_DiveHelmet_1 = 1004004,
		[Token(Token = "0x4001266")]
		[InspectorName("Expressions/A-F/Exp_DiveHelmet_2")]
		Exp_DiveHelmet_2 = 1004005,
		[Token(Token = "0x4001267")]
		[InspectorName("Expressions/A-F/Exp_DiveHelmet_3")]
		Exp_DiveHelmet_3 = 1004006,
		[Token(Token = "0x4001268")]
		[InspectorName("Expressions/A-F/Exp_DontForgetToPlaySong")]
		Exp_DontForgetToPlaySong = 1004007,
		[Token(Token = "0x4001269")]
		[InspectorName("Expressions/A-F/Exp_DontRunFromChallenge_1")]
		Exp_DontRunFromChallenge_1 = 1004008,
		[Token(Token = "0x400126A")]
		[InspectorName("Expressions/A-F/Exp_DontRunFromChallenge_2")]
		Exp_DontRunFromChallenge_2 = 1004009,
		[Token(Token = "0x400126B")]
		[InspectorName("Expressions/A-F/Exp_EnjoyPurchaseOne")]
		Exp_EnjoyPurchaseOne = 1004010,
		[Token(Token = "0x400126C")]
		[InspectorName("Expressions/A-F/Exp_ExcellentWork")]
		Exp_ExcellentWork = 1004011,
		[Token(Token = "0x400126D")]
		[InspectorName("Expressions/A-F/Exp_ExplainStoreContent_1")]
		Exp_ExplainStoreContent_1 = 1004012,
		[Token(Token = "0x400126E")]
		[InspectorName("Expressions/A-F/Exp_ExplainStoreContent_2")]
		Exp_ExplainStoreContent_2 = 1004013,
		[Token(Token = "0x400126F")]
		[InspectorName("Expressions/A-F/Exp_ExplainStoreContent_3")]
		Exp_ExplainStoreContent_3 = 1004014,
		[Token(Token = "0x4001270")]
		[InspectorName("Expressions/A-F/Exp_ExplainStoreContent_4")]
		Exp_ExplainStoreContent_4 = 1004015,
		[Token(Token = "0x4001271")]
		[InspectorName("Expressions/A-F/Exp_FindOtherStarPiece_1")]
		Exp_FindOtherStarPiece_1 = 1004016,
		[Token(Token = "0x4001272")]
		[InspectorName("Expressions/A-F/Exp_FindOtherStarPiece_2")]
		Exp_FindOtherStarPiece_2 = 1004017,
		[Token(Token = "0x4001273")]
		[InspectorName("Expressions/A-F/Exp_FollowFootsteps_1")]
		Exp_FollowFootsteps_1 = 1004018,
		[Token(Token = "0x4001274")]
		[InspectorName("Expressions/A-F/Exp_FollowFootsteps_2")]
		Exp_FollowFootsteps_2 = 1004019,
		[Token(Token = "0x4001275")]
		[InspectorName("Expressions/A-F/Exp_FollowUpHowToMemorize")]
		Exp_FollowUpHowToMemorize = 1004020,
		[Token(Token = "0x4001276")]
		[InspectorName("Expressions/G-I/Exp_GiveThatAnotherGo")]
		Exp_GiveThatAnotherGo = 1004021,
		[Token(Token = "0x4001277")]
		[InspectorName("Expressions/G-I/Exp_GoFindADeck")]
		Exp_GoFindADeck = 1004022,
		[Token(Token = "0x4001278")]
		[InspectorName("Expressions/G-I/Exp_GoodMemory")]
		Exp_GoodMemory = 1004023,
		[Token(Token = "0x4001279")]
		[InspectorName("Expressions/G-I/Exp_GoStudyDeck")]
		Exp_GoStudyDeck = 1004024,
		[Token(Token = "0x400127A")]
		[InspectorName("Expressions/G-I/Exp_HaPerfect")]
		Exp_HaPerfect = 1004025,
		[Token(Token = "0x400127B")]
		[InspectorName("Expressions/G-I/Exp_HeardAboutMeteor_1")]
		Exp_HeardAboutMeteor_1 = 1004026,
		[Token(Token = "0x400127C")]
		[InspectorName("Expressions/G-I/Exp_HeardAboutMeteor_2")]
		Exp_HeardAboutMeteor_2 = 1004027,
		[Token(Token = "0x400127D")]
		[InspectorName("Expressions/G-I/Exp_HelpFillBlankPages_1")]
		Exp_HelpFillBlankPages_1 = 1004028,
		[Token(Token = "0x400127E")]
		[InspectorName("Expressions/G-I/Exp_HelpFillBlankPages_2")]
		Exp_HelpFillBlankPages_2 = 1004029,
		[Token(Token = "0x400127F")]
		[InspectorName("Expressions/G-I/Exp_HelpFillBlankPages_3")]
		Exp_HelpFillBlankPages_3 = 1004030,
		[Token(Token = "0x4001280")]
		[InspectorName("Expressions/G-I/Exp_HereIsAPresent")]
		Exp_HereIsAPresent = 1004031,
		[Token(Token = "0x4001281")]
		[InspectorName("Expressions/G-I/Exp_HorsesAndCoolers")]
		Exp_HorsesAndCoolers = 1004032,
		[Token(Token = "0x4001282")]
		[InspectorName("Expressions/G-I/Exp_HowAmINotMyself")]
		Exp_HowAmINotMyself = 1004033,
		[Token(Token = "0x4001283")]
		[InspectorName("Expressions/G-I/Exp_HummingOne")]
		Exp_HummingOne = 1004034,
		[Token(Token = "0x4001284")]
		[InspectorName("Expressions/G-I/Exp_ImBraverThanThought")]
		Exp_ImBraverThanThought = 1004035,
		[Token(Token = "0x4001285")]
		[InspectorName("Expressions/G-I/Exp_ISailedAcrossTheVoid_1")]
		Exp_ISailedAcrossTheVoid_1 = 1004036,
		[Token(Token = "0x4001286")]
		[InspectorName("Expressions/G-I/Exp_ISailedAcrossTheVoid_2")]
		Exp_ISailedAcrossTheVoid_2 = 1004037,
		[Token(Token = "0x4001287")]
		[InspectorName("Expressions/G-I/Exp_ISailedAcrossTheVoid_3")]
		Exp_ISailedAcrossTheVoid_3 = 1004038,
		[Token(Token = "0x4001288")]
		[InspectorName("Expressions/G-I/Exp_ISailedAcrossTheVoid_4")]
		Exp_ISailedAcrossTheVoid_4 = 1004039,
		[Token(Token = "0x4001289")]
		[InspectorName("Expressions/G-I/Exp_ISailedAcrossTheVoid_5")]
		Exp_ISailedAcrossTheVoid_5 = 1004040,
		[Token(Token = "0x400128A")]
		[InspectorName("Expressions/G-I/Exp_ISailedAcrossTheVoid_6")]
		Exp_ISailedAcrossTheVoid_6 = 1004041,
		[Token(Token = "0x400128B")]
		[InspectorName("Expressions/G-I/Exp_ISetMyMindInMotion")]
		Exp_ISetMyMindInMotion = 1004042,
		[Token(Token = "0x400128C")]
		[InspectorName("Expressions/G-I/Exp_ItsSomebody")]
		Exp_ItsSomebody = 1004043,
		[Token(Token = "0x400128D")]
		[InspectorName("Expressions/G-I/Exp_IWasChosenToGo_1")]
		Exp_IWasChosenToGo_1 = 1004044,
		[Token(Token = "0x400128E")]
		[InspectorName("Expressions/G-I/Exp_IWasChosenToGo_2")]
		Exp_IWasChosenToGo_2 = 1004045,
		[Token(Token = "0x400128F")]
		[InspectorName("Expressions/G-I/Exp_IWasChosenToGo_3")]
		Exp_IWasChosenToGo_3 = 1004046,
		[Token(Token = "0x4001290")]
		[InspectorName("Expressions/J-N/Exp_JoinMeVarOne")]
		Exp_JoinMeVarOne = 1004047,
		[Token(Token = "0x4001291")]
		[InspectorName("Expressions/J-N/Exp_KeepTrying")]
		Exp_KeepTrying = 1004048,
		[Token(Token = "0x4001292")]
		[InspectorName("Expressions/J-N/Exp_KnightNeedsASword_1")]
		Exp_KnightNeedsASword_1 = 1004049,
		[Token(Token = "0x4001293")]
		[InspectorName("Expressions/J-N/Exp_KnightNeedsASword_2")]
		Exp_KnightNeedsASword_2 = 1004050,
		[Token(Token = "0x4001294")]
		[InspectorName("Expressions/J-N/Exp_LibraryIsMemoryPalace")]
		Exp_LibraryIsMemoryPalace = 1004051,
		[Token(Token = "0x4001295")]
		[InspectorName("Expressions/J-N/Exp_LookAtPalm")]
		Exp_LookAtPalm = 1004052,
		[Token(Token = "0x4001296")]
		[InspectorName("Expressions/J-N/Exp_LotsOfMystery")]
		Exp_LotsOfMystery = 1004053,
		[Token(Token = "0x4001297")]
		[InspectorName("Expressions/J-N/Exp_LotsOfWorkToDo")]
		Exp_LotsOfWorkToDo = 1004054,
		[Token(Token = "0x4001298")]
		[InspectorName("Expressions/J-N/Exp_MakeYourOwnDeck")]
		Exp_MakeYourOwnDeck = 1004055,
		[Token(Token = "0x4001299")]
		[InspectorName("Expressions/J-N/Exp_MaybeNextTime")]
		Exp_MaybeNextTime = 1004056,
		[Token(Token = "0x400129A")]
		[InspectorName("Expressions/J-N/Exp_MoreKeysOutThere")]
		Exp_MoreKeysOutThere = 1004057,
		[Token(Token = "0x400129B")]
		[InspectorName("Expressions/J-N/Exp_MoreToGoBasic")]
		Exp_MoreToGoBasic = 1004058,
		[Token(Token = "0x400129C")]
		[InspectorName("Expressions/J-N/Exp_MovementIsALittleWeird_1")]
		Exp_MovementIsALittleWeird_1 = 1004059,
		[Token(Token = "0x400129D")]
		[InspectorName("Expressions/J-N/Exp_MovementIsALittleWeird_2")]
		Exp_MovementIsALittleWeird_2 = 1004060,
		[Token(Token = "0x400129E")]
		[InspectorName("Expressions/J-N/Exp_MovementIsALittleWeird_3")]
		Exp_MovementIsALittleWeird_3 = 1004061,
		[Token(Token = "0x400129F")]
		[InspectorName("Expressions/J-N/Exp_MumblingOne")]
		Exp_MumblingOne = 1004062,
		[Token(Token = "0x40012A0")]
		[InspectorName("Expressions/J-N/Exp_MusicShelvesReminder")]
		Exp_MusicShelvesReminder = 1004063,
		[Token(Token = "0x40012A1")]
		[InspectorName("Expressions/J-N/Exp_MyPlanetWasDestroyed_1")]
		Exp_MyPlanetWasDestroyed_1 = 1004064,
		[Token(Token = "0x40012A2")]
		[InspectorName("Expressions/J-N/Exp_MyPlanetWasDestroyed_2")]
		Exp_MyPlanetWasDestroyed_2 = 1004065,
		[Token(Token = "0x40012A3")]
		[InspectorName("Expressions/J-N/Exp_NightLilyNeedStarlight")]
		Exp_NightLilyNeedStarlight = 1004066,
		[Token(Token = "0x40012A4")]
		[InspectorName("Expressions/J-N/Exp_NotTooBad")]
		Exp_NotTooBad = 1004067,
		[Token(Token = "0x40012A5")]
		[InspectorName("Expressions/J-N/Exp_NowWeKnowEachOther_1")]
		Exp_NowWeKnowEachOther_1 = 1004068,
		[Token(Token = "0x40012A6")]
		[InspectorName("Expressions/J-N/Exp_NowWeKnowEachOther_2")]
		Exp_NowWeKnowEachOther_2 = 1004069,
		[Token(Token = "0x40012A7")]
		[InspectorName("Expressions/O-P/Exp_OhRightItsACurio_1")]
		Exp_OhRightItsACurio_1 = 1004070,
		[Token(Token = "0x40012A8")]
		[InspectorName("Expressions/O-P/Exp_OhRightItsACurio_2")]
		Exp_OhRightItsACurio_2 = 1004071,
		[Token(Token = "0x40012A9")]
		[InspectorName("Expressions/O-P/OoSplendid")]
		OoSplendid = 1004072,
		[Token(Token = "0x40012AA")]
		[InspectorName("Expressions/O-P/Exp_OoTopShelf")]
		Exp_OoTopShelf = 1004073,
		[Token(Token = "0x40012AB")]
		[InspectorName("Expressions/O-P/Exp_OverHereVarOne")]
		Exp_OverHereVarOne = 1004074,
		[Token(Token = "0x40012AC")]
		[InspectorName("Expressions/O-P/Exp_OverHereVarTwo")]
		Exp_OverHereVarTwo = 1004075,
		[Token(Token = "0x40012AD")]
		[InspectorName("Expressions/O-P/Exp_PickupFactBlaster")]
		Exp_PickupFactBlaster = 1004076,
		[Token(Token = "0x40012AE")]
		[InspectorName("Expressions/O-P/Exp_PictureInThePlantRoom_1")]
		Exp_PictureInThePlantRoom_1 = 1004077,
		[Token(Token = "0x40012AF")]
		[InspectorName("Expressions/O-P/Exp_PictureInThePlantRoom_2")]
		Exp_PictureInThePlantRoom_2 = 1004078,
		[Token(Token = "0x40012B0")]
		[InspectorName("Expressions/O-P/Exp_PlanetForgeInObservatory_1")]
		Exp_PlanetForgeInObservatory_1 = 1004079,
		[Token(Token = "0x40012B1")]
		[InspectorName("Expressions/O-P/Exp_PlanetForgeInObservatory_2")]
		Exp_PlanetForgeInObservatory_2 = 1004080,
		[Token(Token = "0x40012B2")]
		[InspectorName("Expressions/O-P/Exp_PlanetForgeInObservatory_3")]
		Exp_PlanetForgeInObservatory_3 = 1004081,
		[Token(Token = "0x40012B3")]
		[InspectorName("Expressions/O-P/Exp_PlanetForgeInObservatory_4")]
		Exp_PlanetForgeInObservatory_4 = 1004082,
		[Token(Token = "0x40012B4")]
		[InspectorName("Expressions/O-P/Exp_PlanetForgeInObservatory_5")]
		Exp_PlanetForgeInObservatory_5 = 1004083,
		[Token(Token = "0x40012B5")]
		[InspectorName("Expressions/O-P/Exp_PutBaubleInWindow")]
		Exp_PutBaubleInWindow = 1004084,
		[Token(Token = "0x40012B6")]
		[InspectorName("Expressions/R/Exp_ReleaseGripButton")]
		Exp_ReleaseGripButton = 1004085,
		[Token(Token = "0x40012B7")]
		[InspectorName("Expressions/R/Exp_RemeberGatherStarPuzzle")]
		Exp_RemeberGatherStarPuzzle = 1004086,
		[Token(Token = "0x40012B8")]
		[InspectorName("Expressions/R/Exp_RemindCreateCrystals")]
		Exp_RemindCreateCrystals = 1004087,
		[Token(Token = "0x40012B9")]
		[InspectorName("Expressions/R/Exp_RemindCrystalsInPlanetForge_1")]
		Exp_RemindCrystalsInPlanetForge_1 = 1004088,
		[Token(Token = "0x40012BA")]
		[InspectorName("Expressions/R/Exp_RemindCrystalsInPlanetForge_2")]
		Exp_RemindCrystalsInPlanetForge_2 = 1004089,
		[Token(Token = "0x40012BB")]
		[InspectorName("Expressions/R/Exp_RemindDiveHelmet")]
		Exp_RemindDiveHelmet = 1004090,
		[Token(Token = "0x40012BC")]
		[InspectorName("Expressions/R/Exp_RemindDragonEyes")]
		Exp_RemindDragonEyes = 1004091,
		[Token(Token = "0x40012BD")]
		[InspectorName("Expressions/R/Exp_ReminderPlantRoomPainting")]
		Exp_ReminderPlantRoomPainting = 1004092,
		[Token(Token = "0x40012BE")]
		[InspectorName("Expressions/R/Exp_RemindFindKnight")]
		Exp_RemindFindKnight = 1004093,
		[Token(Token = "0x40012BF")]
		[InspectorName("Expressions/R/Exp_RemindFlipNotecard")]
		Exp_RemindFlipNotecard = 1004094,
		[Token(Token = "0x40012C0")]
		[InspectorName("Expressions/R/Exp_RemindGetSunForBauble")]
		Exp_RemindGetSunForBauble = 1004095,
		[Token(Token = "0x40012C1")]
		[InspectorName("Expressions/R/Exp_RemindGiveDeckGoodToss")]
		Exp_RemindGiveDeckGoodToss = 1004096,
		[Token(Token = "0x40012C2")]
		[InspectorName("Expressions/R/Exp_RemindGoToNightLily")]
		Exp_RemindGoToNightLily = 1004097,
		[Token(Token = "0x40012C3")]
		[InspectorName("Expressions/R/Exp_RemindHowToMemorize")]
		Exp_RemindHowToMemorize = 1004098,
		[Token(Token = "0x40012C4")]
		[InspectorName("Expressions/R/Exp_RemindKeepBlastingCurios")]
		Exp_RemindKeepBlastingCurios = 1004099,
		[Token(Token = "0x40012C5")]
		[InspectorName("Expressions/R/Exp_RemindMeteor_1")]
		Exp_RemindMeteor_1 = 1004100,
		[Token(Token = "0x40012C6")]
		[InspectorName("Expressions/R/Exp_RemindMeteor_2")]
		Exp_RemindMeteor_2 = 1004101,
		[Token(Token = "0x40012C7")]
		[InspectorName("Expressions/R/Exp_RemindNightLilySeed")]
		Exp_RemindNightLilySeed = 1004102,
		[Token(Token = "0x40012C8")]
		[InspectorName("Expressions/R/Exp_RemindPickUpApple")]
		Exp_RemindPickUpApple = 1004103,
		[Token(Token = "0x40012C9")]
		[InspectorName("Expressions/R/Exp_RemindPlaySongGoToCove")]
		Exp_RemindPlaySongGoToCove = 1004104,
		[Token(Token = "0x40012CA")]
		[InspectorName("Expressions/R/Exp_RemindStarInElevator")]
		Exp_RemindStarInElevator = 1004105,
		[Token(Token = "0x40012CB")]
		[InspectorName("Expressions/R/Exp_RemindThrowDeckIntoAir")]
		Exp_RemindThrowDeckIntoAir = 1004106,
		[Token(Token = "0x40012CC")]
		[InspectorName("Expressions/R/Exp_RemindTryStarSong")]
		Exp_RemindTryStarSong = 1004107,
		[Token(Token = "0x40012CD")]
		[InspectorName("Expressions/R/Exp_RemindUseLantern")]
		Exp_RemindUseLantern = 1004108,
		[Token(Token = "0x40012CE")]
		[InspectorName("Expressions/R/Exp_RemindUseThumbsticks")]
		Exp_RemindUseThumbsticks = 1004109,
		[Token(Token = "0x40012CF")]
		[InspectorName("Expressions/R/Exp_ReturnMusicFromShelves_1")]
		Exp_ReturnMusicFromShelves_1 = 1004110,
		[Token(Token = "0x40012D0")]
		[InspectorName("Expressions/R/Exp_ReturnMusicFromShelves_2")]
		Exp_ReturnMusicFromShelves_2 = 1004111,
		[Token(Token = "0x40012D1")]
		[InspectorName("Expressions/S-X/Exp_ShootRightAnswer")]
		Exp_ShootRightAnswer = 1004112,
		[Token(Token = "0x40012D2")]
		[InspectorName("Expressions/S-X/Exp_SomethingInTheGlobe")]
		Exp_SomethingInTheGlobe = 1004113,
		[Token(Token = "0x40012D3")]
		[InspectorName("Expressions/S-X/Exp_Splendid")]
		Exp_Splendid = 1004114,
		[Token(Token = "0x40012D4")]
		[InspectorName("Expressions/S-X/Exp_StarFragCouldHelp_1")]
		Exp_StarFragCouldHelp_1 = 1004115,
		[Token(Token = "0x40012D5")]
		[InspectorName("Expressions/S-X/Exp_StarFragCouldHelp_2")]
		Exp_StarFragCouldHelp_2 = 1004116,
		[Token(Token = "0x40012D6")]
		[InspectorName("Expressions/S-X/Exp_StillGotMoreToGo")]
		Exp_StillGotMoreToGo = 1004117,
		[Token(Token = "0x40012D7")]
		[InspectorName("Expressions/S-X/Exp_TestYourselfWhenever")]
		Exp_TestYourselfWhenever = 1004118,
		[Token(Token = "0x40012D8")]
		[InspectorName("Expressions/S-X/Exp_ThatsPrettyGood")]
		Exp_ThatsPrettyGood = 1004119,
		[Token(Token = "0x40012D9")]
		[InspectorName("Expressions/S-X/Exp_ThereIsADragon")]
		Exp_ThereIsADragon = 1004120,
		[Token(Token = "0x40012DA")]
		[InspectorName("Expressions/S-X/Exp_ThereIsALantern")]
		Exp_ThereIsALantern = 1004121,
		[Token(Token = "0x40012DB")]
		[InspectorName("Expressions/S-X/Exp_ThrowDeckHarder")]
		Exp_ThrowDeckHarder = 1004122,
		[Token(Token = "0x40012DC")]
		[InspectorName("Expressions/S-X/Exp_ThrowDeckIntoSky")]
		Exp_ThrowDeckIntoSky = 1004123,
		[Token(Token = "0x40012DD")]
		[InspectorName("Expressions/S-X/Exp_TryOutTheStarSong")]
		Exp_TryOutTheStarSong = 1004124,
		[Token(Token = "0x40012DE")]
		[InspectorName("Expressions/S-X/Exp_WelcomeToStore")]
		Exp_WelcomeToStore = 1004125,
		[Token(Token = "0x40012DF")]
		[InspectorName("Expressions/S-X/Exp_WereYouRight")]
		Exp_WereYouRight = 1004126,
		[Token(Token = "0x40012E0")]
		[InspectorName("Expressions/S-X/Exp_WhenYouGotThemFindMe")]
		Exp_WhenYouGotThemFindMe = 1004127,
		[Token(Token = "0x40012E1")]
		[InspectorName("Expressions/S-X/Exp_Wonderful")]
		Exp_Wonderful = 1004128,
		[Token(Token = "0x40012E2")]
		[InspectorName("Expressions/S-X/Exp_XylophoneInMusicRoom")]
		Exp_XylophoneInMusicRoom = 1004129,
		[Token(Token = "0x40012E3")]
		[InspectorName("Expressions/Y-Z/Exp_YooHooJoinMe")]
		Exp_YooHooJoinMe = 1004130,
		[Token(Token = "0x40012E4")]
		[InspectorName("Expressions/Y-Z/Exp_YooHooOverHere")]
		Exp_YooHooOverHere = 1004131,
		[Token(Token = "0x40012E5")]
		[InspectorName("Expressions/Y-Z/Exp_YouAlreadyKnowKey")]
		Exp_YouAlreadyKnowKey = 1004132,
		[Token(Token = "0x40012E6")]
		[InspectorName("Expressions/Y-Z/Exp_YouCanActivatePlanetForge_1")]
		Exp_YouCanActivatePlanetForge_1 = 1004133,
		[Token(Token = "0x40012E7")]
		[InspectorName("Expressions/Y-Z/Exp_YouCanActivatePlanetForge_2")]
		Exp_YouCanActivatePlanetForge_2 = 1004134,
		[Token(Token = "0x40012E8")]
		[InspectorName("Expressions/Y-Z/Exp_YouFoundFirstCurio")]
		Exp_YouFoundFirstCurio = 1004135,
		[Token(Token = "0x40012E9")]
		[InspectorName("Expressions/Y-Z/Exp_YouGotTheBasics")]
		Exp_YouGotTheBasics = 1004136,
		[Token(Token = "0x40012EA")]
		[InspectorName("Expressions/Y-Z/Exp_YouRestoredMyPlanet_1")]
		Exp_YouRestoredMyPlanet_1 = 1004137,
		[Token(Token = "0x40012EB")]
		[InspectorName("Expressions/Y-Z/Exp_YouRestoredMyPlanet_2")]
		Exp_YouRestoredMyPlanet_2 = 1004138,
		[Token(Token = "0x40012EC")]
		[InspectorName("Expressions/Y-Z/Exp_YouRestoredMyPlanet_3")]
		Exp_YouRestoredMyPlanet_3 = 1004139,
		[Token(Token = "0x40012ED")]
		[InspectorName("Expressions/Y-Z/Exp_YouRestoredMyPlanet_4")]
		Exp_YouRestoredMyPlanet_4 = 1004140,
		[Token(Token = "0x40012EE")]
		[InspectorName("Expressions/Y-Z/Exp_YouWillEnjoyThat")]
		Exp_YouWillEnjoyThat = 1004141,
		[Token(Token = "0x40012EF")]
		[InspectorName("Subtitle_Messages/Subtitle_Message_Downloading")]
		Subtitle_Message_Downloading = 1005000,
		[Token(Token = "0x40012F0")]
		[InspectorName("Store/Store_Community_Decks_1")]
		Store_Community_Decks_1 = 1006001,
		[Token(Token = "0x40012F1")]
		[InspectorName("Store/Store_Community_Decks_2")]
		Store_Community_Decks_2 = 1006002,
		[Token(Token = "0x40012F2")]
		[InspectorName("Store/Store_Community_Decks_3")]
		Store_Community_Decks_3 = 1006003,
		[Token(Token = "0x40012F3")]
		[InspectorName("Store/Store_Refresh")]
		Store_Refresh = 1006004,
		[Token(Token = "0x40012F4")]
		[InspectorName("Store/Store_Search")]
		Store_Search = 1006005,
		[Token(Token = "0x40012F5")]
		[InspectorName("Store/Store_App_Board_1")]
		Store_App_Board_1 = 1006006,
		[Token(Token = "0x40012F6")]
		[InspectorName("Store/Store_App_Board_2")]
		Store_App_Board_2 = 1006007,
		[Token(Token = "0x40012F7")]
		[InspectorName("Store/Store_Main_Display_1")]
		Store_Main_Display_1 = 1006008,
		[Token(Token = "0x40012F8")]
		[InspectorName("Store/Store_Secondary_Display_1")]
		Store_Secondary_Display_1 = 1006009,
		[Token(Token = "0x40012F9")]
		[InspectorName("Store/Store_Secondary_Display_2")]
		Store_Secondary_Display_2 = 1006010,
		[Token(Token = "0x40012FA")]
		[InspectorName("Store/Store_Gem_Free")]
		Store_Gem_Free = 1006011,
		[Token(Token = "0x40012FB")]
		[InspectorName("Store/Store_Gem_Purchased")]
		Store_Gem_Purchased = 1006012,
		[Token(Token = "0x40012FC")]
		[InspectorName("Store/Store_Not_Purchased")]
		Store_Not_Purchased = 1006013,
		[Token(Token = "0x40012FD")]
		[InspectorName("Store/Store_Purchase_Successful")]
		Store_Purchase_Successful = 1006014,
		[Token(Token = "0x40012FE")]
		[InspectorName("Store/Store_Unable_To_Complete")]
		Store_Unable_To_Complete = 1006015,
		[Token(Token = "0x40012FF")]
		[InspectorName("Store/Store_Contents")]
		Store_Contents = 1006016,
		[Token(Token = "0x4001300")]
		[InspectorName("Store/Store_Mega_Bundle")]
		Store_Mega_Bundle = 1006017,
		[Token(Token = "0x4001301")]
		[InspectorName("Store/Store_Bundles")]
		Store_Bundles = 1006018,
		[Token(Token = "0x4001302")]
		[InspectorName("Store/Store_Unable_To_Get_Prices")]
		Store_Unable_To_Get_Prices = 1006019,
		[Token(Token = "0x4001303")]
		[InspectorName("Puzzles/Puzzle_Song_Of_Starlight")]
		Puzzle_Song_Of_Starlight = 1007000,
		[Token(Token = "0x4001304")]
		[InspectorName("Puzzles/Puzzle_Song_Of_Sunshine")]
		Puzzle_Song_Of_Sunshine = 1007001,
		[Token(Token = "0x4001305")]
		[InspectorName("Puzzles/Puzzle_Song_Of_Storms")]
		Puzzle_Song_Of_Storms = 1007002,
		[Token(Token = "0x4001306")]
		[InspectorName("Puzzles/Puzzle_Book_Rock_1")]
		Puzzle_Book_Rock_1 = 1007003,
		[Token(Token = "0x4001307")]
		[InspectorName("Puzzles/Puzzle_Book_Rock_2")]
		Puzzle_Book_Rock_2 = 1007004,
		[Token(Token = "0x4001308")]
		[InspectorName("Puzzles/Puzzle_Book_Shanties")]
		Puzzle_Book_Shanties = 1007005,
		[Token(Token = "0x4001309")]
		[InspectorName("Puzzles/Puzzle_Book_Music_Of_The_Planes")]
		Puzzle_Book_Music_Of_The_Planes = 1007006,
		[Token(Token = "0x400130A")]
		[InspectorName("Puzzles/Puzzle_Music_Shelf")]
		Puzzle_Music_Shelf = 1007007,
		[Token(Token = "0x400130B")]
		[InspectorName("Puzzles/Obs_Telescope/Obs_Telescope_Out_Of_Order")]
		Obs_Telescope_Out_Of_Order = 1007008,
		[Token(Token = "0x400130C")]
		[InspectorName("Puzzles/Obs_Telescope/Obs_Telescope_Check_Back_Later")]
		Obs_Telescope_Check_Back_Later = 1007009,
		[Token(Token = "0x400130D")]
		[InspectorName("Login/Login_Enter_Details")]
		Login_Enter_Details = 1008000,
		[Token(Token = "0x400130E")]
		[InspectorName("Login/Login_Forgot_Password")]
		Login_Forgot_Password = 1008001,
		[Token(Token = "0x400130F")]
		[InspectorName("Login/Login_Language")]
		Login_Language = 1008002,
		[Token(Token = "0x4001310")]
		[InspectorName("Login/Login")]
		Login_Login = 1008003,
		[Token(Token = "0x4001311")]
		[InspectorName("Login/Login_New_User")]
		Login_New_User = 1008004,
		[Token(Token = "0x4001312")]
		[InspectorName("Login/Login_Welcome")]
		Login_Welcome = 1008005,
		[Token(Token = "0x4001313")]
		[InspectorName("Login/Login_Get_Started")]
		Login_Get_Started = 1008006,
		[Token(Token = "0x4001314")]
		[InspectorName("Login/Login_First_Name")]
		Login_First_Name = 1008007,
		[Token(Token = "0x4001315")]
		[InspectorName("Login/Login_Last_Name")]
		Login_Last_Name = 1008008,
		[Token(Token = "0x4001316")]
		[InspectorName("Login/Login_Phone")]
		Login_Phone = 1008009,
		[Token(Token = "0x4001317")]
		[InspectorName("Login/Login_Email")]
		Login_Email = 1008010,
		[Token(Token = "0x4001318")]
		[InspectorName("Login/Login_Username")]
		Login_Username = 1008011,
		[Token(Token = "0x4001319")]
		[InspectorName("Login/Login_Password")]
		Login_Password = 1008012,
		[Token(Token = "0x400131A")]
		[InspectorName("Login/Login_Submit")]
		Login_Submit = 1008013,
		[Token(Token = "0x400131B")]
		[InspectorName("Session/Session_Cannot_Connect")]
		Session_Cannot_Connect = 1009000,
		[Token(Token = "0x400131C")]
		[InspectorName("Session/Session_Server_Issues")]
		Session_Server_Issues = 1009001,
		[Token(Token = "0x400131D")]
		[InspectorName("Fact Blaster/FB_Take_A_Test_1")]
		FB_Take_A_Test_1 = 1010000,
		[Token(Token = "0x400131E")]
		[InspectorName("Fact Blaster/FB_Take_A_Test_2")]
		FB_Take_A_Test_2 = 1010001,
		[Token(Token = "0x400131F")]
		[InspectorName("Keep It Up Cards/Keep_It_Up_Card")]
		Keep_It_Up_Card = 1011000,
		[Token(Token = "0x4001320")]
		[InspectorName("Keep It Up Cards/Keep_It_Up_Card_1")]
		Keep_It_Up_Card_1 = 1011001,
		[Token(Token = "0x4001321")]
		[InspectorName("Keep It Up Cards/Keep_It_Up_Card_2")]
		Keep_It_Up_Card_2 = 1011002,
		[Token(Token = "0x4001322")]
		[InspectorName("Keep It Up Cards/Keep_It_Up_Card_3")]
		Keep_It_Up_Card_3 = 1011003,
		[Token(Token = "0x4001323")]
		[InspectorName("Keep It Up Cards/Keep_It_Up_Card_4")]
		Keep_It_Up_Card_4 = 1011004,
		[Token(Token = "0x4001324")]
		[InspectorName("Keep It Up Cards/Keep_It_Up_Card_5")]
		Keep_It_Up_Card_5 = 1011005,
		[Token(Token = "0x4001325")]
		[InspectorName("Keep It Up Cards/Keep_It_Up_Card_6")]
		Keep_It_Up_Card_6 = 1011006,
		[Token(Token = "0x4001326")]
		[InspectorName("Keep It Up Cards/Keep_It_Up_Card_7")]
		Keep_It_Up_Card_7 = 1011007,
		[Token(Token = "0x4001327")]
		[InspectorName("Keep It Up Cards/Keep_It_Up_Card_8")]
		Keep_It_Up_Card_8 = 1011008,
		[Token(Token = "0x4001328")]
		[InspectorName("Credits/Credits_CEO")]
		Credits_CEO = 1012000,
		[Token(Token = "0x4001329")]
		[InspectorName("Credits/Credits_Operations")]
		Credits_Operations = 1012001,
		[Token(Token = "0x400132A")]
		[InspectorName("Credits/Credits_Strategy")]
		Credits_Strategy = 1012002,
		[Token(Token = "0x400132B")]
		[InspectorName("Credits/Credits_Technology")]
		Credits_Technology = 1012003,
		[Token(Token = "0x400132C")]
		[InspectorName("Credits/Credits_Programming")]
		Credits_Programming = 1012004,
		[Token(Token = "0x400132D")]
		[InspectorName("Credits/Credits_API")]
		Credits_API = 1012005,
		[Token(Token = "0x400132E")]
		[InspectorName("Credits/Credits_Concept_Art")]
		Credits_Concept_Art = 1012006,
		[Token(Token = "0x400132F")]
		[InspectorName("Credits/Credits_3D_Modeling")]
		Credits_3D_Modeling = 1012007,
		[Token(Token = "0x4001330")]
		[InspectorName("Credits/Credits_Animation")]
		Credits_Animation = 1012008,
		[Token(Token = "0x4001331")]
		[InspectorName("Credits/Credits_Voices")]
		Credits_Voices = 1012009,
		[Token(Token = "0x4001332")]
		[InspectorName("Credits/Credits_PR")]
		Credits_PR = 1012010,
		[Token(Token = "0x4001333")]
		[InspectorName("Credits/Credits_Accounting")]
		Credits_Accounting = 1012011,
		[Token(Token = "0x4001334")]
		[InspectorName("Credits/Credits_Special_Thanks")]
		Credits_Special_Thanks = 1012012,
		[Token(Token = "0x4001335")]
		[InspectorName("Credits/Credits_Meta")]
		Credits_Meta = 1012013,
		[Token(Token = "0x4001336")]
		[InspectorName("Credits/Credits_Kaplan")]
		Credits_Kaplan = 1012014,
		[Token(Token = "0x4001337")]
		[InspectorName("Credits/Credits_Families")]
		Credits_Families = 1012015,
		[Token(Token = "0x4001338")]
		[InspectorName("Credits/Credits_Attribution")]
		Credits_Attribution = 1012016,
		[Token(Token = "0x4001339")]
		[InspectorName("Info_Popup/Flashcard_Not_Yet")]
		Flashcard_Not_Yet = 1013000,
		[Token(Token = "0x400133A")]
		[InspectorName("Info_Popup/Info_Hold_Grip_To_Pick_Up")]
		Info_Hold_Grip_To_Pick_Up = 1013001,
		[Token(Token = "0x400133B")]
		[InspectorName("Info_Popup/Info_Pull_Trigger_To_Flip_Card")]
		Info_Pull_Trigger_To_Flip_Card = 1013002,
		[Token(Token = "0x400133C")]
		[InspectorName("Info_Popup/Info_Touch_Memorized")]
		Info_Touch_Memorized = 1013003,
		[Token(Token = "0x400133D")]
		[InspectorName("Info_Popup/Info_Hold_Thumbstick")]
		Info_Hold_Thumbstick = 1013004,
		[Token(Token = "0x400133E")]
		[InspectorName("Info_Popup/Info_Look_At_Palm")]
		Info_Look_At_Palm = 1013005,
		[Token(Token = "0x400133F")]
		[InspectorName("Info_Popup/Info_Pick_Up_And_Toss")]
		Info_Pick_Up_And_Toss = 1013006,
		[Token(Token = "0x4001340")]
		[InspectorName("Info_Popup/Info_Pull_Trigger_To_Shoot")]
		Info_Pull_Trigger_To_Shoot = 1013007,
		[Token(Token = "0x4001341")]
		[InspectorName("Info_Popup/Info_Hold_Grip_To_Grab")]
		Info_Hold_Grip_To_Grab = 1013008,
		[Token(Token = "0x4001342")]
		[InspectorName("Info_Popup/Info_Search_All_Decks")]
		Info_Search_All_Decks = 1013009,
		[Token(Token = "0x4001343")]
		[InspectorName("Info_Popup/Info_Left_Palm_1")]
		Info_Left_Palm_1 = 1013010,
		[Token(Token = "0x4001344")]
		[InspectorName("Info_Popup/Info_Left_Palm_2")]
		Info_Left_Palm_2 = 1013011,
		[Token(Token = "0x4001345")]
		[InspectorName("Info_Popup/Info_Got_New_Deck")]
		Info_Got_New_Deck = 1013012,
		[Token(Token = "0x4001346")]
		[InspectorName("Info_Popup/Info_Put_On_Head")]
		Info_Put_On_Head = 1013013,
		[Token(Token = "0x4001347")]
		[InspectorName("Info_Popup/Info_Press_B_To_Return")]
		Info_Press_B_To_Return = 1013014,
		[Token(Token = "0x4001348")]
		[InspectorName("Instructions/Instruction_B_Button")]
		Instruction_B_Button = 1014000,
		[Token(Token = "0x4001349")]
		[InspectorName("Instructions/Instruction_Thumbstick")]
		Instruction_Thumbstick = 1014001,
		[Token(Token = "0x400134A")]
		[InspectorName("Instructions/Instruction_Trigger")]
		Instruction_Trigger = 1014002,
		[Token(Token = "0x400134B")]
		[InspectorName("Instructions/Instruction_Grip")]
		Instruction_Grip = 1014003,
		[Token(Token = "0x400134C")]
		[InspectorName("Instructions/Instruction_Oculus_Button")]
		Instruction_Oculus_Button = 1014004,
		[Token(Token = "0x400134D")]
		[InspectorName("Instructions/Instruction_Tip")]
		Instruction_Tip = 1014005
	}
	[Token(Token = "0x2000392")]
	public class LocalizedTextObject : MonoBehaviour
	{
		[Token(Token = "0x2000393")]
		[CompilerGenerated]
		private sealed class <Start>d__4 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001352")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001353")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001354")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public LocalizedTextObject <>4__this;

			[Token(Token = "0x17000264")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60012ED")]
				[Address(RVA = "0xD84240", Offset = "0xD84240", VA = "0xD84240", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000265")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60012EF")]
				[Address(RVA = "0xD84288", Offset = "0xD84288", VA = "0xD84288", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60012EA")]
			[Address(RVA = "0xD83C58", Offset = "0xD83C58", VA = "0xD83C58")]
			[DebuggerHidden]
			public <Start>d__4(int <>1__state)
			{
			}

			[Token(Token = "0x60012EB")]
			[Address(RVA = "0xD83E9C", Offset = "0xD83E9C", VA = "0xD83E9C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60012EC")]
			[Address(RVA = "0xD83EA0", Offset = "0xD83EA0", VA = "0xD83EA0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60012EE")]
			[Address(RVA = "0xD84248", Offset = "0xD84248", VA = "0xD84248", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400134E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AllStrings stringEnum;

		[Token(Token = "0x400134F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool localizationIsPreloaded;

		[Token(Token = "0x4001350")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private TextMeshPro label;

		[Token(Token = "0x4001351")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private TextMeshProUGUI labelUGUI;

		[Token(Token = "0x60012E6")]
		[Address(RVA = "0xD83BE4", Offset = "0xD83BE4", VA = "0xD83BE4")]
		[IteratorStateMachine(typeof(<Start>d__4))]
		private IEnumerator Start()
		{
			return null;
		}

		[Token(Token = "0x60012E7")]
		[Address(RVA = "0xD83C80", Offset = "0xD83C80", VA = "0xD83C80")]
		private void SetTextByEnum(AllStrings stringEnum)
		{
		}

		[Token(Token = "0x60012E8")]
		[Address(RVA = "0xD83E8C", Offset = "0xD83E8C", VA = "0xD83E8C")]
		public LocalizedTextObject()
		{
		}
	}
}
namespace Librarium_IAP
{
	[Token(Token = "0x2000394")]
	public abstract class IAPProcessor
	{
		[Token(Token = "0x17000266")]
		public bool reqIAPSyncAtStart
		{
			[Token(Token = "0x60012F0")]
			[Address(RVA = "0xD84290", Offset = "0xD84290", VA = "0xD84290")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60012F1")]
			[Address(RVA = "0xD84298", Offset = "0xD84298", VA = "0xD84298")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x60012F2")]
		[Address(RVA = "0xD842A4", Offset = "0xD842A4", VA = "0xD842A4")]
		protected IAPProcessor()
		{
		}

		[Token(Token = "0x60012F3")]
		public abstract void GetPurchasedListings(Action<bool, List<Guid>> callback);

		[Token(Token = "0x60012F4")]
		public abstract void GetListingPrices(List<Guid> listingIds, Action<bool, Dictionary<Guid, string>> callback);

		[Token(Token = "0x60012F5")]
		public abstract void PurchaseListing(Guid listingId, Action<bool, string> callback);

		[Token(Token = "0x60012F6")]
		public abstract bool ValidateGotListings();
	}
	[Token(Token = "0x2000395")]
	public class OculusIAPProcessor : IAPProcessor
	{
		[Token(Token = "0x4001356")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		private bool gotListings;

		[Token(Token = "0x60012F7")]
		[Address(RVA = "0xD842C0", Offset = "0xD842C0", VA = "0xD842C0")]
		public OculusIAPProcessor()
		{
		}

		[Token(Token = "0x60012F8")]
		[Address(RVA = "0xD842E0", Offset = "0xD842E0", VA = "0xD842E0", Slot = "4")]
		public override void GetPurchasedListings(Action<bool, List<Guid>> listingIdsGetCallback)
		{
		}

		[Token(Token = "0x60012F9")]
		[Address(RVA = "0xD84408", Offset = "0xD84408", VA = "0xD84408", Slot = "5")]
		public override void GetListingPrices(List<Guid> listingIds, Action<bool, Dictionary<Guid, string>> callback)
		{
		}

		[Token(Token = "0x60012FA")]
		[Address(RVA = "0xD84674", Offset = "0xD84674", VA = "0xD84674", Slot = "6")]
		public override void PurchaseListing(Guid listingId, Action<bool, string> callback)
		{
		}

		[Token(Token = "0x60012FB")]
		[Address(RVA = "0xD84780", Offset = "0xD84780", VA = "0xD84780", Slot = "7")]
		public override bool ValidateGotListings()
		{
			return default(bool);
		}
	}
}
namespace Bucket
{
	[Token(Token = "0x2000399")]
	public static class Extensions
	{
		[Token(Token = "0x200039C")]
		[CompilerGenerated]
		private sealed class <RotateObjectAroundPoint>d__32 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001365")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001366")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001367")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float seconds;

			[Token(Token = "0x4001368")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Transform t;

			[Token(Token = "0x4001369")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Vector3 point;

			[Token(Token = "0x400136A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public Vector3 axis;

			[Token(Token = "0x400136B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public float rotateAmount;

			[Token(Token = "0x400136C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			private float <step>5__2;

			[Token(Token = "0x400136D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private float <rate>5__3;

			[Token(Token = "0x400136E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			private float <lastStep>5__4;

			[Token(Token = "0x17000267")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600134A")]
				[Address(RVA = "0xD8851C", Offset = "0xD8851C", VA = "0xD8851C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000268")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600134C")]
				[Address(RVA = "0xD88564", Offset = "0xD88564", VA = "0xD88564", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001347")]
			[Address(RVA = "0xD86694", Offset = "0xD86694", VA = "0xD86694")]
			[DebuggerHidden]
			public <RotateObjectAroundPoint>d__32(int <>1__state)
			{
			}

			[Token(Token = "0x6001348")]
			[Address(RVA = "0xD8834C", Offset = "0xD8834C", VA = "0xD8834C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001349")]
			[Address(RVA = "0xD88350", Offset = "0xD88350", VA = "0xD88350", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600134B")]
			[Address(RVA = "0xD88524", Offset = "0xD88524", VA = "0xD88524", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200039D")]
		[CompilerGenerated]
		private sealed class <WaitThenCallback>d__33 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400136F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001370")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001371")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float seconds;

			[Token(Token = "0x4001372")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Action callback;

			[Token(Token = "0x17000269")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001350")]
				[Address(RVA = "0xD88634", Offset = "0xD88634", VA = "0xD88634", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700026A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001352")]
				[Address(RVA = "0xD8867C", Offset = "0xD8867C", VA = "0xD8867C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600134D")]
			[Address(RVA = "0xD86740", Offset = "0xD86740", VA = "0xD86740")]
			[DebuggerHidden]
			public <WaitThenCallback>d__33(int <>1__state)
			{
			}

			[Token(Token = "0x600134E")]
			[Address(RVA = "0xD8856C", Offset = "0xD8856C", VA = "0xD8856C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600134F")]
			[Address(RVA = "0xD88570", Offset = "0xD88570", VA = "0xD88570", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001351")]
			[Address(RVA = "0xD8863C", Offset = "0xD8863C", VA = "0xD8863C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400135D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Action<object[]> genericMessageCallback;

		[Token(Token = "0x400135E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static WaitForSeconds waitForMessageToCompleteYield;

		[Token(Token = "0x6001302")]
		[Address(RVA = "0xD85348", Offset = "0xD85348", VA = "0xD85348")]
		public static void GetRequest(string url, Action<UnityWebRequest> callback)
		{
		}

		[Token(Token = "0x6001303")]
		[Address(RVA = "0xD85458", Offset = "0xD85458", VA = "0xD85458")]
		public static void SetLayer(this Transform transform, string layer, bool includeChildren = true)
		{
		}

		[Token(Token = "0x6001304")]
		[Address(RVA = "0xD855A4", Offset = "0xD855A4", VA = "0xD855A4")]
		public static float GetValueByFactor(this float factor, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x6001305")]
		[Address(RVA = "0xD854D8", Offset = "0xD854D8", VA = "0xD854D8")]
		public static void SetLayer(this Transform transform, int layer, bool includeChildren = true)
		{
		}

		[Token(Token = "0x6001306")]
		public static void Shuffle<T>(this IList<T> list)
		{
		}

		[Token(Token = "0x6001307")]
		public static T GetRandomArrayElement<T>(this T[] array)
		{
			return (T)null;
		}

		[Token(Token = "0x6001308")]
		[Address(RVA = "0xD855C8", Offset = "0xD855C8", VA = "0xD855C8")]
		public static Vector3[] ToVector3(this Vector2[] vectors)
		{
			return null;
		}

		[Token(Token = "0x6001309")]
		[Address(RVA = "0xD856C8", Offset = "0xD856C8", VA = "0xD856C8")]
		public static Vector2 Centroid(this ICollection<Vector2> vectors)
		{
			return default(Vector2);
		}

		[Token(Token = "0x600130A")]
		[Address(RVA = "0xD85808", Offset = "0xD85808", VA = "0xD85808")]
		public static Vector2 Abs(this Vector2 vector)
		{
			return default(Vector2);
		}

		[Token(Token = "0x600130B")]
		[Address(RVA = "0xD85814", Offset = "0xD85814", VA = "0xD85814")]
		public static Vector2 GetVectorAverage(Vector2 a, Vector2 b)
		{
			return default(Vector2);
		}

		[Token(Token = "0x600130C")]
		[Address(RVA = "0xD8582C", Offset = "0xD8582C", VA = "0xD8582C")]
		public static Vector2 XZVector2(this Vector3 v3)
		{
			return default(Vector2);
		}

		[Token(Token = "0x600130D")]
		[Address(RVA = "0xD85834", Offset = "0xD85834", VA = "0xD85834")]
		public static Vector3 XZVector3(this Vector2 v2)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600130E")]
		[Address(RVA = "0xD85840", Offset = "0xD85840", VA = "0xD85840")]
		public static Vector3 XZ(this Vector3 v3)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600130F")]
		[Address(RVA = "0xD85848", Offset = "0xD85848", VA = "0xD85848")]
		public static Vector3 GetXZVector3FromVector2(Vector2 v2, float y)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001310")]
		[Address(RVA = "0xD85858", Offset = "0xD85858", VA = "0xD85858")]
		public static Vector3 GetXZVector3FromVector2(Vector2 v2)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001311")]
		[Address(RVA = "0xD85864", Offset = "0xD85864", VA = "0xD85864")]
		public static Vector2[] GetPerpendicularNormalizedVectors(Vector2 originVector)
		{
			return null;
		}

		[Token(Token = "0x6001312")]
		[Address(RVA = "0xD85A08", Offset = "0xD85A08", VA = "0xD85A08")]
		public static void DrawSimpleCircle(Vector3 pos, float radius, Color color)
		{
		}

		[Token(Token = "0x6001313")]
		[Address(RVA = "0xD85B5C", Offset = "0xD85B5C", VA = "0xD85B5C")]
		public static Vector2 GetXYFromTanOfAngleInRads(float angle)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001314")]
		[Address(RVA = "0xD85B10", Offset = "0xD85B10", VA = "0xD85B10")]
		private static void DrawEllipse(Vector3 pos, Vector3 forward, Vector3 up, float radiusX, float radiusY, int segments, Color color, float duration = float.PositiveInfinity)
		{
		}

		[Token(Token = "0x6001315")]
		[Address(RVA = "0xD85B88", Offset = "0xD85B88", VA = "0xD85B88")]
		public static List<string> ListFilesInFolder(string path)
		{
			return null;
		}

		[Token(Token = "0x6001316")]
		[Address(RVA = "0xD85CEC", Offset = "0xD85CEC", VA = "0xD85CEC")]
		public static Texture2D DuplicateTextureToReadable(Texture2D source)
		{
			return null;
		}

		[Token(Token = "0x6001317")]
		[Address(RVA = "0xD85EB0", Offset = "0xD85EB0", VA = "0xD85EB0")]
		public static Texture2D GetTextureFromFilePath(string path)
		{
			return null;
		}

		[Token(Token = "0x6001318")]
		[Address(RVA = "0xD85F64", Offset = "0xD85F64", VA = "0xD85F64")]
		public static string GetStringFromFilePath(string path)
		{
			return null;
		}

		[Token(Token = "0x6001319")]
		[Address(RVA = "0xD8600C", Offset = "0xD8600C", VA = "0xD8600C")]
		public static float GetPathDistance(List<Vector3> path)
		{
			return default(float);
		}

		[Token(Token = "0x600131A")]
		[Address(RVA = "0xD8615C", Offset = "0xD8615C", VA = "0xD8615C")]
		public static void DisableChildParticleSystems(ParticleSystem[] ps)
		{
		}

		[Token(Token = "0x600131B")]
		[Address(RVA = "0xD86274", Offset = "0xD86274", VA = "0xD86274")]
		public static string AbbreviateNumber(int triggerValue)
		{
			return null;
		}

		[Token(Token = "0x600131C")]
		[Address(RVA = "0xD86478", Offset = "0xD86478", VA = "0xD86478")]
		public static ClockTimePackage GetClockTimePackageFromSeconds(int seconds)
		{
			return null;
		}

		[Token(Token = "0x600131D")]
		public static T GetCopyOf<T>(this Component comp, T other) where T : Component
		{
			return null;
		}

		[Token(Token = "0x600131E")]
		public static T AddComponent<T>(this GameObject go, T toAdd) where T : Component
		{
			return null;
		}

		[Token(Token = "0x600131F")]
		[Address(RVA = "0xD865BC", Offset = "0xD865BC", VA = "0xD865BC")]
		public static float ConvertInchesToMeters(float inches)
		{
			return default(float);
		}

		[Token(Token = "0x6001320")]
		[Address(RVA = "0xD865CC", Offset = "0xD865CC", VA = "0xD865CC")]
		[IteratorStateMachine(typeof(<RotateObjectAroundPoint>d__32))]
		public static IEnumerator RotateObjectAroundPoint(this Transform t, Vector3 point, Vector3 axis, float rotateAmount, float seconds)
		{
			return null;
		}

		[Token(Token = "0x6001321")]
		[Address(RVA = "0xD866BC", Offset = "0xD866BC", VA = "0xD866BC")]
		[IteratorStateMachine(typeof(<WaitThenCallback>d__33))]
		public static IEnumerator WaitThenCallback(float seconds, Action callback)
		{
			return null;
		}

		[Token(Token = "0x6001322")]
		public static IEnumerable<T> OrEmptyIfNull<T>(this IEnumerable<T> source)
		{
			return null;
		}

		[Token(Token = "0x6001323")]
		[Address(RVA = "0xD86768", Offset = "0xD86768", VA = "0xD86768")]
		public static Transform GetClosestEnemy(Transform _nexus)
		{
			return null;
		}

		[Token(Token = "0x6001324")]
		[Address(RVA = "0xD868A0", Offset = "0xD868A0", VA = "0xD868A0")]
		public static bool HasParameter(string paramName, Animator animator)
		{
			return default(bool);
		}

		[Token(Token = "0x6001325")]
		public static string SerializeObject<T>(this T toSerialize)
		{
			return null;
		}

		[Token(Token = "0x6001326")]
		public static T DeserializeObject<T>(this string toDeserialize)
		{
			return (T)null;
		}

		[Token(Token = "0x6001327")]
		[Address(RVA = "0xD86930", Offset = "0xD86930", VA = "0xD86930")]
		public static void PlayAudioAtRandomPitch(this AudioSource aSource)
		{
		}

		[Token(Token = "0x6001328")]
		[Address(RVA = "0xD8699C", Offset = "0xD8699C", VA = "0xD8699C")]
		public static void PlayAudioAtRandomPitch(this AudioSource aSource, AudioClip clip)
		{
		}

		[Token(Token = "0x6001329")]
		[Address(RVA = "0xD86A18", Offset = "0xD86A18", VA = "0xD86A18")]
		public static float GetSquaredDifference(float a, float b)
		{
			return default(float);
		}

		[Token(Token = "0x600132A")]
		[Address(RVA = "0xD86A80", Offset = "0xD86A80", VA = "0xD86A80")]
		public static float GetSquare(float a)
		{
			return default(float);
		}

		[Token(Token = "0x600132B")]
		[Address(RVA = "0xD86A88", Offset = "0xD86A88", VA = "0xD86A88")]
		public static float GetSemitoneInDecimal(int semitone)
		{
			return default(float);
		}

		[Token(Token = "0x600132C")]
		public static void PrintCollection<T>(IEnumerable<T> col)
		{
		}

		[Token(Token = "0x600132D")]
		[Address(RVA = "0xD86A98", Offset = "0xD86A98", VA = "0xD86A98")]
		public static List<float> GetAxisFromVectorList(List<Vector3> inputVector, Vector3 axis)
		{
			return null;
		}

		[Token(Token = "0x600132E")]
		[Address(RVA = "0xD86F98", Offset = "0xD86F98", VA = "0xD86F98")]
		public static void SetAlpha(this Material material, float value)
		{
		}

		[Token(Token = "0x600132F")]
		public static bool IsSubsetOf<T>(this List<T> coll1, List<T> coll2)
		{
			return default(bool);
		}

		[Token(Token = "0x6001330")]
		[Address(RVA = "0xD86FD0", Offset = "0xD86FD0", VA = "0xD86FD0")]
		public static string GetPath()
		{
			return null;
		}

		[Token(Token = "0x6001331")]
		[Address(RVA = "0xD8704C", Offset = "0xD8704C", VA = "0xD8704C")]
		public static string ConvertVector3ListToString(List<Vector3> vectors)
		{
			return null;
		}

		[Token(Token = "0x6001332")]
		[Address(RVA = "0xD87388", Offset = "0xD87388", VA = "0xD87388")]
		public static List<Vector3> LoadVector3ListFromStringArray(string[] vectorStringArray)
		{
			return null;
		}

		[Token(Token = "0x6001333")]
		[Address(RVA = "0xD8752C", Offset = "0xD8752C", VA = "0xD8752C")]
		public static void WriteStringToTextFile(string inputString, string fileName, bool pathIsIncludedInFilename = false)
		{
		}

		[Token(Token = "0x6001334")]
		[Address(RVA = "0xD875B0", Offset = "0xD875B0", VA = "0xD875B0")]
		public static string ReadStringFromTextFile(string fileName, bool pathIsIncludedInFileName)
		{
			return null;
		}

		[Token(Token = "0x6001335")]
		[Address(RVA = "0xD87624", Offset = "0xD87624", VA = "0xD87624")]
		public static string ReadStringFromTextFile(string path, string fileName)
		{
			return null;
		}

		[Token(Token = "0x6001336")]
		public static void SaveDataClassToLocalJSONFile<T>(T dataClass, string filename)
		{
		}

		[Token(Token = "0x6001337")]
		public static T LoadDataClassFromLocalJSONFile<T>(string filename)
		{
			return (T)null;
		}

		[Token(Token = "0x6001338")]
		[Address(RVA = "0xD8763C", Offset = "0xD8763C", VA = "0xD8763C")]
		public static string[] LoadStringArrayFromString(string _string)
		{
			return null;
		}

		[Token(Token = "0x6001339")]
		[Address(RVA = "0xD87814", Offset = "0xD87814", VA = "0xD87814")]
		public static string[] LoadStringArrayFromCSVFile(string fileName)
		{
			return null;
		}

		[Token(Token = "0x600133A")]
		[Address(RVA = "0xD87C74", Offset = "0xD87C74", VA = "0xD87C74")]
		public static Vector3 GetBallisticVelocity(Vector3 origin, Vector3 target, float angle)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600133B")]
		[Address(RVA = "0xD87E74", Offset = "0xD87E74", VA = "0xD87E74")]
		public static string SplitCamelCase(string input)
		{
			return null;
		}

		[Token(Token = "0x600133C")]
		[Address(RVA = "0xD87F10", Offset = "0xD87F10", VA = "0xD87F10")]
		public static bool IsNullOrEmpty(this string inputString)
		{
			return default(bool);
		}

		[Token(Token = "0x600133D")]
		[Address(RVA = "0xD87F70", Offset = "0xD87F70", VA = "0xD87F70")]
		public static double StandardDeviation(List<double> values)
		{
			return default(double);
		}

		[Token(Token = "0x600133E")]
		[Address(RVA = "0xD880B0", Offset = "0xD880B0", VA = "0xD880B0")]
		public static int FindGreatestDeviation(List<double> values)
		{
			return default(int);
		}
	}
	[Token(Token = "0x200039F")]
	public class BoolArg : EventArgs
	{
		[Token(Token = "0x4001374")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool engaged;

		[Token(Token = "0x6001355")]
		[Address(RVA = "0xD88694", Offset = "0xD88694", VA = "0xD88694")]
		public BoolArg(bool engaged)
		{
		}
	}
	[Token(Token = "0x20003A0")]
	public class IntArg : EventArgs
	{
		[Token(Token = "0x4001375")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int value;

		[Token(Token = "0x6001356")]
		[Address(RVA = "0xD88700", Offset = "0xD88700", VA = "0xD88700")]
		public IntArg(int value)
		{
		}
	}
	[Token(Token = "0x20003A1")]
	public class ClockTimePackage
	{
		[Token(Token = "0x4001376")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string minutes;

		[Token(Token = "0x4001377")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string seconds;

		[Token(Token = "0x4001378")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int originalSeconds;

		[Token(Token = "0x6001357")]
		[Address(RVA = "0xD86564", Offset = "0xD86564", VA = "0xD86564")]
		public ClockTimePackage(string minutes, string seconds, int originalSeconds)
		{
		}
	}
}
namespace BehaviorTree
{
	[Token(Token = "0x20003A2")]
	public class LibrariumExecutorConfig : TreeExecutorConfig
	{
		[Token(Token = "0x20003A3")]
		public enum LibrariumRootTree
		{
			[Token(Token = "0x400137B")]
			BasicTest,
			[Token(Token = "0x400137C")]
			EightRoot,
			[Token(Token = "0x400137D")]
			EightTestA,
			[Token(Token = "0x400137E")]
			GabeTestTreeExample
		}

		[Token(Token = "0x4001379")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LibrariumRootTree rootTree;

		[Token(Token = "0x6001358")]
		[Address(RVA = "0xD8876C", Offset = "0xD8876C", VA = "0xD8876C", Slot = "4")]
		public override Tree GetRootTree()
		{
			return null;
		}

		[Token(Token = "0x6001359")]
		[Address(RVA = "0xD88838", Offset = "0xD88838", VA = "0xD88838", Slot = "5")]
		protected override void SetTreeName()
		{
		}

		[Token(Token = "0x600135A")]
		[Address(RVA = "0xD888B0", Offset = "0xD888B0", VA = "0xD888B0")]
		public LibrariumExecutorConfig()
		{
		}
	}
	[Token(Token = "0x20003A4")]
	public class AddToTreeDataAction<T> : Node
	{
		[Token(Token = "0x400137F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private NodeState returnNodeState;

		[Token(Token = "0x4001380")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private string key;

		[Token(Token = "0x4001381")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T value;

		[Token(Token = "0x600135B")]
		public AddToTreeDataAction(Action tickTriggerEvent, TreeData treeData, NodeState returnNodeState, string key, T value, string nodeName = "Add to Tree Data")
		{
		}

		[Token(Token = "0x600135C")]
		public override NodeState Evaluate()
		{
			return default(NodeState);
		}
	}
	[Token(Token = "0x20003A5")]
	public class DelayUntilInitialLibraryLoadAction : Node
	{
		[Token(Token = "0x4001382")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool libraryAlreadyLoaded;

		[Token(Token = "0x600135D")]
		[Address(RVA = "0xD888C0", Offset = "0xD888C0", VA = "0xD888C0")]
		public DelayUntilInitialLibraryLoadAction(Action tickTriggerEvent, TreeData treeData, string nodeName = "Delay until initial library load")
		{
		}

		[Token(Token = "0x600135E")]
		[Address(RVA = "0xD88934", Offset = "0xD88934", VA = "0xD88934", Slot = "4")]
		public override NodeState Evaluate()
		{
			return default(NodeState);
		}

		[Token(Token = "0x600135F")]
		[Address(RVA = "0xD88A48", Offset = "0xD88A48", VA = "0xD88A48")]
		private void Complete()
		{
		}

		[Token(Token = "0x6001360")]
		[Address(RVA = "0xD88AD8", Offset = "0xD88AD8", VA = "0xD88AD8", Slot = "5")]
		protected override void HaltProcessing()
		{
		}
	}
	[Token(Token = "0x20003A6")]
	public class EightMoveAction : Node
	{
		[Token(Token = "0x4001383")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private EightController eight;

		[Token(Token = "0x4001384")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool arrived;

		[Token(Token = "0x6001361")]
		[Address(RVA = "0xD88B38", Offset = "0xD88B38", VA = "0xD88B38")]
		public EightMoveAction(Action tickTriggerEvent, TreeData treeData, string nodeName = "Eight Move Action")
		{
		}

		[Token(Token = "0x6001362")]
		[Address(RVA = "0xD88BE0", Offset = "0xD88BE0", VA = "0xD88BE0", Slot = "4")]
		public override NodeState Evaluate()
		{
			return default(NodeState);
		}

		[Token(Token = "0x6001363")]
		[Address(RVA = "0xD88D84", Offset = "0xD88D84", VA = "0xD88D84")]
		private void CompleteMove()
		{
		}

		[Token(Token = "0x6001364")]
		[Address(RVA = "0xD88E8C", Offset = "0xD88E8C", VA = "0xD88E8C", Slot = "5")]
		protected override void HaltProcessing()
		{
		}
	}
	[Token(Token = "0x20003A7")]
	public class EightPathAction : Node
	{
		[Token(Token = "0x4001385")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private EightController eight;

		[Token(Token = "0x6001365")]
		[Address(RVA = "0xD88F64", Offset = "0xD88F64", VA = "0xD88F64")]
		public EightPathAction(Action tickTriggerEvent, TreeData treeData, string nodeName = "Eight Path Action")
		{
		}

		[Token(Token = "0x6001366")]
		[Address(RVA = "0xD8900C", Offset = "0xD8900C", VA = "0xD8900C", Slot = "4")]
		public override NodeState Evaluate()
		{
			return default(NodeState);
		}

		[Token(Token = "0x6001367")]
		[Address(RVA = "0xD891B4", Offset = "0xD891B4", VA = "0xD891B4")]
		private void CompleteMove()
		{
		}

		[Token(Token = "0x6001368")]
		[Address(RVA = "0xD892BC", Offset = "0xD892BC", VA = "0xD892BC", Slot = "5")]
		protected override void HaltProcessing()
		{
		}
	}
	[Token(Token = "0x20003A8")]
	public class InitialOnboardingAction : Node
	{
		[Token(Token = "0x6001369")]
		[Address(RVA = "0xD89394", Offset = "0xD89394", VA = "0xD89394")]
		public InitialOnboardingAction(Action tickTriggerEvent, TreeData treeData, string nodeName = "Initial Onboarding")
		{
		}

		[Token(Token = "0x600136A")]
		[Address(RVA = "0xD8939C", Offset = "0xD8939C", VA = "0xD8939C", Slot = "4")]
		public override NodeState Evaluate()
		{
			return default(NodeState);
		}

		[Token(Token = "0x600136B")]
		[Address(RVA = "0xD89494", Offset = "0xD89494", VA = "0xD89494")]
		private void Complete()
		{
		}

		[Token(Token = "0x600136C")]
		[Address(RVA = "0xD8951C", Offset = "0xD8951C", VA = "0xD8951C", Slot = "5")]
		protected override void HaltProcessing()
		{
		}
	}
	[Token(Token = "0x20003A9")]
	public class PalmMenuOnboardingAction : Node
	{
		[Token(Token = "0x600136D")]
		[Address(RVA = "0xD89578", Offset = "0xD89578", VA = "0xD89578")]
		public PalmMenuOnboardingAction(Action tickTriggerEvent, TreeData treeData, string nodeName = "PalmMenu Onboarding")
		{
		}

		[Token(Token = "0x600136E")]
		[Address(RVA = "0xD89580", Offset = "0xD89580", VA = "0xD89580", Slot = "4")]
		public override NodeState Evaluate()
		{
			return default(NodeState);
		}

		[Token(Token = "0x600136F")]
		[Address(RVA = "0xD89684", Offset = "0xD89684", VA = "0xD89684")]
		private void Complete()
		{
		}

		[Token(Token = "0x6001370")]
		[Address(RVA = "0xD8970C", Offset = "0xD8970C", VA = "0xD8970C", Slot = "5")]
		protected override void HaltProcessing()
		{
		}
	}
	[Token(Token = "0x20003AA")]
	public class TestAction : Node
	{
		[Token(Token = "0x4001386")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private NodeState returnNodeState;

		[Token(Token = "0x4001387")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float tickMillis;

		[Token(Token = "0x4001388")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int ticksUntilReturn;

		[Token(Token = "0x4001389")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Timer delayTimer;

		[Token(Token = "0x400138A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int ticksCounted;

		[Token(Token = "0x6001371")]
		[Address(RVA = "0xD89768", Offset = "0xD89768", VA = "0xD89768")]
		public TestAction(Action tickTriggerEvent, TreeData treeData, NodeState returnNodeState, float tickMillis, int ticksUntilReturn, string nodeName = "Test Action")
		{
		}

		[Token(Token = "0x6001372")]
		[Address(RVA = "0xD898A8", Offset = "0xD898A8", VA = "0xD898A8")]
		private void CompleteTick(object source, ElapsedEventArgs e)
		{
		}

		[Token(Token = "0x6001373")]
		[Address(RVA = "0xD898F8", Offset = "0xD898F8", VA = "0xD898F8", Slot = "4")]
		public override NodeState Evaluate()
		{
			return default(NodeState);
		}
	}
	[Token(Token = "0x20003AB")]
	public class TraversableOnboardingAction : Node
	{
		[Token(Token = "0x6001374")]
		[Address(RVA = "0xD8994C", Offset = "0xD8994C", VA = "0xD8994C")]
		public TraversableOnboardingAction(Action tickTriggerEvent, TreeData treeData, string nodeName = "Traversable Onboarding")
		{
		}

		[Token(Token = "0x6001375")]
		[Address(RVA = "0xD89954", Offset = "0xD89954", VA = "0xD89954", Slot = "4")]
		public override NodeState Evaluate()
		{
			return default(NodeState);
		}

		[Token(Token = "0x6001376")]
		[Address(RVA = "0xD89A64", Offset = "0xD89A64", VA = "0xD89A64")]
		private void Complete()
		{
		}

		[Token(Token = "0x6001377")]
		[Address(RVA = "0xD89AEC", Offset = "0xD89AEC", VA = "0xD89AEC", Slot = "5")]
		protected override void HaltProcessing()
		{
		}
	}
	[Token(Token = "0x20003AC")]
	public class UserEventTriggerCondition : Node
	{
		[Token(Token = "0x400138B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private UserEventTriggerSet eventTrigger;

		[Token(Token = "0x6001378")]
		[Address(RVA = "0xD89B48", Offset = "0xD89B48", VA = "0xD89B48")]
		public UserEventTriggerCondition(Action tickTriggerEvent, TreeData treeData, UserEventTriggerSet eventTrigger, string nodeName = "User event trigger condition")
		{
		}

		[Token(Token = "0x6001379")]
		[Address(RVA = "0xD89B80", Offset = "0xD89B80", VA = "0xD89B80", Slot = "4")]
		public override NodeState Evaluate()
		{
			return default(NodeState);
		}

		[Token(Token = "0x600137A")]
		[Address(RVA = "0xD89DEC", Offset = "0xD89DEC", VA = "0xD89DEC")]
		private void ProcessUserEventTriggerToggle(bool triggered)
		{
		}

		[Token(Token = "0x600137B")]
		[Address(RVA = "0xD89E2C", Offset = "0xD89E2C", VA = "0xD89E2C", Slot = "5")]
		protected override void HaltProcessing()
		{
		}
	}
	[Token(Token = "0x20003AD")]
	public class FallbackControl : ParentNode
	{
		[Token(Token = "0x400138C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int activeChildIndex;

		[Token(Token = "0x600137C")]
		[Address(RVA = "0xD89F14", Offset = "0xD89F14", VA = "0xD89F14")]
		public FallbackControl(Action tickTriggerEvent, TreeData treeData, List<Node> children, string nodeName = "Fallback")
		{
		}

		[Token(Token = "0x600137D")]
		[Address(RVA = "0xD89F84", Offset = "0xD89F84", VA = "0xD89F84", Slot = "6")]
		protected override NodeState EvaluateControlLogic()
		{
			return default(NodeState);
		}

		[Token(Token = "0x600137E")]
		[Address(RVA = "0xD8A070", Offset = "0xD8A070", VA = "0xD8A070", Slot = "5")]
		protected override void HaltProcessing()
		{
		}
	}
	[Token(Token = "0x20003AE")]
	public class ReactiveFallbackControl : ParentNode
	{
		[Token(Token = "0x600137F")]
		[Address(RVA = "0xD8A08C", Offset = "0xD8A08C", VA = "0xD8A08C")]
		public ReactiveFallbackControl(Action tickTriggerEvent, TreeData treeData, List<Node> children, string nodeName = "Reactive Fallback")
		{
		}

		[Token(Token = "0x6001380")]
		[Address(RVA = "0xD8A0C4", Offset = "0xD8A0C4", VA = "0xD8A0C4", Slot = "6")]
		protected override NodeState EvaluateControlLogic()
		{
			return default(NodeState);
		}
	}
	[Token(Token = "0x20003AF")]
	public class ReactiveSequenceControl : ParentNode
	{
		[Token(Token = "0x6001381")]
		[Address(RVA = "0xD8A264", Offset = "0xD8A264", VA = "0xD8A264")]
		public ReactiveSequenceControl(Action tickTriggerEvent, TreeData treeData, List<Node> children, string nodeName = "Sequence")
		{
		}

		[Token(Token = "0x6001382")]
		[Address(RVA = "0xD8A29C", Offset = "0xD8A29C", VA = "0xD8A29C", Slot = "6")]
		protected override NodeState EvaluateControlLogic()
		{
			return default(NodeState);
		}
	}
	[Token(Token = "0x20003B0")]
	public class RetryReactiveFallbackControl : ParentNode
	{
		[Token(Token = "0x6001383")]
		[Address(RVA = "0xD8A440", Offset = "0xD8A440", VA = "0xD8A440")]
		public RetryReactiveFallbackControl(Action tickTriggerEvent, TreeData treeData, List<Node> children, string nodeName = "Retry Reactive Fallback")
		{
		}

		[Token(Token = "0x6001384")]
		[Address(RVA = "0xD8A478", Offset = "0xD8A478", VA = "0xD8A478", Slot = "6")]
		protected override NodeState EvaluateControlLogic()
		{
			return default(NodeState);
		}
	}
	[Token(Token = "0x20003B1")]
	public class SequenceControl : ParentNode
	{
		[Token(Token = "0x400138D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int activeChildIndex;

		[Token(Token = "0x6001385")]
		[Address(RVA = "0xD8A618", Offset = "0xD8A618", VA = "0xD8A618")]
		public SequenceControl(Action tickTriggerEvent, TreeData treeData, List<Node> children, string nodeName = "Sequence")
		{
		}

		[Token(Token = "0x6001386")]
		[Address(RVA = "0xD8A650", Offset = "0xD8A650", VA = "0xD8A650", Slot = "6")]
		protected override NodeState EvaluateControlLogic()
		{
			return default(NodeState);
		}

		[Token(Token = "0x6001387")]
		[Address(RVA = "0xD8A740", Offset = "0xD8A740", VA = "0xD8A740", Slot = "5")]
		protected override void HaltProcessing()
		{
		}
	}
	[Token(Token = "0x20003B2")]
	public class ContinuousDecorator : DecoratorNode
	{
		[Token(Token = "0x6001388")]
		[Address(RVA = "0xD8A758", Offset = "0xD8A758", VA = "0xD8A758")]
		public ContinuousDecorator(Action tickTriggerEvent, TreeData treeData, Node child, string nodeName = "Continuous Decorator")
		{
		}

		[Token(Token = "0x6001389")]
		[Address(RVA = "0xD8AA08", Offset = "0xD8AA08", VA = "0xD8AA08", Slot = "4")]
		public override NodeState Evaluate()
		{
			return default(NodeState);
		}

		[Token(Token = "0x600138A")]
		[Address(RVA = "0xD8AAE0", Offset = "0xD8AAE0", VA = "0xD8AAE0", Slot = "6")]
		protected override NodeState EvaluateControlLogic()
		{
			return default(NodeState);
		}
	}
	[Token(Token = "0x20003B3")]
	public abstract class DecoratorNode : ParentNode
	{
		[Token(Token = "0x600138B")]
		[Address(RVA = "0xD8A8E0", Offset = "0xD8A8E0", VA = "0xD8A8E0")]
		public DecoratorNode(Action tickTriggerEvent, TreeData treeData, Node child, List<NodeState> haltStates, string nodeName)
		{
		}
	}
	[Token(Token = "0x20003B4")]
	public enum NodeState
	{
		[Token(Token = "0x400138F")]
		IDLE,
		[Token(Token = "0x4001390")]
		RUNNING,
		[Token(Token = "0x4001391")]
		SUCCESS,
		[Token(Token = "0x4001392")]
		FAILURE,
		[Token(Token = "0x4001393")]
		ERROR
	}
	[Token(Token = "0x20003B5")]
	public abstract class Node
	{
		[Token(Token = "0x4001394")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected string nodeName;

		[Token(Token = "0x4001395")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected bool haltNode;

		[Token(Token = "0x4001396")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		protected NodeState state;

		[Token(Token = "0x4001397")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected Action tickTriggerEvent;

		[Token(Token = "0x4001398")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected TreeData treeData;

		[Token(Token = "0x600138C")]
		[Address(RVA = "0xD888C8", Offset = "0xD888C8", VA = "0xD888C8")]
		protected Node(Action tickTriggerEvent, TreeData treeData, string nodeName, bool haltNode = true)
		{
		}

		[Token(Token = "0x600138D")]
		[Address(RVA = "0xD8AAE8", Offset = "0xD8AAE8", VA = "0xD8AAE8")]
		public bool IsHaltNode()
		{
			return default(bool);
		}

		[Token(Token = "0x600138E")]
		public abstract NodeState Evaluate();

		[Token(Token = "0x600138F")]
		[Address(RVA = "0xD8AAC4", Offset = "0xD8AAC4", VA = "0xD8AAC4")]
		public void Halt()
		{
		}

		[Token(Token = "0x6001390")]
		[Address(RVA = "0xD88B34", Offset = "0xD88B34", VA = "0xD88B34", Slot = "5")]
		protected virtual void HaltProcessing()
		{
		}
	}
	[Token(Token = "0x20003B6")]
	public abstract class ParentNode : Node
	{
		[Token(Token = "0x4001399")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected List<Node> children;

		[Token(Token = "0x6001391")]
		[Address(RVA = "0xD89F4C", Offset = "0xD89F4C", VA = "0xD89F4C")]
		public ParentNode(Action tickTriggerEvent, TreeData treeData, List<Node> children, string nodeName)
		{
		}

		[Token(Token = "0x6001392")]
		[Address(RVA = "0xD8AAF0", Offset = "0xD8AAF0", VA = "0xD8AAF0", Slot = "4")]
		public override NodeState Evaluate()
		{
			return default(NodeState);
		}

		[Token(Token = "0x6001393")]
		protected abstract NodeState EvaluateControlLogic();

		[Token(Token = "0x6001394")]
		[Address(RVA = "0xD8A730", Offset = "0xD8A730", VA = "0xD8A730")]
		protected void HaltAllChildrenOnCompletion(NodeState evaluatedChildState)
		{
		}

		[Token(Token = "0x6001395")]
		[Address(RVA = "0xD8A088", Offset = "0xD8A088", VA = "0xD8A088", Slot = "5")]
		protected override void HaltProcessing()
		{
		}

		[Token(Token = "0x6001396")]
		[Address(RVA = "0xD8AB2C", Offset = "0xD8AB2C", VA = "0xD8AB2C")]
		private void HaltAllChildren()
		{
		}
	}
	[Token(Token = "0x20003B7")]
	public class SubtreeNode : Node
	{
		[Token(Token = "0x400139A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Tree subtree;

		[Token(Token = "0x6001397")]
		[Address(RVA = "0xD8AC88", Offset = "0xD8AC88", VA = "0xD8AC88")]
		public SubtreeNode(Action tickTriggerEvent, TreeData treeData, Tree subtree, string nodeName = "Subtree Node")
		{
		}

		[Token(Token = "0x6001398")]
		[Address(RVA = "0xD8AD48", Offset = "0xD8AD48", VA = "0xD8AD48", Slot = "4")]
		public override NodeState Evaluate()
		{
			return default(NodeState);
		}

		[Token(Token = "0x6001399")]
		[Address(RVA = "0xD8AD90", Offset = "0xD8AD90", VA = "0xD8AD90", Slot = "5")]
		protected override void HaltProcessing()
		{
		}
	}
	[Token(Token = "0x20003B8")]
	public class Tree
	{
		[Token(Token = "0x400139B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<Tree> subtrees;

		[Token(Token = "0x400139C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected Node root;

		[Token(Token = "0x400139D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected Action tickTriggerEvent;

		[Token(Token = "0x400139E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected TreeData treeData;

		[Token(Token = "0x600139A")]
		[Address(RVA = "0xD8ADDC", Offset = "0xD8ADDC", VA = "0xD8ADDC")]
		public Tree()
		{
		}

		[Token(Token = "0x600139B")]
		[Address(RVA = "0xD8ADE4", Offset = "0xD8ADE4", VA = "0xD8ADE4")]
		public void SetUpTree(Action tickTriggerEvent)
		{
		}

		[Token(Token = "0x600139C")]
		[Address(RVA = "0xD8AD08", Offset = "0xD8AD08", VA = "0xD8AD08")]
		public void SetUpTree(Action tickTriggerEvent, TreeData treeData)
		{
		}

		[Token(Token = "0x600139D")]
		[Address(RVA = "0xD8AEFC", Offset = "0xD8AEFC", VA = "0xD8AEFC", Slot = "4")]
		protected virtual void BuildTree()
		{
		}

		[Token(Token = "0x600139E")]
		[Address(RVA = "0xD8AF00", Offset = "0xD8AF00", VA = "0xD8AF00")]
		public bool HasRootNode()
		{
			return default(bool);
		}

		[Token(Token = "0x600139F")]
		[Address(RVA = "0xD8AD70", Offset = "0xD8AD70", VA = "0xD8AD70")]
		public NodeState Evaluate()
		{
			return default(NodeState);
		}

		[Token(Token = "0x60013A0")]
		[Address(RVA = "0xD8ADA8", Offset = "0xD8ADA8", VA = "0xD8ADA8")]
		public void Halt()
		{
		}
	}
	[Token(Token = "0x20003B9")]
	public class TreeData
	{
		[Token(Token = "0x400139F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Dictionary<string, object> treeData;

		[Token(Token = "0x60013A1")]
		[Address(RVA = "0xD8AE74", Offset = "0xD8AE74", VA = "0xD8AE74")]
		public TreeData()
		{
		}

		[Token(Token = "0x60013A2")]
		public void AddDataToTreeData<T>(string key, T data)
		{
		}

		[Token(Token = "0x60013A3")]
		public T GetDataFromTreeData<T>(string key)
		{
			return (T)null;
		}
	}
	[Token(Token = "0x20003BA")]
	public class TreeExecutor : MonoBehaviour
	{
		[Token(Token = "0x40013A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TreeExecutorConfig configuration;

		[Token(Token = "0x40013A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Tree tree;

		[Token(Token = "0x40013A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool tickThisFrame;

		[Token(Token = "0x60013A4")]
		[Address(RVA = "0xD8AF10", Offset = "0xD8AF10", VA = "0xD8AF10")]
		public void BeginTreeProcess()
		{
		}

		[Token(Token = "0x60013A5")]
		[Address(RVA = "0xD8AFCC", Offset = "0xD8AFCC", VA = "0xD8AFCC")]
		private void TriggerTick()
		{
		}

		[Token(Token = "0x60013A6")]
		[Address(RVA = "0xD8AFD8", Offset = "0xD8AFD8", VA = "0xD8AFD8")]
		private void Evaluate()
		{
		}

		[Token(Token = "0x60013A7")]
		[Address(RVA = "0xD8B040", Offset = "0xD8B040", VA = "0xD8B040")]
		private void TryEvaluate()
		{
		}

		[Token(Token = "0x60013A8")]
		[Address(RVA = "0xD8B018", Offset = "0xD8B018", VA = "0xD8B018")]
		private void TryCompleteTreeRun(NodeState evaluatedChildState)
		{
		}

		[Token(Token = "0x60013A9")]
		[Address(RVA = "0xD8B054", Offset = "0xD8B054", VA = "0xD8B054")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60013AA")]
		[Address(RVA = "0xD8B068", Offset = "0xD8B068", VA = "0xD8B068")]
		public TreeExecutor()
		{
		}
	}
	[Token(Token = "0x20003BB")]
	public abstract class TreeExecutorConfig : MonoBehaviour
	{
		[Token(Token = "0x40013A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected string treeName;

		[Token(Token = "0x60013AB")]
		[Address(RVA = "0xD8B070", Offset = "0xD8B070", VA = "0xD8B070")]
		private void Awake()
		{
		}

		[Token(Token = "0x60013AC")]
		[Address(RVA = "0xD8B07C", Offset = "0xD8B07C", VA = "0xD8B07C", Slot = "4")]
		public virtual Tree GetRootTree()
		{
			return null;
		}

		[Token(Token = "0x60013AD")]
		[Address(RVA = "0xD8B084", Offset = "0xD8B084", VA = "0xD8B084")]
		public string GetTreeName()
		{
			return null;
		}

		[Token(Token = "0x60013AE")]
		protected abstract void SetTreeName();

		[Token(Token = "0x60013AF")]
		[Address(RVA = "0xD888B8", Offset = "0xD888B8", VA = "0xD888B8")]
		protected TreeExecutorConfig()
		{
		}
	}
	[Token(Token = "0x20003BC")]
	public class EightInitialOnboardingSubtree : Tree
	{
		[Token(Token = "0x60013B0")]
		[Address(RVA = "0xD8B08C", Offset = "0xD8B08C", VA = "0xD8B08C", Slot = "4")]
		protected override void BuildTree()
		{
		}

		[Token(Token = "0x60013B1")]
		[Address(RVA = "0xD8B71C", Offset = "0xD8B71C", VA = "0xD8B71C")]
		public EightInitialOnboardingSubtree()
		{
		}
	}
	[Token(Token = "0x20003BD")]
	public class EightPalmMenuOnboardingSubtree : Tree
	{
		[Token(Token = "0x60013B2")]
		[Address(RVA = "0xD8B724", Offset = "0xD8B724", VA = "0xD8B724", Slot = "4")]
		protected override void BuildTree()
		{
		}

		[Token(Token = "0x60013B3")]
		[Address(RVA = "0xD8B808", Offset = "0xD8B808", VA = "0xD8B808")]
		public EightPalmMenuOnboardingSubtree()
		{
		}
	}
	[Token(Token = "0x20003BE")]
	public class EightRootTree : Tree
	{
		[Token(Token = "0x60013B4")]
		[Address(RVA = "0xD8B810", Offset = "0xD8B810", VA = "0xD8B810", Slot = "4")]
		protected override void BuildTree()
		{
		}

		[Token(Token = "0x60013B5")]
		[Address(RVA = "0xD88828", Offset = "0xD88828", VA = "0xD88828")]
		public EightRootTree()
		{
		}
	}
	[Token(Token = "0x20003BF")]
	public class EightTakeActionTriggerSubtree : Tree
	{
		[Token(Token = "0x60013B6")]
		[Address(RVA = "0xD8BB0C", Offset = "0xD8BB0C", VA = "0xD8BB0C", Slot = "4")]
		protected override void BuildTree()
		{
		}

		[Token(Token = "0x60013B7")]
		[Address(RVA = "0xD8BAFC", Offset = "0xD8BAFC", VA = "0xD8BAFC")]
		public EightTakeActionTriggerSubtree()
		{
		}
	}
	[Token(Token = "0x20003C0")]
	public class EightTestTreeA : Tree
	{
		[Token(Token = "0x60013B8")]
		[Address(RVA = "0xD8BCC4", Offset = "0xD8BCC4", VA = "0xD8BCC4", Slot = "4")]
		protected override void BuildTree()
		{
		}

		[Token(Token = "0x60013B9")]
		[Address(RVA = "0xD88830", Offset = "0xD88830", VA = "0xD88830")]
		public EightTestTreeA()
		{
		}
	}
	[Token(Token = "0x20003C1")]
	public class EightTopLevelActionsSubtree : Tree
	{
		[Token(Token = "0x60013BA")]
		[Address(RVA = "0xD8C2B0", Offset = "0xD8C2B0", VA = "0xD8C2B0", Slot = "4")]
		protected override void BuildTree()
		{
		}

		[Token(Token = "0x60013BB")]
		[Address(RVA = "0xD8BB04", Offset = "0xD8BB04", VA = "0xD8BB04")]
		public EightTopLevelActionsSubtree()
		{
		}
	}
	[Token(Token = "0x20003C2")]
	public class EightTraversableOnboardingSubtree : Tree
	{
		[Token(Token = "0x60013BC")]
		[Address(RVA = "0xD8C494", Offset = "0xD8C494", VA = "0xD8C494", Slot = "4")]
		protected override void BuildTree()
		{
		}

		[Token(Token = "0x60013BD")]
		[Address(RVA = "0xD8C8DC", Offset = "0xD8C8DC", VA = "0xD8C8DC")]
		public EightTraversableOnboardingSubtree()
		{
		}
	}
	[Token(Token = "0x20003C3")]
	public class BasicTestSubtree : Tree
	{
		[Token(Token = "0x60013BE")]
		[Address(RVA = "0xD8C8E4", Offset = "0xD8C8E4", VA = "0xD8C8E4", Slot = "4")]
		protected override void BuildTree()
		{
		}

		[Token(Token = "0x60013BF")]
		[Address(RVA = "0xD8CB44", Offset = "0xD8CB44", VA = "0xD8CB44")]
		public BasicTestSubtree()
		{
		}
	}
	[Token(Token = "0x20003C4")]
	public class BasicTestTree : Tree
	{
		[Token(Token = "0x60013C0")]
		[Address(RVA = "0xD8CB4C", Offset = "0xD8CB4C", VA = "0xD8CB4C", Slot = "4")]
		protected override void BuildTree()
		{
		}

		[Token(Token = "0x60013C1")]
		[Address(RVA = "0xD88820", Offset = "0xD88820", VA = "0xD88820")]
		public BasicTestTree()
		{
		}
	}
}
namespace Librarium
{
	[Token(Token = "0x20003C5")]
	public class AssetBundleManager : Singleton<AssetBundleManager>
	{
		[Token(Token = "0x20003C6")]
		[CompilerGenerated]
		private sealed class <NotifyOfSlowInternet>d__15 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40013AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40013AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40013AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public AssetBundleManager <>4__this;

			[Token(Token = "0x1700026D")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60013D6")]
				[Address(RVA = "0xD8D72C", Offset = "0xD8D72C", VA = "0xD8D72C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700026E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60013D8")]
				[Address(RVA = "0xD8D774", Offset = "0xD8D774", VA = "0xD8D774", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60013D3")]
			[Address(RVA = "0xD8CF28", Offset = "0xD8CF28", VA = "0xD8CF28")]
			[DebuggerHidden]
			public <NotifyOfSlowInternet>d__15(int <>1__state)
			{
			}

			[Token(Token = "0x60013D4")]
			[Address(RVA = "0xD8D630", Offset = "0xD8D630", VA = "0xD8D630", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60013D5")]
			[Address(RVA = "0xD8D634", Offset = "0xD8D634", VA = "0xD8D634", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60013D7")]
			[Address(RVA = "0xD8D734", Offset = "0xD8D734", VA = "0xD8D734", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20003C7")]
		[CompilerGenerated]
		private sealed class <>c__DisplayClass17_0
		{
			[Token(Token = "0x40013AF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public AssetBundleMeta abm;

			[Token(Token = "0x40013B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public APIGetS3AssetBundle bundleComm;

			[Token(Token = "0x40013B1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public AssetBundleManager <>4__this;

			[Token(Token = "0x60013D9")]
			[Address(RVA = "0xD8D77C", Offset = "0xD8D77C", VA = "0xD8D77C")]
			public <>c__DisplayClass17_0()
			{
			}

			[Token(Token = "0x60013DA")]
			[Address(RVA = "0xD8D784", Offset = "0xD8D784", VA = "0xD8D784")]
			internal void <co_LoadAndCacheAssetBundles>b__1(bool successful)
			{
			}
		}

		[Token(Token = "0x20003C9")]
		[CompilerGenerated]
		private sealed class <co_LoadAndCacheAssetBundles>d__17 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40013B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40013B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40013B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public AssetBundleManager <>4__this;

			[Token(Token = "0x40013B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private <>c__DisplayClass17_0 <>8__1;

			[Token(Token = "0x40013B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private APIGetAssetBundlesMeta <metaComm>5__2;

			[Token(Token = "0x40013B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int <count>5__3;

			[Token(Token = "0x40013BA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private List<AssetBundleMeta>.Enumerator <>7__wrap3;

			[Token(Token = "0x1700026F")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60013E2")]
				[Address(RVA = "0xD8E4EC", Offset = "0xD8E4EC", VA = "0xD8E4EC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000270")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60013E4")]
				[Address(RVA = "0xD8E534", Offset = "0xD8E534", VA = "0xD8E534", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60013DE")]
			[Address(RVA = "0xD8D080", Offset = "0xD8D080", VA = "0xD8D080")]
			[DebuggerHidden]
			public <co_LoadAndCacheAssetBundles>d__17(int <>1__state)
			{
			}

			[Token(Token = "0x60013DF")]
			[Address(RVA = "0xD8D8C0", Offset = "0xD8D8C0", VA = "0xD8D8C0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60013E0")]
			[Address(RVA = "0xD8D8DC", Offset = "0xD8D8DC", VA = "0xD8D8DC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60013E1")]
			[Address(RVA = "0xD8E49C", Offset = "0xD8E49C", VA = "0xD8E49C")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x60013E3")]
			[Address(RVA = "0xD8E4F4", Offset = "0xD8E4F4", VA = "0xD8E4F4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20003CA")]
		[CompilerGenerated]
		private sealed class <>c__DisplayClass18_0
		{
			[Token(Token = "0x40013BB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public AssetBundleManager <>4__this;

			[Token(Token = "0x40013BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public bool morePages;

			[Token(Token = "0x40013BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
			public bool failure;

			[Token(Token = "0x60013E5")]
			[Address(RVA = "0xD8E53C", Offset = "0xD8E53C", VA = "0xD8E53C")]
			public <>c__DisplayClass18_0()
			{
			}
		}

		[Token(Token = "0x20003CB")]
		[CompilerGenerated]
		private sealed class <>c__DisplayClass18_1
		{
			[Token(Token = "0x40013BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public APIGetProps propsComm;

			[Token(Token = "0x40013BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public <>c__DisplayClass18_0 CS$<>8__locals1;

			[Token(Token = "0x60013E6")]
			[Address(RVA = "0xD8E544", Offset = "0xD8E544", VA = "0xD8E544")]
			public <>c__DisplayClass18_1()
			{
			}

			[Token(Token = "0x60013E7")]
			[Address(RVA = "0xD8E54C", Offset = "0xD8E54C", VA = "0xD8E54C")]
			internal void <co_LoadAndCachePropsMeta>b__0(bool successful)
			{
			}
		}

		[Token(Token = "0x20003CC")]
		[CompilerGenerated]
		private sealed class <co_LoadAndCachePropsMeta>d__18 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40013C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40013C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40013C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public AssetBundleManager <>4__this;

			[Token(Token = "0x40013C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private <>c__DisplayClass18_0 <>8__1;

			[Token(Token = "0x40013C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private <>c__DisplayClass18_1 <>8__2;

			[Token(Token = "0x40013C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int <page>5__2;

			[Token(Token = "0x17000271")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60013EB")]
				[Address(RVA = "0xD8EB04", Offset = "0xD8EB04", VA = "0xD8EB04", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000272")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60013ED")]
				[Address(RVA = "0xD8EB4C", Offset = "0xD8EB4C", VA = "0xD8EB4C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60013E8")]
			[Address(RVA = "0xD8D0A8", Offset = "0xD8D0A8", VA = "0xD8D0A8")]
			[DebuggerHidden]
			public <co_LoadAndCachePropsMeta>d__18(int <>1__state)
			{
			}

			[Token(Token = "0x60013E9")]
			[Address(RVA = "0xD8E798", Offset = "0xD8E798", VA = "0xD8E798", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60013EA")]
			[Address(RVA = "0xD8E79C", Offset = "0xD8E79C", VA = "0xD8E79C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60013EC")]
			[Address(RVA = "0xD8EB0C", Offset = "0xD8EB0C", VA = "0xD8EB0C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20003CD")]
		[CompilerGenerated]
		private sealed class <co_DisplayPropsLoadError>d__21 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40013C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40013C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40013C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string message;

			[Token(Token = "0x17000273")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60013F1")]
				[Address(RVA = "0xD8ECA0", Offset = "0xD8ECA0", VA = "0xD8ECA0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000274")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60013F3")]
				[Address(RVA = "0xD8ECE8", Offset = "0xD8ECE8", VA = "0xD8ECE8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60013EE")]
			[Address(RVA = "0xD8D180", Offset = "0xD8D180", VA = "0xD8D180")]
			[DebuggerHidden]
			public <co_DisplayPropsLoadError>d__21(int <>1__state)
			{
			}

			[Token(Token = "0x60013EF")]
			[Address(RVA = "0xD8EB54", Offset = "0xD8EB54", VA = "0xD8EB54", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60013F0")]
			[Address(RVA = "0xD8EB58", Offset = "0xD8EB58", VA = "0xD8EB58", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60013F2")]
			[Address(RVA = "0xD8ECA8", Offset = "0xD8ECA8", VA = "0xD8ECA8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20003CE")]
		[CompilerGenerated]
		private sealed class <co_GetPrefabForPropAsync>d__24 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40013C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40013CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40013CB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public AssetBundleManager <>4__this;

			[Token(Token = "0x40013CC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Guid propId;

			[Token(Token = "0x40013CD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Action<Guid, GameObject> callback;

			[Token(Token = "0x40013CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public Guid requestId;

			[Token(Token = "0x40013CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private AssetBundleRequest <req>5__2;

			[Token(Token = "0x17000275")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60013F7")]
				[Address(RVA = "0xD8F020", Offset = "0xD8F020", VA = "0xD8F020", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000276")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60013F9")]
				[Address(RVA = "0xD8F068", Offset = "0xD8F068", VA = "0xD8F068", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60013F4")]
			[Address(RVA = "0xD8D51C", Offset = "0xD8D51C", VA = "0xD8D51C")]
			[DebuggerHidden]
			public <co_GetPrefabForPropAsync>d__24(int <>1__state)
			{
			}

			[Token(Token = "0x60013F5")]
			[Address(RVA = "0xD8ECF0", Offset = "0xD8ECF0", VA = "0xD8ECF0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60013F6")]
			[Address(RVA = "0xD8ECF4", Offset = "0xD8ECF4", VA = "0xD8ECF4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60013F8")]
			[Address(RVA = "0xD8F028", Offset = "0xD8F028", VA = "0xD8F028", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40013A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool useLocalProps;

		[Token(Token = "0x40013A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Dictionary<string, AssetBundle> bundleDict;

		[Token(Token = "0x40013A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool bundleDictReady;

		[Token(Token = "0x40013A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		private bool propDictReady;

		[Token(Token = "0x40013AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Dictionary<Guid, GameObject> propAssetCache;

		[Token(Token = "0x40013AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private WaitForSeconds delayForSlowInternet;

		[Token(Token = "0x1700026B")]
		public bool bundlesConfigured
		{
			[Token(Token = "0x60013C2")]
			[Address(RVA = "0xD8CE88", Offset = "0xD8CE88", VA = "0xD8CE88")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60013C3")]
			[Address(RVA = "0xD8CE90", Offset = "0xD8CE90", VA = "0xD8CE90")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700026C")]
		public Dictionary<Guid, PropMeta> propDict
		{
			[Token(Token = "0x60013C4")]
			[Address(RVA = "0xD8CE9C", Offset = "0xD8CE9C", VA = "0xD8CE9C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60013C5")]
			[Address(RVA = "0xD8CEA4", Offset = "0xD8CEA4", VA = "0xD8CEA4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60013C6")]
		[Address(RVA = "0xD8CEAC", Offset = "0xD8CEAC", VA = "0xD8CEAC", Slot = "5")]
		protected override void DidAwake()
		{
		}

		[Token(Token = "0x60013C7")]
		[Address(RVA = "0xD8CEB4", Offset = "0xD8CEB4", VA = "0xD8CEB4")]
		[IteratorStateMachine(typeof(<NotifyOfSlowInternet>d__15))]
		private IEnumerator NotifyOfSlowInternet()
		{
			return null;
		}

		[Token(Token = "0x60013C8")]
		[Address(RVA = "0xD8CF50", Offset = "0xD8CF50", VA = "0xD8CF50")]
		public void LoadAndCacheAssetBundles()
		{
		}

		[Token(Token = "0x60013C9")]
		[Address(RVA = "0xD8CF98", Offset = "0xD8CF98", VA = "0xD8CF98")]
		[IteratorStateMachine(typeof(<co_LoadAndCacheAssetBundles>d__17))]
		private IEnumerator co_LoadAndCacheAssetBundles()
		{
			return null;
		}

		[Token(Token = "0x60013CA")]
		[Address(RVA = "0xD8D00C", Offset = "0xD8D00C", VA = "0xD8D00C")]
		[IteratorStateMachine(typeof(<co_LoadAndCachePropsMeta>d__18))]
		private IEnumerator co_LoadAndCachePropsMeta()
		{
			return null;
		}

		[Token(Token = "0x60013CB")]
		[Address(RVA = "0xD8D0D0", Offset = "0xD8D0D0", VA = "0xD8D0D0")]
		private void TryCompleteLoad()
		{
		}

		[Token(Token = "0x60013CC")]
		[Address(RVA = "0xD8D0EC", Offset = "0xD8D0EC", VA = "0xD8D0EC")]
		private void DisplayPropsLoadError(string message)
		{
		}

		[Token(Token = "0x60013CD")]
		[Address(RVA = "0xD8D10C", Offset = "0xD8D10C", VA = "0xD8D10C")]
		[IteratorStateMachine(typeof(<co_DisplayPropsLoadError>d__21))]
		private IEnumerator co_DisplayPropsLoadError(string message)
		{
			return null;
		}

		[Token(Token = "0x60013CE")]
		[Address(RVA = "0xD8D1A8", Offset = "0xD8D1A8", VA = "0xD8D1A8")]
		public GameObject GetPrefabForProp(Guid propId)
		{
			return null;
		}

		[Token(Token = "0x60013CF")]
		[Address(RVA = "0xD8D2DC", Offset = "0xD8D2DC", VA = "0xD8D2DC")]
		public void GetPrefabForPropAsync(Guid propId, Guid requestId, Action<Guid, GameObject> callback)
		{
		}

		[Token(Token = "0x60013D0")]
		[Address(RVA = "0xD8D464", Offset = "0xD8D464", VA = "0xD8D464")]
		[IteratorStateMachine(typeof(<co_GetPrefabForPropAsync>d__24))]
		public IEnumerator co_GetPrefabForPropAsync(Guid propId, Guid requestId, Action<Guid, GameObject> callback)
		{
			return null;
		}

		[Token(Token = "0x60013D1")]
		[Address(RVA = "0xD8D544", Offset = "0xD8D544", VA = "0xD8D544")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60013D2")]
		[Address(RVA = "0xD8D550", Offset = "0xD8D550", VA = "0xD8D550")]
		public AssetBundleManager()
		{
		}
	}
	[Token(Token = "0x20003CF")]
	public class AssetBundleTester : MonoBehaviour
	{
		[Token(Token = "0x20003D0")]
		[CompilerGenerated]
		private sealed class <co_RunTest>d__3 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40013D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40013D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40013D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public AssetBundleTester <>4__this;

			[Token(Token = "0x40013D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Dictionary<Guid, PropMeta>.Enumerator <>7__wrap1;

			[Token(Token = "0x40013D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private ManagedProp <mp>5__3;

			[Token(Token = "0x17000277")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001402")]
				[Address(RVA = "0xD8F810", Offset = "0xD8F810", VA = "0xD8F810", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000278")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001404")]
				[Address(RVA = "0xD8F858", Offset = "0xD8F858", VA = "0xD8F858", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60013FE")]
			[Address(RVA = "0xD8F104", Offset = "0xD8F104", VA = "0xD8F104")]
			[DebuggerHidden]
			public <co_RunTest>d__3(int <>1__state)
			{
			}

			[Token(Token = "0x60013FF")]
			[Address(RVA = "0xD8F154", Offset = "0xD8F154", VA = "0xD8F154", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001400")]
			[Address(RVA = "0xD8F180", Offset = "0xD8F180", VA = "0xD8F180", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001401")]
			[Address(RVA = "0xD8F7C0", Offset = "0xD8F7C0", VA = "0xD8F7C0")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6001403")]
			[Address(RVA = "0xD8F818", Offset = "0xD8F818", VA = "0xD8F818", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40013D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ManagedProp lastLoadedProp;

		[Token(Token = "0x40013D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool waitingOnLoad;

		[Token(Token = "0x60013FA")]
		[Address(RVA = "0xD8F070", Offset = "0xD8F070", VA = "0xD8F070")]
		private void Start()
		{
		}

		[Token(Token = "0x60013FB")]
		[Address(RVA = "0xD8F090", Offset = "0xD8F090", VA = "0xD8F090")]
		[IteratorStateMachine(typeof(<co_RunTest>d__3))]
		private IEnumerator co_RunTest()
		{
			return null;
		}

		[Token(Token = "0x60013FC")]
		[Address(RVA = "0xD8F12C", Offset = "0xD8F12C", VA = "0xD8F12C")]
		private void CatchAsyncPropLoad(ManagedProp prop)
		{
		}

		[Token(Token = "0x60013FD")]
		[Address(RVA = "0xD8F14C", Offset = "0xD8F14C", VA = "0xD8F14C")]
		public AssetBundleTester()
		{
		}
	}
	[Token(Token = "0x20003D1")]
	public class AudioMixerManager : Singleton<AudioMixerManager>
	{
		[Token(Token = "0x40013D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioMixer audioMixer;

		[Token(Token = "0x40013D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float masterMax;

		[Token(Token = "0x40013D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float sfxMax;

		[Token(Token = "0x40013DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float musicMax;

		[Token(Token = "0x40013DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AudioMixerGroup[] mixerGroups;

		[Token(Token = "0x40013DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float dbMin;

		[Token(Token = "0x6001405")]
		[Address(RVA = "0xD8F860", Offset = "0xD8F860", VA = "0xD8F860")]
		private void Start()
		{
		}

		[Token(Token = "0x6001406")]
		[Address(RVA = "0xD8FAF4", Offset = "0xD8FAF4", VA = "0xD8FAF4")]
		public AudioMixer GetAudioMixer()
		{
			return null;
		}

		[Token(Token = "0x6001407")]
		[Address(RVA = "0xD8FAFC", Offset = "0xD8FAFC", VA = "0xD8FAFC")]
		private void SetMasterVolume(float value)
		{
		}

		[Token(Token = "0x6001408")]
		[Address(RVA = "0xD8FBDC", Offset = "0xD8FBDC", VA = "0xD8FBDC")]
		private void SetSFXVolume(float value)
		{
		}

		[Token(Token = "0x6001409")]
		[Address(RVA = "0xD8FCC0", Offset = "0xD8FCC0", VA = "0xD8FCC0")]
		private void SetMusicVolume(float value)
		{
		}

		[Token(Token = "0x600140A")]
		[Address(RVA = "0xD8FDA4", Offset = "0xD8FDA4", VA = "0xD8FDA4", Slot = "5")]
		protected override void DidAwake()
		{
		}

		[Token(Token = "0x600140B")]
		[Address(RVA = "0xD8FDA8", Offset = "0xD8FDA8", VA = "0xD8FDA8")]
		public AudioMixerManager()
		{
		}
	}
	[Token(Token = "0x20003D2")]
	public class CreditsController : MonoBehaviour
	{
		[Token(Token = "0x20003D3")]
		[CompilerGenerated]
		private sealed class <co_RollCredits>d__11 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40013E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40013E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40013E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public CreditsController <>4__this;

			[Token(Token = "0x40013E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private WWW <w>5__2;

			[Token(Token = "0x17000279")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001416")]
				[Address(RVA = "0xD90404", Offset = "0xD90404", VA = "0xD90404", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700027A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001418")]
				[Address(RVA = "0xD9044C", Offset = "0xD9044C", VA = "0xD9044C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001413")]
			[Address(RVA = "0xD90174", Offset = "0xD90174", VA = "0xD90174")]
			[DebuggerHidden]
			public <co_RollCredits>d__11(int <>1__state)
			{
			}

			[Token(Token = "0x6001414")]
			[Address(RVA = "0xD901AC", Offset = "0xD901AC", VA = "0xD901AC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001415")]
			[Address(RVA = "0xD901B0", Offset = "0xD901B0", VA = "0xD901B0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001417")]
			[Address(RVA = "0xD9040C", Offset = "0xD9040C", VA = "0xD9040C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40013DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PublishTriggerEnterExit trigger;

		[Token(Token = "0x40013DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject creditsRenderQuad;

		[Token(Token = "0x40013DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject creditsRoll;

		[Token(Token = "0x40013E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public TextMeshPro creditsLabel;

		[Token(Token = "0x40013E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float scrollSpeed;

		[Token(Token = "0x40013E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private string creditsText;

		[Token(Token = "0x40013E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Coroutine creditsCoroutine;

		[Token(Token = "0x40013E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Vector3 origPosition;

		[Token(Token = "0x600140C")]
		[Address(RVA = "0xD8FDF8", Offset = "0xD8FDF8", VA = "0xD8FDF8")]
		private void Awake()
		{
		}

		[Token(Token = "0x600140D")]
		[Address(RVA = "0xD8FFA4", Offset = "0xD8FFA4", VA = "0xD8FFA4")]
		public void StartCredits()
		{
		}

		[Token(Token = "0x600140E")]
		[Address(RVA = "0xD900DC", Offset = "0xD900DC", VA = "0xD900DC")]
		public void StopCredits()
		{
		}

		[Token(Token = "0x600140F")]
		[Address(RVA = "0xD90068", Offset = "0xD90068", VA = "0xD90068")]
		[IteratorStateMachine(typeof(<co_RollCredits>d__11))]
		private IEnumerator co_RollCredits()
		{
			return null;
		}

		[Token(Token = "0x6001410")]
		[Address(RVA = "0xD9019C", Offset = "0xD9019C", VA = "0xD9019C")]
		public CreditsController()
		{
		}
	}
	[Token(Token = "0x20003D4")]
	public class DevTestingNetworkingManager : MonoBehaviourSingleton<DevTestingNetworkingManager>
	{
		[Token(Token = "0x20003D5")]
		private enum DevNetworkingPacketType
		{
			[Token(Token = "0x40013EF")]
			DebugMessage,
			[Token(Token = "0x40013F0")]
			MovePlayerToPosition,
			[Token(Token = "0x40013F1")]
			SwitchGameObjectEnabled,
			[Token(Token = "0x40013F2")]
			SwitchComponentTypeEnabled
		}

		[Token(Token = "0x40013E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private LiteNetLibConnectionController connectionController;

		[Token(Token = "0x40013EA")]
		private const string kConnectKey = "librarium_dev";

		[Token(Token = "0x40013EB")]
		private const int kPortNumber = 5123;

		[Token(Token = "0x40013EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Action<string> statusCallback;

		[Token(Token = "0x40013ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool disableConnection;

		[Token(Token = "0x6001419")]
		[Address(RVA = "0xD90454", Offset = "0xD90454", VA = "0xD90454", Slot = "6")]
		protected override void DidAwake()
		{
		}

		[Token(Token = "0x600141A")]
		[Address(RVA = "0xD90458", Offset = "0xD90458", VA = "0xD90458")]
		private void Update()
		{
		}

		[Token(Token = "0x600141B")]
		[Address(RVA = "0xD9065C", Offset = "0xD9065C", VA = "0xD9065C")]
		public static DevTestingNetworkingManager CreateNewManager([Optional] Action<string> statusCallbackIn, bool interalTesting = false)
		{
			return null;
		}

		[Token(Token = "0x600141C")]
		[Address(RVA = "0xD90794", Offset = "0xD90794", VA = "0xD90794")]
		private void CreateConnection()
		{
		}

		[Token(Token = "0x600141D")]
		[Address(RVA = "0xD909B4", Offset = "0xD909B4", VA = "0xD909B4")]
		public void SendMovePlayerToPosition(Vector3 position)
		{
		}

		[Token(Token = "0x600141E")]
		[Address(RVA = "0xD90AF8", Offset = "0xD90AF8", VA = "0xD90AF8")]
		private void MovePlayerToPosition(Vector3 position)
		{
		}

		[Token(Token = "0x600141F")]
		[Address(RVA = "0xD90E4C", Offset = "0xD90E4C", VA = "0xD90E4C")]
		public void SendSwitchGameObjectEnabledAtScenePath(string path)
		{
		}

		[Token(Token = "0x6001420")]
		[Address(RVA = "0xD90EFC", Offset = "0xD90EFC", VA = "0xD90EFC")]
		private void SwitchGameObjectEnabledAtScenePath(string path)
		{
		}

		[Token(Token = "0x6001421")]
		[Address(RVA = "0xD90FD8", Offset = "0xD90FD8", VA = "0xD90FD8")]
		public void SendSwitchMeshRendererEnabledAtScenePath(string path)
		{
		}

		[Token(Token = "0x6001422")]
		[Address(RVA = "0xD91030", Offset = "0xD91030", VA = "0xD91030")]
		public void SendSwitchComponentEnabledAtScenePath(string componentName, string path)
		{
		}

		[Token(Token = "0x6001423")]
		[Address(RVA = "0xD91118", Offset = "0xD91118", VA = "0xD91118")]
		private void SwitchComponentEnabledAtScenePath(string componentName, string path)
		{
		}

		[Token(Token = "0x6001424")]
		[Address(RVA = "0xD90F4C", Offset = "0xD90F4C", VA = "0xD90F4C")]
		private bool GameObjectForPath(string path, out GameObject gameObj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001425")]
		[Address(RVA = "0xD91388", Offset = "0xD91388", VA = "0xD91388")]
		private GameObject GameObjectForPath(string path)
		{
			return null;
		}

		[Token(Token = "0x6001426")]
		[Address(RVA = "0xD90D9C", Offset = "0xD90D9C", VA = "0xD90D9C")]
		private void SendLogBack(string msg)
		{
		}

		[Token(Token = "0x6001427")]
		[Address(RVA = "0xD91484", Offset = "0xD91484", VA = "0xD91484")]
		private void RecievedData(NetPeer peer, NetDataReader dataReader)
		{
		}

		[Token(Token = "0x6001428")]
		[Address(RVA = "0xD90588", Offset = "0xD90588", VA = "0xD90588")]
		private void SendDataString(DevNetworkingPacketType packetType, params string[] dataStrings)
		{
		}

		[Token(Token = "0x6001429")]
		[Address(RVA = "0xD90A64", Offset = "0xD90A64", VA = "0xD90A64")]
		private void SendData(NetDataWriter netDataWriter)
		{
		}

		[Token(Token = "0x600142A")]
		[Address(RVA = "0xD9155C", Offset = "0xD9155C", VA = "0xD9155C")]
		public DevTestingNetworkingManager()
		{
		}
	}
	[Token(Token = "0x20003D6")]
	public class GrabDistanceIndicatorVisual : TeleportationVisualIndicator
	{
		[Token(Token = "0x600142E")]
		[Address(RVA = "0xD916A0", Offset = "0xD916A0", VA = "0xD916A0", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x600142F")]
		[Address(RVA = "0xD916CC", Offset = "0xD916CC", VA = "0xD916CC", Slot = "5")]
		public override void SetVisualsEnabled(bool toEnabled, bool negativeColor = false)
		{
		}

		[Token(Token = "0x6001430")]
		[Address(RVA = "0xD918F8", Offset = "0xD918F8", VA = "0xD918F8")]
		public GrabDistanceIndicatorVisual()
		{
		}
	}
	[Token(Token = "0x20003D7")]
	public class NetworkLossDetector : MonoBehaviour
	{
		[Token(Token = "0x20003D8")]
		[CompilerGenerated]
		private sealed class <Start>d__3 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40013F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40013F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40013F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public NetworkLossDetector <>4__this;

			[Token(Token = "0x1700027B")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600143D")]
				[Address(RVA = "0xD92120", Offset = "0xD92120", VA = "0xD92120", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700027C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600143F")]
				[Address(RVA = "0xD92168", Offset = "0xD92168", VA = "0xD92168", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600143A")]
			[Address(RVA = "0xD91974", Offset = "0xD91974", VA = "0xD91974")]
			[DebuggerHidden]
			public <Start>d__3(int <>1__state)
			{
			}

			[Token(Token = "0x600143B")]
			[Address(RVA = "0xD91F30", Offset = "0xD91F30", VA = "0xD91F30", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600143C")]
			[Address(RVA = "0xD91F34", Offset = "0xD91F34", VA = "0xD91F34", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600143E")]
			[Address(RVA = "0xD92128", Offset = "0xD92128", VA = "0xD92128", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20003D9")]
		[CompilerGenerated]
		private sealed class <CheckConnection>d__6 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40013F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40013FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40013FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public NetworkLossDetector <>4__this;

			[Token(Token = "0x1700027D")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001443")]
				[Address(RVA = "0xD922D8", Offset = "0xD922D8", VA = "0xD922D8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700027E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001445")]
				[Address(RVA = "0xD92320", Offset = "0xD92320", VA = "0xD92320", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001440")]
			[Address(RVA = "0xD91C28", Offset = "0xD91C28", VA = "0xD91C28")]
			[DebuggerHidden]
			public <CheckConnection>d__6(int <>1__state)
			{
			}

			[Token(Token = "0x6001441")]
			[Address(RVA = "0xD92170", Offset = "0xD92170", VA = "0xD92170", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001442")]
			[Address(RVA = "0xD92174", Offset = "0xD92174", VA = "0xD92174", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001444")]
			[Address(RVA = "0xD922E0", Offset = "0xD922E0", VA = "0xD922E0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20003DA")]
		[CompilerGenerated]
		private sealed class <CheckInternetConnection>d__7 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40013FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40013FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40013FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Action<bool> action;

			[Token(Token = "0x40013FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private UnityWebRequest <request>5__2;

			[Token(Token = "0x1700027F")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001449")]
				[Address(RVA = "0xD92440", Offset = "0xD92440", VA = "0xD92440", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000280")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600144B")]
				[Address(RVA = "0xD92488", Offset = "0xD92488", VA = "0xD92488", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001446")]
			[Address(RVA = "0xD91CC4", Offset = "0xD91CC4", VA = "0xD91CC4")]
			[DebuggerHidden]
			public <CheckInternetConnection>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x6001447")]
			[Address(RVA = "0xD92328", Offset = "0xD92328", VA = "0xD92328", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001448")]
			[Address(RVA = "0xD9232C", Offset = "0xD9232C", VA = "0xD9232C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600144A")]
			[Address(RVA = "0xD92448", Offset = "0xD92448", VA = "0xD92448", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40013F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ColorFader colorFader;

		[Token(Token = "0x40013F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool isNetworkConnected;

		[Token(Token = "0x40013F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float pingInterval;

		[Token(Token = "0x6001431")]
		[Address(RVA = "0xD91900", Offset = "0xD91900", VA = "0xD91900")]
		[IteratorStateMachine(typeof(<Start>d__3))]
		private IEnumerator Start()
		{
			return null;
		}

		[Token(Token = "0x6001432")]
		[Address(RVA = "0xD9199C", Offset = "0xD9199C", VA = "0xD9199C")]
		private void co_BeginConnectionCheck()
		{
		}

		[Token(Token = "0x6001433")]
		[Address(RVA = "0xD91B1C", Offset = "0xD91B1C", VA = "0xD91B1C")]
		private void BeginConnectionCheck()
		{
		}

		[Token(Token = "0x6001434")]
		[Address(RVA = "0xD91AA8", Offset = "0xD91AA8", VA = "0xD91AA8")]
		[IteratorStateMachine(typeof(<CheckConnection>d__6))]
		private IEnumerator CheckConnection()
		{
			return null;
		}

		[Token(Token = "0x6001435")]
		[Address(RVA = "0xD91C50", Offset = "0xD91C50", VA = "0xD91C50")]
		[IteratorStateMachine(typeof(<CheckInternetConnection>d__7))]
		private IEnumerator CheckInternetConnection(Action<bool> action)
		{
			return null;
		}

		[Token(Token = "0x6001436")]
		[Address(RVA = "0xD91CEC", Offset = "0xD91CEC", VA = "0xD91CEC")]
		private void ValidateConnectivity(bool connected)
		{
		}

		[Token(Token = "0x6001437")]
		[Address(RVA = "0xD91D10", Offset = "0xD91D10", VA = "0xD91D10")]
		private void ResponseToNetworkLoss(bool networkLost)
		{
		}

		[Token(Token = "0x6001438")]
		[Address(RVA = "0xD91F10", Offset = "0xD91F10", VA = "0xD91F10")]
		public NetworkLossDetector()
		{
		}
	}
	[Token(Token = "0x20003DB")]
	public class PauseManager : Singleton<PauseManager>
	{
		[Token(Token = "0x4001400")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject[] hands;

		[Token(Token = "0x4001401")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject[] handControllers;

		[Token(Token = "0x4001402")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private AudioSource eightAudio;

		[Token(Token = "0x4001403")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool isPaused;

		[Token(Token = "0x600144C")]
		[Address(RVA = "0xD92490", Offset = "0xD92490", VA = "0xD92490")]
		public void RegisterEightAudioSource(AudioSource audioSource)
		{
		}

		[Token(Token = "0x600144D")]
		[Address(RVA = "0xD92498", Offset = "0xD92498", VA = "0xD92498")]
		private void Update()
		{
		}

		[Token(Token = "0x600144E")]
		[Address(RVA = "0xD927AC", Offset = "0xD927AC", VA = "0xD927AC", Slot = "5")]
		protected override void DidAwake()
		{
		}

		[Token(Token = "0x600144F")]
		[Address(RVA = "0xD927B0", Offset = "0xD927B0", VA = "0xD927B0")]
		public PauseManager()
		{
		}
	}
	[Token(Token = "0x20003DC")]
	public class PerformanceFrameRateMonitor : MonoBehaviour
	{
		[Token(Token = "0x4001404")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Action lowFrameRateDetectedCallback;

		[Token(Token = "0x4001405")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Action goodFrameRateDetectedCallback;

		[Token(Token = "0x4001406")]
		private const int kTargetFramerate = 72;

		[Token(Token = "0x4001407")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float kBadFramerateThreshold;

		[Token(Token = "0x4001408")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int currentIndex;

		[Token(Token = "0x4001409")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float[] recentFrameRates;

		[Token(Token = "0x400140A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int sequentialGoodFrameSets;

		[Token(Token = "0x17000281")]
		public float mostRecentFPS
		{
			[Token(Token = "0x6001450")]
			[Address(RVA = "0xD927F8", Offset = "0xD927F8", VA = "0xD927F8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000282")]
		public float[] mostRecentFPSs
		{
			[Token(Token = "0x6001451")]
			[Address(RVA = "0xD9283C", Offset = "0xD9283C", VA = "0xD9283C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001452")]
		[Address(RVA = "0xD92844", Offset = "0xD92844", VA = "0xD92844")]
		private void Update()
		{
		}

		[Token(Token = "0x6001453")]
		[Address(RVA = "0xD929E4", Offset = "0xD929E4", VA = "0xD929E4")]
		private float FrameDurationSeconds()
		{
			return default(float);
		}

		[Token(Token = "0x6001454")]
		[Address(RVA = "0xD929EC", Offset = "0xD929EC", VA = "0xD929EC")]
		public PerformanceFrameRateMonitor()
		{
		}
	}
	[Token(Token = "0x20003DD")]
	public class PerformanceManager : MonoBehaviourSingleton<PerformanceManager>
	{
		[Token(Token = "0x400140B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool enableSpaceWarpOnLaunch;

		[Token(Token = "0x400140C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool enable90FPSOnLaunch;

		[Token(Token = "0x400140D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public bool enableDynamicQualitySettings;

		[Token(Token = "0x400140F")]
		private const int kAppLaunchQualityLevel = 4;

		[Token(Token = "0x4001410")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Dictionary<Material, List<MeshRenderer>> meshRendererListsByMaterial;

		[Token(Token = "0x4001411")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private PerformanceFrameRateMonitor frameRateMonitor;

		[Token(Token = "0x4001412")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform _holderTransformForMergedMeshes;

		[Token(Token = "0x17000283")]
		protected override bool shouldDestroyDuplicateSingletons
		{
			[Token(Token = "0x6001455")]
			[Address(RVA = "0xD92A5C", Offset = "0xD92A5C", VA = "0xD92A5C", Slot = "4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000284")]
		public bool spaceWarpIsSetEnabled
		{
			[Token(Token = "0x6001456")]
			[Address(RVA = "0xD92A64", Offset = "0xD92A64", VA = "0xD92A64")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001457")]
			[Address(RVA = "0xD92A6C", Offset = "0xD92A6C", VA = "0xD92A6C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000285")]
		private Transform holderTransformForMergedMeshes
		{
			[Token(Token = "0x6001464")]
			[Address(RVA = "0xD93348", Offset = "0xD93348", VA = "0xD93348")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001458")]
		[Address(RVA = "0xD92A78", Offset = "0xD92A78", VA = "0xD92A78", Slot = "6")]
		protected override void DidAwake()
		{
		}

		[Token(Token = "0x6001459")]
		[Address(RVA = "0xD92AE4", Offset = "0xD92AE4", VA = "0xD92AE4")]
		private void Start()
		{
		}

		[Token(Token = "0x600145A")]
		[Address(RVA = "0xD92E70", Offset = "0xD92E70", VA = "0xD92E70")]
		private void ActiveSceneDidChange(Scene prevScene, Scene newScene)
		{
		}

		[Token(Token = "0x600145B")]
		[Address(RVA = "0xD92D5C", Offset = "0xD92D5C", VA = "0xD92D5C")]
		private void PerformOptimizationsForCurrentScene()
		{
		}

		[Token(Token = "0x600145C")]
		[Address(RVA = "0xD92E74", Offset = "0xD92E74", VA = "0xD92E74")]
		private void SetupFrameRateMonitor()
		{
		}

		[Token(Token = "0x600145D")]
		[Address(RVA = "0xD92FE8", Offset = "0xD92FE8", VA = "0xD92FE8")]
		private void QualityLevelShouldChange(bool shouldIncrease)
		{
		}

		[Token(Token = "0x600145E")]
		[Address(RVA = "0xD93000", Offset = "0xD93000", VA = "0xD93000")]
		public string GetFrameRateMonitorState()
		{
			return null;
		}

		[Token(Token = "0x600145F")]
		[Address(RVA = "0xD92CF0", Offset = "0xD92CF0", VA = "0xD92CF0")]
		public void SetSpaceWarpEnabled(bool toEnable)
		{
		}

		[Token(Token = "0x6001460")]
		[Address(RVA = "0xD92BD0", Offset = "0xD92BD0", VA = "0xD92BD0")]
		public static int SetFrameRate(int fps)
		{
			return default(int);
		}

		[Token(Token = "0x6001461")]
		[Address(RVA = "0xD93238", Offset = "0xD93238", VA = "0xD93238")]
		public void SetFFREnabled(bool toEnabled)
		{
		}

		[Token(Token = "0x6001462")]
		[Address(RVA = "0xD9329C", Offset = "0xD9329C", VA = "0xD9329C")]
		public bool FFRisAvailable()
		{
			return default(bool);
		}

		[Token(Token = "0x6001463")]
		[Address(RVA = "0xD932EC", Offset = "0xD932EC", VA = "0xD932EC")]
		public bool FFRIsEnabled()
		{
			return default(bool);
		}

		[Token(Token = "0x6001465")]
		[Address(RVA = "0xD93418", Offset = "0xD93418", VA = "0xD93418")]
		public void MergeAllMeshesForMaterialWithName(string matName)
		{
		}

		[Token(Token = "0x6001466")]
		[Address(RVA = "0xD93850", Offset = "0xD93850", VA = "0xD93850")]
		public void MergeAllMeshesForMaterial(Material material)
		{
		}

		[Token(Token = "0x6001467")]
		[Address(RVA = "0xD93620", Offset = "0xD93620", VA = "0xD93620")]
		public static Dictionary<Material, List<MeshRenderer>> BuildMaterialLookupDictionary(bool onlyMergeStatic = false)
		{
			return null;
		}

		[Token(Token = "0x6001468")]
		[Address(RVA = "0xD93E0C", Offset = "0xD93E0C", VA = "0xD93E0C")]
		public static void RecursivelyAndFindSameMaterials(Transform rootTransform, Dictionary<Material, List<MeshRenderer>> allGameObjectsByMaterial, bool onlyMergeStatic)
		{
		}

		[Token(Token = "0x6001469")]
		[Address(RVA = "0xD94344", Offset = "0xD94344", VA = "0xD94344")]
		[ContextMenu("Optimize Books")]
		public void OptimizeBooks()
		{
		}

		[Token(Token = "0x600146A")]
		[Address(RVA = "0xD9438C", Offset = "0xD9438C", VA = "0xD9438C")]
		[ContextMenu("Optimize everything else")]
		public void OptimizeEverythingElse()
		{
		}

		[Token(Token = "0x600146B")]
		[Address(RVA = "0xD96828", Offset = "0xD96828", VA = "0xD96828")]
		private void PerformInstancedBatchRenderering(List<MeshRenderer> allRenderers)
		{
		}

		[Token(Token = "0x600146C")]
		[Address(RVA = "0xD96AF8", Offset = "0xD96AF8", VA = "0xD96AF8")]
		public PerformanceManager()
		{
		}
	}
	[Token(Token = "0x20003DE")]
	internal struct MeshMergerItem
	{
		[Token(Token = "0x4001413")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public MeshRenderer meshRenderer;

		[Token(Token = "0x4001414")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Transform originalParentTransform;
	}
	[Token(Token = "0x20003DF")]
	public class PerformanceMeshMergeController : MonoBehaviour
	{
		[Token(Token = "0x4001415")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private MeshCombiner meshCombiner;

		[Token(Token = "0x4001416")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<MeshMergerItem> meshMergerItems;

		[Token(Token = "0x4001417")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool needToReMergeMesh;

		[Token(Token = "0x6001470")]
		[Address(RVA = "0xD93A10", Offset = "0xD93A10", VA = "0xD93A10")]
		public void SetupInTransformFromMeshRenderers(Transform mergedMeshHolderTransform, List<MeshRenderer> meshRenderers)
		{
		}

		[Token(Token = "0x6001471")]
		[Address(RVA = "0xD96BE4", Offset = "0xD96BE4", VA = "0xD96BE4")]
		private void Update()
		{
		}

		[Token(Token = "0x6001472")]
		[Address(RVA = "0xD96D68", Offset = "0xD96D68", VA = "0xD96D68")]
		private void ItemWasDestroyedOrDeactivated(MeshMergerItem meshMergerItem)
		{
		}

		[Token(Token = "0x6001473")]
		[Address(RVA = "0xD96B64", Offset = "0xD96B64", VA = "0xD96B64")]
		public void PerformMeshMerger(bool reactiveMeshRenderersFirst)
		{
		}

		[Token(Token = "0x6001474")]
		[Address(RVA = "0xD97008", Offset = "0xD97008", VA = "0xD97008")]
		public void PerformMeshMergerStaticBatchingUtility(bool reactiveMeshRenderersFirst)
		{
		}

		[Token(Token = "0x6001475")]
		[Address(RVA = "0xD96E04", Offset = "0xD96E04", VA = "0xD96E04")]
		private void SetupAllMeshMergeItems(bool toOriginalTransform, bool meshRendererEnabled)
		{
		}

		[Token(Token = "0x6001476")]
		[Address(RVA = "0xD973D8", Offset = "0xD973D8", VA = "0xD973D8")]
		public PerformanceMeshMergeController()
		{
		}
	}
	[Token(Token = "0x20003E0")]
	public class PlayerFallCatcher : MonoBehaviour
	{
		[Token(Token = "0x6001477")]
		[Address(RVA = "0xD973E0", Offset = "0xD973E0", VA = "0xD973E0")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6001478")]
		[Address(RVA = "0xD97550", Offset = "0xD97550", VA = "0xD97550")]
		public PlayerFallCatcher()
		{
		}
	}
	[Token(Token = "0x20003E1")]
	public class RoomManager : Singleton<RoomManager>
	{
		[Token(Token = "0x400141A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Action OnNewRoomSet;

		[Token(Token = "0x400141B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Dictionary<Room, Vector3> defaultPropPositions;

		[Token(Token = "0x17000286")]
		public Room currentRoom
		{
			[Token(Token = "0x6001479")]
			[Address(RVA = "0xD97558", Offset = "0xD97558", VA = "0xD97558")]
			[CompilerGenerated]
			get
			{
				return default(Room);
			}
			[Token(Token = "0x600147A")]
			[Address(RVA = "0xD97560", Offset = "0xD97560", VA = "0xD97560")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000287")]
		public Room currentScene
		{
			[Token(Token = "0x600147B")]
			[Address(RVA = "0xD97568", Offset = "0xD97568", VA = "0xD97568")]
			[CompilerGenerated]
			get
			{
				return default(Room);
			}
			[Token(Token = "0x600147C")]
			[Address(RVA = "0xD97570", Offset = "0xD97570", VA = "0xD97570")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x600147D")]
		[Address(RVA = "0xD97578", Offset = "0xD97578", VA = "0xD97578", Slot = "5")]
		protected override void DidAwake()
		{
		}

		[Token(Token = "0x600147E")]
		[Address(RVA = "0xD9757C", Offset = "0xD9757C", VA = "0xD9757C")]
		public void SetNewCurrentRoom(Room newCurrent, Room newScene)
		{
		}

		[Token(Token = "0x600147F")]
		[Address(RVA = "0xD975A8", Offset = "0xD975A8", VA = "0xD975A8")]
		public Vector3 GetDefaultPropPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001480")]
		[Address(RVA = "0xD975FC", Offset = "0xD975FC", VA = "0xD975FC")]
		public RoomManager()
		{
		}
	}
	[Token(Token = "0x20003E2")]
	public class RotateWithTouch : MonoBehaviour
	{
		[Token(Token = "0x20003E3")]
		public enum RotationalAxis
		{
			[Token(Token = "0x4001426")]
			X,
			[Token(Token = "0x4001427")]
			Y,
			[Token(Token = "0x4001428")]
			Z
		}

		[Token(Token = "0x20003E4")]
		public class FingertipPositionalRef
		{
			[Token(Token = "0x4001429")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float radialPositionOnCenterFace;

			[Token(Token = "0x400142A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public Quaternion axialRotation;

			[Token(Token = "0x6001488")]
			[Address(RVA = "0xD98150", Offset = "0xD98150", VA = "0xD98150")]
			public FingertipPositionalRef(float radialPositionOnCenterFace, Quaternion axialRotation)
			{
			}
		}

		[Token(Token = "0x400141C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RotationalAxis rotationalAxis;

		[Token(Token = "0x400141D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform rotationalCenter;

		[Token(Token = "0x400141E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform[] rotatorTransforms;

		[Token(Token = "0x400141F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float[] rotatorWorldRadiiFromCenter;

		[Token(Token = "0x4001420")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float minRadius;

		[Token(Token = "0x4001421")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float lerpFactor;

		[Token(Token = "0x4001422")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<Transform> trackedFingers;

		[Token(Token = "0x4001423")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int currentRotatorIndex;

		[Token(Token = "0x4001424")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Quaternion currentRotatorOffset;

		[Token(Token = "0x6001481")]
		[Address(RVA = "0xD97720", Offset = "0xD97720", VA = "0xD97720")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6001482")]
		[Address(RVA = "0xD9781C", Offset = "0xD9781C", VA = "0xD9781C")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6001483")]
		[Address(RVA = "0xD978E4", Offset = "0xD978E4", VA = "0xD978E4")]
		private void Update()
		{
		}

		[Token(Token = "0x6001484")]
		[Address(RVA = "0xD97B30", Offset = "0xD97B30", VA = "0xD97B30")]
		private FingertipPositionalRef GetFingertipPositionalRef(Transform fingerTip)
		{
			return null;
		}

		[Token(Token = "0x6001485")]
		[Address(RVA = "0xD98028", Offset = "0xD98028", VA = "0xD98028")]
		private int GetSelectedRotatorIndex(float fingerRadialPosition)
		{
			return default(int);
		}

		[Token(Token = "0x6001486")]
		[Address(RVA = "0xD98090", Offset = "0xD98090", VA = "0xD98090")]
		private void TryTransitionRefRotator(int selectedRotatorIndex, Quaternion fingertipQ, Quaternion rotatorQ)
		{
		}

		[Token(Token = "0x6001487")]
		[Address(RVA = "0xD981A0", Offset = "0xD981A0", VA = "0xD981A0")]
		public RotateWithTouch()
		{
		}
	}
	[Token(Token = "0x20003E5")]
	public class SceneTransitionPayload : MonoBehaviour
	{
		[Token(Token = "0x400142B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Room originRoom;

		[Token(Token = "0x400142C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Room destinationRoom;

		[Token(Token = "0x400142D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Room unloadScene;

		[Token(Token = "0x400142E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Room loadScene;

		[Token(Token = "0x6001489")]
		[Address(RVA = "0xD98228", Offset = "0xD98228", VA = "0xD98228")]
		public SceneTransitionPayload()
		{
		}
	}
	[Token(Token = "0x20003E6")]
	public class ShowElevatorShaft : MonoBehaviour
	{
		[Token(Token = "0x20003E7")]
		[CompilerGenerated]
		private sealed class <Start>d__1 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001430")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001431")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001432")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ShowElevatorShaft <>4__this;

			[Token(Token = "0x17000288")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001491")]
				[Address(RVA = "0xD984F4", Offset = "0xD984F4", VA = "0xD984F4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000289")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001493")]
				[Address(RVA = "0xD9853C", Offset = "0xD9853C", VA = "0xD9853C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600148E")]
			[Address(RVA = "0xD982A4", Offset = "0xD982A4", VA = "0xD982A4")]
			[DebuggerHidden]
			public <Start>d__1(int <>1__state)
			{
			}

			[Token(Token = "0x600148F")]
			[Address(RVA = "0xD98398", Offset = "0xD98398", VA = "0xD98398", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001490")]
			[Address(RVA = "0xD9839C", Offset = "0xD9839C", VA = "0xD9839C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001492")]
			[Address(RVA = "0xD984FC", Offset = "0xD984FC", VA = "0xD984FC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400142F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject[] shaftSections;

		[Token(Token = "0x600148A")]
		[Address(RVA = "0xD98230", Offset = "0xD98230", VA = "0xD98230")]
		[IteratorStateMachine(typeof(<Start>d__1))]
		private IEnumerator Start()
		{
			return null;
		}

		[Token(Token = "0x600148B")]
		[Address(RVA = "0xD982CC", Offset = "0xD982CC", VA = "0xD982CC")]
		private void ToggleVisible(bool enable)
		{
		}

		[Token(Token = "0x600148C")]
		[Address(RVA = "0xD98334", Offset = "0xD98334", VA = "0xD98334")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600148D")]
		[Address(RVA = "0xD98390", Offset = "0xD98390", VA = "0xD98390")]
		public ShowElevatorShaft()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003E8")]
	public class StoreAreaAlcove
	{
		[Token(Token = "0x4001433")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public MeshRenderer featuredSignBackground;

		[Token(Token = "0x4001434")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TextMeshPro featureSignText;

		[Token(Token = "0x4001435")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MeshRenderer bannerBackground;

		[Token(Token = "0x4001436")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public MeshRenderer bannerLogo;

		[Token(Token = "0x4001437")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public TextMeshPro titleText;

		[Token(Token = "0x4001438")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public TextMeshPro descriptionText;

		[Token(Token = "0x6001494")]
		[Address(RVA = "0xD98544", Offset = "0xD98544", VA = "0xD98544")]
		public StoreAreaAlcove()
		{
		}
	}
	[Token(Token = "0x20003E9")]
	public class StoreAreaController : MonoBehaviour
	{
		[Token(Token = "0x4001439")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public StoreAreaAlcove centerBackwallAlcove;

		[Token(Token = "0x400143A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public StoreAreaAlcove leftBackwallAlcove;

		[Token(Token = "0x400143B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public StoreAreaAlcove rightBackwallAlcove;

		[Token(Token = "0x6001495")]
		[Address(RVA = "0xD9854C", Offset = "0xD9854C", VA = "0xD9854C")]
		[ContextMenu("Grab Alcove Refs")]
		public void PopulateAlcoveReferences()
		{
		}

		[Token(Token = "0x6001496")]
		[Address(RVA = "0xD98648", Offset = "0xD98648", VA = "0xD98648")]
		private void AssignRefsToAlcoveForNumber(StoreAreaAlcove alcove, int number)
		{
		}

		[Token(Token = "0x6001497")]
		private T FindComponentOnChild<T>(string childGameObjName) where T : Component
		{
			return null;
		}

		[Token(Token = "0x6001498")]
		[Address(RVA = "0xD988F0", Offset = "0xD988F0", VA = "0xD988F0")]
		public StoreAreaController()
		{
		}
	}
	[Token(Token = "0x20003EA")]
	public class WallCollisionFader : MonoBehaviour
	{
		[Token(Token = "0x20003EB")]
		[CompilerGenerated]
		private sealed class <Bump>d__8 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001442")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001443")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001444")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public WallCollisionFader <>4__this;

			[Token(Token = "0x4001445")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Collision collision;

			[Token(Token = "0x1700028A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60014A1")]
				[Address(RVA = "0xD99240", Offset = "0xD99240", VA = "0xD99240", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700028B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60014A3")]
				[Address(RVA = "0xD99288", Offset = "0xD99288", VA = "0xD99288", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600149E")]
			[Address(RVA = "0xD98AAC", Offset = "0xD98AAC", VA = "0xD98AAC")]
			[DebuggerHidden]
			public <Bump>d__8(int <>1__state)
			{
			}

			[Token(Token = "0x600149F")]
			[Address(RVA = "0xD98B20", Offset = "0xD98B20", VA = "0xD98B20", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60014A0")]
			[Address(RVA = "0xD98B24", Offset = "0xD98B24", VA = "0xD98B24", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60014A2")]
			[Address(RVA = "0xD99248", Offset = "0xD99248", VA = "0xD99248", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400143C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ContinuousMoveProviderBase continuousMoveProvider;

		[Token(Token = "0x400143D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MovementListener movementListener;

		[Token(Token = "0x400143E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ColorFader fader;

		[Token(Token = "0x400143F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float bumpAmount;

		[Token(Token = "0x4001440")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float distanceFromRigLastFrame;

		[Token(Token = "0x4001441")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform hmd;

		[Token(Token = "0x6001499")]
		[Address(RVA = "0xD988F8", Offset = "0xD988F8", VA = "0xD988F8")]
		private void Start()
		{
		}

		[Token(Token = "0x600149A")]
		[Address(RVA = "0xD98954", Offset = "0xD98954", VA = "0xD98954")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x600149B")]
		[Address(RVA = "0xD98A1C", Offset = "0xD98A1C", VA = "0xD98A1C")]
		[IteratorStateMachine(typeof(<Bump>d__8))]
		private IEnumerator Bump(Collision collision)
		{
			return null;
		}

		[Token(Token = "0x600149C")]
		[Address(RVA = "0xD98AD4", Offset = "0xD98AD4", VA = "0xD98AD4")]
		private void EnableMovement()
		{
		}

		[Token(Token = "0x600149D")]
		[Address(RVA = "0xD98B10", Offset = "0xD98B10", VA = "0xD98B10")]
		public WallCollisionFader()
		{
		}
	}
	[Token(Token = "0x20003EC")]
	public class YVREntitlementCheck : MonoBehaviour
	{
		[Token(Token = "0x60014A4")]
		[Address(RVA = "0xD99290", Offset = "0xD99290", VA = "0xD99290")]
		private void Start()
		{
		}

		[Token(Token = "0x60014A5")]
		[Address(RVA = "0xD99418", Offset = "0xD99418", VA = "0xD99418")]
		private void GetViewerEntitledCallback(YVRMessage<Entitlement> msg)
		{
		}

		[Token(Token = "0x60014A6")]
		[Address(RVA = "0xD99488", Offset = "0xD99488", VA = "0xD99488")]
		public YVREntitlementCheck()
		{
		}
	}
}
namespace Librarium.UserEvents
{
	[Token(Token = "0x20003ED")]
	public class UserEventManager : Singleton<UserEventManager>
	{
		[Token(Token = "0x4001446")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool supressAPISaving;

		[Token(Token = "0x4001447")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UserEventsTestState testState;

		[Token(Token = "0x4001449")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Action OnUserEventsLoadedForSession;

		[Token(Token = "0x400144A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[CanBeNull]
		public Action<UserEvent> OnEventsUpdated;

		[Token(Token = "0x400144B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<UserEvent> completedUserEvents;

		[Token(Token = "0x1700028C")]
		public bool initializedForSession
		{
			[Token(Token = "0x60014A7")]
			[Address(RVA = "0xD99490", Offset = "0xD99490", VA = "0xD99490")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60014A8")]
			[Address(RVA = "0xD99498", Offset = "0xD99498", VA = "0xD99498")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60014A9")]
		[Address(RVA = "0xD994A4", Offset = "0xD994A4", VA = "0xD994A4", Slot = "5")]
		protected override void DidAwake()
		{
		}

		[Token(Token = "0x60014AA")]
		[Address(RVA = "0xD995BC", Offset = "0xD995BC", VA = "0xD995BC")]
		private void Start()
		{
		}

		[Token(Token = "0x60014AB")]
		[Address(RVA = "0xD9966C", Offset = "0xD9966C", VA = "0xD9966C")]
		private void InitializeUserEvents(List<UserEvent> events)
		{
		}

		[Token(Token = "0x60014AC")]
		[Address(RVA = "0xD99734", Offset = "0xD99734", VA = "0xD99734")]
		private void ActivateTester()
		{
		}

		[Token(Token = "0x60014AD")]
		[Address(RVA = "0xD997E4", Offset = "0xD997E4", VA = "0xD997E4")]
		public List<UserEvent> GetCompletedUserEvents()
		{
			return null;
		}

		[Token(Token = "0x60014AE")]
		[Address(RVA = "0xD997EC", Offset = "0xD997EC", VA = "0xD997EC")]
		public void AddEvent(UserEvent newEvent)
		{
		}

		[Token(Token = "0x60014AF")]
		[Address(RVA = "0xD998EC", Offset = "0xD998EC", VA = "0xD998EC")]
		private void SaveEventToAPI(UserEvent newEvent)
		{
		}

		[Token(Token = "0x60014B0")]
		[Address(RVA = "0xD995C0", Offset = "0xD995C0", VA = "0xD995C0")]
		private void PopulateTestEventSet()
		{
		}

		[Token(Token = "0x60014B1")]
		[Address(RVA = "0xD999F0", Offset = "0xD999F0", VA = "0xD999F0")]
		public UserEventManager()
		{
		}
	}
	[Token(Token = "0x20003EE")]
	public class UserEventsTestState : MonoBehaviour
	{
		[Token(Token = "0x20003EF")]
		[CompilerGenerated]
		private sealed class <CompleteEventSet>d__5 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001450")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001451")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001452")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public UserEventsTestState <>4__this;

			[Token(Token = "0x4001453")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private List<UserEvent>.Enumerator <>7__wrap1;

			[Token(Token = "0x1700028D")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60014BA")]
				[Address(RVA = "0xD99E64", Offset = "0xD99E64", VA = "0xD99E64", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700028E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60014BC")]
				[Address(RVA = "0xD99EAC", Offset = "0xD99EAC", VA = "0xD99EAC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60014B6")]
			[Address(RVA = "0xD99AB0", Offset = "0xD99AB0", VA = "0xD99AB0")]
			[DebuggerHidden]
			public <CompleteEventSet>d__5(int <>1__state)
			{
			}

			[Token(Token = "0x60014B7")]
			[Address(RVA = "0xD99B60", Offset = "0xD99B60", VA = "0xD99B60", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60014B8")]
			[Address(RVA = "0xD99B7C", Offset = "0xD99B7C", VA = "0xD99B7C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60014B9")]
			[Address(RVA = "0xD99E14", Offset = "0xD99E14", VA = "0xD99E14")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x60014BB")]
			[Address(RVA = "0xD99E6C", Offset = "0xD99E6C", VA = "0xD99E6C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400144C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<UserEvent> completedUserEvents;

		[Token(Token = "0x400144D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool fireDelaySet;

		[Token(Token = "0x400144E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<UserEvent> setToCompleteAfterDelay;

		[Token(Token = "0x400144F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float delaySeconds;

		[Token(Token = "0x60014B3")]
		[Address(RVA = "0xD997B4", Offset = "0xD997B4", VA = "0xD997B4")]
		public void RunTests()
		{
		}

		[Token(Token = "0x60014B4")]
		[Address(RVA = "0xD99A3C", Offset = "0xD99A3C", VA = "0xD99A3C")]
		[IteratorStateMachine(typeof(<CompleteEventSet>d__5))]
		private IEnumerator CompleteEventSet()
		{
			return null;
		}

		[Token(Token = "0x60014B5")]
		[Address(RVA = "0xD99AD8", Offset = "0xD99AD8", VA = "0xD99AD8")]
		public UserEventsTestState()
		{
		}
	}
	[Token(Token = "0x20003F0")]
	public class UserEventTrigger
	{
		[Token(Token = "0x4001454")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Action<bool> PreTriggerToggle;

		[Token(Token = "0x4001455")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Action<bool> TriggerToggle;

		[Token(Token = "0x4001456")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<UserEvent> eventSet;

		[Token(Token = "0x4001457")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private RequirementType requirementType;

		[Token(Token = "0x4001458")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private RequirementScope requirementScope;

		[Token(Token = "0x4001459")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private RequirementOrder requirementOrder;

		[Token(Token = "0x400145A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool[] completedRevelentEvents;

		[Token(Token = "0x400145B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool currentTriggerValue;

		[Token(Token = "0x400145C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private string debugNameString;

		[Token(Token = "0x60014BD")]
		[Address(RVA = "0xD8B4D4", Offset = "0xD8B4D4", VA = "0xD8B4D4")]
		public UserEventTrigger(List<UserEvent> eventSet, RequirementType requirementType, RequirementScope requirementScope, RequirementOrder requirementOrder)
		{
		}

		[Token(Token = "0x60014BE")]
		[Address(RVA = "0xD99EB4", Offset = "0xD99EB4", VA = "0xD99EB4")]
		private void SetDebugNameString()
		{
		}

		[Token(Token = "0x60014BF")]
		[Address(RVA = "0xD9A1F0", Offset = "0xD9A1F0", VA = "0xD9A1F0")]
		private void InitializeRelevantEvents()
		{
		}

		[Token(Token = "0x60014C0")]
		[Address(RVA = "0xD9A470", Offset = "0xD9A470", VA = "0xD9A470")]
		private int GetEventIndexInSet(UserEvent ue)
		{
			return default(int);
		}

		[Token(Token = "0x60014C1")]
		[Address(RVA = "0xD9A3DC", Offset = "0xD9A3DC", VA = "0xD9A3DC")]
		private bool TryAddNewRelevantCompleteEvent(UserEvent ue, bool enforceOrder)
		{
			return default(bool);
		}

		[Token(Token = "0x60014C2")]
		[Address(RVA = "0xD9A388", Offset = "0xD9A388", VA = "0xD9A388")]
		private bool SetIsTriggered()
		{
			return default(bool);
		}

		[Token(Token = "0x60014C3")]
		[Address(RVA = "0xD9A8A0", Offset = "0xD9A8A0", VA = "0xD9A8A0")]
		public bool GetIsTriggered()
		{
			return default(bool);
		}

		[Token(Token = "0x60014C4")]
		[Address(RVA = "0xD9A4C8", Offset = "0xD9A4C8", VA = "0xD9A4C8")]
		private bool GetEventsComplete()
		{
			return default(bool);
		}

		[Token(Token = "0x60014C5")]
		[Address(RVA = "0xD9A6B4", Offset = "0xD9A6B4", VA = "0xD9A6B4")]
		private bool GetEventsIncomplete()
		{
			return default(bool);
		}

		[Token(Token = "0x60014C6")]
		[Address(RVA = "0xD9A8A8", Offset = "0xD9A8A8", VA = "0xD9A8A8")]
		private void UpdateRelevantEvents(UserEvent newCompleteEvent)
		{
		}
	}
	[Token(Token = "0x20003F1")]
	public class UserEventTriggerMono : MonoBehaviour
	{
		[Token(Token = "0x400145D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<UserEvent> eventSet;

		[Token(Token = "0x400145E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RequirementType requirementType;

		[Token(Token = "0x400145F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public RequirementScope requirementScope;

		[Token(Token = "0x4001460")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public RequirementOrder requirementOrder;

		[Token(Token = "0x4001461")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private UserEventTrigger trigger;

		[Token(Token = "0x60014C7")]
		[Address(RVA = "0xD9A90C", Offset = "0xD9A90C", VA = "0xD9A90C")]
		public UserEventTrigger GetTrigger()
		{
			return null;
		}

		[Token(Token = "0x60014C8")]
		[Address(RVA = "0xD9A930", Offset = "0xD9A930", VA = "0xD9A930")]
		private void InitializeTrigger()
		{
		}

		[Token(Token = "0x60014C9")]
		[Address(RVA = "0xD9A9C0", Offset = "0xD9A9C0", VA = "0xD9A9C0")]
		public UserEventTriggerMono()
		{
		}
	}
	[Token(Token = "0x20003F2")]
	public class UserEventTriggerSet
	{
		[Token(Token = "0x4001462")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Action<bool> PreTriggerSetToggle;

		[Token(Token = "0x4001463")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Action<bool> TriggerSetToggle;

		[Token(Token = "0x4001464")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<UserEventTrigger> triggerSet;

		[Token(Token = "0x4001465")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool triggerValueChange;

		[Token(Token = "0x4001466")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		private bool currentSetTriggerValue;

		[Token(Token = "0x60014CA")]
		[Address(RVA = "0xD8B658", Offset = "0xD8B658", VA = "0xD8B658")]
		public UserEventTriggerSet(List<UserEventTrigger> triggerSet)
		{
		}

		[Token(Token = "0x60014CB")]
		[Address(RVA = "0xD9ACC8", Offset = "0xD9ACC8", VA = "0xD9ACC8")]
		public bool GetIsEmptySet()
		{
			return default(bool);
		}

		[Token(Token = "0x60014CC")]
		[Address(RVA = "0xD9A9C8", Offset = "0xD9A9C8", VA = "0xD9A9C8")]
		private void InitializeAndSubToAllTriggerToggles()
		{
		}

		[Token(Token = "0x60014CD")]
		[Address(RVA = "0xD89C8C", Offset = "0xD89C8C", VA = "0xD89C8C")]
		public bool GetIsTriggered()
		{
			return default(bool);
		}

		[Token(Token = "0x60014CE")]
		[Address(RVA = "0xD9AD18", Offset = "0xD9AD18", VA = "0xD9AD18")]
		private void UpdateFromPreTriggerChange(bool newTriggerValue)
		{
		}

		[Token(Token = "0x60014CF")]
		[Address(RVA = "0xD9AD80", Offset = "0xD9AD80", VA = "0xD9AD80")]
		private void UpdateFromTriggerChange(bool newTriggerValue)
		{
		}
	}
}
namespace Librarium.Puzzles
{
	[Token(Token = "0x20003F3")]
	public class KeyholePuzzle : PuzzleElement
	{
		[Token(Token = "0x20003F4")]
		[CompilerGenerated]
		private sealed class <DoDeleteKey>d__11 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400146F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001470")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001471")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float seconds;

			[Token(Token = "0x4001472")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public KeyholePuzzle <>4__this;

			[Token(Token = "0x1700028F")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60014D8")]
				[Address(RVA = "0xD9B3D0", Offset = "0xD9B3D0", VA = "0xD9B3D0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000290")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60014DA")]
				[Address(RVA = "0xD9B418", Offset = "0xD9B418", VA = "0xD9B418", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60014D5")]
			[Address(RVA = "0xD9B13C", Offset = "0xD9B13C", VA = "0xD9B13C")]
			[DebuggerHidden]
			public <DoDeleteKey>d__11(int <>1__state)
			{
			}

			[Token(Token = "0x60014D6")]
			[Address(RVA = "0xD9B2E4", Offset = "0xD9B2E4", VA = "0xD9B2E4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60014D7")]
			[Address(RVA = "0xD9B2E8", Offset = "0xD9B2E8", VA = "0xD9B2E8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60014D9")]
			[Address(RVA = "0xD9B3D8", Offset = "0xD9B3D8", VA = "0xD9B3D8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001467")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject keyPrefab;

		[Token(Token = "0x4001468")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector3[] stateLocations;

		[Token(Token = "0x4001469")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Vector3[] stateEulers;

		[Token(Token = "0x400146A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool[] stateActive;

		[Token(Token = "0x400146B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Vector3[] keyLocations;

		[Token(Token = "0x400146C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Vector3[] keyEulers;

		[Token(Token = "0x400146D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public bool instantiateKey;

		[Token(Token = "0x400146E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject key;

		[Token(Token = "0x60014D0")]
		[Address(RVA = "0xD9ADB8", Offset = "0xD9ADB8", VA = "0xD9ADB8", Slot = "4")]
		public override void Initialize(int state)
		{
		}

		[Token(Token = "0x60014D1")]
		[Address(RVA = "0xD9AFE4", Offset = "0xD9AFE4", VA = "0xD9AFE4")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x60014D2")]
		[Address(RVA = "0xD9B134", Offset = "0xD9B134", VA = "0xD9B134", Slot = "6")]
		protected override void ActivatePuzzle()
		{
		}

		[Token(Token = "0x60014D3")]
		[Address(RVA = "0xD9B0B0", Offset = "0xD9B0B0", VA = "0xD9B0B0")]
		[IteratorStateMachine(typeof(<DoDeleteKey>d__11))]
		private IEnumerator DoDeleteKey(float seconds)
		{
			return null;
		}

		[Token(Token = "0x60014D4")]
		[Address(RVA = "0xD9B164", Offset = "0xD9B164", VA = "0xD9B164")]
		public KeyholePuzzle()
		{
		}
	}
	[Token(Token = "0x20003F5")]
	public abstract class PuzzleElement : MonoBehaviour
	{
		[Token(Token = "0x4001473")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string puzzleKey;

		[Token(Token = "0x4001474")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UserEvent completionEvent;

		[Token(Token = "0x4001475")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<UserEvent> activationPrereqs;

		[Token(Token = "0x4001476")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public List<UserEvent> completionRequirements;

		[Token(Token = "0x4001477")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		protected int state;

		[Token(Token = "0x60014DB")]
		[Address(RVA = "0xD9B420", Offset = "0xD9B420", VA = "0xD9B420")]
		protected void Start()
		{
		}

		[Token(Token = "0x60014DC")]
		[Address(RVA = "0xD9B51C", Offset = "0xD9B51C", VA = "0xD9B51C")]
		protected void QueryForState()
		{
		}

		[Token(Token = "0x60014DD")]
		[Address(RVA = "0xD9B600", Offset = "0xD9B600", VA = "0xD9B600", Slot = "4")]
		public virtual void Initialize(int state)
		{
		}

		[Token(Token = "0x60014DE")]
		[Address(RVA = "0xD9B608", Offset = "0xD9B608", VA = "0xD9B608", Slot = "5")]
		protected virtual void UpdateState(int state)
		{
		}

		[Token(Token = "0x60014DF")]
		[Address(RVA = "0xD9B6C4", Offset = "0xD9B6C4", VA = "0xD9B6C4")]
		private void InitializeElement()
		{
		}

		[Token(Token = "0x60014E0")]
		[Address(RVA = "0xD9B138", Offset = "0xD9B138", VA = "0xD9B138", Slot = "6")]
		protected virtual void ActivatePuzzle()
		{
		}

		[Token(Token = "0x60014E1")]
		[Address(RVA = "0xD9B6C8", Offset = "0xD9B6C8", VA = "0xD9B6C8", Slot = "7")]
		protected virtual void CompletePuzzle()
		{
		}

		[Token(Token = "0x60014E2")]
		[Address(RVA = "0xD9B6CC", Offset = "0xD9B6CC", VA = "0xD9B6CC", Slot = "8")]
		protected virtual void InactivatePuzzle()
		{
		}

		[Token(Token = "0x60014E3")]
		[Address(RVA = "0xD9B168", Offset = "0xD9B168", VA = "0xD9B168")]
		protected PuzzleElement()
		{
		}
	}
	[Token(Token = "0x20003F6")]
	public abstract class PuzzleStateManager : MonoBehaviour
	{
		[Token(Token = "0x4001478")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string puzzleKey;

		[Token(Token = "0x4001479")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UserEvent completionEvent;

		[Token(Token = "0x400147A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<UserEvent> activationPrereqs;

		[Token(Token = "0x400147B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public List<UserEvent> completionRequirements;

		[Token(Token = "0x400147C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		protected int state;

		[Token(Token = "0x60014E4")]
		[Address(RVA = "0xD9B6D0", Offset = "0xD9B6D0", VA = "0xD9B6D0")]
		protected void Start()
		{
		}

		[Token(Token = "0x60014E5")]
		[Address(RVA = "0xD9B7D0", Offset = "0xD9B7D0", VA = "0xD9B7D0")]
		protected void QueryForState()
		{
		}

		[Token(Token = "0x60014E6")]
		[Address(RVA = "0xD9B8B4", Offset = "0xD9B8B4", VA = "0xD9B8B4", Slot = "4")]
		public virtual void Initialize(int state)
		{
		}

		[Token(Token = "0x60014E7")]
		[Address(RVA = "0xD9B8BC", Offset = "0xD9B8BC", VA = "0xD9B8BC", Slot = "5")]
		protected virtual void UpdateState(int state)
		{
		}

		[Token(Token = "0x60014E8")]
		[Address(RVA = "0xD9B7CC", Offset = "0xD9B7CC", VA = "0xD9B7CC")]
		private void InitializeElement()
		{
		}

		[Token(Token = "0x60014E9")]
		[Address(RVA = "0xD9B978", Offset = "0xD9B978", VA = "0xD9B978", Slot = "6")]
		protected virtual void ActivatePuzzle()
		{
		}

		[Token(Token = "0x60014EA")]
		[Address(RVA = "0xD9B97C", Offset = "0xD9B97C", VA = "0xD9B97C", Slot = "7")]
		protected virtual void CompletePuzzle()
		{
		}

		[Token(Token = "0x60014EB")]
		[Address(RVA = "0xD9B980", Offset = "0xD9B980", VA = "0xD9B980", Slot = "8")]
		protected virtual void InactivatePuzzle()
		{
		}

		[Token(Token = "0x60014EC")]
		[Address(RVA = "0xD9B984", Offset = "0xD9B984", VA = "0xD9B984")]
		protected PuzzleStateManager()
		{
		}
	}
	[Token(Token = "0x20003F7")]
	public class AnimationListener : GenericPuzzleTrigger
	{
		[Token(Token = "0x60014ED")]
		[Address(RVA = "0xD9BB00", Offset = "0xD9BB00", VA = "0xD9BB00")]
		public AnimationListener()
		{
		}
	}
	[Token(Token = "0x20003F8")]
	public class AudioPlayer : GenericPuzzleListener
	{
		[Token(Token = "0x400147D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public AudioSource audioSource;

		[Token(Token = "0x60014EE")]
		[Address(RVA = "0xD9BB08", Offset = "0xD9BB08", VA = "0xD9BB08", Slot = "5")]
		protected override void ProcessToggle(PuzzleTriggeredDetails triggerDetails)
		{
		}

		[Token(Token = "0x60014EF")]
		[Address(RVA = "0xD9BB40", Offset = "0xD9BB40", VA = "0xD9BB40")]
		public AudioPlayer()
		{
		}
	}
	[Token(Token = "0x20003F9")]
	public class Delayer : PuzzleEffect
	{
		[Token(Token = "0x20003FA")]
		[CompilerGenerated]
		private sealed class <EffectCoroutine>d__1 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400147F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001480")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001481")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Delayer <>4__this;

			[Token(Token = "0x17000291")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60014F6")]
				[Address(RVA = "0xD9BCA8", Offset = "0xD9BCA8", VA = "0xD9BCA8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000292")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60014F8")]
				[Address(RVA = "0xD9BCF0", Offset = "0xD9BCF0", VA = "0xD9BCF0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60014F3")]
			[Address(RVA = "0xD9BBBC", Offset = "0xD9BBBC", VA = "0xD9BBBC")]
			[DebuggerHidden]
			public <EffectCoroutine>d__1(int <>1__state)
			{
			}

			[Token(Token = "0x60014F4")]
			[Address(RVA = "0xD9BBF0", Offset = "0xD9BBF0", VA = "0xD9BBF0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60014F5")]
			[Address(RVA = "0xD9BBF4", Offset = "0xD9BBF4", VA = "0xD9BBF4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60014F7")]
			[Address(RVA = "0xD9BCB0", Offset = "0xD9BCB0", VA = "0xD9BCB0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400147E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public float delayTime;

		[Token(Token = "0x60014F0")]
		[Address(RVA = "0xD9BB48", Offset = "0xD9BB48", VA = "0xD9BB48", Slot = "6")]
		[IteratorStateMachine(typeof(<EffectCoroutine>d__1))]
		protected override IEnumerator EffectCoroutine()
		{
			return null;
		}

		[Token(Token = "0x60014F1")]
		[Address(RVA = "0xD9BBE4", Offset = "0xD9BBE4", VA = "0xD9BBE4", Slot = "7")]
		protected override void SetEffectComplete()
		{
		}

		[Token(Token = "0x60014F2")]
		[Address(RVA = "0xD9BBE8", Offset = "0xD9BBE8", VA = "0xD9BBE8")]
		public Delayer()
		{
		}
	}
	[Token(Token = "0x20003FB")]
	public class EightStorybookPageSetter : GenericPuzzleListener
	{
		[Token(Token = "0x4001482")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public EightStorybook book;

		[Token(Token = "0x4001483")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public int newPagesAvailable;

		[Token(Token = "0x60014F9")]
		[Address(RVA = "0xD9BCF8", Offset = "0xD9BCF8", VA = "0xD9BCF8", Slot = "5")]
		protected override void ProcessToggle(PuzzleTriggeredDetails triggerDetails)
		{
		}

		[Token(Token = "0x60014FA")]
		[Address(RVA = "0xD9BD30", Offset = "0xD9BD30", VA = "0xD9BD30")]
		public EightStorybookPageSetter()
		{
		}
	}
	[Token(Token = "0x20003FC")]
	public class EightStorybookPageTurner : GenericPuzzleListener
	{
		[Token(Token = "0x4001484")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public EightStorybook book;

		[Token(Token = "0x4001485")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public int targetAvailablePage;

		[Token(Token = "0x60014FB")]
		[Address(RVA = "0xD9BD8C", Offset = "0xD9BD8C", VA = "0xD9BD8C", Slot = "5")]
		protected override void ProcessToggle(PuzzleTriggeredDetails triggerDetails)
		{
		}

		[Token(Token = "0x60014FC")]
		[Address(RVA = "0xD9BDC0", Offset = "0xD9BDC0", VA = "0xD9BDC0")]
		public EightStorybookPageTurner()
		{
		}
	}
	[Token(Token = "0x20003FD")]
	public class FindCuriosInHiddenRoomFacade : GenericPuzzleListener
	{
		[Token(Token = "0x4001486")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform cornerOne;

		[Token(Token = "0x4001487")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Transform cornerTwo;

		[Token(Token = "0x4001488")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Transform rotationRef;

		[Token(Token = "0x4001489")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public HiddenRoom hiddenRoom;

		[Token(Token = "0x60014FD")]
		[Address(RVA = "0xD9BDC4", Offset = "0xD9BDC4", VA = "0xD9BDC4", Slot = "5")]
		protected override void ProcessToggle(PuzzleTriggeredDetails triggerDetails)
		{
		}

		[Token(Token = "0x60014FE")]
		[Address(RVA = "0xD9BDD4", Offset = "0xD9BDD4", VA = "0xD9BDD4")]
		private void BroadcastAllCuriosInArea()
		{
		}

		[Token(Token = "0x60014FF")]
		[Address(RVA = "0xD9C178", Offset = "0xD9C178", VA = "0xD9C178")]
		public FindCuriosInHiddenRoomFacade()
		{
		}
	}
	[Token(Token = "0x20003FE")]
	public abstract class GenericPuzzleListener : MonoBehaviour
	{
		[Token(Token = "0x400148A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<GenericPuzzleTrigger> triggers;

		[Token(Token = "0x400148B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RequirementScope triggerSetScope;

		[Token(Token = "0x400148C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public RequirementOrder triggerSetOrder;

		[Token(Token = "0x400148D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool processRepeatTriggers;

		[Token(Token = "0x400148E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool dontUpdateMidSession;

		[Token(Token = "0x400148F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		public bool updateWhileInactive;

		[Token(Token = "0x4001490")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public SimpleTriggerBridge onCompleteTrigger;

		[Token(Token = "0x4001491")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected bool currentlyTriggered;

		[Token(Token = "0x4001492")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected GameObject thisObj;

		[Token(Token = "0x4001493")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool[] completedTriggers;

		[Token(Token = "0x4001494")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Dictionary<Guid, int> idToIndexDict;

		[Token(Token = "0x4001495")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected string debugNameString;

		[Token(Token = "0x6001500")]
		[Address(RVA = "0xD9C17C", Offset = "0xD9C17C", VA = "0xD9C17C", Slot = "4")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6001501")]
		[Address(RVA = "0xD9C1B0", Offset = "0xD9C1B0", VA = "0xD9C1B0")]
		private void InitializeTriggers()
		{
		}

		[Token(Token = "0x6001502")]
		[Address(RVA = "0xD9C3EC", Offset = "0xD9C3EC", VA = "0xD9C3EC")]
		private void SetDebugNameString()
		{
		}

		[Token(Token = "0x6001503")]
		[Address(RVA = "0xD9C774", Offset = "0xD9C774", VA = "0xD9C774")]
		private bool TryUpdateCompleteEvents(PuzzleTriggeredDetails triggerDetails)
		{
			return default(bool);
		}

		[Token(Token = "0x6001504")]
		[Address(RVA = "0xD9C84C", Offset = "0xD9C84C", VA = "0xD9C84C")]
		private bool SetTriggered()
		{
			return default(bool);
		}

		[Token(Token = "0x6001505")]
		[Address(RVA = "0xD9CAB4", Offset = "0xD9CAB4", VA = "0xD9CAB4")]
		public bool GetIsTriggered()
		{
			return default(bool);
		}

		[Token(Token = "0x6001506")]
		[Address(RVA = "0xD9C88C", Offset = "0xD9C88C", VA = "0xD9C88C")]
		private bool GetTriggersComplete()
		{
			return default(bool);
		}

		[Token(Token = "0x6001507")]
		[Address(RVA = "0xD9CABC", Offset = "0xD9CABC", VA = "0xD9CABC")]
		private void UpdateFromTriggered(PuzzleTriggeredDetails triggerDetails)
		{
		}

		[Token(Token = "0x6001508")]
		[Address(RVA = "0xD9BD2C", Offset = "0xD9BD2C", VA = "0xD9BD2C", Slot = "5")]
		protected virtual void ProcessToggle(PuzzleTriggeredDetails triggerDetails)
		{
		}

		[Token(Token = "0x6001509")]
		[Address(RVA = "0xD9CB60", Offset = "0xD9CB60", VA = "0xD9CB60")]
		protected void FireOnCompleteTrigger()
		{
		}

		[Token(Token = "0x600150A")]
		[Address(RVA = "0xD9BD34", Offset = "0xD9BD34", VA = "0xD9BD34")]
		protected GenericPuzzleListener()
		{
		}
	}
	[Token(Token = "0x20003FF")]
	public class GhostbusterListener : MonoBehaviour
	{
		[Token(Token = "0x4001496")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RefTransformPasser refPasser;

		[Token(Token = "0x4001497")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LineWave lineWave;

		[Token(Token = "0x4001498")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LineWave childLineWave;

		[Token(Token = "0x4001499")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform followTransform;

		[Token(Token = "0x400149A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform crystal;

		[Token(Token = "0x400149B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Transform thisTransform;

		[Token(Token = "0x600150B")]
		[Address(RVA = "0xD9CBE4", Offset = "0xD9CBE4", VA = "0xD9CBE4")]
		private void Awake()
		{
		}

		[Token(Token = "0x600150C")]
		[Address(RVA = "0xD9CCEC", Offset = "0xD9CCEC", VA = "0xD9CCEC")]
		private void Update()
		{
		}

		[Token(Token = "0x600150D")]
		[Address(RVA = "0xD9CDD0", Offset = "0xD9CDD0", VA = "0xD9CDD0")]
		public GhostbusterListener()
		{
		}
	}
	[Token(Token = "0x2000400")]
	public class GrabbedParentCombiner : GenericPuzzleListener
	{
		[Token(Token = "0x2000401")]
		[CompilerGenerated]
		private sealed class <co_DestroyDissolveTrans>d__6 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400149E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400149F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40014A0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Transform dissolveTrans;

			[Token(Token = "0x40014A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private GameObject <dissolveObj>5__2;

			[Token(Token = "0x17000293")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001518")]
				[Address(RVA = "0xD9D874", Offset = "0xD9D874", VA = "0xD9D874", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000294")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600151A")]
				[Address(RVA = "0xD9D8BC", Offset = "0xD9D8BC", VA = "0xD9D8BC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001515")]
			[Address(RVA = "0xD9D768", Offset = "0xD9D768", VA = "0xD9D768")]
			[DebuggerHidden]
			public <co_DestroyDissolveTrans>d__6(int <>1__state)
			{
			}

			[Token(Token = "0x6001516")]
			[Address(RVA = "0xD9D794", Offset = "0xD9D794", VA = "0xD9D794", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001517")]
			[Address(RVA = "0xD9D798", Offset = "0xD9D798", VA = "0xD9D798", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001519")]
			[Address(RVA = "0xD9D87C", Offset = "0xD9D87C", VA = "0xD9D87C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400149C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform thisParent;

		[Token(Token = "0x400149D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Transform thisSnapRefTransform;

		[Token(Token = "0x600150F")]
		[Address(RVA = "0xD9CE40", Offset = "0xD9CE40", VA = "0xD9CE40", Slot = "5")]
		protected override void ProcessToggle(PuzzleTriggeredDetails triggerDetails)
		{
		}

		[Token(Token = "0x6001510")]
		[Address(RVA = "0xD9CEB0", Offset = "0xD9CEB0", VA = "0xD9CEB0")]
		private void SnapAndReParent(List<Transform> triggerTransforms)
		{
		}

		[Token(Token = "0x6001511")]
		[Address(RVA = "0xD9D02C", Offset = "0xD9D02C", VA = "0xD9D02C")]
		private void SnapPosition(Transform moveTrans, Transform moveTransSnapRef, Transform targetTransSnapRef)
		{
		}

		[Token(Token = "0x6001512")]
		[Address(RVA = "0xD9D1D0", Offset = "0xD9D1D0", VA = "0xD9D1D0")]
		private void MergeChildren(Transform primeTrans, Transform dissolveTrans)
		{
		}

		[Token(Token = "0x6001513")]
		[Address(RVA = "0xD9D6F4", Offset = "0xD9D6F4", VA = "0xD9D6F4")]
		[IteratorStateMachine(typeof(<co_DestroyDissolveTrans>d__6))]
		private IEnumerator co_DestroyDissolveTrans(Transform dissolveTrans)
		{
			return null;
		}

		[Token(Token = "0x6001514")]
		[Address(RVA = "0xD9D790", Offset = "0xD9D790", VA = "0xD9D790")]
		public GrabbedParentCombiner()
		{
		}
	}
	[Token(Token = "0x2000402")]
	public class ItemShooter : GenericPuzzleListener
	{
		[Token(Token = "0x40014A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform shootForward;

		[Token(Token = "0x40014A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float velocity;

		[Token(Token = "0x600151B")]
		[Address(RVA = "0xD9D8C4", Offset = "0xD9D8C4", VA = "0xD9D8C4", Slot = "5")]
		protected override void ProcessToggle(PuzzleTriggeredDetails triggerDetails)
		{
		}

		[Token(Token = "0x600151C")]
		[Address(RVA = "0xD9D8C8", Offset = "0xD9D8C8", VA = "0xD9D8C8")]
		private void Shoot(PuzzleTriggeredDetails triggerDetails)
		{
		}

		[Token(Token = "0x600151D")]
		[Address(RVA = "0xD9D9A0", Offset = "0xD9D9A0", VA = "0xD9D9A0")]
		public ItemShooter()
		{
		}
	}
	[Token(Token = "0x2000403")]
	public class KilnPipeEffect : PuzzleEffect
	{
		[Token(Token = "0x2000404")]
		[CompilerGenerated]
		private sealed class <EffectCoroutine>d__3 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40014A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40014A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40014A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public KilnPipeEffect <>4__this;

			[Token(Token = "0x17000295")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001524")]
				[Address(RVA = "0xD9DC14", Offset = "0xD9DC14", VA = "0xD9DC14", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000296")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001526")]
				[Address(RVA = "0xD9DC5C", Offset = "0xD9DC5C", VA = "0xD9DC5C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001521")]
			[Address(RVA = "0xD9DA18", Offset = "0xD9DA18", VA = "0xD9DA18")]
			[DebuggerHidden]
			public <EffectCoroutine>d__3(int <>1__state)
			{
			}

			[Token(Token = "0x6001522")]
			[Address(RVA = "0xD9DA4C", Offset = "0xD9DA4C", VA = "0xD9DA4C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001523")]
			[Address(RVA = "0xD9DA50", Offset = "0xD9DA50", VA = "0xD9DA50", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001525")]
			[Address(RVA = "0xD9DC1C", Offset = "0xD9DC1C", VA = "0xD9DC1C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40014A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Material emptyMaterial;

		[Token(Token = "0x40014A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Material fullMaterial;

		[Token(Token = "0x40014A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Renderer thisRenderer;

		[Token(Token = "0x600151E")]
		[Address(RVA = "0xD9D9A4", Offset = "0xD9D9A4", VA = "0xD9D9A4", Slot = "6")]
		[IteratorStateMachine(typeof(<EffectCoroutine>d__3))]
		protected override IEnumerator EffectCoroutine()
		{
			return null;
		}

		[Token(Token = "0x600151F")]
		[Address(RVA = "0xD9DA40", Offset = "0xD9DA40", VA = "0xD9DA40", Slot = "7")]
		protected override void SetEffectComplete()
		{
		}

		[Token(Token = "0x6001520")]
		[Address(RVA = "0xD9DA44", Offset = "0xD9DA44", VA = "0xD9DA44")]
		public KilnPipeEffect()
		{
		}
	}
	[Token(Token = "0x2000405")]
	public class PlayEightExpression : PuzzleEffect
	{
		[Token(Token = "0x2000406")]
		[CompilerGenerated]
		private sealed class <EffectCoroutine>d__5 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40014AF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40014B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40014B1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PlayEightExpression <>4__this;

			[Token(Token = "0x17000297")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600152E")]
				[Address(RVA = "0xD9DF04", Offset = "0xD9DF04", VA = "0xD9DF04", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000298")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001530")]
				[Address(RVA = "0xD9DF4C", Offset = "0xD9DF4C", VA = "0xD9DF4C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600152B")]
			[Address(RVA = "0xD9DCD8", Offset = "0xD9DCD8", VA = "0xD9DCD8")]
			[DebuggerHidden]
			public <EffectCoroutine>d__5(int <>1__state)
			{
			}

			[Token(Token = "0x600152C")]
			[Address(RVA = "0xD9DD18", Offset = "0xD9DD18", VA = "0xD9DD18", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600152D")]
			[Address(RVA = "0xD9DD1C", Offset = "0xD9DD1C", VA = "0xD9DD1C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600152F")]
			[Address(RVA = "0xD9DF0C", Offset = "0xD9DF0C", VA = "0xD9DF0C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40014AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public EightExpressionType expression;

		[Token(Token = "0x40014AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Transform fadeFromOriginRef;

		[Token(Token = "0x40014AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Transform performExpressionDestinationRef;

		[Token(Token = "0x40014AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Transform fadeToDestinationRef;

		[Token(Token = "0x40014AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool eightExpressionComplete;

		[Token(Token = "0x6001527")]
		[Address(RVA = "0xD9DC64", Offset = "0xD9DC64", VA = "0xD9DC64", Slot = "6")]
		[IteratorStateMachine(typeof(<EffectCoroutine>d__5))]
		protected override IEnumerator EffectCoroutine()
		{
			return null;
		}

		[Token(Token = "0x6001528")]
		[Address(RVA = "0xD9DD00", Offset = "0xD9DD00", VA = "0xD9DD00")]
		private void OnExpressionComplete()
		{
		}

		[Token(Token = "0x6001529")]
		[Address(RVA = "0xD9DD0C", Offset = "0xD9DD0C", VA = "0xD9DD0C", Slot = "7")]
		protected override void SetEffectComplete()
		{
		}

		[Token(Token = "0x600152A")]
		[Address(RVA = "0xD9DD10", Offset = "0xD9DD10", VA = "0xD9DD10")]
		public PlayEightExpression()
		{
		}
	}
	[Token(Token = "0x2000407")]
	public class PositionFollower : GenericPuzzleListener
	{
		[Token(Token = "0x40014B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform moveTransform;

		[Token(Token = "0x40014B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Transform followerRefTransform;

		[Token(Token = "0x40014B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float lerpFactor;

		[Token(Token = "0x40014B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Transform leaderRefTransform;

		[Token(Token = "0x6001531")]
		[Address(RVA = "0xD9DF54", Offset = "0xD9DF54", VA = "0xD9DF54", Slot = "5")]
		protected override void ProcessToggle(PuzzleTriggeredDetails triggerDetails)
		{
		}

		[Token(Token = "0x6001532")]
		[Address(RVA = "0xD9DFEC", Offset = "0xD9DFEC", VA = "0xD9DFEC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001533")]
		[Address(RVA = "0xD9E284", Offset = "0xD9E284", VA = "0xD9E284")]
		public PositionFollower()
		{
		}
	}
	[Token(Token = "0x2000408")]
	public class PuzzlePieceLerper : PuzzleEffect
	{
		[Token(Token = "0x2000409")]
		[CompilerGenerated]
		private sealed class <EffectCoroutine>d__5 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40014BB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40014BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40014BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PuzzlePieceLerper <>4__this;

			[Token(Token = "0x17000299")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600153B")]
				[Address(RVA = "0xD9E664", Offset = "0xD9E664", VA = "0xD9E664", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700029A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600153D")]
				[Address(RVA = "0xD9E6AC", Offset = "0xD9E6AC", VA = "0xD9E6AC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001538")]
			[Address(RVA = "0xD9E308", Offset = "0xD9E308", VA = "0xD9E308")]
			[DebuggerHidden]
			public <EffectCoroutine>d__5(int <>1__state)
			{
			}

			[Token(Token = "0x6001539")]
			[Address(RVA = "0xD9E4D8", Offset = "0xD9E4D8", VA = "0xD9E4D8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600153A")]
			[Address(RVA = "0xD9E4DC", Offset = "0xD9E4DC", VA = "0xD9E4DC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600153C")]
			[Address(RVA = "0xD9E66C", Offset = "0xD9E66C", VA = "0xD9E66C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200040A")]
		[CompilerGenerated]
		private sealed class <LerpSingleTransform>d__6 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40014BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40014BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40014C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Rigidbody rb;

			[Token(Token = "0x40014C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public PuzzlePieceLerper <>4__this;

			[Token(Token = "0x40014C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Transform tf;

			[Token(Token = "0x40014C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private bool <rbUsesGravity>5__2;

			[Token(Token = "0x40014C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private Vector3 <initialPosition>5__3;

			[Token(Token = "0x40014C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private Quaternion <initialRotation>5__4;

			[Token(Token = "0x40014C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private Vector3 <finalPosition>5__5;

			[Token(Token = "0x40014C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			private Quaternion <finalRotation>5__6;

			[Token(Token = "0x40014C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			private float <lerpFactor>5__7;

			[Token(Token = "0x1700029B")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001541")]
				[Address(RVA = "0xD9E9B8", Offset = "0xD9E9B8", VA = "0xD9E9B8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700029C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001543")]
				[Address(RVA = "0xD9EA00", Offset = "0xD9EA00", VA = "0xD9EA00", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600153E")]
			[Address(RVA = "0xD9E3D4", Offset = "0xD9E3D4", VA = "0xD9E3D4")]
			[DebuggerHidden]
			public <LerpSingleTransform>d__6(int <>1__state)
			{
			}

			[Token(Token = "0x600153F")]
			[Address(RVA = "0xD9E6B4", Offset = "0xD9E6B4", VA = "0xD9E6B4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001540")]
			[Address(RVA = "0xD9E6B8", Offset = "0xD9E6B8", VA = "0xD9E6B8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001542")]
			[Address(RVA = "0xD9E9C0", Offset = "0xD9E9C0", VA = "0xD9E9C0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40014B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public List<Rigidbody> lerpingRigidbody;

		[Token(Token = "0x40014B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public List<Transform> lerpingTransform;

		[Token(Token = "0x40014B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float lerpSeconds;

		[Token(Token = "0x40014B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public bool enforceOnlyForwardRotation;

		[Token(Token = "0x40014BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8D")]
		public bool manageGravity;

		[Token(Token = "0x6001534")]
		[Address(RVA = "0xD9E294", Offset = "0xD9E294", VA = "0xD9E294", Slot = "6")]
		[IteratorStateMachine(typeof(<EffectCoroutine>d__5))]
		protected override IEnumerator EffectCoroutine()
		{
			return null;
		}

		[Token(Token = "0x6001535")]
		[Address(RVA = "0xD9E330", Offset = "0xD9E330", VA = "0xD9E330")]
		[IteratorStateMachine(typeof(<LerpSingleTransform>d__6))]
		private IEnumerator LerpSingleTransform(Transform tf, [CanBeNull] Rigidbody rb)
		{
			return null;
		}

		[Token(Token = "0x6001536")]
		[Address(RVA = "0xD9E3FC", Offset = "0xD9E3FC", VA = "0xD9E3FC", Slot = "7")]
		protected override void SetEffectComplete()
		{
		}

		[Token(Token = "0x6001537")]
		[Address(RVA = "0xD9E400", Offset = "0xD9E400", VA = "0xD9E400")]
		public PuzzlePieceLerper()
		{
		}
	}
	[Token(Token = "0x200040B")]
	public class PuzzlePositioner : GenericPuzzleListener
	{
		[Token(Token = "0x40014C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform target;

		[Token(Token = "0x40014CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Vector3 position;

		[Token(Token = "0x40014CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public Vector3 rotationalForward;

		[Token(Token = "0x40014CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Vector3 rotationalUp;

		[Token(Token = "0x6001544")]
		[Address(RVA = "0xD9EA08", Offset = "0xD9EA08", VA = "0xD9EA08", Slot = "5")]
		protected override void ProcessToggle(PuzzleTriggeredDetails triggerDetails)
		{
		}

		[Token(Token = "0x6001545")]
		[Address(RVA = "0xD9EA18", Offset = "0xD9EA18", VA = "0xD9EA18")]
		private void PositionAndRotate()
		{
		}

		[Token(Token = "0x6001546")]
		[Address(RVA = "0xD9EA70", Offset = "0xD9EA70", VA = "0xD9EA70")]
		public PuzzlePositioner()
		{
		}
	}
	[Token(Token = "0x200040C")]
	public class RefTransformPasser : GenericPuzzleListener
	{
		[Token(Token = "0x40014CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Action<List<Transform>> OnRefTransformsReceived;

		[Token(Token = "0x6001547")]
		[Address(RVA = "0xD9EA74", Offset = "0xD9EA74", VA = "0xD9EA74", Slot = "5")]
		protected override void ProcessToggle(PuzzleTriggeredDetails triggerDetails)
		{
		}

		[Token(Token = "0x6001548")]
		[Address(RVA = "0xD9EAB0", Offset = "0xD9EAB0", VA = "0xD9EAB0")]
		public RefTransformPasser()
		{
		}
	}
	[Token(Token = "0x200040D")]
	public class RigidBodyConstrainer : GenericPuzzleListener
	{
		[Token(Token = "0x40014CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Rigidbody rigidbody;

		[Token(Token = "0x40014CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool postionX;

		[Token(Token = "0x40014D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		public bool postionY;

		[Token(Token = "0x40014D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
		public bool postionZ;

		[Token(Token = "0x40014D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6B")]
		public bool rotationX;

		[Token(Token = "0x40014D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public bool rotationY;

		[Token(Token = "0x40014D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6D")]
		public bool rotationZ;

		[Token(Token = "0x6001549")]
		[Address(RVA = "0xD9EAB4", Offset = "0xD9EAB4", VA = "0xD9EAB4", Slot = "5")]
		protected override void ProcessToggle(PuzzleTriggeredDetails triggerDetails)
		{
		}

		[Token(Token = "0x600154A")]
		[Address(RVA = "0xD9EB14", Offset = "0xD9EB14", VA = "0xD9EB14")]
		public RigidBodyConstrainer()
		{
		}
	}
	[Token(Token = "0x200040E")]
	public class RotorRandomizer : GenericPuzzleListener
	{
		[Token(Token = "0x40014D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public List<Transform> rotors;

		[Token(Token = "0x600154B")]
		[Address(RVA = "0xD9EB18", Offset = "0xD9EB18", VA = "0xD9EB18", Slot = "5")]
		protected override void ProcessToggle(PuzzleTriggeredDetails triggerDetails)
		{
		}

		[Token(Token = "0x600154C")]
		[Address(RVA = "0xD9ED90", Offset = "0xD9ED90", VA = "0xD9ED90")]
		public RotorRandomizer()
		{
		}
	}
	[Token(Token = "0x200040F")]
	public class ScopeSetter : GenericPuzzleListener
	{
		[Token(Token = "0x40014D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public PuzzleScopeManager puzzleScopeManager;

		[Token(Token = "0x40014D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool suppressActivation;

		[Token(Token = "0x600154D")]
		[Address(RVA = "0xD9ED94", Offset = "0xD9ED94", VA = "0xD9ED94", Slot = "5")]
		protected override void ProcessToggle(PuzzleTriggeredDetails triggerDetails)
		{
		}

		[Token(Token = "0x600154E")]
		[Address(RVA = "0xD9EDBC", Offset = "0xD9EDBC", VA = "0xD9EDBC")]
		public ScopeSetter()
		{
		}
	}
	[Token(Token = "0x2000410")]
	public class SetLayer : GenericPuzzleListener
	{
		[Token(Token = "0x40014D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public List<GameObject> gameObjects;

		[Token(Token = "0x40014D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public string layerName;

		[Token(Token = "0x600154F")]
		[Address(RVA = "0xD9EDC0", Offset = "0xD9EDC0", VA = "0xD9EDC0", Slot = "5")]
		protected override void ProcessToggle(PuzzleTriggeredDetails triggerDetails)
		{
		}

		[Token(Token = "0x6001550")]
		[Address(RVA = "0xD9EF20", Offset = "0xD9EF20", VA = "0xD9EF20")]
		public SetLayer()
		{
		}
	}
	[Token(Token = "0x2000411")]
	public class SetMaterial : GenericPuzzleListener
	{
		[Token(Token = "0x40014DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public List<Renderer> renderers;

		[Token(Token = "0x40014DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public List<Material> materials;

		[Token(Token = "0x6001551")]
		[Address(RVA = "0xD9EF24", Offset = "0xD9EF24", VA = "0xD9EF24", Slot = "5")]
		protected override void ProcessToggle(PuzzleTriggeredDetails triggerDetails)
		{
		}

		[Token(Token = "0x6001552")]
		[Address(RVA = "0xD9F00C", Offset = "0xD9F00C", VA = "0xD9F00C")]
		public SetMaterial()
		{
		}
	}
	[Token(Token = "0x2000412")]
	public class SoundEffectPlayer : PuzzleEffect
	{
		[Token(Token = "0x2000413")]
		[CompilerGenerated]
		private sealed class <EffectCoroutine>d__3 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40014DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40014E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40014E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SoundEffectPlayer <>4__this;

			[Token(Token = "0x1700029D")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001559")]
				[Address(RVA = "0xD9F1A8", Offset = "0xD9F1A8", VA = "0xD9F1A8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700029E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600155B")]
				[Address(RVA = "0xD9F1F0", Offset = "0xD9F1F0", VA = "0xD9F1F0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001556")]
			[Address(RVA = "0xD9F084", Offset = "0xD9F084", VA = "0xD9F084")]
			[DebuggerHidden]
			public <EffectCoroutine>d__3(int <>1__state)
			{
			}

			[Token(Token = "0x6001557")]
			[Address(RVA = "0xD9F0B8", Offset = "0xD9F0B8", VA = "0xD9F0B8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001558")]
			[Address(RVA = "0xD9F0BC", Offset = "0xD9F0BC", VA = "0xD9F0BC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600155A")]
			[Address(RVA = "0xD9F1B0", Offset = "0xD9F1B0", VA = "0xD9F1B0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40014DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public AudioSource audioSource;

		[Token(Token = "0x40014DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float timeToBeginFade;

		[Token(Token = "0x40014DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public float fadeDuration;

		[Token(Token = "0x6001553")]
		[Address(RVA = "0xD9F010", Offset = "0xD9F010", VA = "0xD9F010", Slot = "6")]
		[IteratorStateMachine(typeof(<EffectCoroutine>d__3))]
		protected override IEnumerator EffectCoroutine()
		{
			return null;
		}

		[Token(Token = "0x6001554")]
		[Address(RVA = "0xD9F0AC", Offset = "0xD9F0AC", VA = "0xD9F0AC", Slot = "7")]
		protected override void SetEffectComplete()
		{
		}

		[Token(Token = "0x6001555")]
		[Address(RVA = "0xD9F0B0", Offset = "0xD9F0B0", VA = "0xD9F0B0")]
		public SoundEffectPlayer()
		{
		}
	}
	[Token(Token = "0x2000414")]
	public class SubtitleSender : GenericPuzzleListener
	{
		[Token(Token = "0x40014E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public string subtitleText;

		[Token(Token = "0x40014E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float duration;

		[Token(Token = "0x600155C")]
		[Address(RVA = "0xD9F1F8", Offset = "0xD9F1F8", VA = "0xD9F1F8", Slot = "5")]
		protected override void ProcessToggle(PuzzleTriggeredDetails triggerDetails)
		{
		}

		[Token(Token = "0x600155D")]
		[Address(RVA = "0xD9F268", Offset = "0xD9F268", VA = "0xD9F268")]
		public SubtitleSender()
		{
		}
	}
	[Token(Token = "0x2000415")]
	public class SurgeRotationEffect : PuzzleEffect
	{
		[Token(Token = "0x2000416")]
		[CompilerGenerated]
		private sealed class <EffectCoroutine>d__6 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40014EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40014EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40014EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SurgeRotationEffect <>4__this;

			[Token(Token = "0x40014ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private bool <speedUp>5__2;

			[Token(Token = "0x40014EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
			private bool <slowDown>5__3;

			[Token(Token = "0x40014EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <rotationalVelocity>5__4;

			[Token(Token = "0x40014F0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <lastDot>5__5;

			[Token(Token = "0x40014F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <thisDot>5__6;

			[Token(Token = "0x1700029F")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001564")]
				[Address(RVA = "0xD9F7C0", Offset = "0xD9F7C0", VA = "0xD9F7C0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002A0")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001566")]
				[Address(RVA = "0xD9F808", Offset = "0xD9F808", VA = "0xD9F808", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001561")]
			[Address(RVA = "0xD9F2E0", Offset = "0xD9F2E0", VA = "0xD9F2E0")]
			[DebuggerHidden]
			public <EffectCoroutine>d__6(int <>1__state)
			{
			}

			[Token(Token = "0x6001562")]
			[Address(RVA = "0xD9F320", Offset = "0xD9F320", VA = "0xD9F320", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001563")]
			[Address(RVA = "0xD9F324", Offset = "0xD9F324", VA = "0xD9F324", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001565")]
			[Address(RVA = "0xD9F7C8", Offset = "0xD9F7C8", VA = "0xD9F7C8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40014E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Transform rotor;

		[Token(Token = "0x40014E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Transform finalPose;

		[Token(Token = "0x40014E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float accelDegsPerSqrSec;

		[Token(Token = "0x40014E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float maxVelDegsPerSec;

		[Token(Token = "0x40014E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float minVelDegsPerSec;

		[Token(Token = "0x40014E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public float approachSnapDot;

		[Token(Token = "0x600155E")]
		[Address(RVA = "0xD9F26C", Offset = "0xD9F26C", VA = "0xD9F26C", Slot = "6")]
		[IteratorStateMachine(typeof(<EffectCoroutine>d__6))]
		protected override IEnumerator EffectCoroutine()
		{
			return null;
		}

		[Token(Token = "0x600155F")]
		[Address(RVA = "0xD9F308", Offset = "0xD9F308", VA = "0xD9F308", Slot = "7")]
		protected override void SetEffectComplete()
		{
		}

		[Token(Token = "0x6001560")]
		[Address(RVA = "0xD9F30C", Offset = "0xD9F30C", VA = "0xD9F30C")]
		public SurgeRotationEffect()
		{
		}
	}
	[Token(Token = "0x2000417")]
	public class SwordIntoPaintingEffect : PuzzleEffect
	{
		[Token(Token = "0x2000418")]
		[CompilerGenerated]
		private sealed class <EffectCoroutine>d__3 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40014F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40014F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40014F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SwordIntoPaintingEffect <>4__this;

			[Token(Token = "0x170002A1")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600156D")]
				[Address(RVA = "0xDA05C8", Offset = "0xDA05C8", VA = "0xDA05C8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002A2")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600156F")]
				[Address(RVA = "0xDA0610", Offset = "0xDA0610", VA = "0xDA0610", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600156A")]
			[Address(RVA = "0xD9F884", Offset = "0xD9F884", VA = "0xD9F884")]
			[DebuggerHidden]
			public <EffectCoroutine>d__3(int <>1__state)
			{
			}

			[Token(Token = "0x600156B")]
			[Address(RVA = "0xD9F8B8", Offset = "0xD9F8B8", VA = "0xD9F8B8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600156C")]
			[Address(RVA = "0xD9F8BC", Offset = "0xD9F8BC", VA = "0xD9F8BC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600156E")]
			[Address(RVA = "0xDA05D0", Offset = "0xDA05D0", VA = "0xDA05D0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40014F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public GameObject swordGO;

		[Token(Token = "0x40014F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Rigidbody swordRB;

		[Token(Token = "0x40014F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Grabbable swordGR;

		[Token(Token = "0x6001567")]
		[Address(RVA = "0xD9F810", Offset = "0xD9F810", VA = "0xD9F810", Slot = "6")]
		[IteratorStateMachine(typeof(<EffectCoroutine>d__3))]
		protected override IEnumerator EffectCoroutine()
		{
			return null;
		}

		[Token(Token = "0x6001568")]
		[Address(RVA = "0xD9F8AC", Offset = "0xD9F8AC", VA = "0xD9F8AC", Slot = "7")]
		protected override void SetEffectComplete()
		{
		}

		[Token(Token = "0x6001569")]
		[Address(RVA = "0xD9F8B0", Offset = "0xD9F8B0", VA = "0xD9F8B0")]
		public SwordIntoPaintingEffect()
		{
		}
	}
	[Token(Token = "0x2000419")]
	public class TestActiveState : MonoBehaviour
	{
		[Token(Token = "0x200041A")]
		[CompilerGenerated]
		private sealed class <TestCoRo>d__1 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40014F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40014F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x170002A3")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001576")]
				[Address(RVA = "0xDA0798", Offset = "0xDA0798", VA = "0xDA0798", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002A4")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001578")]
				[Address(RVA = "0xDA07E0", Offset = "0xDA07E0", VA = "0xDA07E0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001573")]
			[Address(RVA = "0xDA0698", Offset = "0xDA0698", VA = "0xDA0698")]
			[DebuggerHidden]
			public <TestCoRo>d__1(int <>1__state)
			{
			}

			[Token(Token = "0x6001574")]
			[Address(RVA = "0xDA06C8", Offset = "0xDA06C8", VA = "0xDA06C8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001575")]
			[Address(RVA = "0xDA06CC", Offset = "0xDA06CC", VA = "0xDA06CC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001577")]
			[Address(RVA = "0xDA07A0", Offset = "0xDA07A0", VA = "0xDA07A0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x6001570")]
		[Address(RVA = "0xDA0618", Offset = "0xDA0618", VA = "0xDA0618")]
		private void Start()
		{
		}

		[Token(Token = "0x6001571")]
		[Address(RVA = "0xDA0638", Offset = "0xDA0638", VA = "0xDA0638")]
		[IteratorStateMachine(typeof(<TestCoRo>d__1))]
		private IEnumerator TestCoRo()
		{
			return null;
		}

		[Token(Token = "0x6001572")]
		[Address(RVA = "0xDA06C0", Offset = "0xDA06C0", VA = "0xDA06C0")]
		public TestActiveState()
		{
		}
	}
	[Token(Token = "0x200041B")]
	public class TestActiveStateResponder : MonoBehaviour
	{
		[Token(Token = "0x40014FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string myName;

		[Token(Token = "0x40014FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool beActive;

		[Token(Token = "0x6001579")]
		[Address(RVA = "0xDA07E8", Offset = "0xDA07E8", VA = "0xDA07E8")]
		private void Awake()
		{
		}

		[Token(Token = "0x600157A")]
		[Address(RVA = "0xDA089C", Offset = "0xDA089C", VA = "0xDA089C")]
		private void Start()
		{
		}

		[Token(Token = "0x600157B")]
		[Address(RVA = "0xDA08C4", Offset = "0xDA08C4", VA = "0xDA08C4")]
		private void Respond()
		{
		}

		[Token(Token = "0x600157C")]
		[Address(RVA = "0xDA08C8", Offset = "0xDA08C8", VA = "0xDA08C8")]
		public TestActiveStateResponder()
		{
		}
	}
	[Token(Token = "0x200041C")]
	public class ToggleEightStoryBookFlippable : GenericPuzzleListener
	{
		[Token(Token = "0x40014FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public EightStorybook book;

		[Token(Token = "0x40014FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool playerFlippable;

		[Token(Token = "0x600157D")]
		[Address(RVA = "0xDA08D0", Offset = "0xDA08D0", VA = "0xDA08D0", Slot = "5")]
		protected override void ProcessToggle(PuzzleTriggeredDetails triggerDetails)
		{
		}

		[Token(Token = "0x600157E")]
		[Address(RVA = "0xDA08F8", Offset = "0xDA08F8", VA = "0xDA08F8")]
		public ToggleEightStoryBookFlippable()
		{
		}
	}
	[Token(Token = "0x200041D")]
	public class ToggleGrabbable : GenericPuzzleListener
	{
		[Token(Token = "0x200041E")]
		public enum ToggleType
		{
			[Token(Token = "0x4001501")]
			On,
			[Token(Token = "0x4001502")]
			Off
		}

		[Token(Token = "0x40014FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Grabbable grabbable;

		[Token(Token = "0x40014FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public ToggleType type;

		[Token(Token = "0x600157F")]
		[Address(RVA = "0xDA08FC", Offset = "0xDA08FC", VA = "0xDA08FC", Slot = "5")]
		protected override void ProcessToggle(PuzzleTriggeredDetails triggerDetails)
		{
		}

		[Token(Token = "0x6001580")]
		[Address(RVA = "0xDA0938", Offset = "0xDA0938", VA = "0xDA0938")]
		public ToggleGrabbable()
		{
		}
	}
	[Token(Token = "0x200041F")]
	public class TriggerRefTransformProvider : GenericPuzzleListener
	{
		[Token(Token = "0x4001503")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public List<ScenePuzzleTrigger> triggerToBeProvided;

		[Token(Token = "0x4001504")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public List<TransformType> typesProvided;

		[Token(Token = "0x6001581")]
		[Address(RVA = "0xDA093C", Offset = "0xDA093C", VA = "0xDA093C", Slot = "5")]
		protected override void ProcessToggle(PuzzleTriggeredDetails triggerDetails)
		{
		}

		[Token(Token = "0x6001582")]
		[Address(RVA = "0xDA0A4C", Offset = "0xDA0A4C", VA = "0xDA0A4C")]
		public TriggerRefTransformProvider()
		{
		}
	}
	[Token(Token = "0x2000420")]
	public class PeriodRotator : MonoBehaviour
	{
		[Token(Token = "0x4001505")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float rotationalPeriodSeconds;

		[Token(Token = "0x4001506")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float xRotationalFactor;

		[Token(Token = "0x4001507")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float yRotationalFactor;

		[Token(Token = "0x4001508")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float zRotationalFactor;

		[Token(Token = "0x4001509")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform rotor;

		[Token(Token = "0x400150A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 rotationalVelocity;

		[Token(Token = "0x400150B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Vector3 itweenEulerTarget;

		[Token(Token = "0x6001583")]
		[Address(RVA = "0xDA0A50", Offset = "0xDA0A50", VA = "0xDA0A50")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001584")]
		[Address(RVA = "0xDA0A7C", Offset = "0xDA0A7C", VA = "0xDA0A7C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001585")]
		[Address(RVA = "0xDA0B8C", Offset = "0xDA0B8C", VA = "0xDA0B8C")]
		public PeriodRotator()
		{
		}
	}
	[Token(Token = "0x2000421")]
	public class PuzzleScopeManager : MonoBehaviour
	{
		[Token(Token = "0x2000422")]
		[CompilerGenerated]
		private sealed class <co_InitializeOnUserEventsAvailable>d__24 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400151B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400151C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400151D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PuzzleScopeManager <>4__this;

			[Token(Token = "0x170002A6")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60015A5")]
				[Address(RVA = "0xDA201C", Offset = "0xDA201C", VA = "0xDA201C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002A7")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60015A7")]
				[Address(RVA = "0xDA2064", Offset = "0xDA2064", VA = "0xDA2064", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60015A2")]
			[Address(RVA = "0xDA113C", Offset = "0xDA113C", VA = "0xDA113C")]
			[DebuggerHidden]
			public <co_InitializeOnUserEventsAvailable>d__24(int <>1__state)
			{
			}

			[Token(Token = "0x60015A3")]
			[Address(RVA = "0xDA1EB0", Offset = "0xDA1EB0", VA = "0xDA1EB0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60015A4")]
			[Address(RVA = "0xDA1EB4", Offset = "0xDA1EB4", VA = "0xDA1EB4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60015A6")]
			[Address(RVA = "0xDA2024", Offset = "0xDA2024", VA = "0xDA2024", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000423")]
		[CompilerGenerated]
		private sealed class <co_FallCoro>d__38 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400151E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400151F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001520")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PuzzleScopeManager <>4__this;

			[Token(Token = "0x4001521")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <fallTime>5__2;

			[Token(Token = "0x170002A8")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60015AB")]
				[Address(RVA = "0xDA2238", Offset = "0xDA2238", VA = "0xDA2238", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002A9")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60015AD")]
				[Address(RVA = "0xDA2280", Offset = "0xDA2280", VA = "0xDA2280", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60015A8")]
			[Address(RVA = "0xDA1978", Offset = "0xDA1978", VA = "0xDA1978")]
			[DebuggerHidden]
			public <co_FallCoro>d__38(int <>1__state)
			{
			}

			[Token(Token = "0x60015A9")]
			[Address(RVA = "0xDA206C", Offset = "0xDA206C", VA = "0xDA206C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60015AA")]
			[Address(RVA = "0xDA2070", Offset = "0xDA2070", VA = "0xDA2070", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60015AC")]
			[Address(RVA = "0xDA2240", Offset = "0xDA2240", VA = "0xDA2240", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000424")]
		[CompilerGenerated]
		private sealed class <co_BelowPlayerOffsetRecovery>d__40 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001522")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001523")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001524")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PuzzleScopeManager <>4__this;

			[Token(Token = "0x170002AA")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60015B1")]
				[Address(RVA = "0xDA239C", Offset = "0xDA239C", VA = "0xDA239C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002AB")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60015B3")]
				[Address(RVA = "0xDA23E4", Offset = "0xDA23E4", VA = "0xDA23E4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60015AE")]
			[Address(RVA = "0xDA1C0C", Offset = "0xDA1C0C", VA = "0xDA1C0C")]
			[DebuggerHidden]
			public <co_BelowPlayerOffsetRecovery>d__40(int <>1__state)
			{
			}

			[Token(Token = "0x60015AF")]
			[Address(RVA = "0xDA2288", Offset = "0xDA2288", VA = "0xDA2288", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60015B0")]
			[Address(RVA = "0xDA228C", Offset = "0xDA228C", VA = "0xDA228C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60015B2")]
			[Address(RVA = "0xDA23A4", Offset = "0xDA23A4", VA = "0xDA23A4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400150C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<PuzzleUserEventScoper> eventScopes;

		[Token(Token = "0x400150D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Grabbable puzzlePieceGrabbable;

		[Token(Token = "0x400150F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool disableFallCorrection;

		[Token(Token = "0x4001510")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float belowPlayerOffset;

		[Token(Token = "0x4001511")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Action PositionedByPlayerAfterFall;

		[Token(Token = "0x4001512")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Room currentRoom;

		[Token(Token = "0x4001513")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private bool suppressActivation;

		[Token(Token = "0x4001514")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private GameObject thisGameObject;

		[Token(Token = "0x4001515")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Transform thisTransform;

		[Token(Token = "0x4001516")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Rigidbody[] theseRigidbodies;

		[Token(Token = "0x4001517")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool[] rigidBodyUsesGrav;

		[Token(Token = "0x4001518")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private string debugName;

		[Token(Token = "0x4001519")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Coroutine fallCoro;

		[Token(Token = "0x400151A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Coroutine belowPlayerOffsetRecovery;

		[Token(Token = "0x170002A5")]
		public bool inScope
		{
			[Token(Token = "0x6001586")]
			[Address(RVA = "0xDA0BEC", Offset = "0xDA0BEC", VA = "0xDA0BEC")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001587")]
			[Address(RVA = "0xDA0BF4", Offset = "0xDA0BF4", VA = "0xDA0BF4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6001588")]
		[Address(RVA = "0xDA0C00", Offset = "0xDA0C00", VA = "0xDA0C00")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001589")]
		[Address(RVA = "0xDA0F24", Offset = "0xDA0F24", VA = "0xDA0F24")]
		private void Start()
		{
		}

		[Token(Token = "0x600158A")]
		[Address(RVA = "0xDA0FB8", Offset = "0xDA0FB8", VA = "0xDA0FB8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600158B")]
		[Address(RVA = "0xDA0DD4", Offset = "0xDA0DD4", VA = "0xDA0DD4")]
		private void MapPuzzleObject()
		{
		}

		[Token(Token = "0x600158C")]
		[Address(RVA = "0xDA105C", Offset = "0xDA105C", VA = "0xDA105C")]
		private void RemoveGravity()
		{
		}

		[Token(Token = "0x600158D")]
		[Address(RVA = "0xDA10C0", Offset = "0xDA10C0", VA = "0xDA10C0")]
		private void RestoreGravity()
		{
		}

		[Token(Token = "0x600158E")]
		[Address(RVA = "0xDA0F44", Offset = "0xDA0F44", VA = "0xDA0F44")]
		[IteratorStateMachine(typeof(<co_InitializeOnUserEventsAvailable>d__24))]
		private IEnumerator co_InitializeOnUserEventsAvailable()
		{
			return null;
		}

		[Token(Token = "0x600158F")]
		[Address(RVA = "0xDA1164", Offset = "0xDA1164", VA = "0xDA1164")]
		private void InitializeForUserEventScope()
		{
		}

		[Token(Token = "0x6001590")]
		[Address(RVA = "0xDA1484", Offset = "0xDA1484", VA = "0xDA1484")]
		public void SetSuppressActivation(bool suppress)
		{
		}

		[Token(Token = "0x6001591")]
		[Address(RVA = "0xDA1490", Offset = "0xDA1490", VA = "0xDA1490")]
		private void ProcessSceneTransitionStart(SceneTransition transition)
		{
		}

		[Token(Token = "0x6001592")]
		[Address(RVA = "0xDA14F4", Offset = "0xDA14F4", VA = "0xDA14F4")]
		public Room GetCurrentRoom()
		{
			return default(Room);
		}

		[Token(Token = "0x6001593")]
		[Address(RVA = "0xDA14FC", Offset = "0xDA14FC", VA = "0xDA14FC")]
		public void SetNewRoomForPiece(Room newRoom)
		{
		}

		[Token(Token = "0x6001594")]
		[Address(RVA = "0xDA1504", Offset = "0xDA1504", VA = "0xDA1504")]
		private void ProcessRoomTransition()
		{
		}

		[Token(Token = "0x6001595")]
		[Address(RVA = "0xDA1588", Offset = "0xDA1588", VA = "0xDA1588")]
		private bool GetPuzzleInAnyScope()
		{
			return default(bool);
		}

		[Token(Token = "0x6001596")]
		[Address(RVA = "0xDA1824", Offset = "0xDA1824", VA = "0xDA1824")]
		private void ProcessEventScopeChange(bool inScope, PuzzleUserEventScoper scoper)
		{
		}

		[Token(Token = "0x6001597")]
		[Address(RVA = "0xDA16F8", Offset = "0xDA16F8", VA = "0xDA16F8")]
		private void TogglePuzzlePiece(bool activate, PuzzleUserEventScoper scoper, bool isMidSession)
		{
		}

		[Token(Token = "0x6001598")]
		[Address(RVA = "0xDA1400", Offset = "0xDA1400", VA = "0xDA1400")]
		private bool TrySetPositionForUserEventScope(PuzzleUserEventScoper scoper, bool isMidSession)
		{
			return default(bool);
		}

		[Token(Token = "0x6001599")]
		[Address(RVA = "0xDA1830", Offset = "0xDA1830", VA = "0xDA1830")]
		private void TryActivateForUserEventScope(PuzzleUserEventScoper scoper, bool isMidSession, bool activate)
		{
		}

		[Token(Token = "0x600159A")]
		[Address(RVA = "0xDA1860", Offset = "0xDA1860", VA = "0xDA1860")]
		private void TryActivate(bool activate)
		{
		}

		[Token(Token = "0x600159B")]
		[Address(RVA = "0xDA189C", Offset = "0xDA189C", VA = "0xDA189C")]
		private void InitiateFallCoroutine()
		{
		}

		[Token(Token = "0x600159C")]
		[Address(RVA = "0xDA1904", Offset = "0xDA1904", VA = "0xDA1904")]
		[IteratorStateMachine(typeof(<co_FallCoro>d__38))]
		private IEnumerator co_FallCoro()
		{
			return null;
		}

		[Token(Token = "0x600159D")]
		[Address(RVA = "0xDA19A0", Offset = "0xDA19A0", VA = "0xDA19A0")]
		private void PositionNearPlayer()
		{
		}

		[Token(Token = "0x600159E")]
		[Address(RVA = "0xDA0FE8", Offset = "0xDA0FE8", VA = "0xDA0FE8")]
		[IteratorStateMachine(typeof(<co_BelowPlayerOffsetRecovery>d__40))]
		private IEnumerator co_BelowPlayerOffsetRecovery()
		{
			return null;
		}

		[Token(Token = "0x600159F")]
		[Address(RVA = "0xDA1C34", Offset = "0xDA1C34", VA = "0xDA1C34")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60015A0")]
		[Address(RVA = "0xDA1C70", Offset = "0xDA1C70", VA = "0xDA1C70")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60015A1")]
		[Address(RVA = "0xDA1EA0", Offset = "0xDA1EA0", VA = "0xDA1EA0")]
		public PuzzleScopeManager()
		{
		}
	}
	[Token(Token = "0x2000425")]
	public class PuzzleScopeManagerLinker : MonoBehaviour
	{
		[Token(Token = "0x4001525")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PuzzleScopeManager puzzleScopeManager;

		[Token(Token = "0x60015B4")]
		[Address(RVA = "0xDA23EC", Offset = "0xDA23EC", VA = "0xDA23EC")]
		public PuzzleScopeManagerLinker()
		{
		}
	}
	[Token(Token = "0x2000426")]
	public class PuzzleUserEventScoper : MonoBehaviour
	{
		[Token(Token = "0x4001526")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<UserEventTriggerMono> activationReqs;

		[Token(Token = "0x4001527")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<UserEventTriggerMono> deactivationReqs;

		[Token(Token = "0x4001528")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Room sceneForScope;

		[Token(Token = "0x4001529")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool dontUpdateMidSession;

		[Token(Token = "0x400152A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 initialPosForScope;

		[Token(Token = "0x400152B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector3 initialEulerAnglesForScope;

		[Token(Token = "0x400152D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Action<bool, PuzzleUserEventScoper> PuzzleScopeChange;

		[Token(Token = "0x400152E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private UserEventTriggerSet activationTrigger;

		[Token(Token = "0x400152F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private UserEventTriggerSet deactivationTrigger;

		[Token(Token = "0x170002AC")]
		public bool inScope
		{
			[Token(Token = "0x60015B5")]
			[Address(RVA = "0xDA23F4", Offset = "0xDA23F4", VA = "0xDA23F4")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60015B6")]
			[Address(RVA = "0xDA23FC", Offset = "0xDA23FC", VA = "0xDA23FC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60015B7")]
		[Address(RVA = "0xDA13E0", Offset = "0xDA13E0", VA = "0xDA13E0")]
		public void Initialize()
		{
		}

		[Token(Token = "0x60015B8")]
		[Address(RVA = "0xDA2408", Offset = "0xDA2408", VA = "0xDA2408")]
		private void InitializeProcessTriggerSet(bool isActivationTrigger)
		{
		}

		[Token(Token = "0x60015B9")]
		[Address(RVA = "0xDA17B4", Offset = "0xDA17B4", VA = "0xDA17B4")]
		public Room GetCurrentPuzzleSceneScope()
		{
			return default(Room);
		}

		[Token(Token = "0x60015BA")]
		[Address(RVA = "0xDA2788", Offset = "0xDA2788", VA = "0xDA2788")]
		public PuzzleUserEventScoper()
		{
		}
	}
	[Token(Token = "0x2000427")]
	public class SeekerRotator : MonoBehaviour
	{
		[Token(Token = "0x4001530")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform rotor;

		[Token(Token = "0x4001531")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RefTransformPasser refPasser;

		[Token(Token = "0x4001532")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float lerpFactor;

		[Token(Token = "0x4001533")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform seekerTarget;

		[Token(Token = "0x60015BD")]
		[Address(RVA = "0xDA28A4", Offset = "0xDA28A4", VA = "0xDA28A4")]
		private void Awake()
		{
		}

		[Token(Token = "0x60015BE")]
		[Address(RVA = "0xDA298C", Offset = "0xDA298C", VA = "0xDA298C")]
		private void Update()
		{
		}

		[Token(Token = "0x60015BF")]
		[Address(RVA = "0xDA2BA8", Offset = "0xDA2BA8", VA = "0xDA2BA8")]
		public SeekerRotator()
		{
		}
	}
	[Token(Token = "0x2000428")]
	public class SwitchboardForwardingTester : MonoBehaviour
	{
		[Token(Token = "0x4001534")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TriggerType trigger;

		[Token(Token = "0x60015C1")]
		[Address(RVA = "0xDA2C18", Offset = "0xDA2C18", VA = "0xDA2C18")]
		private void Update()
		{
		}

		[Token(Token = "0x60015C2")]
		[Address(RVA = "0xDA2E30", Offset = "0xDA2E30", VA = "0xDA2E30")]
		public SwitchboardForwardingTester()
		{
		}
	}
	[Token(Token = "0x2000429")]
	public class EventContingentTriggerBridge : ScenePuzzleTrigger
	{
		[Token(Token = "0x4001535")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public List<UserEventTriggerMono> triggers;

		[Token(Token = "0x4001536")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public TriggerCompletionType triggerCompletionType;

		[Token(Token = "0x60015C3")]
		[Address(RVA = "0xDA2E38", Offset = "0xDA2E38", VA = "0xDA2E38")]
		public void TriggerPuzzle(TriggerType type)
		{
		}

		[Token(Token = "0x60015C4")]
		[Address(RVA = "0xDA2E80", Offset = "0xDA2E80", VA = "0xDA2E80", Slot = "7")]
		protected override bool UpdateAndCheckTriggerElements(TriggerType type)
		{
			return default(bool);
		}

		[Token(Token = "0x60015C5")]
		[Address(RVA = "0xDA3048", Offset = "0xDA3048", VA = "0xDA3048")]
		public EventContingentTriggerBridge()
		{
		}
	}
	[Token(Token = "0x200042A")]
	public enum TriggerCompletionType
	{
		[Token(Token = "0x4001538")]
		Complete,
		[Token(Token = "0x4001539")]
		Incomplete
	}
	[Token(Token = "0x200042B")]
	public class FallPositionedByPlayerTrigger : ScenePuzzleTrigger
	{
		[Token(Token = "0x400153A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public PuzzleScopeManager scopeManager;

		[Token(Token = "0x60015C6")]
		[Address(RVA = "0xDA3050", Offset = "0xDA3050", VA = "0xDA3050", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x60015C7")]
		[Address(RVA = "0xDA315C", Offset = "0xDA315C", VA = "0xDA315C")]
		private void ProcessPropPositioned()
		{
		}

		[Token(Token = "0x60015C8")]
		[Address(RVA = "0xDA3164", Offset = "0xDA3164", VA = "0xDA3164", Slot = "7")]
		protected override bool UpdateAndCheckTriggerElements(TriggerType type)
		{
			return default(bool);
		}

		[Token(Token = "0x60015C9")]
		[Address(RVA = "0xDA316C", Offset = "0xDA316C", VA = "0xDA316C")]
		public FallPositionedByPlayerTrigger()
		{
		}
	}
	[Token(Token = "0x200042C")]
	public abstract class GenericPuzzleTrigger : MonoBehaviour
	{
		[Token(Token = "0x400153B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool allowRepeatTrigger;

		[Token(Token = "0x400153C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool triggerWhileInactive;

		[Token(Token = "0x400153D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<Transform> triggerRefTransforms;

		[Token(Token = "0x400153E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action<PuzzleTriggeredDetails> OnTriggered;

		[Token(Token = "0x400153F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string debugNameString;

		[Token(Token = "0x4001540")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Guid triggerGuid;

		[Token(Token = "0x4001541")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool triggeredOnce;

		[Token(Token = "0x60015CA")]
		[Address(RVA = "0xDA313C", Offset = "0xDA313C", VA = "0xDA313C", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x60015CB")]
		[Address(RVA = "0xDA3220", Offset = "0xDA3220", VA = "0xDA3220", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x60015CC")]
		[Address(RVA = "0xDA3170", Offset = "0xDA3170", VA = "0xDA3170")]
		private void SetDebugNameString()
		{
		}

		[Token(Token = "0x60015CD")]
		[Address(RVA = "0xDA3224", Offset = "0xDA3224", VA = "0xDA3224")]
		public Guid GetTriggerId()
		{
			return default(Guid);
		}

		[Token(Token = "0x60015CE")]
		[Address(RVA = "0xDA3230", Offset = "0xDA3230", VA = "0xDA3230")]
		protected void TryTrigger(bool isConfig)
		{
		}

		[Token(Token = "0x60015CF")]
		[Address(RVA = "0xDA323C", Offset = "0xDA323C", VA = "0xDA323C")]
		protected void TryTrigger(bool isConfig, List<Transform> refTransforms)
		{
		}

		[Token(Token = "0x60015D0")]
		[Address(RVA = "0xDA3328", Offset = "0xDA3328", VA = "0xDA3328")]
		protected GenericPuzzleTrigger()
		{
		}
	}
	[Token(Token = "0x200042D")]
	public class PuzzleTriggeredDetails
	{
		[Token(Token = "0x4001542")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Guid id;

		[Token(Token = "0x4001543")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool configTrigger;

		[Token(Token = "0x4001544")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<Transform> refTransforms;

		[Token(Token = "0x60015D1")]
		[Address(RVA = "0xDA3380", Offset = "0xDA3380", VA = "0xDA3380")]
		public PuzzleTriggeredDetails()
		{
		}

		[Token(Token = "0x60015D2")]
		[Address(RVA = "0xDA2D68", Offset = "0xDA2D68", VA = "0xDA2D68")]
		public PuzzleTriggeredDetails(Guid id, bool configTrigger, List<Transform> refTransforms)
		{
		}
	}
	[Token(Token = "0x200042E")]
	public class GrabbableItemReleasedInAreaTrigger : ScenePuzzleTrigger
	{
		[Token(Token = "0x4001545")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public PublishTriggerEnterExit triggerCollider;

		[Token(Token = "0x4001546")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public List<Transform> objectsStartingInCollider;

		[Token(Token = "0x60015D3")]
		[Address(RVA = "0xDA3408", Offset = "0xDA3408", VA = "0xDA3408", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x60015D4")]
		[Address(RVA = "0xDA35A4", Offset = "0xDA35A4", VA = "0xDA35A4", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x60015D5")]
		[Address(RVA = "0xDA35AC", Offset = "0xDA35AC", VA = "0xDA35AC")]
		private void SubToStartingInObjects()
		{
		}

		[Token(Token = "0x60015D6")]
		[Address(RVA = "0xDA3860", Offset = "0xDA3860", VA = "0xDA3860", Slot = "6")]
		public override void ProvideRefTransforms(List<Transform> refTransforms, TransformType type)
		{
		}

		[Token(Token = "0x60015D7")]
		[Address(RVA = "0xDA387C", Offset = "0xDA387C", VA = "0xDA387C")]
		private void OnTriggerColliderTriggerEntered(Collider other)
		{
		}

		[Token(Token = "0x60015D8")]
		[Address(RVA = "0xDA38EC", Offset = "0xDA38EC", VA = "0xDA38EC")]
		private void OnTriggerColliderTriggerExited(Collider other)
		{
		}

		[Token(Token = "0x60015D9")]
		[Address(RVA = "0xDA395C", Offset = "0xDA395C", VA = "0xDA395C")]
		private void ProcessRelease(Autohand.Hand h, Grabbable g)
		{
		}

		[Token(Token = "0x60015DA")]
		[Address(RVA = "0xDA3724", Offset = "0xDA3724", VA = "0xDA3724")]
		private void SubUnsubToGrabbableRelease(Grabbable[] items, bool sub)
		{
		}

		[Token(Token = "0x60015DB")]
		[Address(RVA = "0xDA3B0C", Offset = "0xDA3B0C", VA = "0xDA3B0C")]
		public GrabbableItemReleasedInAreaTrigger()
		{
		}
	}
	[Token(Token = "0x200042F")]
	public class GrabbableReleasedInsideTrigger : ScenePuzzleTrigger
	{
		[Token(Token = "0x4001547")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public PublishTriggerEnterExit releaseCollider;

		[Token(Token = "0x4001548")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public List<Grabbable> objectsStartingInCollider;

		[Token(Token = "0x4001549")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool fireOnUngrabbedEntry;

		[Token(Token = "0x60015DE")]
		[Address(RVA = "0xDA3B18", Offset = "0xDA3B18", VA = "0xDA3B18", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x60015DF")]
		[Address(RVA = "0xDA3CB4", Offset = "0xDA3CB4", VA = "0xDA3CB4", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x60015E0")]
		[Address(RVA = "0xDA3CB8", Offset = "0xDA3CB8", VA = "0xDA3CB8")]
		private void SubToStartingInObjects()
		{
		}

		[Token(Token = "0x60015E1")]
		[Address(RVA = "0xDA3ECC", Offset = "0xDA3ECC", VA = "0xDA3ECC")]
		private void OnTriggerColliderTriggerEntered(Collider other)
		{
		}

		[Token(Token = "0x60015E2")]
		[Address(RVA = "0xDA41E4", Offset = "0xDA41E4", VA = "0xDA41E4")]
		private void OnTriggerColliderTriggerExited(Collider other)
		{
		}

		[Token(Token = "0x60015E3")]
		[Address(RVA = "0xDA4048", Offset = "0xDA4048", VA = "0xDA4048")]
		private Grabbable TryGetGrabbable(GameObject colliderObj)
		{
			return null;
		}

		[Token(Token = "0x60015E4")]
		[Address(RVA = "0xDA4324", Offset = "0xDA4324", VA = "0xDA4324")]
		private void ProcessedRelease(Autohand.Hand h, Grabbable g)
		{
		}

		[Token(Token = "0x60015E5")]
		[Address(RVA = "0xDA412C", Offset = "0xDA412C", VA = "0xDA412C")]
		private void TriggerReleased(Transform trans)
		{
		}

		[Token(Token = "0x60015E6")]
		[Address(RVA = "0xDA4420", Offset = "0xDA4420", VA = "0xDA4420")]
		public GrabbableReleasedInsideTrigger()
		{
		}
	}
	[Token(Token = "0x2000430")]
	public class ItemGrabbedTrigger : ScenePuzzleTrigger
	{
		[Token(Token = "0x400154A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public GrabbedType type;

		[Token(Token = "0x60015E9")]
		[Address(RVA = "0xDA442C", Offset = "0xDA442C", VA = "0xDA442C")]
		public void GrabbableOnGrabbed()
		{
		}

		[Token(Token = "0x60015EA")]
		[Address(RVA = "0xDA4440", Offset = "0xDA4440", VA = "0xDA4440")]
		public void GrabbableOnReleased()
		{
		}

		[Token(Token = "0x60015EB")]
		[Address(RVA = "0xDA4458", Offset = "0xDA4458", VA = "0xDA4458")]
		public ItemGrabbedTrigger()
		{
		}
	}
	[Token(Token = "0x2000431")]
	public enum GrabbedType
	{
		[Token(Token = "0x400154C")]
		Grabbed,
		[Token(Token = "0x400154D")]
		Released
	}
	[Token(Token = "0x2000432")]
	public class KeyholePuzzleTrigger : ScenePuzzleTrigger
	{
		[Token(Token = "0x2000433")]
		[CompilerGenerated]
		private sealed class <co_KeyReleasedOnStay>d__17 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001557")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001558")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001559")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public KeyholePuzzleTrigger <>4__this;

			[Token(Token = "0x400155A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public TriggerTypeSetter typeSetter;

			[Token(Token = "0x170002AD")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60015FC")]
				[Address(RVA = "0xDA5154", Offset = "0xDA5154", VA = "0xDA5154", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002AE")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60015FE")]
				[Address(RVA = "0xDA519C", Offset = "0xDA519C", VA = "0xDA519C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60015F9")]
			[Address(RVA = "0xDA4FF8", Offset = "0xDA4FF8", VA = "0xDA4FF8")]
			[DebuggerHidden]
			public <co_KeyReleasedOnStay>d__17(int <>1__state)
			{
			}

			[Token(Token = "0x60015FA")]
			[Address(RVA = "0xDA50EC", Offset = "0xDA50EC", VA = "0xDA50EC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60015FB")]
			[Address(RVA = "0xDA50F0", Offset = "0xDA50F0", VA = "0xDA50F0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60015FD")]
			[Address(RVA = "0xDA515C", Offset = "0xDA515C", VA = "0xDA515C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400154E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public List<TriggerType> neededKeyTypes;

		[Token(Token = "0x400154F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool requireAllKeys;

		[Token(Token = "0x4001550")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		public bool requireKeyOrder;

		[Token(Token = "0x4001551")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public PublishTriggerEnterExit triggerCollider;

		[Token(Token = "0x4001552")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool triggerOnKeyRelease;

		[Token(Token = "0x4001553")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Transform reqOrientationForward;

		[Token(Token = "0x4001554")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float reqOrientationDotDeltaAllowed;

		[Token(Token = "0x4001555")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private List<TriggerType> receivedKeys;

		[Token(Token = "0x4001556")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Vector3 lastKeyRefForward;

		[Token(Token = "0x60015EC")]
		[Address(RVA = "0xDA445C", Offset = "0xDA445C", VA = "0xDA445C", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x60015ED")]
		[Address(RVA = "0xDA45F8", Offset = "0xDA45F8", VA = "0xDA45F8", Slot = "7")]
		protected override bool UpdateAndCheckTriggerElements(TriggerType type)
		{
			return default(bool);
		}

		[Token(Token = "0x60015EE")]
		[Address(RVA = "0xDA470C", Offset = "0xDA470C", VA = "0xDA470C")]
		private void TryAddKey(TriggerType type)
		{
		}

		[Token(Token = "0x60015EF")]
		[Address(RVA = "0xDA4884", Offset = "0xDA4884", VA = "0xDA4884")]
		private void OnTriggerColliderTriggerEntered(Collider other)
		{
		}

		[Token(Token = "0x60015F0")]
		[Address(RVA = "0xDA49B4", Offset = "0xDA49B4", VA = "0xDA49B4")]
		private void SubToKeyRelease(TriggerTypeSetter typeSetter)
		{
		}

		[Token(Token = "0x60015F1")]
		[Address(RVA = "0xDA4D5C", Offset = "0xDA4D5C", VA = "0xDA4D5C")]
		private void OnTriggerColliderTriggerExited(Collider other)
		{
		}

		[Token(Token = "0x60015F2")]
		[Address(RVA = "0xDA4DE8", Offset = "0xDA4DE8", VA = "0xDA4DE8")]
		private void KeyRemoved(GameObject obj)
		{
		}

		[Token(Token = "0x60015F3")]
		[Address(RVA = "0xDA4BDC", Offset = "0xDA4BDC", VA = "0xDA4BDC")]
		private void KeyReleasedOnStay(Autohand.Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x60015F4")]
		[Address(RVA = "0xDA4F68", Offset = "0xDA4F68", VA = "0xDA4F68")]
		[IteratorStateMachine(typeof(<co_KeyReleasedOnStay>d__17))]
		private IEnumerator co_KeyReleasedOnStay(TriggerTypeSetter typeSetter)
		{
			return null;
		}

		[Token(Token = "0x60015F5")]
		[Address(RVA = "0xDA4B30", Offset = "0xDA4B30", VA = "0xDA4B30")]
		private void TryTriggerKeyTypes(TriggerTypeSetter typeSetter)
		{
		}

		[Token(Token = "0x60015F6")]
		[Address(RVA = "0xDA5020", Offset = "0xDA5020", VA = "0xDA5020")]
		public KeyholePuzzleTrigger()
		{
		}
	}
	[Token(Token = "0x2000434")]
	public class OnStartTrigger : ScenePuzzleTrigger
	{
		[Token(Token = "0x2000435")]
		[CompilerGenerated]
		private sealed class <DelayThenTrigger>d__3 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400155D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400155E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400155F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public OnStartTrigger <>4__this;

			[Token(Token = "0x170002AF")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001605")]
				[Address(RVA = "0xDA5350", Offset = "0xDA5350", VA = "0xDA5350", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002B0")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001607")]
				[Address(RVA = "0xDA5398", Offset = "0xDA5398", VA = "0xDA5398", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001602")]
			[Address(RVA = "0xDA5238", Offset = "0xDA5238", VA = "0xDA5238")]
			[DebuggerHidden]
			public <DelayThenTrigger>d__3(int <>1__state)
			{
			}

			[Token(Token = "0x6001603")]
			[Address(RVA = "0xDA5264", Offset = "0xDA5264", VA = "0xDA5264", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001604")]
			[Address(RVA = "0xDA5268", Offset = "0xDA5268", VA = "0xDA5268", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001606")]
			[Address(RVA = "0xDA5358", Offset = "0xDA5358", VA = "0xDA5358", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400155B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float delaySeconds;

		[Token(Token = "0x400155C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public new bool triggerWhileInactive;

		[Token(Token = "0x60015FF")]
		[Address(RVA = "0xDA51A4", Offset = "0xDA51A4", VA = "0xDA51A4", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6001600")]
		[Address(RVA = "0xDA51C4", Offset = "0xDA51C4", VA = "0xDA51C4")]
		[IteratorStateMachine(typeof(<DelayThenTrigger>d__3))]
		private IEnumerator DelayThenTrigger()
		{
			return null;
		}

		[Token(Token = "0x6001601")]
		[Address(RVA = "0xDA5260", Offset = "0xDA5260", VA = "0xDA5260")]
		public OnStartTrigger()
		{
		}
	}
	[Token(Token = "0x2000436")]
	public class ProximityZonePuzzleTrigger : ScenePuzzleTrigger
	{
		[Token(Token = "0x2000437")]
		public enum SpatialScheme
		{
			[Token(Token = "0x400156C")]
			Spherical,
			[Token(Token = "0x400156D")]
			LinearX,
			[Token(Token = "0x400156E")]
			LinearY,
			[Token(Token = "0x400156F")]
			LinearZ
		}

		[Token(Token = "0x4001560")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform proximityMainTransform;

		[Token(Token = "0x4001561")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public List<Transform> proximityRefTransforms;

		[Token(Token = "0x4001562")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public SpatialScheme spatialScheme;

		[Token(Token = "0x4001563")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public RequirementScope scope;

		[Token(Token = "0x4001564")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float thresholdStartDist;

		[Token(Token = "0x4001565")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float thresholdEndDist;

		[Token(Token = "0x4001566")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float disengagementWidth;

		[Token(Token = "0x4001567")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public float tickSeconds;

		[Token(Token = "0x4001568")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private bool[] inZone;

		[Token(Token = "0x4001569")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private bool proximate;

		[Token(Token = "0x400156A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private float tickCountdownTimer;

		[Token(Token = "0x6001608")]
		[Address(RVA = "0xDA53A0", Offset = "0xDA53A0", VA = "0xDA53A0", Slot = "6")]
		public override void ProvideRefTransforms(List<Transform> refTransforms, TransformType type)
		{
		}

		[Token(Token = "0x6001609")]
		[Address(RVA = "0xDA546C", Offset = "0xDA546C", VA = "0xDA546C")]
		private float GetRefDistance(Transform refTrans)
		{
			return default(float);
		}

		[Token(Token = "0x600160A")]
		[Address(RVA = "0xDA5644", Offset = "0xDA5644", VA = "0xDA5644")]
		private bool CheckWithinThreshold(Transform refTrans)
		{
			return default(bool);
		}

		[Token(Token = "0x600160B")]
		[Address(RVA = "0xDA5678", Offset = "0xDA5678", VA = "0xDA5678")]
		private bool CheckOutsideDisengagement(Transform refTrans)
		{
			return default(bool);
		}

		[Token(Token = "0x600160C")]
		[Address(RVA = "0xDA56B8", Offset = "0xDA56B8", VA = "0xDA56B8")]
		private bool GetProximity()
		{
			return default(bool);
		}

		[Token(Token = "0x600160D")]
		[Address(RVA = "0xDA5834", Offset = "0xDA5834", VA = "0xDA5834")]
		private void Update()
		{
		}

		[Token(Token = "0x600160E")]
		[Address(RVA = "0xDA58A4", Offset = "0xDA58A4", VA = "0xDA58A4")]
		public ProximityZonePuzzleTrigger()
		{
		}
	}
	[Token(Token = "0x2000438")]
	public class PuzzleRotationTrigger : ScenePuzzleTrigger
	{
		[Token(Token = "0x4001570")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Rigidbody rotationRigidBody;

		[Token(Token = "0x4001571")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float neededRotations;

		[Token(Token = "0x4001572")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public bool resetOnIdle;

		[Token(Token = "0x4001573")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 netRotationalVector;

		[Token(Token = "0x600160F")]
		[Address(RVA = "0xDA5904", Offset = "0xDA5904", VA = "0xDA5904")]
		private void Update()
		{
		}

		[Token(Token = "0x6001610")]
		[Address(RVA = "0xDA5B60", Offset = "0xDA5B60", VA = "0xDA5B60")]
		public PuzzleRotationTrigger()
		{
		}
	}
	[Token(Token = "0x2000439")]
	public abstract class ScenePuzzleTrigger : GenericPuzzleTrigger
	{
		[Token(Token = "0x6001611")]
		[Address(RVA = "0xDA35A8", Offset = "0xDA35A8", VA = "0xDA35A8", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6001612")]
		[Address(RVA = "0xDA5BBC", Offset = "0xDA5BBC", VA = "0xDA5BBC", Slot = "6")]
		public virtual void ProvideRefTransforms(List<Transform> refTransforms, TransformType type)
		{
		}

		[Token(Token = "0x6001613")]
		[Address(RVA = "0xDA2E3C", Offset = "0xDA2E3C", VA = "0xDA2E3C")]
		protected void UpdateAndTryTrigger(TriggerType type)
		{
		}

		[Token(Token = "0x6001614")]
		[Address(RVA = "0xDA3AC8", Offset = "0xDA3AC8", VA = "0xDA3AC8")]
		protected void UpdateAndTryTrigger(TriggerType type, List<Transform> refTransforms)
		{
		}

		[Token(Token = "0x6001615")]
		[Address(RVA = "0xDA5BC0", Offset = "0xDA5BC0", VA = "0xDA5BC0", Slot = "7")]
		protected virtual bool UpdateAndCheckTriggerElements(TriggerType type)
		{
			return default(bool);
		}

		[Token(Token = "0x6001616")]
		[Address(RVA = "0xDA304C", Offset = "0xDA304C", VA = "0xDA304C")]
		protected ScenePuzzleTrigger()
		{
		}
	}
	[Token(Token = "0x200043A")]
	public enum TransformType
	{
		[Token(Token = "0x4001575")]
		Main,
		[Token(Token = "0x4001576")]
		Reference
	}
	[Token(Token = "0x200043B")]
	public enum TriggerType
	{
		[Token(Token = "0x4001578")]
		PuzzleSuccess = -1,
		[Token(Token = "0x4001579")]
		Unknown = 0,
		[Token(Token = "0x400157A")]
		None = 1,
		[Token(Token = "0x400157B")]
		OnboardingStoreKey = 2,
		[Token(Token = "0x400157C")]
		OnboardingStoreLock = 3,
		[Token(Token = "0x400157D")]
		TestBook = 4,
		[Token(Token = "0x400157E")]
		SongOfSunshine = 5,
		[Token(Token = "0x400157F")]
		SongOfStarlight = 6,
		[Token(Token = "0x4001580")]
		TestBookshelfDrop = 7,
		[Token(Token = "0x4001581")]
		StarPuzzleConnector1 = 8,
		[Token(Token = "0x4001582")]
		StarPuzzleConnector2 = 9,
		[Token(Token = "0x4001583")]
		StarPuzzleConnector3 = 10,
		[Token(Token = "0x4001584")]
		StarPuzzleConnector4 = 11,
		[Token(Token = "0x4001585")]
		MusicBookshelfDrop = 12,
		[Token(Token = "0x4001586")]
		MusicBook1 = 13,
		[Token(Token = "0x4001587")]
		MusicBook2 = 14,
		[Token(Token = "0x4001588")]
		MusicBook3 = 15,
		[Token(Token = "0x4001589")]
		Lantern = 16,
		[Token(Token = "0x400158A")]
		Torch = 17,
		[Token(Token = "0x400158B")]
		HandInShipsWheelPainting = 18,
		[Token(Token = "0x400158C")]
		HandOutOfShipsWheelPainting = 19,
		[Token(Token = "0x400158D")]
		ShipsWheelFirstGrabbed = 20,
		[Token(Token = "0x400158E")]
		ShipsWheelRelease = 21,
		[Token(Token = "0x400158F")]
		ShipsWheelPaintingDeactivated = 22,
		[Token(Token = "0x4001590")]
		ShipsWheelAxlePoint = 23,
		[Token(Token = "0x4001591")]
		ShipsWheelSetOnAxle = 24,
		[Token(Token = "0x4001592")]
		ShipsWheelRemovedFromAxle = 25,
		[Token(Token = "0x4001593")]
		ShipsWheelSpun = 26,
		[Token(Token = "0x4001594")]
		FireSwordReleasedInPainting = 27,
		[Token(Token = "0x4001595")]
		FireSwordInPainting = 28,
		[Token(Token = "0x4001596")]
		BLANK_1 = 29,
		[Token(Token = "0x4001597")]
		EyeAPlaced = 30,
		[Token(Token = "0x4001598")]
		EyeBPlaced = 31,
		[Token(Token = "0x4001599")]
		EyeALerped = 32,
		[Token(Token = "0x400159A")]
		EyeBLerped = 33,
		[Token(Token = "0x400159B")]
		BothDragonEyesLerped = 34,
		[Token(Token = "0x400159C")]
		TopStarFrag = 35,
		[Token(Token = "0x400159D")]
		LeftStarFrag = 36,
		[Token(Token = "0x400159E")]
		RightStarFrag = 37,
		[Token(Token = "0x400159F")]
		TopStarFragInPlace = 38,
		[Token(Token = "0x40015A0")]
		LeftStarFragInPlace = 39,
		[Token(Token = "0x40015A1")]
		RightStarFragInPlace = 40,
		[Token(Token = "0x40015A2")]
		MeteoritePlaced = 41,
		[Token(Token = "0x40015A3")]
		MeteoriteLerped = 42,
		[Token(Token = "0x40015A4")]
		FireCrystal = 43,
		[Token(Token = "0x40015A5")]
		AirCrystal = 44,
		[Token(Token = "0x40015A6")]
		WaterCrystal = 45,
		[Token(Token = "0x40015A7")]
		EarthCrystal = 46,
		[Token(Token = "0x40015A8")]
		CoveWaterLowered = 47,
		[Token(Token = "0x40015A9")]
		FireCrystalLerped = 48,
		[Token(Token = "0x40015AA")]
		WaterCrystalLerped = 49,
		[Token(Token = "0x40015AB")]
		AirCrystalLerped = 50,
		[Token(Token = "0x40015AC")]
		EarthCrystalLerped = 51,
		[Token(Token = "0x40015AD")]
		NightSeedPlanted = 52,
		[Token(Token = "0x40015AE")]
		NightSeedLerped = 53,
		[Token(Token = "0x40015AF")]
		NightSeedGrowthStarted = 54,
		[Token(Token = "0x40015B0")]
		ShipsWheelLerpComplete = 55,
		[Token(Token = "0x40015B1")]
		PanPipes = 100,
		[Token(Token = "0x40015B2")]
		NightFruitPlaced = 101,
		[Token(Token = "0x40015B3")]
		NightFruitLerped = 102,
		[Token(Token = "0x40015B4")]
		OnboardingStart = 103,
		[Token(Token = "0x40015B5")]
		OnboardingEnd = 104
	}
	[Token(Token = "0x200043C")]
	public class SceneTransitionTrigger : ScenePuzzleTrigger
	{
		[Token(Token = "0x40015B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public List<Room> scenesThatTrigger;

		[Token(Token = "0x6001617")]
		[Address(RVA = "0xDA5BC8", Offset = "0xDA5BC8", VA = "0xDA5BC8", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6001618")]
		[Address(RVA = "0xDA5CF8", Offset = "0xDA5CF8", VA = "0xDA5CF8")]
		private void OnSceneTransition()
		{
		}

		[Token(Token = "0x6001619")]
		[Address(RVA = "0xDA5D8C", Offset = "0xDA5D8C", VA = "0xDA5D8C")]
		public SceneTransitionTrigger()
		{
		}
	}
	[Token(Token = "0x200043D")]
	public class SimpleTriggerBridge : ScenePuzzleTrigger
	{
		[Token(Token = "0x600161A")]
		[Address(RVA = "0xD9CBE0", Offset = "0xD9CBE0", VA = "0xD9CBE0")]
		public void TriggerPuzzle(TriggerType type)
		{
		}

		[Token(Token = "0x600161B")]
		[Address(RVA = "0xDA5D90", Offset = "0xDA5D90", VA = "0xDA5D90", Slot = "7")]
		protected override bool UpdateAndCheckTriggerElements(TriggerType type)
		{
			return default(bool);
		}

		[Token(Token = "0x600161C")]
		[Address(RVA = "0xDA5D98", Offset = "0xDA5D98", VA = "0xDA5D98")]
		public SimpleTriggerBridge()
		{
		}
	}
	[Token(Token = "0x200043E")]
	public class SongPuzzleTrigger : ScenePuzzleTrigger
	{
		[Token(Token = "0x40015B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public TriggerType neededSongTrigger;

		[Token(Token = "0x600161D")]
		[Address(RVA = "0xDA5D9C", Offset = "0xDA5D9C", VA = "0xDA5D9C", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x600161E")]
		[Address(RVA = "0xDA5E78", Offset = "0xDA5E78", VA = "0xDA5E78")]
		private void ProcessPlayedSong(string songString)
		{
		}

		[Token(Token = "0x600161F")]
		[Address(RVA = "0xDA5E94", Offset = "0xDA5E94", VA = "0xDA5E94")]
		private TriggerType GetSongTriggerType(string songString)
		{
			return default(TriggerType);
		}

		[Token(Token = "0x6001620")]
		[Address(RVA = "0xDA5F1C", Offset = "0xDA5F1C", VA = "0xDA5F1C", Slot = "7")]
		protected override bool UpdateAndCheckTriggerElements(TriggerType type)
		{
			return default(bool);
		}

		[Token(Token = "0x6001621")]
		[Address(RVA = "0xDA5F2C", Offset = "0xDA5F2C", VA = "0xDA5F2C")]
		public SongPuzzleTrigger()
		{
		}
	}
	[Token(Token = "0x200043F")]
	public class SwitchboardPuzzleTrigger : ScenePuzzleTrigger
	{
		[Token(Token = "0x40015B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public TriggerType neededForwarderType;

		[Token(Token = "0x40015B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool isSubbed;

		[Token(Token = "0x6001622")]
		[Address(RVA = "0xDA5F30", Offset = "0xDA5F30", VA = "0xDA5F30", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6001623")]
		[Address(RVA = "0xDA5F58", Offset = "0xDA5F58", VA = "0xDA5F58")]
		public void SwitchboardSubscribe()
		{
		}

		[Token(Token = "0x6001624")]
		[Address(RVA = "0xDA603C", Offset = "0xDA603C", VA = "0xDA603C")]
		public void SwitchboardUnsubscribe()
		{
		}

		[Token(Token = "0x6001625")]
		[Address(RVA = "0xDA60B0", Offset = "0xDA60B0", VA = "0xDA60B0")]
		private void ProcessForwardedTrigger(TriggerType forwarderType, PuzzleTriggeredDetails triggerDetails)
		{
		}

		[Token(Token = "0x6001626")]
		[Address(RVA = "0xDA60FC", Offset = "0xDA60FC", VA = "0xDA60FC", Slot = "7")]
		protected override bool UpdateAndCheckTriggerElements(TriggerType type)
		{
			return default(bool);
		}

		[Token(Token = "0x6001627")]
		[Address(RVA = "0xDA610C", Offset = "0xDA610C", VA = "0xDA610C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001628")]
		[Address(RVA = "0xDA6168", Offset = "0xDA6168", VA = "0xDA6168")]
		public SwitchboardPuzzleTrigger()
		{
		}
	}
	[Token(Token = "0x2000440")]
	public class TagsEnteredExitedTrigger : ScenePuzzleTrigger
	{
		[Token(Token = "0x40015BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public List<string> tags;

		[Token(Token = "0x40015BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public PublishTriggerEnterExit triggerCollider;

		[Token(Token = "0x40015BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool enterTrigger;

		[Token(Token = "0x40015BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		public bool exitTrigger;

		[Token(Token = "0x40015BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
		public bool noTagsMeansAllTags;

		[Token(Token = "0x40015BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x63")]
		public bool fireOnlyOnEmptyTransition;

		[Token(Token = "0x40015C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public bool addTaggedObjectRefTransform;

		[Token(Token = "0x40015C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int countStaying;

		[Token(Token = "0x6001629")]
		[Address(RVA = "0xDA616C", Offset = "0xDA616C", VA = "0xDA616C", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x600162A")]
		[Address(RVA = "0xDA6308", Offset = "0xDA6308", VA = "0xDA6308")]
		private void OnTriggerColliderTriggerEntered(Collider other)
		{
		}

		[Token(Token = "0x600162B")]
		[Address(RVA = "0xDA65E0", Offset = "0xDA65E0", VA = "0xDA65E0")]
		private void OnTriggerColliderTriggerExited(Collider other)
		{
		}

		[Token(Token = "0x600162C")]
		[Address(RVA = "0xDA6410", Offset = "0xDA6410", VA = "0xDA6410")]
		private bool FoundTag(Collider other)
		{
			return default(bool);
		}

		[Token(Token = "0x600162D")]
		[Address(RVA = "0xDA65C4", Offset = "0xDA65C4", VA = "0xDA65C4")]
		private void IncrementCountStaying(bool entered)
		{
		}

		[Token(Token = "0x600162E")]
		[Address(RVA = "0xDA6630", Offset = "0xDA6630", VA = "0xDA6630")]
		public TagsEnteredExitedTrigger()
		{
		}
	}
	[Token(Token = "0x2000441")]
	public class TransformAlignmentTrigger : ScenePuzzleTrigger
	{
		[Token(Token = "0x2000442")]
		public enum AlignmentAxis
		{
			[Token(Token = "0x40015C6")]
			X,
			[Token(Token = "0x40015C7")]
			Y,
			[Token(Token = "0x40015C8")]
			Z
		}

		[Token(Token = "0x40015C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public AlignmentAxis alignmentAxis;

		[Token(Token = "0x40015C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public List<Transform> transformsToAlign;

		[Token(Token = "0x40015C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float alignmentDotThreshold;

		[Token(Token = "0x6001631")]
		[Address(RVA = "0xDA66BC", Offset = "0xDA66BC", VA = "0xDA66BC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001632")]
		[Address(RVA = "0xDA6848", Offset = "0xDA6848", VA = "0xDA6848")]
		public TransformAlignmentTrigger()
		{
		}
	}
	[Token(Token = "0x2000443")]
	public class TriggerConsolidatorTrigger : ScenePuzzleTrigger
	{
		[Token(Token = "0x40015C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public List<GenericPuzzleTrigger> neededTriggers;

		[Token(Token = "0x40015CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool requireTriggerOrder;

		[Token(Token = "0x40015CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private List<Guid> receivedTriggers;

		[Token(Token = "0x40015CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private List<TriggerTypeSetter> currentStayPuzzleTypes;

		[Token(Token = "0x40015CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Guid? lastTrigger;

		[Token(Token = "0x6001633")]
		[Address(RVA = "0xDA6858", Offset = "0xDA6858", VA = "0xDA6858", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6001634")]
		[Address(RVA = "0xDA685C", Offset = "0xDA685C", VA = "0xDA685C")]
		private void SubToAllTriggerTriggers()
		{
		}

		[Token(Token = "0x6001635")]
		[Address(RVA = "0xDA6A8C", Offset = "0xDA6A8C", VA = "0xDA6A8C", Slot = "7")]
		protected override bool UpdateAndCheckTriggerElements(TriggerType type)
		{
			return default(bool);
		}

		[Token(Token = "0x6001636")]
		[Address(RVA = "0xDA6B04", Offset = "0xDA6B04", VA = "0xDA6B04")]
		private void TryAddTrigger()
		{
		}

		[Token(Token = "0x6001637")]
		[Address(RVA = "0xDA6D5C", Offset = "0xDA6D5C", VA = "0xDA6D5C")]
		public TriggerConsolidatorTrigger()
		{
		}
	}
	[Token(Token = "0x2000444")]
	public class TriggerTypeSetter : MonoBehaviour
	{
		[Token(Token = "0x40015CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TriggerType type;

		[Token(Token = "0x40015CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Grabbable grabbable;

		[Token(Token = "0x600163A")]
		[Address(RVA = "0xDA6EE0", Offset = "0xDA6EE0", VA = "0xDA6EE0")]
		public TriggerTypeSetter()
		{
		}
	}
	[Token(Token = "0x2000445")]
	public class TypesEnteredExitedTrigger : ScenePuzzleTrigger
	{
		[Token(Token = "0x40015D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public List<TriggerType> types;

		[Token(Token = "0x40015D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public PublishTriggerEnterExit triggerCollider;

		[Token(Token = "0x40015D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool enterTrigger;

		[Token(Token = "0x40015D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		public bool exitTrigger;

		[Token(Token = "0x40015D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
		public bool noTypesMeansAllTypes;

		[Token(Token = "0x40015D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x63")]
		public bool fireOnlyOnEmptyTransition;

		[Token(Token = "0x40015D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public bool addTypedObjectRefTransform;

		[Token(Token = "0x40015D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int countStaying;

		[Token(Token = "0x600163B")]
		[Address(RVA = "0xDA6EE8", Offset = "0xDA6EE8", VA = "0xDA6EE8", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x600163C")]
		[Address(RVA = "0xDA7084", Offset = "0xDA7084", VA = "0xDA7084")]
		private void OnTriggerColliderTriggerEntered(Collider other)
		{
		}

		[Token(Token = "0x600163D")]
		[Address(RVA = "0xDA73E8", Offset = "0xDA73E8", VA = "0xDA73E8")]
		private void OnTriggerColliderTriggerExited(Collider other)
		{
		}

		[Token(Token = "0x600163E")]
		[Address(RVA = "0xDA718C", Offset = "0xDA718C", VA = "0xDA718C")]
		private bool FoundType(Collider other)
		{
			return default(bool);
		}

		[Token(Token = "0x600163F")]
		[Address(RVA = "0xDA73CC", Offset = "0xDA73CC", VA = "0xDA73CC")]
		private void IncrementCountStaying(bool entered)
		{
		}

		[Token(Token = "0x6001640")]
		[Address(RVA = "0xDA7438", Offset = "0xDA7438", VA = "0xDA7438")]
		public TypesEnteredExitedTrigger()
		{
		}
	}
	[Token(Token = "0x2000446")]
	public class UserEventPuzzleTrigger : GenericPuzzleTrigger
	{
		[Token(Token = "0x2000447")]
		[CompilerGenerated]
		private sealed class <InitializeWhenUserEventsAvailable>d__5 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40015DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40015DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40015DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public UserEventPuzzleTrigger <>4__this;

			[Token(Token = "0x170002B1")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001651")]
				[Address(RVA = "0xDA7C38", Offset = "0xDA7C38", VA = "0xDA7C38", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002B2")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001653")]
				[Address(RVA = "0xDA7C80", Offset = "0xDA7C80", VA = "0xDA7C80", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600164E")]
			[Address(RVA = "0xDA7590", Offset = "0xDA7590", VA = "0xDA7590")]
			[DebuggerHidden]
			public <InitializeWhenUserEventsAvailable>d__5(int <>1__state)
			{
			}

			[Token(Token = "0x600164F")]
			[Address(RVA = "0xDA7AEC", Offset = "0xDA7AEC", VA = "0xDA7AEC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001650")]
			[Address(RVA = "0xDA7AF0", Offset = "0xDA7AF0", VA = "0xDA7AF0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001652")]
			[Address(RVA = "0xDA7C40", Offset = "0xDA7C40", VA = "0xDA7C40", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000448")]
		[CompilerGenerated]
		private sealed class <FireConfigTriggerAtFrameEnd>d__9 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40015DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40015DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40015E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public UserEventPuzzleTrigger <>4__this;

			[Token(Token = "0x170002B3")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001657")]
				[Address(RVA = "0xDA7D34", Offset = "0xDA7D34", VA = "0xDA7D34", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002B4")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001659")]
				[Address(RVA = "0xDA7D7C", Offset = "0xDA7D7C", VA = "0xDA7D7C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001654")]
			[Address(RVA = "0xDA7988", Offset = "0xDA7988", VA = "0xDA7988")]
			[DebuggerHidden]
			public <FireConfigTriggerAtFrameEnd>d__9(int <>1__state)
			{
			}

			[Token(Token = "0x6001655")]
			[Address(RVA = "0xDA7C88", Offset = "0xDA7C88", VA = "0xDA7C88", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001656")]
			[Address(RVA = "0xDA7C8C", Offset = "0xDA7C8C", VA = "0xDA7C8C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001658")]
			[Address(RVA = "0xDA7D3C", Offset = "0xDA7D3C", VA = "0xDA7D3C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40015D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public List<UserEventTriggerMono> triggerSet;

		[Token(Token = "0x40015D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool configTriggerOnly;

		[Token(Token = "0x40015DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private UserEventTriggerSet processTrigger;

		[Token(Token = "0x6001643")]
		[Address(RVA = "0xDA74C4", Offset = "0xDA74C4", VA = "0xDA74C4", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6001644")]
		[Address(RVA = "0xDA74FC", Offset = "0xDA74FC", VA = "0xDA74FC")]
		public void Initialize()
		{
		}

		[Token(Token = "0x6001645")]
		[Address(RVA = "0xDA751C", Offset = "0xDA751C", VA = "0xDA751C")]
		[IteratorStateMachine(typeof(<InitializeWhenUserEventsAvailable>d__5))]
		public IEnumerator InitializeWhenUserEventsAvailable()
		{
			return null;
		}

		[Token(Token = "0x6001646")]
		[Address(RVA = "0xDA75B8", Offset = "0xDA75B8", VA = "0xDA75B8")]
		private void InitializeProcessTriggerSet()
		{
		}

		[Token(Token = "0x6001647")]
		[Address(RVA = "0xDA78D8", Offset = "0xDA78D8", VA = "0xDA78D8")]
		private void TryTriggerOnEventChange(bool success)
		{
		}

		[Token(Token = "0x6001648")]
		[Address(RVA = "0xDA78F4", Offset = "0xDA78F4", VA = "0xDA78F4")]
		private void InitiateConfigTrigger()
		{
		}

		[Token(Token = "0x6001649")]
		[Address(RVA = "0xDA7914", Offset = "0xDA7914", VA = "0xDA7914")]
		[IteratorStateMachine(typeof(<FireConfigTriggerAtFrameEnd>d__9))]
		private IEnumerator FireConfigTriggerAtFrameEnd()
		{
			return null;
		}

		[Token(Token = "0x600164A")]
		[Address(RVA = "0xDA79B0", Offset = "0xDA79B0", VA = "0xDA79B0")]
		private void FireConfigTrigger()
		{
		}

		[Token(Token = "0x600164B")]
		[Address(RVA = "0xDA79EC", Offset = "0xDA79EC", VA = "0xDA79EC")]
		private void UnsubToTriggerSet()
		{
		}

		[Token(Token = "0x600164C")]
		[Address(RVA = "0xDA7AE4", Offset = "0xDA7AE4", VA = "0xDA7AE4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600164D")]
		[Address(RVA = "0xDA7AE8", Offset = "0xDA7AE8", VA = "0xDA7AE8")]
		public UserEventPuzzleTrigger()
		{
		}
	}
	[Token(Token = "0x2000449")]
	public class WeatherTrigger : ScenePuzzleTrigger
	{
		[Token(Token = "0x200044A")]
		[CompilerGenerated]
		private sealed class <TryTriggerFromWeatherNextFrame>d__8 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40015E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40015E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40015E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public WeatherTrigger <>4__this;

			[Token(Token = "0x170002B5")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001664")]
				[Address(RVA = "0xDA80B4", Offset = "0xDA80B4", VA = "0xDA80B4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002B6")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001666")]
				[Address(RVA = "0xDA80FC", Offset = "0xDA80FC", VA = "0xDA80FC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001661")]
			[Address(RVA = "0xDA801C", Offset = "0xDA801C", VA = "0xDA801C")]
			[DebuggerHidden]
			public <TryTriggerFromWeatherNextFrame>d__8(int <>1__state)
			{
			}

			[Token(Token = "0x6001662")]
			[Address(RVA = "0xDA804C", Offset = "0xDA804C", VA = "0xDA804C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001663")]
			[Address(RVA = "0xDA8050", Offset = "0xDA8050", VA = "0xDA8050", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001665")]
			[Address(RVA = "0xDA80BC", Offset = "0xDA80BC", VA = "0xDA80BC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40015E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public Weather triggeringWeather;

		[Token(Token = "0x40015E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool triggerWhenWeatherMatched;

		[Token(Token = "0x40015E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		public bool fireOnStart;

		[Token(Token = "0x40015E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
		public bool fireOnEnable;

		[Token(Token = "0x600165A")]
		[Address(RVA = "0xDA7D84", Offset = "0xDA7D84", VA = "0xDA7D84", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x600165B")]
		[Address(RVA = "0xDA7E4C", Offset = "0xDA7E4C", VA = "0xDA7E4C", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x600165C")]
		[Address(RVA = "0xDA7F1C", Offset = "0xDA7F1C", VA = "0xDA7F1C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600165D")]
		[Address(RVA = "0xDA7ED8", Offset = "0xDA7ED8", VA = "0xDA7ED8")]
		private void TryTriggerFromWeather(Weather weather)
		{
		}

		[Token(Token = "0x600165E")]
		[Address(RVA = "0xDA7FA8", Offset = "0xDA7FA8", VA = "0xDA7FA8")]
		[IteratorStateMachine(typeof(<TryTriggerFromWeatherNextFrame>d__8))]
		private IEnumerator TryTriggerFromWeatherNextFrame()
		{
			return null;
		}

		[Token(Token = "0x600165F")]
		[Address(RVA = "0xDA8044", Offset = "0xDA8044", VA = "0xDA8044")]
		public WeatherTrigger()
		{
		}
	}
}
namespace Librarium.Puzzles.Librarium.Puzzles
{
	[Token(Token = "0x200044B")]
	public class AudioFader : GenericPuzzleListener
	{
		[Token(Token = "0x40015E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public AudioSource audioSource;

		[Token(Token = "0x6001667")]
		[Address(RVA = "0xDA8104", Offset = "0xDA8104", VA = "0xDA8104", Slot = "5")]
		protected override void ProcessToggle(PuzzleTriggeredDetails triggerDetails)
		{
		}

		[Token(Token = "0x6001668")]
		[Address(RVA = "0xDA8128", Offset = "0xDA8128", VA = "0xDA8128")]
		public AudioFader()
		{
		}
	}
}
namespace Librarium.Minigames
{
	[Token(Token = "0x200044C")]
	public class DeckRatingController : MonoBehaviour
	{
		[Token(Token = "0x40015E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private DeckRatingStar[] stars;

		[Token(Token = "0x40015EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GameObject hitParticle;

		[Token(Token = "0x6001669")]
		[Address(RVA = "0xDA812C", Offset = "0xDA812C", VA = "0xDA812C")]
		private void Awake()
		{
		}

		[Token(Token = "0x600166A")]
		[Address(RVA = "0xDA8264", Offset = "0xDA8264", VA = "0xDA8264")]
		private void OnStarSelected(int rating)
		{
		}

		[Token(Token = "0x600166B")]
		[Address(RVA = "0xDA8818", Offset = "0xDA8818", VA = "0xDA8818")]
		public void InitiateSelfDestruct(float secondsToWait)
		{
		}

		[Token(Token = "0x600166C")]
		[Address(RVA = "0xDA88DC", Offset = "0xDA88DC", VA = "0xDA88DC")]
		private void SelfDestruct()
		{
		}

		[Token(Token = "0x600166D")]
		[Address(RVA = "0xDA8948", Offset = "0xDA8948", VA = "0xDA8948")]
		public DeckRatingController()
		{
		}
	}
	[Token(Token = "0x200044E")]
	public class DeckRatingStar : MonoBehaviour
	{
		[Token(Token = "0x40015ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Action<int> OnSelected;

		[Token(Token = "0x40015EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool canBeSelected;

		[Token(Token = "0x40015EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int rating;

		[Token(Token = "0x40015F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Material yellowMat;

		[Token(Token = "0x40015F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Renderer thisRenderer;

		[Token(Token = "0x40015F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Rigidbody thisRigidbody;

		[Token(Token = "0x6001672")]
		[Address(RVA = "0xDA8E50", Offset = "0xDA8E50", VA = "0xDA8E50")]
		private void OnCollisionEnter(Collision other)
		{
		}

		[Token(Token = "0x6001673")]
		[Address(RVA = "0xDA85E0", Offset = "0xDA85E0", VA = "0xDA85E0")]
		public void SetGlowing()
		{
		}

		[Token(Token = "0x6001674")]
		[Address(RVA = "0xDA86C4", Offset = "0xDA86C4", VA = "0xDA86C4")]
		public void SetNotSelected()
		{
		}

		[Token(Token = "0x6001675")]
		[Address(RVA = "0xDA8EEC", Offset = "0xDA8EEC", VA = "0xDA8EEC")]
		public DeckRatingStar()
		{
		}
	}
	[Token(Token = "0x200044F")]
	public abstract class Minigame : Singleton<Minigame>
	{
		[Token(Token = "0x40015F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float score;

		[Token(Token = "0x40015F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Action<float, Vector3> OnGameCompleted;

		[Token(Token = "0x40015F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Action QuitGame;

		[Token(Token = "0x40015F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected DeckPackage currentlyLoadedDeckCopy;

		[Token(Token = "0x40015F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected List<CardPackage> propsInDeck;

		[Token(Token = "0x40015F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected List<CardPackage> propsRemainingInCurrentRun;

		[Token(Token = "0x40015FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject ratingsPanel;

		[Token(Token = "0x40015FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected DeckRatingController ratingsPanelInstance;

		[Token(Token = "0x170002B7")]
		public bool gameActive
		{
			[Token(Token = "0x6001676")]
			[Address(RVA = "0xDA8EF4", Offset = "0xDA8EF4", VA = "0xDA8EF4")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001677")]
			[Address(RVA = "0xDA8EFC", Offset = "0xDA8EFC", VA = "0xDA8EFC")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x6001678")]
		[Address(RVA = "0xDA8F08", Offset = "0xDA8F08", VA = "0xDA8F08", Slot = "5")]
		protected override void DidAwake()
		{
		}

		[Token(Token = "0x6001679")]
		[Address(RVA = "0xDA9024", Offset = "0xDA9024", VA = "0xDA9024")]
		private void CompleteGame(float score, Vector3 gameBoardPosition)
		{
		}

		[Token(Token = "0x600167A")]
		[Address(RVA = "0xDA9330", Offset = "0xDA9330", VA = "0xDA9330", Slot = "6")]
		public virtual void Initialize()
		{
		}

		[Token(Token = "0x600167B")]
		[Address(RVA = "0xDA9564", Offset = "0xDA9564", VA = "0xDA9564", Slot = "7")]
		protected virtual void GetData()
		{
		}

		[Token(Token = "0x600167C")]
		[Address(RVA = "0xDA961C", Offset = "0xDA961C", VA = "0xDA961C", Slot = "8")]
		protected virtual void SelectItem(SelectableAnswerObject selected)
		{
		}

		[Token(Token = "0x600167D")]
		[Address(RVA = "0xDA9620", Offset = "0xDA9620", VA = "0xDA9620", Slot = "9")]
		protected virtual void UpdateScore(int points)
		{
		}

		[Token(Token = "0x600167E")]
		[Address(RVA = "0xDA9634", Offset = "0xDA9634", VA = "0xDA9634", Slot = "10")]
		protected virtual void CompleteGame()
		{
		}

		[Token(Token = "0x600167F")]
		[Address(RVA = "0xDA9638", Offset = "0xDA9638", VA = "0xDA9638", Slot = "11")]
		public virtual void CancelGame()
		{
		}

		[Token(Token = "0x6001680")]
		[Address(RVA = "0xDA977C", Offset = "0xDA977C", VA = "0xDA977C")]
		protected Minigame()
		{
		}
	}
	[Token(Token = "0x2000450")]
	public class MinigameManager : Singleton<MinigameManager>
	{
		[Token(Token = "0x40015FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MinigameState state;

		[Token(Token = "0x40015FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Action<MinigameType> initializeMinigame;

		[Token(Token = "0x40015FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Minigame currentGame;

		[Token(Token = "0x4001600")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform hmd;

		[Token(Token = "0x14000019")]
		public static event Action<MinigameState> OnMinigameStateChange
		{
			[Token(Token = "0x6001681")]
			[Address(RVA = "0xDA97C4", Offset = "0xDA97C4", VA = "0xDA97C4")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001682")]
			[Address(RVA = "0xDA9890", Offset = "0xDA9890", VA = "0xDA9890")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6001683")]
		[Address(RVA = "0xDA995C", Offset = "0xDA995C", VA = "0xDA995C", Slot = "5")]
		protected override void DidAwake()
		{
		}

		[Token(Token = "0x6001684")]
		[Address(RVA = "0xDA9458", Offset = "0xDA9458", VA = "0xDA9458")]
		public void UpdateGameState(Minigame game, MinigameState state)
		{
		}

		[Token(Token = "0x6001685")]
		[Address(RVA = "0xDA9A40", Offset = "0xDA9A40", VA = "0xDA9A40")]
		public MinigameManager()
		{
		}
	}
	[Token(Token = "0x2000451")]
	public enum MinigameState
	{
		[Token(Token = "0x4001602")]
		InProgress,
		[Token(Token = "0x4001603")]
		WinCase,
		[Token(Token = "0x4001604")]
		LoseCase,
		[Token(Token = "0x4001605")]
		Inactive
	}
	[Token(Token = "0x2000452")]
	public enum MinigameType
	{
		[Token(Token = "0x4001607")]
		MultipleChoice
	}
	[Token(Token = "0x2000453")]
	public class MultipleChoice : Minigame
	{
		[Token(Token = "0x2000454")]
		[CompilerGenerated]
		private sealed class <co_Initialize>d__19 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400161A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400161B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400161C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MultipleChoice <>4__this;

			[Token(Token = "0x400161D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Room <currentRoom>5__2;

			[Token(Token = "0x400161E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Coroutine <getQuestions>5__3;

			[Token(Token = "0x170002B8")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600169A")]
				[Address(RVA = "0xDAB714", Offset = "0xDAB714", VA = "0xDAB714", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002B9")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600169C")]
				[Address(RVA = "0xDAB75C", Offset = "0xDAB75C", VA = "0xDAB75C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001697")]
			[Address(RVA = "0xDA9B44", Offset = "0xDA9B44", VA = "0xDA9B44")]
			[DebuggerHidden]
			public <co_Initialize>d__19(int <>1__state)
			{
			}

			[Token(Token = "0x6001698")]
			[Address(RVA = "0xDAAF6C", Offset = "0xDAAF6C", VA = "0xDAAF6C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001699")]
			[Address(RVA = "0xDAAF70", Offset = "0xDAAF70", VA = "0xDAAF70", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600169B")]
			[Address(RVA = "0xDAB71C", Offset = "0xDAB71C", VA = "0xDAB71C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000455")]
		[CompilerGenerated]
		private sealed class <co_SetValidCardList>d__20 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400161F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001620")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001621")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MultipleChoice <>4__this;

			[Token(Token = "0x4001622")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private List<CardPackage>.Enumerator <>7__wrap1;

			[Token(Token = "0x4001623")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private CardPackage <cardPackage>5__3;

			[Token(Token = "0x4001624")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private BasicCard <thisCard>5__4;

			[Token(Token = "0x170002BA")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60016A1")]
				[Address(RVA = "0xDABD30", Offset = "0xDABD30", VA = "0xDABD30", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002BB")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60016A3")]
				[Address(RVA = "0xDABD78", Offset = "0xDABD78", VA = "0xDABD78", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600169D")]
			[Address(RVA = "0xDA9BE0", Offset = "0xDA9BE0", VA = "0xDA9BE0")]
			[DebuggerHidden]
			public <co_SetValidCardList>d__20(int <>1__state)
			{
			}

			[Token(Token = "0x600169E")]
			[Address(RVA = "0xDAB764", Offset = "0xDAB764", VA = "0xDAB764", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600169F")]
			[Address(RVA = "0xDAB780", Offset = "0xDAB780", VA = "0xDAB780", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60016A0")]
			[Address(RVA = "0xDABCE0", Offset = "0xDABCE0", VA = "0xDABCE0")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x60016A2")]
			[Address(RVA = "0xDABD38", Offset = "0xDABD38", VA = "0xDABD38", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000457")]
		[CompilerGenerated]
		private sealed class <co_GetCuratedMultipleChoice>d__21 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001627")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001628")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001629")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MultipleChoice <>4__this;

			[Token(Token = "0x170002BC")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60016A9")]
				[Address(RVA = "0xDAC034", Offset = "0xDAC034", VA = "0xDAC034", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002BD")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60016AB")]
				[Address(RVA = "0xDAC07C", Offset = "0xDAC07C", VA = "0xDAC07C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60016A6")]
			[Address(RVA = "0xDA9C7C", Offset = "0xDA9C7C", VA = "0xDA9C7C")]
			[DebuggerHidden]
			public <co_GetCuratedMultipleChoice>d__21(int <>1__state)
			{
			}

			[Token(Token = "0x60016A7")]
			[Address(RVA = "0xDABE00", Offset = "0xDABE00", VA = "0xDABE00", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60016A8")]
			[Address(RVA = "0xDABE04", Offset = "0xDABE04", VA = "0xDABE04", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60016AA")]
			[Address(RVA = "0xDAC03C", Offset = "0xDAC03C", VA = "0xDAC03C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000458")]
		[CompilerGenerated]
		private sealed class <DoCancelGame>d__26 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400162A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400162B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400162C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MultipleChoice <>4__this;

			[Token(Token = "0x170002BE")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60016AF")]
				[Address(RVA = "0xDAC6A4", Offset = "0xDAC6A4", VA = "0xDAC6A4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002BF")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60016B1")]
				[Address(RVA = "0xDAC6EC", Offset = "0xDAC6EC", VA = "0xDAC6EC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60016AC")]
			[Address(RVA = "0xDAA108", Offset = "0xDAA108", VA = "0xDAA108")]
			[DebuggerHidden]
			public <DoCancelGame>d__26(int <>1__state)
			{
			}

			[Token(Token = "0x60016AD")]
			[Address(RVA = "0xDAC084", Offset = "0xDAC084", VA = "0xDAC084", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60016AE")]
			[Address(RVA = "0xDAC088", Offset = "0xDAC088", VA = "0xDAC088", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60016B0")]
			[Address(RVA = "0xDAC6AC", Offset = "0xDAC6AC", VA = "0xDAC6AC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000459")]
		[CompilerGenerated]
		private sealed class <CreateNextQuestion>d__28 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400162D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400162E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400162F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MultipleChoice <>4__this;

			[Token(Token = "0x4001630")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private MultipleChoiceQuestion <thisQuestion>5__2;

			[Token(Token = "0x4001631")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private int <i>5__3;

			[Token(Token = "0x170002C0")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60016B5")]
				[Address(RVA = "0xDAD4B0", Offset = "0xDAD4B0", VA = "0xDAD4B0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002C1")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60016B7")]
				[Address(RVA = "0xDAD4F8", Offset = "0xDAD4F8", VA = "0xDAD4F8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60016B2")]
			[Address(RVA = "0xDAA5B4", Offset = "0xDAA5B4", VA = "0xDAA5B4")]
			[DebuggerHidden]
			public <CreateNextQuestion>d__28(int <>1__state)
			{
			}

			[Token(Token = "0x60016B3")]
			[Address(RVA = "0xDAC6F4", Offset = "0xDAC6F4", VA = "0xDAC6F4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60016B4")]
			[Address(RVA = "0xDAC6F8", Offset = "0xDAC6F8", VA = "0xDAC6F8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60016B6")]
			[Address(RVA = "0xDAD4B8", Offset = "0xDAD4B8", VA = "0xDAD4B8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001608")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject gameBoardPrefab;

		[Token(Token = "0x4001609")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public GameObject correctParticles;

		[Token(Token = "0x400160A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public GameObject incorrectParticles;

		[Token(Token = "0x400160B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public List<SelectableAnswerObject> selectableAnswerObjects;

		[Token(Token = "0x400160C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public GameObject victoryPlaque;

		[Token(Token = "0x400160D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float propScalingConstant;

		[Token(Token = "0x400160E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public List<Vector3> spawnPoints;

		[Token(Token = "0x400160F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected List<GameObject> currentlySpawnedItems;

		[Token(Token = "0x4001610")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected MultipleChoiceObject currentGameBoard;

		[Token(Token = "0x4001611")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private int answerSlotCount;

		[Token(Token = "0x4001612")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private bool spawningProp;

		[Token(Token = "0x4001613")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private ManagedProp lastSpawnedProp;

		[Token(Token = "0x4001614")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private List<CardPackage> validCards;

		[Token(Token = "0x4001615")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private bool waitingOnProp;

		[Token(Token = "0x4001616")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private GameObject lastCaughtPropPrefab;

		[Token(Token = "0x4001617")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private List<MultipleChoiceQuestion> questions;

		[Token(Token = "0x4001618")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private int initialQuestionCounts;

		[Token(Token = "0x4001619")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private bool canceling;

		[Token(Token = "0x6001687")]
		[Address(RVA = "0xDA9AA8", Offset = "0xDA9AA8", VA = "0xDA9AA8", Slot = "6")]
		public override void Initialize()
		{
		}

		[Token(Token = "0x6001688")]
		[Address(RVA = "0xDA9AD0", Offset = "0xDA9AD0", VA = "0xDA9AD0")]
		[IteratorStateMachine(typeof(<co_Initialize>d__19))]
		private IEnumerator co_Initialize()
		{
			return null;
		}

		[Token(Token = "0x6001689")]
		[Address(RVA = "0xDA9B6C", Offset = "0xDA9B6C", VA = "0xDA9B6C")]
		[IteratorStateMachine(typeof(<co_SetValidCardList>d__20))]
		private IEnumerator co_SetValidCardList()
		{
			return null;
		}

		[Token(Token = "0x600168A")]
		[Address(RVA = "0xDA9C08", Offset = "0xDA9C08", VA = "0xDA9C08")]
		[IteratorStateMachine(typeof(<co_GetCuratedMultipleChoice>d__21))]
		private IEnumerator co_GetCuratedMultipleChoice()
		{
			return null;
		}

		[Token(Token = "0x600168B")]
		[Address(RVA = "0xDA9CA4", Offset = "0xDA9CA4", VA = "0xDA9CA4")]
		private void GetProgrammaticMultipleChoice()
		{
		}

		[Token(Token = "0x600168C")]
		private void ShuffleList<T>(List<T> list)
		{
		}

		[Token(Token = "0x600168D")]
		[Address(RVA = "0xDAA048", Offset = "0xDAA048", VA = "0xDAA048")]
		private void CatchPropPrefab(Guid requestId, GameObject prefab)
		{
		}

		[Token(Token = "0x600168E")]
		[Address(RVA = "0xDAA06C", Offset = "0xDAA06C", VA = "0xDAA06C", Slot = "11")]
		public override void CancelGame()
		{
		}

		[Token(Token = "0x600168F")]
		[Address(RVA = "0xDAA094", Offset = "0xDAA094", VA = "0xDAA094")]
		[IteratorStateMachine(typeof(<DoCancelGame>d__26))]
		private IEnumerator DoCancelGame()
		{
			return null;
		}

		[Token(Token = "0x6001690")]
		[Address(RVA = "0xDAA130", Offset = "0xDAA130", VA = "0xDAA130")]
		public (Vector3, Vector3) GetAggregateBoundingBoxExtent(Transform propTopLevel)
		{
			return default((Vector3, Vector3));
		}

		[Token(Token = "0x6001691")]
		[Address(RVA = "0xDAA540", Offset = "0xDAA540", VA = "0xDAA540", Slot = "12")]
		[IteratorStateMachine(typeof(<CreateNextQuestion>d__28))]
		protected virtual IEnumerator CreateNextQuestion()
		{
			return null;
		}

		[Token(Token = "0x6001692")]
		[Address(RVA = "0xDAA5DC", Offset = "0xDAA5DC", VA = "0xDAA5DC")]
		private void CatchSpawnedProp(ManagedProp prop)
		{
		}

		[Token(Token = "0x6001693")]
		[Address(RVA = "0xDAA5FC", Offset = "0xDAA5FC", VA = "0xDAA5FC", Slot = "8")]
		protected override void SelectItem(SelectableAnswerObject selected)
		{
		}

		[Token(Token = "0x6001694")]
		[Address(RVA = "0xDAA9E8", Offset = "0xDAA9E8", VA = "0xDAA9E8", Slot = "9")]
		protected override void UpdateScore(int score)
		{
		}

		[Token(Token = "0x6001695")]
		[Address(RVA = "0xDAAACC", Offset = "0xDAAACC", VA = "0xDAAACC", Slot = "13")]
		protected virtual void ClearCurrentSelection()
		{
		}

		[Token(Token = "0x6001696")]
		[Address(RVA = "0xDAAE40", Offset = "0xDAAE40", VA = "0xDAAE40")]
		public MultipleChoice()
		{
		}
	}
}
namespace Librarium.UI
{
	[Token(Token = "0x200045A")]
	public class DevTestingUIManager : BaseMonoBehaviour
	{
		[Token(Token = "0x4001632")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private ExpandingNavigationStackController navigationController;

		[Token(Token = "0x4001633")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Canvas uiCanvas;

		[Token(Token = "0x4001634")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private DevTestingMainViewController mainViewController;

		[Token(Token = "0x4001635")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private UIKitPointer laserPointer;

		[Token(Token = "0x4001636")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private UIKitPointer activeLaserPointer;

		[Token(Token = "0x4001637")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private List<InputActionReference> inputDidSelectItemActions;

		[Token(Token = "0x4001638")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int recentInputHitCount;

		[Token(Token = "0x60016B8")]
		[Address(RVA = "0xDAD500", Offset = "0xDAD500", VA = "0xDAD500")]
		private void Awake()
		{
		}

		[Token(Token = "0x60016B9")]
		[Address(RVA = "0xDADAE0", Offset = "0xDADAE0", VA = "0xDADAE0")]
		private void Start()
		{
		}

		[Token(Token = "0x60016BA")]
		[Address(RVA = "0xDADBD4", Offset = "0xDADBD4", VA = "0xDADBD4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60016BB")]
		[Address(RVA = "0xDADBD8", Offset = "0xDADBD8", VA = "0xDADBD8")]
		private void Update()
		{
		}

		[Token(Token = "0x60016BC")]
		[Address(RVA = "0xDADBDC", Offset = "0xDADBDC", VA = "0xDADBDC")]
		public void ShowDevUI()
		{
		}

		[Token(Token = "0x60016BD")]
		[Address(RVA = "0xDADEDC", Offset = "0xDADEDC", VA = "0xDADEDC")]
		[ContextMenu("Create Laser Pointer")]
		public void CreateLaserPointer()
		{
		}

		[Token(Token = "0x60016BE")]
		[Address(RVA = "0xDADFCC", Offset = "0xDADFCC", VA = "0xDADFCC")]
		private void RemoveLaserPointer()
		{
		}

		[Token(Token = "0x60016BF")]
		[Address(RVA = "0xDAE084", Offset = "0xDAE084", VA = "0xDAE084")]
		public DevTestingUIManager()
		{
		}
	}
	[Token(Token = "0x200045C")]
	public class DevTestingListItemView : ExpandingNavigationListItemView
	{
		[Token(Token = "0x400163B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public TextMeshProUGUI subTitleLabel;

		[Token(Token = "0x60016C6")]
		[Address(RVA = "0xDAE6FC", Offset = "0xDAE6FC", VA = "0xDAE6FC")]
		public DevTestingListItemView()
		{
		}
	}
	[Token(Token = "0x200045D")]
	public class DevTestingBaseListViewController : BaseExpandingViewController
	{
		[Token(Token = "0x400163C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected DevTestingBaseListViewController itemsListViewControllerPrefab;

		[Token(Token = "0x400163D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private DevTestingListItemView devListItemViewTemplate;

		[Token(Token = "0x400163E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private TextMeshProUGUI titleLabel;

		[Token(Token = "0x400163F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private ExpandingNavigationListController listController;

		[Token(Token = "0x60016C7")]
		[Address(RVA = "0xDAE704", Offset = "0xDAE704", VA = "0xDAE704")]
		public void AddListItemWithTitle(string title, Action<DevTestingListItemView> tappedCallback)
		{
		}

		[Token(Token = "0x60016C8")]
		[Address(RVA = "0xDAE880", Offset = "0xDAE880", VA = "0xDAE880", Slot = "5")]
		public override void SetVisibilityPercentage(float percentage)
		{
		}

		[Token(Token = "0x60016C9")]
		[Address(RVA = "0xDAE8C4", Offset = "0xDAE8C4", VA = "0xDAE8C4", Slot = "6")]
		public override void DidInstantiateViewControllerFromPrefab(BaseExpandingViewController prefabViewController)
		{
		}

		[Token(Token = "0x60016CA")]
		[Address(RVA = "0xDAE984", Offset = "0xDAE984", VA = "0xDAE984")]
		public DevTestingBaseListViewController()
		{
		}
	}
	[Token(Token = "0x200045F")]
	public class DevTestingMainViewController : DevTestingBaseListViewController
	{
		[Token(Token = "0x2000462")]
		[CompilerGenerated]
		private sealed class <co_UpdateFPSMonitorLog>d__12 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400165D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400165E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400165F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public DevTestingListItemView item;

			[Token(Token = "0x4001660")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public DevTestingMainViewController <>4__this;

			[Token(Token = "0x170002C3")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60016F9")]
				[Address(RVA = "0xDB184C", Offset = "0xDB184C", VA = "0xDB184C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002C4")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60016FB")]
				[Address(RVA = "0xDB1894", Offset = "0xDB1894", VA = "0xDB1894", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60016F6")]
			[Address(RVA = "0xDAF9B0", Offset = "0xDAF9B0", VA = "0xDAF9B0")]
			[DebuggerHidden]
			public <co_UpdateFPSMonitorLog>d__12(int <>1__state)
			{
			}

			[Token(Token = "0x60016F7")]
			[Address(RVA = "0xDB1738", Offset = "0xDB1738", VA = "0xDB1738", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60016F8")]
			[Address(RVA = "0xDB173C", Offset = "0xDB173C", VA = "0xDB173C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60016FA")]
			[Address(RVA = "0xDB1854", Offset = "0xDB1854", VA = "0xDB1854", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001641")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private DevTestingMainViewController origPrefabViewController;

		[Token(Token = "0x4001643")]
		private const string kMiscSettings = "Misc Settings";

		[Token(Token = "0x4001644")]
		private const string kPerformance = "Performance";

		[Token(Token = "0x4001645")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Material defaultSkybox;

		[Token(Token = "0x4001646")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static int lastFPS;

		[Token(Token = "0x4001647")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static float lastRenderScale;

		[Token(Token = "0x4001648")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Coroutine fpsMonitorCoroutine;

		[Token(Token = "0x4001649")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private DevTestingListItemView networkingListItem;

		[Token(Token = "0x170002C2")]
		public string idKey
		{
			[Token(Token = "0x60016CD")]
			[Address(RVA = "0xDAEA60", Offset = "0xDAEA60", VA = "0xDAEA60")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60016CE")]
			[Address(RVA = "0xDAEA68", Offset = "0xDAEA68", VA = "0xDAEA68")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x60016CF")]
		[Address(RVA = "0xDAEA70", Offset = "0xDAEA70", VA = "0xDAEA70")]
		private void Start()
		{
		}

		[Token(Token = "0x60016D0")]
		[Address(RVA = "0xDAF920", Offset = "0xDAF920", VA = "0xDAF920")]
		[IteratorStateMachine(typeof(<co_UpdateFPSMonitorLog>d__12))]
		private IEnumerator co_UpdateFPSMonitorLog(DevTestingListItemView item)
		{
			return null;
		}

		[Token(Token = "0x60016D1")]
		[Address(RVA = "0xDAF9D8", Offset = "0xDAF9D8", VA = "0xDAF9D8")]
		public int SetFrameRate(int fps)
		{
			return default(int);
		}

		[Token(Token = "0x60016D2")]
		[Address(RVA = "0xDAFA3C", Offset = "0xDAFA3C", VA = "0xDAFA3C")]
		private void AddGnosis(DevTestingListItemView item, int amountToAdd)
		{
		}

		[Token(Token = "0x60016D3")]
		[Address(RVA = "0xDAFCE0", Offset = "0xDAFCE0", VA = "0xDAFCE0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60016D4")]
		[Address(RVA = "0xDAFE14", Offset = "0xDAFE14", VA = "0xDAFE14")]
		private void NetworkingLoggedMessage(string msg)
		{
		}

		[Token(Token = "0x60016D5")]
		[Address(RVA = "0xDAFF78", Offset = "0xDAFF78", VA = "0xDAFF78", Slot = "6")]
		public override void DidInstantiateViewControllerFromPrefab(BaseExpandingViewController prefabViewController)
		{
		}

		[Token(Token = "0x60016D6")]
		[Address(RVA = "0xDB0028", Offset = "0xDB0028", VA = "0xDB0028")]
		public DevTestingMainViewController()
		{
		}
	}
	[Token(Token = "0x2000463")]
	public class DevTestingMiscSettingsViewController : DevTestingBaseListViewController
	{
		[Token(Token = "0x4001661")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private DevTestingListItemView networkingListItem;

		[Token(Token = "0x60016FC")]
		[Address(RVA = "0xDB189C", Offset = "0xDB189C", VA = "0xDB189C")]
		private void Start()
		{
		}

		[Token(Token = "0x60016FD")]
		[Address(RVA = "0xDB1A44", Offset = "0xDB1A44", VA = "0xDB1A44")]
		private void AddGnosis(DevTestingListItemView item, int amountToAdd)
		{
		}

		[Token(Token = "0x60016FE")]
		[Address(RVA = "0xDB1CE8", Offset = "0xDB1CE8", VA = "0xDB1CE8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60016FF")]
		[Address(RVA = "0xDB1E1C", Offset = "0xDB1E1C", VA = "0xDB1E1C")]
		private void NetworkingLoggedMessage(string msg)
		{
		}

		[Token(Token = "0x6001700")]
		[Address(RVA = "0xDB1F80", Offset = "0xDB1F80", VA = "0xDB1F80")]
		public DevTestingMiscSettingsViewController()
		{
		}
	}
	[Token(Token = "0x2000465")]
	public class DevTestingPerformanceViewController : DevTestingBaseListViewController
	{
		[Token(Token = "0x4001664")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Material defaultSkybox;

		[Token(Token = "0x4001665")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private Material simplerSkybox;

		[Token(Token = "0x6001708")]
		[Address(RVA = "0xDB20DC", Offset = "0xDB20DC", VA = "0xDB20DC")]
		private void Start()
		{
		}

		[Token(Token = "0x6001709")]
		[Address(RVA = "0xDB24E4", Offset = "0xDB24E4", VA = "0xDB24E4")]
		public DevTestingPerformanceViewController()
		{
		}
	}
	[Token(Token = "0x2000467")]
	public class FlashcardPreviewController : Singleton<FlashcardPreviewController>
	{
		[Token(Token = "0x2000468")]
		[CompilerGenerated]
		private sealed class <AnimateInAndHideCards>d__11 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001674")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001675")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001676")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public FlashcardPreviewController <>4__this;

			[Token(Token = "0x170002C5")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600171B")]
				[Address(RVA = "0xDB44D4", Offset = "0xDB44D4", VA = "0xDB44D4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002C6")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600171D")]
				[Address(RVA = "0xDB451C", Offset = "0xDB451C", VA = "0xDB451C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001718")]
			[Address(RVA = "0xDB3C3C", Offset = "0xDB3C3C", VA = "0xDB3C3C")]
			[DebuggerHidden]
			public <AnimateInAndHideCards>d__11(int <>1__state)
			{
			}

			[Token(Token = "0x6001719")]
			[Address(RVA = "0xDB3C64", Offset = "0xDB3C64", VA = "0xDB3C64", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600171A")]
			[Address(RVA = "0xDB3C68", Offset = "0xDB3C68", VA = "0xDB3C68", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600171C")]
			[Address(RVA = "0xDB44DC", Offset = "0xDB44DC", VA = "0xDB44DC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400166C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FlashcardPreview[] cards;

		[Token(Token = "0x400166D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Transform deckTransform;

		[Token(Token = "0x400166E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Transform hmd;

		[Token(Token = "0x400166F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform thisTransform;

		[Token(Token = "0x4001670")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private ManagedDeck managedDeck;

		[Token(Token = "0x4001671")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 origCardSize;

		[Token(Token = "0x4001672")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private List<Vector3> cardStartPositions;

		[Token(Token = "0x4001673")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool isOpen;

		[Token(Token = "0x6001712")]
		[Address(RVA = "0xDB2D0C", Offset = "0xDB2D0C", VA = "0xDB2D0C", Slot = "5")]
		protected override void DidAwake()
		{
		}

		[Token(Token = "0x6001713")]
		[Address(RVA = "0xDB2F08", Offset = "0xDB2F08", VA = "0xDB2F08")]
		private void TogglePreviewCards(ManagedDeck deck)
		{
		}

		[Token(Token = "0x6001714")]
		[Address(RVA = "0xDB2FD4", Offset = "0xDB2FD4", VA = "0xDB2FD4")]
		private void AnimateOutAndPopulateCards()
		{
		}

		[Token(Token = "0x6001715")]
		[Address(RVA = "0xDB3898", Offset = "0xDB3898", VA = "0xDB3898")]
		[IteratorStateMachine(typeof(<AnimateInAndHideCards>d__11))]
		private IEnumerator AnimateInAndHideCards()
		{
			return null;
		}

		[Token(Token = "0x6001716")]
		[Address(RVA = "0xDB390C", Offset = "0xDB390C", VA = "0xDB390C")]
		public void Update()
		{
		}

		[Token(Token = "0x6001717")]
		[Address(RVA = "0xDB3BA0", Offset = "0xDB3BA0", VA = "0xDB3BA0")]
		public FlashcardPreviewController()
		{
		}
	}
	[Token(Token = "0x2000469")]
	public class StoreUIDataProvider : BaseMonoBehaviour
	{
		[Token(Token = "0x200046A")]
		private class MarketplaceBundleWithParentInfo
		{
			[Token(Token = "0x400167F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Bundle bundle;

			[Token(Token = "0x4001680")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public MarketplaceBundleWithParentInfo parentInfo;

			[Token(Token = "0x6001739")]
			[Address(RVA = "0xDB6818", Offset = "0xDB6818", VA = "0xDB6818")]
			public MarketplaceBundleWithParentInfo()
			{
			}
		}

		[Token(Token = "0x2000477")]
		[CompilerGenerated]
		private sealed class <>c__DisplayClass32_0<T> where T : APIComm
		{
			[Token(Token = "0x40016A0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public StoreUIDataProvider <>4__this;

			[Token(Token = "0x40016A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public T commRequest;

			[Token(Token = "0x40016A2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UnityEngine.Object requestingObject;

			[Token(Token = "0x40016A3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Action<bool, T> onFinishedCallback;

			[Token(Token = "0x6001754")]
			public <>c__DisplayClass32_0()
			{
			}

			[Token(Token = "0x6001755")]
			internal void <co_PerformAPICommRequest>b__0(bool success)
			{
			}
		}

		[Token(Token = "0x2000478")]
		[CompilerGenerated]
		private sealed class <co_PerformAPICommRequest>d__32<T> : IEnumerator<object>, IEnumerator, IDisposable where T : APIComm
		{
			[Token(Token = "0x40016A4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>1__state;

			[Token(Token = "0x40016A5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private object <>2__current;

			[Token(Token = "0x40016A6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public StoreUIDataProvider <>4__this;

			[Token(Token = "0x40016A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public T commRequest;

			[Token(Token = "0x40016A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UnityEngine.Object requestingObject;

			[Token(Token = "0x40016A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Action<bool, T> onFinishedCallback;

			[Token(Token = "0x40016AA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private <>c__DisplayClass32_0<T> <>8__1;

			[Token(Token = "0x40016AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private Coroutine <commRequestCoroutine>5__2;

			[Token(Token = "0x170002C7")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001759")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002C8")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600175B")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001756")]
			[DebuggerHidden]
			public <co_PerformAPICommRequest>d__32(int <>1__state)
			{
			}

			[Token(Token = "0x6001757")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001758")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600175A")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001677")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool verboseLogging;

		[Token(Token = "0x4001678")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool enablePurchases;

		[Token(Token = "0x4001679")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<Bundle> cachedTopLevelMarketplaceBundles;

		[Token(Token = "0x400167A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<string> alreadyPurchasedListingIds;

		[Token(Token = "0x400167B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<string> decksPurchasedThisSession;

		[Token(Token = "0x400167C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int searchAttempts;

		[Token(Token = "0x400167D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Dictionary<string, Texture2D> cachedTexturesByURL;

		[Token(Token = "0x400167E")]
		public const string kPurchaseSuccessResponseString = "SUCCESS";

		[Token(Token = "0x600171E")]
		[Address(RVA = "0xDB4524", Offset = "0xDB4524", VA = "0xDB4524")]
		public List<Bundle> GetCachedBundles()
		{
			return null;
		}

		[Token(Token = "0x600171F")]
		[Address(RVA = "0xDB452C", Offset = "0xDB452C", VA = "0xDB452C")]
		public void GetMarketplaceTopLevelListings(UnityEngine.Object requestingObject, Action<bool, List<Bundle>> onFinishedCallback)
		{
		}

		[Token(Token = "0x6001720")]
		[Address(RVA = "0xDB469C", Offset = "0xDB469C", VA = "0xDB469C")]
		public void GetChildBundlesOfBundle(UnityEngine.Object requestingObject, Bundle parentBundle, Action<bool, Bundle> onFinishedCallback)
		{
		}

		[Token(Token = "0x6001721")]
		[Address(RVA = "0xDB4850", Offset = "0xDB4850", VA = "0xDB4850")]
		public void GetFullBundleHierarchyForItemId(UnityEngine.Object requestingObject, Guid itemId, Action<bool, List<Bundle>> onFinishedCallback)
		{
		}

		[Token(Token = "0x6001722")]
		[Address(RVA = "0xDB4A1C", Offset = "0xDB4A1C", VA = "0xDB4A1C")]
		public void GetAlreadyPurchasedListingIds([Optional] UnityEngine.Object requestingObject, [Optional] Action<bool> onFinishedCallback)
		{
		}

		[Token(Token = "0x6001723")]
		[Address(RVA = "0xDB4B94", Offset = "0xDB4B94", VA = "0xDB4B94")]
		public bool HasAlreadyObtainedMarketplaceBundle(Bundle marketplaceBundle)
		{
			return default(bool);
		}

		[Token(Token = "0x6001724")]
		[Address(RVA = "0xDB4D3C", Offset = "0xDB4D3C", VA = "0xDB4D3C")]
		public bool HaveAlreadyObtainedListing(Guid listingId)
		{
			return default(bool);
		}

		[Token(Token = "0x6001725")]
		[Address(RVA = "0xDB4DC8", Offset = "0xDB4DC8", VA = "0xDB4DC8")]
		public bool HaveAlreadyPurchasedItemId(Guid itemId)
		{
			return default(bool);
		}

		[Token(Token = "0x6001726")]
		[Address(RVA = "0xDB4EC8", Offset = "0xDB4EC8", VA = "0xDB4EC8")]
		public void SearchMarketplaceForString(UnityEngine.Object requestingObject, string searchString, Action<bool, List<Bundle>> onFinishedCallback, bool performImmediately = false)
		{
		}

		[Token(Token = "0x6001727")]
		[Address(RVA = "0xDB5014", Offset = "0xDB5014", VA = "0xDB5014")]
		private void PerformMarketplaceSearchQuery(UnityEngine.Object requestingObject, string searchString, Action<bool, List<Bundle>> onFinishedCallback)
		{
		}

		[Token(Token = "0x6001728")]
		[Address(RVA = "0xDB5148", Offset = "0xDB5148", VA = "0xDB5148")]
		public void GetTextureForImageURL(UnityEngine.Object requestingObject, string imageURL, Action<bool, Texture2D> onFinishedCallback)
		{
		}

		[Token(Token = "0x6001729")]
		[Address(RVA = "0xDB5328", Offset = "0xDB5328", VA = "0xDB5328")]
		public void PriceStringForListingId(UnityEngine.Object requestingObject, Guid listingId, Action<bool, string> onFinishedCallback)
		{
		}

		[Token(Token = "0x600172A")]
		[Address(RVA = "0xDB5620", Offset = "0xDB5620", VA = "0xDB5620")]
		public string ExistingPriceStringForListingId(Guid listingId)
		{
			return null;
		}

		[Token(Token = "0x600172B")]
		[Address(RVA = "0xDB57CC", Offset = "0xDB57CC", VA = "0xDB57CC")]
		public void PurchaseItemWithListingId(Bundle bundleToBuy, Guid listingId, Action<bool, string> onFinishedWithMessageCallback)
		{
		}

		[Token(Token = "0x600172C")]
		[Address(RVA = "0xDB5B0C", Offset = "0xDB5B0C", VA = "0xDB5B0C")]
		public bool BundleIsAFreeItem(Bundle bundle)
		{
			return default(bool);
		}

		[Token(Token = "0x600172D")]
		[Address(RVA = "0xDB5B64", Offset = "0xDB5B64", VA = "0xDB5B64")]
		public void PurchaseFreeItem(UnityEngine.Object requestingObject, Bundle bundle, Action<bool, string> onFinishedWithMessageCallback)
		{
		}

		[Token(Token = "0x600172E")]
		[Address(RVA = "0xDB5CC8", Offset = "0xDB5CC8", VA = "0xDB5CC8")]
		public List<Bundle> DetermineLinearHierarchyToItemIdOfElderBundle(Guid itemId, Bundle elderBundle)
		{
			return null;
		}

		[Token(Token = "0x600172F")]
		[Address(RVA = "0xDB62E0", Offset = "0xDB62E0", VA = "0xDB62E0")]
		public Bundle FindItemIdWithinBundleHierarchy(Guid itemId, Bundle elderBundle, bool errorIfNotFound = true)
		{
			return null;
		}

		[Token(Token = "0x6001730")]
		[Address(RVA = "0xDB65A0", Offset = "0xDB65A0", VA = "0xDB65A0")]
		public List<Guid> FindAllDeckIdsWithinBundle(Bundle bundle)
		{
			return null;
		}

		[Token(Token = "0x6001731")]
		[Address(RVA = "0xDB6630", Offset = "0xDB6630", VA = "0xDB6630")]
		private void RecurseBundleForDeckIds(Bundle bundle, List<Guid> guids)
		{
		}

		[Token(Token = "0x6001732")]
		[Address(RVA = "0xDB60C0", Offset = "0xDB60C0", VA = "0xDB60C0")]
		private void CreateFlattenedParentBundleInfos(List<MarketplaceBundleWithParentInfo> flattenedList, Bundle bundle, [Optional] MarketplaceBundleWithParentInfo parentInfo)
		{
		}

		[Token(Token = "0x6001733")]
		[Address(RVA = "0xDB6820", Offset = "0xDB6820", VA = "0xDB6820")]
		private void AddAllDecksWithinBundleToUserDecks(Bundle bundle)
		{
		}

		[Token(Token = "0x6001734")]
		private void PerformAPICommRequest<T>(UnityEngine.Object requestingObject, T commRequest, Action<bool, T> onFinishedCallback) where T : APIComm
		{
		}

		[Token(Token = "0x6001735")]
		[IteratorStateMachine(typeof(<co_PerformAPICommRequest>d__32<>))]
		private IEnumerator co_PerformAPICommRequest<T>(UnityEngine.Object requestingObject, T commRequest, Action<bool, T> onFinishedCallback) where T : APIComm
		{
			return null;
		}

		[Token(Token = "0x6001736")]
		[Address(RVA = "0xDB691C", Offset = "0xDB691C", VA = "0xDB691C")]
		public void PrintFullBundleHierarchy(Bundle bundle, int depth = 0)
		{
		}

		[Token(Token = "0x6001737")]
		[Address(RVA = "0xDB6B10", Offset = "0xDB6B10", VA = "0xDB6B10")]
		[ContextMenu("Generate Fake Data")]
		public void GenerateFakeData()
		{
		}

		[Token(Token = "0x6001738")]
		[Address(RVA = "0xDB7268", Offset = "0xDB7268", VA = "0xDB7268")]
		public StoreUIDataProvider()
		{
		}
	}
	[Token(Token = "0x2000479")]
	public class BaseExpandingViewController : BaseExpandingViewElement
	{
		[Token(Token = "0x40016AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Image backgroundImage;

		[Token(Token = "0x170002C9")]
		public ExpandingNavigationStackController navController
		{
			[Token(Token = "0x600175C")]
			[Address(RVA = "0xDB8F28", Offset = "0xDB8F28", VA = "0xDB8F28")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600175D")]
			[Address(RVA = "0xDB8F30", Offset = "0xDB8F30", VA = "0xDB8F30")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170002CA")]
		public LoadingIndicator loadingIndicator
		{
			[Token(Token = "0x600175E")]
			[Address(RVA = "0xDB8F38", Offset = "0xDB8F38", VA = "0xDB8F38")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600175F")]
			[Address(RVA = "0xDB8F40", Offset = "0xDB8F40", VA = "0xDB8F40")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6001760")]
		[Address(RVA = "0xDB8F48", Offset = "0xDB8F48", VA = "0xDB8F48", Slot = "6")]
		public virtual void DidInstantiateViewControllerFromPrefab(BaseExpandingViewController prefabViewController)
		{
		}

		[Token(Token = "0x6001761")]
		public T PushViewController<T>(T viewController, bool animated = true, bool reSortViewControllerPositions = true, [Optional] Vector3? worldStartPositionOverride) where T : BaseExpandingViewController
		{
			return null;
		}

		[Token(Token = "0x6001762")]
		[Address(RVA = "0xDB8F4C", Offset = "0xDB8F4C", VA = "0xDB8F4C")]
		public BaseExpandingViewController()
		{
		}
	}
	[Token(Token = "0x200047A")]
	public class ExpandingNavigationStackController : MonoBehaviour
	{
		[Token(Token = "0x200047E")]
		[CompilerGenerated]
		private sealed class <co_PerformCloseAnimation>d__28 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40016C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40016C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40016C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ExpandingNavigationStackController <>4__this;

			[Token(Token = "0x170002CC")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600177F")]
				[Address(RVA = "0xDBAA00", Offset = "0xDBAA00", VA = "0xDBAA00", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002CD")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001781")]
				[Address(RVA = "0xDBAA48", Offset = "0xDBAA48", VA = "0xDBAA48", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600177C")]
			[Address(RVA = "0xDBA5AC", Offset = "0xDBA5AC", VA = "0xDBA5AC")]
			[DebuggerHidden]
			public <co_PerformCloseAnimation>d__28(int <>1__state)
			{
			}

			[Token(Token = "0x600177D")]
			[Address(RVA = "0xDBA864", Offset = "0xDBA864", VA = "0xDBA864", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600177E")]
			[Address(RVA = "0xDBA868", Offset = "0xDBA868", VA = "0xDBA868", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001780")]
			[Address(RVA = "0xDBAA08", Offset = "0xDBAA08", VA = "0xDBAA08", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40016AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private List<BaseExpandingViewController> navStack;

		[Token(Token = "0x40016B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private LoadingIndicator loadingIndicatorPrefab;

		[Token(Token = "0x40016B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Button closeButton;

		[Token(Token = "0x40016B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private UnityUIBehaviour closeButtonUIBehaviour;

		[Token(Token = "0x40016B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private AudioSource audioAnimateIn;

		[Token(Token = "0x40016B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private AudioSource audioPushViewController;

		[Token(Token = "0x40016B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private AudioSource audioPopViewController;

		[Token(Token = "0x40016B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private AudioSource audioAnimateOut;

		[Token(Token = "0x40016B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private List<Color> backgroundColors;

		[Token(Token = "0x40016B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private ParticleSystem successParticleEffect;

		[Token(Token = "0x40016B9")]
		private const float kAnimationDuration = 0.3f;

		[Token(Token = "0x40016BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Action<BaseExpandingViewController> willPushViewControllerCallback;

		[Token(Token = "0x40016BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Action userTappedCloseCallback;

		[Token(Token = "0x170002CB")]
		public float animationDuration
		{
			[Token(Token = "0x6001763")]
			[Address(RVA = "0xDB8FE0", Offset = "0xDB8FE0", VA = "0xDB8FE0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6001764")]
		[Address(RVA = "0xDB8FEC", Offset = "0xDB8FEC", VA = "0xDB8FEC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001765")]
		[Address(RVA = "0xDB90BC", Offset = "0xDB90BC", VA = "0xDB90BC")]
		public BaseExpandingViewController CurrentViewController()
		{
			return null;
		}

		[Token(Token = "0x6001766")]
		public T PushViewController<T>(T viewController, bool animated = true, bool reSortViewControllerPositions = true, [Optional] Vector3? worldStartPositionOverride) where T : BaseExpandingViewController
		{
			return null;
		}

		[Token(Token = "0x6001767")]
		public T PushViewControllerFromViewController<T>(BaseExpandingViewController fromViewController, T viewController, bool animated = true, bool reSortViewControllerPositions = true, [Optional] Vector3? worldStartPositionOverride) where T : BaseExpandingViewController
		{
			return null;
		}

		[Token(Token = "0x6001768")]
		[Address(RVA = "0xDB9134", Offset = "0xDB9134", VA = "0xDB9134")]
		public BaseExpandingViewController PopViewController(bool animated = true, bool reSortViewControllerPositions = true, [Optional] Vector3? worldEndPositionOverride)
		{
			return null;
		}

		[Token(Token = "0x6001769")]
		[Address(RVA = "0xDB9CC4", Offset = "0xDB9CC4", VA = "0xDB9CC4")]
		public void PopViewControllerToRoot()
		{
		}

		[Token(Token = "0x600176A")]
		[Address(RVA = "0xDB9D40", Offset = "0xDB9D40", VA = "0xDB9D40")]
		public void PopViewControllersToViewController(BaseExpandingViewController viewController, bool reSortViewControllerPositions = true)
		{
		}

		[Token(Token = "0x600176B")]
		[Address(RVA = "0xDB9DF8", Offset = "0xDB9DF8", VA = "0xDB9DF8")]
		public void SetAllViewControllersInteractable(bool toInteractable)
		{
		}

		[Token(Token = "0x600176C")]
		[Address(RVA = "0xDB9F68", Offset = "0xDB9F68", VA = "0xDB9F68")]
		public void AnimateScaleInOfCurrentViewController(float duration = 0.5f)
		{
		}

		[Token(Token = "0x600176D")]
		[Address(RVA = "0xDB9594", Offset = "0xDB9594", VA = "0xDB9594")]
		public void ReSortViewControllerPositions(bool animated)
		{
		}

		[Token(Token = "0x600176E")]
		[Address(RVA = "0xDBA168", Offset = "0xDBA168", VA = "0xDBA168")]
		public void ShowLoadingIndicatorOnViewController(BaseExpandingViewController viewController, string loadingText = "Loading")
		{
		}

		[Token(Token = "0x600176F")]
		[Address(RVA = "0xDBA3A0", Offset = "0xDBA3A0", VA = "0xDBA3A0")]
		public void ShowSuccessParticles(RectTransform uiRectTransform)
		{
		}

		[Token(Token = "0x6001770")]
		[Address(RVA = "0xDBA4FC", Offset = "0xDBA4FC", VA = "0xDBA4FC")]
		public void UserTappedCloseButton(Button btn)
		{
		}

		[Token(Token = "0x6001771")]
		[Address(RVA = "0xDBA538", Offset = "0xDBA538", VA = "0xDBA538")]
		[IteratorStateMachine(typeof(<co_PerformCloseAnimation>d__28))]
		private IEnumerator co_PerformCloseAnimation()
		{
			return null;
		}

		[Token(Token = "0x6001772")]
		[Address(RVA = "0xDBA5D4", Offset = "0xDBA5D4", VA = "0xDBA5D4")]
		public ExpandingNavigationStackController()
		{
		}
	}
	[Token(Token = "0x200047F")]
	public class LoadingIndicator : UnityUIBehaviour
	{
		[Token(Token = "0x40016C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private TextMeshProUGUI mainLabel;

		[Token(Token = "0x40016C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Image background;

		[Token(Token = "0x40016C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Image librariumSeal;

		[Token(Token = "0x40016C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private ParticleSystem sealParticleSystem;

		[Token(Token = "0x40016C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float lastAlpha;

		[Token(Token = "0x40016C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private string lastText;

		[Token(Token = "0x40016C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool addEllipsis;

		[Token(Token = "0x6001782")]
		[Address(RVA = "0xDBAA50", Offset = "0xDBAA50", VA = "0xDBAA50")]
		private void Start()
		{
		}

		[Token(Token = "0x6001783")]
		[Address(RVA = "0xDBA2E4", Offset = "0xDBA2E4", VA = "0xDBA2E4")]
		public void SetText(string text, bool includeEllipsis = false)
		{
		}

		[Token(Token = "0x6001784")]
		[Address(RVA = "0xDBABF4", Offset = "0xDBABF4", VA = "0xDBABF4")]
		private void Update()
		{
		}

		[Token(Token = "0x6001785")]
		[Address(RVA = "0xDBAAD0", Offset = "0xDBAAD0", VA = "0xDBAAD0")]
		private void UpdateEllipsisText()
		{
		}

		[Token(Token = "0x6001786")]
		[Address(RVA = "0xDBAD24", Offset = "0xDBAD24", VA = "0xDBAD24")]
		public void SetErrorText(string errorText)
		{
		}

		[Token(Token = "0x6001787")]
		[Address(RVA = "0xDBAD38", Offset = "0xDBAD38", VA = "0xDBAD38")]
		public void SetFinishedLoadingText(string text, Color color)
		{
		}

		[Token(Token = "0x6001788")]
		[Address(RVA = "0xDBAE18", Offset = "0xDBAE18", VA = "0xDBAE18")]
		public void SetLongMessage(string text)
		{
		}

		[Token(Token = "0x6001789")]
		[Address(RVA = "0xDBA380", Offset = "0xDBA380", VA = "0xDBA380")]
		public void FadeAndScaleIn()
		{
		}

		[Token(Token = "0x600178A")]
		[Address(RVA = "0xDBAEB8", Offset = "0xDBAEB8", VA = "0xDBAEB8")]
		public void FadeAndScaleOut(bool andDisableGameObject = true)
		{
		}

		[Token(Token = "0x600178B")]
		[Address(RVA = "0xDBAFC8", Offset = "0xDBAFC8", VA = "0xDBAFC8")]
		public LoadingIndicator()
		{
		}
	}
	[Token(Token = "0x2000481")]
	public class StoreNavigationUIManager : BaseMonoBehaviour
	{
		[Token(Token = "0x2000483")]
		[CompilerGenerated]
		private sealed class <co_TestSearchStuff>d__25 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40016DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40016DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40016E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public List<Bundle> bundles;

			[Token(Token = "0x40016E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public StoreBundlesListViewController searchListVC;

			[Token(Token = "0x40016E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private List<Bundle> <mutableBundleList>5__2;

			[Token(Token = "0x170002CE")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60017AC")]
				[Address(RVA = "0xDBDFF8", Offset = "0xDBDFF8", VA = "0xDBDFF8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002CF")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60017AE")]
				[Address(RVA = "0xDBE040", Offset = "0xDBE040", VA = "0xDBE040", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60017A9")]
			[Address(RVA = "0xDBCF38", Offset = "0xDBCF38", VA = "0xDBCF38")]
			[DebuggerHidden]
			public <co_TestSearchStuff>d__25(int <>1__state)
			{
			}

			[Token(Token = "0x60017AA")]
			[Address(RVA = "0xDBDB00", Offset = "0xDBDB00", VA = "0xDBDB00", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60017AB")]
			[Address(RVA = "0xDBDB04", Offset = "0xDBDB04", VA = "0xDBDB04", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60017AD")]
			[Address(RVA = "0xDBE000", Offset = "0xDBE000", VA = "0xDBE000", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40016CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private ExpandingNavigationStackController navigationController;

		[Token(Token = "0x40016CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private StoreUIDataProvider dataProvider;

		[Token(Token = "0x40016CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private List<StoreUIWorldHighlightArea> worldHighlightAreas;

		[Token(Token = "0x40016CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private StoreUIWorldHighlightArea searchStoreWorldHighlightArea;

		[Token(Token = "0x40016D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Canvas uiCanvas;

		[Token(Token = "0x40016D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private StoreBundleItemViewController bundleItemViewController;

		[Token(Token = "0x40016D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private StoreBundlesListViewController bundleListViewController;

		[Token(Token = "0x40016D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private StoreItemAndContentsViewController itemAndContentsViewController;

		[Token(Token = "0x40016D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private UIKitPointer laserPointer;

		[Token(Token = "0x40016D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private UIKitPointer activeLaserPointer;

		[Token(Token = "0x40016D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private List<InputActionReference> inputDidSelectItemActions;

		[Token(Token = "0x40016D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private StoreUISearchController searchController;

		[Token(Token = "0x40016D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private bool enableDevQuickKeys;

		[Token(Token = "0x40016D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private StoreUIWorldHighlightArea lastHighlightedStoreArea;

		[Token(Token = "0x40016DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private bool userIsInStore;

		[Token(Token = "0x40016DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private int preloadAttempts;

		[Token(Token = "0x600178E")]
		[Address(RVA = "0xDBB014", Offset = "0xDBB014", VA = "0xDBB014")]
		private void Awake()
		{
		}

		[Token(Token = "0x600178F")]
		[Address(RVA = "0xDBB660", Offset = "0xDBB660", VA = "0xDBB660")]
		private void Start()
		{
		}

		[Token(Token = "0x6001790")]
		[Address(RVA = "0xDBBC9C", Offset = "0xDBBC9C", VA = "0xDBBC9C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001791")]
		[Address(RVA = "0xDBBDE8", Offset = "0xDBBDE8", VA = "0xDBBDE8")]
		private void Update()
		{
		}

		[Token(Token = "0x6001792")]
		[Address(RVA = "0xDBBC90", Offset = "0xDBBC90", VA = "0xDBBC90")]
		private void UserLoggedIn()
		{
		}

		[Token(Token = "0x6001793")]
		[Address(RVA = "0xDBC19C", Offset = "0xDBC19C", VA = "0xDBC19C")]
		private void PreloadData(float delay = 1f)
		{
		}

		[Token(Token = "0x6001794")]
		[Address(RVA = "0xDBC240", Offset = "0xDBC240", VA = "0xDBC240")]
		private void FinishedLoadingTopLevelListings(bool succeeded, List<Bundle> marketplaceBundles)
		{
		}

		[Token(Token = "0x6001795")]
		[Address(RVA = "0xDBC9AC", Offset = "0xDBC9AC", VA = "0xDBC9AC")]
		private void ShowBundleItemViewControllerForWorldHighlightArea(StoreUIWorldHighlightArea highlightArea)
		{
		}

		[Token(Token = "0x6001796")]
		[Address(RVA = "0xDBCB08", Offset = "0xDBCB08", VA = "0xDBCB08")]
		private void ShowSearchResultsUI()
		{
		}

		[Token(Token = "0x6001797")]
		[Address(RVA = "0xDBCEA8", Offset = "0xDBCEA8", VA = "0xDBCEA8")]
		[IteratorStateMachine(typeof(<co_TestSearchStuff>d__25))]
		private IEnumerator co_TestSearchStuff(StoreBundlesListViewController searchListVC, List<Bundle> bundles)
		{
			return null;
		}

		[Token(Token = "0x6001798")]
		[Address(RVA = "0xDBCF60", Offset = "0xDBCF60", VA = "0xDBCF60")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6001799")]
		[Address(RVA = "0xDBD1CC", Offset = "0xDBD1CC", VA = "0xDBD1CC")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x600179A")]
		[Address(RVA = "0xDBD0B8", Offset = "0xDBD0B8", VA = "0xDBD0B8")]
		private bool ColliderIsAPlayerControllerCollider(Collider other)
		{
			return default(bool);
		}

		[Token(Token = "0x600179B")]
		[Address(RVA = "0xDBD244", Offset = "0xDBD244", VA = "0xDBD244")]
		[ContextMenu("Create Laser Pointer")]
		public void CreateLaserPointer()
		{
		}

		[Token(Token = "0x600179C")]
		[Address(RVA = "0xDBD2DC", Offset = "0xDBD2DC", VA = "0xDBD2DC")]
		private void RemoveLaserPointer()
		{
		}

		[Token(Token = "0x600179D")]
		[Address(RVA = "0xDBD330", Offset = "0xDBD330", VA = "0xDBD330")]
		[ContextMenu("Force Call User Logged In")]
		public void ForceCallUserLoggedIn()
		{
		}

		[Token(Token = "0x600179E")]
		[Address(RVA = "0xDBD33C", Offset = "0xDBD33C", VA = "0xDBD33C")]
		public StoreNavigationUIManager()
		{
		}
	}
	[Token(Token = "0x2000484")]
	public class StoreUISearchController : BaseMonoBehaviour
	{
		[Token(Token = "0x2000486")]
		[CompilerGenerated]
		private sealed class <co_DoStaggeredRePushOfBundleHierarchy>d__20 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40016F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40016F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40016F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public StoreUISearchController <>4__this;

			[Token(Token = "0x40016F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public List<Bundle> linearHierarchy;

			[Token(Token = "0x40016F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private StoreItemAndContentsViewController <currentVC>5__2;

			[Token(Token = "0x40016F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int <i>5__3;

			[Token(Token = "0x170002D0")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60017C2")]
				[Address(RVA = "0xDBEF84", Offset = "0xDBEF84", VA = "0xDBEF84", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002D1")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60017C4")]
				[Address(RVA = "0xDBEFCC", Offset = "0xDBEFCC", VA = "0xDBEFCC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60017BF")]
			[Address(RVA = "0xDBE6C4", Offset = "0xDBE6C4", VA = "0xDBE6C4")]
			[DebuggerHidden]
			public <co_DoStaggeredRePushOfBundleHierarchy>d__20(int <>1__state)
			{
			}

			[Token(Token = "0x60017C0")]
			[Address(RVA = "0xDBEB48", Offset = "0xDBEB48", VA = "0xDBEB48", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60017C1")]
			[Address(RVA = "0xDBEB4C", Offset = "0xDBEB4C", VA = "0xDBEB4C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60017C3")]
			[Address(RVA = "0xDBEF8C", Offset = "0xDBEF8C", VA = "0xDBEF8C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40016E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private StoreItemAndContentsViewController itemAndContentsViewController;

		[Token(Token = "0x40016E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private TextMeshProUGUI upperSearchBarLabel;

		[Token(Token = "0x40016E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private UnityUIBehaviour upperSearchBarHolder;

		[Token(Token = "0x40016E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private StoreUIDataProvider dataProvider;

		[Token(Token = "0x40016E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private StoreBundlesListViewController listViewController;

		[Token(Token = "0x40016E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private GameObject keyboardHolder;

		[Token(Token = "0x40016E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private MobileKeyboardManager keyboardManager;

		[Token(Token = "0x40016EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public TMP_InputField searchInputField;

		[Token(Token = "0x40016EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public IMEXRManager imeManager;

		[Token(Token = "0x40016EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private string lastSearchQuery;

		[Token(Token = "0x40016ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float? keyboardStartScale;

		[Token(Token = "0x40016EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private ExpandingNavigationStackController navController;

		[Token(Token = "0x60017AF")]
		[Address(RVA = "0xDBE048", Offset = "0xDBE048", VA = "0xDBE048")]
		private void Start()
		{
		}

		[Token(Token = "0x60017B0")]
		[Address(RVA = "0xDBE04C", Offset = "0xDBE04C", VA = "0xDBE04C")]
		private void Update()
		{
		}

		[Token(Token = "0x60017B1")]
		[Address(RVA = "0xDBCC34", Offset = "0xDBCC34", VA = "0xDBCC34")]
		public void SetupWithListViewController(StoreBundlesListViewController searchListViewController)
		{
		}

		[Token(Token = "0x60017B2")]
		[Address(RVA = "0xDBD7A8", Offset = "0xDBD7A8", VA = "0xDBD7A8")]
		public void AnimateOut()
		{
		}

		[Token(Token = "0x60017B3")]
		[Address(RVA = "0xDBE388", Offset = "0xDBE388", VA = "0xDBE388")]
		public void UserEditedInputField(TMP_InputField inputField)
		{
		}

		[Token(Token = "0x60017B4")]
		[Address(RVA = "0xDBE10C", Offset = "0xDBE10C", VA = "0xDBE10C")]
		private void UserChangedSearchFieldText(string newText)
		{
		}

		[Token(Token = "0x60017B5")]
		[Address(RVA = "0xDBE40C", Offset = "0xDBE40C", VA = "0xDBE40C")]
		private void PushItemAndContentsFullBundleHierarchyViewControllers(ExpandingNavigationListItemView listItem)
		{
		}

		[Token(Token = "0x60017B6")]
		[Address(RVA = "0xDBE558", Offset = "0xDBE558", VA = "0xDBE558")]
		private void ShowUnableToLoadDetailsError()
		{
		}

		[Token(Token = "0x60017B7")]
		[Address(RVA = "0xDBE634", Offset = "0xDBE634", VA = "0xDBE634")]
		[IteratorStateMachine(typeof(<co_DoStaggeredRePushOfBundleHierarchy>d__20))]
		private IEnumerator co_DoStaggeredRePushOfBundleHierarchy(List<Bundle> linearHierarchy)
		{
			return null;
		}

		[Token(Token = "0x60017B8")]
		[Address(RVA = "0xDBE6EC", Offset = "0xDBE6EC", VA = "0xDBE6EC")]
		public StoreUISearchController()
		{
		}
	}
	[Token(Token = "0x2000487")]
	public class ExpandingNavigationListController : BaseExpandingViewElement
	{
		[Token(Token = "0x40016F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private RectTransform scrollingRectTransform;

		[Token(Token = "0x40016F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public List<ExpandingNavigationListItemView> addedListViews;

		[Token(Token = "0x40016F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float itemsTopYPosition;

		[Token(Token = "0x40016FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float itemsSpacing;

		[Token(Token = "0x40016FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float animationDuration;

		[Token(Token = "0x4001700")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public CanvasGroup scrollUpIndicator;

		[Token(Token = "0x4001701")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public CanvasGroup scrollDownIndicator;

		[Token(Token = "0x4001702")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Func<ExpandingNavigationListController, bool> userTappedScrollUpShouldAllowCallback;

		[Token(Token = "0x4001703")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Func<ExpandingNavigationListController, bool> userTappedScrollDownShouldAllowCallback;

		[Token(Token = "0x170002D2")]
		public int itemsMaxVisible
		{
			[Token(Token = "0x60017C5")]
			[Address(RVA = "0xDBEFD4", Offset = "0xDBEFD4", VA = "0xDBEFD4")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60017C6")]
			[Address(RVA = "0xDBEFDC", Offset = "0xDBEFDC", VA = "0xDBEFDC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170002D3")]
		public bool allowScrollUpToBeDisabled
		{
			[Token(Token = "0x60017C7")]
			[Address(RVA = "0xDBEFE4", Offset = "0xDBEFE4", VA = "0xDBEFE4")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60017C8")]
			[Address(RVA = "0xDBEFEC", Offset = "0xDBEFEC", VA = "0xDBEFEC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170002D4")]
		public bool allowScrollDownToBeDisabled
		{
			[Token(Token = "0x60017C9")]
			[Address(RVA = "0xDBEFF8", Offset = "0xDBEFF8", VA = "0xDBEFF8")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60017CA")]
			[Address(RVA = "0xDBF000", Offset = "0xDBF000", VA = "0xDBF000")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170002D5")]
		public int currentScrollItemOffset
		{
			[Token(Token = "0x60017CB")]
			[Address(RVA = "0xDBF00C", Offset = "0xDBF00C", VA = "0xDBF00C")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60017CC")]
			[Address(RVA = "0xDBF014", Offset = "0xDBF014", VA = "0xDBF014")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60017CD")]
		[Address(RVA = "0xDBF01C", Offset = "0xDBF01C", VA = "0xDBF01C")]
		private void Start()
		{
		}

		[Token(Token = "0x60017CE")]
		[Address(RVA = "0xDBF14C", Offset = "0xDBF14C", VA = "0xDBF14C")]
		public void AddListView(ExpandingNavigationListItemView listView)
		{
		}

		[Token(Token = "0x60017CF")]
		[Address(RVA = "0xDBF3E8", Offset = "0xDBF3E8", VA = "0xDBF3E8")]
		public void RemoveListItemView(ExpandingNavigationListItemView listItemView, bool animated = true, bool resortItemPositions = true)
		{
		}

		[Token(Token = "0x60017D0")]
		[Address(RVA = "0xDBF720", Offset = "0xDBF720", VA = "0xDBF720")]
		public void ReSortItemPositions(bool animated = true)
		{
		}

		[Token(Token = "0x60017D1")]
		[Address(RVA = "0xDBFE54", Offset = "0xDBFE54", VA = "0xDBFE54")]
		public ExpandingNavigationListItemView ListItemViewForBundle(Bundle bundle)
		{
			return null;
		}

		[Token(Token = "0x60017D2")]
		[Address(RVA = "0xDBFFBC", Offset = "0xDBFFBC", VA = "0xDBFFBC")]
		public bool ContainsListItemForBundle(Bundle bundle)
		{
			return default(bool);
		}

		[Token(Token = "0x60017D3")]
		[Address(RVA = "0xDBF3D4", Offset = "0xDBF3D4", VA = "0xDBF3D4")]
		private Vector2 ItemPositionForIndex(int index)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60017D4")]
		[Address(RVA = "0xDC0038", Offset = "0xDC0038", VA = "0xDC0038")]
		public void ScrollUpByCount(int count, bool animated = true, bool playAudioEffect = true)
		{
		}

		[Token(Token = "0x60017D5")]
		[Address(RVA = "0xDC0104", Offset = "0xDC0104", VA = "0xDC0104")]
		private void UpdateScrollPositionBasedOnCurrentItemOffset(bool animated)
		{
		}

		[Token(Token = "0x60017D6")]
		[Address(RVA = "0xDC01DC", Offset = "0xDC01DC", VA = "0xDC01DC")]
		public void ScrollToTop(bool animated)
		{
		}

		[Token(Token = "0x60017D7")]
		[Address(RVA = "0xDC01F4", Offset = "0xDC01F4", VA = "0xDC01F4")]
		public void SetTotalMaxItemVisible(int newMaxVisible)
		{
		}

		[Token(Token = "0x60017D8")]
		[Address(RVA = "0xDBF020", Offset = "0xDBF020", VA = "0xDBF020")]
		private void UpdateScrollIndicators()
		{
		}

		[Token(Token = "0x60017D9")]
		[Address(RVA = "0xDBF950", Offset = "0xDBF950", VA = "0xDBF950")]
		private void UpdateAllItemVisibility()
		{
		}

		[Token(Token = "0x60017DA")]
		[Address(RVA = "0xDC0274", Offset = "0xDC0274", VA = "0xDC0274", Slot = "5")]
		public override void SetVisibilityPercentage(float percentage)
		{
		}

		[Token(Token = "0x60017DB")]
		[Address(RVA = "0xDC0A8C", Offset = "0xDC0A8C", VA = "0xDC0A8C")]
		public void PlayScrollAudioEffect(bool forScrollUp)
		{
		}

		[Token(Token = "0x60017DC")]
		[Address(RVA = "0xDC0B04", Offset = "0xDC0B04", VA = "0xDC0B04")]
		public void UserTappedScrollUpButton(Button btn)
		{
		}

		[Token(Token = "0x60017DD")]
		[Address(RVA = "0xDC0B4C", Offset = "0xDC0B4C", VA = "0xDC0B4C")]
		public void UserTappedScrollDownButton(Button btn)
		{
		}

		[Token(Token = "0x60017DE")]
		[Address(RVA = "0xDC0B94", Offset = "0xDC0B94", VA = "0xDC0B94")]
		public ExpandingNavigationListController()
		{
		}
	}
	[Token(Token = "0x200048A")]
	public class ExpandingNavigationListItemView : BaseExpandingViewElement
	{
		[Token(Token = "0x4001706")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private Button button;

		[Token(Token = "0x4001707")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public TextMeshProUGUI titleLabel;

		[Token(Token = "0x4001708")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public UnityUIBehaviour backgroundSelectedImage;

		[Token(Token = "0x4001709")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public RawImage backgroundSelectedArrow;

		[Token(Token = "0x400170A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Action<ExpandingNavigationListItemView> userTappedButtonCallback;

		[Token(Token = "0x170002D6")]
		public Bundle marketplaceBundleInfo
		{
			[Token(Token = "0x60017E4")]
			[Address(RVA = "0xDC0D0C", Offset = "0xDC0D0C", VA = "0xDC0D0C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60017E5")]
			[Address(RVA = "0xDC0D14", Offset = "0xDC0D14", VA = "0xDC0D14")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x60017E6")]
		[Address(RVA = "0xDC0D1C", Offset = "0xDC0D1C", VA = "0xDC0D1C")]
		public void UserTappedItem(ExpandingNavigationListItemView listItem)
		{
		}

		[Token(Token = "0x60017E7")]
		[Address(RVA = "0xDC0D3C", Offset = "0xDC0D3C", VA = "0xDC0D3C")]
		public ExpandingNavigationListItemView()
		{
		}
	}
	[Token(Token = "0x200048B")]
	public class BaseExpandingViewElement : UnityUIBehaviour
	{
		[Token(Token = "0x400170C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<Transform> nonUGUITransformToScaleIn;

		[Token(Token = "0x400170E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<Vector3> initialNonUGUITransformScales;

		[Token(Token = "0x400170F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float currentVisibilityPercentage;

		[Token(Token = "0x170002D7")]
		protected virtual List<BaseExpandingViewElement> subViewElements
		{
			[Token(Token = "0x60017E8")]
			[Address(RVA = "0xDC0D40", Offset = "0xDC0D40", VA = "0xDC0D40", Slot = "4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60017E9")]
		[Address(RVA = "0xDC0464", Offset = "0xDC0464", VA = "0xDC0464", Slot = "5")]
		public virtual void SetVisibilityPercentage(float percentage)
		{
		}

		[Token(Token = "0x60017EA")]
		[Address(RVA = "0xDBF5B4", Offset = "0xDBF5B4", VA = "0xDBF5B4")]
		public void AnimateVisibilityToPercentage(float percentage, float duration, [Optional] Action onFinishedCallback)
		{
		}

		[Token(Token = "0x60017EB")]
		[Address(RVA = "0xDB8F50", Offset = "0xDB8F50", VA = "0xDB8F50")]
		public BaseExpandingViewElement()
		{
		}
	}
	[Token(Token = "0x200048D")]
	public class BundleListItemView : ExpandingNavigationListItemView
	{
		[Token(Token = "0x4001712")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public StorePriceGemView priceGem;

		[Token(Token = "0x4001713")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public TextMeshProUGUI badgeCountLabel;

		[Token(Token = "0x60017EF")]
		[Address(RVA = "0xDC0D8C", Offset = "0xDC0D8C", VA = "0xDC0D8C")]
		public BundleListItemView()
		{
		}
	}
	[Token(Token = "0x200048E")]
	public class DeckListItemView : ExpandingNavigationListItemView
	{
		[Token(Token = "0x4001714")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public StorePriceGemView priceGem;

		[Token(Token = "0x4001715")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public TextMeshPro deckLabel;

		[Token(Token = "0x4001716")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public TextMeshProUGUI cardCountLabel;

		[Token(Token = "0x60017F0")]
		[Address(RVA = "0xDC0D90", Offset = "0xDC0D90", VA = "0xDC0D90")]
		public DeckListItemView()
		{
		}
	}
	[Token(Token = "0x200048F")]
	public class StorePriceGemView : BaseExpandingViewElement
	{
		[Token(Token = "0x4001717")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public TextMeshProUGUI priceLabel;

		[Token(Token = "0x4001718")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public MeshRenderer gemRenderer;

		[Token(Token = "0x4001719")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Button button;

		[Token(Token = "0x400171A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Action<StorePriceGemView> userTappedButtonCallback;

		[Token(Token = "0x170002D8")]
		public bool hasBeenPurchased
		{
			[Token(Token = "0x60017F1")]
			[Address(RVA = "0xDC0D94", Offset = "0xDC0D94", VA = "0xDC0D94")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60017F2")]
			[Address(RVA = "0xDC0D9C", Offset = "0xDC0D9C", VA = "0xDC0D9C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60017F3")]
		[Address(RVA = "0xDC0DA8", Offset = "0xDC0DA8", VA = "0xDC0DA8")]
		public void UserTappedItem(StorePriceGemView item)
		{
		}

		[Token(Token = "0x60017F4")]
		[Address(RVA = "0xDC0DC8", Offset = "0xDC0DC8", VA = "0xDC0DC8")]
		public void MarkAsPurchased()
		{
		}

		[Token(Token = "0x60017F5")]
		[Address(RVA = "0xDC0E74", Offset = "0xDC0E74", VA = "0xDC0E74")]
		public StorePriceGemView()
		{
		}
	}
	[Token(Token = "0x2000490")]
	public class StoreBaseViewController : BaseExpandingViewController
	{
		[Token(Token = "0x2000494")]
		[CompilerGenerated]
		private sealed class <co_WaitingForPriceStringAnimation>d__9 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001728")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001729")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400172A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public StorePriceGemView priceGemView;

			[Token(Token = "0x400172B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public StoreBaseViewController <>4__this;

			[Token(Token = "0x400172C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private int <count>5__2;

			[Token(Token = "0x170002DA")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600180A")]
				[Address(RVA = "0xDC1D78", Offset = "0xDC1D78", VA = "0xDC1D78", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002DB")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600180C")]
				[Address(RVA = "0xDC1DC0", Offset = "0xDC1DC0", VA = "0xDC1DC0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001807")]
			[Address(RVA = "0xDC18A0", Offset = "0xDC18A0", VA = "0xDC18A0")]
			[DebuggerHidden]
			public <co_WaitingForPriceStringAnimation>d__9(int <>1__state)
			{
			}

			[Token(Token = "0x6001808")]
			[Address(RVA = "0xDC1BC4", Offset = "0xDC1BC4", VA = "0xDC1BC4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001809")]
			[Address(RVA = "0xDC1BC8", Offset = "0xDC1BC8", VA = "0xDC1BC8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600180B")]
			[Address(RVA = "0xDC1D80", Offset = "0xDC1D80", VA = "0xDC1D80", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400171D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool waitingForPriceString;

		[Token(Token = "0x170002D9")]
		public StoreUIDataProvider dataProvider
		{
			[Token(Token = "0x60017F6")]
			[Address(RVA = "0xDC0E78", Offset = "0xDC0E78", VA = "0xDC0E78")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60017F7")]
			[Address(RVA = "0xDC0E80", Offset = "0xDC0E80", VA = "0xDC0E80")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x60017F8")]
		[Address(RVA = "0xDC0E88", Offset = "0xDC0E88", VA = "0xDC0E88")]
		public void SetupPriceGemForListingId(StorePriceGemView priceGemView, Bundle bundle, ListingType listingType)
		{
		}

		[Token(Token = "0x60017F9")]
		[Address(RVA = "0xDC0F20", Offset = "0xDC0F20", VA = "0xDC0F20")]
		private void SetupPriceGemForFreeItem(StorePriceGemView priceGemView, Bundle bundle, ListingType listingType)
		{
		}

		[Token(Token = "0x60017FA")]
		[Address(RVA = "0xDC1110", Offset = "0xDC1110", VA = "0xDC1110")]
		private void SetupPriceGemForIAPListingId(StorePriceGemView priceGemView, Bundle bundle, ListingType listingType)
		{
		}

		[Token(Token = "0x60017FB")]
		[Address(RVA = "0xDC16A0", Offset = "0xDC16A0", VA = "0xDC16A0")]
		private void HandlePurchaseResponse(StorePriceGemView priceGemView, bool didSucceed, string message, bool isFreeItem)
		{
		}

		[Token(Token = "0x60017FC")]
		[Address(RVA = "0xDC1610", Offset = "0xDC1610", VA = "0xDC1610")]
		[IteratorStateMachine(typeof(<co_WaitingForPriceStringAnimation>d__9))]
		private IEnumerator co_WaitingForPriceStringAnimation(StorePriceGemView priceGemView)
		{
			return null;
		}

		[Token(Token = "0x60017FD")]
		[Address(RVA = "0xDC18C8", Offset = "0xDC18C8", VA = "0xDC18C8")]
		public StoreBaseViewController()
		{
		}
	}
	[Token(Token = "0x2000495")]
	public class StoreBundleItemViewController : StoreBaseViewController
	{
		[Token(Token = "0x400172D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private StoreBundlesListViewController bundleListViewController;

		[Token(Token = "0x400172E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private TextMeshProUGUI titleLabel;

		[Token(Token = "0x400172F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private StorePriceGemView priceGemView;

		[Token(Token = "0x4001730")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private RawImage logoImage;

		[Token(Token = "0x4001731")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		private TextMeshProUGUI logoRightSideLabel;

		[Token(Token = "0x4001732")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		private TextMeshProUGUI mainDescriptionLabel;

		[Token(Token = "0x4001733")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		private UnityUIBehaviour starRatingHolder;

		[Token(Token = "0x4001734")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		private RawImage arrowImage;

		[Token(Token = "0x4001735")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Bundle bundleItemInfo;

		[Token(Token = "0x600180D")]
		[Address(RVA = "0xDC1DC8", Offset = "0xDC1DC8", VA = "0xDC1DC8")]
		private void Awake()
		{
		}

		[Token(Token = "0x600180E")]
		[Address(RVA = "0xDC1EA0", Offset = "0xDC1EA0", VA = "0xDC1EA0")]
		public void SetupForBundle(Bundle bundle)
		{
		}

		[Token(Token = "0x600180F")]
		[Address(RVA = "0xDC1FC8", Offset = "0xDC1FC8", VA = "0xDC1FC8")]
		public void ShowBundleListView()
		{
		}

		[Token(Token = "0x6001810")]
		[Address(RVA = "0xDC2188", Offset = "0xDC2188", VA = "0xDC2188")]
		public StoreBundleItemViewController()
		{
		}
	}
	[Token(Token = "0x2000496")]
	public class StoreBundlesListViewController : StoreBaseViewController
	{
		[Token(Token = "0x4001736")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected StoreBundlesListViewController itemsListViewControllerPrefab;

		[Token(Token = "0x4001737")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		protected BundleListItemView bundleListItemPrefab;

		[Token(Token = "0x4001738")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		protected DeckListItemView deckListItemPrefab;

		[Token(Token = "0x4001739")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		protected TextMeshProUGUI titleLabel;

		[Token(Token = "0x400173A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool titleTextHasBeenExplicatelySet;

		[Token(Token = "0x400173B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		protected ExpandingNavigationListController listController;

		[Token(Token = "0x400173C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected ExpandingNavigationListItemView lastTappedBundleListItem;

		[Token(Token = "0x400173D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		protected Bundle mainBundle;

		[Token(Token = "0x400173E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public Action<ExpandingNavigationListItemView> userTappedOnListItemActionOverride;

		[Token(Token = "0x170002DC")]
		protected virtual bool showMessageIfNoChildBundlesFound
		{
			[Token(Token = "0x6001812")]
			[Address(RVA = "0xDC2400", Offset = "0xDC2400", VA = "0xDC2400", Slot = "7")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001813")]
		[Address(RVA = "0xDC2408", Offset = "0xDC2408", VA = "0xDC2408", Slot = "8")]
		public virtual void SetupForMarketplaceItem(Bundle bundle)
		{
		}

		[Token(Token = "0x6001814")]
		[Address(RVA = "0xDC2558", Offset = "0xDC2558", VA = "0xDC2558")]
		public void ResetTitleToGenericDescription()
		{
		}

		[Token(Token = "0x6001815")]
		[Address(RVA = "0xDBE2F8", Offset = "0xDBE2F8", VA = "0xDBE2F8")]
		public void SetTitleText(string newTitle)
		{
		}

		[Token(Token = "0x6001816")]
		[Address(RVA = "0xDC25F0", Offset = "0xDC25F0", VA = "0xDC25F0")]
		private void CreateListItemsForChildrenInBundle(Bundle bundle)
		{
		}

		[Token(Token = "0x6001817")]
		[Address(RVA = "0xDC2740", Offset = "0xDC2740", VA = "0xDC2740")]
		private void AddItemToListForBundle(Bundle bundle, bool animated = false)
		{
		}

		[Token(Token = "0x6001818")]
		[Address(RVA = "0xDBEDCC", Offset = "0xDBEDCC", VA = "0xDBEDCC")]
		public void SetListItemForBundleAsSelected(Bundle bundle, bool animated = true)
		{
		}

		[Token(Token = "0x6001819")]
		[Address(RVA = "0xDBE3A0", Offset = "0xDBE3A0", VA = "0xDBE3A0")]
		public void SetListControllerToInteractable(bool toInteractable)
		{
		}

		[Token(Token = "0x600181A")]
		[Address(RVA = "0xDBDDB0", Offset = "0xDBDDB0", VA = "0xDBDDB0")]
		public void UpdateItemsInListToBundles(List<Bundle> bundles)
		{
		}

		[Token(Token = "0x600181B")]
		[Address(RVA = "0xDC2B24", Offset = "0xDC2B24", VA = "0xDC2B24")]
		private void UserTappedOnBundleListItem(ExpandingNavigationListItemView listItem)
		{
		}

		[Token(Token = "0x600181C")]
		[Address(RVA = "0xDC2E88", Offset = "0xDC2E88", VA = "0xDC2E88", Slot = "9")]
		public virtual void SetListItemAsActiveSelected(ExpandingNavigationListItemView listItem, bool animated = true)
		{
		}

		[Token(Token = "0x600181D")]
		[Address(RVA = "0xDC2C8C", Offset = "0xDC2C8C", VA = "0xDC2C8C")]
		private void PushListViewController(ExpandingNavigationListItemView listItem)
		{
		}

		[Token(Token = "0x600181E")]
		[Address(RVA = "0xDC2FB8", Offset = "0xDC2FB8", VA = "0xDC2FB8", Slot = "5")]
		public override void SetVisibilityPercentage(float percentage)
		{
		}

		[Token(Token = "0x600181F")]
		[Address(RVA = "0xDC2FF8", Offset = "0xDC2FF8", VA = "0xDC2FF8", Slot = "6")]
		public override void DidInstantiateViewControllerFromPrefab(BaseExpandingViewController prefabViewController)
		{
		}

		[Token(Token = "0x6001820")]
		[Address(RVA = "0xDC30A8", Offset = "0xDC30A8", VA = "0xDC30A8")]
		public StoreBundlesListViewController()
		{
		}
	}
	[Token(Token = "0x2000497")]
	public class StoreItemAndContentsViewController : StoreBundlesListViewController
	{
		[Token(Token = "0x400173F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		private RawImage logoImage;

		[Token(Token = "0x4001740")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		private TextMeshProUGUI itemTitleLabel;

		[Token(Token = "0x4001741")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		private TextMeshProUGUI itemDescription;

		[Token(Token = "0x4001742")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		private StorePriceGemView subscriptionPriceGem;

		[Token(Token = "0x4001743")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		private StorePriceGemView purchasePriceGem;

		[Token(Token = "0x4001744")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[SerializeField]
		private TextMeshProUGUI subscriptionBlurb;

		[Token(Token = "0x4001745")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[SerializeField]
		private TextMeshProUGUI contentsTitle;

		[Token(Token = "0x4001746")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[SerializeField]
		private Transform purchasePriceGemHolder;

		[Token(Token = "0x4001747")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[SerializeField]
		private Transform subscriptionPriceGemHolder;

		[Token(Token = "0x4001748")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[SerializeField]
		private UnityUIBehaviour upperSectionHolder;

		[Token(Token = "0x4001749")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private float? upperSectionDefaultYPos;

		[Token(Token = "0x400174A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private bool isNoLogoLayout;

		[Token(Token = "0x400174B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x111")]
		private bool enableSubscriptionOption;

		[Token(Token = "0x170002DD")]
		private int minimumListVisibleCount
		{
			[Token(Token = "0x6001822")]
			[Address(RVA = "0xDC31F8", Offset = "0xDC31F8", VA = "0xDC31F8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170002DE")]
		protected override bool showMessageIfNoChildBundlesFound
		{
			[Token(Token = "0x6001823")]
			[Address(RVA = "0xDC320C", Offset = "0xDC320C", VA = "0xDC320C", Slot = "7")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001824")]
		[Address(RVA = "0xDC3214", Offset = "0xDC3214", VA = "0xDC3214", Slot = "8")]
		public override void SetupForMarketplaceItem(Bundle bundle)
		{
		}

		[Token(Token = "0x6001825")]
		[Address(RVA = "0xDC353C", Offset = "0xDC353C", VA = "0xDC353C")]
		private void SetupForNoLogoLayout()
		{
		}

		[Token(Token = "0x6001826")]
		[Address(RVA = "0xDC3AD4", Offset = "0xDC3AD4", VA = "0xDC3AD4")]
		private bool UserTappedScrollDown(ExpandingNavigationListController list)
		{
			return default(bool);
		}

		[Token(Token = "0x6001827")]
		[Address(RVA = "0xDC3ADC", Offset = "0xDC3ADC", VA = "0xDC3ADC")]
		private bool ExpandListIfMinimized(bool animated)
		{
			return default(bool);
		}

		[Token(Token = "0x6001828")]
		[Address(RVA = "0xDC3FF4", Offset = "0xDC3FF4", VA = "0xDC3FF4")]
		private bool UserTappedScrollUp(ExpandingNavigationListController list)
		{
			return default(bool);
		}

		[Token(Token = "0x6001829")]
		[Address(RVA = "0xDC3624", Offset = "0xDC3624", VA = "0xDC3624")]
		private void SetupExpandingListForLowerSingleItem(bool animated)
		{
		}

		[Token(Token = "0x600182A")]
		[Address(RVA = "0xDC4074", Offset = "0xDC4074", VA = "0xDC4074", Slot = "9")]
		public override void SetListItemAsActiveSelected(ExpandingNavigationListItemView listItem, bool animated = true)
		{
		}

		[Token(Token = "0x600182B")]
		[Address(RVA = "0xDC3F64", Offset = "0xDC3F64", VA = "0xDC3F64")]
		private void StoreDefaultValues()
		{
		}

		[Token(Token = "0x600182C")]
		[Address(RVA = "0xDC4170", Offset = "0xDC4170", VA = "0xDC4170")]
		public StoreItemAndContentsViewController()
		{
		}
	}
	[Token(Token = "0x200049B")]
	public class StoreUIWorldHighlightArea : MonoBehaviour
	{
		[Token(Token = "0x4001752")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[Range(0f, 1f)]
		private float maxHighlighAreaAlpha;

		[Token(Token = "0x4001753")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private List<MeshRenderer> areaHighlightRenderers;

		[Token(Token = "0x4001754")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private ParticleSystem areaHighlightParticles;

		[Token(Token = "0x4001755")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private AudioSource highlightAudioSource;

		[Token(Token = "0x4001756")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Transform highlightRotationTransform;

		[Token(Token = "0x4001757")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Pose? highlightRotationTransformDefaultValue;

		[Token(Token = "0x4001758")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float perSecondHighlightIncrease;

		[Token(Token = "0x4001759")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float highlightPercentage;

		[Token(Token = "0x400175A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int lastDidHighlightFrame;

		[Token(Token = "0x170002DF")]
		public Bundle bundleItemInfo
		{
			[Token(Token = "0x6001836")]
			[Address(RVA = "0xDC445C", Offset = "0xDC445C", VA = "0xDC445C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001837")]
			[Address(RVA = "0xDC4464", Offset = "0xDC4464", VA = "0xDC4464")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170002E0")]
		public StoreAreaAlcove storeAreaReferences
		{
			[Token(Token = "0x6001838")]
			[Address(RVA = "0xDC446C", Offset = "0xDC446C", VA = "0xDC446C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001839")]
			[Address(RVA = "0xDC4474", Offset = "0xDC4474", VA = "0xDC4474")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x600183A")]
		[Address(RVA = "0xDBC560", Offset = "0xDBC560", VA = "0xDBC560")]
		public void SetupForBundle(Bundle marketplaceBundle, StoreUIDataProvider storeUIDataProvider)
		{
		}

		[Token(Token = "0x600183B")]
		[Address(RVA = "0xDBB474", Offset = "0xDBB474", VA = "0xDBB474")]
		public void SetupForNotCurrentlyAvailable()
		{
		}

		[Token(Token = "0x600183C")]
		[Address(RVA = "0xDBC14C", Offset = "0xDBC14C", VA = "0xDBC14C")]
		public void BeginHighlighting()
		{
		}

		[Token(Token = "0x600183D")]
		[Address(RVA = "0xDC447C", Offset = "0xDC447C", VA = "0xDC447C")]
		private void Update()
		{
		}

		[Token(Token = "0x600183E")]
		[Address(RVA = "0xDBD494", Offset = "0xDBD494", VA = "0xDBD494")]
		public void UserDidTapHighlightArea()
		{
		}

		[Token(Token = "0x600183F")]
		[Address(RVA = "0xDC4A74", Offset = "0xDC4A74", VA = "0xDC4A74")]
		public StoreUIWorldHighlightArea()
		{
		}
	}
}
namespace Librarium.FX
{
	[Token(Token = "0x200049C")]
	public class DeckDropEffect : DropObjectEffect
	{
		[Token(Token = "0x400175D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public GameObject dropTail;

		[Token(Token = "0x6001841")]
		[Address(RVA = "0xDC4C6C", Offset = "0xDC4C6C", VA = "0xDC4C6C", Slot = "4")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6001842")]
		[Address(RVA = "0xDC4DDC", Offset = "0xDC4DDC", VA = "0xDC4DDC", Slot = "7")]
		protected override void RespawnInOriginalSpot()
		{
		}

		[Token(Token = "0x6001843")]
		[Address(RVA = "0xDC4E08", Offset = "0xDC4E08", VA = "0xDC4E08")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001844")]
		[Address(RVA = "0xDC4E64", Offset = "0xDC4E64", VA = "0xDC4E64")]
		public DeckDropEffect()
		{
		}
	}
	[Token(Token = "0x200049D")]
	[RequireComponent(typeof(Grabbable))]
	[RequireComponent(typeof(Rigidbody))]
	[RequireComponent(typeof(ManagedProp))]
	public class PropDropEffect : DropObjectEffect
	{
		[Token(Token = "0x200049E")]
		[CompilerGenerated]
		private sealed class <DoDropEffect>d__7 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001762")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001763")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001764")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PropDropEffect <>4__this;

			[Token(Token = "0x4001765")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float delay;

			[Token(Token = "0x170002E1")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001851")]
				[Address(RVA = "0xDC5608", Offset = "0xDC5608", VA = "0xDC5608", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002E2")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001853")]
				[Address(RVA = "0xDC5650", Offset = "0xDC5650", VA = "0xDC5650", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600184E")]
			[Address(RVA = "0xDC5314", Offset = "0xDC5314", VA = "0xDC5314")]
			[DebuggerHidden]
			public <DoDropEffect>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x600184F")]
			[Address(RVA = "0xDC539C", Offset = "0xDC539C", VA = "0xDC539C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001850")]
			[Address(RVA = "0xDC53A0", Offset = "0xDC53A0", VA = "0xDC53A0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001852")]
			[Address(RVA = "0xDC5610", Offset = "0xDC5610", VA = "0xDC5610", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400175E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private ManagedProp managedProp;

		[Token(Token = "0x400175F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Rigidbody thisRigidbody;

		[Token(Token = "0x4001760")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Collider thisCollider;

		[Token(Token = "0x4001761")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool wasReleased;

		[Token(Token = "0x6001847")]
		[Address(RVA = "0xDC4F30", Offset = "0xDC4F30", VA = "0xDC4F30", Slot = "4")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6001848")]
		[Address(RVA = "0xDC50F0", Offset = "0xDC50F0", VA = "0xDC50F0", Slot = "5")]
		public override void DropEffect(float delay)
		{
		}

		[Token(Token = "0x6001849")]
		[Address(RVA = "0xDC51B8", Offset = "0xDC51B8", VA = "0xDC51B8")]
		private void OnCollisionEnter(Collision other)
		{
		}

		[Token(Token = "0x600184A")]
		[Address(RVA = "0xDC5290", Offset = "0xDC5290", VA = "0xDC5290", Slot = "6")]
		[IteratorStateMachine(typeof(<DoDropEffect>d__7))]
		protected override IEnumerator DoDropEffect(float delay)
		{
			return null;
		}

		[Token(Token = "0x600184B")]
		[Address(RVA = "0xDC533C", Offset = "0xDC533C", VA = "0xDC533C")]
		private void ResetRigidbody()
		{
		}

		[Token(Token = "0x600184C")]
		[Address(RVA = "0xDC5388", Offset = "0xDC5388", VA = "0xDC5388")]
		public PropDropEffect()
		{
		}
	}
}
namespace API
{
	[Token(Token = "0x200049F")]
	public class APIAddAssessmentEvents : APIComm
	{
		[Token(Token = "0x20004A0")]
		public class RequestAssessmentEvents
		{
			[Token(Token = "0x4001767")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public List<RequestAssessmentEvent> assessment_events;

			[Token(Token = "0x6001856")]
			[Address(RVA = "0xDC5854", Offset = "0xDC5854", VA = "0xDC5854")]
			public RequestAssessmentEvents(List<AssessmentEvent> events)
			{
			}
		}

		[Token(Token = "0x20004A1")]
		public class RequestAssessmentEvent
		{
			[Token(Token = "0x4001768")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string assessment_id;

			[Token(Token = "0x4001769")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string question_id;

			[Token(Token = "0x400176A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public int question_type_enum;

			[Token(Token = "0x400176B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public float score;

			[Token(Token = "0x400176C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public long epoch_millis;

			[Token(Token = "0x6001857")]
			[Address(RVA = "0xDC5B88", Offset = "0xDC5B88", VA = "0xDC5B88")]
			public RequestAssessmentEvent(AssessmentEvent ev)
			{
			}
		}

		[Token(Token = "0x4001766")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<AssessmentEvent> events;

		[Token(Token = "0x6001854")]
		[Address(RVA = "0xDC5658", Offset = "0xDC5658", VA = "0xDC5658")]
		public APIAddAssessmentEvents(List<AssessmentEvent> events)
		{
		}

		[Token(Token = "0x6001855")]
		[Address(RVA = "0xDC5728", Offset = "0xDC5728", VA = "0xDC5728", Slot = "4")]
		protected override UnityWebRequest GenerateWebRequest()
		{
			return null;
		}
	}
	[Token(Token = "0x20004A2")]
	public class APIAddCardToStack : APIComm
	{
		[Token(Token = "0x20004A3")]
		public class RequestCard
		{
			[Token(Token = "0x400176F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string deck_id;

			[Token(Token = "0x4001770")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string stack_parent_id;

			[Token(Token = "0x4001771")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public int stack_index;

			[Token(Token = "0x4001772")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string front_text;

			[Token(Token = "0x4001773")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public string back_text;

			[Token(Token = "0x4001774")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public string prop_id;

			[Token(Token = "0x4001775")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public string prop_name;

			[Token(Token = "0x600185C")]
			[Address(RVA = "0xDC5CFC", Offset = "0xDC5CFC", VA = "0xDC5CFC")]
			public RequestCard(Guid deckId, Guid stackParentId, int stackIndex, string frontText, string backText, Guid propId, string propName)
			{
			}
		}

		[Token(Token = "0x20004A4")]
		public class ResponseCard
		{
			[Token(Token = "0x4001776")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string card_id;

			[Token(Token = "0x600185D")]
			[Address(RVA = "0xDC6020", Offset = "0xDC6020", VA = "0xDC6020")]
			public ResponseCard()
			{
			}
		}

		[Token(Token = "0x400176D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private RequestCard requestCard;

		[Token(Token = "0x400176E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Guid cardId;

		[Token(Token = "0x6001858")]
		[Address(RVA = "0xDC5BFC", Offset = "0xDC5BFC", VA = "0xDC5BFC")]
		public APIAddCardToStack(Guid deckId, Guid stackParentId, int staxIndex, string frontText, string backText, Guid propId, string propName)
		{
		}

		[Token(Token = "0x6001859")]
		[Address(RVA = "0xDC5DD4", Offset = "0xDC5DD4", VA = "0xDC5DD4")]
		public Guid GetCardId()
		{
			return default(Guid);
		}

		[Token(Token = "0x600185A")]
		[Address(RVA = "0xDC5DE0", Offset = "0xDC5DE0", VA = "0xDC5DE0", Slot = "4")]
		protected override UnityWebRequest GenerateWebRequest()
		{
			return null;
		}

		[Token(Token = "0x600185B")]
		[Address(RVA = "0xDC5ED8", Offset = "0xDC5ED8", VA = "0xDC5ED8", Slot = "6")]
		protected override void ProcessSuccess(UnityWebRequest uwr)
		{
		}
	}
	[Token(Token = "0x20004A5")]
	public class APIAddUserEvent : APIComm
	{
		[Token(Token = "0x20004A6")]
		public class RequestAddUserEvent
		{
			[Token(Token = "0x4001778")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string session_id;

			[Token(Token = "0x4001779")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int event_type_enum;

			[Token(Token = "0x6001860")]
			[Address(RVA = "0xDC60E0", Offset = "0xDC60E0", VA = "0xDC60E0")]
			public RequestAddUserEvent(Guid sessionId, UserEvent userEvent)
			{
			}
		}

		[Token(Token = "0x4001777")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private RequestAddUserEvent requestAddUserEvent;

		[Token(Token = "0x600185E")]
		[Address(RVA = "0xDC6028", Offset = "0xDC6028", VA = "0xDC6028")]
		public APIAddUserEvent(Guid sessionId, UserEvent userEvent)
		{
		}

		[Token(Token = "0x600185F")]
		[Address(RVA = "0xDC6130", Offset = "0xDC6130", VA = "0xDC6130", Slot = "4")]
		protected override UnityWebRequest GenerateWebRequest()
		{
			return null;
		}
	}
	[Token(Token = "0x20004A7")]
	public abstract class APIComm
	{
		[Token(Token = "0x20004A8")]
		[CompilerGenerated]
		private sealed class <co_SendComm>d__22 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001784")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001785")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001786")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public APIComm <>4__this;

			[Token(Token = "0x4001787")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <tries>5__2;

			[Token(Token = "0x4001788")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private UnityWebRequest <uwr>5__3;

			[Token(Token = "0x170002E6")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001874")]
				[Address(RVA = "0xDC6830", Offset = "0xDC6830", VA = "0xDC6830", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002E7")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001876")]
				[Address(RVA = "0xDC6878", Offset = "0xDC6878", VA = "0xDC6878", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001870")]
			[Address(RVA = "0xDC62D0", Offset = "0xDC62D0", VA = "0xDC62D0")]
			[DebuggerHidden]
			public <co_SendComm>d__22(int <>1__state)
			{
			}

			[Token(Token = "0x6001871")]
			[Address(RVA = "0xDC637C", Offset = "0xDC637C", VA = "0xDC637C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001872")]
			[Address(RVA = "0xDC63A8", Offset = "0xDC63A8", VA = "0xDC63A8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001873")]
			[Address(RVA = "0xDC6780", Offset = "0xDC6780", VA = "0xDC6780")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6001875")]
			[Address(RVA = "0xDC6838", Offset = "0xDC6838", VA = "0xDC6838", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400177D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action<bool> OnCommComplete;

		[Token(Token = "0x400177E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected string endpoint;

		[Token(Token = "0x400177F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected bool doNotRefreshOn401;

		[Token(Token = "0x4001780")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		protected bool doNotInitiateNetworkErrorState;

		[Token(Token = "0x4001781")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private int retries;

		[Token(Token = "0x4001782")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool refreshing;

		[Token(Token = "0x4001783")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		private bool refreshSuccess;

		[Token(Token = "0x170002E3")]
		public int errorCode
		{
			[Token(Token = "0x6001861")]
			[Address(RVA = "0xDC6228", Offset = "0xDC6228", VA = "0xDC6228")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001862")]
			[Address(RVA = "0xDC6230", Offset = "0xDC6230", VA = "0xDC6230")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x170002E4")]
		public string errorMessage
		{
			[Token(Token = "0x6001863")]
			[Address(RVA = "0xDC6238", Offset = "0xDC6238", VA = "0xDC6238")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001864")]
			[Address(RVA = "0xDC6240", Offset = "0xDC6240", VA = "0xDC6240")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x170002E5")]
		public bool successful
		{
			[Token(Token = "0x6001865")]
			[Address(RVA = "0xDC6248", Offset = "0xDC6248", VA = "0xDC6248")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001866")]
			[Address(RVA = "0xDC6250", Offset = "0xDC6250", VA = "0xDC6250")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x6001867")]
		[Address(RVA = "0xDC5AC0", Offset = "0xDC5AC0", VA = "0xDC5AC0")]
		protected string GetBaseAPI()
		{
			return null;
		}

		[Token(Token = "0x6001868")]
		protected abstract UnityWebRequest GenerateWebRequest();

		[Token(Token = "0x6001869")]
		[Address(RVA = "0xDC5B10", Offset = "0xDC5B10", VA = "0xDC5B10")]
		protected void SetAccessToken(UnityWebRequest uwr)
		{
		}

		[Token(Token = "0x600186A")]
		[Address(RVA = "0xDC625C", Offset = "0xDC625C", VA = "0xDC625C")]
		[IteratorStateMachine(typeof(<co_SendComm>d__22))]
		public IEnumerator co_SendComm()
		{
			return null;
		}

		[Token(Token = "0x600186B")]
		[Address(RVA = "0xDC62F8", Offset = "0xDC62F8", VA = "0xDC62F8")]
		private void ProcessComplete(bool successful)
		{
		}

		[Token(Token = "0x600186C")]
		[Address(RVA = "0xDC631C", Offset = "0xDC631C", VA = "0xDC631C", Slot = "5")]
		protected virtual void ProcessError(UnityWebRequest uwr)
		{
		}

		[Token(Token = "0x600186D")]
		[Address(RVA = "0xDC6368", Offset = "0xDC6368", VA = "0xDC6368", Slot = "6")]
		protected virtual void ProcessSuccess(UnityWebRequest uwr)
		{
		}

		[Token(Token = "0x600186E")]
		[Address(RVA = "0xDC636C", Offset = "0xDC636C", VA = "0xDC636C")]
		private void OnRefreshAttemptComplete(bool success)
		{
		}

		[Token(Token = "0x600186F")]
		[Address(RVA = "0xDC56C8", Offset = "0xDC56C8", VA = "0xDC56C8")]
		protected APIComm()
		{
		}
	}
	[Token(Token = "0x20004A9")]
	public class APICompleteAssessment : APIComm
	{
		[Token(Token = "0x20004AA")]
		public class RequestCompleteAssessment
		{
			[Token(Token = "0x400178A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string assessment_id;

			[Token(Token = "0x6001879")]
			[Address(RVA = "0xDC6A24", Offset = "0xDC6A24", VA = "0xDC6A24")]
			public RequestCompleteAssessment(Guid assessmentId)
			{
			}
		}

		[Token(Token = "0x4001789")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Guid assessmentId;

		[Token(Token = "0x6001877")]
		[Address(RVA = "0xDC6880", Offset = "0xDC6880", VA = "0xDC6880")]
		public APICompleteAssessment(Guid assessmentId)
		{
		}

		[Token(Token = "0x6001878")]
		[Address(RVA = "0xDC68F0", Offset = "0xDC68F0", VA = "0xDC68F0", Slot = "4")]
		protected override UnityWebRequest GenerateWebRequest()
		{
			return null;
		}
	}
	[Token(Token = "0x20004AB")]
	public class APICompleteDeckSession : APIComm
	{
		[Token(Token = "0x20004AC")]
		public class RequestCompleteDeckSession
		{
			[Token(Token = "0x400178C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string deck_session_id;

			[Token(Token = "0x600187C")]
			[Address(RVA = "0xDC6C08", Offset = "0xDC6C08", VA = "0xDC6C08")]
			public RequestCompleteDeckSession(Guid deckSessionId)
			{
			}
		}

		[Token(Token = "0x400178B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Guid deckSessionId;

		[Token(Token = "0x600187A")]
		[Address(RVA = "0xDC6A64", Offset = "0xDC6A64", VA = "0xDC6A64")]
		public APICompleteDeckSession(Guid deckSessionId)
		{
		}

		[Token(Token = "0x600187B")]
		[Address(RVA = "0xDC6AD4", Offset = "0xDC6AD4", VA = "0xDC6AD4", Slot = "4")]
		protected override UnityWebRequest GenerateWebRequest()
		{
			return null;
		}
	}
	[Token(Token = "0x20004AD")]
	public class APICreateDeck : APIComm
	{
		[Token(Token = "0x20004AE")]
		public class RequestDeck
		{
			[Token(Token = "0x400178F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string name;

			[Token(Token = "0x4001790")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string description;

			[Token(Token = "0x4001791")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public bool shared;

			[Token(Token = "0x4001792")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public List<string> tags;

			[Token(Token = "0x6001881")]
			[Address(RVA = "0xDC6D10", Offset = "0xDC6D10", VA = "0xDC6D10")]
			public RequestDeck(string name, string description, bool shared, List<string> tags)
			{
			}
		}

		[Token(Token = "0x20004AF")]
		public class ResponseDeck
		{
			[Token(Token = "0x4001793")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string deck_id;

			[Token(Token = "0x6001882")]
			[Address(RVA = "0xDC6FC4", Offset = "0xDC6FC4", VA = "0xDC6FC4")]
			public ResponseDeck()
			{
			}
		}

		[Token(Token = "0x400178D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private RequestDeck requestDeck;

		[Token(Token = "0x400178E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Guid deckId;

		[Token(Token = "0x600187D")]
		[Address(RVA = "0xDC6C48", Offset = "0xDC6C48", VA = "0xDC6C48")]
		public APICreateDeck(string name, string description, bool shared, List<string> tags)
		{
		}

		[Token(Token = "0x600187E")]
		[Address(RVA = "0xDC6D78", Offset = "0xDC6D78", VA = "0xDC6D78")]
		public Guid GetDeckId()
		{
			return default(Guid);
		}

		[Token(Token = "0x600187F")]
		[Address(RVA = "0xDC6D84", Offset = "0xDC6D84", VA = "0xDC6D84", Slot = "4")]
		protected override UnityWebRequest GenerateWebRequest()
		{
			return null;
		}

		[Token(Token = "0x6001880")]
		[Address(RVA = "0xDC6E7C", Offset = "0xDC6E7C", VA = "0xDC6E7C", Slot = "6")]
		protected override void ProcessSuccess(UnityWebRequest uwr)
		{
		}
	}
	[Token(Token = "0x20004B0")]
	public class APIExpireMarketplacePurchase : APIComm
	{
		[Token(Token = "0x20004B1")]
		public class RequestExpireMarketplacePurchase
		{
			[Token(Token = "0x4001795")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string listing_id;

			[Token(Token = "0x6001885")]
			[Address(RVA = "0xDC707C", Offset = "0xDC707C", VA = "0xDC707C")]
			public RequestExpireMarketplacePurchase(string listingId)
			{
			}
		}

		[Token(Token = "0x4001794")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private RequestExpireMarketplacePurchase requestMarketplacePurchase;

		[Token(Token = "0x6001883")]
		[Address(RVA = "0xDC6FCC", Offset = "0xDC6FCC", VA = "0xDC6FCC")]
		public APIExpireMarketplacePurchase(string listingId)
		{
		}

		[Token(Token = "0x6001884")]
		[Address(RVA = "0xDC70AC", Offset = "0xDC70AC", VA = "0xDC70AC", Slot = "4")]
		protected override UnityWebRequest GenerateWebRequest()
		{
			return null;
		}
	}
	[Token(Token = "0x20004B2")]
	public class APIGetActivePurchasedMarketplaceListings : APIComm
	{
		[Token(Token = "0x170002E8")]
		public List<string> listingIds
		{
			[Token(Token = "0x6001886")]
			[Address(RVA = "0xDC71B8", Offset = "0xDC71B8", VA = "0xDC71B8")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001887")]
			[Address(RVA = "0xDC71C0", Offset = "0xDC71C0", VA = "0xDC71C0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6001888")]
		[Address(RVA = "0xDC71C8", Offset = "0xDC71C8", VA = "0xDC71C8")]
		public APIGetActivePurchasedMarketplaceListings()
		{
		}

		[Token(Token = "0x6001889")]
		[Address(RVA = "0xDC721C", Offset = "0xDC721C", VA = "0xDC721C", Slot = "4")]
		protected override UnityWebRequest GenerateWebRequest()
		{
			return null;
		}

		[Token(Token = "0x600188A")]
		[Address(RVA = "0xDC7254", Offset = "0xDC7254", VA = "0xDC7254", Slot = "6")]
		protected override void ProcessSuccess(UnityWebRequest uwr)
		{
		}
	}
	[Token(Token = "0x20004B3")]
	public class APIGetAppStringsForLanguage : APIComm
	{
		[Token(Token = "0x20004B4")]
		public class ResponseStringsList
		{
			[Token(Token = "0x400179B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public List<ResponseString> string_list;

			[Token(Token = "0x400179C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public bool more_pages;

			[Token(Token = "0x6001892")]
			[Address(RVA = "0xDC78F0", Offset = "0xDC78F0", VA = "0xDC78F0")]
			public ResponseStringsList()
			{
			}

			[Token(Token = "0x6001893")]
			[Address(RVA = "0xDC76C0", Offset = "0xDC76C0", VA = "0xDC76C0")]
			public List<LocalizedString> GetLocalizedStrings()
			{
				return null;
			}
		}

		[Token(Token = "0x20004B5")]
		public class ResponseString
		{
			[Token(Token = "0x400179D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int id;

			[Token(Token = "0x400179E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string localized_string;

			[Token(Token = "0x6001894")]
			[Address(RVA = "0xDC78F8", Offset = "0xDC78F8", VA = "0xDC78F8")]
			public ResponseString()
			{
			}
		}

		[Token(Token = "0x4001797")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private int page;

		[Token(Token = "0x4001798")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Language language;

		[Token(Token = "0x170002E9")]
		public bool more_pages
		{
			[Token(Token = "0x600188B")]
			[Address(RVA = "0xDC7408", Offset = "0xDC7408", VA = "0xDC7408")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600188C")]
			[Address(RVA = "0xDC7410", Offset = "0xDC7410", VA = "0xDC7410")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170002EA")]
		public List<LocalizedString> localizedStrings
		{
			[Token(Token = "0x600188D")]
			[Address(RVA = "0xDC741C", Offset = "0xDC741C", VA = "0xDC741C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600188E")]
			[Address(RVA = "0xDC7424", Offset = "0xDC7424", VA = "0xDC7424")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x600188F")]
		[Address(RVA = "0xDC742C", Offset = "0xDC742C", VA = "0xDC742C")]
		public APIGetAppStringsForLanguage(Language language, int page)
		{
		}

		[Token(Token = "0x6001890")]
		[Address(RVA = "0xDC7498", Offset = "0xDC7498", VA = "0xDC7498", Slot = "4")]
		protected override UnityWebRequest GenerateWebRequest()
		{
			return null;
		}

		[Token(Token = "0x6001891")]
		[Address(RVA = "0xDC7564", Offset = "0xDC7564", VA = "0xDC7564", Slot = "6")]
		protected override void ProcessSuccess(UnityWebRequest uwr)
		{
		}
	}
	[Token(Token = "0x20004B6")]
	public class APIGetAssetBundlesMeta : APIComm
	{
		[Token(Token = "0x20004B7")]
		public enum BuildPlatform
		{
			[Token(Token = "0x40017A3")]
			Windows,
			[Token(Token = "0x40017A4")]
			Android
		}

		[Token(Token = "0x20004B8")]
		public class ResponseAssetBundle
		{
			[Token(Token = "0x40017A5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string bundle;

			[Token(Token = "0x40017A6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string bundle_s3_folder;

			[Token(Token = "0x40017A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string bundle_s3_bucket;

			[Token(Token = "0x40017A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string bundle_s3_bucket_root;

			[Token(Token = "0x40017A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public uint version;

			[Token(Token = "0x40017AA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public bool active;

			[Token(Token = "0x600189A")]
			[Address(RVA = "0xDC7DB4", Offset = "0xDC7DB4", VA = "0xDC7DB4")]
			public ResponseAssetBundle()
			{
			}
		}

		[Token(Token = "0x40017A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private BuildPlatform platform;

		[Token(Token = "0x40017A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private bool useDev;

		[Token(Token = "0x170002EB")]
		public List<AssetBundleMeta> assetBundles
		{
			[Token(Token = "0x6001895")]
			[Address(RVA = "0xDC7900", Offset = "0xDC7900", VA = "0xDC7900")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001896")]
			[Address(RVA = "0xDC7908", Offset = "0xDC7908", VA = "0xDC7908")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6001897")]
		[Address(RVA = "0xDC7910", Offset = "0xDC7910", VA = "0xDC7910")]
		public APIGetAssetBundlesMeta(BuildPlatform platform, bool useDev)
		{
		}

		[Token(Token = "0x6001898")]
		[Address(RVA = "0xDC797C", Offset = "0xDC797C", VA = "0xDC797C", Slot = "4")]
		protected override UnityWebRequest GenerateWebRequest()
		{
			return null;
		}

		[Token(Token = "0x6001899")]
		[Address(RVA = "0xDC7A1C", Offset = "0xDC7A1C", VA = "0xDC7A1C", Slot = "6")]
		protected override void ProcessSuccess(UnityWebRequest uwr)
		{
		}
	}
	[Token(Token = "0x20004B9")]
	public class APIGetCardPositionsInStack : APIComm
	{
		[Token(Token = "0x20004BA")]
		public class ResponseCardPosition
		{
			[Token(Token = "0x40017AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string card_id;

			[Token(Token = "0x40017AF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float pos_x;

			[Token(Token = "0x40017B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public float pos_y;

			[Token(Token = "0x40017B1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float pos_z;

			[Token(Token = "0x40017B2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public float eul_x;

			[Token(Token = "0x40017B3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float eul_y;

			[Token(Token = "0x40017B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float eul_z;

			[Token(Token = "0x600189F")]
			[Address(RVA = "0xDC82A4", Offset = "0xDC82A4", VA = "0xDC82A4")]
			public ResponseCardPosition()
			{
			}
		}

		[Token(Token = "0x40017AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Guid stackParentId;

		[Token(Token = "0x40017AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Room room;

		[Token(Token = "0x40017AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private List<CardPosition> cardPositionList;

		[Token(Token = "0x600189B")]
		[Address(RVA = "0xDC7DBC", Offset = "0xDC7DBC", VA = "0xDC7DBC")]
		public APIGetCardPositionsInStack(Guid stackParentId, Room room)
		{
		}

		[Token(Token = "0x600189C")]
		[Address(RVA = "0xDC7E90", Offset = "0xDC7E90", VA = "0xDC7E90")]
		public List<CardPosition> GetCardPositionList()
		{
			return null;
		}

		[Token(Token = "0x600189D")]
		[Address(RVA = "0xDC7E98", Offset = "0xDC7E98", VA = "0xDC7E98", Slot = "4")]
		protected override UnityWebRequest GenerateWebRequest()
		{
			return null;
		}

		[Token(Token = "0x600189E")]
		[Address(RVA = "0xDC7F74", Offset = "0xDC7F74", VA = "0xDC7F74", Slot = "6")]
		protected override void ProcessSuccess(UnityWebRequest uwr)
		{
		}
	}
	[Token(Token = "0x20004BB")]
	public class APIGetCardsInStack : APIComm
	{
		[Token(Token = "0x20004BC")]
		public class ResponseCard
		{
			[Token(Token = "0x40017B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string card_id;

			[Token(Token = "0x40017B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string front_text;

			[Token(Token = "0x40017B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string back_text;

			[Token(Token = "0x40017BA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string prop_id;

			[Token(Token = "0x40017BB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public string prop_name;

			[Token(Token = "0x40017BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public bool is_stack_parent;

			[Token(Token = "0x40017BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public string back_note;

			[Token(Token = "0x40017BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public ResponseS3Image front_image;

			[Token(Token = "0x40017BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public ResponseS3Image back_image;

			[Token(Token = "0x60018A4")]
			[Address(RVA = "0xDC8740", Offset = "0xDC8740", VA = "0xDC8740")]
			public ResponseCard()
			{
			}
		}

		[Token(Token = "0x40017B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Guid stackParentId;

		[Token(Token = "0x40017B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private List<BasicCard> cardList;

		[Token(Token = "0x60018A0")]
		[Address(RVA = "0xDC82AC", Offset = "0xDC82AC", VA = "0xDC82AC")]
		public APIGetCardsInStack(Guid stackParentId)
		{
		}

		[Token(Token = "0x60018A1")]
		[Address(RVA = "0xDC8370", Offset = "0xDC8370", VA = "0xDC8370")]
		public List<BasicCard> GetCardList()
		{
			return null;
		}

		[Token(Token = "0x60018A2")]
		[Address(RVA = "0xDC8378", Offset = "0xDC8378", VA = "0xDC8378", Slot = "4")]
		protected override UnityWebRequest GenerateWebRequest()
		{
			return null;
		}

		[Token(Token = "0x60018A3")]
		[Address(RVA = "0xDC8418", Offset = "0xDC8418", VA = "0xDC8418", Slot = "6")]
		protected override void ProcessSuccess(UnityWebRequest uwr)
		{
		}
	}
	[Token(Token = "0x20004BD")]
	public class ResponseS3Image
	{
		[Token(Token = "0x40017C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string image;

		[Token(Token = "0x40017C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string object_suffix;

		[Token(Token = "0x40017C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string object_folder;

		[Token(Token = "0x40017C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string object_bucket;

		[Token(Token = "0x40017C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string object_bucket_root;

		[Token(Token = "0x60018A5")]
		[Address(RVA = "0xDC8748", Offset = "0xDC8748", VA = "0xDC8748")]
		public ResponseS3Image()
		{
		}
	}
	[Token(Token = "0x20004BE")]
	public class APIGetCommunityDeckList : APIComm
	{
		[Token(Token = "0x20004BF")]
		public class ResponseGetUserDeckList
		{
			[Token(Token = "0x40017C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public List<APIGetUserDeckList.ResponseUserDeckListItem> deck_list;

			[Token(Token = "0x40017CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public bool more_pages;

			[Token(Token = "0x60018AD")]
			[Address(RVA = "0xDC8DE8", Offset = "0xDC8DE8", VA = "0xDC8DE8")]
			public ResponseGetUserDeckList()
			{
			}

			[Token(Token = "0x60018AE")]
			[Address(RVA = "0xDC8BB8", Offset = "0xDC8BB8", VA = "0xDC8BB8")]
			public List<DeckListItem> GetDeckList()
			{
				return null;
			}
		}

		[Token(Token = "0x40017C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private int page;

		[Token(Token = "0x40017C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private List<Language> languages;

		[Token(Token = "0x170002EC")]
		public List<DeckListItem> deckList
		{
			[Token(Token = "0x60018A6")]
			[Address(RVA = "0xDC8750", Offset = "0xDC8750", VA = "0xDC8750")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60018A7")]
			[Address(RVA = "0xDC8758", Offset = "0xDC8758", VA = "0xDC8758")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170002ED")]
		public bool more_pages
		{
			[Token(Token = "0x60018A8")]
			[Address(RVA = "0xDC8760", Offset = "0xDC8760", VA = "0xDC8760")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60018A9")]
			[Address(RVA = "0xDC8768", Offset = "0xDC8768", VA = "0xDC8768")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60018AA")]
		[Address(RVA = "0xDC8774", Offset = "0xDC8774", VA = "0xDC8774")]
		public APIGetCommunityDeckList(int page, [Optional] List<Language> languages)
		{
		}

		[Token(Token = "0x60018AB")]
		[Address(RVA = "0xDC87EC", Offset = "0xDC87EC", VA = "0xDC87EC", Slot = "4")]
		protected override UnityWebRequest GenerateWebRequest()
		{
			return null;
		}

		[Token(Token = "0x60018AC")]
		[Address(RVA = "0xDC8A5C", Offset = "0xDC8A5C", VA = "0xDC8A5C", Slot = "6")]
		protected override void ProcessSuccess(UnityWebRequest uwr)
		{
		}
	}
	[Token(Token = "0x20004C0")]
	public class APIGetDeckListItem : APIComm
	{
		[Token(Token = "0x20004C1")]
		public class ResponseDeckListItem
		{
			[Token(Token = "0x40017CD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string deck_id;

			[Token(Token = "0x40017CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string name;

			[Token(Token = "0x40017CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public bool view_access;

			[Token(Token = "0x40017D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
			public bool edit_access;

			[Token(Token = "0x40017D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string creator;

			[Token(Token = "0x40017D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public bool librarium_deck;

			[Token(Token = "0x40017D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
			public bool auto_generated_skip;

			[Token(Token = "0x40017D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
			public bool curated_skip;

			[Token(Token = "0x40017D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public int language_type_enum;

			[Token(Token = "0x40017D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public float overall_rating;

			[Token(Token = "0x40017D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public int user_rating;

			[Token(Token = "0x60018B4")]
			[Address(RVA = "0xDC90C4", Offset = "0xDC90C4", VA = "0xDC90C4")]
			public ResponseDeckListItem()
			{
			}
		}

		[Token(Token = "0x40017CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Guid deckId;

		[Token(Token = "0x170002EE")]
		public DeckListItem deckListItem
		{
			[Token(Token = "0x60018AF")]
			[Address(RVA = "0xDC8DF0", Offset = "0xDC8DF0", VA = "0xDC8DF0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60018B0")]
			[Address(RVA = "0xDC8DF8", Offset = "0xDC8DF8", VA = "0xDC8DF8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60018B1")]
		[Address(RVA = "0xDC8E00", Offset = "0xDC8E00", VA = "0xDC8E00")]
		public APIGetDeckListItem(Guid deckId)
		{
		}

		[Token(Token = "0x60018B2")]
		[Address(RVA = "0xDC8E70", Offset = "0xDC8E70", VA = "0xDC8E70", Slot = "4")]
		protected override UnityWebRequest GenerateWebRequest()
		{
			return null;
		}

		[Token(Token = "0x60018B3")]
		[Address(RVA = "0xDC8F10", Offset = "0xDC8F10", VA = "0xDC8F10", Slot = "6")]
		protected override void ProcessSuccess(UnityWebRequest uwr)
		{
		}
	}
	[Token(Token = "0x20004C2")]
	public class APIGetDynamoDeckList : APIComm
	{
		[Token(Token = "0x60018B5")]
		[Address(RVA = "0xDC90CC", Offset = "0xDC90CC", VA = "0xDC90CC")]
		public APIGetDynamoDeckList()
		{
		}

		[Token(Token = "0x60018B6")]
		[Address(RVA = "0xDC9120", Offset = "0xDC9120", VA = "0xDC9120", Slot = "4")]
		protected override UnityWebRequest GenerateWebRequest()
		{
			return null;
		}

		[Token(Token = "0x60018B7")]
		[Address(RVA = "0xDC9158", Offset = "0xDC9158", VA = "0xDC9158", Slot = "6")]
		protected override void ProcessSuccess(UnityWebRequest uwr)
		{
		}
	}
	[Token(Token = "0x20004C3")]
	public class APIGetFeaturedItems : APIComm
	{
		[Token(Token = "0x170002EF")]
		public List<Bundle> featuredList
		{
			[Token(Token = "0x60018B8")]
			[Address(RVA = "0xDCA27C", Offset = "0xDCA27C", VA = "0xDCA27C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60018B9")]
			[Address(RVA = "0xDCA284", Offset = "0xDCA284", VA = "0xDCA284")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60018BA")]
		[Address(RVA = "0xDCA28C", Offset = "0xDCA28C", VA = "0xDCA28C")]
		public APIGetFeaturedItems()
		{
		}

		[Token(Token = "0x60018BB")]
		[Address(RVA = "0xDCA2E4", Offset = "0xDCA2E4", VA = "0xDCA2E4", Slot = "4")]
		protected override UnityWebRequest GenerateWebRequest()
		{
			return null;
		}

		[Token(Token = "0x60018BC")]
		[Address(RVA = "0xDCA330", Offset = "0xDCA330", VA = "0xDCA330", Slot = "6")]
		protected override void ProcessSuccess(UnityWebRequest uwr)
		{
		}
	}
	[Token(Token = "0x20004C4")]
	public class APIGetFeaturedListings : APIComm
	{
		[Token(Token = "0x170002F0")]
		public List<Bundle> featuredList
		{
			[Token(Token = "0x60018BD")]
			[Address(RVA = "0xDCA6A4", Offset = "0xDCA6A4", VA = "0xDCA6A4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60018BE")]
			[Address(RVA = "0xDCA6AC", Offset = "0xDCA6AC", VA = "0xDCA6AC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60018BF")]
		[Address(RVA = "0xDCA6B4", Offset = "0xDCA6B4", VA = "0xDCA6B4")]
		public APIGetFeaturedListings()
		{
		}

		[Token(Token = "0x60018C0")]
		[Address(RVA = "0xDCA70C", Offset = "0xDCA70C", VA = "0xDCA70C", Slot = "4")]
		protected override UnityWebRequest GenerateWebRequest()
		{
			return null;
		}

		[Token(Token = "0x60018C1")]
		[Address(RVA = "0xDCA758", Offset = "0xDCA758", VA = "0xDCA758", Slot = "6")]
		protected override void ProcessSuccess(UnityWebRequest uwr)
		{
		}
	}
	[Token(Token = "0x20004C5")]
	public class APIGetFlatMarketplaceListings : APIComm
	{
		[Token(Token = "0x20004C6")]
		public class ResponseMarketplaceBundleSet
		{
			[Token(Token = "0x40017DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public APIGetFullBundleSetForItem.ResponseMarketplaceBundle[] bundles;

			[Token(Token = "0x40017DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public bool more_pages;

			[Token(Token = "0x60018C9")]
			[Address(RVA = "0xDCAEC8", Offset = "0xDCAEC8", VA = "0xDCAEC8")]
			public ResponseMarketplaceBundleSet()
			{
			}

			[Token(Token = "0x60018CA")]
			[Address(RVA = "0xDCAED0", Offset = "0xDCAED0", VA = "0xDCAED0")]
			public List<Bundle> GetBundleList()
			{
				return null;
			}
		}

		[Token(Token = "0x40017DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private int page;

		[Token(Token = "0x170002F1")]
		public List<Bundle> marketplaceBundleList
		{
			[Token(Token = "0x60018C2")]
			[Address(RVA = "0xDCAACC", Offset = "0xDCAACC", VA = "0xDCAACC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60018C3")]
			[Address(RVA = "0xDCAAD4", Offset = "0xDCAAD4", VA = "0xDCAAD4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170002F2")]
		public bool more_pages
		{
			[Token(Token = "0x60018C4")]
			[Address(RVA = "0xDCAADC", Offset = "0xDCAADC", VA = "0xDCAADC")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60018C5")]
			[Address(RVA = "0xDCAAE4", Offset = "0xDCAAE4", VA = "0xDCAAE4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60018C6")]
		[Address(RVA = "0xDCAAF0", Offset = "0xDCAAF0", VA = "0xDCAAF0")]
		public APIGetFlatMarketplaceListings(int page)
		{
		}

		[Token(Token = "0x60018C7")]
		[Address(RVA = "0xDCAB5C", Offset = "0xDCAB5C", VA = "0xDCAB5C", Slot = "4")]
		protected override UnityWebRequest GenerateWebRequest()
		{
			return null;
		}

		[Token(Token = "0x60018C8")]
		[Address(RVA = "0xDCABFC", Offset = "0xDCABFC", VA = "0xDCABFC", Slot = "6")]
		protected override void ProcessSuccess(UnityWebRequest uwr)
		{
		}
	}
	[Token(Token = "0x20004C7")]
	public class APIGetFullBundleSetForItem : APIComm
	{
		[Token(Token = "0x20004C8")]
		public class ResponseMarketplaceBundle
		{
			[Token(Token = "0x40017E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string item_id;

			[Token(Token = "0x40017E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public bool is_deck;

			[Token(Token = "0x40017E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string name;

			[Token(Token = "0x40017E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string description;

			[Token(Token = "0x40017E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public int item_count;

			[Token(Token = "0x40017E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public string color;

			[Token(Token = "0x40017E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public ResponseListing[] listings;

			[Token(Token = "0x40017E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public ResponseS3Image[] images;

			[Token(Token = "0x40017EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public ResponseMarketplaceBundle[] children;

			[Token(Token = "0x60018CE")]
			[Address(RVA = "0xDCB47C", Offset = "0xDCB47C", VA = "0xDCB47C")]
			public ResponseMarketplaceBundle()
			{
			}
		}

		[Token(Token = "0x20004C9")]
		public class ResponseListing
		{
			[Token(Token = "0x40017EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string listing_id;

			[Token(Token = "0x40017EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int listing_type;

			[Token(Token = "0x60018CF")]
			[Address(RVA = "0xDCB484", Offset = "0xDCB484", VA = "0xDCB484")]
			public ResponseListing()
			{
			}
		}

		[Token(Token = "0x40017DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public List<Bundle> bundle;

		[Token(Token = "0x40017E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private string itemId;

		[Token(Token = "0x40017E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool excludeParentage;

		[Token(Token = "0x60018CB")]
		[Address(RVA = "0xDCB040", Offset = "0xDCB040", VA = "0xDCB040")]
		public APIGetFullBundleSetForItem(string itemId, bool excludeParentage = false)
		{
		}

		[Token(Token = "0x60018CC")]
		[Address(RVA = "0xDCB0C0", Offset = "0xDCB0C0", VA = "0xDCB0C0", Slot = "4")]
		protected override UnityWebRequest GenerateWebRequest()
		{
			return null;
		}

		[Token(Token = "0x60018CD")]
		[Address(RVA = "0xDCB198", Offset = "0xDCB198", VA = "0xDCB198", Slot = "6")]
		protected override void ProcessSuccess(UnityWebRequest uwr)
		{
		}
	}
	[Token(Token = "0x20004CA")]
	public class APIGetItemsForSearch : APIComm
	{
		[Token(Token = "0x20004CB")]
		public class ResponseItemSearchSet
		{
			[Token(Token = "0x40017F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public ResponseItemSearch[] item_list;

			[Token(Token = "0x40017F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public bool more_pages;

			[Token(Token = "0x60018D7")]
			[Address(RVA = "0xDCB8C4", Offset = "0xDCB8C4", VA = "0xDCB8C4")]
			public ResponseItemSearchSet()
			{
			}

			[Token(Token = "0x60018D8")]
			[Address(RVA = "0xDCB754", Offset = "0xDCB754", VA = "0xDCB754")]
			public List<SearchItem> GetSearchList()
			{
				return null;
			}
		}

		[Token(Token = "0x20004CC")]
		public class ResponseItemSearch
		{
			[Token(Token = "0x40017F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string item_id;

			[Token(Token = "0x40017F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int item_type;

			[Token(Token = "0x40017F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string name;

			[Token(Token = "0x40017F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string description;

			[Token(Token = "0x40017F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public int item_count;

			[Token(Token = "0x60018D9")]
			[Address(RVA = "0xDCB8CC", Offset = "0xDCB8CC", VA = "0xDCB8CC")]
			public ResponseItemSearch()
			{
			}
		}

		[Token(Token = "0x40017EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private string searchString;

		[Token(Token = "0x40017F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int page;

		[Token(Token = "0x170002F3")]
		public List<SearchItem> searchList
		{
			[Token(Token = "0x60018D0")]
			[Address(RVA = "0xDCB48C", Offset = "0xDCB48C", VA = "0xDCB48C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60018D1")]
			[Address(RVA = "0xDCB494", Offset = "0xDCB494", VA = "0xDCB494")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170002F4")]
		public bool more_pages
		{
			[Token(Token = "0x60018D2")]
			[Address(RVA = "0xDCB49C", Offset = "0xDCB49C", VA = "0xDCB49C")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60018D3")]
			[Address(RVA = "0xDCB4A4", Offset = "0xDCB4A4", VA = "0xDCB4A4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60018D4")]
		[Address(RVA = "0xDCB4B0", Offset = "0xDCB4B0", VA = "0xDCB4B0")]
		public APIGetItemsForSearch(string searchString, int page)
		{
		}

		[Token(Token = "0x60018D5")]
		[Address(RVA = "0xDCB530", Offset = "0xDCB530", VA = "0xDCB530", Slot = "4")]
		protected override UnityWebRequest GenerateWebRequest()
		{
			return null;
		}

		[Token(Token = "0x60018D6")]
		[Address(RVA = "0xDCB5F8", Offset = "0xDCB5F8", VA = "0xDCB5F8", Slot = "6")]
		protected override void ProcessSuccess(UnityWebRequest uwr)
		{
		}
	}
	[Token(Token = "0x20004CD")]
	public class APIGetMarketplaceListingsBundle : APIComm
	{
		[Token(Token = "0x170002F5")]
		public Bundle bundle
		{
			[Token(Token = "0x60018DA")]
			[Address(RVA = "0xDCB8D4", Offset = "0xDCB8D4", VA = "0xDCB8D4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60018DB")]
			[Address(RVA = "0xDCB8DC", Offset = "0xDCB8DC", VA = "0xDCB8DC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60018DC")]
		[Address(RVA = "0xDCB8E4", Offset = "0xDCB8E4", VA = "0xDCB8E4")]
		public APIGetMarketplaceListingsBundle(Bundle parentBundle)
		{
		}

		[Token(Token = "0x60018DD")]
		[Address(RVA = "0xDCB958", Offset = "0xDCB958", VA = "0xDCB958", Slot = "4")]
		protected override UnityWebRequest GenerateWebRequest()
		{
			return null;
		}

		[Token(Token = "0x60018DE")]
		[Address(RVA = "0xDCBA04", Offset = "0xDCBA04", VA = "0xDCBA04", Slot = "6")]
		protected override void ProcessSuccess(UnityWebRequest uwr)
		{
		}
	}
	[Token(Token = "0x20004CE")]
	public class APIGetMultipleChoiceForDeck : APIComm
	{
		[Token(Token = "0x20004CF")]
		public class ResponseMultipleChoiceQuestion
		{
			[Token(Token = "0x40017FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string question_id;

			[Token(Token = "0x40017FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string question_text;

			[Token(Token = "0x40017FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ResponseS3Image question_image;

			[Token(Token = "0x40017FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public ResponseMultipleChoiceAnswer[] answers;

			[Token(Token = "0x60018E4")]
			[Address(RVA = "0xDCC190", Offset = "0xDCC190", VA = "0xDCC190")]
			public ResponseMultipleChoiceQuestion()
			{
			}
		}

		[Token(Token = "0x20004D0")]
		public class ResponseMultipleChoiceAnswer
		{
			[Token(Token = "0x40017FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string answer_id;

			[Token(Token = "0x4001800")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string answer_text;

			[Token(Token = "0x4001801")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public bool is_right_answer;

			[Token(Token = "0x4001802")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public ResponseS3Image answer_image;

			[Token(Token = "0x60018E5")]
			[Address(RVA = "0xDCC198", Offset = "0xDCC198", VA = "0xDCC198")]
			public ResponseMultipleChoiceAnswer()
			{
			}
		}

		[Token(Token = "0x40017F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Guid deckId;

		[Token(Token = "0x170002F6")]
		public List<MultipleChoiceQuestion> questions
		{
			[Token(Token = "0x60018DF")]
			[Address(RVA = "0xDCBCD8", Offset = "0xDCBCD8", VA = "0xDCBCD8")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60018E0")]
			[Address(RVA = "0xDCBCE0", Offset = "0xDCBCE0", VA = "0xDCBCE0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60018E1")]
		[Address(RVA = "0xDCBCE8", Offset = "0xDCBCE8", VA = "0xDCBCE8")]
		public APIGetMultipleChoiceForDeck(Guid deckId)
		{
		}

		[Token(Token = "0x60018E2")]
		[Address(RVA = "0xDCBD5C", Offset = "0xDCBD5C", VA = "0xDCBD5C", Slot = "4")]
		protected override UnityWebRequest GenerateWebRequest()
		{
			return null;
		}

		[Token(Token = "0x60018E3")]
		[Address(RVA = "0xDCBE0C", Offset = "0xDCBE0C", VA = "0xDCBE0C", Slot = "6")]
		protected override void ProcessSuccess(UnityWebRequest uwr)
		{
		}
	}
	[Token(Token = "0x20004D1")]
	public class APIGetPreviewDecks : APIComm
	{
		[Token(Token = "0x20004D2")]
		public class ResponseGetPreviewDeckList
		{
			[Token(Token = "0x4001807")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public List<APIGetDeckListItem.ResponseDeckListItem> deck_list;

			[Token(Token = "0x4001808")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public bool more_pages;

			[Token(Token = "0x60018ED")]
			[Address(RVA = "0xDCC84C", Offset = "0xDCC84C", VA = "0xDCC84C")]
			public ResponseGetPreviewDeckList()
			{
			}

			[Token(Token = "0x60018EE")]
			[Address(RVA = "0xDCC61C", Offset = "0xDCC61C", VA = "0xDCC61C")]
			public List<DeckListItem> GetDeckList()
			{
				return null;
			}
		}

		[Token(Token = "0x4001805")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private int page;

		[Token(Token = "0x4001806")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private List<int> languagesByEnum;

		[Token(Token = "0x170002F7")]
		public List<DeckListItem> previewDeckList
		{
			[Token(Token = "0x60018E6")]
			[Address(RVA = "0xDCC1A0", Offset = "0xDCC1A0", VA = "0xDCC1A0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60018E7")]
			[Address(RVA = "0xDCC1A8", Offset = "0xDCC1A8", VA = "0xDCC1A8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170002F8")]
		public bool more_pages
		{
			[Token(Token = "0x60018E8")]
			[Address(RVA = "0xDCC1B0", Offset = "0xDCC1B0", VA = "0xDCC1B0")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60018E9")]
			[Address(RVA = "0xDCC1B8", Offset = "0xDCC1B8", VA = "0xDCC1B8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60018EA")]
		[Address(RVA = "0xDCC1C4", Offset = "0xDCC1C4", VA = "0xDCC1C4")]
		public APIGetPreviewDecks(int page, [Optional] List<int> languagesByEnum)
		{
		}

		[Token(Token = "0x60018EB")]
		[Address(RVA = "0xDCC230", Offset = "0xDCC230", VA = "0xDCC230", Slot = "4")]
		protected override UnityWebRequest GenerateWebRequest()
		{
			return null;
		}

		[Token(Token = "0x60018EC")]
		[Address(RVA = "0xDCC4C0", Offset = "0xDCC4C0", VA = "0xDCC4C0", Slot = "6")]
		protected override void ProcessSuccess(UnityWebRequest uwr)
		{
		}
	}
	[Token(Token = "0x20004D3")]
	public class APIGetProps : APIComm
	{
		[Token(Token = "0x20004D4")]
		public class ResponsePropSet
		{
			[Token(Token = "0x400180C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public ResponseProp[] prop_list;

			[Token(Token = "0x400180D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public bool more_pages;

			[Token(Token = "0x60018F6")]
			[Address(RVA = "0xDCCD24", Offset = "0xDCCD24", VA = "0xDCCD24")]
			public ResponsePropSet()
			{
			}
		}

		[Token(Token = "0x20004D5")]
		public class ResponseProp
		{
			[Token(Token = "0x400180E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string id;

			[Token(Token = "0x400180F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string name;

			[Token(Token = "0x4001810")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string prefab_name;

			[Token(Token = "0x4001811")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string asset_bundle;

			[Token(Token = "0x60018F7")]
			[Address(RVA = "0xDCCD2C", Offset = "0xDCCD2C", VA = "0xDCCD2C")]
			public ResponseProp()
			{
			}
		}

		[Token(Token = "0x4001809")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private int page;

		[Token(Token = "0x170002F9")]
		public List<PropMeta> propsMeta
		{
			[Token(Token = "0x60018EF")]
			[Address(RVA = "0xDCC854", Offset = "0xDCC854", VA = "0xDCC854")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60018F0")]
			[Address(RVA = "0xDCC85C", Offset = "0xDCC85C", VA = "0xDCC85C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170002FA")]
		public bool morePages
		{
			[Token(Token = "0x60018F1")]
			[Address(RVA = "0xDCC864", Offset = "0xDCC864", VA = "0xDCC864")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60018F2")]
			[Address(RVA = "0xDCC86C", Offset = "0xDCC86C", VA = "0xDCC86C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60018F3")]
		[Address(RVA = "0xDCC878", Offset = "0xDCC878", VA = "0xDCC878")]
		public APIGetProps(int page)
		{
		}

		[Token(Token = "0x60018F4")]
		[Address(RVA = "0xDCC8E4", Offset = "0xDCC8E4", VA = "0xDCC8E4", Slot = "4")]
		protected override UnityWebRequest GenerateWebRequest()
		{
			return null;
		}

		[Token(Token = "0x60018F5")]
		[Address(RVA = "0xDCC9EC", Offset = "0xDCC9EC", VA = "0xDCC9EC", Slot = "6")]
		protected override void ProcessSuccess(UnityWebRequest uwr)
		{
		}
	}
	[Token(Token = "0x20004D6")]
	public class APIGetPurchasedMarketplaceListings : APIComm
	{
		[Token(Token = "0x20004D7")]
		public class ResponsePurchasedItem
		{
			[Token(Token = "0x4001813")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string listing_id;

			[Token(Token = "0x4001814")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public bool oculus_purchased;

			[Token(Token = "0x60018FD")]
			[Address(RVA = "0xDCD16C", Offset = "0xDCD16C", VA = "0xDCD16C")]
			public ResponsePurchasedItem()
			{
			}
		}

		[Token(Token = "0x170002FB")]
		public List<PurchasedItem> purchases
		{
			[Token(Token = "0x60018F8")]
			[Address(RVA = "0xDCCD34", Offset = "0xDCCD34", VA = "0xDCCD34")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60018F9")]
			[Address(RVA = "0xDCCD3C", Offset = "0xDCCD3C", VA = "0xDCCD3C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60018FA")]
		[Address(RVA = "0xDCCD44", Offset = "0xDCCD44", VA = "0xDCCD44")]
		public APIGetPurchasedMarketplaceListings()
		{
		}

		[Token(Token = "0x60018FB")]
		[Address(RVA = "0xDCCD9C", Offset = "0xDCCD9C", VA = "0xDCCD9C", Slot = "4")]
		protected override UnityWebRequest GenerateWebRequest()
		{
			return null;
		}

		[Token(Token = "0x60018FC")]
		[Address(RVA = "0xDCCDE8", Offset = "0xDCCDE8", VA = "0xDCCDE8", Slot = "6")]
		protected override void ProcessSuccess(UnityWebRequest uwr)
		{
		}
	}
	[Token(Token = "0x20004D8")]
	public class APIGetS3AssetBundle : APIComm
	{
		[Token(Token = "0x4001815")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private AssetBundleMeta s3AssetBundleMeta;

		[Token(Token = "0x170002FC")]
		public AssetBundle bundle
		{
			[Token(Token = "0x60018FE")]
			[Address(RVA = "0xDCD174", Offset = "0xDCD174", VA = "0xDCD174")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60018FF")]
			[Address(RVA = "0xDCD17C", Offset = "0xDCD17C", VA = "0xDCD17C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6001900")]
		[Address(RVA = "0xDCD184", Offset = "0xDCD184", VA = "0xDCD184")]
		public APIGetS3AssetBundle(AssetBundleMeta assetBundleMeta)
		{
		}

		[Token(Token = "0x6001901")]
		[Address(RVA = "0xDCD1B4", Offset = "0xDCD1B4", VA = "0xDCD1B4", Slot = "4")]
		protected override UnityWebRequest GenerateWebRequest()
		{
			return null;
		}

		[Token(Token = "0x6001902")]
		[Address(RVA = "0xDCD204", Offset = "0xDCD204", VA = "0xDCD204", Slot = "6")]
		protected override void ProcessSuccess(UnityWebRequest uwr)
		{
		}
	}
	[Token(Token = "0x20004D9")]
	public class APIGetS3Image : APIComm
	{
		[Token(Token = "0x4001817")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private string bucket;

		[Token(Token = "0x4001818")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private string obj;

		[Token(Token = "0x170002FD")]
		public Texture2D image
		{
			[Token(Token = "0x6001903")]
			[Address(RVA = "0xDCD2A0", Offset = "0xDCD2A0", VA = "0xDCD2A0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001904")]
			[Address(RVA = "0xDCD2A8", Offset = "0xDCD2A8", VA = "0xDCD2A8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6001905")]
		[Address(RVA = "0xDCD2B0", Offset = "0xDCD2B0", VA = "0xDCD2B0")]
		public APIGetS3Image(string bucket, string obj)
		{
		}

		[Token(Token = "0x6001906")]
		[Address(RVA = "0xDCD338", Offset = "0xDCD338", VA = "0xDCD338", Slot = "4")]
		protected override UnityWebRequest GenerateWebRequest()
		{
			return null;
		}

		[Token(Token = "0x6001907")]
		[Address(RVA = "0xDCD3E8", Offset = "0xDCD3E8", VA = "0xDCD3E8", Slot = "6")]
		protected override void ProcessSuccess(UnityWebRequest uwr)
		{
		}
	}
	[Token(Token = "0x20004DA")]
	public class APIGetTopLevelMarketplaceListings : APIComm
	{
		[Token(Token = "0x20004DB")]
		public class ResponseMarketplaceBundleSet
		{
			[Token(Token = "0x400181D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public APIGetFullBundleSetForItem.ResponseMarketplaceBundle[] bundles;

			[Token(Token = "0x400181E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public bool more_pages;

			[Token(Token = "0x600190F")]
			[Address(RVA = "0xDCD840", Offset = "0xDCD840", VA = "0xDCD840")]
			public ResponseMarketplaceBundleSet()
			{
			}

			[Token(Token = "0x6001910")]
			[Address(RVA = "0xDCAD58", Offset = "0xDCAD58", VA = "0xDCAD58")]
			public List<Bundle> GetBundleList()
			{
				return null;
			}
		}

		[Token(Token = "0x400181C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private int page;

		[Token(Token = "0x170002FE")]
		public List<Bundle> marketplaceBundleList
		{
			[Token(Token = "0x6001908")]
			[Address(RVA = "0xDCD5B4", Offset = "0xDCD5B4", VA = "0xDCD5B4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001909")]
			[Address(RVA = "0xDCD5BC", Offset = "0xDCD5BC", VA = "0xDCD5BC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170002FF")]
		public bool more_pages
		{
			[Token(Token = "0x600190A")]
			[Address(RVA = "0xDCD5C4", Offset = "0xDCD5C4", VA = "0xDCD5C4")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600190B")]
			[Address(RVA = "0xDCD5CC", Offset = "0xDCD5CC", VA = "0xDCD5CC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x600190C")]
		[Address(RVA = "0xDCD5D8", Offset = "0xDCD5D8", VA = "0xDCD5D8")]
		public APIGetTopLevelMarketplaceListings(int page)
		{
		}

		[Token(Token = "0x600190D")]
		[Address(RVA = "0xDCD644", Offset = "0xDCD644", VA = "0xDCD644", Slot = "4")]
		protected override UnityWebRequest GenerateWebRequest()
		{
			return null;
		}

		[Token(Token = "0x600190E")]
		[Address(RVA = "0xDCD6E4", Offset = "0xDCD6E4", VA = "0xDCD6E4", Slot = "6")]
		protected override void ProcessSuccess(UnityWebRequest uwr)
		{
		}
	}
	[Token(Token = "0x20004DC")]
	public class APIGetUserDeckList : APIComm
	{
		[Token(Token = "0x20004DD")]
		public class ResponseGetUserDeckList
		{
			[Token(Token = "0x4001822")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public List<ResponseUserDeckListItem> deck_list;

			[Token(Token = "0x4001823")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public bool more_pages;

			[Token(Token = "0x6001918")]
			[Address(RVA = "0xDCDD04", Offset = "0xDCDD04", VA = "0xDCDD04")]
			public ResponseGetUserDeckList()
			{
			}

			[Token(Token = "0x6001919")]
			[Address(RVA = "0xDCDAD4", Offset = "0xDCDAD4", VA = "0xDCDAD4")]
			public List<DeckListItem> GetDeckList()
			{
				return null;
			}
		}

		[Token(Token = "0x20004DE")]
		public class ResponseUserDeckListItem
		{
			[Token(Token = "0x4001824")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string deck_id;

			[Token(Token = "0x4001825")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string name;

			[Token(Token = "0x4001826")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public bool edit_access;

			[Token(Token = "0x4001827")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string creator;

			[Token(Token = "0x4001828")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public bool librarium_deck;

			[Token(Token = "0x4001829")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
			public bool auto_generated_skip;

			[Token(Token = "0x400182A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
			public bool curated_skip;

			[Token(Token = "0x400182B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public int language_type_enum;

			[Token(Token = "0x400182C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public float overall_rating;

			[Token(Token = "0x400182D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public int user_rating;

			[Token(Token = "0x600191A")]
			[Address(RVA = "0xDCDD0C", Offset = "0xDCDD0C", VA = "0xDCDD0C")]
			public ResponseUserDeckListItem()
			{
			}
		}

		[Token(Token = "0x4001821")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private int page;

		[Token(Token = "0x17000300")]
		public List<DeckListItem> userDeckList
		{
			[Token(Token = "0x6001911")]
			[Address(RVA = "0xDCD848", Offset = "0xDCD848", VA = "0xDCD848")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001912")]
			[Address(RVA = "0xDCD850", Offset = "0xDCD850", VA = "0xDCD850")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000301")]
		public bool more_pages
		{
			[Token(Token = "0x6001913")]
			[Address(RVA = "0xDCD858", Offset = "0xDCD858", VA = "0xDCD858")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001914")]
			[Address(RVA = "0xDCD860", Offset = "0xDCD860", VA = "0xDCD860")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6001915")]
		[Address(RVA = "0xDCD86C", Offset = "0xDCD86C", VA = "0xDCD86C")]
		public APIGetUserDeckList(int page)
		{
		}

		[Token(Token = "0x6001916")]
		[Address(RVA = "0xDCD8D8", Offset = "0xDCD8D8", VA = "0xDCD8D8", Slot = "4")]
		protected override UnityWebRequest GenerateWebRequest()
		{
			return null;
		}

		[Token(Token = "0x6001917")]
		[Address(RVA = "0xDCD978", Offset = "0xDCD978", VA = "0xDCD978", Slot = "6")]
		protected override void ProcessSuccess(UnityWebRequest uwr)
		{
		}
	}
	[Token(Token = "0x20004DF")]
	public class APIGrantAccessToAllDecksForItem : APIComm
	{
		[Token(Token = "0x20004E0")]
		public class RequestItemAccess
		{
			[Token(Token = "0x400182F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string item_id;

			[Token(Token = "0x600191D")]
			[Address(RVA = "0xDCDECC", Offset = "0xDCDECC", VA = "0xDCDECC")]
			public RequestItemAccess(Guid itemId)
			{
			}
		}

		[Token(Token = "0x400182E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Guid itemId;

		[Token(Token = "0x600191B")]
		[Address(RVA = "0xDCDD14", Offset = "0xDCDD14", VA = "0xDCDD14")]
		public APIGrantAccessToAllDecksForItem(Guid itemId)
		{
		}

		[Token(Token = "0x600191C")]
		[Address(RVA = "0xDCDD88", Offset = "0xDCDD88", VA = "0xDCDD88", Slot = "4")]
		protected override UnityWebRequest GenerateWebRequest()
		{
			return null;
		}
	}
	[Token(Token = "0x20004E1")]
	public class APIMakeMarketplacePurchase : APIComm
	{
		[Token(Token = "0x20004E2")]
		public class RequestMarketplacePurchase
		{
			[Token(Token = "0x4001831")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string listing_id;

			[Token(Token = "0x6001920")]
			[Address(RVA = "0xDCDFC0", Offset = "0xDCDFC0", VA = "0xDCDFC0")]
			public RequestMarketplacePurchase(string listingId)
			{
			}
		}

		[Token(Token = "0x4001830")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private RequestMarketplacePurchase requestMarketplacePurchase;

		[Token(Token = "0x600191E")]
		[Address(RVA = "0xDCDF0C", Offset = "0xDCDF0C", VA = "0xDCDF0C")]
		public APIMakeMarketplacePurchase(string listingId)
		{
		}

		[Token(Token = "0x600191F")]
		[Address(RVA = "0xDCDFF0", Offset = "0xDCDFF0", VA = "0xDCDFF0", Slot = "4")]
		protected override UnityWebRequest GenerateWebRequest()
		{
			return null;
		}
	}
	[Token(Token = "0x20004E3")]
	public class APINetworkCheck : APIComm
	{
		[Token(Token = "0x6001921")]
		[Address(RVA = "0xDCE10C", Offset = "0xDCE10C", VA = "0xDCE10C")]
		public APINetworkCheck()
		{
		}

		[Token(Token = "0x6001922")]
		[Address(RVA = "0xDCE170", Offset = "0xDCE170", VA = "0xDCE170", Slot = "4")]
		protected override UnityWebRequest GenerateWebRequest()
		{
			return null;
		}

		[Token(Token = "0x6001923")]
		[Address(RVA = "0xDCE198", Offset = "0xDCE198", VA = "0xDCE198", Slot = "6")]
		protected override void ProcessSuccess(UnityWebRequest uwr)
		{
		}
	}
	[Token(Token = "0x20004E4")]
	public class APIRefreshToken : APIComm
	{
		[Token(Token = "0x20004E5")]
		public class RequestRefreshToken
		{
			[Token(Token = "0x4001835")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string username;

			[Token(Token = "0x4001836")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string refresh_token;

			[Token(Token = "0x600192B")]
			[Address(RVA = "0xDCE27C", Offset = "0xDCE27C", VA = "0xDCE27C")]
			public RequestRefreshToken(string username, string refresh_token)
			{
			}
		}

		[Token(Token = "0x20004E6")]
		public class ResponseRefreshToken
		{
			[Token(Token = "0x4001837")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string access_token;

			[Token(Token = "0x4001838")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string refresh_token;

			[Token(Token = "0x600192C")]
			[Address(RVA = "0xDCE514", Offset = "0xDCE514", VA = "0xDCE514")]
			public ResponseRefreshToken()
			{
			}
		}

		[Token(Token = "0x4001832")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private RequestRefreshToken requestRefreshToken;

		[Token(Token = "0x17000302")]
		public string accessToken
		{
			[Token(Token = "0x6001924")]
			[Address(RVA = "0xDCE19C", Offset = "0xDCE19C", VA = "0xDCE19C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001925")]
			[Address(RVA = "0xDCE1A4", Offset = "0xDCE1A4", VA = "0xDCE1A4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000303")]
		public string refreshToken
		{
			[Token(Token = "0x6001926")]
			[Address(RVA = "0xDCE1AC", Offset = "0xDCE1AC", VA = "0xDCE1AC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001927")]
			[Address(RVA = "0xDCE1B4", Offset = "0xDCE1B4", VA = "0xDCE1B4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6001928")]
		[Address(RVA = "0xDCE1BC", Offset = "0xDCE1BC", VA = "0xDCE1BC")]
		public APIRefreshToken(string username, string refreshToken)
		{
		}

		[Token(Token = "0x6001929")]
		[Address(RVA = "0xDCE2C0", Offset = "0xDCE2C0", VA = "0xDCE2C0", Slot = "4")]
		protected override UnityWebRequest GenerateWebRequest()
		{
			return null;
		}

		[Token(Token = "0x600192A")]
		[Address(RVA = "0xDCE3B4", Offset = "0xDCE3B4", VA = "0xDCE3B4", Slot = "6")]
		protected override void ProcessSuccess(UnityWebRequest uwr)
		{
		}
	}
	[Token(Token = "0x20004E7")]
	public class APIRegister : APIComm
	{
		[Token(Token = "0x20004E8")]
		public class RequestRegister
		{
			[Token(Token = "0x4001841")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string username;

			[Token(Token = "0x4001842")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string password;

			[Token(Token = "0x4001843")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string email;

			[Token(Token = "0x4001844")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string firstName;

			[Token(Token = "0x4001845")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public string lastName;

			[Token(Token = "0x4001846")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public string phone;

			[Token(Token = "0x600193F")]
			[Address(RVA = "0xDCE690", Offset = "0xDCE690", VA = "0xDCE690")]
			public RequestRegister(string username, string password, string email, string firstName, string lastName, string phone)
			{
			}
		}

		[Token(Token = "0x20004E9")]
		public class ResponseRegister
		{
			[Token(Token = "0x4001847")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool session_blocked;

			[Token(Token = "0x4001848")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string blockage_message;

			[Token(Token = "0x4001849")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string user_id;

			[Token(Token = "0x400184A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string username;

			[Token(Token = "0x400184B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public string access_token;

			[Token(Token = "0x400184C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public string refresh_token;

			[Token(Token = "0x400184D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public string code;

			[Token(Token = "0x400184E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public string name;

			[Token(Token = "0x400184F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public string message;

			[Token(Token = "0x6001940")]
			[Address(RVA = "0xDCEB58", Offset = "0xDCEB58", VA = "0xDCEB58")]
			public ResponseRegister()
			{
			}
		}

		[Token(Token = "0x20004EA")]
		public class ResponseRegisterError
		{
			[Token(Token = "0x4001850")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string code;

			[Token(Token = "0x4001851")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string name;

			[Token(Token = "0x4001852")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string message;

			[Token(Token = "0x6001941")]
			[Address(RVA = "0xDCEB60", Offset = "0xDCEB60", VA = "0xDCEB60")]
			private ResponseRegisterError()
			{
			}
		}

		[Token(Token = "0x4001839")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private RequestRegister requestRegister;

		[Token(Token = "0x17000304")]
		public bool sessionBlocked
		{
			[Token(Token = "0x600192D")]
			[Address(RVA = "0xDCE51C", Offset = "0xDCE51C", VA = "0xDCE51C")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600192E")]
			[Address(RVA = "0xDCE524", Offset = "0xDCE524", VA = "0xDCE524")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000305")]
		public string blockageMessage
		{
			[Token(Token = "0x600192F")]
			[Address(RVA = "0xDCE530", Offset = "0xDCE530", VA = "0xDCE530")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001930")]
			[Address(RVA = "0xDCE538", Offset = "0xDCE538", VA = "0xDCE538")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000306")]
		public bool cognitoSuccess
		{
			[Token(Token = "0x6001931")]
			[Address(RVA = "0xDCE540", Offset = "0xDCE540", VA = "0xDCE540")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001932")]
			[Address(RVA = "0xDCE548", Offset = "0xDCE548", VA = "0xDCE548")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000307")]
		public Guid userId
		{
			[Token(Token = "0x6001933")]
			[Address(RVA = "0xDCE554", Offset = "0xDCE554", VA = "0xDCE554")]
			[CompilerGenerated]
			get
			{
				return default(Guid);
			}
			[Token(Token = "0x6001934")]
			[Address(RVA = "0xDCE564", Offset = "0xDCE564", VA = "0xDCE564")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000308")]
		public string accessToken
		{
			[Token(Token = "0x6001935")]
			[Address(RVA = "0xDCE570", Offset = "0xDCE570", VA = "0xDCE570")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001936")]
			[Address(RVA = "0xDCE578", Offset = "0xDCE578", VA = "0xDCE578")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000309")]
		public string refreshToken
		{
			[Token(Token = "0x6001937")]
			[Address(RVA = "0xDCE580", Offset = "0xDCE580", VA = "0xDCE580")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001938")]
			[Address(RVA = "0xDCE588", Offset = "0xDCE588", VA = "0xDCE588")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700030A")]
		public new string errorMessage
		{
			[Token(Token = "0x6001939")]
			[Address(RVA = "0xDCE590", Offset = "0xDCE590", VA = "0xDCE590")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600193A")]
			[Address(RVA = "0xDCE598", Offset = "0xDCE598", VA = "0xDCE598")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x600193B")]
		[Address(RVA = "0xDCE5A0", Offset = "0xDCE5A0", VA = "0xDCE5A0")]
		public APIRegister(string username, string password, string email, string firstName, string lastName, string phone)
		{
		}

		[Token(Token = "0x600193C")]
		[Address(RVA = "0xDCE734", Offset = "0xDCE734", VA = "0xDCE734", Slot = "4")]
		protected override UnityWebRequest GenerateWebRequest()
		{
			return null;
		}

		[Token(Token = "0x600193D")]
		[Address(RVA = "0xDCE828", Offset = "0xDCE828", VA = "0xDCE828", Slot = "6")]
		protected override void ProcessSuccess(UnityWebRequest uwr)
		{
		}

		[Token(Token = "0x600193E")]
		[Address(RVA = "0xDCE9F0", Offset = "0xDCE9F0", VA = "0xDCE9F0", Slot = "5")]
		protected override void ProcessError(UnityWebRequest uwr)
		{
		}
	}
	[Token(Token = "0x20004EB")]
	public class APISessionLogin : APIComm
	{
		[Token(Token = "0x20004EC")]
		public class RequestSessionLogin
		{
			[Token(Token = "0x400185F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string username;

			[Token(Token = "0x4001860")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string password;

			[Token(Token = "0x4001861")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public int session_type_enum;

			[Token(Token = "0x600195A")]
			[Address(RVA = "0xDCECCC", Offset = "0xDCECCC", VA = "0xDCECCC")]
			public RequestSessionLogin(string username, string password, SessionType sessionType)
			{
			}
		}

		[Token(Token = "0x20004ED")]
		public class ResponseSessionLogin
		{
			[Token(Token = "0x4001862")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool session_blocked;

			[Token(Token = "0x4001863")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string blockage_message;

			[Token(Token = "0x4001864")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string user_id;

			[Token(Token = "0x4001865")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string username;

			[Token(Token = "0x4001866")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public string access_token;

			[Token(Token = "0x4001867")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public string refresh_token;

			[Token(Token = "0x4001868")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public string session_id;

			[Token(Token = "0x4001869")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public int[] user_events;

			[Token(Token = "0x400186A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public ResponseUserAttributes[] user_attributes;

			[Token(Token = "0x400186B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public ResponseLanguageVersions[] language_versions;

			[Token(Token = "0x400186C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public ResponseUserAssessmentMetrics assessment_metrics;

			[Token(Token = "0x600195B")]
			[Address(RVA = "0xDCF738", Offset = "0xDCF738", VA = "0xDCF738")]
			public ResponseSessionLogin()
			{
			}

			[Token(Token = "0x600195C")]
			[Address(RVA = "0xDCF06C", Offset = "0xDCF06C", VA = "0xDCF06C")]
			public List<UserEvent> GetUserEvents()
			{
				return null;
			}

			[Token(Token = "0x600195D")]
			[Address(RVA = "0xDCF264", Offset = "0xDCF264", VA = "0xDCF264")]
			public Dictionary<UserAttribute, float> GetUserAttributes()
			{
				return null;
			}

			[Token(Token = "0x600195E")]
			[Address(RVA = "0xDCF41C", Offset = "0xDCF41C", VA = "0xDCF41C")]
			public Dictionary<Language, int> GetLanguageVersions()
			{
				return null;
			}
		}

		[Token(Token = "0x20004EE")]
		public class ResponseSessionLoginError
		{
			[Token(Token = "0x400186D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string code;

			[Token(Token = "0x400186E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string name;

			[Token(Token = "0x400186F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string message;

			[Token(Token = "0x600195F")]
			[Address(RVA = "0xDCF740", Offset = "0xDCF740", VA = "0xDCF740")]
			private ResponseSessionLoginError()
			{
			}
		}

		[Token(Token = "0x20004EF")]
		public class ResponseUserAttributes
		{
			[Token(Token = "0x4001870")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int attribute_type_enum;

			[Token(Token = "0x4001871")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float value;

			[Token(Token = "0x6001960")]
			[Address(RVA = "0xDCF748", Offset = "0xDCF748", VA = "0xDCF748")]
			public ResponseUserAttributes()
			{
			}
		}

		[Token(Token = "0x20004F0")]
		public class ResponseLanguageVersions
		{
			[Token(Token = "0x4001872")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int language_type_enum;

			[Token(Token = "0x4001873")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int version;

			[Token(Token = "0x6001961")]
			[Address(RVA = "0xDCF750", Offset = "0xDCF750", VA = "0xDCF750")]
			public ResponseLanguageVersions()
			{
			}
		}

		[Token(Token = "0x20004F1")]
		public class ResponseUserAssessmentMetrics
		{
			[Token(Token = "0x4001874")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float total_card_guesses;

			[Token(Token = "0x4001875")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float total_card_memorizations;

			[Token(Token = "0x4001876")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float total_multiple_choice_questions;

			[Token(Token = "0x4001877")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public float total_multiple_choice_correct;

			[Token(Token = "0x6001962")]
			[Address(RVA = "0xDCF758", Offset = "0xDCF758", VA = "0xDCF758")]
			public ResponseUserAssessmentMetrics()
			{
			}
		}

		[Token(Token = "0x4001853")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private RequestSessionLogin requestSessionLogin;

		[Token(Token = "0x400185E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private bool didBadTestToken;

		[Token(Token = "0x1700030B")]
		public bool sessionBlocked
		{
			[Token(Token = "0x6001942")]
			[Address(RVA = "0xDCEB68", Offset = "0xDCEB68", VA = "0xDCEB68")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001943")]
			[Address(RVA = "0xDCEB70", Offset = "0xDCEB70", VA = "0xDCEB70")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700030C")]
		public string blockageMessage
		{
			[Token(Token = "0x6001944")]
			[Address(RVA = "0xDCEB7C", Offset = "0xDCEB7C", VA = "0xDCEB7C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001945")]
			[Address(RVA = "0xDCEB84", Offset = "0xDCEB84", VA = "0xDCEB84")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700030D")]
		public Guid userId
		{
			[Token(Token = "0x6001946")]
			[Address(RVA = "0xDCEB8C", Offset = "0xDCEB8C", VA = "0xDCEB8C")]
			[CompilerGenerated]
			get
			{
				return default(Guid);
			}
			[Token(Token = "0x6001947")]
			[Address(RVA = "0xDCEB98", Offset = "0xDCEB98", VA = "0xDCEB98")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700030E")]
		public string accessToken
		{
			[Token(Token = "0x6001948")]
			[Address(RVA = "0xDCEBA0", Offset = "0xDCEBA0", VA = "0xDCEBA0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001949")]
			[Address(RVA = "0xDCEBA8", Offset = "0xDCEBA8", VA = "0xDCEBA8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700030F")]
		public string refreshToken
		{
			[Token(Token = "0x600194A")]
			[Address(RVA = "0xDCEBB0", Offset = "0xDCEBB0", VA = "0xDCEBB0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600194B")]
			[Address(RVA = "0xDCEBB8", Offset = "0xDCEBB8", VA = "0xDCEBB8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000310")]
		public Guid sessionId
		{
			[Token(Token = "0x600194C")]
			[Address(RVA = "0xDCEBC0", Offset = "0xDCEBC0", VA = "0xDCEBC0")]
			[CompilerGenerated]
			get
			{
				return default(Guid);
			}
			[Token(Token = "0x600194D")]
			[Address(RVA = "0xDCEBCC", Offset = "0xDCEBCC", VA = "0xDCEBCC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000311")]
		public List<UserEvent> userEvents
		{
			[Token(Token = "0x600194E")]
			[Address(RVA = "0xDCEBD4", Offset = "0xDCEBD4", VA = "0xDCEBD4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600194F")]
			[Address(RVA = "0xDCEBDC", Offset = "0xDCEBDC", VA = "0xDCEBDC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000312")]
		public Dictionary<UserAttribute, float> userAttributes
		{
			[Token(Token = "0x6001950")]
			[Address(RVA = "0xDCEBE4", Offset = "0xDCEBE4", VA = "0xDCEBE4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001951")]
			[Address(RVA = "0xDCEBEC", Offset = "0xDCEBEC", VA = "0xDCEBEC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000313")]
		public Dictionary<Language, int> languageVersions
		{
			[Token(Token = "0x6001952")]
			[Address(RVA = "0xDCEBF4", Offset = "0xDCEBF4", VA = "0xDCEBF4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001953")]
			[Address(RVA = "0xDCEBFC", Offset = "0xDCEBFC", VA = "0xDCEBFC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000314")]
		public new string errorMessage
		{
			[Token(Token = "0x6001954")]
			[Address(RVA = "0xDCEC04", Offset = "0xDCEC04", VA = "0xDCEC04")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001955")]
			[Address(RVA = "0xDCEC0C", Offset = "0xDCEC0C", VA = "0xDCEC0C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6001956")]
		[Address(RVA = "0xDCEC14", Offset = "0xDCEC14", VA = "0xDCEC14")]
		public APISessionLogin(string username, string password)
		{
		}

		[Token(Token = "0x6001957")]
		[Address(RVA = "0xDCED24", Offset = "0xDCED24", VA = "0xDCED24", Slot = "4")]
		protected override UnityWebRequest GenerateWebRequest()
		{
			return null;
		}

		[Token(Token = "0x6001958")]
		[Address(RVA = "0xDCEE6C", Offset = "0xDCEE6C", VA = "0xDCEE6C", Slot = "6")]
		protected override void ProcessSuccess(UnityWebRequest uwr)
		{
		}

		[Token(Token = "0x6001959")]
		[Address(RVA = "0xDCF5D0", Offset = "0xDCF5D0", VA = "0xDCF5D0", Slot = "5")]
		protected override void ProcessError(UnityWebRequest uwr)
		{
		}
	}
	[Token(Token = "0x20004F2")]
	public class APIStartAssessment : APIComm
	{
		[Token(Token = "0x20004F3")]
		public class RequestStartAssessment
		{
			[Token(Token = "0x400187A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string deck_session_id;

			[Token(Token = "0x400187B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int assessment_type_enum;

			[Token(Token = "0x6001968")]
			[Address(RVA = "0xDCF830", Offset = "0xDCF830", VA = "0xDCF830")]
			public RequestStartAssessment(Guid deckSessionId, AssessmentType assessmentType)
			{
			}
		}

		[Token(Token = "0x20004F4")]
		public class ResponseStartAssessment
		{
			[Token(Token = "0x400187C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string assessment_id;

			[Token(Token = "0x6001969")]
			[Address(RVA = "0xDCFAD0", Offset = "0xDCFAD0", VA = "0xDCFAD0")]
			public ResponseStartAssessment()
			{
			}
		}

		[Token(Token = "0x4001878")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private RequestStartAssessment requestStartAssessment;

		[Token(Token = "0x17000315")]
		public Guid assessmentId
		{
			[Token(Token = "0x6001963")]
			[Address(RVA = "0xDCF760", Offset = "0xDCF760", VA = "0xDCF760")]
			[CompilerGenerated]
			get
			{
				return default(Guid);
			}
			[Token(Token = "0x6001964")]
			[Address(RVA = "0xDCF76C", Offset = "0xDCF76C", VA = "0xDCF76C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6001965")]
		[Address(RVA = "0xDCF774", Offset = "0xDCF774", VA = "0xDCF774")]
		public APIStartAssessment(Guid deckSessionId, AssessmentType assessmentType)
		{
		}

		[Token(Token = "0x6001966")]
		[Address(RVA = "0xDCF880", Offset = "0xDCF880", VA = "0xDCF880", Slot = "4")]
		protected override UnityWebRequest GenerateWebRequest()
		{
			return null;
		}

		[Token(Token = "0x6001967")]
		[Address(RVA = "0xDCF988", Offset = "0xDCF988", VA = "0xDCF988", Slot = "6")]
		protected override void ProcessSuccess(UnityWebRequest uwr)
		{
		}
	}
	[Token(Token = "0x20004F5")]
	public class APIStartDeckSession : APIComm
	{
		[Token(Token = "0x20004F6")]
		public class RequestStartDeckSession
		{
			[Token(Token = "0x400187F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string session_id;

			[Token(Token = "0x4001880")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string deck_id;

			[Token(Token = "0x600196F")]
			[Address(RVA = "0xDCFBB8", Offset = "0xDCFBB8", VA = "0xDCFBB8")]
			public RequestStartDeckSession(Guid sessionId, Guid deckId)
			{
			}
		}

		[Token(Token = "0x20004F7")]
		public class ResponseStartDeckSession
		{
			[Token(Token = "0x4001881")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string deck_session_id;

			[Token(Token = "0x6001970")]
			[Address(RVA = "0xDCFE68", Offset = "0xDCFE68", VA = "0xDCFE68")]
			public ResponseStartDeckSession()
			{
			}
		}

		[Token(Token = "0x400187D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private RequestStartDeckSession requestStartDeckSession;

		[Token(Token = "0x17000316")]
		public Guid deckSessionId
		{
			[Token(Token = "0x600196A")]
			[Address(RVA = "0xDCFAD8", Offset = "0xDCFAD8", VA = "0xDCFAD8")]
			[CompilerGenerated]
			get
			{
				return default(Guid);
			}
			[Token(Token = "0x600196B")]
			[Address(RVA = "0xDCFAE4", Offset = "0xDCFAE4", VA = "0xDCFAE4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x600196C")]
		[Address(RVA = "0xDCFAEC", Offset = "0xDCFAEC", VA = "0xDCFAEC")]
		public APIStartDeckSession(Guid sessionId, Guid deckId)
		{
		}

		[Token(Token = "0x600196D")]
		[Address(RVA = "0xDCFC18", Offset = "0xDCFC18", VA = "0xDCFC18", Slot = "4")]
		protected override UnityWebRequest GenerateWebRequest()
		{
			return null;
		}

		[Token(Token = "0x600196E")]
		[Address(RVA = "0xDCFD20", Offset = "0xDCFD20", VA = "0xDCFD20", Slot = "6")]
		protected override void ProcessSuccess(UnityWebRequest uwr)
		{
		}
	}
	[Token(Token = "0x20004F8")]
	public class APITestExecutor : MonoBehaviour
	{
		[Token(Token = "0x20004F9")]
		[CompilerGenerated]
		private sealed class <>c__DisplayClass2_0
		{
			[Token(Token = "0x4001883")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public APIGetS3AssetBundle testCommTwo;

			[Token(Token = "0x6001974")]
			[Address(RVA = "0xDCFF18", Offset = "0xDCFF18", VA = "0xDCFF18")]
			public <>c__DisplayClass2_0()
			{
			}

			[Token(Token = "0x6001975")]
			[Address(RVA = "0xDCFF20", Offset = "0xDCFF20", VA = "0xDCFF20")]
			internal void <co_TestCoro>b__1(bool successful)
			{
			}
		}

		[Token(Token = "0x20004FB")]
		[CompilerGenerated]
		private sealed class <co_TestCoro>d__2 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001886")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001887")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001888")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public APITestExecutor <>4__this;

			[Token(Token = "0x4001889")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private <>c__DisplayClass2_0 <>8__1;

			[Token(Token = "0x400188A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private APIGetAssetBundlesMeta <testComm>5__2;

			[Token(Token = "0x17000317")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600197C")]
				[Address(RVA = "0xDD05EC", Offset = "0xDD05EC", VA = "0xDD05EC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000318")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600197E")]
				[Address(RVA = "0xDD0634", Offset = "0xDD0634", VA = "0xDD0634", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001979")]
			[Address(RVA = "0xDCFEE8", Offset = "0xDCFEE8", VA = "0xDCFEE8")]
			[DebuggerHidden]
			public <co_TestCoro>d__2(int <>1__state)
			{
			}

			[Token(Token = "0x600197A")]
			[Address(RVA = "0xDD0140", Offset = "0xDD0140", VA = "0xDD0140", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600197B")]
			[Address(RVA = "0xDD0144", Offset = "0xDD0144", VA = "0xDD0144", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600197D")]
			[Address(RVA = "0xDD05F4", Offset = "0xDD05F4", VA = "0xDD05F4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001882")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float delaySeconds;

		[Token(Token = "0x6001971")]
		[Address(RVA = "0xDCFE70", Offset = "0xDCFE70", VA = "0xDCFE70")]
		private void Start()
		{
		}

		[Token(Token = "0x6001972")]
		[Address(RVA = "0xDCFE74", Offset = "0xDCFE74", VA = "0xDCFE74")]
		[IteratorStateMachine(typeof(<co_TestCoro>d__2))]
		private IEnumerator co_TestCoro()
		{
			return null;
		}

		[Token(Token = "0x6001973")]
		[Address(RVA = "0xDCFF10", Offset = "0xDCFF10", VA = "0xDCFF10")]
		public APITestExecutor()
		{
		}
	}
	[Token(Token = "0x20004FC")]
	public class APIUpdateCardProp : APIComm
	{
		[Token(Token = "0x20004FD")]
		public class RequestCardProp
		{
			[Token(Token = "0x400188C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string card_id;

			[Token(Token = "0x400188D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string prop_id;

			[Token(Token = "0x400188E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string prop_name;

			[Token(Token = "0x6001981")]
			[Address(RVA = "0xDD0710", Offset = "0xDD0710", VA = "0xDD0710")]
			public RequestCardProp(Guid cardId, Guid propId, string propName)
			{
			}
		}

		[Token(Token = "0x400188B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private RequestCardProp requestCardProp;

		[Token(Token = "0x600197F")]
		[Address(RVA = "0xDD063C", Offset = "0xDD063C", VA = "0xDD063C")]
		public APIUpdateCardProp(Guid cardId, Guid propId, string propName)
		{
		}

		[Token(Token = "0x6001980")]
		[Address(RVA = "0xDD078C", Offset = "0xDD078C", VA = "0xDD078C", Slot = "4")]
		protected override UnityWebRequest GenerateWebRequest()
		{
			return null;
		}
	}
	[Token(Token = "0x20004FE")]
	public class APIUpsertCardPositions : APIComm
	{
		[Token(Token = "0x20004FF")]
		public class RequestCardPosition
		{
			[Token(Token = "0x4001890")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string card_id;

			[Token(Token = "0x4001891")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int room_enum;

			[Token(Token = "0x4001892")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public float pos_x;

			[Token(Token = "0x4001893")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float pos_y;

			[Token(Token = "0x4001894")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public float pos_z;

			[Token(Token = "0x4001895")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float eul_x;

			[Token(Token = "0x4001896")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float eul_y;

			[Token(Token = "0x4001897")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float eul_z;

			[Token(Token = "0x6001984")]
			[Address(RVA = "0xDD0B28", Offset = "0xDD0B28", VA = "0xDD0B28")]
			public RequestCardPosition(CardPosition cardPosition)
			{
			}

			[Token(Token = "0x6001985")]
			[Address(RVA = "0xDD0CB0", Offset = "0xDD0CB0", VA = "0xDD0CB0")]
			private void CorrectNearZeroCaseAndSigFigs()
			{
			}
		}

		[Token(Token = "0x400188F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<RequestCardPosition> requestCardPositions;

		[Token(Token = "0x6001982")]
		[Address(RVA = "0xDD0894", Offset = "0xDD0894", VA = "0xDD0894")]
		public APIUpsertCardPositions(List<CardPosition> cardPositions)
		{
		}

		[Token(Token = "0x6001983")]
		[Address(RVA = "0xDD0B94", Offset = "0xDD0B94", VA = "0xDD0B94", Slot = "4")]
		protected override UnityWebRequest GenerateWebRequest()
		{
			return null;
		}
	}
	[Token(Token = "0x2000500")]
	public class APIUpsertDeckAccess : APIComm
	{
		[Token(Token = "0x2000501")]
		public class RequestUpsertDeckAccess
		{
			[Token(Token = "0x4001899")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string deck_id;

			[Token(Token = "0x6001988")]
			[Address(RVA = "0xDD127C", Offset = "0xDD127C", VA = "0xDD127C")]
			public RequestUpsertDeckAccess(Guid deckId)
			{
			}
		}

		[Token(Token = "0x4001898")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Guid deckId;

		[Token(Token = "0x6001986")]
		[Address(RVA = "0xDD10C4", Offset = "0xDD10C4", VA = "0xDD10C4")]
		public APIUpsertDeckAccess(Guid deckId)
		{
		}

		[Token(Token = "0x6001987")]
		[Address(RVA = "0xDD1138", Offset = "0xDD1138", VA = "0xDD1138", Slot = "4")]
		protected override UnityWebRequest GenerateWebRequest()
		{
			return null;
		}
	}
	[Token(Token = "0x2000502")]
	public class APIUpsertDeckRating : APIComm
	{
		[Token(Token = "0x2000503")]
		public class RequestUpsertDeckAccess
		{
			[Token(Token = "0x400189D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string deck_id;

			[Token(Token = "0x400189E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int rating;

			[Token(Token = "0x400189F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string desc;

			[Token(Token = "0x600198B")]
			[Address(RVA = "0xDD14AC", Offset = "0xDD14AC", VA = "0xDD14AC")]
			public RequestUpsertDeckAccess(Guid deckId, int rating, string desc)
			{
			}
		}

		[Token(Token = "0x400189A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Guid deckId;

		[Token(Token = "0x400189B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private int rating;

		[Token(Token = "0x400189C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private string description;

		[Token(Token = "0x6001989")]
		[Address(RVA = "0xDD12BC", Offset = "0xDD12BC", VA = "0xDD12BC")]
		public APIUpsertDeckRating(Guid deckId, int rating, string description)
		{
		}

		[Token(Token = "0x600198A")]
		[Address(RVA = "0xDD1350", Offset = "0xDD1350", VA = "0xDD1350", Slot = "4")]
		protected override UnityWebRequest GenerateWebRequest()
		{
			return null;
		}
	}
	[Token(Token = "0x2000504")]
	public class APIUpsertUserAttributeSet : APIComm
	{
		[Token(Token = "0x2000505")]
		public class RequestUserAttribute
		{
			[Token(Token = "0x40018A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int attribute_type_enum;

			[Token(Token = "0x40018A2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float value;

			[Token(Token = "0x600198E")]
			[Address(RVA = "0xDD17B4", Offset = "0xDD17B4", VA = "0xDD17B4")]
			public RequestUserAttribute(UserAttribute a, float v)
			{
			}
		}

		[Token(Token = "0x40018A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<RequestUserAttribute> attributeSet;

		[Token(Token = "0x600198C")]
		[Address(RVA = "0xDD1510", Offset = "0xDD1510", VA = "0xDD1510")]
		public APIUpsertUserAttributeSet(Dictionary<UserAttribute, float> attributes)
		{
		}

		[Token(Token = "0x600198D")]
		[Address(RVA = "0xDD17EC", Offset = "0xDD17EC", VA = "0xDD17EC", Slot = "4")]
		protected override UnityWebRequest GenerateWebRequest()
		{
			return null;
		}
	}
	[Token(Token = "0x2000506")]
	public class APIGetPublicURLImage : APIComm
	{
		[Token(Token = "0x17000319")]
		public Texture2D image
		{
			[Token(Token = "0x600198F")]
			[Address(RVA = "0xDD18F4", Offset = "0xDD18F4", VA = "0xDD18F4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001990")]
			[Address(RVA = "0xDD18FC", Offset = "0xDD18FC", VA = "0xDD18FC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6001991")]
		[Address(RVA = "0xDD1904", Offset = "0xDD1904", VA = "0xDD1904")]
		public APIGetPublicURLImage(string url)
		{
		}

		[Token(Token = "0x6001992")]
		[Address(RVA = "0xDD1934", Offset = "0xDD1934", VA = "0xDD1934", Slot = "4")]
		protected override UnityWebRequest GenerateWebRequest()
		{
			return null;
		}

		[Token(Token = "0x6001993")]
		[Address(RVA = "0xDD1940", Offset = "0xDD1940", VA = "0xDD1940", Slot = "6")]
		protected override void ProcessSuccess(UnityWebRequest uwr)
		{
		}
	}
}
namespace OculusSampleFramework
{
	[Token(Token = "0x2000507")]
	public class ColorGrabbable : OVRGrabbable
	{
		[Token(Token = "0x40018A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Color COLOR_GRAB;

		[Token(Token = "0x40018A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly Color COLOR_HIGHLIGHT;

		[Token(Token = "0x40018A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Color m_color;

		[Token(Token = "0x40018A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private MeshRenderer[] m_meshRenderers;

		[Token(Token = "0x40018A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool m_highlight;

		[Token(Token = "0x1700031A")]
		public bool Highlight
		{
			[Token(Token = "0x6001994")]
			[Address(RVA = "0xDD1B5C", Offset = "0xDD1B5C", VA = "0xDD1B5C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001995")]
			[Address(RVA = "0xDD1B64", Offset = "0xDD1B64", VA = "0xDD1B64")]
			set
			{
			}
		}

		[Token(Token = "0x6001996")]
		[Address(RVA = "0xDD1B70", Offset = "0xDD1B70", VA = "0xDD1B70")]
		protected void UpdateColor()
		{
		}

		[Token(Token = "0x6001997")]
		[Address(RVA = "0xDD1D10", Offset = "0xDD1D10", VA = "0xDD1D10", Slot = "4")]
		public override void GrabBegin(OVRGrabber hand, Collider grabPoint)
		{
		}

		[Token(Token = "0x6001998")]
		[Address(RVA = "0xDD1D2C", Offset = "0xDD1D2C", VA = "0xDD1D2C", Slot = "5")]
		public override void GrabEnd(Vector3 linearVelocity, Vector3 angularVelocity)
		{
		}

		[Token(Token = "0x6001999")]
		[Address(RVA = "0xDD1D48", Offset = "0xDD1D48", VA = "0xDD1D48")]
		private void Awake()
		{
		}

		[Token(Token = "0x600199A")]
		[Address(RVA = "0xDD1C1C", Offset = "0xDD1C1C", VA = "0xDD1C1C")]
		private void SetColor(Color color)
		{
		}

		[Token(Token = "0x600199B")]
		[Address(RVA = "0xDD1FFC", Offset = "0xDD1FFC", VA = "0xDD1FFC")]
		public ColorGrabbable()
		{
		}
	}
	[Token(Token = "0x2000508")]
	public class DistanceGrabbable : OVRGrabbable
	{
		[Token(Token = "0x40018A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string m_materialColorField;

		[Token(Token = "0x40018AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private GrabbableCrosshair m_crosshair;

		[Token(Token = "0x40018AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private GrabManager m_crosshairManager;

		[Token(Token = "0x40018AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Renderer m_renderer;

		[Token(Token = "0x40018AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private MaterialPropertyBlock m_mpb;

		[Token(Token = "0x40018AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool m_inRange;

		[Token(Token = "0x40018AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		private bool m_targeted;

		[Token(Token = "0x1700031B")]
		public bool InRange
		{
			[Token(Token = "0x600199D")]
			[Address(RVA = "0xDD2074", Offset = "0xDD2074", VA = "0xDD2074")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600199E")]
			[Address(RVA = "0xDD207C", Offset = "0xDD207C", VA = "0xDD207C")]
			set
			{
			}
		}

		[Token(Token = "0x1700031C")]
		public bool Targeted
		{
			[Token(Token = "0x600199F")]
			[Address(RVA = "0xDD21E8", Offset = "0xDD21E8", VA = "0xDD21E8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60019A0")]
			[Address(RVA = "0xDD21F0", Offset = "0xDD21F0", VA = "0xDD21F0")]
			set
			{
			}
		}

		[Token(Token = "0x60019A1")]
		[Address(RVA = "0xDD21FC", Offset = "0xDD21FC", VA = "0xDD21FC", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x60019A2")]
		[Address(RVA = "0xDD2088", Offset = "0xDD2088", VA = "0xDD2088")]
		private void RefreshCrosshair()
		{
		}

		[Token(Token = "0x60019A3")]
		[Address(RVA = "0xDD23EC", Offset = "0xDD23EC", VA = "0xDD23EC")]
		public DistanceGrabbable()
		{
		}
	}
	[Token(Token = "0x2000509")]
	[RequireComponent(typeof(Rigidbody))]
	public class DistanceGrabber : OVRGrabber
	{
		[Token(Token = "0x40018B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[SerializeField]
		private float m_spherecastRadius;

		[Token(Token = "0x40018B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		private float m_noSnapThreshhold;

		[Token(Token = "0x40018B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[SerializeField]
		private bool m_useSpherecast;

		[Token(Token = "0x40018B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCD")]
		[SerializeField]
		public bool m_preventGrabThroughWalls;

		[Token(Token = "0x40018B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		private float m_objectPullVelocity;

		[Token(Token = "0x40018B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private float m_objectPullMaxRotationRate;

		[Token(Token = "0x40018B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private bool m_movingObjectToHand;

		[Token(Token = "0x40018B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[SerializeField]
		private float m_maxGrabDistance;

		[Token(Token = "0x40018B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[SerializeField]
		private int m_grabObjectsInLayer;

		[Token(Token = "0x40018B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		[SerializeField]
		private int m_obstructionLayer;

		[Token(Token = "0x40018BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private DistanceGrabber m_otherHand;

		[Token(Token = "0x40018BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		protected DistanceGrabbable m_target;

		[Token(Token = "0x40018BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		protected Collider m_targetCollider;

		[Token(Token = "0x1700031D")]
		public bool UseSpherecast
		{
			[Token(Token = "0x60019A4")]
			[Address(RVA = "0xDD23F4", Offset = "0xDD23F4", VA = "0xDD23F4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60019A5")]
			[Address(RVA = "0xDD23FC", Offset = "0xDD23FC", VA = "0xDD23FC")]
			set
			{
			}
		}

		[Token(Token = "0x60019A6")]
		[Address(RVA = "0xDD2418", Offset = "0xDD2418", VA = "0xDD2418", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x60019A7")]
		[Address(RVA = "0xDD2624", Offset = "0xDD2624", VA = "0xDD2624", Slot = "6")]
		public override void Update()
		{
		}

		[Token(Token = "0x60019A8")]
		[Address(RVA = "0xDD2F10", Offset = "0xDD2F10", VA = "0xDD2F10", Slot = "7")]
		protected override void GrabBegin()
		{
		}

		[Token(Token = "0x60019A9")]
		[Address(RVA = "0xDD3478", Offset = "0xDD3478", VA = "0xDD3478", Slot = "8")]
		protected override void MoveGrabbedObject(Vector3 pos, Quaternion rot, bool forceTeleport = false)
		{
		}

		[Token(Token = "0x60019AA")]
		[Address(RVA = "0xDD3888", Offset = "0xDD3888", VA = "0xDD3888")]
		private static DistanceGrabbable HitInfoToGrabbable(RaycastHit hitInfo)
		{
			return null;
		}

		[Token(Token = "0x60019AB")]
		[Address(RVA = "0xDD284C", Offset = "0xDD284C", VA = "0xDD284C")]
		protected bool FindTarget(out DistanceGrabbable dgOut, out Collider collOut)
		{
			return default(bool);
		}

		[Token(Token = "0x60019AC")]
		[Address(RVA = "0xDD3974", Offset = "0xDD3974", VA = "0xDD3974")]
		protected bool FindTargetWithSpherecast(out DistanceGrabbable dgOut, out Collider collOut)
		{
			return default(bool);
		}

		[Token(Token = "0x60019AD")]
		[Address(RVA = "0xDD3D74", Offset = "0xDD3D74", VA = "0xDD3D74", Slot = "9")]
		protected override void GrabVolumeEnable(bool enabled)
		{
		}

		[Token(Token = "0x60019AE")]
		[Address(RVA = "0xDD3D8C", Offset = "0xDD3D8C", VA = "0xDD3D8C", Slot = "10")]
		protected override void OffhandGrabbed(OVRGrabbable grabbable)
		{
		}

		[Token(Token = "0x60019AF")]
		[Address(RVA = "0xDD3D94", Offset = "0xDD3D94", VA = "0xDD3D94")]
		public DistanceGrabber()
		{
		}
	}
	[Token(Token = "0x200050A")]
	public class GrabbableCrosshair : MonoBehaviour
	{
		[Token(Token = "0x200050B")]
		public enum CrosshairState
		{
			[Token(Token = "0x40018C2")]
			Disabled,
			[Token(Token = "0x40018C3")]
			Enabled,
			[Token(Token = "0x40018C4")]
			Targeted
		}

		[Token(Token = "0x40018BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private CrosshairState m_state;

		[Token(Token = "0x40018BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Transform m_centerEyeAnchor;

		[Token(Token = "0x40018BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private GameObject m_targetedCrosshair;

		[Token(Token = "0x40018C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private GameObject m_enabledCrosshair;

		[Token(Token = "0x60019B0")]
		[Address(RVA = "0xDD3DB4", Offset = "0xDD3DB4", VA = "0xDD3DB4")]
		private void Start()
		{
		}

		[Token(Token = "0x60019B1")]
		[Address(RVA = "0xDD2360", Offset = "0xDD2360", VA = "0xDD2360")]
		public void SetState(CrosshairState cs)
		{
		}

		[Token(Token = "0x60019B2")]
		[Address(RVA = "0xDD3E1C", Offset = "0xDD3E1C", VA = "0xDD3E1C")]
		private void Update()
		{
		}

		[Token(Token = "0x60019B3")]
		[Address(RVA = "0xDD3E54", Offset = "0xDD3E54", VA = "0xDD3E54")]
		public GrabbableCrosshair()
		{
		}
	}
	[Token(Token = "0x200050C")]
	public class GrabManager : MonoBehaviour
	{
		[Token(Token = "0x40018C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Collider m_grabVolume;

		[Token(Token = "0x40018C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color OutlineColorInRange;

		[Token(Token = "0x40018C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Color OutlineColorHighlighted;

		[Token(Token = "0x40018C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Color OutlineColorOutOfRange;

		[Token(Token = "0x60019B4")]
		[Address(RVA = "0xDD3E5C", Offset = "0xDD3E5C", VA = "0xDD3E5C")]
		private void OnTriggerEnter(Collider otherCollider)
		{
		}

		[Token(Token = "0x60019B5")]
		[Address(RVA = "0xDD3F08", Offset = "0xDD3F08", VA = "0xDD3F08")]
		private void OnTriggerExit(Collider otherCollider)
		{
		}

		[Token(Token = "0x60019B6")]
		[Address(RVA = "0xDD3FB0", Offset = "0xDD3FB0", VA = "0xDD3FB0")]
		public GrabManager()
		{
		}
	}
	[Token(Token = "0x200050D")]
	public class PauseOnInputLoss : MonoBehaviour
	{
		[Token(Token = "0x60019B7")]
		[Address(RVA = "0xDD3FB8", Offset = "0xDD3FB8", VA = "0xDD3FB8")]
		private void Start()
		{
		}

		[Token(Token = "0x60019B8")]
		[Address(RVA = "0xDD40A4", Offset = "0xDD40A4", VA = "0xDD40A4")]
		private void OnInputFocusLost()
		{
		}

		[Token(Token = "0x60019B9")]
		[Address(RVA = "0xDD40B0", Offset = "0xDD40B0", VA = "0xDD40B0")]
		private void OnInputFocusAcquired()
		{
		}

		[Token(Token = "0x60019BA")]
		[Address(RVA = "0xDD40BC", Offset = "0xDD40BC", VA = "0xDD40BC")]
		public PauseOnInputLoss()
		{
		}
	}
	[Token(Token = "0x200050E")]
	public class BoneCapsuleTriggerLogic : MonoBehaviour
	{
		[Token(Token = "0x40018C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InteractableToolTags ToolTags;

		[Token(Token = "0x40018CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HashSet<ColliderZone> CollidersTouchingUs;

		[Token(Token = "0x40018CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<ColliderZone> _elementsToCleanUp;

		[Token(Token = "0x60019BB")]
		[Address(RVA = "0xDD40C4", Offset = "0xDD40C4", VA = "0xDD40C4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60019BC")]
		[Address(RVA = "0xDD4114", Offset = "0xDD4114", VA = "0xDD4114")]
		private void Update()
		{
		}

		[Token(Token = "0x60019BD")]
		[Address(RVA = "0xDD44EC", Offset = "0xDD44EC", VA = "0xDD44EC")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x60019BE")]
		[Address(RVA = "0xDD45D8", Offset = "0xDD45D8", VA = "0xDD45D8")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x60019BF")]
		[Address(RVA = "0xDD4118", Offset = "0xDD4118", VA = "0xDD4118")]
		private void CleanUpDeadColliders()
		{
		}

		[Token(Token = "0x60019C0")]
		[Address(RVA = "0xDD46C4", Offset = "0xDD46C4", VA = "0xDD46C4")]
		public BoneCapsuleTriggerLogic()
		{
		}
	}
	[Token(Token = "0x200050F")]
	public class ButtonController : Interactable
	{
		[Token(Token = "0x2000510")]
		public enum ContactTest
		{
			[Token(Token = "0x40018DB")]
			PerpenTest,
			[Token(Token = "0x40018DC")]
			BackwardsPress
		}

		[Token(Token = "0x40018CC")]
		private const float ENTRY_DOT_THRESHOLD = 0.8f;

		[Token(Token = "0x40018CD")]
		private const float PERP_DOT_THRESHOLD = 0.5f;

		[Token(Token = "0x40018CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private GameObject _proximityZone;

		[Token(Token = "0x40018CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private GameObject _contactZone;

		[Token(Token = "0x40018D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private GameObject _actionZone;

		[Token(Token = "0x40018D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private ContactTest[] _contactTests;

		[Token(Token = "0x40018D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private Transform _buttonPlaneCenter;

		[Token(Token = "0x40018D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private bool _makeSureToolIsOnPositiveSide;

		[Token(Token = "0x40018D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[SerializeField]
		private Vector3 _localButtonDirection;

		[Token(Token = "0x40018D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private InteractableToolTags[] _allValidToolsTags;

		[Token(Token = "0x40018D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private int _toolTagsMask;

		[Token(Token = "0x40018D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[SerializeField]
		private bool _allowMultipleNearFieldInteraction;

		[Token(Token = "0x40018D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Dictionary<InteractableTool, InteractableState> _toolToState;

		[Token(Token = "0x1700031E")]
		public override int ValidToolTagsMask
		{
			[Token(Token = "0x60019C1")]
			[Address(RVA = "0xDD479C", Offset = "0xDD479C", VA = "0xDD479C", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700031F")]
		public Vector3 LocalButtonDirection
		{
			[Token(Token = "0x60019C2")]
			[Address(RVA = "0xDD47A4", Offset = "0xDD47A4", VA = "0xDD47A4")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000320")]
		public InteractableState CurrentButtonState
		{
			[Token(Token = "0x60019C3")]
			[Address(RVA = "0xDD47B0", Offset = "0xDD47B0", VA = "0xDD47B0")]
			[CompilerGenerated]
			get
			{
				return default(InteractableState);
			}
			[Token(Token = "0x60019C4")]
			[Address(RVA = "0xDD47B8", Offset = "0xDD47B8", VA = "0xDD47B8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60019C5")]
		[Address(RVA = "0xDD47C0", Offset = "0xDD47C0", VA = "0xDD47C0", Slot = "9")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x60019C6")]
		[Address(RVA = "0xDD4910", Offset = "0xDD4910", VA = "0xDD4910")]
		private void FireInteractionEventsOnDepth(InteractableCollisionDepth oldDepth, InteractableTool collidingTool, InteractionType interactionType)
		{
		}

		[Token(Token = "0x60019C7")]
		[Address(RVA = "0xDD4B18", Offset = "0xDD4B18", VA = "0xDD4B18", Slot = "8")]
		public override void UpdateCollisionDepth(InteractableTool interactableTool, InteractableCollisionDepth oldCollisionDepth, InteractableCollisionDepth newCollisionDepth)
		{
		}

		[Token(Token = "0x60019C8")]
		[Address(RVA = "0xDD50DC", Offset = "0xDD50DC", VA = "0xDD50DC")]
		private InteractableState GetUpcomingStateNearField(InteractableState oldState, InteractableCollisionDepth newCollisionDepth, bool toolIsInActionZone, bool toolIsInContactZone, bool toolIsInProximity, bool validContact, bool onPositiveSideOfInteractable)
		{
			return default(InteractableState);
		}

		[Token(Token = "0x60019C9")]
		[Address(RVA = "0xDD5244", Offset = "0xDD5244", VA = "0xDD5244")]
		public void ForceResetButton()
		{
		}

		[Token(Token = "0x60019CA")]
		[Address(RVA = "0xDD5000", Offset = "0xDD5000", VA = "0xDD5000")]
		private bool IsValidContact(InteractableTool collidingTool, Vector3 buttonDirection)
		{
			return default(bool);
		}

		[Token(Token = "0x60019CB")]
		[Address(RVA = "0xDD5350", Offset = "0xDD5350", VA = "0xDD5350")]
		private bool PassEntryTest(InteractableTool collidingTool, Vector3 buttonDirection)
		{
			return default(bool);
		}

		[Token(Token = "0x60019CC")]
		[Address(RVA = "0xDD545C", Offset = "0xDD545C", VA = "0xDD545C")]
		private bool PassPerpTest(InteractableTool collidingTool, Vector3 buttonDirection)
		{
			return default(bool);
		}

		[Token(Token = "0x60019CD")]
		[Address(RVA = "0xDD54E4", Offset = "0xDD54E4", VA = "0xDD54E4")]
		public ButtonController()
		{
		}
	}
	[Token(Token = "0x2000511")]
	public class ButtonTriggerZone : MonoBehaviour, ColliderZone
	{
		[Token(Token = "0x40018DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject _parentInteractableObj;

		[Token(Token = "0x17000321")]
		public Collider Collider
		{
			[Token(Token = "0x60019CE")]
			[Address(RVA = "0xDD5608", Offset = "0xDD5608", VA = "0xDD5608", Slot = "4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60019CF")]
			[Address(RVA = "0xDD5610", Offset = "0xDD5610", VA = "0xDD5610")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000322")]
		public Interactable ParentInteractable
		{
			[Token(Token = "0x60019D0")]
			[Address(RVA = "0xDD5618", Offset = "0xDD5618", VA = "0xDD5618", Slot = "5")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60019D1")]
			[Address(RVA = "0xDD5620", Offset = "0xDD5620", VA = "0xDD5620")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000323")]
		public InteractableCollisionDepth CollisionDepth
		{
			[Token(Token = "0x60019D2")]
			[Address(RVA = "0xDD5628", Offset = "0xDD5628", VA = "0xDD5628", Slot = "6")]
			get
			{
				return default(InteractableCollisionDepth);
			}
		}

		[Token(Token = "0x60019D3")]
		[Address(RVA = "0xDD5678", Offset = "0xDD5678", VA = "0xDD5678")]
		private void Awake()
		{
		}

		[Token(Token = "0x60019D4")]
		[Address(RVA = "0xDD570C", Offset = "0xDD570C", VA = "0xDD570C")]
		public ButtonTriggerZone()
		{
		}
	}
	[Token(Token = "0x2000512")]
	public interface ColliderZone
	{
		[Token(Token = "0x17000324")]
		Collider Collider
		{
			[Token(Token = "0x60019D5")]
			get;
		}

		[Token(Token = "0x17000325")]
		Interactable ParentInteractable
		{
			[Token(Token = "0x60019D6")]
			get;
		}

		[Token(Token = "0x17000326")]
		InteractableCollisionDepth CollisionDepth
		{
			[Token(Token = "0x60019D7")]
			get;
		}
	}
	[Token(Token = "0x2000513")]
	public class ColliderZoneArgs : EventArgs
	{
		[Token(Token = "0x40018E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly ColliderZone Collider;

		[Token(Token = "0x40018E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly float FrameTime;

		[Token(Token = "0x40018E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly InteractableTool CollidingTool;

		[Token(Token = "0x40018E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly InteractionType InteractionT;

		[Token(Token = "0x60019D8")]
		[Address(RVA = "0xDD4A6C", Offset = "0xDD4A6C", VA = "0xDD4A6C")]
		public ColliderZoneArgs(ColliderZone collider, float frameTime, InteractableTool collidingTool, InteractionType interactionType)
		{
		}
	}
	[Token(Token = "0x2000514")]
	public enum InteractionType
	{
		[Token(Token = "0x40018E5")]
		Enter,
		[Token(Token = "0x40018E6")]
		Stay,
		[Token(Token = "0x40018E7")]
		Exit
	}
	[Token(Token = "0x2000515")]
	public class HandsManager : MonoBehaviour
	{
		[Token(Token = "0x2000516")]
		public enum HandsVisualMode
		{
			[Token(Token = "0x40018F9")]
			Mesh,
			[Token(Token = "0x40018FA")]
			Skeleton,
			[Token(Token = "0x40018FB")]
			Both
		}

		[Token(Token = "0x2000517")]
		[CompilerGenerated]
		private sealed class <FindSkeletonVisualGameObjects>d__52 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40018FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40018FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40018FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HandsManager <>4__this;

			[Token(Token = "0x17000332")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60019FA")]
				[Address(RVA = "0xDD6B6C", Offset = "0xDD6B6C", VA = "0xDD6B6C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000333")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60019FC")]
				[Address(RVA = "0xDD6BB4", Offset = "0xDD6BB4", VA = "0xDD6BB4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60019F7")]
			[Address(RVA = "0xDD6164", Offset = "0xDD6164", VA = "0xDD6164")]
			[DebuggerHidden]
			public <FindSkeletonVisualGameObjects>d__52(int <>1__state)
			{
			}

			[Token(Token = "0x60019F8")]
			[Address(RVA = "0xDD694C", Offset = "0xDD694C", VA = "0xDD694C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60019F9")]
			[Address(RVA = "0xDD6950", Offset = "0xDD6950", VA = "0xDD6950", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60019FB")]
			[Address(RVA = "0xDD6B74", Offset = "0xDD6B74", VA = "0xDD6B74", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40018E8")]
		private const string SKELETON_VISUALIZER_NAME = "SkeletonRenderer";

		[Token(Token = "0x40018E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject _leftHand;

		[Token(Token = "0x40018EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GameObject _rightHand;

		[Token(Token = "0x40018EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public HandsVisualMode VisualMode;

		[Token(Token = "0x40018EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private OVRHand[] _hand;

		[Token(Token = "0x40018ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private OVRSkeleton[] _handSkeleton;

		[Token(Token = "0x40018EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private OVRSkeletonRenderer[] _handSkeletonRenderer;

		[Token(Token = "0x40018EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private OVRMesh[] _handMesh;

		[Token(Token = "0x40018F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private OVRMeshRenderer[] _handMeshRenderer;

		[Token(Token = "0x40018F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private SkinnedMeshRenderer _leftMeshRenderer;

		[Token(Token = "0x40018F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private SkinnedMeshRenderer _rightMeshRenderer;

		[Token(Token = "0x40018F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject _leftSkeletonVisual;

		[Token(Token = "0x40018F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GameObject _rightSkeletonVisual;

		[Token(Token = "0x40018F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float _currentHandAlpha;

		[Token(Token = "0x40018F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private int HandAlphaId;

		[Token(Token = "0x17000327")]
		public OVRHand RightHand
		{
			[Token(Token = "0x60019D9")]
			[Address(RVA = "0xDD5714", Offset = "0xDD5714", VA = "0xDD5714")]
			get
			{
				return null;
			}
			[Token(Token = "0x60019DA")]
			[Address(RVA = "0xDD5740", Offset = "0xDD5740", VA = "0xDD5740")]
			private set
			{
			}
		}

		[Token(Token = "0x17000328")]
		public OVRSkeleton RightHandSkeleton
		{
			[Token(Token = "0x60019DB")]
			[Address(RVA = "0xDD57A4", Offset = "0xDD57A4", VA = "0xDD57A4")]
			get
			{
				return null;
			}
			[Token(Token = "0x60019DC")]
			[Address(RVA = "0xDD57D0", Offset = "0xDD57D0", VA = "0xDD57D0")]
			private set
			{
			}
		}

		[Token(Token = "0x17000329")]
		public OVRSkeletonRenderer RightHandSkeletonRenderer
		{
			[Token(Token = "0x60019DD")]
			[Address(RVA = "0xDD5834", Offset = "0xDD5834", VA = "0xDD5834")]
			get
			{
				return null;
			}
			[Token(Token = "0x60019DE")]
			[Address(RVA = "0xDD5860", Offset = "0xDD5860", VA = "0xDD5860")]
			private set
			{
			}
		}

		[Token(Token = "0x1700032A")]
		public OVRMesh RightHandMesh
		{
			[Token(Token = "0x60019DF")]
			[Address(RVA = "0xDD58C4", Offset = "0xDD58C4", VA = "0xDD58C4")]
			get
			{
				return null;
			}
			[Token(Token = "0x60019E0")]
			[Address(RVA = "0xDD58F0", Offset = "0xDD58F0", VA = "0xDD58F0")]
			private set
			{
			}
		}

		[Token(Token = "0x1700032B")]
		public OVRMeshRenderer RightHandMeshRenderer
		{
			[Token(Token = "0x60019E1")]
			[Address(RVA = "0xDD5954", Offset = "0xDD5954", VA = "0xDD5954")]
			get
			{
				return null;
			}
			[Token(Token = "0x60019E2")]
			[Address(RVA = "0xDD5980", Offset = "0xDD5980", VA = "0xDD5980")]
			private set
			{
			}
		}

		[Token(Token = "0x1700032C")]
		public OVRHand LeftHand
		{
			[Token(Token = "0x60019E3")]
			[Address(RVA = "0xDD59E4", Offset = "0xDD59E4", VA = "0xDD59E4")]
			get
			{
				return null;
			}
			[Token(Token = "0x60019E4")]
			[Address(RVA = "0xDD5A0C", Offset = "0xDD5A0C", VA = "0xDD5A0C")]
			private set
			{
			}
		}

		[Token(Token = "0x1700032D")]
		public OVRSkeleton LeftHandSkeleton
		{
			[Token(Token = "0x60019E5")]
			[Address(RVA = "0xDD5A6C", Offset = "0xDD5A6C", VA = "0xDD5A6C")]
			get
			{
				return null;
			}
			[Token(Token = "0x60019E6")]
			[Address(RVA = "0xDD5A94", Offset = "0xDD5A94", VA = "0xDD5A94")]
			private set
			{
			}
		}

		[Token(Token = "0x1700032E")]
		public OVRSkeletonRenderer LeftHandSkeletonRenderer
		{
			[Token(Token = "0x60019E7")]
			[Address(RVA = "0xDD5AF4", Offset = "0xDD5AF4", VA = "0xDD5AF4")]
			get
			{
				return null;
			}
			[Token(Token = "0x60019E8")]
			[Address(RVA = "0xDD5B1C", Offset = "0xDD5B1C", VA = "0xDD5B1C")]
			private set
			{
			}
		}

		[Token(Token = "0x1700032F")]
		public OVRMesh LeftHandMesh
		{
			[Token(Token = "0x60019E9")]
			[Address(RVA = "0xDD5B7C", Offset = "0xDD5B7C", VA = "0xDD5B7C")]
			get
			{
				return null;
			}
			[Token(Token = "0x60019EA")]
			[Address(RVA = "0xDD5BA4", Offset = "0xDD5BA4", VA = "0xDD5BA4")]
			private set
			{
			}
		}

		[Token(Token = "0x17000330")]
		public OVRMeshRenderer LeftHandMeshRenderer
		{
			[Token(Token = "0x60019EB")]
			[Address(RVA = "0xDD5C04", Offset = "0xDD5C04", VA = "0xDD5C04")]
			get
			{
				return null;
			}
			[Token(Token = "0x60019EC")]
			[Address(RVA = "0xDD5C2C", Offset = "0xDD5C2C", VA = "0xDD5C2C")]
			private set
			{
			}
		}

		[Token(Token = "0x17000331")]
		public static HandsManager Instance
		{
			[Token(Token = "0x60019ED")]
			[Address(RVA = "0xDD5C8C", Offset = "0xDD5C8C", VA = "0xDD5C8C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60019EE")]
			[Address(RVA = "0xDD5CD4", Offset = "0xDD5CD4", VA = "0xDD5CD4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60019EF")]
		[Address(RVA = "0xDD5D2C", Offset = "0xDD5D2C", VA = "0xDD5D2C")]
		private void Awake()
		{
		}

		[Token(Token = "0x60019F0")]
		[Address(RVA = "0xDD60E8", Offset = "0xDD60E8", VA = "0xDD60E8")]
		private void Update()
		{
		}

		[Token(Token = "0x60019F1")]
		[Address(RVA = "0xDD6074", Offset = "0xDD6074", VA = "0xDD6074")]
		[IteratorStateMachine(typeof(<FindSkeletonVisualGameObjects>d__52))]
		private IEnumerator FindSkeletonVisualGameObjects()
		{
			return null;
		}

		[Token(Token = "0x60019F2")]
		[Address(RVA = "0xDD618C", Offset = "0xDD618C", VA = "0xDD618C")]
		public void SwitchVisualization()
		{
		}

		[Token(Token = "0x60019F3")]
		[Address(RVA = "0xDD6250", Offset = "0xDD6250", VA = "0xDD6250")]
		private void SetToCurrentVisualMode()
		{
		}

		[Token(Token = "0x60019F4")]
		[Address(RVA = "0xDD6420", Offset = "0xDD6420", VA = "0xDD6420")]
		public static List<OVRBoneCapsule> GetCapsulesPerBone(OVRSkeleton skeleton, OVRSkeleton.BoneId boneId)
		{
			return null;
		}

		[Token(Token = "0x60019F5")]
		[Address(RVA = "0xDD6684", Offset = "0xDD6684", VA = "0xDD6684")]
		public bool IsInitialized()
		{
			return default(bool);
		}

		[Token(Token = "0x60019F6")]
		[Address(RVA = "0xDD67E4", Offset = "0xDD67E4", VA = "0xDD67E4")]
		public HandsManager()
		{
		}
	}
	[Token(Token = "0x2000518")]
	public abstract class Interactable : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000519")]
		public class InteractableStateArgsEvent : UnityEvent<InteractableStateArgs>
		{
			[Token(Token = "0x6001A0E")]
			[Address(RVA = "0xDD7204", Offset = "0xDD7204", VA = "0xDD7204")]
			public InteractableStateArgsEvent()
			{
			}
		}

		[Token(Token = "0x40018FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected ColliderZone _proximityZoneCollider;

		[Token(Token = "0x4001900")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected ColliderZone _contactZoneCollider;

		[Token(Token = "0x4001901")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected ColliderZone _actionZoneCollider;

		[Token(Token = "0x4001905")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public InteractableStateArgsEvent InteractableStateChanged;

		[Token(Token = "0x17000334")]
		public ColliderZone ProximityCollider
		{
			[Token(Token = "0x60019FD")]
			[Address(RVA = "0xDD6BBC", Offset = "0xDD6BBC", VA = "0xDD6BBC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000335")]
		public ColliderZone ContactCollider
		{
			[Token(Token = "0x60019FE")]
			[Address(RVA = "0xDD6BC4", Offset = "0xDD6BC4", VA = "0xDD6BC4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000336")]
		public ColliderZone ActionCollider
		{
			[Token(Token = "0x60019FF")]
			[Address(RVA = "0xDD6BCC", Offset = "0xDD6BCC", VA = "0xDD6BCC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000337")]
		public virtual int ValidToolTagsMask
		{
			[Token(Token = "0x6001A00")]
			[Address(RVA = "0xDD6BD4", Offset = "0xDD6BD4", VA = "0xDD6BD4", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1400001A")]
		public event Action<ColliderZoneArgs> ProximityZoneEvent
		{
			[Token(Token = "0x6001A01")]
			[Address(RVA = "0xDD6BDC", Offset = "0xDD6BDC", VA = "0xDD6BDC")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001A02")]
			[Address(RVA = "0xDD6C8C", Offset = "0xDD6C8C", VA = "0xDD6C8C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400001B")]
		public event Action<ColliderZoneArgs> ContactZoneEvent
		{
			[Token(Token = "0x6001A04")]
			[Address(RVA = "0xDD6D58", Offset = "0xDD6D58", VA = "0xDD6D58")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001A05")]
			[Address(RVA = "0xDD6E08", Offset = "0xDD6E08", VA = "0xDD6E08")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400001C")]
		public event Action<ColliderZoneArgs> ActionZoneEvent
		{
			[Token(Token = "0x6001A07")]
			[Address(RVA = "0xDD6ED4", Offset = "0xDD6ED4", VA = "0xDD6ED4")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001A08")]
			[Address(RVA = "0xDD6F84", Offset = "0xDD6F84", VA = "0xDD6F84")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6001A03")]
		[Address(RVA = "0xDD6D3C", Offset = "0xDD6D3C", VA = "0xDD6D3C", Slot = "5")]
		protected virtual void OnProximityZoneEvent(ColliderZoneArgs args)
		{
		}

		[Token(Token = "0x6001A06")]
		[Address(RVA = "0xDD6EB8", Offset = "0xDD6EB8", VA = "0xDD6EB8", Slot = "6")]
		protected virtual void OnContactZoneEvent(ColliderZoneArgs args)
		{
		}

		[Token(Token = "0x6001A09")]
		[Address(RVA = "0xDD7034", Offset = "0xDD7034", VA = "0xDD7034", Slot = "7")]
		protected virtual void OnActionZoneEvent(ColliderZoneArgs args)
		{
		}

		[Token(Token = "0x6001A0A")]
		public abstract void UpdateCollisionDepth(InteractableTool interactableTool, InteractableCollisionDepth oldCollisionDepth, InteractableCollisionDepth newCollisionDepth);

		[Token(Token = "0x6001A0B")]
		[Address(RVA = "0xDD48BC", Offset = "0xDD48BC", VA = "0xDD48BC", Slot = "9")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6001A0C")]
		[Address(RVA = "0xDD7100", Offset = "0xDD7100", VA = "0xDD7100", Slot = "10")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6001A0D")]
		[Address(RVA = "0xDD5600", Offset = "0xDD5600", VA = "0xDD5600")]
		protected Interactable()
		{
		}
	}
	[Token(Token = "0x200051A")]
	public enum InteractableCollisionDepth
	{
		[Token(Token = "0x4001907")]
		None,
		[Token(Token = "0x4001908")]
		Proximity,
		[Token(Token = "0x4001909")]
		Contact,
		[Token(Token = "0x400190A")]
		Action
	}
	[Token(Token = "0x200051B")]
	public enum InteractableState
	{
		[Token(Token = "0x400190C")]
		Default,
		[Token(Token = "0x400190D")]
		ProximityState,
		[Token(Token = "0x400190E")]
		ContactState,
		[Token(Token = "0x400190F")]
		ActionState
	}
	[Token(Token = "0x200051C")]
	public class InteractableStateArgs : EventArgs
	{
		[Token(Token = "0x4001910")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly Interactable Interactable;

		[Token(Token = "0x4001911")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly InteractableTool Tool;

		[Token(Token = "0x4001912")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly InteractableState OldInteractableState;

		[Token(Token = "0x4001913")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public readonly InteractableState NewInteractableState;

		[Token(Token = "0x4001914")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly ColliderZoneArgs ColliderArgs;

		[Token(Token = "0x6001A0F")]
		[Address(RVA = "0xDD518C", Offset = "0xDD518C", VA = "0xDD518C")]
		public InteractableStateArgs(Interactable interactable, InteractableTool tool, InteractableState newInteractableState, InteractableState oldState, ColliderZoneArgs colliderArgs)
		{
		}
	}
	[Token(Token = "0x200051D")]
	public class InteractableRegistry : MonoBehaviour
	{
		[Token(Token = "0x4001915")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static HashSet<Interactable> _interactables;

		[Token(Token = "0x17000338")]
		public static HashSet<Interactable> Interactables
		{
			[Token(Token = "0x6001A10")]
			[Address(RVA = "0xDD724C", Offset = "0xDD724C", VA = "0xDD724C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001A11")]
		[Address(RVA = "0xDD7050", Offset = "0xDD7050", VA = "0xDD7050")]
		public static void RegisterInteractable(Interactable interactable)
		{
		}

		[Token(Token = "0x6001A12")]
		[Address(RVA = "0xDD7154", Offset = "0xDD7154", VA = "0xDD7154")]
		public static void UnregisterInteractable(Interactable interactable)
		{
		}

		[Token(Token = "0x6001A13")]
		[Address(RVA = "0xDD72A4", Offset = "0xDD72A4", VA = "0xDD72A4")]
		public InteractableRegistry()
		{
		}
	}
	[Token(Token = "0x200051E")]
	public class InteractableToolsCreator : MonoBehaviour
	{
		[Token(Token = "0x200051F")]
		[CompilerGenerated]
		private sealed class <AttachToolsToHands>d__3 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001918")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001919")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400191A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Transform[] toolObjects;

			[Token(Token = "0x400191B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public bool isRightHand;

			[Token(Token = "0x400191C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public InteractableToolsCreator <>4__this;

			[Token(Token = "0x400191D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private HandsManager <handsManagerObj>5__2;

			[Token(Token = "0x400191E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private HashSet<Transform>.Enumerator <>7__wrap2;

			[Token(Token = "0x400191F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private Transform <toolObject>5__4;

			[Token(Token = "0x4001920")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private OVRSkeleton <handSkeletonToAttachTo>5__5;

			[Token(Token = "0x17000339")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001A1D")]
				[Address(RVA = "0xDD7A64", Offset = "0xDD7A64", VA = "0xDD7A64", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700033A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001A1F")]
				[Address(RVA = "0xDD7AAC", Offset = "0xDD7AAC", VA = "0xDD7AAC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001A19")]
			[Address(RVA = "0xDD744C", Offset = "0xDD744C", VA = "0xDD744C")]
			[DebuggerHidden]
			public <AttachToolsToHands>d__3(int <>1__state)
			{
			}

			[Token(Token = "0x6001A1A")]
			[Address(RVA = "0xDD7588", Offset = "0xDD7588", VA = "0xDD7588", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001A1B")]
			[Address(RVA = "0xDD75A4", Offset = "0xDD75A4", VA = "0xDD75A4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001A1C")]
			[Address(RVA = "0xDD7A14", Offset = "0xDD7A14", VA = "0xDD7A14")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6001A1E")]
			[Address(RVA = "0xDD7A6C", Offset = "0xDD7A6C", VA = "0xDD7A6C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001916")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Transform[] LeftHandTools;

		[Token(Token = "0x4001917")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Transform[] RightHandTools;

		[Token(Token = "0x6001A15")]
		[Address(RVA = "0xDD7344", Offset = "0xDD7344", VA = "0xDD7344")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001A16")]
		[Address(RVA = "0xDD73B0", Offset = "0xDD73B0", VA = "0xDD73B0")]
		[IteratorStateMachine(typeof(<AttachToolsToHands>d__3))]
		private IEnumerator AttachToolsToHands(Transform[] toolObjects, bool isRightHand)
		{
			return null;
		}

		[Token(Token = "0x6001A17")]
		[Address(RVA = "0xDD7474", Offset = "0xDD7474", VA = "0xDD7474")]
		private void AttachToolToHandTransform(Transform tool, bool isRightHanded)
		{
		}

		[Token(Token = "0x6001A18")]
		[Address(RVA = "0xDD7580", Offset = "0xDD7580", VA = "0xDD7580")]
		public InteractableToolsCreator()
		{
		}
	}
	[Token(Token = "0x2000520")]
	public class InteractableToolsInputRouter : MonoBehaviour
	{
		[Token(Token = "0x4001921")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static InteractableToolsInputRouter _instance;

		[Token(Token = "0x4001922")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool _leftPinch;

		[Token(Token = "0x4001923")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		private bool _rightPinch;

		[Token(Token = "0x4001924")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private HashSet<InteractableTool> _leftHandNearTools;

		[Token(Token = "0x4001925")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private HashSet<InteractableTool> _leftHandFarTools;

		[Token(Token = "0x4001926")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private HashSet<InteractableTool> _rightHandNearTools;

		[Token(Token = "0x4001927")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private HashSet<InteractableTool> _rightHandFarTools;

		[Token(Token = "0x1700033B")]
		public static InteractableToolsInputRouter Instance
		{
			[Token(Token = "0x6001A20")]
			[Address(RVA = "0xDD7AB4", Offset = "0xDD7AB4", VA = "0xDD7AB4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001A21")]
		[Address(RVA = "0xDD7C10", Offset = "0xDD7C10", VA = "0xDD7C10")]
		public void RegisterInteractableTool(InteractableTool interactableTool)
		{
		}

		[Token(Token = "0x6001A22")]
		[Address(RVA = "0xDD7CAC", Offset = "0xDD7CAC", VA = "0xDD7CAC")]
		public void UnregisterInteractableTool(InteractableTool interactableTool)
		{
		}

		[Token(Token = "0x6001A23")]
		[Address(RVA = "0xDD7D48", Offset = "0xDD7D48", VA = "0xDD7D48")]
		private void Update()
		{
		}

		[Token(Token = "0x6001A24")]
		[Address(RVA = "0xDD7FE4", Offset = "0xDD7FE4", VA = "0xDD7FE4")]
		private bool UpdateToolsAndEnableState(HashSet<InteractableTool> tools, bool toolsAreEnabledThisFrame)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A25")]
		[Address(RVA = "0xDD8020", Offset = "0xDD8020", VA = "0xDD8020")]
		private bool UpdateTools(HashSet<InteractableTool> tools, bool resetCollisionData = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A26")]
		[Address(RVA = "0xDD82F8", Offset = "0xDD82F8", VA = "0xDD82F8")]
		private void ToggleToolsEnableState(HashSet<InteractableTool> tools, bool enableState)
		{
		}

		[Token(Token = "0x6001A27")]
		[Address(RVA = "0xDD8500", Offset = "0xDD8500", VA = "0xDD8500")]
		public InteractableToolsInputRouter()
		{
		}
	}
	[Token(Token = "0x2000521")]
	public class FingerTipPokeTool : InteractableTool
	{
		[Token(Token = "0x2000522")]
		[CompilerGenerated]
		private sealed class <AttachTriggerLogic>d__21 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001933")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001934")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001935")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public FingerTipPokeTool <>4__this;

			[Token(Token = "0x17000340")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001A39")]
				[Address(RVA = "0xDD96D0", Offset = "0xDD96D0", VA = "0xDD96D0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000341")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001A3B")]
				[Address(RVA = "0xDD9718", Offset = "0xDD9718", VA = "0xDD9718", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001A36")]
			[Address(RVA = "0xDD879C", Offset = "0xDD879C", VA = "0xDD879C")]
			[DebuggerHidden]
			public <AttachTriggerLogic>d__21(int <>1__state)
			{
			}

			[Token(Token = "0x6001A37")]
			[Address(RVA = "0xDD9240", Offset = "0xDD9240", VA = "0xDD9240", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001A38")]
			[Address(RVA = "0xDD9244", Offset = "0xDD9244", VA = "0xDD9244", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001A3A")]
			[Address(RVA = "0xDD96D8", Offset = "0xDD96D8", VA = "0xDD96D8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001928")]
		private const int NUM_VELOCITY_FRAMES = 10;

		[Token(Token = "0x4001929")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private FingerTipPokeToolView _fingerTipPokeToolView;

		[Token(Token = "0x400192A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private OVRPlugin.HandFinger _fingerToFollow;

		[Token(Token = "0x400192B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3[] _velocityFrames;

		[Token(Token = "0x400192C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int _currVelocityFrame;

		[Token(Token = "0x400192D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private bool _sampledMaxFramesAlready;

		[Token(Token = "0x400192E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Vector3 _position;

		[Token(Token = "0x400192F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private BoneCapsuleTriggerLogic[] _boneCapsuleTriggerLogic;

		[Token(Token = "0x4001930")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private float _lastScale;

		[Token(Token = "0x4001931")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private bool _isInitialized;

		[Token(Token = "0x4001932")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private OVRBoneCapsule _capsuleToTrack;

		[Token(Token = "0x1700033C")]
		public override InteractableToolTags ToolTags
		{
			[Token(Token = "0x6001A28")]
			[Address(RVA = "0xDD8608", Offset = "0xDD8608", VA = "0xDD8608", Slot = "4")]
			get
			{
				return default(InteractableToolTags);
			}
		}

		[Token(Token = "0x1700033D")]
		public override ToolInputState ToolInputState
		{
			[Token(Token = "0x6001A29")]
			[Address(RVA = "0xDD8610", Offset = "0xDD8610", VA = "0xDD8610", Slot = "5")]
			get
			{
				return default(ToolInputState);
			}
		}

		[Token(Token = "0x1700033E")]
		public override bool IsFarFieldTool
		{
			[Token(Token = "0x6001A2A")]
			[Address(RVA = "0xDD8618", Offset = "0xDD8618", VA = "0xDD8618", Slot = "6")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700033F")]
		public override bool EnableState
		{
			[Token(Token = "0x6001A2B")]
			[Address(RVA = "0xDD8620", Offset = "0xDD8620", VA = "0xDD8620", Slot = "10")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001A2C")]
			[Address(RVA = "0xDD8648", Offset = "0xDD8648", VA = "0xDD8648", Slot = "11")]
			set
			{
			}
		}

		[Token(Token = "0x6001A2D")]
		[Address(RVA = "0xDD8678", Offset = "0xDD8678", VA = "0xDD8678", Slot = "12")]
		public override void Initialize()
		{
		}

		[Token(Token = "0x6001A2E")]
		[Address(RVA = "0xDD8728", Offset = "0xDD8728", VA = "0xDD8728")]
		[IteratorStateMachine(typeof(<AttachTriggerLogic>d__21))]
		private IEnumerator AttachTriggerLogic()
		{
			return null;
		}

		[Token(Token = "0x6001A2F")]
		[Address(RVA = "0xDD87C4", Offset = "0xDD87C4", VA = "0xDD87C4")]
		private void Update()
		{
		}

		[Token(Token = "0x6001A30")]
		[Address(RVA = "0xDD8A44", Offset = "0xDD8A44", VA = "0xDD8A44")]
		private void UpdateAverageVelocity()
		{
		}

		[Token(Token = "0x6001A31")]
		[Address(RVA = "0xDD8C00", Offset = "0xDD8C00", VA = "0xDD8C00")]
		private void CheckAndUpdateScale()
		{
		}

		[Token(Token = "0x6001A32")]
		[Address(RVA = "0xDD8CE8", Offset = "0xDD8CE8", VA = "0xDD8CE8", Slot = "7")]
		public override List<InteractableCollisionInfo> GetNextIntersectingObjects()
		{
			return null;
		}

		[Token(Token = "0x6001A33")]
		[Address(RVA = "0xDD907C", Offset = "0xDD907C", VA = "0xDD907C", Slot = "8")]
		public override void FocusOnInteractable(Interactable focusedInteractable, ColliderZone colliderZone)
		{
		}

		[Token(Token = "0x6001A34")]
		[Address(RVA = "0xDD9080", Offset = "0xDD9080", VA = "0xDD9080", Slot = "9")]
		public override void DeFocus()
		{
		}

		[Token(Token = "0x6001A35")]
		[Address(RVA = "0xDD9084", Offset = "0xDD9084", VA = "0xDD9084")]
		public FingerTipPokeTool()
		{
		}
	}
	[Token(Token = "0x2000523")]
	public class FingerTipPokeToolView : MonoBehaviour, InteractableToolView
	{
		[Token(Token = "0x4001936")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private MeshRenderer _sphereMeshRenderer;

		[Token(Token = "0x17000342")]
		public InteractableTool InteractableTool
		{
			[Token(Token = "0x6001A3C")]
			[Address(RVA = "0xDD9720", Offset = "0xDD9720", VA = "0xDD9720", Slot = "4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001A3D")]
			[Address(RVA = "0xDD9728", Offset = "0xDD9728", VA = "0xDD9728")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000343")]
		public bool EnableState
		{
			[Token(Token = "0x6001A3E")]
			[Address(RVA = "0xDD9730", Offset = "0xDD9730", VA = "0xDD9730", Slot = "6")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001A3F")]
			[Address(RVA = "0xDD974C", Offset = "0xDD974C", VA = "0xDD974C", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x17000344")]
		public bool ToolActivateState
		{
			[Token(Token = "0x6001A40")]
			[Address(RVA = "0xDD976C", Offset = "0xDD976C", VA = "0xDD976C", Slot = "8")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001A41")]
			[Address(RVA = "0xDD9774", Offset = "0xDD9774", VA = "0xDD9774", Slot = "9")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000345")]
		public float SphereRadius
		{
			[Token(Token = "0x6001A42")]
			[Address(RVA = "0xDD9780", Offset = "0xDD9780", VA = "0xDD9780")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001A43")]
			[Address(RVA = "0xDD9788", Offset = "0xDD9788", VA = "0xDD9788")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6001A44")]
		[Address(RVA = "0xDD9790", Offset = "0xDD9790", VA = "0xDD9790")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001A45")]
		[Address(RVA = "0xDD97CC", Offset = "0xDD97CC", VA = "0xDD97CC", Slot = "5")]
		public void SetFocusedInteractable(Interactable interactable)
		{
		}

		[Token(Token = "0x6001A46")]
		[Address(RVA = "0xDD97D0", Offset = "0xDD97D0", VA = "0xDD97D0")]
		public FingerTipPokeToolView()
		{
		}
	}
	[Token(Token = "0x2000524")]
	[Flags]
	public enum InteractableToolTags
	{
		[Token(Token = "0x400193B")]
		None = 0,
		[Token(Token = "0x400193C")]
		Ray = 1,
		[Token(Token = "0x400193D")]
		Poke = 4,
		[Token(Token = "0x400193E")]
		All = -1
	}
	[Token(Token = "0x2000525")]
	public enum ToolInputState
	{
		[Token(Token = "0x4001940")]
		Inactive,
		[Token(Token = "0x4001941")]
		PrimaryInputDown,
		[Token(Token = "0x4001942")]
		PrimaryInputDownStay,
		[Token(Token = "0x4001943")]
		PrimaryInputUp
	}
	[Token(Token = "0x2000526")]
	public class InteractableCollisionInfo
	{
		[Token(Token = "0x4001944")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ColliderZone InteractableCollider;

		[Token(Token = "0x4001945")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InteractableCollisionDepth CollisionDepth;

		[Token(Token = "0x4001946")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InteractableTool CollidingTool;

		[Token(Token = "0x6001A47")]
		[Address(RVA = "0xDD9028", Offset = "0xDD9028", VA = "0xDD9028")]
		public InteractableCollisionInfo(ColliderZone collider, InteractableCollisionDepth collisionDepth, InteractableTool collidingTool)
		{
		}
	}
	[Token(Token = "0x2000527")]
	public abstract class InteractableTool : MonoBehaviour
	{
		[Token(Token = "0x400194A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected List<InteractableCollisionInfo> _currentIntersectingObjects;

		[Token(Token = "0x400194B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<Interactable> _addedInteractables;

		[Token(Token = "0x400194C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<Interactable> _removedInteractables;

		[Token(Token = "0x400194D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private List<Interactable> _remainingInteractables;

		[Token(Token = "0x400194E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Dictionary<Interactable, InteractableCollisionInfo> _currInteractableToCollisionInfos;

		[Token(Token = "0x400194F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Dictionary<Interactable, InteractableCollisionInfo> _prevInteractableToCollisionInfos;

		[Token(Token = "0x17000346")]
		public Transform ToolTransform
		{
			[Token(Token = "0x6001A48")]
			[Address(RVA = "0xDD54DC", Offset = "0xDD54DC", VA = "0xDD54DC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000347")]
		public bool IsRightHandedTool
		{
			[Token(Token = "0x6001A49")]
			[Address(RVA = "0xDD97D8", Offset = "0xDD97D8", VA = "0xDD97D8")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001A4A")]
			[Address(RVA = "0xDD97E0", Offset = "0xDD97E0", VA = "0xDD97E0")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000348")]
		public abstract InteractableToolTags ToolTags
		{
			[Token(Token = "0x6001A4B")]
			get;
		}

		[Token(Token = "0x17000349")]
		public abstract ToolInputState ToolInputState
		{
			[Token(Token = "0x6001A4C")]
			get;
		}

		[Token(Token = "0x1700034A")]
		public abstract bool IsFarFieldTool
		{
			[Token(Token = "0x6001A4D")]
			get;
		}

		[Token(Token = "0x1700034B")]
		public Vector3 Velocity
		{
			[Token(Token = "0x6001A4E")]
			[Address(RVA = "0xDD97EC", Offset = "0xDD97EC", VA = "0xDD97EC")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001A4F")]
			[Address(RVA = "0xDD97F8", Offset = "0xDD97F8", VA = "0xDD97F8")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x1700034C")]
		public Vector3 InteractionPosition
		{
			[Token(Token = "0x6001A50")]
			[Address(RVA = "0xDD9804", Offset = "0xDD9804", VA = "0xDD9804")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001A51")]
			[Address(RVA = "0xDD9810", Offset = "0xDD9810", VA = "0xDD9810")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x1700034D")]
		public abstract bool EnableState
		{
			[Token(Token = "0x6001A56")]
			get;
			[Token(Token = "0x6001A57")]
			set;
		}

		[Token(Token = "0x6001A52")]
		[Address(RVA = "0xDD981C", Offset = "0xDD981C", VA = "0xDD981C")]
		public List<InteractableCollisionInfo> GetCurrentIntersectingObjects()
		{
			return null;
		}

		[Token(Token = "0x6001A53")]
		public abstract List<InteractableCollisionInfo> GetNextIntersectingObjects();

		[Token(Token = "0x6001A54")]
		public abstract void FocusOnInteractable(Interactable focusedInteractable, ColliderZone colliderZone);

		[Token(Token = "0x6001A55")]
		public abstract void DeFocus();

		[Token(Token = "0x6001A58")]
		public abstract void Initialize();

		[Token(Token = "0x6001A59")]
		[Address(RVA = "0xDD8468", Offset = "0xDD8468", VA = "0xDD8468")]
		public KeyValuePair<Interactable, InteractableCollisionInfo> GetFirstCurrentCollisionInfo()
		{
			return default(KeyValuePair<Interactable, InteractableCollisionInfo>);
		}

		[Token(Token = "0x6001A5A")]
		[Address(RVA = "0xDD84B0", Offset = "0xDD84B0", VA = "0xDD84B0")]
		public void ClearAllCurrentCollisionInfos()
		{
		}

		[Token(Token = "0x6001A5B")]
		[Address(RVA = "0xDD9824", Offset = "0xDD9824", VA = "0xDD9824", Slot = "13")]
		public virtual void UpdateCurrentCollisionsBasedOnDepth()
		{
		}

		[Token(Token = "0x6001A5C")]
		[Address(RVA = "0xDD9AEC", Offset = "0xDD9AEC", VA = "0xDD9AEC", Slot = "14")]
		public virtual void UpdateLatestCollisionData()
		{
		}

		[Token(Token = "0x6001A5D")]
		[Address(RVA = "0xDD9098", Offset = "0xDD9098", VA = "0xDD9098")]
		protected InteractableTool()
		{
		}
	}
	[Token(Token = "0x2000528")]
	public interface InteractableToolView
	{
		[Token(Token = "0x1700034E")]
		InteractableTool InteractableTool
		{
			[Token(Token = "0x6001A5E")]
			get;
		}

		[Token(Token = "0x1700034F")]
		bool EnableState
		{
			[Token(Token = "0x6001A60")]
			get;
			[Token(Token = "0x6001A61")]
			set;
		}

		[Token(Token = "0x17000350")]
		bool ToolActivateState
		{
			[Token(Token = "0x6001A62")]
			get;
			[Token(Token = "0x6001A63")]
			set;
		}

		[Token(Token = "0x6001A5F")]
		void SetFocusedInteractable(Interactable interactable);
	}
	[Token(Token = "0x2000529")]
	public class PinchStateModule
	{
		[Token(Token = "0x200052A")]
		private enum PinchState
		{
			[Token(Token = "0x4001954")]
			None,
			[Token(Token = "0x4001955")]
			PinchDown,
			[Token(Token = "0x4001956")]
			PinchStay,
			[Token(Token = "0x4001957")]
			PinchUp
		}

		[Token(Token = "0x4001950")]
		private const float PINCH_STRENGTH_THRESHOLD = 1f;

		[Token(Token = "0x4001951")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private PinchState _currPinchState;

		[Token(Token = "0x4001952")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Interactable _firstFocusedInteractable;

		[Token(Token = "0x17000351")]
		public bool PinchUpAndDownOnFocusedObject
		{
			[Token(Token = "0x6001A64")]
			[Address(RVA = "0xDDA388", Offset = "0xDDA388", VA = "0xDDA388")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000352")]
		public bool PinchSteadyOnFocusedObject
		{
			[Token(Token = "0x6001A65")]
			[Address(RVA = "0xDDA404", Offset = "0xDDA404", VA = "0xDDA404")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000353")]
		public bool PinchDownOnFocusedObject
		{
			[Token(Token = "0x6001A66")]
			[Address(RVA = "0xDDA480", Offset = "0xDDA480", VA = "0xDDA480")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001A67")]
		[Address(RVA = "0xDDA4FC", Offset = "0xDDA4FC", VA = "0xDDA4FC")]
		public PinchStateModule()
		{
		}

		[Token(Token = "0x6001A68")]
		[Address(RVA = "0xDDA524", Offset = "0xDDA524", VA = "0xDDA524")]
		public void UpdateState(OVRHand hand, Interactable currFocusedInteractable)
		{
		}
	}
	[Token(Token = "0x200052B")]
	public class RayTool : InteractableTool
	{
		[Token(Token = "0x4001958")]
		private const float MINIMUM_RAY_CAST_DISTANCE = 0.8f;

		[Token(Token = "0x4001959")]
		private const float COLLIDER_RADIUS = 0.01f;

		[Token(Token = "0x400195A")]
		private const int NUM_MAX_PRIMARY_HITS = 10;

		[Token(Token = "0x400195B")]
		private const int NUM_MAX_SECONDARY_HITS = 25;

		[Token(Token = "0x400195C")]
		private const int NUM_COLLIDERS_TO_TEST = 20;

		[Token(Token = "0x400195D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private RayToolView _rayToolView;

		[Token(Token = "0x400195E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Range(0f, 45f)]
		[SerializeField]
		private float _coneAngleDegrees;

		[Token(Token = "0x400195F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[SerializeField]
		private float _farFieldMaxDistance;

		[Token(Token = "0x4001960")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private PinchStateModule _pinchStateModule;

		[Token(Token = "0x4001961")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Interactable _focusedInteractable;

		[Token(Token = "0x4001962")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Collider[] _collidersOverlapped;

		[Token(Token = "0x4001963")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Interactable _currInteractableCastedAgainst;

		[Token(Token = "0x4001964")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float _coneAngleReleaseDegrees;

		[Token(Token = "0x4001965")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private RaycastHit[] _primaryHits;

		[Token(Token = "0x4001966")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Collider[] _secondaryOverlapResults;

		[Token(Token = "0x4001967")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private bool _initialized;

		[Token(Token = "0x17000354")]
		public override InteractableToolTags ToolTags
		{
			[Token(Token = "0x6001A69")]
			[Address(RVA = "0xDDA69C", Offset = "0xDDA69C", VA = "0xDDA69C", Slot = "4")]
			get
			{
				return default(InteractableToolTags);
			}
		}

		[Token(Token = "0x17000355")]
		public override ToolInputState ToolInputState
		{
			[Token(Token = "0x6001A6A")]
			[Address(RVA = "0xDDA6A4", Offset = "0xDDA6A4", VA = "0xDDA6A4", Slot = "5")]
			get
			{
				return default(ToolInputState);
			}
		}

		[Token(Token = "0x17000356")]
		public override bool IsFarFieldTool
		{
			[Token(Token = "0x6001A6B")]
			[Address(RVA = "0xDDA700", Offset = "0xDDA700", VA = "0xDDA700", Slot = "6")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000357")]
		public override bool EnableState
		{
			[Token(Token = "0x6001A6C")]
			[Address(RVA = "0xDDA708", Offset = "0xDDA708", VA = "0xDDA708", Slot = "10")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001A6D")]
			[Address(RVA = "0xDDA748", Offset = "0xDDA748", VA = "0xDDA748", Slot = "11")]
			set
			{
			}
		}

		[Token(Token = "0x6001A6E")]
		[Address(RVA = "0xDDA7B8", Offset = "0xDDA7B8", VA = "0xDDA7B8", Slot = "12")]
		public override void Initialize()
		{
		}

		[Token(Token = "0x6001A6F")]
		[Address(RVA = "0xDDA80C", Offset = "0xDDA80C", VA = "0xDDA80C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001A70")]
		[Address(RVA = "0xDDA898", Offset = "0xDDA898", VA = "0xDDA898")]
		private void Update()
		{
		}

		[Token(Token = "0x6001A71")]
		[Address(RVA = "0xDDAB3C", Offset = "0xDDAB3C", VA = "0xDDAB3C")]
		private Vector3 GetRayCastOrigin()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001A72")]
		[Address(RVA = "0xDDABB8", Offset = "0xDDABB8", VA = "0xDDABB8", Slot = "7")]
		public override List<InteractableCollisionInfo> GetNextIntersectingObjects()
		{
			return null;
		}

		[Token(Token = "0x6001A73")]
		[Address(RVA = "0xDDAFAC", Offset = "0xDDAFAC", VA = "0xDDAFAC")]
		private bool HasRayReleasedInteractable(Interactable focusedInteractable)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A74")]
		[Address(RVA = "0xDDB148", Offset = "0xDDB148", VA = "0xDDB148")]
		private Interactable FindTargetInteractable()
		{
			return null;
		}

		[Token(Token = "0x6001A75")]
		[Address(RVA = "0xDDB260", Offset = "0xDDB260", VA = "0xDDB260")]
		private Interactable FindPrimaryRaycastHit(Vector3 rayOrigin, Vector3 rayDirection)
		{
			return null;
		}

		[Token(Token = "0x6001A76")]
		[Address(RVA = "0xDDB584", Offset = "0xDDB584", VA = "0xDDB584")]
		private Interactable FindInteractableViaConeTest(Vector3 rayOrigin, Vector3 rayDirection)
		{
			return null;
		}

		[Token(Token = "0x6001A77")]
		[Address(RVA = "0xDDB900", Offset = "0xDDB900", VA = "0xDDB900", Slot = "8")]
		public override void FocusOnInteractable(Interactable focusedInteractable, ColliderZone colliderZone)
		{
		}

		[Token(Token = "0x6001A78")]
		[Address(RVA = "0xDDB9D8", Offset = "0xDDB9D8", VA = "0xDDB9D8", Slot = "9")]
		public override void DeFocus()
		{
		}

		[Token(Token = "0x6001A79")]
		[Address(RVA = "0xDDBA08", Offset = "0xDDBA08", VA = "0xDDBA08")]
		public RayTool()
		{
		}
	}
	[Token(Token = "0x200052C")]
	public class RayToolView : MonoBehaviour, InteractableToolView
	{
		[Token(Token = "0x4001968")]
		private const int NUM_RAY_LINE_POSITIONS = 25;

		[Token(Token = "0x4001969")]
		private const float DEFAULT_RAY_CAST_DISTANCE = 3f;

		[Token(Token = "0x400196A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Transform _targetTransform;

		[Token(Token = "0x400196B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private LineRenderer _lineRenderer;

		[Token(Token = "0x400196C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool _toolActivateState;

		[Token(Token = "0x400196D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform _focusedTransform;

		[Token(Token = "0x400196E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3[] linePositions;

		[Token(Token = "0x400196F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Gradient _oldColorGradient;

		[Token(Token = "0x4001970")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Gradient _highLightColorGradient;

		[Token(Token = "0x17000358")]
		public bool EnableState
		{
			[Token(Token = "0x6001A7A")]
			[Address(RVA = "0xDDA72C", Offset = "0xDDA72C", VA = "0xDDA72C", Slot = "6")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001A7B")]
			[Address(RVA = "0xDDA764", Offset = "0xDDA764", VA = "0xDDA764", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x17000359")]
		public bool ToolActivateState
		{
			[Token(Token = "0x6001A7C")]
			[Address(RVA = "0xDDBB1C", Offset = "0xDDBB1C", VA = "0xDDBB1C", Slot = "8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001A7D")]
			[Address(RVA = "0xDDAB00", Offset = "0xDDAB00", VA = "0xDDAB00", Slot = "9")]
			set
			{
			}
		}

		[Token(Token = "0x1700035A")]
		public InteractableTool InteractableTool
		{
			[Token(Token = "0x6001A7F")]
			[Address(RVA = "0xDDBD44", Offset = "0xDDBD44", VA = "0xDDBD44", Slot = "4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001A80")]
			[Address(RVA = "0xDDBD4C", Offset = "0xDDBD4C", VA = "0xDDBD4C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6001A7E")]
		[Address(RVA = "0xDDBB24", Offset = "0xDDBB24", VA = "0xDDBB24")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001A81")]
		[Address(RVA = "0xDDB938", Offset = "0xDDB938", VA = "0xDDB938", Slot = "5")]
		public void SetFocusedInteractable(Interactable interactable)
		{
		}

		[Token(Token = "0x6001A82")]
		[Address(RVA = "0xDDBD54", Offset = "0xDDBD54", VA = "0xDDBD54")]
		private void Update()
		{
		}

		[Token(Token = "0x6001A83")]
		[Address(RVA = "0xDDC000", Offset = "0xDDC000", VA = "0xDDC000")]
		public static Vector3 GetPointOnBezierCurve(Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3, float t)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001A84")]
		[Address(RVA = "0xDDC0A8", Offset = "0xDDC0A8", VA = "0xDDC0A8")]
		public RayToolView()
		{
		}
	}
	[Token(Token = "0x200052D")]
	public class DistanceGrabberSample : MonoBehaviour
	{
		[Token(Token = "0x4001972")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool useSpherecast;

		[Token(Token = "0x4001973")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		private bool allowGrabThroughWalls;

		[Token(Token = "0x4001974")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private DistanceGrabber[] m_grabbers;

		[Token(Token = "0x1700035B")]
		public bool UseSpherecast
		{
			[Token(Token = "0x6001A85")]
			[Address(RVA = "0xDDC10C", Offset = "0xDDC10C", VA = "0xDDC10C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001A86")]
			[Address(RVA = "0xDDC114", Offset = "0xDDC114", VA = "0xDDC114")]
			set
			{
			}
		}

		[Token(Token = "0x1700035C")]
		public bool AllowGrabThroughWalls
		{
			[Token(Token = "0x6001A87")]
			[Address(RVA = "0xDDC190", Offset = "0xDDC190", VA = "0xDDC190")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001A88")]
			[Address(RVA = "0xDDC198", Offset = "0xDDC198", VA = "0xDDC198")]
			set
			{
			}
		}

		[Token(Token = "0x6001A89")]
		[Address(RVA = "0xDDC1F4", Offset = "0xDDC1F4", VA = "0xDDC1F4")]
		private void Start()
		{
		}

		[Token(Token = "0x6001A8A")]
		[Address(RVA = "0xDDC494", Offset = "0xDDC494", VA = "0xDDC494")]
		public void ToggleSphereCasting(Toggle t)
		{
		}

		[Token(Token = "0x6001A8B")]
		[Address(RVA = "0xDDC4A4", Offset = "0xDDC4A4", VA = "0xDDC4A4")]
		public void ToggleGrabThroughWalls(Toggle t)
		{
		}

		[Token(Token = "0x6001A8C")]
		[Address(RVA = "0xDDC4B4", Offset = "0xDDC4B4", VA = "0xDDC4B4")]
		public DistanceGrabberSample()
		{
		}
	}
	[Token(Token = "0x200052E")]
	public class ControllerBoxController : MonoBehaviour
	{
		[Token(Token = "0x4001975")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private TrainLocomotive _locomotive;

		[Token(Token = "0x4001976")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private CowController _cowController;

		[Token(Token = "0x6001A8D")]
		[Address(RVA = "0xDDC4BC", Offset = "0xDDC4BC", VA = "0xDDC4BC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001A8E")]
		[Address(RVA = "0xDDC4C0", Offset = "0xDDC4C0", VA = "0xDDC4C0")]
		public void StartStopStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6001A8F")]
		[Address(RVA = "0xDDC54C", Offset = "0xDDC54C", VA = "0xDDC54C")]
		public void DecreaseSpeedStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6001A90")]
		[Address(RVA = "0xDDC5DC", Offset = "0xDDC5DC", VA = "0xDDC5DC")]
		public void IncreaseSpeedStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6001A91")]
		[Address(RVA = "0xDDC66C", Offset = "0xDDC66C", VA = "0xDDC66C")]
		public void SmokeButtonStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6001A92")]
		[Address(RVA = "0xDDC718", Offset = "0xDDC718", VA = "0xDDC718")]
		public void WhistleButtonStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6001A93")]
		[Address(RVA = "0xDDC7F4", Offset = "0xDDC7F4", VA = "0xDDC7F4")]
		public void ReverseButtonStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6001A94")]
		[Address(RVA = "0xDDC838", Offset = "0xDDC838", VA = "0xDDC838")]
		public void SwitchVisualization(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6001A95")]
		[Address(RVA = "0xDDC898", Offset = "0xDDC898", VA = "0xDDC898")]
		public void GoMoo(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6001A96")]
		[Address(RVA = "0xDDC8F8", Offset = "0xDDC8F8", VA = "0xDDC8F8")]
		public ControllerBoxController()
		{
		}
	}
	[Token(Token = "0x200052F")]
	public class CowController : MonoBehaviour
	{
		[Token(Token = "0x4001977")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Animation _cowAnimation;

		[Token(Token = "0x4001978")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private AudioSource _mooCowAudioSource;

		[Token(Token = "0x6001A97")]
		[Address(RVA = "0xDDC900", Offset = "0xDDC900", VA = "0xDDC900")]
		private void Start()
		{
		}

		[Token(Token = "0x6001A98")]
		[Address(RVA = "0xDDC904", Offset = "0xDDC904", VA = "0xDDC904")]
		public void PlayMooSound()
		{
		}

		[Token(Token = "0x6001A99")]
		[Address(RVA = "0xDDC8C8", Offset = "0xDDC8C8", VA = "0xDDC8C8")]
		public void GoMooCowGo()
		{
		}

		[Token(Token = "0x6001A9A")]
		[Address(RVA = "0xDDC938", Offset = "0xDDC938", VA = "0xDDC938")]
		public CowController()
		{
		}
	}
	[Token(Token = "0x2000530")]
	public class PanelHMDFollower : MonoBehaviour
	{
		[Token(Token = "0x2000531")]
		[CompilerGenerated]
		private sealed class <LerpToHMD>d__13 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001983")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001984")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001985")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PanelHMDFollower <>4__this;

			[Token(Token = "0x4001986")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Vector3 <newPanelPosition>5__2;

			[Token(Token = "0x4001987")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <startTime>5__3;

			[Token(Token = "0x4001988")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <endTime>5__4;

			[Token(Token = "0x1700035D")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001AA3")]
				[Address(RVA = "0xDDCFB8", Offset = "0xDDCFB8", VA = "0xDDCFB8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700035E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001AA5")]
				[Address(RVA = "0xDDD000", Offset = "0xDDD000", VA = "0xDDD000", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001AA0")]
			[Address(RVA = "0xDDCD30", Offset = "0xDDCD30", VA = "0xDDCD30")]
			[DebuggerHidden]
			public <LerpToHMD>d__13(int <>1__state)
			{
			}

			[Token(Token = "0x6001AA1")]
			[Address(RVA = "0xDDCDF8", Offset = "0xDDCDF8", VA = "0xDDCDF8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001AA2")]
			[Address(RVA = "0xDDCDFC", Offset = "0xDDCDFC", VA = "0xDDCDFC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001AA4")]
			[Address(RVA = "0xDDCFC0", Offset = "0xDDCFC0", VA = "0xDDCFC0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001979")]
		private const float TOTAL_DURATION = 3f;

		[Token(Token = "0x400197A")]
		private const float HMD_MOVEMENT_THRESHOLD = 0.3f;

		[Token(Token = "0x400197B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float _maxDistance;

		[Token(Token = "0x400197C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float _minDistance;

		[Token(Token = "0x400197D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float _minZDistance;

		[Token(Token = "0x400197E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private OVRCameraRig _cameraRig;

		[Token(Token = "0x400197F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 _panelInitialPosition;

		[Token(Token = "0x4001980")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Coroutine _coroutine;

		[Token(Token = "0x4001981")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3 _prevPos;

		[Token(Token = "0x4001982")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Vector3 _lastMovedToPos;

		[Token(Token = "0x6001A9B")]
		[Address(RVA = "0xDDC940", Offset = "0xDDC940", VA = "0xDDC940")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001A9C")]
		[Address(RVA = "0xDDC9E0", Offset = "0xDDC9E0", VA = "0xDDC9E0")]
		private void Update()
		{
		}

		[Token(Token = "0x6001A9D")]
		[Address(RVA = "0xDDCCF0", Offset = "0xDDCCF0", VA = "0xDDCCF0")]
		private Vector3 CalculateIdealAnchorPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001A9E")]
		[Address(RVA = "0xDDCC7C", Offset = "0xDDCC7C", VA = "0xDDCC7C")]
		[IteratorStateMachine(typeof(<LerpToHMD>d__13))]
		private IEnumerator LerpToHMD()
		{
			return null;
		}

		[Token(Token = "0x6001A9F")]
		[Address(RVA = "0xDDCD58", Offset = "0xDDCD58", VA = "0xDDCD58")]
		public PanelHMDFollower()
		{
		}
	}
	[Token(Token = "0x2000532")]
	public class SelectionCylinder : MonoBehaviour
	{
		[Token(Token = "0x2000533")]
		public enum SelectionState
		{
			[Token(Token = "0x4001990")]
			Off,
			[Token(Token = "0x4001991")]
			Selected,
			[Token(Token = "0x4001992")]
			Highlighted
		}

		[Token(Token = "0x4001989")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private MeshRenderer _selectionMeshRenderer;

		[Token(Token = "0x400198A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int _colorId;

		[Token(Token = "0x400198B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Material[] _selectionMaterials;

		[Token(Token = "0x400198C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Color[] _defaultSelectionColors;

		[Token(Token = "0x400198D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Color[] _highlightColors;

		[Token(Token = "0x400198E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private SelectionState _currSelectionState;

		[Token(Token = "0x1700035F")]
		public SelectionState CurrSelectionState
		{
			[Token(Token = "0x6001AA6")]
			[Address(RVA = "0xDDD008", Offset = "0xDDD008", VA = "0xDDD008")]
			get
			{
				return default(SelectionState);
			}
			[Token(Token = "0x6001AA7")]
			[Address(RVA = "0xDDD010", Offset = "0xDDD010", VA = "0xDDD010")]
			set
			{
			}
		}

		[Token(Token = "0x6001AA8")]
		[Address(RVA = "0xDDD164", Offset = "0xDDD164", VA = "0xDDD164")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001AA9")]
		[Address(RVA = "0xDDD328", Offset = "0xDDD328", VA = "0xDDD328")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001AAA")]
		[Address(RVA = "0xDDD084", Offset = "0xDDD084", VA = "0xDDD084")]
		private void AffectSelectionColor(Color[] newColors)
		{
		}

		[Token(Token = "0x6001AAB")]
		[Address(RVA = "0xDDD3F0", Offset = "0xDDD3F0", VA = "0xDDD3F0")]
		public SelectionCylinder()
		{
		}
	}
	[Token(Token = "0x2000534")]
	public class TrackSegment : MonoBehaviour
	{
		[Token(Token = "0x2000535")]
		public enum SegmentType
		{
			[Token(Token = "0x40019A1")]
			Straight,
			[Token(Token = "0x40019A2")]
			LeftTurn,
			[Token(Token = "0x40019A3")]
			RightTurn,
			[Token(Token = "0x40019A4")]
			Switch
		}

		[Token(Token = "0x4001993")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private SegmentType _segmentType;

		[Token(Token = "0x4001994")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private MeshFilter _straight;

		[Token(Token = "0x4001995")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private MeshFilter _leftTurn;

		[Token(Token = "0x4001996")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private MeshFilter _rightTurn;

		[Token(Token = "0x4001997")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float _gridSize;

		[Token(Token = "0x4001998")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private int _subDivCount;

		[Token(Token = "0x4001999")]
		private const float _originalGridSize = 0.8f;

		[Token(Token = "0x400199A")]
		private const float _trackWidth = 0.15f;

		[Token(Token = "0x400199B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private GameObject _mesh;

		[Token(Token = "0x400199D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Pose _p1;

		[Token(Token = "0x400199E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Pose _p2;

		[Token(Token = "0x400199F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Pose _endPose;

		[Token(Token = "0x17000360")]
		public float StartDistance
		{
			[Token(Token = "0x6001AAD")]
			[Address(RVA = "0xDDD460", Offset = "0xDDD460", VA = "0xDDD460")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001AAE")]
			[Address(RVA = "0xDDD468", Offset = "0xDDD468", VA = "0xDDD468")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000361")]
		public float GridSize
		{
			[Token(Token = "0x6001AAF")]
			[Address(RVA = "0xDDD470", Offset = "0xDDD470", VA = "0xDDD470")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001AB0")]
			[Address(RVA = "0xDDD478", Offset = "0xDDD478", VA = "0xDDD478")]
			private set
			{
			}
		}

		[Token(Token = "0x17000362")]
		public int SubDivCount
		{
			[Token(Token = "0x6001AB1")]
			[Address(RVA = "0xDDD480", Offset = "0xDDD480", VA = "0xDDD480")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001AB2")]
			[Address(RVA = "0xDDD488", Offset = "0xDDD488", VA = "0xDDD488")]
			set
			{
			}
		}

		[Token(Token = "0x17000363")]
		public SegmentType Type
		{
			[Token(Token = "0x6001AB3")]
			[Address(RVA = "0xDDD490", Offset = "0xDDD490", VA = "0xDDD490")]
			get
			{
				return default(SegmentType);
			}
		}

		[Token(Token = "0x17000364")]
		public Pose EndPose
		{
			[Token(Token = "0x6001AB4")]
			[Address(RVA = "0xDDD498", Offset = "0xDDD498", VA = "0xDDD498")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000365")]
		public float Radius
		{
			[Token(Token = "0x6001AB5")]
			[Address(RVA = "0xDDD86C", Offset = "0xDDD86C", VA = "0xDDD86C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000366")]
		public float SegmentLength
		{
			[Token(Token = "0x6001AB7")]
			[Address(RVA = "0xDDD4F4", Offset = "0xDDD4F4", VA = "0xDDD4F4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6001AB6")]
		[Address(RVA = "0xDDD87C", Offset = "0xDDD87C", VA = "0xDDD87C")]
		public float setGridSize(float size)
		{
			return default(float);
		}

		[Token(Token = "0x6001AB8")]
		[Address(RVA = "0xDDD894", Offset = "0xDDD894", VA = "0xDDD894")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001AB9")]
		[Address(RVA = "0xDDD534", Offset = "0xDDD534", VA = "0xDDD534")]
		public void UpdatePose(float distanceIntoSegment, Pose pose)
		{
		}

		[Token(Token = "0x6001ABA")]
		[Address(RVA = "0xDDD898", Offset = "0xDDD898", VA = "0xDDD898")]
		private void Update()
		{
		}

		[Token(Token = "0x6001ABB")]
		[Address(RVA = "0xDDD89C", Offset = "0xDDD89C", VA = "0xDDD89C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001ABC")]
		[Address(RVA = "0xDDD8F8", Offset = "0xDDD8F8", VA = "0xDDD8F8")]
		private void DrawDebugLines()
		{
		}

		[Token(Token = "0x6001ABD")]
		[Address(RVA = "0xDDE22C", Offset = "0xDDE22C", VA = "0xDDE22C")]
		public void RegenerateTrackAndMesh()
		{
		}

		[Token(Token = "0x6001ABE")]
		[Address(RVA = "0xDDE4B0", Offset = "0xDDE4B0", VA = "0xDDE4B0")]
		public TrackSegment()
		{
		}
	}
	[Token(Token = "0x2000536")]
	public class TrainButtonVisualController : MonoBehaviour
	{
		[Token(Token = "0x2000537")]
		[CompilerGenerated]
		private sealed class <ResetPosition>d__26 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40019B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40019B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40019B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TrainButtonVisualController <>4__this;

			[Token(Token = "0x40019B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <startTime>5__2;

			[Token(Token = "0x40019BA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <endTime>5__3;

			[Token(Token = "0x17000367")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001ACD")]
				[Address(RVA = "0xDDEF48", Offset = "0xDDEF48", VA = "0xDDEF48", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000368")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001ACF")]
				[Address(RVA = "0xDDEF90", Offset = "0xDDEF90", VA = "0xDDEF90", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001ACA")]
			[Address(RVA = "0xDDED7C", Offset = "0xDDED7C", VA = "0xDDED7C")]
			[DebuggerHidden]
			public <ResetPosition>d__26(int <>1__state)
			{
			}

			[Token(Token = "0x6001ACB")]
			[Address(RVA = "0xDDEDCC", Offset = "0xDDEDCC", VA = "0xDDEDCC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001ACC")]
			[Address(RVA = "0xDDEDD0", Offset = "0xDDEDD0", VA = "0xDDEDD0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001ACE")]
			[Address(RVA = "0xDDEF50", Offset = "0xDDEF50", VA = "0xDDEF50", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40019A5")]
		private const float LERP_TO_OLD_POS_DURATION = 1f;

		[Token(Token = "0x40019A6")]
		private const float LOCAL_SIZE_HALVED = 0.5f;

		[Token(Token = "0x40019A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private MeshRenderer _meshRenderer;

		[Token(Token = "0x40019A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private MeshRenderer _glowRenderer;

		[Token(Token = "0x40019A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private ButtonController _buttonController;

		[Token(Token = "0x40019AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Color _buttonContactColor;

		[Token(Token = "0x40019AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Color _buttonActionColor;

		[Token(Token = "0x40019AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private AudioSource _audioSource;

		[Token(Token = "0x40019AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private AudioClip _actionSoundEffect;

		[Token(Token = "0x40019AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private Transform _buttonContactTransform;

		[Token(Token = "0x40019AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private float _contactMaxDisplacementDistance;

		[Token(Token = "0x40019B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Material _buttonMaterial;

		[Token(Token = "0x40019B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Color _buttonDefaultColor;

		[Token(Token = "0x40019B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private int _materialColorId;

		[Token(Token = "0x40019B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private bool _buttonInContactOrActionStates;

		[Token(Token = "0x40019B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Coroutine _lerpToOldPositionCr;

		[Token(Token = "0x40019B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3 _oldPosition;

		[Token(Token = "0x6001ABF")]
		[Address(RVA = "0xDDE584", Offset = "0xDDE584", VA = "0xDDE584")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001AC0")]
		[Address(RVA = "0xDDE63C", Offset = "0xDDE63C", VA = "0xDDE63C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001AC1")]
		[Address(RVA = "0xDDE6CC", Offset = "0xDDE6CC", VA = "0xDDE6CC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001AC2")]
		[Address(RVA = "0xDDE814", Offset = "0xDDE814", VA = "0xDDE814")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001AC3")]
		[Address(RVA = "0xDDE9A0", Offset = "0xDDE9A0", VA = "0xDDE9A0")]
		private void ActionOrInContactZoneStayEvent(ColliderZoneArgs collisionArgs)
		{
		}

		[Token(Token = "0x6001AC4")]
		[Address(RVA = "0xDDEAB0", Offset = "0xDDEAB0", VA = "0xDDEAB0")]
		private void InteractableStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6001AC5")]
		[Address(RVA = "0xDDECB4", Offset = "0xDDECB4", VA = "0xDDECB4")]
		private void PlaySound(AudioClip clip)
		{
		}

		[Token(Token = "0x6001AC6")]
		[Address(RVA = "0xDDEBC0", Offset = "0xDDEBC0", VA = "0xDDEBC0")]
		private void StopResetLerping()
		{
		}

		[Token(Token = "0x6001AC7")]
		[Address(RVA = "0xDDEBD4", Offset = "0xDDEBD4", VA = "0xDDEBD4")]
		private void LerpToOldPosition()
		{
		}

		[Token(Token = "0x6001AC8")]
		[Address(RVA = "0xDDED08", Offset = "0xDDED08", VA = "0xDDED08")]
		[IteratorStateMachine(typeof(<ResetPosition>d__26))]
		private IEnumerator ResetPosition()
		{
			return null;
		}

		[Token(Token = "0x6001AC9")]
		[Address(RVA = "0xDDEDA4", Offset = "0xDDEDA4", VA = "0xDDEDA4")]
		public TrainButtonVisualController()
		{
		}
	}
	[Token(Token = "0x2000538")]
	public class TrainCar : TrainCarBase
	{
		[Token(Token = "0x40019BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private TrainCarBase _parentLocomotive;

		[Token(Token = "0x40019BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		protected float _distanceBehindParent;

		[Token(Token = "0x17000369")]
		public float DistanceBehindParentScaled
		{
			[Token(Token = "0x6001AD0")]
			[Address(RVA = "0xDDEF98", Offset = "0xDDEF98", VA = "0xDDEF98")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6001AD1")]
		[Address(RVA = "0xDDEFA8", Offset = "0xDDEFA8", VA = "0xDDEFA8", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6001AD2")]
		[Address(RVA = "0xDDEFB0", Offset = "0xDDEFB0", VA = "0xDDEFB0", Slot = "5")]
		public override void UpdatePosition()
		{
		}

		[Token(Token = "0x6001AD3")]
		[Address(RVA = "0xDDF2E0", Offset = "0xDDF2E0", VA = "0xDDF2E0")]
		public TrainCar()
		{
		}
	}
	[Token(Token = "0x2000539")]
	public abstract class TrainCarBase : MonoBehaviour
	{
		[Token(Token = "0x40019BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Vector3 OFFSET;

		[Token(Token = "0x40019BE")]
		private const float WHEEL_RADIUS = 0.027f;

		[Token(Token = "0x40019BF")]
		private const float TWO_PI = (float)Math.PI * 2f;

		[Token(Token = "0x40019C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		protected Transform _frontWheels;

		[Token(Token = "0x40019C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		protected Transform _rearWheels;

		[Token(Token = "0x40019C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		protected TrainTrack _trainTrack;

		[Token(Token = "0x40019C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		protected Transform[] _individualWheels;

		[Token(Token = "0x40019C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		protected float scale;

		[Token(Token = "0x40019C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Pose _frontPose;

		[Token(Token = "0x40019C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Pose _rearPose;

		[Token(Token = "0x1700036A")]
		public float Distance
		{
			[Token(Token = "0x6001AD4")]
			[Address(RVA = "0xDDF3E4", Offset = "0xDDF3E4", VA = "0xDDF3E4")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001AD5")]
			[Address(RVA = "0xDDF3EC", Offset = "0xDDF3EC", VA = "0xDDF3EC")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x1700036B")]
		public float Scale
		{
			[Token(Token = "0x6001AD6")]
			[Address(RVA = "0xDDF3F4", Offset = "0xDDF3F4", VA = "0xDDF3F4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001AD7")]
			[Address(RVA = "0xDDF3FC", Offset = "0xDDF3FC", VA = "0xDDF3FC")]
			set
			{
			}
		}

		[Token(Token = "0x6001AD8")]
		[Address(RVA = "0xDDEFAC", Offset = "0xDDEFAC", VA = "0xDDEFAC", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6001AD9")]
		[Address(RVA = "0xDDF404", Offset = "0xDDF404", VA = "0xDDF404")]
		public void UpdatePose(float distance, TrainCarBase train, Pose pose)
		{
		}

		[Token(Token = "0x6001ADA")]
		[Address(RVA = "0xDDEFEC", Offset = "0xDDEFEC", VA = "0xDDEFEC")]
		protected void UpdateCarPosition()
		{
		}

		[Token(Token = "0x6001ADB")]
		[Address(RVA = "0xDDF1FC", Offset = "0xDDF1FC", VA = "0xDDF1FC")]
		protected void RotateCarWheels()
		{
		}

		[Token(Token = "0x6001ADC")]
		public abstract void UpdatePosition();

		[Token(Token = "0x6001ADD")]
		[Address(RVA = "0xDDF340", Offset = "0xDDF340", VA = "0xDDF340")]
		protected TrainCarBase()
		{
		}
	}
	[Token(Token = "0x200053A")]
	public class TrainCrossingController : MonoBehaviour
	{
		[Token(Token = "0x200053B")]
		[CompilerGenerated]
		private sealed class <AnimateCrossing>d__15 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40019D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40019D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40019D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TrainCrossingController <>4__this;

			[Token(Token = "0x40019D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float animationLength;

			[Token(Token = "0x40019D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <animationEndTime>5__2;

			[Token(Token = "0x40019D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <lightBlinkDuration>5__3;

			[Token(Token = "0x40019D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <lightBlinkStartTime>5__4;

			[Token(Token = "0x40019D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <lightBlinkEndTime>5__5;

			[Token(Token = "0x40019DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private Material <lightToBlinkOn>5__6;

			[Token(Token = "0x40019DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private Material <lightToBlinkOff>5__7;

			[Token(Token = "0x40019DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private Color <onColor>5__8;

			[Token(Token = "0x40019DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private Color <offColor>5__9;

			[Token(Token = "0x1700036C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001AEB")]
				[Address(RVA = "0xDDFC24", Offset = "0xDDFC24", VA = "0xDDFC24", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700036D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001AED")]
				[Address(RVA = "0xDDFC6C", Offset = "0xDDFC6C", VA = "0xDDFC6C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001AE8")]
			[Address(RVA = "0xDDF898", Offset = "0xDDF898", VA = "0xDDF898")]
			[DebuggerHidden]
			public <AnimateCrossing>d__15(int <>1__state)
			{
			}

			[Token(Token = "0x6001AE9")]
			[Address(RVA = "0xDDFA0C", Offset = "0xDDFA0C", VA = "0xDDFA0C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001AEA")]
			[Address(RVA = "0xDDFA10", Offset = "0xDDFA10", VA = "0xDDFA10", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001AEC")]
			[Address(RVA = "0xDDFC2C", Offset = "0xDDFC2C", VA = "0xDDFC2C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40019C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private AudioSource _audioSource;

		[Token(Token = "0x40019C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private AudioClip[] _crossingSounds;

		[Token(Token = "0x40019CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private MeshRenderer _lightSide1Renderer;

		[Token(Token = "0x40019CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private MeshRenderer _lightSide2Renderer;

		[Token(Token = "0x40019CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private SelectionCylinder _selectionCylinder;

		[Token(Token = "0x40019CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material _lightsSide1Mat;

		[Token(Token = "0x40019CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Material _lightsSide2Mat;

		[Token(Token = "0x40019CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int _colorId;

		[Token(Token = "0x40019D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Coroutine _xingAnimationCr;

		[Token(Token = "0x40019D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private InteractableTool _toolInteractingWithMe;

		[Token(Token = "0x6001ADF")]
		[Address(RVA = "0xDDF4C4", Offset = "0xDDF4C4", VA = "0xDDF4C4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001AE0")]
		[Address(RVA = "0xDDF520", Offset = "0xDDF520", VA = "0xDDF520")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001AE1")]
		[Address(RVA = "0xDDF5F8", Offset = "0xDDF5F8", VA = "0xDDF5F8")]
		public void CrossingButtonStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6001AE2")]
		[Address(RVA = "0xDDF74C", Offset = "0xDDF74C", VA = "0xDDF74C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001AE3")]
		[Address(RVA = "0xDDF654", Offset = "0xDDF654", VA = "0xDDF654")]
		private void ActivateTrainCrossing()
		{
		}

		[Token(Token = "0x6001AE4")]
		[Address(RVA = "0xDDF814", Offset = "0xDDF814", VA = "0xDDF814")]
		[IteratorStateMachine(typeof(<AnimateCrossing>d__15))]
		private IEnumerator AnimateCrossing(float animationLength)
		{
			return null;
		}

		[Token(Token = "0x6001AE5")]
		[Address(RVA = "0xDDF8C0", Offset = "0xDDF8C0", VA = "0xDDF8C0")]
		private void AffectMaterials(Material[] materials, Color newColor)
		{
		}

		[Token(Token = "0x6001AE6")]
		[Address(RVA = "0xDDF958", Offset = "0xDDF958", VA = "0xDDF958")]
		private void ToggleLightObjects(bool enableState)
		{
		}

		[Token(Token = "0x6001AE7")]
		[Address(RVA = "0xDDF9B4", Offset = "0xDDF9B4", VA = "0xDDF9B4")]
		public TrainCrossingController()
		{
		}
	}
	[Token(Token = "0x200053C")]
	public class TrainLocomotive : TrainCarBase
	{
		[Token(Token = "0x200053D")]
		private enum EngineSoundState
		{
			[Token(Token = "0x40019FC")]
			Start,
			[Token(Token = "0x40019FD")]
			AccelerateOrSetProperSpeed,
			[Token(Token = "0x40019FE")]
			Stop
		}

		[Token(Token = "0x200053E")]
		[CompilerGenerated]
		private sealed class <StartStopTrain>d__34 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40019FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001A00")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001A01")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public bool startTrain;

			[Token(Token = "0x4001A02")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public TrainLocomotive <>4__this;

			[Token(Token = "0x4001A03")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <endSpeed>5__2;

			[Token(Token = "0x4001A04")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <timePeriodForSpeedChange>5__3;

			[Token(Token = "0x4001A05")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <startTime>5__4;

			[Token(Token = "0x4001A06")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private float <endTime>5__5;

			[Token(Token = "0x4001A07")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private float <startSpeed>5__6;

			[Token(Token = "0x1700036E")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001B00")]
				[Address(RVA = "0xDE0504", Offset = "0xDE0504", VA = "0xDE0504", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700036F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001B02")]
				[Address(RVA = "0xDE054C", Offset = "0xDE054C", VA = "0xDE054C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001AFD")]
			[Address(RVA = "0xDDFF14", Offset = "0xDDFF14", VA = "0xDDFF14")]
			[DebuggerHidden]
			public <StartStopTrain>d__34(int <>1__state)
			{
			}

			[Token(Token = "0x6001AFE")]
			[Address(RVA = "0xDE02DC", Offset = "0xDE02DC", VA = "0xDE02DC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001AFF")]
			[Address(RVA = "0xDE02E0", Offset = "0xDE02E0", VA = "0xDE02E0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001B01")]
			[Address(RVA = "0xDE050C", Offset = "0xDE050C", VA = "0xDE050C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40019DE")]
		private const float MIN_SPEED = 0.2f;

		[Token(Token = "0x40019DF")]
		private const float MAX_SPEED = 2.7f;

		[Token(Token = "0x40019E0")]
		private const float SMOKE_SPEED_MULTIPLIER = 8f;

		[Token(Token = "0x40019E1")]
		private const int MAX_PARTICLES_MULTIPLIER = 3;

		[Token(Token = "0x40019E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		[Range(0.2f, 2.7f)]
		protected float _initialSpeed;

		[Token(Token = "0x40019E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private GameObject _startStopButton;

		[Token(Token = "0x40019E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private GameObject _decreaseSpeedButton;

		[Token(Token = "0x40019E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private GameObject _increaseSpeedButton;

		[Token(Token = "0x40019E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private GameObject _smokeButton;

		[Token(Token = "0x40019E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private GameObject _whistleButton;

		[Token(Token = "0x40019E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private GameObject _reverseButton;

		[Token(Token = "0x40019E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private AudioSource _whistleAudioSource;

		[Token(Token = "0x40019EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		private AudioClip _whistleSound;

		[Token(Token = "0x40019EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		private AudioSource _engineAudioSource;

		[Token(Token = "0x40019EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		private AudioClip[] _accelerationSounds;

		[Token(Token = "0x40019ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		private AudioClip[] _decelerationSounds;

		[Token(Token = "0x40019EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		private AudioClip _startUpSound;

		[Token(Token = "0x40019EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		private AudioSource _smokeStackAudioSource;

		[Token(Token = "0x40019F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		private AudioClip _smokeSound;

		[Token(Token = "0x40019F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		private ParticleSystem _smoke1;

		[Token(Token = "0x40019F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		private ParticleSystem _smoke2;

		[Token(Token = "0x40019F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		private TrainCarBase[] _childCars;

		[Token(Token = "0x40019F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private bool _isMoving;

		[Token(Token = "0x40019F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE1")]
		private bool _reverse;

		[Token(Token = "0x40019F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private float _currentSpeed;

		[Token(Token = "0x40019F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private float _speedDiv;

		[Token(Token = "0x40019F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private float _standardRateOverTimeMultiplier;

		[Token(Token = "0x40019F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private int _standardMaxParticles;

		[Token(Token = "0x40019FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Coroutine _startStopTrainCr;

		[Token(Token = "0x6001AEE")]
		[Address(RVA = "0xDDFC74", Offset = "0xDDFC74", VA = "0xDDFC74")]
		private void Start()
		{
		}

		[Token(Token = "0x6001AEF")]
		[Address(RVA = "0xDDFDD0", Offset = "0xDDFDD0", VA = "0xDDFDD0")]
		private void Update()
		{
		}

		[Token(Token = "0x6001AF0")]
		[Address(RVA = "0xDDFDDC", Offset = "0xDDFDDC", VA = "0xDDFDDC", Slot = "5")]
		public override void UpdatePosition()
		{
		}

		[Token(Token = "0x6001AF1")]
		[Address(RVA = "0xDDC4F0", Offset = "0xDDC4F0", VA = "0xDDC4F0")]
		public void StartStopStateChanged()
		{
		}

		[Token(Token = "0x6001AF2")]
		[Address(RVA = "0xDDFD48", Offset = "0xDDFD48", VA = "0xDDFD48")]
		[IteratorStateMachine(typeof(<StartStopTrain>d__34))]
		private IEnumerator StartStopTrain(bool startTrain)
		{
			return null;
		}

		[Token(Token = "0x6001AF3")]
		[Address(RVA = "0xDDFF3C", Offset = "0xDDFF3C", VA = "0xDDFF3C")]
		private float PlayEngineSound(EngineSoundState engineSoundState)
		{
			return default(float);
		}

		[Token(Token = "0x6001AF4")]
		[Address(RVA = "0xDDFEB4", Offset = "0xDDFEB4", VA = "0xDDFEB4")]
		private void UpdateDistance()
		{
		}

		[Token(Token = "0x6001AF5")]
		[Address(RVA = "0xDDC57C", Offset = "0xDDC57C", VA = "0xDDC57C")]
		public void DecreaseSpeedStateChanged()
		{
		}

		[Token(Token = "0x6001AF6")]
		[Address(RVA = "0xDDC60C", Offset = "0xDDC60C", VA = "0xDDC60C")]
		public void IncreaseSpeedStateChanged()
		{
		}

		[Token(Token = "0x6001AF7")]
		[Address(RVA = "0xDE0150", Offset = "0xDE0150", VA = "0xDE0150")]
		private void UpdateSmokeEmissionBasedOnSpeed()
		{
		}

		[Token(Token = "0x6001AF8")]
		[Address(RVA = "0xDE0244", Offset = "0xDE0244", VA = "0xDE0244")]
		private float GetCurrentSmokeEmission()
		{
			return default(float);
		}

		[Token(Token = "0x6001AF9")]
		[Address(RVA = "0xDDC69C", Offset = "0xDDC69C", VA = "0xDDC69C")]
		public void SmokeButtonStateChanged()
		{
		}

		[Token(Token = "0x6001AFA")]
		[Address(RVA = "0xDDC748", Offset = "0xDDC748", VA = "0xDDC748")]
		public void WhistleButtonStateChanged()
		{
		}

		[Token(Token = "0x6001AFB")]
		[Address(RVA = "0xDDC828", Offset = "0xDDC828", VA = "0xDDC828")]
		public void ReverseButtonStateChanged()
		{
		}

		[Token(Token = "0x6001AFC")]
		[Address(RVA = "0xDE0280", Offset = "0xDE0280", VA = "0xDE0280")]
		public TrainLocomotive()
		{
		}
	}
	[Token(Token = "0x200053F")]
	public class TrainTrack : MonoBehaviour
	{
		[Token(Token = "0x4001A08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float _gridSize;

		[Token(Token = "0x4001A09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private int _subDivCount;

		[Token(Token = "0x4001A0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Transform _segmentParent;

		[Token(Token = "0x4001A0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Transform _trainParent;

		[Token(Token = "0x4001A0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private bool _regnerateTrackMeshOnAwake;

		[Token(Token = "0x4001A0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float _trainLength;

		[Token(Token = "0x4001A0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private TrackSegment[] _trackSegments;

		[Token(Token = "0x17000370")]
		public float TrackLength
		{
			[Token(Token = "0x6001B03")]
			[Address(RVA = "0xDE1554", Offset = "0xDE1554", VA = "0xDE1554")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001B04")]
			[Address(RVA = "0xDE155C", Offset = "0xDE155C", VA = "0xDE155C")]
			private set
			{
			}
		}

		[Token(Token = "0x6001B05")]
		[Address(RVA = "0xDE1564", Offset = "0xDE1564", VA = "0xDE1564")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001B06")]
		[Address(RVA = "0xDE1734", Offset = "0xDE1734", VA = "0xDE1734")]
		public TrackSegment GetSegment(float distance)
		{
			return null;
		}

		[Token(Token = "0x6001B07")]
		[Address(RVA = "0xDE1568", Offset = "0xDE1568", VA = "0xDE1568")]
		public void Regenerate()
		{
		}

		[Token(Token = "0x6001B08")]
		[Address(RVA = "0xDE17E8", Offset = "0xDE17E8", VA = "0xDE17E8")]
		private void SetScale(float ratio)
		{
		}

		[Token(Token = "0x6001B09")]
		[Address(RVA = "0xDE18C8", Offset = "0xDE18C8", VA = "0xDE18C8")]
		public TrainTrack()
		{
		}
	}
	[Token(Token = "0x2000540")]
	public class Pose
	{
		[Token(Token = "0x4001A0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 Position;

		[Token(Token = "0x4001A10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Quaternion Rotation;

		[Token(Token = "0x6001B0A")]
		[Address(RVA = "0xDE18E4", Offset = "0xDE18E4", VA = "0xDE18E4")]
		public Pose()
		{
		}

		[Token(Token = "0x6001B0B")]
		[Address(RVA = "0xDE197C", Offset = "0xDE197C", VA = "0xDE197C")]
		public Pose(Vector3 position, Quaternion rotation)
		{
		}
	}
	[Token(Token = "0x2000541")]
	public class WindmillBladesController : MonoBehaviour
	{
		[Token(Token = "0x2000542")]
		[CompilerGenerated]
		private sealed class <LerpToSpeed>d__17 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001A1C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001A1D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001A1E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public WindmillBladesController <>4__this;

			[Token(Token = "0x4001A1F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float goalSpeed;

			[Token(Token = "0x4001A20")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <totalTime>5__2;

			[Token(Token = "0x4001A21")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <startSpeed>5__3;

			[Token(Token = "0x17000372")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001B18")]
				[Address(RVA = "0xDE1F70", Offset = "0xDE1F70", VA = "0xDE1F70", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000373")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001B1A")]
				[Address(RVA = "0xDE1FB8", Offset = "0xDE1FB8", VA = "0xDE1FB8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001B15")]
			[Address(RVA = "0xDE1C58", Offset = "0xDE1C58", VA = "0xDE1C58")]
			[DebuggerHidden]
			public <LerpToSpeed>d__17(int <>1__state)
			{
			}

			[Token(Token = "0x6001B16")]
			[Address(RVA = "0xDE1DCC", Offset = "0xDE1DCC", VA = "0xDE1DCC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001B17")]
			[Address(RVA = "0xDE1DD0", Offset = "0xDE1DD0", VA = "0xDE1DD0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001B19")]
			[Address(RVA = "0xDE1F78", Offset = "0xDE1F78", VA = "0xDE1F78", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000543")]
		[CompilerGenerated]
		private sealed class <PlaySoundDelayed>d__18 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001A22")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001A23")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001A24")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public WindmillBladesController <>4__this;

			[Token(Token = "0x4001A25")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public AudioClip initial;

			[Token(Token = "0x4001A26")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float timeDelayAfterInitial;

			[Token(Token = "0x4001A27")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public AudioClip clip;

			[Token(Token = "0x17000374")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001B1E")]
				[Address(RVA = "0xDE2094", Offset = "0xDE2094", VA = "0xDE2094", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000375")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001B20")]
				[Address(RVA = "0xDE20DC", Offset = "0xDE20DC", VA = "0xDE20DC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001B1B")]
			[Address(RVA = "0xDE1D34", Offset = "0xDE1D34", VA = "0xDE1D34")]
			[DebuggerHidden]
			public <PlaySoundDelayed>d__18(int <>1__state)
			{
			}

			[Token(Token = "0x6001B1C")]
			[Address(RVA = "0xDE1FC0", Offset = "0xDE1FC0", VA = "0xDE1FC0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001B1D")]
			[Address(RVA = "0xDE1FC4", Offset = "0xDE1FC4", VA = "0xDE1FC4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001B1F")]
			[Address(RVA = "0xDE209C", Offset = "0xDE209C", VA = "0xDE209C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001A11")]
		private const float MAX_TIME = 1f;

		[Token(Token = "0x4001A12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private AudioSource _audioSource;

		[Token(Token = "0x4001A13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private AudioClip _windMillRotationSound;

		[Token(Token = "0x4001A14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private AudioClip _windMillStartSound;

		[Token(Token = "0x4001A15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private AudioClip _windMillStopSound;

		[Token(Token = "0x4001A17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float _currentSpeed;

		[Token(Token = "0x4001A18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Coroutine _lerpSpeedCoroutine;

		[Token(Token = "0x4001A19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Coroutine _audioChangeCr;

		[Token(Token = "0x4001A1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Quaternion _originalRotation;

		[Token(Token = "0x4001A1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float _rotAngle;

		[Token(Token = "0x17000371")]
		public bool IsMoving
		{
			[Token(Token = "0x6001B0C")]
			[Address(RVA = "0xDE19E0", Offset = "0xDE19E0", VA = "0xDE19E0")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001B0D")]
			[Address(RVA = "0xDE19E8", Offset = "0xDE19E8", VA = "0xDE19E8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6001B0E")]
		[Address(RVA = "0xDE19F4", Offset = "0xDE19F4", VA = "0xDE19F4")]
		private void Start()
		{
		}

		[Token(Token = "0x6001B0F")]
		[Address(RVA = "0xDE1A24", Offset = "0xDE1A24", VA = "0xDE1A24")]
		private void Update()
		{
		}

		[Token(Token = "0x6001B10")]
		[Address(RVA = "0xDE1B64", Offset = "0xDE1B64", VA = "0xDE1B64")]
		public void SetMoveState(bool newMoveState, float goalSpeed)
		{
		}

		[Token(Token = "0x6001B11")]
		[Address(RVA = "0xDE1BD4", Offset = "0xDE1BD4", VA = "0xDE1BD4")]
		[IteratorStateMachine(typeof(<LerpToSpeed>d__17))]
		private IEnumerator LerpToSpeed(float goalSpeed)
		{
			return null;
		}

		[Token(Token = "0x6001B12")]
		[Address(RVA = "0xDE1C80", Offset = "0xDE1C80", VA = "0xDE1C80")]
		[IteratorStateMachine(typeof(<PlaySoundDelayed>d__18))]
		private IEnumerator PlaySoundDelayed(AudioClip initial, AudioClip clip, float timeDelayAfterInitial)
		{
			return null;
		}

		[Token(Token = "0x6001B13")]
		[Address(RVA = "0xDE1D5C", Offset = "0xDE1D5C", VA = "0xDE1D5C")]
		private void PlaySound(AudioClip clip, bool loop = false)
		{
		}

		[Token(Token = "0x6001B14")]
		[Address(RVA = "0xDE1DC4", Offset = "0xDE1DC4", VA = "0xDE1DC4")]
		public WindmillBladesController()
		{
		}
	}
	[Token(Token = "0x2000544")]
	public class WindmillController : MonoBehaviour
	{
		[Token(Token = "0x4001A28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject _startStopButton;

		[Token(Token = "0x4001A29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float _maxSpeed;

		[Token(Token = "0x4001A2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private SelectionCylinder _selectionCylinder;

		[Token(Token = "0x4001A2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private WindmillBladesController _bladesRotation;

		[Token(Token = "0x4001A2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private InteractableTool _toolInteractingWithMe;

		[Token(Token = "0x6001B21")]
		[Address(RVA = "0xDE20E4", Offset = "0xDE20E4", VA = "0xDE20E4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001B22")]
		[Address(RVA = "0xDE2158", Offset = "0xDE2158", VA = "0xDE2158")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001B23")]
		[Address(RVA = "0xDE2220", Offset = "0xDE2220", VA = "0xDE2220")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001B24")]
		[Address(RVA = "0xDE2330", Offset = "0xDE2330", VA = "0xDE2330")]
		private void StartStopStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6001B25")]
		[Address(RVA = "0xDE23AC", Offset = "0xDE23AC", VA = "0xDE23AC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001B26")]
		[Address(RVA = "0xDE2478", Offset = "0xDE2478", VA = "0xDE2478")]
		public WindmillController()
		{
		}
	}
	[Token(Token = "0x2000545")]
	public enum EUiDisplayType
	{
		[Token(Token = "0x4001A2E")]
		EUDT_WorldGeoQuad,
		[Token(Token = "0x4001A2F")]
		EUDT_OverlayQuad,
		[Token(Token = "0x4001A30")]
		EUDT_None,
		[Token(Token = "0x4001A31")]
		EUDT_MaxDislayTypes
	}
	[Token(Token = "0x2000546")]
	public class OVROverlaySample : MonoBehaviour
	{
		[Token(Token = "0x2000547")]
		[CompilerGenerated]
		private sealed class <WaitforOVROverlay>d__30 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001A4A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001A4B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001A4C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public OVROverlaySample <>4__this;

			[Token(Token = "0x17000376")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001B3A")]
				[Address(RVA = "0xDE3AF8", Offset = "0xDE3AF8", VA = "0xDE3AF8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000377")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001B3C")]
				[Address(RVA = "0xDE3B40", Offset = "0xDE3B40", VA = "0xDE3B40", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001B37")]
			[Address(RVA = "0xDE3188", Offset = "0xDE3188", VA = "0xDE3188")]
			[DebuggerHidden]
			public <WaitforOVROverlay>d__30(int <>1__state)
			{
			}

			[Token(Token = "0x6001B38")]
			[Address(RVA = "0xDE38FC", Offset = "0xDE38FC", VA = "0xDE38FC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001B39")]
			[Address(RVA = "0xDE3900", Offset = "0xDE3900", VA = "0xDE3900", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001B3B")]
			[Address(RVA = "0xDE3B00", Offset = "0xDE3B00", VA = "0xDE3B00", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001A32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool inMenu;

		[Token(Token = "0x4001A33")]
		private const string ovrOverlayID = "OVROverlayID";

		[Token(Token = "0x4001A34")]
		private const string applicationID = "ApplicationID";

		[Token(Token = "0x4001A35")]
		private const string noneID = "NoneID";

		[Token(Token = "0x4001A36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Toggle applicationRadioButton;

		[Token(Token = "0x4001A37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Toggle noneRadioButton;

		[Token(Token = "0x4001A38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("App vs Compositor Comparison Settings")]
		public GameObject mainCamera;

		[Token(Token = "0x4001A39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject uiCamera;

		[Token(Token = "0x4001A3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject uiGeoParent;

		[Token(Token = "0x4001A3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject worldspaceGeoParent;

		[Token(Token = "0x4001A3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public OVROverlay cameraRenderOverlay;

		[Token(Token = "0x4001A3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public OVROverlay renderingLabelOverlay;

		[Token(Token = "0x4001A3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Texture applicationLabelTexture;

		[Token(Token = "0x4001A3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Texture compositorLabelTexture;

		[Token(Token = "0x4001A40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Header("Level Loading Sim Settings")]
		public GameObject prefabForLevelLoadSim;

		[Token(Token = "0x4001A41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public OVROverlay cubemapOverlay;

		[Token(Token = "0x4001A42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public OVROverlay loadingTextQuadOverlay;

		[Token(Token = "0x4001A43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float distanceFromCamToLoadText;

		[Token(Token = "0x4001A44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float cubeSpawnRadius;

		[Token(Token = "0x4001A45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float heightBetweenItems;

		[Token(Token = "0x4001A46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public int numObjectsPerLevel;

		[Token(Token = "0x4001A47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public int numLevels;

		[Token(Token = "0x4001A48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public int numLoopsTrigger;

		[Token(Token = "0x4001A49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private List<GameObject> spawnedCubes;

		[Token(Token = "0x6001B27")]
		[Address(RVA = "0xDE2488", Offset = "0xDE2488", VA = "0xDE2488")]
		private void Start()
		{
		}

		[Token(Token = "0x6001B28")]
		[Address(RVA = "0xDE2CB8", Offset = "0xDE2CB8", VA = "0xDE2CB8")]
		private void Update()
		{
		}

		[Token(Token = "0x6001B29")]
		[Address(RVA = "0xDE2DE0", Offset = "0xDE2DE0", VA = "0xDE2DE0")]
		private void ActivateWorldGeo()
		{
		}

		[Token(Token = "0x6001B2A")]
		[Address(RVA = "0xDE2F10", Offset = "0xDE2F10", VA = "0xDE2F10")]
		private void ActivateOVROverlay()
		{
		}

		[Token(Token = "0x6001B2B")]
		[Address(RVA = "0xDE3040", Offset = "0xDE3040", VA = "0xDE3040")]
		private void ActivateNone()
		{
		}

		[Token(Token = "0x6001B2C")]
		[Address(RVA = "0xDE2DC0", Offset = "0xDE2DC0", VA = "0xDE2DC0")]
		private void TriggerLoad()
		{
		}

		[Token(Token = "0x6001B2D")]
		[Address(RVA = "0xDE3114", Offset = "0xDE3114", VA = "0xDE3114")]
		[IteratorStateMachine(typeof(<WaitforOVROverlay>d__30))]
		private IEnumerator WaitforOVROverlay()
		{
			return null;
		}

		[Token(Token = "0x6001B2E")]
		[Address(RVA = "0xDE31B0", Offset = "0xDE31B0", VA = "0xDE31B0")]
		private void TriggerUnload()
		{
		}

		[Token(Token = "0x6001B2F")]
		[Address(RVA = "0xDE28E8", Offset = "0xDE28E8", VA = "0xDE28E8")]
		private void CameraAndRenderTargetSetup()
		{
		}

		[Token(Token = "0x6001B30")]
		[Address(RVA = "0xDE32F8", Offset = "0xDE32F8", VA = "0xDE32F8")]
		private void SimulateLevelLoad()
		{
		}

		[Token(Token = "0x6001B31")]
		[Address(RVA = "0xDE31D8", Offset = "0xDE31D8", VA = "0xDE31D8")]
		private void ClearObjects()
		{
		}

		[Token(Token = "0x6001B32")]
		[Address(RVA = "0xDE3680", Offset = "0xDE3680", VA = "0xDE3680")]
		public void RadioPressed(string radioLabel, string group, Toggle t)
		{
		}

		[Token(Token = "0x6001B33")]
		[Address(RVA = "0xDE376C", Offset = "0xDE376C", VA = "0xDE376C")]
		public OVROverlaySample()
		{
		}
	}
}
namespace OVRTouchSample
{
	[Token(Token = "0x2000548")]
	[RequireComponent(typeof(OVRGrabber))]
	public class Hand : MonoBehaviour
	{
		[Token(Token = "0x4001A4D")]
		public const string ANIM_LAYER_NAME_POINT = "Point Layer";

		[Token(Token = "0x4001A4E")]
		public const string ANIM_LAYER_NAME_THUMB = "Thumb Layer";

		[Token(Token = "0x4001A4F")]
		public const string ANIM_PARAM_NAME_FLEX = "Flex";

		[Token(Token = "0x4001A50")]
		public const string ANIM_PARAM_NAME_POSE = "Pose";

		[Token(Token = "0x4001A51")]
		public const float THRESH_COLLISION_FLEX = 0.9f;

		[Token(Token = "0x4001A52")]
		public const float INPUT_RATE_CHANGE = 20f;

		[Token(Token = "0x4001A53")]
		public const float COLLIDER_SCALE_MIN = 0.01f;

		[Token(Token = "0x4001A54")]
		public const float COLLIDER_SCALE_MAX = 1f;

		[Token(Token = "0x4001A55")]
		public const float COLLIDER_SCALE_PER_SECOND = 1f;

		[Token(Token = "0x4001A56")]
		public const float TRIGGER_DEBOUNCE_TIME = 0.05f;

		[Token(Token = "0x4001A57")]
		public const float THUMB_DEBOUNCE_TIME = 0.15f;

		[Token(Token = "0x4001A58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private OVRInput.Controller m_controller;

		[Token(Token = "0x4001A59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Animator m_animator;

		[Token(Token = "0x4001A5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private HandPose m_defaultGrabPose;

		[Token(Token = "0x4001A5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Collider[] m_colliders;

		[Token(Token = "0x4001A5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool m_collisionEnabled;

		[Token(Token = "0x4001A5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private OVRGrabber m_grabber;

		[Token(Token = "0x4001A5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<Renderer> m_showAfterInputFocusAcquired;

		[Token(Token = "0x4001A5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int m_animLayerIndexThumb;

		[Token(Token = "0x4001A60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private int m_animLayerIndexPoint;

		[Token(Token = "0x4001A61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int m_animParamIndexFlex;

		[Token(Token = "0x4001A62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private int m_animParamIndexPose;

		[Token(Token = "0x4001A63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool m_isPointing;

		[Token(Token = "0x4001A64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		private bool m_isGivingThumbsUp;

		[Token(Token = "0x4001A65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float m_pointBlend;

		[Token(Token = "0x4001A66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float m_thumbsUpBlend;

		[Token(Token = "0x4001A67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private bool m_restoreOnInputAcquired;

		[Token(Token = "0x4001A68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float m_collisionScaleCurrent;

		[Token(Token = "0x6001B3D")]
		[Address(RVA = "0xDE3B48", Offset = "0xDE3B48", VA = "0xDE3B48")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001B3E")]
		[Address(RVA = "0xDE3BA0", Offset = "0xDE3BA0", VA = "0xDE3BA0")]
		private void Start()
		{
		}

		[Token(Token = "0x6001B3F")]
		[Address(RVA = "0xDE3FF0", Offset = "0xDE3FF0", VA = "0xDE3FF0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001B40")]
		[Address(RVA = "0xDE40DC", Offset = "0xDE40DC", VA = "0xDE40DC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001B41")]
		[Address(RVA = "0xDE4240", Offset = "0xDE4240", VA = "0xDE4240")]
		private void UpdateCapTouchStates()
		{
		}

		[Token(Token = "0x6001B42")]
		[Address(RVA = "0xDE4510", Offset = "0xDE4510", VA = "0xDE4510")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001B43")]
		[Address(RVA = "0xDE45F4", Offset = "0xDE45F4", VA = "0xDE45F4")]
		private void OnInputFocusLost()
		{
		}

		[Token(Token = "0x6001B44")]
		[Address(RVA = "0xDE47A4", Offset = "0xDE47A4", VA = "0xDE47A4")]
		private void OnInputFocusAcquired()
		{
		}

		[Token(Token = "0x6001B45")]
		[Address(RVA = "0xDE42CC", Offset = "0xDE42CC", VA = "0xDE42CC")]
		private float InputValueRateChange(bool isDown, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001B46")]
		[Address(RVA = "0xDE4320", Offset = "0xDE4320", VA = "0xDE4320")]
		private void UpdateAnimStates()
		{
		}

		[Token(Token = "0x6001B47")]
		[Address(RVA = "0xDE3EB0", Offset = "0xDE3EB0", VA = "0xDE3EB0")]
		private void CollisionEnable(bool enabled)
		{
		}

		[Token(Token = "0x6001B48")]
		[Address(RVA = "0xDE48C8", Offset = "0xDE48C8", VA = "0xDE48C8")]
		public Hand()
		{
		}
	}
	[Token(Token = "0x200054A")]
	public enum HandPoseId
	{
		[Token(Token = "0x4001A6C")]
		Default,
		[Token(Token = "0x4001A6D")]
		Generic,
		[Token(Token = "0x4001A6E")]
		PingPongBall,
		[Token(Token = "0x4001A6F")]
		Controller
	}
	[Token(Token = "0x200054B")]
	public class HandPose : MonoBehaviour
	{
		[Token(Token = "0x4001A70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private bool m_allowPointing;

		[Token(Token = "0x4001A71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[SerializeField]
		private bool m_allowThumbsUp;

		[Token(Token = "0x4001A72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private HandPoseId m_poseId;

		[Token(Token = "0x17000378")]
		public bool AllowPointing
		{
			[Token(Token = "0x6001B4C")]
			[Address(RVA = "0xDE4980", Offset = "0xDE4980", VA = "0xDE4980")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000379")]
		public bool AllowThumbsUp
		{
			[Token(Token = "0x6001B4D")]
			[Address(RVA = "0xDE4988", Offset = "0xDE4988", VA = "0xDE4988")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700037A")]
		public HandPoseId PoseId
		{
			[Token(Token = "0x6001B4E")]
			[Address(RVA = "0xDE4990", Offset = "0xDE4990", VA = "0xDE4990")]
			get
			{
				return default(HandPoseId);
			}
		}

		[Token(Token = "0x6001B4F")]
		[Address(RVA = "0xDE4998", Offset = "0xDE4998", VA = "0xDE4998")]
		public HandPose()
		{
		}
	}
	[Token(Token = "0x200054C")]
	public class TouchController : MonoBehaviour
	{
		[Token(Token = "0x4001A73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private OVRInput.Controller m_controller;

		[Token(Token = "0x4001A74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Animator m_animator;

		[Token(Token = "0x4001A75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool m_restoreOnInputAcquired;

		[Token(Token = "0x6001B50")]
		[Address(RVA = "0xDE49A0", Offset = "0xDE49A0", VA = "0xDE49A0")]
		private void Update()
		{
		}

		[Token(Token = "0x6001B51")]
		[Address(RVA = "0xDE4C6C", Offset = "0xDE4C6C", VA = "0xDE4C6C")]
		private void OnInputFocusLost()
		{
		}

		[Token(Token = "0x6001B52")]
		[Address(RVA = "0xDE4CBC", Offset = "0xDE4CBC", VA = "0xDE4CBC")]
		private void OnInputFocusAcquired()
		{
		}

		[Token(Token = "0x6001B53")]
		[Address(RVA = "0xDE4CF4", Offset = "0xDE4CF4", VA = "0xDE4CF4")]
		public TouchController()
		{
		}
	}
}
namespace Dustyroom
{
	[Token(Token = "0x200054D")]
	public class LinearMotion : MonoBehaviour
	{
		[Token(Token = "0x200054E")]
		public enum TranslationMode
		{
			[Token(Token = "0x4001A80")]
			Off,
			[Token(Token = "0x4001A81")]
			XAxis,
			[Token(Token = "0x4001A82")]
			YAxis,
			[Token(Token = "0x4001A83")]
			ZAxis,
			[Token(Token = "0x4001A84")]
			Vector
		}

		[Token(Token = "0x200054F")]
		public enum RotationMode
		{
			[Token(Token = "0x4001A86")]
			Off,
			[Token(Token = "0x4001A87")]
			XAxis,
			[Token(Token = "0x4001A88")]
			YAxis,
			[Token(Token = "0x4001A89")]
			ZAxis,
			[Token(Token = "0x4001A8A")]
			Vector
		}

		[Token(Token = "0x4001A76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TranslationMode translationMode;

		[Token(Token = "0x4001A77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 translationVector;

		[Token(Token = "0x4001A78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float translationSpeed;

		[Token(Token = "0x4001A79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public RotationMode rotationMode;

		[Token(Token = "0x4001A7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 rotationAxis;

		[Token(Token = "0x4001A7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float rotationSpeed;

		[Token(Token = "0x4001A7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool useLocalCoordinate;

		[Token(Token = "0x4001A7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float translationAcceleration;

		[Token(Token = "0x4001A7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float rotationAcceleration;

		[Token(Token = "0x1700037B")]
		private Vector3 TranslationVector
		{
			[Token(Token = "0x6001B54")]
			[Address(RVA = "0xDE4CFC", Offset = "0xDE4CFC", VA = "0xDE4CFC")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700037C")]
		private Vector3 RotationVector
		{
			[Token(Token = "0x6001B55")]
			[Address(RVA = "0xDE4E7C", Offset = "0xDE4E7C", VA = "0xDE4E7C")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6001B56")]
		[Address(RVA = "0xDE4FFC", Offset = "0xDE4FFC", VA = "0xDE4FFC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001B57")]
		[Address(RVA = "0xDE5280", Offset = "0xDE5280", VA = "0xDE5280")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001B58")]
		[Address(RVA = "0xDE52A0", Offset = "0xDE52A0", VA = "0xDE52A0")]
		public LinearMotion()
		{
		}
	}
	[Token(Token = "0x2000550")]
	public class OrbitMotion : MonoBehaviour
	{
		[Token(Token = "0x2000551")]
		public enum TargetMode
		{
			[Token(Token = "0x4001AA5")]
			Transform,
			[Token(Token = "0x4001AA6")]
			Position
		}

		[Token(Token = "0x4001A8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TargetMode targetMode;

		[Token(Token = "0x4001A8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform targetTransform;

		[Token(Token = "0x4001A8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool followTargetTransform;

		[Token(Token = "0x4001A8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 targetOffset;

		[Token(Token = "0x4001A8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector3 targetPosition;

		[Token(Token = "0x4001A90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Space]
		public float distanceHorizontal;

		[Token(Token = "0x4001A91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float distanceVertical;

		[Token(Token = "0x4001A92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float xSpeed;

		[Token(Token = "0x4001A93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float ySpeed;

		[Token(Token = "0x4001A94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float damping;

		[Token(Token = "0x4001A95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Space]
		public bool clampAngle;

		[Token(Token = "0x4001A96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float yMinLimit;

		[Token(Token = "0x4001A97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float yMaxLimit;

		[Token(Token = "0x4001A98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Space]
		public bool allowZoom;

		[Token(Token = "0x4001A99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float distanceMin;

		[Token(Token = "0x4001A9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float distanceMax;

		[Token(Token = "0x4001A9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float _x;

		[Token(Token = "0x4001A9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float _y;

		[Token(Token = "0x4001A9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Space]
		public bool autoMovement;

		[Token(Token = "0x4001A9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float autoSpeedX;

		[Token(Token = "0x4001A9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float autoSpeedY;

		[Token(Token = "0x4001AA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public float autoSpeedDistance;

		[Token(Token = "0x4001AA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Space]
		public bool interactive;

		[Token(Token = "0x4001AA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float _lastMoveTime;

		[Token(Token = "0x4001AA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[HideInInspector]
		public float timeSinceLastMove;

		[Token(Token = "0x6001B59")]
		[Address(RVA = "0xDE5344", Offset = "0xDE5344", VA = "0xDE5344")]
		private void Start()
		{
		}

		[Token(Token = "0x6001B5A")]
		[Address(RVA = "0xDE54C4", Offset = "0xDE54C4", VA = "0xDE54C4")]
		private void Update()
		{
		}

		[Token(Token = "0x6001B5B")]
		[Address(RVA = "0xDE59AC", Offset = "0xDE59AC", VA = "0xDE59AC")]
		private static float ClampAngle(float angle, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x6001B5C")]
		[Address(RVA = "0xDE59E8", Offset = "0xDE59E8", VA = "0xDE59E8")]
		public OrbitMotion()
		{
		}
	}
}
namespace Sisus.Debugging
{
	[Token(Token = "0x2000552")]
	[ExecuteAlways]
	[AddComponentMenu("")]
	public class DebugLogExtensionsDemoComponent : MonoBehaviour
	{
		[Token(Token = "0x4001AA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private bool isVisible;

		[Token(Token = "0x4001AA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Range(0f, 360f)]
		[SerializeField]
		public float rotationSpeed;

		[Token(Token = "0x4001AA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 360f)]
		[SerializeField]
		private float rotation;

		[Token(Token = "0x4001AAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[HideInInspector]
		private MeshRenderer meshRenderer;

		[Token(Token = "0x6001B5D")]
		[Address(RVA = "0xDE5A98", Offset = "0xDE5A98", VA = "0xDE5A98")]
		public DebugLogExtensionsDemoComponent()
		{
		}
	}
	[Token(Token = "0x2000553")]
	public static class Channel
	{
		[Token(Token = "0x4001AAB")]
		public const int None = 0;

		[Token(Token = "0x4001AAC")]
		public const int sandw = 1;
	}
	[Token(Token = "0x2000554")]
	public class DebugLogExtensionsProjectSettingsAsset : ScriptableObject, IDebugLogExtensionsProjectSettingsAsset
	{
		[Token(Token = "0x4001AAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static DebugLogExtensionsProjectSettingsAsset instance;

		[Token(Token = "0x4001AAE")]
		private const string ResourcePath = "DebugLogExtensionsProjectSettings";

		[Token(Token = "0x4001AAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool useGlobalNamespace;

		[Token(Token = "0x4001AB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool stripAllCallsFromBuilds;

		[Token(Token = "0x4001AB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public bool unlistedChannelsEnabledByDefault;

		[Token(Token = "0x4001AB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DebugChannelInfo[] channels;

		[Token(Token = "0x4001AB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public KeyConfig toggleView;

		[Token(Token = "0x4001AB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public IgnoredStackTraceInfo[] hideStackTraceRows;

		[Token(Token = "0x4001AB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		[HideInInspector]
		public bool useGlobalNamespaceDetermined;

		[Token(Token = "0x4001AB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		public bool ignoreUnlistedChannelPrefixes;

		[Token(Token = "0x4001AB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
		public bool autoAddDevUniqueChannels;

		[Token(Token = "0x6001B5E")]
		[Address(RVA = "0xDE5AB0", Offset = "0xDE5AB0", VA = "0xDE5AB0")]
		public static DebugLogExtensionsProjectSettingsAsset Get()
		{
			return null;
		}

		[Token(Token = "0x6001B5F")]
		[Address(RVA = "0xDE5BB8", Offset = "0xDE5BB8", VA = "0xDE5BB8", Slot = "4")]
		public void Apply(DebugLogExtensionsProjectSettings settings)
		{
		}

		[Token(Token = "0x6001B60")]
		[Address(RVA = "0xDE5C50", Offset = "0xDE5C50", VA = "0xDE5C50")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001B61")]
		[Address(RVA = "0xDE5CA8", Offset = "0xDE5CA8", VA = "0xDE5CA8")]
		public DebugLogExtensionsProjectSettingsAsset()
		{
		}
	}
	[Token(Token = "0x2000555")]
	internal class RuntimeInitializer
	{
		[Token(Token = "0x6001B62")]
		[Address(RVA = "0xDE5DB4", Offset = "0xDE5DB4", VA = "0xDE5DB4")]
		[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.AfterSceneLoad)]
		private static void InitializeRuntimeDebugger()
		{
		}

		[Token(Token = "0x6001B63")]
		[Address(RVA = "0xDE5E30", Offset = "0xDE5E30", VA = "0xDE5E30")]
		public RuntimeInitializer()
		{
		}
	}
}
namespace HighlightPlus
{
	[Token(Token = "0x2000556")]
	public class HighlightPlusRenderPassFeature : ScriptableRendererFeature
	{
		[Token(Token = "0x2000557")]
		private class HighlightPass : ScriptableRenderPass
		{
			[Token(Token = "0x2000558")]
			private class DistanceComparer : IComparer<HighlightEffect>
			{
				[Token(Token = "0x4001AC3")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				public Vector3 camPos;

				[Token(Token = "0x6001B6F")]
				[Address(RVA = "0xDE6838", Offset = "0xDE6838", VA = "0xDE6838", Slot = "4")]
				public int Compare(HighlightEffect e1, HighlightEffect e2)
				{
					return default(int);
				}

				[Token(Token = "0x6001B70")]
				[Address(RVA = "0xDE60A4", Offset = "0xDE60A4", VA = "0xDE60A4")]
				public DistanceComparer()
				{
				}
			}

			[Token(Token = "0x4001ABC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
			public bool usesCameraOverlay;

			[Token(Token = "0x4001ABD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
			private ScriptableRenderer renderer;

			[Token(Token = "0x4001ABE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
			private RenderTextureDescriptor cameraTextureDescriptor;

			[Token(Token = "0x4001ABF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
			private DistanceComparer effectDistanceComparer;

			[Token(Token = "0x4001AC0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
			private bool isVREnabled;

			[Token(Token = "0x4001AC1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x129")]
			private bool clearStencil;

			[Token(Token = "0x4001AC2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private static Matrix4x4 matrix4x4identity;

			[Token(Token = "0x6001B68")]
			[Address(RVA = "0xDE5FC4", Offset = "0xDE5FC4", VA = "0xDE5FC4")]
			public void Setup(HighlightPlusRenderPassFeature passFeature, ScriptableRenderer renderer)
			{
			}

			[Token(Token = "0x6001B69")]
			[Address(RVA = "0xDE60AC", Offset = "0xDE60AC", VA = "0xDE60AC", Slot = "6")]
			public override void Configure(CommandBuffer cmd, RenderTextureDescriptor cameraTextureDescriptor)
			{
			}

			[Token(Token = "0x6001B6A")]
			[Address(RVA = "0xDE60D8", Offset = "0xDE60D8", VA = "0xDE60D8", Slot = "9")]
			public override void Execute(ScriptableRenderContext context, ref RenderingData renderingData)
			{
			}

			[Token(Token = "0x6001B6B")]
			[Address(RVA = "0xDE65D0", Offset = "0xDE65D0", VA = "0xDE65D0")]
			private void FullScreenBlit(CommandBuffer cmd, RenderTargetIdentifier source, RenderTargetIdentifier destination, Material material, int passIndex)
			{
			}

			[Token(Token = "0x6001B6C")]
			[Address(RVA = "0xDE67A0", Offset = "0xDE67A0", VA = "0xDE67A0", Slot = "4")]
			public override void FrameCleanup(CommandBuffer cmd)
			{
			}

			[Token(Token = "0x6001B6D")]
			[Address(RVA = "0xDE5EE8", Offset = "0xDE5EE8", VA = "0xDE5EE8")]
			public HighlightPass()
			{
			}
		}

		[Token(Token = "0x4001AB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private HighlightPass renderPass;

		[Token(Token = "0x4001AB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public RenderPassEvent renderPassEvent;

		[Token(Token = "0x4001ABA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("Clears stencil buffer before rendering highlight effects. This option can solve compatibility issues with shaders that also use stencil buffers.")]
		public bool clearStencil;

		[Token(Token = "0x4001ABB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool installed;

		[Token(Token = "0x6001B64")]
		[Address(RVA = "0xDE5E38", Offset = "0xDE5E38", VA = "0xDE5E38")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001B65")]
		[Address(RVA = "0xDE5E80", Offset = "0xDE5E80", VA = "0xDE5E80", Slot = "5")]
		public override void Create()
		{
		}

		[Token(Token = "0x6001B66")]
		[Address(RVA = "0xDE5EF0", Offset = "0xDE5EF0", VA = "0xDE5EF0", Slot = "7")]
		public override void AddRenderPasses(ScriptableRenderer renderer, ref RenderingData renderingData)
		{
		}

		[Token(Token = "0x6001B67")]
		[Address(RVA = "0xDE6094", Offset = "0xDE6094", VA = "0xDE6094")]
		public HighlightPlusRenderPassFeature()
		{
		}
	}
	[Token(Token = "0x2000559")]
	public delegate bool OnObjectHighlightEvent(GameObject obj);
	[Token(Token = "0x200055A")]
	public delegate bool OnRendererHighlightEvent(Renderer renderer);
	[Token(Token = "0x200055B")]
	public delegate void OnTargetAnimatesEvent(ref Vector3 center, ref Quaternion rotation, ref Vector3 scale, float t);
	[Token(Token = "0x200055C")]
	public delegate void FullScreenBlitMethod(CommandBuffer cmd, RenderTargetIdentifier source, RenderTargetIdentifier destination, Material material, int passIndex);
	[Token(Token = "0x200055D")]
	public enum NormalsOption
	{
		[Token(Token = "0x4001AC5")]
		Smooth,
		[Token(Token = "0x4001AC6")]
		PreserveOriginal,
		[Token(Token = "0x4001AC7")]
		Reorient
	}
	[Token(Token = "0x200055E")]
	public enum SeeThroughMode
	{
		[Token(Token = "0x4001AC9")]
		WhenHighlighted,
		[Token(Token = "0x4001ACA")]
		AlwaysWhenOccluded,
		[Token(Token = "0x4001ACB")]
		Never
	}
	[Token(Token = "0x200055F")]
	public enum QualityLevel
	{
		[Token(Token = "0x4001ACD")]
		Fastest,
		[Token(Token = "0x4001ACE")]
		High,
		[Token(Token = "0x4001ACF")]
		Highest,
		[Token(Token = "0x4001AD0")]
		Medium
	}
	[Token(Token = "0x2000560")]
	public static class QualityLevelExtensions
	{
		[Token(Token = "0x6001B81")]
		[Address(RVA = "0xDE7054", Offset = "0xDE7054", VA = "0xDE7054")]
		public static bool UsesMultipleOffsets(this QualityLevel qualityLevel)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000561")]
	public enum TargetOptions
	{
		[Token(Token = "0x4001AD2")]
		Children,
		[Token(Token = "0x4001AD3")]
		OnlyThisObject,
		[Token(Token = "0x4001AD4")]
		RootToChildren,
		[Token(Token = "0x4001AD5")]
		LayerInScene,
		[Token(Token = "0x4001AD6")]
		LayerInChildren,
		[Token(Token = "0x4001AD7")]
		Scripting
	}
	[Token(Token = "0x2000562")]
	public enum Visibility
	{
		[Token(Token = "0x4001AD9")]
		Normal,
		[Token(Token = "0x4001ADA")]
		AlwaysOnTop,
		[Token(Token = "0x4001ADB")]
		OnlyWhenOccluded
	}
	[Token(Token = "0x2000563")]
	public enum GlowBlendMode
	{
		[Token(Token = "0x4001ADD")]
		Additive,
		[Token(Token = "0x4001ADE")]
		AlphaBlending
	}
	[Serializable]
	[Token(Token = "0x2000564")]
	public struct GlowPassData
	{
		[Token(Token = "0x4001ADF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float offset;

		[Token(Token = "0x4001AE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float alpha;

		[Token(Token = "0x4001AE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Color color;
	}
	[Token(Token = "0x2000565")]
	[HelpURL("https://www.dropbox.com/s/1p9h8xys68lm4a3/Documentation.pdf?dl=0")]
	[ExecuteInEditMode]
	public class HighlightEffect : MonoBehaviour
	{
		[Token(Token = "0x2000566")]
		private struct ModelMaterials
		{
			[Token(Token = "0x4001B9F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool render;

			[Token(Token = "0x4001BA0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Transform transform;

			[Token(Token = "0x4001BA1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool renderWasVisibleDuringSetup;

			[Token(Token = "0x4001BA2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Mesh mesh;

			[Token(Token = "0x4001BA3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Mesh originalMesh;

			[Token(Token = "0x4001BA4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Renderer renderer;

			[Token(Token = "0x4001BA5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public bool isSkinnedMesh;

			[Token(Token = "0x4001BA6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Material[] fxMatMask;

			[Token(Token = "0x4001BA7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public Material[] fxMatOutline;

			[Token(Token = "0x4001BA8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Material[] fxMatGlow;

			[Token(Token = "0x4001BA9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public Material[] fxMatSolidColor;

			[Token(Token = "0x4001BAA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public Material[] fxMatSeeThroughInner;

			[Token(Token = "0x4001BAB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public Material[] fxMatSeeThroughBorder;

			[Token(Token = "0x4001BAC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public Material[] fxMatOverlay;

			[Token(Token = "0x4001BAD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			public Material[] fxMatInnerGlow;

			[Token(Token = "0x4001BAE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			public NormalsOption normalsOption;

			[Token(Token = "0x4001BAF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			public Matrix4x4 renderingMatrix;

			[Token(Token = "0x4001BB0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
			public bool isCombined;

			[Token(Token = "0x1700037F")]
			public bool preserveOriginalMesh
			{
				[Token(Token = "0x6001BC7")]
				[Address(RVA = "0xDF4C68", Offset = "0xDF4C68", VA = "0xDF4C68")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6001BC8")]
			[Address(RVA = "0xDF4C88", Offset = "0xDF4C88", VA = "0xDF4C88")]
			public void Init()
			{
			}
		}

		[Token(Token = "0x2000567")]
		private enum FadingState
		{
			[Token(Token = "0x4001BB2")]
			FadingOut = -1,
			[Token(Token = "0x4001BB3")]
			NoFading,
			[Token(Token = "0x4001BB4")]
			FadingIn
		}

		[Token(Token = "0x4001AE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The current profile (optional). A profile let you store Highlight Plus settings and apply those settings easily to many objects. You can also load a profile and apply its settings at runtime, using the ProfileLoad() method of the Highlight Effect component.")]
		public HighlightProfile profile;

		[Token(Token = "0x4001AE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("If enabled, settings from the profile will be applied to this component automatically when game starts or when any profile setting is updated.")]
		public bool profileSync;

		[Token(Token = "0x4001AE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		[Tooltip("If enabled, effects will be visible also when not in Play mode.")]
		public bool previewInEditor;

		[Token(Token = "0x4001AE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("Which cameras can render the effect.")]
		public LayerMask camerasLayerMask;

		[Token(Token = "0x4001AE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Different options to specify which objects are affected by this Highlight Effect component.")]
		public TargetOptions effectGroup;

		[Token(Token = "0x4001AE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("The layer that contains the affected objects by this effect when effectGroup is set to LayerMask.")]
		public LayerMask effectGroupLayer;

		[Token(Token = "0x4001AE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Only include objects whose names contains this text.")]
		public string effectNameFilter;

		[Token(Token = "0x4001AE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Combine meshes of all objects in this group affected by Highlight Effect reducing draw calls.")]
		public bool combineMeshes;

		[Token(Token = "0x4001AEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Range(0f, 1f)]
		[Tooltip("The alpha threshold for transparent cutout objects. Pixels with alpha below this value will be discarded.")]
		public float alphaCutOff;

		[Token(Token = "0x4001AEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("If back facing triangles are ignored.Backfaces triangles are not visible but you may set this property to false to force highlight effects to act on those triangles as well.")]
		public bool cullBackFaces;

		[Token(Token = "0x4001AEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		[Tooltip("Show highlight effects even if the object is not visible. If this object or its children use GPU Instancing tools, the MeshRenderer can be disabled although the object is visible. In this case, this option is useful to enable highlighting.")]
		public bool ignoreObjectVisibility;

		[Token(Token = "0x4001AED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
		[Tooltip("Support reflection probes. Enable only if you want the effects to be visible in reflections.")]
		public bool reflectionProbes;

		[Token(Token = "0x4001AEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x43")]
		[Tooltip("Enables GPU instancing. Reduces draw calls in outline and outer glow effects on platforms that support GPU instancing. Should be enabled by default.")]
		public bool GPUInstancing;

		[Token(Token = "0x4001AEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("Normals handling option:\nPreserve original: use original mesh normals.\nSmooth: average normals to produce a smoother outline/glow mesh based effect.\nReorient: recomputes normals based on vertex direction to centroid.")]
		public NormalsOption normalsOption;

		[Token(Token = "0x4001AF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Ignore highlighting on this object.")]
		public bool ignore;

		[Token(Token = "0x4001AF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		[SerializeField]
		private bool _highlighted;

		[Token(Token = "0x4001AF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float fadeInDuration;

		[Token(Token = "0x4001AF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float fadeOutDuration;

		[Token(Token = "0x4001AF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public bool flipY;

		[Token(Token = "0x4001AF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
		[Tooltip("Keeps the outline/glow size unaffected by object distance.")]
		public bool constantWidth;

		[Token(Token = "0x4001AF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Mask to include or exclude certain submeshes. By default, all submeshes are included.")]
		public int subMeshMask;

		[Token(Token = "0x4001AF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("Intensity of the overlay effect. A value of 0 disables the overlay completely.")]
		[Range(0f, 1f)]
		public float overlay;

		[Token(Token = "0x4001AF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[ColorUsage(true, true)]
		public Color overlayColor;

		[Token(Token = "0x4001AF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float overlayAnimationSpeed;

		[Token(Token = "0x4001AFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[Range(0f, 1f)]
		public float overlayMinIntensity;

		[Token(Token = "0x4001AFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Controls the blending or mix of the overlay color with the natural colors of the object.")]
		[Range(0f, 1f)]
		public float overlayBlending;

		[Token(Token = "0x4001AFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Optional overlay texture.")]
		public Texture2D overlayTexture;

		[Token(Token = "0x4001AFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float overlayTextureScale;

		[Token(Token = "0x4001AFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[Range(0f, 1f)]
		[Tooltip("Intensity of the outline. A value of 0 disables the outline completely.")]
		public float outline;

		[Token(Token = "0x4001AFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[ColorUsage(true, true)]
		public Color outlineColor;

		[Token(Token = "0x4001B00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public float outlineWidth;

		[Token(Token = "0x4001B01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public QualityLevel outlineQuality;

		[Token(Token = "0x4001B02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Range(1f, 8f)]
		[Tooltip("Reduces the quality of the outline but improves performance a bit.")]
		public int outlineDownsampling;

		[Token(Token = "0x4001B03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public Visibility outlineVisibility;

		[Token(Token = "0x4001B04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public GlowBlendMode glowBlendMode;

		[Token(Token = "0x4001B05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public bool outlineBlitDebug;

		[Token(Token = "0x4001B06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB5")]
		[Tooltip("If enabled, this object won't combine the outline with other objects.")]
		public bool outlineIndependent;

		[Token(Token = "0x4001B07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Range(0f, 5f)]
		[Tooltip("The intensity of the outer glow effect. A value of 0 disables the glow completely.")]
		public float glow;

		[Token(Token = "0x4001B08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public float glowWidth;

		[Token(Token = "0x4001B09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public QualityLevel glowQuality;

		[Token(Token = "0x4001B0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[Tooltip("Reduces the quality of the glow but improves performance a bit.")]
		[Range(1f, 8f)]
		public int glowDownsampling;

		[Token(Token = "0x4001B0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[ColorUsage(true, true)]
		public Color glowHQColor;

		[Token(Token = "0x4001B0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[Tooltip("When enabled, outer glow renders with dithering. When disabled, glow appears as a solid color.")]
		public bool glowDithering;

		[Token(Token = "0x4001B0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[Tooltip("Seed for the dithering effect")]
		public float glowMagicNumber1;

		[Token(Token = "0x4001B0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[Tooltip("Another seed for the dithering effect that combines with first seed to create different patterns")]
		public float glowMagicNumber2;

		[Token(Token = "0x4001B0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		public float glowAnimationSpeed;

		[Token(Token = "0x4001B10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public Visibility glowVisibility;

		[Token(Token = "0x4001B11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		public bool glowBlitDebug;

		[Token(Token = "0x4001B12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xED")]
		[Tooltip("Blends glow passes one after another. If this option is disabled, glow passes won't overlap (in this case, make sure the glow pass 1 has a smaller offset than pass 2, etc.)")]
		public bool glowBlendPasses;

		[Token(Token = "0x4001B13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[NonReorderable]
		public GlowPassData[] glowPasses;

		[Token(Token = "0x4001B14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[Tooltip("If enabled, glow effect will not use a stencil mask. This can be used to render the glow effect alone.")]
		public bool glowIgnoreMask;

		[Token(Token = "0x4001B15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		[Range(0f, 5f)]
		[Tooltip("The intensity of the inner glow effect. A value of 0 disables the glow completely.")]
		public float innerGlow;

		[Token(Token = "0x4001B16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[Range(0f, 2f)]
		public float innerGlowWidth;

		[Token(Token = "0x4001B17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		[ColorUsage(true, true)]
		public Color innerGlowColor;

		[Token(Token = "0x4001B18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		public Visibility innerGlowVisibility;

		[Token(Token = "0x4001B19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[Tooltip("Enables the targetFX effect. This effect draws an animated sprite over the object.")]
		public bool targetFX;

		[Token(Token = "0x4001B1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public Texture2D targetFXTexture;

		[Token(Token = "0x4001B1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[ColorUsage(true, true)]
		public Color targetFXColor;

		[Token(Token = "0x4001B1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		public Transform targetFXCenter;

		[Token(Token = "0x4001B1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public float targetFXRotationSpeed;

		[Token(Token = "0x4001B1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
		public float targetFXInitialScale;

		[Token(Token = "0x4001B1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		public float targetFXEndScale;

		[Token(Token = "0x4001B20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		[Tooltip("Makes target scale relative to object renderer bounds")]
		public bool targetFXScaleToRenderBounds;

		[Token(Token = "0x4001B21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14D")]
		[Tooltip("Places target FX sprite at the bottom of the highlighted object.")]
		public bool targetFXAlignToGround;

		[Token(Token = "0x4001B22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		[Tooltip("Fade out effect with altitude")]
		public float targetFXFadePower;

		[Token(Token = "0x4001B23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
		public float targetFXGroundMaxDistance;

		[Token(Token = "0x4001B24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		public LayerMask targetFXGroundLayerMask;

		[Token(Token = "0x4001B25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
		public float targetFXTransitionDuration;

		[Token(Token = "0x4001B26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		[Tooltip("The duration of the effect. A value of 0 will keep the target sprite on screen while object is highlighted.")]
		public float targetFXStayDuration;

		[Token(Token = "0x4001B27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		public Visibility targetFXVisibility;

		[Token(Token = "0x4001B2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		[Tooltip("See-through mode for this Highlight Effect component.")]
		public SeeThroughMode seeThrough;

		[Token(Token = "0x4001B2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
		[Tooltip("This mask setting let you specify which objects will be considered as occluders and cause the see-through effect for this Highlight Effect component. For example, you assign your walls to a different layer and specify that layer here, so only walls and not other objects, like ground or ceiling, will trigger the see-through effect.")]
		public LayerMask seeThroughOccluderMask;

		[Token(Token = "0x4001B2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		[Range(0.01f, 0.6f)]
		[Tooltip("A multiplier for the occluder volume size which can be used to reduce the actual size of occluders when Highlight Effect checks if they're occluding this object.")]
		public float seeThroughOccluderThreshold;

		[Token(Token = "0x4001B2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
		[Tooltip("Uses stencil buffers to ensure pixel-accurate occlusion test. If this option is disabled, only physics raycasting is used to test for occlusion.")]
		public bool seeThroughOccluderMaskAccurate;

		[Token(Token = "0x4001B30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		[Tooltip("The interval of time between occlusion tests.")]
		public float seeThroughOccluderCheckInterval;

		[Token(Token = "0x4001B31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
		[Tooltip("If enabled, occlusion test is performed for each children element. If disabled, the bounds of all children is combined and a single occlusion test is performed for the combined bounds.")]
		public bool seeThroughOccluderCheckIndividualObjects;

		[Token(Token = "0x4001B32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		[Tooltip("Shows the see-through effect only if the occluder if at this 'offset' distance from the object.")]
		public float seeThroughDepthOffset;

		[Token(Token = "0x4001B33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
		[Tooltip("Hides the see-through effect if the occluder is further than this distance from the object (0 = infinite)")]
		public float seeThroughMaxDepth;

		[Token(Token = "0x4001B34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		[Range(0f, 5f)]
		public float seeThroughIntensity;

		[Token(Token = "0x4001B35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
		[Range(0f, 1f)]
		public float seeThroughTintAlpha;

		[Token(Token = "0x4001B36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		[ColorUsage(true, true)]
		public Color seeThroughTintColor;

		[Token(Token = "0x4001B37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		[Range(0f, 1f)]
		public float seeThroughNoise;

		[Token(Token = "0x4001B38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C4")]
		[Range(0f, 1f)]
		public float seeThroughBorder;

		[Token(Token = "0x4001B39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		public Color seeThroughBorderColor;

		[Token(Token = "0x4001B3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		public float seeThroughBorderWidth;

		[Token(Token = "0x4001B3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1DC")]
		[Tooltip("This option clears the stencil buffer after rendering the see-through effect which results in correct rendering order and supports other stencil-based effects that render afterwards.")]
		public bool seeThroughOrdered;

		[Token(Token = "0x4001B3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		[HideInInspector]
		[SerializeField]
		private ModelMaterials[] rms;

		[Token(Token = "0x4001B3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		[SerializeField]
		[HideInInspector]
		private int rmsCount;

		[NonSerialized]
		[Token(Token = "0x4001B3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		public Transform target;

		[NonSerialized]
		[Token(Token = "0x4001B3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		public float highlightStartTime;

		[NonSerialized]
		[Token(Token = "0x4001B40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1FC")]
		public float targetFxStartTime;

		[NonSerialized]
		[Token(Token = "0x4001B41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		public bool isSelected;

		[NonSerialized]
		[Token(Token = "0x4001B42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		public HighlightProfile previousSettings;

		[Token(Token = "0x4001B43")]
		private const float TAU = 0.70711f;

		[Token(Token = "0x4001B44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Material fxMatMask;

		[Token(Token = "0x4001B45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Material fxMatSolidColor;

		[Token(Token = "0x4001B46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static Material fxMatSeeThrough;

		[Token(Token = "0x4001B47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static Material fxMatSeeThroughBorder;

		[Token(Token = "0x4001B48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static Material fxMatOverlay;

		[Token(Token = "0x4001B49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static Material fxMatClearStencil;

		[Token(Token = "0x4001B4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static Material fxMatSeeThroughMask;

		[Token(Token = "0x4001B4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		private Material fxMatGlowTemplate;

		[Token(Token = "0x4001B4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		private Material fxMatInnerGlow;

		[Token(Token = "0x4001B4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		private Material fxMatOutlineTemplate;

		[Token(Token = "0x4001B4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		private Material fxMatTarget;

		[Token(Token = "0x4001B4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		private Material fxMatComposeGlow;

		[Token(Token = "0x4001B50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
		private Material fxMatComposeOutline;

		[Token(Token = "0x4001B51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		private Material fxMatBlurGlow;

		[Token(Token = "0x4001B52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
		private Material fxMatBlurOutline;

		[Token(Token = "0x4001B53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static Vector4[] offsets;

		[Token(Token = "0x4001B54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
		private float fadeStartTime;

		[Token(Token = "0x4001B55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x254")]
		private FadingState fading;

		[Token(Token = "0x4001B56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
		private CommandBuffer cbHighlight;

		[Token(Token = "0x4001B57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
		private int[] mipGlowBuffers;

		[Token(Token = "0x4001B58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
		private int[] mipOutlineBuffers;

		[Token(Token = "0x4001B59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
		private int glowRT;

		[Token(Token = "0x4001B5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x274")]
		private int outlineRT;

		[Token(Token = "0x4001B5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private static Mesh quadMesh;

		[Token(Token = "0x4001B5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private static Mesh cubeMesh;

		[Token(Token = "0x4001B5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
		private int sourceRT;

		[Token(Token = "0x4001B5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x27C")]
		private Matrix4x4 quadGlowMatrix;

		[Token(Token = "0x4001B5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2BC")]
		private Matrix4x4 quadOutlineMatrix;

		[Token(Token = "0x4001B60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x300")]
		private Vector3[] corners;

		[Token(Token = "0x4001B61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x308")]
		private RenderTextureDescriptor sourceDesc;

		[Token(Token = "0x4001B62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x33C")]
		private Color debugColor;

		[Token(Token = "0x4001B63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34C")]
		private Color blackColor;

		[Token(Token = "0x4001B64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35C")]
		private Visibility lastOutlineVisibility;

		[Token(Token = "0x4001B65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x360")]
		private bool requireUpdateMaterial;

		[NonSerialized]
		[Token(Token = "0x4001B66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public static List<HighlightEffect> effects;

		[Token(Token = "0x4001B67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public static bool customSorting;

		[Token(Token = "0x4001B68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x364")]
		private float occlusionCheckLastTime;

		[Token(Token = "0x4001B69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x368")]
		private int occlusionRenderFrame;

		[Token(Token = "0x4001B6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x36C")]
		private bool useSmoothGlow;

		[Token(Token = "0x4001B6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x36D")]
		private bool useSmoothOutline;

		[Token(Token = "0x4001B6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x36E")]
		private bool useSmoothBlend;

		[Token(Token = "0x4001B6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x36F")]
		private bool lastOcclusionTestResult;

		[Token(Token = "0x4001B6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x370")]
		private bool useGPUInstancing;

		[Token(Token = "0x4001B6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x378")]
		private MaterialPropertyBlock glowPropertyBlock;

		[Token(Token = "0x4001B70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x380")]
		private MaterialPropertyBlock outlinePropertyBlock;

		[Token(Token = "0x4001B71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private static readonly List<Vector4> matDataDirection;

		[Token(Token = "0x4001B72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private static readonly List<Vector4> matDataGlow;

		[Token(Token = "0x4001B73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private static readonly List<Vector4> matDataColor;

		[Token(Token = "0x4001B74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private static Matrix4x4[] matrices;

		[Token(Token = "0x4001B75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x388")]
		private int outlineOffsetsMin;

		[Token(Token = "0x4001B76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38C")]
		private int outlineOffsetsMax;

		[Token(Token = "0x4001B77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x390")]
		private int glowOffsetsMin;

		[Token(Token = "0x4001B78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x394")]
		private int glowOffsetsMax;

		[Token(Token = "0x4001B79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private static CombineInstance[] combineInstances;

		[Token(Token = "0x4001B7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x398")]
		private Matrix4x4 matrix4x4Identity;

		[Token(Token = "0x4001B7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D8")]
		private bool maskRequired;

		[Token(Token = "0x4001B7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3E0")]
		private FullScreenBlitMethod FullScreenBlit;

		[Token(Token = "0x4001B7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3E8")]
		private RenderTargetIdentifier colorAttachmentBuffer;

		[Token(Token = "0x4001B7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x410")]
		private RenderTargetIdentifier depthAttachmentBuffer;

		[Token(Token = "0x4001B7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x438")]
		private List<Renderer> tempRR;

		[Token(Token = "0x4001B80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private static List<Vector3> vertices;

		[Token(Token = "0x4001B81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private static List<Vector3> normals;

		[Token(Token = "0x4001B82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private static Vector3[] newNormals;

		[Token(Token = "0x4001B83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private static int[] matches;

		[Token(Token = "0x4001B84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private static readonly Dictionary<Vector3, int> vv;

		[Token(Token = "0x4001B85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private static readonly Dictionary<int, Mesh> smoothMeshes;

		[Token(Token = "0x4001B86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private static readonly Dictionary<int, Mesh> reorientedMeshes;

		[Token(Token = "0x4001B87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private static readonly Dictionary<int, Mesh> combinedMeshes;

		[Token(Token = "0x4001B88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private static readonly List<Material> rendererSharedMaterials;

		[Token(Token = "0x4001B89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x440")]
		private int combinedMeshesHashId;

		[Token(Token = "0x4001B8A")]
		private const int MAX_VERTEX_COUNT = 65535;

		[Token(Token = "0x4001B8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x444")]
		[Range(0f, 1f)]
		public float hitFxInitialIntensity;

		[Token(Token = "0x4001B8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x448")]
		public HitFxMode hitFxMode;

		[Token(Token = "0x4001B8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44C")]
		public float hitFxFadeOutDuration;

		[Token(Token = "0x4001B8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x450")]
		[ColorUsage(true, true)]
		public Color hitFxColor;

		[Token(Token = "0x4001B8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x460")]
		public float hitFxRadius;

		[Token(Token = "0x4001B90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x464")]
		private float hitInitialIntensity;

		[Token(Token = "0x4001B91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x468")]
		private float hitStartTime;

		[Token(Token = "0x4001B92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x46C")]
		private float hitFadeOutDuration;

		[Token(Token = "0x4001B93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x470")]
		private Color hitColor;

		[Token(Token = "0x4001B94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x480")]
		private bool hitActive;

		[Token(Token = "0x4001B95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x484")]
		private Vector3 hitPosition;

		[Token(Token = "0x4001B96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x490")]
		private float hitRadius;

		[Token(Token = "0x4001B97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private static readonly List<HighlightSeeThroughOccluder> occluders;

		[Token(Token = "0x4001B98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private static readonly Dictionary<Camera, int> occludersFrameCount;

		[Token(Token = "0x4001B99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private static Material fxMatOccluder;

		[Token(Token = "0x4001B9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private static RaycastHit[] hits;

		[Token(Token = "0x4001B9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private static Collider[] colliders;

		[Token(Token = "0x4001B9C")]
		private const int MAX_OCCLUDER_HITS = 50;

		[Token(Token = "0x4001B9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private static RaycastHit[] occluderHits;

		[Token(Token = "0x4001B9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x498")]
		private readonly Dictionary<Camera, List<Renderer>> cachedOccludersPerCamera;

		[Token(Token = "0x1700037D")]
		public bool highlighted
		{
			[Token(Token = "0x6001B82")]
			[Address(RVA = "0xDE7064", Offset = "0xDE7064", VA = "0xDE7064")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001B83")]
			[Address(RVA = "0xDE706C", Offset = "0xDE706C", VA = "0xDE706C")]
			set
			{
			}
		}

		[Token(Token = "0x1700037E")]
		public int includedObjectsCount
		{
			[Token(Token = "0x6001B8C")]
			[Address(RVA = "0xDE7714", Offset = "0xDE7714", VA = "0xDE7714")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1400001D")]
		public event OnObjectHighlightEvent OnObjectHighlightStart
		{
			[Token(Token = "0x6001B84")]
			[Address(RVA = "0xDE7214", Offset = "0xDE7214", VA = "0xDE7214")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001B85")]
			[Address(RVA = "0xDE72B4", Offset = "0xDE72B4", VA = "0xDE72B4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400001E")]
		public event OnObjectHighlightEvent OnObjectHighlightEnd
		{
			[Token(Token = "0x6001B86")]
			[Address(RVA = "0xDE7354", Offset = "0xDE7354", VA = "0xDE7354")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001B87")]
			[Address(RVA = "0xDE73F4", Offset = "0xDE73F4", VA = "0xDE73F4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400001F")]
		public event OnRendererHighlightEvent OnRendererHighlightStart
		{
			[Token(Token = "0x6001B88")]
			[Address(RVA = "0xDE7494", Offset = "0xDE7494", VA = "0xDE7494")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001B89")]
			[Address(RVA = "0xDE7534", Offset = "0xDE7534", VA = "0xDE7534")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000020")]
		public event OnTargetAnimatesEvent OnTargetAnimates
		{
			[Token(Token = "0x6001B8A")]
			[Address(RVA = "0xDE75D4", Offset = "0xDE75D4", VA = "0xDE75D4")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001B8B")]
			[Address(RVA = "0xDE7674", Offset = "0xDE7674", VA = "0xDE7674")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6001B8D")]
		[Address(RVA = "0xDE771C", Offset = "0xDE771C", VA = "0xDE771C")]
		public void RestorePreviousHighlightEffectSettings()
		{
		}

		[Token(Token = "0x6001B8E")]
		[Address(RVA = "0xDE773C", Offset = "0xDE773C", VA = "0xDE773C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001B8F")]
		[Address(RVA = "0xDE8758", Offset = "0xDE8758", VA = "0xDE8758")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001B90")]
		[Address(RVA = "0xDEA238", Offset = "0xDEA238", VA = "0xDEA238")]
		private void DestroyMaterial(Material mat)
		{
		}

		[Token(Token = "0x6001B91")]
		[Address(RVA = "0xDEA2C0", Offset = "0xDEA2C0", VA = "0xDEA2C0")]
		private void DestroyMaterialArray(Material[] mm)
		{
		}

		[Token(Token = "0x6001B92")]
		[Address(RVA = "0xDEA318", Offset = "0xDEA318", VA = "0xDEA318")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001B93")]
		[Address(RVA = "0xDEA54C", Offset = "0xDEA54C", VA = "0xDEA54C")]
		private void Reset()
		{
		}

		[Token(Token = "0x6001B94")]
		[Address(RVA = "0xDEA550", Offset = "0xDEA550", VA = "0xDEA550")]
		public void ProfileLoad(HighlightProfile profile)
		{
		}

		[Token(Token = "0x6001B95")]
		[Address(RVA = "0xDEA5F4", Offset = "0xDEA5F4", VA = "0xDEA5F4")]
		public void ProfileReload()
		{
		}

		[Token(Token = "0x6001B96")]
		[Address(RVA = "0xDEA67C", Offset = "0xDEA67C", VA = "0xDEA67C")]
		public void ProfileSaveChanges(HighlightProfile profile)
		{
		}

		[Token(Token = "0x6001B97")]
		[Address(RVA = "0xDEA710", Offset = "0xDEA710", VA = "0xDEA710")]
		public void ProfileSaveChanges()
		{
		}

		[Token(Token = "0x6001B98")]
		[Address(RVA = "0xDEA798", Offset = "0xDEA798", VA = "0xDEA798")]
		public void Refresh()
		{
		}

		[Token(Token = "0x6001B99")]
		[Address(RVA = "0xDE6564", Offset = "0xDE6564", VA = "0xDE6564")]
		public CommandBuffer GetCommandBuffer(Camera cam, RenderTargetIdentifier colorAttachmentBuffer, RenderTargetIdentifier depthAttachmentBuffer, FullScreenBlitMethod fullScreenBlit, bool clearStencil)
		{
			return null;
		}

		[Token(Token = "0x6001B9A")]
		[Address(RVA = "0xDEA7C0", Offset = "0xDEA7C0", VA = "0xDEA7C0")]
		private void BuildCommandBuffer(Camera cam, bool clearStencil)
		{
		}

		[Token(Token = "0x6001B9B")]
		[Address(RVA = "0xDEF9AC", Offset = "0xDEF9AC", VA = "0xDEF9AC")]
		private void RenderMask(int k, Mesh mesh, bool renderMaskOnTop)
		{
		}

		[Token(Token = "0x6001B9C")]
		[Address(RVA = "0xDF0E88", Offset = "0xDF0E88", VA = "0xDF0E88")]
		private void RenderSeeThroughClearStencil(int k, Mesh mesh)
		{
		}

		[Token(Token = "0x6001B9D")]
		[Address(RVA = "0xDF10A0", Offset = "0xDF10A0", VA = "0xDF10A0")]
		private void RenderSeeThroughMask(int k, Mesh mesh)
		{
		}

		[Token(Token = "0x6001B9E")]
		[Address(RVA = "0xDEFBA8", Offset = "0xDEFBA8", VA = "0xDEFBA8")]
		private bool ComputeSmoothQuadMatrix(Camera cam, Bounds bounds)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B9F")]
		[Address(RVA = "0xDF1270", Offset = "0xDF1270", VA = "0xDF1270")]
		private void BuildMatrix(Camera cam, Vector3 scrMin, Vector3 scrMax, int border, ref Matrix4x4 quadMatrix)
		{
		}

		[Token(Token = "0x6001BA0")]
		[Address(RVA = "0xDEFF60", Offset = "0xDEFF60", VA = "0xDEFF60")]
		private void SmoothGlow(int rtWidth, int rtHeight)
		{
		}

		[Token(Token = "0x6001BA1")]
		[Address(RVA = "0xDF0464", Offset = "0xDF0464", VA = "0xDF0464")]
		private void SmoothOutline(int rtWidth, int rtHeight)
		{
		}

		[Token(Token = "0x6001BA2")]
		[Address(RVA = "0xDF096C", Offset = "0xDF096C", VA = "0xDF096C")]
		private void ComposeSmoothBlend(Visibility smoothGlowVisibility, Visibility smoothOutlineVisibility)
		{
		}

		[Token(Token = "0x6001BA3")]
		[Address(RVA = "0xDF14BC", Offset = "0xDF14BC", VA = "0xDF14BC")]
		private void InitMaterial(ref Material material, string shaderName)
		{
		}

		[Token(Token = "0x6001BA4")]
		[Address(RVA = "0xDF164C", Offset = "0xDF164C", VA = "0xDF164C")]
		private void Fork(Material mat, ref Material[] mats, Mesh mesh)
		{
		}

		[Token(Token = "0x6001BA5")]
		[Address(RVA = "0xDF16F0", Offset = "0xDF16F0", VA = "0xDF16F0")]
		private void Fork(Material material, ref Material[] array, int count)
		{
		}

		[Token(Token = "0x6001BA6")]
		[Address(RVA = "0xDF187C", Offset = "0xDF187C", VA = "0xDF187C")]
		public void SetTarget(Transform transform)
		{
		}

		[Token(Token = "0x6001BA7")]
		[Address(RVA = "0xDF19D4", Offset = "0xDF19D4", VA = "0xDF19D4")]
		public void SetTargets(Transform transform, Renderer[] renderers)
		{
		}

		[Token(Token = "0x6001BA8")]
		[Address(RVA = "0xDE7074", Offset = "0xDE7074", VA = "0xDE7074")]
		public void SetHighlighted(bool state)
		{
		}

		[Token(Token = "0x6001BA9")]
		[Address(RVA = "0xDF194C", Offset = "0xDF194C", VA = "0xDF194C")]
		private void ImmediateFadeOut()
		{
		}

		[Token(Token = "0x6001BAA")]
		[Address(RVA = "0xDE83B0", Offset = "0xDE83B0", VA = "0xDE83B0")]
		private void SetupMaterial()
		{
		}

		[Token(Token = "0x6001BAB")]
		[Address(RVA = "0xDF1A88", Offset = "0xDF1A88", VA = "0xDF1A88")]
		private void SetupMaterial(Renderer[] rr)
		{
		}

		[Token(Token = "0x6001BAC")]
		[Address(RVA = "0xDF22A8", Offset = "0xDF22A8", VA = "0xDF22A8")]
		private Renderer[] FindRenderersWithLayerInScene(LayerMask layer)
		{
			return null;
		}

		[Token(Token = "0x6001BAD")]
		[Address(RVA = "0xDF24E0", Offset = "0xDF24E0", VA = "0xDF24E0")]
		private Renderer[] FindRenderersWithLayerInChildren(LayerMask layer)
		{
			return null;
		}

		[Token(Token = "0x6001BAE")]
		[Address(RVA = "0xDE803C", Offset = "0xDE803C", VA = "0xDE803C")]
		private void CheckGeometrySupportDependencies()
		{
		}

		[Token(Token = "0x6001BAF")]
		[Address(RVA = "0xDF26FC", Offset = "0xDF26FC", VA = "0xDF26FC")]
		private void CheckCommandBuffers()
		{
		}

		[Token(Token = "0x6001BB0")]
		[Address(RVA = "0xDE8854", Offset = "0xDE8854", VA = "0xDE8854")]
		public void UpdateMaterialProperties()
		{
		}

		[Token(Token = "0x6001BB1")]
		[Address(RVA = "0xDF149C", Offset = "0xDF149C", VA = "0xDF149C")]
		private int GetZTestValue(Visibility param)
		{
			return default(int);
		}

		[Token(Token = "0x6001BB2")]
		[Address(RVA = "0xDE7CA8", Offset = "0xDE7CA8", VA = "0xDE7CA8")]
		private void BuildQuad()
		{
		}

		[Token(Token = "0x6001BB3")]
		[Address(RVA = "0xDE7F9C", Offset = "0xDE7F9C", VA = "0xDE7F9C")]
		private void BuildCube()
		{
		}

		[Token(Token = "0x6001BB4")]
		[Address(RVA = "0xDF3C68", Offset = "0xDF3C68", VA = "0xDF3C68")]
		public bool Includes(Transform transform)
		{
			return default(bool);
		}

		[Token(Token = "0x6001BB5")]
		[Address(RVA = "0xDF3D34", Offset = "0xDF3D34", VA = "0xDF3D34")]
		public void SetGlowColor(Color color)
		{
		}

		[Token(Token = "0x6001BB6")]
		[Address(RVA = "0xDF2DE4", Offset = "0xDF2DE4", VA = "0xDF2DE4")]
		private void AverageNormals(int objIndex)
		{
		}

		[Token(Token = "0x6001BB7")]
		[Address(RVA = "0xDF27D4", Offset = "0xDF27D4", VA = "0xDF27D4")]
		private void ReorientNormals(int objIndex)
		{
		}

		[Token(Token = "0x6001BB8")]
		[Address(RVA = "0xDF3700", Offset = "0xDF3700", VA = "0xDF3700")]
		private void CombineMeshes()
		{
		}

		[Token(Token = "0x6001BB9")]
		[Address(RVA = "0xDF3D90", Offset = "0xDF3D90", VA = "0xDF3D90")]
		public void HitFX()
		{
		}

		[Token(Token = "0x6001BBA")]
		[Address(RVA = "0xDF3E00", Offset = "0xDF3E00", VA = "0xDF3E00")]
		public void HitFX(Vector3 position)
		{
		}

		[Token(Token = "0x6001BBB")]
		[Address(RVA = "0xDF3DAC", Offset = "0xDF3DAC", VA = "0xDF3DAC")]
		public void HitFX(Color color, float fadeOutDuration, float initialIntensity = 1f)
		{
		}

		[Token(Token = "0x6001BBC")]
		[Address(RVA = "0xDF3E4C", Offset = "0xDF3E4C", VA = "0xDF3E4C")]
		public void HitFX(Color color, float fadeOutDuration, float initialIntensity, Vector3 position, float radius)
		{
		}

		[Token(Token = "0x6001BBD")]
		[Address(RVA = "0xDF3ED4", Offset = "0xDF3ED4", VA = "0xDF3ED4")]
		public void TargetFX()
		{
		}

		[Token(Token = "0x6001BBE")]
		[Address(RVA = "0xDF3F0C", Offset = "0xDF3F0C", VA = "0xDF3F0C")]
		public bool IsSeeThroughOccluded(Camera cam)
		{
			return default(bool);
		}

		[Token(Token = "0x6001BBF")]
		[Address(RVA = "0xDF4464", Offset = "0xDF4464", VA = "0xDF4464")]
		public static void RegisterOccluder(HighlightSeeThroughOccluder occluder)
		{
		}

		[Token(Token = "0x6001BC0")]
		[Address(RVA = "0xDF458C", Offset = "0xDF458C", VA = "0xDF458C")]
		public static void UnregisterOccluder(HighlightSeeThroughOccluder occluder)
		{
		}

		[Token(Token = "0x6001BC1")]
		[Address(RVA = "0xDEE170", Offset = "0xDEE170", VA = "0xDEE170")]
		public bool RenderSeeThroughOccluders(CommandBuffer cb, Camera cam)
		{
			return default(bool);
		}

		[Token(Token = "0x6001BC2")]
		[Address(RVA = "0xDEF198", Offset = "0xDEF198", VA = "0xDEF198")]
		private bool CheckOcclusion(Camera cam)
		{
			return default(bool);
		}

		[Token(Token = "0x6001BC3")]
		[Address(RVA = "0xDEE5A0", Offset = "0xDEE5A0", VA = "0xDEE5A0")]
		private void CheckOcclusionAccurate(CommandBuffer cbuf, Camera cam)
		{
		}

		[Token(Token = "0x6001BC4")]
		[Address(RVA = "0xDF465C", Offset = "0xDF465C", VA = "0xDF465C")]
		public List<Renderer> GetOccluders(Camera camera)
		{
			return null;
		}

		[Token(Token = "0x6001BC5")]
		[Address(RVA = "0xDF46C8", Offset = "0xDF46C8", VA = "0xDF46C8")]
		public HighlightEffect()
		{
		}
	}
	[Token(Token = "0x2000568")]
	public enum HitFxMode
	{
		[Token(Token = "0x4001BB6")]
		Overlay,
		[Token(Token = "0x4001BB7")]
		InnerGlow,
		[Token(Token = "0x4001BB8")]
		LocalHit
	}
	[Token(Token = "0x2000569")]
	public delegate bool OnObjectSelectionEvent(GameObject obj);
	[Token(Token = "0x200056A")]
	[HelpURL("https://www.dropbox.com/s/1p9h8xys68lm4a3/Documentation.pdf?dl=0")]
	[DefaultExecutionOrder(100)]
	[RequireComponent(typeof(HighlightEffect))]
	public class HighlightManager : MonoBehaviour
	{
		[Token(Token = "0x4001BB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Enables highlight when pointer is over this object.")]
		public bool highlightOnHover;

		[Token(Token = "0x4001BBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public LayerMask layerMask;

		[Token(Token = "0x4001BBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Camera raycastCamera;

		[Token(Token = "0x4001BBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public RayCastSource raycastSource;

		[Token(Token = "0x4001BBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("Minimum distance for target.")]
		public float minDistance;

		[Token(Token = "0x4001BBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Maximum distance for target. 0 = infinity")]
		public float maxDistance;

		[Token(Token = "0x4001BBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("Blocks interaction if pointer is over an UI element")]
		public bool respectUI;

		[Token(Token = "0x4001BC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		[Tooltip("If the object will be selected by clicking with mouse or tapping on it.")]
		public bool selectOnClick;

		[Token(Token = "0x4001BC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Optional profile for objects selected by clicking on them")]
		public HighlightProfile selectedProfile;

		[Token(Token = "0x4001BC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Profile to use whtn object is selected and highlighted.")]
		public HighlightProfile selectedAndHighlightedProfile;

		[Token(Token = "0x4001BC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Automatically deselects other previously selected objects")]
		public bool singleSelection;

		[Token(Token = "0x4001BC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		[Tooltip("Toggles selection on/off when clicking object")]
		public bool toggle;

		[Token(Token = "0x4001BC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private HighlightEffect baseEffect;

		[Token(Token = "0x4001BC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private HighlightEffect currentEffect;

		[Token(Token = "0x4001BC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform currentObject;

		[Token(Token = "0x4001BC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly List<HighlightEffect> selectedObjects;

		[Token(Token = "0x4001BCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static int lastTriggerTime;

		[Token(Token = "0x4001BCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static HighlightManager _instance;

		[Token(Token = "0x17000380")]
		public static HighlightManager instance
		{
			[Token(Token = "0x6001BD5")]
			[Address(RVA = "0xDF5304", Offset = "0xDF5304", VA = "0xDF5304")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x14000021")]
		public event OnObjectSelectionEvent OnObjectSelected
		{
			[Token(Token = "0x6001BCD")]
			[Address(RVA = "0xDF4E24", Offset = "0xDF4E24", VA = "0xDF4E24")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001BCE")]
			[Address(RVA = "0xDF4EC0", Offset = "0xDF4EC0", VA = "0xDF4EC0")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000022")]
		public event OnObjectSelectionEvent OnObjectUnSelected
		{
			[Token(Token = "0x6001BCF")]
			[Address(RVA = "0xDF4F5C", Offset = "0xDF4F5C", VA = "0xDF4F5C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001BD0")]
			[Address(RVA = "0xDF4FF8", Offset = "0xDF4FF8", VA = "0xDF4FF8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000023")]
		public event OnObjectHighlightEvent OnObjectHighlightStart
		{
			[Token(Token = "0x6001BD1")]
			[Address(RVA = "0xDF5094", Offset = "0xDF5094", VA = "0xDF5094")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001BD2")]
			[Address(RVA = "0xDF5130", Offset = "0xDF5130", VA = "0xDF5130")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000024")]
		public event OnObjectHighlightEvent OnObjectHighlightEnd
		{
			[Token(Token = "0x6001BD3")]
			[Address(RVA = "0xDF51CC", Offset = "0xDF51CC", VA = "0xDF51CC")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001BD4")]
			[Address(RVA = "0xDF5268", Offset = "0xDF5268", VA = "0xDF5268")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6001BD6")]
		[Address(RVA = "0xDF540C", Offset = "0xDF540C", VA = "0xDF540C")]
		[RuntimeInitializeOnLoadMethod]
		private void DomainReloadDisabledSupport()
		{
		}

		[Token(Token = "0x6001BD7")]
		[Address(RVA = "0xDF54B0", Offset = "0xDF54B0", VA = "0xDF54B0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001BD8")]
		[Address(RVA = "0xDF57C4", Offset = "0xDF57C4", VA = "0xDF57C4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001BD9")]
		[Address(RVA = "0xDF5D30", Offset = "0xDF5D30", VA = "0xDF5D30")]
		private void Update()
		{
		}

		[Token(Token = "0x6001BDA")]
		[Address(RVA = "0xDF6480", Offset = "0xDF6480", VA = "0xDF6480")]
		private EventSystem CreateEventSystem()
		{
			return null;
		}

		[Token(Token = "0x6001BDB")]
		[Address(RVA = "0xDF57E0", Offset = "0xDF57E0", VA = "0xDF57E0")]
		private void SwitchesCollider(Transform newObject)
		{
		}

		[Token(Token = "0x6001BDC")]
		[Address(RVA = "0xDF6F90", Offset = "0xDF6F90", VA = "0xDF6F90")]
		private bool CanInteract()
		{
			return default(bool);
		}

		[Token(Token = "0x6001BDD")]
		[Address(RVA = "0xDF68C4", Offset = "0xDF68C4", VA = "0xDF68C4")]
		private void ToggleSelection(Transform t, bool forceSelection)
		{
		}

		[Token(Token = "0x6001BDE")]
		[Address(RVA = "0xDF6D64", Offset = "0xDF6D64", VA = "0xDF6D64")]
		private void Highlight(bool state)
		{
		}

		[Token(Token = "0x6001BDF")]
		[Address(RVA = "0xDF56F8", Offset = "0xDF56F8", VA = "0xDF56F8")]
		public static Camera GetCamera()
		{
			return null;
		}

		[Token(Token = "0x6001BE0")]
		[Address(RVA = "0xDF5A8C", Offset = "0xDF5A8C", VA = "0xDF5A8C")]
		private void internal_DeselectAll()
		{
		}

		[Token(Token = "0x6001BE1")]
		[Address(RVA = "0xDF7624", Offset = "0xDF7624", VA = "0xDF7624")]
		public static void DeselectAll()
		{
		}

		[Token(Token = "0x6001BE2")]
		[Address(RVA = "0xDF790C", Offset = "0xDF790C", VA = "0xDF790C")]
		public void SelectObject(Transform t)
		{
		}

		[Token(Token = "0x6001BE3")]
		[Address(RVA = "0xDF7914", Offset = "0xDF7914", VA = "0xDF7914")]
		public void ToggleObject(Transform t)
		{
		}

		[Token(Token = "0x6001BE4")]
		[Address(RVA = "0xDF791C", Offset = "0xDF791C", VA = "0xDF791C")]
		public void UnselectObject(Transform t)
		{
		}

		[Token(Token = "0x6001BE5")]
		[Address(RVA = "0xDF7AD0", Offset = "0xDF7AD0", VA = "0xDF7AD0")]
		public HighlightManager()
		{
		}
	}
	[Token(Token = "0x200056B")]
	[HelpURL("https://www.dropbox.com/s/1p9h8xys68lm4a3/Documentation.pdf?dl=0")]
	[CreateAssetMenu(menuName = "Highlight Plus Profile", fileName = "Highlight Plus Profile", order = 100)]
	public class HighlightProfile : ScriptableObject
	{
		[Token(Token = "0x4001BCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Different options to specify which objects are affected by this Highlight Effect component.")]
		public TargetOptions effectGroup;

		[Token(Token = "0x4001BD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("The layer that contains the affected objects by this effect when effectGroup is set to LayerMask.")]
		public LayerMask effectGroupLayer;

		[Token(Token = "0x4001BD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Only include objects whose names contains this text.")]
		public string effectNameFilter;

		[Token(Token = "0x4001BD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Combine meshes of all objects in this group affected by Highlight Effect reducing draw calls.")]
		public bool combineMeshes;

		[Token(Token = "0x4001BD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("The alpha threshold for transparent cutout objects. Pixels with alpha below this value will be discarded.")]
		[Range(0f, 1f)]
		public float alphaCutOff;

		[Token(Token = "0x4001BD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("If back facing triangles are ignored.Backfaces triangles are not visible but you may set this property to false to force highlight effects to act on those triangles as well.")]
		public bool cullBackFaces;

		[Token(Token = "0x4001BD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("Normals handling option:\nPreserve original: use original mesh normals.\nSmooth: average normals to produce a smoother outline/glow mesh based effect.\nReorient: recomputes normals based on vertex direction to centroid.")]
		public NormalsOption normalsOption;

		[Token(Token = "0x4001BD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float fadeInDuration;

		[Token(Token = "0x4001BD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float fadeOutDuration;

		[Token(Token = "0x4001BD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Keeps the outline/glow size unaffected by object distance.")]
		public bool constantWidth;

		[Token(Token = "0x4001BD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Range(0f, 1f)]
		[Tooltip("Intensity of the overlay effect. A value of 0 disables the overlay completely.")]
		public float overlay;

		[Token(Token = "0x4001BDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[ColorUsage(true, true)]
		public Color overlayColor;

		[Token(Token = "0x4001BDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float overlayAnimationSpeed;

		[Token(Token = "0x4001BDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Range(0f, 1f)]
		public float overlayMinIntensity;

		[Token(Token = "0x4001BDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Range(0f, 1f)]
		[Tooltip("Controls the blending or mix of the overlay color with the natural colors of the object.")]
		public float overlayBlending;

		[Token(Token = "0x4001BDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Optional overlay texture.")]
		public Texture2D overlayTexture;

		[Token(Token = "0x4001BDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float overlayTextureScale;

		[Token(Token = "0x4001BE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[Range(0f, 1f)]
		[Tooltip("Intensity of the outline. A value of 0 disables the outline completely.")]
		public float outline;

		[Token(Token = "0x4001BE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[ColorUsage(true, true)]
		public Color outlineColor;

		[Token(Token = "0x4001BE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float outlineWidth;

		[Token(Token = "0x4001BE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public QualityLevel outlineQuality;

		[Token(Token = "0x4001BE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Reduces the quality of the outline but improves performance a bit.")]
		[Range(1f, 8f)]
		public int outlineDownsampling;

		[Token(Token = "0x4001BE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public Visibility outlineVisibility;

		[Token(Token = "0x4001BE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("If enabled, this object won't combine the outline with other objects.")]
		public bool outlineIndependent;

		[Token(Token = "0x4001BE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[Range(0f, 5f)]
		[Tooltip("The intensity of the outer glow effect. A value of 0 disables the glow completely.")]
		public float glow;

		[Token(Token = "0x4001BE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public float glowWidth;

		[Token(Token = "0x4001BE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public QualityLevel glowQuality;

		[Token(Token = "0x4001BEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Range(1f, 8f)]
		[Tooltip("Reduces the quality of the glow but improves performance a bit.")]
		public int glowDownsampling;

		[Token(Token = "0x4001BEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[ColorUsage(true, true)]
		public Color glowHQColor;

		[Token(Token = "0x4001BEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[Tooltip("When enabled, outer glow renders with dithering. When disabled, glow appears as a solid color.")]
		public bool glowDithering;

		[Token(Token = "0x4001BED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Tooltip("Seed for the dithering effect")]
		public float glowMagicNumber1;

		[Token(Token = "0x4001BEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[Tooltip("Another seed for the dithering effect that combines with first seed to create different patterns")]
		public float glowMagicNumber2;

		[Token(Token = "0x4001BEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public float glowAnimationSpeed;

		[Token(Token = "0x4001BF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public Visibility glowVisibility;

		[Token(Token = "0x4001BF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public GlowBlendMode glowBlendMode;

		[Token(Token = "0x4001BF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		[Tooltip("Blends glow passes one after another. If this option is disabled, glow passes won't overlap (in this case, make sure the glow pass 1 has a smaller offset than pass 2, etc.)")]
		public bool glowBlendPasses;

		[Token(Token = "0x4001BF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public GlowPassData[] glowPasses;

		[Token(Token = "0x4001BF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[Tooltip("If enabled, glow effect will not use a stencil mask. This can be used to render the glow effect alone.")]
		public bool glowIgnoreMask;

		[Token(Token = "0x4001BF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		[Range(0f, 5f)]
		[Tooltip("The intensity of the inner glow effect. A value of 0 disables the glow completely.")]
		public float innerGlow;

		[Token(Token = "0x4001BF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[Range(0f, 2f)]
		public float innerGlowWidth;

		[Token(Token = "0x4001BF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		[ColorUsage(true, true)]
		public Color innerGlowColor;

		[Token(Token = "0x4001BF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		public Visibility innerGlowVisibility;

		[Token(Token = "0x4001BF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[Tooltip("Enables the targetFX effect. This effect draws an animated sprite over the object.")]
		public bool targetFX;

		[Token(Token = "0x4001BFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public Texture2D targetFXTexture;

		[Token(Token = "0x4001BFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[ColorUsage(true, true)]
		public Color targetFXColor;

		[Token(Token = "0x4001BFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public float targetFXRotationSpeed;

		[Token(Token = "0x4001BFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		public float targetFXInitialScale;

		[Token(Token = "0x4001BFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public float targetFXEndScale;

		[Token(Token = "0x4001BFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		[Tooltip("Makes target scale relative to object renderer bounds.")]
		public bool targetFXScaleToRenderBounds;

		[Token(Token = "0x4001C00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12D")]
		[Tooltip("Places target FX sprite at the bottom of the highlighted object.")]
		public bool targetFXAlignToGround;

		[Token(Token = "0x4001C01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[Tooltip("Max distance from the center of the highlighted object to the ground.")]
		public float targetFXGroundMaxDistance;

		[Token(Token = "0x4001C02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		public LayerMask targetFXGroundLayerMask;

		[Token(Token = "0x4001C03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[Tooltip("Fade out effect with altitude")]
		public float targetFXFadePower;

		[Token(Token = "0x4001C04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		public float targetFXTransitionDuration;

		[Token(Token = "0x4001C05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public float targetFXStayDuration;

		[Token(Token = "0x4001C06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
		public Visibility targetFXVisibility;

		[Token(Token = "0x4001C07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		[Tooltip("See-through mode for this Highlight Effect component.")]
		public SeeThroughMode seeThrough;

		[Token(Token = "0x4001C08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		[Tooltip("This mask setting let you specify which objects will be considered as occluders and cause the see-through effect for this Highlight Effect component. For example, you assign your walls to a different layer and specify that layer here, so only walls and not other objects, like ground or ceiling, will trigger the see-through effect.")]
		public LayerMask seeThroughOccluderMask;

		[Token(Token = "0x4001C09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		[Tooltip("Uses stencil buffers to ensure pixel-accurate occlusion test. If this option is disabled, only physics raycasting is used to test for occlusion.")]
		public bool seeThroughOccluderMaskAccurate;

		[Token(Token = "0x4001C0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
		[Tooltip("A multiplier for the occluder volume size which can be used to reduce the actual size of occluders when Highlight Effect checks if they're occluding this object.")]
		[Range(0.01f, 0.9f)]
		public float seeThroughOccluderThreshold;

		[Token(Token = "0x4001C0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		[Tooltip("The interval of time between occlusion tests.")]
		public float seeThroughOccluderCheckInterval;

		[Token(Token = "0x4001C0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
		[Tooltip("If enabled, occlusion test is performed for each children element. If disabled, the bounds of all children is combined and a single occlusion test is performed for the combined bounds.")]
		public bool seeThroughOccluderCheckIndividualObjects;

		[Token(Token = "0x4001C0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		[Tooltip("Shows the see-through effect only if the occluder if at this 'offset' distance from the object.")]
		public float seeThroughDepthOffset;

		[Token(Token = "0x4001C0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		[Tooltip("Hides the see-through effect if the occluder is further than this distance from the object (0 = infinite)")]
		public float seeThroughMaxDepth;

		[Token(Token = "0x4001C0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		[Range(0f, 5f)]
		public float seeThroughIntensity;

		[Token(Token = "0x4001C10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		[Range(0f, 1f)]
		public float seeThroughTintAlpha;

		[Token(Token = "0x4001C11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public Color seeThroughTintColor;

		[Token(Token = "0x4001C12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		[Range(0f, 1f)]
		public float seeThroughNoise;

		[Token(Token = "0x4001C13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
		[Range(0f, 1f)]
		public float seeThroughBorder;

		[Token(Token = "0x4001C14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		public Color seeThroughBorderColor;

		[Token(Token = "0x4001C15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		public float seeThroughBorderWidth;

		[Token(Token = "0x4001C16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
		[Tooltip("This option clears the stencil buffer after rendering the see-through effect which results in correct rendering order and supports other stencil-based effects that render afterwards.")]
		public bool seeThroughOrdered;

		[Token(Token = "0x4001C17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		[Range(0f, 1f)]
		public float hitFxInitialIntensity;

		[Token(Token = "0x4001C18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
		public HitFxMode hitFxMode;

		[Token(Token = "0x4001C19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		public float hitFxFadeOutDuration;

		[Token(Token = "0x4001C1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
		[ColorUsage(true, true)]
		public Color hitFxColor;

		[Token(Token = "0x4001C1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1BC")]
		public float hitFxRadius;

		[Token(Token = "0x6001BE7")]
		[Address(RVA = "0xDF73D4", Offset = "0xDF73D4", VA = "0xDF73D4")]
		public void Load(HighlightEffect effect)
		{
		}

		[Token(Token = "0x6001BE8")]
		[Address(RVA = "0xDF719C", Offset = "0xDF719C", VA = "0xDF719C")]
		public void Save(HighlightEffect effect)
		{
		}

		[Token(Token = "0x6001BE9")]
		[Address(RVA = "0xDF7BA4", Offset = "0xDF7BA4", VA = "0xDF7BA4")]
		private GlowPassData[] GetGlowPassesCopy(GlowPassData[] glowPasses)
		{
			return null;
		}

		[Token(Token = "0x6001BEA")]
		[Address(RVA = "0xDF7C78", Offset = "0xDF7C78", VA = "0xDF7C78")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6001BEB")]
		[Address(RVA = "0xDF7DB4", Offset = "0xDF7DB4", VA = "0xDF7DB4")]
		public HighlightProfile()
		{
		}
	}
	[Token(Token = "0x200056C")]
	public struct MeshData
	{
		[Token(Token = "0x4001C1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Renderer renderer;

		[Token(Token = "0x4001C1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int subMeshCount;
	}
	[Token(Token = "0x200056D")]
	public enum DetectionMethod
	{
		[Token(Token = "0x4001C1F")]
		Stencil,
		[Token(Token = "0x4001C20")]
		RayCast
	}
	[Token(Token = "0x200056E")]
	[ExecuteInEditMode]
	public class HighlightSeeThroughOccluder : MonoBehaviour
	{
		[Token(Token = "0x4001C21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public DetectionMethod detectionMethod;

		[NonSerialized]
		[Token(Token = "0x4001C22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MeshData[] meshData;

		[Token(Token = "0x4001C23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<Renderer> rr;

		[Token(Token = "0x6001BEC")]
		[Address(RVA = "0xDF7F38", Offset = "0xDF7F38", VA = "0xDF7F38")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001BED")]
		[Address(RVA = "0xDF7F70", Offset = "0xDF7F70", VA = "0xDF7F70")]
		private void Init()
		{
		}

		[Token(Token = "0x6001BEE")]
		[Address(RVA = "0xDF83BC", Offset = "0xDF83BC", VA = "0xDF83BC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001BEF")]
		[Address(RVA = "0xDF8414", Offset = "0xDF8414", VA = "0xDF8414")]
		public HighlightSeeThroughOccluder()
		{
		}
	}
	[Token(Token = "0x200056F")]
	public enum TriggerMode
	{
		[Token(Token = "0x4001C25")]
		ColliderEventsOnlyOnThisObject,
		[Token(Token = "0x4001C26")]
		RaycastOnThisObjectAndChildren,
		[Token(Token = "0x4001C27")]
		Volume
	}
	[Token(Token = "0x2000570")]
	public enum RayCastSource
	{
		[Token(Token = "0x4001C29")]
		MousePosition,
		[Token(Token = "0x4001C2A")]
		CameraDirection
	}
	[Token(Token = "0x2000571")]
	[RequireComponent(typeof(HighlightEffect))]
	[ExecuteInEditMode]
	[HelpURL("https://www.dropbox.com/s/1p9h8xys68lm4a3/Documentation.pdf?dl=0")]
	public class HighlightTrigger : MonoBehaviour
	{
		[Token(Token = "0x2000572")]
		[CompilerGenerated]
		private sealed class <DoRayCast>d__38 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001C42")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001C43")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001C44")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HighlightTrigger <>4__this;

			[Token(Token = "0x17000382")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001C0D")]
				[Address(RVA = "0xDFA2C0", Offset = "0xDFA2C0", VA = "0xDFA2C0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000383")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001C0F")]
				[Address(RVA = "0xDFA308", Offset = "0xDFA308", VA = "0xDFA308", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001C0A")]
			[Address(RVA = "0xDF8F8C", Offset = "0xDF8F8C", VA = "0xDF8F8C")]
			[DebuggerHidden]
			public <DoRayCast>d__38(int <>1__state)
			{
			}

			[Token(Token = "0x6001C0B")]
			[Address(RVA = "0xDF9A64", Offset = "0xDF9A64", VA = "0xDF9A64", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001C0C")]
			[Address(RVA = "0xDF9A68", Offset = "0xDF9A68", VA = "0xDF9A68", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001C0E")]
			[Address(RVA = "0xDFA2C8", Offset = "0xDFA2C8", VA = "0xDFA2C8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001C2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Enables highlight when pointer is over this object.")]
		public bool highlightOnHover;

		[Token(Token = "0x4001C2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Used to trigger automatic highlighting including children objects.")]
		public TriggerMode triggerMode;

		[Token(Token = "0x4001C2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Camera raycastCamera;

		[Token(Token = "0x4001C2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public RayCastSource raycastSource;

		[Token(Token = "0x4001C2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("Minimum distance for target.")]
		public float minDistance;

		[Token(Token = "0x4001C30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Maximum distance for target. 0 = infinity")]
		public float maxDistance;

		[Token(Token = "0x4001C31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("Blocks interaction if pointer is over an UI element")]
		public bool respectUI;

		[Token(Token = "0x4001C32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public LayerMask volumeLayerMask;

		[Token(Token = "0x4001C33")]
		private const int MAX_RAYCAST_HITS = 100;

		[Token(Token = "0x4001C34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("If the object will be selected by clicking with mouse or tapping on it.")]
		public bool selectOnClick;

		[Token(Token = "0x4001C35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Profile to use when object is selected by clicking on it.")]
		public HighlightProfile selectedProfile;

		[Token(Token = "0x4001C36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Profile to use whtn object is selected and highlighted.")]
		public HighlightProfile selectedAndHighlightedProfile;

		[Token(Token = "0x4001C37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Automatically deselects any other selected object prior selecting this one")]
		public bool singleSelection;

		[Token(Token = "0x4001C38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		[Tooltip("Toggles selection on/off when clicking object")]
		public bool toggle;

		[NonSerialized]
		[Token(Token = "0x4001C39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Collider[] colliders;

		[Token(Token = "0x4001C3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Collider currentCollider;

		[Token(Token = "0x4001C3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static RaycastHit[] hits;

		[Token(Token = "0x4001C3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private HighlightEffect hb;

		[Token(Token = "0x4001C41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private TriggerMode currentTriggerMode;

		[Token(Token = "0x17000381")]
		public HighlightEffect highlightEffect
		{
			[Token(Token = "0x6001BF0")]
			[Address(RVA = "0xDF841C", Offset = "0xDF841C", VA = "0xDF841C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x14000025")]
		public event OnObjectSelectionEvent OnObjectSelected
		{
			[Token(Token = "0x6001BF1")]
			[Address(RVA = "0xDF8424", Offset = "0xDF8424", VA = "0xDF8424")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001BF2")]
			[Address(RVA = "0xDF84C0", Offset = "0xDF84C0", VA = "0xDF84C0")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000026")]
		public event OnObjectSelectionEvent OnObjectUnSelected
		{
			[Token(Token = "0x6001BF3")]
			[Address(RVA = "0xDF855C", Offset = "0xDF855C", VA = "0xDF855C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001BF4")]
			[Address(RVA = "0xDF85F8", Offset = "0xDF85F8", VA = "0xDF85F8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000027")]
		public event OnObjectHighlightEvent OnObjectHighlightStart
		{
			[Token(Token = "0x6001BF5")]
			[Address(RVA = "0xDF8694", Offset = "0xDF8694", VA = "0xDF8694")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001BF6")]
			[Address(RVA = "0xDF8730", Offset = "0xDF8730", VA = "0xDF8730")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000028")]
		public event OnObjectHighlightEvent OnObjectHighlightEnd
		{
			[Token(Token = "0x6001BF7")]
			[Address(RVA = "0xDF87CC", Offset = "0xDF87CC", VA = "0xDF87CC")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001BF8")]
			[Address(RVA = "0xDF8868", Offset = "0xDF8868", VA = "0xDF8868")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6001BF9")]
		[Address(RVA = "0xDF8904", Offset = "0xDF8904", VA = "0xDF8904")]
		[RuntimeInitializeOnLoadMethod]
		private void DomainReloadDisabledSupport()
		{
		}

		[Token(Token = "0x6001BFA")]
		[Address(RVA = "0xDF899C", Offset = "0xDF899C", VA = "0xDF899C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001BFB")]
		[Address(RVA = "0xDF8B08", Offset = "0xDF8B08", VA = "0xDF8B08")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6001BFC")]
		[Address(RVA = "0xDF89A0", Offset = "0xDF89A0", VA = "0xDF89A0")]
		public void Init()
		{
		}

		[Token(Token = "0x6001BFD")]
		[Address(RVA = "0xDF8CB8", Offset = "0xDF8CB8", VA = "0xDF8CB8")]
		private void Start()
		{
		}

		[Token(Token = "0x6001BFE")]
		[Address(RVA = "0xDF8C44", Offset = "0xDF8C44", VA = "0xDF8C44")]
		[IteratorStateMachine(typeof(<DoRayCast>d__38))]
		private IEnumerator DoRayCast()
		{
			return null;
		}

		[Token(Token = "0x6001BFF")]
		[Address(RVA = "0xDF8FB4", Offset = "0xDF8FB4", VA = "0xDF8FB4")]
		private EventSystem CreateEventSystem()
		{
			return null;
		}

		[Token(Token = "0x6001C00")]
		[Address(RVA = "0xDF915C", Offset = "0xDF915C", VA = "0xDF915C")]
		private void SwitchCollider(Collider newCollider)
		{
		}

		[Token(Token = "0x6001C01")]
		[Address(RVA = "0xDF9440", Offset = "0xDF9440", VA = "0xDF9440")]
		private bool CanInteract()
		{
			return default(bool);
		}

		[Token(Token = "0x6001C02")]
		[Address(RVA = "0xDF9548", Offset = "0xDF9548", VA = "0xDF9548")]
		private void OnMouseDown()
		{
		}

		[Token(Token = "0x6001C03")]
		[Address(RVA = "0xDF98D4", Offset = "0xDF98D4", VA = "0xDF98D4")]
		private void OnMouseEnter()
		{
		}

		[Token(Token = "0x6001C04")]
		[Address(RVA = "0xDF9914", Offset = "0xDF9914", VA = "0xDF9914")]
		private void OnMouseExit()
		{
		}

		[Token(Token = "0x6001C05")]
		[Address(RVA = "0xDF9214", Offset = "0xDF9214", VA = "0xDF9214")]
		private void Highlight(bool state)
		{
		}

		[Token(Token = "0x6001C06")]
		[Address(RVA = "0xDF95A8", Offset = "0xDF95A8", VA = "0xDF95A8")]
		private void ToggleSelection()
		{
		}

		[Token(Token = "0x6001C07")]
		[Address(RVA = "0xDF9954", Offset = "0xDF9954", VA = "0xDF9954")]
		public void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6001C08")]
		[Address(RVA = "0xDF99D0", Offset = "0xDF99D0", VA = "0xDF99D0")]
		public void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6001C09")]
		[Address(RVA = "0xDF9A4C", Offset = "0xDF9A4C", VA = "0xDF9A4C")]
		public HighlightTrigger()
		{
		}
	}
	[Token(Token = "0x2000573")]
	public static class InputProxy
	{
		[Token(Token = "0x4001C45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Vector3 lastPointerPosition;

		[Token(Token = "0x17000384")]
		public static Vector3 mousePosition
		{
			[Token(Token = "0x6001C11")]
			[Address(RVA = "0xDF6628", Offset = "0xDF6628", VA = "0xDF6628")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000385")]
		public static int touchCount
		{
			[Token(Token = "0x6001C13")]
			[Address(RVA = "0xDF7098", Offset = "0xDF7098", VA = "0xDF7098")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001C10")]
		[Address(RVA = "0xDF57A0", Offset = "0xDF57A0", VA = "0xDF57A0")]
		public static void Init()
		{
		}

		[Token(Token = "0x6001C12")]
		[Address(RVA = "0xDF677C", Offset = "0xDF677C", VA = "0xDF677C")]
		public static bool GetMouseButtonDown(int buttonIndex)
		{
			return default(bool);
		}

		[Token(Token = "0x6001C14")]
		[Address(RVA = "0xDF70FC", Offset = "0xDF70FC", VA = "0xDF70FC")]
		public static int GetFingerIdFromTouch(int touchIndex)
		{
			return default(int);
		}

		[Token(Token = "0x6001C15")]
		[Address(RVA = "0xDFA310", Offset = "0xDFA310", VA = "0xDFA310")]
		public static bool GetKeyDown(string name)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000574")]
	public static class ShaderParams
	{
		[Token(Token = "0x4001C46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static int Cull;

		[Token(Token = "0x4001C47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static int BlurScale;

		[Token(Token = "0x4001C48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static int Speed;

		[Token(Token = "0x4001C49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public static int ConstantWidth;

		[Token(Token = "0x4001C4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static int CutOff;

		[Token(Token = "0x4001C4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public static int ZTest;

		[Token(Token = "0x4001C4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static int Flip;

		[Token(Token = "0x4001C4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public static int Debug;

		[Token(Token = "0x4001C4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static int Color;

		[Token(Token = "0x4001C4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public static int MainTex;

		[Token(Token = "0x4001C50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static int BaseMap;

		[Token(Token = "0x4001C51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public static int BaseMapST;

		[Token(Token = "0x4001C52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static int AspectRatio;

		[Token(Token = "0x4001C53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public static int BlendSrc;

		[Token(Token = "0x4001C54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static int BlendDst;

		[Token(Token = "0x4001C55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public static int OutlineWidth;

		[Token(Token = "0x4001C56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public static int OutlineZTest;

		[Token(Token = "0x4001C57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public static int OutlineDirection;

		[Token(Token = "0x4001C58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static int OutlineColor;

		[Token(Token = "0x4001C59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public static int GlowZTest;

		[Token(Token = "0x4001C5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public static int GlowStencilComp;

		[Token(Token = "0x4001C5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public static int GlowStencilOp;

		[Token(Token = "0x4001C5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public static int GlowDirection;

		[Token(Token = "0x4001C5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public static int Glow;

		[Token(Token = "0x4001C5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public static int GlowColor;

		[Token(Token = "0x4001C5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public static int Glow2;

		[Token(Token = "0x4001C60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public static int SeeThrough;

		[Token(Token = "0x4001C61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public static int SeeThroughNoise;

		[Token(Token = "0x4001C62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public static int SeeThroughBorderWidth;

		[Token(Token = "0x4001C63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public static int SeeThroughBorderConstantWidth;

		[Token(Token = "0x4001C64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public static int SeeThroughTintColor;

		[Token(Token = "0x4001C65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public static int SeeThroughBorderColor;

		[Token(Token = "0x4001C66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public static int SeeThroughStencilRef;

		[Token(Token = "0x4001C67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public static int SeeThroughStencilComp;

		[Token(Token = "0x4001C68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public static int SeeThroughStencilPassOp;

		[Token(Token = "0x4001C69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public static int SeeThroughDepthOffset;

		[Token(Token = "0x4001C6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public static int SeeThroughMaxDepth;

		[Token(Token = "0x4001C6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public static int InnerGlowWidth;

		[Token(Token = "0x4001C6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public static int InnerGlowZTest;

		[Token(Token = "0x4001C6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public static int InnerGlowColor;

		[Token(Token = "0x4001C6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public static int OverlayData;

		[Token(Token = "0x4001C6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public static int OverlayBackColor;

		[Token(Token = "0x4001C70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public static int OverlayColor;

		[Token(Token = "0x4001C71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public static int OverlayHitPosData;

		[Token(Token = "0x4001C72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public static int OverlayHitStartTime;

		[Token(Token = "0x4001C73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public static int OverlayTexture;

		[Token(Token = "0x4001C74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public static int TargetFXRenderData;

		[Token(Token = "0x4001C75")]
		public const string SKW_ALPHACLIP = "HP_ALPHACLIP";

		[Token(Token = "0x4001C76")]
		public const string SKW_DEPTHCLIP = "HP_DEPTHCLIP";

		[Token(Token = "0x4001C77")]
		public const string SKW_DEPTH_OFFSET = "HP_DEPTH_OFFSET";

		[Token(Token = "0x4001C78")]
		public const string SKW_USES_OVERLAY_TEXTURE = "HP_USES_OVERLAY_TEXTURE";
	}
}
namespace FlatKit
{
	[Token(Token = "0x2000575")]
	public class UvScroller : MonoBehaviour
	{
		[Token(Token = "0x4001C79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Material targetMaterial;

		[Token(Token = "0x4001C7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float speedX;

		[Token(Token = "0x4001C7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float speedY;

		[Token(Token = "0x4001C7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector2 offset;

		[Token(Token = "0x4001C7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector2 initOffset;

		[Token(Token = "0x6001C17")]
		[Address(RVA = "0xDFAC40", Offset = "0xDFAC40", VA = "0xDFAC40")]
		private void Start()
		{
		}

		[Token(Token = "0x6001C18")]
		[Address(RVA = "0xDFAC7C", Offset = "0xDFAC7C", VA = "0xDFAC7C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001C19")]
		[Address(RVA = "0xDFACA0", Offset = "0xDFACA0", VA = "0xDFACA0")]
		private void Update()
		{
		}

		[Token(Token = "0x6001C1A")]
		[Address(RVA = "0xDFAD0C", Offset = "0xDFAD0C", VA = "0xDFAD0C")]
		public UvScroller()
		{
		}
	}
	[Token(Token = "0x2000576")]
	internal class BlitTexturePass : ScriptableRenderPass
	{
		[Token(Token = "0x4001C7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly string CopyEffectShaderName;

		[Token(Token = "0x4001C7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private ProfilingSampler _profilingSampler;

		[Token(Token = "0x4001C80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Material _effectMaterial;

		[Token(Token = "0x4001C81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Material _copyMaterial;

		[Token(Token = "0x4001C82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private RenderTargetHandle _temporaryColorTexture;

		[Token(Token = "0x6001C1B")]
		[Address(RVA = "0xDFAD14", Offset = "0xDFAD14", VA = "0xDFAD14")]
		public void Setup(Material effectMaterial, bool useDepth, bool useNormals, bool useColor)
		{
		}

		[Token(Token = "0x6001C1C")]
		[Address(RVA = "0xDFAEC8", Offset = "0xDFAEC8", VA = "0xDFAEC8", Slot = "5")]
		public override void OnCameraSetup(CommandBuffer cmd, ref RenderingData renderingData)
		{
		}

		[Token(Token = "0x6001C1D")]
		[Address(RVA = "0xDFAF54", Offset = "0xDFAF54", VA = "0xDFAF54", Slot = "9")]
		public override void Execute(ScriptableRenderContext context, ref RenderingData renderingData)
		{
		}

		[Token(Token = "0x6001C1E")]
		[Address(RVA = "0xDFB530", Offset = "0xDFB530", VA = "0xDFB530")]
		private static void SetSourceSize(CommandBuffer cmd, RenderTextureDescriptor desc)
		{
		}

		[Token(Token = "0x6001C1F")]
		[Address(RVA = "0xDFB5D8", Offset = "0xDFB5D8", VA = "0xDFB5D8")]
		public BlitTexturePass()
		{
		}
	}
	[Token(Token = "0x2000577")]
	public class FlatKitFog : ScriptableRendererFeature
	{
		[Token(Token = "0x4001C83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("To create new settings use 'Create > FlatKit > Fog Settings'.")]
		public FogSettings settings;

		[Token(Token = "0x4001C84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[HideInInspector]
		private Material _effectMaterial;

		[Token(Token = "0x4001C85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private BlitTexturePass _blitTexturePass;

		[Token(Token = "0x4001C86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private RenderTargetHandle _fogTexture;

		[Token(Token = "0x4001C87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Texture2D _lutDepth;

		[Token(Token = "0x4001C88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Texture2D _lutHeight;

		[Token(Token = "0x4001C89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly string FogShaderName;

		[Token(Token = "0x4001C8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly int DistanceLut;

		[Token(Token = "0x4001C8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static readonly int Near;

		[Token(Token = "0x4001C8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly int Far;

		[Token(Token = "0x4001C8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private static readonly int UseDistanceFog;

		[Token(Token = "0x4001C8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static readonly int UseDistanceFogOnSky;

		[Token(Token = "0x4001C8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private static readonly int DistanceFogIntensity;

		[Token(Token = "0x4001C90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static readonly int HeightLut;

		[Token(Token = "0x4001C91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private static readonly int LowWorldY;

		[Token(Token = "0x4001C92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static readonly int HighWorldY;

		[Token(Token = "0x4001C93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private static readonly int UseHeightFog;

		[Token(Token = "0x4001C94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static readonly int UseHeightFogOnSky;

		[Token(Token = "0x4001C95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private static readonly int HeightFogIntensity;

		[Token(Token = "0x4001C96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static readonly int DistanceHeightBlend;

		[Token(Token = "0x6001C21")]
		[Address(RVA = "0xDFB64C", Offset = "0xDFB64C", VA = "0xDFB64C", Slot = "5")]
		public override void Create()
		{
		}

		[Token(Token = "0x6001C22")]
		[Address(RVA = "0xDFB770", Offset = "0xDFB770", VA = "0xDFB770", Slot = "7")]
		public override void AddRenderPasses(ScriptableRenderer renderer, ref RenderingData renderingData)
		{
		}

		[Token(Token = "0x6001C23")]
		[Address(RVA = "0xDFBD40", Offset = "0xDFBD40", VA = "0xDFBD40", Slot = "9")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x6001C24")]
		[Address(RVA = "0xDFB888", Offset = "0xDFB888", VA = "0xDFB888")]
		private bool CreateMaterials()
		{
			return default(bool);
		}

		[Token(Token = "0x6001C25")]
		[Address(RVA = "0xDFBA0C", Offset = "0xDFBA0C", VA = "0xDFBA0C")]
		private void SetMaterialProperties()
		{
		}

		[Token(Token = "0x6001C26")]
		[Address(RVA = "0xDFBD9C", Offset = "0xDFBD9C", VA = "0xDFBD9C")]
		private void UpdateDistanceLut()
		{
		}

		[Token(Token = "0x6001C27")]
		[Address(RVA = "0xDFBFE4", Offset = "0xDFBFE4", VA = "0xDFBFE4")]
		private void UpdateHeightLut()
		{
		}

		[Token(Token = "0x6001C28")]
		[Address(RVA = "0xDFC22C", Offset = "0xDFC22C", VA = "0xDFC22C")]
		public FlatKitFog()
		{
		}
	}
	[Token(Token = "0x2000578")]
	[CreateAssetMenu(fileName = "FogSettings", menuName = "FlatKit/Fog Settings")]
	public class FogSettings : ScriptableObject
	{
		[Token(Token = "0x4001C97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Distance Fog")]
		public bool useDistance;

		[Token(Token = "0x4001C98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Gradient distanceGradient;

		[Token(Token = "0x4001C99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float near;

		[Token(Token = "0x4001C9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float far;

		[Token(Token = "0x4001C9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Range(0f, 1f)]
		public float distanceFogIntensity;

		[Token(Token = "0x4001C9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool useDistanceFogOnSky;

		[Token(Token = "0x4001C9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		[Space]
		[Header("Height Fog")]
		public bool useHeight;

		[Token(Token = "0x4001C9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Gradient heightGradient;

		[Token(Token = "0x4001C9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float low;

		[Token(Token = "0x4001CA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float high;

		[Token(Token = "0x4001CA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Range(0f, 1f)]
		public float heightFogIntensity;

		[Token(Token = "0x4001CA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool useHeightFogOnSky;

		[Token(Token = "0x4001CA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Space]
		[Range(0f, 1f)]
		[Header("Blending")]
		public float distanceHeightBlend;

		[Token(Token = "0x4001CA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Tooltip("The render stage at which the effect is applied. To exclude transparent objects, like water or UI elements, set this to \"Before Transparent\".")]
		[Space]
		[Header("Advanced settings")]
		public RenderPassEvent renderEvent;

		[Token(Token = "0x6001C2A")]
		[Address(RVA = "0xDFC500", Offset = "0xDFC500", VA = "0xDFC500")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6001C2B")]
		[Address(RVA = "0xDFC5C0", Offset = "0xDFC5C0", VA = "0xDFC5C0")]
		public FogSettings()
		{
		}
	}
	[Token(Token = "0x2000579")]
	public class FlatKitOutline : ScriptableRendererFeature
	{
		[Token(Token = "0x4001CA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("To create new settings use 'Create > FlatKit > Outline Settings'.")]
		public OutlineSettings settings;

		[Token(Token = "0x4001CA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		[SerializeField]
		private Material _effectMaterial;

		[Token(Token = "0x4001CA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private BlitTexturePass _blitTexturePass;

		[Token(Token = "0x4001CA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly string OutlineShaderName;

		[Token(Token = "0x4001CA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly int EdgeColor;

		[Token(Token = "0x4001CAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static readonly int Thickness;

		[Token(Token = "0x4001CAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly int DepthThresholdMin;

		[Token(Token = "0x4001CAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private static readonly int DepthThresholdMax;

		[Token(Token = "0x4001CAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static readonly int NormalThresholdMin;

		[Token(Token = "0x4001CAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private static readonly int NormalThresholdMax;

		[Token(Token = "0x4001CAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static readonly int ColorThresholdMin;

		[Token(Token = "0x4001CB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private static readonly int ColorThresholdMax;

		[Token(Token = "0x6001C2C")]
		[Address(RVA = "0xDFC5F4", Offset = "0xDFC5F4", VA = "0xDFC5F4", Slot = "5")]
		public override void Create()
		{
		}

		[Token(Token = "0x6001C2D")]
		[Address(RVA = "0xDFC70C", Offset = "0xDFC70C", VA = "0xDFC70C", Slot = "7")]
		public override void AddRenderPasses(ScriptableRenderer renderer, ref RenderingData renderingData)
		{
		}

		[Token(Token = "0x6001C2E")]
		[Address(RVA = "0xDFCCD4", Offset = "0xDFCCD4", VA = "0xDFCCD4", Slot = "9")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x6001C2F")]
		[Address(RVA = "0xDFC82C", Offset = "0xDFC82C", VA = "0xDFC82C")]
		private bool CreateMaterials()
		{
			return default(bool);
		}

		[Token(Token = "0x6001C30")]
		[Address(RVA = "0xDFC9B0", Offset = "0xDFC9B0", VA = "0xDFC9B0")]
		private void SetMaterialProperties()
		{
		}

		[Token(Token = "0x6001C31")]
		[Address(RVA = "0xDFCD30", Offset = "0xDFCD30", VA = "0xDFCD30")]
		public FlatKitOutline()
		{
		}
	}
	[Token(Token = "0x200057A")]
	[CreateAssetMenu(fileName = "OutlineSettings", menuName = "FlatKit/Outline Settings")]
	public class OutlineSettings : ScriptableObject
	{
		[Token(Token = "0x4001CB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Color edgeColor;

		[Token(Token = "0x4001CB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Range(0f, 5f)]
		public int thickness;

		[Token(Token = "0x4001CB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("If enabled, the line width will stay constant regardless of the rendering resolution. However, some of the lines may appear blurry.")]
		public bool resolutionInvariant;

		[Token(Token = "0x4001CB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		[Space]
		public bool useDepth;

		[Token(Token = "0x4001CB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E")]
		public bool useNormals;

		[Token(Token = "0x4001CB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F")]
		public bool useColor;

		[Token(Token = "0x4001CB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Advanced settings")]
		public float minDepthThreshold;

		[Token(Token = "0x4001CB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float maxDepthThreshold;

		[Token(Token = "0x4001CB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Space]
		public float minNormalsThreshold;

		[Token(Token = "0x4001CBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float maxNormalsThreshold;

		[Token(Token = "0x4001CBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Space]
		public float minColorThreshold;

		[Token(Token = "0x4001CBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float maxColorThreshold;

		[Token(Token = "0x4001CBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Space]
		[Tooltip("The render stage at which the effect is applied. To exclude transparent objects, like water or UI elements, set this to \"Before Transparent\".")]
		public RenderPassEvent renderEvent;

		[Token(Token = "0x4001CBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Space]
		public bool outlineOnly;

		[Token(Token = "0x6001C33")]
		[Address(RVA = "0xDFCF28", Offset = "0xDFCF28", VA = "0xDFCF28")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6001C34")]
		[Address(RVA = "0xDFD024", Offset = "0xDFD024", VA = "0xDFD024")]
		public OutlineSettings()
		{
		}
	}
	[Token(Token = "0x200057B")]
	public class Buoyancy : MonoBehaviour
	{
		[Token(Token = "0x4001CBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The object that contains a Water material.")]
		public Transform water;

		[Token(Token = "0x4001CC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Range of probing wave height for buoyancy rotation.")]
		[Space]
		public float size;

		[Token(Token = "0x4001CC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("Max height of buoyancy going up and down.")]
		public float amplitude;

		[Token(Token = "0x4001CC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Optionally provide a separate material to get the wave parameters.")]
		[Space]
		public Material overrideWaterMaterial;

		[Token(Token = "0x4001CC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Material _material;

		[Token(Token = "0x4001CC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float _speed;

		[Token(Token = "0x4001CC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float _amplitude;

		[Token(Token = "0x4001CC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float _frequency;

		[Token(Token = "0x4001CC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float _direction;

		[Token(Token = "0x4001CC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3 _originalPosition;

		[Token(Token = "0x6001C35")]
		[Address(RVA = "0xDFD058", Offset = "0xDFD058", VA = "0xDFD058")]
		private void Start()
		{
		}

		[Token(Token = "0x6001C36")]
		[Address(RVA = "0xDFD1EC", Offset = "0xDFD1EC", VA = "0xDFD1EC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001C37")]
		[Address(RVA = "0xDFD570", Offset = "0xDFD570", VA = "0xDFD570")]
		private Vector2 GradientNoiseDir(Vector2 p)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001C38")]
		[Address(RVA = "0xDFD6C8", Offset = "0xDFD6C8", VA = "0xDFD6C8")]
		private float GradientNoise(Vector2 p)
		{
			return default(float);
		}

		[Token(Token = "0x6001C39")]
		[Address(RVA = "0xDFD380", Offset = "0xDFD380", VA = "0xDFD380")]
		private Vector3 GetNormalWS(Vector3 positionOS)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001C3A")]
		[Address(RVA = "0xDFD98C", Offset = "0xDFD98C", VA = "0xDFD98C")]
		private float SineWave(Vector3 positionOS, float offset)
		{
			return default(float);
		}

		[Token(Token = "0x6001C3B")]
		[Address(RVA = "0xDFD2C4", Offset = "0xDFD2C4", VA = "0xDFD2C4")]
		private float GetHeightOS(Vector3 positionOS)
		{
			return default(float);
		}

		[Token(Token = "0x6001C3C")]
		[Address(RVA = "0xDFDA7C", Offset = "0xDFDA7C", VA = "0xDFDA7C")]
		public Buoyancy()
		{
		}
	}
}
namespace CustomAttributes
{
	[Token(Token = "0x200057C")]
	[AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Property | AttributeTargets.Field, Inherited = true)]
	public class ConditionalHideAttribute : PropertyAttribute
	{
		[Token(Token = "0x4001CC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string ConditionalSourceField;

		[Token(Token = "0x4001CCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool HideInInspector;

		[Token(Token = "0x6001C3D")]
		[Address(RVA = "0xDFDA8C", Offset = "0xDFDA8C", VA = "0xDFDA8C")]
		public ConditionalHideAttribute(string conditionalSourceField)
		{
		}

		[Token(Token = "0x6001C3E")]
		[Address(RVA = "0xDFDB0C", Offset = "0xDFDB0C", VA = "0xDFDB0C")]
		public ConditionalHideAttribute(string conditionalSourceField, bool hideInInspector)
		{
		}
	}
	[Token(Token = "0x200057D")]
	[AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Property | AttributeTargets.Field, Inherited = true)]
	public class ConditionalShowAttribute : PropertyAttribute
	{
		[Token(Token = "0x4001CCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string ConditionalSourceField;

		[Token(Token = "0x4001CCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool HideInInspector;

		[Token(Token = "0x6001C3F")]
		[Address(RVA = "0xDFDB90", Offset = "0xDFDB90", VA = "0xDFDB90")]
		public ConditionalShowAttribute(string conditionalSourceField)
		{
		}

		[Token(Token = "0x6001C40")]
		[Address(RVA = "0xDFDC10", Offset = "0xDFDC10", VA = "0xDFDC10")]
		public ConditionalShowAttribute(string conditionalSourceField, bool hideInInspector)
		{
		}
	}
}
namespace Autohand
{
	[Token(Token = "0x200057E")]
	public class XRMover : MonoBehaviour
	{
		[Token(Token = "0x4001CCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("TEMP DEMO SCRIPT - Advanced script coming soon")]
		[Header("Controllers")]
		public XRHandControllerLink moverController;

		[Token(Token = "0x4001CCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public XRHandControllerLink turningController;

		[Token(Token = "0x4001CCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Common2DAxis moverAxis;

		[Token(Token = "0x4001CD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Body")]
		public GameObject cam;

		[Token(Token = "0x4001CD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private CharacterController controller;

		[Token(Token = "0x4001CD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private CapsuleCollider collisionCapsule;

		[Token(Token = "0x4001CD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Header("Settings")]
		public bool snapTurning;

		[Token(Token = "0x4001CD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float turnAngle;

		[Token(Token = "0x4001CD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float speed;

		[Token(Token = "0x4001CD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float gravity;

		[Token(Token = "0x4001CD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float currentGravity;

		[Token(Token = "0x4001CD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private bool axisReset;

		[Token(Token = "0x4001CD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 moveAxis;

		[Token(Token = "0x4001CDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector2 turningAxis;

		[Token(Token = "0x6001C41")]
		[Address(RVA = "0xDFDC94", Offset = "0xDFDC94", VA = "0xDFDC94")]
		public void LateUpdate()
		{
		}

		[Token(Token = "0x6001C42")]
		[Address(RVA = "0xDFE070", Offset = "0xDFE070", VA = "0xDFE070")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001C43")]
		[Address(RVA = "0xDFDCF0", Offset = "0xDFDCF0", VA = "0xDFDCF0")]
		public void Move(float x, float y, float z)
		{
		}

		[Token(Token = "0x6001C44")]
		[Address(RVA = "0xDFDDFC", Offset = "0xDFDDFC", VA = "0xDFDDFC")]
		private void Turning()
		{
		}

		[Token(Token = "0x6001C45")]
		[Address(RVA = "0xDFE114", Offset = "0xDFE114", VA = "0xDFE114")]
		public XRMover()
		{
		}
	}
	[Token(Token = "0x200057F")]
	public class AutoHeaderAttribute : PropertyAttribute
	{
		[Token(Token = "0x4001CDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int count;

		[Token(Token = "0x4001CDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int depth;

		[Token(Token = "0x4001CDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string label;

		[Token(Token = "0x4001CDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string tooltip;

		[Token(Token = "0x4001CDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string toggleBool;

		[Token(Token = "0x4001CE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Type type;

		[Token(Token = "0x6001C46")]
		[Address(RVA = "0xDFE130", Offset = "0xDFE130", VA = "0xDFE130")]
		public AutoHeaderAttribute(string label, int count = 0, int depth = 0)
		{
		}

		[Token(Token = "0x6001C47")]
		[Address(RVA = "0xDFE174", Offset = "0xDFE174", VA = "0xDFE174")]
		public AutoHeaderAttribute(string label, string tooltip, string toggleName, Type classType, int count = 0, int depth = 0)
		{
		}
	}
	[Token(Token = "0x2000580")]
	public class AutoLineAttribute : PropertyAttribute
	{
		[Token(Token = "0x4001CE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int count;

		[Token(Token = "0x4001CE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int depth;

		[Token(Token = "0x4001CE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string tooltip;

		[Token(Token = "0x4001CE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string toggleBool;

		[Token(Token = "0x4001CE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Type type;

		[Token(Token = "0x6001C48")]
		[Address(RVA = "0xDFE1CC", Offset = "0xDFE1CC", VA = "0xDFE1CC")]
		public AutoLineAttribute(int count = 0, int depth = 0)
		{
		}

		[Token(Token = "0x6001C49")]
		[Address(RVA = "0xDFE1F8", Offset = "0xDFE1F8", VA = "0xDFE1F8")]
		public AutoLineAttribute(string tooltip, string toggleName, Type classType, int count = 0, int depth = 0)
		{
		}
	}
	[Token(Token = "0x2000581")]
	public class AutoSmallHeaderAttribute : PropertyAttribute
	{
		[Token(Token = "0x4001CE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int count;

		[Token(Token = "0x4001CE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int depth;

		[Token(Token = "0x4001CE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string label;

		[Token(Token = "0x4001CE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string tooltip;

		[Token(Token = "0x4001CEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string toggleBool;

		[Token(Token = "0x4001CEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Type type;

		[Token(Token = "0x6001C4A")]
		[Address(RVA = "0xDFE23C", Offset = "0xDFE23C", VA = "0xDFE23C")]
		public AutoSmallHeaderAttribute(string label, int count = 0, int depth = 0)
		{
		}

		[Token(Token = "0x6001C4B")]
		[Address(RVA = "0xDFE280", Offset = "0xDFE280", VA = "0xDFE280")]
		public AutoSmallHeaderAttribute(string label, string tooltip, string toggleName, Type classType, int count = 0, int depth = 0)
		{
		}
	}
	[Token(Token = "0x2000582")]
	public class AutoToggleHeaderAttribute : PropertyAttribute
	{
		[Token(Token = "0x4001CEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int count;

		[Token(Token = "0x4001CED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int depth;

		[Token(Token = "0x4001CEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string label;

		[Token(Token = "0x4001CEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string tooltip;

		[Token(Token = "0x4001CF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string toggleBool;

		[Token(Token = "0x4001CF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Type type;

		[Token(Token = "0x6001C4C")]
		[Address(RVA = "0xDFE2D8", Offset = "0xDFE2D8", VA = "0xDFE2D8")]
		public AutoToggleHeaderAttribute(string label, int count = 0, int depth = 0)
		{
		}

		[Token(Token = "0x6001C4D")]
		[Address(RVA = "0xDFE31C", Offset = "0xDFE31C", VA = "0xDFE31C")]
		public AutoToggleHeaderAttribute(string label, string tooltip, string toggleName, Type classType, int count = 0, int depth = 0)
		{
		}
	}
	[Token(Token = "0x2000583")]
	public static class AutoHandExtensions
	{
		[Token(Token = "0x4001CF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Transform _transformRuler;

		[Token(Token = "0x4001CF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Transform _transformRulerChild;

		[Token(Token = "0x4001CF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static Transform _transformParent;

		[Token(Token = "0x17000386")]
		public static Transform transformRuler
		{
			[Token(Token = "0x6001C4E")]
			[Address(RVA = "0xDFE374", Offset = "0xDFE374", VA = "0xDFE374")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000387")]
		public static Transform transformRulerChild
		{
			[Token(Token = "0x6001C4F")]
			[Address(RVA = "0xDFE6C8", Offset = "0xDFE6C8", VA = "0xDFE6C8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000388")]
		public static Transform transformParent
		{
			[Token(Token = "0x6001C50")]
			[Address(RVA = "0xDFE5B0", Offset = "0xDFE5B0", VA = "0xDFE5B0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001C51")]
		[Address(RVA = "0xDFE918", Offset = "0xDFE918", VA = "0xDFE918")]
		public static void RotateAround(this Transform target, Transform center, Quaternion deltaRotation)
		{
		}

		[Token(Token = "0x6001C52")]
		[Address(RVA = "0xDFEB30", Offset = "0xDFEB30", VA = "0xDFEB30")]
		public static float Round(this float value, int digits)
		{
			return default(float);
		}

		[Token(Token = "0x6001C53")]
		[Address(RVA = "0xDFEBD4", Offset = "0xDFEBD4", VA = "0xDFEBD4")]
		public static bool HasGrabbable(this Hand hand, GameObject obj, out Grabbable grabbable)
		{
			return default(bool);
		}

		[Token(Token = "0x6001C54")]
		[Address(RVA = "0xDFEBE0", Offset = "0xDFEBE0", VA = "0xDFEBE0")]
		public static bool HasGrabbable(this GameObject obj, out Grabbable grabbable)
		{
			return default(bool);
		}

		[Token(Token = "0x6001C55")]
		public static T GetCopyOf<T>(this Component comp, T other) where T : Component
		{
			return null;
		}

		[Token(Token = "0x6001C56")]
		public static bool CanGetComponent<T>(this Component componentClass, out T component)
		{
			return default(bool);
		}

		[Token(Token = "0x6001C57")]
		public static bool CanGetComponent<T>(this GameObject componentClass, out T component)
		{
			return default(bool);
		}

		[Token(Token = "0x6001C58")]
		[Address(RVA = "0xDFECDC", Offset = "0xDFECDC", VA = "0xDFECDC")]
		public static LayerMask GetPhysicsLayerMask(int currentLayer)
		{
			return default(LayerMask);
		}
	}
	[Token(Token = "0x2000584")]
	public class HandTouchButton : MonoBehaviour
	{
		[Token(Token = "0x4001CF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideIf("startUnpress")]
		public bool startPress;

		[Token(Token = "0x4001CF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[HideIf("startPress")]
		public bool startUnpress;

		[Token(Token = "0x4001CF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HandTouchEvent touchEvent;

		[Token(Token = "0x4001CF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform button;

		[Token(Token = "0x4001CF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 pressOffset;

		[Token(Token = "0x4001CFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Color unpressColor;

		[Token(Token = "0x4001CFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public Color pressColor;

		[Token(Token = "0x4001CFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public bool toggle;

		[Token(Token = "0x4001CFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Space]
		public UnityHandEvent OnPressed;

		[Token(Token = "0x4001CFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public UnityHandEvent OnUnpressed;

		[Token(Token = "0x4001CFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool pressed;

		[Token(Token = "0x6001C59")]
		[Address(RVA = "0xDFED44", Offset = "0xDFED44", VA = "0xDFED44")]
		private void Start()
		{
		}

		[Token(Token = "0x6001C5A")]
		[Address(RVA = "0xDFEF24", Offset = "0xDFEF24", VA = "0xDFEF24")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001C5B")]
		[Address(RVA = "0xDFF088", Offset = "0xDFF088", VA = "0xDFF088")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001C5C")]
		[Address(RVA = "0xDFF1EC", Offset = "0xDFF1EC", VA = "0xDFF1EC")]
		private void OnTouch(Hand hand)
		{
		}

		[Token(Token = "0x6001C5D")]
		[Address(RVA = "0xDFF20C", Offset = "0xDFF20C", VA = "0xDFF20C")]
		private void OnUntouch(Hand hand)
		{
		}

		[Token(Token = "0x6001C5E")]
		[Address(RVA = "0xDFED68", Offset = "0xDFED68", VA = "0xDFED68")]
		private void PressButton(Hand hand)
		{
		}

		[Token(Token = "0x6001C5F")]
		[Address(RVA = "0xDFEE48", Offset = "0xDFEE48", VA = "0xDFEE48")]
		private void ReleaseButton(Hand hand)
		{
		}

		[Token(Token = "0x6001C60")]
		[Address(RVA = "0xDFF224", Offset = "0xDFF224", VA = "0xDFF224")]
		public HandTouchButton()
		{
		}
	}
	[Token(Token = "0x2000585")]
	public class PhysicsGadgetButton : PhysicsGadgetConfigurableLimitReader
	{
		[Token(Token = "0x4001D00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private bool pressed;

		[Token(Token = "0x4001D01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("The percentage (0-1) from the required value needed to call the event, if threshold is 0.1 OnPressed will be called at 0.9, and OnUnpressed at 0.1")]
		[Min(0.01f)]
		public float threshold;

		[Token(Token = "0x4001D02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool lockOnPressed;

		[Token(Token = "0x4001D03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Space]
		public UnityEvent OnPressed;

		[Token(Token = "0x4001D04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public UnityEvent OnUnpressed;

		[Token(Token = "0x4001D05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 startPos;

		[Token(Token = "0x4001D06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector3 pressedPos;

		[Token(Token = "0x4001D07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float pressedValue;

		[Token(Token = "0x6001C61")]
		[Address(RVA = "0xDFF240", Offset = "0xDFF240", VA = "0xDFF240")]
		protected new void Start()
		{
		}

		[Token(Token = "0x6001C62")]
		[Address(RVA = "0xDFF384", Offset = "0xDFF384", VA = "0xDFF384")]
		protected void FixedUpdate()
		{
		}

		[Token(Token = "0x6001C63")]
		[Address(RVA = "0xDFF5EC", Offset = "0xDFF5EC", VA = "0xDFF5EC")]
		public void Pressed()
		{
		}

		[Token(Token = "0x6001C64")]
		[Address(RVA = "0xDFF644", Offset = "0xDFF644", VA = "0xDFF644")]
		public void Unpressed()
		{
		}

		[Token(Token = "0x6001C65")]
		[Address(RVA = "0xDFF660", Offset = "0xDFF660", VA = "0xDFF660")]
		public void Unlock()
		{
		}

		[Token(Token = "0x6001C66")]
		[Address(RVA = "0xDFF6BC", Offset = "0xDFF6BC", VA = "0xDFF6BC")]
		public PhysicsGadgetButton()
		{
		}
	}
	[Token(Token = "0x2000586")]
	[RequireComponent(typeof(ConfigurableJoint))]
	public class PhysicsGadgetConfigurableLimitReader : MonoBehaviour
	{
		[Token(Token = "0x4001D08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool invertValue;

		[Token(Token = "0x4001D09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("For objects slightly off center. \nThe minimum abs value required to return a value nonzero value\n - if playRange is 0.1, you have to move the gadget 10% to get a result")]
		public float playRange;

		[Token(Token = "0x4001D0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected ConfigurableJoint joint;

		[Token(Token = "0x4001D0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected Vector3 axisPos;

		[Token(Token = "0x4001D0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float value;

		[Token(Token = "0x4001D0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 limitAxis;

		[Token(Token = "0x6001C67")]
		[Address(RVA = "0xDFF278", Offset = "0xDFF278", VA = "0xDFF278", Slot = "4")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6001C68")]
		[Address(RVA = "0xDFF474", Offset = "0xDFF474", VA = "0xDFF474")]
		public float GetValue()
		{
			return default(float);
		}

		[Token(Token = "0x6001C69")]
		[Address(RVA = "0xDFF6F0", Offset = "0xDFF6F0", VA = "0xDFF6F0")]
		public ConfigurableJoint GetJoint()
		{
			return null;
		}

		[Token(Token = "0x6001C6A")]
		[Address(RVA = "0xDFF6DC", Offset = "0xDFF6DC", VA = "0xDFF6DC")]
		public PhysicsGadgetConfigurableLimitReader()
		{
		}
	}
	[Token(Token = "0x2000587")]
	[RequireComponent(typeof(HingeJoint))]
	public class PhysicsGadgetHingeAngleReader : MonoBehaviour
	{
		[Token(Token = "0x4001D0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool invertValue;

		[Token(Token = "0x4001D0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("For objects slightly off center. \nThe minimum abs value required to return a value nonzero value\n - if playRange is 0.1, you have to move the gadget 10% to get a result")]
		public float playRange;

		[Token(Token = "0x4001D10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private HingeJoint joint;

		[Token(Token = "0x4001D11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected float value;

		[Token(Token = "0x4001D12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Quaternion startRot;

		[Token(Token = "0x4001D13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Quaternion deltaParentRotation;

		[Token(Token = "0x6001C6B")]
		[Address(RVA = "0xDFF6F8", Offset = "0xDFF6F8", VA = "0xDFF6F8", Slot = "4")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6001C6C")]
		[Address(RVA = "0xDFF778", Offset = "0xDFF778", VA = "0xDFF778")]
		public float GetValue()
		{
			return default(float);
		}

		[Token(Token = "0x6001C6D")]
		[Address(RVA = "0xDFF870", Offset = "0xDFF870", VA = "0xDFF870")]
		public HingeJoint GetJoint()
		{
			return null;
		}

		[Token(Token = "0x6001C6E")]
		[Address(RVA = "0xDFF878", Offset = "0xDFF878", VA = "0xDFF878")]
		public PhysicsGadgetHingeAngleReader()
		{
		}
	}
	[Token(Token = "0x2000588")]
	[RequireComponent(typeof(ConfigurableJoint))]
	public class PhysicsGadgetJoystick : MonoBehaviour
	{
		[Token(Token = "0x4001D14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ConfigurableJoint joint;

		[Token(Token = "0x4001D15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool invertX;

		[Token(Token = "0x4001D16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool invertY;

		[Token(Token = "0x4001D17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("For objects slightly off center. \nThe minimum abs value required to return a value nonzero value\n - if playRange is 0.1, you have to move the gadget 10% to get a result")]
		public float playRange;

		[Token(Token = "0x4001D18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector2 xRange;

		[Token(Token = "0x4001D19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector2 zRange;

		[Token(Token = "0x4001D1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector2 value;

		[Token(Token = "0x4001D1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 jointRotation;

		[Token(Token = "0x4001D1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Rigidbody body;

		[Token(Token = "0x6001C6F")]
		[Address(RVA = "0xDFF88C", Offset = "0xDFF88C", VA = "0xDFF88C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001C70")]
		[Address(RVA = "0xDFF91C", Offset = "0xDFF91C", VA = "0xDFF91C")]
		public void FixedUpdate()
		{
		}

		[Token(Token = "0x6001C71")]
		[Address(RVA = "0xDFFA24", Offset = "0xDFFA24", VA = "0xDFFA24")]
		public Vector2 GetValue()
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001C72")]
		[Address(RVA = "0xDFFAA0", Offset = "0xDFFAA0", VA = "0xDFFAA0")]
		public PhysicsGadgetJoystick()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000589")]
	public struct StepEvent
	{
		[Token(Token = "0x4001D1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int step;

		[Token(Token = "0x4001D1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public UnityEvent OnStepEnter;

		[Token(Token = "0x4001D1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public UnityEvent OnStepExit;
	}
	[Token(Token = "0x200058A")]
	public class PhysicsGadgetLever : PhysicsGadgetHingeAngleReader
	{
		[Token(Token = "0x4001D20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Min(0.01f)]
		[Tooltip("The percentage (0-1) from the required value needed to call the event, if threshold is 0.1 OnMax will be called at 0.9, OnMin at -0.9, and OnMiddle at -0.1 or 0.1")]
		public float threshold;

		[Token(Token = "0x4001D21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Min(0f)]
		public int stepCount;

		[Token(Token = "0x4001D22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public int startStep;

		[Token(Token = "0x4001D23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int prevStepCount;

		[Token(Token = "0x4001D24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public UnityEvent OnMax;

		[Token(Token = "0x4001D25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public UnityEvent OnMid;

		[Token(Token = "0x4001D26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public UnityEvent OnMin;

		[Token(Token = "0x4001D27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public StepEvent[] stepEvents;

		[Token(Token = "0x4001D28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private bool min;

		[Token(Token = "0x4001D29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
		private bool max;

		[Token(Token = "0x4001D2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x82")]
		private bool mid;

		[Token(Token = "0x4001D2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private int currStep;

		[Token(Token = "0x4001D2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private int prevStep;

		[Token(Token = "0x4001D2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float minimum;

		[Token(Token = "0x4001D2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float maximum;

		[Token(Token = "0x4001D2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float[] stepMarkers;

		[Token(Token = "0x6001C73")]
		[Address(RVA = "0xDFFAB4", Offset = "0xDFFAB4", VA = "0xDFFAB4")]
		protected void FixedUpdate()
		{
		}

		[Token(Token = "0x6001C74")]
		[Address(RVA = "0xDFFC3C", Offset = "0xDFFC3C", VA = "0xDFFC3C", Slot = "4")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6001C75")]
		[Address(RVA = "0xDFFF58", Offset = "0xDFFF58", VA = "0xDFFF58")]
		private void Update()
		{
		}

		[Token(Token = "0x6001C76")]
		[Address(RVA = "0xDFFF5C", Offset = "0xDFFF5C", VA = "0xDFFF5C")]
		private void AdjustStep()
		{
		}

		[Token(Token = "0x6001C77")]
		[Address(RVA = "0xDFFC78", Offset = "0xDFFC78", VA = "0xDFFC78")]
		private bool FindSteps()
		{
			return default(bool);
		}

		[Token(Token = "0x6001C78")]
		[Address(RVA = "0xDFFDDC", Offset = "0xDFFDDC", VA = "0xDFFDDC")]
		public void SetSpring(int step)
		{
		}

		[Token(Token = "0x6001C79")]
		[Address(RVA = "0xE00068", Offset = "0xE00068", VA = "0xE00068")]
		public void SetSpring(float stepRotation)
		{
		}

		[Token(Token = "0x6001C7A")]
		[Address(RVA = "0xDFFF90", Offset = "0xDFFF90", VA = "0xDFFF90")]
		private float FindCurrentStep()
		{
			return default(float);
		}

		[Token(Token = "0x6001C7B")]
		[Address(RVA = "0xE000A8", Offset = "0xE000A8", VA = "0xE000A8")]
		private float GetStep()
		{
			return default(float);
		}

		[Token(Token = "0x6001C7C")]
		[Address(RVA = "0xE000CC", Offset = "0xE000CC", VA = "0xE000CC")]
		private float GetRange()
		{
			return default(float);
		}

		[Token(Token = "0x6001C7D")]
		[Address(RVA = "0xE000E8", Offset = "0xE000E8", VA = "0xE000E8")]
		private float GetMinimumStep(int index)
		{
			return default(float);
		}

		[Token(Token = "0x6001C7E")]
		[Address(RVA = "0xE00144", Offset = "0xE00144", VA = "0xE00144")]
		private float GetMaximumStep(int index)
		{
			return default(float);
		}

		[Token(Token = "0x6001C7F")]
		[Address(RVA = "0xDFFBD4", Offset = "0xDFFBD4", VA = "0xDFFBD4")]
		private void Max()
		{
		}

		[Token(Token = "0x6001C80")]
		[Address(RVA = "0xDFFC18", Offset = "0xDFFC18", VA = "0xDFFC18")]
		private void Mid()
		{
		}

		[Token(Token = "0x6001C81")]
		[Address(RVA = "0xDFFBF4", Offset = "0xDFFBF4", VA = "0xDFFBF4")]
		private void Min()
		{
		}

		[Token(Token = "0x6001C82")]
		[Address(RVA = "0xE001A0", Offset = "0xE001A0", VA = "0xE001A0")]
		private void Step()
		{
		}

		[Token(Token = "0x6001C83")]
		[Address(RVA = "0xE0027C", Offset = "0xE0027C", VA = "0xE0027C")]
		public PhysicsGadgetLever()
		{
		}
	}
	[Token(Token = "0x200058B")]
	public class PhysicsGadgetSlider : PhysicsGadgetConfigurableLimitReader
	{
		[Token(Token = "0x4001D30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Min(0.01f)]
		[Tooltip("The percentage (0-1) from the required value needed to call the event, if threshold is 0.1 OnMax will be called at 0.9, OnMin at -0.9, and OnMiddle at -0.1 or 0.1")]
		public float threshold;

		[Token(Token = "0x4001D31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Min(0f)]
		public int stepCount;

		[Token(Token = "0x4001D32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public int startStep;

		[Token(Token = "0x4001D33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int prevStepCount;

		[Token(Token = "0x4001D34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public UnityEvent OnMax;

		[Token(Token = "0x4001D35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public UnityEvent OnMid;

		[Token(Token = "0x4001D36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public UnityEvent OnMin;

		[Token(Token = "0x4001D37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public StepEvent[] stepEvents;

		[Token(Token = "0x4001D38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private bool min;

		[Token(Token = "0x4001D39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
		private bool max;

		[Token(Token = "0x4001D3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7A")]
		private bool mid;

		[Token(Token = "0x4001D3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private int currStep;

		[Token(Token = "0x4001D3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int prevStep;

		[Token(Token = "0x4001D3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private float minimum;

		[Token(Token = "0x4001D3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float maximum;

		[Token(Token = "0x4001D3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float[] stepMarkers;

		[Token(Token = "0x6001C84")]
		[Address(RVA = "0xE002AC", Offset = "0xE002AC", VA = "0xE002AC")]
		protected void FixedUpdate()
		{
		}

		[Token(Token = "0x6001C85")]
		[Address(RVA = "0xE00434", Offset = "0xE00434", VA = "0xE00434", Slot = "4")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6001C86")]
		[Address(RVA = "0xE006D4", Offset = "0xE006D4", VA = "0xE006D4")]
		private void Update()
		{
		}

		[Token(Token = "0x6001C87")]
		[Address(RVA = "0xE006D8", Offset = "0xE006D8", VA = "0xE006D8")]
		private void AdjustStep()
		{
		}

		[Token(Token = "0x6001C88")]
		[Address(RVA = "0xE00470", Offset = "0xE00470", VA = "0xE00470")]
		private bool FindSteps()
		{
			return default(bool);
		}

		[Token(Token = "0x6001C89")]
		[Address(RVA = "0xE005B4", Offset = "0xE005B4", VA = "0xE005B4")]
		public void SetSpring(int step)
		{
		}

		[Token(Token = "0x6001C8A")]
		[Address(RVA = "0xE007DC", Offset = "0xE007DC", VA = "0xE007DC")]
		public void SetSpring(float stepRotation)
		{
		}

		[Token(Token = "0x6001C8B")]
		[Address(RVA = "0xE0070C", Offset = "0xE0070C", VA = "0xE0070C")]
		private float FindCurrentStep()
		{
			return default(float);
		}

		[Token(Token = "0x6001C8C")]
		[Address(RVA = "0xE00874", Offset = "0xE00874", VA = "0xE00874")]
		private float GetStep()
		{
			return default(float);
		}

		[Token(Token = "0x6001C8D")]
		[Address(RVA = "0xE00898", Offset = "0xE00898", VA = "0xE00898")]
		private float GetScalar()
		{
			return default(float);
		}

		[Token(Token = "0x6001C8E")]
		[Address(RVA = "0xE008AC", Offset = "0xE008AC", VA = "0xE008AC")]
		private float GetMinimumStep(int index)
		{
			return default(float);
		}

		[Token(Token = "0x6001C8F")]
		[Address(RVA = "0xE00908", Offset = "0xE00908", VA = "0xE00908")]
		private float GetMaximumStep(int index)
		{
			return default(float);
		}

		[Token(Token = "0x6001C90")]
		[Address(RVA = "0xE003CC", Offset = "0xE003CC", VA = "0xE003CC")]
		private void Max()
		{
		}

		[Token(Token = "0x6001C91")]
		[Address(RVA = "0xE00410", Offset = "0xE00410", VA = "0xE00410")]
		private void Mid()
		{
		}

		[Token(Token = "0x6001C92")]
		[Address(RVA = "0xE003EC", Offset = "0xE003EC", VA = "0xE003EC")]
		private void Min()
		{
		}

		[Token(Token = "0x6001C93")]
		[Address(RVA = "0xE00964", Offset = "0xE00964", VA = "0xE00964")]
		private void Step()
		{
		}

		[Token(Token = "0x6001C94")]
		[Address(RVA = "0xE00A40", Offset = "0xE00A40", VA = "0xE00A40")]
		public PhysicsGadgetSlider()
		{
		}
	}
	[Token(Token = "0x200058C")]
	public enum DistanceGrabType
	{
		[Token(Token = "0x4001D41")]
		Velocity,
		[Token(Token = "0x4001D42")]
		Linear
	}
	[Token(Token = "0x200058D")]
	[HelpURL("https://earnestrobot.notion.site/Distance-Grabbing-19e4e8b14f00428295eca75fca752787")]
	[RequireComponent(typeof(Grabbable))]
	public class DistanceGrabbable : MonoBehaviour
	{
		[Token(Token = "0x4001D43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AutoHeader("Distance Grabbable", 0, 0)]
		public bool ignoreMe;

		[Token(Token = "0x4001D44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[Header("Pull")]
		public bool instantPull;

		[Token(Token = "0x4001D45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public DistanceGrabType grabType;

		[Token(Token = "0x4001D46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Use this to adjust the angle of the arch that the gameobject follows while shooting towards your hand.")]
		[ShowIf("grabType", DistanceGrabType.Velocity)]
		[Range(0.4f, 1.1f)]
		public float archMultiplier;

		[Token(Token = "0x4001D47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("Slow down or speed up gravitation to your liking.")]
		[ShowIf("grabType", DistanceGrabType.Velocity)]
		public float gravitationVelocity;

		[Token(Token = "0x4001D48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("This enables rotation which makes the gameobject orient to the rotation of you hand as it moves through the air. All below rotation variables have no use when this is false.")]
		[ShowIf("grabType", DistanceGrabType.Velocity)]
		[Header("Rotation")]
		public bool rotate;

		[Token(Token = "0x4001D49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("Speed that the object orients to the rotation of your hand.")]
		[ShowIf("grabType", DistanceGrabType.Velocity)]
		public float rotationSpeed;

		[Token(Token = "0x4001D4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AutoToggleHeader("Enable Highlighting", 0, 0)]
		[Tooltip("Whether or not to ignore all highlights including default highlights on HandPointGrab")]
		public bool ignoreHighlights;

		[Token(Token = "0x4001D4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[EnableIf("ignoreHighlights")]
		[Tooltip("Highlight targeted material to use - defaults to HandPointGrab materials if none")]
		public Material targetedMaterial;

		[Token(Token = "0x4001D4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Highlight selected material to use - defaults to HandPointGrab materials if none")]
		[EnableIf("ignoreHighlights")]
		public Material selectedMaterial;

		[Token(Token = "0x4001D4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AutoToggleHeader("Show Events", 0, 0)]
		public bool showEvents;

		[Token(Token = "0x4001D4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[ShowIf("showEvents")]
		public UnityHandGrabEvent OnPull;

		[Token(Token = "0x4001D4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Called when the object has been targeted/aimed at by the pointer")]
		[Space]
		[ShowIf("showEvents")]
		public UnityHandGrabEvent StartTargeting;

		[Token(Token = "0x4001D50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[ShowIf("showEvents")]
		public UnityHandGrabEvent StopTargeting;

		[Token(Token = "0x4001D51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Space]
		[Tooltip("Called when the object has been selected before being pulled or flicked")]
		[ShowIf("showEvents")]
		public UnityHandGrabEvent StartSelecting;

		[Token(Token = "0x4001D52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[ShowIf("showEvents")]
		public UnityHandGrabEvent StopSelecting;

		[Token(Token = "0x4001D53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public HandGrabEvent OnPullCanceled;

		[Token(Token = "0x4001D54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		internal Grabbable grabbable;

		[Token(Token = "0x4001D55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Transform target;

		[Token(Token = "0x4001D56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector3 calculatedNecessaryVelocity;

		[Token(Token = "0x4001D57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private bool gravitationEnabled;

		[Token(Token = "0x4001D58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9D")]
		private bool gravitationMethodBegun;

		[Token(Token = "0x4001D59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9E")]
		private bool pullStarted;

		[Token(Token = "0x4001D5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Rigidbody body;

		[Token(Token = "0x4001D5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private float timePassedSincePull;

		[Token(Token = "0x4001D5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private Vector3 lastGravitationVelocity;

		[Token(Token = "0x6001C95")]
		[Address(RVA = "0xE00A78", Offset = "0xE00A78", VA = "0xE00A78")]
		private void Start()
		{
		}

		[Token(Token = "0x6001C96")]
		[Address(RVA = "0xE00BA8", Offset = "0xE00BA8", VA = "0xE00BA8")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001C97")]
		[Address(RVA = "0xE00D2C", Offset = "0xE00D2C", VA = "0xE00D2C")]
		private void FollowHandRotation()
		{
		}

		[Token(Token = "0x6001C98")]
		[Address(RVA = "0xE00E0C", Offset = "0xE00E0C", VA = "0xE00E0C")]
		private void GravitateTowardsHand()
		{
		}

		[Token(Token = "0x6001C99")]
		[Address(RVA = "0xE00C64", Offset = "0xE00C64", VA = "0xE00C64")]
		private void InitialVelocityPushToHand()
		{
		}

		[Token(Token = "0x6001C9A")]
		[Address(RVA = "0xE01044", Offset = "0xE01044", VA = "0xE01044")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6001C9B")]
		[Address(RVA = "0xE00FD4", Offset = "0xE00FD4", VA = "0xE00FD4")]
		private Vector3 CalculateTrajectoryVelocity(Vector3 origin, Vector3 target, float t)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001C9C")]
		[Address(RVA = "0xE010A8", Offset = "0xE010A8", VA = "0xE010A8")]
		public void SetTarget(Transform theObject)
		{
		}

		[Token(Token = "0x6001C9D")]
		[Address(RVA = "0xE01084", Offset = "0xE01084", VA = "0xE01084")]
		public void CancelTarget()
		{
		}

		[Token(Token = "0x6001C9E")]
		[Address(RVA = "0xE010CC", Offset = "0xE010CC", VA = "0xE010CC")]
		public DistanceGrabbable()
		{
		}
	}
	[Token(Token = "0x200058E")]
	public enum HandGrabType
	{
		[Token(Token = "0x4001D5E")]
		Default,
		[Token(Token = "0x4001D5F")]
		HandToGrabbable,
		[Token(Token = "0x4001D60")]
		GrabbableToHand
	}
	[Token(Token = "0x200058F")]
	[DefaultExecutionOrder(-5)]
	[HelpURL("https://earnestrobot.notion.site/Grabbables-9308c564e60848a882eb23e9778ee2b6")]
	public class Grabbable : GrabbableBase
	{
		[Token(Token = "0x4001D61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[Tooltip("This will copy the given grabbables settings to this grabbable when applied")]
		[OnValueChanged("EditorCopyGrabbable")]
		public Grabbable CopySettings;

		[Token(Token = "0x4001D62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[Header("Grab Settings")]
		[Tooltip("Which hand this can be held by")]
		public HandGrabType grabType;

		[Token(Token = "0x4001D63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		[Tooltip("Which hand this can be held by")]
		public HandType handType;

		[Token(Token = "0x4001D64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[Tooltip("Whether or not this can be grabbed with more than one hand")]
		public bool singleHandOnly;

		[Token(Token = "0x4001D65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x121")]
		[ShowIf("singleHandOnly")]
		[Tooltip("if false single handed items cannot be passes back and forth on grab")]
		public bool allowHeldSwapping;

		[Token(Token = "0x4001D66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x122")]
		[Tooltip("Will the item automatically return the hand on grab - good for saved poses, bad for heavy things")]
		public bool instantGrab;

		[Token(Token = "0x4001D67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x123")]
		[DisableIf("instantGrab")]
		[Tooltip("If true (and using HandToGrabbable) the hand will only return to the follow while moving. Good for picking up objects without disrupting the things around them - you can change the speed of the hand return on the hand through the gentleGrabSpeed value")]
		public bool useGentleGrab;

		[Token(Token = "0x4001D68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		[Tooltip("Creates an offset an grab so the hand will not return to the hand on grab - Good for statically jointed grabbable objects")]
		public bool maintainGrabOffset;

		[Token(Token = "0x4001D69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x125")]
		[Tooltip("Experimental - ignores weight of held object while held")]
		public bool ignoreWeight;

		[Token(Token = "0x4001D6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x126")]
		[Tooltip("This will NOT parent the object under the hands on grab. This will parent the object to the parents of the hand, which allow you to move the hand parent object smoothly while holding an item, but will also allow you to move items that are very heavy - recommended for all objects that aren't very heavy or jointed to other rigidbodies")]
		public bool parentOnGrab;

		[Token(Token = "0x4001D6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[Header("Release Settings")]
		[Tooltip("How much to multiply throw by for this grabbable when releasing - 0-1 for no or reduced throw strength")]
		[FormerlySerializedAs("throwMultiplyer")]
		public float throwPower;

		[Token(Token = "0x4001D6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		[Tooltip("The required force to break the fixedJoint\n Turn this to \"infinity\" to disable (Might cause jitter)\nIdeal value depends on hand mass and velocity settings")]
		public float jointBreakForce;

		[Token(Token = "0x4001D6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[AutoSmallHeader("Advanced Settings", 0, 0)]
		public bool showAdvancedSettings;

		[Token(Token = "0x4001D6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x131")]
		[Tooltip("Adds and links a GrabbableChild to each child with a collider on start - So the hand can grab them")]
		public bool makeChildrenGrabbable;

		[Token(Token = "0x4001D6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		[Tooltip("I.E. Grab Prioirty - BIGGER IS BETTER - divides highlight distance by this when calculating which object to grab. Hands always grab closest object to palm")]
		[Min(0f)]
		public float grabPriorityWeight;

		[Token(Token = "0x4001D70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[Tooltip("The number of seconds that the hand collision should ignore the released object\n (Good for increased placement precision and resolves clipping errors)")]
		[Min(0f)]
		public float ignoreReleaseTime;

		[Token(Token = "0x4001D71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		[Space]
		[Tooltip("Offsets the grabbable by this much when being held")]
		public Vector3 heldPositionOffset;

		[Token(Token = "0x4001D72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		[Tooltip("Offsets the grabbable by this many degrees when being held")]
		public Vector3 heldRotationOffset;

		[Token(Token = "0x4001D73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		[Min(0f)]
		[Space]
		[Tooltip("The joint that connects the hand and the grabbable. Defaults to the joint in AutoHand/Resources/DefaultJoint.prefab if empty")]
		public ConfigurableJoint customGrabJoint;

		[Token(Token = "0x4001D74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		[Tooltip("For the special use case of having grabbable objects with physics jointed peices move properly while being held")]
		[Space]
		public List<Rigidbody> jointedBodies;

		[Token(Token = "0x4001D75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		[Tooltip("For the special use case of having things connected to the grabbable that the hand should ignore while being held (good for doors and drawers) -> for always active use the [GrabbableIgnoreHands] Component")]
		public List<Collider> heldIgnoreColliders;

		[Token(Token = "0x4001D76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		[Tooltip("Whether or not the break call made only when holding with multiple hands - if this is false the break event can be called by forcing an object into a static collider")]
		[Space]
		public bool pullApartBreakOnly;

		[Token(Token = "0x4001D77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x171")]
		[AutoToggleHeader("Show Events", 0, 0)]
		public bool showEvents;

		[Token(Token = "0x4001D78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		[ShowIf("showEvents")]
		[Space]
		public UnityHandGrabEvent onGrab;

		[Token(Token = "0x4001D79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		[ShowIf("showEvents")]
		public UnityHandGrabEvent onRelease;

		[Token(Token = "0x4001D7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		[ShowIf("showEvents")]
		[Space]
		[Space]
		public UnityHandGrabEvent onSqueeze;

		[Token(Token = "0x4001D7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		[ShowIf("showEvents")]
		public UnityHandGrabEvent onUnsqueeze;

		[Token(Token = "0x4001D7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		[Space]
		[Space]
		[ShowIf("showEvents")]
		public UnityHandGrabEvent onHighlight;

		[Token(Token = "0x4001D7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		[ShowIf("showEvents")]
		public UnityHandGrabEvent onUnhighlight;

		[Token(Token = "0x4001D7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		[Space]
		[ShowIf("showEvents")]
		[Space]
		public UnityHandGrabEvent OnJointBreak;

		[Token(Token = "0x4001D7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		[Tooltip("Lock hand in place on grab (This is a legacy setting, set hand kinematic on grab/release instead)")]
		[HideInInspector]
		public bool lockHandOnGrab;

		[Token(Token = "0x4001D80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		public HandGrabEvent OnBeforeGrabEvent;

		[Token(Token = "0x4001D81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		public HandGrabEvent OnGrabEvent;

		[Token(Token = "0x4001D82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		public HandGrabEvent OnReleaseEvent;

		[Token(Token = "0x4001D83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		public HandGrabEvent OnJointBreakEvent;

		[Token(Token = "0x4001D84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		public HandGrabEvent OnSqueezeEvent;

		[Token(Token = "0x4001D85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		public HandGrabEvent OnUnsqueezeEvent;

		[Token(Token = "0x4001D86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		public HandGrabEvent OnHighlightEvent;

		[Token(Token = "0x4001D87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		public HandGrabEvent OnUnhighlightEvent;

		[Token(Token = "0x4001D88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		public PlacePointEvent OnPlacePointHighlightEvent;

		[Token(Token = "0x4001D89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		public PlacePointEvent OnPlacePointUnhighlightEvent;

		[Token(Token = "0x4001D8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		public PlacePointEvent OnPlacePointAddEvent;

		[Token(Token = "0x4001D8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		public PlacePointEvent OnPlacePointRemoveEvent;

		[Token(Token = "0x4001D8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		private bool ignoreInterpolation;

		[Token(Token = "0x4001D8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		private Dictionary<Material, List<GameObject>> highlightObjs;

		[Token(Token = "0x17000389")]
		public bool wasForceReleased
		{
			[Token(Token = "0x6001CA0")]
			[Address(RVA = "0xE01104", Offset = "0xE01104", VA = "0xE01104")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001CA1")]
			[Address(RVA = "0xE0110C", Offset = "0xE0110C", VA = "0xE0110C")]
			[CompilerGenerated]
			internal set
			{
			}
		}

		[Token(Token = "0x1700038A")]
		public Hand lastHeldBy
		{
			[Token(Token = "0x6001CA2")]
			[Address(RVA = "0xE01118", Offset = "0xE01118", VA = "0xE01118")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001CA3")]
			[Address(RVA = "0xE01120", Offset = "0xE01120", VA = "0xE01120")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x1700038B")]
		public float throwMultiplyer
		{
			[Token(Token = "0x6001CA4")]
			[Address(RVA = "0xE01130", Offset = "0xE01130", VA = "0xE01130")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001CA5")]
			[Address(RVA = "0xE01138", Offset = "0xE01138", VA = "0xE01138")]
			set
			{
			}
		}

		[Token(Token = "0x6001CA6")]
		[Address(RVA = "0xE01140", Offset = "0xE01140", VA = "0xE01140", Slot = "8")]
		protected new virtual void Awake()
		{
		}

		[Token(Token = "0x6001CA7")]
		[Address(RVA = "0xE013D0", Offset = "0xE013D0", VA = "0xE013D0")]
		private void Update()
		{
		}

		[Token(Token = "0x6001CA8")]
		[Address(RVA = "0xE01408", Offset = "0xE01408", VA = "0xE01408", Slot = "6")]
		protected override void FixedUpdate()
		{
		}

		[Token(Token = "0x6001CA9")]
		[Address(RVA = "0xE01488", Offset = "0xE01488", VA = "0xE01488", Slot = "9")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6001CAA")]
		[Address(RVA = "0xE01658", Offset = "0xE01658", VA = "0xE01658")]
		internal bool ShouldInterpolate()
		{
			return default(bool);
		}

		[Token(Token = "0x6001CAB")]
		[Address(RVA = "0xE013EC", Offset = "0xE013EC", VA = "0xE013EC")]
		internal void UpdateHeldInterpolation()
		{
		}

		[Token(Token = "0x6001CAC")]
		[Address(RVA = "0xE0190C", Offset = "0xE0190C", VA = "0xE0190C")]
		internal void IgnoreInterpolationForOneFixedUpdate()
		{
		}

		[Token(Token = "0x6001CAD")]
		[Address(RVA = "0xE01918", Offset = "0xE01918", VA = "0xE01918")]
		internal void IgnoreColliders(Collider bodyCapsule, bool ignore = true)
		{
		}

		[Token(Token = "0x6001CAE")]
		[Address(RVA = "0xE01A64", Offset = "0xE01A64", VA = "0xE01A64")]
		private void TryCreateHighlight(Material customMat, Hand hand)
		{
		}

		[Token(Token = "0x6001CAF")]
		[Address(RVA = "0xE02134", Offset = "0xE02134", VA = "0xE02134")]
		private void DestroyHighlightCopy()
		{
		}

		[Token(Token = "0x6001CB0")]
		[Address(RVA = "0xE02138", Offset = "0xE02138", VA = "0xE02138")]
		private void ToggleHighlight(Hand hand, Material customMat, bool enableHighlight)
		{
		}

		[Token(Token = "0x6001CB1")]
		[Address(RVA = "0xE022DC", Offset = "0xE022DC", VA = "0xE022DC", Slot = "10")]
		internal virtual void Highlight(Hand hand, [Optional] Material customMat)
		{
		}

		[Token(Token = "0x6001CB2")]
		[Address(RVA = "0xE023A4", Offset = "0xE023A4", VA = "0xE023A4", Slot = "11")]
		internal virtual void Unhighlight(Hand hand, [Optional] Material customMat)
		{
		}

		[Token(Token = "0x6001CB3")]
		[Address(RVA = "0xE02458", Offset = "0xE02458", VA = "0xE02458", Slot = "12")]
		internal virtual void OnSqueeze(Hand hand)
		{
		}

		[Token(Token = "0x6001CB4")]
		[Address(RVA = "0xE024DC", Offset = "0xE024DC", VA = "0xE024DC", Slot = "13")]
		internal virtual void OnUnsqueeze(Hand hand)
		{
		}

		[Token(Token = "0x6001CB5")]
		[Address(RVA = "0xE02560", Offset = "0xE02560", VA = "0xE02560", Slot = "14")]
		internal virtual void OnBeforeGrab(Hand hand)
		{
		}

		[Token(Token = "0x6001CB6")]
		[Address(RVA = "0xE0268C", Offset = "0xE0268C", VA = "0xE0268C", Slot = "15")]
		internal virtual void OnGrab(Hand hand)
		{
		}

		[Token(Token = "0x6001CB7")]
		[Address(RVA = "0xE02AF0", Offset = "0xE02AF0", VA = "0xE02AF0", Slot = "16")]
		public virtual bool CanGrab(HandBase hand)
		{
			return default(bool);
		}

		[Token(Token = "0x6001CB8")]
		[Address(RVA = "0xE02B68", Offset = "0xE02B68", VA = "0xE02B68", Slot = "17")]
		internal virtual void OnRelease(Hand hand)
		{
		}

		[Token(Token = "0x6001CB9")]
		[Address(RVA = "0xE02E98", Offset = "0xE02E98", VA = "0xE02E98", Slot = "18")]
		internal virtual void BreakHandConnection(Hand hand)
		{
		}

		[Token(Token = "0x6001CBA")]
		[Address(RVA = "0xE0341C", Offset = "0xE0341C", VA = "0xE0341C", Slot = "19")]
		public virtual void HandsRelease()
		{
		}

		[Token(Token = "0x6001CBB")]
		[Address(RVA = "0xE034B0", Offset = "0xE034B0", VA = "0xE034B0", Slot = "20")]
		public virtual void HandRelease(Hand hand)
		{
		}

		[Token(Token = "0x6001CBC")]
		[Address(RVA = "0xE03530", Offset = "0xE03530", VA = "0xE03530", Slot = "21")]
		public virtual void ForceHandsRelease()
		{
		}

		[Token(Token = "0x6001CBD")]
		[Address(RVA = "0xE035DC", Offset = "0xE035DC", VA = "0xE035DC", Slot = "22")]
		public virtual void ForceHandRelease(Hand hand)
		{
		}

		[Token(Token = "0x6001CBE")]
		[Address(RVA = "0xE03668", Offset = "0xE03668", VA = "0xE03668", Slot = "23")]
		public virtual void OnHandJointBreak(Hand hand)
		{
		}

		[Token(Token = "0x6001CBF")]
		[Address(RVA = "0xE03940", Offset = "0xE03940", VA = "0xE03940")]
		public List<Hand> GetHeldBy()
		{
			return null;
		}

		[Token(Token = "0x6001CC0")]
		[Address(RVA = "0xE0184C", Offset = "0xE0184C", VA = "0xE0184C")]
		public int HeldCount(bool includedJointedCount = true)
		{
			return default(int);
		}

		[Token(Token = "0x6001CC1")]
		[Address(RVA = "0xE03948", Offset = "0xE03948", VA = "0xE03948")]
		public bool IsHeld()
		{
			return default(bool);
		}

		[Token(Token = "0x6001CC2")]
		[Address(RVA = "0xE03998", Offset = "0xE03998", VA = "0xE03998")]
		public bool BeingGrabbed()
		{
			return default(bool);
		}

		[Token(Token = "0x6001CC3")]
		[Address(RVA = "0xE039A0", Offset = "0xE039A0", VA = "0xE039A0")]
		public void PlayHapticVibration()
		{
		}

		[Token(Token = "0x6001CC4")]
		[Address(RVA = "0xE03AEC", Offset = "0xE03AEC", VA = "0xE03AEC")]
		public void PlayHapticVibration(float duration = 0.025f)
		{
		}

		[Token(Token = "0x6001CC5")]
		[Address(RVA = "0xE03C48", Offset = "0xE03C48", VA = "0xE03C48")]
		public void PlayHapticVibration(float duration, float amp = 0.5f)
		{
		}

		[Token(Token = "0x6001CC6")]
		[Address(RVA = "0xE03DAC", Offset = "0xE03DAC", VA = "0xE03DAC")]
		public Vector3 GetVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001CC7")]
		[Address(RVA = "0xE03E88", Offset = "0xE03E88", VA = "0xE03E88")]
		public Vector3 GetAngularVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001CC8")]
		[Address(RVA = "0xE03FC0", Offset = "0xE03FC0", VA = "0xE03FC0")]
		public void SetParentOnGrab(bool parentOnGrab)
		{
		}

		[Token(Token = "0x6001CC9")]
		[Address(RVA = "0xE03FCC", Offset = "0xE03FCC", VA = "0xE03FCC")]
		public void AddJointedBody(Rigidbody body)
		{
		}

		[Token(Token = "0x6001CCA")]
		[Address(RVA = "0xE04290", Offset = "0xE04290", VA = "0xE04290")]
		public void RemoveJointedBody(Rigidbody body)
		{
		}

		[Token(Token = "0x6001CCB")]
		[Address(RVA = "0xE04440", Offset = "0xE04440", VA = "0xE04440")]
		public void DoDestroy()
		{
		}

		[Token(Token = "0x6001CCC")]
		[Address(RVA = "0xE017F4", Offset = "0xE017F4", VA = "0xE017F4")]
		public int CollisionCount()
		{
			return default(int);
		}

		[Token(Token = "0x6001CCD")]
		[Address(RVA = "0xE044AC", Offset = "0xE044AC", VA = "0xE044AC")]
		public int JointedCollisionCount()
		{
			return default(int);
		}

		[Token(Token = "0x6001CCE")]
		[Address(RVA = "0xE01358", Offset = "0xE01358", VA = "0xE01358")]
		private void MakeChildrenGrabbable()
		{
		}

		[Token(Token = "0x6001CCF")]
		[Address(RVA = "0xE015E0", Offset = "0xE015E0", VA = "0xE015E0")]
		private void MakeChildrenUngrabbable()
		{
		}

		[Token(Token = "0x6001CD0")]
		[Address(RVA = "0xE031D8", Offset = "0xE031D8", VA = "0xE031D8")]
		internal void ResetGrabbableAfterRlease()
		{
		}

		[Token(Token = "0x6001CD1")]
		[Address(RVA = "0xE04890", Offset = "0xE04890", VA = "0xE04890")]
		public Grabbable()
		{
		}
	}
	[Token(Token = "0x2000591")]
	[DefaultExecutionOrder(1)]
	public class GrabbableChild : MonoBehaviour
	{
		[Token(Token = "0x4001D92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Grabbable grabParent;

		[Token(Token = "0x6001CD5")]
		[Address(RVA = "0xE04B1C", Offset = "0xE04B1C", VA = "0xE04B1C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001CD6")]
		[Address(RVA = "0xE04C54", Offset = "0xE04C54", VA = "0xE04C54")]
		public GrabbableChild()
		{
		}
	}
	[Token(Token = "0x2000592")]
	[RequireComponent(typeof(Grabbable))]
	public class GrabbableCollisionHaptics : MonoBehaviour
	{
		[Token(Token = "0x2000593")]
		[CompilerGenerated]
		private sealed class <PlayBuffer>d__14 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001D9E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001D9F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001DA0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GrabbableCollisionHaptics <>4__this;

			[Token(Token = "0x1700038C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001CE0")]
				[Address(RVA = "0xE05248", Offset = "0xE05248", VA = "0xE05248", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700038D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001CE2")]
				[Address(RVA = "0xE05290", Offset = "0xE05290", VA = "0xE05290", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001CDD")]
			[Address(RVA = "0xE0508C", Offset = "0xE0508C", VA = "0xE0508C")]
			[DebuggerHidden]
			public <PlayBuffer>d__14(int <>1__state)
			{
			}

			[Token(Token = "0x6001CDE")]
			[Address(RVA = "0xE05174", Offset = "0xE05174", VA = "0xE05174", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001CDF")]
			[Address(RVA = "0xE05178", Offset = "0xE05178", VA = "0xE05178", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001CE1")]
			[Address(RVA = "0xE05250", Offset = "0xE05250", VA = "0xE05250", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000594")]
		[CompilerGenerated]
		private sealed class <HapticPlayBuffer>d__15 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001DA1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001DA2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001DA3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GrabbableCollisionHaptics <>4__this;

			[Token(Token = "0x4001DA4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float time;

			[Token(Token = "0x1700038E")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001CE6")]
				[Address(RVA = "0xE0536C", Offset = "0xE0536C", VA = "0xE0536C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700038F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001CE8")]
				[Address(RVA = "0xE053B4", Offset = "0xE053B4", VA = "0xE053B4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001CE3")]
			[Address(RVA = "0xE050B4", Offset = "0xE050B4", VA = "0xE050B4")]
			[DebuggerHidden]
			public <HapticPlayBuffer>d__15(int <>1__state)
			{
			}

			[Token(Token = "0x6001CE4")]
			[Address(RVA = "0xE05298", Offset = "0xE05298", VA = "0xE05298", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001CE5")]
			[Address(RVA = "0xE0529C", Offset = "0xE0529C", VA = "0xE0529C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001CE7")]
			[Address(RVA = "0xE05374", Offset = "0xE05374", VA = "0xE05374", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001D93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The layers that cause the sound to play")]
		public LayerMask collisionTriggers;

		[Token(Token = "0x4001D94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float hapticAmp;

		[Token(Token = "0x4001D95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float velocityAmp;

		[Token(Token = "0x4001D96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float repeatDelay;

		[Token(Token = "0x4001D97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float maxDuration;

		[Token(Token = "0x4001D98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Source to play sound from")]
		public AnimationCurve velocityAmpCurve;

		[Token(Token = "0x4001D99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Source to play sound from")]
		public AnimationCurve velocityDurationCurve;

		[Token(Token = "0x4001D9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Grabbable grab;

		[Token(Token = "0x4001D9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Rigidbody body;

		[Token(Token = "0x4001D9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool canPlay;

		[Token(Token = "0x4001D9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Coroutine playRoutine;

		[Token(Token = "0x6001CD7")]
		[Address(RVA = "0xE04C5C", Offset = "0xE04C5C", VA = "0xE04C5C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001CD8")]
		[Address(RVA = "0xE04D8C", Offset = "0xE04D8C", VA = "0xE04D8C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001CD9")]
		[Address(RVA = "0xE04DA0", Offset = "0xE04DA0", VA = "0xE04DA0")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6001CDA")]
		[Address(RVA = "0xE05018", Offset = "0xE05018", VA = "0xE05018")]
		[IteratorStateMachine(typeof(<PlayBuffer>d__14))]
		private IEnumerator PlayBuffer()
		{
			return null;
		}

		[Token(Token = "0x6001CDB")]
		[Address(RVA = "0xE04D08", Offset = "0xE04D08", VA = "0xE04D08")]
		[IteratorStateMachine(typeof(<HapticPlayBuffer>d__15))]
		private IEnumerator HapticPlayBuffer(float time)
		{
			return null;
		}

		[Token(Token = "0x6001CDC")]
		[Address(RVA = "0xE050DC", Offset = "0xE050DC", VA = "0xE050DC")]
		public GrabbableCollisionHaptics()
		{
		}
	}
	[Token(Token = "0x2000595")]
	[RequireComponent(typeof(Grabbable))]
	public class GrabbableExtraEvents : MonoBehaviour
	{
		[Token(Token = "0x4001DA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityHandGrabEvent OnFirstGrab;

		[Token(Token = "0x4001DA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityHandGrabEvent OnLastRelease;

		[Token(Token = "0x4001DA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityHandGrabEvent OnTwoHandedGrab;

		[Token(Token = "0x4001DA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityHandGrabEvent OnTwoHandedRelease;

		[Token(Token = "0x4001DA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Grabbable grab;

		[Token(Token = "0x6001CE9")]
		[Address(RVA = "0xE053BC", Offset = "0xE053BC", VA = "0xE053BC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001CEA")]
		[Address(RVA = "0xE05564", Offset = "0xE05564", VA = "0xE05564")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001CEB")]
		[Address(RVA = "0xE05714", Offset = "0xE05714", VA = "0xE05714")]
		public void Grab(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6001CEC")]
		[Address(RVA = "0xE057D0", Offset = "0xE057D0", VA = "0xE057D0")]
		public void Release(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6001CED")]
		[Address(RVA = "0xE05888", Offset = "0xE05888", VA = "0xE05888")]
		public GrabbableExtraEvents()
		{
		}
	}
	[Token(Token = "0x2000596")]
	[RequireComponent(typeof(Grabbable))]
	public class GrabbableOnlyJoint : MonoBehaviour
	{
		[Token(Token = "0x4001DAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Grabbable jointedGrabbable;

		[Token(Token = "0x4001DAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool resetOnRelease;

		[Token(Token = "0x4001DAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Grabbable localGrabbable;

		[Token(Token = "0x4001DAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Joint freezeJoint;

		[Token(Token = "0x4001DAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 localStartPosition;

		[Token(Token = "0x4001DAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Quaternion localStartRotation;

		[Token(Token = "0x6001CEE")]
		[Address(RVA = "0xE05890", Offset = "0xE05890", VA = "0xE05890")]
		private void Start()
		{
		}

		[Token(Token = "0x6001CEF")]
		[Address(RVA = "0xE05C8C", Offset = "0xE05C8C", VA = "0xE05C8C")]
		private void OnGrab(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6001CF0")]
		[Address(RVA = "0xE05D30", Offset = "0xE05D30", VA = "0xE05D30")]
		private void OnRelease(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6001CF1")]
		[Address(RVA = "0xE05F3C", Offset = "0xE05F3C", VA = "0xE05F3C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001CF2")]
		[Address(RVA = "0xE060B0", Offset = "0xE060B0", VA = "0xE060B0")]
		private void CreateJoint()
		{
		}

		[Token(Token = "0x6001CF3")]
		[Address(RVA = "0xE06220", Offset = "0xE06220", VA = "0xE06220")]
		public GrabbableOnlyJoint()
		{
		}
	}
	[Token(Token = "0x2000597")]
	public class GrabbablePoint : GrabbablePointBase
	{
		[Token(Token = "0x4001DB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform rightPoint;

		[Token(Token = "0x4001DB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform leftPoint;

		[Token(Token = "0x6001CF4")]
		[Address(RVA = "0xE06230", Offset = "0xE06230", VA = "0xE06230", Slot = "4")]
		public override bool Align(Hand hand)
		{
			return default(bool);
		}

		[Token(Token = "0x6001CF5")]
		[Address(RVA = "0xE063A4", Offset = "0xE063A4", VA = "0xE063A4")]
		public GrabbablePoint()
		{
		}
	}
	[Token(Token = "0x2000598")]
	[RequireComponent(typeof(Grabbable))]
	public class GrabbablePointBase : MonoBehaviour
	{
		[Token(Token = "0x6001CF6")]
		[Address(RVA = "0xE063B4", Offset = "0xE063B4", VA = "0xE063B4", Slot = "4")]
		public virtual bool Align(Hand hand)
		{
			return default(bool);
		}

		[Token(Token = "0x6001CF7")]
		[Address(RVA = "0xE063AC", Offset = "0xE063AC", VA = "0xE063AC")]
		public GrabbablePointBase()
		{
		}
	}
	[Token(Token = "0x2000599")]
	public class GrabbablePoints : GrabbablePointBase
	{
		[Token(Token = "0x4001DB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform[] leftPoints;

		[Token(Token = "0x4001DB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform[] rightPoints;

		[Token(Token = "0x6001CF8")]
		[Address(RVA = "0xE063BC", Offset = "0xE063BC", VA = "0xE063BC", Slot = "4")]
		public override bool Align(Hand hand)
		{
			return default(bool);
		}

		[Token(Token = "0x6001CF9")]
		[Address(RVA = "0xE06474", Offset = "0xE06474", VA = "0xE06474")]
		private Transform ClosestGrabPoint(Transform[] points, Hand hand)
		{
			return null;
		}

		[Token(Token = "0x6001CFA")]
		[Address(RVA = "0xE067C0", Offset = "0xE067C0", VA = "0xE067C0")]
		public GrabbablePoints()
		{
		}
	}
	[Token(Token = "0x200059A")]
	[HelpURL("https://earnestrobot.notion.site/Custom-Poses-868c1fa0590542a0b5b7937b5feb6b0d")]
	public class GrabbablePose : MonoBehaviour
	{
		[Token(Token = "0x4001DB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AutoHeader("Grabbable Pose", 0, 0)]
		public bool ignoreMe;

		[Token(Token = "0x4001DB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool poseEnabled;

		[Token(Token = "0x4001DB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Purely for organizational purposes in the editor")]
		public string poseName;

		[Token(Token = "0x4001DB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("This value must match the pose index of the a hand in order for the pose to work")]
		public int poseIndex;

		[Token(Token = "0x4001DB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("Whether or not this pose can be used by both hands at once or only one hand at a time")]
		public bool singleHanded;

		[Token(Token = "0x4001DB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		[AutoToggleHeader("Advanced Settings", 0, 0)]
		public bool showAdvanced;

		[Token(Token = "0x4001DBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float positionWeight;

		[Token(Token = "0x4001DBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float rotationWeight;

		[Token(Token = "0x4001DBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("These poses will only be enabled when this pose is active. Great for secondary poses like holding the front of a gun with your second hand, only while holding the trigger")]
		public GrabbablePose[] linkedPoses;

		[Token(Token = "0x4001DBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public bool showEditorTools;

		[Token(Token = "0x4001DBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[HideInInspector]
		[Tooltip("Scriptable options NOT REQUIRED -> Create scriptable throught [Auto Hand/Custom Pose]")]
		public HandPoseScriptable poseScriptable;

		[Token(Token = "0x4001DBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Used to pose for the grabbable")]
		[HideInInspector]
		public Hand editorHand;

		[Token(Token = "0x4001DC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HideInInspector]
		public HandPoseData rightPose;

		[Token(Token = "0x4001DC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[HideInInspector]
		public bool rightPoseSet;

		[Token(Token = "0x4001DC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[HideInInspector]
		public HandPoseData leftPose;

		[Token(Token = "0x4001DC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[HideInInspector]
		public bool leftPoseSet;

		[Token(Token = "0x4001DC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private List<Hand> posingHands;

		[Token(Token = "0x6001CFB")]
		[Address(RVA = "0xE067C8", Offset = "0xE067C8", VA = "0xE067C8", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6001CFC")]
		[Address(RVA = "0xE0689C", Offset = "0xE0689C", VA = "0xE0689C")]
		public bool CanSetPose(Hand hand)
		{
			return default(bool);
		}

		[Token(Token = "0x6001CFD")]
		[Address(RVA = "0xE0695C", Offset = "0xE0695C", VA = "0xE0695C", Slot = "5")]
		public virtual HandPoseData GetHandPoseData(Hand hand)
		{
			return default(HandPoseData);
		}

		[Token(Token = "0x6001CFE")]
		[Address(RVA = "0xE06A24", Offset = "0xE06A24", VA = "0xE06A24", Slot = "6")]
		public virtual void SetHandPose(Hand hand, bool isProjection = false)
		{
		}

		[Token(Token = "0x6001CFF")]
		[Address(RVA = "0xE06BC0", Offset = "0xE06BC0", VA = "0xE06BC0", Slot = "7")]
		public virtual void CancelHandPose(Hand hand)
		{
		}

		[Token(Token = "0x6001D00")]
		[Address(RVA = "0xE06C88", Offset = "0xE06C88", VA = "0xE06C88")]
		public HandPoseData GetNewPoseData(Hand hand)
		{
			return default(HandPoseData);
		}

		[Token(Token = "0x6001D01")]
		[Address(RVA = "0xE07148", Offset = "0xE07148", VA = "0xE07148")]
		public bool HasPose(bool left)
		{
			return default(bool);
		}

		[Token(Token = "0x6001D02")]
		[Address(RVA = "0xE071FC", Offset = "0xE071FC", VA = "0xE071FC")]
		public GrabbablePose()
		{
		}
	}
	[Token(Token = "0x200059C")]
	[HelpURL("https://earnestrobot.notion.site/Custom-Poses-868c1fa0590542a0b5b7937b5feb6b0d")]
	public class GrabbablePoseAdvanced : GrabbablePose
	{
		[Token(Token = "0x4001DC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[Tooltip("Usually this can be left empty, used to create a different center point if the objects transform isn't ceneterd for the prefered rotation/movement axis")]
		public Transform centerObject;

		[Token(Token = "0x4001DC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[Tooltip("You want this set so the disc gizmo is around the axis you want the hand to rotate, or that the line is straight through the axis you want to move")]
		[Space]
		public Vector3 up;

		[Token(Token = "0x4001DC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		[Space]
		[Tooltip("Whether or not to automatically allow for the opposite direction pose to be automatically applied (I.E. Should I be able to grab my hammer only with the head facing up, or in both directions?)")]
		public bool useInvertPose;

		[Token(Token = "0x4001DCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[Space]
		[Tooltip("The minimum angle rotation around the included directions")]
		public int minAngle;

		[Token(Token = "0x4001DCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		[Tooltip("The maximum angle rotation around the included directions")]
		public int maxAngle;

		[Token(Token = "0x4001DCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[Tooltip("The minimum distance allowed from the saved posed along the included directions")]
		[Space]
		public float maxRange;

		[Token(Token = "0x4001DCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		[Tooltip("The maximum distance allowed from the saved posed along the included directions")]
		public float minRange;

		[Token(Token = "0x4001DCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[Header("Requires Gizmos Enabled")]
		[Tooltip("Helps test pose by setting the angle of the editor hand, REQUIRES GIZMOS ENABLED")]
		public int testAngle;

		[Token(Token = "0x4001DCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		[Tooltip("Helps test pose by setting the range position of the editor hand, REQUIRES GIZMOS ENABLED")]
		public float testRange;

		[Token(Token = "0x4001DD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private int lastAngle;

		[Token(Token = "0x4001DD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		private float lastRange;

		[Token(Token = "0x4001DD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private Vector3 pregrabPos;

		[Token(Token = "0x4001DD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		private Quaternion pregrabRot;

		[Token(Token = "0x4001DD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private Transform tempContainer;

		[Token(Token = "0x4001DD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private Transform handMatch;

		[Token(Token = "0x4001DD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private Transform getTransform;

		[Token(Token = "0x6001D05")]
		[Address(RVA = "0xE0744C", Offset = "0xE0744C", VA = "0xE0744C", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6001D06")]
		[Address(RVA = "0xE07488", Offset = "0xE07488", VA = "0xE07488", Slot = "5")]
		public override HandPoseData GetHandPoseData(Hand hand)
		{
			return default(HandPoseData);
		}

		[Token(Token = "0x6001D07")]
		[Address(RVA = "0xE07864", Offset = "0xE07864", VA = "0xE07864")]
		public Quaternion GetClosestRotation(Hand hand, Vector3 up, bool addInverse)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001D08")]
		[Address(RVA = "0xE08504", Offset = "0xE08504", VA = "0xE08504")]
		public Vector3 GetClosestPosition(Vector3 up)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001D09")]
		[Address(RVA = "0xE088F0", Offset = "0xE088F0", VA = "0xE088F0")]
		public HandPoseData GetHandPoseData(Hand hand, int angle, float range)
		{
			return default(HandPoseData);
		}

		[Token(Token = "0x6001D0A")]
		[Address(RVA = "0xE077E4", Offset = "0xE077E4", VA = "0xE077E4")]
		private Transform GetTransform()
		{
			return null;
		}

		[Token(Token = "0x6001D0B")]
		[Address(RVA = "0xE08C48", Offset = "0xE08C48", VA = "0xE08C48")]
		public GrabbablePoseAdvanced()
		{
		}
	}
	[Token(Token = "0x200059D")]
	public class GrabbablePoseCombiner : MonoBehaviour
	{
		[Token(Token = "0x4001DD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<GrabbablePose> poses;

		[Token(Token = "0x4001DD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private HandPoseData pose;

		[Token(Token = "0x6001D0C")]
		[Address(RVA = "0xE08CAC", Offset = "0xE08CAC", VA = "0xE08CAC")]
		public bool CanSetPose(Hand hand)
		{
			return default(bool);
		}

		[Token(Token = "0x6001D0D")]
		[Address(RVA = "0xE08E60", Offset = "0xE08E60", VA = "0xE08E60")]
		public void AddPose(GrabbablePose pose)
		{
		}

		[Token(Token = "0x6001D0E")]
		[Address(RVA = "0xE08F48", Offset = "0xE08F48", VA = "0xE08F48")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001D0F")]
		[Address(RVA = "0xE09008", Offset = "0xE09008", VA = "0xE09008")]
		public GrabbablePose GetClosestPose(Hand hand)
		{
			return null;
		}

		[Token(Token = "0x6001D10")]
		[Address(RVA = "0xE09684", Offset = "0xE09684", VA = "0xE09684")]
		internal int PoseCount()
		{
			return default(int);
		}

		[Token(Token = "0x6001D11")]
		[Address(RVA = "0xE096CC", Offset = "0xE096CC", VA = "0xE096CC")]
		public GrabbablePoseCombiner()
		{
		}
	}
	[Token(Token = "0x200059E")]
	[RequireComponent(typeof(Grabbable))]
	public class GrabbableSubstitute : MonoBehaviour
	{
		[Token(Token = "0x4001DD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Whether or not to disable this gameobject on grab")]
		public bool disableOnGrab;

		[Token(Token = "0x4001DDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[Tooltip("If true, the substitute will return to the this local location and turn off and the local grabbable will turn back on")]
		public bool returnOnRelease;

		[Token(Token = "0x4001DDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Grabbable grabbableSubstitute;

		[Token(Token = "0x4001DDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Grabbable localGrabbable;

		[Token(Token = "0x6001D12")]
		[Address(RVA = "0xE09754", Offset = "0xE09754", VA = "0xE09754")]
		private void Start()
		{
		}

		[Token(Token = "0x6001D13")]
		[Address(RVA = "0xE098F4", Offset = "0xE098F4", VA = "0xE098F4")]
		private void OnGrabOriginal(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6001D14")]
		[Address(RVA = "0xE09A94", Offset = "0xE09A94", VA = "0xE09A94")]
		private void OnReleaseSub(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6001D15")]
		[Address(RVA = "0xE09BFC", Offset = "0xE09BFC", VA = "0xE09BFC")]
		public void LocalSubstitute(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6001D16")]
		[Address(RVA = "0xE09D78", Offset = "0xE09D78", VA = "0xE09D78")]
		public GrabbableSubstitute()
		{
		}
	}
	[Token(Token = "0x200059F")]
	[RequireComponent(typeof(Rigidbody), typeof(Grabbable))]
	public class GrabbableThrowEvent : MonoBehaviour
	{
		[Token(Token = "0x20005A0")]
		[CompilerGenerated]
		private sealed class <ResetThrown>d__12 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001DE5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001DE6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001DE7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GrabbableThrowEvent <>4__this;

			[Token(Token = "0x17000390")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001D22")]
				[Address(RVA = "0xE0A3FC", Offset = "0xE0A3FC", VA = "0xE0A3FC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000391")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001D24")]
				[Address(RVA = "0xE0A444", Offset = "0xE0A444", VA = "0xE0A444", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001D1F")]
			[Address(RVA = "0xE0A12C", Offset = "0xE0A12C", VA = "0xE0A12C")]
			[DebuggerHidden]
			public <ResetThrown>d__12(int <>1__state)
			{
			}

			[Token(Token = "0x6001D20")]
			[Address(RVA = "0xE0A330", Offset = "0xE0A330", VA = "0xE0A330", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001D21")]
			[Address(RVA = "0xE0A334", Offset = "0xE0A334", VA = "0xE0A334", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001D23")]
			[Address(RVA = "0xE0A404", Offset = "0xE0A404", VA = "0xE0A404", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001DDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The velocity magnitude required on collision to cause the break event")]
		public float breakVelocity;

		[Token(Token = "0x4001DDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("The layers that will cause this grabbale to break")]
		public LayerMask collisionLayers;

		[Token(Token = "0x4001DDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEvent OnBreak;

		[Token(Token = "0x4001DE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Rigidbody rb;

		[Token(Token = "0x4001DE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Grabbable grab;

		[Token(Token = "0x4001DE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool thrown;

		[Token(Token = "0x4001DE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Coroutine resetThrowing;

		[Token(Token = "0x4001DE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float throwTime;

		[Token(Token = "0x6001D17")]
		[Address(RVA = "0xE09D88", Offset = "0xE09D88", VA = "0xE09D88")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001D18")]
		[Address(RVA = "0xE09E18", Offset = "0xE09E18", VA = "0xE09E18")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001D19")]
		[Address(RVA = "0xE09EF4", Offset = "0xE09EF4", VA = "0xE09EF4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001D1A")]
		[Address(RVA = "0xE09FD0", Offset = "0xE09FD0", VA = "0xE09FD0")]
		private void OnReleased(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6001D1B")]
		[Address(RVA = "0xE0A0B8", Offset = "0xE0A0B8", VA = "0xE0A0B8")]
		[IteratorStateMachine(typeof(<ResetThrown>d__12))]
		private IEnumerator ResetThrown()
		{
			return null;
		}

		[Token(Token = "0x6001D1C")]
		[Address(RVA = "0xE0A154", Offset = "0xE0A154", VA = "0xE0A154")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6001D1D")]
		[Address(RVA = "0xE0A2DC", Offset = "0xE0A2DC", VA = "0xE0A2DC")]
		private void Break()
		{
		}

		[Token(Token = "0x6001D1E")]
		[Address(RVA = "0xE0A2F8", Offset = "0xE0A2F8", VA = "0xE0A2F8")]
		public GrabbableThrowEvent()
		{
		}
	}
	[Token(Token = "0x20005A1")]
	[RequireComponent(typeof(Grabbable))]
	public class GrabLock : MonoBehaviour
	{
		[Token(Token = "0x4001DE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Hand.Released() must be called elsewhere")]
		[Header("Use this script to prevent grabbable release")]
		public UnityEvent OnGrabPressed;

		[Token(Token = "0x6001D25")]
		[Address(RVA = "0xE0A44C", Offset = "0xE0A44C", VA = "0xE0A44C")]
		public GrabLock()
		{
		}
	}
	[Token(Token = "0x20005A2")]
	public enum PlacePointNameType
	{
		[Token(Token = "0x4001DEA")]
		name,
		[Token(Token = "0x4001DEB")]
		tag
	}
	[Token(Token = "0x20005A3")]
	public delegate void PlacePointEvent(PlacePoint point, Grabbable grabbable);
	[Serializable]
	[Token(Token = "0x20005A4")]
	public class UnityPlacePointEvent : UnityEvent<PlacePoint, Grabbable>
	{
		[Token(Token = "0x6001D2A")]
		[Address(RVA = "0xE0A5DC", Offset = "0xE0A5DC", VA = "0xE0A5DC")]
		public UnityPlacePointEvent()
		{
		}
	}
	[Token(Token = "0x20005A5")]
	[HelpURL("https://earnestrobot.notion.site/Place-Points-e6361a414928450dbb53d76fd653cf9a")]
	public class PlacePoint : MonoBehaviour
	{
		[Token(Token = "0x20005A6")]
		[CompilerGenerated]
		private sealed class <CheckPlaceObjectLoop>d__61 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001E1C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001E1D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001E1E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PlacePoint <>4__this;

			[Token(Token = "0x4001E1F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <scale>5__2;

			[Token(Token = "0x17000395")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001D48")]
				[Address(RVA = "0xE0C2CC", Offset = "0xE0C2CC", VA = "0xE0C2CC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000396")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001D4A")]
				[Address(RVA = "0xE0C314", Offset = "0xE0C314", VA = "0xE0C314", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001D45")]
			[Address(RVA = "0xE0AAE4", Offset = "0xE0AAE4", VA = "0xE0AAE4")]
			[DebuggerHidden]
			public <CheckPlaceObjectLoop>d__61(int <>1__state)
			{
			}

			[Token(Token = "0x6001D46")]
			[Address(RVA = "0xE0C0DC", Offset = "0xE0C0DC", VA = "0xE0C0DC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001D47")]
			[Address(RVA = "0xE0C0E0", Offset = "0xE0C0E0", VA = "0xE0C0E0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001D49")]
			[Address(RVA = "0xE0C2D4", Offset = "0xE0C2D4", VA = "0xE0C2D4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001DEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AutoHeader("Place Point", 0, 0)]
		public bool ignoreMe;

		[Token(Token = "0x4001DED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[AutoSmallHeader("Place Settings", 0, 0)]
		public bool showPlaceSettings;

		[Token(Token = "0x4001DEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Snaps an object to the point at start, leave empty for no target")]
		public Grabbable startPlaced;

		[Token(Token = "0x4001DEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("This will make the point place the object as soon as it enters the radius, instead of on release")]
		public Transform placedOffset;

		[Token(Token = "0x4001DF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The radius of the place point (relative to scale)")]
		public float placeRadius;

		[Token(Token = "0x4001DF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Space]
		[Tooltip("This will make the point place the object as soon as it enters the radius, instead of on release")]
		public bool parentOnPlace;

		[Token(Token = "0x4001DF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		[Tooltip("This will make the point place the object as soon as it enters the radius, instead of on release")]
		public bool forcePlace;

		[Token(Token = "0x4001DF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x36")]
		[Tooltip("If true and will force hand to release on place when force place is called. If false the hand will attempt to keep the connection to the held object (but can still break due to max distances/break forces)")]
		public bool forceHandRelease;

		[Token(Token = "0x4001DF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x37")]
		[Space]
		[Tooltip("Whether or not the placed object should be disabled on placement (this will hide the placed object and leave the place point active for a new object)")]
		public bool destroyObjectOnPlace;

		[Token(Token = "0x4001DF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Whether or not the placed object should have its rigidbody disabled on place, good for parenting placed objects under dynamic objects")]
		public bool disableRigidbodyOnPlace;

		[Token(Token = "0x4001DF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		[Tooltip("Whether or not the grabbable should be disabled on place")]
		public bool disableGrabOnPlace;

		[Token(Token = "0x4001DF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
		[Tooltip("Whether or not this place point should be disabled on placement. It will maintain its connection and can no longer accept new items. Causes less overhead if true")]
		public bool disablePlacePointOnPlace;

		[Token(Token = "0x4001DF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B")]
		[Tooltip("If true and will force release on place")]
		[Space]
		[DisableIf("disableRigidbodyOnPlace")]
		public bool makePlacedKinematic;

		[Token(Token = "0x4001DF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[DisableIf("disableRigidbodyOnPlace")]
		[Tooltip("The rigidbody to attach the placed grabbable to - leave empty means no joint")]
		public Rigidbody placedJointLink;

		[Token(Token = "0x4001DFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[DisableIf("disableRigidbodyOnPlace")]
		public float jointBreakForce;

		[Token(Token = "0x4001DFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AutoSmallHeader("Place Requirements", 0, 0)]
		public bool showPlaceRequirements;

		[Token(Token = "0x4001DFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Whether the placeNames should compare names or tags")]
		public PlacePointNameType nameCompareType;

		[Token(Token = "0x4001DFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Will allow placement for any grabbable with a name containing this array of strings, leave blank for any grabbable allowed")]
		public string[] placeNames;

		[Token(Token = "0x4001DFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Will prevent placement for any name containing this array of strings")]
		public string[] blacklistNames;

		[Token(Token = "0x4001DFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("(Unless empty) Will only allow placement any object contained here")]
		public List<Grabbable> onlyAllows;

		[Token(Token = "0x4001E00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Will NOT allow placement any object contained here")]
		public List<Grabbable> dontAllows;

		[Token(Token = "0x4001E01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The layer that this place point will check for placeable objects, if none will default to Grabbable")]
		public LayerMask placeLayers;

		[Token(Token = "0x4001E02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[Tooltip("Whether or not to only allow placement of an object while it's being held (or released)")]
		public bool heldPlaceOnly;

		[Token(Token = "0x4001E03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7D")]
		[Space]
		[AutoToggleHeader("Show Events", 0, 0)]
		public bool showEvents;

		[Token(Token = "0x4001E04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[ShowIf("showEvents")]
		public UnityPlacePointEvent OnPlace;

		[Token(Token = "0x4001E05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[ShowIf("showEvents")]
		public UnityPlacePointEvent OnRemove;

		[Token(Token = "0x4001E06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[ShowIf("showEvents")]
		public UnityPlacePointEvent OnHighlight;

		[Token(Token = "0x4001E07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[ShowIf("showEvents")]
		public UnityPlacePointEvent OnStopHighlight;

		[Token(Token = "0x4001E08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public PlacePointEvent OnPlaceEvent;

		[Token(Token = "0x4001E09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public PlacePointEvent OnRemoveEvent;

		[Token(Token = "0x4001E0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public PlacePointEvent OnHighlightEvent;

		[Token(Token = "0x4001E0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public PlacePointEvent OnStopHighlightEvent;

		[Token(Token = "0x4001E0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[HideInInspector]
		public Vector3 radiusOffset;

		[Token(Token = "0x4001E10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		protected FixedJoint joint;

		[Token(Token = "0x4001E11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		protected float removalDistance;

		[Token(Token = "0x4001E12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		protected float lastPlacedTime;

		[Token(Token = "0x4001E13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		protected Vector3 placePosition;

		[Token(Token = "0x4001E14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		protected Transform originParent;

		[Token(Token = "0x4001E15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		protected bool placingFrame;

		[Token(Token = "0x4001E16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		protected CollisionDetectionMode placedObjDetectionMode;

		[Token(Token = "0x4001E17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private float tickRate;

		[Token(Token = "0x4001E18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Collider[] collidersNonAlloc;

		[Token(Token = "0x4001E19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private Coroutine checkRoutine;

		[Token(Token = "0x4001E1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private int lastOverlapCount;

		[Token(Token = "0x4001E1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private Grabbable tempGrabbable;

		[Token(Token = "0x17000392")]
		public Grabbable highlightingObj
		{
			[Token(Token = "0x6001D2B")]
			[Address(RVA = "0xE0A624", Offset = "0xE0A624", VA = "0xE0A624")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001D2C")]
			[Address(RVA = "0xE0A62C", Offset = "0xE0A62C", VA = "0xE0A62C")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x17000393")]
		public Grabbable placedObject
		{
			[Token(Token = "0x6001D2D")]
			[Address(RVA = "0xE0A634", Offset = "0xE0A634", VA = "0xE0A634")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001D2E")]
			[Address(RVA = "0xE0A63C", Offset = "0xE0A63C", VA = "0xE0A63C")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x17000394")]
		public Grabbable lastPlacedObject
		{
			[Token(Token = "0x6001D2F")]
			[Address(RVA = "0xE0A644", Offset = "0xE0A644", VA = "0xE0A644")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001D30")]
			[Address(RVA = "0xE0A64C", Offset = "0xE0A64C", VA = "0xE0A64C")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x6001D31")]
		[Address(RVA = "0xE0A654", Offset = "0xE0A654", VA = "0xE0A654", Slot = "4")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6001D32")]
		[Address(RVA = "0xE0A7BC", Offset = "0xE0A7BC", VA = "0xE0A7BC", Slot = "5")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6001D33")]
		[Address(RVA = "0xE0A7F4", Offset = "0xE0A7F4", VA = "0xE0A7F4", Slot = "6")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6001D34")]
		[Address(RVA = "0xE0A800", Offset = "0xE0A800", VA = "0xE0A800", Slot = "7")]
		public virtual bool CanPlace(Grabbable placeObj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001D35")]
		[Address(RVA = "0xE0AA70", Offset = "0xE0AA70", VA = "0xE0AA70", Slot = "8")]
		[IteratorStateMachine(typeof(<CheckPlaceObjectLoop>d__61))]
		protected virtual IEnumerator CheckPlaceObjectLoop()
		{
			return null;
		}

		[Token(Token = "0x6001D36")]
		[Address(RVA = "0xE0AB0C", Offset = "0xE0AB0C", VA = "0xE0AB0C")]
		private void CheckPlaceObject(float radius, float scale)
		{
		}

		[Token(Token = "0x6001D37")]
		[Address(RVA = "0xE0AF3C", Offset = "0xE0AF3C", VA = "0xE0AF3C", Slot = "9")]
		public virtual void TryPlace(Grabbable placeObj)
		{
		}

		[Token(Token = "0x6001D38")]
		[Address(RVA = "0xE0AF84", Offset = "0xE0AF84", VA = "0xE0AF84", Slot = "10")]
		public virtual void Place(Grabbable placeObj)
		{
		}

		[Token(Token = "0x6001D39")]
		[Address(RVA = "0xE0B638", Offset = "0xE0B638", VA = "0xE0B638")]
		public void Remove()
		{
		}

		[Token(Token = "0x6001D3A")]
		[Address(RVA = "0xE0B6BC", Offset = "0xE0B6BC", VA = "0xE0B6BC", Slot = "11")]
		public virtual void Remove(Grabbable placeObj)
		{
		}

		[Token(Token = "0x6001D3B")]
		[Address(RVA = "0xE0BA54", Offset = "0xE0BA54", VA = "0xE0BA54", Slot = "12")]
		internal virtual void Highlight(Grabbable from)
		{
		}

		[Token(Token = "0x6001D3C")]
		[Address(RVA = "0xE0BBB4", Offset = "0xE0BBB4", VA = "0xE0BBB4", Slot = "13")]
		internal virtual void StopHighlight(Grabbable from)
		{
		}

		[Token(Token = "0x6001D3D")]
		[Address(RVA = "0xE0ADB8", Offset = "0xE0ADB8", VA = "0xE0ADB8")]
		protected bool IsStillOverlapping(Grabbable from, float scale = 1f)
		{
			return default(bool);
		}

		[Token(Token = "0x6001D3E")]
		[Address(RVA = "0xE0BCF8", Offset = "0xE0BCF8", VA = "0xE0BCF8", Slot = "14")]
		public virtual void SetStartPlaced()
		{
		}

		[Token(Token = "0x6001D3F")]
		[Address(RVA = "0xE0BD94", Offset = "0xE0BD94", VA = "0xE0BD94")]
		public Grabbable GetPlacedObject()
		{
			return null;
		}

		[Token(Token = "0x6001D40")]
		[Address(RVA = "0xE0BD9C", Offset = "0xE0BD9C", VA = "0xE0BD9C", Slot = "15")]
		protected virtual void OnPlacedObjectGrabbed(Hand pHand, Grabbable pGrabbable)
		{
		}

		[Token(Token = "0x6001D41")]
		[Address(RVA = "0xE0BDD0", Offset = "0xE0BDD0", VA = "0xE0BDD0", Slot = "16")]
		protected virtual void OnPlacedObjectReleased(Hand pHand, Grabbable pGrabbable)
		{
		}

		[Token(Token = "0x6001D42")]
		[Address(RVA = "0xE0BDF0", Offset = "0xE0BDF0", VA = "0xE0BDF0", Slot = "17")]
		protected virtual void OnJointBreak(float breakForce)
		{
		}

		[Token(Token = "0x6001D43")]
		[Address(RVA = "0xE0BE74", Offset = "0xE0BE74", VA = "0xE0BE74")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6001D44")]
		[Address(RVA = "0xE0C030", Offset = "0xE0C030", VA = "0xE0C030")]
		public PlacePoint()
		{
		}
	}
	[Token(Token = "0x20005A7")]
	[DefaultExecutionOrder(1)]
	public class WeightlessFollower : MonoBehaviour
	{
		[Token(Token = "0x4001E20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public Transform follow;

		[Token(Token = "0x4001E21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public Transform follow1;

		[Token(Token = "0x4001E22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Dictionary<Hand, Transform> heldMoveTo;

		[Token(Token = "0x4001E23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[HideInInspector]
		public float followPositionStrength;

		[Token(Token = "0x4001E24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[HideInInspector]
		public float followRotationStrength;

		[Token(Token = "0x4001E25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		public float maxVelocity;

		[Token(Token = "0x4001E26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public Grabbable grab;

		[Token(Token = "0x4001E27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal Rigidbody body;

		[Token(Token = "0x4001E28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Transform moveTo;

		[Token(Token = "0x4001E29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float startMass;

		[Token(Token = "0x4001E2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float startDrag;

		[Token(Token = "0x4001E2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float startAngleDrag;

		[Token(Token = "0x6001D4B")]
		[Address(RVA = "0xE0C31C", Offset = "0xE0C31C", VA = "0xE0C31C")]
		public void Start()
		{
		}

		[Token(Token = "0x6001D4C")]
		[Address(RVA = "0xE0C40C", Offset = "0xE0C40C", VA = "0xE0C40C", Slot = "4")]
		public virtual void Set(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6001D4D")]
		[Address(RVA = "0xE0CB00", Offset = "0xE0CB00", VA = "0xE0CB00", Slot = "5")]
		public virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6001D4E")]
		[Address(RVA = "0xE0CB90", Offset = "0xE0CB90", VA = "0xE0CB90")]
		protected void SetMoveTo()
		{
		}

		[Token(Token = "0x6001D4F")]
		[Address(RVA = "0xE0CD68", Offset = "0xE0CD68", VA = "0xE0CD68", Slot = "6")]
		protected virtual void MoveTo()
		{
		}

		[Token(Token = "0x6001D50")]
		[Address(RVA = "0xE0D190", Offset = "0xE0D190", VA = "0xE0D190", Slot = "7")]
		protected virtual void TorqueTo()
		{
		}

		[Token(Token = "0x6001D51")]
		[Address(RVA = "0xE0D4A4", Offset = "0xE0D4A4", VA = "0xE0D4A4")]
		private int CollisionCount()
		{
			return default(int);
		}

		[Token(Token = "0x6001D52")]
		[Address(RVA = "0xE0D4C0", Offset = "0xE0D4C0", VA = "0xE0D4C0")]
		public void RemoveFollow(Hand hand, Transform follow)
		{
		}

		[Token(Token = "0x6001D53")]
		[Address(RVA = "0xE0D7DC", Offset = "0xE0D7DC", VA = "0xE0D7DC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001D54")]
		[Address(RVA = "0xE0DA18", Offset = "0xE0DA18", VA = "0xE0DA18")]
		public WeightlessFollower()
		{
		}
	}
	[Token(Token = "0x20005A8")]
	[HelpURL("https://earnestrobot.notion.site/Fingers-63ae83cda0b14a35b5ae15beeb51dc03")]
	public class Finger : MonoBehaviour
	{
		[Token(Token = "0x4001E2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Tips")]
		[Tooltip("This transfrom will represent the tip/stopper of the finger")]
		public Transform tip;

		[Token(Token = "0x4001E2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("This determines the radius of the spherecast check when bending fingers")]
		public float tipRadius;

		[Token(Token = "0x4001E2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("This will offset the fingers bend (0 is no bend, 1 is full bend)")]
		[Range(0f, 1f)]
		public float bendOffset;

		[Token(Token = "0x4001E2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float fingerSmoothSpeed;

		[Token(Token = "0x4001E30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[HideInInspector]
		public float secondaryOffset;

		[Token(Token = "0x4001E31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float currBendOffset;

		[Token(Token = "0x4001E32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float bend;

		[Token(Token = "0x4001E33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[HideInInspector]
		private Quaternion[] minGripRotPose;

		[Token(Token = "0x4001E34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[HideInInspector]
		private Vector3[] minGripPosPose;

		[Token(Token = "0x4001E35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[HideInInspector]
		[SerializeField]
		private Quaternion[] maxGripRotPose;

		[Token(Token = "0x4001E36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		[HideInInspector]
		private Vector3[] maxGripPosPose;

		[Token(Token = "0x4001E37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		[HideInInspector]
		private Transform[] fingerJoints;

		[Token(Token = "0x4001E38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float lastHitBend;

		[Token(Token = "0x4001E39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Collider[] results;

		[Token(Token = "0x6001D57")]
		[Address(RVA = "0xE0DB80", Offset = "0xE0DB80", VA = "0xE0DB80")]
		private void Update()
		{
		}

		[Token(Token = "0x6001D58")]
		[Address(RVA = "0xE0DBFC", Offset = "0xE0DBFC", VA = "0xE0DBFC")]
		public bool BendFingerUntilHit(int steps, int layermask)
		{
			return default(bool);
		}

		[Token(Token = "0x6001D59")]
		[Address(RVA = "0xE0E204", Offset = "0xE0E204", VA = "0xE0E204")]
		public bool UpdateFingerBend(float bend, int layermask)
		{
			return default(bool);
		}

		[Token(Token = "0x6001D5A")]
		[Address(RVA = "0xE0E468", Offset = "0xE0E468", VA = "0xE0E468")]
		public void UpdateFinger()
		{
		}

		[Token(Token = "0x6001D5B")]
		[Address(RVA = "0xE0E5F0", Offset = "0xE0E5F0", VA = "0xE0E5F0")]
		public void UpdateFinger(float bend)
		{
		}

		[Token(Token = "0x6001D5C")]
		[Address(RVA = "0xE0E77C", Offset = "0xE0E77C", VA = "0xE0E77C")]
		public void SetFingerBend(float bend)
		{
		}

		[Token(Token = "0x6001D5D")]
		[Address(RVA = "0xE0E908", Offset = "0xE0E908", VA = "0xE0E908")]
		public void SetCurrentFingerBend(float bend)
		{
		}

		[Token(Token = "0x6001D5E")]
		[Address(RVA = "0xE0DB84", Offset = "0xE0DB84", VA = "0xE0DB84")]
		private void SlowBend()
		{
		}

		[Token(Token = "0x6001D5F")]
		[Address(RVA = "0xE0E11C", Offset = "0xE0E11C", VA = "0xE0E11C")]
		[ContextMenu("ResetBend")]
		public void ResetBend()
		{
		}

		[Token(Token = "0x6001D60")]
		[Address(RVA = "0xE0EA94", Offset = "0xE0EA94", VA = "0xE0EA94")]
		[ContextMenu("Grip")]
		public void Grip()
		{
		}

		[Token(Token = "0x6001D61")]
		[Address(RVA = "0xE0EB7C", Offset = "0xE0EB7C", VA = "0xE0EB7C")]
		public float GetLastHitBend()
		{
			return default(float);
		}

		[Token(Token = "0x6001D62")]
		[Address(RVA = "0xE0EB84", Offset = "0xE0EB84", VA = "0xE0EB84")]
		[ContextMenu("Set Open Finger Pose")]
		public void SetMinPose()
		{
		}

		[Token(Token = "0x6001D63")]
		[Address(RVA = "0xE0EEC4", Offset = "0xE0EEC4", VA = "0xE0EEC4")]
		[ContextMenu("Set Closed Finger Pose")]
		public void SetMaxPose()
		{
		}

		[Token(Token = "0x6001D64")]
		[Address(RVA = "0xE0F204", Offset = "0xE0F204", VA = "0xE0F204")]
		public void CopyPose(Finger finger)
		{
		}

		[Token(Token = "0x6001D65")]
		[Address(RVA = "0xE0F3B8", Offset = "0xE0F3B8", VA = "0xE0F3B8")]
		public bool IsMinPoseSaved()
		{
			return default(bool);
		}

		[Token(Token = "0x6001D66")]
		[Address(RVA = "0xE0F3DC", Offset = "0xE0F3DC", VA = "0xE0F3DC")]
		public bool IsMaxPoseSaved()
		{
			return default(bool);
		}

		[Token(Token = "0x6001D67")]
		[Address(RVA = "0xE0F400", Offset = "0xE0F400", VA = "0xE0F400")]
		public float GetCurrentBend()
		{
			return default(float);
		}

		[Token(Token = "0x6001D68")]
		[Address(RVA = "0xE0F40C", Offset = "0xE0F40C", VA = "0xE0F40C")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6001D69")]
		[Address(RVA = "0xE0F4C0", Offset = "0xE0F4C0", VA = "0xE0F4C0")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6001D6A")]
		[Address(RVA = "0xE0F650", Offset = "0xE0F650", VA = "0xE0F650")]
		public Finger()
		{
		}
	}
	[Token(Token = "0x20005A9")]
	[HelpURL("https://earnestrobot.notion.site/Hand-967e36c2ab2945b2b0f75cea84624b2f")]
	[DefaultExecutionOrder(-10)]
	public class Hand : HandBase
	{
		[Token(Token = "0x20005AB")]
		[CompilerGenerated]
		private sealed class <HighlightUpdate>d__127 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001E68")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001E69")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001E6A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Hand <>4__this;

			[Token(Token = "0x4001E6B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float timestep;

			[Token(Token = "0x17000398")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001DE0")]
				[Address(RVA = "0xE16CA4", Offset = "0xE16CA4", VA = "0xE16CA4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000399")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001DE2")]
				[Address(RVA = "0xE16CEC", Offset = "0xE16CEC", VA = "0xE16CEC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001DDD")]
			[Address(RVA = "0xE15BE4", Offset = "0xE15BE4", VA = "0xE15BE4")]
			[DebuggerHidden]
			public <HighlightUpdate>d__127(int <>1__state)
			{
			}

			[Token(Token = "0x6001DDE")]
			[Address(RVA = "0xE16B8C", Offset = "0xE16B8C", VA = "0xE16B8C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001DDF")]
			[Address(RVA = "0xE16B90", Offset = "0xE16B90", VA = "0xE16B90", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001DE1")]
			[Address(RVA = "0xE16CAC", Offset = "0xE16CAC", VA = "0xE16CAC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20005AC")]
		[CompilerGenerated]
		private struct <>c__DisplayClass129_0
		{
			[Token(Token = "0x4001E6C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Hand <>4__this;

			[Token(Token = "0x4001E6D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Grabbable startHoldingObj;
		}

		[Token(Token = "0x20005AD")]
		[CompilerGenerated]
		private sealed class <GrabObject>d__129 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001E6E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001E6F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001E70")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Hand <>4__this;

			[Token(Token = "0x4001E71")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Grabbable grab;

			[Token(Token = "0x4001E72")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public RaycastHit hit;

			[Token(Token = "0x4001E73")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public GrabType grabType;

			[Token(Token = "0x4001E74")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private <>c__DisplayClass129_0 <>8__1;

			[Token(Token = "0x4001E75")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			private bool <instantGrab>5__2;

			[Token(Token = "0x4001E76")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			private HandPoseData <startGrabPose>5__3;

			[Token(Token = "0x4001E77")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			private Vector3 <startGrabbablePosition>5__4;

			[Token(Token = "0x4001E78")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
			private Quaternion <startGrabbableRotation>5__5;

			[Token(Token = "0x4001E79")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
			private float <adjustedGrabTime>5__6;

			[Token(Token = "0x4001E7A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
			private Transform <grabTarget>5__7;

			[Token(Token = "0x4001E7B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
			private HandPoseData <postGrabPose>5__8;

			[Token(Token = "0x4001E7C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
			private Vector3 <endGrabbablePosition>5__9;

			[Token(Token = "0x4001E7D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
			private Quaternion <endGrabbableRotation>5__10;

			[Token(Token = "0x4001E7E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
			private float <i>5__11;

			[Token(Token = "0x4001E7F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
			private bool <useGravity>5__12;

			[Token(Token = "0x1700039A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001DE6")]
				[Address(RVA = "0xE18D20", Offset = "0xE18D20", VA = "0xE18D20", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700039B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001DE8")]
				[Address(RVA = "0xE18D68", Offset = "0xE18D68", VA = "0xE18D68", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001DE3")]
			[Address(RVA = "0xE15C0C", Offset = "0xE15C0C", VA = "0xE15C0C")]
			[DebuggerHidden]
			public <GrabObject>d__129(int <>1__state)
			{
			}

			[Token(Token = "0x6001DE4")]
			[Address(RVA = "0xE16CF4", Offset = "0xE16CF4", VA = "0xE16CF4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001DE5")]
			[Address(RVA = "0xE16CF8", Offset = "0xE16CF8", VA = "0xE16CF8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001DE7")]
			[Address(RVA = "0xE18D28", Offset = "0xE18D28", VA = "0xE18D28", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20005AE")]
		[CompilerGenerated]
		private sealed class <LerpHandPose>d__131 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001E80")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001E81")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001E82")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Hand <>4__this;

			[Token(Token = "0x4001E83")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public HandPoseData fromPose;

			[Token(Token = "0x4001E84")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public HandPoseData toPose;

			[Token(Token = "0x4001E85")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			public float totalTime;

			[Token(Token = "0x4001E86")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
			private float <timePassed>5__2;

			[Token(Token = "0x1700039C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001DEC")]
				[Address(RVA = "0xE18FB0", Offset = "0xE18FB0", VA = "0xE18FB0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700039D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001DEE")]
				[Address(RVA = "0xE18FF8", Offset = "0xE18FF8", VA = "0xE18FF8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001DE9")]
			[Address(RVA = "0xE15D60", Offset = "0xE15D60", VA = "0xE15D60")]
			[DebuggerHidden]
			public <LerpHandPose>d__131(int <>1__state)
			{
			}

			[Token(Token = "0x6001DEA")]
			[Address(RVA = "0xE18D70", Offset = "0xE18D70", VA = "0xE18D70", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001DEB")]
			[Address(RVA = "0xE18D74", Offset = "0xE18D74", VA = "0xE18D74", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001DED")]
			[Address(RVA = "0xE18FB8", Offset = "0xE18FB8", VA = "0xE18FB8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001E3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x23C")]
		[AutoToggleHeader("Enable Highlight", 0, 0, tooltip = "Raycasting for grabbables to highlight is expensive, you can disable it here if you aren't using it")]
		public bool usingHighlight;

		[Token(Token = "0x4001E3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		[Tooltip("The layers to highlight and use look assist on --- Nothing will default on start")]
		[EnableIf("usingHighlight")]
		public LayerMask highlightLayers;

		[Token(Token = "0x4001E3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
		[EnableIf("usingHighlight")]
		[Tooltip("Leave empty for none - used as a default option for all grabbables with empty highlight material")]
		public Material defaultHighlight;

		[Token(Token = "0x4001E3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
		[AutoToggleHeader("Show Advanced", 0, 0)]
		public bool showAdvanced;

		[Token(Token = "0x4001E3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x254")]
		[ShowIf("showAdvanced")]
		[Tooltip("Whether the hand should go to the object and come back on grab, or the object to float to the hand on grab. Will default to HandToGrabbable for objects that have \"parentOnGrab\" disabled")]
		public GrabType grabType;

		[Token(Token = "0x4001E3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
		[ShowIf("showAdvanced")]
		[Tooltip("Makes grab smoother; also based on range and reach distance - a very near grab is minGrabTime and a max distance grab is maxGrabTime")]
		[Min(0f)]
		public float minGrabTime;

		[Token(Token = "0x4001E40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25C")]
		[ShowIf("showAdvanced")]
		[Tooltip("Makes grab smoother; also based on range and reach distance - a very near grab is minGrabTime and a max distance grab is maxGrabTime")]
		[Min(0f)]
		public float maxGrabTime;

		[Token(Token = "0x4001E41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
		[ShowIf("showAdvanced")]
		[Min(0f)]
		[Tooltip("The animation curve based on the grab time 0-1")]
		public AnimationCurve grabCurve;

		[Token(Token = "0x4001E42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
		[FormerlySerializedAs("smoothReturnSpeed")]
		[Min(0f)]
		[Tooltip("Speed at which the gentle grab returns the grabbable")]
		[ShowIf("showAdvanced")]
		public float gentleGrabSpeed;

		[Token(Token = "0x4001E43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x26C")]
		[ShowIf("showAdvanced")]
		[Tooltip("This is used in conjunction with custom poses. For a custom pose to work it must has the same PoseIndex as the hand. Used for when your game has multiple hands")]
		public int poseIndex;

		[Token(Token = "0x4001E44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
		[AutoLine(0, 0)]
		public bool ignoreMe1;

		[Token(Token = "0x4001E45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static string[] grabbableLayers;

		[Token(Token = "0x4001E46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static string grabbableLayerNameDefault;

		[Token(Token = "0x4001E47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static string grabbingLayerName;

		[Token(Token = "0x4001E48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static string rightHandLayerName;

		[Token(Token = "0x4001E49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static string leftHandLayerName;

		[Token(Token = "0x4001E5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x300")]
		private List<HandTriggerAreaEvents> triggerEventAreas;

		[Token(Token = "0x4001E5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x308")]
		private Coroutine tryGrab;

		[Token(Token = "0x4001E5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x310")]
		private Coroutine highlightRoutine;

		[Token(Token = "0x4001E5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x318")]
		private float startGrabDist;

		[Token(Token = "0x4001E5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x320")]
		private HandPoseData openHandPose;

		[Token(Token = "0x4001E60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x358")]
		private Grabbable lastHoldingObj;

		[Token(Token = "0x4001E61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x360")]
		private Coroutine _grabRoutine;

		[Token(Token = "0x4001E62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x368")]
		public Hand copyFromHand;

		[Token(Token = "0x4001E63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x370")]
		private Vector3 startHandGrabPosition;

		[Token(Token = "0x17000397")]
		private Coroutine grabRoutine
		{
			[Token(Token = "0x6001D94")]
			[Address(RVA = "0xE10C38", Offset = "0xE10C38", VA = "0xE10C38")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001D95")]
			[Address(RVA = "0xE10C40", Offset = "0xE10C40", VA = "0xE10C40")]
			set
			{
			}
		}

		[Token(Token = "0x14000029")]
		public event HandGrabEvent OnTriggerGrab
		{
			[Token(Token = "0x6001D72")]
			[Address(RVA = "0xE0F838", Offset = "0xE0F838", VA = "0xE0F838")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001D73")]
			[Address(RVA = "0xE0F8D8", Offset = "0xE0F8D8", VA = "0xE0F8D8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400002A")]
		public event HandGrabEvent OnBeforeGrabbed
		{
			[Token(Token = "0x6001D74")]
			[Address(RVA = "0xE0F978", Offset = "0xE0F978", VA = "0xE0F978")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001D75")]
			[Address(RVA = "0xE0FA18", Offset = "0xE0FA18", VA = "0xE0FA18")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400002B")]
		public event HandGrabEvent OnGrabbed
		{
			[Token(Token = "0x6001D76")]
			[Address(RVA = "0xE0FAB8", Offset = "0xE0FAB8", VA = "0xE0FAB8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001D77")]
			[Address(RVA = "0xE0FB58", Offset = "0xE0FB58", VA = "0xE0FB58")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400002C")]
		public event HandGrabEvent OnTriggerRelease
		{
			[Token(Token = "0x6001D78")]
			[Address(RVA = "0xE0FBF8", Offset = "0xE0FBF8", VA = "0xE0FBF8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001D79")]
			[Address(RVA = "0xE0FC98", Offset = "0xE0FC98", VA = "0xE0FC98")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400002D")]
		public event HandGrabEvent OnBeforeReleased
		{
			[Token(Token = "0x6001D7A")]
			[Address(RVA = "0xE0FD38", Offset = "0xE0FD38", VA = "0xE0FD38")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001D7B")]
			[Address(RVA = "0xE0FDD8", Offset = "0xE0FDD8", VA = "0xE0FDD8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400002E")]
		public event HandGrabEvent OnReleased
		{
			[Token(Token = "0x6001D7C")]
			[Address(RVA = "0xE0CA60", Offset = "0xE0CA60", VA = "0xE0CA60")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001D7D")]
			[Address(RVA = "0xE0D73C", Offset = "0xE0D73C", VA = "0xE0D73C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400002F")]
		public event HandGrabEvent OnSqueezed
		{
			[Token(Token = "0x6001D7E")]
			[Address(RVA = "0xE0FE78", Offset = "0xE0FE78", VA = "0xE0FE78")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001D7F")]
			[Address(RVA = "0xE0FF18", Offset = "0xE0FF18", VA = "0xE0FF18")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000030")]
		public event HandGrabEvent OnUnsqueezed
		{
			[Token(Token = "0x6001D80")]
			[Address(RVA = "0xE0FFB8", Offset = "0xE0FFB8", VA = "0xE0FFB8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001D81")]
			[Address(RVA = "0xE10058", Offset = "0xE10058", VA = "0xE10058")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000031")]
		public event HandGrabEvent OnHighlight
		{
			[Token(Token = "0x6001D82")]
			[Address(RVA = "0xE100F8", Offset = "0xE100F8", VA = "0xE100F8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001D83")]
			[Address(RVA = "0xE10198", Offset = "0xE10198", VA = "0xE10198")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000032")]
		public event HandGrabEvent OnStopHighlight
		{
			[Token(Token = "0x6001D84")]
			[Address(RVA = "0xE10238", Offset = "0xE10238", VA = "0xE10238")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001D85")]
			[Address(RVA = "0xE102D8", Offset = "0xE102D8", VA = "0xE102D8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000033")]
		public event HandGrabEvent OnForcedRelease
		{
			[Token(Token = "0x6001D86")]
			[Address(RVA = "0xE10378", Offset = "0xE10378", VA = "0xE10378")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001D87")]
			[Address(RVA = "0xE10418", Offset = "0xE10418", VA = "0xE10418")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000034")]
		public event HandGrabEvent OnGrabJointBreak
		{
			[Token(Token = "0x6001D88")]
			[Address(RVA = "0xE104B8", Offset = "0xE104B8", VA = "0xE104B8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001D89")]
			[Address(RVA = "0xE10558", Offset = "0xE10558", VA = "0xE10558")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000035")]
		public event HandGrabEvent OnHeldConnectionBreak
		{
			[Token(Token = "0x6001D8A")]
			[Address(RVA = "0xE105F8", Offset = "0xE105F8", VA = "0xE105F8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001D8B")]
			[Address(RVA = "0xE10698", Offset = "0xE10698", VA = "0xE10698")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000036")]
		public event HandGameObjectEvent OnHandCollisionStart
		{
			[Token(Token = "0x6001D8C")]
			[Address(RVA = "0xE10738", Offset = "0xE10738", VA = "0xE10738")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001D8D")]
			[Address(RVA = "0xE107D8", Offset = "0xE107D8", VA = "0xE107D8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000037")]
		public event HandGameObjectEvent OnHandCollisionStop
		{
			[Token(Token = "0x6001D8E")]
			[Address(RVA = "0xE10878", Offset = "0xE10878", VA = "0xE10878")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001D8F")]
			[Address(RVA = "0xE10918", Offset = "0xE10918", VA = "0xE10918")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000038")]
		public event HandGameObjectEvent OnHandTriggerStart
		{
			[Token(Token = "0x6001D90")]
			[Address(RVA = "0xE109B8", Offset = "0xE109B8", VA = "0xE109B8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001D91")]
			[Address(RVA = "0xE10A58", Offset = "0xE10A58", VA = "0xE10A58")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000039")]
		public event HandGameObjectEvent OnHandTriggerStop
		{
			[Token(Token = "0x6001D92")]
			[Address(RVA = "0xE10AF8", Offset = "0xE10AF8", VA = "0xE10AF8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001D93")]
			[Address(RVA = "0xE10B98", Offset = "0xE10B98", VA = "0xE10B98")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6001D96")]
		[Address(RVA = "0xE10DA0", Offset = "0xE10DA0", VA = "0xE10DA0", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6001D97")]
		[Address(RVA = "0xE10FB8", Offset = "0xE10FB8", VA = "0xE10FB8", Slot = "5")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6001D98")]
		[Address(RVA = "0xE11368", Offset = "0xE11368", VA = "0xE11368", Slot = "6")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x6001D99")]
		[Address(RVA = "0xE117CC", Offset = "0xE117CC", VA = "0xE117CC", Slot = "9")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6001D9A")]
		[Address(RVA = "0xE11E1C", Offset = "0xE11E1C", VA = "0xE11E1C")]
		private float GetGrabTime()
		{
			return default(float);
		}

		[Token(Token = "0x6001D9B")]
		[Address(RVA = "0xE11FF8", Offset = "0xE11FF8", VA = "0xE11FF8", Slot = "20")]
		public virtual void Grab()
		{
		}

		[Token(Token = "0x6001D9C")]
		[Address(RVA = "0xE1200C", Offset = "0xE1200C", VA = "0xE1200C", Slot = "21")]
		public virtual void Grab(GrabType grabType)
		{
		}

		[Token(Token = "0x6001D9D")]
		[Address(RVA = "0xE1258C", Offset = "0xE1258C", VA = "0xE1258C", Slot = "22")]
		public virtual void Grab(RaycastHit hit, Grabbable grab, GrabType grabType = GrabType.InstantGrab)
		{
		}

		[Token(Token = "0x6001D9E")]
		[Address(RVA = "0xE126D4", Offset = "0xE126D4", VA = "0xE126D4", Slot = "23")]
		public virtual void TryGrab(Grabbable grab)
		{
		}

		[Token(Token = "0x6001D9F")]
		[Address(RVA = "0xE12F60", Offset = "0xE12F60", VA = "0xE12F60", Slot = "24")]
		public virtual void Release()
		{
		}

		[Token(Token = "0x6001DA0")]
		[Address(RVA = "0xE1321C", Offset = "0xE1321C", VA = "0xE1321C", Slot = "25")]
		public virtual void ForceReleaseGrab()
		{
		}

		[Token(Token = "0x6001DA1")]
		[Address(RVA = "0xE132C8", Offset = "0xE132C8", VA = "0xE132C8", Slot = "26")]
		public virtual void ReleaseGrabLock()
		{
		}

		[Token(Token = "0x6001DA2")]
		[Address(RVA = "0xE132D8", Offset = "0xE132D8", VA = "0xE132D8", Slot = "27")]
		public virtual void Squeeze()
		{
		}

		[Token(Token = "0x6001DA3")]
		[Address(RVA = "0xE1346C", Offset = "0xE1346C", VA = "0xE1346C", Slot = "28")]
		public virtual void Unsqueeze()
		{
		}

		[Token(Token = "0x6001DA4")]
		[Address(RVA = "0xE13600", Offset = "0xE13600", VA = "0xE13600", Slot = "29")]
		public virtual void BreakGrabConnection(bool callEvent = true)
		{
		}

		[Token(Token = "0x6001DA5")]
		[Address(RVA = "0xE139A4", Offset = "0xE139A4", VA = "0xE139A4", Slot = "30")]
		public virtual void CreateGrabConnection(Grabbable grab, Vector3 handPos, Quaternion handRot, Vector3 grabPos, Quaternion grabRot, bool executeGrabEvents = false)
		{
		}

		[Token(Token = "0x6001DA6")]
		[Address(RVA = "0xE13EFC", Offset = "0xE13EFC", VA = "0xE13EFC", Slot = "31")]
		public virtual void OnJointBreak(float breakForce)
		{
		}

		[Token(Token = "0x6001DA7")]
		[Address(RVA = "0xE1408C", Offset = "0xE1408C", VA = "0xE1408C", Slot = "32")]
		public virtual void UpdateHighlight()
		{
		}

		[Token(Token = "0x6001DA8")]
		[Address(RVA = "0xE12458", Offset = "0xE12458", VA = "0xE12458")]
		public RaycastHit GetHighlightHit()
		{
			return default(RaycastHit);
		}

		[Token(Token = "0x6001DA9")]
		[Address(RVA = "0xE143B0", Offset = "0xE143B0", VA = "0xE143B0")]
		public void AutoPose(RaycastHit hit, Grabbable grabbable)
		{
		}

		[Token(Token = "0x6001DAA")]
		[Address(RVA = "0xE149DC", Offset = "0xE149DC", VA = "0xE149DC")]
		public HandPoseData GetHandPose()
		{
			return default(HandPoseData);
		}

		[Token(Token = "0x6001DAB")]
		[Address(RVA = "0xE149FC", Offset = "0xE149FC", VA = "0xE149FC")]
		public HandPoseData GetHeldPose()
		{
			return default(HandPoseData);
		}

		[Token(Token = "0x6001DAC")]
		[Address(RVA = "0xE14AB8", Offset = "0xE14AB8", VA = "0xE14AB8", Slot = "33")]
		public virtual void SetHeldPose(HandPoseData pose, Grabbable grabbable, bool createJoint = true)
		{
		}

		[Token(Token = "0x6001DAD")]
		[Address(RVA = "0xE14D60", Offset = "0xE14D60", VA = "0xE14D60")]
		public void SetHandPose(HandPoseData pose)
		{
		}

		[Token(Token = "0x6001DAE")]
		[Address(RVA = "0xE14D78", Offset = "0xE14D78", VA = "0xE14D78")]
		public void SetHandPose(GrabbablePose pose)
		{
		}

		[Token(Token = "0x6001DAF")]
		[Address(RVA = "0xE14DF0", Offset = "0xE14DF0", VA = "0xE14DF0")]
		public void UpdatePose(HandPoseData pose, float time)
		{
		}

		[Token(Token = "0x6001DB0")]
		[Address(RVA = "0xE14F24", Offset = "0xE14F24", VA = "0xE14F24")]
		public GrabbablePose GetGrabPose(Transform from, Grabbable grabbable)
		{
			return null;
		}

		[Token(Token = "0x6001DB1")]
		[Address(RVA = "0xE14F90", Offset = "0xE14F90", VA = "0xE14F90")]
		public bool GetCurrentHeldGrabPose(Transform from, Grabbable grabbable, out GrabbablePose grabPose, out Transform relativeTo)
		{
			return default(bool);
		}

		[Token(Token = "0x6001DB2")]
		[Address(RVA = "0xE150A8", Offset = "0xE150A8", VA = "0xE150A8")]
		public Grabbable GetHeldGrabbable()
		{
			return null;
		}

		[Token(Token = "0x6001DB3")]
		[Address(RVA = "0xE150B0", Offset = "0xE150B0", VA = "0xE150B0")]
		public Grabbable GetHeld()
		{
			return null;
		}

		[Token(Token = "0x6001DB4")]
		[Address(RVA = "0xE150B8", Offset = "0xE150B8", VA = "0xE150B8")]
		public bool IsSqueezing()
		{
			return default(bool);
		}

		[Token(Token = "0x6001DB5")]
		[Address(RVA = "0xE150C0", Offset = "0xE150C0", VA = "0xE150C0")]
		public void ResetGrabOffset()
		{
		}

		[Token(Token = "0x6001DB6")]
		[Address(RVA = "0xE151F8", Offset = "0xE151F8", VA = "0xE151F8")]
		public void SetGrip(float grip)
		{
		}

		[Token(Token = "0x6001DB7")]
		[Address(RVA = "0xE15200", Offset = "0xE15200", VA = "0xE15200")]
		[ContextMenu("Set Pose - Relax Hand")]
		public void RelaxHand()
		{
		}

		[Token(Token = "0x6001DB8")]
		[Address(RVA = "0xE15264", Offset = "0xE15264", VA = "0xE15264")]
		[ContextMenu("Set Pose - Open Hand")]
		public void OpenHand()
		{
		}

		[Token(Token = "0x6001DB9")]
		[Address(RVA = "0xE152C4", Offset = "0xE152C4", VA = "0xE152C4")]
		[ContextMenu("Set Pose - Close Hand")]
		public void CloseHand()
		{
		}

		[Token(Token = "0x6001DBA")]
		[Address(RVA = "0xE15330", Offset = "0xE15330", VA = "0xE15330")]
		[ContextMenu("Bend Fingers Until Hit")]
		public void ProceduralFingerBend()
		{
		}

		[Token(Token = "0x6001DBB")]
		[Address(RVA = "0xE15458", Offset = "0xE15458", VA = "0xE15458")]
		public void ProceduralFingerBend(int layermask)
		{
		}

		[Token(Token = "0x6001DBC")]
		[Address(RVA = "0xE154CC", Offset = "0xE154CC", VA = "0xE154CC")]
		public void ProceduralFingerBend(RaycastHit hit)
		{
		}

		[Token(Token = "0x6001DBD")]
		[Address(RVA = "0xE15574", Offset = "0xE15574", VA = "0xE15574")]
		public void PlayHapticVibration()
		{
		}

		[Token(Token = "0x6001DBE")]
		[Address(RVA = "0xE1560C", Offset = "0xE1560C", VA = "0xE1560C")]
		public void PlayHapticVibration(float duration)
		{
		}

		[Token(Token = "0x6001DBF")]
		[Address(RVA = "0xE15584", Offset = "0xE15584", VA = "0xE15584")]
		public void PlayHapticVibration(float duration, float amp = 0.5f)
		{
		}

		[Token(Token = "0x6001DC0")]
		[Address(RVA = "0xE15614", Offset = "0xE15614", VA = "0xE15614")]
		[ContextMenu("COPY POSE")]
		[Button("Copy Pose", EButtonEnableMode.Always)]
		public void CopyPose()
		{
		}

		[Token(Token = "0x6001DC1")]
		[Address(RVA = "0xE157B4", Offset = "0xE157B4", VA = "0xE157B4")]
		[ContextMenu("SAVE OPEN")]
		[Button("Save Open Pose", EButtonEnableMode.Always)]
		public void SaveOpenPose()
		{
		}

		[Token(Token = "0x6001DC2")]
		[Address(RVA = "0xE15868", Offset = "0xE15868", VA = "0xE15868")]
		[ContextMenu("SAVE CLOSED")]
		[Button("Save Closed Pose", EButtonEnableMode.Always)]
		public void SaveClosedPose()
		{
		}

		[Token(Token = "0x6001DC3")]
		[Address(RVA = "0xE1591C", Offset = "0xE1591C", VA = "0xE1591C", Slot = "34")]
		protected virtual void OnCollisionFirstEnter(GameObject collision)
		{
		}

		[Token(Token = "0x6001DC4")]
		[Address(RVA = "0xE15998", Offset = "0xE15998", VA = "0xE15998", Slot = "35")]
		protected virtual void OnCollisionLastExit(GameObject collision)
		{
		}

		[Token(Token = "0x6001DC5")]
		[Address(RVA = "0xE15A14", Offset = "0xE15A14", VA = "0xE15A14", Slot = "36")]
		protected virtual void OnTriggerFirstEnter(GameObject other)
		{
		}

		[Token(Token = "0x6001DC6")]
		[Address(RVA = "0xE15B24", Offset = "0xE15B24", VA = "0xE15B24", Slot = "37")]
		protected virtual void OnTriggerLastExit(GameObject other)
		{
		}

		[Token(Token = "0x6001DC7")]
		[Address(RVA = "0xE112E4", Offset = "0xE112E4", VA = "0xE112E4")]
		[IteratorStateMachine(typeof(<HighlightUpdate>d__127))]
		private IEnumerator HighlightUpdate(float timestep)
		{
			return null;
		}

		[Token(Token = "0x6001DC8")]
		[Address(RVA = "0xE124D0", Offset = "0xE124D0", VA = "0xE124D0")]
		[IteratorStateMachine(typeof(<GrabObject>d__129))]
		protected IEnumerator GrabObject(RaycastHit hit, Grabbable grab, GrabType grabType)
		{
			return null;
		}

		[Token(Token = "0x6001DC9")]
		[Address(RVA = "0xE15C34", Offset = "0xE15C34", VA = "0xE15C34")]
		protected void CancelPose()
		{
		}

		[Token(Token = "0x6001DCA")]
		[Address(RVA = "0xE15C80", Offset = "0xE15C80", VA = "0xE15C80", Slot = "38")]
		[IteratorStateMachine(typeof(<LerpHandPose>d__131))]
		protected virtual IEnumerator LerpHandPose(HandPoseData fromPose, HandPoseData toPose, float totalTime)
		{
			return null;
		}

		[Token(Token = "0x6001DCB")]
		[Address(RVA = "0xE15D88", Offset = "0xE15D88", VA = "0xE15D88", Slot = "39")]
		protected virtual void CheckEnterPoseArea(GameObject other)
		{
		}

		[Token(Token = "0x6001DCC")]
		[Address(RVA = "0xE1635C", Offset = "0xE1635C", VA = "0xE1635C", Slot = "40")]
		protected virtual void CheckExitPoseArea(GameObject other)
		{
		}

		[Token(Token = "0x6001DCD")]
		[Address(RVA = "0xE16098", Offset = "0xE16098", VA = "0xE16098")]
		internal void TryRemoveHandPoseArea(HandPoseArea poseArea)
		{
		}

		[Token(Token = "0x6001DCE")]
		[Address(RVA = "0xE163F8", Offset = "0xE163F8", VA = "0xE163F8")]
		private void ClearPoseArea()
		{
		}

		[Token(Token = "0x6001DCF")]
		[Address(RVA = "0xE164AC", Offset = "0xE164AC", VA = "0xE164AC", Slot = "41")]
		internal virtual void RemoveHandTriggerArea(HandTriggerAreaEvents handTrigger)
		{
		}

		[Token(Token = "0x6001DD0")]
		[Address(RVA = "0xE1651C", Offset = "0xE1651C", VA = "0xE1651C")]
		public Hand()
		{
		}
	}
	[Token(Token = "0x20005AF")]
	[RequireComponent(typeof(Hand))]
	[DefaultExecutionOrder(10000)]
	public class HandAdvancedOptions : MonoBehaviour
	{
		[Token(Token = "0x4001E87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Meant for things childed under the Hand. These transforms will not be set to the hand layer on start")]
		public List<Collider> ignoreHandCollider;

		[Token(Token = "0x4001E88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Hand hand;

		[Token(Token = "0x6001DEF")]
		[Address(RVA = "0xE19000", Offset = "0xE19000", VA = "0xE19000")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001DF0")]
		[Address(RVA = "0xE19058", Offset = "0xE19058", VA = "0xE19058")]
		private void Start()
		{
		}

		[Token(Token = "0x6001DF1")]
		[Address(RVA = "0xE190FC", Offset = "0xE190FC", VA = "0xE190FC")]
		public HandAdvancedOptions()
		{
		}
	}
	[Token(Token = "0x20005B0")]
	[RequireComponent(typeof(Hand))]
	public class HandCollisionHaptics : MonoBehaviour
	{
		[Token(Token = "0x20005B1")]
		[CompilerGenerated]
		private sealed class <PlayBuffer>d__14 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001E94")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001E95")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001E96")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HandCollisionHaptics <>4__this;

			[Token(Token = "0x1700039E")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001DFB")]
				[Address(RVA = "0xE19748", Offset = "0xE19748", VA = "0xE19748", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700039F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001DFD")]
				[Address(RVA = "0xE19790", Offset = "0xE19790", VA = "0xE19790", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001DF8")]
			[Address(RVA = "0xE1964C", Offset = "0xE1964C", VA = "0xE1964C")]
			[DebuggerHidden]
			public <PlayBuffer>d__14(int <>1__state)
			{
			}

			[Token(Token = "0x6001DF9")]
			[Address(RVA = "0xE19674", Offset = "0xE19674", VA = "0xE19674", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001DFA")]
			[Address(RVA = "0xE19678", Offset = "0xE19678", VA = "0xE19678", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001DFC")]
			[Address(RVA = "0xE19750", Offset = "0xE19750", VA = "0xE19750", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20005B2")]
		[CompilerGenerated]
		private sealed class <HapticPlayBuffer>d__15 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001E97")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001E98")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001E99")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HandCollisionHaptics <>4__this;

			[Token(Token = "0x4001E9A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float time;

			[Token(Token = "0x170003A0")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001E01")]
				[Address(RVA = "0xE19894", Offset = "0xE19894", VA = "0xE19894", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003A1")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001E03")]
				[Address(RVA = "0xE198DC", Offset = "0xE198DC", VA = "0xE198DC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001DFE")]
			[Address(RVA = "0xE19798", Offset = "0xE19798", VA = "0xE19798")]
			[DebuggerHidden]
			public <HapticPlayBuffer>d__15(int <>1__state)
			{
			}

			[Token(Token = "0x6001DFF")]
			[Address(RVA = "0xE197C0", Offset = "0xE197C0", VA = "0xE197C0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001E00")]
			[Address(RVA = "0xE197C4", Offset = "0xE197C4", VA = "0xE197C4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001E02")]
			[Address(RVA = "0xE1989C", Offset = "0xE1989C", VA = "0xE1989C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001E89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The layers that cause the sound to play")]
		public LayerMask collisionTriggers;

		[Token(Token = "0x4001E8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float hapticAmp;

		[Token(Token = "0x4001E8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float velocityAmp;

		[Token(Token = "0x4001E8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float repeatDelay;

		[Token(Token = "0x4001E8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float maxDuration;

		[Token(Token = "0x4001E8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Source to play sound from")]
		public AnimationCurve velocityAmpCurve;

		[Token(Token = "0x4001E8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Source to play sound from")]
		public AnimationCurve velocityDurationCurve;

		[Token(Token = "0x4001E90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Hand hand;

		[Token(Token = "0x4001E91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Rigidbody body;

		[Token(Token = "0x4001E92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool canPlay;

		[Token(Token = "0x4001E93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Coroutine playRoutine;

		[Token(Token = "0x6001DF2")]
		[Address(RVA = "0xE19184", Offset = "0xE19184", VA = "0xE19184")]
		private void Start()
		{
		}

		[Token(Token = "0x6001DF3")]
		[Address(RVA = "0xE192B4", Offset = "0xE192B4", VA = "0xE192B4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001DF4")]
		[Address(RVA = "0xE192C8", Offset = "0xE192C8", VA = "0xE192C8")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6001DF5")]
		[Address(RVA = "0xE19540", Offset = "0xE19540", VA = "0xE19540")]
		[IteratorStateMachine(typeof(<PlayBuffer>d__14))]
		private IEnumerator PlayBuffer()
		{
			return null;
		}

		[Token(Token = "0x6001DF6")]
		[Address(RVA = "0xE19230", Offset = "0xE19230", VA = "0xE19230")]
		[IteratorStateMachine(typeof(<HapticPlayBuffer>d__15))]
		private IEnumerator HapticPlayBuffer(float time)
		{
			return null;
		}

		[Token(Token = "0x6001DF7")]
		[Address(RVA = "0xE195B4", Offset = "0xE195B4", VA = "0xE195B4")]
		public HandCollisionHaptics()
		{
		}
	}
	[Token(Token = "0x20005B3")]
	public class HandControllerLink : MonoBehaviour
	{
		[Token(Token = "0x4001E9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static HandControllerLink handLeft;

		[Token(Token = "0x4001E9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static HandControllerLink handRight;

		[Token(Token = "0x4001E9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Hand hand;

		[Token(Token = "0x6001E04")]
		[Address(RVA = "0xE198E4", Offset = "0xE198E4", VA = "0xE198E4", Slot = "4")]
		public virtual void TryHapticImpulse(float duration, float amp, float freq = 10f)
		{
		}

		[Token(Token = "0x6001E05")]
		[Address(RVA = "0xE198E8", Offset = "0xE198E8", VA = "0xE198E8")]
		public HandControllerLink()
		{
		}
	}
	[Token(Token = "0x20005B4")]
	[HelpURL("https://earnestrobot.notion.site/Distance-Grabbing-19e4e8b14f00428295eca75fca752787")]
	[DefaultExecutionOrder(2)]
	public class HandDistanceGrabber : MonoBehaviour
	{
		[Token(Token = "0x20005B5")]
		[CompilerGenerated]
		private sealed class <>c__DisplayClass62_0
		{
			[Token(Token = "0x4001EC5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public HandDistanceGrabber <>4__this;

			[Token(Token = "0x4001EC6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public DistanceGrabbable grab;

			[Token(Token = "0x4001EC7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float estimatedRadius;

			[Token(Token = "0x6001E23")]
			[Address(RVA = "0xE1C040", Offset = "0xE1C040", VA = "0xE1C040")]
			public <>c__DisplayClass62_0()
			{
			}

			[Token(Token = "0x6001E24")]
			[Address(RVA = "0xE1C048", Offset = "0xE1C048", VA = "0xE1C048")]
			internal void <StartCatchAssist>b__0(Hand hand, Grabbable grabbable)
			{
			}

			[Token(Token = "0x6001E25")]
			[Address(RVA = "0xE1C0E4", Offset = "0xE1C0E4", VA = "0xE1C0E4")]
			internal void <StartCatchAssist>b__1(Hand hand, Grabbable grabbable)
			{
			}

			[Token(Token = "0x6001E27")]
			[Address(RVA = "0xE1C688", Offset = "0xE1C688", VA = "0xE1C688")]
			internal void <StartCatchAssist>b__5(Hand hand, Grabbable grabbable)
			{
			}

			[Token(Token = "0x6001E28")]
			[Address(RVA = "0xE1C724", Offset = "0xE1C724", VA = "0xE1C724")]
			internal void <StartCatchAssist>b__6(Hand hand, Grabbable grabbable)
			{
			}
		}

		[Token(Token = "0x20005B6")]
		[CompilerGenerated]
		private sealed class <>c__DisplayClass62_1
		{
			[Token(Token = "0x4001EC8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool cancelInstantGrab;

			[Token(Token = "0x6001E29")]
			[Address(RVA = "0xE1C7C0", Offset = "0xE1C7C0", VA = "0xE1C7C0")]
			public <>c__DisplayClass62_1()
			{
			}

			[Token(Token = "0x6001E2A")]
			[Address(RVA = "0xE1C7C8", Offset = "0xE1C7C8", VA = "0xE1C7C8")]
			internal void <StartCatchAssist>b__2(Hand hand, Grabbable grabbable)
			{
			}

			[Token(Token = "0x6001E2B")]
			[Address(RVA = "0xE1C7D4", Offset = "0xE1C7D4", VA = "0xE1C7D4")]
			internal void <StartCatchAssist>b__4(Hand hand, Grabbable grabbable)
			{
			}
		}

		[Token(Token = "0x20005B7")]
		[CompilerGenerated]
		private sealed class <StartCatchAssist>d__62 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001EC9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001ECA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001ECB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HandDistanceGrabber <>4__this;

			[Token(Token = "0x4001ECC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public DistanceGrabbable grab;

			[Token(Token = "0x4001ECD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float estimatedRadius;

			[Token(Token = "0x4001ECE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private <>c__DisplayClass62_0 <>8__1;

			[Token(Token = "0x4001ECF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private <>c__DisplayClass62_1 <>8__2;

			[Token(Token = "0x4001ED0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private float <time>5__2;

			[Token(Token = "0x170003A3")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001E2F")]
				[Address(RVA = "0xE1CE90", Offset = "0xE1CE90", VA = "0xE1CE90", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003A4")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001E31")]
				[Address(RVA = "0xE1CED8", Offset = "0xE1CED8", VA = "0xE1CED8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001E2C")]
			[Address(RVA = "0xE1BD28", Offset = "0xE1BD28", VA = "0xE1BD28")]
			[DebuggerHidden]
			public <StartCatchAssist>d__62(int <>1__state)
			{
			}

			[Token(Token = "0x6001E2D")]
			[Address(RVA = "0xE1C7E0", Offset = "0xE1C7E0", VA = "0xE1C7E0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001E2E")]
			[Address(RVA = "0xE1C7E4", Offset = "0xE1C7E4", VA = "0xE1C7E4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001E30")]
			[Address(RVA = "0xE1CE98", Offset = "0xE1CE98", VA = "0xE1CE98", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001E9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Hands")]
		[Tooltip("The primaryHand used to trigger pulling or flicking")]
		public Hand primaryHand;

		[Token(Token = "0x4001E9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("This is important for catch assistance")]
		public Hand secondaryHand;

		[Token(Token = "0x4001EA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Pointing Options")]
		public Transform forwardPointer;

		[Token(Token = "0x4001EA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public LineRenderer line;

		[Token(Token = "0x4001EA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Space]
		public float maxRange;

		[Token(Token = "0x4001EA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("Defaults to grabbable on start if none")]
		public LayerMask layers;

		[Token(Token = "0x4001EA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Space]
		public Material defaultTargetedMaterial;

		[Token(Token = "0x4001EA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("The highlight material to use when pulling")]
		public Material defaultSelectedMaterial;

		[Token(Token = "0x4001EA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Pull Options")]
		public bool useInstantPull;

		[Token(Token = "0x4001EA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		[Tooltip("If false will default to distance pull, set pullGrabDistance to 0 for instant pull on select")]
		public bool useFlickPull;

		[Token(Token = "0x4001EA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[ShowIf("useFlickPull")]
		[Tooltip("The magnitude of your hands angular velocity for \"flick\" to start")]
		public float flickThreshold;

		[Token(Token = "0x4001EA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HideIf("useFlickPull")]
		[Tooltip("The amount you need to move your hand from the select position to trigger the grab")]
		public float pullGrabDistance;

		[Token(Token = "0x4001EAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("If this is true the object will be grabbed when entering the radius")]
		[Space]
		public bool instantGrabAssist;

		[Token(Token = "0x4001EAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The radius around of thrown object")]
		public float catchAssistRadius;

		[Token(Token = "0x4001EAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[AutoToggleHeader("Show Events", 0, 0)]
		public bool showEvents;

		[Token(Token = "0x4001EAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[ShowIf("showEvents")]
		public UnityHandGrabEvent OnPull;

		[Token(Token = "0x4001EAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[ShowIf("showEvents")]
		public UnityHandEvent StartPoint;

		[Token(Token = "0x4001EAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[ShowIf("showEvents")]
		public UnityHandEvent StopPoint;

		[Token(Token = "0x4001EB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[ShowIf("showEvents")]
		[Tooltip("Targeting is started when object is highlighted")]
		public UnityHandGrabEvent StartTarget;

		[Token(Token = "0x4001EB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[ShowIf("showEvents")]
		public UnityHandGrabEvent StopTarget;

		[Token(Token = "0x4001EB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[ShowIf("showEvents")]
		[Tooltip("Selecting is started when grab is selected on highlight object")]
		public UnityHandGrabEvent StartSelect;

		[Token(Token = "0x4001EB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[ShowIf("showEvents")]
		public UnityHandGrabEvent StopSelect;

		[Token(Token = "0x4001EB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private List<CatchAssistData> catchAssisted;

		[Token(Token = "0x4001EB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private DistanceGrabbable targetingDistanceGrabbable;

		[Token(Token = "0x4001EB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private DistanceGrabbable selectingDistanceGrabbable;

		[Token(Token = "0x4001EB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private float catchAssistSeconds;

		[Token(Token = "0x4001EB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private bool pointing;

		[Token(Token = "0x4001EB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBD")]
		private bool pulling;

		[Token(Token = "0x4001EBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Vector3 startPullPosition;

		[Token(Token = "0x4001EBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private RaycastHit hit;

		[Token(Token = "0x4001EBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Quaternion lastRotation;

		[Token(Token = "0x4001EBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private RaycastHit selectionHit;

		[Token(Token = "0x4001EBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		private float selectedEstimatedRadius;

		[Token(Token = "0x4001EBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private float startLookAssist;

		[Token(Token = "0x4001EC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		private bool lastInstantPull;

		[Token(Token = "0x4001EC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private GameObject _hitPoint;

		[Token(Token = "0x4001EC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private Coroutine catchAssistRoutine;

		[Token(Token = "0x4001EC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private DistanceGrabbable catchAsistGrabbable;

		[Token(Token = "0x4001EC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private CatchAssistData catchAssistData;

		[Token(Token = "0x170003A2")]
		private GameObject hitPoint
		{
			[Token(Token = "0x6001E06")]
			[Address(RVA = "0xE198F0", Offset = "0xE198F0", VA = "0xE198F0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001E07")]
		[Address(RVA = "0xE199EC", Offset = "0xE199EC", VA = "0xE199EC")]
		private void Start()
		{
		}

		[Token(Token = "0x6001E08")]
		[Address(RVA = "0xE19B50", Offset = "0xE19B50", VA = "0xE19B50")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001E09")]
		[Address(RVA = "0xE19DE0", Offset = "0xE19DE0", VA = "0xE19DE0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001E0A")]
		[Address(RVA = "0xE1A08C", Offset = "0xE1A08C", VA = "0xE1A08C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001E0B")]
		[Address(RVA = "0xE1A540", Offset = "0xE1A540", VA = "0xE1A540")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001E0C")]
		[Address(RVA = "0xE19B44", Offset = "0xE19B44", VA = "0xE19B44")]
		public void SetInstantPull()
		{
		}

		[Token(Token = "0x6001E0D")]
		[Address(RVA = "0xE1A5A8", Offset = "0xE1A5A8", VA = "0xE1A5A8")]
		public void SetPull(float distance)
		{
		}

		[Token(Token = "0x6001E0E")]
		[Address(RVA = "0xE1A5B4", Offset = "0xE1A5B4", VA = "0xE1A5B4")]
		public void SetFlickPull(float threshold)
		{
		}

		[Token(Token = "0x6001E0F")]
		[Address(RVA = "0xE1A0C0", Offset = "0xE1A0C0", VA = "0xE1A0C0")]
		private void CheckDistanceGrabbable()
		{
		}

		[Token(Token = "0x6001E10")]
		[Address(RVA = "0xE1A95C", Offset = "0xE1A95C", VA = "0xE1A95C", Slot = "4")]
		public virtual void StartPointing()
		{
		}

		[Token(Token = "0x6001E11")]
		[Address(RVA = "0xE1A9C0", Offset = "0xE1A9C0", VA = "0xE1A9C0", Slot = "5")]
		public virtual void StopPointing()
		{
		}

		[Token(Token = "0x6001E12")]
		[Address(RVA = "0xE1AAB0", Offset = "0xE1AAB0", VA = "0xE1AAB0", Slot = "6")]
		public virtual void StartTargeting(DistanceGrabbable target)
		{
		}

		[Token(Token = "0x6001E13")]
		[Address(RVA = "0xE1AD20", Offset = "0xE1AD20", VA = "0xE1AD20", Slot = "7")]
		public virtual void StopTargeting()
		{
		}

		[Token(Token = "0x6001E14")]
		[Address(RVA = "0xE1AE74", Offset = "0xE1AE74", VA = "0xE1AE74", Slot = "8")]
		public virtual void SelectTarget()
		{
		}

		[Token(Token = "0x6001E15")]
		[Address(RVA = "0xE1B264", Offset = "0xE1B264", VA = "0xE1B264", Slot = "9")]
		public virtual void CancelSelect()
		{
		}

		[Token(Token = "0x6001E16")]
		[Address(RVA = "0xE1B390", Offset = "0xE1B390", VA = "0xE1B390", Slot = "10")]
		public virtual void ActivatePull()
		{
		}

		[Token(Token = "0x6001E17")]
		[Address(RVA = "0xE1A86C", Offset = "0xE1A86C", VA = "0xE1A86C")]
		private void TryDistancePull()
		{
		}

		[Token(Token = "0x6001E18")]
		[Address(RVA = "0xE1A5C4", Offset = "0xE1A5C4", VA = "0xE1A5C4")]
		private void TryFlickPull()
		{
		}

		[Token(Token = "0x6001E19")]
		[Address(RVA = "0xE1B1D4", Offset = "0xE1B1D4", VA = "0xE1B1D4")]
		private Material GetSelectedMaterial(DistanceGrabbable grabbable)
		{
			return null;
		}

		[Token(Token = "0x6001E1A")]
		[Address(RVA = "0xE1AC8C", Offset = "0xE1AC8C", VA = "0xE1AC8C")]
		private Material GetTargetedMaterial(DistanceGrabbable grabbable)
		{
			return null;
		}

		[Token(Token = "0x6001E1B")]
		[Address(RVA = "0xE1B7EC", Offset = "0xE1B7EC", VA = "0xE1B7EC")]
		private void TryCatchAssist(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6001E1C")]
		[Address(RVA = "0xE1B74C", Offset = "0xE1B74C", VA = "0xE1B74C")]
		[IteratorStateMachine(typeof(<StartCatchAssist>d__62))]
		private IEnumerator StartCatchAssist(DistanceGrabbable grab, float estimatedRadius)
		{
			return null;
		}

		[Token(Token = "0x6001E1D")]
		[Address(RVA = "0xE1BD50", Offset = "0xE1BD50", VA = "0xE1BD50")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6001E1E")]
		[Address(RVA = "0xE1BE9C", Offset = "0xE1BE9C", VA = "0xE1BE9C")]
		public HandDistanceGrabber()
		{
		}
	}
	[Token(Token = "0x20005B8")]
	internal struct CatchAssistData
	{
		[Token(Token = "0x4001ED1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Grabbable grab;

		[Token(Token = "0x4001ED2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float estimatedRadius;

		[Token(Token = "0x6001E32")]
		[Address(RVA = "0xE1CE68", Offset = "0xE1CE68", VA = "0xE1CE68")]
		public CatchAssistData(Grabbable grab, float estimatedRadius)
		{
		}
	}
	[Token(Token = "0x20005B9")]
	[HelpURL("https://www.notion.so/Pose-Areas-99b9af26d297442a91a9d73f65f13635")]
	public class HandPoseArea : MonoBehaviour
	{
		[Token(Token = "0x4001ED3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string poseName;

		[Token(Token = "0x4001ED4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int poseIndex;

		[Token(Token = "0x4001ED5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float transitionTime;

		[Token(Token = "0x4001ED6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Events")]
		public UnityHandEvent OnHandEnter;

		[Token(Token = "0x4001ED7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityHandEvent OnHandExit;

		[Token(Token = "0x4001ED8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		[Tooltip("Scriptable options NOT REQUIRED (will be saved locally instead if empty) -> Create scriptable throught [Auto Hand/Custom Pose]")]
		public HandPoseScriptable poseScriptable;

		[Token(Token = "0x4001ED9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public HandPoseData rightPose;

		[Token(Token = "0x4001EDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[HideInInspector]
		public bool rightPoseSet;

		[Token(Token = "0x4001EDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[HideInInspector]
		public HandPoseData leftPose;

		[Token(Token = "0x4001EDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[HideInInspector]
		public bool leftPoseSet;

		[Token(Token = "0x4001EDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		internal HandPoseArea[] poseAreas;

		[Token(Token = "0x4001EDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private List<Hand> posingHands;

		[Token(Token = "0x6001E33")]
		[Address(RVA = "0xE1CEE0", Offset = "0xE1CEE0", VA = "0xE1CEE0")]
		private void Start()
		{
		}

		[Token(Token = "0x6001E34")]
		[Address(RVA = "0xE1CF38", Offset = "0xE1CF38", VA = "0xE1CF38")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001E35")]
		[Address(RVA = "0xE1D02C", Offset = "0xE1D02C", VA = "0xE1D02C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001E36")]
		[Address(RVA = "0xE1D18C", Offset = "0xE1D18C", VA = "0xE1D18C")]
		private void HandEnter(Hand hand)
		{
		}

		[Token(Token = "0x6001E37")]
		[Address(RVA = "0xE1D23C", Offset = "0xE1D23C", VA = "0xE1D23C")]
		private void HandExit(Hand hand)
		{
		}

		[Token(Token = "0x6001E38")]
		[Address(RVA = "0xE1D294", Offset = "0xE1D294", VA = "0xE1D294", Slot = "4")]
		public virtual HandPoseData GetHandPoseData(bool left)
		{
			return default(HandPoseData);
		}

		[Token(Token = "0x6001E39")]
		[Address(RVA = "0xE1D354", Offset = "0xE1D354", VA = "0xE1D354")]
		public void SetHandPose(Hand hand)
		{
		}

		[Token(Token = "0x6001E3A")]
		[Address(RVA = "0xE1D6A0", Offset = "0xE1D6A0", VA = "0xE1D6A0")]
		public bool HasPose(bool left)
		{
			return default(bool);
		}

		[Token(Token = "0x6001E3B")]
		[Address(RVA = "0xE1D754", Offset = "0xE1D754", VA = "0xE1D754")]
		public HandPoseArea()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20005BA")]
	public struct HandPoseData
	{
		[Token(Token = "0x4001EDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 handOffset;

		[Token(Token = "0x4001EE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Vector3 rotationOffset;

		[Token(Token = "0x4001EE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Quaternion localQuaternionOffset;

		[Token(Token = "0x4001EE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3[] posePositions;

		[Token(Token = "0x4001EE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Quaternion[] poseRotations;

		[Token(Token = "0x6001E3C")]
		[Address(RVA = "0xE1D88C", Offset = "0xE1D88C", VA = "0xE1D88C")]
		public HandPoseData(Hand hand, Grabbable grabbable)
		{
		}

		[Token(Token = "0x6001E3D")]
		[Address(RVA = "0xE1DE3C", Offset = "0xE1DE3C", VA = "0xE1DE3C")]
		public HandPoseData(Hand hand, Transform point)
		{
		}

		[Token(Token = "0x6001E3E")]
		[Address(RVA = "0xE1DF6C", Offset = "0xE1DF6C", VA = "0xE1DF6C")]
		public HandPoseData(Hand hand)
		{
		}

		[Token(Token = "0x6001E3F")]
		[Address(RVA = "0xE1E090", Offset = "0xE1E090", VA = "0xE1E090")]
		public HandPoseData(HandPoseData data)
		{
		}

		[Token(Token = "0x6001E40")]
		[Address(RVA = "0xE1D9D0", Offset = "0xE1D9D0", VA = "0xE1D9D0")]
		public void SavePose(Hand hand, Transform relativeTo)
		{
		}

		[Token(Token = "0x6001E41")]
		[Address(RVA = "0xE1E298", Offset = "0xE1E298", VA = "0xE1E298")]
		public Quaternion GetRotationOffset()
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001E42")]
		[Address(RVA = "0xE1D3D8", Offset = "0xE1D3D8", VA = "0xE1D3D8")]
		public void SetPose(Hand hand, [Optional] Transform relativeTo)
		{
		}

		[Token(Token = "0x6001E43")]
		[Address(RVA = "0xE1E46C", Offset = "0xE1E46C", VA = "0xE1E46C")]
		public void SetFingerPose(Hand hand, [Optional] Transform relativeTo)
		{
		}

		[Token(Token = "0x6001E44")]
		[Address(RVA = "0xE1E620", Offset = "0xE1E620", VA = "0xE1E620")]
		public void SetPosition(Hand hand, [Optional] Transform relativeTo)
		{
		}

		[Token(Token = "0x6001E45")]
		[Address(RVA = "0xE1E86C", Offset = "0xE1E86C", VA = "0xE1E86C")]
		public static HandPoseData LerpPose(HandPoseData from, HandPoseData to, float point)
		{
			return default(HandPoseData);
		}

		[Token(Token = "0x6001E46")]
		[Address(RVA = "0xE1EAEC", Offset = "0xE1EAEC", VA = "0xE1EAEC")]
		public static void LerpPose(ref HandPoseData lerpPose, HandPoseData from, HandPoseData to, float point)
		{
		}
	}
	[Token(Token = "0x20005BE")]
	public class HandPoseDriver : MonoBehaviour
	{
		[Token(Token = "0x4001EE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float transitionTime;

		[Token(Token = "0x4001EE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public HandPoseData rightPose;

		[Token(Token = "0x4001EEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HideInInspector]
		public bool rightPoseSet;

		[Token(Token = "0x4001EEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HideInInspector]
		public HandPoseData leftPose;

		[Token(Token = "0x4001EEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[HideInInspector]
		public bool leftPoseSet;

		[Token(Token = "0x6001E4B")]
		[Address(RVA = "0xE1EECC", Offset = "0xE1EECC", VA = "0xE1EECC")]
		public HandPoseData GetHandPoseData(bool left)
		{
			return default(HandPoseData);
		}

		[Token(Token = "0x6001E4C")]
		[Address(RVA = "0xE1EEF8", Offset = "0xE1EEF8", VA = "0xE1EEF8")]
		public void AnimateHandPose(Hand hand)
		{
		}

		[Token(Token = "0x6001E4D")]
		[Address(RVA = "0xE1EF88", Offset = "0xE1EF88", VA = "0xE1EF88")]
		public void SetHandPose(Hand hand)
		{
		}

		[Token(Token = "0x6001E4E")]
		[Address(RVA = "0xE1EF70", Offset = "0xE1EF70", VA = "0xE1EF70")]
		public bool HasPose(bool left)
		{
			return default(bool);
		}

		[Token(Token = "0x6001E4F")]
		[Address(RVA = "0xE1F00C", Offset = "0xE1F00C", VA = "0xE1F00C")]
		public HandPoseDriver()
		{
		}
	}
	[Token(Token = "0x20005BF")]
	public class HandProjector : MonoBehaviour
	{
		[Token(Token = "0x4001EED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("References")]
		public Hand hand;

		[Token(Token = "0x4001EEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("This should be a copy of the hand with the desired visual setup for your projection hand")]
		public Hand handProjection;

		[Token(Token = "0x4001EEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The Object(s) under your Hand that contain the MeshRenderer Component(s)")]
		public Transform[] handProjectionVisuals;

		[Token(Token = "0x4001EF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Smoothing speed, turning too high could cause jitters")]
		public float speed;

		[Token(Token = "0x4001EF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("If true everything in the hand Vvisuals will be disabled/hidden when projection hand is showing")]
		public bool hideHand;

		[Token(Token = "0x4001EF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The Object(s) under your main hand (not the projection hand) that contain the MeshRenderer Component(s)")]
		[ShowIf("hideHand")]
		public Transform[] handVisuals;

		[Token(Token = "0x4001EF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Should the projection interpolate between the hand pose and the projected grab pose based on the grip input axis")]
		public bool useGrabTransition;

		[Token(Token = "0x4001EF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("This offsets the grab transistion by this percent when active [0-1 range]")]
		[EnableIf("useGrabTransition")]
		public float grabTransitionOffset;

		[Token(Token = "0x4001EF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("This sets the position of the hand based on its [(gripAxis + grabTransitionOffset) * grabDistanceMultiplyer] -> gripAxis is set on the HandControllerLink component on the main hand")]
		[EnableIf("useGrabTransition")]
		public float grabDistanceMultiplyer;

		[Token(Token = "0x4001EF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("This sets the pose of the hand based on its [(gripAxis + grabTransitionOffset) * grabDistanceMultiplyer] -> gripAxis is set on the HandControllerLink component on the main hand")]
		[EnableIf("useGrabTransition")]
		public float grabTransitionMultiplyer;

		[Token(Token = "0x4001EF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[DisableIf("useGrabTransition")]
		[Tooltip("This offsets the highlight by this percent when active [0-1 range]")]
		public float grabPercent;

		[Token(Token = "0x4001EF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("Events")]
		public UnityHandGrabEvent OnStartProjection;

		[Token(Token = "0x4001EF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public UnityHandGrabEvent OnEndProjection;

		[Token(Token = "0x4001EFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private HandPoseData lastProjectionPose;

		[Token(Token = "0x4001EFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private HandPoseData newProjectionPose;

		[Token(Token = "0x4001EFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Vector3 lastProjectionPosition;

		[Token(Token = "0x4001EFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private Quaternion lastProjectionRotation;

		[Token(Token = "0x4001EFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Grabbable target;

		[Token(Token = "0x4001EFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private float startMass;

		[Token(Token = "0x4001F00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		private float minGrabTime;

		[Token(Token = "0x4001F01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private float currAmount;

		[Token(Token = "0x4001F02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		private bool tryingGrab;

		[Token(Token = "0x6001E50")]
		[Address(RVA = "0xE1F020", Offset = "0xE1F020", VA = "0xE1F020")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001E51")]
		[Address(RVA = "0xE1F384", Offset = "0xE1F384", VA = "0xE1F384")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001E52")]
		[Address(RVA = "0xE20254", Offset = "0xE20254", VA = "0xE20254")]
		private void OnTriggerGrab(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6001E53")]
		[Address(RVA = "0xE20260", Offset = "0xE20260", VA = "0xE20260")]
		private void OnBeforeGrab(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6001E54")]
		[Address(RVA = "0xE20378", Offset = "0xE20378", VA = "0xE20378")]
		private void OnGrab(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6001E55")]
		[Address(RVA = "0xE2039C", Offset = "0xE2039C", VA = "0xE2039C")]
		private void OnRelease(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6001E56")]
		[Address(RVA = "0xE205B4", Offset = "0xE205B4", VA = "0xE205B4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001E57")]
		[Address(RVA = "0xE209C0", Offset = "0xE209C0", VA = "0xE209C0")]
		private void OnProjectionStart(Hand projectionHand, Grabbable target)
		{
		}

		[Token(Token = "0x6001E58")]
		[Address(RVA = "0xE20A34", Offset = "0xE20A34", VA = "0xE20A34")]
		private void OnProjectionEnd(Hand projectionHand, Grabbable target)
		{
		}

		[Token(Token = "0x6001E59")]
		[Address(RVA = "0xE1F4F8", Offset = "0xE1F4F8", VA = "0xE1F4F8")]
		private void ShowProjection(bool show)
		{
		}

		[Token(Token = "0x6001E5A")]
		[Address(RVA = "0xE20614", Offset = "0xE20614", VA = "0xE20614")]
		private void SetTarget(Grabbable newTarget)
		{
		}

		[Token(Token = "0x6001E5B")]
		[Address(RVA = "0xE20900", Offset = "0xE20900", VA = "0xE20900")]
		private bool IsProjectionActive()
		{
			return default(bool);
		}

		[Token(Token = "0x6001E5C")]
		[Address(RVA = "0xE20AA8", Offset = "0xE20AA8", VA = "0xE20AA8")]
		public HandProjector()
		{
		}
	}
	[Token(Token = "0x20005C0")]
	public class HandPublicEvents : MonoBehaviour
	{
		[Token(Token = "0x4001F03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Hand hand;

		[Token(Token = "0x4001F04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityHandGrabEvent OnBeforeGrab;

		[Token(Token = "0x4001F05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityHandGrabEvent OnGrab;

		[Token(Token = "0x4001F06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityHandGrabEvent OnRelease;

		[Token(Token = "0x4001F07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UnityHandGrabEvent OnForceRelease;

		[Token(Token = "0x4001F08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public UnityHandGrabEvent OnSqueeze;

		[Token(Token = "0x4001F09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public UnityHandGrabEvent OnUnsqueeze;

		[Token(Token = "0x4001F0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public UnityHandGrabEvent OnHighlight;

		[Token(Token = "0x4001F0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public UnityHandGrabEvent OnStopHighlight;

		[Token(Token = "0x6001E5D")]
		[Address(RVA = "0xE20AC8", Offset = "0xE20AC8", VA = "0xE20AC8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001E5E")]
		[Address(RVA = "0xE20D08", Offset = "0xE20D08", VA = "0xE20D08")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001E5F")]
		[Address(RVA = "0xE20F48", Offset = "0xE20F48", VA = "0xE20F48")]
		public void OnBeforeGrabEvent(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6001E60")]
		[Address(RVA = "0xE20FBC", Offset = "0xE20FBC", VA = "0xE20FBC")]
		public void OnGrabEvent(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6001E61")]
		[Address(RVA = "0xE21030", Offset = "0xE21030", VA = "0xE21030")]
		public void OnReleaseEvent(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6001E62")]
		[Address(RVA = "0xE210A4", Offset = "0xE210A4", VA = "0xE210A4")]
		public void OnSqueezeEvent(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6001E63")]
		[Address(RVA = "0xE21118", Offset = "0xE21118", VA = "0xE21118")]
		public void OnUnsqueezeEvent(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6001E64")]
		[Address(RVA = "0xE2118C", Offset = "0xE2118C", VA = "0xE2118C")]
		public void OnHighlightEvent(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6001E65")]
		[Address(RVA = "0xE21200", Offset = "0xE21200", VA = "0xE21200")]
		public void OnStopHighlightEvent(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6001E66")]
		[Address(RVA = "0xE21274", Offset = "0xE21274", VA = "0xE21274")]
		public void OnForceReleaseEvent(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6001E67")]
		[Address(RVA = "0xE212E8", Offset = "0xE212E8", VA = "0xE212E8")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6001E68")]
		[Address(RVA = "0xE213CC", Offset = "0xE213CC", VA = "0xE213CC")]
		public HandPublicEvents()
		{
		}
	}
	[Token(Token = "0x20005C1")]
	[DefaultExecutionOrder(-5)]
	public class HandStabilizer : MonoBehaviour
	{
		[Token(Token = "0x4001F0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HandBase hand;

		[Token(Token = "0x6001E69")]
		[Address(RVA = "0xE21580", Offset = "0xE21580", VA = "0xE21580")]
		private void Start()
		{
		}

		[Token(Token = "0x6001E6A")]
		[Address(RVA = "0xE21634", Offset = "0xE21634", VA = "0xE21634")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001E6B")]
		[Address(RVA = "0xE21778", Offset = "0xE21778", VA = "0xE21778")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001E6C")]
		[Address(RVA = "0xE218BC", Offset = "0xE218BC", VA = "0xE218BC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001E6D")]
		[Address(RVA = "0xE2193C", Offset = "0xE2193C", VA = "0xE2193C")]
		private void OnPreRender()
		{
		}

		[Token(Token = "0x6001E6E")]
		[Address(RVA = "0xE21988", Offset = "0xE21988", VA = "0xE21988")]
		private void OnPostRender()
		{
		}

		[Token(Token = "0x6001E6F")]
		[Address(RVA = "0xE219D4", Offset = "0xE219D4", VA = "0xE219D4")]
		private void OnPreRender(ScriptableRenderContext src, Camera cam)
		{
		}

		[Token(Token = "0x6001E70")]
		[Address(RVA = "0xE21A20", Offset = "0xE21A20", VA = "0xE21A20")]
		private void OnPostRender(ScriptableRenderContext src, Camera cam)
		{
		}

		[Token(Token = "0x6001E71")]
		[Address(RVA = "0xE21A6C", Offset = "0xE21A6C", VA = "0xE21A6C")]
		public HandStabilizer()
		{
		}
	}
	[Token(Token = "0x20005C2")]
	public class AutoInputModule : BaseInputModule
	{
		[Token(Token = "0x4001F0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<HandCanvasPointer> pointers;

		[Token(Token = "0x4001F0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private PointerEventData[] eventDatas;

		[Token(Token = "0x4001F0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private AutoInputModule _instance;

		[Token(Token = "0x4001F10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool _isDestroyed;

		[Token(Token = "0x170003A5")]
		public AutoInputModule Instance
		{
			[Token(Token = "0x6001E72")]
			[Address(RVA = "0xE21A74", Offset = "0xE21A74", VA = "0xE21A74")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001E73")]
		[Address(RVA = "0xE21E1C", Offset = "0xE21E1C", VA = "0xE21E1C", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6001E74")]
		[Address(RVA = "0xE21E24", Offset = "0xE21E24", VA = "0xE21E24", Slot = "8")]
		protected override void OnDestroy()
		{
		}

		[Token(Token = "0x6001E75")]
		[Address(RVA = "0xE21E30", Offset = "0xE21E30", VA = "0xE21E30")]
		public int AddPointer(HandCanvasPointer pointer)
		{
			return default(int);
		}

		[Token(Token = "0x6001E76")]
		[Address(RVA = "0xE220E4", Offset = "0xE220E4", VA = "0xE220E4")]
		public void RemovePointer(HandCanvasPointer pointer)
		{
		}

		[Token(Token = "0x6001E77")]
		[Address(RVA = "0xE22460", Offset = "0xE22460", VA = "0xE22460", Slot = "17")]
		public override void Process()
		{
		}

		[Token(Token = "0x6001E78")]
		[Address(RVA = "0xE22834", Offset = "0xE22834", VA = "0xE22834")]
		public void ProcessPress(int index)
		{
		}

		[Token(Token = "0x6001E79")]
		[Address(RVA = "0xE22AC0", Offset = "0xE22AC0", VA = "0xE22AC0")]
		public void ProcessRelease(int index)
		{
		}

		[Token(Token = "0x6001E7A")]
		[Address(RVA = "0xE22E70", Offset = "0xE22E70", VA = "0xE22E70")]
		public PointerEventData GetData(int index)
		{
			return null;
		}

		[Token(Token = "0x6001E7B")]
		[Address(RVA = "0xE22EA0", Offset = "0xE22EA0", VA = "0xE22EA0")]
		public AutoInputModule()
		{
		}
	}
	[Token(Token = "0x20005C3")]
	public class HandClippingGuard : MonoBehaviour
	{
		[Token(Token = "0x20005C4")]
		[CompilerGenerated]
		private sealed class <Guard>d__10 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001F18")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001F19")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001F1A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Hand hand;

			[Token(Token = "0x4001F1B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public HandClippingGuard <>4__this;

			[Token(Token = "0x170003A6")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001E84")]
				[Address(RVA = "0xE234E0", Offset = "0xE234E0", VA = "0xE234E0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003A7")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001E86")]
				[Address(RVA = "0xE23528", Offset = "0xE23528", VA = "0xE23528", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001E81")]
			[Address(RVA = "0xE23208", Offset = "0xE23208", VA = "0xE23208")]
			[DebuggerHidden]
			public <Guard>d__10(int <>1__state)
			{
			}

			[Token(Token = "0x6001E82")]
			[Address(RVA = "0xE23244", Offset = "0xE23244", VA = "0xE23244", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001E83")]
			[Address(RVA = "0xE23248", Offset = "0xE23248", VA = "0xE23248", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001E85")]
			[Address(RVA = "0xE234E8", Offset = "0xE234E8", VA = "0xE234E8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001F11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Hand hand;

		[Token(Token = "0x4001F12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("This should be a sphere collider that covers the hand (similar, but seperate from the recommended trigger sphere collider)")]
		public SphereCollider collisionGuard;

		[Token(Token = "0x4001F13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform body;

		[Token(Token = "0x4001F14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float guardTime;

		[Token(Token = "0x4001F15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 grabPoint;

		[Token(Token = "0x4001F16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool runProtection;

		[Token(Token = "0x4001F17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Coroutine guardRoutine;

		[Token(Token = "0x6001E7C")]
		[Address(RVA = "0xE22F28", Offset = "0xE22F28", VA = "0xE22F28")]
		private void Start()
		{
		}

		[Token(Token = "0x6001E7D")]
		[Address(RVA = "0xE23014", Offset = "0xE23014", VA = "0xE23014")]
		private void BeforeGrab(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6001E7E")]
		[Address(RVA = "0xE23138", Offset = "0xE23138", VA = "0xE23138")]
		private void OnRelease(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6001E7F")]
		[Address(RVA = "0xE23178", Offset = "0xE23178", VA = "0xE23178")]
		[IteratorStateMachine(typeof(<Guard>d__10))]
		private IEnumerator Guard(Hand hand)
		{
			return null;
		}

		[Token(Token = "0x6001E80")]
		[Address(RVA = "0xE23230", Offset = "0xE23230", VA = "0xE23230")]
		public HandClippingGuard()
		{
		}
	}
	[Token(Token = "0x20005C5")]
	[DefaultExecutionOrder(1000)]
	public class HandTeleportGuard : MonoBehaviour
	{
		[Token(Token = "0x4001F1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Helps prevent hand from passing through static collision boundries")]
		public Hand hand;

		[Token(Token = "0x4001F1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Guard Settings")]
		[Tooltip("The mask of things the guarding will ignore, if left on default or empty, will default to ignoring recommended Auto Hand layers")]
		public LayerMask ignoreMask;

		[Token(Token = "0x4001F1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("The amount of distance change required in one frame or fixed udpate to activate the teleport guard")]
		public float buffer;

		[Token(Token = "0x4001F1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Whether this should always run or only run when activated by the teleporter")]
		public bool alwaysRun;

		[Token(Token = "0x4001F20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		[FormerlySerializedAs("strict")]
		[Tooltip("If true hands wont teleport return when past the max distance if something is in the way")]
		public bool ignoreMaxHandDistance;

		[Token(Token = "0x4001F21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector3 deltaHandPos;

		[Token(Token = "0x4001F22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 deltaHandFixedPos;

		[Token(Token = "0x6001E87")]
		[Address(RVA = "0xE23530", Offset = "0xE23530", VA = "0xE23530")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001E88")]
		[Address(RVA = "0xE238B8", Offset = "0xE238B8", VA = "0xE238B8")]
		private void Update()
		{
		}

		[Token(Token = "0x6001E89")]
		[Address(RVA = "0xE23DD8", Offset = "0xE23DD8", VA = "0xE23DD8")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001E8A")]
		[Address(RVA = "0xE23A74", Offset = "0xE23A74", VA = "0xE23A74")]
		public void TeleportProtection(Vector3 fromPos, Vector3 toPos)
		{
		}

		[Token(Token = "0x6001E8B")]
		[Address(RVA = "0xE23F94", Offset = "0xE23F94", VA = "0xE23F94")]
		public HandTeleportGuard()
		{
		}
	}
	[Token(Token = "0x20005C6")]
	[HelpURL("https://www.notion.so/Touch-Events-1341b3e627dd443a99593ff7f0412aa6")]
	public class HandTouchEvent : MonoBehaviour
	{
		[Token(Token = "0x4001F23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Whether or not first hand to enter should take ownership and be the only one to call events")]
		[Header("For Solid Collision")]
		public bool oneHanded;

		[Token(Token = "0x4001F24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public HandType handType;

		[Token(Token = "0x4001F25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Events")]
		public UnityHandEvent HandStartTouch;

		[Token(Token = "0x4001F26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityHandEvent HandStopTouch;

		[Token(Token = "0x4001F27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public HandEvent HandStartTouchEvent;

		[Token(Token = "0x4001F28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public HandEvent HandStopTouchEvent;

		[Token(Token = "0x4001F29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<Hand> hands;

		[Token(Token = "0x6001E8C")]
		[Address(RVA = "0xE23FA8", Offset = "0xE23FA8", VA = "0xE23FA8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001E8D")]
		[Address(RVA = "0xE24288", Offset = "0xE24288", VA = "0xE24288")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001E8E")]
		[Address(RVA = "0xE243DC", Offset = "0xE243DC", VA = "0xE243DC")]
		public void Touch(Hand hand)
		{
		}

		[Token(Token = "0x6001E8F")]
		[Address(RVA = "0xE2453C", Offset = "0xE2453C", VA = "0xE2453C")]
		public void Untouch(Hand hand)
		{
		}

		[Token(Token = "0x6001E90")]
		[Address(RVA = "0xE2469C", Offset = "0xE2469C", VA = "0xE2469C")]
		public HandTouchEvent()
		{
		}
	}
	[Token(Token = "0x20005C7")]
	public delegate void HandEvent(Hand hand);
	[Token(Token = "0x20005C8")]
	public class HandTriggerAreaEvents : MonoBehaviour
	{
		[Token(Token = "0x4001F2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Trigger Events Settings")]
		[Tooltip("Whether or not first hand to enter should take ownership and be the only one to call events")]
		public bool oneHanded;

		[Token(Token = "0x4001F2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public HandType handType;

		[Token(Token = "0x4001F2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Whether or not to call the release event if exiting while grab event activated")]
		public bool exitTriggerRelease;

		[Token(Token = "0x4001F2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		[Tooltip("Whether or not to call the release event if exiting while grab event activated")]
		public bool exitTriggerUnsqueeze;

		[Token(Token = "0x4001F2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Events")]
		public UnityHandEvent HandEnter;

		[Token(Token = "0x4001F2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityHandEvent HandExit;

		[Token(Token = "0x4001F30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UnityHandEvent HandGrab;

		[Token(Token = "0x4001F31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public UnityHandEvent HandRelease;

		[Token(Token = "0x4001F32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public UnityHandEvent HandSqueeze;

		[Token(Token = "0x4001F33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public UnityHandEvent HandUnsqueeze;

		[Token(Token = "0x4001F34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public HandEvent HandEnterEvent;

		[Token(Token = "0x4001F35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public HandEvent HandExitEvent;

		[Token(Token = "0x4001F36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public HandEvent HandGrabEvent;

		[Token(Token = "0x4001F37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public HandEvent HandReleaseEvent;

		[Token(Token = "0x4001F38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public HandEvent HandSqueezeEvent;

		[Token(Token = "0x4001F39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public HandEvent HandUnsqueezeEvent;

		[Token(Token = "0x4001F3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private List<Hand> hands;

		[Token(Token = "0x4001F3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool grabbing;

		[Token(Token = "0x4001F3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
		private bool squeezing;

		[Token(Token = "0x6001E99")]
		[Address(RVA = "0xE2486C", Offset = "0xE2486C", VA = "0xE2486C", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6001E9A")]
		[Address(RVA = "0xE24C20", Offset = "0xE24C20", VA = "0xE24C20", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6001E9B")]
		[Address(RVA = "0xE24FF0", Offset = "0xE24FF0", VA = "0xE24FF0", Slot = "6")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6001E9C")]
		[Address(RVA = "0xE2516C", Offset = "0xE2516C", VA = "0xE2516C", Slot = "7")]
		public virtual void Enter(Hand hand)
		{
		}

		[Token(Token = "0x6001E9D")]
		[Address(RVA = "0xE252CC", Offset = "0xE252CC", VA = "0xE252CC", Slot = "8")]
		public virtual void Exit(Hand hand)
		{
		}

		[Token(Token = "0x6001E9E")]
		[Address(RVA = "0xE25570", Offset = "0xE25570", VA = "0xE25570", Slot = "9")]
		public virtual void Grab(Hand hand)
		{
		}

		[Token(Token = "0x6001E9F")]
		[Address(RVA = "0xE25684", Offset = "0xE25684", VA = "0xE25684", Slot = "10")]
		public virtual void Release(Hand hand)
		{
		}

		[Token(Token = "0x6001EA0")]
		[Address(RVA = "0xE25794", Offset = "0xE25794", VA = "0xE25794", Slot = "11")]
		public virtual void Squeeze(Hand hand)
		{
		}

		[Token(Token = "0x6001EA1")]
		[Address(RVA = "0xE258D8", Offset = "0xE258D8", VA = "0xE258D8", Slot = "12")]
		public virtual void Unsqueeze(Hand hand)
		{
		}

		[Token(Token = "0x6001EA2")]
		[Address(RVA = "0xE25A14", Offset = "0xE25A14", VA = "0xE25A14")]
		public HandTriggerAreaEvents()
		{
		}
	}
	[Token(Token = "0x20005C9")]
	[DefaultExecutionOrder(-1)]
	[RequireComponent(typeof(Rigidbody))]
	public class PhysicsFollower : MonoBehaviour
	{
		[Token(Token = "0x4001F3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Follow Settings")]
		[Space]
		[Tooltip("Follow target, the hand will always try to match this transforms rotation and position with rigidbody movements")]
		public Transform follow;

		[Token(Token = "0x4001F3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Stops hand physics follow - to freeze from all forces change rigidbody to kinematic or change rigidbody constraints")]
		public bool freezePos;

		[Token(Token = "0x4001F3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		[Tooltip("Stops hand physics follow - to freeze from all forces change rigidbody to kinematic or change rigidbody constraints")]
		public bool freezeRot;

		[Token(Token = "0x4001F40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("This will offset the position without offsetting the rotation pivot")]
		public Vector3 followPositionOffset;

		[Token(Token = "0x4001F41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 rotationOffset;

		[Token(Token = "0x4001F42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Min(0f)]
		[Tooltip("Follow target speed (This will cause jittering if turned too high)")]
		public float followPositionStrength;

		[Token(Token = "0x4001F43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Follow target rotation speed (This will cause jittering if turned too high)")]
		[Min(0f)]
		public float followRotationStrength;

		[Token(Token = "0x4001F44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("The maximum allowed velocity of the hand")]
		[Min(0f)]
		public float maxVelocity;

		[Token(Token = "0x4001F45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal Rigidbody body;

		[Token(Token = "0x4001F46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Transform moveTo;

		[Token(Token = "0x6001EAF")]
		[Address(RVA = "0xE25EAC", Offset = "0xE25EAC", VA = "0xE25EAC")]
		public void Start()
		{
		}

		[Token(Token = "0x6001EB0")]
		[Address(RVA = "0xE25EB8", Offset = "0xE25EB8", VA = "0xE25EB8", Slot = "4")]
		public virtual void Set()
		{
		}

		[Token(Token = "0x6001EB1")]
		[Address(RVA = "0xE2608C", Offset = "0xE2608C", VA = "0xE2608C")]
		public void Update()
		{
		}

		[Token(Token = "0x6001EB2")]
		[Address(RVA = "0xE26098", Offset = "0xE26098", VA = "0xE26098", Slot = "5")]
		protected virtual void OnUpdate()
		{
		}

		[Token(Token = "0x6001EB3")]
		[Address(RVA = "0xE26250", Offset = "0xE26250", VA = "0xE26250")]
		public void FixedUpdate()
		{
		}

		[Token(Token = "0x6001EB4")]
		[Address(RVA = "0xE2625C", Offset = "0xE2625C", VA = "0xE2625C", Slot = "6")]
		protected virtual void OnFixedUpdate()
		{
		}

		[Token(Token = "0x6001EB5")]
		[Address(RVA = "0xE26444", Offset = "0xE26444", VA = "0xE26444", Slot = "7")]
		internal virtual void MoveTo()
		{
		}

		[Token(Token = "0x6001EB6")]
		[Address(RVA = "0xE26684", Offset = "0xE26684", VA = "0xE26684", Slot = "8")]
		internal virtual void TorqueTo()
		{
		}

		[Token(Token = "0x6001EB7")]
		[Address(RVA = "0xE26ACC", Offset = "0xE26ACC", VA = "0xE26ACC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001EB8")]
		[Address(RVA = "0xE26B40", Offset = "0xE26B40", VA = "0xE26B40")]
		public PhysicsFollower()
		{
		}
	}
	[Token(Token = "0x20005CA")]
	public class EditorHand : MonoBehaviour
	{
		[Token(Token = "0x4001F47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool useEditorGUI;

		[Token(Token = "0x4001F48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GrabbablePose grabbablePose;

		[Token(Token = "0x4001F49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public HandPoseArea grabbablePoseArea;

		[Token(Token = "0x4001F4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Hand _hand;

		[Token(Token = "0x170003A8")]
		public Hand hand
		{
			[Token(Token = "0x6001EB9")]
			[Address(RVA = "0xE26B58", Offset = "0xE26B58", VA = "0xE26B58")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001EBA")]
		[Address(RVA = "0xE26C00", Offset = "0xE26C00", VA = "0xE26C00")]
		public EditorHand()
		{
		}
	}
	[Token(Token = "0x20005CB")]
	public struct SaveRigidbodyData
	{
		[Token(Token = "0x4001F4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private GameObject origin;

		[Token(Token = "0x4001F4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private float mass;

		[Token(Token = "0x4001F4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private float angularDrag;

		[Token(Token = "0x4001F4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private float drag;

		[Token(Token = "0x4001F4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private bool useGravity;

		[Token(Token = "0x4001F50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
		private bool isKinematic;

		[Token(Token = "0x4001F51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private RigidbodyInterpolation interpolation;

		[Token(Token = "0x4001F52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private CollisionDetectionMode collisionDetectionMode;

		[Token(Token = "0x4001F53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private RigidbodyConstraints constraints;

		[Token(Token = "0x6001EBB")]
		[Address(RVA = "0xE26C10", Offset = "0xE26C10", VA = "0xE26C10")]
		public SaveRigidbodyData(Rigidbody from, bool removeBody = true)
		{
		}

		[Token(Token = "0x6001EBC")]
		[Address(RVA = "0xE26D38", Offset = "0xE26D38", VA = "0xE26D38")]
		public Rigidbody ReloadRigidbody()
		{
			return null;
		}
	}
	[Token(Token = "0x20005CC")]
	[DefaultExecutionOrder(-5)]
	public class GrabbableBase : MonoBehaviour
	{
		[Token(Token = "0x20005CE")]
		[CompilerGenerated]
		private sealed class <IgnoreHandCollision>d__47 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001F75")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001F76")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001F77")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GrabbableBase <>4__this;

			[Token(Token = "0x4001F78")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Hand hand;

			[Token(Token = "0x4001F79")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float time;

			[Token(Token = "0x170003AB")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001EDA")]
				[Address(RVA = "0xE28408", Offset = "0xE28408", VA = "0xE28408", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003AC")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001EDC")]
				[Address(RVA = "0xE28450", Offset = "0xE28450", VA = "0xE28450", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001ED7")]
			[Address(RVA = "0xE27D18", Offset = "0xE27D18", VA = "0xE27D18")]
			[DebuggerHidden]
			public <IgnoreHandCollision>d__47(int <>1__state)
			{
			}

			[Token(Token = "0x6001ED8")]
			[Address(RVA = "0xE28294", Offset = "0xE28294", VA = "0xE28294", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001ED9")]
			[Address(RVA = "0xE28298", Offset = "0xE28298", VA = "0xE28298", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001EDB")]
			[Address(RVA = "0xE28410", Offset = "0xE28410", VA = "0xE28410", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001F54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AutoHeader("Grabbable", 0, 0)]
		public bool ignoreMe;

		[Token(Token = "0x4001F55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The physics body to connect this colliders grab to - if left empty will default to local body")]
		public Rigidbody body;

		[Token(Token = "0x4001F56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("A copy of the mesh will be created and slighly scaled and this material will be applied to create a highlight effect with options")]
		public Material hightlightMaterial;

		[Token(Token = "0x4001F57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[HideInInspector]
		public bool isGrabbable;

		[Token(Token = "0x4001F58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private PlacePoint _placePoint;

		[Token(Token = "0x4001F59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal bool ignoreParent;

		[Token(Token = "0x4001F5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected List<Hand> heldBy;

		[Token(Token = "0x4001F5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected bool hightlighting;

		[Token(Token = "0x4001F5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected GameObject highlightObj;

		[Token(Token = "0x4001F5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected PlacePoint lastPlacePoint;

		[Token(Token = "0x4001F5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected Transform originalParent;

		[Token(Token = "0x4001F5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected Vector3 lastCenterOfMassPos;

		[Token(Token = "0x4001F60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		protected Quaternion lastCenterOfMassRot;

		[Token(Token = "0x4001F61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		protected CollisionDetectionMode detectionMode;

		[Token(Token = "0x4001F62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected RigidbodyInterpolation startInterpolation;

		[Token(Token = "0x4001F63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		protected internal bool beingGrabbed;

		[Token(Token = "0x4001F64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x95")]
		protected bool heldBodyJointed;

		[Token(Token = "0x4001F65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x96")]
		protected bool wasIsGrabbable;

		[Token(Token = "0x4001F66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x97")]
		protected bool beingDestroyed;

		[Token(Token = "0x4001F67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected int originalLayer;

		[Token(Token = "0x4001F68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected Coroutine resetLayerRoutine;

		[Token(Token = "0x4001F69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		protected List<GrabbableChild> grabChildren;

		[Token(Token = "0x4001F6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected List<Transform> jointedParents;

		[Token(Token = "0x4001F6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		protected GrabbablePoseCombiner poseCombiner;

		[Token(Token = "0x4001F6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected List<Grabbable> jointedGrabbables;

		[Token(Token = "0x4001F6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		protected float lastUpdateTime;

		[Token(Token = "0x4001F6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		protected bool rigidbodyDeactivated;

		[Token(Token = "0x4001F6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		protected SaveRigidbodyData rigidbodyData;

		[Token(Token = "0x4001F70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private CollisionTracker _collisionTracker;

		[Token(Token = "0x4001F71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		protected Hand ignoringHand;

		[Token(Token = "0x4001F72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		protected List<Collider> grabColliders;

		[Token(Token = "0x170003A9")]
		public PlacePoint placePoint
		{
			[Token(Token = "0x6001EBD")]
			[Address(RVA = "0xE26EA0", Offset = "0xE26EA0", VA = "0xE26EA0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001EBE")]
			[Address(RVA = "0xE26EA8", Offset = "0xE26EA8", VA = "0xE26EA8")]
			protected set
			{
			}
		}

		[Token(Token = "0x170003AA")]
		public CollisionTracker collisionTracker
		{
			[Token(Token = "0x6001EBF")]
			[Address(RVA = "0xE26EB0", Offset = "0xE26EB0", VA = "0xE26EB0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001EC0")]
			[Address(RVA = "0xE26FCC", Offset = "0xE26FCC", VA = "0xE26FCC")]
			protected set
			{
			}
		}

		[Token(Token = "0x6001EC1")]
		[Address(RVA = "0xE2706C", Offset = "0xE2706C", VA = "0xE2706C", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6001EC2")]
		[Address(RVA = "0xE27528", Offset = "0xE27528", VA = "0xE27528", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6001EC3")]
		[Address(RVA = "0xE27748", Offset = "0xE27748", VA = "0xE27748", Slot = "6")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6001EC4")]
		[Address(RVA = "0xE2781C", Offset = "0xE2781C", VA = "0xE2781C", Slot = "7")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6001EC5")]
		[Address(RVA = "0xE27860", Offset = "0xE27860", VA = "0xE27860")]
		internal void SetPlacePoint(PlacePoint point)
		{
		}

		[Token(Token = "0x6001EC6")]
		[Address(RVA = "0xE27868", Offset = "0xE27868", VA = "0xE27868")]
		internal void SetGrabbableChild(GrabbableChild child)
		{
		}

		[Token(Token = "0x6001EC7")]
		[Address(RVA = "0xE27950", Offset = "0xE27950", VA = "0xE27950")]
		public void DeactivateRigidbody()
		{
		}

		[Token(Token = "0x6001EC8")]
		[Address(RVA = "0xE27A44", Offset = "0xE27A44", VA = "0xE27A44")]
		public void ActivateRigidbody()
		{
		}

		[Token(Token = "0x6001EC9")]
		[Address(RVA = "0xE27A7C", Offset = "0xE27A7C", VA = "0xE27A7C")]
		protected int GetOriginalLayer()
		{
			return default(int);
		}

		[Token(Token = "0x6001ECA")]
		[Address(RVA = "0xE27A84", Offset = "0xE27A84", VA = "0xE27A84")]
		internal void SetLayerRecursive(Transform obj, int oldLayer, int newLayer)
		{
		}

		[Token(Token = "0x6001ECB")]
		[Address(RVA = "0xE27C28", Offset = "0xE27C28", VA = "0xE27C28")]
		internal void SetLayerRecursive(Transform obj, int newLayer)
		{
		}

		[Token(Token = "0x6001ECC")]
		[Address(RVA = "0xE27C78", Offset = "0xE27C78", VA = "0xE27C78")]
		[IteratorStateMachine(typeof(<IgnoreHandCollision>d__47))]
		protected IEnumerator IgnoreHandCollision(float time, Hand hand)
		{
			return null;
		}

		[Token(Token = "0x6001ECD")]
		[Address(RVA = "0xE27D40", Offset = "0xE27D40", VA = "0xE27D40")]
		public bool GetSavedPose(out GrabbablePoseCombiner pose)
		{
			return default(bool);
		}

		[Token(Token = "0x6001ECE")]
		[Address(RVA = "0xE27DFC", Offset = "0xE27DFC", VA = "0xE27DFC")]
		public bool HasCustomPose()
		{
			return default(bool);
		}

		[Token(Token = "0x6001ECF")]
		[Address(RVA = "0xE27E24", Offset = "0xE27E24", VA = "0xE27E24")]
		public void IgnoreHand(Hand hand, bool ignore)
		{
		}

		[Token(Token = "0x6001ED0")]
		[Address(RVA = "0xE273C0", Offset = "0xE273C0", VA = "0xE273C0")]
		private void SetCollidersRecursive(Transform obj)
		{
		}

		[Token(Token = "0x6001ED1")]
		[Address(RVA = "0xE2801C", Offset = "0xE2801C", VA = "0xE2801C")]
		protected void ResetRigidbody()
		{
		}

		[Token(Token = "0x6001ED2")]
		[Address(RVA = "0xE280B8", Offset = "0xE280B8", VA = "0xE280B8")]
		public bool BeingDestroyed()
		{
			return default(bool);
		}

		[Token(Token = "0x6001ED3")]
		[Address(RVA = "0xE280C0", Offset = "0xE280C0", VA = "0xE280C0")]
		public void DebugBreak()
		{
		}

		[Token(Token = "0x6001ED4")]
		[Address(RVA = "0xE280C4", Offset = "0xE280C4", VA = "0xE280C4")]
		public GrabbableBase()
		{
		}
	}
	[Token(Token = "0x20005CF")]
	public enum HandMovementType
	{
		[Token(Token = "0x4001F7B")]
		Legacy,
		[Token(Token = "0x4001F7C")]
		Forces
	}
	[Token(Token = "0x20005D0")]
	public enum HandType
	{
		[Token(Token = "0x4001F7E")]
		both,
		[Token(Token = "0x4001F7F")]
		right,
		[Token(Token = "0x4001F80")]
		left,
		[Token(Token = "0x4001F81")]
		none
	}
	[Token(Token = "0x20005D1")]
	public enum GrabType
	{
		[Token(Token = "0x4001F83")]
		HandToGrabbable,
		[Token(Token = "0x4001F84")]
		GrabbableToHand,
		[Token(Token = "0x4001F85")]
		InstantGrab
	}
	[Serializable]
	[Token(Token = "0x20005D2")]
	public struct VelocityTimePair
	{
		[Token(Token = "0x4001F86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float time;

		[Token(Token = "0x4001F87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public Vector3 velocity;
	}
	[Token(Token = "0x20005D3")]
	public delegate void HandGrabEvent(Hand hand, Grabbable grabbable);
	[Token(Token = "0x20005D4")]
	public delegate void HandGameObjectEvent(Hand hand, GameObject other);
	[Serializable]
	[Token(Token = "0x20005D5")]
	public class UnityHandGrabEvent : UnityEvent<Hand, Grabbable>
	{
		[Token(Token = "0x6001EE5")]
		[Address(RVA = "0xE21538", Offset = "0xE21538", VA = "0xE21538")]
		public UnityHandGrabEvent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20005D6")]
	public class UnityHandEvent : UnityEvent<Hand>
	{
		[Token(Token = "0x6001EE6")]
		[Address(RVA = "0xE1D844", Offset = "0xE1D844", VA = "0xE1D844")]
		public UnityHandEvent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20005D7")]
	[DefaultExecutionOrder(-10)]
	[RequireComponent(typeof(Rigidbody))]
	public class HandBase : MonoBehaviour
	{
		[Token(Token = "0x4001F88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AutoHeader("AUTO HAND", 0, 0)]
		public bool ignoreMe;

		[Token(Token = "0x4001F89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Finger[] fingers;

		[Token(Token = "0x4001F8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("An empty GameObject that should be placed on the surface of the center of the palm")]
		public Transform palmTransform;

		[Token(Token = "0x4001F8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Whether this is the left (on) or right (off) hand")]
		[FormerlySerializedAs("isLeft")]
		public bool left;

		[Token(Token = "0x4001F8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Space]
		[Tooltip("Maximum distance for pickup")]
		[Min(0.01f)]
		public float reachDistance;

		[Token(Token = "0x4001F8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AutoToggleHeader("Enable Movement", 0, 0, tooltip = "Whether or not to enable the hand's Rigidbody Physics movement")]
		public bool enableMovement;

		[Token(Token = "0x4001F8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[EnableIf("enableMovement")]
		[Tooltip("Follow target, the hand will always try to match this transforms position with rigidbody movements")]
		public Transform follow;

		[Token(Token = "0x4001F8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[EnableIf("enableMovement")]
		[Tooltip("Returns hand to the target after this distance [helps just in case it gets stuck]")]
		[Min(0f)]
		public float maxFollowDistance;

		[Token(Token = "0x4001F90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("Amplifier for applied velocity on released object")]
		[EnableIf("enableMovement")]
		[Min(0f)]
		public float throwPower;

		[Token(Token = "0x4001F91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[EnableIf("enableMovement")]
		[Tooltip("Applies position interpolation to the hands to make the hands look smoother when the FPS is higher than the fixed timestep")]
		public bool enableInterpolation;

		[Token(Token = "0x4001F92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		[HideInInspector]
		public bool advancedFollowSettings;

		[Token(Token = "0x4001F93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
		[AutoToggleHeader("Enable Auto Posing", 0, 0, tooltip = "Auto Posing will override Unity Animations -- This will disable all the Auto Hand IK, including animations from: finger sway, pose areas, finger bender scripts (runtime Auto Posing will still work)")]
		[Tooltip("Turn this on when you want to animate the hand or use other IK Drivers")]
		public bool enableIK;

		[Token(Token = "0x4001F94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[EnableIf("enableIK")]
		[Tooltip("How much the fingers sway from the velocity")]
		public float swayStrength;

		[Token(Token = "0x4001F95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[EnableIf("enableIK")]
		[Tooltip("This will offset each fingers bend (0 is no bend, 1 is full bend)")]
		public float gripOffset;

		[NonSerialized]
		[Token(Token = "0x4001F96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("The maximum allowed velocity of the hand")]
		[Min(0f)]
		public float maxVelocity;

		[NonSerialized]
		[Token(Token = "0x4001F97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Follow target speed (Can cause jittering if turned too high - recommend increasing drag with speed)")]
		[Min(0f)]
		public float followPositionStrength;

		[NonSerialized]
		[Token(Token = "0x4001F98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Min(0f)]
		[Tooltip("Follow target rotation speed (Can cause jittering if turned too high - recommend increasing angular drag with speed)")]
		[HideInInspector]
		public float followRotationStrength;

		[NonSerialized]
		[Token(Token = "0x4001F99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[HideInInspector]
		[Tooltip("After this many seconds velocity data within a 'throw window' will be tossed out. (This allows you to get only use acceeleration data from the last 'x' seconds of the throw.)")]
		public float throwVelocityExpireTime;

		[NonSerialized]
		[Token(Token = "0x4001F9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[HideInInspector]
		[Tooltip("After this many seconds velocity data within a 'throw window' will be tossed out. (This allows you to get only use acceeleration data from the last 'x' seconds of the throw.)")]
		public float throwAngularVelocityExpireTime;

		[NonSerialized]
		[Token(Token = "0x4001F9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[HideInInspector]
		[Tooltip("Increase for closer finger tip results / Decrease for less physics checks - The number of steps the fingers take when bending to grab something")]
		public int fingerBendSteps;

		[NonSerialized]
		[Token(Token = "0x4001F9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[HideInInspector]
		public float sphereCastRadius;

		[Token(Token = "0x4001F9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[HideInInspector]
		public bool usingPoseAreas;

		[Token(Token = "0x4001F9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[HideInInspector]
		public QueryTriggerInteraction queryTriggerInteraction;

		[Token(Token = "0x4001F9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Grabbable HoldingObj;

		[Token(Token = "0x4001FA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Grabbable _lookingAtObj;

		[Token(Token = "0x4001FA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Transform _moveTo;

		[Token(Token = "0x4001FA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Vector3 _grabPositionOffset;

		[Token(Token = "0x4001FA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private Quaternion _grabRotationOffset;

		[Token(Token = "0x4001FA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private CollisionTracker _collisionTracker;

		[Token(Token = "0x4001FA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		protected GrabbablePose _grabPose;

		[Token(Token = "0x4001FA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		protected Joint heldJoint;

		[Token(Token = "0x4001FA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		protected bool grabbing;

		[Token(Token = "0x4001FA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD9")]
		protected bool squeezing;

		[Token(Token = "0x4001FAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDA")]
		protected bool grabbed;

		[Token(Token = "0x4001FAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		protected float triggerPoint;

		[Token(Token = "0x4001FAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		protected Coroutine handAnimateRoutine;

		[Token(Token = "0x4001FAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		protected HandPoseArea handPoseArea;

		[Token(Token = "0x4001FAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		protected HandPoseData preHandPoseAreaPose;

		[Token(Token = "0x4001FAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		protected List<Collider> handColliders;

		[Token(Token = "0x4001FB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private Transform _grabPoint;

		[Token(Token = "0x4001FB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private Transform _grabPosition;

		[Token(Token = "0x4001FB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		internal int handLayers;

		[Token(Token = "0x4001FB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		protected Collider palmCollider;

		[Token(Token = "0x4001FB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		protected RaycastHit highlightHit;

		[Token(Token = "0x4001FB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		protected HandVelocityTracker velocityTracker;

		[Token(Token = "0x4001FB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		protected Transform palmChild;

		[Token(Token = "0x4001FB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		protected Vector3 lastFrameFollowPos;

		[Token(Token = "0x4001FB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
		protected Quaternion lastFrameFollowRot;

		[Token(Token = "0x4001FB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
		protected Vector3 followVel;

		[Token(Token = "0x4001FBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		protected Vector3 followAngularVel;

		[Token(Token = "0x4001FBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C4")]
		internal bool allowUpdateMovement;

		[Token(Token = "0x4001FBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		private Vector3[] handRays;

		[Token(Token = "0x4001FBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		private RaycastHit[] rayHits;

		[Token(Token = "0x4001FBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		private Vector3[] updatePositionTracked;

		[Token(Token = "0x4001FBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		private List<RaycastHit> closestHits;

		[Token(Token = "0x4001FC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		private List<Grabbable> closestGrabs;

		[Token(Token = "0x4001FC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		private int tryMaxDistanceCount;

		[Token(Token = "0x4001FC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F4")]
		private Vector3 lastFollowPosition;

		[Token(Token = "0x4001FC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		private Vector3 lastFollowRotation;

		[Token(Token = "0x4001FC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20C")]
		private bool prerendered;

		[Token(Token = "0x4001FC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		private Vector3 preRenderPos;

		[Token(Token = "0x4001FC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21C")]
		private Quaternion preRenderRot;

		[Token(Token = "0x4001FC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22C")]
		private float currGrip;

		[Token(Token = "0x4001FC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		private float lastUpdateTime;

		[Token(Token = "0x4001FC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x234")]
		protected bool ignoreMoveFrame;

		[Token(Token = "0x4001FCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
		private float fingerSwayVel;

		[Token(Token = "0x170003AD")]
		public Grabbable holdingObj
		{
			[Token(Token = "0x6001EE7")]
			[Address(RVA = "0xE28628", Offset = "0xE28628", VA = "0xE28628")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001EE8")]
			[Address(RVA = "0xE28630", Offset = "0xE28630", VA = "0xE28630")]
			internal set
			{
			}
		}

		[Token(Token = "0x170003AE")]
		public Grabbable lookingAtObj
		{
			[Token(Token = "0x6001EE9")]
			[Address(RVA = "0xE28638", Offset = "0xE28638", VA = "0xE28638")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001EEA")]
			[Address(RVA = "0xE28640", Offset = "0xE28640", VA = "0xE28640")]
			protected set
			{
			}
		}

		[Token(Token = "0x170003AF")]
		public Transform moveTo
		{
			[Token(Token = "0x6001EEB")]
			[Address(RVA = "0xE28648", Offset = "0xE28648", VA = "0xE28648")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003B0")]
		public Rigidbody body
		{
			[Token(Token = "0x6001EEC")]
			[Address(RVA = "0xE28780", Offset = "0xE28780", VA = "0xE28780")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001EED")]
			[Address(RVA = "0xE28788", Offset = "0xE28788", VA = "0xE28788")]
			[CompilerGenerated]
			internal set
			{
			}
		}

		[Token(Token = "0x170003B1")]
		public Vector3 grabPositionOffset
		{
			[Token(Token = "0x6001EEE")]
			[Address(RVA = "0xE28790", Offset = "0xE28790", VA = "0xE28790")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001EEF")]
			[Address(RVA = "0xE2879C", Offset = "0xE2879C", VA = "0xE2879C")]
			protected set
			{
			}
		}

		[Token(Token = "0x170003B2")]
		public Quaternion grabRotationOffset
		{
			[Token(Token = "0x6001EF0")]
			[Address(RVA = "0xE287A8", Offset = "0xE287A8", VA = "0xE287A8")]
			get
			{
				return default(Quaternion);
			}
			[Token(Token = "0x6001EF1")]
			[Address(RVA = "0xE287B4", Offset = "0xE287B4", VA = "0xE287B4")]
			protected set
			{
			}
		}

		[Token(Token = "0x170003B3")]
		public bool disableIK
		{
			[Token(Token = "0x6001EF2")]
			[Address(RVA = "0xE287C0", Offset = "0xE287C0", VA = "0xE287C0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001EF3")]
			[Address(RVA = "0xE1F374", Offset = "0xE1F374", VA = "0xE1F374")]
			set
			{
			}
		}

		[Token(Token = "0x170003B4")]
		public CollisionTracker collisionTracker
		{
			[Token(Token = "0x6001EF4")]
			[Address(RVA = "0xE287D0", Offset = "0xE287D0", VA = "0xE287D0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001EF5")]
			[Address(RVA = "0xE28888", Offset = "0xE28888", VA = "0xE28888")]
			protected set
			{
			}
		}

		[Token(Token = "0x170003B5")]
		protected GrabbablePose grabPose
		{
			[Token(Token = "0x6001EF6")]
			[Address(RVA = "0xE28928", Offset = "0xE28928", VA = "0xE28928")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001EF7")]
			[Address(RVA = "0xE28930", Offset = "0xE28930", VA = "0xE28930")]
			set
			{
			}
		}

		[Token(Token = "0x170003B6")]
		internal Transform grabPoint
		{
			[Token(Token = "0x6001EF8")]
			[Address(RVA = "0xE28A34", Offset = "0xE28A34", VA = "0xE28A34")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003B7")]
		internal Transform grabPosition
		{
			[Token(Token = "0x6001EF9")]
			[Address(RVA = "0xE28B50", Offset = "0xE28B50", VA = "0xE28B50")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001EFA")]
		[Address(RVA = "0xE28CA4", Offset = "0xE28CA4", VA = "0xE28CA4", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6001EFB")]
		[Address(RVA = "0xE29088", Offset = "0xE29088", VA = "0xE29088", Slot = "5")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6001EFC")]
		[Address(RVA = "0xE2911C", Offset = "0xE2911C", VA = "0xE2911C", Slot = "6")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6001EFD")]
		[Address(RVA = "0xE2918C", Offset = "0xE2918C", VA = "0xE2918C", Slot = "7")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6001EFE")]
		[Address(RVA = "0xE2931C", Offset = "0xE2931C", VA = "0xE2931C", Slot = "8")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6001EFF")]
		[Address(RVA = "0xE29598", Offset = "0xE29598", VA = "0xE29598", Slot = "9")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6001F00")]
		[Address(RVA = "0xE2A964", Offset = "0xE2A964", VA = "0xE2A964", Slot = "10")]
		public virtual void OnPreRender()
		{
		}

		[Token(Token = "0x6001F01")]
		[Address(RVA = "0xE2AAC4", Offset = "0xE2AAC4", VA = "0xE2AAC4", Slot = "11")]
		public virtual void OnPostRender()
		{
		}

		[Token(Token = "0x6001F02")]
		[Address(RVA = "0xE2ABC0", Offset = "0xE2ABC0", VA = "0xE2ABC0", Slot = "12")]
		protected virtual void CreateJoint(Grabbable grab, float breakForce, float breakTorque)
		{
		}

		[Token(Token = "0x6001F03")]
		[Address(RVA = "0xE2AEA0", Offset = "0xE2AEA0", VA = "0xE2AEA0", Slot = "13")]
		protected virtual void MoveTo()
		{
		}

		[Token(Token = "0x6001F04")]
		[Address(RVA = "0xE2B984", Offset = "0xE2B984", VA = "0xE2B984", Slot = "14")]
		protected virtual void TorqueTo()
		{
		}

		[Token(Token = "0x6001F05")]
		[Address(RVA = "0xE2BC38", Offset = "0xE2BC38", VA = "0xE2BC38", Slot = "15")]
		public virtual void SetHandLocation(Vector3 pos, Quaternion rot)
		{
		}

		[Token(Token = "0x6001F06")]
		[Address(RVA = "0xE2C410", Offset = "0xE2C410", VA = "0xE2C410", Slot = "16")]
		public virtual void SetHandLocation(Vector3 pos)
		{
		}

		[Token(Token = "0x6001F07")]
		[Address(RVA = "0xE2C498", Offset = "0xE2C498", VA = "0xE2C498")]
		public void ResetHandLocation()
		{
		}

		[Token(Token = "0x6001F08")]
		[Address(RVA = "0xE2B4AC", Offset = "0xE2B4AC", VA = "0xE2B4AC")]
		protected void SetMoveTo()
		{
		}

		[Token(Token = "0x6001F09")]
		[Address(RVA = "0xE1AC0C", Offset = "0xE1AC0C", VA = "0xE1AC0C")]
		public bool CanGrab(Grabbable grab)
		{
			return default(bool);
		}

		[Token(Token = "0x6001F0A")]
		[Address(RVA = "0xE2C528", Offset = "0xE2C528", VA = "0xE2C528")]
		public float GetTriggerAxis()
		{
			return default(float);
		}

		[Token(Token = "0x6001F0B")]
		[Address(RVA = "0xE2C530", Offset = "0xE2C530", VA = "0xE2C530", Slot = "17")]
		protected virtual Vector3 HandClosestHit(out RaycastHit closestHit, out Grabbable grabbable, float dist, int layerMask, [Optional] Grabbable target)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001F0C")]
		[Address(RVA = "0xE2CE5C", Offset = "0xE2CE5C", VA = "0xE2CE5C")]
		public bool IsPosing()
		{
			return default(bool);
		}

		[Token(Token = "0x6001F0D")]
		[Address(RVA = "0xE2CF14", Offset = "0xE2CF14", VA = "0xE2CF14", Slot = "18")]
		protected virtual void UpdateFingers(float deltaTime)
		{
		}

		[Token(Token = "0x6001F0E")]
		[Address(RVA = "0xE2A8AC", Offset = "0xE2A8AC", VA = "0xE2A8AC")]
		public int CollisionCount()
		{
			return default(int);
		}

		[Token(Token = "0x6001F0F")]
		[Address(RVA = "0xE27F78", Offset = "0xE27F78", VA = "0xE27F78")]
		public void HandIgnoreCollider(Collider collider, bool ignore)
		{
		}

		[Token(Token = "0x6001F10")]
		[Address(RVA = "0xE2D118", Offset = "0xE2D118", VA = "0xE2D118")]
		public void SetLayer()
		{
		}

		[Token(Token = "0x6001F11")]
		[Address(RVA = "0xE2D1B8", Offset = "0xE2D1B8", VA = "0xE2D1B8")]
		internal void SetLayerRecursive(Transform obj, int newLayer)
		{
		}

		[Token(Token = "0x6001F12")]
		[Address(RVA = "0xE290A8", Offset = "0xE290A8", VA = "0xE290A8")]
		protected void SetHandCollidersRecursive(Transform obj)
		{
		}

		[Token(Token = "0x6001F13")]
		[Address(RVA = "0xE2D3BC", Offset = "0xE2D3BC", VA = "0xE2D3BC")]
		public Vector3[] GetPalmRays()
		{
			return null;
		}

		[Token(Token = "0x6001F14")]
		[Address(RVA = "0xE2D3E0", Offset = "0xE2D3E0", VA = "0xE2D3E0", Slot = "19")]
		protected virtual void SetPalmRays()
		{
		}

		[Token(Token = "0x6001F15")]
		[Address(RVA = "0xE2D66C", Offset = "0xE2D66C", VA = "0xE2D66C")]
		public Vector3 ThrowVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001F16")]
		[Address(RVA = "0xE2D688", Offset = "0xE2D688", VA = "0xE2D688")]
		public Vector3 ThrowAngularVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001F17")]
		[Address(RVA = "0xE2D6A4", Offset = "0xE2D6A4", VA = "0xE2D6A4")]
		public bool IsGrabbing()
		{
			return default(bool);
		}

		[Token(Token = "0x6001F18")]
		[Address(RVA = "0xE2D6AC", Offset = "0xE2D6AC", VA = "0xE2D6AC")]
		public static int GetHandsLayerMask()
		{
			return default(int);
		}

		[Token(Token = "0x6001F19")]
		[Address(RVA = "0xE2D7BC", Offset = "0xE2D7BC", VA = "0xE2D7BC")]
		public HandBase()
		{
		}
	}
	[Token(Token = "0x20005D8")]
	[RequireComponent(typeof(Hand))]
	public class HandGizmos : MonoBehaviour
	{
		[Token(Token = "0x6001F1B")]
		[Address(RVA = "0xE2EA50", Offset = "0xE2EA50", VA = "0xE2EA50")]
		public HandGizmos()
		{
		}
	}
	[Token(Token = "0x20005D9")]
	[CreateAssetMenu(fileName = "AutoHand Pose", menuName = "Auto Hand/Custom Pose", order = 1)]
	public class HandPoseScriptable : ScriptableObject
	{
		[Token(Token = "0x4001FCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public bool rightSaved;

		[Token(Token = "0x4001FCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[HideInInspector]
		public bool leftSaved;

		[Token(Token = "0x4001FCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HandPoseData rightPose;

		[Token(Token = "0x4001FCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public HandPoseData leftPose;

		[Token(Token = "0x6001F1C")]
		[Address(RVA = "0xE2EA58", Offset = "0xE2EA58", VA = "0xE2EA58")]
		public void SavePoses(HandPoseData right, HandPoseData left)
		{
		}

		[Token(Token = "0x6001F1D")]
		[Address(RVA = "0xE2EACC", Offset = "0xE2EACC", VA = "0xE2EACC")]
		public void SaveRightPose(HandPoseData right)
		{
		}

		[Token(Token = "0x6001F1E")]
		[Address(RVA = "0xE2EB08", Offset = "0xE2EB08", VA = "0xE2EB08")]
		public void SaveLeftPose(HandPoseData left)
		{
		}

		[Token(Token = "0x6001F1F")]
		[Address(RVA = "0xE2EB48", Offset = "0xE2EB48", VA = "0xE2EB48")]
		public HandPoseScriptable()
		{
		}
	}
	[Token(Token = "0x20005DA")]
	public class HandVelocityTracker
	{
		[Token(Token = "0x4001FCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private HandBase hand;

		[Token(Token = "0x4001FD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float minThrowVelocity;

		[Token(Token = "0x4001FD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected List<VelocityTimePair> m_ThrowVelocityList;

		[Token(Token = "0x4001FD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected List<VelocityTimePair> m_ThrowAngleVelocityList;

		[Token(Token = "0x4001FD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float disableTime;

		[Token(Token = "0x4001FD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float disableSeconds;

		[Token(Token = "0x6001F20")]
		[Address(RVA = "0xE2EB50", Offset = "0xE2EB50", VA = "0xE2EB50")]
		public void ClearThrow()
		{
		}

		[Token(Token = "0x6001F21")]
		[Address(RVA = "0xE2EBB4", Offset = "0xE2EBB4", VA = "0xE2EBB4")]
		public void Disable(float seconds)
		{
		}

		[Token(Token = "0x6001F22")]
		[Address(RVA = "0xE2EBE0", Offset = "0xE2EBE0", VA = "0xE2EBE0")]
		public HandVelocityTracker(HandBase hand)
		{
		}

		[Token(Token = "0x6001F23")]
		[Address(RVA = "0xE2ECAC", Offset = "0xE2ECAC", VA = "0xE2ECAC")]
		public void UpdateThrowing()
		{
		}

		[Token(Token = "0x6001F24")]
		[Address(RVA = "0xE2F0F0", Offset = "0xE2F0F0", VA = "0xE2F0F0")]
		public Vector3 ThrowVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001F25")]
		[Address(RVA = "0xE2F3B8", Offset = "0xE2F3B8", VA = "0xE2F3B8")]
		public Vector3 ThrowAngularVelocity()
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x20005DB")]
	public class KeyboardHand : MonoBehaviour
	{
		[Token(Token = "0x4001FD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Hand hand;

		[Token(Token = "0x4001FD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float speed;

		[Token(Token = "0x4001FD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float flySpeed;

		[Token(Token = "0x4001FD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool useLocal;

		[Token(Token = "0x6001F26")]
		[Address(RVA = "0xE2F684", Offset = "0xE2F684", VA = "0xE2F684")]
		private void Update()
		{
		}

		[Token(Token = "0x6001F27")]
		[Address(RVA = "0xE2F984", Offset = "0xE2F984", VA = "0xE2F984")]
		public KeyboardHand()
		{
		}
	}
	[Token(Token = "0x20005DC")]
	[HelpURL("https://earnestrobot.notion.site/Auto-Move-Player-02d91305a4294e039049bd45cacc5b90")]
	[DefaultExecutionOrder(-30)]
	[RequireComponent(typeof(CapsuleCollider))]
	[RequireComponent(typeof(Rigidbody))]
	public class AutoHandPlayer : MonoBehaviour
	{
		[Token(Token = "0x20005DD")]
		[CompilerGenerated]
		private sealed class <CheckForTrackingStart>d__91 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400202E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400202F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002030")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public AutoHandPlayer <>4__this;

			[Token(Token = "0x170003BB")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001F5F")]
				[Address(RVA = "0xE37120", Offset = "0xE37120", VA = "0xE37120", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003BC")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001F61")]
				[Address(RVA = "0xE37168", Offset = "0xE37168", VA = "0xE37168", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001F5C")]
			[Address(RVA = "0xE305FC", Offset = "0xE305FC", VA = "0xE305FC")]
			[DebuggerHidden]
			public <CheckForTrackingStart>d__91(int <>1__state)
			{
			}

			[Token(Token = "0x6001F5D")]
			[Address(RVA = "0xE36F08", Offset = "0xE36F08", VA = "0xE36F08", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001F5E")]
			[Address(RVA = "0xE36F0C", Offset = "0xE36F0C", VA = "0xE36F0C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001F60")]
			[Address(RVA = "0xE37128", Offset = "0xE37128", VA = "0xE37128", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20005DE")]
		[CompilerGenerated]
		private sealed class <DisableGroundingSecondsRoutine>d__120 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002031")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002032")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002033")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public AutoHandPlayer <>4__this;

			[Token(Token = "0x4002034")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float seconds;

			[Token(Token = "0x170003BD")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001F65")]
				[Address(RVA = "0xE37244", Offset = "0xE37244", VA = "0xE37244", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003BE")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001F67")]
				[Address(RVA = "0xE3728C", Offset = "0xE3728C", VA = "0xE3728C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001F62")]
			[Address(RVA = "0xE344C0", Offset = "0xE344C0", VA = "0xE344C0")]
			[DebuggerHidden]
			public <DisableGroundingSecondsRoutine>d__120(int <>1__state)
			{
			}

			[Token(Token = "0x6001F63")]
			[Address(RVA = "0xE37170", Offset = "0xE37170", VA = "0xE37170", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001F64")]
			[Address(RVA = "0xE37174", Offset = "0xE37174", VA = "0xE37174", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001F66")]
			[Address(RVA = "0xE3724C", Offset = "0xE3724C", VA = "0xE3724C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001FD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool notFound;

		[Token(Token = "0x4001FDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static AutoHandPlayer _Instance;

		[Token(Token = "0x4001FDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AutoHeader("Auto Hand Player", 0, 0)]
		public bool ignoreMe;

		[Token(Token = "0x4001FDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The tracked headCamera object")]
		public Camera headCamera;

		[Token(Token = "0x4001FDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The object that represents the forward direction movement, usually should be set as the camera or a tracked controller")]
		public Transform forwardFollow;

		[Token(Token = "0x4001FDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("This should NOT be a child of this body. This should be a GameObject that contains all the tracked objects (head/controllers)")]
		public Transform trackingContainer;

		[Token(Token = "0x4001FDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Hand handRight;

		[Token(Token = "0x4001FE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Hand handLeft;

		[Token(Token = "0x4001FE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AutoToggleHeader("Movement", 0, 0)]
		public bool useMovement;

		[Token(Token = "0x4001FE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("Movement speed when isGrounded")]
		[FormerlySerializedAs("moveSpeed")]
		[EnableIf("useMovement")]
		public float maxMoveSpeed;

		[Token(Token = "0x4001FE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Movement acceleration when isGrounded")]
		[EnableIf("useMovement")]
		public float moveAcceleration;

		[Token(Token = "0x4001FE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Tooltip("Movement acceleration when isGrounded")]
		[EnableIf("useMovement")]
		public float groundedDrag;

		[Token(Token = "0x4001FE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Min(0f)]
		[Tooltip("Whether or not to use snap turning or smooth turning")]
		[AutoToggleHeader("Snap Turning", 0, 0)]
		public bool snapTurning;

		[Token(Token = "0x4001FE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("turn speed when not using snap turning - if snap turning, represents angle per snap")]
		[ShowIf("snapTurning")]
		public float snapTurnAngle;

		[Token(Token = "0x4001FE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HideIf("snapTurning")]
		public float smoothTurnSpeed;

		[Token(Token = "0x4001FE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[AutoToggleHeader("Height", 0, 0)]
		public bool showHeight;

		[Token(Token = "0x4001FE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[ShowIf("showHeight")]
		public float heightSmoothSpeed;

		[Token(Token = "0x4001FEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[ShowIf("showHeight")]
		public float heightOffset;

		[Token(Token = "0x4001FEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[ShowIf("showHeight")]
		public bool crouching;

		[Token(Token = "0x4001FEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[ShowIf("showHeight")]
		public float crouchHeight;

		[Token(Token = "0x4001FED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[ShowIf("showHeight")]
		[Tooltip("Whether or not the capsule height should be adjusted to match the headCamera height")]
		public bool autoAdjustColliderHeight;

		[Token(Token = "0x4001FEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[ShowIf("showHeight")]
		[Tooltip("Minimum and maximum auto adjusted height, to adjust height without auto adjustment change capsule collider height instead")]
		public Vector2 minMaxHeight;

		[Token(Token = "0x4001FEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[ShowIf("showHeight")]
		public bool useHeadCollision;

		[Token(Token = "0x4001FF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[ShowIf("showHeight")]
		public float headRadius;

		[Token(Token = "0x4001FF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[AutoToggleHeader("Use Grounding", 0, 0)]
		public bool useGrounding;

		[Token(Token = "0x4001FF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[EnableIf("useGrounding")]
		[Tooltip("Maximum height that the body can step up onto")]
		[Min(0f)]
		public float maxStepHeight;

		[Token(Token = "0x4001FF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[EnableIf("useGrounding")]
		[Tooltip("Maximum angle the player can walk on")]
		[Min(0f)]
		public float maxStepAngle;

		[Token(Token = "0x4001FF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[EnableIf("useGrounding")]
		[Tooltip("The layers that count as ground")]
		public LayerMask groundLayerMask;

		[Token(Token = "0x4001FF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[Tooltip("Whether or not the player can use Climbable objects  (Objects with the Climbable component)")]
		[AutoToggleHeader("Enable Climbing", 0, 0)]
		public bool allowClimbing;

		[Token(Token = "0x4001FF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9D")]
		[Tooltip("Whether or not the player move while climbing")]
		[ShowIf("allowClimbing")]
		public bool allowClimbingMovement;

		[Token(Token = "0x4001FF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("How quickly the player can climb")]
		[ShowIf("allowClimbing")]
		public Vector3 climbingStrength;

		[Token(Token = "0x4001FF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public float climbingAcceleration;

		[Token(Token = "0x4001FF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public float climbingDrag;

		[Token(Token = "0x4001FFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[Tooltip("Inscreases the step height while climbing up to make it easier to step up onto a surface")]
		public float climbUpStepHeightMultiplier;

		[Token(Token = "0x4001FFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Tooltip("Whether or not the player can use Pushable objects (Objects with the Pushable component)")]
		[AutoToggleHeader("Enable Pushing", 0, 0)]
		public bool allowBodyPushing;

		[Token(Token = "0x4001FFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[EnableIf("allowBodyPushing")]
		[Tooltip("How quickly the player can climb")]
		public Vector3 pushingStrength;

		[Token(Token = "0x4001FFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public float pushingAcceleration;

		[Token(Token = "0x4001FFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public float pushingDrag;

		[Token(Token = "0x4001FFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Tooltip("Inscreases the step height while pushing up to make it easier to step up onto a surface")]
		public float pushUpStepHeightMultiplier;

		[Token(Token = "0x4002000")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		[AutoToggleHeader("Enable Platforming", 0, 0)]
		[Tooltip("Platforms will move the player with them. A platform is an object with the Transform component on it")]
		public bool allowPlatforms;

		[Token(Token = "0x4002001")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[EnableIf("useGrounding")]
		[Tooltip("The layers that platforming will be enabled on, will not work with layers that the HandPlayer can't collide with")]
		public LayerMask platformingLayerMask;

		[Token(Token = "0x4002002")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private float movementDeadzone;

		[Token(Token = "0x4002003")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private float turnDeadzone;

		[Token(Token = "0x4002004")]
		public const string HandPlayerLayer = "HandPlayer";

		[Token(Token = "0x4002005")]
		private const int groundRayCount = 21;

		[Token(Token = "0x4002007")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public float speed;

		[Token(Token = "0x4002008")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		public float fixedDeltaTime;

		[Token(Token = "0x4002009")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private float turnResetzone;

		[Token(Token = "0x400200A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		private float groundedOffset;

		[Token(Token = "0x400200B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private bool tempDisableGrounding;

		[Token(Token = "0x400200C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private HeadPhysicsFollower headPhysicsFollower;

		[Token(Token = "0x400200D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private CapsuleCollider bodyCapsule;

		[Token(Token = "0x400200E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private Vector3 moveDirection;

		[Token(Token = "0x400200F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		private float turningAxis;

		[Token(Token = "0x4002010")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private bool isGrounded;

		[Token(Token = "0x4002011")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x129")]
		private bool axisReset;

		[Token(Token = "0x4002012")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		private float playerHeight;

		[Token(Token = "0x4002013")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private bool lastCrouching;

		[Token(Token = "0x4002014")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		private float lastCrouchingHeight;

		[Token(Token = "0x4002015")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private Quaternion startRot;

		[Token(Token = "0x4002016")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private Vector3 targetTrackedPos;

		[Token(Token = "0x4002017")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
		private Vector3 lastUpdatePosition;

		[Token(Token = "0x4002018")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private Hand lastRightHand;

		[Token(Token = "0x4002019")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private Hand lastLeftHand;

		[Token(Token = "0x400201A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private Vector3 climbAxis;

		[Token(Token = "0x400201B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private Dictionary<Hand, Climbable> climbing;

		[Token(Token = "0x400201C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private Dictionary<Pushable, Hand> pushRight;

		[Token(Token = "0x400201D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		private Dictionary<Pushable, int> pushRightCount;

		[Token(Token = "0x400201E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		private Dictionary<Pushable, Hand> pushLeft;

		[Token(Token = "0x400201F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		private Dictionary<Pushable, int> pushLeftCount;

		[Token(Token = "0x4002020")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		private Vector3 pushAxis;

		[Token(Token = "0x4002021")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B4")]
		private Vector3 lastPlatformPosition;

		[Token(Token = "0x4002022")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		private Quaternion lastPlatformRotation;

		[Token(Token = "0x4002023")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		private RaycastHit closestHit;

		[Token(Token = "0x4002024")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1FC")]
		private float lastUpdateTime;

		[Token(Token = "0x4002025")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		private bool ignoreIterpolationFrame;

		[Token(Token = "0x4002026")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x204")]
		private Vector3 targetPosOffset;

		[Token(Token = "0x4002027")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		private int handPlayerMask;

		[Token(Token = "0x4002028")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x214")]
		private bool trackingStarted;

		[Token(Token = "0x4002029")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		private Vector3 lastHeadPos;

		[Token(Token = "0x400202A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x224")]
		private Vector3 offset;

		[Token(Token = "0x400202B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		private RaycastHit newClosestHit;

		[Token(Token = "0x400202C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25C")]
		private float highestPoint;

		[Token(Token = "0x400202D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
		private Coroutine disableGroundingRoutine;

		[Token(Token = "0x170003B8")]
		public static AutoHandPlayer Instance
		{
			[Token(Token = "0x6001F28")]
			[Address(RVA = "0xE2F99C", Offset = "0xE2F99C", VA = "0xE2F99C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003B9")]
		public CapsuleCollider bodyCollider
		{
			[Token(Token = "0x6001F29")]
			[Address(RVA = "0xE2FAB4", Offset = "0xE2FAB4", VA = "0xE2FAB4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003BA")]
		public Rigidbody body
		{
			[Token(Token = "0x6001F2A")]
			[Address(RVA = "0xE2FABC", Offset = "0xE2FABC", VA = "0xE2FABC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001F2B")]
			[Address(RVA = "0xE2FAC4", Offset = "0xE2FAC4", VA = "0xE2FAC4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6001F2C")]
		[Address(RVA = "0xE2FACC", Offset = "0xE2FACC", VA = "0xE2FACC", Slot = "4")]
		public virtual void Start()
		{
		}

		[Token(Token = "0x6001F2D")]
		[Address(RVA = "0xE30074", Offset = "0xE30074", VA = "0xE30074", Slot = "5")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6001F2E")]
		[Address(RVA = "0xE302D8", Offset = "0xE302D8", VA = "0xE302D8", Slot = "6")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6001F2F")]
		[Address(RVA = "0xE30000", Offset = "0xE30000", VA = "0xE30000")]
		[IteratorStateMachine(typeof(<CheckForTrackingStart>d__91))]
		private IEnumerator CheckForTrackingStart()
		{
			return null;
		}

		[Token(Token = "0x6001F30")]
		[Address(RVA = "0xE30624", Offset = "0xE30624", VA = "0xE30624", Slot = "7")]
		protected virtual void OnHeadTrackingStarted()
		{
		}

		[Token(Token = "0x6001F31")]
		[Address(RVA = "0xE2FD24", Offset = "0xE2FD24", VA = "0xE2FD24")]
		private void CreateHeadFollower()
		{
		}

		[Token(Token = "0x6001F32")]
		[Address(RVA = "0xE3065C", Offset = "0xE3065C", VA = "0xE3065C")]
		private void CheckHands()
		{
		}

		[Token(Token = "0x6001F33")]
		[Address(RVA = "0xE30094", Offset = "0xE30094", VA = "0xE30094")]
		private void EnableHand(Hand hand)
		{
		}

		[Token(Token = "0x6001F34")]
		[Address(RVA = "0xE302F8", Offset = "0xE302F8", VA = "0xE302F8")]
		private void DisableHand(Hand hand)
		{
		}

		[Token(Token = "0x6001F35")]
		[Address(RVA = "0xE30748", Offset = "0xE30748", VA = "0xE30748")]
		private void OnHandGrab(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6001F36")]
		[Address(RVA = "0xE307F4", Offset = "0xE307F4", VA = "0xE307F4")]
		private void OnHandRelease(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6001F37")]
		[Address(RVA = "0xE309A4", Offset = "0xE309A4", VA = "0xE309A4")]
		public void IgnoreCollider(Collider col, bool ignore)
		{
		}

		[Token(Token = "0x6001F38")]
		[Address(RVA = "0xE309F0", Offset = "0xE309F0", VA = "0xE309F0", Slot = "8")]
		public virtual void Move(Vector2 axis, bool useDeadzone = true, bool useRelativeDirection = false)
		{
		}

		[Token(Token = "0x6001F39")]
		[Address(RVA = "0xE30A78", Offset = "0xE30A78", VA = "0xE30A78", Slot = "9")]
		public virtual void Turn(float turnAxis)
		{
		}

		[Token(Token = "0x6001F3A")]
		[Address(RVA = "0xE30A94", Offset = "0xE30A94", VA = "0xE30A94")]
		private void Update()
		{
		}

		[Token(Token = "0x6001F3B")]
		[Address(RVA = "0xE310A0", Offset = "0xE310A0", VA = "0xE310A0", Slot = "10")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6001F3C")]
		[Address(RVA = "0xE31154", Offset = "0xE31154", VA = "0xE31154", Slot = "11")]
		protected virtual void UpdateRigidbody(Vector3 moveDir)
		{
		}

		[Token(Token = "0x6001F3D")]
		[Address(RVA = "0xE31A80", Offset = "0xE31A80", VA = "0xE31A80")]
		private void SyncBodyHead()
		{
		}

		[Token(Token = "0x6001F3E")]
		[Address(RVA = "0xE32408", Offset = "0xE32408", VA = "0xE32408", Slot = "12")]
		protected virtual bool CanInputMove()
		{
			return default(bool);
		}

		[Token(Token = "0x6001F3F")]
		[Address(RVA = "0xE32430", Offset = "0xE32430", VA = "0xE32430", Slot = "13")]
		protected virtual void InterpolateMovement()
		{
		}

		[Token(Token = "0x6001F40")]
		[Address(RVA = "0xE33478", Offset = "0xE33478", VA = "0xE33478", Slot = "14")]
		protected virtual void UpdateTurn(float deltaTime)
		{
		}

		[Token(Token = "0x6001F41")]
		[Address(RVA = "0xE33AA8", Offset = "0xE33AA8", VA = "0xE33AA8", Slot = "15")]
		protected virtual void Ground()
		{
		}

		[Token(Token = "0x6001F42")]
		[Address(RVA = "0xE341B8", Offset = "0xE341B8", VA = "0xE341B8")]
		public bool IsGrounded()
		{
			return default(bool);
		}

		[Token(Token = "0x6001F43")]
		[Address(RVA = "0xE341C0", Offset = "0xE341C0", VA = "0xE341C0")]
		public void ToggleFlying()
		{
		}

		[Token(Token = "0x6001F44")]
		[Address(RVA = "0xE341F4", Offset = "0xE341F4", VA = "0xE341F4", Slot = "16")]
		protected virtual void UpdatePlayerHeight()
		{
		}

		[Token(Token = "0x6001F45")]
		[Address(RVA = "0xE30AE8", Offset = "0xE30AE8", VA = "0xE30AE8")]
		protected void UpdatePlatform(bool isFixedUpdate)
		{
		}

		[Token(Token = "0x6001F46")]
		[Address(RVA = "0xE34320", Offset = "0xE34320", VA = "0xE34320")]
		public void Jump(float jumpPower = 1f)
		{
		}

		[Token(Token = "0x6001F47")]
		[Address(RVA = "0xE343D8", Offset = "0xE343D8", VA = "0xE343D8")]
		public void DisableGrounding(float seconds)
		{
		}

		[Token(Token = "0x6001F48")]
		[Address(RVA = "0xE3443C", Offset = "0xE3443C", VA = "0xE3443C")]
		[IteratorStateMachine(typeof(<DisableGroundingSecondsRoutine>d__120))]
		private IEnumerator DisableGroundingSecondsRoutine(float seconds)
		{
			return null;
		}

		[Token(Token = "0x6001F49")]
		[Address(RVA = "0xE344E8", Offset = "0xE344E8", VA = "0xE344E8")]
		public void AddVelocity(Vector3 force, ForceMode mode = ForceMode.Acceleration)
		{
		}

		[Token(Token = "0x6001F4A")]
		[Address(RVA = "0xE34504", Offset = "0xE34504", VA = "0xE34504", Slot = "17")]
		protected virtual void StartPush(Hand hand, GameObject other)
		{
		}

		[Token(Token = "0x6001F4B")]
		[Address(RVA = "0xE34738", Offset = "0xE34738", VA = "0xE34738", Slot = "18")]
		protected virtual void StopPush(Hand hand, GameObject other)
		{
		}

		[Token(Token = "0x6001F4C")]
		[Address(RVA = "0xE3492C", Offset = "0xE3492C", VA = "0xE3492C", Slot = "19")]
		protected virtual void StartGrabPush(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6001F4D")]
		[Address(RVA = "0xE34A9C", Offset = "0xE34A9C", VA = "0xE34A9C", Slot = "20")]
		protected virtual void EndGrabPush(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6001F4E")]
		[Address(RVA = "0xE34C10", Offset = "0xE34C10", VA = "0xE34C10", Slot = "21")]
		protected virtual void ApplyPushingForce()
		{
		}

		[Token(Token = "0x6001F4F")]
		[Address(RVA = "0xE35618", Offset = "0xE35618", VA = "0xE35618")]
		public bool IsPushing()
		{
			return default(bool);
		}

		[Token(Token = "0x6001F50")]
		[Address(RVA = "0xE35858", Offset = "0xE35858", VA = "0xE35858", Slot = "22")]
		protected virtual void StartClimb(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6001F51")]
		[Address(RVA = "0xE35A4C", Offset = "0xE35A4C", VA = "0xE35A4C", Slot = "23")]
		protected virtual void EndClimb(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6001F52")]
		[Address(RVA = "0xE35C08", Offset = "0xE35C08", VA = "0xE35C08", Slot = "24")]
		protected virtual void ApplyClimbingForce()
		{
		}

		[Token(Token = "0x6001F53")]
		[Address(RVA = "0xE318FC", Offset = "0xE318FC", VA = "0xE318FC")]
		public bool IsClimbing()
		{
			return default(bool);
		}

		[Token(Token = "0x6001F54")]
		[Address(RVA = "0xE35F04", Offset = "0xE35F04", VA = "0xE35F04", Slot = "25")]
		public virtual void SetPosition(Vector3 position)
		{
		}

		[Token(Token = "0x6001F55")]
		[Address(RVA = "0xE35F8C", Offset = "0xE35F8C", VA = "0xE35F8C", Slot = "26")]
		public virtual void SetPosition(Vector3 position, Quaternion rotation)
		{
		}

		[Token(Token = "0x6001F56")]
		[Address(RVA = "0xE36460", Offset = "0xE36460", VA = "0xE36460", Slot = "27")]
		public virtual void SetRotation(Quaternion rotation)
		{
		}

		[Token(Token = "0x6001F57")]
		[Address(RVA = "0xE367D8", Offset = "0xE367D8", VA = "0xE367D8", Slot = "28")]
		public virtual void AddRotation(Quaternion addRotation)
		{
		}

		[Token(Token = "0x6001F58")]
		[Address(RVA = "0xE36AAC", Offset = "0xE36AAC", VA = "0xE36AAC", Slot = "29")]
		public virtual void Recenter()
		{
		}

		[Token(Token = "0x6001F59")]
		[Address(RVA = "0xE31850", Offset = "0xE31850", VA = "0xE31850")]
		private Vector3 AlterDirection(Vector3 moveAxis)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001F5A")]
		[Address(RVA = "0xE36CA4", Offset = "0xE36CA4", VA = "0xE36CA4")]
		public AutoHandPlayer()
		{
		}
	}
	[Token(Token = "0x20005DF")]
	public class AutoHandPlayerForceArea : MonoBehaviour
	{
		[Token(Token = "0x4002035")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AutoHandPlayer player;

		[Token(Token = "0x4002036")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float force;

		[Token(Token = "0x4002037")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public ForceMode forceMode;

		[Token(Token = "0x4002038")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LayerMask layers;

		[Token(Token = "0x4002039")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Collider[] colliders;

		[Token(Token = "0x6001F68")]
		[Address(RVA = "0xE37294", Offset = "0xE37294", VA = "0xE37294")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001F69")]
		[Address(RVA = "0xE379C0", Offset = "0xE379C0", VA = "0xE379C0")]
		public AutoHandPlayerForceArea()
		{
		}
	}
	[Token(Token = "0x20005E1")]
	[RequireComponent(typeof(Grabbable))]
	public class Climbable : MonoBehaviour
	{
		[Token(Token = "0x400203C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 axis;

		[Token(Token = "0x400203D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Stabber stabber;

		[Token(Token = "0x6001F6C")]
		[Address(RVA = "0xE37B00", Offset = "0xE37B00", VA = "0xE37B00")]
		private void Start()
		{
		}

		[Token(Token = "0x6001F6D")]
		[Address(RVA = "0xE37DE8", Offset = "0xE37DE8", VA = "0xE37DE8")]
		public Climbable()
		{
		}
	}
	[Token(Token = "0x20005E2")]
	[RequireComponent(typeof(Rigidbody))]
	public class HeadPhysicsFollower : MonoBehaviour
	{
		[Token(Token = "0x400203E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("References")]
		public Camera headCamera;

		[Token(Token = "0x400203F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform trackingContainer;

		[Token(Token = "0x4002040")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform followBody;

		[Token(Token = "0x4002041")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Follow Settings")]
		public float followStrength;

		[Token(Token = "0x4002042")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The maximum allowed distance from the body for the headCamera to still move")]
		internal SphereCollider headCollider;

		[Token(Token = "0x4002043")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 startHeadPos;

		[Token(Token = "0x4002044")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private bool started;

		[Token(Token = "0x4002045")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Transform _moveTo;

		[Token(Token = "0x4002046")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal Rigidbody body;

		[Token(Token = "0x4002047")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private CollisionTracker collisionTracker;

		[Token(Token = "0x4002048")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float lastUpdateTime;

		[Token(Token = "0x170003BF")]
		private Transform moveTo
		{
			[Token(Token = "0x6001F70")]
			[Address(RVA = "0xE37E60", Offset = "0xE37E60", VA = "0xE37E60")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001F71")]
		[Address(RVA = "0xE37FF0", Offset = "0xE37FF0", VA = "0xE37FF0")]
		public void Start()
		{
		}

		[Token(Token = "0x6001F72")]
		[Address(RVA = "0xE38204", Offset = "0xE38204", VA = "0xE38204")]
		internal void Init()
		{
		}

		[Token(Token = "0x6001F73")]
		[Address(RVA = "0xE383E8", Offset = "0xE383E8", VA = "0xE383E8")]
		protected void FixedUpdate()
		{
		}

		[Token(Token = "0x6001F74")]
		[Address(RVA = "0xE384D0", Offset = "0xE384D0", VA = "0xE384D0")]
		public bool Started()
		{
			return default(bool);
		}

		[Token(Token = "0x6001F75")]
		[Address(RVA = "0xE384D8", Offset = "0xE384D8", VA = "0xE384D8", Slot = "4")]
		internal virtual void MoveTo()
		{
		}

		[Token(Token = "0x6001F76")]
		[Address(RVA = "0xE386FC", Offset = "0xE386FC", VA = "0xE386FC", Slot = "5")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6001F77")]
		[Address(RVA = "0xE38B68", Offset = "0xE38B68", VA = "0xE38B68")]
		public int CollisionCount()
		{
			return default(int);
		}

		[Token(Token = "0x6001F78")]
		[Address(RVA = "0xE38BC8", Offset = "0xE38BC8", VA = "0xE38BC8")]
		public HeadPhysicsFollower()
		{
		}
	}
	[Token(Token = "0x20005E3")]
	public class IgnoreHandPlayerCollision : MonoBehaviour
	{
		[Token(Token = "0x20005E4")]
		[CompilerGenerated]
		private sealed class <Start>d__1 : IEnumerable<object>, IEnumerable, IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400204A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400204B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400204C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x400204D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public IgnoreHandPlayerCollision <>4__this;

			[Token(Token = "0x170003C0")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001F80")]
				[Address(RVA = "0xE390CC", Offset = "0xE390CC", VA = "0xE390CC", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003C1")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001F82")]
				[Address(RVA = "0xE39114", Offset = "0xE39114", VA = "0xE39114", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001F7D")]
			[Address(RVA = "0xE38C5C", Offset = "0xE38C5C", VA = "0xE38C5C")]
			[DebuggerHidden]
			public <Start>d__1(int <>1__state)
			{
			}

			[Token(Token = "0x6001F7E")]
			[Address(RVA = "0xE38F48", Offset = "0xE38F48", VA = "0xE38F48", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001F7F")]
			[Address(RVA = "0xE38F4C", Offset = "0xE38F4C", VA = "0xE38F4C", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001F81")]
			[Address(RVA = "0xE390D4", Offset = "0xE390D4", VA = "0xE390D4", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6001F83")]
			[Address(RVA = "0xE3911C", Offset = "0xE3911C", VA = "0xE3911C", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<object> System.Collections.Generic.IEnumerable<System.Object>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6001F84")]
			[Address(RVA = "0xE391C8", Offset = "0xE391C8", VA = "0xE391C8", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x4002049")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<Collider> colliders;

		[Token(Token = "0x6001F79")]
		[Address(RVA = "0xE38BD8", Offset = "0xE38BD8", VA = "0xE38BD8")]
		[IteratorStateMachine(typeof(<Start>d__1))]
		private IEnumerable Start()
		{
			return null;
		}

		[Token(Token = "0x6001F7A")]
		[Address(RVA = "0xE38C90", Offset = "0xE38C90", VA = "0xE38C90")]
		public void ActivateIgnoreCollision()
		{
		}

		[Token(Token = "0x6001F7B")]
		[Address(RVA = "0xE38DE8", Offset = "0xE38DE8", VA = "0xE38DE8")]
		public void DeactivateIgnoreCollision()
		{
		}

		[Token(Token = "0x6001F7C")]
		[Address(RVA = "0xE38F40", Offset = "0xE38F40", VA = "0xE38F40")]
		public IgnoreHandPlayerCollision()
		{
		}
	}
	[Token(Token = "0x20005E5")]
	[DefaultExecutionOrder(-50)]
	[RequireComponent(typeof(InterpolatedTransformUpdater))]
	public class InterpolatedTransform : MonoBehaviour
	{
		[Token(Token = "0x20005E6")]
		private struct TransformData
		{
			[Token(Token = "0x4002052")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3 position;

			[Token(Token = "0x4002053")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public Quaternion rotation;

			[Token(Token = "0x4002054")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Vector3 scale;

			[Token(Token = "0x6001F8E")]
			[Address(RVA = "0xE3930C", Offset = "0xE3930C", VA = "0xE3930C")]
			public TransformData(Vector3 position, Quaternion rotation, Vector3 scale)
			{
			}
		}

		[Token(Token = "0x20005E7")]
		[CompilerGenerated]
		private sealed class <Disable>d__10 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002055")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002056")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002057")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public InterpolatedTransform <>4__this;

			[Token(Token = "0x4002058")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float time;

			[Token(Token = "0x170003C2")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001F92")]
				[Address(RVA = "0xE399E4", Offset = "0xE399E4", VA = "0xE399E4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003C3")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001F94")]
				[Address(RVA = "0xE39A2C", Offset = "0xE39A2C", VA = "0xE39A2C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001F8F")]
			[Address(RVA = "0xE398DC", Offset = "0xE398DC", VA = "0xE398DC")]
			[DebuggerHidden]
			public <Disable>d__10(int <>1__state)
			{
			}

			[Token(Token = "0x6001F90")]
			[Address(RVA = "0xE39914", Offset = "0xE39914", VA = "0xE39914", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001F91")]
			[Address(RVA = "0xE39918", Offset = "0xE39918", VA = "0xE39918", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001F93")]
			[Address(RVA = "0xE399EC", Offset = "0xE399EC", VA = "0xE399EC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400204E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private TransformData[] m_lastTransforms;

		[Token(Token = "0x400204F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int m_newTransformIndex;

		[Token(Token = "0x4002050")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private bool run;

		[Token(Token = "0x4002051")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Coroutine disableForTime;

		[Token(Token = "0x6001F85")]
		[Address(RVA = "0xE391CC", Offset = "0xE391CC", VA = "0xE391CC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001F86")]
		[Address(RVA = "0xE391D0", Offset = "0xE391D0", VA = "0xE391D0")]
		public void ForgetPreviousTransforms()
		{
		}

		[Token(Token = "0x6001F87")]
		[Address(RVA = "0xE39330", Offset = "0xE39330", VA = "0xE39330")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001F88")]
		[Address(RVA = "0xE39438", Offset = "0xE39438", VA = "0xE39438")]
		public void LateFixedUpdate()
		{
		}

		[Token(Token = "0x6001F89")]
		[Address(RVA = "0xE39538", Offset = "0xE39538", VA = "0xE39538")]
		private void Update()
		{
		}

		[Token(Token = "0x6001F8A")]
		[Address(RVA = "0xE397B4", Offset = "0xE397B4", VA = "0xE397B4")]
		public void DisableForSeconds(float time)
		{
		}

		[Token(Token = "0x6001F8B")]
		[Address(RVA = "0xE39858", Offset = "0xE39858", VA = "0xE39858")]
		[IteratorStateMachine(typeof(<Disable>d__10))]
		private IEnumerator Disable(float time)
		{
			return null;
		}

		[Token(Token = "0x6001F8C")]
		[Address(RVA = "0xE39528", Offset = "0xE39528", VA = "0xE39528")]
		private int OldTransformIndex()
		{
			return default(int);
		}

		[Token(Token = "0x6001F8D")]
		[Address(RVA = "0xE39904", Offset = "0xE39904", VA = "0xE39904")]
		public InterpolatedTransform()
		{
		}
	}
	[Token(Token = "0x20005E8")]
	[DefaultExecutionOrder(100)]
	public class InterpolatedTransformUpdater : MonoBehaviour
	{
		[Token(Token = "0x4002059")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private InterpolatedTransform _interpolatedTransform;

		[Token(Token = "0x170003C4")]
		private InterpolatedTransform interpolatedTransform
		{
			[Token(Token = "0x6001F95")]
			[Address(RVA = "0xE39A34", Offset = "0xE39A34", VA = "0xE39A34")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001F96")]
		[Address(RVA = "0xE39ADC", Offset = "0xE39ADC", VA = "0xE39ADC")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001F97")]
		[Address(RVA = "0xE39AF8", Offset = "0xE39AF8", VA = "0xE39AF8")]
		public InterpolatedTransformUpdater()
		{
		}
	}
	[Token(Token = "0x20005E9")]
	[DefaultExecutionOrder(-100)]
	public class InterpolationController : MonoBehaviour
	{
		[Token(Token = "0x400205A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float[] m_lastFixedUpdateTimes;

		[Token(Token = "0x400205B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int m_newTimeIndex;

		[Token(Token = "0x400205C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static float m_interpolationFactor;

		[Token(Token = "0x400205D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static InterpolationController _Instance;

		[Token(Token = "0x170003C5")]
		public static float InterpolationFactor
		{
			[Token(Token = "0x6001F98")]
			[Address(RVA = "0xE39B00", Offset = "0xE39B00", VA = "0xE39B00")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170003C6")]
		public static InterpolationController Instance
		{
			[Token(Token = "0x6001F99")]
			[Address(RVA = "0xE39B48", Offset = "0xE39B48", VA = "0xE39B48")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001F9A")]
		[Address(RVA = "0xE39CD8", Offset = "0xE39CD8", VA = "0xE39CD8")]
		public void Start()
		{
		}

		[Token(Token = "0x6001F9B")]
		[Address(RVA = "0xE39D38", Offset = "0xE39D38", VA = "0xE39D38")]
		public void FixedUpdate()
		{
		}

		[Token(Token = "0x6001F9C")]
		[Address(RVA = "0xE39DA0", Offset = "0xE39DA0", VA = "0xE39DA0")]
		public void Update()
		{
		}

		[Token(Token = "0x6001F9D")]
		[Address(RVA = "0xE39D90", Offset = "0xE39D90", VA = "0xE39D90")]
		private int OldTimeIndex()
		{
			return default(int);
		}

		[Token(Token = "0x6001F9E")]
		[Address(RVA = "0xE39E60", Offset = "0xE39E60", VA = "0xE39E60")]
		public InterpolationController()
		{
		}
	}
	[Token(Token = "0x20005EA")]
	public class PlayerPlatform : MonoBehaviour
	{
		[Token(Token = "0x6001F9F")]
		[Address(RVA = "0xE39E68", Offset = "0xE39E68", VA = "0xE39E68")]
		public PlayerPlatform()
		{
		}
	}
	[Token(Token = "0x20005EB")]
	public class Pushable : MonoBehaviour
	{
		[Token(Token = "0x400205E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 strengthScale;

		[Token(Token = "0x6001FA0")]
		[Address(RVA = "0xE39E70", Offset = "0xE39E70", VA = "0xE39E70")]
		public Pushable()
		{
		}
	}
	[Token(Token = "0x20005EC")]
	public class Teleporter : MonoBehaviour
	{
		[Token(Token = "0x400205F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Teleport")]
		[Tooltip("The object to teleport")]
		public GameObject teleportObject;

		[Token(Token = "0x4002060")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Can be left empty - Used for if there is a container that should be teleported in addition to the main teleport object")]
		public Transform[] additionalTeleports;

		[Token(Token = "0x4002061")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Aim Settings")]
		[Tooltip("The Object to Shoot the Beam From")]
		public Transform aimer;

		[Token(Token = "0x4002062")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Layers You Can Teleport On")]
		public LayerMask layer;

		[Token(Token = "0x4002063")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("The Maximum Slope You Can Teleport On")]
		public float maxSurfaceAngle;

		[Token(Token = "0x4002064")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Min(0f)]
		public float distanceMultiplyer;

		[Token(Token = "0x4002065")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Min(0f)]
		public float curveStrength;

		[Token(Token = "0x4002066")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Use Worldspace Must be True")]
		public LineRenderer line;

		[Token(Token = "0x4002067")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Maximum Length of The Teleport Line")]
		public int lineSegments;

		[Token(Token = "0x4002068")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Line Settings")]
		public Gradient canTeleportColor;

		[Token(Token = "0x4002069")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Gradient cantTeleportColor;

		[Token(Token = "0x400206A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("This gameobject will match the position of the teleport point when aiming")]
		public GameObject indicator;

		[Token(Token = "0x400206B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Header("Unity Events")]
		public UnityEvent OnStartTeleport;

		[Token(Token = "0x400206C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public UnityEvent OnStopTeleport;

		[Token(Token = "0x400206D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public UnityEvent OnTeleport;

		[Token(Token = "0x400206E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector3[] lineArr;

		[Token(Token = "0x400206F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private bool aiming;

		[Token(Token = "0x4002070")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x89")]
		private bool hitting;

		[Token(Token = "0x4002071")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private RaycastHit aimHit;

		[Token(Token = "0x4002072")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private HandTeleportGuard[] teleportGuards;

		[Token(Token = "0x4002073")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private AutoHandPlayer playerBody;

		[Token(Token = "0x6001FA1")]
		[Address(RVA = "0xE39ED0", Offset = "0xE39ED0", VA = "0xE39ED0")]
		private void Start()
		{
		}

		[Token(Token = "0x6001FA2")]
		[Address(RVA = "0xE3A038", Offset = "0xE3A038", VA = "0xE3A038")]
		private void Update()
		{
		}

		[Token(Token = "0x6001FA3")]
		[Address(RVA = "0xE3A078", Offset = "0xE3A078", VA = "0xE3A078")]
		private void CalculateTeleport()
		{
		}

		[Token(Token = "0x6001FA4")]
		[Address(RVA = "0xE3A600", Offset = "0xE3A600", VA = "0xE3A600")]
		private void DrawIndicator()
		{
		}

		[Token(Token = "0x6001FA5")]
		[Address(RVA = "0xE3A714", Offset = "0xE3A714", VA = "0xE3A714")]
		public void StartTeleport()
		{
		}

		[Token(Token = "0x6001FA6")]
		[Address(RVA = "0xE3A734", Offset = "0xE3A734", VA = "0xE3A734")]
		public void CancelTeleport()
		{
		}

		[Token(Token = "0x6001FA7")]
		[Address(RVA = "0xE3A774", Offset = "0xE3A774", VA = "0xE3A774")]
		public void Teleport()
		{
		}

		[Token(Token = "0x6001FA8")]
		[Address(RVA = "0xE3AAC0", Offset = "0xE3AAC0", VA = "0xE3AAC0")]
		public Teleporter()
		{
		}
	}
	[Token(Token = "0x20005ED")]
	public delegate void CollisionEvent(GameObject from);
	[Token(Token = "0x20005EE")]
	public class CollisionTracker : MonoBehaviour
	{
		[Token(Token = "0x4002074")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool disableCollisionTracking;

		[Token(Token = "0x4002075")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool disableTriggersTracking;

		[Token(Token = "0x170003C7")]
		public int collisionCount
		{
			[Token(Token = "0x6001FB5")]
			[Address(RVA = "0xE38B80", Offset = "0xE38B80", VA = "0xE38B80")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170003C8")]
		public int triggerCount
		{
			[Token(Token = "0x6001FB6")]
			[Address(RVA = "0xE3B20C", Offset = "0xE3B20C", VA = "0xE3B20C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170003C9")]
		public List<GameObject> triggerObjects
		{
			[Token(Token = "0x6001FB7")]
			[Address(RVA = "0xE3B254", Offset = "0xE3B254", VA = "0xE3B254")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001FB8")]
			[Address(RVA = "0xE3B25C", Offset = "0xE3B25C", VA = "0xE3B25C")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x170003CA")]
		public List<int> triggerObjectsCount
		{
			[Token(Token = "0x6001FB9")]
			[Address(RVA = "0xE3B264", Offset = "0xE3B264", VA = "0xE3B264")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001FBA")]
			[Address(RVA = "0xE3B26C", Offset = "0xE3B26C", VA = "0xE3B26C")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x170003CB")]
		public List<GameObject> collisionObjects
		{
			[Token(Token = "0x6001FBB")]
			[Address(RVA = "0xE3B274", Offset = "0xE3B274", VA = "0xE3B274")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001FBC")]
			[Address(RVA = "0xE3B27C", Offset = "0xE3B27C", VA = "0xE3B27C")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x170003CC")]
		public List<int> collisionObjectsCount
		{
			[Token(Token = "0x6001FBD")]
			[Address(RVA = "0xE3B284", Offset = "0xE3B284", VA = "0xE3B284")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001FBE")]
			[Address(RVA = "0xE3B28C", Offset = "0xE3B28C", VA = "0xE3B28C")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x1400003A")]
		public event CollisionEvent OnCollisionFirstEnter
		{
			[Token(Token = "0x6001FAD")]
			[Address(RVA = "0xE3AD2C", Offset = "0xE3AD2C", VA = "0xE3AD2C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001FAE")]
			[Address(RVA = "0xE3ADC8", Offset = "0xE3ADC8", VA = "0xE3ADC8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400003B")]
		public event CollisionEvent OnCollisionLastExit
		{
			[Token(Token = "0x6001FAF")]
			[Address(RVA = "0xE3AE64", Offset = "0xE3AE64", VA = "0xE3AE64")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001FB0")]
			[Address(RVA = "0xE3AF00", Offset = "0xE3AF00", VA = "0xE3AF00")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400003C")]
		public event CollisionEvent OnTriggerFirstEnter
		{
			[Token(Token = "0x6001FB1")]
			[Address(RVA = "0xE3AF9C", Offset = "0xE3AF9C", VA = "0xE3AF9C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001FB2")]
			[Address(RVA = "0xE3B038", Offset = "0xE3B038", VA = "0xE3B038")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400003D")]
		public event CollisionEvent OnTriggeLastExit
		{
			[Token(Token = "0x6001FB3")]
			[Address(RVA = "0xE3B0D4", Offset = "0xE3B0D4", VA = "0xE3B0D4")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001FB4")]
			[Address(RVA = "0xE3B170", Offset = "0xE3B170", VA = "0xE3B170")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6001FBF")]
		[Address(RVA = "0xE3B294", Offset = "0xE3B294", VA = "0xE3B294")]
		public void Clear()
		{
		}

		[Token(Token = "0x6001FC0")]
		[Address(RVA = "0xE3B35C", Offset = "0xE3B35C", VA = "0xE3B35C", Slot = "4")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6001FC1")]
		[Address(RVA = "0xE3B5A8", Offset = "0xE3B5A8", VA = "0xE3B5A8")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001FC2")]
		[Address(RVA = "0xE3B5AC", Offset = "0xE3B5AC", VA = "0xE3B5AC")]
		private void CheckCollisions()
		{
		}

		[Token(Token = "0x6001FC3")]
		[Address(RVA = "0xE3B854", Offset = "0xE3B854", VA = "0xE3B854", Slot = "5")]
		protected virtual void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6001FC4")]
		[Address(RVA = "0xE3BAC0", Offset = "0xE3BAC0", VA = "0xE3BAC0", Slot = "6")]
		protected virtual void OnCollisionExit(Collision collision)
		{
		}

		[Token(Token = "0x6001FC5")]
		[Address(RVA = "0xE3BCA4", Offset = "0xE3BCA4", VA = "0xE3BCA4", Slot = "7")]
		protected virtual void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6001FC6")]
		[Address(RVA = "0xE3BEE0", Offset = "0xE3BEE0", VA = "0xE3BEE0", Slot = "8")]
		protected virtual void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6001FC7")]
		[Address(RVA = "0xE3C0B0", Offset = "0xE3C0B0", VA = "0xE3C0B0")]
		public CollisionTracker()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20005EF")]
	public class UnityCanvasPointerEvent : UnityEvent<Vector3, GameObject>
	{
		[Token(Token = "0x6001FC8")]
		[Address(RVA = "0xE3C1E8", Offset = "0xE3C1E8", VA = "0xE3C1E8")]
		public UnityCanvasPointerEvent()
		{
		}
	}
	[Token(Token = "0x20005F0")]
	public class HandCanvasPointer : MonoBehaviour
	{
		[Token(Token = "0x400207E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("References")]
		public GameObject hitPointMarker;

		[Token(Token = "0x400207F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private LineRenderer lineRenderer;

		[Token(Token = "0x4002080")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Ray settings")]
		public float raycastLength;

		[Token(Token = "0x4002081")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool autoShowTarget;

		[Token(Token = "0x4002082")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public LayerMask UILayer;

		[Token(Token = "0x4002083")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Events")]
		public UnityCanvasPointerEvent StartSelect;

		[Token(Token = "0x4002084")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public UnityCanvasPointerEvent StopSelect;

		[Token(Token = "0x4002085")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public UnityCanvasPointerEvent StartPoint;

		[Token(Token = "0x4002086")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public UnityCanvasPointerEvent StopPoint;

		[Token(Token = "0x4002087")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public GameObject _currTarget;

		[Token(Token = "0x4002089")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private bool hover;

		[Token(Token = "0x400208A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private AutoInputModule inputModule;

		[Token(Token = "0x400208B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float lineSegements;

		[Token(Token = "0x400208C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Camera cam;

		[Token(Token = "0x400208D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private int pointerIndex;

		[Token(Token = "0x170003CD")]
		public GameObject currTarget
		{
			[Token(Token = "0x6001FC9")]
			[Address(RVA = "0xE3C230", Offset = "0xE3C230", VA = "0xE3C230")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003CE")]
		public RaycastHit lastHit
		{
			[Token(Token = "0x6001FCA")]
			[Address(RVA = "0xE3C238", Offset = "0xE3C238", VA = "0xE3C238")]
			[CompilerGenerated]
			get
			{
				return default(RaycastHit);
			}
			[Token(Token = "0x6001FCB")]
			[Address(RVA = "0xE3C24C", Offset = "0xE3C24C", VA = "0xE3C24C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170003CF")]
		public static Camera UICamera
		{
			[Token(Token = "0x6001FCC")]
			[Address(RVA = "0xE3C268", Offset = "0xE3C268", VA = "0xE3C268")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001FCD")]
		[Address(RVA = "0xE3C578", Offset = "0xE3C578", VA = "0xE3C578")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001FCE")]
		[Address(RVA = "0xE3C648", Offset = "0xE3C648", VA = "0xE3C648")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001FCF")]
		[Address(RVA = "0xE3C6D8", Offset = "0xE3C6D8", VA = "0xE3C6D8")]
		public void SetIndex(int index)
		{
		}

		[Token(Token = "0x6001FD0")]
		[Address(RVA = "0xE3C6E0", Offset = "0xE3C6E0", VA = "0xE3C6E0")]
		internal void Preprocess()
		{
		}

		[Token(Token = "0x6001FD1")]
		[Address(RVA = "0xE3C770", Offset = "0xE3C770", VA = "0xE3C770")]
		public void Press()
		{
		}

		[Token(Token = "0x6001FD2")]
		[Address(RVA = "0xE3C9D8", Offset = "0xE3C9D8", VA = "0xE3C9D8")]
		public void Release()
		{
		}

		[Token(Token = "0x6001FD3")]
		[Address(RVA = "0xE3CBE0", Offset = "0xE3CBE0", VA = "0xE3CBE0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001FD4")]
		[Address(RVA = "0xE3CE70", Offset = "0xE3CE70", VA = "0xE3CE70")]
		private void Update()
		{
		}

		[Token(Token = "0x6001FD5")]
		[Address(RVA = "0xE3CE74", Offset = "0xE3CE74", VA = "0xE3CE74")]
		private void UpdateLine()
		{
		}

		[Token(Token = "0x6001FD6")]
		[Address(RVA = "0xE3D630", Offset = "0xE3D630", VA = "0xE3D630")]
		private RaycastHit CreateRaycast(float dist)
		{
			return default(RaycastHit);
		}

		[Token(Token = "0x6001FD7")]
		[Address(RVA = "0xE3C994", Offset = "0xE3C994", VA = "0xE3C994")]
		private void ShowRay(bool show)
		{
		}

		[Token(Token = "0x6001FD8")]
		[Address(RVA = "0xE3D720", Offset = "0xE3D720", VA = "0xE3D720")]
		public HandCanvasPointer()
		{
		}
	}
	[Token(Token = "0x20005F1")]
	public enum MagnetEffect
	{
		[Token(Token = "0x400208F")]
		Attractive,
		[Token(Token = "0x4002090")]
		Repulsive
	}
	[Serializable]
	[Token(Token = "0x20005F2")]
	public class UnityMagneticEvent : UnityEvent<MagneticSource, MagneticBody>
	{
		[Token(Token = "0x6001FD9")]
		[Address(RVA = "0xE3D740", Offset = "0xE3D740", VA = "0xE3D740")]
		public UnityMagneticEvent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20005F3")]
	[RequireComponent(typeof(Rigidbody))]
	public class MagneticSource : MonoBehaviour
	{
		[Token(Token = "0x4002091")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MagnetEffect magneticEffect;

		[Token(Token = "0x4002092")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float strength;

		[Token(Token = "0x4002093")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float radius;

		[Token(Token = "0x4002094")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public ForceMode forceMode;

		[Token(Token = "0x4002095")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimationCurve forceDistanceCurce;

		[Token(Token = "0x4002096")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int magneticIndex;

		[Token(Token = "0x4002097")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UnityMagneticEvent magneticEnter;

		[Token(Token = "0x4002098")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public UnityMagneticEvent magneticExit;

		[Token(Token = "0x4002099")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Rigidbody body;

		[Token(Token = "0x400209A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private List<MagneticBody> magneticBodies;

		[Token(Token = "0x400209B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float radiusScale;

		[Token(Token = "0x6001FDA")]
		[Address(RVA = "0xE3D788", Offset = "0xE3D788", VA = "0xE3D788")]
		private void Start()
		{
		}

		[Token(Token = "0x6001FDB")]
		[Address(RVA = "0xE3D890", Offset = "0xE3D890", VA = "0xE3D890")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001FDC")]
		[Address(RVA = "0xE3DC94", Offset = "0xE3DC94", VA = "0xE3DC94")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6001FDD")]
		[Address(RVA = "0xE3DE4C", Offset = "0xE3DE4C", VA = "0xE3DE4C")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6001FDE")]
		[Address(RVA = "0xE3DFA0", Offset = "0xE3DFA0", VA = "0xE3DFA0")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6001FDF")]
		[Address(RVA = "0xE3E08C", Offset = "0xE3E08C", VA = "0xE3E08C")]
		public MagneticSource()
		{
		}
	}
	[Token(Token = "0x20005F4")]
	public class Stabbable : MonoBehaviour
	{
		[Token(Token = "0x400209C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Rigidbody body;

		[Token(Token = "0x400209D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Grabbable grabbable;

		[Token(Token = "0x400209E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The index that must match the stabbers index to allow stabbing")]
		public int stabIndex;

		[Token(Token = "0x400209F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int maxStabbers;

		[Token(Token = "0x40020A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float positionDamper;

		[Token(Token = "0x40020A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float rotationDamper;

		[Token(Token = "0x40020A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool parentOnStab;

		[Token(Token = "0x40020A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Events")]
		public UnityEvent StartStab;

		[Token(Token = "0x40020A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public UnityEvent EndStab;

		[Token(Token = "0x40020A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public StabEvent StartStabEvent;

		[Token(Token = "0x40020A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public StabEvent EndStabEvent;

		[Token(Token = "0x40020A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int currentStabs;

		[Token(Token = "0x40020A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private List<Stabber> stabbing;

		[Token(Token = "0x40020A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Transform stabParent;

		[Token(Token = "0x6001FE0")]
		[Address(RVA = "0xE3E148", Offset = "0xE3E148", VA = "0xE3E148")]
		public void Start()
		{
		}

		[Token(Token = "0x6001FE1")]
		[Address(RVA = "0xE3E3DC", Offset = "0xE3E3DC", VA = "0xE3E3DC", Slot = "4")]
		public virtual void OnStab(Stabber stabber)
		{
		}

		[Token(Token = "0x6001FE2")]
		[Address(RVA = "0xE3E4E0", Offset = "0xE3E4E0", VA = "0xE3E4E0", Slot = "5")]
		public virtual void OnEndStab(Stabber stabber)
		{
		}

		[Token(Token = "0x6001FE3")]
		[Address(RVA = "0xE3E570", Offset = "0xE3E570", VA = "0xE3E570", Slot = "6")]
		public virtual bool CanStab(Stabber stabber)
		{
			return default(bool);
		}

		[Token(Token = "0x6001FE4")]
		[Address(RVA = "0xE3E5AC", Offset = "0xE3E5AC", VA = "0xE3E5AC")]
		public int StabbedCount()
		{
			return default(int);
		}

		[Token(Token = "0x6001FE5")]
		[Address(RVA = "0xE3E5F4", Offset = "0xE3E5F4", VA = "0xE3E5F4")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6001FE6")]
		[Address(RVA = "0xE3E6D4", Offset = "0xE3E6D4", VA = "0xE3E6D4")]
		public Stabbable()
		{
		}
	}
	[Token(Token = "0x20005F5")]
	public delegate void StabEvent(Stabber stabber, Stabbable stab);
	[Token(Token = "0x20005F6")]
	public class Stabber : MonoBehaviour
	{
		[Token(Token = "0x20005F7")]
		[CompilerGenerated]
		private sealed class <StartWait>d__31 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40020C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40020C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40020CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Stabber <>4__this;

			[Token(Token = "0x40020CB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <i>5__2;

			[Token(Token = "0x170003D0")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001FFD")]
				[Address(RVA = "0xE4055C", Offset = "0xE4055C", VA = "0xE4055C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003D1")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001FFF")]
				[Address(RVA = "0xE405A4", Offset = "0xE405A4", VA = "0xE405A4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001FFA")]
			[Address(RVA = "0xE3EBA0", Offset = "0xE3EBA0", VA = "0xE3EBA0")]
			[DebuggerHidden]
			public <StartWait>d__31(int <>1__state)
			{
			}

			[Token(Token = "0x6001FFB")]
			[Address(RVA = "0xE40458", Offset = "0xE40458", VA = "0xE40458", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001FFC")]
			[Address(RVA = "0xE4045C", Offset = "0xE4045C", VA = "0xE4045C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001FFE")]
			[Address(RVA = "0xE40564", Offset = "0xE40564", VA = "0xE40564", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40020AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Can be left empty/null")]
		public Grabbable grabbable;

		[Token(Token = "0x40020AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Stab Settings")]
		public CapsuleCollider stabCapsule;

		[Token(Token = "0x40020AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("If left empty, will default to grabbable layers")]
		public LayerMask stabbableLayers;

		[Token(Token = "0x40020AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("The index that must match the stabbables index to allow stabbing")]
		public int stabIndex;

		[Token(Token = "0x40020AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int maxStabs;

		[Token(Token = "0x40020AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Header("Joint Settings")]
		public Vector3 axis;

		[Token(Token = "0x40020B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float limit;

		[Token(Token = "0x40020B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public ConfigurableJointMotion xMotion;

		[Token(Token = "0x40020B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public ConfigurableJointMotion yMotion;

		[Token(Token = "0x40020B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public ConfigurableJointMotion zMotion;

		[Token(Token = "0x40020B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public ConfigurableJointMotion angularXMotion;

		[Token(Token = "0x40020B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public ConfigurableJointMotion angularYMotion;

		[Token(Token = "0x40020B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public ConfigurableJointMotion angularZMotion;

		[Token(Token = "0x40020B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Space]
		public float positionDampeningMultiplyer;

		[Token(Token = "0x40020B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float rotationDampeningMultiplyer;

		[Token(Token = "0x40020B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Header("Events")]
		public UnityEvent StartStab;

		[Token(Token = "0x40020BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public UnityEvent EndStab;

		[Token(Token = "0x40020BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public StabEvent StartStabEvent;

		[Token(Token = "0x40020BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public StabEvent EndStabEvent;

		[Token(Token = "0x40020BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private List<Stabbable> stabbed;

		[Token(Token = "0x40020BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private List<ConfigurableJoint> stabbedJoints;

		[Token(Token = "0x40020BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Dictionary<Stabbable, int> stabbedFrames;

		[Token(Token = "0x40020C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Collider[] resultsNonAlloc;

		[Token(Token = "0x40020C1")]
		private const int STABFRAMES = 3;

		[Token(Token = "0x40020C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Vector3 startPos;

		[Token(Token = "0x40020C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private Quaternion startRot;

		[Token(Token = "0x40020C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private Vector3 lastPos;

		[Token(Token = "0x40020C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Quaternion lastRot;

		[Token(Token = "0x40020C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private int frames;

		[Token(Token = "0x40020C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Dictionary<Transform, Transform> originalParents;

		[Token(Token = "0x6001FEE")]
		[Address(RVA = "0xE3E7DC", Offset = "0xE3E7DC", VA = "0xE3E7DC")]
		private void Start()
		{
		}

		[Token(Token = "0x6001FEF")]
		[Address(RVA = "0xE3EB2C", Offset = "0xE3EB2C", VA = "0xE3EB2C")]
		[IteratorStateMachine(typeof(<StartWait>d__31))]
		private IEnumerator StartWait()
		{
			return null;
		}

		[Token(Token = "0x6001FF0")]
		[Address(RVA = "0xE3EBC8", Offset = "0xE3EBC8", VA = "0xE3EBC8")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001FF1")]
		[Address(RVA = "0xE3ECF0", Offset = "0xE3ECF0", VA = "0xE3ECF0", Slot = "4")]
		protected virtual void CheckStabArea()
		{
		}

		[Token(Token = "0x6001FF2")]
		[Address(RVA = "0xE3F64C", Offset = "0xE3F64C", VA = "0xE3F64C", Slot = "5")]
		protected virtual void OnStabbableEnter(Stabbable stab)
		{
		}

		[Token(Token = "0x6001FF3")]
		[Address(RVA = "0xE3FCD0", Offset = "0xE3FCD0", VA = "0xE3FCD0", Slot = "6")]
		protected virtual void OnStabbableExit(Stabbable stab)
		{
		}

		[Token(Token = "0x6001FF4")]
		[Address(RVA = "0xE3FEC8", Offset = "0xE3FEC8", VA = "0xE3FEC8")]
		public List<Stabbable> GetStabbed()
		{
			return null;
		}

		[Token(Token = "0x6001FF5")]
		[Address(RVA = "0xE3FED0", Offset = "0xE3FED0", VA = "0xE3FED0")]
		public int GetStabbedCount()
		{
			return default(int);
		}

		[Token(Token = "0x6001FF6")]
		[Address(RVA = "0xE3FF18", Offset = "0xE3FF18", VA = "0xE3FF18")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6001FF7")]
		[Address(RVA = "0xE40390", Offset = "0xE40390", VA = "0xE40390")]
		public Stabber()
		{
		}
	}
	[Token(Token = "0x20005F8")]
	public class Stickable : MonoBehaviour
	{
		[Token(Token = "0x40020CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Sticky Settings")]
		public Rigidbody body;

		[Token(Token = "0x40020CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("How strong the joint is between the stickable and this")]
		public float stickStrength;

		[Token(Token = "0x40020CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("Multiplyer for required stick speed to activate")]
		public float stickSpeedMultiplyer;

		[Token(Token = "0x40020CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("This index must match the sticky object to stick")]
		public int stickIndex;

		[Token(Token = "0x40020D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Event")]
		public UnityEvent OnStick;

		[Token(Token = "0x40020D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UnityEvent EndStick;

		[Token(Token = "0x40020D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Sticky stickSource;

		[Token(Token = "0x6002000")]
		[Address(RVA = "0xE405AC", Offset = "0xE405AC", VA = "0xE405AC")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6002001")]
		[Address(RVA = "0xE4068C", Offset = "0xE4068C", VA = "0xE4068C")]
		public void Stick(Sticky source)
		{
		}

		[Token(Token = "0x6002002")]
		[Address(RVA = "0xE406BC", Offset = "0xE406BC", VA = "0xE406BC")]
		public void Unstick(Sticky source)
		{
		}

		[Token(Token = "0x6002003")]
		[Address(RVA = "0xE406F0", Offset = "0xE406F0", VA = "0xE406F0")]
		public void ForceReleaseStick()
		{
		}

		[Token(Token = "0x6002004")]
		[Address(RVA = "0xE407C0", Offset = "0xE407C0", VA = "0xE407C0")]
		public Stickable()
		{
		}
	}
	[Token(Token = "0x20005F9")]
	[RequireComponent(typeof(Rigidbody))]
	public class Sticky : MonoBehaviour
	{
		[Token(Token = "0x20005FA")]
		[CompilerGenerated]
		private sealed class <JointBreak>d__12 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40020DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40020DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40020DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Sticky <>4__this;

			[Token(Token = "0x170003D2")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002010")]
				[Address(RVA = "0xE40FCC", Offset = "0xE40FCC", VA = "0xE40FCC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003D3")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002012")]
				[Address(RVA = "0xE41014", Offset = "0xE41014", VA = "0xE41014", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600200D")]
			[Address(RVA = "0xE40CC8", Offset = "0xE40CC8", VA = "0xE40CC8")]
			[DebuggerHidden]
			public <JointBreak>d__12(int <>1__state)
			{
			}

			[Token(Token = "0x600200E")]
			[Address(RVA = "0xE40DE0", Offset = "0xE40DE0", VA = "0xE40DE0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600200F")]
			[Address(RVA = "0xE40DE4", Offset = "0xE40DE4", VA = "0xE40DE4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002011")]
			[Address(RVA = "0xE40FD4", Offset = "0xE40FD4", VA = "0xE40FD4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40020D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Sticky Settings")]
		[Tooltip("How strong the joint is between the stickable and this")]
		public float stickStrength;

		[Token(Token = "0x40020D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Multiplyer for required stick speed to activate")]
		public float requiredStickSpeed;

		[Token(Token = "0x40020D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("This index must match the stickable object to stick")]
		public int stickIndex;

		[Token(Token = "0x40020D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Event")]
		public UnityEvent OnStick;

		[Token(Token = "0x40020D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Rigidbody body;

		[Token(Token = "0x40020D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<Stickable> stickers;

		[Token(Token = "0x40020D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<Joint> joints;

		[Token(Token = "0x6002005")]
		[Address(RVA = "0xE407D0", Offset = "0xE407D0", VA = "0xE407D0")]
		private void Start()
		{
		}

		[Token(Token = "0x6002006")]
		[Address(RVA = "0xE40914", Offset = "0xE40914", VA = "0xE40914")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6002007")]
		[Address(RVA = "0xE40994", Offset = "0xE40994", VA = "0xE40994")]
		private void CreateStick(Stickable sticker)
		{
		}

		[Token(Token = "0x6002008")]
		[Address(RVA = "0xE40704", Offset = "0xE40704", VA = "0xE40704")]
		public void ForceRelease(Stickable stuck)
		{
		}

		[Token(Token = "0x6002009")]
		[Address(RVA = "0xE40C34", Offset = "0xE40C34", VA = "0xE40C34")]
		private void OnJointBreak(float breakForce)
		{
		}

		[Token(Token = "0x600200A")]
		[Address(RVA = "0xE40C54", Offset = "0xE40C54", VA = "0xE40C54")]
		[IteratorStateMachine(typeof(<JointBreak>d__12))]
		private IEnumerator JointBreak()
		{
			return null;
		}

		[Token(Token = "0x600200B")]
		[Address(RVA = "0xE40CF0", Offset = "0xE40CF0", VA = "0xE40CF0")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x600200C")]
		[Address(RVA = "0xE40DD0", Offset = "0xE40DD0", VA = "0xE40DD0")]
		public Sticky()
		{
		}
	}
	[Token(Token = "0x20005FB")]
	[DefaultExecutionOrder(10000)]
	public class OVRHandControllerSwapper : MonoBehaviour
	{
		[Token(Token = "0x40020DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Hands")]
		public Hand rightHand;

		[Token(Token = "0x40020DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Hand leftHand;

		[Token(Token = "0x40020DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Hand Tracking Follows")]
		public Transform rightHandTrackingFollow;

		[Token(Token = "0x40020E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform leftHandTrackingFollow;

		[Token(Token = "0x40020E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Controller Tracking Follows")]
		public Transform rightControllerTrackingFollow;

		[Token(Token = "0x40020E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform leftControllerTrackingFollow;

		[Token(Token = "0x40020E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Header("Hand Tracking Enable")]
		public MonoBehaviour[] enableScriptHandTracking;

		[Token(Token = "0x40020E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public GameObject[] enableObjectHandTracking;

		[Token(Token = "0x40020E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("Controller Tracking Enable")]
		public MonoBehaviour[] enableScriptControllerTracking;

		[Token(Token = "0x40020E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public GameObject[] enableObjectControllerTracking;

		[Token(Token = "0x40020E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool handTrackingActive;

		[Token(Token = "0x40020E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		private bool lastHandTrackingActive;

		[Token(Token = "0x6002013")]
		[Address(RVA = "0xE5445C", Offset = "0xE5445C", VA = "0xE5445C")]
		private void Start()
		{
		}

		[Token(Token = "0x6002014")]
		[Address(RVA = "0xE54804", Offset = "0xE54804", VA = "0xE54804")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6002015")]
		[Address(RVA = "0xE54464", Offset = "0xE54464", VA = "0xE54464")]
		private void OnSwap(bool handTrackingActive)
		{
		}

		[Token(Token = "0x6002016")]
		[Address(RVA = "0xE54884", Offset = "0xE54884", VA = "0xE54884")]
		public OVRHandControllerSwapper()
		{
		}
	}
	[Token(Token = "0x20005FC")]
	public class OVRMover : MonoBehaviour
	{
		[Token(Token = "0x40020E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("TEMP DEMO SCRIPT - Advanced script coming soon")]
		[Header("Controllers")]
		public OVRHandControllerLink moverController;

		[Token(Token = "0x40020EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public OVRHandControllerLink turningController;

		[Token(Token = "0x40020EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public OVRInput.Axis2D moverAxis;

		[Token(Token = "0x40020EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Body")]
		public GameObject cam;

		[Token(Token = "0x40020ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private CharacterController controller;

		[Token(Token = "0x40020EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private CapsuleCollider collisionCapsule;

		[Token(Token = "0x40020EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Header("Settings")]
		public bool snapTurning;

		[Token(Token = "0x40020F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float turnAngle;

		[Token(Token = "0x40020F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float speed;

		[Token(Token = "0x40020F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float gravity;

		[Token(Token = "0x40020F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float currentGravity;

		[Token(Token = "0x40020F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private bool axisReset;

		[Token(Token = "0x40020F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 moveAxis;

		[Token(Token = "0x40020F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector2 turningAxis;

		[Token(Token = "0x6002017")]
		[Address(RVA = "0xE5488C", Offset = "0xE5488C", VA = "0xE5488C")]
		public void Update()
		{
		}

		[Token(Token = "0x6002018")]
		[Address(RVA = "0xE54CCC", Offset = "0xE54CCC", VA = "0xE54CCC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002019")]
		[Address(RVA = "0xE5494C", Offset = "0xE5494C", VA = "0xE5494C")]
		public void Move(float x, float y, float z)
		{
		}

		[Token(Token = "0x600201A")]
		[Address(RVA = "0xE54A58", Offset = "0xE54A58", VA = "0xE54A58")]
		private void Turning()
		{
		}

		[Token(Token = "0x600201B")]
		[Address(RVA = "0xE54D70", Offset = "0xE54D70", VA = "0xE54D70")]
		public OVRMover()
		{
		}
	}
}
namespace Autohand.Demo
{
	[Token(Token = "0x20005FD")]
	public class XRAutoHandAxisFingerBender : MonoBehaviour
	{
		[Token(Token = "0x40020F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public XRHandControllerLink controller;

		[Token(Token = "0x40020F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CommonAxis axis;

		[Token(Token = "0x40020F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public float[] bendOffsets;

		[Token(Token = "0x40020FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float lastAxis;

		[Token(Token = "0x600201C")]
		[Address(RVA = "0xE54D98", Offset = "0xE54D98", VA = "0xE54D98")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600201D")]
		[Address(RVA = "0xE54E98", Offset = "0xE54E98", VA = "0xE54E98")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x600201E")]
		[Address(RVA = "0xE54FC8", Offset = "0xE54FC8", VA = "0xE54FC8")]
		public XRAutoHandAxisFingerBender()
		{
		}
	}
	[Token(Token = "0x20005FE")]
	public class XRAutoHandFingerBender : MonoBehaviour
	{
		[Token(Token = "0x40020FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public XRHandControllerLink controller;

		[Token(Token = "0x40020FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CommonButton button;

		[Token(Token = "0x40020FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public float[] bendOffsets;

		[Token(Token = "0x40020FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool pressed;

		[Token(Token = "0x600201F")]
		[Address(RVA = "0xE54FD0", Offset = "0xE54FD0", VA = "0xE54FD0")]
		private void Update()
		{
		}

		[Token(Token = "0x6002020")]
		[Address(RVA = "0xE55178", Offset = "0xE55178", VA = "0xE55178")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6002021")]
		[Address(RVA = "0xE552A8", Offset = "0xE552A8", VA = "0xE552A8")]
		public XRAutoHandFingerBender()
		{
		}
	}
	[Token(Token = "0x20005FF")]
	public class XRControllerEvent : MonoBehaviour
	{
		[Token(Token = "0x40020FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public XRHandControllerLink link;

		[Token(Token = "0x4002100")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CommonButton button;

		[Token(Token = "0x4002101")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityEvent Pressed;

		[Token(Token = "0x4002102")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityEvent Released;

		[Token(Token = "0x4002103")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool pressed;

		[Token(Token = "0x6002022")]
		[Address(RVA = "0xE552B0", Offset = "0xE552B0", VA = "0xE552B0")]
		private void Update()
		{
		}

		[Token(Token = "0x6002023")]
		[Address(RVA = "0xE5532C", Offset = "0xE5532C", VA = "0xE5532C")]
		public XRControllerEvent()
		{
		}
	}
	[Token(Token = "0x2000600")]
	public enum CommonButton
	{
		[Token(Token = "0x4002105")]
		gripButton,
		[Token(Token = "0x4002106")]
		menuButton,
		[Token(Token = "0x4002107")]
		primaryButton,
		[Token(Token = "0x4002108")]
		secondaryButton,
		[Token(Token = "0x4002109")]
		triggerButton,
		[Token(Token = "0x400210A")]
		primary2DAxisClick,
		[Token(Token = "0x400210B")]
		primary2DAxisTouch,
		[Token(Token = "0x400210C")]
		secondary2DAxisClick,
		[Token(Token = "0x400210D")]
		secondary2DAxisTouch,
		[Token(Token = "0x400210E")]
		primaryTouch,
		[Token(Token = "0x400210F")]
		secondaryTouch,
		[Token(Token = "0x4002110")]
		none
	}
	[Token(Token = "0x2000601")]
	public enum CommonAxis
	{
		[Token(Token = "0x4002112")]
		trigger,
		[Token(Token = "0x4002113")]
		grip,
		[Token(Token = "0x4002114")]
		none
	}
	[Token(Token = "0x2000602")]
	public enum Common2DAxis
	{
		[Token(Token = "0x4002116")]
		primaryAxis,
		[Token(Token = "0x4002117")]
		secondaryAxis,
		[Token(Token = "0x4002118")]
		none
	}
	[Token(Token = "0x2000603")]
	public class XRHandControllerLink : HandControllerLink
	{
		[Token(Token = "0x4002119")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CommonButton grabButton;

		[Token(Token = "0x400211A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("This axis will bend all the fingers on the hand -> replaced with finger bender scripts")]
		public CommonAxis grabAxis;

		[Token(Token = "0x400211B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public CommonButton squeezeButton;

		[Token(Token = "0x400211C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private XRNode role;

		[Token(Token = "0x400211D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool squeezing;

		[Token(Token = "0x400211E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool grabbing;

		[Token(Token = "0x400211F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UnityEngine.XR.InputDevice device;

		[Token(Token = "0x4002120")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<UnityEngine.XR.InputDevice> devices;

		[Token(Token = "0x6002024")]
		[Address(RVA = "0xE55334", Offset = "0xE55334", VA = "0xE55334")]
		private void Start()
		{
		}

		[Token(Token = "0x6002025")]
		[Address(RVA = "0xE55410", Offset = "0xE55410", VA = "0xE55410")]
		private void Update()
		{
		}

		[Token(Token = "0x6002026")]
		[Address(RVA = "0xE5577C", Offset = "0xE5577C", VA = "0xE5577C")]
		public List<UnityEngine.XR.InputDevice> Devices()
		{
			return null;
		}

		[Token(Token = "0x6002027")]
		[Address(RVA = "0xE55118", Offset = "0xE55118", VA = "0xE55118")]
		public bool ButtonPressed(CommonButton button)
		{
			return default(bool);
		}

		[Token(Token = "0x6002028")]
		[Address(RVA = "0xE54E44", Offset = "0xE54E44", VA = "0xE54E44")]
		public float GetAxis(CommonAxis axis)
		{
			return default(float);
		}

		[Token(Token = "0x6002029")]
		[Address(RVA = "0xE557F0", Offset = "0xE557F0", VA = "0xE557F0")]
		public Vector2 GetAxis2D(Common2DAxis axis)
		{
			return default(Vector2);
		}

		[Token(Token = "0x600202A")]
		[Address(RVA = "0xE558E8", Offset = "0xE558E8", VA = "0xE558E8", Slot = "4")]
		public override void TryHapticImpulse(float duration, float amp, float freq = 0f)
		{
		}

		[Token(Token = "0x600202B")]
		[Address(RVA = "0xE555C8", Offset = "0xE555C8", VA = "0xE555C8")]
		public static InputFeatureUsage<bool> GetCommonButton(CommonButton button)
		{
			return default(InputFeatureUsage<bool>);
		}

		[Token(Token = "0x600202C")]
		[Address(RVA = "0xE55784", Offset = "0xE55784", VA = "0xE55784")]
		public static InputFeatureUsage<float> GetCommonAxis(CommonAxis axis)
		{
			return default(InputFeatureUsage<float>);
		}

		[Token(Token = "0x600202D")]
		[Address(RVA = "0xE5587C", Offset = "0xE5587C", VA = "0xE5587C")]
		public static InputFeatureUsage<Vector2> GetCommon2DAxis(Common2DAxis axis)
		{
			return default(InputFeatureUsage<Vector2>);
		}

		[Token(Token = "0x600202E")]
		[Address(RVA = "0xE55A90", Offset = "0xE55A90", VA = "0xE55A90")]
		public XRHandControllerLink()
		{
		}
	}
	[Token(Token = "0x2000604")]
	public class XRHandPlayerControllerLink : MonoBehaviour
	{
		[Token(Token = "0x4002121")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public XRHandControllerLink moveController;

		[Token(Token = "0x4002122")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public XRHandControllerLink turnController;

		[Token(Token = "0x4002123")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AutoHandPlayer player;

		[Token(Token = "0x4002124")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Input")]
		public Common2DAxis moveAxis;

		[Token(Token = "0x4002125")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Common2DAxis turnAxis;

		[Token(Token = "0x600202F")]
		[Address(RVA = "0xE55B20", Offset = "0xE55B20", VA = "0xE55B20")]
		private void Update()
		{
		}

		[Token(Token = "0x6002030")]
		[Address(RVA = "0xE55B90", Offset = "0xE55B90", VA = "0xE55B90")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6002031")]
		[Address(RVA = "0xE55BD0", Offset = "0xE55BD0", VA = "0xE55BD0")]
		public XRHandPlayerControllerLink()
		{
		}
	}
	[Token(Token = "0x2000605")]
	public class XRHandPointGrabLink : MonoBehaviour
	{
		[Token(Token = "0x4002126")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HandDistanceGrabber pointGrab;

		[Token(Token = "0x4002127")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public XRHandControllerLink link;

		[Token(Token = "0x4002128")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Input")]
		public CommonButton pointInput;

		[Token(Token = "0x4002129")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public CommonButton selectInput;

		[Token(Token = "0x400212A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool pointing;

		[Token(Token = "0x400212B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool selecting;

		[Token(Token = "0x6002032")]
		[Address(RVA = "0xE55BD8", Offset = "0xE55BD8", VA = "0xE55BD8")]
		private void Update()
		{
		}

		[Token(Token = "0x6002033")]
		[Address(RVA = "0xE55CC8", Offset = "0xE55CC8", VA = "0xE55CC8")]
		public XRHandPointGrabLink()
		{
		}
	}
	[Token(Token = "0x2000606")]
	public class XRHeadTracking : MonoBehaviour
	{
		[Token(Token = "0x400212C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TrackingOriginModeFlags mode;

		[Token(Token = "0x6002034")]
		[Address(RVA = "0xE55CD0", Offset = "0xE55CD0", VA = "0xE55CD0")]
		private void Start()
		{
		}

		[Token(Token = "0x6002035")]
		[Address(RVA = "0xE55DEC", Offset = "0xE55DEC", VA = "0xE55DEC")]
		public XRHeadTracking()
		{
		}
	}
	[Token(Token = "0x2000607")]
	public class XRTeleporterLink : MonoBehaviour
	{
		[Token(Token = "0x400212D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Teleporter hand;

		[Token(Token = "0x400212E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public XRNode role;

		[Token(Token = "0x400212F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public CommonButton button;

		[Token(Token = "0x4002130")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool teleporting;

		[Token(Token = "0x4002131")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private UnityEngine.XR.InputDevice device;

		[Token(Token = "0x4002132")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<UnityEngine.XR.InputDevice> devices;

		[Token(Token = "0x6002036")]
		[Address(RVA = "0xE55DFC", Offset = "0xE55DFC", VA = "0xE55DFC")]
		private void Start()
		{
		}

		[Token(Token = "0x6002037")]
		[Address(RVA = "0xE55E78", Offset = "0xE55E78", VA = "0xE55E78")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6002038")]
		[Address(RVA = "0xE55F80", Offset = "0xE55F80", VA = "0xE55F80")]
		public XRTeleporterLink()
		{
		}
	}
	[Token(Token = "0x2000608")]
	public class BoxingGlove : MonoBehaviour
	{
		[Token(Token = "0x4002133")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Rigidbody body;

		[Token(Token = "0x4002134")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float power;

		[Token(Token = "0x4002135")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float lastHitTime;

		[Token(Token = "0x4002136")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float delay;

		[Token(Token = "0x6002039")]
		[Address(RVA = "0xE55F88", Offset = "0xE55F88", VA = "0xE55F88")]
		public void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x600203A")]
		[Address(RVA = "0xE56018", Offset = "0xE56018", VA = "0xE56018")]
		public BoxingGlove()
		{
		}
	}
	[Token(Token = "0x2000609")]
	public class CubeBreak : MonoBehaviour
	{
		[Token(Token = "0x4002137")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float force;

		[Token(Token = "0x4002138")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3[] offsets;

		[Token(Token = "0x600203B")]
		[Address(RVA = "0xE56030", Offset = "0xE56030", VA = "0xE56030")]
		[ContextMenu("Break")]
		public void Break()
		{
		}

		[Token(Token = "0x600203C")]
		[Address(RVA = "0xE5662C", Offset = "0xE5662C", VA = "0xE5662C")]
		public CubeBreak()
		{
		}
	}
	[Token(Token = "0x200060A")]
	public class DemoFlyingToggle : MonoBehaviour
	{
		[Token(Token = "0x600203D")]
		[Address(RVA = "0xE5674C", Offset = "0xE5674C", VA = "0xE5674C")]
		public void ToggleFlying()
		{
		}

		[Token(Token = "0x600203E")]
		[Address(RVA = "0xE5676C", Offset = "0xE5676C", VA = "0xE5676C")]
		public DemoFlyingToggle()
		{
		}
	}
	[Token(Token = "0x200060B")]
	public class Door : PhysicsGadgetHingeAngleReader
	{
		[Token(Token = "0x4002139")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Door should start closed")]
		public Rigidbody body;

		[Token(Token = "0x400213A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector3 closedPosition;

		[Token(Token = "0x400213B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private Quaternion closedRotation;

		[Token(Token = "0x400213C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[Tooltip("The door needs to reach this level of open before it can be reset")]
		public float minThreshold;

		[Token(Token = "0x400213D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float midThreshold;

		[Token(Token = "0x400213E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[Tooltip("The door needs to reach this level of open before it can be reset")]
		public float maxThreshold;

		[Token(Token = "0x400213F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Space]
		public UnityEvent OnMax;

		[Token(Token = "0x4002140")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public UnityEvent OnMid;

		[Token(Token = "0x4002141")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public UnityEvent OnMin;

		[Token(Token = "0x4002142")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private bool min;

		[Token(Token = "0x4002143")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x99")]
		private bool max;

		[Token(Token = "0x4002144")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9A")]
		private bool mid;

		[Token(Token = "0x600203F")]
		[Address(RVA = "0xE56774", Offset = "0xE56774", VA = "0xE56774")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002040")]
		[Address(RVA = "0xE5688C", Offset = "0xE5688C", VA = "0xE5688C")]
		protected void FixedUpdate()
		{
		}

		[Token(Token = "0x6002041")]
		[Address(RVA = "0xE569C8", Offset = "0xE569C8", VA = "0xE569C8")]
		private void Max()
		{
		}

		[Token(Token = "0x6002042")]
		[Address(RVA = "0xE56A0C", Offset = "0xE56A0C", VA = "0xE56A0C")]
		private void Mid()
		{
		}

		[Token(Token = "0x6002043")]
		[Address(RVA = "0xE569E8", Offset = "0xE569E8", VA = "0xE569E8")]
		private void Min()
		{
		}

		[Token(Token = "0x6002044")]
		[Address(RVA = "0xE56A30", Offset = "0xE56A30", VA = "0xE56A30")]
		public void ClosedDoor()
		{
		}

		[Token(Token = "0x6002045")]
		[Address(RVA = "0xE56A90", Offset = "0xE56A90", VA = "0xE56A90")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6002046")]
		[Address(RVA = "0xE56B70", Offset = "0xE56B70", VA = "0xE56B70")]
		public Door()
		{
		}
	}
	[Token(Token = "0x200060C")]
	public class ExplosionSource : MonoBehaviour
	{
		[Token(Token = "0x4002145")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float radius;

		[Token(Token = "0x4002146")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float force;

		[Token(Token = "0x6002047")]
		[Address(RVA = "0xE56B94", Offset = "0xE56B94", VA = "0xE56B94")]
		public void Explode(bool destroy)
		{
		}

		[Token(Token = "0x6002048")]
		[Address(RVA = "0xE56D34", Offset = "0xE56D34", VA = "0xE56D34")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6002049")]
		[Address(RVA = "0xE56D80", Offset = "0xE56D80", VA = "0xE56D80")]
		public ExplosionSource()
		{
		}
	}
	[Token(Token = "0x200060D")]
	public class Grenade : MonoBehaviour
	{
		[Token(Token = "0x4002147")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Grabbable grenade;

		[Token(Token = "0x4002148")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Grabbable pin;

		[Token(Token = "0x4002149")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ConfigurableJoint pinJoint;

		[Token(Token = "0x400214A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float explosionDelay;

		[Token(Token = "0x400214B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool startDelayOnRelease;

		[Token(Token = "0x400214C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float explosionForce;

		[Token(Token = "0x400214D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float explosionRadius;

		[Token(Token = "0x400214E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float pinJointStrength;

		[Token(Token = "0x400214F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject explosionEffect;

		[Token(Token = "0x4002150")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public UnityEvent pinBreakEvent;

		[Token(Token = "0x4002151")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public UnityEvent explosionEvent;

		[Token(Token = "0x600204A")]
		[Address(RVA = "0xE56D94", Offset = "0xE56D94", VA = "0xE56D94")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600204B")]
		[Address(RVA = "0xE571A4", Offset = "0xE571A4", VA = "0xE571A4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600204C")]
		[Address(RVA = "0xE57430", Offset = "0xE57430", VA = "0xE57430")]
		private void OnGrenadeGrab(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x600204D")]
		[Address(RVA = "0xE574AC", Offset = "0xE574AC", VA = "0xE574AC")]
		private void OnGrenadeRelease(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x600204E")]
		[Address(RVA = "0xE575A4", Offset = "0xE575A4", VA = "0xE575A4")]
		private void OnPinGrab(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x600204F")]
		[Address(RVA = "0xE5762C", Offset = "0xE5762C", VA = "0xE5762C")]
		private void OnPinRelease(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6002050")]
		[Address(RVA = "0xE576B8", Offset = "0xE576B8", VA = "0xE576B8")]
		private void OnJointBreak(float breakForce)
		{
		}

		[Token(Token = "0x6002051")]
		[Address(RVA = "0xE57710", Offset = "0xE57710", VA = "0xE57710")]
		private void CheckJointBreak()
		{
		}

		[Token(Token = "0x6002052")]
		[Address(RVA = "0xE577F0", Offset = "0xE577F0", VA = "0xE577F0")]
		private void Explode()
		{
		}

		[Token(Token = "0x6002053")]
		[Address(RVA = "0xE57C74", Offset = "0xE57C74", VA = "0xE57C74")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6002054")]
		[Address(RVA = "0xE57CC4", Offset = "0xE57CC4", VA = "0xE57CC4")]
		public Grenade()
		{
		}
	}
	[Token(Token = "0x200060E")]
	public class HandSwapper : MonoBehaviour
	{
		[Token(Token = "0x4002152")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AutoHandPlayer player;

		[Token(Token = "0x4002153")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Hand fromHand;

		[Token(Token = "0x4002154")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Hand toHand;

		[Token(Token = "0x4002155")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject fromModel;

		[Token(Token = "0x4002156")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject toModel;

		[Token(Token = "0x4002157")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool swapped;

		[Token(Token = "0x6002055")]
		[Address(RVA = "0xE57CEC", Offset = "0xE57CEC", VA = "0xE57CEC")]
		public void Swap()
		{
		}

		[Token(Token = "0x6002056")]
		[Address(RVA = "0xE57E80", Offset = "0xE57E80", VA = "0xE57E80")]
		public HandSwapper()
		{
		}
	}
	[Token(Token = "0x200060F")]
	public class JointBreakStopForce1 : MonoBehaviour
	{
		[Token(Token = "0x6002057")]
		[Address(RVA = "0xE57E88", Offset = "0xE57E88", VA = "0xE57E88")]
		private void OnJointBreak(float breakForce)
		{
		}

		[Token(Token = "0x6002058")]
		[Address(RVA = "0xE57F80", Offset = "0xE57F80", VA = "0xE57F80")]
		public JointBreakStopForce1()
		{
		}
	}
	[Token(Token = "0x2000610")]
	public class JoystickObjectMover : PhysicsGadgetJoystick
	{
		[Token(Token = "0x4002158")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform move;

		[Token(Token = "0x4002159")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float speed;

		[Token(Token = "0x6002059")]
		[Address(RVA = "0xE57F88", Offset = "0xE57F88", VA = "0xE57F88")]
		private void Update()
		{
		}

		[Token(Token = "0x600205A")]
		[Address(RVA = "0xE5802C", Offset = "0xE5802C", VA = "0xE5802C")]
		public JoystickObjectMover()
		{
		}
	}
	[Token(Token = "0x2000611")]
	public class Pistol : MonoBehaviour
	{
		[Token(Token = "0x400215A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Rigidbody body;

		[Token(Token = "0x400215B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform barrelTip;

		[Token(Token = "0x400215C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float hitPower;

		[Token(Token = "0x400215D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float recoilPower;

		[Token(Token = "0x400215E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float range;

		[Token(Token = "0x400215F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public LayerMask layer;

		[Token(Token = "0x4002160")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AudioClip shootSound;

		[Token(Token = "0x4002161")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float shootVolume;

		[Token(Token = "0x600205B")]
		[Address(RVA = "0xE5803C", Offset = "0xE5803C", VA = "0xE5803C")]
		private void Start()
		{
		}

		[Token(Token = "0x600205C")]
		[Address(RVA = "0xE58124", Offset = "0xE58124", VA = "0xE58124")]
		public void Shoot()
		{
		}

		[Token(Token = "0x600205D")]
		[Address(RVA = "0xE585B0", Offset = "0xE585B0", VA = "0xE585B0")]
		public Pistol()
		{
		}
	}
	[Token(Token = "0x2000612")]
	public class PlayerFallCatcher : MonoBehaviour
	{
		[Token(Token = "0x4002162")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Vector3 startPos;

		[Token(Token = "0x600205E")]
		[Address(RVA = "0xE585D0", Offset = "0xE585D0", VA = "0xE585D0")]
		private void Start()
		{
		}

		[Token(Token = "0x600205F")]
		[Address(RVA = "0xE586FC", Offset = "0xE586FC", VA = "0xE586FC")]
		private void Update()
		{
		}

		[Token(Token = "0x6002060")]
		[Address(RVA = "0xE587CC", Offset = "0xE587CC", VA = "0xE587CC")]
		public PlayerFallCatcher()
		{
		}
	}
	[Token(Token = "0x2000613")]
	public class ScaleHighlight : MonoBehaviour
	{
		[Token(Token = "0x4002163")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 highlighScale;

		[Token(Token = "0x4002164")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector3 normalScale;

		[Token(Token = "0x6002061")]
		[Address(RVA = "0xE587D4", Offset = "0xE587D4", VA = "0xE587D4")]
		public void Highlight()
		{
		}

		[Token(Token = "0x6002062")]
		[Address(RVA = "0xE58800", Offset = "0xE58800", VA = "0xE58800")]
		public void HighlightStop()
		{
		}

		[Token(Token = "0x6002063")]
		[Address(RVA = "0xE5882C", Offset = "0xE5882C", VA = "0xE5882C")]
		public ScaleHighlight()
		{
		}
	}
	[Token(Token = "0x2000614")]
	public class Spinner : MonoBehaviour
	{
		[Token(Token = "0x4002165")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 rotationSpeed;

		[Token(Token = "0x6002064")]
		[Address(RVA = "0xE58834", Offset = "0xE58834", VA = "0xE58834")]
		private void Update()
		{
		}

		[Token(Token = "0x6002065")]
		[Address(RVA = "0xE58890", Offset = "0xE58890", VA = "0xE58890")]
		public Spinner()
		{
		}
	}
	[Token(Token = "0x2000615")]
	public class ToggleAutoMoveFlying : MonoBehaviour
	{
		[Token(Token = "0x6002066")]
		[Address(RVA = "0xE58898", Offset = "0xE58898", VA = "0xE58898")]
		public void ToggleFlying()
		{
		}

		[Token(Token = "0x6002067")]
		[Address(RVA = "0xE58914", Offset = "0xE58914", VA = "0xE58914")]
		public ToggleAutoMoveFlying()
		{
		}
	}
	[Token(Token = "0x2000616")]
	public class ToggleHandProjection : MonoBehaviour
	{
		[Token(Token = "0x6002068")]
		[Address(RVA = "0xE5891C", Offset = "0xE5891C", VA = "0xE5891C")]
		public void DisableGripProjection()
		{
		}

		[Token(Token = "0x6002069")]
		[Address(RVA = "0xE589E0", Offset = "0xE589E0", VA = "0xE589E0")]
		public void EnableGripProjection()
		{
		}

		[Token(Token = "0x600206A")]
		[Address(RVA = "0xE58AA4", Offset = "0xE58AA4", VA = "0xE58AA4")]
		public void DisableHighlightProjection()
		{
		}

		[Token(Token = "0x600206B")]
		[Address(RVA = "0xE58B68", Offset = "0xE58B68", VA = "0xE58B68")]
		public void EnableHighlightProjection()
		{
		}

		[Token(Token = "0x600206C")]
		[Address(RVA = "0xE58C2C", Offset = "0xE58C2C", VA = "0xE58C2C")]
		public ToggleHandProjection()
		{
		}
	}
	[Token(Token = "0x2000617")]
	public class TomatoSpawner : MonoBehaviour
	{
		[Token(Token = "0x4002166")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject[] tomatoes;

		[Token(Token = "0x4002167")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<GameObject> copies;

		[Token(Token = "0x600206D")]
		[Address(RVA = "0xE58C34", Offset = "0xE58C34", VA = "0xE58C34")]
		private void Start()
		{
		}

		[Token(Token = "0x600206E")]
		[Address(RVA = "0xE58EA8", Offset = "0xE58EA8", VA = "0xE58EA8")]
		public void SpawnTomato()
		{
		}

		[Token(Token = "0x600206F")]
		[Address(RVA = "0xE59040", Offset = "0xE59040", VA = "0xE59040")]
		public TomatoSpawner()
		{
		}
	}
	[Token(Token = "0x2000618")]
	public class ButtonDemoRespawn : MonoBehaviour
	{
		[Token(Token = "0x4002168")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform root;

		[Token(Token = "0x4002169")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<Transform> respawns;

		[Token(Token = "0x400216A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<Vector3> startPos;

		[Token(Token = "0x400216B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<Quaternion> startRot;

		[Token(Token = "0x6002070")]
		[Address(RVA = "0xE59048", Offset = "0xE59048", VA = "0xE59048")]
		private void Start()
		{
		}

		[Token(Token = "0x6002071")]
		[Address(RVA = "0xE59528", Offset = "0xE59528", VA = "0xE59528")]
		public void Respawn()
		{
		}

		[Token(Token = "0x6002072")]
		[Address(RVA = "0xE5985C", Offset = "0xE5985C", VA = "0xE5985C")]
		public void ReloadScene()
		{
		}

		[Token(Token = "0x6002073")]
		[Address(RVA = "0xE598CC", Offset = "0xE598CC", VA = "0xE598CC")]
		public ButtonDemoRespawn()
		{
		}
	}
	[Token(Token = "0x2000619")]
	public class DialHandScaler : PhysicsGadgetHingeAngleReader
	{
		[Token(Token = "0x400216C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Hand hand;

		[Token(Token = "0x400216D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Vector3 minScale;

		[Token(Token = "0x400216E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public Vector3 maxScale;

		[Token(Token = "0x400216F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float startReach;

		[Token(Token = "0x4002170")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private Vector3 startScale;

		[Token(Token = "0x4002171")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float[] fingersStartScale;

		[Token(Token = "0x4002172")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Vector3 lastHandScale;

		[Token(Token = "0x6002074")]
		[Address(RVA = "0xE59954", Offset = "0xE59954", VA = "0xE59954")]
		protected new void Start()
		{
		}

		[Token(Token = "0x6002075")]
		[Address(RVA = "0xE59A88", Offset = "0xE59A88", VA = "0xE59A88")]
		private void Update()
		{
		}

		[Token(Token = "0x6002076")]
		[Address(RVA = "0xE59D4C", Offset = "0xE59D4C", VA = "0xE59D4C")]
		public DialHandScaler()
		{
		}
	}
	[Token(Token = "0x200061A")]
	public class MoverLever : PhysicsGadgetHingeAngleReader
	{
		[Token(Token = "0x4002173")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform move;

		[Token(Token = "0x4002174")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Vector3 axis;

		[Token(Token = "0x4002175")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float speed;

		[Token(Token = "0x6002077")]
		[Address(RVA = "0xE59D54", Offset = "0xE59D54", VA = "0xE59D54")]
		private void Update()
		{
		}

		[Token(Token = "0x6002078")]
		[Address(RVA = "0xE59F14", Offset = "0xE59F14", VA = "0xE59F14")]
		public MoverLever()
		{
		}
	}
	[Token(Token = "0x200061B")]
	public class PhysicsSliderPositionMover : PhysicsGadgetConfigurableLimitReader
	{
		[Token(Token = "0x4002176")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Header("Movement")]
		public Transform move;

		[Token(Token = "0x4002177")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Acts as speed")]
		public Vector3 axis;

		[Token(Token = "0x4002178")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Header("Range")]
		public bool useRange;

		[Token(Token = "0x4002179")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Vector3 minRange;

		[Token(Token = "0x400217A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public Vector3 maxRange;

		[Token(Token = "0x400217B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 startPos;

		[Token(Token = "0x6002079")]
		[Address(RVA = "0xE59F24", Offset = "0xE59F24", VA = "0xE59F24")]
		protected new void Start()
		{
		}

		[Token(Token = "0x600207A")]
		[Address(RVA = "0xE59F58", Offset = "0xE59F58", VA = "0xE59F58")]
		public void FixedUpdate()
		{
		}

		[Token(Token = "0x600207B")]
		[Address(RVA = "0xE5A0B0", Offset = "0xE5A0B0", VA = "0xE5A0B0")]
		public PhysicsSliderPositionMover()
		{
		}
	}
	[Token(Token = "0x200061C")]
	public class WheelRotator : PhysicsGadgetHingeAngleReader
	{
		[Token(Token = "0x400217C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform move;

		[Token(Token = "0x400217D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Vector3 angle;

		[Token(Token = "0x400217E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public bool useLocal;

		[Token(Token = "0x600207C")]
		[Address(RVA = "0xE5A140", Offset = "0xE5A140", VA = "0xE5A140")]
		private void Update()
		{
		}

		[Token(Token = "0x600207D")]
		[Address(RVA = "0xE5A36C", Offset = "0xE5A36C", VA = "0xE5A36C")]
		public WheelRotator()
		{
		}
	}
	[Token(Token = "0x200061D")]
	public class LeverTextChanger : MonoBehaviour
	{
		[Token(Token = "0x400217F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TextMeshPro text;

		[Token(Token = "0x4002180")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PhysicsGadgetHingeAngleReader sliderReader;

		[Token(Token = "0x600207E")]
		[Address(RVA = "0xE5A374", Offset = "0xE5A374", VA = "0xE5A374")]
		private void Update()
		{
		}

		[Token(Token = "0x600207F")]
		[Address(RVA = "0xE5A460", Offset = "0xE5A460", VA = "0xE5A460")]
		public LeverTextChanger()
		{
		}
	}
	[Token(Token = "0x200061E")]
	public class SliderTextChanger : MonoBehaviour
	{
		[Token(Token = "0x4002181")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TextMeshPro text;

		[Token(Token = "0x4002182")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PhysicsGadgetConfigurableLimitReader sliderReader;

		[Token(Token = "0x6002080")]
		[Address(RVA = "0xE5A468", Offset = "0xE5A468", VA = "0xE5A468")]
		private void Update()
		{
		}

		[Token(Token = "0x6002081")]
		[Address(RVA = "0xE5A554", Offset = "0xE5A554", VA = "0xE5A554")]
		public SliderTextChanger()
		{
		}
	}
	[Token(Token = "0x200061F")]
	public class TextChanger : MonoBehaviour
	{
		[Token(Token = "0x2000620")]
		[CompilerGenerated]
		private sealed class <ChangeText>d__5 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002186")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002187")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002188")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TextChanger <>4__this;

			[Token(Token = "0x170003D4")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600208A")]
				[Address(RVA = "0xE5A73C", Offset = "0xE5A73C", VA = "0xE5A73C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003D5")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600208C")]
				[Address(RVA = "0xE5A784", Offset = "0xE5A784", VA = "0xE5A784", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002087")]
			[Address(RVA = "0xE5A5D8", Offset = "0xE5A5D8", VA = "0xE5A5D8")]
			[DebuggerHidden]
			public <ChangeText>d__5(int <>1__state)
			{
			}

			[Token(Token = "0x6002088")]
			[Address(RVA = "0xE5A664", Offset = "0xE5A664", VA = "0xE5A664", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002089")]
			[Address(RVA = "0xE5A668", Offset = "0xE5A668", VA = "0xE5A668", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600208B")]
			[Address(RVA = "0xE5A744", Offset = "0xE5A744", VA = "0xE5A744", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002183")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TextMeshPro text;

		[Token(Token = "0x4002184")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Coroutine changing;

		[Token(Token = "0x4002185")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Coroutine hide;

		[Token(Token = "0x6002082")]
		[Address(RVA = "0xE5A55C", Offset = "0xE5A55C", VA = "0xE5A55C")]
		public void UpdateText(string newText, float upTime)
		{
		}

		[Token(Token = "0x6002083")]
		[Address(RVA = "0xE5A560", Offset = "0xE5A560", VA = "0xE5A560")]
		public void UpdateText(string newText)
		{
		}

		[Token(Token = "0x6002084")]
		[Address(RVA = "0xE5A564", Offset = "0xE5A564", VA = "0xE5A564")]
		[IteratorStateMachine(typeof(<ChangeText>d__5))]
		private IEnumerator ChangeText(float seconds, string newText)
		{
			return null;
		}

		[Token(Token = "0x6002085")]
		[Address(RVA = "0xE5A600", Offset = "0xE5A600", VA = "0xE5A600")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6002086")]
		[Address(RVA = "0xE5A65C", Offset = "0xE5A65C", VA = "0xE5A65C")]
		public TextChanger()
		{
		}
	}
	[Token(Token = "0x2000621")]
	public class TextGrabEvent : MonoBehaviour
	{
		[Token(Token = "0x4002189")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TextChanger changer;

		[Token(Token = "0x400218A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Grabbable grab;

		[Token(Token = "0x400218B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[TextArea]
		public string message;

		[Token(Token = "0x600208D")]
		[Address(RVA = "0xE5A78C", Offset = "0xE5A78C", VA = "0xE5A78C")]
		private void Start()
		{
		}

		[Token(Token = "0x600208E")]
		[Address(RVA = "0xE5A97C", Offset = "0xE5A97C", VA = "0xE5A97C")]
		private void OnGrab(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x600208F")]
		[Address(RVA = "0xE5A980", Offset = "0xE5A980", VA = "0xE5A980")]
		public TextGrabEvent()
		{
		}
	}
	[Token(Token = "0x2000622")]
	public class TextPlacePointEvent : MonoBehaviour
	{
		[Token(Token = "0x400218C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TextChanger changer;

		[Token(Token = "0x400218D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PlacePoint point;

		[Token(Token = "0x400218E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float fadeTime;

		[Token(Token = "0x400218F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[TextArea]
		public string placeMessage;

		[Token(Token = "0x4002190")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[TextArea]
		public string highlightMessage;

		[Token(Token = "0x6002090")]
		[Address(RVA = "0xE5A988", Offset = "0xE5A988", VA = "0xE5A988")]
		private void Start()
		{
		}

		[Token(Token = "0x6002091")]
		[Address(RVA = "0xE5AB9C", Offset = "0xE5AB9C", VA = "0xE5AB9C")]
		private void OnGrab(PlacePoint hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6002092")]
		[Address(RVA = "0xE5ABB4", Offset = "0xE5ABB4", VA = "0xE5ABB4")]
		private void OnHighlight(PlacePoint hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6002093")]
		[Address(RVA = "0xE5ABCC", Offset = "0xE5ABCC", VA = "0xE5ABCC")]
		public TextPlacePointEvent()
		{
		}
	}
	[Token(Token = "0x2000623")]
	[RequireComponent(typeof(Hand))]
	public class HandEventDebugger : MonoBehaviour
	{
		[Token(Token = "0x4002191")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool showSqueezeEvents;

		[Token(Token = "0x4002192")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool showHighlightEvents;

		[Token(Token = "0x6002094")]
		[Address(RVA = "0xE5ABDC", Offset = "0xE5ABDC", VA = "0xE5ABDC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6002095")]
		[Address(RVA = "0xE5AEA0", Offset = "0xE5AEA0", VA = "0xE5AEA0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6002096")]
		[Address(RVA = "0xE5B164", Offset = "0xE5B164", VA = "0xE5B164")]
		public HandEventDebugger()
		{
		}
	}
	[Token(Token = "0x2000624")]
	public class WristLookEvent : MonoBehaviour
	{
		[Token(Token = "0x4002193")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Hand hand;

		[Token(Token = "0x4002194")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Camera head;

		[Token(Token = "0x4002195")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The minimum head->wrist distance required to activate")]
		public float maxDistance;

		[Token(Token = "0x4002196")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("The angle precisness required to activate; 0 is any angle, 1 is exactly pointed at the face")]
		[Range(0f, 1f)]
		public float anglePreciseness;

		[Token(Token = "0x4002197")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool disableWhileHolding;

		[Token(Token = "0x4002198")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Events")]
		public UnityHandEvent OnShow;

		[Token(Token = "0x4002199")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public UnityHandEvent OnHide;

		[Token(Token = "0x400219A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool showing;

		[Token(Token = "0x60020A7")]
		[Address(RVA = "0xE5BBB4", Offset = "0xE5BBB4", VA = "0xE5BBB4")]
		private void Update()
		{
		}

		[Token(Token = "0x60020A8")]
		[Address(RVA = "0xE5BEC8", Offset = "0xE5BEC8", VA = "0xE5BEC8")]
		public WristLookEvent()
		{
		}
	}
	[Token(Token = "0x2000625")]
	public class HandTouchEventDebugger : MonoBehaviour
	{
		[Token(Token = "0x400219B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HandTouchEvent touchEvent;

		[Token(Token = "0x60020A9")]
		[Address(RVA = "0xE5BEE0", Offset = "0xE5BEE0", VA = "0xE5BEE0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60020AA")]
		[Address(RVA = "0xE5C044", Offset = "0xE5C044", VA = "0xE5C044")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60020AB")]
		[Address(RVA = "0xE5C1A8", Offset = "0xE5C1A8", VA = "0xE5C1A8")]
		private void StartTouch(Hand hand)
		{
		}

		[Token(Token = "0x60020AC")]
		[Address(RVA = "0xE5C244", Offset = "0xE5C244", VA = "0xE5C244")]
		private void StopTouch(Hand hand)
		{
		}

		[Token(Token = "0x60020AD")]
		[Address(RVA = "0xE5C2E0", Offset = "0xE5C2E0", VA = "0xE5C2E0")]
		public HandTouchEventDebugger()
		{
		}
	}
	[Token(Token = "0x2000626")]
	[RequireComponent(typeof(Grabbable))]
	public class GrabbableEventDebugger : MonoBehaviour
	{
		[Token(Token = "0x60020AE")]
		[Address(RVA = "0xE5C2E8", Offset = "0xE5C2E8", VA = "0xE5C2E8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60020AF")]
		[Address(RVA = "0xE5CA18", Offset = "0xE5CA18", VA = "0xE5CA18")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60020B0")]
		[Address(RVA = "0xE5D148", Offset = "0xE5D148", VA = "0xE5D148")]
		public GrabbableEventDebugger()
		{
		}
	}
	[Token(Token = "0x2000628")]
	public class Smash : MonoBehaviour
	{
		[Token(Token = "0x40021AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Smash Options")]
		[Tooltip("Required velocity magnitude from Smasher to smash")]
		public float smashForce;

		[Token(Token = "0x40021AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Whether or not to destroy this object on smash")]
		public bool destroyOnSmash;

		[Token(Token = "0x40021AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		[Tooltip("Whether or not to release this object on smash")]
		[HideIf("destroyOnSmash")]
		public bool releaseOnSmash;

		[Token(Token = "0x40021B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Particle Effect")]
		[Tooltip("Plays this effect on smash")]
		public ParticleSystem effect;

		[Token(Token = "0x40021B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Whether or not to instantiates a new a particle system on smash")]
		public bool createNewEffect;

		[Token(Token = "0x40021B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		[Tooltip("Whether or not to apply rigidbody velocity to particle velocity on smash")]
		public bool applyVelocityOnSmash;

		[Token(Token = "0x40021B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Sound Options")]
		public AudioClip smashSound;

		[Token(Token = "0x40021B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float smashVolume;

		[Token(Token = "0x40021B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Event")]
		public UnityEvent OnSmash;

		[Token(Token = "0x40021B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public SmashEvent OnSmashEvent;

		[Token(Token = "0x40021B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal Grabbable grabbable;

		[Token(Token = "0x60020C3")]
		[Address(RVA = "0xE5DB08", Offset = "0xE5DB08", VA = "0xE5DB08")]
		public void Start()
		{
		}

		[Token(Token = "0x60020C4")]
		[Address(RVA = "0xE5DDE0", Offset = "0xE5DDE0", VA = "0xE5DDE0")]
		public void DelayedSmash(float delay)
		{
		}

		[Token(Token = "0x60020C5")]
		[Address(RVA = "0xE585A8", Offset = "0xE585A8", VA = "0xE585A8")]
		public void DoSmash()
		{
		}

		[Token(Token = "0x60020C6")]
		[Address(RVA = "0xE5DE3C", Offset = "0xE5DE3C", VA = "0xE5DE3C")]
		public void DoSmash(Smasher smash)
		{
		}

		[Token(Token = "0x60020C7")]
		[Address(RVA = "0xE5E1DC", Offset = "0xE5E1DC", VA = "0xE5E1DC")]
		public Smash()
		{
		}
	}
	[Token(Token = "0x2000629")]
	public delegate void SmashEvent(Smasher smasher, Smash smashable);
	[Token(Token = "0x200062A")]
	[RequireComponent(typeof(Rigidbody))]
	public class Smasher : MonoBehaviour
	{
		[Token(Token = "0x40021B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Rigidbody rb;

		[Token(Token = "0x40021B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Options")]
		public LayerMask smashableLayers;

		[Token(Token = "0x40021BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("How much to multiply the magnitude on smash")]
		public float forceMulti;

		[Token(Token = "0x40021BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Can be left empty - The center of mass point to calculate velocity magnitude - for example: the camera of the hammer is a better point vs the pivot center of the hammer object")]
		public Transform centerOfMassPoint;

		[Token(Token = "0x40021BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Event")]
		public UnityEvent OnSmash;

		[Token(Token = "0x40021BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public SmashEvent OnSmashEvent;

		[Token(Token = "0x40021BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3[] velocityOverTime;

		[Token(Token = "0x40021BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3 lastPos;

		[Token(Token = "0x60020CD")]
		[Address(RVA = "0xE5E254", Offset = "0xE5E254", VA = "0xE5E254")]
		private void Start()
		{
		}

		[Token(Token = "0x60020CE")]
		[Address(RVA = "0xE5E41C", Offset = "0xE5E41C", VA = "0xE5E41C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60020CF")]
		[Address(RVA = "0xE5E588", Offset = "0xE5E588", VA = "0xE5E588")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x60020D0")]
		[Address(RVA = "0xE5E640", Offset = "0xE5E640", VA = "0xE5E640")]
		private float GetMagnitude()
		{
			return default(float);
		}

		[Token(Token = "0x60020D1")]
		[Address(RVA = "0xE5E75C", Offset = "0xE5E75C", VA = "0xE5E75C")]
		public Smasher()
		{
		}
	}
	[Token(Token = "0x200062B")]
	public class OVRAutoHandAxisFingerBender : MonoBehaviour
	{
		[Token(Token = "0x40021C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public OVRHandControllerLink controller;

		[Token(Token = "0x40021C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public OVRInput.Axis1D axis;

		[Token(Token = "0x40021C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public float[] bendOffsets;

		[Token(Token = "0x40021C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float lastAxis;

		[Token(Token = "0x60020D3")]
		[Address(RVA = "0xE5E7DC", Offset = "0xE5E7DC", VA = "0xE5E7DC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60020D4")]
		[Address(RVA = "0xE5E8F4", Offset = "0xE5E8F4", VA = "0xE5E8F4")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60020D5")]
		[Address(RVA = "0xE5EA24", Offset = "0xE5EA24", VA = "0xE5EA24")]
		public OVRAutoHandAxisFingerBender()
		{
		}
	}
	[Token(Token = "0x200062C")]
	public class OVRAutoHandFingerBender : MonoBehaviour
	{
		[Token(Token = "0x40021C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public OVRHandControllerLink controller;

		[Token(Token = "0x40021C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public OVRInput.Touch touch;

		[Token(Token = "0x40021C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public OVRInput.Button button;

		[Token(Token = "0x40021C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public float[] bendOffsets;

		[Token(Token = "0x40021C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool pressed;

		[Token(Token = "0x60020D6")]
		[Address(RVA = "0xE5EA2C", Offset = "0xE5EA2C", VA = "0xE5EA2C")]
		private void Update()
		{
		}

		[Token(Token = "0x60020D7")]
		[Address(RVA = "0xE5EB64", Offset = "0xE5EB64", VA = "0xE5EB64")]
		private bool Pressed()
		{
			return default(bool);
		}

		[Token(Token = "0x60020D8")]
		[Address(RVA = "0xE5EC7C", Offset = "0xE5EC7C", VA = "0xE5EC7C")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60020D9")]
		[Address(RVA = "0xE5EDAC", Offset = "0xE5EDAC", VA = "0xE5EDAC")]
		public OVRAutoHandFingerBender()
		{
		}
	}
	[Token(Token = "0x200062D")]
	[RequireComponent(typeof(OVRSkeleton))]
	[DefaultExecutionOrder(1)]
	public class OVRAutoHandTracker : MonoBehaviour
	{
		[Token(Token = "0x40021C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private OVRSkeleton skeleton;

		[Token(Token = "0x40021CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float indexBend;

		[Token(Token = "0x40021CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float middleBend;

		[Token(Token = "0x40021CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float ringBend;

		[Token(Token = "0x40021CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float pinkyBend;

		[Token(Token = "0x40021CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float thumbBend;

		[Token(Token = "0x40021CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Quaternion lastIndexFingerRot1;

		[Token(Token = "0x40021D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Quaternion lastIndexFingerRot2;

		[Token(Token = "0x40021D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Quaternion lastMiddleFingerRot1;

		[Token(Token = "0x40021D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private Quaternion lastMiddleFingerRot2;

		[Token(Token = "0x40021D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private Quaternion lastRingFingerRot1;

		[Token(Token = "0x40021D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private Quaternion lastRingFingerRot2;

		[Token(Token = "0x40021D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private Quaternion lastPinkyFingerRot1;

		[Token(Token = "0x40021D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private Quaternion lastPinkyFingerRot2;

		[Token(Token = "0x40021D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private Quaternion lastThumbFingerRot1;

		[Token(Token = "0x40021D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private Quaternion lastThumbFingerRot2;

		[Token(Token = "0x40021D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private Quaternion lastThumbFingerRot3;

		[Token(Token = "0x40021DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public Hand hand;

		[Token(Token = "0x40021DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[Header("Bend Fingers")]
		public Finger thumb;

		[Token(Token = "0x40021DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public Finger index;

		[Token(Token = "0x40021DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public Finger middle;

		[Token(Token = "0x40021DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public Finger ring;

		[Token(Token = "0x40021DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public Finger pinky;

		[Token(Token = "0x40021E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[Space]
		[Tooltip("Allows fingers to move while holding an object")]
		public bool freeFingers;

		[Token(Token = "0x40021E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[Space]
		[Header("Grab Action")]
		[Tooltip("The required fingers to be bent to the required finger bend to call the grab event, all of these fingers needs to be past the required bend value [Represents AND]")]
		public FingerBend[] grabFingersRequired;

		[Token(Token = "0x40021E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[Tooltip("The required fingers to be bent to the required finger bend to call the squeeze event, all of these fingers needs to be past the required bend value [Represents AND]")]
		[Space]
		[Header("Squeeze Action")]
		public FingerBend[] squeezeFingersRequired;

		[Token(Token = "0x40021E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private bool grabbing;

		[Token(Token = "0x40021E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x131")]
		private bool squeezing;

		[Token(Token = "0x40021E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private Rigidbody body;

		[Token(Token = "0x40021E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private CollisionDetectionMode mode;

		[Token(Token = "0x60020DA")]
		[Address(RVA = "0xE5EDB4", Offset = "0xE5EDB4", VA = "0xE5EDB4")]
		public float GetFingerCurl(OVRFingerEnum finger)
		{
			return default(float);
		}

		[Token(Token = "0x60020DB")]
		[Address(RVA = "0xE5EE14", Offset = "0xE5EE14", VA = "0xE5EE14")]
		private void Start()
		{
		}

		[Token(Token = "0x60020DC")]
		[Address(RVA = "0xE5EEC0", Offset = "0xE5EEC0", VA = "0xE5EEC0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60020DD")]
		[Address(RVA = "0xE5EEE0", Offset = "0xE5EEE0", VA = "0xE5EEE0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60020DE")]
		[Address(RVA = "0xE5EF6C", Offset = "0xE5EF6C", VA = "0xE5EF6C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60020DF")]
		[Address(RVA = "0xE5F8E4", Offset = "0xE5F8E4", VA = "0xE5F8E4")]
		public bool IsGrabbing()
		{
			return default(bool);
		}

		[Token(Token = "0x60020E0")]
		[Address(RVA = "0xE5F968", Offset = "0xE5F968", VA = "0xE5F968")]
		public bool IsSqueezing()
		{
			return default(bool);
		}

		[Token(Token = "0x60020E1")]
		[Address(RVA = "0xE5F9EC", Offset = "0xE5F9EC", VA = "0xE5F9EC")]
		public OVRAutoHandTracker()
		{
		}
	}
	[Token(Token = "0x200062E")]
	public enum OVRFingerEnum
	{
		[Token(Token = "0x40021E8")]
		index,
		[Token(Token = "0x40021E9")]
		middle,
		[Token(Token = "0x40021EA")]
		ring,
		[Token(Token = "0x40021EB")]
		pinky,
		[Token(Token = "0x40021EC")]
		thumb
	}
	[Serializable]
	[Token(Token = "0x200062F")]
	public struct FingerBend
	{
		[Token(Token = "0x40021ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float amount;

		[Token(Token = "0x40021EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public OVRFingerEnum finger;
	}
	[Serializable]
	[Token(Token = "0x2000630")]
	public struct FingerBendData
	{
		[Token(Token = "0x40021EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float bendValue;

		[Token(Token = "0x40021F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public OVRFingerEnum finger;
	}
	[Token(Token = "0x2000631")]
	public class OVRAutoHandTrackerEvent : MonoBehaviour
	{
		[Token(Token = "0x40021F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public OVRAutoHandTracker handTracker;

		[Token(Token = "0x40021F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Every Finger must be bent past the bendValue to trigger the event")]
		public FingerBendData[] fingerBendPast;

		[Token(Token = "0x40021F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Every Finger must be bent before the bendValue to trigger the event")]
		public FingerBendData[] fingerBendBelow;

		[Token(Token = "0x40021F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityEvent Pressed;

		[Token(Token = "0x40021F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UnityEvent Released;

		[Token(Token = "0x40021F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool pressed;

		[Token(Token = "0x60020E2")]
		[Address(RVA = "0xE5F9FC", Offset = "0xE5F9FC", VA = "0xE5F9FC")]
		private void Update()
		{
		}

		[Token(Token = "0x60020E3")]
		[Address(RVA = "0xE5FA60", Offset = "0xE5FA60", VA = "0xE5FA60")]
		public bool IsPressed()
		{
			return default(bool);
		}

		[Token(Token = "0x60020E4")]
		[Address(RVA = "0xE5FB60", Offset = "0xE5FB60", VA = "0xE5FB60")]
		public OVRAutoHandTrackerEvent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000632")]
	public struct OVRControllerEventData
	{
		[Token(Token = "0x40021F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public OVRInput.Controller controller;

		[Token(Token = "0x40021F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public OVRInput.Button button;

		[Token(Token = "0x40021F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public UnityEvent OnPress;

		[Token(Token = "0x40021FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public UnityEvent OnRelease;

		[Token(Token = "0x40021FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal bool pressed;
	}
	[Token(Token = "0x2000633")]
	public class OVRControllerEvent : MonoBehaviour
	{
		[Token(Token = "0x40021FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public OVRControllerEventData[] eventList;

		[Token(Token = "0x60020E5")]
		[Address(RVA = "0xE5FB68", Offset = "0xE5FB68", VA = "0xE5FB68")]
		private void Update()
		{
		}

		[Token(Token = "0x60020E6")]
		[Address(RVA = "0xE5FD20", Offset = "0xE5FD20", VA = "0xE5FD20")]
		public OVRControllerEvent()
		{
		}
	}
	[Token(Token = "0x2000634")]
	public class OVRHandControllerLink : HandControllerLink
	{
		[Token(Token = "0x2000635")]
		public class HapticEvent
		{
			[Token(Token = "0x4002205")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private float dur;

			[Token(Token = "0x4002206")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float currDur;

			[Token(Token = "0x4002207")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float amp;

			[Token(Token = "0x4002208")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public float freq;

			[Token(Token = "0x60020F1")]
			[Address(RVA = "0xE60364", Offset = "0xE60364", VA = "0xE60364")]
			public HapticEvent(float duration, float amp, float freq)
			{
			}

			[Token(Token = "0x60020F2")]
			[Address(RVA = "0xE60250", Offset = "0xE60250", VA = "0xE60250")]
			public void ReduceDuration(float amount)
			{
			}

			[Token(Token = "0x60020F3")]
			[Address(RVA = "0xE60430", Offset = "0xE60430", VA = "0xE60430")]
			public float TotalDuration()
			{
				return default(float);
			}
		}

		[Token(Token = "0x40021FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public OVRInput.Controller controller;

		[Token(Token = "0x40021FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public OVRInput.Axis1D grabAxis;

		[Token(Token = "0x40021FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public OVRInput.Button grabButton;

		[Token(Token = "0x4002200")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public OVRInput.Button squeezeButton;

		[Token(Token = "0x4002201")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Range(0f, 320f)]
		[HideInInspector]
		public int frequency;

		[Token(Token = "0x4002202")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private bool grabbing;

		[Token(Token = "0x4002203")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		private bool squeezing;

		[Token(Token = "0x4002204")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<HapticEvent> hapticEvents;

		[Token(Token = "0x60020E7")]
		[Address(RVA = "0xE5FD28", Offset = "0xE5FD28", VA = "0xE5FD28")]
		private void Start()
		{
		}

		[Token(Token = "0x60020E8")]
		[Address(RVA = "0xE5FD9C", Offset = "0xE5FD9C", VA = "0xE5FD9C")]
		public void Update()
		{
		}

		[Token(Token = "0x60020E9")]
		[Address(RVA = "0xE5E888", Offset = "0xE5E888", VA = "0xE5E888")]
		public float GetAxis(OVRInput.Axis1D axis)
		{
			return default(float);
		}

		[Token(Token = "0x60020EA")]
		[Address(RVA = "0xE548E0", Offset = "0xE548E0", VA = "0xE548E0")]
		public Vector2 GetAxis2D(OVRInput.Axis2D axis)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60020EB")]
		[Address(RVA = "0xE5EBA4", Offset = "0xE5EBA4", VA = "0xE5EBA4")]
		public bool ButtonPressed(OVRInput.Button button)
		{
			return default(bool);
		}

		[Token(Token = "0x60020EC")]
		[Address(RVA = "0xE5FF60", Offset = "0xE5FF60", VA = "0xE5FF60")]
		public bool ButtonPressed(OVRInput.Touch button)
		{
			return default(bool);
		}

		[Token(Token = "0x60020ED")]
		[Address(RVA = "0xE5EC10", Offset = "0xE5EC10", VA = "0xE5EC10")]
		public bool ButtonTouched(OVRInput.Touch button)
		{
			return default(bool);
		}

		[Token(Token = "0x60020EE")]
		[Address(RVA = "0xE5FFCC", Offset = "0xE5FFCC", VA = "0xE5FFCC")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60020EF")]
		[Address(RVA = "0xE60260", Offset = "0xE60260", VA = "0xE60260", Slot = "4")]
		public override void TryHapticImpulse(float duration, float amp, float frequency = 10f)
		{
		}

		[Token(Token = "0x60020F0")]
		[Address(RVA = "0xE603A0", Offset = "0xE603A0", VA = "0xE603A0")]
		public OVRHandControllerLink()
		{
		}
	}
	[Token(Token = "0x2000636")]
	public class OVRHandPlayerControllerLink : MonoBehaviour
	{
		[Token(Token = "0x4002209")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AutoHandPlayer player;

		[Token(Token = "0x400220A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public OVRInput.Controller moveController;

		[Token(Token = "0x400220B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public OVRInput.Axis2D moveAxis;

		[Token(Token = "0x400220C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public OVRInput.Controller turnController;

		[Token(Token = "0x400220D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public OVRInput.Axis2D turnAxis;

		[Token(Token = "0x60020F4")]
		[Address(RVA = "0xE60438", Offset = "0xE60438", VA = "0xE60438")]
		public void Update()
		{
		}

		[Token(Token = "0x60020F5")]
		[Address(RVA = "0xE604E8", Offset = "0xE604E8", VA = "0xE604E8")]
		public OVRHandPlayerControllerLink()
		{
		}
	}
	[Token(Token = "0x2000637")]
	public class OVRPlayerHandTrackerLink : MonoBehaviour
	{
		[Token(Token = "0x400220E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public OVRAutoHandTracker handTracker;

		[Token(Token = "0x400220F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AutoHandPlayer player;

		[Token(Token = "0x4002210")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Every Finger must be bent past the bendValue to trigger the event")]
		public FingerBendData[] fingerBendPast;

		[Token(Token = "0x4002211")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Every Finger must be bent before the bendValue to trigger the event")]
		public FingerBendData[] fingerBendBelow;

		[Token(Token = "0x4002212")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool pressed;

		[Token(Token = "0x60020F6")]
		[Address(RVA = "0xE604F0", Offset = "0xE604F0", VA = "0xE604F0")]
		private void Update()
		{
		}

		[Token(Token = "0x60020F7")]
		[Address(RVA = "0xE6057C", Offset = "0xE6057C", VA = "0xE6057C")]
		public bool IsPressed()
		{
			return default(bool);
		}

		[Token(Token = "0x60020F8")]
		[Address(RVA = "0xE6067C", Offset = "0xE6067C", VA = "0xE6067C")]
		public OVRPlayerHandTrackerLink()
		{
		}
	}
	[Token(Token = "0x2000638")]
	public class OVRTeleporterLink : MonoBehaviour
	{
		[Token(Token = "0x4002213")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Teleporter teleport;

		[Token(Token = "0x4002214")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public OVRInput.Controller controller;

		[Token(Token = "0x4002215")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public OVRInput.Button teleportButton;

		[Token(Token = "0x4002216")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool aiming;

		[Token(Token = "0x60020F9")]
		[Address(RVA = "0xE60684", Offset = "0xE60684", VA = "0xE60684")]
		public void FixedUpdate()
		{
		}

		[Token(Token = "0x60020FA")]
		[Address(RVA = "0xE60768", Offset = "0xE60768", VA = "0xE60768")]
		public OVRTeleporterLink()
		{
		}
	}
}
