using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.Serialization.Formatters.Binary;
using System.Security.Cryptography;
using System.Text;
using System.Threading;
using System.Xml;
using AOT;
using Bhaptics.Tact;
using Bhaptics.Tact.Unity;
using Dreamteck.Splines;
using Facebook.WitAi;
using Facebook.WitAi.Lib;
using Il2CppDummyDll;
using Oculus.Platform;
using Oculus.Platform.Models;
using RootMotion.FinalIK;
using Spunge;
using TMPro;
using UnityEngine;
using UnityEngine.AI;
using UnityEngine.Audio;
using UnityEngine.EventSystems;
using UnityEngine.Events;
using UnityEngine.Rendering;
using UnityEngine.Rendering.PostProcessing;
using UnityEngine.SceneManagement;
using UnityEngine.Serialization;
using UnityEngine.U2D;
using UnityEngine.UI;
using UnityEngine.Video;
using UnityEngine.XR;
using UnityEngine.XR.Interaction.Toolkit;
using UnityEngine.XR.Management;
using Viveport;
using Viveport.Internal;

[assembly: AssemblyVersion("0.0.0.0")]
[Token(Token = "0x2000002")]
public class BhapticsAndroidBasicExample : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000003")]
	public struct BhapticsAndroidExampleButtons
	{
		[Token(Token = "0x4000006")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Button ping;

		[Token(Token = "0x4000007")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Button toggle;
	}

	[Token(Token = "0x4000001")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public BhapticsAndroidExampleButtons talButtons;

	[Token(Token = "0x4000002")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public BhapticsAndroidExampleButtons suitButtons;

	[Token(Token = "0x4000003")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public BhapticsAndroidExampleButtons armsLeftButtons;

	[Token(Token = "0x4000004")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public BhapticsAndroidExampleButtons armsRightButtons;

	[Token(Token = "0x4000005")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Text pairedDevicesCount;

	[Token(Token = "0x6000001")]
	[Address(RVA = "0xA300FC", Offset = "0xA300FC", VA = "0xA300FC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000002")]
	[Address(RVA = "0xA301A0", Offset = "0xA301A0", VA = "0xA301A0")]
	private void Refresh()
	{
	}

	[Token(Token = "0x6000003")]
	[Address(RVA = "0xA303FC", Offset = "0xA303FC", VA = "0xA303FC")]
	public void PingTactal()
	{
	}

	[Token(Token = "0x6000004")]
	[Address(RVA = "0xA30474", Offset = "0xA30474", VA = "0xA30474")]
	public void PingTactSuit()
	{
	}

	[Token(Token = "0x6000005")]
	[Address(RVA = "0xA30494", Offset = "0xA30494", VA = "0xA30494")]
	public void PingTactosyArms(bool isLeft)
	{
	}

	[Token(Token = "0x6000006")]
	[Address(RVA = "0xA304B4", Offset = "0xA304B4", VA = "0xA304B4")]
	public void ToggleTactosyArms(bool isLeft)
	{
	}

	[Token(Token = "0x6000007")]
	[Address(RVA = "0xA3041C", Offset = "0xA3041C", VA = "0xA3041C")]
	private void PingPairedDevice(PositionType deviceType)
	{
	}

	[Token(Token = "0x6000008")]
	[Address(RVA = "0xA305B4", Offset = "0xA305B4", VA = "0xA305B4")]
	public BhapticsAndroidBasicExample()
	{
	}
}
[Token(Token = "0x2000004")]
public class BhapticsCharacterController : MonoBehaviour
{
	[Token(Token = "0x4000008")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float speed;

	[Token(Token = "0x4000009")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float jumpSpeed;

	[Token(Token = "0x400000A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float gravity;

	[Token(Token = "0x400000B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float rotationSpeedH;

	[Token(Token = "0x400000C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float rotationSpeedV;

	[Token(Token = "0x400000D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private bool isEnableControl;

	[Token(Token = "0x400000E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Vector3 moveDirection;

	[Token(Token = "0x400000F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private HapticSender tactSender;

	[Token(Token = "0x4000010")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Header("Shooting with raycasting or with Physical bullet")]
	public bool IsRaycastingShooting;

	[Token(Token = "0x4000011")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private LineRenderer lineRenderer;

	[Token(Token = "0x4000012")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private Transform shootingPoint;

	[Token(Token = "0x4000013")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Header("Physical bullet setting")]
	[SerializeField]
	private GameObject bulletPrefab;

	[Token(Token = "0x4000014")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private CharacterController characterController;

	[Token(Token = "0x6000009")]
	[Address(RVA = "0xA305BC", Offset = "0xA305BC", VA = "0xA305BC")]
	private void Start()
	{
	}

	[Token(Token = "0x600000A")]
	[Address(RVA = "0xA306F8", Offset = "0xA306F8", VA = "0xA306F8")]
	private void Update()
	{
	}

	[Token(Token = "0x600000B")]
	[Address(RVA = "0xA30718", Offset = "0xA30718", VA = "0xA30718")]
	private void ShootPlayer()
	{
	}

	[Token(Token = "0x600000C")]
	[Address(RVA = "0xA30D74", Offset = "0xA30D74", VA = "0xA30D74")]
	private void RotatePlayer()
	{
	}

	[Token(Token = "0x600000D")]
	[Address(RVA = "0xA30C1C", Offset = "0xA30C1C", VA = "0xA30C1C")]
	private void MovePlayer()
	{
	}

	[Token(Token = "0x600000E")]
	[Address(RVA = "0xA30FB4", Offset = "0xA30FB4", VA = "0xA30FB4")]
	public BhapticsCharacterController()
	{
	}
}
[Token(Token = "0x2000005")]
public class BhapticsCustomHapticReceiver : MonoBehaviour
{
	[Token(Token = "0x4000015")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool IsActive;

	[Token(Token = "0x4000016")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public PositionTag PositionTag;

	[Token(Token = "0x600000F")]
	[Address(RVA = "0xA31030", Offset = "0xA31030", VA = "0xA31030")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000010")]
	[Address(RVA = "0xA31248", Offset = "0xA31248", VA = "0xA31248")]
	private void OnTriggerEnter(Collider bullet)
	{
	}

	[Token(Token = "0x6000011")]
	[Address(RVA = "0xA313EC", Offset = "0xA313EC", VA = "0xA313EC")]
	private void OnCollisionEnter(Collision bullet)
	{
	}

	[Token(Token = "0x6000012")]
	[Address(RVA = "0xA31304", Offset = "0xA31304", VA = "0xA31304")]
	private void Handle(Vector3 contactPoint, HapticSender tactSender)
	{
	}

	[Token(Token = "0x6000013")]
	[Address(RVA = "0xA30EA4", Offset = "0xA30EA4", VA = "0xA30EA4")]
	public void ReflectHandle(Vector3 contactPoint, HapticSender tactSender)
	{
	}

	[Token(Token = "0x6000014")]
	[Address(RVA = "0xA314C4", Offset = "0xA314C4", VA = "0xA314C4")]
	public BhapticsCustomHapticReceiver()
	{
	}
}
[Token(Token = "0x2000006")]
public class BhapticsDotPointControllerExample : MonoBehaviour
{
	[Token(Token = "0x4000017")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public HapticClipPositionType clipPositionType;

	[Token(Token = "0x4000018")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[HideInInspector]
	public List<DotPoint> dotPointList;

	[Token(Token = "0x4000019")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private string key;

	[Token(Token = "0x400001A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int duration;

	[Token(Token = "0x6000015")]
	[Address(RVA = "0xA314D4", Offset = "0xA314D4", VA = "0xA314D4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000016")]
	[Address(RVA = "0xA31548", Offset = "0xA31548", VA = "0xA31548")]
	private void Update()
	{
	}

	[Token(Token = "0x6000017")]
	[Address(RVA = "0xA31970", Offset = "0xA31970", VA = "0xA31970")]
	public void Toggle(DotPoint dot)
	{
	}

	[Token(Token = "0x6000018")]
	[Address(RVA = "0xA31A80", Offset = "0xA31A80", VA = "0xA31A80")]
	private bool AddToList(DotPoint dot)
	{
		return default(bool);
	}

	[Token(Token = "0x6000019")]
	[Address(RVA = "0xA319EC", Offset = "0xA319EC", VA = "0xA319EC")]
	private bool RemoveAtList(DotPoint dot)
	{
		return default(bool);
	}

	[Token(Token = "0x600001A")]
	[Address(RVA = "0xA31B5C", Offset = "0xA31B5C", VA = "0xA31B5C")]
	public BhapticsDotPointControllerExample()
	{
	}
}
[Token(Token = "0x2000007")]
public class BhapticsDotPointExample : MonoBehaviour
{
	[Token(Token = "0x400001B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int motorIndex;

	[Token(Token = "0x400001C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int motorIntensity;

	[Token(Token = "0x400001D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private BhapticsDotPointControllerExample controller;

	[Token(Token = "0x400001E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private DotPoint dotPoint;

	[Token(Token = "0x400001F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Button thisButton;

	[Token(Token = "0x600001B")]
	[Address(RVA = "0xA31BA4", Offset = "0xA31BA4", VA = "0xA31BA4")]
	private void Awake()
	{
	}

	[Token(Token = "0x600001C")]
	[Address(RVA = "0xA31C68", Offset = "0xA31C68", VA = "0xA31C68")]
	private void Start()
	{
	}

	[Token(Token = "0x600001D")]
	[Address(RVA = "0xA31CFC", Offset = "0xA31CFC", VA = "0xA31CFC")]
	public void Toggle()
	{
	}

	[Token(Token = "0x600001E")]
	[Address(RVA = "0xA31D80", Offset = "0xA31D80", VA = "0xA31D80")]
	public BhapticsDotPointExample()
	{
	}
}
[Token(Token = "0x2000008")]
public class BhapticsFpsView : MonoBehaviour
{
	[Token(Token = "0x2000009")]
	[CompilerGenerated]
	private sealed class <FPS>d__3 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000021")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000022")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000023")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BhapticsFpsView <>4__this;

		[Token(Token = "0x4000024")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float[] <buffer>5__2;

		[Token(Token = "0x4000025")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int <index>5__3;

		[Token(Token = "0x4000026")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <frequency>5__4;

		[Token(Token = "0x4000027")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool <initial>5__5;

		[Token(Token = "0x4000028")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private int <lastFrameCount>5__6;

		[Token(Token = "0x4000029")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float <lastTime>5__7;

		[Token(Token = "0x17000001")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000028")]
			[Address(RVA = "0xA3269C", Offset = "0xA3269C", VA = "0xA3269C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000002")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600002A")]
			[Address(RVA = "0xA326E4", Offset = "0xA326E4", VA = "0xA326E4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000025")]
		[Address(RVA = "0xA31E68", Offset = "0xA31E68", VA = "0xA31E68")]
		[DebuggerHidden]
		public <FPS>d__3(int <>1__state)
		{
		}

		[Token(Token = "0x6000026")]
		[Address(RVA = "0xA32054", Offset = "0xA32054", VA = "0xA32054", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000027")]
		[Address(RVA = "0xA32058", Offset = "0xA32058", VA = "0xA32058", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000029")]
		[Address(RVA = "0xA326A4", Offset = "0xA326A4", VA = "0xA326A4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000020")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Text fpsText;

	[Token(Token = "0x600001F")]
	[Address(RVA = "0xA31D90", Offset = "0xA31D90", VA = "0xA31D90")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000020")]
	[Address(RVA = "0xA31DE0", Offset = "0xA31DE0", VA = "0xA31DE0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000021")]
	[Address(RVA = "0xA31E00", Offset = "0xA31E00", VA = "0xA31E00")]
	[IteratorStateMachine(typeof(<FPS>d__3))]
	private IEnumerator FPS()
	{
		return null;
	}

	[Token(Token = "0x6000022")]
	[Address(RVA = "0xA31E90", Offset = "0xA31E90", VA = "0xA31E90")]
	private float Average(float[] floats)
	{
		return default(float);
	}

	[Token(Token = "0x6000023")]
	[Address(RVA = "0xA31EF8", Offset = "0xA31EF8", VA = "0xA31EF8")]
	public float Percentile(float[] sequence, float excelPercentile)
	{
		return default(float);
	}

	[Token(Token = "0x6000024")]
	[Address(RVA = "0xA3204C", Offset = "0xA3204C", VA = "0xA3204C")]
	public BhapticsFpsView()
	{
	}
}
[Token(Token = "0x200000A")]
public class BhapticsHapticBullet : MonoBehaviour
{
	[Token(Token = "0x600002B")]
	[Address(RVA = "0xA326EC", Offset = "0xA326EC", VA = "0xA326EC")]
	private void Start()
	{
	}

	[Token(Token = "0x600002C")]
	[Address(RVA = "0xA3275C", Offset = "0xA3275C", VA = "0xA3275C")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x600002D")]
	[Address(RVA = "0xA327C8", Offset = "0xA327C8", VA = "0xA327C8")]
	public BhapticsHapticBullet()
	{
	}
}
[Token(Token = "0x200000B")]
public class BhapticsHapticClipExample : MonoBehaviour
{
	[Token(Token = "0x400002A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public HapticClip hapticClip;

	[Token(Token = "0x400002B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Image isEnabledImage;

	[Token(Token = "0x600002E")]
	[Address(RVA = "0xA327D0", Offset = "0xA327D0", VA = "0xA327D0")]
	private void Update()
	{
	}

	[Token(Token = "0x600002F")]
	[Address(RVA = "0xA32894", Offset = "0xA32894", VA = "0xA32894")]
	public void Enable()
	{
	}

	[Token(Token = "0x6000030")]
	[Address(RVA = "0xA3289C", Offset = "0xA3289C", VA = "0xA3289C")]
	public void Disable()
	{
	}

	[Token(Token = "0x6000031")]
	[Address(RVA = "0xA32A80", Offset = "0xA32A80", VA = "0xA32A80")]
	public void Play()
	{
	}

	[Token(Token = "0x6000032")]
	[Address(RVA = "0xA32B08", Offset = "0xA32B08", VA = "0xA32B08")]
	public void Stop()
	{
	}

	[Token(Token = "0x6000033")]
	[Address(RVA = "0xA32B94", Offset = "0xA32B94", VA = "0xA32B94")]
	public BhapticsHapticClipExample()
	{
	}
}
[Token(Token = "0x200000C")]
public class BhapticsIdentifierPlayExample : MonoBehaviour
{
	[Token(Token = "0x200000D")]
	[CompilerGenerated]
	private sealed class <PlayCor>d__8 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000030")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000031")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000032")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BhapticsIdentifierPlayExample <>4__this;

		[Token(Token = "0x4000033")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <bufferSize>5__2;

		[Token(Token = "0x4000034")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int <index>5__3;

		[Token(Token = "0x4000035")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private string <identifier>5__4;

		[Token(Token = "0x17000003")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600003D")]
			[Address(RVA = "0xA32FB0", Offset = "0xA32FB0", VA = "0xA32FB0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000004")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600003F")]
			[Address(RVA = "0xA32FF8", Offset = "0xA32FF8", VA = "0xA32FF8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600003A")]
		[Address(RVA = "0xA32D70", Offset = "0xA32D70", VA = "0xA32D70")]
		[DebuggerHidden]
		public <PlayCor>d__8(int <>1__state)
		{
		}

		[Token(Token = "0x600003B")]
		[Address(RVA = "0xA32DA0", Offset = "0xA32DA0", VA = "0xA32DA0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600003C")]
		[Address(RVA = "0xA32DA4", Offset = "0xA32DA4", VA = "0xA32DA4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600003E")]
		[Address(RVA = "0xA32FB8", Offset = "0xA32FB8", VA = "0xA32FB8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400002C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public FileHapticClip clip;

	[Token(Token = "0x400002D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text identifierText;

	[Token(Token = "0x400002E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Coroutine currentCoroutine;

	[Token(Token = "0x400002F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool applyIdentifier;

	[Token(Token = "0x6000034")]
	[Address(RVA = "0xA32B9C", Offset = "0xA32B9C", VA = "0xA32B9C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000035")]
	[Address(RVA = "0xA32BFC", Offset = "0xA32BFC", VA = "0xA32BFC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000036")]
	[Address(RVA = "0xA32C20", Offset = "0xA32C20", VA = "0xA32C20")]
	private void Update()
	{
	}

	[Token(Token = "0x6000037")]
	[Address(RVA = "0xA32BA0", Offset = "0xA32BA0", VA = "0xA32BA0")]
	private void Play()
	{
	}

	[Token(Token = "0x6000038")]
	[Address(RVA = "0xA32D08", Offset = "0xA32D08", VA = "0xA32D08")]
	[IteratorStateMachine(typeof(<PlayCor>d__8))]
	private IEnumerator PlayCor()
	{
		return null;
	}

	[Token(Token = "0x6000039")]
	[Address(RVA = "0xA32D98", Offset = "0xA32D98", VA = "0xA32D98")]
	public BhapticsIdentifierPlayExample()
	{
	}
}
[Token(Token = "0x200000E")]
public class BhapticsIsConnectIsPlayingExample : MonoBehaviour
{
	[Token(Token = "0x4000036")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public FileHapticClip[] clips;

	[Token(Token = "0x4000037")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text isConnectText;

	[Token(Token = "0x4000038")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text clipText;

	[Token(Token = "0x4000039")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Text isPlayingText;

	[Token(Token = "0x6000040")]
	[Address(RVA = "0xA33000", Offset = "0xA33000", VA = "0xA33000")]
	private void Start()
	{
	}

	[Token(Token = "0x6000041")]
	[Address(RVA = "0xA331D0", Offset = "0xA331D0", VA = "0xA331D0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000042")]
	[Address(RVA = "0xA33ABC", Offset = "0xA33ABC", VA = "0xA33ABC")]
	private void PlayClips()
	{
	}

	[Token(Token = "0x6000043")]
	[Address(RVA = "0xA33B20", Offset = "0xA33B20", VA = "0xA33B20")]
	public BhapticsIsConnectIsPlayingExample()
	{
	}
}
[Token(Token = "0x200000F")]
public class BhapticsLongTest : MonoBehaviour
{
	[Token(Token = "0x400003A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private HapticClip[] tactClips;

	[Token(Token = "0x6000044")]
	[Address(RVA = "0xA33B28", Offset = "0xA33B28", VA = "0xA33B28")]
	private void Start()
	{
	}

	[Token(Token = "0x6000045")]
	[Address(RVA = "0xA33BAC", Offset = "0xA33BAC", VA = "0xA33BAC")]
	private void TriggerPlay()
	{
	}

	[Token(Token = "0x6000046")]
	[Address(RVA = "0xA33C10", Offset = "0xA33C10", VA = "0xA33C10")]
	private void ReloadScene()
	{
	}

	[Token(Token = "0x6000047")]
	[Address(RVA = "0xA33D34", Offset = "0xA33D34", VA = "0xA33D34")]
	public BhapticsLongTest()
	{
	}
}
[Token(Token = "0x2000010")]
public class BhapticsPathPointControllerExample : MonoBehaviour
{
	[Token(Token = "0x400003B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public HapticClipPositionType clipPositionType;

	[Token(Token = "0x400003C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int motorIntensity;

	[Token(Token = "0x400003D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<PathPoint> pathPointList;

	[Token(Token = "0x400003E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private BoxCollider targetCollider;

	[Token(Token = "0x400003F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private string key;

	[Token(Token = "0x4000040")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int duration;

	[Token(Token = "0x4000041")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private bool isClickedArea;

	[Token(Token = "0x6000048")]
	[Address(RVA = "0xA33D3C", Offset = "0xA33D3C", VA = "0xA33D3C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000049")]
	[Address(RVA = "0xA33E90", Offset = "0xA33E90", VA = "0xA33E90")]
	private void Update()
	{
	}

	[Token(Token = "0x600004A")]
	[Address(RVA = "0xA34070", Offset = "0xA34070", VA = "0xA34070")]
	private Vector2? GetPathPointOffset()
	{
		return null;
	}

	[Token(Token = "0x600004B")]
	[Address(RVA = "0xA341DC", Offset = "0xA341DC", VA = "0xA341DC")]
	private Vector2 ConvertPositionToPathOffset(Vector3 currentPos, BoxCollider currentHitCollider)
	{
		return default(Vector2);
	}

	[Token(Token = "0x600004C")]
	[Address(RVA = "0xA34338", Offset = "0xA34338", VA = "0xA34338")]
	public BhapticsPathPointControllerExample()
	{
	}
}
[Token(Token = "0x2000011")]
public class BhapticsProfiler : MonoBehaviour
{
	[Token(Token = "0x4000042")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private int numOfTactClips;

	[Token(Token = "0x4000043")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public HapticClip[] tactClips;

	[Token(Token = "0x4000044")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool hapticEnable;

	[Token(Token = "0x4000045")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int targetFrameRate;

	[Token(Token = "0x600004D")]
	[Address(RVA = "0xA3438C", Offset = "0xA3438C", VA = "0xA3438C")]
	private void Awake()
	{
	}

	[Token(Token = "0x600004E")]
	[Address(RVA = "0xA343EC", Offset = "0xA343EC", VA = "0xA343EC")]
	private void TriggerPlay()
	{
	}

	[Token(Token = "0x600004F")]
	[Address(RVA = "0xA3458C", Offset = "0xA3458C", VA = "0xA3458C")]
	public BhapticsProfiler()
	{
	}
}
[Token(Token = "0x2000012")]
public class BhapticsReflectExample : MonoBehaviour
{
	[Token(Token = "0x4000046")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ArmsHapticClip armsHapticClip;

	[Token(Token = "0x4000047")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool isReflect;

	[Token(Token = "0x6000050")]
	[Address(RVA = "0xA345A4", Offset = "0xA345A4", VA = "0xA345A4")]
	public void Play()
	{
	}

	[Token(Token = "0x6000051")]
	[Address(RVA = "0xA3462C", Offset = "0xA3462C", VA = "0xA3462C")]
	public void Stop()
	{
	}

	[Token(Token = "0x6000052")]
	[Address(RVA = "0xA346B8", Offset = "0xA346B8", VA = "0xA346B8")]
	public void OnClickToggle(Toggle toggle)
	{
	}

	[Token(Token = "0x6000053")]
	[Address(RVA = "0xA34770", Offset = "0xA34770", VA = "0xA34770")]
	public BhapticsReflectExample()
	{
	}
}
[Token(Token = "0x2000013")]
public class BhapticsRotate : MonoBehaviour
{
	[Token(Token = "0x4000048")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private bool isRandom;

	[Token(Token = "0x4000049")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private float rotationSpeed;

	[Token(Token = "0x400004A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Vector3 axis;

	[Token(Token = "0x6000054")]
	[Address(RVA = "0xA34778", Offset = "0xA34778", VA = "0xA34778")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000055")]
	[Address(RVA = "0xA347CC", Offset = "0xA347CC", VA = "0xA347CC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000056")]
	[Address(RVA = "0xA34818", Offset = "0xA34818", VA = "0xA34818")]
	private void Update()
	{
	}

	[Token(Token = "0x6000057")]
	[Address(RVA = "0xA34844", Offset = "0xA34844", VA = "0xA34844")]
	private void RandomAxis()
	{
	}

	[Token(Token = "0x6000058")]
	[Address(RVA = "0xA348B0", Offset = "0xA348B0", VA = "0xA348B0")]
	public BhapticsRotate()
	{
	}
}
[Token(Token = "0x2000014")]
public class BhapticsRotateExample : MonoBehaviour
{
	[Token(Token = "0x400004B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public VestHapticClip vestHapticClip;

	[Token(Token = "0x400004C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Space]
	public Text angleXText;

	[Token(Token = "0x400004D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text offsetYText;

	[Token(Token = "0x400004E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float angleX;

	[Token(Token = "0x400004F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float offsetY;

	[Token(Token = "0x6000059")]
	[Address(RVA = "0xA348C8", Offset = "0xA348C8", VA = "0xA348C8")]
	public void PlayWithRotate()
	{
	}

	[Token(Token = "0x600005A")]
	[Address(RVA = "0xA34970", Offset = "0xA34970", VA = "0xA34970")]
	public void Stop()
	{
	}

	[Token(Token = "0x600005B")]
	[Address(RVA = "0xA349FC", Offset = "0xA349FC", VA = "0xA349FC")]
	public void OnAngleXChanged(Slider slider)
	{
	}

	[Token(Token = "0x600005C")]
	[Address(RVA = "0xA34B98", Offset = "0xA34B98", VA = "0xA34B98")]
	public void OnOffsetYChanged(Slider slider)
	{
	}

	[Token(Token = "0x600005D")]
	[Address(RVA = "0xA34D50", Offset = "0xA34D50", VA = "0xA34D50")]
	public BhapticsRotateExample()
	{
	}
}
[Token(Token = "0x2000015")]
public class BhapticsShootingCharacter : MonoBehaviour
{
	[Token(Token = "0x2000016")]
	[CompilerGenerated]
	private sealed class <RepeatShoot>d__13 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000059")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400005A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400005B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BhapticsShootingCharacter <>4__this;

		[Token(Token = "0x17000005")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000069")]
			[Address(RVA = "0xA3543C", Offset = "0xA3543C", VA = "0xA3543C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000006")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600006B")]
			[Address(RVA = "0xA35484", Offset = "0xA35484", VA = "0xA35484", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000066")]
		[Address(RVA = "0xA34FBC", Offset = "0xA34FBC", VA = "0xA34FBC")]
		[DebuggerHidden]
		public <RepeatShoot>d__13(int <>1__state)
		{
		}

		[Token(Token = "0x6000067")]
		[Address(RVA = "0xA3534C", Offset = "0xA3534C", VA = "0xA3534C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000068")]
		[Address(RVA = "0xA35350", Offset = "0xA35350", VA = "0xA35350", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600006A")]
		[Address(RVA = "0xA35444", Offset = "0xA35444", VA = "0xA35444", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000050")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform target;

	[Token(Token = "0x4000051")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Transform shootPointLeft;

	[Token(Token = "0x4000052")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Transform shootPointRight;

	[Token(Token = "0x4000053")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private GameObject bulletPrefab;

	[Token(Token = "0x4000054")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	[Space]
	private Transform[] lookingTransforms;

	[Token(Token = "0x4000055")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Animator animator;

	[Token(Token = "0x4000056")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int shootCount;

	[Token(Token = "0x4000057")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float shootDelay;

	[Token(Token = "0x4000058")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float bulletSpeed;

	[Token(Token = "0x600005E")]
	[Address(RVA = "0xA34D58", Offset = "0xA34D58", VA = "0xA34D58")]
	private void Awake()
	{
	}

	[Token(Token = "0x600005F")]
	[Address(RVA = "0xA34DA8", Offset = "0xA34DA8", VA = "0xA34DA8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000060")]
	[Address(RVA = "0xA34F2C", Offset = "0xA34F2C", VA = "0xA34F2C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000061")]
	[Address(RVA = "0xA34FB4", Offset = "0xA34FB4", VA = "0xA34FB4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000062")]
	[Address(RVA = "0xA34F4C", Offset = "0xA34F4C", VA = "0xA34F4C")]
	[IteratorStateMachine(typeof(<RepeatShoot>d__13))]
	private IEnumerator RepeatShoot()
	{
		return null;
	}

	[Token(Token = "0x6000063")]
	[Address(RVA = "0xA34FE4", Offset = "0xA34FE4", VA = "0xA34FE4")]
	private void ShootTarget(int hand)
	{
	}

	[Token(Token = "0x6000064")]
	[Address(RVA = "0xA34DAC", Offset = "0xA34DAC", VA = "0xA34DAC")]
	private void Looking()
	{
	}

	[Token(Token = "0x6000065")]
	[Address(RVA = "0xA35330", Offset = "0xA35330", VA = "0xA35330")]
	public BhapticsShootingCharacter()
	{
	}
}
[Token(Token = "0x2000017")]
public class BhapticsStreamingTest : MonoBehaviour
{
	[Token(Token = "0x400005C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Button button;

	[Token(Token = "0x400005D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Text text;

	[Token(Token = "0x400005E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private HapticClip clip;

	[Token(Token = "0x600006C")]
	[Address(RVA = "0xA3548C", Offset = "0xA3548C", VA = "0xA3548C")]
	private void Start()
	{
	}

	[Token(Token = "0x600006D")]
	[Address(RVA = "0xA354E0", Offset = "0xA354E0", VA = "0xA354E0")]
	private void Update()
	{
	}

	[Token(Token = "0x600006E")]
	[Address(RVA = "0xA354E4", Offset = "0xA354E4", VA = "0xA354E4")]
	private void Check()
	{
	}

	[Token(Token = "0x600006F")]
	[Address(RVA = "0xA35A2C", Offset = "0xA35A2C", VA = "0xA35A2C")]
	public void Toggle()
	{
	}

	[Token(Token = "0x6000070")]
	[Address(RVA = "0xA35A7C", Offset = "0xA35A7C", VA = "0xA35A7C")]
	public BhapticsStreamingTest()
	{
	}
}
[Token(Token = "0x2000018")]
public class BhapticsTeleportPoint : MonoBehaviour
{
	[Token(Token = "0x6000071")]
	[Address(RVA = "0xA35A84", Offset = "0xA35A84", VA = "0xA35A84")]
	public BhapticsTeleportPoint()
	{
	}
}
[Token(Token = "0x2000019")]
public class BhapticsTestScript : MonoBehaviour
{
	[Token(Token = "0x400005F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private HapticClip[] tactClips;

	[Token(Token = "0x4000060")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Slider intensitySlider;

	[Token(Token = "0x4000061")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Slider durationSlider;

	[Token(Token = "0x4000062")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Slider offsetXSlider;

	[Token(Token = "0x4000063")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Slider offsetYSlider;

	[Token(Token = "0x4000064")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Toggle reflectToggle;

	[Token(Token = "0x4000065")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Button openBluetoothSettingButton;

	[Token(Token = "0x4000066")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Button playButton;

	[Token(Token = "0x4000067")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private Button toggleEnableAllButton;

	[Token(Token = "0x6000072")]
	[Address(RVA = "0xA35A8C", Offset = "0xA35A8C", VA = "0xA35A8C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000073")]
	[Address(RVA = "0xA35C6C", Offset = "0xA35C6C", VA = "0xA35C6C")]
	private void ToggleEnable()
	{
	}

	[Token(Token = "0x6000074")]
	[Address(RVA = "0xA35DDC", Offset = "0xA35DDC", VA = "0xA35DDC")]
	private void Open()
	{
	}

	[Token(Token = "0x6000075")]
	[Address(RVA = "0xA35E2C", Offset = "0xA35E2C", VA = "0xA35E2C")]
	private void Play()
	{
	}

	[Token(Token = "0x6000076")]
	[Address(RVA = "0xA36000", Offset = "0xA36000", VA = "0xA36000")]
	public BhapticsTestScript()
	{
	}
}
[Token(Token = "0x200001A")]
public class BhapticsVisualFeedbackOnMotors : MonoBehaviour
{
	[Token(Token = "0x4000068")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	public PositionType tactPositionType;

	[Token(Token = "0x4000069")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject visualMotorsObject;

	[Token(Token = "0x400006A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Gradient hapticColor;

	[Token(Token = "0x400006B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private GameObject[] visualMotors;

	[Token(Token = "0x6000077")]
	[Address(RVA = "0xA36008", Offset = "0xA36008", VA = "0xA36008")]
	private void Start()
	{
	}

	[Token(Token = "0x6000078")]
	[Address(RVA = "0xA362A8", Offset = "0xA362A8", VA = "0xA362A8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000079")]
	[Address(RVA = "0xA3636C", Offset = "0xA3636C", VA = "0xA3636C")]
	private void ShowFeedbackEffect(int[] feedback)
	{
	}

	[Token(Token = "0x600007A")]
	[Address(RVA = "0xA364B8", Offset = "0xA364B8", VA = "0xA364B8")]
	public BhapticsVisualFeedbackOnMotors()
	{
	}
}
[Token(Token = "0x200001B")]
public class BhapticsVRBody : MonoBehaviour
{
	[Token(Token = "0x400006C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform camera;

	[Token(Token = "0x400006D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float distance;

	[Token(Token = "0x600007B")]
	[Address(RVA = "0xA364C0", Offset = "0xA364C0", VA = "0xA364C0")]
	private void Update()
	{
	}

	[Token(Token = "0x600007C")]
	[Address(RVA = "0xA364C4", Offset = "0xA364C4", VA = "0xA364C4")]
	private void FollowCamera()
	{
	}

	[Token(Token = "0x600007D")]
	[Address(RVA = "0xA365B0", Offset = "0xA365B0", VA = "0xA365B0")]
	public BhapticsVRBody()
	{
	}
}
[Token(Token = "0x200001C")]
[CreateAssetMenu(fileName = "Data", menuName = "Bhaptics/Create Config", order = 1)]
public class BhapticsConfig : ScriptableObject
{
	[Token(Token = "0x400006E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Windows Settings")]
	public bool launchPlayerIfNotRunning;

	[Token(Token = "0x400006F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Header("Android Settings")]
	public BhapticsAndroidManager AndroidManagerPrefab;

	[Token(Token = "0x4000070")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("If you set it true, you don't need to define permissions and external bHaptics VR Player(beta) on SideQuest will be required.")]
	public bool UseOnlyBackgroundMode;

	[Token(Token = "0x600007E")]
	[Address(RVA = "0xA365B8", Offset = "0xA365B8", VA = "0xA365B8")]
	public BhapticsConfig()
	{
	}
}
[Token(Token = "0x200001D")]
public class BhapticsLogger
{
	[Token(Token = "0x200001E")]
	public enum LogLevel
	{
		[Token(Token = "0x4000073")]
		Debug,
		[Token(Token = "0x4000074")]
		Info,
		[Token(Token = "0x4000075")]
		Error
	}

	[Token(Token = "0x4000071")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static LogLevel level;

	[Token(Token = "0x600007F")]
	[Address(RVA = "0xA365C8", Offset = "0xA365C8", VA = "0xA365C8")]
	public static void LogDebug(string format, params object[] args)
	{
	}

	[Token(Token = "0x6000080")]
	[Address(RVA = "0xA3116C", Offset = "0xA3116C", VA = "0xA3116C")]
	public static void LogInfo(string format, params object[] args)
	{
	}

	[Token(Token = "0x6000081")]
	[Address(RVA = "0xA36214", Offset = "0xA36214", VA = "0xA36214")]
	public static void LogError(string format, params object[] args)
	{
	}

	[Token(Token = "0x6000082")]
	[Address(RVA = "0xA366A0", Offset = "0xA366A0", VA = "0xA366A0")]
	public BhapticsLogger()
	{
	}
}
[Token(Token = "0x200001F")]
public class BhapticsManager
{
	[Token(Token = "0x4000076")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static IHaptic Haptic;

	[Token(Token = "0x4000077")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static bool Init;

	[Token(Token = "0x6000084")]
	[Address(RVA = "0xA31630", Offset = "0xA31630", VA = "0xA31630")]
	public static IHaptic GetHaptic()
	{
		return null;
	}

	[Token(Token = "0x6000085")]
	[Address(RVA = "0xA32898", Offset = "0xA32898", VA = "0xA32898")]
	public static void Initialize()
	{
	}

	[Token(Token = "0x6000086")]
	[Address(RVA = "0xA328A0", Offset = "0xA328A0", VA = "0xA328A0")]
	public static void Dispose()
	{
	}

	[Token(Token = "0x6000087")]
	[Address(RVA = "0xA366F4", Offset = "0xA366F4", VA = "0xA366F4")]
	public BhapticsManager()
	{
	}
}
[Token(Token = "0x2000020")]
public class BhapticsVisualizer : MonoBehaviour
{
	[Token(Token = "0x4000078")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private VisualFeedback[] visualFeedback;

	[Token(Token = "0x6000088")]
	[Address(RVA = "0xA366FC", Offset = "0xA366FC", VA = "0xA366FC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000089")]
	[Address(RVA = "0xA3674C", Offset = "0xA3674C", VA = "0xA3674C")]
	private void Update()
	{
	}

	[Token(Token = "0x600008A")]
	[Address(RVA = "0xA36890", Offset = "0xA36890", VA = "0xA36890")]
	public BhapticsVisualizer()
	{
	}
}
[Token(Token = "0x2000021")]
public class Bhaptics_Setup : MonoBehaviour
{
	[Token(Token = "0x4000079")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Bhaptics_Setup instance;

	[Token(Token = "0x400007A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public BhapticsConfig Config;

	[Token(Token = "0x400007B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public HapticClip[] hapticClipsOnAwake;

	[Token(Token = "0x600008B")]
	[Address(RVA = "0xA36898", Offset = "0xA36898", VA = "0xA36898")]
	private void Awake()
	{
	}

	[Token(Token = "0x600008C")]
	[Address(RVA = "0xA36C54", Offset = "0xA36C54", VA = "0xA36C54")]
	private void Start()
	{
	}

	[Token(Token = "0x600008D")]
	[Address(RVA = "0xA36D24", Offset = "0xA36D24", VA = "0xA36D24")]
	private void OnApplicationQuit()
	{
	}

	[Token(Token = "0x600008E")]
	[Address(RVA = "0xA3698C", Offset = "0xA3698C", VA = "0xA3698C")]
	private void Initialize()
	{
	}

	[Token(Token = "0x600008F")]
	[Address(RVA = "0xA36D28", Offset = "0xA36D28", VA = "0xA36D28")]
	public Bhaptics_Setup()
	{
	}
}
[Serializable]
[Token(Token = "0x2000022")]
public class EasyColliderRotateDuplicate
{
	[Token(Token = "0x2000023")]
	public enum ROTATE_AXIS
	{
		[Token(Token = "0x4000083")]
		X,
		[Token(Token = "0x4000084")]
		Y,
		[Token(Token = "0x4000085")]
		Z
	}

	[Token(Token = "0x400007C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool enabled;

	[Token(Token = "0x400007D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public ROTATE_AXIS axis;

	[Token(Token = "0x400007E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int NumberOfDuplications;

	[Token(Token = "0x400007F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float StartRotation;

	[Token(Token = "0x4000080")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float EndRotation;

	[Token(Token = "0x4000081")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject pivot;

	[Token(Token = "0x6000090")]
	[Address(RVA = "0xA36D30", Offset = "0xA36D30", VA = "0xA36D30")]
	public EasyColliderRotateDuplicate()
	{
	}
}
[Token(Token = "0x2000024")]
public class LightFlicker : MonoBehaviour
{
	[Token(Token = "0x4000086")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool flicker;

	[Token(Token = "0x4000087")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float flickerIntensity;

	[Token(Token = "0x4000088")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float baseIntensity;

	[Token(Token = "0x4000089")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Light lightComp;

	[Token(Token = "0x6000091")]
	[Address(RVA = "0xA36D48", Offset = "0xA36D48", VA = "0xA36D48")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000092")]
	[Address(RVA = "0xA36DB8", Offset = "0xA36DB8", VA = "0xA36DB8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000093")]
	[Address(RVA = "0xA36E4C", Offset = "0xA36E4C", VA = "0xA36E4C")]
	public LightFlicker()
	{
	}
}
[Token(Token = "0x2000025")]
public class MLPForceSaveProbes : MonoBehaviour
{
	[Token(Token = "0x6000094")]
	[Address(RVA = "0xA36E64", Offset = "0xA36E64", VA = "0xA36E64")]
	public MLPForceSaveProbes()
	{
	}
}
[Token(Token = "0x2000026")]
public class OvrAvatarTestDriver : OvrAvatarDriver
{
	[Token(Token = "0x400008A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Vector3 headPos;

	[Token(Token = "0x400008B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private Quaternion headRot;

	[Token(Token = "0x400008C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	private float voiceAmplitude;

	[Token(Token = "0x6000095")]
	[Address(RVA = "0xA36E6C", Offset = "0xA36E6C", VA = "0xA36E6C")]
	private ControllerPose GetMalibuControllerPose(OVRInput.Controller controller)
	{
		return default(ControllerPose);
	}

	[Token(Token = "0x6000096")]
	[Address(RVA = "0xA36FAC", Offset = "0xA36FAC", VA = "0xA36FAC")]
	private ControllerPose GetControllerPose(OVRInput.Controller controller)
	{
		return default(ControllerPose);
	}

	[Token(Token = "0x6000097")]
	[Address(RVA = "0xA372DC", Offset = "0xA372DC", VA = "0xA372DC")]
	private void CalculateCurrentPose()
	{
	}

	[Token(Token = "0x6000098")]
	[Address(RVA = "0xA37474", Offset = "0xA37474", VA = "0xA37474", Slot = "4")]
	public override void UpdateTransforms(IntPtr sdkAvatar)
	{
	}

	[Token(Token = "0x6000099")]
	[Address(RVA = "0xA374A0", Offset = "0xA374A0", VA = "0xA374A0")]
	public OvrAvatarTestDriver()
	{
	}
}
[Token(Token = "0x2000027")]
public class PoseEditHelper : MonoBehaviour
{
	[Token(Token = "0x400008D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform poseRoot;

	[Token(Token = "0x600009A")]
	[Address(RVA = "0xA37508", Offset = "0xA37508", VA = "0xA37508")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x600009B")]
	[Address(RVA = "0xA37584", Offset = "0xA37584", VA = "0xA37584")]
	private void DrawJoints(Transform joint)
	{
	}

	[Token(Token = "0x600009C")]
	[Address(RVA = "0xA376F4", Offset = "0xA376F4", VA = "0xA376F4")]
	public PoseEditHelper()
	{
	}
}
[Token(Token = "0x2000028")]
public class GazeTargetSpawner : MonoBehaviour
{
	[Token(Token = "0x400008E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject GazeTargetPrefab;

	[Token(Token = "0x400008F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int NumberOfDummyTargets;

	[Token(Token = "0x4000090")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int RadiusMultiplier;

	[Token(Token = "0x4000091")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private bool isVisible;

	[Token(Token = "0x17000007")]
	public bool IsVisible
	{
		[Token(Token = "0x600009D")]
		[Address(RVA = "0xA376FC", Offset = "0xA376FC", VA = "0xA376FC")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600009E")]
		[Address(RVA = "0xA37704", Offset = "0xA37704", VA = "0xA37704")]
		set
		{
		}
	}

	[Token(Token = "0x600009F")]
	[Address(RVA = "0xA37828", Offset = "0xA37828", VA = "0xA37828")]
	private void Start()
	{
	}

	[Token(Token = "0x60000A0")]
	[Address(RVA = "0xA37A18", Offset = "0xA37A18", VA = "0xA37A18")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x60000A1")]
	[Address(RVA = "0xA37A20", Offset = "0xA37A20", VA = "0xA37A20")]
	public GazeTargetSpawner()
	{
	}
}
[Token(Token = "0x2000029")]
public class RemoteLoopbackManager : MonoBehaviour
{
	[Token(Token = "0x200002A")]
	private class PacketLatencyPair
	{
		[Token(Token = "0x4000097")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public byte[] PacketData;

		[Token(Token = "0x4000098")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float FakeLatency;

		[Token(Token = "0x60000A8")]
		[Address(RVA = "0xA38610", Offset = "0xA38610", VA = "0xA38610")]
		public PacketLatencyPair()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x200002B")]
	public class SimulatedLatencySettings
	{
		[Token(Token = "0x4000099")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Range(0f, 0.5f)]
		public float FakeLatencyMax;

		[Token(Token = "0x400009A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[Range(0f, 0.5f)]
		public float FakeLatencyMin;

		[Token(Token = "0x400009B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0f, 1f)]
		public float LatencyWeight;

		[Token(Token = "0x400009C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Range(0f, 10f)]
		public int MaxSamples;

		[Token(Token = "0x400009D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal float AverageWindow;

		[Token(Token = "0x400009E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal float LatencySum;

		[Token(Token = "0x400009F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal LinkedList<float> LatencyValues;

		[Token(Token = "0x60000A9")]
		[Address(RVA = "0xA38618", Offset = "0xA38618", VA = "0xA38618")]
		public float NextValue()
		{
			return default(float);
		}

		[Token(Token = "0x60000AA")]
		[Address(RVA = "0xA387F4", Offset = "0xA387F4", VA = "0xA387F4")]
		public SimulatedLatencySettings()
		{
		}
	}

	[Token(Token = "0x4000092")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OvrAvatar LocalAvatar;

	[Token(Token = "0x4000093")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public OvrAvatar LoopbackAvatar;

	[Token(Token = "0x4000094")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public SimulatedLatencySettings LatencySettings;

	[Token(Token = "0x4000095")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int PacketSequence;

	[Token(Token = "0x4000096")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private LinkedList<PacketLatencyPair> packetQueue;

	[Token(Token = "0x60000A2")]
	[Address(RVA = "0xA37A34", Offset = "0xA37A34", VA = "0xA37A34")]
	private void Start()
	{
	}

	[Token(Token = "0x60000A3")]
	[Address(RVA = "0xA37B78", Offset = "0xA37B78", VA = "0xA37B78")]
	private void OnLocalAvatarPacketRecorded(object sender, OvrAvatar.PacketEventArgs args)
	{
	}

	[Token(Token = "0x60000A4")]
	[Address(RVA = "0xA37F68", Offset = "0xA37F68", VA = "0xA37F68")]
	private void Update()
	{
	}

	[Token(Token = "0x60000A5")]
	[Address(RVA = "0xA37EC8", Offset = "0xA37EC8", VA = "0xA37EC8")]
	private void SendPacketData(byte[] data)
	{
	}

	[Token(Token = "0x60000A6")]
	[Address(RVA = "0xA382F4", Offset = "0xA382F4", VA = "0xA382F4")]
	private void ReceivePacketData(byte[] data)
	{
	}

	[Token(Token = "0x60000A7")]
	[Address(RVA = "0xA3874C", Offset = "0xA3874C", VA = "0xA3874C")]
	public RemoteLoopbackManager()
	{
	}
}
[Token(Token = "0x200002C")]
public class P2PManager
{
	[Token(Token = "0x200002D")]
	private enum MessageType : byte
	{
		[Token(Token = "0x40000A1")]
		Update = 1
	}

	[Token(Token = "0x60000AB")]
	[Address(RVA = "0xA38888", Offset = "0xA38888", VA = "0xA38888")]
	public P2PManager()
	{
	}

	[Token(Token = "0x60000AC")]
	[Address(RVA = "0xA38954", Offset = "0xA38954", VA = "0xA38954")]
	public void ConnectTo(ulong userID)
	{
	}

	[Token(Token = "0x60000AD")]
	[Address(RVA = "0xA38B94", Offset = "0xA38B94", VA = "0xA38B94")]
	public void Disconnect(ulong userID)
	{
	}

	[Token(Token = "0x60000AE")]
	[Address(RVA = "0xA38CDC", Offset = "0xA38CDC", VA = "0xA38CDC")]
	private void PeerConnectRequestCallback(Message<NetworkingPeer> msg)
	{
	}

	[Token(Token = "0x60000AF")]
	[Address(RVA = "0xA38E2C", Offset = "0xA38E2C", VA = "0xA38E2C")]
	private void ConnectionStateChangedCallback(Message<NetworkingPeer> msg)
	{
	}

	[Token(Token = "0x60000B0")]
	[Address(RVA = "0xA39018", Offset = "0xA39018", VA = "0xA39018")]
	public void SendAvatarUpdate(ulong userID, Transform rootTransform, uint sequence, byte[] avatarPacket)
	{
	}

	[Token(Token = "0x60000B1")]
	[Address(RVA = "0xA393D0", Offset = "0xA393D0", VA = "0xA393D0")]
	public void GetRemotePackets()
	{
	}

	[Token(Token = "0x60000B2")]
	[Address(RVA = "0xA39658", Offset = "0xA39658", VA = "0xA39658")]
	public void processAvatarPacket(RemotePlayer remote, ref byte[] packet, ref int offset)
	{
	}

	[Token(Token = "0x60000B3")]
	[Address(RVA = "0xA391DC", Offset = "0xA391DC", VA = "0xA391DC")]
	private void PackByte(byte b, byte[] buf, ref int offset)
	{
	}

	[Token(Token = "0x60000B4")]
	[Address(RVA = "0xA395A4", Offset = "0xA395A4", VA = "0xA395A4")]
	private byte ReadByte(byte[] buf, ref int offset)
	{
		return default(byte);
	}

	[Token(Token = "0x60000B5")]
	[Address(RVA = "0xA392A8", Offset = "0xA392A8", VA = "0xA392A8")]
	private void PackFloat(float f, byte[] buf, ref int offset)
	{
	}

	[Token(Token = "0x60000B6")]
	[Address(RVA = "0xA39880", Offset = "0xA39880", VA = "0xA39880")]
	private float ReadFloat(byte[] buf, ref int offset)
	{
		return default(float);
	}

	[Token(Token = "0x60000B7")]
	[Address(RVA = "0xA39218", Offset = "0xA39218", VA = "0xA39218")]
	private void PackULong(ulong u, byte[] buf, ref int offset)
	{
	}

	[Token(Token = "0x60000B8")]
	[Address(RVA = "0xA395DC", Offset = "0xA395DC", VA = "0xA395DC")]
	private ulong ReadULong(byte[] buf, ref int offset)
	{
		return default(ulong);
	}

	[Token(Token = "0x60000B9")]
	[Address(RVA = "0xA39340", Offset = "0xA39340", VA = "0xA39340")]
	private void PackUInt32(uint u, byte[] buf, ref int offset)
	{
	}

	[Token(Token = "0x60000BA")]
	[Address(RVA = "0xA398FC", Offset = "0xA398FC", VA = "0xA398FC")]
	private uint ReadUInt32(byte[] buf, ref int offset)
	{
		return default(uint);
	}
}
[Token(Token = "0x200002E")]
public class PlayerController : SocialPlatformManager
{
	[Token(Token = "0x40000A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public Camera spyCamera;

	[Token(Token = "0x40000A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private GameObject cameraRig;

	[Token(Token = "0x40000A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private bool showUI;

	[Token(Token = "0x60000BB")]
	[Address(RVA = "0xA39978", Offset = "0xA39978", VA = "0xA39978", Slot = "5")]
	public override void Awake()
	{
	}

	[Token(Token = "0x60000BC")]
	[Address(RVA = "0xA39CF8", Offset = "0xA39CF8", VA = "0xA39CF8", Slot = "6")]
	public override void Start()
	{
	}

	[Token(Token = "0x60000BD")]
	[Address(RVA = "0xA39D1C", Offset = "0xA39D1C", VA = "0xA39D1C", Slot = "4")]
	public override void Update()
	{
	}

	[Token(Token = "0x60000BE")]
	[Address(RVA = "0xA3A0BC", Offset = "0xA3A0BC", VA = "0xA3A0BC")]
	private void checkInput()
	{
	}

	[Token(Token = "0x60000BF")]
	[Address(RVA = "0xA3A21C", Offset = "0xA3A21C", VA = "0xA3A21C")]
	private void ToggleCamera()
	{
	}

	[Token(Token = "0x60000C0")]
	[Address(RVA = "0xA3A298", Offset = "0xA3A298", VA = "0xA3A298")]
	private void ToggleUI()
	{
	}

	[Token(Token = "0x60000C1")]
	[Address(RVA = "0xA3A384", Offset = "0xA3A384", VA = "0xA3A384")]
	public PlayerController()
	{
	}
}
[Token(Token = "0x200002F")]
public class RemotePlayer
{
	[Token(Token = "0x40000A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ulong remoteUserID;

	[Token(Token = "0x40000A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool stillInRoom;

	[Token(Token = "0x40000A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public PeerConnectionState p2pConnectionState;

	[Token(Token = "0x40000A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public PeerConnectionState voipConnectionState;

	[Token(Token = "0x40000A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public OvrAvatar RemoteAvatar;

	[Token(Token = "0x40000AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector3 receivedRootPosition;

	[Token(Token = "0x40000AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public Vector3 receivedRootPositionPrior;

	[Token(Token = "0x40000AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Quaternion receivedRootRotation;

	[Token(Token = "0x40000AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Quaternion receivedRootRotationPrior;

	[Token(Token = "0x40000AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public VoipAudioSourceHiLevel voipSource;

	[Token(Token = "0x60000C2")]
	[Address(RVA = "0xA3A45C", Offset = "0xA3A45C", VA = "0xA3A45C")]
	public RemotePlayer()
	{
	}
}
[Token(Token = "0x2000030")]
public class RoomManager
{
	[Token(Token = "0x40000AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ulong roomID;

	[Token(Token = "0x40000B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ulong invitedRoomID;

	[Token(Token = "0x40000B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool amIServer;

	[Token(Token = "0x40000B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	private bool startupDone;

	[Token(Token = "0x60000C3")]
	[Address(RVA = "0xA3A464", Offset = "0xA3A464", VA = "0xA3A464")]
	public RoomManager()
	{
	}

	[Token(Token = "0x60000C4")]
	[Address(RVA = "0xA3A548", Offset = "0xA3A548", VA = "0xA3A548")]
	private void AcceptingInviteCallback(Message<string> msg)
	{
	}

	[Token(Token = "0x60000C5")]
	[Address(RVA = "0xA3A748", Offset = "0xA3A748", VA = "0xA3A748")]
	public bool CheckForInvite()
	{
		return default(bool);
	}

	[Token(Token = "0x60000C6")]
	[Address(RVA = "0xA3A860", Offset = "0xA3A860", VA = "0xA3A860")]
	public void CreateRoom()
	{
	}

	[Token(Token = "0x60000C7")]
	[Address(RVA = "0xA3A918", Offset = "0xA3A918", VA = "0xA3A918")]
	private void CreateAndJoinPrivateRoomCallback(Message<Room> msg)
	{
	}

	[Token(Token = "0x60000C8")]
	[Address(RVA = "0xA3AD04", Offset = "0xA3AD04", VA = "0xA3AD04")]
	private void OnLaunchInviteWorkflowComplete(Message msg)
	{
	}

	[Token(Token = "0x60000C9")]
	[Address(RVA = "0xA3A774", Offset = "0xA3A774", VA = "0xA3A774")]
	public void JoinExistingRoom(ulong roomID)
	{
	}

	[Token(Token = "0x60000CA")]
	[Address(RVA = "0xA3AD7C", Offset = "0xA3AD7C", VA = "0xA3AD7C")]
	private void JoinRoomCallback(Message<Room> msg)
	{
	}

	[Token(Token = "0x60000CB")]
	[Address(RVA = "0xA3B494", Offset = "0xA3B494", VA = "0xA3B494")]
	private void RoomUpdateCallback(Message<Room> msg)
	{
	}

	[Token(Token = "0x60000CC")]
	[Address(RVA = "0xA3B768", Offset = "0xA3B768", VA = "0xA3B768")]
	public void LeaveCurrentRoom()
	{
	}

	[Token(Token = "0x60000CD")]
	[Address(RVA = "0xA3B044", Offset = "0xA3B044", VA = "0xA3B044")]
	private void ProcessRoomData(Message<Room> msg)
	{
	}
}
[Token(Token = "0x2000031")]
public class SocialPlatformManager : MonoBehaviour
{
	[Token(Token = "0x2000032")]
	public enum State
	{
		[Token(Token = "0x40000D9")]
		INITIALIZING,
		[Token(Token = "0x40000DA")]
		CHECKING_LAUNCH_STATE,
		[Token(Token = "0x40000DB")]
		CREATING_A_ROOM,
		[Token(Token = "0x40000DC")]
		WAITING_IN_A_ROOM,
		[Token(Token = "0x40000DD")]
		JOINING_A_ROOM,
		[Token(Token = "0x40000DE")]
		CONNECTED_IN_A_ROOM,
		[Token(Token = "0x40000DF")]
		LEAVING_A_ROOM,
		[Token(Token = "0x40000E0")]
		SHUTDOWN
	}

	[Token(Token = "0x40000B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly Vector3 START_ROTATION_ONE;

	[Token(Token = "0x40000B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static readonly Vector3 START_POSITION_ONE;

	[Token(Token = "0x40000B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static readonly Vector3 START_ROTATION_TWO;

	[Token(Token = "0x40000B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private static readonly Vector3 START_POSITION_TWO;

	[Token(Token = "0x40000B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private static readonly Vector3 START_ROTATION_THREE;

	[Token(Token = "0x40000B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private static readonly Vector3 START_POSITION_THREE;

	[Token(Token = "0x40000B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private static readonly Vector3 START_ROTATION_FOUR;

	[Token(Token = "0x40000BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private static readonly Vector3 START_POSITION_FOUR;

	[Token(Token = "0x40000BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private static readonly Color BLACK;

	[Token(Token = "0x40000BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private static readonly Color WHITE;

	[Token(Token = "0x40000BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private static readonly Color CYAN;

	[Token(Token = "0x40000BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private static readonly Color BLUE;

	[Token(Token = "0x40000BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private static readonly Color GREEN;

	[Token(Token = "0x40000C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float voiceCurrent;

	[Token(Token = "0x40000C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private uint packetSequence;

	[Token(Token = "0x40000C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public OvrAvatar localAvatarPrefab;

	[Token(Token = "0x40000C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public OvrAvatar remoteAvatarPrefab;

	[Token(Token = "0x40000C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject helpPanel;

	[Token(Token = "0x40000C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected MeshRenderer helpMesh;

	[Token(Token = "0x40000C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Material riftMaterial;

	[Token(Token = "0x40000C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Material gearMaterial;

	[Token(Token = "0x40000C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	protected OvrAvatar localAvatar;

	[Token(Token = "0x40000C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	protected GameObject localTrackingSpace;

	[Token(Token = "0x40000CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	protected GameObject localPlayerHead;

	[Token(Token = "0x40000CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	protected Dictionary<ulong, RemotePlayer> remoteUsers;

	[Token(Token = "0x40000CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public GameObject roomSphere;

	[Token(Token = "0x40000CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	protected MeshRenderer sphereMesh;

	[Token(Token = "0x40000CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public GameObject roomFloor;

	[Token(Token = "0x40000CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	protected MeshRenderer floorMesh;

	[Token(Token = "0x40000D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	protected State currentState;

	[Token(Token = "0x40000D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	protected static SocialPlatformManager s_instance;

	[Token(Token = "0x40000D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	protected RoomManager roomManager;

	[Token(Token = "0x40000D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	protected P2PManager p2pManager;

	[Token(Token = "0x40000D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	protected VoipManager voipManager;

	[Token(Token = "0x40000D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	protected ulong myID;

	[Token(Token = "0x40000D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	protected string myOculusID;

	[Token(Token = "0x40000D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public static readonly float VOIP_SCALE;

	[Token(Token = "0x17000008")]
	public static State CurrentState
	{
		[Token(Token = "0x60000DA")]
		[Address(RVA = "0xA3D4B4", Offset = "0xA3D4B4", VA = "0xA3D4B4")]
		get
		{
			return default(State);
		}
	}

	[Token(Token = "0x17000009")]
	public static ulong MyID
	{
		[Token(Token = "0x60000DB")]
		[Address(RVA = "0xA38A1C", Offset = "0xA38A1C", VA = "0xA38A1C")]
		get
		{
			return default(ulong);
		}
	}

	[Token(Token = "0x1700000A")]
	public static string MyOculusID
	{
		[Token(Token = "0x60000DC")]
		[Address(RVA = "0xA3D518", Offset = "0xA3D518", VA = "0xA3D518")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60000CE")]
	[Address(RVA = "0xA39D34", Offset = "0xA39D34", VA = "0xA39D34", Slot = "4")]
	public virtual void Update()
	{
	}

	[Token(Token = "0x60000CF")]
	[Address(RVA = "0xA399A4", Offset = "0xA399A4", VA = "0xA399A4", Slot = "5")]
	public virtual void Awake()
	{
	}

	[Token(Token = "0x60000D0")]
	[Address(RVA = "0xA3C1F4", Offset = "0xA3C1F4", VA = "0xA3C1F4")]
	private void InitCallback(Message<PlatformInitialize> msg)
	{
	}

	[Token(Token = "0x60000D1")]
	[Address(RVA = "0xA39D18", Offset = "0xA39D18", VA = "0xA39D18", Slot = "6")]
	public virtual void Start()
	{
	}

	[Token(Token = "0x60000D2")]
	[Address(RVA = "0xA3C37C", Offset = "0xA3C37C", VA = "0xA3C37C")]
	private void IsEntitledCallback(Message msg)
	{
	}

	[Token(Token = "0x60000D3")]
	[Address(RVA = "0xA3C474", Offset = "0xA3C474", VA = "0xA3C474")]
	private void GetLoggedInUserCallback(Message<Oculus.Platform.Models.User> msg)
	{
	}

	[Token(Token = "0x60000D4")]
	[Address(RVA = "0xA3CC04", Offset = "0xA3CC04", VA = "0xA3CC04")]
	private void GetLoggedInUserFriendsAndRoomsCallback(Message<UserAndRoomList> msg)
	{
	}

	[Token(Token = "0x60000D5")]
	[Address(RVA = "0xA3D01C", Offset = "0xA3D01C", VA = "0xA3D01C")]
	public void OnLocalAvatarPacketRecorded(object sender, OvrAvatar.PacketEventArgs args)
	{
	}

	[Token(Token = "0x60000D6")]
	[Address(RVA = "0xA3D240", Offset = "0xA3D240", VA = "0xA3D240")]
	public void OnApplicationQuit()
	{
	}

	[Token(Token = "0x60000D7")]
	[Address(RVA = "0xA3D44C", Offset = "0xA3D44C", VA = "0xA3D44C")]
	public void AddUser(ulong userID, ref RemotePlayer remoteUser)
	{
	}

	[Token(Token = "0x60000D8")]
	[Address(RVA = "0xA3C080", Offset = "0xA3C080", VA = "0xA3C080")]
	public void LogOutputLine(string line)
	{
	}

	[Token(Token = "0x60000D9")]
	[Address(RVA = "0xA3A69C", Offset = "0xA3A69C", VA = "0xA3A69C")]
	public static void TerminateWithError(Message msg)
	{
	}

	[Token(Token = "0x60000DD")]
	[Address(RVA = "0xA3AA04", Offset = "0xA3AA04", VA = "0xA3AA04")]
	public static void TransitionToState(State newState)
	{
	}

	[Token(Token = "0x60000DE")]
	[Address(RVA = "0xA3D61C", Offset = "0xA3D61C", VA = "0xA3D61C")]
	private static void SetSphereColorForState()
	{
	}

	[Token(Token = "0x60000DF")]
	[Address(RVA = "0xA3AC44", Offset = "0xA3AC44", VA = "0xA3AC44")]
	public static void SetFloorColorForState(bool host)
	{
	}

	[Token(Token = "0x60000E0")]
	[Address(RVA = "0xA3B7D0", Offset = "0xA3B7D0", VA = "0xA3B7D0")]
	public static void MarkAllRemoteUsersAsNotInRoom()
	{
	}

	[Token(Token = "0x60000E1")]
	[Address(RVA = "0xA3BBAC", Offset = "0xA3BBAC", VA = "0xA3BBAC")]
	public static void MarkRemoteUserInRoom(ulong userID)
	{
	}

	[Token(Token = "0x60000E2")]
	[Address(RVA = "0xA3BC8C", Offset = "0xA3BC8C", VA = "0xA3BC8C")]
	public static void ForgetRemoteUsersNotInRoom()
	{
	}

	[Token(Token = "0x60000E3")]
	[Address(RVA = "0xA38AE0", Offset = "0xA38AE0", VA = "0xA38AE0")]
	public static void LogOutput(string line)
	{
	}

	[Token(Token = "0x60000E4")]
	[Address(RVA = "0xA3B954", Offset = "0xA3B954", VA = "0xA3B954")]
	public static bool IsUserInRoom(ulong userID)
	{
		return default(bool);
	}

	[Token(Token = "0x60000E5")]
	[Address(RVA = "0xA3B9DC", Offset = "0xA3B9DC", VA = "0xA3B9DC")]
	public static void AddRemoteUser(ulong userID)
	{
	}

	[Token(Token = "0x60000E6")]
	[Address(RVA = "0xA3D7A0", Offset = "0xA3D7A0", VA = "0xA3D7A0")]
	public static void RemoveRemoteUser(ulong userID)
	{
	}

	[Token(Token = "0x60000E7")]
	[Address(RVA = "0xA3DA64", Offset = "0xA3DA64", VA = "0xA3DA64")]
	public void UpdateVoiceData(short[] pcmData, int numChannels)
	{
	}

	[Token(Token = "0x60000E8")]
	[Address(RVA = "0xA3C008", Offset = "0xA3C008", VA = "0xA3C008")]
	[MonoPInvokeCallback(typeof(CAPI.FilterCallback))]
	public static void MicFilter(short[] pcmData, UIntPtr pcmDataLength, int frequency, int numChannels)
	{
	}

	[Token(Token = "0x60000E9")]
	[Address(RVA = "0xA38C04", Offset = "0xA38C04", VA = "0xA38C04")]
	public static RemotePlayer GetRemoteUser(ulong userID)
	{
		return null;
	}

	[Token(Token = "0x60000EA")]
	[Address(RVA = "0xA3A3E0", Offset = "0xA3A3E0", VA = "0xA3A3E0")]
	public SocialPlatformManager()
	{
	}
}
[Token(Token = "0x2000033")]
public class VoipManager
{
	[Token(Token = "0x60000EC")]
	[Address(RVA = "0xA3C128", Offset = "0xA3C128", VA = "0xA3C128")]
	public VoipManager()
	{
	}

	[Token(Token = "0x60000ED")]
	[Address(RVA = "0xA3D99C", Offset = "0xA3D99C", VA = "0xA3D99C")]
	public void ConnectTo(ulong userID)
	{
	}

	[Token(Token = "0x60000EE")]
	[Address(RVA = "0xA3D3DC", Offset = "0xA3D3DC", VA = "0xA3D3DC")]
	public void Disconnect(ulong userID)
	{
	}

	[Token(Token = "0x60000EF")]
	[Address(RVA = "0xA3DD90", Offset = "0xA3DD90", VA = "0xA3DD90")]
	private void VoipConnectRequestCallback(Message<NetworkingPeer> msg)
	{
	}

	[Token(Token = "0x60000F0")]
	[Address(RVA = "0xA3DEE0", Offset = "0xA3DEE0", VA = "0xA3DEE0")]
	private void VoipStateChangedCallback(Message<NetworkingPeer> msg)
	{
	}
}
[Token(Token = "0x2000034")]
public class GazeTarget : MonoBehaviour
{
	[Token(Token = "0x40000E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ovrAvatarGazeTargetType Type;

	[Token(Token = "0x40000E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static ovrAvatarGazeTargets RuntimeTargetList;

	[Token(Token = "0x60000F1")]
	[Address(RVA = "0xA3E0CC", Offset = "0xA3E0CC", VA = "0xA3E0CC")]
	static GazeTarget()
	{
	}

	[Token(Token = "0x60000F2")]
	[Address(RVA = "0xA3E13C", Offset = "0xA3E13C", VA = "0xA3E13C")]
	private void Start()
	{
	}

	[Token(Token = "0x60000F3")]
	[Address(RVA = "0xA3E280", Offset = "0xA3E280", VA = "0xA3E280")]
	private void Update()
	{
	}

	[Token(Token = "0x60000F4")]
	[Address(RVA = "0xA3E2D4", Offset = "0xA3E2D4", VA = "0xA3E2D4")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60000F5")]
	[Address(RVA = "0xA3E16C", Offset = "0xA3E16C", VA = "0xA3E16C")]
	private void UpdateGazeTarget()
	{
	}

	[Token(Token = "0x60000F6")]
	[Address(RVA = "0xA3E384", Offset = "0xA3E384", VA = "0xA3E384")]
	private ovrAvatarGazeTarget CreateOvrGazeTarget(uint targetId, Vector3 targetPosition, ovrAvatarGazeTargetType targetType)
	{
		return default(ovrAvatarGazeTarget);
	}

	[Token(Token = "0x60000F7")]
	[Address(RVA = "0xA3E39C", Offset = "0xA3E39C", VA = "0xA3E39C")]
	public GazeTarget()
	{
	}
}
[Serializable]
[Token(Token = "0x2000035")]
public class AvatarLayer
{
	[Token(Token = "0x40000E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int layerIndex;

	[Token(Token = "0x60000F8")]
	[Address(RVA = "0xA3E3A4", Offset = "0xA3E3A4", VA = "0xA3E3A4")]
	public AvatarLayer()
	{
	}
}
[Serializable]
[Token(Token = "0x2000036")]
public class PacketRecordSettings
{
	[Token(Token = "0x40000E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	internal bool RecordingFrames;

	[Token(Token = "0x40000E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float UpdateRate;

	[Token(Token = "0x40000E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	internal float AccumulatedTime;

	[Token(Token = "0x60000F9")]
	[Address(RVA = "0xA3E3AC", Offset = "0xA3E3AC", VA = "0xA3E3AC")]
	public PacketRecordSettings()
	{
	}
}
[Token(Token = "0x2000037")]
public class OvrAvatar : MonoBehaviour
{
	[Token(Token = "0x2000038")]
	public class PacketEventArgs : EventArgs
	{
		[Token(Token = "0x4000140")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly OvrAvatarPacket Packet;

		[Token(Token = "0x600012E")]
		[Address(RVA = "0xA412F0", Offset = "0xA412F0", VA = "0xA412F0")]
		public PacketEventArgs(OvrAvatarPacket packet)
		{
		}
	}

	[Token(Token = "0x2000039")]
	public enum HandType
	{
		[Token(Token = "0x4000142")]
		Right,
		[Token(Token = "0x4000143")]
		Left,
		[Token(Token = "0x4000144")]
		Max
	}

	[Token(Token = "0x200003A")]
	public enum HandJoint
	{
		[Token(Token = "0x4000146")]
		HandBase,
		[Token(Token = "0x4000147")]
		IndexBase,
		[Token(Token = "0x4000148")]
		IndexTip,
		[Token(Token = "0x4000149")]
		ThumbBase,
		[Token(Token = "0x400014A")]
		ThumbTip,
		[Token(Token = "0x400014B")]
		Max
	}

	[Token(Token = "0x200003B")]
	[CompilerGenerated]
	private sealed class <WaitForMouthAudioSource>d__137 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400014C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400014D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400014E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public OvrAvatar <>4__this;

		[Token(Token = "0x1700000B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000132")]
			[Address(RVA = "0xA434A0", Offset = "0xA434A0", VA = "0xA434A0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700000C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000134")]
			[Address(RVA = "0xA434E8", Offset = "0xA434E8", VA = "0xA434E8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600012F")]
		[Address(RVA = "0xA42FB0", Offset = "0xA42FB0", VA = "0xA42FB0")]
		[DebuggerHidden]
		public <WaitForMouthAudioSource>d__137(int <>1__state)
		{
		}

		[Token(Token = "0x6000130")]
		[Address(RVA = "0xA43304", Offset = "0xA43304", VA = "0xA43304", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000131")]
		[Address(RVA = "0xA43308", Offset = "0xA43308", VA = "0xA43308", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000133")]
		[Address(RVA = "0xA434A8", Offset = "0xA434A8", VA = "0xA434A8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40000E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Avatar")]
	public IntPtr sdkAvatar;

	[Token(Token = "0x40000E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string oculusUserID;

	[Token(Token = "0x40000E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public OvrAvatarDriver Driver;

	[Token(Token = "0x40000EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Header("Capabilities")]
	public bool EnableBody;

	[Token(Token = "0x40000EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	public bool EnableHands;

	[Token(Token = "0x40000EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
	public bool EnableBase;

	[Token(Token = "0x40000ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x33")]
	public bool EnableExpressive;

	[Token(Token = "0x40000EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[Header("Network")]
	public bool RecordPackets;

	[Token(Token = "0x40000EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
	public bool UseSDKPackets;

	[Token(Token = "0x40000F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public PacketRecordSettings PacketSettings;

	[Token(Token = "0x40000F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Header("Visibility")]
	public bool StartWithControllers;

	[Token(Token = "0x40000F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public AvatarLayer FirstPersonLayer;

	[Token(Token = "0x40000F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public AvatarLayer ThirdPersonLayer;

	[Token(Token = "0x40000F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public bool ShowFirstPerson;

	[Token(Token = "0x40000F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
	public bool ShowThirdPerson;

	[Token(Token = "0x40000F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	internal ovrAvatarCapabilities Capabilities;

	[Token(Token = "0x40000F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Header("Performance")]
	[Tooltip("LOD mesh complexity and texture resolution. Highest LOD recommended on PC and simple mobile apps. Medium LOD recommended on mobile devices or for background characters on PC. Lowest LOD recommended for background characters on mobile.")]
	[SerializeField]
	internal ovrAvatarAssetLevelOfDetail LevelOfDetail;

	[Token(Token = "0x40000F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[Tooltip("Enable to use combined meshes to reduce draw calls. Currently only available on mobile devices. Will be forced to false on PC.")]
	private bool CombineMeshes;

	[Token(Token = "0x40000F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
	[Tooltip("Enable to use transparent queue, disable to use geometry queue. Requires restart to take effect.")]
	public bool UseTransparentRenderQueue;

	[Token(Token = "0x40000FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[Header("Shaders")]
	public Shader Monochrome_SurfaceShader;

	[Token(Token = "0x40000FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Shader Monochrome_SurfaceShader_SelfOccluding;

	[Token(Token = "0x40000FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Shader Monochrome_SurfaceShader_PBS;

	[Token(Token = "0x40000FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Shader Skinshaded_SurfaceShader_SingleComponent;

	[Token(Token = "0x40000FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Shader Skinshaded_VertFrag_SingleComponent;

	[Token(Token = "0x40000FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Shader Skinshaded_VertFrag_CombinedMesh;

	[Token(Token = "0x4000100")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Shader Skinshaded_Expressive_SurfaceShader_SingleComponent;

	[Token(Token = "0x4000101")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Shader Skinshaded_Expressive_VertFrag_SingleComponent;

	[Token(Token = "0x4000102")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public Shader Skinshaded_Expressive_VertFrag_CombinedMesh;

	[Token(Token = "0x4000103")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public Shader Loader_VertFrag_CombinedMesh;

	[Token(Token = "0x4000104")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public Shader EyeLens;

	[Token(Token = "0x4000105")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public Shader ControllerShader;

	[Token(Token = "0x4000106")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[Header("Other")]
	public bool CanOwnMicrophone;

	[Token(Token = "0x4000107")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC9")]
	[Tooltip("Enable laughter detection and animation as part of OVRLipSync.")]
	public bool EnableLaughter;

	[Token(Token = "0x4000108")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public GameObject MouthAnchor;

	[Token(Token = "0x4000109")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public Transform LeftHandCustomPose;

	[Token(Token = "0x400010A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public Transform RightHandCustomPose;

	[Token(Token = "0x400010B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private HashSet<ulong> assetLoadingIds;

	[Token(Token = "0x400010C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private bool assetsFinishedLoading;

	[Token(Token = "0x400010D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private OvrAvatarMaterialManager materialManager;

	[Token(Token = "0x400010E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private bool waitingForCombinedMesh;

	[Token(Token = "0x400010F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static bool doneExpressiveGlobalInit;

	[Token(Token = "0x4000110")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	private Vector4 clothingAlphaOffset;

	[Token(Token = "0x4000111")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private ulong clothingAlphaTexture;

	[Token(Token = "0x4000112")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private OVRLipSyncMicInput micInput;

	[Token(Token = "0x4000113")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private OVRLipSyncContext lipsyncContext;

	[Token(Token = "0x4000114")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private OVRLipSync.Frame currentFrame;

	[Token(Token = "0x4000115")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private float[] visemes;

	[Token(Token = "0x4000116")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private AudioSource audioSource;

	[Token(Token = "0x4000117")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private ONSPAudioSource spatializedSource;

	[Token(Token = "0x4000118")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	private List<float[]> voiceUpdates;

	[Token(Token = "0x4000119")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static ovrAvatarVisemes RuntimeVisemes;

	[Token(Token = "0x400011A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	private Transform cachedLeftHandCustomPose;

	[Token(Token = "0x400011B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	private Transform[] cachedCustomLeftHandJoints;

	[Token(Token = "0x400011C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	private ovrAvatarTransform[] cachedLeftHandTransforms;

	[Token(Token = "0x400011D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	private Transform cachedRightHandCustomPose;

	[Token(Token = "0x400011E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	private Transform[] cachedCustomRightHandJoints;

	[Token(Token = "0x400011F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	private ovrAvatarTransform[] cachedRightHandTransforms;

	[Token(Token = "0x4000120")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	private bool showLeftController;

	[Token(Token = "0x4000121")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x189")]
	private bool showRightController;

	[Token(Token = "0x4000122")]
	private const bool USE_MOBILE_TEXTURE_FORMAT = true;

	[Token(Token = "0x4000123")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static readonly Vector3 MOUTH_HEAD_OFFSET;

	[Token(Token = "0x4000124")]
	private const string MOUTH_HELPER_NAME = "MouthAnchor";

	[Token(Token = "0x4000125")]
	private const int VISEME_COUNT = 16;

	[Token(Token = "0x4000126")]
	private const float ACTION_UNIT_ONSET_SPEED = 30f;

	[Token(Token = "0x4000127")]
	private const float ACTION_UNIT_FALLOFF_SPEED = 20f;

	[Token(Token = "0x4000128")]
	private const float VISEME_LEVEL_MULTIPLIER = 1.5f;

	[Token(Token = "0x4000129")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	internal ulong oculusUserIDInternal;

	[Token(Token = "0x400012A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	internal OvrAvatarBase Base;

	[Token(Token = "0x400012B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	internal OvrAvatarTouchController ControllerLeft;

	[Token(Token = "0x400012C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	internal OvrAvatarTouchController ControllerRight;

	[Token(Token = "0x400012D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	internal OvrAvatarBody Body;

	[Token(Token = "0x400012E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	internal OvrAvatarHand HandLeft;

	[Token(Token = "0x400012F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	internal OvrAvatarHand HandRight;

	[Token(Token = "0x4000130")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
	internal ovrAvatarLookAndFeelVersion LookAndFeelVersion;

	[Token(Token = "0x4000131")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
	internal ovrAvatarLookAndFeelVersion FallbackLookAndFeelVersion;

	[Token(Token = "0x4000132")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
	private OvrAvatarPacket CurrentUnityPacket;

	[Token(Token = "0x4000133")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
	public EventHandler<PacketEventArgs> PacketRecorded;

	[Token(Token = "0x4000134")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static string[,] HandJoints;

	[Token(Token = "0x4000135")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private static Vector3 MOUTH_POSITION_OFFSET;

	[Token(Token = "0x4000136")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private static string VOICE_PROPERTY;

	[Token(Token = "0x4000137")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private static string MOUTH_POSITION_PROPERTY;

	[Token(Token = "0x4000138")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private static string MOUTH_DIRECTION_PROPERTY;

	[Token(Token = "0x4000139")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private static string MOUTH_SCALE_PROPERTY;

	[Token(Token = "0x400013A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private static float MOUTH_SCALE_GLOBAL;

	[Token(Token = "0x400013B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private static float MOUTH_MAX_GLOBAL;

	[Token(Token = "0x400013C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private static string NECK_JONT;

	[Token(Token = "0x400013D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
	public float VoiceAmplitude;

	[Token(Token = "0x400013E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E4")]
	public bool EnableMouthVertexAnimation;

	[Token(Token = "0x400013F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private static ovrAvatarLights ovrLights;

	[Token(Token = "0x60000FA")]
	[Address(RVA = "0xA3E3C0", Offset = "0xA3E3C0", VA = "0xA3E3C0")]
	static OvrAvatar()
	{
	}

	[Token(Token = "0x60000FB")]
	[Address(RVA = "0xA3E738", Offset = "0xA3E738", VA = "0xA3E738")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60000FC")]
	[Address(RVA = "0xA3E7D0", Offset = "0xA3E7D0", VA = "0xA3E7D0")]
	public void AssetLoadedCallback(OvrAvatarAsset asset)
	{
	}

	[Token(Token = "0x60000FD")]
	[Address(RVA = "0xA3E82C", Offset = "0xA3E82C", VA = "0xA3E82C")]
	public void CombinedMeshLoadedCallback(IntPtr assetPtr)
	{
	}

	[Token(Token = "0x60000FE")]
	[Address(RVA = "0xA3E940", Offset = "0xA3E940", VA = "0xA3E940")]
	private OvrAvatarSkinnedMeshRenderComponent AddSkinnedMeshRenderComponent(GameObject gameObject, ovrAvatarRenderPart_SkinnedMeshRender skinnedMeshRender)
	{
		return null;
	}

	[Token(Token = "0x60000FF")]
	[Address(RVA = "0xA3EA1C", Offset = "0xA3EA1C", VA = "0xA3EA1C")]
	private OvrAvatarSkinnedMeshRenderPBSComponent AddSkinnedMeshRenderPBSComponent(GameObject gameObject, ovrAvatarRenderPart_SkinnedMeshRenderPBS skinnedMeshRenderPBS)
	{
		return null;
	}

	[Token(Token = "0x6000100")]
	[Address(RVA = "0xA3EAEC", Offset = "0xA3EAEC", VA = "0xA3EAEC")]
	private OvrAvatarSkinnedMeshPBSV2RenderComponent AddSkinnedMeshRenderPBSV2Component(IntPtr renderPart, GameObject go, ovrAvatarRenderPart_SkinnedMeshRenderPBS_V2 skinnedMeshRenderPBSV2, bool isBodyPartZero, bool isControllerModel)
	{
		return null;
	}

	[Token(Token = "0x6000101")]
	[Address(RVA = "0xA3ECBC", Offset = "0xA3ECBC", VA = "0xA3ECBC")]
	public static IntPtr GetRenderPart(ovrAvatarComponent component, uint renderPartIndex)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x6000102")]
	[Address(RVA = "0xA3ED84", Offset = "0xA3ED84", VA = "0xA3ED84")]
	private static string GetRenderPartName(ovrAvatarComponent component, uint renderPartIndex)
	{
		return null;
	}

	[Token(Token = "0x6000103")]
	[Address(RVA = "0xA3EDF8", Offset = "0xA3EDF8", VA = "0xA3EDF8")]
	internal static void ConvertTransform(float[] transform, ref ovrAvatarTransform target)
	{
	}

	[Token(Token = "0x6000104")]
	[Address(RVA = "0xA3EEB0", Offset = "0xA3EEB0", VA = "0xA3EEB0")]
	internal static void ConvertTransform(ovrAvatarTransform transform, Transform target)
	{
	}

	[Token(Token = "0x6000105")]
	[Address(RVA = "0xA3EF38", Offset = "0xA3EF38", VA = "0xA3EF38")]
	public static ovrAvatarTransform CreateOvrAvatarTransform(Vector3 position, Quaternion orientation)
	{
		return default(ovrAvatarTransform);
	}

	[Token(Token = "0x6000106")]
	[Address(RVA = "0xA3EFDC", Offset = "0xA3EFDC", VA = "0xA3EFDC")]
	private static ovrAvatarGazeTarget CreateOvrGazeTarget(uint targetId, Vector3 targetPosition, ovrAvatarGazeTargetType targetType)
	{
		return default(ovrAvatarGazeTarget);
	}

	[Token(Token = "0x6000107")]
	[Address(RVA = "0xA3EFF4", Offset = "0xA3EFF4", VA = "0xA3EFF4")]
	private void BuildRenderComponents()
	{
	}

	[Token(Token = "0x6000108")]
	private void AddAvatarComponent<T>(ref T root, ovrAvatarComponent nativeComponent) where T : OvrAvatarComponent
	{
	}

	[Token(Token = "0x6000109")]
	[Address(RVA = "0xA3F400", Offset = "0xA3F400", VA = "0xA3F400")]
	private void UpdateCustomPoses()
	{
	}

	[Token(Token = "0x600010A")]
	[Address(RVA = "0xA3F72C", Offset = "0xA3F72C", VA = "0xA3F72C")]
	private static bool UpdatePoseRoot(Transform poseRoot, ref Transform cachedPoseRoot, ref Transform[] cachedPoseJoints, ref ovrAvatarTransform[] transforms)
	{
		return default(bool);
	}

	[Token(Token = "0x600010B")]
	[Address(RVA = "0xA3F8C0", Offset = "0xA3F8C0", VA = "0xA3F8C0")]
	private static bool UpdateTransforms(Transform[] joints, ovrAvatarTransform[] transforms)
	{
		return default(bool);
	}

	[Token(Token = "0x600010C")]
	[Address(RVA = "0xA3FAFC", Offset = "0xA3FAFC", VA = "0xA3FAFC")]
	private static void OrderJoints(Transform transform, List<Transform> joints)
	{
	}

	[Token(Token = "0x600010D")]
	[Address(RVA = "0xA3FC28", Offset = "0xA3FC28", VA = "0xA3FC28")]
	private void AvatarSpecificationCallback(IntPtr avatarSpecification)
	{
	}

	[Token(Token = "0x600010E")]
	[Address(RVA = "0xA3FF74", Offset = "0xA3FF74", VA = "0xA3FF74")]
	private void Start()
	{
	}

	[Token(Token = "0x600010F")]
	[Address(RVA = "0xA40288", Offset = "0xA40288", VA = "0xA40288")]
	private void Update()
	{
	}

	[Token(Token = "0x6000110")]
	[Address(RVA = "0xA40D44", Offset = "0xA40D44", VA = "0xA40D44")]
	public static ovrAvatarHandInputState CreateInputState(ovrAvatarTransform transform, OvrAvatarDriver.ControllerPose pose)
	{
		return default(ovrAvatarHandInputState);
	}

	[Token(Token = "0x6000111")]
	[Address(RVA = "0xA40D88", Offset = "0xA40D88", VA = "0xA40D88")]
	public void ShowControllers(bool show)
	{
	}

	[Token(Token = "0x6000112")]
	[Address(RVA = "0xA3A2DC", Offset = "0xA3A2DC", VA = "0xA3A2DC")]
	public void ShowLeftController(bool show)
	{
	}

	[Token(Token = "0x6000113")]
	[Address(RVA = "0xA3FECC", Offset = "0xA3FECC", VA = "0xA3FECC")]
	public void ShowRightController(bool show)
	{
	}

	[Token(Token = "0x6000114")]
	[Address(RVA = "0xA40DB4", Offset = "0xA40DB4", VA = "0xA40DB4")]
	public void UpdateVoiceVisualization(float[] voiceSamples)
	{
	}

	[Token(Token = "0x6000115")]
	[Address(RVA = "0xA40674", Offset = "0xA40674", VA = "0xA40674")]
	private void RecordFrame()
	{
	}

	[Token(Token = "0x6000116")]
	[Address(RVA = "0xA41038", Offset = "0xA41038", VA = "0xA41038")]
	private void RecordUnityFrame()
	{
	}

	[Token(Token = "0x6000117")]
	[Address(RVA = "0xA40E5C", Offset = "0xA40E5C", VA = "0xA40E5C")]
	private void RecordSDKFrame()
	{
	}

	[Token(Token = "0x6000118")]
	[Address(RVA = "0xA4135C", Offset = "0xA4135C", VA = "0xA4135C")]
	private void AddRenderParts(OvrAvatarComponent ovrComponent, ovrAvatarComponent component, Transform parent)
	{
	}

	[Token(Token = "0x6000119")]
	[Address(RVA = "0xA417D4", Offset = "0xA417D4", VA = "0xA417D4")]
	public void RefreshBodyParts()
	{
	}

	[Token(Token = "0x600011A")]
	[Address(RVA = "0xA41BEC", Offset = "0xA41BEC", VA = "0xA41BEC")]
	public ovrAvatarBodyComponent? GetBodyComponent()
	{
		return null;
	}

	[Token(Token = "0x600011B")]
	[Address(RVA = "0xA41D24", Offset = "0xA41D24", VA = "0xA41D24")]
	public Transform GetHandTransform(HandType hand, HandJoint joint)
	{
		return null;
	}

	[Token(Token = "0x600011C")]
	[Address(RVA = "0xA41EF0", Offset = "0xA41EF0", VA = "0xA41EF0")]
	public void GetPointingDirection(HandType hand, ref Vector3 forward, ref Vector3 up)
	{
	}

	[Token(Token = "0x600011D")]
	[Address(RVA = "0xA4081C", Offset = "0xA4081C", VA = "0xA4081C")]
	private void UpdateVoiceBehavior()
	{
	}

	[Token(Token = "0x600011E")]
	[Address(RVA = "0xA41FB8", Offset = "0xA41FB8", VA = "0xA41FB8")]
	private bool IsValidMic()
	{
		return default(bool);
	}

	[Token(Token = "0x600011F")]
	[Address(RVA = "0xA40684", Offset = "0xA40684", VA = "0xA40684")]
	private void InitPostLoad()
	{
	}

	[Token(Token = "0x6000120")]
	[Address(RVA = "0xA42094", Offset = "0xA42094", VA = "0xA42094")]
	private static void ExpressiveGlobalInit()
	{
	}

	[Token(Token = "0x6000121")]
	[Address(RVA = "0xA42668", Offset = "0xA42668", VA = "0xA42668")]
	private static void InitializeLights()
	{
	}

	[Token(Token = "0x6000122")]
	[Address(RVA = "0xA42AF0", Offset = "0xA42AF0", VA = "0xA42AF0")]
	private static ovrAvatarLight CreateLightDirectional(uint id, Vector3 direction, float intensity, ref ovrAvatarLight light)
	{
		return default(ovrAvatarLight);
	}

	[Token(Token = "0x6000123")]
	[Address(RVA = "0xA42B18", Offset = "0xA42B18", VA = "0xA42B18")]
	private static ovrAvatarLight CreateLightPoint(uint id, Vector3 position, float range, float intensity, ref ovrAvatarLight light)
	{
		return default(ovrAvatarLight);
	}

	[Token(Token = "0x6000124")]
	[Address(RVA = "0xA42B40", Offset = "0xA42B40", VA = "0xA42B40")]
	private static ovrAvatarLight CreateLightSpot(uint id, Vector3 position, Vector3 direction, float spotAngleDeg, float range, float intensity, ref ovrAvatarLight light)
	{
		return default(ovrAvatarLight);
	}

	[Token(Token = "0x6000125")]
	[Address(RVA = "0xA40BEC", Offset = "0xA40BEC", VA = "0xA40BEC")]
	private void UpdateExpressive()
	{
	}

	[Token(Token = "0x6000126")]
	[Address(RVA = "0xA42144", Offset = "0xA42144", VA = "0xA42144")]
	private void ConfigureHelpers()
	{
	}

	[Token(Token = "0x6000127")]
	[Address(RVA = "0xA42F48", Offset = "0xA42F48", VA = "0xA42F48")]
	[IteratorStateMachine(typeof(<WaitForMouthAudioSource>d__137))]
	private IEnumerator WaitForMouthAudioSource()
	{
		return null;
	}

	[Token(Token = "0x6000128")]
	[Address(RVA = "0xA42FD8", Offset = "0xA42FD8", VA = "0xA42FD8")]
	public void DestroyHelperObjects()
	{
	}

	[Token(Token = "0x6000129")]
	[Address(RVA = "0xA42DDC", Offset = "0xA42DDC", VA = "0xA42DDC")]
	public GameObject CreateHelperObject(Transform parent, Vector3 localPositionOffset, string helperName, string helperTag = "")
	{
		return null;
	}

	[Token(Token = "0x600012A")]
	[Address(RVA = "0xA3DB90", Offset = "0xA3DB90", VA = "0xA3DB90")]
	public void UpdateVoiceData(short[] pcmData, int numChannels)
	{
	}

	[Token(Token = "0x600012B")]
	[Address(RVA = "0xA4307C", Offset = "0xA4307C", VA = "0xA4307C")]
	public void UpdateVoiceData(float[] pcmData, int numChannels)
	{
	}

	[Token(Token = "0x600012C")]
	[Address(RVA = "0xA42B7C", Offset = "0xA42B7C", VA = "0xA42B7C")]
	private void UpdateFacewave()
	{
	}

	[Token(Token = "0x600012D")]
	[Address(RVA = "0xA43144", Offset = "0xA43144", VA = "0xA43144")]
	public OvrAvatar()
	{
	}
}
[Token(Token = "0x200003C")]
public class OvrAvatarAsset
{
	[Token(Token = "0x400014F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ulong assetID;

	[Token(Token = "0x6000135")]
	[Address(RVA = "0xA434F0", Offset = "0xA434F0", VA = "0xA434F0")]
	public OvrAvatarAsset()
	{
	}
}
[Token(Token = "0x200003D")]
public class OvrAvatarAssetMesh : OvrAvatarAsset
{
	[Token(Token = "0x4000150")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Mesh mesh;

	[Token(Token = "0x4000151")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ovrAvatarSkinnedMeshPose skinnedBindPose;

	[Token(Token = "0x4000152")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public string[] jointNames;

	[Token(Token = "0x6000136")]
	[Address(RVA = "0xA434F8", Offset = "0xA434F8", VA = "0xA434F8")]
	public OvrAvatarAssetMesh(ulong _assetId, IntPtr asset, ovrAvatarAssetType meshType)
	{
	}

	[Token(Token = "0x6000137")]
	[Address(RVA = "0xA4465C", Offset = "0xA4465C", VA = "0xA4465C")]
	private void LoadSubmeshes(IntPtr asset, IntPtr indexBufferPtr, ulong indexCount)
	{
	}

	[Token(Token = "0x6000138")]
	[Address(RVA = "0xA442A8", Offset = "0xA442A8", VA = "0xA442A8")]
	private void LoadBlendShapes(IntPtr asset, long vertexCount)
	{
	}

	[Token(Token = "0x6000139")]
	[Address(RVA = "0xA44038", Offset = "0xA44038", VA = "0xA44038")]
	private void SetSkinnedBindPose(IntPtr asset, ovrAvatarAssetType meshType)
	{
	}

	[Token(Token = "0x600013A")]
	[Address(RVA = "0xA4410C", Offset = "0xA4410C", VA = "0xA4410C")]
	private void GetVertexAndIndexData(IntPtr asset, ovrAvatarAssetType meshType, out long vertexCount, out IntPtr vertexBuffer, out uint indexCount, out IntPtr indexBuffer)
	{
	}

	[Token(Token = "0x600013B")]
	[Address(RVA = "0xA448A8", Offset = "0xA448A8", VA = "0xA448A8")]
	public SkinnedMeshRenderer CreateSkinnedMeshRendererOnObject(GameObject target)
	{
		return null;
	}
}
[Token(Token = "0x200003E")]
public class OvrAvatarAssetTexture : OvrAvatarAsset
{
	[Token(Token = "0x4000153")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Texture2D texture;

	[Token(Token = "0x4000154")]
	private const int ASTCHeaderSize = 16;

	[Token(Token = "0x600013C")]
	[Address(RVA = "0xA44DF4", Offset = "0xA44DF4", VA = "0xA44DF4")]
	public OvrAvatarAssetTexture(ulong _assetId, IntPtr asset)
	{
	}
}
[Token(Token = "0x200003F")]
public class OvrAvatarBase : OvrAvatarComponent
{
	[Token(Token = "0x4000155")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private ovrAvatarBaseComponent component;

	[Token(Token = "0x600013D")]
	[Address(RVA = "0xA4502C", Offset = "0xA4502C", VA = "0xA4502C")]
	private void Update()
	{
	}

	[Token(Token = "0x600013E")]
	[Address(RVA = "0xA45448", Offset = "0xA45448", VA = "0xA45448")]
	public OvrAvatarBase()
	{
	}
}
[Token(Token = "0x2000040")]
public class OvrAvatarBody : OvrAvatarComponent
{
	[Token(Token = "0x4000156")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public ovrAvatarBodyComponent component;

	[Token(Token = "0x600013F")]
	[Address(RVA = "0xA41AA0", Offset = "0xA41AA0", VA = "0xA41AA0")]
	public ovrAvatarComponent? GetNativeAvatarComponent()
	{
		return null;
	}

	[Token(Token = "0x6000140")]
	[Address(RVA = "0xA4555C", Offset = "0xA4555C", VA = "0xA4555C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000141")]
	[Address(RVA = "0xA45664", Offset = "0xA45664", VA = "0xA45664")]
	public OvrAvatarBody()
	{
	}
}
[Token(Token = "0x2000041")]
public class OvrAvatarComponent : MonoBehaviour
{
	[Token(Token = "0x4000157")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static readonly string[] LayerKeywords;

	[Token(Token = "0x4000158")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static readonly string[] LayerSampleModeParameters;

	[Token(Token = "0x4000159")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static readonly string[] LayerBlendModeParameters;

	[Token(Token = "0x400015A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static readonly string[] LayerMaskTypeParameters;

	[Token(Token = "0x400015B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public static readonly string[] LayerColorParameters;

	[Token(Token = "0x400015C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public static readonly string[] LayerSurfaceParameters;

	[Token(Token = "0x400015D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public static readonly string[] LayerSampleParametersParameters;

	[Token(Token = "0x400015E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public static readonly string[] LayerMaskParametersParameters;

	[Token(Token = "0x400015F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public static readonly string[] LayerMaskAxisParameters;

	[Token(Token = "0x4000160")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Dictionary<Material, ovrAvatarMaterialState> materialStates;

	[Token(Token = "0x4000161")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<OvrAvatarRenderComponent> RenderParts;

	[Token(Token = "0x4000162")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected OvrAvatar owner;

	[Token(Token = "0x4000163")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected ovrAvatarComponent nativeAvatarComponent;

	[Token(Token = "0x6000142")]
	[Address(RVA = "0xA456B8", Offset = "0xA456B8", VA = "0xA456B8")]
	public void SetOvrAvatarOwner(OvrAvatar ovrAvatarOwner)
	{
	}

	[Token(Token = "0x6000143")]
	[Address(RVA = "0xA45134", Offset = "0xA45134", VA = "0xA45134")]
	public void UpdateAvatar(IntPtr nativeComponent)
	{
	}

	[Token(Token = "0x6000144")]
	[Address(RVA = "0xA456C0", Offset = "0xA456C0", VA = "0xA456C0")]
	protected void UpdateActive(OvrAvatar avatar, ovrAvatarVisibilityFlags mask)
	{
	}

	[Token(Token = "0x6000145")]
	[Address(RVA = "0xA45714", Offset = "0xA45714", VA = "0xA45714")]
	public void UpdateAvatarMaterial(Material mat, ovrAvatarMaterialState matState)
	{
	}

	[Token(Token = "0x6000146")]
	[Address(RVA = "0xA45E1C", Offset = "0xA45E1C", VA = "0xA45E1C")]
	public static Texture2D GetLoadedTexture(ulong assetId)
	{
		return null;
	}

	[Token(Token = "0x6000147")]
	[Address(RVA = "0xA4549C", Offset = "0xA4549C", VA = "0xA4549C")]
	public OvrAvatarComponent()
	{
	}
}
[Token(Token = "0x2000042")]
public abstract class OvrAvatarDriver : MonoBehaviour
{
	[Token(Token = "0x2000043")]
	public enum PacketMode
	{
		[Token(Token = "0x4000168")]
		SDK,
		[Token(Token = "0x4000169")]
		Unity
	}

	[Token(Token = "0x2000044")]
	public struct ControllerPose
	{
		[Token(Token = "0x400016A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ovrAvatarButton buttons;

		[Token(Token = "0x400016B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public ovrAvatarTouch touches;

		[Token(Token = "0x400016C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Vector2 joystickPosition;

		[Token(Token = "0x400016D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float indexTrigger;

		[Token(Token = "0x400016E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float handTrigger;

		[Token(Token = "0x400016F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool isActive;

		[Token(Token = "0x600014F")]
		[Address(RVA = "0xA4756C", Offset = "0xA4756C", VA = "0xA4756C")]
		public static ControllerPose Interpolate(ControllerPose a, ControllerPose b, float t)
		{
			return default(ControllerPose);
		}
	}

	[Token(Token = "0x2000045")]
	public struct PoseFrame
	{
		[Token(Token = "0x4000170")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 headPosition;

		[Token(Token = "0x4000171")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Quaternion headRotation;

		[Token(Token = "0x4000172")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 handLeftPosition;

		[Token(Token = "0x4000173")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Quaternion handLeftRotation;

		[Token(Token = "0x4000174")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector3 handRightPosition;

		[Token(Token = "0x4000175")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Quaternion handRightRotation;

		[Token(Token = "0x4000176")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float voiceAmplitude;

		[Token(Token = "0x4000177")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public ControllerPose controllerLeftPose;

		[Token(Token = "0x4000178")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public ControllerPose controllerRightPose;

		[Token(Token = "0x6000150")]
		[Address(RVA = "0xA475DC", Offset = "0xA475DC", VA = "0xA475DC")]
		public static PoseFrame Interpolate(PoseFrame a, PoseFrame b, float t)
		{
			return default(PoseFrame);
		}
	}

	[Token(Token = "0x4000164")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PacketMode Mode;

	[Token(Token = "0x4000165")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	protected PoseFrame CurrentPose;

	[Token(Token = "0x4000166")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private ovrAvatarControllerType ControllerType;

	[Token(Token = "0x6000149")]
	[Address(RVA = "0xA47258", Offset = "0xA47258", VA = "0xA47258")]
	public PoseFrame GetCurrentPose()
	{
		return default(PoseFrame);
	}

	[Token(Token = "0x600014A")]
	public abstract void UpdateTransforms(IntPtr sdkAvatar);

	[Token(Token = "0x600014B")]
	[Address(RVA = "0xA47268", Offset = "0xA47268", VA = "0xA47268")]
	private void Start()
	{
	}

	[Token(Token = "0x600014C")]
	[Address(RVA = "0xA472E4", Offset = "0xA472E4", VA = "0xA472E4")]
	public void UpdateTransformsFromPose(IntPtr sdkAvatar)
	{
	}

	[Token(Token = "0x600014D")]
	[Address(RVA = "0xA47554", Offset = "0xA47554", VA = "0xA47554")]
	public static bool GetIsTrackedRemote()
	{
		return default(bool);
	}

	[Token(Token = "0x600014E")]
	[Address(RVA = "0xA4755C", Offset = "0xA4755C", VA = "0xA4755C")]
	protected OvrAvatarDriver()
	{
	}
}
[Token(Token = "0x2000046")]
public class OvrAvatarHand : OvrAvatarComponent
{
	[Token(Token = "0x4000179")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public bool isLeftHand;

	[Token(Token = "0x400017A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private ovrAvatarHandComponent component;

	[Token(Token = "0x6000151")]
	[Address(RVA = "0xA478D4", Offset = "0xA478D4", VA = "0xA478D4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000152")]
	[Address(RVA = "0xA47A04", Offset = "0xA47A04", VA = "0xA47A04")]
	public OvrAvatarHand()
	{
	}
}
[Token(Token = "0x2000047")]
public class OvrAvatarLocalDriver : OvrAvatarDriver
{
	[Token(Token = "0x400017B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Vector3 centerEyePosition;

	[Token(Token = "0x400017C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private Quaternion centerEyeRotation;

	[Token(Token = "0x400017D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	private float voiceAmplitude;

	[Token(Token = "0x6000153")]
	[Address(RVA = "0xA47A64", Offset = "0xA47A64", VA = "0xA47A64")]
	private ControllerPose GetMalibuControllerPose(OVRInput.Controller controller)
	{
		return default(ControllerPose);
	}

	[Token(Token = "0x6000154")]
	[Address(RVA = "0xA47BA4", Offset = "0xA47BA4", VA = "0xA47BA4")]
	private ControllerPose GetControllerPose(OVRInput.Controller controller)
	{
		return default(ControllerPose);
	}

	[Token(Token = "0x6000155")]
	[Address(RVA = "0xA47ED4", Offset = "0xA47ED4", VA = "0xA47ED4")]
	private void CalculateCurrentPose()
	{
	}

	[Token(Token = "0x6000156")]
	[Address(RVA = "0xA480F0", Offset = "0xA480F0", VA = "0xA480F0", Slot = "4")]
	public override void UpdateTransforms(IntPtr sdkAvatar)
	{
	}

	[Token(Token = "0x6000157")]
	[Address(RVA = "0xA48118", Offset = "0xA48118", VA = "0xA48118")]
	public OvrAvatarLocalDriver()
	{
	}
}
[Token(Token = "0x2000048")]
public class OvrAvatarMaterialManager : MonoBehaviour
{
	[Token(Token = "0x2000049")]
	public enum TextureType
	{
		[Token(Token = "0x400019F")]
		DiffuseTextures,
		[Token(Token = "0x40001A0")]
		NormalMaps,
		[Token(Token = "0x40001A1")]
		RoughnessMaps,
		[Token(Token = "0x40001A2")]
		Count
	}

	[Token(Token = "0x200004A")]
	public struct AvatarComponentMaterialProperties
	{
		[Token(Token = "0x40001A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ovrAvatarBodyPartType TypeIndex;

		[Token(Token = "0x40001A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public Color Color;

		[Token(Token = "0x40001A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Texture2D[] Textures;

		[Token(Token = "0x40001A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float DiffuseIntensity;

		[Token(Token = "0x40001A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float RimIntensity;

		[Token(Token = "0x40001A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float ReflectionIntensity;
	}

	[Token(Token = "0x200004B")]
	public struct AvatarTextureArrayProperties
	{
		[Token(Token = "0x40001A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Texture2D[] Textures;

		[Token(Token = "0x40001AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Texture2DArray TextureArray;
	}

	[Token(Token = "0x200004C")]
	public struct AvatarMaterialPropertyBlock
	{
		[Token(Token = "0x40001AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector4[] Colors;

		[Token(Token = "0x40001AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float[] DiffuseIntensities;

		[Token(Token = "0x40001AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float[] RimIntensities;

		[Token(Token = "0x40001AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float[] ReflectionIntensities;
	}

	[Serializable]
	[Token(Token = "0x200004D")]
	public class AvatarMaterialConfig
	{
		[Token(Token = "0x40001AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AvatarComponentMaterialProperties[] ComponentMaterialProperties;

		[Token(Token = "0x40001B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AvatarMaterialPropertyBlock MaterialPropertyBlock;

		[Token(Token = "0x6000167")]
		[Address(RVA = "0xA4A3C4", Offset = "0xA4A3C4", VA = "0xA4A3C4")]
		public AvatarMaterialConfig()
		{
		}
	}

	[Token(Token = "0x200004E")]
	[CompilerGenerated]
	private sealed class <RunLoadingAnimation>d__49 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40001B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40001B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40001B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public OvrAvatarMaterialManager <>4__this;

		[Token(Token = "0x40001B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action callBack;

		[Token(Token = "0x40001B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int <srcBlend>5__2;

		[Token(Token = "0x40001B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int <dstBlend>5__3;

		[Token(Token = "0x40001B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private string <lightModeTag>5__4;

		[Token(Token = "0x40001B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private string <renderTypeTag>5__5;

		[Token(Token = "0x40001B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private string <renderQueueTag>5__6;

		[Token(Token = "0x40001BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private string <ignoreProjectorTag>5__7;

		[Token(Token = "0x40001BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int <renderQueue>5__8;

		[Token(Token = "0x40001BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private bool <transparentQueue>5__9;

		[Token(Token = "0x1700000D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600016B")]
			[Address(RVA = "0xA4ADDC", Offset = "0xA4ADDC", VA = "0xA4ADDC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700000E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600016D")]
			[Address(RVA = "0xA4AE24", Offset = "0xA4AE24", VA = "0xA4AE24", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000168")]
		[Address(RVA = "0xA4A1F8", Offset = "0xA4A1F8", VA = "0xA4A1F8")]
		[DebuggerHidden]
		public <RunLoadingAnimation>d__49(int <>1__state)
		{
		}

		[Token(Token = "0x6000169")]
		[Address(RVA = "0xA4A780", Offset = "0xA4A780", VA = "0xA4A780", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600016A")]
		[Address(RVA = "0xA4A784", Offset = "0xA4A784", VA = "0xA4A784", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600016C")]
		[Address(RVA = "0xA4ADE4", Offset = "0xA4ADE4", VA = "0xA4ADE4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400017E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Renderer TargetRenderer;

	[Token(Token = "0x400017F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private AvatarTextureArrayProperties[] TextureArrays;

	[Token(Token = "0x4000180")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private readonly string[] TextureTypeToShaderProperties;

	[Token(Token = "0x4000181")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AvatarMaterialConfig LocalAvatarConfig;

	[Token(Token = "0x4000182")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public List<ReflectionProbeBlendInfo> ReflectionProbes;

	[Token(Token = "0x4000183")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Shader CombinedShader;

	[Token(Token = "0x4000184")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static string AVATAR_SHADER_LOADER;

	[Token(Token = "0x4000185")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static string AVATAR_SHADER_MAINTEX;

	[Token(Token = "0x4000186")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static string AVATAR_SHADER_NORMALMAP;

	[Token(Token = "0x4000187")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static string AVATAR_SHADER_ROUGHNESSMAP;

	[Token(Token = "0x4000188")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public static string AVATAR_SHADER_COLOR;

	[Token(Token = "0x4000189")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public static string AVATAR_SHADER_DIFFUSEINTENSITY;

	[Token(Token = "0x400018A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public static string AVATAR_SHADER_RIMINTENSITY;

	[Token(Token = "0x400018B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public static string AVATAR_SHADER_REFLECTIONINTENSITY;

	[Token(Token = "0x400018C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public static string AVATAR_SHADER_CUBEMAP;

	[Token(Token = "0x400018D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public static string AVATAR_SHADER_ALPHA;

	[Token(Token = "0x400018E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public static string AVATAR_SHADER_LOADING_DIMMER;

	[Token(Token = "0x400018F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public static string AVATAR_SHADER_IRIS_COLOR;

	[Token(Token = "0x4000190")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public static string AVATAR_SHADER_LIP_COLOR;

	[Token(Token = "0x4000191")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public static string AVATAR_SHADER_BROW_COLOR;

	[Token(Token = "0x4000192")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public static string AVATAR_SHADER_LASH_COLOR;

	[Token(Token = "0x4000193")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public static string AVATAR_SHADER_SCLERA_COLOR;

	[Token(Token = "0x4000194")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public static string AVATAR_SHADER_GUM_COLOR;

	[Token(Token = "0x4000195")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public static string AVATAR_SHADER_TEETH_COLOR;

	[Token(Token = "0x4000196")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public static string AVATAR_SHADER_LIP_SMOOTHNESS;

	[Token(Token = "0x4000197")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public static float[] DiffuseIntensities;

	[Token(Token = "0x4000198")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public static float[] RimIntensities;

	[Token(Token = "0x4000199")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public static float[] ReflectionIntensities;

	[Token(Token = "0x400019A")]
	private const float LOADING_ANIMATION_AMPLITUDE = 0.5f;

	[Token(Token = "0x400019B")]
	private const float LOADING_ANIMATION_PERIOD = 0.35f;

	[Token(Token = "0x400019C")]
	private const float LOADING_ANIMATION_CURVE_SCALE = 0.25f;

	[Token(Token = "0x400019D")]
	private const float LOADING_ANIMATION_DIMMER_MIN = 0.3f;

	[Token(Token = "0x6000158")]
	[Address(RVA = "0xA481B8", Offset = "0xA481B8", VA = "0xA481B8")]
	public void CreateTextureArrays()
	{
	}

	[Token(Token = "0x6000159")]
	[Address(RVA = "0xA48338", Offset = "0xA48338", VA = "0xA48338")]
	public void SetRenderer(Renderer renderer)
	{
	}

	[Token(Token = "0x600015A")]
	[Address(RVA = "0xA48360", Offset = "0xA48360", VA = "0xA48360")]
	public void OnCombinedMeshReady()
	{
	}

	[Token(Token = "0x600015B")]
	[Address(RVA = "0xA48A5C", Offset = "0xA48A5C", VA = "0xA48A5C")]
	public void AddTextureIDToTextureManager(ulong assetID, bool isSingleComponent)
	{
	}

	[Token(Token = "0x600015C")]
	[Address(RVA = "0xA48ECC", Offset = "0xA48ECC", VA = "0xA48ECC")]
	private void DeleteTextureSet()
	{
	}

	[Token(Token = "0x600015D")]
	[Address(RVA = "0xA48400", Offset = "0xA48400", VA = "0xA48400")]
	public void InitTextureArrays()
	{
	}

	[Token(Token = "0x600015E")]
	[Address(RVA = "0xA48FA8", Offset = "0xA48FA8", VA = "0xA48FA8")]
	private void ProcessTexturesWithMips(Texture2D[] textures, int texArrayResolution, Texture2DArray texArray)
	{
	}

	[Token(Token = "0x600015F")]
	[Address(RVA = "0xA48830", Offset = "0xA48830", VA = "0xA48830")]
	private void SetMaterialPropertyBlock()
	{
	}

	[Token(Token = "0x6000160")]
	[Address(RVA = "0xA49210", Offset = "0xA49210", VA = "0xA49210")]
	private void ApplyMaterialPropertyBlock()
	{
	}

	[Token(Token = "0x6000161")]
	[Address(RVA = "0xA49494", Offset = "0xA49494", VA = "0xA49494")]
	public static ovrAvatarBodyPartType GetComponentType(string objectName)
	{
		return default(ovrAvatarBodyPartType);
	}

	[Token(Token = "0x6000162")]
	[Address(RVA = "0xA495B8", Offset = "0xA495B8", VA = "0xA495B8")]
	private ulong GetTextureIDForType(ovrAvatarPBSMaterialState materialState, TextureType type)
	{
		return default(ulong);
	}

	[Token(Token = "0x6000163")]
	[Address(RVA = "0xA495F0", Offset = "0xA495F0", VA = "0xA495F0")]
	public void ValidateTextures(ovrAvatarPBSMaterialState[] materialStates)
	{
	}

	[Token(Token = "0x6000164")]
	[Address(RVA = "0xA489E8", Offset = "0xA489E8", VA = "0xA489E8")]
	[IteratorStateMachine(typeof(<RunLoadingAnimation>d__49))]
	private IEnumerator RunLoadingAnimation(Action callBack)
	{
		return null;
	}

	[Token(Token = "0x6000165")]
	[Address(RVA = "0xA4A220", Offset = "0xA4A220", VA = "0xA4A220")]
	public OvrAvatarMaterialManager()
	{
	}
}
[Token(Token = "0x200004F")]
public class OvrAvatarPacket
{
	[Token(Token = "0x40001BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public IntPtr ovrNativePacket;

	[Token(Token = "0x40001BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private List<float> frameTimes;

	[Token(Token = "0x40001BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<OvrAvatarDriver.PoseFrame> frames;

	[Token(Token = "0x40001C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private List<byte[]> encodedAudioPackets;

	[Token(Token = "0x1700000F")]
	public float Duration
	{
		[Token(Token = "0x600016E")]
		[Address(RVA = "0xA4AE2C", Offset = "0xA4AE2C", VA = "0xA4AE2C")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000010")]
	public OvrAvatarDriver.PoseFrame FinalFrame
	{
		[Token(Token = "0x600016F")]
		[Address(RVA = "0xA4AE90", Offset = "0xA4AE90", VA = "0xA4AE90")]
		get
		{
			return default(OvrAvatarDriver.PoseFrame);
		}
	}

	[Token(Token = "0x6000170")]
	[Address(RVA = "0xA4AF18", Offset = "0xA4AF18", VA = "0xA4AF18")]
	public OvrAvatarPacket()
	{
	}

	[Token(Token = "0x6000171")]
	[Address(RVA = "0xA4B048", Offset = "0xA4B048", VA = "0xA4B048")]
	public OvrAvatarPacket(OvrAvatarDriver.PoseFrame initialPose)
	{
	}

	[Token(Token = "0x6000172")]
	[Address(RVA = "0xA4B2B8", Offset = "0xA4B2B8", VA = "0xA4B2B8")]
	private OvrAvatarPacket(List<float> frameTimes, List<OvrAvatarDriver.PoseFrame> frames, List<byte[]> audioPackets)
	{
	}

	[Token(Token = "0x6000173")]
	[Address(RVA = "0xA4B400", Offset = "0xA4B400", VA = "0xA4B400")]
	public void AddFrame(OvrAvatarDriver.PoseFrame frame, float deltaSeconds)
	{
	}

	[Token(Token = "0x6000174")]
	[Address(RVA = "0xA4B584", Offset = "0xA4B584", VA = "0xA4B584")]
	public OvrAvatarDriver.PoseFrame GetPoseFrame(float seconds)
	{
		return default(OvrAvatarDriver.PoseFrame);
	}

	[Token(Token = "0x6000175")]
	[Address(RVA = "0xA4B760", Offset = "0xA4B760", VA = "0xA4B760")]
	public static OvrAvatarPacket Read(Stream stream)
	{
		return null;
	}

	[Token(Token = "0x6000176")]
	[Address(RVA = "0xA4BCA8", Offset = "0xA4BCA8", VA = "0xA4BCA8")]
	public void Write(Stream stream)
	{
	}
}
[Token(Token = "0x2000050")]
internal static class BinaryWriterExtensions
{
	[Token(Token = "0x6000177")]
	[Address(RVA = "0xA4BECC", Offset = "0xA4BECC", VA = "0xA4BECC")]
	public static void Write(this BinaryWriter writer, OvrAvatarDriver.PoseFrame frame)
	{
	}

	[Token(Token = "0x6000178")]
	[Address(RVA = "0xA4BFD4", Offset = "0xA4BFD4", VA = "0xA4BFD4")]
	public static void Write(this BinaryWriter writer, Vector3 vec3)
	{
	}

	[Token(Token = "0x6000179")]
	[Address(RVA = "0xA4C160", Offset = "0xA4C160", VA = "0xA4C160")]
	public static void Write(this BinaryWriter writer, Vector2 vec2)
	{
	}

	[Token(Token = "0x600017A")]
	[Address(RVA = "0xA4C038", Offset = "0xA4C038", VA = "0xA4C038")]
	public static void Write(this BinaryWriter writer, Quaternion quat)
	{
	}

	[Token(Token = "0x600017B")]
	[Address(RVA = "0xA4C0C0", Offset = "0xA4C0C0", VA = "0xA4C0C0")]
	public static void Write(this BinaryWriter writer, OvrAvatarDriver.ControllerPose pose)
	{
	}
}
[Token(Token = "0x2000051")]
internal static class BinaryReaderExtensions
{
	[Token(Token = "0x600017C")]
	[Address(RVA = "0xA4BB0C", Offset = "0xA4BB0C", VA = "0xA4BB0C")]
	public static OvrAvatarDriver.PoseFrame ReadPoseFrame(this BinaryReader reader)
	{
		return default(OvrAvatarDriver.PoseFrame);
	}

	[Token(Token = "0x600017D")]
	[Address(RVA = "0xA4C388", Offset = "0xA4C388", VA = "0xA4C388")]
	public static Vector2 ReadVector2(this BinaryReader reader)
	{
		return default(Vector2);
	}

	[Token(Token = "0x600017E")]
	[Address(RVA = "0xA4C1A8", Offset = "0xA4C1A8", VA = "0xA4C1A8")]
	public static Vector3 ReadVector3(this BinaryReader reader)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600017F")]
	[Address(RVA = "0xA4C214", Offset = "0xA4C214", VA = "0xA4C214")]
	public static Quaternion ReadQuaternion(this BinaryReader reader)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x6000180")]
	[Address(RVA = "0xA4C2A4", Offset = "0xA4C2A4", VA = "0xA4C2A4")]
	public static OvrAvatarDriver.ControllerPose ReadControllerPose(this BinaryReader reader)
	{
		return default(OvrAvatarDriver.ControllerPose);
	}
}
[Token(Token = "0x2000052")]
public class OvrAvatarRemoteDriver : OvrAvatarDriver
{
	[Token(Token = "0x40001C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Queue<OvrAvatarPacket> packetQueue;

	[Token(Token = "0x40001C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private IntPtr CurrentSDKPacket;

	[Token(Token = "0x40001C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private float CurrentPacketTime;

	[Token(Token = "0x40001C4")]
	private const int MinPacketQueue = 1;

	[Token(Token = "0x40001C5")]
	private const int MaxPacketQueue = 4;

	[Token(Token = "0x40001C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	private int CurrentSequence;

	[Token(Token = "0x40001C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private bool isStreaming;

	[Token(Token = "0x40001C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private OvrAvatarPacket currentPacket;

	[Token(Token = "0x6000181")]
	[Address(RVA = "0xA4C3D8", Offset = "0xA4C3D8", VA = "0xA4C3D8")]
	public void QueuePacket(int sequence, OvrAvatarPacket packet)
	{
	}

	[Token(Token = "0x6000182")]
	[Address(RVA = "0xA4C45C", Offset = "0xA4C45C", VA = "0xA4C45C", Slot = "4")]
	public override void UpdateTransforms(IntPtr sdkAvatar)
	{
	}

	[Token(Token = "0x6000183")]
	[Address(RVA = "0xA4C478", Offset = "0xA4C478", VA = "0xA4C478")]
	private void UpdateFromSDKPacket(IntPtr sdkAvatar)
	{
	}

	[Token(Token = "0x6000184")]
	[Address(RVA = "0xA4C628", Offset = "0xA4C628", VA = "0xA4C628")]
	private void UpdateFromUnityPacket(IntPtr sdkAvatar)
	{
	}

	[Token(Token = "0x6000185")]
	[Address(RVA = "0xA4C7AC", Offset = "0xA4C7AC", VA = "0xA4C7AC")]
	public OvrAvatarRemoteDriver()
	{
	}
}
[Token(Token = "0x2000053")]
public class OvrAvatarRenderComponent : MonoBehaviour
{
	[Token(Token = "0x40001C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool firstSkinnedUpdate;

	[Token(Token = "0x40001CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public SkinnedMeshRenderer mesh;

	[Token(Token = "0x40001CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform[] bones;

	[Token(Token = "0x40001CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool isBodyComponent;

	[Token(Token = "0x6000186")]
	[Address(RVA = "0xA4C85C", Offset = "0xA4C85C", VA = "0xA4C85C")]
	protected void UpdateActive(OvrAvatar avatar, ovrAvatarVisibilityFlags mask)
	{
	}

	[Token(Token = "0x6000187")]
	[Address(RVA = "0xA4C938", Offset = "0xA4C938", VA = "0xA4C938")]
	protected SkinnedMeshRenderer CreateSkinnedMesh(ulong assetID, ovrAvatarVisibilityFlags visibilityMask, int thirdPersonLayer, int firstPersonLayer)
	{
		return null;
	}

	[Token(Token = "0x6000188")]
	[Address(RVA = "0xA4CB9C", Offset = "0xA4CB9C", VA = "0xA4CB9C")]
	protected void UpdateSkinnedMesh(OvrAvatar avatar, Transform[] bones, ovrAvatarTransform localTransform, ovrAvatarVisibilityFlags visibilityMask, IntPtr renderPart)
	{
	}

	[Token(Token = "0x6000189")]
	[Address(RVA = "0xA4CEE4", Offset = "0xA4CEE4", VA = "0xA4CEE4")]
	protected Material CreateAvatarMaterial(string name, Shader shader)
	{
		return null;
	}

	[Token(Token = "0x600018A")]
	[Address(RVA = "0xA4CFE8", Offset = "0xA4CFE8", VA = "0xA4CFE8")]
	public OvrAvatarRenderComponent()
	{
	}
}
[Token(Token = "0x2000054")]
[Flags]
public enum ovrAvatarCapabilities
{
	[Token(Token = "0x40001CE")]
	Body = 1,
	[Token(Token = "0x40001CF")]
	Hands = 2,
	[Token(Token = "0x40001D0")]
	Base = 4,
	[Token(Token = "0x40001D1")]
	BodyTilt = 0x10,
	[Token(Token = "0x40001D2")]
	Expressive = 0x20,
	[Token(Token = "0x40001D3")]
	All = -1
}
[Token(Token = "0x2000055")]
public enum ovrAvatarMessageType
{
	[Token(Token = "0x40001D5")]
	AvatarSpecification,
	[Token(Token = "0x40001D6")]
	AssetLoaded,
	[Token(Token = "0x40001D7")]
	Count
}
[Token(Token = "0x2000056")]
public struct ovrAvatarMessage_AvatarSpecification
{
	[Token(Token = "0x40001D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public IntPtr avatarSpec;

	[Token(Token = "0x40001D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public ulong oculusUserID;
}
[Token(Token = "0x2000057")]
public struct ovrAvatarMessage_AssetLoaded
{
	[Token(Token = "0x40001DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ulong assetID;

	[Token(Token = "0x40001DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public IntPtr asset;
}
[Token(Token = "0x2000058")]
public enum ovrAvatarAssetType
{
	[Token(Token = "0x40001DD")]
	Mesh,
	[Token(Token = "0x40001DE")]
	Texture,
	[Token(Token = "0x40001DF")]
	Pose,
	[Token(Token = "0x40001E0")]
	Material,
	[Token(Token = "0x40001E1")]
	CombinedMesh,
	[Token(Token = "0x40001E2")]
	PBSMaterial,
	[Token(Token = "0x40001E3")]
	FailedLoad,
	[Token(Token = "0x40001E4")]
	Count
}
[Token(Token = "0x2000059")]
public struct ovrAvatarMeshVertex
{
	[Token(Token = "0x40001E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public float x;

	[Token(Token = "0x40001E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public float y;

	[Token(Token = "0x40001E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public float z;

	[Token(Token = "0x40001E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public float nx;

	[Token(Token = "0x40001E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float ny;

	[Token(Token = "0x40001EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float nz;

	[Token(Token = "0x40001EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float tx;

	[Token(Token = "0x40001EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float ty;

	[Token(Token = "0x40001ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float tz;

	[Token(Token = "0x40001EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float tw;

	[Token(Token = "0x40001EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float u;

	[Token(Token = "0x40001F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float v;

	[Token(Token = "0x40001F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public byte[] blendIndices;

	[Token(Token = "0x40001F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float[] blendWeights;
}
[Token(Token = "0x200005A")]
public struct ovrAvatarMeshVertexV2
{
	[Token(Token = "0x40001F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public float x;

	[Token(Token = "0x40001F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public float y;

	[Token(Token = "0x40001F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public float z;

	[Token(Token = "0x40001F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public float nx;

	[Token(Token = "0x40001F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float ny;

	[Token(Token = "0x40001F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float nz;

	[Token(Token = "0x40001F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float tx;

	[Token(Token = "0x40001FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float ty;

	[Token(Token = "0x40001FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float tz;

	[Token(Token = "0x40001FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float tw;

	[Token(Token = "0x40001FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float u;

	[Token(Token = "0x40001FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float v;

	[Token(Token = "0x40001FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float r;

	[Token(Token = "0x4000200")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float g;

	[Token(Token = "0x4000201")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float b;

	[Token(Token = "0x4000202")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float a;

	[Token(Token = "0x4000203")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public byte[] blendIndices;

	[Token(Token = "0x4000204")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float[] blendWeights;
}
[Token(Token = "0x200005B")]
public struct ovrAvatarBlendVertex
{
	[Token(Token = "0x4000205")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public float x;

	[Token(Token = "0x4000206")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public float y;

	[Token(Token = "0x4000207")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public float z;

	[Token(Token = "0x4000208")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public float nx;

	[Token(Token = "0x4000209")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float ny;

	[Token(Token = "0x400020A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float nz;

	[Token(Token = "0x400020B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float tx;

	[Token(Token = "0x400020C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float ty;

	[Token(Token = "0x400020D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float tz;
}
[Token(Token = "0x200005C")]
public struct ovrAvatarMeshAssetData
{
	[Token(Token = "0x400020E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public uint vertexCount;

	[Token(Token = "0x400020F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public IntPtr vertexBuffer;

	[Token(Token = "0x4000210")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public uint indexCount;

	[Token(Token = "0x4000211")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public IntPtr indexBuffer;

	[Token(Token = "0x4000212")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ovrAvatarSkinnedMeshPose skinnedBindPose;
}
[Token(Token = "0x200005D")]
public struct ovrAvatarMeshAssetDataV2
{
	[Token(Token = "0x4000213")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public uint vertexCount;

	[Token(Token = "0x4000214")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public IntPtr vertexBuffer;

	[Token(Token = "0x4000215")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public uint indexCount;

	[Token(Token = "0x4000216")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public IntPtr indexBuffer;

	[Token(Token = "0x4000217")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ovrAvatarSkinnedMeshPose skinnedBindPose;
}
[Token(Token = "0x200005E")]
public enum ovrAvatarTextureFormat
{
	[Token(Token = "0x4000219")]
	RGB24,
	[Token(Token = "0x400021A")]
	DXT1,
	[Token(Token = "0x400021B")]
	DXT5,
	[Token(Token = "0x400021C")]
	ASTC_RGB_6x6,
	[Token(Token = "0x400021D")]
	ASTC_RGB_6x6_MIPMAPS,
	[Token(Token = "0x400021E")]
	Count
}
[Token(Token = "0x200005F")]
public struct ovrAvatarTextureAssetData
{
	[Token(Token = "0x400021F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarTextureFormat format;

	[Token(Token = "0x4000220")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public uint sizeX;

	[Token(Token = "0x4000221")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public uint sizeY;

	[Token(Token = "0x4000222")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public uint mipCount;

	[Token(Token = "0x4000223")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ulong textureDataSize;

	[Token(Token = "0x4000224")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public IntPtr textureData;
}
[Token(Token = "0x2000060")]
public enum ovrAvatarRenderPartType
{
	[Token(Token = "0x4000226")]
	SkinnedMeshRender,
	[Token(Token = "0x4000227")]
	SkinnedMeshRenderPBS,
	[Token(Token = "0x4000228")]
	ProjectorRender,
	[Token(Token = "0x4000229")]
	SkinnedMeshRenderPBS_V2,
	[Token(Token = "0x400022A")]
	Count
}
[Token(Token = "0x2000061")]
public enum ovrAvatarLogLevel
{
	[Token(Token = "0x400022C")]
	Unknown,
	[Token(Token = "0x400022D")]
	Default,
	[Token(Token = "0x400022E")]
	Verbose,
	[Token(Token = "0x400022F")]
	Debug,
	[Token(Token = "0x4000230")]
	Info,
	[Token(Token = "0x4000231")]
	Warn,
	[Token(Token = "0x4000232")]
	Error,
	[Token(Token = "0x4000233")]
	Fatal,
	[Token(Token = "0x4000234")]
	Silent
}
[Token(Token = "0x2000062")]
public struct ovrAvatarTransform
{
	[Token(Token = "0x4000235")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public Vector3 position;

	[Token(Token = "0x4000236")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Quaternion orientation;

	[Token(Token = "0x4000237")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Vector3 scale;
}
[Token(Token = "0x2000063")]
[Flags]
public enum ovrAvatarButton
{
	[Token(Token = "0x4000239")]
	One = 1,
	[Token(Token = "0x400023A")]
	Two = 2,
	[Token(Token = "0x400023B")]
	Three = 4,
	[Token(Token = "0x400023C")]
	Joystick = 8
}
[Token(Token = "0x2000064")]
[Flags]
public enum ovrAvatarTouch
{
	[Token(Token = "0x400023E")]
	One = 1,
	[Token(Token = "0x400023F")]
	Two = 2,
	[Token(Token = "0x4000240")]
	Joystick = 4,
	[Token(Token = "0x4000241")]
	ThumbRest = 8,
	[Token(Token = "0x4000242")]
	Index = 0x10,
	[Token(Token = "0x4000243")]
	Pointing = 0x40,
	[Token(Token = "0x4000244")]
	ThumbUp = 0x80
}
[Token(Token = "0x2000065")]
public struct ovrAvatarHandInputState
{
	[Token(Token = "0x4000245")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarTransform transform;

	[Token(Token = "0x4000246")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ovrAvatarButton buttonMask;

	[Token(Token = "0x4000247")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public ovrAvatarTouch touchMask;

	[Token(Token = "0x4000248")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float joystickX;

	[Token(Token = "0x4000249")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float joystickY;

	[Token(Token = "0x400024A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float indexTrigger;

	[Token(Token = "0x400024B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float handTrigger;

	[Token(Token = "0x400024C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool isActive;
}
[Token(Token = "0x2000066")]
public struct ovrAvatarComponent
{
	[Token(Token = "0x400024D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarTransform transform;

	[Token(Token = "0x400024E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public uint renderPartCount;

	[Token(Token = "0x400024F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public IntPtr renderParts;

	[Token(Token = "0x4000250")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public string name;
}
[Token(Token = "0x2000067")]
internal struct ovrAvatarComponent_Offsets
{
	[Token(Token = "0x4000251")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static long transform;

	[Token(Token = "0x4000252")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static int renderPartCount;

	[Token(Token = "0x4000253")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public static int renderParts;

	[Token(Token = "0x4000254")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static int name;
}
[Token(Token = "0x2000068")]
public struct ovrAvatarBaseComponent
{
	[Token(Token = "0x4000255")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public Vector3 basePosition;

	[Token(Token = "0x4000256")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public IntPtr renderComponent;
}
[Token(Token = "0x2000069")]
public struct ovrAvatarBodyComponent
{
	[Token(Token = "0x4000257")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarTransform leftEyeTransform;

	[Token(Token = "0x4000258")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ovrAvatarTransform rightEyeTransform;

	[Token(Token = "0x4000259")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public ovrAvatarTransform centerEyeTransform;

	[Token(Token = "0x400025A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public IntPtr renderComponent;
}
[Token(Token = "0x200006A")]
public struct ovrAvatarBodyComponent_Offsets
{
	[Token(Token = "0x400025B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static long leftEyeTransform;

	[Token(Token = "0x400025C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static long rightEyeTransform;

	[Token(Token = "0x400025D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static long centerEyeTransform;

	[Token(Token = "0x400025E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static long renderComponent;
}
[Token(Token = "0x200006B")]
public struct ovrAvatarControllerComponent
{
	[Token(Token = "0x400025F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarHandInputState inputState;

	[Token(Token = "0x4000260")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public IntPtr renderComponent;
}
[Token(Token = "0x200006C")]
public struct ovrAvatarHandComponent
{
	[Token(Token = "0x4000261")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarHandInputState inputState;

	[Token(Token = "0x4000262")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public IntPtr renderComponent;
}
[Token(Token = "0x200006D")]
public enum ovrAvatarMaterialLayerBlendMode
{
	[Token(Token = "0x4000264")]
	Add,
	[Token(Token = "0x4000265")]
	Multiply,
	[Token(Token = "0x4000266")]
	Count
}
[Token(Token = "0x200006E")]
public enum ovrAvatarMaterialLayerSampleMode
{
	[Token(Token = "0x4000268")]
	Color,
	[Token(Token = "0x4000269")]
	Texture,
	[Token(Token = "0x400026A")]
	TextureSingleChannel,
	[Token(Token = "0x400026B")]
	Parallax,
	[Token(Token = "0x400026C")]
	Count
}
[Token(Token = "0x200006F")]
public enum ovrAvatarMaterialMaskType
{
	[Token(Token = "0x400026E")]
	None,
	[Token(Token = "0x400026F")]
	Positional,
	[Token(Token = "0x4000270")]
	ViewReflection,
	[Token(Token = "0x4000271")]
	Fresnel,
	[Token(Token = "0x4000272")]
	Pulse,
	[Token(Token = "0x4000273")]
	Count
}
[Token(Token = "0x2000070")]
public enum ovrAvatarControllerType
{
	[Token(Token = "0x4000275")]
	Touch,
	[Token(Token = "0x4000276")]
	Malibu,
	[Token(Token = "0x4000277")]
	Go,
	[Token(Token = "0x4000278")]
	Quest,
	[Token(Token = "0x4000279")]
	Count
}
[Token(Token = "0x2000071")]
public enum ovrAvatarAssetLevelOfDetail
{
	[Token(Token = "0x400027B")]
	Lowest = 1,
	[Token(Token = "0x400027C")]
	Medium = 3,
	[Token(Token = "0x400027D")]
	Highest = 5
}
[Token(Token = "0x2000072")]
public enum ovrAvatarLookAndFeelVersion
{
	[Token(Token = "0x400027F")]
	Unknown = -1,
	[Token(Token = "0x4000280")]
	One,
	[Token(Token = "0x4000281")]
	Two
}
[Token(Token = "0x2000073")]
public struct ovrAvatarMaterialLayerState
{
	[Token(Token = "0x4000282")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarMaterialLayerBlendMode blendMode;

	[Token(Token = "0x4000283")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public ovrAvatarMaterialLayerSampleMode sampleMode;

	[Token(Token = "0x4000284")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public ovrAvatarMaterialMaskType maskType;

	[Token(Token = "0x4000285")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Vector4 layerColor;

	[Token(Token = "0x4000286")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Vector4 sampleParameters;

	[Token(Token = "0x4000287")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ulong sampleTexture;

	[Token(Token = "0x4000288")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Vector4 sampleScaleOffset;

	[Token(Token = "0x4000289")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Vector4 maskParameters;

	[Token(Token = "0x400028A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Vector4 maskAxis;

	[Token(Token = "0x600018D")]
	[Address(RVA = "0xA4D3C0", Offset = "0xA4D3C0", VA = "0xA4D3C0")]
	private static bool VectorEquals(Vector4 a, Vector4 b)
	{
		return default(bool);
	}

	[Token(Token = "0x600018E")]
	[Address(RVA = "0xA4D3F0", Offset = "0xA4D3F0", VA = "0xA4D3F0", Slot = "0")]
	public override bool Equals(object obj)
	{
		return default(bool);
	}

	[Token(Token = "0x600018F")]
	[Address(RVA = "0xA4D600", Offset = "0xA4D600", VA = "0xA4D600", Slot = "2")]
	public override int GetHashCode()
	{
		return default(int);
	}
}
[Token(Token = "0x2000074")]
public struct ovrAvatarMaterialState
{
	[Token(Token = "0x400028B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public Vector4 baseColor;

	[Token(Token = "0x400028C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ovrAvatarMaterialMaskType baseMaskType;

	[Token(Token = "0x400028D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Vector4 baseMaskParameters;

	[Token(Token = "0x400028E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Vector4 baseMaskAxis;

	[Token(Token = "0x400028F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public ovrAvatarMaterialLayerSampleMode sampleMode;

	[Token(Token = "0x4000290")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public ulong alphaMaskTextureID;

	[Token(Token = "0x4000291")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Vector4 alphaMaskScaleOffset;

	[Token(Token = "0x4000292")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public ulong normalMapTextureID;

	[Token(Token = "0x4000293")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Vector4 normalMapScaleOffset;

	[Token(Token = "0x4000294")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public ulong parallaxMapTextureID;

	[Token(Token = "0x4000295")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Vector4 parallaxMapScaleOffset;

	[Token(Token = "0x4000296")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public ulong roughnessMapTextureID;

	[Token(Token = "0x4000297")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Vector4 roughnessMapScaleOffset;

	[Token(Token = "0x4000298")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public uint layerCount;

	[Token(Token = "0x4000299")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public ovrAvatarMaterialLayerState[] layers;

	[Token(Token = "0x6000190")]
	[Address(RVA = "0xA4D844", Offset = "0xA4D844", VA = "0xA4D844")]
	private static bool VectorEquals(Vector4 a, Vector4 b)
	{
		return default(bool);
	}

	[Token(Token = "0x6000191")]
	[Address(RVA = "0xA4D874", Offset = "0xA4D874", VA = "0xA4D874", Slot = "0")]
	public override bool Equals(object obj)
	{
		return default(bool);
	}

	[Token(Token = "0x6000192")]
	[Address(RVA = "0xA4DC04", Offset = "0xA4DC04", VA = "0xA4DC04", Slot = "2")]
	public override int GetHashCode()
	{
		return default(int);
	}
}
[Token(Token = "0x2000075")]
public struct ovrAvatarExpressiveParameters
{
	[Token(Token = "0x400029A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public Vector4 irisColor;

	[Token(Token = "0x400029B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Vector4 scleraColor;

	[Token(Token = "0x400029C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector4 lashColor;

	[Token(Token = "0x400029D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector4 browColor;

	[Token(Token = "0x400029E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Vector4 lipColor;

	[Token(Token = "0x400029F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Vector4 teethColor;

	[Token(Token = "0x40002A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Vector4 gumColor;

	[Token(Token = "0x40002A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public float browLashIntensity;

	[Token(Token = "0x40002A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public float lipSmoothness;

	[Token(Token = "0x6000193")]
	[Address(RVA = "0xA4DFAC", Offset = "0xA4DFAC", VA = "0xA4DFAC")]
	private static bool VectorEquals(Vector4 a, Vector4 b)
	{
		return default(bool);
	}

	[Token(Token = "0x6000194")]
	[Address(RVA = "0xA4DFDC", Offset = "0xA4DFDC", VA = "0xA4DFDC", Slot = "0")]
	public override bool Equals(object obj)
	{
		return default(bool);
	}

	[Token(Token = "0x6000195")]
	[Address(RVA = "0xA4E224", Offset = "0xA4E224", VA = "0xA4E224", Slot = "2")]
	public override int GetHashCode()
	{
		return default(int);
	}
}
[Token(Token = "0x2000076")]
public struct ovrAvatarPBSMaterialState
{
	[Token(Token = "0x40002A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public Vector4 baseColor;

	[Token(Token = "0x40002A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ulong albedoTextureID;

	[Token(Token = "0x40002A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector4 albedoMultiplier;

	[Token(Token = "0x40002A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ulong metallicnessTextureID;

	[Token(Token = "0x40002A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float glossinessScale;

	[Token(Token = "0x40002A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public ulong normalTextureID;

	[Token(Token = "0x40002A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public ulong heightTextureID;

	[Token(Token = "0x40002AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public ulong occlusionTextureID;

	[Token(Token = "0x40002AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public ulong emissionTextureID;

	[Token(Token = "0x40002AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Vector4 emissionMultiplier;

	[Token(Token = "0x40002AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public ulong detailMaskTextureID;

	[Token(Token = "0x40002AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public ulong detailAlbedoTextureID;

	[Token(Token = "0x40002AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public ulong detailNormalTextureID;

	[Token(Token = "0x6000196")]
	[Address(RVA = "0xA4E4F8", Offset = "0xA4E4F8", VA = "0xA4E4F8")]
	private static bool VectorEquals(Vector4 a, Vector4 b)
	{
		return default(bool);
	}

	[Token(Token = "0x6000197")]
	[Address(RVA = "0xA4E528", Offset = "0xA4E528", VA = "0xA4E528", Slot = "0")]
	public override bool Equals(object obj)
	{
		return default(bool);
	}

	[Token(Token = "0x6000198")]
	[Address(RVA = "0xA4E6F0", Offset = "0xA4E6F0", VA = "0xA4E6F0", Slot = "2")]
	public override int GetHashCode()
	{
		return default(int);
	}
}
[Token(Token = "0x2000077")]
public class OvrAvatarAssetMaterial : OvrAvatarAsset
{
	[Token(Token = "0x40002B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ovrAvatarMaterialState material;

	[Token(Token = "0x6000199")]
	[Address(RVA = "0xA4E904", Offset = "0xA4E904", VA = "0xA4E904")]
	public OvrAvatarAssetMaterial(ulong id, IntPtr mat)
	{
	}
}
[Token(Token = "0x2000078")]
public struct ovrAvatarSkinnedMeshPose
{
	[Token(Token = "0x40002B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public uint jointCount;

	[Token(Token = "0x40002B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public ovrAvatarTransform[] jointTransform;

	[Token(Token = "0x40002B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int[] jointParents;

	[Token(Token = "0x40002B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public IntPtr[] jointNames;
}
[Token(Token = "0x2000079")]
[Flags]
public enum ovrAvatarVisibilityFlags
{
	[Token(Token = "0x40002B6")]
	FirstPerson = 1,
	[Token(Token = "0x40002B7")]
	ThirdPerson = 2,
	[Token(Token = "0x40002B8")]
	SelfOccluding = 4
}
[Token(Token = "0x200007A")]
public struct ovrAvatarRenderPart_SkinnedMeshRender
{
	[Token(Token = "0x40002B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarTransform localTransform;

	[Token(Token = "0x40002BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ovrAvatarVisibilityFlags visibilityMask;

	[Token(Token = "0x40002BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ulong meshAssetID;

	[Token(Token = "0x40002BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public ovrAvatarMaterialState materialState;

	[Token(Token = "0x40002BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public ovrAvatarSkinnedMeshPose skinnedPose;
}
[Token(Token = "0x200007B")]
public struct ovrAvatarRenderPart_SkinnedMeshRenderPBS
{
	[Token(Token = "0x40002BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarTransform localTransform;

	[Token(Token = "0x40002BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ovrAvatarVisibilityFlags visibilityMask;

	[Token(Token = "0x40002C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ulong meshAssetID;

	[Token(Token = "0x40002C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public ulong albedoTextureAssetID;

	[Token(Token = "0x40002C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public ulong surfaceTextureAssetID;

	[Token(Token = "0x40002C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public ovrAvatarSkinnedMeshPose skinnedPose;
}
[Token(Token = "0x200007C")]
public struct ovrAvatarRenderPart_ProjectorRender
{
	[Token(Token = "0x40002C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarTransform localTransform;

	[Token(Token = "0x40002C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public uint componentIndex;

	[Token(Token = "0x40002C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public uint renderPartIndex;

	[Token(Token = "0x40002C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ovrAvatarMaterialState materialState;
}
[Token(Token = "0x200007D")]
public struct ovrAvatarRenderPart_SkinnedMeshRenderPBS_V2
{
	[Token(Token = "0x40002C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarTransform localTransform;

	[Token(Token = "0x40002C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ovrAvatarVisibilityFlags visibilityMask;

	[Token(Token = "0x40002CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ulong meshAssetID;

	[Token(Token = "0x40002CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public ovrAvatarPBSMaterialState materialState;

	[Token(Token = "0x40002CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public ovrAvatarSkinnedMeshPose skinnedPose;
}
[Token(Token = "0x200007E")]
public enum ovrAvatarHandGesture
{
	[Token(Token = "0x40002CE")]
	Default,
	[Token(Token = "0x40002CF")]
	GripSphere,
	[Token(Token = "0x40002D0")]
	GripCube,
	[Token(Token = "0x40002D1")]
	Count
}
[Token(Token = "0x200007F")]
public enum ovrAvatarBodyPartType
{
	[Token(Token = "0x40002D3")]
	Body,
	[Token(Token = "0x40002D4")]
	Clothing,
	[Token(Token = "0x40002D5")]
	Eyewear,
	[Token(Token = "0x40002D6")]
	Hair,
	[Token(Token = "0x40002D7")]
	Beard,
	[Token(Token = "0x40002D8")]
	Count
}
[Token(Token = "0x2000080")]
public struct ovrAvatarBlendShapeParams
{
	[Token(Token = "0x40002D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public uint blendShapeParamCount;

	[Token(Token = "0x40002DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public float[] blendShapeParams;
}
[Token(Token = "0x2000081")]
internal struct ovrAvatarBlendShapeParams_Offsets
{
	[Token(Token = "0x40002DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int blendShapeParamCount;

	[Token(Token = "0x40002DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static long blendShapeParams;
}
[Token(Token = "0x2000082")]
public struct ovrAvatarVisemes
{
	[Token(Token = "0x40002DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public uint visemeParamCount;

	[Token(Token = "0x40002DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public float[] visemeParams;
}
[Token(Token = "0x2000083")]
internal struct ovrAvatarVisemes_Offsets
{
	[Token(Token = "0x40002DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int visemeParamCount;

	[Token(Token = "0x40002E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static long visemeParams;
}
[Token(Token = "0x2000084")]
public enum ovrAvatarGazeTargetType
{
	[Token(Token = "0x40002E2")]
	AvatarHead,
	[Token(Token = "0x40002E3")]
	AvatarHand,
	[Token(Token = "0x40002E4")]
	Object,
	[Token(Token = "0x40002E5")]
	ObjectStatic,
	[Token(Token = "0x40002E6")]
	Count
}
[Token(Token = "0x2000085")]
public struct ovrAvatarGazeTarget
{
	[Token(Token = "0x40002E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public uint id;

	[Token(Token = "0x40002E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public Vector3 worldPosition;

	[Token(Token = "0x40002E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ovrAvatarGazeTargetType type;
}
[Token(Token = "0x2000086")]
internal struct ovrAvatarGazeTarget_Offsets
{
	[Token(Token = "0x40002EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int id;

	[Token(Token = "0x40002EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static int worldPosition;

	[Token(Token = "0x40002EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static int type;
}
[Token(Token = "0x2000087")]
public struct ovrAvatarGazeTargets
{
	[Token(Token = "0x40002ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public uint targetCount;

	[Token(Token = "0x40002EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public ovrAvatarGazeTarget[] targets;
}
[Token(Token = "0x2000088")]
internal struct ovrAvatarGazeTargets_Offsets
{
	[Token(Token = "0x40002EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int targetCount;

	[Token(Token = "0x40002F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static long targets;
}
[Token(Token = "0x2000089")]
public enum ovrAvatarLightType
{
	[Token(Token = "0x40002F2")]
	Point,
	[Token(Token = "0x40002F3")]
	Direction,
	[Token(Token = "0x40002F4")]
	Spot,
	[Token(Token = "0x40002F5")]
	Count
}
[Token(Token = "0x200008A")]
public struct ovrAvatarLight
{
	[Token(Token = "0x40002F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public uint id;

	[Token(Token = "0x40002F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public ovrAvatarLightType type;

	[Token(Token = "0x40002F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public float intensity;

	[Token(Token = "0x40002F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Vector3 worldDirection;

	[Token(Token = "0x40002FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 worldPosition;

	[Token(Token = "0x40002FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float range;

	[Token(Token = "0x40002FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float spotAngleDeg;
}
[Token(Token = "0x200008B")]
internal struct ovrAvatarLight_Offsets
{
	[Token(Token = "0x40002FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static long id;

	[Token(Token = "0x40002FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static long type;

	[Token(Token = "0x40002FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static long intensity;

	[Token(Token = "0x4000300")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static long worldDirection;

	[Token(Token = "0x4000301")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public static long worldPosition;

	[Token(Token = "0x4000302")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public static long range;

	[Token(Token = "0x4000303")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public static long spotAngleDeg;
}
[Token(Token = "0x200008C")]
public struct ovrAvatarLights
{
	[Token(Token = "0x4000304")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public float ambientIntensity;

	[Token(Token = "0x4000305")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public uint lightCount;

	[Token(Token = "0x4000306")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public ovrAvatarLight[] lights;
}
[Token(Token = "0x200008D")]
internal struct ovrAvatarLights_Offsets
{
	[Token(Token = "0x4000307")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static long ambientIntensity;

	[Token(Token = "0x4000308")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static long lightCount;

	[Token(Token = "0x4000309")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static long lights;
}
[Token(Token = "0x200008E")]
[Flags]
public enum ovrAvatarDebugContext : uint
{
	[Token(Token = "0x400030B")]
	None = 0u,
	[Token(Token = "0x400030C")]
	GazeTarget = 1u,
	[Token(Token = "0x400030D")]
	Any = uint.MaxValue
}
[Token(Token = "0x200008F")]
public struct ovrAvatarDebugLine
{
	[Token(Token = "0x400030E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public Vector3 startPoint;

	[Token(Token = "0x400030F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Vector3 endPoint;

	[Token(Token = "0x4000310")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 color;

	[Token(Token = "0x4000311")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public ovrAvatarDebugContext context;

	[Token(Token = "0x4000312")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public IntPtr text;
}
[Token(Token = "0x2000090")]
public struct ovrAvatarDebugTransform
{
	[Token(Token = "0x4000313")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarTransform transform;

	[Token(Token = "0x4000314")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ovrAvatarDebugContext context;

	[Token(Token = "0x4000315")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public IntPtr text;
}
[Token(Token = "0x2000091")]
public delegate void specificationCallback(IntPtr specification);
[Token(Token = "0x2000092")]
public delegate void assetLoadedCallback(OvrAvatarAsset asset);
[Token(Token = "0x2000093")]
public delegate void combinedMeshLoadedCallback(IntPtr asset);
[Token(Token = "0x2000094")]
public class OvrAvatarSDKManager : MonoBehaviour
{
	[Token(Token = "0x2000095")]
	public struct AvatarSpecRequestParams
	{
		[Token(Token = "0x4000323")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong _userId;

		[Token(Token = "0x4000324")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public specificationCallback _callback;

		[Token(Token = "0x4000325")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool _useCombinedMesh;

		[Token(Token = "0x4000326")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public ovrAvatarAssetLevelOfDetail _lod;

		[Token(Token = "0x4000327")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool _forceMobileTextureFormat;

		[Token(Token = "0x4000328")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public ovrAvatarLookAndFeelVersion _lookVersion;

		[Token(Token = "0x4000329")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ovrAvatarLookAndFeelVersion _fallbackVersion;

		[Token(Token = "0x400032A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool _enableExpressive;

		[Token(Token = "0x60001BD")]
		[Address(RVA = "0xA509AC", Offset = "0xA509AC", VA = "0xA509AC")]
		public AvatarSpecRequestParams(ulong userId, specificationCallback callback, bool useCombinedMesh, ovrAvatarAssetLevelOfDetail lod, bool forceMobileTextureFormat, ovrAvatarLookAndFeelVersion lookVersion, ovrAvatarLookAndFeelVersion fallbackVersion, bool enableExpressive)
		{
		}
	}

	[Token(Token = "0x4000316")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static OvrAvatarSDKManager _instance;

	[Token(Token = "0x4000317")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool initialized;

	[Token(Token = "0x4000318")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Dictionary<ulong, HashSet<specificationCallback>> specificationCallbacks;

	[Token(Token = "0x4000319")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Dictionary<ulong, HashSet<assetLoadedCallback>> assetLoadedCallbacks;

	[Token(Token = "0x400031A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Dictionary<IntPtr, combinedMeshLoadedCallback> combinedMeshLoadedCallbacks;

	[Token(Token = "0x400031B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Dictionary<ulong, OvrAvatarAsset> assetCache;

	[Token(Token = "0x400031C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private OvrAvatarTextureCopyManager textureCopyManager;

	[Token(Token = "0x400031D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public ovrAvatarLogLevel LoggingLevel;

	[Token(Token = "0x400031E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Queue<AvatarSpecRequestParams> avatarSpecificationQueue;

	[Token(Token = "0x400031F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private List<int> loadingAvatars;

	[Token(Token = "0x4000320")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool avatarSpecRequestAvailable;

	[Token(Token = "0x4000321")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private float lastDispatchedAvatarSpecRequestTime;

	[Token(Token = "0x4000322")]
	private const float AVATAR_SPEC_REQUEST_TIMEOUT = 5f;

	[Token(Token = "0x17000011")]
	public static OvrAvatarSDKManager Instance
	{
		[Token(Token = "0x60001AC")]
		[Address(RVA = "0xA48AB8", Offset = "0xA48AB8", VA = "0xA48AB8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60001AD")]
	[Address(RVA = "0xA4F724", Offset = "0xA4F724", VA = "0xA4F724")]
	private bool Initialize()
	{
		return default(bool);
	}

	[Token(Token = "0x60001AE")]
	[Address(RVA = "0xA4FA2C", Offset = "0xA4FA2C", VA = "0xA4FA2C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60001AF")]
	[Address(RVA = "0xA4FA90", Offset = "0xA4FA90", VA = "0xA4FA90")]
	private void Update()
	{
	}

	[Token(Token = "0x60001B0")]
	[Address(RVA = "0xA50430", Offset = "0xA50430", VA = "0xA50430")]
	public bool IsAvatarSpecWaiting()
	{
		return default(bool);
	}

	[Token(Token = "0x60001B1")]
	[Address(RVA = "0xA50480", Offset = "0xA50480", VA = "0xA50480")]
	public bool IsAvatarLoading()
	{
		return default(bool);
	}

	[Token(Token = "0x60001B2")]
	[Address(RVA = "0xA504D0", Offset = "0xA504D0", VA = "0xA504D0")]
	public void AddLoadingAvatar(int gameobjectID)
	{
	}

	[Token(Token = "0x60001B3")]
	[Address(RVA = "0xA50578", Offset = "0xA50578", VA = "0xA50578")]
	public void RemoveLoadingAvatar(int gameobjectID)
	{
	}

	[Token(Token = "0x60001B4")]
	[Address(RVA = "0xA505D0", Offset = "0xA505D0", VA = "0xA505D0")]
	public void RequestAvatarSpecification(AvatarSpecRequestParams avatarSpecRequest)
	{
	}

	[Token(Token = "0x60001B5")]
	[Address(RVA = "0xA50254", Offset = "0xA50254", VA = "0xA50254")]
	private void DispatchAvatarSpecificationRequest(AvatarSpecRequestParams avatarSpecRequest)
	{
	}

	[Token(Token = "0x60001B6")]
	[Address(RVA = "0xA50694", Offset = "0xA50694", VA = "0xA50694")]
	public void BeginLoadingAsset(ulong assetId, ovrAvatarAssetLevelOfDetail lod, assetLoadedCallback callback)
	{
	}

	[Token(Token = "0x60001B7")]
	[Address(RVA = "0xA507E0", Offset = "0xA507E0", VA = "0xA507E0")]
	public void RegisterCombinedMeshCallback(IntPtr sdkAvatar, combinedMeshLoadedCallback callback)
	{
	}

	[Token(Token = "0x60001B8")]
	[Address(RVA = "0xA4CB24", Offset = "0xA4CB24", VA = "0xA4CB24")]
	public OvrAvatarAsset GetAsset(ulong assetId)
	{
		return null;
	}

	[Token(Token = "0x60001B9")]
	[Address(RVA = "0xA508CC", Offset = "0xA508CC", VA = "0xA508CC")]
	public void DeleteAssetFromCache(ulong assetId)
	{
	}

	[Token(Token = "0x60001BA")]
	[Address(RVA = "0xA4F9EC", Offset = "0xA4F9EC", VA = "0xA4F9EC")]
	public string GetAppId()
	{
		return null;
	}

	[Token(Token = "0x60001BB")]
	[Address(RVA = "0xA48C78", Offset = "0xA48C78", VA = "0xA48C78")]
	public OvrAvatarTextureCopyManager GetTextureCopyManager()
	{
		return null;
	}

	[Token(Token = "0x60001BC")]
	[Address(RVA = "0xA50994", Offset = "0xA50994", VA = "0xA50994")]
	public OvrAvatarSDKManager()
	{
	}
}
[Token(Token = "0x2000096")]
public sealed class OvrAvatarSettings : ScriptableObject
{
	[Token(Token = "0x400032B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static OvrAvatarSettings instance;

	[Token(Token = "0x400032C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private string ovrAppID;

	[Token(Token = "0x400032D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private string ovrGearAppID;

	[Token(Token = "0x17000012")]
	public static string AppID
	{
		[Token(Token = "0x60001BE")]
		[Address(RVA = "0xA5095C", Offset = "0xA5095C", VA = "0xA5095C")]
		get
		{
			return null;
		}
		[Token(Token = "0x60001BF")]
		[Address(RVA = "0xA50AFC", Offset = "0xA50AFC", VA = "0xA50AFC")]
		set
		{
		}
	}

	[Token(Token = "0x17000013")]
	public static string MobileAppID
	{
		[Token(Token = "0x60001C0")]
		[Address(RVA = "0xA50978", Offset = "0xA50978", VA = "0xA50978")]
		get
		{
			return null;
		}
		[Token(Token = "0x60001C1")]
		[Address(RVA = "0xA50B1C", Offset = "0xA50B1C", VA = "0xA50B1C")]
		set
		{
		}
	}

	[Token(Token = "0x17000014")]
	public static OvrAvatarSettings Instance
	{
		[Token(Token = "0x60001C2")]
		[Address(RVA = "0xA509D8", Offset = "0xA509D8", VA = "0xA509D8")]
		get
		{
			return null;
		}
		[Token(Token = "0x60001C3")]
		[Address(RVA = "0xA50B3C", Offset = "0xA50B3C", VA = "0xA50B3C")]
		set
		{
		}
	}

	[Token(Token = "0x60001C4")]
	[Address(RVA = "0xA50B88", Offset = "0xA50B88", VA = "0xA50B88")]
	public OvrAvatarSettings()
	{
	}
}
[Token(Token = "0x2000097")]
public class OvrAvatarSkinnedMeshRenderComponent : OvrAvatarRenderComponent
{
	[Token(Token = "0x400032E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Shader surface;

	[Token(Token = "0x400032F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Shader surfaceSelfOccluding;

	[Token(Token = "0x4000330")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool previouslyActive;

	[Token(Token = "0x60001C5")]
	[Address(RVA = "0xA50BD8", Offset = "0xA50BD8", VA = "0xA50BD8")]
	internal void Initialize(ovrAvatarRenderPart_SkinnedMeshRender skinnedMeshRender, Shader surface, Shader surfaceSelfOccluding, int thirdPersonLayer, int firstPersonLayer)
	{
	}

	[Token(Token = "0x60001C6")]
	[Address(RVA = "0xA50E64", Offset = "0xA50E64", VA = "0xA50E64")]
	public void UpdateSkinnedMeshRender(OvrAvatarComponent component, OvrAvatar avatar, IntPtr renderPart)
	{
	}

	[Token(Token = "0x60001C7")]
	[Address(RVA = "0xA50D1C", Offset = "0xA50D1C", VA = "0xA50D1C")]
	private void UpdateMeshMaterial(ovrAvatarVisibilityFlags visibilityMask, SkinnedMeshRenderer rootMesh)
	{
	}

	[Token(Token = "0x60001C8")]
	[Address(RVA = "0xA51074", Offset = "0xA51074", VA = "0xA51074")]
	public OvrAvatarSkinnedMeshRenderComponent()
	{
	}
}
[Token(Token = "0x2000098")]
public class OvrAvatarSkinnedMeshRenderPBSComponent : OvrAvatarRenderComponent
{
	[Token(Token = "0x4000331")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	private bool isMaterialInitilized;

	[Token(Token = "0x60001C9")]
	[Address(RVA = "0xA51084", Offset = "0xA51084", VA = "0xA51084")]
	internal void Initialize(ovrAvatarRenderPart_SkinnedMeshRenderPBS skinnedMeshRenderPBS, Shader shader, int thirdPersonLayer, int firstPersonLayer)
	{
	}

	[Token(Token = "0x60001CA")]
	[Address(RVA = "0xA511BC", Offset = "0xA511BC", VA = "0xA511BC")]
	internal void UpdateSkinnedMeshRenderPBS(OvrAvatar avatar, IntPtr renderPart, Material mat)
	{
	}

	[Token(Token = "0x60001CB")]
	[Address(RVA = "0xA5136C", Offset = "0xA5136C", VA = "0xA5136C")]
	public OvrAvatarSkinnedMeshRenderPBSComponent()
	{
	}
}
[Token(Token = "0x2000099")]
public class OvrAvatarSkinnedMeshPBSV2RenderComponent : OvrAvatarRenderComponent
{
	[Token(Token = "0x4000332")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private OvrAvatarMaterialManager avatarMaterialManager;

	[Token(Token = "0x4000333")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool previouslyActive;

	[Token(Token = "0x4000334")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	private bool isCombinedMaterial;

	[Token(Token = "0x4000335")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private ovrAvatarExpressiveParameters ExpressiveParameters;

	[Token(Token = "0x4000336")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private bool EnableExpressive;

	[Token(Token = "0x4000337")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private int blendShapeCount;

	[Token(Token = "0x4000338")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private ovrAvatarBlendShapeParams blendShapeParams;

	[Token(Token = "0x4000339")]
	private const string MAIN_MATERIAL_NAME = "main_material";

	[Token(Token = "0x400033A")]
	private const string EYE_MATERIAL_NAME = "eye_material";

	[Token(Token = "0x400033B")]
	private const string DEFAULT_MATERIAL_NAME = "_material";

	[Token(Token = "0x60001CC")]
	[Address(RVA = "0xA5137C", Offset = "0xA5137C", VA = "0xA5137C")]
	internal void Initialize(IntPtr renderPart, ovrAvatarRenderPart_SkinnedMeshRenderPBS_V2 skinnedMeshRender, OvrAvatarMaterialManager materialManager, int thirdPersonLayer, int firstPersonLayer, bool combinedMesh, ovrAvatarAssetLevelOfDetail lod, bool assignExpressiveParams, OvrAvatar avatar, bool isControllerModel)
	{
	}

	[Token(Token = "0x60001CD")]
	[Address(RVA = "0xA52274", Offset = "0xA52274", VA = "0xA52274")]
	public void UpdateSkinnedMeshRender(OvrAvatarComponent component, OvrAvatar avatar, IntPtr renderPart)
	{
	}

	[Token(Token = "0x60001CE")]
	[Address(RVA = "0xA52480", Offset = "0xA52480", VA = "0xA52480")]
	private void InitializeSingleComponentMaterial(IntPtr renderPart, int lodIndex)
	{
	}

	[Token(Token = "0x60001CF")]
	[Address(RVA = "0xA51A54", Offset = "0xA51A54", VA = "0xA51A54")]
	private void InitializeCombinedMaterial(IntPtr renderPart, int lodIndex)
	{
	}

	[Token(Token = "0x60001D0")]
	[Address(RVA = "0xA51750", Offset = "0xA51750", VA = "0xA51750")]
	private void SetMaterialTransparent(Material mat)
	{
	}

	[Token(Token = "0x60001D1")]
	[Address(RVA = "0xA518C8", Offset = "0xA518C8", VA = "0xA518C8")]
	private void SetMaterialOpaque(Material mat)
	{
	}

	[Token(Token = "0x60001D2")]
	[Address(RVA = "0xA52C94", Offset = "0xA52C94", VA = "0xA52C94")]
	public OvrAvatarSkinnedMeshPBSV2RenderComponent()
	{
	}
}
[Token(Token = "0x200009A")]
public class OvrAvatarTextureCopyManager : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x200009B")]
	public struct FallbackTextureSet
	{
		[Token(Token = "0x400034A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool Initialized;

		[Token(Token = "0x400034B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Texture2D DiffuseRoughness;

		[Token(Token = "0x400034C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Texture2D Normal;
	}

	[Token(Token = "0x200009C")]
	private struct CopyTextureParams
	{
		[Token(Token = "0x400034D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Texture Src;

		[Token(Token = "0x400034E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Texture Dst;

		[Token(Token = "0x400034F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int Mip;

		[Token(Token = "0x4000350")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int SrcSize;

		[Token(Token = "0x4000351")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int DstElement;

		[Token(Token = "0x60001DD")]
		[Address(RVA = "0xA53264", Offset = "0xA53264", VA = "0xA53264")]
		public CopyTextureParams(Texture src, Texture dst, int mip, int srcSize, int dstElement)
		{
		}
	}

	[Token(Token = "0x200009D")]
	public struct TextureSet
	{
		[Token(Token = "0x4000352")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Dictionary<ulong, bool> TextureIDSingleMeshPair;

		[Token(Token = "0x4000353")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool IsProcessed;

		[Token(Token = "0x60001DE")]
		[Address(RVA = "0xA53274", Offset = "0xA53274", VA = "0xA53274")]
		public TextureSet(Dictionary<ulong, bool> textureIDSingleMeshPair, bool isProcessed)
		{
		}
	}

	[Token(Token = "0x200009E")]
	[CompilerGenerated]
	private sealed class <DeleteTextureSetCoroutine>d__24 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000354")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000355")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000356")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TextureSet textureSetToDelete;

		[Token(Token = "0x4000357")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public OvrAvatarTextureCopyManager <>4__this;

		[Token(Token = "0x4000358")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int gameobjectID;

		[Token(Token = "0x17000015")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60001E2")]
			[Address(RVA = "0xA539FC", Offset = "0xA539FC", VA = "0xA539FC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000016")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60001E4")]
			[Address(RVA = "0xA53A44", Offset = "0xA53A44", VA = "0xA53A44", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001DF")]
		[Address(RVA = "0xA53310", Offset = "0xA53310", VA = "0xA53310")]
		[DebuggerHidden]
		public <DeleteTextureSetCoroutine>d__24(int <>1__state)
		{
		}

		[Token(Token = "0x60001E0")]
		[Address(RVA = "0xA5343C", Offset = "0xA5343C", VA = "0xA5343C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001E1")]
		[Address(RVA = "0xA53440", Offset = "0xA53440", VA = "0xA53440", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001E3")]
		[Address(RVA = "0xA53A04", Offset = "0xA53A04", VA = "0xA53A04", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400033C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public FallbackTextureSet[] FallbackTextureSets;

	[Token(Token = "0x400033D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Queue<CopyTextureParams> texturesToCopy;

	[Token(Token = "0x400033E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Dictionary<int, TextureSet> textureSets;

	[Token(Token = "0x400033F")]
	private const int TEXTURES_TO_COPY_QUEUE_CAPACITY = 256;

	[Token(Token = "0x4000340")]
	private const int COPIES_PER_FRAME = 8;

	[Token(Token = "0x4000341")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private readonly string[] FALLBACK_TEXTURE_PATHS_DIFFUSE_ROUGHNESS;

	[Token(Token = "0x4000342")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private readonly string[] FALLBACK_TEXTURE_PATHS_NORMAL;

	[Token(Token = "0x4000343")]
	private const string PATH_HIGHEST_DIFFUSE_ROUGHNESS = "FallbackTextures/fallback_diffuse_roughness_2048";

	[Token(Token = "0x4000344")]
	private const string PATH_MEDIUM_DIFFUSE_ROUGHNESS = "FallbackTextures/fallback_diffuse_roughness_1024";

	[Token(Token = "0x4000345")]
	private const string PATH_LOWEST_DIFFUSE_ROUGHNESS = "FallbackTextures/fallback_diffuse_roughness_256";

	[Token(Token = "0x4000346")]
	private const string PATH_HIGHEST_NORMAL = "FallbackTextures/fallback_normal_2048";

	[Token(Token = "0x4000347")]
	private const string PATH_MEDIUM_NORMAL = "FallbackTextures/fallback_normal_1024";

	[Token(Token = "0x4000348")]
	private const string PATH_LOWEST_NORMAL = "FallbackTextures/fallback_normal_256";

	[Token(Token = "0x4000349")]
	private const int GPU_TEXTURE_COPY_WAIT_TIME = 10;

	[Token(Token = "0x60001D3")]
	[Address(RVA = "0xA52CA4", Offset = "0xA52CA4", VA = "0xA52CA4")]
	public OvrAvatarTextureCopyManager()
	{
	}

	[Token(Token = "0x60001D4")]
	[Address(RVA = "0xA53080", Offset = "0xA53080", VA = "0xA53080")]
	public void Update()
	{
	}

	[Token(Token = "0x60001D5")]
	[Address(RVA = "0xA4AD94", Offset = "0xA4AD94", VA = "0xA4AD94")]
	public int GetTextureCount()
	{
		return default(int);
	}

	[Token(Token = "0x60001D6")]
	[Address(RVA = "0xA49078", Offset = "0xA49078", VA = "0xA49078")]
	public void CopyTexture(Texture src, Texture dst, int mipLevel, int mipSize, int dstElement, bool useQueue = true)
	{
	}

	[Token(Token = "0x60001D7")]
	[Address(RVA = "0xA531E4", Offset = "0xA531E4", VA = "0xA531E4")]
	private void CopyTexture(CopyTextureParams copyTextureParams)
	{
	}

	[Token(Token = "0x60001D8")]
	[Address(RVA = "0xA48CEC", Offset = "0xA48CEC", VA = "0xA48CEC")]
	public void AddTextureIDToTextureSet(int gameobjectID, ulong textureID, bool isSingleMesh)
	{
	}

	[Token(Token = "0x60001D9")]
	[Address(RVA = "0xA48F10", Offset = "0xA48F10", VA = "0xA48F10")]
	public void DeleteTextureSet(int gameobjectID)
	{
	}

	[Token(Token = "0x60001DA")]
	[Address(RVA = "0xA53284", Offset = "0xA53284", VA = "0xA53284")]
	[IteratorStateMachine(typeof(<DeleteTextureSetCoroutine>d__24))]
	private IEnumerator DeleteTextureSetCoroutine(TextureSet textureSetToDelete, int gameobjectID)
	{
		return null;
	}

	[Token(Token = "0x60001DB")]
	[Address(RVA = "0xA50654", Offset = "0xA50654", VA = "0xA50654")]
	public void CheckFallbackTextureSet(ovrAvatarAssetLevelOfDetail lod)
	{
	}

	[Token(Token = "0x60001DC")]
	[Address(RVA = "0xA53338", Offset = "0xA53338", VA = "0xA53338")]
	private void InitFallbackTextureSet(ovrAvatarAssetLevelOfDetail lod)
	{
	}
}
[Token(Token = "0x200009F")]
public class OvrAvatarTouchController : OvrAvatarComponent
{
	[Token(Token = "0x4000359")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public bool isLeftHand;

	[Token(Token = "0x400035A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private ovrAvatarControllerComponent component;

	[Token(Token = "0x60001E5")]
	[Address(RVA = "0xA53A4C", Offset = "0xA53A4C", VA = "0xA53A4C")]
	private void Update()
	{
	}

	[Token(Token = "0x60001E6")]
	[Address(RVA = "0xA53B7C", Offset = "0xA53B7C", VA = "0xA53B7C")]
	public OvrAvatarTouchController()
	{
	}
}
[Token(Token = "0x20000A0")]
public class DebugUIBuilder : MonoBehaviour
{
	[Token(Token = "0x20000A1")]
	public delegate void OnClick();

	[Token(Token = "0x20000A2")]
	public delegate void OnToggleValueChange(Toggle t);

	[Token(Token = "0x20000A3")]
	public delegate void OnSlider(float f);

	[Token(Token = "0x20000A4")]
	public delegate bool ActiveUpdate();

	[Token(Token = "0x400035B")]
	public const int DEBUG_PANE_CENTER = 0;

	[Token(Token = "0x400035C")]
	public const int DEBUG_PANE_RIGHT = 1;

	[Token(Token = "0x400035D")]
	public const int DEBUG_PANE_LEFT = 2;

	[Token(Token = "0x400035E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private RectTransform buttonPrefab;

	[Token(Token = "0x400035F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private RectTransform labelPrefab;

	[Token(Token = "0x4000360")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private RectTransform sliderPrefab;

	[Token(Token = "0x4000361")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private RectTransform dividerPrefab;

	[Token(Token = "0x4000362")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private RectTransform togglePrefab;

	[Token(Token = "0x4000363")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private RectTransform radioPrefab;

	[Token(Token = "0x4000364")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private RectTransform textPrefab;

	[Token(Token = "0x4000365")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private GameObject uiHelpersToInstantiate;

	[Token(Token = "0x4000366")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private Transform[] targetContentPanels;

	[Token(Token = "0x4000367")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool[] reEnable;

	[Token(Token = "0x4000368")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private List<GameObject> toEnable;

	[Token(Token = "0x4000369")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private List<GameObject> toDisable;

	[Token(Token = "0x400036A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static DebugUIBuilder instance;

	[Token(Token = "0x400036B")]
	private const float elementSpacing = 16f;

	[Token(Token = "0x400036C")]
	public const float marginH = 16f;

	[Token(Token = "0x400036D")]
	public const float marginV = 16f;

	[Token(Token = "0x400036E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Vector2[] insertPositions;

	[Token(Token = "0x400036F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private List<RectTransform>[] insertedElements;

	[Token(Token = "0x4000370")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Vector3 menuOffset;

	[Token(Token = "0x4000371")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private OVRCameraRig rig;

	[Token(Token = "0x4000372")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private Dictionary<string, ToggleGroup> radioGroups;

	[Token(Token = "0x4000373")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private LaserPointer lp;

	[Token(Token = "0x4000374")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private LineRenderer lr;

	[Token(Token = "0x4000375")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public LaserPointer.LaserBeamBehavior laserBeamBehavior;

	[Token(Token = "0x4000376")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	public bool isHorizontal;

	[Token(Token = "0x60001E7")]
	[Address(RVA = "0xA53BDC", Offset = "0xA53BDC", VA = "0xA53BDC")]
	public void Awake()
	{
	}

	[Token(Token = "0x60001E8")]
	[Address(RVA = "0xA540C8", Offset = "0xA540C8", VA = "0xA540C8")]
	public void Show()
	{
	}

	[Token(Token = "0x60001E9")]
	[Address(RVA = "0xA5463C", Offset = "0xA5463C", VA = "0xA5463C")]
	public void Hide()
	{
	}

	[Token(Token = "0x60001EA")]
	[Address(RVA = "0xA54420", Offset = "0xA54420", VA = "0xA54420")]
	private void Relayout()
	{
	}

	[Token(Token = "0x60001EB")]
	[Address(RVA = "0xA547B8", Offset = "0xA547B8", VA = "0xA547B8")]
	private void AddRect(RectTransform r, int targetCanvas)
	{
	}

	[Token(Token = "0x60001EC")]
	[Address(RVA = "0xA54ABC", Offset = "0xA54ABC", VA = "0xA54ABC")]
	public RectTransform AddButton(string label, OnClick handler, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x60001ED")]
	[Address(RVA = "0xA54D3C", Offset = "0xA54D3C", VA = "0xA54D3C")]
	public RectTransform AddLabel(string label, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x60001EE")]
	[Address(RVA = "0xA54E34", Offset = "0xA54E34", VA = "0xA54E34")]
	public RectTransform AddSlider(string label, float min, float max, OnSlider onValueChanged, bool wholeNumbersOnly = false, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x60001EF")]
	[Address(RVA = "0xA54FF8", Offset = "0xA54FF8", VA = "0xA54FF8")]
	public RectTransform AddDivider(int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x60001F0")]
	[Address(RVA = "0xA55090", Offset = "0xA55090", VA = "0xA55090")]
	public RectTransform AddToggle(string label, OnToggleValueChange onValueChanged, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x60001F1")]
	[Address(RVA = "0xA5524C", Offset = "0xA5524C", VA = "0xA5524C")]
	public RectTransform AddToggle(string label, OnToggleValueChange onValueChanged, bool defaultValue, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x60001F2")]
	[Address(RVA = "0xA55428", Offset = "0xA55428", VA = "0xA55428")]
	public RectTransform AddRadio(string label, string group, OnToggleValueChange handler, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x60001F3")]
	[Address(RVA = "0xA55704", Offset = "0xA55704", VA = "0xA55704")]
	public RectTransform AddTextField(string label, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x60001F4")]
	[Address(RVA = "0xA557F4", Offset = "0xA557F4", VA = "0xA557F4")]
	public void ToggleLaserPointer(bool isOn)
	{
	}

	[Token(Token = "0x60001F5")]
	[Address(RVA = "0xA55888", Offset = "0xA55888", VA = "0xA55888")]
	public DebugUIBuilder()
	{
	}
}
[Token(Token = "0x20000AA")]
public class HandedInputSelector : MonoBehaviour
{
	[Token(Token = "0x400037F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private OVRCameraRig m_CameraRig;

	[Token(Token = "0x4000380")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private OVRInputModule m_InputModule;

	[Token(Token = "0x6000210")]
	[Address(RVA = "0xA55EAC", Offset = "0xA55EAC", VA = "0xA55EAC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000211")]
	[Address(RVA = "0xA55F3C", Offset = "0xA55F3C", VA = "0xA55F3C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000212")]
	[Address(RVA = "0xA55FD8", Offset = "0xA55FD8", VA = "0xA55FD8")]
	private void SetActiveController(OVRInput.Controller c)
	{
	}

	[Token(Token = "0x6000213")]
	[Address(RVA = "0xA56010", Offset = "0xA56010", VA = "0xA56010")]
	public HandedInputSelector()
	{
	}
}
[Token(Token = "0x20000AB")]
public class LaserPointer : OVRCursor
{
	[Token(Token = "0x20000AC")]
	public enum LaserBeamBehavior
	{
		[Token(Token = "0x400038B")]
		On,
		[Token(Token = "0x400038C")]
		Off,
		[Token(Token = "0x400038D")]
		OnWhenHitTarget
	}

	[Token(Token = "0x4000381")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject cursorVisual;

	[Token(Token = "0x4000382")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float maxLength;

	[Token(Token = "0x4000383")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private LaserBeamBehavior _laserBeamBehavior;

	[Token(Token = "0x4000384")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool m_restoreOnInputAcquired;

	[Token(Token = "0x4000385")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Vector3 _startPoint;

	[Token(Token = "0x4000386")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector3 _forward;

	[Token(Token = "0x4000387")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private Vector3 _endPoint;

	[Token(Token = "0x4000388")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool _hitTarget;

	[Token(Token = "0x4000389")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private LineRenderer lineRenderer;

	[Token(Token = "0x17000017")]
	public LaserBeamBehavior laserBeamBehavior
	{
		[Token(Token = "0x6000215")]
		[Address(RVA = "0xA56018", Offset = "0xA56018", VA = "0xA56018")]
		get
		{
			return default(LaserBeamBehavior);
		}
		[Token(Token = "0x6000214")]
		[Address(RVA = "0xA54088", Offset = "0xA54088", VA = "0xA54088")]
		set
		{
		}
	}

	[Token(Token = "0x6000216")]
	[Address(RVA = "0xA56020", Offset = "0xA56020", VA = "0xA56020")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000217")]
	[Address(RVA = "0xA56070", Offset = "0xA56070", VA = "0xA56070")]
	private void Start()
	{
	}

	[Token(Token = "0x6000218")]
	[Address(RVA = "0xA561A8", Offset = "0xA561A8", VA = "0xA561A8", Slot = "5")]
	public override void SetCursorStartDest(Vector3 start, Vector3 dest, Vector3 normal)
	{
	}

	[Token(Token = "0x6000219")]
	[Address(RVA = "0xA561C4", Offset = "0xA561C4", VA = "0xA561C4", Slot = "4")]
	public override void SetCursorRay(Transform t)
	{
	}

	[Token(Token = "0x600021A")]
	[Address(RVA = "0xA56214", Offset = "0xA56214", VA = "0xA56214")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x600021B")]
	[Address(RVA = "0xA563B4", Offset = "0xA563B4", VA = "0xA563B4")]
	private void UpdateLaserBeam(Vector3 start, Vector3 end)
	{
	}

	[Token(Token = "0x600021C")]
	[Address(RVA = "0xA564C4", Offset = "0xA564C4", VA = "0xA564C4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600021D")]
	[Address(RVA = "0xA56548", Offset = "0xA56548", VA = "0xA56548")]
	public void OnInputFocusLost()
	{
	}

	[Token(Token = "0x600021E")]
	[Address(RVA = "0xA56608", Offset = "0xA56608", VA = "0xA56608")]
	public void OnInputFocusAcquired()
	{
	}

	[Token(Token = "0x600021F")]
	[Address(RVA = "0xA566B0", Offset = "0xA566B0", VA = "0xA566B0")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000220")]
	[Address(RVA = "0xA5679C", Offset = "0xA5679C", VA = "0xA5679C")]
	public LaserPointer()
	{
	}
}
[Token(Token = "0x20000AD")]
public class OVRLaserPointer : OVRCursor
{
	[Token(Token = "0x20000AE")]
	public enum LaserBeamBehavior
	{
		[Token(Token = "0x4000398")]
		On,
		[Token(Token = "0x4000399")]
		Off,
		[Token(Token = "0x400039A")]
		OnWhenHitTarget
	}

	[Token(Token = "0x400038E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject cursorVisual;

	[Token(Token = "0x400038F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float maxLength;

	[Token(Token = "0x4000390")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private LaserBeamBehavior _laserBeamBehavior;

	[Token(Token = "0x4000391")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool m_restoreOnInputAcquired;

	[Token(Token = "0x4000392")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Vector3 _startPoint;

	[Token(Token = "0x4000393")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector3 _forward;

	[Token(Token = "0x4000394")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private Vector3 _endPoint;

	[Token(Token = "0x4000395")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool _hitTarget;

	[Token(Token = "0x4000396")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private LineRenderer lineRenderer;

	[Token(Token = "0x17000018")]
	public LaserBeamBehavior laserBeamBehavior
	{
		[Token(Token = "0x6000222")]
		[Address(RVA = "0xA567EC", Offset = "0xA567EC", VA = "0xA567EC")]
		get
		{
			return default(LaserBeamBehavior);
		}
		[Token(Token = "0x6000221")]
		[Address(RVA = "0xA567AC", Offset = "0xA567AC", VA = "0xA567AC")]
		set
		{
		}
	}

	[Token(Token = "0x6000223")]
	[Address(RVA = "0xA567F4", Offset = "0xA567F4", VA = "0xA567F4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000224")]
	[Address(RVA = "0xA56844", Offset = "0xA56844", VA = "0xA56844")]
	private void Start()
	{
	}

	[Token(Token = "0x6000225")]
	[Address(RVA = "0xA5697C", Offset = "0xA5697C", VA = "0xA5697C", Slot = "5")]
	public override void SetCursorStartDest(Vector3 start, Vector3 dest, Vector3 normal)
	{
	}

	[Token(Token = "0x6000226")]
	[Address(RVA = "0xA56998", Offset = "0xA56998", VA = "0xA56998", Slot = "4")]
	public override void SetCursorRay(Transform t)
	{
	}

	[Token(Token = "0x6000227")]
	[Address(RVA = "0xA569E8", Offset = "0xA569E8", VA = "0xA569E8")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000228")]
	[Address(RVA = "0xA56B88", Offset = "0xA56B88", VA = "0xA56B88")]
	private void UpdateLaserBeam(Vector3 start, Vector3 end)
	{
	}

	[Token(Token = "0x6000229")]
	[Address(RVA = "0xA56C98", Offset = "0xA56C98", VA = "0xA56C98")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600022A")]
	[Address(RVA = "0xA56D1C", Offset = "0xA56D1C", VA = "0xA56D1C")]
	public void OnInputFocusLost()
	{
	}

	[Token(Token = "0x600022B")]
	[Address(RVA = "0xA56DDC", Offset = "0xA56DDC", VA = "0xA56DDC")]
	public void OnInputFocusAcquired()
	{
	}

	[Token(Token = "0x600022C")]
	[Address(RVA = "0xA56E84", Offset = "0xA56E84", VA = "0xA56E84")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600022D")]
	[Address(RVA = "0xA56F70", Offset = "0xA56F70", VA = "0xA56F70")]
	public OVRLaserPointer()
	{
	}
}
[Token(Token = "0x20000AF")]
public class CharacterCameraConstraint : MonoBehaviour
{
	[Token(Token = "0x400039B")]
	private const float FADE_RAY_LENGTH = 0.25f;

	[Token(Token = "0x400039C")]
	private const float FADE_OVERLAP_MAXIMUM = 0.1f;

	[Token(Token = "0x400039D")]
	private const float FADE_AMOUNT_MAXIMUM = 1f;

	[Token(Token = "0x400039E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("This should be a reference to the OVRCameraRig that is usually a child of the PlayerController.")]
	public OVRCameraRig CameraRig;

	[Token(Token = "0x400039F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("Collision layers to be used for the purposes of fading out the screen when the HMD is inside world geometry and adjusting the capsule height.")]
	public LayerMask CollideLayers;

	[Token(Token = "0x40003A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Tooltip("Offset is added to camera's real world height, effectively treating it as though the player was taller/standing higher.")]
	public float HeightOffset;

	[Token(Token = "0x40003A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("Minimum height that the character capsule can shrink to.  To disable, set to capsule's height.")]
	public float MinimumHeight;

	[Token(Token = "0x40003A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Tooltip("Maximum height that the character capsule can grow to.  To disable, set to capsule's height.")]
	public float MaximumHeight;

	[Token(Token = "0x40003A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private CapsuleCollider _character;

	[Token(Token = "0x40003A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private SimpleCapsuleWithStickMovement _simplePlayerController;

	[Token(Token = "0x600022E")]
	[Address(RVA = "0xA56F80", Offset = "0xA56F80", VA = "0xA56F80")]
	private CharacterCameraConstraint()
	{
	}

	[Token(Token = "0x600022F")]
	[Address(RVA = "0xA56F88", Offset = "0xA56F88", VA = "0xA56F88")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000230")]
	[Address(RVA = "0xA57004", Offset = "0xA57004", VA = "0xA57004")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000231")]
	[Address(RVA = "0xA57128", Offset = "0xA57128", VA = "0xA57128")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000232")]
	[Address(RVA = "0xA5724C", Offset = "0xA5724C", VA = "0xA5724C")]
	private void CameraUpdate()
	{
	}

	[Token(Token = "0x6000233")]
	[Address(RVA = "0xA5756C", Offset = "0xA5756C", VA = "0xA5756C")]
	private bool CheckCameraOverlapped()
	{
		return default(bool);
	}

	[Token(Token = "0x6000234")]
	[Address(RVA = "0xA577CC", Offset = "0xA577CC", VA = "0xA577CC")]
	private bool CheckCameraNearClipping(out float result)
	{
		return default(bool);
	}
}
[Token(Token = "0x20000B0")]
public class LocomotionController : MonoBehaviour
{
	[Token(Token = "0x40003A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVRCameraRig CameraRig;

	[Token(Token = "0x40003A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public CapsuleCollider CharacterController;

	[Token(Token = "0x40003A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public SimpleCapsuleWithStickMovement PlayerController;

	[Token(Token = "0x6000235")]
	[Address(RVA = "0xA57F24", Offset = "0xA57F24", VA = "0xA57F24")]
	private void Start()
	{
	}

	[Token(Token = "0x6000236")]
	[Address(RVA = "0xA57FBC", Offset = "0xA57FBC", VA = "0xA57FBC")]
	public LocomotionController()
	{
	}
}
[Token(Token = "0x20000B1")]
public class LocomotionTeleport : MonoBehaviour
{
	[Token(Token = "0x20000B2")]
	public enum States
	{
		[Token(Token = "0x40003CB")]
		Ready,
		[Token(Token = "0x40003CC")]
		Aim,
		[Token(Token = "0x40003CD")]
		CancelAim,
		[Token(Token = "0x40003CE")]
		PreTeleport,
		[Token(Token = "0x40003CF")]
		CancelTeleport,
		[Token(Token = "0x40003D0")]
		Teleporting,
		[Token(Token = "0x40003D1")]
		PostTeleport
	}

	[Token(Token = "0x20000B3")]
	public enum TeleportIntentions
	{
		[Token(Token = "0x40003D3")]
		None,
		[Token(Token = "0x40003D4")]
		Aim,
		[Token(Token = "0x40003D5")]
		PreTeleport,
		[Token(Token = "0x40003D6")]
		Teleport
	}

	[Token(Token = "0x20000B4")]
	public enum AimCollisionTypes
	{
		[Token(Token = "0x40003D8")]
		Point,
		[Token(Token = "0x40003D9")]
		Sphere,
		[Token(Token = "0x40003DA")]
		Capsule
	}

	[Token(Token = "0x20000B5")]
	public class AimData
	{
		[Token(Token = "0x40003DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public RaycastHit TargetHitInfo;

		[Token(Token = "0x40003DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public bool TargetValid;

		[Token(Token = "0x40003DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector3? Destination;

		[Token(Token = "0x40003DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float Radius;

		[Token(Token = "0x1700001C")]
		public List<Vector3> Points
		{
			[Token(Token = "0x600026C")]
			[Address(RVA = "0xA59C4C", Offset = "0xA59C4C", VA = "0xA59C4C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600026D")]
			[Address(RVA = "0xA59C54", Offset = "0xA59C54", VA = "0xA59C54")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x600026B")]
		[Address(RVA = "0xA59BCC", Offset = "0xA59BCC", VA = "0xA59BCC")]
		public AimData()
		{
		}

		[Token(Token = "0x600026E")]
		[Address(RVA = "0xA59C5C", Offset = "0xA59C5C", VA = "0xA59C5C")]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x20000B6")]
	[CompilerGenerated]
	private sealed class <ReadyStateCoroutine>d__52 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40003E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40003E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40003E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x1700001D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000272")]
			[Address(RVA = "0xA59DA4", Offset = "0xA59DA4", VA = "0xA59DA4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700001E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000274")]
			[Address(RVA = "0xA59DEC", Offset = "0xA59DEC", VA = "0xA59DEC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600026F")]
		[Address(RVA = "0xA58968", Offset = "0xA58968", VA = "0xA58968")]
		[DebuggerHidden]
		public <ReadyStateCoroutine>d__52(int <>1__state)
		{
		}

		[Token(Token = "0x6000270")]
		[Address(RVA = "0xA59CB4", Offset = "0xA59CB4", VA = "0xA59CB4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000271")]
		[Address(RVA = "0xA59CB8", Offset = "0xA59CB8", VA = "0xA59CB8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000273")]
		[Address(RVA = "0xA59DAC", Offset = "0xA59DAC", VA = "0xA59DAC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000B7")]
	[CompilerGenerated]
	private sealed class <AimStateCoroutine>d__64 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40003E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40003E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40003E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x1700001F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000278")]
			[Address(RVA = "0xA59F38", Offset = "0xA59F38", VA = "0xA59F38", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000020")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600027A")]
			[Address(RVA = "0xA59F80", Offset = "0xA59F80", VA = "0xA59F80", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000275")]
		[Address(RVA = "0xA58DE4", Offset = "0xA58DE4", VA = "0xA58DE4")]
		[DebuggerHidden]
		public <AimStateCoroutine>d__64(int <>1__state)
		{
		}

		[Token(Token = "0x6000276")]
		[Address(RVA = "0xA59DF4", Offset = "0xA59DF4", VA = "0xA59DF4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000277")]
		[Address(RVA = "0xA59DF8", Offset = "0xA59DF8", VA = "0xA59DF8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000279")]
		[Address(RVA = "0xA59F40", Offset = "0xA59F40", VA = "0xA59F40", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000B8")]
	[CompilerGenerated]
	private sealed class <CancelAimStateCoroutine>d__68 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40003E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40003E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40003E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x17000021")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600027E")]
			[Address(RVA = "0xA5A030", Offset = "0xA5A030", VA = "0xA5A030", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000022")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000280")]
			[Address(RVA = "0xA5A078", Offset = "0xA5A078", VA = "0xA5A078", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600027B")]
		[Address(RVA = "0xA58FAC", Offset = "0xA58FAC", VA = "0xA58FAC")]
		[DebuggerHidden]
		public <CancelAimStateCoroutine>d__68(int <>1__state)
		{
		}

		[Token(Token = "0x600027C")]
		[Address(RVA = "0xA59F88", Offset = "0xA59F88", VA = "0xA59F88", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600027D")]
		[Address(RVA = "0xA59F8C", Offset = "0xA59F8C", VA = "0xA59F8C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600027F")]
		[Address(RVA = "0xA5A038", Offset = "0xA5A038", VA = "0xA5A038", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000B9")]
	[CompilerGenerated]
	private sealed class <PreTeleportStateCoroutine>d__72 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40003E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40003EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40003EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x17000023")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000284")]
			[Address(RVA = "0xA5A15C", Offset = "0xA5A15C", VA = "0xA5A15C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000024")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000286")]
			[Address(RVA = "0xA5A1A4", Offset = "0xA5A1A4", VA = "0xA5A1A4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000281")]
		[Address(RVA = "0xA59174", Offset = "0xA59174", VA = "0xA59174")]
		[DebuggerHidden]
		public <PreTeleportStateCoroutine>d__72(int <>1__state)
		{
		}

		[Token(Token = "0x6000282")]
		[Address(RVA = "0xA5A080", Offset = "0xA5A080", VA = "0xA5A080", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000283")]
		[Address(RVA = "0xA5A084", Offset = "0xA5A084", VA = "0xA5A084", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000285")]
		[Address(RVA = "0xA5A164", Offset = "0xA5A164", VA = "0xA5A164", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000BA")]
	[CompilerGenerated]
	private sealed class <CancelTeleportStateCoroutine>d__76 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40003EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40003ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40003EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x17000025")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600028A")]
			[Address(RVA = "0xA5A254", Offset = "0xA5A254", VA = "0xA5A254", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000026")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600028C")]
			[Address(RVA = "0xA5A29C", Offset = "0xA5A29C", VA = "0xA5A29C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000287")]
		[Address(RVA = "0xA5933C", Offset = "0xA5933C", VA = "0xA5933C")]
		[DebuggerHidden]
		public <CancelTeleportStateCoroutine>d__76(int <>1__state)
		{
		}

		[Token(Token = "0x6000288")]
		[Address(RVA = "0xA5A1AC", Offset = "0xA5A1AC", VA = "0xA5A1AC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000289")]
		[Address(RVA = "0xA5A1B0", Offset = "0xA5A1B0", VA = "0xA5A1B0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600028B")]
		[Address(RVA = "0xA5A25C", Offset = "0xA5A25C", VA = "0xA5A25C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000BB")]
	[CompilerGenerated]
	private sealed class <TeleportingStateCoroutine>d__80 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40003EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40003F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40003F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x17000027")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000290")]
			[Address(RVA = "0xA5A37C", Offset = "0xA5A37C", VA = "0xA5A37C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000028")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000292")]
			[Address(RVA = "0xA5A3C4", Offset = "0xA5A3C4", VA = "0xA5A3C4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600028D")]
		[Address(RVA = "0xA59504", Offset = "0xA59504", VA = "0xA59504")]
		[DebuggerHidden]
		public <TeleportingStateCoroutine>d__80(int <>1__state)
		{
		}

		[Token(Token = "0x600028E")]
		[Address(RVA = "0xA5A2A4", Offset = "0xA5A2A4", VA = "0xA5A2A4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600028F")]
		[Address(RVA = "0xA5A2A8", Offset = "0xA5A2A8", VA = "0xA5A2A8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000291")]
		[Address(RVA = "0xA5A384", Offset = "0xA5A384", VA = "0xA5A384", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000BC")]
	[CompilerGenerated]
	private sealed class <PostTeleportStateCoroutine>d__84 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40003F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40003F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40003F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x17000029")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000296")]
			[Address(RVA = "0xA5A4B8", Offset = "0xA5A4B8", VA = "0xA5A4B8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700002A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000298")]
			[Address(RVA = "0xA5A500", Offset = "0xA5A500", VA = "0xA5A500", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000293")]
		[Address(RVA = "0xA596CC", Offset = "0xA596CC", VA = "0xA596CC")]
		[DebuggerHidden]
		public <PostTeleportStateCoroutine>d__84(int <>1__state)
		{
		}

		[Token(Token = "0x6000294")]
		[Address(RVA = "0xA5A3CC", Offset = "0xA5A3CC", VA = "0xA5A3CC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000295")]
		[Address(RVA = "0xA5A3D0", Offset = "0xA5A3D0", VA = "0xA5A3D0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000297")]
		[Address(RVA = "0xA5A4C0", Offset = "0xA5A4C0", VA = "0xA5A4C0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40003A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("Allow linear movement prior to the teleport system being activated.")]
	public bool EnableMovementDuringReady;

	[Token(Token = "0x40003A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	[Tooltip("Allow linear movement while the teleport system is in the process of aiming for a teleport target.")]
	public bool EnableMovementDuringAim;

	[Token(Token = "0x40003AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	[Tooltip("Allow linear movement while the teleport system is in the process of configuring the landing orientation.")]
	public bool EnableMovementDuringPreTeleport;

	[Token(Token = "0x40003AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
	[Tooltip("Allow linear movement after the teleport has occurred but before the system has returned to the ready state.")]
	public bool EnableMovementDuringPostTeleport;

	[Token(Token = "0x40003AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Tooltip("Allow rotation prior to the teleport system being activated.")]
	public bool EnableRotationDuringReady;

	[Token(Token = "0x40003AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	[Tooltip("Allow rotation while the teleport system is in the process of aiming for a teleport target.")]
	public bool EnableRotationDuringAim;

	[Token(Token = "0x40003AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
	[Tooltip("Allow rotation while the teleport system is in the process of configuring the landing orientation.")]
	public bool EnableRotationDuringPreTeleport;

	[Token(Token = "0x40003AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F")]
	[Tooltip("Allow rotation after the teleport has occurred but before the system has returned to the ready state.")]
	public bool EnableRotationDuringPostTeleport;

	[NonSerialized]
	[Token(Token = "0x40003B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TeleportAimHandler AimHandler;

	[Token(Token = "0x40003B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("This prefab will be instantiated as needed and updated to match the current aim target.")]
	public TeleportDestination TeleportDestinationPrefab;

	[Token(Token = "0x40003B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Tooltip("TeleportDestinationPrefab will be instantiated into this layer.")]
	public int TeleportDestinationLayer;

	[NonSerialized]
	[Token(Token = "0x40003B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public TeleportInputHandler InputHandler;

	[NonSerialized]
	[Token(Token = "0x40003B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public TeleportIntentions CurrentIntention;

	[NonSerialized]
	[Token(Token = "0x40003B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public bool IsPreTeleportRequested;

	[NonSerialized]
	[Token(Token = "0x40003B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
	public bool IsTransitioning;

	[NonSerialized]
	[Token(Token = "0x40003B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x56")]
	public bool IsPostTeleportRequested;

	[Token(Token = "0x40003BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private TeleportDestination _teleportDestination;

	[Token(Token = "0x40003BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[Tooltip("When aiming at possible destinations, the aim collision type determines which shape to use for collision tests.")]
	public AimCollisionTypes AimCollisionType;

	[Token(Token = "0x40003BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[Tooltip("Use the character collision radius/height/skinwidth for sphere/capsule collision tests.")]
	public bool UseCharacterCollisionData;

	[Token(Token = "0x40003BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[Tooltip("Radius of the sphere or capsule used for collision testing when aiming to possible teleport destinations. Ignored if UseCharacterCollisionData is true.")]
	public float AimCollisionRadius;

	[Token(Token = "0x40003BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	[Tooltip("Height of the capsule used for collision testing when aiming to possible teleport destinations. Ignored if UseCharacterCollisionData is true.")]
	public float AimCollisionHeight;

	[Token(Token = "0x17000019")]
	public States CurrentState
	{
		[Token(Token = "0x6000239")]
		[Address(RVA = "0xA5800C", Offset = "0xA5800C", VA = "0xA5800C")]
		[CompilerGenerated]
		get
		{
			return default(States);
		}
		[Token(Token = "0x600023A")]
		[Address(RVA = "0xA58014", Offset = "0xA58014", VA = "0xA58014")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1700001A")]
	public Quaternion DestinationRotation
	{
		[Token(Token = "0x600023E")]
		[Address(RVA = "0xA581E4", Offset = "0xA581E4", VA = "0xA581E4")]
		get
		{
			return default(Quaternion);
		}
	}

	[Token(Token = "0x1700001B")]
	public LocomotionController LocomotionController
	{
		[Token(Token = "0x600023F")]
		[Address(RVA = "0xA58208", Offset = "0xA58208", VA = "0xA58208")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000240")]
		[Address(RVA = "0xA58210", Offset = "0xA58210", VA = "0xA58210")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x14000001")]
	public event Action<bool, Vector3?, Quaternion?, Quaternion?> UpdateTeleportDestination
	{
		[Token(Token = "0x600023B")]
		[Address(RVA = "0xA5801C", Offset = "0xA5801C", VA = "0xA5801C")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600023C")]
		[Address(RVA = "0xA580CC", Offset = "0xA580CC", VA = "0xA580CC")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000002")]
	public event Action EnterStateReady
	{
		[Token(Token = "0x600024A")]
		[Address(RVA = "0xA58830", Offset = "0xA58830", VA = "0xA58830")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600024B")]
		[Address(RVA = "0xA588CC", Offset = "0xA588CC", VA = "0xA588CC")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000003")]
	public event Action EnterStateAim
	{
		[Token(Token = "0x600024D")]
		[Address(RVA = "0xA58990", Offset = "0xA58990", VA = "0xA58990")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600024E")]
		[Address(RVA = "0xA58A2C", Offset = "0xA58A2C", VA = "0xA58A2C")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000004")]
	public event Action<AimData> UpdateAimData
	{
		[Token(Token = "0x600024F")]
		[Address(RVA = "0xA58AC8", Offset = "0xA58AC8", VA = "0xA58AC8")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000250")]
		[Address(RVA = "0xA58B78", Offset = "0xA58B78", VA = "0xA58B78")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000005")]
	public event Action ExitStateAim
	{
		[Token(Token = "0x6000252")]
		[Address(RVA = "0xA58C44", Offset = "0xA58C44", VA = "0xA58C44")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000253")]
		[Address(RVA = "0xA58CE0", Offset = "0xA58CE0", VA = "0xA58CE0")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000006")]
	public event Action EnterStateCancelAim
	{
		[Token(Token = "0x6000255")]
		[Address(RVA = "0xA58E0C", Offset = "0xA58E0C", VA = "0xA58E0C")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000256")]
		[Address(RVA = "0xA58EA8", Offset = "0xA58EA8", VA = "0xA58EA8")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000007")]
	public event Action EnterStatePreTeleport
	{
		[Token(Token = "0x6000258")]
		[Address(RVA = "0xA58FD4", Offset = "0xA58FD4", VA = "0xA58FD4")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000259")]
		[Address(RVA = "0xA59070", Offset = "0xA59070", VA = "0xA59070")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000008")]
	public event Action EnterStateCancelTeleport
	{
		[Token(Token = "0x600025B")]
		[Address(RVA = "0xA5919C", Offset = "0xA5919C", VA = "0xA5919C")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600025C")]
		[Address(RVA = "0xA59238", Offset = "0xA59238", VA = "0xA59238")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000009")]
	public event Action EnterStateTeleporting
	{
		[Token(Token = "0x600025E")]
		[Address(RVA = "0xA59364", Offset = "0xA59364", VA = "0xA59364")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600025F")]
		[Address(RVA = "0xA59400", Offset = "0xA59400", VA = "0xA59400")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400000A")]
	public event Action EnterStatePostTeleport
	{
		[Token(Token = "0x6000261")]
		[Address(RVA = "0xA5952C", Offset = "0xA5952C", VA = "0xA5952C")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000262")]
		[Address(RVA = "0xA595C8", Offset = "0xA595C8", VA = "0xA595C8")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400000B")]
	public event Action<Transform, Vector3, Quaternion> Teleported
	{
		[Token(Token = "0x6000264")]
		[Address(RVA = "0xA596F4", Offset = "0xA596F4", VA = "0xA596F4")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000265")]
		[Address(RVA = "0xA597A4", Offset = "0xA597A4", VA = "0xA597A4")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6000237")]
	[Address(RVA = "0xA57FC4", Offset = "0xA57FC4", VA = "0xA57FC4")]
	public void EnableMovement(bool ready, bool aim, bool pre, bool post)
	{
	}

	[Token(Token = "0x6000238")]
	[Address(RVA = "0xA57FE8", Offset = "0xA57FE8", VA = "0xA57FE8")]
	public void EnableRotation(bool ready, bool aim, bool pre, bool post)
	{
	}

	[Token(Token = "0x600023D")]
	[Address(RVA = "0xA5817C", Offset = "0xA5817C", VA = "0xA5817C")]
	public void OnUpdateTeleportDestination(bool isValidDestination, Vector3? position, Quaternion? rotation, Quaternion? landingRotation)
	{
	}

	[Token(Token = "0x6000241")]
	[Address(RVA = "0xA58218", Offset = "0xA58218", VA = "0xA58218")]
	public bool AimCollisionTest(Vector3 start, Vector3 end, LayerMask aimCollisionLayerMask, out RaycastHit hitInfo)
	{
		return default(bool);
	}

	[Token(Token = "0x6000242")]
	[Address(RVA = "0xA584E0", Offset = "0xA584E0", VA = "0xA584E0")]
	[Conditional("DEBUG_TELEPORT_STATES")]
	protected void LogState(string msg)
	{
	}

	[Token(Token = "0x6000243")]
	[Address(RVA = "0xA58588", Offset = "0xA58588", VA = "0xA58588")]
	protected void CreateNewTeleportDestination()
	{
	}

	[Token(Token = "0x6000244")]
	[Address(RVA = "0xA5864C", Offset = "0xA5864C", VA = "0xA5864C")]
	private void DeactivateDestination()
	{
	}

	[Token(Token = "0x6000245")]
	[Address(RVA = "0xA58668", Offset = "0xA58668", VA = "0xA58668")]
	public void RecycleTeleportDestination(TeleportDestination oldDestination)
	{
	}

	[Token(Token = "0x6000246")]
	[Address(RVA = "0xA58718", Offset = "0xA58718", VA = "0xA58718")]
	private void EnableMotion(bool enableLinear, bool enableRotation)
	{
	}

	[Token(Token = "0x6000247")]
	[Address(RVA = "0xA58748", Offset = "0xA58748", VA = "0xA58748")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000248")]
	[Address(RVA = "0xA5879C", Offset = "0xA5879C", VA = "0xA5879C", Slot = "4")]
	public virtual void OnEnable()
	{
	}

	[Token(Token = "0x6000249")]
	[Address(RVA = "0xA58828", Offset = "0xA58828", VA = "0xA58828", Slot = "5")]
	public virtual void OnDisable()
	{
	}

	[Token(Token = "0x600024C")]
	[Address(RVA = "0xA587C0", Offset = "0xA587C0", VA = "0xA587C0")]
	[IteratorStateMachine(typeof(<ReadyStateCoroutine>d__52))]
	protected IEnumerator ReadyStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000251")]
	[Address(RVA = "0xA58C28", Offset = "0xA58C28", VA = "0xA58C28")]
	public void OnUpdateAimData(AimData aimData)
	{
	}

	[Token(Token = "0x6000254")]
	[Address(RVA = "0xA58D7C", Offset = "0xA58D7C", VA = "0xA58D7C")]
	[IteratorStateMachine(typeof(<AimStateCoroutine>d__64))]
	protected IEnumerator AimStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000257")]
	[Address(RVA = "0xA58F44", Offset = "0xA58F44", VA = "0xA58F44")]
	[IteratorStateMachine(typeof(<CancelAimStateCoroutine>d__68))]
	protected IEnumerator CancelAimStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x600025A")]
	[Address(RVA = "0xA5910C", Offset = "0xA5910C", VA = "0xA5910C")]
	[IteratorStateMachine(typeof(<PreTeleportStateCoroutine>d__72))]
	protected IEnumerator PreTeleportStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x600025D")]
	[Address(RVA = "0xA592D4", Offset = "0xA592D4", VA = "0xA592D4")]
	[IteratorStateMachine(typeof(<CancelTeleportStateCoroutine>d__76))]
	protected IEnumerator CancelTeleportStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000260")]
	[Address(RVA = "0xA5949C", Offset = "0xA5949C", VA = "0xA5949C")]
	[IteratorStateMachine(typeof(<TeleportingStateCoroutine>d__80))]
	protected IEnumerator TeleportingStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000263")]
	[Address(RVA = "0xA59664", Offset = "0xA59664", VA = "0xA59664")]
	[IteratorStateMachine(typeof(<PostTeleportStateCoroutine>d__84))]
	protected IEnumerator PostTeleportStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000266")]
	[Address(RVA = "0xA59854", Offset = "0xA59854", VA = "0xA59854")]
	public void DoTeleport()
	{
	}

	[Token(Token = "0x6000267")]
	[Address(RVA = "0xA59968", Offset = "0xA59968", VA = "0xA59968")]
	public Vector3 GetCharacterPosition()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000268")]
	[Address(RVA = "0xA59998", Offset = "0xA59998", VA = "0xA59998")]
	public Quaternion GetHeadRotationY()
	{
		return default(Quaternion);
	}

	[Token(Token = "0x6000269")]
	[Address(RVA = "0xA59AD4", Offset = "0xA59AD4", VA = "0xA59AD4")]
	public void DoWarp(Vector3 startPos, float positionPercent)
	{
	}

	[Token(Token = "0x600026A")]
	[Address(RVA = "0xA59BBC", Offset = "0xA59BBC", VA = "0xA59BBC")]
	public LocomotionTeleport()
	{
	}
}
[Token(Token = "0x20000BD")]
public class SimpleCapsuleWithStickMovement : MonoBehaviour
{
	[Token(Token = "0x40003F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool EnableLinearMovement;

	[Token(Token = "0x40003F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool EnableRotation;

	[Token(Token = "0x40003F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	public bool HMDRotatesPlayer;

	[Token(Token = "0x40003F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
	public bool RotationEitherThumbstick;

	[Token(Token = "0x40003F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float RotationAngle;

	[Token(Token = "0x40003FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float Speed;

	[Token(Token = "0x40003FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public OVRCameraRig CameraRig;

	[Token(Token = "0x40003FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool ReadyToSnapTurn;

	[Token(Token = "0x40003FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Rigidbody _rigidbody;

	[Token(Token = "0x1400000C")]
	public event Action CameraUpdated
	{
		[Token(Token = "0x6000299")]
		[Address(RVA = "0xA5708C", Offset = "0xA5708C", VA = "0xA5708C")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600029A")]
		[Address(RVA = "0xA571B0", Offset = "0xA571B0", VA = "0xA571B0")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400000D")]
	public event Action PreCharacterMove
	{
		[Token(Token = "0x600029B")]
		[Address(RVA = "0xA5A508", Offset = "0xA5A508", VA = "0xA5A508")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600029C")]
		[Address(RVA = "0xA5A5A4", Offset = "0xA5A5A4", VA = "0xA5A5A4")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x600029D")]
	[Address(RVA = "0xA5A640", Offset = "0xA5A640", VA = "0xA5A640")]
	private void Awake()
	{
	}

	[Token(Token = "0x600029E")]
	[Address(RVA = "0xA5A6F8", Offset = "0xA5A6F8", VA = "0xA5A6F8")]
	private void Start()
	{
	}

	[Token(Token = "0x600029F")]
	[Address(RVA = "0xA5A6FC", Offset = "0xA5A6FC", VA = "0xA5A6FC")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60002A0")]
	[Address(RVA = "0xA5A770", Offset = "0xA5A770", VA = "0xA5A770")]
	private void RotatePlayerToHMD()
	{
	}

	[Token(Token = "0x60002A1")]
	[Address(RVA = "0xA5A894", Offset = "0xA5A894", VA = "0xA5A894")]
	private void StickMovement()
	{
	}

	[Token(Token = "0x60002A2")]
	[Address(RVA = "0xA5AB0C", Offset = "0xA5AB0C", VA = "0xA5AB0C")]
	private void SnapTurn()
	{
	}

	[Token(Token = "0x60002A3")]
	[Address(RVA = "0xA5AD2C", Offset = "0xA5AD2C", VA = "0xA5AD2C")]
	public SimpleCapsuleWithStickMovement()
	{
	}
}
[Token(Token = "0x20000BE")]
public abstract class TeleportAimHandler : TeleportSupport
{
	[Token(Token = "0x60002A4")]
	[Address(RVA = "0xA5AD4C", Offset = "0xA5AD4C", VA = "0xA5AD4C", Slot = "4")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x60002A5")]
	[Address(RVA = "0xA5AD74", Offset = "0xA5AD74", VA = "0xA5AD74", Slot = "5")]
	protected override void OnDisable()
	{
	}

	[Token(Token = "0x60002A6")]
	public abstract void GetPoints(List<Vector3> points);

	[Token(Token = "0x60002A7")]
	[Address(RVA = "0xA5ADFC", Offset = "0xA5ADFC", VA = "0xA5ADFC")]
	protected TeleportAimHandler()
	{
	}
}
[Token(Token = "0x20000BF")]
public class TeleportAimHandlerLaser : TeleportAimHandler
{
	[Token(Token = "0x4000400")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Tooltip("Maximum range for aiming.")]
	public float Range;

	[Token(Token = "0x60002A8")]
	[Address(RVA = "0xA5AE04", Offset = "0xA5AE04", VA = "0xA5AE04", Slot = "8")]
	public override void GetPoints(List<Vector3> points)
	{
	}

	[Token(Token = "0x60002A9")]
	[Address(RVA = "0xA5AF94", Offset = "0xA5AF94", VA = "0xA5AF94")]
	public TeleportAimHandlerLaser()
	{
	}
}
[Token(Token = "0x20000C0")]
public class TeleportAimHandlerParabolic : TeleportAimHandler
{
	[Token(Token = "0x4000401")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Tooltip("Maximum range for aiming.")]
	public float Range;

	[Token(Token = "0x4000402")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("The MinimumElevation is relative to the AimPosition.")]
	public float MinimumElevation;

	[Token(Token = "0x4000403")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Tooltip("The Gravity is used in conjunction with AimVelocity and the aim direction to simulate a projectile.")]
	public float Gravity;

	[Token(Token = "0x4000404")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Range(0.001f, 50f)]
	[Tooltip("The AimVelocity is the initial speed of the faked projectile.")]
	public float AimVelocity;

	[Token(Token = "0x4000405")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[Tooltip("The AimStep is the how much to subdivide the iteration.")]
	[Range(0.001f, 1f)]
	public float AimStep;

	[Token(Token = "0x60002AA")]
	[Address(RVA = "0xB2C4A4", Offset = "0xB2C4A4", VA = "0xB2C4A4", Slot = "8")]
	public override void GetPoints(List<Vector3> points)
	{
	}

	[Token(Token = "0x60002AB")]
	[Address(RVA = "0xB2C678", Offset = "0xB2C678", VA = "0xB2C678")]
	public TeleportAimHandlerParabolic()
	{
	}
}
[Token(Token = "0x20000C1")]
public class TeleportAimVisualLaser : TeleportSupport
{
	[Token(Token = "0x4000406")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("This prefab will be instantiated when the aim visual is awakened, and will be set active when the user is aiming, and deactivated when they are done aiming.")]
	public LineRenderer LaserPrefab;

	[Token(Token = "0x4000407")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private readonly Action _enterAimStateAction;

	[Token(Token = "0x4000408")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private readonly Action _exitAimStateAction;

	[Token(Token = "0x4000409")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private readonly Action<LocomotionTeleport.AimData> _updateAimDataAction;

	[Token(Token = "0x400040A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private LineRenderer _lineRenderer;

	[Token(Token = "0x400040B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3[] _linePoints;

	[Token(Token = "0x60002AC")]
	[Address(RVA = "0xB2C68C", Offset = "0xB2C68C", VA = "0xB2C68C")]
	public TeleportAimVisualLaser()
	{
	}

	[Token(Token = "0x60002AD")]
	[Address(RVA = "0xB2C7A0", Offset = "0xB2C7A0", VA = "0xB2C7A0")]
	private void EnterAimState()
	{
	}

	[Token(Token = "0x60002AE")]
	[Address(RVA = "0xB2C7CC", Offset = "0xB2C7CC", VA = "0xB2C7CC")]
	private void ExitAimState()
	{
	}

	[Token(Token = "0x60002AF")]
	[Address(RVA = "0xB2C7F8", Offset = "0xB2C7F8", VA = "0xB2C7F8")]
	private void Awake()
	{
	}

	[Token(Token = "0x60002B0")]
	[Address(RVA = "0xB2C894", Offset = "0xB2C894", VA = "0xB2C894", Slot = "6")]
	protected override void AddEventHandlers()
	{
	}

	[Token(Token = "0x60002B1")]
	[Address(RVA = "0xB2C8F4", Offset = "0xB2C8F4", VA = "0xB2C8F4", Slot = "7")]
	protected override void RemoveEventHandlers()
	{
	}

	[Token(Token = "0x60002B2")]
	[Address(RVA = "0xB2C950", Offset = "0xB2C950", VA = "0xB2C950")]
	private void UpdateAimData(LocomotionTeleport.AimData obj)
	{
	}
}
[Token(Token = "0x20000C2")]
public class TeleportDestination : MonoBehaviour
{
	[Token(Token = "0x400040D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("If the target handler provides a target position, this transform will be moved to that position and it's game object enabled. A target position being provided does not mean the position is valid, only that the aim handler found something to test as a destination.")]
	public Transform PositionIndicator;

	[Token(Token = "0x400040E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("This transform will be rotated to match the rotation of the aiming target. Simple teleport destinations should assign this to the object containing this component. More complex teleport destinations might assign this to a sub-object that is used to indicate the landing orientation independently from the rest of the destination indicator, such as when world space effects are required. This will typically be a child of the PositionIndicator.")]
	public Transform OrientationIndicator;

	[Token(Token = "0x400040F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("After the player teleports, the character controller will have it's rotation set to this value. It is different from the OrientationIndicator transform.rotation in order to support both head-relative and forward-facing teleport modes (See TeleportOrientationHandlerThumbstick.cs).")]
	public Quaternion LandingRotation;

	[NonSerialized]
	[Token(Token = "0x4000410")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public LocomotionTeleport LocomotionTeleport;

	[NonSerialized]
	[Token(Token = "0x4000411")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public LocomotionTeleport.States TeleportState;

	[Token(Token = "0x4000412")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private readonly Action<bool, Vector3?, Quaternion?, Quaternion?> _updateTeleportDestinationAction;

	[Token(Token = "0x4000413")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool _eventsActive;

	[Token(Token = "0x1700002B")]
	public bool IsValidDestination
	{
		[Token(Token = "0x60002B3")]
		[Address(RVA = "0xB2CA4C", Offset = "0xB2CA4C", VA = "0xB2CA4C")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60002B4")]
		[Address(RVA = "0xB2CA54", Offset = "0xB2CA54", VA = "0xB2CA54")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1400000E")]
	public event Action<TeleportDestination> Deactivated
	{
		[Token(Token = "0x60002B9")]
		[Address(RVA = "0xB2CBDC", Offset = "0xB2CBDC", VA = "0xB2CBDC")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60002BA")]
		[Address(RVA = "0xB2CC8C", Offset = "0xB2CC8C", VA = "0xB2CC8C")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x60002B5")]
	[Address(RVA = "0xB2CA60", Offset = "0xB2CA60", VA = "0xB2CA60")]
	private TeleportDestination()
	{
	}

	[Token(Token = "0x60002B6")]
	[Address(RVA = "0xB2CADC", Offset = "0xB2CADC", VA = "0xB2CADC")]
	public void OnEnable()
	{
	}

	[Token(Token = "0x60002B7")]
	[Address(RVA = "0xB2CBA4", Offset = "0xB2CBA4", VA = "0xB2CBA4")]
	private void TryDisableEventHandlers()
	{
	}

	[Token(Token = "0x60002B8")]
	[Address(RVA = "0xB2CBD8", Offset = "0xB2CBD8", VA = "0xB2CBD8")]
	public void OnDisable()
	{
	}

	[Token(Token = "0x60002BB")]
	[Address(RVA = "0xB2CD3C", Offset = "0xB2CD3C", VA = "0xB2CD3C")]
	public void OnDeactivated()
	{
	}

	[Token(Token = "0x60002BC")]
	[Address(RVA = "0xB2CD60", Offset = "0xB2CD60", VA = "0xB2CD60")]
	public void Recycle()
	{
	}

	[Token(Token = "0x60002BD")]
	[Address(RVA = "0xB2CD80", Offset = "0xB2CD80", VA = "0xB2CD80", Slot = "4")]
	public virtual void UpdateTeleportDestination(bool isValidDestination, Vector3? position, Quaternion? rotation, Quaternion? landingRotation)
	{
	}
}
[Token(Token = "0x20000C3")]
public abstract class TeleportInputHandler : TeleportSupport
{
	[Token(Token = "0x20000C4")]
	[CompilerGenerated]
	private sealed class <TeleportReadyCoroutine>d__5 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000417")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000418")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000419")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportInputHandler <>4__this;

		[Token(Token = "0x1700002C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60002CA")]
			[Address(RVA = "0xB2D30C", Offset = "0xB2D30C", VA = "0xB2D30C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700002D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60002CC")]
			[Address(RVA = "0xB2D354", Offset = "0xB2D354", VA = "0xB2D354", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60002C7")]
		[Address(RVA = "0xB2D190", Offset = "0xB2D190", VA = "0xB2D190")]
		[DebuggerHidden]
		public <TeleportReadyCoroutine>d__5(int <>1__state)
		{
		}

		[Token(Token = "0x60002C8")]
		[Address(RVA = "0xB2D288", Offset = "0xB2D288", VA = "0xB2D288", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60002C9")]
		[Address(RVA = "0xB2D28C", Offset = "0xB2D28C", VA = "0xB2D28C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60002CB")]
		[Address(RVA = "0xB2D314", Offset = "0xB2D314", VA = "0xB2D314", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000C5")]
	[CompilerGenerated]
	private sealed class <TeleportAimCoroutine>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400041A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400041B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400041C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportInputHandler <>4__this;

		[Token(Token = "0x1700002E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60002D0")]
			[Address(RVA = "0xB2D3EC", Offset = "0xB2D3EC", VA = "0xB2D3EC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700002F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60002D2")]
			[Address(RVA = "0xB2D434", Offset = "0xB2D434", VA = "0xB2D434", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60002CD")]
		[Address(RVA = "0xB2D220", Offset = "0xB2D220", VA = "0xB2D220")]
		[DebuggerHidden]
		public <TeleportAimCoroutine>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x60002CE")]
		[Address(RVA = "0xB2D35C", Offset = "0xB2D35C", VA = "0xB2D35C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60002CF")]
		[Address(RVA = "0xB2D360", Offset = "0xB2D360", VA = "0xB2D360", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60002D1")]
		[Address(RVA = "0xB2D3F4", Offset = "0xB2D3F4", VA = "0xB2D3F4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000415")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private readonly Action _startReadyAction;

	[Token(Token = "0x4000416")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private readonly Action _startAimAction;

	[Token(Token = "0x60002BE")]
	[Address(RVA = "0xB2CF74", Offset = "0xB2CF74", VA = "0xB2CF74")]
	protected TeleportInputHandler()
	{
	}

	[Token(Token = "0x60002BF")]
	[Address(RVA = "0xB2D034", Offset = "0xB2D034", VA = "0xB2D034", Slot = "6")]
	protected override void AddEventHandlers()
	{
	}

	[Token(Token = "0x60002C0")]
	[Address(RVA = "0xB2D078", Offset = "0xB2D078", VA = "0xB2D078", Slot = "7")]
	protected override void RemoveEventHandlers()
	{
	}

	[Token(Token = "0x60002C1")]
	[Address(RVA = "0xB2D128", Offset = "0xB2D128", VA = "0xB2D128")]
	[IteratorStateMachine(typeof(<TeleportReadyCoroutine>d__5))]
	private IEnumerator TeleportReadyCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60002C2")]
	[Address(RVA = "0xB2D1B8", Offset = "0xB2D1B8", VA = "0xB2D1B8")]
	[IteratorStateMachine(typeof(<TeleportAimCoroutine>d__6))]
	private IEnumerator TeleportAimCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60002C3")]
	public abstract LocomotionTeleport.TeleportIntentions GetIntention();

	[Token(Token = "0x60002C4")]
	public abstract void GetAimData(out Ray aimRay);
}
[Token(Token = "0x20000C6")]
public class TeleportInputHandlerHMD : TeleportInputHandler
{
	[Token(Token = "0x400041E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("The button used to begin aiming for a teleport.")]
	public OVRInput.RawButton AimButton;

	[Token(Token = "0x400041F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[Tooltip("The button used to trigger the teleport after aiming. It can be the same button as the AimButton, however you cannot abort a teleport if it is.")]
	public OVRInput.RawButton TeleportButton;

	[Token(Token = "0x4000420")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Tooltip("When true, the system will not use the PreTeleport intention which will allow a teleport to occur on a button downpress. When false, the button downpress will trigger the PreTeleport intention and the Teleport intention when the button is released.")]
	public bool FastTeleport;

	[Token(Token = "0x17000030")]
	public Transform Pointer
	{
		[Token(Token = "0x60002D3")]
		[Address(RVA = "0xB2D43C", Offset = "0xB2D43C", VA = "0xB2D43C")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60002D4")]
		[Address(RVA = "0xB2D444", Offset = "0xB2D444", VA = "0xB2D444")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x60002D5")]
	[Address(RVA = "0xB2D44C", Offset = "0xB2D44C", VA = "0xB2D44C", Slot = "8")]
	public override LocomotionTeleport.TeleportIntentions GetIntention()
	{
		return default(LocomotionTeleport.TeleportIntentions);
	}

	[Token(Token = "0x60002D6")]
	[Address(RVA = "0xB2D578", Offset = "0xB2D578", VA = "0xB2D578", Slot = "9")]
	public override void GetAimData(out Ray aimRay)
	{
	}

	[Token(Token = "0x60002D7")]
	[Address(RVA = "0xB2D62C", Offset = "0xB2D62C", VA = "0xB2D62C")]
	public TeleportInputHandlerHMD()
	{
	}
}
[Token(Token = "0x20000C7")]
public class TeleportInputHandlerTouch : TeleportInputHandlerHMD
{
	[Token(Token = "0x20000C8")]
	public enum InputModes
	{
		[Token(Token = "0x400042B")]
		CapacitiveButtonForAimAndTeleport,
		[Token(Token = "0x400042C")]
		SeparateButtonsForAimAndTeleport,
		[Token(Token = "0x400042D")]
		ThumbstickTeleport,
		[Token(Token = "0x400042E")]
		ThumbstickTeleportForwardBackOnly
	}

	[Token(Token = "0x20000C9")]
	public enum AimCapTouchButtons
	{
		[Token(Token = "0x4000430")]
		A,
		[Token(Token = "0x4000431")]
		B,
		[Token(Token = "0x4000432")]
		LeftTrigger,
		[Token(Token = "0x4000433")]
		LeftThumbstick,
		[Token(Token = "0x4000434")]
		RightTrigger,
		[Token(Token = "0x4000435")]
		RightThumbstick,
		[Token(Token = "0x4000436")]
		X,
		[Token(Token = "0x4000437")]
		Y
	}

	[Token(Token = "0x4000421")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Transform LeftHand;

	[Token(Token = "0x4000422")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Transform RightHand;

	[Token(Token = "0x4000423")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Tooltip("CapacitiveButtonForAimAndTeleport=Activate aiming via cap touch detection, press the same button to teleport.\nSeparateButtonsForAimAndTeleport=Use one button to begin aiming, and another to trigger the teleport.\nThumbstickTeleport=Push a thumbstick to begin aiming, release to teleport.")]
	public InputModes InputMode;

	[Token(Token = "0x4000424")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private readonly OVRInput.RawButton[] _rawButtons;

	[Token(Token = "0x4000425")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private readonly OVRInput.RawTouch[] _rawTouch;

	[Token(Token = "0x4000426")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[Tooltip("Select the controller to be used for aiming. Supports LTouch, RTouch, or Touch for either.")]
	public OVRInput.Controller AimingController;

	[Token(Token = "0x4000427")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private OVRInput.Controller InitiatingController;

	[Token(Token = "0x4000428")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[Tooltip("Select the button to use for triggering aim and teleport when InputMode==CapacitiveButtonForAimAndTeleport")]
	public AimCapTouchButtons CapacitiveAimAndTeleportButton;

	[Token(Token = "0x4000429")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	[Tooltip("The thumbstick magnitude required to trigger aiming and teleports when InputMode==InputModes.ThumbstickTeleport")]
	public float ThumbstickTeleportThreshold;

	[Token(Token = "0x60002D8")]
	[Address(RVA = "0xB2D630", Offset = "0xB2D630", VA = "0xB2D630")]
	private void Start()
	{
	}

	[Token(Token = "0x60002D9")]
	[Address(RVA = "0xB2D634", Offset = "0xB2D634", VA = "0xB2D634", Slot = "8")]
	public override LocomotionTeleport.TeleportIntentions GetIntention()
	{
		return default(LocomotionTeleport.TeleportIntentions);
	}

	[Token(Token = "0x60002DA")]
	[Address(RVA = "0xB2DA68", Offset = "0xB2DA68", VA = "0xB2DA68", Slot = "9")]
	public override void GetAimData(out Ray aimRay)
	{
	}

	[Token(Token = "0x60002DB")]
	[Address(RVA = "0xB2DB24", Offset = "0xB2DB24", VA = "0xB2DB24")]
	public TeleportInputHandlerTouch()
	{
	}
}
[Token(Token = "0x20000CA")]
public abstract class TeleportOrientationHandler : TeleportSupport
{
	[Token(Token = "0x20000CB")]
	public enum OrientationModes
	{
		[Token(Token = "0x400043C")]
		HeadRelative,
		[Token(Token = "0x400043D")]
		ForwardFacing
	}

	[Token(Token = "0x20000CC")]
	[CompilerGenerated]
	private sealed class <UpdateOrientationCoroutine>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400043E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400043F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000440")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportOrientationHandler <>4__this;

		[Token(Token = "0x17000031")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60002E8")]
			[Address(RVA = "0xB2DFA0", Offset = "0xB2DFA0", VA = "0xB2DFA0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000032")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60002EA")]
			[Address(RVA = "0xB2DFE8", Offset = "0xB2DFE8", VA = "0xB2DFE8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60002E5")]
		[Address(RVA = "0xB2DDBC", Offset = "0xB2DDBC", VA = "0xB2DDBC")]
		[DebuggerHidden]
		public <UpdateOrientationCoroutine>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x60002E6")]
		[Address(RVA = "0xB2DEFC", Offset = "0xB2DEFC", VA = "0xB2DEFC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60002E7")]
		[Address(RVA = "0xB2DF00", Offset = "0xB2DF00", VA = "0xB2DF00", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60002E9")]
		[Address(RVA = "0xB2DFA8", Offset = "0xB2DFA8", VA = "0xB2DFA8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000438")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private readonly Action _updateOrientationAction;

	[Token(Token = "0x4000439")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private readonly Action<LocomotionTeleport.AimData> _updateAimDataAction;

	[Token(Token = "0x400043A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected LocomotionTeleport.AimData AimData;

	[Token(Token = "0x60002DC")]
	[Address(RVA = "0xB2DBFC", Offset = "0xB2DBFC", VA = "0xB2DBFC")]
	protected TeleportOrientationHandler()
	{
	}

	[Token(Token = "0x60002DD")]
	[Address(RVA = "0xB2DCD0", Offset = "0xB2DCD0", VA = "0xB2DCD0")]
	private void UpdateAimData(LocomotionTeleport.AimData aimData)
	{
	}

	[Token(Token = "0x60002DE")]
	[Address(RVA = "0xB2DCD8", Offset = "0xB2DCD8", VA = "0xB2DCD8", Slot = "6")]
	protected override void AddEventHandlers()
	{
	}

	[Token(Token = "0x60002DF")]
	[Address(RVA = "0xB2DD18", Offset = "0xB2DD18", VA = "0xB2DD18", Slot = "7")]
	protected override void RemoveEventHandlers()
	{
	}

	[Token(Token = "0x60002E0")]
	[Address(RVA = "0xB2DD54", Offset = "0xB2DD54", VA = "0xB2DD54")]
	[IteratorStateMachine(typeof(<UpdateOrientationCoroutine>d__7))]
	private IEnumerator UpdateOrientationCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60002E1")]
	protected abstract void InitializeTeleportDestination();

	[Token(Token = "0x60002E2")]
	protected abstract void UpdateTeleportDestination();

	[Token(Token = "0x60002E3")]
	[Address(RVA = "0xB2DDE4", Offset = "0xB2DDE4", VA = "0xB2DDE4")]
	protected Quaternion GetLandingOrientation(OrientationModes mode, Quaternion rotation)
	{
		return default(Quaternion);
	}
}
[Token(Token = "0x20000CD")]
public class TeleportOrientationHandler360 : TeleportOrientationHandler
{
	[Token(Token = "0x60002EB")]
	[Address(RVA = "0xB2DFF0", Offset = "0xB2DFF0", VA = "0xB2DFF0", Slot = "8")]
	protected override void InitializeTeleportDestination()
	{
	}

	[Token(Token = "0x60002EC")]
	[Address(RVA = "0xB2DFF4", Offset = "0xB2DFF4", VA = "0xB2DFF4", Slot = "9")]
	protected override void UpdateTeleportDestination()
	{
	}

	[Token(Token = "0x60002ED")]
	[Address(RVA = "0xB2E06C", Offset = "0xB2E06C", VA = "0xB2E06C")]
	public TeleportOrientationHandler360()
	{
	}
}
[Token(Token = "0x20000CE")]
public class TeleportOrientationHandlerHMD : TeleportOrientationHandler
{
	[Token(Token = "0x4000441")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("HeadRelative=Character will orient to match the arrow. ForwardFacing=When user orients to match the arrow, they will be facing the sensors.")]
	public OrientationModes OrientationMode;

	[Token(Token = "0x4000442")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[Tooltip("Should the destination orientation be updated during the aim state in addition to the PreTeleport state?")]
	public bool UpdateOrientationDuringAim;

	[Token(Token = "0x4000443")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Tooltip("How far from the destination must the HMD be pointing before using it for orientation")]
	public float AimDistanceThreshold;

	[Token(Token = "0x4000444")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[Tooltip("How far from the destination must the HMD be pointing before rejecting the teleport")]
	public float AimDistanceMaxRange;

	[Token(Token = "0x4000445")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Quaternion _initialRotation;

	[Token(Token = "0x60002EE")]
	[Address(RVA = "0xB2E070", Offset = "0xB2E070", VA = "0xB2E070", Slot = "8")]
	protected override void InitializeTeleportDestination()
	{
	}

	[Token(Token = "0x60002EF")]
	[Address(RVA = "0xB2E0C0", Offset = "0xB2E0C0", VA = "0xB2E0C0", Slot = "9")]
	protected override void UpdateTeleportDestination()
	{
	}

	[Token(Token = "0x60002F0")]
	[Address(RVA = "0xB2E53C", Offset = "0xB2E53C", VA = "0xB2E53C")]
	public TeleportOrientationHandlerHMD()
	{
	}
}
[Token(Token = "0x20000CF")]
public class TeleportOrientationHandlerThumbstick : TeleportOrientationHandler
{
	[Token(Token = "0x4000446")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("HeadRelative=Character will orient to match the arrow. ForwardFacing=When user orients to match the arrow, they will be facing the sensors.")]
	public OrientationModes OrientationMode;

	[Token(Token = "0x4000447")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[Tooltip("Which thumbstick is to be used for adjusting the teleport orientation. Supports LTouch, RTouch, or Touch for either.")]
	public OVRInput.Controller Thumbstick;

	[Token(Token = "0x4000448")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Tooltip("The orientation will only change if the thumbstick magnitude is above this value. This will usually be larger than the TeleportInputHandlerTouch.ThumbstickTeleportThreshold.")]
	public float RotateStickThreshold;

	[Token(Token = "0x4000449")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private Quaternion _initialRotation;

	[Token(Token = "0x400044A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private Quaternion _currentRotation;

	[Token(Token = "0x400044B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private Vector2 _lastValidDirection;

	[Token(Token = "0x60002F1")]
	[Address(RVA = "0xB2E540", Offset = "0xB2E540", VA = "0xB2E540", Slot = "8")]
	protected override void InitializeTeleportDestination()
	{
	}

	[Token(Token = "0x60002F2")]
	[Address(RVA = "0xB2E578", Offset = "0xB2E578", VA = "0xB2E578", Slot = "9")]
	protected override void UpdateTeleportDestination()
	{
	}

	[Token(Token = "0x60002F3")]
	[Address(RVA = "0xB2EA50", Offset = "0xB2EA50", VA = "0xB2EA50")]
	public TeleportOrientationHandlerThumbstick()
	{
	}
}
[Token(Token = "0x20000D0")]
public class TeleportPoint : MonoBehaviour
{
	[Token(Token = "0x400044C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float dimmingSpeed;

	[Token(Token = "0x400044D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float fullIntensity;

	[Token(Token = "0x400044E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float lowIntensity;

	[Token(Token = "0x400044F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform destTransform;

	[Token(Token = "0x4000450")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float lastLookAtTime;

	[Token(Token = "0x60002F4")]
	[Address(RVA = "0xB2EA60", Offset = "0xB2EA60", VA = "0xB2EA60")]
	private void Start()
	{
	}

	[Token(Token = "0x60002F5")]
	[Address(RVA = "0xB2EA64", Offset = "0xB2EA64", VA = "0xB2EA64")]
	public Transform GetDestTransform()
	{
		return null;
	}

	[Token(Token = "0x60002F6")]
	[Address(RVA = "0xB2EA6C", Offset = "0xB2EA6C", VA = "0xB2EA6C")]
	private void Update()
	{
	}

	[Token(Token = "0x60002F7")]
	[Address(RVA = "0xB2EB58", Offset = "0xB2EB58", VA = "0xB2EB58")]
	public void OnLookAt()
	{
	}

	[Token(Token = "0x60002F8")]
	[Address(RVA = "0xB2EB74", Offset = "0xB2EB74", VA = "0xB2EB74")]
	public TeleportPoint()
	{
	}
}
[Token(Token = "0x20000D1")]
public abstract class TeleportSupport : MonoBehaviour
{
	[Token(Token = "0x4000452")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool _eventsActive;

	[Token(Token = "0x17000033")]
	protected LocomotionTeleport LocomotionTeleport
	{
		[Token(Token = "0x60002F9")]
		[Address(RVA = "0xB2EB8C", Offset = "0xB2EB8C", VA = "0xB2EB8C")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60002FA")]
		[Address(RVA = "0xB2EB94", Offset = "0xB2EB94", VA = "0xB2EB94")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x60002FB")]
	[Address(RVA = "0xB2EB9C", Offset = "0xB2EB9C", VA = "0xB2EB9C", Slot = "4")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x60002FC")]
	[Address(RVA = "0xB2EBF8", Offset = "0xB2EBF8", VA = "0xB2EBF8", Slot = "5")]
	protected virtual void OnDisable()
	{
	}

	[Token(Token = "0x60002FD")]
	[Address(RVA = "0xB2EC18", Offset = "0xB2EC18", VA = "0xB2EC18")]
	[Conditional("DEBUG_TELEPORT_EVENT_HANDLERS")]
	private void LogEventHandler(string msg)
	{
	}

	[Token(Token = "0x60002FE")]
	[Address(RVA = "0xB2C8E8", Offset = "0xB2C8E8", VA = "0xB2C8E8", Slot = "6")]
	protected virtual void AddEventHandlers()
	{
	}

	[Token(Token = "0x60002FF")]
	[Address(RVA = "0xB2C948", Offset = "0xB2C948", VA = "0xB2C948", Slot = "7")]
	protected virtual void RemoveEventHandlers()
	{
	}

	[Token(Token = "0x6000300")]
	[Address(RVA = "0xB2C798", Offset = "0xB2C798", VA = "0xB2C798")]
	protected TeleportSupport()
	{
	}
}
[Token(Token = "0x20000D2")]
public abstract class TeleportTargetHandler : TeleportSupport
{
	[Token(Token = "0x20000D3")]
	[CompilerGenerated]
	private sealed class <TargetAimCoroutine>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000458")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000459")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400045A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportTargetHandler <>4__this;

		[Token(Token = "0x17000034")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600030C")]
			[Address(RVA = "0xB2F2CC", Offset = "0xB2F2CC", VA = "0xB2F2CC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000035")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600030E")]
			[Address(RVA = "0xB2F314", Offset = "0xB2F314", VA = "0xB2F314", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000309")]
		[Address(RVA = "0xB2EEA0", Offset = "0xB2EEA0", VA = "0xB2EEA0")]
		[DebuggerHidden]
		public <TargetAimCoroutine>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x600030A")]
		[Address(RVA = "0xB2F020", Offset = "0xB2F020", VA = "0xB2F020", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600030B")]
		[Address(RVA = "0xB2F024", Offset = "0xB2F024", VA = "0xB2F024", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600030D")]
		[Address(RVA = "0xB2F2D4", Offset = "0xB2F2D4", VA = "0xB2F2D4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000453")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Tooltip("This bitmask controls which game object layers will be included in the targeting collision tests.")]
	public LayerMask AimCollisionLayerMask;

	[Token(Token = "0x4000454")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected readonly LocomotionTeleport.AimData AimData;

	[Token(Token = "0x4000455")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private readonly Action _startAimAction;

	[Token(Token = "0x4000456")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private readonly List<Vector3> _aimPoints;

	[Token(Token = "0x4000457")]
	private const float ERROR_MARGIN = 0.1f;

	[Token(Token = "0x6000301")]
	[Address(RVA = "0xB2ECE8", Offset = "0xB2ECE8", VA = "0xB2ECE8")]
	protected TeleportTargetHandler()
	{
	}

	[Token(Token = "0x6000302")]
	[Address(RVA = "0xB2EDE4", Offset = "0xB2EDE4", VA = "0xB2EDE4", Slot = "6")]
	protected override void AddEventHandlers()
	{
	}

	[Token(Token = "0x6000303")]
	[Address(RVA = "0xB2EE10", Offset = "0xB2EE10", VA = "0xB2EE10", Slot = "7")]
	protected override void RemoveEventHandlers()
	{
	}

	[Token(Token = "0x6000304")]
	[Address(RVA = "0xB2EE38", Offset = "0xB2EE38", VA = "0xB2EE38")]
	[IteratorStateMachine(typeof(<TargetAimCoroutine>d__7))]
	private IEnumerator TargetAimCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000305")]
	[Address(RVA = "0xB2EEC8", Offset = "0xB2EEC8", VA = "0xB2EEC8", Slot = "8")]
	protected virtual void ResetAimData()
	{
	}

	[Token(Token = "0x6000306")]
	protected abstract bool ConsiderTeleport(Vector3 start, ref Vector3 end);

	[Token(Token = "0x6000307")]
	[Address(RVA = "0xB2EEE4", Offset = "0xB2EEE4", VA = "0xB2EEE4", Slot = "10")]
	public virtual Vector3? ConsiderDestination(Vector3 location)
	{
		return null;
	}
}
[Token(Token = "0x20000D4")]
public class TeleportTargetHandlerNavMesh : TeleportTargetHandler
{
	[Token(Token = "0x400045B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public int NavMeshAreaMask;

	[Token(Token = "0x400045C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private NavMeshPath _path;

	[Token(Token = "0x600030F")]
	[Address(RVA = "0xB2F31C", Offset = "0xB2F31C", VA = "0xB2F31C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000310")]
	[Address(RVA = "0xB2F37C", Offset = "0xB2F37C", VA = "0xB2F37C", Slot = "9")]
	protected override bool ConsiderTeleport(Vector3 start, ref Vector3 end)
	{
		return default(bool);
	}

	[Token(Token = "0x6000311")]
	[Address(RVA = "0xB2F4E8", Offset = "0xB2F4E8", VA = "0xB2F4E8", Slot = "10")]
	public override Vector3? ConsiderDestination(Vector3 location)
	{
		return null;
	}

	[Token(Token = "0x6000312")]
	[Address(RVA = "0xB2F5D8", Offset = "0xB2F5D8", VA = "0xB2F5D8")]
	[Conditional("SHOW_PATH_RESULT")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6000313")]
	[Address(RVA = "0xB2F5DC", Offset = "0xB2F5DC", VA = "0xB2F5DC")]
	public TeleportTargetHandlerNavMesh()
	{
	}
}
[Token(Token = "0x20000D5")]
public class TeleportTargetHandlerNode : TeleportTargetHandler
{
	[Token(Token = "0x400045D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("When checking line of sight to the destination, add this value to the vertical offset for targeting collision checks.")]
	public float LOSOffset;

	[Token(Token = "0x400045E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[Tooltip("Teleport logic will only work with TeleportPoint components that exist in the layers specified by this mask.")]
	public LayerMask TeleportLayerMask;

	[Token(Token = "0x6000314")]
	[Address(RVA = "0xB2F5E8", Offset = "0xB2F5E8", VA = "0xB2F5E8", Slot = "9")]
	protected override bool ConsiderTeleport(Vector3 start, ref Vector3 end)
	{
		return default(bool);
	}

	[Token(Token = "0x6000315")]
	[Address(RVA = "0xB2F7E8", Offset = "0xB2F7E8", VA = "0xB2F7E8")]
	public TeleportTargetHandlerNode()
	{
	}
}
[Token(Token = "0x20000D6")]
public class TeleportTargetHandlerPhysical : TeleportTargetHandler
{
	[Token(Token = "0x6000316")]
	[Address(RVA = "0xB2F7F4", Offset = "0xB2F7F4", VA = "0xB2F7F4", Slot = "9")]
	protected override bool ConsiderTeleport(Vector3 start, ref Vector3 end)
	{
		return default(bool);
	}

	[Token(Token = "0x6000317")]
	[Address(RVA = "0xB2F960", Offset = "0xB2F960", VA = "0xB2F960")]
	public TeleportTargetHandlerPhysical()
	{
	}
}
[Token(Token = "0x20000D7")]
public abstract class TeleportTransition : TeleportSupport
{
	[Token(Token = "0x6000318")]
	[Address(RVA = "0xB2F964", Offset = "0xB2F964", VA = "0xB2F964", Slot = "6")]
	protected override void AddEventHandlers()
	{
	}

	[Token(Token = "0x6000319")]
	[Address(RVA = "0xB2F9EC", Offset = "0xB2F9EC", VA = "0xB2F9EC", Slot = "7")]
	protected override void RemoveEventHandlers()
	{
	}

	[Token(Token = "0x600031A")]
	protected abstract void LocomotionTeleportOnEnterStateTeleporting();

	[Token(Token = "0x600031B")]
	[Address(RVA = "0xB2FA70", Offset = "0xB2FA70", VA = "0xB2FA70")]
	protected TeleportTransition()
	{
	}
}
[Token(Token = "0x20000D8")]
public class TeleportTransitionBlink : TeleportTransition
{
	[Token(Token = "0x20000D9")]
	[CompilerGenerated]
	private sealed class <BlinkCoroutine>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000462")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000463")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000464")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportTransitionBlink <>4__this;

		[Token(Token = "0x4000465")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <elapsedTime>5__2;

		[Token(Token = "0x4000466")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <teleportTime>5__3;

		[Token(Token = "0x4000467")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool <teleported>5__4;

		[Token(Token = "0x17000036")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000322")]
			[Address(RVA = "0xB2FDB4", Offset = "0xB2FDB4", VA = "0xB2FDB4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000037")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000324")]
			[Address(RVA = "0xB2FDFC", Offset = "0xB2FDFC", VA = "0xB2FDFC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600031F")]
		[Address(RVA = "0xB2FB00", Offset = "0xB2FB00", VA = "0xB2FB00")]
		[DebuggerHidden]
		public <BlinkCoroutine>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x6000320")]
		[Address(RVA = "0xB2FCB8", Offset = "0xB2FCB8", VA = "0xB2FCB8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000321")]
		[Address(RVA = "0xB2FCBC", Offset = "0xB2FCBC", VA = "0xB2FCBC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000323")]
		[Address(RVA = "0xB2FDBC", Offset = "0xB2FDBC", VA = "0xB2FDBC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400045F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Range(0.01f, 2f)]
	[Tooltip("How long the transition takes. Usually this is greater than Teleport Delay.")]
	public float TransitionDuration;

	[Token(Token = "0x4000460")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Range(0f, 1f)]
	[Tooltip("At what percentage of the elapsed transition time does the teleport occur?")]
	public float TeleportDelay;

	[Token(Token = "0x4000461")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("Fade to black over the duration of the transition")]
	public AnimationCurve FadeLevels;

	[Token(Token = "0x600031C")]
	[Address(RVA = "0xB2FA78", Offset = "0xB2FA78", VA = "0xB2FA78", Slot = "8")]
	protected override void LocomotionTeleportOnEnterStateTeleporting()
	{
	}

	[Token(Token = "0x600031D")]
	[Address(RVA = "0xB2FA98", Offset = "0xB2FA98", VA = "0xB2FA98")]
	[IteratorStateMachine(typeof(<BlinkCoroutine>d__4))]
	protected IEnumerator BlinkCoroutine()
	{
		return null;
	}

	[Token(Token = "0x600031E")]
	[Address(RVA = "0xB2FB28", Offset = "0xB2FB28", VA = "0xB2FB28")]
	public TeleportTransitionBlink()
	{
	}
}
[Token(Token = "0x20000DA")]
public class TeleportTransitionInstant : TeleportTransition
{
	[Token(Token = "0x6000325")]
	[Address(RVA = "0xB2FE04", Offset = "0xB2FE04", VA = "0xB2FE04", Slot = "8")]
	protected override void LocomotionTeleportOnEnterStateTeleporting()
	{
	}

	[Token(Token = "0x6000326")]
	[Address(RVA = "0xB2FE20", Offset = "0xB2FE20", VA = "0xB2FE20")]
	public TeleportTransitionInstant()
	{
	}
}
[Token(Token = "0x20000DB")]
public class TeleportTransitionWarp : TeleportTransition
{
	[Token(Token = "0x20000DC")]
	[CompilerGenerated]
	private sealed class <DoWarp>d__3 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400046A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400046B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400046C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportTransitionWarp <>4__this;

		[Token(Token = "0x400046D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 <startPosition>5__2;

		[Token(Token = "0x400046E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <elapsedTime>5__3;

		[Token(Token = "0x17000038")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600032D")]
			[Address(RVA = "0xB3002C", Offset = "0xB3002C", VA = "0xB3002C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000039")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600032F")]
			[Address(RVA = "0xB30074", Offset = "0xB30074", VA = "0xB30074", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600032A")]
		[Address(RVA = "0xB2FEB0", Offset = "0xB2FEB0", VA = "0xB2FEB0")]
		[DebuggerHidden]
		public <DoWarp>d__3(int <>1__state)
		{
		}

		[Token(Token = "0x600032B")]
		[Address(RVA = "0xB2FF14", Offset = "0xB2FF14", VA = "0xB2FF14", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600032C")]
		[Address(RVA = "0xB2FF18", Offset = "0xB2FF18", VA = "0xB2FF18", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600032E")]
		[Address(RVA = "0xB30034", Offset = "0xB30034", VA = "0xB30034", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000468")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Range(0.01f, 1f)]
	[Tooltip("How much time the warp transition takes to complete.")]
	public float TransitionDuration;

	[Token(Token = "0x4000469")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[HideInInspector]
	public AnimationCurve PositionLerp;

	[Token(Token = "0x6000327")]
	[Address(RVA = "0xB2FE28", Offset = "0xB2FE28", VA = "0xB2FE28", Slot = "8")]
	protected override void LocomotionTeleportOnEnterStateTeleporting()
	{
	}

	[Token(Token = "0x6000328")]
	[Address(RVA = "0xB2FE48", Offset = "0xB2FE48", VA = "0xB2FE48")]
	[IteratorStateMachine(typeof(<DoWarp>d__3))]
	private IEnumerator DoWarp()
	{
		return null;
	}

	[Token(Token = "0x6000329")]
	[Address(RVA = "0xB2FED8", Offset = "0xB2FED8", VA = "0xB2FED8")]
	public TeleportTransitionWarp()
	{
	}
}
[Token(Token = "0x20000DD")]
public static class NativeVideoPlayer
{
	[Token(Token = "0x20000DE")]
	public enum PlabackState
	{
		[Token(Token = "0x4000487")]
		Idle = 1,
		[Token(Token = "0x4000488")]
		Preparing,
		[Token(Token = "0x4000489")]
		Buffering,
		[Token(Token = "0x400048A")]
		Ready,
		[Token(Token = "0x400048B")]
		Ended
	}

	[Token(Token = "0x20000DF")]
	public enum StereoMode
	{
		[Token(Token = "0x400048D")]
		Unknown = -1,
		[Token(Token = "0x400048E")]
		Mono,
		[Token(Token = "0x400048F")]
		TopBottom,
		[Token(Token = "0x4000490")]
		LeftRight,
		[Token(Token = "0x4000491")]
		Mesh
	}

	[Token(Token = "0x400046F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static IntPtr? _Activity;

	[Token(Token = "0x4000470")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static IntPtr? _VideoPlayerClass;

	[Token(Token = "0x4000471")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static readonly jvalue[] EmptyParams;

	[Token(Token = "0x4000472")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static IntPtr getIsPlayingMethodId;

	[Token(Token = "0x4000473")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private static IntPtr getCurrentPlaybackStateMethodId;

	[Token(Token = "0x4000474")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private static IntPtr getDurationMethodId;

	[Token(Token = "0x4000475")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private static IntPtr getStereoModeMethodId;

	[Token(Token = "0x4000476")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private static IntPtr getWidthMethodId;

	[Token(Token = "0x4000477")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private static IntPtr getHeightMethodId;

	[Token(Token = "0x4000478")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private static IntPtr getPlaybackPositionMethodId;

	[Token(Token = "0x4000479")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private static IntPtr setPlaybackPositionMethodId;

	[Token(Token = "0x400047A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private static jvalue[] setPlaybackPositionParams;

	[Token(Token = "0x400047B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private static IntPtr playVideoMethodId;

	[Token(Token = "0x400047C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private static jvalue[] playVideoParams;

	[Token(Token = "0x400047D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private static IntPtr stopMethodId;

	[Token(Token = "0x400047E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private static IntPtr resumeMethodId;

	[Token(Token = "0x400047F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private static IntPtr pauseMethodId;

	[Token(Token = "0x4000480")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private static IntPtr setPlaybackSpeedMethodId;

	[Token(Token = "0x4000481")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private static jvalue[] setPlaybackSpeedParams;

	[Token(Token = "0x4000482")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private static IntPtr setLoopingMethodId;

	[Token(Token = "0x4000483")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private static jvalue[] setLoopingParams;

	[Token(Token = "0x4000484")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private static IntPtr setListenerRotationQuaternionMethodId;

	[Token(Token = "0x4000485")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private static jvalue[] setListenerRotationQuaternionParams;

	[Token(Token = "0x1700003A")]
	private static IntPtr VideoPlayerClass
	{
		[Token(Token = "0x6000330")]
		[Address(RVA = "0xB3007C", Offset = "0xB3007C", VA = "0xB3007C")]
		get
		{
			return default(IntPtr);
		}
	}

	[Token(Token = "0x1700003B")]
	private static IntPtr Activity
	{
		[Token(Token = "0x6000331")]
		[Address(RVA = "0xB3036C", Offset = "0xB3036C", VA = "0xB3036C")]
		get
		{
			return default(IntPtr);
		}
	}

	[Token(Token = "0x1700003C")]
	public static bool IsAvailable
	{
		[Token(Token = "0x6000332")]
		[Address(RVA = "0xB305EC", Offset = "0xB305EC", VA = "0xB305EC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700003D")]
	public static bool IsPlaying
	{
		[Token(Token = "0x6000333")]
		[Address(RVA = "0xB30660", Offset = "0xB30660", VA = "0xB30660")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700003E")]
	public static PlabackState CurrentPlaybackState
	{
		[Token(Token = "0x6000334")]
		[Address(RVA = "0xB30764", Offset = "0xB30764", VA = "0xB30764")]
		get
		{
			return default(PlabackState);
		}
	}

	[Token(Token = "0x1700003F")]
	public static long Duration
	{
		[Token(Token = "0x6000335")]
		[Address(RVA = "0xB3086C", Offset = "0xB3086C", VA = "0xB3086C")]
		get
		{
			return default(long);
		}
	}

	[Token(Token = "0x17000040")]
	public static StereoMode VideoStereoMode
	{
		[Token(Token = "0x6000336")]
		[Address(RVA = "0xB30974", Offset = "0xB30974", VA = "0xB30974")]
		get
		{
			return default(StereoMode);
		}
	}

	[Token(Token = "0x17000041")]
	public static int VideoWidth
	{
		[Token(Token = "0x6000337")]
		[Address(RVA = "0xB30A7C", Offset = "0xB30A7C", VA = "0xB30A7C")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000042")]
	public static int VideoHeight
	{
		[Token(Token = "0x6000338")]
		[Address(RVA = "0xB30B84", Offset = "0xB30B84", VA = "0xB30B84")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000043")]
	public static long PlaybackPosition
	{
		[Token(Token = "0x6000339")]
		[Address(RVA = "0xB30C8C", Offset = "0xB30C8C", VA = "0xB30C8C")]
		get
		{
			return default(long);
		}
		[Token(Token = "0x600033A")]
		[Address(RVA = "0xB30D94", Offset = "0xB30D94", VA = "0xB30D94")]
		set
		{
		}
	}

	[Token(Token = "0x600033B")]
	[Address(RVA = "0xB30EF4", Offset = "0xB30EF4", VA = "0xB30EF4")]
	public static void PlayVideo(string path, string drmLicenseUrl, IntPtr surfaceObj)
	{
	}

	[Token(Token = "0x600033C")]
	[Address(RVA = "0xB31100", Offset = "0xB31100", VA = "0xB31100")]
	public static void Stop()
	{
	}

	[Token(Token = "0x600033D")]
	[Address(RVA = "0xB31208", Offset = "0xB31208", VA = "0xB31208")]
	public static void Play()
	{
	}

	[Token(Token = "0x600033E")]
	[Address(RVA = "0xB31310", Offset = "0xB31310", VA = "0xB31310")]
	public static void Pause()
	{
	}

	[Token(Token = "0x600033F")]
	[Address(RVA = "0xB31418", Offset = "0xB31418", VA = "0xB31418")]
	public static void SetPlaybackSpeed(float speed)
	{
	}

	[Token(Token = "0x6000340")]
	[Address(RVA = "0xB31580", Offset = "0xB31580", VA = "0xB31580")]
	public static void SetLooping(bool looping)
	{
	}

	[Token(Token = "0x6000341")]
	[Address(RVA = "0xB316E4", Offset = "0xB316E4", VA = "0xB316E4")]
	public static void SetListenerRotation(Quaternion rotation)
	{
	}
}
[Token(Token = "0x20000E0")]
public class ButtonDownListener : MonoBehaviour, IPointerDownHandler, IEventSystemHandler
{
	[Token(Token = "0x1400000F")]
	public event Action onButtonDown
	{
		[Token(Token = "0x6000343")]
		[Address(RVA = "0xB31928", Offset = "0xB31928", VA = "0xB31928")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000344")]
		[Address(RVA = "0xB319C4", Offset = "0xB319C4", VA = "0xB319C4")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6000345")]
	[Address(RVA = "0xB31A60", Offset = "0xB31A60", VA = "0xB31A60", Slot = "4")]
	public void OnPointerDown(PointerEventData eventData)
	{
	}

	[Token(Token = "0x6000346")]
	[Address(RVA = "0xB31A7C", Offset = "0xB31A7C", VA = "0xB31A7C")]
	public ButtonDownListener()
	{
	}
}
[Token(Token = "0x20000E1")]
public class MediaPlayerImage : Image
{
	[Token(Token = "0x20000E2")]
	public enum ButtonType
	{
		[Token(Token = "0x4000495")]
		Play,
		[Token(Token = "0x4000496")]
		Pause,
		[Token(Token = "0x4000497")]
		FastForward,
		[Token(Token = "0x4000498")]
		Rewind,
		[Token(Token = "0x4000499")]
		SkipForward,
		[Token(Token = "0x400049A")]
		SkipBack,
		[Token(Token = "0x400049B")]
		Stop
	}

	[Token(Token = "0x4000493")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	[SerializeField]
	private ButtonType m_ButtonType;

	[Token(Token = "0x17000044")]
	public ButtonType buttonType
	{
		[Token(Token = "0x6000347")]
		[Address(RVA = "0xB31A84", Offset = "0xB31A84", VA = "0xB31A84")]
		get
		{
			return default(ButtonType);
		}
		[Token(Token = "0x6000348")]
		[Address(RVA = "0xB31A8C", Offset = "0xB31A8C", VA = "0xB31A8C")]
		set
		{
		}
	}

	[Token(Token = "0x6000349")]
	[Address(RVA = "0xB31AB0", Offset = "0xB31AB0", VA = "0xB31AB0", Slot = "44")]
	protected override void OnPopulateMesh(VertexHelper toFill)
	{
	}

	[Token(Token = "0x600034A")]
	[Address(RVA = "0xB32904", Offset = "0xB32904", VA = "0xB32904")]
	public MediaPlayerImage()
	{
	}
}
[Token(Token = "0x20000E3")]
public class MoviePlayerSample : MonoBehaviour
{
	[Token(Token = "0x20000E4")]
	public enum VideoShape
	{
		[Token(Token = "0x40004B0")]
		_360,
		[Token(Token = "0x40004B1")]
		_180,
		[Token(Token = "0x40004B2")]
		Quad
	}

	[Token(Token = "0x20000E5")]
	public enum VideoStereo
	{
		[Token(Token = "0x40004B4")]
		Mono,
		[Token(Token = "0x40004B5")]
		TopBottom,
		[Token(Token = "0x40004B6")]
		LeftRight,
		[Token(Token = "0x40004B7")]
		BottomTop
	}

	[Token(Token = "0x20000E6")]
	[CompilerGenerated]
	private sealed class <Start>d__33 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40004B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40004B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40004BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MoviePlayerSample <>4__this;

		[Token(Token = "0x17000048")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000361")]
			[Address(RVA = "0xB33D9C", Offset = "0xB33D9C", VA = "0xB33D9C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000049")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000363")]
			[Address(RVA = "0xB33DE4", Offset = "0xB33DE4", VA = "0xB33DE4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600035E")]
		[Address(RVA = "0xB32FA8", Offset = "0xB32FA8", VA = "0xB32FA8")]
		[DebuggerHidden]
		public <Start>d__33(int <>1__state)
		{
		}

		[Token(Token = "0x600035F")]
		[Address(RVA = "0xB33BFC", Offset = "0xB33BFC", VA = "0xB33BFC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000360")]
		[Address(RVA = "0xB33C00", Offset = "0xB33C00", VA = "0xB33C00", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000362")]
		[Address(RVA = "0xB33DA4", Offset = "0xB33DA4", VA = "0xB33DA4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400049C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool videoPausedBeforeAppPause;

	[Token(Token = "0x400049D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private VideoPlayer videoPlayer;

	[Token(Token = "0x400049E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private OVROverlay overlay;

	[Token(Token = "0x400049F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Renderer mediaRenderer;

	[Token(Token = "0x40004A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private RenderTexture copyTexture;

	[Token(Token = "0x40004A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Material externalTex2DMaterial;

	[Token(Token = "0x40004A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public string MovieName;

	[Token(Token = "0x40004A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public string DrmLicenseUrl;

	[Token(Token = "0x40004A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public bool LoopVideo;

	[Token(Token = "0x40004A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public VideoShape Shape;

	[Token(Token = "0x40004A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public VideoStereo Stereo;

	[Token(Token = "0x40004AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public bool AutoDetectStereoLayout;

	[Token(Token = "0x40004AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7D")]
	public bool DisplayMono;

	[Token(Token = "0x40004AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private VideoShape _LastShape;

	[Token(Token = "0x40004AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private VideoStereo _LastStereo;

	[Token(Token = "0x40004AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private bool _LastDisplayMono;

	[Token(Token = "0x17000045")]
	public bool IsPlaying
	{
		[Token(Token = "0x600034B")]
		[Address(RVA = "0xB3295C", Offset = "0xB3295C", VA = "0xB3295C")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600034C")]
		[Address(RVA = "0xB32964", Offset = "0xB32964", VA = "0xB32964")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000046")]
	public long Duration
	{
		[Token(Token = "0x600034D")]
		[Address(RVA = "0xB32970", Offset = "0xB32970", VA = "0xB32970")]
		[CompilerGenerated]
		get
		{
			return default(long);
		}
		[Token(Token = "0x600034E")]
		[Address(RVA = "0xB32978", Offset = "0xB32978", VA = "0xB32978")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000047")]
	public long PlaybackPosition
	{
		[Token(Token = "0x600034F")]
		[Address(RVA = "0xB32980", Offset = "0xB32980", VA = "0xB32980")]
		[CompilerGenerated]
		get
		{
			return default(long);
		}
		[Token(Token = "0x6000350")]
		[Address(RVA = "0xB32988", Offset = "0xB32988", VA = "0xB32988")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x6000351")]
	[Address(RVA = "0xB32990", Offset = "0xB32990", VA = "0xB32990")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000352")]
	[Address(RVA = "0xB32BE0", Offset = "0xB32BE0", VA = "0xB32BE0")]
	private bool IsLocalVideo(string movieName)
	{
		return default(bool);
	}

	[Token(Token = "0x6000353")]
	[Address(RVA = "0xB32C40", Offset = "0xB32C40", VA = "0xB32C40")]
	private void UpdateShapeAndStereo()
	{
	}

	[Token(Token = "0x6000354")]
	[Address(RVA = "0xB32F40", Offset = "0xB32F40", VA = "0xB32F40")]
	[IteratorStateMachine(typeof(<Start>d__33))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x6000355")]
	[Address(RVA = "0xB32FD0", Offset = "0xB32FD0", VA = "0xB32FD0")]
	public void Play(string moviePath, string drmLicencesUrl)
	{
	}

	[Token(Token = "0x6000356")]
	[Address(RVA = "0xB33270", Offset = "0xB33270", VA = "0xB33270")]
	public void Play()
	{
	}

	[Token(Token = "0x6000357")]
	[Address(RVA = "0xB332F4", Offset = "0xB332F4", VA = "0xB332F4")]
	public void Pause()
	{
	}

	[Token(Token = "0x6000358")]
	[Address(RVA = "0xB33374", Offset = "0xB33374", VA = "0xB33374")]
	public void SeekTo(long position)
	{
	}

	[Token(Token = "0x6000359")]
	[Address(RVA = "0xB33460", Offset = "0xB33460", VA = "0xB33460")]
	private void Update()
	{
	}

	[Token(Token = "0x600035A")]
	[Address(RVA = "0xB339F0", Offset = "0xB339F0", VA = "0xB339F0")]
	public void SetPlaybackSpeed(float speed)
	{
	}

	[Token(Token = "0x600035B")]
	[Address(RVA = "0xB33A8C", Offset = "0xB33A8C", VA = "0xB33A8C")]
	public void Stop()
	{
	}

	[Token(Token = "0x600035C")]
	[Address(RVA = "0xB33B0C", Offset = "0xB33B0C", VA = "0xB33B0C")]
	private void OnApplicationPause(bool appWasPaused)
	{
	}

	[Token(Token = "0x600035D")]
	[Address(RVA = "0xB33BEC", Offset = "0xB33BEC", VA = "0xB33BEC")]
	public MoviePlayerSample()
	{
	}
}
[Token(Token = "0x20000E8")]
public class MoviePlayerSampleControls : MonoBehaviour
{
	[Token(Token = "0x20000E9")]
	private enum PlaybackState
	{
		[Token(Token = "0x40004D4")]
		Playing,
		[Token(Token = "0x40004D5")]
		Paused,
		[Token(Token = "0x40004D6")]
		Rewinding,
		[Token(Token = "0x40004D7")]
		FastForwarding
	}

	[Token(Token = "0x40004BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public MoviePlayerSample Player;

	[Token(Token = "0x40004BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public OVRInputModule InputModule;

	[Token(Token = "0x40004C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public OVRGazePointer GazePointer;

	[Token(Token = "0x40004C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject LeftHand;

	[Token(Token = "0x40004C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject RightHand;

	[Token(Token = "0x40004C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Canvas Canvas;

	[Token(Token = "0x40004C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public ButtonDownListener PlayPause;

	[Token(Token = "0x40004C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public MediaPlayerImage PlayPauseImage;

	[Token(Token = "0x40004C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Slider ProgressBar;

	[Token(Token = "0x40004C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public ButtonDownListener FastForward;

	[Token(Token = "0x40004C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public MediaPlayerImage FastForwardImage;

	[Token(Token = "0x40004C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public ButtonDownListener Rewind;

	[Token(Token = "0x40004CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public MediaPlayerImage RewindImage;

	[Token(Token = "0x40004CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public float TimeoutTime;

	[Token(Token = "0x40004CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private bool _isVisible;

	[Token(Token = "0x40004CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private float _lastButtonTime;

	[Token(Token = "0x40004CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private bool _didSeek;

	[Token(Token = "0x40004CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private long _seekPreviousPosition;

	[Token(Token = "0x40004D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private long _rewindStartPosition;

	[Token(Token = "0x40004D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private float _rewindStartTime;

	[Token(Token = "0x40004D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private PlaybackState _state;

	[Token(Token = "0x6000366")]
	[Address(RVA = "0xB33EC0", Offset = "0xB33EC0", VA = "0xB33EC0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000367")]
	[Address(RVA = "0xB341EC", Offset = "0xB341EC", VA = "0xB341EC")]
	private void OnPlayPauseClicked()
	{
	}

	[Token(Token = "0x6000368")]
	[Address(RVA = "0xB343BC", Offset = "0xB343BC", VA = "0xB343BC")]
	private void OnFastForwardClicked()
	{
	}

	[Token(Token = "0x6000369")]
	[Address(RVA = "0xB344E0", Offset = "0xB344E0", VA = "0xB344E0")]
	private void OnRewindClicked()
	{
	}

	[Token(Token = "0x600036A")]
	[Address(RVA = "0xB345DC", Offset = "0xB345DC", VA = "0xB345DC")]
	private void OnSeekBarMoved(float value)
	{
	}

	[Token(Token = "0x600036B")]
	[Address(RVA = "0xB344B4", Offset = "0xB344B4", VA = "0xB344B4")]
	private void Seek(long pos)
	{
	}

	[Token(Token = "0x600036C")]
	[Address(RVA = "0xB3463C", Offset = "0xB3463C", VA = "0xB3463C")]
	private void Update()
	{
	}

	[Token(Token = "0x600036D")]
	[Address(RVA = "0xB340EC", Offset = "0xB340EC", VA = "0xB340EC")]
	private void SetVisible(bool visible)
	{
	}

	[Token(Token = "0x600036E")]
	[Address(RVA = "0xB34948", Offset = "0xB34948", VA = "0xB34948")]
	public MoviePlayerSampleControls()
	{
	}
}
[Token(Token = "0x20000EA")]
public static class VectorUtil
{
	[Token(Token = "0x600036F")]
	[Address(RVA = "0xB33978", Offset = "0xB33978", VA = "0xB33978")]
	public static Vector4 ToVector(this Rect rect)
	{
		return default(Vector4);
	}
}
[Token(Token = "0x20000EB")]
public class AppDeeplinkUI : MonoBehaviour
{
	[Token(Token = "0x40004D8")]
	private const ulong UNITY_COMPANION_APP_ID = 3535750239844224uL;

	[Token(Token = "0x40004D9")]
	private const ulong UNREAL_COMPANION_APP_ID = 4055411724486843uL;

	[Token(Token = "0x40004DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private RectTransform deeplinkAppId;

	[Token(Token = "0x40004DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private RectTransform deeplinkMessage;

	[Token(Token = "0x40004DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private RectTransform uiLaunchType;

	[Token(Token = "0x40004DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private RectTransform uiLaunchSource;

	[Token(Token = "0x40004DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private RectTransform uiDeepLinkMessage;

	[Token(Token = "0x40004DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool inMenu;

	[Token(Token = "0x6000370")]
	[Address(RVA = "0xB34958", Offset = "0xB34958", VA = "0xB34958")]
	private void Start()
	{
	}

	[Token(Token = "0x6000371")]
	[Address(RVA = "0xB34F30", Offset = "0xB34F30", VA = "0xB34F30")]
	private void Update()
	{
	}

	[Token(Token = "0x6000372")]
	[Address(RVA = "0xB3518C", Offset = "0xB3518C", VA = "0xB3518C")]
	private void LaunchUnrealDeeplinkSample()
	{
	}

	[Token(Token = "0x6000373")]
	[Address(RVA = "0xB352F0", Offset = "0xB352F0", VA = "0xB352F0")]
	private void LaunchSelf()
	{
	}

	[Token(Token = "0x6000374")]
	[Address(RVA = "0xB35458", Offset = "0xB35458", VA = "0xB35458")]
	private void LaunchOtherApp()
	{
	}

	[Token(Token = "0x6000375")]
	[Address(RVA = "0xB355DC", Offset = "0xB355DC", VA = "0xB355DC")]
	public AppDeeplinkUI()
	{
	}
}
[Token(Token = "0x20000EC")]
public class CustomDebugUI : MonoBehaviour
{
	[Token(Token = "0x40004E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private RectTransform textPrefab;

	[Token(Token = "0x40004E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static CustomDebugUI instance;

	[Token(Token = "0x40004E2")]
	private const BindingFlags privateFlags = BindingFlags.Instance | BindingFlags.NonPublic;

	[Token(Token = "0x6000376")]
	[Address(RVA = "0xB355EC", Offset = "0xB355EC", VA = "0xB355EC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000377")]
	[Address(RVA = "0xB35638", Offset = "0xB35638", VA = "0xB35638")]
	private void Start()
	{
	}

	[Token(Token = "0x6000378")]
	[Address(RVA = "0xB3563C", Offset = "0xB3563C", VA = "0xB3563C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000379")]
	[Address(RVA = "0xB34CF0", Offset = "0xB34CF0", VA = "0xB34CF0")]
	public RectTransform AddTextField(string label, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x600037A")]
	[Address(RVA = "0xB35640", Offset = "0xB35640", VA = "0xB35640")]
	public void RemoveFromCanvas(RectTransform element, int targetCanvas = 0)
	{
	}

	[Token(Token = "0x600037B")]
	[Address(RVA = "0xB3585C", Offset = "0xB3585C", VA = "0xB3585C")]
	public CustomDebugUI()
	{
	}
}
[Token(Token = "0x20000ED")]
public class DebugUISample : MonoBehaviour
{
	[Token(Token = "0x40004E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool inMenu;

	[Token(Token = "0x40004E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Text sliderText;

	[Token(Token = "0x600037C")]
	[Address(RVA = "0xB35864", Offset = "0xB35864", VA = "0xB35864")]
	private void Start()
	{
	}

	[Token(Token = "0x600037D")]
	[Address(RVA = "0xB35DAC", Offset = "0xB35DAC", VA = "0xB35DAC")]
	public void TogglePressed(Toggle t)
	{
	}

	[Token(Token = "0x600037E")]
	[Address(RVA = "0xB35E58", Offset = "0xB35E58", VA = "0xB35E58")]
	public void RadioPressed(string radioLabel, string group, Toggle t)
	{
	}

	[Token(Token = "0x600037F")]
	[Address(RVA = "0xB36070", Offset = "0xB36070", VA = "0xB36070")]
	public void SliderPressed(float f)
	{
	}

	[Token(Token = "0x6000380")]
	[Address(RVA = "0xB36144", Offset = "0xB36144", VA = "0xB36144")]
	private void Update()
	{
	}

	[Token(Token = "0x6000381")]
	[Address(RVA = "0xB3621C", Offset = "0xB3621C", VA = "0xB3621C")]
	private void LogButtonPressed()
	{
	}

	[Token(Token = "0x6000382")]
	[Address(RVA = "0xB36284", Offset = "0xB36284", VA = "0xB36284")]
	public DebugUISample()
	{
	}
}
[Token(Token = "0x20000EE")]
public class AnalyticsUI : MonoBehaviour
{
	[Token(Token = "0x6000387")]
	[Address(RVA = "0xB3642C", Offset = "0xB3642C", VA = "0xB3642C")]
	public AnalyticsUI()
	{
	}
}
[Token(Token = "0x20000EF")]
public class SampleUI : MonoBehaviour
{
	[Token(Token = "0x40004E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private RectTransform collectionButton;

	[Token(Token = "0x40004E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private RectTransform inputText;

	[Token(Token = "0x40004E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private RectTransform valueText;

	[Token(Token = "0x40004E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool inMenu;

	[Token(Token = "0x6000388")]
	[Address(RVA = "0xB36434", Offset = "0xB36434", VA = "0xB36434")]
	private void Start()
	{
	}

	[Token(Token = "0x6000389")]
	[Address(RVA = "0xB364CC", Offset = "0xB364CC", VA = "0xB364CC")]
	private void Update()
	{
	}

	[Token(Token = "0x600038A")]
	[Address(RVA = "0xB365A4", Offset = "0xB365A4", VA = "0xB365A4")]
	private string GetText()
	{
		return null;
	}

	[Token(Token = "0x600038B")]
	[Address(RVA = "0xB36600", Offset = "0xB36600", VA = "0xB36600")]
	public SampleUI()
	{
	}
}
[Token(Token = "0x20000F0")]
public class StartCrashlytics : MonoBehaviour
{
	[Token(Token = "0x600038C")]
	[Address(RVA = "0xB36608", Offset = "0xB36608", VA = "0xB36608")]
	public StartCrashlytics()
	{
	}
}
[Token(Token = "0x20000F1")]
public class HandsActiveChecker : MonoBehaviour
{
	[Token(Token = "0x20000F2")]
	[CompilerGenerated]
	private sealed class <GetCenterEye>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40004ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40004EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40004EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HandsActiveChecker <>4__this;

		[Token(Token = "0x1700004A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000394")]
			[Address(RVA = "0xB369D4", Offset = "0xB369D4", VA = "0xB369D4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700004B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000396")]
			[Address(RVA = "0xB36A1C", Offset = "0xB36A1C", VA = "0xB36A1C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000391")]
		[Address(RVA = "0xB3689C", Offset = "0xB3689C", VA = "0xB3689C")]
		[DebuggerHidden]
		public <GetCenterEye>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x6000392")]
		[Address(RVA = "0xB368CC", Offset = "0xB368CC", VA = "0xB368CC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000393")]
		[Address(RVA = "0xB368D0", Offset = "0xB368D0", VA = "0xB368D0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000395")]
		[Address(RVA = "0xB369DC", Offset = "0xB369DC", VA = "0xB369DC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40004E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject _notificationPrefab;

	[Token(Token = "0x40004EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private GameObject _notification;

	[Token(Token = "0x40004EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private OVRCameraRig _cameraRig;

	[Token(Token = "0x40004EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform _centerEye;

	[Token(Token = "0x600038D")]
	[Address(RVA = "0xB36610", Offset = "0xB36610", VA = "0xB36610")]
	private void Awake()
	{
	}

	[Token(Token = "0x600038E")]
	[Address(RVA = "0xB36704", Offset = "0xB36704", VA = "0xB36704")]
	private void Update()
	{
	}

	[Token(Token = "0x600038F")]
	[Address(RVA = "0xB3669C", Offset = "0xB3669C", VA = "0xB3669C")]
	[IteratorStateMachine(typeof(<GetCenterEye>d__6))]
	private IEnumerator GetCenterEye()
	{
		return null;
	}

	[Token(Token = "0x6000390")]
	[Address(RVA = "0xB368C4", Offset = "0xB368C4", VA = "0xB368C4")]
	public HandsActiveChecker()
	{
	}
}
[Token(Token = "0x20000F3")]
[ExecuteInEditMode]
public class CharacterCapsule : MonoBehaviour
{
	[Token(Token = "0x40004F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private CharacterController _character;

	[Token(Token = "0x40004F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private MeshFilter _meshFilter;

	[Token(Token = "0x40004F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float _height;

	[Token(Token = "0x40004F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float _radius;

	[Token(Token = "0x40004F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Range(4f, 32f)]
	public int SubdivisionsU;

	[Token(Token = "0x40004F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[Range(4f, 32f)]
	public int SubdivisionsV;

	[Token(Token = "0x40004F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int _subdivisionU;

	[Token(Token = "0x40004F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private int _subdivisionV;

	[Token(Token = "0x40004F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Vector3[] _vertices;

	[Token(Token = "0x40004F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int[] _triangles;

	[Token(Token = "0x6000397")]
	[Address(RVA = "0xB36A24", Offset = "0xB36A24", VA = "0xB36A24")]
	private void Update()
	{
	}

	[Token(Token = "0x6000398")]
	[Address(RVA = "0xB38390", Offset = "0xB38390", VA = "0xB38390")]
	public CharacterCapsule()
	{
	}
}
[Token(Token = "0x20000F4")]
public class LocomotionSampleSupport : MonoBehaviour
{
	[Token(Token = "0x40004FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private LocomotionController lc;

	[Token(Token = "0x40004FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool inMenu;

	[Token(Token = "0x1700004C")]
	private LocomotionTeleport TeleportController
	{
		[Token(Token = "0x6000399")]
		[Address(RVA = "0xB38398", Offset = "0xB38398", VA = "0xB38398")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600039A")]
	[Address(RVA = "0xB383E8", Offset = "0xB383E8", VA = "0xB383E8")]
	public void Start()
	{
	}

	[Token(Token = "0x600039B")]
	[Address(RVA = "0xB387F4", Offset = "0xB387F4", VA = "0xB387F4")]
	public void Update()
	{
	}

	[Token(Token = "0x600039C")]
	[Address(RVA = "0xB388CC", Offset = "0xB388CC", VA = "0xB388CC")]
	[Conditional("DEBUG_LOCOMOTION_PANEL")]
	private static void Log(string msg)
	{
	}

	[Token(Token = "0x600039D")]
	public static TActivate ActivateCategory<TCategory, TActivate>(GameObject target) where TCategory : MonoBehaviour where TActivate : MonoBehaviour
	{
		return null;
	}

	[Token(Token = "0x600039E")]
	protected void ActivateHandlers<TInput, TAim, TTarget, TOrientation, TTransition>() where TInput : TeleportInputHandler where TAim : TeleportAimHandler where TTarget : TeleportTargetHandler where TOrientation : TeleportOrientationHandler where TTransition : TeleportTransition
	{
	}

	[Token(Token = "0x600039F")]
	protected void ActivateInput<TActivate>() where TActivate : TeleportInputHandler
	{
	}

	[Token(Token = "0x60003A0")]
	protected void ActivateAim<TActivate>() where TActivate : TeleportAimHandler
	{
	}

	[Token(Token = "0x60003A1")]
	protected void ActivateTarget<TActivate>() where TActivate : TeleportTargetHandler
	{
	}

	[Token(Token = "0x60003A2")]
	protected void ActivateOrientation<TActivate>() where TActivate : TeleportOrientationHandler
	{
	}

	[Token(Token = "0x60003A3")]
	protected void ActivateTransition<TActivate>() where TActivate : TeleportTransition
	{
	}

	[Token(Token = "0x60003A4")]
	protected TActivate ActivateCategory<TCategory, TActivate>() where TCategory : MonoBehaviour where TActivate : MonoBehaviour
	{
		return null;
	}

	[Token(Token = "0x60003A5")]
	[Address(RVA = "0xB38924", Offset = "0xB38924", VA = "0xB38924")]
	protected void UpdateToggle(Toggle toggle, bool enabled)
	{
	}

	[Token(Token = "0x60003A6")]
	[Address(RVA = "0xB38964", Offset = "0xB38964", VA = "0xB38964")]
	private void SetupNonCap()
	{
	}

	[Token(Token = "0x60003A7")]
	[Address(RVA = "0xB389D0", Offset = "0xB389D0", VA = "0xB389D0")]
	private void SetupTeleportDefaults()
	{
	}

	[Token(Token = "0x60003A8")]
	[Address(RVA = "0xB38B1C", Offset = "0xB38B1C", VA = "0xB38B1C")]
	protected GameObject AddInstance(GameObject template, string label)
	{
		return null;
	}

	[Token(Token = "0x60003A9")]
	[Address(RVA = "0xB38BEC", Offset = "0xB38BEC", VA = "0xB38BEC")]
	private void SetupNodeTeleport()
	{
	}

	[Token(Token = "0x60003AA")]
	[Address(RVA = "0xB386D0", Offset = "0xB386D0", VA = "0xB386D0")]
	private void SetupTwoStickTeleport()
	{
	}

	[Token(Token = "0x60003AB")]
	[Address(RVA = "0xB38CBC", Offset = "0xB38CBC", VA = "0xB38CBC")]
	private void SetupWalkOnly()
	{
	}

	[Token(Token = "0x60003AC")]
	[Address(RVA = "0xB38D08", Offset = "0xB38D08", VA = "0xB38D08")]
	private void SetupLeftStrafeRightTeleport()
	{
	}

	[Token(Token = "0x60003AD")]
	[Address(RVA = "0xB38E18", Offset = "0xB38E18", VA = "0xB38E18")]
	public LocomotionSampleSupport()
	{
	}
}
[Token(Token = "0x20000F5")]
[RequireComponent(typeof(Canvas))]
public class OVROverlayCanvas : MonoBehaviour
{
	[Token(Token = "0x20000F6")]
	public enum DrawMode
	{
		[Token(Token = "0x4000511")]
		Opaque,
		[Token(Token = "0x4000512")]
		OpaqueWithClip,
		[Token(Token = "0x4000513")]
		TransparentDefaultAlpha,
		[Token(Token = "0x4000514")]
		TransparentCorrectAlpha
	}

	[Token(Token = "0x40004FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[HideInInspector]
	private Shader _transparentShader;

	[Token(Token = "0x40004FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[HideInInspector]
	private Shader _opaqueShader;

	[Token(Token = "0x40004FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private RectTransform _rectTransform;

	[Token(Token = "0x40004FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Canvas _canvas;

	[Token(Token = "0x4000500")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Camera _camera;

	[Token(Token = "0x4000501")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private OVROverlay _overlay;

	[Token(Token = "0x4000502")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private RenderTexture _renderTexture;

	[Token(Token = "0x4000503")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private MeshRenderer _meshRenderer;

	[Token(Token = "0x4000504")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Mesh _quad;

	[Token(Token = "0x4000505")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Material _defaultMat;

	[Token(Token = "0x4000506")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public int MaxTextureSize;

	[Token(Token = "0x4000507")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public int MinTextureSize;

	[Token(Token = "0x4000508")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public float PixelsPerUnit;

	[Token(Token = "0x4000509")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public int DrawRate;

	[Token(Token = "0x400050A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public int DrawFrameOffset;

	[Token(Token = "0x400050B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public bool Expensive;

	[Token(Token = "0x400050C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public int Layer;

	[Token(Token = "0x400050D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public DrawMode Opacity;

	[Token(Token = "0x400050E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private bool ScaleViewport;

	[Token(Token = "0x400050F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly Plane[] _FrustumPlanes;

	[Token(Token = "0x1700004D")]
	public bool overlayEnabled
	{
		[Token(Token = "0x60003B4")]
		[Address(RVA = "0xB3A374", Offset = "0xB3A374", VA = "0xB3A374")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60003B5")]
		[Address(RVA = "0xB3A3F8", Offset = "0xB3A3F8", VA = "0xB3A3F8")]
		set
		{
		}
	}

	[Token(Token = "0x60003AE")]
	[Address(RVA = "0xB38E20", Offset = "0xB38E20", VA = "0xB38E20")]
	private void Start()
	{
	}

	[Token(Token = "0x60003AF")]
	[Address(RVA = "0xB399FC", Offset = "0xB399FC", VA = "0xB399FC")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60003B0")]
	[Address(RVA = "0xB39A70", Offset = "0xB39A70", VA = "0xB39A70")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60003B1")]
	[Address(RVA = "0xB39B40", Offset = "0xB39B40", VA = "0xB39B40")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60003B2")]
	[Address(RVA = "0xB39C10", Offset = "0xB39C10", VA = "0xB39C10", Slot = "4")]
	protected virtual bool ShouldRender()
	{
		return default(bool);
	}

	[Token(Token = "0x60003B3")]
	[Address(RVA = "0xB39E14", Offset = "0xB39E14", VA = "0xB39E14")]
	private void Update()
	{
	}

	[Token(Token = "0x60003B6")]
	[Address(RVA = "0xB3A4B4", Offset = "0xB3A4B4", VA = "0xB3A4B4")]
	public OVROverlayCanvas()
	{
	}
}
[Token(Token = "0x20000F7")]
public class AugmentedObject : MonoBehaviour
{
	[Token(Token = "0x4000515")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVRInput.Controller controllerHand;

	[Token(Token = "0x4000516")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform shadow;

	[Token(Token = "0x4000517")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool groundShadow;

	[Token(Token = "0x60003B8")]
	[Address(RVA = "0xB3A564", Offset = "0xB3A564", VA = "0xB3A564")]
	private void Start()
	{
	}

	[Token(Token = "0x60003B9")]
	[Address(RVA = "0xB3A8B0", Offset = "0xB3A8B0", VA = "0xB3A8B0")]
	private void Update()
	{
	}

	[Token(Token = "0x60003BA")]
	[Address(RVA = "0xB3AA44", Offset = "0xB3AA44", VA = "0xB3AA44")]
	public void Grab(OVRInput.Controller grabHand)
	{
	}

	[Token(Token = "0x60003BB")]
	[Address(RVA = "0xB3AA4C", Offset = "0xB3AA4C", VA = "0xB3AA4C")]
	public void Release()
	{
	}

	[Token(Token = "0x60003BC")]
	[Address(RVA = "0xB3AA34", Offset = "0xB3AA34", VA = "0xB3AA34")]
	private void ToggleShadowType()
	{
	}

	[Token(Token = "0x60003BD")]
	[Address(RVA = "0xB3AA54", Offset = "0xB3AA54", VA = "0xB3AA54")]
	public AugmentedObject()
	{
	}
}
[Token(Token = "0x20000F8")]
public class BrushController : MonoBehaviour
{
	[Token(Token = "0x20000F9")]
	[CompilerGenerated]
	private sealed class <FadeCameraClearColor>d__8 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400051C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400051D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400051E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float fadeTime;

		[Token(Token = "0x400051F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Color newColor;

		[Token(Token = "0x4000520")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <timer>5__2;

		[Token(Token = "0x4000521")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Color <currentColor>5__3;

		[Token(Token = "0x1700004E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60003C8")]
			[Address(RVA = "0xB3B108", Offset = "0xB3B108", VA = "0xB3B108", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700004F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60003CA")]
			[Address(RVA = "0xB3B150", Offset = "0xB3B150", VA = "0xB3B150", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60003C5")]
		[Address(RVA = "0xB3AFC4", Offset = "0xB3AFC4", VA = "0xB3AFC4")]
		[DebuggerHidden]
		public <FadeCameraClearColor>d__8(int <>1__state)
		{
		}

		[Token(Token = "0x60003C6")]
		[Address(RVA = "0xB3B01C", Offset = "0xB3B01C", VA = "0xB3B01C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60003C7")]
		[Address(RVA = "0xB3B020", Offset = "0xB3B020", VA = "0xB3B020", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60003C9")]
		[Address(RVA = "0xB3B110", Offset = "0xB3B110", VA = "0xB3B110", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000FA")]
	[CompilerGenerated]
	private sealed class <FadeSphere>d__9 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000522")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000523")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000524")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BrushController <>4__this;

		[Token(Token = "0x4000525")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float fadeTime;

		[Token(Token = "0x4000526")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Color newColor;

		[Token(Token = "0x4000527")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public bool disableOnFinish;

		[Token(Token = "0x4000528")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float <timer>5__2;

		[Token(Token = "0x4000529")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Color <currentColor>5__3;

		[Token(Token = "0x17000050")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60003CE")]
			[Address(RVA = "0xB3B2C8", Offset = "0xB3B2C8", VA = "0xB3B2C8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000051")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60003D0")]
			[Address(RVA = "0xB3B310", Offset = "0xB3B310", VA = "0xB3B310", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60003CB")]
		[Address(RVA = "0xB3AFEC", Offset = "0xB3AFEC", VA = "0xB3AFEC")]
		[DebuggerHidden]
		public <FadeSphere>d__9(int <>1__state)
		{
		}

		[Token(Token = "0x60003CC")]
		[Address(RVA = "0xB3B158", Offset = "0xB3B158", VA = "0xB3B158", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60003CD")]
		[Address(RVA = "0xB3B15C", Offset = "0xB3B15C", VA = "0xB3B15C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60003CF")]
		[Address(RVA = "0xB3B2D0", Offset = "0xB3B2D0", VA = "0xB3B2D0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000518")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PassthroughBrush brush;

	[Token(Token = "0x4000519")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MeshRenderer backgroundSphere;

	[Token(Token = "0x400051A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private IEnumerator grabRoutine;

	[Token(Token = "0x400051B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private IEnumerator releaseRoutine;

	[Token(Token = "0x60003BE")]
	[Address(RVA = "0xB3AA5C", Offset = "0xB3AA5C", VA = "0xB3AA5C")]
	private void Start()
	{
	}

	[Token(Token = "0x60003BF")]
	[Address(RVA = "0xB3ACFC", Offset = "0xB3ACFC", VA = "0xB3ACFC")]
	private void Update()
	{
	}

	[Token(Token = "0x60003C0")]
	[Address(RVA = "0xB3AD4C", Offset = "0xB3AD4C", VA = "0xB3AD4C")]
	public void Grab(OVRInput.Controller grabHand)
	{
	}

	[Token(Token = "0x60003C1")]
	[Address(RVA = "0xB3AEA0", Offset = "0xB3AEA0", VA = "0xB3AEA0")]
	public void Release()
	{
	}

	[Token(Token = "0x60003C2")]
	[Address(RVA = "0xB3AF2C", Offset = "0xB3AF2C", VA = "0xB3AF2C")]
	[IteratorStateMachine(typeof(<FadeCameraClearColor>d__8))]
	private IEnumerator FadeCameraClearColor(Color newColor, float fadeTime)
	{
		return null;
	}

	[Token(Token = "0x60003C3")]
	[Address(RVA = "0xB3ADEC", Offset = "0xB3ADEC", VA = "0xB3ADEC")]
	[IteratorStateMachine(typeof(<FadeSphere>d__9))]
	private IEnumerator FadeSphere(Color newColor, float fadeTime, bool disableOnFinish = false)
	{
		return null;
	}

	[Token(Token = "0x60003C4")]
	[Address(RVA = "0xB3B014", Offset = "0xB3B014", VA = "0xB3B014")]
	public BrushController()
	{
	}
}
[Token(Token = "0x20000FB")]
public class EnableUnpremultipliedAlpha : MonoBehaviour
{
	[Token(Token = "0x60003D1")]
	[Address(RVA = "0xB3B318", Offset = "0xB3B318", VA = "0xB3B318")]
	private void Start()
	{
	}

	[Token(Token = "0x60003D2")]
	[Address(RVA = "0xB3B36C", Offset = "0xB3B36C", VA = "0xB3B36C")]
	public EnableUnpremultipliedAlpha()
	{
	}
}
[Token(Token = "0x20000FC")]
public class Flashlight : MonoBehaviour
{
	[Token(Token = "0x400052A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject lightVolume;

	[Token(Token = "0x400052B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Light spotlight;

	[Token(Token = "0x400052C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject bulbGlow;

	[Token(Token = "0x60003D3")]
	[Address(RVA = "0xB3B374", Offset = "0xB3B374", VA = "0xB3B374")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60003D4")]
	[Address(RVA = "0xB3B548", Offset = "0xB3B548", VA = "0xB3B548")]
	public void ToggleFlashlight()
	{
	}

	[Token(Token = "0x60003D5")]
	[Address(RVA = "0xB3B5D8", Offset = "0xB3B5D8", VA = "0xB3B5D8")]
	public void EnableFlashlight(bool doEnable)
	{
	}

	[Token(Token = "0x60003D6")]
	[Address(RVA = "0xB3B634", Offset = "0xB3B634", VA = "0xB3B634")]
	public Flashlight()
	{
	}
}
[Token(Token = "0x20000FD")]
public class FlashlightController : MonoBehaviour
{
	[Token(Token = "0x20000FE")]
	[CompilerGenerated]
	private sealed class <FadeLighting>d__17 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000537")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000538")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000539")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FlashlightController <>4__this;

		[Token(Token = "0x400053A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float fadeTime;

		[Token(Token = "0x400053B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Color newColor;

		[Token(Token = "0x400053C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float sceneLightIntensity;

		[Token(Token = "0x400053D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float <timer>5__2;

		[Token(Token = "0x400053E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Color <currentColor>5__3;

		[Token(Token = "0x400053F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float <currentLight>5__4;

		[Token(Token = "0x17000052")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60003E3")]
			[Address(RVA = "0xB3C778", Offset = "0xB3C778", VA = "0xB3C778", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000053")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60003E5")]
			[Address(RVA = "0xB3C7C0", Offset = "0xB3C7C0", VA = "0xB3C7C0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60003E0")]
		[Address(RVA = "0xB3C4EC", Offset = "0xB3C4EC", VA = "0xB3C4EC")]
		[DebuggerHidden]
		public <FadeLighting>d__17(int <>1__state)
		{
		}

		[Token(Token = "0x60003E1")]
		[Address(RVA = "0xB3C5B4", Offset = "0xB3C5B4", VA = "0xB3C5B4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60003E2")]
		[Address(RVA = "0xB3C5B8", Offset = "0xB3C5B8", VA = "0xB3C5B8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60003E4")]
		[Address(RVA = "0xB3C780", Offset = "0xB3C780", VA = "0xB3C780", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400052D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Light sceneLight;

	[Token(Token = "0x400052E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform flashlightRoot;

	[Token(Token = "0x400052F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector3 localPosition;

	[Token(Token = "0x4000530")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Quaternion localRotation;

	[Token(Token = "0x4000531")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public TextMesh infoText;

	[Token(Token = "0x4000532")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private GrabObject externalController;

	[Token(Token = "0x4000533")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private OVRSkeleton[] skeletons;

	[Token(Token = "0x4000534")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private OVRHand[] hands;

	[Token(Token = "0x4000535")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private int handIndex;

	[Token(Token = "0x4000536")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private bool pinching;

	[Token(Token = "0x60003D7")]
	[Address(RVA = "0xB3B63C", Offset = "0xB3B63C", VA = "0xB3B63C")]
	private void Start()
	{
	}

	[Token(Token = "0x60003D8")]
	[Address(RVA = "0xB3B8D8", Offset = "0xB3B8D8", VA = "0xB3B8D8")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60003D9")]
	[Address(RVA = "0xB3BBC4", Offset = "0xB3BBC4", VA = "0xB3BBC4")]
	private void FindHands()
	{
	}

	[Token(Token = "0x60003DA")]
	[Address(RVA = "0xB3BEBC", Offset = "0xB3BEBC", VA = "0xB3BEBC")]
	private void AlignWithHand(OVRHand hand, OVRSkeleton skeleton)
	{
	}

	[Token(Token = "0x60003DB")]
	[Address(RVA = "0xB3C194", Offset = "0xB3C194", VA = "0xB3C194")]
	private void AlignWithController(OVRInput.Controller controller)
	{
	}

	[Token(Token = "0x60003DC")]
	[Address(RVA = "0xB3C27C", Offset = "0xB3C27C", VA = "0xB3C27C")]
	public void Grab(OVRInput.Controller grabHand)
	{
	}

	[Token(Token = "0x60003DD")]
	[Address(RVA = "0xB3C408", Offset = "0xB3C408", VA = "0xB3C408")]
	public void Release()
	{
	}

	[Token(Token = "0x60003DE")]
	[Address(RVA = "0xB3C364", Offset = "0xB3C364", VA = "0xB3C364")]
	[IteratorStateMachine(typeof(<FadeLighting>d__17))]
	private IEnumerator FadeLighting(Color newColor, float sceneLightIntensity, float fadeTime)
	{
		return null;
	}

	[Token(Token = "0x60003DF")]
	[Address(RVA = "0xB3C514", Offset = "0xB3C514", VA = "0xB3C514")]
	public FlashlightController()
	{
	}
}
[Token(Token = "0x20000FF")]
public class GrabObject : MonoBehaviour
{
	[Token(Token = "0x2000100")]
	public enum ManipulationType
	{
		[Token(Token = "0x4000549")]
		Default,
		[Token(Token = "0x400054A")]
		ForcedHand,
		[Token(Token = "0x400054B")]
		DollyHand,
		[Token(Token = "0x400054C")]
		DollyAttached,
		[Token(Token = "0x400054D")]
		HorizontalScaled,
		[Token(Token = "0x400054E")]
		VerticalScaled,
		[Token(Token = "0x400054F")]
		Menu
	}

	[Token(Token = "0x2000101")]
	public delegate void GrabbedObject(OVRInput.Controller grabHand);

	[Token(Token = "0x2000102")]
	public delegate void ReleasedObject();

	[Token(Token = "0x2000103")]
	public delegate void SetCursorPosition(Vector3 cursorPosition);

	[Token(Token = "0x4000540")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[TextArea]
	public string ObjectName;

	[Token(Token = "0x4000541")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[TextArea]
	public string ObjectInstructions;

	[Token(Token = "0x4000542")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ManipulationType objectManipulationType;

	[Token(Token = "0x4000543")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool showLaserWhileGrabbed;

	[Token(Token = "0x4000544")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	public Quaternion grabbedRotation;

	[Token(Token = "0x4000545")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GrabbedObject GrabbedObjectDelegate;

	[Token(Token = "0x4000546")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public ReleasedObject ReleasedObjectDelegate;

	[Token(Token = "0x4000547")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public SetCursorPosition CursorPositionDelegate;

	[Token(Token = "0x60003E6")]
	[Address(RVA = "0xB3C7C8", Offset = "0xB3C7C8", VA = "0xB3C7C8")]
	public void Grab(OVRInput.Controller grabHand)
	{
	}

	[Token(Token = "0x60003E7")]
	[Address(RVA = "0xB3C828", Offset = "0xB3C828", VA = "0xB3C828")]
	public void Release()
	{
	}

	[Token(Token = "0x60003E8")]
	[Address(RVA = "0xB3C844", Offset = "0xB3C844", VA = "0xB3C844")]
	public void CursorPos(Vector3 cursorPos)
	{
	}

	[Token(Token = "0x60003E9")]
	[Address(RVA = "0xB3C860", Offset = "0xB3C860", VA = "0xB3C860")]
	public GrabObject()
	{
	}
}
[Token(Token = "0x2000104")]
public class HandMeshMask : MonoBehaviour
{
	[Token(Token = "0x4000550")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVRSkeleton referenceHand;

	[Token(Token = "0x4000551")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Material maskMaterial;

	[Token(Token = "0x4000552")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("The segments around the tip of a finger")]
	public int radialDivisions;

	[Token(Token = "0x4000553")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Tooltip("The fade range (finger width is 2x this)")]
	public float borderSize;

	[Token(Token = "0x4000554")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("Along the fingers, each knuckle scales down by this amount.  Default is zero for uniform width along entire finger.")]
	public float fingerTaper;

	[Token(Token = "0x4000555")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[Tooltip("Shorten the last bone of each finger; need this to account for bone structure (end bone is at finger tip instead of center). Default is 1.")]
	public float fingerTipLength;

	[Token(Token = "0x4000556")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Tooltip("Move the base of the 4 main fingers towards the tips, to avoid a visible mesh crack between finger webbing. Default is 0.")]
	public float webOffset;

	[Token(Token = "0x4000557")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float handScale;

	[Token(Token = "0x4000558")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private GameObject maskMeshObject;

	[Token(Token = "0x4000559")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Mesh maskMesh;

	[Token(Token = "0x400055A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3[] handVertices;

	[Token(Token = "0x400055B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Vector2[] handUVs;

	[Token(Token = "0x400055C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Color32[] handColors;

	[Token(Token = "0x400055D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private int[] handTriangles;

	[Token(Token = "0x400055E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private int vertCounter;

	[Token(Token = "0x400055F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private int triCounter;

	[Token(Token = "0x60003F6")]
	[Address(RVA = "0xB3CB08", Offset = "0xB3CB08", VA = "0xB3CB08")]
	private void Awake()
	{
	}

	[Token(Token = "0x60003F7")]
	[Address(RVA = "0xB3CD3C", Offset = "0xB3CD3C", VA = "0xB3CD3C")]
	private void Update()
	{
	}

	[Token(Token = "0x60003F8")]
	[Address(RVA = "0xB3CF04", Offset = "0xB3CF04", VA = "0xB3CF04")]
	private void CreateHandMesh()
	{
	}

	[Token(Token = "0x60003F9")]
	[Address(RVA = "0xB3D50C", Offset = "0xB3D50C", VA = "0xB3D50C")]
	private void AddKnuckleMesh(int knuckleVerts, float point1scale, float point2scale, Vector3 point1, Vector3 point2)
	{
	}

	[Token(Token = "0x60003FA")]
	[Address(RVA = "0xB3DAA4", Offset = "0xB3DAA4", VA = "0xB3DAA4")]
	private void AddPalmMesh(int knuckleVerts)
	{
	}

	[Token(Token = "0x60003FB")]
	[Address(RVA = "0xB3FDAC", Offset = "0xB3FDAC", VA = "0xB3FDAC")]
	private void AddVertex(Vector3 position, Vector2 uv, Color color)
	{
	}

	[Token(Token = "0x60003FC")]
	[Address(RVA = "0xB40120", Offset = "0xB40120", VA = "0xB40120")]
	public HandMeshMask()
	{
	}
}
[Token(Token = "0x2000105")]
public class HandMeshUI : MonoBehaviour
{
	[Token(Token = "0x4000560")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SphereCollider[] knobs;

	[Token(Token = "0x4000561")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextMesh[] readouts;

	[Token(Token = "0x4000562")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int rightHeldKnob;

	[Token(Token = "0x4000563")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private int leftHeldKnob;

	[Token(Token = "0x4000564")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public OVRSkeleton leftHand;

	[Token(Token = "0x4000565")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public OVRSkeleton rightHand;

	[Token(Token = "0x4000566")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public HandMeshMask leftMask;

	[Token(Token = "0x4000567")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public HandMeshMask rightMask;

	[Token(Token = "0x60003FD")]
	[Address(RVA = "0xB8F300", Offset = "0xB8F300", VA = "0xB8F300")]
	private void Start()
	{
	}

	[Token(Token = "0x60003FE")]
	[Address(RVA = "0xB8F668", Offset = "0xB8F668", VA = "0xB8F668")]
	private void Update()
	{
	}

	[Token(Token = "0x60003FF")]
	[Address(RVA = "0xB8F39C", Offset = "0xB8F39C", VA = "0xB8F39C")]
	private void SetSliderValue(int sliderID, float value, bool isNormalized)
	{
	}

	[Token(Token = "0x6000400")]
	[Address(RVA = "0xB8FAD0", Offset = "0xB8FAD0", VA = "0xB8FAD0")]
	private void CheckForHands()
	{
	}

	[Token(Token = "0x6000401")]
	[Address(RVA = "0xB90040", Offset = "0xB90040", VA = "0xB90040")]
	public HandMeshUI()
	{
	}
}
[Token(Token = "0x2000106")]
public class ObjectManipulator : MonoBehaviour
{
	[Token(Token = "0x2000107")]
	[CompilerGenerated]
	private sealed class <StartDemo>d__23 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400057B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400057C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400057D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ObjectManipulator <>4__this;

		[Token(Token = "0x400057E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <timer>5__2;

		[Token(Token = "0x400057F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <fadeTime>5__3;

		[Token(Token = "0x17000054")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000411")]
			[Address(RVA = "0xB92810", Offset = "0xB92810", VA = "0xB92810", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000055")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000413")]
			[Address(RVA = "0xB92858", Offset = "0xB92858", VA = "0xB92858", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600040E")]
		[Address(RVA = "0xB9215C", Offset = "0xB9215C", VA = "0xB9215C")]
		[DebuggerHidden]
		public <StartDemo>d__23(int <>1__state)
		{
		}

		[Token(Token = "0x600040F")]
		[Address(RVA = "0xB92544", Offset = "0xB92544", VA = "0xB92544", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000410")]
		[Address(RVA = "0xB92548", Offset = "0xB92548", VA = "0xB92548", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000412")]
		[Address(RVA = "0xB92818", Offset = "0xB92818", VA = "0xB92818", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000568")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private OVRInput.Controller controller;

	[Token(Token = "0x4000569")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private GameObject hoverObject;

	[Token(Token = "0x400056A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private GameObject grabObject;

	[Token(Token = "0x400056B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float grabTime;

	[Token(Token = "0x400056C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Vector3 localGrabOffset;

	[Token(Token = "0x400056D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Quaternion localGrabRotation;

	[Token(Token = "0x400056E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3 camGrabPosition;

	[Token(Token = "0x400056F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private Quaternion camGrabRotation;

	[Token(Token = "0x4000570")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private Vector3 handGrabPosition;

	[Token(Token = "0x4000571")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Quaternion handGrabRotation;

	[Token(Token = "0x4000572")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Vector3 cursorPosition;

	[Token(Token = "0x4000573")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private float rotationOffset;

	[Token(Token = "0x4000574")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public LineRenderer laser;

	[Token(Token = "0x4000575")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Transform objectInfo;

	[Token(Token = "0x4000576")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public TextMesh objectNameLabel;

	[Token(Token = "0x4000577")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public TextMesh objectInstructionsLabel;

	[Token(Token = "0x4000578")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public Image objectInfoBG;

	[Token(Token = "0x4000579")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public GameObject demoObjects;

	[Token(Token = "0x400057A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public OVRPassthroughLayer passthrough;

	[Token(Token = "0x6000402")]
	[Address(RVA = "0xB90050", Offset = "0xB90050", VA = "0xB90050")]
	private void Start()
	{
	}

	[Token(Token = "0x6000403")]
	[Address(RVA = "0xB90240", Offset = "0xB90240", VA = "0xB90240")]
	private void Update()
	{
	}

	[Token(Token = "0x6000404")]
	[Address(RVA = "0xB910DC", Offset = "0xB910DC", VA = "0xB910DC")]
	private void GrabHoverObject(GameObject grbObj, Vector3 controllerPos, Quaternion controllerRot)
	{
	}

	[Token(Token = "0x6000405")]
	[Address(RVA = "0xB91E74", Offset = "0xB91E74", VA = "0xB91E74")]
	private void ReleaseObject()
	{
	}

	[Token(Token = "0x6000406")]
	[Address(RVA = "0xB901D8", Offset = "0xB901D8", VA = "0xB901D8")]
	[IteratorStateMachine(typeof(<StartDemo>d__23))]
	private IEnumerator StartDemo()
	{
		return null;
	}

	[Token(Token = "0x6000407")]
	[Address(RVA = "0xB90488", Offset = "0xB90488", VA = "0xB90488")]
	private void FindHoverObject(Vector3 controllerPos, Quaternion controllerRot)
	{
	}

	[Token(Token = "0x6000408")]
	[Address(RVA = "0xB913D4", Offset = "0xB913D4", VA = "0xB913D4")]
	private void ManipulateObject(GameObject obj, Vector3 controllerPos, Quaternion controllerRot)
	{
	}

	[Token(Token = "0x6000409")]
	[Address(RVA = "0xB92184", Offset = "0xB92184", VA = "0xB92184")]
	private void ClampGrabOffset(ref Vector3 localOffset, float thumbY)
	{
	}

	[Token(Token = "0x600040A")]
	[Address(RVA = "0xB92238", Offset = "0xB92238", VA = "0xB92238")]
	private Vector3 ClampScale(Vector3 localScale, Vector2 thumb)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600040B")]
	[Address(RVA = "0xB92268", Offset = "0xB92268", VA = "0xB92268")]
	private void CheckForDominantHand()
	{
	}

	[Token(Token = "0x600040C")]
	[Address(RVA = "0xB92040", Offset = "0xB92040", VA = "0xB92040")]
	private void AssignInstructions(GrabObject targetObject)
	{
	}

	[Token(Token = "0x600040D")]
	[Address(RVA = "0xB92358", Offset = "0xB92358", VA = "0xB92358")]
	public ObjectManipulator()
	{
	}
}
[Token(Token = "0x2000108")]
public class OverlayPassthrough : MonoBehaviour
{
	[Token(Token = "0x4000580")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private OVRPassthroughLayer passthroughLayer;

	[Token(Token = "0x6000414")]
	[Address(RVA = "0xB92860", Offset = "0xB92860", VA = "0xB92860")]
	private void Start()
	{
	}

	[Token(Token = "0x6000415")]
	[Address(RVA = "0xB929C0", Offset = "0xB929C0", VA = "0xB929C0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000416")]
	[Address(RVA = "0xB92A74", Offset = "0xB92A74", VA = "0xB92A74")]
	public OverlayPassthrough()
	{
	}
}
[Token(Token = "0x2000109")]
public class PassthroughBrush : MonoBehaviour
{
	[Token(Token = "0x200010A")]
	public enum BrushState
	{
		[Token(Token = "0x400058C")]
		Idle,
		[Token(Token = "0x400058D")]
		Inking
	}

	[Token(Token = "0x4000581")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVRInput.Controller controllerHand;

	[Token(Token = "0x4000582")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject lineSegmentPrefab;

	[Token(Token = "0x4000583")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject lineContainer;

	[Token(Token = "0x4000584")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool forceActive;

	[Token(Token = "0x4000585")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private LineRenderer currentLineSegment;

	[Token(Token = "0x4000586")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private List<Vector3> inkPositions;

	[Token(Token = "0x4000587")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float minInkDist;

	[Token(Token = "0x4000588")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float strokeWidth;

	[Token(Token = "0x4000589")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float strokeLength;

	[Token(Token = "0x400058A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private BrushState brushStatus;

	[Token(Token = "0x6000417")]
	[Address(RVA = "0xB92A7C", Offset = "0xB92A7C", VA = "0xB92A7C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000418")]
	[Address(RVA = "0xB92A84", Offset = "0xB92A84", VA = "0xB92A84")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000419")]
	[Address(RVA = "0xB92D34", Offset = "0xB92D34", VA = "0xB92D34")]
	private void StartLine(Vector3 inkPos)
	{
	}

	[Token(Token = "0x600041A")]
	[Address(RVA = "0xB92F54", Offset = "0xB92F54", VA = "0xB92F54")]
	private void UpdateLine(Vector3 inkPos)
	{
	}

	[Token(Token = "0x600041B")]
	[Address(RVA = "0xB93194", Offset = "0xB93194", VA = "0xB93194")]
	public void ClearLines()
	{
	}

	[Token(Token = "0x600041C")]
	[Address(RVA = "0xB92C4C", Offset = "0xB92C4C", VA = "0xB92C4C")]
	public void UndoInkLine()
	{
	}

	[Token(Token = "0x600041D")]
	[Address(RVA = "0xB93264", Offset = "0xB93264", VA = "0xB93264")]
	public PassthroughBrush()
	{
	}
}
[Token(Token = "0x200010B")]
public class PassthroughController : MonoBehaviour
{
	[Token(Token = "0x400058E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private OVRPassthroughLayer passthroughLayer;

	[Token(Token = "0x600041E")]
	[Address(RVA = "0xB932F4", Offset = "0xB932F4", VA = "0xB932F4")]
	private void Start()
	{
	}

	[Token(Token = "0x600041F")]
	[Address(RVA = "0xB93454", Offset = "0xB93454", VA = "0xB93454")]
	private void Update()
	{
	}

	[Token(Token = "0x6000420")]
	[Address(RVA = "0xB9363C", Offset = "0xB9363C", VA = "0xB9363C")]
	public PassthroughController()
	{
	}
}
[Token(Token = "0x200010C")]
public class PassthroughProjectionSurface : MonoBehaviour
{
	[Token(Token = "0x400058F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private OVRPassthroughLayer passthroughLayer;

	[Token(Token = "0x4000590")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MeshFilter projectionObject;

	[Token(Token = "0x4000591")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private MeshRenderer quadOutline;

	[Token(Token = "0x6000421")]
	[Address(RVA = "0xB93644", Offset = "0xB93644", VA = "0xB93644")]
	private void Start()
	{
	}

	[Token(Token = "0x6000422")]
	[Address(RVA = "0xB9380C", Offset = "0xB9380C", VA = "0xB9380C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000423")]
	[Address(RVA = "0xB939AC", Offset = "0xB939AC", VA = "0xB939AC")]
	public PassthroughProjectionSurface()
	{
	}
}
[Token(Token = "0x200010D")]
public class PassthroughStyler : MonoBehaviour
{
	[Token(Token = "0x200010E")]
	[CompilerGenerated]
	private sealed class <FadeToCurrentStyle>d__19 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40005A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40005A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40005A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PassthroughStyler <>4__this;

		[Token(Token = "0x40005A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float fadeTime;

		[Token(Token = "0x40005A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <timer>5__2;

		[Token(Token = "0x40005A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <brightness>5__3;

		[Token(Token = "0x40005A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <contrast>5__4;

		[Token(Token = "0x40005A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float <posterize>5__5;

		[Token(Token = "0x40005A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Color <edgeCol>5__6;

		[Token(Token = "0x17000056")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000436")]
			[Address(RVA = "0xB945C4", Offset = "0xB945C4", VA = "0xB945C4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000057")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000438")]
			[Address(RVA = "0xB9460C", Offset = "0xB9460C", VA = "0xB9460C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000433")]
		[Address(RVA = "0xB942F8", Offset = "0xB942F8", VA = "0xB942F8")]
		[DebuggerHidden]
		public <FadeToCurrentStyle>d__19(int <>1__state)
		{
		}

		[Token(Token = "0x6000434")]
		[Address(RVA = "0xB9445C", Offset = "0xB9445C", VA = "0xB9445C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000435")]
		[Address(RVA = "0xB94460", Offset = "0xB94460", VA = "0xB94460", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000437")]
		[Address(RVA = "0xB945CC", Offset = "0xB945CC", VA = "0xB945CC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200010F")]
	[CompilerGenerated]
	private sealed class <FadeToDefaultPassthrough>d__20 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40005AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40005AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40005AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PassthroughStyler <>4__this;

		[Token(Token = "0x40005AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float fadeTime;

		[Token(Token = "0x40005AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <timer>5__2;

		[Token(Token = "0x40005AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <brightness>5__3;

		[Token(Token = "0x40005B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <contrast>5__4;

		[Token(Token = "0x40005B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float <posterize>5__5;

		[Token(Token = "0x40005B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Color <edgeCol>5__6;

		[Token(Token = "0x17000058")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600043C")]
			[Address(RVA = "0xB94790", Offset = "0xB94790", VA = "0xB94790", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000059")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600043E")]
			[Address(RVA = "0xB947D8", Offset = "0xB947D8", VA = "0xB947D8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000439")]
		[Address(RVA = "0xB94320", Offset = "0xB94320", VA = "0xB94320")]
		[DebuggerHidden]
		public <FadeToDefaultPassthrough>d__20(int <>1__state)
		{
		}

		[Token(Token = "0x600043A")]
		[Address(RVA = "0xB94614", Offset = "0xB94614", VA = "0xB94614", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600043B")]
		[Address(RVA = "0xB94618", Offset = "0xB94618", VA = "0xB94618", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600043D")]
		[Address(RVA = "0xB94798", Offset = "0xB94798", VA = "0xB94798", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000592")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVRInput.Controller controllerHand;

	[Token(Token = "0x4000593")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public OVRPassthroughLayer passthroughLayer;

	[Token(Token = "0x4000594")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private IEnumerator fadeIn;

	[Token(Token = "0x4000595")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private IEnumerator fadeOut;

	[Token(Token = "0x4000596")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public RectTransform[] menuOptions;

	[Token(Token = "0x4000597")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public RectTransform colorWheel;

	[Token(Token = "0x4000598")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Texture2D colorTexture;

	[Token(Token = "0x4000599")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3 cursorPosition;

	[Token(Token = "0x400059A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private bool settingColor;

	[Token(Token = "0x400059B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Color savedColor;

	[Token(Token = "0x400059C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float savedBrightness;

	[Token(Token = "0x400059D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private float savedContrast;

	[Token(Token = "0x400059E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float savedPosterize;

	[Token(Token = "0x400059F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public CanvasGroup mainCanvas;

	[Token(Token = "0x40005A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public GameObject[] compactObjects;

	[Token(Token = "0x6000424")]
	[Address(RVA = "0xB939B4", Offset = "0xB939B4", VA = "0xB939B4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000425")]
	[Address(RVA = "0xB93CB4", Offset = "0xB93CB4", VA = "0xB93CB4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000426")]
	[Address(RVA = "0xB94054", Offset = "0xB94054", VA = "0xB94054")]
	public void Grab(OVRInput.Controller grabHand)
	{
	}

	[Token(Token = "0x6000427")]
	[Address(RVA = "0xB941AC", Offset = "0xB941AC", VA = "0xB941AC")]
	public void Release()
	{
	}

	[Token(Token = "0x6000428")]
	[Address(RVA = "0xB94134", Offset = "0xB94134", VA = "0xB94134")]
	[IteratorStateMachine(typeof(<FadeToCurrentStyle>d__19))]
	private IEnumerator FadeToCurrentStyle(float fadeTime)
	{
		return null;
	}

	[Token(Token = "0x6000429")]
	[Address(RVA = "0xB94280", Offset = "0xB94280", VA = "0xB94280")]
	[IteratorStateMachine(typeof(<FadeToDefaultPassthrough>d__20))]
	private IEnumerator FadeToDefaultPassthrough(float fadeTime)
	{
		return null;
	}

	[Token(Token = "0x600042A")]
	[Address(RVA = "0xB94348", Offset = "0xB94348", VA = "0xB94348")]
	public void OnBrightnessChanged(float newValue)
	{
	}

	[Token(Token = "0x600042B")]
	[Address(RVA = "0xB94368", Offset = "0xB94368", VA = "0xB94368")]
	public void OnContrastChanged(float newValue)
	{
	}

	[Token(Token = "0x600042C")]
	[Address(RVA = "0xB94388", Offset = "0xB94388", VA = "0xB94388")]
	public void OnPosterizeChanged(float newValue)
	{
	}

	[Token(Token = "0x600042D")]
	[Address(RVA = "0xB943A8", Offset = "0xB943A8", VA = "0xB943A8")]
	public void OnAlphaChanged(float newValue)
	{
	}

	[Token(Token = "0x600042E")]
	[Address(RVA = "0xB93C4C", Offset = "0xB93C4C", VA = "0xB93C4C")]
	private void ShowFullMenu(bool doShow)
	{
	}

	[Token(Token = "0x600042F")]
	[Address(RVA = "0xB943DC", Offset = "0xB943DC", VA = "0xB943DC")]
	public void Cursor(Vector3 cP)
	{
	}

	[Token(Token = "0x6000430")]
	[Address(RVA = "0xB943E8", Offset = "0xB943E8", VA = "0xB943E8")]
	public void DoColorDrag(bool doDrag)
	{
	}

	[Token(Token = "0x6000431")]
	[Address(RVA = "0xB93CCC", Offset = "0xB93CCC", VA = "0xB93CCC")]
	public void GetColorFromWheel()
	{
	}

	[Token(Token = "0x6000432")]
	[Address(RVA = "0xB943F4", Offset = "0xB943F4", VA = "0xB943F4")]
	public PassthroughStyler()
	{
	}
}
[Token(Token = "0x2000110")]
public class PassthroughSurface : MonoBehaviour
{
	[Token(Token = "0x40005B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVRPassthroughLayer passthroughLayer;

	[Token(Token = "0x40005B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MeshFilter projectionObject;

	[Token(Token = "0x600043F")]
	[Address(RVA = "0xB947E0", Offset = "0xB947E0", VA = "0xB947E0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000440")]
	[Address(RVA = "0xB94894", Offset = "0xB94894", VA = "0xB94894")]
	public PassthroughSurface()
	{
	}
}
[Token(Token = "0x2000111")]
public class SceneSampler : MonoBehaviour
{
	[Token(Token = "0x40005B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int currentSceneIndex;

	[Token(Token = "0x40005B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject displayText;

	[Token(Token = "0x6000441")]
	[Address(RVA = "0xB9489C", Offset = "0xB9489C", VA = "0xB9489C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000442")]
	[Address(RVA = "0xB94908", Offset = "0xB94908", VA = "0xB94908")]
	private void Update()
	{
	}

	[Token(Token = "0x6000443")]
	[Address(RVA = "0xB94BFC", Offset = "0xB94BFC", VA = "0xB94BFC")]
	public SceneSampler()
	{
	}
}
[Token(Token = "0x2000112")]
public class SelectivePassthroughExperience : MonoBehaviour
{
	[Token(Token = "0x40005B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject leftMaskObject;

	[Token(Token = "0x40005B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject rightMaskObject;

	[Token(Token = "0x6000444")]
	[Address(RVA = "0xB94C04", Offset = "0xB94C04", VA = "0xB94C04")]
	private void Update()
	{
	}

	[Token(Token = "0x6000445")]
	[Address(RVA = "0xB95058", Offset = "0xB95058", VA = "0xB95058")]
	public SelectivePassthroughExperience()
	{
	}
}
[Token(Token = "0x2000113")]
public class SPPquad : MonoBehaviour
{
	[Token(Token = "0x40005B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private OVRPassthroughLayer passthroughLayer;

	[Token(Token = "0x40005BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MeshFilter projectionObject;

	[Token(Token = "0x40005BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private OVRInput.Controller controllerHand;

	[Token(Token = "0x6000446")]
	[Address(RVA = "0xB95060", Offset = "0xB95060", VA = "0xB95060")]
	private void Start()
	{
	}

	[Token(Token = "0x6000447")]
	[Address(RVA = "0xB95288", Offset = "0xB95288", VA = "0xB95288")]
	public void Grab(OVRInput.Controller grabHand)
	{
	}

	[Token(Token = "0x6000448")]
	[Address(RVA = "0xB952D4", Offset = "0xB952D4", VA = "0xB952D4")]
	public void Release()
	{
	}

	[Token(Token = "0x6000449")]
	[Address(RVA = "0xB95314", Offset = "0xB95314", VA = "0xB95314")]
	public SPPquad()
	{
	}
}
[Token(Token = "0x2000114")]
public class StartMenu : MonoBehaviour
{
	[Token(Token = "0x40005BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVROverlay overlay;

	[Token(Token = "0x40005BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public OVROverlay text;

	[Token(Token = "0x40005BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public OVRCameraRig vrRig;

	[Token(Token = "0x600044A")]
	[Address(RVA = "0xB9531C", Offset = "0xB9531C", VA = "0xB9531C")]
	private void Start()
	{
	}

	[Token(Token = "0x600044B")]
	[Address(RVA = "0xB95518", Offset = "0xB95518", VA = "0xB95518")]
	private void LoadScene(int idx)
	{
	}

	[Token(Token = "0x600044C")]
	[Address(RVA = "0xB9561C", Offset = "0xB9561C", VA = "0xB9561C")]
	public StartMenu()
	{
	}
}
[Token(Token = "0x2000116")]
public class SECTR_AudioDemoUI : SECTR_DemoUI
{
	[Token(Token = "0x40005C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private SECTR_AudioCueInstance chatterInstance;

	[Token(Token = "0x40005C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SECTR_ToolTip("A cue with a low loudness.", null, false)]
	public SECTR_AudioCue SoftCue;

	[Token(Token = "0x40005C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SECTR_ToolTip("A cue at the normal loudness of speech.", null, false)]
	public SECTR_AudioCue ChatterCue;

	[Token(Token = "0x40005C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SECTR_ToolTip("A loud sound.", null, false)]
	public SECTR_AudioCue GunshotCue;

	[Token(Token = "0x40005C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SECTR_ToolTip("A very, very loud sound.", null, false)]
	public SECTR_AudioCue ExplosionCue;

	[Token(Token = "0x40005C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SECTR_ToolTip("Dynamic audio prefab to spawn.")]
	public GameObject AudioPrefab;

	[Token(Token = "0x40005C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SECTR_ToolTip("Speed at which to throw prefab.")]
	public float PrefabThrowSpeed;

	[Token(Token = "0x600044F")]
	[Address(RVA = "0xB95640", Offset = "0xB95640", VA = "0xB95640", Slot = "4")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x6000450")]
	[Address(RVA = "0xB95D78", Offset = "0xB95D78", VA = "0xB95D78")]
	protected void ShowHUD(bool active)
	{
	}

	[Token(Token = "0x6000451")]
	[Address(RVA = "0xB95DD4", Offset = "0xB95DD4", VA = "0xB95DD4")]
	protected void PlaySoft(bool active)
	{
	}

	[Token(Token = "0x6000452")]
	[Address(RVA = "0xB95E14", Offset = "0xB95E14", VA = "0xB95E14")]
	protected void PlayChatter(bool active)
	{
	}

	[Token(Token = "0x6000453")]
	[Address(RVA = "0xB95F9C", Offset = "0xB95F9C", VA = "0xB95F9C")]
	protected void PlayGunshot(bool active)
	{
	}

	[Token(Token = "0x6000454")]
	[Address(RVA = "0xB95FD0", Offset = "0xB95FD0", VA = "0xB95FD0")]
	protected void PlayExplosion(bool active)
	{
	}

	[Token(Token = "0x6000455")]
	[Address(RVA = "0xB96004", Offset = "0xB96004", VA = "0xB96004")]
	protected void ThrowPrefab(bool active)
	{
	}

	[Token(Token = "0x6000456")]
	[Address(RVA = "0xB961DC", Offset = "0xB961DC", VA = "0xB961DC")]
	public SECTR_AudioDemoUI()
	{
	}
}
[Token(Token = "0x2000117")]
public class SECTR_CompleteDemoUI : SECTR_DemoUI
{
	[Token(Token = "0x40005C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private string originalDemoMessage;

	[Token(Token = "0x40005C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[Multiline]
	public string Unity4PerfMessage;

	[Token(Token = "0x6000457")]
	[Address(RVA = "0xB96270", Offset = "0xB96270", VA = "0xB96270")]
	private void Start()
	{
	}

	[Token(Token = "0x6000458")]
	[Address(RVA = "0xB963F4", Offset = "0xB963F4", VA = "0xB963F4", Slot = "4")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x6000459")]
	[Address(RVA = "0xB964A4", Offset = "0xB964A4", VA = "0xB964A4", Slot = "6")]
	protected override void OnGUI()
	{
	}

	[Token(Token = "0x600045A")]
	[Address(RVA = "0xB96EBC", Offset = "0xB96EBC", VA = "0xB96EBC")]
	public SECTR_CompleteDemoUI()
	{
	}
}
[Token(Token = "0x2000118")]
[AddComponentMenu("Procedural Worlds/SECTR/Demos/SECTR Character Motor")]
[RequireComponent(typeof(CharacterController))]
public class SECTR_CharacterMotor : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000119")]
	public class CharacterMotorMovement
	{
		[Token(Token = "0x40005D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float maxForwardSpeed;

		[Token(Token = "0x40005D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float maxSidewaysSpeed;

		[Token(Token = "0x40005DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float maxBackwardsSpeed;

		[Token(Token = "0x40005DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AnimationCurve slopeSpeedMultiplier;

		[Token(Token = "0x40005DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float maxGroundAcceleration;

		[Token(Token = "0x40005DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float maxAirAcceleration;

		[Token(Token = "0x40005DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float gravity;

		[Token(Token = "0x40005DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float maxFallSpeed;

		[Token(Token = "0x40005E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float footstepDistance;

		[Token(Token = "0x40005E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float pushPower;

		[NonSerialized]
		[Token(Token = "0x40005E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public CollisionFlags collisionFlags;

		[NonSerialized]
		[Token(Token = "0x40005E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Vector3 velocity;

		[NonSerialized]
		[Token(Token = "0x40005E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Vector3 frameVelocity;

		[NonSerialized]
		[Token(Token = "0x40005E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public Vector3 hitPoint;

		[NonSerialized]
		[Token(Token = "0x40005E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Vector3 lastHitPoint;

		[NonSerialized]
		[Token(Token = "0x40005E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public PhysicMaterial hitMaterial;

		[Token(Token = "0x600046A")]
		[Address(RVA = "0xB990F4", Offset = "0xB990F4", VA = "0xB990F4")]
		public CharacterMotorMovement()
		{
		}
	}

	[Token(Token = "0x200011A")]
	public enum MovementTransferOnJump
	{
		[Token(Token = "0x40005E9")]
		None,
		[Token(Token = "0x40005EA")]
		InitTransfer,
		[Token(Token = "0x40005EB")]
		PermaTransfer,
		[Token(Token = "0x40005EC")]
		PermaLocked
	}

	[Serializable]
	[Token(Token = "0x200011B")]
	public class CharacterMotorJumping
	{
		[Token(Token = "0x40005ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool enabled;

		[Token(Token = "0x40005EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float baseHeight;

		[Token(Token = "0x40005EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float extraHeight;

		[Token(Token = "0x40005F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float perpAmount;

		[Token(Token = "0x40005F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float steepPerpAmount;

		[NonSerialized]
		[Token(Token = "0x40005F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool jumping;

		[NonSerialized]
		[Token(Token = "0x40005F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		public bool holdingJumpButton;

		[NonSerialized]
		[Token(Token = "0x40005F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float lastStartTime;

		[NonSerialized]
		[Token(Token = "0x40005F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float lastButtonDownTime;

		[NonSerialized]
		[Token(Token = "0x40005F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 jumpDir;

		[Token(Token = "0x600046B")]
		[Address(RVA = "0xB99314", Offset = "0xB99314", VA = "0xB99314")]
		public CharacterMotorJumping()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x200011C")]
	public class CharacterMotorMovingPlatform
	{
		[Token(Token = "0x40005F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool enabled;

		[Token(Token = "0x40005F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public MovementTransferOnJump movementTransfer;

		[NonSerialized]
		[Token(Token = "0x40005F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform hitPlatform;

		[NonSerialized]
		[Token(Token = "0x40005FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform activePlatform;

		[NonSerialized]
		[Token(Token = "0x40005FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 activeLocalPoint;

		[NonSerialized]
		[Token(Token = "0x40005FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector3 activeGlobalPoint;

		[NonSerialized]
		[Token(Token = "0x40005FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Quaternion activeLocalRotation;

		[NonSerialized]
		[Token(Token = "0x40005FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Quaternion activeGlobalRotation;

		[NonSerialized]
		[Token(Token = "0x40005FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Matrix4x4 lastMatrix;

		[NonSerialized]
		[Token(Token = "0x4000600")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Vector3 platformVelocity;

		[NonSerialized]
		[Token(Token = "0x4000601")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public bool newPlatform;

		[Token(Token = "0x600046C")]
		[Address(RVA = "0xB99394", Offset = "0xB99394", VA = "0xB99394")]
		public CharacterMotorMovingPlatform()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x200011D")]
	public class CharacterMotorSliding
	{
		[Token(Token = "0x4000602")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool enabled;

		[Token(Token = "0x4000603")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float slidingSpeed;

		[Token(Token = "0x4000604")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float sidewaysControl;

		[Token(Token = "0x4000605")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float speedControl;

		[Token(Token = "0x600046D")]
		[Address(RVA = "0xB993AC", Offset = "0xB993AC", VA = "0xB993AC")]
		public CharacterMotorSliding()
		{
		}
	}

	[Token(Token = "0x200011E")]
	[CompilerGenerated]
	private sealed class <SubtractNewPlatformVelocity>d__24 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000606")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000607")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000608")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SECTR_CharacterMotor <>4__this;

		[Token(Token = "0x4000609")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Transform <platform>5__2;

		[Token(Token = "0x1700005A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000471")]
			[Address(RVA = "0xB99574", Offset = "0xB99574", VA = "0xB99574", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700005B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000473")]
			[Address(RVA = "0xB995BC", Offset = "0xB995BC", VA = "0xB995BC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600046E")]
		[Address(RVA = "0xB98D5C", Offset = "0xB98D5C", VA = "0xB98D5C")]
		[DebuggerHidden]
		public <SubtractNewPlatformVelocity>d__24(int <>1__state)
		{
		}

		[Token(Token = "0x600046F")]
		[Address(RVA = "0xB993D4", Offset = "0xB993D4", VA = "0xB993D4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000470")]
		[Address(RVA = "0xB993D8", Offset = "0xB993D8", VA = "0xB993D8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000472")]
		[Address(RVA = "0xB9957C", Offset = "0xB9957C", VA = "0xB9957C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40005CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool canControl;

	[Token(Token = "0x40005CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private Vector3 lastGroundNormal;

	[Token(Token = "0x40005CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Transform cachedTransform;

	[Token(Token = "0x40005CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private CharacterController cachedController;

	[Token(Token = "0x40005CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector3 lastFootstepPosition;

	[Token(Token = "0x40005CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private PhysicMaterial defaultHitMaterial;

	[NonSerialized]
	[Token(Token = "0x40005D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Vector3 inputMoveDirection;

	[NonSerialized]
	[Token(Token = "0x40005D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public bool inputJump;

	[NonSerialized]
	[Token(Token = "0x40005D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5D")]
	public bool grounded;

	[NonSerialized]
	[Token(Token = "0x40005D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Vector3 groundNormal;

	[Token(Token = "0x40005D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SECTR_ToolTip("Basic movement properties.")]
	public CharacterMotorMovement movement;

	[Token(Token = "0x40005D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SECTR_ToolTip("Jump specific movement properties.")]
	public CharacterMotorJumping jumping;

	[Token(Token = "0x40005D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SECTR_ToolTip("Platform specific movment properties.")]
	public CharacterMotorMovingPlatform movingPlatform;

	[Token(Token = "0x40005D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public CharacterMotorSliding sliding;

	[Token(Token = "0x600045B")]
	[Address(RVA = "0xB96EC0", Offset = "0xB96EC0", VA = "0xB96EC0")]
	private void Awake()
	{
	}

	[Token(Token = "0x600045C")]
	[Address(RVA = "0xB96F74", Offset = "0xB96F74", VA = "0xB96F74")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x600045D")]
	[Address(RVA = "0xB97CAC", Offset = "0xB97CAC", VA = "0xB97CAC")]
	private Vector3 ApplyInputVelocityChange(Vector3 velocity)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600045E")]
	[Address(RVA = "0xB980C8", Offset = "0xB980C8", VA = "0xB980C8")]
	private Vector3 ApplyGravityAndJumping(Vector3 velocity)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600045F")]
	[Address(RVA = "0xB9898C", Offset = "0xB9898C", VA = "0xB9898C")]
	private void OnControllerColliderHit(ControllerColliderHit hit)
	{
	}

	[Token(Token = "0x6000460")]
	[Address(RVA = "0xB9854C", Offset = "0xB9854C", VA = "0xB9854C")]
	[IteratorStateMachine(typeof(<SubtractNewPlatformVelocity>d__24))]
	private IEnumerator SubtractNewPlatformVelocity()
	{
		return null;
	}

	[Token(Token = "0x6000461")]
	[Address(RVA = "0xB98498", Offset = "0xB98498", VA = "0xB98498")]
	private bool MoveWithPlatform()
	{
		return default(bool);
	}

	[Token(Token = "0x6000462")]
	[Address(RVA = "0xB985FC", Offset = "0xB985FC", VA = "0xB985FC")]
	private Vector3 GetDesiredHorizontalVelocity()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000463")]
	[Address(RVA = "0xB98760", Offset = "0xB98760", VA = "0xB98760")]
	private Vector3 AdjustGroundVelocityToNormal(Vector3 hVelocity, Vector3 groundNormal)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000464")]
	[Address(RVA = "0xB98530", Offset = "0xB98530", VA = "0xB98530")]
	private bool IsGroundedTest()
	{
		return default(bool);
	}

	[Token(Token = "0x6000465")]
	[Address(RVA = "0xB98938", Offset = "0xB98938", VA = "0xB98938")]
	private float GetMaxAcceleration(bool grounded)
	{
		return default(float);
	}

	[Token(Token = "0x6000466")]
	[Address(RVA = "0xB98964", Offset = "0xB98964", VA = "0xB98964")]
	private float CalculateJumpVerticalSpeed(float targetJumpHeight)
	{
		return default(float);
	}

	[Token(Token = "0x6000467")]
	[Address(RVA = "0xB985B4", Offset = "0xB985B4", VA = "0xB985B4")]
	private bool TooSteep()
	{
		return default(bool);
	}

	[Token(Token = "0x6000468")]
	[Address(RVA = "0xB98D84", Offset = "0xB98D84", VA = "0xB98D84")]
	private float MaxSpeedInDirection(Vector3 desiredMovementDirection)
	{
		return default(float);
	}

	[Token(Token = "0x6000469")]
	[Address(RVA = "0xB98F4C", Offset = "0xB98F4C", VA = "0xB98F4C")]
	public SECTR_CharacterMotor()
	{
	}
}
[Token(Token = "0x200011F")]
[RequireComponent(typeof(SECTR_FPSController))]
public class SECTR_DemoUI : MonoBehaviour
{
	[Token(Token = "0x2000120")]
	protected enum WatermarkLocation
	{
		[Token(Token = "0x4000614")]
		UpperLeft,
		[Token(Token = "0x4000615")]
		UpperCenter,
		[Token(Token = "0x4000616")]
		UpperRight
	}

	[Token(Token = "0x2000121")]
	protected delegate void DemoButtonPressedDelegate(bool active);

	[Token(Token = "0x2000122")]
	private class DemoButton
	{
		[Token(Token = "0x4000617")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public KeyCode key;

		[Token(Token = "0x4000618")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string activeHint;

		[Token(Token = "0x4000619")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string inactiveHint;

		[Token(Token = "0x400061A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool active;

		[Token(Token = "0x400061B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool pressed;

		[Token(Token = "0x400061C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public DemoButtonPressedDelegate demoButtonPressed;

		[Token(Token = "0x600047F")]
		[Address(RVA = "0xB99708", Offset = "0xB99708", VA = "0xB99708")]
		public DemoButton(KeyCode key, string activeHint, string inactiveHint, DemoButtonPressedDelegate demoButtonPressed)
		{
		}
	}

	[Token(Token = "0x400060A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool passedIntro;

	[Token(Token = "0x400060B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected SECTR_FPSController cachedController;

	[Token(Token = "0x400060C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected GUIStyle demoButtonStyle;

	[Token(Token = "0x400060D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected WatermarkLocation watermarkLocation;

	[Token(Token = "0x400060E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private List<DemoButton> demoButtons;

	[Token(Token = "0x400060F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SECTR_ToolTip("Texture to display as a watermark.")]
	public Texture2D Watermark;

	[Token(Token = "0x4000610")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SECTR_ToolTip("Link to a controllable ghost/spectator camera.")]
	public SECTR_GhostController PipController;

	[Token(Token = "0x4000611")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SECTR_ToolTip("Message to display at start of demo.")]
	[Multiline]
	public string DemoMessage;

	[Token(Token = "0x4000612")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SECTR_ToolTip("Disables HUD for video captures.")]
	public bool CaptureMode;

	[Token(Token = "0x1700005C")]
	public bool PipActive
	{
		[Token(Token = "0x6000474")]
		[Address(RVA = "0xB995C4", Offset = "0xB995C4", VA = "0xB995C4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000475")]
	[Address(RVA = "0xB95BA8", Offset = "0xB95BA8", VA = "0xB95BA8", Slot = "4")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x6000476")]
	[Address(RVA = "0xB99648", Offset = "0xB99648", VA = "0xB99648", Slot = "5")]
	protected virtual void OnDisable()
	{
	}

	[Token(Token = "0x6000477")]
	[Address(RVA = "0xB965B0", Offset = "0xB965B0", VA = "0xB965B0", Slot = "6")]
	protected virtual void OnGUI()
	{
	}

	[Token(Token = "0x6000478")]
	[Address(RVA = "0xB95A88", Offset = "0xB95A88", VA = "0xB95A88")]
	protected void AddButton(KeyCode key, string activeHint, string inactiveHint, DemoButtonPressedDelegate buttonPressedDelegate)
	{
	}

	[Token(Token = "0x6000479")]
	[Address(RVA = "0xB99764", Offset = "0xB99764", VA = "0xB99764")]
	private void PressedPip(bool active)
	{
	}

	[Token(Token = "0x600047A")]
	[Address(RVA = "0xB961E8", Offset = "0xB961E8", VA = "0xB961E8")]
	public SECTR_DemoUI()
	{
	}
}
[Token(Token = "0x2000123")]
[RequireComponent(typeof(Camera))]
[ExecuteInEditMode]
public class SECTR_FogDisable : MonoBehaviour
{
	[Token(Token = "0x400061D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool previousFogState;

	[Token(Token = "0x6000480")]
	[Address(RVA = "0xB99874", Offset = "0xB99874", VA = "0xB99874")]
	private void OnPreRender()
	{
	}

	[Token(Token = "0x6000481")]
	[Address(RVA = "0xB9989C", Offset = "0xB9989C", VA = "0xB9989C")]
	private void OnPostRender()
	{
	}

	[Token(Token = "0x6000482")]
	[Address(RVA = "0xB998A8", Offset = "0xB998A8", VA = "0xB998A8")]
	public SECTR_FogDisable()
	{
	}
}
[Token(Token = "0x2000124")]
[RequireComponent(typeof(Camera))]
public abstract class SECTR_FPController : MonoBehaviour
{
	[Token(Token = "0x2000125")]
	protected class TrackedTouch
	{
		[Token(Token = "0x4000628")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector2 startPos;

		[Token(Token = "0x4000629")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector2 currentPos;

		[Token(Token = "0x6000489")]
		[Address(RVA = "0xB9A378", Offset = "0xB9A378", VA = "0xB9A378")]
		public TrackedTouch()
		{
		}
	}

	[Token(Token = "0x400061E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Vector2 _mouseAbsolute;

	[Token(Token = "0x400061F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Vector2 _smoothMouse;

	[Token(Token = "0x4000620")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector2 _clampInDegrees;

	[Token(Token = "0x4000621")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Vector2 _targetDirection;

	[Token(Token = "0x4000622")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool focused;

	[Token(Token = "0x4000623")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	protected Dictionary<int, TrackedTouch> _touches;

	[Token(Token = "0x4000624")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SECTR_ToolTip("Whether to lock the cursor when this camera is active.")]
	public bool LockCursor;

	[Token(Token = "0x4000625")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[SECTR_ToolTip("Scalar for mouse sensitivity.")]
	public Vector2 Sensitivity;

	[Token(Token = "0x4000626")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[SECTR_ToolTip("Scalar for mouse smoothing.")]
	public Vector2 Smoothing;

	[Token(Token = "0x4000627")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[SECTR_ToolTip("Adjusts the size of the virtual joystick.")]
	public float TouchScreenLookScale;

	[Token(Token = "0x6000483")]
	[Address(RVA = "0xB998B0", Offset = "0xB998B0", VA = "0xB998B0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000484")]
	[Address(RVA = "0xB99900", Offset = "0xB99900", VA = "0xB99900")]
	private void OnApplicationFocus(bool focused)
	{
	}

	[Token(Token = "0x6000485")]
	[Address(RVA = "0xB9990C", Offset = "0xB9990C", VA = "0xB9990C", Slot = "4")]
	protected virtual void Update()
	{
	}

	[Token(Token = "0x6000486")]
	[Address(RVA = "0xB9A100", Offset = "0xB9A100", VA = "0xB9A100")]
	protected Vector2 GetScreenJoystick(bool left)
	{
		return default(Vector2);
	}

	[Token(Token = "0x6000487")]
	[Address(RVA = "0xB99D94", Offset = "0xB99D94", VA = "0xB99D94")]
	private void _UpdateTouches()
	{
	}

	[Token(Token = "0x6000488")]
	[Address(RVA = "0xB9A380", Offset = "0xB9A380", VA = "0xB9A380")]
	protected SECTR_FPController()
	{
	}
}
[Token(Token = "0x2000126")]
[RequireComponent(typeof(SECTR_CharacterMotor))]
[AddComponentMenu("Procedural Worlds/SECTR/Demos/SECTR Character Controller")]
public class SECTR_FPSController : SECTR_FPController
{
	[Token(Token = "0x400062A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private SECTR_CharacterMotor cachedMotor;

	[Token(Token = "0x600048A")]
	[Address(RVA = "0xB9A428", Offset = "0xB9A428", VA = "0xB9A428")]
	private void Awake()
	{
	}

	[Token(Token = "0x600048B")]
	[Address(RVA = "0xB9A478", Offset = "0xB9A478", VA = "0xB9A478", Slot = "4")]
	protected override void Update()
	{
	}

	[Token(Token = "0x600048C")]
	[Address(RVA = "0xB9A714", Offset = "0xB9A714", VA = "0xB9A714")]
	private Vector3 ProjectOntoPlane(Vector3 v, Vector3 normal)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600048D")]
	[Address(RVA = "0xB9A814", Offset = "0xB9A814", VA = "0xB9A814")]
	private Vector3 ConstantSlerp(Vector3 from, Vector3 to, float angle)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600048E")]
	[Address(RVA = "0xB9A95C", Offset = "0xB9A95C", VA = "0xB9A95C")]
	public SECTR_FPSController()
	{
	}
}
[Token(Token = "0x2000127")]
[AddComponentMenu("Procedural Worlds/SECTR/Demos/SECTR Ghost Controller")]
public class SECTR_GhostController : SECTR_FPController
{
	[Token(Token = "0x400062B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SECTR_ToolTip("The speed at which to fly through the world.")]
	public float FlySpeed;

	[Token(Token = "0x400062C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[SECTR_ToolTip("The translation acceleration amount applied by keyboard input.")]
	public float AccelerationRatio;

	[Token(Token = "0x400062D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SECTR_ToolTip("The amount by which holding down Ctrl slows you down.")]
	public float SlowDownRatio;

	[Token(Token = "0x600048F")]
	[Address(RVA = "0xB9A960", Offset = "0xB9A960", VA = "0xB9A960", Slot = "4")]
	protected override void Update()
	{
	}

	[Token(Token = "0x6000490")]
	[Address(RVA = "0xB9AD50", Offset = "0xB9AD50", VA = "0xB9AD50")]
	public SECTR_GhostController()
	{
	}
}
[Token(Token = "0x2000128")]
public class SECTR_TreeSpawner : MonoBehaviour
{
	[Token(Token = "0x400062E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject treeToSpawn;

	[Token(Token = "0x400062F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float spawnThreshold;

	[Token(Token = "0x4000630")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool spawnEnabled;

	[Token(Token = "0x6000491")]
	[Address(RVA = "0xB9AD68", Offset = "0xB9AD68", VA = "0xB9AD68")]
	private void Start()
	{
	}

	[Token(Token = "0x6000492")]
	[Address(RVA = "0xB9AD6C", Offset = "0xB9AD6C", VA = "0xB9AD6C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000493")]
	[Address(RVA = "0xB9AD70", Offset = "0xB9AD70", VA = "0xB9AD70")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6000494")]
	[Address(RVA = "0xB9B300", Offset = "0xB9B300", VA = "0xB9B300")]
	public SECTR_TreeSpawner()
	{
	}
}
[Token(Token = "0x2000129")]
public class SECTR_Wanderer : MonoBehaviour
{
	[Token(Token = "0x4000631")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private List<SECTR_Graph.Node> path;

	[Token(Token = "0x4000632")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<Vector3> waypoints;

	[Token(Token = "0x4000633")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int currentWaypointIndex;

	[Token(Token = "0x4000634")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SECTR_ToolTip("The speed at which the wanderer moves throughout the world.")]
	public float MovementSpeed;

	[Token(Token = "0x6000495")]
	[Address(RVA = "0xB9B318", Offset = "0xB9B318", VA = "0xB9B318")]
	private void Update()
	{
	}

	[Token(Token = "0x6000496")]
	[Address(RVA = "0xB9B9DC", Offset = "0xB9B9DC", VA = "0xB9B9DC")]
	public SECTR_Wanderer()
	{
	}
}
[Token(Token = "0x200012A")]
public class SECTR_StreamDemoUI : SECTR_DemoUI
{
	[Token(Token = "0x4000635")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Multiline]
	public string NoExportMessage;

	[Token(Token = "0x6000497")]
	[Address(RVA = "0xB9BAAC", Offset = "0xB9BAAC", VA = "0xB9BAAC", Slot = "4")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x6000498")]
	[Address(RVA = "0xB9BB54", Offset = "0xB9BB54", VA = "0xB9BB54", Slot = "6")]
	protected override void OnGUI()
	{
	}

	[Token(Token = "0x6000499")]
	[Address(RVA = "0xB9BD28", Offset = "0xB9BD28", VA = "0xB9BD28")]
	public SECTR_StreamDemoUI()
	{
	}
}
[Token(Token = "0x200012B")]
public class SECTR_VisDemoUI : SECTR_DemoUI
{
	[Token(Token = "0x4000636")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private string originalDemoMessage;

	[Token(Token = "0x4000637")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[Multiline]
	public string Unity4PerfMessage;

	[Token(Token = "0x600049A")]
	[Address(RVA = "0xB9BD2C", Offset = "0xB9BD2C", VA = "0xB9BD2C")]
	private void Start()
	{
	}

	[Token(Token = "0x600049B")]
	[Address(RVA = "0xB9BEB0", Offset = "0xB9BEB0", VA = "0xB9BEB0", Slot = "4")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x600049C")]
	[Address(RVA = "0xB9BF80", Offset = "0xB9BF80", VA = "0xB9BF80", Slot = "6")]
	protected override void OnGUI()
	{
	}

	[Token(Token = "0x600049D")]
	[Address(RVA = "0xB9C288", Offset = "0xB9C288", VA = "0xB9C288")]
	protected void ToggleCulling(bool active)
	{
	}

	[Token(Token = "0x600049E")]
	[Address(RVA = "0xB9C350", Offset = "0xB9C350", VA = "0xB9C350")]
	public SECTR_VisDemoUI()
	{
	}
}
[Serializable]
[Token(Token = "0x200012C")]
public class SECTR_AudioAmbience
{
	[Token(Token = "0x4000638")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[SECTR_ToolTip("The looping 2D cue to play as long as this ambience is active.", null, false)]
	public SECTR_AudioCue BackgroundLoop;

	[Token(Token = "0x4000639")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SECTR_ToolTip("A list of one-shots that will play randomly around the listener.")]
	public List<SECTR_AudioCue> OneShots;

	[Token(Token = "0x400063A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SECTR_ToolTip("The min and max time between one-shot playback.", "OneShots")]
	public Vector2 OneShotInterval;

	[Token(Token = "0x400063B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SECTR_ToolTip("The a volume scalar for the Cues in this Ambience. Combines with the base Cue volume.")]
	public float Volume;

	[Token(Token = "0x400063C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SECTR_ToolTip("When enabled the higher probability one shots will be more likely to play, gets the probability from the cue.")]
	public bool UseOneShotCuesProbability;

	[Token(Token = "0x400063D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	public float TotalProbability;

	[Token(Token = "0x600049F")]
	[Address(RVA = "0xB9C354", Offset = "0xB9C354", VA = "0xB9C354")]
	public SECTR_AudioAmbience()
	{
	}
}
[Token(Token = "0x200012D")]
public class SECTR_AudioBus : ScriptableObject
{
	[Token(Token = "0x400063E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[HideInInspector]
	private SECTR_AudioBus parent;

	[Token(Token = "0x400063F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<SECTR_AudioBus> children;

	[Token(Token = "0x4000640")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float userVolume;

	[Token(Token = "0x4000641")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float userPitch;

	[Token(Token = "0x4000642")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float effectiveVolume;

	[Token(Token = "0x4000643")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float effectivePitch;

	[Token(Token = "0x4000644")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool muted;

	[Token(Token = "0x4000645")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SECTR_ToolTip("The volume of this bus, between 0 and 1.", 0f, 1f)]
	public float Volume;

	[Token(Token = "0x4000646")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SECTR_ToolTip("The pitch of this bus, between 0 and 2.", 0f, 2f)]
	public float Pitch;

	[Token(Token = "0x1700005D")]
	public float UserVolume
	{
		[Token(Token = "0x60004A1")]
		[Address(RVA = "0xB9C3F4", Offset = "0xB9C3F4", VA = "0xB9C3F4")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60004A0")]
		[Address(RVA = "0xB9C3EC", Offset = "0xB9C3EC", VA = "0xB9C3EC")]
		set
		{
		}
	}

	[Token(Token = "0x1700005E")]
	public float UserPitch
	{
		[Token(Token = "0x60004A3")]
		[Address(RVA = "0xB9C404", Offset = "0xB9C404", VA = "0xB9C404")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60004A2")]
		[Address(RVA = "0xB9C3FC", Offset = "0xB9C3FC", VA = "0xB9C3FC")]
		set
		{
		}
	}

	[Token(Token = "0x1700005F")]
	public bool Muted
	{
		[Token(Token = "0x60004A4")]
		[Address(RVA = "0xB9C40C", Offset = "0xB9C40C", VA = "0xB9C40C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60004A5")]
		[Address(RVA = "0xB9C414", Offset = "0xB9C414", VA = "0xB9C414")]
		set
		{
		}
	}

	[Token(Token = "0x17000060")]
	public float EffectiveVolume
	{
		[Token(Token = "0x60004A6")]
		[Address(RVA = "0xB9C420", Offset = "0xB9C420", VA = "0xB9C420")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60004A7")]
		[Address(RVA = "0xB9C428", Offset = "0xB9C428", VA = "0xB9C428")]
		set
		{
		}
	}

	[Token(Token = "0x17000061")]
	public float EffectivePitch
	{
		[Token(Token = "0x60004A8")]
		[Address(RVA = "0xB9C45C", Offset = "0xB9C45C", VA = "0xB9C45C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60004A9")]
		[Address(RVA = "0xB9C464", Offset = "0xB9C464", VA = "0xB9C464")]
		set
		{
		}
	}

	[Token(Token = "0x17000062")]
	public SECTR_AudioBus Parent
	{
		[Token(Token = "0x60004AB")]
		[Address(RVA = "0xB9C710", Offset = "0xB9C710", VA = "0xB9C710")]
		get
		{
			return null;
		}
		[Token(Token = "0x60004AA")]
		[Address(RVA = "0xB9C490", Offset = "0xB9C490", VA = "0xB9C490")]
		set
		{
		}
	}

	[Token(Token = "0x17000063")]
	public List<SECTR_AudioBus> Children
	{
		[Token(Token = "0x60004AC")]
		[Address(RVA = "0xB9C718", Offset = "0xB9C718", VA = "0xB9C718")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60004AD")]
	[Address(RVA = "0xB9C720", Offset = "0xB9C720", VA = "0xB9C720")]
	public bool IsAncestorOf(SECTR_AudioBus bus)
	{
		return default(bool);
	}

	[Token(Token = "0x60004AE")]
	[Address(RVA = "0xB9C7D0", Offset = "0xB9C7D0", VA = "0xB9C7D0")]
	public bool IsDecendentOf(SECTR_AudioBus bus)
	{
		return default(bool);
	}

	[Token(Token = "0x60004AF")]
	[Address(RVA = "0xB9C87C", Offset = "0xB9C87C", VA = "0xB9C87C")]
	public void ResetUserVolume()
	{
	}

	[Token(Token = "0x60004B0")]
	[Address(RVA = "0xB9C964", Offset = "0xB9C964", VA = "0xB9C964")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60004B1")]
	[Address(RVA = "0xB9C9E4", Offset = "0xB9C9E4", VA = "0xB9C9E4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60004B2")]
	[Address(RVA = "0xB9C5F8", Offset = "0xB9C5F8", VA = "0xB9C5F8")]
	private void _AddChild(SECTR_AudioBus child)
	{
	}

	[Token(Token = "0x60004B3")]
	[Address(RVA = "0xB9C5A0", Offset = "0xB9C5A0", VA = "0xB9C5A0")]
	private void _RemoveChild(SECTR_AudioBus child)
	{
	}

	[Token(Token = "0x60004B4")]
	[Address(RVA = "0xB9CA64", Offset = "0xB9CA64", VA = "0xB9CA64")]
	public SECTR_AudioBus()
	{
	}
}
[Token(Token = "0x200012E")]
public class SECTR_AudioCue : ScriptableObject
{
	[Token(Token = "0x200012F")]
	public enum PlaybackModes
	{
		[Token(Token = "0x4000668")]
		Random,
		[Token(Token = "0x4000669")]
		Shuffle,
		[Token(Token = "0x400066A")]
		Loop,
		[Token(Token = "0x400066B")]
		PingPong
	}

	[Token(Token = "0x2000130")]
	public enum FalloffTypes
	{
		[Token(Token = "0x400066D")]
		Linear,
		[Token(Token = "0x400066E")]
		Logarithmic
	}

	[Token(Token = "0x2000131")]
	public enum Spatializations
	{
		[Token(Token = "0x4000670")]
		Simple2D,
		[Token(Token = "0x4000671")]
		Infinite3D,
		[Token(Token = "0x4000672")]
		Local3D,
		[Token(Token = "0x4000673")]
		Occludable3D
	}

	[Serializable]
	[Token(Token = "0x2000132")]
	public class ClipData
	{
		[Token(Token = "0x4000674")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private AudioClip clip;

		[Token(Token = "0x4000675")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private bool playedInShuffle;

		[Token(Token = "0x4000676")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float volume;

		[Token(Token = "0x4000677")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private SECTR_ULong bakeTimestamp;

		[Token(Token = "0x4000678")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimationCurve HDRCurve;

		[Token(Token = "0x1700006A")]
		public AudioClip Clip
		{
			[Token(Token = "0x60004C6")]
			[Address(RVA = "0xB9D3B4", Offset = "0xB9D3B4", VA = "0xB9D3B4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700006B")]
		public float Volume
		{
			[Token(Token = "0x60004C7")]
			[Address(RVA = "0xB9D3BC", Offset = "0xB9D3BC", VA = "0xB9D3BC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60004C8")]
			[Address(RVA = "0xB9D3C4", Offset = "0xB9D3C4", VA = "0xB9D3C4")]
			set
			{
			}
		}

		[Token(Token = "0x1700006C")]
		public bool PlayedInShuffle
		{
			[Token(Token = "0x60004C9")]
			[Address(RVA = "0xB9D3CC", Offset = "0xB9D3CC", VA = "0xB9D3CC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60004CA")]
			[Address(RVA = "0xB9D3D4", Offset = "0xB9D3D4", VA = "0xB9D3D4")]
			set
			{
			}
		}

		[Token(Token = "0x60004C5")]
		[Address(RVA = "0xB9D324", Offset = "0xB9D324", VA = "0xB9D324")]
		public ClipData(AudioClip clip)
		{
		}
	}

	[Token(Token = "0x4000647")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	[SerializeField]
	private SECTR_AudioCue template;

	[Token(Token = "0x4000648")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[HideInInspector]
	private SECTR_AudioBus bus;

	[Token(Token = "0x4000649")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int clipPlaybackIndex;

	[Token(Token = "0x400064A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private bool needsShuffling;

	[Token(Token = "0x400064B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
	private bool pingPongIncrement;

	[Token(Token = "0x400064C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SECTR_ToolTip("List of Audio Clips for this Cue to choose from.")]
	public List<ClipData> AudioClips;

	[Token(Token = "0x400064D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SECTR_ToolTip("The rules for selecting which audio clip to play next")]
	public PlaybackModes PlaybackMode;

	[Token(Token = "0x400064E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SECTR_ToolTip("Determines if the sound should be mixed in HDR or LDR.")]
	public bool HDR;

	[Token(Token = "0x400064F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SECTR_ToolTip("The loudness, in dB(SPL), of this HDR Cue.")]
	public Vector2 Loudness;

	[Token(Token = "0x4000650")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SECTR_ToolTip("The volume of this Cue.")]
	public Vector2 Volume;

	[Token(Token = "0x4000651")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SECTR_ToolTip("The pitch adjustment of this Cue.")]
	public Vector2 Pitch;

	[Token(Token = "0x4000652")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SECTR_ToolTip("Set to true to auto-loop this Cue.")]
	public bool Loops;

	[Token(Token = "0x4000653")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[SECTR_ToolTip("Cue priority, lower is more important.", 0f, 255f)]
	public int Priority;

	[Token(Token = "0x4000654")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SECTR_ToolTip("Prevent this Cue from recieving Audio Effects.")]
	public bool BypassEffects;

	[Token(Token = "0x4000655")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[SECTR_ToolTip("Maximum number of instances of this Cue that can be played at once.", 1f, -1f)]
	public int MaxInstances;

	[Token(Token = "0x4000656")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SECTR_ToolTip("Number of seconds over which to fade in the Cue when played.", 0f, -1f)]
	public float FadeInTime;

	[Token(Token = "0x4000657")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[SECTR_ToolTip("Number of seconds over which to fade out the Cue when stopped.", 0f, -1f)]
	public float FadeOutTime;

	[Token(Token = "0x4000658")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SECTR_ToolTip("Number of seconds to keep this Audio Cue alive after it has stopped playing. (Used to allow effects like reverb etc. to play out before destroying the Audio Source.)")]
	public int KeepAliveTime;

	[Token(Token = "0x4000659")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	[SECTR_ToolTip("Sets rules for how to spatialize this sound.")]
	public Spatializations Spatialization;

	[Token(Token = "0x400065A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SECTR_ToolTip("Expands or narrows the range of speakers out of which this Cue plays.", 0f, 360f)]
	public float Spread;

	[Token(Token = "0x400065B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	[SECTR_ToolTip("Moves the sound around the speaker field.", -1f, 1f)]
	public float Pan2D;

	[Token(Token = "0x400065C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SECTR_ToolTip("Attenuation style of this clip.")]
	public FalloffTypes Falloff;

	[Token(Token = "0x400065D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	[SECTR_ToolTip("The range at which the sound is no longer audible.", 0f, -1f)]
	public float MaxDistance;

	[Token(Token = "0x400065E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SECTR_ToolTip("The range within which the sound will be at peak volume/loudness.", 0f, -1f)]
	public float MinDistance;

	[Token(Token = "0x400065F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	[SECTR_ToolTip("Scales the amount of doppler effect applied to this Cue.", 0f, 1f)]
	public float DopplerLevel;

	[Token(Token = "0x4000660")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SECTR_ToolTip("Prevents too many instances of a cue playing near one another.", 0f, -1f)]
	public int ProximityLimit;

	[Token(Token = "0x4000661")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	[SECTR_ToolTip("The size of the proximity limit check.", "ProximityLimit", 0f, -1f)]
	public float ProximityRange;

	[Token(Token = "0x4000662")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SECTR_ToolTip("Allows you to scale down the amount of occlusion applied to this Cue (when occluded).", 0f, 1f)]
	public float OcclusionScale;

	[Token(Token = "0x4000663")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	[SECTR_ToolTip("The chance that this cue will actually make a sound when played.", 0f, 1f)]
	public float PlayProbability;

	[Token(Token = "0x4000664")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SECTR_ToolTip("Random delay before start of playback.")]
	public Vector2 Delay;

	[Token(Token = "0x4000665")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[SECTR_ToolTip("Special prefab to use when playing this Cue. Useful for adding effects to this source.", null, false)]
	public GameObject Prefab;

	[Token(Token = "0x4000666")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[SECTR_ToolTip("Control parameters for this Cue")]
	public List<SECTR_CueParam> ControlParams;

	[Token(Token = "0x17000064")]
	public SECTR_AudioCue Template
	{
		[Token(Token = "0x60004B6")]
		[Address(RVA = "0xB9CB8C", Offset = "0xB9CB8C", VA = "0xB9CB8C")]
		get
		{
			return null;
		}
		[Token(Token = "0x60004B5")]
		[Address(RVA = "0xB9CAF0", Offset = "0xB9CAF0", VA = "0xB9CAF0")]
		set
		{
		}
	}

	[Token(Token = "0x17000065")]
	public SECTR_AudioBus Bus
	{
		[Token(Token = "0x60004B8")]
		[Address(RVA = "0xB9CC0C", Offset = "0xB9CC0C", VA = "0xB9CC0C")]
		get
		{
			return null;
		}
		[Token(Token = "0x60004B7")]
		[Address(RVA = "0xB9CB94", Offset = "0xB9CB94", VA = "0xB9CB94")]
		set
		{
		}
	}

	[Token(Token = "0x17000066")]
	public SECTR_AudioCue SourceCue
	{
		[Token(Token = "0x60004B9")]
		[Address(RVA = "0xB9CC14", Offset = "0xB9CC14", VA = "0xB9CC14")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000067")]
	public bool Is3D
	{
		[Token(Token = "0x60004BA")]
		[Address(RVA = "0xB9CC84", Offset = "0xB9CC84", VA = "0xB9CC84")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000068")]
	public bool IsLocal
	{
		[Token(Token = "0x60004BB")]
		[Address(RVA = "0xB9CC94", Offset = "0xB9CC94", VA = "0xB9CC94")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000069")]
	public int ClipIndex
	{
		[Token(Token = "0x60004BC")]
		[Address(RVA = "0xB9CCA4", Offset = "0xB9CCA4", VA = "0xB9CCA4")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x60004BD")]
	[Address(RVA = "0xB9CCAC", Offset = "0xB9CCAC", VA = "0xB9CCAC")]
	public ClipData GetNextClip()
	{
		return null;
	}

	[Token(Token = "0x60004BE")]
	[Address(RVA = "0xB9CF4C", Offset = "0xB9CF4C", VA = "0xB9CF4C")]
	public float MinClipLength()
	{
		return default(float);
	}

	[Token(Token = "0x60004BF")]
	[Address(RVA = "0xB9D068", Offset = "0xB9D068", VA = "0xB9D068")]
	public float MaxClipLength()
	{
		return default(float);
	}

	[Token(Token = "0x60004C0")]
	[Address(RVA = "0xB9D16C", Offset = "0xB9D16C", VA = "0xB9D16C")]
	public void ResetClipIndex()
	{
	}

	[Token(Token = "0x60004C1")]
	[Address(RVA = "0xB9D180", Offset = "0xB9D180", VA = "0xB9D180")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60004C2")]
	[Address(RVA = "0xB9D194", Offset = "0xB9D194", VA = "0xB9D194")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60004C3")]
	[Address(RVA = "0xB9CE08", Offset = "0xB9CE08", VA = "0xB9CE08")]
	private void _ShuffleClips()
	{
	}

	[Token(Token = "0x60004C4")]
	[Address(RVA = "0xB9D198", Offset = "0xB9D198", VA = "0xB9D198")]
	public SECTR_AudioCue()
	{
	}
}
[Token(Token = "0x2000133")]
public interface SECTR_IAudioInstance
{
	[Token(Token = "0x1700006D")]
	int Generation
	{
		[Token(Token = "0x60004CB")]
		get;
	}

	[Token(Token = "0x1700006E")]
	bool Active
	{
		[Token(Token = "0x60004CC")]
		get;
	}

	[Token(Token = "0x1700006F")]
	Vector3 Position
	{
		[Token(Token = "0x60004CD")]
		get;
		[Token(Token = "0x60004CE")]
		set;
	}

	[Token(Token = "0x17000070")]
	Vector3 LocalPosition
	{
		[Token(Token = "0x60004CF")]
		get;
		[Token(Token = "0x60004D0")]
		set;
	}

	[Token(Token = "0x17000071")]
	float Volume
	{
		[Token(Token = "0x60004D1")]
		get;
		[Token(Token = "0x60004D2")]
		set;
	}

	[Token(Token = "0x17000072")]
	float Pitch
	{
		[Token(Token = "0x60004D3")]
		get;
		[Token(Token = "0x60004D4")]
		set;
	}

	[Token(Token = "0x17000073")]
	bool Mute
	{
		[Token(Token = "0x60004D5")]
		get;
		[Token(Token = "0x60004D6")]
		set;
	}

	[Token(Token = "0x17000074")]
	bool Pause
	{
		[Token(Token = "0x60004D7")]
		get;
		[Token(Token = "0x60004D8")]
		set;
	}

	[Token(Token = "0x17000075")]
	int TimeSamples
	{
		[Token(Token = "0x60004D9")]
		get;
		[Token(Token = "0x60004DA")]
		set;
	}

	[Token(Token = "0x17000076")]
	float TimeSeconds
	{
		[Token(Token = "0x60004DB")]
		get;
		[Token(Token = "0x60004DC")]
		set;
	}

	[Token(Token = "0x60004DD")]
	void Stop(bool stopImmediately);

	[Token(Token = "0x60004DE")]
	void ForceInfinite();

	[Token(Token = "0x60004DF")]
	void ForceOcclusion(bool occluded);

	[Token(Token = "0x60004E0")]
	void SetParameter(string param, float value);

	[Token(Token = "0x60004E1")]
	AudioSource GetInternalAudioSource();
}
[Token(Token = "0x2000134")]
public struct SECTR_AudioCueInstance : SECTR_IAudioInstance
{
	[Token(Token = "0x4000679")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private SECTR_IAudioInstance internalInstance;

	[Token(Token = "0x400067A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private int generation;

	[Token(Token = "0x17000077")]
	public int Generation
	{
		[Token(Token = "0x60004E3")]
		[Address(RVA = "0xB9D3EC", Offset = "0xB9D3EC", VA = "0xB9D3EC", Slot = "4")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000078")]
	public bool Active
	{
		[Token(Token = "0x60004E4")]
		[Address(RVA = "0xB9D3F4", Offset = "0xB9D3F4", VA = "0xB9D3F4", Slot = "5")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000079")]
	public Vector3 Position
	{
		[Token(Token = "0x60004E5")]
		[Address(RVA = "0xB9D520", Offset = "0xB9D520", VA = "0xB9D520", Slot = "6")]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x60004E6")]
		[Address(RVA = "0xB9D610", Offset = "0xB9D610", VA = "0xB9D610", Slot = "7")]
		set
		{
		}
	}

	[Token(Token = "0x1700007A")]
	public Vector3 LocalPosition
	{
		[Token(Token = "0x60004E7")]
		[Address(RVA = "0xB9D6FC", Offset = "0xB9D6FC", VA = "0xB9D6FC", Slot = "8")]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x60004E8")]
		[Address(RVA = "0xB9D7EC", Offset = "0xB9D7EC", VA = "0xB9D7EC", Slot = "9")]
		set
		{
		}
	}

	[Token(Token = "0x1700007B")]
	public float Volume
	{
		[Token(Token = "0x60004E9")]
		[Address(RVA = "0xB9D8D8", Offset = "0xB9D8D8", VA = "0xB9D8D8", Slot = "10")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60004EA")]
		[Address(RVA = "0xB9D998", Offset = "0xB9D998", VA = "0xB9D998", Slot = "11")]
		set
		{
		}
	}

	[Token(Token = "0x1700007C")]
	public float Pitch
	{
		[Token(Token = "0x60004EB")]
		[Address(RVA = "0xB9DA68", Offset = "0xB9DA68", VA = "0xB9DA68", Slot = "12")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60004EC")]
		[Address(RVA = "0xB9DB28", Offset = "0xB9DB28", VA = "0xB9DB28", Slot = "13")]
		set
		{
		}
	}

	[Token(Token = "0x1700007D")]
	public bool Mute
	{
		[Token(Token = "0x60004ED")]
		[Address(RVA = "0xB9DBF8", Offset = "0xB9DBF8", VA = "0xB9DBF8", Slot = "14")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60004EE")]
		[Address(RVA = "0xB9DCB8", Offset = "0xB9DCB8", VA = "0xB9DCB8", Slot = "15")]
		set
		{
		}
	}

	[Token(Token = "0x1700007E")]
	public bool Pause
	{
		[Token(Token = "0x60004EF")]
		[Address(RVA = "0xB9DD7C", Offset = "0xB9DD7C", VA = "0xB9DD7C", Slot = "16")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60004F0")]
		[Address(RVA = "0xB9DE3C", Offset = "0xB9DE3C", VA = "0xB9DE3C", Slot = "17")]
		set
		{
		}
	}

	[Token(Token = "0x1700007F")]
	public float TimeSeconds
	{
		[Token(Token = "0x60004F1")]
		[Address(RVA = "0xB9DF00", Offset = "0xB9DF00", VA = "0xB9DF00", Slot = "20")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60004F2")]
		[Address(RVA = "0xB9DFC0", Offset = "0xB9DFC0", VA = "0xB9DFC0", Slot = "21")]
		set
		{
		}
	}

	[Token(Token = "0x17000080")]
	public int TimeSamples
	{
		[Token(Token = "0x60004F3")]
		[Address(RVA = "0xB9E090", Offset = "0xB9E090", VA = "0xB9E090", Slot = "18")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60004F4")]
		[Address(RVA = "0xB9E150", Offset = "0xB9E150", VA = "0xB9E150", Slot = "19")]
		set
		{
		}
	}

	[Token(Token = "0x60004E2")]
	[Address(RVA = "0xB9D3E0", Offset = "0xB9D3E0", VA = "0xB9D3E0")]
	public SECTR_AudioCueInstance(SECTR_IAudioInstance internalInstance, int generation)
	{
	}

	[Token(Token = "0x60004F5")]
	[Address(RVA = "0xB95ED8", Offset = "0xB95ED8", VA = "0xB95ED8", Slot = "22")]
	public void Stop(bool stopImmediately)
	{
	}

	[Token(Token = "0x60004F6")]
	[Address(RVA = "0xB9E214", Offset = "0xB9E214", VA = "0xB9E214", Slot = "23")]
	public void ForceInfinite()
	{
	}

	[Token(Token = "0x60004F7")]
	[Address(RVA = "0xB9E2D0", Offset = "0xB9E2D0", VA = "0xB9E2D0", Slot = "24")]
	public void ForceOcclusion(bool occluded)
	{
	}

	[Token(Token = "0x60004F8")]
	[Address(RVA = "0xB9E394", Offset = "0xB9E394", VA = "0xB9E394", Slot = "25")]
	public void SetParameter(string param, float value)
	{
	}

	[Token(Token = "0x60004F9")]
	[Address(RVA = "0xB9E46C", Offset = "0xB9E46C", VA = "0xB9E46C", Slot = "26")]
	public AudioSource GetInternalAudioSource()
	{
		return null;
	}

	[Token(Token = "0x60004FA")]
	[Address(RVA = "0xB9E52C", Offset = "0xB9E52C", VA = "0xB9E52C")]
	public SECTR_IAudioInstance GetInternalInstance()
	{
		return null;
	}

	[Token(Token = "0x60004FB")]
	[Address(RVA = "0xB95EB4", Offset = "0xB95EB4", VA = "0xB95EB4")]
	public static implicit operator bool(SECTR_AudioCueInstance x)
	{
		return default(bool);
	}
}
[Token(Token = "0x2000135")]
public abstract class SECTR_AudioEnvironment : MonoBehaviour
{
	[Token(Token = "0x400067B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool ambienceActive;

	[Token(Token = "0x400067C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SECTR_ToolTip("The configuraiton of the ambient audio in this Reverb Zone.")]
	public SECTR_AudioAmbience Ambience;

	[Token(Token = "0x17000081")]
	public bool Active
	{
		[Token(Token = "0x60004FC")]
		[Address(RVA = "0xB9E534", Offset = "0xB9E534", VA = "0xB9E534")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60004FD")]
	[Address(RVA = "0xB9E53C", Offset = "0xB9E53C", VA = "0xB9E53C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60004FE")]
	[Address(RVA = "0xB9E584", Offset = "0xB9E584", VA = "0xB9E584")]
	protected void Activate()
	{
	}

	[Token(Token = "0x60004FF")]
	[Address(RVA = "0xB9E560", Offset = "0xB9E560", VA = "0xB9E560")]
	protected void Deactivate()
	{
	}

	[Token(Token = "0x6000500")]
	[Address(RVA = "0xB9E758", Offset = "0xB9E758", VA = "0xB9E758")]
	protected SECTR_AudioEnvironment()
	{
	}
}
[Token(Token = "0x2000136")]
[AddComponentMenu("Procedural Worlds/SECTR/Audio/SECTR Audio Environment Trigger")]
public class SECTR_AudioEnvironmentTrigger : SECTR_AudioEnvironment
{
	[Token(Token = "0x400067D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private GameObject activator;

	[Token(Token = "0x6000501")]
	[Address(RVA = "0xB9E7BC", Offset = "0xB9E7BC", VA = "0xB9E7BC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000502")]
	[Address(RVA = "0xB9E830", Offset = "0xB9E830", VA = "0xB9E830")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000503")]
	[Address(RVA = "0xB9E8C4", Offset = "0xB9E8C4", VA = "0xB9E8C4")]
	private void OnTriggerEnter2D(Collider2D other)
	{
	}

	[Token(Token = "0x6000504")]
	[Address(RVA = "0xB9E958", Offset = "0xB9E958", VA = "0xB9E958")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000505")]
	[Address(RVA = "0xB9EA00", Offset = "0xB9EA00", VA = "0xB9EA00")]
	private void OnTriggerExit2D(Collider2D other)
	{
	}

	[Token(Token = "0x6000506")]
	[Address(RVA = "0xB9EAA8", Offset = "0xB9EAA8", VA = "0xB9EAA8")]
	public SECTR_AudioEnvironmentTrigger()
	{
	}
}
[Token(Token = "0x2000137")]
[RequireComponent(typeof(AudioReverbZone))]
[AddComponentMenu("Procedural Worlds/SECTR/Audio/SECTR Audio Environment Zone")]
public class SECTR_AudioEnvironmentZone : SECTR_AudioEnvironment
{
	[Token(Token = "0x400067E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private AudioReverbZone cachedZone;

	[Token(Token = "0x6000507")]
	[Address(RVA = "0xB9EAAC", Offset = "0xB9EAAC", VA = "0xB9EAAC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000508")]
	[Address(RVA = "0xB9EAFC", Offset = "0xB9EAFC", VA = "0xB9EAFC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000509")]
	[Address(RVA = "0xB9EB24", Offset = "0xB9EB24", VA = "0xB9EB24")]
	private void Update()
	{
	}

	[Token(Token = "0x600050A")]
	[Address(RVA = "0xB9ED04", Offset = "0xB9ED04", VA = "0xB9ED04")]
	public SECTR_AudioEnvironmentZone()
	{
	}
}
[Token(Token = "0x2000138")]
public abstract class SECTR_AudioSource : MonoBehaviour
{
	[Token(Token = "0x400067F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	[SerializeField]
	protected float volume;

	[Token(Token = "0x4000680")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[HideInInspector]
	[SerializeField]
	protected float pitch;

	[Token(Token = "0x4000681")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool playedFromStart;

	[Token(Token = "0x4000682")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SECTR_ToolTip("The Cue to play from this source.", null, false)]
	public SECTR_AudioCue Cue;

	[Token(Token = "0x4000683")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SECTR_ToolTip("If the Cue should be forced to loop when playing.")]
	public bool Loop;

	[Token(Token = "0x4000684")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	[SECTR_ToolTip("Should the Cue auto-play when created.")]
	public bool PlayOnStart;

	[Token(Token = "0x17000082")]
	public float Volume
	{
		[Token(Token = "0x600050B")]
		[Address(RVA = "0xB9ED08", Offset = "0xB9ED08", VA = "0xB9ED08")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600050C")]
		[Address(RVA = "0xB9ED10", Offset = "0xB9ED10", VA = "0xB9ED10")]
		set
		{
		}
	}

	[Token(Token = "0x17000083")]
	public float Pitch
	{
		[Token(Token = "0x600050D")]
		[Address(RVA = "0xB9ED44", Offset = "0xB9ED44", VA = "0xB9ED44")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600050E")]
		[Address(RVA = "0xB9ED4C", Offset = "0xB9ED4C", VA = "0xB9ED4C")]
		set
		{
		}
	}

	[Token(Token = "0x17000084")]
	public abstract bool IsPlaying
	{
		[Token(Token = "0x600050F")]
		get;
	}

	[Token(Token = "0x6000510")]
	public abstract void Play();

	[Token(Token = "0x6000511")]
	public abstract void Stop(bool stopImmediately);

	[Token(Token = "0x6000512")]
	[Address(RVA = "0xB9ED80", Offset = "0xB9ED80", VA = "0xB9ED80")]
	public void PlayEvent()
	{
	}

	[Token(Token = "0x6000513")]
	[Address(RVA = "0xB9ED8C", Offset = "0xB9ED8C", VA = "0xB9ED8C")]
	public void StopEvent(bool stopImmediately)
	{
	}

	[Token(Token = "0x6000514")]
	[Address(RVA = "0xB9ED9C", Offset = "0xB9ED9C", VA = "0xB9ED9C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000515")]
	[Address(RVA = "0xB9EDD8", Offset = "0xB9EDD8", VA = "0xB9EDD8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000516")]
	[Address(RVA = "0xB9EE18", Offset = "0xB9EE18", VA = "0xB9EE18", Slot = "7")]
	protected virtual void OnDisable()
	{
	}

	[Token(Token = "0x6000517")]
	protected abstract void OnVolumePitchChanged();

	[Token(Token = "0x6000518")]
	[Address(RVA = "0xB9EE28", Offset = "0xB9EE28", VA = "0xB9EE28")]
	protected SECTR_AudioSource()
	{
	}
}
[Token(Token = "0x2000139")]
[RequireComponent(typeof(AudioListener))]
[ExecuteInEditMode]
[AddComponentMenu("Procedural Worlds/SECTR/Audio/SECTR Audio System")]
[RequireComponent(typeof(SECTR_Member))]
public class SECTR_AudioSystem : MonoBehaviour
{
	[Token(Token = "0x200013A")]
	public class Instance : SECTR_IAudioInstance
	{
		[Token(Token = "0x200013B")]
		[Flags]
		private enum Flags
		{
			[Token(Token = "0x40006C6")]
			Loops = 1,
			[Token(Token = "0x40006C7")]
			FadingIn = 2,
			[Token(Token = "0x40006C8")]
			FadingOut = 4,
			[Token(Token = "0x40006C9")]
			Muted = 8,
			[Token(Token = "0x40006CA")]
			Local = 0x10,
			[Token(Token = "0x40006CB")]
			ThreeD = 0x20,
			[Token(Token = "0x40006CC")]
			Paused = 0x40,
			[Token(Token = "0x40006CD")]
			HDR = 0x80,
			[Token(Token = "0x40006CE")]
			Occludable = 0x100,
			[Token(Token = "0x40006CF")]
			Occluded = 0x200,
			[Token(Token = "0x40006D0")]
			ForcedInfinite = 0x400,
			[Token(Token = "0x40006D1")]
			Delayed = 0x800
		}

		[Token(Token = "0x40006B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public double KeepAliveTimeStamp;

		[Token(Token = "0x40006B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int generation;

		[Token(Token = "0x40006B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private AudioSource source;

		[Token(Token = "0x40006B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private AudioLowPassFilter lowpass;

		[Token(Token = "0x40006B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private SECTR_AudioCue audioCue;

		[Token(Token = "0x40006B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform parent;

		[Token(Token = "0x40006B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 localPosition;

		[Token(Token = "0x40006B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Flags flags;

		[Token(Token = "0x40006B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float nextTestTime;

		[Token(Token = "0x40006B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float fadeStarTime;

		[Token(Token = "0x40006BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float basePitch;

		[Token(Token = "0x40006BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float baseVolumeLoudness;

		[Token(Token = "0x40006BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float userVolume;

		[Token(Token = "0x40006BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float userPitch;

		[Token(Token = "0x40006BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float occlusionAlpha;

		[Token(Token = "0x40006BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private AnimationCurve hdrCurve;

		[Token(Token = "0x40006C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Dictionary<SECTR_CueParam, float> paramTable;

		[Token(Token = "0x40006C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private List<float> volumeParamValues;

		[Token(Token = "0x40006C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private List<float> pitchParamValues;

		[Token(Token = "0x40006C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Dictionary<SECTR_CueParam.AttributeData, float> attributeParamValues;

		[Token(Token = "0x40006C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Dictionary<SECTR_CueParam.AttributeData, float> attributeParamBaseValues;

		[Token(Token = "0x1700008A")]
		public int Generation
		{
			[Token(Token = "0x6000536")]
			[Address(RVA = "0xBA35F0", Offset = "0xBA35F0", VA = "0xBA35F0", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700008B")]
		public bool Active
		{
			[Token(Token = "0x6000537")]
			[Address(RVA = "0xBA30B8", Offset = "0xBA30B8", VA = "0xBA30B8", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700008C")]
		public Vector3 Position
		{
			[Token(Token = "0x6000538")]
			[Address(RVA = "0xBA33F4", Offset = "0xBA33F4", VA = "0xBA33F4", Slot = "6")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000539")]
			[Address(RVA = "0xBA3640", Offset = "0xBA3640", VA = "0xBA3640", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x1700008D")]
		public Vector3 LocalPosition
		{
			[Token(Token = "0x600053A")]
			[Address(RVA = "0xBA37B8", Offset = "0xBA37B8", VA = "0xBA37B8", Slot = "8")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x600053B")]
			[Address(RVA = "0xBA37C4", Offset = "0xBA37C4", VA = "0xBA37C4", Slot = "9")]
			set
			{
			}
		}

		[Token(Token = "0x1700008E")]
		public Transform Parent
		{
			[Token(Token = "0x600053C")]
			[Address(RVA = "0xBA388C", Offset = "0xBA388C", VA = "0xBA388C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700008F")]
		public float Volume
		{
			[Token(Token = "0x600053D")]
			[Address(RVA = "0xBA3894", Offset = "0xBA3894", VA = "0xBA3894", Slot = "10")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600053E")]
			[Address(RVA = "0xBA389C", Offset = "0xBA389C", VA = "0xBA389C", Slot = "11")]
			set
			{
			}
		}

		[Token(Token = "0x17000090")]
		public float Pitch
		{
			[Token(Token = "0x600053F")]
			[Address(RVA = "0xBA38D4", Offset = "0xBA38D4", VA = "0xBA38D4", Slot = "12")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000540")]
			[Address(RVA = "0xBA38DC", Offset = "0xBA38DC", VA = "0xBA38DC", Slot = "13")]
			set
			{
			}
		}

		[Token(Token = "0x17000091")]
		public bool Mute
		{
			[Token(Token = "0x6000541")]
			[Address(RVA = "0xBA3914", Offset = "0xBA3914", VA = "0xBA3914", Slot = "14")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000542")]
			[Address(RVA = "0xBA392C", Offset = "0xBA392C", VA = "0xBA392C", Slot = "15")]
			set
			{
			}
		}

		[Token(Token = "0x17000092")]
		public bool Pause
		{
			[Token(Token = "0x6000543")]
			[Address(RVA = "0xBA39F0", Offset = "0xBA39F0", VA = "0xBA39F0", Slot = "16")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000544")]
			[Address(RVA = "0xBA0744", Offset = "0xBA0744", VA = "0xBA0744", Slot = "17")]
			set
			{
			}
		}

		[Token(Token = "0x17000093")]
		public float TimeSeconds
		{
			[Token(Token = "0x6000545")]
			[Address(RVA = "0xBA3A18", Offset = "0xBA3A18", VA = "0xBA3A18", Slot = "20")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000546")]
			[Address(RVA = "0xBA3AA0", Offset = "0xBA3AA0", VA = "0xBA3AA0", Slot = "21")]
			set
			{
			}
		}

		[Token(Token = "0x17000094")]
		public int TimeSamples
		{
			[Token(Token = "0x6000547")]
			[Address(RVA = "0xBA3B34", Offset = "0xBA3B34", VA = "0xBA3B34", Slot = "18")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000548")]
			[Address(RVA = "0xBA3BBC", Offset = "0xBA3BBC", VA = "0xBA3BBC", Slot = "19")]
			set
			{
			}
		}

		[Token(Token = "0x17000095")]
		public bool Loops
		{
			[Token(Token = "0x600054D")]
			[Address(RVA = "0xBA35F8", Offset = "0xBA35F8", VA = "0xBA35F8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000096")]
		public bool Local
		{
			[Token(Token = "0x600054E")]
			[Address(RVA = "0xBA3634", Offset = "0xBA3634", VA = "0xBA3634")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000097")]
		public bool ThreeD
		{
			[Token(Token = "0x600054F")]
			[Address(RVA = "0xBA3628", Offset = "0xBA3628", VA = "0xBA3628")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000098")]
		public bool FadingIn
		{
			[Token(Token = "0x6000550")]
			[Address(RVA = "0xBA4088", Offset = "0xBA4088", VA = "0xBA4088")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000099")]
		public bool FadingOut
		{
			[Token(Token = "0x6000551")]
			[Address(RVA = "0xBA316C", Offset = "0xBA316C", VA = "0xBA316C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700009A")]
		public bool Muted
		{
			[Token(Token = "0x6000552")]
			[Address(RVA = "0xBA3920", Offset = "0xBA3920", VA = "0xBA3920")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700009B")]
		public bool Paused
		{
			[Token(Token = "0x6000553")]
			[Address(RVA = "0xBA3610", Offset = "0xBA3610", VA = "0xBA3610")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700009C")]
		public bool HDR
		{
			[Token(Token = "0x6000554")]
			[Address(RVA = "0xBA4094", Offset = "0xBA4094", VA = "0xBA4094")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700009D")]
		public bool Occludable
		{
			[Token(Token = "0x6000555")]
			[Address(RVA = "0xBA40A0", Offset = "0xBA40A0", VA = "0xBA40A0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700009E")]
		public bool Occluded
		{
			[Token(Token = "0x6000556")]
			[Address(RVA = "0xBA40AC", Offset = "0xBA40AC", VA = "0xBA40AC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700009F")]
		public bool ForcedInfinite
		{
			[Token(Token = "0x6000557")]
			[Address(RVA = "0xBA40B8", Offset = "0xBA40B8", VA = "0xBA40B8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000A0")]
		public bool Delayed
		{
			[Token(Token = "0x6000558")]
			[Address(RVA = "0xBA3604", Offset = "0xBA3604", VA = "0xBA3604")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000A1")]
		public SECTR_AudioBus Bus
		{
			[Token(Token = "0x6000559")]
			[Address(RVA = "0xBA06C4", Offset = "0xBA06C4", VA = "0xBA06C4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A2")]
		public SECTR_AudioCue Cue
		{
			[Token(Token = "0x600055A")]
			[Address(RVA = "0xBA40C4", Offset = "0xBA40C4", VA = "0xBA40C4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000549")]
		[Address(RVA = "0xBA3C50", Offset = "0xBA3C50", VA = "0xBA3C50", Slot = "23")]
		public void ForceInfinite()
		{
		}

		[Token(Token = "0x600054A")]
		[Address(RVA = "0xBA3D48", Offset = "0xBA3D48", VA = "0xBA3D48", Slot = "24")]
		public void ForceOcclusion(bool occluded)
		{
		}

		[Token(Token = "0x600054B")]
		[Address(RVA = "0xBA3DF0", Offset = "0xBA3DF0", VA = "0xBA3DF0", Slot = "25")]
		public void SetParameter(string param, float value)
		{
		}

		[Token(Token = "0x600054C")]
		[Address(RVA = "0xBA4080", Offset = "0xBA4080", VA = "0xBA4080", Slot = "26")]
		public AudioSource GetInternalAudioSource()
		{
			return null;
		}

		[Token(Token = "0x600055B")]
		[Address(RVA = "0xB9F5FC", Offset = "0xB9F5FC", VA = "0xB9F5FC")]
		public void Init(SECTR_AudioCue audioCue, Transform parent, Vector3 localPosition, bool loops)
		{
		}

		[Token(Token = "0x600055C")]
		[Address(RVA = "0xB9FCDC", Offset = "0xB9FCDC", VA = "0xB9FCDC")]
		public void Clone(Instance instance, Vector3 newPosition)
		{
		}

		[Token(Token = "0x600055D")]
		[Address(RVA = "0xBA321C", Offset = "0xBA321C", VA = "0xBA321C")]
		public void Uninit()
		{
		}

		[Token(Token = "0x600055E")]
		[Address(RVA = "0xB9F7F4", Offset = "0xB9F7F4", VA = "0xB9F7F4")]
		public void Play()
		{
		}

		[Token(Token = "0x600055F")]
		[Address(RVA = "0xBA1878", Offset = "0xBA1878", VA = "0xBA1878", Slot = "22")]
		public void Stop(bool stopImmediately)
		{
		}

		[Token(Token = "0x6000560")]
		[Address(RVA = "0xBA20D8", Offset = "0xBA20D8", VA = "0xBA20D8")]
		public void Update(float deltaTime, bool volumeOnly)
		{
		}

		[Token(Token = "0x6000561")]
		[Address(RVA = "0xBA39D4", Offset = "0xBA39D4", VA = "0xBA39D4")]
		private void _SetFlag(Flags flag, bool on)
		{
		}

		[Token(Token = "0x6000562")]
		[Address(RVA = "0xBA3A08", Offset = "0xBA3A08", VA = "0xBA3A08")]
		private bool _GetFlag(Flags flag)
		{
			return default(bool);
		}

		[Token(Token = "0x6000563")]
		[Address(RVA = "0xBA42C8", Offset = "0xBA42C8", VA = "0xBA42C8")]
		private bool _AcquireSource()
		{
			return default(bool);
		}

		[Token(Token = "0x6000564")]
		[Address(RVA = "0xBA4E18", Offset = "0xBA4E18", VA = "0xBA4E18")]
		private void _ReleaseSource()
		{
		}

		[Token(Token = "0x6000565")]
		[Address(RVA = "0xBA40CC", Offset = "0xBA40CC", VA = "0xBA40CC")]
		private void _AddProximityInstance(SECTR_AudioCue srcCue)
		{
		}

		[Token(Token = "0x6000566")]
		[Address(RVA = "0xBA4254", Offset = "0xBA4254", VA = "0xBA4254")]
		private void _ScheduleNextTest()
		{
		}

		[Token(Token = "0x6000567")]
		[Address(RVA = "0xBA5098", Offset = "0xBA5098", VA = "0xBA5098")]
		private void _Stop(bool stopImmediately)
		{
		}

		[Token(Token = "0x6000568")]
		[Address(RVA = "0xBA138C", Offset = "0xBA138C", VA = "0xBA138C")]
		public Instance()
		{
		}
	}

	[Token(Token = "0x200013C")]
	[Flags]
	public enum OcclusionModes
	{
		[Token(Token = "0x40006D3")]
		Graph = 1,
		[Token(Token = "0x40006D4")]
		Raycast = 2,
		[Token(Token = "0x40006D5")]
		Distance = 4
	}

	[Token(Token = "0x4000685")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static SECTR_AudioSystem audioSystem;

	[Token(Token = "0x4000686")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static Stack<Instance> instancePool;

	[Token(Token = "0x4000687")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static Stack<AudioSource> simpleSourcePool;

	[Token(Token = "0x4000688")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static Stack<AudioSource> lowpassSourcePool;

	[Token(Token = "0x4000689")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static Dictionary<GameObject, Stack<AudioSource>> prefabSourcePool;

	[Token(Token = "0x400068A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static Transform sourcePoolParent;

	[Token(Token = "0x400068B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private static List<Instance> activeInstances;

	[Token(Token = "0x400068C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private static Dictionary<SECTR_AudioCue, int> maxInstancesTable;

	[Token(Token = "0x400068D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private static Dictionary<SECTR_AudioCue, List<Instance>> proximityTable;

	[Token(Token = "0x400068E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private static float currentTime;

	[Token(Token = "0x400068F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private static List<SECTR_AudioAmbience> ambienceStack;

	[Token(Token = "0x4000690")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private static SECTR_AudioAmbience currentAmbience;

	[Token(Token = "0x4000691")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private static SECTR_AudioCueInstance ambienceLoop;

	[Token(Token = "0x4000692")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private static SECTR_AudioCueInstance ambienceOneShot;

	[Token(Token = "0x4000693")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private static float nextAmbienceOneShotTime;

	[Token(Token = "0x4000694")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private static SECTR_AudioCue currentMusic;

	[Token(Token = "0x4000695")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private static SECTR_AudioCueInstance musicLoop;

	[Token(Token = "0x4000696")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private static float windowHDRMax;

	[Token(Token = "0x4000697")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private static float windowHDRMin;

	[Token(Token = "0x4000698")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private static float currentLoudness;

	[Token(Token = "0x4000699")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private static List<SECTR_Graph.Node> occlusionPath;

	[Token(Token = "0x400069A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private static SECTR_Member cachedMember;

	[Token(Token = "0x400069B")]
	private const float EPSILON = 0.001f;

	[Token(Token = "0x400069C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SECTR_ToolTip("The maximum number of instances that can be active at once. Inaudible sounds do not count against this limit.")]
	public int MaxInstances;

	[Token(Token = "0x400069D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SECTR_ToolTip("The number of instances to allocate with lowpass effects (for occlusion and the like).")]
	public int LowpassInstances;

	[Token(Token = "0x400069E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SECTR_ToolTip("The Bus at the top of the mixing heirarchy. Required to play sounds.", null, false)]
	public SECTR_AudioBus MasterBus;

	[Token(Token = "0x400069F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SECTR_ToolTip("The baseline settings for any environmental audio. Will be audible when no other ambiences are active.")]
	public SECTR_AudioAmbience DefaultAmbience;

	[Token(Token = "0x40006A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SECTR_ToolTip("Minimum Loudness for the HDR mixer. Current Loudness will never drop below this.", 0f, 200f)]
	public float HDRBaseLoudness;

	[Token(Token = "0x40006A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SECTR_ToolTip("The maximum difference between the loudest sound and the softest sound before sounds are simply culled out.", 0f, 200f)]
	public float HDRWindowSize;

	[Token(Token = "0x40006A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SECTR_ToolTip("Speed at which HDR window decays after a loud sound is played.", 0f, 100f)]
	public float HDRDecay;

	[Token(Token = "0x40006A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SECTR_ToolTip("Should sounds close to the listener be blended into 2D (to avoid harsh stereo switching).")]
	public bool BlendNearbySounds;

	[Token(Token = "0x40006A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SECTR_ToolTip("Objects close to the listener will be blended into 2D, as a kind of fake HRTF. This determines the start and end of that blend.", "BlendNearbySounds")]
	public Vector2 NearBlendRange;

	[Token(Token = "0x40006A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SECTR_ToolTip("Determines what kind of logic to use for computing sound occlusion.", null, typeof(OcclusionModes))]
	public OcclusionModes OcclusionFlags;

	[Token(Token = "0x40006A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[SECTR_ToolTip("The distance beyond which sounds will be considered occluded, if Distance occlusion is enabled.", "OcclusionFlags")]
	public float OcclusionDistance;

	[Token(Token = "0x40006A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SECTR_ToolTip("The layers to test against when raycasting for occlusion.", "OcclusionFlags")]
	public LayerMask RaycastLayers;

	[Token(Token = "0x40006A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[SECTR_ToolTip("The amount by which to decrease the volume of occluded sounds.", "OcclusionFlags", 0f, 1f)]
	public float OcclusionVolume;

	[Token(Token = "0x40006A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SECTR_ToolTip("The frequency cutoff of the lowpass filter for occluded sounds.", "OcclusionFlags", 10f, 22000f)]
	public float OcclusionCutoff;

	[Token(Token = "0x40006AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[SECTR_ToolTip("The resonance Q of the lowpass filter for occluded sounds.", "OcclusionFlags", 1f, 10f)]
	public float OcclusionResonanceQ;

	[Token(Token = "0x40006AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SECTR_ToolTip("The amount of time between tests to see if looping sounds should start or stop running.")]
	public Vector2 RetestInterval;

	[Token(Token = "0x40006AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SECTR_ToolTip("The amount of buffer to give before culling distant sounds.")]
	public float CullingBuffer;

	[Token(Token = "0x40006AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[SECTR_ToolTip("Enable or disable of the in-game audio HUD.", true)]
	public bool ShowAudioHUD;

	[Token(Token = "0x40006AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SECTR_ToolTip("Material to use to render HUD lines.", true)]
	public Material HUDLineMaterial;

	[Token(Token = "0x40006AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SECTR_ToolTip("In the editor only, puts the listener at the AudioSystem, not at the Scene Camera.", true)]
	public bool Debugging;

	[Token(Token = "0x17000085")]
	public static bool Initialized
	{
		[Token(Token = "0x6000519")]
		[Address(RVA = "0xB9EC38", Offset = "0xB9EC38", VA = "0xB9EC38")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000086")]
	public static SECTR_Member Member
	{
		[Token(Token = "0x600051A")]
		[Address(RVA = "0xB9EE40", Offset = "0xB9EE40", VA = "0xB9EE40")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000087")]
	public static SECTR_AudioSystem AudioSystem
	{
		[Token(Token = "0x600051B")]
		[Address(RVA = "0xB9EE88", Offset = "0xB9EE88", VA = "0xB9EE88")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000088")]
	public static Transform Listener
	{
		[Token(Token = "0x600051C")]
		[Address(RVA = "0xB9ECB0", Offset = "0xB9ECB0", VA = "0xB9ECB0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000089")]
	public static List<Instance> ActiveInstances
	{
		[Token(Token = "0x600051D")]
		[Address(RVA = "0xB9EED0", Offset = "0xB9EED0", VA = "0xB9EED0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600051E")]
	[Address(RVA = "0xB95E08", Offset = "0xB95E08", VA = "0xB95E08")]
	public static SECTR_AudioCueInstance Play(SECTR_AudioCue audioCue, Vector3 position, bool loop)
	{
		return default(SECTR_AudioCueInstance);
	}

	[Token(Token = "0x600051F")]
	[Address(RVA = "0xB9EF18", Offset = "0xB9EF18", VA = "0xB9EF18")]
	public static SECTR_AudioCueInstance Play(SECTR_AudioCue audioCue, Transform parent, Vector3 localPosition, bool loop)
	{
		return default(SECTR_AudioCueInstance);
	}

	[Token(Token = "0x6000520")]
	[Address(RVA = "0xB9FB1C", Offset = "0xB9FB1C", VA = "0xB9FB1C")]
	public static SECTR_AudioCueInstance Clone(SECTR_AudioCueInstance instance, Vector3 newPosition)
	{
		return default(SECTR_AudioCueInstance);
	}

	[Token(Token = "0x6000521")]
	[Address(RVA = "0xB9FE7C", Offset = "0xB9FE7C", VA = "0xB9FE7C")]
	public static void PlayMusic(SECTR_AudioCue musicCue)
	{
	}

	[Token(Token = "0x6000522")]
	[Address(RVA = "0xBA0050", Offset = "0xBA0050", VA = "0xBA0050")]
	public static void StopMusic(bool stopImmediate)
	{
	}

	[Token(Token = "0x6000523")]
	[Address(RVA = "0xB9E5B8", Offset = "0xB9E5B8", VA = "0xB9E5B8")]
	public static void PushAmbience(SECTR_AudioAmbience ambience)
	{
	}

	[Token(Token = "0x6000524")]
	[Address(RVA = "0xB9E6D0", Offset = "0xB9E6D0", VA = "0xB9E6D0")]
	public static void RemoveAmbience(SECTR_AudioAmbience ambience)
	{
	}

	[Token(Token = "0x6000525")]
	[Address(RVA = "0xBA00B8", Offset = "0xBA00B8", VA = "0xBA00B8")]
	public static void SetBusVolume(string busName, float volume)
	{
	}

	[Token(Token = "0x6000526")]
	[Address(RVA = "0xBA02D4", Offset = "0xBA02D4", VA = "0xBA02D4")]
	public static void SetBusVolume(SECTR_AudioBus bus, float volume)
	{
	}

	[Token(Token = "0x6000527")]
	[Address(RVA = "0xBA03A4", Offset = "0xBA03A4", VA = "0xBA03A4")]
	public static void MuteBus(string busName, bool mute)
	{
	}

	[Token(Token = "0x6000528")]
	[Address(RVA = "0xBA047C", Offset = "0xBA047C", VA = "0xBA047C")]
	public static void MuteBus(SECTR_AudioBus bus, bool mute)
	{
	}

	[Token(Token = "0x6000529")]
	[Address(RVA = "0xBA0544", Offset = "0xBA0544", VA = "0xBA0544")]
	public static void PauseBus(SECTR_AudioBus bus, bool paused)
	{
	}

	[Token(Token = "0x600052A")]
	[Address(RVA = "0xBA07F8", Offset = "0xBA07F8", VA = "0xBA07F8")]
	public static bool IsOccluded(Vector3 worldSpacePosition, OcclusionModes occlusionFlags)
	{
		return default(bool);
	}

	[Token(Token = "0x600052B")]
	[Address(RVA = "0xBA0AC0", Offset = "0xBA0AC0", VA = "0xBA0AC0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600052C")]
	[Address(RVA = "0xBA16B4", Offset = "0xBA16B4", VA = "0xBA16B4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600052D")]
	[Address(RVA = "0xBA1890", Offset = "0xBA1890", VA = "0xBA1890")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x600052E")]
	[Address(RVA = "0xB9F2A8", Offset = "0xB9F2A8", VA = "0xB9F2A8")]
	private static bool _CheckInstances(SECTR_AudioCue audioCue, bool isPlaying)
	{
		return default(bool);
	}

	[Token(Token = "0x600052F")]
	[Address(RVA = "0xB9F370", Offset = "0xB9F370", VA = "0xB9F370")]
	private static bool _CheckProximity(SECTR_AudioCue audioCue, Transform parent, Vector3 position, Instance testInstance)
	{
		return default(bool);
	}

	[Token(Token = "0x6000530")]
	[Address(RVA = "0xBA3178", Offset = "0xBA3178", VA = "0xBA3178")]
	private static double GetUnixTimeStamp()
	{
		return default(double);
	}

	[Token(Token = "0x6000531")]
	[Address(RVA = "0xBA1520", Offset = "0xBA1520", VA = "0xBA1520")]
	private static float _UpdateTime()
	{
		return default(float);
	}

	[Token(Token = "0x6000532")]
	[Address(RVA = "0xBA157C", Offset = "0xBA157C", VA = "0xBA157C")]
	private static void _UpdateBusPitchVolume(SECTR_AudioBus bus, float effectiveVolume, float effectivePitch)
	{
	}

	[Token(Token = "0x6000533")]
	[Address(RVA = "0xBA1B10", Offset = "0xBA1B10", VA = "0xBA1B10")]
	private static void _UpdateAmbience()
	{
	}

	[Token(Token = "0x6000534")]
	[Address(RVA = "0xBA01A0", Offset = "0xBA01A0", VA = "0xBA01A0")]
	private static SECTR_AudioBus _FindBus(SECTR_AudioBus bus, string busName)
	{
		return null;
	}

	[Token(Token = "0x6000535")]
	[Address(RVA = "0xBA351C", Offset = "0xBA351C", VA = "0xBA351C")]
	public SECTR_AudioSystem()
	{
	}
}
[Token(Token = "0x200013D")]
[AddComponentMenu("Procedural Worlds/SECTR/Audio/SECTR Character Audio")]
public class SECTR_CharacterAudio : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x200013E")]
	public class SurfaceSound
	{
		[Token(Token = "0x40006D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SECTR_ToolTip("The material that this set applies to.")]
		public PhysicMaterial SurfaceMaterial;

		[Token(Token = "0x40006DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SECTR_ToolTip("Default footstep sound. Used if no material specific sound exists.")]
		public SECTR_AudioCue FootstepCue;

		[Token(Token = "0x40006DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SECTR_ToolTip("Default footstep sound. Used if no material specific sound exists.")]
		public SECTR_AudioCue JumpCue;

		[Token(Token = "0x40006DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SECTR_ToolTip("Default landing sound. Used if no material specific sound exists.")]
		public SECTR_AudioCue LandCue;

		[Token(Token = "0x6000570")]
		[Address(RVA = "0xBA660C", Offset = "0xBA660C", VA = "0xBA660C")]
		public SurfaceSound()
		{
		}
	}

	[Token(Token = "0x40006D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Dictionary<PhysicMaterial, SurfaceSound> surfaceTable;

	[Token(Token = "0x40006D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SECTR_ToolTip("Default sounds to play if there is no material specific sound.")]
	public SurfaceSound DefaultSounds;

	[Token(Token = "0x40006D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SECTR_ToolTip("List of surface specific sounds.")]
	public List<SurfaceSound> SurfaceSounds;

	[Token(Token = "0x6000569")]
	[Address(RVA = "0xBA6264", Offset = "0xBA6264", VA = "0xBA6264")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600056A")]
	[Address(RVA = "0xBA63C4", Offset = "0xBA63C4", VA = "0xBA63C4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600056B")]
	[Address(RVA = "0xBA63CC", Offset = "0xBA63CC", VA = "0xBA63CC")]
	private void OnFootstep(PhysicMaterial currentMaterial)
	{
	}

	[Token(Token = "0x600056C")]
	[Address(RVA = "0xBA64C8", Offset = "0xBA64C8", VA = "0xBA64C8")]
	private void OnJump(PhysicMaterial currentMaterial)
	{
	}

	[Token(Token = "0x600056D")]
	[Address(RVA = "0xBA6514", Offset = "0xBA6514", VA = "0xBA6514")]
	private void OnLand(PhysicMaterial currentMaterial)
	{
	}

	[Token(Token = "0x600056E")]
	[Address(RVA = "0xBA6418", Offset = "0xBA6418", VA = "0xBA6418")]
	private SurfaceSound _GetCurrentSurface(PhysicMaterial currentMaterial)
	{
		return null;
	}

	[Token(Token = "0x600056F")]
	[Address(RVA = "0xBA6560", Offset = "0xBA6560", VA = "0xBA6560")]
	public SECTR_CharacterAudio()
	{
	}
}
[Token(Token = "0x200013F")]
[RequireComponent(typeof(AudioSource))]
[ExecuteInEditMode]
[AddComponentMenu("")]
public class SECTR_ComputeRMS : MonoBehaviour
{
	[Token(Token = "0x2000140")]
	private struct BakeInfo
	{
		[Token(Token = "0x40006E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SECTR_AudioCue cue;

		[Token(Token = "0x40006E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public SECTR_AudioCue.ClipData clipData;

		[Token(Token = "0x6000578")]
		[Address(RVA = "0xBA7204", Offset = "0xBA7204", VA = "0xBA7204")]
		public BakeInfo(SECTR_AudioCue cue, SECTR_AudioCue.ClipData clipData)
		{
		}
	}

	[Token(Token = "0x40006DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private List<BakeInfo> hdrBakeList;

	[Token(Token = "0x40006DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<SECTR_ComputeRMS> activeBakeList;

	[Token(Token = "0x40006DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int hdrBakeIndex;

	[Token(Token = "0x40006E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private SECTR_AudioCue cue;

	[Token(Token = "0x40006E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private SECTR_AudioCue.ClipData clipData;

	[Token(Token = "0x40006E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private List<float> samples;

	[Token(Token = "0x40006E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int numChannels;

	[Token(Token = "0x170000A3")]
	public float Progress
	{
		[Token(Token = "0x6000571")]
		[Address(RVA = "0xBA6614", Offset = "0xBA6614", VA = "0xBA6614")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x6000572")]
	[Address(RVA = "0xBA67EC", Offset = "0xBA67EC", VA = "0xBA67EC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000573")]
	[Address(RVA = "0xBA67F0", Offset = "0xBA67F0", VA = "0xBA67F0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000574")]
	[Address(RVA = "0xBA67F4", Offset = "0xBA67F4", VA = "0xBA67F4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000575")]
	[Address(RVA = "0xBA70DC", Offset = "0xBA70DC", VA = "0xBA70DC")]
	private void OnAudioFilterRead(float[] samples, int numChannels)
	{
	}

	[Token(Token = "0x6000576")]
	[Address(RVA = "0xBA6F68", Offset = "0xBA6F68", VA = "0xBA6F68")]
	public void _StartCompute(SECTR_AudioCue cue, SECTR_AudioCue.ClipData clipData)
	{
	}

	[Token(Token = "0x6000577")]
	[Address(RVA = "0xBA7144", Offset = "0xBA7144", VA = "0xBA7144")]
	public SECTR_ComputeRMS()
	{
	}
}
[Serializable]
[Token(Token = "0x2000141")]
public class SECTR_CueParam
{
	[Token(Token = "0x2000142")]
	public enum TargetType
	{
		[Token(Token = "0x40006ED")]
		Volume,
		[Token(Token = "0x40006EE")]
		Pitch,
		[Token(Token = "0x40006EF")]
		Attribute
	}

	[Serializable]
	[Token(Token = "0x2000143")]
	public class AttributeData
	{
		[Token(Token = "0x40006F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Type componentType;

		[Token(Token = "0x40006F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private string componentTypeString;

		[Token(Token = "0x40006F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string attributeName;

		[Token(Token = "0x40006F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool fieldAttribute;

		[Token(Token = "0x170000A4")]
		public Type ComponentType
		{
			[Token(Token = "0x600057B")]
			[Address(RVA = "0xBA7400", Offset = "0xBA7400", VA = "0xBA7400")]
			get
			{
				return null;
			}
			[Token(Token = "0x600057A")]
			[Address(RVA = "0xBA7370", Offset = "0xBA7370", VA = "0xBA7370")]
			set
			{
			}
		}

		[Token(Token = "0x600057C")]
		[Address(RVA = "0xBA74D4", Offset = "0xBA74D4", VA = "0xBA74D4")]
		public AttributeData()
		{
		}
	}

	[Token(Token = "0x40006E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string name;

	[Token(Token = "0x40006E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TargetType affects;

	[Token(Token = "0x40006E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float defaultValue;

	[Token(Token = "0x40006E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AnimationCurve curve;

	[Token(Token = "0x40006EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AttributeData attributeData;

	[Token(Token = "0x40006EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool toggle;

	[Token(Token = "0x6000579")]
	[Address(RVA = "0xBA720C", Offset = "0xBA720C", VA = "0xBA720C")]
	public SECTR_CueParam()
	{
	}
}
[Token(Token = "0x2000144")]
[AddComponentMenu("Procedural Worlds/SECTR/Audio/SECTR Door Audio")]
public class SECTR_DoorAudio : MonoBehaviour
{
	[Token(Token = "0x40006F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private SECTR_AudioCueInstance instance;

	[Token(Token = "0x40006F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SECTR_ToolTip("Sound to play while door is in Open state.", null, false)]
	public SECTR_AudioCue OpenLoopCue;

	[Token(Token = "0x40006F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SECTR_ToolTip("Sound to play while door is in Closed state.", null, false)]
	public SECTR_AudioCue ClosedLoopCue;

	[Token(Token = "0x40006F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SECTR_ToolTip("Sound to play when door starts to open.", null, false)]
	public SECTR_AudioCue OpeningCue;

	[Token(Token = "0x40006F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SECTR_ToolTip("Sound to play while door starts to close.", null, false)]
	public SECTR_AudioCue ClosingCue;

	[Token(Token = "0x40006F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SECTR_ToolTip("Sound to play while waiting for the door to start opening.", null, false)]
	public SECTR_AudioCue WaitingCue;

	[Token(Token = "0x600057D")]
	[Address(RVA = "0xBA74DC", Offset = "0xBA74DC", VA = "0xBA74DC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600057E")]
	[Address(RVA = "0xBA74FC", Offset = "0xBA74FC", VA = "0xBA74FC")]
	private void OnOpen()
	{
	}

	[Token(Token = "0x600057F")]
	[Address(RVA = "0xBA7590", Offset = "0xBA7590", VA = "0xBA7590")]
	private void OnOpening()
	{
	}

	[Token(Token = "0x6000580")]
	[Address(RVA = "0xBA7624", Offset = "0xBA7624", VA = "0xBA7624")]
	private void OnClose()
	{
	}

	[Token(Token = "0x6000581")]
	[Address(RVA = "0xBA76B8", Offset = "0xBA76B8", VA = "0xBA76B8")]
	private void OnClosing()
	{
	}

	[Token(Token = "0x6000582")]
	[Address(RVA = "0xBA774C", Offset = "0xBA774C", VA = "0xBA774C")]
	private void OnWaiting()
	{
	}

	[Token(Token = "0x6000583")]
	[Address(RVA = "0xBA74EC", Offset = "0xBA74EC", VA = "0xBA74EC")]
	private void _Stop(bool stopImmediately)
	{
	}

	[Token(Token = "0x6000584")]
	[Address(RVA = "0xBA77E0", Offset = "0xBA77E0", VA = "0xBA77E0")]
	public SECTR_DoorAudio()
	{
	}
}
[Token(Token = "0x2000145")]
[AddComponentMenu("Procedural Worlds/SECTR/Audio/SECTR Impact Audio")]
[ExecuteInEditMode]
public class SECTR_ImpactAudio : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000146")]
	public class ImpactSound
	{
		[Token(Token = "0x4000700")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PhysicMaterial SurfaceMaterial;

		[Token(Token = "0x4000701")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SECTR_AudioCue ImpactCue;

		[Token(Token = "0x6000589")]
		[Address(RVA = "0xBA7B84", Offset = "0xBA7B84", VA = "0xBA7B84")]
		public ImpactSound()
		{
		}
	}

	[Token(Token = "0x40006FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float nextImpactTime;

	[Token(Token = "0x40006FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Dictionary<PhysicMaterial, ImpactSound> surfaceTable;

	[Token(Token = "0x40006FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SECTR_ToolTip("Default sound to play on impact.")]
	public ImpactSound DefaultSound;

	[Token(Token = "0x40006FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SECTR_ToolTip("Surface specific impact sounds.")]
	public List<ImpactSound> SurfaceImpacts;

	[Token(Token = "0x40006FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SECTR_ToolTip("The minimum relative speed at the time of impact required to trigger this cue.")]
	public float MinImpactSpeed;

	[Token(Token = "0x40006FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SECTR_ToolTip("The minimum amount of time between playback of this sound.")]
	public float MinImpactInterval;

	[Token(Token = "0x6000585")]
	[Address(RVA = "0xBA77E8", Offset = "0xBA77E8", VA = "0xBA77E8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000586")]
	[Address(RVA = "0xBA7948", Offset = "0xBA7948", VA = "0xBA7948")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000587")]
	[Address(RVA = "0xBA7950", Offset = "0xBA7950", VA = "0xBA7950")]
	private void OnCollisionStay(Collision collision)
	{
	}

	[Token(Token = "0x6000588")]
	[Address(RVA = "0xBA7AFC", Offset = "0xBA7AFC", VA = "0xBA7AFC")]
	public SECTR_ImpactAudio()
	{
	}
}
[Token(Token = "0x2000147")]
[AddComponentMenu("Procedural Worlds/SECTR/Audio/SECTR Music Trigger")]
[ExecuteInEditMode]
public class SECTR_MusicTrigger : MonoBehaviour
{
	[Token(Token = "0x4000702")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private GameObject activator;

	[Token(Token = "0x4000703")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SECTR_ToolTip("The Cue to play as music. If null, this trigger will stop the current music.", null, false)]
	public SECTR_AudioCue Cue;

	[Token(Token = "0x4000704")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SECTR_ToolTip("Should music be forced to loop when playing.")]
	public bool Loop;

	[Token(Token = "0x4000705")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	[SECTR_ToolTip("Should the music stop when leaving the trigger.")]
	public bool StopOnExit;

	[Token(Token = "0x600058A")]
	[Address(RVA = "0xBA7B8C", Offset = "0xBA7B8C", VA = "0xBA7B8C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600058B")]
	[Address(RVA = "0xBA7C7C", Offset = "0xBA7C7C", VA = "0xBA7C7C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600058C")]
	[Address(RVA = "0xBA7CA0", Offset = "0xBA7CA0", VA = "0xBA7CA0")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600058D")]
	[Address(RVA = "0xBA7D70", Offset = "0xBA7D70", VA = "0xBA7D70")]
	private void OnTriggerEnter2D(Collider2D other)
	{
	}

	[Token(Token = "0x600058E")]
	[Address(RVA = "0xBA7E40", Offset = "0xBA7E40", VA = "0xBA7E40")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x600058F")]
	[Address(RVA = "0xBA7EC4", Offset = "0xBA7EC4", VA = "0xBA7EC4")]
	private void OnTriggerExit2D(Collider2D other)
	{
	}

	[Token(Token = "0x6000590")]
	[Address(RVA = "0xBA7C00", Offset = "0xBA7C00", VA = "0xBA7C00")]
	private void _Play()
	{
	}

	[Token(Token = "0x6000591")]
	[Address(RVA = "0xBA7C94", Offset = "0xBA7C94", VA = "0xBA7C94")]
	private void _Stop(bool stopImmediately)
	{
	}

	[Token(Token = "0x6000592")]
	[Address(RVA = "0xBA7F64", Offset = "0xBA7F64", VA = "0xBA7F64")]
	public SECTR_MusicTrigger()
	{
	}
}
[Token(Token = "0x2000148")]
[AddComponentMenu("Procedural Worlds/SECTR/Audio/SECTR Point Source")]
[ExecuteInEditMode]
public class SECTR_PointSource : SECTR_AudioSource
{
	[Token(Token = "0x4000706")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected SECTR_AudioCueInstance instance;

	[Token(Token = "0x170000A5")]
	public override bool IsPlaying
	{
		[Token(Token = "0x6000593")]
		[Address(RVA = "0xBA7F74", Offset = "0xBA7F74", VA = "0xBA7F74", Slot = "4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000594")]
	[Address(RVA = "0xBA7F84", Offset = "0xBA7F84", VA = "0xBA7F84", Slot = "5")]
	public override void Play()
	{
	}

	[Token(Token = "0x6000595")]
	[Address(RVA = "0xBA80F0", Offset = "0xBA80F0", VA = "0xBA80F0", Slot = "6")]
	public override void Stop(bool stopImmediately)
	{
	}

	[Token(Token = "0x6000596")]
	[Address(RVA = "0xBA8100", Offset = "0xBA8100", VA = "0xBA8100", Slot = "8")]
	protected override void OnVolumePitchChanged()
	{
	}

	[Token(Token = "0x6000597")]
	[Address(RVA = "0xBA8158", Offset = "0xBA8158", VA = "0xBA8158")]
	public SECTR_PointSource()
	{
	}
}
[Token(Token = "0x2000149")]
[AddComponentMenu("Procedural Worlds/SECTR/Audio/SECTR Propagation Source")]
[ExecuteInEditMode]
[RequireComponent(typeof(SECTR_Member))]
public class SECTR_PropagationSource : SECTR_AudioSource
{
	[Token(Token = "0x200014A")]
	private class PathSound
	{
		[Token(Token = "0x400070E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public SECTR_AudioCueInstance instance;

		[Token(Token = "0x400070F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SECTR_Portal firstPortal;

		[Token(Token = "0x4000710")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public SECTR_Portal secondPortal;

		[Token(Token = "0x4000711")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float firstDistance;

		[Token(Token = "0x4000712")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float secondDistance;

		[Token(Token = "0x4000713")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float distance;

		[Token(Token = "0x4000714")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector3 position;

		[Token(Token = "0x4000715")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector3 lastListenerPosition;

		[Token(Token = "0x4000716")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float weight;

		[Token(Token = "0x4000717")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool occluded;

		[Token(Token = "0x60005A1")]
		[Address(RVA = "0xBA9B2C", Offset = "0xBA9B2C", VA = "0xBA9B2C")]
		public PathSound()
		{
		}
	}

	[Token(Token = "0x4000707")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private SECTR_Member cachedMember;

	[Token(Token = "0x4000708")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private List<SECTR_Graph.Node> path;

	[Token(Token = "0x4000709")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private List<PathSound> activeSounds;

	[Token(Token = "0x400070A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float directDistanceToListener;

	[Token(Token = "0x400070B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private bool playing;

	[Token(Token = "0x400070C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
	private bool played;

	[Token(Token = "0x400070D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SECTR_ToolTip("When the listener gets within this distance of a portal, the sound direction will start to blend towards the next portal or source position.", 0f, -1f)]
	public float InterpDistance;

	[Token(Token = "0x170000A6")]
	public override bool IsPlaying
	{
		[Token(Token = "0x6000598")]
		[Address(RVA = "0xBA8160", Offset = "0xBA8160", VA = "0xBA8160", Slot = "4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000599")]
	[Address(RVA = "0xBA81C0", Offset = "0xBA81C0", VA = "0xBA81C0", Slot = "5")]
	public override void Play()
	{
	}

	[Token(Token = "0x600059A")]
	[Address(RVA = "0xBA81CC", Offset = "0xBA81CC", VA = "0xBA81CC", Slot = "6")]
	public override void Stop(bool stopImmediately)
	{
	}

	[Token(Token = "0x600059B")]
	[Address(RVA = "0xBA82A4", Offset = "0xBA82A4", VA = "0xBA82A4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600059C")]
	[Address(RVA = "0xBA82F4", Offset = "0xBA82F4", VA = "0xBA82F4", Slot = "7")]
	protected override void OnDisable()
	{
	}

	[Token(Token = "0x600059D")]
	[Address(RVA = "0xBA8310", Offset = "0xBA8310", VA = "0xBA8310")]
	private void Update()
	{
	}

	[Token(Token = "0x600059E")]
	[Address(RVA = "0xBA9DCC", Offset = "0xBA9DCC", VA = "0xBA9DCC", Slot = "8")]
	protected override void OnVolumePitchChanged()
	{
	}

	[Token(Token = "0x600059F")]
	[Address(RVA = "0xBA9BB0", Offset = "0xBA9BB0", VA = "0xBA9BB0")]
	private void _ComputeSoundSpatialization(Vector3 listenerPosition, float distanceToListener, PathSound pathSound)
	{
	}

	[Token(Token = "0x60005A0")]
	[Address(RVA = "0xBA9FA4", Offset = "0xBA9FA4", VA = "0xBA9FA4")]
	public SECTR_PropagationSource()
	{
	}
}
[Token(Token = "0x200014B")]
[AddComponentMenu("Procedural Worlds/SECTR/Audio/SECTR Region Source")]
[ExecuteInEditMode]
public class SECTR_RegionSource : SECTR_PointSource
{
	[Token(Token = "0x4000718")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SECTR_ToolTip("Determine the closest point by raycast instead of bounding box. More accurate but more expensive.")]
	public bool Raycast;

	[Token(Token = "0x60005A2")]
	[Address(RVA = "0xBAA074", Offset = "0xBAA074", VA = "0xBAA074")]
	private void Update()
	{
	}

	[Token(Token = "0x60005A3")]
	[Address(RVA = "0xBAA33C", Offset = "0xBAA33C", VA = "0xBAA33C")]
	public SECTR_RegionSource()
	{
	}
}
[Token(Token = "0x200014C")]
[AddComponentMenu("Procedural Worlds/SECTR/Audio/SECTR Spline Source")]
[ExecuteInEditMode]
public class SECTR_SplineSource : SECTR_PointSource
{
	[Token(Token = "0x200014D")]
	private class SplineNode
	{
		[Token(Token = "0x400071E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 Point;

		[Token(Token = "0x400071F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Quaternion Rot;

		[Token(Token = "0x4000720")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float T;

		[Token(Token = "0x4000721")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector2 EaseIO;

		[Token(Token = "0x60005AE")]
		[Address(RVA = "0xBAB20C", Offset = "0xBAB20C", VA = "0xBAB20C")]
		public SplineNode(Vector3 p, Quaternion q, float t, Vector2 io)
		{
		}

		[Token(Token = "0x60005AF")]
		[Address(RVA = "0xBAB28C", Offset = "0xBAB28C", VA = "0xBAB28C")]
		public SplineNode(SplineNode o)
		{
		}
	}

	[Token(Token = "0x4000719")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private List<SplineNode> nodes;

	[Token(Token = "0x400071A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SECTR_ToolTip("Array of scene objects to use as control points for the spline")]
	public List<Transform> SplinePoints;

	[Token(Token = "0x400071B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SECTR_ToolTip("Determines if the spline is open or closed (i.e. a loop).")]
	public bool Closed;

	[Token(Token = "0x400071C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
	[SECTR_ToolTip("Determines if the audio source is allowed to leave the spline during interpolation.")]
	public bool AllowShortcuts;

	[Token(Token = "0x400071D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[SECTR_ToolTip("The maximum speed at which to interpolate the sound in space.", 0f, -1f)]
	public float MaxInterpSpeed;

	[Token(Token = "0x60005A4")]
	[Address(RVA = "0xBAA344", Offset = "0xBAA344", VA = "0xBAA344", Slot = "5")]
	public override void Play()
	{
	}

	[Token(Token = "0x60005A5")]
	[Address(RVA = "0xBAA628", Offset = "0xBAA628", VA = "0xBAA628")]
	private void Awake()
	{
	}

	[Token(Token = "0x60005A6")]
	[Address(RVA = "0xBAAFD0", Offset = "0xBAAFD0", VA = "0xBAAFD0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60005A7")]
	[Address(RVA = "0xBAAFD4", Offset = "0xBAAFD4", VA = "0xBAAFD4", Slot = "7")]
	protected override void OnDisable()
	{
	}

	[Token(Token = "0x60005A8")]
	[Address(RVA = "0xBAAFDC", Offset = "0xBAAFDC", VA = "0xBAAFDC")]
	private void Update()
	{
	}

	[Token(Token = "0x60005A9")]
	[Address(RVA = "0xBAA62C", Offset = "0xBAA62C", VA = "0xBAA62C")]
	private void _SetupSpline()
	{
	}

	[Token(Token = "0x60005AA")]
	[Address(RVA = "0xBAA3AC", Offset = "0xBAA3AC", VA = "0xBAA3AC")]
	private Vector3 _GetClosestPointOnSpline(Vector3 point)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60005AB")]
	[Address(RVA = "0xBAB2E0", Offset = "0xBAB2E0", VA = "0xBAB2E0")]
	private Vector3 _GetHermiteAtT(float timeParam)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60005AC")]
	[Address(RVA = "0xBAB5E0", Offset = "0xBAB5E0", VA = "0xBAB5E0")]
	private float _Ease(float t, float k1, float k2)
	{
		return default(float);
	}

	[Token(Token = "0x60005AD")]
	[Address(RVA = "0xBAB6B8", Offset = "0xBAB6B8", VA = "0xBAB6B8")]
	public SECTR_SplineSource()
	{
	}
}
[Token(Token = "0x200014E")]
[AddComponentMenu("Procedural Worlds/SECTR/Audio/SECTR Start Music")]
public class SECTR_StartMusic : MonoBehaviour
{
	[Token(Token = "0x4000722")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SECTR_ToolTip("The music to play on Start.")]
	public SECTR_AudioCue Cue;

	[Token(Token = "0x60005B0")]
	[Address(RVA = "0xBAB78C", Offset = "0xBAB78C", VA = "0xBAB78C")]
	private void Start()
	{
	}

	[Token(Token = "0x60005B1")]
	[Address(RVA = "0xBAB7F0", Offset = "0xBAB7F0", VA = "0xBAB7F0")]
	public SECTR_StartMusic()
	{
	}
}
[Token(Token = "0x200014F")]
[ExecuteInEditMode]
[AddComponentMenu("Procedural Worlds/SECTR/Audio/SECTR Trigger Source")]
public class SECTR_TriggerSource : SECTR_PointSource
{
	[Token(Token = "0x4000723")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private GameObject activator;

	[Token(Token = "0x60005B2")]
	[Address(RVA = "0xBAB7F8", Offset = "0xBAB7F8", VA = "0xBAB7F8")]
	public SECTR_TriggerSource()
	{
	}

	[Token(Token = "0x60005B3")]
	[Address(RVA = "0xBAB814", Offset = "0xBAB814", VA = "0xBAB814")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60005B4")]
	[Address(RVA = "0xBAB8A4", Offset = "0xBAB8A4", VA = "0xBAB8A4")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60005B5")]
	[Address(RVA = "0xBAB940", Offset = "0xBAB940", VA = "0xBAB940")]
	private void OnTriggerEnter2D(Collider2D other)
	{
	}

	[Token(Token = "0x60005B6")]
	[Address(RVA = "0xBAB9DC", Offset = "0xBAB9DC", VA = "0xBAB9DC")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x60005B7")]
	[Address(RVA = "0xBABA84", Offset = "0xBABA84", VA = "0xBABA84")]
	private void OnTriggerExit2D(Collider2D other)
	{
	}
}
[Token(Token = "0x2000150")]
public static class SECTR_Constants
{
	[Token(Token = "0x2000151")]
	public enum ReparentingMode
	{
		[Token(Token = "0x400072D")]
		Bounds,
		[Token(Token = "0x400072E")]
		Position
	}

	[Token(Token = "0x4000724")]
	public const string MAJOR_VERSION = "1";

	[Token(Token = "0x4000725")]
	public const string MINOR_VERSION = "4.0";

	[Token(Token = "0x4000726")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static readonly Color UI_SEPARATOR_LINE_COLOR;

	[Token(Token = "0x4000727")]
	public const string GAIA_SPAWN_GROUP = "Gaia_Spawns";

	[Token(Token = "0x4000728")]
	public const string PATH_AudioHUDGraphMaterial = "Scripts/Audio/Assets/AudioHUD_Graph.mat";

	[Token(Token = "0x4000729")]
	public const string PATH_VisGizmoMaterial = "Scripts/Vis/Assets/FrustumDebug.mat";

	[Token(Token = "0x400072A")]
	public const string PATH_AudioIcons = "Scripts/Audio/Editor/Icons/";

	[Token(Token = "0x400072B")]
	public const string GX_ABOUT = "\nSECTR is a suite of modules for Unity that allows you to build the best looking, sounding, and most efficient games possible, all by taking advantage of the structure already present in your game world. If you want to stream an open world, bring a huge game to mobile, or take advantage of the latest techniques in audio occlusion and propagation, SECTR is your solution.\n\nMain Features\n - SECTR CORE: Sector Creation Kit\n - SECTR AUDIO: Immersive Spatial Audio\n - SECTR STREAM: Seamless Scene Streaming\n - SECTR VIS: Dynamic Occlusion Culling\n\n - SECTR COMPLETE: Contains all the packages\n";
}
[Token(Token = "0x2000152")]
[RequireComponent(typeof(Animator))]
[AddComponentMenu("Procedural Worlds/SECTR/Audio/SECTR Door")]
public class SECTR_Door : MonoBehaviour
{
	[Token(Token = "0x400072F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int controlParam;

	[Token(Token = "0x4000730")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private int canOpenParam;

	[Token(Token = "0x4000731")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int closedState;

	[Token(Token = "0x4000732")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private int waitingState;

	[Token(Token = "0x4000733")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int openingState;

	[Token(Token = "0x4000734")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private int openState;

	[Token(Token = "0x4000735")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int closingState;

	[Token(Token = "0x4000736")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private int lastState;

	[Token(Token = "0x4000737")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Animator cachedAnimator;

	[Token(Token = "0x4000738")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int openCount;

	[Token(Token = "0x4000739")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SECTR_ToolTip("The portal this door affects (if any).")]
	public SECTR_Portal Portal;

	[Token(Token = "0x400073A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SECTR_ToolTip("The name of the control param in the door.")]
	public string ControlParam;

	[Token(Token = "0x400073B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SECTR_ToolTip("The name of the control param that indicates if we are allowed to open.")]
	public string CanOpenParam;

	[Token(Token = "0x400073C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SECTR_ToolTip("The full name (layer and state) of the Open state in the Animation Controller.")]
	public string OpenState;

	[Token(Token = "0x400073D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SECTR_ToolTip("The full name (layer and state) of the Closed state in the Animation Controller.")]
	public string ClosedState;

	[Token(Token = "0x400073E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SECTR_ToolTip("The full name (layer and state) of the Opening state in the Animation Controller.")]
	public string OpeningState;

	[Token(Token = "0x400073F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SECTR_ToolTip("The full name (layer and state) of the Closing state in the Animation Controller.")]
	public string ClosingState;

	[Token(Token = "0x4000740")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SECTR_ToolTip("The full name (layer and state) of the Wating state in the Animation Controller.")]
	public string WaitingState;

	[Token(Token = "0x60005B9")]
	[Address(RVA = "0xBABB7C", Offset = "0xBABB7C", VA = "0xBABB7C")]
	public void OpenDoor()
	{
	}

	[Token(Token = "0x60005BA")]
	[Address(RVA = "0xBABB8C", Offset = "0xBABB8C", VA = "0xBABB8C")]
	public void CloseDoor()
	{
	}

	[Token(Token = "0x60005BB")]
	[Address(RVA = "0xBABB9C", Offset = "0xBABB9C", VA = "0xBABB9C")]
	public bool IsFullyOpen()
	{
		return default(bool);
	}

	[Token(Token = "0x60005BC")]
	[Address(RVA = "0xBABC08", Offset = "0xBABC08", VA = "0xBABC08")]
	public bool IsClosed()
	{
		return default(bool);
	}

	[Token(Token = "0x60005BD")]
	[Address(RVA = "0xBABC74", Offset = "0xBABC74", VA = "0xBABC74", Slot = "4")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x60005BE")]
	[Address(RVA = "0xBABD50", Offset = "0xBABD50", VA = "0xBABD50")]
	private void Start()
	{
	}

	[Token(Token = "0x60005BF")]
	[Address(RVA = "0xBABE50", Offset = "0xBABE50", VA = "0xBABE50")]
	private void Update()
	{
	}

	[Token(Token = "0x60005C0")]
	[Address(RVA = "0xBAC090", Offset = "0xBAC090", VA = "0xBAC090", Slot = "5")]
	protected virtual void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60005C1")]
	[Address(RVA = "0xBAC0A0", Offset = "0xBAC0A0", VA = "0xBAC0A0", Slot = "6")]
	protected virtual void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x60005C2")]
	[Address(RVA = "0xBAC0B0", Offset = "0xBAC0B0", VA = "0xBAC0B0", Slot = "7")]
	protected virtual bool CanOpen()
	{
		return default(bool);
	}

	[Token(Token = "0x60005C3")]
	[Address(RVA = "0xBAC0B8", Offset = "0xBAC0B8", VA = "0xBAC0B8")]
	public SECTR_Door()
	{
	}
}
[Token(Token = "0x2000153")]
public class SECTR_FloatingPointFix : MonoBehaviour
{
	[Token(Token = "0x4000741")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static SECTR_FloatingPointFix instance;

	[Token(Token = "0x4000742")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private List<SECTR_FloatingPointFixMember> allMembers;

	[Token(Token = "0x4000743")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<ParticleSystem> allWorldSpaceParticleSystems;

	[Token(Token = "0x4000744")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ParticleSystem.Particle[] currentParticles;

	[Token(Token = "0x4000745")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float threshold;

	[Token(Token = "0x4000746")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public Vector3 totalOffset;

	[Token(Token = "0x170000A7")]
	public static SECTR_FloatingPointFix Instance
	{
		[Token(Token = "0x60005C4")]
		[Address(RVA = "0xBAC1C8", Offset = "0xBAC1C8", VA = "0xBAC1C8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000A8")]
	public static bool IsActive
	{
		[Token(Token = "0x60005C5")]
		[Address(RVA = "0xBAC3B0", Offset = "0xBAC3B0", VA = "0xBAC3B0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60005C6")]
	[Address(RVA = "0xBAC534", Offset = "0xBAC534", VA = "0xBAC534")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60005C7")]
	[Address(RVA = "0xBAC6A4", Offset = "0xBAC6A4", VA = "0xBAC6A4")]
	public void AddMember(SECTR_FloatingPointFixMember member)
	{
	}

	[Token(Token = "0x60005C8")]
	[Address(RVA = "0xBAC778", Offset = "0xBAC778", VA = "0xBAC778")]
	public void RemoveMember(SECTR_FloatingPointFixMember member)
	{
	}

	[Token(Token = "0x60005C9")]
	[Address(RVA = "0xBAC808", Offset = "0xBAC808", VA = "0xBAC808")]
	public void AddWorldSpaceParticleSystem(ParticleSystem ps)
	{
	}

	[Token(Token = "0x60005CA")]
	[Address(RVA = "0xBAC8DC", Offset = "0xBAC8DC", VA = "0xBAC8DC")]
	public void RemoveWorldSpaceParticleSystem(ParticleSystem ps)
	{
	}

	[Token(Token = "0x60005CB")]
	[Address(RVA = "0xBAC96C", Offset = "0xBAC96C", VA = "0xBAC96C")]
	public Vector3 ConvertToOriginalSpace(Vector3 position)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60005CC")]
	[Address(RVA = "0xBAC984", Offset = "0xBAC984", VA = "0xBAC984")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60005CD")]
	[Address(RVA = "0xBAD07C", Offset = "0xBAD07C", VA = "0xBAD07C")]
	public SECTR_FloatingPointFix()
	{
	}
}
[Token(Token = "0x2000154")]
public class SECTR_FloatingPointFixMember : MonoBehaviour
{
	[Token(Token = "0x60005CE")]
	[Address(RVA = "0xBAD184", Offset = "0xBAD184", VA = "0xBAD184")]
	protected void OnEnable()
	{
	}

	[Token(Token = "0x60005CF")]
	[Address(RVA = "0xBAD1A4", Offset = "0xBAD1A4", VA = "0xBAD1A4")]
	protected void OnDestroy()
	{
	}

	[Token(Token = "0x60005D0")]
	[Address(RVA = "0xBAD1D4", Offset = "0xBAD1D4", VA = "0xBAD1D4")]
	private void Start()
	{
	}

	[Token(Token = "0x60005D1")]
	[Address(RVA = "0xBAD1D8", Offset = "0xBAD1D8", VA = "0xBAD1D8")]
	private void Update()
	{
	}

	[Token(Token = "0x60005D2")]
	[Address(RVA = "0xBAD1DC", Offset = "0xBAD1DC", VA = "0xBAD1DC")]
	public SECTR_FloatingPointFixMember()
	{
	}
}
[Token(Token = "0x2000155")]
[RequireComponent(typeof(ParticleSystem))]
public class SECTR_FloatingPointFixParticleSystem : SECTR_FloatingPointFixMember
{
	[Token(Token = "0x60005D3")]
	[Address(RVA = "0xBAD1E4", Offset = "0xBAD1E4", VA = "0xBAD1E4")]
	protected new void OnEnable()
	{
	}

	[Token(Token = "0x60005D4")]
	[Address(RVA = "0xBAD2B4", Offset = "0xBAD2B4", VA = "0xBAD2B4")]
	protected new void OnDestroy()
	{
	}

	[Token(Token = "0x60005D5")]
	[Address(RVA = "0xBAD360", Offset = "0xBAD360", VA = "0xBAD360")]
	private void Start()
	{
	}

	[Token(Token = "0x60005D6")]
	[Address(RVA = "0xBAD364", Offset = "0xBAD364", VA = "0xBAD364")]
	private void Update()
	{
	}

	[Token(Token = "0x60005D7")]
	[Address(RVA = "0xBAD368", Offset = "0xBAD368", VA = "0xBAD368")]
	public SECTR_FloatingPointFixParticleSystem()
	{
	}
}
[Token(Token = "0x2000156")]
public static class SECTR_Geometry
{
	[Token(Token = "0x4000747")]
	public const float kVERTEX_EPSILON = 0.001f;

	[Token(Token = "0x4000748")]
	public const float kBOUNDS_CHEAT = 0.01f;

	[Token(Token = "0x60005D8")]
	[Address(RVA = "0xBAD370", Offset = "0xBAD370", VA = "0xBAD370")]
	public static Bounds ComputeBounds(Light light)
	{
		return default(Bounds);
	}

	[Token(Token = "0x60005D9")]
	[Address(RVA = "0xBAD6D4", Offset = "0xBAD6D4", VA = "0xBAD6D4")]
	public static Bounds ComputeBounds(Terrain terrain)
	{
		return default(Bounds);
	}

	[Token(Token = "0x60005DA")]
	[Address(RVA = "0xBAD860", Offset = "0xBAD860", VA = "0xBAD860")]
	public static bool FrustumIntersectsBounds(Bounds bounds, List<Plane> frustum, int inMask, out int outMask)
	{
		return default(bool);
	}

	[Token(Token = "0x60005DB")]
	[Address(RVA = "0xBADA28", Offset = "0xBADA28", VA = "0xBADA28")]
	public static bool FrustumContainsBounds(Bounds bounds, List<Plane> frustum)
	{
		return default(bool);
	}

	[Token(Token = "0x60005DC")]
	[Address(RVA = "0xBADBD4", Offset = "0xBADBD4", VA = "0xBADBD4")]
	public static bool BoundsContainsBounds(Bounds container, Bounds contained)
	{
		return default(bool);
	}

	[Token(Token = "0x60005DD")]
	[Address(RVA = "0xBADC30", Offset = "0xBADC30", VA = "0xBADC30")]
	public static bool BoundsIntersectsSphere(Bounds bounds, Vector3 sphereCenter, float sphereRadius)
	{
		return default(bool);
	}

	[Token(Token = "0x60005DE")]
	[Address(RVA = "0xBADCE0", Offset = "0xBADCE0", VA = "0xBADCE0")]
	public static Bounds ProjectBounds(Bounds bounds, Vector3 projection)
	{
		return default(Bounds);
	}

	[Token(Token = "0x60005DF")]
	[Address(RVA = "0xBADD8C", Offset = "0xBADD8C", VA = "0xBADD8C")]
	public static bool IsPointInFrontOfPlane(Vector3 position, Vector3 center, Vector3 normal)
	{
		return default(bool);
	}

	[Token(Token = "0x60005E0")]
	[Address(RVA = "0xBADEA0", Offset = "0xBADEA0", VA = "0xBADEA0")]
	public static bool IsPolygonConvex(Vector3[] verts)
	{
		return default(bool);
	}

	[Token(Token = "0x60005E1")]
	[Address(RVA = "0xBAE16C", Offset = "0xBAE16C", VA = "0xBAE16C")]
	public static int CompareVectorsCW(Vector3 a, Vector3 b, Vector3 centroid, Vector3 normal)
	{
		return default(int);
	}
}
[Token(Token = "0x2000157")]
public static class SECTR_Graph
{
	[Token(Token = "0x2000158")]
	public class Node : IComparable<Node>
	{
		[Token(Token = "0x400074D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public SECTR_Portal Portal;

		[Token(Token = "0x400074E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SECTR_Sector Sector;

		[Token(Token = "0x400074F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float CostPlusEstimate;

		[Token(Token = "0x4000750")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float Cost;

		[Token(Token = "0x4000751")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int Depth;

		[Token(Token = "0x4000752")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool ForwardTraversal;

		[Token(Token = "0x4000753")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Node Parent;

		[Token(Token = "0x60005E7")]
		[Address(RVA = "0xBAFB68", Offset = "0xBAFB68", VA = "0xBAFB68", Slot = "4")]
		public int CompareTo(Node other)
		{
			return default(int);
		}

		[Token(Token = "0x60005E8")]
		[Address(RVA = "0xBAF088", Offset = "0xBAF088", VA = "0xBAF088")]
		public static void ReconstructPath(List<Node> path, Node currentNode)
		{
		}

		[Token(Token = "0x60005E9")]
		[Address(RVA = "0xBAE7F4", Offset = "0xBAE7F4", VA = "0xBAE7F4")]
		public Node()
		{
		}
	}

	[Token(Token = "0x4000749")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static List<SECTR_Sector> initialSectors;

	[Token(Token = "0x400074A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static List<SECTR_Sector> goalSectors;

	[Token(Token = "0x400074B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static SECTR_PriorityQueue<Node> openSet;

	[Token(Token = "0x400074C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static Dictionary<SECTR_Portal, Node> closedSet;

	[Token(Token = "0x60005E2")]
	[Address(RVA = "0xBAE278", Offset = "0xBAE278", VA = "0xBAE278")]
	public static void DepthWalk(ref List<Node> nodes, SECTR_Sector root, SECTR_Portal.PortalFlags stopFlags, int maxDepth)
	{
	}

	[Token(Token = "0x60005E3")]
	[Address(RVA = "0xBAE91C", Offset = "0xBAE91C", VA = "0xBAE91C")]
	public static void BreadthWalk(ref List<Node> nodes, SECTR_Sector root, SECTR_Portal.PortalFlags stopFlags, int maxDepth)
	{
	}

	[Token(Token = "0x60005E4")]
	[Address(RVA = "0xBA9068", Offset = "0xBA9068", VA = "0xBA9068")]
	public static void FindShortestPath(ref List<Node> path, Vector3 start, Vector3 goal, SECTR_Portal.PortalFlags stopFlags)
	{
	}

	[Token(Token = "0x60005E5")]
	[Address(RVA = "0xBAF0F8", Offset = "0xBAF0F8", VA = "0xBAF0F8")]
	public static string GetGraphAsDot(string graphName)
	{
		return null;
	}
}
[Token(Token = "0x2000159")]
public abstract class SECTR_Hull : MonoBehaviour
{
	[Token(Token = "0x4000754")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Mesh previousMesh;

	[Token(Token = "0x4000755")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Vector3[] vertsCW;

	[Token(Token = "0x4000756")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector3 meshCentroid;

	[Token(Token = "0x4000757")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	protected Vector3 meshNormal;

	[Token(Token = "0x4000758")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SECTR_ToolTip("Convex, planar mesh that defines the portal shape.")]
	public Mesh HullMesh;

	[Token(Token = "0x170000A9")]
	public Vector3[] VertsCW
	{
		[Token(Token = "0x60005EA")]
		[Address(RVA = "0xBAFB98", Offset = "0xBAFB98", VA = "0xBAFB98")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000AA")]
	public Vector3 Normal
	{
		[Token(Token = "0x60005EB")]
		[Address(RVA = "0xBB0210", Offset = "0xBB0210", VA = "0xBB0210")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x170000AB")]
	public Vector3 ReverseNormal
	{
		[Token(Token = "0x60005EC")]
		[Address(RVA = "0xBB024C", Offset = "0xBB024C", VA = "0xBB024C")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x170000AC")]
	public Vector3 Center
	{
		[Token(Token = "0x60005ED")]
		[Address(RVA = "0xBA9B3C", Offset = "0xBA9B3C", VA = "0xBA9B3C")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x170000AD")]
	public Plane HullPlane
	{
		[Token(Token = "0x60005EE")]
		[Address(RVA = "0xBB0294", Offset = "0xBB0294", VA = "0xBB0294")]
		get
		{
			return default(Plane);
		}
	}

	[Token(Token = "0x170000AE")]
	public Plane ReverseHullPlane
	{
		[Token(Token = "0x60005EF")]
		[Address(RVA = "0xBB030C", Offset = "0xBB030C", VA = "0xBB030C")]
		get
		{
			return default(Plane);
		}
	}

	[Token(Token = "0x170000AF")]
	public Bounds BoundingBox
	{
		[Token(Token = "0x60005F0")]
		[Address(RVA = "0xBA9DD0", Offset = "0xBA9DD0", VA = "0xBA9DD0")]
		get
		{
			return default(Bounds);
		}
	}

	[Token(Token = "0x60005F1")]
	[Address(RVA = "0xBB0384", Offset = "0xBB0384", VA = "0xBB0384")]
	public bool IsPointInHull(Vector3 p, float distanceTolerance)
	{
		return default(bool);
	}

	[Token(Token = "0x60005F2")]
	[Address(RVA = "0xBAFBB0", Offset = "0xBAFBB0", VA = "0xBAFBB0")]
	protected void ComputeVerts()
	{
	}

	[Token(Token = "0x60005F3")]
	[Address(RVA = "0xBB0678", Offset = "0xBB0678", VA = "0xBB0678")]
	protected SECTR_Hull()
	{
	}
}
[Token(Token = "0x200015A")]
public enum SECTR_MemberUpdateMode
{
	[Token(Token = "0x400075A")]
	Realtime,
	[Token(Token = "0x400075B")]
	Delayed,
	[Token(Token = "0x400075C")]
	OnSaveOnly
}
[Token(Token = "0x200015B")]
[AddComponentMenu("Procedural Worlds/SECTR/Core/SECTR Member")]
[ExecuteInEditMode]
public class SECTR_Member : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x200015C")]
	public class Child
	{
		[Token(Token = "0x400078A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GameObject gameObject;

		[Token(Token = "0x400078B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int gameObjectHash;

		[Token(Token = "0x400078C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SECTR_Member member;

		[Token(Token = "0x400078D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Renderer renderer;

		[Token(Token = "0x400078E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int renderHash;

		[Token(Token = "0x400078F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Light light;

		[Token(Token = "0x4000790")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int lightHash;

		[Token(Token = "0x4000791")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Terrain terrain;

		[Token(Token = "0x4000792")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int terrainHash;

		[Token(Token = "0x4000793")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public Bounds rendererBounds;

		[Token(Token = "0x4000794")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public Bounds lightBounds;

		[Token(Token = "0x4000795")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public Bounds terrainBounds;

		[Token(Token = "0x4000796")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public bool shadowLight;

		[Token(Token = "0x4000797")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9D")]
		public bool rendererCastsShadows;

		[Token(Token = "0x4000798")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9E")]
		public bool terrainCastsShadows;

		[Token(Token = "0x4000799")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public LayerMask layer;

		[Token(Token = "0x400079A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public Vector3 shadowLightPosition;

		[Token(Token = "0x400079B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public float shadowLightRange;

		[Token(Token = "0x400079C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public LightType shadowLightType;

		[Token(Token = "0x400079D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public int shadowCullingMask;

		[Token(Token = "0x400079E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public bool processed;

		[Token(Token = "0x400079F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBD")]
		public bool renderCulled;

		[Token(Token = "0x40007A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBE")]
		public bool lightCulled;

		[Token(Token = "0x40007A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBF")]
		public bool terrainCulled;

		[Token(Token = "0x600061D")]
		[Address(RVA = "0xBB26D8", Offset = "0xBB26D8", VA = "0xBB26D8")]
		public void Init(GameObject gameObject, Renderer renderer, Light light, Terrain terrain, SECTR_Member member, bool dirShadowCaster, Vector3 shadowVec)
		{
		}

		[Token(Token = "0x600061E")]
		[Address(RVA = "0xBB4048", Offset = "0xBB4048", VA = "0xBB4048", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x600061F")]
		[Address(RVA = "0xBB40DC", Offset = "0xBB40DC", VA = "0xBB40DC", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000620")]
		[Address(RVA = "0xBB35F8", Offset = "0xBB35F8", VA = "0xBB35F8")]
		public static bool operator ==(Child x, Child y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000621")]
		[Address(RVA = "0xBB35CC", Offset = "0xBB35CC", VA = "0xBB35CC")]
		public static bool operator !=(Child x, Child y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000622")]
		[Address(RVA = "0xBB3624", Offset = "0xBB3624", VA = "0xBB3624")]
		public Child()
		{
		}
	}

	[Token(Token = "0x200015D")]
	public enum BoundsUpdateModes
	{
		[Token(Token = "0x40007A3")]
		Start,
		[Token(Token = "0x40007A4")]
		Movement,
		[Token(Token = "0x40007A5")]
		Always,
		[Token(Token = "0x40007A6")]
		Static,
		[Token(Token = "0x40007A7")]
		SelfOnly
	}

	[Token(Token = "0x200015E")]
	public enum ChildCullModes
	{
		[Token(Token = "0x40007A9")]
		Default,
		[Token(Token = "0x40007AA")]
		Group,
		[Token(Token = "0x40007AB")]
		Individual
	}

	[Token(Token = "0x200015F")]
	public delegate void MembershipChanged(List<SECTR_Sector> left, List<SECTR_Sector> joined);

	[Token(Token = "0x400075D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private List<Transform> ignoreTransforms;

	[Token(Token = "0x400075E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[HideInInspector]
	[SerializeField]
	private List<Child> children;

	[Token(Token = "0x400075F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[HideInInspector]
	[SerializeField]
	private List<Child> renderers;

	[Token(Token = "0x4000760")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	[HideInInspector]
	private List<Child> lights;

	[Token(Token = "0x4000761")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	[HideInInspector]
	private List<Child> terrains;

	[Token(Token = "0x4000762")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	[HideInInspector]
	private List<Child> shadowLights;

	[Token(Token = "0x4000763")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	[HideInInspector]
	private List<Child> shadowCasters;

	[Token(Token = "0x4000764")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	[HideInInspector]
	private Bounds totalBounds;

	[Token(Token = "0x4000765")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	[HideInInspector]
	private Bounds renderBounds;

	[Token(Token = "0x4000766")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	[HideInInspector]
	private Bounds lightBounds;

	[Token(Token = "0x4000767")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	[HideInInspector]
	private bool hasRenderBounds;

	[Token(Token = "0x4000768")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x99")]
	[HideInInspector]
	[SerializeField]
	private bool hasLightBounds;

	[Token(Token = "0x4000769")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9A")]
	[HideInInspector]
	[SerializeField]
	private bool shadowCaster;

	[Token(Token = "0x400076A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9B")]
	[SerializeField]
	[HideInInspector]
	private bool shadowLight;

	[Token(Token = "0x400076B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	[SerializeField]
	[HideInInspector]
	private bool frozen;

	[Token(Token = "0x400076C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9D")]
	[HideInInspector]
	[SerializeField]
	private bool neverJoin;

	[Token(Token = "0x400076D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	[HideInInspector]
	protected List<Light> bakedOnlyLights;

	[Token(Token = "0x400076E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	protected bool isSector;

	[Token(Token = "0x400076F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	protected SECTR_Member childProxy;

	[Token(Token = "0x4000770")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	protected bool hasChildProxy;

	[Token(Token = "0x4000771")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB9")]
	private bool started;

	[Token(Token = "0x4000772")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBA")]
	private bool usedStartSector;

	[Token(Token = "0x4000773")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private List<SECTR_Sector> sectors;

	[Token(Token = "0x4000774")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private List<SECTR_Sector> newSectors;

	[Token(Token = "0x4000775")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private List<SECTR_Sector> leftSectors;

	[Token(Token = "0x4000776")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private Dictionary<Transform, Child> childTable;

	[Token(Token = "0x4000777")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private Dictionary<Light, Light> bakedOnlyTable;

	[Token(Token = "0x4000778")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private Vector3 lastPosition;

	[Token(Token = "0x4000779")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private Stack<Child> childPool;

	[Token(Token = "0x400077A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static List<SECTR_Member> allMembers;

	[Token(Token = "0x400077B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static Dictionary<Transform, SECTR_Member> allMemberTable;

	[Token(Token = "0x400077C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	[SECTR_ToolTip("Set to true if Sector membership should only change when crossing a portal.")]
	public bool PortalDetermined;

	[Token(Token = "0x400077D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	[SECTR_ToolTip("If set, forces the initial Sector to be the specified Sector.", "PortalDetermined")]
	public SECTR_Sector ForceStartSector;

	[Token(Token = "0x400077E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[SECTR_ToolTip("Global Setting. Determines how often the Sector Members are re-evaluated. More frequent updates requires more CPU. Switch to delayed or Save & Export only if experiencing Editor Slowdowns with many Sectors in the scene.")]
	public static SECTR_MemberUpdateMode MemberUpdateMode;

	[Token(Token = "0x400077F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[SECTR_ToolTip("Global Setting. Delay in Milliseconds until Sector Members are re-evaluated in delayed mode.")]
	public static int MemberUpdateDelay;

	[Token(Token = "0x4000780")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	[SECTR_ToolTip("Determines how often the bounds are recomputed. More frequent updates requires more CPU.")]
	public BoundsUpdateModes BoundsUpdateMode;

	[Token(Token = "0x4000781")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
	[SECTR_ToolTip("Adds a buffer on bounding box to compensate for minor imprecisions.")]
	public float ExtraBounds;

	[Token(Token = "0x4000782")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	[SECTR_ToolTip("Override computed bounds with the user specified bounds. Advanced users only.")]
	public bool OverrideBounds;

	[Token(Token = "0x4000783")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
	[SECTR_ToolTip("User specified override bounds. Auto-populated with the current bounds when override is inactive.", "OverrideBounds")]
	public Bounds BoundsOverride;

	[Token(Token = "0x4000784")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	[SECTR_ToolTip("Optional shadow casting directional light to use in membership calculations. Bounds will be extruded away from light, if set.")]
	public Light DirShadowCaster;

	[Token(Token = "0x4000785")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	[SECTR_ToolTip("Distance by which to extend the bounds away from the shadow casting light.", "DirShadowCaster")]
	public float DirShadowDistance;

	[Token(Token = "0x4000786")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
	[SECTR_ToolTip("Determines if this SectorCuller should cull individual children, or cull all children based on the aggregate bounds.")]
	public ChildCullModes ChildCulling;

	[NonSerialized]
	[Token(Token = "0x4000787")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	[HideInInspector]
	public int LastVisibleFrameNumber;

	[Token(Token = "0x4000788")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
	public bool FloatingPointFix;

	[Token(Token = "0x170000B0")]
	public static List<SECTR_Member> All
	{
		[Token(Token = "0x60005F5")]
		[Address(RVA = "0xBB0748", Offset = "0xBB0748", VA = "0xBB0748")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000B1")]
	public bool CullEachChild
	{
		[Token(Token = "0x60005F6")]
		[Address(RVA = "0xBB07A0", Offset = "0xBB07A0", VA = "0xBB07A0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000B2")]
	public List<SECTR_Sector> Sectors
	{
		[Token(Token = "0x60005F7")]
		[Address(RVA = "0xBB07D0", Offset = "0xBB07D0", VA = "0xBB07D0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000B3")]
	public List<Child> Children
	{
		[Token(Token = "0x60005F8")]
		[Address(RVA = "0xBB07D8", Offset = "0xBB07D8", VA = "0xBB07D8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000B4")]
	public List<Child> Renderers
	{
		[Token(Token = "0x60005F9")]
		[Address(RVA = "0xBB07FC", Offset = "0xBB07FC", VA = "0xBB07FC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000B5")]
	public bool ShadowCaster
	{
		[Token(Token = "0x60005FA")]
		[Address(RVA = "0xBB0820", Offset = "0xBB0820", VA = "0xBB0820")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000B6")]
	public List<Child> ShadowCasters
	{
		[Token(Token = "0x60005FB")]
		[Address(RVA = "0xBB0844", Offset = "0xBB0844", VA = "0xBB0844")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000B7")]
	public List<Child> Lights
	{
		[Token(Token = "0x60005FC")]
		[Address(RVA = "0xBB0868", Offset = "0xBB0868", VA = "0xBB0868")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000B8")]
	public bool ShadowLight
	{
		[Token(Token = "0x60005FD")]
		[Address(RVA = "0xBB088C", Offset = "0xBB088C", VA = "0xBB088C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000B9")]
	public List<Child> ShadowLights
	{
		[Token(Token = "0x60005FE")]
		[Address(RVA = "0xBB08B0", Offset = "0xBB08B0", VA = "0xBB08B0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000BA")]
	public List<Child> Terrains
	{
		[Token(Token = "0x60005FF")]
		[Address(RVA = "0xBB08D4", Offset = "0xBB08D4", VA = "0xBB08D4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000BB")]
	public Bounds TotalBounds
	{
		[Token(Token = "0x6000600")]
		[Address(RVA = "0xBB08F8", Offset = "0xBB08F8", VA = "0xBB08F8")]
		get
		{
			return default(Bounds);
		}
	}

	[Token(Token = "0x170000BC")]
	public Bounds RenderBounds
	{
		[Token(Token = "0x6000601")]
		[Address(RVA = "0xBB090C", Offset = "0xBB090C", VA = "0xBB090C")]
		get
		{
			return default(Bounds);
		}
	}

	[Token(Token = "0x170000BD")]
	public bool HasRenderBounds
	{
		[Token(Token = "0x6000602")]
		[Address(RVA = "0xBB093C", Offset = "0xBB093C", VA = "0xBB093C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000BE")]
	public Bounds LightBounds
	{
		[Token(Token = "0x6000603")]
		[Address(RVA = "0xBB0960", Offset = "0xBB0960", VA = "0xBB0960")]
		get
		{
			return default(Bounds);
		}
	}

	[Token(Token = "0x170000BF")]
	public bool HasLightBounds
	{
		[Token(Token = "0x6000604")]
		[Address(RVA = "0xBB0990", Offset = "0xBB0990", VA = "0xBB0990")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000C0")]
	public bool Frozen
	{
		[Token(Token = "0x6000608")]
		[Address(RVA = "0xBB0A0C", Offset = "0xBB0A0C", VA = "0xBB0A0C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000607")]
		[Address(RVA = "0xBB09F8", Offset = "0xBB09F8", VA = "0xBB09F8")]
		set
		{
		}
	}

	[Token(Token = "0x170000C1")]
	public SECTR_Member ChildProxy
	{
		[Token(Token = "0x6000609")]
		[Address(RVA = "0xBB0A14", Offset = "0xBB0A14", VA = "0xBB0A14")]
		set
		{
		}
	}

	[Token(Token = "0x170000C2")]
	public bool NeverJoin
	{
		[Token(Token = "0x600060A")]
		[Address(RVA = "0xBB0A8C", Offset = "0xBB0A8C", VA = "0xBB0A8C")]
		set
		{
		}
	}

	[Token(Token = "0x170000C3")]
	public bool IsSector
	{
		[Token(Token = "0x600060B")]
		[Address(RVA = "0xBB0A98", Offset = "0xBB0A98", VA = "0xBB0A98")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x14000010")]
	public event MembershipChanged Changed
	{
		[Token(Token = "0x600060E")]
		[Address(RVA = "0xBB1D5C", Offset = "0xBB1D5C", VA = "0xBB1D5C")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600060F")]
		[Address(RVA = "0xBB1DFC", Offset = "0xBB1DFC", VA = "0xBB1DFC")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6000605")]
	[Address(RVA = "0xBB09B4", Offset = "0xBB09B4", VA = "0xBB09B4")]
	public bool IsVisibleThisFrame()
	{
		return default(bool);
	}

	[Token(Token = "0x6000606")]
	[Address(RVA = "0xBB09D4", Offset = "0xBB09D4", VA = "0xBB09D4")]
	public bool WasVisibleLastFrame()
	{
		return default(bool);
	}

	[Token(Token = "0x600060C")]
	[Address(RVA = "0xBAD020", Offset = "0xBAD020", VA = "0xBAD020")]
	public void ForceUpdate(bool updateChildren)
	{
	}

	[Token(Token = "0x600060D")]
	[Address(RVA = "0xBB1BE8", Offset = "0xBB1BE8", VA = "0xBB1BE8")]
	public void SectorDisabled(SECTR_Sector sector)
	{
	}

	[Token(Token = "0x6000610")]
	[Address(RVA = "0xBB1E9C", Offset = "0xBB1E9C", VA = "0xBB1E9C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000611")]
	[Address(RVA = "0xBB1EF8", Offset = "0xBB1EF8", VA = "0xBB1EF8", Slot = "4")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x6000612")]
	[Address(RVA = "0xBB2144", Offset = "0xBB2144", VA = "0xBB2144")]
	private void OnSceneSaving(Scene scene, string path)
	{
	}

	[Token(Token = "0x6000613")]
	[Address(RVA = "0xBB229C", Offset = "0xBB229C", VA = "0xBB229C", Slot = "5")]
	protected virtual void OnDisable()
	{
	}

	[Token(Token = "0x6000614")]
	[Address(RVA = "0xBB26D0", Offset = "0xBB26D0", VA = "0xBB26D0", Slot = "6")]
	protected virtual void OnDestroy()
	{
	}

	[Token(Token = "0x6000615")]
	[Address(RVA = "0xBB26D4", Offset = "0xBB26D4", VA = "0xBB26D4")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000616")]
	[Address(RVA = "0xBB21F8", Offset = "0xBB21F8", VA = "0xBB21F8")]
	public void UpdateMembers()
	{
	}

	[Token(Token = "0x6000617")]
	[Address(RVA = "0xBB0AA0", Offset = "0xBB0AA0", VA = "0xBB0AA0")]
	private void _UpdateChildren()
	{
	}

	[Token(Token = "0x6000618")]
	[Address(RVA = "0xBB2D30", Offset = "0xBB2D30", VA = "0xBB2D30")]
	private void _AddChildren(Transform childTransform, bool dirShadowCaster, Vector3 shadowVec)
	{
	}

	[Token(Token = "0x6000619")]
	[Address(RVA = "0xBB1490", Offset = "0xBB1490", VA = "0xBB1490")]
	private void _UpdateSectorMembership()
	{
	}

	[Token(Token = "0x600061A")]
	[Address(RVA = "0xBB362C", Offset = "0xBB362C", VA = "0xBB362C")]
	private SECTR_Portal _CrossedPortal(SECTR_Sector sector)
	{
		return null;
	}

	[Token(Token = "0x600061B")]
	[Address(RVA = "0xBB3BAC", Offset = "0xBB3BAC", VA = "0xBB3BAC")]
	public SECTR_Member()
	{
	}
}
[Token(Token = "0x2000160")]
public static class SECTR_Modules
{
	[Token(Token = "0x40007AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool AUDIO;

	[Token(Token = "0x40007AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
	public static bool VIS;

	[Token(Token = "0x40007AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
	public static bool STREAM;

	[Token(Token = "0x40007AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3")]
	public static bool DEV;

	[Token(Token = "0x40007B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static string VERSION;

	[Token(Token = "0x6000627")]
	[Address(RVA = "0xBB425C", Offset = "0xBB425C", VA = "0xBB425C")]
	static SECTR_Modules()
	{
	}

	[Token(Token = "0x6000628")]
	[Address(RVA = "0xBB4464", Offset = "0xBB4464", VA = "0xBB4464")]
	public static bool HasPro()
	{
		return default(bool);
	}

	[Token(Token = "0x6000629")]
	[Address(RVA = "0xBB446C", Offset = "0xBB446C", VA = "0xBB446C")]
	public static bool HasComplete()
	{
		return default(bool);
	}
}
[Token(Token = "0x2000161")]
[ExecuteInEditMode]
[AddComponentMenu("Procedural Worlds/SECTR/Core/SECTR Portal")]
public class SECTR_Portal : SECTR_Hull
{
	[Token(Token = "0x2000162")]
	[Flags]
	public enum PortalFlags
	{
		[Token(Token = "0x40007B7")]
		Closed = 1,
		[Token(Token = "0x40007B8")]
		Locked = 2,
		[Token(Token = "0x40007B9")]
		PassThrough = 4
	}

	[Token(Token = "0x2000163")]
	[CompilerGenerated]
	private sealed class <GetSectors>d__17 : IEnumerable<SECTR_Sector>, IEnumerable, IEnumerator<SECTR_Sector>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40007BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40007BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private SECTR_Sector <>2__current;

		[Token(Token = "0x40007BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int <>l__initialThreadId;

		[Token(Token = "0x40007BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public SECTR_Portal <>4__this;

		[Token(Token = "0x170000C8")]
		private SECTR_Sector System.Collections.Generic.IEnumerator<SECTR_Sector>.Current
		{
			[Token(Token = "0x600063C")]
			[Address(RVA = "0xBB4CB4", Offset = "0xBB4CB4", VA = "0xBB4CB4", Slot = "6")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C9")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600063E")]
			[Address(RVA = "0xBB4CFC", Offset = "0xBB4CFC", VA = "0xBB4CFC", Slot = "9")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000639")]
		[Address(RVA = "0xBB48F4", Offset = "0xBB48F4", VA = "0xBB48F4")]
		[DebuggerHidden]
		public <GetSectors>d__17(int <>1__state)
		{
		}

		[Token(Token = "0x600063A")]
		[Address(RVA = "0xBB4C34", Offset = "0xBB4C34", VA = "0xBB4C34", Slot = "7")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600063B")]
		[Address(RVA = "0xBB4C38", Offset = "0xBB4C38", VA = "0xBB4C38", Slot = "8")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600063D")]
		[Address(RVA = "0xBB4CBC", Offset = "0xBB4CBC", VA = "0xBB4CBC", Slot = "10")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}

		[Token(Token = "0x600063F")]
		[Address(RVA = "0xBB4D04", Offset = "0xBB4D04", VA = "0xBB4D04", Slot = "4")]
		[DebuggerHidden]
		private IEnumerator<SECTR_Sector> System.Collections.Generic.IEnumerable<SECTR_Sector>.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000640")]
		[Address(RVA = "0xBB4DA8", Offset = "0xBB4DA8", VA = "0xBB4DA8", Slot = "5")]
		[DebuggerHidden]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}
	}

	[Token(Token = "0x40007B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[HideInInspector]
	[SerializeField]
	private SECTR_Sector frontSector;

	[Token(Token = "0x40007B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[HideInInspector]
	[SerializeField]
	private SECTR_Sector backSector;

	[Token(Token = "0x40007B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool visited;

	[Token(Token = "0x40007B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static List<SECTR_Portal> allPortals;

	[Token(Token = "0x40007B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[SECTR_ToolTip("Flags for this Portal. Used in graph traversals and the like.", null, typeof(PortalFlags))]
	public PortalFlags Flags;

	[Token(Token = "0x170000C4")]
	public static List<SECTR_Portal> All
	{
		[Token(Token = "0x600062A")]
		[Address(RVA = "0xBB450C", Offset = "0xBB450C", VA = "0xBB450C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000C5")]
	public SECTR_Sector FrontSector
	{
		[Token(Token = "0x600062C")]
		[Address(RVA = "0xBAE7FC", Offset = "0xBAE7FC", VA = "0xBAE7FC")]
		get
		{
			return null;
		}
		[Token(Token = "0x600062B")]
		[Address(RVA = "0xBB4564", Offset = "0xBB4564", VA = "0xBB4564")]
		set
		{
		}
	}

	[Token(Token = "0x170000C6")]
	public SECTR_Sector BackSector
	{
		[Token(Token = "0x600062E")]
		[Address(RVA = "0xBAE88C", Offset = "0xBAE88C", VA = "0xBAE88C")]
		get
		{
			return null;
		}
		[Token(Token = "0x600062D")]
		[Address(RVA = "0xBB477C", Offset = "0xBB477C", VA = "0xBB477C")]
		set
		{
		}
	}

	[Token(Token = "0x170000C7")]
	public bool Visited
	{
		[Token(Token = "0x600062F")]
		[Address(RVA = "0xBB4868", Offset = "0xBB4868", VA = "0xBB4868")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000630")]
		[Address(RVA = "0xBB4870", Offset = "0xBB4870", VA = "0xBB4870")]
		set
		{
		}
	}

	[Token(Token = "0x6000631")]
	[Address(RVA = "0xBB487C", Offset = "0xBB487C", VA = "0xBB487C")]
	[IteratorStateMachine(typeof(<GetSectors>d__17))]
	public IEnumerable<SECTR_Sector> GetSectors()
	{
		return null;
	}

	[Token(Token = "0x6000632")]
	[Address(RVA = "0xBABE34", Offset = "0xBABE34", VA = "0xBABE34")]
	public void SetFlag(PortalFlags flag, bool on)
	{
	}

	[Token(Token = "0x6000633")]
	[Address(RVA = "0xBB4928", Offset = "0xBB4928", VA = "0xBB4928")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000634")]
	[Address(RVA = "0xBB4A78", Offset = "0xBB4A78", VA = "0xBB4A78")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000635")]
	[Address(RVA = "0xBB4B80", Offset = "0xBB4B80", VA = "0xBB4B80")]
	public void OpenPortal()
	{
	}

	[Token(Token = "0x6000636")]
	[Address(RVA = "0xBB4B90", Offset = "0xBB4B90", VA = "0xBB4B90")]
	public void ClosePortal()
	{
	}

	[Token(Token = "0x6000637")]
	[Address(RVA = "0xBB4BA0", Offset = "0xBB4BA0", VA = "0xBB4BA0")]
	public SECTR_Portal()
	{
	}
}
[Token(Token = "0x2000164")]
public class SECTR_PriorityQueue<T> where T : IComparable<T>
{
	[Token(Token = "0x40007BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private List<T> data;

	[Token(Token = "0x170000CA")]
	public int Count
	{
		[Token(Token = "0x6000643")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000644")]
		set
		{
		}
	}

	[Token(Token = "0x170000CB")]
	public T this[int index]
	{
		[Token(Token = "0x6000645")]
		get
		{
			return (T)null;
		}
		[Token(Token = "0x6000646")]
		set
		{
		}
	}

	[Token(Token = "0x6000641")]
	public SECTR_PriorityQueue()
	{
	}

	[Token(Token = "0x6000642")]
	public SECTR_PriorityQueue(int capacity)
	{
	}

	[Token(Token = "0x6000647")]
	public void Enqueue(T item)
	{
	}

	[Token(Token = "0x6000648")]
	public T Dequeue()
	{
		return (T)null;
	}

	[Token(Token = "0x6000649")]
	public T Peek()
	{
		return (T)null;
	}

	[Token(Token = "0x600064A")]
	public override string ToString()
	{
		return null;
	}

	[Token(Token = "0x600064B")]
	public bool IsConsistent()
	{
		return default(bool);
	}

	[Token(Token = "0x600064C")]
	public void Clear()
	{
	}

	[Token(Token = "0x600064D")]
	private void _SwapElements(int i, int j)
	{
	}

	[Token(Token = "0x600064E")]
	private void _Update(int i)
	{
	}
}
[Token(Token = "0x2000165")]
[ExecuteInEditMode]
[AddComponentMenu("Procedural Worlds/SECTR/Core/SECTR Sector")]
public class SECTR_Sector : SECTR_Member
{
	[Token(Token = "0x40007BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	private List<SECTR_Portal> portals;

	[Token(Token = "0x40007C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	private List<SECTR_Member> members;

	[Token(Token = "0x40007C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	private bool visited;

	[Token(Token = "0x40007C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static List<SECTR_Sector> allSectors;

	[Token(Token = "0x40007C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	[SECTR_ToolTip("The terrain Sector attached on the top side of this Sector.")]
	public SECTR_Sector TopTerrain;

	[Token(Token = "0x40007C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	[SECTR_ToolTip("The terrain Sector attached on the bottom side of this Sector.")]
	public SECTR_Sector BottomTerrain;

	[Token(Token = "0x40007C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	[SECTR_ToolTip("The terrain Sector attached on the left side of this Sector.")]
	public SECTR_Sector LeftTerrain;

	[Token(Token = "0x40007C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	[SECTR_ToolTip("The terrain Sector attached on the right side of this Sector.")]
	public SECTR_Sector RightTerrain;

	[Token(Token = "0x170000CC")]
	public new static List<SECTR_Sector> All
	{
		[Token(Token = "0x6000650")]
		[Address(RVA = "0xBB4EA0", Offset = "0xBB4EA0", VA = "0xBB4EA0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000CD")]
	public bool Visited
	{
		[Token(Token = "0x6000653")]
		[Address(RVA = "0xBB4EF8", Offset = "0xBB4EF8", VA = "0xBB4EF8")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000654")]
		[Address(RVA = "0xBB4F00", Offset = "0xBB4F00", VA = "0xBB4F00")]
		set
		{
		}
	}

	[Token(Token = "0x170000CE")]
	public List<SECTR_Portal> Portals
	{
		[Token(Token = "0x6000655")]
		[Address(RVA = "0xBB4F0C", Offset = "0xBB4F0C", VA = "0xBB4F0C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000CF")]
	public List<SECTR_Member> Members
	{
		[Token(Token = "0x6000656")]
		[Address(RVA = "0xBB4F14", Offset = "0xBB4F14", VA = "0xBB4F14")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000D0")]
	public bool IsConnectedTerrain
	{
		[Token(Token = "0x6000657")]
		[Address(RVA = "0xBB4F1C", Offset = "0xBB4F1C", VA = "0xBB4F1C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600064F")]
	[Address(RVA = "0xBB4DAC", Offset = "0xBB4DAC", VA = "0xBB4DAC")]
	private SECTR_Sector()
	{
	}

	[Token(Token = "0x6000651")]
	[Address(RVA = "0xBAEEA0", Offset = "0xBAEEA0", VA = "0xBAEEA0")]
	public static void GetContaining(ref List<SECTR_Sector> sectors, Vector3 position)
	{
	}

	[Token(Token = "0x6000652")]
	[Address(RVA = "0xBB39CC", Offset = "0xBB39CC", VA = "0xBB39CC")]
	public static void GetContaining(ref List<SECTR_Sector> sectors, Bounds bounds)
	{
	}

	[Token(Token = "0x6000658")]
	[Address(RVA = "0xBB4FF4", Offset = "0xBB4FF4", VA = "0xBB4FF4")]
	public void ConnectTerrainNeighbors()
	{
	}

	[Token(Token = "0x6000659")]
	[Address(RVA = "0xBB51DC", Offset = "0xBB51DC", VA = "0xBB51DC")]
	public void DisonnectTerrainNeighbors()
	{
	}

	[Token(Token = "0x600065A")]
	[Address(RVA = "0xBB46A8", Offset = "0xBB46A8", VA = "0xBB46A8")]
	public void Register(SECTR_Portal portal)
	{
	}

	[Token(Token = "0x600065B")]
	[Address(RVA = "0xBB4650", Offset = "0xBB4650", VA = "0xBB4650")]
	public void Deregister(SECTR_Portal portal)
	{
	}

	[Token(Token = "0x600065C")]
	[Address(RVA = "0xBB3924", Offset = "0xBB3924", VA = "0xBB3924")]
	public void Register(SECTR_Member member)
	{
	}

	[Token(Token = "0x600065D")]
	[Address(RVA = "0xBB2678", Offset = "0xBB2678", VA = "0xBB2678")]
	public void Deregister(SECTR_Member member)
	{
	}

	[Token(Token = "0x600065E")]
	[Address(RVA = "0xBB5574", Offset = "0xBB5574", VA = "0xBB5574", Slot = "4")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x600065F")]
	[Address(RVA = "0xBB56F0", Offset = "0xBB56F0", VA = "0xBB56F0", Slot = "5")]
	protected override void OnDisable()
	{
	}

	[Token(Token = "0x6000660")]
	[Address(RVA = "0xBB511C", Offset = "0xBB511C", VA = "0xBB511C")]
	protected static Terrain GetTerrain(SECTR_Sector sector)
	{
		return null;
	}
}
[Token(Token = "0x2000166")]
public struct SECTR_SectorChildCandidate
{
	[Token(Token = "0x40007C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public List<string> ancestors;

	[Token(Token = "0x40007C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public Transform transform;

	[Token(Token = "0x40007C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Bounds bounds;
}
[Token(Token = "0x2000167")]
public class SECTR_SectorUtils : MonoBehaviour
{
	[Token(Token = "0x6000662")]
	[Address(RVA = "0xBB58F8", Offset = "0xBB58F8", VA = "0xBB58F8")]
	public static bool DoHaveSectors()
	{
		return default(bool);
	}

	[Token(Token = "0x6000663")]
	[Address(RVA = "0xBB59A8", Offset = "0xBB59A8", VA = "0xBB59A8")]
	public static void SendObjectsIntoSectors(ref List<GameObject> parentsUndoList, List<GameObject> gameObjects, Vector3 parentLocation, SECTR_Constants.ReparentingMode localizeBy = SECTR_Constants.ReparentingMode.Bounds, bool mergeSpawns = true, bool doGlobalParenting = false)
	{
	}

	[Token(Token = "0x6000664")]
	[Address(RVA = "0xBB5A54", Offset = "0xBB5A54", VA = "0xBB5A54")]
	public static void SendObjectsIntoSectors(ref List<GameObject> parentsUndoList, List<GameObject> gameObjects, Vector3 parentLocation, string[] hierarchy, SECTR_Constants.ReparentingMode localizeBy = SECTR_Constants.ReparentingMode.Bounds, bool mergeSpawns = true, bool doGlobalParenting = false)
	{
	}

	[Token(Token = "0x6000665")]
	[Address(RVA = "0xBB6CA4", Offset = "0xBB6CA4", VA = "0xBB6CA4")]
	public static void AddObjToCandidateListByPosition(ref List<SECTR_SectorChildCandidate> sectorChildCandidates, Transform objectTransform)
	{
	}

	[Token(Token = "0x6000666")]
	[Address(RVA = "0xBB65A8", Offset = "0xBB65A8", VA = "0xBB65A8")]
	public static void AddObjToCandidateListByPosition(ref List<SECTR_SectorChildCandidate> sectorChildCandidates, Transform objectTransform, string[] ancestors)
	{
	}

	[Token(Token = "0x6000667")]
	[Address(RVA = "0xBB6D08", Offset = "0xBB6D08", VA = "0xBB6D08")]
	public static void AddObjToCandidateListByBounds(ref List<SECTR_SectorChildCandidate> sectorChildCandidates, Transform objectTransform)
	{
	}

	[Token(Token = "0x6000668")]
	[Address(RVA = "0xBB61C8", Offset = "0xBB61C8", VA = "0xBB61C8")]
	public static void AddObjToCandidateListByBounds(ref List<SECTR_SectorChildCandidate> sectorChildCandidates, Transform objectTransform, string[] ancestors)
	{
	}

	[Token(Token = "0x6000669")]
	[Address(RVA = "0xBB6778", Offset = "0xBB6778", VA = "0xBB6778")]
	public static List<SECTR_Sector> GetTopLevelSectors()
	{
		return null;
	}

	[Token(Token = "0x600066A")]
	[Address(RVA = "0xBB6D6C", Offset = "0xBB6D6C", VA = "0xBB6D6C")]
	public static void Encapsulate(List<SECTR_SectorChildCandidate> sectorChildCandidates, string undoString)
	{
	}

	[Token(Token = "0x600066B")]
	[Address(RVA = "0xBB6E10", Offset = "0xBB6E10", VA = "0xBB6E10")]
	public static void Encapsulate(SECTR_Sector newSector, List<SECTR_SectorChildCandidate> sectorChildCandidates, string undoString)
	{
	}

	[Token(Token = "0x600066C")]
	[Address(RVA = "0xBB7174", Offset = "0xBB7174", VA = "0xBB7174")]
	public static Transform UndoParent(Transform parent, Transform child, string undoString)
	{
		return null;
	}

	[Token(Token = "0x600066D")]
	[Address(RVA = "0xBB71D0", Offset = "0xBB71D0", VA = "0xBB71D0")]
	public static void UndoParent(GameObject parent, GameObject child, string undoString)
	{
	}

	[Token(Token = "0x600066E")]
	[Address(RVA = "0xBB7220", Offset = "0xBB7220", VA = "0xBB7220")]
	public static double GetUnixTimeStamp()
	{
		return default(double);
	}

	[Token(Token = "0x600066F")]
	[Address(RVA = "0xBB6A00", Offset = "0xBB6A00", VA = "0xBB6A00")]
	private static Transform GetParent(ref List<GameObject> newParentList, Transform parentOfHierarchy, Vector3 parentLocation, List<string> hierarchy, bool mergeSpawns)
	{
		return null;
	}

	[Token(Token = "0x6000670")]
	[Address(RVA = "0xBB72C4", Offset = "0xBB72C4", VA = "0xBB72C4")]
	private static GameObject GetGlobalParent(ref List<GameObject> newParents, Vector3 parentLocation, string[] hierarchy, bool mergeSpawns)
	{
		return null;
	}

	[Token(Token = "0x6000671")]
	[Address(RVA = "0xBB60A4", Offset = "0xBB60A4", VA = "0xBB60A4")]
	private static void ParentObjectsGlobally(ref List<GameObject> newParents, List<GameObject> gameObjects, Vector3 parentLocation, string[] hierarchy, bool mergeSpawns)
	{
	}

	[Token(Token = "0x6000672")]
	[Address(RVA = "0xBB76BC", Offset = "0xBB76BC", VA = "0xBB76BC")]
	public SECTR_SectorUtils()
	{
	}
}
[Token(Token = "0x2000168")]
[AttributeUsage(AttributeTargets.Field)]
public class SECTR_ToolTip : Attribute
{
	[Token(Token = "0x40007CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private string tipText;

	[Token(Token = "0x40007CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private string dependentProperty;

	[Token(Token = "0x40007CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float min;

	[Token(Token = "0x40007CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float max;

	[Token(Token = "0x40007CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Type enumType;

	[Token(Token = "0x40007CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool hasRange;

	[Token(Token = "0x40007D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	private bool devOnly;

	[Token(Token = "0x40007D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
	private bool sceneObjectOverride;

	[Token(Token = "0x40007D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x33")]
	private bool allowSceneObjects;

	[Token(Token = "0x40007D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private bool treatAsLayer;

	[Token(Token = "0x170000D1")]
	public string TipText
	{
		[Token(Token = "0x600067B")]
		[Address(RVA = "0xBB7894", Offset = "0xBB7894", VA = "0xBB7894")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000D2")]
	public string DependentProperty
	{
		[Token(Token = "0x600067C")]
		[Address(RVA = "0xBB789C", Offset = "0xBB789C", VA = "0xBB789C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000D3")]
	public float Min
	{
		[Token(Token = "0x600067D")]
		[Address(RVA = "0xBB78A4", Offset = "0xBB78A4", VA = "0xBB78A4")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170000D4")]
	public float Max
	{
		[Token(Token = "0x600067E")]
		[Address(RVA = "0xBB78AC", Offset = "0xBB78AC", VA = "0xBB78AC")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170000D5")]
	public Type EnumType
	{
		[Token(Token = "0x600067F")]
		[Address(RVA = "0xBB78B4", Offset = "0xBB78B4", VA = "0xBB78B4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000D6")]
	public bool HasRange
	{
		[Token(Token = "0x6000680")]
		[Address(RVA = "0xBB78BC", Offset = "0xBB78BC", VA = "0xBB78BC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000D7")]
	public bool DevOnly
	{
		[Token(Token = "0x6000681")]
		[Address(RVA = "0xBB78C4", Offset = "0xBB78C4", VA = "0xBB78C4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000D8")]
	public bool SceneObjectOverride
	{
		[Token(Token = "0x6000682")]
		[Address(RVA = "0xBB78CC", Offset = "0xBB78CC", VA = "0xBB78CC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000D9")]
	public bool AllowSceneObjects
	{
		[Token(Token = "0x6000683")]
		[Address(RVA = "0xBB78D4", Offset = "0xBB78D4", VA = "0xBB78D4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000DA")]
	public bool TreatAsLayer
	{
		[Token(Token = "0x6000684")]
		[Address(RVA = "0xBB78DC", Offset = "0xBB78DC", VA = "0xBB78DC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000673")]
	[Address(RVA = "0xBB76C4", Offset = "0xBB76C4", VA = "0xBB76C4")]
	public SECTR_ToolTip(string tipText)
	{
	}

	[Token(Token = "0x6000674")]
	[Address(RVA = "0xBB76EC", Offset = "0xBB76EC", VA = "0xBB76EC")]
	public SECTR_ToolTip(string tipText, float min, float max)
	{
	}

	[Token(Token = "0x6000675")]
	[Address(RVA = "0xBB7730", Offset = "0xBB7730", VA = "0xBB7730")]
	public SECTR_ToolTip(string tipText, string dependentProperty)
	{
	}

	[Token(Token = "0x6000676")]
	[Address(RVA = "0xBB775C", Offset = "0xBB775C", VA = "0xBB775C")]
	public SECTR_ToolTip(string tipText, string dependentProperty, float min, float max)
	{
	}

	[Token(Token = "0x6000677")]
	[Address(RVA = "0xBB77A4", Offset = "0xBB77A4", VA = "0xBB77A4")]
	public SECTR_ToolTip(string tipText, bool devOnly)
	{
	}

	[Token(Token = "0x6000678")]
	[Address(RVA = "0xBB77D4", Offset = "0xBB77D4", VA = "0xBB77D4")]
	public SECTR_ToolTip(string tipText, bool devOnly, bool treatAsLayer)
	{
	}

	[Token(Token = "0x6000679")]
	[Address(RVA = "0xBB7814", Offset = "0xBB7814", VA = "0xBB7814")]
	public SECTR_ToolTip(string tipText, string dependentProperty, Type enumType)
	{
	}

	[Token(Token = "0x600067A")]
	[Address(RVA = "0xBB7850", Offset = "0xBB7850", VA = "0xBB7850")]
	public SECTR_ToolTip(string tipText, string dependentProperty, bool allowSceneObjects)
	{
	}
}
[Serializable]
[Token(Token = "0x2000169")]
public class SECTR_ULong
{
	[Token(Token = "0x40007D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[SerializeField]
	private int first;

	[Token(Token = "0x40007D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[SerializeField]
	private int second;

	[Token(Token = "0x170000DB")]
	public ulong value
	{
		[Token(Token = "0x6000685")]
		[Address(RVA = "0xBB78E4", Offset = "0xBB78E4", VA = "0xBB78E4")]
		get
		{
			return default(ulong);
		}
		[Token(Token = "0x6000686")]
		[Address(RVA = "0xBB78F4", Offset = "0xBB78F4", VA = "0xBB78F4")]
		set
		{
		}
	}

	[Token(Token = "0x6000687")]
	[Address(RVA = "0xBB7900", Offset = "0xBB7900", VA = "0xBB7900")]
	public SECTR_ULong(ulong newValue)
	{
	}

	[Token(Token = "0x6000688")]
	[Address(RVA = "0xBB792C", Offset = "0xBB792C", VA = "0xBB792C")]
	public SECTR_ULong()
	{
	}

	[Token(Token = "0x6000689")]
	[Address(RVA = "0xBB7948", Offset = "0xBB7948", VA = "0xBB7948", Slot = "3")]
	public override string ToString()
	{
		return null;
	}

	[Token(Token = "0x600068A")]
	[Address(RVA = "0xBB7A28", Offset = "0xBB7A28", VA = "0xBB7A28")]
	public static bool operator >(SECTR_ULong a, ulong b)
	{
		return default(bool);
	}

	[Token(Token = "0x600068B")]
	[Address(RVA = "0xBB7A50", Offset = "0xBB7A50", VA = "0xBB7A50")]
	public static bool operator >(ulong a, SECTR_ULong b)
	{
		return default(bool);
	}

	[Token(Token = "0x600068C")]
	[Address(RVA = "0xBB7A78", Offset = "0xBB7A78", VA = "0xBB7A78")]
	public static bool operator <(SECTR_ULong a, ulong b)
	{
		return default(bool);
	}

	[Token(Token = "0x600068D")]
	[Address(RVA = "0xBB7AA0", Offset = "0xBB7AA0", VA = "0xBB7AA0")]
	public static bool operator <(ulong a, SECTR_ULong b)
	{
		return default(bool);
	}
}
[Token(Token = "0x200016A")]
[AddComponentMenu("Procedural Worlds/SECTR/Stream/SECTR Chunk")]
[RequireComponent(typeof(SECTR_Sector))]
public class SECTR_Chunk : MonoBehaviour
{
	[Token(Token = "0x200016B")]
	public enum LoadState
	{
		[Token(Token = "0x40007EA")]
		Unloaded,
		[Token(Token = "0x40007EB")]
		Loading,
		[Token(Token = "0x40007EC")]
		Loaded,
		[Token(Token = "0x40007ED")]
		Unloading,
		[Token(Token = "0x40007EE")]
		Active
	}

	[Token(Token = "0x200016C")]
	public delegate void LoadCallback(SECTR_Chunk source, LoadState loadState);

	[Token(Token = "0x200016D")]
	[CompilerGenerated]
	private sealed class <_DeferredUnload>d__45 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40007EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40007F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40007F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SECTR_Chunk <>4__this;

		[Token(Token = "0x170000DD")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60006B0")]
			[Address(RVA = "0xBB9774", Offset = "0xBB9774", VA = "0xBB9774", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000DE")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60006B2")]
			[Address(RVA = "0xBB97BC", Offset = "0xBB97BC", VA = "0xBB97BC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60006AD")]
		[Address(RVA = "0xBB9378", Offset = "0xBB9378", VA = "0xBB9378")]
		[DebuggerHidden]
		public <_DeferredUnload>d__45(int <>1__state)
		{
		}

		[Token(Token = "0x60006AE")]
		[Address(RVA = "0xBB96B8", Offset = "0xBB96B8", VA = "0xBB96B8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60006AF")]
		[Address(RVA = "0xBB96BC", Offset = "0xBB96BC", VA = "0xBB96BC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60006B1")]
		[Address(RVA = "0xBB977C", Offset = "0xBB977C", VA = "0xBB977C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200016E")]
	[CompilerGenerated]
	private sealed class <_UnloadScene>d__46 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40007F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40007F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40007F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SECTR_Chunk <>4__this;

		[Token(Token = "0x170000DF")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60006B6")]
			[Address(RVA = "0xBB9894", Offset = "0xBB9894", VA = "0xBB9894", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000E0")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60006B8")]
			[Address(RVA = "0xBB98DC", Offset = "0xBB98DC", VA = "0xBB98DC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60006B3")]
		[Address(RVA = "0xBB9408", Offset = "0xBB9408", VA = "0xBB9408")]
		[DebuggerHidden]
		public <_UnloadScene>d__46(int <>1__state)
		{
		}

		[Token(Token = "0x60006B4")]
		[Address(RVA = "0xBB97C4", Offset = "0xBB97C4", VA = "0xBB97C4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60006B5")]
		[Address(RVA = "0xBB97C8", Offset = "0xBB97C8", VA = "0xBB97C8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60006B7")]
		[Address(RVA = "0xBB989C", Offset = "0xBB989C", VA = "0xBB989C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40007D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private AsyncOperation asyncLoadOp;

	[Token(Token = "0x40007D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private LoadState loadState;

	[Token(Token = "0x40007D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private int refCount;

	[Token(Token = "0x40007D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private GameObject chunkRoot;

	[Token(Token = "0x40007DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private GameObject chunkSector;

	[Token(Token = "0x40007DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool recenterChunk;

	[Token(Token = "0x40007DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private SECTR_Sector cachedSector;

	[Token(Token = "0x40007DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private GameObject proxy;

	[Token(Token = "0x40007DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool quitting;

	[Token(Token = "0x40007DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static SECTR_Chunk chunkActivating;

	[Token(Token = "0x40007E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static LinkedList<SECTR_Chunk> activationQueue;

	[Token(Token = "0x40007E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static bool requestedDeferredUnload;

	[Token(Token = "0x40007E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SECTR_ToolTip("The path of the scene to load")]
	public string ScenePath;

	[Token(Token = "0x40007E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SECTR_ToolTip("The unique name of the root object in the exported Sector.")]
	public string NodeName;

	[Token(Token = "0x40007E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SECTR_ToolTip("Exports the Chunk in a way that allows it to be shared by multiple Sectors, but may take more CPU to load.")]
	public bool ExportForReuse;

	[Token(Token = "0x40007E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SECTR_ToolTip("A mesh to display when this Chunk is unloaded. Will be hidden when loaded.")]
	public Mesh ProxyMesh;

	[Token(Token = "0x40007E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SECTR_ToolTip("The per-submesh materials for the proxy.")]
	public Material[] ProxyMaterials;

	[Token(Token = "0x170000DC")]
	public SECTR_Sector Sector
	{
		[Token(Token = "0x600068E")]
		[Address(RVA = "0xBB7AC8", Offset = "0xBB7AC8", VA = "0xBB7AC8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x14000011")]
	public event LoadCallback Changed
	{
		[Token(Token = "0x6000694")]
		[Address(RVA = "0xBB7E40", Offset = "0xBB7E40", VA = "0xBB7E40")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000695")]
		[Address(RVA = "0xBB7EDC", Offset = "0xBB7EDC", VA = "0xBB7EDC")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000012")]
	public event LoadCallback ReferenceChange
	{
		[Token(Token = "0x6000696")]
		[Address(RVA = "0xBB7F78", Offset = "0xBB7F78", VA = "0xBB7F78")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000697")]
		[Address(RVA = "0xBB8014", Offset = "0xBB8014", VA = "0xBB8014")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x600068F")]
	[Address(RVA = "0xBB7AD0", Offset = "0xBB7AD0", VA = "0xBB7AD0")]
	public void AddReference()
	{
	}

	[Token(Token = "0x6000690")]
	[Address(RVA = "0xBB7C64", Offset = "0xBB7C64", VA = "0xBB7C64")]
	public void RemoveReference()
	{
	}

	[Token(Token = "0x6000691")]
	[Address(RVA = "0xBB7DB8", Offset = "0xBB7DB8", VA = "0xBB7DB8")]
	public bool IsLoaded()
	{
		return default(bool);
	}

	[Token(Token = "0x6000692")]
	[Address(RVA = "0xBB7DC8", Offset = "0xBB7DC8", VA = "0xBB7DC8")]
	public bool IsUnloaded()
	{
		return default(bool);
	}

	[Token(Token = "0x6000693")]
	[Address(RVA = "0xBB7DD8", Offset = "0xBB7DD8", VA = "0xBB7DD8")]
	public float LoadProgress()
	{
		return default(float);
	}

	[Token(Token = "0x6000698")]
	[Address(RVA = "0xBB80B0", Offset = "0xBB80B0", VA = "0xBB80B0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000699")]
	[Address(RVA = "0xBB80B8", Offset = "0xBB80B8", VA = "0xBB80B8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600069A")]
	[Address(RVA = "0xBB8354", Offset = "0xBB8354", VA = "0xBB8354")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600069B")]
	[Address(RVA = "0xBB891C", Offset = "0xBB891C", VA = "0xBB891C")]
	private void OnApplicationQuit()
	{
	}

	[Token(Token = "0x600069C")]
	[Address(RVA = "0xBB8928", Offset = "0xBB8928", VA = "0xBB8928")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x600069D")]
	[Address(RVA = "0xBB7B20", Offset = "0xBB7B20", VA = "0xBB7B20")]
	private void _Load()
	{
	}

	[Token(Token = "0x600069E")]
	[Address(RVA = "0xBB7CB4", Offset = "0xBB7CB4", VA = "0xBB7CB4")]
	private void _Unload()
	{
	}

	[Token(Token = "0x600069F")]
	[Address(RVA = "0xBB860C", Offset = "0xBB860C", VA = "0xBB860C")]
	private void _DestroyChunk(bool createProxy, bool fromDisable)
	{
	}

	[Token(Token = "0x60006A0")]
	[Address(RVA = "0xBB8440", Offset = "0xBB8440", VA = "0xBB8440")]
	private void _FindChunkRoot()
	{
	}

	[Token(Token = "0x60006A1")]
	[Address(RVA = "0xBB8C58", Offset = "0xBB8C58", VA = "0xBB8C58")]
	private void _SetupChunk()
	{
	}

	[Token(Token = "0x60006A2")]
	[Address(RVA = "0xBB8128", Offset = "0xBB8128", VA = "0xBB8128")]
	private void _CreateProxy()
	{
	}

	[Token(Token = "0x60006A3")]
	[Address(RVA = "0xBB8AA8", Offset = "0xBB8AA8", VA = "0xBB8AA8")]
	private void _TrySceneActivation()
	{
	}

	[Token(Token = "0x60006A4")]
	[Address(RVA = "0xBB91A8", Offset = "0xBB91A8", VA = "0xBB91A8")]
	private void _UnloadResources()
	{
	}

	[Token(Token = "0x60006A5")]
	[Address(RVA = "0xBB9310", Offset = "0xBB9310", VA = "0xBB9310")]
	[IteratorStateMachine(typeof(<_DeferredUnload>d__45))]
	private IEnumerator _DeferredUnload()
	{
		return null;
	}

	[Token(Token = "0x60006A6")]
	[Address(RVA = "0xBB93A0", Offset = "0xBB93A0", VA = "0xBB93A0")]
	[IteratorStateMachine(typeof(<_UnloadScene>d__46))]
	private IEnumerator _UnloadScene(string scenePath)
	{
		return null;
	}

	[Token(Token = "0x60006A7")]
	[Address(RVA = "0xBB9430", Offset = "0xBB9430", VA = "0xBB9430")]
	public SECTR_Chunk()
	{
	}
}
[Token(Token = "0x200016F")]
[AddComponentMenu("")]
public class SECTR_ChunkRef : MonoBehaviour
{
	[Token(Token = "0x40007F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static List<SECTR_ChunkRef> allChunkRefs;

	[Token(Token = "0x40007F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform RealSector;

	[Token(Token = "0x40007F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool Recentered;

	[Token(Token = "0x60006B9")]
	[Address(RVA = "0xBB9208", Offset = "0xBB9208", VA = "0xBB9208")]
	public static SECTR_ChunkRef FindChunkRef(string chunkName)
	{
		return null;
	}

	[Token(Token = "0x60006BA")]
	[Address(RVA = "0xBB98E4", Offset = "0xBB98E4", VA = "0xBB98E4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60006BB")]
	[Address(RVA = "0xBB99B4", Offset = "0xBB99B4", VA = "0xBB99B4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60006BC")]
	[Address(RVA = "0xBB9A34", Offset = "0xBB9A34", VA = "0xBB9A34")]
	public SECTR_ChunkRef()
	{
	}
}
[Token(Token = "0x2000170")]
public class SECTR_GroupLoader : SECTR_Loader
{
	[Token(Token = "0x40007F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SECTR_ToolTip("The Sectors to load and unload together.")]
	public List<SECTR_Sector> Sectors;

	[Token(Token = "0x170000E1")]
	public override bool Loaded
	{
		[Token(Token = "0x60006BF")]
		[Address(RVA = "0xBB9B08", Offset = "0xBB9B08", VA = "0xBB9B08", Slot = "4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60006BE")]
	[Address(RVA = "0xBB9AC8", Offset = "0xBB9AC8", VA = "0xBB9AC8", Slot = "3")]
	public override string ToString()
	{
		return null;
	}

	[Token(Token = "0x60006C0")]
	[Address(RVA = "0xBB9C4C", Offset = "0xBB9C4C", VA = "0xBB9C4C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60006C1")]
	[Address(RVA = "0xBB9DD0", Offset = "0xBB9DD0", VA = "0xBB9DD0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60006C2")]
	[Address(RVA = "0xBB9F54", Offset = "0xBB9F54", VA = "0xBB9F54")]
	private void ChunkChanged(SECTR_Chunk source, SECTR_Chunk.LoadState loadState)
	{
	}

	[Token(Token = "0x60006C3")]
	[Address(RVA = "0xBBA158", Offset = "0xBBA158", VA = "0xBBA158")]
	public SECTR_GroupLoader()
	{
	}
}
[Token(Token = "0x2000171")]
[AddComponentMenu("Procedural Worlds/SECTR/Stream/SECTR Hibernator")]
[RequireComponent(typeof(SECTR_Member))]
public class SECTR_Hibernator : MonoBehaviour
{
	[Token(Token = "0x2000172")]
	public delegate void HibernateCallback();

	[Token(Token = "0x40007F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool hibernating;

	[Token(Token = "0x40007FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private SECTR_Member cachedMember;

	[Token(Token = "0x40007FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Dictionary<SECTR_Chunk, SECTR_Chunk> chunks;

	[Token(Token = "0x40007FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int numLoadedSectors;

	[Token(Token = "0x40007FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SECTR_ToolTip("Hibernate components on children as well as ones on this game object.")]
	public bool HibernateChildren;

	[Token(Token = "0x40007FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
	[SECTR_ToolTip("Disable Behavior components during hibernation.")]
	public bool HibernateBehaviors;

	[Token(Token = "0x40007FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x36")]
	[SECTR_ToolTip("Disable Collder components during hibernation.")]
	public bool HibernateColliders;

	[Token(Token = "0x4000800")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x37")]
	[SECTR_ToolTip("Disable RigidBody components during hibernation.")]
	public bool HibernateRigidBodies;

	[Token(Token = "0x4000801")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SECTR_ToolTip("Hide Render components during hibernation.")]
	public bool HibernateRenderers;

	[Token(Token = "0x4000802")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SECTR_ToolTip("Apply hibernation to an alternate entity.")]
	public GameObject HibernateTarget;

	[Token(Token = "0x14000013")]
	public event HibernateCallback Awoke
	{
		[Token(Token = "0x60006C4")]
		[Address(RVA = "0xBBA1D4", Offset = "0xBBA1D4", VA = "0xBBA1D4")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60006C5")]
		[Address(RVA = "0xBBA270", Offset = "0xBBA270", VA = "0xBBA270")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000014")]
	public event HibernateCallback Hibernated
	{
		[Token(Token = "0x60006C6")]
		[Address(RVA = "0xBBA30C", Offset = "0xBBA30C", VA = "0xBBA30C")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60006C7")]
		[Address(RVA = "0xBBA3A8", Offset = "0xBBA3A8", VA = "0xBBA3A8")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000015")]
	public event HibernateCallback HibernateUpdate
	{
		[Token(Token = "0x60006C8")]
		[Address(RVA = "0xBBA444", Offset = "0xBBA444", VA = "0xBBA444")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60006C9")]
		[Address(RVA = "0xBBA4E0", Offset = "0xBBA4E0", VA = "0xBBA4E0")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x60006CA")]
	[Address(RVA = "0xBBA57C", Offset = "0xBBA57C", VA = "0xBBA57C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60006CB")]
	[Address(RVA = "0xBBA658", Offset = "0xBBA658", VA = "0xBBA658")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60006CC")]
	[Address(RVA = "0xBBA70C", Offset = "0xBBA70C", VA = "0xBBA70C")]
	private void _ChunkChanged(SECTR_Chunk source, SECTR_Chunk.LoadState loadState)
	{
	}

	[Token(Token = "0x60006CD")]
	[Address(RVA = "0xBBA79C", Offset = "0xBBA79C", VA = "0xBBA79C")]
	private void _MembershipChanged(List<SECTR_Sector> left, List<SECTR_Sector> joined)
	{
	}

	[Token(Token = "0x60006CE")]
	[Address(RVA = "0xBBA734", Offset = "0xBBA734", VA = "0xBBA734")]
	private void _HibernationChanged()
	{
	}

	[Token(Token = "0x60006CF")]
	[Address(RVA = "0xBBAB10", Offset = "0xBBAB10", VA = "0xBBAB10")]
	private void _WakeUp()
	{
	}

	[Token(Token = "0x60006D0")]
	[Address(RVA = "0xBBAAD0", Offset = "0xBBAAD0", VA = "0xBBAAD0")]
	private void _Hibernate()
	{
	}

	[Token(Token = "0x60006D1")]
	[Address(RVA = "0xBBAB4C", Offset = "0xBBAB4C", VA = "0xBBAB4C")]
	private void _UpdateComponents()
	{
	}

	[Token(Token = "0x60006D2")]
	[Address(RVA = "0xBBAFAC", Offset = "0xBBAFAC", VA = "0xBBAFAC")]
	public SECTR_Hibernator()
	{
	}
}
[Token(Token = "0x2000173")]
[AddComponentMenu("")]
public class SECTR_LightmapRef : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000174")]
	public class RefData
	{
		[Token(Token = "0x4000809")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Texture2D FarLightmap;

		[Token(Token = "0x400080A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Texture2D NearLightmap;

		[Token(Token = "0x400080B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int index;

		[Token(Token = "0x60006DD")]
		[Address(RVA = "0xBBB51C", Offset = "0xBBB51C", VA = "0xBBB51C")]
		public RefData()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x2000175")]
	public class RenderData
	{
		[Token(Token = "0x400080C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Renderer renderer;

		[Token(Token = "0x400080D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int rendererLightmapIndex;

		[Token(Token = "0x400080E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector4 rendererLightmapScaleOffset;

		[Token(Token = "0x400080F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Terrain terrain;

		[Token(Token = "0x4000810")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int terrainLightmapIndex;

		[Token(Token = "0x60006DE")]
		[Address(RVA = "0xBBB52C", Offset = "0xBBB52C", VA = "0xBBB52C")]
		public RenderData()
		{
		}
	}

	[Token(Token = "0x4000806")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[HideInInspector]
	private List<RefData> lightmapRefs;

	[Token(Token = "0x4000807")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[HideInInspector]
	[SerializeField]
	private List<RenderData> lightmapRenderRefs;

	[Token(Token = "0x4000808")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static int[] globalLightmapRefCount;

	[Token(Token = "0x170000E2")]
	public List<RefData> LightmapRefs
	{
		[Token(Token = "0x60006D7")]
		[Address(RVA = "0xBBB134", Offset = "0xBBB134", VA = "0xBBB134")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000E3")]
	public List<RenderData> LightmapRenderers
	{
		[Token(Token = "0x60006D8")]
		[Address(RVA = "0xBBB13C", Offset = "0xBBB13C", VA = "0xBBB13C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60006D9")]
	[Address(RVA = "0xBBB144", Offset = "0xBBB144", VA = "0xBBB144")]
	public static void InitRefCounts()
	{
	}

	[Token(Token = "0x60006DA")]
	[Address(RVA = "0xBBB2E0", Offset = "0xBBB2E0", VA = "0xBBB2E0")]
	private void Start()
	{
	}

	[Token(Token = "0x60006DB")]
	[Address(RVA = "0xBBB458", Offset = "0xBBB458", VA = "0xBBB458")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60006DC")]
	[Address(RVA = "0xBBB45C", Offset = "0xBBB45C", VA = "0xBBB45C")]
	public SECTR_LightmapRef()
	{
	}
}
[Token(Token = "0x2000176")]
public abstract class SECTR_Loader : MonoBehaviour
{
	[Token(Token = "0x4000811")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool locked;

	[Token(Token = "0x170000E4")]
	public abstract bool Loaded
	{
		[Token(Token = "0x60006DF")]
		get;
	}

	[Token(Token = "0x60006E0")]
	[Address(RVA = "0xBBB590", Offset = "0xBBB590", VA = "0xBBB590", Slot = "3")]
	public override string ToString()
	{
		return null;
	}

	[Token(Token = "0x60006E1")]
	[Address(RVA = "0xBBB5D0", Offset = "0xBBB5D0", VA = "0xBBB5D0")]
	protected void LockSelf(bool lockSelf)
	{
	}

	[Token(Token = "0x60006E2")]
	[Address(RVA = "0xBBB718", Offset = "0xBBB718", VA = "0xBBB718")]
	protected SECTR_Loader()
	{
	}
}
[Token(Token = "0x2000177")]
[AddComponentMenu("Procedural Worlds/SECTR/Stream/SECTR Loading Door")]
public class SECTR_LoadingDoor : SECTR_Door
{
	[Token(Token = "0x2000178")]
	private enum FadeMode
	{
		[Token(Token = "0x400081A")]
		None,
		[Token(Token = "0x400081B")]
		FadeIn,
		[Token(Token = "0x400081C")]
		FadeOut,
		[Token(Token = "0x400081D")]
		Hold
	}

	[Token(Token = "0x2000179")]
	private class LoadRequest
	{
		[Token(Token = "0x400081E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public SECTR_Chunk chunkToLoad;

		[Token(Token = "0x400081F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SECTR_Chunk chunkToUnload;

		[Token(Token = "0x4000820")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SECTR_Chunk loadedChunk;

		[Token(Token = "0x4000821")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool enteredFront;

		[Token(Token = "0x4000822")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool enteredBack;

		[Token(Token = "0x4000823")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public FadeMode fadeMode;

		[Token(Token = "0x4000824")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float fadeAmount;

		[Token(Token = "0x4000825")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float holdStart;

		[Token(Token = "0x60006EC")]
		[Address(RVA = "0xBBBC4C", Offset = "0xBBBC4C", VA = "0xBBBC4C")]
		public LoadRequest()
		{
		}
	}

	[Token(Token = "0x4000812")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Texture2D fadeTexture;

	[Token(Token = "0x4000813")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Dictionary<Collider, LoadRequest> loadRequests;

	[Token(Token = "0x4000814")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SECTR_ToolTip("Specifies which layers are allow to cause loads (vs simply opening the door).")]
	public LayerMask LoadLayers;

	[Token(Token = "0x4000815")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	[SECTR_ToolTip("Should screen fade to black before loading.")]
	public bool FadeBeforeLoad;

	[Token(Token = "0x4000816")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SECTR_ToolTip("How long to fade out before loading. Also, how long to fade back in.", "FadeBeforeLoad")]
	public float FadeTime;

	[Token(Token = "0x4000817")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	[SECTR_ToolTip("How long to stay faded out. Helps cover pops right at the moment of loading.", "FadeBeforeLoad")]
	public float HoldTime;

	[Token(Token = "0x4000818")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[SECTR_ToolTip("The color to fade the screen to on load.", "FadeBeforeLoad")]
	public Color FadeColor;

	[Token(Token = "0x60006E3")]
	[Address(RVA = "0xBBB720", Offset = "0xBBB720", VA = "0xBBB720", Slot = "4")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x60006E4")]
	[Address(RVA = "0xBBB7D0", Offset = "0xBBB7D0", VA = "0xBBB7D0", Slot = "5")]
	protected override void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60006E5")]
	[Address(RVA = "0xBBBC54", Offset = "0xBBBC54", VA = "0xBBBC54", Slot = "6")]
	protected override void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x60006E6")]
	[Address(RVA = "0xBBBF24", Offset = "0xBBBF24", VA = "0xBBBF24")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x60006E7")]
	[Address(RVA = "0xBBC2A8", Offset = "0xBBC2A8", VA = "0xBBC2A8", Slot = "7")]
	protected override bool CanOpen()
	{
		return default(bool);
	}

	[Token(Token = "0x60006E8")]
	[Address(RVA = "0xBBC42C", Offset = "0xBBC42C", VA = "0xBBC42C")]
	private void OnClose()
	{
	}

	[Token(Token = "0x60006E9")]
	[Address(RVA = "0xBBC354", Offset = "0xBBC354", VA = "0xBBC354")]
	private bool _IsSectorLoaded(SECTR_Sector sector)
	{
		return default(bool);
	}

	[Token(Token = "0x60006EA")]
	[Address(RVA = "0xBBBAD8", Offset = "0xBBBAD8", VA = "0xBBBAD8")]
	private SECTR_Chunk _GetOppositeChunk(Vector3 position)
	{
		return null;
	}

	[Token(Token = "0x60006EB")]
	[Address(RVA = "0xBBC570", Offset = "0xBBC570", VA = "0xBBC570")]
	public SECTR_LoadingDoor()
	{
	}
}
[Token(Token = "0x200017A")]
[AddComponentMenu("Procedural Worlds/SECTR/Stream/SECTR Neighbor Loader")]
[RequireComponent(typeof(SECTR_Member))]
public class SECTR_NeighborLoader : SECTR_Loader
{
	[Token(Token = "0x4000826")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private SECTR_Member cachedMember;

	[Token(Token = "0x4000827")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private List<SECTR_Sector> currentSectors;

	[Token(Token = "0x4000828")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private List<SECTR_Graph.Node> neighbors;

	[Token(Token = "0x4000829")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SECTR_ToolTip("Determines how far out to load neighbor sectors from the current sector. Depth of 0 means only the current Sector.")]
	public int MaxDepth;

	[Token(Token = "0x170000E5")]
	public override bool Loaded
	{
		[Token(Token = "0x60006EE")]
		[Address(RVA = "0xBBC654", Offset = "0xBBC654", VA = "0xBBC654", Slot = "4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60006ED")]
	[Address(RVA = "0xBBC614", Offset = "0xBBC614", VA = "0xBBC614", Slot = "3")]
	public override string ToString()
	{
		return null;
	}

	[Token(Token = "0x60006EF")]
	[Address(RVA = "0xBBC770", Offset = "0xBBC770", VA = "0xBBC770")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60006F0")]
	[Address(RVA = "0xBBC828", Offset = "0xBBC828", VA = "0xBBC828")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60006F1")]
	[Address(RVA = "0xBBCD38", Offset = "0xBBCD38", VA = "0xBBCD38")]
	private void Start()
	{
	}

	[Token(Token = "0x60006F2")]
	[Address(RVA = "0xBBCD40", Offset = "0xBBCD40", VA = "0xBBCD40")]
	private void Update()
	{
	}

	[Token(Token = "0x60006F3")]
	[Address(RVA = "0xBBC928", Offset = "0xBBC928", VA = "0xBBC928")]
	private void _MembershipChanged(List<SECTR_Sector> left, List<SECTR_Sector> joined)
	{
	}

	[Token(Token = "0x60006F4")]
	[Address(RVA = "0xBBCD78", Offset = "0xBBCD78", VA = "0xBBCD78")]
	public SECTR_NeighborLoader()
	{
	}
}
[Token(Token = "0x200017B")]
[AddComponentMenu("Procedural Worlds/SECTR/Stream/SECTR Region Loader")]
public class SECTR_RegionLoader : SECTR_Loader
{
	[Token(Token = "0x400082A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<SECTR_Sector> sectors;

	[Token(Token = "0x400082B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private List<SECTR_Sector> loadSectors;

	[Token(Token = "0x400082C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private List<SECTR_Sector> unloadSectors;

	[Token(Token = "0x400082D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool updated;

	[Token(Token = "0x400082E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SECTR_ToolTip("The dimensions of the volume in which terrain chunks should be loaded.")]
	public Vector3 LoadSize;

	[Token(Token = "0x400082F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SECTR_ToolTip("The distance from the load size that you need to move for a Sector to unload (as a percentage).", 0f, 1f)]
	public float UnloadBuffer;

	[Token(Token = "0x4000830")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[SECTR_ToolTip("If set, will only load Sectors in matching layers.")]
	public LayerMask LayersToLoad;

	[Token(Token = "0x170000E6")]
	public override bool Loaded
	{
		[Token(Token = "0x60006F6")]
		[Address(RVA = "0xBBCE88", Offset = "0xBBCE88", VA = "0xBBCE88", Slot = "4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60006F5")]
	[Address(RVA = "0xBBCE48", Offset = "0xBBCE48", VA = "0xBBCE48", Slot = "3")]
	public override string ToString()
	{
		return null;
	}

	[Token(Token = "0x60006F7")]
	[Address(RVA = "0xBBCFD0", Offset = "0xBBCFD0", VA = "0xBBCFD0")]
	private void Start()
	{
	}

	[Token(Token = "0x60006F8")]
	[Address(RVA = "0xBBCFD8", Offset = "0xBBCFD8", VA = "0xBBCFD8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60006F9")]
	[Address(RVA = "0xBBD134", Offset = "0xBBD134", VA = "0xBBD134")]
	private void Update()
	{
	}

	[Token(Token = "0x60006FA")]
	[Address(RVA = "0xBBD5B8", Offset = "0xBBD5B8", VA = "0xBBD5B8")]
	public SECTR_RegionLoader()
	{
	}
}
[Token(Token = "0x200017C")]
[AddComponentMenu("Procedural Worlds/SECTR/Stream/SECTR Start Loader")]
[RequireComponent(typeof(SECTR_Member))]
public class SECTR_StartLoader : SECTR_Loader
{
	[Token(Token = "0x4000831")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Texture2D fadeTexture;

	[Token(Token = "0x4000832")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float fadeAmount;

	[Token(Token = "0x4000833")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private SECTR_Member cachedMember;

	[Token(Token = "0x4000834")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SECTR_ToolTip("Set to true if the scene should start at black and fade in when loaded.")]
	public bool FadeIn;

	[Token(Token = "0x4000835")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SECTR_ToolTip("Amount of time to fade in.", "FadeIn")]
	public float FadeTime;

	[Token(Token = "0x4000836")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SECTR_ToolTip("The color to fade the screen to on load.", "FadeIn")]
	public Color FadeColor;

	[NonSerialized]
	[Token(Token = "0x4000837")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool Paused;

	[Token(Token = "0x170000E7")]
	public override bool Loaded
	{
		[Token(Token = "0x60006FC")]
		[Address(RVA = "0xBBD6DC", Offset = "0xBBD6DC", VA = "0xBBD6DC", Slot = "4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60006FB")]
	[Address(RVA = "0xBBD69C", Offset = "0xBBD69C", VA = "0xBBD69C", Slot = "3")]
	public override string ToString()
	{
		return null;
	}

	[Token(Token = "0x60006FD")]
	[Address(RVA = "0xBBD82C", Offset = "0xBBD82C", VA = "0xBBD82C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60006FE")]
	[Address(RVA = "0xBBD8F4", Offset = "0xBBD8F4", VA = "0xBBD8F4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60006FF")]
	[Address(RVA = "0xBBD900", Offset = "0xBBD900", VA = "0xBBD900")]
	private void Start()
	{
	}

	[Token(Token = "0x6000700")]
	[Address(RVA = "0xBBDA30", Offset = "0xBBDA30", VA = "0xBBDA30")]
	private void Update()
	{
	}

	[Token(Token = "0x6000701")]
	[Address(RVA = "0xBBDAC4", Offset = "0xBBDAC4", VA = "0xBBDAC4")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000702")]
	[Address(RVA = "0xBBDC28", Offset = "0xBBDC28", VA = "0xBBDC28")]
	public SECTR_StartLoader()
	{
	}
}
[Token(Token = "0x200017D")]
[AddComponentMenu("Procedural Worlds/SECTR/Stream/SECTR Trigger Loader")]
public class SECTR_TriggerLoader : SECTR_Loader
{
	[Token(Token = "0x4000838")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	protected int loadedCount;

	[Token(Token = "0x4000839")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected bool chunksReferenced;

	[Token(Token = "0x400083A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SECTR_ToolTip("List of Sectors to load when entering this trigger.")]
	public List<SECTR_Sector> Sectors;

	[Token(Token = "0x400083B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SECTR_ToolTip("Should the Sectors be unloaded when trigger is exited.")]
	public bool UnloadOnExit;

	[Token(Token = "0x170000E8")]
	public override bool Loaded
	{
		[Token(Token = "0x6000704")]
		[Address(RVA = "0xBBDC88", Offset = "0xBBDC88", VA = "0xBBDC88", Slot = "4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000703")]
	[Address(RVA = "0xBBDC48", Offset = "0xBBDC48", VA = "0xBBDC48", Slot = "3")]
	public override string ToString()
	{
		return null;
	}

	[Token(Token = "0x6000705")]
	[Address(RVA = "0xBBDDA4", Offset = "0xBBDDA4", VA = "0xBBDDA4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000706")]
	[Address(RVA = "0xBBDEF8", Offset = "0xBBDEF8", VA = "0xBBDEF8")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000707")]
	[Address(RVA = "0xBBE064", Offset = "0xBBE064", VA = "0xBBE064")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000708")]
	[Address(RVA = "0xBBDF24", Offset = "0xBBDF24", VA = "0xBBDF24")]
	private void _RefChunks()
	{
	}

	[Token(Token = "0x6000709")]
	[Address(RVA = "0xBBDDBC", Offset = "0xBBDDBC", VA = "0xBBDDBC")]
	private void _UnrefChunks()
	{
	}

	[Token(Token = "0x600070A")]
	[Address(RVA = "0xBBE088", Offset = "0xBBE088", VA = "0xBBE088")]
	public SECTR_TriggerLoader()
	{
	}
}
[Token(Token = "0x200017E")]
[ExecuteInEditMode]
[RequireComponent(typeof(SECTR_Member))]
[AddComponentMenu("")]
public class SECTR_Culler : MonoBehaviour
{
	[Token(Token = "0x400083C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private SECTR_Member cachedMember;

	[Token(Token = "0x400083D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SECTR_ToolTip("Overrides the culling information on Member.")]
	public bool CullEachChild;

	[Token(Token = "0x600070B")]
	[Address(RVA = "0xBBE10C", Offset = "0xBBE10C", VA = "0xBBE10C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600070C")]
	[Address(RVA = "0xBBE178", Offset = "0xBBE178", VA = "0xBBE178")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600070D")]
	[Address(RVA = "0xBBE17C", Offset = "0xBBE17C", VA = "0xBBE17C")]
	public SECTR_Culler()
	{
	}
}
[Token(Token = "0x200017F")]
[ExecuteInEditMode]
[RequireComponent(typeof(Camera))]
[AddComponentMenu("Procedural Worlds/SECTR/Vis/SECTR Culling Camera")]
public class SECTR_CullingCamera : MonoBehaviour
{
	[Token(Token = "0x2000180")]
	private struct VisibilityNode
	{
		[Token(Token = "0x4000870")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SECTR_Sector sector;

		[Token(Token = "0x4000871")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public SECTR_Portal portal;

		[Token(Token = "0x4000872")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<Plane> frustumPlanes;

		[Token(Token = "0x4000873")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool forwardTraversal;

		[Token(Token = "0x6000726")]
		[Address(RVA = "0xBC23B4", Offset = "0xBC23B4", VA = "0xBC23B4")]
		public VisibilityNode(SECTR_CullingCamera cullingCamera, SECTR_Sector sector, SECTR_Portal portal, Plane[] frustumPlanes, bool forwardTraversal)
		{
		}

		[Token(Token = "0x6000727")]
		[Address(RVA = "0xBC30C8", Offset = "0xBC30C8", VA = "0xBC30C8")]
		public VisibilityNode(SECTR_CullingCamera cullingCamera, SECTR_Sector sector, SECTR_Portal portal, List<Plane> frustumPlanes, bool forwardTraversal)
		{
		}
	}

	[Token(Token = "0x2000181")]
	private struct ClipVertex
	{
		[Token(Token = "0x4000874")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector4 vertex;

		[Token(Token = "0x4000875")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float side;

		[Token(Token = "0x6000728")]
		[Address(RVA = "0xBC26F4", Offset = "0xBC26F4", VA = "0xBC26F4")]
		public ClipVertex(Vector4 vertex, float side)
		{
		}
	}

	[Token(Token = "0x2000182")]
	private struct ThreadCullData
	{
		[Token(Token = "0x2000183")]
		public enum CullingModes
		{
			[Token(Token = "0x4000880")]
			None,
			[Token(Token = "0x4000881")]
			Graph,
			[Token(Token = "0x4000882")]
			Shadow
		}

		[Token(Token = "0x4000876")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SECTR_Sector sector;

		[Token(Token = "0x4000877")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Vector3 cameraPos;

		[Token(Token = "0x4000878")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<Plane> cullingPlanes;

		[Token(Token = "0x4000879")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<List<Plane>> occluderFrustums;

		[Token(Token = "0x400087A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int baseMask;

		[Token(Token = "0x400087B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float shadowDistance;

		[Token(Token = "0x400087C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool cullingSimpleCulling;

		[Token(Token = "0x400087D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public List<SECTR_Member.Child> sectorShadowLights;

		[Token(Token = "0x400087E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public CullingModes cullingMode;

		[Token(Token = "0x6000729")]
		[Address(RVA = "0xBC29EC", Offset = "0xBC29EC", VA = "0xBC29EC")]
		public ThreadCullData(SECTR_Sector sector, SECTR_CullingCamera cullingCamera, Vector3 cameraPos, List<Plane> cullingPlanes, List<List<Plane>> occluderFrustums, int baseMask, float shadowDistance, bool cullingSimpleCulling)
		{
		}

		[Token(Token = "0x600072A")]
		[Address(RVA = "0xBC4088", Offset = "0xBC4088", VA = "0xBC4088")]
		public ThreadCullData(SECTR_Sector sector, Vector3 cameraPos, List<SECTR_Member.Child> sectorShadowLights)
		{
		}
	}

	[Token(Token = "0x400083E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Camera myCamera;

	[Token(Token = "0x400083F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private SECTR_Member cullingMember;

	[Token(Token = "0x4000840")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Dictionary<int, SECTR_Member.Child> hiddenRenderers;

	[Token(Token = "0x4000841")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Dictionary<int, SECTR_Member.Child> hiddenLights;

	[Token(Token = "0x4000842")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Dictionary<int, SECTR_Member.Child> hiddenTerrains;

	[Token(Token = "0x4000843")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int renderersCulled;

	[Token(Token = "0x4000844")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private int lightsCulled;

	[Token(Token = "0x4000845")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int terrainsCulled;

	[Token(Token = "0x4000846")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private bool didCull;

	[Token(Token = "0x4000847")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
	private bool runOnce;

	[Token(Token = "0x4000848")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private List<SECTR_Sector> initialSectors;

	[Token(Token = "0x4000849")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Stack<VisibilityNode> nodeStack;

	[Token(Token = "0x400084A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private List<ClipVertex> portalVertices;

	[Token(Token = "0x400084B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private List<Plane> newFrustum;

	[Token(Token = "0x400084C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private List<Plane> cullingPlanes;

	[Token(Token = "0x400084D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private List<List<Plane>> occluderFrustums;

	[Token(Token = "0x400084E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Dictionary<SECTR_Occluder, SECTR_Occluder> activeOccluders;

	[Token(Token = "0x400084F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private List<ClipVertex> occluderVerts;

	[Token(Token = "0x4000850")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Dictionary<SECTR_Member.Child, int> shadowLights;

	[Token(Token = "0x4000851")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private List<SECTR_Sector> shadowSectors;

	[Token(Token = "0x4000852")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private Dictionary<SECTR_Sector, List<SECTR_Member.Child>> shadowSectorTable;

	[Token(Token = "0x4000853")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Dictionary<int, SECTR_Member.Child> visibleRenderers;

	[Token(Token = "0x4000854")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Dictionary<int, SECTR_Member.Child> visibleLights;

	[Token(Token = "0x4000855")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private Dictionary<int, SECTR_Member.Child> visibleTerrains;

	[Token(Token = "0x4000856")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private List<SECTR_Member.Child> visibleClothRenderers;

	[Token(Token = "0x4000857")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private Stack<List<Plane>> frustumPool;

	[Token(Token = "0x4000858")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private Stack<List<SECTR_Member.Child>> shadowLightPool;

	[Token(Token = "0x4000859")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private Stack<Dictionary<int, SECTR_Member.Child>> threadVisibleListPool;

	[Token(Token = "0x400085A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private Stack<Dictionary<SECTR_Member.Child, int>> threadShadowLightPool;

	[Token(Token = "0x400085B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private Stack<List<Plane>> threadFrustumPool;

	[Token(Token = "0x400085C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private Stack<List<List<Plane>>> threadOccluderPool;

	[Token(Token = "0x400085D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private List<Thread> workerThreads;

	[Token(Token = "0x400085E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private Queue<ThreadCullData> cullingWorkQueue;

	[Token(Token = "0x400085F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private int remainingThreadWork;

	[Token(Token = "0x4000860")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static List<SECTR_CullingCamera> allCullingCameras;

	[Token(Token = "0x4000861")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
	[SECTR_ToolTip("Allows multiple culling cameras to be active at once, but at the cost of some performance.")]
	public bool MultiCameraCulling;

	[Token(Token = "0x4000862")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10D")]
	[SECTR_ToolTip("Forces culling into a mode designed for 2D and iso games where the camera is always outside the scene.")]
	public bool SimpleCulling;

	[Token(Token = "0x4000863")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	[SECTR_ToolTip("Distance to draw clipped frustums.", 0f, 100f)]
	public float GizmoDistance;

	[Token(Token = "0x4000864")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	[SECTR_ToolTip("Material to use to render the debug frustum mesh.")]
	public Material GizmoMaterial;

	[Token(Token = "0x4000865")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	[SECTR_ToolTip("Makes the Editor camera display the Game view's culling while playing in editor.")]
	public bool CullInEditor;

	[Token(Token = "0x4000866")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x121")]
	[SECTR_ToolTip("Set to false to disable shadow culling post pass.", true)]
	public bool CullShadows;

	[Token(Token = "0x4000867")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	[SECTR_ToolTip("Use another camera for culling properties.", true)]
	public Camera cullingProxy;

	[Token(Token = "0x4000868")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	[SECTR_ToolTip("Number of worker threads for culling. Do not set this too high or you may see hitching.", 0f, -1f)]
	public int NumWorkerThreads;

	[Token(Token = "0x4000869")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
	[SECTR_ToolTip("Enables a workaround when using Scripted Rendering Pipelines (HDRP/URP/LWRP). Keep disabled if using built-in rendering.", 0f, -1f)]
	public bool SRP_Fix;

	[Token(Token = "0x400086A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private Transform xForm;

	[Token(Token = "0x400086B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private float maxCameraFOVAngle;

	[Token(Token = "0x400086C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
	private float maxCameraFOV;

	[Token(Token = "0x400086D")]
	private const float kNEAR_CLIP_SCALE = 1.001f;

	[Token(Token = "0x400086E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private float maxNearClipDistance;

	[Token(Token = "0x400086F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	private Camera cullingCamera;

	[Token(Token = "0x170000E9")]
	public static List<SECTR_CullingCamera> All
	{
		[Token(Token = "0x600070E")]
		[Address(RVA = "0xBBE184", Offset = "0xBBE184", VA = "0xBBE184")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000EA")]
	public int RenderersCulled
	{
		[Token(Token = "0x600070F")]
		[Address(RVA = "0xBBE1DC", Offset = "0xBBE1DC", VA = "0xBBE1DC")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170000EB")]
	public int LightsCulled
	{
		[Token(Token = "0x6000710")]
		[Address(RVA = "0xBBE1E4", Offset = "0xBBE1E4", VA = "0xBBE1E4")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170000EC")]
	public int TerrainsCulled
	{
		[Token(Token = "0x6000711")]
		[Address(RVA = "0xBBE1EC", Offset = "0xBBE1EC", VA = "0xBBE1EC")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x6000712")]
	[Address(RVA = "0xBBE1F4", Offset = "0xBBE1F4", VA = "0xBBE1F4")]
	public void ResetStats()
	{
	}

	[Token(Token = "0x6000713")]
	[Address(RVA = "0xBBE204", Offset = "0xBBE204", VA = "0xBBE204")]
	private void RenderPipeline_beginFrameRendering(ScriptableRenderContext ScriptableRenderContext, Camera[] obj)
	{
	}

	[Token(Token = "0x6000714")]
	[Address(RVA = "0xBC0E24", Offset = "0xBC0E24", VA = "0xBC0E24")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000715")]
	[Address(RVA = "0xBC1210", Offset = "0xBC1210", VA = "0xBC1210")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000716")]
	[Address(RVA = "0xBC1610", Offset = "0xBC1610", VA = "0xBC1610")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000717")]
	[Address(RVA = "0xBBE208", Offset = "0xBBE208", VA = "0xBBE208")]
	private void OnPreCull()
	{
	}

	[Token(Token = "0x6000718")]
	[Address(RVA = "0xBC47E0", Offset = "0xBC47E0", VA = "0xBC47E0")]
	private void _CullingWorker()
	{
	}

	[Token(Token = "0x6000719")]
	[Address(RVA = "0xBC31E8", Offset = "0xBC31E8", VA = "0xBC31E8")]
	private void _FrustumCullSectorThread(ThreadCullData cullData)
	{
	}

	[Token(Token = "0x600071A")]
	[Address(RVA = "0xBC41E0", Offset = "0xBC41E0", VA = "0xBC41E0")]
	private void _ShadowCullSectorThread(ThreadCullData cullData)
	{
	}

	[Token(Token = "0x600071B")]
	[Address(RVA = "0xBC2F10", Offset = "0xBC2F10", VA = "0xBC2F10")]
	private static void _FrustumCullSector(SECTR_Sector sector, Vector3 cameraPos, List<Plane> cullingPlanes, List<List<Plane>> occluderFrustums, int baseMask, float shadowDistance, bool forceGroupCull, ref Dictionary<int, SECTR_Member.Child> visibleRenderers, ref Dictionary<int, SECTR_Member.Child> visibleLights, ref Dictionary<int, SECTR_Member.Child> visibleTerrains, ref Dictionary<SECTR_Member.Child, int> shadowLights)
	{
	}

	[Token(Token = "0x600071C")]
	[Address(RVA = "0xBC49D0", Offset = "0xBC49D0", VA = "0xBC49D0")]
	private static void _FrustumCull(SECTR_Member member, Vector3 cameraPos, List<Plane> frustumPlanes, List<List<Plane>> occluders, int baseMask, float shadowDistance, bool forceGroupCull, ref Dictionary<int, SECTR_Member.Child> visibleRenderers, ref Dictionary<int, SECTR_Member.Child> visibleLights, ref Dictionary<int, SECTR_Member.Child> visibleTerrains, ref Dictionary<SECTR_Member.Child, int> shadowLights)
	{
	}

	[Token(Token = "0x600071D")]
	[Address(RVA = "0xBC40B0", Offset = "0xBC40B0", VA = "0xBC40B0")]
	private static void _ShadowCullSector(SECTR_Sector sector, List<SECTR_Member.Child> sectorShadowLights, ref Dictionary<int, SECTR_Member.Child> visibleRenderers, ref Dictionary<int, SECTR_Member.Child> visibleTerrains)
	{
	}

	[Token(Token = "0x600071E")]
	[Address(RVA = "0xBC5128", Offset = "0xBC5128", VA = "0xBC5128")]
	private static void _ShadowCull(SECTR_Member member, List<SECTR_Member.Child> shadowLights, ref Dictionary<int, SECTR_Member.Child> visibleRenderers, ref Dictionary<int, SECTR_Member.Child> visibleTerrains)
	{
	}

	[Token(Token = "0x600071F")]
	[Address(RVA = "0xBC5014", Offset = "0xBC5014", VA = "0xBC5014")]
	private static bool _IsVisible(Bounds childBounds, List<Plane> frustumPlanes, int parentMask, List<List<Plane>> occluders)
	{
		return default(bool);
	}

	[Token(Token = "0x6000720")]
	[Address(RVA = "0xBC1928", Offset = "0xBC1928", VA = "0xBC1928")]
	private void _HideAllMembers()
	{
	}

	[Token(Token = "0x6000721")]
	[Address(RVA = "0xBC1E6C", Offset = "0xBC1E6C", VA = "0xBC1E6C")]
	private void _ApplyCulling(bool visible)
	{
	}

	[Token(Token = "0x6000722")]
	[Address(RVA = "0xBC1390", Offset = "0xBC1390", VA = "0xBC1390")]
	private void _UndoCulling()
	{
	}

	[Token(Token = "0x6000723")]
	[Address(RVA = "0xBC2704", Offset = "0xBC2704", VA = "0xBC2704")]
	private void _BuildFrustumFromHull(Camera cullingCamera, bool forwardTraversal, List<ClipVertex> portalVertices, ref List<Plane> newFrustum)
	{
	}

	[Token(Token = "0x6000724")]
	[Address(RVA = "0xBC567C", Offset = "0xBC567C", VA = "0xBC567C")]
	public SECTR_CullingCamera()
	{
	}
}
[Token(Token = "0x2000184")]
[ExecuteInEditMode]
[RequireComponent(typeof(SECTR_Member))]
[AddComponentMenu("Procedural Worlds/SECTR/Vis/SECTR LOD")]
public class SECTR_LOD : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000185")]
	public class LODEntry
	{
		[Token(Token = "0x400088E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GameObject gameObject;

		[Token(Token = "0x400088F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Renderer lightmapSource;

		[Token(Token = "0x6000734")]
		[Address(RVA = "0xBC6EC4", Offset = "0xBC6EC4", VA = "0xBC6EC4")]
		public LODEntry()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x2000186")]
	public class LODSet
	{
		[Token(Token = "0x4000890")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private List<LODEntry> lodEntries;

		[Token(Token = "0x4000891")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float threshold;

		[Token(Token = "0x170000EE")]
		public List<LODEntry> LODEntries
		{
			[Token(Token = "0x6000735")]
			[Address(RVA = "0xBC6ECC", Offset = "0xBC6ECC", VA = "0xBC6ECC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000EF")]
		public float Threshold
		{
			[Token(Token = "0x6000736")]
			[Address(RVA = "0xBC6ED4", Offset = "0xBC6ED4", VA = "0xBC6ED4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000737")]
			[Address(RVA = "0xBC6EDC", Offset = "0xBC6EDC", VA = "0xBC6EDC")]
			set
			{
			}
		}

		[Token(Token = "0x6000738")]
		[Address(RVA = "0xBC6EE4", Offset = "0xBC6EE4", VA = "0xBC6EE4")]
		public LODEntry Add(GameObject gameObject, Renderer lightmapSource)
		{
			return null;
		}

		[Token(Token = "0x6000739")]
		[Address(RVA = "0xBC70D0", Offset = "0xBC70D0", VA = "0xBC70D0")]
		public void Remove(GameObject gameObject)
		{
		}

		[Token(Token = "0x600073A")]
		[Address(RVA = "0xBC6FE0", Offset = "0xBC6FE0", VA = "0xBC6FE0")]
		public LODEntry GetEntry(GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x600073B")]
		[Address(RVA = "0xBC71DC", Offset = "0xBC71DC", VA = "0xBC71DC")]
		public LODSet()
		{
		}
	}

	[Token(Token = "0x2000187")]
	[Flags]
	public enum SiblinglFlags
	{
		[Token(Token = "0x4000893")]
		Behaviors = 1,
		[Token(Token = "0x4000894")]
		Renderers = 2,
		[Token(Token = "0x4000895")]
		Lights = 4,
		[Token(Token = "0x4000896")]
		Colliders = 8,
		[Token(Token = "0x4000897")]
		RigidBodies = 0x10
	}

	[Token(Token = "0x4000883")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[HideInInspector]
	private Vector3 boundsOffset;

	[Token(Token = "0x4000884")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[HideInInspector]
	[SerializeField]
	private float boundsRadius;

	[Token(Token = "0x4000885")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	[HideInInspector]
	private bool boundsUpdated;

	[Token(Token = "0x4000886")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private int activeLOD;

	[Token(Token = "0x4000887")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool siblingsDisabled;

	[Token(Token = "0x4000888")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private SECTR_Member cachedMember;

	[Token(Token = "0x4000889")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private List<GameObject> toHide;

	[Token(Token = "0x400088A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private List<LODEntry> toShow;

	[Token(Token = "0x400088B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static List<SECTR_LOD> allLODs;

	[Token(Token = "0x400088C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public List<LODSet> LODs;

	[Token(Token = "0x400088D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SECTR_ToolTip("Determines which sibling components are disabled when the LOD is culled.", null, typeof(SiblinglFlags))]
	public SiblinglFlags CullSiblings;

	[Token(Token = "0x170000ED")]
	public static List<SECTR_LOD> All
	{
		[Token(Token = "0x600072B")]
		[Address(RVA = "0xBC5D58", Offset = "0xBC5D58", VA = "0xBC5D58")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600072C")]
	[Address(RVA = "0xBC16C8", Offset = "0xBC16C8", VA = "0xBC16C8")]
	public void SelectLOD(Camera renderCamera)
	{
	}

	[Token(Token = "0x600072D")]
	[Address(RVA = "0xBC695C", Offset = "0xBC695C", VA = "0xBC695C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600072E")]
	[Address(RVA = "0xBC6BB0", Offset = "0xBC6BB0", VA = "0xBC6BB0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600072F")]
	[Address(RVA = "0xBC6C38", Offset = "0xBC6C38", VA = "0xBC6C38")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x6000730")]
	[Address(RVA = "0xBC614C", Offset = "0xBC614C", VA = "0xBC614C")]
	private void _ActivateLOD(int lodIndex)
	{
	}

	[Token(Token = "0x6000731")]
	[Address(RVA = "0xBC5DB0", Offset = "0xBC5DB0", VA = "0xBC5DB0")]
	private void _CalculateBounds()
	{
	}

	[Token(Token = "0x6000732")]
	[Address(RVA = "0xBC6D28", Offset = "0xBC6D28", VA = "0xBC6D28")]
	public SECTR_LOD()
	{
	}
}
[Token(Token = "0x2000188")]
[AddComponentMenu("Procedural Worlds/SECTR/Vis/SECTR Occluder")]
[RequireComponent(typeof(SECTR_Member))]
public class SECTR_Occluder : SECTR_Hull
{
	[Token(Token = "0x2000189")]
	public enum OrientationAxis
	{
		[Token(Token = "0x400089E")]
		None,
		[Token(Token = "0x400089F")]
		XYZ,
		[Token(Token = "0x40008A0")]
		XZ,
		[Token(Token = "0x40008A1")]
		XY,
		[Token(Token = "0x40008A2")]
		YZ
	}

	[Token(Token = "0x4000898")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private SECTR_Member cachedMember;

	[Token(Token = "0x4000899")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private List<SECTR_Sector> currentSectors;

	[Token(Token = "0x400089A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static List<SECTR_Occluder> allOccluders;

	[Token(Token = "0x400089B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static Dictionary<SECTR_Sector, List<SECTR_Occluder>> occluderTable;

	[Token(Token = "0x400089C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SECTR_ToolTip("The axes that should orient towards the camera during culling (if any).")]
	public OrientationAxis AutoOrient;

	[Token(Token = "0x170000F0")]
	public static List<SECTR_Occluder> All
	{
		[Token(Token = "0x600073C")]
		[Address(RVA = "0xBC725C", Offset = "0xBC725C", VA = "0xBC725C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000F1")]
	public SECTR_Member Member
	{
		[Token(Token = "0x600073E")]
		[Address(RVA = "0xBC72B4", Offset = "0xBC72B4", VA = "0xBC72B4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000F2")]
	public Vector3 MeshNormal
	{
		[Token(Token = "0x600073F")]
		[Address(RVA = "0xBC26D4", Offset = "0xBC26D4", VA = "0xBC26D4")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x600073D")]
	[Address(RVA = "0xBC24D4", Offset = "0xBC24D4", VA = "0xBC24D4")]
	public static List<SECTR_Occluder> GetOccludersInSector(SECTR_Sector sector)
	{
		return null;
	}

	[Token(Token = "0x6000740")]
	[Address(RVA = "0xBC256C", Offset = "0xBC256C", VA = "0xBC256C")]
	public Matrix4x4 GetCullingMatrix(Vector3 cameraPos)
	{
		return default(Matrix4x4);
	}

	[Token(Token = "0x6000741")]
	[Address(RVA = "0xBC72BC", Offset = "0xBC72BC", VA = "0xBC72BC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000742")]
	[Address(RVA = "0xBC741C", Offset = "0xBC741C", VA = "0xBC741C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000743")]
	[Address(RVA = "0xBC7504", Offset = "0xBC7504", VA = "0xBC7504")]
	private void _MembershipChanged(List<SECTR_Sector> left, List<SECTR_Sector> joined)
	{
	}

	[Token(Token = "0x6000744")]
	[Address(RVA = "0xBC7918", Offset = "0xBC7918", VA = "0xBC7918")]
	public SECTR_Occluder()
	{
	}
}
[Token(Token = "0x200018A")]
public enum ForceTubeVRChannel
{
	[Token(Token = "0x40008A4")]
	all,
	[Token(Token = "0x40008A5")]
	rifle,
	[Token(Token = "0x40008A6")]
	rifleButt,
	[Token(Token = "0x40008A7")]
	rifleBolt,
	[Token(Token = "0x40008A8")]
	pistol1,
	[Token(Token = "0x40008A9")]
	pistol2,
	[Token(Token = "0x40008AA")]
	other,
	[Token(Token = "0x40008AB")]
	vest
}
[Token(Token = "0x200018B")]
public class ForceTubeVRInterface : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x200018C")]
	public class ConnectedChannels
	{
		[Token(Token = "0x40008B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string[] Connected;

		[Token(Token = "0x600075C")]
		[Address(RVA = "0xBC9650", Offset = "0xBC9650", VA = "0xBC9650")]
		public ConnectedChannels()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x200018D")]
	public class FTChannel
	{
		[Token(Token = "0x40008B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x40008B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int batteryLevel;

		[Token(Token = "0x600075D")]
		[Address(RVA = "0xBC8D50", Offset = "0xBC8D50", VA = "0xBC8D50")]
		public FTChannel()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x200018E")]
	public class FTCType
	{
		[Token(Token = "0x40008B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<FTChannel> rifleButt;

		[Token(Token = "0x40008B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<FTChannel> rifleBolt;

		[Token(Token = "0x40008B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<FTChannel> pistol1;

		[Token(Token = "0x40008B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<FTChannel> pistol2;

		[Token(Token = "0x40008B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public List<FTChannel> other;

		[Token(Token = "0x40008B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public List<FTChannel> vest;

		[Token(Token = "0x600075E")]
		[Address(RVA = "0xBC9658", Offset = "0xBC9658", VA = "0xBC9658")]
		public FTCType()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x200018F")]
	public class FTChannelFile
	{
		[Token(Token = "0x40008B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public FTCType channels;

		[Token(Token = "0x600075F")]
		[Address(RVA = "0xBC9660", Offset = "0xBC9660", VA = "0xBC9660")]
		public FTChannelFile()
		{
		}
	}

	[Token(Token = "0x2000190")]
	[CompilerGenerated]
	private sealed class <InitAndroid>d__2 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40008BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40008BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40008BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool pistolsFirst;

		[Token(Token = "0x170000F3")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000763")]
			[Address(RVA = "0xBC9A84", Offset = "0xBC9A84", VA = "0xBC9A84", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000F4")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000765")]
			[Address(RVA = "0xBC9ACC", Offset = "0xBC9ACC", VA = "0xBC9ACC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000760")]
		[Address(RVA = "0xBC7AE4", Offset = "0xBC7AE4", VA = "0xBC7AE4")]
		[DebuggerHidden]
		public <InitAndroid>d__2(int <>1__state)
		{
		}

		[Token(Token = "0x6000761")]
		[Address(RVA = "0xBC9668", Offset = "0xBC9668", VA = "0xBC9668", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000762")]
		[Address(RVA = "0xBC966C", Offset = "0xBC966C", VA = "0xBC966C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000764")]
		[Address(RVA = "0xBC9A8C", Offset = "0xBC9A8C", VA = "0xBC9A8C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40008AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static AndroidJavaObject ForceTubeVRPlugin;

	[Token(Token = "0x40008AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static ForceTubeVRInterface instance;

	[Token(Token = "0x40008AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static int numDevices;

	[Token(Token = "0x40008AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public static bool swapChannels;

	[Token(Token = "0x6000746")]
	[Address(RVA = "0xBC7A78", Offset = "0xBC7A78", VA = "0xBC7A78")]
	[IteratorStateMachine(typeof(<InitAndroid>d__2))]
	private static IEnumerator InitAndroid(bool pistolsFirst)
	{
		return null;
	}

	[Token(Token = "0x6000747")]
	[Address(RVA = "0xBC7B0C", Offset = "0xBC7B0C", VA = "0xBC7B0C")]
	public static void InitAsync(bool pistolsFirst = false)
	{
	}

	[Token(Token = "0x6000748")]
	[Address(RVA = "0xBC7C50", Offset = "0xBC7C50", VA = "0xBC7C50")]
	public static void GetConnectedDeviceInformation()
	{
	}

	[Token(Token = "0x6000749")]
	[Address(RVA = "0xBC7E94", Offset = "0xBC7E94", VA = "0xBC7E94")]
	public static void Kick(sbyte power, ForceTubeVRChannel target = ForceTubeVRChannel.rifle)
	{
	}

	[Token(Token = "0x600074A")]
	[Address(RVA = "0xBC7FF8", Offset = "0xBC7FF8", VA = "0xBC7FF8")]
	public static void Rumble(byte power, float duration, ForceTubeVRChannel target = ForceTubeVRChannel.rifle)
	{
	}

	[Token(Token = "0x600074B")]
	[Address(RVA = "0xBC81C8", Offset = "0xBC81C8", VA = "0xBC81C8")]
	public static void Shoot(byte kickPower, byte rumblePower, float rumbleDuration, ForceTubeVRChannel target = ForceTubeVRChannel.rifle)
	{
	}

	[Token(Token = "0x600074C")]
	[Address(RVA = "0xBC83E0", Offset = "0xBC83E0", VA = "0xBC83E0")]
	public static void SetActiveResearch(bool active)
	{
	}

	[Token(Token = "0x600074D")]
	[Address(RVA = "0xBC84EC", Offset = "0xBC84EC", VA = "0xBC84EC")]
	public static byte TempoToKickPower(float tempo)
	{
		return default(byte);
	}

	[Token(Token = "0x600074E")]
	[Address(RVA = "0xBC8610", Offset = "0xBC8610", VA = "0xBC8610")]
	public static byte GetBatteryLevel()
	{
		return default(byte);
	}

	[Token(Token = "0x600074F")]
	[Address(RVA = "0xBC7D9C", Offset = "0xBC7D9C", VA = "0xBC7D9C")]
	public static string ListConnectedForceTube()
	{
		return null;
	}

	[Token(Token = "0x6000750")]
	[Address(RVA = "0xBC86F4", Offset = "0xBC86F4", VA = "0xBC86F4")]
	public static string ListChannels()
	{
		return null;
	}

	[Token(Token = "0x6000751")]
	[Address(RVA = "0xBC87EC", Offset = "0xBC87EC", VA = "0xBC87EC")]
	public static bool InitChannels(string sJsonChannelList)
	{
		return default(bool);
	}

	[Token(Token = "0x6000752")]
	[Address(RVA = "0xBC88C4", Offset = "0xBC88C4", VA = "0xBC88C4")]
	public static bool LoadChannelJSon()
	{
		return default(bool);
	}

	[Token(Token = "0x6000753")]
	[Address(RVA = "0xBC89A8", Offset = "0xBC89A8", VA = "0xBC89A8")]
	public static bool SaveChannelJSon()
	{
		return default(bool);
	}

	[Token(Token = "0x6000754")]
	[Address(RVA = "0xBC8A8C", Offset = "0xBC8A8C", VA = "0xBC8A8C")]
	public static bool AddToChannel(int nChannel, string sName)
	{
		return default(bool);
	}

	[Token(Token = "0x6000755")]
	[Address(RVA = "0xBC8D58", Offset = "0xBC8D58", VA = "0xBC8D58")]
	public static bool RemoveFromChannel(int nChannel, string sName)
	{
		return default(bool);
	}

	[Token(Token = "0x6000756")]
	[Address(RVA = "0xBC9208", Offset = "0xBC9208", VA = "0xBC9208")]
	public static void ClearChannel(int nChannel)
	{
	}

	[Token(Token = "0x6000757")]
	[Address(RVA = "0xBC9314", Offset = "0xBC9314", VA = "0xBC9314")]
	public static void ClearAllChannel()
	{
	}

	[Token(Token = "0x6000758")]
	[Address(RVA = "0xBC93E4", Offset = "0xBC93E4", VA = "0xBC93E4")]
	public static void OpenBluetoothSettings()
	{
	}

	[Token(Token = "0x6000759")]
	[Address(RVA = "0xBC94B0", Offset = "0xBC94B0", VA = "0xBC94B0")]
	public static void DisconnectAll()
	{
	}

	[Token(Token = "0x600075A")]
	[Address(RVA = "0xBC957C", Offset = "0xBC957C", VA = "0xBC957C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600075B")]
	[Address(RVA = "0xBC9648", Offset = "0xBC9648", VA = "0xBC9648")]
	public ForceTubeVRInterface()
	{
	}
}
[Token(Token = "0x2000192")]
[CreateAssetMenu(fileName = "AchievementDatabase", menuName = "Settings/AchievementDatabase")]
public class AchievementDatabase : AchievementsData
{
	[Token(Token = "0x40008BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static AchievementDatabase _instance;

	[Token(Token = "0x40008BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Action onAchievementCompleted;

	[Token(Token = "0x40008C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Action onAchievementClaimed;

	[Token(Token = "0x40008C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public bool debugVerbose;

	[Token(Token = "0x40008C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
	private bool achievementsDirty;

	[Token(Token = "0x170000F5")]
	public static AchievementDatabase instance
	{
		[Token(Token = "0x600076D")]
		[Address(RVA = "0xBC9BAC", Offset = "0xBC9BAC", VA = "0xBC9BAC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000F6")]
	public List<AchievementData> data
	{
		[Token(Token = "0x600076E")]
		[Address(RVA = "0xBC9C98", Offset = "0xBC9C98", VA = "0xBC9C98")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600076F")]
	[Address(RVA = "0xBC9CA0", Offset = "0xBC9CA0", VA = "0xBC9CA0")]
	public void AssignAchievements()
	{
	}

	[Token(Token = "0x6000770")]
	[Address(RVA = "0xBCA594", Offset = "0xBCA594", VA = "0xBCA594")]
	public void RemoteAchievements(IAchievements achievementsData)
	{
	}

	[Token(Token = "0x6000771")]
	[Address(RVA = "0xBCA884", Offset = "0xBCA884", VA = "0xBCA884")]
	public int GetAchievementReward(string achievementApiName)
	{
		return default(int);
	}

	[Token(Token = "0x6000772")]
	[Address(RVA = "0xBCA974", Offset = "0xBCA974", VA = "0xBCA974")]
	public void ResetStat(params string[] args)
	{
	}

	[Token(Token = "0x6000773")]
	[Address(RVA = "0xBCA550", Offset = "0xBCA550", VA = "0xBCA550")]
	public void UpdateStat(bool enable, params string[] args)
	{
	}

	[Token(Token = "0x6000774")]
	[Address(RVA = "0xBCAA28", Offset = "0xBCAA28", VA = "0xBCAA28")]
	private void EvaluateStat(ScoreData.StatSchemaDatum evet)
	{
	}

	[Token(Token = "0x6000775")]
	[Address(RVA = "0xBCACA8", Offset = "0xBCACA8", VA = "0xBCACA8")]
	private void UnlockRemoteAchievement(string ach)
	{
	}

	[Token(Token = "0x6000776")]
	[Address(RVA = "0xBCADE4", Offset = "0xBCADE4", VA = "0xBCADE4")]
	public bool Save()
	{
		return default(bool);
	}

	[Token(Token = "0x6000777")]
	[Address(RVA = "0xBCA4E0", Offset = "0xBCA4E0", VA = "0xBCA4E0")]
	public void UpdateStat(int integer, params string[] args)
	{
	}

	[Token(Token = "0x6000778")]
	[Address(RVA = "0xBCA990", Offset = "0xBCA990", VA = "0xBCA990")]
	private ScoreData.StatSchemaDatum GetEvent(params string[] args)
	{
		return null;
	}

	[Token(Token = "0x6000779")]
	[Address(RVA = "0xBCAE18", Offset = "0xBCAE18", VA = "0xBCAE18")]
	public bool EvaluateAllAchievements()
	{
		return default(bool);
	}

	[Token(Token = "0x600077A")]
	[Address(RVA = "0xBCAF84", Offset = "0xBCAF84", VA = "0xBCAF84")]
	private void Log(string msg)
	{
	}

	[Token(Token = "0x600077B")]
	[Address(RVA = "0xBCAB7C", Offset = "0xBCAB7C", VA = "0xBCAB7C")]
	public bool EvaluateAchievement(string apiName)
	{
		return default(bool);
	}

	[Token(Token = "0x600077C")]
	[Address(RVA = "0xBCAFF4", Offset = "0xBCAFF4", VA = "0xBCAFF4")]
	private bool EvaluateAchievement(string apiName, bool evaluateAll, Func<ScoreData.StatSchemaDatum, AchievementData.EventGroup, bool> compare)
	{
		return default(bool);
	}

	[Token(Token = "0x600077D")]
	[Address(RVA = "0xBCB504", Offset = "0xBCB504", VA = "0xBCB504")]
	public bool GetAchievementClaimed(string achievementName)
	{
		return default(bool);
	}

	[Token(Token = "0x600077E")]
	[Address(RVA = "0xBCB5EC", Offset = "0xBCB5EC", VA = "0xBCB5EC")]
	public void AchievementClaimed(string achievementName)
	{
	}

	[Token(Token = "0x600077F")]
	[Address(RVA = "0xBCA804", Offset = "0xBCA804", VA = "0xBCA804")]
	public void AchievementCompleted(string achievementName)
	{
	}

	[Token(Token = "0x6000780")]
	[Address(RVA = "0xBCA7BC", Offset = "0xBCA7BC", VA = "0xBCA7BC")]
	public bool GetAchievementCompleted(string achievementName)
	{
		return default(bool);
	}

	[Token(Token = "0x6000781")]
	[Address(RVA = "0xBCB714", Offset = "0xBCB714", VA = "0xBCB714")]
	public int GetUnlockedAchievementsCount()
	{
		return default(int);
	}

	[Token(Token = "0x6000782")]
	[Address(RVA = "0xBCB54C", Offset = "0xBCB54C", VA = "0xBCB54C")]
	private bool GetAchievementFlag(string achievementName, string flag)
	{
		return default(bool);
	}

	[Token(Token = "0x6000783")]
	[Address(RVA = "0xBCB66C", Offset = "0xBCB66C", VA = "0xBCB66C")]
	private void SetAchievementFlag(string achievementName, string flag, bool value)
	{
	}

	[Token(Token = "0x6000784")]
	[Address(RVA = "0xBCB910", Offset = "0xBCB910", VA = "0xBCB910")]
	private bool Compare(AchievementData.Event evnt, ScoreData.StatSchemaDatum data)
	{
		return default(bool);
	}

	[Token(Token = "0x6000785")]
	[Address(RVA = "0xBCB204", Offset = "0xBCB204", VA = "0xBCB204")]
	private bool EvaluateGroups(AchievementData.EventGroup group, Dictionary<string, ScoreData.StatSchemaDatum> childSchema, Func<ScoreData.StatSchemaDatum, AchievementData.EventGroup, bool> compare, bool evaluateAll, string schemaName)
	{
		return default(bool);
	}

	[Token(Token = "0x6000786")]
	[Address(RVA = "0xBCBF80", Offset = "0xBCBF80", VA = "0xBCBF80")]
	private bool EvaluateEvent(ScoreData.StatSchemaDatum schemaData, AchievementData.EventGroup group)
	{
		return default(bool);
	}

	[Token(Token = "0x6000787")]
	[Address(RVA = "0xBCBE34", Offset = "0xBCBE34", VA = "0xBCBE34")]
	private bool EvaluateGroup(string eventId, AchievementData.EventGroup group, Dictionary<string, ScoreData.StatSchemaDatum> childSchema, Func<ScoreData.StatSchemaDatum, AchievementData.EventGroup, bool> compare, bool evaluateAll, string schemaName)
	{
		return default(bool);
	}

	[Token(Token = "0x6000788")]
	[Address(RVA = "0xBCBC50", Offset = "0xBCBC50", VA = "0xBCBC50")]
	private bool EvaluateGroup(string eventId, AchievementData.EventListGroup group, Dictionary<string, ScoreData.StatSchemaDatum> childSchema, Func<ScoreData.StatSchemaDatum, AchievementData.EventGroup, bool> compare, bool evaluateAll, string schemaName)
	{
		return default(bool);
	}

	[Token(Token = "0x6000789")]
	[Address(RVA = "0xBCC050", Offset = "0xBCC050", VA = "0xBCC050")]
	public float AchievementProgress(string apiName)
	{
		return default(float);
	}

	[Token(Token = "0x600078A")]
	[Address(RVA = "0xBCC058", Offset = "0xBCC058", VA = "0xBCC058")]
	public void AddEventGroup(string name, string[] events)
	{
	}

	[Token(Token = "0x600078B")]
	[Address(RVA = "0xBCC3F0", Offset = "0xBCC3F0", VA = "0xBCC3F0")]
	public void LinkAchievementsToEvents()
	{
	}

	[Token(Token = "0x600078C")]
	[Address(RVA = "0xBCC604", Offset = "0xBCC604", VA = "0xBCC604", Slot = "4")]
	protected override void Init()
	{
	}

	[Token(Token = "0x600078D")]
	[Address(RVA = "0xBCC60C", Offset = "0xBCC60C", VA = "0xBCC60C")]
	public AchievementDatabase()
	{
	}
}
[Token(Token = "0x2000196")]
public enum AttachmentType
{
	[Token(Token = "0x40008C7")]
	Knife,
	[Token(Token = "0x40008C8")]
	Gun,
	[Token(Token = "0x40008C9")]
	Eyewear,
	[Token(Token = "0x40008CA")]
	Hair,
	[Token(Token = "0x40008CB")]
	Hat
}
[Serializable]
[Token(Token = "0x2000197")]
public class Attachment
{
	[Token(Token = "0x40008CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public GameObject prefab;

	[Token(Token = "0x6000794")]
	[Address(RVA = "0xBCC69C", Offset = "0xBCC69C", VA = "0xBCC69C")]
	public Attachment()
	{
	}
}
[Token(Token = "0x2000198")]
[CreateAssetMenu(fileName = "AttachmentSet", menuName = "Settings/AttachmentSet")]
public class AttachmentSet : ScriptableObject
{
	[Token(Token = "0x40008CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float noEquipChance;

	[Token(Token = "0x40008CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<Attachment> attachments;

	[Token(Token = "0x6000795")]
	[Address(RVA = "0xBCC6A4", Offset = "0xBCC6A4", VA = "0xBCC6A4")]
	public AttachmentSet()
	{
	}
}
[Serializable]
[Token(Token = "0x2000199")]
public class SoundEffect
{
	[Token(Token = "0x40008CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string name;

	[Token(Token = "0x40008D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioManager.SoundType type;

	[Token(Token = "0x40008D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioClip[] clips;

	[Token(Token = "0x40008D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float volume;

	[Token(Token = "0x40008D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float pitch;

	[Token(Token = "0x40008D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool pitchVariation;

	[Token(Token = "0x40008D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float minPitch;

	[Token(Token = "0x40008D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float maxPitch;

	[Token(Token = "0x40008D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public bool timeScalePitch;

	[Token(Token = "0x40008D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int lastIndex;

	[Token(Token = "0x40008D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public bool important;

	[Token(Token = "0x40008DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float minDistance;

	[Token(Token = "0x40008DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float maxDistance;

	[Token(Token = "0x6000796")]
	[Address(RVA = "0xBCC6AC", Offset = "0xBCC6AC", VA = "0xBCC6AC")]
	public AudioClip GetRandomClip()
	{
		return null;
	}

	[Token(Token = "0x6000797")]
	[Address(RVA = "0xBCC740", Offset = "0xBCC740", VA = "0xBCC740")]
	public SoundEffect()
	{
	}
}
[Token(Token = "0x200019A")]
public class AudioManager : MonoBehaviour
{
	[Token(Token = "0x200019B")]
	public enum SoundType : byte
	{
		[Token(Token = "0x40008FD")]
		None = 0,
		[Token(Token = "0x40008FE")]
		UI_Button_Forward = 1,
		[Token(Token = "0x40008FF")]
		UI_Button_Back = 2,
		[Token(Token = "0x4000900")]
		UI_Error = 3,
		[Token(Token = "0x4000901")]
		UI_Click = 4,
		[Token(Token = "0x4000902")]
		UI_Select = 5,
		[Token(Token = "0x4000903")]
		UI_WooshIn = 6,
		[Token(Token = "0x4000904")]
		UI_WooshOut = 7,
		[Token(Token = "0x4000905")]
		UI_ToggleOn = 8,
		[Token(Token = "0x4000906")]
		UI_ToggleOff = 9,
		[Token(Token = "0x4000907")]
		RagdollImpactMid = 64,
		[Token(Token = "0x4000908")]
		CoinCollected = 65,
		[Token(Token = "0x4000909")]
		CoinTick = 66,
		[Token(Token = "0x400090A")]
		HurtMale = 67,
		[Token(Token = "0x400090B")]
		HurtFemale = 68,
		[Token(Token = "0x400090C")]
		ScreamMale = 69,
		[Token(Token = "0x400090D")]
		ScreamFemale = 70,
		[Token(Token = "0x400090E")]
		Shoot = 71,
		[Token(Token = "0x400090F")]
		Impact = 72,
		[Token(Token = "0x4000910")]
		Bounce = 73,
		[Token(Token = "0x4000911")]
		CountBeep = 74,
		[Token(Token = "0x4000912")]
		LostBall = 75,
		[Token(Token = "0x4000913")]
		Failed = 76,
		[Token(Token = "0x4000914")]
		Ricochet = 77,
		[Token(Token = "0x4000915")]
		GlassShatter = 78,
		[Token(Token = "0x4000916")]
		AIShoot = 79,
		[Token(Token = "0x4000917")]
		BigSplash = 80,
		[Token(Token = "0x4000918")]
		SmallSplash = 81,
		[Token(Token = "0x4000919")]
		Reload = 82,
		[Token(Token = "0x400091A")]
		HostageRescued = 83,
		[Token(Token = "0x400091B")]
		HealthPickup = 84,
		[Token(Token = "0x400091C")]
		RewardUnlocked = 85,
		[Token(Token = "0x400091D")]
		RewardClaimed = 86,
		[Token(Token = "0x400091E")]
		PlayerHit = 87,
		[Token(Token = "0x400091F")]
		Click = 88,
		[Token(Token = "0x4000920")]
		Grab = 89,
		[Token(Token = "0x4000921")]
		Holster = 90,
		[Token(Token = "0x4000922")]
		ConcreteFootStep = 91,
		[Token(Token = "0x4000923")]
		MetalFootStep = 92,
		[Token(Token = "0x4000924")]
		WoodFootStep = 93,
		[Token(Token = "0x4000925")]
		BulletFlyBy = 94,
		[Token(Token = "0x4000926")]
		AIGrunt = 95,
		[Token(Token = "0x4000927")]
		AIAnounce = 96,
		[Token(Token = "0x4000928")]
		BottleSmash = 97,
		[Token(Token = "0x4000929")]
		Clear = 98,
		[Token(Token = "0x400092A")]
		MagazineClatter = 99,
		[Token(Token = "0x400092B")]
		CasingTink = 100,
		[Token(Token = "0x400092C")]
		RagdollImpactSmall = 101,
		[Token(Token = "0x400092D")]
		RagdollImpactLarge = 102,
		[Token(Token = "0x400092E")]
		AIGunDrop = 103
	}

	[Token(Token = "0x200019C")]
	public enum STEMIntensity
	{
		[Token(Token = "0x4000930")]
		NONE,
		[Token(Token = "0x4000931")]
		LOW,
		[Token(Token = "0x4000932")]
		MID,
		[Token(Token = "0x4000933")]
		HIGH
	}

	[Token(Token = "0x200019D")]
	[CompilerGenerated]
	private sealed class <FadeSTEM>d__50 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000934")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000935")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000936")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float duration;

		[Token(Token = "0x4000937")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool fadeIn;

		[Token(Token = "0x4000938")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AudioManager <>4__this;

		[Token(Token = "0x4000939")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AudioSource source;

		[Token(Token = "0x400093A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float volume;

		[Token(Token = "0x400093B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float <time>5__2;

		[Token(Token = "0x400093C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float <startVolume>5__3;

		[Token(Token = "0x400093D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float <endVolume>5__4;

		[Token(Token = "0x170000F7")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60007B3")]
			[Address(RVA = "0xBCE090", Offset = "0xBCE090", VA = "0xBCE090", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000F8")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60007B5")]
			[Address(RVA = "0xBCE0D8", Offset = "0xBCE0D8", VA = "0xBCE0D8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60007B0")]
		[Address(RVA = "0xBCD404", Offset = "0xBCD404", VA = "0xBCD404")]
		[DebuggerHidden]
		public <FadeSTEM>d__50(int <>1__state)
		{
		}

		[Token(Token = "0x60007B1")]
		[Address(RVA = "0xBCDE40", Offset = "0xBCDE40", VA = "0xBCDE40", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60007B2")]
		[Address(RVA = "0xBCDE44", Offset = "0xBCDE44", VA = "0xBCDE44", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60007B4")]
		[Address(RVA = "0xBCE098", Offset = "0xBCE098", VA = "0xBCE098", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200019E")]
	[CompilerGenerated]
	private sealed class <CrossFadeAmbience>d__56 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400093E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400093F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000940")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string clip;

		[Token(Token = "0x4000941")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AudioSource _currentSource;

		[Token(Token = "0x4000942")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AudioSource _nextSource;

		[Token(Token = "0x4000943")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float _volume;

		[Token(Token = "0x4000944")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float <duration>5__2;

		[Token(Token = "0x4000945")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float <currentSourceVolume>5__3;

		[Token(Token = "0x4000946")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float <time>5__4;

		[Token(Token = "0x170000F9")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60007B9")]
			[Address(RVA = "0xBCE274", Offset = "0xBCE274", VA = "0xBCE274", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000FA")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60007BB")]
			[Address(RVA = "0xBCE2BC", Offset = "0xBCE2BC", VA = "0xBCE2BC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60007B6")]
		[Address(RVA = "0xBCDDFC", Offset = "0xBCDDFC", VA = "0xBCDDFC")]
		[DebuggerHidden]
		public <CrossFadeAmbience>d__56(int <>1__state)
		{
		}

		[Token(Token = "0x60007B7")]
		[Address(RVA = "0xBCE0E0", Offset = "0xBCE0E0", VA = "0xBCE0E0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60007B8")]
		[Address(RVA = "0xBCE0E4", Offset = "0xBCE0E4", VA = "0xBCE0E4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60007BA")]
		[Address(RVA = "0xBCE27C", Offset = "0xBCE27C", VA = "0xBCE27C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40008DC")]
	private const string KEY_MUSIC_ON = "music_off";

	[Token(Token = "0x40008DD")]
	private const string KEY_SOUND_OFF = "sound_off";

	[Token(Token = "0x40008DE")]
	private const string KEY_MUSIC_VOLUME = "music_volume";

	[Token(Token = "0x40008DF")]
	private const string KEY_MASTER_VOLUME = "master_volume";

	[Token(Token = "0x40008E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private STEMIntensity currentIntenisty;

	[Token(Token = "0x40008E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static AudioManager instance;

	[Token(Token = "0x40008E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public SoundEffect[] soundEffects;

	[Token(Token = "0x40008E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int effectMin;

	[Token(Token = "0x40008E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private int effectMax;

	[Token(Token = "0x40008E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private SoundEffect[] sortedEffects;

	[NonSerialized]
	[Token(Token = "0x40008E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool soundEnabled;

	[Token(Token = "0x40008E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private GameObject ambient_main;

	[Token(Token = "0x40008E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public AudioClip stem_01_Clip;

	[Token(Token = "0x40008E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public AudioClip stem_02_Clip;

	[Token(Token = "0x40008EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public AudioClip stem_03_Clip;

	[Token(Token = "0x40008EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public AudioClip stem_end_Clip;

	[Token(Token = "0x40008EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public bool musicEnabled;

	[Token(Token = "0x40008ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public float musicVolume;

	[Token(Token = "0x40008EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public float masterVolume;

	[Token(Token = "0x40008EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public AudioSource source_STEM_01;

	[Token(Token = "0x40008F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public AudioSource source_STEM_02;

	[Token(Token = "0x40008F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public AudioSource source_STEM_03;

	[Token(Token = "0x40008F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private AudioSource ambientChannel1;

	[Token(Token = "0x40008F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private AudioSource ambientChannel2;

	[Token(Token = "0x40008F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private bool ambientPlaying;

	[Token(Token = "0x40008F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private int ambientSourceIndex;

	[Token(Token = "0x40008F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public bool musicOffOverride;

	[Token(Token = "0x40008F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA9")]
	private bool STEM1_playing;

	[Token(Token = "0x40008F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAA")]
	private bool STEM2_playing;

	[Token(Token = "0x40008F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAB")]
	private bool STEM3_playing;

	[Token(Token = "0x40008FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private SceneDataInfo currentSceneDataInfo;

	[Token(Token = "0x40008FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private LevelMusicSettings musicSettings;

	[Token(Token = "0x6000798")]
	[Address(RVA = "0xBCC770", Offset = "0xBCC770", VA = "0xBCC770")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000799")]
	[Address(RVA = "0xBCCB64", Offset = "0xBCCB64", VA = "0xBCCB64")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600079A")]
	[Address(RVA = "0xBCCBFC", Offset = "0xBCCBFC", VA = "0xBCCBFC")]
	public void SetMusicVolume(float _volume)
	{
	}

	[Token(Token = "0x600079B")]
	[Address(RVA = "0xBCCCFC", Offset = "0xBCCCFC", VA = "0xBCCCFC")]
	public void SetMasterVolume(float _volume)
	{
	}

	[Token(Token = "0x600079C")]
	[Address(RVA = "0xBCCD64", Offset = "0xBCCD64", VA = "0xBCCD64")]
	public void ToggleMusic()
	{
	}

	[Token(Token = "0x600079D")]
	[Address(RVA = "0xBCCDF4", Offset = "0xBCCDF4", VA = "0xBCCDF4")]
	public void ToggleSound()
	{
	}

	[Token(Token = "0x600079E")]
	[Address(RVA = "0xBCCD74", Offset = "0xBCCD74", VA = "0xBCCD74")]
	public void EnableMusic(bool enable)
	{
	}

	[Token(Token = "0x600079F")]
	[Address(RVA = "0xBCCE04", Offset = "0xBCCE04", VA = "0xBCCE04")]
	public void EnableSound(bool enable)
	{
	}

	[Token(Token = "0x60007A0")]
	[Address(RVA = "0xBCCF44", Offset = "0xBCCF44", VA = "0xBCCF44")]
	public void StartCurrentThemeMusic()
	{
	}

	[Token(Token = "0x60007A1")]
	[Address(RVA = "0xBCCEB4", Offset = "0xBCCEB4", VA = "0xBCCEB4")]
	private void ResetLevelMusic()
	{
	}

	[Token(Token = "0x60007A2")]
	[Address(RVA = "0xBCCF6C", Offset = "0xBCCF6C", VA = "0xBCCF6C")]
	public void LoadStemMusic()
	{
	}

	[Token(Token = "0x60007A3")]
	[Address(RVA = "0xBCD130", Offset = "0xBCD130", VA = "0xBCD130")]
	public void LevelStart()
	{
	}

	[Token(Token = "0x60007A4")]
	[Address(RVA = "0xBCD1C4", Offset = "0xBCD1C4", VA = "0xBCD1C4")]
	public void LevelComplete()
	{
	}

	[Token(Token = "0x60007A5")]
	[Address(RVA = "0xBCD23C", Offset = "0xBCD23C", VA = "0xBCD23C")]
	public void StartSound()
	{
	}

	[Token(Token = "0x60007A6")]
	[Address(RVA = "0xBCCEB8", Offset = "0xBCCEB8", VA = "0xBCCEB8")]
	public void StopMusic()
	{
	}

	[Token(Token = "0x60007A7")]
	[Address(RVA = "0xBCD244", Offset = "0xBCD244", VA = "0xBCD244")]
	public void SetSTEMIntensity(STEMIntensity intensity)
	{
	}

	[Token(Token = "0x60007A8")]
	[Address(RVA = "0xBCD36C", Offset = "0xBCD36C", VA = "0xBCD36C")]
	[IteratorStateMachine(typeof(<FadeSTEM>d__50))]
	private IEnumerator FadeSTEM(AudioSource source, float volume, float duration, bool fadeIn)
	{
		return null;
	}

	[Token(Token = "0x60007A9")]
	[Address(RVA = "0xBCD42C", Offset = "0xBCD42C", VA = "0xBCD42C")]
	public void PlaySoundEffect(SoundType type, float pitch = 1f, float volume = 1f, bool spatial3D = false, bool attach = false, [Optional] Transform parentSource)
	{
	}

	[Token(Token = "0x60007AA")]
	[Address(RVA = "0xBCD4C8", Offset = "0xBCD4C8", VA = "0xBCD4C8")]
	public void PlaySoundEffect(SoundType type, Vector3 pos, float pitch = 1f, float volume = 1f, bool spatial3D = false, bool attach = false, [Optional] Transform parentSource)
	{
	}

	[Token(Token = "0x60007AB")]
	[Address(RVA = "0xBCDB78", Offset = "0xBCDB78", VA = "0xBCDB78")]
	public void SetClipArray(AudioClip[] clips, SoundType type)
	{
	}

	[Token(Token = "0x60007AC")]
	[Address(RVA = "0xBCDBE0", Offset = "0xBCDBE0", VA = "0xBCDBE0")]
	public void SetEffectMaxVolume(float volume, SoundType type)
	{
	}

	[Token(Token = "0x60007AD")]
	[Address(RVA = "0xBCDC48", Offset = "0xBCDC48", VA = "0xBCDC48")]
	public void SetAmbience(string clipName, float _volume)
	{
	}

	[Token(Token = "0x60007AE")]
	[Address(RVA = "0xBCDD70", Offset = "0xBCDD70", VA = "0xBCDD70")]
	[IteratorStateMachine(typeof(<CrossFadeAmbience>d__56))]
	private IEnumerator CrossFadeAmbience(AudioSource _currentSource, AudioSource _nextSource, string clip, float _volume)
	{
		return null;
	}

	[Token(Token = "0x60007AF")]
	[Address(RVA = "0xBCDE24", Offset = "0xBCDE24", VA = "0xBCDE24")]
	public AudioManager()
	{
	}
}
[Serializable]
[Token(Token = "0x200019F")]
public class AudioSourcePoolObject
{
	[Token(Token = "0x4000947")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool timeScale;

	[Token(Token = "0x4000948")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float volume;

	[Token(Token = "0x4000949")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float pitch;

	[Token(Token = "0x400094A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool important;

	[Token(Token = "0x400094B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	public bool pitchVariation;

	[Token(Token = "0x400094C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioSource source;

	[Token(Token = "0x60007BC")]
	[Address(RVA = "0xBCE2C4", Offset = "0xBCE2C4", VA = "0xBCE2C4")]
	public AudioSourcePoolObject()
	{
	}
}
[Token(Token = "0x20001A0")]
public class AudioSourcePool : MonoBehaviour
{
	[Token(Token = "0x400094D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioMixerGroup mixerGroup;

	[Token(Token = "0x400094E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static AudioSourcePool instance;

	[Token(Token = "0x400094F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int numSources;

	[Token(Token = "0x4000950")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private AudioSourcePoolObject[] sourceObjects;

	[Token(Token = "0x4000951")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int nextIndex;

	[Token(Token = "0x4000952")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Transform xForm;

	[Token(Token = "0x60007BD")]
	[Address(RVA = "0xBCE2DC", Offset = "0xBCE2DC", VA = "0xBCE2DC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60007BE")]
	[Address(RVA = "0xBCE690", Offset = "0xBCE690", VA = "0xBCE690")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60007BF")]
	[Address(RVA = "0xBCE768", Offset = "0xBCE768", VA = "0xBCE768")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60007C0")]
	[Address(RVA = "0xBCE800", Offset = "0xBCE800", VA = "0xBCE800")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60007C1")]
	[Address(RVA = "0xBCE8FC", Offset = "0xBCE8FC", VA = "0xBCE8FC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60007C2")]
	[Address(RVA = "0xBCE9F8", Offset = "0xBCE9F8", VA = "0xBCE9F8")]
	private void StopAllSources()
	{
	}

	[Token(Token = "0x60007C3")]
	[Address(RVA = "0xBCEA60", Offset = "0xBCEA60", VA = "0xBCEA60")]
	public void ReclaimSources()
	{
	}

	[Token(Token = "0x60007C4")]
	[Address(RVA = "0xBCD5FC", Offset = "0xBCD5FC", VA = "0xBCD5FC")]
	public void Play(AudioClip clip, Vector3 _pos, float _volume, float _pitch, bool _spatial3D, bool _attach, Transform _parentSource, bool _timeScale, bool _important, float minDistance, float maxDistance, [Optional] SoundEffect _effect)
	{
	}

	[Token(Token = "0x60007C5")]
	[Address(RVA = "0xBCEADC", Offset = "0xBCEADC", VA = "0xBCEADC")]
	public AudioSourcePool()
	{
	}
}
[Token(Token = "0x20001A1")]
public class Casing : MonoBehaviour
{
	[Token(Token = "0x4000953")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float lifetime;

	[Token(Token = "0x4000954")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform xForm;

	[Token(Token = "0x4000955")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Rigidbody rBody;

	[Token(Token = "0x4000956")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public MeshRenderer mesh;

	[Token(Token = "0x4000957")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Mesh casingMesh;

	[Token(Token = "0x4000958")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Mesh emptyCasingMesh;

	[Token(Token = "0x4000959")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private MeshFilter meshFilter;

	[Token(Token = "0x400095A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool active;

	[Token(Token = "0x400095B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float minTinkMagnitude;

	[Token(Token = "0x400095C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float maxTinkMagnitude;

	[Token(Token = "0x400095D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private bool contactGround;

	[Token(Token = "0x400095E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float endLifeTime;

	[Token(Token = "0x400095F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private float startTime;

	[Token(Token = "0x4000960")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float force;

	[Token(Token = "0x4000961")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private Vector3 inheritedVelocity;

	[Token(Token = "0x4000962")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Transform refXForm;

	[Token(Token = "0x4000963")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private bool dynamic;

	[Token(Token = "0x4000964")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
	private bool applyAngular;

	[Token(Token = "0x60007C6")]
	[Address(RVA = "0xBCFAEC", Offset = "0xBCFAEC", VA = "0xBCFAEC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60007C7")]
	[Address(RVA = "0xBCFB78", Offset = "0xBCFB78", VA = "0xBCFB78")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x60007C8")]
	[Address(RVA = "0xBCFD5C", Offset = "0xBCFD5C", VA = "0xBCFD5C")]
	public void SetStateActive(Transform _refXForm, float delay, float _force, Vector3 _inheritedVelocity, bool _applyAngular = true)
	{
	}

	[Token(Token = "0x60007C9")]
	[Address(RVA = "0xBCFE14", Offset = "0xBCFE14", VA = "0xBCFE14")]
	public void UpdateState()
	{
	}

	[Token(Token = "0x60007CA")]
	[Address(RVA = "0xBD00E0", Offset = "0xBD00E0", VA = "0xBD00E0")]
	public void SetStateInactive()
	{
	}

	[Token(Token = "0x60007CB")]
	[Address(RVA = "0xBD0150", Offset = "0xBD0150", VA = "0xBD0150")]
	public void SetMeshEmpty(bool empty)
	{
	}

	[Token(Token = "0x60007CC")]
	[Address(RVA = "0xBD0184", Offset = "0xBD0184", VA = "0xBD0184")]
	public Casing()
	{
	}
}
[Token(Token = "0x20001A2")]
public class CasingEjector : MonoBehaviour
{
	[Token(Token = "0x4000965")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static CasingEjector instance;

	[Token(Token = "0x4000966")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject sheelCasingPrefab;

	[Token(Token = "0x4000967")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Casing[] casingPool;

	[Token(Token = "0x4000968")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int casingPoolSize;

	[Token(Token = "0x4000969")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private int casingIndex;

	[Token(Token = "0x400096A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float contactDelay;

	[Token(Token = "0x400096B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float nextContact;

	[Token(Token = "0x60007CD")]
	[Address(RVA = "0xBCFC94", Offset = "0xBCFC94", VA = "0xBCFC94")]
	public void CreateContactSound(Vector3 position, float volume)
	{
	}

	[Token(Token = "0x60007CE")]
	[Address(RVA = "0xBD01A8", Offset = "0xBD01A8", VA = "0xBD01A8")]
	private void Awake()
	{
	}

	[Token(Token = "0x60007CF")]
	[Address(RVA = "0xBD01F8", Offset = "0xBD01F8", VA = "0xBD01F8")]
	private void CreateCasingPool()
	{
	}

	[Token(Token = "0x60007D0")]
	[Address(RVA = "0xBD0378", Offset = "0xBD0378", VA = "0xBD0378")]
	public void EjectCasing(Vector3 inheritedVelocity, Transform refXForm, float delay = 0f, float force = 1f, float scale = 1f, bool shadows = false)
	{
	}

	[Token(Token = "0x60007D1")]
	[Address(RVA = "0xBD0430", Offset = "0xBD0430", VA = "0xBD0430")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60007D2")]
	[Address(RVA = "0xBD0494", Offset = "0xBD0494", VA = "0xBD0494")]
	public CasingEjector()
	{
	}
}
[Token(Token = "0x20001A3")]
public class Coin : MonoBehaviour
{
	[Token(Token = "0x20001A4")]
	[CompilerGenerated]
	private sealed class <DisableAfterLife>d__11 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000975")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000976")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000977")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Coin <>4__this;

		[Token(Token = "0x4000978")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <delay>5__2;

		[Token(Token = "0x4000979")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform <player>5__3;

		[Token(Token = "0x400097A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 <startPos>5__4;

		[Token(Token = "0x400097B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float <time>5__5;

		[Token(Token = "0x400097C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float <lerp>5__6;

		[Token(Token = "0x400097D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float <duration>5__7;

		[Token(Token = "0x170000FB")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60007DA")]
			[Address(RVA = "0xBD0A28", Offset = "0xBD0A28", VA = "0xBD0A28", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000FC")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60007DC")]
			[Address(RVA = "0xBD0A70", Offset = "0xBD0A70", VA = "0xBD0A70", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60007D7")]
		[Address(RVA = "0xBD05E0", Offset = "0xBD05E0", VA = "0xBD05E0")]
		[DebuggerHidden]
		public <DisableAfterLife>d__11(int <>1__state)
		{
		}

		[Token(Token = "0x60007D8")]
		[Address(RVA = "0xBD0628", Offset = "0xBD0628", VA = "0xBD0628", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60007D9")]
		[Address(RVA = "0xBD062C", Offset = "0xBD062C", VA = "0xBD062C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60007DB")]
		[Address(RVA = "0xBD0A30", Offset = "0xBD0A30", VA = "0xBD0A30", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400096C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float attrackDelay;

	[Token(Token = "0x400096D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float attrackDelayVariance;

	[Token(Token = "0x400096E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float trailWidth;

	[Token(Token = "0x400096F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AnimationCurve scaleCurve;

	[Token(Token = "0x4000970")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private TweenScale scaler;

	[NonSerialized]
	[Token(Token = "0x4000971")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform xForm;

	[NonSerialized]
	[Token(Token = "0x4000972")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Rigidbody rBody;

	[Token(Token = "0x4000973")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool init;

	[Token(Token = "0x4000974")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float lifeTime;

	[Token(Token = "0x60007D3")]
	[Address(RVA = "0xBD04B0", Offset = "0xBD04B0", VA = "0xBD04B0")]
	private void Awake()
	{
	}

	[Token(Token = "0x60007D4")]
	[Address(RVA = "0xBD053C", Offset = "0xBD053C", VA = "0xBD053C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60007D5")]
	[Address(RVA = "0xBD0578", Offset = "0xBD0578", VA = "0xBD0578")]
	[IteratorStateMachine(typeof(<DisableAfterLife>d__11))]
	private IEnumerator DisableAfterLife()
	{
		return null;
	}

	[Token(Token = "0x60007D6")]
	[Address(RVA = "0xBD0608", Offset = "0xBD0608", VA = "0xBD0608")]
	public Coin()
	{
	}
}
[Token(Token = "0x20001A5")]
public class CoinEjector : MonoBehaviour
{
	[Token(Token = "0x20001A6")]
	[CompilerGenerated]
	private sealed class <EjectCoinRoutine>d__17 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400098A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400098B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400098C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CoinEjector <>4__this;

		[Token(Token = "0x400098D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float delay;

		[Token(Token = "0x400098E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 pos;

		[Token(Token = "0x400098F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Quaternion rot;

		[Token(Token = "0x4000990")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float force;

		[Token(Token = "0x4000991")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Coin <coin>5__2;

		[Token(Token = "0x4000992")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float <time>5__3;

		[Token(Token = "0x170000FD")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60007E8")]
			[Address(RVA = "0xBD126C", Offset = "0xBD126C", VA = "0xBD126C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000FE")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60007EA")]
			[Address(RVA = "0xBD12B4", Offset = "0xBD12B4", VA = "0xBD12B4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60007E5")]
		[Address(RVA = "0xBD0F38", Offset = "0xBD0F38", VA = "0xBD0F38")]
		[DebuggerHidden]
		public <EjectCoinRoutine>d__17(int <>1__state)
		{
		}

		[Token(Token = "0x60007E6")]
		[Address(RVA = "0xBD0FC0", Offset = "0xBD0FC0", VA = "0xBD0FC0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60007E7")]
		[Address(RVA = "0xBD0FC4", Offset = "0xBD0FC4", VA = "0xBD0FC4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60007E9")]
		[Address(RVA = "0xBD1274", Offset = "0xBD1274", VA = "0xBD1274", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400097E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static CoinEjector instance;

	[Token(Token = "0x400097F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationCurve moveCurve;

	[Token(Token = "0x4000980")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float moveMagnitude;

	[Token(Token = "0x4000981")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject coinPrefab;

	[Token(Token = "0x4000982")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Coin[] coinPool;

	[Token(Token = "0x4000983")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int coinPoolSize;

	[Token(Token = "0x4000984")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private int coinIndex;

	[Token(Token = "0x4000985")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float upForce;

	[Token(Token = "0x4000986")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float upforceOffsetScale;

	[Token(Token = "0x4000987")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Transform xForm;

	[Token(Token = "0x4000988")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Transform coinTarget;

	[Token(Token = "0x4000989")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public int coinsCollected;

	[Token(Token = "0x60007DD")]
	[Address(RVA = "0xBD0A78", Offset = "0xBD0A78", VA = "0xBD0A78")]
	private void Awake()
	{
	}

	[Token(Token = "0x60007DE")]
	[Address(RVA = "0xBD0C6C", Offset = "0xBD0C6C", VA = "0xBD0C6C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60007DF")]
	[Address(RVA = "0xBD0D68", Offset = "0xBD0D68", VA = "0xBD0D68")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60007E0")]
	[Address(RVA = "0xBD0E64", Offset = "0xBD0E64", VA = "0xBD0E64")]
	private void ResetState()
	{
	}

	[Token(Token = "0x60007E1")]
	[Address(RVA = "0xBD0AD8", Offset = "0xBD0AD8", VA = "0xBD0AD8")]
	private void CreateCoinPool()
	{
	}

	[Token(Token = "0x60007E2")]
	[Address(RVA = "0xBD0E6C", Offset = "0xBD0E6C", VA = "0xBD0E6C")]
	[IteratorStateMachine(typeof(<EjectCoinRoutine>d__17))]
	private IEnumerator EjectCoinRoutine(Vector3 pos, Quaternion rot, float delay, float force)
	{
		return null;
	}

	[Token(Token = "0x60007E3")]
	[Address(RVA = "0xBD0F60", Offset = "0xBD0F60", VA = "0xBD0F60")]
	public void EjectCoin(Vector3 pos, Quaternion rot, float delay = 0f, float force = 1f)
	{
	}

	[Token(Token = "0x60007E4")]
	[Address(RVA = "0xBD0F9C", Offset = "0xBD0F9C", VA = "0xBD0F9C")]
	public CoinEjector()
	{
	}
}
[Token(Token = "0x20001A7")]
public class CollectEffectCollisionEvents : MonoBehaviour
{
	[Token(Token = "0x4000993")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ParticleSystem part;

	[Token(Token = "0x4000994")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<ParticleCollisionEvent> collisionEvents;

	[Token(Token = "0x4000995")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float minMag;

	[Token(Token = "0x60007EB")]
	[Address(RVA = "0xBD12BC", Offset = "0xBD12BC", VA = "0xBD12BC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60007EC")]
	[Address(RVA = "0xBD135C", Offset = "0xBD135C", VA = "0xBD135C")]
	private void OnParticleCollision(GameObject other)
	{
	}

	[Token(Token = "0x60007ED")]
	[Address(RVA = "0xBD1550", Offset = "0xBD1550", VA = "0xBD1550")]
	public CollectEffectCollisionEvents()
	{
	}
}
[Token(Token = "0x20001A8")]
public class CopyXForm : MonoBehaviour
{
	[Token(Token = "0x4000996")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform target;

	[Token(Token = "0x4000997")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Transform xForm;

	[Token(Token = "0x60007EE")]
	[Address(RVA = "0xBD1560", Offset = "0xBD1560", VA = "0xBD1560")]
	private void Awake()
	{
	}

	[Token(Token = "0x60007EF")]
	[Address(RVA = "0xBD157C", Offset = "0xBD157C", VA = "0xBD157C")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60007F0")]
	[Address(RVA = "0xBD1610", Offset = "0xBD1610", VA = "0xBD1610")]
	public CopyXForm()
	{
	}
}
[Token(Token = "0x20001A9")]
public class CostumeBaker : MonoBehaviour
{
	[Token(Token = "0x4000998")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Transform prefab;

	[Token(Token = "0x4000999")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static string[] boneNames;

	[Token(Token = "0x400099A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Dictionary<string, Transform> bones;

	[Token(Token = "0x400099B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private SkinnedMeshRenderer bodyRenderer;

	[Token(Token = "0x400099C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private SkinnedMeshRenderer faceRenderer;

	[Token(Token = "0x400099D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Transform nullBone;

	[Token(Token = "0x400099E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private List<Transform> boneList;

	[Token(Token = "0x400099F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public CostumeType costumeType;

	[Token(Token = "0x40009A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public CostumeSet selectedCostumeData;

	[Token(Token = "0x40009A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public bool bakeOnStart;

	[Token(Token = "0x40009A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
	public bool bakeCurrentCostumeOnStart;

	[Token(Token = "0x60007F1")]
	[Address(RVA = "0xBD1618", Offset = "0xBD1618", VA = "0xBD1618")]
	public void BakeCostume(string prefabPath, CostumeSet costumeSet)
	{
	}

	[Token(Token = "0x60007F2")]
	[Address(RVA = "0xBD1B04", Offset = "0xBD1B04", VA = "0xBD1B04")]
	private void RetrieveBoneHierarchy()
	{
	}

	[Token(Token = "0x60007F3")]
	[Address(RVA = "0xBD1DF4", Offset = "0xBD1DF4", VA = "0xBD1DF4")]
	private Transform ProcessBone(Transform bone)
	{
		return null;
	}

	[Token(Token = "0x60007F4")]
	[Address(RVA = "0xBD1EC0", Offset = "0xBD1EC0", VA = "0xBD1EC0")]
	private Transform ProcessBone(string boneName)
	{
		return null;
	}

	[Token(Token = "0x60007F5")]
	[Address(RVA = "0xBD1F18", Offset = "0xBD1F18", VA = "0xBD1F18")]
	public CostumeBaker()
	{
	}
}
[Token(Token = "0x20001AB")]
public enum CostumeType
{
	[Token(Token = "0x40009A7")]
	Agent = 0,
	[Token(Token = "0x40009A8")]
	NormalZombie = 10,
	[Token(Token = "0x40009A9")]
	AlternateHumanoid = 20,
	[Token(Token = "0x40009AA")]
	BadGuy = 30,
	[Token(Token = "0x40009AB")]
	BadGuyBoss = 31,
	[Token(Token = "0x40009AC")]
	ShippingHostages = 40,
	[Token(Token = "0x40009AD")]
	OfficeHostages = 41,
	[Token(Token = "0x40009AE")]
	SewerHostages = 42
}
[Token(Token = "0x20001AC")]
[CreateAssetMenu(fileName = "CostumeSet", menuName = "Settings/CostumeSet")]
public class CostumeSet : ScriptableObject
{
	[Token(Token = "0x40009AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public CostumeType costumeType;

	[Token(Token = "0x40009B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<string> costumePrefabNames;

	[Token(Token = "0x40009B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int bloodParticleID;

	[Token(Token = "0x40009B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public string[] faceSets;

	[Token(Token = "0x40009B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public string voiceSet;

	[Token(Token = "0x40009B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Header("Attachments")]
	public string gunAttachmentSet;

	[Token(Token = "0x40009B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public string knifeAttachmentSet;

	[Token(Token = "0x40009B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public string eyewearAttachmentSet;

	[Token(Token = "0x40009B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public string hairAttachmentSet;

	[Token(Token = "0x40009B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public string hatAttachmentSet;

	[Token(Token = "0x60007F9")]
	[Address(RVA = "0xBD26E4", Offset = "0xBD26E4", VA = "0xBD26E4")]
	public CostumeSet()
	{
	}
}
[Token(Token = "0x20001AD")]
public class Shot_1 : MonoBehaviour
{
	[Token(Token = "0x20001AE")]
	[CompilerGenerated]
	private sealed class <AnimRoutine>d__27 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40009D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40009D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40009D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Shot_1 <>4__this;

		[Token(Token = "0x40009D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <time>5__2;

		[Token(Token = "0x40009D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <duration>5__3;

		[Token(Token = "0x170000FF")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000801")]
			[Address(RVA = "0xBD2ED8", Offset = "0xBD2ED8", VA = "0xBD2ED8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000100")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000803")]
			[Address(RVA = "0xBD2F20", Offset = "0xBD2F20", VA = "0xBD2F20", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60007FE")]
		[Address(RVA = "0xBD27EC", Offset = "0xBD27EC", VA = "0xBD27EC")]
		[DebuggerHidden]
		public <AnimRoutine>d__27(int <>1__state)
		{
		}

		[Token(Token = "0x60007FF")]
		[Address(RVA = "0xBD2A24", Offset = "0xBD2A24", VA = "0xBD2A24", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000800")]
		[Address(RVA = "0xBD2A28", Offset = "0xBD2A28", VA = "0xBD2A28", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000802")]
		[Address(RVA = "0xBD2EE0", Offset = "0xBD2EE0", VA = "0xBD2EE0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40009B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Animator bodyAnimator;

	[Token(Token = "0x40009BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Animator headAnimator;

	[Token(Token = "0x40009BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public IKAimingSystem aimingSystem;

	[Token(Token = "0x40009BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float shockDelay;

	[Token(Token = "0x40009BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float angryDelay;

	[Token(Token = "0x40009BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float crouchDelay;

	[Token(Token = "0x40009BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float aimDelay;

	[Token(Token = "0x40009C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public DynamicFOV dFov;

	[Token(Token = "0x40009C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool playing;

	[Token(Token = "0x40009C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private int fidget_01;

	[Token(Token = "0x40009C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private int fidget_02;

	[Token(Token = "0x40009C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private int fidget_03;

	[Token(Token = "0x40009C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private int fidget_04;

	[Token(Token = "0x40009C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private int fidgetingState;

	[Token(Token = "0x40009C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private int neutralFaceHash;

	[Token(Token = "0x40009C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private int angryFaceHash;

	[Token(Token = "0x40009C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private int shockedFaceHash;

	[Token(Token = "0x40009CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private int deadFaceHash;

	[Token(Token = "0x40009CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private int aimBlendFloat;

	[Token(Token = "0x40009CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private int crouchState;

	[Token(Token = "0x40009CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private int idleState;

	[Token(Token = "0x40009CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Transform endForward;

	[Token(Token = "0x40009CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Vector3 startPos;

	[Token(Token = "0x40009D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private Vector3 startForward;

	[Token(Token = "0x40009D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private Transform characterXForm;

	[Token(Token = "0x60007FA")]
	[Address(RVA = "0xBD26EC", Offset = "0xBD26EC", VA = "0xBD26EC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60007FB")]
	[Address(RVA = "0xBD2740", Offset = "0xBD2740", VA = "0xBD2740")]
	private void Update()
	{
	}

	[Token(Token = "0x60007FC")]
	[Address(RVA = "0xBD2784", Offset = "0xBD2784", VA = "0xBD2784")]
	[IteratorStateMachine(typeof(<AnimRoutine>d__27))]
	private IEnumerator AnimRoutine()
	{
		return null;
	}

	[Token(Token = "0x60007FD")]
	[Address(RVA = "0xBD2814", Offset = "0xBD2814", VA = "0xBD2814")]
	public Shot_1()
	{
	}
}
[Token(Token = "0x20001AF")]
public class DestructibleObject : MonoBehaviour
{
	[Token(Token = "0x40009D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int currentDamagedState;

	[Token(Token = "0x40009D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public AudioManager.SoundType destructSound;

	[Token(Token = "0x40009D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<MeshRenderer> meshStages;

	[Token(Token = "0x40009DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEvent OnHit;

	[Token(Token = "0x40009DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEvent OnDestroyed;

	[Token(Token = "0x40009DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool disableMeshGameObjects;

	[Token(Token = "0x40009DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	public bool reflectProjectiles;

	[Token(Token = "0x40009DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
	private bool destroyed;

	[Token(Token = "0x40009DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private Vector3 storedVelocity;

	[Token(Token = "0x6000804")]
	[Address(RVA = "0xBD2F28", Offset = "0xBD2F28", VA = "0xBD2F28")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000805")]
	[Address(RVA = "0xBD3034", Offset = "0xBD3034", VA = "0xBD3034")]
	public void Destruct()
	{
	}

	[Token(Token = "0x6000806")]
	[Address(RVA = "0xBD3088", Offset = "0xBD3088", VA = "0xBD3088")]
	public void OnProjectileHit(Vector3 localVelocity)
	{
	}

	[Token(Token = "0x6000807")]
	[Address(RVA = "0xBD3260", Offset = "0xBD3260", VA = "0xBD3260")]
	public void PlayParticleSystem(ParticleSystem particleSystem)
	{
	}

	[Token(Token = "0x6000808")]
	[Address(RVA = "0xBD3278", Offset = "0xBD3278", VA = "0xBD3278")]
	public DestructibleObject()
	{
	}
}
[Token(Token = "0x20001B0")]
public class DynamicFOV : MonoBehaviour
{
	[Token(Token = "0x40009E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float fovHeight;

	[Token(Token = "0x40009E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float hostagefovHeight;

	[Token(Token = "0x40009E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float minFov;

	[Token(Token = "0x40009E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float maxFov;

	[Token(Token = "0x40009E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float changeRateIn;

	[Token(Token = "0x40009E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float changeRateOut;

	[Token(Token = "0x40009E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Camera myCamera;

	[Token(Token = "0x40009E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform target;

	[Token(Token = "0x40009E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Transform xForm;

	[Token(Token = "0x40009E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool gameCamera;

	[Token(Token = "0x6000809")]
	[Address(RVA = "0xBD3288", Offset = "0xBD3288", VA = "0xBD3288")]
	private void Awake()
	{
	}

	[Token(Token = "0x600080A")]
	[Address(RVA = "0xBD32E8", Offset = "0xBD32E8", VA = "0xBD32E8")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x600080B")]
	[Address(RVA = "0xBD3360", Offset = "0xBD3360", VA = "0xBD3360")]
	private void UpdatFieldOfView()
	{
	}

	[Token(Token = "0x600080C")]
	[Address(RVA = "0xBD3518", Offset = "0xBD3518", VA = "0xBD3518")]
	public DynamicFOV()
	{
	}
}
[Token(Token = "0x20001B1")]
public class DynamicObject : MonoBehaviour
{
	[Token(Token = "0x40009EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Rigidbody rBody;

	[Token(Token = "0x40009EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Transform xForm;

	[Token(Token = "0x40009EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int damagePoints;

	[Token(Token = "0x40009ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Vector3 lastVelocity;

	[Token(Token = "0x40009EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector3 lastAngularVelocity;

	[Token(Token = "0x40009EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private Vector3 lastPosition;

	[Token(Token = "0x600080D")]
	[Address(RVA = "0xBD3534", Offset = "0xBD3534", VA = "0xBD3534")]
	private void Awake()
	{
	}

	[Token(Token = "0x600080E")]
	[Address(RVA = "0xBD3594", Offset = "0xBD3594", VA = "0xBD3594")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x600080F")]
	[Address(RVA = "0xBD38D8", Offset = "0xBD38D8", VA = "0xBD38D8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000810")]
	[Address(RVA = "0xBD3964", Offset = "0xBD3964", VA = "0xBD3964")]
	public void LookAtMe()
	{
	}

	[Token(Token = "0x6000811")]
	[Address(RVA = "0xBD3968", Offset = "0xBD3968", VA = "0xBD3968")]
	public DynamicObject()
	{
	}
}
[Token(Token = "0x20001B2")]
public class ExplodingBarrel : MonoBehaviour
{
	[Token(Token = "0x20001B3")]
	[CompilerGenerated]
	private sealed class <DelayedExplosion>d__21 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000A05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float time;

		[Token(Token = "0x4000A06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ExplodingBarrel <>4__this;

		[Token(Token = "0x17000101")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600081B")]
			[Address(RVA = "0xBD4484", Offset = "0xBD4484", VA = "0xBD4484", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000102")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600081D")]
			[Address(RVA = "0xBD44CC", Offset = "0xBD44CC", VA = "0xBD44CC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000818")]
		[Address(RVA = "0xBD3B8C", Offset = "0xBD3B8C", VA = "0xBD3B8C")]
		[DebuggerHidden]
		public <DelayedExplosion>d__21(int <>1__state)
		{
		}

		[Token(Token = "0x6000819")]
		[Address(RVA = "0xBD4390", Offset = "0xBD4390", VA = "0xBD4390", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600081A")]
		[Address(RVA = "0xBD4394", Offset = "0xBD4394", VA = "0xBD4394", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600081C")]
		[Address(RVA = "0xBD448C", Offset = "0xBD448C", VA = "0xBD448C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001B4")]
	[CompilerGenerated]
	private sealed class <HideScortch>d__22 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000A09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ExplodingBarrel <>4__this;

		[Token(Token = "0x17000103")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000821")]
			[Address(RVA = "0xBD4598", Offset = "0xBD4598", VA = "0xBD4598", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000104")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000823")]
			[Address(RVA = "0xBD45E0", Offset = "0xBD45E0", VA = "0xBD45E0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600081E")]
		[Address(RVA = "0xBD3C1C", Offset = "0xBD3C1C", VA = "0xBD3C1C")]
		[DebuggerHidden]
		public <HideScortch>d__22(int <>1__state)
		{
		}

		[Token(Token = "0x600081F")]
		[Address(RVA = "0xBD44D4", Offset = "0xBD44D4", VA = "0xBD44D4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000820")]
		[Address(RVA = "0xBD44D8", Offset = "0xBD44D8", VA = "0xBD44D8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000822")]
		[Address(RVA = "0xBD45A0", Offset = "0xBD45A0", VA = "0xBD45A0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40009F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool displaygismo;

	[Token(Token = "0x40009F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int damagePoints;

	[Token(Token = "0x40009F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float blastRadius;

	[Token(Token = "0x40009F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float blastForce;

	[Token(Token = "0x40009F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float upwardsModifier;

	[Token(Token = "0x40009F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform scortchXForm;

	[Token(Token = "0x40009F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public MeshRenderer scortchRenderer;

	[Token(Token = "0x40009F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float scortchDuration;

	[Token(Token = "0x40009F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject mesh;

	[Token(Token = "0x40009F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject explosion;

	[Token(Token = "0x40009FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Vector3 castOriginOffset;

	[Token(Token = "0x40009FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public NavMeshObstacle nmo;

	[Token(Token = "0x40009FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public bool exploded;

	[Token(Token = "0x40009FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public int maxContacts;

	[Token(Token = "0x40009FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public LayerMask blaskmask;

	[Token(Token = "0x40009FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Collider[] collision;

	[Token(Token = "0x4000A00")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Collider[] colliders;

	[Token(Token = "0x4000A01")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Transform xForm;

	[Token(Token = "0x4000A02")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private MeshRenderer meshRenderer;

	[Token(Token = "0x6000812")]
	[Address(RVA = "0xBD3978", Offset = "0xBD3978", VA = "0xBD3978")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000813")]
	[Address(RVA = "0xBD3A28", Offset = "0xBD3A28", VA = "0xBD3A28")]
	private void Start()
	{
	}

	[Token(Token = "0x6000814")]
	[Address(RVA = "0xBD3B14", Offset = "0xBD3B14", VA = "0xBD3B14")]
	[IteratorStateMachine(typeof(<DelayedExplosion>d__21))]
	public IEnumerator DelayedExplosion(float time)
	{
		return null;
	}

	[Token(Token = "0x6000815")]
	[Address(RVA = "0xBD3BB4", Offset = "0xBD3BB4", VA = "0xBD3BB4")]
	[IteratorStateMachine(typeof(<HideScortch>d__22))]
	private IEnumerator HideScortch()
	{
		return null;
	}

	[Token(Token = "0x6000816")]
	[Address(RVA = "0xBD3C44", Offset = "0xBD3C44", VA = "0xBD3C44")]
	public void Explode()
	{
	}

	[Token(Token = "0x6000817")]
	[Address(RVA = "0xBD434C", Offset = "0xBD434C", VA = "0xBD434C")]
	public ExplodingBarrel()
	{
	}
}
[Token(Token = "0x20001B5")]
[CreateAssetMenu(fileName = "FaceSet", menuName = "Settings/FaceSet")]
public class FaceSet : ScriptableObject
{
	[Token(Token = "0x4000A0A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<GameObject> faceMeshes;

	[Token(Token = "0x4000A0B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool noHair;

	[Token(Token = "0x4000A0C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool noEyewear;

	[Token(Token = "0x4000A0D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string customHairSet;

	[Token(Token = "0x4000A0E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public string customEyewearSet;

	[Token(Token = "0x6000824")]
	[Address(RVA = "0xBD45E8", Offset = "0xBD45E8", VA = "0xBD45E8")]
	public FaceSet()
	{
	}
}
[Token(Token = "0x20001B6")]
public class FlyCamera : MonoBehaviour
{
	[Token(Token = "0x4000A0F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float mainSpeed;

	[Token(Token = "0x4000A10")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float shiftAdd;

	[Token(Token = "0x4000A11")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float maxShift;

	[Token(Token = "0x4000A12")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float camSens;

	[Token(Token = "0x4000A13")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector3 lastMouse;

	[Token(Token = "0x4000A14")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float totalRun;

	[Token(Token = "0x4000A15")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Transform xForm;

	[Token(Token = "0x4000A16")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Rigidbody rBody;

	[Token(Token = "0x4000A17")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Vector3 p;

	[Token(Token = "0x6000825")]
	[Address(RVA = "0xBD45F0", Offset = "0xBD45F0", VA = "0xBD45F0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000826")]
	[Address(RVA = "0xBD4680", Offset = "0xBD4680", VA = "0xBD4680")]
	private void Update()
	{
	}

	[Token(Token = "0x6000827")]
	[Address(RVA = "0xBD49D0", Offset = "0xBD49D0", VA = "0xBD49D0")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000828")]
	[Address(RVA = "0xBD48EC", Offset = "0xBD48EC", VA = "0xBD48EC")]
	private Vector3 getDirection()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000829")]
	[Address(RVA = "0xBD4A98", Offset = "0xBD4A98", VA = "0xBD4A98")]
	public void resetRotation(Vector3 lookAt)
	{
	}

	[Token(Token = "0x600082A")]
	[Address(RVA = "0xBD4AE0", Offset = "0xBD4AE0", VA = "0xBD4AE0")]
	public FlyCamera()
	{
	}
}
[Token(Token = "0x20001B7")]
public class FXManager : MonoBehaviour
{
	[Token(Token = "0x20001B8")]
	private class Effect
	{
		[Token(Token = "0x4000A1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ParticleFX fx;

		[Token(Token = "0x4000A1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ParticleSystem.MinMaxGradient startColor;

		[Token(Token = "0x4000A1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float startVelocityXCmin;

		[Token(Token = "0x4000A1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float startVelocityXCmax;

		[Token(Token = "0x4000A1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float startVelocityYCmin;

		[Token(Token = "0x4000A20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float startVelocityYCmax;

		[Token(Token = "0x4000A21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float startVelocityZCmin;

		[Token(Token = "0x4000A22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float startVelocityZCmax;

		[Token(Token = "0x4000A23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Material startMaterial;

		[Token(Token = "0x4000A24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public ParticleSystem[] pool;

		[Token(Token = "0x4000A25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private int poolIndex;

		[Token(Token = "0x6000833")]
		[Address(RVA = "0xBD59D0", Offset = "0xBD59D0", VA = "0xBD59D0")]
		public ParticleSystem GetNext()
		{
			return null;
		}

		[Token(Token = "0x6000834")]
		[Address(RVA = "0xBD5154", Offset = "0xBD5154", VA = "0xBD5154")]
		public Effect()
		{
		}
	}

	[Token(Token = "0x4000A18")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Dictionary<ParticleFX, Effect> effectLookup;

	[Token(Token = "0x4000A19")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Dictionary<int, Effect> effectLookupByID;

	[Token(Token = "0x4000A1A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static FXManager instance;

	[Token(Token = "0x600082B")]
	[Address(RVA = "0xBD4B4C", Offset = "0xBD4B4C", VA = "0xBD4B4C")]
	private void Awake()
	{
	}

	[Token(Token = "0x600082C")]
	[Address(RVA = "0xBD515C", Offset = "0xBD515C", VA = "0xBD515C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600082D")]
	[Address(RVA = "0xBD51A4", Offset = "0xBD51A4", VA = "0xBD51A4")]
	public ParticleFX GetFX(int fxID)
	{
		return null;
	}

	[Token(Token = "0x600082E")]
	[Address(RVA = "0xBD5208", Offset = "0xBD5208", VA = "0xBD5208")]
	public ParticleSystem CreateFX(int fxID, Vector3 position, Quaternion rotation, Vector3 velocity)
	{
		return null;
	}

	[Token(Token = "0x600082F")]
	[Address(RVA = "0xBD562C", Offset = "0xBD562C", VA = "0xBD562C")]
	public ParticleSystem CreateFX(ParticleFX fx, Vector3 position, Quaternion rotation)
	{
		return null;
	}

	[Token(Token = "0x6000830")]
	[Address(RVA = "0xBD57A4", Offset = "0xBD57A4", VA = "0xBD57A4")]
	private ParticleSystem CreateFX(Effect effect, Vector3 position, Quaternion rotation, bool play = true)
	{
		return null;
	}

	[Token(Token = "0x6000831")]
	[Address(RVA = "0xBD537C", Offset = "0xBD537C", VA = "0xBD537C")]
	public ParticleSystem CreateFX(ParticleFX fx, Vector3 position, Quaternion rotation, Vector3 force, bool play = true)
	{
		return null;
	}

	[Token(Token = "0x6000832")]
	[Address(RVA = "0xBD5A28", Offset = "0xBD5A28", VA = "0xBD5A28")]
	public FXManager()
	{
	}
}
[Token(Token = "0x20001B9")]
public class BloodEmitter : MonoBehaviour
{
	[Token(Token = "0x4000A26")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ParticleSystem defaultBlood;

	[Token(Token = "0x4000A27")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ParticleSystem defaultBloodBlack;

	[Token(Token = "0x4000A28")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int minEmissionCount;

	[Token(Token = "0x4000A29")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float minMag;

	[Token(Token = "0x4000A2A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static BloodEmitter instance;

	[Token(Token = "0x4000A2B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private ParticleSystem effectInstance;

	[Token(Token = "0x4000A2C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private ParticleSystem.EmitParams emitParams;

	[Token(Token = "0x4000A2D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public bool useBlackBlood;

	[Token(Token = "0x4000A2E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private Transform effectXForm;

	[Token(Token = "0x6000835")]
	[Address(RVA = "0xBD5AE8", Offset = "0xBD5AE8", VA = "0xBD5AE8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000836")]
	[Address(RVA = "0xBD5C08", Offset = "0xBD5C08", VA = "0xBD5C08")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000837")]
	[Address(RVA = "0xBD5CA0", Offset = "0xBD5CA0", VA = "0xBD5CA0")]
	public void Emit(Vector3 position, Quaternion rotation, Vector3 force)
	{
	}

	[Token(Token = "0x6000838")]
	[Address(RVA = "0xBD5F90", Offset = "0xBD5F90", VA = "0xBD5F90")]
	public BloodEmitter()
	{
	}
}
[Token(Token = "0x20001BA")]
public class Bouyancy : MonoBehaviour
{
	[Token(Token = "0x4000A2F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int waterZoneIndex;

	[Token(Token = "0x4000A30")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float bouyancyForceMultipler;

	[Token(Token = "0x4000A31")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public WaterZone myZone;

	[Token(Token = "0x4000A32")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Rigidbody rbody;

	[Token(Token = "0x4000A33")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool useRigidbodyPosition;

	[Token(Token = "0x4000A34")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	public bool emitSound;

	[Token(Token = "0x4000A35")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float nextRippleTime;

	[Token(Token = "0x4000A36")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform xForm;

	[Token(Token = "0x4000A37")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Ragdoll myRagdoll;

	[Token(Token = "0x6000839")]
	[Address(RVA = "0xBD5FAC", Offset = "0xBD5FAC", VA = "0xBD5FAC")]
	private void Awake()
	{
	}

	[Token(Token = "0x600083A")]
	[Address(RVA = "0xBD60AC", Offset = "0xBD60AC", VA = "0xBD60AC")]
	public void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x600083B")]
	[Address(RVA = "0xBD61B4", Offset = "0xBD61B4", VA = "0xBD61B4")]
	public Bouyancy()
	{
	}
}
[Token(Token = "0x20001BB")]
public class BulletDecalEmitter : MonoBehaviour
{
	[Token(Token = "0x4000A38")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static BulletDecalEmitter instance;

	[Token(Token = "0x4000A39")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ParticleSystem activeParticleSystem;

	[Token(Token = "0x4000A3A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int maxParticles;

	[Token(Token = "0x4000A3B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public LayerMask collisionMask;

	[Token(Token = "0x4000A3C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ParticleSystem.Particle[] particles;

	[Token(Token = "0x4000A3D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private ParticleSystem.MainModule main;

	[Token(Token = "0x4000A3E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Transform systemXForm;

	[Token(Token = "0x4000A3F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float maxParticleRadius;

	[Token(Token = "0x4000A40")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float edgeRayLength;

	[Token(Token = "0x4000A41")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Transform edgeTestXForm;

	[Token(Token = "0x4000A42")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3 topEdgePoint;

	[Token(Token = "0x4000A43")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private Vector3 bottomEdgePoint;

	[Token(Token = "0x4000A44")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Vector3 leftEdgePoint;

	[Token(Token = "0x4000A45")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private Vector3 rightEdgePoint;

	[Token(Token = "0x4000A46")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private RaycastHit edgeRayhit;

	[Token(Token = "0x4000A47")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private Vector3 randomRotation;

	[Token(Token = "0x600083C")]
	[Address(RVA = "0xBD61CC", Offset = "0xBD61CC", VA = "0xBD61CC")]
	private void Awake()
	{
	}

	[Token(Token = "0x600083D")]
	[Address(RVA = "0xBD6350", Offset = "0xBD6350", VA = "0xBD6350")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600083E")]
	[Address(RVA = "0xBD64E0", Offset = "0xBD64E0", VA = "0xBD64E0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600083F")]
	[Address(RVA = "0xBD62C0", Offset = "0xBD62C0", VA = "0xBD62C0")]
	private void InitParticleSystem()
	{
	}

	[Token(Token = "0x6000840")]
	[Address(RVA = "0xBD6670", Offset = "0xBD6670", VA = "0xBD6670")]
	private void Clear()
	{
	}

	[Token(Token = "0x6000841")]
	[Address(RVA = "0xBD668C", Offset = "0xBD668C", VA = "0xBD668C")]
	private bool CheckEdges(Vector3 pos, Vector3 normal)
	{
		return default(bool);
	}

	[Token(Token = "0x6000842")]
	[Address(RVA = "0xBD68CC", Offset = "0xBD68CC", VA = "0xBD68CC")]
	public void Emit(Vector3 position, Vector3 normal)
	{
	}

	[Token(Token = "0x6000843")]
	[Address(RVA = "0xBD6AAC", Offset = "0xBD6AAC", VA = "0xBD6AAC")]
	public BulletDecalEmitter()
	{
	}
}
[Token(Token = "0x20001BC")]
public class SparkEmitter : MonoBehaviour
{
	[Token(Token = "0x4000A48")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ParticleSystem defaultSpark;

	[Token(Token = "0x4000A49")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int minEmissionCount;

	[Token(Token = "0x4000A4A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float minMag;

	[Token(Token = "0x4000A4B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static SparkEmitter instance;

	[Token(Token = "0x4000A4C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ParticleSystem effectInstance;

	[Token(Token = "0x4000A4D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private ParticleSystem.EmitParams emitParams;

	[Token(Token = "0x4000A4E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private Transform effectXForm;

	[Token(Token = "0x6000844")]
	[Address(RVA = "0xBD6AC8", Offset = "0xBD6AC8", VA = "0xBD6AC8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000845")]
	[Address(RVA = "0xBD6B9C", Offset = "0xBD6B9C", VA = "0xBD6B9C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000846")]
	[Address(RVA = "0xBD6C34", Offset = "0xBD6C34", VA = "0xBD6C34")]
	public void Emit(Vector3 position, Quaternion rotation, Vector3 force)
	{
	}

	[Token(Token = "0x6000847")]
	[Address(RVA = "0xBD6F5C", Offset = "0xBD6F5C", VA = "0xBD6F5C")]
	public SparkEmitter()
	{
	}
}
[Token(Token = "0x20001BD")]
public class WaterRipplePool : MonoBehaviour
{
	[Token(Token = "0x4000A4F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static WaterRipplePool instance;

	[Token(Token = "0x4000A50")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ParticleSystem rippleEmitter;

	[Token(Token = "0x4000A51")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ParticleSystem splashEmitter;

	[Token(Token = "0x4000A52")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ParticleSystem.EmitParams emitParams;

	[Token(Token = "0x6000848")]
	[Address(RVA = "0xBD6F70", Offset = "0xBD6F70", VA = "0xBD6F70")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000849")]
	[Address(RVA = "0xBD6FBC", Offset = "0xBD6FBC", VA = "0xBD6FBC")]
	public void CreateRipple(Vector3 pos)
	{
	}

	[Token(Token = "0x600084A")]
	[Address(RVA = "0xBD70C8", Offset = "0xBD70C8", VA = "0xBD70C8")]
	public void CreateSplash(Vector3 pos, float mag, float mass, Vector3 vel)
	{
	}

	[Token(Token = "0x600084B")]
	[Address(RVA = "0xBD7258", Offset = "0xBD7258", VA = "0xBD7258")]
	public WaterRipplePool()
	{
	}
}
[Token(Token = "0x20001BE")]
public class WaterZone : MonoBehaviour
{
	[Token(Token = "0x4000A53")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float rippleFrequencyDelay;

	[Token(Token = "0x4000A54")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float waterDrag;

	[Token(Token = "0x4000A55")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float waterAngularDrag;

	[Token(Token = "0x4000A56")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float maxYMag;

	[Token(Token = "0x4000A57")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float surfaceYOffset;

	[Token(Token = "0x4000A58")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float depthYOffset;

	[Token(Token = "0x4000A59")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float currentForce;

	[Token(Token = "0x4000A5A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private BoxCollider trigger;

	[Token(Token = "0x4000A5B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float surfaceY;

	[Token(Token = "0x4000A5C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public List<Bouyancy> containedObjects;

	[Token(Token = "0x4000A5D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3 V3_UP;

	[Token(Token = "0x4000A5E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private Vector3 CURRENT_DIRECTION;

	[Token(Token = "0x600084C")]
	[Address(RVA = "0xBD7260", Offset = "0xBD7260", VA = "0xBD7260")]
	private void Awake()
	{
	}

	[Token(Token = "0x600084D")]
	[Address(RVA = "0xBD72D4", Offset = "0xBD72D4", VA = "0xBD72D4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600084E")]
	[Address(RVA = "0xBD73A8", Offset = "0xBD73A8", VA = "0xBD73A8")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600084F")]
	[Address(RVA = "0xBD781C", Offset = "0xBD781C", VA = "0xBD781C")]
	public void RemoveIndex(int index)
	{
	}

	[Token(Token = "0x6000850")]
	[Address(RVA = "0xBD79EC", Offset = "0xBD79EC", VA = "0xBD79EC")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000851")]
	[Address(RVA = "0xBD78A0", Offset = "0xBD78A0", VA = "0xBD78A0")]
	private void IndexObjects()
	{
	}

	[Token(Token = "0x6000852")]
	[Address(RVA = "0xBD7B10", Offset = "0xBD7B10", VA = "0xBD7B10")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000853")]
	[Address(RVA = "0xBD808C", Offset = "0xBD808C", VA = "0xBD808C")]
	public void ClearList()
	{
	}

	[Token(Token = "0x6000854")]
	[Address(RVA = "0xBD8220", Offset = "0xBD8220", VA = "0xBD8220")]
	public WaterZone()
	{
	}
}
[Token(Token = "0x20001BF")]
public class GloveVariantSaveData
{
	[Token(Token = "0x4000A5F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string index;

	[Token(Token = "0x4000A60")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool unlocked;

	[Token(Token = "0x6000855")]
	[Address(RVA = "0xBD8338", Offset = "0xBD8338", VA = "0xBD8338")]
	private GloveVariantSaveData()
	{
	}

	[Token(Token = "0x6000856")]
	[Address(RVA = "0xBD8340", Offset = "0xBD8340", VA = "0xBD8340")]
	public GloveVariantSaveData(string index)
	{
	}

	[Token(Token = "0x6000857")]
	[Address(RVA = "0xBD836C", Offset = "0xBD836C", VA = "0xBD836C")]
	public void Serialize(BinaryWriter writer)
	{
	}

	[Token(Token = "0x6000858")]
	[Address(RVA = "0xBD83B8", Offset = "0xBD83B8", VA = "0xBD83B8")]
	public static GloveVariantSaveData Deserialize(BinaryReader reader, ushort major, ushort minor)
	{
		return null;
	}
}
[Token(Token = "0x20001C0")]
public class GloveSaveData
{
	[Token(Token = "0x4000A61")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string index;

	[Token(Token = "0x4000A62")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool unlocked;

	[Token(Token = "0x4000A63")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Dictionary<string, GloveVariantSaveData> variants;

	[Token(Token = "0x6000859")]
	[Address(RVA = "0xBD844C", Offset = "0xBD844C", VA = "0xBD844C")]
	public GloveSaveData(string index)
	{
	}

	[Token(Token = "0x600085A")]
	[Address(RVA = "0xBD84DC", Offset = "0xBD84DC", VA = "0xBD84DC")]
	public GloveSaveData(GloveData data)
	{
	}

	[Token(Token = "0x600085B")]
	[Address(RVA = "0xBD85D0", Offset = "0xBD85D0", VA = "0xBD85D0")]
	public void Serialize(BinaryWriter writer)
	{
	}

	[Token(Token = "0x600085C")]
	[Address(RVA = "0xBD879C", Offset = "0xBD879C", VA = "0xBD879C")]
	public static GloveSaveData Deserialize(BinaryReader reader, ushort major, ushort minor)
	{
		return null;
	}

	[Token(Token = "0x600085D")]
	[Address(RVA = "0xBD89F0", Offset = "0xBD89F0", VA = "0xBD89F0")]
	public GloveVariantSaveData GetGloveVariantData(string index)
	{
		return null;
	}
}
[Token(Token = "0x20001C1")]
public class WeaponVariantSaveData
{
	[Token(Token = "0x4000A64")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string index;

	[Token(Token = "0x4000A65")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool unlocked;

	[Token(Token = "0x4000A66")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool equipped;

	[Token(Token = "0x600085E")]
	[Address(RVA = "0xBD8A84", Offset = "0xBD8A84", VA = "0xBD8A84")]
	private WeaponVariantSaveData()
	{
	}

	[Token(Token = "0x600085F")]
	[Address(RVA = "0xBD8A8C", Offset = "0xBD8A8C", VA = "0xBD8A8C")]
	public WeaponVariantSaveData(string index)
	{
	}

	[Token(Token = "0x6000860")]
	[Address(RVA = "0xBD8AB8", Offset = "0xBD8AB8", VA = "0xBD8AB8")]
	public void Serialize(BinaryWriter writer)
	{
	}

	[Token(Token = "0x6000861")]
	[Address(RVA = "0xBD8B04", Offset = "0xBD8B04", VA = "0xBD8B04")]
	public static WeaponVariantSaveData Deserialize(BinaryReader reader, ushort major, ushort minor)
	{
		return null;
	}
}
[Token(Token = "0x20001C2")]
public class WeaponSaveData
{
	[Token(Token = "0x4000A67")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int oldIndex;

	[Token(Token = "0x4000A68")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string index;

	[Token(Token = "0x4000A69")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool unlocked;

	[Token(Token = "0x4000A6A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool dualWield;

	[Token(Token = "0x4000A6B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string currentVariant;

	[Token(Token = "0x4000A6C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Dictionary<string, WeaponVariantSaveData> variants;

	[Token(Token = "0x6000862")]
	[Address(RVA = "0xBD8B98", Offset = "0xBD8B98", VA = "0xBD8B98")]
	public WeaponSaveData()
	{
	}

	[Token(Token = "0x6000863")]
	[Address(RVA = "0xBD8BB4", Offset = "0xBD8BB4", VA = "0xBD8BB4")]
	public WeaponSaveData(WeaponData data)
	{
	}

	[Token(Token = "0x6000864")]
	[Address(RVA = "0xBD8CF0", Offset = "0xBD8CF0", VA = "0xBD8CF0")]
	public WeaponSaveData(string weaponIndex)
	{
	}

	[Token(Token = "0x6000865")]
	[Address(RVA = "0xBD8D88", Offset = "0xBD8D88", VA = "0xBD8D88")]
	public void Serialize(BinaryWriter writer)
	{
	}

	[Token(Token = "0x6000866")]
	[Address(RVA = "0xBD8F98", Offset = "0xBD8F98", VA = "0xBD8F98")]
	public static WeaponSaveData Deserialize(BinaryReader reader, ushort major, ushort minor)
	{
		return null;
	}

	[Token(Token = "0x6000867")]
	[Address(RVA = "0xBD91F0", Offset = "0xBD91F0", VA = "0xBD91F0")]
	public WeaponVariantSaveData GetWeaponVariantData(string index)
	{
		return null;
	}
}
[Token(Token = "0x20001C3")]
public class LevelSaveData
{
	[Token(Token = "0x4000A6D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool unlocked;

	[Token(Token = "0x4000A6E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public int maxDifficulty;

	[Token(Token = "0x4000A6F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int levelIndex;

	[Token(Token = "0x6000868")]
	[Address(RVA = "0xBD9284", Offset = "0xBD9284", VA = "0xBD9284")]
	public LevelSaveData()
	{
	}

	[Token(Token = "0x6000869")]
	[Address(RVA = "0xBD928C", Offset = "0xBD928C", VA = "0xBD928C")]
	public LevelSaveData(bool unlocked, int maxDifficulty, int levelIndex)
	{
	}

	[Token(Token = "0x600086A")]
	[Address(RVA = "0xBD92C8", Offset = "0xBD92C8", VA = "0xBD92C8")]
	public void Serialize(BinaryWriter writer)
	{
	}

	[Token(Token = "0x600086B")]
	[Address(RVA = "0xBD932C", Offset = "0xBD932C", VA = "0xBD932C")]
	public static LevelSaveData Deserialize(BinaryReader reader, ushort major, ushort minor)
	{
		return null;
	}
}
[Token(Token = "0x20001C4")]
public class GameData
{
	[Token(Token = "0x4000A70")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private DateTime creationDate;

	[Token(Token = "0x4000A71")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool newSaveGame;

	[Token(Token = "0x4000A72")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static GameData _current;

	[Token(Token = "0x4000A73")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool tutorialComplete;

	[Token(Token = "0x4000A74")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public uint currency;

	[Token(Token = "0x4000A75")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<WeaponSaveData> weaponSaveDataIndex;

	[Token(Token = "0x4000A76")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Dictionary<string, WeaponSaveData> weaponSaveData;

	[Token(Token = "0x4000A77")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Dictionary<string, GloveSaveData> gloveSaveData;

	[Token(Token = "0x4000A78")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public string currentGloveIndex;

	[Token(Token = "0x4000A79")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public string currentGloveVariantIndex;

	[Token(Token = "0x4000A7A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public List<LevelSaveData> levelSaveData;

	[Token(Token = "0x4000A7B")]
	public const uint MAGIC_NONCE = 2701458109u;

	[Token(Token = "0x4000A7C")]
	public const ushort VERSION_MAJOR = 0;

	[Token(Token = "0x4000A7D")]
	public const ushort VERSION_MINOR = 8;

	[Token(Token = "0x17000105")]
	private static GameData current
	{
		[Token(Token = "0x600086C")]
		[Address(RVA = "0xBD93D8", Offset = "0xBD93D8", VA = "0xBD93D8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x14000016")]
	public static event Action gameLoaded
	{
		[Token(Token = "0x600088F")]
		[Address(RVA = "0xBDBC34", Offset = "0xBDBC34", VA = "0xBDBC34")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000890")]
		[Address(RVA = "0xBDBCF0", Offset = "0xBDBCF0", VA = "0xBDBCF0")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x600086D")]
	[Address(RVA = "0xBD97D4", Offset = "0xBD97D4", VA = "0xBD97D4")]
	public GameData()
	{
	}

	[Token(Token = "0x600086E")]
	[Address(RVA = "0xBD9F5C", Offset = "0xBD9F5C", VA = "0xBD9F5C")]
	public static void UnlockLevels()
	{
	}

	[Token(Token = "0x600086F")]
	[Address(RVA = "0xBDA048", Offset = "0xBDA048", VA = "0xBDA048")]
	public static void UnlockAllLevels()
	{
	}

	[Token(Token = "0x6000870")]
	[Address(RVA = "0xBDA158", Offset = "0xBDA158", VA = "0xBDA158")]
	public static LevelSaveData GetLevelData(int index)
	{
		return null;
	}

	[Token(Token = "0x6000871")]
	[Address(RVA = "0xBDA1B4", Offset = "0xBDA1B4", VA = "0xBDA1B4")]
	public static void SetCurrentGloves(string index)
	{
	}

	[Token(Token = "0x6000872")]
	[Address(RVA = "0xBDA1D4", Offset = "0xBDA1D4", VA = "0xBDA1D4")]
	public static void SetCurrentGloveVariant(string index)
	{
	}

	[Token(Token = "0x6000873")]
	[Address(RVA = "0xBDA1F4", Offset = "0xBDA1F4", VA = "0xBDA1F4")]
	public static void SetWeaponVariant(string weaponIndex, string variantIndex)
	{
	}

	[Token(Token = "0x6000874")]
	[Address(RVA = "0xBDA260", Offset = "0xBDA260", VA = "0xBDA260")]
	public static int GetLevelCount()
	{
		return default(int);
	}

	[Token(Token = "0x6000875")]
	[Address(RVA = "0xBDA2A4", Offset = "0xBDA2A4", VA = "0xBDA2A4")]
	public static void StartSession()
	{
	}

	[Token(Token = "0x6000876")]
	[Address(RVA = "0xBDA31C", Offset = "0xBDA31C", VA = "0xBDA31C")]
	public static string GetCurrentGloves()
	{
		return null;
	}

	[Token(Token = "0x6000877")]
	[Address(RVA = "0xBDA338", Offset = "0xBDA338", VA = "0xBDA338")]
	public static string GetCurrentGlovesVariant()
	{
		return null;
	}

	[Token(Token = "0x6000878")]
	[Address(RVA = "0xBDA354", Offset = "0xBDA354", VA = "0xBDA354")]
	public static void RemoveCurrency(int price)
	{
	}

	[Token(Token = "0x6000879")]
	[Address(RVA = "0xBDA3B0", Offset = "0xBDA3B0", VA = "0xBDA3B0")]
	public static void AddCurrency(int price)
	{
	}

	[Token(Token = "0x600087A")]
	[Address(RVA = "0xBDA40C", Offset = "0xBDA40C", VA = "0xBDA40C")]
	public static uint GetCurrency()
	{
		return default(uint);
	}

	[Token(Token = "0x600087B")]
	[Address(RVA = "0xBDA428", Offset = "0xBDA428", VA = "0xBDA428")]
	public static bool GetTutorialComplete()
	{
		return default(bool);
	}

	[Token(Token = "0x600087C")]
	[Address(RVA = "0xBDA444", Offset = "0xBDA444", VA = "0xBDA444")]
	public static void SetTutorialComplete(bool complete)
	{
	}

	[Token(Token = "0x600087D")]
	[Address(RVA = "0xBDA5B8", Offset = "0xBDA5B8", VA = "0xBDA5B8")]
	public static List<WeaponSaveData> GetUnlockableWeapons()
	{
		return null;
	}

	[Token(Token = "0x600087E")]
	[Address(RVA = "0xBDA6D8", Offset = "0xBDA6D8", VA = "0xBDA6D8")]
	public static int GetNumberOfUnlockableWeapons()
	{
		return default(int);
	}

	[Token(Token = "0x600087F")]
	[Address(RVA = "0xBDA810", Offset = "0xBDA810", VA = "0xBDA810")]
	public static List<WeaponSaveData> GetUnlockedWeapons()
	{
		return null;
	}

	[Token(Token = "0x6000880")]
	[Address(RVA = "0xBDA930", Offset = "0xBDA930", VA = "0xBDA930")]
	public static List<GloveVariantSaveData> GetUnlockedGloves()
	{
		return null;
	}

	[Token(Token = "0x6000881")]
	[Address(RVA = "0xBDAC90", Offset = "0xBDAC90", VA = "0xBDAC90")]
	public static List<WeaponSaveData> GetAllWeapons()
	{
		return null;
	}

	[Token(Token = "0x6000882")]
	[Address(RVA = "0xBDACAC", Offset = "0xBDACAC", VA = "0xBDACAC")]
	public static WeaponSaveData GetWeapon(string index)
	{
		return null;
	}

	[Token(Token = "0x6000883")]
	[Address(RVA = "0xBDAD08", Offset = "0xBDAD08", VA = "0xBDAD08")]
	public static GloveSaveData GetGloveData(string index)
	{
		return null;
	}

	[Token(Token = "0x6000884")]
	[Address(RVA = "0xBDADA8", Offset = "0xBDADA8", VA = "0xBDADA8")]
	public static void UnlockWeapon(string weaponIndex, string variant)
	{
	}

	[Token(Token = "0x6000885")]
	[Address(RVA = "0xBDAE6C", Offset = "0xBDAE6C", VA = "0xBDAE6C")]
	public static void UnlockGloves(string glovesIndex, string variantIndex)
	{
	}

	[Token(Token = "0x6000886")]
	[Address(RVA = "0xBDAF08", Offset = "0xBDAF08", VA = "0xBDAF08")]
	public static bool AllGlovesUnlocked(string gloveIndex)
	{
		return default(bool);
	}

	[Token(Token = "0x6000887")]
	[Address(RVA = "0xBDB2CC", Offset = "0xBDB2CC", VA = "0xBDB2CC")]
	public static void DualWieldWeapon(string weaponIndex)
	{
	}

	[Token(Token = "0x6000888")]
	[Address(RVA = "0xBDB338", Offset = "0xBDB338", VA = "0xBDB338")]
	public static void UnlockAllWeapons()
	{
	}

	[Token(Token = "0x6000889")]
	[Address(RVA = "0xBDB730", Offset = "0xBDB730", VA = "0xBDB730")]
	public static bool AllWeaponsUnlocked()
	{
		return default(bool);
	}

	[Token(Token = "0x600088A")]
	[Address(RVA = "0xBDB7F4", Offset = "0xBDB7F4", VA = "0xBDB7F4")]
	public static bool AllDualUnlocked()
	{
		return default(bool);
	}

	[Token(Token = "0x600088B")]
	[Address(RVA = "0xBDB8B8", Offset = "0xBDB8B8", VA = "0xBDB8B8")]
	public static int GetNumberOfUnlockedLevels()
	{
		return default(int);
	}

	[Token(Token = "0x600088C")]
	[Address(RVA = "0xBDB9D8", Offset = "0xBDB9D8", VA = "0xBDB9D8")]
	public static int GetNumberOfCompletedLevels()
	{
		return default(int);
	}

	[Token(Token = "0x600088D")]
	[Address(RVA = "0xBDBAF8", Offset = "0xBDBAF8", VA = "0xBDBAF8")]
	public static void SetDifficultyAchieved(int levelIndex, int score)
	{
	}

	[Token(Token = "0x600088E")]
	[Address(RVA = "0xBDBBCC", Offset = "0xBDBBCC", VA = "0xBDBBCC")]
	public static int GetDifficultyAchieved(int levelIndex)
	{
		return default(int);
	}

	[Token(Token = "0x6000891")]
	[Address(RVA = "0xBDB440", Offset = "0xBDB440", VA = "0xBDB440")]
	public static bool Save(bool sync = false)
	{
		return default(bool);
	}

	[Token(Token = "0x6000892")]
	[Address(RVA = "0xBDBF34", Offset = "0xBDBF34", VA = "0xBDBF34")]
	public static bool ResetSave()
	{
		return default(bool);
	}

	[Token(Token = "0x6000893")]
	[Address(RVA = "0xBDC118", Offset = "0xBDC118", VA = "0xBDC118")]
	public static void GetStorageLocations(out string save, out string temp, out string backup)
	{
	}

	[Token(Token = "0x6000894")]
	[Address(RVA = "0xBDBDAC", Offset = "0xBDBDAC", VA = "0xBDBDAC")]
	public static void GetSaveLocations(out string save, out string temp, out string backup)
	{
	}

	[Token(Token = "0x6000895")]
	[Address(RVA = "0xBD9434", Offset = "0xBD9434", VA = "0xBD9434")]
	public static bool Load()
	{
		return default(bool);
	}

	[Token(Token = "0x6000896")]
	[Address(RVA = "0xBDC4FC", Offset = "0xBDC4FC", VA = "0xBDC4FC")]
	public static bool IsLoaded()
	{
		return default(bool);
	}

	[Token(Token = "0x6000897")]
	[Address(RVA = "0xBDC54C", Offset = "0xBDC54C", VA = "0xBDC54C")]
	public static DateTime GetCreationDate()
	{
		return default(DateTime);
	}

	[Token(Token = "0x6000898")]
	[Address(RVA = "0xBDC5B4", Offset = "0xBDC5B4", VA = "0xBDC5B4")]
	private void SaveData(Stream output)
	{
	}

	[Token(Token = "0x6000899")]
	[Address(RVA = "0xBDC9A8", Offset = "0xBDC9A8", VA = "0xBDC9A8")]
	private bool LoadData(Stream input)
	{
		return default(bool);
	}

	[Token(Token = "0x600089A")]
	[Address(RVA = "0xBDCFD0", Offset = "0xBDCFD0", VA = "0xBDCFD0")]
	private void BufferRead(BinaryReader bin, byte[] buffer, int count)
	{
	}

	[Token(Token = "0x600089B")]
	[Address(RVA = "0xBDD048", Offset = "0xBDD048", VA = "0xBDD048")]
	private static Array ReconcileArrays(Array sourceArray, Array destinationArray)
	{
		return null;
	}

	[Token(Token = "0x600089C")]
	[Address(RVA = "0xBDCB9C", Offset = "0xBDCB9C", VA = "0xBDCB9C")]
	private bool Load_v_0_X(BinaryReader bin, ushort versionMajor, ushort versionMinor)
	{
		return default(bool);
	}
}
[Token(Token = "0x20001C6")]
public static class GameLayers
{
	[Token(Token = "0x4000A85")]
	public const int Default = 0;

	[Token(Token = "0x4000A86")]
	public const int TransparentFX = 1;

	[Token(Token = "0x4000A87")]
	public const int IgnoreRaycast = 2;

	[Token(Token = "0x4000A88")]
	public const int Water = 4;

	[Token(Token = "0x4000A89")]
	public const int UI = 5;

	[Token(Token = "0x4000A8A")]
	public const int CoverPoint = 6;

	[Token(Token = "0x4000A8B")]
	public const int Projectile = 7;

	[Token(Token = "0x4000A8C")]
	public const int Player = 8;

	[Token(Token = "0x4000A8D")]
	public const int Ground = 9;

	[Token(Token = "0x4000A8E")]
	public const int GroundNoDecal = 10;

	[Token(Token = "0x4000A8F")]
	public const int Trigger = 11;

	[Token(Token = "0x4000A90")]
	public const int Ragdoll = 12;

	[Token(Token = "0x4000A91")]
	public const int RagdollCollision = 13;

	[Token(Token = "0x4000A92")]
	public const int Mover = 14;

	[Token(Token = "0x4000A93")]
	public const int VRUILayer = 15;

	[Token(Token = "0x4000A94")]
	public const int FingerTrigger = 16;

	[Token(Token = "0x4000A95")]
	public const int PlayerBody = 17;

	[Token(Token = "0x4000A96")]
	public const int PlayerTrigger = 18;

	[Token(Token = "0x4000A97")]
	public const int Coin = 19;

	[Token(Token = "0x4000A98")]
	public const int Grabbable = 20;

	[Token(Token = "0x4000A99")]
	public const int Hand = 21;

	[Token(Token = "0x4000A9A")]
	public const int Glass = 22;

	[Token(Token = "0x4000A9B")]
	public const int ProjectorEntity = 23;

	[Token(Token = "0x4000A9C")]
	public const int Destructible = 24;

	[Token(Token = "0x4000A9D")]
	public const int Holster = 25;

	[Token(Token = "0x4000A9E")]
	public const int SoftCollision = 26;

	[Token(Token = "0x4000A9F")]
	public const int BlockAISight = 27;

	[Token(Token = "0x4000AA0")]
	public const int Casing = 28;

	[Token(Token = "0x4000AA1")]
	public const int FocusTarget = 29;

	[Token(Token = "0x4000AA2")]
	public const int PlayerHand = 30;

	[Token(Token = "0x4000AA3")]
	public const int PlayerHead = 31;
}
[Token(Token = "0x20001C7")]
public class GenericTrigger : MonoBehaviour
{
	[Token(Token = "0x4000AA4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEvent events;

	[Token(Token = "0x60008A4")]
	[Address(RVA = "0xBDD1C8", Offset = "0xBDD1C8", VA = "0xBDD1C8")]
	public void InvokeEvents()
	{
	}

	[Token(Token = "0x60008A5")]
	[Address(RVA = "0xBDD1E4", Offset = "0xBDD1E4", VA = "0xBDD1E4")]
	public GenericTrigger()
	{
	}
}
[Token(Token = "0x20001C8")]
public class Global : MonoBehaviour
{
	[Token(Token = "0x20001C9")]
	[CompilerGenerated]
	private sealed class <WaitOnHandle>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000AAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000AAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000AAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public WaitHandle handle;

		[Token(Token = "0x4000AAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action callback;

		[Token(Token = "0x1700010A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60008C6")]
			[Address(RVA = "0xBDDF4C", Offset = "0xBDDF4C", VA = "0xBDDF4C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700010B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60008C8")]
			[Address(RVA = "0xBDDF94", Offset = "0xBDDF94", VA = "0xBDDF94", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60008C3")]
		[Address(RVA = "0xBDD3A4", Offset = "0xBDD3A4", VA = "0xBDD3A4")]
		[DebuggerHidden]
		public <WaitOnHandle>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x60008C4")]
		[Address(RVA = "0xBDDED8", Offset = "0xBDDED8", VA = "0xBDDED8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60008C5")]
		[Address(RVA = "0xBDDEDC", Offset = "0xBDDEDC", VA = "0xBDDEDC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60008C7")]
		[Address(RVA = "0xBDDF54", Offset = "0xBDDF54", VA = "0xBDDF54", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001CA")]
	[CompilerGenerated]
	private sealed class <WaitForYieldInstruction>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000AAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000AB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000AB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public YieldInstruction waitFor;

		[Token(Token = "0x4000AB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action callback;

		[Token(Token = "0x1700010C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60008CC")]
			[Address(RVA = "0xBDDFFC", Offset = "0xBDDFFC", VA = "0xBDDFFC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700010D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60008CE")]
			[Address(RVA = "0xBDE044", Offset = "0xBDE044", VA = "0xBDE044", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60008C9")]
		[Address(RVA = "0xBDD4C8", Offset = "0xBDD4C8", VA = "0xBDD4C8")]
		[DebuggerHidden]
		public <WaitForYieldInstruction>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x60008CA")]
		[Address(RVA = "0xBDDF9C", Offset = "0xBDDF9C", VA = "0xBDDF9C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60008CB")]
		[Address(RVA = "0xBDDFA0", Offset = "0xBDDFA0", VA = "0xBDDFA0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60008CD")]
		[Address(RVA = "0xBDE004", Offset = "0xBDE004", VA = "0xBDE004", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001CB")]
	[CompilerGenerated]
	private sealed class <WaitForYieldInstruction>d__8 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000AB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000AB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000AB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CustomYieldInstruction waitFor;

		[Token(Token = "0x4000AB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action callback;

		[Token(Token = "0x1700010E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60008D2")]
			[Address(RVA = "0xBDE0AC", Offset = "0xBDE0AC", VA = "0xBDE0AC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700010F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60008D4")]
			[Address(RVA = "0xBDE0F4", Offset = "0xBDE0F4", VA = "0xBDE0F4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60008CF")]
		[Address(RVA = "0xBDD5EC", Offset = "0xBDD5EC", VA = "0xBDD5EC")]
		[DebuggerHidden]
		public <WaitForYieldInstruction>d__8(int <>1__state)
		{
		}

		[Token(Token = "0x60008D0")]
		[Address(RVA = "0xBDE04C", Offset = "0xBDE04C", VA = "0xBDE04C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60008D1")]
		[Address(RVA = "0xBDE050", Offset = "0xBDE050", VA = "0xBDE050", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60008D3")]
		[Address(RVA = "0xBDE0B4", Offset = "0xBDE0B4", VA = "0xBDE0B4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000AA5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Global instance;

	[Token(Token = "0x4000AA6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static string _ResourceRoot;

	[Token(Token = "0x4000AA7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static int dimmerCounter;

	[Token(Token = "0x4000AA8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private static int activityIndicatorCounter;

	[Token(Token = "0x4000AA9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static int sdkInt;

	[Token(Token = "0x4000AAA")]
	public const string platform = "android";

	[Token(Token = "0x17000106")]
	public static string ResourceRoot
	{
		[Token(Token = "0x60008B3")]
		[Address(RVA = "0xBDD780", Offset = "0xBDD780", VA = "0xBDD780")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000107")]
	public static int systemMemorySize
	{
		[Token(Token = "0x60008BC")]
		[Address(RVA = "0xBDDCEC", Offset = "0xBDDCEC", VA = "0xBDDCEC")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000108")]
	public static int lowMemoryThreshold
	{
		[Token(Token = "0x60008BD")]
		[Address(RVA = "0xBDDCF4", Offset = "0xBDDCF4", VA = "0xBDDCF4")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000109")]
	public static bool lowMemoryDevice
	{
		[Token(Token = "0x60008BE")]
		[Address(RVA = "0xBDDCFC", Offset = "0xBDDCFC", VA = "0xBDDCFC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60008A6")]
	[Address(RVA = "0xBDD1EC", Offset = "0xBDD1EC", VA = "0xBDD1EC")]
	public static Semaphore CreateWaiter(Action callback, out Coroutine out_coroutine)
	{
		return null;
	}

	[Token(Token = "0x60008A7")]
	[Address(RVA = "0xBDD328", Offset = "0xBDD328", VA = "0xBDD328")]
	public static Semaphore CreateWaiter(Action callback)
	{
		return null;
	}

	[Token(Token = "0x60008A8")]
	[Address(RVA = "0xBDD390", Offset = "0xBDD390", VA = "0xBDD390")]
	public static void ReleaseWaiter(Semaphore sem)
	{
	}

	[Token(Token = "0x60008A9")]
	[Address(RVA = "0xBDD2B4", Offset = "0xBDD2B4", VA = "0xBDD2B4")]
	[IteratorStateMachine(typeof(<WaitOnHandle>d__4))]
	private static IEnumerator WaitOnHandle(WaitHandle handle, Action callback)
	{
		return null;
	}

	[Token(Token = "0x60008AA")]
	[Address(RVA = "0xBDD3CC", Offset = "0xBDD3CC", VA = "0xBDD3CC")]
	public static Coroutine After(YieldInstruction waitFor, Action callback)
	{
		return null;
	}

	[Token(Token = "0x60008AB")]
	[Address(RVA = "0xBDD454", Offset = "0xBDD454", VA = "0xBDD454")]
	[IteratorStateMachine(typeof(<WaitForYieldInstruction>d__6))]
	private static IEnumerator WaitForYieldInstruction(YieldInstruction waitFor, Action callback)
	{
		return null;
	}

	[Token(Token = "0x60008AC")]
	[Address(RVA = "0xBDD4F0", Offset = "0xBDD4F0", VA = "0xBDD4F0")]
	public static Coroutine After(CustomYieldInstruction waitFor, Action callback)
	{
		return null;
	}

	[Token(Token = "0x60008AD")]
	[Address(RVA = "0xBDD578", Offset = "0xBDD578", VA = "0xBDD578")]
	[IteratorStateMachine(typeof(<WaitForYieldInstruction>d__8))]
	private static IEnumerator WaitForYieldInstruction(CustomYieldInstruction waitFor, Action callback)
	{
		return null;
	}

	[Token(Token = "0x60008AE")]
	[Address(RVA = "0xBDD614", Offset = "0xBDD614", VA = "0xBDD614", Slot = "4")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x60008AF")]
	[Address(RVA = "0xBDD6C4", Offset = "0xBDD6C4", VA = "0xBDD6C4")]
	public static void setInstance()
	{
	}

	[Token(Token = "0x60008B0")]
	[Address(RVA = "0xBDD764", Offset = "0xBDD764", VA = "0xBDD764")]
	private void OnApplicationPause(bool pauseStatus)
	{
	}

	[Token(Token = "0x60008B1")]
	[Address(RVA = "0xBDD774", Offset = "0xBDD774", VA = "0xBDD774")]
	private void OnApplicationQuit()
	{
	}

	[Token(Token = "0x60008B2")]
	[Address(RVA = "0xBDD77C", Offset = "0xBDD77C", VA = "0xBDD77C", Slot = "5")]
	protected virtual void Update()
	{
	}

	[Token(Token = "0x60008B4")]
	[Address(RVA = "0xBDD8B0", Offset = "0xBDD8B0", VA = "0xBDD8B0", Slot = "6")]
	public virtual string GetPublicGooglePlayKey()
	{
		return null;
	}

	[Token(Token = "0x60008B5")]
	[Address(RVA = "0xBDD8B8", Offset = "0xBDD8B8", VA = "0xBDD8B8")]
	public static void DisableScreenDimmer()
	{
	}

	[Token(Token = "0x60008B6")]
	[Address(RVA = "0xBDD920", Offset = "0xBDD920", VA = "0xBDD920")]
	public static void EnableScreenDimmer()
	{
	}

	[Token(Token = "0x60008B7")]
	[Address(RVA = "0xBDD9A0", Offset = "0xBDD9A0", VA = "0xBDD9A0")]
	public static void DisableActivityIndicator()
	{
	}

	[Token(Token = "0x60008B8")]
	[Address(RVA = "0xBDDA1C", Offset = "0xBDDA1C", VA = "0xBDDA1C")]
	public static void EnableActivityIndicator()
	{
	}

	[Token(Token = "0x60008B9")]
	[Address(RVA = "0xBDDAA4", Offset = "0xBDDAA4", VA = "0xBDDAA4", Slot = "7")]
	public virtual string[] GetAdditionalCommonTranslationFiles()
	{
		return null;
	}

	[Token(Token = "0x60008BA")]
	[Address(RVA = "0xBDDAAC", Offset = "0xBDDAAC", VA = "0xBDDAAC", Slot = "8")]
	public virtual string[] GetAdditionalTranslationFiles()
	{
		return null;
	}

	[Token(Token = "0x60008BB")]
	[Address(RVA = "0xBDDAB4", Offset = "0xBDDAB4", VA = "0xBDDAB4")]
	public static int GetSDKInt()
	{
		return default(int);
	}

	[Token(Token = "0x60008BF")]
	[Address(RVA = "0xBDDD80", Offset = "0xBDDD80", VA = "0xBDDD80")]
	public static void GoToStore([Optional] string extra)
	{
	}

	[Token(Token = "0x60008C0")]
	[Address(RVA = "0xBDDE38", Offset = "0xBDDE38", VA = "0xBDDE38", Slot = "9")]
	protected virtual string GetStoreURL()
	{
		return null;
	}

	[Token(Token = "0x60008C1")]
	[Address(RVA = "0xBDDE80", Offset = "0xBDDE80", VA = "0xBDDE80")]
	public Global()
	{
	}
}
[Token(Token = "0x20001CC")]
public enum GloveType
{
	[Token(Token = "0x4000AB8")]
	Huntsman,
	[Token(Token = "0x4000AB9")]
	Harvester,
	[Token(Token = "0x4000ABA")]
	RoboHand,
	[Token(Token = "0x4000ABB")]
	Tactical
}
[Serializable]
[Token(Token = "0x20001CD")]
public class GloveData
{
	[Token(Token = "0x4000ABC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public GloveType gloveType;

	[Token(Token = "0x4000ABD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string index;

	[Token(Token = "0x4000ABE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string displayName;

	[Token(Token = "0x4000ABF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string translationKey;

	[Token(Token = "0x4000AC0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public string defaultVariant;

	[Token(Token = "0x4000AC1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GloveVariantData[] variants;

	[Token(Token = "0x60008D5")]
	[Address(RVA = "0xBDE0FC", Offset = "0xBDE0FC", VA = "0xBDE0FC")]
	public GloveVariantData GetVariant(string index)
	{
		return null;
	}

	[Token(Token = "0x60008D6")]
	[Address(RVA = "0xBDE1DC", Offset = "0xBDE1DC", VA = "0xBDE1DC")]
	public int GetVariantIndex(string index)
	{
		return default(int);
	}

	[Token(Token = "0x60008D7")]
	[Address(RVA = "0xBDE2BC", Offset = "0xBDE2BC", VA = "0xBDE2BC")]
	public GloveData()
	{
	}
}
[Serializable]
[Token(Token = "0x20001D0")]
public class GloveVariantData
{
	[Token(Token = "0x4000AC4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string index;

	[Token(Token = "0x4000AC5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string displayName;

	[Token(Token = "0x4000AC6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string prefabName;

	[Token(Token = "0x4000AC7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string translationKey;

	[Token(Token = "0x4000AC8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int price;

	[Token(Token = "0x17000110")]
	public string leftPrefabLocation
	{
		[Token(Token = "0x60008DC")]
		[Address(RVA = "0xBDE30C", Offset = "0xBDE30C", VA = "0xBDE30C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000111")]
	public string rightPrefabLocation
	{
		[Token(Token = "0x60008DD")]
		[Address(RVA = "0xBDE378", Offset = "0xBDE378", VA = "0xBDE378")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60008DE")]
	[Address(RVA = "0xBDE3E4", Offset = "0xBDE3E4", VA = "0xBDE3E4")]
	public GloveVariantData()
	{
	}
}
[Token(Token = "0x20001D1")]
[CreateAssetMenu(fileName = "GloveDatabase", menuName = "Settings/GloveDatabase")]
public class GloveDatabase : ScriptableObject
{
	[Token(Token = "0x4000AC9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static GloveDatabase _instance;

	[Token(Token = "0x4000ACA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	public GloveData[] data;

	[Token(Token = "0x4000ACB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Dictionary<string, GloveData> dataMap;

	[Token(Token = "0x4000ACC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string defaultGloveIndex;

	[Token(Token = "0x17000112")]
	public static GloveDatabase instance
	{
		[Token(Token = "0x60008DF")]
		[Address(RVA = "0xBD88B4", Offset = "0xBD88B4", VA = "0xBD88B4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000113")]
	public int Count
	{
		[Token(Token = "0x60008E2")]
		[Address(RVA = "0xBD9F10", Offset = "0xBD9F10", VA = "0xBD9F10")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x60008E0")]
	[Address(RVA = "0xBDE3EC", Offset = "0xBDE3EC", VA = "0xBDE3EC")]
	private void Init()
	{
	}

	[Token(Token = "0x60008E1")]
	[Address(RVA = "0xBDE4D0", Offset = "0xBDE4D0", VA = "0xBDE4D0")]
	public GloveData GetWeaponData(string index)
	{
		return null;
	}

	[Token(Token = "0x60008E3")]
	[Address(RVA = "0xBD9F2C", Offset = "0xBD9F2C", VA = "0xBD9F2C")]
	public GloveData GetData(int index)
	{
		return null;
	}

	[Token(Token = "0x60008E4")]
	[Address(RVA = "0xBD8998", Offset = "0xBD8998", VA = "0xBD8998")]
	public GloveData GetData(string index)
	{
		return null;
	}

	[Token(Token = "0x60008E5")]
	[Address(RVA = "0xBDE528", Offset = "0xBDE528", VA = "0xBDE528")]
	public int GetGloveIndex(string index)
	{
		return default(int);
	}

	[Token(Token = "0x60008E6")]
	[Address(RVA = "0xBDE608", Offset = "0xBDE608", VA = "0xBDE608")]
	[ContextMenu("Clear Database")]
	public void ClearDatabase()
	{
	}

	[Token(Token = "0x60008E7")]
	[Address(RVA = "0xBDE658", Offset = "0xBDE658", VA = "0xBDE658")]
	public GloveDatabase()
	{
	}
}
[Token(Token = "0x20001D3")]
public class Gun : MonoBehaviour
{
	[Token(Token = "0x20001D4")]
	[CompilerGenerated]
	private sealed class <ReloadRoutine>d__93 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000B13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000B14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000B15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Gun <>4__this;

		[Token(Token = "0x17000114")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600090A")]
			[Address(RVA = "0xBE2614", Offset = "0xBE2614", VA = "0xBE2614", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000115")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600090C")]
			[Address(RVA = "0xBE265C", Offset = "0xBE265C", VA = "0xBE265C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000907")]
		[Address(RVA = "0xBE216C", Offset = "0xBE216C", VA = "0xBE216C")]
		[DebuggerHidden]
		public <ReloadRoutine>d__93(int <>1__state)
		{
		}

		[Token(Token = "0x6000908")]
		[Address(RVA = "0xBE22CC", Offset = "0xBE22CC", VA = "0xBE22CC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000909")]
		[Address(RVA = "0xBE22D0", Offset = "0xBE22D0", VA = "0xBE22D0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600090B")]
		[Address(RVA = "0xBE261C", Offset = "0xBE261C", VA = "0xBE261C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001D5")]
	[CompilerGenerated]
	private sealed class <HitRagdollAtTime>d__95 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000B16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000B17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000B18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Gun <>4__this;

		[Token(Token = "0x17000116")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000910")]
			[Address(RVA = "0xBE2760", Offset = "0xBE2760", VA = "0xBE2760", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000117")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000912")]
			[Address(RVA = "0xBE27A8", Offset = "0xBE27A8", VA = "0xBE27A8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600090D")]
		[Address(RVA = "0xBE21FC", Offset = "0xBE21FC", VA = "0xBE21FC")]
		[DebuggerHidden]
		public <HitRagdollAtTime>d__95(int <>1__state)
		{
		}

		[Token(Token = "0x600090E")]
		[Address(RVA = "0xBE2664", Offset = "0xBE2664", VA = "0xBE2664", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600090F")]
		[Address(RVA = "0xBE2668", Offset = "0xBE2668", VA = "0xBE2668", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000911")]
		[Address(RVA = "0xBE2768", Offset = "0xBE2768", VA = "0xBE2768", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000ACE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Action OnFire;

	[Token(Token = "0x4000ACF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Action<bool> OnReload;

	[Token(Token = "0x4000AD0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Action OnLeftEmpty;

	[Token(Token = "0x4000AD1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static Action OnRightEmpty;

	[Token(Token = "0x4000AD2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static Action OnLeftReloaded;

	[Token(Token = "0x4000AD3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static Action OnRightReloaded;

	[Token(Token = "0x4000AD4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform holsterAnchor;

	[Token(Token = "0x4000AD5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform weaponHandAnchor;

	[Token(Token = "0x4000AD6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject weaponObject;

	[Token(Token = "0x4000AD7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Rigidbody parentBody;

	[Token(Token = "0x4000AD8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float maxHeadImpactMagnitude;

	[Token(Token = "0x4000AD9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float recoilForce;

	[Token(Token = "0x4000ADA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float handGrabDistance;

	[Token(Token = "0x4000ADB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float pointedDownDOT;

	[Token(Token = "0x4000ADC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Transform casingEmitPoint;

	[Token(Token = "0x4000ADD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Spunge.LaserPointer laser;

	[Token(Token = "0x4000ADE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public int projectilePoolSize;

	[Token(Token = "0x4000ADF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public int ammoLeft;

	[Token(Token = "0x4000AE0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public GameObject projectilePrefab;

	[Token(Token = "0x4000AE1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public GameObject[] projectilePool;

	[Token(Token = "0x4000AE2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Projectile[] projectiles;

	[Token(Token = "0x4000AE3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public ParticleSystem[] fireFX;

	[Token(Token = "0x4000AE4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public GunData gunData;

	[Token(Token = "0x4000AE5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private int poolIndex;

	[Token(Token = "0x4000AE6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private float nextShotTime;

	[Token(Token = "0x4000AE7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Animator gunAnimator;

	[Token(Token = "0x4000AE8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public Transform xForm;

	[Token(Token = "0x4000AE9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public bool loaded;

	[Token(Token = "0x4000AEA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB1")]
	public bool reloading;

	[Token(Token = "0x4000AEB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	public float currentReloadTime;

	[Token(Token = "0x4000AEC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private GameObject projectilePoolRoot;

	[Token(Token = "0x4000AED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private int currentIndex;

	[Token(Token = "0x4000AEE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	private int gunFireHash;

	[Token(Token = "0x4000AEF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public int gunFireEmptyHash;

	[Token(Token = "0x4000AF0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	public int gunReloadHash;

	[Token(Token = "0x4000AF1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public bool weaponEquipped;

	[Token(Token = "0x4000AF2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD1")]
	public bool heldInLeftHand;

	[Token(Token = "0x4000AF3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD2")]
	public bool heldInRightHand;

	[Token(Token = "0x4000AF4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD3")]
	public bool pointedDown;

	[Token(Token = "0x4000AF5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public AmmoCounter ammoCounter;

	[Token(Token = "0x4000AF6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public int maxAudioSources;

	[Token(Token = "0x4000AF7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private AudioSource[] audioSources;

	[Token(Token = "0x4000AF8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private int sourceIndex;

	[Token(Token = "0x4000AF9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private Transform[] audioSourceXForms;

	[Token(Token = "0x4000AFA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public HandController handController;

	[Token(Token = "0x4000AFB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public Transform handControllerXForm;

	[Token(Token = "0x4000AFC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public Transform recoilXForm;

	[Token(Token = "0x4000AFD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private Transform meshRoot;

	[Token(Token = "0x4000AFE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private Vector3 V3_DOWN;

	[Token(Token = "0x4000AFF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
	private float reloadClipAudioDuration;

	[NonSerialized]
	[Token(Token = "0x4000B00")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	public GameObject hand;

	[Token(Token = "0x4000B01")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private bool casingFlippedForLeft;

	[Token(Token = "0x4000B02")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private Transform muzzleFlashXForm;

	[Token(Token = "0x4000B03")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private Vector3 casingOffset;

	[Token(Token = "0x4000B04")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
	private float casingZAngle;

	[Token(Token = "0x4000B05")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	public GunInfo info;

	[Token(Token = "0x4000B06")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	public Rigidbody target;

	[Token(Token = "0x4000B07")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	private float contactDistance;

	[Token(Token = "0x4000B08")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
	private Vector3 contactPoint;

	[Token(Token = "0x4000B09")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	private float lastShotTime;

	[Token(Token = "0x4000B0A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
	public bool autoMode;

	[Token(Token = "0x4000B0B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x17D")]
	public bool burstMode;

	[Token(Token = "0x4000B0C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x17E")]
	public bool bursting;

	[Token(Token = "0x4000B0D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	public int burstCount;

	[Token(Token = "0x4000B0E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
	private int currentBurstCount;

	[Token(Token = "0x4000B0F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	private WaitForSecondsRealtime wfsr;

	[Token(Token = "0x4000B10")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	private bool triggerDown;

	[Token(Token = "0x4000B11")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
	private Vector3 muzzleFlashEulers;

	[Token(Token = "0x4000B12")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	private bool emmitingSmoke;

	[Token(Token = "0x60008EA")]
	[Address(RVA = "0xBDE684", Offset = "0xBDE684", VA = "0xBDE684")]
	private void CreatAudioSources()
	{
	}

	[Token(Token = "0x60008EB")]
	[Address(RVA = "0xBDE974", Offset = "0xBDE974", VA = "0xBDE974")]
	private void PlaySound()
	{
	}

	[Token(Token = "0x60008EC")]
	[Address(RVA = "0xBDEA94", Offset = "0xBDEA94", VA = "0xBDEA94")]
	private void Awake()
	{
	}

	[Token(Token = "0x60008ED")]
	[Address(RVA = "0xBDEF30", Offset = "0xBDEF30", VA = "0xBDEF30")]
	private void Start()
	{
	}

	[Token(Token = "0x60008EE")]
	[Address(RVA = "0xBDEFA8", Offset = "0xBDEFA8", VA = "0xBDEFA8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60008EF")]
	[Address(RVA = "0xBDF4A4", Offset = "0xBDF4A4", VA = "0xBDF4A4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60008F0")]
	[Address(RVA = "0xBDF9A0", Offset = "0xBDF9A0", VA = "0xBDF9A0")]
	private void ResetState()
	{
	}

	[Token(Token = "0x60008F1")]
	[Address(RVA = "0xBDFAF0", Offset = "0xBDFAF0", VA = "0xBDFAF0")]
	private void EjectMag()
	{
	}

	[Token(Token = "0x60008F2")]
	[Address(RVA = "0xBDFBD4", Offset = "0xBDFBD4", VA = "0xBDFBD4")]
	public void EquipGun()
	{
	}

	[Token(Token = "0x60008F3")]
	[Address(RVA = "0xBDFD08", Offset = "0xBDFD08", VA = "0xBDFD08")]
	public void HolsterGun(InteractableSlot targetSlot)
	{
	}

	[Token(Token = "0x60008F4")]
	[Address(RVA = "0xBDFE50", Offset = "0xBDFE50", VA = "0xBDFE50")]
	public void SetGun(Interactable _gun, bool refreshAmmo = true, bool handSwapped = false)
	{
	}

	[Token(Token = "0x60008F5")]
	[Address(RVA = "0xBDEC34", Offset = "0xBDEC34", VA = "0xBDEC34")]
	private void CreateProjectilePool()
	{
	}

	[Token(Token = "0x60008F6")]
	[Address(RVA = "0xBE03F0", Offset = "0xBE03F0", VA = "0xBE03F0")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60008F7")]
	[Address(RVA = "0xBE1298", Offset = "0xBE1298", VA = "0xBE1298")]
	public void MagInserted()
	{
	}

	[Token(Token = "0x60008F8")]
	[Address(RVA = "0xBE1464", Offset = "0xBE1464", VA = "0xBE1464")]
	public void CloseSlide()
	{
	}

	[Token(Token = "0x60008F9")]
	[Address(RVA = "0xBE1200", Offset = "0xBE1200", VA = "0xBE1200")]
	private void CheckReload()
	{
	}

	[Token(Token = "0x60008FA")]
	[Address(RVA = "0xBE14D4", Offset = "0xBE14D4", VA = "0xBE14D4")]
	private void TriggerDown()
	{
	}

	[Token(Token = "0x60008FB")]
	[Address(RVA = "0xBE1680", Offset = "0xBE1680", VA = "0xBE1680")]
	private void TriggerUp()
	{
	}

	[Token(Token = "0x60008FC")]
	[Address(RVA = "0xBE1720", Offset = "0xBE1720", VA = "0xBE1720")]
	private void PlayBHapticsFX()
	{
	}

	[Token(Token = "0x60008FD")]
	[Address(RVA = "0xBE0688", Offset = "0xBE0688", VA = "0xBE0688")]
	private void EmitRound()
	{
	}

	[Token(Token = "0x60008FE")]
	[Address(RVA = "0xBE1F04", Offset = "0xBE1F04", VA = "0xBE1F04")]
	private void Recoil()
	{
	}

	[Token(Token = "0x60008FF")]
	[Address(RVA = "0xBE2084", Offset = "0xBE2084", VA = "0xBE2084")]
	public float GetReloadDuration()
	{
		return default(float);
	}

	[Token(Token = "0x6000900")]
	[Address(RVA = "0xBDFA1C", Offset = "0xBDFA1C", VA = "0xBDFA1C")]
	public void AutoReload(bool immediate = false)
	{
	}

	[Token(Token = "0x6000901")]
	[Address(RVA = "0xBE210C", Offset = "0xBE210C", VA = "0xBE210C")]
	public void ResetAnimatorIdle()
	{
	}

	[Token(Token = "0x6000902")]
	[Address(RVA = "0xBE20A4", Offset = "0xBE20A4", VA = "0xBE20A4")]
	[IteratorStateMachine(typeof(<ReloadRoutine>d__93))]
	public IEnumerator ReloadRoutine()
	{
		return null;
	}

	[Token(Token = "0x6000903")]
	[Address(RVA = "0xBE1378", Offset = "0xBE1378", VA = "0xBE1378")]
	private void ReloadEvents(bool zeroDuration)
	{
	}

	[Token(Token = "0x6000904")]
	[Address(RVA = "0xBE2194", Offset = "0xBE2194", VA = "0xBE2194")]
	[IteratorStateMachine(typeof(<HitRagdollAtTime>d__95))]
	private IEnumerator HitRagdollAtTime(Vector3 velocity)
	{
		return null;
	}

	[Token(Token = "0x6000905")]
	[Address(RVA = "0xBE17E4", Offset = "0xBE17E4", VA = "0xBE17E4")]
	public void HitRagdoll(Vector3 velocity, Ragdoll doll, Vector3 point, Rigidbody rBody, [Optional] Projectile projectile)
	{
	}

	[Token(Token = "0x6000906")]
	[Address(RVA = "0xBE2224", Offset = "0xBE2224", VA = "0xBE2224")]
	public Gun()
	{
	}
}
[Token(Token = "0x20001D6")]
public class AnimationClipOverrides : List<KeyValuePair<AnimationClip, AnimationClip>>
{
	[Token(Token = "0x17000118")]
	public AnimationClip this[string name]
	{
		[Token(Token = "0x6000914")]
		[Address(RVA = "0xBE382C", Offset = "0xBE382C", VA = "0xBE382C")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000915")]
		[Address(RVA = "0xBE391C", Offset = "0xBE391C", VA = "0xBE391C")]
		set
		{
		}
	}

	[Token(Token = "0x6000913")]
	[Address(RVA = "0xBE37B0", Offset = "0xBE37B0", VA = "0xBE37B0")]
	public AnimationClipOverrides(int capacity)
	{
	}
}
[Token(Token = "0x20001D9")]
public enum GunType
{
	[Token(Token = "0x4000B1C")]
	Falcon,
	[Token(Token = "0x4000B1D")]
	Piranha,
	[Token(Token = "0x4000B1E")]
	Rhino,
	[Token(Token = "0x4000B1F")]
	Mongoose,
	[Token(Token = "0x4000B20")]
	Stallion,
	[Token(Token = "0x4000B21")]
	Phoenix
}
[Token(Token = "0x20001DA")]
[CreateAssetMenu(fileName = "GunData", menuName = "Settings/GunData")]
public class GunData : ScriptableObject
{
	[Token(Token = "0x4000B22")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 rotationOffset;

	[Token(Token = "0x4000B23")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string leaderboardAPIName;

	[Token(Token = "0x4000B24")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GunType gunType;

	[Token(Token = "0x4000B25")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Pose cupPose;

	[Token(Token = "0x4000B26")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Pose slidePoseTop;

	[Token(Token = "0x4000B27")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Pose slidePoseRear;

	[Token(Token = "0x4000B28")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public HapticEffectType hapticsType;

	[Token(Token = "0x4000B29")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public ArmsHapticClip bh_armLeftClip;

	[Token(Token = "0x4000B2A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public ArmsHapticClip bh_armRigtClip;

	[Token(Token = "0x4000B2B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public VestHapticClip bh_vestLeftClip;

	[Token(Token = "0x4000B2C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public VestHapticClip bh_vestRightClip;

	[Token(Token = "0x4000B2D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public AudioClip gunShotSound;

	[Token(Token = "0x4000B2E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public float minPitch;

	[Token(Token = "0x4000B2F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public float maxPitch;

	[Token(Token = "0x4000B30")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public float gunShotMaxVolume;

	[Token(Token = "0x4000B31")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public AudioClip reloadSound;

	[Token(Token = "0x4000B32")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public float pointDamage;

	[Token(Token = "0x4000B33")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	public float roundsPerSecond;

	[Token(Token = "0x4000B34")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public bool burstMode;

	[Token(Token = "0x4000B35")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA1")]
	public bool autoMode;

	[Token(Token = "0x4000B36")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	public int burstCount;

	[Token(Token = "0x4000B37")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public float velocityMagnitude;

	[Token(Token = "0x4000B38")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	public float impactVelocity;

	[Token(Token = "0x4000B39")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public bool ejectCasings;

	[Token(Token = "0x4000B3A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	public float emitForce;

	[Token(Token = "0x4000B3B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public float casingEjectDelay;

	[Token(Token = "0x4000B3C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	public int clipSize;

	[Token(Token = "0x4000B3D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public float reloadTime;

	[Token(Token = "0x4000B3E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	public float slideReturnTime;

	[Token(Token = "0x4000B3F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public float recoilForce;

	[Token(Token = "0x4000B40")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	public float recoilForceCupped;

	[Token(Token = "0x4000B41")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public bool slideOpenOnEmpty;

	[Token(Token = "0x4000B42")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD1")]
	public bool flipCasingEmit;

	[Token(Token = "0x4000B43")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD2")]
	public byte forceTubePower;

	[Token(Token = "0x4000B44")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	public ForceTubeVRChannel forceTubeVRChannel;

	[Token(Token = "0x600091A")]
	[Address(RVA = "0xBE3B50", Offset = "0xBE3B50", VA = "0xBE3B50")]
	public GunData()
	{
	}
}
[Token(Token = "0x20001DB")]
public class GunInfo : MonoBehaviour
{
	[Token(Token = "0x20001DC")]
	[CompilerGenerated]
	private sealed class <EjectMagRoutine>d__84 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000B8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000B8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000B8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GunInfo <>4__this;

		[Token(Token = "0x4000B8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 <exitPos>5__2;

		[Token(Token = "0x4000B90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <time>5__3;

		[Token(Token = "0x4000B91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float <lerp>5__4;

		[Token(Token = "0x4000B92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float <velocity>5__5;

		[Token(Token = "0x17000119")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600093A")]
			[Address(RVA = "0xBE5638", Offset = "0xBE5638", VA = "0xBE5638", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700011A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600093C")]
			[Address(RVA = "0xBE5680", Offset = "0xBE5680", VA = "0xBE5680", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000937")]
		[Address(RVA = "0xBE4E34", Offset = "0xBE4E34", VA = "0xBE4E34")]
		[DebuggerHidden]
		public <EjectMagRoutine>d__84(int <>1__state)
		{
		}

		[Token(Token = "0x6000938")]
		[Address(RVA = "0xBE52DC", Offset = "0xBE52DC", VA = "0xBE52DC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000939")]
		[Address(RVA = "0xBE52E0", Offset = "0xBE52E0", VA = "0xBE52E0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600093B")]
		[Address(RVA = "0xBE5640", Offset = "0xBE5640", VA = "0xBE5640", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001DD")]
	[CompilerGenerated]
	private sealed class <InsertMagRoutine>d__85 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000B93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000B94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000B95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GunInfo <>4__this;

		[Token(Token = "0x4000B96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 <entryPos>5__2;

		[Token(Token = "0x4000B97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <time>5__3;

		[Token(Token = "0x4000B98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float <lerp>5__4;

		[Token(Token = "0x1700011B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000940")]
			[Address(RVA = "0xBE5A34", Offset = "0xBE5A34", VA = "0xBE5A34", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700011C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000942")]
			[Address(RVA = "0xBE5A7C", Offset = "0xBE5A7C", VA = "0xBE5A7C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600093D")]
		[Address(RVA = "0xBE4E5C", Offset = "0xBE4E5C", VA = "0xBE4E5C")]
		[DebuggerHidden]
		public <InsertMagRoutine>d__85(int <>1__state)
		{
		}

		[Token(Token = "0x600093E")]
		[Address(RVA = "0xBE5688", Offset = "0xBE5688", VA = "0xBE5688", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600093F")]
		[Address(RVA = "0xBE568C", Offset = "0xBE568C", VA = "0xBE568C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000941")]
		[Address(RVA = "0xBE5A3C", Offset = "0xBE5A3C", VA = "0xBE5A3C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001DE")]
	[CompilerGenerated]
	private sealed class <ReturnSlideRoutine>d__87 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000B99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000B9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000B9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GunInfo <>4__this;

		[Token(Token = "0x1700011D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000946")]
			[Address(RVA = "0xBE5CAC", Offset = "0xBE5CAC", VA = "0xBE5CAC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700011E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000948")]
			[Address(RVA = "0xBE5CF4", Offset = "0xBE5CF4", VA = "0xBE5CF4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000943")]
		[Address(RVA = "0xBE4F0C", Offset = "0xBE4F0C", VA = "0xBE4F0C")]
		[DebuggerHidden]
		public <ReturnSlideRoutine>d__87(int <>1__state)
		{
		}

		[Token(Token = "0x6000944")]
		[Address(RVA = "0xBE5A84", Offset = "0xBE5A84", VA = "0xBE5A84", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000945")]
		[Address(RVA = "0xBE5A88", Offset = "0xBE5A88", VA = "0xBE5A88", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000947")]
		[Address(RVA = "0xBE5CB4", Offset = "0xBE5CB4", VA = "0xBE5CB4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001DF")]
	[CompilerGenerated]
	private sealed class <UpdateRevolverCasings>d__93 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000B9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000B9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000B9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GunInfo <>4__this;

		[Token(Token = "0x1700011F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600094C")]
			[Address(RVA = "0xBE5DB8", Offset = "0xBE5DB8", VA = "0xBE5DB8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000120")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600094E")]
			[Address(RVA = "0xBE5E00", Offset = "0xBE5E00", VA = "0xBE5E00", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000949")]
		[Address(RVA = "0xBE5144", Offset = "0xBE5144", VA = "0xBE5144")]
		[DebuggerHidden]
		public <UpdateRevolverCasings>d__93(int <>1__state)
		{
		}

		[Token(Token = "0x600094A")]
		[Address(RVA = "0xBE5CFC", Offset = "0xBE5CFC", VA = "0xBE5CFC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600094B")]
		[Address(RVA = "0xBE5D00", Offset = "0xBE5D00", VA = "0xBE5D00", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600094D")]
		[Address(RVA = "0xBE5DC0", Offset = "0xBE5DC0", VA = "0xBE5DC0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001E0")]
	[CompilerGenerated]
	private sealed class <RevolverBarrelOpen>d__94 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000B9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000BA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000BA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GunInfo <>4__this;

		[Token(Token = "0x4000BA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 <hingeAngle>5__2;

		[Token(Token = "0x4000BA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <time>5__3;

		[Token(Token = "0x4000BA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float <lerp>5__4;

		[Token(Token = "0x17000121")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000952")]
			[Address(RVA = "0xBE5FE4", Offset = "0xBE5FE4", VA = "0xBE5FE4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000122")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000954")]
			[Address(RVA = "0xBE602C", Offset = "0xBE602C", VA = "0xBE602C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600094F")]
		[Address(RVA = "0xBE516C", Offset = "0xBE516C", VA = "0xBE516C")]
		[DebuggerHidden]
		public <RevolverBarrelOpen>d__94(int <>1__state)
		{
		}

		[Token(Token = "0x6000950")]
		[Address(RVA = "0xBE5E08", Offset = "0xBE5E08", VA = "0xBE5E08", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000951")]
		[Address(RVA = "0xBE5E0C", Offset = "0xBE5E0C", VA = "0xBE5E0C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000953")]
		[Address(RVA = "0xBE5FEC", Offset = "0xBE5FEC", VA = "0xBE5FEC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001E1")]
	[CompilerGenerated]
	private sealed class <RevolverBarrelClose>d__95 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000BA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000BA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000BA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GunInfo <>4__this;

		[Token(Token = "0x4000BA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 <hingeAngle>5__2;

		[Token(Token = "0x4000BA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <time>5__3;

		[Token(Token = "0x4000BAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float <lerp>5__4;

		[Token(Token = "0x17000123")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000958")]
			[Address(RVA = "0xBE61FC", Offset = "0xBE61FC", VA = "0xBE61FC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000124")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600095A")]
			[Address(RVA = "0xBE6244", Offset = "0xBE6244", VA = "0xBE6244", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000955")]
		[Address(RVA = "0xBE51FC", Offset = "0xBE51FC", VA = "0xBE51FC")]
		[DebuggerHidden]
		public <RevolverBarrelClose>d__95(int <>1__state)
		{
		}

		[Token(Token = "0x6000956")]
		[Address(RVA = "0xBE6034", Offset = "0xBE6034", VA = "0xBE6034", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000957")]
		[Address(RVA = "0xBE6038", Offset = "0xBE6038", VA = "0xBE6038", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000959")]
		[Address(RVA = "0xBE6204", Offset = "0xBE6204", VA = "0xBE6204", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000B45")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Action onEmpty;

	[Token(Token = "0x4000B46")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Action onEject;

	[Token(Token = "0x4000B47")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Action onInsert;

	[Token(Token = "0x4000B48")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Action onReloaded;

	[Token(Token = "0x4000B49")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Action onSlideClosed;

	[Token(Token = "0x4000B4A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GunData gunData;

	[Token(Token = "0x4000B4B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public MeshRenderer bodyMesh;

	[Token(Token = "0x4000B4C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Space]
	[Header("---- VARIANT DETAILS")]
	public string variantName;

	[Token(Token = "0x4000B4D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public MeshRenderer[] variantMaterials;

	[Token(Token = "0x4000B4E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Header("---- REVOLVER SPECIFIC")]
	[Space]
	public bool isRolver;

	[Token(Token = "0x4000B4F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Transform barrelXForm;

	[Token(Token = "0x4000B50")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Transform barrelHingeXForm;

	[Token(Token = "0x4000B51")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Transform[] barrelRounds;

	[Token(Token = "0x4000B52")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public float casingEjectForce;

	[Token(Token = "0x4000B53")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public GameObject casingPrefab;

	[Token(Token = "0x4000B54")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public int casingPoolSize;

	[Token(Token = "0x4000B55")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Casing[] casingPool;

	[Token(Token = "0x4000B56")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private int casingIndex;

	[Token(Token = "0x4000B57")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[Header("-----------------------")]
	public Transform muzzleFlash;

	[Token(Token = "0x4000B58")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public MuzzleFlashController flashController;

	[Token(Token = "0x4000B59")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public ParticleSystem smoke;

	[Token(Token = "0x4000B5A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public ParticleSystem blast;

	[Token(Token = "0x4000B5B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public AudioSource handlingSounds;

	[Token(Token = "0x4000B5C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public AudioClip insertMag;

	[Token(Token = "0x4000B5D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public AudioClip ejectMag;

	[Token(Token = "0x4000B5E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public AudioClip returnSlide;

	[Token(Token = "0x4000B5F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public Transform casingEmitPoint;

	[Token(Token = "0x4000B60")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public Transform recoilXForm;

	[Token(Token = "0x4000B61")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public Transform meshRoot;

	[Token(Token = "0x4000B62")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public float slideHoldDetectionDistance;

	[Token(Token = "0x4000B63")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	public float slidePullDistance;

	[Token(Token = "0x4000B64")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public Transform slideXForm;

	[Token(Token = "0x4000B65")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public Transform leftTopSlideXForm;

	[Token(Token = "0x4000B66")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public Transform rightTopSlideXForm;

	[Token(Token = "0x4000B67")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public Transform leftRearSlideXForm;

	[Token(Token = "0x4000B68")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	public Transform rightRearSlideXForm;

	[Token(Token = "0x4000B69")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	public Spunge.LaserPointer laserPointer;

	[Token(Token = "0x4000B6A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public Animator gunAnimator;

	[Token(Token = "0x4000B6B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public AmmoCounter ammoCounter;

	[Token(Token = "0x4000B6C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public Transform magXForm;

	[Token(Token = "0x4000B6D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public GameObject magPrefab;

	[Token(Token = "0x4000B6E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	public float magEntryExitOffset;

	[Token(Token = "0x4000B6F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
	public float ejectDuration;

	[Token(Token = "0x4000B70")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	public float insertDuration;

	[Token(Token = "0x4000B71")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	public AnimationCurve insertCurve;

	[Token(Token = "0x4000B72")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	public AnimationCurve exitCurve;

	[Token(Token = "0x4000B73")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	public int magPoolSize;

	[NonSerialized]
	[Token(Token = "0x4000B74")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	public AmmoMagazine activeMag;

	[Token(Token = "0x4000B75")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	private AmmoMagazine oldMag;

	[Token(Token = "0x4000B76")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	private AmmoMagazine nextMag;

	[Token(Token = "0x4000B77")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	private AmmoMagazine[] magPool;

	[Token(Token = "0x4000B78")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	private int magIndex;

	[Token(Token = "0x4000B79")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
	private bool clear;

	[Token(Token = "0x4000B7A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	private Transform poolParent;

	[Token(Token = "0x4000B7B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	private Transform casingPoolParent;

	[Token(Token = "0x4000B7C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	public Gun gun;

	[Token(Token = "0x4000B7D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	public bool hasMags;

	[Token(Token = "0x4000B7E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C1")]
	public bool magInserted;

	[Token(Token = "0x4000B7F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C2")]
	public bool roundChambered;

	[Token(Token = "0x4000B80")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C3")]
	public bool slideOpen;

	[Token(Token = "0x4000B81")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C4")]
	public bool chambersRound;

	[Token(Token = "0x4000B82")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C5")]
	public bool hasSlide;

	[Token(Token = "0x4000B83")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C6")]
	public bool openSlideOnEject;

	[Token(Token = "0x4000B84")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C7")]
	public bool loaded;

	[Token(Token = "0x4000B85")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
	public bool mirrorLeftHand;

	[Token(Token = "0x4000B86")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
	public BoxCollider magCollider;

	[Token(Token = "0x4000B87")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
	private Transform xForm;

	[Token(Token = "0x4000B88")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
	public bool poolCreated;

	[Token(Token = "0x4000B89")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E4")]
	private int firingIndex;

	[Token(Token = "0x4000B8A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
	private Casing[] loadedRevolverRounds;

	[Token(Token = "0x4000B8B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
	private bool updateRunning;

	[Token(Token = "0x600091B")]
	[Address(RVA = "0xBE3BB0", Offset = "0xBE3BB0", VA = "0xBE3BB0")]
	private void Awake()
	{
	}

	[Token(Token = "0x600091C")]
	[Address(RVA = "0xBE3D94", Offset = "0xBE3D94", VA = "0xBE3D94")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600091D")]
	[Address(RVA = "0xBE3FB0", Offset = "0xBE3FB0", VA = "0xBE3FB0")]
	public void CleanupPools()
	{
	}

	[Token(Token = "0x600091E")]
	[Address(RVA = "0xBE4134", Offset = "0xBE4134", VA = "0xBE4134")]
	public void CreateRevolverCasingPool()
	{
	}

	[Token(Token = "0x600091F")]
	[Address(RVA = "0xBE45D4", Offset = "0xBE45D4", VA = "0xBE45D4")]
	public void CreateMagPool(bool updateMats = true)
	{
	}

	[Token(Token = "0x6000920")]
	[Address(RVA = "0xBE4820", Offset = "0xBE4820", VA = "0xBE4820")]
	public void UpdateMaterials()
	{
	}

	[Token(Token = "0x6000921")]
	[Address(RVA = "0xBE3DD4", Offset = "0xBE3DD4", VA = "0xBE3DD4")]
	public void ResetMags()
	{
	}

	[Token(Token = "0x6000922")]
	[Address(RVA = "0xBE498C", Offset = "0xBE498C", VA = "0xBE498C")]
	public void MirrorLeft(bool negative)
	{
	}

	[Token(Token = "0x6000923")]
	[Address(RVA = "0xBE4B14", Offset = "0xBE4B14", VA = "0xBE4B14")]
	public Vector3 GetInsertionPoint()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000924")]
	[Address(RVA = "0xBE4BA0", Offset = "0xBE4BA0", VA = "0xBE4BA0")]
	public AmmoMagazine GetMag()
	{
		return null;
	}

	[Token(Token = "0x6000925")]
	[Address(RVA = "0xBE4C30", Offset = "0xBE4C30", VA = "0xBE4C30")]
	public void ReturnMag(AmmoMagazine _mag)
	{
	}

	[Token(Token = "0x6000926")]
	[Address(RVA = "0xBE4C68", Offset = "0xBE4C68", VA = "0xBE4C68")]
	public void EjectMag()
	{
	}

	[Token(Token = "0x6000927")]
	[Address(RVA = "0xBE4D90", Offset = "0xBE4D90", VA = "0xBE4D90")]
	public bool InsertMag(AmmoMagazine newMag)
	{
		return default(bool);
	}

	[Token(Token = "0x6000928")]
	[Address(RVA = "0xBE40B0", Offset = "0xBE40B0", VA = "0xBE40B0")]
	public void ReclaimAllMags()
	{
	}

	[Token(Token = "0x6000929")]
	[Address(RVA = "0xBE4D28", Offset = "0xBE4D28", VA = "0xBE4D28")]
	[IteratorStateMachine(typeof(<EjectMagRoutine>d__84))]
	private IEnumerator EjectMagRoutine()
	{
		return null;
	}

	[Token(Token = "0x600092A")]
	[Address(RVA = "0xBE4DCC", Offset = "0xBE4DCC", VA = "0xBE4DCC")]
	[IteratorStateMachine(typeof(<InsertMagRoutine>d__85))]
	private IEnumerator InsertMagRoutine()
	{
		return null;
	}

	[Token(Token = "0x600092B")]
	[Address(RVA = "0xBE4E84", Offset = "0xBE4E84", VA = "0xBE4E84")]
	public void ReturnSlide()
	{
	}

	[Token(Token = "0x600092C")]
	[Address(RVA = "0xBE4EA4", Offset = "0xBE4EA4", VA = "0xBE4EA4")]
	[IteratorStateMachine(typeof(<ReturnSlideRoutine>d__87))]
	private IEnumerator ReturnSlideRoutine()
	{
		return null;
	}

	[Token(Token = "0x600092D")]
	[Address(RVA = "0xBE4F34", Offset = "0xBE4F34", VA = "0xBE4F34")]
	public void RevolverFired()
	{
	}

	[Token(Token = "0x600092E")]
	[Address(RVA = "0xBE4FA0", Offset = "0xBE4FA0", VA = "0xBE4FA0")]
	public void EjectRevolverCasings()
	{
	}

	[Token(Token = "0x600092F")]
	[Address(RVA = "0xBE50D4", Offset = "0xBE50D4", VA = "0xBE50D4")]
	public void ResetLoadedRounds()
	{
	}

	[Token(Token = "0x6000930")]
	[Address(RVA = "0xBE4338", Offset = "0xBE4338", VA = "0xBE4338")]
	public void ReloadRevolver()
	{
	}

	[Token(Token = "0x6000931")]
	[Address(RVA = "0xBE3F48", Offset = "0xBE3F48", VA = "0xBE3F48")]
	[IteratorStateMachine(typeof(<UpdateRevolverCasings>d__93))]
	private IEnumerator UpdateRevolverCasings()
	{
		return null;
	}

	[Token(Token = "0x6000932")]
	[Address(RVA = "0xBE4CC0", Offset = "0xBE4CC0", VA = "0xBE4CC0")]
	[IteratorStateMachine(typeof(<RevolverBarrelOpen>d__94))]
	private IEnumerator RevolverBarrelOpen()
	{
		return null;
	}

	[Token(Token = "0x6000933")]
	[Address(RVA = "0xBE5194", Offset = "0xBE5194", VA = "0xBE5194")]
	[IteratorStateMachine(typeof(<RevolverBarrelClose>d__95))]
	private IEnumerator RevolverBarrelClose()
	{
		return null;
	}

	[Token(Token = "0x6000934")]
	[Address(RVA = "0xBE5224", Offset = "0xBE5224", VA = "0xBE5224")]
	public void CloseBarrel()
	{
	}

	[Token(Token = "0x6000935")]
	[Address(RVA = "0xBE5244", Offset = "0xBE5244", VA = "0xBE5244")]
	public void Fired()
	{
	}

	[Token(Token = "0x6000936")]
	[Address(RVA = "0xBE5280", Offset = "0xBE5280", VA = "0xBE5280")]
	public GunInfo()
	{
	}
}
[Token(Token = "0x20001E2")]
public class InputController : MonoBehaviour
{
	[Token(Token = "0x20001E3")]
	public enum HeadForwardMode
	{
		[Token(Token = "0x4000C00")]
		POINT,
		[Token(Token = "0x4000C01")]
		HEAD,
		[Token(Token = "0x4000C02")]
		OFF
	}

	[Token(Token = "0x20001E4")]
	public enum VRController
	{
		[Token(Token = "0x4000C04")]
		vive_controller,
		[Token(Token = "0x4000C05")]
		vive_cosmos_controller,
		[Token(Token = "0x4000C06")]
		oculus_touch,
		[Token(Token = "0x4000C07")]
		knuckles,
		[Token(Token = "0x4000C08")]
		holographic_controller,
		[Token(Token = "0x4000C09")]
		windows_mixed_reality,
		[Token(Token = "0x4000C0A")]
		none,
		[Token(Token = "0x4000C0B")]
		oculus_touch_native,
		[Token(Token = "0x4000C0C")]
		Pico3,
		[Token(Token = "0x4000C0D")]
		Pico4,
		[Token(Token = "0x4000C0E")]
		Qiyu_Dream
	}

	[Token(Token = "0x20001E5")]
	[CompilerGenerated]
	private sealed class <PollDevices>d__77 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000C0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000C10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000C11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InputController <>4__this;

		[Token(Token = "0x4000C12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool <devicesFound>5__2;

		[Token(Token = "0x4000C13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		private bool <leftHandFound>5__3;

		[Token(Token = "0x4000C14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		private bool <rightHandFound>5__4;

		[Token(Token = "0x17000125")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000973")]
			[Address(RVA = "0xBE8320", Offset = "0xBE8320", VA = "0xBE8320", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000126")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000975")]
			[Address(RVA = "0xBE8368", Offset = "0xBE8368", VA = "0xBE8368", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000970")]
		[Address(RVA = "0xBE6598", Offset = "0xBE6598", VA = "0xBE6598")]
		[DebuggerHidden]
		public <PollDevices>d__77(int <>1__state)
		{
		}

		[Token(Token = "0x6000971")]
		[Address(RVA = "0xBE81F0", Offset = "0xBE81F0", VA = "0xBE81F0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000972")]
		[Address(RVA = "0xBE81F4", Offset = "0xBE81F4", VA = "0xBE81F4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000974")]
		[Address(RVA = "0xBE8328", Offset = "0xBE8328", VA = "0xBE8328", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000BAB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static InputController instance;

	[Token(Token = "0x4000BAC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public HeadForwardMode headForwardMode;

	[Token(Token = "0x4000BAD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Gun leftGunController;

	[Token(Token = "0x4000BAE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Gun rightGunController;

	[Token(Token = "0x4000BAF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ReloadWaistTrigger reloadWaistTrigger;

	[Token(Token = "0x4000BB0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool debug;

	[Token(Token = "0x4000BB1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public TextMeshProUGUI debugText;

	[Token(Token = "0x4000BB2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static Action onMenuUp;

	[Token(Token = "0x4000BB3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static Action onMenuDown;

	[Token(Token = "0x4000BB4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static Action onRightSnapRotate;

	[Token(Token = "0x4000BB5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public static Action onRightEjectMag;

	[Token(Token = "0x4000BB6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public static Action onRightFireStart;

	[Token(Token = "0x4000BB7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public static Action onRightFireEnd;

	[Token(Token = "0x4000BB8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public static Action onRightAxis;

	[Token(Token = "0x4000BB9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public static Action onLeftSnapRotate;

	[Token(Token = "0x4000BBA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public static Action onLeftEjectMag;

	[Token(Token = "0x4000BBB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public static Action onLeftFireStart;

	[Token(Token = "0x4000BBC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public static Action onLeftFireEnd;

	[Token(Token = "0x4000BBD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public static Action onLeftAxis;

	[Token(Token = "0x4000BBE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public static Action onRightGrabStart;

	[Token(Token = "0x4000BBF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public static Action onRightGrabEnd;

	[Token(Token = "0x4000BC0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public static Action onLeftGrabStart;

	[Token(Token = "0x4000BC1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public static Action onLeftGrabEnd;

	[Token(Token = "0x4000BC2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public static Action onLeftPrimaryButtonUp;

	[Token(Token = "0x4000BC3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public static Action onRightPrimaryButtonUp;

	[Token(Token = "0x4000BC4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public static Action onLeftSecondaryButtonDown;

	[Token(Token = "0x4000BC5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public static Action onRightSecondaryButtonDown;

	[Token(Token = "0x4000BC6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public static Action onGripOffsetsChanged;

	[Token(Token = "0x4000BC7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Canvas canvas;

	[Token(Token = "0x4000BC8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool rightGunHeld;

	[Token(Token = "0x4000BC9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
	public bool leftGunHeld;

	[Token(Token = "0x4000BCA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
	public bool rightYThumbAxisDown;

	[Token(Token = "0x4000BCB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x53")]
	public bool leftYThumbAxisDown;

	[Token(Token = "0x4000BCC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public bool rightTriggerDown;

	[Token(Token = "0x4000BCD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
	public bool leftTriggerDown;

	[Token(Token = "0x4000BCE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x56")]
	private bool leftSystemButtonHeld;

	[Token(Token = "0x4000BCF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x57")]
	private bool rightSystemButtonHeld;

	[Token(Token = "0x4000BD0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool leftMenuButtonHeld;

	[Token(Token = "0x4000BD1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
	private bool rightMenuButtonHeld;

	[Token(Token = "0x4000BD2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5A")]
	public bool leftPrimaryButtonHeld;

	[Token(Token = "0x4000BD3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5B")]
	public bool rightPrimaryButtonHeld;

	[Token(Token = "0x4000BD4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public bool leftSecondaryButtonHeld;

	[Token(Token = "0x4000BD5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5D")]
	public bool rightSecondaryButtonHeld;

	[Token(Token = "0x4000BD6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5E")]
	public bool leftSnapDown;

	[Token(Token = "0x4000BD7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5F")]
	public bool rightSnapDown;

	[Token(Token = "0x4000BD8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public bool isGrabToggle;

	[Token(Token = "0x4000BD9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
	public bool isSnapRotation;

	[Token(Token = "0x4000BDA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
	public bool isManualReload;

	[Token(Token = "0x4000BDB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x63")]
	public bool isHeadForward;

	[Token(Token = "0x4000BDC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public bool handSwapEnabled;

	[Token(Token = "0x4000BDD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float triggerPressedThreshold;

	[Token(Token = "0x4000BDE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public float grabPressedThreshold;

	[Token(Token = "0x4000BDF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public float ejectAxisThreshold;

	[Token(Token = "0x4000BE0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public float snapTurnThreshold;

	[Token(Token = "0x4000BE1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public float snapTurnDeadZoneThreshold;

	[NonSerialized]
	[Token(Token = "0x4000BE2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public int snapAngle;

	[NonSerialized]
	[Token(Token = "0x4000BE3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public float smoothRateDPS;

	[Token(Token = "0x4000BE4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public float leftXAxisValue;

	[Token(Token = "0x4000BE5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public float rightXAxisValue;

	[Token(Token = "0x4000BE6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	public float currentManualYRotationValue;

	[NonSerialized]
	[Token(Token = "0x4000BE7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Vector3 playerGripOffsets;

	[NonSerialized]
	[Token(Token = "0x4000BE8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	public Vector3 playerGripPosOffsets;

	[Token(Token = "0x4000BE9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Vector2 leftStickAxis;

	[Token(Token = "0x4000BEA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Vector2 rightStickAxis;

	[Token(Token = "0x4000BEB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private float leftTriggerAxis;

	[Token(Token = "0x4000BEC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private float rightTriggerAxis;

	[Token(Token = "0x4000BED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private float leftGripAxis;

	[Token(Token = "0x4000BEE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	private float rightGripAxis;

	[Token(Token = "0x4000BEF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private bool leftMenuButtonPressed;

	[Token(Token = "0x4000BF0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC9")]
	private bool leftPrimaryButtonPressed;

	[Token(Token = "0x4000BF1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCA")]
	private bool leftSecondaryButtonPressed;

	[Token(Token = "0x4000BF2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCB")]
	private bool rightMenuButtonPressed;

	[Token(Token = "0x4000BF3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	private bool rightPrimaryButtonPressed;

	[Token(Token = "0x4000BF4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCD")]
	private bool rightSecondaryButtonPressed;

	[Token(Token = "0x4000BF5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCE")]
	private bool pollingDevices;

	[Token(Token = "0x4000BF6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public InputDevice leftHandDevice;

	[Token(Token = "0x4000BF7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public InputDevice rightHandDevice;

	[NonSerialized]
	[Token(Token = "0x4000BF8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public VRController controllerType;

	[Token(Token = "0x4000BF9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public ControllerOffsets steamControllerOffsets;

	[Token(Token = "0x4000BFA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public ControllerOffsetSettings steamOffsets;

	[Token(Token = "0x4000BFB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private bool steamActionEjectMagLeft;

	[Token(Token = "0x4000BFC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x109")]
	private bool steamActionEjectMagLeftHeld;

	[Token(Token = "0x4000BFD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10A")]
	private bool steamActionEjectMagRight;

	[Token(Token = "0x4000BFE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10B")]
	private bool steamActionEjectMagRightHeld;

	[Token(Token = "0x600095B")]
	[Address(RVA = "0xBE624C", Offset = "0xBE624C", VA = "0xBE624C")]
	private void Awake()
	{
	}

	[Token(Token = "0x600095C")]
	[Address(RVA = "0xBE6530", Offset = "0xBE6530", VA = "0xBE6530")]
	[IteratorStateMachine(typeof(<PollDevices>d__77))]
	private IEnumerator PollDevices()
	{
		return null;
	}

	[Token(Token = "0x600095D")]
	[Address(RVA = "0xBE65C0", Offset = "0xBE65C0", VA = "0xBE65C0")]
	public void UpdateGripAngle(Vector3 _angle)
	{
	}

	[Token(Token = "0x600095E")]
	[Address(RVA = "0xBE6704", Offset = "0xBE6704", VA = "0xBE6704")]
	public void UpdateGripOffset(Vector3 _offset)
	{
	}

	[Token(Token = "0x600095F")]
	[Address(RVA = "0xBE681C", Offset = "0xBE681C", VA = "0xBE681C")]
	public void SetSnapRotation(bool state)
	{
	}

	[Token(Token = "0x6000960")]
	[Address(RVA = "0xBE6878", Offset = "0xBE6878", VA = "0xBE6878")]
	public void SetSnapAngle(int angle)
	{
	}

	[Token(Token = "0x6000961")]
	[Address(RVA = "0xBE68D4", Offset = "0xBE68D4", VA = "0xBE68D4")]
	public void SetSmoothRate(float rate)
	{
	}

	[Token(Token = "0x6000962")]
	[Address(RVA = "0xBE6930", Offset = "0xBE6930", VA = "0xBE6930")]
	public void SetGrabToggle(bool state)
	{
	}

	[Token(Token = "0x6000963")]
	[Address(RVA = "0xBE698C", Offset = "0xBE698C", VA = "0xBE698C")]
	public void SetManualReloadMode(bool state)
	{
	}

	[Token(Token = "0x6000964")]
	[Address(RVA = "0xBE69E8", Offset = "0xBE69E8", VA = "0xBE69E8")]
	public void SetHeadForward(HeadForwardMode _mode)
	{
	}

	[Token(Token = "0x6000965")]
	[Address(RVA = "0xBE6A44", Offset = "0xBE6A44", VA = "0xBE6A44")]
	public void ToggleSwapHandMode()
	{
	}

	[Token(Token = "0x6000966")]
	[Address(RVA = "0xBE6A98", Offset = "0xBE6A98", VA = "0xBE6A98")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000967")]
	[Address(RVA = "0xBE6B94", Offset = "0xBE6B94", VA = "0xBE6B94")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000968")]
	[Address(RVA = "0xBE6C90", Offset = "0xBE6C90", VA = "0xBE6C90")]
	private void UpdateOVRInput()
	{
	}

	[Token(Token = "0x6000969")]
	[Address(RVA = "0xBE7430", Offset = "0xBE7430", VA = "0xBE7430")]
	public VRController GetControllerTypeToEnum()
	{
		return default(VRController);
	}

	[Token(Token = "0x600096A")]
	[Address(RVA = "0xBE76F0", Offset = "0xBE76F0", VA = "0xBE76F0")]
	private void GetXRInputDevices()
	{
	}

	[Token(Token = "0x600096B")]
	[Address(RVA = "0xBE78E8", Offset = "0xBE78E8", VA = "0xBE78E8")]
	private void SampleXRInputDevices()
	{
	}

	[Token(Token = "0x600096C")]
	[Address(RVA = "0xBE7AC4", Offset = "0xBE7AC4", VA = "0xBE7AC4")]
	private void UpdateInput()
	{
	}

	[Token(Token = "0x600096D")]
	[Address(RVA = "0xBE80EC", Offset = "0xBE80EC", VA = "0xBE80EC")]
	private void Update()
	{
	}

	[Token(Token = "0x600096E")]
	[Address(RVA = "0xBE81A8", Offset = "0xBE81A8", VA = "0xBE81A8")]
	public void ResetValues()
	{
	}

	[Token(Token = "0x600096F")]
	[Address(RVA = "0xBE81B4", Offset = "0xBE81B4", VA = "0xBE81B4")]
	public InputController()
	{
	}
}
[Token(Token = "0x20001E6")]
public class KinematicRigidbody : MonoBehaviour
{
	[Token(Token = "0x20001E7")]
	[CompilerGenerated]
	private sealed class <CheckSleep>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000C1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000C1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000C1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public KinematicRigidbody <>4__this;

		[Token(Token = "0x17000127")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600097F")]
			[Address(RVA = "0xBE8AAC", Offset = "0xBE8AAC", VA = "0xBE8AAC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000128")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000981")]
			[Address(RVA = "0xBE8AF4", Offset = "0xBE8AF4", VA = "0xBE8AF4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600097C")]
		[Address(RVA = "0xBE85FC", Offset = "0xBE85FC", VA = "0xBE85FC")]
		[DebuggerHidden]
		public <CheckSleep>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x600097D")]
		[Address(RVA = "0xBE88C8", Offset = "0xBE88C8", VA = "0xBE88C8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600097E")]
		[Address(RVA = "0xBE88CC", Offset = "0xBE88CC", VA = "0xBE88CC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000980")]
		[Address(RVA = "0xBE8AB4", Offset = "0xBE8AB4", VA = "0xBE8AB4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000C15")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Affect child rigidbodies?")]
	public bool allChildren;

	[Token(Token = "0x4000C16")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<Rigidbody> rBodies;

	[Token(Token = "0x4000C17")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool sleeping;

	[Token(Token = "0x4000C18")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool deparentOnStart;

	[Token(Token = "0x4000C19")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private MeshRenderer mRenderer;

	[Token(Token = "0x6000976")]
	[Address(RVA = "0xBE8370", Offset = "0xBE8370", VA = "0xBE8370")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000977")]
	[Address(RVA = "0xBE83D0", Offset = "0xBE83D0", VA = "0xBE83D0")]
	public void Start()
	{
	}

	[Token(Token = "0x6000978")]
	[Address(RVA = "0xBE8594", Offset = "0xBE8594", VA = "0xBE8594")]
	[IteratorStateMachine(typeof(<CheckSleep>d__7))]
	private IEnumerator CheckSleep()
	{
		return null;
	}

	[Token(Token = "0x6000979")]
	[Address(RVA = "0xBE8624", Offset = "0xBE8624", VA = "0xBE8624")]
	public void Invoke()
	{
	}

	[Token(Token = "0x600097A")]
	[Address(RVA = "0xBE8684", Offset = "0xBE8684", VA = "0xBE8684")]
	public void Invoke(Vector3 _force, Vector3 _position)
	{
	}

	[Token(Token = "0x600097B")]
	[Address(RVA = "0xBE88B8", Offset = "0xBE88B8", VA = "0xBE88B8")]
	public KinematicRigidbody()
	{
	}
}
[Token(Token = "0x20001E8")]
public class LerpFov : MonoBehaviour
{
	[Token(Token = "0x4000C1D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float startFov;

	[Token(Token = "0x4000C1E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float endFov;

	[Token(Token = "0x4000C1F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float duration;

	[Token(Token = "0x4000C20")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AnimationCurve curve;

	[Token(Token = "0x4000C21")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool forward;

	[Token(Token = "0x4000C22")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Camera cam;

	[Token(Token = "0x4000C23")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float progress;

	[Token(Token = "0x6000982")]
	[Address(RVA = "0xBE8AFC", Offset = "0xBE8AFC", VA = "0xBE8AFC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000983")]
	[Address(RVA = "0xBE8B4C", Offset = "0xBE8B4C", VA = "0xBE8B4C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000984")]
	[Address(RVA = "0xBE8C24", Offset = "0xBE8C24", VA = "0xBE8C24")]
	public LerpFov()
	{
	}
}
[Token(Token = "0x20001E9")]
public class LookAt : MonoBehaviour
{
	[Token(Token = "0x4000C24")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Transform xForm;

	[Token(Token = "0x4000C25")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float lookRate;

	[Token(Token = "0x4000C26")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform target;

	[Token(Token = "0x4000C27")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool useXFormUp;

	[Token(Token = "0x4000C28")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	public bool useUnscaledDeltaTime;

	[Token(Token = "0x4000C29")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
	private bool isGameManager;

	[Token(Token = "0x6000985")]
	[Address(RVA = "0xBE8C48", Offset = "0xBE8C48", VA = "0xBE8C48")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000986")]
	[Address(RVA = "0xBE8CF8", Offset = "0xBE8CF8", VA = "0xBE8CF8")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000987")]
	[Address(RVA = "0xBE8F40", Offset = "0xBE8F40", VA = "0xBE8F40")]
	public LookAt()
	{
	}
}
[Token(Token = "0x20001EA")]
public class ObjectPool : MonoBehaviour
{
	[Token(Token = "0x4000C2A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] objects;

	[Token(Token = "0x4000C2B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Dictionary<string, int> indexLookup;

	[Token(Token = "0x4000C2C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Stack<GameObject>[] pool;

	[Token(Token = "0x4000C2D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int[] checkoutCount;

	[Token(Token = "0x6000988")]
	[Address(RVA = "0xBE8F58", Offset = "0xBE8F58", VA = "0xBE8F58")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000989")]
	[Address(RVA = "0xBE91C4", Offset = "0xBE91C4", VA = "0xBE91C4")]
	public bool HasCheckouts()
	{
		return default(bool);
	}

	[Token(Token = "0x600098A")]
	[Address(RVA = "0xBE8F7C", Offset = "0xBE8F7C", VA = "0xBE8F7C")]
	public void Init(GameObject[] objectArray, bool prewarm = false)
	{
	}

	[Token(Token = "0x600098B")]
	[Address(RVA = "0xBE95BC", Offset = "0xBE95BC", VA = "0xBE95BC")]
	public void Init(GameObject[][] objectArrays, bool prewarm = false)
	{
	}

	[Token(Token = "0x600098C")]
	[Address(RVA = "0xBE96D0", Offset = "0xBE96D0", VA = "0xBE96D0")]
	public int GetObjectIndex(string objectName)
	{
		return default(int);
	}

	[Token(Token = "0x600098D")]
	[Address(RVA = "0xBE97C0", Offset = "0xBE97C0", VA = "0xBE97C0")]
	public GameObject GetPrefab(string objectName)
	{
		return null;
	}

	[Token(Token = "0x600098E")]
	[Address(RVA = "0xBE97EC", Offset = "0xBE97EC", VA = "0xBE97EC")]
	public GameObject GetPrefab(int index)
	{
		return null;
	}

	[Token(Token = "0x600098F")]
	[Address(RVA = "0xBE981C", Offset = "0xBE981C", VA = "0xBE981C")]
	public GameObject GetObject(string objectName)
	{
		return null;
	}

	[Token(Token = "0x6000990")]
	[Address(RVA = "0xBE92D8", Offset = "0xBE92D8", VA = "0xBE92D8")]
	public GameObject GetObject(int index = 0)
	{
		return null;
	}

	[Token(Token = "0x6000991")]
	[Address(RVA = "0xBE9480", Offset = "0xBE9480", VA = "0xBE9480")]
	public void ReleaseObject(GameObject obj)
	{
	}

	[Token(Token = "0x6000992")]
	[Address(RVA = "0xBE9848", Offset = "0xBE9848", VA = "0xBE9848")]
	public void LogCounts(string label)
	{
	}

	[Token(Token = "0x6000993")]
	[Address(RVA = "0xBE9A78", Offset = "0xBE9A78", VA = "0xBE9A78")]
	public ObjectPool()
	{
	}
}
[Token(Token = "0x20001EC")]
[CreateAssetMenu(fileName = "newParticleFX", menuName = "Particle FX")]
public class ParticleFX : ScriptableObject
{
	[Token(Token = "0x4000C30")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject prefab;

	[Token(Token = "0x4000C31")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int poolSize;

	[Token(Token = "0x4000C32")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int typeID;

	[Token(Token = "0x6000997")]
	[Address(RVA = "0xBE9AF8", Offset = "0xBE9AF8", VA = "0xBE9AF8")]
	public ParticleFX()
	{
	}
}
[Token(Token = "0x20001ED")]
public class PhysicsSimulation : MonoBehaviour
{
	[Token(Token = "0x20001EE")]
	private struct SimulatedBody
	{
		[Token(Token = "0x4000C3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly Rigidbody rigidbody;

		[Token(Token = "0x4000C3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly bool isChild;

		[Token(Token = "0x4000C3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private readonly Vector3 originalPosition;

		[Token(Token = "0x4000C3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly Quaternion originalRotation;

		[Token(Token = "0x4000C3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly Transform transform;

		[Token(Token = "0x600099E")]
		[Address(RVA = "0xBEA8E4", Offset = "0xBEA8E4", VA = "0xBEA8E4")]
		public SimulatedBody(Rigidbody rigidbody, bool isChild)
		{
		}

		[Token(Token = "0x600099F")]
		[Address(RVA = "0xBEA428", Offset = "0xBEA428", VA = "0xBEA428")]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x4000C33")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int maxIterations;

	[Token(Token = "0x4000C34")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private SimulatedBody[] simulatedBodies;

	[Token(Token = "0x4000C35")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Vector2 forceMinMax;

	[Token(Token = "0x4000C36")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float forceAngleInDegrees;

	[Token(Token = "0x4000C37")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool randomizeForceAngle;

	[Token(Token = "0x4000C38")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private List<Rigidbody> generatedRigidbodies;

	[Token(Token = "0x4000C39")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private List<Collider> generatedColliders;

	[Token(Token = "0x6000998")]
	[Address(RVA = "0xBE9B0C", Offset = "0xBE9B0C", VA = "0xBE9B0C")]
	[ContextMenu("Run Simulation")]
	public void RunSimulation()
	{
	}

	[Token(Token = "0x6000999")]
	[Address(RVA = "0xBE9E8C", Offset = "0xBE9E8C", VA = "0xBE9E8C")]
	private void AutoGenerateComponents()
	{
	}

	[Token(Token = "0x600099A")]
	[Address(RVA = "0xBEA564", Offset = "0xBEA564", VA = "0xBEA564")]
	private void RemoveAutoGeneratedComponents()
	{
	}

	[Token(Token = "0x600099B")]
	[Address(RVA = "0xBEA7E0", Offset = "0xBEA7E0", VA = "0xBEA7E0")]
	[ContextMenu("Reset")]
	public void ResetAllBodies()
	{
	}

	[Token(Token = "0x600099C")]
	[Address(RVA = "0xBEA85C", Offset = "0xBEA85C", VA = "0xBEA85C")]
	public PhysicsSimulation()
	{
	}
}
[Token(Token = "0x20001F0")]
public class PlatformRenderSettings : MonoBehaviour
{
	[Token(Token = "0x4000C41")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool castShadows;

	[Token(Token = "0x4000C42")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool recieveShadows;

	[Token(Token = "0x4000C43")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Renderer meshRenderer;

	[Token(Token = "0x60009A3")]
	[Address(RVA = "0xBEA9F4", Offset = "0xBEA9F4", VA = "0xBEA9F4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60009A4")]
	[Address(RVA = "0xBEAA44", Offset = "0xBEAA44", VA = "0xBEAA44")]
	private void Start()
	{
	}

	[Token(Token = "0x60009A5")]
	[Address(RVA = "0xBEAA7C", Offset = "0xBEAA7C", VA = "0xBEAA7C")]
	public PlatformRenderSettings()
	{
	}
}
[Token(Token = "0x20001F1")]
public class Player : MonoBehaviour
{
	[Token(Token = "0x4000C44")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Player instance;

	[Token(Token = "0x4000C45")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject leg;

	[Token(Token = "0x4000C46")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public SkinnedMeshRenderer legMesh;

	[Token(Token = "0x4000C47")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Animator legAnimator;

	[Token(Token = "0x60009A6")]
	[Address(RVA = "0xBEAA8C", Offset = "0xBEAA8C", VA = "0xBEAA8C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60009A7")]
	[Address(RVA = "0xBEAB04", Offset = "0xBEAB04", VA = "0xBEAB04")]
	public void KickAnimation()
	{
	}

	[Token(Token = "0x60009A8")]
	[Address(RVA = "0xBEAB80", Offset = "0xBEAB80", VA = "0xBEAB80")]
	public void KickEnded()
	{
	}

	[Token(Token = "0x60009A9")]
	[Address(RVA = "0xBEABB8", Offset = "0xBEABB8", VA = "0xBEABB8")]
	public Player()
	{
	}
}
[Token(Token = "0x20001F2")]
public class PlayerHealth : MonoBehaviour
{
	[Token(Token = "0x4000C48")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static PlayerHealth instance;

	[Token(Token = "0x4000C49")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static Action onHealthChanged;

	[Token(Token = "0x4000C4A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static Action onHealthPickup;

	[Token(Token = "0x4000C4B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static Action onDamage;

	[Token(Token = "0x4000C4C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public HealthIndicator leftIndicator;

	[Token(Token = "0x4000C4D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public HealthIndicator rightIndicator;

	[Token(Token = "0x4000C4E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool weaponEquipped;

	[Token(Token = "0x4000C4F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	private bool isLeftWeapon;

	[Token(Token = "0x4000C50")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int currentHealth;

	[Token(Token = "0x4000C51")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int totalDamage;

	[Token(Token = "0x4000C52")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool isDead;

	[Token(Token = "0x4000C53")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
	public bool invincible;

	[Token(Token = "0x4000C54")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public TweenPosition hitFlash;

	[Token(Token = "0x4000C55")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float nextTimeCanHit;

	[Token(Token = "0x4000C56")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float damageInterval;

	[Token(Token = "0x4000C57")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int shotCounts;

	[Token(Token = "0x60009AA")]
	[Address(RVA = "0xBEABC0", Offset = "0xBEABC0", VA = "0xBEABC0")]
	public void WeaponEquipped(bool isLeft)
	{
	}

	[Token(Token = "0x60009AB")]
	[Address(RVA = "0xBEAC74", Offset = "0xBEAC74", VA = "0xBEAC74")]
	public void Awake()
	{
	}

	[Token(Token = "0x60009AC")]
	[Address(RVA = "0xBEACC0", Offset = "0xBEACC0", VA = "0xBEACC0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60009AD")]
	[Address(RVA = "0xBEADBC", Offset = "0xBEADBC", VA = "0xBEADBC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60009AE")]
	[Address(RVA = "0xBEAEB8", Offset = "0xBEAEB8", VA = "0xBEAEB8")]
	public void RestoreHealth(bool showFX = false)
	{
	}

	[Token(Token = "0x60009AF")]
	[Address(RVA = "0xBEB0AC", Offset = "0xBEB0AC", VA = "0xBEB0AC")]
	public void AddHealthPickup()
	{
	}

	[Token(Token = "0x60009B0")]
	[Address(RVA = "0xBEAF24", Offset = "0xBEAF24", VA = "0xBEAF24")]
	public void Reset()
	{
	}

	[Token(Token = "0x60009B1")]
	[Address(RVA = "0xBEB25C", Offset = "0xBEB25C", VA = "0xBEB25C")]
	public void ResetGraceValues()
	{
	}

	[Token(Token = "0x60009B2")]
	[Address(RVA = "0xBEB2F0", Offset = "0xBEB2F0", VA = "0xBEB2F0")]
	public void Damage()
	{
	}

	[Token(Token = "0x60009B3")]
	[Address(RVA = "0xBEB754", Offset = "0xBEB754", VA = "0xBEB754")]
	public bool AccuracyCheck()
	{
		return default(bool);
	}

	[Token(Token = "0x60009B4")]
	[Address(RVA = "0xBEB7F0", Offset = "0xBEB7F0", VA = "0xBEB7F0")]
	public PlayerHealth()
	{
	}
}
[Token(Token = "0x20001F3")]
public class PlayerTrigger : MonoBehaviour
{
	[Token(Token = "0x20001F4")]
	[CompilerGenerated]
	private sealed class <TriggerRoutine>d__8 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000C5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000C60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000C61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PlayerTrigger <>4__this;

		[Token(Token = "0x4000C62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <time>5__2;

		[Token(Token = "0x17000129")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60009BB")]
			[Address(RVA = "0xBEBB0C", Offset = "0xBEBB0C", VA = "0xBEBB0C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700012A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60009BD")]
			[Address(RVA = "0xBEBB54", Offset = "0xBEBB54", VA = "0xBEBB54", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009B8")]
		[Address(RVA = "0xBEB978", Offset = "0xBEB978", VA = "0xBEB978")]
		[DebuggerHidden]
		public <TriggerRoutine>d__8(int <>1__state)
		{
		}

		[Token(Token = "0x60009B9")]
		[Address(RVA = "0xBEB9A8", Offset = "0xBEB9A8", VA = "0xBEB9A8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60009BA")]
		[Address(RVA = "0xBEB9AC", Offset = "0xBEB9AC", VA = "0xBEB9AC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60009BC")]
		[Address(RVA = "0xBEBB14", Offset = "0xBEBB14", VA = "0xBEBB14", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000C58")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool debug;

	[Token(Token = "0x4000C59")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float delay;

	[Token(Token = "0x4000C5A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEvent events;

	[Token(Token = "0x4000C5B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool triggerMultiple;

	[Token(Token = "0x4000C5C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	private bool triggered;

	[Token(Token = "0x4000C5D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject[] objectsToActivate;

	[Token(Token = "0x4000C5E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject[] objectsToDeActivate;

	[Token(Token = "0x60009B5")]
	[Address(RVA = "0xBEB7F8", Offset = "0xBEB7F8", VA = "0xBEB7F8")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60009B6")]
	[Address(RVA = "0xBEB910", Offset = "0xBEB910", VA = "0xBEB910")]
	[IteratorStateMachine(typeof(<TriggerRoutine>d__8))]
	private IEnumerator TriggerRoutine()
	{
		return null;
	}

	[Token(Token = "0x60009B7")]
	[Address(RVA = "0xBEB9A0", Offset = "0xBEB9A0", VA = "0xBEB9A0")]
	public PlayerTrigger()
	{
	}
}
[Token(Token = "0x20001F5")]
public class PlaySoundEffect : MonoBehaviour
{
	[Token(Token = "0x4000C63")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioManager.SoundType soundEffect;

	[Token(Token = "0x4000C64")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float volume;

	[Token(Token = "0x4000C65")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float minPitch;

	[Token(Token = "0x4000C66")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float maxPitch;

	[Token(Token = "0x60009BE")]
	[Address(RVA = "0xBEBB5C", Offset = "0xBEBB5C", VA = "0xBEBB5C")]
	public void PlaySound()
	{
	}

	[Token(Token = "0x60009BF")]
	[Address(RVA = "0xBEBBDC", Offset = "0xBEBBDC", VA = "0xBEBBDC")]
	public PlaySoundEffect()
	{
	}
}
[Token(Token = "0x20001F6")]
public class Projectile : MonoBehaviour
{
	[Token(Token = "0x4000C67")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ProjectileSettings settings;

	[Token(Token = "0x4000C68")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool dynamic;

	[Token(Token = "0x4000C69")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool AIProjectile;

	[Token(Token = "0x4000C6A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float AIProjectileVelocityScale;

	[Token(Token = "0x4000C6B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform target;

	[Token(Token = "0x4000C6C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform xForm;

	[Token(Token = "0x4000C6D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float lifeTime;

	[Token(Token = "0x4000C6E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public int maxReflections;

	[Token(Token = "0x4000C6F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float radius;

	[Token(Token = "0x4000C70")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float magnitude;

	[Token(Token = "0x4000C71")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float flyByDistance;

	[Token(Token = "0x4000C72")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private MeshRenderer mesh;

	[Token(Token = "0x4000C73")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private TrailRenderer trail;

	[Token(Token = "0x4000C74")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Vector3 velocity;

	[Token(Token = "0x4000C75")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Rigidbody rBody;

	[Token(Token = "0x4000C76")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public int reflections;

	[Token(Token = "0x4000C77")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public float forceScale;

	[Token(Token = "0x4000C78")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public float distanceFromTarget;

	[Token(Token = "0x4000C79")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private float startMag;

	[Token(Token = "0x4000C7A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private GunData gunData;

	[Token(Token = "0x4000C7B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public RaycastHit hitInfo;

	[Token(Token = "0x4000C7C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private bool init;

	[Token(Token = "0x4000C7D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBD")]
	private bool disabling;

	[Token(Token = "0x4000C7E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBE")]
	private bool reflectionsOn;

	[Token(Token = "0x4000C7F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBF")]
	private bool playedFlyBy;

	[Token(Token = "0x4000C80")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public bool hitPlayerBody;

	[Token(Token = "0x4000C81")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC1")]
	public bool alive;

	[Token(Token = "0x4000C82")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC2")]
	private bool visible;

	[Token(Token = "0x4000C83")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	private float endLifeTime;

	[Token(Token = "0x4000C84")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private float trailTime;

	[Token(Token = "0x4000C85")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private Transform firingRef;

	[Token(Token = "0x4000C86")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public AIGunController AI_GunController;

	[Token(Token = "0x4000C87")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public Gun playerGunController;

	[Token(Token = "0x4000C88")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private Vector3[] positions;

	[Token(Token = "0x60009C0")]
	[Address(RVA = "0xBEBBF4", Offset = "0xBEBBF4", VA = "0xBEBBF4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60009C1")]
	[Address(RVA = "0xBEBD30", Offset = "0xBEBD30", VA = "0xBEBD30")]
	public void Fire(Vector3 direction, float _magnitude)
	{
	}

	[Token(Token = "0x60009C2")]
	[Address(RVA = "0xBEC00C", Offset = "0xBEC00C", VA = "0xBEC00C")]
	public void UpdateLife()
	{
	}

	[Token(Token = "0x60009C3")]
	[Address(RVA = "0xBEC150", Offset = "0xBEC150", VA = "0xBEC150")]
	public void UpdatePosition(float _delta)
	{
	}

	[Token(Token = "0x60009C4")]
	[Address(RVA = "0xBED9B4", Offset = "0xBED9B4", VA = "0xBED9B4")]
	private void Disable(bool immediate = false)
	{
	}

	[Token(Token = "0x60009C5")]
	[Address(RVA = "0xBEDA14", Offset = "0xBEDA14", VA = "0xBEDA14")]
	public void Die()
	{
	}

	[Token(Token = "0x60009C6")]
	[Address(RVA = "0xBEDA54", Offset = "0xBEDA54", VA = "0xBEDA54")]
	public Projectile()
	{
	}
}
[Token(Token = "0x20001F7")]
[CreateAssetMenu(fileName = "ProjectileSettings", menuName = "Settings/ProjectileSettings", order = 1)]
public class ProjectileSettings : ScriptableObject
{
	[Token(Token = "0x4000C89")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LayerMask collisionMask;

	[Token(Token = "0x4000C8A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float energyLoss;

	[Token(Token = "0x4000C8B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float drag;

	[Token(Token = "0x4000C8C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float lifeDuration;

	[Token(Token = "0x60009C7")]
	[Address(RVA = "0xBEDAD0", Offset = "0xBEDAD0", VA = "0xBEDAD0")]
	public ProjectileSettings()
	{
	}
}
[Token(Token = "0x20001F8")]
public enum Expression
{
	[Token(Token = "0x4000C8E")]
	Neutral,
	[Token(Token = "0x4000C8F")]
	Angry,
	[Token(Token = "0x4000C90")]
	Shocked,
	[Token(Token = "0x4000C91")]
	Dead
}
[Token(Token = "0x20001F9")]
public enum AnimationState
{
	[Token(Token = "0x4000C93")]
	IDLE,
	[Token(Token = "0x4000C94")]
	HANGING,
	[Token(Token = "0x4000C95")]
	DRIVING,
	[Token(Token = "0x4000C96")]
	WALK,
	[Token(Token = "0x4000C97")]
	STEPLEFTSHOOT,
	[Token(Token = "0x4000C98")]
	STEPRIGHTSHOOT,
	[Token(Token = "0x4000C99")]
	CROUCHEDSHOOT,
	[Token(Token = "0x4000C9A")]
	HOSTAGEIDLE,
	[Token(Token = "0x4000C9B")]
	HOSTAGEHAPPY
}
[Token(Token = "0x20001FA")]
public class Ragdoll : MonoBehaviour
{
	[Token(Token = "0x20001FB")]
	[CompilerGenerated]
	private sealed class <SpinTorso>d__86 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000CE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000CE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000CE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float _duration;

		[Token(Token = "0x4000CE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector3 localPos;

		[Token(Token = "0x4000CE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Ragdoll <>4__this;

		[Token(Token = "0x4000CE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float forceScale;

		[Token(Token = "0x4000CEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public ForceMode forceMode;

		[Token(Token = "0x4000CEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool rollAround;

		[Token(Token = "0x4000CEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float <duration>5__2;

		[Token(Token = "0x4000CED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float <time>5__3;

		[Token(Token = "0x4000CEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 <forceVector>5__4;

		[Token(Token = "0x1700012B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60009E6")]
			[Address(RVA = "0xBF019C", Offset = "0xBF019C", VA = "0xBF019C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700012C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60009E8")]
			[Address(RVA = "0xBF01E4", Offset = "0xBF01E4", VA = "0xBF01E4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009E3")]
		[Address(RVA = "0xBEFB5C", Offset = "0xBEFB5C", VA = "0xBEFB5C")]
		[DebuggerHidden]
		public <SpinTorso>d__86(int <>1__state)
		{
		}

		[Token(Token = "0x60009E4")]
		[Address(RVA = "0xBEFF04", Offset = "0xBEFF04", VA = "0xBEFF04", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60009E5")]
		[Address(RVA = "0xBEFF08", Offset = "0xBEFF08", VA = "0xBEFF08", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60009E7")]
		[Address(RVA = "0xBF01A4", Offset = "0xBF01A4", VA = "0xBF01A4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001FC")]
	[CompilerGenerated]
	private sealed class <StunnedRoutine>d__92 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000CEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000CF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000CF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Ragdoll <>4__this;

		[Token(Token = "0x4000CF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <time>5__2;

		[Token(Token = "0x1700012D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60009EC")]
			[Address(RVA = "0xBF0350", Offset = "0xBF0350", VA = "0xBF0350", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700012E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60009EE")]
			[Address(RVA = "0xBF0398", Offset = "0xBF0398", VA = "0xBF0398", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009E9")]
		[Address(RVA = "0xBEFCA0", Offset = "0xBEFCA0", VA = "0xBEFCA0")]
		[DebuggerHidden]
		public <StunnedRoutine>d__92(int <>1__state)
		{
		}

		[Token(Token = "0x60009EA")]
		[Address(RVA = "0xBF01EC", Offset = "0xBF01EC", VA = "0xBF01EC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60009EB")]
		[Address(RVA = "0xBF01F0", Offset = "0xBF01F0", VA = "0xBF01F0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60009ED")]
		[Address(RVA = "0xBF0358", Offset = "0xBF0358", VA = "0xBF0358", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001FD")]
	[CompilerGenerated]
	private sealed class <DelayAttachments>d__95 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000CF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000CF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000CF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Ragdoll <>4__this;

		[Token(Token = "0x1700012F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60009F2")]
			[Address(RVA = "0xBF0754", Offset = "0xBF0754", VA = "0xBF0754", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000130")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60009F4")]
			[Address(RVA = "0xBF079C", Offset = "0xBF079C", VA = "0xBF079C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009EF")]
		[Address(RVA = "0xBEFCC8", Offset = "0xBEFCC8", VA = "0xBEFCC8")]
		[DebuggerHidden]
		public <DelayAttachments>d__95(int <>1__state)
		{
		}

		[Token(Token = "0x60009F0")]
		[Address(RVA = "0xBF03A0", Offset = "0xBF03A0", VA = "0xBF03A0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60009F1")]
		[Address(RVA = "0xBF03A4", Offset = "0xBF03A4", VA = "0xBF03A4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60009F3")]
		[Address(RVA = "0xBF075C", Offset = "0xBF075C", VA = "0xBF075C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001FE")]
	[CompilerGenerated]
	private sealed class <DieFace>d__97 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000CF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000CF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000CF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Ragdoll <>4__this;

		[Token(Token = "0x4000CF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool <atRest>5__2;

		[Token(Token = "0x17000131")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60009F8")]
			[Address(RVA = "0xBF0A70", Offset = "0xBF0A70", VA = "0xBF0A70", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000132")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60009FA")]
			[Address(RVA = "0xBF0AB8", Offset = "0xBF0AB8", VA = "0xBF0AB8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009F5")]
		[Address(RVA = "0xBEFD58", Offset = "0xBEFD58", VA = "0xBEFD58")]
		[DebuggerHidden]
		public <DieFace>d__97(int <>1__state)
		{
		}

		[Token(Token = "0x60009F6")]
		[Address(RVA = "0xBF07A4", Offset = "0xBF07A4", VA = "0xBF07A4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60009F7")]
		[Address(RVA = "0xBF07A8", Offset = "0xBF07A8", VA = "0xBF07A8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60009F9")]
		[Address(RVA = "0xBF0A78", Offset = "0xBF0A78", VA = "0xBF0A78", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000C9C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool pcBuild;

	[Token(Token = "0x4000C9D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Action<SpawnInfo> OnDeath;

	[Token(Token = "0x4000C9E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float hitPoints;

	[Token(Token = "0x4000C9F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool test;

	[Token(Token = "0x4000CA0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
	public bool testRagdoll;

	[Token(Token = "0x4000CA1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2E")]
	public bool enableJointCollision;

	[Token(Token = "0x4000CA2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public VoiceSet voiceSet;

	[Token(Token = "0x4000CA3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float trackPlayerRate;

	[Token(Token = "0x4000CA4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public bool isKinematic;

	[Token(Token = "0x4000CA5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public PhysicMaterial physicsMaterial;

	[Token(Token = "0x4000CA6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float force;

	[Token(Token = "0x4000CA7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float dragForce;

	[Token(Token = "0x4000CA8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Transform headBone;

	[Token(Token = "0x4000CA9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public bool freezeOnDeath;

	[Token(Token = "0x4000CAA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float freezeMag;

	[Token(Token = "0x4000CAB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public bool isPlayer;

	[Token(Token = "0x4000CAC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
	public bool isActive;

	[Token(Token = "0x4000CAD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public float torsoSpinForce;

	[Token(Token = "0x4000CAE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public bool inWater;

	[Token(Token = "0x4000CAF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
	public bool invincible;

	[Token(Token = "0x4000CB0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Transform headAttachmentXForm;

	[Token(Token = "0x4000CB1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Transform knifeAttachmentXForm;

	[Token(Token = "0x4000CB2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Transform gunAttachmentXForm;

	[Token(Token = "0x4000CB3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public GameObject weaponPrefab;

	[Token(Token = "0x4000CB4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public GameObject weapon;

	[Token(Token = "0x4000CB5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public GameObject headItemPrefab;

	[Token(Token = "0x4000CB6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public GameObject headItem;

	[Token(Token = "0x4000CB7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public Rigidbody[] torsoBones;

	[Token(Token = "0x4000CB8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public CostumeBaker costumeBaker;

	[Token(Token = "0x4000CB9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private List<Rigidbody> attachmentInstances;

	[Token(Token = "0x4000CBA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public AIGunController gunController;

	[Token(Token = "0x4000CBB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private Animator bodyAnimator;

	[Token(Token = "0x4000CBC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public Animator faceAnimator;

	[Token(Token = "0x4000CBD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private Rigidbody[] limbs;

	[Token(Token = "0x4000CBE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private float lifeTtime;

	[Token(Token = "0x4000CBF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	public Vector3 motionVelocity;

	[Token(Token = "0x4000CC0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private Vector3 lastPosition;

	[Token(Token = "0x4000CC1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
	public Expression currentExpression;

	[Token(Token = "0x4000CC2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public MeshRenderer[] faceRenderers;

	[Token(Token = "0x4000CC3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public Transform parentRootXForm;

	[Token(Token = "0x4000CC4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public Transform boneRootXFormParent;

	[Token(Token = "0x4000CC5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public Transform boneRootXForm;

	[Token(Token = "0x4000CC6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public bool dead;

	[Token(Token = "0x4000CC7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
	public float timeSinceDeath;

	[Token(Token = "0x4000CC8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	public float maxTimeSinceDeathForAccuracy;

	[Token(Token = "0x4000CC9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private Rigidbody hat;

	[Token(Token = "0x4000CCA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public Rigidbody headRbody;

	[Token(Token = "0x4000CCB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private AudioSource voice;

	[Token(Token = "0x4000CCC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public SpawnInfo spawnInfo;

	[Token(Token = "0x4000CCD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public AIController aiController;

	[Token(Token = "0x4000CCE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	private FootEffects footEffects;

	[Token(Token = "0x4000CCF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	private ShadowBlobController shadowBlobController;

	[Token(Token = "0x4000CD0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	private Vector3[] localBonePositions;

	[Token(Token = "0x4000CD1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	private Quaternion[] localBoneRotations;

	[Token(Token = "0x4000CD2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	private Collider focusTarget;

	[Token(Token = "0x4000CD3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	private int neutralFaceHash;

	[Token(Token = "0x4000CD4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
	private int angryFaceHash;

	[Token(Token = "0x4000CD5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	private int shockedFaceHash;

	[Token(Token = "0x4000CD6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
	private int deadFaceHash;

	[Token(Token = "0x4000CD7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	private int idleHash;

	[Token(Token = "0x4000CD8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
	private int deadHash;

	[Token(Token = "0x4000CD9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	private bool initialised;

	[Token(Token = "0x4000CDA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
	private float nextImpact;

	[Token(Token = "0x4000CDB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	public float minImpactDelay;

	[Token(Token = "0x4000CDC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
	public float minImpactMagnitude;

	[Token(Token = "0x4000CDD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	public float maxImpactMagnitude;

	[Token(Token = "0x4000CDE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	private GameObject knifeObject;

	[Token(Token = "0x4000CDF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	public bool hurt;

	[Token(Token = "0x4000CE0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B9")]
	public bool stunned;

	[Token(Token = "0x4000CE1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1BC")]
	public float minDelayDetatch;

	[Token(Token = "0x4000CE2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	public float maxDelayDetatch;

	[Token(Token = "0x4000CE3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C4")]
	private bool deadDead;

	[Token(Token = "0x60009C8")]
	[Address(RVA = "0xBEDAEC", Offset = "0xBEDAEC", VA = "0xBEDAEC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60009C9")]
	[Address(RVA = "0xBEE078", Offset = "0xBEE078", VA = "0xBEE078")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60009CA")]
	[Address(RVA = "0xBEE600", Offset = "0xBEE600", VA = "0xBEE600")]
	public void BodyImpact(float _mag, float _mass, Vector3 _pos)
	{
	}

	[Token(Token = "0x60009CB")]
	[Address(RVA = "0xBEE1F4", Offset = "0xBEE1F4", VA = "0xBEE1F4")]
	private void StoreBoneInfo()
	{
	}

	[Token(Token = "0x60009CC")]
	[Address(RVA = "0xBEE71C", Offset = "0xBEE71C", VA = "0xBEE71C")]
	private void RestoreBoneInfo()
	{
	}

	[Token(Token = "0x60009CD")]
	[Address(RVA = "0xBEE818", Offset = "0xBEE818", VA = "0xBEE818")]
	private void ReattachItems()
	{
	}

	[Token(Token = "0x60009CE")]
	[Address(RVA = "0xBEEB2C", Offset = "0xBEEB2C", VA = "0xBEEB2C")]
	public void ResetState()
	{
	}

	[Token(Token = "0x60009CF")]
	[Address(RVA = "0xBEEDF0", Offset = "0xBEEDF0", VA = "0xBEEDF0")]
	public void CleanUp()
	{
	}

	[Token(Token = "0x60009D0")]
	[Address(RVA = "0xBEEF58", Offset = "0xBEEF58", VA = "0xBEEF58")]
	public void AddAttachment(Attachment attachment, AttachmentType attachmentType)
	{
	}

	[Token(Token = "0x60009D1")]
	[Address(RVA = "0xBEF2A8", Offset = "0xBEF2A8", VA = "0xBEF2A8")]
	public void LoadFaces(FaceSet faceSet)
	{
	}

	[Token(Token = "0x60009D2")]
	[Address(RVA = "0xBEF4F4", Offset = "0xBEF4F4", VA = "0xBEF4F4")]
	public void EquipHat(GameObject hatPrefab)
	{
	}

	[Token(Token = "0x60009D3")]
	[Address(RVA = "0xBEF14C", Offset = "0xBEF14C", VA = "0xBEF14C")]
	public void CreateWeapon(Attachment gunAttachment)
	{
	}

	[Token(Token = "0x60009D4")]
	[Address(RVA = "0xBEF618", Offset = "0xBEF618", VA = "0xBEF618")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60009D5")]
	[Address(RVA = "0xBEF670", Offset = "0xBEF670", VA = "0xBEF670")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60009D6")]
	[Address(RVA = "0xBEF890", Offset = "0xBEF890", VA = "0xBEF890")]
	private float ConvertRange(float value, float inMin, float inMax, float outMin, float outMax)
	{
		return default(float);
	}

	[Token(Token = "0x60009D7")]
	[Address(RVA = "0xBEF704", Offset = "0xBEF704", VA = "0xBEF704")]
	private void QuadDraticDrag()
	{
	}

	[Token(Token = "0x60009D8")]
	[Address(RVA = "0xBEF8AC", Offset = "0xBEF8AC", VA = "0xBEF8AC")]
	public void AddForce(Vector3 force, Vector3 position, ForceMode forceMode)
	{
	}

	[Token(Token = "0x60009D9")]
	[Address(RVA = "0xBEF95C", Offset = "0xBEF95C", VA = "0xBEF95C")]
	public void CheckTorsoSpin(Vector3 pos)
	{
	}

	[Token(Token = "0x60009DA")]
	[Address(RVA = "0xBEFAE8", Offset = "0xBEFAE8", VA = "0xBEFAE8")]
	public void RollAround()
	{
	}

	[Token(Token = "0x60009DB")]
	[Address(RVA = "0xBEFA2C", Offset = "0xBEFA2C", VA = "0xBEFA2C")]
	[IteratorStateMachine(typeof(<SpinTorso>d__86))]
	private IEnumerator SpinTorso(float forceScale, float _duration, Vector3 localPos, bool rollAround = false, ForceMode forceMode = ForceMode.Impulse)
	{
		return null;
	}

	[Token(Token = "0x60009DC")]
	[Address(RVA = "0xBEE35C", Offset = "0xBEE35C", VA = "0xBEE35C")]
	public bool Damage(float points, bool hitHead = false)
	{
		return default(bool);
	}

	[Token(Token = "0x60009DD")]
	[Address(RVA = "0xBEED60", Offset = "0xBEED60", VA = "0xBEED60")]
	public void ChangeExpression(Expression _expr)
	{
	}

	[Token(Token = "0x60009DE")]
	[Address(RVA = "0xBEFBEC", Offset = "0xBEFBEC", VA = "0xBEFBEC")]
	public void BecomeStunned(Transform _target)
	{
	}

	[Token(Token = "0x60009DF")]
	[Address(RVA = "0xBEFC38", Offset = "0xBEFC38", VA = "0xBEFC38")]
	[IteratorStateMachine(typeof(<StunnedRoutine>d__92))]
	private IEnumerator StunnedRoutine()
	{
		return null;
	}

	[Token(Token = "0x60009E0")]
	[Address(RVA = "0xBEFB84", Offset = "0xBEFB84", VA = "0xBEFB84")]
	[IteratorStateMachine(typeof(<DelayAttachments>d__95))]
	private IEnumerator DelayAttachments()
	{
		return null;
	}

	[Token(Token = "0x60009E1")]
	[Address(RVA = "0xBEFCF0", Offset = "0xBEFCF0", VA = "0xBEFCF0")]
	[IteratorStateMachine(typeof(<DieFace>d__97))]
	private IEnumerator DieFace()
	{
		return null;
	}

	[Token(Token = "0x60009E2")]
	[Address(RVA = "0xBEFD80", Offset = "0xBEFD80", VA = "0xBEFD80")]
	public Ragdoll()
	{
	}
}
[Token(Token = "0x20001FF")]
public class RagdollTest : MonoBehaviour
{
	[Token(Token = "0x4000CFA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool applyIK;

	[Token(Token = "0x4000CFB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool isKinematic;

	[Token(Token = "0x4000CFC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public RigidbodyInterpolation interpolation;

	[Token(Token = "0x4000CFD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public PhysicMaterial physMaterial;

	[Token(Token = "0x4000CFE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform lookObject;

	[Token(Token = "0x4000CFF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Rigidbody[] bones;

	[Token(Token = "0x4000D00")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Collider[] colliders;

	[Token(Token = "0x4000D01")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Animator animator;

	[Token(Token = "0x4000D02")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool slowMo;

	[Token(Token = "0x60009FB")]
	[Address(RVA = "0xBF0AC0", Offset = "0xBF0AC0", VA = "0xBF0AC0")]
	private void Awake()
	{
	}

	[Token(Token = "0x60009FC")]
	[Address(RVA = "0xBF0C2C", Offset = "0xBF0C2C", VA = "0xBF0C2C")]
	private void Start()
	{
	}

	[Token(Token = "0x60009FD")]
	[Address(RVA = "0xBF0B64", Offset = "0xBF0B64", VA = "0xBF0B64")]
	private void ApplyPhysics()
	{
	}

	[Token(Token = "0x60009FE")]
	[Address(RVA = "0xBF0CD4", Offset = "0xBF0CD4", VA = "0xBF0CD4")]
	private void OnAnimatorIK()
	{
	}

	[Token(Token = "0x60009FF")]
	[Address(RVA = "0xBF0DA4", Offset = "0xBF0DA4", VA = "0xBF0DA4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000A00")]
	[Address(RVA = "0xBF0CE8", Offset = "0xBF0CE8", VA = "0xBF0CE8")]
	private void UpdateIK(float lookWeight)
	{
	}

	[Token(Token = "0x6000A01")]
	[Address(RVA = "0xBF0DEC", Offset = "0xBF0DEC", VA = "0xBF0DEC")]
	public RagdollTest()
	{
	}
}
[Token(Token = "0x2000200")]
public class ReloadWaistTrigger : MonoBehaviour
{
	[Token(Token = "0x4000D03")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static ReloadWaistTrigger instance;

	[Token(Token = "0x4000D04")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float facingRate;

	[Token(Token = "0x4000D05")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float holsterRadius;

	[Token(Token = "0x4000D06")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AnimationCurve lookScaleCurve;

	[Token(Token = "0x4000D07")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform headXForm;

	[Token(Token = "0x4000D08")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform leftHolster;

	[Token(Token = "0x4000D09")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform rightHolster;

	[Token(Token = "0x4000D0A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public InteractableSlot leftHolsterSlot;

	[Token(Token = "0x4000D0B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public InteractableSlot rightHolsterSlot;

	[Token(Token = "0x4000D0C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Vector3 headOffset;

	[Token(Token = "0x4000D0D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public MeshRenderer leftIndicator;

	[Token(Token = "0x4000D0E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public MeshRenderer rightIndicator;

	[Token(Token = "0x4000D0F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private TweenScale leftTweenScaler;

	[Token(Token = "0x4000D10")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private TweenScale rightTweenScaler;

	[Token(Token = "0x4000D11")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Canvas leftHolsterTip;

	[Token(Token = "0x4000D12")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Canvas rightHolsterTip;

	[Token(Token = "0x4000D13")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public LayerMask groundMask;

	[Token(Token = "0x4000D14")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	public bool lookingDown;

	[Token(Token = "0x4000D15")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Transform playerShadow;

	[Token(Token = "0x4000D16")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private Rigidbody rBody;

	[Token(Token = "0x4000D17")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Transform xForm;

	[Token(Token = "0x4000D18")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Vector3 V3Down;

	[Token(Token = "0x4000D19")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private Vector3 shadowPos;

	[Token(Token = "0x4000D1A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private bool leftIndicatorVisible;

	[Token(Token = "0x4000D1B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC9")]
	private bool rightIndicatorVisible;

	[Token(Token = "0x4000D1C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	private RaycastHit groundCheck;

	[Token(Token = "0x17000133")]
	public GunInfo leftGun
	{
		[Token(Token = "0x6000A02")]
		[Address(RVA = "0xBF0DF4", Offset = "0xBF0DF4", VA = "0xBF0DF4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000134")]
	public GunInfo rightGun
	{
		[Token(Token = "0x6000A03")]
		[Address(RVA = "0xBF0E58", Offset = "0xBF0E58", VA = "0xBF0E58")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000A04")]
	[Address(RVA = "0xBF0EBC", Offset = "0xBF0EBC", VA = "0xBF0EBC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000A05")]
	[Address(RVA = "0xBF1100", Offset = "0xBF1100", VA = "0xBF1100")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000A06")]
	[Address(RVA = "0xBF11EC", Offset = "0xBF11EC", VA = "0xBF11EC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000A07")]
	[Address(RVA = "0xBF12D8", Offset = "0xBF12D8", VA = "0xBF12D8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A08")]
	[Address(RVA = "0xBF13D8", Offset = "0xBF13D8", VA = "0xBF13D8")]
	public void DestroyHolsterItems()
	{
	}

	[Token(Token = "0x6000A09")]
	[Address(RVA = "0xBF100C", Offset = "0xBF100C", VA = "0xBF100C")]
	private void UpdateHolsterSize()
	{
	}

	[Token(Token = "0x6000A0A")]
	[Address(RVA = "0xBF12F8", Offset = "0xBF12F8", VA = "0xBF12F8")]
	public void ShowLeftIndicator(bool show)
	{
	}

	[Token(Token = "0x6000A0B")]
	[Address(RVA = "0xBF1368", Offset = "0xBF1368", VA = "0xBF1368")]
	public void ShowRightIndicator(bool show)
	{
	}

	[Token(Token = "0x6000A0C")]
	[Address(RVA = "0xBF1514", Offset = "0xBF1514", VA = "0xBF1514")]
	private void CheckHolsterVisible()
	{
	}

	[Token(Token = "0x6000A0D")]
	[Address(RVA = "0xBF1678", Offset = "0xBF1678", VA = "0xBF1678")]
	public void Clear()
	{
	}

	[Token(Token = "0x6000A0E")]
	[Address(RVA = "0xBF16A8", Offset = "0xBF16A8", VA = "0xBF16A8")]
	public void ClearLeftHolster()
	{
	}

	[Token(Token = "0x6000A0F")]
	[Address(RVA = "0xBF16C4", Offset = "0xBF16C4", VA = "0xBF16C4")]
	public void ClearRightHolster()
	{
	}

	[Token(Token = "0x6000A10")]
	[Address(RVA = "0xBF16E0", Offset = "0xBF16E0", VA = "0xBF16E0")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000A11")]
	[Address(RVA = "0xBF172C", Offset = "0xBF172C", VA = "0xBF172C")]
	public InteractableSlot GetAvailableHolster(HandType handType)
	{
		return null;
	}

	[Token(Token = "0x6000A12")]
	[Address(RVA = "0xBF17B0", Offset = "0xBF17B0", VA = "0xBF17B0")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000A13")]
	[Address(RVA = "0xBF1C24", Offset = "0xBF1C24", VA = "0xBF1C24")]
	private void ResetToRoot()
	{
	}

	[Token(Token = "0x6000A14")]
	[Address(RVA = "0xBF1C70", Offset = "0xBF1C70", VA = "0xBF1C70")]
	public ReloadWaistTrigger()
	{
	}
}
[Token(Token = "0x2000201")]
public class ReparentScript : MonoBehaviour
{
	[Token(Token = "0x4000D1D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject objectToParent;

	[Token(Token = "0x4000D1E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject reparentTarget;

	[Token(Token = "0x6000A15")]
	[Address(RVA = "0xBF1C84", Offset = "0xBF1C84", VA = "0xBF1C84")]
	public void Invoke()
	{
	}

	[Token(Token = "0x6000A16")]
	[Address(RVA = "0xBF1CD0", Offset = "0xBF1CD0", VA = "0xBF1CD0")]
	public ReparentScript()
	{
	}
}
[Token(Token = "0x2000202")]
public class Rotator : MonoBehaviour
{
	[Token(Token = "0x4000D1F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool useUnscaledTime;

	[Token(Token = "0x4000D20")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float xRotationSpeed;

	[Token(Token = "0x4000D21")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float yRotationSpeed;

	[Token(Token = "0x4000D22")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float zRotationSpeed;

	[Token(Token = "0x4000D23")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool randomStartX;

	[Token(Token = "0x4000D24")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool randomStartY;

	[Token(Token = "0x4000D25")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
	public bool randomStartZ;

	[Token(Token = "0x4000D26")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform xForm;

	[Token(Token = "0x6000A17")]
	[Address(RVA = "0xBF1CD8", Offset = "0xBF1CD8", VA = "0xBF1CD8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A18")]
	[Address(RVA = "0xBF1E9C", Offset = "0xBF1E9C", VA = "0xBF1E9C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000A19")]
	[Address(RVA = "0xBF1F44", Offset = "0xBF1F44", VA = "0xBF1F44")]
	public Rotator()
	{
	}
}
[Token(Token = "0x2000203")]
[ExecuteInEditMode]
public class ScalingLengthLookAt : MonoBehaviour
{
	[Token(Token = "0x4000D27")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool useParentUp;

	[Token(Token = "0x4000D28")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool scale;

	[Token(Token = "0x4000D29")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	public bool selfAnchor;

	[Token(Token = "0x4000D2A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform target;

	[Token(Token = "0x4000D2B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform anchor;

	[Token(Token = "0x4000D2C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector3 upAxis;

	[Token(Token = "0x4000D2D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float widthScale;

	[Token(Token = "0x4000D2E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float heightScale;

	[Token(Token = "0x4000D2F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float lengthScale;

	[Token(Token = "0x4000D30")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Vector3 targetOffset;

	[Token(Token = "0x4000D31")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private Vector3 currentScale;

	[Token(Token = "0x4000D32")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Transform xForm;

	[Token(Token = "0x4000D33")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Vector3 relativePos;

	[Token(Token = "0x4000D34")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private Quaternion newRotation;

	[Token(Token = "0x6000A1A")]
	[Address(RVA = "0xBF1F4C", Offset = "0xBF1F4C", VA = "0xBF1F4C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000A1B")]
	[Address(RVA = "0xBF2094", Offset = "0xBF2094", VA = "0xBF2094")]
	public void LateUpdate()
	{
	}

	[Token(Token = "0x6000A1C")]
	[Address(RVA = "0xBF2338", Offset = "0xBF2338", VA = "0xBF2338")]
	public ScalingLengthLookAt()
	{
	}
}
[Token(Token = "0x2000204")]
public class ScoreData
{
	[Token(Token = "0x2000205")]
	public class ScoreEntryData
	{
		[Token(Token = "0x4000D3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string score;

		[Token(Token = "0x4000D3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool committed;

		[Token(Token = "0x6000A31")]
		[Address(RVA = "0xBF4C0C", Offset = "0xBF4C0C", VA = "0xBF4C0C")]
		public ScoreEntryData()
		{
		}

		[Token(Token = "0x6000A32")]
		[Address(RVA = "0xBF3180", Offset = "0xBF3180", VA = "0xBF3180")]
		public ScoreEntryData(string score, bool commit)
		{
		}

		[Token(Token = "0x6000A33")]
		[Address(RVA = "0xBF3FF8", Offset = "0xBF3FF8", VA = "0xBF3FF8")]
		public void Serialize(BinaryWriter writer)
		{
		}

		[Token(Token = "0x6000A34")]
		[Address(RVA = "0xBF4840", Offset = "0xBF4840", VA = "0xBF4840")]
		public static ScoreEntryData Deserialize(BinaryReader reader)
		{
			return null;
		}
	}

	[Token(Token = "0x2000206")]
	public class StatSchemaData
	{
		[Token(Token = "0x4000D3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Dictionary<string, StatSchemaDatum> childSchema;

		[Token(Token = "0x6000A35")]
		[Address(RVA = "0xBF4C64", Offset = "0xBF4C64", VA = "0xBF4C64")]
		public StatSchemaDatum GetChildEvent(string index)
		{
			return null;
		}

		[Token(Token = "0x6000A36")]
		[Address(RVA = "0xBF2A84", Offset = "0xBF2A84", VA = "0xBF2A84")]
		public StatSchemaData(SchemasData schema)
		{
		}

		[Token(Token = "0x6000A37")]
		[Address(RVA = "0xBF4044", Offset = "0xBF4044", VA = "0xBF4044")]
		public void Serialize(BinaryWriter writer, SchemasData schema)
		{
		}

		[Token(Token = "0x6000A38")]
		[Address(RVA = "0xBF48D0", Offset = "0xBF48D0", VA = "0xBF48D0")]
		public void Deserialize(BinaryReader reader, ushort versionMajor, ushort versionMinor, SchemasData schema)
		{
		}
	}

	[Token(Token = "0x2000207")]
	public class StatSchemaDatum
	{
		[Token(Token = "0x4000D41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Dictionary<string, StatSchemaDatum> childSchema;

		[NonSerialized]
		[Token(Token = "0x4000D42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<string> achievements;

		[Token(Token = "0x17000136")]
		public object data
		{
			[Token(Token = "0x6000A39")]
			[Address(RVA = "0xBF4CF8", Offset = "0xBF4CF8", VA = "0xBF4CF8")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A3A")]
			[Address(RVA = "0xBF4D00", Offset = "0xBF4D00", VA = "0xBF4D00")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000137")]
		public SchemasData.StatType statType
		{
			[Token(Token = "0x6000A3B")]
			[Address(RVA = "0xBF4D08", Offset = "0xBF4D08", VA = "0xBF4D08")]
			[CompilerGenerated]
			get
			{
				return default(SchemasData.StatType);
			}
			[Token(Token = "0x6000A3C")]
			[Address(RVA = "0xBF4D10", Offset = "0xBF4D10", VA = "0xBF4D10")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000A3D")]
		[Address(RVA = "0xBF4D18", Offset = "0xBF4D18", VA = "0xBF4D18")]
		private StatSchemaDatum()
		{
		}

		[Token(Token = "0x6000A3E")]
		[Address(RVA = "0xBF4DDC", Offset = "0xBF4DDC", VA = "0xBF4DDC")]
		public StatSchemaDatum GetChildEvent(string index)
		{
			return null;
		}

		[Token(Token = "0x6000A3F")]
		[Address(RVA = "0xBF4E70", Offset = "0xBF4E70", VA = "0xBF4E70")]
		public void AddAchievement(string achievement)
		{
		}

		[Token(Token = "0x6000A40")]
		[Address(RVA = "0xBF4F44", Offset = "0xBF4F44", VA = "0xBF4F44")]
		public StatSchemaDatum(SchemasData.Schema schema)
		{
		}

		[Token(Token = "0x6000A41")]
		[Address(RVA = "0xBF5018", Offset = "0xBF5018", VA = "0xBF5018")]
		public StatSchemaDatum(SchemasData.SchemaList schema)
		{
		}

		[Token(Token = "0x6000A42")]
		[Address(RVA = "0xBF5214", Offset = "0xBF5214", VA = "0xBF5214")]
		public void Reset()
		{
		}

		[Token(Token = "0x6000A43")]
		[Address(RVA = "0xBF5408", Offset = "0xBF5408", VA = "0xBF5408")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000A44")]
		[Address(RVA = "0xBF55FC", Offset = "0xBF55FC", VA = "0xBF55FC")]
		public void SetBool(bool enable)
		{
		}

		[Token(Token = "0x6000A45")]
		[Address(RVA = "0xBF566C", Offset = "0xBF566C", VA = "0xBF566C")]
		public void SetInt(int enable)
		{
		}

		[Token(Token = "0x6000A46")]
		[Address(RVA = "0xBF56D8", Offset = "0xBF56D8", VA = "0xBF56D8")]
		public void Increment(int enable)
		{
		}

		[Token(Token = "0x6000A47")]
		[Address(RVA = "0xBF577C", Offset = "0xBF577C", VA = "0xBF577C")]
		public bool GetBool()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A48")]
		[Address(RVA = "0xBF57D8", Offset = "0xBF57D8", VA = "0xBF57D8")]
		public int GetCount()
		{
			return default(int);
		}

		[Token(Token = "0x6000A49")]
		[Address(RVA = "0xBF5834", Offset = "0xBF5834", VA = "0xBF5834")]
		public int GetInt()
		{
			return default(int);
		}

		[Token(Token = "0x6000A4A")]
		[Address(RVA = "0xBF5890", Offset = "0xBF5890", VA = "0xBF5890")]
		public TimeSpan GetTimeSpan()
		{
			return default(TimeSpan);
		}

		[Token(Token = "0x6000A4B")]
		[Address(RVA = "0xBF5900", Offset = "0xBF5900", VA = "0xBF5900")]
		public void Serialize(BinaryWriter writer, SchemasData.Schema schema)
		{
		}

		[Token(Token = "0x6000A4C")]
		[Address(RVA = "0xBF5A74", Offset = "0xBF5A74", VA = "0xBF5A74")]
		public void Serialize(BinaryWriter writer, SchemasData.SchemaList schema)
		{
		}

		[Token(Token = "0x6000A4D")]
		[Address(RVA = "0xBF5CF0", Offset = "0xBF5CF0", VA = "0xBF5CF0")]
		public void Deserialize(BinaryReader reader, ushort versionMajor, ushort versionMinor, SchemasData.Schema schema)
		{
		}

		[Token(Token = "0x6000A4E")]
		[Address(RVA = "0xBF5E44", Offset = "0xBF5E44", VA = "0xBF5E44")]
		public void Deserialize(BinaryReader reader, ushort versionMajor, ushort versionMinor, SchemasData.SchemaList schema)
		{
		}
	}

	[Token(Token = "0x4000D35")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private DateTime creationDate;

	[Token(Token = "0x4000D36")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool newSaveGame;

	[Token(Token = "0x4000D37")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static ScoreData _current;

	[Token(Token = "0x4000D38")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static bool loading;

	[Token(Token = "0x4000D39")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Dictionary<string, ScoreEntryData> scores;

	[Token(Token = "0x4000D3A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Dictionary<string, StatSchemaData> stats;

	[Token(Token = "0x17000135")]
	private static ScoreData current
	{
		[Token(Token = "0x6000A1D")]
		[Address(RVA = "0xBF2360", Offset = "0xBF2360", VA = "0xBF2360")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x14000017")]
	public static event Action gameLoaded
	{
		[Token(Token = "0x6000A27")]
		[Address(RVA = "0xBF33F8", Offset = "0xBF33F8", VA = "0xBF33F8")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000A28")]
		[Address(RVA = "0xBF34B4", Offset = "0xBF34B4", VA = "0xBF34B4")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6000A1E")]
	[Address(RVA = "0xBF277C", Offset = "0xBF277C", VA = "0xBF277C")]
	public static StatSchemaData GetSchemaStat(string schema)
	{
		return null;
	}

	[Token(Token = "0x6000A1F")]
	[Address(RVA = "0xBF27D8", Offset = "0xBF27D8", VA = "0xBF27D8")]
	public ScoreData()
	{
	}

	[Token(Token = "0x6000A20")]
	[Address(RVA = "0xBF2CCC", Offset = "0xBF2CCC", VA = "0xBF2CCC")]
	public static List<string> GetUncommitedEntries()
	{
		return null;
	}

	[Token(Token = "0x6000A21")]
	[Address(RVA = "0xBF2EF8", Offset = "0xBF2EF8", VA = "0xBF2EF8")]
	public static int GetInt(string apiName)
	{
		return default(int);
	}

	[Token(Token = "0x6000A22")]
	[Address(RVA = "0xBF2FA8", Offset = "0xBF2FA8", VA = "0xBF2FA8")]
	public static long GetLong(string apiName)
	{
		return default(long);
	}

	[Token(Token = "0x6000A23")]
	[Address(RVA = "0xBF3058", Offset = "0xBF3058", VA = "0xBF3058")]
	public static void Commited(string apiName)
	{
	}

	[Token(Token = "0x6000A24")]
	[Address(RVA = "0xBF30C4", Offset = "0xBF30C4", VA = "0xBF30C4")]
	public static void SetLong(string apiName, long score)
	{
	}

	[Token(Token = "0x6000A25")]
	[Address(RVA = "0xBF31B0", Offset = "0xBF31B0", VA = "0xBF31B0")]
	public static void SetInt(string apiName, int score)
	{
	}

	[Token(Token = "0x6000A26")]
	[Address(RVA = "0xBF326C", Offset = "0xBF326C", VA = "0xBF326C")]
	public static void GetScoreLocations(out string save, out string temp, out string backup)
	{
	}

	[Token(Token = "0x6000A29")]
	[Address(RVA = "0xBF3570", Offset = "0xBF3570", VA = "0xBF3570")]
	public static bool Save(bool sync = false)
	{
		return default(bool);
	}

	[Token(Token = "0x6000A2A")]
	[Address(RVA = "0xBF3854", Offset = "0xBF3854", VA = "0xBF3854")]
	public static bool ResetSave()
	{
		return default(bool);
	}

	[Token(Token = "0x6000A2B")]
	[Address(RVA = "0xBF23C8", Offset = "0xBF23C8", VA = "0xBF23C8")]
	public static bool Load()
	{
		return default(bool);
	}

	[Token(Token = "0x6000A2C")]
	[Address(RVA = "0xBF3A38", Offset = "0xBF3A38", VA = "0xBF3A38")]
	public static bool IsLoaded()
	{
		return default(bool);
	}

	[Token(Token = "0x6000A2D")]
	[Address(RVA = "0xBF3A88", Offset = "0xBF3A88", VA = "0xBF3A88")]
	public static DateTime GetCreationDate()
	{
		return default(DateTime);
	}

	[Token(Token = "0x6000A2E")]
	[Address(RVA = "0xBF3AF0", Offset = "0xBF3AF0", VA = "0xBF3AF0")]
	private void SaveData(Stream output)
	{
	}

	[Token(Token = "0x6000A2F")]
	[Address(RVA = "0xBF42B8", Offset = "0xBF42B8", VA = "0xBF42B8")]
	private bool LoadData(Stream input)
	{
		return default(bool);
	}

	[Token(Token = "0x6000A30")]
	[Address(RVA = "0xBF44B0", Offset = "0xBF44B0", VA = "0xBF44B0")]
	private bool Load_v_0_X(BinaryReader bin, ushort versionMajor, ushort versionMinor)
	{
		return default(bool);
	}
}
[Token(Token = "0x2000209")]
[RequireComponent(typeof(Camera))]
public class Screenshot : MonoBehaviour
{
	[Token(Token = "0x4000D45")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private RenderTextureFormat format;

	[Token(Token = "0x4000D46")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private TextureFormat texFormat;

	[Token(Token = "0x4000D47")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private int width;

	[Token(Token = "0x4000D48")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private int height;

	[Token(Token = "0x4000D49")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private string folder;

	[Token(Token = "0x4000D4A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private string filenamePrefix;

	[Token(Token = "0x4000D4B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private bool ensureTransparentBackground;

	[Token(Token = "0x6000A52")]
	[Address(RVA = "0xBF61AC", Offset = "0xBF61AC", VA = "0xBF61AC")]
	[ContextMenu("Take Screenshot")]
	public void TakeScreenshot()
	{
	}

	[Token(Token = "0x6000A53")]
	[Address(RVA = "0xBF65E0", Offset = "0xBF65E0", VA = "0xBF65E0")]
	public string GetSafePath(string path)
	{
		return null;
	}

	[Token(Token = "0x6000A54")]
	[Address(RVA = "0xBF6674", Offset = "0xBF6674", VA = "0xBF6674")]
	public string GetSafeFilename(string filename)
	{
		return null;
	}

	[Token(Token = "0x6000A55")]
	[Address(RVA = "0xBF6708", Offset = "0xBF6708", VA = "0xBF6708")]
	public Screenshot()
	{
	}
}
[Token(Token = "0x200020A")]
public class SdfImage : Image
{
	[Token(Token = "0x4000D4C")]
	private const float softness = 0.125f;

	[Token(Token = "0x4000D4D")]
	private const float edge = 0.5f;

	[Token(Token = "0x4000D4E")]
	private const float aaMax = 0.49f;

	[Token(Token = "0x4000D4F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly Vector4 s_DefaultTangent;

	[Token(Token = "0x4000D50")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static readonly Vector3 s_DefaultNormal;

	[Token(Token = "0x4000D51")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	[Tooltip("fade on shape outline. Safest to leave at 1")]
	public float antiAliasScale;

	[Token(Token = "0x4000D52")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	[Tooltip("Each vertex color. Must be 4 otherwise uses single color")]
	public List<Color> colors;

	[Token(Token = "0x4000D53")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	[Tooltip("outline width in relation to image size")]
	[Header("Outline")]
	public float outlineScale;

	[Token(Token = "0x4000D54")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
	[Tooltip("Leave clear color for disabled")]
	public Color outlineColor;

	[Token(Token = "0x4000D55")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	[Tooltip("Each vertex color. Must be 4 otherwise uses single color")]
	public List<Color> outlineColors;

	[Token(Token = "0x4000D56")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	[Tooltip("2D displacement for dropshadow")]
	[Header("Shadow")]
	public Vector2 shadowOffset;

	[Token(Token = "0x4000D57")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	[Tooltip("Leave clear color for disabled")]
	public Color shadowColor;

	[Token(Token = "0x4000D58")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	[Tooltip("Each vertex color. Must be 4 otherwise uses single color")]
	public List<Color> shadowColors;

	[Token(Token = "0x4000D59")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	[Tooltip("Inner (negative) or outer (positive) fade off for the shadow")]
	public float shadowSpread;

	[Token(Token = "0x6000A56")]
	[Address(RVA = "0xBF6790", Offset = "0xBF6790", VA = "0xBF6790")]
	private Color[] AssignColors(List<Color> input, Color input2)
	{
		return null;
	}

	[Token(Token = "0x6000A57")]
	[Address(RVA = "0xBF6A1C", Offset = "0xBF6A1C", VA = "0xBF6A1C")]
	private bool UsingGradient()
	{
		return default(bool);
	}

	[Token(Token = "0x6000A58")]
	[Address(RVA = "0xBF6AA0", Offset = "0xBF6AA0", VA = "0xBF6AA0", Slot = "44")]
	protected override void OnPopulateMesh(VertexHelper vh)
	{
	}

	[Token(Token = "0x6000A59")]
	[Address(RVA = "0xBF7F78", Offset = "0xBF7F78", VA = "0xBF7F78")]
	private Vector4 GetDrawingDimensions(bool shouldPreserveAspect)
	{
		return default(Vector4);
	}

	[Token(Token = "0x6000A5A")]
	[Address(RVA = "0xBF8500", Offset = "0xBF8500", VA = "0xBF8500")]
	public SdfImage()
	{
	}
}
[Token(Token = "0x200020B")]
public class SetLightProbeAnchor : MonoBehaviour
{
	[Token(Token = "0x4000D5A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform anchor;

	[Token(Token = "0x6000A5C")]
	[Address(RVA = "0xBF8644", Offset = "0xBF8644", VA = "0xBF8644")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000A5D")]
	[Address(RVA = "0xBF86E0", Offset = "0xBF86E0", VA = "0xBF86E0")]
	public SetLightProbeAnchor()
	{
	}
}
[Token(Token = "0x200020C")]
public class SimpleMeshCombine : MonoBehaviour
{
	[Token(Token = "0x200020D")]
	[CompilerGenerated]
	private sealed class <ToggleAnimatorState>d__18 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000D69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000D6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000D6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SimpleMeshCombine <>4__this;

		[Token(Token = "0x4000D6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Animator <animator>5__2;

		[Token(Token = "0x17000138")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000A67")]
			[Address(RVA = "0xBF98C0", Offset = "0xBF98C0", VA = "0xBF98C0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000139")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000A69")]
			[Address(RVA = "0xBF9908", Offset = "0xBF9908", VA = "0xBF9908", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A64")]
		[Address(RVA = "0xBF970C", Offset = "0xBF970C", VA = "0xBF970C")]
		[DebuggerHidden]
		public <ToggleAnimatorState>d__18(int <>1__state)
		{
		}

		[Token(Token = "0x6000A65")]
		[Address(RVA = "0xBF97B8", Offset = "0xBF97B8", VA = "0xBF97B8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000A66")]
		[Address(RVA = "0xBF97BC", Offset = "0xBF97BC", VA = "0xBF97BC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A68")]
		[Address(RVA = "0xBF98C8", Offset = "0xBF98C8", VA = "0xBF98C8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000D5B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool ignoreRoot;

	[Token(Token = "0x4000D5C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool logBake;

	[Token(Token = "0x4000D5D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	public bool bakeInAwake;

	[Token(Token = "0x4000D5E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
	public bool recalculateBounds;

	[Token(Token = "0x4000D5F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool destroyRenderer;

	[Token(Token = "0x4000D60")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	public bool receiveShadows;

	[Token(Token = "0x4000D61")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
	public bool castShadows;

	[Token(Token = "0x4000D62")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F")]
	public bool disableParents;

	[Token(Token = "0x4000D63")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool destroyObjects;

	[Token(Token = "0x4000D64")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool toggleAnimatorState;

	[Token(Token = "0x4000D65")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public SECTR_Member sectrMember;

	[Token(Token = "0x4000D66")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private List<MeshRenderer> combinedRenderers;

	[Token(Token = "0x4000D67")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private BakeryLightMesh[] bakeryComponents;

	[Token(Token = "0x4000D68")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool baked;

	[Token(Token = "0x6000A5E")]
	[Address(RVA = "0xBF86E8", Offset = "0xBF86E8", VA = "0xBF86E8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000A5F")]
	[Address(RVA = "0xBF957C", Offset = "0xBF957C", VA = "0xBF957C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A60")]
	[Address(RVA = "0xBF96A0", Offset = "0xBF96A0", VA = "0xBF96A0")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000A61")]
	[Address(RVA = "0xBF883C", Offset = "0xBF883C", VA = "0xBF883C")]
	private void Bake()
	{
	}

	[Token(Token = "0x6000A62")]
	[Address(RVA = "0xBF96A4", Offset = "0xBF96A4", VA = "0xBF96A4")]
	[IteratorStateMachine(typeof(<ToggleAnimatorState>d__18))]
	private IEnumerator ToggleAnimatorState()
	{
		return null;
	}

	[Token(Token = "0x6000A63")]
	[Address(RVA = "0xBF9734", Offset = "0xBF9734", VA = "0xBF9734")]
	public SimpleMeshCombine()
	{
	}
}
[Token(Token = "0x200020E")]
public class SkyCubeRenderer : MonoBehaviour
{
	[Token(Token = "0x200020F")]
	private enum Direction
	{
		[Token(Token = "0x4000D7C")]
		Right,
		[Token(Token = "0x4000D7D")]
		Left,
		[Token(Token = "0x4000D7E")]
		Up,
		[Token(Token = "0x4000D7F")]
		Down,
		[Token(Token = "0x4000D80")]
		Front,
		[Token(Token = "0x4000D81")]
		Back
	}

	[Token(Token = "0x4000D6D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool writeToDisk;

	[Token(Token = "0x4000D6E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string FileName;

	[Token(Token = "0x4000D6F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool manualRender;

	[Token(Token = "0x4000D70")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool singleTexture;

	[Token(Token = "0x4000D71")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int faceSize;

	[Token(Token = "0x4000D72")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float nearClip;

	[Token(Token = "0x4000D73")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float farClip;

	[Token(Token = "0x4000D74")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float yieldTime;

	[Token(Token = "0x4000D75")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Camera renderCamera;

	[Token(Token = "0x4000D76")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Texture2D outPutTexture;

	[Token(Token = "0x4000D77")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private RenderTexture faceTarget;

	[Token(Token = "0x4000D78")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool rendererd;

	[Token(Token = "0x4000D79")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Vector3[] directions;

	[Token(Token = "0x4000D7A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float startTime;

	[Token(Token = "0x6000A6A")]
	[Address(RVA = "0xBF9910", Offset = "0xBF9910", VA = "0xBF9910")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000A6B")]
	[Address(RVA = "0xBF9BD8", Offset = "0xBF9BD8", VA = "0xBF9BD8")]
	private void RenderSingle()
	{
	}

	[Token(Token = "0x6000A6C")]
	[Address(RVA = "0xBF9F50", Offset = "0xBF9F50", VA = "0xBF9F50")]
	private void RenderFaces()
	{
	}

	[Token(Token = "0x6000A6D")]
	[Address(RVA = "0xBFA350", Offset = "0xBFA350", VA = "0xBFA350")]
	private void Update()
	{
	}

	[Token(Token = "0x6000A6E")]
	[Address(RVA = "0xBFA3B4", Offset = "0xBFA3B4", VA = "0xBFA3B4")]
	public SkyCubeRenderer()
	{
	}
}
[Token(Token = "0x2000210")]
public static class Analytics
{
	[Token(Token = "0x6000A6F")]
	[Address(RVA = "0xBFA454", Offset = "0xBFA454", VA = "0xBFA454")]
	public static void Flush()
	{
	}

	[Token(Token = "0x6000A70")]
	[Address(RVA = "0xBFA458", Offset = "0xBFA458", VA = "0xBFA458")]
	public static void LogStartup(DateTime saveFileCreationDate)
	{
	}

	[Token(Token = "0x6000A71")]
	[Address(RVA = "0xBFA45C", Offset = "0xBFA45C", VA = "0xBFA45C")]
	public static void GameStart()
	{
	}

	[Token(Token = "0x6000A72")]
	[Address(RVA = "0xBFA460", Offset = "0xBFA460", VA = "0xBFA460")]
	public static void GameOver(LevelStatistics stats, int stars, bool win)
	{
	}

	[Token(Token = "0x6000A73")]
	[Address(RVA = "0xBFA464", Offset = "0xBFA464", VA = "0xBFA464")]
	public static void CosmeticsButton()
	{
	}

	[Token(Token = "0x6000A74")]
	[Address(RVA = "0xBFA468", Offset = "0xBFA468", VA = "0xBFA468")]
	public static void Reward(int id, bool claimed)
	{
	}

	[Token(Token = "0x6000A75")]
	[Address(RVA = "0xBFA46C", Offset = "0xBFA46C", VA = "0xBFA46C")]
	public static void RV(string id, bool claimed)
	{
	}

	[Token(Token = "0x6000A76")]
	[Address(RVA = "0xBFA470", Offset = "0xBFA470", VA = "0xBFA470")]
	public static void MenuChange(string oldMenu, string newMenu)
	{
	}
}
[Token(Token = "0x2000211")]
public enum KillType
{
	[Token(Token = "0x4000D83")]
	Normal,
	[Token(Token = "0x4000D84")]
	Headshot,
	[Token(Token = "0x4000D85")]
	Environment,
	[Token(Token = "0x4000D86")]
	Barrel
}
[Token(Token = "0x2000212")]
public enum AccoladeType
{
	[Token(Token = "0x4000D88")]
	None = -1,
	[Token(Token = "0x4000D89")]
	Headshot,
	[Token(Token = "0x4000D8A")]
	Boom,
	[Token(Token = "0x4000D8B")]
	DoubleKill,
	[Token(Token = "0x4000D8C")]
	TripleKill,
	[Token(Token = "0x4000D8D")]
	QuadraKill,
	[Token(Token = "0x4000D8E")]
	MonsterKill,
	[Token(Token = "0x4000D8F")]
	LegendaryKill,
	[Token(Token = "0x4000D90")]
	Unstoppable,
	[Token(Token = "0x4000D91")]
	Rebound
}
[Token(Token = "0x2000213")]
public enum Difficulty
{
	[Token(Token = "0x4000D93")]
	EASY,
	[Token(Token = "0x4000D94")]
	NORMAL,
	[Token(Token = "0x4000D95")]
	HARD
}
[Token(Token = "0x2000214")]
public class LevelStatistics
{
	[Token(Token = "0x1700013A")]
	public int NumberOfKills
	{
		[Token(Token = "0x6000A77")]
		[Address(RVA = "0xBFA474", Offset = "0xBFA474", VA = "0xBFA474")]
		[CompilerGenerated]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000A78")]
		[Address(RVA = "0xBFA47C", Offset = "0xBFA47C", VA = "0xBFA47C")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x1700013B")]
	public int[] KillTypes
	{
		[Token(Token = "0x6000A79")]
		[Address(RVA = "0xBFA484", Offset = "0xBFA484", VA = "0xBFA484")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000A7A")]
		[Address(RVA = "0xBFA48C", Offset = "0xBFA48C", VA = "0xBFA48C")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x1700013C")]
	public int NumberOfTimesFired
	{
		[Token(Token = "0x6000A7B")]
		[Address(RVA = "0xBFA494", Offset = "0xBFA494", VA = "0xBFA494")]
		[CompilerGenerated]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000A7C")]
		[Address(RVA = "0xBFA49C", Offset = "0xBFA49C", VA = "0xBFA49C")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x1700013D")]
	public int NumberOfObjectsHit
	{
		[Token(Token = "0x6000A7D")]
		[Address(RVA = "0xBFA4A4", Offset = "0xBFA4A4", VA = "0xBFA4A4")]
		[CompilerGenerated]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000A7E")]
		[Address(RVA = "0xBFA4AC", Offset = "0xBFA4AC", VA = "0xBFA4AC")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x1700013E")]
	public float Accuracy
	{
		[Token(Token = "0x6000A7F")]
		[Address(RVA = "0xBFA4B4", Offset = "0xBFA4B4", VA = "0xBFA4B4")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x1700013F")]
	public int RicochetKills
	{
		[Token(Token = "0x6000A80")]
		[Address(RVA = "0xBFA4E8", Offset = "0xBFA4E8", VA = "0xBFA4E8")]
		[CompilerGenerated]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000A81")]
		[Address(RVA = "0xBFA4F0", Offset = "0xBFA4F0", VA = "0xBFA4F0")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x6000A82")]
	[Address(RVA = "0xBFA4F8", Offset = "0xBFA4F8", VA = "0xBFA4F8")]
	public LevelStatistics()
	{
	}

	[Token(Token = "0x6000A83")]
	[Address(RVA = "0xBFA5E8", Offset = "0xBFA5E8", VA = "0xBFA5E8")]
	public void ResetValues()
	{
	}

	[Token(Token = "0x6000A84")]
	[Address(RVA = "0xBFA644", Offset = "0xBFA644", VA = "0xBFA644")]
	public void Serialize()
	{
	}

	[Token(Token = "0x6000A85")]
	[Address(RVA = "0xBFA648", Offset = "0xBFA648", VA = "0xBFA648")]
	public static LevelStatistics Deserialize()
	{
		return null;
	}
}
[Token(Token = "0x2000215")]
public class GameManager : MonoBehaviour
{
	[Token(Token = "0x2000217")]
	[CompilerGenerated]
	private sealed class <AutoLoadHomeRoutine>d__144 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000DF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000DF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000DF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameManager <>4__this;

		[Token(Token = "0x1700014A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000AC9")]
			[Address(RVA = "0xBFDE64", Offset = "0xBFDE64", VA = "0xBFDE64", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700014B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000ACB")]
			[Address(RVA = "0xBFDEAC", Offset = "0xBFDEAC", VA = "0xBFDEAC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000AC6")]
		[Address(RVA = "0xBFDABC", Offset = "0xBFDABC", VA = "0xBFDABC")]
		[DebuggerHidden]
		public <AutoLoadHomeRoutine>d__144(int <>1__state)
		{
		}

		[Token(Token = "0x6000AC7")]
		[Address(RVA = "0xBFDDB4", Offset = "0xBFDDB4", VA = "0xBFDDB4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000AC8")]
		[Address(RVA = "0xBFDDB8", Offset = "0xBFDDB8", VA = "0xBFDDB8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000ACA")]
		[Address(RVA = "0xBFDE6C", Offset = "0xBFDE6C", VA = "0xBFDE6C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000218")]
	[CompilerGenerated]
	private sealed class <TimeDipDelay>d__155 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000DF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000DF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000DFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float delay;

		[Token(Token = "0x4000DFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameManager <>4__this;

		[Token(Token = "0x1700014C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000ACF")]
			[Address(RVA = "0xBFDF80", Offset = "0xBFDF80", VA = "0xBFDF80", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700014D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000AD1")]
			[Address(RVA = "0xBFDFC8", Offset = "0xBFDFC8", VA = "0xBFDFC8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000ACC")]
		[Address(RVA = "0xBFDB5C", Offset = "0xBFDB5C", VA = "0xBFDB5C")]
		[DebuggerHidden]
		public <TimeDipDelay>d__155(int <>1__state)
		{
		}

		[Token(Token = "0x6000ACD")]
		[Address(RVA = "0xBFDEB4", Offset = "0xBFDEB4", VA = "0xBFDEB4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000ACE")]
		[Address(RVA = "0xBFDEB8", Offset = "0xBFDEB8", VA = "0xBFDEB8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000AD0")]
		[Address(RVA = "0xBFDF88", Offset = "0xBFDF88", VA = "0xBFDF88", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000D9B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static GameManager instance;

	[Token(Token = "0x4000D9C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static bool AIIgnorePlayer;

	[Token(Token = "0x4000D9D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
	public static bool spectatorOn;

	[Token(Token = "0x4000D9E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA")]
	public static bool blinkOn;

	[Token(Token = "0x4000D9F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB")]
	public static bool shadowsOn;

	[Token(Token = "0x4000DA0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SECTR_CullingCamera sectrComponent;

	[Token(Token = "0x4000DA1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject mainCameraPostProcessVolume;

	[Token(Token = "0x4000DA2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public PostProcessLayer mainCameraPostFX;

	[Token(Token = "0x4000DA3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public PostProcessVolume ppv;

	[Token(Token = "0x4000DA4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Bloom postFXBloom;

	[Token(Token = "0x4000DA5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float homeSceneBloom;

	[Token(Token = "0x4000DA6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float levelSceneBloom;

	[Token(Token = "0x4000DA7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject actionCamera;

	[Token(Token = "0x4000DA8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject playerCamera;

	[Token(Token = "0x4000DA9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject overlayCanvas;

	[Token(Token = "0x4000DAA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public bool showScore;

	[Token(Token = "0x4000DAB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
	public bool useTimeEffects;

	[Token(Token = "0x4000DAC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
	public bool skipTutorial;

	[Token(Token = "0x4000DAD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static Action onAmmoCounterChanged;

	[Token(Token = "0x4000DAE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static Action onReset;

	[Token(Token = "0x4000DAF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public static Action onPause;

	[Token(Token = "0x4000DB0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public static Action onUnPause;

	[Token(Token = "0x4000DB1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public static Action onNextLevel;

	[Token(Token = "0x4000DB2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public static Action onLevelStart;

	[Token(Token = "0x4000DB3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public static Action onLevelComplete;

	[Token(Token = "0x4000DB4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public static Action<bool> onKill;

	[Token(Token = "0x4000DB5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public static Action<bool> onPlayerFired;

	[Token(Token = "0x4000DB6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public static Action onPlayerHit;

	[Token(Token = "0x4000DB7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public static Action onPlayerDied;

	[Token(Token = "0x4000DB8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public static Action<bool, GunData> onPlayerEquippedChanged;

	[Token(Token = "0x4000DB9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public static Action<bool> onPlayerHitObject;

	[Token(Token = "0x4000DBA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public static Action<bool> onAIFired;

	[Token(Token = "0x4000DBB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public static Action<bool> onAISawPlayer;

	[Token(Token = "0x4000DBC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public static Action onEngagementStarted;

	[Token(Token = "0x4000DBD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public static Action onEngagementEnded;

	[Token(Token = "0x4000DBE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public static Action shadowsChanged;

	[Token(Token = "0x4000DBF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public DifficultySettings[] difficultySettings;

	[Token(Token = "0x4000DC0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Difficulty difficulty;

	[Token(Token = "0x4000DC1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public DifficultySettings currentDifficultySettings;

	[Token(Token = "0x4000DC2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[Header("Health System")]
	public bool healthSystemEnabled;

	[Token(Token = "0x4000DC3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public int minimumHealthSystemLevel;

	[NonSerialized]
	[Token(Token = "0x4000DC4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public int playerMaxHealth;

	[Token(Token = "0x4000DC5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	public int playerMaxArmor;

	[Token(Token = "0x4000DC6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public bool playerInvincible;

	[Token(Token = "0x4000DC7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Target target;

	[Token(Token = "0x4000DC8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public bool paused;

	[Token(Token = "0x4000DC9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA1")]
	public bool gameStarted;

	[Token(Token = "0x4000DCA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	public int levelIndex;

	[Token(Token = "0x4000DCB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public int numberOfEnemies;

	[Token(Token = "0x4000DCC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	public int numberOfEnemiesSpawned;

	[Token(Token = "0x4000DCD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public bool inGame;

	[Token(Token = "0x4000DCE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB1")]
	public bool bloodEnabled;

	[Token(Token = "0x4000DCF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public LevelStatistics currentLevelStatistics;

	[Token(Token = "0x4000DD0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private float multiKillTime;

	[Token(Token = "0x4000DD1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	private float timeSinceLastKill;

	[Token(Token = "0x4000DD2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public int maxMultiKill;

	[Token(Token = "0x4000DD3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	private int currentMultiKill;

	[Token(Token = "0x4000DD4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public Ragdoll lastKilledRagdoll;

	[Token(Token = "0x4000DD5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public Ragdoll lastHitRagdoll;

	[Token(Token = "0x4000DD6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public float levelTime;

	[Token(Token = "0x4000DD7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public Transform playerEyeXForm;

	[Token(Token = "0x4000DD8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public bool showAmmoCounters;

	[NonSerialized]
	[Token(Token = "0x4000DD9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public bool[] weaponIndexesEquipped;

	[Token(Token = "0x4000DDA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public Vector3 lastPlayerHitLocation;

	[Token(Token = "0x4000DDB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public Projectile lastProjectile;

	[Token(Token = "0x4000DDC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public int killPoints;

	[Token(Token = "0x4000DDD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
	public int accuracyBonusPoints;

	[Token(Token = "0x4000DDE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public int timeBonusPoints;

	[Token(Token = "0x4000DDF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
	public AccoladeType lastAccolade;

	[Token(Token = "0x4000DE0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	public int remainingEnemies;

	[Token(Token = "0x4000DE1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
	public bool manualTimescale;

	[Token(Token = "0x4000DE2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12D")]
	public bool levelClear;

	[Token(Token = "0x4000DE3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12E")]
	private bool endinglevel;

	[Token(Token = "0x4000DE4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12F")]
	public bool loading;

	[Token(Token = "0x4000DE5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public static int unmutedFrameRate;

	[Token(Token = "0x4000DE6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	public static float unmutedVolume;

	[Token(Token = "0x4000DE7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public static bool muted;

	[Token(Token = "0x4000DE8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	public bool camModeIsAction;

	[Token(Token = "0x4000DE9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
	public int lastScore;

	[Token(Token = "0x4000DEA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public bool timeScaling;

	[Token(Token = "0x4000DEB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
	private float timeLerp;

	[Token(Token = "0x4000DEC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private float timeLerpProgress;

	[Token(Token = "0x4000DED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
	public float timeDipDuration;

	[Token(Token = "0x4000DEE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public AnimationCurve timeCurve;

	[Token(Token = "0x4000DEF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	private AnimationCurve currentTimeCurve;

	[Token(Token = "0x4000DF0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	public AnimationCurve specialCurve;

	[Token(Token = "0x4000DF1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	private float currentdipDuration;

	[Token(Token = "0x4000DF2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public static Action<bool> onApplicationPause;

	[Token(Token = "0x17000140")]
	public int reboundValue
	{
		[Token(Token = "0x6000AA1")]
		[Address(RVA = "0xBFBF08", Offset = "0xBFBF08", VA = "0xBFBF08")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000141")]
	public int boomValue
	{
		[Token(Token = "0x6000AA2")]
		[Address(RVA = "0xBFBF10", Offset = "0xBFBF10", VA = "0xBFBF10")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000142")]
	public int headShotValue
	{
		[Token(Token = "0x6000AA3")]
		[Address(RVA = "0xBFBF18", Offset = "0xBFBF18", VA = "0xBFBF18")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000143")]
	public int standardKillValue
	{
		[Token(Token = "0x6000AA4")]
		[Address(RVA = "0xBFBF20", Offset = "0xBFBF20", VA = "0xBFBF20")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000144")]
	public int doubleKillValue
	{
		[Token(Token = "0x6000AA5")]
		[Address(RVA = "0xBFBF28", Offset = "0xBFBF28", VA = "0xBFBF28")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000145")]
	public int tripleKillValue
	{
		[Token(Token = "0x6000AA6")]
		[Address(RVA = "0xBFBF30", Offset = "0xBFBF30", VA = "0xBFBF30")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000146")]
	public int quadKillValue
	{
		[Token(Token = "0x6000AA7")]
		[Address(RVA = "0xBFBF38", Offset = "0xBFBF38", VA = "0xBFBF38")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000147")]
	public int monsterKillValue
	{
		[Token(Token = "0x6000AA8")]
		[Address(RVA = "0xBFBF40", Offset = "0xBFBF40", VA = "0xBFBF40")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000148")]
	public int legendaryKillValue
	{
		[Token(Token = "0x6000AA9")]
		[Address(RVA = "0xBFBF48", Offset = "0xBFBF48", VA = "0xBFBF48")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000149")]
	public int unstoppableValue
	{
		[Token(Token = "0x6000AAA")]
		[Address(RVA = "0xBFBF50", Offset = "0xBFBF50", VA = "0xBFBF50")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x6000A86")]
	[Address(RVA = "0xBFA6A0", Offset = "0xBFA6A0", VA = "0xBFA6A0")]
	public static void LoadGameData()
	{
	}

	[Token(Token = "0x6000A87")]
	[Address(RVA = "0xBFA6E8", Offset = "0xBFA6E8", VA = "0xBFA6E8")]
	private static void EnableGC()
	{
	}

	[Token(Token = "0x6000A88")]
	[Address(RVA = "0xBFA744", Offset = "0xBFA744", VA = "0xBFA744")]
	private static void DisableGC()
	{
	}

	[Token(Token = "0x6000A89")]
	[Address(RVA = "0xBFA750", Offset = "0xBFA750", VA = "0xBFA750")]
	public static void CollectGarbage()
	{
	}

	[Token(Token = "0x6000A8A")]
	[Address(RVA = "0xBFA7A0", Offset = "0xBFA7A0", VA = "0xBFA7A0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000A8B")]
	[Address(RVA = "0xBFAB0C", Offset = "0xBFAB0C", VA = "0xBFAB0C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000A8C")]
	[Address(RVA = "0xBFAD1C", Offset = "0xBFAD1C", VA = "0xBFAD1C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000A8D")]
	[Address(RVA = "0xBFAF2C", Offset = "0xBFAF2C", VA = "0xBFAF2C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A8E")]
	[Address(RVA = "0xBFA9F0", Offset = "0xBFA9F0", VA = "0xBFA9F0")]
	private void ConfigureRenderSettings()
	{
	}

	[Token(Token = "0x6000A8F")]
	[Address(RVA = "0xBFAFAC", Offset = "0xBFAFAC", VA = "0xBFAFAC")]
	public void ToggleSpectatorState()
	{
	}

	[Token(Token = "0x6000A90")]
	[Address(RVA = "0xBFB154", Offset = "0xBFB154", VA = "0xBFB154")]
	public void ToggleBlinkState()
	{
	}

	[Token(Token = "0x6000A91")]
	[Address(RVA = "0xBFB1D0", Offset = "0xBFB1D0", VA = "0xBFB1D0")]
	public void ToggleShadowState()
	{
	}

	[Token(Token = "0x6000A92")]
	[Address(RVA = "0xBFB2B0", Offset = "0xBFB2B0", VA = "0xBFB2B0")]
	public void SetShowAmmoCounters(bool state)
	{
	}

	[Token(Token = "0x6000A93")]
	[Address(RVA = "0xBFB360", Offset = "0xBFB360", VA = "0xBFB360")]
	public void SetDifficulty(Difficulty _difficulty)
	{
	}

	[Token(Token = "0x6000A94")]
	[Address(RVA = "0xBFB3B8", Offset = "0xBFB3B8", VA = "0xBFB3B8")]
	public List<GunInfo> GetEquippedGuns()
	{
		return null;
	}

	[Token(Token = "0x6000A95")]
	[Address(RVA = "0xBFB6A0", Offset = "0xBFB6A0", VA = "0xBFB6A0")]
	private void FocusLost()
	{
	}

	[Token(Token = "0x6000A96")]
	[Address(RVA = "0xBFB760", Offset = "0xBFB760", VA = "0xBFB760")]
	private void FocusAcquired()
	{
	}

	[Token(Token = "0x6000A97")]
	[Address(RVA = "0xBFB7FC", Offset = "0xBFB7FC", VA = "0xBFB7FC")]
	public void EngagementStarted()
	{
	}

	[Token(Token = "0x6000A98")]
	[Address(RVA = "0xBFB928", Offset = "0xBFB928", VA = "0xBFB928")]
	public void EngagementEnded()
	{
	}

	[Token(Token = "0x6000A99")]
	[Address(RVA = "0xBFBA54", Offset = "0xBFBA54", VA = "0xBFBA54")]
	public void PlayerHit(Projectile projectile)
	{
	}

	[Token(Token = "0x6000A9A")]
	[Address(RVA = "0xBFBAFC", Offset = "0xBFBAFC", VA = "0xBFBAFC")]
	public void PlayerHitObject()
	{
	}

	[Token(Token = "0x6000A9B")]
	[Address(RVA = "0xBFBB90", Offset = "0xBFBB90", VA = "0xBFBB90")]
	public void PlayerFired()
	{
	}

	[Token(Token = "0x6000A9C")]
	[Address(RVA = "0xBFBC24", Offset = "0xBFBC24", VA = "0xBFBC24")]
	public void PlayerDied()
	{
	}

	[Token(Token = "0x6000A9D")]
	[Address(RVA = "0xBFBCE0", Offset = "0xBFBCE0", VA = "0xBFBCE0")]
	public void AIFired()
	{
	}

	[Token(Token = "0x6000A9E")]
	[Address(RVA = "0xBFBD58", Offset = "0xBFBD58", VA = "0xBFBD58")]
	public void AISawPlayer()
	{
	}

	[Token(Token = "0x6000A9F")]
	[Address(RVA = "0xBFBDB0", Offset = "0xBFBDB0", VA = "0xBFBDB0")]
	public void PlayerEquippedChanged(bool _equipped, GunData _data)
	{
	}

	[Token(Token = "0x6000AA0")]
	[Address(RVA = "0xBFBE40", Offset = "0xBFBE40", VA = "0xBFBE40")]
	public void DestroyEquippedWeapons(bool destroyItems = true)
	{
	}

	[Token(Token = "0x6000AAB")]
	[Address(RVA = "0xBFBF58", Offset = "0xBFBF58", VA = "0xBFBF58")]
	public void AddKill(KillType killType, bool ricochet, bool headshot)
	{
	}

	[Token(Token = "0x6000AAC")]
	[Address(RVA = "0xBFC44C", Offset = "0xBFC44C", VA = "0xBFC44C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000AAD")]
	[Address(RVA = "0xBFC548", Offset = "0xBFC548", VA = "0xBFC548")]
	public static void MuteGame()
	{
	}

	[Token(Token = "0x6000AAE")]
	[Address(RVA = "0xBFC614", Offset = "0xBFC614", VA = "0xBFC614")]
	public static void UnmuteGame()
	{
	}

	[Token(Token = "0x6000AAF")]
	[Address(RVA = "0xBFC6D8", Offset = "0xBFC6D8", VA = "0xBFC6D8")]
	public void Pause()
	{
	}

	[Token(Token = "0x6000AB0")]
	[Address(RVA = "0xBFC6E0", Offset = "0xBFC6E0", VA = "0xBFC6E0")]
	public void Unpause()
	{
	}

	[Token(Token = "0x6000AB1")]
	[Address(RVA = "0xBFB6A8", Offset = "0xBFB6A8", VA = "0xBFB6A8")]
	public void Pause(bool _paused)
	{
	}

	[Token(Token = "0x6000AB2")]
	[Address(RVA = "0xBFC6E8", Offset = "0xBFC6E8", VA = "0xBFC6E8")]
	public void ReturnHome()
	{
	}

	[Token(Token = "0x6000AB3")]
	[Address(RVA = "0xBFC844", Offset = "0xBFC844", VA = "0xBFC844")]
	public void LoadTutorial()
	{
	}

	[Token(Token = "0x6000AB4")]
	[Address(RVA = "0xBFC8A4", Offset = "0xBFC8A4", VA = "0xBFC8A4")]
	public void LoadFiringRange()
	{
	}

	[Token(Token = "0x6000AB5")]
	[Address(RVA = "0xBFC904", Offset = "0xBFC904", VA = "0xBFC904")]
	public void LoadLevel()
	{
	}

	[Token(Token = "0x6000AB6")]
	[Address(RVA = "0xBFB034", Offset = "0xBFB034", VA = "0xBFB034")]
	public void ToggleCameraMode()
	{
	}

	[Token(Token = "0x6000AB7")]
	[Address(RVA = "0xBFC96C", Offset = "0xBFC96C", VA = "0xBFC96C")]
	public void StartLevel()
	{
	}

	[Token(Token = "0x6000AB8")]
	[Address(RVA = "0xBFCC98", Offset = "0xBFCC98", VA = "0xBFCC98")]
	public void RestartLevel(bool fade = true)
	{
	}

	[Token(Token = "0x6000AB9")]
	[Address(RVA = "0xBFCD0C", Offset = "0xBFCD0C", VA = "0xBFCD0C")]
	public int GetAccuracyBonus()
	{
		return default(int);
	}

	[Token(Token = "0x6000ABA")]
	[Address(RVA = "0xBFCD90", Offset = "0xBFCD90", VA = "0xBFCD90")]
	public int GetTimeBonus()
	{
		return default(int);
	}

	[Token(Token = "0x6000ABB")]
	[Address(RVA = "0xBFCE48", Offset = "0xBFCE48", VA = "0xBFCE48")]
	public void UpdateScore()
	{
	}

	[Token(Token = "0x6000ABC")]
	[Address(RVA = "0xBFD2BC", Offset = "0xBFD2BC", VA = "0xBFD2BC")]
	public void LevelComplete(bool autoLoadHome = false)
	{
	}

	[Token(Token = "0x6000ABD")]
	[Address(RVA = "0xBFDA54", Offset = "0xBFDA54", VA = "0xBFDA54")]
	[IteratorStateMachine(typeof(<AutoLoadHomeRoutine>d__144))]
	private IEnumerator AutoLoadHomeRoutine()
	{
		return null;
	}

	[Token(Token = "0x6000ABE")]
	[Address(RVA = "0xBFC4C8", Offset = "0xBFC4C8", VA = "0xBFC4C8")]
	private void TimeScaling()
	{
	}

	[Token(Token = "0x6000ABF")]
	[Address(RVA = "0xBFB784", Offset = "0xBFB784", VA = "0xBFB784")]
	public void TimeDip(float delay = 0f, [Optional] AnimationCurve alternateCurve)
	{
	}

	[Token(Token = "0x6000AC0")]
	[Address(RVA = "0xBFDAE4", Offset = "0xBFDAE4", VA = "0xBFDAE4")]
	[IteratorStateMachine(typeof(<TimeDipDelay>d__155))]
	public IEnumerator TimeDipDelay(float delay)
	{
		return null;
	}

	[Token(Token = "0x6000AC1")]
	[Address(RVA = "0xBFDB84", Offset = "0xBFDB84", VA = "0xBFDB84")]
	private void OnApplicationPause(bool pauseStatus)
	{
	}

	[Token(Token = "0x6000AC2")]
	[Address(RVA = "0xBFDC1C", Offset = "0xBFDC1C", VA = "0xBFDC1C")]
	public GameManager()
	{
	}
}
[Token(Token = "0x2000219")]
public class KillPhilGlobal : Global
{
	[Token(Token = "0x6000AD2")]
	[Address(RVA = "0xBFA8EC", Offset = "0xBFA8EC", VA = "0xBFA8EC")]
	public static void Create()
	{
	}

	[Token(Token = "0x6000AD3")]
	[Address(RVA = "0xBFDFD0", Offset = "0xBFDFD0", VA = "0xBFDFD0", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000AD4")]
	[Address(RVA = "0xBFE050", Offset = "0xBFE050", VA = "0xBFE050", Slot = "7")]
	public override string[] GetAdditionalCommonTranslationFiles()
	{
		return null;
	}

	[Token(Token = "0x6000AD5")]
	[Address(RVA = "0xBFE174", Offset = "0xBFE174", VA = "0xBFE174")]
	public static void GoToStore()
	{
	}

	[Token(Token = "0x6000AD6")]
	[Address(RVA = "0xBFE1E4", Offset = "0xBFE1E4", VA = "0xBFE1E4")]
	public KillPhilGlobal()
	{
	}
}
[Token(Token = "0x200021A")]
[RequireComponent(typeof(Text))]
public class TranslationFontSize : MonoBehaviour
{
	[Token(Token = "0x4000DFC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Text targetText;

	[Token(Token = "0x4000DFD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float scale;

	[Token(Token = "0x6000AD7")]
	[Address(RVA = "0xBFE23C", Offset = "0xBFE23C", VA = "0xBFE23C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000AD8")]
	[Address(RVA = "0xBFE4A4", Offset = "0xBFE4A4", VA = "0xBFE4A4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000AD9")]
	[Address(RVA = "0xBFE4C4", Offset = "0xBFE4C4", VA = "0xBFE4C4")]
	private void UpdateText()
	{
	}

	[Token(Token = "0x6000ADA")]
	[Address(RVA = "0xBFE580", Offset = "0xBFE580", VA = "0xBFE580")]
	public TranslationFontSize()
	{
	}
}
[Token(Token = "0x200021B")]
public class TranslationManager : MonoBehaviour
{
	[Token(Token = "0x4000DFE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static TranslationManager _instance;

	[Token(Token = "0x4000DFF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static Dictionary<string, string> englishTable;

	[Token(Token = "0x4000E00")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool forceNotEnglish;

	[Token(Token = "0x4000E01")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool forceLanguage;

	[Token(Token = "0x4000E02")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	public bool debugTranslation;

	[Token(Token = "0x4000E03")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public SystemLanguage debugLanguage;

	[Token(Token = "0x4000E04")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static bool initialized;

	[Token(Token = "0x4000E05")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static Dictionary<string, string> lookupTable;

	[Token(Token = "0x4000E06")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public static Action onUpdateTranslationTable;

	[Token(Token = "0x4000E07")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static string _Language;

	[Token(Token = "0x4000E08")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private CultureInfo _CultureInfo;

	[Token(Token = "0x1700014E")]
	public static bool isEnglish
	{
		[Token(Token = "0x6000ADB")]
		[Address(RVA = "0xBFE380", Offset = "0xBFE380", VA = "0xBFE380")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700014F")]
	public static TranslationManager instance
	{
		[Token(Token = "0x6000ADE")]
		[Address(RVA = "0xBFEB68", Offset = "0xBFEB68", VA = "0xBFEB68")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000150")]
	public static string Language
	{
		[Token(Token = "0x6000AE9")]
		[Address(RVA = "0xBFFD38", Offset = "0xBFFD38", VA = "0xBFFD38")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000151")]
	public CultureInfo CultureInfo
	{
		[Token(Token = "0x6000AEC")]
		[Address(RVA = "0xBFFD98", Offset = "0xBFFD98", VA = "0xBFFD98")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000ADC")]
	[Address(RVA = "0xBFE590", Offset = "0xBFE590", VA = "0xBFE590")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000ADD")]
	[Address(RVA = "0xBFE5E0", Offset = "0xBFE5E0", VA = "0xBFE5E0")]
	private void Initalize()
	{
	}

	[Token(Token = "0x6000ADF")]
	[Address(RVA = "0xBFEBB0", Offset = "0xBFEBB0", VA = "0xBFEBB0")]
	public bool Has(string key)
	{
		return default(bool);
	}

	[Token(Token = "0x6000AE0")]
	[Address(RVA = "0xBFEC88", Offset = "0xBFEC88", VA = "0xBFEC88")]
	public string Get(string key)
	{
		return null;
	}

	[Token(Token = "0x6000AE1")]
	[Address(RVA = "0xBFEE24", Offset = "0xBFEE24", VA = "0xBFEE24")]
	public string Str(string input)
	{
		return null;
	}

	[Token(Token = "0x6000AE2")]
	[Address(RVA = "0xBFEF98", Offset = "0xBFEF98", VA = "0xBFEF98")]
	private static Dictionary<string, string> TextAssetToTable(string filepath)
	{
		return null;
	}

	[Token(Token = "0x6000AE3")]
	[Address(RVA = "0xBFF058", Offset = "0xBFF058", VA = "0xBFF058")]
	private static Dictionary<string, string> JsonToTable(string js)
	{
		return null;
	}

	[Token(Token = "0x6000AE4")]
	[Address(RVA = "0xBFF248", Offset = "0xBFF248", VA = "0xBFF248")]
	private static void LoadTranslationTable(string language)
	{
	}

	[Token(Token = "0x6000AE5")]
	[Address(RVA = "0xBFF738", Offset = "0xBFF738", VA = "0xBFF738")]
	private static void ClearTranslationTable()
	{
	}

	[Token(Token = "0x6000AE6")]
	[Address(RVA = "0xBFF5B8", Offset = "0xBFF5B8", VA = "0xBFF5B8")]
	private static bool UpdateTranslationTable(Dictionary<string, string> newTable, Dictionary<string, string> oldTable)
	{
		return default(bool);
	}

	[Token(Token = "0x6000AE7")]
	[Address(RVA = "0xBFE8C0", Offset = "0xBFE8C0", VA = "0xBFE8C0")]
	public static void BuildTranslationTable()
	{
	}

	[Token(Token = "0x6000AE8")]
	[Address(RVA = "0xBFF7A8", Offset = "0xBFF7A8", VA = "0xBFF7A8")]
	public static string[] GetValidLanguages()
	{
		return null;
	}

	[Token(Token = "0x6000AEA")]
	[Address(RVA = "0xBFFD80", Offset = "0xBFFD80", VA = "0xBFFD80")]
	public SystemLanguage GetLanguage()
	{
		return default(SystemLanguage);
	}

	[Token(Token = "0x6000AEB")]
	[Address(RVA = "0xBFE698", Offset = "0xBFE698", VA = "0xBFE698")]
	private string SetupLanguage()
	{
		return null;
	}

	[Token(Token = "0x6000AED")]
	[Address(RVA = "0xBFFDE4", Offset = "0xBFFDE4", VA = "0xBFFDE4")]
	public string Format(string key, params object[] args)
	{
		return null;
	}

	[Token(Token = "0x6000AEE")]
	[Address(RVA = "0xBFFE68", Offset = "0xBFFE68", VA = "0xBFFE68")]
	public TranslationManager()
	{
	}
}
[Serializable]
[Token(Token = "0x200021C")]
public class TranslationSwapperData
{
	[Token(Token = "0x4000E09")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Font key;

	[Token(Token = "0x4000E0A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Font font;

	[Token(Token = "0x6000AEF")]
	[Address(RVA = "0xBFFE70", Offset = "0xBFFE70", VA = "0xBFFE70")]
	public TranslationSwapperData()
	{
	}
}
[Token(Token = "0x200021D")]
[CreateAssetMenu(fileName = "TranslationSwapperDatabase", menuName = "Settings/TranslationSwapperDatabase")]
public class TranslationSwapperDatabase : ScriptableObject
{
	[Token(Token = "0x4000E0B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static TranslationSwapperDatabase _instance;

	[Token(Token = "0x4000E0C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private TranslationSwapperData[] data_;

	[Token(Token = "0x4000E0D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Dictionary<Font, TranslationSwapperData> dict;

	[Token(Token = "0x17000152")]
	private static TranslationSwapperDatabase instance
	{
		[Token(Token = "0x6000AF0")]
		[Address(RVA = "0xBFFE78", Offset = "0xBFFE78", VA = "0xBFFE78")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000AF1")]
	[Address(RVA = "0xBFFFF0", Offset = "0xBFFFF0", VA = "0xBFFFF0")]
	public static Font GetSwappedFont(Font key)
	{
		return null;
	}

	[Token(Token = "0x6000AF2")]
	[Address(RVA = "0xBFFF5C", Offset = "0xBFFF5C", VA = "0xBFFF5C")]
	private void Sort()
	{
	}

	[Token(Token = "0x6000AF3")]
	[Address(RVA = "0xC00068", Offset = "0xC00068", VA = "0xC00068")]
	public TranslationSwapperDatabase()
	{
	}
}
[Token(Token = "0x200021E")]
[RequireComponent(typeof(TextMeshProUGUI))]
public class TranslationText : MonoBehaviour
{
	[Token(Token = "0x200021F")]
	public enum TextCase
	{
		[Token(Token = "0x4000E12")]
		None,
		[Token(Token = "0x4000E13")]
		Upper,
		[Token(Token = "0x4000E14")]
		Lower
	}

	[Token(Token = "0x2000220")]
	[CompilerGenerated]
	private sealed class <KeepTryingToUpdateText>d__8 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000E15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000E16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000E17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TranslationText <>4__this;

		[Token(Token = "0x17000153")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000AFF")]
			[Address(RVA = "0xC008D8", Offset = "0xC008D8", VA = "0xC008D8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000154")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000B01")]
			[Address(RVA = "0xC00920", Offset = "0xC00920", VA = "0xC00920", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000AFC")]
		[Address(RVA = "0xC005A0", Offset = "0xC005A0", VA = "0xC005A0")]
		[DebuggerHidden]
		public <KeepTryingToUpdateText>d__8(int <>1__state)
		{
		}

		[Token(Token = "0x6000AFD")]
		[Address(RVA = "0xC007C4", Offset = "0xC007C4", VA = "0xC007C4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000AFE")]
		[Address(RVA = "0xC007C8", Offset = "0xC007C8", VA = "0xC007C8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B00")]
		[Address(RVA = "0xC008E0", Offset = "0xC008E0", VA = "0xC008E0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000E0E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private TextMeshProUGUI targetText;

	[Token(Token = "0x4000E0F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string key;

	[Token(Token = "0x4000E10")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TextCase textCase;

	[Token(Token = "0x6000AF4")]
	[Address(RVA = "0xC000E4", Offset = "0xC000E4", VA = "0xC000E4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000AF5")]
	[Address(RVA = "0xC00208", Offset = "0xC00208", VA = "0xC00208")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000AF6")]
	[Address(RVA = "0xC002F4", Offset = "0xC002F4", VA = "0xC002F4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000AF7")]
	[Address(RVA = "0xC003E0", Offset = "0xC003E0", VA = "0xC003E0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000AF8")]
	[Address(RVA = "0xC00538", Offset = "0xC00538", VA = "0xC00538")]
	[IteratorStateMachine(typeof(<KeepTryingToUpdateText>d__8))]
	private IEnumerator KeepTryingToUpdateText()
	{
		return null;
	}

	[Token(Token = "0x6000AF9")]
	[Address(RVA = "0xC005C8", Offset = "0xC005C8", VA = "0xC005C8")]
	public string GetTranslationText()
	{
		return null;
	}

	[Token(Token = "0x6000AFA")]
	[Address(RVA = "0xC0049C", Offset = "0xC0049C", VA = "0xC0049C")]
	private void UpdateText()
	{
	}

	[Token(Token = "0x6000AFB")]
	[Address(RVA = "0xC007BC", Offset = "0xC007BC", VA = "0xC007BC")]
	public TranslationText()
	{
	}
}
[Token(Token = "0x2000221")]
[RequireComponent(typeof(TextMeshProUGUI))]
public class TranslationTextFormatted : MonoBehaviour
{
	[Token(Token = "0x2000222")]
	[CompilerGenerated]
	private sealed class <KeepTryingToUpdateText>d__8 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000E1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000E1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000E1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TranslationTextFormatted <>4__this;

		[Token(Token = "0x17000155")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000B0C")]
			[Address(RVA = "0xC0118C", Offset = "0xC0118C", VA = "0xC0118C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000156")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000B0E")]
			[Address(RVA = "0xC011D4", Offset = "0xC011D4", VA = "0xC011D4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B09")]
		[Address(RVA = "0xC01048", Offset = "0xC01048", VA = "0xC01048")]
		[DebuggerHidden]
		public <KeepTryingToUpdateText>d__8(int <>1__state)
		{
		}

		[Token(Token = "0x6000B0A")]
		[Address(RVA = "0xC01078", Offset = "0xC01078", VA = "0xC01078", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000B0B")]
		[Address(RVA = "0xC0107C", Offset = "0xC0107C", VA = "0xC0107C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B0D")]
		[Address(RVA = "0xC01194", Offset = "0xC01194", VA = "0xC01194", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000E18")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private TextMeshProUGUI targetText;

	[Token(Token = "0x4000E19")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string[] keys;

	[Token(Token = "0x4000E1A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private string startText;

	[Token(Token = "0x4000E1B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public TranslationText.TextCase textCase;

	[Token(Token = "0x6000B02")]
	[Address(RVA = "0xC00928", Offset = "0xC00928", VA = "0xC00928")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000B03")]
	[Address(RVA = "0xC00A64", Offset = "0xC00A64", VA = "0xC00A64")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000B04")]
	[Address(RVA = "0xC00B50", Offset = "0xC00B50", VA = "0xC00B50")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000B05")]
	[Address(RVA = "0xC00C3C", Offset = "0xC00C3C", VA = "0xC00C3C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000B06")]
	[Address(RVA = "0xC00FE0", Offset = "0xC00FE0", VA = "0xC00FE0")]
	[IteratorStateMachine(typeof(<KeepTryingToUpdateText>d__8))]
	private IEnumerator KeepTryingToUpdateText()
	{
		return null;
	}

	[Token(Token = "0x6000B07")]
	[Address(RVA = "0xC00CF8", Offset = "0xC00CF8", VA = "0xC00CF8")]
	private void UpdateText()
	{
	}

	[Token(Token = "0x6000B08")]
	[Address(RVA = "0xC01070", Offset = "0xC01070", VA = "0xC01070")]
	public TranslationTextFormatted()
	{
	}
}
[Token(Token = "0x2000224")]
public class CloudSettings
{
	[Token(Token = "0x4000E21")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Action onRefresh;

	[Token(Token = "0x6000B12")]
	[Address(RVA = "0xC012A0", Offset = "0xC012A0", VA = "0xC012A0")]
	public static void Refresh()
	{
	}

	[Token(Token = "0x6000B13")]
	[Address(RVA = "0xBFE04C", Offset = "0xBFE04C", VA = "0xBFE04C")]
	public static void Setup()
	{
	}

	[Token(Token = "0x6000B14")]
	[Address(RVA = "0xC012A4", Offset = "0xC012A4", VA = "0xC012A4")]
	public static int GetInt(string key, int defaultValue)
	{
		return default(int);
	}

	[Token(Token = "0x6000B15")]
	[Address(RVA = "0xC012AC", Offset = "0xC012AC", VA = "0xC012AC")]
	public static float GetFloat(string key, float defaultValue)
	{
		return default(float);
	}

	[Token(Token = "0x6000B16")]
	[Address(RVA = "0xC012B0", Offset = "0xC012B0", VA = "0xC012B0")]
	public static string GetString(string key, string defaultValue)
	{
		return null;
	}

	[Token(Token = "0x6000B17")]
	[Address(RVA = "0xC012B8", Offset = "0xC012B8", VA = "0xC012B8")]
	public static bool GetBoolean(string key, bool defaultValue)
	{
		return default(bool);
	}

	[Token(Token = "0x6000B18")]
	[Address(RVA = "0xC012C0", Offset = "0xC012C0", VA = "0xC012C0")]
	public CloudSettings()
	{
	}
}
[Token(Token = "0x2000225")]
public class FileCache
{
	[Token(Token = "0x4000E22")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private string name;

	[Token(Token = "0x4000E23")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private string version;

	[Token(Token = "0x4000E24")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private string cachePath;

	[Token(Token = "0x4000E25")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool cleaned;

	[Token(Token = "0x6000B19")]
	[Address(RVA = "0xC012C8", Offset = "0xC012C8", VA = "0xC012C8")]
	public FileCache(string name, string version)
	{
	}

	[Token(Token = "0x6000B1A")]
	[Address(RVA = "0xC01348", Offset = "0xC01348", VA = "0xC01348")]
	public static string GetParentCacheDir()
	{
		return null;
	}

	[Token(Token = "0x6000B1B")]
	[Address(RVA = "0xC017E0", Offset = "0xC017E0", VA = "0xC017E0")]
	public string GetPath()
	{
		return null;
	}

	[Token(Token = "0x6000B1C")]
	[Address(RVA = "0xC01350", Offset = "0xC01350", VA = "0xC01350")]
	public void Clean()
	{
	}

	[Token(Token = "0x6000B1D")]
	[Address(RVA = "0xC018D8", Offset = "0xC018D8", VA = "0xC018D8")]
	public FileStream OpenWrite(string fileName, FileMode mode = FileMode.Create)
	{
		return null;
	}

	[Token(Token = "0x6000B1E")]
	[Address(RVA = "0xC01A44", Offset = "0xC01A44", VA = "0xC01A44")]
	public void Store(string fileName, Persist.SaveDataHandler handler)
	{
	}

	[Token(Token = "0x6000B1F")]
	[Address(RVA = "0xC021B0", Offset = "0xC021B0", VA = "0xC021B0")]
	public bool Load(string fileName, Persist.LoadDataHandler handler)
	{
		return default(bool);
	}
}
[Token(Token = "0x2000226")]
public static class Persist
{
	[Token(Token = "0x2000227")]
	public delegate void SaveDataHandler(Stream output);

	[Token(Token = "0x2000228")]
	public delegate bool LoadDataHandler(Stream input);

	[Token(Token = "0x4000E26")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static byte[] keyMask;

	[Token(Token = "0x4000E27")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static byte[] maskedKey;

	[Token(Token = "0x6000B20")]
	[Address(RVA = "0xC02524", Offset = "0xC02524", VA = "0xC02524")]
	internal static byte[] GetCryptoKey()
	{
		return null;
	}

	[Token(Token = "0x6000B21")]
	[Address(RVA = "0xC02604", Offset = "0xC02604", VA = "0xC02604")]
	public static bool SaveDataWithBackupSync(string filePath, string tempPath, string backupPath, SaveDataHandler saveData, bool encrypted = false)
	{
		return default(bool);
	}

	[Token(Token = "0x6000B22")]
	[Address(RVA = "0xC02748", Offset = "0xC02748", VA = "0xC02748")]
	public static bool SaveDataWithBackup(string filePath, string tempPath, string backupPath, SaveDataHandler saveData, bool encrypted = false)
	{
		return default(bool);
	}

	[Token(Token = "0x6000B23")]
	[Address(RVA = "0xC029E4", Offset = "0xC029E4", VA = "0xC029E4")]
	public static bool SaveDataWithBackup(string filePath, string tempPath, string backupPath, byte[] buffer, bool encrypted = false)
	{
		return default(bool);
	}

	[Token(Token = "0x6000B24")]
	[Address(RVA = "0xC02CC8", Offset = "0xC02CC8", VA = "0xC02CC8")]
	public static byte[] EncryptBytes(byte[] buffer)
	{
		return null;
	}

	[Token(Token = "0x6000B25")]
	[Address(RVA = "0xC01BA4", Offset = "0xC01BA4", VA = "0xC01BA4")]
	public static bool SaveDataToPath(string filePath, SaveDataHandler saveData, bool encrypted = false)
	{
		return default(bool);
	}

	[Token(Token = "0x6000B26")]
	[Address(RVA = "0xC032A4", Offset = "0xC032A4", VA = "0xC032A4")]
	public static bool LoadDataOrBackup(string filePath, string tempPath, string backupPath, LoadDataHandler loadData, bool encrypted = false)
	{
		return default(bool);
	}

	[Token(Token = "0x6000B27")]
	[Address(RVA = "0xC02258", Offset = "0xC02258", VA = "0xC02258")]
	public static bool LoadDataFromPath(string filePath, LoadDataHandler loadData, bool encrypted = false)
	{
		return default(bool);
	}

	[Token(Token = "0x6000B28")]
	[Address(RVA = "0xC0392C", Offset = "0xC0392C", VA = "0xC0392C")]
	public static bool LoadDataFromBytes(byte[] data, LoadDataHandler loadData, bool encrypted = false)
	{
		return default(bool);
	}

	[Token(Token = "0x6000B29")]
	[Address(RVA = "0xC033BC", Offset = "0xC033BC", VA = "0xC033BC")]
	public static bool LoadDataFromStream(Stream inStream, LoadDataHandler loadData, bool encrypted = false)
	{
		return default(bool);
	}

	[Token(Token = "0x6000B2A")]
	[Address(RVA = "0xC03B9C", Offset = "0xC03B9C", VA = "0xC03B9C")]
	public static byte[] ReadAllBytes(string filePath, bool encrypted = false)
	{
		return null;
	}

	[Token(Token = "0x6000B2B")]
	[Address(RVA = "0xC03DB8", Offset = "0xC03DB8", VA = "0xC03DB8")]
	public static bool WriteAllBytes(string filePath, byte[] bytes, bool encrypted = false)
	{
		return default(bool);
	}

	[Token(Token = "0x6000B2C")]
	[Address(RVA = "0xC03EA4", Offset = "0xC03EA4", VA = "0xC03EA4")]
	public static string ReadAllText(string filePath, bool encrypted = false)
	{
		return null;
	}

	[Token(Token = "0x6000B2D")]
	[Address(RVA = "0xC03F94", Offset = "0xC03F94", VA = "0xC03F94")]
	public static bool WriteAllText(string filePath, string contents, bool encrypted = false)
	{
		return default(bool);
	}

	[Token(Token = "0x6000B2E")]
	[Address(RVA = "0xC04080", Offset = "0xC04080", VA = "0xC04080")]
	public static YieldInstruction ReadAllBytesAsync(string filePath, Action<byte[]> callback, bool encrypted = false)
	{
		return null;
	}

	[Token(Token = "0x6000B2F")]
	[Address(RVA = "0xC041E8", Offset = "0xC041E8", VA = "0xC041E8")]
	public static YieldInstruction ReadAllTextAsync(string filePath, Action<string> callback, bool encrypted = false)
	{
		return null;
	}

	[Token(Token = "0x6000B30")]
	[Address(RVA = "0xC04350", Offset = "0xC04350", VA = "0xC04350")]
	public static YieldInstruction ReadByteRangeAsync(string filePath, int offset, int length, Action<byte[]> callback)
	{
		return null;
	}
}
[Token(Token = "0x2000231")]
public static class SpungeExtensions
{
	[Token(Token = "0x2000232")]
	public class WaitForLerp : CustomYieldInstruction
	{
		[Token(Token = "0x4000E40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private float t;

		[Token(Token = "0x4000E41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float speed;

		[Token(Token = "0x4000E42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Action<float> onUpdate;

		[Token(Token = "0x17000157")]
		public override bool keepWaiting
		{
			[Token(Token = "0x6000BA7")]
			[Address(RVA = "0xC08EF0", Offset = "0xC08EF0", VA = "0xC08EF0", Slot = "7")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000BA6")]
		[Address(RVA = "0xC08E94", Offset = "0xC08E94", VA = "0xC08E94")]
		public WaitForLerp(Action<float> onUpdate, float duration)
		{
		}
	}

	[Token(Token = "0x4000E3F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Dictionary<Type, Action<UIBehaviour, object>> UIFillRequests;

	[Token(Token = "0x6000B4E")]
	[Address(RVA = "0xC050A4", Offset = "0xC050A4", VA = "0xC050A4")]
	public static Vector3 xz(this Vector3 value)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000B4F")]
	[Address(RVA = "0xC050AC", Offset = "0xC050AC", VA = "0xC050AC")]
	public static Color SetAlpha(this Color color, float alpha)
	{
		return default(Color);
	}

	[Token(Token = "0x6000B50")]
	[Address(RVA = "0xC050B4", Offset = "0xC050B4", VA = "0xC050B4")]
	public static Color[] GetSampledColorCircle(int sampleCount, Color startColor)
	{
		return null;
	}

	[Token(Token = "0x6000B51")]
	[Address(RVA = "0xC05234", Offset = "0xC05234", VA = "0xC05234")]
	public static Color[] GetSampledColorCircle(int sampleCount, float startH, float S, float V)
	{
		return null;
	}

	[Token(Token = "0x6000B52")]
	[Address(RVA = "0xC05174", Offset = "0xC05174", VA = "0xC05174")]
	public static void SampleColorCircle(Color startColor, ref Color[] buffer)
	{
	}

	[Token(Token = "0x6000B53")]
	[Address(RVA = "0xC052F4", Offset = "0xC052F4", VA = "0xC052F4")]
	public static void SampleColorCircle(float startH, float S, float V, ref Color[] sampleBuffer)
	{
	}

	[Token(Token = "0x6000B54")]
	[Address(RVA = "0xC053BC", Offset = "0xC053BC", VA = "0xC053BC")]
	public static Color HSVShift(this Color32 baseColour, float hueOffset, float hue, float saturation, float value, float reflection)
	{
		return default(Color);
	}

	[Token(Token = "0x6000B55")]
	[Address(RVA = "0xC056F4", Offset = "0xC056F4", VA = "0xC056F4")]
	public static Color HSVShift(this Color32 baseColour, float hueOffset, float hueMultiplier, float hue, float saturation, float value, float reflection)
	{
		return default(Color);
	}

	[Token(Token = "0x6000B56")]
	[Address(RVA = "0xC05A44", Offset = "0xC05A44", VA = "0xC05A44")]
	public static string ToOrdinalString(this int number, string format = "{0}{1}")
	{
		return null;
	}

	[Token(Token = "0x6000B57")]
	[Address(RVA = "0xC05BCC", Offset = "0xC05BCC", VA = "0xC05BCC")]
	public static string PascalToTitleCase(this string text)
	{
		return null;
	}

	[Token(Token = "0x6000B58")]
	[Address(RVA = "0xC05D58", Offset = "0xC05D58", VA = "0xC05D58")]
	public static void SetVelocity(this ParticleSystem pSystem, Vector3 velocity)
	{
	}

	[Token(Token = "0x6000B59")]
	[Address(RVA = "0xC05E50", Offset = "0xC05E50", VA = "0xC05E50")]
	public static void SetSolidColor(this Gradient gradient, Color color)
	{
	}

	[Token(Token = "0x6000B5A")]
	[Address(RVA = "0xC05F8C", Offset = "0xC05F8C", VA = "0xC05F8C")]
	public static Gradient SolidColorGradient(Color color)
	{
		return null;
	}

	[Token(Token = "0x6000B5B")]
	[Address(RVA = "0xC060FC", Offset = "0xC060FC", VA = "0xC060FC")]
	public static Gradient ColorGradient(float alpha, params Vector4[] colorTimes)
	{
		return null;
	}

	[Token(Token = "0x6000B5C")]
	[Address(RVA = "0xC062E4", Offset = "0xC062E4", VA = "0xC062E4")]
	public static Gradient AlphaGradient(Color color, params Vector2[] alphaTimes)
	{
		return null;
	}

	[Token(Token = "0x6000B5D")]
	public static T Get<T>(this Component root, [Optional] string path)
	{
		return (T)null;
	}

	[Token(Token = "0x6000B5E")]
	public static T Get<T>(this GameObject root, [Optional] string path)
	{
		return (T)null;
	}

	[Token(Token = "0x6000B5F")]
	public static T[] GetChildren<T>(this Component root, [Optional] string path, bool includeInactive = false) where T : Component
	{
		return null;
	}

	[Token(Token = "0x6000B60")]
	public static bool TryGet<T>(this GameObject obj, out T component) where T : Component
	{
		return default(bool);
	}

	[Token(Token = "0x6000B61")]
	public static bool TryGet<T>(this Component obj, out T component) where T : Component
	{
		return default(bool);
	}

	[Token(Token = "0x6000B62")]
	public static void TryComponentAction<T>(this GameObject obj, Action<T> action) where T : Component
	{
	}

	[Token(Token = "0x6000B63")]
	public static void TryComponentAction<T>(this Component obj, Action<T> action) where T : Component
	{
	}

	[Token(Token = "0x6000B64")]
	public static void TryComponentActionOnParent<T>(this GameObject obj, Action<T> action) where T : Component
	{
	}

	[Token(Token = "0x6000B65")]
	public static void TryComponentActionOnParent<T>(this Component obj, Action<T> action) where T : Component
	{
	}

	[Token(Token = "0x6000B66")]
	public static void TryComponentActionOnChildren<T>(this Component obj, Action<T> action, bool includeInactive = false) where T : Component
	{
	}

	[Token(Token = "0x6000B67")]
	[Address(RVA = "0xC06530", Offset = "0xC06530", VA = "0xC06530")]
	public static bool IsPrefab(this Component obj)
	{
		return default(bool);
	}

	[Token(Token = "0x6000B68")]
	[Address(RVA = "0xC065A0", Offset = "0xC065A0", VA = "0xC065A0")]
	public static bool isPrefab(this GameObject gameObject)
	{
		return default(bool);
	}

	[Token(Token = "0x6000B69")]
	[Address(RVA = "0xC065D8", Offset = "0xC065D8", VA = "0xC065D8")]
	public static bool HasLayer(this LayerMask mask, int layer)
	{
		return default(bool);
	}

	[Token(Token = "0x6000B6A")]
	[Address(RVA = "0xC06604", Offset = "0xC06604", VA = "0xC06604")]
	public static bool HasLayer(this LayerMask mask, string layerName)
	{
		return default(bool);
	}

	[Token(Token = "0x6000B6B")]
	[Address(RVA = "0xC06690", Offset = "0xC06690", VA = "0xC06690")]
	public static void SetLayer(this LayerMask mask, int layer, bool on)
	{
	}

	[Token(Token = "0x6000B6C")]
	[Address(RVA = "0xC066D4", Offset = "0xC066D4", VA = "0xC066D4")]
	public static void SetLayer(this LayerMask mask, string layerName, bool on)
	{
	}

	[Token(Token = "0x6000B6D")]
	[Address(RVA = "0xC06754", Offset = "0xC06754", VA = "0xC06754")]
	public static string GetLayerName(this GameObject gameObject)
	{
		return null;
	}

	[Token(Token = "0x6000B6E")]
	public static bool EnumHasFlag<T>(T flags, T flag) where T : struct
	{
		return default(bool);
	}

	[Token(Token = "0x6000B6F")]
	public static void SetEnumFlag<T>(ref T flags, T flag, bool on) where T : struct
	{
	}

	[Token(Token = "0x6000B70")]
	[Address(RVA = "0xC06774", Offset = "0xC06774", VA = "0xC06774")]
	public static Vector4 ToVector4(this Rect rect)
	{
		return default(Vector4);
	}

	[Token(Token = "0x6000B71")]
	[Address(RVA = "0xC067EC", Offset = "0xC067EC", VA = "0xC067EC")]
	public static void CenterOn(this ScrollRect scrollRect, Vector2 position)
	{
	}

	[Token(Token = "0x6000B72")]
	[Address(RVA = "0xC06A28", Offset = "0xC06A28", VA = "0xC06A28")]
	public static void CenterOnElement(this ScrollRect scrollRect, Transform element)
	{
	}

	[Token(Token = "0x6000B73")]
	[Address(RVA = "0xC06878", Offset = "0xC06878", VA = "0xC06878")]
	public static Vector2 GetContentScrollPositionTarget(this ScrollRect scrollRect, Vector2 position)
	{
		return default(Vector2);
	}

	[Token(Token = "0x6000B74")]
	[Address(RVA = "0xC06B1C", Offset = "0xC06B1C", VA = "0xC06B1C")]
	public static void SetActiveContent(this Graphic graphic, object content)
	{
	}

	[Token(Token = "0x6000B75")]
	public static void Set<T>(this T element, object content) where T : UIBehaviour
	{
	}

	[Token(Token = "0x6000B76")]
	[Address(RVA = "0xC06BC8", Offset = "0xC06BC8", VA = "0xC06BC8")]
	public static void Set(this Button button, UnityAction onClick)
	{
	}

	[Token(Token = "0x6000B77")]
	[Address(RVA = "0xC06C44", Offset = "0xC06C44", VA = "0xC06C44")]
	public static void ReparentKeepLocals(this Transform child, Transform parent)
	{
	}

	[Token(Token = "0x6000B78")]
	[Address(RVA = "0xC06CF8", Offset = "0xC06CF8", VA = "0xC06CF8")]
	public static Transform[] GetChildren(this Transform transform, bool includeInactive = false)
	{
		return null;
	}

	[Token(Token = "0x6000B79")]
	[Address(RVA = "0xC06EC0", Offset = "0xC06EC0", VA = "0xC06EC0")]
	public static void Set(this Transform transform, Vector3 position, Quaternion rotation, Vector3 scale, Space space = Space.World)
	{
	}

	[Token(Token = "0x6000B7A")]
	[Address(RVA = "0xC06F74", Offset = "0xC06F74", VA = "0xC06F74")]
	public static void Clear(this Transform transform, Space space = Space.World)
	{
	}

	[Token(Token = "0x6000B7B")]
	[Address(RVA = "0xC070CC", Offset = "0xC070CC", VA = "0xC070CC")]
	public static int GetSelfActiveChildCount(this Transform transform)
	{
		return default(int);
	}

	[Token(Token = "0x6000B7C")]
	[Address(RVA = "0xC07158", Offset = "0xC07158", VA = "0xC07158")]
	public static GameObject[] GetChildren(this GameObject gameObject, bool includeInactive = false)
	{
		return null;
	}

	[Token(Token = "0x6000B7D")]
	[Address(RVA = "0xC07344", Offset = "0xC07344", VA = "0xC07344")]
	public static void EnableOnlyChild(this Transform transform, int index)
	{
	}

	[Token(Token = "0x6000B7E")]
	[Address(RVA = "0xC07430", Offset = "0xC07430", VA = "0xC07430")]
	public static void EnableOnlyChild(this Transform transform, string name)
	{
	}

	[Token(Token = "0x6000B7F")]
	[Address(RVA = "0xC0753C", Offset = "0xC0753C", VA = "0xC0753C")]
	public static void EnableUpToChild(this Transform transform, int childIndex)
	{
	}

	[Token(Token = "0x6000B80")]
	[Address(RVA = "0xC073C4", Offset = "0xC073C4", VA = "0xC073C4")]
	public static void EnableOnly(this GameObject[] array, int index)
	{
	}

	[Token(Token = "0x6000B81")]
	[Address(RVA = "0xC074B0", Offset = "0xC074B0", VA = "0xC074B0")]
	public static void EnableOnly(this GameObject[] array, string name)
	{
	}

	[Token(Token = "0x6000B82")]
	[Address(RVA = "0xC075BC", Offset = "0xC075BC", VA = "0xC075BC")]
	public static string ToSimpleString(this TimeSpan timeSpan)
	{
		return null;
	}

	[Token(Token = "0x6000B83")]
	[Address(RVA = "0xC0787C", Offset = "0xC0787C", VA = "0xC0787C")]
	public static Bounds GetRendererBounds(this GameObject obj)
	{
		return default(Bounds);
	}

	[Token(Token = "0x6000B84")]
	[Address(RVA = "0xC07ABC", Offset = "0xC07ABC", VA = "0xC07ABC")]
	public static void Draw(this Bounds bounds)
	{
	}

	[Token(Token = "0x6000B85")]
	[Address(RVA = "0xC07B3C", Offset = "0xC07B3C", VA = "0xC07B3C")]
	public static void Draw(this Bounds bounds, Color color)
	{
	}

	[Token(Token = "0x6000B86")]
	public static bool TryLoadResource<T>(string path, out T resource) where T : UnityEngine.Object
	{
		return default(bool);
	}

	[Token(Token = "0x6000B87")]
	public static int RandomIndex<T>(this T[] array)
	{
		return default(int);
	}

	[Token(Token = "0x6000B88")]
	public static T RandomElement<T>(this T[] array)
	{
		return (T)null;
	}

	[Token(Token = "0x6000B89")]
	public static void Shuffle<T>(this T[] array)
	{
	}

	[Token(Token = "0x6000B8A")]
	public static T[] ShuffleCopy<T>(this T[] array)
	{
		return null;
	}

	[Token(Token = "0x6000B8B")]
	public static T First<T>(this T[] array)
	{
		return (T)null;
	}

	[Token(Token = "0x6000B8C")]
	public static T Last<T>(this T[] array)
	{
		return (T)null;
	}

	[Token(Token = "0x6000B8D")]
	public static T Best<T>(this IEnumerable<T> e, Func<T, float> metric, bool highest = true)
	{
		return (T)null;
	}

	[Token(Token = "0x6000B8E")]
	public static int BestIndex<T>(this T[] array, Func<T, float> metric, bool highest = true)
	{
		return default(int);
	}

	[Token(Token = "0x6000B8F")]
	public static T Best<T>(this T[] array, Func<T, float> metric, bool highest = true)
	{
		return (T)null;
	}

	[Token(Token = "0x6000B90")]
	public static float BestMetric<T>(this T[] array, Func<T, float> metric, bool highest = true)
	{
		return default(float);
	}

	[Token(Token = "0x6000B91")]
	[Address(RVA = "0xC07C5C", Offset = "0xC07C5C", VA = "0xC07C5C")]
	public static Vector3 Closest(this Vector3[] positions, Vector3 target)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000B92")]
	[Address(RVA = "0xC07D7C", Offset = "0xC07D7C", VA = "0xC07D7C")]
	public static Vector3 Sum(this Vector3[] array)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000B93")]
	[Address(RVA = "0xC07E1C", Offset = "0xC07E1C", VA = "0xC07E1C")]
	public static Vector3 Average(this Vector3[] array)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000B94")]
	public static int RandomIndex<T>(this List<T> list)
	{
		return default(int);
	}

	[Token(Token = "0x6000B95")]
	public static T RandomElement<T>(this List<T> list)
	{
		return (T)null;
	}

	[Token(Token = "0x6000B96")]
	public static T First<T>(this List<T> list)
	{
		return (T)null;
	}

	[Token(Token = "0x6000B97")]
	public static T Last<T>(this List<T> list)
	{
		return (T)null;
	}

	[Token(Token = "0x6000B98")]
	public static bool TryRemove<T>(this List<T> list, T item)
	{
		return default(bool);
	}

	[Token(Token = "0x6000B99")]
	[Address(RVA = "0xC07E90", Offset = "0xC07E90", VA = "0xC07E90")]
	public static Vector3 Sum(this List<Vector3> array)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000B9A")]
	[Address(RVA = "0xC07F74", Offset = "0xC07F74", VA = "0xC07F74")]
	public static Vector3 Average(this List<Vector3> array)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000B9B")]
	[Address(RVA = "0xC07FF4", Offset = "0xC07FF4", VA = "0xC07FF4")]
	public static int Sum(this List<int> array)
	{
		return default(int);
	}

	[Token(Token = "0x6000B9C")]
	[Address(RVA = "0xC08094", Offset = "0xC08094", VA = "0xC08094")]
	public static int Average(this List<int> array)
	{
		return default(int);
	}

	[Token(Token = "0x6000B9D")]
	[Address(RVA = "0xC08108", Offset = "0xC08108", VA = "0xC08108")]
	public static int Sum(this int[] array)
	{
		return default(int);
	}

	[Token(Token = "0x6000B9E")]
	[Address(RVA = "0xC08168", Offset = "0xC08168", VA = "0xC08168")]
	public static int Average(this int[] array)
	{
		return default(int);
	}

	[Token(Token = "0x6000B9F")]
	[Address(RVA = "0xC081D0", Offset = "0xC081D0", VA = "0xC081D0")]
	public static float Sum(this List<float> array)
	{
		return default(float);
	}

	[Token(Token = "0x6000BA0")]
	[Address(RVA = "0xC08270", Offset = "0xC08270", VA = "0xC08270")]
	public static float Average(this List<float> array)
	{
		return default(float);
	}

	[Token(Token = "0x6000BA1")]
	[Address(RVA = "0xC082E8", Offset = "0xC082E8", VA = "0xC082E8")]
	public static float Sum(this float[] array)
	{
		return default(float);
	}

	[Token(Token = "0x6000BA2")]
	[Address(RVA = "0xC08344", Offset = "0xC08344", VA = "0xC08344")]
	public static float Average(this float[] array)
	{
		return default(float);
	}

	[Token(Token = "0x6000BA3")]
	[Address(RVA = "0xC083B0", Offset = "0xC083B0", VA = "0xC083B0")]
	public static void UpdateVertexColor(this MeshFilter mesh, float hueOffset, float hue, float saturation, float value, float reflection)
	{
	}

	[Token(Token = "0x6000BA4")]
	[Address(RVA = "0xC08760", Offset = "0xC08760", VA = "0xC08760")]
	public static void UpdateVertexColor(this MeshFilter mesh, float hueOffset, float hueMultiplier, float hue, float saturation, float value, float reflection)
	{
	}
}
[Token(Token = "0x2000236")]
public static class MathS
{
	[Token(Token = "0x6000BB8")]
	[Address(RVA = "0xC09500", Offset = "0xC09500", VA = "0xC09500")]
	public static bool Within(int value, int min, int max)
	{
		return default(bool);
	}

	[Token(Token = "0x6000BB9")]
	[Address(RVA = "0xC09518", Offset = "0xC09518", VA = "0xC09518")]
	public static bool Between(int value, int min, int max)
	{
		return default(bool);
	}

	[Token(Token = "0x6000BBA")]
	[Address(RVA = "0xC09530", Offset = "0xC09530", VA = "0xC09530")]
	public static bool Within(float value, float min, float max)
	{
		return default(bool);
	}

	[Token(Token = "0x6000BBB")]
	[Address(RVA = "0xC09548", Offset = "0xC09548", VA = "0xC09548")]
	public static bool Between(float value, float min, float max)
	{
		return default(bool);
	}

	[Token(Token = "0x6000BBC")]
	[Address(RVA = "0xC09560", Offset = "0xC09560", VA = "0xC09560")]
	public static bool Within(byte value, byte min, byte max)
	{
		return default(bool);
	}

	[Token(Token = "0x6000BBD")]
	[Address(RVA = "0xC0957C", Offset = "0xC0957C", VA = "0xC0957C")]
	public static bool Between(byte value, byte min, byte max)
	{
		return default(bool);
	}

	[Token(Token = "0x6000BBE")]
	[Address(RVA = "0xC09598", Offset = "0xC09598", VA = "0xC09598")]
	public static Vector3[] GetSampledCircle(int sampleCount, float radius)
	{
		return null;
	}

	[Token(Token = "0x6000BBF")]
	[Address(RVA = "0xC095F4", Offset = "0xC095F4", VA = "0xC095F4")]
	public static Vector3[] GetSampledCircle(Vector3[] buffer, float radius)
	{
		return null;
	}

	[Token(Token = "0x6000BC0")]
	[Address(RVA = "0xC096A8", Offset = "0xC096A8", VA = "0xC096A8")]
	public static int WeightedRandomIndex(params float[] chances)
	{
		return default(int);
	}

	[Token(Token = "0x6000BC1")]
	[Address(RVA = "0xC097C8", Offset = "0xC097C8", VA = "0xC097C8")]
	public static int RandomIndexExcluding(int length, params int[] excludeAscending)
	{
		return default(int);
	}

	[Token(Token = "0x6000BC2")]
	[Address(RVA = "0xC09834", Offset = "0xC09834", VA = "0xC09834")]
	public static float Q_rsqrt(float x)
	{
		return default(float);
	}

	[Token(Token = "0x6000BC3")]
	[Address(RVA = "0xC098F0", Offset = "0xC098F0", VA = "0xC098F0")]
	public static float fsqrt(float number)
	{
		return default(float);
	}
}
[Token(Token = "0x2000237")]
public class Parabola
{
	[Token(Token = "0x4000E4B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static float gravity;

	[Token(Token = "0x4000E4C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float yDisplacement;

	[Token(Token = "0x4000E4D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private float? _yDisplacement;

	[Token(Token = "0x4000E4E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float? _distance;

	[Token(Token = "0x4000E4F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float? _flightTime;

	[Token(Token = "0x4000E50")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float? _speed;

	[Token(Token = "0x4000E51")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float? _angle;

	[Token(Token = "0x4000E52")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float? _maximumHeight;

	[Token(Token = "0x17000158")]
	public float distance
	{
		[Token(Token = "0x6000BC5")]
		[Address(RVA = "0xC09984", Offset = "0xC09984", VA = "0xC09984")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000BC6")]
		[Address(RVA = "0xC09E54", Offset = "0xC09E54", VA = "0xC09E54")]
		set
		{
		}
	}

	[Token(Token = "0x17000159")]
	public float flightTime
	{
		[Token(Token = "0x6000BC8")]
		[Address(RVA = "0xC09EBC", Offset = "0xC09EBC", VA = "0xC09EBC")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000BC9")]
		[Address(RVA = "0xC0A0CC", Offset = "0xC0A0CC", VA = "0xC0A0CC")]
		set
		{
		}
	}

	[Token(Token = "0x1700015A")]
	public float speed
	{
		[Token(Token = "0x6000BCB")]
		[Address(RVA = "0xC09C34", Offset = "0xC09C34", VA = "0xC09C34")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000BCC")]
		[Address(RVA = "0xC0A1EC", Offset = "0xC0A1EC", VA = "0xC0A1EC")]
		set
		{
		}
	}

	[Token(Token = "0x1700015B")]
	public float angle
	{
		[Token(Token = "0x6000BCF")]
		[Address(RVA = "0xC09AEC", Offset = "0xC09AEC", VA = "0xC09AEC")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000BD0")]
		[Address(RVA = "0xC0A3C0", Offset = "0xC0A3C0", VA = "0xC0A3C0")]
		set
		{
		}
	}

	[Token(Token = "0x1700015C")]
	public float maximumHeight
	{
		[Token(Token = "0x6000BD2")]
		[Address(RVA = "0xC0A428", Offset = "0xC0A428", VA = "0xC0A428")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000BD3")]
		[Address(RVA = "0xC0A5F8", Offset = "0xC0A5F8", VA = "0xC0A5F8")]
		set
		{
		}
	}

	[Token(Token = "0x6000BC4")]
	[Address(RVA = "0xC09910", Offset = "0xC09910", VA = "0xC09910")]
	public Parabola(float yDisplacement)
	{
	}

	[Token(Token = "0x6000BC7")]
	[Address(RVA = "0xC09D9C", Offset = "0xC09D9C", VA = "0xC09D9C")]
	public static float SolveDistance(float angle, float speed, float yDisplacement)
	{
		return default(float);
	}

	[Token(Token = "0x6000BCA")]
	[Address(RVA = "0xC0A024", Offset = "0xC0A024", VA = "0xC0A024")]
	public static float SolveFlightTime(float angle, float yDisplacement, float speed)
	{
		return default(float);
	}

	[Token(Token = "0x6000BCD")]
	[Address(RVA = "0xC0A134", Offset = "0xC0A134", VA = "0xC0A134")]
	public static float SolveSpeed(float angle, float yDisplacement, float distance)
	{
		return default(float);
	}

	[Token(Token = "0x6000BCE")]
	[Address(RVA = "0xC0A254", Offset = "0xC0A254", VA = "0xC0A254")]
	public static float SolveSpeed(float angle, Vector3 displacement)
	{
		return default(float);
	}

	[Token(Token = "0x6000BD1")]
	[Address(RVA = "0xC0A340", Offset = "0xC0A340", VA = "0xC0A340")]
	public static float SolveAngle(float speed, float distance)
	{
		return default(float);
	}

	[Token(Token = "0x6000BD4")]
	[Address(RVA = "0xC0A570", Offset = "0xC0A570", VA = "0xC0A570")]
	public static float SolveMaximumHeight(float angle, float speed)
	{
		return default(float);
	}

	[Token(Token = "0x6000BD5")]
	[Address(RVA = "0xC0A660", Offset = "0xC0A660", VA = "0xC0A660")]
	public static Vector3 FindLaunchVelocity(Vector3 start, Vector3 end, float horizonAngle)
	{
		return default(Vector3);
	}
}
[Token(Token = "0x2000238")]
public struct BitMask
{
	[Token(Token = "0x4000E53")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private byte[] mask;

	[Token(Token = "0x6000BD7")]
	[Address(RVA = "0xC0A848", Offset = "0xC0A848", VA = "0xC0A848")]
	public bool Has(int index)
	{
		return default(bool);
	}

	[Token(Token = "0x6000BD8")]
	[Address(RVA = "0xC0A978", Offset = "0xC0A978", VA = "0xC0A978")]
	public void Set(int index, bool on)
	{
	}

	[Token(Token = "0x6000BD9")]
	[Address(RVA = "0xC0A8B0", Offset = "0xC0A8B0", VA = "0xC0A8B0")]
	private void ExpandIfNeeded(int index)
	{
	}
}
[Token(Token = "0x2000239")]
public abstract class FilledGraphicItem
{
	[Token(Token = "0x4000E54")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	protected Transform root;

	[Token(Token = "0x4000E55")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private List<Graphic> graphics;

	[Token(Token = "0x1700015D")]
	public Transform transform
	{
		[Token(Token = "0x6000BDA")]
		[Address(RVA = "0xC0A9F0", Offset = "0xC0A9F0", VA = "0xC0A9F0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700015E")]
	public bool active
	{
		[Token(Token = "0x6000BDB")]
		[Address(RVA = "0xC0A9F8", Offset = "0xC0A9F8", VA = "0xC0A9F8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000BDC")]
	[Address(RVA = "0xC0AA20", Offset = "0xC0AA20", VA = "0xC0AA20")]
	public FilledGraphicItem(Transform root)
	{
	}

	[Token(Token = "0x6000BDD")]
	[Address(RVA = "0xC0AAAC", Offset = "0xC0AAAC", VA = "0xC0AAAC")]
	protected void AddGraphic(Graphic graphic)
	{
	}

	[Token(Token = "0x6000BDE")]
	[Address(RVA = "0xC0AB54", Offset = "0xC0AB54", VA = "0xC0AB54", Slot = "4")]
	protected virtual void FillGraphics(params object[] content)
	{
	}

	[Token(Token = "0x6000BDF")]
	[Address(RVA = "0xC0AC50", Offset = "0xC0AC50", VA = "0xC0AC50")]
	public void SetActive(bool on)
	{
	}
}
[Token(Token = "0x200023A")]
public class DynamicPool<T> where T : Component
{
	[Token(Token = "0x4000E56")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private List<T> pool;

	[Token(Token = "0x4000E57")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private T template;

	[Token(Token = "0x4000E58")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private Transform parent;

	[Token(Token = "0x6000BE0")]
	public DynamicPool(T template, [Optional] Transform parent)
	{
	}

	[Token(Token = "0x6000BE1")]
	public T Get([Optional] Action<T> onInitialization)
	{
		return null;
	}

	[Token(Token = "0x6000BE2")]
	public void Release(T item)
	{
	}
}
[Token(Token = "0x200023B")]
public class DynamicIndexedPool<T> : IEnumerable<T>, IEnumerable where T : Component
{
	[Token(Token = "0x200023C")]
	[CompilerGenerated]
	private sealed class <GetEnumerator>d__0 : IEnumerator<T>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000E5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int <>1__state;

		[Token(Token = "0x4000E5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T <>2__current;

		[Token(Token = "0x4000E5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public DynamicIndexedPool<T> <>4__this;

		[Token(Token = "0x4000E5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private List<T>.Enumerator <>7__wrap1;

		[Token(Token = "0x17000161")]
		private T System.Collections.Generic.IEnumerator<T>.Current
		{
			[Token(Token = "0x6000BF1")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000162")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000BF3")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000BED")]
		[DebuggerHidden]
		public <GetEnumerator>d__0(int <>1__state)
		{
		}

		[Token(Token = "0x6000BEE")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000BEF")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BF0")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x6000BF2")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000E59")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private List<T> pool;

	[Token(Token = "0x4000E5A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private Transform parent;

	[Token(Token = "0x4000E5B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private T template;

	[Token(Token = "0x1700015F")]
	public T this[int index]
	{
		[Token(Token = "0x6000BE5")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000BE6")]
		protected set
		{
		}
	}

	[Token(Token = "0x17000160")]
	public int Count
	{
		[Token(Token = "0x6000BE7")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x6000BE3")]
	[IteratorStateMachine(typeof(DynamicIndexedPool<>.<GetEnumerator>d__0))]
	public IEnumerator<T> GetEnumerator()
	{
		return null;
	}

	[Token(Token = "0x6000BE4")]
	private IEnumerator System.Collections.IEnumerable.GetEnumerator()
	{
		return null;
	}

	[Token(Token = "0x6000BE8")]
	public DynamicIndexedPool(T template)
	{
	}

	[Token(Token = "0x6000BE9")]
	public DynamicIndexedPool(T template, Transform parent)
	{
	}

	[Token(Token = "0x6000BEA")]
	public DynamicIndexedPool(T[] pool)
	{
	}

	[Token(Token = "0x6000BEB")]
	public DynamicIndexedPool(T[] pool, Transform parent)
	{
	}

	[Token(Token = "0x6000BEC")]
	private T Get(int index)
	{
		return null;
	}
}
[Token(Token = "0x200023D")]
public static class SpungePath
{
	[Token(Token = "0x6000BF4")]
	[Address(RVA = "0xC0AC80", Offset = "0xC0AC80", VA = "0xC0AC80")]
	public static string Combine(params string[] paths)
	{
		return null;
	}
}
[Token(Token = "0x200023E")]
public class SpungeString
{
	[Token(Token = "0x4000E60")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static CultureInfo provider;

	[Token(Token = "0x6000BF5")]
	[Address(RVA = "0xC0182C", Offset = "0xC0182C", VA = "0xC0182C")]
	public static bool EndsWith(string str, string sub)
	{
		return default(bool);
	}

	[Token(Token = "0x6000BF6")]
	[Address(RVA = "0xBFEEF4", Offset = "0xBFEEF4", VA = "0xBFEEF4")]
	public static bool StartsWith(string str, string sub)
	{
		return default(bool);
	}

	[Token(Token = "0x6000BF7")]
	[Address(RVA = "0xC0ADE0", Offset = "0xC0ADE0", VA = "0xC0ADE0")]
	public static bool Compare(string a, string b)
	{
		return default(bool);
	}

	[Token(Token = "0x6000BF8")]
	[Address(RVA = "0xC0AE74", Offset = "0xC0AE74", VA = "0xC0AE74")]
	public static string Replace(string input, char letterToReplace, char letterToReplaceWith)
	{
		return null;
	}

	[Token(Token = "0x6000BF9")]
	[Address(RVA = "0xC0AF50", Offset = "0xC0AF50", VA = "0xC0AF50")]
	public static bool Contains(string input, string text)
	{
		return default(bool);
	}

	[Token(Token = "0x6000BFA")]
	[Address(RVA = "0xC0AFF8", Offset = "0xC0AFF8", VA = "0xC0AFF8")]
	public static float ParseFloat(string value)
	{
		return default(float);
	}

	[Token(Token = "0x6000BFB")]
	[Address(RVA = "0xC0B05C", Offset = "0xC0B05C", VA = "0xC0B05C")]
	public static int ParseInt(string value)
	{
		return default(int);
	}

	[Token(Token = "0x6000BFC")]
	[Address(RVA = "0xC0B0C0", Offset = "0xC0B0C0", VA = "0xC0B0C0")]
	public SpungeString()
	{
	}
}
[Token(Token = "0x200023F")]
[DisallowMultipleComponent]
public class SteamManager : MonoBehaviour
{
	[Token(Token = "0x17000163")]
	public static bool Initialized
	{
		[Token(Token = "0x6000BFE")]
		[Address(RVA = "0xC0B154", Offset = "0xC0B154", VA = "0xC0B154")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000BFF")]
	[Address(RVA = "0xC0B15C", Offset = "0xC0B15C", VA = "0xC0B15C")]
	public SteamManager()
	{
	}
}
[Token(Token = "0x2000240")]
public class TimedDisableOnEnable : MonoBehaviour
{
	[Token(Token = "0x2000241")]
	[CompilerGenerated]
	private sealed class <DelayDisable>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000E64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000E65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000E66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TimedDisableOnEnable <>4__this;

		[Token(Token = "0x4000E67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <time>5__2;

		[Token(Token = "0x17000164")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000C06")]
			[Address(RVA = "0xC0B30C", Offset = "0xC0B30C", VA = "0xC0B30C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000165")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C08")]
			[Address(RVA = "0xC0B354", Offset = "0xC0B354", VA = "0xC0B354", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C03")]
		[Address(RVA = "0xC0B234", Offset = "0xC0B234", VA = "0xC0B234")]
		[DebuggerHidden]
		public <DelayDisable>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x6000C04")]
		[Address(RVA = "0xC0B26C", Offset = "0xC0B26C", VA = "0xC0B26C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000C05")]
		[Address(RVA = "0xC0B270", Offset = "0xC0B270", VA = "0xC0B270", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C07")]
		[Address(RVA = "0xC0B314", Offset = "0xC0B314", VA = "0xC0B314", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000E61")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float lifeTime;

	[Token(Token = "0x4000E62")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private bool init;

	[Token(Token = "0x4000E63")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private GameObject thisGameObject;

	[Token(Token = "0x6000C00")]
	[Address(RVA = "0xC0B164", Offset = "0xC0B164", VA = "0xC0B164")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000C01")]
	[Address(RVA = "0xC0B1CC", Offset = "0xC0B1CC", VA = "0xC0B1CC")]
	[IteratorStateMachine(typeof(<DelayDisable>d__4))]
	private IEnumerator DelayDisable()
	{
		return null;
	}

	[Token(Token = "0x6000C02")]
	[Address(RVA = "0xC0B25C", Offset = "0xC0B25C", VA = "0xC0B25C")]
	public TimedDisableOnEnable()
	{
	}
}
[Token(Token = "0x2000242")]
public class TimeScalePitch : MonoBehaviour
{
	[Token(Token = "0x2000243")]
	public class PitchSource
	{
		[Token(Token = "0x4000E6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AudioSource source;

		[Token(Token = "0x4000E6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float startPitch;

		[Token(Token = "0x6000C0E")]
		[Address(RVA = "0xC0B518", Offset = "0xC0B518", VA = "0xC0B518")]
		public PitchSource()
		{
		}
	}

	[Token(Token = "0x4000E68")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static TimeScalePitch instance;

	[Token(Token = "0x4000E69")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<PitchSource> sources;

	[Token(Token = "0x4000E6A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private PitchSource mySource;

	[Token(Token = "0x4000E6B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool iAmManager;

	[Token(Token = "0x4000E6C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float lastTimeScale;

	[Token(Token = "0x6000C09")]
	[Address(RVA = "0xC0B35C", Offset = "0xC0B35C", VA = "0xC0B35C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000C0A")]
	[Address(RVA = "0xC0B520", Offset = "0xC0B520", VA = "0xC0B520")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000C0B")]
	[Address(RVA = "0xC0B5FC", Offset = "0xC0B5FC", VA = "0xC0B5FC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000C0C")]
	[Address(RVA = "0xC0B79C", Offset = "0xC0B79C", VA = "0xC0B79C")]
	public void ClearList()
	{
	}

	[Token(Token = "0x6000C0D")]
	[Address(RVA = "0xC0B80C", Offset = "0xC0B80C", VA = "0xC0B80C")]
	public TimeScalePitch()
	{
	}
}
[Token(Token = "0x2000244")]
public class TrackPosition : MonoBehaviour
{
	[Token(Token = "0x4000E6F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform target;

	[Token(Token = "0x4000E70")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool flattenY;

	[Token(Token = "0x4000E71")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Vector3 targetPosition;

	[Token(Token = "0x4000E72")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform xForm;

	[Token(Token = "0x6000C0F")]
	[Address(RVA = "0xC0B890", Offset = "0xC0B890", VA = "0xC0B890")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000C10")]
	[Address(RVA = "0xC0B8AC", Offset = "0xC0B8AC", VA = "0xC0B8AC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000C11")]
	[Address(RVA = "0xC0B9C0", Offset = "0xC0B9C0", VA = "0xC0B9C0")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000C12")]
	[Address(RVA = "0xC0BA34", Offset = "0xC0BA34", VA = "0xC0BA34")]
	public TrackPosition()
	{
	}
}
[Token(Token = "0x2000245")]
public abstract class BaseTween : MonoBehaviour
{
	[Token(Token = "0x2000246")]
	public enum UpdateType
	{
		[Token(Token = "0x4000E88")]
		Update = 1,
		[Token(Token = "0x4000E89")]
		LateUpdate,
		[Token(Token = "0x4000E8A")]
		FixedUpdate
	}

	[Token(Token = "0x4000E75")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEvent onBegin;

	[Token(Token = "0x4000E76")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEvent onEnd;

	[Token(Token = "0x4000E77")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public TweenMode mode;

	[Token(Token = "0x4000E78")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public UpdateType updateType;

	[Token(Token = "0x4000E79")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float duration;

	[Token(Token = "0x4000E7A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public bool playOnAwake;

	[Token(Token = "0x4000E7B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
	public bool ignoreTimeScale;

	[Token(Token = "0x4000E7C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x46")]
	public bool resetOnDisable;

	[Token(Token = "0x4000E7D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public AnimationCurve curve;

	[Token(Token = "0x4000E7E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float time;

	[Token(Token = "0x4000E7F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private bool playNextEnable;

	[Token(Token = "0x4000E80")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Range(0f, 1f)]
	public float startTime;

	[Token(Token = "0x4000E81")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public bool randomStart;

	[Token(Token = "0x4000E82")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5D")]
	private bool isInit;

	[Token(Token = "0x4000E83")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private TweenManager.TweenNode tweenNode;

	[Token(Token = "0x4000E84")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private bool _isPlaying;

	[Token(Token = "0x4000E85")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
	private bool _isForward;

	[Token(Token = "0x4000E86")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
	public bool paused;

	[Token(Token = "0x17000166")]
	public bool isPlaying
	{
		[Token(Token = "0x6000C17")]
		[Address(RVA = "0xC0BCB4", Offset = "0xC0BCB4", VA = "0xC0BCB4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000167")]
	public bool isForward
	{
		[Token(Token = "0x6000C18")]
		[Address(RVA = "0xC0BCBC", Offset = "0xC0BCBC", VA = "0xC0BCBC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000168")]
	public float progress
	{
		[Token(Token = "0x6000C19")]
		[Address(RVA = "0xC0BCC4", Offset = "0xC0BCC4", VA = "0xC0BCC4")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000169")]
	public bool isAtEnd
	{
		[Token(Token = "0x6000C1A")]
		[Address(RVA = "0xC0BCE0", Offset = "0xC0BCE0", VA = "0xC0BCE0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700016A")]
	public bool isAtBeginning
	{
		[Token(Token = "0x6000C1B")]
		[Address(RVA = "0xC0BCF4", Offset = "0xC0BCF4", VA = "0xC0BCF4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700016B")]
	public bool isComplete
	{
		[Token(Token = "0x6000C1C")]
		[Address(RVA = "0xC0BD04", Offset = "0xC0BD04", VA = "0xC0BD04")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x14000018")]
	public event Action onTweenStart
	{
		[Token(Token = "0x6000C13")]
		[Address(RVA = "0xC0BA44", Offset = "0xC0BA44", VA = "0xC0BA44")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000C14")]
		[Address(RVA = "0xC0BAE0", Offset = "0xC0BAE0", VA = "0xC0BAE0")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000019")]
	public event Action onTweenStop
	{
		[Token(Token = "0x6000C15")]
		[Address(RVA = "0xC0BB7C", Offset = "0xC0BB7C", VA = "0xC0BB7C")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000C16")]
		[Address(RVA = "0xC0BC18", Offset = "0xC0BC18", VA = "0xC0BC18")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6000C1D")]
	[Address(RVA = "0xC0BD44", Offset = "0xC0BD44", VA = "0xC0BD44")]
	private void Init()
	{
	}

	[Token(Token = "0x6000C1E")]
	[Address(RVA = "0xC0BED0", Offset = "0xC0BED0", VA = "0xC0BED0")]
	public void UpdateTween(float deltaTime)
	{
	}

	[Token(Token = "0x6000C1F")]
	[Address(RVA = "0xC0BF18", Offset = "0xC0BF18", VA = "0xC0BF18")]
	public void SetProgress(float progress)
	{
	}

	[Token(Token = "0x6000C20")]
	[Address(RVA = "0xC0BD90", Offset = "0xC0BD90", VA = "0xC0BD90")]
	private void UpdateTime(float deltaTime = 0f)
	{
	}

	[Token(Token = "0x6000C21")]
	[Address(RVA = "0xC0BFF0", Offset = "0xC0BFF0", VA = "0xC0BFF0")]
	public void Play()
	{
	}

	[Token(Token = "0x6000C22")]
	[Address(RVA = "0xC0BF68", Offset = "0xC0BF68", VA = "0xC0BF68")]
	public void Stop()
	{
	}

	[Token(Token = "0x6000C23")]
	[Address(RVA = "0xC0BFE0", Offset = "0xC0BFE0", VA = "0xC0BFE0")]
	public void ReverseAndPlay()
	{
	}

	[Token(Token = "0x6000C24")]
	[Address(RVA = "0xC0C2F0", Offset = "0xC0C2F0", VA = "0xC0C2F0")]
	public void Reset(bool beginning = true)
	{
	}

	[Token(Token = "0x6000C25")]
	[Address(RVA = "0xC0C354", Offset = "0xC0C354", VA = "0xC0C354")]
	public void ResetAndPlay(bool beginning = true)
	{
	}

	[Token(Token = "0x6000C26")]
	[Address(RVA = "0xC0C370", Offset = "0xC0C370", VA = "0xC0C370")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000C27")]
	[Address(RVA = "0xC0C3A4", Offset = "0xC0C3A4", VA = "0xC0C3A4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000C28")]
	[Address(RVA = "0xC0C3E0", Offset = "0xC0C3E0", VA = "0xC0C3E0")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000C29")]
	protected abstract void Apply(float value);

	[Token(Token = "0x6000C2A")]
	[Address(RVA = "0xC0C4B4", Offset = "0xC0C4B4", VA = "0xC0C4B4", Slot = "5")]
	protected virtual void OnInit()
	{
	}

	[Token(Token = "0x6000C2B")]
	[Address(RVA = "0xC0C4B8", Offset = "0xC0C4B8", VA = "0xC0C4B8")]
	protected BaseTween()
	{
	}
}
[Token(Token = "0x2000247")]
public class TweenAnchors : BaseTween
{
	[Token(Token = "0x4000E8B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public Vector2 fromMin;

	[Token(Token = "0x4000E8C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public Vector2 fromMax;

	[Token(Token = "0x4000E8D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public Vector2 toMin;

	[Token(Token = "0x4000E8E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public Vector2 toMax;

	[Token(Token = "0x4000E8F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Transform xForm;

	[Token(Token = "0x4000E90")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private RectTransform rectForm;

	[Token(Token = "0x4000E91")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private Rigidbody rBody;

	[Token(Token = "0x6000C2C")]
	[Address(RVA = "0xC0C578", Offset = "0xC0C578", VA = "0xC0C578", Slot = "5")]
	protected override void OnInit()
	{
	}

	[Token(Token = "0x6000C2D")]
	[Address(RVA = "0xC0C668", Offset = "0xC0C668", VA = "0xC0C668", Slot = "4")]
	protected override void Apply(float value)
	{
	}

	[Token(Token = "0x6000C2E")]
	[Address(RVA = "0xC0C75C", Offset = "0xC0C75C", VA = "0xC0C75C")]
	public TweenAnchors()
	{
	}
}
[Token(Token = "0x2000248")]
public class TweenColor : BaseTween
{
	[Token(Token = "0x4000E92")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Graphic graphic;

	[Token(Token = "0x4000E93")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private SpriteRenderer sprite;

	[Token(Token = "0x4000E94")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Color from;

	[Token(Token = "0x4000E95")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Color to;

	[Token(Token = "0x6000C2F")]
	[Address(RVA = "0xC0C760", Offset = "0xC0C760", VA = "0xC0C760", Slot = "5")]
	protected override void OnInit()
	{
	}

	[Token(Token = "0x6000C30")]
	[Address(RVA = "0xC0C7DC", Offset = "0xC0C7DC", VA = "0xC0C7DC", Slot = "4")]
	protected override void Apply(float value)
	{
	}

	[Token(Token = "0x6000C31")]
	[Address(RVA = "0xC0C8F0", Offset = "0xC0C8F0", VA = "0xC0C8F0")]
	public TweenColor()
	{
	}
}
[Token(Token = "0x2000249")]
public class TweenGradient : BaseTween
{
	[Token(Token = "0x4000E96")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Graphic graphic;

	[Token(Token = "0x4000E97")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private SpriteRenderer sprite;

	[Token(Token = "0x4000E98")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Gradient gradient;

	[Token(Token = "0x6000C32")]
	[Address(RVA = "0xC0C8FC", Offset = "0xC0C8FC", VA = "0xC0C8FC", Slot = "5")]
	protected override void OnInit()
	{
	}

	[Token(Token = "0x6000C33")]
	[Address(RVA = "0xC0C978", Offset = "0xC0C978", VA = "0xC0C978", Slot = "4")]
	protected override void Apply(float value)
	{
	}

	[Token(Token = "0x6000C34")]
	[Address(RVA = "0xC0CA9C", Offset = "0xC0CA9C", VA = "0xC0CA9C")]
	public TweenGradient()
	{
	}
}
[Token(Token = "0x200024A")]
[RequireComponent(typeof(CanvasGroup))]
public class TweenGroupAlpha : BaseTween
{
	[Token(Token = "0x4000E99")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private CanvasGroup group;

	[Token(Token = "0x4000E9A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[Range(0f, 1f)]
	public float from;

	[Token(Token = "0x4000E9B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	[Range(0f, 1f)]
	public float to;

	[Token(Token = "0x6000C35")]
	[Address(RVA = "0xC0CAA0", Offset = "0xC0CAA0", VA = "0xC0CAA0", Slot = "5")]
	protected override void OnInit()
	{
	}

	[Token(Token = "0x6000C36")]
	[Address(RVA = "0xC0CAF0", Offset = "0xC0CAF0", VA = "0xC0CAF0", Slot = "4")]
	protected override void Apply(float value)
	{
	}

	[Token(Token = "0x6000C37")]
	[Address(RVA = "0xC0CB20", Offset = "0xC0CB20", VA = "0xC0CB20")]
	public TweenGroupAlpha()
	{
	}
}
[Token(Token = "0x200024B")]
public class TweenImageFill : BaseTween
{
	[Token(Token = "0x4000E9C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Image xForm;

	[Token(Token = "0x4000E9D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public float from;

	[Token(Token = "0x4000E9E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public float to;

	[Token(Token = "0x6000C38")]
	[Address(RVA = "0xC0CB2C", Offset = "0xC0CB2C", VA = "0xC0CB2C", Slot = "5")]
	protected override void OnInit()
	{
	}

	[Token(Token = "0x6000C39")]
	[Address(RVA = "0xC0CB7C", Offset = "0xC0CB7C", VA = "0xC0CB7C", Slot = "4")]
	protected override void Apply(float value)
	{
	}

	[Token(Token = "0x6000C3A")]
	[Address(RVA = "0xC0CBAC", Offset = "0xC0CBAC", VA = "0xC0CBAC")]
	public TweenImageFill()
	{
	}
}
[Token(Token = "0x200024C")]
[RequireComponent(typeof(LayoutElement))]
public class TweenLayoutElement : BaseTween
{
	[Token(Token = "0x4000E9F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private LayoutElement layout;

	[Token(Token = "0x4000EA0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[Header("From")]
	public Vector2 minSizeFrom;

	[Token(Token = "0x4000EA1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Vector2 preferredSizeFrom;

	[Token(Token = "0x4000EA2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Vector2 flexibleSizeFrom;

	[Token(Token = "0x4000EA3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public float layoutPriorityFrom;

	[Token(Token = "0x4000EA4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	[Header("To")]
	public Vector2 minSizeTo;

	[Token(Token = "0x4000EA5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	public Vector2 preferredSizeTo;

	[Token(Token = "0x4000EA6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	public Vector2 flexibleSizeTo;

	[Token(Token = "0x4000EA7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	public float layoutPriorityTo;

	[Token(Token = "0x6000C3B")]
	[Address(RVA = "0xC0CBB8", Offset = "0xC0CBB8", VA = "0xC0CBB8", Slot = "5")]
	protected override void OnInit()
	{
	}

	[Token(Token = "0x6000C3C")]
	[Address(RVA = "0xC0CC08", Offset = "0xC0CC08", VA = "0xC0CC08", Slot = "4")]
	protected override void Apply(float value)
	{
	}

	[Token(Token = "0x6000C3D")]
	[Address(RVA = "0xC0CDCC", Offset = "0xC0CDCC", VA = "0xC0CDCC")]
	public TweenLayoutElement()
	{
	}
}
[Token(Token = "0x200024D")]
public class TweenManager : MonoBehaviour
{
	[Token(Token = "0x200024E")]
	public class TweenNode
	{
		[Token(Token = "0x4000EAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public BaseTween tween;

		[Token(Token = "0x4000EAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public BaseTween.UpdateType updateType;

		[Token(Token = "0x4000EAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TweenNode next;

		[Token(Token = "0x4000EAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TweenNode prev;

		[Token(Token = "0x6000C48")]
		[Address(RVA = "0xC0E3D0", Offset = "0xC0E3D0", VA = "0xC0E3D0")]
		public TweenNode()
		{
		}
	}

	[Token(Token = "0x4000EA8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static TweenManager _instance;

	[Token(Token = "0x4000EA9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Dictionary<int, TweenNode> startNodes;

	[Token(Token = "0x6000C3E")]
	[Address(RVA = "0xC0CDF8", Offset = "0xC0CDF8", VA = "0xC0CDF8")]
	private static void CreateInstance()
	{
	}

	[Token(Token = "0x6000C3F")]
	[Address(RVA = "0xC0D068", Offset = "0xC0D068", VA = "0xC0D068")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000C40")]
	[Address(RVA = "0xC0D160", Offset = "0xC0D160", VA = "0xC0D160")]
	private void Update()
	{
	}

	[Token(Token = "0x6000C41")]
	[Address(RVA = "0xC0D244", Offset = "0xC0D244", VA = "0xC0D244")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000C42")]
	[Address(RVA = "0xC0D280", Offset = "0xC0D280", VA = "0xC0D280")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000C43")]
	[Address(RVA = "0xC0D19C", Offset = "0xC0D19C", VA = "0xC0D19C")]
	private void DoUpdate(BaseTween.UpdateType updateType, float deltaTime, float unscaledDeltaTime)
	{
	}

	[Token(Token = "0x6000C44")]
	[Address(RVA = "0xC0D2BC", Offset = "0xC0D2BC", VA = "0xC0D2BC")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000C45")]
	[Address(RVA = "0xC0C0E8", Offset = "0xC0C0E8", VA = "0xC0C0E8")]
	public static TweenNode Play(BaseTween tween)
	{
		return null;
	}

	[Token(Token = "0x6000C46")]
	[Address(RVA = "0xC0C210", Offset = "0xC0C210", VA = "0xC0C210")]
	public static void Stop(TweenNode node)
	{
	}

	[Token(Token = "0x6000C47")]
	[Address(RVA = "0xC0D354", Offset = "0xC0D354", VA = "0xC0D354")]
	public TweenManager()
	{
	}
}
[Token(Token = "0x200024F")]
public enum TweenMode
{
	[Token(Token = "0x4000EAF")]
	Once = 1,
	[Token(Token = "0x4000EB0")]
	Loop,
	[Token(Token = "0x4000EB1")]
	PingPong
}
[Token(Token = "0x2000250")]
public class TweenPosition : BaseTween
{
	[Token(Token = "0x4000EB2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public Vector3 from;

	[Token(Token = "0x4000EB3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Vector3 to;

	[Token(Token = "0x4000EB4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public bool fromIsOffset;

	[Token(Token = "0x4000EB5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x85")]
	public bool toIsOffset;

	[Token(Token = "0x4000EB6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Transform xForm;

	[Token(Token = "0x4000EB7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private RectTransform rectForm;

	[Token(Token = "0x4000EB8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Rigidbody rBody;

	[Token(Token = "0x6000C49")]
	[Address(RVA = "0xC0E3D8", Offset = "0xC0E3D8", VA = "0xC0E3D8", Slot = "5")]
	protected override void OnInit()
	{
	}

	[Token(Token = "0x6000C4A")]
	[Address(RVA = "0xC0E4C8", Offset = "0xC0E4C8", VA = "0xC0E4C8", Slot = "4")]
	protected override void Apply(float value)
	{
	}

	[Token(Token = "0x6000C4B")]
	[Address(RVA = "0xC0E734", Offset = "0xC0E734", VA = "0xC0E734")]
	public TweenPosition()
	{
	}
}
[Token(Token = "0x2000251")]
public class TweenRotation : BaseTween
{
	[Token(Token = "0x4000EB9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Transform xForm;

	[Token(Token = "0x4000EBA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Rigidbody rBody;

	[Token(Token = "0x4000EBB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Vector3 from;

	[Token(Token = "0x4000EBC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	public Vector3 to;

	[Token(Token = "0x6000C4C")]
	[Address(RVA = "0xC0E73C", Offset = "0xC0E73C", VA = "0xC0E73C", Slot = "5")]
	protected override void OnInit()
	{
	}

	[Token(Token = "0x6000C4D")]
	[Address(RVA = "0xC0E7F8", Offset = "0xC0E7F8", VA = "0xC0E7F8", Slot = "4")]
	protected override void Apply(float value)
	{
	}

	[Token(Token = "0x6000C4E")]
	[Address(RVA = "0xC0EA50", Offset = "0xC0EA50", VA = "0xC0EA50")]
	public TweenRotation()
	{
	}
}
[Token(Token = "0x2000252")]
public class TweenScale : BaseTween
{
	[Token(Token = "0x4000EBD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Transform xForm;

	[Token(Token = "0x4000EBE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Vector3 from;

	[Token(Token = "0x4000EBF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public Vector3 to;

	[Token(Token = "0x6000C4F")]
	[Address(RVA = "0xC0EA58", Offset = "0xC0EA58", VA = "0xC0EA58", Slot = "5")]
	protected override void OnInit()
	{
	}

	[Token(Token = "0x6000C50")]
	[Address(RVA = "0xC0EA74", Offset = "0xC0EA74", VA = "0xC0EA74", Slot = "4")]
	protected override void Apply(float value)
	{
	}

	[Token(Token = "0x6000C51")]
	[Address(RVA = "0xC0EAC0", Offset = "0xC0EAC0", VA = "0xC0EAC0")]
	public TweenScale()
	{
	}
}
[Token(Token = "0x2000253")]
public class TweenSet : MonoBehaviour
{
	[Token(Token = "0x4000EC0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<GameObject> tweens;

	[Token(Token = "0x4000EC3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private bool disableOnHide;

	[Token(Token = "0x4000EC4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	[SerializeField]
	private bool startShown;

	[Token(Token = "0x4000EC5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
	private bool hasLoaded;

	[Token(Token = "0x4000EC6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private List<BaseTween> tweenSet;

	[Token(Token = "0x4000EC7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Action completeCallback;

	[Token(Token = "0x4000EC8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int activeTweens;

	[Token(Token = "0x1700016C")]
	public bool isPlaying
	{
		[Token(Token = "0x6000C56")]
		[Address(RVA = "0xC0EDA4", Offset = "0xC0EDA4", VA = "0xC0EDA4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700016D")]
	public bool isShown
	{
		[Token(Token = "0x6000C57")]
		[Address(RVA = "0xC0EDB4", Offset = "0xC0EDB4", VA = "0xC0EDB4")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000C58")]
		[Address(RVA = "0xC0EDBC", Offset = "0xC0EDBC", VA = "0xC0EDBC")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1400001A")]
	public event Action onHideComplete
	{
		[Token(Token = "0x6000C52")]
		[Address(RVA = "0xC0EB34", Offset = "0xC0EB34", VA = "0xC0EB34")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000C53")]
		[Address(RVA = "0xC0EBD0", Offset = "0xC0EBD0", VA = "0xC0EBD0")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400001B")]
	public event Action onShowComplete
	{
		[Token(Token = "0x6000C54")]
		[Address(RVA = "0xC0EC6C", Offset = "0xC0EC6C", VA = "0xC0EC6C")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000C55")]
		[Address(RVA = "0xC0ED08", Offset = "0xC0ED08", VA = "0xC0ED08")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6000C59")]
	[Address(RVA = "0xC0EDC8", Offset = "0xC0EDC8", VA = "0xC0EDC8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000C5A")]
	[Address(RVA = "0xC0EE04", Offset = "0xC0EE04", VA = "0xC0EE04")]
	private void LoadTweens()
	{
	}

	[Token(Token = "0x6000C5B")]
	[Address(RVA = "0xC0F5D0", Offset = "0xC0F5D0", VA = "0xC0F5D0")]
	private void Tween_onTweenStop()
	{
	}

	[Token(Token = "0x6000C5C")]
	[Address(RVA = "0xC0F680", Offset = "0xC0F680", VA = "0xC0F680")]
	private void Tween_onTweenStart()
	{
	}

	[Token(Token = "0x6000C5D")]
	[Address(RVA = "0xC0F26C", Offset = "0xC0F26C", VA = "0xC0F26C")]
	public void ShowImmediate()
	{
	}

	[Token(Token = "0x6000C5E")]
	[Address(RVA = "0xC0F420", Offset = "0xC0F420", VA = "0xC0F420")]
	public void HideImmediate()
	{
	}

	[Token(Token = "0x6000C5F")]
	[Address(RVA = "0xC0F690", Offset = "0xC0F690", VA = "0xC0F690")]
	public void Play()
	{
	}

	[Token(Token = "0x6000C60")]
	[Address(RVA = "0xC0F5E8", Offset = "0xC0F5E8", VA = "0xC0F5E8")]
	private void FinishTween()
	{
	}

	[Token(Token = "0x6000C61")]
	[Address(RVA = "0xC0F890", Offset = "0xC0F890", VA = "0xC0F890")]
	public void SetShown(bool isShown, [Optional] Action complete)
	{
	}

	[Token(Token = "0x6000C62")]
	[Address(RVA = "0xC0FA84", Offset = "0xC0FA84", VA = "0xC0FA84")]
	public void SetShownImmediate(bool isShown)
	{
	}

	[Token(Token = "0x6000C63")]
	[Address(RVA = "0xC0F6AC", Offset = "0xC0F6AC", VA = "0xC0F6AC")]
	public void Show([Optional] Action complete)
	{
	}

	[Token(Token = "0x6000C64")]
	[Address(RVA = "0xC0FA90", Offset = "0xC0FA90", VA = "0xC0FA90")]
	public void Hide()
	{
	}

	[Token(Token = "0x6000C65")]
	[Address(RVA = "0xC0F8A4", Offset = "0xC0F8A4", VA = "0xC0F8A4")]
	public void Hide([Optional] Action complete)
	{
	}

	[Token(Token = "0x6000C66")]
	[Address(RVA = "0xC0FA98", Offset = "0xC0FA98", VA = "0xC0FA98")]
	public void Toggle()
	{
	}

	[Token(Token = "0x6000C67")]
	[Address(RVA = "0xC0FAB0", Offset = "0xC0FAB0", VA = "0xC0FAB0")]
	public TweenSet()
	{
	}
}
[Token(Token = "0x2000254")]
public class TweenSizeDelta : BaseTween
{
	[Token(Token = "0x4000ECA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private RectTransform xForm;

	[Token(Token = "0x4000ECB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Vector2 from;

	[Token(Token = "0x4000ECC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Vector2 to;

	[Token(Token = "0x6000C68")]
	[Address(RVA = "0xC0FB2C", Offset = "0xC0FB2C", VA = "0xC0FB2C", Slot = "5")]
	protected override void OnInit()
	{
	}

	[Token(Token = "0x6000C69")]
	[Address(RVA = "0xC0FB7C", Offset = "0xC0FB7C", VA = "0xC0FB7C", Slot = "4")]
	protected override void Apply(float value)
	{
	}

	[Token(Token = "0x6000C6A")]
	[Address(RVA = "0xC0FBB0", Offset = "0xC0FBB0", VA = "0xC0FBB0")]
	public TweenSizeDelta()
	{
	}
}
[Token(Token = "0x2000255")]
public class TweenTrigger : MonoBehaviour
{
	[Token(Token = "0x4000ECD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private List<BaseTween> tweens;

	[Token(Token = "0x4000ECE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform[] tweenTargets;

	[Token(Token = "0x4000ECF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float cooldown;

	[Token(Token = "0x4000ED0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float lastFireTime;

	[Token(Token = "0x6000C6B")]
	[Address(RVA = "0xC0FC14", Offset = "0xC0FC14", VA = "0xC0FC14")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000C6C")]
	[Address(RVA = "0xC0FD20", Offset = "0xC0FD20", VA = "0xC0FD20")]
	private void OnCollisionEnter(Collision other)
	{
	}

	[Token(Token = "0x6000C6D")]
	[Address(RVA = "0xC0FE98", Offset = "0xC0FE98", VA = "0xC0FE98")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000C6E")]
	[Address(RVA = "0xC0FD24", Offset = "0xC0FD24", VA = "0xC0FD24")]
	private void Fire()
	{
	}

	[Token(Token = "0x6000C6F")]
	[Address(RVA = "0xC0FE9C", Offset = "0xC0FE9C", VA = "0xC0FE9C")]
	public TweenTrigger()
	{
	}
}
[Token(Token = "0x2000256")]
public class TweenUIPivot : BaseTween
{
	[Token(Token = "0x4000ED1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private RectTransform rectTransform;

	[Token(Token = "0x4000ED2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Vector2 fromPivot;

	[Token(Token = "0x4000ED3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Vector2 toPivot;

	[Token(Token = "0x6000C70")]
	[Address(RVA = "0xC0FEA4", Offset = "0xC0FEA4", VA = "0xC0FEA4", Slot = "5")]
	protected override void OnInit()
	{
	}

	[Token(Token = "0x6000C71")]
	[Address(RVA = "0xC0FF10", Offset = "0xC0FF10", VA = "0xC0FF10", Slot = "4")]
	protected override void Apply(float value)
	{
	}

	[Token(Token = "0x6000C72")]
	[Address(RVA = "0xC0FF58", Offset = "0xC0FF58", VA = "0xC0FF58")]
	public TweenUIPivot()
	{
	}
}
[Token(Token = "0x2000257")]
public class Accolade : MonoBehaviour
{
	[Token(Token = "0x4000ED4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AccoladeType accoladeType;

	[Token(Token = "0x4000ED5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AnimationCurve timeCurve;

	[Token(Token = "0x4000ED6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float timeDipDuration;

	[Token(Token = "0x4000ED7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Canvas canvas;

	[Token(Token = "0x4000ED8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public TweenScale scaler;

	[Token(Token = "0x4000ED9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float duration;

	[Token(Token = "0x6000C73")]
	[Address(RVA = "0xC0FF60", Offset = "0xC0FF60", VA = "0xC0FF60")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000C74")]
	[Address(RVA = "0xC0FFE4", Offset = "0xC0FFE4", VA = "0xC0FFE4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000C75")]
	[Address(RVA = "0xC10004", Offset = "0xC10004", VA = "0xC10004")]
	public Accolade()
	{
	}
}
[Token(Token = "0x2000258")]
public class AmmoCounter : MonoBehaviour
{
	[Token(Token = "0x2000259")]
	[CompilerGenerated]
	private sealed class <ReloadRoutine>d__10 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000EDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000EDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000EDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AmmoCounter <>4__this;

		[Token(Token = "0x4000EE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float duration;

		[Token(Token = "0x4000EE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <time>5__2;

		[Token(Token = "0x1700016E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000C82")]
			[Address(RVA = "0xC10774", Offset = "0xC10774", VA = "0xC10774", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700016F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C84")]
			[Address(RVA = "0xC107BC", Offset = "0xC107BC", VA = "0xC107BC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C7F")]
		[Address(RVA = "0xC1066C", Offset = "0xC1066C", VA = "0xC1066C")]
		[DebuggerHidden]
		public <ReloadRoutine>d__10(int <>1__state)
		{
		}

		[Token(Token = "0x6000C80")]
		[Address(RVA = "0xC1069C", Offset = "0xC1069C", VA = "0xC1069C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000C81")]
		[Address(RVA = "0xC106A0", Offset = "0xC106A0", VA = "0xC106A0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C83")]
		[Address(RVA = "0xC1077C", Offset = "0xC1077C", VA = "0xC1077C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000EDA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TextMeshProUGUI ammoCount;

	[Token(Token = "0x4000EDB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Image reloadRing;

	[Token(Token = "0x4000EDC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool showing;

	[Token(Token = "0x6000C76")]
	[Address(RVA = "0xC10020", Offset = "0xC10020", VA = "0xC10020")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000C77")]
	[Address(RVA = "0xC1011C", Offset = "0xC1011C", VA = "0xC1011C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000C78")]
	[Address(RVA = "0xC10218", Offset = "0xC10218", VA = "0xC10218")]
	public void UpdateAmmoCount(int ammoLeft)
	{
	}

	[Token(Token = "0x6000C79")]
	[Address(RVA = "0xC10350", Offset = "0xC10350", VA = "0xC10350")]
	public void UpdatReloadCount(int clipSize)
	{
	}

	[Token(Token = "0x6000C7A")]
	[Address(RVA = "0xC10420", Offset = "0xC10420", VA = "0xC10420")]
	public void ShowCount(bool show)
	{
	}

	[Token(Token = "0x6000C7B")]
	[Address(RVA = "0xC104B8", Offset = "0xC104B8", VA = "0xC104B8")]
	private void UpdateShowCount()
	{
	}

	[Token(Token = "0x6000C7C")]
	[Address(RVA = "0xC10548", Offset = "0xC10548", VA = "0xC10548")]
	public void Reloading(float duration)
	{
	}

	[Token(Token = "0x6000C7D")]
	[Address(RVA = "0xC105F4", Offset = "0xC105F4", VA = "0xC105F4")]
	[IteratorStateMachine(typeof(<ReloadRoutine>d__10))]
	private IEnumerator ReloadRoutine(float duration)
	{
		return null;
	}

	[Token(Token = "0x6000C7E")]
	[Address(RVA = "0xC10694", Offset = "0xC10694", VA = "0xC10694")]
	public AmmoCounter()
	{
	}
}
[Token(Token = "0x200025A")]
public class AwardNotificationController : MonoBehaviour
{
	[Token(Token = "0x4000EE2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static AwardNotificationController instance;

	[Token(Token = "0x4000EE3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AwardSection awardSection;

	[Token(Token = "0x4000EE4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Canvas canvas;

	[Token(Token = "0x4000EE5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AnimationCurve scaleCurve;

	[Token(Token = "0x4000EE6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float minDistance;

	[Token(Token = "0x4000EE7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float maxDistance;

	[Token(Token = "0x4000EE8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float scaleFactor;

	[Token(Token = "0x4000EE9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float posScaleFactor;

	[Token(Token = "0x4000EEA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform xForm;

	[Token(Token = "0x4000EEB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Vector3 refPosition;

	[Token(Token = "0x4000EEC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Transform targetXForm;

	[Token(Token = "0x4000EED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float distance;

	[Token(Token = "0x4000EEE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private float offsetScale;

	[Token(Token = "0x4000EEF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float offsetYPos;

	[Token(Token = "0x4000EF0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private Vector3 currentPos;

	[Token(Token = "0x6000C85")]
	[Address(RVA = "0xC107C4", Offset = "0xC107C4", VA = "0xC107C4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000C86")]
	[Address(RVA = "0xC10820", Offset = "0xC10820", VA = "0xC10820")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000C87")]
	[Address(RVA = "0xC1091C", Offset = "0xC1091C", VA = "0xC1091C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000C88")]
	[Address(RVA = "0xC10A18", Offset = "0xC10A18", VA = "0xC10A18")]
	private void Start()
	{
	}

	[Token(Token = "0x6000C89")]
	[Address(RVA = "0xC10A90", Offset = "0xC10A90", VA = "0xC10A90")]
	public void SetPosition(Vector3 pos)
	{
	}

	[Token(Token = "0x6000C8A")]
	[Address(RVA = "0xC10C1C", Offset = "0xC10C1C", VA = "0xC10C1C")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000C8B")]
	[Address(RVA = "0xC10E18", Offset = "0xC10E18", VA = "0xC10E18")]
	private void ResetState()
	{
	}

	[Token(Token = "0x6000C8C")]
	[Address(RVA = "0xC10EC8", Offset = "0xC10EC8", VA = "0xC10EC8")]
	public AwardNotificationController()
	{
	}
}
[Token(Token = "0x200025B")]
public class AwardSection : MonoBehaviour
{
	[Token(Token = "0x200025C")]
	[CompilerGenerated]
	private sealed class <TweenScale>d__25 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000F05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000F06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000F07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AwardSection <>4__this;

		[Token(Token = "0x4000F08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <time>5__2;

		[Token(Token = "0x17000170")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000C98")]
			[Address(RVA = "0xC11498", Offset = "0xC11498", VA = "0xC11498", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000171")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C9A")]
			[Address(RVA = "0xC114E0", Offset = "0xC114E0", VA = "0xC114E0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C95")]
		[Address(RVA = "0xC112FC", Offset = "0xC112FC", VA = "0xC112FC")]
		[DebuggerHidden]
		public <TweenScale>d__25(int <>1__state)
		{
		}

		[Token(Token = "0x6000C96")]
		[Address(RVA = "0xC11364", Offset = "0xC11364", VA = "0xC11364", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000C97")]
		[Address(RVA = "0xC11368", Offset = "0xC11368", VA = "0xC11368", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C99")]
		[Address(RVA = "0xC114A0", Offset = "0xC114A0", VA = "0xC114A0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200025D")]
	[CompilerGenerated]
	private sealed class <TweenAlpha>d__26 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000F09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000F0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000F0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AwardSection <>4__this;

		[Token(Token = "0x4000F0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <time>5__2;

		[Token(Token = "0x17000172")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000C9E")]
			[Address(RVA = "0xC1163C", Offset = "0xC1163C", VA = "0xC1163C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000173")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000CA0")]
			[Address(RVA = "0xC11684", Offset = "0xC11684", VA = "0xC11684", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C9B")]
		[Address(RVA = "0xC11324", Offset = "0xC11324", VA = "0xC11324")]
		[DebuggerHidden]
		public <TweenAlpha>d__26(int <>1__state)
		{
		}

		[Token(Token = "0x6000C9C")]
		[Address(RVA = "0xC114E8", Offset = "0xC114E8", VA = "0xC114E8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000C9D")]
		[Address(RVA = "0xC114EC", Offset = "0xC114EC", VA = "0xC114EC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C9F")]
		[Address(RVA = "0xC11644", Offset = "0xC11644", VA = "0xC11644", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000EF1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TextMeshProUGUI awardText;

	[Token(Token = "0x4000EF2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextMeshProUGUI awardCoinValueText;

	[Token(Token = "0x4000EF3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject headShot;

	[Token(Token = "0x4000EF4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject boom;

	[Token(Token = "0x4000EF5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject doubleKill;

	[Token(Token = "0x4000EF6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject tripleKill;

	[Token(Token = "0x4000EF7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject quadraKill;

	[Token(Token = "0x4000EF8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject monsterKill;

	[Token(Token = "0x4000EF9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Image textImage;

	[Token(Token = "0x4000EFA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Image textGlow;

	[Token(Token = "0x4000EFB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float scaleDuration;

	[Token(Token = "0x4000EFC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public AnimationCurve scaleCurve;

	[Token(Token = "0x4000EFD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public float alphaDuration;

	[Token(Token = "0x4000EFE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public AnimationCurve alphaCurve;

	[Token(Token = "0x4000EFF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public CanvasGroup group;

	[Token(Token = "0x4000F00")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Vector3 V3ZERO;

	[Token(Token = "0x4000F01")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private Vector3 V3ONE;

	[Token(Token = "0x4000F02")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Transform xForm;

	[Token(Token = "0x4000F03")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Accolade[] accolades;

	[Token(Token = "0x4000F04")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private Accolade lastAccolade;

	[Token(Token = "0x6000C8D")]
	[Address(RVA = "0xC10EDC", Offset = "0xC10EDC", VA = "0xC10EDC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000C8E")]
	[Address(RVA = "0xC10A8C", Offset = "0xC10A8C", VA = "0xC10A8C")]
	public void Setup()
	{
	}

	[Token(Token = "0x6000C8F")]
	[Address(RVA = "0xC10E30", Offset = "0xC10E30", VA = "0xC10E30")]
	public void ResetState()
	{
	}

	[Token(Token = "0x6000C90")]
	[Address(RVA = "0xC10FB8", Offset = "0xC10FB8", VA = "0xC10FB8")]
	private void SetAccolade(AccoladeType _type)
	{
	}

	[Token(Token = "0x6000C91")]
	[Address(RVA = "0xC11114", Offset = "0xC11114", VA = "0xC11114")]
	public void AddAwardText(AccoladeType _type, string text, int tier, bool showTitle = true)
	{
	}

	[Token(Token = "0x6000C92")]
	[Address(RVA = "0xC1122C", Offset = "0xC1122C", VA = "0xC1122C")]
	[IteratorStateMachine(typeof(<TweenScale>d__25))]
	private IEnumerator TweenScale()
	{
		return null;
	}

	[Token(Token = "0x6000C93")]
	[Address(RVA = "0xC11294", Offset = "0xC11294", VA = "0xC11294")]
	[IteratorStateMachine(typeof(<TweenAlpha>d__26))]
	private IEnumerator TweenAlpha()
	{
		return null;
	}

	[Token(Token = "0x6000C94")]
	[Address(RVA = "0xC1134C", Offset = "0xC1134C", VA = "0xC1134C")]
	public AwardSection()
	{
	}
}
[Token(Token = "0x200025E")]
public class BlingCoin : MonoBehaviour
{
	[Token(Token = "0x4000F0D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Transform commonScreenCoinXform;

	[NonSerialized]
	[Token(Token = "0x4000F0E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float lerp;

	[NonSerialized]
	[Token(Token = "0x4000F0F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool sequence_Complete;

	[NonSerialized]
	[Token(Token = "0x4000F10")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
	public bool moveA_Complete;

	[NonSerialized]
	[Token(Token = "0x4000F11")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
	public bool moveB_Complete;

	[NonSerialized]
	[Token(Token = "0x4000F12")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Vector3 startPos;

	[NonSerialized]
	[Token(Token = "0x4000F13")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public Vector3 endPos;

	[NonSerialized]
	[Token(Token = "0x4000F14")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform xForm;

	[NonSerialized]
	[Token(Token = "0x4000F15")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float nextMove;

	[NonSerialized]
	[Token(Token = "0x4000F16")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float bMoveDelay;

	[NonSerialized]
	[Token(Token = "0x4000F17")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public int coinValue;

	[Token(Token = "0x4000F18")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private Vector3 coinEndPos;

	[Token(Token = "0x4000F19")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public bool isGem;

	[Token(Token = "0x4000F1A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private Vector3 V3_ZERO;

	[Token(Token = "0x4000F1B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Vector3 V3_ONE;

	[Token(Token = "0x17000174")]
	public bool active
	{
		[Token(Token = "0x6000CA1")]
		[Address(RVA = "0xC1168C", Offset = "0xC1168C", VA = "0xC1168C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000CA2")]
	[Address(RVA = "0xC116AC", Offset = "0xC116AC", VA = "0xC116AC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000CA3")]
	[Address(RVA = "0xC116C8", Offset = "0xC116C8", VA = "0xC116C8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000CA4")]
	[Address(RVA = "0xC116CC", Offset = "0xC116CC", VA = "0xC116CC")]
	private void Reset()
	{
	}

	[Token(Token = "0x6000CA5")]
	[Address(RVA = "0xC11774", Offset = "0xC11774", VA = "0xC11774")]
	private void Update()
	{
	}

	[Token(Token = "0x6000CA6")]
	[Address(RVA = "0xC11B24", Offset = "0xC11B24", VA = "0xC11B24")]
	public BlingCoin()
	{
	}
}
[Token(Token = "0x200025F")]
[RequireComponent(typeof(Button))]
public class ButtonSound : MonoBehaviour
{
	[Token(Token = "0x4000F1C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioManager.SoundType sound;

	[Token(Token = "0x6000CA7")]
	[Address(RVA = "0xC11BB8", Offset = "0xC11BB8", VA = "0xC11BB8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000CA8")]
	[Address(RVA = "0xC11C68", Offset = "0xC11C68", VA = "0xC11C68")]
	private void Play()
	{
	}

	[Token(Token = "0x6000CA9")]
	[Address(RVA = "0xC11CD8", Offset = "0xC11CD8", VA = "0xC11CD8")]
	public ButtonSound()
	{
	}
}
[Token(Token = "0x2000260")]
public class CoinBlinger : MonoBehaviour
{
	[Token(Token = "0x2000261")]
	[CompilerGenerated]
	private sealed class <_spendingCoinsCo>d__30 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000F35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000F36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000F37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int amount;

		[Token(Token = "0x4000F38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int <coins>5__2;

		[Token(Token = "0x4000F39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <coinValue>5__3;

		[Token(Token = "0x17000175")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000CB6")]
			[Address(RVA = "0xC12570", Offset = "0xC12570", VA = "0xC12570", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000176")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000CB8")]
			[Address(RVA = "0xC125B8", Offset = "0xC125B8", VA = "0xC125B8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000CB3")]
		[Address(RVA = "0xC123C4", Offset = "0xC123C4", VA = "0xC123C4")]
		[DebuggerHidden]
		public <_spendingCoinsCo>d__30(int <>1__state)
		{
		}

		[Token(Token = "0x6000CB4")]
		[Address(RVA = "0xC12498", Offset = "0xC12498", VA = "0xC12498", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000CB5")]
		[Address(RVA = "0xC1249C", Offset = "0xC1249C", VA = "0xC1249C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CB7")]
		[Address(RVA = "0xC12578", Offset = "0xC12578", VA = "0xC12578", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000F1D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static CoinBlinger instance;

	[Token(Token = "0x4000F1E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform commonScreenCoinXform;

	[Token(Token = "0x4000F1F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static Action onFinishedBling;

	[Token(Token = "0x4000F20")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AnimationCurve motionCurveA;

	[Token(Token = "0x4000F21")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AnimationCurve motionCurveB;

	[Token(Token = "0x4000F22")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AnimationCurve scaleCurveA;

	[Token(Token = "0x4000F23")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AnimationCurve scaleCurveB;

	[Token(Token = "0x4000F24")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float spawnRadius;

	[Token(Token = "0x4000F25")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float coinMoveADuration;

	[Token(Token = "0x4000F26")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float coinMoveBDuration;

	[Token(Token = "0x4000F27")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float coinMoveBDelay;

	[Token(Token = "0x4000F28")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float moveASequenceDelay;

	[Token(Token = "0x4000F29")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float moveBSequenceDelay;

	[Token(Token = "0x4000F2A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject blingCoin;

	[NonSerialized]
	[Token(Token = "0x4000F2B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public int coinsBeforeReward;

	[NonSerialized]
	[Token(Token = "0x4000F2C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public int currentReward;

	[NonSerialized]
	[Token(Token = "0x4000F2D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public int activeCoins;

	[Token(Token = "0x4000F2E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private bool blinging;

	[NonSerialized]
	[Token(Token = "0x4000F2F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6D")]
	public bool soundPlayed;

	[NonSerialized]
	[Token(Token = "0x4000F30")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public BlingCoin[] coins;

	[Token(Token = "0x4000F31")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Transform xForm;

	[NonSerialized]
	[Token(Token = "0x4000F32")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public RectTransform canvasRect;

	[Token(Token = "0x4000F33")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private AudioSource soundSource;

	[Token(Token = "0x4000F34")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public int MAX_COINS;

	[Token(Token = "0x6000CAA")]
	[Address(RVA = "0xC11CE0", Offset = "0xC11CE0", VA = "0xC11CE0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000CAB")]
	[Address(RVA = "0xC11DB4", Offset = "0xC11DB4", VA = "0xC11DB4")]
	public void CreateCoinPool()
	{
	}

	[Token(Token = "0x6000CAC")]
	[Address(RVA = "0xC12008", Offset = "0xC12008", VA = "0xC12008")]
	private BlingCoin GetCoin()
	{
		return null;
	}

	[Token(Token = "0x6000CAD")]
	[Address(RVA = "0xC11B18", Offset = "0xC11B18", VA = "0xC11B18")]
	public void PlaySound()
	{
	}

	[Token(Token = "0x6000CAE")]
	[Address(RVA = "0xC12088", Offset = "0xC12088", VA = "0xC12088")]
	public void SpawnBling(Vector3 startPos, int amount)
	{
	}

	[Token(Token = "0x6000CAF")]
	[Address(RVA = "0xC122B0", Offset = "0xC122B0", VA = "0xC122B0")]
	public void SpendCoins(int amount)
	{
	}

	[Token(Token = "0x6000CB0")]
	[Address(RVA = "0xC1235C", Offset = "0xC1235C", VA = "0xC1235C")]
	[IteratorStateMachine(typeof(<_spendingCoinsCo>d__30))]
	private IEnumerator _spendingCoinsCo(int amount)
	{
		return null;
	}

	[Token(Token = "0x6000CB1")]
	[Address(RVA = "0xC123EC", Offset = "0xC123EC", VA = "0xC123EC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000CB2")]
	[Address(RVA = "0xC12468", Offset = "0xC12468", VA = "0xC12468")]
	public CoinBlinger()
	{
	}
}
[Token(Token = "0x2000262")]
public class Fader : MonoBehaviour
{
	[Token(Token = "0x2000263")]
	[CompilerGenerated]
	private sealed class <FadeCo>d__18 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000F45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000F46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000F47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Fader <>4__this;

		[Token(Token = "0x4000F48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool _fadeColor;

		[Token(Token = "0x4000F49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float fadeTime;

		[Token(Token = "0x4000F4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <lerp>5__2;

		[Token(Token = "0x4000F4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <progress>5__3;

		[Token(Token = "0x17000177")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000CC5")]
			[Address(RVA = "0xC12FD8", Offset = "0xC12FD8", VA = "0xC12FD8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000178")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000CC7")]
			[Address(RVA = "0xC13020", Offset = "0xC13020", VA = "0xC13020", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000CC2")]
		[Address(RVA = "0xC12B88", Offset = "0xC12B88", VA = "0xC12B88")]
		[DebuggerHidden]
		public <FadeCo>d__18(int <>1__state)
		{
		}

		[Token(Token = "0x6000CC3")]
		[Address(RVA = "0xC12BC0", Offset = "0xC12BC0", VA = "0xC12BC0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000CC4")]
		[Address(RVA = "0xC12BC4", Offset = "0xC12BC4", VA = "0xC12BC4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CC6")]
		[Address(RVA = "0xC12FE0", Offset = "0xC12FE0", VA = "0xC12FE0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000F3A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Fader instance;

	[Token(Token = "0x4000F3B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool fadeInOnStart;

	[Token(Token = "0x4000F3C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MeshRenderer faderSphere;

	[Token(Token = "0x4000F3D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Color fadeColor;

	[Token(Token = "0x4000F3E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool fadeInProgress;

	[Token(Token = "0x4000F3F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	public bool faded;

	[Token(Token = "0x4000F40")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
	private bool fadeIn;

	[Token(Token = "0x4000F41")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3B")]
	private bool fadeVolume;

	[Token(Token = "0x4000F42")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Action onCompleteCB;

	[Token(Token = "0x4000F43")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Material faderMat;

	[Token(Token = "0x4000F44")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Color currentFadeColor;

	[Token(Token = "0x6000CB9")]
	[Address(RVA = "0xC125C0", Offset = "0xC125C0", VA = "0xC125C0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000CBA")]
	[Address(RVA = "0xC126AC", Offset = "0xC126AC", VA = "0xC126AC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000CBB")]
	[Address(RVA = "0xC12830", Offset = "0xC12830", VA = "0xC12830")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000CBC")]
	[Address(RVA = "0xC128C8", Offset = "0xC128C8", VA = "0xC128C8")]
	public void SetFadeLevel(float value, Color color)
	{
	}

	[Token(Token = "0x6000CBD")]
	[Address(RVA = "0xC12A04", Offset = "0xC12A04", VA = "0xC12A04")]
	public void AbortFadeInProgress()
	{
	}

	[Token(Token = "0x6000CBE")]
	[Address(RVA = "0xC12750", Offset = "0xC12750", VA = "0xC12750")]
	public Coroutine FadeIn(float fadeTime, bool fadeSound, bool _fadeColor = false, [Optional] Action onComplete)
	{
		return null;
	}

	[Token(Token = "0x6000CBF")]
	[Address(RVA = "0xC12AB4", Offset = "0xC12AB4", VA = "0xC12AB4")]
	public Coroutine FadeOut(float fadeTime, bool fadeSound, bool _fadeColor = false, [Optional] Action onComplete)
	{
		return null;
	}

	[Token(Token = "0x6000CC0")]
	[Address(RVA = "0xC12A28", Offset = "0xC12A28", VA = "0xC12A28")]
	[IteratorStateMachine(typeof(<FadeCo>d__18))]
	private IEnumerator FadeCo(float fadeTime, bool _fadeColor)
	{
		return null;
	}

	[Token(Token = "0x6000CC1")]
	[Address(RVA = "0xC12BB0", Offset = "0xC12BB0", VA = "0xC12BB0")]
	public Fader()
	{
	}
}
[Token(Token = "0x2000264")]
[AddComponentMenu("UI/Sliced Filled Image", 11)]
public class SlicedFilledImage : MaskableGraphic, ISerializationCallbackReceiver, ILayoutElement, ICanvasRaycastFilter
{
	[Token(Token = "0x2000265")]
	private static class SetPropertyUtility
	{
		[Token(Token = "0x6000CF4")]
		public static bool SetStruct<T>(ref T currentValue, T newValue) where T : struct
		{
			return default(bool);
		}

		[Token(Token = "0x6000CF5")]
		public static bool SetClass<T>(ref T currentValue, T newValue) where T : class
		{
			return default(bool);
		}
	}

	[Token(Token = "0x2000266")]
	public enum FillDirection
	{
		[Token(Token = "0x4000F5B")]
		Right,
		[Token(Token = "0x4000F5C")]
		Left,
		[Token(Token = "0x4000F5D")]
		Up,
		[Token(Token = "0x4000F5E")]
		Down
	}

	[Token(Token = "0x4000F4C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly Vector3[] s_Vertices;

	[Token(Token = "0x4000F4D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static readonly Vector2[] s_UVs;

	[Token(Token = "0x4000F4E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static readonly Vector2[] s_SlicedVertices;

	[Token(Token = "0x4000F4F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static readonly Vector2[] s_SlicedUVs;

	[Token(Token = "0x4000F50")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	[SerializeField]
	private Sprite m_Sprite;

	[Token(Token = "0x4000F51")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	[SerializeField]
	private FillDirection m_FillDirection;

	[Token(Token = "0x4000F52")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	[Range(0f, 1f)]
	[SerializeField]
	private float m_FillAmount;

	[Token(Token = "0x4000F53")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	[SerializeField]
	private bool m_FillCenter;

	[Token(Token = "0x4000F54")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	[SerializeField]
	private float m_PixelsPerUnitMultiplier;

	[NonSerialized]
	[Token(Token = "0x4000F55")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private Sprite m_OverrideSprite;

	[Token(Token = "0x4000F57")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	private bool m_Tracked;

	[Token(Token = "0x4000F58")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static List<SlicedFilledImage> m_TrackedTexturelessImages;

	[Token(Token = "0x4000F59")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static bool s_Initialized;

	[Token(Token = "0x17000179")]
	public Sprite sprite
	{
		[Token(Token = "0x6000CC8")]
		[Address(RVA = "0xC13028", Offset = "0xC13028", VA = "0xC13028")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000CC9")]
		[Address(RVA = "0xC13030", Offset = "0xC13030", VA = "0xC13030")]
		set
		{
		}
	}

	[Token(Token = "0x1700017A")]
	public FillDirection fillDirection
	{
		[Token(Token = "0x6000CCA")]
		[Address(RVA = "0xC132A4", Offset = "0xC132A4", VA = "0xC132A4")]
		get
		{
			return default(FillDirection);
		}
		[Token(Token = "0x6000CCB")]
		[Address(RVA = "0xC132AC", Offset = "0xC132AC", VA = "0xC132AC")]
		set
		{
		}
	}

	[Token(Token = "0x1700017B")]
	public float fillAmount
	{
		[Token(Token = "0x6000CCC")]
		[Address(RVA = "0xC1332C", Offset = "0xC1332C", VA = "0xC1332C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000CCD")]
		[Address(RVA = "0xC13334", Offset = "0xC13334", VA = "0xC13334")]
		set
		{
		}
	}

	[Token(Token = "0x1700017C")]
	public bool fillCenter
	{
		[Token(Token = "0x6000CCE")]
		[Address(RVA = "0xC133C4", Offset = "0xC133C4", VA = "0xC133C4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000CCF")]
		[Address(RVA = "0xC133CC", Offset = "0xC133CC", VA = "0xC133CC")]
		set
		{
		}
	}

	[Token(Token = "0x1700017D")]
	public float pixelsPerUnitMultiplier
	{
		[Token(Token = "0x6000CD0")]
		[Address(RVA = "0xC1344C", Offset = "0xC1344C", VA = "0xC1344C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000CD1")]
		[Address(RVA = "0xC13454", Offset = "0xC13454", VA = "0xC13454")]
		set
		{
		}
	}

	[Token(Token = "0x1700017E")]
	public float pixelsPerUnit
	{
		[Token(Token = "0x6000CD2")]
		[Address(RVA = "0xC13468", Offset = "0xC13468", VA = "0xC13468")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x1700017F")]
	public Sprite overrideSprite
	{
		[Token(Token = "0x6000CD3")]
		[Address(RVA = "0xC135E4", Offset = "0xC135E4", VA = "0xC135E4")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000CD4")]
		[Address(RVA = "0xC135E8", Offset = "0xC135E8", VA = "0xC135E8")]
		set
		{
		}
	}

	[Token(Token = "0x17000180")]
	private Sprite activeSprite
	{
		[Token(Token = "0x6000CD5")]
		[Address(RVA = "0xC1356C", Offset = "0xC1356C", VA = "0xC1356C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000181")]
	public override Texture mainTexture
	{
		[Token(Token = "0x6000CD6")]
		[Address(RVA = "0xC13670", Offset = "0xC13670", VA = "0xC13670", Slot = "35")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000182")]
	public bool hasBorder
	{
		[Token(Token = "0x6000CD7")]
		[Address(RVA = "0xC137E8", Offset = "0xC137E8", VA = "0xC137E8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000183")]
	public override Material material
	{
		[Token(Token = "0x6000CD8")]
		[Address(RVA = "0xC138A0", Offset = "0xC138A0", VA = "0xC138A0", Slot = "32")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000CD9")]
		[Address(RVA = "0xC139D0", Offset = "0xC139D0", VA = "0xC139D0", Slot = "33")]
		set
		{
		}
	}

	[Token(Token = "0x17000184")]
	public float alphaHitTestMinimumThreshold
	{
		[Token(Token = "0x6000CDA")]
		[Address(RVA = "0xC139D8", Offset = "0xC139D8", VA = "0xC139D8")]
		[CompilerGenerated]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000CDB")]
		[Address(RVA = "0xC139E0", Offset = "0xC139E0", VA = "0xC139E0")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000185")]
	private int UnityEngine.UI.ILayoutElement.layoutPriority
	{
		[Token(Token = "0x6000CE4")]
		[Address(RVA = "0xC14DAC", Offset = "0xC14DAC", VA = "0xC14DAC", Slot = "75")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000186")]
	private float UnityEngine.UI.ILayoutElement.minWidth
	{
		[Token(Token = "0x6000CE5")]
		[Address(RVA = "0xC14DB4", Offset = "0xC14DB4", VA = "0xC14DB4", Slot = "69")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000187")]
	private float UnityEngine.UI.ILayoutElement.minHeight
	{
		[Token(Token = "0x6000CE6")]
		[Address(RVA = "0xC14DBC", Offset = "0xC14DBC", VA = "0xC14DBC", Slot = "72")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000188")]
	private float UnityEngine.UI.ILayoutElement.flexibleWidth
	{
		[Token(Token = "0x6000CE7")]
		[Address(RVA = "0xC14DC4", Offset = "0xC14DC4", VA = "0xC14DC4", Slot = "71")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000189")]
	private float UnityEngine.UI.ILayoutElement.flexibleHeight
	{
		[Token(Token = "0x6000CE8")]
		[Address(RVA = "0xC14DCC", Offset = "0xC14DCC", VA = "0xC14DCC", Slot = "74")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x1700018A")]
	private float UnityEngine.UI.ILayoutElement.preferredWidth
	{
		[Token(Token = "0x6000CE9")]
		[Address(RVA = "0xC14DD4", Offset = "0xC14DD4", VA = "0xC14DD4", Slot = "70")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x1700018B")]
	private float UnityEngine.UI.ILayoutElement.preferredHeight
	{
		[Token(Token = "0x6000CEA")]
		[Address(RVA = "0xC14E74", Offset = "0xC14E74", VA = "0xC14E74", Slot = "73")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x6000CDC")]
	[Address(RVA = "0xC139E8", Offset = "0xC139E8", VA = "0xC139E8")]
	protected SlicedFilledImage()
	{
	}

	[Token(Token = "0x6000CDD")]
	[Address(RVA = "0xC13A18", Offset = "0xC13A18", VA = "0xC13A18", Slot = "5")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x6000CDE")]
	[Address(RVA = "0xC13A34", Offset = "0xC13A34", VA = "0xC13A34", Slot = "7")]
	protected override void OnDisable()
	{
	}

	[Token(Token = "0x6000CDF")]
	[Address(RVA = "0xC13AE8", Offset = "0xC13AE8", VA = "0xC13AE8", Slot = "44")]
	protected override void OnPopulateMesh(VertexHelper vh)
	{
	}

	[Token(Token = "0x6000CE0")]
	[Address(RVA = "0xC1452C", Offset = "0xC1452C", VA = "0xC1452C", Slot = "40")]
	protected override void UpdateMaterial()
	{
	}

	[Token(Token = "0x6000CE1")]
	[Address(RVA = "0xC13B8C", Offset = "0xC13B8C", VA = "0xC13B8C")]
	private void GenerateSlicedFilledSprite(VertexHelper vh)
	{
	}

	[Token(Token = "0x6000CE2")]
	[Address(RVA = "0xC14C48", Offset = "0xC14C48", VA = "0xC14C48")]
	private Vector4 GetAdjustedBorders(Vector4 border, Rect adjustedRect)
	{
		return default(Vector4);
	}

	[Token(Token = "0x6000CE3")]
	[Address(RVA = "0xC1462C", Offset = "0xC1462C", VA = "0xC1462C")]
	private void GenerateFilledSprite(VertexHelper vh, Vector4 vertices, Vector4 uvs, float fillAmount)
	{
	}

	[Token(Token = "0x6000CEB")]
	[Address(RVA = "0xC14F14", Offset = "0xC14F14", VA = "0xC14F14", Slot = "67")]
	private void UnityEngine.UI.ILayoutElement.CalculateLayoutInputHorizontal()
	{
	}

	[Token(Token = "0x6000CEC")]
	[Address(RVA = "0xC14F18", Offset = "0xC14F18", VA = "0xC14F18", Slot = "68")]
	private void UnityEngine.UI.ILayoutElement.CalculateLayoutInputVertical()
	{
	}

	[Token(Token = "0x6000CED")]
	[Address(RVA = "0xC14F1C", Offset = "0xC14F1C", VA = "0xC14F1C", Slot = "76")]
	private bool UnityEngine.ICanvasRaycastFilter.IsRaycastLocationValid(Vector2 screenPoint, Camera eventCamera)
	{
		return default(bool);
	}

	[Token(Token = "0x6000CEE")]
	[Address(RVA = "0xC15590", Offset = "0xC15590", VA = "0xC15590", Slot = "65")]
	private void UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize()
	{
	}

	[Token(Token = "0x6000CEF")]
	[Address(RVA = "0xC15594", Offset = "0xC15594", VA = "0xC15594", Slot = "66")]
	private void UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize()
	{
	}

	[Token(Token = "0x6000CF0")]
	[Address(RVA = "0xC130B8", Offset = "0xC130B8", VA = "0xC130B8")]
	private void TrackImage()
	{
	}

	[Token(Token = "0x6000CF1")]
	[Address(RVA = "0xC13A60", Offset = "0xC13A60", VA = "0xC13A60")]
	private void UnTrackImage()
	{
	}

	[Token(Token = "0x6000CF2")]
	[Address(RVA = "0xC155B4", Offset = "0xC155B4", VA = "0xC155B4")]
	private static void RebuildImage(SpriteAtlas spriteAtlas)
	{
	}
}
[Token(Token = "0x2000267")]
public class Sparkle : MonoBehaviour
{
	[Token(Token = "0x4000F5F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SparkleController myController;

	[Token(Token = "0x4000F60")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform xForm;

	[Token(Token = "0x4000F61")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject gObject;

	[Token(Token = "0x4000F62")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private BaseTween[] tweens;

	[Token(Token = "0x6000CF6")]
	[Address(RVA = "0xC15828", Offset = "0xC15828", VA = "0xC15828")]
	public void Init()
	{
	}

	[Token(Token = "0x6000CF7")]
	[Address(RVA = "0xC15898", Offset = "0xC15898", VA = "0xC15898")]
	public void PlayTweens()
	{
	}

	[Token(Token = "0x6000CF8")]
	[Address(RVA = "0xC158FC", Offset = "0xC158FC", VA = "0xC158FC")]
	public void ReturnToPool()
	{
	}

	[Token(Token = "0x6000CF9")]
	[Address(RVA = "0xC15958", Offset = "0xC15958", VA = "0xC15958")]
	public Sparkle()
	{
	}
}
[Token(Token = "0x2000268")]
public class SparkleController : MonoBehaviour
{
	[Token(Token = "0x4000F63")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject sparklePrefab;

	[Token(Token = "0x4000F64")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform[] sparklePoints;

	[Token(Token = "0x4000F65")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float minDelay;

	[Token(Token = "0x4000F66")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float maxDelay;

	[Token(Token = "0x4000F67")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float minScale;

	[Token(Token = "0x4000F68")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float maxScale;

	[Token(Token = "0x4000F69")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int maxActiveSparkles;

	[Token(Token = "0x4000F6A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private int activeSparkles;

	[Token(Token = "0x4000F6B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int sparkleIndex;

	[Token(Token = "0x4000F6C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private int pointIndex;

	[Token(Token = "0x4000F6D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float nextSparkleTime;

	[Token(Token = "0x4000F6E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Sparkle[] sparkles;

	[Token(Token = "0x4000F6F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool initialised;

	[Token(Token = "0x6000CFA")]
	[Address(RVA = "0xC15960", Offset = "0xC15960", VA = "0xC15960")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000CFB")]
	[Address(RVA = "0xC15964", Offset = "0xC15964", VA = "0xC15964")]
	private void CreatePool()
	{
	}

	[Token(Token = "0x6000CFC")]
	[Address(RVA = "0xC15B24", Offset = "0xC15B24", VA = "0xC15B24")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000CFD")]
	[Address(RVA = "0xC15BCC", Offset = "0xC15BCC", VA = "0xC15BCC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000CFE")]
	[Address(RVA = "0xC15918", Offset = "0xC15918", VA = "0xC15918")]
	public void ReturnToPool(Sparkle sparkle)
	{
	}

	[Token(Token = "0x6000CFF")]
	[Address(RVA = "0xC15DF0", Offset = "0xC15DF0", VA = "0xC15DF0")]
	public SparkleController()
	{
	}
}
[Token(Token = "0x2000269")]
public class Splash : MonoBehaviour
{
	[Token(Token = "0x200026A")]
	[CompilerGenerated]
	private sealed class <Load>d__13 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000F7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000F7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000F7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Splash <>4__this;

		[Token(Token = "0x4000F7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <delay>5__2;

		[Token(Token = "0x4000F7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private DateTime <start>5__3;

		[Token(Token = "0x4000F7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private AsyncOperation <async>5__4;

		[Token(Token = "0x1700018C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000D08")]
			[Address(RVA = "0xC164D8", Offset = "0xC164D8", VA = "0xC164D8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700018D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000D0A")]
			[Address(RVA = "0xC16520", Offset = "0xC16520", VA = "0xC16520", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D05")]
		[Address(RVA = "0xC16058", Offset = "0xC16058", VA = "0xC16058")]
		[DebuggerHidden]
		public <Load>d__13(int <>1__state)
		{
		}

		[Token(Token = "0x6000D06")]
		[Address(RVA = "0xC16094", Offset = "0xC16094", VA = "0xC16094", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000D07")]
		[Address(RVA = "0xC16098", Offset = "0xC16098", VA = "0xC16098", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D09")]
		[Address(RVA = "0xC164E0", Offset = "0xC164E0", VA = "0xC164E0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000F70")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject logo;

	[Token(Token = "0x4000F71")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float loadDelay;

	[Token(Token = "0x4000F72")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float logoDelay;

	[Token(Token = "0x4000F73")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TweenColor fadeIn;

	[Token(Token = "0x4000F74")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public TweenColor fadeOut;

	[Token(Token = "0x4000F75")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Vector3 logoOffset;

	[Token(Token = "0x4000F76")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Transform eyeCenter;

	[Token(Token = "0x4000F77")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Transform logoXForm;

	[Token(Token = "0x4000F78")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public bool progressLoad;

	[Token(Token = "0x4000F79")]
	public const int MAIN_SCENE_INDEX = 1;

	[Token(Token = "0x6000D00")]
	[Address(RVA = "0xC15E0C", Offset = "0xC15E0C", VA = "0xC15E0C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000D01")]
	[Address(RVA = "0xC15E44", Offset = "0xC15E44", VA = "0xC15E44")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000D02")]
	[Address(RVA = "0xC15F2C", Offset = "0xC15F2C", VA = "0xC15F2C")]
	private void ResetTracking()
	{
	}

	[Token(Token = "0x6000D03")]
	[Address(RVA = "0xC15EC4", Offset = "0xC15EC4", VA = "0xC15EC4")]
	[IteratorStateMachine(typeof(<Load>d__13))]
	private IEnumerator Load()
	{
		return null;
	}

	[Token(Token = "0x6000D04")]
	[Address(RVA = "0xC16080", Offset = "0xC16080", VA = "0xC16080")]
	public Splash()
	{
	}
}
[Token(Token = "0x200026B")]
[RequireComponent(typeof(CanvasGroup))]
public abstract class UIScreen : MonoBehaviour
{
	[Token(Token = "0x4000F80")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private CanvasGroup cg;

	[Token(Token = "0x4000F81")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private UIScreen _parent;

	[Token(Token = "0x1700018E")]
	public UIScreen parent
	{
		[Token(Token = "0x6000D0B")]
		[Address(RVA = "0xC16528", Offset = "0xC16528", VA = "0xC16528")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000D0C")]
	[Address(RVA = "0xC16604", Offset = "0xC16604", VA = "0xC16604", Slot = "4")]
	public virtual void EnableInteraction(bool on)
	{
	}

	[Token(Token = "0x6000D0D")]
	[Address(RVA = "0xC166B8", Offset = "0xC166B8", VA = "0xC166B8", Slot = "5")]
	public virtual void EnableScreen(bool on, bool immediate = false)
	{
	}

	[Token(Token = "0x6000D0E")]
	[Address(RVA = "0xC166E0", Offset = "0xC166E0", VA = "0xC166E0")]
	protected UIScreen()
	{
	}
}
[Token(Token = "0x200026C")]
public class UIScreenManager : MonoBehaviour
{
	[Token(Token = "0x200026D")]
	[CompilerGenerated]
	private sealed class <TimedStatusDismiss>d__22 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000F8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000F8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000F8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UIScreenManager <>4__this;

		[Token(Token = "0x17000190")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000D22")]
			[Address(RVA = "0xC17704", Offset = "0xC17704", VA = "0xC17704", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000191")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000D24")]
			[Address(RVA = "0xC1774C", Offset = "0xC1774C", VA = "0xC1774C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D1F")]
		[Address(RVA = "0xC1753C", Offset = "0xC1753C", VA = "0xC1753C")]
		[DebuggerHidden]
		public <TimedStatusDismiss>d__22(int <>1__state)
		{
		}

		[Token(Token = "0x6000D20")]
		[Address(RVA = "0xC17650", Offset = "0xC17650", VA = "0xC17650", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000D21")]
		[Address(RVA = "0xC17654", Offset = "0xC17654", VA = "0xC17654", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D23")]
		[Address(RVA = "0xC1770C", Offset = "0xC1770C", VA = "0xC1770C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000F82")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static UIScreenManager instance;

	[Token(Token = "0x4000F83")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static Dictionary<Type, UIScreen> screens;

	[Token(Token = "0x4000F84")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static Stack<UIScreen> screenStack;

	[NonSerialized]
	[Token(Token = "0x4000F85")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UIScreen current;

	[Token(Token = "0x4000F86")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UIScreen defaultOpenScreen;

	[Token(Token = "0x4000F87")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Action onScreenOpen;

	[Token(Token = "0x4000F88")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static Type overrideOpenScreen;

	[Token(Token = "0x4000F89")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private GameObject txnStatusObj;

	[Token(Token = "0x4000F8A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Text txnStatusText;

	[Token(Token = "0x1700018F")]
	public static bool MessageDialogActive
	{
		[Token(Token = "0x6000D0F")]
		[Address(RVA = "0xC166E8", Offset = "0xC166E8", VA = "0xC166E8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000D10")]
	[Address(RVA = "0xC1677C", Offset = "0xC1677C", VA = "0xC1677C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000D11")]
	public static T Get<T>() where T : UIScreen
	{
		return null;
	}

	[Token(Token = "0x6000D12")]
	[Address(RVA = "0xC16C80", Offset = "0xC16C80", VA = "0xC16C80")]
	public static UIScreen Get(Type screenType)
	{
		return null;
	}

	[Token(Token = "0x6000D13")]
	public static void Open<T>() where T : UIScreen
	{
	}

	[Token(Token = "0x6000D14")]
	[Address(RVA = "0xC16A84", Offset = "0xC16A84", VA = "0xC16A84")]
	public void Open(UIScreen screen)
	{
	}

	[Token(Token = "0x6000D15")]
	[Address(RVA = "0xC16D00", Offset = "0xC16D00", VA = "0xC16D00")]
	public void Back()
	{
	}

	[Token(Token = "0x6000D16")]
	[Address(RVA = "0xC16E90", Offset = "0xC16E90", VA = "0xC16E90")]
	public static void CloseAll()
	{
	}

	[Token(Token = "0x6000D17")]
	public static bool IsOnScreen<T>() where T : UIScreen
	{
		return default(bool);
	}

	[Token(Token = "0x6000D18")]
	[Address(RVA = "0xC170D8", Offset = "0xC170D8", VA = "0xC170D8")]
	public bool IsOnScreen(UIScreen screen)
	{
		return default(bool);
	}

	[Token(Token = "0x6000D19")]
	[Address(RVA = "0xC17170", Offset = "0xC17170", VA = "0xC17170")]
	public static void HideFeedbackText()
	{
	}

	[Token(Token = "0x6000D1A")]
	[Address(RVA = "0xC172F4", Offset = "0xC172F4", VA = "0xC172F4")]
	public static void ShowFeedbackText(string msg, bool autoDismiss = true)
	{
	}

	[Token(Token = "0x6000D1B")]
	[Address(RVA = "0xC174D4", Offset = "0xC174D4", VA = "0xC174D4")]
	[IteratorStateMachine(typeof(<TimedStatusDismiss>d__22))]
	private IEnumerator TimedStatusDismiss()
	{
		return null;
	}

	[Token(Token = "0x6000D1C")]
	[Address(RVA = "0xC172D4", Offset = "0xC172D4", VA = "0xC172D4")]
	private void ToggleTransactionStatusText(bool active)
	{
	}

	[Token(Token = "0x6000D1D")]
	[Address(RVA = "0xC17564", Offset = "0xC17564", VA = "0xC17564")]
	public UIScreenManager()
	{
	}
}
[Token(Token = "0x200026E")]
public struct SymbolRange
{
	[Token(Token = "0x4000F8E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public int min;

	[Token(Token = "0x4000F8F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public int max;

	[Token(Token = "0x4000F90")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public string symbol;
}
[Token(Token = "0x200026F")]
public struct ConditionFlags
{
	[Token(Token = "0x4000F91")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public int requirements;

	[Token(Token = "0x4000F92")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public int exclusions;

	[Token(Token = "0x6000D25")]
	[Address(RVA = "0xC17754", Offset = "0xC17754", VA = "0xC17754")]
	public bool SatisfiedBy(int state)
	{
		return default(bool);
	}

	[Token(Token = "0x6000D26")]
	[Address(RVA = "0xC17778", Offset = "0xC17778", VA = "0xC17778")]
	public int Apply(int state)
	{
		return default(int);
	}
}
[Token(Token = "0x2000270")]
public class ProductionRule
{
	[Token(Token = "0x4000F93")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string symbol;

	[Token(Token = "0x4000F94")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float probabilityTotal;

	[Token(Token = "0x4000F95")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float[] probabilities;

	[Token(Token = "0x4000F96")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ConditionFlags[] conditions;

	[Token(Token = "0x4000F97")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public SymbolRange[][] productions;

	[Token(Token = "0x4000F98")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int mode;

	[Token(Token = "0x4000F99")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static SymbolRange[] emptyProduction;

	[Token(Token = "0x6000D27")]
	[Address(RVA = "0xC17788", Offset = "0xC17788", VA = "0xC17788")]
	public SymbolRange[] GetProduction(float value, int state)
	{
		return null;
	}

	[Token(Token = "0x6000D28")]
	[Address(RVA = "0xC17918", Offset = "0xC17918", VA = "0xC17918")]
	public ProductionRule()
	{
	}
}
[Token(Token = "0x2000271")]
public class GenerationRules
{
	[Token(Token = "0x4000F9A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Dictionary<string, string> oldRulesCache;

	[Token(Token = "0x4000F9B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Dictionary<string, ProductionRule> rules;

	[Token(Token = "0x4000F9C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Dictionary<string, int> states;

	[Token(Token = "0x4000F9D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Dictionary<string, int> modes;

	[Token(Token = "0x4000F9E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string hash;

	[Token(Token = "0x4000F9F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public string filename;

	[Token(Token = "0x6000D2A")]
	[Address(RVA = "0xC17988", Offset = "0xC17988", VA = "0xC17988")]
	public static GenerationRules FromResource(string path, [Optional] string hash)
	{
		return null;
	}

	[Token(Token = "0x6000D2B")]
	[Address(RVA = "0xC18538", Offset = "0xC18538", VA = "0xC18538")]
	public static GenerationRules GetRules(string rulesString, [Optional] string hash, [Optional] string sequenceFilename)
	{
		return null;
	}

	[Token(Token = "0x6000D2C")]
	[Address(RVA = "0xC188D4", Offset = "0xC188D4", VA = "0xC188D4")]
	private static void LoadRulesCache()
	{
	}

	[Token(Token = "0x6000D2D")]
	[Address(RVA = "0xC17A84", Offset = "0xC17A84", VA = "0xC17A84")]
	public static void GetContentsAndHashOfFile(string path, out string contents, out string hash)
	{
	}

	[Token(Token = "0x6000D2E")]
	[Address(RVA = "0xC17AFC", Offset = "0xC17AFC", VA = "0xC17AFC")]
	public static bool GetContentsOfCachedRules(out string contents, string hash)
	{
		return default(bool);
	}

	[Token(Token = "0x6000D2F")]
	[Address(RVA = "0xC18640", Offset = "0xC18640", VA = "0xC18640")]
	public static string GetHashFromText(string fileContents)
	{
		return null;
	}

	[Token(Token = "0x6000D30")]
	[Address(RVA = "0xC18B3C", Offset = "0xC18B3C", VA = "0xC18B3C")]
	private int CreateLogicState(string label)
	{
		return default(int);
	}

	[Token(Token = "0x6000D31")]
	[Address(RVA = "0xC18C74", Offset = "0xC18C74", VA = "0xC18C74")]
	public int GetLogicState(string[] flags)
	{
		return default(int);
	}

	[Token(Token = "0x6000D32")]
	[Address(RVA = "0xC18D48", Offset = "0xC18D48", VA = "0xC18D48")]
	private int ParseLogic(string[] symbols, out ConditionFlags condition)
	{
		return default(int);
	}

	[Token(Token = "0x6000D33")]
	[Address(RVA = "0xC18F1C", Offset = "0xC18F1C", VA = "0xC18F1C")]
	private int CreateModeFlag(string label)
	{
		return default(int);
	}

	[Token(Token = "0x6000D34")]
	[Address(RVA = "0xC19054", Offset = "0xC19054", VA = "0xC19054")]
	public ConditionFlags GetModeFlags(string[] flags)
	{
		return default(ConditionFlags);
	}

	[Token(Token = "0x6000D35")]
	[Address(RVA = "0xC1917C", Offset = "0xC1917C", VA = "0xC1917C")]
	private int ParseModeSetFlags(string[] symbols, int startIndex)
	{
		return default(int);
	}

	[Token(Token = "0x6000D36")]
	[Address(RVA = "0xC17BE4", Offset = "0xC17BE4", VA = "0xC17BE4")]
	public void Parse(string input, string fileName)
	{
	}

	[Token(Token = "0x6000D37")]
	[Address(RVA = "0xC1930C", Offset = "0xC1930C", VA = "0xC1930C")]
	public bool TryGetRule(string symbol, out ProductionRule rule)
	{
		return default(bool);
	}

	[Token(Token = "0x6000D38")]
	[Address(RVA = "0xC19374", Offset = "0xC19374", VA = "0xC19374")]
	public HashSet<string> GetTerminalSymbolsSet()
	{
		return null;
	}

	[Token(Token = "0x6000D39")]
	[Address(RVA = "0xC1963C", Offset = "0xC1963C", VA = "0xC1963C")]
	public string[] GetTerminalSymbols()
	{
		return null;
	}

	[Token(Token = "0x6000D3A")]
	[Address(RVA = "0xC196D4", Offset = "0xC196D4", VA = "0xC196D4")]
	public string[] GetReachableTerminals(string[] axioms, int state = 0)
	{
		return null;
	}

	[Token(Token = "0x6000D3B")]
	[Address(RVA = "0xC19784", Offset = "0xC19784", VA = "0xC19784")]
	public HashSet<string> GetReachableTerminalSet(string[] axioms, int state = 0)
	{
		return null;
	}

	[Token(Token = "0x6000D3C")]
	[Address(RVA = "0xC19878", Offset = "0xC19878", VA = "0xC19878")]
	private void ProcessReachability(string symbol, int state, HashSet<string> ruleSet, HashSet<string> terminalSet)
	{
	}

	[Token(Token = "0x6000D3D")]
	[Address(RVA = "0xC19A50", Offset = "0xC19A50", VA = "0xC19A50")]
	public HashSet<string> GetAxiomSymbolsSet()
	{
		return null;
	}

	[Token(Token = "0x6000D3E")]
	[Address(RVA = "0xC19D2C", Offset = "0xC19D2C", VA = "0xC19D2C")]
	public HashSet<string> GetRuleSymbolsSet()
	{
		return null;
	}

	[Token(Token = "0x6000D3F")]
	[Address(RVA = "0xC19DD0", Offset = "0xC19DD0", VA = "0xC19DD0")]
	public string[] GetAxiomSymbols()
	{
		return null;
	}

	[Token(Token = "0x6000D40")]
	[Address(RVA = "0xC19E68", Offset = "0xC19E68", VA = "0xC19E68")]
	public bool RuleIsDeterministic(string symbol)
	{
		return default(bool);
	}

	[Token(Token = "0x6000D41")]
	[Address(RVA = "0xC17BDC", Offset = "0xC17BDC", VA = "0xC17BDC")]
	public GenerationRules()
	{
	}
}
[Token(Token = "0x2000272")]
public class ProductionContext
{
	[Token(Token = "0x4000FA0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public SymbolRange[] production;

	[Token(Token = "0x4000FA1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int current;

	[Token(Token = "0x4000FA2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int toProduce;

	[Token(Token = "0x4000FA3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int produced;

	[Token(Token = "0x4000FA4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int mode;

	[Token(Token = "0x6000D42")]
	[Address(RVA = "0xC19F58", Offset = "0xC19F58", VA = "0xC19F58")]
	public ProductionContext(SymbolRange[] prod, int mode)
	{
	}

	[Token(Token = "0x6000D43")]
	[Address(RVA = "0xC19F88", Offset = "0xC19F88", VA = "0xC19F88")]
	public string GetNextSymbol(System.Random rng, out bool out_isTail)
	{
		return null;
	}
}
[Token(Token = "0x2000273")]
public class SequenceProducer
{
	[Token(Token = "0x4000FA5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private System.Random rng;

	[Token(Token = "0x4000FA6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int state;

	[Token(Token = "0x4000FA7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private GenerationRules rules;

	[Token(Token = "0x4000FA8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Stack<ProductionContext> contextStack;

	[Token(Token = "0x6000D44")]
	[Address(RVA = "0xC1A094", Offset = "0xC1A094", VA = "0xC1A094")]
	public SequenceProducer(GenerationRules rules, string axiom, [Optional] System.Random nrng, int state = 0)
	{
	}

	[Token(Token = "0x6000D45")]
	[Address(RVA = "0xC1A228", Offset = "0xC1A228", VA = "0xC1A228")]
	public void Reset(string axiom, System.Random nrng)
	{
	}

	[Token(Token = "0x6000D46")]
	[Address(RVA = "0xC1A348", Offset = "0xC1A348", VA = "0xC1A348")]
	public string GetNextSymbol()
	{
		return null;
	}

	[Token(Token = "0x6000D47")]
	[Address(RVA = "0xC1A360", Offset = "0xC1A360", VA = "0xC1A360")]
	public string GetNextSymbol(out int mode)
	{
		return null;
	}
}
[Token(Token = "0x2000274")]
[CreateAssetMenu(fileName = "VertexBakeConfig")]
public class VertexBakeConfig : ScriptableObject
{
	[Serializable]
	[Token(Token = "0x2000275")]
	public class BakeSource
	{
		[Token(Token = "0x4000FB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Material material;

		[Token(Token = "0x4000FB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Bake in lighting.")]
		public bool light;

		[Token(Token = "0x4000FB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[Tooltip("Bake in material tint colour.")]
		public bool tint;

		[Token(Token = "0x4000FB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		[Tooltip("Bake in uv offset from material.")]
		public bool offsetUVs;

		[Token(Token = "0x6000D5B")]
		[Address(RVA = "0xC1BE90", Offset = "0xC1BE90", VA = "0xC1BE90")]
		public BakeSource()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x2000276")]
	public class BakeTarget
	{
		[Token(Token = "0x4000FB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Material material;

		[Token(Token = "0x4000FB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool outputColors;

		[Token(Token = "0x4000FBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool outputNormals;

		[Token(Token = "0x4000FBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public bool outputUVs;

		[Token(Token = "0x6000D5C")]
		[Address(RVA = "0xC1BE98", Offset = "0xC1BE98", VA = "0xC1BE98")]
		public BakeTarget()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x2000277")]
	public class BakeGroup
	{
		[Token(Token = "0x4000FBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public BakeSource[] sources;

		[Token(Token = "0x4000FBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public BakeTarget target;

		[Token(Token = "0x6000D5D")]
		[Address(RVA = "0xC1BEA0", Offset = "0xC1BEA0", VA = "0xC1BEA0")]
		public VertexChannels GetOutputChannels()
		{
			return default(VertexChannels);
		}

		[Token(Token = "0x6000D5E")]
		[Address(RVA = "0xC1BEE0", Offset = "0xC1BEE0", VA = "0xC1BEE0")]
		public BakeGroup()
		{
		}
	}

	[Token(Token = "0x4000FA9")]
	private const string CACHE_FORMAT = "a";

	[Token(Token = "0x4000FAA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static HashSet<VertexBakeConfig> configs;

	[Token(Token = "0x4000FAB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("Changing this value will cause cached bakes to be rebuilt.")]
	public string cacheVersion;

	[Token(Token = "0x4000FAC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public BakeGroup[] bakeGroups;

	[Token(Token = "0x4000FAD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private FileCache cache;

	[Token(Token = "0x4000FAE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private string currentTheme;

	[Token(Token = "0x4000FAF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Dictionary<string, Mesh[]> bakedMeshes;

	[Token(Token = "0x4000FB0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private long endOfCache;

	[Token(Token = "0x4000FB1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private BinaryWriter binWriter;

	[Token(Token = "0x4000FB2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Dictionary<string, Dictionary<string, Mesh[]>> themeStashes;

	[Token(Token = "0x4000FB3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Dictionary<Material, int> srcLookup;

	[Token(Token = "0x6000D48")]
	[Address(RVA = "0xC1A51C", Offset = "0xC1A51C", VA = "0xC1A51C")]
	public static void SaveAllBakes()
	{
	}

	[Token(Token = "0x6000D49")]
	[Address(RVA = "0xC1A6F0", Offset = "0xC1A6F0", VA = "0xC1A6F0")]
	public static void UnloadAllBakes([Optional] string unlessTheme)
	{
	}

	[Token(Token = "0x6000D4A")]
	[Address(RVA = "0xC1A9F0", Offset = "0xC1A9F0", VA = "0xC1A9F0")]
	public string GetCurrentTheme()
	{
		return null;
	}

	[Token(Token = "0x6000D4B")]
	[Address(RVA = "0xC1A698", Offset = "0xC1A698", VA = "0xC1A698")]
	public bool IsSaved()
	{
		return default(bool);
	}

	[Token(Token = "0x6000D4C")]
	[Address(RVA = "0xC1A9F8", Offset = "0xC1A9F8", VA = "0xC1A9F8")]
	public void GetBakeSource(Material mat, out int group, out int source)
	{
	}

	[Token(Token = "0x6000D4D")]
	[Address(RVA = "0xC1AAD0", Offset = "0xC1AAD0", VA = "0xC1AAD0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000D4E")]
	[Address(RVA = "0xC1ACFC", Offset = "0xC1ACFC", VA = "0xC1ACFC")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000D4F")]
	[Address(RVA = "0xC1AD88", Offset = "0xC1AD88", VA = "0xC1AD88")]
	private void StashTheme()
	{
	}

	[Token(Token = "0x6000D50")]
	[Address(RVA = "0xC1AE48", Offset = "0xC1AE48", VA = "0xC1AE48")]
	private bool TryUnstashTheme(string themeName)
	{
		return default(bool);
	}

	[Token(Token = "0x6000D51")]
	[Address(RVA = "0xC1AEEC", Offset = "0xC1AEEC", VA = "0xC1AEEC")]
	private void SaveMeshes(string key, VertexFilteredMeshInfo[] meshes)
	{
	}

	[Token(Token = "0x6000D52")]
	[Address(RVA = "0xC1B2A4", Offset = "0xC1B2A4", VA = "0xC1B2A4")]
	private bool LoadAllMeshes(Stream input)
	{
		return default(bool);
	}

	[Token(Token = "0x6000D53")]
	[Address(RVA = "0xC1B880", Offset = "0xC1B880", VA = "0xC1B880")]
	private void UnloadCurrent()
	{
	}

	[Token(Token = "0x6000D54")]
	[Address(RVA = "0xC1A868", Offset = "0xC1A868", VA = "0xC1A868")]
	public void Unload([Optional] string unlessTheme)
	{
	}

	[Token(Token = "0x6000D55")]
	[Address(RVA = "0xC1BA4C", Offset = "0xC1BA4C", VA = "0xC1BA4C")]
	public void Load(string themeName)
	{
	}

	[Token(Token = "0x6000D56")]
	[Address(RVA = "0xC1A6A8", Offset = "0xC1A6A8", VA = "0xC1A6A8")]
	public void Save()
	{
	}

	[Token(Token = "0x6000D57")]
	[Address(RVA = "0xC1BC78", Offset = "0xC1BC78", VA = "0xC1BC78")]
	public void AddMeshes(string themeName, string bakeName, VertexFilteredMeshInfo[] infos, Mesh[] meshes)
	{
	}

	[Token(Token = "0x6000D58")]
	[Address(RVA = "0xC1BD64", Offset = "0xC1BD64", VA = "0xC1BD64")]
	public bool TryGetMeshes(string themeName, string bakeName, out Mesh[] meshes)
	{
		return default(bool);
	}

	[Token(Token = "0x6000D59")]
	[Address(RVA = "0xC1BDF4", Offset = "0xC1BDF4", VA = "0xC1BDF4")]
	public VertexBakeConfig()
	{
	}
}
[Token(Token = "0x2000278")]
[Flags]
public enum VertexChannels : ushort
{
	[Token(Token = "0x4000FBF")]
	None = 0,
	[Token(Token = "0x4000FC0")]
	Colors = 2,
	[Token(Token = "0x4000FC1")]
	Normals = 4,
	[Token(Token = "0x4000FC2")]
	UVs = 0x10,
	[Token(Token = "0x4000FC3")]
	All = ushort.MaxValue
}
[Token(Token = "0x2000279")]
public class VertexFilteredMeshInfo
{
	[Token(Token = "0x4000FC4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string name;

	[Token(Token = "0x4000FC5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int[] indicies;

	[Token(Token = "0x4000FC6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector3[] positions;

	[Token(Token = "0x4000FC7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Color32[] colors;

	[Token(Token = "0x4000FC8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector3[] normals;

	[Token(Token = "0x4000FC9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Vector2[] uvs;

	[Token(Token = "0x4000FCA")]
	private const uint MAGIC_NONCE0_OLD = 139917003u;

	[Token(Token = "0x4000FCB")]
	private const uint MAGIC_NONCE0 = 4176253096u;

	[Token(Token = "0x4000FCC")]
	private const uint MAGIC_NONCE1 = 3661162175u;

	[Token(Token = "0x6000D5F")]
	[Address(RVA = "0xC1BEE8", Offset = "0xC1BEE8", VA = "0xC1BEE8")]
	public void Clear()
	{
	}

	[Token(Token = "0x6000D60")]
	[Address(RVA = "0xC1BEF8", Offset = "0xC1BEF8", VA = "0xC1BEF8")]
	public void Apply(Mesh mesh)
	{
	}

	[Token(Token = "0x6000D61")]
	[Address(RVA = "0xC1B814", Offset = "0xC1B814", VA = "0xC1B814")]
	public Mesh ToMesh()
	{
		return null;
	}

	[Token(Token = "0x6000D62")]
	[Address(RVA = "0xC1BFB8", Offset = "0xC1BFB8", VA = "0xC1BFB8")]
	public static VertexFilteredMeshInfo FromMesh(Mesh mesh, VertexChannels channels = VertexChannels.All)
	{
		return null;
	}

	[Token(Token = "0x6000D63")]
	[Address(RVA = "0xC1C0FC", Offset = "0xC1C0FC", VA = "0xC1C0FC")]
	public VertexChannels GetChannels()
	{
		return default(VertexChannels);
	}

	[Token(Token = "0x6000D64")]
	[Address(RVA = "0xC1B0B4", Offset = "0xC1B0B4", VA = "0xC1B0B4")]
	public void Write(BinaryWriter bin)
	{
	}

	[Token(Token = "0x6000D65")]
	[Address(RVA = "0xC1B500", Offset = "0xC1B500", VA = "0xC1B500")]
	public bool Read(BinaryReader bin)
	{
		return default(bool);
	}

	[Token(Token = "0x6000D66")]
	[Address(RVA = "0xC1C298", Offset = "0xC1C298", VA = "0xC1C298")]
	internal void WriteVector2Array(BinaryWriter bin, Vector2[] vecs)
	{
	}

	[Token(Token = "0x6000D67")]
	[Address(RVA = "0xC1C534", Offset = "0xC1C534", VA = "0xC1C534")]
	internal Vector2[] ReadVector2Array(BinaryReader bin, int count)
	{
		return null;
	}

	[Token(Token = "0x6000D68")]
	[Address(RVA = "0xC1C130", Offset = "0xC1C130", VA = "0xC1C130")]
	internal void WriteVector3Array(BinaryWriter bin, Vector3[] vecs)
	{
	}

	[Token(Token = "0x6000D69")]
	[Address(RVA = "0xC1C338", Offset = "0xC1C338", VA = "0xC1C338")]
	internal Vector3[] ReadVector3Array(BinaryReader bin, int count)
	{
		return null;
	}

	[Token(Token = "0x6000D6A")]
	[Address(RVA = "0xC1C1E8", Offset = "0xC1C1E8", VA = "0xC1C1E8")]
	internal void WriteColor32Array(BinaryWriter bin, Color32[] cols)
	{
	}

	[Token(Token = "0x6000D6B")]
	[Address(RVA = "0xC1C434", Offset = "0xC1C434", VA = "0xC1C434")]
	internal Color32[] ReadColor32Array(BinaryReader bin, int count)
	{
		return null;
	}

	[Token(Token = "0x6000D6C")]
	[Address(RVA = "0xC1B4F8", Offset = "0xC1B4F8", VA = "0xC1B4F8")]
	public VertexFilteredMeshInfo()
	{
	}
}
[Serializable]
[Token(Token = "0x200027A")]
public class LightBakeParams
{
	[Token(Token = "0x4000FCD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Color ambientTop;

	[Token(Token = "0x4000FCE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Color ambientMid;

	[Token(Token = "0x4000FCF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Color ambientBot;

	[Token(Token = "0x4000FD0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Color lightColor;

	[Token(Token = "0x4000FD1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Color lightColor1;

	[Token(Token = "0x4000FD2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Vector3 lightDir;

	[Token(Token = "0x4000FD3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public Vector3 lightDir1;

	[Token(Token = "0x6000D6D")]
	[Address(RVA = "0xC1C60C", Offset = "0xC1C60C", VA = "0xC1C60C")]
	public void UseCurrentAmbient()
	{
	}

	[Token(Token = "0x6000D6E")]
	[Address(RVA = "0xC1C6F8", Offset = "0xC1C6F8", VA = "0xC1C6F8")]
	public void Set(Light light)
	{
	}

	[Token(Token = "0x6000D6F")]
	[Address(RVA = "0xC1C798", Offset = "0xC1C798", VA = "0xC1C798")]
	public void Set(Vector3 direction, Color color)
	{
	}

	[Token(Token = "0x6000D70")]
	[Address(RVA = "0xC1C7AC", Offset = "0xC1C7AC", VA = "0xC1C7AC")]
	public void Set(Light[] lights)
	{
	}

	[Token(Token = "0x6000D71")]
	[Address(RVA = "0xC1C894", Offset = "0xC1C894", VA = "0xC1C894")]
	public Color CalcLighting(Vector3 normal)
	{
		return default(Color);
	}

	[Token(Token = "0x6000D72")]
	[Address(RVA = "0xC1C9E4", Offset = "0xC1C9E4", VA = "0xC1C9E4")]
	public LightBakeParams()
	{
	}
}
[Token(Token = "0x200027B")]
public class VertexFilter
{
	[Token(Token = "0x4000FD4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Dictionary<string, Mesh> rebakedMeshes;

	[Token(Token = "0x4000FD5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static Dictionary<string, VertexFilterSettings> filters;

	[Token(Token = "0x4000FD6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static GenerationRules rules;

	[Token(Token = "0x4000FD7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static int snowState;

	[Token(Token = "0x6000D73")]
	[Address(RVA = "0xC1C9EC", Offset = "0xC1C9EC", VA = "0xC1C9EC")]
	private static void LoadFilters()
	{
	}

	[Token(Token = "0x6000D74")]
	[Address(RVA = "0xC1CC58", Offset = "0xC1CC58", VA = "0xC1CC58")]
	public static int GetFlags(string[] inStrs)
	{
		return default(int);
	}

	[Token(Token = "0x6000D75")]
	[Address(RVA = "0xC1CCB4", Offset = "0xC1CCB4", VA = "0xC1CCB4")]
	public static bool FilterNeedsNormals(int flags)
	{
		return default(bool);
	}

	[Token(Token = "0x6000D76")]
	[Address(RVA = "0xC1CD08", Offset = "0xC1CD08", VA = "0xC1CD08")]
	public static void ApplyColorFilters(string name, int rulesState, Color[] colors, Vector3[] normals)
	{
	}

	[Token(Token = "0x6000D77")]
	[Address(RVA = "0xC1D314", Offset = "0xC1D314", VA = "0xC1D314")]
	public static void RebakeMesh(MeshFilter filter, int flags)
	{
	}

	[Token(Token = "0x6000D78")]
	[Address(RVA = "0xC1D64C", Offset = "0xC1D64C", VA = "0xC1D64C")]
	public static VertexFilteredMeshInfo BakeMesh(CombineInstance[] instances, VertexBakeConfig.BakeSource[] sources, VertexChannels channels = VertexChannels.Colors, int flags = 0, [Optional] LightBakeParams lightParams)
	{
		return null;
	}

	[Token(Token = "0x6000D79")]
	[Address(RVA = "0xC1E180", Offset = "0xC1E180", VA = "0xC1E180")]
	public static Mesh CreateSkinnedMesh(CombineInstance[] instances, int flags)
	{
		return null;
	}

	[Token(Token = "0x6000D7A")]
	[Address(RVA = "0xC1E9E8", Offset = "0xC1E9E8", VA = "0xC1E9E8")]
	public static Mesh CombineSkinnedMeshes(Mesh[] meshes, int flags, VertexChannels channels = VertexChannels.Colors | VertexChannels.Normals)
	{
		return null;
	}

	[Token(Token = "0x6000D7B")]
	[Address(RVA = "0xC1F40C", Offset = "0xC1F40C", VA = "0xC1F40C")]
	public VertexFilter()
	{
	}
}
[Token(Token = "0x200027D")]
[CreateAssetMenu(fileName = "VertexFilterSettings")]
public class VertexFilterSettings : ScriptableObject
{
	[Token(Token = "0x4000FDD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Range(0f, 1f)]
	[Header("Input Values")]
	public float hueMin;

	[Token(Token = "0x4000FDE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Range(0f, 1f)]
	public float hueMax;

	[Token(Token = "0x4000FDF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Range(0f, 1f)]
	public float satMin;

	[Token(Token = "0x4000FE0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Range(0f, 1f)]
	public float satMax;

	[Token(Token = "0x4000FE1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Range(0f, 1f)]
	public float valMin;

	[Token(Token = "0x4000FE2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Range(0f, 1f)]
	public float valMax;

	[Token(Token = "0x4000FE3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Header("Output Values")]
	public float hueMul;

	[Token(Token = "0x4000FE4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float hueAdd;

	[Token(Token = "0x4000FE5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float satMul;

	[Token(Token = "0x4000FE6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float satAdd;

	[Token(Token = "0x4000FE7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float valMul;

	[Token(Token = "0x4000FE8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float valAdd;

	[Token(Token = "0x6000D82")]
	[Address(RVA = "0xC1D264", Offset = "0xC1D264", VA = "0xC1D264")]
	public bool Matches(float hue, float sat, float val)
	{
		return default(bool);
	}

	[Token(Token = "0x6000D83")]
	[Address(RVA = "0xC1D2B8", Offset = "0xC1D2B8", VA = "0xC1D2B8")]
	public void ApplyHSV(ref float hue, ref float sat, ref float val)
	{
	}

	[Token(Token = "0x6000D84")]
	[Address(RVA = "0xC1F7E0", Offset = "0xC1F7E0", VA = "0xC1F7E0")]
	public Color ApplyModifier(float hue, float sat, float val)
	{
		return default(Color);
	}

	[Token(Token = "0x6000D85")]
	[Address(RVA = "0xC1F834", Offset = "0xC1F834", VA = "0xC1F834")]
	public VertexFilterSettings()
	{
	}
}
[Token(Token = "0x200027E")]
[CreateAssetMenu(fileName = "VoiceSet", menuName = "Settings/VoiceSet")]
public class VoiceSet : ScriptableObject
{
	[Token(Token = "0x4000FE9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioClip[] hurtClips;

	[Token(Token = "0x4000FEA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float minPitch;

	[Token(Token = "0x4000FEB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float maxPitch;

	[Token(Token = "0x4000FEC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int lastClipIndex;

	[Token(Token = "0x6000D86")]
	[Address(RVA = "0xC1F86C", Offset = "0xC1F86C", VA = "0xC1F86C")]
	public AudioClip GetHurtClip()
	{
		return null;
	}

	[Token(Token = "0x6000D87")]
	[Address(RVA = "0xC1F8E8", Offset = "0xC1F8E8", VA = "0xC1F8E8")]
	public VoiceSet()
	{
	}
}
[Token(Token = "0x200027F")]
public class AchievementDispatcher : MonoBehaviour
{
	[Token(Token = "0x4000FED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string[] args;

	[Token(Token = "0x4000FEE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public SchemasData.StatType statType;

	[Token(Token = "0x4000FEF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int integer;

	[Token(Token = "0x4000FF0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool boolean;

	[Token(Token = "0x6000D88")]
	[Address(RVA = "0xC1F8F8", Offset = "0xC1F8F8", VA = "0xC1F8F8")]
	public void DispatchEvent()
	{
	}

	[Token(Token = "0x6000D89")]
	[Address(RVA = "0xC1F970", Offset = "0xC1F970", VA = "0xC1F970")]
	public AchievementDispatcher()
	{
	}
}
[Serializable]
[Token(Token = "0x2000280")]
public class EventDispatcher
{
	[Token(Token = "0x4000FF1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string eventId;

	[Token(Token = "0x4000FF2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string[] events;

	[Token(Token = "0x6000D8A")]
	[Address(RVA = "0xC1F978", Offset = "0xC1F978", VA = "0xC1F978")]
	public EventDispatcher()
	{
	}
}
[Serializable]
[Token(Token = "0x2000281")]
public class EventGroup
{
	[Token(Token = "0x4000FF3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string groupId;

	[Token(Token = "0x4000FF4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<string> events;

	[Token(Token = "0x6000D8B")]
	[Address(RVA = "0xC1F980", Offset = "0xC1F980", VA = "0xC1F980")]
	public EventGroup()
	{
	}
}
[Serializable]
[Token(Token = "0x2000282")]
public class EventsData
{
	[Token(Token = "0x2000283")]
	public enum EventType
	{
		[Token(Token = "0x4000FF8")]
		INSTANT,
		[Token(Token = "0x4000FF9")]
		TRANSIENT
	}

	[Token(Token = "0x4000FF5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string eventId;

	[Token(Token = "0x4000FF6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public EventType type;

	[Token(Token = "0x6000D8C")]
	[Address(RVA = "0xC1FA00", Offset = "0xC1FA00", VA = "0xC1FA00")]
	public EventsData()
	{
	}
}
[Serializable]
[Token(Token = "0x2000284")]
public class SchemasData
{
	[Token(Token = "0x2000285")]
	public enum StatType
	{
		[Token(Token = "0x4000FFE")]
		NONE,
		[Token(Token = "0x4000FFF")]
		BOOL,
		[Token(Token = "0x4001000")]
		COUNT,
		[Token(Token = "0x4001001")]
		INTEGER,
		[Token(Token = "0x4001002")]
		TIMER
	}

	[Token(Token = "0x2000286")]
	public enum StatOrder
	{
		[Token(Token = "0x4001004")]
		HIGHER_IS_BETTER,
		[Token(Token = "0x4001005")]
		LOWER_IS_BETTER
	}

	[Serializable]
	[Token(Token = "0x2000287")]
	public struct StatSchema
	{
		[Token(Token = "0x4001006")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public StatType type;

		[Token(Token = "0x4001007")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public StatOrder order;
	}

	[Serializable]
	[Token(Token = "0x2000288")]
	public class Schema
	{
		[Token(Token = "0x4001008")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string eventId;

		[Token(Token = "0x4001009")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool isGroup;

		[Token(Token = "0x400100A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public StatSchema statType;

		[Token(Token = "0x6000D8E")]
		[Address(RVA = "0xC1FA10", Offset = "0xC1FA10", VA = "0xC1FA10")]
		public Schema()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x2000289")]
	public class SchemaList : Schema
	{
		[Token(Token = "0x400100B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Schema[] childEvents;

		[Token(Token = "0x6000D8F")]
		[Address(RVA = "0xC1FA18", Offset = "0xC1FA18", VA = "0xC1FA18")]
		public SchemaList()
		{
		}
	}

	[Token(Token = "0x4000FFA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string schemaId;

	[Token(Token = "0x4000FFB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool save;

	[Token(Token = "0x4000FFC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public SchemaList[] events;

	[Token(Token = "0x6000D8D")]
	[Address(RVA = "0xC1FA08", Offset = "0xC1FA08", VA = "0xC1FA08")]
	public SchemasData()
	{
	}
}
[Serializable]
[Token(Token = "0x200028A")]
public struct SchemaList
{
	[Token(Token = "0x400100C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public List<SchemasData> schemaData;
}
[Serializable]
[Token(Token = "0x200028B")]
public class AchievementData
{
	[Token(Token = "0x200028C")]
	public enum Comparison
	{
		[Token(Token = "0x4001016")]
		NONE,
		[Token(Token = "0x4001017")]
		NOT_EQUAL,
		[Token(Token = "0x4001018")]
		EQUAL_TO,
		[Token(Token = "0x4001019")]
		LESS_THAN,
		[Token(Token = "0x400101A")]
		LESS_THAN_EQUAL_TO,
		[Token(Token = "0x400101B")]
		GREATER_THAN,
		[Token(Token = "0x400101C")]
		GREATER_THAN_EQUAL_TO
	}

	[Serializable]
	[Token(Token = "0x200028D")]
	public struct Event
	{
		[Token(Token = "0x400101D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Comparison comparison;

		[Token(Token = "0x400101E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string eventId;

		[Token(Token = "0x400101F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint target;
	}

	[Serializable]
	[Token(Token = "0x200028E")]
	public class EventSchema : EventListGroup
	{
		[Token(Token = "0x4001020")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string schemaName;

		[Token(Token = "0x6000D91")]
		[Address(RVA = "0xC1FA28", Offset = "0xC1FA28", VA = "0xC1FA28")]
		public EventSchema()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x200028F")]
	public class EventGroup
	{
		[Token(Token = "0x4001021")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Event targetEvent;

		[Token(Token = "0x6000D92")]
		[Address(RVA = "0xC1FA38", Offset = "0xC1FA38", VA = "0xC1FA38")]
		public EventGroup()
		{
		}
	}

	[Token(Token = "0x2000290")]
	public class EventListGroup : EventGroup
	{
		[Token(Token = "0x4001022")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public EventGroup[] targetGroups;

		[Token(Token = "0x6000D93")]
		[Address(RVA = "0xC1FA30", Offset = "0xC1FA30", VA = "0xC1FA30")]
		public EventListGroup()
		{
		}
	}

	[Token(Token = "0x400100D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string imgPath;

	[Token(Token = "0x400100E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string apiName;

	[Token(Token = "0x400100F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string title;

	[Token(Token = "0x4001010")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string titleTranslationKey;

	[Token(Token = "0x4001011")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public string description;

	[Token(Token = "0x4001012")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public string descriptionTranslationKey;

	[Token(Token = "0x4001013")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public int reward;

	[Token(Token = "0x4001014")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public EventSchema[] targetSchema;

	[Token(Token = "0x6000D90")]
	[Address(RVA = "0xC1FA20", Offset = "0xC1FA20", VA = "0xC1FA20")]
	public AchievementData()
	{
	}
}
[Token(Token = "0x2000291")]
public class AchievementsData : ScriptableObject
{
	[Token(Token = "0x4001023")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<EventsData> events;

	[Token(Token = "0x4001024")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<EventGroup> eventGroups;

	[Token(Token = "0x4001025")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<EventDispatcher> eventDispatchers;

	[Token(Token = "0x4001026")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public List<SchemaList> schemaList;

	[Token(Token = "0x4001027")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public List<AchievementData> achievements;

	[Token(Token = "0x4001028")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	protected Dictionary<string, EventsData> eventMap;

	[Token(Token = "0x4001029")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected Dictionary<string, AchievementData> achievementMap;

	[Token(Token = "0x400102A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	protected Dictionary<string, EventGroup> eventGroupMap;

	[Token(Token = "0x6000D94")]
	[Address(RVA = "0xC1FA40", Offset = "0xC1FA40", VA = "0xC1FA40", Slot = "4")]
	protected virtual void Init()
	{
	}

	[Token(Token = "0x6000D95")]
	[Address(RVA = "0xC1FCF0", Offset = "0xC1FCF0", VA = "0xC1FCF0")]
	public AchievementData GetAchievement(string achName)
	{
		return null;
	}

	[Token(Token = "0x6000D96")]
	[Address(RVA = "0xC1FD84", Offset = "0xC1FD84", VA = "0xC1FD84")]
	public EventGroup GetEventGroup(string index)
	{
		return null;
	}

	[Token(Token = "0x6000D97")]
	[Address(RVA = "0xC1FE74", Offset = "0xC1FE74", VA = "0xC1FE74")]
	public AchievementsData()
	{
	}
}
[Token(Token = "0x2000292")]
public class AchievementsOculus : IAchievements
{
	[Token(Token = "0x400102B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Dictionary<string, IAchievements.Achievement> achievements;

	[Token(Token = "0x6000D9B")]
	[Address(RVA = "0xC1FF9C", Offset = "0xC1FF9C", VA = "0xC1FF9C")]
	public AchievementsOculus()
	{
	}

	[Token(Token = "0x6000D9C")]
	[Address(RVA = "0xC2001C", Offset = "0xC2001C", VA = "0xC2001C", Slot = "4")]
	public void Initialise()
	{
	}

	[Token(Token = "0x6000D9D")]
	[Address(RVA = "0xC20020", Offset = "0xC20020", VA = "0xC20020", Slot = "5")]
	public IAchievements.Achievement GetAchievement(string id)
	{
		return null;
	}

	[Token(Token = "0x6000D9E")]
	[Address(RVA = "0xC200B4", Offset = "0xC200B4", VA = "0xC200B4")]
	public void UpdateAllDefinitions(Action<bool> callback)
	{
	}

	[Token(Token = "0x6000D9F")]
	[Address(RVA = "0xC201F0", Offset = "0xC201F0", VA = "0xC201F0")]
	public void UpdateAllProgress(Action<bool> callback)
	{
	}

	[Token(Token = "0x6000DA0")]
	[Address(RVA = "0xC2032C", Offset = "0xC2032C", VA = "0xC2032C", Slot = "6")]
	public void LoadAchievements(Action<bool> callback)
	{
	}

	[Token(Token = "0x6000DA1")]
	[Address(RVA = "0xC20408", Offset = "0xC20408", VA = "0xC20408")]
	private void CheckAchievementUpdates(string achievement, Action<bool> callback)
	{
	}

	[Token(Token = "0x6000DA2")]
	[Address(RVA = "0xC20528", Offset = "0xC20528", VA = "0xC20528", Slot = "8")]
	public void Unlock(string achievement, Action<bool> callback)
	{
	}

	[Token(Token = "0x6000DA3")]
	[Address(RVA = "0xC205F4", Offset = "0xC205F4", VA = "0xC205F4", Slot = "7")]
	public void Progress(string achievement, uint count, uint maxCount, Action<bool> callback)
	{
	}

	[Token(Token = "0x6000DA4")]
	[Address(RVA = "0xC20608", Offset = "0xC20608", VA = "0xC20608")]
	public void Progress(string achievement, ulong count, Action<bool> callback)
	{
	}
}
[Token(Token = "0x2000299")]
public class ActionCamera : MonoBehaviour
{
	[Token(Token = "0x400103D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationCurve fovRangeCurve;

	[Token(Token = "0x400103E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform targetTransform;

	[Token(Token = "0x400103F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public LayerMask colMask;

	[Token(Token = "0x4001040")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public LayerMask focusTargetMask;

	[Token(Token = "0x4001041")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float posRate;

	[Token(Token = "0x4001042")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float rotRate;

	[Token(Token = "0x4001043")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float playerPosRate;

	[Token(Token = "0x4001044")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float PlayerRotRate;

	[Token(Token = "0x4001045")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float minContactDistance;

	[Token(Token = "0x4001046")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float offsetMagnitude;

	[Token(Token = "0x4001047")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float yOffset;

	[Token(Token = "0x4001048")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float maxYOffset;

	[Token(Token = "0x4001049")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float groundHeight;

	[Token(Token = "0x400104A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float holdTime;

	[Token(Token = "0x400104B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Rigidbody rBody;

	[Token(Token = "0x400104C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Transform xForm;

	[Token(Token = "0x400104D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Vector3 targetPosition;

	[Token(Token = "0x400104E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private Quaternion targetRotation;

	[Token(Token = "0x400104F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private Vector3 directionToTarget;

	[Token(Token = "0x4001050")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private RaycastHit colHit;

	[Token(Token = "0x4001051")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private Camera[] myCameras;

	[Token(Token = "0x4001052")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[Header("DFOV Settings")]
	public float fovHeight;

	[Token(Token = "0x4001053")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	public float minFov;

	[Token(Token = "0x4001054")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public float maxFov;

	[Token(Token = "0x4001055")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	public float playerFov;

	[Token(Token = "0x4001056")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public float changeRateIn;

	[Token(Token = "0x4001057")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	public float changeRateOut;

	[Token(Token = "0x4001058")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public float changeRateMultiplier;

	[Token(Token = "0x4001059")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	private float endHoldTime;

	[Token(Token = "0x400105A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private bool trackingTarget;

	[Token(Token = "0x400105B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private Transform playerEye;

	[Token(Token = "0x400105C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private Transform weaponHandXForm;

	[Token(Token = "0x400105D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private Transform lastTarget;

	[Token(Token = "0x400105E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public PostProcessVolume ppv;

	[Token(Token = "0x400105F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public DepthOfField dofpp;

	[Token(Token = "0x4001060")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private bool justSnapped;

	[Token(Token = "0x4001061")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
	private float aimDot;

	[Token(Token = "0x4001062")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public Transform gunXForm;

	[Token(Token = "0x4001063")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private Transform focusTargetXForm;

	[Token(Token = "0x4001064")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private RaycastHit focusHit;

	[Token(Token = "0x4001065")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
	private Vector3 focusPosition;

	[Token(Token = "0x4001066")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	private Vector3 lastFocusPosition;

	[Token(Token = "0x4001067")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
	private float distanceToFocusTarget;

	[Token(Token = "0x4001068")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	public bool focusTargetDetected;

	[Token(Token = "0x4001069")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x179")]
	public bool aimingDetected;

	[Token(Token = "0x400106A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
	public float minHoldTime;

	[Token(Token = "0x400106B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	private float nextHoldRelease;

	[Token(Token = "0x400106C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
	private float holdFOVDelay;

	[Token(Token = "0x400106D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	private float endFOVHold;

	[Token(Token = "0x6000DB3")]
	[Address(RVA = "0xA5AFA4", Offset = "0xA5AFA4", VA = "0xA5AFA4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000DB4")]
	[Address(RVA = "0xA5B030", Offset = "0xA5B030", VA = "0xA5B030")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000DB5")]
	[Address(RVA = "0xA5B60C", Offset = "0xA5B60C", VA = "0xA5B60C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000DB6")]
	[Address(RVA = "0xA5B99C", Offset = "0xA5B99C", VA = "0xA5B99C")]
	private bool TryGetEyeFeature(out Vector3 position, XRNode eye)
	{
		return default(bool);
	}

	[Token(Token = "0x6000DB7")]
	[Address(RVA = "0xA5BB24", Offset = "0xA5BB24", VA = "0xA5BB24")]
	private void PlayerFired(bool state)
	{
	}

	[Token(Token = "0x6000DB8")]
	[Address(RVA = "0xA5C1F8", Offset = "0xA5C1F8", VA = "0xA5C1F8")]
	private void Teleport()
	{
	}

	[Token(Token = "0x6000DB9")]
	[Address(RVA = "0xA5B47C", Offset = "0xA5B47C", VA = "0xA5B47C")]
	private void GetHandXForm(bool state, [Optional] GunData data)
	{
	}

	[Token(Token = "0x6000DBA")]
	[Address(RVA = "0xA5C210", Offset = "0xA5C210", VA = "0xA5C210")]
	private void OnRagdollDeath(bool state)
	{
	}

	[Token(Token = "0x6000DBB")]
	[Address(RVA = "0xA5BD30", Offset = "0xA5BD30", VA = "0xA5BD30")]
	private void SnapChange(bool lastHit = false)
	{
	}

	[Token(Token = "0x6000DBC")]
	[Address(RVA = "0xA5C310", Offset = "0xA5C310", VA = "0xA5C310")]
	private void TrackTarget()
	{
	}

	[Token(Token = "0x6000DBD")]
	[Address(RVA = "0xA5C774", Offset = "0xA5C774", VA = "0xA5C774")]
	private void UpdateNewPosition()
	{
	}

	[Token(Token = "0x6000DBE")]
	[Address(RVA = "0xA5CC84", Offset = "0xA5CC84", VA = "0xA5CC84")]
	private Vector3 GetCurrentEyePos()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000DBF")]
	[Address(RVA = "0xA5CDD8", Offset = "0xA5CDD8", VA = "0xA5CDD8")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000DC0")]
	[Address(RVA = "0xA5D4E4", Offset = "0xA5D4E4", VA = "0xA5D4E4")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000DC1")]
	[Address(RVA = "0xA5C964", Offset = "0xA5C964", VA = "0xA5C964")]
	private bool UpdateFocusTarget()
	{
		return default(bool);
	}

	[Token(Token = "0x6000DC2")]
	[Address(RVA = "0xA5D6F8", Offset = "0xA5D6F8", VA = "0xA5D6F8")]
	private float CalculateFOV(Vector3 diff)
	{
		return default(float);
	}

	[Token(Token = "0x6000DC3")]
	[Address(RVA = "0xA5CF80", Offset = "0xA5CF80", VA = "0xA5CF80")]
	private void UpdatFieldOfView()
	{
	}

	[Token(Token = "0x6000DC4")]
	[Address(RVA = "0xA5D770", Offset = "0xA5D770", VA = "0xA5D770")]
	public ActionCamera()
	{
	}
}
[Token(Token = "0x200029A")]
public enum AIState
{
	[Token(Token = "0x400106F")]
	IDLE,
	[Token(Token = "0x4001070")]
	DEAD,
	[Token(Token = "0x4001071")]
	PATROL,
	[Token(Token = "0x4001072")]
	WANDER,
	[Token(Token = "0x4001073")]
	IN_COVER,
	[Token(Token = "0x4001074")]
	ATTACKING
}
[Token(Token = "0x200029B")]
public class AIController : MonoBehaviour
{
	[Token(Token = "0x200029C")]
	[CompilerGenerated]
	private sealed class <SetCrouch>d__156 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40010E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40010E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40010E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool _crouching;

		[Token(Token = "0x40010E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AIController <>4__this;

		[Token(Token = "0x40010E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool <toCrouch>5__2;

		[Token(Token = "0x40010EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <duration>5__3;

		[Token(Token = "0x40010EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float <time>5__4;

		[Token(Token = "0x17000193")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000DF6")]
			[Address(RVA = "0xA622D4", Offset = "0xA622D4", VA = "0xA622D4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000194")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000DF8")]
			[Address(RVA = "0xA6231C", Offset = "0xA6231C", VA = "0xA6231C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000DF3")]
		[Address(RVA = "0xA61E5C", Offset = "0xA61E5C", VA = "0xA61E5C")]
		[DebuggerHidden]
		public <SetCrouch>d__156(int <>1__state)
		{
		}

		[Token(Token = "0x6000DF4")]
		[Address(RVA = "0xA6217C", Offset = "0xA6217C", VA = "0xA6217C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000DF5")]
		[Address(RVA = "0xA62180", Offset = "0xA62180", VA = "0xA62180", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000DF7")]
		[Address(RVA = "0xA622DC", Offset = "0xA622DC", VA = "0xA622DC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001075")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool debug;

	[Token(Token = "0x4001076")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int hitPoints;

	[Token(Token = "0x4001077")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private AIState _currentState;

	[Token(Token = "0x4001078")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Action<SpawnInfo> OnAlert;

	[Token(Token = "0x4001079")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public SpawnInfo spawnInfo;

	[Token(Token = "0x400107A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public SpawnGroup myGroup;

	[Token(Token = "0x400107B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public LayerMask groundMask;

	[Token(Token = "0x400107C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public LayerMask sightMask;

	[Token(Token = "0x400107D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float maxSpeed;

	[Token(Token = "0x400107E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float maxAngleSpeed;

	[Token(Token = "0x400107F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Range(0f, 1f)]
	public float normalisedSpeed;

	[Token(Token = "0x4001080")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float crouchValue;

	[Token(Token = "0x4001081")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float walkValue;

	[Token(Token = "0x4001082")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float jogValue;

	[Token(Token = "0x4001083")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public float runValue;

	[Token(Token = "0x4001084")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public float lookatDestinationDistance;

	[Token(Token = "0x4001085")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float lookatLerpRate;

	[Token(Token = "0x4001086")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public float minLookatDestinationDistance;

	[Token(Token = "0x4001087")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public float moveLookYOffset;

	[Token(Token = "0x4001088")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public float crouchDuration;

	[Token(Token = "0x4001089")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public float standDuration;

	[Token(Token = "0x400108A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public float animatorVelocityRate;

	[Token(Token = "0x400108B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public float trackPlayerRate;

	[Token(Token = "0x400108C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public float sightAngleRange;

	[Token(Token = "0x400108D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Ragdoll ragdoll;

	[Token(Token = "0x400108E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Animator animator;

	[Token(Token = "0x400108F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public NavMeshAgent agent;

	[Token(Token = "0x4001090")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Transform xForm;

	[Token(Token = "0x4001091")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public HitReaction hitReaction;

	[Token(Token = "0x4001092")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public Grounder grounder;

	[Token(Token = "0x4001093")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public FullBodyBipedIK fbbik;

	[Token(Token = "0x4001094")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private Vector3 localVelocity;

	[Token(Token = "0x4001095")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public Transform aimAtTarget;

	[Token(Token = "0x4001096")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public Transform lookAtTarget;

	[Token(Token = "0x4001097")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public Transform lookTargetOveride;

	[Token(Token = "0x4001098")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private IKAimingSystem aimingSystem;

	[Token(Token = "0x4001099")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private Transform headXForm;

	[Token(Token = "0x400109A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public IKExecutionOrder IKEO;

	[Token(Token = "0x400109B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public float minReactionTime;

	[Token(Token = "0x400109C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	public float maxReactionTime;

	[Token(Token = "0x400109D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public float minAlertTime;

	[Token(Token = "0x400109E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
	public float maxAlertTime;

	[Token(Token = "0x400109F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	[Space]
	[Header("--- Motion State ---")]
	public bool fidgeting;

	[Token(Token = "0x40010A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x111")]
	public bool waiting;

	[Token(Token = "0x40010A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x112")]
	public bool standing;

	[Token(Token = "0x40010A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x113")]
	public bool moving;

	[Token(Token = "0x40010A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
	public bool movingToPoint;

	[Token(Token = "0x40010A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x115")]
	public bool crouching;

	[Token(Token = "0x40010A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x116")]
	public bool crouchDoging;

	[Token(Token = "0x40010A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x117")]
	public bool pointAligned;

	[Token(Token = "0x40010A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public bool aligningToPoint;

	[Token(Token = "0x40010A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public AIPathPoint previousPoint;

	[Token(Token = "0x40010A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	public AIPathPoint destPoint;

	[Token(Token = "0x40010AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	public int pathPointIndex;

	[Token(Token = "0x40010AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
	[Header("--- Sensor State ---")]
	[Space]
	public bool relaxed;

	[Token(Token = "0x40010AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x135")]
	public bool noticing;

	[Token(Token = "0x40010AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x136")]
	public bool reacting;

	[Token(Token = "0x40010AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x137")]
	public bool firstTimeSeeingPlayer;

	[Token(Token = "0x40010AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public bool canSeeTarget;

	[Token(Token = "0x40010B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x139")]
	public bool playerLocationKnown;

	[Token(Token = "0x40010B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13A")]
	public bool aware;

	[Token(Token = "0x40010B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13B")]
	public bool alert;

	[Token(Token = "0x40010B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
	public bool endingAlert;

	[Token(Token = "0x40010B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13D")]
	[Header("--- Other State ---")]
	[Space]
	public bool canFireAtTarget;

	[Token(Token = "0x40010B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13E")]
	public bool firing;

	[Token(Token = "0x40010B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13F")]
	public bool supressing;

	[Token(Token = "0x40010B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	[Space]
	[Space]
	private Coroutine waitRoutine;

	[Token(Token = "0x40010B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public float waitDuration;

	[Token(Token = "0x40010B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public AIPathPoint[] wanderPoints;

	[Token(Token = "0x40010BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	public AIPathPoint[] coverPoints;

	[Token(Token = "0x40010BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	public AIPathPoint[] patrolPoints;

	[Token(Token = "0x40010BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	public AIPathPoint[] pathPoints;

	[Token(Token = "0x40010BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	private int crouchState;

	[Token(Token = "0x40010BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
	private int moveState;

	[Token(Token = "0x40010BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	private int idleState;

	[Token(Token = "0x40010C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
	private int xState;

	[Token(Token = "0x40010C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	private int yState;

	[Token(Token = "0x40010C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
	private int aimBlendFloat;

	[Token(Token = "0x40010C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	private int fidget_01;

	[Token(Token = "0x40010C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
	private int fidget_02;

	[Token(Token = "0x40010C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	private int fidget_03;

	[Token(Token = "0x40010C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
	private int fidget_04;

	[Token(Token = "0x40010C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	private int fidgetingState;

	[Token(Token = "0x40010C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static float announcementDelay;

	[Token(Token = "0x40010C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static float nextAllowedAnnouncement;

	[Token(Token = "0x40010CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	private Transform animatorRootXForm;

	[Token(Token = "0x40010CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	private Vector3 initLookPos;

	[Token(Token = "0x40010CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	public Transform lastKnownTargetLocation;

	[Token(Token = "0x40010CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	private bool playerTeleporting;

	[Token(Token = "0x40010CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C4")]
	public int usedLives;

	[Token(Token = "0x40010CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
	private float allowedShootTime;

	[Token(Token = "0x40010D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
	private float endAlertTime;

	[Token(Token = "0x40010D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
	private float endCrouchTime;

	[Token(Token = "0x40010D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D4")]
	private bool endingCrouchDodge;

	[Token(Token = "0x40010D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D5")]
	public bool playerAtLocation;

	[Token(Token = "0x40010D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
	private float timeSinceSawPlayer;

	[Token(Token = "0x40010D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1DC")]
	private float endSupressionTime;

	[Token(Token = "0x40010D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
	private float nextFigetTime;

	[Token(Token = "0x40010D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E4")]
	private float firstShotDelay;

	[Token(Token = "0x40010D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
	private float nextFiringTime;

	[Token(Token = "0x40010D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1EC")]
	private int shotCount;

	[Token(Token = "0x40010DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
	private RaycastHit gunCheckHit;

	[Token(Token = "0x40010DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21C")]
	private bool hasPermissionToFire;

	[Token(Token = "0x40010DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
	private RaycastHit sightHit;

	[Token(Token = "0x40010DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24C")]
	private float canSeeDelay;

	[Token(Token = "0x40010DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
	private float canSeeTime;

	[Token(Token = "0x40010DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x254")]
	private Vector3 currentAnimatorVelocity;

	[Token(Token = "0x40010E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
	private AnimatorStateInfo stateInfo;

	[Token(Token = "0x40010E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x284")]
	private float remainingDistance;

	[Token(Token = "0x40010E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
	private float endWaitTime;

	[Token(Token = "0x40010E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28C")]
	private RaycastHit groundHit;

	[Token(Token = "0x40010E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B8")]
	private Vector3 groundCheckVector;

	[Token(Token = "0x17000192")]
	public AIState currentState
	{
		[Token(Token = "0x6000DC5")]
		[Address(RVA = "0xA5D7C4", Offset = "0xA5D7C4", VA = "0xA5D7C4")]
		get
		{
			return default(AIState);
		}
		[Token(Token = "0x6000DC6")]
		[Address(RVA = "0xA5D7CC", Offset = "0xA5D7CC", VA = "0xA5D7CC")]
		set
		{
		}
	}

	[Token(Token = "0x6000DC7")]
	[Address(RVA = "0xA5D808", Offset = "0xA5D808", VA = "0xA5D808")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000DC8")]
	[Address(RVA = "0xA5DB28", Offset = "0xA5DB28", VA = "0xA5DB28")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000DC9")]
	[Address(RVA = "0xA5DEA8", Offset = "0xA5DEA8", VA = "0xA5DEA8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000DCA")]
	[Address(RVA = "0xA5E228", Offset = "0xA5E228", VA = "0xA5E228")]
	private void Start()
	{
	}

	[Token(Token = "0x6000DCB")]
	[Address(RVA = "0xA5E278", Offset = "0xA5E278", VA = "0xA5E278")]
	private void Update()
	{
	}

	[Token(Token = "0x6000DCC")]
	[Address(RVA = "0xA5FED8", Offset = "0xA5FED8", VA = "0xA5FED8")]
	public void Hit()
	{
	}

	[Token(Token = "0x6000DCD")]
	[Address(RVA = "0xA5FFF0", Offset = "0xA5FFF0", VA = "0xA5FFF0")]
	private void PlayerFired(bool _state)
	{
	}

	[Token(Token = "0x6000DCE")]
	[Address(RVA = "0xA600C4", Offset = "0xA600C4", VA = "0xA600C4")]
	public void BecomeAlert(bool justSpawned = false)
	{
	}

	[Token(Token = "0x6000DCF")]
	[Address(RVA = "0xA60278", Offset = "0xA60278", VA = "0xA60278")]
	private void PlayerTeleported()
	{
	}

	[Token(Token = "0x6000DD0")]
	[Address(RVA = "0xA60394", Offset = "0xA60394", VA = "0xA60394")]
	public void Die()
	{
	}

	[Token(Token = "0x6000DD1")]
	[Address(RVA = "0xA60408", Offset = "0xA60408", VA = "0xA60408")]
	public void SetActive(bool isActive)
	{
	}

	[Token(Token = "0x6000DD2")]
	[Address(RVA = "0xA6054C", Offset = "0xA6054C", VA = "0xA6054C")]
	public void ResetEyes()
	{
	}

	[Token(Token = "0x6000DD3")]
	[Address(RVA = "0xA605E0", Offset = "0xA605E0", VA = "0xA605E0")]
	public void ResetState()
	{
	}

	[Token(Token = "0x6000DD4")]
	[Address(RVA = "0xA5E480", Offset = "0xA5E480", VA = "0xA5E480")]
	private void EvaluatePlayerLocation()
	{
	}

	[Token(Token = "0x6000DD5")]
	[Address(RVA = "0xA5E6A0", Offset = "0xA5E6A0", VA = "0xA5E6A0")]
	private void CheckSight()
	{
	}

	[Token(Token = "0x6000DD6")]
	[Address(RVA = "0xA5E678", Offset = "0xA5E678", VA = "0xA5E678")]
	private void UpdateSuppresionState()
	{
	}

	[Token(Token = "0x6000DD7")]
	[Address(RVA = "0xA607F8", Offset = "0xA607F8", VA = "0xA607F8")]
	public void OrientTowardTarget()
	{
	}

	[Token(Token = "0x6000DD8")]
	[Address(RVA = "0xA601F0", Offset = "0xA601F0", VA = "0xA601F0")]
	public void ExitFidget()
	{
	}

	[Token(Token = "0x6000DD9")]
	[Address(RVA = "0xA609B0", Offset = "0xA609B0", VA = "0xA609B0")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000DDA")]
	[Address(RVA = "0xA61104", Offset = "0xA61104", VA = "0xA61104")]
	private void Fidget(bool immediate = false)
	{
	}

	[Token(Token = "0x6000DDB")]
	[Address(RVA = "0xA5EE0C", Offset = "0xA5EE0C", VA = "0xA5EE0C")]
	private void UpdateMoveState()
	{
	}

	[Token(Token = "0x6000DDC")]
	[Address(RVA = "0xA5FB78", Offset = "0xA5FB78", VA = "0xA5FB78")]
	private void CheckFire()
	{
	}

	[Token(Token = "0x6000DDD")]
	[Address(RVA = "0xA5F584", Offset = "0xA5F584", VA = "0xA5F584")]
	private void UpdateMoveSpeed()
	{
	}

	[Token(Token = "0x6000DDE")]
	[Address(RVA = "0xA5F65C", Offset = "0xA5F65C", VA = "0xA5F65C")]
	private void UpdateAnimator()
	{
	}

	[Token(Token = "0x6000DDF")]
	[Address(RVA = "0xA61868", Offset = "0xA61868", VA = "0xA61868")]
	private void CancelIdle()
	{
	}

	[Token(Token = "0x6000DE0")]
	[Address(RVA = "0xA6192C", Offset = "0xA6192C", VA = "0xA6192C")]
	public void SetDestination(Vector3 _destination)
	{
	}

	[Token(Token = "0x6000DE1")]
	[Address(RVA = "0xA604B8", Offset = "0xA604B8", VA = "0xA604B8")]
	public void DeallocatePoint()
	{
	}

	[Token(Token = "0x6000DE2")]
	[Address(RVA = "0xA60CCC", Offset = "0xA60CCC", VA = "0xA60CCC")]
	private void UpdateWait()
	{
	}

	[Token(Token = "0x6000DE3")]
	[Address(RVA = "0xA5FF9C", Offset = "0xA5FF9C", VA = "0xA5FF9C")]
	public void EndWait()
	{
	}

	[Token(Token = "0x6000DE4")]
	[Address(RVA = "0xA619F4", Offset = "0xA619F4", VA = "0xA619F4")]
	public void Wait(float duration, bool restart = false)
	{
	}

	[Token(Token = "0x6000DE5")]
	[Address(RVA = "0xA6197C", Offset = "0xA6197C", VA = "0xA6197C")]
	public void GetNewNavPoint()
	{
	}

	[Token(Token = "0x6000DE6")]
	[Address(RVA = "0xA61BC0", Offset = "0xA61BC0", VA = "0xA61BC0")]
	private int GetPreferedPathIndex()
	{
		return default(int);
	}

	[Token(Token = "0x6000DE7")]
	[Address(RVA = "0xA61B24", Offset = "0xA61B24", VA = "0xA61B24")]
	private int GetRandomPathIndex()
	{
		return default(int);
	}

	[Token(Token = "0x6000DE8")]
	[Address(RVA = "0xA61A40", Offset = "0xA61A40", VA = "0xA61A40")]
	private int GetNextPathIndex()
	{
		return default(int);
	}

	[Token(Token = "0x6000DE9")]
	[Address(RVA = "0xA61A9C", Offset = "0xA61A9C", VA = "0xA61A9C")]
	private void MoveToPathIndex(int newPoint)
	{
	}

	[Token(Token = "0x6000DEA")]
	[Address(RVA = "0xA61C68", Offset = "0xA61C68", VA = "0xA61C68")]
	public bool AllocateNewPoint(AIPathPoint nextPoint, bool ignoreAllocation = false)
	{
		return default(bool);
	}

	[Token(Token = "0x6000DEB")]
	[Address(RVA = "0xA61250", Offset = "0xA61250", VA = "0xA61250")]
	private void EvaluateMoveProgress()
	{
	}

	[Token(Token = "0x6000DEC")]
	[Address(RVA = "0xA5EE60", Offset = "0xA5EE60", VA = "0xA5EE60")]
	private void LerpToPoint()
	{
	}

	[Token(Token = "0x6000DED")]
	[Address(RVA = "0xA5F9B4", Offset = "0xA5F9B4", VA = "0xA5F9B4")]
	private Vector3 GroundCheck(Vector3 agentPos)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000DEE")]
	[Address(RVA = "0xA5F13C", Offset = "0xA5F13C", VA = "0xA5F13C")]
	private void UpdateLookAtNextPosition()
	{
	}

	[Token(Token = "0x6000DEF")]
	[Address(RVA = "0xA607D4", Offset = "0xA607D4", VA = "0xA607D4")]
	public void Crouch(bool _crouching)
	{
	}

	[Token(Token = "0x6000DF0")]
	[Address(RVA = "0xA61DE0", Offset = "0xA61DE0", VA = "0xA61DE0")]
	[IteratorStateMachine(typeof(<SetCrouch>d__156))]
	private IEnumerator SetCrouch(bool _crouching)
	{
		return null;
	}

	[Token(Token = "0x6000DF1")]
	[Address(RVA = "0xA61E84", Offset = "0xA61E84", VA = "0xA61E84")]
	public AIController()
	{
	}
}
[Token(Token = "0x200029D")]
public class AIGunController : MonoBehaviour
{
	[Token(Token = "0x40010EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Ragdoll owner;

	[Token(Token = "0x40010ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Animator animator;

	[Token(Token = "0x40010EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform casingEjctionPoint;

	[Token(Token = "0x40010EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float casingDelay;

	[Token(Token = "0x40010F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float velocityMagnitude;

	[Token(Token = "0x40010F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public LayerMask hitMask;

	[Token(Token = "0x40010F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private ParticleSystem[] fx;

	[Token(Token = "0x40010F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Transform muzzleFlash;

	[Token(Token = "0x40010F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private MuzzleFlashController flashController;

	[Token(Token = "0x40010F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Transform xForm;

	[Token(Token = "0x40010F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public GameObject projectilePrefab;

	[Token(Token = "0x40010F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public GameObject[] projectilePool;

	[Token(Token = "0x40010F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private GameObject projectilePoolRoot;

	[Token(Token = "0x40010F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public int projectilePoolSize;

	[Token(Token = "0x40010FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private int poolIndex;

	[Token(Token = "0x40010FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Projectile[] projectiles;

	[Token(Token = "0x40010FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private int fireSate;

	[Token(Token = "0x40010FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private Vector3 muzzleFlashEulers;

	[Token(Token = "0x40010FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Rigidbody rBody;

	[Token(Token = "0x40010FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Transform gunMeshRoot;

	[Token(Token = "0x4001100")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public float minClatterDelay;

	[Token(Token = "0x4001101")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	public float minClatterMagnitude;

	[Token(Token = "0x4001102")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public float maxClatterMagnitude;

	[Token(Token = "0x4001103")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	private float nextClatter;

	[Token(Token = "0x6000DF9")]
	[Address(RVA = "0xA62324", Offset = "0xA62324", VA = "0xA62324")]
	public void Init(Transform poolParent)
	{
	}

	[Token(Token = "0x6000DFA")]
	[Address(RVA = "0xA62328", Offset = "0xA62328", VA = "0xA62328")]
	private void CreateProjectilePool(Transform poolParent)
	{
	}

	[Token(Token = "0x6000DFB")]
	[Address(RVA = "0xA62580", Offset = "0xA62580", VA = "0xA62580")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000DFC")]
	[Address(RVA = "0xA6265C", Offset = "0xA6265C", VA = "0xA6265C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000DFD")]
	[Address(RVA = "0xA626BC", Offset = "0xA626BC", VA = "0xA626BC")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6000DFE")]
	[Address(RVA = "0xA62814", Offset = "0xA62814", VA = "0xA62814")]
	public void ResetProjectilePool()
	{
	}

	[Token(Token = "0x6000DFF")]
	[Address(RVA = "0xA61360", Offset = "0xA61360", VA = "0xA61360")]
	public void Fire()
	{
	}

	[Token(Token = "0x6000E00")]
	[Address(RVA = "0xA62874", Offset = "0xA62874", VA = "0xA62874")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000E01")]
	[Address(RVA = "0xA628FC", Offset = "0xA628FC", VA = "0xA628FC")]
	public AIGunController()
	{
	}
}
[Token(Token = "0x200029E")]
public enum PathPointType
{
	[Token(Token = "0x4001105")]
	NAV,
	[Token(Token = "0x4001106")]
	COVER
}
[Token(Token = "0x200029F")]
public enum AICoverType
{
	[Token(Token = "0x4001108")]
	NONE,
	[Token(Token = "0x4001109")]
	LOW,
	[Token(Token = "0x400110A")]
	HIGH
}
[Token(Token = "0x20002A0")]
public class AIPathPoint : MonoBehaviour
{
	[Token(Token = "0x20002A1")]
	[CompilerGenerated]
	private sealed class <DeallocateRoutine>d__14 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001116")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001117")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001118")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AIPathPoint <>4__this;

		[Token(Token = "0x17000195")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000E0A")]
			[Address(RVA = "0xA62B98", Offset = "0xA62B98", VA = "0xA62B98", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000196")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000E0C")]
			[Address(RVA = "0xA62BE0", Offset = "0xA62BE0", VA = "0xA62BE0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E07")]
		[Address(RVA = "0xA62AAC", Offset = "0xA62AAC", VA = "0xA62AAC")]
		[DebuggerHidden]
		public <DeallocateRoutine>d__14(int <>1__state)
		{
		}

		[Token(Token = "0x6000E08")]
		[Address(RVA = "0xA62B30", Offset = "0xA62B30", VA = "0xA62B30", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000E09")]
		[Address(RVA = "0xA62B34", Offset = "0xA62B34", VA = "0xA62B34", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E0B")]
		[Address(RVA = "0xA62BA0", Offset = "0xA62BA0", VA = "0xA62BA0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400110B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PathPointType pathType;

	[Token(Token = "0x400110C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public AICoverType coverType;

	[Token(Token = "0x400110D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string animState;

	[Token(Token = "0x400110E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool waitOnArrival;

	[Token(Token = "0x400110F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool allocated;

	[NonSerialized]
	[Token(Token = "0x4001110")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
	public bool preferred;

	[Token(Token = "0x4001111")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float minWaitTime;

	[Token(Token = "0x4001112")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float maxWaitTime;

	[NonSerialized]
	[Token(Token = "0x4001113")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform xForm;

	[Token(Token = "0x4001114")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float waitEndTime;

	[Token(Token = "0x4001115")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private WaitForSeconds deallocateWait;

	[Token(Token = "0x6000E02")]
	[Address(RVA = "0xA629BC", Offset = "0xA629BC", VA = "0xA629BC")]
	public void Init()
	{
	}

	[Token(Token = "0x6000E03")]
	[Address(RVA = "0xA61CE4", Offset = "0xA61CE4", VA = "0xA61CE4")]
	public bool EvaluatePoint(AIController _aiController)
	{
		return default(bool);
	}

	[Token(Token = "0x6000E04")]
	[Address(RVA = "0xA61948", Offset = "0xA61948", VA = "0xA61948")]
	public void Deallocate(bool immediate = false)
	{
	}

	[Token(Token = "0x6000E05")]
	[Address(RVA = "0xA62A44", Offset = "0xA62A44", VA = "0xA62A44")]
	[IteratorStateMachine(typeof(<DeallocateRoutine>d__14))]
	private IEnumerator DeallocateRoutine()
	{
		return null;
	}

	[Token(Token = "0x6000E06")]
	[Address(RVA = "0xA62AD4", Offset = "0xA62AD4", VA = "0xA62AD4")]
	public AIPathPoint()
	{
	}
}
[Token(Token = "0x20002A2")]
public class AITrigger : MonoBehaviour
{
	[Token(Token = "0x4001119")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Ragdoll ragdoll;

	[Token(Token = "0x400111A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private SkinnedMeshRenderer[] bodyMeshes;

	[Token(Token = "0x400111B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private MeshRenderer gunMesh;

	[Token(Token = "0x400111C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool init;

	[Token(Token = "0x6000E0D")]
	[Address(RVA = "0xA62BE8", Offset = "0xA62BE8", VA = "0xA62BE8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000E0E")]
	[Address(RVA = "0xA62C38", Offset = "0xA62C38", VA = "0xA62C38")]
	private void Start()
	{
	}

	[Token(Token = "0x6000E0F")]
	[Address(RVA = "0xA62CE0", Offset = "0xA62CE0", VA = "0xA62CE0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000E10")]
	[Address(RVA = "0xA62CF0", Offset = "0xA62CF0", VA = "0xA62CF0")]
	public void EnableShadows()
	{
	}

	[Token(Token = "0x6000E11")]
	[Address(RVA = "0xA62D68", Offset = "0xA62D68", VA = "0xA62D68")]
	public void HideShadows()
	{
	}

	[Token(Token = "0x6000E12")]
	[Address(RVA = "0xA62DE0", Offset = "0xA62DE0", VA = "0xA62DE0")]
	public AITrigger()
	{
	}
}
[Token(Token = "0x20002A3")]
public class IKAimingSystem : MonoBehaviour
{
	[Token(Token = "0x400111D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public FullBodyBipedIK fbbik;

	[Token(Token = "0x400111E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("Reference to the AimIK component.")]
	public AimIK aim;

	[Token(Token = "0x400111F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("Reference to the LookAt component (only used for the head in this instance).")]
	public LookAtIK lookAt;

	[Token(Token = "0x4001120")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("Reference to the Animator component.")]
	public Animator animator;

	[Token(Token = "0x4001121")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Tooltip("Will keep the aim target at a distance.")]
	public float minAimDistance;

	[Token(Token = "0x4001122")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float maxLookAngle;

	[Token(Token = "0x4001123")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float animblendRate;

	[Token(Token = "0x4001124")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float aimlookRate;

	[Token(Token = "0x4001125")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float looklookRate;

	[Token(Token = "0x4001126")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public bool enableOnStart;

	[Token(Token = "0x4001127")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Transform target;

	[Token(Token = "0x4001128")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Transform previousTarget;

	[Token(Token = "0x4001129")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public AIController aiController;

	[Token(Token = "0x400112A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public bool aiming;

	[Token(Token = "0x400112B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public TweenRotation recoilTween;

	[Token(Token = "0x400112C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Transform xForm;

	[Token(Token = "0x400112D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private int aimBlendFloat;

	[Token(Token = "0x400112E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private float targetAimWeight;

	[Token(Token = "0x400112F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private float targetLookWeight;

	[NonSerialized]
	[Token(Token = "0x4001130")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	public float targetAnimValue;

	[Token(Token = "0x6000E13")]
	[Address(RVA = "0xA62DE8", Offset = "0xA62DE8", VA = "0xA62DE8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000E14")]
	[Address(RVA = "0xA62EA0", Offset = "0xA62EA0", VA = "0xA62EA0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000E15")]
	[Address(RVA = "0xA60CFC", Offset = "0xA60CFC", VA = "0xA60CFC")]
	public void EvaluateLookWeight()
	{
	}

	[Token(Token = "0x6000E16")]
	[Address(RVA = "0xA62EF8", Offset = "0xA62EF8", VA = "0xA62EF8")]
	public IKAimingSystem()
	{
	}
}
[Token(Token = "0x20002A4")]
public class AmmoMagazine : MonoBehaviour
{
	[Token(Token = "0x20002A5")]
	[CompilerGenerated]
	private sealed class <PlungeRoundsRoutine>d__33 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400114D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400114E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400114F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AmmoMagazine <>4__this;

		[Token(Token = "0x4001150")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <time>5__2;

		[Token(Token = "0x4001151")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <lerp>5__3;

		[Token(Token = "0x4001152")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 <targetPos>5__4;

		[Token(Token = "0x17000197")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000E2A")]
			[Address(RVA = "0xA63DA4", Offset = "0xA63DA4", VA = "0xA63DA4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000198")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000E2C")]
			[Address(RVA = "0xA63DEC", Offset = "0xA63DEC", VA = "0xA63DEC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E27")]
		[Address(RVA = "0xA638E0", Offset = "0xA638E0", VA = "0xA638E0")]
		[DebuggerHidden]
		public <PlungeRoundsRoutine>d__33(int <>1__state)
		{
		}

		[Token(Token = "0x6000E28")]
		[Address(RVA = "0xA63AEC", Offset = "0xA63AEC", VA = "0xA63AEC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000E29")]
		[Address(RVA = "0xA63AF0", Offset = "0xA63AF0", VA = "0xA63AF0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E2B")]
		[Address(RVA = "0xA63DAC", Offset = "0xA63DAC", VA = "0xA63DAC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002A6")]
	[CompilerGenerated]
	private sealed class <ReturnToPool>d__34 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001153")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001154")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001155")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AmmoMagazine <>4__this;

		[Token(Token = "0x4001156")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <time>5__2;

		[Token(Token = "0x17000199")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000E30")]
			[Address(RVA = "0xA63EC4", Offset = "0xA63EC4", VA = "0xA63EC4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700019A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000E32")]
			[Address(RVA = "0xA63F0C", Offset = "0xA63F0C", VA = "0xA63F0C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E2D")]
		[Address(RVA = "0xA63908", Offset = "0xA63908", VA = "0xA63908")]
		[DebuggerHidden]
		public <ReturnToPool>d__34(int <>1__state)
		{
		}

		[Token(Token = "0x6000E2E")]
		[Address(RVA = "0xA63DF4", Offset = "0xA63DF4", VA = "0xA63DF4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000E2F")]
		[Address(RVA = "0xA63DF8", Offset = "0xA63DF8", VA = "0xA63DF8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E31")]
		[Address(RVA = "0xA63ECC", Offset = "0xA63ECC", VA = "0xA63ECC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002A7")]
	[CompilerGenerated]
	private sealed class <Held>d__38 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001157")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001158")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001159")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AmmoMagazine <>4__this;

		[Token(Token = "0x1700019B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000E36")]
			[Address(RVA = "0xA641B4", Offset = "0xA641B4", VA = "0xA641B4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700019C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000E38")]
			[Address(RVA = "0xA641FC", Offset = "0xA641FC", VA = "0xA641FC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E33")]
		[Address(RVA = "0xA639C4", Offset = "0xA639C4", VA = "0xA639C4")]
		[DebuggerHidden]
		public <Held>d__38(int <>1__state)
		{
		}

		[Token(Token = "0x6000E34")]
		[Address(RVA = "0xA63F14", Offset = "0xA63F14", VA = "0xA63F14", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000E35")]
		[Address(RVA = "0xA63F18", Offset = "0xA63F18", VA = "0xA63F18", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E37")]
		[Address(RVA = "0xA641BC", Offset = "0xA641BC", VA = "0xA641BC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001131")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Pose holdPose;

	[Token(Token = "0x4001132")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MeshRenderer rounds;

	[Token(Token = "0x4001133")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool isReloader;

	[Token(Token = "0x4001134")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform reloaderPlunger;

	[Token(Token = "0x4001135")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float plungerOffset;

	[Token(Token = "0x4001136")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public bool used;

	[Token(Token = "0x4001137")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
	public bool held;

	[Token(Token = "0x4001138")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3E")]
	public bool loaded;

	[Token(Token = "0x4001139")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform xForm;

	[Token(Token = "0x400113A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Rigidbody rBody;

	[Token(Token = "0x400113B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Collider[] colliders;

	[Token(Token = "0x400113C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float insertDetectionDistance;

	[Token(Token = "0x400113D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float minClatterDelay;

	[Token(Token = "0x400113E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public float minClatterMagnitude;

	[Token(Token = "0x400113F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public float maxClatterMagnitude;

	[Token(Token = "0x4001140")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float onGrabAlignmentDuration;

	[Token(Token = "0x4001141")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public float timeToLive;

	[Token(Token = "0x4001142")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public GunInfo owner;

	[Token(Token = "0x4001143")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public int index;

	[Token(Token = "0x4001144")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public HandController heldByHand;

	[Token(Token = "0x4001145")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private float nextClatter;

	[Token(Token = "0x4001146")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	public int remainingAmmo;

	[Token(Token = "0x4001147")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public int velFrameSteps;

	[Token(Token = "0x4001148")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Vector3[] linearVelocityHistory;

	[Token(Token = "0x4001149")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private Vector3[] angularVelocityHistory;

	[Token(Token = "0x400114A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private int velFrameStep;

	[Token(Token = "0x400114B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private bool layerChanged;

	[Token(Token = "0x400114C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Vector3 reloaderPlungerStartPos;

	[Token(Token = "0x6000E17")]
	[Address(RVA = "0xA62F74", Offset = "0xA62F74", VA = "0xA62F74")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000E18")]
	[Address(RVA = "0xA630CC", Offset = "0xA630CC", VA = "0xA630CC")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6000E19")]
	[Address(RVA = "0xA63224", Offset = "0xA63224", VA = "0xA63224")]
	public void ResetState()
	{
	}

	[Token(Token = "0x6000E1A")]
	[Address(RVA = "0xA63450", Offset = "0xA63450", VA = "0xA63450")]
	public void Detach(Vector3 velocity, Vector3 angularVelocity, bool dropped = false)
	{
	}

	[Token(Token = "0x6000E1B")]
	[Address(RVA = "0xA63858", Offset = "0xA63858", VA = "0xA63858")]
	public void PlungeRounds()
	{
	}

	[Token(Token = "0x6000E1C")]
	[Address(RVA = "0xA63878", Offset = "0xA63878", VA = "0xA63878")]
	[IteratorStateMachine(typeof(<PlungeRoundsRoutine>d__33))]
	private IEnumerator PlungeRoundsRoutine()
	{
		return null;
	}

	[Token(Token = "0x6000E1D")]
	[Address(RVA = "0xA637F0", Offset = "0xA637F0", VA = "0xA637F0")]
	[IteratorStateMachine(typeof(<ReturnToPool>d__34))]
	private IEnumerator ReturnToPool()
	{
		return null;
	}

	[Token(Token = "0x6000E1E")]
	[Address(RVA = "0xA63064", Offset = "0xA63064", VA = "0xA63064")]
	public void EnableCollision(bool state)
	{
	}

	[Token(Token = "0x6000E1F")]
	[Address(RVA = "0xA63930", Offset = "0xA63930", VA = "0xA63930")]
	public void BeingHeld(HandController _hand)
	{
	}

	[Token(Token = "0x6000E20")]
	[Address(RVA = "0xA633C0", Offset = "0xA633C0", VA = "0xA633C0")]
	private void SetLayer(int layer)
	{
	}

	[Token(Token = "0x6000E21")]
	[Address(RVA = "0xA6395C", Offset = "0xA6395C", VA = "0xA6395C")]
	[IteratorStateMachine(typeof(<Held>d__38))]
	private IEnumerator Held()
	{
		return null;
	}

	[Token(Token = "0x6000E22")]
	[Address(RVA = "0xA639EC", Offset = "0xA639EC", VA = "0xA639EC")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000E23")]
	[Address(RVA = "0xA63A04", Offset = "0xA63A04", VA = "0xA63A04")]
	private void UpdateVelocityHistory()
	{
	}

	[Token(Token = "0x6000E24")]
	[Address(RVA = "0xA63714", Offset = "0xA63714", VA = "0xA63714")]
	private void ResetVelocityHistory()
	{
	}

	[Token(Token = "0x6000E25")]
	[Address(RVA = "0xA6366C", Offset = "0xA6366C", VA = "0xA6366C")]
	private Vector3 GetMeanVector(Vector3[] positions)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000E26")]
	[Address(RVA = "0xA63AC0", Offset = "0xA63AC0", VA = "0xA63AC0")]
	public AmmoMagazine()
	{
	}
}
[Token(Token = "0x20002A8")]
public class AmmoMagazineBelt : MonoBehaviour
{
	[Token(Token = "0x400115A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static AmmoMagazineBelt instance;

	[Token(Token = "0x400115B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 localBounds;

	[Token(Token = "0x400115C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float posRate;

	[Token(Token = "0x400115D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float rotRate;

	[Token(Token = "0x400115E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float heightRelativeBeltOffset;

	[Token(Token = "0x400115F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float beltOffsetForward;

	[Token(Token = "0x4001160")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform rootXForm;

	[Token(Token = "0x4001161")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform eyeReference;

	[Token(Token = "0x4001162")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Transform leftHandXform;

	[Token(Token = "0x4001163")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Transform rightHandXform;

	[Token(Token = "0x4001164")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Transform leftMagazineTransform;

	[Token(Token = "0x4001165")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Transform rightMagazineTransform;

	[Token(Token = "0x4001166")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static bool handInMagazineBelt;

	[Token(Token = "0x4001167")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Rigidbody rBody;

	[Token(Token = "0x4001168")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Transform xForm;

	[Token(Token = "0x4001169")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float targetHeight;

	[Token(Token = "0x400116A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Transform workerXForm;

	[Token(Token = "0x400116B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public HandController activeHand;

	[Token(Token = "0x400116C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private GunInfo leftInfo;

	[Token(Token = "0x400116D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private GunInfo rightInfo;

	[Token(Token = "0x400116E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private AmmoMagazine leftMag;

	[Token(Token = "0x400116F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private AmmoMagazine rightMag;

	[Token(Token = "0x1700019D")]
	public bool isManualReload
	{
		[Token(Token = "0x6000E3D")]
		[Address(RVA = "0xA64634", Offset = "0xA64634", VA = "0xA64634")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000E39")]
	[Address(RVA = "0xA64204", Offset = "0xA64204", VA = "0xA64204")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000E3A")]
	[Address(RVA = "0xA6428C", Offset = "0xA6428C", VA = "0xA6428C")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000E3B")]
	[Address(RVA = "0xA643A8", Offset = "0xA643A8", VA = "0xA643A8")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000E3C")]
	[Address(RVA = "0xA644E8", Offset = "0xA644E8", VA = "0xA644E8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000E3E")]
	[Address(RVA = "0xA646CC", Offset = "0xA646CC", VA = "0xA646CC")]
	public void SetMag(bool _lefthand, GunInfo _info)
	{
	}

	[Token(Token = "0x6000E3F")]
	[Address(RVA = "0xA64770", Offset = "0xA64770", VA = "0xA64770")]
	public AmmoMagazine GetMag(bool _isLeftHand)
	{
		return null;
	}

	[Token(Token = "0x6000E40")]
	[Address(RVA = "0xA648B8", Offset = "0xA648B8", VA = "0xA648B8")]
	public void ClearMags(bool _isLeftHand)
	{
	}

	[Token(Token = "0x6000E41")]
	[Address(RVA = "0xA649D8", Offset = "0xA649D8", VA = "0xA649D8")]
	public AmmoMagazineBelt()
	{
	}
}
[Token(Token = "0x20002A9")]
public class BHapticsController : MonoBehaviour
{
	[Token(Token = "0x4001170")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static BHapticsController instance;

	[Token(Token = "0x4001171")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ArmsHapticClip bh_armLeftGrab;

	[Token(Token = "0x4001172")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ArmsHapticClip bh_armRightGrab;

	[Token(Token = "0x4001173")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public VestHapticClip bh_vestLeftGrabClip;

	[Token(Token = "0x4001174")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public VestHapticClip bh_vestRightGrabClip;

	[Token(Token = "0x4001175")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public VestHapticClip bh_vestHealthClip;

	[Token(Token = "0x4001176")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public VestHapticClip bh_vestLeftHolsterClip;

	[Token(Token = "0x4001177")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public VestHapticClip bh_vestRightHolsterClip;

	[Token(Token = "0x4001178")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public HeadHapticClip bh_HeadImpactClip;

	[Token(Token = "0x4001179")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public VestHapticClip bh_BodyImpactClip;

	[Token(Token = "0x400117A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Transform bodyXForm;

	[Token(Token = "0x400117B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float bodyHeight;

	[Token(Token = "0x400117C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private IHaptic haptic;

	[Token(Token = "0x400117D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private bool isAndroid;

	[Token(Token = "0x6000E42")]
	[Address(RVA = "0xA64A08", Offset = "0xA64A08", VA = "0xA64A08")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000E43")]
	[Address(RVA = "0xA64A68", Offset = "0xA64A68", VA = "0xA64A68")]
	private void Start()
	{
	}

	[Token(Token = "0x6000E44")]
	[Address(RVA = "0xA64A84", Offset = "0xA64A84", VA = "0xA64A84")]
	public void PlayLeftArmClip(ArmsHapticClip _clip)
	{
	}

	[Token(Token = "0x6000E45")]
	[Address(RVA = "0xA64AA4", Offset = "0xA64AA4", VA = "0xA64AA4")]
	public void PlayRightArmClip(ArmsHapticClip _clip)
	{
	}

	[Token(Token = "0x6000E46")]
	[Address(RVA = "0xA64AC4", Offset = "0xA64AC4", VA = "0xA64AC4")]
	public void PlayVestClip(VestHapticClip _clip)
	{
	}

	[Token(Token = "0x6000E47")]
	[Address(RVA = "0xA64AE4", Offset = "0xA64AE4", VA = "0xA64AE4")]
	public void PlayHeadClip(HeadHapticClip _clip)
	{
	}

	[Token(Token = "0x6000E48")]
	[Address(RVA = "0xA64B04", Offset = "0xA64B04", VA = "0xA64B04")]
	public void PlayHealthPickup()
	{
	}

	[Token(Token = "0x6000E49")]
	[Address(RVA = "0xA64B24", Offset = "0xA64B24", VA = "0xA64B24")]
	public void PlayGrab(HandType _hand)
	{
	}

	[Token(Token = "0x6000E4A")]
	[Address(RVA = "0xA64B84", Offset = "0xA64B84", VA = "0xA64B84")]
	public void PlayHolster(HandType _hand)
	{
	}

	[Token(Token = "0x6000E4B")]
	[Address(RVA = "0xA64BB4", Offset = "0xA64BB4", VA = "0xA64BB4")]
	public void PlayHit(bool _hit_head)
	{
	}

	[Token(Token = "0x6000E4C")]
	[Address(RVA = "0xA64CF0", Offset = "0xA64CF0", VA = "0xA64CF0")]
	public BHapticsController()
	{
	}
}
[Token(Token = "0x20002AA")]
public class BlinkingLight : MonoBehaviour
{
	[Token(Token = "0x20002AB")]
	[CompilerGenerated]
	private sealed class <FaceCamera>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001184")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001185")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001186")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BlinkingLight <>4__this;

		[Token(Token = "0x1700019E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000E53")]
			[Address(RVA = "0xA6504C", Offset = "0xA6504C", VA = "0xA6504C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700019F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000E55")]
			[Address(RVA = "0xA65094", Offset = "0xA65094", VA = "0xA65094", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E50")]
		[Address(RVA = "0xA64F10", Offset = "0xA64F10", VA = "0xA64F10")]
		[DebuggerHidden]
		public <FaceCamera>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x6000E51")]
		[Address(RVA = "0xA64F48", Offset = "0xA64F48", VA = "0xA64F48", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000E52")]
		[Address(RVA = "0xA64F4C", Offset = "0xA64F4C", VA = "0xA64F4C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E54")]
		[Address(RVA = "0xA65054", Offset = "0xA65054", VA = "0xA65054", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400117E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float scale;

	[Token(Token = "0x400117F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float duration;

	[Token(Token = "0x4001180")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform target;

	[Token(Token = "0x4001181")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private TweenScale scaler;

	[Token(Token = "0x4001182")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Renderer meshRenderer;

	[Token(Token = "0x4001183")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Transform xForm;

	[Token(Token = "0x6000E4D")]
	[Address(RVA = "0xA64CF8", Offset = "0xA64CF8", VA = "0xA64CF8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000E4E")]
	[Address(RVA = "0xA64EA8", Offset = "0xA64EA8", VA = "0xA64EA8")]
	[IteratorStateMachine(typeof(<FaceCamera>d__7))]
	private IEnumerator FaceCamera()
	{
		return null;
	}

	[Token(Token = "0x6000E4F")]
	[Address(RVA = "0xA64F38", Offset = "0xA64F38", VA = "0xA64F38")]
	public BlinkingLight()
	{
	}
}
[Token(Token = "0x20002AC")]
public class ChangeRenderQueue : MonoBehaviour
{
	[Token(Token = "0x4001187")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int renderQueue;

	[Token(Token = "0x4001188")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MeshRenderer mr;

	[Token(Token = "0x6000E56")]
	[Address(RVA = "0xA6509C", Offset = "0xA6509C", VA = "0xA6509C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000E57")]
	[Address(RVA = "0xA650CC", Offset = "0xA650CC", VA = "0xA650CC")]
	public ChangeRenderQueue()
	{
	}
}
[Serializable]
[Token(Token = "0x20002AD")]
public class ControllerOffsetSettings
{
	[Token(Token = "0x4001189")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public InputController.VRController controllerType;

	[Token(Token = "0x400118A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Vector3 position;

	[Token(Token = "0x400118B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector3 rotation;

	[Token(Token = "0x6000E58")]
	[Address(RVA = "0xA650DC", Offset = "0xA650DC", VA = "0xA650DC")]
	public ControllerOffsetSettings()
	{
	}
}
[Token(Token = "0x20002AE")]
[CreateAssetMenu(fileName = "SteamControllerOffsets", menuName = "Settings/ControllerOffsets")]
public class ControllerOffsets : ScriptableObject
{
	[Token(Token = "0x400118C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ControllerOffsetSettings[] settings;

	[Token(Token = "0x6000E59")]
	[Address(RVA = "0xA650E4", Offset = "0xA650E4", VA = "0xA650E4")]
	public ControllerOffsetSettings GetOffsets(InputController.VRController _controllerType)
	{
		return null;
	}

	[Token(Token = "0x6000E5A")]
	[Address(RVA = "0xA65134", Offset = "0xA65134", VA = "0xA65134")]
	public ControllerOffsets()
	{
	}
}
[Token(Token = "0x20002AF")]
public class CoverPointHotKeys : MonoBehaviour
{
	[Token(Token = "0x400118D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public CoverPoint[] points;

	[Token(Token = "0x400118E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool[] pointsUsed;

	[Token(Token = "0x400118F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private KeyCode[] codes;

	[Token(Token = "0x4001190")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int index;

	[Token(Token = "0x4001191")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool useControllerButton;

	[Token(Token = "0x6000E5B")]
	[Address(RVA = "0xA6513C", Offset = "0xA6513C", VA = "0xA6513C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000E5C")]
	[Address(RVA = "0xA65160", Offset = "0xA65160", VA = "0xA65160")]
	public CoverPointHotKeys()
	{
	}
}
[Token(Token = "0x20002B0")]
public class CoverController : MonoBehaviour
{
	[Token(Token = "0x20002B2")]
	[CompilerGenerated]
	private sealed class <TeleportTransition>d__63 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40011C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40011C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40011C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CoverController <>4__this;

		[Token(Token = "0x40011C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 start;

		[Token(Token = "0x40011C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector3 init;

		[Token(Token = "0x40011C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector3 dest;

		[Token(Token = "0x40011C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public Quaternion rot;

		[Token(Token = "0x40011C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float <time>5__2;

		[Token(Token = "0x40011C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float <lerp>5__3;

		[Token(Token = "0x170001A0")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000E7A")]
			[Address(RVA = "0xA68670", Offset = "0xA68670", VA = "0xA68670", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001A1")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000E7C")]
			[Address(RVA = "0xA686B8", Offset = "0xA686B8", VA = "0xA686B8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E77")]
		[Address(RVA = "0xA68014", Offset = "0xA68014", VA = "0xA68014")]
		[DebuggerHidden]
		public <TeleportTransition>d__63(int <>1__state)
		{
		}

		[Token(Token = "0x6000E78")]
		[Address(RVA = "0xA682D8", Offset = "0xA682D8", VA = "0xA682D8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000E79")]
		[Address(RVA = "0xA682DC", Offset = "0xA682DC", VA = "0xA682DC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E7B")]
		[Address(RVA = "0xA68678", Offset = "0xA68678", VA = "0xA68678", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001192")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static CoverController instance;

	[Token(Token = "0x4001193")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static Action onTeleport;

	[Token(Token = "0x4001194")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static Action onTeleportTransitionStarted;

	[Token(Token = "0x4001195")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static Action onShow;

	[Token(Token = "0x4001196")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public static Action onHide;

	[NonSerialized]
	[Token(Token = "0x4001197")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool showing;

	[NonSerialized]
	[Token(Token = "0x4001198")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool kinematic;

	[Token(Token = "0x4001199")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float rotationIncrement;

	[Token(Token = "0x400119A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float teleportTransitionDuration;

	[Token(Token = "0x400119B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float dotLimit;

	[Token(Token = "0x400119C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioSource teleportSound;

	[Token(Token = "0x400119D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public LayerMask rayMask;

	[Token(Token = "0x400119E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform playerRootTransform;

	[Token(Token = "0x400119F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform playerEyeTransform;

	[Token(Token = "0x40011A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Transform leftHandXForm;

	[Token(Token = "0x40011A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Transform rightHandXForm;

	[Token(Token = "0x40011A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public MeshRenderer leftHandActiveIndicator;

	[Token(Token = "0x40011A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public MeshRenderer rightHandActiveIndicator;

	[Token(Token = "0x40011A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public CoverPoint startCoverPoint;

	[Token(Token = "0x40011A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Material moveMaterial;

	[Token(Token = "0x40011A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Material midMaterial;

	[Token(Token = "0x40011A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Material highMaterial;

	[Token(Token = "0x40011A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Material whiteMaterial;

	[Token(Token = "0x40011A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public CoverPoint selectedPoint;

	[Token(Token = "0x40011AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public CoverPoint activePoint;

	[Token(Token = "0x40011AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private SplineComputer leftSpline;

	[Token(Token = "0x40011AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private SplineComputer rightSpline;

	[Token(Token = "0x40011AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Transform leftSplineXForm;

	[Token(Token = "0x40011AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private Transform rightSplineXForm;

	[Token(Token = "0x40011AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private MeshRenderer leftSplineRenderer;

	[Token(Token = "0x40011B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private MeshRenderer rightSplineRenderer;

	[Token(Token = "0x40011B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private Transform leftSplineRefXForm;

	[Token(Token = "0x40011B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private Transform rightSplineRefXForm;

	[Token(Token = "0x40011B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private Rigidbody leftSplineBody;

	[Token(Token = "0x40011B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private Rigidbody rightSplineBody;

	[Token(Token = "0x40011B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private Transform workerXForm;

	[Token(Token = "0x40011B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private bool lastState;

	[Token(Token = "0x40011B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
	private RaycastHit rayHit;

	[Token(Token = "0x40011B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private bool leftPrimaryButtonHeld;

	[Token(Token = "0x40011B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x129")]
	private bool rightPrimaryButtonHeld;

	[Token(Token = "0x40011BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
	public Vector3 currentRigPosition;

	[Token(Token = "0x40011BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private Quaternion currentRigRotation;

	[Token(Token = "0x40011BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private CoverPoint currentPoint;

	[Token(Token = "0x40011BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public bool teleporting;

	[Token(Token = "0x6000E5D")]
	[Address(RVA = "0xA65168", Offset = "0xA65168", VA = "0xA65168")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000E5E")]
	[Address(RVA = "0xA65578", Offset = "0xA65578", VA = "0xA65578")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000E5F")]
	[Address(RVA = "0xA65A2C", Offset = "0xA65A2C", VA = "0xA65A2C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000E60")]
	[Address(RVA = "0xA65DD8", Offset = "0xA65DD8", VA = "0xA65DD8")]
	private void OnLevelLoaded()
	{
	}

	[Token(Token = "0x6000E61")]
	[Address(RVA = "0xA65EA0", Offset = "0xA65EA0", VA = "0xA65EA0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000E62")]
	[Address(RVA = "0xA65F18", Offset = "0xA65F18", VA = "0xA65F18")]
	private void SnapLeft()
	{
	}

	[Token(Token = "0x6000E63")]
	[Address(RVA = "0xA660C0", Offset = "0xA660C0", VA = "0xA660C0")]
	private void SnapRight()
	{
	}

	[Token(Token = "0x6000E64")]
	[Address(RVA = "0xA66260", Offset = "0xA66260", VA = "0xA66260")]
	private void RotateLeftStick()
	{
	}

	[Token(Token = "0x6000E65")]
	[Address(RVA = "0xA663E8", Offset = "0xA663E8", VA = "0xA663E8")]
	private void RotateRightStick()
	{
	}

	[Token(Token = "0x6000E66")]
	[Address(RVA = "0xA66574", Offset = "0xA66574", VA = "0xA66574")]
	private void ResetCenter()
	{
	}

	[Token(Token = "0x6000E67")]
	[Address(RVA = "0xA668F8", Offset = "0xA668F8", VA = "0xA668F8")]
	private Vector3 GetCorrectCenter(Transform _destination)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000E68")]
	[Address(RVA = "0xA66988", Offset = "0xA66988", VA = "0xA66988")]
	private Vector3 GetInitialTransPosition(Transform _destination)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000E69")]
	[Address(RVA = "0xA66A98", Offset = "0xA66A98", VA = "0xA66A98")]
	public void CheckTeleport()
	{
	}

	[Token(Token = "0x6000E6A")]
	[Address(RVA = "0xA67284", Offset = "0xA67284", VA = "0xA67284")]
	private void UpdateSplines()
	{
	}

	[Token(Token = "0x6000E6B")]
	[Address(RVA = "0xA6746C", Offset = "0xA6746C", VA = "0xA6746C")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000E6C")]
	[Address(RVA = "0xA67B38", Offset = "0xA67B38", VA = "0xA67B38")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000E6D")]
	[Address(RVA = "0xA67560", Offset = "0xA67560", VA = "0xA67560")]
	private void UpdateSelection()
	{
	}

	[Token(Token = "0x6000E6E")]
	[Address(RVA = "0xA65EA4", Offset = "0xA65EA4", VA = "0xA65EA4")]
	private void UpdateIndicators()
	{
	}

	[Token(Token = "0x6000E6F")]
	[Address(RVA = "0xA66688", Offset = "0xA66688", VA = "0xA66688")]
	private void TeleportPlayer(Vector3 start, Vector3 init, Vector3 dest, Quaternion rot, bool immediate = false)
	{
	}

	[Token(Token = "0x6000E70")]
	[Address(RVA = "0xA67F30", Offset = "0xA67F30", VA = "0xA67F30")]
	[IteratorStateMachine(typeof(<TeleportTransition>d__63))]
	private IEnumerator TeleportTransition(Vector3 start, Vector3 init, Vector3 dest, Quaternion rot)
	{
		return null;
	}

	[Token(Token = "0x6000E71")]
	[Address(RVA = "0xA67D30", Offset = "0xA67D30", VA = "0xA67D30")]
	private void SetIndicatorMaterial(CoverPoint.CoverType _type)
	{
	}

	[Token(Token = "0x6000E72")]
	[Address(RVA = "0xA6803C", Offset = "0xA6803C", VA = "0xA6803C")]
	public void SetStartPoint(CoverPoint point)
	{
	}

	[Token(Token = "0x6000E73")]
	[Address(RVA = "0xA681E8", Offset = "0xA681E8", VA = "0xA681E8")]
	public CoverController()
	{
	}
}
[Serializable]
[Token(Token = "0x20002B3")]
public class CoverPoint : MonoBehaviour
{
	[Token(Token = "0x20002B4")]
	public enum CoverType
	{
		[Token(Token = "0x40011E8")]
		None,
		[Token(Token = "0x40011E9")]
		Move,
		[Token(Token = "0x40011EA")]
		Mid,
		[Token(Token = "0x40011EB")]
		High
	}

	[Token(Token = "0x40011C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public CoverType coverType;

	[Token(Token = "0x40011CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Space]
	[Header("Events")]
	public UnityEvent onActive;

	[Token(Token = "0x40011CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEvent onShow;

	[Token(Token = "0x40011CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEvent onHide;

	[Token(Token = "0x40011CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool useHeadForwardOverride;

	[Token(Token = "0x40011CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	public bool setAmbientOnActive;

	[Token(Token = "0x40011CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public string ambientClipName;

	[Token(Token = "0x40011D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float ambientVolume;

	[Token(Token = "0x40011D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public LightSpecController specController;

	[Token(Token = "0x40011D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public FogController fogController;

	[Token(Token = "0x40011D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Transform xForm;

	[NonSerialized]
	[Token(Token = "0x40011D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public GameObject model;

	[NonSerialized]
	[Token(Token = "0x40011D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public MeshRenderer bakedMesh;

	[NonSerialized]
	[Token(Token = "0x40011D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public GameObject selectionHighlight;

	[Token(Token = "0x40011D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public bool startPoint;

	[Token(Token = "0x40011D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
	public bool endPoint;

	[Token(Token = "0x40011D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x82")]
	public bool endPointAutoLoadHome;

	[Token(Token = "0x40011DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x83")]
	public bool activePoint;

	[Token(Token = "0x40011DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public bool selected;

	[Token(Token = "0x40011DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Collider detectionTrigger;

	[Token(Token = "0x40011DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public MeshRenderer selectionHighlightMesh;

	[Token(Token = "0x40011DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private TweenScale modelTweenScaler;

	[Token(Token = "0x40011DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private TweenScale selectionHighlightTweenScaler;

	[Token(Token = "0x40011E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public Transform selectionHighlightXForm;

	[Token(Token = "0x40011E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public CoverPoint[] connectedPoints;

	[Token(Token = "0x40011E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public AIPathPoint[] preferredPoints;

	[NonSerialized]
	[Token(Token = "0x40011E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public PlayerLight playerLight;

	[Token(Token = "0x40011E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public bool hasPlayerLight;

	[Token(Token = "0x40011E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private GameObject prefabMesh;

	[Token(Token = "0x40011E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private bool highlightDisplayed;

	[Token(Token = "0x6000E7D")]
	[Address(RVA = "0xA686C0", Offset = "0xA686C0", VA = "0xA686C0")]
	private void LoadPrefabMesh()
	{
	}

	[Token(Token = "0x6000E7E")]
	[Address(RVA = "0xA68860", Offset = "0xA68860", VA = "0xA68860")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000E7F")]
	[Address(RVA = "0xA68AFC", Offset = "0xA68AFC", VA = "0xA68AFC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000E80")]
	[Address(RVA = "0xA67C28", Offset = "0xA67C28", VA = "0xA67C28")]
	public void ShowConnectedPoints()
	{
	}

	[Token(Token = "0x6000E81")]
	[Address(RVA = "0xA671A8", Offset = "0xA671A8", VA = "0xA671A8")]
	public void HideConnectedPoints()
	{
	}

	[Token(Token = "0x6000E82")]
	[Address(RVA = "0xA68DD4", Offset = "0xA68DD4", VA = "0xA68DD4")]
	public void ShowPoint()
	{
	}

	[Token(Token = "0x6000E83")]
	[Address(RVA = "0xA68E48", Offset = "0xA68E48", VA = "0xA68E48")]
	private void ShowSelectionHighlight(bool show)
	{
	}

	[Token(Token = "0x6000E84")]
	[Address(RVA = "0xA67EA8", Offset = "0xA67EA8", VA = "0xA67EA8")]
	public void HidePoint(bool reverseTween)
	{
	}

	[Token(Token = "0x6000E85")]
	[Address(RVA = "0xA67030", Offset = "0xA67030", VA = "0xA67030")]
	public void SetActivePoint(bool isActive)
	{
	}

	[Token(Token = "0x6000E86")]
	[Address(RVA = "0xA67D08", Offset = "0xA67D08", VA = "0xA67D08")]
	public void SetSelectedState(bool state)
	{
	}

	[Token(Token = "0x6000E87")]
	[Address(RVA = "0xA68D4C", Offset = "0xA68D4C", VA = "0xA68D4C")]
	public void HideOnEnd()
	{
	}

	[Token(Token = "0x6000E88")]
	[Address(RVA = "0xA68EC0", Offset = "0xA68EC0", VA = "0xA68EC0")]
	public CoverPoint()
	{
	}
}
[Token(Token = "0x20002B5")]
public class EntityProjector : MonoBehaviour
{
	[Token(Token = "0x20002B6")]
	public abstract class EntityData
	{
		[Token(Token = "0x4001209")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GameObject entity;

		[Token(Token = "0x400120A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Bounds bounds;

		[Token(Token = "0x400120B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Material sourceMaterial;

		[Token(Token = "0x400120C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Material displayedMaterial;

		[Token(Token = "0x6000E9A")]
		public abstract void ShowMesh(bool _show);

		[Token(Token = "0x6000E9B")]
		[Address(RVA = "0xA6A650", Offset = "0xA6A650", VA = "0xA6A650")]
		protected EntityData()
		{
		}
	}

	[Token(Token = "0x20002B7")]
	public class WeaponEntityData : EntityData
	{
		[Token(Token = "0x400120D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public WeaponData weapondData;

		[Token(Token = "0x400120E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public WeaponVariantData variantData;

		[Token(Token = "0x400120F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public MeshRenderer[] meshes;

		[Token(Token = "0x6000E9C")]
		[Address(RVA = "0xA69668", Offset = "0xA69668", VA = "0xA69668")]
		public WeaponEntityData(WeaponData _weaponData, WeaponVariantData _variantData, Transform _Parent)
		{
		}

		[Token(Token = "0x6000E9D")]
		[Address(RVA = "0xA6A658", Offset = "0xA6A658", VA = "0xA6A658", Slot = "4")]
		public override void ShowMesh(bool _show)
		{
		}

		[Token(Token = "0x6000E9E")]
		[Address(RVA = "0xA699A0", Offset = "0xA699A0", VA = "0xA699A0")]
		public void SetDisplayMaterial(Material _mat)
		{
		}
	}

	[Token(Token = "0x20002B8")]
	public class GloveEntityData : EntityData
	{
		[Token(Token = "0x4001210")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GloveData gloveData;

		[Token(Token = "0x4001211")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GloveVariantData variantData;

		[Token(Token = "0x4001212")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public SkinnedMeshRenderer mesh;

		[Token(Token = "0x6000E9F")]
		[Address(RVA = "0xA69A0C", Offset = "0xA69A0C", VA = "0xA69A0C")]
		public GloveEntityData(GloveData _gloveData, GloveVariantData _variantData, Transform _Parent)
		{
		}

		[Token(Token = "0x6000EA0")]
		[Address(RVA = "0xA6A6E8", Offset = "0xA6A6E8", VA = "0xA6A6E8", Slot = "4")]
		public override void ShowMesh(bool _show)
		{
		}

		[Token(Token = "0x6000EA1")]
		[Address(RVA = "0xA69C64", Offset = "0xA69C64", VA = "0xA69C64")]
		public void SetDisplayMaterial(Material _mat)
		{
		}
	}

	[Token(Token = "0x20002B9")]
	[CompilerGenerated]
	private sealed class <HackForTextureLoads>d__32 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001213")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001214")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001215")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EntityProjector <>4__this;

		[Token(Token = "0x170001A2")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000EA5")]
			[Address(RVA = "0xA6BB70", Offset = "0xA6BB70", VA = "0xA6BB70", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001A3")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000EA7")]
			[Address(RVA = "0xA6BBB8", Offset = "0xA6BBB8", VA = "0xA6BBB8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000EA2")]
		[Address(RVA = "0xA6B708", Offset = "0xA6B708", VA = "0xA6B708")]
		[DebuggerHidden]
		public <HackForTextureLoads>d__32(int <>1__state)
		{
		}

		[Token(Token = "0x6000EA3")]
		[Address(RVA = "0xA6B730", Offset = "0xA6B730", VA = "0xA6B730", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000EA4")]
		[Address(RVA = "0xA6B734", Offset = "0xA6B734", VA = "0xA6B734", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000EA6")]
		[Address(RVA = "0xA6BB78", Offset = "0xA6BB78", VA = "0xA6BB78", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002BA")]
	[CompilerGenerated]
	private sealed class <ChangeEntityRoutine>d__44 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001216")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001217")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001218")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EntityProjector <>4__this;

		[Token(Token = "0x4001219")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <time>5__2;

		[Token(Token = "0x400121A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <lerp>5__3;

		[Token(Token = "0x170001A4")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000EAB")]
			[Address(RVA = "0xA6BE78", Offset = "0xA6BE78", VA = "0xA6BE78", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001A5")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000EAD")]
			[Address(RVA = "0xA6BEC0", Offset = "0xA6BEC0", VA = "0xA6BEC0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000EA8")]
		[Address(RVA = "0xA6BBC0", Offset = "0xA6BBC0", VA = "0xA6BBC0")]
		[DebuggerHidden]
		public <ChangeEntityRoutine>d__44(int <>1__state)
		{
		}

		[Token(Token = "0x6000EA9")]
		[Address(RVA = "0xA6BBE8", Offset = "0xA6BBE8", VA = "0xA6BBE8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000EAA")]
		[Address(RVA = "0xA6BBEC", Offset = "0xA6BBEC", VA = "0xA6BBEC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000EAC")]
		[Address(RVA = "0xA6BE80", Offset = "0xA6BE80", VA = "0xA6BE80", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002BB")]
	[CompilerGenerated]
	private sealed class <ShowCurrentEntity>d__45 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400121B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400121C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400121D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EntityProjector <>4__this;

		[Token(Token = "0x400121E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <time>5__2;

		[Token(Token = "0x400121F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <lerp>5__3;

		[Token(Token = "0x170001A6")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000EB1")]
			[Address(RVA = "0xA6C08C", Offset = "0xA6C08C", VA = "0xA6C08C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001A7")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000EB3")]
			[Address(RVA = "0xA6C0D4", Offset = "0xA6C0D4", VA = "0xA6C0D4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000EAE")]
		[Address(RVA = "0xA6BEC8", Offset = "0xA6BEC8", VA = "0xA6BEC8")]
		[DebuggerHidden]
		public <ShowCurrentEntity>d__45(int <>1__state)
		{
		}

		[Token(Token = "0x6000EAF")]
		[Address(RVA = "0xA6BEF0", Offset = "0xA6BEF0", VA = "0xA6BEF0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000EB0")]
		[Address(RVA = "0xA6BEF4", Offset = "0xA6BEF4", VA = "0xA6BEF4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000EB2")]
		[Address(RVA = "0xA6C094", Offset = "0xA6C094", VA = "0xA6C094", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002BC")]
	[CompilerGenerated]
	private sealed class <HideCurrentEntity>d__46 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001220")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001221")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001222")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EntityProjector <>4__this;

		[Token(Token = "0x4001223")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <time>5__2;

		[Token(Token = "0x4001224")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <lerp>5__3;

		[Token(Token = "0x170001A8")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000EB7")]
			[Address(RVA = "0xA6C2B0", Offset = "0xA6C2B0", VA = "0xA6C2B0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001A9")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000EB9")]
			[Address(RVA = "0xA6C2F8", Offset = "0xA6C2F8", VA = "0xA6C2F8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000EB4")]
		[Address(RVA = "0xA6C0DC", Offset = "0xA6C0DC", VA = "0xA6C0DC")]
		[DebuggerHidden]
		public <HideCurrentEntity>d__46(int <>1__state)
		{
		}

		[Token(Token = "0x6000EB5")]
		[Address(RVA = "0xA6C104", Offset = "0xA6C104", VA = "0xA6C104", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000EB6")]
		[Address(RVA = "0xA6C108", Offset = "0xA6C108", VA = "0xA6C108", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000EB8")]
		[Address(RVA = "0xA6C2B8", Offset = "0xA6C2B8", VA = "0xA6C2B8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40011EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform shopFrame;

	[Token(Token = "0x40011ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ParticleSystem onFX;

	[Token(Token = "0x40011EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform pivot;

	[Token(Token = "0x40011EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform entityParent;

	[Token(Token = "0x40011F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform weaponEntityParent;

	[Token(Token = "0x40011F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform gloveEntityParent;

	[Token(Token = "0x40011F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public EntityData currentEntity;

	[Token(Token = "0x40011F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public EntityData lastEntity;

	[Token(Token = "0x40011F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float rotationSpeed;

	[Token(Token = "0x40011F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public AnimationCurve inCurve;

	[Token(Token = "0x40011F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public AnimationCurve outCurve;

	[Token(Token = "0x40011F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public float inDuration;

	[Token(Token = "0x40011F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public float outDuration;

	[Token(Token = "0x40011F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public float rimMinValue;

	[Token(Token = "0x40011FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public float rimMaxValue;

	[Token(Token = "0x40011FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public float rimModulateRate;

	[Token(Token = "0x40011FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Material entityMaterial;

	[Token(Token = "0x40011FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Material entityEmissiveMaterial;

	[Token(Token = "0x40011FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Material currentMaterial;

	[Token(Token = "0x40011FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private int currentRIMPropertyID;

	[Token(Token = "0x4001200")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public UnityAction<List<GameObject>> onLoadCompleted;

	[Token(Token = "0x4001201")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Vector3 V3_ONE;

	[Token(Token = "0x4001202")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private Vector3 V3_ZERO;

	[Token(Token = "0x4001203")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private Vector3 V3_2D;

	[Token(Token = "0x4001204")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public List<WeaponEntityData> weaponEntityList;

	[Token(Token = "0x4001205")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public List<GloveEntityData> gloveEntityList;

	[Token(Token = "0x4001206")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private float rimMod;

	[Token(Token = "0x4001207")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	private bool entityDisplaying;

	[Token(Token = "0x4001208")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xED")]
	private bool animatingScale;

	[Token(Token = "0x6000E89")]
	[Address(RVA = "0xA68ED8", Offset = "0xA68ED8", VA = "0xA68ED8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000E8A")]
	[Address(RVA = "0xA6903C", Offset = "0xA6903C", VA = "0xA6903C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000E8B")]
	[Address(RVA = "0xA693FC", Offset = "0xA693FC", VA = "0xA693FC")]
	private Material RIMMaterial(Material _mat)
	{
		return null;
	}

	[Token(Token = "0x6000E8C")]
	[Address(RVA = "0xA69394", Offset = "0xA69394", VA = "0xA69394")]
	[IteratorStateMachine(typeof(<HackForTextureLoads>d__32))]
	private IEnumerator HackForTextureLoads()
	{
		return null;
	}

	[Token(Token = "0x6000E8D")]
	[Address(RVA = "0xA6906C", Offset = "0xA6906C", VA = "0xA6906C")]
	private void PreloadAllWeaponVariants()
	{
	}

	[Token(Token = "0x6000E8E")]
	[Address(RVA = "0xA69200", Offset = "0xA69200", VA = "0xA69200")]
	private void PreloadAllGloveVariants()
	{
	}

	[Token(Token = "0x6000E8F")]
	[Address(RVA = "0xA69C88", Offset = "0xA69C88", VA = "0xA69C88")]
	private void Update()
	{
	}

	[Token(Token = "0x6000E90")]
	[Address(RVA = "0xA69DE4", Offset = "0xA69DE4", VA = "0xA69DE4")]
	private WeaponEntityData GetWeaponEntity(GunType _type, WeaponVariantData _variantData)
	{
		return null;
	}

	[Token(Token = "0x6000E91")]
	[Address(RVA = "0xA69FA4", Offset = "0xA69FA4", VA = "0xA69FA4")]
	public void ShowWeaponPrefab(WeaponData _weaponData, WeaponVariantData _variantData, bool _purchased, bool updateRack)
	{
	}

	[Token(Token = "0x6000E92")]
	[Address(RVA = "0xA6A288", Offset = "0xA6A288", VA = "0xA6A288")]
	private GloveEntityData GetGloveEntity(GloveType _type, GloveVariantData _variantData)
	{
		return null;
	}

	[Token(Token = "0x6000E93")]
	[Address(RVA = "0xA6A448", Offset = "0xA6A448", VA = "0xA6A448")]
	public void ShowGlovePrefab(GloveData _gloveData, GloveVariantData _variantData)
	{
	}

	[Token(Token = "0x6000E94")]
	[Address(RVA = "0xA6A5A8", Offset = "0xA6A5A8", VA = "0xA6A5A8")]
	public void Exit()
	{
	}

	[Token(Token = "0x6000E95")]
	[Address(RVA = "0xA6A1B8", Offset = "0xA6A1B8", VA = "0xA6A1B8")]
	[IteratorStateMachine(typeof(<ChangeEntityRoutine>d__44))]
	private IEnumerator ChangeEntityRoutine()
	{
		return null;
	}

	[Token(Token = "0x6000E96")]
	[Address(RVA = "0xA6A220", Offset = "0xA6A220", VA = "0xA6A220")]
	[IteratorStateMachine(typeof(<ShowCurrentEntity>d__45))]
	private IEnumerator ShowCurrentEntity()
	{
		return null;
	}

	[Token(Token = "0x6000E97")]
	[Address(RVA = "0xA6A5C8", Offset = "0xA6A5C8", VA = "0xA6A5C8")]
	[IteratorStateMachine(typeof(<HideCurrentEntity>d__46))]
	private IEnumerator HideCurrentEntity()
	{
		return null;
	}

	[Token(Token = "0x6000E98")]
	[Address(RVA = "0xA6A630", Offset = "0xA6A630", VA = "0xA6A630")]
	private void ModulateMaterialRim()
	{
	}

	[Token(Token = "0x6000E99")]
	[Address(RVA = "0xA6A634", Offset = "0xA6A634", VA = "0xA6A634")]
	public EntityProjector()
	{
	}
}
[Token(Token = "0x20002BD")]
public class TeleportTrigger : MonoBehaviour
{
	[Token(Token = "0x4001225")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public CoverPoint target;

	[Token(Token = "0x6000EBA")]
	[Address(RVA = "0xA6C300", Offset = "0xA6C300", VA = "0xA6C300")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000EBB")]
	[Address(RVA = "0xA6C360", Offset = "0xA6C360", VA = "0xA6C360")]
	public TeleportTrigger()
	{
	}
}
[Token(Token = "0x20002BE")]
[CreateAssetMenu(fileName = "DifficultySettings", menuName = "Settings/DifficultySettings")]
public class DifficultySettings : ScriptableObject
{
	[Token(Token = "0x4001226")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Difficulty difficulty;

	[Token(Token = "0x4001227")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int scoreBonus;

	[Token(Token = "0x4001228")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int missShotCount;

	[Token(Token = "0x4001229")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int damageInterval;

	[Token(Token = "0x400122A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float missPlayerRadius;

	[Token(Token = "0x400122B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float minAIFiringDelay;

	[Token(Token = "0x400122C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float maxAIFiringDelay;

	[Token(Token = "0x400122D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public int hitPoints;

	[Token(Token = "0x6000EBC")]
	[Address(RVA = "0xA6C368", Offset = "0xA6C368", VA = "0xA6C368")]
	public DifficultySettings()
	{
	}
}
[Token(Token = "0x20002BF")]
public class DoomGlow : MonoBehaviour
{
	[Token(Token = "0x400122E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float quadSize;

	[Token(Token = "0x400122F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Color quadColor;

	[Token(Token = "0x4001230")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public Color edgeColor;

	[Token(Token = "0x4001231")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float pushDistance;

	[Token(Token = "0x4001232")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool showBack;

	[Token(Token = "0x4001233")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	public bool showQuad;

	[Token(Token = "0x4001234")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
	public bool showBounds;

	[Token(Token = "0x4001235")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public MeshRenderer meshRenderer;

	[Token(Token = "0x4001236")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private MeshFilter meshFilter;

	[Token(Token = "0x4001237")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Mesh mesh;

	[Token(Token = "0x4001238")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Camera mainCamera;

	[Token(Token = "0x4001239")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Transform mainCameraXForm;

	[Token(Token = "0x400123A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Transform xForm;

	[Token(Token = "0x400123B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Color colorFilled;

	[Token(Token = "0x400123C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Color colorEdge;

	[Token(Token = "0x400123D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Vector3 quadNormal;

	[Token(Token = "0x400123E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private int[] indexBuffer;

	[Token(Token = "0x400123F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private int[] indexBufferFull;

	[Token(Token = "0x4001240")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private Vector3[] quadPoints;

	[Token(Token = "0x4001241")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private Vector3[] vertexBuffer;

	[Token(Token = "0x4001242")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private Color[] colorBuffer;

	[Token(Token = "0x4001243")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private Vector3[] eyeToPoint_WS;

	[Token(Token = "0x4001244")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private Vector3[] pushDirWS;

	[Token(Token = "0x4001245")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public float dot;

	[Token(Token = "0x4001246")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	public float sign;

	[Token(Token = "0x4001247")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private bool boundsRecalculated;

	[Token(Token = "0x6000EBD")]
	[Address(RVA = "0xA6C394", Offset = "0xA6C394", VA = "0xA6C394")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000EBE")]
	[Address(RVA = "0xA6C574", Offset = "0xA6C574", VA = "0xA6C574")]
	private void Start()
	{
	}

	[Token(Token = "0x6000EBF")]
	[Address(RVA = "0xA6C698", Offset = "0xA6C698", VA = "0xA6C698")]
	private void UpdateQuadPoints()
	{
	}

	[Token(Token = "0x6000EC0")]
	[Address(RVA = "0xA6C7CC", Offset = "0xA6C7CC", VA = "0xA6C7CC")]
	private float LinearMap(float inVal, float inFrom, float inTo, float outFrom, float outTo)
	{
		return default(float);
	}

	[Token(Token = "0x6000EC1")]
	[Address(RVA = "0xA6C810", Offset = "0xA6C810", VA = "0xA6C810")]
	private void Swap(ref Vector3 A, ref Vector3 B)
	{
	}

	[Token(Token = "0x6000EC2")]
	[Address(RVA = "0xA6C834", Offset = "0xA6C834", VA = "0xA6C834")]
	public void UpdateMeshVR()
	{
	}

	[Token(Token = "0x6000EC3")]
	[Address(RVA = "0xA6D094", Offset = "0xA6D094", VA = "0xA6D094")]
	public DoomGlow()
	{
	}
}
[Token(Token = "0x20002C0")]
public class DoomGlowManager : MonoBehaviour
{
	[Token(Token = "0x4001248")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool alwaysUpdate;

	[Token(Token = "0x4001249")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private DoomGlow[] glows;

	[Token(Token = "0x6000EC4")]
	[Address(RVA = "0xA6D17C", Offset = "0xA6D17C", VA = "0xA6D17C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000EC5")]
	[Address(RVA = "0xA6D1CC", Offset = "0xA6D1CC", VA = "0xA6D1CC")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000EC6")]
	[Address(RVA = "0xA6D260", Offset = "0xA6D260", VA = "0xA6D260")]
	public DoomGlowManager()
	{
	}
}
[Token(Token = "0x20002C1")]
public class Elevator : MonoBehaviour
{
	[Token(Token = "0x20002C2")]
	[CompilerGenerated]
	private sealed class <OpenRoutine>d__26 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001261")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001262")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001263")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Elevator <>4__this;

		[Token(Token = "0x170001AA")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000ED2")]
			[Address(RVA = "0xA6D62C", Offset = "0xA6D62C", VA = "0xA6D62C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001AB")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000ED4")]
			[Address(RVA = "0xA6D674", Offset = "0xA6D674", VA = "0xA6D674", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000ECF")]
		[Address(RVA = "0xA6D394", Offset = "0xA6D394", VA = "0xA6D394")]
		[DebuggerHidden]
		public <OpenRoutine>d__26(int <>1__state)
		{
		}

		[Token(Token = "0x6000ED0")]
		[Address(RVA = "0xA6D4C4", Offset = "0xA6D4C4", VA = "0xA6D4C4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000ED1")]
		[Address(RVA = "0xA6D4C8", Offset = "0xA6D4C8", VA = "0xA6D4C8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000ED3")]
		[Address(RVA = "0xA6D634", Offset = "0xA6D634", VA = "0xA6D634", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002C3")]
	[CompilerGenerated]
	private sealed class <CloseRoutine>d__27 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001264")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001265")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001266")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Elevator <>4__this;

		[Token(Token = "0x170001AC")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000ED8")]
			[Address(RVA = "0xA6D7CC", Offset = "0xA6D7CC", VA = "0xA6D7CC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001AD")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000EDA")]
			[Address(RVA = "0xA6D814", Offset = "0xA6D814", VA = "0xA6D814", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000ED5")]
		[Address(RVA = "0xA6D3BC", Offset = "0xA6D3BC", VA = "0xA6D3BC")]
		[DebuggerHidden]
		public <CloseRoutine>d__27(int <>1__state)
		{
		}

		[Token(Token = "0x6000ED6")]
		[Address(RVA = "0xA6D67C", Offset = "0xA6D67C", VA = "0xA6D67C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000ED7")]
		[Address(RVA = "0xA6D680", Offset = "0xA6D680", VA = "0xA6D680", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000ED9")]
		[Address(RVA = "0xA6D7D4", Offset = "0xA6D7D4", VA = "0xA6D7D4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002C4")]
	[CompilerGenerated]
	private sealed class <MoveRoutine>d__29 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001267")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001268")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001269")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Elevator <>4__this;

		[Token(Token = "0x400126A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <time>5__2;

		[Token(Token = "0x400126B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <lerp>5__3;

		[Token(Token = "0x170001AE")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000EDE")]
			[Address(RVA = "0xA6DC7C", Offset = "0xA6DC7C", VA = "0xA6DC7C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001AF")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000EE0")]
			[Address(RVA = "0xA6DCC4", Offset = "0xA6DCC4", VA = "0xA6DCC4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000EDB")]
		[Address(RVA = "0xA6D46C", Offset = "0xA6D46C", VA = "0xA6D46C")]
		[DebuggerHidden]
		public <MoveRoutine>d__29(int <>1__state)
		{
		}

		[Token(Token = "0x6000EDC")]
		[Address(RVA = "0xA6D81C", Offset = "0xA6D81C", VA = "0xA6D81C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000EDD")]
		[Address(RVA = "0xA6D820", Offset = "0xA6D820", VA = "0xA6D820", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000EDF")]
		[Address(RVA = "0xA6DC84", Offset = "0xA6DC84", VA = "0xA6DC84", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400124A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public MoverPosition[] positions;

	[Token(Token = "0x400124B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioSource soundSource;

	[Token(Token = "0x400124C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Animator doorAnimator;

	[Token(Token = "0x400124D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioClip openDoorClip;

	[Token(Token = "0x400124E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AudioClip closeDoorClip;

	[Token(Token = "0x400124F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AudioClip loopMoveClip;

	[Token(Token = "0x4001250")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Transform insideCoverpointPosition;

	[Token(Token = "0x4001251")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public CoverPoint insidePoint;

	[Token(Token = "0x4001252")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public CoverPoint[] exitPoints;

	[Token(Token = "0x4001253")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public float moveDuration;

	[Token(Token = "0x4001254")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public int maxFloorNumber;

	[Token(Token = "0x4001255")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public TextMeshProUGUI floorNumber;

	[Token(Token = "0x4001256")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public AnimationCurve moveSoundCurve;

	[Token(Token = "0x4001257")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public float minLoopPitch;

	[Token(Token = "0x4001258")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public float maxLoopPitch;

	[Token(Token = "0x4001259")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public float maxLoopVolume;

	[Token(Token = "0x400125A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public VRTouch_Button upButton;

	[Token(Token = "0x400125B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public float openDuration;

	[Token(Token = "0x400125C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	public float closeDuration;

	[Token(Token = "0x400125D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public SECTR_Portal bottomPortal;

	[Token(Token = "0x400125E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public SECTR_Portal topPortal;

	[Token(Token = "0x400125F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private bool opening;

	[Token(Token = "0x4001260")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Transform xForm;

	[Token(Token = "0x6000EC7")]
	[Address(RVA = "0xA6D268", Offset = "0xA6D268", VA = "0xA6D268")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000EC8")]
	[Address(RVA = "0xA6D284", Offset = "0xA6D284", VA = "0xA6D284")]
	public void OpenDoor()
	{
	}

	[Token(Token = "0x6000EC9")]
	[Address(RVA = "0xA6D30C", Offset = "0xA6D30C", VA = "0xA6D30C")]
	public void CloseDoor()
	{
	}

	[Token(Token = "0x6000ECA")]
	[Address(RVA = "0xA6D2A4", Offset = "0xA6D2A4", VA = "0xA6D2A4")]
	[IteratorStateMachine(typeof(<OpenRoutine>d__26))]
	private IEnumerator OpenRoutine()
	{
		return null;
	}

	[Token(Token = "0x6000ECB")]
	[Address(RVA = "0xA6D32C", Offset = "0xA6D32C", VA = "0xA6D32C")]
	[IteratorStateMachine(typeof(<CloseRoutine>d__27))]
	private IEnumerator CloseRoutine()
	{
		return null;
	}

	[Token(Token = "0x6000ECC")]
	[Address(RVA = "0xA6D3E4", Offset = "0xA6D3E4", VA = "0xA6D3E4")]
	public void MoveToNextFloor()
	{
	}

	[Token(Token = "0x6000ECD")]
	[Address(RVA = "0xA6D404", Offset = "0xA6D404", VA = "0xA6D404")]
	[IteratorStateMachine(typeof(<MoveRoutine>d__29))]
	private IEnumerator MoveRoutine()
	{
		return null;
	}

	[Token(Token = "0x6000ECE")]
	[Address(RVA = "0xA6D494", Offset = "0xA6D494", VA = "0xA6D494")]
	public Elevator()
	{
	}
}
[Token(Token = "0x20002C5")]
public class EventCounter : MonoBehaviour
{
	[Token(Token = "0x400126C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int targetCount;

	[Token(Token = "0x400126D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool repeat;

	[Token(Token = "0x400126E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int currentCount;

	[Token(Token = "0x400126F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEvent onCountReached;

	[Token(Token = "0x6000EE1")]
	[Address(RVA = "0xA6DCCC", Offset = "0xA6DCCC", VA = "0xA6DCCC")]
	public void Count()
	{
	}

	[Token(Token = "0x6000EE2")]
	[Address(RVA = "0xA6DCF8", Offset = "0xA6DCF8", VA = "0xA6DCF8")]
	public EventCounter()
	{
	}
}
[Token(Token = "0x20002C6")]
public class EventGate : MonoBehaviour
{
	[Token(Token = "0x20002C7")]
	public enum Comparison
	{
		[Token(Token = "0x4001277")]
		NOT_EQUAL,
		[Token(Token = "0x4001278")]
		EQUAL_TO,
		[Token(Token = "0x4001279")]
		LESS_THAN,
		[Token(Token = "0x400127A")]
		LESS_THAN_EQUAL_TO,
		[Token(Token = "0x400127B")]
		GREATER_THAN,
		[Token(Token = "0x400127C")]
		GREATER_THAN_EQUAL_TO
	}

	[Token(Token = "0x4001270")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Comparison comparison;

	[Token(Token = "0x4001271")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float floatTarget;

	[Token(Token = "0x4001272")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int intTarget;

	[Token(Token = "0x4001273")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool once;

	[Token(Token = "0x4001274")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
	private bool triggered;

	[Token(Token = "0x4001275")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEvent onTargetReached;

	[Token(Token = "0x6000EE3")]
	[Address(RVA = "0xA6DD00", Offset = "0xA6DD00", VA = "0xA6DD00")]
	public void Evaluate(float value)
	{
	}

	[Token(Token = "0x6000EE4")]
	[Address(RVA = "0xA6DDB0", Offset = "0xA6DDB0", VA = "0xA6DDB0")]
	public void Evaluate(int value)
	{
	}

	[Token(Token = "0x6000EE5")]
	[Address(RVA = "0xA6DE7C", Offset = "0xA6DE7C", VA = "0xA6DE7C")]
	public EventGate()
	{
	}
}
[Serializable]
[Token(Token = "0x20002C8")]
public class GunParData
{
	[Token(Token = "0x400127D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public GunType gunType;

	[Token(Token = "0x400127E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public int A_score;

	[Token(Token = "0x400127F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int B_score;

	[Token(Token = "0x6000EE6")]
	[Address(RVA = "0xA6DE84", Offset = "0xA6DE84", VA = "0xA6DE84")]
	public GunParData()
	{
	}
}
[Token(Token = "0x20002C9")]
[CreateAssetMenu(fileName = "ChallengeParData", menuName = "Settings/ChallengeParData")]
public class ChallengeParData : ScriptableObject
{
	[Token(Token = "0x4001280")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GunParData[] data;

	[Token(Token = "0x6000EE7")]
	[Address(RVA = "0xA6DE98", Offset = "0xA6DE98", VA = "0xA6DE98")]
	public GunParData GetParData()
	{
		return null;
	}

	[Token(Token = "0x6000EE8")]
	[Address(RVA = "0xA6DF78", Offset = "0xA6DF78", VA = "0xA6DF78")]
	public ChallengeParData()
	{
	}
}
[Token(Token = "0x20002CA")]
public class DummyDriver : MonoBehaviour
{
	[Token(Token = "0x20002CB")]
	[CompilerGenerated]
	private sealed class <DelayKinematic>d__33 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400129E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400129F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40012A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DummyDriver <>4__this;

		[Token(Token = "0x170001B0")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000EF5")]
			[Address(RVA = "0xA6EDF4", Offset = "0xA6EDF4", VA = "0xA6EDF4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001B1")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000EF7")]
			[Address(RVA = "0xA6EE3C", Offset = "0xA6EE3C", VA = "0xA6EE3C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000EF2")]
		[Address(RVA = "0xA6E548", Offset = "0xA6E548", VA = "0xA6E548")]
		[DebuggerHidden]
		public <DelayKinematic>d__33(int <>1__state)
		{
		}

		[Token(Token = "0x6000EF3")]
		[Address(RVA = "0xA6ECD4", Offset = "0xA6ECD4", VA = "0xA6ECD4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000EF4")]
		[Address(RVA = "0xA6ECD8", Offset = "0xA6ECD8", VA = "0xA6ECD8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000EF6")]
		[Address(RVA = "0xA6EDFC", Offset = "0xA6EDFC", VA = "0xA6EDFC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001281")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationCurve moveCurve;

	[Token(Token = "0x4001282")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AnimationCurve soundCurve;

	[Token(Token = "0x4001283")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public DummyDriverPathPoint[] pathPoints;

	[Token(Token = "0x4001284")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Rigidbody dummyRootBody;

	[Token(Token = "0x4001285")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform facingTarget;

	[Token(Token = "0x4001286")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float moveSpeed;

	[Token(Token = "0x4001287")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float facingRate;

	[Token(Token = "0x4001288")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool pingpong;

	[NonSerialized]
	[Token(Token = "0x4001289")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	public bool isActive;

	[NonSerialized]
	[Token(Token = "0x400128A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
	public bool end;

	[NonSerialized]
	[Token(Token = "0x400128B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4B")]
	private bool endStarted;

	[Token(Token = "0x400128C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public bool moving;

	[Token(Token = "0x400128D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
	private bool waiting;

	[Token(Token = "0x400128E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4E")]
	private bool reversing;

	[Token(Token = "0x400128F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4F")]
	private bool align;

	[Token(Token = "0x4001290")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float startTime;

	[Token(Token = "0x4001291")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private float timeProgress;

	[Token(Token = "0x4001292")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float distanceToPoint;

	[Token(Token = "0x4001293")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float duration;

	[Token(Token = "0x4001294")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Vector3 startPos;

	[Token(Token = "0x4001295")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private Vector3 endPos;

	[Token(Token = "0x4001296")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private DummyDriverPathPoint nextPoint;

	[Token(Token = "0x4001297")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public TargetDummy targetDummy;

	[NonSerialized]
	[Token(Token = "0x4001298")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public DummySequence sequencer;

	[Token(Token = "0x4001299")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private AudioSource moverSound;

	[Token(Token = "0x400129A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private float nextMoveTime;

	[Token(Token = "0x400129B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private int pathIndex;

	[Token(Token = "0x400129C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private int numPathPoints;

	[Token(Token = "0x400129D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private float soundVolume;

	[Token(Token = "0x6000EE9")]
	[Address(RVA = "0xA6DF80", Offset = "0xA6DF80", VA = "0xA6DF80")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000EEA")]
	[Address(RVA = "0xA6E040", Offset = "0xA6E040", VA = "0xA6E040")]
	private void Start()
	{
	}

	[Token(Token = "0x6000EEB")]
	[Address(RVA = "0xA6E138", Offset = "0xA6E138", VA = "0xA6E138")]
	public void ResetState(DummySequence _sequencer, bool _activate)
	{
	}

	[Token(Token = "0x6000EEC")]
	[Address(RVA = "0xA6E348", Offset = "0xA6E348", VA = "0xA6E348")]
	public void Begin()
	{
	}

	[Token(Token = "0x6000EED")]
	[Address(RVA = "0xA6E4E0", Offset = "0xA6E4E0", VA = "0xA6E4E0")]
	[IteratorStateMachine(typeof(<DelayKinematic>d__33))]
	private IEnumerator DelayKinematic()
	{
		return null;
	}

	[Token(Token = "0x6000EEE")]
	[Address(RVA = "0xA6E570", Offset = "0xA6E570", VA = "0xA6E570")]
	private void UpdateNextPathPoint()
	{
	}

	[Token(Token = "0x6000EEF")]
	[Address(RVA = "0xA6E794", Offset = "0xA6E794", VA = "0xA6E794")]
	public void End()
	{
	}

	[Token(Token = "0x6000EF0")]
	[Address(RVA = "0xA6E8FC", Offset = "0xA6E8FC", VA = "0xA6E8FC")]
	public void UpdateFixed()
	{
	}

	[Token(Token = "0x6000EF1")]
	[Address(RVA = "0xA6ECB8", Offset = "0xA6ECB8", VA = "0xA6ECB8")]
	public DummyDriver()
	{
	}
}
[Token(Token = "0x20002CC")]
public class DummyDriverPathPoint : MonoBehaviour
{
	[Token(Token = "0x40012A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform xForm;

	[Token(Token = "0x40012A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float waitTime;

	[Token(Token = "0x40012A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool alignDriver;

	[Token(Token = "0x6000EF8")]
	[Address(RVA = "0xA6EE44", Offset = "0xA6EE44", VA = "0xA6EE44")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000EF9")]
	[Address(RVA = "0xA6EE60", Offset = "0xA6EE60", VA = "0xA6EE60")]
	public DummyDriverPathPoint()
	{
	}
}
[Token(Token = "0x20002CD")]
public class DummySequence : TargetSequenceBase
{
	[Token(Token = "0x40012A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public DummyDriver[] drivers;

	[Token(Token = "0x6000EFA")]
	[Address(RVA = "0xA6EE78", Offset = "0xA6EE78", VA = "0xA6EE78")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000EFB")]
	[Address(RVA = "0xA6EEC8", Offset = "0xA6EEC8", VA = "0xA6EEC8", Slot = "7")]
	public override void ResetState(bool show)
	{
	}

	[Token(Token = "0x6000EFC")]
	[Address(RVA = "0xA6EF3C", Offset = "0xA6EF3C", VA = "0xA6EF3C")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000EFD")]
	[Address(RVA = "0xA6EFA0", Offset = "0xA6EFA0", VA = "0xA6EFA0")]
	private void InitialiseSequence()
	{
	}

	[Token(Token = "0x6000EFE")]
	[Address(RVA = "0xA6EFE8", Offset = "0xA6EFE8", VA = "0xA6EFE8", Slot = "4")]
	public override void StartSequence(int index)
	{
	}

	[Token(Token = "0x6000EFF")]
	[Address(RVA = "0xA6F068", Offset = "0xA6F068", VA = "0xA6F068", Slot = "6")]
	public override void StartTargets()
	{
	}

	[Token(Token = "0x6000F00")]
	[Address(RVA = "0xA6F0C4", Offset = "0xA6F0C4", VA = "0xA6F0C4", Slot = "5")]
	public override void StopSequence()
	{
	}

	[Token(Token = "0x6000F01")]
	[Address(RVA = "0xA6F158", Offset = "0xA6F158", VA = "0xA6F158")]
	public void AddPoints(int points, bool hitRoot)
	{
	}

	[Token(Token = "0x6000F02")]
	[Address(RVA = "0xA6F248", Offset = "0xA6F248", VA = "0xA6F248")]
	public DummySequence()
	{
	}
}
[Token(Token = "0x20002CE")]
public class SlideRailDriver : MonoBehaviour
{
	[Token(Token = "0x40012A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public DummyDriverPathPoint[] pathPoints;

	[Token(Token = "0x40012A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform railXForm;

	[Token(Token = "0x40012A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform slideXForm;

	[Token(Token = "0x40012A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AnimationCurve moveCurve;

	[Token(Token = "0x40012A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AnimationCurve soundCurve;

	[Token(Token = "0x40012AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float exitSpeed;

	[Token(Token = "0x40012AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float entrySpeed;

	[Token(Token = "0x40012AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float moveSpeed;

	[Token(Token = "0x40012AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float facingRate;

	[Token(Token = "0x40012AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3 startPos;

	[Token(Token = "0x40012AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private Vector3 endPos;

	[Token(Token = "0x40012B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float soundVolume;

	[Token(Token = "0x40012B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private AudioSource moverSound;

	[Token(Token = "0x40012B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Transform facingTarget;

	[Token(Token = "0x40012B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public bool isActive;

	[Token(Token = "0x40012B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
	public bool end;

	[Token(Token = "0x40012B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x82")]
	private bool endStarted;

	[Token(Token = "0x40012B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x83")]
	private bool moving;

	[Token(Token = "0x40012B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private bool align;

	[Token(Token = "0x40012B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private float timeProgress;

	[Token(Token = "0x40012B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private float distanceToPoint;

	[Token(Token = "0x40012BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private float duration;

	[Token(Token = "0x40012BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private float nextMoveTime;

	[Token(Token = "0x40012BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public int pathIndex;

	[Token(Token = "0x40012BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private DummyDriverPathPoint nextPoint;

	[Token(Token = "0x40012BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private bool pingPong;

	[Token(Token = "0x40012BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private float currentSpeed;

	[Token(Token = "0x40012C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Target myTarget;

	[Token(Token = "0x6000F03")]
	[Address(RVA = "0xA6F2A4", Offset = "0xA6F2A4", VA = "0xA6F2A4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000F04")]
	[Address(RVA = "0xA6F37C", Offset = "0xA6F37C", VA = "0xA6F37C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000F05")]
	[Address(RVA = "0xA6F43C", Offset = "0xA6F43C", VA = "0xA6F43C")]
	public void Begin()
	{
	}

	[Token(Token = "0x6000F06")]
	[Address(RVA = "0xA6F5BC", Offset = "0xA6F5BC", VA = "0xA6F5BC")]
	private void UpdateNextPathPoint()
	{
	}

	[Token(Token = "0x6000F07")]
	[Address(RVA = "0xA6F7C8", Offset = "0xA6F7C8", VA = "0xA6F7C8")]
	public void End()
	{
	}

	[Token(Token = "0x6000F08")]
	[Address(RVA = "0xA6F8E0", Offset = "0xA6F8E0", VA = "0xA6F8E0")]
	public void UpdateMain()
	{
	}

	[Token(Token = "0x6000F09")]
	[Address(RVA = "0xA6FC9C", Offset = "0xA6FC9C", VA = "0xA6FC9C")]
	public SlideRailDriver()
	{
	}
}
[Token(Token = "0x20002CF")]
public class Target : MonoBehaviour
{
	[Token(Token = "0x20002D0")]
	[CompilerGenerated]
	private sealed class <ActivePeriod>d__25 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40012D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40012D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40012D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Target <>4__this;

		[Token(Token = "0x170001B2")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000F16")]
			[Address(RVA = "0xA7071C", Offset = "0xA7071C", VA = "0xA7071C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001B3")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000F18")]
			[Address(RVA = "0xA70764", Offset = "0xA70764", VA = "0xA70764", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F13")]
		[Address(RVA = "0xA70570", Offset = "0xA70570", VA = "0xA70570")]
		[DebuggerHidden]
		public <ActivePeriod>d__25(int <>1__state)
		{
		}

		[Token(Token = "0x6000F14")]
		[Address(RVA = "0xA7060C", Offset = "0xA7060C", VA = "0xA7060C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000F15")]
		[Address(RVA = "0xA70610", Offset = "0xA70610", VA = "0xA70610", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F17")]
		[Address(RVA = "0xA70724", Offset = "0xA70724", VA = "0xA70724", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002D1")]
	[CompilerGenerated]
	private sealed class <AppearAnimation>d__26 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40012D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40012D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40012DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Target <>4__this;

		[Token(Token = "0x40012DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <time>5__2;

		[Token(Token = "0x40012DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <lerp>5__3;

		[Token(Token = "0x170001B4")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000F1C")]
			[Address(RVA = "0xA708A4", Offset = "0xA708A4", VA = "0xA708A4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001B5")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000F1E")]
			[Address(RVA = "0xA708EC", Offset = "0xA708EC", VA = "0xA708EC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F19")]
		[Address(RVA = "0xA70598", Offset = "0xA70598", VA = "0xA70598")]
		[DebuggerHidden]
		public <AppearAnimation>d__26(int <>1__state)
		{
		}

		[Token(Token = "0x6000F1A")]
		[Address(RVA = "0xA7076C", Offset = "0xA7076C", VA = "0xA7076C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000F1B")]
		[Address(RVA = "0xA70770", Offset = "0xA70770", VA = "0xA70770", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F1D")]
		[Address(RVA = "0xA708AC", Offset = "0xA708AC", VA = "0xA708AC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002D2")]
	[CompilerGenerated]
	private sealed class <ReverseAnimation>d__27 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40012DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40012DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40012DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Target <>4__this;

		[Token(Token = "0x40012E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <time>5__2;

		[Token(Token = "0x40012E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <lerp>5__3;

		[Token(Token = "0x170001B6")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000F22")]
			[Address(RVA = "0xA70AD0", Offset = "0xA70AD0", VA = "0xA70AD0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001B7")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000F24")]
			[Address(RVA = "0xA70B18", Offset = "0xA70B18", VA = "0xA70B18", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F1F")]
		[Address(RVA = "0xA705C0", Offset = "0xA705C0", VA = "0xA705C0")]
		[DebuggerHidden]
		public <ReverseAnimation>d__27(int <>1__state)
		{
		}

		[Token(Token = "0x6000F20")]
		[Address(RVA = "0xA708F4", Offset = "0xA708F4", VA = "0xA708F4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000F21")]
		[Address(RVA = "0xA708F8", Offset = "0xA708F8", VA = "0xA708F8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F23")]
		[Address(RVA = "0xA70AD8", Offset = "0xA70AD8", VA = "0xA70AD8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40012C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int points;

	[Token(Token = "0x40012C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float bullsEyeRadius;

	[Token(Token = "0x40012C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float radius;

	[Token(Token = "0x40012C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TargetSequence sequencer;

	[Token(Token = "0x40012C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public TargetTrigger trigger;

	[Token(Token = "0x40012C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AudioManager.SoundType appearSound;

	[Token(Token = "0x40012C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	public AudioManager.SoundType hitSound;

	[Token(Token = "0x40012C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform bullseye;

	[Token(Token = "0x40012C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Transform hingeXForm;

	[Token(Token = "0x40012CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public AnimationCurve hingeCurve;

	[Token(Token = "0x40012CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float hingeRotDuration;

	[Token(Token = "0x40012CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Header("Events")]
	public UnityEvent onHit;

	[Token(Token = "0x40012CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public UnityEvent onReset;

	[Token(Token = "0x40012CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public UnityEvent onAppear;

	[Token(Token = "0x40012CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Target nextTarget;

	[NonSerialized]
	[Token(Token = "0x40012D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Transform xForm;

	[NonSerialized]
	[Token(Token = "0x40012D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public SlideRailDriver driver;

	[Token(Token = "0x40012D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public bool hit;

	[Token(Token = "0x40012D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private Quaternion downRotation;

	[Token(Token = "0x40012D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private Quaternion upRotation;

	[Token(Token = "0x6000F0A")]
	[Address(RVA = "0xA6FCB8", Offset = "0xA6FCB8", VA = "0xA6FCB8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000F0B")]
	[Address(RVA = "0xA6FF64", Offset = "0xA6FF64", VA = "0xA6FF64")]
	public void Hit(Vector3 hitLocation)
	{
	}

	[Token(Token = "0x6000F0C")]
	[Address(RVA = "0xA6FEBC", Offset = "0xA6FEBC", VA = "0xA6FEBC")]
	public void ResetState()
	{
	}

	[Token(Token = "0x6000F0D")]
	[Address(RVA = "0xA7028C", Offset = "0xA7028C", VA = "0xA7028C")]
	public void Appear()
	{
	}

	[Token(Token = "0x6000F0E")]
	[Address(RVA = "0xA704EC", Offset = "0xA704EC", VA = "0xA704EC")]
	public void Reverse()
	{
	}

	[Token(Token = "0x6000F0F")]
	[Address(RVA = "0xA70484", Offset = "0xA70484", VA = "0xA70484")]
	[IteratorStateMachine(typeof(<ActivePeriod>d__25))]
	private IEnumerator ActivePeriod()
	{
		return null;
	}

	[Token(Token = "0x6000F10")]
	[Address(RVA = "0xA7041C", Offset = "0xA7041C", VA = "0xA7041C")]
	[IteratorStateMachine(typeof(<AppearAnimation>d__26))]
	private IEnumerator AppearAnimation()
	{
		return null;
	}

	[Token(Token = "0x6000F11")]
	[Address(RVA = "0xA703B4", Offset = "0xA703B4", VA = "0xA703B4")]
	[IteratorStateMachine(typeof(<ReverseAnimation>d__27))]
	private IEnumerator ReverseAnimation()
	{
		return null;
	}

	[Token(Token = "0x6000F12")]
	[Address(RVA = "0xA705E8", Offset = "0xA705E8", VA = "0xA705E8")]
	public Target()
	{
	}
}
[Token(Token = "0x20002D3")]
public class TargetDummy : MonoBehaviour
{
	[Token(Token = "0x40012E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioManager.SoundType hitSound;

	[Token(Token = "0x40012E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MeshRenderer poleMesh;

	[Token(Token = "0x40012E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private TargetDummyLimb[] limbs;

	[NonSerialized]
	[Token(Token = "0x40012E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool isDestroyed;

	[NonSerialized]
	[Token(Token = "0x40012E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	public bool isActive;

	[NonSerialized]
	[Token(Token = "0x40012E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public TargetDummyLimb rootLimb;

	[NonSerialized]
	[Token(Token = "0x40012E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public DummyDriver driver;

	[Token(Token = "0x40012E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int hitParts;

	[Token(Token = "0x6000F25")]
	[Address(RVA = "0xA70B20", Offset = "0xA70B20", VA = "0xA70B20")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000F26")]
	[Address(RVA = "0xA70DF4", Offset = "0xA70DF4", VA = "0xA70DF4")]
	private void RootDestroyed()
	{
	}

	[Token(Token = "0x6000F27")]
	[Address(RVA = "0xA6E318", Offset = "0xA6E318", VA = "0xA6E318")]
	public void Activate()
	{
	}

	[Token(Token = "0x6000F28")]
	[Address(RVA = "0xA6E108", Offset = "0xA6E108", VA = "0xA6E108")]
	public void Dectivate()
	{
	}

	[Token(Token = "0x6000F29")]
	[Address(RVA = "0xA70E18", Offset = "0xA70E18", VA = "0xA70E18")]
	private void SetActiveState(bool _state)
	{
	}

	[Token(Token = "0x6000F2A")]
	[Address(RVA = "0xA6E29C", Offset = "0xA6E29C", VA = "0xA6E29C")]
	public void ResetState(DummySequence sequencer)
	{
	}

	[Token(Token = "0x6000F2B")]
	[Address(RVA = "0xA6ED84", Offset = "0xA6ED84", VA = "0xA6ED84")]
	public void SetKinematic(bool _state)
	{
	}

	[Token(Token = "0x6000F2C")]
	[Address(RVA = "0xA71144", Offset = "0xA71144", VA = "0xA71144")]
	public void CountHits()
	{
	}

	[Token(Token = "0x6000F2D")]
	[Address(RVA = "0xA71278", Offset = "0xA71278", VA = "0xA71278")]
	public TargetDummy()
	{
	}
}
[Token(Token = "0x20002D4")]
public class TargetDummyLimb : MonoBehaviour
{
	[Token(Token = "0x40012EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int points;

	[Token(Token = "0x40012EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float bullsEyeRadius;

	[Token(Token = "0x40012EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float radius;

	[Token(Token = "0x40012ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool isRootLimb;

	[Token(Token = "0x40012EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform bullseye;

	[Token(Token = "0x40012EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Header("Events")]
	public UnityEvent onHit;

	[Token(Token = "0x40012F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public UnityEvent onReset;

	[Token(Token = "0x40012F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public UnityEvent onAppear;

	[Token(Token = "0x40012F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public UnityEvent onRootDestroyed;

	[NonSerialized]
	[Token(Token = "0x40012F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Transform xForm;

	[NonSerialized]
	[Token(Token = "0x40012F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public AudioManager.SoundType hitSound;

	[Token(Token = "0x40012F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public DummySequence sequencer;

	[Token(Token = "0x40012F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public TargetDummyLimb[] relatedLimbs;

	[Token(Token = "0x40012F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public HingeJoint myJoint;

	[Token(Token = "0x40012F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Rigidbody rBody;

	[Token(Token = "0x40012F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Rigidbody connectedRBody;

	[Token(Token = "0x40012FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Collider trigger;

	[Token(Token = "0x40012FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public MeshRenderer meshRenderer;

	[Token(Token = "0x40012FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Transform initParent;

	[Token(Token = "0x40012FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private Vector3 initLocalPosition;

	[Token(Token = "0x40012FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private Quaternion initLocalRotation;

	[Token(Token = "0x40012FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private bool hit;

	[Token(Token = "0x4001300")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public Rigidbody rootBody;

	[Token(Token = "0x4001301")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private TargetDummyLimb[] childLimbs;

	[Token(Token = "0x4001302")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public Rigidbody connectedBody;

	[Token(Token = "0x4001303")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private float springForce;

	[Token(Token = "0x4001304")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	private float springDamp;

	[Token(Token = "0x4001305")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private float minLimit;

	[Token(Token = "0x4001306")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	private float maxLimit;

	[Token(Token = "0x4001307")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private Vector3 hingeAxis;

	[Token(Token = "0x4001308")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	private Vector3 hingeAnchor;

	[Token(Token = "0x4001309")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private Vector3 connectedAnchor;

	[Token(Token = "0x400130A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private TargetDummy myDummy;

	[Token(Token = "0x6000F2E")]
	[Address(RVA = "0xA70C40", Offset = "0xA70C40", VA = "0xA70C40")]
	public void Initialise()
	{
	}

	[Token(Token = "0x6000F2F")]
	[Address(RVA = "0xA71288", Offset = "0xA71288", VA = "0xA71288")]
	private void ReadJointConfig()
	{
	}

	[Token(Token = "0x6000F30")]
	[Address(RVA = "0xA713A4", Offset = "0xA713A4", VA = "0xA713A4")]
	private void RecreateJoint()
	{
	}

	[Token(Token = "0x6000F31")]
	[Address(RVA = "0xA715A8", Offset = "0xA715A8", VA = "0xA715A8")]
	public void Hit(Vector3 hitLocation)
	{
	}

	[Token(Token = "0x6000F32")]
	[Address(RVA = "0xA719A8", Offset = "0xA719A8", VA = "0xA719A8")]
	public void Disconnect()
	{
	}

	[Token(Token = "0x6000F33")]
	[Address(RVA = "0xA70ED0", Offset = "0xA70ED0", VA = "0xA70ED0")]
	public void ResetState(DummySequence _sequencer, TargetDummy _myDummy)
	{
	}

	[Token(Token = "0x6000F34")]
	[Address(RVA = "0xA71A4C", Offset = "0xA71A4C", VA = "0xA71A4C")]
	public TargetDummyLimb()
	{
	}
}
[Token(Token = "0x20002D5")]
public class TargetSequence : TargetSequenceBase
{
	[Token(Token = "0x20002D6")]
	public enum TargetSequenceType
	{
		[Token(Token = "0x4001310")]
		None,
		[Token(Token = "0x4001311")]
		AllTargetsAtOnce,
		[Token(Token = "0x4001312")]
		TargetSequence,
		[Token(Token = "0x4001313")]
		SlideRails
	}

	[Token(Token = "0x400130B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public TargetSequenceType sequenceType;

	[Token(Token = "0x400130C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float targetActivePeriod;

	[Token(Token = "0x400130D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool useActivePeriod;

	[Token(Token = "0x400130E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Target[] targets;

	[Token(Token = "0x6000F35")]
	[Address(RVA = "0xA71A68", Offset = "0xA71A68", VA = "0xA71A68", Slot = "7")]
	public override void ResetState(bool show)
	{
	}

	[Token(Token = "0x6000F36")]
	[Address(RVA = "0xA71AE0", Offset = "0xA71AE0", VA = "0xA71AE0")]
	private void InitialiseSequence()
	{
	}

	[Token(Token = "0x6000F37")]
	[Address(RVA = "0xA71B98", Offset = "0xA71B98", VA = "0xA71B98", Slot = "4")]
	public override void StartSequence(int index)
	{
	}

	[Token(Token = "0x6000F38")]
	[Address(RVA = "0xA71C18", Offset = "0xA71C18", VA = "0xA71C18", Slot = "5")]
	public override void StopSequence()
	{
	}

	[Token(Token = "0x6000F39")]
	[Address(RVA = "0xA70210", Offset = "0xA70210", VA = "0xA70210")]
	public void AddPoints(int points)
	{
	}

	[Token(Token = "0x6000F3A")]
	[Address(RVA = "0xA70A48", Offset = "0xA70A48", VA = "0xA70A48")]
	public void RemoveTarget()
	{
	}

	[Token(Token = "0x6000F3B")]
	[Address(RVA = "0xA71C90", Offset = "0xA71C90", VA = "0xA71C90", Slot = "6")]
	public override void StartTargets()
	{
	}

	[Token(Token = "0x6000F3C")]
	[Address(RVA = "0xA71D70", Offset = "0xA71D70", VA = "0xA71D70")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000F3D")]
	[Address(RVA = "0xA71DE8", Offset = "0xA71DE8", VA = "0xA71DE8")]
	public TargetSequence()
	{
	}
}
[Token(Token = "0x20002D7")]
public class TargetSequenceBase : MonoBehaviour
{
	[Token(Token = "0x4001314")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ChallengeParData parData;

	[Token(Token = "0x4001315")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool startTargetsOnCountStart;

	[Token(Token = "0x4001316")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int timeLimitSeconds;

	[Token(Token = "0x4001317")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string userPrefsScoreString;

	[NonSerialized]
	[Token(Token = "0x4001318")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int score;

	[NonSerialized]
	[Token(Token = "0x4001319")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool sequenceActive;

	[NonSerialized]
	[Token(Token = "0x400131A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int targetsRemaining;

	[NonSerialized]
	[Token(Token = "0x400131B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public int currentChallengeIndex;

	[Token(Token = "0x6000F3E")]
	[Address(RVA = "0xA71DF8", Offset = "0xA71DF8", VA = "0xA71DF8", Slot = "4")]
	public virtual void StartSequence(int index = 0)
	{
	}

	[Token(Token = "0x6000F3F")]
	[Address(RVA = "0xA71DFC", Offset = "0xA71DFC", VA = "0xA71DFC", Slot = "5")]
	public virtual void StopSequence()
	{
	}

	[Token(Token = "0x6000F40")]
	[Address(RVA = "0xA71E00", Offset = "0xA71E00", VA = "0xA71E00", Slot = "6")]
	public virtual void StartTargets()
	{
	}

	[Token(Token = "0x6000F41")]
	[Address(RVA = "0xA71E04", Offset = "0xA71E04", VA = "0xA71E04", Slot = "7")]
	public virtual void ResetState(bool show)
	{
	}

	[Token(Token = "0x6000F42")]
	[Address(RVA = "0xA6F24C", Offset = "0xA6F24C", VA = "0xA6F24C")]
	public TargetSequenceBase()
	{
	}
}
[Token(Token = "0x20002D8")]
public class TargetTrigger : MonoBehaviour
{
	[Token(Token = "0x400131C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Target myTarget;

	[Token(Token = "0x6000F43")]
	[Address(RVA = "0xA71E08", Offset = "0xA71E08", VA = "0xA71E08")]
	public void Hit(Vector3 location)
	{
	}

	[Token(Token = "0x6000F44")]
	[Address(RVA = "0xA71E20", Offset = "0xA71E20", VA = "0xA71E20")]
	public TargetTrigger()
	{
	}
}
[Token(Token = "0x20002D9")]
public class FogController : MonoBehaviour
{
	[Token(Token = "0x20002DA")]
	[CompilerGenerated]
	private sealed class <BlendFog>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001322")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001323")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001324")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FogController <>4__this;

		[Token(Token = "0x4001325")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <time>5__2;

		[Token(Token = "0x4001326")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Color <fromColor>5__3;

		[Token(Token = "0x4001327")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float <fromMinDistance>5__4;

		[Token(Token = "0x4001328")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float <fromMaxDistance>5__5;

		[Token(Token = "0x170001B8")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000F4C")]
			[Address(RVA = "0xA72118", Offset = "0xA72118", VA = "0xA72118", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001B9")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000F4E")]
			[Address(RVA = "0xA72160", Offset = "0xA72160", VA = "0xA72160", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F49")]
		[Address(RVA = "0xA71EB0", Offset = "0xA71EB0", VA = "0xA71EB0")]
		[DebuggerHidden]
		public <BlendFog>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x6000F4A")]
		[Address(RVA = "0xA71F88", Offset = "0xA71F88", VA = "0xA71F88", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000F4B")]
		[Address(RVA = "0xA71F8C", Offset = "0xA71F8C", VA = "0xA71F8C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F4D")]
		[Address(RVA = "0xA72120", Offset = "0xA72120", VA = "0xA72120", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400131D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationCurve blend;

	[Token(Token = "0x400131E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float blendDuration;

	[Token(Token = "0x400131F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Color toColor;

	[Token(Token = "0x4001320")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float minDistance;

	[Token(Token = "0x4001321")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float maxDistance;

	[Token(Token = "0x6000F45")]
	[Address(RVA = "0xA71E28", Offset = "0xA71E28", VA = "0xA71E28")]
	public void ChangeFog()
	{
	}

	[Token(Token = "0x6000F46")]
	[Address(RVA = "0xA71E48", Offset = "0xA71E48", VA = "0xA71E48")]
	[IteratorStateMachine(typeof(<BlendFog>d__6))]
	private IEnumerator BlendFog()
	{
		return null;
	}

	[Token(Token = "0x6000F47")]
	[Address(RVA = "0xA71ED8", Offset = "0xA71ED8", VA = "0xA71ED8")]
	public void Apply()
	{
	}

	[Token(Token = "0x6000F48")]
	[Address(RVA = "0xA71F0C", Offset = "0xA71F0C", VA = "0xA71F0C")]
	public FogController()
	{
	}
}
[Token(Token = "0x20002DB")]
public class FootEffects : MonoBehaviour
{
	[Token(Token = "0x4001329")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform rightFoot;

	[Token(Token = "0x400132A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform leftFoot;

	[Token(Token = "0x400132B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool leftFootContact;

	[Token(Token = "0x400132C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool rightFootContact;

	[Token(Token = "0x400132D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public LayerMask groundMask;

	[Token(Token = "0x400132E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float rayLength;

	[Token(Token = "0x400132F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float footOffsetDistance;

	[Token(Token = "0x4001330")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float minStepDelay;

	[Token(Token = "0x4001331")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Animator animator;

	[Token(Token = "0x4001332")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private RaycastHit hitInfo;

	[Token(Token = "0x4001333")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private float timeDelay;

	[Token(Token = "0x6000F4F")]
	[Address(RVA = "0xA72168", Offset = "0xA72168", VA = "0xA72168")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000F50")]
	[Address(RVA = "0xA721B8", Offset = "0xA721B8", VA = "0xA721B8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000F51")]
	[Address(RVA = "0xA721DC", Offset = "0xA721DC", VA = "0xA721DC")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000F52")]
	[Address(RVA = "0xA72498", Offset = "0xA72498", VA = "0xA72498")]
	public FootEffects()
	{
	}
}
[Token(Token = "0x20002DC")]
public class GunRackController : MonoBehaviour
{
	[Token(Token = "0x4001334")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static GunRackController instance;

	[Token(Token = "0x4001335")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GunRackSlot[] rack;

	[Token(Token = "0x6000F53")]
	[Address(RVA = "0xA724B4", Offset = "0xA724B4", VA = "0xA724B4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000F54")]
	[Address(RVA = "0xA72500", Offset = "0xA72500", VA = "0xA72500")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000F55")]
	[Address(RVA = "0xA72684", Offset = "0xA72684", VA = "0xA72684")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000F56")]
	[Address(RVA = "0xA72808", Offset = "0xA72808", VA = "0xA72808")]
	public void CleanupMagPools()
	{
	}

	[Token(Token = "0x6000F57")]
	[Address(RVA = "0xA72938", Offset = "0xA72938", VA = "0xA72938")]
	private bool EquipmentChanging(HandController controller, Interactable interactable)
	{
		return default(bool);
	}

	[Token(Token = "0x6000F58")]
	[Address(RVA = "0xA72B9C", Offset = "0xA72B9C", VA = "0xA72B9C")]
	public string GetWeaponVariant(string index)
	{
		return null;
	}

	[Token(Token = "0x6000F59")]
	[Address(RVA = "0xA72C90", Offset = "0xA72C90", VA = "0xA72C90")]
	public void Purchase(GunType gunType)
	{
	}

	[Token(Token = "0x6000F5A")]
	[Address(RVA = "0xA72E4C", Offset = "0xA72E4C", VA = "0xA72E4C")]
	public void ChangeVariant(GunType gunType, string variant, Material _mat, bool _purchased)
	{
	}

	[Token(Token = "0x6000F5B")]
	[Address(RVA = "0xA72E94", Offset = "0xA72E94", VA = "0xA72E94")]
	public void Refresh()
	{
	}

	[Token(Token = "0x6000F5C")]
	[Address(RVA = "0xA73018", Offset = "0xA73018", VA = "0xA73018")]
	public void ToggleSecondaryWeapon(InteractableSlot slot)
	{
	}

	[Token(Token = "0x6000F5D")]
	[Address(RVA = "0xA7301C", Offset = "0xA7301C", VA = "0xA7301C")]
	public void AddSecondaryWeapon(InteractableSlot slot)
	{
	}

	[Token(Token = "0x6000F5E")]
	[Address(RVA = "0xA73320", Offset = "0xA73320", VA = "0xA73320")]
	public void ItemRemoved(InteractableSlot slot)
	{
	}

	[Token(Token = "0x6000F5F")]
	[Address(RVA = "0xA734E8", Offset = "0xA734E8", VA = "0xA734E8")]
	public InteractableSlot GetSlot(int index)
	{
		return null;
	}

	[Token(Token = "0x6000F60")]
	[Address(RVA = "0xA73520", Offset = "0xA73520", VA = "0xA73520")]
	public void ItemReturned(InteractableSlot slot)
	{
	}

	[Token(Token = "0x6000F61")]
	[Address(RVA = "0xA72AE4", Offset = "0xA72AE4", VA = "0xA72AE4")]
	private void ReturnItemToRack(Interactable item)
	{
	}

	[Token(Token = "0x6000F62")]
	[Address(RVA = "0xA73730", Offset = "0xA73730", VA = "0xA73730")]
	public GunRackController()
	{
	}
}
[Token(Token = "0x20002DD")]
[RequireComponent(typeof(InteractableSlot))]
public class GunRackSlot : MonoBehaviour
{
	[Token(Token = "0x4001336")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	public Interactable item1;

	[Token(Token = "0x4001337")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	public Interactable item2;

	[Token(Token = "0x4001338")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool hideMagazine;

	[NonSerialized]
	[Token(Token = "0x4001339")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public InteractableSlot slot;

	[Token(Token = "0x400133A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GunType gunType;

	[Token(Token = "0x400133B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public TextMeshProUGUI label;

	[Token(Token = "0x400133C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Color lockedColor;

	[Token(Token = "0x400133D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Color unlockedColor;

	[Token(Token = "0x400133E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public VRTouch_Button wieldButton;

	[Token(Token = "0x400133F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public TweenScale wieldButtonScaler;

	[Token(Token = "0x4001340")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public HandPoseTrigger poseTrigger;

	[Token(Token = "0x4001341")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public UnityEvent<Interactable> onEmptyEvents;

	[Token(Token = "0x4001342")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public UnityEvent<Interactable> onFilledEvents;

	[Token(Token = "0x170001BA")]
	public Interactable primary
	{
		[Token(Token = "0x6000F63")]
		[Address(RVA = "0xA73738", Offset = "0xA73738", VA = "0xA73738")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000F64")]
		[Address(RVA = "0xA73740", Offset = "0xA73740", VA = "0xA73740")]
		set
		{
		}
	}

	[Token(Token = "0x170001BB")]
	public Interactable secondary
	{
		[Token(Token = "0x6000F65")]
		[Address(RVA = "0xA73760", Offset = "0xA73760", VA = "0xA73760")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000F66")]
		[Address(RVA = "0xA73768", Offset = "0xA73768", VA = "0xA73768")]
		set
		{
		}
	}

	[Token(Token = "0x6000F67")]
	[Address(RVA = "0xA73770", Offset = "0xA73770", VA = "0xA73770")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000F68")]
	[Address(RVA = "0xA738CC", Offset = "0xA738CC", VA = "0xA738CC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000F69")]
	[Address(RVA = "0xA73998", Offset = "0xA73998", VA = "0xA73998")]
	private void Start()
	{
	}

	[Token(Token = "0x6000F6A")]
	[Address(RVA = "0xA73F34", Offset = "0xA73F34", VA = "0xA73F34")]
	public void LoadItemMaterialSync(string index, bool show, bool highlight)
	{
	}

	[Token(Token = "0x6000F6B")]
	[Address(RVA = "0xA72E8C", Offset = "0xA72E8C", VA = "0xA72E8C")]
	public void SetMaterial(Material _mat, string index, bool highlight)
	{
	}

	[Token(Token = "0x6000F6C")]
	[Address(RVA = "0xA74060", Offset = "0xA74060", VA = "0xA74060")]
	private void SetVariantMaterial(Material mat, string _variant, bool highlight)
	{
	}

	[Token(Token = "0x6000F6D")]
	[Address(RVA = "0xA72CC4", Offset = "0xA72CC4", VA = "0xA72CC4")]
	public void SetPurchased()
	{
	}

	[Token(Token = "0x6000F6E")]
	[Address(RVA = "0xA72EF4", Offset = "0xA72EF4", VA = "0xA72EF4")]
	public void RefreshDualWield(bool enableButton = true)
	{
	}

	[Token(Token = "0x6000F6F")]
	[Address(RVA = "0xA736C0", Offset = "0xA736C0", VA = "0xA736C0")]
	public void EnableButton()
	{
	}

	[Token(Token = "0x6000F70")]
	[Address(RVA = "0xA73470", Offset = "0xA73470", VA = "0xA73470")]
	public void DisabledButton()
	{
	}

	[Token(Token = "0x6000F71")]
	[Address(RVA = "0xA74500", Offset = "0xA74500", VA = "0xA74500")]
	private void ItemRemoved(Interactable interactable)
	{
	}

	[Token(Token = "0x6000F72")]
	[Address(RVA = "0xA74648", Offset = "0xA74648", VA = "0xA74648")]
	private void ItemFilled(Interactable interactable)
	{
	}

	[Token(Token = "0x6000F73")]
	[Address(RVA = "0xA748B4", Offset = "0xA748B4", VA = "0xA748B4")]
	private void HideInteractable(Interactable interactable, bool completed)
	{
	}

	[Token(Token = "0x6000F74")]
	[Address(RVA = "0xA749F0", Offset = "0xA749F0", VA = "0xA749F0")]
	public GunRackSlot()
	{
	}
}
[Token(Token = "0x20002DE")]
public class HandController : MonoBehaviour
{
	[Token(Token = "0x20002DF")]
	[CompilerGenerated]
	private sealed class <LoadGloveAsync>d__48 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400138B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400138C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400138D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string type;

		[Token(Token = "0x400138E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string index;

		[Token(Token = "0x400138F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public HandController <>4__this;

		[Token(Token = "0x4001390")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private ResourceRequest <req>5__2;

		[Token(Token = "0x170001BC")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000F9E")]
			[Address(RVA = "0xA79888", Offset = "0xA79888", VA = "0xA79888", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001BD")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000FA0")]
			[Address(RVA = "0xA798D0", Offset = "0xA798D0", VA = "0xA798D0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F9B")]
		[Address(RVA = "0xA752B4", Offset = "0xA752B4", VA = "0xA752B4")]
		[DebuggerHidden]
		public <LoadGloveAsync>d__48(int <>1__state)
		{
		}

		[Token(Token = "0x6000F9C")]
		[Address(RVA = "0xA796E8", Offset = "0xA796E8", VA = "0xA796E8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000F9D")]
		[Address(RVA = "0xA796EC", Offset = "0xA796EC", VA = "0xA796EC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F9F")]
		[Address(RVA = "0xA79890", Offset = "0xA79890", VA = "0xA79890", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001343")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Pose defaultPose;

	[Token(Token = "0x4001344")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Pose openPose;

	[Token(Token = "0x4001345")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Pose pointPose;

	[Token(Token = "0x4001346")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform trackedHandXForm;

	[Token(Token = "0x4001347")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform otherHandXForm;

	[Token(Token = "0x4001348")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float lerpRate;

	[Token(Token = "0x4001349")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float immediateLerpRate;

	[Token(Token = "0x400134A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool stablisedByOtherHand;

	[Token(Token = "0x400134B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float stabilsiedDistance;

	[Token(Token = "0x400134C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float cuppingLerpDuration;

	[Token(Token = "0x400134D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float rackingLerpDuration;

	[Token(Token = "0x400134E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Gun gun;

	[Token(Token = "0x400134F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public AmmoMagazine ammoMag;

	[Token(Token = "0x4001350")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public bool moveKinematic;

	[Token(Token = "0x4001351")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Rigidbody rBody;

	[Token(Token = "0x4001352")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Collider col;

	[Token(Token = "0x4001353")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Transform xForm;

	[Token(Token = "0x4001354")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public HandPoseType currentPose;

	[Token(Token = "0x4001355")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private Quaternion user_anchorOffsetRotation;

	[Token(Token = "0x4001356")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private Quaternion m_anchorOffsetRotation;

	[Token(Token = "0x4001357")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	public Vector3 m_anchorOffsetPosition;

	[Token(Token = "0x4001358")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private Vector3 targetPosition;

	[Token(Token = "0x4001359")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	private Quaternion targetRotation;

	[Token(Token = "0x400135A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private ConfigurableJoint joint;

	[Token(Token = "0x400135B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public GameplayHand handPoser;

	[Token(Token = "0x400135C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public InteractableSlot detectedSlot;

	[Token(Token = "0x400135D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public bool handInMagazineBelt;

	[Token(Token = "0x400135E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF1")]
	public bool holdingInteractable;

	[Token(Token = "0x400135F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF2")]
	public bool holdingAmmo;

	[Token(Token = "0x4001360")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public Interactable lastHeld;

	[Token(Token = "0x4001361")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public HandController otherHand;

	[Token(Token = "0x4001362")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private Transform COM;

	[Token(Token = "0x4001363")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private Vector3 startInteractionPos;

	[Token(Token = "0x4001364")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
	private Quaternion startInteractionRotation;

	[Token(Token = "0x4001365")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
	private Vector3 targetInteractionPos;

	[Token(Token = "0x4001366")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private Quaternion targetInteractionRot;

	[Token(Token = "0x4001367")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private float interactionLerp;

	[Token(Token = "0x4001368")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
	public HandType handType;

	[Token(Token = "0x4001369")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public Vector3 trackedLinearVelocity;

	[Token(Token = "0x400136A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
	private Vector3 lastTrackedPosition;

	[Token(Token = "0x400136B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	public Func<HandController, Interactable, bool> evaluateGrab;

	[Token(Token = "0x400136C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	public UnityAction<HandController, Interactable> onGrab;

	[Token(Token = "0x400136D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	private Vector3 handPoserLocalPosition;

	[Token(Token = "0x400136E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
	private Quaternion handPoserLocalRotation;

	[Token(Token = "0x400136F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	private Transform gripAngleXForm;

	[Token(Token = "0x4001370")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	public bool grabOn;

	[Token(Token = "0x4001371")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	public Interactable currentInteractable;

	[Token(Token = "0x4001372")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	public Vector3 localAmmoBeltBounds;

	[Token(Token = "0x4001373")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1BC")]
	public Vector3 calculatedVelocity;

	[Token(Token = "0x4001374")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
	private Vector3 lastXFormPosition;

	[Token(Token = "0x4001375")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D4")]
	private bool teleported;

	[Token(Token = "0x4001376")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D5")]
	private bool wasKinematic;

	[Token(Token = "0x4001377")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D6")]
	private bool pointing;

	[Token(Token = "0x4001378")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D7")]
	private bool overRidePose;

	[Token(Token = "0x4001379")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
	private HandPoseType lastPose;

	[Token(Token = "0x400137A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1DC")]
	public bool grabbedRecently;

	[Token(Token = "0x400137B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1DD")]
	public bool cupping;

	[Token(Token = "0x400137C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1DE")]
	public bool unCupping;

	[Token(Token = "0x400137D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1DF")]
	public bool canGrabFromOtherHand;

	[Token(Token = "0x400137E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
	private Vector3 relativeLocalToOtherHand;

	[Token(Token = "0x400137F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1EC")]
	public bool racking;

	[Token(Token = "0x4001380")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1ED")]
	public bool unracking;

	[Token(Token = "0x4001381")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1EE")]
	private bool nearTopRackPosition;

	[Token(Token = "0x4001382")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1EF")]
	private bool nearRearRackPosition;

	[Token(Token = "0x4001383")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
	private Transform targetRackXForm;

	[Token(Token = "0x4001384")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
	public bool gunSlideHeld;

	[Token(Token = "0x4001385")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1FC")]
	public Vector3 localStartHeldPos;

	[Token(Token = "0x4001386")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
	public Vector3 currentLocalHeldPos;

	[Token(Token = "0x4001387")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x214")]
	public float distanceFromStartPos;

	[Token(Token = "0x4001388")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
	private Vector3 startSlidePosition;

	[Token(Token = "0x4001389")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x224")]
	private Vector3 lastSlidePosition;

	[Token(Token = "0x400138A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
	public bool slidePullNotStarted;

	[Token(Token = "0x6000F75")]
	[Address(RVA = "0xA749F8", Offset = "0xA749F8", VA = "0xA749F8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000F76")]
	[Address(RVA = "0xA74BF4", Offset = "0xA74BF4", VA = "0xA74BF4")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6000F77")]
	[Address(RVA = "0xA74FA4", Offset = "0xA74FA4", VA = "0xA74FA4")]
	public void SetGlove(GameObject hand)
	{
	}

	[Token(Token = "0x6000F78")]
	[Address(RVA = "0xA75238", Offset = "0xA75238", VA = "0xA75238")]
	[IteratorStateMachine(typeof(<LoadGloveAsync>d__48))]
	public IEnumerator LoadGloveAsync(string type, string index)
	{
		return null;
	}

	[Token(Token = "0x6000F79")]
	[Address(RVA = "0xA752DC", Offset = "0xA752DC", VA = "0xA752DC")]
	public void LoadGlove(string type, string index)
	{
	}

	[Token(Token = "0x6000F7A")]
	[Address(RVA = "0xA7544C", Offset = "0xA7544C", VA = "0xA7544C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000F7B")]
	[Address(RVA = "0xA7572C", Offset = "0xA7572C", VA = "0xA7572C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000F7C")]
	[Address(RVA = "0xA75A14", Offset = "0xA75A14", VA = "0xA75A14")]
	private void Start()
	{
	}

	[Token(Token = "0x6000F7D")]
	[Address(RVA = "0xA75EB4", Offset = "0xA75EB4", VA = "0xA75EB4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000F7E")]
	[Address(RVA = "0xA75FAC", Offset = "0xA75FAC", VA = "0xA75FAC")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000F7F")]
	[Address(RVA = "0xA77D24", Offset = "0xA77D24", VA = "0xA77D24")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000F80")]
	[Address(RVA = "0xA763C4", Offset = "0xA763C4", VA = "0xA763C4")]
	private void SetTargetPosition(bool immediateRate, float delta)
	{
	}

	[Token(Token = "0x6000F81")]
	[Address(RVA = "0xA76454", Offset = "0xA76454", VA = "0xA76454")]
	private void SetTargetRotation(bool immediateRate, float delta)
	{
	}

	[Token(Token = "0x6000F82")]
	[Address(RVA = "0xA77F0C", Offset = "0xA77F0C", VA = "0xA77F0C")]
	private void CheckHandSafe()
	{
	}

	[Token(Token = "0x6000F83")]
	[Address(RVA = "0xA78000", Offset = "0xA78000", VA = "0xA78000")]
	private void MoveJointAnchor()
	{
	}

	[Token(Token = "0x6000F84")]
	[Address(RVA = "0xA7813C", Offset = "0xA7813C", VA = "0xA7813C")]
	public void Teleport()
	{
	}

	[Token(Token = "0x6000F85")]
	[Address(RVA = "0xA75A70", Offset = "0xA75A70", VA = "0xA75A70")]
	private void ResetToAnchor()
	{
	}

	[Token(Token = "0x6000F86")]
	[Address(RVA = "0xA76534", Offset = "0xA76534", VA = "0xA76534")]
	private void MoveKinematic()
	{
	}

	[Token(Token = "0x6000F87")]
	[Address(RVA = "0xA78148", Offset = "0xA78148", VA = "0xA78148")]
	private void PointPose()
	{
	}

	[Token(Token = "0x6000F88")]
	[Address(RVA = "0xA7816C", Offset = "0xA7816C", VA = "0xA7816C")]
	private void DefaultPose()
	{
	}

	[Token(Token = "0x6000F89")]
	[Address(RVA = "0xA78190", Offset = "0xA78190", VA = "0xA78190")]
	public void SetPos(Pose _pose, bool _overRidePose = false)
	{
	}

	[Token(Token = "0x6000F8A")]
	[Address(RVA = "0xA781E0", Offset = "0xA781E0", VA = "0xA781E0")]
	public void TryPose(HandPoseType poseType, bool _overRidePose = false)
	{
	}

	[Token(Token = "0x6000F8B")]
	[Address(RVA = "0xA78348", Offset = "0xA78348", VA = "0xA78348")]
	private void ApplyPlatformOffset()
	{
	}

	[Token(Token = "0x6000F8C")]
	[Address(RVA = "0xA75D4C", Offset = "0xA75D4C", VA = "0xA75D4C")]
	private void GripOffsetsChanged()
	{
	}

	[Token(Token = "0x6000F8D")]
	[Address(RVA = "0xA78474", Offset = "0xA78474", VA = "0xA78474")]
	public void ReleaseMag()
	{
	}

	[Token(Token = "0x6000F8E")]
	[Address(RVA = "0xA7848C", Offset = "0xA7848C", VA = "0xA7848C")]
	private void CheckGrab()
	{
	}

	[Token(Token = "0x6000F8F")]
	[Address(RVA = "0xA78C88", Offset = "0xA78C88", VA = "0xA78C88")]
	public void SetInteractable(Interactable interactable)
	{
	}

	[Token(Token = "0x6000F90")]
	[Address(RVA = "0xA78B98", Offset = "0xA78B98", VA = "0xA78B98")]
	public void SwapHands()
	{
	}

	[Token(Token = "0x6000F91")]
	[Address(RVA = "0xA78D6C", Offset = "0xA78D6C", VA = "0xA78D6C")]
	public void CheckDrop()
	{
	}

	[Token(Token = "0x6000F92")]
	[Address(RVA = "0xA791DC", Offset = "0xA791DC", VA = "0xA791DC")]
	public void ClearInteractable()
	{
	}

	[Token(Token = "0x6000F93")]
	[Address(RVA = "0xA792B0", Offset = "0xA792B0", VA = "0xA792B0")]
	private void CheckPointing(bool primaryHeld)
	{
	}

	[Token(Token = "0x6000F94")]
	[Address(RVA = "0xA76858", Offset = "0xA76858", VA = "0xA76858")]
	private void CheckHandStablised()
	{
	}

	[Token(Token = "0x6000F95")]
	[Address(RVA = "0xA79308", Offset = "0xA79308", VA = "0xA79308")]
	private void InitialiseCupping()
	{
	}

	[Token(Token = "0x6000F96")]
	[Address(RVA = "0xA76AB0", Offset = "0xA76AB0", VA = "0xA76AB0")]
	private void UpdateCupping()
	{
	}

	[Token(Token = "0x6000F97")]
	[Address(RVA = "0xA76F64", Offset = "0xA76F64", VA = "0xA76F64")]
	private void CheckHandRacking()
	{
	}

	[Token(Token = "0x6000F98")]
	[Address(RVA = "0xA79454", Offset = "0xA79454", VA = "0xA79454")]
	private void InitialiseRacking()
	{
	}

	[Token(Token = "0x6000F99")]
	[Address(RVA = "0xA774F8", Offset = "0xA774F8", VA = "0xA774F8")]
	private void UpdateRacking()
	{
	}

	[Token(Token = "0x6000F9A")]
	[Address(RVA = "0xA79574", Offset = "0xA79574", VA = "0xA79574")]
	public HandController()
	{
	}
}
[Token(Token = "0x20002E0")]
public class HandPoseTrigger : MonoBehaviour
{
	[Token(Token = "0x4001391")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public HandPoseType enterPose;

	[Token(Token = "0x4001392")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public HandPoseType exitPose;

	[Token(Token = "0x6000FA1")]
	[Address(RVA = "0xA798D8", Offset = "0xA798D8", VA = "0xA798D8")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000FA2")]
	[Address(RVA = "0xA79998", Offset = "0xA79998", VA = "0xA79998")]
	private void OnTriggerStay(Collider other)
	{
	}

	[Token(Token = "0x6000FA3")]
	[Address(RVA = "0xA79A58", Offset = "0xA79A58", VA = "0xA79A58")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000FA4")]
	[Address(RVA = "0xA79B0C", Offset = "0xA79B0C", VA = "0xA79B0C")]
	public HandPoseTrigger()
	{
	}
}
[Token(Token = "0x20002E1")]
public enum HapticEffectType
{
	[Token(Token = "0x4001394")]
	GRAB = 0,
	[Token(Token = "0x4001395")]
	CLICK = 1,
	[Token(Token = "0x4001396")]
	RELOAD = 2,
	[Token(Token = "0x4001397")]
	SMALLTAP = 3,
	[Token(Token = "0x4001398")]
	MIDTAP = 4,
	[Token(Token = "0x4001399")]
	BIGTAP = 5,
	[Token(Token = "0x400139A")]
	DESERTEAGLE = 10,
	[Token(Token = "0x400139B")]
	GLOCK = 20,
	[Token(Token = "0x400139C")]
	REVOLVER = 30,
	[Token(Token = "0x400139D")]
	UZI = 40
}
[Serializable]
[Token(Token = "0x20002E2")]
public class HapticsInfo
{
	[Token(Token = "0x400139E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public AnimationCurve curve;

	[Token(Token = "0x400139F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float duration;

	[Token(Token = "0x40013A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float frequency;

	[Token(Token = "0x40013A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float amplitude;

	[Token(Token = "0x6000FA5")]
	[Address(RVA = "0xA79B14", Offset = "0xA79B14", VA = "0xA79B14")]
	public HapticsInfo()
	{
	}
}
[Token(Token = "0x20002E3")]
public class HapticsController : MonoBehaviour
{
	[Token(Token = "0x20002E4")]
	[CompilerGenerated]
	private sealed class <ProcessEffect>d__14 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40013AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40013AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40013AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HandType _hand;

		[Token(Token = "0x40013B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public HapticsInfo _info;

		[Token(Token = "0x40013B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <time>5__2;

		[Token(Token = "0x170001BE")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000FAE")]
			[Address(RVA = "0xA79E6C", Offset = "0xA79E6C", VA = "0xA79E6C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001BF")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000FB0")]
			[Address(RVA = "0xA79EB4", Offset = "0xA79EB4", VA = "0xA79EB4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000FAB")]
		[Address(RVA = "0xA79CD8", Offset = "0xA79CD8", VA = "0xA79CD8")]
		[DebuggerHidden]
		public <ProcessEffect>d__14(int <>1__state)
		{
		}

		[Token(Token = "0x6000FAC")]
		[Address(RVA = "0xA79D00", Offset = "0xA79D00", VA = "0xA79D00", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000FAD")]
		[Address(RVA = "0xA79D04", Offset = "0xA79D04", VA = "0xA79D04", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000FAF")]
		[Address(RVA = "0xA79E74", Offset = "0xA79E74", VA = "0xA79E74", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40013A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static HapticsController instance;

	[Token(Token = "0x40013A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public HapticsInfo grabInfo;

	[Token(Token = "0x40013A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public HapticsInfo clickInfo;

	[Token(Token = "0x40013A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public HapticsInfo reloadInfo;

	[Token(Token = "0x40013A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public HapticsInfo desertEagleInfo;

	[Token(Token = "0x40013A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public HapticsInfo glockInfo;

	[Token(Token = "0x40013A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public HapticsInfo revolverInfo;

	[Token(Token = "0x40013A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public HapticsInfo uziInfo;

	[Token(Token = "0x40013AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public HapticsInfo smallTapInfo;

	[Token(Token = "0x40013AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public HapticsInfo midTapInfo;

	[Token(Token = "0x40013AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public HapticsInfo bigTapInfo;

	[Token(Token = "0x6000FA6")]
	[Address(RVA = "0xA79B2C", Offset = "0xA79B2C", VA = "0xA79B2C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000FA7")]
	[Address(RVA = "0xA74D28", Offset = "0xA74D28", VA = "0xA74D28")]
	public void PlayEffect(HapticEffectType _type, HandType _hand)
	{
	}

	[Token(Token = "0x6000FA8")]
	[Address(RVA = "0xA79BF0", Offset = "0xA79BF0", VA = "0xA79BF0")]
	private void TriggerEffect(HapticsInfo _info, HandType _hand)
	{
	}

	[Token(Token = "0x6000FA9")]
	[Address(RVA = "0xA79B78", Offset = "0xA79B78", VA = "0xA79B78")]
	[IteratorStateMachine(typeof(<ProcessEffect>d__14))]
	private IEnumerator ProcessEffect(HapticsInfo _info, HandType _hand)
	{
		return null;
	}

	[Token(Token = "0x6000FAA")]
	[Address(RVA = "0xA79CD0", Offset = "0xA79CD0", VA = "0xA79CD0")]
	public HapticsController()
	{
	}
}
[Token(Token = "0x20002E5")]
public class HeadCollision : MonoBehaviour
{
	[Token(Token = "0x40013B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static HeadCollision instance;

	[Token(Token = "0x40013B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float activeDelay;

	[Token(Token = "0x40013B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float timeStart;

	[Token(Token = "0x6000FB1")]
	[Address(RVA = "0xA79EBC", Offset = "0xA79EBC", VA = "0xA79EBC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000FB2")]
	[Address(RVA = "0xA79F1C", Offset = "0xA79F1C", VA = "0xA79F1C")]
	private void OnTriggerEnter()
	{
	}

	[Token(Token = "0x6000FB3")]
	[Address(RVA = "0xA7A0B0", Offset = "0xA7A0B0", VA = "0xA7A0B0")]
	private void OnTriggerExit()
	{
	}

	[Token(Token = "0x6000FB4")]
	[Address(RVA = "0xA7A248", Offset = "0xA7A248", VA = "0xA7A248")]
	public HeadCollision()
	{
	}
}
[Token(Token = "0x20002E7")]
public class HitScanEmmiter : MonoBehaviour
{
	[Token(Token = "0x40013B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static HitScanEmmiter instance;

	[Token(Token = "0x40013B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject trailPrefab;

	[Token(Token = "0x40013BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int poolSize;

	[Token(Token = "0x40013BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private HitScanTrail[] trailPool;

	[Token(Token = "0x40013BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int poolIndex;

	[Token(Token = "0x6000FB9")]
	[Address(RVA = "0xA7A320", Offset = "0xA7A320", VA = "0xA7A320")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000FBA")]
	[Address(RVA = "0xA7A370", Offset = "0xA7A370", VA = "0xA7A370")]
	private void CreatePool()
	{
	}

	[Token(Token = "0x6000FBB")]
	[Address(RVA = "0xA7A4CC", Offset = "0xA7A4CC", VA = "0xA7A4CC")]
	public void EmitTrail(Vector3 startPos, Vector3 endPos, Quaternion rot)
	{
	}

	[Token(Token = "0x6000FBC")]
	[Address(RVA = "0xA7A5C4", Offset = "0xA7A5C4", VA = "0xA7A5C4")]
	public HitScanEmmiter()
	{
	}
}
[Token(Token = "0x20002E8")]
public class HitScanTrail : MonoBehaviour
{
	[Token(Token = "0x20002E9")]
	[CompilerGenerated]
	private sealed class <TrailLerp>d__8 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40013C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40013C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40013C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HitScanTrail <>4__this;

		[Token(Token = "0x40013C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 endPos;

		[Token(Token = "0x40013C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector3 startPos;

		[Token(Token = "0x40013C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float <time>5__2;

		[Token(Token = "0x170001C0")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000FC4")]
			[Address(RVA = "0xA7A8F0", Offset = "0xA7A8F0", VA = "0xA7A8F0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001C1")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000FC6")]
			[Address(RVA = "0xA7A938", Offset = "0xA7A938", VA = "0xA7A938", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000FC1")]
		[Address(RVA = "0xA7A6D8", Offset = "0xA7A6D8", VA = "0xA7A6D8")]
		[DebuggerHidden]
		public <TrailLerp>d__8(int <>1__state)
		{
		}

		[Token(Token = "0x6000FC2")]
		[Address(RVA = "0xA7A764", Offset = "0xA7A764", VA = "0xA7A764", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000FC3")]
		[Address(RVA = "0xA7A768", Offset = "0xA7A768", VA = "0xA7A768", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000FC5")]
		[Address(RVA = "0xA7A8F8", Offset = "0xA7A8F8", VA = "0xA7A8F8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40013BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float duration;

	[Token(Token = "0x40013BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Vector3 hitLocalOffset;

	[Token(Token = "0x40013BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private LineRenderer trail;

	[Token(Token = "0x40013C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Vector3[] positions;

	[Token(Token = "0x40013C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Transform xForm;

	[Token(Token = "0x40013C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool lerping;

	[Token(Token = "0x6000FBD")]
	[Address(RVA = "0xA7A5D4", Offset = "0xA7A5D4", VA = "0xA7A5D4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000FBE")]
	[Address(RVA = "0xA7A52C", Offset = "0xA7A52C", VA = "0xA7A52C")]
	public void UpdateTrail(Vector3 startpos, Vector3 endPos, Quaternion rot)
	{
	}

	[Token(Token = "0x6000FBF")]
	[Address(RVA = "0xA7A634", Offset = "0xA7A634", VA = "0xA7A634")]
	[IteratorStateMachine(typeof(<TrailLerp>d__8))]
	private IEnumerator TrailLerp(Vector3 startPos, Vector3 endPos)
	{
		return null;
	}

	[Token(Token = "0x6000FC0")]
	[Address(RVA = "0xA7A700", Offset = "0xA7A700", VA = "0xA7A700")]
	public HitScanTrail()
	{
	}
}
[Token(Token = "0x20002EA")]
public interface IAchievements
{
	[Token(Token = "0x20002EB")]
	public enum AchievementType
	{
		[Token(Token = "0x40013CA")]
		Unknown,
		[Token(Token = "0x40013CB")]
		Simple,
		[Token(Token = "0x40013CC")]
		Bitfield,
		[Token(Token = "0x40013CD")]
		Count
	}

	[Token(Token = "0x20002EC")]
	public class Achievement
	{
		[Token(Token = "0x40013CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string id;

		[Token(Token = "0x40013CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool unlocked;

		[Token(Token = "0x40013D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public AchievementType type;

		[Token(Token = "0x40013D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ulong progress;

		[Token(Token = "0x40013D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ulong target;

		[Token(Token = "0x6000FCC")]
		[Address(RVA = "0xA7A940", Offset = "0xA7A940", VA = "0xA7A940")]
		public Achievement()
		{
		}
	}

	[Token(Token = "0x6000FC7")]
	void Initialise();

	[Token(Token = "0x6000FC8")]
	Achievement GetAchievement(string id);

	[Token(Token = "0x6000FC9")]
	void LoadAchievements(Action<bool> callback);

	[Token(Token = "0x6000FCA")]
	void Progress(string achievement, uint count, uint maxCount, Action<bool> callback);

	[Token(Token = "0x6000FCB")]
	void Unlock(string achievement, Action<bool> callback);
}
[Token(Token = "0x20002ED")]
public interface ILeaderboards
{
	[Token(Token = "0x20002EE")]
	public enum LeaderboardFilterType
	{
		[Token(Token = "0x40013D4")]
		None,
		[Token(Token = "0x40013D5")]
		Friends
	}

	[Token(Token = "0x20002EF")]
	public enum LeaderboardStartAt
	{
		[Token(Token = "0x40013D7")]
		Top,
		[Token(Token = "0x40013D8")]
		CenteredOnViewer,
		[Token(Token = "0x40013D9")]
		CenteredOnViewerOrTop
	}

	[Token(Token = "0x20002F0")]
	public class LeaderboardEntry
	{
		[Token(Token = "0x40013DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly long Score;

		[Token(Token = "0x40013DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly int Rank;

		[Token(Token = "0x40013DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly IPlatform.User User;

		[Token(Token = "0x6000FD0")]
		[Address(RVA = "0xA7A948", Offset = "0xA7A948", VA = "0xA7A948")]
		public LeaderboardEntry(long score, int rank, IPlatform.User user)
		{
		}
	}

	[Token(Token = "0x6000FCD")]
	void Initialise();

	[Token(Token = "0x6000FCE")]
	void WriteEntry(string apiName, long value, Action<bool, string> callback);

	[Token(Token = "0x6000FCF")]
	void GetEntries(string apiName, int amount, LeaderboardFilterType filterType, LeaderboardStartAt startAt, Action<bool, string, List<LeaderboardEntry>> callback);
}
[Token(Token = "0x20002F1")]
public class InteractableSlot : MonoBehaviour
{
	[Token(Token = "0x40013DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Interactable item;

	[Token(Token = "0x40013DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MeshRenderer highlight;

	[Token(Token = "0x40013DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public HandController activeLeftHand;

	[Token(Token = "0x40013E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public HandController activeRightHand;

	[Token(Token = "0x40013E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Collider collision;

	[Token(Token = "0x40013E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public UnityEvent onEnterEvents;

	[Token(Token = "0x40013E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public UnityEvent onExitEvents;

	[Token(Token = "0x40013E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public UnityEvent<Interactable> onEmptyEvents;

	[Token(Token = "0x40013E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public UnityEvent<Interactable> onFilledEvents;

	[Token(Token = "0x40013E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public int slotIndex;

	[Token(Token = "0x40013E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public UnlockFX unlockFX;

	[Token(Token = "0x40013E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public bool isHolsterSlot;

	[Token(Token = "0x40013E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
	public bool locked;

	[Token(Token = "0x40013EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x72")]
	public bool purchased;

	[Token(Token = "0x40013EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x73")]
	public bool empty;

	[Token(Token = "0x40013EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private bool triggered;

	[Token(Token = "0x40013ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x75")]
	private bool hasHighlight;

	[Token(Token = "0x40013EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x76")]
	public bool unlockFXPlaying;

	[Token(Token = "0x6000FD1")]
	[Address(RVA = "0xA7A988", Offset = "0xA7A988", VA = "0xA7A988")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000FD2")]
	[Address(RVA = "0xA7AA54", Offset = "0xA7AA54", VA = "0xA7AA54")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000FD3")]
	[Address(RVA = "0xA7AC24", Offset = "0xA7AC24", VA = "0xA7AC24")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000FD4")]
	[Address(RVA = "0xA7AED0", Offset = "0xA7AED0", VA = "0xA7AED0")]
	public void ShowUnlockFX()
	{
	}

	[Token(Token = "0x6000FD5")]
	[Address(RVA = "0xA7AF5C", Offset = "0xA7AF5C", VA = "0xA7AF5C")]
	public void ChangeSlot(InteractableSlot newSlot)
	{
	}

	[Token(Token = "0x6000FD6")]
	[Address(RVA = "0xA7AFB0", Offset = "0xA7AFB0", VA = "0xA7AFB0")]
	public void ItemRemoved()
	{
	}

	[Token(Token = "0x6000FD7")]
	[Address(RVA = "0xA7B094", Offset = "0xA7B094", VA = "0xA7B094")]
	public void ItemFilled(Interactable _item)
	{
	}

	[Token(Token = "0x6000FD8")]
	[Address(RVA = "0xA7B108", Offset = "0xA7B108", VA = "0xA7B108")]
	public InteractableSlot()
	{
	}
}
[Token(Token = "0x20002F2")]
public interface IPlatform
{
	[Token(Token = "0x20002F3")]
	public class User
	{
		[Token(Token = "0x40013EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string DisplayName;

		[Token(Token = "0x40013F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly ulong ID;

		[Token(Token = "0x40013F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly string PlatformID;

		[Token(Token = "0x6000FE7")]
		[Address(RVA = "0xA7B534", Offset = "0xA7B534", VA = "0xA7B534")]
		public User(string displayName, ulong id, string platformID)
		{
		}
	}

	[Token(Token = "0x170001C2")]
	User _user
	{
		[Token(Token = "0x6000FD9")]
		get;
		[Token(Token = "0x6000FDA")]
		set;
	}

	[Token(Token = "0x170001C3")]
	User user
	{
		[Token(Token = "0x6000FDB")]
		[Address(RVA = "0xA7B118", Offset = "0xA7B118", VA = "0xA7B118", Slot = "2")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000FDC")]
		[Address(RVA = "0xA7B1AC", Offset = "0xA7B1AC", VA = "0xA7B1AC", Slot = "3")]
		set
		{
		}
	}

	[Token(Token = "0x170001C4")]
	string cloudSaveLocation
	{
		[Token(Token = "0x6000FDD")]
		get;
	}

	[Token(Token = "0x170001C5")]
	string localSaveLocation
	{
		[Token(Token = "0x6000FDE")]
		get;
	}

	[Token(Token = "0x170001C6")]
	string saveLocation
	{
		[Token(Token = "0x6000FDF")]
		[Address(RVA = "0xA7B254", Offset = "0xA7B254", VA = "0xA7B254", Slot = "6")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000FE0")]
	bool CanCloudSave();

	[Token(Token = "0x6000FE1")]
	void Initialise(Action callback);

	[Token(Token = "0x6000FE2")]
	[Address(RVA = "0xA7B384", Offset = "0xA7B384", VA = "0xA7B384", Slot = "9")]
	void Update()
	{
	}

	[Token(Token = "0x6000FE3")]
	void FetchLoggedInUser(Action callback);

	[Token(Token = "0x6000FE4")]
	[Address(RVA = "0xA7B388", Offset = "0xA7B388", VA = "0xA7B388", Slot = "11")]
	void OnDestroy()
	{
	}

	[Token(Token = "0x6000FE5")]
	void GetSaveLocation(Action callback);

	[Token(Token = "0x6000FE6")]
	[Address(RVA = "0xA7B38C", Offset = "0xA7B38C", VA = "0xA7B38C", Slot = "13")]
	void UserRetrieved(User user, Action callback)
	{
	}
}
[Token(Token = "0x20002F4")]
public class LeaderBoardOculus : ILeaderboards
{
	[Token(Token = "0x6000FE8")]
	[Address(RVA = "0xA7B570", Offset = "0xA7B570", VA = "0xA7B570")]
	public LeaderBoardOculus()
	{
	}

	[Token(Token = "0x6000FE9")]
	[Address(RVA = "0xA7B578", Offset = "0xA7B578", VA = "0xA7B578", Slot = "4")]
	public void Initialise()
	{
	}

	[Token(Token = "0x6000FEA")]
	[Address(RVA = "0xA7B57C", Offset = "0xA7B57C", VA = "0xA7B57C")]
	private Message<bool>.Callback WriteComplete(string apiName, Action<bool, string> callback)
	{
		return null;
	}

	[Token(Token = "0x6000FEB")]
	[Address(RVA = "0xA7B63C", Offset = "0xA7B63C", VA = "0xA7B63C")]
	private Message<LeaderboardEntryList>.Callback GetComplete(string apiName, Action<bool, string, List<ILeaderboards.LeaderboardEntry>> callback)
	{
		return null;
	}

	[Token(Token = "0x6000FEC")]
	[Address(RVA = "0xA7B704", Offset = "0xA7B704", VA = "0xA7B704")]
	private LeaderboardFilterType ConvertFilterType(ILeaderboards.LeaderboardFilterType filterType)
	{
		return default(LeaderboardFilterType);
	}

	[Token(Token = "0x6000FED")]
	[Address(RVA = "0xA7B710", Offset = "0xA7B710", VA = "0xA7B710")]
	private LeaderboardStartAt ConvertStartAt(ILeaderboards.LeaderboardStartAt filterType)
	{
		return default(LeaderboardStartAt);
	}

	[Token(Token = "0x6000FEE")]
	[Address(RVA = "0xA7B730", Offset = "0xA7B730", VA = "0xA7B730")]
	private ILeaderboards.LeaderboardEntry ConvertLeaderboardEntry(LeaderboardEntry oculusEntry)
	{
		return null;
	}

	[Token(Token = "0x6000FEF")]
	[Address(RVA = "0xA7B7FC", Offset = "0xA7B7FC", VA = "0xA7B7FC", Slot = "5")]
	public void WriteEntry(string apiName, long value, Action<bool, string> callback)
	{
	}

	[Token(Token = "0x6000FF0")]
	[Address(RVA = "0xA7B888", Offset = "0xA7B888", VA = "0xA7B888", Slot = "6")]
	public void GetEntries(string apiName, int amount, ILeaderboards.LeaderboardFilterType filterType, ILeaderboards.LeaderboardStartAt startAt, Action<bool, string, List<ILeaderboards.LeaderboardEntry>> callback)
	{
	}
}
[Token(Token = "0x20002F7")]
[CreateAssetMenu(fileName = "LevelDescriptionInfo", menuName = "Settings/LevelDescriptionInfo")]
public class LevelDescriptionInfo : ScriptableObject
{
	[Token(Token = "0x40013F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string title;

	[Token(Token = "0x40013F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string titleTranslationKey;

	[Token(Token = "0x40013F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string location;

	[Token(Token = "0x40013FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public string locationTranslationKey;

	[Token(Token = "0x40013FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public string summary;

	[Token(Token = "0x40013FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public string summaryTranslationKey;

	[Token(Token = "0x40013FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public string description;

	[Token(Token = "0x40013FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public string descriptionTranslationKey;

	[Token(Token = "0x40013FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public int timeBonusRange;

	[Token(Token = "0x6000FF5")]
	[Address(RVA = "0xA7BDB4", Offset = "0xA7BDB4", VA = "0xA7BDB4")]
	public LevelDescriptionInfo()
	{
	}
}
[Token(Token = "0x20002F8")]
[CreateAssetMenu(fileName = "LevelEnvSettings", menuName = "Settings/LevelEnvSettings")]
public class LevelEnvironmentSettings : ScriptableObject
{
	[Token(Token = "0x4001400")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Material skybox;

	[Token(Token = "0x4001401")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool useFog;

	[Token(Token = "0x4001402")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Color fogColour;

	[Token(Token = "0x4001403")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float nearFog;

	[Token(Token = "0x4001404")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float farFog;

	[Token(Token = "0x6000FF6")]
	[Address(RVA = "0xA7BDC4", Offset = "0xA7BDC4", VA = "0xA7BDC4")]
	public LevelEnvironmentSettings()
	{
	}
}
[Token(Token = "0x20002F9")]
[CreateAssetMenu(fileName = "LevelMusicSettings", menuName = "Settings/LevelMusicSettings")]
public class LevelMusicSettings : ScriptableObject
{
	[Token(Token = "0x4001405")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string musicThemeTag;

	[Token(Token = "0x4001406")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float stem_01_volume;

	[Token(Token = "0x4001407")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float stem_01_fadeDuration;

	[Token(Token = "0x4001408")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float stem_02_volume;

	[Token(Token = "0x4001409")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float stem_02_fadeDuration;

	[Token(Token = "0x400140A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float stem_03_volume;

	[Token(Token = "0x400140B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float stem_03_fadeDuration;

	[Token(Token = "0x6000FF7")]
	[Address(RVA = "0xA7BDD8", Offset = "0xA7BDD8", VA = "0xA7BDD8")]
	public LevelMusicSettings()
	{
	}
}
[Token(Token = "0x20002FA")]
public class LightMaskController : MonoBehaviour
{
	[Token(Token = "0x400140C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool disableIfAndroid;

	[Token(Token = "0x400140D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public LayerMask androidMask;

	[Token(Token = "0x400140E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private LayerMask startMask;

	[Token(Token = "0x6000FF8")]
	[Address(RVA = "0xA7BDF4", Offset = "0xA7BDF4", VA = "0xA7BDF4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000FF9")]
	[Address(RVA = "0xA7BEA8", Offset = "0xA7BEA8", VA = "0xA7BEA8")]
	public LightMaskController()
	{
	}
}
[Token(Token = "0x20002FB")]
public class LightSpecController : MonoBehaviour
{
	[Token(Token = "0x20002FC")]
	[CompilerGenerated]
	private sealed class <BlendSpec>d__9 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001417")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001418")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001419")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LightSpecController <>4__this;

		[Token(Token = "0x400141A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <time>5__2;

		[Token(Token = "0x400141B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <fromBrightness>5__3;

		[Token(Token = "0x400141C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Color <fromColor>5__4;

		[Token(Token = "0x400141D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 <fromDirection>5__5;

		[Token(Token = "0x400141E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 <toDirection>5__6;

		[Token(Token = "0x400141F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float <fromSmooth>5__7;

		[Token(Token = "0x4001420")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float <fromLuminance>5__8;

		[Token(Token = "0x170001C7")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001001")]
			[Address(RVA = "0xA7C478", Offset = "0xA7C478", VA = "0xA7C478", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001C8")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001003")]
			[Address(RVA = "0xA7C4C0", Offset = "0xA7C4C0", VA = "0xA7C4C0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000FFE")]
		[Address(RVA = "0xA7BF38", Offset = "0xA7BF38", VA = "0xA7BF38")]
		[DebuggerHidden]
		public <BlendSpec>d__9(int <>1__state)
		{
		}

		[Token(Token = "0x6000FFF")]
		[Address(RVA = "0xA7C0F4", Offset = "0xA7C0F4", VA = "0xA7C0F4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001000")]
		[Address(RVA = "0xA7C0F8", Offset = "0xA7C0F8", VA = "0xA7C0F8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001002")]
		[Address(RVA = "0xA7C480", Offset = "0xA7C480", VA = "0xA7C480", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400140F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationCurve blend;

	[Token(Token = "0x4001410")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float brightness;

	[Token(Token = "0x4001411")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float blendDuration;

	[Token(Token = "0x4001412")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float luminance;

	[Token(Token = "0x4001413")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float smoothness;

	[Token(Token = "0x4001414")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Color toColor;

	[Token(Token = "0x4001415")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform lightDirection;

	[Token(Token = "0x4001416")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Material specMaterial;

	[Token(Token = "0x6000FFA")]
	[Address(RVA = "0xA7BEB0", Offset = "0xA7BEB0", VA = "0xA7BEB0")]
	public void ChangeSpec()
	{
	}

	[Token(Token = "0x6000FFB")]
	[Address(RVA = "0xA7BED0", Offset = "0xA7BED0", VA = "0xA7BED0")]
	[IteratorStateMachine(typeof(<BlendSpec>d__9))]
	private IEnumerator BlendSpec()
	{
		return null;
	}

	[Token(Token = "0x6000FFC")]
	[Address(RVA = "0xA7BF60", Offset = "0xA7BF60", VA = "0xA7BF60")]
	public void Apply()
	{
	}

	[Token(Token = "0x6000FFD")]
	[Address(RVA = "0xA7C080", Offset = "0xA7C080", VA = "0xA7C080")]
	public LightSpecController()
	{
	}
}
[Token(Token = "0x20002FD")]
public class ManagedLightMesh : MonoBehaviour
{
	[Token(Token = "0x4001421")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool isOn;

	[Token(Token = "0x4001422")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject offLight;

	[Token(Token = "0x4001423")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject onLight;

	[Token(Token = "0x4001424")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject onClone;

	[Token(Token = "0x4001425")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform cloneParent;

	[Token(Token = "0x6001004")]
	[Address(RVA = "0xA7C4C8", Offset = "0xA7C4C8", VA = "0xA7C4C8")]
	public void SetState(bool _isOn)
	{
	}

	[Token(Token = "0x6001005")]
	[Address(RVA = "0xA7C6D4", Offset = "0xA7C6D4", VA = "0xA7C6D4")]
	public void ToggleState()
	{
	}

	[Token(Token = "0x6001006")]
	[Address(RVA = "0xA7C4D4", Offset = "0xA7C4D4", VA = "0xA7C4D4")]
	private void ManagedClone(bool _isOn)
	{
	}

	[Token(Token = "0x6001007")]
	[Address(RVA = "0xA7C6EC", Offset = "0xA7C6EC", VA = "0xA7C6EC")]
	public ManagedLightMesh()
	{
	}
}
[Token(Token = "0x20002FE")]
public class ManagedLightRootInfo : MonoBehaviour
{
	[Token(Token = "0x4001426")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform lightParent;

	[Token(Token = "0x6001008")]
	[Address(RVA = "0xA7C6F4", Offset = "0xA7C6F4", VA = "0xA7C6F4")]
	public ManagedLightRootInfo()
	{
	}
}
[Token(Token = "0x20002FF")]
public class MeshBakerRefresher : MonoBehaviour
{
	[Token(Token = "0x4001427")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	public Transform sourceMeshRoot;

	[Token(Token = "0x4001428")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	public Transform destinationBakeRoot;

	[Token(Token = "0x4001429")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	public bool ignoreDisabled;

	[Token(Token = "0x6001009")]
	[Address(RVA = "0xA7C6FC", Offset = "0xA7C6FC", VA = "0xA7C6FC")]
	public void Refresh()
	{
	}

	[Token(Token = "0x600100A")]
	[Address(RVA = "0xA7C700", Offset = "0xA7C700", VA = "0xA7C700")]
	public void Bake()
	{
	}

	[Token(Token = "0x600100B")]
	[Address(RVA = "0xA7C704", Offset = "0xA7C704", VA = "0xA7C704")]
	public MeshBakerRefresher()
	{
	}
}
[Token(Token = "0x2000300")]
public class MoveIndicator : MonoBehaviour
{
	[Token(Token = "0x400142A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static MoveIndicator instance;

	[Token(Token = "0x400142B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Material highMat;

	[Token(Token = "0x400142C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Material midMat;

	[Token(Token = "0x400142D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Material moveMat;

	[Token(Token = "0x400142E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float yOffset;

	[Token(Token = "0x400142F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Rigidbody rBody;

	[Token(Token = "0x4001430")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Transform playerEyeTransform;

	[Token(Token = "0x4001431")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public MoveIndicatorArrow[] arrows;

	[Token(Token = "0x4001432")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Transform xForm;

	[Token(Token = "0x4001433")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool showing;

	[Token(Token = "0x600100C")]
	[Address(RVA = "0xA7C714", Offset = "0xA7C714", VA = "0xA7C714")]
	private void Awake()
	{
	}

	[Token(Token = "0x600100D")]
	[Address(RVA = "0xA7C7A4", Offset = "0xA7C7A4", VA = "0xA7C7A4")]
	private void Start()
	{
	}

	[Token(Token = "0x600100E")]
	[Address(RVA = "0xA7C810", Offset = "0xA7C810", VA = "0xA7C810")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600100F")]
	[Address(RVA = "0xA7C9A4", Offset = "0xA7C9A4", VA = "0xA7C9A4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6001010")]
	[Address(RVA = "0xA7CB38", Offset = "0xA7CB38", VA = "0xA7CB38")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6001011")]
	[Address(RVA = "0xA7D000", Offset = "0xA7D000", VA = "0xA7D000")]
	private void RefreshArrows()
	{
	}

	[Token(Token = "0x6001012")]
	[Address(RVA = "0xA7CE00", Offset = "0xA7CE00", VA = "0xA7CE00")]
	private void UpdateArrows()
	{
	}

	[Token(Token = "0x6001013")]
	[Address(RVA = "0xA7D248", Offset = "0xA7D248", VA = "0xA7D248")]
	public MoveIndicator()
	{
	}
}
[Token(Token = "0x2000301")]
public class MoveIndicatorArrow : MonoBehaviour
{
	[Token(Token = "0x2000302")]
	[CompilerGenerated]
	private sealed class <ShowRoutine>d__9 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400143B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400143C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400143D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MoveIndicatorArrow <>4__this;

		[Token(Token = "0x400143E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool show;

		[Token(Token = "0x400143F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <time>5__2;

		[Token(Token = "0x4001440")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <duration>5__3;

		[Token(Token = "0x4001441")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 <toScale>5__4;

		[Token(Token = "0x4001442")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 <fromScale>5__5;

		[Token(Token = "0x170001C9")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600101B")]
			[Address(RVA = "0xA7D578", Offset = "0xA7D578", VA = "0xA7D578", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001CA")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600101D")]
			[Address(RVA = "0xA7D5C0", Offset = "0xA7D5C0", VA = "0xA7D5C0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001018")]
		[Address(RVA = "0xA7D308", Offset = "0xA7D308", VA = "0xA7D308")]
		[DebuggerHidden]
		public <ShowRoutine>d__9(int <>1__state)
		{
		}

		[Token(Token = "0x6001019")]
		[Address(RVA = "0xA7D338", Offset = "0xA7D338", VA = "0xA7D338", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600101A")]
		[Address(RVA = "0xA7D33C", Offset = "0xA7D33C", VA = "0xA7D33C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600101C")]
		[Address(RVA = "0xA7D580", Offset = "0xA7D580", VA = "0xA7D580", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001434")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public MeshRenderer meshRenderer;

	[Token(Token = "0x4001435")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform xForm;

	[Token(Token = "0x4001436")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool hasTarget;

	[Token(Token = "0x4001437")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public Vector3 targetPosition;

	[Token(Token = "0x4001438")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public TweenPosition tweener;

	[Token(Token = "0x4001439")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Vector3 targetScale;

	[Token(Token = "0x400143A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private bool showTweening;

	[Token(Token = "0x6001014")]
	[Address(RVA = "0xA7D258", Offset = "0xA7D258", VA = "0xA7D258")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001015")]
	[Address(RVA = "0xA7CDDC", Offset = "0xA7CDDC", VA = "0xA7CDDC")]
	public void Show(bool show)
	{
	}

	[Token(Token = "0x6001016")]
	[Address(RVA = "0xA7D28C", Offset = "0xA7D28C", VA = "0xA7D28C")]
	[IteratorStateMachine(typeof(<ShowRoutine>d__9))]
	private IEnumerator ShowRoutine(bool show)
	{
		return null;
	}

	[Token(Token = "0x6001017")]
	[Address(RVA = "0xA7D330", Offset = "0xA7D330", VA = "0xA7D330")]
	public MoveIndicatorArrow()
	{
	}
}
[Token(Token = "0x2000303")]
public class Mover : MonoBehaviour
{
	[Token(Token = "0x2000304")]
	[CompilerGenerated]
	private sealed class <MoveRoutine>d__35 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001461")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001462")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001463")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Mover <>4__this;

		[Token(Token = "0x170001CB")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600102A")]
			[Address(RVA = "0xA7DE30", Offset = "0xA7DE30", VA = "0xA7DE30", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001CC")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600102C")]
			[Address(RVA = "0xA7DE78", Offset = "0xA7DE78", VA = "0xA7DE78", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001027")]
		[Address(RVA = "0xA7D8E0", Offset = "0xA7D8E0", VA = "0xA7D8E0")]
		[DebuggerHidden]
		public <MoveRoutine>d__35(int <>1__state)
		{
		}

		[Token(Token = "0x6001028")]
		[Address(RVA = "0xA7DB2C", Offset = "0xA7DB2C", VA = "0xA7DB2C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001029")]
		[Address(RVA = "0xA7DB30", Offset = "0xA7DB30", VA = "0xA7DB30", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600102B")]
		[Address(RVA = "0xA7DE38", Offset = "0xA7DE38", VA = "0xA7DE38", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001443")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("Meters Per Second")]
	public float moveSpeed;

	[Token(Token = "0x4001444")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AnimationCurve moverCurve;

	[Token(Token = "0x4001445")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public MoverPosition[] positions;

	[Token(Token = "0x4001446")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform moverPlatform;

	[Token(Token = "0x4001447")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform playerCoverPoint;

	[Token(Token = "0x4001448")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform panelTransform;

	[Token(Token = "0x4001449")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Header("Events")]
	public UnityEvent onStart;

	[Token(Token = "0x400144A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public UnityEvent onNext;

	[Token(Token = "0x400144B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public UnityEvent onPrev;

	[Token(Token = "0x400144C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public UnityEvent onEnd;

	[Token(Token = "0x400144D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public UnityEvent onError;

	[Token(Token = "0x400144E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public AudioSource soundSource;

	[Token(Token = "0x400144F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public AudioClip startSoundClip;

	[Token(Token = "0x4001450")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public AudioClip loopSoundClip;

	[Token(Token = "0x4001451")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public AudioClip endSoundClip;

	[Token(Token = "0x4001452")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public int positionIndex;

	[Token(Token = "0x4001453")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	public bool moveActivated;

	[Token(Token = "0x4001454")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x95")]
	public bool moving;

	[Token(Token = "0x4001455")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Rigidbody moverBody;

	[Token(Token = "0x4001456")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private int targetIndex;

	[Token(Token = "0x4001457")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private float moverLerp;

	[Token(Token = "0x4001458")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private float moverDuration;

	[Token(Token = "0x4001459")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private float moverTimeProgress;

	[Token(Token = "0x400145A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private float nextPositionDistance;

	[Token(Token = "0x400145B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	private float moveMagDelta;

	[Token(Token = "0x400145C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private Vector3 startPosition;

	[Token(Token = "0x400145D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	private Vector3 targetPosition;

	[Token(Token = "0x400145E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private Vector3 relativeCoverPointPos;

	[Token(Token = "0x400145F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	private Vector3 relativePlayerPointPos;

	[Token(Token = "0x4001460")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private Transform playerRoot;

	[Token(Token = "0x600101E")]
	[Address(RVA = "0xA7D5C8", Offset = "0xA7D5C8", VA = "0xA7D5C8")]
	private void Awake()
	{
	}

	[Token(Token = "0x600101F")]
	[Address(RVA = "0xA7D668", Offset = "0xA7D668", VA = "0xA7D668")]
	private void Start()
	{
	}

	[Token(Token = "0x6001020")]
	[Address(RVA = "0xA7D6C8", Offset = "0xA7D6C8", VA = "0xA7D6C8")]
	public void Error()
	{
	}

	[Token(Token = "0x6001021")]
	[Address(RVA = "0xA7D794", Offset = "0xA7D794", VA = "0xA7D794")]
	public void MoveNextPoint()
	{
	}

	[Token(Token = "0x6001022")]
	[Address(RVA = "0xA7D878", Offset = "0xA7D878", VA = "0xA7D878")]
	public void MovePreviousPoint()
	{
	}

	[Token(Token = "0x6001023")]
	[Address(RVA = "0xA7D810", Offset = "0xA7D810", VA = "0xA7D810")]
	[IteratorStateMachine(typeof(<MoveRoutine>d__35))]
	private IEnumerator MoveRoutine()
	{
		return null;
	}

	[Token(Token = "0x6001024")]
	[Address(RVA = "0xA7D908", Offset = "0xA7D908", VA = "0xA7D908")]
	private void UpdateMover()
	{
	}

	[Token(Token = "0x6001025")]
	[Address(RVA = "0xA7DB0C", Offset = "0xA7DB0C", VA = "0xA7DB0C")]
	private void Update()
	{
	}

	[Token(Token = "0x6001026")]
	[Address(RVA = "0xA7DB1C", Offset = "0xA7DB1C", VA = "0xA7DB1C")]
	public Mover()
	{
	}
}
[Token(Token = "0x2000305")]
public class MoverPosition : MonoBehaviour
{
	[Token(Token = "0x4001464")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEvent onStart;

	[Token(Token = "0x4001465")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEvent onEnd;

	[NonSerialized]
	[Token(Token = "0x4001466")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform xForm;

	[Token(Token = "0x600102D")]
	[Address(RVA = "0xA7DE80", Offset = "0xA7DE80", VA = "0xA7DE80")]
	private void Awake()
	{
	}

	[Token(Token = "0x600102E")]
	[Address(RVA = "0xA7DE9C", Offset = "0xA7DE9C", VA = "0xA7DE9C")]
	public MoverPosition()
	{
	}
}
[Token(Token = "0x2000306")]
public class MuzzleFlashController : MonoBehaviour
{
	[Token(Token = "0x2000307")]
	[CompilerGenerated]
	private sealed class <FlashLight>d__9 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400146E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400146F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001470")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MuzzleFlashController <>4__this;

		[Token(Token = "0x170001CD")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001036")]
			[Address(RVA = "0xA7E148", Offset = "0xA7E148", VA = "0xA7E148", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001CE")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001038")]
			[Address(RVA = "0xA7E190", Offset = "0xA7E190", VA = "0xA7E190", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001033")]
		[Address(RVA = "0xA7E048", Offset = "0xA7E048", VA = "0xA7E048")]
		[DebuggerHidden]
		public <FlashLight>d__9(int <>1__state)
		{
		}

		[Token(Token = "0x6001034")]
		[Address(RVA = "0xA7E078", Offset = "0xA7E078", VA = "0xA7E078", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001035")]
		[Address(RVA = "0xA7E07C", Offset = "0xA7E07C", VA = "0xA7E07C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001037")]
		[Address(RVA = "0xA7E150", Offset = "0xA7E150", VA = "0xA7E150", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001467")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Mesh[] meshes;

	[Token(Token = "0x4001468")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private MeshFilter filter;

	[Token(Token = "0x4001469")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private MeshRenderer meshRender;

	[Token(Token = "0x400146A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Light flashLight;

	[Token(Token = "0x400146B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int lastIndex;

	[Token(Token = "0x400146C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private int numMeshes;

	[Token(Token = "0x400146D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool flashing;

	[Token(Token = "0x600102F")]
	[Address(RVA = "0xA7DEA4", Offset = "0xA7DEA4", VA = "0xA7DEA4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001030")]
	[Address(RVA = "0xA7DF58", Offset = "0xA7DF58", VA = "0xA7DF58")]
	public void UpdateMesh()
	{
	}

	[Token(Token = "0x6001031")]
	[Address(RVA = "0xA7DFE0", Offset = "0xA7DFE0", VA = "0xA7DFE0")]
	[IteratorStateMachine(typeof(<FlashLight>d__9))]
	private IEnumerator FlashLight()
	{
		return null;
	}

	[Token(Token = "0x6001032")]
	[Address(RVA = "0xA7E070", Offset = "0xA7E070", VA = "0xA7E070")]
	public MuzzleFlashController()
	{
	}
}
[Token(Token = "0x2000308")]
public class NoShadowZone : MonoBehaviour
{
	[Token(Token = "0x4001471")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool entered;

	[Token(Token = "0x4001472")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private AITrigger aiTrigger;

	[Token(Token = "0x6001039")]
	[Address(RVA = "0xA7E198", Offset = "0xA7E198", VA = "0xA7E198")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600103A")]
	[Address(RVA = "0xA7E254", Offset = "0xA7E254", VA = "0xA7E254")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x600103B")]
	[Address(RVA = "0xA7E310", Offset = "0xA7E310", VA = "0xA7E310")]
	public NoShadowZone()
	{
	}
}
[Token(Token = "0x2000309")]
public class OrientToTransform : MonoBehaviour
{
	[Token(Token = "0x4001473")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform target;

	[Token(Token = "0x4001474")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float rate;

	[Token(Token = "0x4001475")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Rigidbody rBody;

	[Token(Token = "0x4001476")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform xForm;

	[Token(Token = "0x600103C")]
	[Address(RVA = "0xA7E318", Offset = "0xA7E318", VA = "0xA7E318")]
	private void Awake()
	{
	}

	[Token(Token = "0x600103D")]
	[Address(RVA = "0xA7E378", Offset = "0xA7E378", VA = "0xA7E378")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x600103E")]
	[Address(RVA = "0xA7E530", Offset = "0xA7E530", VA = "0xA7E530")]
	public OrientToTransform()
	{
	}
}
[Token(Token = "0x200030A")]
public class ParticleSystemSelfAnchor : MonoBehaviour
{
	[Token(Token = "0x600103F")]
	[Address(RVA = "0xA7E540", Offset = "0xA7E540", VA = "0xA7E540")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001040")]
	[Address(RVA = "0xA7E5B0", Offset = "0xA7E5B0", VA = "0xA7E5B0")]
	public ParticleSystemSelfAnchor()
	{
	}
}
[Token(Token = "0x200030B")]
public class PlatformVR
{
	[Token(Token = "0x200030C")]
	public delegate void PlatformEvent(PlatformVR e);

	[Token(Token = "0x200030D")]
	public delegate void BoolStringEvent(bool e, string s);

	[Token(Token = "0x200030E")]
	public delegate void BoolEvent(bool e);

	[Token(Token = "0x400147A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public List<ILeaderboards.LeaderboardEntry> entryList;

	[Token(Token = "0x400147B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static PlatformVR _instance;

	[Token(Token = "0x4001481")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool displayErrorLogs;

	[Token(Token = "0x4001484")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
	private bool _initialised;

	[Token(Token = "0x4001485")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
	private bool getting;

	[Token(Token = "0x170001CF")]
	public static IPlatform platform
	{
		[Token(Token = "0x6001041")]
		[Address(RVA = "0xA7E5B8", Offset = "0xA7E5B8", VA = "0xA7E5B8")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6001042")]
		[Address(RVA = "0xA7E600", Offset = "0xA7E600", VA = "0xA7E600")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170001D0")]
	public static ILeaderboards leaderboards
	{
		[Token(Token = "0x6001043")]
		[Address(RVA = "0xA7E64C", Offset = "0xA7E64C", VA = "0xA7E64C")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6001044")]
		[Address(RVA = "0xA7E694", Offset = "0xA7E694", VA = "0xA7E694")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170001D1")]
	public static IAchievements achievements
	{
		[Token(Token = "0x6001045")]
		[Address(RVA = "0xA7E6E0", Offset = "0xA7E6E0", VA = "0xA7E6E0")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6001046")]
		[Address(RVA = "0xA7E728", Offset = "0xA7E728", VA = "0xA7E728")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170001D2")]
	public static PlatformVR instance
	{
		[Token(Token = "0x6001047")]
		[Address(RVA = "0xA7E774", Offset = "0xA7E774", VA = "0xA7E774")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001D3")]
	public bool achievementsLoaded
	{
		[Token(Token = "0x6001048")]
		[Address(RVA = "0xA7E980", Offset = "0xA7E980", VA = "0xA7E980")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001049")]
		[Address(RVA = "0xA7E988", Offset = "0xA7E988", VA = "0xA7E988")]
		[CompilerGenerated]
		protected set
		{
		}
	}

	[Token(Token = "0x170001D4")]
	public IPlatform.User user
	{
		[Token(Token = "0x6001052")]
		[Address(RVA = "0xA7EE74", Offset = "0xA7EE74", VA = "0xA7EE74")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6001053")]
		[Address(RVA = "0xA7EE7C", Offset = "0xA7EE7C", VA = "0xA7EE7C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170001D5")]
	public bool hasAchievements
	{
		[Token(Token = "0x6001054")]
		[Address(RVA = "0xA7EE84", Offset = "0xA7EE84", VA = "0xA7EE84")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170001D6")]
	public bool hasLeaderboards
	{
		[Token(Token = "0x6001055")]
		[Address(RVA = "0xA7EECC", Offset = "0xA7EECC", VA = "0xA7EECC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170001D7")]
	private bool initialising
	{
		[Token(Token = "0x6001056")]
		[Address(RVA = "0xA7EF14", Offset = "0xA7EF14", VA = "0xA7EF14")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001057")]
		[Address(RVA = "0xA7EF1C", Offset = "0xA7EF1C", VA = "0xA7EF1C")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170001D8")]
	public static bool initialised
	{
		[Token(Token = "0x6001058")]
		[Address(RVA = "0xA7EF28", Offset = "0xA7EF28", VA = "0xA7EF28")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1400001C")]
	public event PlatformEvent onPlatfromLoaded
	{
		[Token(Token = "0x600104A")]
		[Address(RVA = "0xA7E994", Offset = "0xA7E994", VA = "0xA7E994")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600104B")]
		[Address(RVA = "0xA7EA30", Offset = "0xA7EA30", VA = "0xA7EA30")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400001D")]
	public event BoolStringEvent onAchievementsLoaded
	{
		[Token(Token = "0x600104C")]
		[Address(RVA = "0xA7EACC", Offset = "0xA7EACC", VA = "0xA7EACC")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600104D")]
		[Address(RVA = "0xA7EB68", Offset = "0xA7EB68", VA = "0xA7EB68")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400001E")]
	public event BoolEvent onGetLeaderboard
	{
		[Token(Token = "0x600104E")]
		[Address(RVA = "0xA7EC04", Offset = "0xA7EC04", VA = "0xA7EC04")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600104F")]
		[Address(RVA = "0xA7ECA0", Offset = "0xA7ECA0", VA = "0xA7ECA0")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400001F")]
	public event BoolStringEvent onPutLeaderboard
	{
		[Token(Token = "0x6001050")]
		[Address(RVA = "0xA7ED3C", Offset = "0xA7ED3C", VA = "0xA7ED3C")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6001051")]
		[Address(RVA = "0xA7EDD8", Offset = "0xA7EDD8", VA = "0xA7EDD8")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6001059")]
	[Address(RVA = "0xA7EF88", Offset = "0xA7EF88", VA = "0xA7EF88")]
	private PlatformVR()
	{
	}

	[Token(Token = "0x600105A")]
	[Address(RVA = "0xA7E82C", Offset = "0xA7E82C", VA = "0xA7E82C")]
	public static void Start([Optional] Action<PlatformVR> callback)
	{
	}

	[Token(Token = "0x600105B")]
	[Address(RVA = "0xA7EFA4", Offset = "0xA7EFA4", VA = "0xA7EFA4")]
	private void Initialise()
	{
	}

	[Token(Token = "0x600105C")]
	[Address(RVA = "0xA7F3F4", Offset = "0xA7F3F4", VA = "0xA7F3F4")]
	private void LoadAchievements()
	{
	}

	[Token(Token = "0x600105D")]
	[Address(RVA = "0xA7F540", Offset = "0xA7F540", VA = "0xA7F540")]
	public int CommitScoreData()
	{
		return default(int);
	}

	[Token(Token = "0x600105E")]
	[Address(RVA = "0xA7F788", Offset = "0xA7F788", VA = "0xA7F788")]
	public void SubmitInt(string apiName, int value)
	{
	}

	[Token(Token = "0x600105F")]
	[Address(RVA = "0xA7F914", Offset = "0xA7F914", VA = "0xA7F914")]
	public void SubmitLong(string apiName, long value)
	{
	}

	[Token(Token = "0x6001060")]
	[Address(RVA = "0xA7FAAC", Offset = "0xA7FAAC", VA = "0xA7FAAC")]
	public void GetLeaderboardData(int amount, string leaderboardAPIname, ILeaderboards.LeaderboardFilterType _filterType = ILeaderboards.LeaderboardFilterType.Friends, ILeaderboards.LeaderboardStartAt _startAt = ILeaderboards.LeaderboardStartAt.CenteredOnViewerOrTop)
	{
	}

	[Token(Token = "0x6001061")]
	[Address(RVA = "0xA7FC64", Offset = "0xA7FC64", VA = "0xA7FC64")]
	private void LeaderboardGetCallback(bool success, string apiName, List<ILeaderboards.LeaderboardEntry> entries)
	{
	}
}
[Token(Token = "0x2000312")]
public class PlatformManager : MonoBehaviour
{
	[Token(Token = "0x170001D9")]
	public static IPlatform platform
	{
		[Token(Token = "0x6001076")]
		[Address(RVA = "0xA80404", Offset = "0xA80404", VA = "0xA80404")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001DA")]
	public static ILeaderboards leaderboards
	{
		[Token(Token = "0x6001077")]
		[Address(RVA = "0xA80444", Offset = "0xA80444", VA = "0xA80444")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001DB")]
	public static IAchievements achievements
	{
		[Token(Token = "0x6001078")]
		[Address(RVA = "0xA80484", Offset = "0xA80484", VA = "0xA80484")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001DC")]
	public static PlatformManager instance
	{
		[Token(Token = "0x6001079")]
		[Address(RVA = "0xA804C4", Offset = "0xA804C4", VA = "0xA804C4")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x600107A")]
		[Address(RVA = "0xA8050C", Offset = "0xA8050C", VA = "0xA8050C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x600107B")]
	[Address(RVA = "0xA80558", Offset = "0xA80558", VA = "0xA80558")]
	private void Awake()
	{
	}

	[Token(Token = "0x600107C")]
	[Address(RVA = "0xA805A8", Offset = "0xA805A8", VA = "0xA805A8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600107D")]
	[Address(RVA = "0xA80670", Offset = "0xA80670", VA = "0xA80670")]
	private void Start()
	{
	}

	[Token(Token = "0x600107E")]
	[Address(RVA = "0xA80674", Offset = "0xA80674", VA = "0xA80674")]
	private void Update()
	{
	}

	[Token(Token = "0x600107F")]
	[Address(RVA = "0xA8073C", Offset = "0xA8073C", VA = "0xA8073C")]
	public PlatformManager()
	{
	}
}
[Token(Token = "0x2000313")]
public class PlatformObjectEnabler : MonoBehaviour
{
	[Token(Token = "0x400148D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] oculusObjects;

	[Token(Token = "0x400148E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject[] picoObjects;

	[Token(Token = "0x400148F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject[] qiyuObjects;

	[Token(Token = "0x4001490")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject[] steamObjects;

	[Token(Token = "0x4001491")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject[] steamOculusObjects;

	[Token(Token = "0x4001492")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject[] viveObjects;

	[Token(Token = "0x4001493")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool objectsEnabled;

	[Token(Token = "0x6001080")]
	[Address(RVA = "0xA80744", Offset = "0xA80744", VA = "0xA80744")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001081")]
	[Address(RVA = "0xA80AB0", Offset = "0xA80AB0", VA = "0xA80AB0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6001082")]
	[Address(RVA = "0xA80850", Offset = "0xA80850", VA = "0xA80850")]
	public void EnableObjects()
	{
	}

	[Token(Token = "0x6001083")]
	[Address(RVA = "0xA80BA0", Offset = "0xA80BA0", VA = "0xA80BA0")]
	public PlatformObjectEnabler()
	{
	}
}
[Token(Token = "0x2000314")]
public class PlatformOculus : IPlatform
{
	[Token(Token = "0x170001DD")]
	public string cloudSaveLocation
	{
		[Token(Token = "0x6001085")]
		[Address(RVA = "0xA80BA8", Offset = "0xA80BA8", VA = "0xA80BA8", Slot = "8")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6001086")]
		[Address(RVA = "0xA80BB0", Offset = "0xA80BB0", VA = "0xA80BB0")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170001DE")]
	public string localSaveLocation
	{
		[Token(Token = "0x6001087")]
		[Address(RVA = "0xA80BB8", Offset = "0xA80BB8", VA = "0xA80BB8", Slot = "9")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6001088")]
		[Address(RVA = "0xA80BC0", Offset = "0xA80BC0", VA = "0xA80BC0")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170001DF")]
	public IPlatform.User _user
	{
		[Token(Token = "0x6001089")]
		[Address(RVA = "0xA80BC8", Offset = "0xA80BC8", VA = "0xA80BC8", Slot = "4")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x600108A")]
		[Address(RVA = "0xA80BD0", Offset = "0xA80BD0", VA = "0xA80BD0", Slot = "5")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x6001084")]
	[Address(RVA = "0xA7F3EC", Offset = "0xA7F3EC", VA = "0xA7F3EC")]
	public PlatformOculus()
	{
	}

	[Token(Token = "0x600108B")]
	[Address(RVA = "0xA80BD8", Offset = "0xA80BD8", VA = "0xA80BD8", Slot = "11")]
	public bool CanCloudSave()
	{
		return default(bool);
	}

	[Token(Token = "0x600108C")]
	[Address(RVA = "0xA80BE0", Offset = "0xA80BE0", VA = "0xA80BE0", Slot = "12")]
	public void Initialise(Action callback)
	{
	}

	[Token(Token = "0x600108D")]
	[Address(RVA = "0xA80DCC", Offset = "0xA80DCC", VA = "0xA80DCC")]
	public bool IsInitialised()
	{
		return default(bool);
	}

	[Token(Token = "0x600108E")]
	[Address(RVA = "0xA80E54", Offset = "0xA80E54", VA = "0xA80E54")]
	private void EntitlementCheckCallback(Message msg)
	{
	}

	[Token(Token = "0x600108F")]
	[Address(RVA = "0xA80E7C", Offset = "0xA80E7C", VA = "0xA80E7C")]
	private void HandleEntitlementCheckResult(bool result)
	{
	}

	[Token(Token = "0x6001090")]
	[Address(RVA = "0xA80F04", Offset = "0xA80F04", VA = "0xA80F04")]
	private static IPlatform.User CreateUser(Oculus.Platform.Models.User oculusUser)
	{
		return null;
	}

	[Token(Token = "0x6001091")]
	[Address(RVA = "0xA80F80", Offset = "0xA80F80", VA = "0xA80F80", Slot = "14")]
	public void FetchLoggedInUser(Action callback)
	{
	}

	[Token(Token = "0x6001092")]
	[Address(RVA = "0xA81070", Offset = "0xA81070", VA = "0xA81070", Slot = "16")]
	public void GetSaveLocation(Action callback)
	{
	}

	[Token(Token = "0x6001093")]
	[Address(RVA = "0xA810A8", Offset = "0xA810A8", VA = "0xA810A8")]
	public string GetSaveGamePath()
	{
		return null;
	}
}
[Token(Token = "0x2000317")]
public class ViveportDRMCheck : MonoBehaviour
{
	[Token(Token = "0x2000318")]
	private class MyLicenseChecker : Viveport.Api.LicenseChecker
	{
		[Token(Token = "0x2000319")]
		[CompilerGenerated]
		private sealed class <SuccessAction>d__2 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400149F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40014A0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x170001E0")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60010A8")]
				[Address(RVA = "0xA82210", Offset = "0xA82210", VA = "0xA82210", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001E1")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60010AA")]
				[Address(RVA = "0xA82258", Offset = "0xA82258", VA = "0xA82258", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60010A5")]
			[Address(RVA = "0xA82188", Offset = "0xA82188", VA = "0xA82188")]
			[DebuggerHidden]
			public <SuccessAction>d__2(int <>1__state)
			{
			}

			[Token(Token = "0x60010A6")]
			[Address(RVA = "0xA821D8", Offset = "0xA821D8", VA = "0xA821D8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60010A7")]
			[Address(RVA = "0xA821DC", Offset = "0xA821DC", VA = "0xA821DC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60010A9")]
			[Address(RVA = "0xA82218", Offset = "0xA82218", VA = "0xA82218", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200031A")]
		[CompilerGenerated]
		private sealed class <FailAction>d__3 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40014A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40014A2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x170001E2")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60010AE")]
				[Address(RVA = "0xA822B0", Offset = "0xA822B0", VA = "0xA822B0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001E3")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60010B0")]
				[Address(RVA = "0xA822F8", Offset = "0xA822F8", VA = "0xA822F8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60010AB")]
			[Address(RVA = "0xA821B0", Offset = "0xA821B0", VA = "0xA821B0")]
			[DebuggerHidden]
			public <FailAction>d__3(int <>1__state)
			{
			}

			[Token(Token = "0x60010AC")]
			[Address(RVA = "0xA82260", Offset = "0xA82260", VA = "0xA82260", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60010AD")]
			[Address(RVA = "0xA82264", Offset = "0xA82264", VA = "0xA82264", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60010AF")]
			[Address(RVA = "0xA822B8", Offset = "0xA822B8", VA = "0xA822B8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x60010A0")]
		[Address(RVA = "0xA81E70", Offset = "0xA81E70", VA = "0xA81E70", Slot = "4")]
		public override void OnSuccess(long issueTime, long expirationTime, int latestVersion, bool updateRequired)
		{
		}

		[Token(Token = "0x60010A1")]
		[Address(RVA = "0xA82014", Offset = "0xA82014", VA = "0xA82014", Slot = "5")]
		public override void OnFailure(int errorCode, string errorMessage)
		{
		}

		[Token(Token = "0x60010A2")]
		[Address(RVA = "0xA81FB4", Offset = "0xA81FB4", VA = "0xA81FB4")]
		[IteratorStateMachine(typeof(<SuccessAction>d__2))]
		private IEnumerator SuccessAction()
		{
			return null;
		}

		[Token(Token = "0x60010A3")]
		[Address(RVA = "0xA82128", Offset = "0xA82128", VA = "0xA82128")]
		[IteratorStateMachine(typeof(<FailAction>d__3))]
		private IEnumerator FailAction()
		{
			return null;
		}

		[Token(Token = "0x60010A4")]
		[Address(RVA = "0xA81CEC", Offset = "0xA81CEC", VA = "0xA81CEC")]
		public MyLicenseChecker()
		{
		}
	}

	[Token(Token = "0x400149B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static string VIVEPORT_ID;

	[Token(Token = "0x400149C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static string VIVEPORT_KEY;

	[Token(Token = "0x400149D")]
	private const int SUCCESS = 0;

	[Token(Token = "0x400149E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static bool bInitComplete;

	[Token(Token = "0x6001098")]
	[Address(RVA = "0xA81930", Offset = "0xA81930", VA = "0xA81930")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001099")]
	[Address(RVA = "0xA819E0", Offset = "0xA819E0", VA = "0xA819E0")]
	private void Start()
	{
	}

	[Token(Token = "0x600109A")]
	[Address(RVA = "0xA81AEC", Offset = "0xA81AEC", VA = "0xA81AEC")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600109B")]
	[Address(RVA = "0xA81B8C", Offset = "0xA81B8C", VA = "0xA81B8C")]
	private static void InitStatusHandler(int nResult)
	{
	}

	[Token(Token = "0x600109C")]
	[Address(RVA = "0xA81CF4", Offset = "0xA81CF4", VA = "0xA81CF4")]
	private static void ShutdownHandler(int nResult)
	{
	}

	[Token(Token = "0x600109D")]
	[Address(RVA = "0xA81D04", Offset = "0xA81D04", VA = "0xA81D04")]
	private void CheckInitStatus()
	{
	}

	[Token(Token = "0x600109E")]
	[Address(RVA = "0xA81DD8", Offset = "0xA81DD8", VA = "0xA81DD8")]
	public ViveportDRMCheck()
	{
	}
}
[Token(Token = "0x200031B")]
public class PlayerBody : MonoBehaviour
{
	[Token(Token = "0x40014A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform groundRoot;

	[Token(Token = "0x40014A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform headTransform;

	[Token(Token = "0x40014A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float torsoHeight;

	[Token(Token = "0x40014A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float headRadius;

	[Token(Token = "0x40014A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private CapsuleCollider bodyCollider;

	[Token(Token = "0x40014A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Transform xForm;

	[Token(Token = "0x40014A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Vector3 center;

	[Token(Token = "0x60010B1")]
	[Address(RVA = "0xA82300", Offset = "0xA82300", VA = "0xA82300")]
	private void Awake()
	{
	}

	[Token(Token = "0x60010B2")]
	[Address(RVA = "0xA823B4", Offset = "0xA823B4", VA = "0xA823B4")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60010B3")]
	[Address(RVA = "0xA8244C", Offset = "0xA8244C", VA = "0xA8244C")]
	public PlayerBody()
	{
	}
}
[Token(Token = "0x200031C")]
public class PlayerLight : MonoBehaviour
{
	[Token(Token = "0x40014AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int uniqueIndex;

	[Token(Token = "0x40014AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Color lightColor;

	[Token(Token = "0x40014AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float intensity;

	[Token(Token = "0x40014AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool lightEnabled;

	[NonSerialized]
	[Token(Token = "0x40014AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform xForm;

	[Token(Token = "0x60010B4")]
	[Address(RVA = "0xA82460", Offset = "0xA82460", VA = "0xA82460")]
	private void Awake()
	{
	}

	[Token(Token = "0x60010B5")]
	[Address(RVA = "0xA8247C", Offset = "0xA8247C", VA = "0xA8247C")]
	public PlayerLight()
	{
	}
}
[Token(Token = "0x200031D")]
public class PlayerLightController : MonoBehaviour
{
	[Token(Token = "0x40014AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Light playerLight;

	[Token(Token = "0x40014B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Transform xForm;

	[Token(Token = "0x40014B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int activePlayerLightIndex;

	[Token(Token = "0x40014B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private PlayerLight activePlayerLight;

	[Token(Token = "0x60010B6")]
	[Address(RVA = "0xA824A4", Offset = "0xA824A4", VA = "0xA824A4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60010B7")]
	[Address(RVA = "0xA82504", Offset = "0xA82504", VA = "0xA82504")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60010B8")]
	[Address(RVA = "0xA825F0", Offset = "0xA825F0", VA = "0xA825F0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60010B9")]
	[Address(RVA = "0xA826DC", Offset = "0xA826DC", VA = "0xA826DC")]
	private void UpdateLight()
	{
	}

	[Token(Token = "0x60010BA")]
	[Address(RVA = "0xA82848", Offset = "0xA82848", VA = "0xA82848")]
	public PlayerLightController()
	{
	}
}
[Serializable]
[Token(Token = "0x200031E")]
public class PlayerLightEntry
{
	[Token(Token = "0x40014B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int uniqueIndex;

	[Token(Token = "0x40014B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Vector3 direction;

	[Token(Token = "0x40014B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Color color;

	[Token(Token = "0x40014B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float intensity;

	[Token(Token = "0x60010BB")]
	[Address(RVA = "0xA82858", Offset = "0xA82858", VA = "0xA82858")]
	public PlayerLightEntry()
	{
	}
}
[Token(Token = "0x200031F")]
[CreateAssetMenu(fileName = "PlayerLightList", menuName = "Settings/PlayerLightList")]
public class PlayerLightList : ScriptableObject
{
	[Token(Token = "0x40014B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PlayerLightEntry[] lightList;

	[Token(Token = "0x60010BC")]
	[Address(RVA = "0xA82860", Offset = "0xA82860", VA = "0xA82860")]
	public PlayerLightList()
	{
	}
}
[Token(Token = "0x2000320")]
public class RigController : MonoBehaviour
{
	[Token(Token = "0x2000321")]
	[CompilerGenerated]
	private sealed class <RepostionHandsBehindPlayersHead>d__21 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40014BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40014C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40014C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RigController <>4__this;

		[Token(Token = "0x170001E7")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60010CD")]
			[Address(RVA = "0xA8321C", Offset = "0xA8321C", VA = "0xA8321C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001E8")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60010CF")]
			[Address(RVA = "0xA83264", Offset = "0xA83264", VA = "0xA83264", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60010CA")]
		[Address(RVA = "0xA830B8", Offset = "0xA830B8", VA = "0xA830B8")]
		[DebuggerHidden]
		public <RepostionHandsBehindPlayersHead>d__21(int <>1__state)
		{
		}

		[Token(Token = "0x60010CB")]
		[Address(RVA = "0xA830E8", Offset = "0xA830E8", VA = "0xA830E8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60010CC")]
		[Address(RVA = "0xA830EC", Offset = "0xA830EC", VA = "0xA830EC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60010CE")]
		[Address(RVA = "0xA83224", Offset = "0xA83224", VA = "0xA83224", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40014B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static RigController instance;

	[Token(Token = "0x40014B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject leftHandController;

	[Token(Token = "0x40014BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject rightHandController;

	[Token(Token = "0x40014BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public HandController lhController;

	[Token(Token = "0x40014BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public HandController rhController;

	[Token(Token = "0x40014BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static HandController leftController;

	[Token(Token = "0x40014BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static HandController rightController;

	[Token(Token = "0x170001E4")]
	public bool dualWield
	{
		[Token(Token = "0x60010BF")]
		[Address(RVA = "0xA82978", Offset = "0xA82978", VA = "0xA82978")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170001E5")]
	public bool weaponEquipped
	{
		[Token(Token = "0x60010C0")]
		[Address(RVA = "0xA82A44", Offset = "0xA82A44", VA = "0xA82A44")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170001E6")]
	public static bool PlayerCupping
	{
		[Token(Token = "0x60010C1")]
		[Address(RVA = "0xA82B0C", Offset = "0xA82B0C", VA = "0xA82B0C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60010BD")]
	[Address(RVA = "0xA82868", Offset = "0xA82868", VA = "0xA82868")]
	public void LoadGloves(string index, string skin)
	{
	}

	[Token(Token = "0x60010BE")]
	[Address(RVA = "0xA828F4", Offset = "0xA828F4", VA = "0xA828F4")]
	public void SetGloves(GameObject left, GameObject right)
	{
	}

	[Token(Token = "0x60010C2")]
	[Address(RVA = "0xA82B80", Offset = "0xA82B80", VA = "0xA82B80")]
	private void Awake()
	{
	}

	[Token(Token = "0x60010C3")]
	[Address(RVA = "0xA82BDC", Offset = "0xA82BDC", VA = "0xA82BDC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60010C4")]
	[Address(RVA = "0xA82D4C", Offset = "0xA82D4C", VA = "0xA82D4C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60010C5")]
	[Address(RVA = "0xA82EBC", Offset = "0xA82EBC", VA = "0xA82EBC")]
	public void DestroyHandItems()
	{
	}

	[Token(Token = "0x60010C6")]
	[Address(RVA = "0xA83028", Offset = "0xA83028", VA = "0xA83028")]
	private void FocusLost()
	{
	}

	[Token(Token = "0x60010C7")]
	[Address(RVA = "0xA830B0", Offset = "0xA830B0", VA = "0xA830B0")]
	private void FocusAcquired()
	{
	}

	[Token(Token = "0x60010C8")]
	[Address(RVA = "0xA83048", Offset = "0xA83048", VA = "0xA83048")]
	[IteratorStateMachine(typeof(<RepostionHandsBehindPlayersHead>d__21))]
	private IEnumerator RepostionHandsBehindPlayersHead()
	{
		return null;
	}

	[Token(Token = "0x60010C9")]
	[Address(RVA = "0xA830E0", Offset = "0xA830E0", VA = "0xA830E0")]
	public RigController()
	{
	}
}
[Token(Token = "0x2000322")]
[CreateAssetMenu(fileName = "SceneDataInfo", menuName = "Settings/SceneDataInfo")]
public class SceneDataInfo : ScriptableObject
{
	[Token(Token = "0x40014C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string leaderboardAPIName;

	[Token(Token = "0x40014C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string sceneName;

	[Token(Token = "0x40014C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int sceneIndex;

	[Token(Token = "0x40014C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public LoadSceneParameters parameters;

	[Token(Token = "0x40014C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public LevelEnvironmentSettings environmentSettings;

	[Token(Token = "0x40014C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public LevelMusicSettings musicSettings;

	[Token(Token = "0x40014C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public LevelDescriptionInfo descriptionInfo;

	[Token(Token = "0x60010D0")]
	[Address(RVA = "0xA8326C", Offset = "0xA8326C", VA = "0xA8326C")]
	public SceneDataInfo()
	{
	}
}
[Token(Token = "0x2000323")]
[CreateAssetMenu(fileName = "SceneDataList", menuName = "Settings/SceneDataList")]
public class SceneDataList : ScriptableObject
{
	[Token(Token = "0x40014C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static SceneDataList _instance;

	[Token(Token = "0x40014CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SceneDataInfo homeSceneData;

	[Token(Token = "0x40014CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public SceneDataInfo tutorialSceneData;

	[Token(Token = "0x40014CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public SceneDataInfo firingRangeSceneData;

	[Token(Token = "0x40014CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public SceneDataInfo[] sceneData;

	[Token(Token = "0x170001E9")]
	public static SceneDataList instance
	{
		[Token(Token = "0x60010D1")]
		[Address(RVA = "0xA8327C", Offset = "0xA8327C", VA = "0xA8327C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60010D2")]
	[Address(RVA = "0xA83348", Offset = "0xA83348", VA = "0xA83348")]
	public SceneDataList()
	{
	}
}
[Token(Token = "0x2000324")]
public class SceneLoadManager : MonoBehaviour
{
	[Token(Token = "0x2000326")]
	[CompilerGenerated]
	private sealed class <StageLoadSequence>d__23 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40014DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40014DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40014DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SceneLoadManager <>4__this;

		[Token(Token = "0x40014E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public SceneDataInfo sceneData;

		[Token(Token = "0x40014E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool loadingHome;

		[Token(Token = "0x40014E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private AsyncOperation <loaderOperation>5__2;

		[Token(Token = "0x40014E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private AsyncOperation <unloaderOperation>5__3;

		[Token(Token = "0x170001EA")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60010EA")]
			[Address(RVA = "0xA84420", Offset = "0xA84420", VA = "0xA84420", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001EB")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60010EC")]
			[Address(RVA = "0xA84468", Offset = "0xA84468", VA = "0xA84468", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60010E7")]
		[Address(RVA = "0xA83E28", Offset = "0xA83E28", VA = "0xA83E28")]
		[DebuggerHidden]
		public <StageLoadSequence>d__23(int <>1__state)
		{
		}

		[Token(Token = "0x60010E8")]
		[Address(RVA = "0xA83FD0", Offset = "0xA83FD0", VA = "0xA83FD0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60010E9")]
		[Address(RVA = "0xA83FD4", Offset = "0xA83FD4", VA = "0xA83FD4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60010EB")]
		[Address(RVA = "0xA84428", Offset = "0xA84428", VA = "0xA84428", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40014CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static SceneLoadManager instance;

	[Token(Token = "0x40014CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static Action onSceneLoaded;

	[Token(Token = "0x40014D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static Action onSceneLoading;

	[Token(Token = "0x40014D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static Action onLevelLoaded;

	[Token(Token = "0x40014D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool loading;

	[NonSerialized]
	[Token(Token = "0x40014D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public SceneDataInfo homeSceneDataInfo;

	[NonSerialized]
	[Token(Token = "0x40014D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public SceneDataInfo tutorialSceneDataInfo;

	[NonSerialized]
	[Token(Token = "0x40014D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public SceneDataInfo firingRangeSceneDataInfo;

	[Token(Token = "0x40014D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool homeLoaded;

	[Token(Token = "0x40014D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	public bool tutorialLoaded;

	[Token(Token = "0x40014D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
	public bool firingRangeLoaded;

	[NonSerialized]
	[Token(Token = "0x40014D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public SceneDataInfo currentSceneDataInfo;

	[Token(Token = "0x40014DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public int currentLevelDataIndex;

	[Token(Token = "0x60010D3")]
	[Address(RVA = "0xA83350", Offset = "0xA83350", VA = "0xA83350")]
	private void Awake()
	{
	}

	[Token(Token = "0x60010D4")]
	[Address(RVA = "0xA8339C", Offset = "0xA8339C", VA = "0xA8339C")]
	private void Start()
	{
	}

	[Token(Token = "0x60010D5")]
	[Address(RVA = "0xA83700", Offset = "0xA83700", VA = "0xA83700")]
	public void LoadSceneByName(string name)
	{
	}

	[Token(Token = "0x60010D6")]
	[Address(RVA = "0xA83884", Offset = "0xA83884", VA = "0xA83884")]
	public void LoadNextScene(bool fade = true)
	{
	}

	[Token(Token = "0x60010D7")]
	[Address(RVA = "0xA83A50", Offset = "0xA83A50", VA = "0xA83A50")]
	public void LoadCurrentScene(bool fade = true)
	{
	}

	[Token(Token = "0x60010D8")]
	[Address(RVA = "0xA83BC4", Offset = "0xA83BC4", VA = "0xA83BC4")]
	private void ApplyFog(LevelEnvironmentSettings _data)
	{
	}

	[Token(Token = "0x60010D9")]
	[Address(RVA = "0xA833E8", Offset = "0xA833E8", VA = "0xA833E8")]
	public void LoadHomeScene(bool immediate = false)
	{
	}

	[Token(Token = "0x60010DA")]
	[Address(RVA = "0xA83C18", Offset = "0xA83C18", VA = "0xA83C18")]
	public void LoadTutorial()
	{
	}

	[Token(Token = "0x60010DB")]
	[Address(RVA = "0xA83CE4", Offset = "0xA83CE4", VA = "0xA83CE4")]
	public void LoadFiringRange()
	{
	}

	[Token(Token = "0x60010DC")]
	[Address(RVA = "0xA83DB0", Offset = "0xA83DB0", VA = "0xA83DB0")]
	private int GetSceneIndexByName(string name)
	{
		return default(int);
	}

	[Token(Token = "0x60010DD")]
	[Address(RVA = "0xA839D0", Offset = "0xA839D0", VA = "0xA839D0")]
	[IteratorStateMachine(typeof(<StageLoadSequence>d__23))]
	private IEnumerator StageLoadSequence(SceneDataInfo sceneData, bool loadingHome = false)
	{
		return null;
	}

	[Token(Token = "0x60010DE")]
	[Address(RVA = "0xA83E50", Offset = "0xA83E50", VA = "0xA83E50")]
	public SceneLoadManager()
	{
	}
}
[Token(Token = "0x2000327")]
public class ServoRotator : MonoBehaviour
{
	[Token(Token = "0x2000328")]
	[CompilerGenerated]
	private sealed class <MoveRoutine>d__15 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40014F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40014F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40014F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ServoRotator <>4__this;

		[Token(Token = "0x40014F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <lerp>5__2;

		[Token(Token = "0x40014F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <time>5__3;

		[Token(Token = "0x170001EC")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60010F5")]
			[Address(RVA = "0xA847EC", Offset = "0xA847EC", VA = "0xA847EC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001ED")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60010F7")]
			[Address(RVA = "0xA84834", Offset = "0xA84834", VA = "0xA84834", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60010F2")]
		[Address(RVA = "0xA845F8", Offset = "0xA845F8", VA = "0xA845F8")]
		[DebuggerHidden]
		public <MoveRoutine>d__15(int <>1__state)
		{
		}

		[Token(Token = "0x60010F3")]
		[Address(RVA = "0xA84638", Offset = "0xA84638", VA = "0xA84638", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60010F4")]
		[Address(RVA = "0xA8463C", Offset = "0xA8463C", VA = "0xA8463C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60010F6")]
		[Address(RVA = "0xA847F4", Offset = "0xA847F4", VA = "0xA847F4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40014E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationCurve moveCurve;

	[Token(Token = "0x40014E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AnimationCurve soundCurve;

	[Token(Token = "0x40014E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float moveDuration;

	[Token(Token = "0x40014E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public Vector3 startAngle;

	[Token(Token = "0x40014E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Vector3 endAngle;

	[Token(Token = "0x40014E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private AudioSource sound;

	[Token(Token = "0x40014EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Transform xForm;

	[Token(Token = "0x40014EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float soundVolume;

	[Token(Token = "0x40014EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private Vector3 targetStart;

	[Token(Token = "0x40014ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Vector3 targetEnd;

	[Token(Token = "0x40014EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private bool atStart;

	[Token(Token = "0x40014EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x75")]
	private bool moving;

	[Token(Token = "0x60010ED")]
	[Address(RVA = "0xA84470", Offset = "0xA84470", VA = "0xA84470")]
	private void Awake()
	{
	}

	[Token(Token = "0x60010EE")]
	[Address(RVA = "0xA844E4", Offset = "0xA844E4", VA = "0xA844E4")]
	public void MoveToStart()
	{
	}

	[Token(Token = "0x60010EF")]
	[Address(RVA = "0xA845A4", Offset = "0xA845A4", VA = "0xA845A4")]
	public void MoveToEnd()
	{
	}

	[Token(Token = "0x60010F0")]
	[Address(RVA = "0xA8453C", Offset = "0xA8453C", VA = "0xA8453C")]
	[IteratorStateMachine(typeof(<MoveRoutine>d__15))]
	private IEnumerator MoveRoutine()
	{
		return null;
	}

	[Token(Token = "0x60010F1")]
	[Address(RVA = "0xA84620", Offset = "0xA84620", VA = "0xA84620")]
	public ServoRotator()
	{
	}
}
[Serializable]
[Token(Token = "0x2000329")]
public class BlobInfo
{
	[Token(Token = "0x40014F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float maxDistance;

	[Token(Token = "0x40014F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float surfOffset;

	[Token(Token = "0x40014F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform targetXForm;

	[Token(Token = "0x40014F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform blobXForm;

	[Token(Token = "0x40014F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public MeshRenderer mesh;

	[Token(Token = "0x40014FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector3 initscale;

	[Token(Token = "0x40014FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public bool hiddden;

	[Token(Token = "0x60010F8")]
	[Address(RVA = "0xA8483C", Offset = "0xA8483C", VA = "0xA8483C")]
	public BlobInfo()
	{
	}
}
[Token(Token = "0x200032A")]
public class ShadowBlobController : MonoBehaviour
{
	[Token(Token = "0x40014FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LayerMask projectionMask;

	[Token(Token = "0x40014FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public BlobInfo[] blobs;

	[Token(Token = "0x40014FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private SkinnedMeshRenderer[] bodyRenderers;

	[Token(Token = "0x40014FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private RaycastHit hit;

	[Token(Token = "0x4001500")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private Vector3 V3Down;

	[Token(Token = "0x4001501")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Vector3 V3Up;

	[Token(Token = "0x60010F9")]
	[Address(RVA = "0xA84858", Offset = "0xA84858", VA = "0xA84858")]
	private void Awake()
	{
	}

	[Token(Token = "0x60010FA")]
	[Address(RVA = "0xA84A50", Offset = "0xA84A50", VA = "0xA84A50")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60010FB")]
	[Address(RVA = "0xA84B4C", Offset = "0xA84B4C", VA = "0xA84B4C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60010FC")]
	[Address(RVA = "0xA8498C", Offset = "0xA8498C", VA = "0xA8498C")]
	private void Togglestate()
	{
	}

	[Token(Token = "0x60010FD")]
	[Address(RVA = "0xA84C48", Offset = "0xA84C48", VA = "0xA84C48")]
	private void Update()
	{
	}

	[Token(Token = "0x60010FE")]
	[Address(RVA = "0xA84E70", Offset = "0xA84E70", VA = "0xA84E70")]
	public ShadowBlobController()
	{
	}
}
[Token(Token = "0x200032B")]
public class HeartPickup : MonoBehaviour
{
	[Token(Token = "0x200032C")]
	[CompilerGenerated]
	private sealed class <DelayHealth>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001507")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001508")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001509")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HeartPickup <>4__this;

		[Token(Token = "0x170001EE")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001106")]
			[Address(RVA = "0xA852A4", Offset = "0xA852A4", VA = "0xA852A4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001EF")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001108")]
			[Address(RVA = "0xA852EC", Offset = "0xA852EC", VA = "0xA852EC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001103")]
		[Address(RVA = "0xA8510C", Offset = "0xA8510C", VA = "0xA8510C")]
		[DebuggerHidden]
		public <DelayHealth>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x6001104")]
		[Address(RVA = "0xA85144", Offset = "0xA85144", VA = "0xA85144", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001105")]
		[Address(RVA = "0xA85148", Offset = "0xA85148", VA = "0xA85148", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001107")]
		[Address(RVA = "0xA852AC", Offset = "0xA852AC", VA = "0xA852AC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001502")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float delay;

	[Token(Token = "0x4001503")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MeshRenderer mesh;

	[Token(Token = "0x4001504")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ParticleSystem fx;

	[Token(Token = "0x4001505")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ParticleSystem burst_fx;

	[Token(Token = "0x4001506")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private GenericTrigger trigger;

	[Token(Token = "0x60010FF")]
	[Address(RVA = "0xA84E78", Offset = "0xA84E78", VA = "0xA84E78")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001100")]
	[Address(RVA = "0xA84EC8", Offset = "0xA84EC8", VA = "0xA84EC8")]
	public void AddHealth()
	{
	}

	[Token(Token = "0x6001101")]
	[Address(RVA = "0xA850A4", Offset = "0xA850A4", VA = "0xA850A4")]
	[IteratorStateMachine(typeof(<DelayHealth>d__7))]
	private IEnumerator DelayHealth()
	{
		return null;
	}

	[Token(Token = "0x6001102")]
	[Address(RVA = "0xA85134", Offset = "0xA85134", VA = "0xA85134")]
	public HeartPickup()
	{
	}
}
[Token(Token = "0x200032D")]
public class SlidingDoor : MonoBehaviour
{
	[Token(Token = "0x200032E")]
	[CompilerGenerated]
	private sealed class <DoorRoutine>d__12 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001514")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001515")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001516")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SlidingDoor <>4__this;

		[Token(Token = "0x4001517")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool _open;

		[Token(Token = "0x4001518")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <time>5__2;

		[Token(Token = "0x4001519")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 <start>5__3;

		[Token(Token = "0x400151A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Vector3 <destination>5__4;

		[Token(Token = "0x170001F0")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001110")]
			[Address(RVA = "0xA856F0", Offset = "0xA856F0", VA = "0xA856F0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001F1")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001112")]
			[Address(RVA = "0xA85738", Offset = "0xA85738", VA = "0xA85738", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600110D")]
		[Address(RVA = "0xA853D8", Offset = "0xA853D8", VA = "0xA853D8")]
		[DebuggerHidden]
		public <DoorRoutine>d__12(int <>1__state)
		{
		}

		[Token(Token = "0x600110E")]
		[Address(RVA = "0xA85410", Offset = "0xA85410", VA = "0xA85410", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600110F")]
		[Address(RVA = "0xA85414", Offset = "0xA85414", VA = "0xA85414", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001111")]
		[Address(RVA = "0xA856F8", Offset = "0xA856F8", VA = "0xA856F8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400150A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Events")]
	public UnityEvent onOpen;

	[Token(Token = "0x400150B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEvent onClosed;

	[Token(Token = "0x400150C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform doorRoot;

	[Token(Token = "0x400150D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AnimationCurve moveCurve;

	[Token(Token = "0x400150E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float moveDuration;

	[Token(Token = "0x400150F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AudioSource openSound;

	[Token(Token = "0x4001510")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public AudioSource closeSound;

	[Token(Token = "0x4001511")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Vector3 openOffset;

	[Token(Token = "0x4001512")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public SECTR_Portal linkedPortal;

	[Token(Token = "0x4001513")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public bool open;

	[Token(Token = "0x6001109")]
	[Address(RVA = "0xA852F4", Offset = "0xA852F4", VA = "0xA852F4")]
	public void OpenDoor()
	{
	}

	[Token(Token = "0x600110A")]
	[Address(RVA = "0xA853A4", Offset = "0xA853A4", VA = "0xA853A4")]
	public void CloseDoor()
	{
	}

	[Token(Token = "0x600110B")]
	[Address(RVA = "0xA85328", Offset = "0xA85328", VA = "0xA85328")]
	[IteratorStateMachine(typeof(<DoorRoutine>d__12))]
	private IEnumerator DoorRoutine(bool _open)
	{
		return null;
	}

	[Token(Token = "0x600110C")]
	[Address(RVA = "0xA85400", Offset = "0xA85400", VA = "0xA85400")]
	public SlidingDoor()
	{
	}
}
[Token(Token = "0x200032F")]
public class SpawnGroup : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000330")]
	public struct DeathEvent
	{
		[Token(Token = "0x400152E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int count;

		[Token(Token = "0x400152F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public UnityEvent onDeath;
	}

	[Token(Token = "0x2000331")]
	[CompilerGenerated]
	private sealed class <DelayAnnouncement>d__31 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001530")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001531")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001532")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 pos;

		[Token(Token = "0x170001F2")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001126")]
			[Address(RVA = "0xA86AE8", Offset = "0xA86AE8", VA = "0xA86AE8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001F3")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001128")]
			[Address(RVA = "0xA86B30", Offset = "0xA86B30", VA = "0xA86B30", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001123")]
		[Address(RVA = "0xA86918", Offset = "0xA86918", VA = "0xA86918")]
		[DebuggerHidden]
		public <DelayAnnouncement>d__31(int <>1__state)
		{
		}

		[Token(Token = "0x6001124")]
		[Address(RVA = "0xA86A04", Offset = "0xA86A04", VA = "0xA86A04", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001125")]
		[Address(RVA = "0xA86A08", Offset = "0xA86A08", VA = "0xA86A08", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001127")]
		[Address(RVA = "0xA86AF0", Offset = "0xA86AF0", VA = "0xA86AF0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400151B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Events")]
	public UnityEvent onStart;

	[Token(Token = "0x400151C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEvent onEnd;

	[Token(Token = "0x400151D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEvent onAlert;

	[Token(Token = "0x400151E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public DeathEvent[] deathEvents;

	[Token(Token = "0x400151F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public SpawnPoint[] spawnPoints;

	[Token(Token = "0x4001520")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AIPathPoint[] pathPoints;

	[NonSerialized]
	[Token(Token = "0x4001521")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public int totalSpawns;

	[Token(Token = "0x4001522")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public bool annouceOnBegin;

	[Token(Token = "0x4001523")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
	public bool spawnAlerted;

	[Token(Token = "0x4001524")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private int deaths;

	[Token(Token = "0x4001525")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public bool alerted;

	[Token(Token = "0x4001526")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
	private bool cleared;

	[Token(Token = "0x4001527")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public List<SpawnInfo> spawns;

	[Token(Token = "0x4001528")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private int totalEnemies;

	[Token(Token = "0x4001529")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private float timeBegan;

	[Token(Token = "0x400152A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float timeFinished;

	[Token(Token = "0x400152B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public bool started;

	[Token(Token = "0x400152C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6D")]
	private bool ended;

	[Token(Token = "0x400152D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private int numberOfAttackers;

	[Token(Token = "0x6001113")]
	[Address(RVA = "0xA85740", Offset = "0xA85740", VA = "0xA85740")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001114")]
	[Address(RVA = "0xA85B68", Offset = "0xA85B68", VA = "0xA85B68")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001115")]
	[Address(RVA = "0xA85D54", Offset = "0xA85D54", VA = "0xA85D54")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6001116")]
	[Address(RVA = "0xA85F18", Offset = "0xA85F18", VA = "0xA85F18")]
	private void CheckNearStunned(bool state)
	{
	}

	[Token(Token = "0x6001117")]
	[Address(RVA = "0xA86190", Offset = "0xA86190", VA = "0xA86190")]
	private void CoverPointChanged()
	{
	}

	[Token(Token = "0x6001118")]
	[Address(RVA = "0xA86264", Offset = "0xA86264", VA = "0xA86264")]
	public void UpdateState()
	{
	}

	[Token(Token = "0x6001119")]
	[Address(RVA = "0xA863CC", Offset = "0xA863CC", VA = "0xA863CC")]
	public void AiAlert()
	{
	}

	[Token(Token = "0x600111A")]
	[Address(RVA = "0xA86408", Offset = "0xA86408", VA = "0xA86408")]
	private void CheckVisibilityBark()
	{
	}

	[Token(Token = "0x600111B")]
	[Address(RVA = "0xA8652C", Offset = "0xA8652C", VA = "0xA8652C")]
	public void Clear()
	{
	}

	[Token(Token = "0x600111C")]
	[Address(RVA = "0xA86288", Offset = "0xA86288", VA = "0xA86288")]
	private void EvaluateDeathEvents()
	{
	}

	[Token(Token = "0x600111D")]
	[Address(RVA = "0xA86320", Offset = "0xA86320", VA = "0xA86320")]
	private bool EvaluateEnd()
	{
		return default(bool);
	}

	[Token(Token = "0x600111E")]
	[Address(RVA = "0xA86698", Offset = "0xA86698", VA = "0xA86698")]
	public void Begin()
	{
	}

	[Token(Token = "0x600111F")]
	[Address(RVA = "0xA86894", Offset = "0xA86894", VA = "0xA86894")]
	[IteratorStateMachine(typeof(<DelayAnnouncement>d__31))]
	private IEnumerator DelayAnnouncement(Vector3 pos)
	{
		return null;
	}

	[Token(Token = "0x6001120")]
	[Address(RVA = "0xA86940", Offset = "0xA86940", VA = "0xA86940")]
	public void RemoveAttacker()
	{
	}

	[Token(Token = "0x6001121")]
	[Address(RVA = "0xA86950", Offset = "0xA86950", VA = "0xA86950")]
	public bool FirePermission()
	{
		return default(bool);
	}

	[Token(Token = "0x6001122")]
	[Address(RVA = "0xA86980", Offset = "0xA86980", VA = "0xA86980")]
	public SpawnGroup()
	{
	}
}
[Token(Token = "0x2000332")]
public class SpawnInfo
{
	[Token(Token = "0x4001533")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int index;

	[Token(Token = "0x4001534")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Ragdoll ragdoll;

	[Token(Token = "0x4001535")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public SpawnPoint spawnPoint;

	[Token(Token = "0x4001536")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AIController ai;

	[Token(Token = "0x4001537")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool active;

	[Token(Token = "0x6001129")]
	[Address(RVA = "0xA86B38", Offset = "0xA86B38", VA = "0xA86B38")]
	public SpawnInfo()
	{
	}
}
[Token(Token = "0x2000333")]
public class SpawnManager : MonoBehaviour
{
	[Token(Token = "0x4001538")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static SpawnManager instance;

	[Token(Token = "0x4001539")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] spawnObjects;

	[Token(Token = "0x400153A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int numInstancesOfEach;

	[Token(Token = "0x400153B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private int maxPoolSize;

	[Token(Token = "0x400153C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private SpawnInfo[] spawnPool;

	[Token(Token = "0x400153D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform spawnParent;

	[Token(Token = "0x400153E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int currentIndex;

	[Token(Token = "0x600112A")]
	[Address(RVA = "0xA86B40", Offset = "0xA86B40", VA = "0xA86B40")]
	private void Awake()
	{
	}

	[Token(Token = "0x600112B")]
	[Address(RVA = "0xA86EEC", Offset = "0xA86EEC", VA = "0xA86EEC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600112C")]
	[Address(RVA = "0xA8707C", Offset = "0xA8707C", VA = "0xA8707C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600112D")]
	[Address(RVA = "0xA8720C", Offset = "0xA8720C", VA = "0xA8720C")]
	private void Clear()
	{
	}

	[Token(Token = "0x600112E")]
	[Address(RVA = "0xA86BB4", Offset = "0xA86BB4", VA = "0xA86BB4")]
	private void CreatePool()
	{
	}

	[Token(Token = "0x600112F")]
	[Address(RVA = "0xA872A0", Offset = "0xA872A0", VA = "0xA872A0")]
	private Ragdoll GetAvailableRagdoll()
	{
		return null;
	}

	[Token(Token = "0x6001130")]
	[Address(RVA = "0xA8733C", Offset = "0xA8733C", VA = "0xA8733C")]
	public SpawnInfo SpawnObject(SpawnPoint _spawnPoint)
	{
		return null;
	}

	[Token(Token = "0x6001131")]
	[Address(RVA = "0xA874B4", Offset = "0xA874B4", VA = "0xA874B4")]
	public SpawnManager()
	{
	}
}
[Token(Token = "0x2000334")]
public enum SpawnPointType
{
	[Token(Token = "0x4001540")]
	Grunt,
	[Token(Token = "0x4001541")]
	Captain,
	[Token(Token = "0x4001542")]
	SubBoss,
	[Token(Token = "0x4001543")]
	Boss
}
[Token(Token = "0x2000335")]
[ExecuteInEditMode]
public class SpawnPoint : MonoBehaviour
{
	[Token(Token = "0x2000336")]
	[CompilerGenerated]
	private sealed class <DelaySpawn>d__24 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001555")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001556")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001557")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SpawnPoint <>4__this;

		[Token(Token = "0x170001F4")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600113E")]
			[Address(RVA = "0xA87C30", Offset = "0xA87C30", VA = "0xA87C30", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001F5")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001140")]
			[Address(RVA = "0xA87C78", Offset = "0xA87C78", VA = "0xA87C78", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600113B")]
		[Address(RVA = "0xA87B90", Offset = "0xA87B90", VA = "0xA87B90")]
		[DebuggerHidden]
		public <DelaySpawn>d__24(int <>1__state)
		{
		}

		[Token(Token = "0x600113C")]
		[Address(RVA = "0xA87BD0", Offset = "0xA87BD0", VA = "0xA87BD0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600113D")]
		[Address(RVA = "0xA87BD4", Offset = "0xA87BD4", VA = "0xA87BD4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600113F")]
		[Address(RVA = "0xA87C38", Offset = "0xA87C38", VA = "0xA87C38", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001544")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SpawnPointType spawnType;

	[Token(Token = "0x4001545")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform xForm;

	[Token(Token = "0x4001546")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Header("Events")]
	public UnityEvent onSpawn;

	[Token(Token = "0x4001547")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEvent onDeath;

	[Token(Token = "0x4001548")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int numSpawns;

	[Token(Token = "0x4001549")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float spawnDelay;

	[Token(Token = "0x400154A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool spawned;

	[Token(Token = "0x400154B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public int spawnCount;

	[Token(Token = "0x400154C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public AIState spawnState;

	[Token(Token = "0x400154D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public SpawnGroup myGroup;

	[Token(Token = "0x400154E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private WaitForSeconds spawnWait;

	[Token(Token = "0x400154F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public AIPathPoint initalPoint;

	[Token(Token = "0x4001550")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public AIPathPoint[] patrolPoints;

	[Token(Token = "0x4001551")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public AIPathPoint[] pathPoints;

	[Token(Token = "0x4001552")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public AIPathPoint[] navPoints;

	[Token(Token = "0x4001553")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public AIPathPoint[] coverPoints;

	[Token(Token = "0x4001554")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public SpawnInfo currentSpawn;

	[Token(Token = "0x6001132")]
	[Address(RVA = "0xA874C8", Offset = "0xA874C8", VA = "0xA874C8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001133")]
	[Address(RVA = "0xA85884", Offset = "0xA85884", VA = "0xA85884")]
	public void CalculatePathPoints(AIPathPoint[] pathPoints)
	{
	}

	[Token(Token = "0x6001134")]
	[Address(RVA = "0xA87548", Offset = "0xA87548", VA = "0xA87548")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001135")]
	[Address(RVA = "0xA875E4", Offset = "0xA875E4", VA = "0xA875E4")]
	private void SpawnDied(SpawnInfo info)
	{
	}

	[Token(Token = "0x6001136")]
	[Address(RVA = "0xA87724", Offset = "0xA87724", VA = "0xA87724")]
	private void SpawnAlert(SpawnInfo si)
	{
	}

	[Token(Token = "0x6001137")]
	[Address(RVA = "0xA87814", Offset = "0xA87814", VA = "0xA87814")]
	private void SetupSpawn()
	{
	}

	[Token(Token = "0x6001138")]
	[Address(RVA = "0xA86854", Offset = "0xA86854", VA = "0xA86854")]
	public SpawnInfo Spawn()
	{
		return null;
	}

	[Token(Token = "0x6001139")]
	[Address(RVA = "0xA87B28", Offset = "0xA87B28", VA = "0xA87B28")]
	[IteratorStateMachine(typeof(<DelaySpawn>d__24))]
	private IEnumerator DelaySpawn()
	{
		return null;
	}

	[Token(Token = "0x600113A")]
	[Address(RVA = "0xA87BB8", Offset = "0xA87BB8", VA = "0xA87BB8")]
	public SpawnPoint()
	{
	}
}
[Token(Token = "0x2000337")]
[RequireComponent(typeof(MB3_TextureBaker))]
public class TextureBakerRefresher : MonoBehaviour
{
	[Token(Token = "0x4001558")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string scene;

	[Token(Token = "0x4001559")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MeshRenderer template;

	[Token(Token = "0x400155A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform parent;

	[Token(Token = "0x6001141")]
	[Address(RVA = "0xA87C80", Offset = "0xA87C80", VA = "0xA87C80")]
	public void Bake(Scene scene)
	{
	}

	[Token(Token = "0x6001142")]
	[Address(RVA = "0xA8837C", Offset = "0xA8837C", VA = "0xA8837C")]
	public TextureBakerRefresher()
	{
	}
}
[Serializable]
[Token(Token = "0x2000338")]
public class TipSet
{
	[Token(Token = "0x400155B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public InputController.VRController platform;

	[Token(Token = "0x400155C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform leftMoveTip;

	[Token(Token = "0x400155D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform rightMoveTip;

	[Token(Token = "0x400155E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform leftGrabTip;

	[Token(Token = "0x400155F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform rightGrabTip;

	[Token(Token = "0x4001560")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject leftEjectTip;

	[Token(Token = "0x4001561")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject rightEjectTip;

	[Token(Token = "0x4001562")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject leftSlideTip;

	[Token(Token = "0x4001563")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject rightSlideTip;

	[Token(Token = "0x6001143")]
	[Address(RVA = "0xA88384", Offset = "0xA88384", VA = "0xA88384")]
	public TipSet()
	{
	}
}
[Token(Token = "0x2000339")]
public class TutorialManager : MonoBehaviour
{
	[Token(Token = "0x200033A")]
	[CompilerGenerated]
	private sealed class <StartTurorial>d__57 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400159C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400159D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400159E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TutorialManager <>4__this;

		[Token(Token = "0x170001F6")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600116C")]
			[Address(RVA = "0xA8AC10", Offset = "0xA8AC10", VA = "0xA8AC10", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001F7")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600116E")]
			[Address(RVA = "0xA8AC58", Offset = "0xA8AC58", VA = "0xA8AC58", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001169")]
		[Address(RVA = "0xA88F58", Offset = "0xA88F58", VA = "0xA88F58")]
		[DebuggerHidden]
		public <StartTurorial>d__57(int <>1__state)
		{
		}

		[Token(Token = "0x600116A")]
		[Address(RVA = "0xA8AAEC", Offset = "0xA8AAEC", VA = "0xA8AAEC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600116B")]
		[Address(RVA = "0xA8AAF0", Offset = "0xA8AAF0", VA = "0xA8AAF0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600116D")]
		[Address(RVA = "0xA8AC18", Offset = "0xA8AC18", VA = "0xA8AC18", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200033B")]
	[CompilerGenerated]
	private sealed class <StartTargetsTutorial>d__58 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400159F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40015A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40015A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TutorialManager <>4__this;

		[Token(Token = "0x170001F8")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001172")]
			[Address(RVA = "0xA8AE04", Offset = "0xA8AE04", VA = "0xA8AE04", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001F9")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001174")]
			[Address(RVA = "0xA8AE4C", Offset = "0xA8AE4C", VA = "0xA8AE4C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600116F")]
		[Address(RVA = "0xA88FE8", Offset = "0xA88FE8", VA = "0xA88FE8")]
		[DebuggerHidden]
		public <StartTargetsTutorial>d__58(int <>1__state)
		{
		}

		[Token(Token = "0x6001170")]
		[Address(RVA = "0xA8AC60", Offset = "0xA8AC60", VA = "0xA8AC60", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001171")]
		[Address(RVA = "0xA8AC64", Offset = "0xA8AC64", VA = "0xA8AC64", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001173")]
		[Address(RVA = "0xA8AE0C", Offset = "0xA8AE0C", VA = "0xA8AE0C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200033C")]
	[CompilerGenerated]
	private sealed class <StartCoverTutorial>d__59 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40015A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40015A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40015A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TutorialManager <>4__this;

		[Token(Token = "0x170001FA")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001178")]
			[Address(RVA = "0xA8B010", Offset = "0xA8B010", VA = "0xA8B010", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001FB")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600117A")]
			[Address(RVA = "0xA8B058", Offset = "0xA8B058", VA = "0xA8B058", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001175")]
		[Address(RVA = "0xA89078", Offset = "0xA89078", VA = "0xA89078")]
		[DebuggerHidden]
		public <StartCoverTutorial>d__59(int <>1__state)
		{
		}

		[Token(Token = "0x6001176")]
		[Address(RVA = "0xA8AE54", Offset = "0xA8AE54", VA = "0xA8AE54", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001177")]
		[Address(RVA = "0xA8AE58", Offset = "0xA8AE58", VA = "0xA8AE58", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001179")]
		[Address(RVA = "0xA8B018", Offset = "0xA8B018", VA = "0xA8B018", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200033D")]
	[CompilerGenerated]
	private sealed class <GoHome>d__76 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40015A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40015A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x170001FC")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600117E")]
			[Address(RVA = "0xA8B1FC", Offset = "0xA8B1FC", VA = "0xA8B1FC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001FD")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001180")]
			[Address(RVA = "0xA8B244", Offset = "0xA8B244", VA = "0xA8B244", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600117B")]
		[Address(RVA = "0xA8A510", Offset = "0xA8A510", VA = "0xA8A510")]
		[DebuggerHidden]
		public <GoHome>d__76(int <>1__state)
		{
		}

		[Token(Token = "0x600117C")]
		[Address(RVA = "0xA8B060", Offset = "0xA8B060", VA = "0xA8B060", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600117D")]
		[Address(RVA = "0xA8B064", Offset = "0xA8B064", VA = "0xA8B064", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600117F")]
		[Address(RVA = "0xA8B204", Offset = "0xA8B204", VA = "0xA8B204", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200033E")]
	[CompilerGenerated]
	private sealed class <HeartTipDelay>d__79 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40015A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40015A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40015A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TutorialManager <>4__this;

		[Token(Token = "0x170001FE")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001184")]
			[Address(RVA = "0xA8B300", Offset = "0xA8B300", VA = "0xA8B300", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001FF")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001186")]
			[Address(RVA = "0xA8B348", Offset = "0xA8B348", VA = "0xA8B348", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001181")]
		[Address(RVA = "0xA8A5C0", Offset = "0xA8A5C0", VA = "0xA8A5C0")]
		[DebuggerHidden]
		public <HeartTipDelay>d__79(int <>1__state)
		{
		}

		[Token(Token = "0x6001182")]
		[Address(RVA = "0xA8B24C", Offset = "0xA8B24C", VA = "0xA8B24C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001183")]
		[Address(RVA = "0xA8B250", Offset = "0xA8B250", VA = "0xA8B250", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001185")]
		[Address(RVA = "0xA8B308", Offset = "0xA8B308", VA = "0xA8B308", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001564")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TipSet oculusTips;

	[Token(Token = "0x4001565")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TipSet indexTips;

	[Token(Token = "0x4001566")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TipSet viveTips;

	[Token(Token = "0x4001567")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public TipSet G2Tips;

	[Token(Token = "0x4001568")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public TipSet PicoN3Tips;

	[Token(Token = "0x4001569")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public TipSet Pico4Tips;

	[Token(Token = "0x400156A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public TipSet QiyuTips;

	[Token(Token = "0x400156B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public TipSet HTCTips;

	[Token(Token = "0x400156C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public UnityEvent onTargetsCleared;

	[Token(Token = "0x400156D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Transform leftMoveTip;

	[Token(Token = "0x400156E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Transform rightMoveTip;

	[Token(Token = "0x400156F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Transform leftGrabTip;

	[Token(Token = "0x4001570")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Transform rightGrabTip;

	[Token(Token = "0x4001571")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public GameObject reloadModeObject;

	[Token(Token = "0x4001572")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public GameObject moveToMoveTip;

	[Token(Token = "0x4001573")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public GameObject moveToCoverTip;

	[Token(Token = "0x4001574")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public GameObject lowCoverpoint;

	[Token(Token = "0x4001575")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public GameObject highCoverpoint;

	[Token(Token = "0x4001576")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public GameObject grabGunTip;

	[Token(Token = "0x4001577")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public GameObject shootTargetsTip;

	[Token(Token = "0x4001578")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public GameObject targetsTip;

	[Token(Token = "0x4001579")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public TextMeshProUGUI remainingTargets;

	[Token(Token = "0x400157A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public GameObject[] targetArrows;

	[Token(Token = "0x400157B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public InteractableSlot gunCase;

	[Token(Token = "0x400157C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public Collider caseTrigger;

	[Token(Token = "0x400157D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public float moveTipYOffset;

	[Token(Token = "0x400157E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	public float reloadTipYOffset;

	[Token(Token = "0x400157F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public float handTrackRate;

	[Token(Token = "0x4001580")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public Canvas leftReloadTipCanvas;

	[Token(Token = "0x4001581")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public Canvas rightReloadTipCanvas;

	[Token(Token = "0x4001582")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public TweenScale leftReloadTipTweener;

	[Token(Token = "0x4001583")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public TweenScale rightReloadTipTweener;

	[Token(Token = "0x4001584")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private bool leftReloadTipEnabled;

	[Token(Token = "0x4001585")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x111")]
	private bool rightReloadTipEnabled;

	[Token(Token = "0x4001586")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public Transform leftReloadTip;

	[Token(Token = "0x4001587")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public Transform rightReloadTip;

	[Token(Token = "0x4001588")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	public GameObject leftEjectTip;

	[Token(Token = "0x4001589")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	public GameObject rightEjectTip;

	[Token(Token = "0x400158A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public GameObject leftAmmoTip;

	[Token(Token = "0x400158B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public GameObject rightAmmoTip;

	[Token(Token = "0x400158C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public GameObject leftSlideTip;

	[Token(Token = "0x400158D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public GameObject rightSlideTip;

	[Token(Token = "0x400158E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	public int remainingBottles;

	[Token(Token = "0x400158F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	public AudioSource sound;

	[Token(Token = "0x4001590")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	public AudioClip startSound;

	[Token(Token = "0x4001591")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	public AudioClip endSound;

	[Token(Token = "0x4001592")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	private Transform leftTrackXForm;

	[Token(Token = "0x4001593")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	private Transform rightTrackXForm;

	[Token(Token = "0x4001594")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	private Vector3 V3_UP;

	[Token(Token = "0x4001595")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
	private bool showingMoveTips;

	[Token(Token = "0x4001596")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x195")]
	private bool gunPickedup;

	[Token(Token = "0x4001597")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	public GunInfo gunInfo;

	[Token(Token = "0x4001598")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	private bool isManualReloadMode;

	[Token(Token = "0x4001599")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	private TipSet currentTips;

	[Token(Token = "0x400159A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	public GameObject heartTip;

	[Token(Token = "0x400159B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	private GameObject lastTip;

	[Token(Token = "0x6001144")]
	[Address(RVA = "0xA8838C", Offset = "0xA8838C", VA = "0xA8838C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001145")]
	[Address(RVA = "0xA888CC", Offset = "0xA888CC", VA = "0xA888CC")]
	private void AssignTipsSet()
	{
	}

	[Token(Token = "0x6001146")]
	[Address(RVA = "0xA88A20", Offset = "0xA88A20", VA = "0xA88A20")]
	private void Start()
	{
	}

	[Token(Token = "0x6001147")]
	[Address(RVA = "0xA88EF0", Offset = "0xA88EF0", VA = "0xA88EF0")]
	[IteratorStateMachine(typeof(<StartTurorial>d__57))]
	private IEnumerator StartTurorial()
	{
		return null;
	}

	[Token(Token = "0x6001148")]
	[Address(RVA = "0xA88F80", Offset = "0xA88F80", VA = "0xA88F80")]
	[IteratorStateMachine(typeof(<StartTargetsTutorial>d__58))]
	private IEnumerator StartTargetsTutorial()
	{
		return null;
	}

	[Token(Token = "0x6001149")]
	[Address(RVA = "0xA89010", Offset = "0xA89010", VA = "0xA89010")]
	[IteratorStateMachine(typeof(<StartCoverTutorial>d__59))]
	private IEnumerator StartCoverTutorial()
	{
		return null;
	}

	[Token(Token = "0x600114A")]
	[Address(RVA = "0xA890A0", Offset = "0xA890A0", VA = "0xA890A0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600114B")]
	[Address(RVA = "0xA884AC", Offset = "0xA884AC", VA = "0xA884AC")]
	private void Teleported()
	{
	}

	[Token(Token = "0x600114C")]
	[Address(RVA = "0xA893EC", Offset = "0xA893EC", VA = "0xA893EC")]
	public void ShowGrabTips()
	{
	}

	[Token(Token = "0x600114D")]
	[Address(RVA = "0xA88E8C", Offset = "0xA88E8C", VA = "0xA88E8C")]
	public void HideGrabTips()
	{
	}

	[Token(Token = "0x600114E")]
	[Address(RVA = "0xA89454", Offset = "0xA89454", VA = "0xA89454")]
	private void ShowLeftReloadTip()
	{
	}

	[Token(Token = "0x600114F")]
	[Address(RVA = "0xA89544", Offset = "0xA89544", VA = "0xA89544")]
	private void ShowRightReloadTip()
	{
	}

	[Token(Token = "0x6001150")]
	[Address(RVA = "0xA88E34", Offset = "0xA88E34", VA = "0xA88E34")]
	private void HideLeftReloadTip()
	{
	}

	[Token(Token = "0x6001151")]
	[Address(RVA = "0xA88E60", Offset = "0xA88E60", VA = "0xA88E60")]
	private void HideRightReloadTip()
	{
	}

	[Token(Token = "0x6001152")]
	[Address(RVA = "0xA89634", Offset = "0xA89634", VA = "0xA89634")]
	public void ShowMoveTips()
	{
	}

	[Token(Token = "0x6001153")]
	[Address(RVA = "0xA896B4", Offset = "0xA896B4", VA = "0xA896B4")]
	public void HideMoveTips()
	{
	}

	[Token(Token = "0x6001154")]
	[Address(RVA = "0xA89708", Offset = "0xA89708", VA = "0xA89708")]
	public void ShowTargetsTip()
	{
	}

	[Token(Token = "0x6001155")]
	[Address(RVA = "0xA898A0", Offset = "0xA898A0", VA = "0xA898A0")]
	public void HideTargetsTip()
	{
	}

	[Token(Token = "0x6001156")]
	[Address(RVA = "0xA89944", Offset = "0xA89944", VA = "0xA89944")]
	public void BottleDestroyed()
	{
	}

	[Token(Token = "0x6001157")]
	[Address(RVA = "0xA89A68", Offset = "0xA89A68", VA = "0xA89A68")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6001158")]
	[Address(RVA = "0xA8A468", Offset = "0xA8A468", VA = "0xA8A468")]
	public void TutorialComplete()
	{
	}

	[Token(Token = "0x6001159")]
	[Address(RVA = "0xA8A4E8", Offset = "0xA8A4E8", VA = "0xA8A4E8")]
	public void MoveTutorialComplete()
	{
	}

	[Token(Token = "0x600115A")]
	[Address(RVA = "0xA8A488", Offset = "0xA8A488", VA = "0xA8A488")]
	[IteratorStateMachine(typeof(<GoHome>d__76))]
	private IEnumerator GoHome()
	{
		return null;
	}

	[Token(Token = "0x600115B")]
	[Address(RVA = "0xA8A538", Offset = "0xA8A538", VA = "0xA8A538")]
	public void SpawnGroupACleared()
	{
	}

	[Token(Token = "0x600115C")]
	[Address(RVA = "0xA8A558", Offset = "0xA8A558", VA = "0xA8A558")]
	[IteratorStateMachine(typeof(<HeartTipDelay>d__79))]
	private IEnumerator HeartTipDelay()
	{
		return null;
	}

	[Token(Token = "0x600115D")]
	[Address(RVA = "0xA8A5E8", Offset = "0xA8A5E8", VA = "0xA8A5E8")]
	public void SpawnGroupBCleared()
	{
	}

	[Token(Token = "0x600115E")]
	[Address(RVA = "0xA8A5EC", Offset = "0xA8A5EC", VA = "0xA8A5EC")]
	public void ReloadStateChanged()
	{
	}

	[Token(Token = "0x600115F")]
	[Address(RVA = "0xA8A7E8", Offset = "0xA8A7E8", VA = "0xA8A7E8")]
	private void AmmoEjected()
	{
	}

	[Token(Token = "0x6001160")]
	[Address(RVA = "0xA8A8FC", Offset = "0xA8A8FC", VA = "0xA8A8FC")]
	private void AmmoInserted()
	{
	}

	[Token(Token = "0x6001161")]
	[Address(RVA = "0xA8AA34", Offset = "0xA8AA34", VA = "0xA8AA34")]
	private void SlideClosed()
	{
	}

	[Token(Token = "0x6001162")]
	[Address(RVA = "0xA8950C", Offset = "0xA8950C", VA = "0xA8950C")]
	private void ShowLeftEjectTip()
	{
	}

	[Token(Token = "0x6001163")]
	[Address(RVA = "0xA895FC", Offset = "0xA895FC", VA = "0xA895FC")]
	private void ShowRightEjectTip()
	{
	}

	[Token(Token = "0x6001164")]
	[Address(RVA = "0xA8A89C", Offset = "0xA8A89C", VA = "0xA8A89C")]
	private void ShowLeftAmmoTip()
	{
	}

	[Token(Token = "0x6001165")]
	[Address(RVA = "0xA8A8CC", Offset = "0xA8A8CC", VA = "0xA8A8CC")]
	private void ShowRightAmmoTip()
	{
	}

	[Token(Token = "0x6001166")]
	[Address(RVA = "0xA8A9D4", Offset = "0xA8A9D4", VA = "0xA8A9D4")]
	private void ShowLeftSlideTip()
	{
	}

	[Token(Token = "0x6001167")]
	[Address(RVA = "0xA8AA04", Offset = "0xA8AA04", VA = "0xA8AA04")]
	private void ShowRightSlideTip()
	{
	}

	[Token(Token = "0x6001168")]
	[Address(RVA = "0xA8AABC", Offset = "0xA8AABC", VA = "0xA8AABC")]
	public TutorialManager()
	{
	}
}
[Token(Token = "0x200033F")]
public class AchievementScreen : MonoBehaviour
{
	[Token(Token = "0x2000340")]
	[CompilerGenerated]
	private sealed class <DelayListing>d__22 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40015B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40015B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40015B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float delay;

		[Token(Token = "0x40015B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject listing;

		[Token(Token = "0x17000200")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001196")]
			[Address(RVA = "0xA8C5E8", Offset = "0xA8C5E8", VA = "0xA8C5E8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000201")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001198")]
			[Address(RVA = "0xA8C630", Offset = "0xA8C630", VA = "0xA8C630", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001193")]
		[Address(RVA = "0xA8C4EC", Offset = "0xA8C4EC", VA = "0xA8C4EC")]
		[DebuggerHidden]
		public <DelayListing>d__22(int <>1__state)
		{
		}

		[Token(Token = "0x6001194")]
		[Address(RVA = "0xA8C530", Offset = "0xA8C530", VA = "0xA8C530", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001195")]
		[Address(RVA = "0xA8C534", Offset = "0xA8C534", VA = "0xA8C534", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001197")]
		[Address(RVA = "0xA8C5F0", Offset = "0xA8C5F0", VA = "0xA8C5F0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40015AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject achievementSelectTemplate;

	[Token(Token = "0x40015AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public RectTransform achievementSelectParent;

	[Token(Token = "0x40015AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TextMeshProUGUI pageLabel;

	[Token(Token = "0x40015AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public TextMeshProUGUI totals;

	[Token(Token = "0x40015AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public VRTouch_Button lastButton;

	[Token(Token = "0x40015AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public VRTouch_Button nextButton;

	[Token(Token = "0x40015B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public int levelsPerPage;

	[Token(Token = "0x40015B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public int currentPage;

	[Token(Token = "0x40015B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public int totalPages;

	[Token(Token = "0x40015B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float listingDelay;

	[Token(Token = "0x40015B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private List<AchievementSelectTemplate> achievementTemplates;

	[Token(Token = "0x40015B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool initalized;

	[Token(Token = "0x6001187")]
	[Address(RVA = "0xA8B350", Offset = "0xA8B350", VA = "0xA8B350")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001188")]
	[Address(RVA = "0xA8B7B0", Offset = "0xA8B7B0", VA = "0xA8B7B0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6001189")]
	[Address(RVA = "0xA8B880", Offset = "0xA8B880", VA = "0xA8B880")]
	public void Setup()
	{
	}

	[Token(Token = "0x600118A")]
	[Address(RVA = "0xA8BB04", Offset = "0xA8BB04", VA = "0xA8BB04")]
	private void AchievementCompleted()
	{
	}

	[Token(Token = "0x600118B")]
	[Address(RVA = "0xA8BB08", Offset = "0xA8BB08", VA = "0xA8BB08")]
	private void FillTemplate(AchievementData data, int reward, AchievementSelectTemplate template)
	{
	}

	[Token(Token = "0x600118C")]
	[Address(RVA = "0xA8C254", Offset = "0xA8C254", VA = "0xA8C254")]
	public void AchievementClaimed(AchievementSelectTemplate template)
	{
	}

	[Token(Token = "0x600118D")]
	[Address(RVA = "0xA8B428", Offset = "0xA8B428", VA = "0xA8B428")]
	private void RefreshTemplates()
	{
	}

	[Token(Token = "0x600118E")]
	[Address(RVA = "0xA8C2C8", Offset = "0xA8C2C8", VA = "0xA8C2C8")]
	private void RefreshTotals()
	{
	}

	[Token(Token = "0x600118F")]
	[Address(RVA = "0xA8C438", Offset = "0xA8C438", VA = "0xA8C438")]
	public void NextPage()
	{
	}

	[Token(Token = "0x6001190")]
	[Address(RVA = "0xA8C498", Offset = "0xA8C498", VA = "0xA8C498")]
	public void LastPage()
	{
	}

	[Token(Token = "0x6001191")]
	[Address(RVA = "0xA8C3C0", Offset = "0xA8C3C0", VA = "0xA8C3C0")]
	[IteratorStateMachine(typeof(<DelayListing>d__22))]
	private IEnumerator DelayListing(float delay, GameObject listing)
	{
		return null;
	}

	[Token(Token = "0x6001192")]
	[Address(RVA = "0xA8C514", Offset = "0xA8C514", VA = "0xA8C514")]
	public AchievementScreen()
	{
	}
}
[Token(Token = "0x2000341")]
public class AchievementSelectTemplate : MonoBehaviour
{
	[Token(Token = "0x40015BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Color lockedIconColour;

	[Token(Token = "0x40015BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Color unlockedIconColour;

	[Token(Token = "0x40015BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Color claimedIconColour;

	[Token(Token = "0x40015BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public TextMeshProUGUI title;

	[Token(Token = "0x40015BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public TextMeshProUGUI description;

	[Token(Token = "0x40015BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public TextMeshProUGUI reward;

	[Token(Token = "0x40015C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public TextMeshProUGUI claim;

	[Token(Token = "0x40015C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public TextMeshProUGUI percentage;

	[NonSerialized]
	[Token(Token = "0x40015C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public string achievementApiName;

	[Token(Token = "0x40015C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Image icon;

	[Token(Token = "0x40015C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public TweenScale iconScaler;

	[Token(Token = "0x40015C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public SlicedFilledImage progress;

	[Token(Token = "0x40015C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Sprite locked;

	[Token(Token = "0x40015C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Sprite claimed;

	[Token(Token = "0x40015C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Sprite completed;

	[Token(Token = "0x40015C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public VRTouch_Button button;

	[Token(Token = "0x40015CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public CanvasGroup group;

	[Token(Token = "0x40015CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public TweenGroupAlpha groupAlpha;

	[Token(Token = "0x6001199")]
	[Address(RVA = "0xA8BEB8", Offset = "0xA8BEB8", VA = "0xA8BEB8")]
	public void SetLocked()
	{
	}

	[Token(Token = "0x600119A")]
	[Address(RVA = "0xA8C104", Offset = "0xA8C104", VA = "0xA8C104")]
	public void SetClaimed()
	{
	}

	[Token(Token = "0x600119B")]
	[Address(RVA = "0xA8BFD0", Offset = "0xA8BFD0", VA = "0xA8BFD0")]
	public void SetUnlocked()
	{
	}

	[Token(Token = "0x600119C")]
	[Address(RVA = "0xA8BE94", Offset = "0xA8BE94", VA = "0xA8BE94")]
	public void SetImage()
	{
	}

	[Token(Token = "0x600119D")]
	[Address(RVA = "0xA8C638", Offset = "0xA8C638", VA = "0xA8C638")]
	public AchievementSelectTemplate()
	{
	}
}
[Token(Token = "0x2000342")]
public class Clock : MonoBehaviour
{
	[Token(Token = "0x40015CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TextMeshProUGUI clockText;

	[Token(Token = "0x40015CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int lastSeconds;

	[Token(Token = "0x600119E")]
	[Address(RVA = "0xA8C640", Offset = "0xA8C640", VA = "0xA8C640")]
	private void Update()
	{
	}

	[Token(Token = "0x600119F")]
	[Address(RVA = "0xA8C874", Offset = "0xA8C874", VA = "0xA8C874")]
	private string LeadingZero(int n)
	{
		return null;
	}

	[Token(Token = "0x60011A0")]
	[Address(RVA = "0xA8C8A8", Offset = "0xA8C8A8", VA = "0xA8C8A8")]
	public Clock()
	{
	}
}
[Token(Token = "0x2000343")]
public class CreditsScreen : MonoBehaviour
{
	[Token(Token = "0x40015CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform contentsXForm;

	[Token(Token = "0x40015CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public VRTouch_Slider slider;

	[Token(Token = "0x40015D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float height;

	[Token(Token = "0x40015D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float rate;

	[Token(Token = "0x40015D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Vector3 startPos;

	[Token(Token = "0x40015D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private Vector3 currentPos;

	[Token(Token = "0x60011A1")]
	[Address(RVA = "0xA8C8B0", Offset = "0xA8C8B0", VA = "0xA8C8B0")]
	private void Awake()
	{
	}

	[Token(Token = "0x60011A2")]
	[Address(RVA = "0xA8C984", Offset = "0xA8C984", VA = "0xA8C984")]
	public void onSliderChange(float position)
	{
	}

	[Token(Token = "0x60011A3")]
	[Address(RVA = "0xA8CA44", Offset = "0xA8CA44", VA = "0xA8CA44")]
	public CreditsScreen()
	{
	}
}
[Token(Token = "0x2000344")]
public class DailyRewardCard : MonoBehaviour
{
	[Token(Token = "0x2000345")]
	[CompilerGenerated]
	private sealed class <TimerRoutine>d__28 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40015EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40015EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40015EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DailyRewardCard <>4__this;

		[Token(Token = "0x40015ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int startTime;

		[Token(Token = "0x40015EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int period;

		[Token(Token = "0x40015EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <time>5__2;

		[Token(Token = "0x17000202")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60011B0")]
			[Address(RVA = "0xA8D63C", Offset = "0xA8D63C", VA = "0xA8D63C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000203")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60011B2")]
			[Address(RVA = "0xA8D684", Offset = "0xA8D684", VA = "0xA8D684", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60011AD")]
		[Address(RVA = "0xA8D038", Offset = "0xA8D038", VA = "0xA8D038")]
		[DebuggerHidden]
		public <TimerRoutine>d__28(int <>1__state)
		{
		}

		[Token(Token = "0x60011AE")]
		[Address(RVA = "0xA8D060", Offset = "0xA8D060", VA = "0xA8D060", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60011AF")]
		[Address(RVA = "0xA8D064", Offset = "0xA8D064", VA = "0xA8D064", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60011B1")]
		[Address(RVA = "0xA8D644", Offset = "0xA8D644", VA = "0xA8D644", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000346")]
	[CompilerGenerated]
	private sealed class <TimerRemainingRoutine>d__29 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40015F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40015F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40015F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int period;

		[Token(Token = "0x40015F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public DailyRewardCard <>4__this;

		[Token(Token = "0x40015F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <time>5__2;

		[Token(Token = "0x17000204")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60011B6")]
			[Address(RVA = "0xA8D8B4", Offset = "0xA8D8B4", VA = "0xA8D8B4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000205")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60011B8")]
			[Address(RVA = "0xA8D8FC", Offset = "0xA8D8FC", VA = "0xA8D8FC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60011B3")]
		[Address(RVA = "0xA8D68C", Offset = "0xA8D68C", VA = "0xA8D68C")]
		[DebuggerHidden]
		public <TimerRemainingRoutine>d__29(int <>1__state)
		{
		}

		[Token(Token = "0x60011B4")]
		[Address(RVA = "0xA8D6B4", Offset = "0xA8D6B4", VA = "0xA8D6B4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60011B5")]
		[Address(RVA = "0xA8D6B8", Offset = "0xA8D6B8", VA = "0xA8D6B8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60011B7")]
		[Address(RVA = "0xA8D8BC", Offset = "0xA8D8BC", VA = "0xA8D8BC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40015D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int rewardValue;

	[Token(Token = "0x40015D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int dayNumber;

	[Token(Token = "0x40015D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform rootXForm;

	[Token(Token = "0x40015D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject activeIndicator;

	[Token(Token = "0x40015D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject clock;

	[Token(Token = "0x40015D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public TextMeshProUGUI titleText;

	[Token(Token = "0x40015DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Color unlockedTtitleColour;

	[Token(Token = "0x40015DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Color lockedTitleColour;

	[Token(Token = "0x40015DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Color unlockedColour;

	[Token(Token = "0x40015DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Color lockedColour;

	[Token(Token = "0x40015DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Color unlockedCardBGColour;

	[Token(Token = "0x40015DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Color lockedCardBGColour;

	[Token(Token = "0x40015E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public TextMeshProUGUI reward;

	[Token(Token = "0x40015E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public TextMeshProUGUI progress;

	[Token(Token = "0x40015E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public Image cardBG;

	[Token(Token = "0x40015E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public Image titleBG;

	[Token(Token = "0x40015E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public Image lockedImage;

	[Token(Token = "0x40015E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public Image unlockedImage;

	[Token(Token = "0x40015E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public Image clockFill;

	[Token(Token = "0x40015E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public GameObject claimGlow;

	[Token(Token = "0x40015E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public DailyRewardsScreen screen;

	[Token(Token = "0x40015E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public bool rewardInProgress;

	[Token(Token = "0x60011A4")]
	[Address(RVA = "0xA8CA58", Offset = "0xA8CA58", VA = "0xA8CA58")]
	private void Awake()
	{
	}

	[Token(Token = "0x60011A5")]
	[Address(RVA = "0xA8CC18", Offset = "0xA8CC18", VA = "0xA8CC18")]
	public void ResetState()
	{
	}

	[Token(Token = "0x60011A6")]
	[Address(RVA = "0xA8CD18", Offset = "0xA8CD18", VA = "0xA8CD18")]
	public void SetLockedState(bool _state)
	{
	}

	[Token(Token = "0x60011A7")]
	[Address(RVA = "0xA8CE70", Offset = "0xA8CE70", VA = "0xA8CE70")]
	public void ShowClaimFX()
	{
	}

	[Token(Token = "0x60011A8")]
	[Address(RVA = "0xA8CE50", Offset = "0xA8CE50", VA = "0xA8CE50")]
	public void ShowActive(bool _state)
	{
	}

	[Token(Token = "0x60011A9")]
	[Address(RVA = "0xA8CEB4", Offset = "0xA8CEB4", VA = "0xA8CEB4")]
	public void ShowTimer(int startTime, int period)
	{
	}

	[Token(Token = "0x60011AA")]
	[Address(RVA = "0xA8CF3C", Offset = "0xA8CF3C", VA = "0xA8CF3C")]
	[IteratorStateMachine(typeof(<TimerRoutine>d__28))]
	private IEnumerator TimerRoutine(int startTime, int period)
	{
		return null;
	}

	[Token(Token = "0x60011AB")]
	[Address(RVA = "0xA8CFB8", Offset = "0xA8CFB8", VA = "0xA8CFB8")]
	[IteratorStateMachine(typeof(<TimerRemainingRoutine>d__29))]
	private IEnumerator TimerRemainingRoutine(int startTime, int period)
	{
		return null;
	}

	[Token(Token = "0x60011AC")]
	[Address(RVA = "0xA8D030", Offset = "0xA8D030", VA = "0xA8D030")]
	public DailyRewardCard()
	{
	}
}
[Token(Token = "0x2000347")]
public class DailyRewardsScreen : MonoBehaviour
{
	[Token(Token = "0x40015F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public VRTouch_Button claimButton;

	[Token(Token = "0x40015F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private DailyRewardCard[] rewardCards;

	[Token(Token = "0x40015F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public DailyRewardCard currentDayCard;

	[Token(Token = "0x40015F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public double nextRewardDelay;

	[Token(Token = "0x40015F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int currentDay;

	[Token(Token = "0x40015FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public int nextDay;

	[Token(Token = "0x40015FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool currentDayClaimed;

	[Token(Token = "0x40015FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public AudioSource claimSound;

	[Token(Token = "0x40015FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private int SECONDS_A_DAY;

	[Token(Token = "0x60011B9")]
	[Address(RVA = "0xA8D904", Offset = "0xA8D904", VA = "0xA8D904")]
	private void Awake()
	{
	}

	[Token(Token = "0x60011BA")]
	[Address(RVA = "0xA8D9A8", Offset = "0xA8D9A8", VA = "0xA8D9A8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60011BB")]
	[Address(RVA = "0xA8D294", Offset = "0xA8D294", VA = "0xA8D294")]
	public void EvaluateReward(bool rewardReady = false)
	{
	}

	[Token(Token = "0x60011BC")]
	[Address(RVA = "0xA8D9E0", Offset = "0xA8D9E0", VA = "0xA8D9E0")]
	private void InitialiseCards(bool reset = false)
	{
	}

	[Token(Token = "0x60011BD")]
	[Address(RVA = "0xA8DB88", Offset = "0xA8DB88", VA = "0xA8DB88")]
	public void Claim()
	{
	}

	[Token(Token = "0x60011BE")]
	[Address(RVA = "0xA8DFE0", Offset = "0xA8DFE0", VA = "0xA8DFE0")]
	public DailyRewardsScreen()
	{
	}
}
[Token(Token = "0x2000348")]
public class FiringRangeHomeScreen : MonoBehaviour
{
	[Token(Token = "0x40015FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject startPrompt;

	[Token(Token = "0x40015FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject equipPrompt;

	[Token(Token = "0x4001600")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject equipOnePrompt;

	[Token(Token = "0x4001601")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject button;

	[Token(Token = "0x60011BF")]
	[Address(RVA = "0xA8E004", Offset = "0xA8E004", VA = "0xA8E004")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60011C0")]
	[Address(RVA = "0xA8E1FC", Offset = "0xA8E1FC", VA = "0xA8E1FC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60011C1")]
	[Address(RVA = "0xA8E30C", Offset = "0xA8E30C", VA = "0xA8E30C")]
	public void LoadFiringRange()
	{
	}

	[Token(Token = "0x60011C2")]
	[Address(RVA = "0xA8E370", Offset = "0xA8E370", VA = "0xA8E370")]
	private void EquipmentUpdated(bool equipped, GunData gun)
	{
	}

	[Token(Token = "0x60011C3")]
	[Address(RVA = "0xA8E118", Offset = "0xA8E118", VA = "0xA8E118")]
	private void SetState()
	{
	}

	[Token(Token = "0x60011C4")]
	[Address(RVA = "0xA8E374", Offset = "0xA8E374", VA = "0xA8E374")]
	public FiringRangeHomeScreen()
	{
	}
}
[Token(Token = "0x2000349")]
public class FiringRangeIntroScreen : MonoBehaviour
{
	[Token(Token = "0x4001602")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] weaponIcons;

	[Token(Token = "0x4001603")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject autoReloadmode;

	[Token(Token = "0x4001604")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject manualReloadmode;

	[Token(Token = "0x4001605")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public TextMeshProUGUI weaponName;

	[Token(Token = "0x60011C5")]
	[Address(RVA = "0xA8E37C", Offset = "0xA8E37C", VA = "0xA8E37C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60011C6")]
	[Address(RVA = "0xA8E380", Offset = "0xA8E380", VA = "0xA8E380")]
	private void RefreshMode()
	{
	}

	[Token(Token = "0x60011C7")]
	[Address(RVA = "0xA8E620", Offset = "0xA8E620", VA = "0xA8E620")]
	public FiringRangeIntroScreen()
	{
	}
}
[Token(Token = "0x200034A")]
public class FiringRangeScreen : MonoBehaviour
{
	[Token(Token = "0x200034B")]
	[CompilerGenerated]
	private sealed class <SequenceTemplates>d__35 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001627")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001628")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001629")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FiringRangeScreen <>4__this;

		[Token(Token = "0x400162A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <i>5__2;

		[Token(Token = "0x17000206")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60011DD")]
			[Address(RVA = "0xA8FE98", Offset = "0xA8FE98", VA = "0xA8FE98", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000207")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60011DF")]
			[Address(RVA = "0xA8FEE0", Offset = "0xA8FEE0", VA = "0xA8FEE0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60011DA")]
		[Address(RVA = "0xA8E8AC", Offset = "0xA8E8AC", VA = "0xA8E8AC")]
		[DebuggerHidden]
		public <SequenceTemplates>d__35(int <>1__state)
		{
		}

		[Token(Token = "0x60011DB")]
		[Address(RVA = "0xA8FBBC", Offset = "0xA8FBBC", VA = "0xA8FBBC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60011DC")]
		[Address(RVA = "0xA8FBC0", Offset = "0xA8FBC0", VA = "0xA8FBC0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60011DE")]
		[Address(RVA = "0xA8FEA0", Offset = "0xA8FEA0", VA = "0xA8FEA0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200034C")]
	[CompilerGenerated]
	private sealed class <CountIn>d__47 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400162B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400162C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400162D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FiringRangeScreen <>4__this;

		[Token(Token = "0x400162E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool <timeout>5__2;

		[Token(Token = "0x17000208")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60011E3")]
			[Address(RVA = "0xA904D4", Offset = "0xA904D4", VA = "0xA904D4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000209")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60011E5")]
			[Address(RVA = "0xA9051C", Offset = "0xA9051C", VA = "0xA9051C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60011E0")]
		[Address(RVA = "0xA8EF5C", Offset = "0xA8EF5C", VA = "0xA8EF5C")]
		[DebuggerHidden]
		public <CountIn>d__47(int <>1__state)
		{
		}

		[Token(Token = "0x60011E1")]
		[Address(RVA = "0xA8FEE8", Offset = "0xA8FEE8", VA = "0xA8FEE8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60011E2")]
		[Address(RVA = "0xA8FEEC", Offset = "0xA8FEEC", VA = "0xA8FEEC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60011E4")]
		[Address(RVA = "0xA904DC", Offset = "0xA904DC", VA = "0xA904DC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001606")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static FiringRangeScreen instance;

	[Token(Token = "0x4001607")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string title;

	[Token(Token = "0x4001608")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Header("Events")]
	public UnityEvent onStart;

	[Token(Token = "0x4001609")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEvent onEnd;

	[Token(Token = "0x400160A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ServoRotator rotator;

	[Token(Token = "0x400160B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject selectScreen;

	[Token(Token = "0x400160C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject gameScreen;

	[Token(Token = "0x400160D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject resultScreen;

	[Token(Token = "0x400160E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject newBest;

	[Token(Token = "0x400160F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public TextMeshProUGUI countLabel;

	[Token(Token = "0x4001610")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public TextMeshProUGUI timeValue;

	[Token(Token = "0x4001611")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public TextMeshProUGUI accuracyValue;

	[Token(Token = "0x4001612")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public TextMeshProUGUI scoreValue;

	[Token(Token = "0x4001613")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public TextMeshProUGUI timeResultValue;

	[Token(Token = "0x4001614")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public TextMeshProUGUI accuracyResultValue;

	[Token(Token = "0x4001615")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public TextMeshProUGUI scoreResultValue;

	[Token(Token = "0x4001616")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public TextMeshProUGUI finalScoreResultValue;

	[Token(Token = "0x4001617")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public TextMeshProUGUI resultRankLabel;

	[Token(Token = "0x4001618")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public TargetSequenceBase[] sequences;

	[Token(Token = "0x4001619")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public TargetChallengeTemplate[] targetSequenceTemplates;

	[Token(Token = "0x400161A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private TargetSequence activeTargetSequence;

	[Token(Token = "0x400161B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private DummySequence activeDummySequence;

	[Token(Token = "0x400161C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private TargetSequenceBase activeSequence;

	[Token(Token = "0x400161D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private TweenGroupAlpha countTweener;

	[Token(Token = "0x400161E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private int points;

	[Token(Token = "0x400161F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	private int shotsFired;

	[Token(Token = "0x4001620")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private int shotsHit;

	[Token(Token = "0x4001621")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	private float startTime;

	[Token(Token = "0x4001622")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private float accuracy;

	[Token(Token = "0x4001623")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	private float timeLimit;

	[Token(Token = "0x4001624")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private float timeProgress;

	[Token(Token = "0x4001625")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static bool countingIn;

	[Token(Token = "0x4001626")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	private bool sequenceActive;

	[Token(Token = "0x60011C8")]
	[Address(RVA = "0xA8E628", Offset = "0xA8E628", VA = "0xA8E628")]
	private void Awake()
	{
	}

	[Token(Token = "0x60011C9")]
	[Address(RVA = "0xA8E6E0", Offset = "0xA8E6E0", VA = "0xA8E6E0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60011CA")]
	[Address(RVA = "0xA8E824", Offset = "0xA8E824", VA = "0xA8E824")]
	public void RefreshTemplates()
	{
	}

	[Token(Token = "0x60011CB")]
	[Address(RVA = "0xA8E844", Offset = "0xA8E844", VA = "0xA8E844")]
	[IteratorStateMachine(typeof(<SequenceTemplates>d__35))]
	private IEnumerator SequenceTemplates()
	{
		return null;
	}

	[Token(Token = "0x60011CC")]
	[Address(RVA = "0xA8E8D4", Offset = "0xA8E8D4", VA = "0xA8E8D4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60011CD")]
	[Address(RVA = "0xA8E9E4", Offset = "0xA8E9E4", VA = "0xA8E9E4")]
	public void ClearLastSequence()
	{
	}

	[Token(Token = "0x60011CE")]
	[Address(RVA = "0xA8EA6C", Offset = "0xA8EA6C", VA = "0xA8EA6C")]
	private void ShotFired(bool state)
	{
	}

	[Token(Token = "0x60011CF")]
	[Address(RVA = "0xA8EA7C", Offset = "0xA8EA7C", VA = "0xA8EA7C")]
	private void UpdateAccuracy()
	{
	}

	[Token(Token = "0x60011D0")]
	[Address(RVA = "0xA8EB50", Offset = "0xA8EB50", VA = "0xA8EB50")]
	public void ResetValues()
	{
	}

	[Token(Token = "0x60011D1")]
	[Address(RVA = "0xA8EBF0", Offset = "0xA8EBF0", VA = "0xA8EBF0")]
	public void StartSequence(TargetSequenceBase sequence)
	{
	}

	[Token(Token = "0x60011D2")]
	[Address(RVA = "0xA8EE68", Offset = "0xA8EE68", VA = "0xA8EE68")]
	public void RetrySequence()
	{
	}

	[Token(Token = "0x60011D3")]
	[Address(RVA = "0xA8EEA4", Offset = "0xA8EEA4", VA = "0xA8EEA4")]
	public void AddPoints(int pointsAdded)
	{
	}

	[Token(Token = "0x60011D4")]
	[Address(RVA = "0xA8EF04", Offset = "0xA8EF04", VA = "0xA8EF04")]
	public void SequenceComplete()
	{
	}

	[Token(Token = "0x60011D5")]
	[Address(RVA = "0xA8EF0C", Offset = "0xA8EF0C", VA = "0xA8EF0C")]
	public void Continue()
	{
	}

	[Token(Token = "0x60011D6")]
	[Address(RVA = "0xA8EE00", Offset = "0xA8EE00", VA = "0xA8EE00")]
	[IteratorStateMachine(typeof(<CountIn>d__47))]
	private IEnumerator CountIn()
	{
		return null;
	}

	[Token(Token = "0x60011D7")]
	[Address(RVA = "0xA8EF84", Offset = "0xA8EF84", VA = "0xA8EF84")]
	private void UpdateClock()
	{
	}

	[Token(Token = "0x60011D8")]
	[Address(RVA = "0xA8F0F0", Offset = "0xA8F0F0", VA = "0xA8F0F0")]
	private void UpdateFinalScore()
	{
	}

	[Token(Token = "0x60011D9")]
	[Address(RVA = "0xA8FB6C", Offset = "0xA8FB6C", VA = "0xA8FB6C")]
	public FiringRangeScreen()
	{
	}
}
[Token(Token = "0x200034D")]
public class GloveSelectTemplate : MonoBehaviour
{
	[Token(Token = "0x400162F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TextMeshProUGUI title;

	[Token(Token = "0x4001630")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextMeshProUGUI price;

	[Token(Token = "0x4001631")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public VRTouch_Button button;

	[Token(Token = "0x60011E6")]
	[Address(RVA = "0xA90524", Offset = "0xA90524", VA = "0xA90524")]
	public void SetDisabled()
	{
	}

	[Token(Token = "0x60011E7")]
	[Address(RVA = "0xA90594", Offset = "0xA90594", VA = "0xA90594")]
	public void SetEnabled()
	{
	}

	[Token(Token = "0x60011E8")]
	[Address(RVA = "0xA90604", Offset = "0xA90604", VA = "0xA90604")]
	public GloveSelectTemplate()
	{
	}
}
[Serializable]
[Token(Token = "0x200034E")]
public class GlovesShopScreen : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x200034F")]
	public class PurchaseButton
	{
		[Token(Token = "0x4001641")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public VRTouch_Button button;

		[Token(Token = "0x4001642")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TextMeshProUGUI purchaseLabel;

		[Token(Token = "0x60011FB")]
		[Address(RVA = "0xA918FC", Offset = "0xA918FC", VA = "0xA918FC")]
		public PurchaseButton()
		{
		}
	}

	[Token(Token = "0x4001632")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TextMeshProUGUI gloveNameLabel;

	[Token(Token = "0x4001633")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public VRTouch_Button prevButton;

	[Token(Token = "0x4001634")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public VRTouch_Button nextButton;

	[Token(Token = "0x4001635")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public PurchaseButton purchaseButton;

	[Token(Token = "0x4001636")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public VRButtonGroup buttonGroup;

	[Token(Token = "0x4001637")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public TextMeshProUGUI currencyLabel;

	[Token(Token = "0x4001638")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public EntityProjector projector;

	[Token(Token = "0x4001639")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Image[] gloveImages;

	[Token(Token = "0x400163A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private GloveSelectTemplate[] glovesTemplates;

	[Token(Token = "0x400163B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public float fillDuration;

	[Token(Token = "0x400163C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private int currentIndex;

	[Token(Token = "0x400163D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private int[] selectedIndex;

	[Token(Token = "0x400163E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private int lastIndex;

	[Token(Token = "0x400163F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Image lastImage;

	[Token(Token = "0x4001640")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private bool initialised;

	[Token(Token = "0x60011E9")]
	[Address(RVA = "0xA9060C", Offset = "0xA9060C", VA = "0xA9060C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60011EA")]
	[Address(RVA = "0xA906E0", Offset = "0xA906E0", VA = "0xA906E0")]
	private void Start()
	{
	}

	[Token(Token = "0x60011EB")]
	[Address(RVA = "0xA906E4", Offset = "0xA906E4", VA = "0xA906E4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60011EC")]
	[Address(RVA = "0xA91118", Offset = "0xA91118", VA = "0xA91118")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60011ED")]
	[Address(RVA = "0xA9082C", Offset = "0xA9082C", VA = "0xA9082C")]
	private void UpdateSelectedIndices()
	{
	}

	[Token(Token = "0x60011EE")]
	[Address(RVA = "0xA911C0", Offset = "0xA911C0", VA = "0xA911C0")]
	private void GlovesChanged()
	{
	}

	[Token(Token = "0x60011EF")]
	[Address(RVA = "0xA91334", Offset = "0xA91334", VA = "0xA91334")]
	private GloveVariantData GetSelectedGloveVariant(int gloveIndex, int variantIndex)
	{
		return null;
	}

	[Token(Token = "0x60011F0")]
	[Address(RVA = "0xA9130C", Offset = "0xA9130C", VA = "0xA9130C")]
	private GloveData GetSelectedGlove(int index)
	{
		return null;
	}

	[Token(Token = "0x60011F1")]
	[Address(RVA = "0xA913B0", Offset = "0xA913B0", VA = "0xA913B0")]
	public void RefreshPurchaseButton()
	{
	}

	[Token(Token = "0x60011F2")]
	[Address(RVA = "0xA90C18", Offset = "0xA90C18", VA = "0xA90C18")]
	public void Refresh()
	{
	}

	[Token(Token = "0x60011F3")]
	[Address(RVA = "0xA914E8", Offset = "0xA914E8", VA = "0xA914E8")]
	public void GloveVarientSelected(int index)
	{
	}

	[Token(Token = "0x60011F4")]
	[Address(RVA = "0xA9152C", Offset = "0xA9152C", VA = "0xA9152C")]
	public void Purchase()
	{
	}

	[Token(Token = "0x60011F5")]
	[Address(RVA = "0xA91814", Offset = "0xA91814", VA = "0xA91814")]
	public void NextGlove()
	{
	}

	[Token(Token = "0x60011F6")]
	[Address(RVA = "0xA918E4", Offset = "0xA918E4", VA = "0xA918E4")]
	public void PreviousGlove()
	{
	}

	[Token(Token = "0x60011F7")]
	[Address(RVA = "0xA9181C", Offset = "0xA9181C", VA = "0xA9181C")]
	private void CycleGloves(bool forward)
	{
	}

	[Token(Token = "0x60011F8")]
	[Address(RVA = "0xA90AB8", Offset = "0xA90AB8", VA = "0xA90AB8")]
	private void ShowSelectedGloves()
	{
	}

	[Token(Token = "0x60011F9")]
	[Address(RVA = "0xA90B34", Offset = "0xA90B34", VA = "0xA90B34")]
	private void UpdateSelectButtons()
	{
	}

	[Token(Token = "0x60011FA")]
	[Address(RVA = "0xA918EC", Offset = "0xA918EC", VA = "0xA918EC")]
	public GlovesShopScreen()
	{
	}
}
[Token(Token = "0x2000350")]
public class GripAngleUI : MonoBehaviour
{
	[Token(Token = "0x4001643")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TextMeshProUGUI pitchValueLabel;

	[Token(Token = "0x4001644")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextMeshProUGUI rollValueLabel;

	[Token(Token = "0x4001645")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TextMeshProUGUI yawValueLabel;

	[Token(Token = "0x4001646")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public TextMeshProUGUI x_ValueLabel;

	[Token(Token = "0x4001647")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public TextMeshProUGUI y_ValueLabel;

	[Token(Token = "0x4001648")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public TextMeshProUGUI z_ValueLabel;

	[Token(Token = "0x4001649")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Vector3 currentAngle;

	[Token(Token = "0x400164A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private Vector3 currentOffset;

	[Token(Token = "0x60011FC")]
	[Address(RVA = "0xA91904", Offset = "0xA91904", VA = "0xA91904")]
	private void Awake()
	{
	}

	[Token(Token = "0x60011FD")]
	[Address(RVA = "0xA91984", Offset = "0xA91984", VA = "0xA91984")]
	private void Start()
	{
	}

	[Token(Token = "0x60011FE")]
	[Address(RVA = "0xA91B40", Offset = "0xA91B40", VA = "0xA91B40")]
	public void IncrementPitch()
	{
	}

	[Token(Token = "0x60011FF")]
	[Address(RVA = "0xA91C04", Offset = "0xA91C04", VA = "0xA91C04")]
	public void DecrementPitch()
	{
	}

	[Token(Token = "0x6001200")]
	[Address(RVA = "0xA91CC8", Offset = "0xA91CC8", VA = "0xA91CC8")]
	public void IncrementRoll()
	{
	}

	[Token(Token = "0x6001201")]
	[Address(RVA = "0xA91D8C", Offset = "0xA91D8C", VA = "0xA91D8C")]
	public void DecrementRoll()
	{
	}

	[Token(Token = "0x6001202")]
	[Address(RVA = "0xA91E50", Offset = "0xA91E50", VA = "0xA91E50")]
	public void IncrementYaw()
	{
	}

	[Token(Token = "0x6001203")]
	[Address(RVA = "0xA91F14", Offset = "0xA91F14", VA = "0xA91F14")]
	public void DecrementYaw()
	{
	}

	[Token(Token = "0x6001204")]
	[Address(RVA = "0xA91FD8", Offset = "0xA91FD8", VA = "0xA91FD8")]
	public void ResetAngle()
	{
	}

	[Token(Token = "0x6001205")]
	[Address(RVA = "0xA92164", Offset = "0xA92164", VA = "0xA92164")]
	public void Increment_X()
	{
	}

	[Token(Token = "0x6001206")]
	[Address(RVA = "0xA9221C", Offset = "0xA9221C", VA = "0xA9221C")]
	public void Decrement_X()
	{
	}

	[Token(Token = "0x6001207")]
	[Address(RVA = "0xA922D4", Offset = "0xA922D4", VA = "0xA922D4")]
	public void Increment_Y()
	{
	}

	[Token(Token = "0x6001208")]
	[Address(RVA = "0xA9238C", Offset = "0xA9238C", VA = "0xA9238C")]
	public void Decrement_Y()
	{
	}

	[Token(Token = "0x6001209")]
	[Address(RVA = "0xA92444", Offset = "0xA92444", VA = "0xA92444")]
	public void Increment_Z()
	{
	}

	[Token(Token = "0x600120A")]
	[Address(RVA = "0xA924FC", Offset = "0xA924FC", VA = "0xA924FC")]
	public void Decrement_Z()
	{
	}

	[Token(Token = "0x600120B")]
	[Address(RVA = "0xA925B4", Offset = "0xA925B4", VA = "0xA925B4")]
	public void ResetOffset()
	{
	}

	[Token(Token = "0x600120C")]
	[Address(RVA = "0xA92718", Offset = "0xA92718", VA = "0xA92718")]
	public GripAngleUI()
	{
	}
}
[Serializable]
[Token(Token = "0x2000351")]
public class GunPurchaseInfo
{
	[Token(Token = "0x400164B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public GunData gunData;

	[Token(Token = "0x400164C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Image image;

	[Token(Token = "0x600120D")]
	[Address(RVA = "0xA92720", Offset = "0xA92720", VA = "0xA92720")]
	public GunPurchaseInfo()
	{
	}
}
[Token(Token = "0x2000352")]
public class GunShopScreen : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000353")]
	public class PurchaseButton
	{
		[Token(Token = "0x4001667")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public VRTouch_Button button;

		[Token(Token = "0x4001668")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TextMeshProUGUI purchaseLabel;

		[Token(Token = "0x600121E")]
		[Address(RVA = "0xA93A80", Offset = "0xA93A80", VA = "0xA93A80")]
		public PurchaseButton()
		{
		}
	}

	[Token(Token = "0x2000355")]
	[CompilerGenerated]
	private sealed class <FillRoutine>d__41 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400166A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400166B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400166C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GunShopScreen <>4__this;

		[Token(Token = "0x400166D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <time>5__2;

		[Token(Token = "0x1700020A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001224")]
			[Address(RVA = "0xA93C08", Offset = "0xA93C08", VA = "0xA93C08", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700020B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001226")]
			[Address(RVA = "0xA93C50", Offset = "0xA93C50", VA = "0xA93C50", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001221")]
		[Address(RVA = "0xA93A44", Offset = "0xA93A44", VA = "0xA93A44")]
		[DebuggerHidden]
		public <FillRoutine>d__41(int <>1__state)
		{
		}

		[Token(Token = "0x6001222")]
		[Address(RVA = "0xA93AB0", Offset = "0xA93AB0", VA = "0xA93AB0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001223")]
		[Address(RVA = "0xA93AB4", Offset = "0xA93AB4", VA = "0xA93AB4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001225")]
		[Address(RVA = "0xA93C10", Offset = "0xA93C10", VA = "0xA93C10", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400164D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public VRTouch_Button prevButton;

	[Token(Token = "0x400164E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public VRTouch_Button nextButton;

	[Token(Token = "0x400164F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public PurchaseButton singlePurchaseButton;

	[Token(Token = "0x4001650")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public PurchaseButton dualPurchaseButton;

	[Token(Token = "0x4001651")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public TextMeshProUGUI currencyLabel;

	[Token(Token = "0x4001652")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public TextMeshProUGUI weaponNameLabel;

	[Token(Token = "0x4001653")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public TextMeshProUGUI priceLabel;

	[Token(Token = "0x4001654")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public TextMeshProUGUI fireModeLabel;

	[Token(Token = "0x4001655")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public SlicedFilledImage damageFill;

	[Token(Token = "0x4001656")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public SlicedFilledImage clipFill;

	[Token(Token = "0x4001657")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public SlicedFilledImage rofFill;

	[Token(Token = "0x4001658")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public float fillDuration;

	[Token(Token = "0x4001659")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public float screenFade;

	[Token(Token = "0x400165A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public GunPurchaseInfo[] gunInventory;

	[Token(Token = "0x400165B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public EntityProjector projector;

	[Token(Token = "0x400165C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Transform screen;

	[Token(Token = "0x400165D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Transform dialog;

	[Token(Token = "0x400165E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private int currentIndex;

	[Token(Token = "0x400165F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private int lastIndex;

	[Token(Token = "0x4001660")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private Image lastImage;

	[Token(Token = "0x4001661")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private float currentDamageFill;

	[Token(Token = "0x4001662")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private float currentClipFill;

	[Token(Token = "0x4001663")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private float currentROFFill;

	[Token(Token = "0x4001664")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	private float targetDamageFill;

	[Token(Token = "0x4001665")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private float targetClipFill;

	[Token(Token = "0x4001666")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private float targetROFFill;

	[Token(Token = "0x600120E")]
	[Address(RVA = "0xA92728", Offset = "0xA92728", VA = "0xA92728")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600120F")]
	[Address(RVA = "0xA92954", Offset = "0xA92954", VA = "0xA92954")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6001210")]
	[Address(RVA = "0xA929FC", Offset = "0xA929FC", VA = "0xA929FC")]
	public void ShowDualWieldDialong()
	{
	}

	[Token(Token = "0x6001211")]
	[Address(RVA = "0xA927D4", Offset = "0xA927D4", VA = "0xA927D4")]
	public void HideDualWieldDialog()
	{
	}

	[Token(Token = "0x6001212")]
	[Address(RVA = "0xA92A04", Offset = "0xA92A04", VA = "0xA92A04")]
	private void ToggleDualWieldDialog(bool show)
	{
	}

	[Token(Token = "0x6001213")]
	[Address(RVA = "0xA92BCC", Offset = "0xA92BCC", VA = "0xA92BCC")]
	public void RefreshPurchaseButton()
	{
	}

	[Token(Token = "0x6001214")]
	[Address(RVA = "0xA92F98", Offset = "0xA92F98", VA = "0xA92F98")]
	public void Refresh()
	{
	}

	[Token(Token = "0x6001215")]
	[Address(RVA = "0xA933FC", Offset = "0xA933FC", VA = "0xA933FC")]
	private WeaponData GetSelectedWeapon()
	{
		return null;
	}

	[Token(Token = "0x6001216")]
	[Address(RVA = "0xA93424", Offset = "0xA93424", VA = "0xA93424")]
	public void PurchaseSingle()
	{
	}

	[Token(Token = "0x6001217")]
	[Address(RVA = "0xA936E0", Offset = "0xA936E0", VA = "0xA936E0")]
	public void PurchaseDual()
	{
	}

	[Token(Token = "0x6001218")]
	[Address(RVA = "0xA9398C", Offset = "0xA9398C", VA = "0xA9398C")]
	public void NextGun()
	{
	}

	[Token(Token = "0x6001219")]
	[Address(RVA = "0xA939C0", Offset = "0xA939C0", VA = "0xA939C0")]
	public void PreviousGun()
	{
	}

	[Token(Token = "0x600121A")]
	[Address(RVA = "0xA927DC", Offset = "0xA927DC", VA = "0xA927DC")]
	private void GunChanged()
	{
	}

	[Token(Token = "0x600121B")]
	[Address(RVA = "0xA9339C", Offset = "0xA9339C", VA = "0xA9339C")]
	private void AnimateStatsBars()
	{
	}

	[Token(Token = "0x600121C")]
	[Address(RVA = "0xA939DC", Offset = "0xA939DC", VA = "0xA939DC")]
	[IteratorStateMachine(typeof(<FillRoutine>d__41))]
	private IEnumerator FillRoutine()
	{
		return null;
	}

	[Token(Token = "0x600121D")]
	[Address(RVA = "0xA93A6C", Offset = "0xA93A6C", VA = "0xA93A6C")]
	public GunShopScreen()
	{
	}
}
[Token(Token = "0x2000356")]
public class HealthIndicator : MonoBehaviour
{
	[Token(Token = "0x400166E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Canvas healthCanvas;

	[Token(Token = "0x400166F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ParticleSystem wristFX;

	[Token(Token = "0x4001670")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TextMeshProUGUI healthLeftText;

	[Token(Token = "0x4001671")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool showOnStart;

	[Token(Token = "0x4001672")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	private bool visible;

	[Token(Token = "0x6001227")]
	[Address(RVA = "0xA93C58", Offset = "0xA93C58", VA = "0xA93C58")]
	private void Start()
	{
	}

	[Token(Token = "0x6001228")]
	[Address(RVA = "0xA93C90", Offset = "0xA93C90", VA = "0xA93C90")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001229")]
	[Address(RVA = "0xA93E00", Offset = "0xA93E00", VA = "0xA93E00")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600122A")]
	[Address(RVA = "0xA93F70", Offset = "0xA93F70", VA = "0xA93F70")]
	private void UpdateHealth()
	{
	}

	[Token(Token = "0x600122B")]
	[Address(RVA = "0xA94050", Offset = "0xA94050", VA = "0xA94050")]
	private void PlayFX()
	{
	}

	[Token(Token = "0x600122C")]
	[Address(RVA = "0xA940DC", Offset = "0xA940DC", VA = "0xA940DC")]
	public void ShowCanvas(bool state)
	{
	}

	[Token(Token = "0x600122D")]
	[Address(RVA = "0xA94188", Offset = "0xA94188", VA = "0xA94188")]
	public HealthIndicator()
	{
	}
}
[Token(Token = "0x2000357")]
public class LeaderboardEntryBar : MonoBehaviour
{
	[Token(Token = "0x4001673")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Image highlight;

	[Token(Token = "0x4001674")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Image rankBG;

	[Token(Token = "0x4001675")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Image nameBG;

	[Token(Token = "0x4001676")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Image valueBG;

	[Token(Token = "0x4001677")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public TextMeshProUGUI rankLabel;

	[Token(Token = "0x4001678")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public TextMeshProUGUI nameLabel;

	[Token(Token = "0x4001679")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public TextMeshProUGUI valueLabel;

	[Token(Token = "0x400167A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public TweenScale scaler;

	[Token(Token = "0x600122E")]
	[Address(RVA = "0xA94190", Offset = "0xA94190", VA = "0xA94190")]
	private void Awake()
	{
	}

	[Token(Token = "0x600122F")]
	[Address(RVA = "0xA941E0", Offset = "0xA941E0", VA = "0xA941E0")]
	private void Start()
	{
	}

	[Token(Token = "0x6001230")]
	[Address(RVA = "0xA941E8", Offset = "0xA941E8", VA = "0xA941E8")]
	public void DisplayState(bool show)
	{
	}

	[Token(Token = "0x6001231")]
	[Address(RVA = "0xA942C4", Offset = "0xA942C4", VA = "0xA942C4")]
	public LeaderboardEntryBar()
	{
	}
}
[Token(Token = "0x2000358")]
public enum LeaderBoardMode
{
	[Token(Token = "0x400167C")]
	SCORE,
	[Token(Token = "0x400167D")]
	TIME,
	[Token(Token = "0x400167E")]
	ACCURACY
}
[Token(Token = "0x2000359")]
public enum ClassType
{
	[Token(Token = "0x4001680")]
	None,
	[Token(Token = "0x4001681")]
	Friends,
	[Token(Token = "0x4001682")]
	World,
	[Token(Token = "0x4001683")]
	Top
}
[Token(Token = "0x200035A")]
public class LeaderBoardManager : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x200035B")]
	public struct WeaponTemplate
	{
		[Token(Token = "0x40016A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public GameObject root;

		[Token(Token = "0x40016A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public GameObject[] weaponIcons;

		[Token(Token = "0x40016A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public TextMeshProUGUI weaponName;
	}

	[Token(Token = "0x200035D")]
	[CompilerGenerated]
	private sealed class <SequenceEntryBarDisplay>d__58 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40016AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40016AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40016AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LeaderBoardManager <>4__this;

		[Token(Token = "0x40016AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <count>5__2;

		[Token(Token = "0x1700020D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600125D")]
			[Address(RVA = "0xA96AB4", Offset = "0xA96AB4", VA = "0xA96AB4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700020E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600125F")]
			[Address(RVA = "0xA96AFC", Offset = "0xA96AFC", VA = "0xA96AFC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600125A")]
		[Address(RVA = "0xA96410", Offset = "0xA96410", VA = "0xA96410")]
		[DebuggerHidden]
		public <SequenceEntryBarDisplay>d__58(int <>1__state)
		{
		}

		[Token(Token = "0x600125B")]
		[Address(RVA = "0xA9697C", Offset = "0xA9697C", VA = "0xA9697C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600125C")]
		[Address(RVA = "0xA96980", Offset = "0xA96980", VA = "0xA96980", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600125E")]
		[Address(RVA = "0xA96ABC", Offset = "0xA96ABC", VA = "0xA96ABC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001684")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static LeaderBoardManager instance;

	[Token(Token = "0x4001685")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public WeaponTemplate singleWeaponPanel;

	[Token(Token = "0x4001686")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public WeaponTemplate leftWeaponPanel;

	[Token(Token = "0x4001687")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public WeaponTemplate rightWeaponPanel;

	[Token(Token = "0x4001688")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public GameObject manualReloadObject;

	[Token(Token = "0x4001689")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public GameObject autoReloadmode;

	[Token(Token = "0x400168A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public GameObject manualReloadmode;

	[Token(Token = "0x400168B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public LeaderBoardMode defaultMode;

	[Token(Token = "0x400168C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public GameObject leaderboardObject;

	[Token(Token = "0x400168D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public GameObject loadingObject;

	[Token(Token = "0x400168E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public GameObject logo;

	[Token(Token = "0x400168F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public GameObject frame;

	[Token(Token = "0x4001690")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public TextMeshProUGUI titleText;

	[Token(Token = "0x4001691")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public bool showOnstart;

	[Token(Token = "0x4001692")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	public float entryBarSequenceDelay;

	[Token(Token = "0x4001693")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public int fetchAmount;

	[Token(Token = "0x4001694")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public GameObject leaderboardEntryBarPrefab;

	[Token(Token = "0x4001695")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public LeaderboardEntryBar[] entryBars;

	[Token(Token = "0x4001696")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private WaitForSeconds sequenceWait;

	[Token(Token = "0x4001697")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public Canvas boardCanvas;

	[Token(Token = "0x4001698")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public Canvas entriesCanvas;

	[Token(Token = "0x4001699")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public SceneDataInfo currentSceneDataInfo;

	[Token(Token = "0x400169A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public string currentSceneModeId;

	[Token(Token = "0x400169B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static int currentSceneDataIndex;

	[Token(Token = "0x400169D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private LeaderBoardMode currentLBMode;

	[Token(Token = "0x400169E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
	private ClassType currentClassType;

	[Token(Token = "0x400169F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private PlatformVR LBG;

	[Token(Token = "0x40016A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private VRTouch_Button[] buttons;

	[Token(Token = "0x40016A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private int submitCounter;

	[Token(Token = "0x40016A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
	private bool waitForCommit;

	[Token(Token = "0x40016A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x115")]
	private bool isRangeLeaderboard;

	[Token(Token = "0x40016A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x116")]
	private bool getting;

	[Token(Token = "0x1700020C")]
	public string titleTextOverride
	{
		[Token(Token = "0x6001232")]
		[Address(RVA = "0xA942CC", Offset = "0xA942CC", VA = "0xA942CC")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6001233")]
		[Address(RVA = "0xA942D4", Offset = "0xA942D4", VA = "0xA942D4")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x6001234")]
	[Address(RVA = "0xA942DC", Offset = "0xA942DC", VA = "0xA942DC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001235")]
	[Address(RVA = "0xA943DC", Offset = "0xA943DC", VA = "0xA943DC")]
	private void Start()
	{
	}

	[Token(Token = "0x6001236")]
	[Address(RVA = "0xA94518", Offset = "0xA94518", VA = "0xA94518")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001237")]
	[Address(RVA = "0xA94734", Offset = "0xA94734", VA = "0xA94734")]
	private void SubmitComplete(bool success, string apiName)
	{
	}

	[Token(Token = "0x6001238")]
	[Address(RVA = "0xA94870", Offset = "0xA94870", VA = "0xA94870")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6001239")]
	[Address(RVA = "0xA944D0", Offset = "0xA944D0", VA = "0xA944D0")]
	private void SetInteractiveState(bool state)
	{
	}

	[Token(Token = "0x600123A")]
	[Address(RVA = "0xA9497C", Offset = "0xA9497C", VA = "0xA9497C")]
	public void SetModeScore()
	{
	}

	[Token(Token = "0x600123B")]
	[Address(RVA = "0xA94984", Offset = "0xA94984", VA = "0xA94984")]
	public void SetModeTime()
	{
	}

	[Token(Token = "0x600123C")]
	[Address(RVA = "0xA94990", Offset = "0xA94990", VA = "0xA94990")]
	public void SetModeAccuracy()
	{
	}

	[Token(Token = "0x600123D")]
	[Address(RVA = "0xA9499C", Offset = "0xA9499C", VA = "0xA9499C")]
	public static string CreateAPIString(VRPlatform _platform, SceneDataInfo _sceneData, string _modeId, GunData _gunData1, GunData _gunData2, LeaderBoardMode _mode, Difficulty? _difficulty, bool _manualReload)
	{
		return null;
	}

	[Token(Token = "0x600123E")]
	[Address(RVA = "0xA95074", Offset = "0xA95074", VA = "0xA95074")]
	private string GetCurrentAPIName()
	{
		return null;
	}

	[Token(Token = "0x600123F")]
	[Address(RVA = "0xA8F7AC", Offset = "0xA8F7AC", VA = "0xA8F7AC")]
	public string CreateAPIName(LeaderBoardMode mode, Difficulty? difficulty, string gameMode)
	{
		return null;
	}

	[Token(Token = "0x6001240")]
	[Address(RVA = "0xA95150", Offset = "0xA95150", VA = "0xA95150")]
	public void GetFriends()
	{
	}

	[Token(Token = "0x6001241")]
	[Address(RVA = "0xA9538C", Offset = "0xA9538C", VA = "0xA9538C")]
	public void GetWorld()
	{
	}

	[Token(Token = "0x6001242")]
	[Address(RVA = "0xA953CC", Offset = "0xA953CC", VA = "0xA953CC")]
	public void GetTop()
	{
	}

	[Token(Token = "0x6001243")]
	[Address(RVA = "0xA952CC", Offset = "0xA952CC", VA = "0xA952CC")]
	public void GetLeaderboardData(string leaderboardAPIname, ILeaderboards.LeaderboardFilterType _filterType = ILeaderboards.LeaderboardFilterType.Friends, ILeaderboards.LeaderboardStartAt _startAt = ILeaderboards.LeaderboardStartAt.CenteredOnViewerOrTop)
	{
	}

	[Token(Token = "0x6001244")]
	[Address(RVA = "0xA958D4", Offset = "0xA958D4", VA = "0xA958D4")]
	private void GetDataComplete(bool success)
	{
	}

	[Token(Token = "0x6001245")]
	[Address(RVA = "0xA95B48", Offset = "0xA95B48", VA = "0xA95B48")]
	private void FillScoreEntries()
	{
	}

	[Token(Token = "0x6001246")]
	[Address(RVA = "0xA95DC8", Offset = "0xA95DC8", VA = "0xA95DC8")]
	private void FillTimeEntries()
	{
	}

	[Token(Token = "0x6001247")]
	[Address(RVA = "0xA96114", Offset = "0xA96114", VA = "0xA96114")]
	private void FillAccuracyEntries()
	{
	}

	[Token(Token = "0x6001248")]
	[Address(RVA = "0xA958F0", Offset = "0xA958F0", VA = "0xA958F0")]
	private void UpdateUI(bool success)
	{
	}

	[Token(Token = "0x6001249")]
	[Address(RVA = "0xA963A8", Offset = "0xA963A8", VA = "0xA963A8")]
	[IteratorStateMachine(typeof(<SequenceEntryBarDisplay>d__58))]
	private IEnumerator SequenceEntryBarDisplay()
	{
		return null;
	}

	[Token(Token = "0x600124A")]
	[Address(RVA = "0xA9475C", Offset = "0xA9475C", VA = "0xA9475C")]
	private void Show()
	{
	}

	[Token(Token = "0x600124B")]
	[Address(RVA = "0xA95190", Offset = "0xA95190", VA = "0xA95190")]
	private bool InternetReachable()
	{
		return default(bool);
	}

	[Token(Token = "0x600124C")]
	[Address(RVA = "0xA8F774", Offset = "0xA8F774", VA = "0xA8F774")]
	public void StartCommit(int count)
	{
	}

	[Token(Token = "0x600124D")]
	[Address(RVA = "0xA96438", Offset = "0xA96438", VA = "0xA96438")]
	public void ShowOnCommit()
	{
	}

	[Token(Token = "0x600124E")]
	[Address(RVA = "0xA957EC", Offset = "0xA957EC", VA = "0xA957EC")]
	private void ShowLoading(bool show)
	{
	}

	[Token(Token = "0x600124F")]
	[Address(RVA = "0xA8F9F0", Offset = "0xA8F9F0", VA = "0xA8F9F0")]
	public void Show(bool skipWeaponCheck = false)
	{
	}

	[Token(Token = "0x6001250")]
	[Address(RVA = "0xA8ED50", Offset = "0xA8ED50", VA = "0xA8ED50")]
	public void Hide()
	{
	}

	[Token(Token = "0x6001251")]
	[Address(RVA = "0xA96578", Offset = "0xA96578", VA = "0xA96578")]
	public void UpdateWeapon()
	{
	}

	[Token(Token = "0x6001252")]
	[Address(RVA = "0xA96760", Offset = "0xA96760", VA = "0xA96760")]
	private void SetWeaponPanel(WeaponTemplate panel, GunType gun)
	{
	}

	[Token(Token = "0x6001253")]
	[Address(RVA = "0xA8F960", Offset = "0xA8F960", VA = "0xA8F960")]
	public void SetTitleText(string _title)
	{
	}

	[Token(Token = "0x6001254")]
	[Address(RVA = "0xA9540C", Offset = "0xA9540C", VA = "0xA9540C")]
	private void SetTitleText()
	{
	}

	[Token(Token = "0x6001255")]
	[Address(RVA = "0xA9688C", Offset = "0xA9688C", VA = "0xA9688C")]
	public LeaderBoardManager()
	{
	}
}
[Token(Token = "0x200035E")]
public class LevelScreen : MonoBehaviour
{
	[Token(Token = "0x40016AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TextMeshProUGUI title;

	[Token(Token = "0x40016AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextMeshProUGUI assignment;

	[Token(Token = "0x40016B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TextMeshProUGUI location;

	[Token(Token = "0x40016B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public TextMeshProUGUI objective;

	[Token(Token = "0x40016B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public TextMeshProUGUI description;

	[Token(Token = "0x40016B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public VRButtonGroup difficultyButtons;

	[Token(Token = "0x40016B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject startButton;

	[Token(Token = "0x40016B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject equipNotice;

	[Token(Token = "0x40016B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private int _selectedLevel;

	[Token(Token = "0x40016B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private bool levelChanged;

	[Token(Token = "0x40016B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private SceneDataInfo[] sceneData;

	[Token(Token = "0x40016B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[Header("Best Score")]
	public TextMeshProUGUI scoreValue;

	[Token(Token = "0x40016BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public TextMeshProUGUI accuracyValue;

	[Token(Token = "0x40016BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public TextMeshProUGUI timeValue;

	[Token(Token = "0x40016BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public TextMeshProUGUI bestGun;

	[Token(Token = "0x40016BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private bool initialised;

	[Token(Token = "0x1700020F")]
	public int selectedLevel
	{
		[Token(Token = "0x6001260")]
		[Address(RVA = "0xA96B04", Offset = "0xA96B04", VA = "0xA96B04")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6001261")]
		[Address(RVA = "0xA96B0C", Offset = "0xA96B0C", VA = "0xA96B0C")]
		set
		{
		}
	}

	[Token(Token = "0x6001262")]
	[Address(RVA = "0xA96B1C", Offset = "0xA96B1C", VA = "0xA96B1C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001263")]
	[Address(RVA = "0xA96B9C", Offset = "0xA96B9C", VA = "0xA96B9C")]
	private void Start()
	{
	}

	[Token(Token = "0x6001264")]
	[Address(RVA = "0xA96BD4", Offset = "0xA96BD4", VA = "0xA96BD4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001265")]
	[Address(RVA = "0xA96BBC", Offset = "0xA96BBC", VA = "0xA96BBC")]
	private void Refresh()
	{
	}

	[Token(Token = "0x6001266")]
	[Address(RVA = "0xA973A0", Offset = "0xA973A0", VA = "0xA973A0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6001267")]
	[Address(RVA = "0xA974B0", Offset = "0xA974B0", VA = "0xA974B0")]
	private void EquipmentUpdated(bool equipped, GunData gun)
	{
	}

	[Token(Token = "0x6001268")]
	[Address(RVA = "0xA96FD0", Offset = "0xA96FD0", VA = "0xA96FD0")]
	private void SetState()
	{
	}

	[Token(Token = "0x6001269")]
	[Address(RVA = "0xA974B4", Offset = "0xA974B4", VA = "0xA974B4")]
	private void UpdateBestScore()
	{
	}

	[Token(Token = "0x600126A")]
	[Address(RVA = "0xA96D08", Offset = "0xA96D08", VA = "0xA96D08")]
	private void UpdateDescription()
	{
	}

	[Token(Token = "0x600126B")]
	[Address(RVA = "0xA97C6C", Offset = "0xA97C6C", VA = "0xA97C6C")]
	public void SetEasyDifficulty()
	{
	}

	[Token(Token = "0x600126C")]
	[Address(RVA = "0xA97D74", Offset = "0xA97D74", VA = "0xA97D74")]
	public void SetNormalDifficulty()
	{
	}

	[Token(Token = "0x600126D")]
	[Address(RVA = "0xA97E7C", Offset = "0xA97E7C", VA = "0xA97E7C")]
	public void SetHardDifficulty()
	{
	}

	[Token(Token = "0x600126E")]
	[Address(RVA = "0xA97F84", Offset = "0xA97F84", VA = "0xA97F84")]
	public LevelScreen()
	{
	}
}
[Token(Token = "0x200035F")]
public class LevelSelectScreen : MonoBehaviour
{
	[Token(Token = "0x2000360")]
	[CompilerGenerated]
	private sealed class <DelayListing>d__18 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40016CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40016CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40016CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float delay;

		[Token(Token = "0x40016CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject listing;

		[Token(Token = "0x17000210")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600127A")]
			[Address(RVA = "0xA98B90", Offset = "0xA98B90", VA = "0xA98B90", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000211")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600127C")]
			[Address(RVA = "0xA98BD8", Offset = "0xA98BD8", VA = "0xA98BD8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001277")]
		[Address(RVA = "0xA98A94", Offset = "0xA98A94", VA = "0xA98A94")]
		[DebuggerHidden]
		public <DelayListing>d__18(int <>1__state)
		{
		}

		[Token(Token = "0x6001278")]
		[Address(RVA = "0xA98AD8", Offset = "0xA98AD8", VA = "0xA98AD8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001279")]
		[Address(RVA = "0xA98ADC", Offset = "0xA98ADC", VA = "0xA98ADC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600127B")]
		[Address(RVA = "0xA98B98", Offset = "0xA98B98", VA = "0xA98B98", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40016BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject levelSelectTemplate;

	[Token(Token = "0x40016BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public RectTransform levelSelectParent;

	[Token(Token = "0x40016C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TextMeshProUGUI pageLabel;

	[Token(Token = "0x40016C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public VRTouch_Button lastButton;

	[Token(Token = "0x40016C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public VRTouch_Button nextButton;

	[Token(Token = "0x40016C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public int levelsPerPage;

	[Token(Token = "0x40016C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public int currentPage;

	[Token(Token = "0x40016C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public int totalPages;

	[Token(Token = "0x40016C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float listingDelay;

	[Token(Token = "0x40016C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private List<LevelSelectTemplate> levelTemplates;

	[Token(Token = "0x40016C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private LevelSaveData[] saveData;

	[Token(Token = "0x40016C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool setup;

	[Token(Token = "0x600126F")]
	[Address(RVA = "0xA97F98", Offset = "0xA97F98", VA = "0xA97F98")]
	public void Setup()
	{
	}

	[Token(Token = "0x6001270")]
	[Address(RVA = "0xA982C0", Offset = "0xA982C0", VA = "0xA982C0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001271")]
	[Address(RVA = "0xA98654", Offset = "0xA98654", VA = "0xA98654")]
	private void FillTemplate(int levelIndex, LevelSaveData data, LevelSelectTemplate template)
	{
	}

	[Token(Token = "0x6001272")]
	[Address(RVA = "0xA982C4", Offset = "0xA982C4", VA = "0xA982C4")]
	private void RefreshTemplates()
	{
	}

	[Token(Token = "0x6001273")]
	[Address(RVA = "0xA989E0", Offset = "0xA989E0", VA = "0xA989E0")]
	public void NextPage()
	{
	}

	[Token(Token = "0x6001274")]
	[Address(RVA = "0xA98A40", Offset = "0xA98A40", VA = "0xA98A40")]
	public void LastPage()
	{
	}

	[Token(Token = "0x6001275")]
	[Address(RVA = "0xA98968", Offset = "0xA98968", VA = "0xA98968")]
	[IteratorStateMachine(typeof(<DelayListing>d__18))]
	private IEnumerator DelayListing(float delay, GameObject listing)
	{
		return null;
	}

	[Token(Token = "0x6001276")]
	[Address(RVA = "0xA98ABC", Offset = "0xA98ABC", VA = "0xA98ABC")]
	public LevelSelectScreen()
	{
	}
}
[Token(Token = "0x2000361")]
public class LevelSelectTemplate : MonoBehaviour
{
	[Token(Token = "0x40016CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Color lockedStarColor;

	[Token(Token = "0x40016CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Color unlockedStarColor;

	[Token(Token = "0x40016D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public TextMeshProUGUI label;

	[Token(Token = "0x40016D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public TextMeshProUGUI title;

	[Token(Token = "0x40016D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public LevelStarWidget stars;

	[Token(Token = "0x40016D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public VRTouch_Button button;

	[Token(Token = "0x600127D")]
	[Address(RVA = "0xA987F8", Offset = "0xA987F8", VA = "0xA987F8")]
	public void SetDisabled()
	{
	}

	[Token(Token = "0x600127E")]
	[Address(RVA = "0xA98868", Offset = "0xA98868", VA = "0xA98868")]
	public void SetEnabled()
	{
	}

	[Token(Token = "0x600127F")]
	[Address(RVA = "0xA98BE0", Offset = "0xA98BE0", VA = "0xA98BE0")]
	public LevelSelectTemplate()
	{
	}
}
[Token(Token = "0x2000362")]
public class LevelStarWidget : MonoBehaviour
{
	[Token(Token = "0x40016D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Image[] stars;

	[Token(Token = "0x40016D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Color activeColor;

	[Token(Token = "0x40016D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Color inactiveColor;

	[Token(Token = "0x6001280")]
	[Address(RVA = "0xA988D8", Offset = "0xA988D8", VA = "0xA988D8")]
	public void SetStars(int count)
	{
	}

	[Token(Token = "0x6001281")]
	[Address(RVA = "0xA98BE8", Offset = "0xA98BE8", VA = "0xA98BE8")]
	public LevelStarWidget()
	{
	}
}
[Token(Token = "0x2000363")]
public class MenuPopout : MonoBehaviour
{
	[Token(Token = "0x2000364")]
	[CompilerGenerated]
	private sealed class <TweenRoutine>d__21 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40016E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40016E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40016E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MenuPopout <>4__this;

		[Token(Token = "0x40016E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <time>5__2;

		[Token(Token = "0x40016E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector3 <targetScale>5__3;

		[Token(Token = "0x17000212")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600128E")]
			[Address(RVA = "0xA997AC", Offset = "0xA997AC", VA = "0xA997AC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000213")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001290")]
			[Address(RVA = "0xA997F4", Offset = "0xA997F4", VA = "0xA997F4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600128B")]
		[Address(RVA = "0xA99408", Offset = "0xA99408", VA = "0xA99408")]
		[DebuggerHidden]
		public <TweenRoutine>d__21(int <>1__state)
		{
		}

		[Token(Token = "0x600128C")]
		[Address(RVA = "0xA99448", Offset = "0xA99448", VA = "0xA99448", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600128D")]
		[Address(RVA = "0xA9944C", Offset = "0xA9944C", VA = "0xA9944C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600128F")]
		[Address(RVA = "0xA997B4", Offset = "0xA997B4", VA = "0xA997B4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40016D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static MenuPopout instance;

	[Token(Token = "0x40016D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Canvas canvas;

	[Token(Token = "0x40016D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform tweenTransform;

	[Token(Token = "0x40016DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AnimationCurve tweenCurve;

	[Token(Token = "0x40016DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float tweenDuration;

	[Token(Token = "0x40016DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public Vector3 headOffset;

	[Token(Token = "0x40016DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject scoreScreen;

	[Token(Token = "0x40016DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject settingsScreen;

	[Token(Token = "0x40016DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public BoxCollider handPoseTrigger;

	[Token(Token = "0x40016E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Transform xForm;

	[Token(Token = "0x40016E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Transform playerRoot;

	[Token(Token = "0x40016E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private bool tweening;

	[Token(Token = "0x40016E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
	private bool open;

	[Token(Token = "0x40016E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
	private bool firstTime;

	[Token(Token = "0x6001282")]
	[Address(RVA = "0xA98BF0", Offset = "0xA98BF0", VA = "0xA98BF0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001283")]
	[Address(RVA = "0xA98C4C", Offset = "0xA98C4C", VA = "0xA98C4C")]
	private void Start()
	{
	}

	[Token(Token = "0x6001284")]
	[Address(RVA = "0xA98CA8", Offset = "0xA98CA8", VA = "0xA98CA8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001285")]
	[Address(RVA = "0xA98E34", Offset = "0xA98E34", VA = "0xA98E34")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6001286")]
	[Address(RVA = "0xA98FC0", Offset = "0xA98FC0", VA = "0xA98FC0")]
	private void OnLevelLoaded()
	{
	}

	[Token(Token = "0x6001287")]
	[Address(RVA = "0xA99044", Offset = "0xA99044", VA = "0xA99044")]
	public void TogglePopoutWristButton()
	{
	}

	[Token(Token = "0x6001288")]
	[Address(RVA = "0xA992AC", Offset = "0xA992AC", VA = "0xA992AC")]
	public void TogglePopout()
	{
	}

	[Token(Token = "0x6001289")]
	[Address(RVA = "0xA99244", Offset = "0xA99244", VA = "0xA99244")]
	[IteratorStateMachine(typeof(<TweenRoutine>d__21))]
	private IEnumerator TweenRoutine()
	{
		return null;
	}

	[Token(Token = "0x600128A")]
	[Address(RVA = "0xA99430", Offset = "0xA99430", VA = "0xA99430")]
	public MenuPopout()
	{
	}
}
[Token(Token = "0x2000365")]
public class MenuScreen : MonoBehaviour
{
	[Token(Token = "0x2000366")]
	[CompilerGenerated]
	private sealed class <SequenceButtons>d__20 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40016FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40016FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40016FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MenuScreen <>4__this;

		[Token(Token = "0x40016FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <i>5__2;

		[Token(Token = "0x17000214")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600129A")]
			[Address(RVA = "0xA99E58", Offset = "0xA99E58", VA = "0xA99E58", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000215")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600129C")]
			[Address(RVA = "0xA99EA0", Offset = "0xA99EA0", VA = "0xA99EA0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001297")]
		[Address(RVA = "0xA99D18", Offset = "0xA99D18", VA = "0xA99D18")]
		[DebuggerHidden]
		public <SequenceButtons>d__20(int <>1__state)
		{
		}

		[Token(Token = "0x6001298")]
		[Address(RVA = "0xA99D54", Offset = "0xA99D54", VA = "0xA99D54", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001299")]
		[Address(RVA = "0xA99D58", Offset = "0xA99D58", VA = "0xA99D58", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600129B")]
		[Address(RVA = "0xA99E60", Offset = "0xA99E60", VA = "0xA99E60", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40016EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float sequenceRate;

	[Token(Token = "0x40016EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TweenScale[] buttonsTweeners;

	[Token(Token = "0x40016EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public VRTouch_Button tutorial;

	[Token(Token = "0x40016ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public VRTouch_Button assignments;

	[Token(Token = "0x40016EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public VRTouch_Button achievements;

	[Token(Token = "0x40016EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public VRTouch_Button shop;

	[Token(Token = "0x40016F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public VRTouch_Button credits;

	[Token(Token = "0x40016F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public VRTouch_Button firingRangeButton;

	[Token(Token = "0x40016F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public VRTouch_Button options;

	[Token(Token = "0x40016F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public VRTouch_Button rewards;

	[Token(Token = "0x40016F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public VRTouch_Button releaseNotes;

	[Token(Token = "0x40016F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public GameObject newGunAvailable;

	[Token(Token = "0x40016F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public GameObject newAssignmentAvailable;

	[Token(Token = "0x40016F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public GameObject newAchievementComplete;

	[Token(Token = "0x40016F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public GameObject dailyRewardScreen;

	[Token(Token = "0x40016F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static bool displayedDailyRewards;

	[Token(Token = "0x6001291")]
	[Address(RVA = "0xA997FC", Offset = "0xA997FC", VA = "0xA997FC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001292")]
	[Address(RVA = "0xA9996C", Offset = "0xA9996C", VA = "0xA9996C")]
	private void CheckIfGunsAvailabel()
	{
	}

	[Token(Token = "0x6001293")]
	[Address(RVA = "0xA99A60", Offset = "0xA99A60", VA = "0xA99A60")]
	private void CheckIfAssignmentAvailable()
	{
	}

	[Token(Token = "0x6001294")]
	[Address(RVA = "0xA99B04", Offset = "0xA99B04", VA = "0xA99B04")]
	private void CheckIfAchievementComplete()
	{
	}

	[Token(Token = "0x6001295")]
	[Address(RVA = "0xA99CB0", Offset = "0xA99CB0", VA = "0xA99CB0")]
	[IteratorStateMachine(typeof(<SequenceButtons>d__20))]
	private IEnumerator SequenceButtons()
	{
		return null;
	}

	[Token(Token = "0x6001296")]
	[Address(RVA = "0xA99D40", Offset = "0xA99D40", VA = "0xA99D40")]
	public MenuScreen()
	{
	}
}
[Token(Token = "0x2000367")]
public class OptionsScreen : MonoBehaviour
{
	[Token(Token = "0x600129D")]
	[Address(RVA = "0xA99EA8", Offset = "0xA99EA8", VA = "0xA99EA8")]
	public void SetRenderScaleLow()
	{
	}

	[Token(Token = "0x600129E")]
	[Address(RVA = "0xA99EB8", Offset = "0xA99EB8", VA = "0xA99EB8")]
	public void SetRenderScaleNormal()
	{
	}

	[Token(Token = "0x600129F")]
	[Address(RVA = "0xA99EC4", Offset = "0xA99EC4", VA = "0xA99EC4")]
	public void SetRenderScaleHigh()
	{
	}

	[Token(Token = "0x60012A0")]
	[Address(RVA = "0xA99ED4", Offset = "0xA99ED4", VA = "0xA99ED4")]
	public void SetRenderScaleHighest()
	{
	}

	[Token(Token = "0x60012A1")]
	[Address(RVA = "0xA99EE0", Offset = "0xA99EE0", VA = "0xA99EE0")]
	public OptionsScreen()
	{
	}
}
[Token(Token = "0x2000368")]
public class OrnamentShopScreen : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000369")]
	public class PurchaseButton
	{
		[Token(Token = "0x400170D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public VRTouch_Button button;

		[Token(Token = "0x400170E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TextMeshProUGUI purchaseLabel;

		[Token(Token = "0x60012B4")]
		[Address(RVA = "0xA9B314", Offset = "0xA9B314", VA = "0xA9B314")]
		public PurchaseButton()
		{
		}
	}

	[Token(Token = "0x40016FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TextMeshProUGUI weaponNameLabel;

	[Token(Token = "0x40016FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public VRTouch_Button prevButton;

	[Token(Token = "0x4001700")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public VRTouch_Button nextButton;

	[Token(Token = "0x4001701")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public PurchaseButton purchaseButton;

	[Token(Token = "0x4001702")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public VRButtonGroup buttonGroup;

	[Token(Token = "0x4001703")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public TextMeshProUGUI currencyLabel;

	[Token(Token = "0x4001704")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public TextMeshProUGUI promptLabel;

	[Token(Token = "0x4001705")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Image[] weaponImages;

	[Token(Token = "0x4001706")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public EntityProjector projector;

	[Token(Token = "0x4001707")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private GloveSelectTemplate[] weaponTemplates;

	[Token(Token = "0x4001708")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float fillDuration;

	[Token(Token = "0x4001709")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private int currentIndex;

	[Token(Token = "0x400170A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private int selectedIndex;

	[Token(Token = "0x400170B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private int lastIndex;

	[Token(Token = "0x400170C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Image lastImage;

	[Token(Token = "0x60012A2")]
	[Address(RVA = "0xA99EE8", Offset = "0xA99EE8", VA = "0xA99EE8")]
	private void Awake()
	{
	}

	[Token(Token = "0x60012A3")]
	[Address(RVA = "0xA99F3C", Offset = "0xA99F3C", VA = "0xA99F3C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60012A4")]
	[Address(RVA = "0xA9A660", Offset = "0xA9A660", VA = "0xA9A660")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60012A5")]
	[Address(RVA = "0xA9A7E8", Offset = "0xA9A7E8", VA = "0xA9A7E8")]
	private void EquipmentUpdated(bool equipped, GunData info)
	{
	}

	[Token(Token = "0x60012A6")]
	[Address(RVA = "0xA9A7EC", Offset = "0xA9A7EC", VA = "0xA9A7EC")]
	private WeaponVariantData GetSelectedWeaponVariant()
	{
		return null;
	}

	[Token(Token = "0x60012A7")]
	[Address(RVA = "0xA9A840", Offset = "0xA9A840", VA = "0xA9A840")]
	private WeaponData GetSelectedWeapon()
	{
		return null;
	}

	[Token(Token = "0x60012A8")]
	[Address(RVA = "0xA9A868", Offset = "0xA9A868", VA = "0xA9A868")]
	public void RefreshPurchaseButton()
	{
	}

	[Token(Token = "0x60012A9")]
	[Address(RVA = "0xA9AA08", Offset = "0xA9AA08", VA = "0xA9AA08")]
	private bool WeaponEquipped(GunType weaponType)
	{
		return default(bool);
	}

	[Token(Token = "0x60012AA")]
	[Address(RVA = "0xA9ABC4", Offset = "0xA9ABC4", VA = "0xA9ABC4")]
	private bool WeaponVariantEquipped(string variant)
	{
		return default(bool);
	}

	[Token(Token = "0x60012AB")]
	[Address(RVA = "0xA9A0D4", Offset = "0xA9A0D4", VA = "0xA9A0D4")]
	public void Refresh()
	{
	}

	[Token(Token = "0x60012AC")]
	[Address(RVA = "0xA9ADE0", Offset = "0xA9ADE0", VA = "0xA9ADE0")]
	public void WeaponVariantSelected(int index)
	{
	}

	[Token(Token = "0x60012AD")]
	[Address(RVA = "0xA9ADEC", Offset = "0xA9ADEC", VA = "0xA9ADEC")]
	private void WeaponVariantChanged(bool _purchased)
	{
	}

	[Token(Token = "0x60012AE")]
	[Address(RVA = "0xA9AEDC", Offset = "0xA9AEDC", VA = "0xA9AEDC")]
	public void ApplyWeaponVariant(bool highlight)
	{
	}

	[Token(Token = "0x60012AF")]
	[Address(RVA = "0xA9AF48", Offset = "0xA9AF48", VA = "0xA9AF48")]
	public void Purchase()
	{
	}

	[Token(Token = "0x60012B0")]
	[Address(RVA = "0xA9A658", Offset = "0xA9A658", VA = "0xA9A658")]
	public void NextWeapon()
	{
	}

	[Token(Token = "0x60012B1")]
	[Address(RVA = "0xA9B2F4", Offset = "0xA9B2F4", VA = "0xA9B2F4")]
	public void PreviousWeapon()
	{
	}

	[Token(Token = "0x60012B2")]
	[Address(RVA = "0xA9B158", Offset = "0xA9B158", VA = "0xA9B158")]
	private void CycleWeapon(bool forward)
	{
	}

	[Token(Token = "0x60012B3")]
	[Address(RVA = "0xA9B2FC", Offset = "0xA9B2FC", VA = "0xA9B2FC")]
	public OrnamentShopScreen()
	{
	}
}
[Token(Token = "0x200036A")]
public class OverlayCanvas : MonoBehaviour
{
	[Token(Token = "0x200036B")]
	[CompilerGenerated]
	private sealed class <ClearRoutine>d__19 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400171A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400171B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400171C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public OverlayCanvas <>4__this;

		[Token(Token = "0x17000216")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60012C6")]
			[Address(RVA = "0xA9C2F0", Offset = "0xA9C2F0", VA = "0xA9C2F0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000217")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60012C8")]
			[Address(RVA = "0xA9C338", Offset = "0xA9C338", VA = "0xA9C338", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60012C3")]
		[Address(RVA = "0xA9BF60", Offset = "0xA9BF60", VA = "0xA9BF60")]
		[DebuggerHidden]
		public <ClearRoutine>d__19(int <>1__state)
		{
		}

		[Token(Token = "0x60012C4")]
		[Address(RVA = "0xA9C208", Offset = "0xA9C208", VA = "0xA9C208", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60012C5")]
		[Address(RVA = "0xA9C20C", Offset = "0xA9C20C", VA = "0xA9C20C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60012C7")]
		[Address(RVA = "0xA9C2F8", Offset = "0xA9C2F8", VA = "0xA9C2F8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400170F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Button cameraButton;

	[Token(Token = "0x4001710")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextMeshProUGUI modeLabel;

	[Token(Token = "0x4001711")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Image fadeImage;

	[Token(Token = "0x4001712")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject deathMessage;

	[Token(Token = "0x4001713")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject clearMessage;

	[Token(Token = "0x4001714")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public TweenColor heartColor;

	[Token(Token = "0x4001715")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public TweenColor hitTween;

	[Token(Token = "0x4001716")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Image loadingLogo;

	[Token(Token = "0x4001717")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Canvas canvas;

	[Token(Token = "0x4001718")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Canvas gameCanvas;

	[Token(Token = "0x4001719")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private ScoreDisplay scoreDisplay;

	[Token(Token = "0x60012B5")]
	[Address(RVA = "0xA9B31C", Offset = "0xA9B31C", VA = "0xA9B31C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60012B6")]
	[Address(RVA = "0xA9B404", Offset = "0xA9B404", VA = "0xA9B404")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60012B7")]
	[Address(RVA = "0xA9B898", Offset = "0xA9B898", VA = "0xA9B898")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60012B8")]
	[Address(RVA = "0xA9BC70", Offset = "0xA9BC70", VA = "0xA9BC70")]
	private void Loading()
	{
	}

	[Token(Token = "0x60012B9")]
	[Address(RVA = "0xA9BC90", Offset = "0xA9BC90", VA = "0xA9BC90")]
	private void SceneLoaded()
	{
	}

	[Token(Token = "0x60012BA")]
	[Address(RVA = "0xA9BD48", Offset = "0xA9BD48", VA = "0xA9BD48")]
	private void LevelStarted()
	{
	}

	[Token(Token = "0x60012BB")]
	[Address(RVA = "0xA9BEB8", Offset = "0xA9BEB8", VA = "0xA9BEB8")]
	private void ShowDeath()
	{
	}

	[Token(Token = "0x60012BC")]
	[Address(RVA = "0xA9BED8", Offset = "0xA9BED8", VA = "0xA9BED8")]
	private void ShowClear()
	{
	}

	[Token(Token = "0x60012BD")]
	[Address(RVA = "0xA9BEF8", Offset = "0xA9BEF8", VA = "0xA9BEF8")]
	[IteratorStateMachine(typeof(<ClearRoutine>d__19))]
	private IEnumerator ClearRoutine()
	{
		return null;
	}

	[Token(Token = "0x60012BE")]
	[Address(RVA = "0xA9BF88", Offset = "0xA9BF88", VA = "0xA9BF88")]
	private void PlayerHit()
	{
	}

	[Token(Token = "0x60012BF")]
	[Address(RVA = "0xA9BFC0", Offset = "0xA9BFC0", VA = "0xA9BFC0")]
	private void ChangeCamera()
	{
	}

	[Token(Token = "0x60012C0")]
	[Address(RVA = "0xA9B7E4", Offset = "0xA9B7E4", VA = "0xA9B7E4")]
	private void UpdateLabel()
	{
	}

	[Token(Token = "0x60012C1")]
	[Address(RVA = "0xA9C030", Offset = "0xA9C030", VA = "0xA9C030")]
	private void Update()
	{
	}

	[Token(Token = "0x60012C2")]
	[Address(RVA = "0xA9C200", Offset = "0xA9C200", VA = "0xA9C200")]
	public OverlayCanvas()
	{
	}
}
[Token(Token = "0x200036C")]
public class PointPopper : MonoBehaviour
{
	[Token(Token = "0x400171D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static PointPopper instance;

	[Token(Token = "0x400171E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float minForce;

	[Token(Token = "0x400171F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float maxForce;

	[Token(Token = "0x4001720")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int poolSize;

	[Token(Token = "0x4001721")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float pointLifeTime;

	[Token(Token = "0x4001722")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject pointTemplate;

	[Token(Token = "0x4001723")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private PointPopperPoint[] pool;

	[Token(Token = "0x4001724")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int poolIndex;

	[Token(Token = "0x60012C9")]
	[Address(RVA = "0xA9C340", Offset = "0xA9C340", VA = "0xA9C340")]
	private void Awake()
	{
	}

	[Token(Token = "0x60012CA")]
	[Address(RVA = "0xA9C390", Offset = "0xA9C390", VA = "0xA9C390")]
	private void CreatePool()
	{
	}

	[Token(Token = "0x60012CB")]
	[Address(RVA = "0xA9C524", Offset = "0xA9C524", VA = "0xA9C524")]
	public void PopPoints(Vector3 pos, int points, bool dynamic = true, bool isPoints = true)
	{
	}

	[Token(Token = "0x60012CC")]
	[Address(RVA = "0xA9C8C0", Offset = "0xA9C8C0", VA = "0xA9C8C0")]
	public PointPopper()
	{
	}
}
[Token(Token = "0x200036D")]
public class PointPopperPoint : MonoBehaviour
{
	[Token(Token = "0x4001725")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TextMeshProUGUI label;

	[Token(Token = "0x4001726")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Rigidbody rBody;

	[Token(Token = "0x4001727")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform xForm;

	[Token(Token = "0x4001728")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float lifeTime;

	[Token(Token = "0x4001729")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public TweenColor tweener;

	[Token(Token = "0x60012CD")]
	[Address(RVA = "0xA9C8D4", Offset = "0xA9C8D4", VA = "0xA9C8D4")]
	public void LateUpdate()
	{
	}

	[Token(Token = "0x60012CE")]
	[Address(RVA = "0xA9C988", Offset = "0xA9C988", VA = "0xA9C988")]
	public PointPopperPoint()
	{
	}
}
[Token(Token = "0x200036E")]
public class ScoreDisplay : MonoBehaviour
{
	[Token(Token = "0x200036F")]
	[CompilerGenerated]
	private sealed class <UpdateClockRoutine>d__26 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400173B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400173C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400173D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ScoreDisplay <>4__this;

		[Token(Token = "0x17000218")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60012DD")]
			[Address(RVA = "0xA9D930", Offset = "0xA9D930", VA = "0xA9D930", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000219")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60012DF")]
			[Address(RVA = "0xA9D978", Offset = "0xA9D978", VA = "0xA9D978", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60012DA")]
		[Address(RVA = "0xA9D8B4", Offset = "0xA9D8B4", VA = "0xA9D8B4")]
		[DebuggerHidden]
		public <UpdateClockRoutine>d__26(int <>1__state)
		{
		}

		[Token(Token = "0x60012DB")]
		[Address(RVA = "0xA9D8E4", Offset = "0xA9D8E4", VA = "0xA9D8E4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60012DC")]
		[Address(RVA = "0xA9D8E8", Offset = "0xA9D8E8", VA = "0xA9D8E8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60012DE")]
		[Address(RVA = "0xA9D938", Offset = "0xA9D938", VA = "0xA9D938", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400172A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TextMeshProUGUI title;

	[Token(Token = "0x400172B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextMeshProUGUI scoreValue;

	[Token(Token = "0x400172C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TextMeshProUGUI accuracyValue;

	[Token(Token = "0x400172D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public TextMeshProUGUI timeValue;

	[Token(Token = "0x400172E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public TextMeshProUGUI accuracyBonusValue;

	[Token(Token = "0x400172F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public TextMeshProUGUI timeBonusValue;

	[Token(Token = "0x4001730")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public TextMeshProUGUI difficultyScoreValue;

	[Token(Token = "0x4001731")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public TextMeshProUGUI finalScoreValue;

	[Token(Token = "0x4001732")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public TextMeshProUGUI shotsFiredValue;

	[Token(Token = "0x4001733")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public TextMeshProUGUI targetsHitValue;

	[Token(Token = "0x4001734")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private WristDisplayController wristController;

	[Token(Token = "0x4001735")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public bool displayBonus;

	[Token(Token = "0x4001736")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
	public bool showOnEnable;

	[Token(Token = "0x4001737")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x72")]
	public bool isOverlay;

	[Token(Token = "0x4001738")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[Header("Events")]
	public UnityEvent onVisible;

	[Token(Token = "0x4001739")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public UnityEvent onHide;

	[Token(Token = "0x400173A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private bool visible;

	[Token(Token = "0x60012CF")]
	[Address(RVA = "0xA9C990", Offset = "0xA9C990", VA = "0xA9C990")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60012D0")]
	[Address(RVA = "0xA9D460", Offset = "0xA9D460", VA = "0xA9D460")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60012D1")]
	[Address(RVA = "0xA9D7BC", Offset = "0xA9D7BC", VA = "0xA9D7BC")]
	private void LevelStarted()
	{
	}

	[Token(Token = "0x60012D2")]
	[Address(RVA = "0xA9D7C4", Offset = "0xA9D7C4", VA = "0xA9D7C4")]
	private void LevelComplete()
	{
	}

	[Token(Token = "0x60012D3")]
	[Address(RVA = "0xA9D7CC", Offset = "0xA9D7CC", VA = "0xA9D7CC")]
	private void UpdateCheck(bool _state)
	{
	}

	[Token(Token = "0x60012D4")]
	[Address(RVA = "0xA9CD58", Offset = "0xA9CD58", VA = "0xA9CD58")]
	private void UpdateValues(bool _state)
	{
	}

	[Token(Token = "0x60012D5")]
	[Address(RVA = "0xA9D2DC", Offset = "0xA9D2DC", VA = "0xA9D2DC")]
	private void UpdateClock()
	{
	}

	[Token(Token = "0x60012D6")]
	[Address(RVA = "0xA9BDA8", Offset = "0xA9BDA8", VA = "0xA9BDA8")]
	public void Show()
	{
	}

	[Token(Token = "0x60012D7")]
	[Address(RVA = "0xA9BD1C", Offset = "0xA9BD1C", VA = "0xA9BD1C")]
	public void Hide()
	{
	}

	[Token(Token = "0x60012D8")]
	[Address(RVA = "0xA9D84C", Offset = "0xA9D84C", VA = "0xA9D84C")]
	[IteratorStateMachine(typeof(<UpdateClockRoutine>d__26))]
	private IEnumerator UpdateClockRoutine()
	{
		return null;
	}

	[Token(Token = "0x60012D9")]
	[Address(RVA = "0xA9D8DC", Offset = "0xA9D8DC", VA = "0xA9D8DC")]
	public ScoreDisplay()
	{
	}
}
[Token(Token = "0x2000370")]
public class SettingsScreen : MonoBehaviour
{
	[Token(Token = "0x2000371")]
	public enum SettingsScreenMode
	{
		[Token(Token = "0x400176A")]
		GAME,
		[Token(Token = "0x400176B")]
		CONTROLS,
		[Token(Token = "0x400176C")]
		AUDIO,
		[Token(Token = "0x400176D")]
		RENDER
	}

	[Token(Token = "0x400173E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SettingsScreenMode currentMode;

	[Token(Token = "0x400173F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject gameParent;

	[Token(Token = "0x4001740")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject controlsParent;

	[Token(Token = "0x4001741")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject offsetsParent;

	[Token(Token = "0x4001742")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject audioParent;

	[Token(Token = "0x4001743")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject renderParent;

	[Token(Token = "0x4001744")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public VRTouch_Slider smoothRateSlider;

	[Token(Token = "0x4001745")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public VRTouch_Slider musicVolumeSlider;

	[Token(Token = "0x4001746")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public TextMeshProUGUI musicVolumeValueLabel;

	[Token(Token = "0x4001747")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public VRTouch_Slider masterVolumeSlider;

	[Token(Token = "0x4001748")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public TextMeshProUGUI masterVolumeValueLabel;

	[Token(Token = "0x4001749")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public int snapAngles;

	[Token(Token = "0x400174A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public TextMeshProUGUI smoothValueLabel;

	[Token(Token = "0x400174B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public TextMeshProUGUI snapValueLabel;

	[Token(Token = "0x400174C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public TextMeshProUGUI renderScaleValueLabel;

	[Token(Token = "0x400174D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public TextMeshProUGUI fpsValueLabel;

	[Token(Token = "0x400174E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public VRButtonGroup grabGroup;

	[Token(Token = "0x400174F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public VRButtonGroup snapGroup;

	[Token(Token = "0x4001750")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public VRButtonGroup reloadGroup;

	[Token(Token = "0x4001751")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public VRButtonGroup ammoGroup;

	[Token(Token = "0x4001752")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public VRButtonGroup forwardGroup;

	[Token(Token = "0x4001753")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public GameObject spectatorParent;

	[Token(Token = "0x4001754")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public GameObject shadowsParent;

	[Token(Token = "0x4001755")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public GameObject renderScaleParent;

	[Token(Token = "0x4001756")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public GameObject frameRateParent;

	[Token(Token = "0x4001757")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public GameObject forceTubeParent;

	[Token(Token = "0x4001758")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private int currentSnapAngle;

	[Token(Token = "0x4001759")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	private float currentSmoothRate;

	[Token(Token = "0x400175A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private float currentMusicVolume;

	[Token(Token = "0x400175B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	private float currentMasterVolume;

	[Token(Token = "0x400175C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public Image musicOn;

	[Token(Token = "0x400175D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public Image musicOff;

	[Token(Token = "0x400175E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public Image swapOn;

	[Token(Token = "0x400175F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public Image swapOff;

	[Token(Token = "0x4001760")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public Image spectatorOn;

	[Token(Token = "0x4001761")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public Image spectatorOff;

	[Token(Token = "0x4001762")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	public Image blinkOn;

	[Token(Token = "0x4001763")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	public Image blinkOff;

	[Token(Token = "0x4001764")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public Image shadowsOn;

	[Token(Token = "0x4001765")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public Image shadowsOff;

	[Token(Token = "0x4001766")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public Image forceOn;

	[Token(Token = "0x4001767")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public Image forceOff;

	[Token(Token = "0x4001768")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	private GameObject activeParent;

	[Token(Token = "0x60012E0")]
	[Address(RVA = "0xA9D980", Offset = "0xA9D980", VA = "0xA9D980")]
	private void Awake()
	{
	}

	[Token(Token = "0x60012E1")]
	[Address(RVA = "0xA9DAE4", Offset = "0xA9DAE4", VA = "0xA9DAE4")]
	private void Start()
	{
	}

	[Token(Token = "0x60012E2")]
	[Address(RVA = "0xA9DC90", Offset = "0xA9DC90", VA = "0xA9DC90")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60012E3")]
	[Address(RVA = "0xA9E1A4", Offset = "0xA9E1A4", VA = "0xA9E1A4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60012E4")]
	[Address(RVA = "0xA9E1AC", Offset = "0xA9E1AC", VA = "0xA9E1AC")]
	public void ToggleMusic()
	{
	}

	[Token(Token = "0x60012E5")]
	[Address(RVA = "0xA9E07C", Offset = "0xA9E07C", VA = "0xA9E07C")]
	private void SetMusicIcon()
	{
	}

	[Token(Token = "0x60012E6")]
	[Address(RVA = "0xA9E20C", Offset = "0xA9E20C", VA = "0xA9E20C")]
	public void onMusicVolumeChanged(float value)
	{
	}

	[Token(Token = "0x60012E7")]
	[Address(RVA = "0xA9E2BC", Offset = "0xA9E2BC", VA = "0xA9E2BC")]
	public void onMasterVolumeChanged(float value)
	{
	}

	[Token(Token = "0x60012E8")]
	[Address(RVA = "0xA9E36C", Offset = "0xA9E36C", VA = "0xA9E36C")]
	public void SetModeGame()
	{
	}

	[Token(Token = "0x60012E9")]
	[Address(RVA = "0xA9E54C", Offset = "0xA9E54C", VA = "0xA9E54C")]
	public void SetModeControls()
	{
	}

	[Token(Token = "0x60012EA")]
	[Address(RVA = "0xA9E554", Offset = "0xA9E554", VA = "0xA9E554")]
	public void SetModeAudio()
	{
	}

	[Token(Token = "0x60012EB")]
	[Address(RVA = "0xA9E55C", Offset = "0xA9E55C", VA = "0xA9E55C")]
	public void SetModeRender()
	{
	}

	[Token(Token = "0x60012EC")]
	[Address(RVA = "0xA9E374", Offset = "0xA9E374", VA = "0xA9E374")]
	private void SwitchMode(SettingsScreenMode _mode)
	{
	}

	[Token(Token = "0x60012ED")]
	[Address(RVA = "0xA9E564", Offset = "0xA9E564", VA = "0xA9E564")]
	public void SetSnapMode()
	{
	}

	[Token(Token = "0x60012EE")]
	[Address(RVA = "0xA9E5BC", Offset = "0xA9E5BC", VA = "0xA9E5BC")]
	public void SetSmoothMode()
	{
	}

	[Token(Token = "0x60012EF")]
	[Address(RVA = "0xA9E614", Offset = "0xA9E614", VA = "0xA9E614")]
	public void onSmoothRateChange(float rate)
	{
	}

	[Token(Token = "0x60012F0")]
	[Address(RVA = "0xA9E6D4", Offset = "0xA9E6D4", VA = "0xA9E6D4")]
	public void IncrementSnap()
	{
	}

	[Token(Token = "0x60012F1")]
	[Address(RVA = "0xA9E784", Offset = "0xA9E784", VA = "0xA9E784")]
	public void DecrementSnap()
	{
	}

	[Token(Token = "0x60012F2")]
	[Address(RVA = "0xA9E834", Offset = "0xA9E834", VA = "0xA9E834")]
	public void SetGrabToggle()
	{
	}

	[Token(Token = "0x60012F3")]
	[Address(RVA = "0xA9E88C", Offset = "0xA9E88C", VA = "0xA9E88C")]
	public void SetGrabHold()
	{
	}

	[Token(Token = "0x60012F4")]
	[Address(RVA = "0xA9E8E4", Offset = "0xA9E8E4", VA = "0xA9E8E4")]
	public void IncrementFPS()
	{
	}

	[Token(Token = "0x60012F5")]
	[Address(RVA = "0xA9E9E4", Offset = "0xA9E9E4", VA = "0xA9E9E4")]
	public void DecrementFPS()
	{
	}

	[Token(Token = "0x60012F6")]
	[Address(RVA = "0xA9EAE4", Offset = "0xA9EAE4", VA = "0xA9EAE4")]
	public void IncrementScale()
	{
	}

	[Token(Token = "0x60012F7")]
	[Address(RVA = "0xA9EB90", Offset = "0xA9EB90", VA = "0xA9EB90")]
	public void DecrementScale()
	{
	}

	[Token(Token = "0x60012F8")]
	[Address(RVA = "0xA9EC3C", Offset = "0xA9EC3C", VA = "0xA9EC3C")]
	public void DefaultRender()
	{
	}

	[Token(Token = "0x60012F9")]
	[Address(RVA = "0xA9ED24", Offset = "0xA9ED24", VA = "0xA9ED24")]
	public void SetAutoReload()
	{
	}

	[Token(Token = "0x60012FA")]
	[Address(RVA = "0xA9EEA0", Offset = "0xA9EEA0", VA = "0xA9EEA0")]
	public void SetManualReload()
	{
	}

	[Token(Token = "0x60012FB")]
	[Address(RVA = "0xA9EEF8", Offset = "0xA9EEF8", VA = "0xA9EEF8")]
	public void SetShowAmmoCounters()
	{
	}

	[Token(Token = "0x60012FC")]
	[Address(RVA = "0xA9EF60", Offset = "0xA9EF60", VA = "0xA9EF60")]
	public void SetHideAmmoCounters()
	{
	}

	[Token(Token = "0x60012FD")]
	[Address(RVA = "0xA9EFC8", Offset = "0xA9EFC8", VA = "0xA9EFC8")]
	public void SetHeadForward()
	{
	}

	[Token(Token = "0x60012FE")]
	[Address(RVA = "0xA9F020", Offset = "0xA9F020", VA = "0xA9F020")]
	public void SetPointForward()
	{
	}

	[Token(Token = "0x60012FF")]
	[Address(RVA = "0xA9F078", Offset = "0xA9F078", VA = "0xA9F078")]
	public void SetOffForward()
	{
	}

	[Token(Token = "0x6001300")]
	[Address(RVA = "0xA9F0D0", Offset = "0xA9F0D0", VA = "0xA9F0D0")]
	public void ToggleSwapping()
	{
	}

	[Token(Token = "0x6001301")]
	[Address(RVA = "0xA9E114", Offset = "0xA9E114", VA = "0xA9E114")]
	private void SetSwapIcon()
	{
	}

	[Token(Token = "0x6001302")]
	[Address(RVA = "0xA9F130", Offset = "0xA9F130", VA = "0xA9F130")]
	public void ToggleSpectator()
	{
	}

	[Token(Token = "0x6001303")]
	[Address(RVA = "0xA9F1D8", Offset = "0xA9F1D8", VA = "0xA9F1D8")]
	public void ToggleBlink()
	{
	}

	[Token(Token = "0x6001304")]
	[Address(RVA = "0xA9F280", Offset = "0xA9F280", VA = "0xA9F280")]
	public void ToggleShadows()
	{
	}

	[Token(Token = "0x6001305")]
	[Address(RVA = "0xA9F328", Offset = "0xA9F328", VA = "0xA9F328")]
	public void FlipForceTubeChannels()
	{
	}

	[Token(Token = "0x6001306")]
	[Address(RVA = "0xA9F3B8", Offset = "0xA9F3B8", VA = "0xA9F3B8")]
	public SettingsScreen()
	{
	}
}
[Token(Token = "0x2000372")]
public class ShopScreen : MonoBehaviour
{
	[Token(Token = "0x400176E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public VRTouch_Button ornament;

	[Token(Token = "0x400176F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public VRTouch_Button guns;

	[Token(Token = "0x4001770")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public VRTouch_Button gloves;

	[Token(Token = "0x4001771")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public TextMeshProUGUI currencyLabel;

	[Token(Token = "0x6001307")]
	[Address(RVA = "0xA9F3E0", Offset = "0xA9F3E0", VA = "0xA9F3E0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001308")]
	[Address(RVA = "0xA9F3E4", Offset = "0xA9F3E4", VA = "0xA9F3E4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001309")]
	[Address(RVA = "0xA9F3E8", Offset = "0xA9F3E8", VA = "0xA9F3E8")]
	public void Refresh()
	{
	}

	[Token(Token = "0x600130A")]
	[Address(RVA = "0xA9F480", Offset = "0xA9F480", VA = "0xA9F480")]
	public ShopScreen()
	{
	}
}
[Token(Token = "0x2000373")]
public class TargetChallengeTemplate : MonoBehaviour
{
	[Token(Token = "0x4001772")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TargetSequenceBase targetSequence;

	[Token(Token = "0x4001773")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextMeshProUGUI bestValue;

	[Token(Token = "0x4001774")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TextMeshProUGUI rankValue;

	[Token(Token = "0x4001775")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public string apiString;

	[Token(Token = "0x4001776")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int index;

	[Token(Token = "0x4001777")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private VRTouch_Button myButton;

	[Token(Token = "0x600130B")]
	[Address(RVA = "0xA9F488", Offset = "0xA9F488", VA = "0xA9F488")]
	private void Awake()
	{
	}

	[Token(Token = "0x600130C")]
	[Address(RVA = "0xA9F4D8", Offset = "0xA9F4D8", VA = "0xA9F4D8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600130D")]
	[Address(RVA = "0xA9F4DC", Offset = "0xA9F4DC", VA = "0xA9F4DC")]
	public void UpdateBest()
	{
	}

	[Token(Token = "0x600130E")]
	[Address(RVA = "0xA9F630", Offset = "0xA9F630", VA = "0xA9F630")]
	public void StartSequence()
	{
	}

	[Token(Token = "0x600130F")]
	[Address(RVA = "0xA9F658", Offset = "0xA9F658", VA = "0xA9F658")]
	public TargetChallengeTemplate()
	{
	}
}
[Token(Token = "0x2000374")]
public class TerminalController : MonoBehaviour
{
	[Token(Token = "0x4001778")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static TerminalController instance;

	[Token(Token = "0x4001779")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LevelScreen levelScreen;

	[Token(Token = "0x400177A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public LevelSelectScreen levelSelectScreen;

	[Token(Token = "0x400177B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AchievementScreen achievementScreen;

	[Token(Token = "0x400177C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject intro;

	[Token(Token = "0x400177D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public MenuScreen menu;

	[Token(Token = "0x400177E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static bool justStarted;

	[Token(Token = "0x400177F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool introV3_Viewed;

	[Token(Token = "0x6001310")]
	[Address(RVA = "0xA9F660", Offset = "0xA9F660", VA = "0xA9F660")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001311")]
	[Address(RVA = "0xA9F6BC", Offset = "0xA9F6BC", VA = "0xA9F6BC")]
	private void Start()
	{
	}

	[Token(Token = "0x6001312")]
	[Address(RVA = "0xA9F6C0", Offset = "0xA9F6C0", VA = "0xA9F6C0")]
	private void Initialise()
	{
	}

	[Token(Token = "0x6001313")]
	[Address(RVA = "0xA9F7F8", Offset = "0xA9F7F8", VA = "0xA9F7F8")]
	public void OpenLevelScreen(int index)
	{
	}

	[Token(Token = "0x6001314")]
	[Address(RVA = "0xA9F8A4", Offset = "0xA9F8A4", VA = "0xA9F8A4")]
	public TerminalController()
	{
	}
}
[Token(Token = "0x2000375")]
public class TutorialReloadModeSettings : MonoBehaviour
{
	[Token(Token = "0x4001780")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public VRButtonGroup reloadGroup;

	[Token(Token = "0x4001781")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TutorialManager tutorialManager;

	[Token(Token = "0x6001316")]
	[Address(RVA = "0xA9F900", Offset = "0xA9F900", VA = "0xA9F900")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001317")]
	[Address(RVA = "0xA9FA74", Offset = "0xA9FA74", VA = "0xA9FA74")]
	public void SetAutoReload()
	{
	}

	[Token(Token = "0x6001318")]
	[Address(RVA = "0xA9FC08", Offset = "0xA9FC08", VA = "0xA9FC08")]
	public void SetManualReload()
	{
	}

	[Token(Token = "0x6001319")]
	[Address(RVA = "0xA9FC74", Offset = "0xA9FC74", VA = "0xA9FC74")]
	public TutorialReloadModeSettings()
	{
	}
}
[Token(Token = "0x2000376")]
public class VersionLabel : MonoBehaviour
{
	[Token(Token = "0x4001782")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string translationKey;

	[Token(Token = "0x4001783")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextMeshProUGUI label;

	[Token(Token = "0x600131A")]
	[Address(RVA = "0xA9FC7C", Offset = "0xA9FC7C", VA = "0xA9FC7C")]
	private void Awake()
	{
	}

	[Token(Token = "0x600131B")]
	[Address(RVA = "0xA9FD14", Offset = "0xA9FD14", VA = "0xA9FD14")]
	public VersionLabel()
	{
	}
}
[Token(Token = "0x2000377")]
public class VRButtonGroup : MonoBehaviour
{
	[Token(Token = "0x4001784")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public VRTouch_Button[] buttons;

	[Token(Token = "0x4001785")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public VRTouch_Button firstSelected;

	[Token(Token = "0x4001786")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public VRTouch_Button lastSelected;

	[Token(Token = "0x4001787")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool shownFirst;

	[Token(Token = "0x600131C")]
	[Address(RVA = "0xA9FD1C", Offset = "0xA9FD1C", VA = "0xA9FD1C")]
	private void Awake()
	{
	}

	[Token(Token = "0x600131D")]
	[Address(RVA = "0xA9FDF8", Offset = "0xA9FDF8", VA = "0xA9FDF8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600131E")]
	[Address(RVA = "0xAA001C", Offset = "0xAA001C", VA = "0xAA001C")]
	private void Start()
	{
	}

	[Token(Token = "0x600131F")]
	[Address(RVA = "0xA9F990", Offset = "0xA9F990", VA = "0xA9F990")]
	public void SetSelectedButton(VRTouch_Button _button)
	{
	}

	[Token(Token = "0x6001320")]
	[Address(RVA = "0xAA02B8", Offset = "0xAA02B8", VA = "0xAA02B8")]
	public VRButtonGroup()
	{
	}
}
[Token(Token = "0x2000378")]
public class VRStateMessageController : MonoBehaviour
{
	[Token(Token = "0x2000379")]
	[CompilerGenerated]
	private sealed class <DeathRoutine>d__38 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40017A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40017A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40017A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public VRStateMessageController <>4__this;

		[Token(Token = "0x40017A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <time>5__2;

		[Token(Token = "0x1700021A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600133D")]
			[Address(RVA = "0xAA1A00", Offset = "0xAA1A00", VA = "0xAA1A00", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700021B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600133F")]
			[Address(RVA = "0xAA1A48", Offset = "0xAA1A48", VA = "0xAA1A48", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600133A")]
		[Address(RVA = "0xAA13DC", Offset = "0xAA13DC", VA = "0xAA13DC")]
		[DebuggerHidden]
		public <DeathRoutine>d__38(int <>1__state)
		{
		}

		[Token(Token = "0x600133B")]
		[Address(RVA = "0xAA1894", Offset = "0xAA1894", VA = "0xAA1894", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600133C")]
		[Address(RVA = "0xAA1898", Offset = "0xAA1898", VA = "0xAA1898", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600133E")]
		[Address(RVA = "0xAA1A08", Offset = "0xAA1A08", VA = "0xAA1A08", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200037A")]
	[CompilerGenerated]
	private sealed class <ShowClearRoutine>d__41 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40017A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40017AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40017AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public VRStateMessageController <>4__this;

		[Token(Token = "0x1700021C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001343")]
			[Address(RVA = "0xAA1BD4", Offset = "0xAA1BD4", VA = "0xAA1BD4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700021D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001345")]
			[Address(RVA = "0xAA1C1C", Offset = "0xAA1C1C", VA = "0xAA1C1C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001340")]
		[Address(RVA = "0xAA149C", Offset = "0xAA149C", VA = "0xAA149C")]
		[DebuggerHidden]
		public <ShowClearRoutine>d__41(int <>1__state)
		{
		}

		[Token(Token = "0x6001341")]
		[Address(RVA = "0xAA1A50", Offset = "0xAA1A50", VA = "0xAA1A50", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001342")]
		[Address(RVA = "0xAA1A54", Offset = "0xAA1A54", VA = "0xAA1A54", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001344")]
		[Address(RVA = "0xAA1BDC", Offset = "0xAA1BDC", VA = "0xAA1BDC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200037B")]
	[CompilerGenerated]
	private sealed class <ShowCompleteRoutine>d__43 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40017AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40017AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40017AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public VRStateMessageController <>4__this;

		[Token(Token = "0x1700021E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001349")]
			[Address(RVA = "0xAA1D28", Offset = "0xAA1D28", VA = "0xAA1D28", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700021F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600134B")]
			[Address(RVA = "0xAA1D70", Offset = "0xAA1D70", VA = "0xAA1D70", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001346")]
		[Address(RVA = "0xAA155C", Offset = "0xAA155C", VA = "0xAA155C")]
		[DebuggerHidden]
		public <ShowCompleteRoutine>d__43(int <>1__state)
		{
		}

		[Token(Token = "0x6001347")]
		[Address(RVA = "0xAA1C24", Offset = "0xAA1C24", VA = "0xAA1C24", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001348")]
		[Address(RVA = "0xAA1C28", Offset = "0xAA1C28", VA = "0xAA1C28", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600134A")]
		[Address(RVA = "0xAA1D30", Offset = "0xAA1D30", VA = "0xAA1D30", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200037C")]
	[CompilerGenerated]
	private sealed class <ShowTutorialRoutine>d__45 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40017AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40017B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40017B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public VRStateMessageController <>4__this;

		[Token(Token = "0x17000220")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600134F")]
			[Address(RVA = "0xAA1E7C", Offset = "0xAA1E7C", VA = "0xAA1E7C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000221")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001351")]
			[Address(RVA = "0xAA1EC4", Offset = "0xAA1EC4", VA = "0xAA1EC4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600134C")]
		[Address(RVA = "0xAA161C", Offset = "0xAA161C", VA = "0xAA161C")]
		[DebuggerHidden]
		public <ShowTutorialRoutine>d__45(int <>1__state)
		{
		}

		[Token(Token = "0x600134D")]
		[Address(RVA = "0xAA1D78", Offset = "0xAA1D78", VA = "0xAA1D78", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600134E")]
		[Address(RVA = "0xAA1D7C", Offset = "0xAA1D7C", VA = "0xAA1D7C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001350")]
		[Address(RVA = "0xAA1E84", Offset = "0xAA1E84", VA = "0xAA1E84", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200037D")]
	[CompilerGenerated]
	private sealed class <ShowGoDelay>d__51 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40017B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40017B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40017B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public VRStateMessageController <>4__this;

		[Token(Token = "0x17000222")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001355")]
			[Address(RVA = "0xAA1F70", Offset = "0xAA1F70", VA = "0xAA1F70", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000223")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001357")]
			[Address(RVA = "0xAA1FB8", Offset = "0xAA1FB8", VA = "0xAA1FB8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001352")]
		[Address(RVA = "0xAA1824", Offset = "0xAA1824", VA = "0xAA1824")]
		[DebuggerHidden]
		public <ShowGoDelay>d__51(int <>1__state)
		{
		}

		[Token(Token = "0x6001353")]
		[Address(RVA = "0xAA1ECC", Offset = "0xAA1ECC", VA = "0xAA1ECC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001354")]
		[Address(RVA = "0xAA1ED0", Offset = "0xAA1ED0", VA = "0xAA1ED0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001356")]
		[Address(RVA = "0xAA1F78", Offset = "0xAA1F78", VA = "0xAA1F78", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001788")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static VRStateMessageController instance;

	[Token(Token = "0x4001789")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform playerEyeTransform;

	[Token(Token = "0x400178A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector3 targetOffset;

	[Token(Token = "0x400178B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float posRate;

	[Token(Token = "0x400178C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float rotRate;

	[Token(Token = "0x400178D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Rigidbody rBody;

	[Token(Token = "0x400178E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Transform xForm;

	[Token(Token = "0x400178F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject canvas;

	[Token(Token = "0x4001790")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject warningMessage;

	[Token(Token = "0x4001791")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject deadMessage;

	[Token(Token = "0x4001792")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public GameObject clearMessage;

	[Token(Token = "0x4001793")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public GameObject completeMessage;

	[Token(Token = "0x4001794")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public GameObject tutorialCompleteMessage;

	[Token(Token = "0x4001795")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public GameObject readyMessage;

	[Token(Token = "0x4001796")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public GameObject pausedMessage;

	[Token(Token = "0x4001797")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public float deathDuration;

	[Token(Token = "0x4001798")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	public float endLeveDuration;

	[Token(Token = "0x4001799")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public float clearDelay;

	[Token(Token = "0x400179A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	public bool warningActive;

	[Token(Token = "0x400179B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x95")]
	private bool clearActive;

	[Token(Token = "0x400179C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x96")]
	private bool completeActive;

	[Token(Token = "0x400179D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x97")]
	private bool tutorialCompleteActive;

	[Token(Token = "0x400179E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private bool deadActive;

	[Token(Token = "0x400179F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x99")]
	private bool readyActive;

	[Token(Token = "0x40017A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9A")]
	private bool pausedActive;

	[Token(Token = "0x40017A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private float activeDelay;

	[Token(Token = "0x40017A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private float timeStart;

	[Token(Token = "0x40017A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Canvas canvasComponent;

	[Token(Token = "0x40017A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private float timeSinceShownReady;

	[Token(Token = "0x6001321")]
	[Address(RVA = "0xAA02C0", Offset = "0xAA02C0", VA = "0xAA02C0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001322")]
	[Address(RVA = "0xAA0378", Offset = "0xAA0378", VA = "0xAA0378")]
	private void Start()
	{
	}

	[Token(Token = "0x6001323")]
	[Address(RVA = "0xAA05A8", Offset = "0xAA05A8", VA = "0xAA05A8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001324")]
	[Address(RVA = "0xAA0A78", Offset = "0xAA0A78", VA = "0xAA0A78")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6001325")]
	[Address(RVA = "0xAA08E4", Offset = "0xAA08E4", VA = "0xAA08E4")]
	private void Teleport()
	{
	}

	[Token(Token = "0x6001326")]
	[Address(RVA = "0xAA0EEC", Offset = "0xAA0EEC", VA = "0xAA0EEC")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6001327")]
	[Address(RVA = "0xAA0F94", Offset = "0xAA0F94", VA = "0xAA0F94")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6001328")]
	[Address(RVA = "0xAA11F0", Offset = "0xAA11F0", VA = "0xAA11F0")]
	public void ShowWarning(bool show)
	{
	}

	[Token(Token = "0x6001329")]
	[Address(RVA = "0xAA1240", Offset = "0xAA1240", VA = "0xAA1240")]
	public void ShowDead()
	{
	}

	[Token(Token = "0x600132A")]
	[Address(RVA = "0xAA0DB0", Offset = "0xAA0DB0", VA = "0xAA0DB0")]
	public void ResetState()
	{
	}

	[Token(Token = "0x600132B")]
	[Address(RVA = "0xAA1328", Offset = "0xAA1328", VA = "0xAA1328")]
	[IteratorStateMachine(typeof(<DeathRoutine>d__38))]
	private IEnumerator DeathRoutine()
	{
		return null;
	}

	[Token(Token = "0x600132C")]
	[Address(RVA = "0xAA1404", Offset = "0xAA1404", VA = "0xAA1404")]
	public void ShowClear()
	{
	}

	[Token(Token = "0x600132D")]
	[Address(RVA = "0xAA1390", Offset = "0xAA1390", VA = "0xAA1390")]
	public void HideClear()
	{
	}

	[Token(Token = "0x600132E")]
	[Address(RVA = "0xAA1434", Offset = "0xAA1434", VA = "0xAA1434")]
	[IteratorStateMachine(typeof(<ShowClearRoutine>d__41))]
	private IEnumerator ShowClearRoutine()
	{
		return null;
	}

	[Token(Token = "0x600132F")]
	[Address(RVA = "0xAA14C4", Offset = "0xAA14C4", VA = "0xAA14C4")]
	public void ShowLevelComplete()
	{
	}

	[Token(Token = "0x6001330")]
	[Address(RVA = "0xAA14F4", Offset = "0xAA14F4", VA = "0xAA14F4")]
	[IteratorStateMachine(typeof(<ShowCompleteRoutine>d__43))]
	private IEnumerator ShowCompleteRoutine()
	{
		return null;
	}

	[Token(Token = "0x6001331")]
	[Address(RVA = "0xAA1584", Offset = "0xAA1584", VA = "0xAA1584")]
	public void ShowTutorialComplete()
	{
	}

	[Token(Token = "0x6001332")]
	[Address(RVA = "0xAA15B4", Offset = "0xAA15B4", VA = "0xAA15B4")]
	[IteratorStateMachine(typeof(<ShowTutorialRoutine>d__45))]
	private IEnumerator ShowTutorialRoutine()
	{
		return null;
	}

	[Token(Token = "0x6001333")]
	[Address(RVA = "0xAA1644", Offset = "0xAA1644", VA = "0xAA1644")]
	public void ShowReady()
	{
	}

	[Token(Token = "0x6001334")]
	[Address(RVA = "0xAA16E4", Offset = "0xAA16E4", VA = "0xAA16E4")]
	public void HideReady()
	{
	}

	[Token(Token = "0x6001335")]
	[Address(RVA = "0xAA1724", Offset = "0xAA1724", VA = "0xAA1724")]
	private void ShowPaused()
	{
	}

	[Token(Token = "0x6001336")]
	[Address(RVA = "0xAA1764", Offset = "0xAA1764", VA = "0xAA1764")]
	private void HidePaused()
	{
	}

	[Token(Token = "0x6001337")]
	[Address(RVA = "0xAA17BC", Offset = "0xAA17BC", VA = "0xAA17BC")]
	[IteratorStateMachine(typeof(<ShowGoDelay>d__51))]
	private IEnumerator ShowGoDelay()
	{
		return null;
	}

	[Token(Token = "0x6001338")]
	[Address(RVA = "0xAA184C", Offset = "0xAA184C", VA = "0xAA184C")]
	public void ShowGo()
	{
	}

	[Token(Token = "0x6001339")]
	[Address(RVA = "0xAA186C", Offset = "0xAA186C", VA = "0xAA186C")]
	public VRStateMessageController()
	{
	}
}
[Token(Token = "0x200037E")]
public class VRTouch_Button : MonoBehaviour
{
	[Token(Token = "0x200037F")]
	[CompilerGenerated]
	private sealed class <TrackFinger>d__55 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40017E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40017E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40017E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public VRTouch_Button <>4__this;

		[Token(Token = "0x40017E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool <pressed>5__2;

		[Token(Token = "0x40017E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector3 <newPos>5__3;

		[Token(Token = "0x17000224")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001366")]
			[Address(RVA = "0xAA2C8C", Offset = "0xAA2C8C", VA = "0xAA2C8C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000225")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001368")]
			[Address(RVA = "0xAA2CD4", Offset = "0xAA2CD4", VA = "0xAA2CD4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001363")]
		[Address(RVA = "0xAA2818", Offset = "0xAA2818", VA = "0xAA2818")]
		[DebuggerHidden]
		public <TrackFinger>d__55(int <>1__state)
		{
		}

		[Token(Token = "0x6001364")]
		[Address(RVA = "0xAA286C", Offset = "0xAA286C", VA = "0xAA286C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001365")]
		[Address(RVA = "0xAA2870", Offset = "0xAA2870", VA = "0xAA2870", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001367")]
		[Address(RVA = "0xAA2C94", Offset = "0xAA2C94", VA = "0xAA2C94", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40017B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public VRButtonGroup myButtonGroup;

	[Token(Token = "0x40017B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioManager.SoundType pressedSound;

	[Token(Token = "0x40017B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Color defaultColor;

	[Token(Token = "0x40017B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public Color defaultTextColor;

	[Token(Token = "0x40017B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public Color selectedColor;

	[Token(Token = "0x40017BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public Color disabledColor;

	[Token(Token = "0x40017BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public Color disabledTextColor;

	[Token(Token = "0x40017BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Image buttonImage;

	[Token(Token = "0x40017BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Image selectedHighlightImage;

	[Token(Token = "0x40017BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Image highlightImage;

	[Token(Token = "0x40017BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Image icon;

	[Token(Token = "0x40017C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public UnityEvent onSetSelected;

	[Token(Token = "0x40017C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public UnityEvent onEnableEvents;

	[Token(Token = "0x40017C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public UnityEvent pressedEvents;

	[Token(Token = "0x40017C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public UnityEvent onEnterEvents;

	[Token(Token = "0x40017C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public UnityEvent onExitEvents;

	[Token(Token = "0x40017C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public float pressActivationDistance;

	[Token(Token = "0x40017C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	public float maxActivationRate;

	[Token(Token = "0x40017C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public Transform translationXForm;

	[Token(Token = "0x40017C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public bool loadHomeButton;

	[Token(Token = "0x40017C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD1")]
	public bool loadTutorialButton;

	[Token(Token = "0x40017CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD2")]
	public bool loadLevelButton;

	[Token(Token = "0x40017CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD3")]
	public bool restartLevelButton;

	[Token(Token = "0x40017CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	public bool endLevelButton;

	[Token(Token = "0x40017CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private Transform touchingFinger;

	[Token(Token = "0x40017CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private HandController touchingHand;

	[Token(Token = "0x40017CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private Transform xForm;

	[Token(Token = "0x40017D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private Vector3 startPos;

	[Token(Token = "0x40017D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
	private Vector3 translationStartPos;

	[Token(Token = "0x40017D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public TweenScale buttonScaler;

	[Token(Token = "0x40017D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private TweenScale selectedHighlightImageScaler;

	[Token(Token = "0x40017D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public TextMeshProUGUI buttonText;

	[Token(Token = "0x40017D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public bool levelSelectButton;

	[Token(Token = "0x40017D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
	public int selectionIndex;

	[Token(Token = "0x40017D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private float nextTime;

	[Token(Token = "0x40017D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
	public bool showSelected;

	[Token(Token = "0x40017D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12D")]
	public bool isSelected;

	[Token(Token = "0x40017DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12E")]
	public bool isActive;

	[Token(Token = "0x40017DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12F")]
	private bool selected;

	[Token(Token = "0x40017DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	public bool cascade;

	[Token(Token = "0x40017DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private Image[] contentImages;

	[Token(Token = "0x40017DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private Color contentColor;

	[Token(Token = "0x40017DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool buttonisActive;

	[Token(Token = "0x40017E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static VRTouch_Button activeButton;

	[Token(Token = "0x40017E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	private bool initialised;

	[Token(Token = "0x40017E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x151")]
	private bool wasPressed;

	[Token(Token = "0x6001358")]
	[Address(RVA = "0xAA1FC0", Offset = "0xAA1FC0", VA = "0xAA1FC0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001359")]
	[Address(RVA = "0xAA00A4", Offset = "0xAA00A4", VA = "0xAA00A4")]
	public void Initialise()
	{
	}

	[Token(Token = "0x600135A")]
	[Address(RVA = "0xAA1FD0", Offset = "0xAA1FD0", VA = "0xAA1FD0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600135B")]
	[Address(RVA = "0xAA2364", Offset = "0xAA2364", VA = "0xAA2364")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600135C")]
	[Address(RVA = "0xAA21F8", Offset = "0xAA21F8", VA = "0xAA21F8")]
	public void SetDisabled()
	{
	}

	[Token(Token = "0x600135D")]
	[Address(RVA = "0xAA2078", Offset = "0xAA2078", VA = "0xAA2078")]
	public void SetEnabled()
	{
	}

	[Token(Token = "0x600135E")]
	[Address(RVA = "0xA9FE80", Offset = "0xA9FE80", VA = "0xA9FE80")]
	public void ShowSelected(bool _selected)
	{
	}

	[Token(Token = "0x600135F")]
	[Address(RVA = "0xAA2400", Offset = "0xAA2400", VA = "0xAA2400")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6001360")]
	[Address(RVA = "0xAA267C", Offset = "0xAA267C", VA = "0xAA267C")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6001361")]
	[Address(RVA = "0xAA2614", Offset = "0xAA2614", VA = "0xAA2614")]
	[IteratorStateMachine(typeof(<TrackFinger>d__55))]
	private IEnumerator TrackFinger()
	{
		return null;
	}

	[Token(Token = "0x6001362")]
	[Address(RVA = "0xAA2840", Offset = "0xAA2840", VA = "0xAA2840")]
	public VRTouch_Button()
	{
	}
}
[Token(Token = "0x2000380")]
public class VRTouch_Slider : MonoBehaviour
{
	[Token(Token = "0x2000381")]
	[CompilerGenerated]
	private sealed class <TrackFinger>d__17 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40017F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40017F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40017F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public VRTouch_Slider <>4__this;

		[Token(Token = "0x17000226")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001372")]
			[Address(RVA = "0xAA32D0", Offset = "0xAA32D0", VA = "0xAA32D0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000227")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001374")]
			[Address(RVA = "0xAA3318", Offset = "0xAA3318", VA = "0xAA3318", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600136F")]
		[Address(RVA = "0xAA3020", Offset = "0xAA3020", VA = "0xAA3020")]
		[DebuggerHidden]
		public <TrackFinger>d__17(int <>1__state)
		{
		}

		[Token(Token = "0x6001370")]
		[Address(RVA = "0xAA305C", Offset = "0xAA305C", VA = "0xAA305C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001371")]
		[Address(RVA = "0xAA3060", Offset = "0xAA3060", VA = "0xAA3060", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001373")]
		[Address(RVA = "0xAA32D8", Offset = "0xAA32D8", VA = "0xAA32D8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40017E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public VRTouch_SliderHandle handle;

	[Token(Token = "0x40017E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform start;

	[Token(Token = "0x40017EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform end;

	[Token(Token = "0x40017EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float valueRange;

	[Token(Token = "0x40017EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float deadZone;

	[Token(Token = "0x40017ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public UnityEvent<float> onValueChanged;

	[Token(Token = "0x40017EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Vector3 startLocal;

	[Token(Token = "0x40017EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private Vector3 endLocal;

	[Token(Token = "0x40017F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool tracking;

	[Token(Token = "0x40017F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Transform touchingFinger;

	[Token(Token = "0x40017F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Transform xForm;

	[Token(Token = "0x40017F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float distanceRange;

	[Token(Token = "0x40017F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public float outputValue;

	[Token(Token = "0x6001369")]
	[Address(RVA = "0xAA2CDC", Offset = "0xAA2CDC", VA = "0xAA2CDC")]
	private void Awake()
	{
	}

	[Token(Token = "0x600136A")]
	[Address(RVA = "0xAA2DEC", Offset = "0xAA2DEC", VA = "0xAA2DEC")]
	public void SetPosition(float normalisedValue, bool immediate = false)
	{
	}

	[Token(Token = "0x600136B")]
	[Address(RVA = "0xAA2F84", Offset = "0xAA2F84", VA = "0xAA2F84")]
	public void StartTracking(Transform finger)
	{
	}

	[Token(Token = "0x600136C")]
	[Address(RVA = "0xAA3010", Offset = "0xAA3010", VA = "0xAA3010")]
	public void StopTracking()
	{
	}

	[Token(Token = "0x600136D")]
	[Address(RVA = "0xAA2FA8", Offset = "0xAA2FA8", VA = "0xAA2FA8")]
	[IteratorStateMachine(typeof(<TrackFinger>d__17))]
	private IEnumerator TrackFinger()
	{
		return null;
	}

	[Token(Token = "0x600136E")]
	[Address(RVA = "0xAA3048", Offset = "0xAA3048", VA = "0xAA3048")]
	public VRTouch_Slider()
	{
	}
}
[Token(Token = "0x2000382")]
public class VRTouch_SliderHandle : MonoBehaviour
{
	[Token(Token = "0x40017F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public VRTouch_Slider slider;

	[Token(Token = "0x40017F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform xForm;

	[Token(Token = "0x40017FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Image highLight;

	[Token(Token = "0x40017FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform touchingFinger;

	[Token(Token = "0x40017FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private HandController touchingHand;

	[Token(Token = "0x40017FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float positionRate;

	[Token(Token = "0x6001375")]
	[Address(RVA = "0xAA3320", Offset = "0xAA3320", VA = "0xAA3320")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001376")]
	[Address(RVA = "0xAA333C", Offset = "0xAA333C", VA = "0xAA333C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001377")]
	[Address(RVA = "0xAA2E4C", Offset = "0xAA2E4C", VA = "0xAA2E4C")]
	public void SetPosition(Vector3 pos, bool immediate = false)
	{
	}

	[Token(Token = "0x6001378")]
	[Address(RVA = "0xAA335C", Offset = "0xAA335C", VA = "0xAA335C")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6001379")]
	[Address(RVA = "0xAA3494", Offset = "0xAA3494", VA = "0xAA3494")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x600137A")]
	[Address(RVA = "0xAA3548", Offset = "0xAA3548", VA = "0xAA3548")]
	public VRTouch_SliderHandle()
	{
	}
}
[Token(Token = "0x2000383")]
[ExecuteInEditMode]
public class WorldSpaceOverlayUI : MonoBehaviour
{
	[Token(Token = "0x40017FE")]
	private const string shaderTestMode = "unity_GUIZTestMode";

	[Token(Token = "0x40017FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private CompareFunction desiredUIComparison;

	[Token(Token = "0x4001800")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("Set to blank to automatically populate from the child UI elements")]
	[SerializeField]
	private Graphic[] uiElementsToApplyTo;

	[Token(Token = "0x4001801")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Dictionary<Material, Material> materialMappings;

	[Token(Token = "0x600137B")]
	[Address(RVA = "0xAA3558", Offset = "0xAA3558", VA = "0xAA3558", Slot = "4")]
	protected virtual void Start()
	{
	}

	[Token(Token = "0x600137C")]
	[Address(RVA = "0xAA3844", Offset = "0xAA3844", VA = "0xAA3844")]
	public WorldSpaceOverlayUI()
	{
	}
}
[Token(Token = "0x2000384")]
public class WristDisplayController : MonoBehaviour
{
	[Token(Token = "0x4001802")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Action onShow;

	[Token(Token = "0x4001803")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static Action onHide;

	[Token(Token = "0x4001804")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool useToggle;

	[Token(Token = "0x4001805")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float displayDotRange;

	[Token(Token = "0x4001806")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform playerCenterEyeXForm;

	[Token(Token = "0x4001807")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TweenScale tweener;

	[Token(Token = "0x4001808")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Canvas canvas;

	[Token(Token = "0x4001809")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject toggle;

	[Token(Token = "0x400180A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Collider poseTrigger;

	[Token(Token = "0x400180B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private ScoreDisplay scoreDisplay;

	[Token(Token = "0x400180C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Transform xForm;

	[Token(Token = "0x400180D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static bool controllerdisplaying;

	[Token(Token = "0x400180E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static WristDisplayController activeController;

	[Token(Token = "0x400180F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public HandController handController;

	[Token(Token = "0x4001810")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool displaying;

	[Token(Token = "0x4001811")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
	private bool hiding;

	[Token(Token = "0x4001812")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
	private bool toggleEnabled;

	[Token(Token = "0x4001813")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x63")]
	private bool hasScoreDisplay;

	[Token(Token = "0x600137D")]
	[Address(RVA = "0xAA38C8", Offset = "0xAA38C8", VA = "0xAA38C8")]
	private void Awake()
	{
	}

	[Token(Token = "0x600137E")]
	[Address(RVA = "0xAA3970", Offset = "0xAA3970", VA = "0xAA3970")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600137F")]
	[Address(RVA = "0xAA3A5C", Offset = "0xAA3A5C", VA = "0xAA3A5C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6001380")]
	[Address(RVA = "0xAA3B48", Offset = "0xAA3B48", VA = "0xAA3B48")]
	private void OnLevelLoaded()
	{
	}

	[Token(Token = "0x6001381")]
	[Address(RVA = "0xAA3BC4", Offset = "0xAA3BC4", VA = "0xAA3BC4")]
	private void Update()
	{
	}

	[Token(Token = "0x6001382")]
	[Address(RVA = "0xAA3FC4", Offset = "0xAA3FC4", VA = "0xAA3FC4")]
	public void Toggle()
	{
	}

	[Token(Token = "0x6001383")]
	[Address(RVA = "0xAA4194", Offset = "0xAA4194", VA = "0xAA4194")]
	public void HideDisplay(bool playSound = true)
	{
	}

	[Token(Token = "0x6001384")]
	[Address(RVA = "0xAA42D8", Offset = "0xAA42D8", VA = "0xAA42D8")]
	public WristDisplayController()
	{
	}
}
[Token(Token = "0x2000385")]
public class UnlockFX : MonoBehaviour
{
	[Token(Token = "0x4001814")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private AudioSource sound;

	[Token(Token = "0x4001815")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ParticleSystem[] effects;

	[Token(Token = "0x6001385")]
	[Address(RVA = "0xAA42F4", Offset = "0xAA42F4", VA = "0xAA42F4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001386")]
	[Address(RVA = "0xAA4370", Offset = "0xAA4370", VA = "0xAA4370")]
	public void Play()
	{
	}

	[Token(Token = "0x6001387")]
	[Address(RVA = "0xAA43E4", Offset = "0xAA43E4", VA = "0xAA43E4")]
	public void Stop()
	{
	}

	[Token(Token = "0x6001388")]
	[Address(RVA = "0xAA4458", Offset = "0xAA4458", VA = "0xAA4458")]
	public UnlockFX()
	{
	}
}
[Token(Token = "0x2000386")]
public static class VRPrefs
{
	[Token(Token = "0x6001389")]
	[Address(RVA = "0xAA4460", Offset = "0xAA4460", VA = "0xAA4460")]
	public static void DeleteAll()
	{
	}

	[Token(Token = "0x600138A")]
	[Address(RVA = "0xAA4468", Offset = "0xAA4468", VA = "0xAA4468")]
	public static void DeleteKey(string key)
	{
	}

	[Token(Token = "0x600138B")]
	[Address(RVA = "0xAA4470", Offset = "0xAA4470", VA = "0xAA4470")]
	public static float GetFloat(string key, float defaultValue)
	{
		return default(float);
	}

	[Token(Token = "0x600138C")]
	[Address(RVA = "0xAA4478", Offset = "0xAA4478", VA = "0xAA4478")]
	public static float GetFloat(string key)
	{
		return default(float);
	}

	[Token(Token = "0x600138D")]
	[Address(RVA = "0xAA4480", Offset = "0xAA4480", VA = "0xAA4480")]
	public static int GetInt(string key, int defaultValue)
	{
		return default(int);
	}

	[Token(Token = "0x600138E")]
	[Address(RVA = "0xAA4488", Offset = "0xAA4488", VA = "0xAA4488")]
	public static int GetInt(string key)
	{
		return default(int);
	}

	[Token(Token = "0x600138F")]
	[Address(RVA = "0xAA4490", Offset = "0xAA4490", VA = "0xAA4490")]
	public static string GetString(string key, string defaultValue)
	{
		return null;
	}

	[Token(Token = "0x6001390")]
	[Address(RVA = "0xAA4498", Offset = "0xAA4498", VA = "0xAA4498")]
	public static string GetString(string key)
	{
		return null;
	}

	[Token(Token = "0x6001391")]
	[Address(RVA = "0xAA44A0", Offset = "0xAA44A0", VA = "0xAA44A0")]
	public static bool HasKey(string key)
	{
		return default(bool);
	}

	[Token(Token = "0x6001392")]
	[Address(RVA = "0xAA44A8", Offset = "0xAA44A8", VA = "0xAA44A8")]
	public static void Save()
	{
	}

	[Token(Token = "0x6001393")]
	[Address(RVA = "0xAA44B0", Offset = "0xAA44B0", VA = "0xAA44B0")]
	public static void SetFloat(string key, float value)
	{
	}

	[Token(Token = "0x6001394")]
	[Address(RVA = "0xA9F7F0", Offset = "0xA9F7F0", VA = "0xA9F7F0")]
	public static void SetInt(string key, int value)
	{
	}

	[Token(Token = "0x6001395")]
	[Address(RVA = "0xAA44B8", Offset = "0xAA44B8", VA = "0xAA44B8")]
	public static void SetString(string key, string value)
	{
	}
}
[Token(Token = "0x2000387")]
public class VRPromoCamera : MonoBehaviour
{
	[Token(Token = "0x4001816")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform playerEyeTransform;

	[Token(Token = "0x4001817")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float playerhitDelay;

	[Token(Token = "0x4001818")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float posRate;

	[Token(Token = "0x4001819")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float rotRate;

	[Token(Token = "0x400181A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Rigidbody rBody;

	[Token(Token = "0x400181B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Transform xForm;

	[Token(Token = "0x400181C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool playerHit;

	[Token(Token = "0x400181D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float playerHitEnd;

	[Token(Token = "0x6001396")]
	[Address(RVA = "0xAA44C0", Offset = "0xAA44C0", VA = "0xAA44C0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001397")]
	[Address(RVA = "0xAA4520", Offset = "0xAA4520", VA = "0xAA4520")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001398")]
	[Address(RVA = "0xAA470C", Offset = "0xAA470C", VA = "0xAA470C")]
	private void PlayerHit()
	{
	}

	[Token(Token = "0x6001399")]
	[Address(RVA = "0xAA4738", Offset = "0xAA4738", VA = "0xAA4738")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x600139A")]
	[Address(RVA = "0xAA486C", Offset = "0xAA486C", VA = "0xAA486C")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x600139B")]
	[Address(RVA = "0xAA4A5C", Offset = "0xAA4A5C", VA = "0xAA4A5C")]
	public VRPromoCamera()
	{
	}
}
[Serializable]
[Token(Token = "0x2000388")]
public class VRSettingsConfig
{
	[Token(Token = "0x400181E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public VRSettingsType _type;

	[Token(Token = "0x400181F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public int targetFrameRate;

	[Token(Token = "0x4001820")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int msaa;

	[Token(Token = "0x4001821")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float renderScale;

	[Token(Token = "0x600139C")]
	[Address(RVA = "0xAA4A78", Offset = "0xAA4A78", VA = "0xAA4A78")]
	public VRSettingsConfig()
	{
	}
}
[Token(Token = "0x2000389")]
public enum VRSettingsType
{
	[Token(Token = "0x4001823")]
	LOWEST,
	[Token(Token = "0x4001824")]
	LOW,
	[Token(Token = "0x4001825")]
	MID,
	[Token(Token = "0x4001826")]
	HIGH,
	[Token(Token = "0x4001827")]
	HIGHEST
}
[Token(Token = "0x200038A")]
public enum VRPlatform
{
	[Token(Token = "0x4001829")]
	NONE = 0,
	[Token(Token = "0x400182A")]
	OCULUS = 10,
	[Token(Token = "0x400182B")]
	OCULUS_QUEST = 11,
	[Token(Token = "0x400182C")]
	OCULUS_RIFT = 20,
	[Token(Token = "0x400182D")]
	PICO = 30,
	[Token(Token = "0x400182E")]
	PICO_3 = 31,
	[Token(Token = "0x400182F")]
	PICO_4 = 40,
	[Token(Token = "0x4001830")]
	STEAM_VR = 50,
	[Token(Token = "0x4001831")]
	STEAM_VR_OCULUS = 51,
	[Token(Token = "0x4001832")]
	WINDOWS_MR = 60,
	[Token(Token = "0x4001833")]
	OPEN_XR = 70,
	[Token(Token = "0x4001834")]
	PLAYSTATION_VR2 = 80,
	[Token(Token = "0x4001835")]
	QIYU_DREAM = 90,
	[Token(Token = "0x4001836")]
	HTC_VIVE = 100
}
[Token(Token = "0x200038B")]
public class VRSettings : MonoBehaviour
{
	[Token(Token = "0x200038C")]
	[CompilerGenerated]
	private sealed class <StartXRCoroutine>d__49 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001854")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001855")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001856")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public VRSettings <>4__this;

		[Token(Token = "0x17000228")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60013B6")]
			[Address(RVA = "0xAA6F48", Offset = "0xAA6F48", VA = "0xAA6F48", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000229")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60013B8")]
			[Address(RVA = "0xAA6F90", Offset = "0xAA6F90", VA = "0xAA6F90", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60013B3")]
		[Address(RVA = "0xAA692C", Offset = "0xAA692C", VA = "0xAA692C")]
		[DebuggerHidden]
		public <StartXRCoroutine>d__49(int <>1__state)
		{
		}

		[Token(Token = "0x60013B4")]
		[Address(RVA = "0xAA699C", Offset = "0xAA699C", VA = "0xAA699C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60013B5")]
		[Address(RVA = "0xAA69A0", Offset = "0xAA69A0", VA = "0xAA69A0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60013B7")]
		[Address(RVA = "0xAA6F50", Offset = "0xAA6F50", VA = "0xAA6F50", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001837")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Action onPlatformIdentified;

	[Token(Token = "0x4001838")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static Action onFocusLost;

	[Token(Token = "0x4001839")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static Action onFocusAcquired;

	[Token(Token = "0x400183A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static Action onRecentered;

	[Token(Token = "0x400183B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public static Action onUserRecentered;

	[Token(Token = "0x400183C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public static VRSettings instance;

	[Token(Token = "0x400183D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float renderScaleIncrement;

	[Token(Token = "0x400183E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float minRenderScale;

	[Token(Token = "0x400183F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float maxRenderScale;

	[Token(Token = "0x4001840")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public VRSettingsConfig[] settings;

	[Token(Token = "0x4001841")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private VRSettingsConfig currentSettings;

	[Token(Token = "0x4001842")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public VRSettingsType editorType;

	[Token(Token = "0x4001843")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public static VRPlatform vrPlatform;

	[Token(Token = "0x4001844")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private List<XRInputSubsystem> subsystems;

	[Token(Token = "0x4001845")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool forceOculus;

	[Token(Token = "0x4001846")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	public bool recenterOnEnable;

	[Token(Token = "0x4001847")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
	public bool hasInputFocus;

	[Token(Token = "0x4001848")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private static float[] freqs;

	[Token(Token = "0x4001849")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float renderScale;

	[Token(Token = "0x400184A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public int frequency;

	[Token(Token = "0x400184B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private int frequencyIndex;

	[Token(Token = "0x400184C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool firstRun;

	[Token(Token = "0x400184D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public static bool platformIdentified;

	[Token(Token = "0x400184E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public PlatformObjectEnabler POE;

	[Token(Token = "0x400184F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private int OCULUS_LOADER_INDEX;

	[Token(Token = "0x4001850")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private int OPENVR_LOADER_INDEX;

	[Token(Token = "0x4001851")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private int PICOXR_LOADER_INDEX;

	[Token(Token = "0x4001852")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private VRSettingsConfig force_settings;

	[Token(Token = "0x4001853")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private XRLoader m_SelectedXRLoader;

	[Token(Token = "0x600139D")]
	[Address(RVA = "0xAA4A94", Offset = "0xAA4A94", VA = "0xAA4A94")]
	private void Awake()
	{
	}

	[Token(Token = "0x600139E")]
	[Address(RVA = "0xAA4B20", Offset = "0xAA4B20", VA = "0xAA4B20")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600139F")]
	[Address(RVA = "0xAA4C8C", Offset = "0xAA4C8C", VA = "0xAA4C8C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60013A0")]
	[Address(RVA = "0xAA5034", Offset = "0xAA5034", VA = "0xAA5034")]
	private void Start()
	{
	}

	[Token(Token = "0x60013A1")]
	[Address(RVA = "0xAA5098", Offset = "0xAA5098", VA = "0xAA5098")]
	private void IdentifyPlatform()
	{
	}

	[Token(Token = "0x60013A2")]
	[Address(RVA = "0xAA514C", Offset = "0xAA514C", VA = "0xAA514C")]
	private void InitialiseSystems()
	{
	}

	[Token(Token = "0x60013A3")]
	[Address(RVA = "0xAA5EA0", Offset = "0xAA5EA0", VA = "0xAA5EA0")]
	public void FocusLost()
	{
	}

	[Token(Token = "0x60013A4")]
	[Address(RVA = "0xAA5F98", Offset = "0xAA5F98", VA = "0xAA5F98")]
	public void FocusAcquired()
	{
	}

	[Token(Token = "0x60013A5")]
	[Address(RVA = "0xAA6090", Offset = "0xAA6090", VA = "0xAA6090")]
	public void UserResetCenter()
	{
	}

	[Token(Token = "0x60013A6")]
	[Address(RVA = "0xAA4B24", Offset = "0xAA4B24", VA = "0xAA4B24")]
	public void RecenterTracking()
	{
	}

	[Token(Token = "0x60013A7")]
	[Address(RVA = "0xAA5CD4", Offset = "0xAA5CD4", VA = "0xAA5CD4")]
	private void ProcessFrequency(int frameRate)
	{
	}

	[Token(Token = "0x60013A8")]
	[Address(RVA = "0xAA60F4", Offset = "0xAA60F4", VA = "0xAA60F4")]
	public void SetSettingsType(VRSettingsType _type)
	{
	}

	[Token(Token = "0x60013A9")]
	[Address(RVA = "0xAA5960", Offset = "0xAA5960", VA = "0xAA5960")]
	private void SetSettings(VRSettingsConfig _settings, bool useSettings = false)
	{
	}

	[Token(Token = "0x60013AA")]
	[Address(RVA = "0xAA6248", Offset = "0xAA6248", VA = "0xAA6248")]
	public void IncrementRenderScale()
	{
	}

	[Token(Token = "0x60013AB")]
	[Address(RVA = "0xAA62C0", Offset = "0xAA62C0", VA = "0xAA62C0")]
	public void DecrementRenderScale()
	{
	}

	[Token(Token = "0x60013AC")]
	[Address(RVA = "0xAA6338", Offset = "0xAA6338", VA = "0xAA6338")]
	public void IncrementFrequency()
	{
	}

	[Token(Token = "0x60013AD")]
	[Address(RVA = "0xAA6518", Offset = "0xAA6518", VA = "0xAA6518")]
	private float GetPresetRenderScale(int frequency)
	{
		return default(float);
	}

	[Token(Token = "0x60013AE")]
	[Address(RVA = "0xAA6570", Offset = "0xAA6570", VA = "0xAA6570")]
	public void DecrementFrequency()
	{
	}

	[Token(Token = "0x60013AF")]
	[Address(RVA = "0xAA6748", Offset = "0xAA6748", VA = "0xAA6748")]
	public void UseDefault()
	{
	}

	[Token(Token = "0x60013B0")]
	[Address(RVA = "0xAA6750", Offset = "0xAA6750", VA = "0xAA6750")]
	private void StartXR(int loaderIndex)
	{
	}

	[Token(Token = "0x60013B1")]
	[Address(RVA = "0xAA68C4", Offset = "0xAA68C4", VA = "0xAA68C4")]
	[IteratorStateMachine(typeof(<StartXRCoroutine>d__49))]
	private IEnumerator StartXRCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60013B2")]
	[Address(RVA = "0xAA6954", Offset = "0xAA6954", VA = "0xAA6954")]
	public VRSettings()
	{
	}
}
[Serializable]
[Token(Token = "0x200038D")]
public class WeaponData
{
	[Token(Token = "0x4001857")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public GunType gunType;

	[Token(Token = "0x4001858")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string index;

	[Token(Token = "0x4001859")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string displayName;

	[Token(Token = "0x400185A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string translationKey;

	[Token(Token = "0x400185B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int price;

	[Token(Token = "0x400185C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public string displayPrefabName;

	[Token(Token = "0x400185D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public string defaultVariant;

	[Token(Token = "0x400185E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public WeaponVariantData[] variants;

	[Token(Token = "0x1700022A")]
	public string displayPrefabLocation
	{
		[Token(Token = "0x60013BA")]
		[Address(RVA = "0xAA7078", Offset = "0xAA7078", VA = "0xAA7078")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60013B9")]
	[Address(RVA = "0xAA6F98", Offset = "0xAA6F98", VA = "0xAA6F98")]
	public WeaponVariantData GetVariant(string index)
	{
		return null;
	}

	[Token(Token = "0x60013BB")]
	[Address(RVA = "0xAA70E8", Offset = "0xAA70E8", VA = "0xAA70E8")]
	public WeaponData()
	{
	}
}
[Serializable]
[Token(Token = "0x200038F")]
public class WeaponVariantData
{
	[Token(Token = "0x4001860")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string index;

	[Token(Token = "0x4001861")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string displayName;

	[Token(Token = "0x4001862")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string materialName;

	[Token(Token = "0x4001863")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string translationKey;

	[Token(Token = "0x4001864")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int price;

	[Token(Token = "0x1700022B")]
	public string materialLocation
	{
		[Token(Token = "0x60013BE")]
		[Address(RVA = "0xAA7114", Offset = "0xAA7114", VA = "0xAA7114")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60013BF")]
	[Address(RVA = "0xAA7160", Offset = "0xAA7160", VA = "0xAA7160")]
	public WeaponVariantData()
	{
	}
}
[Token(Token = "0x2000390")]
[CreateAssetMenu(fileName = "WeaponDatabase", menuName = "Settings/WeaponDatabase")]
public class WeaponDatabase : ScriptableObject
{
	[Token(Token = "0x4001865")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static WeaponDatabase _instance;

	[Token(Token = "0x4001866")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	public WeaponData[] data;

	[Token(Token = "0x4001867")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Dictionary<string, WeaponData> dataMap;

	[Token(Token = "0x4001868")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int[] gunTypeIndex;

	[Token(Token = "0x4001869")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public string defaultWeaponIndex;

	[Token(Token = "0x1700022C")]
	public static WeaponDatabase instance
	{
		[Token(Token = "0x60013C0")]
		[Address(RVA = "0xAA7168", Offset = "0xAA7168", VA = "0xAA7168")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700022D")]
	public int Count
	{
		[Token(Token = "0x60013C6")]
		[Address(RVA = "0xAA74C0", Offset = "0xAA74C0", VA = "0xAA74C0")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x60013C1")]
	[Address(RVA = "0xAA724C", Offset = "0xAA724C", VA = "0xAA724C")]
	private void Init()
	{
	}

	[Token(Token = "0x60013C2")]
	[Address(RVA = "0xAA737C", Offset = "0xAA737C", VA = "0xAA737C")]
	public WeaponData GetData(GunType type)
	{
		return null;
	}

	[Token(Token = "0x60013C3")]
	[Address(RVA = "0xAA7438", Offset = "0xAA7438", VA = "0xAA7438")]
	public WeaponData GetData(string index)
	{
		return null;
	}

	[Token(Token = "0x60013C4")]
	[Address(RVA = "0xAA73E4", Offset = "0xAA73E4", VA = "0xAA73E4")]
	public string GetWeaponIndex(GunType type)
	{
		return null;
	}

	[Token(Token = "0x60013C5")]
	[Address(RVA = "0xAA7490", Offset = "0xAA7490", VA = "0xAA7490")]
	public WeaponData GetData(int index)
	{
		return null;
	}

	[Token(Token = "0x60013C7")]
	[Address(RVA = "0xAA74DC", Offset = "0xAA74DC", VA = "0xAA74DC")]
	[ContextMenu("Clear Database")]
	public void ClearDatabase()
	{
	}

	[Token(Token = "0x60013C8")]
	[Address(RVA = "0xAA752C", Offset = "0xAA752C", VA = "0xAA752C")]
	public WeaponDatabase()
	{
	}
}
[Token(Token = "0x2000391")]
[ExecuteInEditMode]
public class BRDFLookupTexture : MonoBehaviour
{
	[Token(Token = "0x400186A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float intensity;

	[Token(Token = "0x400186B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float diffuseIntensity;

	[Token(Token = "0x400186C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Color keyColor;

	[Token(Token = "0x400186D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Color fillColor;

	[Token(Token = "0x400186E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Color backColor;

	[Token(Token = "0x400186F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float wrapAround;

	[Token(Token = "0x4001870")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float metalic;

	[Token(Token = "0x4001871")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float specularIntensity;

	[Token(Token = "0x4001872")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float specularShininess;

	[Token(Token = "0x4001873")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public float translucency;

	[Token(Token = "0x4001874")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public Color translucentColor;

	[Token(Token = "0x4001875")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public int lookupTextureWidth;

	[Token(Token = "0x4001876")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public int lookupTextureHeight;

	[Token(Token = "0x4001877")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public bool fastPreview;

	[Token(Token = "0x4001878")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Texture2D lookupTexture;

	[Token(Token = "0x60013C9")]
	[Address(RVA = "0xAA7534", Offset = "0xAA7534", VA = "0xAA7534")]
	private void Awake()
	{
	}

	[Token(Token = "0x60013CA")]
	[Address(RVA = "0xAA75B4", Offset = "0xAA75B4", VA = "0xAA75B4")]
	private static Color ColorRGB(int r, int g, int b)
	{
		return default(Color);
	}

	[Token(Token = "0x60013CB")]
	[Address(RVA = "0xAA75DC", Offset = "0xAA75DC", VA = "0xAA75DC")]
	private void CheckConsistency()
	{
	}

	[Token(Token = "0x60013CC")]
	[Address(RVA = "0xAA7664", Offset = "0xAA7664", VA = "0xAA7664")]
	private Color PixelFunc(float ndotl, float ndoth)
	{
		return default(Color);
	}

	[Token(Token = "0x60013CD")]
	[Address(RVA = "0xAA7950", Offset = "0xAA7950", VA = "0xAA7950")]
	private void TextureFunc(Texture2D tex)
	{
	}

	[Token(Token = "0x60013CE")]
	[Address(RVA = "0xAA7A48", Offset = "0xAA7A48", VA = "0xAA7A48")]
	private void GenerateLookupTexture(int width, int height)
	{
	}

	[Token(Token = "0x60013CF")]
	[Address(RVA = "0xAA7BBC", Offset = "0xAA7BBC", VA = "0xAA7BBC")]
	public void Preview()
	{
	}

	[Token(Token = "0x60013D0")]
	[Address(RVA = "0xAA75AC", Offset = "0xAA75AC", VA = "0xAA75AC")]
	public void Bake()
	{
	}

	[Token(Token = "0x60013D1")]
	[Address(RVA = "0xAA7BC8", Offset = "0xAA7BC8", VA = "0xAA7BC8")]
	public BRDFLookupTexture()
	{
	}
}
[Token(Token = "0x2000392")]
public class ViveportDemo : MonoBehaviour
{
	[Token(Token = "0x2000393")]
	private class MyLicenseChecker : Viveport.Api.LicenseChecker
	{
		[Token(Token = "0x60013E4")]
		[Address(RVA = "0xAAB498", Offset = "0xAAB498", VA = "0xAAB498", Slot = "4")]
		public override void OnSuccess(long issueTime, long expirationTime, int latestVersion, bool updateRequired)
		{
		}

		[Token(Token = "0x60013E5")]
		[Address(RVA = "0xAAB600", Offset = "0xAAB600", VA = "0xAAB600", Slot = "5")]
		public override void OnFailure(int errorCode, string errorMessage)
		{
		}

		[Token(Token = "0x60013E6")]
		[Address(RVA = "0xAAA6F4", Offset = "0xAAA6F4", VA = "0xAAA6F4")]
		public MyLicenseChecker()
		{
		}
	}

	[Token(Token = "0x4001879")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int nInitValue;

	[Token(Token = "0x400187A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private int nResult;

	[Token(Token = "0x400187B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int nWidth;

	[Token(Token = "0x400187C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private int nHeight;

	[Token(Token = "0x400187D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int nXStart;

	[Token(Token = "0x400187E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private int nYStart;

	[Token(Token = "0x400187F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private string stringToEdit;

	[Token(Token = "0x4001880")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private string StatsCount;

	[Token(Token = "0x4001881")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private string achivToEdit;

	[Token(Token = "0x4001882")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private string leaderboardToEdit;

	[Token(Token = "0x4001883")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private string leaderboardUserName;

	[Token(Token = "0x4001884")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private string leaderboardScore;

	[Token(Token = "0x4001885")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static bool bInit;

	[Token(Token = "0x4001886")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
	private static bool bIsReady;

	[Token(Token = "0x4001887")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
	private static bool bUserProfileIsReady;

	[Token(Token = "0x4001888")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3")]
	private static bool bArcadeIsReady;

	[Token(Token = "0x4001889")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static bool bTokenIsReady;

	[Token(Token = "0x400188A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static string msgBuffer;

	[Token(Token = "0x400188B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static string APP_ID;

	[Token(Token = "0x400188C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static string APP_KEY;

	[Token(Token = "0x60013D2")]
	[Address(RVA = "0xAA7C28", Offset = "0xAA7C28", VA = "0xAA7C28")]
	private static void Log(string msg)
	{
	}

	[Token(Token = "0x60013D3")]
	[Address(RVA = "0xAA7CE8", Offset = "0xAA7CE8", VA = "0xAA7CE8")]
	private void Start()
	{
	}

	[Token(Token = "0x60013D4")]
	[Address(RVA = "0xAA7DC0", Offset = "0xAA7DC0", VA = "0xAA7DC0")]
	private void Update()
	{
	}

	[Token(Token = "0x60013D5")]
	[Address(RVA = "0xAA7DC4", Offset = "0xAA7DC4", VA = "0xAA7DC4")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x60013D6")]
	[Address(RVA = "0xAAA6FC", Offset = "0xAAA6FC", VA = "0xAAA6FC")]
	private static void InitStatusHandler(int nResult)
	{
	}

	[Token(Token = "0x60013D7")]
	[Address(RVA = "0xAAA81C", Offset = "0xAAA81C", VA = "0xAAA81C")]
	private static void IsReadyHandler(int nResult)
	{
	}

	[Token(Token = "0x60013D8")]
	[Address(RVA = "0xAAA93C", Offset = "0xAAA93C", VA = "0xAAA93C")]
	private static void IsTokenReadyHandler(int nResult)
	{
	}

	[Token(Token = "0x60013D9")]
	[Address(RVA = "0xAAAA58", Offset = "0xAAAA58", VA = "0xAAAA58")]
	private static void UserProfileIsReadyHandler(int nResult)
	{
	}

	[Token(Token = "0x60013DA")]
	[Address(RVA = "0xAAAB2C", Offset = "0xAAAB2C", VA = "0xAAAB2C")]
	private static void GetSessionTokenHandler(int nResult, string message)
	{
	}

	[Token(Token = "0x60013DB")]
	[Address(RVA = "0xAAAC68", Offset = "0xAAAC68", VA = "0xAAAC68")]
	private static void QueryRunTimeHandler(int nResult, int nMode)
	{
	}

	[Token(Token = "0x60013DC")]
	[Address(RVA = "0xAAAD64", Offset = "0xAAAD64", VA = "0xAAAD64")]
	private static void IsArcadeLeaderboardReadyHandler(int nResult)
	{
	}

	[Token(Token = "0x60013DD")]
	[Address(RVA = "0xAAAE84", Offset = "0xAAAE84", VA = "0xAAAE84")]
	private static void ShutdownHandler(int nResult)
	{
	}

	[Token(Token = "0x60013DE")]
	[Address(RVA = "0xAAAF8C", Offset = "0xAAAF8C", VA = "0xAAAF8C")]
	private static void DownloadStatsHandler(int nResult)
	{
	}

	[Token(Token = "0x60013DF")]
	[Address(RVA = "0xAAB064", Offset = "0xAAB064", VA = "0xAAB064")]
	private static void UploadStatsHandler(int nResult)
	{
	}

	[Token(Token = "0x60013E0")]
	[Address(RVA = "0xAAB13C", Offset = "0xAAB13C", VA = "0xAAB13C")]
	private static void DownloadLeaderboardHandler(int nResult)
	{
	}

	[Token(Token = "0x60013E1")]
	[Address(RVA = "0xAAB214", Offset = "0xAAB214", VA = "0xAAB214")]
	private static void UploadLeaderboardScoreHandler(int nResult)
	{
	}

	[Token(Token = "0x60013E2")]
	[Address(RVA = "0xAAB2EC", Offset = "0xAAB2EC", VA = "0xAAB2EC")]
	public ViveportDemo()
	{
	}
}
[Token(Token = "0x2000394")]
public class ViveportDemo_ArcadeSession : MonoBehaviour
{
	[Token(Token = "0x400188D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int nWidth;

	[Token(Token = "0x400188E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private int nHeight;

	[Token(Token = "0x400188F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int nXStart;

	[Token(Token = "0x4001890")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private int nYStart;

	[Token(Token = "0x4001891")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static string VIVEPORT_ARCADE_APP_TEST_ID;

	[Token(Token = "0x60013E7")]
	[Address(RVA = "0xAAB6D0", Offset = "0xAAB6D0", VA = "0xAAB6D0")]
	private void Start()
	{
	}

	[Token(Token = "0x60013E8")]
	[Address(RVA = "0xAAB7B4", Offset = "0xAAB7B4", VA = "0xAAB7B4")]
	private void Update()
	{
	}

	[Token(Token = "0x60013E9")]
	[Address(RVA = "0xAAB7B8", Offset = "0xAAB7B8", VA = "0xAAB7B8")]
	private void InitStatusHandler(int nResult)
	{
	}

	[Token(Token = "0x60013EA")]
	[Address(RVA = "0xAAB8A8", Offset = "0xAAB8A8", VA = "0xAAB8A8")]
	public ViveportDemo_ArcadeSession()
	{
	}
}
[Token(Token = "0x2000395")]
public class ViveportDemo_Deeplink : MonoBehaviour
{
	[Token(Token = "0x2000396")]
	private class GotoAppDeeplinkChecker : Viveport.Deeplink.DeeplinkChecker
	{
		[Token(Token = "0x60013F6")]
		[Address(RVA = "0xAAC1A8", Offset = "0xAAC1A8", VA = "0xAAC1A8", Slot = "4")]
		public override void OnSuccess()
		{
		}

		[Token(Token = "0x60013F7")]
		[Address(RVA = "0xAAC2C4", Offset = "0xAAC2C4", VA = "0xAAC2C4", Slot = "5")]
		public override void OnFailure(int errorCode, string errorMessage)
		{
		}

		[Token(Token = "0x60013F8")]
		[Address(RVA = "0xAAC070", Offset = "0xAAC070", VA = "0xAAC070")]
		public GotoAppDeeplinkChecker()
		{
		}
	}

	[Token(Token = "0x2000399")]
	private class GotoStoreDeeplinkChecker : Viveport.Deeplink.DeeplinkChecker
	{
		[Token(Token = "0x60013FE")]
		[Address(RVA = "0xAAC554", Offset = "0xAAC554", VA = "0xAAC554", Slot = "4")]
		public override void OnSuccess()
		{
		}

		[Token(Token = "0x60013FF")]
		[Address(RVA = "0xAAC670", Offset = "0xAAC670", VA = "0xAAC670", Slot = "5")]
		public override void OnFailure(int errorCode, string errorMessage)
		{
		}

		[Token(Token = "0x6001400")]
		[Address(RVA = "0xAAC078", Offset = "0xAAC078", VA = "0xAAC078")]
		public GotoStoreDeeplinkChecker()
		{
		}
	}

	[Token(Token = "0x200039C")]
	private class GoToAppOrGoToStoreDeeplinkChecker : Viveport.Deeplink.DeeplinkChecker
	{
		[Token(Token = "0x6001406")]
		[Address(RVA = "0xAAC900", Offset = "0xAAC900", VA = "0xAAC900", Slot = "4")]
		public override void OnSuccess()
		{
		}

		[Token(Token = "0x6001407")]
		[Address(RVA = "0xAACA1C", Offset = "0xAACA1C", VA = "0xAACA1C", Slot = "5")]
		public override void OnFailure(int errorCode, string errorMessage)
		{
		}

		[Token(Token = "0x6001408")]
		[Address(RVA = "0xAAC080", Offset = "0xAAC080", VA = "0xAAC080")]
		public GoToAppOrGoToStoreDeeplinkChecker()
		{
		}
	}

	[Token(Token = "0x4001892")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static string VIVEPORT_ID;

	[Token(Token = "0x4001893")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static string VIVEPORT_KEY;

	[Token(Token = "0x4001894")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private string GoToApp_Viveport_ID;

	[Token(Token = "0x4001895")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private string GoToStore_Viveport_ID;

	[Token(Token = "0x4001896")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private string LaunchData;

	[Token(Token = "0x4001897")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private string LaunchBranchName;

	[Token(Token = "0x4001898")]
	private const int SUCCESS = 0;

	[Token(Token = "0x4001899")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static bool bInitComplete;

	[Token(Token = "0x60013EC")]
	[Address(RVA = "0xAAB91C", Offset = "0xAAB91C", VA = "0xAAB91C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60013ED")]
	[Address(RVA = "0xAABA0C", Offset = "0xAABA0C", VA = "0xAABA0C")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x60013EE")]
	[Address(RVA = "0xAABAB0", Offset = "0xAABAB0", VA = "0xAABAB0")]
	private void Start()
	{
	}

	[Token(Token = "0x60013EF")]
	[Address(RVA = "0xAABB88", Offset = "0xAABB88", VA = "0xAABB88")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60013F0")]
	[Address(RVA = "0xAABC28", Offset = "0xAABC28", VA = "0xAABC28")]
	private static void InitStatusHandler(int nResult)
	{
	}

	[Token(Token = "0x60013F1")]
	[Address(RVA = "0xAABD24", Offset = "0xAABD24", VA = "0xAABD24")]
	private static void IsReadyHandler(int nResult)
	{
	}

	[Token(Token = "0x60013F2")]
	[Address(RVA = "0xAABE00", Offset = "0xAABE00", VA = "0xAABE00")]
	private static void ShutdownHandler(int nResult)
	{
	}

	[Token(Token = "0x60013F3")]
	[Address(RVA = "0xAABE04", Offset = "0xAABE04", VA = "0xAABE04")]
	private void Update()
	{
	}

	[Token(Token = "0x60013F4")]
	[Address(RVA = "0xAAC088", Offset = "0xAAC088", VA = "0xAAC088")]
	public ViveportDemo_Deeplink()
	{
	}
}
[Token(Token = "0x200039F")]
public class ViveportDemo_DLC : MonoBehaviour
{
	[Token(Token = "0x40018A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int nWidth;

	[Token(Token = "0x40018A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private int nHeight;

	[Token(Token = "0x40018A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int nXStart;

	[Token(Token = "0x40018A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private int nYStart;

	[Token(Token = "0x40018AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static string APP_ID;

	[Token(Token = "0x40018AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static bool bInit;

	[Token(Token = "0x600140E")]
	[Address(RVA = "0xAACCAC", Offset = "0xAACCAC", VA = "0xAACCAC")]
	private void Start()
	{
	}

	[Token(Token = "0x600140F")]
	[Address(RVA = "0xAACD84", Offset = "0xAACD84", VA = "0xAACD84")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6001410")]
	[Address(RVA = "0xAAD148", Offset = "0xAAD148", VA = "0xAAD148")]
	private static void InitStatusHandler(int nResult)
	{
	}

	[Token(Token = "0x6001411")]
	[Address(RVA = "0xAAD14C", Offset = "0xAAD14C", VA = "0xAAD14C")]
	private static void ShutdownHandler(int nResult)
	{
	}

	[Token(Token = "0x6001412")]
	[Address(RVA = "0xAAD150", Offset = "0xAAD150", VA = "0xAAD150")]
	private static void IsDLCReadyHandler(int nResult)
	{
	}

	[Token(Token = "0x6001413")]
	[Address(RVA = "0xAAD154", Offset = "0xAAD154", VA = "0xAAD154")]
	public ViveportDemo_DLC()
	{
	}
}
[Token(Token = "0x20003A0")]
public class ViveportDemo_IAP : MonoBehaviour
{
	[Token(Token = "0x20003A1")]
	public class Item
	{
		[Token(Token = "0x40018B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string ticket;

		[Token(Token = "0x40018B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string[] items;

		[Token(Token = "0x40018BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string subscription_ticket;

		[Token(Token = "0x600141C")]
		[Address(RVA = "0xAAE2F8", Offset = "0xAAE2F8", VA = "0xAAE2F8")]
		public Item()
		{
		}
	}

	[Token(Token = "0x20003A2")]
	private class Result : Viveport.IAPurchase.IAPurchaseListener
	{
		[Token(Token = "0x40018BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Item mItem;

		[Token(Token = "0x600141D")]
		[Address(RVA = "0xAAE36C", Offset = "0xAAE36C", VA = "0xAAE36C", Slot = "4")]
		public override void OnSuccess(string pchCurrencyName)
		{
		}

		[Token(Token = "0x600141E")]
		[Address(RVA = "0xAAE42C", Offset = "0xAAE42C", VA = "0xAAE42C", Slot = "5")]
		public override void OnRequestSuccess(string pchPurchaseId)
		{
		}

		[Token(Token = "0x600141F")]
		[Address(RVA = "0xAAE4E0", Offset = "0xAAE4E0", VA = "0xAAE4E0", Slot = "6")]
		public override void OnPurchaseSuccess(string pchPurchaseId)
		{
		}

		[Token(Token = "0x6001420")]
		[Address(RVA = "0xAAE5D0", Offset = "0xAAE5D0", VA = "0xAAE5D0", Slot = "7")]
		public override void OnQuerySuccess(Viveport.IAPurchase.QueryResponse response)
		{
		}

		[Token(Token = "0x6001421")]
		[Address(RVA = "0xAAE674", Offset = "0xAAE674", VA = "0xAAE674", Slot = "8")]
		public override void OnQuerySuccess(Viveport.IAPurchase.QueryListResponse response)
		{
		}

		[Token(Token = "0x6001422")]
		[Address(RVA = "0xAAED4C", Offset = "0xAAED4C", VA = "0xAAED4C", Slot = "9")]
		public override void OnBalanceSuccess(string pchBalance)
		{
		}

		[Token(Token = "0x6001423")]
		[Address(RVA = "0xAAEDD8", Offset = "0xAAEDD8", VA = "0xAAEDD8", Slot = "11")]
		public override void OnRequestSubscriptionSuccess(string pchSubscriptionId)
		{
		}

		[Token(Token = "0x6001424")]
		[Address(RVA = "0xAAEE8C", Offset = "0xAAEE8C", VA = "0xAAEE8C", Slot = "12")]
		public override void OnRequestSubscriptionWithPlanIDSuccess(string pchSubscriptionId)
		{
		}

		[Token(Token = "0x6001425")]
		[Address(RVA = "0xAAEF40", Offset = "0xAAEF40", VA = "0xAAEF40", Slot = "13")]
		public override void OnSubscribeSuccess(string pchSubscriptionId)
		{
		}

		[Token(Token = "0x6001426")]
		[Address(RVA = "0xAAF030", Offset = "0xAAF030", VA = "0xAAF030", Slot = "14")]
		public override void OnQuerySubscriptionSuccess(Viveport.IAPurchase.Subscription[] subscriptionlist)
		{
		}

		[Token(Token = "0x6001427")]
		[Address(RVA = "0xAAF44C", Offset = "0xAAF44C", VA = "0xAAF44C", Slot = "15")]
		public override void OnQuerySubscriptionListSuccess(Viveport.IAPurchase.Subscription[] subscriptionlist)
		{
		}

		[Token(Token = "0x6001428")]
		[Address(RVA = "0xAAF868", Offset = "0xAAF868", VA = "0xAAF868", Slot = "16")]
		public override void OnCancelSubscriptionSuccess(bool bCanceled)
		{
		}

		[Token(Token = "0x6001429")]
		[Address(RVA = "0xAAF90C", Offset = "0xAAF90C", VA = "0xAAF90C", Slot = "10")]
		public override void OnFailure(int nCode, string pchMessage)
		{
		}

		[Token(Token = "0x600142A")]
		[Address(RVA = "0xAAD3C0", Offset = "0xAAD3C0", VA = "0xAAD3C0")]
		public Result()
		{
		}
	}

	[Token(Token = "0x40018AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int nWidth;

	[Token(Token = "0x40018AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private int nHeight;

	[Token(Token = "0x40018AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int nXStart;

	[Token(Token = "0x40018AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private int nYStart;

	[Token(Token = "0x40018B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static string IAP_APP_TEST_ID;

	[Token(Token = "0x40018B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static string IAP_APP_TEST_KEY;

	[Token(Token = "0x40018B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Result mListener;

	[Token(Token = "0x40018B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static bool bIsDuplicatedSubscription;

	[Token(Token = "0x40018B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
	private static bool bInit_Done;

	[Token(Token = "0x40018B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
	private static bool bIsReady_Done;

	[Token(Token = "0x40018B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13")]
	private static bool bShutdown_Done;

	[Token(Token = "0x40018B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Text winText;

	[Token(Token = "0x6001415")]
	[Address(RVA = "0xAAD1D8", Offset = "0xAAD1D8", VA = "0xAAD1D8")]
	private void Start()
	{
	}

	[Token(Token = "0x6001416")]
	[Address(RVA = "0xAAD424", Offset = "0xAAD424", VA = "0xAAD424")]
	private void Update()
	{
	}

	[Token(Token = "0x6001417")]
	[Address(RVA = "0xAAD428", Offset = "0xAAD428", VA = "0xAAD428")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6001418")]
	[Address(RVA = "0xAAE0A4", Offset = "0xAAE0A4", VA = "0xAAE0A4")]
	private static void InitStatusHandler(int nResult)
	{
	}

	[Token(Token = "0x6001419")]
	[Address(RVA = "0xAAE17C", Offset = "0xAAE17C", VA = "0xAAE17C")]
	private static void ShutdownStatusHandler(int nResult)
	{
	}

	[Token(Token = "0x600141A")]
	[Address(RVA = "0xAAE254", Offset = "0xAAE254", VA = "0xAAE254")]
	public ViveportDemo_IAP()
	{
	}
}
[Token(Token = "0x20003A3")]
public class ViveportDemo_MainThreadDispatcher : MonoBehaviour
{
	[Token(Token = "0x20003A4")]
	private class ThisCallbackWillNotWorkFine : Viveport.IAPurchase.IAPurchaseListener
	{
		[Token(Token = "0x600142F")]
		[Address(RVA = "0xAAFBFC", Offset = "0xAAFBFC", VA = "0xAAFBFC", Slot = "4")]
		public override void OnSuccess(string pchCurrencyName)
		{
		}

		[Token(Token = "0x6001430")]
		[Address(RVA = "0xAAFC98", Offset = "0xAAFC98", VA = "0xAAFC98")]
		public ThisCallbackWillNotWorkFine()
		{
		}
	}

	[Token(Token = "0x20003A5")]
	private class ThisCallbackWillWorkFine_01 : Viveport.IAPurchase.IAPurchaseListener
	{
		[Token(Token = "0x6001431")]
		[Address(RVA = "0xAAFCA0", Offset = "0xAAFCA0", VA = "0xAAFCA0", Slot = "4")]
		public override void OnSuccess(string pchCurrencyName)
		{
		}

		[Token(Token = "0x6001432")]
		[Address(RVA = "0xAAFB68", Offset = "0xAAFB68", VA = "0xAAFB68")]
		public ThisCallbackWillWorkFine_01()
		{
		}
	}

	[Token(Token = "0x20003A7")]
	private class ThisCallbackWillWorkFine_02 : Viveport.IAPurchase.IAPurchaseListener
	{
		[Token(Token = "0x20003A8")]
		[CompilerGenerated]
		private sealed class <ShowResult>d__1 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40018C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40018C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40018C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string pchCurrencyName;

			[Token(Token = "0x1700022E")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600143B")]
				[Address(RVA = "0xAB000C", Offset = "0xAB000C", VA = "0xAB000C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700022F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600143D")]
				[Address(RVA = "0xAB0054", Offset = "0xAB0054", VA = "0xAB0054", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001438")]
			[Address(RVA = "0xAAFF04", Offset = "0xAAFF04", VA = "0xAAFF04")]
			[DebuggerHidden]
			public <ShowResult>d__1(int <>1__state)
			{
			}

			[Token(Token = "0x6001439")]
			[Address(RVA = "0xAAFF34", Offset = "0xAAFF34", VA = "0xAAFF34", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600143A")]
			[Address(RVA = "0xAAFF38", Offset = "0xAAFF38", VA = "0xAAFF38", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600143C")]
			[Address(RVA = "0xAB0014", Offset = "0xAB0014", VA = "0xAB0014", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x6001435")]
		[Address(RVA = "0xAAFE24", Offset = "0xAAFE24", VA = "0xAAFE24", Slot = "4")]
		public override void OnSuccess(string pchCurrencyName)
		{
		}

		[Token(Token = "0x6001436")]
		[Address(RVA = "0xAAFE9C", Offset = "0xAAFE9C", VA = "0xAAFE9C")]
		[IteratorStateMachine(typeof(<ShowResult>d__1))]
		private IEnumerator ShowResult(string pchCurrencyName)
		{
			return null;
		}

		[Token(Token = "0x6001437")]
		[Address(RVA = "0xAAFF2C", Offset = "0xAAFF2C", VA = "0xAAFF2C")]
		public ThisCallbackWillWorkFine_02()
		{
		}
	}

	[Token(Token = "0x40018BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text uiText;

	[Token(Token = "0x40018BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Text myApiResultText;

	[Token(Token = "0x40018BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static readonly string appId;

	[Token(Token = "0x40018BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static readonly string apiKey;

	[Token(Token = "0x600142B")]
	[Address(RVA = "0xAAF9D4", Offset = "0xAAF9D4", VA = "0xAAF9D4")]
	private void Start()
	{
	}

	[Token(Token = "0x600142C")]
	[Address(RVA = "0xAAFAC4", Offset = "0xAAFAC4", VA = "0xAAFAC4")]
	private void InitCallback(int errorCode)
	{
	}

	[Token(Token = "0x600142D")]
	[Address(RVA = "0xAAFB70", Offset = "0xAAFB70", VA = "0xAAFB70")]
	public ViveportDemo_MainThreadDispatcher()
	{
	}
}
[Token(Token = "0x20003A9")]
public class ViveportDemo_Subscription : MonoBehaviour
{
	[Token(Token = "0x40018C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int nWidth;

	[Token(Token = "0x40018C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private int nHeight;

	[Token(Token = "0x40018C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static bool bIsReady;

	[Token(Token = "0x40018C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int nXStart;

	[Token(Token = "0x40018C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private int nYStart;

	[Token(Token = "0x40018C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static string APP_ID;

	[Token(Token = "0x40018CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static bool bInit;

	[Token(Token = "0x600143E")]
	[Address(RVA = "0xAB005C", Offset = "0xAB005C", VA = "0xAB005C")]
	private void Start()
	{
	}

	[Token(Token = "0x600143F")]
	[Address(RVA = "0xAB0134", Offset = "0xAB0134", VA = "0xAB0134")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6001440")]
	[Address(RVA = "0xAB0944", Offset = "0xAB0944", VA = "0xAB0944")]
	private static void InitStatusHandler(int nResult)
	{
	}

	[Token(Token = "0x6001441")]
	[Address(RVA = "0xAB0A64", Offset = "0xAB0A64", VA = "0xAB0A64")]
	private static void ShutdownHandler(int nResult)
	{
	}

	[Token(Token = "0x6001442")]
	[Address(RVA = "0xAB0A68", Offset = "0xAB0A68", VA = "0xAB0A68")]
	private static void IsReadyHandler(int nResult, string message)
	{
	}

	[Token(Token = "0x6001443")]
	[Address(RVA = "0xAB0B98", Offset = "0xAB0B98", VA = "0xAB0B98")]
	public ViveportDemo_Subscription()
	{
	}
}
[Token(Token = "0x20003AA")]
public class ViveportPreviewDemo_DLC : MonoBehaviour
{
	[Token(Token = "0x40018CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int nWidth;

	[Token(Token = "0x40018CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private int nHeight;

	[Token(Token = "0x40018CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int nXStart;

	[Token(Token = "0x40018CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private int nYStart;

	[Token(Token = "0x40018CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static string APP_ID;

	[Token(Token = "0x40018D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static bool bInit;

	[Token(Token = "0x40018D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
	private static bool bIsReady;

	[Token(Token = "0x40018D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA")]
	private static bool isDLCAvailable;

	[Token(Token = "0x40018D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static int dlcCount;

	[Token(Token = "0x40018D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int dlcIndex;

	[Token(Token = "0x6001445")]
	[Address(RVA = "0xAB0C18", Offset = "0xAB0C18", VA = "0xAB0C18")]
	private void Start()
	{
	}

	[Token(Token = "0x6001446")]
	[Address(RVA = "0xAB0CF0", Offset = "0xAB0CF0", VA = "0xAB0CF0")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6001447")]
	[Address(RVA = "0xAB10B4", Offset = "0xAB10B4", VA = "0xAB10B4")]
	private static void InitStatusHandler(int nResult)
	{
	}

	[Token(Token = "0x6001448")]
	[Address(RVA = "0xAB11D0", Offset = "0xAB11D0", VA = "0xAB11D0")]
	private static void ShutdownHandler(int nResult)
	{
	}

	[Token(Token = "0x6001449")]
	[Address(RVA = "0xAB12D8", Offset = "0xAB12D8", VA = "0xAB12D8")]
	private static void IsDLCReadyHandler(int nResult)
	{
	}

	[Token(Token = "0x600144A")]
	[Address(RVA = "0xAB13E0", Offset = "0xAB13E0", VA = "0xAB13E0")]
	public ViveportPreviewDemo_DLC()
	{
	}
}
[Token(Token = "0x20003AB")]
public class ViveportPreviewDemo_IAP : MonoBehaviour
{
	[Token(Token = "0x20003AC")]
	public class Item
	{
		[Token(Token = "0x40018DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string ticket;

		[Token(Token = "0x40018DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string[] items;

		[Token(Token = "0x40018DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string subscription_ticket;

		[Token(Token = "0x6001452")]
		[Address(RVA = "0xAB2220", Offset = "0xAB2220", VA = "0xAB2220")]
		public Item()
		{
		}
	}

	[Token(Token = "0x20003AD")]
	private class Result : Viveport.IAPurchase.IAPurchaseListener
	{
		[Token(Token = "0x40018E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Item mItem;

		[Token(Token = "0x6001453")]
		[Address(RVA = "0xAB2294", Offset = "0xAB2294", VA = "0xAB2294", Slot = "4")]
		public override void OnSuccess(string pchCurrencyName)
		{
		}

		[Token(Token = "0x6001454")]
		[Address(RVA = "0xAB2320", Offset = "0xAB2320", VA = "0xAB2320", Slot = "5")]
		public override void OnRequestSuccess(string pchPurchaseId)
		{
		}

		[Token(Token = "0x6001455")]
		[Address(RVA = "0xAB23D4", Offset = "0xAB23D4", VA = "0xAB23D4", Slot = "6")]
		public override void OnPurchaseSuccess(string pchPurchaseId)
		{
		}

		[Token(Token = "0x6001456")]
		[Address(RVA = "0xAB24C4", Offset = "0xAB24C4", VA = "0xAB24C4", Slot = "7")]
		public override void OnQuerySuccess(Viveport.IAPurchase.QueryResponse response)
		{
		}

		[Token(Token = "0x6001457")]
		[Address(RVA = "0xAB2568", Offset = "0xAB2568", VA = "0xAB2568", Slot = "9")]
		public override void OnBalanceSuccess(string pchBalance)
		{
		}

		[Token(Token = "0x6001458")]
		[Address(RVA = "0xAB25F4", Offset = "0xAB25F4", VA = "0xAB25F4", Slot = "11")]
		public override void OnRequestSubscriptionSuccess(string pchSubscriptionId)
		{
		}

		[Token(Token = "0x6001459")]
		[Address(RVA = "0xAB26A8", Offset = "0xAB26A8", VA = "0xAB26A8", Slot = "12")]
		public override void OnRequestSubscriptionWithPlanIDSuccess(string pchSubscriptionId)
		{
		}

		[Token(Token = "0x600145A")]
		[Address(RVA = "0xAB275C", Offset = "0xAB275C", VA = "0xAB275C", Slot = "13")]
		public override void OnSubscribeSuccess(string pchSubscriptionId)
		{
		}

		[Token(Token = "0x600145B")]
		[Address(RVA = "0xAB284C", Offset = "0xAB284C", VA = "0xAB284C", Slot = "14")]
		public override void OnQuerySubscriptionSuccess(Viveport.IAPurchase.Subscription[] subscriptionlist)
		{
		}

		[Token(Token = "0x600145C")]
		[Address(RVA = "0xAB2C68", Offset = "0xAB2C68", VA = "0xAB2C68", Slot = "16")]
		public override void OnCancelSubscriptionSuccess(bool bCanceled)
		{
		}

		[Token(Token = "0x600145D")]
		[Address(RVA = "0xAB2D0C", Offset = "0xAB2D0C", VA = "0xAB2D0C", Slot = "10")]
		public override void OnFailure(int nCode, string pchMessage)
		{
		}

		[Token(Token = "0x600145E")]
		[Address(RVA = "0xAB1578", Offset = "0xAB1578", VA = "0xAB1578")]
		public Result()
		{
		}
	}

	[Token(Token = "0x40018D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int nWidth;

	[Token(Token = "0x40018D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private int nHeight;

	[Token(Token = "0x40018D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int nXStart;

	[Token(Token = "0x40018D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private int nYStart;

	[Token(Token = "0x40018D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static string IAP_APP_TEST_ID;

	[Token(Token = "0x40018DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static string IAP_APP_TEST_KEY;

	[Token(Token = "0x40018DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Result mListener;

	[Token(Token = "0x40018DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static bool bIsDuplicatedSubscription;

	[Token(Token = "0x600144C")]
	[Address(RVA = "0xAB1470", Offset = "0xAB1470", VA = "0xAB1470")]
	private void Start()
	{
	}

	[Token(Token = "0x600144D")]
	[Address(RVA = "0xAB15DC", Offset = "0xAB15DC", VA = "0xAB15DC")]
	private void Update()
	{
	}

	[Token(Token = "0x600144E")]
	[Address(RVA = "0xAB15E0", Offset = "0xAB15E0", VA = "0xAB15E0")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x600144F")]
	[Address(RVA = "0xAB20DC", Offset = "0xAB20DC", VA = "0xAB20DC")]
	private static void InitStatusHandler(int nResult)
	{
	}

	[Token(Token = "0x6001450")]
	[Address(RVA = "0xAB217C", Offset = "0xAB217C", VA = "0xAB217C")]
	public ViveportPreviewDemo_IAP()
	{
	}
}
[Token(Token = "0x20003AE")]
public class ViveportPreviewDemo_UserStats : MonoBehaviour
{
	[Token(Token = "0x600145F")]
	[Address(RVA = "0xAB2DD4", Offset = "0xAB2DD4", VA = "0xAB2DD4")]
	public ViveportPreviewDemo_UserStats()
	{
	}
}
[Token(Token = "0x20003AF")]
public class ViveportPreviewDemo_ViveportArcadeSession : MonoBehaviour
{
	[Token(Token = "0x40018E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int nWidth;

	[Token(Token = "0x40018E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private int nHeight;

	[Token(Token = "0x40018E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int nXStart;

	[Token(Token = "0x40018E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private int nYStart;

	[Token(Token = "0x40018E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static string VIVEPORT_ARCADE_APP_TEST_ID;

	[Token(Token = "0x6001460")]
	[Address(RVA = "0xAB2DDC", Offset = "0xAB2DDC", VA = "0xAB2DDC")]
	private void Start()
	{
	}

	[Token(Token = "0x6001461")]
	[Address(RVA = "0xAB2EB4", Offset = "0xAB2EB4", VA = "0xAB2EB4")]
	private void Update()
	{
	}

	[Token(Token = "0x6001462")]
	[Address(RVA = "0xAB2EB8", Offset = "0xAB2EB8", VA = "0xAB2EB8")]
	private static void InitStatusHandler(int nResult)
	{
	}

	[Token(Token = "0x6001463")]
	[Address(RVA = "0xAB2F58", Offset = "0xAB2F58", VA = "0xAB2F58")]
	public ViveportPreviewDemo_ViveportArcadeSession()
	{
	}
}
[Token(Token = "0x20003B0")]
public abstract class BaseHand : MonoBehaviour
{
	[Token(Token = "0x20003B1")]
	[CompilerGenerated]
	private sealed class <BlendJointRotations>d__22 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40018EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40018EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40018F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BaseHand <>4__this;

		[Token(Token = "0x40018F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float startTime;

		[Token(Token = "0x40018F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public List<Quaternion> targetRotations;

		[Token(Token = "0x40018F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float blendDuration;

		[Token(Token = "0x17000232")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001478")]
			[Address(RVA = "0xAB3FB4", Offset = "0xAB3FB4", VA = "0xAB3FB4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000233")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600147A")]
			[Address(RVA = "0xAB3FFC", Offset = "0xAB3FFC", VA = "0xAB3FFC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001475")]
		[Address(RVA = "0xAB3CE4", Offset = "0xAB3CE4", VA = "0xAB3CE4")]
		[DebuggerHidden]
		public <BlendJointRotations>d__22(int <>1__state)
		{
		}

		[Token(Token = "0x6001476")]
		[Address(RVA = "0xAB3D88", Offset = "0xAB3D88", VA = "0xAB3D88", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001477")]
		[Address(RVA = "0xAB3D8C", Offset = "0xAB3D8C", VA = "0xAB3D8C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001479")]
		[Address(RVA = "0xAB3FBC", Offset = "0xAB3FBC", VA = "0xAB3FBC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40018E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	public Pose defaultPose;

	[Token(Token = "0x40018E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	public List<Transform> fingerRoots;

	[Token(Token = "0x40018E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	public HandType handType;

	[Token(Token = "0x40018EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected Pose currentPose;

	[Token(Token = "0x40018EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	protected float poseTimer;

	[Token(Token = "0x40018EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Quaternion[] lastJointRotations;

	[Token(Token = "0x40018ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool blendingRotations;

	[Token(Token = "0x17000230")]
	public HandType HandType
	{
		[Token(Token = "0x6001465")]
		[Address(RVA = "0xAB2FCC", Offset = "0xAB2FCC", VA = "0xAB2FCC")]
		get
		{
			return default(HandType);
		}
	}

	[Token(Token = "0x17000231")]
	public List<Transform> Joints
	{
		[Token(Token = "0x6001466")]
		[Address(RVA = "0xAB2FD4", Offset = "0xAB2FD4", VA = "0xAB2FD4")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6001467")]
		[Address(RVA = "0xAB2FDC", Offset = "0xAB2FDC", VA = "0xAB2FDC")]
		[CompilerGenerated]
		protected set
		{
		}
	}

	[Token(Token = "0x6001468")]
	[Address(RVA = "0xAB2FE4", Offset = "0xAB2FE4", VA = "0xAB2FE4", Slot = "4")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x6001469")]
	[Address(RVA = "0xAB3424", Offset = "0xAB3424", VA = "0xAB3424")]
	protected void CloneHand(BaseHand other)
	{
	}

	[Token(Token = "0x600146A")]
	[Address(RVA = "0xAB3070", Offset = "0xAB3070", VA = "0xAB3070")]
	protected List<Transform> CollectJoints()
	{
		return null;
	}

	[Token(Token = "0x600146B")]
	[Address(RVA = "0xAB3518", Offset = "0xAB3518", VA = "0xAB3518")]
	public List<Quaternion> GetJointRotations()
	{
		return null;
	}

	[Token(Token = "0x600146C")]
	[Address(RVA = "0xAB3734", Offset = "0xAB3734", VA = "0xAB3734")]
	public void ApplyDefaultPose()
	{
	}

	[Token(Token = "0x600146D")]
	[Address(RVA = "0xAB3360", Offset = "0xAB3360", VA = "0xAB3360")]
	private void ApplyCurrentPose()
	{
	}

	[Token(Token = "0x600146E")]
	[Address(RVA = "0xAB373C", Offset = "0xAB373C", VA = "0xAB373C")]
	public void ApplyPose(Pose pose)
	{
	}

	[Token(Token = "0x600146F")]
	[Address(RVA = "0xAB3B04", Offset = "0xAB3B04", VA = "0xAB3B04")]
	public void SetPose(Pose pose)
	{
	}

	[Token(Token = "0x6001470")]
	[Address(RVA = "0xAB3810", Offset = "0xAB3810", VA = "0xAB3810")]
	public void ApplyFingerRotations(List<Quaternion> rotations, [Optional] Pose pose, float startTime = 0f)
	{
	}

	[Token(Token = "0x6001471")]
	[Address(RVA = "0xAB3BEC", Offset = "0xAB3BEC", VA = "0xAB3BEC")]
	[IteratorStateMachine(typeof(<BlendJointRotations>d__22))]
	private IEnumerator BlendJointRotations(List<Quaternion> targetRotations, float blendDuration, float startTime = 0f)
	{
		return null;
	}

	[Token(Token = "0x6001472")]
	[Address(RVA = "0xAB3C7C", Offset = "0xAB3C7C", VA = "0xAB3C7C")]
	private bool HasProperCount(List<Quaternion> rotations)
	{
		return default(bool);
	}

	[Token(Token = "0x6001473")]
	public abstract void ApplyOffset(Vector3 position, Quaternion rotation);

	[Token(Token = "0x6001474")]
	[Address(RVA = "0xAB3D0C", Offset = "0xAB3D0C", VA = "0xAB3D0C")]
	protected BaseHand()
	{
	}
}
[Token(Token = "0x20003B2")]
public class GameplayHand : BaseHand
{
	[Token(Token = "0x40018F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public HandController handController;

	[Token(Token = "0x40018F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Transform xForm;

	[Token(Token = "0x40018F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Transform attachmentXForm;

	[Token(Token = "0x40018F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Transform menuRoot;

	[Token(Token = "0x40018F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Transform teleportRoot;

	[Token(Token = "0x600147B")]
	[Address(RVA = "0xAB4004", Offset = "0xAB4004", VA = "0xAB4004")]
	private new void Awake()
	{
	}

	[Token(Token = "0x600147C")]
	[Address(RVA = "0xAB40A8", Offset = "0xAB40A8", VA = "0xAB40A8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600147D")]
	[Address(RVA = "0xAB40AC", Offset = "0xAB40AC", VA = "0xAB40AC")]
	public void CloneHand(GameplayHand other)
	{
	}

	[Token(Token = "0x600147E")]
	[Address(RVA = "0xAB41BC", Offset = "0xAB41BC", VA = "0xAB41BC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600147F")]
	[Address(RVA = "0xAB41C0", Offset = "0xAB41C0", VA = "0xAB41C0")]
	public void ApplyPose(PoseContainer poseContainer)
	{
	}

	[Token(Token = "0x6001480")]
	[Address(RVA = "0xAB41F0", Offset = "0xAB41F0", VA = "0xAB41F0")]
	private void TryApplyObjectPose()
	{
	}

	[Token(Token = "0x6001481")]
	[Address(RVA = "0xAB42CC", Offset = "0xAB42CC", VA = "0xAB42CC")]
	private void TryApplyDefaultPose()
	{
	}

	[Token(Token = "0x6001482")]
	[Address(RVA = "0xAB43E0", Offset = "0xAB43E0", VA = "0xAB43E0", Slot = "5")]
	public override void ApplyOffset(Vector3 position, Quaternion rotation)
	{
	}

	[Token(Token = "0x6001483")]
	[Address(RVA = "0xAB4598", Offset = "0xAB4598", VA = "0xAB4598")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x6001484")]
	[Address(RVA = "0xAB4620", Offset = "0xAB4620", VA = "0xAB4620")]
	public GameplayHand()
	{
	}
}
[Token(Token = "0x20003B3")]
[ExecuteInEditMode]
[SelectionBase]
public class PreviewHand : BaseHand
{
	[Token(Token = "0x6001485")]
	[Address(RVA = "0xAB4628", Offset = "0xAB4628", VA = "0xAB4628")]
	public void MirrorAndApplyPose(PreviewHand sourceHand)
	{
	}

	[Token(Token = "0x6001486")]
	[Address(RVA = "0xAB46E8", Offset = "0xAB46E8", VA = "0xAB46E8")]
	private List<Quaternion> MirrorJoints(List<Transform> joints)
	{
		return null;
	}

	[Token(Token = "0x6001487")]
	[Address(RVA = "0xAB492C", Offset = "0xAB492C", VA = "0xAB492C")]
	private Quaternion MirrorJoint(Transform sourceTransform)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x6001488")]
	[Address(RVA = "0xAB4904", Offset = "0xAB4904", VA = "0xAB4904")]
	private Quaternion MirrorRotation(Transform sourceTransform)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x6001489")]
	[Address(RVA = "0xAB48E0", Offset = "0xAB48E0", VA = "0xAB48E0")]
	private Vector3 MirrorPosition(Transform sourceTransform)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600148A")]
	[Address(RVA = "0xAB4950", Offset = "0xAB4950", VA = "0xAB4950", Slot = "5")]
	public override void ApplyOffset(Vector3 position, Quaternion rotation)
	{
	}

	[Token(Token = "0x600148B")]
	[Address(RVA = "0xAB49E4", Offset = "0xAB49E4", VA = "0xAB49E4")]
	public PreviewHand()
	{
	}
}
[Serializable]
[Token(Token = "0x20003B4")]
public class HandInfo
{
	[Token(Token = "0x40018F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Vector3 attachPosition;

	[Token(Token = "0x40018FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Quaternion attachRotation;

	[Token(Token = "0x40018FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public List<Quaternion> fingerRotations;

	[Token(Token = "0x17000234")]
	public static HandInfo Empty
	{
		[Token(Token = "0x600148C")]
		[Address(RVA = "0xAB49EC", Offset = "0xAB49EC", VA = "0xAB49EC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600148D")]
	[Address(RVA = "0xAB4B38", Offset = "0xAB4B38", VA = "0xAB4B38")]
	public void Save(PreviewHand hand)
	{
	}

	[Token(Token = "0x600148E")]
	[Address(RVA = "0xAB4A44", Offset = "0xAB4A44", VA = "0xAB4A44")]
	public HandInfo()
	{
	}
}
[Token(Token = "0x20003B5")]
public enum HandType
{
	[Token(Token = "0x40018FD")]
	None,
	[Token(Token = "0x40018FE")]
	Left,
	[Token(Token = "0x40018FF")]
	Right
}
[Token(Token = "0x20003B6")]
public enum HandPoseType
{
	[Token(Token = "0x4001901")]
	None,
	[Token(Token = "0x4001902")]
	Default,
	[Token(Token = "0x4001903")]
	Open,
	[Token(Token = "0x4001904")]
	Point,
	[Token(Token = "0x4001905")]
	HoldGun,
	[Token(Token = "0x4001906")]
	CupGun,
	[Token(Token = "0x4001907")]
	Fist,
	[Token(Token = "0x4001908")]
	HoldMag,
	[Token(Token = "0x4001909")]
	HoldSlideTop,
	[Token(Token = "0x400190A")]
	HoldSlideRear
}
[Token(Token = "0x20003B7")]
[CreateAssetMenu(fileName = "NewPoseData")]
[SerializeField]
public class Pose : ScriptableObject
{
	[Token(Token = "0x400190B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float blendToDuration;

	[Token(Token = "0x400190C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public HandPoseType poseType;

	[Token(Token = "0x400190D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public HandInfo leftHandInfo;

	[Token(Token = "0x400190E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public HandInfo rightHandInfo;

	[Token(Token = "0x600148F")]
	[Address(RVA = "0xAB4BAC", Offset = "0xAB4BAC", VA = "0xAB4BAC")]
	public HandInfo GetHandInfo(HandType handType)
	{
		return null;
	}

	[Token(Token = "0x6001490")]
	[Address(RVA = "0xAB4BD4", Offset = "0xAB4BD4", VA = "0xAB4BD4")]
	public Pose()
	{
	}
}
[Token(Token = "0x20003B8")]
public class PoseContainer : MonoBehaviour
{
	[Token(Token = "0x400190F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Pose pose;

	[Token(Token = "0x6001491")]
	[Address(RVA = "0xAB4BFC", Offset = "0xAB4BFC", VA = "0xAB4BFC")]
	public PoseContainer()
	{
	}
}
[Token(Token = "0x20003B9")]
[ExecuteInEditMode]
public class HandManager : MonoBehaviour
{
	[Token(Token = "0x4001910")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private bool hideHands;

	[Token(Token = "0x4001911")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject leftHandPrefab;

	[Token(Token = "0x4001912")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GameObject rightHandPrefab;

	[Token(Token = "0x17000235")]
	public PreviewHand LeftHand
	{
		[Token(Token = "0x6001492")]
		[Address(RVA = "0xAB4C04", Offset = "0xAB4C04", VA = "0xAB4C04")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6001493")]
		[Address(RVA = "0xAB4C0C", Offset = "0xAB4C0C", VA = "0xAB4C0C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000236")]
	public PreviewHand RightHand
	{
		[Token(Token = "0x6001494")]
		[Address(RVA = "0xAB4C14", Offset = "0xAB4C14", VA = "0xAB4C14")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6001495")]
		[Address(RVA = "0xAB4C1C", Offset = "0xAB4C1C", VA = "0xAB4C1C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000237")]
	public bool HandsExist
	{
		[Token(Token = "0x6001496")]
		[Address(RVA = "0xAB4C24", Offset = "0xAB4C24", VA = "0xAB4C24")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6001497")]
	[Address(RVA = "0xAB4CB4", Offset = "0xAB4CB4", VA = "0xAB4CB4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001498")]
	[Address(RVA = "0xAB4D0C", Offset = "0xAB4D0C", VA = "0xAB4D0C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6001499")]
	[Address(RVA = "0xAB4CE0", Offset = "0xAB4CE0", VA = "0xAB4CE0")]
	private void CreateHandPreviews()
	{
	}

	[Token(Token = "0x600149A")]
	[Address(RVA = "0xAB4D14", Offset = "0xAB4D14", VA = "0xAB4D14")]
	private PreviewHand CreateHand(GameObject prefab)
	{
		return null;
	}

	[Token(Token = "0x600149B")]
	[Address(RVA = "0xAB4D10", Offset = "0xAB4D10", VA = "0xAB4D10")]
	private void DestroyHandPreviews()
	{
	}

	[Token(Token = "0x600149C")]
	[Address(RVA = "0xAB4DF0", Offset = "0xAB4DF0", VA = "0xAB4DF0")]
	public void UpdateHands(Pose pose, Transform parentTransform)
	{
	}

	[Token(Token = "0x600149D")]
	[Address(RVA = "0xAB4E78", Offset = "0xAB4E78", VA = "0xAB4E78")]
	public void SavePose(Pose pose)
	{
	}

	[Token(Token = "0x600149E")]
	[Address(RVA = "0xAB4EB8", Offset = "0xAB4EB8", VA = "0xAB4EB8")]
	public HandManager()
	{
	}
}
[Token(Token = "0x20003BA")]
[ExecuteInEditMode]
public class SelectionHandler : MonoBehaviour
{
	[Token(Token = "0x17000238")]
	public XRBaseInteractable CurretInteractable
	{
		[Token(Token = "0x600149F")]
		[Address(RVA = "0xAB4EC8", Offset = "0xAB4EC8", VA = "0xAB4EC8")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60014A0")]
		[Address(RVA = "0xAB4ED0", Offset = "0xAB4ED0", VA = "0xAB4ED0")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x60014A1")]
	[Address(RVA = "0xAB4ED8", Offset = "0xAB4ED8", VA = "0xAB4ED8")]
	public bool CheckForNewInteractable()
	{
		return default(bool);
	}

	[Token(Token = "0x60014A2")]
	[Address(RVA = "0xAB4F14", Offset = "0xAB4F14", VA = "0xAB4F14")]
	private XRBaseInteractable GetInteractable()
	{
		return null;
	}

	[Token(Token = "0x60014A3")]
	[Address(RVA = "0xAB4F90", Offset = "0xAB4F90", VA = "0xAB4F90")]
	private bool IsDifferentInteractable(XRBaseInteractable currentInteractable, XRBaseInteractable newInteractable)
	{
		return default(bool);
	}

	[Token(Token = "0x60014A4")]
	[Address(RVA = "0xAB5074", Offset = "0xAB5074", VA = "0xAB5074")]
	public GameObject SetObjectPose(Pose pose)
	{
		return null;
	}

	[Token(Token = "0x60014A5")]
	[Address(RVA = "0xAB50E8", Offset = "0xAB50E8", VA = "0xAB50E8")]
	public Pose TryGetPose(GameObject targetObject)
	{
		return null;
	}

	[Token(Token = "0x60014A6")]
	[Address(RVA = "0xAB50E4", Offset = "0xAB50E4", VA = "0xAB50E4")]
	private void MarkActiveSceneAsDirty()
	{
	}

	[Token(Token = "0x60014A7")]
	[Address(RVA = "0xAB51A0", Offset = "0xAB51A0", VA = "0xAB51A0")]
	public SelectionHandler()
	{
	}
}
[Token(Token = "0x20003BB")]
public static class Extensions
{
	[Token(Token = "0x60014A8")]
	[Address(RVA = "0xAB4518", Offset = "0xAB4518", VA = "0xAB4518")]
	public static Vector3 RotatePointAroundPivot(this Vector3 point, Vector3 pivot, Vector3 angles)
	{
		return default(Vector3);
	}
}
namespace PublicKeyConvert
{
	[Token(Token = "0x20003BC")]
	public class PEMKeyLoader
	{
		[Token(Token = "0x4001916")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static byte[] SeqOID;

		[Token(Token = "0x60014A9")]
		[Address(RVA = "0xAB51A8", Offset = "0xAB51A8", VA = "0xAB51A8")]
		private static bool CompareBytearrays(byte[] a, byte[] b)
		{
			return default(bool);
		}

		[Token(Token = "0x60014AA")]
		[Address(RVA = "0xAB5218", Offset = "0xAB5218", VA = "0xAB5218")]
		public static RSACryptoServiceProvider CryptoServiceProviderFromPublicKeyInfo(byte[] x509key)
		{
			return null;
		}

		[Token(Token = "0x60014AB")]
		[Address(RVA = "0xAB5828", Offset = "0xAB5828", VA = "0xAB5828")]
		public static RSACryptoServiceProvider CryptoServiceProviderFromPublicKeyInfo(string base64EncodedKey)
		{
			return null;
		}

		[Token(Token = "0x60014AC")]
		[Address(RVA = "0xAB5930", Offset = "0xAB5930", VA = "0xAB5930")]
		public PEMKeyLoader()
		{
		}
	}
}
namespace Viveport
{
	[Token(Token = "0x20003BD")]
	public class MainThreadDispatcher : MonoBehaviour
	{
		[Token(Token = "0x20003BF")]
		[CompilerGenerated]
		private sealed class <ActionWrapper>d__12 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400191B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400191C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400191D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Action action;

			[Token(Token = "0x17000239")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60014C4")]
				[Address(RVA = "0xAB6164", Offset = "0xAB6164", VA = "0xAB6164", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700023A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60014C6")]
				[Address(RVA = "0xAB61AC", Offset = "0xAB61AC", VA = "0xAB61AC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60014C1")]
			[Address(RVA = "0xAB6014", Offset = "0xAB6014", VA = "0xAB6014")]
			[DebuggerHidden]
			public <ActionWrapper>d__12(int <>1__state)
			{
			}

			[Token(Token = "0x60014C2")]
			[Address(RVA = "0xAB6100", Offset = "0xAB6100", VA = "0xAB6100", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60014C3")]
			[Address(RVA = "0xAB6104", Offset = "0xAB6104", VA = "0xAB6104", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60014C5")]
			[Address(RVA = "0xAB616C", Offset = "0xAB616C", VA = "0xAB616C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20003C0")]
		[CompilerGenerated]
		private sealed class <ActionWrapper>d__13<T1> : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400191E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>1__state;

			[Token(Token = "0x400191F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private object <>2__current;

			[Token(Token = "0x4001920")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Action<T1> action;

			[Token(Token = "0x4001921")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public T1 param1;

			[Token(Token = "0x1700023B")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60014CA")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700023C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60014CC")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60014C7")]
			[DebuggerHidden]
			public <ActionWrapper>d__13(int <>1__state)
			{
			}

			[Token(Token = "0x60014C8")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60014C9")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60014CB")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20003C1")]
		[CompilerGenerated]
		private sealed class <ActionWrapper>d__14<T1, T2> : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001922")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>1__state;

			[Token(Token = "0x4001923")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private object <>2__current;

			[Token(Token = "0x4001924")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Action<T1, T2> action;

			[Token(Token = "0x4001925")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public T1 param1;

			[Token(Token = "0x4001926")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public T2 param2;

			[Token(Token = "0x1700023D")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60014D0")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700023E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60014D2")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60014CD")]
			[DebuggerHidden]
			public <ActionWrapper>d__14(int <>1__state)
			{
			}

			[Token(Token = "0x60014CE")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60014CF")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60014D1")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20003C2")]
		[CompilerGenerated]
		private sealed class <ActionWrapper>d__15<T1, T2, T3> : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001927")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>1__state;

			[Token(Token = "0x4001928")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private object <>2__current;

			[Token(Token = "0x4001929")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Action<T1, T2, T3> action;

			[Token(Token = "0x400192A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public T1 param1;

			[Token(Token = "0x400192B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public T2 param2;

			[Token(Token = "0x400192C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public T3 param3;

			[Token(Token = "0x1700023F")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60014D6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000240")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60014D8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60014D3")]
			[DebuggerHidden]
			public <ActionWrapper>d__15(int <>1__state)
			{
			}

			[Token(Token = "0x60014D4")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60014D5")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60014D7")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20003C3")]
		[CompilerGenerated]
		private sealed class <ActionWrapper>d__16<T1, T2, T3, T4> : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400192D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>1__state;

			[Token(Token = "0x400192E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private object <>2__current;

			[Token(Token = "0x400192F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Action<T1, T2, T3, T4> action;

			[Token(Token = "0x4001930")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public T1 param1;

			[Token(Token = "0x4001931")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public T2 param2;

			[Token(Token = "0x4001932")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public T3 param3;

			[Token(Token = "0x4001933")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public T4 param4;

			[Token(Token = "0x17000241")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60014DC")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000242")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60014DE")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60014D9")]
			[DebuggerHidden]
			public <ActionWrapper>d__16(int <>1__state)
			{
			}

			[Token(Token = "0x60014DA")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60014DB")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60014DD")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001917")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Queue<Action> actions;

		[Token(Token = "0x4001918")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static MainThreadDispatcher instance;

		[Token(Token = "0x60014AE")]
		[Address(RVA = "0xAB59CC", Offset = "0xAB59CC", VA = "0xAB59CC")]
		private void Awake()
		{
		}

		[Token(Token = "0x60014AF")]
		[Address(RVA = "0xAB5AC4", Offset = "0xAB5AC4", VA = "0xAB5AC4")]
		public void Update()
		{
		}

		[Token(Token = "0x60014B0")]
		[Address(RVA = "0xAB5C68", Offset = "0xAB5C68", VA = "0xAB5C68")]
		public static MainThreadDispatcher Instance()
		{
			return null;
		}

		[Token(Token = "0x60014B1")]
		[Address(RVA = "0xAB5D64", Offset = "0xAB5D64", VA = "0xAB5D64")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60014B2")]
		[Address(RVA = "0xAB5DBC", Offset = "0xAB5DBC", VA = "0xAB5DBC")]
		public void Enqueue(IEnumerator action)
		{
		}

		[Token(Token = "0x60014B3")]
		[Address(RVA = "0xAB5F90", Offset = "0xAB5F90", VA = "0xAB5F90")]
		public void Enqueue(Action action)
		{
		}

		[Token(Token = "0x60014B4")]
		public void Enqueue<T1>(Action<T1> action, T1 param1)
		{
		}

		[Token(Token = "0x60014B5")]
		public void Enqueue<T1, T2>(Action<T1, T2> action, T1 param1, T2 param2)
		{
		}

		[Token(Token = "0x60014B6")]
		public void Enqueue<T1, T2, T3>(Action<T1, T2, T3> action, T1 param1, T2 param2, T3 param3)
		{
		}

		[Token(Token = "0x60014B7")]
		public void Enqueue<T1, T2, T3, T4>(Action<T1, T2, T3, T4> action, T1 param1, T2 param2, T3 param3, T4 param4)
		{
		}

		[Token(Token = "0x60014B8")]
		[Address(RVA = "0xAB5FAC", Offset = "0xAB5FAC", VA = "0xAB5FAC")]
		[IteratorStateMachine(typeof(<ActionWrapper>d__12))]
		private IEnumerator ActionWrapper(Action action)
		{
			return null;
		}

		[Token(Token = "0x60014B9")]
		[IteratorStateMachine(typeof(<ActionWrapper>d__13<>))]
		private IEnumerator ActionWrapper<T1>(Action<T1> action, T1 param1)
		{
			return null;
		}

		[Token(Token = "0x60014BA")]
		[IteratorStateMachine(typeof(<ActionWrapper>d__14<, >))]
		private IEnumerator ActionWrapper<T1, T2>(Action<T1, T2> action, T1 param1, T2 param2)
		{
			return null;
		}

		[Token(Token = "0x60014BB")]
		[IteratorStateMachine(typeof(<ActionWrapper>d__15<, , >))]
		private IEnumerator ActionWrapper<T1, T2, T3>(Action<T1, T2, T3> action, T1 param1, T2 param2, T3 param3)
		{
			return null;
		}

		[Token(Token = "0x60014BC")]
		[IteratorStateMachine(typeof(<ActionWrapper>d__16<, , , >))]
		private IEnumerator ActionWrapper<T1, T2, T3, T4>(Action<T1, T2, T3, T4> action, T1 param1, T2 param2, T3 param3, T4 param4)
		{
			return null;
		}

		[Token(Token = "0x60014BD")]
		[Address(RVA = "0xAB603C", Offset = "0xAB603C", VA = "0xAB603C")]
		public MainThreadDispatcher()
		{
		}
	}
	[Token(Token = "0x20003C4")]
	public enum Locale
	{
		[Token(Token = "0x4001935")]
		US,
		[Token(Token = "0x4001936")]
		DE,
		[Token(Token = "0x4001937")]
		JP,
		[Token(Token = "0x4001938")]
		KR,
		[Token(Token = "0x4001939")]
		RU,
		[Token(Token = "0x400193A")]
		CN,
		[Token(Token = "0x400193B")]
		TW,
		[Token(Token = "0x400193C")]
		FR
	}
	[Token(Token = "0x20003C5")]
	public delegate void StatusCallback(int nResult);
	[Token(Token = "0x20003C6")]
	public delegate void StatusCallback2(int nResult, string message);
	[Token(Token = "0x20003C7")]
	public delegate void QueryRuntimeModeCallback(int nResult, int emu);
	[Token(Token = "0x20003C8")]
	public class Leaderboard
	{
		[Token(Token = "0x17000243")]
		public int Rank
		{
			[Token(Token = "0x60014EB")]
			[Address(RVA = "0xAB660C", Offset = "0xAB660C", VA = "0xAB660C")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60014EC")]
			[Address(RVA = "0xAB6614", Offset = "0xAB6614", VA = "0xAB6614")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000244")]
		public int Score
		{
			[Token(Token = "0x60014ED")]
			[Address(RVA = "0xAB661C", Offset = "0xAB661C", VA = "0xAB661C")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60014EE")]
			[Address(RVA = "0xAB6624", Offset = "0xAB6624", VA = "0xAB6624")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000245")]
		public string UserName
		{
			[Token(Token = "0x60014EF")]
			[Address(RVA = "0xAB662C", Offset = "0xAB662C", VA = "0xAB662C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60014F0")]
			[Address(RVA = "0xAB6634", Offset = "0xAB6634", VA = "0xAB6634")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x60014F1")]
		[Address(RVA = "0xAB663C", Offset = "0xAB663C", VA = "0xAB663C")]
		public Leaderboard()
		{
		}
	}
	[Token(Token = "0x20003C9")]
	public class SubscriptionStatus
	{
		[Token(Token = "0x20003CA")]
		public enum Platform
		{
			[Token(Token = "0x4001943")]
			Windows,
			[Token(Token = "0x4001944")]
			Android
		}

		[Token(Token = "0x20003CB")]
		public enum TransactionType
		{
			[Token(Token = "0x4001946")]
			Unknown,
			[Token(Token = "0x4001947")]
			Paid,
			[Token(Token = "0x4001948")]
			Redeem,
			[Token(Token = "0x4001949")]
			FreeTrial
		}

		[Token(Token = "0x17000246")]
		public List<Platform> Platforms
		{
			[Token(Token = "0x60014F2")]
			[Address(RVA = "0xAB6644", Offset = "0xAB6644", VA = "0xAB6644")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60014F3")]
			[Address(RVA = "0xAB664C", Offset = "0xAB664C", VA = "0xAB664C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000247")]
		public TransactionType Type
		{
			[Token(Token = "0x60014F4")]
			[Address(RVA = "0xAB6654", Offset = "0xAB6654", VA = "0xAB6654")]
			[CompilerGenerated]
			get
			{
				return default(TransactionType);
			}
			[Token(Token = "0x60014F5")]
			[Address(RVA = "0xAB665C", Offset = "0xAB665C", VA = "0xAB665C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x60014F6")]
		[Address(RVA = "0xAB6664", Offset = "0xAB6664", VA = "0xAB6664")]
		public SubscriptionStatus()
		{
		}
	}
	[Token(Token = "0x20003CC")]
	public class Api
	{
		[Token(Token = "0x20003CD")]
		public abstract class LicenseChecker
		{
			[Token(Token = "0x60014FF")]
			public abstract void OnSuccess(long issueTime, long expirationTime, int latestVersion, bool updateRequired);

			[Token(Token = "0x6001500")]
			public abstract void OnFailure(int errorCode, string errorMessage);

			[Token(Token = "0x6001501")]
			[Address(RVA = "0xAB747C", Offset = "0xAB747C", VA = "0xAB747C")]
			protected LicenseChecker()
			{
			}
		}

		[Token(Token = "0x400194A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static readonly List<GetLicenseCallback> InternalGetLicenseCallbacks;

		[Token(Token = "0x400194B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal static readonly List<Viveport.Internal.StatusCallback> InternalStatusCallbacks;

		[Token(Token = "0x400194C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal static readonly List<Viveport.Internal.QueryRuntimeModeCallback> InternalQueryRunTimeCallbacks;

		[Token(Token = "0x400194D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal static readonly List<Viveport.Internal.StatusCallback2> InternalStatusCallback2s;

		[Token(Token = "0x400194E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal static readonly List<LicenseChecker> InternalLicenseCheckers;

		[Token(Token = "0x400194F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static Viveport.Internal.StatusCallback initIl2cppCallback;

		[Token(Token = "0x4001950")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static Viveport.Internal.StatusCallback shutdownIl2cppCallback;

		[Token(Token = "0x4001951")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static Viveport.Internal.QueryRuntimeModeCallback queryRuntimeModeIl2cppCallback;

		[Token(Token = "0x4001952")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private static readonly string VERSION;

		[Token(Token = "0x4001953")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private static string _appId;

		[Token(Token = "0x4001954")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private static string _appKey;

		[Token(Token = "0x60014F7")]
		[Address(RVA = "0xAB67D0", Offset = "0xAB67D0", VA = "0xAB67D0")]
		public static void GetLicense(LicenseChecker checker, string appId, string appKey)
		{
		}

		[Token(Token = "0x60014F8")]
		[Address(RVA = "0xAB66E8", Offset = "0xAB66E8", VA = "0xAB66E8")]
		[MonoPInvokeCallback(typeof(Viveport.Internal.StatusCallback))]
		private static void InitIl2cppCallback(int errorCode)
		{
		}

		[Token(Token = "0x60014F9")]
		[Address(RVA = "0xAB6A38", Offset = "0xAB6A38", VA = "0xAB6A38")]
		public static int Init(StatusCallback callback, string appId)
		{
			return default(int);
		}

		[Token(Token = "0x60014FA")]
		[Address(RVA = "0xAB675C", Offset = "0xAB675C", VA = "0xAB675C")]
		[MonoPInvokeCallback(typeof(Viveport.Internal.StatusCallback))]
		private static void ShutdownIl2cppCallback(int errorCode)
		{
		}

		[Token(Token = "0x60014FB")]
		[Address(RVA = "0xAB6E34", Offset = "0xAB6E34", VA = "0xAB6E34")]
		public static int Shutdown(StatusCallback callback)
		{
			return default(int);
		}

		[Token(Token = "0x60014FC")]
		[Address(RVA = "0xAB70FC", Offset = "0xAB70FC", VA = "0xAB70FC")]
		public static string Version()
		{
			return null;
		}

		[Token(Token = "0x60014FD")]
		[Address(RVA = "0xAB7278", Offset = "0xAB7278", VA = "0xAB7278")]
		public Api()
		{
		}
	}
	[Token(Token = "0x20003CE")]
	public class User
	{
		[Token(Token = "0x4001955")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Viveport.Internal.StatusCallback isReadyIl2cppCallback;

		[Token(Token = "0x6001502")]
		[Address(RVA = "0xAB7484", Offset = "0xAB7484", VA = "0xAB7484")]
		[MonoPInvokeCallback(typeof(Viveport.Internal.StatusCallback))]
		private static void IsReadyIl2cppCallback(int errorCode)
		{
		}

		[Token(Token = "0x6001503")]
		[Address(RVA = "0xAB74E8", Offset = "0xAB74E8", VA = "0xAB74E8")]
		public static int IsReady(StatusCallback callback)
		{
			return default(int);
		}

		[Token(Token = "0x6001504")]
		[Address(RVA = "0xAB77F8", Offset = "0xAB77F8", VA = "0xAB77F8")]
		public static string GetUserId()
		{
			return null;
		}

		[Token(Token = "0x6001505")]
		[Address(RVA = "0xAB78F0", Offset = "0xAB78F0", VA = "0xAB78F0")]
		public static string GetUserName()
		{
			return null;
		}

		[Token(Token = "0x6001506")]
		[Address(RVA = "0xAB79E8", Offset = "0xAB79E8", VA = "0xAB79E8")]
		public static string GetUserAvatarUrl()
		{
			return null;
		}

		[Token(Token = "0x6001507")]
		[Address(RVA = "0xAB7AE0", Offset = "0xAB7AE0", VA = "0xAB7AE0")]
		public User()
		{
		}
	}
	[Token(Token = "0x20003CF")]
	public class UserStats
	{
		[Token(Token = "0x20003D0")]
		public enum LeaderBoardRequestType
		{
			[Token(Token = "0x400195C")]
			GlobalData,
			[Token(Token = "0x400195D")]
			GlobalDataAroundUser,
			[Token(Token = "0x400195E")]
			LocalData,
			[Token(Token = "0x400195F")]
			LocalDataAroundUser
		}

		[Token(Token = "0x20003D1")]
		public enum LeaderBoardTimeRange
		{
			[Token(Token = "0x4001961")]
			AllTime,
			[Token(Token = "0x4001962")]
			Daily,
			[Token(Token = "0x4001963")]
			Weekly,
			[Token(Token = "0x4001964")]
			Monthly
		}

		[Token(Token = "0x20003D2")]
		public enum LeaderBoardSortMethod
		{
			[Token(Token = "0x4001966")]
			None,
			[Token(Token = "0x4001967")]
			Ascending,
			[Token(Token = "0x4001968")]
			Descending
		}

		[Token(Token = "0x20003D3")]
		public enum LeaderBoardDiaplayType
		{
			[Token(Token = "0x400196A")]
			None,
			[Token(Token = "0x400196B")]
			Numeric,
			[Token(Token = "0x400196C")]
			TimeSeconds,
			[Token(Token = "0x400196D")]
			TimeMilliSeconds
		}

		[Token(Token = "0x20003D4")]
		public enum LeaderBoardScoreMethod
		{
			[Token(Token = "0x400196F")]
			None,
			[Token(Token = "0x4001970")]
			KeepBest,
			[Token(Token = "0x4001971")]
			ForceUpdate
		}

		[Token(Token = "0x20003D5")]
		public enum AchievementDisplayAttribute
		{
			[Token(Token = "0x4001973")]
			Name,
			[Token(Token = "0x4001974")]
			Desc,
			[Token(Token = "0x4001975")]
			Hidden
		}

		[Token(Token = "0x4001956")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Viveport.Internal.StatusCallback isReadyIl2cppCallback;

		[Token(Token = "0x4001957")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Viveport.Internal.StatusCallback downloadStatsIl2cppCallback;

		[Token(Token = "0x4001958")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static Viveport.Internal.StatusCallback uploadStatsIl2cppCallback;

		[Token(Token = "0x4001959")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static Viveport.Internal.StatusCallback downloadLeaderboardScoresIl2cppCallback;

		[Token(Token = "0x400195A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static Viveport.Internal.StatusCallback uploadLeaderboardScoreIl2cppCallback;

		[Token(Token = "0x6001508")]
		[Address(RVA = "0xAB7AE8", Offset = "0xAB7AE8", VA = "0xAB7AE8")]
		[MonoPInvokeCallback(typeof(Viveport.Internal.StatusCallback))]
		private static void IsReadyIl2cppCallback(int errorCode)
		{
		}

		[Token(Token = "0x6001509")]
		[Address(RVA = "0xAB7CDC", Offset = "0xAB7CDC", VA = "0xAB7CDC")]
		public static int IsReady(StatusCallback callback)
		{
			return default(int);
		}

		[Token(Token = "0x600150A")]
		[Address(RVA = "0xAB7B4C", Offset = "0xAB7B4C", VA = "0xAB7B4C")]
		[MonoPInvokeCallback(typeof(Viveport.Internal.StatusCallback))]
		private static void DownloadStatsIl2cppCallback(int errorCode)
		{
		}

		[Token(Token = "0x600150B")]
		[Address(RVA = "0xAB7FEC", Offset = "0xAB7FEC", VA = "0xAB7FEC")]
		public static int DownloadStats(StatusCallback callback)
		{
			return default(int);
		}

		[Token(Token = "0x600150C")]
		[Address(RVA = "0xAB82FC", Offset = "0xAB82FC", VA = "0xAB82FC")]
		public static int GetStat(string name, int defaultValue)
		{
			return default(int);
		}

		[Token(Token = "0x600150D")]
		[Address(RVA = "0xAB8434", Offset = "0xAB8434", VA = "0xAB8434")]
		public static float GetStat(string name, float defaultValue)
		{
			return default(float);
		}

		[Token(Token = "0x600150E")]
		[Address(RVA = "0xAB856C", Offset = "0xAB856C", VA = "0xAB856C")]
		public static void SetStat(string name, int value)
		{
		}

		[Token(Token = "0x600150F")]
		[Address(RVA = "0xAB86A4", Offset = "0xAB86A4", VA = "0xAB86A4")]
		public static void SetStat(string name, float value)
		{
		}

		[Token(Token = "0x6001510")]
		[Address(RVA = "0xAB7BB0", Offset = "0xAB7BB0", VA = "0xAB7BB0")]
		[MonoPInvokeCallback(typeof(Viveport.Internal.StatusCallback))]
		private static void UploadStatsIl2cppCallback(int errorCode)
		{
		}

		[Token(Token = "0x6001511")]
		[Address(RVA = "0xAB87DC", Offset = "0xAB87DC", VA = "0xAB87DC")]
		public static int UploadStats(StatusCallback callback)
		{
			return default(int);
		}

		[Token(Token = "0x6001512")]
		[Address(RVA = "0xAB8AEC", Offset = "0xAB8AEC", VA = "0xAB8AEC")]
		public static bool GetAchievement(string pchName)
		{
			return default(bool);
		}

		[Token(Token = "0x6001513")]
		[Address(RVA = "0xAB8BC4", Offset = "0xAB8BC4", VA = "0xAB8BC4")]
		public static int GetAchievementUnlockTime(string pchName)
		{
			return default(int);
		}

		[Token(Token = "0x6001514")]
		[Address(RVA = "0xAB8C9C", Offset = "0xAB8C9C", VA = "0xAB8C9C")]
		public static string GetAchievementIcon(string pchName)
		{
			return null;
		}

		[Token(Token = "0x6001515")]
		[Address(RVA = "0xAB8D74", Offset = "0xAB8D74", VA = "0xAB8D74")]
		public static string GetAchievementDisplayAttribute(string pchName, AchievementDisplayAttribute attr)
		{
			return null;
		}

		[Token(Token = "0x6001516")]
		[Address(RVA = "0xAB8EAC", Offset = "0xAB8EAC", VA = "0xAB8EAC")]
		public static string GetAchievementDisplayAttribute(string pchName, AchievementDisplayAttribute attr, Locale locale)
		{
			return null;
		}

		[Token(Token = "0x6001517")]
		[Address(RVA = "0xAB902C", Offset = "0xAB902C", VA = "0xAB902C")]
		public static int SetAchievement(string pchName)
		{
			return default(int);
		}

		[Token(Token = "0x6001518")]
		[Address(RVA = "0xAB9104", Offset = "0xAB9104", VA = "0xAB9104")]
		public static int ClearAchievement(string pchName)
		{
			return default(int);
		}

		[Token(Token = "0x6001519")]
		[Address(RVA = "0xAB7C14", Offset = "0xAB7C14", VA = "0xAB7C14")]
		[MonoPInvokeCallback(typeof(Viveport.Internal.StatusCallback))]
		private static void DownloadLeaderboardScoresIl2cppCallback(int errorCode)
		{
		}

		[Token(Token = "0x600151A")]
		[Address(RVA = "0xAB91DC", Offset = "0xAB91DC", VA = "0xAB91DC")]
		public static int DownloadLeaderboardScores(StatusCallback callback, string pchLeaderboardName, LeaderBoardRequestType eLeaderboardDataRequest, LeaderBoardTimeRange eLeaderboardDataTimeRange, int nRangeStart, int nRangeEnd)
		{
			return default(int);
		}

		[Token(Token = "0x600151B")]
		[Address(RVA = "0xAB7C78", Offset = "0xAB7C78", VA = "0xAB7C78")]
		[MonoPInvokeCallback(typeof(Viveport.Internal.StatusCallback))]
		private static void UploadLeaderboardScoreIl2cppCallback(int errorCode)
		{
		}

		[Token(Token = "0x600151C")]
		[Address(RVA = "0xAB9688", Offset = "0xAB9688", VA = "0xAB9688")]
		public static int UploadLeaderboardScore(StatusCallback callback, string pchLeaderboardName, int nScore)
		{
			return default(int);
		}

		[Token(Token = "0x600151D")]
		[Address(RVA = "0xAB9A3C", Offset = "0xAB9A3C", VA = "0xAB9A3C")]
		public static Leaderboard GetLeaderboardScore(int index)
		{
			return null;
		}

		[Token(Token = "0x600151E")]
		[Address(RVA = "0xAB9CB0", Offset = "0xAB9CB0", VA = "0xAB9CB0")]
		public static int GetLeaderboardScoreCount()
		{
			return default(int);
		}

		[Token(Token = "0x600151F")]
		[Address(RVA = "0xAB9D80", Offset = "0xAB9D80", VA = "0xAB9D80")]
		public static LeaderBoardSortMethod GetLeaderboardSortMethod()
		{
			return default(LeaderBoardSortMethod);
		}

		[Token(Token = "0x6001520")]
		[Address(RVA = "0xAB9E50", Offset = "0xAB9E50", VA = "0xAB9E50")]
		public static LeaderBoardDiaplayType GetLeaderboardDisplayType()
		{
			return default(LeaderBoardDiaplayType);
		}

		[Token(Token = "0x6001521")]
		[Address(RVA = "0xAB9F20", Offset = "0xAB9F20", VA = "0xAB9F20")]
		public UserStats()
		{
		}
	}
	[Token(Token = "0x20003D6")]
	public class ArcadeLeaderboard
	{
		[Token(Token = "0x6001522")]
		[Address(RVA = "0xAB9F28", Offset = "0xAB9F28", VA = "0xAB9F28")]
		public ArcadeLeaderboard()
		{
		}
	}
	[Token(Token = "0x20003D7")]
	public class IAPurchase
	{
		[Token(Token = "0x20003D8")]
		private class IAPHandler : BaseHandler
		{
			[Token(Token = "0x4001983")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private static IAPurchaseListener listener;

			[Token(Token = "0x600153E")]
			[Address(RVA = "0xABA5F0", Offset = "0xABA5F0", VA = "0xABA5F0")]
			public IAPHandler(IAPurchaseListener cb)
			{
			}

			[Token(Token = "0x600153F")]
			[Address(RVA = "0xABA654", Offset = "0xABA654", VA = "0xABA654")]
			public IAPurchaseCallback getIsReadyHandler()
			{
				return null;
			}

			[Token(Token = "0x6001540")]
			[Address(RVA = "0xABC8D0", Offset = "0xABC8D0", VA = "0xABC8D0", Slot = "4")]
			protected override void IsReadyHandler(int code, string message)
			{
			}

			[Token(Token = "0x6001541")]
			[Address(RVA = "0xABA9AC", Offset = "0xABA9AC", VA = "0xABA9AC")]
			public IAPurchaseCallback getRequestHandler()
			{
				return null;
			}

			[Token(Token = "0x6001542")]
			[Address(RVA = "0xABD0DC", Offset = "0xABD0DC", VA = "0xABD0DC", Slot = "5")]
			protected override void RequestHandler(int code, string message)
			{
			}

			[Token(Token = "0x6001543")]
			[Address(RVA = "0xABAEAC", Offset = "0xABAEAC", VA = "0xABAEAC")]
			public IAPurchaseCallback getPurchaseHandler()
			{
				return null;
			}

			[Token(Token = "0x6001544")]
			[Address(RVA = "0xABD564", Offset = "0xABD564", VA = "0xABD564", Slot = "6")]
			protected override void PurchaseHandler(int code, string message)
			{
			}

			[Token(Token = "0x6001545")]
			[Address(RVA = "0xABB140", Offset = "0xABB140", VA = "0xABB140")]
			public IAPurchaseCallback getQueryHandler()
			{
				return null;
			}

			[Token(Token = "0x6001546")]
			[Address(RVA = "0xABDAD8", Offset = "0xABDAD8", VA = "0xABDAD8", Slot = "7")]
			protected override void QueryHandler(int code, string message)
			{
			}

			[Token(Token = "0x6001547")]
			[Address(RVA = "0xABB3CC", Offset = "0xABB3CC", VA = "0xABB3CC")]
			public IAPurchaseCallback getQueryListHandler()
			{
				return null;
			}

			[Token(Token = "0x6001548")]
			[Address(RVA = "0xABE400", Offset = "0xABE400", VA = "0xABE400", Slot = "8")]
			protected override void QueryListHandler(int code, string message)
			{
			}

			[Token(Token = "0x6001549")]
			[Address(RVA = "0xABB62C", Offset = "0xABB62C", VA = "0xABB62C")]
			public IAPurchaseCallback getBalanceHandler()
			{
				return null;
			}

			[Token(Token = "0x600154A")]
			[Address(RVA = "0xABF338", Offset = "0xABF338", VA = "0xABF338", Slot = "9")]
			protected override void BalanceHandler(int code, string message)
			{
			}

			[Token(Token = "0x600154B")]
			[Address(RVA = "0xABB8DC", Offset = "0xABB8DC", VA = "0xABB8DC")]
			public IAPurchaseCallback getRequestSubscriptionHandler()
			{
				return null;
			}

			[Token(Token = "0x600154C")]
			[Address(RVA = "0xABF844", Offset = "0xABF844", VA = "0xABF844", Slot = "10")]
			protected override void RequestSubscriptionHandler(int code, string message)
			{
			}

			[Token(Token = "0x600154D")]
			[Address(RVA = "0xABBCEC", Offset = "0xABBCEC", VA = "0xABBCEC")]
			public IAPurchaseCallback getRequestSubscriptionWithPlanIDHandler()
			{
				return null;
			}

			[Token(Token = "0x600154E")]
			[Address(RVA = "0xABFCC0", Offset = "0xABFCC0", VA = "0xABFCC0", Slot = "11")]
			protected override void RequestSubscriptionWithPlanIDHandler(int code, string message)
			{
			}

			[Token(Token = "0x600154F")]
			[Address(RVA = "0xABBF80", Offset = "0xABBF80", VA = "0xABBF80")]
			public IAPurchaseCallback getSubscribeHandler()
			{
				return null;
			}

			[Token(Token = "0x6001550")]
			[Address(RVA = "0xAC013C", Offset = "0xAC013C", VA = "0xAC013C", Slot = "12")]
			protected override void SubscribeHandler(int code, string message)
			{
			}

			[Token(Token = "0x6001551")]
			[Address(RVA = "0xABC214", Offset = "0xABC214", VA = "0xABC214")]
			public IAPurchaseCallback getQuerySubscriptionHandler()
			{
				return null;
			}

			[Token(Token = "0x6001552")]
			[Address(RVA = "0xAC07B0", Offset = "0xAC07B0", VA = "0xAC07B0", Slot = "13")]
			protected override void QuerySubscriptionHandler(int code, string message)
			{
			}

			[Token(Token = "0x6001553")]
			[Address(RVA = "0xABC4A0", Offset = "0xABC4A0", VA = "0xABC4A0")]
			public IAPurchaseCallback getQuerySubscriptionListHandler()
			{
				return null;
			}

			[Token(Token = "0x6001554")]
			[Address(RVA = "0xAC0C58", Offset = "0xAC0C58", VA = "0xAC0C58", Slot = "14")]
			protected override void QuerySubscriptionListHandler(int code, string message)
			{
			}

			[Token(Token = "0x6001555")]
			[Address(RVA = "0xABC708", Offset = "0xABC708", VA = "0xABC708")]
			public IAPurchaseCallback getCancelSubscriptionHandler()
			{
				return null;
			}

			[Token(Token = "0x6001556")]
			[Address(RVA = "0xAC1100", Offset = "0xAC1100", VA = "0xAC1100", Slot = "15")]
			protected override void CancelSubscriptionHandler(int code, string message)
			{
			}
		}

		[Token(Token = "0x20003D9")]
		private abstract class BaseHandler
		{
			[Token(Token = "0x6001557")]
			protected abstract void IsReadyHandler(int code, string message);

			[Token(Token = "0x6001558")]
			protected abstract void RequestHandler(int code, string message);

			[Token(Token = "0x6001559")]
			protected abstract void PurchaseHandler(int code, string message);

			[Token(Token = "0x600155A")]
			protected abstract void QueryHandler(int code, string message);

			[Token(Token = "0x600155B")]
			protected abstract void QueryListHandler(int code, string message);

			[Token(Token = "0x600155C")]
			protected abstract void BalanceHandler(int code, string message);

			[Token(Token = "0x600155D")]
			protected abstract void RequestSubscriptionHandler(int code, string message);

			[Token(Token = "0x600155E")]
			protected abstract void RequestSubscriptionWithPlanIDHandler(int code, string message);

			[Token(Token = "0x600155F")]
			protected abstract void SubscribeHandler(int code, string message);

			[Token(Token = "0x6001560")]
			protected abstract void QuerySubscriptionHandler(int code, string message);

			[Token(Token = "0x6001561")]
			protected abstract void QuerySubscriptionListHandler(int code, string message);

			[Token(Token = "0x6001562")]
			protected abstract void CancelSubscriptionHandler(int code, string message);

			[Token(Token = "0x6001563")]
			[Address(RVA = "0xABC8C8", Offset = "0xABC8C8", VA = "0xABC8C8")]
			protected BaseHandler()
			{
			}
		}

		[Token(Token = "0x20003DA")]
		public class IAPurchaseListener
		{
			[Token(Token = "0x6001564")]
			[Address(RVA = "0xAC1488", Offset = "0xAC1488", VA = "0xAC1488", Slot = "4")]
			public virtual void OnSuccess(string pchCurrencyName)
			{
			}

			[Token(Token = "0x6001565")]
			[Address(RVA = "0xAC148C", Offset = "0xAC148C", VA = "0xAC148C", Slot = "5")]
			public virtual void OnRequestSuccess(string pchPurchaseId)
			{
			}

			[Token(Token = "0x6001566")]
			[Address(RVA = "0xAC1490", Offset = "0xAC1490", VA = "0xAC1490", Slot = "6")]
			public virtual void OnPurchaseSuccess(string pchPurchaseId)
			{
			}

			[Token(Token = "0x6001567")]
			[Address(RVA = "0xAC1494", Offset = "0xAC1494", VA = "0xAC1494", Slot = "7")]
			public virtual void OnQuerySuccess(QueryResponse response)
			{
			}

			[Token(Token = "0x6001568")]
			[Address(RVA = "0xAC1498", Offset = "0xAC1498", VA = "0xAC1498", Slot = "8")]
			public virtual void OnQuerySuccess(QueryListResponse response)
			{
			}

			[Token(Token = "0x6001569")]
			[Address(RVA = "0xAC149C", Offset = "0xAC149C", VA = "0xAC149C", Slot = "9")]
			public virtual void OnBalanceSuccess(string pchBalance)
			{
			}

			[Token(Token = "0x600156A")]
			[Address(RVA = "0xAC14A0", Offset = "0xAC14A0", VA = "0xAC14A0", Slot = "10")]
			public virtual void OnFailure(int nCode, string pchMessage)
			{
			}

			[Token(Token = "0x600156B")]
			[Address(RVA = "0xAC14A4", Offset = "0xAC14A4", VA = "0xAC14A4", Slot = "11")]
			public virtual void OnRequestSubscriptionSuccess(string pchSubscriptionId)
			{
			}

			[Token(Token = "0x600156C")]
			[Address(RVA = "0xAC14A8", Offset = "0xAC14A8", VA = "0xAC14A8", Slot = "12")]
			public virtual void OnRequestSubscriptionWithPlanIDSuccess(string pchSubscriptionId)
			{
			}

			[Token(Token = "0x600156D")]
			[Address(RVA = "0xAC14AC", Offset = "0xAC14AC", VA = "0xAC14AC", Slot = "13")]
			public virtual void OnSubscribeSuccess(string pchSubscriptionId)
			{
			}

			[Token(Token = "0x600156E")]
			[Address(RVA = "0xAC14B0", Offset = "0xAC14B0", VA = "0xAC14B0", Slot = "14")]
			public virtual void OnQuerySubscriptionSuccess(Subscription[] subscriptionlist)
			{
			}

			[Token(Token = "0x600156F")]
			[Address(RVA = "0xAC14B4", Offset = "0xAC14B4", VA = "0xAC14B4", Slot = "15")]
			public virtual void OnQuerySubscriptionListSuccess(Subscription[] subscriptionlist)
			{
			}

			[Token(Token = "0x6001570")]
			[Address(RVA = "0xAC14B8", Offset = "0xAC14B8", VA = "0xAC14B8", Slot = "16")]
			public virtual void OnCancelSubscriptionSuccess(bool bCanceled)
			{
			}

			[Token(Token = "0x6001571")]
			[Address(RVA = "0xAC14BC", Offset = "0xAC14BC", VA = "0xAC14BC")]
			public IAPurchaseListener()
			{
			}
		}

		[Token(Token = "0x20003DB")]
		public class QueryResponse
		{
			[Token(Token = "0x17000248")]
			public string order_id
			{
				[Token(Token = "0x6001572")]
				[Address(RVA = "0xAC14C4", Offset = "0xAC14C4", VA = "0xAC14C4")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x6001573")]
				[Address(RVA = "0xAC14CC", Offset = "0xAC14CC", VA = "0xAC14CC")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x17000249")]
			public string purchase_id
			{
				[Token(Token = "0x6001574")]
				[Address(RVA = "0xAC14D4", Offset = "0xAC14D4", VA = "0xAC14D4")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x6001575")]
				[Address(RVA = "0xAC14DC", Offset = "0xAC14DC", VA = "0xAC14DC")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x1700024A")]
			public string status
			{
				[Token(Token = "0x6001576")]
				[Address(RVA = "0xAC14E4", Offset = "0xAC14E4", VA = "0xAC14E4")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x6001577")]
				[Address(RVA = "0xAC14EC", Offset = "0xAC14EC", VA = "0xAC14EC")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x1700024B")]
			public string price
			{
				[Token(Token = "0x6001578")]
				[Address(RVA = "0xAC14F4", Offset = "0xAC14F4", VA = "0xAC14F4")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x6001579")]
				[Address(RVA = "0xAC14FC", Offset = "0xAC14FC", VA = "0xAC14FC")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x1700024C")]
			public string currency
			{
				[Token(Token = "0x600157A")]
				[Address(RVA = "0xAC1504", Offset = "0xAC1504", VA = "0xAC1504")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x600157B")]
				[Address(RVA = "0xAC150C", Offset = "0xAC150C", VA = "0xAC150C")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x1700024D")]
			public long paid_timestamp
			{
				[Token(Token = "0x600157C")]
				[Address(RVA = "0xAC1514", Offset = "0xAC1514", VA = "0xAC1514")]
				[CompilerGenerated]
				get
				{
					return default(long);
				}
				[Token(Token = "0x600157D")]
				[Address(RVA = "0xAC151C", Offset = "0xAC151C", VA = "0xAC151C")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x600157E")]
			[Address(RVA = "0xABE3F8", Offset = "0xABE3F8", VA = "0xABE3F8")]
			public QueryResponse()
			{
			}
		}

		[Token(Token = "0x20003DC")]
		public class QueryResponse2
		{
			[Token(Token = "0x1700024E")]
			public string order_id
			{
				[Token(Token = "0x600157F")]
				[Address(RVA = "0xAC1524", Offset = "0xAC1524", VA = "0xAC1524")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x6001580")]
				[Address(RVA = "0xAC152C", Offset = "0xAC152C", VA = "0xAC152C")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x1700024F")]
			public string app_id
			{
				[Token(Token = "0x6001581")]
				[Address(RVA = "0xAC1534", Offset = "0xAC1534", VA = "0xAC1534")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x6001582")]
				[Address(RVA = "0xAC153C", Offset = "0xAC153C", VA = "0xAC153C")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x17000250")]
			public string purchase_id
			{
				[Token(Token = "0x6001583")]
				[Address(RVA = "0xAC1544", Offset = "0xAC1544", VA = "0xAC1544")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x6001584")]
				[Address(RVA = "0xAC154C", Offset = "0xAC154C", VA = "0xAC154C")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x17000251")]
			public string user_data
			{
				[Token(Token = "0x6001585")]
				[Address(RVA = "0xAC1554", Offset = "0xAC1554", VA = "0xAC1554")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x6001586")]
				[Address(RVA = "0xAC155C", Offset = "0xAC155C", VA = "0xAC155C")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x17000252")]
			public string price
			{
				[Token(Token = "0x6001587")]
				[Address(RVA = "0xAC1564", Offset = "0xAC1564", VA = "0xAC1564")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x6001588")]
				[Address(RVA = "0xAC156C", Offset = "0xAC156C", VA = "0xAC156C")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x17000253")]
			public string currency
			{
				[Token(Token = "0x6001589")]
				[Address(RVA = "0xAC1574", Offset = "0xAC1574", VA = "0xAC1574")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x600158A")]
				[Address(RVA = "0xAC157C", Offset = "0xAC157C", VA = "0xAC157C")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x17000254")]
			public long paid_timestamp
			{
				[Token(Token = "0x600158B")]
				[Address(RVA = "0xAC1584", Offset = "0xAC1584", VA = "0xAC1584")]
				[CompilerGenerated]
				get
				{
					return default(long);
				}
				[Token(Token = "0x600158C")]
				[Address(RVA = "0xAC158C", Offset = "0xAC158C", VA = "0xAC158C")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x600158D")]
			[Address(RVA = "0xABF308", Offset = "0xABF308", VA = "0xABF308")]
			public QueryResponse2()
			{
			}
		}

		[Token(Token = "0x20003DD")]
		public class QueryListResponse
		{
			[Token(Token = "0x4001994")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public List<QueryResponse2> purchaseList;

			[Token(Token = "0x17000255")]
			public int total
			{
				[Token(Token = "0x600158E")]
				[Address(RVA = "0xAC1594", Offset = "0xAC1594", VA = "0xAC1594")]
				[CompilerGenerated]
				get
				{
					return default(int);
				}
				[Token(Token = "0x600158F")]
				[Address(RVA = "0xAC159C", Offset = "0xAC159C", VA = "0xAC159C")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x17000256")]
			public int from
			{
				[Token(Token = "0x6001590")]
				[Address(RVA = "0xAC15A4", Offset = "0xAC15A4", VA = "0xAC15A4")]
				[CompilerGenerated]
				get
				{
					return default(int);
				}
				[Token(Token = "0x6001591")]
				[Address(RVA = "0xAC15AC", Offset = "0xAC15AC", VA = "0xAC15AC")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x17000257")]
			public int to
			{
				[Token(Token = "0x6001592")]
				[Address(RVA = "0xAC15B4", Offset = "0xAC15B4", VA = "0xAC15B4")]
				[CompilerGenerated]
				get
				{
					return default(int);
				}
				[Token(Token = "0x6001593")]
				[Address(RVA = "0xAC15BC", Offset = "0xAC15BC", VA = "0xAC15BC")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x6001594")]
			[Address(RVA = "0xABF330", Offset = "0xABF330", VA = "0xABF330")]
			public QueryListResponse()
			{
			}
		}

		[Token(Token = "0x20003DE")]
		public class StatusDetailTransaction
		{
			[Token(Token = "0x17000258")]
			public long create_time
			{
				[Token(Token = "0x6001595")]
				[Address(RVA = "0xAC15C4", Offset = "0xAC15C4", VA = "0xAC15C4")]
				[CompilerGenerated]
				get
				{
					return default(long);
				}
				[Token(Token = "0x6001596")]
				[Address(RVA = "0xAC15CC", Offset = "0xAC15CC", VA = "0xAC15CC")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x17000259")]
			public string payment_method
			{
				[Token(Token = "0x6001597")]
				[Address(RVA = "0xAC15D4", Offset = "0xAC15D4", VA = "0xAC15D4")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x6001598")]
				[Address(RVA = "0xAC15DC", Offset = "0xAC15DC", VA = "0xAC15DC")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x1700025A")]
			public string status
			{
				[Token(Token = "0x6001599")]
				[Address(RVA = "0xAC15E4", Offset = "0xAC15E4", VA = "0xAC15E4")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x600159A")]
				[Address(RVA = "0xAC15EC", Offset = "0xAC15EC", VA = "0xAC15EC")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x600159B")]
			[Address(RVA = "0xAC15F4", Offset = "0xAC15F4", VA = "0xAC15F4")]
			public StatusDetailTransaction()
			{
			}
		}

		[Token(Token = "0x20003DF")]
		public class StatusDetail
		{
			[Token(Token = "0x1700025B")]
			public long date_next_charge
			{
				[Token(Token = "0x600159C")]
				[Address(RVA = "0xAC15FC", Offset = "0xAC15FC", VA = "0xAC15FC")]
				[CompilerGenerated]
				get
				{
					return default(long);
				}
				[Token(Token = "0x600159D")]
				[Address(RVA = "0xAC1604", Offset = "0xAC1604", VA = "0xAC1604")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x1700025C")]
			public StatusDetailTransaction[] transactions
			{
				[Token(Token = "0x600159E")]
				[Address(RVA = "0xAC160C", Offset = "0xAC160C", VA = "0xAC160C")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x600159F")]
				[Address(RVA = "0xAC1614", Offset = "0xAC1614", VA = "0xAC1614")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x1700025D")]
			public string cancel_reason
			{
				[Token(Token = "0x60015A0")]
				[Address(RVA = "0xAC161C", Offset = "0xAC161C", VA = "0xAC161C")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x60015A1")]
				[Address(RVA = "0xAC1624", Offset = "0xAC1624", VA = "0xAC1624")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x60015A2")]
			[Address(RVA = "0xAC162C", Offset = "0xAC162C", VA = "0xAC162C")]
			public StatusDetail()
			{
			}
		}

		[Token(Token = "0x20003E0")]
		public class TimePeriod
		{
			[Token(Token = "0x1700025E")]
			public string time_type
			{
				[Token(Token = "0x60015A3")]
				[Address(RVA = "0xAC1634", Offset = "0xAC1634", VA = "0xAC1634")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x60015A4")]
				[Address(RVA = "0xAC163C", Offset = "0xAC163C", VA = "0xAC163C")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x1700025F")]
			public int value
			{
				[Token(Token = "0x60015A5")]
				[Address(RVA = "0xAC1644", Offset = "0xAC1644", VA = "0xAC1644")]
				[CompilerGenerated]
				get
				{
					return default(int);
				}
				[Token(Token = "0x60015A6")]
				[Address(RVA = "0xAC164C", Offset = "0xAC164C", VA = "0xAC164C")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x60015A7")]
			[Address(RVA = "0xAC1654", Offset = "0xAC1654", VA = "0xAC1654")]
			public TimePeriod()
			{
			}
		}

		[Token(Token = "0x20003E1")]
		public class Subscription
		{
			[Token(Token = "0x17000260")]
			public string app_id
			{
				[Token(Token = "0x60015A8")]
				[Address(RVA = "0xAC165C", Offset = "0xAC165C", VA = "0xAC165C")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x60015A9")]
				[Address(RVA = "0xAC1664", Offset = "0xAC1664", VA = "0xAC1664")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x17000261")]
			public string order_id
			{
				[Token(Token = "0x60015AA")]
				[Address(RVA = "0xAC166C", Offset = "0xAC166C", VA = "0xAC166C")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x60015AB")]
				[Address(RVA = "0xAC1674", Offset = "0xAC1674", VA = "0xAC1674")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x17000262")]
			public string subscription_id
			{
				[Token(Token = "0x60015AC")]
				[Address(RVA = "0xAC167C", Offset = "0xAC167C", VA = "0xAC167C")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x60015AD")]
				[Address(RVA = "0xAC1684", Offset = "0xAC1684", VA = "0xAC1684")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x17000263")]
			public string price
			{
				[Token(Token = "0x60015AE")]
				[Address(RVA = "0xAC168C", Offset = "0xAC168C", VA = "0xAC168C")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x60015AF")]
				[Address(RVA = "0xAC1694", Offset = "0xAC1694", VA = "0xAC1694")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x17000264")]
			public string currency
			{
				[Token(Token = "0x60015B0")]
				[Address(RVA = "0xAC169C", Offset = "0xAC169C", VA = "0xAC169C")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x60015B1")]
				[Address(RVA = "0xAC16A4", Offset = "0xAC16A4", VA = "0xAC16A4")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x17000265")]
			public long subscribed_timestamp
			{
				[Token(Token = "0x60015B2")]
				[Address(RVA = "0xAC16AC", Offset = "0xAC16AC", VA = "0xAC16AC")]
				[CompilerGenerated]
				get
				{
					return default(long);
				}
				[Token(Token = "0x60015B3")]
				[Address(RVA = "0xAC16B4", Offset = "0xAC16B4", VA = "0xAC16B4")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x17000266")]
			public TimePeriod free_trial_period
			{
				[Token(Token = "0x60015B4")]
				[Address(RVA = "0xAC16BC", Offset = "0xAC16BC", VA = "0xAC16BC")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x60015B5")]
				[Address(RVA = "0xAC16C4", Offset = "0xAC16C4", VA = "0xAC16C4")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x17000267")]
			public TimePeriod charge_period
			{
				[Token(Token = "0x60015B6")]
				[Address(RVA = "0xAC16CC", Offset = "0xAC16CC", VA = "0xAC16CC")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x60015B7")]
				[Address(RVA = "0xAC16D4", Offset = "0xAC16D4", VA = "0xAC16D4")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x17000268")]
			public int number_of_charge_period
			{
				[Token(Token = "0x60015B8")]
				[Address(RVA = "0xAC16DC", Offset = "0xAC16DC", VA = "0xAC16DC")]
				[CompilerGenerated]
				get
				{
					return default(int);
				}
				[Token(Token = "0x60015B9")]
				[Address(RVA = "0xAC16E4", Offset = "0xAC16E4", VA = "0xAC16E4")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x17000269")]
			public string plan_id
			{
				[Token(Token = "0x60015BA")]
				[Address(RVA = "0xAC16EC", Offset = "0xAC16EC", VA = "0xAC16EC")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x60015BB")]
				[Address(RVA = "0xAC16F4", Offset = "0xAC16F4", VA = "0xAC16F4")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x1700026A")]
			public string plan_name
			{
				[Token(Token = "0x60015BC")]
				[Address(RVA = "0xAC16FC", Offset = "0xAC16FC", VA = "0xAC16FC")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x60015BD")]
				[Address(RVA = "0xAC1704", Offset = "0xAC1704", VA = "0xAC1704")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x1700026B")]
			public string status
			{
				[Token(Token = "0x60015BE")]
				[Address(RVA = "0xAC170C", Offset = "0xAC170C", VA = "0xAC170C")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x60015BF")]
				[Address(RVA = "0xAC1714", Offset = "0xAC1714", VA = "0xAC1714")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x1700026C")]
			public StatusDetail status_detail
			{
				[Token(Token = "0x60015C0")]
				[Address(RVA = "0xAC171C", Offset = "0xAC171C", VA = "0xAC171C")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x60015C1")]
				[Address(RVA = "0xAC1724", Offset = "0xAC1724", VA = "0xAC1724")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x60015C2")]
			[Address(RVA = "0xAC172C", Offset = "0xAC172C", VA = "0xAC172C")]
			public Subscription()
			{
			}
		}

		[Token(Token = "0x20003E2")]
		public class QuerySubscritionResponse
		{
			[Token(Token = "0x1700026D")]
			public int statusCode
			{
				[Token(Token = "0x60015C3")]
				[Address(RVA = "0xAC1734", Offset = "0xAC1734", VA = "0xAC1734")]
				[CompilerGenerated]
				get
				{
					return default(int);
				}
				[Token(Token = "0x60015C4")]
				[Address(RVA = "0xAC173C", Offset = "0xAC173C", VA = "0xAC173C")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x1700026E")]
			public string message
			{
				[Token(Token = "0x60015C5")]
				[Address(RVA = "0xAC1744", Offset = "0xAC1744", VA = "0xAC1744")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x60015C6")]
				[Address(RVA = "0xAC174C", Offset = "0xAC174C", VA = "0xAC174C")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x1700026F")]
			public List<Subscription> subscriptions
			{
				[Token(Token = "0x60015C7")]
				[Address(RVA = "0xAC1754", Offset = "0xAC1754", VA = "0xAC1754")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x60015C8")]
				[Address(RVA = "0xAC175C", Offset = "0xAC175C", VA = "0xAC175C")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x60015C9")]
			[Address(RVA = "0xAC1764", Offset = "0xAC1764", VA = "0xAC1764")]
			public QuerySubscritionResponse()
			{
			}
		}

		[Token(Token = "0x4001976")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static IAPurchaseCallback isReadyIl2cppCallback;

		[Token(Token = "0x4001977")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static IAPurchaseCallback request01Il2cppCallback;

		[Token(Token = "0x4001978")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static IAPurchaseCallback request02Il2cppCallback;

		[Token(Token = "0x4001979")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static IAPurchaseCallback purchaseIl2cppCallback;

		[Token(Token = "0x400197A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static IAPurchaseCallback query01Il2cppCallback;

		[Token(Token = "0x400197B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static IAPurchaseCallback query02Il2cppCallback;

		[Token(Token = "0x400197C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static IAPurchaseCallback getBalanceIl2cppCallback;

		[Token(Token = "0x400197D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static IAPurchaseCallback requestSubscriptionIl2cppCallback;

		[Token(Token = "0x400197E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private static IAPurchaseCallback requestSubscriptionWithPlanIDIl2cppCallback;

		[Token(Token = "0x400197F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private static IAPurchaseCallback subscribeIl2cppCallback;

		[Token(Token = "0x4001980")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private static IAPurchaseCallback querySubscriptionIl2cppCallback;

		[Token(Token = "0x4001981")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private static IAPurchaseCallback querySubscriptionListIl2cppCallback;

		[Token(Token = "0x4001982")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private static IAPurchaseCallback cancelSubscriptionIl2cppCallback;

		[Token(Token = "0x6001523")]
		[Address(RVA = "0xAB9F30", Offset = "0xAB9F30", VA = "0xAB9F30")]
		[MonoPInvokeCallback(typeof(IAPurchaseCallback))]
		private static void IsReadyIl2cppCallback(int errorCode, string message)
		{
		}

		[Token(Token = "0x6001524")]
		[Address(RVA = "0xABA514", Offset = "0xABA514", VA = "0xABA514")]
		public static void IsReady(IAPurchaseListener listener, string pchAppKey)
		{
		}

		[Token(Token = "0x6001525")]
		[Address(RVA = "0xAB9FA4", Offset = "0xAB9FA4", VA = "0xAB9FA4")]
		[MonoPInvokeCallback(typeof(IAPurchaseCallback))]
		private static void Request01Il2cppCallback(int errorCode, string message)
		{
		}

		[Token(Token = "0x6001526")]
		[Address(RVA = "0xABA8D0", Offset = "0xABA8D0", VA = "0xABA8D0")]
		public static void Request(IAPurchaseListener listener, string pchPrice)
		{
		}

		[Token(Token = "0x6001527")]
		[Address(RVA = "0xABA018", Offset = "0xABA018", VA = "0xABA018")]
		[MonoPInvokeCallback(typeof(IAPurchaseCallback))]
		private static void Request02Il2cppCallback(int errorCode, string message)
		{
		}

		[Token(Token = "0x6001528")]
		[Address(RVA = "0xABAB64", Offset = "0xABAB64", VA = "0xABAB64")]
		public static void Request(IAPurchaseListener listener, string pchPrice, string pchUserData)
		{
		}

		[Token(Token = "0x6001529")]
		[Address(RVA = "0xABA08C", Offset = "0xABA08C", VA = "0xABA08C")]
		[MonoPInvokeCallback(typeof(IAPurchaseCallback))]
		private static void PurchaseIl2cppCallback(int errorCode, string message)
		{
		}

		[Token(Token = "0x600152A")]
		[Address(RVA = "0xABADD0", Offset = "0xABADD0", VA = "0xABADD0")]
		public static void Purchase(IAPurchaseListener listener, string pchPurchaseId)
		{
		}

		[Token(Token = "0x600152B")]
		[Address(RVA = "0xABA100", Offset = "0xABA100", VA = "0xABA100")]
		[MonoPInvokeCallback(typeof(IAPurchaseCallback))]
		private static void Query01Il2cppCallback(int errorCode, string message)
		{
		}

		[Token(Token = "0x600152C")]
		[Address(RVA = "0xABB064", Offset = "0xABB064", VA = "0xABB064")]
		public static void Query(IAPurchaseListener listener, string pchPurchaseId)
		{
		}

		[Token(Token = "0x600152D")]
		[Address(RVA = "0xABA174", Offset = "0xABA174", VA = "0xABA174")]
		[MonoPInvokeCallback(typeof(IAPurchaseCallback))]
		private static void Query02Il2cppCallback(int errorCode, string message)
		{
		}

		[Token(Token = "0x600152E")]
		[Address(RVA = "0xABB2F8", Offset = "0xABB2F8", VA = "0xABB2F8")]
		public static void Query(IAPurchaseListener listener)
		{
		}

		[Token(Token = "0x600152F")]
		[Address(RVA = "0xABA1E8", Offset = "0xABA1E8", VA = "0xABA1E8")]
		[MonoPInvokeCallback(typeof(IAPurchaseCallback))]
		private static void GetBalanceIl2cppCallback(int errorCode, string message)
		{
		}

		[Token(Token = "0x6001530")]
		[Address(RVA = "0xABB558", Offset = "0xABB558", VA = "0xABB558")]
		public static void GetBalance(IAPurchaseListener listener)
		{
		}

		[Token(Token = "0x6001531")]
		[Address(RVA = "0xABA25C", Offset = "0xABA25C", VA = "0xABA25C")]
		[MonoPInvokeCallback(typeof(IAPurchaseCallback))]
		private static void RequestSubscriptionIl2cppCallback(int errorCode, string message)
		{
		}

		[Token(Token = "0x6001532")]
		[Address(RVA = "0xABB7B8", Offset = "0xABB7B8", VA = "0xABB7B8")]
		public static void RequestSubscription(IAPurchaseListener listener, string pchPrice, string pchFreeTrialType, int nFreeTrialValue, string pchChargePeriodType, int nChargePeriodValue, int nNumberOfChargePeriod, string pchPlanId)
		{
		}

		[Token(Token = "0x6001533")]
		[Address(RVA = "0xABA2D0", Offset = "0xABA2D0", VA = "0xABA2D0")]
		[MonoPInvokeCallback(typeof(IAPurchaseCallback))]
		private static void RequestSubscriptionWithPlanIDIl2cppCallback(int errorCode, string message)
		{
		}

		[Token(Token = "0x6001534")]
		[Address(RVA = "0xABBC10", Offset = "0xABBC10", VA = "0xABBC10")]
		public static void RequestSubscriptionWithPlanID(IAPurchaseListener listener, string pchPlanId)
		{
		}

		[Token(Token = "0x6001535")]
		[Address(RVA = "0xABA344", Offset = "0xABA344", VA = "0xABA344")]
		[MonoPInvokeCallback(typeof(IAPurchaseCallback))]
		private static void SubscribeIl2cppCallback(int errorCode, string message)
		{
		}

		[Token(Token = "0x6001536")]
		[Address(RVA = "0xABBEA4", Offset = "0xABBEA4", VA = "0xABBEA4")]
		public static void Subscribe(IAPurchaseListener listener, string pchSubscriptionId)
		{
		}

		[Token(Token = "0x6001537")]
		[Address(RVA = "0xABA3B8", Offset = "0xABA3B8", VA = "0xABA3B8")]
		[MonoPInvokeCallback(typeof(IAPurchaseCallback))]
		private static void QuerySubscriptionIl2cppCallback(int errorCode, string message)
		{
		}

		[Token(Token = "0x6001538")]
		[Address(RVA = "0xABC138", Offset = "0xABC138", VA = "0xABC138")]
		public static void QuerySubscription(IAPurchaseListener listener, string pchSubscriptionId)
		{
		}

		[Token(Token = "0x6001539")]
		[Address(RVA = "0xABA42C", Offset = "0xABA42C", VA = "0xABA42C")]
		[MonoPInvokeCallback(typeof(IAPurchaseCallback))]
		private static void QuerySubscriptionListIl2cppCallback(int errorCode, string message)
		{
		}

		[Token(Token = "0x600153A")]
		[Address(RVA = "0xABC3CC", Offset = "0xABC3CC", VA = "0xABC3CC")]
		public static void QuerySubscriptionList(IAPurchaseListener listener)
		{
		}

		[Token(Token = "0x600153B")]
		[Address(RVA = "0xABA4A0", Offset = "0xABA4A0", VA = "0xABA4A0")]
		[MonoPInvokeCallback(typeof(IAPurchaseCallback))]
		private static void CancelSubscriptionIl2cppCallback(int errorCode, string message)
		{
		}

		[Token(Token = "0x600153C")]
		[Address(RVA = "0xABC62C", Offset = "0xABC62C", VA = "0xABC62C")]
		public static void CancelSubscription(IAPurchaseListener listener, string pchSubscriptionId)
		{
		}

		[Token(Token = "0x600153D")]
		[Address(RVA = "0xABC8C0", Offset = "0xABC8C0", VA = "0xABC8C0")]
		public IAPurchase()
		{
		}
	}
	[Token(Token = "0x20003E3")]
	public class DLC
	{
		[Token(Token = "0x60015CA")]
		[Address(RVA = "0xAC176C", Offset = "0xAC176C", VA = "0xAC176C")]
		public DLC()
		{
		}
	}
	[Token(Token = "0x20003E4")]
	public class Subscription
	{
		[Token(Token = "0x40019AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Viveport.Internal.StatusCallback2 isReadyIl2cppCallback;

		[Token(Token = "0x60015CB")]
		[Address(RVA = "0xAC1774", Offset = "0xAC1774", VA = "0xAC1774")]
		[MonoPInvokeCallback(typeof(Viveport.Internal.StatusCallback2))]
		private static void IsReadyIl2cppCallback(int errorCode, string message)
		{
		}

		[Token(Token = "0x60015CC")]
		[Address(RVA = "0xAC17E8", Offset = "0xAC17E8", VA = "0xAC17E8")]
		public static void IsReady(StatusCallback2 callback)
		{
		}

		[Token(Token = "0x60015CD")]
		[Address(RVA = "0xAC1BB0", Offset = "0xAC1BB0", VA = "0xAC1BB0")]
		public static SubscriptionStatus GetUserStatus()
		{
			return null;
		}

		[Token(Token = "0x60015CE")]
		[Address(RVA = "0xAC1FF8", Offset = "0xAC1FF8", VA = "0xAC1FF8")]
		public Subscription()
		{
		}
	}
	[Token(Token = "0x20003E5")]
	public class Deeplink
	{
		[Token(Token = "0x20003E6")]
		public abstract class DeeplinkChecker
		{
			[Token(Token = "0x60015D7")]
			public abstract void OnSuccess();

			[Token(Token = "0x60015D8")]
			public abstract void OnFailure(int errorCode, string errorMessage);

			[Token(Token = "0x60015D9")]
			[Address(RVA = "0xAC2A60", Offset = "0xAC2A60", VA = "0xAC2A60")]
			protected DeeplinkChecker()
			{
			}
		}

		[Token(Token = "0x40019AE")]
		private const int MaxIdLength = 256;

		[Token(Token = "0x40019AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Viveport.Internal.StatusCallback isReadyIl2cppCallback;

		[Token(Token = "0x40019B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Viveport.Internal.StatusCallback2 goToAppIl2cppCallback;

		[Token(Token = "0x40019B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static Viveport.Internal.StatusCallback2 goToAppWithBranchNameIl2cppCallback;

		[Token(Token = "0x40019B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static Viveport.Internal.StatusCallback2 goToStoreIl2cppCallback;

		[Token(Token = "0x40019B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static Viveport.Internal.StatusCallback2 goToAppOrGoToStoreIl2cppCallback;

		[Token(Token = "0x60015CF")]
		[Address(RVA = "0xAC2000", Offset = "0xAC2000", VA = "0xAC2000")]
		[MonoPInvokeCallback(typeof(Viveport.Internal.StatusCallback))]
		private static void IsReadyIl2cppCallback(int errorCode)
		{
		}

		[Token(Token = "0x60015D0")]
		[Address(RVA = "0xAC2064", Offset = "0xAC2064", VA = "0xAC2064")]
		public static void IsReady(StatusCallback callback)
		{
		}

		[Token(Token = "0x60015D1")]
		[Address(RVA = "0xAC2334", Offset = "0xAC2334", VA = "0xAC2334")]
		public static void GoToApp(DeeplinkChecker checker, string appId, string launchData)
		{
		}

		[Token(Token = "0x60015D2")]
		[Address(RVA = "0xAC2540", Offset = "0xAC2540", VA = "0xAC2540")]
		public static void GoToApp(DeeplinkChecker checker, string appId, string launchData, string branchName)
		{
		}

		[Token(Token = "0x60015D3")]
		[Address(RVA = "0xAC25CC", Offset = "0xAC25CC", VA = "0xAC25CC")]
		public static void GoToStore(DeeplinkChecker checker, string appId = "")
		{
		}

		[Token(Token = "0x60015D4")]
		[Address(RVA = "0xAC2770", Offset = "0xAC2770", VA = "0xAC2770")]
		public static void GoToAppOrGoToStore(DeeplinkChecker checker, string appId, string launchData)
		{
		}

		[Token(Token = "0x60015D5")]
		[Address(RVA = "0xAC297C", Offset = "0xAC297C", VA = "0xAC297C")]
		public static string GetAppLaunchData()
		{
			return null;
		}

		[Token(Token = "0x60015D6")]
		[Address(RVA = "0xAC2A58", Offset = "0xAC2A58", VA = "0xAC2A58")]
		public Deeplink()
		{
		}
	}
	[Token(Token = "0x20003E7")]
	internal class Token
	{
		[Token(Token = "0x40019B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Viveport.Internal.StatusCallback isReadyIl2cppCallback;

		[Token(Token = "0x40019B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Viveport.Internal.StatusCallback2 getSessionTokenIl2cppCallback;

		[Token(Token = "0x60015DA")]
		[Address(RVA = "0xAC2A68", Offset = "0xAC2A68", VA = "0xAC2A68")]
		[MonoPInvokeCallback(typeof(Viveport.Internal.StatusCallback))]
		private static void IsReadyIl2cppCallback(int errorCode)
		{
		}

		[Token(Token = "0x60015DB")]
		[Address(RVA = "0xAC2B40", Offset = "0xAC2B40", VA = "0xAC2B40")]
		public static void IsReady(StatusCallback callback)
		{
		}

		[Token(Token = "0x60015DC")]
		[Address(RVA = "0xAC2ACC", Offset = "0xAC2ACC", VA = "0xAC2ACC")]
		[MonoPInvokeCallback(typeof(Viveport.Internal.StatusCallback2))]
		private static void GetSessionTokenIl2cppCallback(int errorCode, string message)
		{
		}

		[Token(Token = "0x60015DD")]
		[Address(RVA = "0xAC2E44", Offset = "0xAC2E44", VA = "0xAC2E44")]
		public static void GetSessionToken(StatusCallback2 callback)
		{
		}

		[Token(Token = "0x60015DE")]
		[Address(RVA = "0xAC3148", Offset = "0xAC3148", VA = "0xAC3148")]
		public Token()
		{
		}
	}
	[Token(Token = "0x20003E8")]
	internal class Ads
	{
		[Token(Token = "0x60015DF")]
		[Address(RVA = "0xAC3150", Offset = "0xAC3150", VA = "0xAC3150")]
		public Ads()
		{
		}
	}
}
namespace Viveport.Internal
{
	[Token(Token = "0x20003E9")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	internal delegate void GetLicenseCallback(string message, string signature);
	[Token(Token = "0x20003EA")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	internal delegate void StatusCallback(int nResult);
	[Token(Token = "0x20003EB")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	internal delegate void StatusCallback2(int nResult, string message);
	[Token(Token = "0x20003EC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	internal delegate void QueryRuntimeModeCallback(int nResult, int nMode);
	[Token(Token = "0x20003ED")]
	internal enum ELeaderboardDataRequest
	{
		[Token(Token = "0x40019B7")]
		k_ELeaderboardDataRequestGlobal,
		[Token(Token = "0x40019B8")]
		k_ELeaderboardDataRequestGlobalAroundUser,
		[Token(Token = "0x40019B9")]
		k_ELeaderboardDataRequestLocal,
		[Token(Token = "0x40019BA")]
		k_ELeaderboardDataRequestLocaleAroundUser
	}
	[Token(Token = "0x20003EE")]
	internal enum ELeaderboardDataTimeRange
	{
		[Token(Token = "0x40019BC")]
		k_ELeaderboardDataScropeAllTime,
		[Token(Token = "0x40019BD")]
		k_ELeaderboardDataScropeDaily,
		[Token(Token = "0x40019BE")]
		k_ELeaderboardDataScropeWeekly,
		[Token(Token = "0x40019BF")]
		k_ELeaderboardDataScropeMonthly
	}
	[Token(Token = "0x20003EF")]
	internal enum ELeaderboardSortMethod
	{
		[Token(Token = "0x40019C1")]
		k_ELeaderboardSortMethodNone,
		[Token(Token = "0x40019C2")]
		k_ELeaderboardSortMethodAscending,
		[Token(Token = "0x40019C3")]
		k_ELeaderboardSortMethodDescending
	}
	[Token(Token = "0x20003F0")]
	internal enum ELeaderboardDisplayType
	{
		[Token(Token = "0x40019C5")]
		k_ELeaderboardDisplayTypeNone,
		[Token(Token = "0x40019C6")]
		k_ELeaderboardDisplayTypeNumeric,
		[Token(Token = "0x40019C7")]
		k_ELeaderboardDisplayTypeTimeSeconds,
		[Token(Token = "0x40019C8")]
		k_ELeaderboardDisplayTypeTimeMilliSeconds
	}
	[Token(Token = "0x20003F1")]
	internal enum ELeaderboardUploadScoreMethod
	{
		[Token(Token = "0x40019CA")]
		k_ELeaderboardUploadScoreMethodNone,
		[Token(Token = "0x40019CB")]
		k_ELeaderboardUploadScoreMethodKeepBest,
		[Token(Token = "0x40019CC")]
		k_ELeaderboardUploadScoreMethodForceUpdate
	}
	[Token(Token = "0x20003F2")]
	internal enum ESubscriptionTransactionType
	{
		[Token(Token = "0x40019CE")]
		UNKNOWN,
		[Token(Token = "0x40019CF")]
		PAID,
		[Token(Token = "0x40019D0")]
		REDEEM,
		[Token(Token = "0x40019D1")]
		FREEE_TRIAL
	}
	[Token(Token = "0x20003F3")]
	internal enum ELocale
	{
		[Token(Token = "0x40019D3")]
		k_ELocaleUS,
		[Token(Token = "0x40019D4")]
		k_ELocaleDE,
		[Token(Token = "0x40019D5")]
		k_ELocaleJP,
		[Token(Token = "0x40019D6")]
		k_ELocaleKR,
		[Token(Token = "0x40019D7")]
		k_ELocaleRU,
		[Token(Token = "0x40019D8")]
		k_ELocaleCN,
		[Token(Token = "0x40019D9")]
		k_ELocaleTW,
		[Token(Token = "0x40019DA")]
		k_ELocaleFR
	}
	[Token(Token = "0x20003F4")]
	internal enum EAchievementDisplayAttribute
	{
		[Token(Token = "0x40019DC")]
		k_EAchievementDisplayAttributeName,
		[Token(Token = "0x40019DD")]
		k_EAchievementDisplayAttributeDesc,
		[Token(Token = "0x40019DE")]
		k_EAchievementDisplayAttributeHidden
	}
	[Token(Token = "0x20003F5")]
	internal struct LeaderboardEntry_t
	{
		[Token(Token = "0x40019DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal int m_nGlobalRank;

		[Token(Token = "0x40019E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		internal int m_nScore;

		[Token(Token = "0x40019E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal string m_pUserName;
	}
	[Token(Token = "0x20003F6")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	internal delegate void IAPurchaseCallback(int code, string message);
	[Token(Token = "0x20003F7")]
	internal struct IAPCurrency_t
	{
		[Token(Token = "0x40019E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal string m_pName;

		[Token(Token = "0x40019E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal string m_pSymbol;
	}
	[Token(Token = "0x20003F8")]
	internal class Api
	{
		[Token(Token = "0x20003F9")]
		internal class AndroidLicenseChecker : AndroidJavaProxy
		{
			[Token(Token = "0x40019E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private Viveport.Api.LicenseChecker checker;

			[Token(Token = "0x60015F9")]
			[Address(RVA = "0xAC3784", Offset = "0xAC3784", VA = "0xAC3784")]
			internal AndroidLicenseChecker(Viveport.Api.LicenseChecker checker)
			{
			}

			[Token(Token = "0x60015FA")]
			[Address(RVA = "0xAC3810", Offset = "0xAC3810", VA = "0xAC3810")]
			internal void onSuccess(long issueTime, long expirationTime, int latestVersion, bool updateRequired)
			{
			}

			[Token(Token = "0x60015FB")]
			[Address(RVA = "0xAC3920", Offset = "0xAC3920", VA = "0xAC3920")]
			internal void onFailure(int errorCode, string errorMessage)
			{
			}
		}

		[Token(Token = "0x60015F4")]
		[Address(RVA = "0xAB6CD4", Offset = "0xAB6CD4", VA = "0xAB6CD4")]
		internal static int Init(StatusCallback callback, string pchAppKey)
		{
			return default(int);
		}

		[Token(Token = "0x60015F5")]
		[Address(RVA = "0xAB6FF4", Offset = "0xAB6FF4", VA = "0xAB6FF4")]
		internal static int Shutdown(StatusCallback callback)
		{
			return default(int);
		}

		[Token(Token = "0x60015F6")]
		[Address(RVA = "0xAB71AC", Offset = "0xAB71AC", VA = "0xAB71AC")]
		internal static string Version()
		{
			return null;
		}

		[Token(Token = "0x60015F7")]
		[Address(RVA = "0xAB68B8", Offset = "0xAB68B8", VA = "0xAB68B8")]
		internal static void GetLicense(Viveport.Api.LicenseChecker checker, string appId, string appKey)
		{
		}

		[Token(Token = "0x60015F8")]
		[Address(RVA = "0xAC3808", Offset = "0xAC3808", VA = "0xAC3808")]
		public Api()
		{
		}
	}
	[Token(Token = "0x20003FA")]
	internal class User
	{
		[Token(Token = "0x60015FC")]
		[Address(RVA = "0xAB76C4", Offset = "0xAB76C4", VA = "0xAB76C4")]
		internal static int IsReady(StatusCallback callback)
		{
			return default(int);
		}

		[Token(Token = "0x60015FD")]
		[Address(RVA = "0xAB7818", Offset = "0xAB7818", VA = "0xAB7818")]
		internal static string GetUserId()
		{
			return null;
		}

		[Token(Token = "0x60015FE")]
		[Address(RVA = "0xAB7910", Offset = "0xAB7910", VA = "0xAB7910")]
		internal static string GetUserName()
		{
			return null;
		}

		[Token(Token = "0x60015FF")]
		[Address(RVA = "0xAB7A08", Offset = "0xAB7A08", VA = "0xAB7A08")]
		internal static string GetUserAvatarUrl()
		{
			return null;
		}

		[Token(Token = "0x6001600")]
		[Address(RVA = "0xAC3B00", Offset = "0xAC3B00", VA = "0xAC3B00")]
		public User()
		{
		}
	}
	[Token(Token = "0x20003FB")]
	internal class UserStats
	{
		[Token(Token = "0x6001601")]
		[Address(RVA = "0xAB7EB8", Offset = "0xAB7EB8", VA = "0xAB7EB8")]
		internal static int IsReady(StatusCallback callback)
		{
			return default(int);
		}

		[Token(Token = "0x6001602")]
		[Address(RVA = "0xAB81C8", Offset = "0xAB81C8", VA = "0xAB81C8")]
		internal static int DownloadStats(StatusCallback callback)
		{
			return default(int);
		}

		[Token(Token = "0x6001603")]
		[Address(RVA = "0xAB89B8", Offset = "0xAB89B8", VA = "0xAB89B8")]
		internal static int UploadStats(StatusCallback callback)
		{
			return default(int);
		}

		[Token(Token = "0x6001604")]
		[Address(RVA = "0xAB8570", Offset = "0xAB8570", VA = "0xAB8570")]
		internal static int SetStat(string pchName, int nData)
		{
			return default(int);
		}

		[Token(Token = "0x6001605")]
		[Address(RVA = "0xAB86A8", Offset = "0xAB86A8", VA = "0xAB86A8")]
		internal static int SetStat(string pchName, float fData)
		{
			return default(int);
		}

		[Token(Token = "0x6001606")]
		[Address(RVA = "0xAB8300", Offset = "0xAB8300", VA = "0xAB8300")]
		internal static int GetStat(string pchName, int nData)
		{
			return default(int);
		}

		[Token(Token = "0x6001607")]
		[Address(RVA = "0xAB8438", Offset = "0xAB8438", VA = "0xAB8438")]
		internal static float GetStat(string pchName, float fData)
		{
			return default(float);
		}

		[Token(Token = "0x6001608")]
		[Address(RVA = "0xAB8AF0", Offset = "0xAB8AF0", VA = "0xAB8AF0")]
		internal static bool GetAchievement(string pchName)
		{
			return default(bool);
		}

		[Token(Token = "0x6001609")]
		[Address(RVA = "0xAB8BC8", Offset = "0xAB8BC8", VA = "0xAB8BC8")]
		internal static int GetAchievementUnlockTime(string pchName)
		{
			return default(int);
		}

		[Token(Token = "0x600160A")]
		[Address(RVA = "0xAB9030", Offset = "0xAB9030", VA = "0xAB9030")]
		internal static int SetAchievement(string pchName)
		{
			return default(int);
		}

		[Token(Token = "0x600160B")]
		[Address(RVA = "0xAB9108", Offset = "0xAB9108", VA = "0xAB9108")]
		internal static int ClearAchievement(string pchName)
		{
			return default(int);
		}

		[Token(Token = "0x600160C")]
		[Address(RVA = "0xAB8D78", Offset = "0xAB8D78", VA = "0xAB8D78")]
		internal static string GetAchievementDisplayAttribute(string pchName, EAchievementDisplayAttribute attr)
		{
			return null;
		}

		[Token(Token = "0x600160D")]
		[Address(RVA = "0xAB8EB0", Offset = "0xAB8EB0", VA = "0xAB8EB0")]
		internal static string GetAchievementDisplayAttribute(string pchName, EAchievementDisplayAttribute attr, ELocale locale)
		{
			return null;
		}

		[Token(Token = "0x600160E")]
		[Address(RVA = "0xAB8CA0", Offset = "0xAB8CA0", VA = "0xAB8CA0")]
		internal static string GetAchievementIcon(string pchName)
		{
			return null;
		}

		[Token(Token = "0x600160F")]
		[Address(RVA = "0xAB93F8", Offset = "0xAB93F8", VA = "0xAB93F8")]
		internal static int DownloadLeaderboardScores(StatusCallback callback, string pchLeaderboardName, ELeaderboardDataRequest nDataRequest, ELeaderboardDataTimeRange nTimeRange, int nRangeStart, int nRangeEnd)
		{
			return default(int);
		}

		[Token(Token = "0x6001610")]
		[Address(RVA = "0xAB987C", Offset = "0xAB987C", VA = "0xAB987C")]
		internal static int UploadLeaderboardScore(StatusCallback callback, string pchLeaderboardName, int nScores)
		{
			return default(int);
		}

		[Token(Token = "0x6001611")]
		[Address(RVA = "0xAB9A40", Offset = "0xAB9A40", VA = "0xAB9A40")]
		internal static Leaderboard GetLeaderboardScore(int nIndex)
		{
			return null;
		}

		[Token(Token = "0x6001612")]
		[Address(RVA = "0xAB9CB4", Offset = "0xAB9CB4", VA = "0xAB9CB4")]
		internal static int GetLeaderboardScoreCount()
		{
			return default(int);
		}

		[Token(Token = "0x6001613")]
		[Address(RVA = "0xAB9D84", Offset = "0xAB9D84", VA = "0xAB9D84")]
		internal static ELeaderboardSortMethod GetLeaderboardSortMethod()
		{
			return default(ELeaderboardSortMethod);
		}

		[Token(Token = "0x6001614")]
		[Address(RVA = "0xAB9E54", Offset = "0xAB9E54", VA = "0xAB9E54")]
		internal static ELeaderboardDisplayType GetLeaderboardDisplayType()
		{
			return default(ELeaderboardDisplayType);
		}

		[Token(Token = "0x6001615")]
		[Address(RVA = "0xAC3C04", Offset = "0xAC3C04", VA = "0xAC3C04")]
		public UserStats()
		{
		}
	}
	[Token(Token = "0x20003FC")]
	internal class Deeplink
	{
		[Token(Token = "0x20003FD")]
		internal class AndroidDeeplinkChecker : AndroidJavaProxy
		{
			[Token(Token = "0x40019E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private Viveport.Deeplink.DeeplinkChecker checker;

			[Token(Token = "0x600161C")]
			[Address(RVA = "0xAC3D08", Offset = "0xAC3D08", VA = "0xAC3D08")]
			internal AndroidDeeplinkChecker(Viveport.Deeplink.DeeplinkChecker checker)
			{
			}

			[Token(Token = "0x600161D")]
			[Address(RVA = "0xAC3D94", Offset = "0xAC3D94", VA = "0xAC3D94")]
			internal void onSuccess()
			{
			}

			[Token(Token = "0x600161E")]
			[Address(RVA = "0xAC3E1C", Offset = "0xAC3E1C", VA = "0xAC3E1C")]
			internal void onFailure(int errorCode, string errorMessage)
			{
			}
		}

		[Token(Token = "0x6001616")]
		[Address(RVA = "0xAC2240", Offset = "0xAC2240", VA = "0xAC2240")]
		internal static void IsReady(StatusCallback callback)
		{
		}

		[Token(Token = "0x6001617")]
		[Address(RVA = "0xAC23C0", Offset = "0xAC23C0", VA = "0xAC23C0")]
		internal static void GoToApp(Viveport.Deeplink.DeeplinkChecker checker, string appId, string launchData)
		{
		}

		[Token(Token = "0x6001618")]
		[Address(RVA = "0xAC2624", Offset = "0xAC2624", VA = "0xAC2624")]
		internal static void GoToStore(Viveport.Deeplink.DeeplinkChecker checker, string appId)
		{
		}

		[Token(Token = "0x6001619")]
		[Address(RVA = "0xAC27FC", Offset = "0xAC27FC", VA = "0xAC27FC")]
		internal static void GoToAppOrGoToStore(Viveport.Deeplink.DeeplinkChecker checker, string appId, string launchData)
		{
		}

		[Token(Token = "0x600161A")]
		[Address(RVA = "0xAC2980", Offset = "0xAC2980", VA = "0xAC2980")]
		internal static string GetAppLaunchData()
		{
			return null;
		}

		[Token(Token = "0x600161B")]
		[Address(RVA = "0xAC3D8C", Offset = "0xAC3D8C", VA = "0xAC3D8C")]
		public Deeplink()
		{
		}
	}
	[Token(Token = "0x20003FE")]
	internal class IAPurchase
	{
		[Token(Token = "0x600161F")]
		[Address(RVA = "0xABA784", Offset = "0xABA784", VA = "0xABA784")]
		internal static void IsReady(IAPurchaseCallback callback, string pchAppKey)
		{
		}

		[Token(Token = "0x6001620")]
		[Address(RVA = "0xABAA18", Offset = "0xABAA18", VA = "0xABAA18")]
		internal static void Request(IAPurchaseCallback callback, string pchPrice)
		{
		}

		[Token(Token = "0x6001621")]
		[Address(RVA = "0xABAC50", Offset = "0xABAC50", VA = "0xABAC50")]
		internal static void Request(IAPurchaseCallback callback, string pchPrice, string pchUserData)
		{
		}

		[Token(Token = "0x6001622")]
		[Address(RVA = "0xABAF18", Offset = "0xABAF18", VA = "0xABAF18")]
		internal static void Purchase(IAPurchaseCallback callback, string pchPurchaseId)
		{
		}

		[Token(Token = "0x6001623")]
		[Address(RVA = "0xABB1AC", Offset = "0xABB1AC", VA = "0xABB1AC")]
		internal static void Query(IAPurchaseCallback callback, string pchPurchaseId)
		{
		}

		[Token(Token = "0x6001624")]
		[Address(RVA = "0xABB438", Offset = "0xABB438", VA = "0xABB438")]
		internal static void Query(IAPurchaseCallback callback)
		{
		}

		[Token(Token = "0x6001625")]
		[Address(RVA = "0xABB698", Offset = "0xABB698", VA = "0xABB698")]
		internal static void GetBalance(IAPurchaseCallback callback)
		{
		}

		[Token(Token = "0x6001626")]
		[Address(RVA = "0xABB948", Offset = "0xABB948", VA = "0xABB948")]
		internal static void RequestSubscription(IAPurchaseCallback callback, string pchPrice, string pchFreeTrialType, int nFreeTrialValue, string pchChargePeriodType, int nChargePeriodValue, int nNumberOfChargePeriod, string pchPlanId)
		{
		}

		[Token(Token = "0x6001627")]
		[Address(RVA = "0xABBD58", Offset = "0xABBD58", VA = "0xABBD58")]
		internal static void RequestSubscriptionWithPlanID(IAPurchaseCallback callback, string pchPlanId)
		{
		}

		[Token(Token = "0x6001628")]
		[Address(RVA = "0xABBFEC", Offset = "0xABBFEC", VA = "0xABBFEC")]
		internal static void Subscribe(IAPurchaseCallback callback, string pchSubscriptionId)
		{
		}

		[Token(Token = "0x6001629")]
		[Address(RVA = "0xABC280", Offset = "0xABC280", VA = "0xABC280")]
		internal static void QuerySubscription(IAPurchaseCallback callback, string pchSubscriptionId)
		{
		}

		[Token(Token = "0x600162A")]
		[Address(RVA = "0xABC50C", Offset = "0xABC50C", VA = "0xABC50C")]
		internal static void QuerySubscriptionList(IAPurchaseCallback callback)
		{
		}

		[Token(Token = "0x600162B")]
		[Address(RVA = "0xABC774", Offset = "0xABC774", VA = "0xABC774")]
		internal static void CancelSubscription(IAPurchaseCallback callback, string pchSubscriptionId)
		{
		}

		[Token(Token = "0x600162C")]
		[Address(RVA = "0xAC4080", Offset = "0xAC4080", VA = "0xAC4080")]
		public IAPurchase()
		{
		}
	}
	[Token(Token = "0x20003FF")]
	internal class Subscription
	{
		[Token(Token = "0x600162D")]
		[Address(RVA = "0xAC1A88", Offset = "0xAC1A88", VA = "0xAC1A88")]
		internal static int IsReady(StatusCallback2 callback)
		{
			return default(int);
		}

		[Token(Token = "0x600162E")]
		[Address(RVA = "0xAC1CF8", Offset = "0xAC1CF8", VA = "0xAC1CF8")]
		internal static bool IsWindowsSubscriber()
		{
			return default(bool);
		}

		[Token(Token = "0x600162F")]
		[Address(RVA = "0xAC1DC4", Offset = "0xAC1DC4", VA = "0xAC1DC4")]
		internal static bool IsAndroidSubscriber()
		{
			return default(bool);
		}

		[Token(Token = "0x6001630")]
		[Address(RVA = "0xAC1E90", Offset = "0xAC1E90", VA = "0xAC1E90")]
		internal static ESubscriptionTransactionType GetTransactionType()
		{
			return default(ESubscriptionTransactionType);
		}

		[Token(Token = "0x6001631")]
		[Address(RVA = "0xAC4208", Offset = "0xAC4208", VA = "0xAC4208")]
		public Subscription()
		{
		}
	}
	[Token(Token = "0x2000400")]
	internal class Token
	{
		[Token(Token = "0x6001632")]
		[Address(RVA = "0xAC2D1C", Offset = "0xAC2D1C", VA = "0xAC2D1C")]
		internal static int IsReady(StatusCallback IsReadyCallback)
		{
			return default(int);
		}

		[Token(Token = "0x6001633")]
		[Address(RVA = "0xAC3020", Offset = "0xAC3020", VA = "0xAC3020")]
		internal static int GetSessionToken(StatusCallback2 GetSessionTokenCallback)
		{
			return default(int);
		}

		[Token(Token = "0x6001634")]
		[Address(RVA = "0xAC430C", Offset = "0xAC430C", VA = "0xAC430C")]
		public Token()
		{
		}
	}
	[Token(Token = "0x2000401")]
	internal class Android
	{
		[Token(Token = "0x40019E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static AndroidJavaObject _api;

		[Token(Token = "0x40019E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static AndroidJavaObject _iAPurchase;

		[Token(Token = "0x40019E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static AndroidJavaClass _unityPlayer;

		[Token(Token = "0x40019E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static AndroidJavaObject _user;

		[Token(Token = "0x40019EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static AndroidJavaObject _userStats;

		[Token(Token = "0x40019EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static AndroidJavaObject _subscription;

		[Token(Token = "0x40019EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static AndroidJavaObject _sessionToken;

		[Token(Token = "0x40019ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static AndroidJavaObject _deeplink;

		[Token(Token = "0x17000270")]
		internal static AndroidJavaClass UnityPlayer
		{
			[Token(Token = "0x600163C")]
			[Address(RVA = "0xAC4314", Offset = "0xAC4314", VA = "0xAC4314")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000271")]
		internal static AndroidJavaObject CurrentActivity
		{
			[Token(Token = "0x600163D")]
			[Address(RVA = "0xAC43B8", Offset = "0xAC43B8", VA = "0xAC43B8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000272")]
		internal static AndroidJavaObject CurrentContext
		{
			[Token(Token = "0x600163E")]
			[Address(RVA = "0xAC36FC", Offset = "0xAC36FC", VA = "0xAC36FC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001635")]
		[Address(RVA = "0xAC35F8", Offset = "0xAC35F8", VA = "0xAC35F8")]
		internal static AndroidJavaObject GetJavaAPI()
		{
			return null;
		}

		[Token(Token = "0x6001636")]
		[Address(RVA = "0xAC3A04", Offset = "0xAC3A04", VA = "0xAC3A04")]
		internal static AndroidJavaObject GetJavaUser()
		{
			return null;
		}

		[Token(Token = "0x6001637")]
		[Address(RVA = "0xAC3B08", Offset = "0xAC3B08", VA = "0xAC3B08")]
		internal static AndroidJavaObject GetJavaUserStats()
		{
			return null;
		}

		[Token(Token = "0x6001638")]
		[Address(RVA = "0xAC3F00", Offset = "0xAC3F00", VA = "0xAC3F00")]
		internal static AndroidJavaObject GetJavaIAPurchase()
		{
			return null;
		}

		[Token(Token = "0x6001639")]
		[Address(RVA = "0xAC4088", Offset = "0xAC4088", VA = "0xAC4088")]
		internal static AndroidJavaObject GetJavaSubscription()
		{
			return null;
		}

		[Token(Token = "0x600163A")]
		[Address(RVA = "0xAC4210", Offset = "0xAC4210", VA = "0xAC4210")]
		internal static AndroidJavaObject GetJavaSessionToken()
		{
			return null;
		}

		[Token(Token = "0x600163B")]
		[Address(RVA = "0xAC3C0C", Offset = "0xAC3C0C", VA = "0xAC3C0C")]
		internal static AndroidJavaObject GetDeeplink()
		{
			return null;
		}

		[Token(Token = "0x600163F")]
		[Address(RVA = "0xAC4414", Offset = "0xAC4414", VA = "0xAC4414")]
		public Android()
		{
		}
	}
	[Token(Token = "0x2000402")]
	internal class AndroidPluginCallback : AndroidJavaProxy
	{
		[Token(Token = "0x40019EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private IAPurchaseCallback callback;

		[Token(Token = "0x40019EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private StatusCallback statusCallback;

		[Token(Token = "0x40019F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private StatusCallback2 statusCallback2;

		[Token(Token = "0x6001640")]
		[Address(RVA = "0xAC3FFC", Offset = "0xAC3FFC", VA = "0xAC3FFC")]
		internal AndroidPluginCallback(IAPurchaseCallback callback)
		{
		}

		[Token(Token = "0x6001641")]
		[Address(RVA = "0xAC3700", Offset = "0xAC3700", VA = "0xAC3700")]
		internal AndroidPluginCallback(StatusCallback callback)
		{
		}

		[Token(Token = "0x6001642")]
		[Address(RVA = "0xAC4184", Offset = "0xAC4184", VA = "0xAC4184")]
		internal AndroidPluginCallback(StatusCallback2 callback)
		{
		}

		[Token(Token = "0x6001643")]
		[Address(RVA = "0xAC441C", Offset = "0xAC441C", VA = "0xAC441C")]
		internal void onResult(int statusCode, string result)
		{
		}
	}
}
namespace Viveport.Arcade
{
	[Token(Token = "0x2000403")]
	internal class Session
	{
		[Token(Token = "0x6001644")]
		[Address(RVA = "0xAC4540", Offset = "0xAC4540", VA = "0xAC4540")]
		public Session()
		{
		}
	}
}
namespace Viveport.Core
{
	[Token(Token = "0x2000404")]
	public class Logger
	{
		[Token(Token = "0x40019F1")]
		private const string LoggerTypeNameUnity = "UnityEngine.Debug";

		[Token(Token = "0x40019F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool _hasDetected;

		[Token(Token = "0x40019F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		private static bool _usingUnityLog;

		[Token(Token = "0x40019F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Type _unityLogType;

		[Token(Token = "0x6001645")]
		[Address(RVA = "0xABCD58", Offset = "0xABCD58", VA = "0xABCD58")]
		public static void Log(string message)
		{
		}

		[Token(Token = "0x6001646")]
		[Address(RVA = "0xAC4884", Offset = "0xAC4884", VA = "0xAC4884")]
		private static void ConsoleLog(string message)
		{
		}

		[Token(Token = "0x6001647")]
		[Address(RVA = "0xAC4548", Offset = "0xAC4548", VA = "0xAC4548")]
		private static void UnityLog(string message)
		{
		}

		[Token(Token = "0x6001648")]
		[Address(RVA = "0xAC4914", Offset = "0xAC4914", VA = "0xAC4914")]
		private static Type GetType(string typeName)
		{
			return null;
		}

		[Token(Token = "0x6001649")]
		[Address(RVA = "0xAC4A58", Offset = "0xAC4A58", VA = "0xAC4A58")]
		public Logger()
		{
		}
	}
}
namespace LitJson
{
	[Token(Token = "0x2000405")]
	public enum JsonType
	{
		[Token(Token = "0x40019F6")]
		None,
		[Token(Token = "0x40019F7")]
		Object,
		[Token(Token = "0x40019F8")]
		Array,
		[Token(Token = "0x40019F9")]
		String,
		[Token(Token = "0x40019FA")]
		Int,
		[Token(Token = "0x40019FB")]
		Long,
		[Token(Token = "0x40019FC")]
		Double,
		[Token(Token = "0x40019FD")]
		Boolean
	}
	[Token(Token = "0x2000406")]
	public interface IJsonWrapper : IList, ICollection, IEnumerable, IOrderedDictionary, IDictionary
	{
		[Token(Token = "0x17000273")]
		bool IsArray
		{
			[Token(Token = "0x600164B")]
			get;
		}

		[Token(Token = "0x17000274")]
		bool IsBoolean
		{
			[Token(Token = "0x600164C")]
			get;
		}

		[Token(Token = "0x17000275")]
		bool IsDouble
		{
			[Token(Token = "0x600164D")]
			get;
		}

		[Token(Token = "0x17000276")]
		bool IsInt
		{
			[Token(Token = "0x600164E")]
			get;
		}

		[Token(Token = "0x17000277")]
		bool IsLong
		{
			[Token(Token = "0x600164F")]
			get;
		}

		[Token(Token = "0x17000278")]
		bool IsObject
		{
			[Token(Token = "0x6001650")]
			get;
		}

		[Token(Token = "0x17000279")]
		bool IsString
		{
			[Token(Token = "0x6001651")]
			get;
		}

		[Token(Token = "0x6001652")]
		bool GetBoolean();

		[Token(Token = "0x6001653")]
		double GetDouble();

		[Token(Token = "0x6001654")]
		int GetInt();

		[Token(Token = "0x6001655")]
		JsonType GetJsonType();

		[Token(Token = "0x6001656")]
		long GetLong();

		[Token(Token = "0x6001657")]
		string GetString();

		[Token(Token = "0x6001658")]
		void SetBoolean(bool val);

		[Token(Token = "0x6001659")]
		void SetDouble(double val);

		[Token(Token = "0x600165A")]
		void SetInt(int val);

		[Token(Token = "0x600165B")]
		void SetJsonType(JsonType type);

		[Token(Token = "0x600165C")]
		void SetLong(long val);

		[Token(Token = "0x600165D")]
		void SetString(string val);

		[Token(Token = "0x600165E")]
		string ToJson();

		[Token(Token = "0x600165F")]
		void ToJson(JsonWriter writer);
	}
	[Token(Token = "0x2000407")]
	public class JsonData : IJsonWrapper, IList, ICollection, IEnumerable, IOrderedDictionary, IDictionary, IEquatable<JsonData>
	{
		[Token(Token = "0x40019FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IList<JsonData> inst_array;

		[Token(Token = "0x40019FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool inst_boolean;

		[Token(Token = "0x4001A00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private double inst_double;

		[Token(Token = "0x4001A01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int inst_int;

		[Token(Token = "0x4001A02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private long inst_long;

		[Token(Token = "0x4001A03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private IDictionary<string, JsonData> inst_object;

		[Token(Token = "0x4001A04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private string inst_string;

		[Token(Token = "0x4001A05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private string json;

		[Token(Token = "0x4001A06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private JsonType type;

		[Token(Token = "0x4001A07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private IList<KeyValuePair<string, JsonData>> object_list;

		[Token(Token = "0x1700027A")]
		public int Count
		{
			[Token(Token = "0x6001660")]
			[Address(RVA = "0xAC4AAC", Offset = "0xAC4AAC", VA = "0xAC4AAC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700027B")]
		public bool IsArray
		{
			[Token(Token = "0x6001661")]
			[Address(RVA = "0xABF2F8", Offset = "0xABF2F8", VA = "0xABF2F8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700027C")]
		public bool IsBoolean
		{
			[Token(Token = "0x6001662")]
			[Address(RVA = "0xAC4C2C", Offset = "0xAC4C2C", VA = "0xAC4C2C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700027D")]
		public bool IsDouble
		{
			[Token(Token = "0x6001663")]
			[Address(RVA = "0xAC4C3C", Offset = "0xAC4C3C", VA = "0xAC4C3C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700027E")]
		public bool IsInt
		{
			[Token(Token = "0x6001664")]
			[Address(RVA = "0xABF320", Offset = "0xABF320", VA = "0xABF320")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700027F")]
		public bool IsLong
		{
			[Token(Token = "0x6001665")]
			[Address(RVA = "0xABF310", Offset = "0xABF310", VA = "0xABF310")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000280")]
		public bool IsObject
		{
			[Token(Token = "0x6001666")]
			[Address(RVA = "0xAC4C4C", Offset = "0xAC4C4C", VA = "0xAC4C4C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000281")]
		public bool IsString
		{
			[Token(Token = "0x6001667")]
			[Address(RVA = "0xAC4C5C", Offset = "0xAC4C5C", VA = "0xAC4C5C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000282")]
		private int System.Collections.ICollection.Count
		{
			[Token(Token = "0x6001668")]
			[Address(RVA = "0xAC4C6C", Offset = "0xAC4C6C", VA = "0xAC4C6C", Slot = "37")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000283")]
		private bool System.Collections.ICollection.IsSynchronized
		{
			[Token(Token = "0x6001669")]
			[Address(RVA = "0xAC4C70", Offset = "0xAC4C70", VA = "0xAC4C70", Slot = "39")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000284")]
		private object System.Collections.ICollection.SyncRoot
		{
			[Token(Token = "0x600166A")]
			[Address(RVA = "0xAC4D1C", Offset = "0xAC4D1C", VA = "0xAC4D1C", Slot = "38")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000285")]
		private bool System.Collections.IDictionary.IsFixedSize
		{
			[Token(Token = "0x600166B")]
			[Address(RVA = "0xAC4DC8", Offset = "0xAC4DC8", VA = "0xAC4DC8", Slot = "54")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000286")]
		private bool System.Collections.IDictionary.IsReadOnly
		{
			[Token(Token = "0x600166C")]
			[Address(RVA = "0xAC5000", Offset = "0xAC5000", VA = "0xAC5000", Slot = "53")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000287")]
		private ICollection System.Collections.IDictionary.Keys
		{
			[Token(Token = "0x600166D")]
			[Address(RVA = "0xAC50AC", Offset = "0xAC50AC", VA = "0xAC50AC", Slot = "48")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000288")]
		private ICollection System.Collections.IDictionary.Values
		{
			[Token(Token = "0x600166E")]
			[Address(RVA = "0xAC5478", Offset = "0xAC5478", VA = "0xAC5478", Slot = "49")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000289")]
		private bool LitJson.IJsonWrapper.IsArray
		{
			[Token(Token = "0x600166F")]
			[Address(RVA = "0xAC5844", Offset = "0xAC5844", VA = "0xAC5844", Slot = "4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700028A")]
		private bool LitJson.IJsonWrapper.IsBoolean
		{
			[Token(Token = "0x6001670")]
			[Address(RVA = "0xAC5854", Offset = "0xAC5854", VA = "0xAC5854", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700028B")]
		private bool LitJson.IJsonWrapper.IsDouble
		{
			[Token(Token = "0x6001671")]
			[Address(RVA = "0xAC5864", Offset = "0xAC5864", VA = "0xAC5864", Slot = "6")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700028C")]
		private bool LitJson.IJsonWrapper.IsInt
		{
			[Token(Token = "0x6001672")]
			[Address(RVA = "0xAC5874", Offset = "0xAC5874", VA = "0xAC5874", Slot = "7")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700028D")]
		private bool LitJson.IJsonWrapper.IsLong
		{
			[Token(Token = "0x6001673")]
			[Address(RVA = "0xAC5884", Offset = "0xAC5884", VA = "0xAC5884", Slot = "8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700028E")]
		private bool LitJson.IJsonWrapper.IsObject
		{
			[Token(Token = "0x6001674")]
			[Address(RVA = "0xAC5894", Offset = "0xAC5894", VA = "0xAC5894", Slot = "9")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700028F")]
		private bool LitJson.IJsonWrapper.IsString
		{
			[Token(Token = "0x6001675")]
			[Address(RVA = "0xAC58A4", Offset = "0xAC58A4", VA = "0xAC58A4", Slot = "10")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000290")]
		private bool System.Collections.IList.IsFixedSize
		{
			[Token(Token = "0x6001676")]
			[Address(RVA = "0xAC58B4", Offset = "0xAC58B4", VA = "0xAC58B4", Slot = "31")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000291")]
		private bool System.Collections.IList.IsReadOnly
		{
			[Token(Token = "0x6001677")]
			[Address(RVA = "0xAC5A98", Offset = "0xAC5A98", VA = "0xAC5A98", Slot = "30")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000292")]
		private object System.Collections.IDictionary.Item
		{
			[Token(Token = "0x6001678")]
			[Address(RVA = "0xAC5B44", Offset = "0xAC5B44", VA = "0xAC5B44", Slot = "46")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001679")]
			[Address(RVA = "0xAC5BF4", Offset = "0xAC5BF4", VA = "0xAC5BF4", Slot = "47")]
			set
			{
			}
		}

		[Token(Token = "0x17000293")]
		private object System.Collections.Specialized.IOrderedDictionary.Item
		{
			[Token(Token = "0x600167A")]
			[Address(RVA = "0xAC60E4", Offset = "0xAC60E4", VA = "0xAC60E4", Slot = "41")]
			get
			{
				return null;
			}
			[Token(Token = "0x600167B")]
			[Address(RVA = "0xAC61A8", Offset = "0xAC61A8", VA = "0xAC61A8", Slot = "42")]
			set
			{
			}
		}

		[Token(Token = "0x17000294")]
		private object System.Collections.IList.Item
		{
			[Token(Token = "0x600167C")]
			[Address(RVA = "0xAC63B4", Offset = "0xAC63B4", VA = "0xAC63B4", Slot = "25")]
			get
			{
				return null;
			}
			[Token(Token = "0x600167D")]
			[Address(RVA = "0xAC6464", Offset = "0xAC6464", VA = "0xAC6464", Slot = "26")]
			set
			{
			}
		}

		[Token(Token = "0x17000295")]
		public JsonData this[string prop_name]
		{
			[Token(Token = "0x600167E")]
			[Address(RVA = "0xABCF4C", Offset = "0xABCF4C", VA = "0xABCF4C")]
			get
			{
				return null;
			}
			[Token(Token = "0x600167F")]
			[Address(RVA = "0xAC5D60", Offset = "0xAC5D60", VA = "0xAC5D60")]
			set
			{
			}
		}

		[Token(Token = "0x17000296")]
		public JsonData this[int index]
		{
			[Token(Token = "0x6001680")]
			[Address(RVA = "0xAC6738", Offset = "0xAC6738", VA = "0xAC6738")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001681")]
			[Address(RVA = "0xAC649C", Offset = "0xAC649C", VA = "0xAC649C")]
			set
			{
			}
		}

		[Token(Token = "0x6001682")]
		[Address(RVA = "0xAC6888", Offset = "0xAC6888", VA = "0xAC6888")]
		public JsonData()
		{
		}

		[Token(Token = "0x6001683")]
		[Address(RVA = "0xAC6890", Offset = "0xAC6890", VA = "0xAC6890")]
		public JsonData(bool boolean)
		{
		}

		[Token(Token = "0x6001684")]
		[Address(RVA = "0xAC68C0", Offset = "0xAC68C0", VA = "0xAC68C0")]
		public JsonData(double number)
		{
		}

		[Token(Token = "0x6001685")]
		[Address(RVA = "0xAC68F0", Offset = "0xAC68F0", VA = "0xAC68F0")]
		public JsonData(int number)
		{
		}

		[Token(Token = "0x6001686")]
		[Address(RVA = "0xAC6920", Offset = "0xAC6920", VA = "0xAC6920")]
		public JsonData(long number)
		{
		}

		[Token(Token = "0x6001687")]
		[Address(RVA = "0xAC6950", Offset = "0xAC6950", VA = "0xAC6950")]
		public JsonData(object obj)
		{
		}

		[Token(Token = "0x6001688")]
		[Address(RVA = "0xAC6B74", Offset = "0xAC6B74", VA = "0xAC6B74")]
		public JsonData(string str)
		{
		}

		[Token(Token = "0x6001689")]
		[Address(RVA = "0xAC6BA4", Offset = "0xAC6BA4", VA = "0xAC6BA4")]
		public static implicit operator JsonData(bool data)
		{
			return null;
		}

		[Token(Token = "0x600168A")]
		[Address(RVA = "0xAC6C14", Offset = "0xAC6C14", VA = "0xAC6C14")]
		public static implicit operator JsonData(double data)
		{
			return null;
		}

		[Token(Token = "0x600168B")]
		[Address(RVA = "0xAC6C88", Offset = "0xAC6C88", VA = "0xAC6C88")]
		public static implicit operator JsonData(int data)
		{
			return null;
		}

		[Token(Token = "0x600168C")]
		[Address(RVA = "0xAC6CF4", Offset = "0xAC6CF4", VA = "0xAC6CF4")]
		public static implicit operator JsonData(long data)
		{
			return null;
		}

		[Token(Token = "0x600168D")]
		[Address(RVA = "0xAC6D60", Offset = "0xAC6D60", VA = "0xAC6D60")]
		public static implicit operator JsonData(string data)
		{
			return null;
		}

		[Token(Token = "0x600168E")]
		[Address(RVA = "0xAC6DCC", Offset = "0xAC6DCC", VA = "0xAC6DCC")]
		public static explicit operator bool(JsonData data)
		{
			return default(bool);
		}

		[Token(Token = "0x600168F")]
		[Address(RVA = "0xAC6E3C", Offset = "0xAC6E3C", VA = "0xAC6E3C")]
		public static explicit operator double(JsonData data)
		{
			return default(double);
		}

		[Token(Token = "0x6001690")]
		[Address(RVA = "0xABCFFC", Offset = "0xABCFFC", VA = "0xABCFFC")]
		public static explicit operator int(JsonData data)
		{
			return default(int);
		}

		[Token(Token = "0x6001691")]
		[Address(RVA = "0xABDA68", Offset = "0xABDA68", VA = "0xABDA68")]
		public static explicit operator long(JsonData data)
		{
			return default(long);
		}

		[Token(Token = "0x6001692")]
		[Address(RVA = "0xABD06C", Offset = "0xABD06C", VA = "0xABD06C")]
		public static explicit operator string(JsonData data)
		{
			return null;
		}

		[Token(Token = "0x6001693")]
		[Address(RVA = "0xAC6EAC", Offset = "0xAC6EAC", VA = "0xAC6EAC", Slot = "36")]
		private void System.Collections.ICollection.CopyTo(Array array, int index)
		{
		}

		[Token(Token = "0x6001694")]
		[Address(RVA = "0xAC6F6C", Offset = "0xAC6F6C", VA = "0xAC6F6C", Slot = "51")]
		private void System.Collections.IDictionary.Add(object key, object value)
		{
		}

		[Token(Token = "0x6001695")]
		[Address(RVA = "0xAC712C", Offset = "0xAC712C", VA = "0xAC712C", Slot = "52")]
		private void System.Collections.IDictionary.Clear()
		{
		}

		[Token(Token = "0x6001696")]
		[Address(RVA = "0xAC7258", Offset = "0xAC7258", VA = "0xAC7258", Slot = "50")]
		private bool System.Collections.IDictionary.Contains(object key)
		{
			return default(bool);
		}

		[Token(Token = "0x6001697")]
		[Address(RVA = "0xAC730C", Offset = "0xAC730C", VA = "0xAC730C", Slot = "55")]
		private IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6001698")]
		[Address(RVA = "0xAC73A4", Offset = "0xAC73A4", VA = "0xAC73A4", Slot = "56")]
		private void System.Collections.IDictionary.Remove(object key)
		{
		}

		[Token(Token = "0x6001699")]
		[Address(RVA = "0xAC7628", Offset = "0xAC7628", VA = "0xAC7628", Slot = "40")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x600169A")]
		[Address(RVA = "0xAC76D0", Offset = "0xAC76D0", VA = "0xAC76D0", Slot = "11")]
		private bool LitJson.IJsonWrapper.GetBoolean()
		{
			return default(bool);
		}

		[Token(Token = "0x600169B")]
		[Address(RVA = "0xAC7738", Offset = "0xAC7738", VA = "0xAC7738", Slot = "12")]
		private double LitJson.IJsonWrapper.GetDouble()
		{
			return default(double);
		}

		[Token(Token = "0x600169C")]
		[Address(RVA = "0xAC77A0", Offset = "0xAC77A0", VA = "0xAC77A0", Slot = "13")]
		private int LitJson.IJsonWrapper.GetInt()
		{
			return default(int);
		}

		[Token(Token = "0x600169D")]
		[Address(RVA = "0xAC7808", Offset = "0xAC7808", VA = "0xAC7808", Slot = "15")]
		private long LitJson.IJsonWrapper.GetLong()
		{
			return default(long);
		}

		[Token(Token = "0x600169E")]
		[Address(RVA = "0xAC7870", Offset = "0xAC7870", VA = "0xAC7870", Slot = "16")]
		private string LitJson.IJsonWrapper.GetString()
		{
			return null;
		}

		[Token(Token = "0x600169F")]
		[Address(RVA = "0xAC78D8", Offset = "0xAC78D8", VA = "0xAC78D8", Slot = "17")]
		private void LitJson.IJsonWrapper.SetBoolean(bool val)
		{
		}

		[Token(Token = "0x60016A0")]
		[Address(RVA = "0xAC78F0", Offset = "0xAC78F0", VA = "0xAC78F0", Slot = "18")]
		private void LitJson.IJsonWrapper.SetDouble(double val)
		{
		}

		[Token(Token = "0x60016A1")]
		[Address(RVA = "0xAC7904", Offset = "0xAC7904", VA = "0xAC7904", Slot = "19")]
		private void LitJson.IJsonWrapper.SetInt(int val)
		{
		}

		[Token(Token = "0x60016A2")]
		[Address(RVA = "0xAC7918", Offset = "0xAC7918", VA = "0xAC7918", Slot = "21")]
		private void LitJson.IJsonWrapper.SetLong(long val)
		{
		}

		[Token(Token = "0x60016A3")]
		[Address(RVA = "0xAC792C", Offset = "0xAC792C", VA = "0xAC792C", Slot = "22")]
		private void LitJson.IJsonWrapper.SetString(string val)
		{
		}

		[Token(Token = "0x60016A4")]
		[Address(RVA = "0xAC793C", Offset = "0xAC793C", VA = "0xAC793C", Slot = "23")]
		private string LitJson.IJsonWrapper.ToJson()
		{
			return null;
		}

		[Token(Token = "0x60016A5")]
		[Address(RVA = "0xAC79F4", Offset = "0xAC79F4", VA = "0xAC79F4", Slot = "24")]
		private void LitJson.IJsonWrapper.ToJson(JsonWriter writer)
		{
		}

		[Token(Token = "0x60016A6")]
		[Address(RVA = "0xAC7A28", Offset = "0xAC7A28", VA = "0xAC7A28", Slot = "27")]
		private int System.Collections.IList.Add(object value)
		{
			return default(int);
		}

		[Token(Token = "0x60016A7")]
		[Address(RVA = "0xAC7AF0", Offset = "0xAC7AF0", VA = "0xAC7AF0", Slot = "29")]
		private void System.Collections.IList.Clear()
		{
		}

		[Token(Token = "0x60016A8")]
		[Address(RVA = "0xAC7BA4", Offset = "0xAC7BA4", VA = "0xAC7BA4", Slot = "28")]
		private bool System.Collections.IList.Contains(object value)
		{
			return default(bool);
		}

		[Token(Token = "0x60016A9")]
		[Address(RVA = "0xAC7C58", Offset = "0xAC7C58", VA = "0xAC7C58", Slot = "32")]
		private int System.Collections.IList.IndexOf(object value)
		{
			return default(int);
		}

		[Token(Token = "0x60016AA")]
		[Address(RVA = "0xAC7D0C", Offset = "0xAC7D0C", VA = "0xAC7D0C", Slot = "33")]
		private void System.Collections.IList.Insert(int index, object value)
		{
		}

		[Token(Token = "0x60016AB")]
		[Address(RVA = "0xAC7DD8", Offset = "0xAC7DD8", VA = "0xAC7DD8", Slot = "34")]
		private void System.Collections.IList.Remove(object value)
		{
		}

		[Token(Token = "0x60016AC")]
		[Address(RVA = "0xAC7E94", Offset = "0xAC7E94", VA = "0xAC7E94", Slot = "35")]
		private void System.Collections.IList.RemoveAt(int index)
		{
		}

		[Token(Token = "0x60016AD")]
		[Address(RVA = "0xAC7F50", Offset = "0xAC7F50", VA = "0xAC7F50", Slot = "43")]
		private IDictionaryEnumerator System.Collections.Specialized.IOrderedDictionary.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x60016AE")]
		[Address(RVA = "0xAC8060", Offset = "0xAC8060", VA = "0xAC8060", Slot = "44")]
		private void System.Collections.Specialized.IOrderedDictionary.Insert(int idx, object key, object value)
		{
		}

		[Token(Token = "0x60016AF")]
		[Address(RVA = "0xAC81AC", Offset = "0xAC81AC", VA = "0xAC81AC", Slot = "45")]
		private void System.Collections.Specialized.IOrderedDictionary.RemoveAt(int idx)
		{
		}

		[Token(Token = "0x60016B0")]
		[Address(RVA = "0xAC4B58", Offset = "0xAC4B58", VA = "0xAC4B58")]
		private ICollection EnsureCollection()
		{
			return null;
		}

		[Token(Token = "0x60016B1")]
		[Address(RVA = "0xAC4E74", Offset = "0xAC4E74", VA = "0xAC4E74")]
		private IDictionary EnsureDictionary()
		{
			return null;
		}

		[Token(Token = "0x60016B2")]
		[Address(RVA = "0xAC5960", Offset = "0xAC5960", VA = "0xAC5960")]
		private IList EnsureList()
		{
			return null;
		}

		[Token(Token = "0x60016B3")]
		[Address(RVA = "0xAC5CD0", Offset = "0xAC5CD0", VA = "0xAC5CD0")]
		private JsonData ToJsonData(object obj)
		{
			return null;
		}

		[Token(Token = "0x60016B4")]
		[Address(RVA = "0xAC8358", Offset = "0xAC8358", VA = "0xAC8358")]
		private static void WriteJson(IJsonWrapper obj, JsonWriter writer)
		{
		}

		[Token(Token = "0x60016B5")]
		[Address(RVA = "0xAC7A2C", Offset = "0xAC7A2C", VA = "0xAC7A2C")]
		public int Add(object value)
		{
			return default(int);
		}

		[Token(Token = "0x60016B6")]
		[Address(RVA = "0xAC97E4", Offset = "0xAC97E4", VA = "0xAC97E4")]
		public void Clear()
		{
		}

		[Token(Token = "0x60016B7")]
		[Address(RVA = "0xAC98F4", Offset = "0xAC98F4", VA = "0xAC98F4", Slot = "57")]
		public bool Equals(JsonData x)
		{
			return default(bool);
		}

		[Token(Token = "0x60016B8")]
		[Address(RVA = "0xAC99E0", Offset = "0xAC99E0", VA = "0xAC99E0", Slot = "14")]
		public JsonType GetJsonType()
		{
			return default(JsonType);
		}

		[Token(Token = "0x60016B9")]
		[Address(RVA = "0xAC99E8", Offset = "0xAC99E8", VA = "0xAC99E8", Slot = "20")]
		public void SetJsonType(JsonType type)
		{
		}

		[Token(Token = "0x60016BA")]
		[Address(RVA = "0xAC7940", Offset = "0xAC7940", VA = "0xAC7940")]
		public string ToJson()
		{
			return null;
		}

		[Token(Token = "0x60016BB")]
		[Address(RVA = "0xAC79F8", Offset = "0xAC79F8", VA = "0xAC79F8")]
		public void ToJson(JsonWriter writer)
		{
		}

		[Token(Token = "0x60016BC")]
		[Address(RVA = "0xAC9BCC", Offset = "0xAC9BCC", VA = "0xAC9BCC", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000408")]
	internal class OrderedDictionaryEnumerator : IDictionaryEnumerator, IEnumerator
	{
		[Token(Token = "0x4001A08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IEnumerator<KeyValuePair<string, JsonData>> list_enumerator;

		[Token(Token = "0x17000297")]
		public object Current
		{
			[Token(Token = "0x60016BD")]
			[Address(RVA = "0xAC9CC0", Offset = "0xAC9CC0", VA = "0xAC9CC0", Slot = "8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000298")]
		public DictionaryEntry Entry
		{
			[Token(Token = "0x60016BE")]
			[Address(RVA = "0xAC9D24", Offset = "0xAC9D24", VA = "0xAC9D24", Slot = "6")]
			get
			{
				return default(DictionaryEntry);
			}
		}

		[Token(Token = "0x17000299")]
		public object Key
		{
			[Token(Token = "0x60016BF")]
			[Address(RVA = "0xAC9E0C", Offset = "0xAC9E0C", VA = "0xAC9E0C", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700029A")]
		public object Value
		{
			[Token(Token = "0x60016C0")]
			[Address(RVA = "0xAC9EB8", Offset = "0xAC9EB8", VA = "0xAC9EB8", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60016C1")]
		[Address(RVA = "0xAC8038", Offset = "0xAC8038", VA = "0xAC8038")]
		public OrderedDictionaryEnumerator(IEnumerator<KeyValuePair<string, JsonData>> enumerator)
		{
		}

		[Token(Token = "0x60016C2")]
		[Address(RVA = "0xAC9F6C", Offset = "0xAC9F6C", VA = "0xAC9F6C", Slot = "7")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60016C3")]
		[Address(RVA = "0xACA00C", Offset = "0xACA00C", VA = "0xACA00C", Slot = "9")]
		public void Reset()
		{
		}
	}
	[Token(Token = "0x2000409")]
	public class JsonException : ApplicationException
	{
		[Token(Token = "0x60016C4")]
		[Address(RVA = "0xACA0B0", Offset = "0xACA0B0", VA = "0xACA0B0")]
		public JsonException()
		{
		}

		[Token(Token = "0x60016C5")]
		[Address(RVA = "0xACA0B8", Offset = "0xACA0B8", VA = "0xACA0B8")]
		internal JsonException(ParserToken token)
		{
		}

		[Token(Token = "0x60016C6")]
		[Address(RVA = "0xACA154", Offset = "0xACA154", VA = "0xACA154")]
		internal JsonException(ParserToken token, Exception inner_exception)
		{
		}

		[Token(Token = "0x60016C7")]
		[Address(RVA = "0xACA1F8", Offset = "0xACA1F8", VA = "0xACA1F8")]
		internal JsonException(int c)
		{
		}

		[Token(Token = "0x60016C8")]
		[Address(RVA = "0xACA294", Offset = "0xACA294", VA = "0xACA294")]
		internal JsonException(int c, Exception inner_exception)
		{
		}

		[Token(Token = "0x60016C9")]
		[Address(RVA = "0xACA338", Offset = "0xACA338", VA = "0xACA338")]
		public JsonException(string message)
		{
		}

		[Token(Token = "0x60016CA")]
		[Address(RVA = "0xACA340", Offset = "0xACA340", VA = "0xACA340")]
		public JsonException(string message, Exception inner_exception)
		{
		}
	}
	[Token(Token = "0x200040A")]
	internal struct PropertyMetadata
	{
		[Token(Token = "0x4001A09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public MemberInfo Info;

		[Token(Token = "0x4001A0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool IsField;

		[Token(Token = "0x4001A0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Type Type;
	}
	[Token(Token = "0x200040B")]
	internal struct ArrayMetadata
	{
		[Token(Token = "0x4001A0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Type element_type;

		[Token(Token = "0x4001A0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private bool is_array;

		[Token(Token = "0x4001A0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
		private bool is_list;

		[Token(Token = "0x1700029B")]
		public Type ElementType
		{
			[Token(Token = "0x60016CB")]
			[Address(RVA = "0xACA348", Offset = "0xACA348", VA = "0xACA348")]
			get
			{
				return null;
			}
			[Token(Token = "0x60016CC")]
			[Address(RVA = "0xACA3F0", Offset = "0xACA3F0", VA = "0xACA3F0")]
			set
			{
			}
		}

		[Token(Token = "0x1700029C")]
		public bool IsArray
		{
			[Token(Token = "0x60016CD")]
			[Address(RVA = "0xACA3F8", Offset = "0xACA3F8", VA = "0xACA3F8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60016CE")]
			[Address(RVA = "0xACA400", Offset = "0xACA400", VA = "0xACA400")]
			set
			{
			}
		}

		[Token(Token = "0x1700029D")]
		public bool IsList
		{
			[Token(Token = "0x60016CF")]
			[Address(RVA = "0xACA40C", Offset = "0xACA40C", VA = "0xACA40C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60016D0")]
			[Address(RVA = "0xACA414", Offset = "0xACA414", VA = "0xACA414")]
			set
			{
			}
		}
	}
	[Token(Token = "0x200040C")]
	internal struct ObjectMetadata
	{
		[Token(Token = "0x4001A0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Type element_type;

		[Token(Token = "0x4001A10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private bool is_dictionary;

		[Token(Token = "0x4001A11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IDictionary<string, PropertyMetadata> properties;

		[Token(Token = "0x1700029E")]
		public Type ElementType
		{
			[Token(Token = "0x60016D1")]
			[Address(RVA = "0xACA420", Offset = "0xACA420", VA = "0xACA420")]
			get
			{
				return null;
			}
			[Token(Token = "0x60016D2")]
			[Address(RVA = "0xACA4C8", Offset = "0xACA4C8", VA = "0xACA4C8")]
			set
			{
			}
		}

		[Token(Token = "0x1700029F")]
		public bool IsDictionary
		{
			[Token(Token = "0x60016D3")]
			[Address(RVA = "0xACA4D0", Offset = "0xACA4D0", VA = "0xACA4D0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60016D4")]
			[Address(RVA = "0xACA4D8", Offset = "0xACA4D8", VA = "0xACA4D8")]
			set
			{
			}
		}

		[Token(Token = "0x170002A0")]
		public IDictionary<string, PropertyMetadata> Properties
		{
			[Token(Token = "0x60016D5")]
			[Address(RVA = "0xACA4E4", Offset = "0xACA4E4", VA = "0xACA4E4")]
			get
			{
				return null;
			}
			[Token(Token = "0x60016D6")]
			[Address(RVA = "0xACA4EC", Offset = "0xACA4EC", VA = "0xACA4EC")]
			set
			{
			}
		}
	}
	[Token(Token = "0x200040D")]
	internal delegate void ExporterFunc(object obj, JsonWriter writer);
	[Token(Token = "0x200040E")]
	public delegate void ExporterFunc<T>(T obj, JsonWriter writer);
	[Token(Token = "0x200040F")]
	internal delegate object ImporterFunc(object input);
	[Token(Token = "0x2000410")]
	public delegate TValue ImporterFunc<TJson, TValue>(TJson input);
	[Token(Token = "0x2000411")]
	public delegate IJsonWrapper WrapperFactory();
	[Token(Token = "0x2000412")]
	public class JsonMapper
	{
		[Token(Token = "0x4001A12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int max_nesting_depth;

		[Token(Token = "0x4001A13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static IFormatProvider datetime_format;

		[Token(Token = "0x4001A14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static IDictionary<Type, ExporterFunc> base_exporters_table;

		[Token(Token = "0x4001A15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static IDictionary<Type, ExporterFunc> custom_exporters_table;

		[Token(Token = "0x4001A16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static IDictionary<Type, IDictionary<Type, ImporterFunc>> base_importers_table;

		[Token(Token = "0x4001A17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static IDictionary<Type, IDictionary<Type, ImporterFunc>> custom_importers_table;

		[Token(Token = "0x4001A18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static IDictionary<Type, ArrayMetadata> array_metadata;

		[Token(Token = "0x4001A19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static readonly object array_metadata_lock;

		[Token(Token = "0x4001A1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private static IDictionary<Type, IDictionary<Type, MethodInfo>> conv_ops;

		[Token(Token = "0x4001A1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private static readonly object conv_ops_lock;

		[Token(Token = "0x4001A1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private static IDictionary<Type, ObjectMetadata> object_metadata;

		[Token(Token = "0x4001A1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private static readonly object object_metadata_lock;

		[Token(Token = "0x4001A1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private static IDictionary<Type, IList<PropertyMetadata>> type_properties;

		[Token(Token = "0x4001A1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private static readonly object type_properties_lock;

		[Token(Token = "0x4001A20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private static JsonWriter static_writer;

		[Token(Token = "0x4001A21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private static readonly object static_writer_lock;

		[Token(Token = "0x60016EB")]
		[Address(RVA = "0xACA8D4", Offset = "0xACA8D4", VA = "0xACA8D4")]
		static JsonMapper()
		{
		}

		[Token(Token = "0x60016EC")]
		[Address(RVA = "0xACC68C", Offset = "0xACC68C", VA = "0xACC68C")]
		private static void AddArrayMetadata(Type type)
		{
		}

		[Token(Token = "0x60016ED")]
		[Address(RVA = "0xACCB10", Offset = "0xACCB10", VA = "0xACCB10")]
		private static void AddObjectMetadata(Type type)
		{
		}

		[Token(Token = "0x60016EE")]
		[Address(RVA = "0xACD1F8", Offset = "0xACD1F8", VA = "0xACD1F8")]
		private static void AddTypeProperties(Type type)
		{
		}

		[Token(Token = "0x60016EF")]
		[Address(RVA = "0xACD71C", Offset = "0xACD71C", VA = "0xACD71C")]
		private static MethodInfo GetConvOp(Type t1, Type t2)
		{
			return null;
		}

		[Token(Token = "0x60016F0")]
		[Address(RVA = "0xACDF9C", Offset = "0xACDF9C", VA = "0xACDF9C")]
		private static object ReadValue(Type inst_type, JsonReader reader)
		{
			return null;
		}

		[Token(Token = "0x60016F1")]
		[Address(RVA = "0xACF2F0", Offset = "0xACF2F0", VA = "0xACF2F0")]
		private static IJsonWrapper ReadValue(WrapperFactory factory, JsonReader reader)
		{
			return null;
		}

		[Token(Token = "0x60016F2")]
		[Address(RVA = "0xACAD10", Offset = "0xACAD10", VA = "0xACAD10")]
		private static void RegisterBaseExporters()
		{
		}

		[Token(Token = "0x60016F3")]
		[Address(RVA = "0xACB9E4", Offset = "0xACB9E4", VA = "0xACB9E4")]
		private static void RegisterBaseImporters()
		{
		}

		[Token(Token = "0x60016F4")]
		[Address(RVA = "0xACF948", Offset = "0xACF948", VA = "0xACF948")]
		private static void RegisterImporter(IDictionary<Type, IDictionary<Type, ImporterFunc>> table, Type json_type, Type value_type, ImporterFunc importer)
		{
		}

		[Token(Token = "0x60016F5")]
		[Address(RVA = "0xACFB8C", Offset = "0xACFB8C", VA = "0xACFB8C")]
		private static void WriteValue(object obj, JsonWriter writer, bool writer_is_private, int depth)
		{
		}

		[Token(Token = "0x60016F6")]
		[Address(RVA = "0xAD1368", Offset = "0xAD1368", VA = "0xAD1368")]
		public static string ToJson(object obj)
		{
			return null;
		}

		[Token(Token = "0x60016F7")]
		[Address(RVA = "0xAD15C0", Offset = "0xAD15C0", VA = "0xAD15C0")]
		public static void ToJson(object obj, JsonWriter writer)
		{
		}

		[Token(Token = "0x60016F8")]
		[Address(RVA = "0xAD162C", Offset = "0xAD162C", VA = "0xAD162C")]
		public static JsonData ToObject(JsonReader reader)
		{
			return null;
		}

		[Token(Token = "0x60016F9")]
		[Address(RVA = "0xAD17DC", Offset = "0xAD17DC", VA = "0xAD17DC")]
		public static JsonData ToObject(TextReader reader)
		{
			return null;
		}

		[Token(Token = "0x60016FA")]
		[Address(RVA = "0xABCE00", Offset = "0xABCE00", VA = "0xABCE00")]
		public static JsonData ToObject(string json)
		{
			return null;
		}

		[Token(Token = "0x60016FB")]
		public static T ToObject<T>(JsonReader reader)
		{
			return (T)null;
		}

		[Token(Token = "0x60016FC")]
		public static T ToObject<T>(TextReader reader)
		{
			return (T)null;
		}

		[Token(Token = "0x60016FD")]
		public static T ToObject<T>(string json)
		{
			return (T)null;
		}

		[Token(Token = "0x60016FE")]
		[Address(RVA = "0xAD1778", Offset = "0xAD1778", VA = "0xAD1778")]
		public static IJsonWrapper ToWrapper(WrapperFactory factory, JsonReader reader)
		{
			return null;
		}

		[Token(Token = "0x60016FF")]
		[Address(RVA = "0xAD1960", Offset = "0xAD1960", VA = "0xAD1960")]
		public static IJsonWrapper ToWrapper(WrapperFactory factory, string json)
		{
			return null;
		}

		[Token(Token = "0x6001700")]
		public static void RegisterExporter<T>(ExporterFunc<T> exporter)
		{
		}

		[Token(Token = "0x6001701")]
		public static void RegisterImporter<TJson, TValue>(ImporterFunc<TJson, TValue> importer)
		{
		}

		[Token(Token = "0x6001702")]
		[Address(RVA = "0xAD1A6C", Offset = "0xAD1A6C", VA = "0xAD1A6C")]
		public static void UnregisterExporters()
		{
		}

		[Token(Token = "0x6001703")]
		[Address(RVA = "0xAD1B38", Offset = "0xAD1B38", VA = "0xAD1B38")]
		public static void UnregisterImporters()
		{
		}

		[Token(Token = "0x6001704")]
		[Address(RVA = "0xAD1C04", Offset = "0xAD1C04", VA = "0xAD1C04")]
		public JsonMapper()
		{
		}
	}
	[Token(Token = "0x2000416")]
	public enum JsonToken
	{
		[Token(Token = "0x4001A40")]
		None,
		[Token(Token = "0x4001A41")]
		ObjectStart,
		[Token(Token = "0x4001A42")]
		PropertyName,
		[Token(Token = "0x4001A43")]
		ObjectEnd,
		[Token(Token = "0x4001A44")]
		ArrayStart,
		[Token(Token = "0x4001A45")]
		ArrayEnd,
		[Token(Token = "0x4001A46")]
		Int,
		[Token(Token = "0x4001A47")]
		Long,
		[Token(Token = "0x4001A48")]
		Double,
		[Token(Token = "0x4001A49")]
		String,
		[Token(Token = "0x4001A4A")]
		Boolean,
		[Token(Token = "0x4001A4B")]
		Null
	}
	[Token(Token = "0x2000417")]
	public class JsonReader
	{
		[Token(Token = "0x4001A4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static IDictionary<int, IDictionary<int, int[]>> parse_table;

		[Token(Token = "0x4001A4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Stack<int> automaton_stack;

		[Token(Token = "0x4001A4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int current_input;

		[Token(Token = "0x4001A4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private int current_symbol;

		[Token(Token = "0x4001A50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool end_of_json;

		[Token(Token = "0x4001A51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		private bool end_of_input;

		[Token(Token = "0x4001A52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Lexer lexer;

		[Token(Token = "0x4001A53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool parser_in_string;

		[Token(Token = "0x4001A54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool parser_return;

		[Token(Token = "0x4001A55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		private bool read_started;

		[Token(Token = "0x4001A56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private TextReader reader;

		[Token(Token = "0x4001A57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool reader_is_owned;

		[Token(Token = "0x4001A58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private object token_value;

		[Token(Token = "0x4001A59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private JsonToken token;

		[Token(Token = "0x170002A1")]
		public bool AllowComments
		{
			[Token(Token = "0x6001725")]
			[Address(RVA = "0xAD2FD4", Offset = "0xAD2FD4", VA = "0xAD2FD4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001726")]
			[Address(RVA = "0xAD2FF0", Offset = "0xAD2FF0", VA = "0xAD2FF0")]
			set
			{
			}
		}

		[Token(Token = "0x170002A2")]
		public bool AllowSingleQuotedStrings
		{
			[Token(Token = "0x6001727")]
			[Address(RVA = "0xAD3010", Offset = "0xAD3010", VA = "0xAD3010")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001728")]
			[Address(RVA = "0xAD302C", Offset = "0xAD302C", VA = "0xAD302C")]
			set
			{
			}
		}

		[Token(Token = "0x170002A3")]
		public bool EndOfInput
		{
			[Token(Token = "0x6001729")]
			[Address(RVA = "0xAD304C", Offset = "0xAD304C", VA = "0xAD304C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002A4")]
		public bool EndOfJson
		{
			[Token(Token = "0x600172A")]
			[Address(RVA = "0xAD3054", Offset = "0xAD3054", VA = "0xAD3054")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002A5")]
		public JsonToken Token
		{
			[Token(Token = "0x600172B")]
			[Address(RVA = "0xAD305C", Offset = "0xAD305C", VA = "0xAD305C")]
			get
			{
				return default(JsonToken);
			}
		}

		[Token(Token = "0x170002A6")]
		public object Value
		{
			[Token(Token = "0x600172C")]
			[Address(RVA = "0xAD3064", Offset = "0xAD3064", VA = "0xAD3064")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600172D")]
		[Address(RVA = "0xAD306C", Offset = "0xAD306C", VA = "0xAD306C")]
		static JsonReader()
		{
		}

		[Token(Token = "0x600172E")]
		[Address(RVA = "0xAD19F4", Offset = "0xAD19F4", VA = "0xAD19F4")]
		public JsonReader(string json_text)
		{
		}

		[Token(Token = "0x600172F")]
		[Address(RVA = "0xAD1958", Offset = "0xAD1958", VA = "0xAD1958")]
		public JsonReader(TextReader reader)
		{
		}

		[Token(Token = "0x6001730")]
		[Address(RVA = "0xAD373C", Offset = "0xAD373C", VA = "0xAD373C")]
		private JsonReader(TextReader reader, bool owned)
		{
		}

		[Token(Token = "0x6001731")]
		[Address(RVA = "0xAD3070", Offset = "0xAD3070", VA = "0xAD3070")]
		private static void PopulateParseTable()
		{
		}

		[Token(Token = "0x6001732")]
		[Address(RVA = "0xAD39CC", Offset = "0xAD39CC", VA = "0xAD39CC")]
		private static void TableAddCol(ParserToken row, int col, params int[] symbols)
		{
		}

		[Token(Token = "0x6001733")]
		[Address(RVA = "0xAD38B4", Offset = "0xAD38B4", VA = "0xAD38B4")]
		private static void TableAddRow(ParserToken rule)
		{
		}

		[Token(Token = "0x6001734")]
		[Address(RVA = "0xAD3B2C", Offset = "0xAD3B2C", VA = "0xAD3B2C")]
		private void ProcessNumber(string number)
		{
		}

		[Token(Token = "0x6001735")]
		[Address(RVA = "0xAD3C90", Offset = "0xAD3C90", VA = "0xAD3C90")]
		private void ProcessSymbol()
		{
		}

		[Token(Token = "0x6001736")]
		[Address(RVA = "0xAD3E1C", Offset = "0xAD3E1C", VA = "0xAD3E1C")]
		private bool ReadToken()
		{
			return default(bool);
		}

		[Token(Token = "0x6001737")]
		[Address(RVA = "0xAD3E74", Offset = "0xAD3E74", VA = "0xAD3E74")]
		public void Close()
		{
		}

		[Token(Token = "0x6001738")]
		[Address(RVA = "0xACEE8C", Offset = "0xACEE8C", VA = "0xACEE8C")]
		public bool Read()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000418")]
	internal enum Condition
	{
		[Token(Token = "0x4001A5B")]
		InArray,
		[Token(Token = "0x4001A5C")]
		InObject,
		[Token(Token = "0x4001A5D")]
		NotAProperty,
		[Token(Token = "0x4001A5E")]
		Property,
		[Token(Token = "0x4001A5F")]
		Value
	}
	[Token(Token = "0x2000419")]
	internal class WriterContext
	{
		[Token(Token = "0x4001A60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int Count;

		[Token(Token = "0x4001A61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool InArray;

		[Token(Token = "0x4001A62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
		public bool InObject;

		[Token(Token = "0x4001A63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16")]
		public bool ExpectingValue;

		[Token(Token = "0x4001A64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int Padding;

		[Token(Token = "0x6001739")]
		[Address(RVA = "0xAD3EB8", Offset = "0xAD3EB8", VA = "0xAD3EB8")]
		public WriterContext()
		{
		}
	}
	[Token(Token = "0x200041A")]
	public class JsonWriter
	{
		[Token(Token = "0x4001A65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static NumberFormatInfo number_format;

		[Token(Token = "0x4001A66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private WriterContext context;

		[Token(Token = "0x4001A67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Stack<WriterContext> ctx_stack;

		[Token(Token = "0x4001A68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool has_reached_end;

		[Token(Token = "0x4001A69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private char[] hex_seq;

		[Token(Token = "0x4001A6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int indentation;

		[Token(Token = "0x4001A6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int indent_value;

		[Token(Token = "0x4001A6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private StringBuilder inst_string_builder;

		[Token(Token = "0x4001A6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool pretty_print;

		[Token(Token = "0x4001A6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		private bool validate;

		[Token(Token = "0x4001A6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private TextWriter writer;

		[Token(Token = "0x170002A7")]
		public int IndentValue
		{
			[Token(Token = "0x600173A")]
			[Address(RVA = "0xAD3EC0", Offset = "0xAD3EC0", VA = "0xAD3EC0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600173B")]
			[Address(RVA = "0xAD3EC8", Offset = "0xAD3EC8", VA = "0xAD3EC8")]
			set
			{
			}
		}

		[Token(Token = "0x170002A8")]
		public bool PrettyPrint
		{
			[Token(Token = "0x600173C")]
			[Address(RVA = "0xAD3EDC", Offset = "0xAD3EDC", VA = "0xAD3EDC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600173D")]
			[Address(RVA = "0xAD3EE4", Offset = "0xAD3EE4", VA = "0xAD3EE4")]
			set
			{
			}
		}

		[Token(Token = "0x170002A9")]
		public TextWriter TextWriter
		{
			[Token(Token = "0x600173E")]
			[Address(RVA = "0xAD3EF0", Offset = "0xAD3EF0", VA = "0xAD3EF0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002AA")]
		public bool Validate
		{
			[Token(Token = "0x600173F")]
			[Address(RVA = "0xAD3EF8", Offset = "0xAD3EF8", VA = "0xAD3EF8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001740")]
			[Address(RVA = "0xAD3F00", Offset = "0xAD3F00", VA = "0xAD3F00")]
			set
			{
			}
		}

		[Token(Token = "0x6001741")]
		[Address(RVA = "0xAD3F0C", Offset = "0xAD3F0C", VA = "0xAD3F0C")]
		static JsonWriter()
		{
		}

		[Token(Token = "0x6001742")]
		[Address(RVA = "0xACAC6C", Offset = "0xACAC6C", VA = "0xACAC6C")]
		public JsonWriter()
		{
		}

		[Token(Token = "0x6001743")]
		[Address(RVA = "0xAD4068", Offset = "0xAD4068", VA = "0xAD4068")]
		public JsonWriter(StringBuilder sb)
		{
		}

		[Token(Token = "0x6001744")]
		[Address(RVA = "0xAC9B50", Offset = "0xAC9B50", VA = "0xAC9B50")]
		public JsonWriter(TextWriter writer)
		{
		}

		[Token(Token = "0x6001745")]
		[Address(RVA = "0xAD40DC", Offset = "0xAD40DC", VA = "0xAD40DC")]
		private void DoValidation(Condition cond)
		{
		}

		[Token(Token = "0x6001746")]
		[Address(RVA = "0xAD3F5C", Offset = "0xAD3F5C", VA = "0xAD3F5C")]
		private void Init()
		{
		}

		[Token(Token = "0x6001747")]
		[Address(RVA = "0xAD4278", Offset = "0xAD4278", VA = "0xAD4278")]
		private static void IntToHex(int n, char[] hex)
		{
		}

		[Token(Token = "0x6001748")]
		[Address(RVA = "0xAD42F0", Offset = "0xAD42F0", VA = "0xAD42F0")]
		private void Indent()
		{
		}

		[Token(Token = "0x6001749")]
		[Address(RVA = "0xAD4308", Offset = "0xAD4308", VA = "0xAD4308")]
		private void Put(string str)
		{
		}

		[Token(Token = "0x600174A")]
		[Address(RVA = "0xAD4390", Offset = "0xAD4390", VA = "0xAD4390")]
		private void PutNewline()
		{
		}

		[Token(Token = "0x600174B")]
		[Address(RVA = "0xAD4398", Offset = "0xAD4398", VA = "0xAD4398")]
		private void PutNewline(bool add_comma)
		{
		}

		[Token(Token = "0x600174C")]
		[Address(RVA = "0xAD4418", Offset = "0xAD4418", VA = "0xAD4418")]
		private void PutString(string str)
		{
		}

		[Token(Token = "0x600174D")]
		[Address(RVA = "0xAD4710", Offset = "0xAD4710", VA = "0xAD4710")]
		private void Unindent()
		{
		}

		[Token(Token = "0x600174E")]
		[Address(RVA = "0xAD4728", Offset = "0xAD4728", VA = "0xAD4728", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x600174F")]
		[Address(RVA = "0xAD14E0", Offset = "0xAD14E0", VA = "0xAD14E0")]
		public void Reset()
		{
		}

		[Token(Token = "0x6001750")]
		[Address(RVA = "0xAC8FC0", Offset = "0xAC8FC0", VA = "0xAC8FC0")]
		public void Write(bool boolean)
		{
		}

		[Token(Token = "0x6001751")]
		[Address(RVA = "0xAD1F48", Offset = "0xAD1F48", VA = "0xAD1F48")]
		public void Write(decimal number)
		{
		}

		[Token(Token = "0x6001752")]
		[Address(RVA = "0xAC9058", Offset = "0xAC9058", VA = "0xAC9058")]
		public void Write(double number)
		{
		}

		[Token(Token = "0x6001753")]
		[Address(RVA = "0xAC9194", Offset = "0xAC9194", VA = "0xAC9194")]
		public void Write(int number)
		{
		}

		[Token(Token = "0x6001754")]
		[Address(RVA = "0xAC9268", Offset = "0xAC9268", VA = "0xAC9268")]
		public void Write(long number)
		{
		}

		[Token(Token = "0x6001755")]
		[Address(RVA = "0xAC8F34", Offset = "0xAC8F34", VA = "0xAC8F34")]
		public void Write(string str)
		{
		}

		[Token(Token = "0x6001756")]
		[Address(RVA = "0xAD1294", Offset = "0xAD1294", VA = "0xAD1294")]
		public void Write(ulong number)
		{
		}

		[Token(Token = "0x6001757")]
		[Address(RVA = "0xAC9420", Offset = "0xAC9420", VA = "0xAC9420")]
		public void WriteArrayEnd()
		{
		}

		[Token(Token = "0x6001758")]
		[Address(RVA = "0xAC933C", Offset = "0xAC933C", VA = "0xAC933C")]
		public void WriteArrayStart()
		{
		}

		[Token(Token = "0x6001759")]
		[Address(RVA = "0xAC96F8", Offset = "0xAC96F8", VA = "0xAC96F8")]
		public void WriteObjectEnd()
		{
		}

		[Token(Token = "0x600175A")]
		[Address(RVA = "0xAC950C", Offset = "0xAC950C", VA = "0xAC950C")]
		public void WriteObjectStart()
		{
		}

		[Token(Token = "0x600175B")]
		[Address(RVA = "0xAC95F0", Offset = "0xAC95F0", VA = "0xAC95F0")]
		public void WritePropertyName(string property_name)
		{
		}
	}
	[Token(Token = "0x200041B")]
	internal class FsmContext
	{
		[Token(Token = "0x4001A70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool Return;

		[Token(Token = "0x4001A71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int NextState;

		[Token(Token = "0x4001A72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Lexer L;

		[Token(Token = "0x4001A73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int StateStack;

		[Token(Token = "0x600175C")]
		[Address(RVA = "0xAD5790", Offset = "0xAD5790", VA = "0xAD5790")]
		public FsmContext()
		{
		}
	}
	[Token(Token = "0x200041C")]
	internal class Lexer
	{
		[Token(Token = "0x200041D")]
		private delegate bool StateHandler(FsmContext ctx);

		[Token(Token = "0x4001A74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int[] fsm_return_table;

		[Token(Token = "0x4001A75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static StateHandler[] fsm_handler_table;

		[Token(Token = "0x4001A76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool allow_comments;

		[Token(Token = "0x4001A77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		private bool allow_single_quoted_strings;

		[Token(Token = "0x4001A78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		private bool end_of_input;

		[Token(Token = "0x4001A79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private FsmContext fsm_context;

		[Token(Token = "0x4001A7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int input_buffer;

		[Token(Token = "0x4001A7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int input_char;

		[Token(Token = "0x4001A7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private TextReader reader;

		[Token(Token = "0x4001A7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int state;

		[Token(Token = "0x4001A7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private StringBuilder string_buffer;

		[Token(Token = "0x4001A7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private string string_value;

		[Token(Token = "0x4001A80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int token;

		[Token(Token = "0x4001A81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private int unichar;

		[Token(Token = "0x170002AB")]
		public bool AllowComments
		{
			[Token(Token = "0x600175D")]
			[Address(RVA = "0xAD5798", Offset = "0xAD5798", VA = "0xAD5798")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600175E")]
			[Address(RVA = "0xAD57A0", Offset = "0xAD57A0", VA = "0xAD57A0")]
			set
			{
			}
		}

		[Token(Token = "0x170002AC")]
		public bool AllowSingleQuotedStrings
		{
			[Token(Token = "0x600175F")]
			[Address(RVA = "0xAD57AC", Offset = "0xAD57AC", VA = "0xAD57AC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001760")]
			[Address(RVA = "0xAD57B4", Offset = "0xAD57B4", VA = "0xAD57B4")]
			set
			{
			}
		}

		[Token(Token = "0x170002AD")]
		public bool EndOfInput
		{
			[Token(Token = "0x6001761")]
			[Address(RVA = "0xAD57C0", Offset = "0xAD57C0", VA = "0xAD57C0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002AE")]
		public int Token
		{
			[Token(Token = "0x6001762")]
			[Address(RVA = "0xAD57C8", Offset = "0xAD57C8", VA = "0xAD57C8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170002AF")]
		public string StringValue
		{
			[Token(Token = "0x6001763")]
			[Address(RVA = "0xAD57D0", Offset = "0xAD57D0", VA = "0xAD57D0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001764")]
		[Address(RVA = "0xAD57D8", Offset = "0xAD57D8", VA = "0xAD57D8")]
		static Lexer()
		{
		}

		[Token(Token = "0x6001765")]
		[Address(RVA = "0xAD6210", Offset = "0xAD6210", VA = "0xAD6210")]
		public Lexer(TextReader reader)
		{
		}

		[Token(Token = "0x6001766")]
		[Address(RVA = "0xAD62DC", Offset = "0xAD62DC", VA = "0xAD62DC")]
		private static int HexValue(int digit)
		{
			return default(int);
		}

		[Token(Token = "0x6001767")]
		[Address(RVA = "0xAD57DC", Offset = "0xAD57DC", VA = "0xAD57DC")]
		private static void PopulateFsmTables()
		{
		}

		[Token(Token = "0x6001768")]
		[Address(RVA = "0xAD648C", Offset = "0xAD648C", VA = "0xAD648C")]
		private static char ProcessEscChar(int esc_char)
		{
			return default(char);
		}

		[Token(Token = "0x6001769")]
		[Address(RVA = "0xAD657C", Offset = "0xAD657C", VA = "0xAD657C")]
		private static bool State1(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x600176A")]
		[Address(RVA = "0xAD6780", Offset = "0xAD6780", VA = "0xAD6780")]
		private static bool State2(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x600176B")]
		[Address(RVA = "0xAD6824", Offset = "0xAD6824", VA = "0xAD6824")]
		private static bool State3(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x600176C")]
		[Address(RVA = "0xAD6960", Offset = "0xAD6960", VA = "0xAD6960")]
		private static bool State4(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x600176D")]
		[Address(RVA = "0xAD6A5C", Offset = "0xAD6A5C", VA = "0xAD6A5C")]
		private static bool State5(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x600176E")]
		[Address(RVA = "0xAD6ADC", Offset = "0xAD6ADC", VA = "0xAD6ADC")]
		private static bool State6(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x600176F")]
		[Address(RVA = "0xAD6BD8", Offset = "0xAD6BD8", VA = "0xAD6BD8")]
		private static bool State7(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x6001770")]
		[Address(RVA = "0xAD6C6C", Offset = "0xAD6C6C", VA = "0xAD6C6C")]
		private static bool State8(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x6001771")]
		[Address(RVA = "0xAD6D28", Offset = "0xAD6D28", VA = "0xAD6D28")]
		private static bool State9(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x6001772")]
		[Address(RVA = "0xAD6D94", Offset = "0xAD6D94", VA = "0xAD6D94")]
		private static bool State10(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x6001773")]
		[Address(RVA = "0xAD6E00", Offset = "0xAD6E00", VA = "0xAD6E00")]
		private static bool State11(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x6001774")]
		[Address(RVA = "0xAD6E6C", Offset = "0xAD6E6C", VA = "0xAD6E6C")]
		private static bool State12(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x6001775")]
		[Address(RVA = "0xAD6ED8", Offset = "0xAD6ED8", VA = "0xAD6ED8")]
		private static bool State13(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x6001776")]
		[Address(RVA = "0xAD6F44", Offset = "0xAD6F44", VA = "0xAD6F44")]
		private static bool State14(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x6001777")]
		[Address(RVA = "0xAD6FB0", Offset = "0xAD6FB0", VA = "0xAD6FB0")]
		private static bool State15(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x6001778")]
		[Address(RVA = "0xAD701C", Offset = "0xAD701C", VA = "0xAD701C")]
		private static bool State16(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x6001779")]
		[Address(RVA = "0xAD7088", Offset = "0xAD7088", VA = "0xAD7088")]
		private static bool State17(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x600177A")]
		[Address(RVA = "0xAD70F4", Offset = "0xAD70F4", VA = "0xAD70F4")]
		private static bool State18(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x600177B")]
		[Address(RVA = "0xAD7160", Offset = "0xAD7160", VA = "0xAD7160")]
		private static bool State19(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x600177C")]
		[Address(RVA = "0xAD7208", Offset = "0xAD7208", VA = "0xAD7208")]
		private static bool State20(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x600177D")]
		[Address(RVA = "0xAD7274", Offset = "0xAD7274", VA = "0xAD7274")]
		private static bool State21(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x600177E")]
		[Address(RVA = "0xAD73AC", Offset = "0xAD73AC", VA = "0xAD73AC")]
		private static bool State22(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x600177F")]
		[Address(RVA = "0xAD7528", Offset = "0xAD7528", VA = "0xAD7528")]
		private static bool State23(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x6001780")]
		[Address(RVA = "0xAD75D0", Offset = "0xAD75D0", VA = "0xAD75D0")]
		private static bool State24(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x6001781")]
		[Address(RVA = "0xAD7644", Offset = "0xAD7644", VA = "0xAD7644")]
		private static bool State25(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x6001782")]
		[Address(RVA = "0xAD76C0", Offset = "0xAD76C0", VA = "0xAD76C0")]
		private static bool State26(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x6001783")]
		[Address(RVA = "0xAD7728", Offset = "0xAD7728", VA = "0xAD7728")]
		private static bool State27(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x6001784")]
		[Address(RVA = "0xAD7790", Offset = "0xAD7790", VA = "0xAD7790")]
		private static bool State28(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x6001785")]
		[Address(RVA = "0xAD6754", Offset = "0xAD6754", VA = "0xAD6754")]
		private bool GetChar()
		{
			return default(bool);
		}

		[Token(Token = "0x6001786")]
		[Address(RVA = "0xAD7808", Offset = "0xAD7808", VA = "0xAD7808")]
		private int NextChar()
		{
			return default(int);
		}

		[Token(Token = "0x6001787")]
		[Address(RVA = "0xAD7840", Offset = "0xAD7840", VA = "0xAD7840")]
		public bool NextToken()
		{
			return default(bool);
		}

		[Token(Token = "0x6001788")]
		[Address(RVA = "0xAD6954", Offset = "0xAD6954", VA = "0xAD6954")]
		private void UngetChar()
		{
		}
	}
	[Token(Token = "0x200041E")]
	internal enum ParserToken
	{
		[Token(Token = "0x4001A83")]
		None = 65536,
		[Token(Token = "0x4001A84")]
		Number,
		[Token(Token = "0x4001A85")]
		True,
		[Token(Token = "0x4001A86")]
		False,
		[Token(Token = "0x4001A87")]
		Null,
		[Token(Token = "0x4001A88")]
		CharSeq,
		[Token(Token = "0x4001A89")]
		Char,
		[Token(Token = "0x4001A8A")]
		Text,
		[Token(Token = "0x4001A8B")]
		Object,
		[Token(Token = "0x4001A8C")]
		ObjectPrime,
		[Token(Token = "0x4001A8D")]
		Pair,
		[Token(Token = "0x4001A8E")]
		PairRest,
		[Token(Token = "0x4001A8F")]
		Array,
		[Token(Token = "0x4001A90")]
		ArrayPrime,
		[Token(Token = "0x4001A91")]
		Value,
		[Token(Token = "0x4001A92")]
		ValueRest,
		[Token(Token = "0x4001A93")]
		String,
		[Token(Token = "0x4001A94")]
		End,
		[Token(Token = "0x4001A95")]
		Epsilon
	}
}
namespace DeadSecond
{
	[Token(Token = "0x200041F")]
	public class TextWriter : MonoBehaviour
	{
		[Token(Token = "0x2000420")]
		[CompilerGenerated]
		private sealed class <WriteRoutine>d__12 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001A9E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001A9F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001AA0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TextWriter <>4__this;

			[Token(Token = "0x4001AA1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <numCharacters>5__2;

			[Token(Token = "0x4001AA2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private int <index>5__3;

			[Token(Token = "0x170002B0")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001796")]
				[Address(RVA = "0xAD7DE4", Offset = "0xAD7DE4", VA = "0xAD7DE4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002B1")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001798")]
				[Address(RVA = "0xAD7E2C", Offset = "0xAD7E2C", VA = "0xAD7E2C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001793")]
			[Address(RVA = "0xAD7CBC", Offset = "0xAD7CBC", VA = "0xAD7CBC")]
			[DebuggerHidden]
			public <WriteRoutine>d__12(int <>1__state)
			{
			}

			[Token(Token = "0x6001794")]
			[Address(RVA = "0xAD7CF8", Offset = "0xAD7CF8", VA = "0xAD7CF8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001795")]
			[Address(RVA = "0xAD7CFC", Offset = "0xAD7CFC", VA = "0xAD7CFC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001797")]
			[Address(RVA = "0xAD7DEC", Offset = "0xAD7DEC", VA = "0xAD7DEC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001A96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Events")]
		public UnityEvent onEnd;

		[Token(Token = "0x4001A97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float characterdelay;

		[Token(Token = "0x4001A98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool playOnEnable;

		[Token(Token = "0x4001A99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TextMeshProUGUI text;

		[Token(Token = "0x4001A9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private WaitForSeconds delayWait;

		[Token(Token = "0x4001A9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string initString;

		[Token(Token = "0x4001A9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool initialised;

		[Token(Token = "0x4001A9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		private bool printing;

		[Token(Token = "0x600178D")]
		[Address(RVA = "0xAD7A64", Offset = "0xAD7A64", VA = "0xAD7A64")]
		private void Initialise()
		{
		}

		[Token(Token = "0x600178E")]
		[Address(RVA = "0xAD7B9C", Offset = "0xAD7B9C", VA = "0xAD7B9C")]
		private void Awake()
		{
		}

		[Token(Token = "0x600178F")]
		[Address(RVA = "0xAD7BA0", Offset = "0xAD7BA0", VA = "0xAD7BA0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001790")]
		[Address(RVA = "0xAD7C18", Offset = "0xAD7C18", VA = "0xAD7C18")]
		public void WriteText()
		{
		}

		[Token(Token = "0x6001791")]
		[Address(RVA = "0xAD7C54", Offset = "0xAD7C54", VA = "0xAD7C54")]
		[IteratorStateMachine(typeof(<WriteRoutine>d__12))]
		public IEnumerator WriteRoutine()
		{
			return null;
		}

		[Token(Token = "0x6001792")]
		[Address(RVA = "0xAD7CE4", Offset = "0xAD7CE4", VA = "0xAD7CE4")]
		public TextWriter()
		{
		}
	}
}
namespace MiniJSON
{
	[Token(Token = "0x2000421")]
	public static class Json
	{
		[Token(Token = "0x2000422")]
		private sealed class Parser : IDisposable
		{
			[Token(Token = "0x2000423")]
			private enum TOKEN
			{
				[Token(Token = "0x4001AA7")]
				NONE,
				[Token(Token = "0x4001AA8")]
				CURLY_OPEN,
				[Token(Token = "0x4001AA9")]
				CURLY_CLOSE,
				[Token(Token = "0x4001AAA")]
				SQUARED_OPEN,
				[Token(Token = "0x4001AAB")]
				SQUARED_CLOSE,
				[Token(Token = "0x4001AAC")]
				COLON,
				[Token(Token = "0x4001AAD")]
				COMMA,
				[Token(Token = "0x4001AAE")]
				STRING,
				[Token(Token = "0x4001AAF")]
				NUMBER,
				[Token(Token = "0x4001AB0")]
				TRUE,
				[Token(Token = "0x4001AB1")]
				FALSE,
				[Token(Token = "0x4001AB2")]
				NULL
			}

			[Token(Token = "0x4001AA3")]
			private const string WORD_BREAK = "{}[],:\"";

			[Token(Token = "0x4001AA4")]
			private const string HEX_DIGIT = "0123456789ABCDEFabcdef";

			[Token(Token = "0x4001AA5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private StringReader json;

			[Token(Token = "0x170002B2")]
			private char PeekChar
			{
				[Token(Token = "0x60017A7")]
				[Address(RVA = "0xAD8CE8", Offset = "0xAD8CE8", VA = "0xAD8CE8")]
				get
				{
					return default(char);
				}
			}

			[Token(Token = "0x170002B3")]
			private char NextChar
			{
				[Token(Token = "0x60017A8")]
				[Address(RVA = "0xAD8B20", Offset = "0xAD8B20", VA = "0xAD8B20")]
				get
				{
					return default(char);
				}
			}

			[Token(Token = "0x170002B4")]
			private string NextWord
			{
				[Token(Token = "0x60017A9")]
				[Address(RVA = "0xAD8B98", Offset = "0xAD8B98", VA = "0xAD8B98")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002B5")]
			private TOKEN NextToken
			{
				[Token(Token = "0x60017AA")]
				[Address(RVA = "0xAD835C", Offset = "0xAD835C", VA = "0xAD835C")]
				get
				{
					return default(TOKEN);
				}
			}

			[Token(Token = "0x600179B")]
			[Address(RVA = "0xAD8054", Offset = "0xAD8054", VA = "0xAD8054")]
			public static bool IsWordBreak(char c)
			{
				return default(bool);
			}

			[Token(Token = "0x600179C")]
			[Address(RVA = "0xAD80F0", Offset = "0xAD80F0", VA = "0xAD80F0")]
			public static bool IsHexDigit(char c)
			{
				return default(bool);
			}

			[Token(Token = "0x600179D")]
			[Address(RVA = "0xAD8150", Offset = "0xAD8150", VA = "0xAD8150")]
			private Parser(string jsonString)
			{
			}

			[Token(Token = "0x600179E")]
			[Address(RVA = "0xAD7E40", Offset = "0xAD7E40", VA = "0xAD7E40")]
			public static object Parse(string jsonString)
			{
				return null;
			}

			[Token(Token = "0x600179F")]
			[Address(RVA = "0xAD81E8", Offset = "0xAD81E8", VA = "0xAD81E8", Slot = "4")]
			public void Dispose()
			{
			}

			[Token(Token = "0x60017A0")]
			[Address(RVA = "0xAD8210", Offset = "0xAD8210", VA = "0xAD8210")]
			private Dictionary<string, object> ParseObject()
			{
				return null;
			}

			[Token(Token = "0x60017A1")]
			[Address(RVA = "0xAD8890", Offset = "0xAD8890", VA = "0xAD8890")]
			private List<object> ParseArray()
			{
				return null;
			}

			[Token(Token = "0x60017A2")]
			[Address(RVA = "0xAD81CC", Offset = "0xAD81CC", VA = "0xAD81CC")]
			private object ParseValue()
			{
				return null;
			}

			[Token(Token = "0x60017A3")]
			[Address(RVA = "0xAD87A8", Offset = "0xAD87A8", VA = "0xAD87A8")]
			private object ParseByToken(TOKEN token)
			{
				return null;
			}

			[Token(Token = "0x60017A4")]
			[Address(RVA = "0xAD8520", Offset = "0xAD8520", VA = "0xAD8520")]
			private string ParseString()
			{
				return null;
			}

			[Token(Token = "0x60017A5")]
			[Address(RVA = "0xAD89CC", Offset = "0xAD89CC", VA = "0xAD89CC")]
			private object ParseNumber()
			{
				return null;
			}

			[Token(Token = "0x60017A6")]
			[Address(RVA = "0xAD8C44", Offset = "0xAD8C44", VA = "0xAD8C44")]
			private void EatWhitespace()
			{
			}
		}

		[Token(Token = "0x2000424")]
		private sealed class Serializer
		{
			[Token(Token = "0x4001AB3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private StringBuilder builder;

			[Token(Token = "0x60017AB")]
			[Address(RVA = "0xAD8D60", Offset = "0xAD8D60", VA = "0xAD8D60")]
			private Serializer()
			{
			}

			[Token(Token = "0x60017AC")]
			[Address(RVA = "0xAD7FE0", Offset = "0xAD7FE0", VA = "0xAD7FE0")]
			public static string Serialize(object obj)
			{
				return null;
			}

			[Token(Token = "0x60017AD")]
			[Address(RVA = "0xAD8DCC", Offset = "0xAD8DCC", VA = "0xAD8DCC")]
			private void SerializeValue(object value)
			{
			}

			[Token(Token = "0x60017AE")]
			[Address(RVA = "0xAD93E8", Offset = "0xAD93E8", VA = "0xAD93E8")]
			private void SerializeObject(IDictionary obj)
			{
			}

			[Token(Token = "0x60017AF")]
			[Address(RVA = "0xAD9258", Offset = "0xAD9258", VA = "0xAD9258")]
			private void SerializeArray(IList anArray)
			{
			}

			[Token(Token = "0x60017B0")]
			[Address(RVA = "0xAD8F9C", Offset = "0xAD8F9C", VA = "0xAD8F9C")]
			private void SerializeString(string str)
			{
			}

			[Token(Token = "0x60017B1")]
			[Address(RVA = "0xAD9874", Offset = "0xAD9874", VA = "0xAD9874")]
			private void SerializeOther(object value)
			{
			}
		}

		[Token(Token = "0x6001799")]
		[Address(RVA = "0xAD7E34", Offset = "0xAD7E34", VA = "0xAD7E34")]
		public static object Deserialize(string json)
		{
			return null;
		}

		[Token(Token = "0x600179A")]
		[Address(RVA = "0xAD7FDC", Offset = "0xAD7FDC", VA = "0xAD7FDC")]
		public static string Serialize(object obj)
		{
			return null;
		}
	}
}
namespace Spunge
{
	[Token(Token = "0x2000425")]
	public class LaserPointer : MonoBehaviour
	{
		[Token(Token = "0x4001AB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LayerMask castLayer;

		[Token(Token = "0x4001AB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int maxLength;

		[Token(Token = "0x4001AB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float projectileRadius;

		[Token(Token = "0x4001AB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<Vector3> contacts;

		[Token(Token = "0x4001AB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int maxHits;

		[Token(Token = "0x4001AB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform xForm;

		[Token(Token = "0x4001ABA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public LineRenderer line;

		[Token(Token = "0x4001ABB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool sphereCast;

		[Token(Token = "0x4001ABC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		public bool lastShot;

		[Token(Token = "0x4001ABD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
		public bool showReflections;

		[Token(Token = "0x4001ABE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Gun gun;

		[Token(Token = "0x4001ABF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private RaycastHit hitInfo;

		[Token(Token = "0x4001AC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public float remainingLength;

		[Token(Token = "0x4001AC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Rigidbody targetBody;

		[Token(Token = "0x4001AC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float targetBodyDistance;

		[Token(Token = "0x4001AC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public Vector3 targetBodyContactPoint;

		[Token(Token = "0x4001AC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private int reflections;

		[Token(Token = "0x4001AC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private int maxRelfections;

		[Token(Token = "0x4001AC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Vector3[] points;

		[Token(Token = "0x60017B2")]
		[Address(RVA = "0xAD9B44", Offset = "0xAD9B44", VA = "0xAD9B44")]
		public void Initialise(Gun gun)
		{
		}

		[Token(Token = "0x60017B3")]
		[Address(RVA = "0xAD9C90", Offset = "0xAD9C90", VA = "0xAD9C90")]
		public void MainUpdate()
		{
		}

		[Token(Token = "0x60017B4")]
		[Address(RVA = "0xAD9D28", Offset = "0xAD9D28", VA = "0xAD9D28")]
		private void CreatePointsRayCast()
		{
		}

		[Token(Token = "0x60017B5")]
		[Address(RVA = "0xADA1A4", Offset = "0xADA1A4", VA = "0xADA1A4")]
		private void UpdateTrail()
		{
		}

		[Token(Token = "0x60017B6")]
		[Address(RVA = "0xADA25C", Offset = "0xADA25C", VA = "0xADA25C")]
		private void AddPoint(Vector3 point)
		{
		}

		[Token(Token = "0x60017B7")]
		[Address(RVA = "0xADA334", Offset = "0xADA334", VA = "0xADA334")]
		public LaserPointer()
		{
		}
	}
	[Token(Token = "0x2000426")]
	public class Interactable : MonoBehaviour
	{
		[Token(Token = "0x2000427")]
		[CompilerGenerated]
		private sealed class <MoveToXForm>d__19 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001AD4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001AD5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001AD6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Interactable <>4__this;

			[Token(Token = "0x4001AD7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float duration;

			[Token(Token = "0x4001AD8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public Vector3 startPos;

			[Token(Token = "0x4001AD9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Transform targetXForm;

			[Token(Token = "0x4001ADA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private float <time>5__2;

			[Token(Token = "0x4001ADB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			private float <lerp>5__3;

			[Token(Token = "0x170002B7")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60017C3")]
				[Address(RVA = "0xADACD0", Offset = "0xADACD0", VA = "0xADACD0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002B8")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60017C5")]
				[Address(RVA = "0xADAD18", Offset = "0xADAD18", VA = "0xADAD18", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60017C0")]
			[Address(RVA = "0xADA9FC", Offset = "0xADA9FC", VA = "0xADA9FC")]
			[DebuggerHidden]
			public <MoveToXForm>d__19(int <>1__state)
			{
			}

			[Token(Token = "0x60017C1")]
			[Address(RVA = "0xADAA40", Offset = "0xADAA40", VA = "0xADAA40", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60017C2")]
			[Address(RVA = "0xADAA44", Offset = "0xADAA44", VA = "0xADAA44", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60017C4")]
			[Address(RVA = "0xADACD8", Offset = "0xADACD8", VA = "0xADACD8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001AC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform xForm;

		[Token(Token = "0x4001AC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float moveDuration;

		[Token(Token = "0x4001AC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float returnDuration;

		[Token(Token = "0x4001ACA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int slotIndex;

		[Token(Token = "0x4001ACB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool isGun;

		[Token(Token = "0x4001ACC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GunInfo gunInfo;

		[Token(Token = "0x4001ACD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool held;

		[Token(Token = "0x4001ACE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public HandType heldByHand;

		[Token(Token = "0x4001ACF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform originalParent;

		[Token(Token = "0x4001AD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public InteractableSlot slot;

		[Token(Token = "0x4001AD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public List<Collider> collision;

		[Token(Token = "0x4001AD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public UnityAction<Interactable, bool> transitionComplete;

		[Token(Token = "0x4001AD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool _moving;

		[Token(Token = "0x170002B6")]
		public bool moving
		{
			[Token(Token = "0x60017BC")]
			[Address(RVA = "0xADA9F4", Offset = "0xADA9F4", VA = "0xADA9F4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60017B8")]
		[Address(RVA = "0xADA3A4", Offset = "0xADA3A4", VA = "0xADA3A4")]
		private void Awake()
		{
		}

		[Token(Token = "0x60017B9")]
		[Address(RVA = "0xADA574", Offset = "0xADA574", VA = "0xADA574")]
		public void SetCollisionState(bool state)
		{
		}

		[Token(Token = "0x60017BA")]
		[Address(RVA = "0xADA6CC", Offset = "0xADA6CC", VA = "0xADA6CC")]
		public void ReturnToParent(bool immediate = false)
		{
		}

		[Token(Token = "0x60017BB")]
		[Address(RVA = "0xADA98C", Offset = "0xADA98C", VA = "0xADA98C")]
		public void ReparentToTransform(Transform newParent)
		{
		}

		[Token(Token = "0x60017BD")]
		[Address(RVA = "0xADA8EC", Offset = "0xADA8EC", VA = "0xADA8EC")]
		[IteratorStateMachine(typeof(<MoveToXForm>d__19))]
		private IEnumerator MoveToXForm(Vector3 startPos, Transform targetXForm, float duration)
		{
			return null;
		}

		[Token(Token = "0x60017BE")]
		[Address(RVA = "0xADA7E4", Offset = "0xADA7E4", VA = "0xADA7E4")]
		private void SnapToXForm(Vector3 startPos, Transform targetXForm)
		{
		}

		[Token(Token = "0x60017BF")]
		[Address(RVA = "0xADAA24", Offset = "0xADAA24", VA = "0xADAA24")]
		public Interactable()
		{
		}
	}
}
namespace PWCommon2
{
	[Token(Token = "0x2000428")]
	public class AppConfig
	{
		[Token(Token = "0x4001ADC")]
		public const string VERSION = "1";

		[Token(Token = "0x4001ADD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string CfgVersion;

		[Token(Token = "0x4001ADE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly double LastUpdated;

		[Token(Token = "0x4001ADF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly string MinUnity;

		[Token(Token = "0x4001AE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly string Name;

		[Token(Token = "0x4001AE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public readonly Texture2D Logo;

		[Token(Token = "0x4001AE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public readonly string NameSpace;

		[Token(Token = "0x4001AE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public readonly string Folder;

		[Token(Token = "0x4001AE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public readonly string ScriptsFolder;

		[Token(Token = "0x4001AE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public readonly string EditorScriptsFolder;

		[Token(Token = "0x4001AE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public readonly string DocsFolder;

		[Token(Token = "0x4001AE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public readonly string DocsFolderSpaced;

		[Token(Token = "0x4001AE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public readonly string MajorVersion;

		[Token(Token = "0x4001AE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public readonly string MinorVersion;

		[Token(Token = "0x4001AEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public readonly string PatchVersion;

		[Token(Token = "0x4001AEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public readonly string Version;

		[Token(Token = "0x4001AEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public readonly SystemLanguage[] AvailableLanguages;

		[Token(Token = "0x4001AED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public readonly string TutorialsLink;

		[Token(Token = "0x4001AEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public readonly string DiscordLink;

		[Token(Token = "0x4001AEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public readonly string SupportLink;

		[Token(Token = "0x4001AF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public readonly string ASLink;

		[Token(Token = "0x4001AF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public readonly string NewsURLStripped;

		[Token(Token = "0x4001AF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public readonly bool HasWelcome;

		[Token(Token = "0x170002B9")]
		public string NewsURL
		{
			[Token(Token = "0x60017C6")]
			[Address(RVA = "0xADAD20", Offset = "0xADAD20", VA = "0xADAD20")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60017C7")]
		[Address(RVA = "0xADAE98", Offset = "0xADAE98", VA = "0xADAE98")]
		public AppConfig(string minUnity, string name, SystemLanguage[] availableLanguages)
		{
		}

		[Token(Token = "0x60017C8")]
		[Address(RVA = "0xADB1B4", Offset = "0xADB1B4", VA = "0xADB1B4")]
		public AppConfig(string cfgVersion, double lastUpdated, string minUnity, string name, Texture2D logo, string nameSpace, string folder, string scriptsFolder, string editorScriptsFolder, string docsFolder, string majorVer, string minorVer, string patchVer, SystemLanguage[] availableLang, string tutorialsLink, string discordLink, string supportLink, string asLink, string newsURL, bool hasWelcome)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000429")]
	public class DropStack<T> : ISerializationCallbackReceiver
	{
		[NonSerialized]
		[Token(Token = "0x4001AF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected T[] m_items;

		[Token(Token = "0x4001AF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		protected int m_topIndex;

		[Token(Token = "0x4001AF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		protected int m_count;

		[Token(Token = "0x4001AF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		protected bool _nullableType;

		[Token(Token = "0x4001AF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		private int _capacity;

		[Token(Token = "0x4001AF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		private T[] _activeItems;

		[Token(Token = "0x170002BA")]
		public int Capacity
		{
			[Token(Token = "0x60017C9")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170002BB")]
		public int Count
		{
			[Token(Token = "0x60017CA")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60017CB")]
		private DropStack()
		{
		}

		[Token(Token = "0x60017CC")]
		public DropStack(int capacity)
		{
		}

		[Token(Token = "0x60017CD")]
		public DropStack(int capacity, List<T> items)
		{
		}

		[Token(Token = "0x60017CE")]
		public DropStack(int capacity, T[] items)
		{
		}

		[Token(Token = "0x60017CF")]
		public void Push(T item)
		{
		}

		[Token(Token = "0x60017D0")]
		public void Push(IEnumerable<T> items)
		{
		}

		[Token(Token = "0x60017D1")]
		public T Pop()
		{
			return (T)null;
		}

		[Token(Token = "0x60017D2")]
		public T Peek()
		{
			return (T)null;
		}

		[Token(Token = "0x60017D3")]
		public List<T> ToList()
		{
			return null;
		}

		[Token(Token = "0x60017D4")]
		public T[] ToArray()
		{
			return null;
		}

		[Token(Token = "0x60017D5")]
		public void OnBeforeSerialize()
		{
		}

		[Token(Token = "0x60017D6")]
		public void OnAfterDeserialize()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200042A")]
	public class UBrush
	{
		[Token(Token = "0x4001AF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private int m_size;

		[Token(Token = "0x4001AFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float[] m_strength;

		[Token(Token = "0x4001AFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Texture2D m_brush;

		[Token(Token = "0x4001AFC")]
		private const int MIN_BRUSH_SIZE = 3;

		[Token(Token = "0x170002BC")]
		private int Size
		{
			[Token(Token = "0x60017D7")]
			[Address(RVA = "0xADB444", Offset = "0xADB444", VA = "0xADB444")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60017D8")]
		[Address(RVA = "0xADB44C", Offset = "0xADB44C", VA = "0xADB44C")]
		public static UBrush GetBrush(Texture2D brushTexture, int size)
		{
			return null;
		}

		[Token(Token = "0x60017D9")]
		[Address(RVA = "0xADB774", Offset = "0xADB774", VA = "0xADB774")]
		public UBrush GetInSize(int size)
		{
			return null;
		}

		[Token(Token = "0x60017DA")]
		[Address(RVA = "0xADB574", Offset = "0xADB574", VA = "0xADB574")]
		public bool Load(Texture2D brushTex, int size)
		{
			return default(bool);
		}

		[Token(Token = "0x60017DB")]
		[Address(RVA = "0xADB894", Offset = "0xADB894", VA = "0xADB894")]
		public float GetStrengthAtCoords(int ix, int iy)
		{
			return default(float);
		}

		[Token(Token = "0x60017DC")]
		[Address(RVA = "0xADB56C", Offset = "0xADB56C", VA = "0xADB56C")]
		public UBrush()
		{
		}
	}
	[Token(Token = "0x200042B")]
	public class Utils : MonoBehaviour
	{
		[Token(Token = "0x60017DD")]
		[Address(RVA = "0xADB8E8", Offset = "0xADB8E8", VA = "0xADB8E8")]
		public static string FixFileName(string sourceFileName)
		{
			return null;
		}

		[Token(Token = "0x60017DE")]
		[Address(RVA = "0xADB9D0", Offset = "0xADB9D0", VA = "0xADB9D0")]
		public static FileStream OpenRead(string path)
		{
			return null;
		}

		[Token(Token = "0x60017DF")]
		[Address(RVA = "0xADBA40", Offset = "0xADBA40", VA = "0xADBA40")]
		public static string ReadAllText(string path)
		{
			return null;
		}

		[Token(Token = "0x60017E0")]
		[Address(RVA = "0xADBC88", Offset = "0xADBC88", VA = "0xADBC88")]
		public static void WriteAllText(string path, string contents)
		{
		}

		[Token(Token = "0x60017E1")]
		[Address(RVA = "0xADBF00", Offset = "0xADBF00", VA = "0xADBF00")]
		public static byte[] ReadAllBytes(string path)
		{
			return null;
		}

		[Token(Token = "0x60017E2")]
		[Address(RVA = "0xADC1C4", Offset = "0xADC1C4", VA = "0xADC1C4")]
		public static void WriteAllBytes(string path, byte[] bytes)
		{
		}

		[Token(Token = "0x60017E3")]
		[Address(RVA = "0xADC360", Offset = "0xADC360", VA = "0xADC360")]
		public static string GetEditorScriptsPath(AppConfig appConfig)
		{
			return null;
		}

		[Token(Token = "0x60017E4")]
		[Address(RVA = "0xADC380", Offset = "0xADC380", VA = "0xADC380")]
		public static string GetAppsSubfolder(string appFolder, string subfolderPath)
		{
			return null;
		}

		[Token(Token = "0x60017E5")]
		[Address(RVA = "0xADC83C", Offset = "0xADC83C", VA = "0xADC83C")]
		public static bool Math_ApproximatelyEqual(float a, float b, float threshold)
		{
			return default(bool);
		}

		[Token(Token = "0x60017E6")]
		[Address(RVA = "0xADC85C", Offset = "0xADC85C", VA = "0xADC85C")]
		public static bool Math_ApproximatelyEqual(float a, float b)
		{
			return default(bool);
		}

		[Token(Token = "0x60017E7")]
		[Address(RVA = "0xADC884", Offset = "0xADC884", VA = "0xADC884")]
		public static bool Math_IsPowerOf2(int value)
		{
			return default(bool);
		}

		[Token(Token = "0x60017E8")]
		[Address(RVA = "0xADC894", Offset = "0xADC894", VA = "0xADC894")]
		public static float Math_Clamp(float min, float max, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60017E9")]
		[Address(RVA = "0xADC8A8", Offset = "0xADC8A8", VA = "0xADC8A8")]
		public static float Math_Modulo(float value, float mod)
		{
			return default(float);
		}

		[Token(Token = "0x60017EA")]
		[Address(RVA = "0xADC914", Offset = "0xADC914", VA = "0xADC914")]
		public static int Math_Modulo(int value, int mod)
		{
			return default(int);
		}

		[Token(Token = "0x60017EB")]
		[Address(RVA = "0xADC9A0", Offset = "0xADC9A0", VA = "0xADC9A0")]
		public static float Math_InterpolateLinear(float value1, float value2, float fraction)
		{
			return default(float);
		}

		[Token(Token = "0x60017EC")]
		[Address(RVA = "0xADC9B8", Offset = "0xADC9B8", VA = "0xADC9B8")]
		public static float Math_InterpolateSmooth(float value1, float value2, float fraction)
		{
			return default(float);
		}

		[Token(Token = "0x60017ED")]
		[Address(RVA = "0xADCA00", Offset = "0xADCA00", VA = "0xADCA00")]
		public static float Math_Distance(float x1, float y1, float x2, float y2)
		{
			return default(float);
		}

		[Token(Token = "0x60017EE")]
		[Address(RVA = "0xADCA1C", Offset = "0xADCA1C", VA = "0xADCA1C")]
		public static float Math_InterpolateSmooth2(float v1, float v2, float fraction)
		{
			return default(float);
		}

		[Token(Token = "0x60017EF")]
		[Address(RVA = "0xADCA50", Offset = "0xADCA50", VA = "0xADCA50")]
		public static float Math_InterpolateCubic(float v0, float v1, float v2, float v3, float fraction)
		{
			return default(float);
		}

		[Token(Token = "0x60017F0")]
		[Address(RVA = "0xADCA88", Offset = "0xADCA88", VA = "0xADCA88")]
		public static Vector3 RotatePointAroundPivot(Vector3 point, Vector3 pivot, Vector3 angle)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60017F1")]
		[Address(RVA = "0xADCB08", Offset = "0xADCB08", VA = "0xADCB08")]
		public static Vector3 GetNearestVertice(Vector3 sourcePosition, GameObject targetObject)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60017F2")]
		[Address(RVA = "0xADCE18", Offset = "0xADCE18", VA = "0xADCE18")]
		public static int GetFrapoch()
		{
			return default(int);
		}

		[Token(Token = "0x60017F3")]
		[Address(RVA = "0xADCED0", Offset = "0xADCED0", VA = "0xADCED0")]
		public static int TimeToFrapoch(DateTime time)
		{
			return default(int);
		}

		[Token(Token = "0x60017F4")]
		[Address(RVA = "0xADCF7C", Offset = "0xADCF7C", VA = "0xADCF7C")]
		public static DateTime FrapochToLocalDate(int seconds)
		{
			return default(DateTime);
		}

		[Token(Token = "0x60017F5")]
		[Address(RVA = "0xADCF84", Offset = "0xADCF84", VA = "0xADCF84")]
		public static DateTime FrapochToLocalDate(double seconds)
		{
			return default(DateTime);
		}

		[Token(Token = "0x60017F6")]
		[Address(RVA = "0xADCFF8", Offset = "0xADCFF8", VA = "0xADCFF8")]
		public static bool IsInLayerMask(GameObject obj, LayerMask mask)
		{
			return default(bool);
		}

		[Token(Token = "0x60017F7")]
		[Address(RVA = "0xADD048", Offset = "0xADD048", VA = "0xADD048")]
		public static bool IsSameTexture(Texture2D tex1, Texture2D tex2, bool checkID = false)
		{
			return default(bool);
		}

		[Token(Token = "0x60017F8")]
		[Address(RVA = "0xADD1A4", Offset = "0xADD1A4", VA = "0xADD1A4")]
		public static bool IsSameGameObject(GameObject go1, GameObject go2, bool checkID = false)
		{
			return default(bool);
		}

		[Token(Token = "0x60017F9")]
		[Address(RVA = "0xADD2AC", Offset = "0xADD2AC", VA = "0xADD2AC")]
		public static Type GetType(string TypeName)
		{
			return null;
		}

		[Token(Token = "0x60017FA")]
		[Address(RVA = "0xADD664", Offset = "0xADD664", VA = "0xADD664")]
		public Utils()
		{
		}
	}
}
namespace PWCommon2.Localization
{
	[Token(Token = "0x200042C")]
	public class LanguagePack
	{
		[Token(Token = "0x4001AFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static IDictionary<string, LanguagePack> ms_loadedPacks;

		[Token(Token = "0x4001AFE")]
		public const string VERSION = "1";

		[Token(Token = "0x4001AFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string Version;

		[Token(Token = "0x4001B00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public double LastUpdated;

		[Token(Token = "0x4001B01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<LocalizationCategory> Categories;

		[Token(Token = "0x4001B02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public IDictionary<string, LocalizationItem> Items;

		[Token(Token = "0x4001B03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private string m_path;

		[Token(Token = "0x14000020")]
		private event Action OnChange
		{
			[Token(Token = "0x6001801")]
			[Address(RVA = "0xADEDBC", Offset = "0xADEDBC", VA = "0xADEDBC")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001802")]
			[Address(RVA = "0xADEE58", Offset = "0xADEE58", VA = "0xADEE58")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x60017FB")]
		[Address(RVA = "0xADD66C", Offset = "0xADD66C", VA = "0xADD66C")]
		public LanguagePack()
		{
		}

		[Token(Token = "0x60017FC")]
		[Address(RVA = "0xADD760", Offset = "0xADD760", VA = "0xADD760")]
		public LanguagePack(LocalizationItem[] items)
		{
		}

		[Token(Token = "0x60017FD")]
		[Address(RVA = "0xADDC48", Offset = "0xADDC48", VA = "0xADDC48")]
		public LanguagePack(LocalizationCategory[] categories)
		{
		}

		[Token(Token = "0x60017FE")]
		[Address(RVA = "0xADDFA4", Offset = "0xADDFA4", VA = "0xADDFA4")]
		public static LanguagePack Load(string path)
		{
			return null;
		}

		[Token(Token = "0x60017FF")]
		[Address(RVA = "0xADE9C0", Offset = "0xADE9C0", VA = "0xADE9C0")]
		public void ReLoad()
		{
		}

		[Token(Token = "0x6001800")]
		[Address(RVA = "0xADE510", Offset = "0xADE510", VA = "0xADE510")]
		private void LoadV1(BinaryFormatter formatter, Stream stream)
		{
		}

		[Token(Token = "0x6001803")]
		[Address(RVA = "0xADEEF4", Offset = "0xADEEF4", VA = "0xADEEF4")]
		[Conditional("UNITY_EDITOR")]
		public void Validate()
		{
		}

		[Token(Token = "0x6001804")]
		[Address(RVA = "0xADEF10", Offset = "0xADEF10", VA = "0xADEF10")]
		[Conditional("UNITY_EDITOR")]
		public void AddOnChangeAction(Action action)
		{
		}

		[Token(Token = "0x6001805")]
		[Address(RVA = "0xADEF14", Offset = "0xADEF14", VA = "0xADEF14")]
		[Conditional("UNITY_EDITOR")]
		public void RemoveOnChangeAction(Action action)
		{
		}
	}
	[Token(Token = "0x200042D")]
	public class LocalizationCategory
	{
		[Token(Token = "0x4001B05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string Name;

		[Token(Token = "0x4001B06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<LocalizationItem> Items;

		[Token(Token = "0x6001807")]
		[Address(RVA = "0xADDBB8", Offset = "0xADDBB8", VA = "0xADDBB8")]
		public LocalizationCategory(string name)
		{
		}

		[Token(Token = "0x6001808")]
		[Address(RVA = "0xADEFA4", Offset = "0xADEFA4", VA = "0xADEFA4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x200042E")]
	public class LocalizationItem
	{
		[Token(Token = "0x4001B07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string Key;

		[Token(Token = "0x4001B08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string Val;

		[Token(Token = "0x4001B09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string Tooltip;

		[Token(Token = "0x4001B0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string Help;

		[Token(Token = "0x4001B0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string Context;

		[Token(Token = "0x6001809")]
		[Address(RVA = "0xADEFAC", Offset = "0xADEFAC", VA = "0xADEFAC", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x600180A")]
		[Address(RVA = "0xADED68", Offset = "0xADED68", VA = "0xADED68")]
		public LocalizationItem()
		{
		}
	}
}
namespace Pinwheel.Jupiter
{
	[Token(Token = "0x200042F")]
	public static class JCommon
	{
		[Token(Token = "0x4001B0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static string SUPPORT_EMAIL;

		[Token(Token = "0x4001B0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static string BUSINESS_EMAIL;

		[Token(Token = "0x4001B0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static string YOUTUBE_CHANNEL;

		[Token(Token = "0x4001B0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static string ONLINE_MANUAL;

		[Token(Token = "0x4001B10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static string FORUM;

		[Token(Token = "0x4001B11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static string DISCORD;

		[Token(Token = "0x4001B12")]
		public const int PREVIEW_TEXTURE_SIZE = 512;

		[Token(Token = "0x4001B13")]
		public const int TEXTURE_SIZE_MIN = 1;

		[Token(Token = "0x4001B14")]
		public const int TEXTURE_SIZE_MAX = 8192;

		[Token(Token = "0x4001B15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static Vector2[] fullRectUvPoints;

		[Token(Token = "0x4001B16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static Mesh emptyMesh;

		[Token(Token = "0x4001B17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private static Material[] emptyMaterials;

		[Token(Token = "0x170002BD")]
		public static JRenderPipelineType CurrentRenderPipeline
		{
			[Token(Token = "0x600180B")]
			[Address(RVA = "0xADEFB4", Offset = "0xADEFB4", VA = "0xADEFB4")]
			get
			{
				return default(JRenderPipelineType);
			}
		}

		[Token(Token = "0x170002BE")]
		public static Vector2[] FullRectUvPoints
		{
			[Token(Token = "0x600180C")]
			[Address(RVA = "0xADF03C", Offset = "0xADF03C", VA = "0xADF03C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002BF")]
		public static Mesh EmptyMesh
		{
			[Token(Token = "0x600180D")]
			[Address(RVA = "0xADF1F8", Offset = "0xADF1F8", VA = "0xADF1F8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002C0")]
		public static Material[] EmptyMaterials
		{
			[Token(Token = "0x600180E")]
			[Address(RVA = "0xADF2F8", Offset = "0xADF2F8", VA = "0xADF2F8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002C1")]
		public static Rect UnitRect
		{
			[Token(Token = "0x600180F")]
			[Address(RVA = "0xADF3B8", Offset = "0xADF3B8", VA = "0xADF3B8")]
			get
			{
				return default(Rect);
			}
		}

		[Token(Token = "0x6001810")]
		[Address(RVA = "0xADF3F4", Offset = "0xADF3F4", VA = "0xADF3F4")]
		public static string GetUniqueID()
		{
			return null;
		}

		[Token(Token = "0x6001811")]
		[Address(RVA = "0xADF45C", Offset = "0xADF45C", VA = "0xADF45C")]
		public static long GetTimeTick()
		{
			return default(long);
		}

		[Token(Token = "0x6001812")]
		[Address(RVA = "0xADF4C4", Offset = "0xADF4C4", VA = "0xADF4C4")]
		public static string Reverse(string s)
		{
			return null;
		}

		[Token(Token = "0x6001813")]
		[Address(RVA = "0xADF530", Offset = "0xADF530", VA = "0xADF530")]
		public static void SetDirty(UnityEngine.Object o)
		{
		}

		[Token(Token = "0x6001814")]
		[Address(RVA = "0xADF534", Offset = "0xADF534", VA = "0xADF534")]
		public static void AddObjectToAsset(UnityEngine.Object objectToAdd, UnityEngine.Object asset)
		{
		}

		[Token(Token = "0x6001815")]
		[Address(RVA = "0xADF538", Offset = "0xADF538", VA = "0xADF538")]
		public static Texture2D CreateTexture(int resolution, Color fill, TextureFormat format = TextureFormat.ARGB32)
		{
			return null;
		}

		[Token(Token = "0x6001816")]
		[Address(RVA = "0xADF674", Offset = "0xADF674", VA = "0xADF674")]
		public static void CopyToRT(Texture t, RenderTexture rt)
		{
		}

		[Token(Token = "0x6001817")]
		[Address(RVA = "0xADF6F4", Offset = "0xADF6F4", VA = "0xADF6F4")]
		public static void CopyFromRT(Texture2D t, RenderTexture rt)
		{
		}

		[Token(Token = "0x6001818")]
		[Address(RVA = "0xADF7A8", Offset = "0xADF7A8", VA = "0xADF7A8")]
		public static void CopyTexture(Texture2D src, Texture2D des)
		{
		}

		[Token(Token = "0x6001819")]
		[Address(RVA = "0xADF924", Offset = "0xADF924", VA = "0xADF924")]
		public static Texture2D CloneTexture(Texture2D t)
		{
			return null;
		}

		[Token(Token = "0x600181A")]
		[Address(RVA = "0xADFAEC", Offset = "0xADFAEC", VA = "0xADFAEC")]
		public static void FillTexture(Texture2D t, Color c)
		{
		}

		[Token(Token = "0x600181B")]
		[Address(RVA = "0xADFC04", Offset = "0xADFC04", VA = "0xADFC04")]
		public static void FillTexture(RenderTexture rt, Color c)
		{
		}

		[Token(Token = "0x600181C")]
		[Address(RVA = "0xADFD20", Offset = "0xADFD20", VA = "0xADFD20")]
		public static Texture2D CloneAndResizeTexture(Texture2D t, int width, int height)
		{
			return null;
		}

		[Token(Token = "0x600181D")]
		[Address(RVA = "0xADFE98", Offset = "0xADFE98", VA = "0xADFE98")]
		public static RenderTexture CopyToRT(Texture src, int startX, int startY, int width, int height, Color defaultColor)
		{
			return null;
		}

		[Token(Token = "0x600181E")]
		[Address(RVA = "0xAE0278", Offset = "0xAE0278", VA = "0xAE0278")]
		public static void DrawTexture(RenderTexture rt, Texture texture, Rect uvRect, Material mat, int pass = 0)
		{
		}

		[Token(Token = "0x600181F")]
		[Address(RVA = "0xAE0598", Offset = "0xAE0598", VA = "0xAE0598")]
		public static void DrawTriangle(RenderTexture rt, Vector2 v0, Vector2 v1, Vector2 v2, Color c)
		{
		}

		[Token(Token = "0x6001820")]
		[Address(RVA = "0xAE07A4", Offset = "0xAE07A4", VA = "0xAE07A4")]
		public static void DrawQuad(RenderTexture rt, Vector2[] quadCorners, Material mat, int pass)
		{
		}

		[Token(Token = "0x6001821")]
		[Address(RVA = "0xAE08DC", Offset = "0xAE08DC", VA = "0xAE08DC")]
		public static List<Type> GetAllLoadedTypes()
		{
			return null;
		}

		[Token(Token = "0x6001822")]
		[Address(RVA = "0xAE0B54", Offset = "0xAE0B54", VA = "0xAE0B54")]
		public static IEnumerable<Rect> CompareHeightMap(int gridSize, Color[] oldValues, Color[] newValues)
		{
			return null;
		}

		[Token(Token = "0x6001823")]
		[Address(RVA = "0xAE1140", Offset = "0xAE1140", VA = "0xAE1140")]
		public static Rect GetUvRange(int gridSize, int x, int z)
		{
			return default(Rect);
		}

		[Token(Token = "0x6001824")]
		[Address(RVA = "0xAE11D4", Offset = "0xAE11D4", VA = "0xAE11D4")]
		public static Texture2D CreateTextureFromCurve(AnimationCurve curve, int width, int height)
		{
			return null;
		}

		[Token(Token = "0x6001825")]
		[Address(RVA = "0xAE1394", Offset = "0xAE1394", VA = "0xAE1394")]
		public static Vector3[] GetBrushQuadCorners(Vector3 center, float radius, float rotation)
		{
			return null;
		}

		[Token(Token = "0x6001826")]
		[Address(RVA = "0xAE1558", Offset = "0xAE1558", VA = "0xAE1558")]
		public static void ClearRT(RenderTexture rt)
		{
		}

		[Token(Token = "0x6001827")]
		[Address(RVA = "0xAE1594", Offset = "0xAE1594", VA = "0xAE1594")]
		public static void SetMaterialKeywordActive(Material mat, string keyword, bool active)
		{
		}

		[Token(Token = "0x6001828")]
		[Address(RVA = "0xAE15B4", Offset = "0xAE15B4", VA = "0xAE15B4")]
		public static void Editor_ProgressBar(string title, string detail, float percent)
		{
		}

		[Token(Token = "0x6001829")]
		[Address(RVA = "0xAE15B8", Offset = "0xAE15B8", VA = "0xAE15B8")]
		public static void Editor_CancelableProgressBar(string title, string detail, float percent)
		{
		}

		[Token(Token = "0x600182A")]
		[Address(RVA = "0xAE15BC", Offset = "0xAE15BC", VA = "0xAE15BC")]
		public static void Editor_ClearProgressBar()
		{
		}

		[Token(Token = "0x600182B")]
		[Address(RVA = "0xAE15C0", Offset = "0xAE15C0", VA = "0xAE15C0")]
		public static Camera CreateCamera()
		{
			return null;
		}
	}
	[Token(Token = "0x2000430")]
	public enum JDetailOverlayLayer
	{
		[Token(Token = "0x4001B19")]
		AfterSky,
		[Token(Token = "0x4001B1A")]
		AfterStars,
		[Token(Token = "0x4001B1B")]
		AfterSun,
		[Token(Token = "0x4001B1C")]
		AfterMoon,
		[Token(Token = "0x4001B1D")]
		AfterHorizonCloud,
		[Token(Token = "0x4001B1E")]
		AfterOverheadCloud
	}
	[Token(Token = "0x2000431")]
	public enum JFogSyncOption
	{
		[Token(Token = "0x4001B20")]
		DontSync,
		[Token(Token = "0x4001B21")]
		SkyColor,
		[Token(Token = "0x4001B22")]
		HorizonColor,
		[Token(Token = "0x4001B23")]
		GroundColor,
		[Token(Token = "0x4001B24")]
		CustomColor
	}
	[Token(Token = "0x2000432")]
	public class JJupiterSettings : ScriptableObject
	{
		[Token(Token = "0x4001B25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static JJupiterSettings instance;

		[Token(Token = "0x4001B26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Material defaultSkybox;

		[Token(Token = "0x4001B27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Texture2D noiseTexture;

		[Token(Token = "0x4001B28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Texture2D cloudTexture;

		[Token(Token = "0x4001B29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private JSkyProfile defaultProfileSunnyDay;

		[Token(Token = "0x4001B2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private JSkyProfile defaultProfileStarryNight;

		[Token(Token = "0x4001B2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private JDayNightCycleProfile defaultDayNightCycleProfile;

		[Token(Token = "0x4001B2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private JInternalShaderSettings internalShaders;

		[Token(Token = "0x170002C2")]
		public static JJupiterSettings Instance
		{
			[Token(Token = "0x600182D")]
			[Address(RVA = "0xAE1740", Offset = "0xAE1740", VA = "0xAE1740")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002C3")]
		public Material DefaultSkybox
		{
			[Token(Token = "0x600182E")]
			[Address(RVA = "0xAE1864", Offset = "0xAE1864", VA = "0xAE1864")]
			get
			{
				return null;
			}
			[Token(Token = "0x600182F")]
			[Address(RVA = "0xAE186C", Offset = "0xAE186C", VA = "0xAE186C")]
			set
			{
			}
		}

		[Token(Token = "0x170002C4")]
		public Texture2D NoiseTexture
		{
			[Token(Token = "0x6001830")]
			[Address(RVA = "0xAE1874", Offset = "0xAE1874", VA = "0xAE1874")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001831")]
			[Address(RVA = "0xAE187C", Offset = "0xAE187C", VA = "0xAE187C")]
			set
			{
			}
		}

		[Token(Token = "0x170002C5")]
		public Texture2D CloudTexture
		{
			[Token(Token = "0x6001832")]
			[Address(RVA = "0xAE1884", Offset = "0xAE1884", VA = "0xAE1884")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001833")]
			[Address(RVA = "0xAE188C", Offset = "0xAE188C", VA = "0xAE188C")]
			set
			{
			}
		}

		[Token(Token = "0x170002C6")]
		public JSkyProfile DefaultProfileSunnyDay
		{
			[Token(Token = "0x6001834")]
			[Address(RVA = "0xAE1894", Offset = "0xAE1894", VA = "0xAE1894")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001835")]
			[Address(RVA = "0xAE189C", Offset = "0xAE189C", VA = "0xAE189C")]
			set
			{
			}
		}

		[Token(Token = "0x170002C7")]
		public JSkyProfile DefaultProfileStarryNight
		{
			[Token(Token = "0x6001836")]
			[Address(RVA = "0xAE18A4", Offset = "0xAE18A4", VA = "0xAE18A4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001837")]
			[Address(RVA = "0xAE18AC", Offset = "0xAE18AC", VA = "0xAE18AC")]
			set
			{
			}
		}

		[Token(Token = "0x170002C8")]
		public JDayNightCycleProfile DefaultDayNightCycleProfile
		{
			[Token(Token = "0x6001838")]
			[Address(RVA = "0xAE18B4", Offset = "0xAE18B4", VA = "0xAE18B4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001839")]
			[Address(RVA = "0xAE18BC", Offset = "0xAE18BC", VA = "0xAE18BC")]
			set
			{
			}
		}

		[Token(Token = "0x170002C9")]
		public JInternalShaderSettings InternalShaders
		{
			[Token(Token = "0x600183A")]
			[Address(RVA = "0xAE18C4", Offset = "0xAE18C4", VA = "0xAE18C4")]
			get
			{
				return default(JInternalShaderSettings);
			}
			[Token(Token = "0x600183B")]
			[Address(RVA = "0xAE18D8", Offset = "0xAE18D8", VA = "0xAE18D8")]
			set
			{
			}
		}

		[Token(Token = "0x600183C")]
		[Address(RVA = "0xAE18EC", Offset = "0xAE18EC", VA = "0xAE18EC")]
		public JJupiterSettings()
		{
		}
	}
	[Token(Token = "0x2000433")]
	public static class JMat
	{
		[Token(Token = "0x4001B2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly int NOISE_TEX;

		[Token(Token = "0x4001B2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static readonly int CLOUD_TEX;

		[Token(Token = "0x4001B2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly int SKY_COLOR;

		[Token(Token = "0x4001B30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public static readonly int HORIZON_COLOR;

		[Token(Token = "0x4001B31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly int GROUND_COLOR;

		[Token(Token = "0x4001B32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public static readonly int HORIZON_THICKNESS;

		[Token(Token = "0x4001B33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly int HORIZON_EXPONENT;

		[Token(Token = "0x4001B34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public static readonly int HORIZON_STEP;

		[Token(Token = "0x4001B35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly int FOG_COLOR;

		[Token(Token = "0x4001B36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static readonly string KW_STARS;

		[Token(Token = "0x4001B37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static readonly string KW_STARS_LAYER_0;

		[Token(Token = "0x4001B38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static readonly string KW_STARS_LAYER_1;

		[Token(Token = "0x4001B39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public static readonly string KW_STARS_LAYER_2;

		[Token(Token = "0x4001B3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static readonly int STARS_START;

		[Token(Token = "0x4001B3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public static readonly int STARS_END;

		[Token(Token = "0x4001B3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public static readonly int STARS_OPACITY;

		[Token(Token = "0x4001B3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public static readonly int STARS_COLOR_0;

		[Token(Token = "0x4001B3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public static readonly int STARS_COLOR_1;

		[Token(Token = "0x4001B3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public static readonly int STARS_COLOR_2;

		[Token(Token = "0x4001B40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public static readonly int STARS_DENSITY_0;

		[Token(Token = "0x4001B41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public static readonly int STARS_DENSITY_1;

		[Token(Token = "0x4001B42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public static readonly int STARS_DENSITY_2;

		[Token(Token = "0x4001B43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public static readonly int STARS_SIZE_0;

		[Token(Token = "0x4001B44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public static readonly int STARS_SIZE_1;

		[Token(Token = "0x4001B45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public static readonly int STARS_SIZE_2;

		[Token(Token = "0x4001B46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public static readonly int STARS_GLOW_0;

		[Token(Token = "0x4001B47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public static readonly int STARS_GLOW_1;

		[Token(Token = "0x4001B48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public static readonly int STARS_GLOW_2;

		[Token(Token = "0x4001B49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public static readonly int STARS_TWINKLE_0;

		[Token(Token = "0x4001B4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public static readonly int STARS_TWINKLE_1;

		[Token(Token = "0x4001B4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public static readonly int STARS_TWINKLE_2;

		[Token(Token = "0x4001B4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public static readonly string KW_STARS_BAKED;

		[Token(Token = "0x4001B4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public static readonly int STARS_CUBEMAP;

		[Token(Token = "0x4001B4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public static readonly int STARS_TWINKLE_MAP;

		[Token(Token = "0x4001B4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public static readonly string KW_SUN;

		[Token(Token = "0x4001B50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public static readonly string KW_SUN_USE_TEXTURE;

		[Token(Token = "0x4001B51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public static readonly int SUN_TEX;

		[Token(Token = "0x4001B52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public static readonly int SUN_COLOR;

		[Token(Token = "0x4001B53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public static readonly int SUN_SIZE;

		[Token(Token = "0x4001B54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public static readonly int SUN_SOFT_EDGE;

		[Token(Token = "0x4001B55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public static readonly int SUN_GLOW;

		[Token(Token = "0x4001B56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public static readonly int SUN_DIRECTION;

		[Token(Token = "0x4001B57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public static readonly int SUN_TRANSFORM_MATRIX;

		[Token(Token = "0x4001B58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public static readonly int SUN_LIGHT_COLOR;

		[Token(Token = "0x4001B59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public static readonly int SUN_LIGHT_INTENSITY;

		[Token(Token = "0x4001B5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public static readonly string KW_SUN_BAKED;

		[Token(Token = "0x4001B5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public static readonly int SUN_CUBEMAP;

		[Token(Token = "0x4001B5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		public static readonly int SUN_ROTATION_MATRIX;

		[Token(Token = "0x4001B5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public static readonly string KW_MOON;

		[Token(Token = "0x4001B5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public static readonly string KW_MOON_USE_TEXTURE;

		[Token(Token = "0x4001B5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public static readonly int MOON_TEX;

		[Token(Token = "0x4001B60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		public static readonly int MOON_COLOR;

		[Token(Token = "0x4001B61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public static readonly int MOON_SIZE;

		[Token(Token = "0x4001B62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		public static readonly int MOON_SOFT_EDGE;

		[Token(Token = "0x4001B63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public static readonly int MOON_GLOW;

		[Token(Token = "0x4001B64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		public static readonly int MOON_DIRECTION;

		[Token(Token = "0x4001B65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public static readonly int MOON_TRANSFORM_MATRIX;

		[Token(Token = "0x4001B66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		public static readonly int MOON_LIGHT_COLOR;

		[Token(Token = "0x4001B67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public static readonly int MOON_LIGHT_INTENSITY;

		[Token(Token = "0x4001B68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public static readonly string KW_MOON_BAKED;

		[Token(Token = "0x4001B69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public static readonly int MOON_CUBEMAP;

		[Token(Token = "0x4001B6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		public static readonly int MOON_ROTATION_MATRIX;

		[Token(Token = "0x4001B6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public static readonly string KW_HORIZON_CLOUD;

		[Token(Token = "0x4001B6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		public static readonly int HORIZON_CLOUD_COLOR;

		[Token(Token = "0x4001B6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		public static readonly int HORIZON_CLOUD_START;

		[Token(Token = "0x4001B6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public static readonly int HORIZON_CLOUD_END;

		[Token(Token = "0x4001B6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
		public static readonly int HORIZON_CLOUD_SIZE;

		[Token(Token = "0x4001B70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		public static readonly int HORIZON_CLOUD_STEP;

		[Token(Token = "0x4001B71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		public static readonly int HORIZON_CLOUD_ANIMATION_SPEED;

		[Token(Token = "0x4001B72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		public static readonly string KW_OVERHEAD_CLOUD;

		[Token(Token = "0x4001B73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		public static readonly int OVERHEAD_CLOUD_COLOR;

		[Token(Token = "0x4001B74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
		public static readonly int OVERHEAD_CLOUD_ALTITUDE;

		[Token(Token = "0x4001B75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		public static readonly int OVERHEAD_CLOUD_SIZE;

		[Token(Token = "0x4001B76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		public static readonly int OVERHEAD_CLOUD_STEP;

		[Token(Token = "0x4001B77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		public static readonly int OVERHEAD_CLOUD_ANIMATION_SPEED;

		[Token(Token = "0x4001B78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		public static readonly int OVERHEAD_CLOUD_FLOW_X;

		[Token(Token = "0x4001B79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public static readonly int OVERHEAD_CLOUD_FLOW_Z;

		[Token(Token = "0x4001B7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		public static readonly string KW_DETAIL_OVERLAY;

		[Token(Token = "0x4001B7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		public static readonly string KW_DETAIL_OVERLAY_ROTATION;

		[Token(Token = "0x4001B7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		public static readonly int DETAIL_OVERLAY_COLOR;

		[Token(Token = "0x4001B7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
		public static readonly int DETAIL_OVERLAY_CUBEMAP;

		[Token(Token = "0x4001B7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		public static readonly int DETAIL_OVERLAY_LAYER;

		[Token(Token = "0x4001B7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
		public static readonly int DETAIL_OVERLAY_ROTATION_SPEED;

		[Token(Token = "0x4001B80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		public static readonly string KW_ALLOW_STEP_EFFECT;

		[Token(Token = "0x4001B81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		private static Material activeMaterial;

		[Token(Token = "0x600183D")]
		[Address(RVA = "0xAE18F4", Offset = "0xAE18F4", VA = "0xAE18F4")]
		public static void SetActiveMaterial(Material mat)
		{
		}

		[Token(Token = "0x600183E")]
		[Address(RVA = "0xAE1950", Offset = "0xAE1950", VA = "0xAE1950")]
		public static void GetColor(int prop, ref Color value)
		{
		}

		[Token(Token = "0x600183F")]
		[Address(RVA = "0xAE1B04", Offset = "0xAE1B04", VA = "0xAE1B04")]
		public static void GetFloat(int prop, ref float value)
		{
		}

		[Token(Token = "0x6001840")]
		[Address(RVA = "0xAE1CB4", Offset = "0xAE1CB4", VA = "0xAE1CB4")]
		public static void GetVector(int prop, ref Vector4 value)
		{
		}

		[Token(Token = "0x6001841")]
		[Address(RVA = "0xAE1E68", Offset = "0xAE1E68", VA = "0xAE1E68")]
		public static void GetTexture(int prop, ref Texture value)
		{
		}

		[Token(Token = "0x6001842")]
		[Address(RVA = "0xAE2018", Offset = "0xAE2018", VA = "0xAE2018")]
		public static void GetKeywordEnabled(string kw, ref bool value)
		{
		}

		[Token(Token = "0x6001843")]
		[Address(RVA = "0xAE218C", Offset = "0xAE218C", VA = "0xAE218C")]
		public static void SetColor(int prop, Color value)
		{
		}

		[Token(Token = "0x6001844")]
		[Address(RVA = "0xAE235C", Offset = "0xAE235C", VA = "0xAE235C")]
		public static void SetFloat(int prop, float value)
		{
		}

		[Token(Token = "0x6001845")]
		[Address(RVA = "0xAE2504", Offset = "0xAE2504", VA = "0xAE2504")]
		public static void SetVector(int prop, Vector4 value)
		{
		}

		[Token(Token = "0x6001846")]
		[Address(RVA = "0xAE26D4", Offset = "0xAE26D4", VA = "0xAE26D4")]
		public static void SetTexture(int prop, Texture value)
		{
		}

		[Token(Token = "0x6001847")]
		[Address(RVA = "0xAE287C", Offset = "0xAE287C", VA = "0xAE287C")]
		public static void SetMatrix(int prop, Matrix4x4 value)
		{
		}

		[Token(Token = "0x6001848")]
		[Address(RVA = "0xAE2A44", Offset = "0xAE2A44", VA = "0xAE2A44")]
		public static void SetKeywordEnable(string kw, bool enable)
		{
		}

		[Token(Token = "0x6001849")]
		[Address(RVA = "0xAE2BE0", Offset = "0xAE2BE0", VA = "0xAE2BE0")]
		public static void SetOverrideTag(string tag, string value)
		{
		}

		[Token(Token = "0x600184A")]
		[Address(RVA = "0xAE2C5C", Offset = "0xAE2C5C", VA = "0xAE2C5C")]
		public static void SetRenderQueue(int queue)
		{
		}

		[Token(Token = "0x600184B")]
		[Address(RVA = "0xAE2CC8", Offset = "0xAE2CC8", VA = "0xAE2CC8")]
		public static void SetRenderQueue(RenderQueue queue)
		{
		}

		[Token(Token = "0x600184C")]
		[Address(RVA = "0xAE2D34", Offset = "0xAE2D34", VA = "0xAE2D34")]
		public static void SetSourceBlend(BlendMode mode)
		{
		}

		[Token(Token = "0x600184D")]
		[Address(RVA = "0xAE2DB8", Offset = "0xAE2DB8", VA = "0xAE2DB8")]
		public static void SetDestBlend(BlendMode mode)
		{
		}

		[Token(Token = "0x600184E")]
		[Address(RVA = "0xAE2E3C", Offset = "0xAE2E3C", VA = "0xAE2E3C")]
		public static void SetZWrite(bool value)
		{
		}

		[Token(Token = "0x600184F")]
		[Address(RVA = "0xAE2EC0", Offset = "0xAE2EC0", VA = "0xAE2EC0")]
		public static void SetBlend(bool value)
		{
		}

		[Token(Token = "0x6001850")]
		[Address(RVA = "0xAE2F44", Offset = "0xAE2F44", VA = "0xAE2F44")]
		public static void SetShader(Shader shader)
		{
		}
	}
	[Token(Token = "0x2000434")]
	[ExecuteInEditMode]
	public class JSky : MonoBehaviour
	{
		[Token(Token = "0x4001B82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Vector3 DefaultSunDirection;

		[Token(Token = "0x4001B83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public static readonly Vector3 DefaultMoonDirection;

		[Token(Token = "0x4001B84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private JSkyProfile profile;

		[Token(Token = "0x4001B85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Light sunLightSource;

		[Token(Token = "0x4001B86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Light moonLightSource;

		[Token(Token = "0x170002CA")]
		public JSkyProfile Profile
		{
			[Token(Token = "0x6001852")]
			[Address(RVA = "0xAE3D7C", Offset = "0xAE3D7C", VA = "0xAE3D7C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001853")]
			[Address(RVA = "0xAE3D84", Offset = "0xAE3D84", VA = "0xAE3D84")]
			set
			{
			}
		}

		[Token(Token = "0x170002CB")]
		public Light SunLightSource
		{
			[Token(Token = "0x6001854")]
			[Address(RVA = "0xAE3D8C", Offset = "0xAE3D8C", VA = "0xAE3D8C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001855")]
			[Address(RVA = "0xAE3D94", Offset = "0xAE3D94", VA = "0xAE3D94")]
			set
			{
			}
		}

		[Token(Token = "0x170002CC")]
		public Light MoonLightSource
		{
			[Token(Token = "0x6001856")]
			[Address(RVA = "0xAE3E28", Offset = "0xAE3E28", VA = "0xAE3E28")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001857")]
			[Address(RVA = "0xAE3E30", Offset = "0xAE3E30", VA = "0xAE3E30")]
			set
			{
			}
		}

		[Token(Token = "0x170002CD")]
		public JDayNightCycle DNC
		{
			[Token(Token = "0x6001858")]
			[Address(RVA = "0xAE3EC4", Offset = "0xAE3EC4", VA = "0xAE3EC4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001859")]
			[Address(RVA = "0xAE3ECC", Offset = "0xAE3ECC", VA = "0xAE3ECC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x600185A")]
		[Address(RVA = "0xAE3ED4", Offset = "0xAE3ED4", VA = "0xAE3ED4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600185B")]
		[Address(RVA = "0xAE4038", Offset = "0xAE4038", VA = "0xAE4038")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600185C")]
		[Address(RVA = "0xAE41B0", Offset = "0xAE41B0", VA = "0xAE41B0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600185D")]
		[Address(RVA = "0xAE41D0", Offset = "0xAE41D0", VA = "0xAE41D0")]
		private void Reset()
		{
		}

		[Token(Token = "0x600185E")]
		[Address(RVA = "0xAE42BC", Offset = "0xAE42BC", VA = "0xAE42BC")]
		private void OnCameraPreCull(Camera cam)
		{
		}

		[Token(Token = "0x600185F")]
		[Address(RVA = "0xAE4EB4", Offset = "0xAE4EB4", VA = "0xAE4EB4")]
		private void OnBeginFrameRenderingSRP(ScriptableRenderContext context, Camera[] cameras)
		{
		}

		[Token(Token = "0x6001860")]
		[Address(RVA = "0xAE42D4", Offset = "0xAE42D4", VA = "0xAE42D4")]
		private void SetupSkyMaterial()
		{
		}

		[Token(Token = "0x6001861")]
		[Address(RVA = "0xAE4D2C", Offset = "0xAE4D2C", VA = "0xAE4D2C")]
		private void SyncFog()
		{
		}

		[Token(Token = "0x6001862")]
		[Address(RVA = "0xAE509C", Offset = "0xAE509C", VA = "0xAE509C")]
		public JSky()
		{
		}
	}
	[Token(Token = "0x2000435")]
	[CreateAssetMenu(menuName = "Jupiter/Sky Profile")]
	public class JSkyProfile : ScriptableObject
	{
		[Token(Token = "0x4001B88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Color skyColor;

		[Token(Token = "0x4001B89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Color horizonColor;

		[Token(Token = "0x4001B8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Color groundColor;

		[Token(Token = "0x4001B8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private float horizonThickness;

		[Token(Token = "0x4001B8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[SerializeField]
		private float horizonExponent;

		[Token(Token = "0x4001B8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private int horizonStep;

		[Token(Token = "0x4001B8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[SerializeField]
		private JFogSyncOption fogSyncOption;

		[Token(Token = "0x4001B8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private Color fogColor;

		[Token(Token = "0x4001B90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private bool enableStars;

		[Token(Token = "0x4001B91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[SerializeField]
		private float starsStartPosition;

		[Token(Token = "0x4001B92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private float starsEndPosition;

		[Token(Token = "0x4001B93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[SerializeField]
		private float starsOpacity;

		[Token(Token = "0x4001B94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private int starsLayerCount;

		[Token(Token = "0x4001B95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[SerializeField]
		private Color starsColor0;

		[Token(Token = "0x4001B96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[SerializeField]
		private Color starsColor1;

		[Token(Token = "0x4001B97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[SerializeField]
		private Color starsColor2;

		[Token(Token = "0x4001B98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[SerializeField]
		private float starsDensity0;

		[Token(Token = "0x4001B99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		private float starsDensity1;

		[Token(Token = "0x4001B9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[SerializeField]
		private float starsDensity2;

		[Token(Token = "0x4001B9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		private float starsSize0;

		[Token(Token = "0x4001B9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[SerializeField]
		private float starsSize1;

		[Token(Token = "0x4001B9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		private float starsSize2;

		[Token(Token = "0x4001B9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[SerializeField]
		private float starsGlow0;

		[Token(Token = "0x4001B9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		private float starsGlow1;

		[Token(Token = "0x4001BA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[SerializeField]
		private float starsGlow2;

		[Token(Token = "0x4001BA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		private float starsTwinkle0;

		[Token(Token = "0x4001BA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		[SerializeField]
		private float starsTwinkle1;

		[Token(Token = "0x4001BA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		private float starsTwinkle2;

		[Token(Token = "0x4001BA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[SerializeField]
		private bool useBakedStars;

		[Token(Token = "0x4001BA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[SerializeField]
		private Cubemap starsCubemap;

		[Token(Token = "0x4001BA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[SerializeField]
		private Texture2D starsTwinkleMap;

		[Token(Token = "0x4001BA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[SerializeField]
		private bool enableSun;

		[Token(Token = "0x4001BA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[SerializeField]
		private Texture2D sunTexture;

		[Token(Token = "0x4001BA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[SerializeField]
		private Color sunColor;

		[Token(Token = "0x4001BAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[SerializeField]
		private float sunSize;

		[Token(Token = "0x4001BAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		[SerializeField]
		private float sunSoftEdge;

		[Token(Token = "0x4001BAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[SerializeField]
		private float sunGlow;

		[Token(Token = "0x4001BAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		[SerializeField]
		private bool useBakedSun;

		[Token(Token = "0x4001BAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[SerializeField]
		private Cubemap sunCubemap;

		[Token(Token = "0x4001BAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[SerializeField]
		private Color sunLightColor;

		[Token(Token = "0x4001BB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[SerializeField]
		private float sunLightIntensity;

		[Token(Token = "0x4001BB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		[SerializeField]
		private bool enableMoon;

		[Token(Token = "0x4001BB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		[SerializeField]
		private Texture2D moonTexture;

		[Token(Token = "0x4001BB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		[SerializeField]
		private Color moonColor;

		[Token(Token = "0x4001BB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		[SerializeField]
		private float moonSize;

		[Token(Token = "0x4001BB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
		[SerializeField]
		private float moonSoftEdge;

		[Token(Token = "0x4001BB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		[SerializeField]
		private float moonGlow;

		[Token(Token = "0x4001BB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		[SerializeField]
		private bool useBakedMoon;

		[Token(Token = "0x4001BB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		[SerializeField]
		private Cubemap moonCubemap;

		[Token(Token = "0x4001BB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		[SerializeField]
		private Color moonLightColor;

		[Token(Token = "0x4001BBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		[SerializeField]
		private float moonLightIntensity;

		[Token(Token = "0x4001BBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		[SerializeField]
		private Texture2D customCloudTexture;

		[Token(Token = "0x4001BBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		[SerializeField]
		private bool enableHorizonCloud;

		[Token(Token = "0x4001BBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
		[SerializeField]
		private Color horizonCloudColor;

		[Token(Token = "0x4001BBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
		[SerializeField]
		private float horizonCloudStartPosition;

		[Token(Token = "0x4001BBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		[SerializeField]
		private float horizonCloudEndPosition;

		[Token(Token = "0x4001BC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
		[SerializeField]
		private float horizonCloudSize;

		[Token(Token = "0x4001BC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		[SerializeField]
		private int horizonCloudStep;

		[Token(Token = "0x4001BC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B4")]
		[SerializeField]
		private float horizonCloudAnimationSpeed;

		[Token(Token = "0x4001BC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		[SerializeField]
		private bool enableOverheadCloud;

		[Token(Token = "0x4001BC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1BC")]
		[SerializeField]
		private Color overheadCloudColor;

		[Token(Token = "0x4001BC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
		[SerializeField]
		private float overheadCloudAltitude;

		[Token(Token = "0x4001BC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		[SerializeField]
		private float overheadCloudSize;

		[Token(Token = "0x4001BC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D4")]
		[SerializeField]
		private int overheadCloudStep;

		[Token(Token = "0x4001BC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		[SerializeField]
		private float overheadCloudAnimationSpeed;

		[Token(Token = "0x4001BC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1DC")]
		[SerializeField]
		private float overheadCloudFlowDirectionX;

		[Token(Token = "0x4001BCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		[SerializeField]
		private float overheadCloudFlowDirectionZ;

		[Token(Token = "0x4001BCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E4")]
		[SerializeField]
		private bool enableDetailOverlay;

		[Token(Token = "0x4001BCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		[SerializeField]
		private Color detailOverlayTintColor;

		[Token(Token = "0x4001BCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		[SerializeField]
		private Cubemap detailOverlayCubeMap;

		[Token(Token = "0x4001BCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		[SerializeField]
		private JDetailOverlayLayer detailOverlayLayer;

		[Token(Token = "0x4001BCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x204")]
		[SerializeField]
		private float detailOverlayRotationSpeed;

		[Token(Token = "0x4001BD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		[SerializeField]
		private bool allowStepEffect;

		[Token(Token = "0x4001BD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		[SerializeField]
		private Material material;

		[Token(Token = "0x170002CE")]
		[JAnimatable("Sky/Sky Color", JCurveOrGradient.Gradient)]
		public Color SkyColor
		{
			[Token(Token = "0x6001864")]
			[Address(RVA = "0xAE5148", Offset = "0xAE5148", VA = "0xAE5148")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6001865")]
			[Address(RVA = "0xAE5154", Offset = "0xAE5154", VA = "0xAE5154")]
			set
			{
			}
		}

		[Token(Token = "0x170002CF")]
		[JAnimatable("Sky/Horizon Color", JCurveOrGradient.Gradient)]
		public Color HorizonColor
		{
			[Token(Token = "0x6001866")]
			[Address(RVA = "0xAE5160", Offset = "0xAE5160", VA = "0xAE5160")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6001867")]
			[Address(RVA = "0xAE516C", Offset = "0xAE516C", VA = "0xAE516C")]
			set
			{
			}
		}

		[Token(Token = "0x170002D0")]
		[JAnimatable("Sky/Ground Color", JCurveOrGradient.Gradient)]
		public Color GroundColor
		{
			[Token(Token = "0x6001868")]
			[Address(RVA = "0xAE5178", Offset = "0xAE5178", VA = "0xAE5178")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6001869")]
			[Address(RVA = "0xAE5184", Offset = "0xAE5184", VA = "0xAE5184")]
			set
			{
			}
		}

		[Token(Token = "0x170002D1")]
		[JAnimatable("Sky/Horizon Thickness", JCurveOrGradient.Curve)]
		public float HorizonThickness
		{
			[Token(Token = "0x600186A")]
			[Address(RVA = "0xAE5190", Offset = "0xAE5190", VA = "0xAE5190")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600186B")]
			[Address(RVA = "0xAE5198", Offset = "0xAE5198", VA = "0xAE5198")]
			set
			{
			}
		}

		[Token(Token = "0x170002D2")]
		[JAnimatable("Sky/Horizon Exponent", JCurveOrGradient.Curve)]
		public float HorizonExponent
		{
			[Token(Token = "0x600186C")]
			[Address(RVA = "0xAE51B4", Offset = "0xAE51B4", VA = "0xAE51B4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600186D")]
			[Address(RVA = "0xAE51BC", Offset = "0xAE51BC", VA = "0xAE51BC")]
			set
			{
			}
		}

		[Token(Token = "0x170002D3")]
		public int HorizonStep
		{
			[Token(Token = "0x600186E")]
			[Address(RVA = "0xAE51D0", Offset = "0xAE51D0", VA = "0xAE51D0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600186F")]
			[Address(RVA = "0xAE51D8", Offset = "0xAE51D8", VA = "0xAE51D8")]
			set
			{
			}
		}

		[Token(Token = "0x170002D4")]
		public JFogSyncOption FogSyncOption
		{
			[Token(Token = "0x6001870")]
			[Address(RVA = "0xAE51E8", Offset = "0xAE51E8", VA = "0xAE51E8")]
			get
			{
				return default(JFogSyncOption);
			}
			[Token(Token = "0x6001871")]
			[Address(RVA = "0xAE51F0", Offset = "0xAE51F0", VA = "0xAE51F0")]
			set
			{
			}
		}

		[Token(Token = "0x170002D5")]
		[JAnimatable("Sky/Fog Color", JCurveOrGradient.Gradient)]
		public Color FogColor
		{
			[Token(Token = "0x6001872")]
			[Address(RVA = "0xAE51F8", Offset = "0xAE51F8", VA = "0xAE51F8")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6001873")]
			[Address(RVA = "0xAE5204", Offset = "0xAE5204", VA = "0xAE5204")]
			set
			{
			}
		}

		[Token(Token = "0x170002D6")]
		public bool EnableStars
		{
			[Token(Token = "0x6001874")]
			[Address(RVA = "0xAE5210", Offset = "0xAE5210", VA = "0xAE5210")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001875")]
			[Address(RVA = "0xAE5218", Offset = "0xAE5218", VA = "0xAE5218")]
			set
			{
			}
		}

		[Token(Token = "0x170002D7")]
		[JAnimatable("Stars/Start Position", JCurveOrGradient.Curve)]
		public float StarsStartPosition
		{
			[Token(Token = "0x6001876")]
			[Address(RVA = "0xAE5224", Offset = "0xAE5224", VA = "0xAE5224")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001877")]
			[Address(RVA = "0xAE522C", Offset = "0xAE522C", VA = "0xAE522C")]
			set
			{
			}
		}

		[Token(Token = "0x170002D8")]
		[JAnimatable("Stars/End Position", JCurveOrGradient.Curve)]
		public float StarsEndPosition
		{
			[Token(Token = "0x6001878")]
			[Address(RVA = "0xAE524C", Offset = "0xAE524C", VA = "0xAE524C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001879")]
			[Address(RVA = "0xAE5254", Offset = "0xAE5254", VA = "0xAE5254")]
			set
			{
			}
		}

		[Token(Token = "0x170002D9")]
		[JAnimatable("Stars/Opacity", JCurveOrGradient.Curve)]
		public float StarsOpacity
		{
			[Token(Token = "0x600187A")]
			[Address(RVA = "0xAE5274", Offset = "0xAE5274", VA = "0xAE5274")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600187B")]
			[Address(RVA = "0xAE527C", Offset = "0xAE527C", VA = "0xAE527C")]
			set
			{
			}
		}

		[Token(Token = "0x170002DA")]
		public int StarsLayerCount
		{
			[Token(Token = "0x600187C")]
			[Address(RVA = "0xAE5298", Offset = "0xAE5298", VA = "0xAE5298")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600187D")]
			[Address(RVA = "0xAE52A0", Offset = "0xAE52A0", VA = "0xAE52A0")]
			set
			{
			}
		}

		[Token(Token = "0x170002DB")]
		[JAnimatable("Stars/Color 0", JCurveOrGradient.Gradient)]
		public Color StarsColor0
		{
			[Token(Token = "0x600187E")]
			[Address(RVA = "0xAE52BC", Offset = "0xAE52BC", VA = "0xAE52BC")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x600187F")]
			[Address(RVA = "0xAE52C8", Offset = "0xAE52C8", VA = "0xAE52C8")]
			set
			{
			}
		}

		[Token(Token = "0x170002DC")]
		[JAnimatable("Stars/Color 1", JCurveOrGradient.Gradient)]
		public Color StarsColor1
		{
			[Token(Token = "0x6001880")]
			[Address(RVA = "0xAE52D4", Offset = "0xAE52D4", VA = "0xAE52D4")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6001881")]
			[Address(RVA = "0xAE52E0", Offset = "0xAE52E0", VA = "0xAE52E0")]
			set
			{
			}
		}

		[Token(Token = "0x170002DD")]
		[JAnimatable("Stars/Color 2", JCurveOrGradient.Gradient)]
		public Color StarsColor2
		{
			[Token(Token = "0x6001882")]
			[Address(RVA = "0xAE52EC", Offset = "0xAE52EC", VA = "0xAE52EC")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6001883")]
			[Address(RVA = "0xAE52F8", Offset = "0xAE52F8", VA = "0xAE52F8")]
			set
			{
			}
		}

		[Token(Token = "0x170002DE")]
		[JAnimatable("Stars/Density 0", JCurveOrGradient.Curve)]
		public float StarsDensity0
		{
			[Token(Token = "0x6001884")]
			[Address(RVA = "0xAE5304", Offset = "0xAE5304", VA = "0xAE5304")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001885")]
			[Address(RVA = "0xAE530C", Offset = "0xAE530C", VA = "0xAE530C")]
			set
			{
			}
		}

		[Token(Token = "0x170002DF")]
		[JAnimatable("Stars/Density 1", JCurveOrGradient.Curve)]
		public float StarsDensity1
		{
			[Token(Token = "0x6001886")]
			[Address(RVA = "0xAE5328", Offset = "0xAE5328", VA = "0xAE5328")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001887")]
			[Address(RVA = "0xAE5330", Offset = "0xAE5330", VA = "0xAE5330")]
			set
			{
			}
		}

		[Token(Token = "0x170002E0")]
		[JAnimatable("Stars/Density 2", JCurveOrGradient.Curve)]
		public float StarsDensity2
		{
			[Token(Token = "0x6001888")]
			[Address(RVA = "0xAE534C", Offset = "0xAE534C", VA = "0xAE534C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001889")]
			[Address(RVA = "0xAE5354", Offset = "0xAE5354", VA = "0xAE5354")]
			set
			{
			}
		}

		[Token(Token = "0x170002E1")]
		[JAnimatable("Stars/Size 0", JCurveOrGradient.Curve)]
		public float StarsSize0
		{
			[Token(Token = "0x600188A")]
			[Address(RVA = "0xAE5370", Offset = "0xAE5370", VA = "0xAE5370")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600188B")]
			[Address(RVA = "0xAE5378", Offset = "0xAE5378", VA = "0xAE5378")]
			set
			{
			}
		}

		[Token(Token = "0x170002E2")]
		[JAnimatable("Stars/Size 1", JCurveOrGradient.Curve)]
		public float StarsSize1
		{
			[Token(Token = "0x600188C")]
			[Address(RVA = "0xAE538C", Offset = "0xAE538C", VA = "0xAE538C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600188D")]
			[Address(RVA = "0xAE5394", Offset = "0xAE5394", VA = "0xAE5394")]
			set
			{
			}
		}

		[Token(Token = "0x170002E3")]
		[JAnimatable("Stars/Size 2", JCurveOrGradient.Curve)]
		public float StarsSize2
		{
			[Token(Token = "0x600188E")]
			[Address(RVA = "0xAE53A8", Offset = "0xAE53A8", VA = "0xAE53A8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600188F")]
			[Address(RVA = "0xAE53B0", Offset = "0xAE53B0", VA = "0xAE53B0")]
			set
			{
			}
		}

		[Token(Token = "0x170002E4")]
		[JAnimatable("Stars/Glow 0", JCurveOrGradient.Curve)]
		public float StarsGlow0
		{
			[Token(Token = "0x6001890")]
			[Address(RVA = "0xAE53C4", Offset = "0xAE53C4", VA = "0xAE53C4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001891")]
			[Address(RVA = "0xAE53CC", Offset = "0xAE53CC", VA = "0xAE53CC")]
			set
			{
			}
		}

		[Token(Token = "0x170002E5")]
		[JAnimatable("Stars/Glow 1", JCurveOrGradient.Curve)]
		public float StarsGlow1
		{
			[Token(Token = "0x6001892")]
			[Address(RVA = "0xAE53E0", Offset = "0xAE53E0", VA = "0xAE53E0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001893")]
			[Address(RVA = "0xAE53E8", Offset = "0xAE53E8", VA = "0xAE53E8")]
			set
			{
			}
		}

		[Token(Token = "0x170002E6")]
		[JAnimatable("Stars/Glow 2", JCurveOrGradient.Curve)]
		public float StarsGlow2
		{
			[Token(Token = "0x6001894")]
			[Address(RVA = "0xAE53FC", Offset = "0xAE53FC", VA = "0xAE53FC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001895")]
			[Address(RVA = "0xAE5404", Offset = "0xAE5404", VA = "0xAE5404")]
			set
			{
			}
		}

		[Token(Token = "0x170002E7")]
		[JAnimatable("Stars/Twinkle 0", JCurveOrGradient.Curve)]
		public float StarsTwinkle0
		{
			[Token(Token = "0x6001896")]
			[Address(RVA = "0xAE5418", Offset = "0xAE5418", VA = "0xAE5418")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001897")]
			[Address(RVA = "0xAE5420", Offset = "0xAE5420", VA = "0xAE5420")]
			set
			{
			}
		}

		[Token(Token = "0x170002E8")]
		[JAnimatable("Stars/Twinkle 1", JCurveOrGradient.Curve)]
		public float StarsTwinkle1
		{
			[Token(Token = "0x6001898")]
			[Address(RVA = "0xAE5428", Offset = "0xAE5428", VA = "0xAE5428")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001899")]
			[Address(RVA = "0xAE5430", Offset = "0xAE5430", VA = "0xAE5430")]
			set
			{
			}
		}

		[Token(Token = "0x170002E9")]
		[JAnimatable("Stars/Twinkle 2", JCurveOrGradient.Curve)]
		public float StarsTwinkle2
		{
			[Token(Token = "0x600189A")]
			[Address(RVA = "0xAE5438", Offset = "0xAE5438", VA = "0xAE5438")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600189B")]
			[Address(RVA = "0xAE5440", Offset = "0xAE5440", VA = "0xAE5440")]
			set
			{
			}
		}

		[Token(Token = "0x170002EA")]
		public bool UseBakedStars
		{
			[Token(Token = "0x600189C")]
			[Address(RVA = "0xAE5448", Offset = "0xAE5448", VA = "0xAE5448")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600189D")]
			[Address(RVA = "0xAE5450", Offset = "0xAE5450", VA = "0xAE5450")]
			set
			{
			}
		}

		[Token(Token = "0x170002EB")]
		public Cubemap StarsCubemap
		{
			[Token(Token = "0x600189E")]
			[Address(RVA = "0xAE545C", Offset = "0xAE545C", VA = "0xAE545C")]
			get
			{
				return null;
			}
			[Token(Token = "0x600189F")]
			[Address(RVA = "0xAE5464", Offset = "0xAE5464", VA = "0xAE5464")]
			set
			{
			}
		}

		[Token(Token = "0x170002EC")]
		public Texture2D StarsTwinkleMap
		{
			[Token(Token = "0x60018A0")]
			[Address(RVA = "0xAE546C", Offset = "0xAE546C", VA = "0xAE546C")]
			get
			{
				return null;
			}
			[Token(Token = "0x60018A1")]
			[Address(RVA = "0xAE5474", Offset = "0xAE5474", VA = "0xAE5474")]
			set
			{
			}
		}

		[Token(Token = "0x170002ED")]
		public bool EnableSun
		{
			[Token(Token = "0x60018A2")]
			[Address(RVA = "0xAE547C", Offset = "0xAE547C", VA = "0xAE547C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60018A3")]
			[Address(RVA = "0xAE5484", Offset = "0xAE5484", VA = "0xAE5484")]
			set
			{
			}
		}

		[Token(Token = "0x170002EE")]
		public Texture2D SunTexture
		{
			[Token(Token = "0x60018A4")]
			[Address(RVA = "0xAE5490", Offset = "0xAE5490", VA = "0xAE5490")]
			get
			{
				return null;
			}
			[Token(Token = "0x60018A5")]
			[Address(RVA = "0xAE5498", Offset = "0xAE5498", VA = "0xAE5498")]
			set
			{
			}
		}

		[Token(Token = "0x170002EF")]
		[JAnimatable("Sun/Color", JCurveOrGradient.Gradient)]
		public Color SunColor
		{
			[Token(Token = "0x60018A6")]
			[Address(RVA = "0xAE54A0", Offset = "0xAE54A0", VA = "0xAE54A0")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x60018A7")]
			[Address(RVA = "0xAE54B4", Offset = "0xAE54B4", VA = "0xAE54B4")]
			set
			{
			}
		}

		[Token(Token = "0x170002F0")]
		[JAnimatable("Sun/Size", JCurveOrGradient.Curve)]
		public float SunSize
		{
			[Token(Token = "0x60018A8")]
			[Address(RVA = "0xAE54C8", Offset = "0xAE54C8", VA = "0xAE54C8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60018A9")]
			[Address(RVA = "0xAE54D0", Offset = "0xAE54D0", VA = "0xAE54D0")]
			set
			{
			}
		}

		[Token(Token = "0x170002F1")]
		[JAnimatable("Sun/Soft Edge", JCurveOrGradient.Curve)]
		public float SunSoftEdge
		{
			[Token(Token = "0x60018AA")]
			[Address(RVA = "0xAE54EC", Offset = "0xAE54EC", VA = "0xAE54EC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60018AB")]
			[Address(RVA = "0xAE54F4", Offset = "0xAE54F4", VA = "0xAE54F4")]
			set
			{
			}
		}

		[Token(Token = "0x170002F2")]
		[JAnimatable("Sun/Glow", JCurveOrGradient.Curve)]
		public float SunGlow
		{
			[Token(Token = "0x60018AC")]
			[Address(RVA = "0xAE5510", Offset = "0xAE5510", VA = "0xAE5510")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60018AD")]
			[Address(RVA = "0xAE5518", Offset = "0xAE5518", VA = "0xAE5518")]
			set
			{
			}
		}

		[Token(Token = "0x170002F3")]
		public bool UseBakedSun
		{
			[Token(Token = "0x60018AE")]
			[Address(RVA = "0xAE5534", Offset = "0xAE5534", VA = "0xAE5534")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60018AF")]
			[Address(RVA = "0xAE553C", Offset = "0xAE553C", VA = "0xAE553C")]
			set
			{
			}
		}

		[Token(Token = "0x170002F4")]
		public Cubemap SunCubemap
		{
			[Token(Token = "0x60018B0")]
			[Address(RVA = "0xAE5548", Offset = "0xAE5548", VA = "0xAE5548")]
			get
			{
				return null;
			}
			[Token(Token = "0x60018B1")]
			[Address(RVA = "0xAE5550", Offset = "0xAE5550", VA = "0xAE5550")]
			set
			{
			}
		}

		[Token(Token = "0x170002F5")]
		[JAnimatable("Sun/Light Color", JCurveOrGradient.Gradient)]
		public Color SunLightColor
		{
			[Token(Token = "0x60018B2")]
			[Address(RVA = "0xAE5558", Offset = "0xAE5558", VA = "0xAE5558")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x60018B3")]
			[Address(RVA = "0xAE556C", Offset = "0xAE556C", VA = "0xAE556C")]
			set
			{
			}
		}

		[Token(Token = "0x170002F6")]
		[JAnimatable("Sun/Light Intensity", JCurveOrGradient.Curve)]
		public float SunLightIntensity
		{
			[Token(Token = "0x60018B4")]
			[Address(RVA = "0xAE5580", Offset = "0xAE5580", VA = "0xAE5580")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60018B5")]
			[Address(RVA = "0xAE5588", Offset = "0xAE5588", VA = "0xAE5588")]
			set
			{
			}
		}

		[Token(Token = "0x170002F7")]
		public bool EnableMoon
		{
			[Token(Token = "0x60018B6")]
			[Address(RVA = "0xAE5590", Offset = "0xAE5590", VA = "0xAE5590")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60018B7")]
			[Address(RVA = "0xAE5598", Offset = "0xAE5598", VA = "0xAE5598")]
			set
			{
			}
		}

		[Token(Token = "0x170002F8")]
		public Texture2D MoonTexture
		{
			[Token(Token = "0x60018B8")]
			[Address(RVA = "0xAE55A4", Offset = "0xAE55A4", VA = "0xAE55A4")]
			get
			{
				return null;
			}
			[Token(Token = "0x60018B9")]
			[Address(RVA = "0xAE55AC", Offset = "0xAE55AC", VA = "0xAE55AC")]
			set
			{
			}
		}

		[Token(Token = "0x170002F9")]
		[JAnimatable("Moon/Color", JCurveOrGradient.Gradient)]
		public Color MoonColor
		{
			[Token(Token = "0x60018BA")]
			[Address(RVA = "0xAE55B4", Offset = "0xAE55B4", VA = "0xAE55B4")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x60018BB")]
			[Address(RVA = "0xAE55C8", Offset = "0xAE55C8", VA = "0xAE55C8")]
			set
			{
			}
		}

		[Token(Token = "0x170002FA")]
		[JAnimatable("Moon/Size", JCurveOrGradient.Curve)]
		public float MoonSize
		{
			[Token(Token = "0x60018BC")]
			[Address(RVA = "0xAE55DC", Offset = "0xAE55DC", VA = "0xAE55DC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60018BD")]
			[Address(RVA = "0xAE55E4", Offset = "0xAE55E4", VA = "0xAE55E4")]
			set
			{
			}
		}

		[Token(Token = "0x170002FB")]
		[JAnimatable("Moon/Soft Edge", JCurveOrGradient.Curve)]
		public float MoonSoftEdge
		{
			[Token(Token = "0x60018BE")]
			[Address(RVA = "0xAE5600", Offset = "0xAE5600", VA = "0xAE5600")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60018BF")]
			[Address(RVA = "0xAE5608", Offset = "0xAE5608", VA = "0xAE5608")]
			set
			{
			}
		}

		[Token(Token = "0x170002FC")]
		[JAnimatable("Moon/Glow", JCurveOrGradient.Curve)]
		public float MoonGlow
		{
			[Token(Token = "0x60018C0")]
			[Address(RVA = "0xAE5624", Offset = "0xAE5624", VA = "0xAE5624")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60018C1")]
			[Address(RVA = "0xAE562C", Offset = "0xAE562C", VA = "0xAE562C")]
			set
			{
			}
		}

		[Token(Token = "0x170002FD")]
		public bool UseBakedMoon
		{
			[Token(Token = "0x60018C2")]
			[Address(RVA = "0xAE5648", Offset = "0xAE5648", VA = "0xAE5648")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60018C3")]
			[Address(RVA = "0xAE5650", Offset = "0xAE5650", VA = "0xAE5650")]
			set
			{
			}
		}

		[Token(Token = "0x170002FE")]
		public Cubemap MoonCubemap
		{
			[Token(Token = "0x60018C4")]
			[Address(RVA = "0xAE565C", Offset = "0xAE565C", VA = "0xAE565C")]
			get
			{
				return null;
			}
			[Token(Token = "0x60018C5")]
			[Address(RVA = "0xAE5664", Offset = "0xAE5664", VA = "0xAE5664")]
			set
			{
			}
		}

		[Token(Token = "0x170002FF")]
		[JAnimatable("Moon/Light Color", JCurveOrGradient.Gradient)]
		public Color MoonLightColor
		{
			[Token(Token = "0x60018C6")]
			[Address(RVA = "0xAE566C", Offset = "0xAE566C", VA = "0xAE566C")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x60018C7")]
			[Address(RVA = "0xAE5680", Offset = "0xAE5680", VA = "0xAE5680")]
			set
			{
			}
		}

		[Token(Token = "0x17000300")]
		[JAnimatable("Moon/Light Intensity", JCurveOrGradient.Curve)]
		public float MoonLightIntensity
		{
			[Token(Token = "0x60018C8")]
			[Address(RVA = "0xAE5694", Offset = "0xAE5694", VA = "0xAE5694")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60018C9")]
			[Address(RVA = "0xAE569C", Offset = "0xAE569C", VA = "0xAE569C")]
			set
			{
			}
		}

		[Token(Token = "0x17000301")]
		public Texture2D CustomCloudTexture
		{
			[Token(Token = "0x60018CA")]
			[Address(RVA = "0xAE56A4", Offset = "0xAE56A4", VA = "0xAE56A4")]
			get
			{
				return null;
			}
			[Token(Token = "0x60018CB")]
			[Address(RVA = "0xAE56AC", Offset = "0xAE56AC", VA = "0xAE56AC")]
			set
			{
			}
		}

		[Token(Token = "0x17000302")]
		public bool EnableHorizonCloud
		{
			[Token(Token = "0x60018CC")]
			[Address(RVA = "0xAE56B4", Offset = "0xAE56B4", VA = "0xAE56B4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60018CD")]
			[Address(RVA = "0xAE56BC", Offset = "0xAE56BC", VA = "0xAE56BC")]
			set
			{
			}
		}

		[Token(Token = "0x17000303")]
		[JAnimatable("Horizon Cloud/Color", JCurveOrGradient.Gradient)]
		public Color HorizonCloudColor
		{
			[Token(Token = "0x60018CE")]
			[Address(RVA = "0xAE56C8", Offset = "0xAE56C8", VA = "0xAE56C8")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x60018CF")]
			[Address(RVA = "0xAE56DC", Offset = "0xAE56DC", VA = "0xAE56DC")]
			set
			{
			}
		}

		[Token(Token = "0x17000304")]
		[JAnimatable("Horizon Cloud/Start Position", JCurveOrGradient.Curve)]
		public float HorizonCloudStartPosition
		{
			[Token(Token = "0x60018D0")]
			[Address(RVA = "0xAE56F0", Offset = "0xAE56F0", VA = "0xAE56F0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60018D1")]
			[Address(RVA = "0xAE56F8", Offset = "0xAE56F8", VA = "0xAE56F8")]
			set
			{
			}
		}

		[Token(Token = "0x17000305")]
		[JAnimatable("Horizon Cloud/End Position", JCurveOrGradient.Curve)]
		public float HorizonCloudEndPosition
		{
			[Token(Token = "0x60018D2")]
			[Address(RVA = "0xAE570C", Offset = "0xAE570C", VA = "0xAE570C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60018D3")]
			[Address(RVA = "0xAE5714", Offset = "0xAE5714", VA = "0xAE5714")]
			set
			{
			}
		}

		[Token(Token = "0x17000306")]
		[JAnimatable("Horizon Cloud/Size", JCurveOrGradient.Curve)]
		public float HorizonCloudSize
		{
			[Token(Token = "0x60018D4")]
			[Address(RVA = "0xAE5728", Offset = "0xAE5728", VA = "0xAE5728")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60018D5")]
			[Address(RVA = "0xAE5730", Offset = "0xAE5730", VA = "0xAE5730")]
			set
			{
			}
		}

		[Token(Token = "0x17000307")]
		public int HorizonCloudStep
		{
			[Token(Token = "0x60018D6")]
			[Address(RVA = "0xAE5740", Offset = "0xAE5740", VA = "0xAE5740")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60018D7")]
			[Address(RVA = "0xAE5748", Offset = "0xAE5748", VA = "0xAE5748")]
			set
			{
			}
		}

		[Token(Token = "0x17000308")]
		[JAnimatable("Horizon Cloud/Animation Speed", JCurveOrGradient.Curve)]
		public float HorizonCloudAnimationSpeed
		{
			[Token(Token = "0x60018D8")]
			[Address(RVA = "0xAE5758", Offset = "0xAE5758", VA = "0xAE5758")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60018D9")]
			[Address(RVA = "0xAE5760", Offset = "0xAE5760", VA = "0xAE5760")]
			set
			{
			}
		}

		[Token(Token = "0x17000309")]
		public bool EnableOverheadCloud
		{
			[Token(Token = "0x60018DA")]
			[Address(RVA = "0xAE5768", Offset = "0xAE5768", VA = "0xAE5768")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60018DB")]
			[Address(RVA = "0xAE5770", Offset = "0xAE5770", VA = "0xAE5770")]
			set
			{
			}
		}

		[Token(Token = "0x1700030A")]
		[JAnimatable("Overhead Cloud/Color", JCurveOrGradient.Gradient)]
		public Color OverheadCloudColor
		{
			[Token(Token = "0x60018DC")]
			[Address(RVA = "0xAE577C", Offset = "0xAE577C", VA = "0xAE577C")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x60018DD")]
			[Address(RVA = "0xAE5790", Offset = "0xAE5790", VA = "0xAE5790")]
			set
			{
			}
		}

		[Token(Token = "0x1700030B")]
		[JAnimatable("Overhead Cloud/Altitude", JCurveOrGradient.Curve)]
		public float OverheadCloudAltitude
		{
			[Token(Token = "0x60018DE")]
			[Address(RVA = "0xAE57A4", Offset = "0xAE57A4", VA = "0xAE57A4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60018DF")]
			[Address(RVA = "0xAE57AC", Offset = "0xAE57AC", VA = "0xAE57AC")]
			set
			{
			}
		}

		[Token(Token = "0x1700030C")]
		[JAnimatable("Overhead Cloud/Size", JCurveOrGradient.Curve)]
		public float OverheadCloudSize
		{
			[Token(Token = "0x60018E0")]
			[Address(RVA = "0xAE57BC", Offset = "0xAE57BC", VA = "0xAE57BC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60018E1")]
			[Address(RVA = "0xAE57C4", Offset = "0xAE57C4", VA = "0xAE57C4")]
			set
			{
			}
		}

		[Token(Token = "0x1700030D")]
		public int OverheadCloudStep
		{
			[Token(Token = "0x60018E2")]
			[Address(RVA = "0xAE57D4", Offset = "0xAE57D4", VA = "0xAE57D4")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60018E3")]
			[Address(RVA = "0xAE57DC", Offset = "0xAE57DC", VA = "0xAE57DC")]
			set
			{
			}
		}

		[Token(Token = "0x1700030E")]
		[JAnimatable("Overhead Cloud/Animation Speed", JCurveOrGradient.Curve)]
		public float OverheadCloudAnimationSpeed
		{
			[Token(Token = "0x60018E4")]
			[Address(RVA = "0xAE57EC", Offset = "0xAE57EC", VA = "0xAE57EC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60018E5")]
			[Address(RVA = "0xAE57F4", Offset = "0xAE57F4", VA = "0xAE57F4")]
			set
			{
			}
		}

		[Token(Token = "0x1700030F")]
		[JAnimatable("Overhead Cloud/Flow X", JCurveOrGradient.Curve)]
		public float OverheadCloudFlowDirectionX
		{
			[Token(Token = "0x60018E6")]
			[Address(RVA = "0xAE57FC", Offset = "0xAE57FC", VA = "0xAE57FC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60018E7")]
			[Address(RVA = "0xAE5804", Offset = "0xAE5804", VA = "0xAE5804")]
			set
			{
			}
		}

		[Token(Token = "0x17000310")]
		[JAnimatable("Overhead Cloud/Flow Z", JCurveOrGradient.Curve)]
		public float OverheadCloudFlowDirectionZ
		{
			[Token(Token = "0x60018E8")]
			[Address(RVA = "0xAE5820", Offset = "0xAE5820", VA = "0xAE5820")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60018E9")]
			[Address(RVA = "0xAE5828", Offset = "0xAE5828", VA = "0xAE5828")]
			set
			{
			}
		}

		[Token(Token = "0x17000311")]
		public bool EnableDetailOverlay
		{
			[Token(Token = "0x60018EA")]
			[Address(RVA = "0xAE5844", Offset = "0xAE5844", VA = "0xAE5844")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60018EB")]
			[Address(RVA = "0xAE584C", Offset = "0xAE584C", VA = "0xAE584C")]
			set
			{
			}
		}

		[Token(Token = "0x17000312")]
		[JAnimatable("Detail Overlay/Color", JCurveOrGradient.Gradient)]
		public Color DetailOverlayTintColor
		{
			[Token(Token = "0x60018EC")]
			[Address(RVA = "0xAE5858", Offset = "0xAE5858", VA = "0xAE5858")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x60018ED")]
			[Address(RVA = "0xAE586C", Offset = "0xAE586C", VA = "0xAE586C")]
			set
			{
			}
		}

		[Token(Token = "0x17000313")]
		public Cubemap DetailOverlayCubeMap
		{
			[Token(Token = "0x60018EE")]
			[Address(RVA = "0xAE5880", Offset = "0xAE5880", VA = "0xAE5880")]
			get
			{
				return null;
			}
			[Token(Token = "0x60018EF")]
			[Address(RVA = "0xAE5888", Offset = "0xAE5888", VA = "0xAE5888")]
			set
			{
			}
		}

		[Token(Token = "0x17000314")]
		public JDetailOverlayLayer DetailOverlayLayer
		{
			[Token(Token = "0x60018F0")]
			[Address(RVA = "0xAE5890", Offset = "0xAE5890", VA = "0xAE5890")]
			get
			{
				return default(JDetailOverlayLayer);
			}
			[Token(Token = "0x60018F1")]
			[Address(RVA = "0xAE5898", Offset = "0xAE5898", VA = "0xAE5898")]
			set
			{
			}
		}

		[Token(Token = "0x17000315")]
		[JAnimatable("Detail Overlay/Rotation Speed", JCurveOrGradient.Curve)]
		public float DetailOverlayRotationSpeed
		{
			[Token(Token = "0x60018F2")]
			[Address(RVA = "0xAE58A0", Offset = "0xAE58A0", VA = "0xAE58A0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60018F3")]
			[Address(RVA = "0xAE58A8", Offset = "0xAE58A8", VA = "0xAE58A8")]
			set
			{
			}
		}

		[Token(Token = "0x17000316")]
		public bool AllowStepEffect
		{
			[Token(Token = "0x60018F4")]
			[Address(RVA = "0xAE58B0", Offset = "0xAE58B0", VA = "0xAE58B0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60018F5")]
			[Address(RVA = "0xAE58B8", Offset = "0xAE58B8", VA = "0xAE58B8")]
			set
			{
			}
		}

		[Token(Token = "0x17000317")]
		public Material Material
		{
			[Token(Token = "0x60018F6")]
			[Address(RVA = "0xAE4ECC", Offset = "0xAE4ECC", VA = "0xAE4ECC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60018F7")]
		[Address(RVA = "0xAE58C4", Offset = "0xAE58C4", VA = "0xAE58C4")]
		public void Reset()
		{
		}

		[Token(Token = "0x60018F8")]
		[Address(RVA = "0xAE5CEC", Offset = "0xAE5CEC", VA = "0xAE5CEC")]
		public void UpdateMaterialProperties()
		{
		}

		[Token(Token = "0x60018F9")]
		[Address(RVA = "0xAE5950", Offset = "0xAE5950", VA = "0xAE5950")]
		public void CopyFrom(JSkyProfile p)
		{
		}

		[Token(Token = "0x60018FA")]
		[Address(RVA = "0xAE6528", Offset = "0xAE6528", VA = "0xAE6528")]
		public JSkyProfile()
		{
		}
	}
	[Token(Token = "0x2000436")]
	[AttributeUsage(AttributeTargets.Property)]
	public class JAnimatableAttribute : Attribute
	{
		[Token(Token = "0x17000318")]
		public string DisplayName
		{
			[Token(Token = "0x60018FB")]
			[Address(RVA = "0xAE6530", Offset = "0xAE6530", VA = "0xAE6530")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60018FC")]
			[Address(RVA = "0xAE6538", Offset = "0xAE6538", VA = "0xAE6538")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000319")]
		public JCurveOrGradient CurveOrGradient
		{
			[Token(Token = "0x60018FD")]
			[Address(RVA = "0xAE6540", Offset = "0xAE6540", VA = "0xAE6540")]
			[CompilerGenerated]
			get
			{
				return default(JCurveOrGradient);
			}
			[Token(Token = "0x60018FE")]
			[Address(RVA = "0xAE6548", Offset = "0xAE6548", VA = "0xAE6548")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x60018FF")]
		[Address(RVA = "0xAE6550", Offset = "0xAE6550", VA = "0xAE6550")]
		public JAnimatableAttribute(string displayName, JCurveOrGradient curveOrGradient)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000437")]
	public class JAnimatedProperty
	{
		[Token(Token = "0x4001BD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private string name;

		[Token(Token = "0x4001BD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private string displayName;

		[Token(Token = "0x4001BD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private JCurveOrGradient curveOrGradient;

		[Token(Token = "0x4001BD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private AnimationCurve curve;

		[Token(Token = "0x4001BD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Gradient gradient;

		[Token(Token = "0x1700031A")]
		public string Name
		{
			[Token(Token = "0x6001900")]
			[Address(RVA = "0xAE6580", Offset = "0xAE6580", VA = "0xAE6580")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001901")]
			[Address(RVA = "0xAE65D8", Offset = "0xAE65D8", VA = "0xAE65D8")]
			set
			{
			}
		}

		[Token(Token = "0x1700031B")]
		public string DisplayName
		{
			[Token(Token = "0x6001902")]
			[Address(RVA = "0xAE65E0", Offset = "0xAE65E0", VA = "0xAE65E0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001903")]
			[Address(RVA = "0xAE6638", Offset = "0xAE6638", VA = "0xAE6638")]
			set
			{
			}
		}

		[Token(Token = "0x1700031C")]
		public JCurveOrGradient CurveOrGradient
		{
			[Token(Token = "0x6001904")]
			[Address(RVA = "0xAE6640", Offset = "0xAE6640", VA = "0xAE6640")]
			get
			{
				return default(JCurveOrGradient);
			}
			[Token(Token = "0x6001905")]
			[Address(RVA = "0xAE6648", Offset = "0xAE6648", VA = "0xAE6648")]
			set
			{
			}
		}

		[Token(Token = "0x1700031D")]
		public AnimationCurve Curve
		{
			[Token(Token = "0x6001906")]
			[Address(RVA = "0xAE6650", Offset = "0xAE6650", VA = "0xAE6650")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001907")]
			[Address(RVA = "0xAE6680", Offset = "0xAE6680", VA = "0xAE6680")]
			set
			{
			}
		}

		[Token(Token = "0x1700031E")]
		public Gradient Gradient
		{
			[Token(Token = "0x6001908")]
			[Address(RVA = "0xAE6688", Offset = "0xAE6688", VA = "0xAE6688")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001909")]
			[Address(RVA = "0xAE6844", Offset = "0xAE6844", VA = "0xAE6844")]
			set
			{
			}
		}

		[Token(Token = "0x600190A")]
		[Address(RVA = "0xAE684C", Offset = "0xAE684C", VA = "0xAE684C")]
		public float EvaluateFloat(float t)
		{
			return default(float);
		}

		[Token(Token = "0x600190B")]
		[Address(RVA = "0xAE6898", Offset = "0xAE6898", VA = "0xAE6898")]
		public Color EvaluateColor(float t)
		{
			return default(Color);
		}

		[Token(Token = "0x600190C")]
		[Address(RVA = "0xAE68C4", Offset = "0xAE68C4", VA = "0xAE68C4")]
		public static JAnimatedProperty Create(string name, string displayName, JCurveOrGradient curveOrGradient)
		{
			return null;
		}

		[Token(Token = "0x600190D")]
		[Address(RVA = "0xAE693C", Offset = "0xAE693C", VA = "0xAE693C")]
		public JAnimatedProperty()
		{
		}
	}
	[Token(Token = "0x2000438")]
	public enum JCurveOrGradient
	{
		[Token(Token = "0x4001BDA")]
		Curve,
		[Token(Token = "0x4001BDB")]
		Gradient
	}
	[Token(Token = "0x2000439")]
	[ExecuteInEditMode]
	public class JDayNightCycle : MonoBehaviour
	{
		[Token(Token = "0x4001BDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private JDayNightCycleProfile profile;

		[Token(Token = "0x4001BDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private JSky sky;

		[Token(Token = "0x4001BDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private bool useSunPivot;

		[Token(Token = "0x4001BDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Transform sunOrbitPivot;

		[Token(Token = "0x4001BE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private bool useMoonPivot;

		[Token(Token = "0x4001BE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Transform moonOrbitPivot;

		[Token(Token = "0x4001BE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private float startTime;

		[Token(Token = "0x4001BE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[SerializeField]
		private float timeIncrement;

		[Token(Token = "0x4001BE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private bool autoTimeIncrement;

		[Token(Token = "0x4001BE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float time;

		[Token(Token = "0x4001BE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private bool shouldUpdateEnvironmentReflection;

		[Token(Token = "0x4001BE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[SerializeField]
		private int environmentReflectionResolution;

		[Token(Token = "0x4001BE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private ReflectionProbeTimeSlicingMode environmentReflectionTimeSlicingMode;

		[Token(Token = "0x4001BE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private ReflectionProbe environmentProbe;

		[Token(Token = "0x4001BEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Cubemap environmentReflection;

		[Token(Token = "0x4001BEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private int probeRenderId;

		[Token(Token = "0x1700031F")]
		public JDayNightCycleProfile Profile
		{
			[Token(Token = "0x600190E")]
			[Address(RVA = "0xAE6944", Offset = "0xAE6944", VA = "0xAE6944")]
			get
			{
				return null;
			}
			[Token(Token = "0x600190F")]
			[Address(RVA = "0xAE694C", Offset = "0xAE694C", VA = "0xAE694C")]
			set
			{
			}
		}

		[Token(Token = "0x17000320")]
		public JSky Sky
		{
			[Token(Token = "0x6001910")]
			[Address(RVA = "0xAE6954", Offset = "0xAE6954", VA = "0xAE6954")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001911")]
			[Address(RVA = "0xAE695C", Offset = "0xAE695C", VA = "0xAE695C")]
			set
			{
			}
		}

		[Token(Token = "0x17000321")]
		public bool UseSunPivot
		{
			[Token(Token = "0x6001912")]
			[Address(RVA = "0xAE6964", Offset = "0xAE6964", VA = "0xAE6964")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001913")]
			[Address(RVA = "0xAE696C", Offset = "0xAE696C", VA = "0xAE696C")]
			set
			{
			}
		}

		[Token(Token = "0x17000322")]
		public Transform SunOrbitPivot
		{
			[Token(Token = "0x6001914")]
			[Address(RVA = "0xAE6978", Offset = "0xAE6978", VA = "0xAE6978")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001915")]
			[Address(RVA = "0xAE6980", Offset = "0xAE6980", VA = "0xAE6980")]
			set
			{
			}
		}

		[Token(Token = "0x17000323")]
		public bool UseMoonPivot
		{
			[Token(Token = "0x6001916")]
			[Address(RVA = "0xAE6988", Offset = "0xAE6988", VA = "0xAE6988")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001917")]
			[Address(RVA = "0xAE6990", Offset = "0xAE6990", VA = "0xAE6990")]
			set
			{
			}
		}

		[Token(Token = "0x17000324")]
		public Transform MoonOrbitPivot
		{
			[Token(Token = "0x6001918")]
			[Address(RVA = "0xAE699C", Offset = "0xAE699C", VA = "0xAE699C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001919")]
			[Address(RVA = "0xAE69A4", Offset = "0xAE69A4", VA = "0xAE69A4")]
			set
			{
			}
		}

		[Token(Token = "0x17000325")]
		public float StartTime
		{
			[Token(Token = "0x600191A")]
			[Address(RVA = "0xAE69AC", Offset = "0xAE69AC", VA = "0xAE69AC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600191B")]
			[Address(RVA = "0xAE69B4", Offset = "0xAE69B4", VA = "0xAE69B4")]
			set
			{
			}
		}

		[Token(Token = "0x17000326")]
		public float TimeIncrement
		{
			[Token(Token = "0x600191C")]
			[Address(RVA = "0xAE69D0", Offset = "0xAE69D0", VA = "0xAE69D0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600191D")]
			[Address(RVA = "0xAE69D8", Offset = "0xAE69D8", VA = "0xAE69D8")]
			set
			{
			}
		}

		[Token(Token = "0x17000327")]
		public bool AutoTimeIncrement
		{
			[Token(Token = "0x600191E")]
			[Address(RVA = "0xAE69E8", Offset = "0xAE69E8", VA = "0xAE69E8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600191F")]
			[Address(RVA = "0xAE69F0", Offset = "0xAE69F0", VA = "0xAE69F0")]
			set
			{
			}
		}

		[Token(Token = "0x17000328")]
		public float Time
		{
			[Token(Token = "0x6001920")]
			[Address(RVA = "0xAE69FC", Offset = "0xAE69FC", VA = "0xAE69FC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001921")]
			[Address(RVA = "0xAE6A08", Offset = "0xAE6A08", VA = "0xAE6A08")]
			set
			{
			}
		}

		[Token(Token = "0x17000329")]
		public bool ShouldUpdateEnvironmentReflection
		{
			[Token(Token = "0x6001922")]
			[Address(RVA = "0xAE6A24", Offset = "0xAE6A24", VA = "0xAE6A24")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001923")]
			[Address(RVA = "0xAE6A2C", Offset = "0xAE6A2C", VA = "0xAE6A2C")]
			set
			{
			}
		}

		[Token(Token = "0x1700032A")]
		public int EnvironmentReflectionResolution
		{
			[Token(Token = "0x6001924")]
			[Address(RVA = "0xAE6A38", Offset = "0xAE6A38", VA = "0xAE6A38")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001925")]
			[Address(RVA = "0xAE6A40", Offset = "0xAE6A40", VA = "0xAE6A40")]
			set
			{
			}
		}

		[Token(Token = "0x1700032B")]
		public ReflectionProbeTimeSlicingMode EnvironmentReflectionTimeSlicingMode
		{
			[Token(Token = "0x6001926")]
			[Address(RVA = "0xAE6BCC", Offset = "0xAE6BCC", VA = "0xAE6BCC")]
			get
			{
				return default(ReflectionProbeTimeSlicingMode);
			}
			[Token(Token = "0x6001927")]
			[Address(RVA = "0xAE6BD4", Offset = "0xAE6BD4", VA = "0xAE6BD4")]
			set
			{
			}
		}

		[Token(Token = "0x1700032C")]
		private ReflectionProbe EnvironmentProbe
		{
			[Token(Token = "0x6001928")]
			[Address(RVA = "0xAE6BDC", Offset = "0xAE6BDC", VA = "0xAE6BDC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700032D")]
		private Cubemap EnvironmentReflection
		{
			[Token(Token = "0x6001929")]
			[Address(RVA = "0xAE6E68", Offset = "0xAE6E68", VA = "0xAE6E68")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700032E")]
		private float DeltaTime
		{
			[Token(Token = "0x600192A")]
			[Address(RVA = "0xAE6F38", Offset = "0xAE6F38", VA = "0xAE6F38")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x600192B")]
		[Address(RVA = "0xAE6F64", Offset = "0xAE6F64", VA = "0xAE6F64")]
		private void Reset()
		{
		}

		[Token(Token = "0x600192C")]
		[Address(RVA = "0xAE6FCC", Offset = "0xAE6FCC", VA = "0xAE6FCC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600192D")]
		[Address(RVA = "0xAE7138", Offset = "0xAE7138", VA = "0xAE7138")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600192E")]
		[Address(RVA = "0xAE73D4", Offset = "0xAE73D4", VA = "0xAE73D4")]
		private void OnCameraPreCull(Camera cam)
		{
		}

		[Token(Token = "0x600192F")]
		[Address(RVA = "0xAE742C", Offset = "0xAE742C", VA = "0xAE742C")]
		private void OnBeginFrameRenderingSRP(ScriptableRenderContext context, Camera[] cameras)
		{
		}

		[Token(Token = "0x6001930")]
		[Address(RVA = "0xAE72A4", Offset = "0xAE72A4", VA = "0xAE72A4")]
		private void CleanUp()
		{
		}

		[Token(Token = "0x6001931")]
		[Address(RVA = "0xAE73FC", Offset = "0xAE73FC", VA = "0xAE73FC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001932")]
		[Address(RVA = "0xAE7454", Offset = "0xAE7454", VA = "0xAE7454")]
		private void AnimateSky()
		{
		}

		[Token(Token = "0x6001933")]
		[Address(RVA = "0xAE7A78", Offset = "0xAE7A78", VA = "0xAE7A78")]
		private void UpdateEnvironmentReflection()
		{
		}

		[Token(Token = "0x6001934")]
		[Address(RVA = "0xAE7DCC", Offset = "0xAE7DCC", VA = "0xAE7DCC")]
		public JDayNightCycle()
		{
		}
	}
	[Token(Token = "0x200043A")]
	[CreateAssetMenu(menuName = "Jupiter/Day Night Cycle Profile")]
	public class JDayNightCycleProfile : ScriptableObject
	{
		[Token(Token = "0x4001BEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<string, int> propertyRemap;

		[Token(Token = "0x4001BED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private List<JAnimatedProperty> animatedProperties;

		[Token(Token = "0x1700032F")]
		private static Dictionary<string, int> PropertyRemap
		{
			[Token(Token = "0x6001935")]
			[Address(RVA = "0xAE7DDC", Offset = "0xAE7DDC", VA = "0xAE7DDC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001936")]
			[Address(RVA = "0xAE7EB4", Offset = "0xAE7EB4", VA = "0xAE7EB4")]
			set
			{
			}
		}

		[Token(Token = "0x17000330")]
		public List<JAnimatedProperty> AnimatedProperties
		{
			[Token(Token = "0x6001939")]
			[Address(RVA = "0xAE8160", Offset = "0xAE8160", VA = "0xAE8160")]
			get
			{
				return null;
			}
			[Token(Token = "0x600193A")]
			[Address(RVA = "0xAE81E0", Offset = "0xAE81E0", VA = "0xAE81E0")]
			set
			{
			}
		}

		[Token(Token = "0x6001937")]
		[Address(RVA = "0xAE7F10", Offset = "0xAE7F10", VA = "0xAE7F10")]
		static JDayNightCycleProfile()
		{
		}

		[Token(Token = "0x6001938")]
		[Address(RVA = "0xAE7F14", Offset = "0xAE7F14", VA = "0xAE7F14")]
		private static void InitPropertyRemap()
		{
		}

		[Token(Token = "0x600193B")]
		[Address(RVA = "0xAE81E8", Offset = "0xAE81E8", VA = "0xAE81E8")]
		public void AddProperty(JAnimatedProperty p, bool setDefaultValue = true)
		{
		}

		[Token(Token = "0x600193C")]
		[Address(RVA = "0xAE7BF8", Offset = "0xAE7BF8", VA = "0xAE7BF8")]
		public void Animate(JSky sky, float t)
		{
		}

		[Token(Token = "0x600193D")]
		[Address(RVA = "0xAE83F4", Offset = "0xAE83F4", VA = "0xAE83F4")]
		private void CheckDefaultProfileAndThrow(JSkyProfile p)
		{
		}

		[Token(Token = "0x600193E")]
		[Address(RVA = "0xAE4FB4", Offset = "0xAE4FB4", VA = "0xAE4FB4")]
		public bool ContainProperty(string propertyName)
		{
			return default(bool);
		}

		[Token(Token = "0x600193F")]
		[Address(RVA = "0xAE8518", Offset = "0xAE8518", VA = "0xAE8518")]
		public JDayNightCycleProfile()
		{
		}
	}
	[Token(Token = "0x200043D")]
	public static class JCubemapRenderer
	{
		[Token(Token = "0x6001944")]
		[Address(RVA = "0xAE862C", Offset = "0xAE862C", VA = "0xAE862C")]
		public static bool Render(JCubemapRendererArgs args)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200043E")]
	public struct JCubemapRendererArgs
	{
		[Token(Token = "0x17000331")]
		public Cubemap Cubemap
		{
			[Token(Token = "0x6001945")]
			[Address(RVA = "0xAE877C", Offset = "0xAE877C", VA = "0xAE877C")]
			[CompilerGenerated]
			readonly get
			{
				return null;
			}
			[Token(Token = "0x6001946")]
			[Address(RVA = "0xAE8784", Offset = "0xAE8784", VA = "0xAE8784")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000332")]
		public Vector3 CameraPosition
		{
			[Token(Token = "0x6001947")]
			[Address(RVA = "0xAE878C", Offset = "0xAE878C", VA = "0xAE878C")]
			[CompilerGenerated]
			readonly get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001948")]
			[Address(RVA = "0xAE8798", Offset = "0xAE8798", VA = "0xAE8798")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000333")]
		public float CameraNearPlane
		{
			[Token(Token = "0x6001949")]
			[Address(RVA = "0xAE87A4", Offset = "0xAE87A4", VA = "0xAE87A4")]
			[CompilerGenerated]
			readonly get
			{
				return default(float);
			}
			[Token(Token = "0x600194A")]
			[Address(RVA = "0xAE87AC", Offset = "0xAE87AC", VA = "0xAE87AC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000334")]
		public float CameraFarPlane
		{
			[Token(Token = "0x600194B")]
			[Address(RVA = "0xAE87B4", Offset = "0xAE87B4", VA = "0xAE87B4")]
			[CompilerGenerated]
			readonly get
			{
				return default(float);
			}
			[Token(Token = "0x600194C")]
			[Address(RVA = "0xAE87BC", Offset = "0xAE87BC", VA = "0xAE87BC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000335")]
		public CameraClearFlags CameraClearFlag
		{
			[Token(Token = "0x600194D")]
			[Address(RVA = "0xAE87C4", Offset = "0xAE87C4", VA = "0xAE87C4")]
			[CompilerGenerated]
			readonly get
			{
				return default(CameraClearFlags);
			}
			[Token(Token = "0x600194E")]
			[Address(RVA = "0xAE87CC", Offset = "0xAE87CC", VA = "0xAE87CC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000336")]
		public Color CameraBackgroundColor
		{
			[Token(Token = "0x600194F")]
			[Address(RVA = "0xAE87D4", Offset = "0xAE87D4", VA = "0xAE87D4")]
			[CompilerGenerated]
			readonly get
			{
				return default(Color);
			}
			[Token(Token = "0x6001950")]
			[Address(RVA = "0xAE87E0", Offset = "0xAE87E0", VA = "0xAE87E0")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000337")]
		public int Resolution
		{
			[Token(Token = "0x6001951")]
			[Address(RVA = "0xAE87EC", Offset = "0xAE87EC", VA = "0xAE87EC")]
			[CompilerGenerated]
			readonly get
			{
				return default(int);
			}
			[Token(Token = "0x6001952")]
			[Address(RVA = "0xAE87F4", Offset = "0xAE87F4", VA = "0xAE87F4")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000338")]
		public CubemapFace Face
		{
			[Token(Token = "0x6001953")]
			[Address(RVA = "0xAE87FC", Offset = "0xAE87FC", VA = "0xAE87FC")]
			[CompilerGenerated]
			readonly get
			{
				return default(CubemapFace);
			}
			[Token(Token = "0x6001954")]
			[Address(RVA = "0xAE8804", Offset = "0xAE8804", VA = "0xAE8804")]
			[CompilerGenerated]
			set
			{
			}
		}
	}
	[Token(Token = "0x200043F")]
	[AttributeUsage(AttributeTargets.All, AllowMultiple = false)]
	public class JDisplayName : Attribute
	{
		[Token(Token = "0x17000339")]
		public string DisplayName
		{
			[Token(Token = "0x6001955")]
			[Address(RVA = "0xAE880C", Offset = "0xAE880C", VA = "0xAE880C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001956")]
			[Address(RVA = "0xAE8814", Offset = "0xAE8814", VA = "0xAE8814")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6001957")]
		[Address(RVA = "0xAE881C", Offset = "0xAE881C", VA = "0xAE881C")]
		public JDisplayName(string name)
		{
		}
	}
	[Token(Token = "0x2000440")]
	public static class JInternalMaterials
	{
		[Token(Token = "0x4001BF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Material copyTextureMaterial;

		[Token(Token = "0x4001BFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Material solidColorMaterial;

		[Token(Token = "0x4001BFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static Material unlitTextureMaterial;

		[Token(Token = "0x1700033A")]
		public static Material CopyTextureMaterial
		{
			[Token(Token = "0x6001958")]
			[Address(RVA = "0xAE01A0", Offset = "0xAE01A0", VA = "0xAE01A0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700033B")]
		public static Material SolidColorMaterial
		{
			[Token(Token = "0x6001959")]
			[Address(RVA = "0xAE06C8", Offset = "0xAE06C8", VA = "0xAE06C8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700033C")]
		public static Material UnlitTextureMaterial
		{
			[Token(Token = "0x600195A")]
			[Address(RVA = "0xAE04A0", Offset = "0xAE04A0", VA = "0xAE04A0")]
			get
			{
				return null;
			}
		}
	}
	[Serializable]
	[Token(Token = "0x2000441")]
	public struct JInternalShaderSettings
	{
		[Token(Token = "0x4001BFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		private Shader skyShader;

		[Token(Token = "0x4001BFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[SerializeField]
		private Shader copyTextureShader;

		[Token(Token = "0x4001BFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private Shader solidColorShader;

		[Token(Token = "0x1700033D")]
		public Shader SkyShader
		{
			[Token(Token = "0x600195B")]
			[Address(RVA = "0xAE8844", Offset = "0xAE8844", VA = "0xAE8844")]
			get
			{
				return null;
			}
			[Token(Token = "0x600195C")]
			[Address(RVA = "0xAE884C", Offset = "0xAE884C", VA = "0xAE884C")]
			set
			{
			}
		}

		[Token(Token = "0x1700033E")]
		public Shader CopyTextureShader
		{
			[Token(Token = "0x600195D")]
			[Address(RVA = "0xAE8854", Offset = "0xAE8854", VA = "0xAE8854")]
			get
			{
				return null;
			}
			[Token(Token = "0x600195E")]
			[Address(RVA = "0xAE885C", Offset = "0xAE885C", VA = "0xAE885C")]
			set
			{
			}
		}

		[Token(Token = "0x1700033F")]
		public Shader SolidColorShader
		{
			[Token(Token = "0x600195F")]
			[Address(RVA = "0xAE8864", Offset = "0xAE8864", VA = "0xAE8864")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001960")]
			[Address(RVA = "0xAE886C", Offset = "0xAE886C", VA = "0xAE886C")]
			set
			{
			}
		}
	}
	[Token(Token = "0x2000442")]
	public class JProgressCancelledException : Exception
	{
		[Token(Token = "0x6001961")]
		[Address(RVA = "0xAE8874", Offset = "0xAE8874", VA = "0xAE8874")]
		public JProgressCancelledException()
		{
		}
	}
	[Token(Token = "0x2000443")]
	public enum JRenderPipelineType
	{
		[Token(Token = "0x4001C00")]
		Builtin,
		[Token(Token = "0x4001C01")]
		Lightweight,
		[Token(Token = "0x4001C02")]
		Universal
	}
	[Token(Token = "0x2000444")]
	public static class JUtilities
	{
		[Token(Token = "0x4001C03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static float DELTA_TIME;

		[Token(Token = "0x4001C04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Mesh quadMesh;

		[Token(Token = "0x17000340")]
		public static Mesh QuadMesh
		{
			[Token(Token = "0x6001962")]
			[Address(RVA = "0xAE88CC", Offset = "0xAE88CC", VA = "0xAE88CC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001963")]
		public static string ListElementsToString<T>(this IEnumerable<T> list, string separator)
		{
			return null;
		}

		[Token(Token = "0x6001964")]
		public static T[][] CreateJaggedArray<T>(int dimension1, int dimension2)
		{
			return null;
		}

		[Token(Token = "0x6001965")]
		public static T[] To1dArray<T>(T[][] jaggedArray)
		{
			return null;
		}

		[Token(Token = "0x6001966")]
		public static T[] To1dArray<T>(T[,] grid)
		{
			return null;
		}

		[Token(Token = "0x6001967")]
		public static void Fill<T>(T[] array, T value)
		{
		}

		[Token(Token = "0x6001968")]
		public static void CopyTo<T>(T[] src, T[] des)
		{
		}

		[Token(Token = "0x6001969")]
		[Address(RVA = "0xAE8A48", Offset = "0xAE8A48", VA = "0xAE8A48")]
		public static int Sum(int[,] array)
		{
			return default(int);
		}

		[Token(Token = "0x600196A")]
		[Address(RVA = "0xAE1138", Offset = "0xAE1138", VA = "0xAE1138")]
		public static int To1DIndex(int x, int z, int width)
		{
			return default(int);
		}

		[Token(Token = "0x600196B")]
		[Address(RVA = "0xAE8B0C", Offset = "0xAE8B0C", VA = "0xAE8B0C")]
		public static bool IsInRange(float number, float minValue, float maxValue)
		{
			return default(bool);
		}

		[Token(Token = "0x600196C")]
		[Address(RVA = "0xAE8B24", Offset = "0xAE8B24", VA = "0xAE8B24")]
		public static bool IsInRangeExclusive(float number, float minValue, float maxValue)
		{
			return default(bool);
		}

		[Token(Token = "0x600196D")]
		[Address(RVA = "0xAE8B3C", Offset = "0xAE8B3C", VA = "0xAE8B3C")]
		public static float GetFraction(float value, float floor, float ceil)
		{
			return default(float);
		}

		[Token(Token = "0x600196E")]
		[Address(RVA = "0xAE8B4C", Offset = "0xAE8B4C", VA = "0xAE8B4C")]
		public static void ClearChildren(Transform t)
		{
		}

		[Token(Token = "0x600196F")]
		[Address(RVA = "0xAE66E8", Offset = "0xAE66E8", VA = "0xAE66E8")]
		public static Gradient CreateFullWhiteGradient()
		{
			return null;
		}

		[Token(Token = "0x6001970")]
		[Address(RVA = "0xAE8BF8", Offset = "0xAE8BF8", VA = "0xAE8BF8")]
		public static Gradient CreateFullTransparentGradient()
		{
			return null;
		}

		[Token(Token = "0x6001971")]
		[Address(RVA = "0xAE8D54", Offset = "0xAE8D54", VA = "0xAE8D54")]
		public static void CalculateBarycentricCoord(Vector2 p, Vector2 p1, Vector2 p2, Vector2 p3, ref Vector3 bary)
		{
		}

		[Token(Token = "0x6001972")]
		[Address(RVA = "0xAE8DF0", Offset = "0xAE8DF0", VA = "0xAE8DF0")]
		public static void ExpandTrisUvCoord(Texture2D tex, Vector2[] trisUv)
		{
		}

		[Token(Token = "0x6001973")]
		public static bool ContainIdenticalElements<T>(T[] arr1, T[] arr2)
		{
			return default(bool);
		}

		[Token(Token = "0x6001974")]
		[Address(RVA = "0xAE9138", Offset = "0xAE9138", VA = "0xAE9138")]
		public static float GetNearestMultiple(float number, float multipleOf)
		{
			return default(float);
		}

		[Token(Token = "0x6001975")]
		[Address(RVA = "0xAE9170", Offset = "0xAE9170", VA = "0xAE9170")]
		public static Transform GetChildrenWithName(Transform parent, string name)
		{
			return null;
		}

		[Token(Token = "0x6001976")]
		[Address(RVA = "0xAE92A0", Offset = "0xAE92A0", VA = "0xAE92A0")]
		public static void ResetTransform(Transform t, Transform parent)
		{
		}

		[Token(Token = "0x6001977")]
		[Address(RVA = "0xAE6B74", Offset = "0xAE6B74", VA = "0xAE6B74")]
		public static void DestroyGameobject(GameObject g)
		{
		}

		[Token(Token = "0x6001978")]
		[Address(RVA = "0xAE9388", Offset = "0xAE9388", VA = "0xAE9388")]
		public static void DestroyGameObjectWithUndo(GameObject g)
		{
		}

		[Token(Token = "0x6001979")]
		[Address(RVA = "0xADF8CC", Offset = "0xADF8CC", VA = "0xADF8CC")]
		public static void DestroyObject(UnityEngine.Object o)
		{
		}

		[Token(Token = "0x600197A")]
		[Address(RVA = "0xAE93DC", Offset = "0xAE93DC", VA = "0xAE93DC")]
		public static string Repeat(char src, int count)
		{
			return null;
		}

		[Token(Token = "0x600197B")]
		[Address(RVA = "0xAE9464", Offset = "0xAE9464", VA = "0xAE9464")]
		public static void MarkCurrentSceneDirty()
		{
		}

		[Token(Token = "0x600197C")]
		[Address(RVA = "0xAE9468", Offset = "0xAE9468", VA = "0xAE9468")]
		public static GameObject[] GetChildrenGameObjects(Transform parent)
		{
			return null;
		}

		[Token(Token = "0x600197D")]
		[Address(RVA = "0xAE956C", Offset = "0xAE956C", VA = "0xAE956C")]
		public static Transform[] GetChildrenTransforms(Transform parent)
		{
			return null;
		}

		[Token(Token = "0x600197E")]
		[Address(RVA = "0xAE9664", Offset = "0xAE9664", VA = "0xAE9664")]
		public static Vector3 RotateVectorAroundNormal(Vector3 vector, Vector3 normal, float angleDegree)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600197F")]
		[Address(RVA = "0xAE89A4", Offset = "0xAE89A4", VA = "0xAE89A4")]
		public static Mesh GetPrimitiveMesh(PrimitiveType type)
		{
			return null;
		}

		[Token(Token = "0x6001980")]
		public static void ShuffleList<T>(List<T> list)
		{
		}

		[Token(Token = "0x6001981")]
		[Address(RVA = "0xAE9744", Offset = "0xAE9744", VA = "0xAE9744")]
		public static int[] GetShuffleIndicesArray(int length)
		{
			return null;
		}

		[Token(Token = "0x6001982")]
		[Address(RVA = "0xAE9814", Offset = "0xAE9814", VA = "0xAE9814")]
		public static int[] GetIndicesArray(int length)
		{
			return null;
		}

		[Token(Token = "0x6001983")]
		public static void ResetArray<T>(ref T[] array, int count, T defaultValue)
		{
		}

		[Token(Token = "0x6001984")]
		public static bool EnsureArrayLength<T>(ref T[] array, int count)
		{
			return default(bool);
		}

		[Token(Token = "0x6001985")]
		[Address(RVA = "0xAE989C", Offset = "0xAE989C", VA = "0xAE989C")]
		public static float GetValueBilinear(float[] data, int width, int height, Vector2 uv)
		{
			return default(float);
		}

		[Token(Token = "0x6001986")]
		[Address(RVA = "0xAE9B3C", Offset = "0xAE9B3C", VA = "0xAE9B3C")]
		public static Color GetColorBilinear(Color[] textureData, int width, int height, Vector2 uv)
		{
			return default(Color);
		}

		[Token(Token = "0x6001987")]
		[Address(RVA = "0xAE9DEC", Offset = "0xAE9DEC", VA = "0xAE9DEC")]
		public static GameObject CreatePreviewGameObject(Mesh m, Material mat, Vector3 position)
		{
			return null;
		}

		[Token(Token = "0x6001988")]
		[Address(RVA = "0xAE9FE4", Offset = "0xAE9FE4", VA = "0xAE9FE4")]
		public static Camera CreatePreviewCamera(GameObject target, float distance, float padding)
		{
			return null;
		}

		[Token(Token = "0x6001989")]
		[Address(RVA = "0xAEA2F8", Offset = "0xAEA2F8", VA = "0xAEA2F8")]
		public static void EnsureDirectoryExists(string dir)
		{
		}

		[Token(Token = "0x600198A")]
		[Address(RVA = "0xAEA324", Offset = "0xAEA324", VA = "0xAEA324")]
		public static void SetStaticRecursively(GameObject g, bool isStatic)
		{
		}

		[Token(Token = "0x600198B")]
		public static void EnsureLengthSufficient<T>(List<T> list, int preferredLength) where T : UnityEngine.Object
		{
		}

		[Token(Token = "0x600198C")]
		[Address(RVA = "0xAEA328", Offset = "0xAEA328", VA = "0xAEA328")]
		public static void EnsureLengthSufficient(List<string> list, int preferredLength)
		{
		}

		[Token(Token = "0x600198D")]
		[Address(RVA = "0xAEA450", Offset = "0xAEA450", VA = "0xAEA450")]
		public static void EnsureLengthSufficient(List<bool> list, int preferredLength)
		{
		}

		[Token(Token = "0x600198E")]
		[Address(RVA = "0xAEA554", Offset = "0xAEA554", VA = "0xAEA554")]
		public static string Ellipsis(string s, int length)
		{
			return null;
		}

		[Token(Token = "0x600198F")]
		[Address(RVA = "0xAEA5D8", Offset = "0xAEA5D8", VA = "0xAEA5D8")]
		public static bool IsRectContainPointExclusive(Rect r, Vector2 p)
		{
			return default(bool);
		}

		[Token(Token = "0x6001990")]
		[Address(RVA = "0xAEA65C", Offset = "0xAEA65C", VA = "0xAEA65C")]
		public static Color GetColor(Color baseColor, float alpha)
		{
			return default(Color);
		}

		[Token(Token = "0x6001991")]
		[Address(RVA = "0xAEA664", Offset = "0xAEA664", VA = "0xAEA664")]
		public static Rect GetRectContainsPoints(params Vector2[] points)
		{
			return default(Rect);
		}

		[Token(Token = "0x6001992")]
		[Address(RVA = "0xAE0180", Offset = "0xAE0180", VA = "0xAE0180")]
		public static float InverseLerpUnclamped(float a, float b, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001993")]
		[Address(RVA = "0xAEA70C", Offset = "0xAEA70C", VA = "0xAEA70C")]
		public static Vector2 PointToNormalizedUnclampled(Rect r, Vector2 point)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001994")]
		[Address(RVA = "0xAEA7FC", Offset = "0xAEA7FC", VA = "0xAEA7FC")]
		public static Rect GetUvRect(Vector2 v0, Vector2 v1, Vector2 v2)
		{
			return default(Rect);
		}

		[Token(Token = "0x6001995")]
		[Address(RVA = "0xAEAA24", Offset = "0xAEAA24", VA = "0xAEAA24")]
		public static Gradient Clone(Gradient src)
		{
			return null;
		}

		[Token(Token = "0x6001996")]
		[Address(RVA = "0xAEAAC0", Offset = "0xAEAAC0", VA = "0xAEAAC0")]
		public static AnimationCurve Clone(AnimationCurve src)
		{
			return null;
		}

		[Token(Token = "0x6001997")]
		[Address(RVA = "0xAEABE4", Offset = "0xAEABE4", VA = "0xAEABE4")]
		public static bool IsPointInsideQuadXZ(Vector3 point, Vector3[] quad)
		{
			return default(bool);
		}

		[Token(Token = "0x6001998")]
		[Address(RVA = "0xAEADC0", Offset = "0xAEADC0", VA = "0xAEADC0")]
		public static void DestroyMeshArray(Mesh[] meshes)
		{
		}

		[Token(Token = "0x6001999")]
		[Address(RVA = "0xAEAE9C", Offset = "0xAEAE9C", VA = "0xAEAE9C")]
		public static Vector2 FlipY(Vector2 v)
		{
			return default(Vector2);
		}

		[Token(Token = "0x600199A")]
		[Address(RVA = "0xAEAEA8", Offset = "0xAEAEA8", VA = "0xAEAEA8")]
		public static bool IsPointInCircumcircle(Vector2 v0, Vector2 v1, Vector2 v2, Vector2 p)
		{
			return default(bool);
		}

		[Token(Token = "0x600199B")]
		[Address(RVA = "0xAEAFB0", Offset = "0xAEAFB0", VA = "0xAEAFB0")]
		public static bool IsPointInCircumcircleXZ(Vector3 v0, Vector3 v1, Vector3 v2, Vector3 p)
		{
			return default(bool);
		}

		[Token(Token = "0x600199C")]
		[Address(RVA = "0xAEB0BC", Offset = "0xAEB0BC", VA = "0xAEB0BC")]
		public static bool AreSetEqual(ushort[] setA, ushort[] setB)
		{
			return default(bool);
		}

		[Token(Token = "0x600199D")]
		public static void Distinct<T>(this List<T> list)
		{
		}

		[Token(Token = "0x600199E")]
		public static void AddIfNotContains<T>(this IList<T> list, IEnumerable<T> items)
		{
		}

		[Token(Token = "0x600199F")]
		public static void AddIfNotContains<T>(this IList<T> list, T item)
		{
		}

		[Token(Token = "0x60019A0")]
		[Address(RVA = "0xAEB178", Offset = "0xAEB178", VA = "0xAEB178")]
		public static Vector3 ToX0Y(this Vector2 v)
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x2000445")]
	public static class JVersionInfo
	{
		[Token(Token = "0x17000341")]
		public static string Code
		{
			[Token(Token = "0x60019A2")]
			[Address(RVA = "0xAEB1D4", Offset = "0xAEB1D4", VA = "0xAEB1D4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000342")]
		public static string ProductName
		{
			[Token(Token = "0x60019A3")]
			[Address(RVA = "0xAEB214", Offset = "0xAEB214", VA = "0xAEB214")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000343")]
		public static string ProductNameAndVersion
		{
			[Token(Token = "0x60019A4")]
			[Address(RVA = "0xAEB254", Offset = "0xAEB254", VA = "0xAEB254")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000344")]
		public static string ProductNameShort
		{
			[Token(Token = "0x60019A5")]
			[Address(RVA = "0xAEB2FC", Offset = "0xAEB2FC", VA = "0xAEB2FC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000345")]
		public static string ProductNameAndVersionShort
		{
			[Token(Token = "0x60019A6")]
			[Address(RVA = "0xAEB33C", Offset = "0xAEB33C", VA = "0xAEB33C")]
			get
			{
				return null;
			}
		}
	}
}
namespace OculusSampleFramework
{
	[Token(Token = "0x2000446")]
	public class ColorGrabbable : OVRGrabbable
	{
		[Token(Token = "0x4001C05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Color COLOR_GRAB;

		[Token(Token = "0x4001C06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly Color COLOR_HIGHLIGHT;

		[Token(Token = "0x4001C07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Color m_color;

		[Token(Token = "0x4001C08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private MeshRenderer[] m_meshRenderers;

		[Token(Token = "0x4001C09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool m_highlight;

		[Token(Token = "0x17000346")]
		public bool Highlight
		{
			[Token(Token = "0x60019A7")]
			[Address(RVA = "0xAEB3E4", Offset = "0xAEB3E4", VA = "0xAEB3E4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60019A8")]
			[Address(RVA = "0xAEB3EC", Offset = "0xAEB3EC", VA = "0xAEB3EC")]
			set
			{
			}
		}

		[Token(Token = "0x60019A9")]
		[Address(RVA = "0xAEB3F8", Offset = "0xAEB3F8", VA = "0xAEB3F8")]
		protected void UpdateColor()
		{
		}

		[Token(Token = "0x60019AA")]
		[Address(RVA = "0xAEB598", Offset = "0xAEB598", VA = "0xAEB598", Slot = "4")]
		public override void GrabBegin(OVRGrabber hand, Collider grabPoint)
		{
		}

		[Token(Token = "0x60019AB")]
		[Address(RVA = "0xAEB5B4", Offset = "0xAEB5B4", VA = "0xAEB5B4", Slot = "5")]
		public override void GrabEnd(Vector3 linearVelocity, Vector3 angularVelocity)
		{
		}

		[Token(Token = "0x60019AC")]
		[Address(RVA = "0xAEB5D0", Offset = "0xAEB5D0", VA = "0xAEB5D0")]
		private void Awake()
		{
		}

		[Token(Token = "0x60019AD")]
		[Address(RVA = "0xAEB4A4", Offset = "0xAEB4A4", VA = "0xAEB4A4")]
		private void SetColor(Color color)
		{
		}

		[Token(Token = "0x60019AE")]
		[Address(RVA = "0xAEB834", Offset = "0xAEB834", VA = "0xAEB834")]
		public ColorGrabbable()
		{
		}
	}
	[Token(Token = "0x2000447")]
	public class DistanceGrabbable : OVRGrabbable
	{
		[Token(Token = "0x4001C0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string m_materialColorField;

		[Token(Token = "0x4001C0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private GrabbableCrosshair m_crosshair;

		[Token(Token = "0x4001C0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private GrabManager m_crosshairManager;

		[Token(Token = "0x4001C0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Renderer m_renderer;

		[Token(Token = "0x4001C0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private MaterialPropertyBlock m_mpb;

		[Token(Token = "0x4001C0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool m_inRange;

		[Token(Token = "0x4001C10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		private bool m_targeted;

		[Token(Token = "0x17000347")]
		public bool InRange
		{
			[Token(Token = "0x60019B0")]
			[Address(RVA = "0xAEB8AC", Offset = "0xAEB8AC", VA = "0xAEB8AC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60019B1")]
			[Address(RVA = "0xAEB8B4", Offset = "0xAEB8B4", VA = "0xAEB8B4")]
			set
			{
			}
		}

		[Token(Token = "0x17000348")]
		public bool Targeted
		{
			[Token(Token = "0x60019B2")]
			[Address(RVA = "0xAEBA20", Offset = "0xAEBA20", VA = "0xAEBA20")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60019B3")]
			[Address(RVA = "0xAEBA28", Offset = "0xAEBA28", VA = "0xAEBA28")]
			set
			{
			}
		}

		[Token(Token = "0x60019B4")]
		[Address(RVA = "0xAEBA34", Offset = "0xAEBA34", VA = "0xAEBA34", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x60019B5")]
		[Address(RVA = "0xAEB8C0", Offset = "0xAEB8C0", VA = "0xAEB8C0")]
		private void RefreshCrosshair()
		{
		}

		[Token(Token = "0x60019B6")]
		[Address(RVA = "0xAEBBF0", Offset = "0xAEBBF0", VA = "0xAEBBF0")]
		public DistanceGrabbable()
		{
		}
	}
	[Token(Token = "0x2000448")]
	[RequireComponent(typeof(Rigidbody))]
	public class DistanceGrabber : OVRGrabber
	{
		[Token(Token = "0x4001C11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[SerializeField]
		private float m_spherecastRadius;

		[Token(Token = "0x4001C12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		private float m_noSnapThreshhold;

		[Token(Token = "0x4001C13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[SerializeField]
		private bool m_useSpherecast;

		[Token(Token = "0x4001C14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCD")]
		[SerializeField]
		public bool m_preventGrabThroughWalls;

		[Token(Token = "0x4001C15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		private float m_objectPullVelocity;

		[Token(Token = "0x4001C16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private float m_objectPullMaxRotationRate;

		[Token(Token = "0x4001C17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private bool m_movingObjectToHand;

		[Token(Token = "0x4001C18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[SerializeField]
		private float m_maxGrabDistance;

		[Token(Token = "0x4001C19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[SerializeField]
		private int m_grabObjectsInLayer;

		[Token(Token = "0x4001C1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		[SerializeField]
		private int m_obstructionLayer;

		[Token(Token = "0x4001C1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private DistanceGrabber m_otherHand;

		[Token(Token = "0x4001C1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		protected DistanceGrabbable m_target;

		[Token(Token = "0x4001C1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		protected Collider m_targetCollider;

		[Token(Token = "0x17000349")]
		public bool UseSpherecast
		{
			[Token(Token = "0x60019B7")]
			[Address(RVA = "0xAEBBF8", Offset = "0xAEBBF8", VA = "0xAEBBF8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60019B8")]
			[Address(RVA = "0xAEBC00", Offset = "0xAEBC00", VA = "0xAEBC00")]
			set
			{
			}
		}

		[Token(Token = "0x60019B9")]
		[Address(RVA = "0xAEBC1C", Offset = "0xAEBC1C", VA = "0xAEBC1C", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x60019BA")]
		[Address(RVA = "0xAEBE20", Offset = "0xAEBE20", VA = "0xAEBE20", Slot = "6")]
		public override void Update()
		{
		}

		[Token(Token = "0x60019BB")]
		[Address(RVA = "0xAEC6B4", Offset = "0xAEC6B4", VA = "0xAEC6B4", Slot = "7")]
		protected override void GrabBegin()
		{
		}

		[Token(Token = "0x60019BC")]
		[Address(RVA = "0xAECC08", Offset = "0xAECC08", VA = "0xAECC08", Slot = "8")]
		protected override void MoveGrabbedObject(Vector3 pos, Quaternion rot, bool forceTeleport = false)
		{
		}

		[Token(Token = "0x60019BD")]
		[Address(RVA = "0xAED018", Offset = "0xAED018", VA = "0xAED018")]
		private static DistanceGrabbable HitInfoToGrabbable(RaycastHit hitInfo)
		{
			return null;
		}

		[Token(Token = "0x60019BE")]
		[Address(RVA = "0xAEC028", Offset = "0xAEC028", VA = "0xAEC028")]
		protected bool FindTarget(out DistanceGrabbable dgOut, out Collider collOut)
		{
			return default(bool);
		}

		[Token(Token = "0x60019BF")]
		[Address(RVA = "0xAED104", Offset = "0xAED104", VA = "0xAED104")]
		protected bool FindTargetWithSpherecast(out DistanceGrabbable dgOut, out Collider collOut)
		{
			return default(bool);
		}

		[Token(Token = "0x60019C0")]
		[Address(RVA = "0xAED4A4", Offset = "0xAED4A4", VA = "0xAED4A4", Slot = "9")]
		protected override void GrabVolumeEnable(bool enabled)
		{
		}

		[Token(Token = "0x60019C1")]
		[Address(RVA = "0xAED4BC", Offset = "0xAED4BC", VA = "0xAED4BC", Slot = "10")]
		protected override void OffhandGrabbed(OVRGrabbable grabbable)
		{
		}

		[Token(Token = "0x60019C2")]
		[Address(RVA = "0xAED4C4", Offset = "0xAED4C4", VA = "0xAED4C4")]
		public DistanceGrabber()
		{
		}
	}
	[Token(Token = "0x2000449")]
	public class GrabbableCrosshair : MonoBehaviour
	{
		[Token(Token = "0x200044A")]
		public enum CrosshairState
		{
			[Token(Token = "0x4001C23")]
			Disabled,
			[Token(Token = "0x4001C24")]
			Enabled,
			[Token(Token = "0x4001C25")]
			Targeted
		}

		[Token(Token = "0x4001C1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private CrosshairState m_state;

		[Token(Token = "0x4001C1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Transform m_centerEyeAnchor;

		[Token(Token = "0x4001C20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private GameObject m_targetedCrosshair;

		[Token(Token = "0x4001C21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private GameObject m_enabledCrosshair;

		[Token(Token = "0x60019C3")]
		[Address(RVA = "0xAED4E4", Offset = "0xAED4E4", VA = "0xAED4E4")]
		private void Start()
		{
		}

		[Token(Token = "0x60019C4")]
		[Address(RVA = "0xAEBB64", Offset = "0xAEBB64", VA = "0xAEBB64")]
		public void SetState(CrosshairState cs)
		{
		}

		[Token(Token = "0x60019C5")]
		[Address(RVA = "0xAED544", Offset = "0xAED544", VA = "0xAED544")]
		private void Update()
		{
		}

		[Token(Token = "0x60019C6")]
		[Address(RVA = "0xAED57C", Offset = "0xAED57C", VA = "0xAED57C")]
		public GrabbableCrosshair()
		{
		}
	}
	[Token(Token = "0x200044B")]
	public class GrabManager : MonoBehaviour
	{
		[Token(Token = "0x4001C26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Collider m_grabVolume;

		[Token(Token = "0x4001C27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color OutlineColorInRange;

		[Token(Token = "0x4001C28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Color OutlineColorHighlighted;

		[Token(Token = "0x4001C29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Color OutlineColorOutOfRange;

		[Token(Token = "0x60019C7")]
		[Address(RVA = "0xAED584", Offset = "0xAED584", VA = "0xAED584")]
		private void OnTriggerEnter(Collider otherCollider)
		{
		}

		[Token(Token = "0x60019C8")]
		[Address(RVA = "0xAED630", Offset = "0xAED630", VA = "0xAED630")]
		private void OnTriggerExit(Collider otherCollider)
		{
		}

		[Token(Token = "0x60019C9")]
		[Address(RVA = "0xAED6D8", Offset = "0xAED6D8", VA = "0xAED6D8")]
		public GrabManager()
		{
		}
	}
	[Token(Token = "0x200044C")]
	public class PauseOnInputLoss : MonoBehaviour
	{
		[Token(Token = "0x60019CA")]
		[Address(RVA = "0xAED6E0", Offset = "0xAED6E0", VA = "0xAED6E0")]
		private void Start()
		{
		}

		[Token(Token = "0x60019CB")]
		[Address(RVA = "0xAED7CC", Offset = "0xAED7CC", VA = "0xAED7CC")]
		private void OnInputFocusLost()
		{
		}

		[Token(Token = "0x60019CC")]
		[Address(RVA = "0xAED7D8", Offset = "0xAED7D8", VA = "0xAED7D8")]
		private void OnInputFocusAcquired()
		{
		}

		[Token(Token = "0x60019CD")]
		[Address(RVA = "0xAED7E4", Offset = "0xAED7E4", VA = "0xAED7E4")]
		public PauseOnInputLoss()
		{
		}
	}
	[Token(Token = "0x200044D")]
	public class BoneCapsuleTriggerLogic : MonoBehaviour
	{
		[Token(Token = "0x4001C2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InteractableToolTags ToolTags;

		[Token(Token = "0x4001C2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HashSet<ColliderZone> CollidersTouchingUs;

		[Token(Token = "0x4001C2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<ColliderZone> _elementsToCleanUp;

		[Token(Token = "0x60019CE")]
		[Address(RVA = "0xAED7EC", Offset = "0xAED7EC", VA = "0xAED7EC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60019CF")]
		[Address(RVA = "0xAED83C", Offset = "0xAED83C", VA = "0xAED83C")]
		private void Update()
		{
		}

		[Token(Token = "0x60019D0")]
		[Address(RVA = "0xAEDC04", Offset = "0xAEDC04", VA = "0xAEDC04")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x60019D1")]
		[Address(RVA = "0xAEDCF0", Offset = "0xAEDCF0", VA = "0xAEDCF0")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x60019D2")]
		[Address(RVA = "0xAED840", Offset = "0xAED840", VA = "0xAED840")]
		private void CleanUpDeadColliders()
		{
		}

		[Token(Token = "0x60019D3")]
		[Address(RVA = "0xAEDDDC", Offset = "0xAEDDDC", VA = "0xAEDDDC")]
		public BoneCapsuleTriggerLogic()
		{
		}
	}
	[Token(Token = "0x200044E")]
	public class ButtonController : Interactable
	{
		[Token(Token = "0x200044F")]
		public enum ContactTest
		{
			[Token(Token = "0x4001C3C")]
			PerpenTest,
			[Token(Token = "0x4001C3D")]
			BackwardsPress
		}

		[Token(Token = "0x4001C2D")]
		private const float ENTRY_DOT_THRESHOLD = 0.8f;

		[Token(Token = "0x4001C2E")]
		private const float PERP_DOT_THRESHOLD = 0.5f;

		[Token(Token = "0x4001C2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private GameObject _proximityZone;

		[Token(Token = "0x4001C30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private GameObject _contactZone;

		[Token(Token = "0x4001C31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private GameObject _actionZone;

		[Token(Token = "0x4001C32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private ContactTest[] _contactTests;

		[Token(Token = "0x4001C33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private Transform _buttonPlaneCenter;

		[Token(Token = "0x4001C34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private bool _makeSureToolIsOnPositiveSide;

		[Token(Token = "0x4001C35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[SerializeField]
		private Vector3 _localButtonDirection;

		[Token(Token = "0x4001C36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private InteractableToolTags[] _allValidToolsTags;

		[Token(Token = "0x4001C37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private int _toolTagsMask;

		[Token(Token = "0x4001C38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[SerializeField]
		private bool _allowMultipleNearFieldInteraction;

		[Token(Token = "0x4001C3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Dictionary<InteractableTool, InteractableState> _toolToState;

		[Token(Token = "0x1700034A")]
		public override int ValidToolTagsMask
		{
			[Token(Token = "0x60019D4")]
			[Address(RVA = "0xAEDE9C", Offset = "0xAEDE9C", VA = "0xAEDE9C", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700034B")]
		public Vector3 LocalButtonDirection
		{
			[Token(Token = "0x60019D5")]
			[Address(RVA = "0xAEDEA4", Offset = "0xAEDEA4", VA = "0xAEDEA4")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700034C")]
		public InteractableState CurrentButtonState
		{
			[Token(Token = "0x60019D6")]
			[Address(RVA = "0xAEDEB0", Offset = "0xAEDEB0", VA = "0xAEDEB0")]
			[CompilerGenerated]
			get
			{
				return default(InteractableState);
			}
			[Token(Token = "0x60019D7")]
			[Address(RVA = "0xAEDEB8", Offset = "0xAEDEB8", VA = "0xAEDEB8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60019D8")]
		[Address(RVA = "0xAEDEC0", Offset = "0xAEDEC0", VA = "0xAEDEC0", Slot = "9")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x60019D9")]
		[Address(RVA = "0xAEDFF0", Offset = "0xAEDFF0", VA = "0xAEDFF0")]
		private void FireInteractionEventsOnDepth(InteractableCollisionDepth oldDepth, InteractableTool collidingTool, InteractionType interactionType)
		{
		}

		[Token(Token = "0x60019DA")]
		[Address(RVA = "0xAEE1E0", Offset = "0xAEE1E0", VA = "0xAEE1E0", Slot = "8")]
		public override void UpdateCollisionDepth(InteractableTool interactableTool, InteractableCollisionDepth oldCollisionDepth, InteractableCollisionDepth newCollisionDepth)
		{
		}

		[Token(Token = "0x60019DB")]
		[Address(RVA = "0xAEE7A4", Offset = "0xAEE7A4", VA = "0xAEE7A4")]
		private InteractableState GetUpcomingStateNearField(InteractableState oldState, InteractableCollisionDepth newCollisionDepth, bool toolIsInActionZone, bool toolIsInContactZone, bool toolIsInProximity, bool validContact, bool onPositiveSideOfInteractable)
		{
			return default(InteractableState);
		}

		[Token(Token = "0x60019DC")]
		[Address(RVA = "0xAEE8E8", Offset = "0xAEE8E8", VA = "0xAEE8E8")]
		public void ForceResetButton()
		{
		}

		[Token(Token = "0x60019DD")]
		[Address(RVA = "0xAEE6C8", Offset = "0xAEE6C8", VA = "0xAEE6C8")]
		private bool IsValidContact(InteractableTool collidingTool, Vector3 buttonDirection)
		{
			return default(bool);
		}

		[Token(Token = "0x60019DE")]
		[Address(RVA = "0xAEE9F4", Offset = "0xAEE9F4", VA = "0xAEE9F4")]
		private bool PassEntryTest(InteractableTool collidingTool, Vector3 buttonDirection)
		{
			return default(bool);
		}

		[Token(Token = "0x60019DF")]
		[Address(RVA = "0xAEEB00", Offset = "0xAEEB00", VA = "0xAEEB00")]
		private bool PassPerpTest(InteractableTool collidingTool, Vector3 buttonDirection)
		{
			return default(bool);
		}

		[Token(Token = "0x60019E0")]
		[Address(RVA = "0xAEEB88", Offset = "0xAEEB88", VA = "0xAEEB88")]
		public ButtonController()
		{
		}
	}
	[Token(Token = "0x2000450")]
	public class ButtonTriggerZone : MonoBehaviour, ColliderZone
	{
		[Token(Token = "0x4001C3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject _parentInteractableObj;

		[Token(Token = "0x1700034D")]
		public Collider Collider
		{
			[Token(Token = "0x60019E1")]
			[Address(RVA = "0xAEEC94", Offset = "0xAEEC94", VA = "0xAEEC94", Slot = "4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60019E2")]
			[Address(RVA = "0xAEEC9C", Offset = "0xAEEC9C", VA = "0xAEEC9C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700034E")]
		public Interactable ParentInteractable
		{
			[Token(Token = "0x60019E3")]
			[Address(RVA = "0xAEECA4", Offset = "0xAEECA4", VA = "0xAEECA4", Slot = "5")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60019E4")]
			[Address(RVA = "0xAEECAC", Offset = "0xAEECAC", VA = "0xAEECAC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700034F")]
		public InteractableCollisionDepth CollisionDepth
		{
			[Token(Token = "0x60019E5")]
			[Address(RVA = "0xAEECB4", Offset = "0xAEECB4", VA = "0xAEECB4", Slot = "6")]
			get
			{
				return default(InteractableCollisionDepth);
			}
		}

		[Token(Token = "0x60019E6")]
		[Address(RVA = "0xAEED04", Offset = "0xAEED04", VA = "0xAEED04")]
		private void Awake()
		{
		}

		[Token(Token = "0x60019E7")]
		[Address(RVA = "0xAEED84", Offset = "0xAEED84", VA = "0xAEED84")]
		public ButtonTriggerZone()
		{
		}
	}
	[Token(Token = "0x2000451")]
	public interface ColliderZone
	{
		[Token(Token = "0x17000350")]
		Collider Collider
		{
			[Token(Token = "0x60019E8")]
			get;
		}

		[Token(Token = "0x17000351")]
		Interactable ParentInteractable
		{
			[Token(Token = "0x60019E9")]
			get;
		}

		[Token(Token = "0x17000352")]
		InteractableCollisionDepth CollisionDepth
		{
			[Token(Token = "0x60019EA")]
			get;
		}
	}
	[Token(Token = "0x2000452")]
	public class ColliderZoneArgs : EventArgs
	{
		[Token(Token = "0x4001C41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly ColliderZone Collider;

		[Token(Token = "0x4001C42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly float FrameTime;

		[Token(Token = "0x4001C43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly InteractableTool CollidingTool;

		[Token(Token = "0x4001C44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly InteractionType InteractionT;

		[Token(Token = "0x60019EB")]
		[Address(RVA = "0xAEE14C", Offset = "0xAEE14C", VA = "0xAEE14C")]
		public ColliderZoneArgs(ColliderZone collider, float frameTime, InteractableTool collidingTool, InteractionType interactionType)
		{
		}
	}
	[Token(Token = "0x2000453")]
	public enum InteractionType
	{
		[Token(Token = "0x4001C46")]
		Enter,
		[Token(Token = "0x4001C47")]
		Stay,
		[Token(Token = "0x4001C48")]
		Exit
	}
	[Token(Token = "0x2000454")]
	public class HandsManager : MonoBehaviour
	{
		[Token(Token = "0x2000455")]
		public enum HandsVisualMode
		{
			[Token(Token = "0x4001C5A")]
			Mesh,
			[Token(Token = "0x4001C5B")]
			Skeleton,
			[Token(Token = "0x4001C5C")]
			Both
		}

		[Token(Token = "0x2000456")]
		[CompilerGenerated]
		private sealed class <FindSkeletonVisualGameObjects>d__52 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001C5D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001C5E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001C5F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HandsManager <>4__this;

			[Token(Token = "0x1700035E")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001A0D")]
				[Address(RVA = "0xAF00E0", Offset = "0xAF00E0", VA = "0xAF00E0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700035F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001A0F")]
				[Address(RVA = "0xAF0128", Offset = "0xAF0128", VA = "0xAF0128", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001A0A")]
			[Address(RVA = "0xAEF74C", Offset = "0xAEF74C", VA = "0xAEF74C")]
			[DebuggerHidden]
			public <FindSkeletonVisualGameObjects>d__52(int <>1__state)
			{
			}

			[Token(Token = "0x6001A0B")]
			[Address(RVA = "0xAEFEF4", Offset = "0xAEFEF4", VA = "0xAEFEF4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001A0C")]
			[Address(RVA = "0xAEFEF8", Offset = "0xAEFEF8", VA = "0xAEFEF8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001A0E")]
			[Address(RVA = "0xAF00E8", Offset = "0xAF00E8", VA = "0xAF00E8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001C49")]
		private const string SKELETON_VISUALIZER_NAME = "SkeletonRenderer";

		[Token(Token = "0x4001C4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject _leftHand;

		[Token(Token = "0x4001C4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GameObject _rightHand;

		[Token(Token = "0x4001C4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public HandsVisualMode VisualMode;

		[Token(Token = "0x4001C4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private OVRHand[] _hand;

		[Token(Token = "0x4001C4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private OVRSkeleton[] _handSkeleton;

		[Token(Token = "0x4001C4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private OVRSkeletonRenderer[] _handSkeletonRenderer;

		[Token(Token = "0x4001C50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private OVRMesh[] _handMesh;

		[Token(Token = "0x4001C51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private OVRMeshRenderer[] _handMeshRenderer;

		[Token(Token = "0x4001C52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private SkinnedMeshRenderer _leftMeshRenderer;

		[Token(Token = "0x4001C53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private SkinnedMeshRenderer _rightMeshRenderer;

		[Token(Token = "0x4001C54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject _leftSkeletonVisual;

		[Token(Token = "0x4001C55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GameObject _rightSkeletonVisual;

		[Token(Token = "0x4001C56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float _currentHandAlpha;

		[Token(Token = "0x4001C57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private int HandAlphaId;

		[Token(Token = "0x17000353")]
		public OVRHand RightHand
		{
			[Token(Token = "0x60019EC")]
			[Address(RVA = "0xAEED8C", Offset = "0xAEED8C", VA = "0xAEED8C")]
			get
			{
				return null;
			}
			[Token(Token = "0x60019ED")]
			[Address(RVA = "0xAEEDB8", Offset = "0xAEEDB8", VA = "0xAEEDB8")]
			private set
			{
			}
		}

		[Token(Token = "0x17000354")]
		public OVRSkeleton RightHandSkeleton
		{
			[Token(Token = "0x60019EE")]
			[Address(RVA = "0xAEEE14", Offset = "0xAEEE14", VA = "0xAEEE14")]
			get
			{
				return null;
			}
			[Token(Token = "0x60019EF")]
			[Address(RVA = "0xAEEE40", Offset = "0xAEEE40", VA = "0xAEEE40")]
			private set
			{
			}
		}

		[Token(Token = "0x17000355")]
		public OVRSkeletonRenderer RightHandSkeletonRenderer
		{
			[Token(Token = "0x60019F0")]
			[Address(RVA = "0xAEEE9C", Offset = "0xAEEE9C", VA = "0xAEEE9C")]
			get
			{
				return null;
			}
			[Token(Token = "0x60019F1")]
			[Address(RVA = "0xAEEEC8", Offset = "0xAEEEC8", VA = "0xAEEEC8")]
			private set
			{
			}
		}

		[Token(Token = "0x17000356")]
		public OVRMesh RightHandMesh
		{
			[Token(Token = "0x60019F2")]
			[Address(RVA = "0xAEEF24", Offset = "0xAEEF24", VA = "0xAEEF24")]
			get
			{
				return null;
			}
			[Token(Token = "0x60019F3")]
			[Address(RVA = "0xAEEF50", Offset = "0xAEEF50", VA = "0xAEEF50")]
			private set
			{
			}
		}

		[Token(Token = "0x17000357")]
		public OVRMeshRenderer RightHandMeshRenderer
		{
			[Token(Token = "0x60019F4")]
			[Address(RVA = "0xAEEFAC", Offset = "0xAEEFAC", VA = "0xAEEFAC")]
			get
			{
				return null;
			}
			[Token(Token = "0x60019F5")]
			[Address(RVA = "0xAEEFD8", Offset = "0xAEEFD8", VA = "0xAEEFD8")]
			private set
			{
			}
		}

		[Token(Token = "0x17000358")]
		public OVRHand LeftHand
		{
			[Token(Token = "0x60019F6")]
			[Address(RVA = "0xAEF034", Offset = "0xAEF034", VA = "0xAEF034")]
			get
			{
				return null;
			}
			[Token(Token = "0x60019F7")]
			[Address(RVA = "0xAEF05C", Offset = "0xAEF05C", VA = "0xAEF05C")]
			private set
			{
			}
		}

		[Token(Token = "0x17000359")]
		public OVRSkeleton LeftHandSkeleton
		{
			[Token(Token = "0x60019F8")]
			[Address(RVA = "0xAEF0B4", Offset = "0xAEF0B4", VA = "0xAEF0B4")]
			get
			{
				return null;
			}
			[Token(Token = "0x60019F9")]
			[Address(RVA = "0xAEF0DC", Offset = "0xAEF0DC", VA = "0xAEF0DC")]
			private set
			{
			}
		}

		[Token(Token = "0x1700035A")]
		public OVRSkeletonRenderer LeftHandSkeletonRenderer
		{
			[Token(Token = "0x60019FA")]
			[Address(RVA = "0xAEF134", Offset = "0xAEF134", VA = "0xAEF134")]
			get
			{
				return null;
			}
			[Token(Token = "0x60019FB")]
			[Address(RVA = "0xAEF15C", Offset = "0xAEF15C", VA = "0xAEF15C")]
			private set
			{
			}
		}

		[Token(Token = "0x1700035B")]
		public OVRMesh LeftHandMesh
		{
			[Token(Token = "0x60019FC")]
			[Address(RVA = "0xAEF1B4", Offset = "0xAEF1B4", VA = "0xAEF1B4")]
			get
			{
				return null;
			}
			[Token(Token = "0x60019FD")]
			[Address(RVA = "0xAEF1DC", Offset = "0xAEF1DC", VA = "0xAEF1DC")]
			private set
			{
			}
		}

		[Token(Token = "0x1700035C")]
		public OVRMeshRenderer LeftHandMeshRenderer
		{
			[Token(Token = "0x60019FE")]
			[Address(RVA = "0xAEF234", Offset = "0xAEF234", VA = "0xAEF234")]
			get
			{
				return null;
			}
			[Token(Token = "0x60019FF")]
			[Address(RVA = "0xAEF25C", Offset = "0xAEF25C", VA = "0xAEF25C")]
			private set
			{
			}
		}

		[Token(Token = "0x1700035D")]
		public static HandsManager Instance
		{
			[Token(Token = "0x6001A00")]
			[Address(RVA = "0xAEF2B4", Offset = "0xAEF2B4", VA = "0xAEF2B4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001A01")]
			[Address(RVA = "0xAEF2FC", Offset = "0xAEF2FC", VA = "0xAEF2FC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6001A02")]
		[Address(RVA = "0xAEF348", Offset = "0xAEF348", VA = "0xAEF348")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001A03")]
		[Address(RVA = "0xAEF6D0", Offset = "0xAEF6D0", VA = "0xAEF6D0")]
		private void Update()
		{
		}

		[Token(Token = "0x6001A04")]
		[Address(RVA = "0xAEF668", Offset = "0xAEF668", VA = "0xAEF668")]
		[IteratorStateMachine(typeof(<FindSkeletonVisualGameObjects>d__52))]
		private IEnumerator FindSkeletonVisualGameObjects()
		{
			return null;
		}

		[Token(Token = "0x6001A05")]
		[Address(RVA = "0xAEF774", Offset = "0xAEF774", VA = "0xAEF774")]
		public void SwitchVisualization()
		{
		}

		[Token(Token = "0x6001A06")]
		[Address(RVA = "0xAEF838", Offset = "0xAEF838", VA = "0xAEF838")]
		private void SetToCurrentVisualMode()
		{
		}

		[Token(Token = "0x6001A07")]
		[Address(RVA = "0xAEFA08", Offset = "0xAEFA08", VA = "0xAEFA08")]
		public static List<OVRBoneCapsule> GetCapsulesPerBone(OVRSkeleton skeleton, OVRSkeleton.BoneId boneId)
		{
			return null;
		}

		[Token(Token = "0x6001A08")]
		[Address(RVA = "0xAEFC68", Offset = "0xAEFC68", VA = "0xAEFC68")]
		public bool IsInitialized()
		{
			return default(bool);
		}

		[Token(Token = "0x6001A09")]
		[Address(RVA = "0xAEFDC8", Offset = "0xAEFDC8", VA = "0xAEFDC8")]
		public HandsManager()
		{
		}
	}
	[Token(Token = "0x2000457")]
	public abstract class Interactable : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000458")]
		public class InteractableStateArgsEvent : UnityEvent<InteractableStateArgs>
		{
			[Token(Token = "0x6001A21")]
			[Address(RVA = "0xAF0778", Offset = "0xAF0778", VA = "0xAF0778")]
			public InteractableStateArgsEvent()
			{
			}
		}

		[Token(Token = "0x4001C60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected ColliderZone _proximityZoneCollider;

		[Token(Token = "0x4001C61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected ColliderZone _contactZoneCollider;

		[Token(Token = "0x4001C62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected ColliderZone _actionZoneCollider;

		[Token(Token = "0x4001C66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public InteractableStateArgsEvent InteractableStateChanged;

		[Token(Token = "0x17000360")]
		public ColliderZone ProximityCollider
		{
			[Token(Token = "0x6001A10")]
			[Address(RVA = "0xAF0130", Offset = "0xAF0130", VA = "0xAF0130")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000361")]
		public ColliderZone ContactCollider
		{
			[Token(Token = "0x6001A11")]
			[Address(RVA = "0xAF0138", Offset = "0xAF0138", VA = "0xAF0138")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000362")]
		public ColliderZone ActionCollider
		{
			[Token(Token = "0x6001A12")]
			[Address(RVA = "0xAF0140", Offset = "0xAF0140", VA = "0xAF0140")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000363")]
		public virtual int ValidToolTagsMask
		{
			[Token(Token = "0x6001A13")]
			[Address(RVA = "0xAF0148", Offset = "0xAF0148", VA = "0xAF0148", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x14000021")]
		public event Action<ColliderZoneArgs> ProximityZoneEvent
		{
			[Token(Token = "0x6001A14")]
			[Address(RVA = "0xAF0150", Offset = "0xAF0150", VA = "0xAF0150")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001A15")]
			[Address(RVA = "0xAF0200", Offset = "0xAF0200", VA = "0xAF0200")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000022")]
		public event Action<ColliderZoneArgs> ContactZoneEvent
		{
			[Token(Token = "0x6001A17")]
			[Address(RVA = "0xAF02CC", Offset = "0xAF02CC", VA = "0xAF02CC")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001A18")]
			[Address(RVA = "0xAF037C", Offset = "0xAF037C", VA = "0xAF037C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000023")]
		public event Action<ColliderZoneArgs> ActionZoneEvent
		{
			[Token(Token = "0x6001A1A")]
			[Address(RVA = "0xAF0448", Offset = "0xAF0448", VA = "0xAF0448")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001A1B")]
			[Address(RVA = "0xAF04F8", Offset = "0xAF04F8", VA = "0xAF04F8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6001A16")]
		[Address(RVA = "0xAF02B0", Offset = "0xAF02B0", VA = "0xAF02B0", Slot = "5")]
		protected virtual void OnProximityZoneEvent(ColliderZoneArgs args)
		{
		}

		[Token(Token = "0x6001A19")]
		[Address(RVA = "0xAF042C", Offset = "0xAF042C", VA = "0xAF042C", Slot = "6")]
		protected virtual void OnContactZoneEvent(ColliderZoneArgs args)
		{
		}

		[Token(Token = "0x6001A1C")]
		[Address(RVA = "0xAF05A8", Offset = "0xAF05A8", VA = "0xAF05A8", Slot = "7")]
		protected virtual void OnActionZoneEvent(ColliderZoneArgs args)
		{
		}

		[Token(Token = "0x6001A1D")]
		public abstract void UpdateCollisionDepth(InteractableTool interactableTool, InteractableCollisionDepth oldCollisionDepth, InteractableCollisionDepth newCollisionDepth);

		[Token(Token = "0x6001A1E")]
		[Address(RVA = "0xAEDF9C", Offset = "0xAEDF9C", VA = "0xAEDF9C", Slot = "9")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6001A1F")]
		[Address(RVA = "0xAF0674", Offset = "0xAF0674", VA = "0xAF0674", Slot = "10")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6001A20")]
		[Address(RVA = "0xAEEC8C", Offset = "0xAEEC8C", VA = "0xAEEC8C")]
		protected Interactable()
		{
		}
	}
	[Token(Token = "0x2000459")]
	public enum InteractableCollisionDepth
	{
		[Token(Token = "0x4001C68")]
		None,
		[Token(Token = "0x4001C69")]
		Proximity,
		[Token(Token = "0x4001C6A")]
		Contact,
		[Token(Token = "0x4001C6B")]
		Action
	}
	[Token(Token = "0x200045A")]
	public enum InteractableState
	{
		[Token(Token = "0x4001C6D")]
		Default,
		[Token(Token = "0x4001C6E")]
		ProximityState,
		[Token(Token = "0x4001C6F")]
		ContactState,
		[Token(Token = "0x4001C70")]
		ActionState
	}
	[Token(Token = "0x200045B")]
	public class InteractableStateArgs : EventArgs
	{
		[Token(Token = "0x4001C71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly Interactable Interactable;

		[Token(Token = "0x4001C72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly InteractableTool Tool;

		[Token(Token = "0x4001C73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly InteractableState OldInteractableState;

		[Token(Token = "0x4001C74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public readonly InteractableState NewInteractableState;

		[Token(Token = "0x4001C75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly ColliderZoneArgs ColliderArgs;

		[Token(Token = "0x6001A22")]
		[Address(RVA = "0xAEE854", Offset = "0xAEE854", VA = "0xAEE854")]
		public InteractableStateArgs(Interactable interactable, InteractableTool tool, InteractableState newInteractableState, InteractableState oldState, ColliderZoneArgs colliderArgs)
		{
		}
	}
	[Token(Token = "0x200045C")]
	public class InteractableRegistry : MonoBehaviour
	{
		[Token(Token = "0x4001C76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static HashSet<Interactable> _interactables;

		[Token(Token = "0x17000364")]
		public static HashSet<Interactable> Interactables
		{
			[Token(Token = "0x6001A23")]
			[Address(RVA = "0xAF07C0", Offset = "0xAF07C0", VA = "0xAF07C0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001A24")]
		[Address(RVA = "0xAF05C4", Offset = "0xAF05C4", VA = "0xAF05C4")]
		public static void RegisterInteractable(Interactable interactable)
		{
		}

		[Token(Token = "0x6001A25")]
		[Address(RVA = "0xAF06C8", Offset = "0xAF06C8", VA = "0xAF06C8")]
		public static void UnregisterInteractable(Interactable interactable)
		{
		}

		[Token(Token = "0x6001A26")]
		[Address(RVA = "0xAF0818", Offset = "0xAF0818", VA = "0xAF0818")]
		public InteractableRegistry()
		{
		}
	}
	[Token(Token = "0x200045D")]
	public class InteractableToolsCreator : MonoBehaviour
	{
		[Token(Token = "0x200045E")]
		[CompilerGenerated]
		private sealed class <AttachToolsToHands>d__3 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001C79")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001C7A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001C7B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Transform[] toolObjects;

			[Token(Token = "0x4001C7C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public bool isRightHand;

			[Token(Token = "0x4001C7D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public InteractableToolsCreator <>4__this;

			[Token(Token = "0x4001C7E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private HandsManager <handsManagerObj>5__2;

			[Token(Token = "0x4001C7F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private HashSet<Transform>.Enumerator <>7__wrap2;

			[Token(Token = "0x4001C80")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private Transform <toolObject>5__4;

			[Token(Token = "0x4001C81")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private OVRSkeleton <handSkeletonToAttachTo>5__5;

			[Token(Token = "0x17000365")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001A30")]
				[Address(RVA = "0xAF0F2C", Offset = "0xAF0F2C", VA = "0xAF0F2C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000366")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001A32")]
				[Address(RVA = "0xAF0F74", Offset = "0xAF0F74", VA = "0xAF0F74", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001A2C")]
			[Address(RVA = "0xAF099C", Offset = "0xAF099C", VA = "0xAF099C")]
			[DebuggerHidden]
			public <AttachToolsToHands>d__3(int <>1__state)
			{
			}

			[Token(Token = "0x6001A2D")]
			[Address(RVA = "0xAF0AD8", Offset = "0xAF0AD8", VA = "0xAF0AD8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001A2E")]
			[Address(RVA = "0xAF0AF4", Offset = "0xAF0AF4", VA = "0xAF0AF4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001A2F")]
			[Address(RVA = "0xAF0EDC", Offset = "0xAF0EDC", VA = "0xAF0EDC")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6001A31")]
			[Address(RVA = "0xAF0F34", Offset = "0xAF0F34", VA = "0xAF0F34", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001C77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Transform[] LeftHandTools;

		[Token(Token = "0x4001C78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Transform[] RightHandTools;

		[Token(Token = "0x6001A28")]
		[Address(RVA = "0xAF08AC", Offset = "0xAF08AC", VA = "0xAF08AC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001A29")]
		[Address(RVA = "0xAF0918", Offset = "0xAF0918", VA = "0xAF0918")]
		[IteratorStateMachine(typeof(<AttachToolsToHands>d__3))]
		private IEnumerator AttachToolsToHands(Transform[] toolObjects, bool isRightHand)
		{
			return null;
		}

		[Token(Token = "0x6001A2A")]
		[Address(RVA = "0xAF09C4", Offset = "0xAF09C4", VA = "0xAF09C4")]
		private void AttachToolToHandTransform(Transform tool, bool isRightHanded)
		{
		}

		[Token(Token = "0x6001A2B")]
		[Address(RVA = "0xAF0AD0", Offset = "0xAF0AD0", VA = "0xAF0AD0")]
		public InteractableToolsCreator()
		{
		}
	}
	[Token(Token = "0x200045F")]
	public class InteractableToolsInputRouter : MonoBehaviour
	{
		[Token(Token = "0x4001C82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static InteractableToolsInputRouter _instance;

		[Token(Token = "0x4001C83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool _leftPinch;

		[Token(Token = "0x4001C84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		private bool _rightPinch;

		[Token(Token = "0x4001C85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private HashSet<InteractableTool> _leftHandNearTools;

		[Token(Token = "0x4001C86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private HashSet<InteractableTool> _leftHandFarTools;

		[Token(Token = "0x4001C87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private HashSet<InteractableTool> _rightHandNearTools;

		[Token(Token = "0x4001C88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private HashSet<InteractableTool> _rightHandFarTools;

		[Token(Token = "0x17000367")]
		public static InteractableToolsInputRouter Instance
		{
			[Token(Token = "0x6001A33")]
			[Address(RVA = "0xAF0F7C", Offset = "0xAF0F7C", VA = "0xAF0F7C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001A34")]
		[Address(RVA = "0xAF10C8", Offset = "0xAF10C8", VA = "0xAF10C8")]
		public void RegisterInteractableTool(InteractableTool interactableTool)
		{
		}

		[Token(Token = "0x6001A35")]
		[Address(RVA = "0xAF1164", Offset = "0xAF1164", VA = "0xAF1164")]
		public void UnregisterInteractableTool(InteractableTool interactableTool)
		{
		}

		[Token(Token = "0x6001A36")]
		[Address(RVA = "0xAF1200", Offset = "0xAF1200", VA = "0xAF1200")]
		private void Update()
		{
		}

		[Token(Token = "0x6001A37")]
		[Address(RVA = "0xAF149C", Offset = "0xAF149C", VA = "0xAF149C")]
		private bool UpdateToolsAndEnableState(HashSet<InteractableTool> tools, bool toolsAreEnabledThisFrame)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A38")]
		[Address(RVA = "0xAF14D8", Offset = "0xAF14D8", VA = "0xAF14D8")]
		private bool UpdateTools(HashSet<InteractableTool> tools, bool resetCollisionData = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A39")]
		[Address(RVA = "0xAF1794", Offset = "0xAF1794", VA = "0xAF1794")]
		private void ToggleToolsEnableState(HashSet<InteractableTool> tools, bool enableState)
		{
		}

		[Token(Token = "0x6001A3A")]
		[Address(RVA = "0xAF199C", Offset = "0xAF199C", VA = "0xAF199C")]
		public InteractableToolsInputRouter()
		{
		}
	}
	[Token(Token = "0x2000460")]
	public class FingerTipPokeTool : InteractableTool
	{
		[Token(Token = "0x2000461")]
		[CompilerGenerated]
		private sealed class <AttachTriggerLogic>d__21 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001C94")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001C95")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001C96")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public FingerTipPokeTool <>4__this;

			[Token(Token = "0x1700036C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001A4C")]
				[Address(RVA = "0xAF2A88", Offset = "0xAF2A88", VA = "0xAF2A88", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700036D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001A4E")]
				[Address(RVA = "0xAF2AD0", Offset = "0xAF2AD0", VA = "0xAF2AD0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001A49")]
			[Address(RVA = "0xAF1BE0", Offset = "0xAF1BE0", VA = "0xAF1BE0")]
			[DebuggerHidden]
			public <AttachTriggerLogic>d__21(int <>1__state)
			{
			}

			[Token(Token = "0x6001A4A")]
			[Address(RVA = "0xAF2624", Offset = "0xAF2624", VA = "0xAF2624", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001A4B")]
			[Address(RVA = "0xAF2628", Offset = "0xAF2628", VA = "0xAF2628", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001A4D")]
			[Address(RVA = "0xAF2A90", Offset = "0xAF2A90", VA = "0xAF2A90", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001C89")]
		private const int NUM_VELOCITY_FRAMES = 10;

		[Token(Token = "0x4001C8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private FingerTipPokeToolView _fingerTipPokeToolView;

		[Token(Token = "0x4001C8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private OVRPlugin.HandFinger _fingerToFollow;

		[Token(Token = "0x4001C8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3[] _velocityFrames;

		[Token(Token = "0x4001C8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int _currVelocityFrame;

		[Token(Token = "0x4001C8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private bool _sampledMaxFramesAlready;

		[Token(Token = "0x4001C8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Vector3 _position;

		[Token(Token = "0x4001C90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private BoneCapsuleTriggerLogic[] _boneCapsuleTriggerLogic;

		[Token(Token = "0x4001C91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private float _lastScale;

		[Token(Token = "0x4001C92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private bool _isInitialized;

		[Token(Token = "0x4001C93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private OVRBoneCapsule _capsuleToTrack;

		[Token(Token = "0x17000368")]
		public override InteractableToolTags ToolTags
		{
			[Token(Token = "0x6001A3B")]
			[Address(RVA = "0xAF1A74", Offset = "0xAF1A74", VA = "0xAF1A74", Slot = "4")]
			get
			{
				return default(InteractableToolTags);
			}
		}

		[Token(Token = "0x17000369")]
		public override ToolInputState ToolInputState
		{
			[Token(Token = "0x6001A3C")]
			[Address(RVA = "0xAF1A7C", Offset = "0xAF1A7C", VA = "0xAF1A7C", Slot = "5")]
			get
			{
				return default(ToolInputState);
			}
		}

		[Token(Token = "0x1700036A")]
		public override bool IsFarFieldTool
		{
			[Token(Token = "0x6001A3D")]
			[Address(RVA = "0xAF1A84", Offset = "0xAF1A84", VA = "0xAF1A84", Slot = "6")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700036B")]
		public override bool EnableState
		{
			[Token(Token = "0x6001A3E")]
			[Address(RVA = "0xAF1A8C", Offset = "0xAF1A8C", VA = "0xAF1A8C", Slot = "10")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001A3F")]
			[Address(RVA = "0xAF1AB4", Offset = "0xAF1AB4", VA = "0xAF1AB4", Slot = "11")]
			set
			{
			}
		}

		[Token(Token = "0x6001A40")]
		[Address(RVA = "0xAF1AE4", Offset = "0xAF1AE4", VA = "0xAF1AE4", Slot = "12")]
		public override void Initialize()
		{
		}

		[Token(Token = "0x6001A41")]
		[Address(RVA = "0xAF1B78", Offset = "0xAF1B78", VA = "0xAF1B78")]
		[IteratorStateMachine(typeof(<AttachTriggerLogic>d__21))]
		private IEnumerator AttachTriggerLogic()
		{
			return null;
		}

		[Token(Token = "0x6001A42")]
		[Address(RVA = "0xAF1C08", Offset = "0xAF1C08", VA = "0xAF1C08")]
		private void Update()
		{
		}

		[Token(Token = "0x6001A43")]
		[Address(RVA = "0xAF1E88", Offset = "0xAF1E88", VA = "0xAF1E88")]
		private void UpdateAverageVelocity()
		{
		}

		[Token(Token = "0x6001A44")]
		[Address(RVA = "0xAF2044", Offset = "0xAF2044", VA = "0xAF2044")]
		private void CheckAndUpdateScale()
		{
		}

		[Token(Token = "0x6001A45")]
		[Address(RVA = "0xAF212C", Offset = "0xAF212C", VA = "0xAF212C", Slot = "7")]
		public override List<InteractableCollisionInfo> GetNextIntersectingObjects()
		{
			return null;
		}

		[Token(Token = "0x6001A46")]
		[Address(RVA = "0xAF24A8", Offset = "0xAF24A8", VA = "0xAF24A8", Slot = "8")]
		public override void FocusOnInteractable(Interactable focusedInteractable, ColliderZone colliderZone)
		{
		}

		[Token(Token = "0x6001A47")]
		[Address(RVA = "0xAF24AC", Offset = "0xAF24AC", VA = "0xAF24AC", Slot = "9")]
		public override void DeFocus()
		{
		}

		[Token(Token = "0x6001A48")]
		[Address(RVA = "0xAF24B0", Offset = "0xAF24B0", VA = "0xAF24B0")]
		public FingerTipPokeTool()
		{
		}
	}
	[Token(Token = "0x2000462")]
	public class FingerTipPokeToolView : MonoBehaviour, InteractableToolView
	{
		[Token(Token = "0x4001C97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private MeshRenderer _sphereMeshRenderer;

		[Token(Token = "0x1700036E")]
		public InteractableTool InteractableTool
		{
			[Token(Token = "0x6001A4F")]
			[Address(RVA = "0xAF2AD8", Offset = "0xAF2AD8", VA = "0xAF2AD8", Slot = "4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001A50")]
			[Address(RVA = "0xAF2AE0", Offset = "0xAF2AE0", VA = "0xAF2AE0")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700036F")]
		public bool EnableState
		{
			[Token(Token = "0x6001A51")]
			[Address(RVA = "0xAF2AE8", Offset = "0xAF2AE8", VA = "0xAF2AE8", Slot = "6")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001A52")]
			[Address(RVA = "0xAF2B04", Offset = "0xAF2B04", VA = "0xAF2B04", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x17000370")]
		public bool ToolActivateState
		{
			[Token(Token = "0x6001A53")]
			[Address(RVA = "0xAF2B24", Offset = "0xAF2B24", VA = "0xAF2B24", Slot = "8")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001A54")]
			[Address(RVA = "0xAF2B2C", Offset = "0xAF2B2C", VA = "0xAF2B2C", Slot = "9")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000371")]
		public float SphereRadius
		{
			[Token(Token = "0x6001A55")]
			[Address(RVA = "0xAF2B38", Offset = "0xAF2B38", VA = "0xAF2B38")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001A56")]
			[Address(RVA = "0xAF2B40", Offset = "0xAF2B40", VA = "0xAF2B40")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6001A57")]
		[Address(RVA = "0xAF2B48", Offset = "0xAF2B48", VA = "0xAF2B48")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001A58")]
		[Address(RVA = "0xAF2B84", Offset = "0xAF2B84", VA = "0xAF2B84", Slot = "5")]
		public void SetFocusedInteractable(Interactable interactable)
		{
		}

		[Token(Token = "0x6001A59")]
		[Address(RVA = "0xAF2B88", Offset = "0xAF2B88", VA = "0xAF2B88")]
		public FingerTipPokeToolView()
		{
		}
	}
	[Token(Token = "0x2000463")]
	[Flags]
	public enum InteractableToolTags
	{
		[Token(Token = "0x4001C9C")]
		None = 0,
		[Token(Token = "0x4001C9D")]
		Ray = 1,
		[Token(Token = "0x4001C9E")]
		Poke = 4,
		[Token(Token = "0x4001C9F")]
		All = -1
	}
	[Token(Token = "0x2000464")]
	public enum ToolInputState
	{
		[Token(Token = "0x4001CA1")]
		Inactive,
		[Token(Token = "0x4001CA2")]
		PrimaryInputDown,
		[Token(Token = "0x4001CA3")]
		PrimaryInputDownStay,
		[Token(Token = "0x4001CA4")]
		PrimaryInputUp
	}
	[Token(Token = "0x2000465")]
	public class InteractableCollisionInfo
	{
		[Token(Token = "0x4001CA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ColliderZone InteractableCollider;

		[Token(Token = "0x4001CA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InteractableCollisionDepth CollisionDepth;

		[Token(Token = "0x4001CA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InteractableTool CollidingTool;

		[Token(Token = "0x6001A5A")]
		[Address(RVA = "0xAF2468", Offset = "0xAF2468", VA = "0xAF2468")]
		public InteractableCollisionInfo(ColliderZone collider, InteractableCollisionDepth collisionDepth, InteractableTool collidingTool)
		{
		}
	}
	[Token(Token = "0x2000466")]
	public abstract class InteractableTool : MonoBehaviour
	{
		[Token(Token = "0x4001CAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected List<InteractableCollisionInfo> _currentIntersectingObjects;

		[Token(Token = "0x4001CAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<Interactable> _addedInteractables;

		[Token(Token = "0x4001CAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<Interactable> _removedInteractables;

		[Token(Token = "0x4001CAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private List<Interactable> _remainingInteractables;

		[Token(Token = "0x4001CAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Dictionary<Interactable, InteractableCollisionInfo> _currInteractableToCollisionInfos;

		[Token(Token = "0x4001CB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Dictionary<Interactable, InteractableCollisionInfo> _prevInteractableToCollisionInfos;

		[Token(Token = "0x17000372")]
		public Transform ToolTransform
		{
			[Token(Token = "0x6001A5B")]
			[Address(RVA = "0xAEEB80", Offset = "0xAEEB80", VA = "0xAEEB80")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000373")]
		public bool IsRightHandedTool
		{
			[Token(Token = "0x6001A5C")]
			[Address(RVA = "0xAF2B90", Offset = "0xAF2B90", VA = "0xAF2B90")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001A5D")]
			[Address(RVA = "0xAF2B98", Offset = "0xAF2B98", VA = "0xAF2B98")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000374")]
		public abstract InteractableToolTags ToolTags
		{
			[Token(Token = "0x6001A5E")]
			get;
		}

		[Token(Token = "0x17000375")]
		public abstract ToolInputState ToolInputState
		{
			[Token(Token = "0x6001A5F")]
			get;
		}

		[Token(Token = "0x17000376")]
		public abstract bool IsFarFieldTool
		{
			[Token(Token = "0x6001A60")]
			get;
		}

		[Token(Token = "0x17000377")]
		public Vector3 Velocity
		{
			[Token(Token = "0x6001A61")]
			[Address(RVA = "0xAF2BA4", Offset = "0xAF2BA4", VA = "0xAF2BA4")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001A62")]
			[Address(RVA = "0xAF2BB0", Offset = "0xAF2BB0", VA = "0xAF2BB0")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x17000378")]
		public Vector3 InteractionPosition
		{
			[Token(Token = "0x6001A63")]
			[Address(RVA = "0xAF2BBC", Offset = "0xAF2BBC", VA = "0xAF2BBC")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001A64")]
			[Address(RVA = "0xAF2BC8", Offset = "0xAF2BC8", VA = "0xAF2BC8")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x17000379")]
		public abstract bool EnableState
		{
			[Token(Token = "0x6001A69")]
			get;
			[Token(Token = "0x6001A6A")]
			set;
		}

		[Token(Token = "0x6001A65")]
		[Address(RVA = "0xAF2BD4", Offset = "0xAF2BD4", VA = "0xAF2BD4")]
		public List<InteractableCollisionInfo> GetCurrentIntersectingObjects()
		{
			return null;
		}

		[Token(Token = "0x6001A66")]
		public abstract List<InteractableCollisionInfo> GetNextIntersectingObjects();

		[Token(Token = "0x6001A67")]
		public abstract void FocusOnInteractable(Interactable focusedInteractable, ColliderZone colliderZone);

		[Token(Token = "0x6001A68")]
		public abstract void DeFocus();

		[Token(Token = "0x6001A6B")]
		public abstract void Initialize();

		[Token(Token = "0x6001A6C")]
		[Address(RVA = "0xAF1904", Offset = "0xAF1904", VA = "0xAF1904")]
		public KeyValuePair<Interactable, InteractableCollisionInfo> GetFirstCurrentCollisionInfo()
		{
			return default(KeyValuePair<Interactable, InteractableCollisionInfo>);
		}

		[Token(Token = "0x6001A6D")]
		[Address(RVA = "0xAF194C", Offset = "0xAF194C", VA = "0xAF194C")]
		public void ClearAllCurrentCollisionInfos()
		{
		}

		[Token(Token = "0x6001A6E")]
		[Address(RVA = "0xAF2BDC", Offset = "0xAF2BDC", VA = "0xAF2BDC", Slot = "13")]
		public virtual void UpdateCurrentCollisionsBasedOnDepth()
		{
		}

		[Token(Token = "0x6001A6F")]
		[Address(RVA = "0xAF2E88", Offset = "0xAF2E88", VA = "0xAF2E88", Slot = "14")]
		public virtual void UpdateLatestCollisionData()
		{
		}

		[Token(Token = "0x6001A70")]
		[Address(RVA = "0xAF24C4", Offset = "0xAF24C4", VA = "0xAF24C4")]
		protected InteractableTool()
		{
		}
	}
	[Token(Token = "0x2000467")]
	public interface InteractableToolView
	{
		[Token(Token = "0x1700037A")]
		InteractableTool InteractableTool
		{
			[Token(Token = "0x6001A71")]
			get;
		}

		[Token(Token = "0x1700037B")]
		bool EnableState
		{
			[Token(Token = "0x6001A73")]
			get;
			[Token(Token = "0x6001A74")]
			set;
		}

		[Token(Token = "0x1700037C")]
		bool ToolActivateState
		{
			[Token(Token = "0x6001A75")]
			get;
			[Token(Token = "0x6001A76")]
			set;
		}

		[Token(Token = "0x6001A72")]
		void SetFocusedInteractable(Interactable interactable);
	}
	[Token(Token = "0x2000468")]
	public class PinchStateModule
	{
		[Token(Token = "0x2000469")]
		private enum PinchState
		{
			[Token(Token = "0x4001CB5")]
			None,
			[Token(Token = "0x4001CB6")]
			PinchDown,
			[Token(Token = "0x4001CB7")]
			PinchStay,
			[Token(Token = "0x4001CB8")]
			PinchUp
		}

		[Token(Token = "0x4001CB1")]
		private const float PINCH_STRENGTH_THRESHOLD = 1f;

		[Token(Token = "0x4001CB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private PinchState _currPinchState;

		[Token(Token = "0x4001CB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Interactable _firstFocusedInteractable;

		[Token(Token = "0x1700037D")]
		public bool PinchUpAndDownOnFocusedObject
		{
			[Token(Token = "0x6001A77")]
			[Address(RVA = "0xAF36D0", Offset = "0xAF36D0", VA = "0xAF36D0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700037E")]
		public bool PinchSteadyOnFocusedObject
		{
			[Token(Token = "0x6001A78")]
			[Address(RVA = "0xAF374C", Offset = "0xAF374C", VA = "0xAF374C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700037F")]
		public bool PinchDownOnFocusedObject
		{
			[Token(Token = "0x6001A79")]
			[Address(RVA = "0xAF37C8", Offset = "0xAF37C8", VA = "0xAF37C8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001A7A")]
		[Address(RVA = "0xAF3844", Offset = "0xAF3844", VA = "0xAF3844")]
		public PinchStateModule()
		{
		}

		[Token(Token = "0x6001A7B")]
		[Address(RVA = "0xAF3864", Offset = "0xAF3864", VA = "0xAF3864")]
		public void UpdateState(OVRHand hand, Interactable currFocusedInteractable)
		{
		}
	}
	[Token(Token = "0x200046A")]
	public class RayTool : InteractableTool
	{
		[Token(Token = "0x4001CB9")]
		private const float MINIMUM_RAY_CAST_DISTANCE = 0.8f;

		[Token(Token = "0x4001CBA")]
		private const float COLLIDER_RADIUS = 0.01f;

		[Token(Token = "0x4001CBB")]
		private const int NUM_MAX_PRIMARY_HITS = 10;

		[Token(Token = "0x4001CBC")]
		private const int NUM_MAX_SECONDARY_HITS = 25;

		[Token(Token = "0x4001CBD")]
		private const int NUM_COLLIDERS_TO_TEST = 20;

		[Token(Token = "0x4001CBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private RayToolView _rayToolView;

		[Token(Token = "0x4001CBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Range(0f, 45f)]
		[SerializeField]
		private float _coneAngleDegrees;

		[Token(Token = "0x4001CC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[SerializeField]
		private float _farFieldMaxDistance;

		[Token(Token = "0x4001CC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private PinchStateModule _pinchStateModule;

		[Token(Token = "0x4001CC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Interactable _focusedInteractable;

		[Token(Token = "0x4001CC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Collider[] _collidersOverlapped;

		[Token(Token = "0x4001CC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Interactable _currInteractableCastedAgainst;

		[Token(Token = "0x4001CC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float _coneAngleReleaseDegrees;

		[Token(Token = "0x4001CC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private RaycastHit[] _primaryHits;

		[Token(Token = "0x4001CC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Collider[] _secondaryOverlapResults;

		[Token(Token = "0x4001CC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private bool _initialized;

		[Token(Token = "0x17000380")]
		public override InteractableToolTags ToolTags
		{
			[Token(Token = "0x6001A7C")]
			[Address(RVA = "0xAF39B0", Offset = "0xAF39B0", VA = "0xAF39B0", Slot = "4")]
			get
			{
				return default(InteractableToolTags);
			}
		}

		[Token(Token = "0x17000381")]
		public override ToolInputState ToolInputState
		{
			[Token(Token = "0x6001A7D")]
			[Address(RVA = "0xAF39B8", Offset = "0xAF39B8", VA = "0xAF39B8", Slot = "5")]
			get
			{
				return default(ToolInputState);
			}
		}

		[Token(Token = "0x17000382")]
		public override bool IsFarFieldTool
		{
			[Token(Token = "0x6001A7E")]
			[Address(RVA = "0xAF3A14", Offset = "0xAF3A14", VA = "0xAF3A14", Slot = "6")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000383")]
		public override bool EnableState
		{
			[Token(Token = "0x6001A7F")]
			[Address(RVA = "0xAF3A1C", Offset = "0xAF3A1C", VA = "0xAF3A1C", Slot = "10")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001A80")]
			[Address(RVA = "0xAF3A5C", Offset = "0xAF3A5C", VA = "0xAF3A5C", Slot = "11")]
			set
			{
			}
		}

		[Token(Token = "0x6001A81")]
		[Address(RVA = "0xAF3ACC", Offset = "0xAF3ACC", VA = "0xAF3ACC", Slot = "12")]
		public override void Initialize()
		{
		}

		[Token(Token = "0x6001A82")]
		[Address(RVA = "0xAF3B18", Offset = "0xAF3B18", VA = "0xAF3B18")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001A83")]
		[Address(RVA = "0xAF3BA4", Offset = "0xAF3BA4", VA = "0xAF3BA4")]
		private void Update()
		{
		}

		[Token(Token = "0x6001A84")]
		[Address(RVA = "0xAF3E48", Offset = "0xAF3E48", VA = "0xAF3E48")]
		private Vector3 GetRayCastOrigin()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001A85")]
		[Address(RVA = "0xAF3EC4", Offset = "0xAF3EC4", VA = "0xAF3EC4", Slot = "7")]
		public override List<InteractableCollisionInfo> GetNextIntersectingObjects()
		{
			return null;
		}

		[Token(Token = "0x6001A86")]
		[Address(RVA = "0xAF4288", Offset = "0xAF4288", VA = "0xAF4288")]
		private bool HasRayReleasedInteractable(Interactable focusedInteractable)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A87")]
		[Address(RVA = "0xAF4424", Offset = "0xAF4424", VA = "0xAF4424")]
		private Interactable FindTargetInteractable()
		{
			return null;
		}

		[Token(Token = "0x6001A88")]
		[Address(RVA = "0xAF453C", Offset = "0xAF453C", VA = "0xAF453C")]
		private Interactable FindPrimaryRaycastHit(Vector3 rayOrigin, Vector3 rayDirection)
		{
			return null;
		}

		[Token(Token = "0x6001A89")]
		[Address(RVA = "0xAF4860", Offset = "0xAF4860", VA = "0xAF4860")]
		private Interactable FindInteractableViaConeTest(Vector3 rayOrigin, Vector3 rayDirection)
		{
			return null;
		}

		[Token(Token = "0x6001A8A")]
		[Address(RVA = "0xAF4BDC", Offset = "0xAF4BDC", VA = "0xAF4BDC", Slot = "8")]
		public override void FocusOnInteractable(Interactable focusedInteractable, ColliderZone colliderZone)
		{
		}

		[Token(Token = "0x6001A8B")]
		[Address(RVA = "0xAF4C9C", Offset = "0xAF4C9C", VA = "0xAF4C9C", Slot = "9")]
		public override void DeFocus()
		{
		}

		[Token(Token = "0x6001A8C")]
		[Address(RVA = "0xAF4CC4", Offset = "0xAF4CC4", VA = "0xAF4CC4")]
		public RayTool()
		{
		}
	}
	[Token(Token = "0x200046B")]
	public class RayToolView : MonoBehaviour, InteractableToolView
	{
		[Token(Token = "0x4001CC9")]
		private const int NUM_RAY_LINE_POSITIONS = 25;

		[Token(Token = "0x4001CCA")]
		private const float DEFAULT_RAY_CAST_DISTANCE = 3f;

		[Token(Token = "0x4001CCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Transform _targetTransform;

		[Token(Token = "0x4001CCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private LineRenderer _lineRenderer;

		[Token(Token = "0x4001CCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool _toolActivateState;

		[Token(Token = "0x4001CCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform _focusedTransform;

		[Token(Token = "0x4001CCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3[] linePositions;

		[Token(Token = "0x4001CD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Gradient _oldColorGradient;

		[Token(Token = "0x4001CD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Gradient _highLightColorGradient;

		[Token(Token = "0x17000384")]
		public bool EnableState
		{
			[Token(Token = "0x6001A8D")]
			[Address(RVA = "0xAF3A40", Offset = "0xAF3A40", VA = "0xAF3A40", Slot = "6")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001A8E")]
			[Address(RVA = "0xAF3A78", Offset = "0xAF3A78", VA = "0xAF3A78", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x17000385")]
		public bool ToolActivateState
		{
			[Token(Token = "0x6001A8F")]
			[Address(RVA = "0xAF4D9C", Offset = "0xAF4D9C", VA = "0xAF4D9C", Slot = "8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001A90")]
			[Address(RVA = "0xAF3E0C", Offset = "0xAF3E0C", VA = "0xAF3E0C", Slot = "9")]
			set
			{
			}
		}

		[Token(Token = "0x17000386")]
		public InteractableTool InteractableTool
		{
			[Token(Token = "0x6001A92")]
			[Address(RVA = "0xAF4FA4", Offset = "0xAF4FA4", VA = "0xAF4FA4", Slot = "4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001A93")]
			[Address(RVA = "0xAF4FAC", Offset = "0xAF4FAC", VA = "0xAF4FAC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6001A91")]
		[Address(RVA = "0xAF4DA4", Offset = "0xAF4DA4", VA = "0xAF4DA4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001A94")]
		[Address(RVA = "0xAF4C0C", Offset = "0xAF4C0C", VA = "0xAF4C0C", Slot = "5")]
		public void SetFocusedInteractable(Interactable interactable)
		{
		}

		[Token(Token = "0x6001A95")]
		[Address(RVA = "0xAF4FB4", Offset = "0xAF4FB4", VA = "0xAF4FB4")]
		private void Update()
		{
		}

		[Token(Token = "0x6001A96")]
		[Address(RVA = "0xAF5260", Offset = "0xAF5260", VA = "0xAF5260")]
		public static Vector3 GetPointOnBezierCurve(Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3, float t)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001A97")]
		[Address(RVA = "0xAF5308", Offset = "0xAF5308", VA = "0xAF5308")]
		public RayToolView()
		{
		}
	}
	[Token(Token = "0x200046C")]
	public class DistanceGrabberSample : MonoBehaviour
	{
		[Token(Token = "0x4001CD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool useSpherecast;

		[Token(Token = "0x4001CD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		private bool allowGrabThroughWalls;

		[Token(Token = "0x4001CD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private DistanceGrabber[] m_grabbers;

		[Token(Token = "0x17000387")]
		public bool UseSpherecast
		{
			[Token(Token = "0x6001A98")]
			[Address(RVA = "0xAF5360", Offset = "0xAF5360", VA = "0xAF5360")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001A99")]
			[Address(RVA = "0xAF5368", Offset = "0xAF5368", VA = "0xAF5368")]
			set
			{
			}
		}

		[Token(Token = "0x17000388")]
		public bool AllowGrabThroughWalls
		{
			[Token(Token = "0x6001A9A")]
			[Address(RVA = "0xAF53E4", Offset = "0xAF53E4", VA = "0xAF53E4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001A9B")]
			[Address(RVA = "0xAF53EC", Offset = "0xAF53EC", VA = "0xAF53EC")]
			set
			{
			}
		}

		[Token(Token = "0x6001A9C")]
		[Address(RVA = "0xAF5448", Offset = "0xAF5448", VA = "0xAF5448")]
		private void Start()
		{
		}

		[Token(Token = "0x6001A9D")]
		[Address(RVA = "0xAF56E8", Offset = "0xAF56E8", VA = "0xAF56E8")]
		public void ToggleSphereCasting(Toggle t)
		{
		}

		[Token(Token = "0x6001A9E")]
		[Address(RVA = "0xAF56F8", Offset = "0xAF56F8", VA = "0xAF56F8")]
		public void ToggleGrabThroughWalls(Toggle t)
		{
		}

		[Token(Token = "0x6001A9F")]
		[Address(RVA = "0xAF5708", Offset = "0xAF5708", VA = "0xAF5708")]
		public DistanceGrabberSample()
		{
		}
	}
	[Token(Token = "0x200046D")]
	public class ControllerBoxController : MonoBehaviour
	{
		[Token(Token = "0x4001CD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private TrainLocomotive _locomotive;

		[Token(Token = "0x4001CD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private CowController _cowController;

		[Token(Token = "0x6001AA0")]
		[Address(RVA = "0xAF5710", Offset = "0xAF5710", VA = "0xAF5710")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001AA1")]
		[Address(RVA = "0xAF5714", Offset = "0xAF5714", VA = "0xAF5714")]
		public void StartStopStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6001AA2")]
		[Address(RVA = "0xAF5780", Offset = "0xAF5780", VA = "0xAF5780")]
		public void DecreaseSpeedStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6001AA3")]
		[Address(RVA = "0xAF5810", Offset = "0xAF5810", VA = "0xAF5810")]
		public void IncreaseSpeedStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6001AA4")]
		[Address(RVA = "0xAF58A0", Offset = "0xAF58A0", VA = "0xAF58A0")]
		public void SmokeButtonStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6001AA5")]
		[Address(RVA = "0xAF594C", Offset = "0xAF594C", VA = "0xAF594C")]
		public void WhistleButtonStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6001AA6")]
		[Address(RVA = "0xAF5A28", Offset = "0xAF5A28", VA = "0xAF5A28")]
		public void ReverseButtonStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6001AA7")]
		[Address(RVA = "0xAF5A6C", Offset = "0xAF5A6C", VA = "0xAF5A6C")]
		public void SwitchVisualization(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6001AA8")]
		[Address(RVA = "0xAF5ACC", Offset = "0xAF5ACC", VA = "0xAF5ACC")]
		public void GoMoo(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6001AA9")]
		[Address(RVA = "0xAF5B2C", Offset = "0xAF5B2C", VA = "0xAF5B2C")]
		public ControllerBoxController()
		{
		}
	}
	[Token(Token = "0x200046E")]
	public class CowController : MonoBehaviour
	{
		[Token(Token = "0x4001CD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Animation _cowAnimation;

		[Token(Token = "0x4001CD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private AudioSource _mooCowAudioSource;

		[Token(Token = "0x6001AAA")]
		[Address(RVA = "0xAF5B34", Offset = "0xAF5B34", VA = "0xAF5B34")]
		private void Start()
		{
		}

		[Token(Token = "0x6001AAB")]
		[Address(RVA = "0xAF5B38", Offset = "0xAF5B38", VA = "0xAF5B38")]
		public void PlayMooSound()
		{
		}

		[Token(Token = "0x6001AAC")]
		[Address(RVA = "0xAF5AFC", Offset = "0xAF5AFC", VA = "0xAF5AFC")]
		public void GoMooCowGo()
		{
		}

		[Token(Token = "0x6001AAD")]
		[Address(RVA = "0xAF5B6C", Offset = "0xAF5B6C", VA = "0xAF5B6C")]
		public CowController()
		{
		}
	}
	[Token(Token = "0x200046F")]
	public class PanelHMDFollower : MonoBehaviour
	{
		[Token(Token = "0x2000470")]
		[CompilerGenerated]
		private sealed class <LerpToHMD>d__13 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001CE4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001CE5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001CE6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PanelHMDFollower <>4__this;

			[Token(Token = "0x4001CE7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Vector3 <newPanelPosition>5__2;

			[Token(Token = "0x4001CE8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <startTime>5__3;

			[Token(Token = "0x4001CE9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <endTime>5__4;

			[Token(Token = "0x17000389")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001AB6")]
				[Address(RVA = "0xAF61B4", Offset = "0xAF61B4", VA = "0xAF61B4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700038A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001AB8")]
				[Address(RVA = "0xAF61FC", Offset = "0xAF61FC", VA = "0xAF61FC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001AB3")]
			[Address(RVA = "0xAF5F3C", Offset = "0xAF5F3C", VA = "0xAF5F3C")]
			[DebuggerHidden]
			public <LerpToHMD>d__13(int <>1__state)
			{
			}

			[Token(Token = "0x6001AB4")]
			[Address(RVA = "0xAF6004", Offset = "0xAF6004", VA = "0xAF6004", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001AB5")]
			[Address(RVA = "0xAF6008", Offset = "0xAF6008", VA = "0xAF6008", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001AB7")]
			[Address(RVA = "0xAF61BC", Offset = "0xAF61BC", VA = "0xAF61BC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001CDA")]
		private const float TOTAL_DURATION = 3f;

		[Token(Token = "0x4001CDB")]
		private const float HMD_MOVEMENT_THRESHOLD = 0.3f;

		[Token(Token = "0x4001CDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float _maxDistance;

		[Token(Token = "0x4001CDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float _minDistance;

		[Token(Token = "0x4001CDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float _minZDistance;

		[Token(Token = "0x4001CDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private OVRCameraRig _cameraRig;

		[Token(Token = "0x4001CE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 _panelInitialPosition;

		[Token(Token = "0x4001CE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Coroutine _coroutine;

		[Token(Token = "0x4001CE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3 _prevPos;

		[Token(Token = "0x4001CE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Vector3 _lastMovedToPos;

		[Token(Token = "0x6001AAE")]
		[Address(RVA = "0xAF5B74", Offset = "0xAF5B74", VA = "0xAF5B74")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001AAF")]
		[Address(RVA = "0xAF5C08", Offset = "0xAF5C08", VA = "0xAF5C08")]
		private void Update()
		{
		}

		[Token(Token = "0x6001AB0")]
		[Address(RVA = "0xAF5EFC", Offset = "0xAF5EFC", VA = "0xAF5EFC")]
		private Vector3 CalculateIdealAnchorPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001AB1")]
		[Address(RVA = "0xAF5E94", Offset = "0xAF5E94", VA = "0xAF5E94")]
		[IteratorStateMachine(typeof(<LerpToHMD>d__13))]
		private IEnumerator LerpToHMD()
		{
			return null;
		}

		[Token(Token = "0x6001AB2")]
		[Address(RVA = "0xAF5F64", Offset = "0xAF5F64", VA = "0xAF5F64")]
		public PanelHMDFollower()
		{
		}
	}
	[Token(Token = "0x2000471")]
	public class SelectionCylinder : MonoBehaviour
	{
		[Token(Token = "0x2000472")]
		public enum SelectionState
		{
			[Token(Token = "0x4001CF1")]
			Off,
			[Token(Token = "0x4001CF2")]
			Selected,
			[Token(Token = "0x4001CF3")]
			Highlighted
		}

		[Token(Token = "0x4001CEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private MeshRenderer _selectionMeshRenderer;

		[Token(Token = "0x4001CEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int _colorId;

		[Token(Token = "0x4001CEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Material[] _selectionMaterials;

		[Token(Token = "0x4001CED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Color[] _defaultSelectionColors;

		[Token(Token = "0x4001CEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Color[] _highlightColors;

		[Token(Token = "0x4001CEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private SelectionState _currSelectionState;

		[Token(Token = "0x1700038B")]
		public SelectionState CurrSelectionState
		{
			[Token(Token = "0x6001AB9")]
			[Address(RVA = "0xAF6204", Offset = "0xAF6204", VA = "0xAF6204")]
			get
			{
				return default(SelectionState);
			}
			[Token(Token = "0x6001ABA")]
			[Address(RVA = "0xAF620C", Offset = "0xAF620C", VA = "0xAF620C")]
			set
			{
			}
		}

		[Token(Token = "0x6001ABB")]
		[Address(RVA = "0xAF6360", Offset = "0xAF6360", VA = "0xAF6360")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001ABC")]
		[Address(RVA = "0xAF64E8", Offset = "0xAF64E8", VA = "0xAF64E8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001ABD")]
		[Address(RVA = "0xAF6280", Offset = "0xAF6280", VA = "0xAF6280")]
		private void AffectSelectionColor(Color[] newColors)
		{
		}

		[Token(Token = "0x6001ABE")]
		[Address(RVA = "0xAF65B0", Offset = "0xAF65B0", VA = "0xAF65B0")]
		public SelectionCylinder()
		{
		}
	}
	[Token(Token = "0x2000473")]
	public class TrackSegment : MonoBehaviour
	{
		[Token(Token = "0x2000474")]
		public enum SegmentType
		{
			[Token(Token = "0x4001D02")]
			Straight,
			[Token(Token = "0x4001D03")]
			LeftTurn,
			[Token(Token = "0x4001D04")]
			RightTurn,
			[Token(Token = "0x4001D05")]
			Switch
		}

		[Token(Token = "0x4001CF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private SegmentType _segmentType;

		[Token(Token = "0x4001CF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private MeshFilter _straight;

		[Token(Token = "0x4001CF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private MeshFilter _leftTurn;

		[Token(Token = "0x4001CF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private MeshFilter _rightTurn;

		[Token(Token = "0x4001CF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float _gridSize;

		[Token(Token = "0x4001CF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private int _subDivCount;

		[Token(Token = "0x4001CFA")]
		private const float _originalGridSize = 0.8f;

		[Token(Token = "0x4001CFB")]
		private const float _trackWidth = 0.15f;

		[Token(Token = "0x4001CFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private GameObject _mesh;

		[Token(Token = "0x4001CFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Pose _p1;

		[Token(Token = "0x4001CFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Pose _p2;

		[Token(Token = "0x4001D00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Pose _endPose;

		[Token(Token = "0x1700038C")]
		public float StartDistance
		{
			[Token(Token = "0x6001AC0")]
			[Address(RVA = "0xAF6620", Offset = "0xAF6620", VA = "0xAF6620")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001AC1")]
			[Address(RVA = "0xAF6628", Offset = "0xAF6628", VA = "0xAF6628")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700038D")]
		public float GridSize
		{
			[Token(Token = "0x6001AC2")]
			[Address(RVA = "0xAF6630", Offset = "0xAF6630", VA = "0xAF6630")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001AC3")]
			[Address(RVA = "0xAF6638", Offset = "0xAF6638", VA = "0xAF6638")]
			private set
			{
			}
		}

		[Token(Token = "0x1700038E")]
		public int SubDivCount
		{
			[Token(Token = "0x6001AC4")]
			[Address(RVA = "0xAF6640", Offset = "0xAF6640", VA = "0xAF6640")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001AC5")]
			[Address(RVA = "0xAF6648", Offset = "0xAF6648", VA = "0xAF6648")]
			set
			{
			}
		}

		[Token(Token = "0x1700038F")]
		public SegmentType Type
		{
			[Token(Token = "0x6001AC6")]
			[Address(RVA = "0xAF6650", Offset = "0xAF6650", VA = "0xAF6650")]
			get
			{
				return default(SegmentType);
			}
		}

		[Token(Token = "0x17000390")]
		public Pose EndPose
		{
			[Token(Token = "0x6001AC7")]
			[Address(RVA = "0xAF6658", Offset = "0xAF6658", VA = "0xAF6658")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000391")]
		public float Radius
		{
			[Token(Token = "0x6001AC8")]
			[Address(RVA = "0xAF6A2C", Offset = "0xAF6A2C", VA = "0xAF6A2C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000392")]
		public float SegmentLength
		{
			[Token(Token = "0x6001ACA")]
			[Address(RVA = "0xAF66B4", Offset = "0xAF66B4", VA = "0xAF66B4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6001AC9")]
		[Address(RVA = "0xAF6A3C", Offset = "0xAF6A3C", VA = "0xAF6A3C")]
		public float setGridSize(float size)
		{
			return default(float);
		}

		[Token(Token = "0x6001ACB")]
		[Address(RVA = "0xAF6A54", Offset = "0xAF6A54", VA = "0xAF6A54")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001ACC")]
		[Address(RVA = "0xAF66F4", Offset = "0xAF66F4", VA = "0xAF66F4")]
		public void UpdatePose(float distanceIntoSegment, Pose pose)
		{
		}

		[Token(Token = "0x6001ACD")]
		[Address(RVA = "0xAF6A58", Offset = "0xAF6A58", VA = "0xAF6A58")]
		private void Update()
		{
		}

		[Token(Token = "0x6001ACE")]
		[Address(RVA = "0xAF6A5C", Offset = "0xAF6A5C", VA = "0xAF6A5C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001ACF")]
		[Address(RVA = "0xAF6AB8", Offset = "0xAF6AB8", VA = "0xAF6AB8")]
		private void DrawDebugLines()
		{
		}

		[Token(Token = "0x6001AD0")]
		[Address(RVA = "0xAF73EC", Offset = "0xAF73EC", VA = "0xAF73EC")]
		public void RegenerateTrackAndMesh()
		{
		}

		[Token(Token = "0x6001AD1")]
		[Address(RVA = "0xAF7644", Offset = "0xAF7644", VA = "0xAF7644")]
		public TrackSegment()
		{
		}
	}
	[Token(Token = "0x2000475")]
	public class TrainButtonVisualController : MonoBehaviour
	{
		[Token(Token = "0x2000476")]
		[CompilerGenerated]
		private sealed class <ResetPosition>d__26 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001D17")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001D18")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001D19")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TrainButtonVisualController <>4__this;

			[Token(Token = "0x4001D1A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <startTime>5__2;

			[Token(Token = "0x4001D1B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <endTime>5__3;

			[Token(Token = "0x17000393")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001AE0")]
				[Address(RVA = "0xAF80FC", Offset = "0xAF80FC", VA = "0xAF80FC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000394")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001AE2")]
				[Address(RVA = "0xAF8144", Offset = "0xAF8144", VA = "0xAF8144", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001ADD")]
			[Address(RVA = "0xAF7F40", Offset = "0xAF7F40", VA = "0xAF7F40")]
			[DebuggerHidden]
			public <ResetPosition>d__26(int <>1__state)
			{
			}

			[Token(Token = "0x6001ADE")]
			[Address(RVA = "0xAF7F90", Offset = "0xAF7F90", VA = "0xAF7F90", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001ADF")]
			[Address(RVA = "0xAF7F94", Offset = "0xAF7F94", VA = "0xAF7F94", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001AE1")]
			[Address(RVA = "0xAF8104", Offset = "0xAF8104", VA = "0xAF8104", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001D06")]
		private const float LERP_TO_OLD_POS_DURATION = 1f;

		[Token(Token = "0x4001D07")]
		private const float LOCAL_SIZE_HALVED = 0.5f;

		[Token(Token = "0x4001D08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private MeshRenderer _meshRenderer;

		[Token(Token = "0x4001D09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private MeshRenderer _glowRenderer;

		[Token(Token = "0x4001D0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private ButtonController _buttonController;

		[Token(Token = "0x4001D0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Color _buttonContactColor;

		[Token(Token = "0x4001D0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Color _buttonActionColor;

		[Token(Token = "0x4001D0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private AudioSource _audioSource;

		[Token(Token = "0x4001D0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private AudioClip _actionSoundEffect;

		[Token(Token = "0x4001D0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private Transform _buttonContactTransform;

		[Token(Token = "0x4001D10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private float _contactMaxDisplacementDistance;

		[Token(Token = "0x4001D11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Material _buttonMaterial;

		[Token(Token = "0x4001D12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Color _buttonDefaultColor;

		[Token(Token = "0x4001D13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private int _materialColorId;

		[Token(Token = "0x4001D14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private bool _buttonInContactOrActionStates;

		[Token(Token = "0x4001D15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Coroutine _lerpToOldPositionCr;

		[Token(Token = "0x4001D16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3 _oldPosition;

		[Token(Token = "0x6001AD2")]
		[Address(RVA = "0xAF7780", Offset = "0xAF7780", VA = "0xAF7780")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001AD3")]
		[Address(RVA = "0xAF7824", Offset = "0xAF7824", VA = "0xAF7824")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001AD4")]
		[Address(RVA = "0xAF78B4", Offset = "0xAF78B4", VA = "0xAF78B4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001AD5")]
		[Address(RVA = "0xAF79FC", Offset = "0xAF79FC", VA = "0xAF79FC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001AD6")]
		[Address(RVA = "0xAF7B88", Offset = "0xAF7B88", VA = "0xAF7B88")]
		private void ActionOrInContactZoneStayEvent(ColliderZoneArgs collisionArgs)
		{
		}

		[Token(Token = "0x6001AD7")]
		[Address(RVA = "0xAF7C98", Offset = "0xAF7C98", VA = "0xAF7C98")]
		private void InteractableStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6001AD8")]
		[Address(RVA = "0xAF7E84", Offset = "0xAF7E84", VA = "0xAF7E84")]
		private void PlaySound(AudioClip clip)
		{
		}

		[Token(Token = "0x6001AD9")]
		[Address(RVA = "0xAF7DA8", Offset = "0xAF7DA8", VA = "0xAF7DA8")]
		private void StopResetLerping()
		{
		}

		[Token(Token = "0x6001ADA")]
		[Address(RVA = "0xAF7DBC", Offset = "0xAF7DBC", VA = "0xAF7DBC")]
		private void LerpToOldPosition()
		{
		}

		[Token(Token = "0x6001ADB")]
		[Address(RVA = "0xAF7ED8", Offset = "0xAF7ED8", VA = "0xAF7ED8")]
		[IteratorStateMachine(typeof(<ResetPosition>d__26))]
		private IEnumerator ResetPosition()
		{
			return null;
		}

		[Token(Token = "0x6001ADC")]
		[Address(RVA = "0xAF7F68", Offset = "0xAF7F68", VA = "0xAF7F68")]
		public TrainButtonVisualController()
		{
		}
	}
	[Token(Token = "0x2000477")]
	public class TrainCar : TrainCarBase
	{
		[Token(Token = "0x4001D1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private TrainCarBase _parentLocomotive;

		[Token(Token = "0x4001D1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		protected float _distanceBehindParent;

		[Token(Token = "0x17000395")]
		public float DistanceBehindParentScaled
		{
			[Token(Token = "0x6001AE3")]
			[Address(RVA = "0xAF814C", Offset = "0xAF814C", VA = "0xAF814C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6001AE4")]
		[Address(RVA = "0xAF815C", Offset = "0xAF815C", VA = "0xAF815C", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6001AE5")]
		[Address(RVA = "0xAF8164", Offset = "0xAF8164", VA = "0xAF8164", Slot = "5")]
		public override void UpdatePosition()
		{
		}

		[Token(Token = "0x6001AE6")]
		[Address(RVA = "0xAF8494", Offset = "0xAF8494", VA = "0xAF8494")]
		public TrainCar()
		{
		}
	}
	[Token(Token = "0x2000478")]
	public abstract class TrainCarBase : MonoBehaviour
	{
		[Token(Token = "0x4001D1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Vector3 OFFSET;

		[Token(Token = "0x4001D1F")]
		private const float WHEEL_RADIUS = 0.027f;

		[Token(Token = "0x4001D20")]
		private const float TWO_PI = (float)Math.PI * 2f;

		[Token(Token = "0x4001D21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		protected Transform _frontWheels;

		[Token(Token = "0x4001D22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		protected Transform _rearWheels;

		[Token(Token = "0x4001D23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		protected TrainTrack _trainTrack;

		[Token(Token = "0x4001D24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		protected Transform[] _individualWheels;

		[Token(Token = "0x4001D26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		protected float scale;

		[Token(Token = "0x4001D27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Pose _frontPose;

		[Token(Token = "0x4001D28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Pose _rearPose;

		[Token(Token = "0x17000396")]
		public float Distance
		{
			[Token(Token = "0x6001AE7")]
			[Address(RVA = "0xAF8578", Offset = "0xAF8578", VA = "0xAF8578")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001AE8")]
			[Address(RVA = "0xAF8580", Offset = "0xAF8580", VA = "0xAF8580")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x17000397")]
		public float Scale
		{
			[Token(Token = "0x6001AE9")]
			[Address(RVA = "0xAF8588", Offset = "0xAF8588", VA = "0xAF8588")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001AEA")]
			[Address(RVA = "0xAF8590", Offset = "0xAF8590", VA = "0xAF8590")]
			set
			{
			}
		}

		[Token(Token = "0x6001AEB")]
		[Address(RVA = "0xAF8160", Offset = "0xAF8160", VA = "0xAF8160", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6001AEC")]
		[Address(RVA = "0xAF8598", Offset = "0xAF8598", VA = "0xAF8598")]
		public void UpdatePose(float distance, TrainCarBase train, Pose pose)
		{
		}

		[Token(Token = "0x6001AED")]
		[Address(RVA = "0xAF81A0", Offset = "0xAF81A0", VA = "0xAF81A0")]
		protected void UpdateCarPosition()
		{
		}

		[Token(Token = "0x6001AEE")]
		[Address(RVA = "0xAF83B0", Offset = "0xAF83B0", VA = "0xAF83B0")]
		protected void RotateCarWheels()
		{
		}

		[Token(Token = "0x6001AEF")]
		public abstract void UpdatePosition();

		[Token(Token = "0x6001AF0")]
		[Address(RVA = "0xAF84F4", Offset = "0xAF84F4", VA = "0xAF84F4")]
		protected TrainCarBase()
		{
		}
	}
	[Token(Token = "0x2000479")]
	public class TrainCrossingController : MonoBehaviour
	{
		[Token(Token = "0x200047A")]
		[CompilerGenerated]
		private sealed class <AnimateCrossing>d__15 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001D33")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001D34")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001D35")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TrainCrossingController <>4__this;

			[Token(Token = "0x4001D36")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float animationLength;

			[Token(Token = "0x4001D37")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <animationEndTime>5__2;

			[Token(Token = "0x4001D38")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <lightBlinkDuration>5__3;

			[Token(Token = "0x4001D39")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <lightBlinkStartTime>5__4;

			[Token(Token = "0x4001D3A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <lightBlinkEndTime>5__5;

			[Token(Token = "0x4001D3B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private Material <lightToBlinkOn>5__6;

			[Token(Token = "0x4001D3C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private Material <lightToBlinkOff>5__7;

			[Token(Token = "0x4001D3D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private Color <onColor>5__8;

			[Token(Token = "0x4001D3E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private Color <offColor>5__9;

			[Token(Token = "0x17000398")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001AFE")]
				[Address(RVA = "0xAF8DE0", Offset = "0xAF8DE0", VA = "0xAF8DE0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000399")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001B00")]
				[Address(RVA = "0xAF8E28", Offset = "0xAF8E28", VA = "0xAF8E28", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001AFB")]
			[Address(RVA = "0xAF8AA4", Offset = "0xAF8AA4", VA = "0xAF8AA4")]
			[DebuggerHidden]
			public <AnimateCrossing>d__15(int <>1__state)
			{
			}

			[Token(Token = "0x6001AFC")]
			[Address(RVA = "0xAF8C18", Offset = "0xAF8C18", VA = "0xAF8C18", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001AFD")]
			[Address(RVA = "0xAF8C1C", Offset = "0xAF8C1C", VA = "0xAF8C1C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001AFF")]
			[Address(RVA = "0xAF8DE8", Offset = "0xAF8DE8", VA = "0xAF8DE8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001D29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private AudioSource _audioSource;

		[Token(Token = "0x4001D2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private AudioClip[] _crossingSounds;

		[Token(Token = "0x4001D2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private MeshRenderer _lightSide1Renderer;

		[Token(Token = "0x4001D2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private MeshRenderer _lightSide2Renderer;

		[Token(Token = "0x4001D2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private SelectionCylinder _selectionCylinder;

		[Token(Token = "0x4001D2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material _lightsSide1Mat;

		[Token(Token = "0x4001D2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Material _lightsSide2Mat;

		[Token(Token = "0x4001D30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int _colorId;

		[Token(Token = "0x4001D31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Coroutine _xingAnimationCr;

		[Token(Token = "0x4001D32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private InteractableTool _toolInteractingWithMe;

		[Token(Token = "0x6001AF2")]
		[Address(RVA = "0xAF8708", Offset = "0xAF8708", VA = "0xAF8708")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001AF3")]
		[Address(RVA = "0xAF8748", Offset = "0xAF8748", VA = "0xAF8748")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001AF4")]
		[Address(RVA = "0xAF8820", Offset = "0xAF8820", VA = "0xAF8820")]
		public void CrossingButtonStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6001AF5")]
		[Address(RVA = "0xAF8964", Offset = "0xAF8964", VA = "0xAF8964")]
		private void Update()
		{
		}

		[Token(Token = "0x6001AF6")]
		[Address(RVA = "0xAF8878", Offset = "0xAF8878", VA = "0xAF8878")]
		private void ActivateTrainCrossing()
		{
		}

		[Token(Token = "0x6001AF7")]
		[Address(RVA = "0xAF8A2C", Offset = "0xAF8A2C", VA = "0xAF8A2C")]
		[IteratorStateMachine(typeof(<AnimateCrossing>d__15))]
		private IEnumerator AnimateCrossing(float animationLength)
		{
			return null;
		}

		[Token(Token = "0x6001AF8")]
		[Address(RVA = "0xAF8ACC", Offset = "0xAF8ACC", VA = "0xAF8ACC")]
		private void AffectMaterials(Material[] materials, Color newColor)
		{
		}

		[Token(Token = "0x6001AF9")]
		[Address(RVA = "0xAF8B64", Offset = "0xAF8B64", VA = "0xAF8B64")]
		private void ToggleLightObjects(bool enableState)
		{
		}

		[Token(Token = "0x6001AFA")]
		[Address(RVA = "0xAF8BC0", Offset = "0xAF8BC0", VA = "0xAF8BC0")]
		public TrainCrossingController()
		{
		}
	}
	[Token(Token = "0x200047B")]
	public class TrainLocomotive : TrainCarBase
	{
		[Token(Token = "0x200047C")]
		private enum EngineSoundState
		{
			[Token(Token = "0x4001D5D")]
			Start,
			[Token(Token = "0x4001D5E")]
			AccelerateOrSetProperSpeed,
			[Token(Token = "0x4001D5F")]
			Stop
		}

		[Token(Token = "0x200047D")]
		[CompilerGenerated]
		private sealed class <StartStopTrain>d__34 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001D60")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001D61")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001D62")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public bool startTrain;

			[Token(Token = "0x4001D63")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public TrainLocomotive <>4__this;

			[Token(Token = "0x4001D64")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <endSpeed>5__2;

			[Token(Token = "0x4001D65")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <timePeriodForSpeedChange>5__3;

			[Token(Token = "0x4001D66")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <startTime>5__4;

			[Token(Token = "0x4001D67")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private float <endTime>5__5;

			[Token(Token = "0x4001D68")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private float <startSpeed>5__6;

			[Token(Token = "0x1700039A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001B13")]
				[Address(RVA = "0xAF968C", Offset = "0xAF968C", VA = "0xAF968C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700039B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001B15")]
				[Address(RVA = "0xAF96D4", Offset = "0xAF96D4", VA = "0xAF96D4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001B10")]
			[Address(RVA = "0xAF90B8", Offset = "0xAF90B8", VA = "0xAF90B8")]
			[DebuggerHidden]
			public <StartStopTrain>d__34(int <>1__state)
			{
			}

			[Token(Token = "0x6001B11")]
			[Address(RVA = "0xAF9480", Offset = "0xAF9480", VA = "0xAF9480", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001B12")]
			[Address(RVA = "0xAF9484", Offset = "0xAF9484", VA = "0xAF9484", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001B14")]
			[Address(RVA = "0xAF9694", Offset = "0xAF9694", VA = "0xAF9694", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001D3F")]
		private const float MIN_SPEED = 0.2f;

		[Token(Token = "0x4001D40")]
		private const float MAX_SPEED = 2.7f;

		[Token(Token = "0x4001D41")]
		private const float SMOKE_SPEED_MULTIPLIER = 8f;

		[Token(Token = "0x4001D42")]
		private const int MAX_PARTICLES_MULTIPLIER = 3;

		[Token(Token = "0x4001D43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		[Range(0.2f, 2.7f)]
		protected float _initialSpeed;

		[Token(Token = "0x4001D44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private GameObject _startStopButton;

		[Token(Token = "0x4001D45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private GameObject _decreaseSpeedButton;

		[Token(Token = "0x4001D46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private GameObject _increaseSpeedButton;

		[Token(Token = "0x4001D47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private GameObject _smokeButton;

		[Token(Token = "0x4001D48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private GameObject _whistleButton;

		[Token(Token = "0x4001D49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private GameObject _reverseButton;

		[Token(Token = "0x4001D4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private AudioSource _whistleAudioSource;

		[Token(Token = "0x4001D4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		private AudioClip _whistleSound;

		[Token(Token = "0x4001D4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		private AudioSource _engineAudioSource;

		[Token(Token = "0x4001D4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		private AudioClip[] _accelerationSounds;

		[Token(Token = "0x4001D4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		private AudioClip[] _decelerationSounds;

		[Token(Token = "0x4001D4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		private AudioClip _startUpSound;

		[Token(Token = "0x4001D50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		private AudioSource _smokeStackAudioSource;

		[Token(Token = "0x4001D51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		private AudioClip _smokeSound;

		[Token(Token = "0x4001D52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		private ParticleSystem _smoke1;

		[Token(Token = "0x4001D53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		private ParticleSystem _smoke2;

		[Token(Token = "0x4001D54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		private TrainCarBase[] _childCars;

		[Token(Token = "0x4001D55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private bool _isMoving;

		[Token(Token = "0x4001D56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE1")]
		private bool _reverse;

		[Token(Token = "0x4001D57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private float _currentSpeed;

		[Token(Token = "0x4001D58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private float _speedDiv;

		[Token(Token = "0x4001D59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private float _standardRateOverTimeMultiplier;

		[Token(Token = "0x4001D5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private int _standardMaxParticles;

		[Token(Token = "0x4001D5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Coroutine _startStopTrainCr;

		[Token(Token = "0x6001B01")]
		[Address(RVA = "0xAF8E30", Offset = "0xAF8E30", VA = "0xAF8E30")]
		private void Start()
		{
		}

		[Token(Token = "0x6001B02")]
		[Address(RVA = "0xAF8F74", Offset = "0xAF8F74", VA = "0xAF8F74")]
		private void Update()
		{
		}

		[Token(Token = "0x6001B03")]
		[Address(RVA = "0xAF8F80", Offset = "0xAF8F80", VA = "0xAF8F80", Slot = "5")]
		public override void UpdatePosition()
		{
		}

		[Token(Token = "0x6001B04")]
		[Address(RVA = "0xAF5744", Offset = "0xAF5744", VA = "0xAF5744")]
		public void StartStopStateChanged()
		{
		}

		[Token(Token = "0x6001B05")]
		[Address(RVA = "0xAF8EF8", Offset = "0xAF8EF8", VA = "0xAF8EF8")]
		[IteratorStateMachine(typeof(<StartStopTrain>d__34))]
		private IEnumerator StartStopTrain(bool startTrain)
		{
			return null;
		}

		[Token(Token = "0x6001B06")]
		[Address(RVA = "0xAF90E0", Offset = "0xAF90E0", VA = "0xAF90E0")]
		private float PlayEngineSound(EngineSoundState engineSoundState)
		{
			return default(float);
		}

		[Token(Token = "0x6001B07")]
		[Address(RVA = "0xAF9058", Offset = "0xAF9058", VA = "0xAF9058")]
		private void UpdateDistance()
		{
		}

		[Token(Token = "0x6001B08")]
		[Address(RVA = "0xAF57B0", Offset = "0xAF57B0", VA = "0xAF57B0")]
		public void DecreaseSpeedStateChanged()
		{
		}

		[Token(Token = "0x6001B09")]
		[Address(RVA = "0xAF5840", Offset = "0xAF5840", VA = "0xAF5840")]
		public void IncreaseSpeedStateChanged()
		{
		}

		[Token(Token = "0x6001B0A")]
		[Address(RVA = "0xAF92F4", Offset = "0xAF92F4", VA = "0xAF92F4")]
		private void UpdateSmokeEmissionBasedOnSpeed()
		{
		}

		[Token(Token = "0x6001B0B")]
		[Address(RVA = "0xAF93E8", Offset = "0xAF93E8", VA = "0xAF93E8")]
		private float GetCurrentSmokeEmission()
		{
			return default(float);
		}

		[Token(Token = "0x6001B0C")]
		[Address(RVA = "0xAF58D0", Offset = "0xAF58D0", VA = "0xAF58D0")]
		public void SmokeButtonStateChanged()
		{
		}

		[Token(Token = "0x6001B0D")]
		[Address(RVA = "0xAF597C", Offset = "0xAF597C", VA = "0xAF597C")]
		public void WhistleButtonStateChanged()
		{
		}

		[Token(Token = "0x6001B0E")]
		[Address(RVA = "0xAF5A5C", Offset = "0xAF5A5C", VA = "0xAF5A5C")]
		public void ReverseButtonStateChanged()
		{
		}

		[Token(Token = "0x6001B0F")]
		[Address(RVA = "0xAF9424", Offset = "0xAF9424", VA = "0xAF9424")]
		public TrainLocomotive()
		{
		}
	}
	[Token(Token = "0x200047E")]
	public class TrainTrack : MonoBehaviour
	{
		[Token(Token = "0x4001D69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float _gridSize;

		[Token(Token = "0x4001D6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private int _subDivCount;

		[Token(Token = "0x4001D6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Transform _segmentParent;

		[Token(Token = "0x4001D6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Transform _trainParent;

		[Token(Token = "0x4001D6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private bool _regnerateTrackMeshOnAwake;

		[Token(Token = "0x4001D6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float _trainLength;

		[Token(Token = "0x4001D6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private TrackSegment[] _trackSegments;

		[Token(Token = "0x1700039C")]
		public float TrackLength
		{
			[Token(Token = "0x6001B16")]
			[Address(RVA = "0xAF96DC", Offset = "0xAF96DC", VA = "0xAF96DC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001B17")]
			[Address(RVA = "0xAF96E4", Offset = "0xAF96E4", VA = "0xAF96E4")]
			private set
			{
			}
		}

		[Token(Token = "0x6001B18")]
		[Address(RVA = "0xAF96EC", Offset = "0xAF96EC", VA = "0xAF96EC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001B19")]
		[Address(RVA = "0xAF8600", Offset = "0xAF8600", VA = "0xAF8600")]
		public TrackSegment GetSegment(float distance)
		{
			return null;
		}

		[Token(Token = "0x6001B1A")]
		[Address(RVA = "0xAF96F0", Offset = "0xAF96F0", VA = "0xAF96F0")]
		public void Regenerate()
		{
		}

		[Token(Token = "0x6001B1B")]
		[Address(RVA = "0xAF98DC", Offset = "0xAF98DC", VA = "0xAF98DC")]
		private void SetScale(float ratio)
		{
		}

		[Token(Token = "0x6001B1C")]
		[Address(RVA = "0xAF99BC", Offset = "0xAF99BC", VA = "0xAF99BC")]
		public TrainTrack()
		{
		}
	}
	[Token(Token = "0x200047F")]
	public class Pose
	{
		[Token(Token = "0x4001D70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 Position;

		[Token(Token = "0x4001D71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Quaternion Rotation;

		[Token(Token = "0x6001B1D")]
		[Address(RVA = "0xAF76E8", Offset = "0xAF76E8", VA = "0xAF76E8")]
		public Pose()
		{
		}

		[Token(Token = "0x6001B1E")]
		[Address(RVA = "0xAF99D8", Offset = "0xAF99D8", VA = "0xAF99D8")]
		public Pose(Vector3 position, Quaternion rotation)
		{
		}
	}
	[Token(Token = "0x2000480")]
	public class WindmillBladesController : MonoBehaviour
	{
		[Token(Token = "0x2000481")]
		[CompilerGenerated]
		private sealed class <LerpToSpeed>d__17 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001D7D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001D7E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001D7F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public WindmillBladesController <>4__this;

			[Token(Token = "0x4001D80")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float goalSpeed;

			[Token(Token = "0x4001D81")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <totalTime>5__2;

			[Token(Token = "0x4001D82")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <startSpeed>5__3;

			[Token(Token = "0x1700039E")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001B2B")]
				[Address(RVA = "0xAF9F64", Offset = "0xAF9F64", VA = "0xAF9F64", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700039F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001B2D")]
				[Address(RVA = "0xAF9FAC", Offset = "0xAF9FAC", VA = "0xAF9FAC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001B28")]
			[Address(RVA = "0xAF9C94", Offset = "0xAF9C94", VA = "0xAF9C94")]
			[DebuggerHidden]
			public <LerpToSpeed>d__17(int <>1__state)
			{
			}

			[Token(Token = "0x6001B29")]
			[Address(RVA = "0xAF9DE0", Offset = "0xAF9DE0", VA = "0xAF9DE0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001B2A")]
			[Address(RVA = "0xAF9DE4", Offset = "0xAF9DE4", VA = "0xAF9DE4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001B2C")]
			[Address(RVA = "0xAF9F6C", Offset = "0xAF9F6C", VA = "0xAF9F6C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000482")]
		[CompilerGenerated]
		private sealed class <PlaySoundDelayed>d__18 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001D83")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001D84")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001D85")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public WindmillBladesController <>4__this;

			[Token(Token = "0x4001D86")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public AudioClip initial;

			[Token(Token = "0x4001D87")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float timeDelayAfterInitial;

			[Token(Token = "0x4001D88")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public AudioClip clip;

			[Token(Token = "0x170003A0")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001B31")]
				[Address(RVA = "0xAFA07C", Offset = "0xAFA07C", VA = "0xAFA07C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003A1")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001B33")]
				[Address(RVA = "0xAFA0C4", Offset = "0xAFA0C4", VA = "0xAFA0C4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001B2E")]
			[Address(RVA = "0xAF9D48", Offset = "0xAF9D48", VA = "0xAF9D48")]
			[DebuggerHidden]
			public <PlaySoundDelayed>d__18(int <>1__state)
			{
			}

			[Token(Token = "0x6001B2F")]
			[Address(RVA = "0xAF9FB4", Offset = "0xAF9FB4", VA = "0xAF9FB4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001B30")]
			[Address(RVA = "0xAF9FB8", Offset = "0xAF9FB8", VA = "0xAF9FB8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001B32")]
			[Address(RVA = "0xAFA084", Offset = "0xAFA084", VA = "0xAFA084", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001D72")]
		private const float MAX_TIME = 1f;

		[Token(Token = "0x4001D73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private AudioSource _audioSource;

		[Token(Token = "0x4001D74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private AudioClip _windMillRotationSound;

		[Token(Token = "0x4001D75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private AudioClip _windMillStartSound;

		[Token(Token = "0x4001D76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private AudioClip _windMillStopSound;

		[Token(Token = "0x4001D78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float _currentSpeed;

		[Token(Token = "0x4001D79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Coroutine _lerpSpeedCoroutine;

		[Token(Token = "0x4001D7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Coroutine _audioChangeCr;

		[Token(Token = "0x4001D7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Quaternion _originalRotation;

		[Token(Token = "0x4001D7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float _rotAngle;

		[Token(Token = "0x1700039D")]
		public bool IsMoving
		{
			[Token(Token = "0x6001B1F")]
			[Address(RVA = "0xAF9A3C", Offset = "0xAF9A3C", VA = "0xAF9A3C")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001B20")]
			[Address(RVA = "0xAF9A44", Offset = "0xAF9A44", VA = "0xAF9A44")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6001B21")]
		[Address(RVA = "0xAF9A50", Offset = "0xAF9A50", VA = "0xAF9A50")]
		private void Start()
		{
		}

		[Token(Token = "0x6001B22")]
		[Address(RVA = "0xAF9A80", Offset = "0xAF9A80", VA = "0xAF9A80")]
		private void Update()
		{
		}

		[Token(Token = "0x6001B23")]
		[Address(RVA = "0xAF9BC0", Offset = "0xAF9BC0", VA = "0xAF9BC0")]
		public void SetMoveState(bool newMoveState, float goalSpeed)
		{
		}

		[Token(Token = "0x6001B24")]
		[Address(RVA = "0xAF9C1C", Offset = "0xAF9C1C", VA = "0xAF9C1C")]
		[IteratorStateMachine(typeof(<LerpToSpeed>d__17))]
		private IEnumerator LerpToSpeed(float goalSpeed)
		{
			return null;
		}

		[Token(Token = "0x6001B25")]
		[Address(RVA = "0xAF9CBC", Offset = "0xAF9CBC", VA = "0xAF9CBC")]
		[IteratorStateMachine(typeof(<PlaySoundDelayed>d__18))]
		private IEnumerator PlaySoundDelayed(AudioClip initial, AudioClip clip, float timeDelayAfterInitial)
		{
			return null;
		}

		[Token(Token = "0x6001B26")]
		[Address(RVA = "0xAF9D70", Offset = "0xAF9D70", VA = "0xAF9D70")]
		private void PlaySound(AudioClip clip, bool loop = false)
		{
		}

		[Token(Token = "0x6001B27")]
		[Address(RVA = "0xAF9DD8", Offset = "0xAF9DD8", VA = "0xAF9DD8")]
		public WindmillBladesController()
		{
		}
	}
	[Token(Token = "0x2000483")]
	public class WindmillController : MonoBehaviour
	{
		[Token(Token = "0x4001D89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject _startStopButton;

		[Token(Token = "0x4001D8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float _maxSpeed;

		[Token(Token = "0x4001D8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private SelectionCylinder _selectionCylinder;

		[Token(Token = "0x4001D8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private WindmillBladesController _bladesRotation;

		[Token(Token = "0x4001D8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private InteractableTool _toolInteractingWithMe;

		[Token(Token = "0x6001B34")]
		[Address(RVA = "0xAFA0CC", Offset = "0xAFA0CC", VA = "0xAFA0CC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001B35")]
		[Address(RVA = "0xAFA12C", Offset = "0xAFA12C", VA = "0xAFA12C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001B36")]
		[Address(RVA = "0xAFA1F4", Offset = "0xAFA1F4", VA = "0xAFA1F4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001B37")]
		[Address(RVA = "0xAFA304", Offset = "0xAFA304", VA = "0xAFA304")]
		private void StartStopStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6001B38")]
		[Address(RVA = "0xAFA37C", Offset = "0xAFA37C", VA = "0xAFA37C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001B39")]
		[Address(RVA = "0xAFA444", Offset = "0xAFA444", VA = "0xAFA444")]
		public WindmillController()
		{
		}
	}
	[Token(Token = "0x2000484")]
	public enum EUiDisplayType
	{
		[Token(Token = "0x4001D8F")]
		EUDT_WorldGeoQuad,
		[Token(Token = "0x4001D90")]
		EUDT_OverlayQuad,
		[Token(Token = "0x4001D91")]
		EUDT_None,
		[Token(Token = "0x4001D92")]
		EUDT_MaxDislayTypes
	}
	[Token(Token = "0x2000485")]
	public class OVROverlaySample : MonoBehaviour
	{
		[Token(Token = "0x2000486")]
		[CompilerGenerated]
		private sealed class <WaitforOVROverlay>d__30 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001DAB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001DAC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001DAD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public OVROverlaySample <>4__this;

			[Token(Token = "0x170003A2")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001B4D")]
				[Address(RVA = "0xAFBA38", Offset = "0xAFBA38", VA = "0xAFBA38", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003A3")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001B4F")]
				[Address(RVA = "0xAFBA80", Offset = "0xAFBA80", VA = "0xAFBA80", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001B4A")]
			[Address(RVA = "0xAFB0FC", Offset = "0xAFB0FC", VA = "0xAFB0FC")]
			[DebuggerHidden]
			public <WaitforOVROverlay>d__30(int <>1__state)
			{
			}

			[Token(Token = "0x6001B4B")]
			[Address(RVA = "0xAFB858", Offset = "0xAFB858", VA = "0xAFB858", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001B4C")]
			[Address(RVA = "0xAFB85C", Offset = "0xAFB85C", VA = "0xAFB85C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001B4E")]
			[Address(RVA = "0xAFBA40", Offset = "0xAFBA40", VA = "0xAFBA40", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001D93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool inMenu;

		[Token(Token = "0x4001D94")]
		private const string ovrOverlayID = "OVROverlayID";

		[Token(Token = "0x4001D95")]
		private const string applicationID = "ApplicationID";

		[Token(Token = "0x4001D96")]
		private const string noneID = "NoneID";

		[Token(Token = "0x4001D97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Toggle applicationRadioButton;

		[Token(Token = "0x4001D98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Toggle noneRadioButton;

		[Token(Token = "0x4001D99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("App vs Compositor Comparison Settings")]
		public GameObject mainCamera;

		[Token(Token = "0x4001D9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject uiCamera;

		[Token(Token = "0x4001D9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject uiGeoParent;

		[Token(Token = "0x4001D9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject worldspaceGeoParent;

		[Token(Token = "0x4001D9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public OVROverlay cameraRenderOverlay;

		[Token(Token = "0x4001D9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public OVROverlay renderingLabelOverlay;

		[Token(Token = "0x4001D9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Texture applicationLabelTexture;

		[Token(Token = "0x4001DA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Texture compositorLabelTexture;

		[Token(Token = "0x4001DA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Header("Level Loading Sim Settings")]
		public GameObject prefabForLevelLoadSim;

		[Token(Token = "0x4001DA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public OVROverlay cubemapOverlay;

		[Token(Token = "0x4001DA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public OVROverlay loadingTextQuadOverlay;

		[Token(Token = "0x4001DA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float distanceFromCamToLoadText;

		[Token(Token = "0x4001DA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float cubeSpawnRadius;

		[Token(Token = "0x4001DA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float heightBetweenItems;

		[Token(Token = "0x4001DA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public int numObjectsPerLevel;

		[Token(Token = "0x4001DA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public int numLevels;

		[Token(Token = "0x4001DA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public int numLoopsTrigger;

		[Token(Token = "0x4001DAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private List<GameObject> spawnedCubes;

		[Token(Token = "0x6001B3A")]
		[Address(RVA = "0xAFA454", Offset = "0xAFA454", VA = "0xAFA454")]
		private void Start()
		{
		}

		[Token(Token = "0x6001B3B")]
		[Address(RVA = "0xAFAC60", Offset = "0xAFAC60", VA = "0xAFAC60")]
		private void Update()
		{
		}

		[Token(Token = "0x6001B3C")]
		[Address(RVA = "0xAFAD88", Offset = "0xAFAD88", VA = "0xAFAD88")]
		private void ActivateWorldGeo()
		{
		}

		[Token(Token = "0x6001B3D")]
		[Address(RVA = "0xAFAEA4", Offset = "0xAFAEA4", VA = "0xAFAEA4")]
		private void ActivateOVROverlay()
		{
		}

		[Token(Token = "0x6001B3E")]
		[Address(RVA = "0xAFAFC0", Offset = "0xAFAFC0", VA = "0xAFAFC0")]
		private void ActivateNone()
		{
		}

		[Token(Token = "0x6001B3F")]
		[Address(RVA = "0xAFAD68", Offset = "0xAFAD68", VA = "0xAFAD68")]
		private void TriggerLoad()
		{
		}

		[Token(Token = "0x6001B40")]
		[Address(RVA = "0xAFB094", Offset = "0xAFB094", VA = "0xAFB094")]
		[IteratorStateMachine(typeof(<WaitforOVROverlay>d__30))]
		private IEnumerator WaitforOVROverlay()
		{
			return null;
		}

		[Token(Token = "0x6001B41")]
		[Address(RVA = "0xAFB124", Offset = "0xAFB124", VA = "0xAFB124")]
		private void TriggerUnload()
		{
		}

		[Token(Token = "0x6001B42")]
		[Address(RVA = "0xAFA89C", Offset = "0xAFA89C", VA = "0xAFA89C")]
		private void CameraAndRenderTargetSetup()
		{
		}

		[Token(Token = "0x6001B43")]
		[Address(RVA = "0xAFB26C", Offset = "0xAFB26C", VA = "0xAFB26C")]
		private void SimulateLevelLoad()
		{
		}

		[Token(Token = "0x6001B44")]
		[Address(RVA = "0xAFB14C", Offset = "0xAFB14C", VA = "0xAFB14C")]
		private void ClearObjects()
		{
		}

		[Token(Token = "0x6001B45")]
		[Address(RVA = "0xAFB5E8", Offset = "0xAFB5E8", VA = "0xAFB5E8")]
		public void RadioPressed(string radioLabel, string group, Toggle t)
		{
		}

		[Token(Token = "0x6001B46")]
		[Address(RVA = "0xAFB6D4", Offset = "0xAFB6D4", VA = "0xAFB6D4")]
		public OVROverlaySample()
		{
		}
	}
}
namespace OVRTouchSample
{
	[Token(Token = "0x2000487")]
	[RequireComponent(typeof(OVRGrabber))]
	public class Hand : MonoBehaviour
	{
		[Token(Token = "0x4001DAE")]
		public const string ANIM_LAYER_NAME_POINT = "Point Layer";

		[Token(Token = "0x4001DAF")]
		public const string ANIM_LAYER_NAME_THUMB = "Thumb Layer";

		[Token(Token = "0x4001DB0")]
		public const string ANIM_PARAM_NAME_FLEX = "Flex";

		[Token(Token = "0x4001DB1")]
		public const string ANIM_PARAM_NAME_POSE = "Pose";

		[Token(Token = "0x4001DB2")]
		public const float THRESH_COLLISION_FLEX = 0.9f;

		[Token(Token = "0x4001DB3")]
		public const float INPUT_RATE_CHANGE = 20f;

		[Token(Token = "0x4001DB4")]
		public const float COLLIDER_SCALE_MIN = 0.01f;

		[Token(Token = "0x4001DB5")]
		public const float COLLIDER_SCALE_MAX = 1f;

		[Token(Token = "0x4001DB6")]
		public const float COLLIDER_SCALE_PER_SECOND = 1f;

		[Token(Token = "0x4001DB7")]
		public const float TRIGGER_DEBOUNCE_TIME = 0.05f;

		[Token(Token = "0x4001DB8")]
		public const float THUMB_DEBOUNCE_TIME = 0.15f;

		[Token(Token = "0x4001DB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private OVRInput.Controller m_controller;

		[Token(Token = "0x4001DBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Animator m_animator;

		[Token(Token = "0x4001DBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private HandPose m_defaultGrabPose;

		[Token(Token = "0x4001DBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Collider[] m_colliders;

		[Token(Token = "0x4001DBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool m_collisionEnabled;

		[Token(Token = "0x4001DBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private OVRGrabber m_grabber;

		[Token(Token = "0x4001DBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<Renderer> m_showAfterInputFocusAcquired;

		[Token(Token = "0x4001DC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int m_animLayerIndexThumb;

		[Token(Token = "0x4001DC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private int m_animLayerIndexPoint;

		[Token(Token = "0x4001DC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int m_animParamIndexFlex;

		[Token(Token = "0x4001DC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private int m_animParamIndexPose;

		[Token(Token = "0x4001DC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool m_isPointing;

		[Token(Token = "0x4001DC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		private bool m_isGivingThumbsUp;

		[Token(Token = "0x4001DC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float m_pointBlend;

		[Token(Token = "0x4001DC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float m_thumbsUpBlend;

		[Token(Token = "0x4001DC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private bool m_restoreOnInputAcquired;

		[Token(Token = "0x4001DC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float m_collisionScaleCurrent;

		[Token(Token = "0x6001B50")]
		[Address(RVA = "0xAFBA88", Offset = "0xAFBA88", VA = "0xAFBA88")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001B51")]
		[Address(RVA = "0xAFBAD8", Offset = "0xAFBAD8", VA = "0xAFBAD8")]
		private void Start()
		{
		}

		[Token(Token = "0x6001B52")]
		[Address(RVA = "0xAFBF08", Offset = "0xAFBF08", VA = "0xAFBF08")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001B53")]
		[Address(RVA = "0xAFBFF4", Offset = "0xAFBFF4", VA = "0xAFBFF4")]
		private void Update()
		{
		}

		[Token(Token = "0x6001B54")]
		[Address(RVA = "0xAFC158", Offset = "0xAFC158", VA = "0xAFC158")]
		private void UpdateCapTouchStates()
		{
		}

		[Token(Token = "0x6001B55")]
		[Address(RVA = "0xAFC428", Offset = "0xAFC428", VA = "0xAFC428")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001B56")]
		[Address(RVA = "0xAFC50C", Offset = "0xAFC50C", VA = "0xAFC50C")]
		private void OnInputFocusLost()
		{
		}

		[Token(Token = "0x6001B57")]
		[Address(RVA = "0xAFC6B4", Offset = "0xAFC6B4", VA = "0xAFC6B4")]
		private void OnInputFocusAcquired()
		{
		}

		[Token(Token = "0x6001B58")]
		[Address(RVA = "0xAFC1E4", Offset = "0xAFC1E4", VA = "0xAFC1E4")]
		private float InputValueRateChange(bool isDown, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001B59")]
		[Address(RVA = "0xAFC238", Offset = "0xAFC238", VA = "0xAFC238")]
		private void UpdateAnimStates()
		{
		}

		[Token(Token = "0x6001B5A")]
		[Address(RVA = "0xAFBDC8", Offset = "0xAFBDC8", VA = "0xAFBDC8")]
		private void CollisionEnable(bool enabled)
		{
		}

		[Token(Token = "0x6001B5B")]
		[Address(RVA = "0xAFC7D8", Offset = "0xAFC7D8", VA = "0xAFC7D8")]
		public Hand()
		{
		}
	}
	[Token(Token = "0x2000489")]
	public enum HandPoseId
	{
		[Token(Token = "0x4001DCD")]
		Default,
		[Token(Token = "0x4001DCE")]
		Generic,
		[Token(Token = "0x4001DCF")]
		PingPongBall,
		[Token(Token = "0x4001DD0")]
		Controller
	}
	[Token(Token = "0x200048A")]
	public class HandPose : MonoBehaviour
	{
		[Token(Token = "0x4001DD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private bool m_allowPointing;

		[Token(Token = "0x4001DD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[SerializeField]
		private bool m_allowThumbsUp;

		[Token(Token = "0x4001DD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private HandPoseId m_poseId;

		[Token(Token = "0x170003A4")]
		public bool AllowPointing
		{
			[Token(Token = "0x6001B5F")]
			[Address(RVA = "0xAFC884", Offset = "0xAFC884", VA = "0xAFC884")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170003A5")]
		public bool AllowThumbsUp
		{
			[Token(Token = "0x6001B60")]
			[Address(RVA = "0xAFC88C", Offset = "0xAFC88C", VA = "0xAFC88C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170003A6")]
		public HandPoseId PoseId
		{
			[Token(Token = "0x6001B61")]
			[Address(RVA = "0xAFC894", Offset = "0xAFC894", VA = "0xAFC894")]
			get
			{
				return default(HandPoseId);
			}
		}

		[Token(Token = "0x6001B62")]
		[Address(RVA = "0xAFC89C", Offset = "0xAFC89C", VA = "0xAFC89C")]
		public HandPose()
		{
		}
	}
	[Token(Token = "0x200048B")]
	public class TouchController : MonoBehaviour
	{
		[Token(Token = "0x4001DD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private OVRInput.Controller m_controller;

		[Token(Token = "0x4001DD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Animator m_animator;

		[Token(Token = "0x4001DD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool m_restoreOnInputAcquired;

		[Token(Token = "0x6001B63")]
		[Address(RVA = "0xAFC8A4", Offset = "0xAFC8A4", VA = "0xAFC8A4")]
		private void Update()
		{
		}

		[Token(Token = "0x6001B64")]
		[Address(RVA = "0xAFCB70", Offset = "0xAFCB70", VA = "0xAFCB70")]
		private void OnInputFocusLost()
		{
		}

		[Token(Token = "0x6001B65")]
		[Address(RVA = "0xAFCBC0", Offset = "0xAFCBC0", VA = "0xAFCBC0")]
		private void OnInputFocusAcquired()
		{
		}

		[Token(Token = "0x6001B66")]
		[Address(RVA = "0xAFCBF8", Offset = "0xAFCBF8", VA = "0xAFCBF8")]
		public TouchController()
		{
		}
	}
}
namespace Oculus.Voice.Demo.UIShapesDemo
{
	[Token(Token = "0x200048C")]
	public class InteractionHandler : MonoBehaviour
	{
		[Token(Token = "0x4001DD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[Multiline]
		[Header("Default States")]
		private string freshStateText;

		[Token(Token = "0x4001DD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("UI")]
		[SerializeField]
		private Text textArea;

		[Token(Token = "0x4001DD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private bool showJson;

		[Token(Token = "0x4001DDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Voice")]
		[SerializeField]
		private AppVoiceExperience appVoiceExperience;

		[Token(Token = "0x4001DDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private string pendingText;

		[Token(Token = "0x6001B67")]
		[Address(RVA = "0xAFCC00", Offset = "0xAFCC00", VA = "0xAFCC00")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001B68")]
		[Address(RVA = "0xAFCCB0", Offset = "0xAFCCB0", VA = "0xAFCCB0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001B69")]
		[Address(RVA = "0xAFCD60", Offset = "0xAFCD60", VA = "0xAFCD60")]
		private void OnRequestStarted(WitRequest r)
		{
		}

		[Token(Token = "0x6001B6A")]
		[Address(RVA = "0xAFCDEC", Offset = "0xAFCDEC", VA = "0xAFCDEC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001B6B")]
		[Address(RVA = "0xAFCE24", Offset = "0xAFCE24", VA = "0xAFCE24")]
		public void OnResponse(WitResponseNode response)
		{
		}

		[Token(Token = "0x6001B6C")]
		[Address(RVA = "0xAFCF10", Offset = "0xAFCF10", VA = "0xAFCF10")]
		public void OnError(string error, string message)
		{
		}

		[Token(Token = "0x6001B6D")]
		[Address(RVA = "0xAFD0BC", Offset = "0xAFD0BC", VA = "0xAFD0BC")]
		public void ToggleActivation()
		{
		}

		[Token(Token = "0x6001B6E")]
		[Address(RVA = "0xAFD110", Offset = "0xAFD110", VA = "0xAFD110")]
		public InteractionHandler()
		{
		}
	}
	[Token(Token = "0x200048D")]
	public class ColorChanger : MonoBehaviour
	{
		[Token(Token = "0x6001B70")]
		[Address(RVA = "0xAFD168", Offset = "0xAFD168", VA = "0xAFD168")]
		public void UpdateColor(WitResponseNode commandResult)
		{
		}

		[Token(Token = "0x6001B71")]
		[Address(RVA = "0xAFD3D0", Offset = "0xAFD3D0", VA = "0xAFD3D0")]
		public void UpdateColor(string[] results)
		{
		}

		[Token(Token = "0x6001B72")]
		[Address(RVA = "0xAFD1F8", Offset = "0xAFD1F8", VA = "0xAFD1F8")]
		public void UpdateColor(string colorName, string shape)
		{
		}

		[Token(Token = "0x6001B73")]
		[Address(RVA = "0xAFD400", Offset = "0xAFD400", VA = "0xAFD400")]
		public ColorChanger()
		{
		}
	}
	[Token(Token = "0x200048E")]
	[ExecuteAlways]
	public class Instructions : MonoBehaviour
	{
		[Token(Token = "0x200048F")]
		internal enum Step
		{
			[Token(Token = "0x4001DE0")]
			SetupWit,
			[Token(Token = "0x4001DE1")]
			MissingServerToken,
			[Token(Token = "0x4001DE2")]
			MissingClientToken,
			[Token(Token = "0x4001DE3")]
			AddConfig,
			[Token(Token = "0x4001DE4")]
			AddVoiceExperiences,
			[Token(Token = "0x4001DE5")]
			SetConfig,
			[Token(Token = "0x4001DE6")]
			Ready
		}

		[Token(Token = "0x4001DDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly string[] steps;

		[Token(Token = "0x4001DDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Text instructionText;

		[Token(Token = "0x4001DDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Step currentStep;

		[Token(Token = "0x170003A7")]
		internal Step CurrentStep
		{
			[Token(Token = "0x6001B74")]
			[Address(RVA = "0xAFD408", Offset = "0xAFD408", VA = "0xAFD408")]
			get
			{
				return default(Step);
			}
		}

		[Token(Token = "0x170003A8")]
		internal string CurrentStepText
		{
			[Token(Token = "0x6001B75")]
			[Address(RVA = "0xAFD410", Offset = "0xAFD410", VA = "0xAFD410")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001B76")]
		[Address(RVA = "0xAFD490", Offset = "0xAFD490", VA = "0xAFD490")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6001B77")]
		[Address(RVA = "0xAFD498", Offset = "0xAFD498", VA = "0xAFD498")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001B78")]
		[Address(RVA = "0xAFD49C", Offset = "0xAFD49C", VA = "0xAFD49C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001B79")]
		[Address(RVA = "0xAFD494", Offset = "0xAFD494", VA = "0xAFD494")]
		private void UpdateStep()
		{
		}

		[Token(Token = "0x6001B7A")]
		[Address(RVA = "0xAFD4A0", Offset = "0xAFD4A0", VA = "0xAFD4A0")]
		public Instructions()
		{
		}
	}
}
namespace Oculus.Voice.Demo.BuiltInDemo
{
	[Token(Token = "0x2000490")]
	public class TimerController : MonoBehaviour
	{
		[Token(Token = "0x4001DE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float _time;

		[Token(Token = "0x4001DE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private bool _timerExist;

		[Token(Token = "0x4001DE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		private bool _timerRunning;

		[Token(Token = "0x4001DEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The UI text element to show app messages.")]
		public Text logText;

		[Token(Token = "0x4001DEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The timer ring sound.")]
		public AudioClip buzzSound;

		[Token(Token = "0x6001B7C")]
		[Address(RVA = "0xAFD6F0", Offset = "0xAFD6F0", VA = "0xAFD6F0")]
		private void Update()
		{
		}

		[Token(Token = "0x6001B7D")]
		[Address(RVA = "0xAFD7DC", Offset = "0xAFD7DC", VA = "0xAFD7DC")]
		private void Log(string msg)
		{
		}

		[Token(Token = "0x6001B7E")]
		[Address(RVA = "0xAFD744", Offset = "0xAFD744", VA = "0xAFD744")]
		private void OnElapsedTime()
		{
		}

		[Token(Token = "0x6001B7F")]
		[Address(RVA = "0xAFD860", Offset = "0xAFD860", VA = "0xAFD860")]
		public void DeleteTimer()
		{
		}

		[Token(Token = "0x6001B80")]
		[Address(RVA = "0xAFD8D0", Offset = "0xAFD8D0", VA = "0xAFD8D0")]
		public void CreateTimer(string[] entityValues)
		{
		}

		[Token(Token = "0x6001B81")]
		[Address(RVA = "0xAFDC40", Offset = "0xAFDC40", VA = "0xAFDC40")]
		public void GetTimerIntent()
		{
		}

		[Token(Token = "0x6001B82")]
		[Address(RVA = "0xAFDCD8", Offset = "0xAFDCD8", VA = "0xAFDCD8")]
		public void PauseTimer()
		{
		}

		[Token(Token = "0x6001B83")]
		[Address(RVA = "0xAFDD24", Offset = "0xAFDD24", VA = "0xAFDD24")]
		public void ResumeTimer()
		{
		}

		[Token(Token = "0x6001B84")]
		[Address(RVA = "0xAFDD74", Offset = "0xAFDD74", VA = "0xAFDD74")]
		public void SubtractTimeTimer(string[] entityValues)
		{
		}

		[Token(Token = "0x6001B85")]
		[Address(RVA = "0xAFDE80", Offset = "0xAFDE80", VA = "0xAFDE80")]
		public void AddTimeToTimer(string[] entityValues)
		{
		}

		[Token(Token = "0x6001B86")]
		[Address(RVA = "0xAFDF80", Offset = "0xAFDF80", VA = "0xAFDF80")]
		public float GetRemainingTime()
		{
			return default(float);
		}

		[Token(Token = "0x6001B87")]
		[Address(RVA = "0xAFDC5C", Offset = "0xAFDC5C", VA = "0xAFDC5C")]
		public string GetFormattedTimeFromSeconds()
		{
			return null;
		}

		[Token(Token = "0x6001B88")]
		[Address(RVA = "0xAFDADC", Offset = "0xAFDADC", VA = "0xAFDADC")]
		private bool ParseTime(string[] entityValues, out float time)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B89")]
		[Address(RVA = "0xAFDF88", Offset = "0xAFDF88", VA = "0xAFDF88")]
		public TimerController()
		{
		}
	}
	[Token(Token = "0x2000491")]
	public class TimerDisplay : MonoBehaviour
	{
		[Token(Token = "0x4001DEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TimerController timer;

		[Token(Token = "0x4001DED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Text _uiText;

		[Token(Token = "0x6001B8A")]
		[Address(RVA = "0xAFDF90", Offset = "0xAFDF90", VA = "0xAFDF90")]
		private void Start()
		{
		}

		[Token(Token = "0x6001B8B")]
		[Address(RVA = "0xAFDFE0", Offset = "0xAFDFE0", VA = "0xAFDFE0")]
		private void Update()
		{
		}

		[Token(Token = "0x6001B8C")]
		[Address(RVA = "0xAFE01C", Offset = "0xAFE01C", VA = "0xAFE01C")]
		public TimerDisplay()
		{
		}
	}
	[Token(Token = "0x2000492")]
	public class WitActivation : MonoBehaviour
	{
		[Token(Token = "0x4001DEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private AppVoiceExperience voiceExperience;

		[Token(Token = "0x6001B8D")]
		[Address(RVA = "0xAFE024", Offset = "0xAFE024", VA = "0xAFE024")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6001B8E")]
		[Address(RVA = "0xAFE0AC", Offset = "0xAFE0AC", VA = "0xAFE0AC")]
		private void Start()
		{
		}

		[Token(Token = "0x6001B8F")]
		[Address(RVA = "0xAFE0FC", Offset = "0xAFE0FC", VA = "0xAFE0FC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001B90")]
		[Address(RVA = "0xAFE17C", Offset = "0xAFE17C", VA = "0xAFE17C")]
		public void ActivateWit()
		{
		}

		[Token(Token = "0x6001B91")]
		[Address(RVA = "0xAFE1A0", Offset = "0xAFE1A0", VA = "0xAFE1A0")]
		public WitActivation()
		{
		}
	}
}
namespace Oculus.Avatar
{
	[Token(Token = "0x2000493")]
	public static class AvatarLogger
	{
		[Token(Token = "0x4001DEF")]
		public const string LogAvatar = "[Avatars] - ";

		[Token(Token = "0x4001DF0")]
		public const string Tab = "    ";

		[Token(Token = "0x6001B92")]
		[Address(RVA = "0xAFE1A8", Offset = "0xAFE1A8", VA = "0xAFE1A8")]
		[Conditional("ENABLE_AVATAR_LOG_BASIC")]
		[Conditional("ENABLE_AVATAR_LOGS")]
		public static void Log(string logMsg)
		{
		}

		[Token(Token = "0x6001B93")]
		[Address(RVA = "0xAFE234", Offset = "0xAFE234", VA = "0xAFE234")]
		[Conditional("ENABLE_AVATAR_LOG_BASIC")]
		[Conditional("ENABLE_AVATAR_LOGS")]
		public static void Log(string logMsg, UnityEngine.Object context)
		{
		}

		[Token(Token = "0x6001B94")]
		[Address(RVA = "0xAFE2C8", Offset = "0xAFE2C8", VA = "0xAFE2C8")]
		[Conditional("ENABLE_AVATAR_LOGS")]
		[Conditional("ENABLE_AVATAR_LOG_WARNING")]
		public static void LogWarning(string logMsg)
		{
		}

		[Token(Token = "0x6001B95")]
		[Address(RVA = "0xAFE354", Offset = "0xAFE354", VA = "0xAFE354")]
		[Conditional("ENABLE_AVATAR_LOGS")]
		[Conditional("ENABLE_AVATAR_LOG_ERROR")]
		public static void LogError(string logMsg)
		{
		}

		[Token(Token = "0x6001B96")]
		[Address(RVA = "0xAFE3E0", Offset = "0xAFE3E0", VA = "0xAFE3E0")]
		[Conditional("ENABLE_AVATAR_LOG_ERROR")]
		[Conditional("ENABLE_AVATAR_LOGS")]
		public static void LogError(string logMsg, UnityEngine.Object context)
		{
		}
	}
	[Token(Token = "0x2000494")]
	public class CAPI
	{
		[Token(Token = "0x2000495")]
		public delegate void LoggingDelegate(IntPtr str);

		[Token(Token = "0x2000496")]
		public enum Result
		{
			[Token(Token = "0x4001DFC")]
			Success = 0,
			[Token(Token = "0x4001DFD")]
			Failure = -1000,
			[Token(Token = "0x4001DFE")]
			Failure_InvalidParameter = -1001,
			[Token(Token = "0x4001DFF")]
			Failure_NotInitialized = -1002,
			[Token(Token = "0x4001E00")]
			Failure_InvalidOperation = -1003,
			[Token(Token = "0x4001E01")]
			Failure_Unsupported = -1004,
			[Token(Token = "0x4001E02")]
			Failure_NotYetImplemented = -1005,
			[Token(Token = "0x4001E03")]
			Failure_OperationFailed = -1006,
			[Token(Token = "0x4001E04")]
			Failure_InsufficientSize = -1007
		}

		[Token(Token = "0x2000497")]
		private static class OVRP_1_30_0
		{
			[Token(Token = "0x4001E05")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly Version version;

			[PreserveSig]
			[Token(Token = "0x6001C2B")]
			[Address(RVA = "0xB05BC0", Offset = "0xB05BC0", VA = "0xB05BC0")]
			public static extern Result ovrp_SendEvent2(string name, string param, string source);
		}

		[Token(Token = "0x4001DF1")]
		private const string LibFile = "ovravatarloader";

		[Token(Token = "0x4001DF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static IntPtr nativeVisemeData;

		[Token(Token = "0x4001DF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static IntPtr nativeGazeTargetsData;

		[Token(Token = "0x4001DF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static IntPtr nativeAvatarLightsData;

		[Token(Token = "0x4001DF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static IntPtr DebugLineCountData;

		[Token(Token = "0x4001DF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static float[] scratchBufferFloat;

		[Token(Token = "0x4001DF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static GameObject debugLineGo;

		[Token(Token = "0x4001DF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static string SDKRuntimePrefix;

		[Token(Token = "0x4001DF9")]
		private const string ovrPluginDLL = "OVRPlugin";

		[Token(Token = "0x4001DFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static Version ovrPluginVersion;

		[PreserveSig]
		[Token(Token = "0x6001B97")]
		[Address(RVA = "0xAFE4CC", Offset = "0xAFE4CC", VA = "0xAFE4CC")]
		public static extern void ovrAvatar_InitializeAndroidUnity(string appID);

		[Token(Token = "0x6001B98")]
		[Address(RVA = "0xAFE558", Offset = "0xAFE558", VA = "0xAFE558")]
		public static void Initialize()
		{
		}

		[Token(Token = "0x6001B99")]
		[Address(RVA = "0xAFE760", Offset = "0xAFE760", VA = "0xAFE760")]
		public static void Shutdown()
		{
		}

		[PreserveSig]
		[Token(Token = "0x6001B9A")]
		[Address(RVA = "0xAFE834", Offset = "0xAFE834", VA = "0xAFE834")]
		public static extern void ovrAvatar_Shutdown();

		[PreserveSig]
		[Token(Token = "0x6001B9B")]
		[Address(RVA = "0xAFE898", Offset = "0xAFE898", VA = "0xAFE898")]
		public static extern IntPtr ovrAvatarMessage_Pop();

		[PreserveSig]
		[Token(Token = "0x6001B9C")]
		[Address(RVA = "0xAFE900", Offset = "0xAFE900", VA = "0xAFE900")]
		public static extern ovrAvatarMessageType ovrAvatarMessage_GetType(IntPtr msg);

		[Token(Token = "0x6001B9D")]
		[Address(RVA = "0xAFE97C", Offset = "0xAFE97C", VA = "0xAFE97C")]
		public static ovrAvatarMessage_AvatarSpecification ovrAvatarMessage_GetAvatarSpecification(IntPtr msg)
		{
			return default(ovrAvatarMessage_AvatarSpecification);
		}

		[PreserveSig]
		[Token(Token = "0x6001B9E")]
		[Address(RVA = "0xAFEAAC", Offset = "0xAFEAAC", VA = "0xAFEAAC")]
		private static extern IntPtr ovrAvatarMessage_GetAvatarSpecification_Native(IntPtr msg);

		[Token(Token = "0x6001B9F")]
		[Address(RVA = "0xAFEB28", Offset = "0xAFEB28", VA = "0xAFEB28")]
		public static ovrAvatarMessage_AssetLoaded ovrAvatarMessage_GetAssetLoaded(IntPtr msg)
		{
			return default(ovrAvatarMessage_AssetLoaded);
		}

		[PreserveSig]
		[Token(Token = "0x6001BA0")]
		[Address(RVA = "0xAFEC58", Offset = "0xAFEC58", VA = "0xAFEC58")]
		private static extern IntPtr ovrAvatarMessage_GetAssetLoaded_Native(IntPtr msg);

		[PreserveSig]
		[Token(Token = "0x6001BA1")]
		[Address(RVA = "0xAFECD4", Offset = "0xAFECD4", VA = "0xAFECD4")]
		public static extern void ovrAvatarMessage_Free(IntPtr msg);

		[PreserveSig]
		[Token(Token = "0x6001BA2")]
		[Address(RVA = "0xAFED50", Offset = "0xAFED50", VA = "0xAFED50")]
		public static extern IntPtr ovrAvatarSpecificationRequest_Create(ulong userID);

		[PreserveSig]
		[Token(Token = "0x6001BA3")]
		[Address(RVA = "0xAFEDCC", Offset = "0xAFEDCC", VA = "0xAFEDCC")]
		public static extern void ovrAvatarSpecificationRequest_Destroy(IntPtr specificationRequest);

		[PreserveSig]
		[Token(Token = "0x6001BA4")]
		[Address(RVA = "0xAFEE48", Offset = "0xAFEE48", VA = "0xAFEE48")]
		public static extern void ovrAvatarSpecificationRequest_SetCombineMeshes(IntPtr specificationRequest, bool useCombinedMesh);

		[PreserveSig]
		[Token(Token = "0x6001BA5")]
		[Address(RVA = "0xAFEECC", Offset = "0xAFEECC", VA = "0xAFEECC")]
		public static extern void ovrAvatarSpecificationRequest_SetLookAndFeelVersion(IntPtr specificationRequest, ovrAvatarLookAndFeelVersion version);

		[PreserveSig]
		[Token(Token = "0x6001BA6")]
		[Address(RVA = "0xAFEF50", Offset = "0xAFEF50", VA = "0xAFEF50")]
		public static extern void ovrAvatarSpecificationRequest_SetLevelOfDetail(IntPtr specificationRequest, ovrAvatarAssetLevelOfDetail lod);

		[PreserveSig]
		[Token(Token = "0x6001BA7")]
		[Address(RVA = "0xAFEFD4", Offset = "0xAFEFD4", VA = "0xAFEFD4")]
		public static extern void ovrAvatar_RequestAvatarSpecification(ulong userID);

		[PreserveSig]
		[Token(Token = "0x6001BA8")]
		[Address(RVA = "0xAFF050", Offset = "0xAFF050", VA = "0xAFF050")]
		public static extern void ovrAvatar_RequestAvatarSpecificationFromSpecRequest(IntPtr specificationRequest);

		[PreserveSig]
		[Token(Token = "0x6001BA9")]
		[Address(RVA = "0xAFF0CC", Offset = "0xAFF0CC", VA = "0xAFF0CC")]
		public static extern void ovrAvatarSpecificationRequest_SetFallbackLookAndFeelVersion(IntPtr specificationRequest, ovrAvatarLookAndFeelVersion version);

		[PreserveSig]
		[Token(Token = "0x6001BAA")]
		[Address(RVA = "0xAFF150", Offset = "0xAFF150", VA = "0xAFF150")]
		public static extern void ovrAvatarSpecificationRequest_SetExpressiveFlag(IntPtr specificationRequest, bool enable);

		[PreserveSig]
		[Token(Token = "0x6001BAB")]
		[Address(RVA = "0xAFF1D4", Offset = "0xAFF1D4", VA = "0xAFF1D4")]
		public static extern IntPtr ovrAvatar_Create(IntPtr avatarSpecification, ovrAvatarCapabilities capabilities);

		[PreserveSig]
		[Token(Token = "0x6001BAC")]
		[Address(RVA = "0xAFF258", Offset = "0xAFF258", VA = "0xAFF258")]
		public static extern void ovrAvatar_Destroy(IntPtr avatar);

		[PreserveSig]
		[Token(Token = "0x6001BAD")]
		[Address(RVA = "0xAFF2D4", Offset = "0xAFF2D4", VA = "0xAFF2D4")]
		public static extern void ovrAvatarPose_UpdateBody(IntPtr avatar, ovrAvatarTransform headPose);

		[Token(Token = "0x6001BAE")]
		[Address(RVA = "0xAFF368", Offset = "0xAFF368", VA = "0xAFF368")]
		public static void ovrAvatarPose_UpdateVoiceVisualization(IntPtr avatar, float[] pcmData)
		{
		}

		[PreserveSig]
		[Token(Token = "0x6001BAF")]
		[Address(RVA = "0xAFF3D0", Offset = "0xAFF3D0", VA = "0xAFF3D0")]
		private static extern void ovrAvatarPose_UpdateVoiceVisualization_Native(IntPtr avatar, uint pcmDataSize, [In] float[] pcmData);

		[PreserveSig]
		[Token(Token = "0x6001BB0")]
		[Address(RVA = "0xAFF46C", Offset = "0xAFF46C", VA = "0xAFF46C")]
		public static extern void ovrAvatarPose_UpdateHands(IntPtr avatar, ovrAvatarHandInputState inputStateLeft, ovrAvatarHandInputState inputStateRight);

		[PreserveSig]
		[Token(Token = "0x6001BB1")]
		[Address(RVA = "0xAFF520", Offset = "0xAFF520", VA = "0xAFF520")]
		public static extern void ovrAvatarPose_UpdateHandsWithType(IntPtr avatar, ovrAvatarHandInputState inputStateLeft, ovrAvatarHandInputState inputStateRight, ovrAvatarControllerType type);

		[PreserveSig]
		[Token(Token = "0x6001BB2")]
		[Address(RVA = "0xAFF5E4", Offset = "0xAFF5E4", VA = "0xAFF5E4")]
		public static extern void ovrAvatarPose_Finalize(IntPtr avatar, float elapsedSeconds);

		[PreserveSig]
		[Token(Token = "0x6001BB3")]
		[Address(RVA = "0xAFF670", Offset = "0xAFF670", VA = "0xAFF670")]
		public static extern void ovrAvatar_SetLeftControllerVisibility(IntPtr avatar, bool show);

		[PreserveSig]
		[Token(Token = "0x6001BB4")]
		[Address(RVA = "0xAFF6F4", Offset = "0xAFF6F4", VA = "0xAFF6F4")]
		public static extern void ovrAvatar_SetRightControllerVisibility(IntPtr avatar, bool show);

		[PreserveSig]
		[Token(Token = "0x6001BB5")]
		[Address(RVA = "0xAFF778", Offset = "0xAFF778", VA = "0xAFF778")]
		public static extern void ovrAvatar_SetLeftHandVisibility(IntPtr avatar, bool show);

		[PreserveSig]
		[Token(Token = "0x6001BB6")]
		[Address(RVA = "0xAFF7FC", Offset = "0xAFF7FC", VA = "0xAFF7FC")]
		public static extern void ovrAvatar_SetRightHandVisibility(IntPtr avatar, bool show);

		[PreserveSig]
		[Token(Token = "0x6001BB7")]
		[Address(RVA = "0xAFF880", Offset = "0xAFF880", VA = "0xAFF880")]
		public static extern uint ovrAvatarComponent_Count(IntPtr avatar);

		[Token(Token = "0x6001BB8")]
		[Address(RVA = "0xAFF8FC", Offset = "0xAFF8FC", VA = "0xAFF8FC")]
		public static void ovrAvatarComponent_Get(IntPtr avatar, uint index, bool includeName, ref ovrAvatarComponent component)
		{
		}

		[Token(Token = "0x6001BB9")]
		[Address(RVA = "0xAFFA00", Offset = "0xAFFA00", VA = "0xAFFA00")]
		public static void ovrAvatarComponent_Get(IntPtr componentPtr, bool includeName, ref ovrAvatarComponent component)
		{
		}

		[PreserveSig]
		[Token(Token = "0x6001BBA")]
		[Address(RVA = "0xAFF97C", Offset = "0xAFF97C", VA = "0xAFF97C")]
		public static extern IntPtr ovrAvatarComponent_Get_Native(IntPtr avatar, uint index);

		[Token(Token = "0x6001BBB")]
		[Address(RVA = "0xAFFBE0", Offset = "0xAFFBE0", VA = "0xAFFBE0")]
		public static bool ovrAvatarPose_GetBaseComponent(IntPtr avatar, ref ovrAvatarBaseComponent component)
		{
			return default(bool);
		}

		[PreserveSig]
		[Token(Token = "0x6001BBC")]
		[Address(RVA = "0xAFFD44", Offset = "0xAFFD44", VA = "0xAFFD44")]
		private static extern IntPtr ovrAvatarPose_GetBaseComponent_Native(IntPtr avatar);

		[Token(Token = "0x6001BBD")]
		public static IntPtr MarshalRenderComponent<T>(IntPtr ptr) where T : struct
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6001BBE")]
		[Address(RVA = "0xAFFDC0", Offset = "0xAFFDC0", VA = "0xAFFDC0")]
		public static bool ovrAvatarPose_GetBodyComponent(IntPtr avatar, ref ovrAvatarBodyComponent component)
		{
			return default(bool);
		}

		[PreserveSig]
		[Token(Token = "0x6001BBF")]
		[Address(RVA = "0xB00054", Offset = "0xB00054", VA = "0xB00054")]
		private static extern IntPtr ovrAvatarPose_GetBodyComponent_Native(IntPtr avatar);

		[Token(Token = "0x6001BC0")]
		[Address(RVA = "0xB000D0", Offset = "0xB000D0", VA = "0xB000D0")]
		public static bool ovrAvatarPose_GetLeftControllerComponent(IntPtr avatar, ref ovrAvatarControllerComponent component)
		{
			return default(bool);
		}

		[PreserveSig]
		[Token(Token = "0x6001BC1")]
		[Address(RVA = "0xB00234", Offset = "0xB00234", VA = "0xB00234")]
		private static extern IntPtr ovrAvatarPose_GetLeftControllerComponent_Native(IntPtr avatar);

		[Token(Token = "0x6001BC2")]
		[Address(RVA = "0xB002B0", Offset = "0xB002B0", VA = "0xB002B0")]
		public static bool ovrAvatarPose_GetRightControllerComponent(IntPtr avatar, ref ovrAvatarControllerComponent component)
		{
			return default(bool);
		}

		[PreserveSig]
		[Token(Token = "0x6001BC3")]
		[Address(RVA = "0xB00414", Offset = "0xB00414", VA = "0xB00414")]
		private static extern IntPtr ovrAvatarPose_GetRightControllerComponent_Native(IntPtr avatar);

		[Token(Token = "0x6001BC4")]
		[Address(RVA = "0xB00490", Offset = "0xB00490", VA = "0xB00490")]
		public static bool ovrAvatarPose_GetLeftHandComponent(IntPtr avatar, ref ovrAvatarHandComponent component)
		{
			return default(bool);
		}

		[PreserveSig]
		[Token(Token = "0x6001BC5")]
		[Address(RVA = "0xB005F4", Offset = "0xB005F4", VA = "0xB005F4")]
		private static extern IntPtr ovrAvatarPose_GetLeftHandComponent_Native(IntPtr avatar);

		[Token(Token = "0x6001BC6")]
		[Address(RVA = "0xB00670", Offset = "0xB00670", VA = "0xB00670")]
		public static bool ovrAvatarPose_GetRightHandComponent(IntPtr avatar, ref ovrAvatarHandComponent component)
		{
			return default(bool);
		}

		[PreserveSig]
		[Token(Token = "0x6001BC7")]
		[Address(RVA = "0xB007D4", Offset = "0xB007D4", VA = "0xB007D4")]
		private static extern IntPtr ovrAvatarPose_GetRightHandComponent_Native(IntPtr avatar);

		[PreserveSig]
		[Token(Token = "0x6001BC8")]
		[Address(RVA = "0xB00850", Offset = "0xB00850", VA = "0xB00850")]
		public static extern void ovrAvatarAsset_BeginLoading(ulong assetID);

		[PreserveSig]
		[Token(Token = "0x6001BC9")]
		[Address(RVA = "0xB008CC", Offset = "0xB008CC", VA = "0xB008CC")]
		public static extern bool ovrAvatarAsset_BeginLoadingLOD(ulong assetId, ovrAvatarAssetLevelOfDetail lod);

		[PreserveSig]
		[Token(Token = "0x6001BCA")]
		[Address(RVA = "0xB00958", Offset = "0xB00958", VA = "0xB00958")]
		public static extern ovrAvatarAssetType ovrAvatarAsset_GetType(IntPtr assetHandle);

		[Token(Token = "0x6001BCB")]
		[Address(RVA = "0xB009D4", Offset = "0xB009D4", VA = "0xB009D4")]
		public static ovrAvatarMeshAssetData ovrAvatarAsset_GetMeshData(IntPtr assetPtr)
		{
			return default(ovrAvatarMeshAssetData);
		}

		[Token(Token = "0x6001BCC")]
		[Address(RVA = "0xB00B8C", Offset = "0xB00B8C", VA = "0xB00B8C")]
		public static ovrAvatarMeshAssetDataV2 ovrAvatarAsset_GetCombinedMeshData(IntPtr assetPtr)
		{
			return default(ovrAvatarMeshAssetDataV2);
		}

		[PreserveSig]
		[Token(Token = "0x6001BCD")]
		[Address(RVA = "0xB00CC8", Offset = "0xB00CC8", VA = "0xB00CC8")]
		private static extern IntPtr ovrAvatarAsset_GetCombinedMeshData_Native(IntPtr assetPtr);

		[PreserveSig]
		[Token(Token = "0x6001BCE")]
		[Address(RVA = "0xB00B10", Offset = "0xB00B10", VA = "0xB00B10")]
		private static extern IntPtr ovrAvatarAsset_GetMeshData_Native(IntPtr assetPtr);

		[PreserveSig]
		[Token(Token = "0x6001BCF")]
		[Address(RVA = "0xB00D44", Offset = "0xB00D44", VA = "0xB00D44")]
		public static extern uint ovrAvatarAsset_GetMeshBlendShapeCount(IntPtr assetPtr);

		[PreserveSig]
		[Token(Token = "0x6001BD0")]
		[Address(RVA = "0xB00DC0", Offset = "0xB00DC0", VA = "0xB00DC0")]
		public static extern IntPtr ovrAvatarAsset_GetMeshBlendShapeName(IntPtr assetPtr, uint index);

		[PreserveSig]
		[Token(Token = "0x6001BD1")]
		[Address(RVA = "0xB00E44", Offset = "0xB00E44", VA = "0xB00E44")]
		public static extern uint ovrAvatarAsset_GetSubmeshCount(IntPtr assetPtr);

		[PreserveSig]
		[Token(Token = "0x6001BD2")]
		[Address(RVA = "0xB00EC0", Offset = "0xB00EC0", VA = "0xB00EC0")]
		public static extern uint ovrAvatarAsset_GetSubmeshLastIndex(IntPtr assetPtr, uint index);

		[PreserveSig]
		[Token(Token = "0x6001BD3")]
		[Address(RVA = "0xB00F44", Offset = "0xB00F44", VA = "0xB00F44")]
		public static extern IntPtr ovrAvatarAsset_GetMeshBlendShapeVertices(IntPtr assetPtr);

		[PreserveSig]
		[Token(Token = "0x6001BD4")]
		[Address(RVA = "0xB00FC0", Offset = "0xB00FC0", VA = "0xB00FC0")]
		public static extern IntPtr ovrAvatarAsset_GetAvatar(IntPtr assetHandle);

		[Token(Token = "0x6001BD5")]
		[Address(RVA = "0xB0103C", Offset = "0xB0103C", VA = "0xB0103C")]
		public static ulong[] ovrAvatarAsset_GetCombinedMeshIDs(IntPtr assetHandle)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6001BD6")]
		[Address(RVA = "0xB01284", Offset = "0xB01284", VA = "0xB01284")]
		public static extern IntPtr ovrAvatarAsset_GetCombinedMeshIDs_Native(IntPtr assetHandle, IntPtr count);

		[Token(Token = "0x6001BD7")]
		[Address(RVA = "0xB01308", Offset = "0xB01308", VA = "0xB01308")]
		public static void ovrAvatar_GetCombinedMeshAlphaData(IntPtr avatar, ref ulong textureID, ref Vector4 offset)
		{
		}

		[PreserveSig]
		[Token(Token = "0x6001BD8")]
		[Address(RVA = "0xB0151C", Offset = "0xB0151C", VA = "0xB0151C")]
		public static extern IntPtr ovrAvatar_GetCombinedMeshAlphaData_Native(IntPtr avatar, IntPtr textureIDPtr, IntPtr offsetPtr);

		[Token(Token = "0x6001BD9")]
		[Address(RVA = "0xB015B0", Offset = "0xB015B0", VA = "0xB015B0")]
		public static ovrAvatarTextureAssetData ovrAvatarAsset_GetTextureData(IntPtr assetPtr)
		{
			return default(ovrAvatarTextureAssetData);
		}

		[PreserveSig]
		[Token(Token = "0x6001BDA")]
		[Address(RVA = "0xB016E4", Offset = "0xB016E4", VA = "0xB016E4")]
		private static extern IntPtr ovrAvatarAsset_GetTextureData_Native(IntPtr assetPtr);

		[PreserveSig]
		[Token(Token = "0x6001BDB")]
		[Address(RVA = "0xB01760", Offset = "0xB01760", VA = "0xB01760")]
		private static extern IntPtr ovrAvatarAsset_GetMaterialData_Native(IntPtr assetPtr);

		[Token(Token = "0x6001BDC")]
		[Address(RVA = "0xB017DC", Offset = "0xB017DC", VA = "0xB017DC")]
		public static ovrAvatarMaterialState ovrAvatarAsset_GetMaterialState(IntPtr assetPtr)
		{
			return default(ovrAvatarMaterialState);
		}

		[PreserveSig]
		[Token(Token = "0x6001BDD")]
		[Address(RVA = "0xB01914", Offset = "0xB01914", VA = "0xB01914")]
		public static extern ovrAvatarRenderPartType ovrAvatarRenderPart_GetType(IntPtr renderPart);

		[Token(Token = "0x6001BDE")]
		[Address(RVA = "0xB01990", Offset = "0xB01990", VA = "0xB01990")]
		public static ovrAvatarRenderPart_SkinnedMeshRender ovrAvatarRenderPart_GetSkinnedMeshRender(IntPtr renderPart)
		{
			return default(ovrAvatarRenderPart_SkinnedMeshRender);
		}

		[PreserveSig]
		[Token(Token = "0x6001BDF")]
		[Address(RVA = "0xB01AC8", Offset = "0xB01AC8", VA = "0xB01AC8")]
		private static extern IntPtr ovrAvatarRenderPart_GetSkinnedMeshRender_Native(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6001BE0")]
		[Address(RVA = "0xB01B44", Offset = "0xB01B44", VA = "0xB01B44")]
		public static extern ovrAvatarTransform ovrAvatarSkinnedMeshRender_GetTransform(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6001BE1")]
		[Address(RVA = "0xB01BC8", Offset = "0xB01BC8", VA = "0xB01BC8")]
		public static extern ovrAvatarTransform ovrAvatarSkinnedMeshRenderPBS_GetTransform(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6001BE2")]
		[Address(RVA = "0xB01C4C", Offset = "0xB01C4C", VA = "0xB01C4C")]
		public static extern ovrAvatarTransform ovrAvatarSkinnedMeshRenderPBSV2_GetTransform(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6001BE3")]
		[Address(RVA = "0xB01CD0", Offset = "0xB01CD0", VA = "0xB01CD0")]
		public static extern ovrAvatarVisibilityFlags ovrAvatarSkinnedMeshRender_GetVisibilityMask(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6001BE4")]
		[Address(RVA = "0xB01D4C", Offset = "0xB01D4C", VA = "0xB01D4C")]
		public static extern bool ovrAvatarSkinnedMeshRender_MaterialStateChanged(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6001BE5")]
		[Address(RVA = "0xB01DD0", Offset = "0xB01DD0", VA = "0xB01DD0")]
		public static extern bool ovrAvatarSkinnedMeshRenderPBSV2_MaterialStateChanged(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6001BE6")]
		[Address(RVA = "0xB01E54", Offset = "0xB01E54", VA = "0xB01E54")]
		public static extern ovrAvatarVisibilityFlags ovrAvatarSkinnedMeshRenderPBS_GetVisibilityMask(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6001BE7")]
		[Address(RVA = "0xB01ED0", Offset = "0xB01ED0", VA = "0xB01ED0")]
		public static extern ovrAvatarVisibilityFlags ovrAvatarSkinnedMeshRenderPBSV2_GetVisibilityMask(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6001BE8")]
		[Address(RVA = "0xB01F4C", Offset = "0xB01F4C", VA = "0xB01F4C")]
		public static extern ovrAvatarMaterialState ovrAvatarSkinnedMeshRender_GetMaterialState(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6001BE9")]
		[Address(RVA = "0xB01FFC", Offset = "0xB01FFC", VA = "0xB01FFC")]
		public static extern ovrAvatarPBSMaterialState ovrAvatarSkinnedMeshRenderPBSV2_GetPBSMaterialState(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6001BEA")]
		[Address(RVA = "0xB02080", Offset = "0xB02080", VA = "0xB02080")]
		public static extern ovrAvatarExpressiveParameters ovrAvatar_GetExpressiveParameters(IntPtr avatar);

		[PreserveSig]
		[Token(Token = "0x6001BEB")]
		[Address(RVA = "0xB02104", Offset = "0xB02104", VA = "0xB02104")]
		public static extern ulong ovrAvatarSkinnedMeshRender_GetDirtyJoints(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6001BEC")]
		[Address(RVA = "0xB02180", Offset = "0xB02180", VA = "0xB02180")]
		public static extern ulong ovrAvatarSkinnedMeshRenderPBS_GetDirtyJoints(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6001BED")]
		[Address(RVA = "0xB021FC", Offset = "0xB021FC", VA = "0xB021FC")]
		public static extern ulong ovrAvatarSkinnedMeshRenderPBSV2_GetDirtyJoints(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6001BEE")]
		[Address(RVA = "0xB02278", Offset = "0xB02278", VA = "0xB02278")]
		public static extern ovrAvatarTransform ovrAvatarSkinnedMeshRender_GetJointTransform(IntPtr renderPart, uint jointIndex);

		[PreserveSig]
		[Token(Token = "0x6001BEF")]
		[Address(RVA = "0xB0230C", Offset = "0xB0230C", VA = "0xB0230C")]
		public static extern void ovrAvatar_SetActionUnitOnsetSpeed(IntPtr avatar, float onsetSpeed);

		[PreserveSig]
		[Token(Token = "0x6001BF0")]
		[Address(RVA = "0xB02398", Offset = "0xB02398", VA = "0xB02398")]
		public static extern void ovrAvatar_SetActionUnitFalloffSpeed(IntPtr avatar, float falloffSpeed);

		[PreserveSig]
		[Token(Token = "0x6001BF1")]
		[Address(RVA = "0xB02424", Offset = "0xB02424", VA = "0xB02424")]
		public static extern void ovrAvatar_SetVisemeMultiplier(IntPtr avatar, float visemeMultiplier);

		[PreserveSig]
		[Token(Token = "0x6001BF2")]
		[Address(RVA = "0xB024B0", Offset = "0xB024B0", VA = "0xB024B0")]
		public static extern ovrAvatarTransform ovrAvatarSkinnedMeshRenderPBS_GetJointTransform(IntPtr renderPart, uint jointIndex);

		[PreserveSig]
		[Token(Token = "0x6001BF3")]
		[Address(RVA = "0xB02544", Offset = "0xB02544", VA = "0xB02544")]
		public static extern ovrAvatarTransform ovrAvatarSkinnedMeshRenderPBSV2_GetJointTransform(IntPtr renderPart, uint jointIndex);

		[PreserveSig]
		[Token(Token = "0x6001BF4")]
		[Address(RVA = "0xB025D8", Offset = "0xB025D8", VA = "0xB025D8")]
		public static extern ulong ovrAvatarSkinnedMeshRenderPBS_GetAlbedoTextureAssetID(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6001BF5")]
		[Address(RVA = "0xB02654", Offset = "0xB02654", VA = "0xB02654")]
		public static extern ulong ovrAvatarSkinnedMeshRenderPBS_GetSurfaceTextureAssetID(IntPtr renderPart);

		[Token(Token = "0x6001BF6")]
		[Address(RVA = "0xB026D0", Offset = "0xB026D0", VA = "0xB026D0")]
		public static ovrAvatarRenderPart_SkinnedMeshRenderPBS ovrAvatarRenderPart_GetSkinnedMeshRenderPBS(IntPtr renderPart)
		{
			return default(ovrAvatarRenderPart_SkinnedMeshRenderPBS);
		}

		[PreserveSig]
		[Token(Token = "0x6001BF7")]
		[Address(RVA = "0xB02808", Offset = "0xB02808", VA = "0xB02808")]
		private static extern IntPtr ovrAvatarRenderPart_GetSkinnedMeshRenderPBS_Native(IntPtr renderPart);

		[Token(Token = "0x6001BF8")]
		[Address(RVA = "0xB02884", Offset = "0xB02884", VA = "0xB02884")]
		public static ovrAvatarRenderPart_SkinnedMeshRenderPBS_V2 ovrAvatarRenderPart_GetSkinnedMeshRenderPBSV2(IntPtr renderPart)
		{
			return default(ovrAvatarRenderPart_SkinnedMeshRenderPBS_V2);
		}

		[PreserveSig]
		[Token(Token = "0x6001BF9")]
		[Address(RVA = "0xB029BC", Offset = "0xB029BC", VA = "0xB029BC")]
		private static extern IntPtr ovrAvatarRenderPart_GetSkinnedMeshRenderPBSV2_Native(IntPtr renderPart);

		[Token(Token = "0x6001BFA")]
		[Address(RVA = "0xB02A38", Offset = "0xB02A38", VA = "0xB02A38")]
		public static void ovrAvatarSkinnedMeshRender_GetBlendShapeParams(IntPtr renderPart, ref ovrAvatarBlendShapeParams blendParams)
		{
		}

		[PreserveSig]
		[Token(Token = "0x6001BFB")]
		[Address(RVA = "0xB02B58", Offset = "0xB02B58", VA = "0xB02B58")]
		private static extern IntPtr ovrAvatarSkinnedMeshRender_GetBlendShapeParams_Native(IntPtr renderPart);

		[Token(Token = "0x6001BFC")]
		[Address(RVA = "0xB02BD4", Offset = "0xB02BD4", VA = "0xB02BD4")]
		public static ovrAvatarRenderPart_ProjectorRender ovrAvatarRenderPart_GetProjectorRender(IntPtr renderPart)
		{
			return default(ovrAvatarRenderPart_ProjectorRender);
		}

		[Token(Token = "0x6001BFD")]
		[Address(RVA = "0xB02D88", Offset = "0xB02D88", VA = "0xB02D88")]
		public static ovrAvatarPBSMaterialState[] ovrAvatar_GetBodyPBSMaterialStates(IntPtr renderPart)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6001BFE")]
		[Address(RVA = "0xB03030", Offset = "0xB03030", VA = "0xB03030")]
		private static extern IntPtr ovrAvatar_GetBodyPBSMaterialStates_Native(IntPtr avatar, IntPtr count);

		[PreserveSig]
		[Token(Token = "0x6001BFF")]
		[Address(RVA = "0xB02D0C", Offset = "0xB02D0C", VA = "0xB02D0C")]
		private static extern IntPtr ovrAvatarRenderPart_GetProjectorRender_Native(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6001C00")]
		[Address(RVA = "0xB030B4", Offset = "0xB030B4", VA = "0xB030B4")]
		public static extern uint ovrAvatar_GetReferencedAssetCount(IntPtr avatar);

		[PreserveSig]
		[Token(Token = "0x6001C01")]
		[Address(RVA = "0xB03130", Offset = "0xB03130", VA = "0xB03130")]
		public static extern ulong ovrAvatar_GetReferencedAsset(IntPtr avatar, uint index);

		[PreserveSig]
		[Token(Token = "0x6001C02")]
		[Address(RVA = "0xB031B4", Offset = "0xB031B4", VA = "0xB031B4")]
		public static extern void ovrAvatar_SetLeftHandGesture(IntPtr avatar, ovrAvatarHandGesture gesture);

		[PreserveSig]
		[Token(Token = "0x6001C03")]
		[Address(RVA = "0xB03238", Offset = "0xB03238", VA = "0xB03238")]
		public static extern void ovrAvatar_SetRightHandGesture(IntPtr avatar, ovrAvatarHandGesture gesture);

		[PreserveSig]
		[Token(Token = "0x6001C04")]
		[Address(RVA = "0xB032BC", Offset = "0xB032BC", VA = "0xB032BC")]
		public static extern void ovrAvatar_SetLeftHandCustomGesture(IntPtr avatar, uint jointCount, [In] ovrAvatarTransform[] customJointTransforms);

		[PreserveSig]
		[Token(Token = "0x6001C05")]
		[Address(RVA = "0xB03358", Offset = "0xB03358", VA = "0xB03358")]
		public static extern void ovrAvatar_SetRightHandCustomGesture(IntPtr avatar, uint jointCount, [In] ovrAvatarTransform[] customJointTransforms);

		[PreserveSig]
		[Token(Token = "0x6001C06")]
		[Address(RVA = "0xB033F4", Offset = "0xB033F4", VA = "0xB033F4")]
		public static extern void ovrAvatar_UpdatePoseFromPacket(IntPtr avatar, IntPtr packet, float secondsFromStart);

		[PreserveSig]
		[Token(Token = "0x6001C07")]
		[Address(RVA = "0xB03488", Offset = "0xB03488", VA = "0xB03488")]
		public static extern void ovrAvatarPacket_BeginRecording(IntPtr avatar);

		[PreserveSig]
		[Token(Token = "0x6001C08")]
		[Address(RVA = "0xB03504", Offset = "0xB03504", VA = "0xB03504")]
		public static extern IntPtr ovrAvatarPacket_EndRecording(IntPtr avatar);

		[PreserveSig]
		[Token(Token = "0x6001C09")]
		[Address(RVA = "0xB03580", Offset = "0xB03580", VA = "0xB03580")]
		public static extern uint ovrAvatarPacket_GetSize(IntPtr packet);

		[PreserveSig]
		[Token(Token = "0x6001C0A")]
		[Address(RVA = "0xB035FC", Offset = "0xB035FC", VA = "0xB035FC")]
		public static extern float ovrAvatarPacket_GetDurationSeconds(IntPtr packet);

		[PreserveSig]
		[Token(Token = "0x6001C0B")]
		[Address(RVA = "0xB03678", Offset = "0xB03678", VA = "0xB03678")]
		public static extern void ovrAvatarPacket_Free(IntPtr packet);

		[PreserveSig]
		[Token(Token = "0x6001C0C")]
		[Address(RVA = "0xB036F4", Offset = "0xB036F4", VA = "0xB036F4")]
		public static extern bool ovrAvatarPacket_Write(IntPtr packet, uint bufferSize, [Out] byte[] buffer);

		[PreserveSig]
		[Token(Token = "0x6001C0D")]
		[Address(RVA = "0xB03818", Offset = "0xB03818", VA = "0xB03818")]
		public static extern IntPtr ovrAvatarPacket_Read(uint bufferSize, [In] byte[] buffer);

		[PreserveSig]
		[Token(Token = "0x6001C0E")]
		[Address(RVA = "0xB038A4", Offset = "0xB038A4", VA = "0xB038A4")]
		private static extern void ovrAvatar_SetInternalForceASTCTextures(bool value);

		[Token(Token = "0x6001C0F")]
		[Address(RVA = "0xB03920", Offset = "0xB03920", VA = "0xB03920")]
		public static void ovrAvatar_SetForceASTCTextures(bool value)
		{
		}

		[Token(Token = "0x6001C10")]
		[Address(RVA = "0xB03974", Offset = "0xB03974", VA = "0xB03974")]
		public static void ovrAvatar_OverrideExpressiveLogic(IntPtr avatar, ovrAvatarBlendShapeParams blendParams)
		{
		}

		[PreserveSig]
		[Token(Token = "0x6001C11")]
		[Address(RVA = "0xB03AA8", Offset = "0xB03AA8", VA = "0xB03AA8")]
		private static extern void ovrAvatar_OverrideExpressiveLogic_Native(IntPtr avatar, IntPtr state);

		[Token(Token = "0x6001C12")]
		[Address(RVA = "0xB03B2C", Offset = "0xB03B2C", VA = "0xB03B2C")]
		public static void ovrAvatar_SetVisemes(IntPtr avatar, ovrAvatarVisemes visemes)
		{
		}

		[PreserveSig]
		[Token(Token = "0x6001C13")]
		[Address(RVA = "0xB03C60", Offset = "0xB03C60", VA = "0xB03C60")]
		private static extern void ovrAvatar_SetVisemes_Native(IntPtr avatar, IntPtr visemes);

		[PreserveSig]
		[Token(Token = "0x6001C14")]
		[Address(RVA = "0xB03CE4", Offset = "0xB03CE4", VA = "0xB03CE4")]
		public static extern void ovrAvatar_UpdateWorldTransform(IntPtr avatar, ovrAvatarTransform transform);

		[Token(Token = "0x6001C15")]
		[Address(RVA = "0xB03D78", Offset = "0xB03D78", VA = "0xB03D78")]
		public static void ovrAvatar_UpdateGazeTargets(ovrAvatarGazeTargets targets)
		{
		}

		[PreserveSig]
		[Token(Token = "0x6001C16")]
		[Address(RVA = "0xB040B0", Offset = "0xB040B0", VA = "0xB040B0")]
		private static extern void ovrAvatar_UpdateGazeTargets_Native(IntPtr targets);

		[PreserveSig]
		[Token(Token = "0x6001C17")]
		[Address(RVA = "0xB0412C", Offset = "0xB0412C", VA = "0xB0412C")]
		public static extern void ovrAvatar_RemoveGazeTargets(uint targetCount, uint[] ids);

		[Token(Token = "0x6001C18")]
		[Address(RVA = "0xB041B8", Offset = "0xB041B8", VA = "0xB041B8")]
		public static void ovrAvatar_UpdateLights(ovrAvatarLights lights)
		{
		}

		[PreserveSig]
		[Token(Token = "0x6001C19")]
		[Address(RVA = "0xB0490C", Offset = "0xB0490C", VA = "0xB0490C")]
		private static extern void ovrAvatar_UpdateLights_Native(IntPtr lights);

		[PreserveSig]
		[Token(Token = "0x6001C1A")]
		[Address(RVA = "0xB04988", Offset = "0xB04988", VA = "0xB04988")]
		public static extern void ovrAvatar_RemoveLights(uint lightCount, uint[] ids);

		[Token(Token = "0x6001C1B")]
		[Address(RVA = "0xAFE474", Offset = "0xAFE474", VA = "0xAFE474")]
		[MonoPInvokeCallback(typeof(LoggingDelegate))]
		public static void LoggingCallback(IntPtr str)
		{
		}

		[PreserveSig]
		[Token(Token = "0x6001C1C")]
		[Address(RVA = "0xB04A14", Offset = "0xB04A14", VA = "0xB04A14")]
		public static extern void ovrAvatar_RegisterLoggingCallback(LoggingDelegate callback);

		[PreserveSig]
		[Token(Token = "0x6001C1D")]
		[Address(RVA = "0xB04A94", Offset = "0xB04A94", VA = "0xB04A94")]
		public static extern void ovrAvatar_SetLoggingLevel(ovrAvatarLogLevel level);

		[PreserveSig]
		[Token(Token = "0x6001C1E")]
		[Address(RVA = "0xB04B10", Offset = "0xB04B10", VA = "0xB04B10")]
		public static extern IntPtr ovrAvatar_GetDebugTransforms_Native(IntPtr count);

		[PreserveSig]
		[Token(Token = "0x6001C1F")]
		[Address(RVA = "0xB04B8C", Offset = "0xB04B8C", VA = "0xB04B8C")]
		public static extern IntPtr ovrAvatar_GetDebugLines_Native(IntPtr count);

		[Token(Token = "0x6001C20")]
		[Address(RVA = "0xB04C08", Offset = "0xB04C08", VA = "0xB04C08")]
		public static void ovrAvatar_DrawDebugLines()
		{
		}

		[PreserveSig]
		[Token(Token = "0x6001C21")]
		[Address(RVA = "0xB05560", Offset = "0xB05560", VA = "0xB05560")]
		public static extern void ovrAvatar_SetDebugDrawContext(uint context);

		[Token(Token = "0x6001C22")]
		[Address(RVA = "0xB055DC", Offset = "0xB055DC", VA = "0xB055DC")]
		public static bool SendEvent(string name, string param = "", string source = "")
		{
			return default(bool);
		}

		[PreserveSig]
		[Token(Token = "0x6001C23")]
		[Address(RVA = "0xB0592C", Offset = "0xB0592C", VA = "0xB0592C")]
		private static extern IntPtr _ovrp_GetVersion();

		[Token(Token = "0x6001C24")]
		[Address(RVA = "0xB058A8", Offset = "0xB058A8", VA = "0xB058A8")]
		public static string ovrp_GetVersion()
		{
			return null;
		}

		[Token(Token = "0x6001C25")]
		[Address(RVA = "0xB05994", Offset = "0xB05994", VA = "0xB05994")]
		public CAPI()
		{
		}
	}
}
namespace MagicLightProbes
{
	[Token(Token = "0x2000498")]
	public class MLPDataSaver
	{
		[Token(Token = "0x6001C2D")]
		public static void SaveData<T>(T data, string fullFilePath, string consoleString = "")
		{
		}

		[Token(Token = "0x6001C2E")]
		public static T LoadData<T>(T dataRecipient, string fullFilePath, string consoleStringSuccess = "", string consoleStringFail = "")
		{
			return (T)null;
		}

		[Token(Token = "0x6001C2F")]
		[Address(RVA = "0xB05D1C", Offset = "0xB05D1C", VA = "0xB05D1C")]
		public MLPDataSaver()
		{
		}
	}
	[Token(Token = "0x2000499")]
	public static class TransformExtensions
	{
		[Token(Token = "0x6001C30")]
		[Address(RVA = "0xB05D24", Offset = "0xB05D24", VA = "0xB05D24")]
		public static bool MLP_IsVisibleFrom(this Transform transform, Camera camera)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200049A")]
	[HelpURL("https://motion-games-studio.gitbook.io/magic-light-probes/system-components/main-component")]
	[ExecuteInEditMode]
	public class MagicLightProbes : MonoBehaviour
	{
		[Token(Token = "0x200049B")]
		public struct VolumeParameters
		{
			[Token(Token = "0x4001EB2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int volumeIndex;

			[Token(Token = "0x4001EB3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public Vector3 position;

			[Token(Token = "0x4001EB4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3 demensions;

			[Token(Token = "0x6001C36")]
			[Address(RVA = "0xB068FC", Offset = "0xB068FC", VA = "0xB068FC")]
			public VolumeParameters(int _volumeIndex, Vector3 _position, Vector3 _demensions)
			{
			}
		}

		[Token(Token = "0x200049C")]
		public enum FillingMode
		{
			[Token(Token = "0x4001EB6")]
			VerticalDublicating,
			[Token(Token = "0x4001EB7")]
			FullFilling,
			[Token(Token = "0x4001EB8")]
			SeparateFilling
		}

		[Token(Token = "0x200049D")]
		public enum Workflow
		{
			[Token(Token = "0x4001EBA")]
			Simple,
			[Token(Token = "0x4001EBB")]
			Advanced
		}

		[Token(Token = "0x200049E")]
		public enum BoundsDisplayMode
		{
			[Token(Token = "0x4001EBD")]
			Always,
			[Token(Token = "0x4001EBE")]
			OnSelection
		}

		[Token(Token = "0x200049F")]
		public enum DebugPasses
		{
			[Token(Token = "0x4001EC0")]
			MaximumHeight,
			[Token(Token = "0x4001EC1")]
			GeometryCollision,
			[Token(Token = "0x4001EC2")]
			GeometryIntersections,
			[Token(Token = "0x4001EC3")]
			NearGeometry,
			[Token(Token = "0x4001EC4")]
			OutOfRange,
			[Token(Token = "0x4001EC5")]
			OutOfRangeBorders,
			[Token(Token = "0x4001EC6")]
			ShadingBorders,
			[Token(Token = "0x4001EC7")]
			ContrastAreas,
			[Token(Token = "0x4001EC8")]
			NearLights,
			[Token(Token = "0x4001EC9")]
			LightIntensity,
			[Token(Token = "0x4001ECA")]
			UnlitProbes,
			[Token(Token = "0x4001ECB")]
			EqualProbes,
			[Token(Token = "0x4001ECC")]
			GeometryEdges,
			[Token(Token = "0x4001ECD")]
			EqualColor
		}

		[Token(Token = "0x20004A0")]
		public enum DrawModes
		{
			[Token(Token = "0x4001ECF")]
			Accepted,
			[Token(Token = "0x4001ED0")]
			Culled,
			[Token(Token = "0x4001ED1")]
			Both
		}

		[Token(Token = "0x20004A1")]
		public enum CalculationTarget
		{
			[Token(Token = "0x4001ED3")]
			GeometryEdges,
			[Token(Token = "0x4001ED4")]
			GeneralCalculation
		}

		[Serializable]
		[Token(Token = "0x20004A2")]
		private struct TempPointData
		{
			[Token(Token = "0x4001ED5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public float xPos;

			[Token(Token = "0x4001ED6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public float yPos;

			[Token(Token = "0x4001ED7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public float zPos;

			[Token(Token = "0x6001C37")]
			[Address(RVA = "0xB06910", Offset = "0xB06910", VA = "0xB06910")]
			public TempPointData(Vector3 _position)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20004A3")]
		public class WorkPathFoundEvent : UnityEvent<string>
		{
			[Token(Token = "0x6001C38")]
			[Address(RVA = "0xB0691C", Offset = "0xB0691C", VA = "0xB0691C")]
			public WorkPathFoundEvent()
			{
			}
		}

		[Token(Token = "0x4001E06")]
		private const string COMPUTE_SHADERS_FOLDER = "/Passes/Compute Shaders/";

		[Token(Token = "0x4001E07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public IEnumerator colorThresholdRecalculationRoutine;

		[Token(Token = "0x4001E08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public IEnumerator lightProbesVolumeCalculatingRoutine;

		[Token(Token = "0x4001E09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public IEnumerator lightProbesVolumeCalculatingSubRoutine;

		[Token(Token = "0x4001E0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public IEnumerator executingPassesRoutine;

		[Token(Token = "0x4001E0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IEnumerator volumeDivideingRoutine;

		[Token(Token = "0x4001E0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public List<string> groundAndFloorKeywords;

		[Token(Token = "0x4001E0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public List<string> storedGroundAndFloorKeywords;

		[Token(Token = "0x4001E0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public GameObject probesVolume;

		[Token(Token = "0x4001E0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool useDynamicDensity;

		[Token(Token = "0x4001E10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float volumeSpacing;

		[Token(Token = "0x4001E11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float volumeSpacingMin;

		[Token(Token = "0x4001E12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float volumeSpacingMax;

		[Token(Token = "0x4001E13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float cornersDetectionThreshold;

		[Token(Token = "0x4001E14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float cornersDetectionThresholdMin;

		[Token(Token = "0x4001E15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float cornersDetectionThresholdMax;

		[Token(Token = "0x4001E16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public float lastCornersDetectionThreshold;

		[Token(Token = "0x4001E17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float lastCornersDetectionThresholdMin;

		[Token(Token = "0x4001E18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float lastCornersDetectionThresholdMax;

		[Token(Token = "0x4001E19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public int lastMaxProbesInVolume;

		[Token(Token = "0x4001E1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public int maxProbesInVolume;

		[Token(Token = "0x4001E1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public int defaultMaxProbesCount;

		[Token(Token = "0x4001E1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float lastVolumeSpacing;

		[Token(Token = "0x4001E1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float lastVolumeSpacingMin;

		[Token(Token = "0x4001E1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public float lastVolumeSpacingMax;

		[Token(Token = "0x4001E1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public bool volumeSpacingChanged;

		[Token(Token = "0x4001E20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x99")]
		public bool tooManySubVolumes;

		[Token(Token = "0x4001E21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public FillingMode fillingMode;

		[Token(Token = "0x4001E22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Workflow workflow;

		[Token(Token = "0x4001E23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public float maxHeightAboveGeometry;

		[Token(Token = "0x4001E24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public float lastMaxHeightAboveGeometry;

		[Token(Token = "0x4001E25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public float maxHeightAboveTerrain;

		[Token(Token = "0x4001E26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public bool considerDistanceToLights;

		[Token(Token = "0x4001E27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public float lightIntensityTreshold;

		[Token(Token = "0x4001E28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public float colorTreshold;

		[Token(Token = "0x4001E29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public float collisionDetectionRadius;

		[Token(Token = "0x4001E2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public bool saveProbesNearbyGeometry;

		[Token(Token = "0x4001E2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public float cornerProbesSpacing;

		[Token(Token = "0x4001E2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public float nearbyGeometryDetectionRadius;

		[Token(Token = "0x4001E2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public float nearbyGeometryDetectionRadiusMin;

		[Token(Token = "0x4001E2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public float nearbyGeometryDetectionRadiusMax;

		[Token(Token = "0x4001E2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public float distanceFromNearbyGeometry;

		[Token(Token = "0x4001E30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public bool fillEquivalentVolume;

		[Token(Token = "0x4001E31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		public float equivalentVolumeFillingRate;

		[Token(Token = "0x4001E32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public bool fillUnlitVolume;

		[Token(Token = "0x4001E33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE1")]
		public bool fillFreeVolume;

		[Token(Token = "0x4001E34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		public float unlitVolumeFillingRate;

		[Token(Token = "0x4001E35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public float freeVolumeFillingRate;

		[Token(Token = "0x4001E36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		public bool cullAcceptedVolume;

		[Token(Token = "0x4001E37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public float acceptedVolumeFillingRate;

		[Token(Token = "0x4001E38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		public float nearbyGeometryVolumeFillingRate;

		[Token(Token = "0x4001E39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public float verticalDublicatingHeight;

		[Token(Token = "0x4001E3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		public float verticalDublicatingStep;

		[Token(Token = "0x4001E3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public LayerMask raycastFilter;

		[Token(Token = "0x4001E3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public List<MLPLight> excludedLights;

		[Token(Token = "0x4001E3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public LayerMask layerMask;

		[Token(Token = "0x4001E3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		public int firstCollisionLayer;

		[Token(Token = "0x4001E3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public bool useMultithreading;

		[Token(Token = "0x4001E40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public GameObject previousSelection;

		[Token(Token = "0x4001E41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public bool unloaded;

		[Token(Token = "0x4001E42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x129")]
		public bool sceneChanging;

		[Token(Token = "0x4001E43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12A")]
		public bool waitForPrevious;

		[Token(Token = "0x4001E44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public MagicLightProbes previousVolume;

		[Token(Token = "0x4001E45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		public bool optimizeForMixedLighting;

		[Token(Token = "0x4001E46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x139")]
		public bool lastOptimizeForMixedLightingValue;

		[Token(Token = "0x4001E47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13A")]
		public bool lastUseDynamicDensityValue;

		[Token(Token = "0x4001E48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13B")]
		public bool preventLeakageThroughWalls;

		[Token(Token = "0x4001E49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		public bool useVolumeBottom;

		[Token(Token = "0x4001E4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13D")]
		public bool volumeBottomCollisionHeightCheck;

		[Token(Token = "0x4001E4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13E")]
		public bool placeProbesOnGeometryEdges;

		[Token(Token = "0x4001E4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public float lastColorThreshold;

		[Token(Token = "0x4001E4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
		public float lastLightIntensityThreshold;

		[Token(Token = "0x4001E4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		public float lastEquivalentVolumeFillingRate;

		[Token(Token = "0x4001E4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		public float lastUnlitVolumeFillingRate;

		[Token(Token = "0x4001E50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		public float lastFreeVolumeFillingRate;

		[Token(Token = "0x4001E51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
		public float lastCornerProbesSpacing;

		[Token(Token = "0x4001E52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		public float lastDistanceFromGeometry;

		[Token(Token = "0x4001E53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
		public bool debugMode;

		[Token(Token = "0x4001E54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		public float debugObjectScale;

		[Token(Token = "0x4001E55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		public BoundsDisplayMode boundsDisplayMode;

		[Token(Token = "0x4001E56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		public DebugPasses debugPass;

		[Token(Token = "0x4001E57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		public DrawModes drawMode;

		[Token(Token = "0x4001E58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public bool debugShowLightIntensity;

		[Token(Token = "0x4001E59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x171")]
		public bool showPreviewGrid;

		[Token(Token = "0x4001E5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x172")]
		public bool nextStep;

		[Token(Token = "0x4001E5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x173")]
		public bool cullByColor;

		[Token(Token = "0x4001E5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
		public bool forceSaveProbesOnShadingBorders;

		[Token(Token = "0x4001E5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		public string dataPath;

		[Token(Token = "0x4001E5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		public string workPath;

		[Token(Token = "0x4001E5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		public bool workPathFound;

		[Token(Token = "0x4001E60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		public List<Vector3> localFinishedPositions;

		[Token(Token = "0x4001E61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		public ComputeShader calculateVolumeFilling;

		[Token(Token = "0x4001E62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		public ComputeShader calculateProbeSpacing;

		[Token(Token = "0x4001E63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		public ComputeShader calculateDistanceFromGeometry;

		[Token(Token = "0x4001E64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		public MLPVolume currentVolume;

		[Token(Token = "0x4001E65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		public MLPQuickEditing quickEditingComponent;

		[Token(Token = "0x4001E66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		public bool recalculationRequired;

		[Token(Token = "0x4001E67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		private List<Collider> lightColliders;

		[Token(Token = "0x4001E68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		private List<Collider> objectColliders;

		[Token(Token = "0x4001E69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		private List<MLPPointData> finalDebugAcceptedPoints;

		[Token(Token = "0x4001E6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		private List<MLPPointData> finalDebugCulledPoints;

		[Token(Token = "0x4001E6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		private List<GameObject> tempObjects;

		[Token(Token = "0x4001E6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		private List<GameObject> temporarilyDisabledDynamicObjects;

		[Token(Token = "0x4001E6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		private List<GameObject> staticObjectsWithoutCollider;

		[Token(Token = "0x4001E6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		private GameObject combinedVolumeObject;

		[Token(Token = "0x4001E6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		private VolumeParameters currentEditingVolume;

		[Token(Token = "0x4001E70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x224")]
		private Vector3 currentSelectedObjectLastPosition;

		[Token(Token = "0x4001E71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		private GameObject lastSelectedObject;

		[Token(Token = "0x4001E72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
		public bool cancelCombination;

		[Token(Token = "0x4001E73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		public List<IEnumerator> passesToExecute;

		[Token(Token = "0x4001E74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
		public List<GameObject> staticObjects;

		[Token(Token = "0x4001E75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
		public List<MLPLight> lights;

		[Token(Token = "0x4001E76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
		public List<MLPPointData> tmpSharedPointsArray;

		[Token(Token = "0x4001E77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
		public List<MLPPointData> tmpOutOfRangePoints;

		[Token(Token = "0x4001E78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
		public List<MLPPointData> tmpOutOfMaxHeightPoints;

		[Token(Token = "0x4001E79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
		public List<MLPPointData> tmpGeometryCollisionPoints;

		[Token(Token = "0x4001E7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
		public List<MLPPointData> tmpContrastOnOutOfRangePoints;

		[Token(Token = "0x4001E7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
		public List<MLPPointData> tmpContrastShadingBordersPoints;

		[Token(Token = "0x4001E7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
		public List<MLPPointData> tmpUnlitPoints;

		[Token(Token = "0x4001E7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
		public List<MLPPointData> tmpFreePoints;

		[Token(Token = "0x4001E7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
		public List<MLPPointData> tmpNearbyGeometryPoints;

		[Token(Token = "0x4001E7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
		public List<MLPPointData> tmpPointsNearGeometryIntersections;

		[Token(Token = "0x4001E80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
		public List<MLPPointData> tmpNearbyLightsPoints;

		[Token(Token = "0x4001E81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
		public List<MLPPointData> tmpEqualPoints;

		[Token(Token = "0x4001E82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B8")]
		public List<MLPPointData> debugCulledPoints;

		[Token(Token = "0x4001E83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C0")]
		public List<MLPPointData> debugAcceptedPoints;

		[Token(Token = "0x4001E84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C8")]
		public List<GameObject> subVolumesDivided;

		[Token(Token = "0x4001E85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D0")]
		public List<Vector3> points;

		[Token(Token = "0x4001E86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D8")]
		public List<VolumeParameters> innerVolumes;

		[Token(Token = "0x4001E87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E0")]
		public List<VolumeParameters> subVolumesParameters;

		[Token(Token = "0x4001E88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E8")]
		public List<MagicLightProbes> innerVolumesObjects;

		[Token(Token = "0x4001E89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F0")]
		public List<LayerMask> layerMasks;

		[Token(Token = "0x4001E8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F8")]
		public List<Vector3> transformedPoints;

		[Token(Token = "0x4001E8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x300")]
		public string assetEditorPath;

		[Token(Token = "0x4001E8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x308")]
		public MagicLightProbes parentVolume;

		[Token(Token = "0x4001E8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool operationalDataLost;

		[Token(Token = "0x4001E8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x310")]
		public bool localOperationalDataLost;

		[Token(Token = "0x4001E8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x311")]
		public bool recombinationNeeded;

		[Token(Token = "0x4001E90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x312")]
		public bool isInBackground;

		[Token(Token = "0x4001E91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x313")]
		public bool realtimeEditing;

		[Token(Token = "0x4001E92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x314")]
		public bool calculated;

		[Token(Token = "0x4001E93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x315")]
		public bool calculatingError;

		[Token(Token = "0x4001E94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x318")]
		public int xPointsCount;

		[Token(Token = "0x4001E95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31C")]
		public int yPointsCount;

		[Token(Token = "0x4001E96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x320")]
		public int zPointsCount;

		[Token(Token = "0x4001E97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x324")]
		public float prevVolumeScaleX;

		[Token(Token = "0x4001E98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x328")]
		public float prevVolumeScaleY;

		[Token(Token = "0x4001E99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32C")]
		public float prevVolumeScaleZ;

		[Token(Token = "0x4001E9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x330")]
		public int totalProbes;

		[Token(Token = "0x4001E9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x334")]
		public int totalProbesInSubVolume;

		[Token(Token = "0x4001E9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x338")]
		public int totalProbesInVolume;

		[Token(Token = "0x4001E9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x33C")]
		public bool calculatingVolume;

		[Token(Token = "0x4001E9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x33D")]
		public bool calculatingVolumeSubPass;

		[Token(Token = "0x4001E9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x340")]
		public string currentPass;

		[Token(Token = "0x4001EA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x348")]
		public int currentPassProgressCounter;

		[Token(Token = "0x4001EA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34C")]
		public int currentPassProgressFrameSkipper;

		[Token(Token = "0x4001EA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x350")]
		public float totalProgress;

		[Token(Token = "0x4001EA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x354")]
		public float currentPassProgress;

		[Token(Token = "0x4001EA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x358")]
		public int selectedTab;

		[Token(Token = "0x4001EA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35C")]
		public bool showOptionsInManagerWindow;

		[Token(Token = "0x4001EA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35D")]
		public bool restored;

		[Token(Token = "0x4001EA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x360")]
		public int currentVolumePart;

		[Token(Token = "0x4001EA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x364")]
		public float eta;

		[Token(Token = "0x4001EA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x368")]
		public bool changed;

		[Token(Token = "0x4001EAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x369")]
		public bool redivideParts;

		[Token(Token = "0x4001EAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x36A")]
		public bool combinedVolumeError;

		[Token(Token = "0x4001EAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x36B")]
		private bool passesExecuting;

		[Token(Token = "0x4001EAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x36C")]
		private int totalProgressCounter;

		[Token(Token = "0x4001EAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x370")]
		private int totalProgressFrameSkipper;

		[Token(Token = "0x4001EAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x374")]
		private float startTime;

		[Token(Token = "0x4001EB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x378")]
		private float endTime;

		[Token(Token = "0x4001EB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x37C")]
		private bool scenePreparing;

		[Token(Token = "0x6001C31")]
		[Address(RVA = "0xB05DD8", Offset = "0xB05DD8", VA = "0xB05DD8")]
		public void CheckForNearContrast(MLPPointData pointForCheck)
		{
		}

		[Token(Token = "0x6001C32")]
		[Address(RVA = "0xB061AC", Offset = "0xB061AC", VA = "0xB061AC")]
		public bool UpdateProgress(int count, int period = 100)
		{
			return default(bool);
		}

		[Token(Token = "0x6001C33")]
		[Address(RVA = "0xB061F4", Offset = "0xB061F4", VA = "0xB061F4")]
		private bool UpdateTotalProgress(int count, int period = 100)
		{
			return default(bool);
		}

		[Token(Token = "0x6001C34")]
		[Address(RVA = "0xB0623C", Offset = "0xB0623C", VA = "0xB0623C")]
		public MagicLightProbes()
		{
		}
	}
	[Token(Token = "0x20004A4")]
	[ExecuteInEditMode]
	[HelpURL("https://motion-games-studio.gitbook.io/magic-light-probes/system-components/mlp-combined-volume")]
	public class MLPCombinedVolume : MonoBehaviour
	{
		[Token(Token = "0x6001C39")]
		[Address(RVA = "0xB06964", Offset = "0xB06964", VA = "0xB06964")]
		public MLPCombinedVolume()
		{
		}
	}
	[Token(Token = "0x20004A5")]
	[ExecuteInEditMode]
	[DisallowMultipleComponent]
	[HelpURL("https://motion-games-studio.gitbook.io/magic-light-probes/system-components/mlp-light")]
	public class MLPLight : MonoBehaviour
	{
		[Token(Token = "0x20004A6")]
		public enum CalculationMode
		{
			[Token(Token = "0x4001EFD")]
			AccurateShadows,
			[Token(Token = "0x4001EFE")]
			LightIntensity
		}

		[Token(Token = "0x20004A7")]
		public enum MLPLightType
		{
			[Token(Token = "0x4001F00")]
			Spot,
			[Token(Token = "0x4001F01")]
			Directional,
			[Token(Token = "0x4001F02")]
			Point,
			[Token(Token = "0x4001F03")]
			Area,
			[Token(Token = "0x4001F04")]
			Mesh
		}

		[Token(Token = "0x20004A8")]
		public enum MLPLightTypeMA
		{
			[Token(Token = "0x4001F06")]
			Area = 3,
			[Token(Token = "0x4001F07")]
			Mesh
		}

		[Token(Token = "0x20004A9")]
		public enum TracePointSettingMode
		{
			[Token(Token = "0x4001F09")]
			Auto,
			[Token(Token = "0x4001F0A")]
			Custom
		}

		[Token(Token = "0x20004AA")]
		public enum ShadowmaskMode
		{
			[Token(Token = "0x4001F0C")]
			Shadowmask,
			[Token(Token = "0x4001F0D")]
			DistanceShadowmask
		}

		[Token(Token = "0x4001ED8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MLPLightType lightType;

		[Token(Token = "0x4001ED9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public MLPLightType lastLightType;

		[Token(Token = "0x4001EDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MLPLightTypeMA lightTypeMA;

		[Token(Token = "0x4001EDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public CalculationMode calculationMode;

		[Token(Token = "0x4001EDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TracePointSettingMode tracePointSettingMode;

		[Token(Token = "0x4001EDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public LightmapBakeType lightMode;

		[Token(Token = "0x4001EDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ShadowmaskMode shadowmaskMode;

		[Token(Token = "0x4001EDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Light targetLight;

		[Token(Token = "0x4001EE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject parentGameObject;

		[Token(Token = "0x4001EE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector3 position;

		[Token(Token = "0x4001EE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public Vector3 forward;

		[Token(Token = "0x4001EE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool saveNearbyProbes;

		[Token(Token = "0x4001EE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float saveRadius;

		[Token(Token = "0x4001EE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float range;

		[Token(Token = "0x4001EE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public bool useSourceParameters;

		[Token(Token = "0x4001EE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6D")]
		public bool reverseDirection;

		[Token(Token = "0x4001EE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float angle;

		[Token(Token = "0x4001EE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public bool customTracePoints;

		[Token(Token = "0x4001EEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x75")]
		public bool accurateTrace;

		[Token(Token = "0x4001EEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public int accuracy;

		[Token(Token = "0x4001EEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public int lastAccuracy;

		[Token(Token = "0x4001EED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public bool isDirectional;

		[Token(Token = "0x4001EEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public float tracePointSize;

		[Token(Token = "0x4001EEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float lastTracePointSize;

		[Token(Token = "0x4001EF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public MeshFilter lastMesh;

		[Token(Token = "0x4001EF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public List<GameObject> tracePoints;

		[Token(Token = "0x4001EF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public List<MLPTracePoint> tracePointsData;

		[Token(Token = "0x4001EF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public MLPTracePoint mainTracePoint;

		[Token(Token = "0x4001EF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public MagicLightProbes parentVolume;

		[Token(Token = "0x4001EF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public bool showOptionsInManagerWindow;

		[Token(Token = "0x4001EF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public float intensity;

		[Token(Token = "0x4001EF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public bool resetEditor;

		[Token(Token = "0x4001EF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC1")]
		public bool showLightOnScene;

		[Token(Token = "0x4001EF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC2")]
		public bool saveOnOutOfRange;

		[Token(Token = "0x4001EFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC3")]
		public bool isHDRP;

		[Token(Token = "0x4001EFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public Vector2 hdrpAreaSize;

		[Token(Token = "0x6001C3A")]
		[Address(RVA = "0xB0696C", Offset = "0xB0696C", VA = "0xB0696C")]
		public MLPLight()
		{
		}
	}
	[Token(Token = "0x20004AB")]
	public class MLPPointData
	{
		[Token(Token = "0x4001F0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float lightIntensity;

		[Token(Token = "0x4001F0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float maxIntencity;

		[Token(Token = "0x4001F10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 position;

		[Token(Token = "0x4001F11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int col;

		[Token(Token = "0x4001F12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int row;

		[Token(Token = "0x4001F13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int depth;

		[Token(Token = "0x4001F14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public List<float> distancesToLights;

		[Token(Token = "0x4001F15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public List<Vector3> collisionPoints;

		[Token(Token = "0x4001F16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public List<MLPPointData> nearbyPoints;

		[Token(Token = "0x4001F17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public List<MLPPointData> nearbyPointsOptimaziable;

		[Token(Token = "0x4001F18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool removed;

		[Token(Token = "0x4001F19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		public bool outOfRange;

		[Token(Token = "0x4001F1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
		public bool inSaveRange;

		[Token(Token = "0x4001F1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x53")]
		public bool savedNearGeometry;

		[Token(Token = "0x4001F1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public bool contrastOnOutOfRangeArea;

		[Token(Token = "0x4001F1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
		public bool inRangeOfLight;

		[Token(Token = "0x4001F1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x56")]
		public bool contrastOnShadingArea;

		[Token(Token = "0x4001F1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x57")]
		public bool equalIntensity;

		[Token(Token = "0x4001F20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool equalColor;

		[Token(Token = "0x4001F21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		public bool borderPoint;

		[Token(Token = "0x4001F22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5A")]
		public bool outOfMaxHeight;

		[Token(Token = "0x4001F23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float angleToLight;

		[Token(Token = "0x4001F24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Vector3 contactPoint;

		[Token(Token = "0x4001F25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public bool inCorner;

		[Token(Token = "0x4001F26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6D")]
		public bool lockForCull;

		[Token(Token = "0x4001F27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6E")]
		public bool onGeometryEdge;

		[Token(Token = "0x4001F28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6F")]
		public bool lightLeakLocked;

		[Token(Token = "0x4001F29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Vector3 collisionNormal;

		[Token(Token = "0x4001F2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public List<MLPLight> inRangeForLights;

		[Token(Token = "0x4001F2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public List<MLPLight> inShadowForLights;

		[Token(Token = "0x4001F2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public GameObject temporaryObject;

		[Token(Token = "0x4001F2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public GameObject collisionObject;

		[Token(Token = "0x4001F2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Color averagedColor;

		[Token(Token = "0x4001F2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public bool xEndPoint;

		[Token(Token = "0x4001F30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB1")]
		public bool yEndPoint;

		[Token(Token = "0x4001F31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB2")]
		public bool zEndPoint;

		[Token(Token = "0x4001F32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB3")]
		public bool xStartPoint;

		[Token(Token = "0x4001F33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public bool yStartPoint;

		[Token(Token = "0x4001F34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB5")]
		public bool zStartPoint;

		[Token(Token = "0x4001F35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public int equivalent;

		[Token(Token = "0x4001F36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public float avaragedColorValue;

		[Token(Token = "0x4001F37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public bool isUnlit;

		[Token(Token = "0x6001C3B")]
		[Address(RVA = "0xB06A38", Offset = "0xB06A38", VA = "0xB06A38")]
		public void SetPosition(Vector3 position)
		{
		}

		[Token(Token = "0x6001C3C")]
		[Address(RVA = "0xB06A44", Offset = "0xB06A44", VA = "0xB06A44")]
		public void SetOutOfRange(bool visibility)
		{
		}

		[Token(Token = "0x6001C3D")]
		[Address(RVA = "0xB06A50", Offset = "0xB06A50", VA = "0xB06A50")]
		public void SetLightIntensity(float intensity)
		{
		}

		[Token(Token = "0x6001C3E")]
		[Address(RVA = "0xB06A58", Offset = "0xB06A58", VA = "0xB06A58")]
		public void SetInSaveRange(bool value)
		{
		}

		[Token(Token = "0x6001C3F")]
		[Address(RVA = "0xB06A64", Offset = "0xB06A64", VA = "0xB06A64")]
		public void SetInContrastArea(bool value)
		{
		}

		[Token(Token = "0x6001C40")]
		[Address(RVA = "0xB06A70", Offset = "0xB06A70", VA = "0xB06A70")]
		public MLPPointData()
		{
		}
	}
	[Token(Token = "0x20004AC")]
	[ExecuteInEditMode]
	public class MLPPortal : MonoBehaviour
	{
		[Token(Token = "0x4001F38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float yStep;

		[Token(Token = "0x4001F39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float zStep;

		[Token(Token = "0x4001F3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int yCounter;

		[Token(Token = "0x4001F3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int zCounter;

		[Token(Token = "0x4001F3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool calculate;

		[Token(Token = "0x6001C41")]
		[Address(RVA = "0xB06BF8", Offset = "0xB06BF8", VA = "0xB06BF8")]
		private void Start()
		{
		}

		[Token(Token = "0x6001C42")]
		[Address(RVA = "0xB06BFC", Offset = "0xB06BFC", VA = "0xB06BFC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001C43")]
		[Address(RVA = "0xB06C68", Offset = "0xB06C68", VA = "0xB06C68")]
		private void DrawRayX(Vector3 dir)
		{
		}

		[Token(Token = "0x6001C44")]
		[Address(RVA = "0xB06EC4", Offset = "0xB06EC4", VA = "0xB06EC4")]
		private void DrawRayZ(Vector3 dir)
		{
		}

		[Token(Token = "0x6001C45")]
		[Address(RVA = "0xB070E4", Offset = "0xB070E4", VA = "0xB070E4")]
		public MLPPortal()
		{
		}
	}
	[Token(Token = "0x20004AD")]
	[HelpURL("https://motion-games-studio.gitbook.io/magic-light-probes/system-components/mlp-quick-editing")]
	public class MLPQuickEditing : MonoBehaviour
	{
		[Token(Token = "0x4001F3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MagicLightProbes parent;

		[Token(Token = "0x4001F3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float gizmoScale;

		[Token(Token = "0x4001F3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float drawDistance;

		[Token(Token = "0x6001C46")]
		[Address(RVA = "0xB070EC", Offset = "0xB070EC", VA = "0xB070EC")]
		public MLPQuickEditing()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20004AE")]
	public class MLPTracePoint
	{
		[Token(Token = "0x4001F40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 position;

		[Token(Token = "0x4001F41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 forward;

		[Token(Token = "0x4001F42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string name;

		[Token(Token = "0x4001F43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject pointGameObject;

		[Token(Token = "0x6001C47")]
		[Address(RVA = "0xB070FC", Offset = "0xB070FC", VA = "0xB070FC")]
		public MLPTracePoint()
		{
		}
	}
	[Token(Token = "0x20004AF")]
	[ExecuteInEditMode]
	public class MLPVolume : MonoBehaviour
	{
		[Token(Token = "0x4001F44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public MagicLightProbes parentRootComponent;

		[Token(Token = "0x4001F45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public MeshRenderer selfRenderer;

		[Token(Token = "0x4001F46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public bool showGizmo;

		[Token(Token = "0x4001F47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool showGizmoSelected;

		[Token(Token = "0x4001F48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		public bool isPartVolume;

		[Token(Token = "0x4001F49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B")]
		public bool isSubdividedPart;

		[Token(Token = "0x4001F4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool isCalculated;

		[Token(Token = "0x4001F4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		public bool isInProcess;

		[Token(Token = "0x4001F4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E")]
		public bool skipped;

		[Token(Token = "0x4001F4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int id;

		[Token(Token = "0x4001F4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Color colorOnSelection;

		[Token(Token = "0x4001F4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public List<MLPPointData> localAcceptedPoints;

		[Token(Token = "0x4001F50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public List<MLPPointData> localNearbyGeometryPoints;

		[Token(Token = "0x4001F51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public List<MLPPointData> localContrastPoints;

		[Token(Token = "0x4001F52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public List<MLPPointData> localCornerPoints;

		[Token(Token = "0x4001F53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public List<Vector3> localNearbyGeometryPointsPositions;

		[Token(Token = "0x4001F54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public List<Vector3> resultNearbyGeometryPointsPositions;

		[Token(Token = "0x4001F55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public List<Vector3> localCornerPointsPositions;

		[Token(Token = "0x4001F56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public List<Vector3> resultLocalCornerPointsPositions;

		[Token(Token = "0x4001F57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public List<Vector3> localEquivalentPointsPositions;

		[Token(Token = "0x4001F58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public List<Vector3> resultLocalEquivalentPointsPositions;

		[Token(Token = "0x4001F59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public List<Vector3> resultLocalFreePointsPositions;

		[Token(Token = "0x4001F5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public List<Vector3> localUnlitPointsPositions;

		[Token(Token = "0x4001F5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public List<Vector3> localFreePointsPositions;

		[Token(Token = "0x4001F5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public List<Vector3> resultLocalUnlitPointsPositions;

		[Token(Token = "0x4001F5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public List<Vector3> localDirections;

		[Token(Token = "0x4001F5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public List<Vector3> localAvaragedDirections;

		[Token(Token = "0x4001F5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public List<MLPPointData> localColorThresholdEditingPoints;

		[Token(Token = "0x4001F60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public int objectsInside;

		[Token(Token = "0x6001C48")]
		[Address(RVA = "0xB07104", Offset = "0xB07104", VA = "0xB07104")]
		public MLPVolume()
		{
		}
	}
	[Token(Token = "0x20004B0")]
	public class CheckForLightLeakAreas
	{
		[Token(Token = "0x20004B1")]
		[CompilerGenerated]
		private sealed class <ExecutePass>d__0 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001F61")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001F62")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001F63")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MagicLightProbes parent;

			[Token(Token = "0x4001F64")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <i>5__2;

			[Token(Token = "0x170003A9")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001C4E")]
				[Address(RVA = "0xB07A44", Offset = "0xB07A44", VA = "0xB07A44", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003AA")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001C50")]
				[Address(RVA = "0xB07A8C", Offset = "0xB07A8C", VA = "0xB07A8C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001C4B")]
			[Address(RVA = "0xB073E0", Offset = "0xB073E0", VA = "0xB073E0")]
			[DebuggerHidden]
			public <ExecutePass>d__0(int <>1__state)
			{
			}

			[Token(Token = "0x6001C4C")]
			[Address(RVA = "0xB07410", Offset = "0xB07410", VA = "0xB07410", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001C4D")]
			[Address(RVA = "0xB07414", Offset = "0xB07414", VA = "0xB07414", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001C4F")]
			[Address(RVA = "0xB07A4C", Offset = "0xB07A4C", VA = "0xB07A4C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x6001C49")]
		[Address(RVA = "0xB07378", Offset = "0xB07378", VA = "0xB07378")]
		[IteratorStateMachine(typeof(<ExecutePass>d__0))]
		public IEnumerator ExecutePass(MagicLightProbes parent)
		{
			return null;
		}

		[Token(Token = "0x6001C4A")]
		[Address(RVA = "0xB07408", Offset = "0xB07408", VA = "0xB07408")]
		public CheckForLightLeakAreas()
		{
		}
	}
	[Token(Token = "0x20004B2")]
	public class DublicateVertical
	{
		[Token(Token = "0x20004B3")]
		[CompilerGenerated]
		private sealed class <ExecutePass>d__0 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001F65")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001F66")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001F67")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MagicLightProbes parent;

			[Token(Token = "0x4001F68")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <steps>5__2;

			[Token(Token = "0x4001F69")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private List<MLPPointData> <candidates>5__3;

			[Token(Token = "0x4001F6A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private List<MLPPointData> <savedNearGeometry>5__4;

			[Token(Token = "0x4001F6B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private int <i>5__5;

			[Token(Token = "0x4001F6C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private List<MLPPointData>.Enumerator <>7__wrap5;

			[Token(Token = "0x170003AB")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001C57")]
				[Address(RVA = "0xB0869C", Offset = "0xB0869C", VA = "0xB0869C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003AC")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001C59")]
				[Address(RVA = "0xB086E4", Offset = "0xB086E4", VA = "0xB086E4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001C53")]
			[Address(RVA = "0xB07AFC", Offset = "0xB07AFC", VA = "0xB07AFC")]
			[DebuggerHidden]
			public <ExecutePass>d__0(int <>1__state)
			{
			}

			[Token(Token = "0x6001C54")]
			[Address(RVA = "0xB07B2C", Offset = "0xB07B2C", VA = "0xB07B2C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001C55")]
			[Address(RVA = "0xB07B48", Offset = "0xB07B48", VA = "0xB07B48", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001C56")]
			[Address(RVA = "0xB0864C", Offset = "0xB0864C", VA = "0xB0864C")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6001C58")]
			[Address(RVA = "0xB086A4", Offset = "0xB086A4", VA = "0xB086A4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x6001C51")]
		[Address(RVA = "0xB07A94", Offset = "0xB07A94", VA = "0xB07A94")]
		[IteratorStateMachine(typeof(<ExecutePass>d__0))]
		public IEnumerator ExecutePass(MagicLightProbes parent)
		{
			return null;
		}

		[Token(Token = "0x6001C52")]
		[Address(RVA = "0xB07B24", Offset = "0xB07B24", VA = "0xB07B24")]
		public DublicateVertical()
		{
		}
	}
	[Token(Token = "0x20004B4")]
	public static class RandomGen
	{
		[Token(Token = "0x4001F6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static System.Random _global;

		[Token(Token = "0x4001F6E")]
		[ThreadStatic]
		private static System.Random _local;

		[Token(Token = "0x6001C5A")]
		[Address(RVA = "0xB086EC", Offset = "0xB086EC", VA = "0xB086EC")]
		public static int Next(int min, int max)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20004B5")]
	public class EquivalentProbesOptimization
	{
		[Token(Token = "0x20004B6")]
		[CompilerGenerated]
		private sealed class <ExecutePass>d__0 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001F6F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001F70")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001F71")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MagicLightProbes parent;

			[Token(Token = "0x4001F72")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public MLPVolume currentVolume;

			[Token(Token = "0x4001F73")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public bool realtimeEditing;

			[Token(Token = "0x4001F74")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private Vector3[] <exit>5__2;

			[Token(Token = "0x4001F75")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private List<MLPPointData> <tempList>5__3;

			[Token(Token = "0x4001F76")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private int <i>5__4;

			[Token(Token = "0x170003AD")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001C61")]
				[Address(RVA = "0xB09140", Offset = "0xB09140", VA = "0xB09140", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003AE")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001C63")]
				[Address(RVA = "0xB09188", Offset = "0xB09188", VA = "0xB09188", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001C5E")]
			[Address(RVA = "0xB089DC", Offset = "0xB089DC", VA = "0xB089DC")]
			[DebuggerHidden]
			public <ExecutePass>d__0(int <>1__state)
			{
			}

			[Token(Token = "0x6001C5F")]
			[Address(RVA = "0xB08A0C", Offset = "0xB08A0C", VA = "0xB08A0C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001C60")]
			[Address(RVA = "0xB08A10", Offset = "0xB08A10", VA = "0xB08A10", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001C62")]
			[Address(RVA = "0xB09148", Offset = "0xB09148", VA = "0xB09148", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x6001C5C")]
		[Address(RVA = "0xB0895C", Offset = "0xB0895C", VA = "0xB0895C")]
		[IteratorStateMachine(typeof(<ExecutePass>d__0))]
		public IEnumerator ExecutePass(MagicLightProbes parent, [Optional] MLPVolume currentVolume, bool realtimeEditing = false)
		{
			return null;
		}

		[Token(Token = "0x6001C5D")]
		[Address(RVA = "0xB08A04", Offset = "0xB08A04", VA = "0xB08A04")]
		public EquivalentProbesOptimization()
		{
		}
	}
	[Token(Token = "0x20004B7")]
	public class PartialVolumeFilling
	{
		[Token(Token = "0x20004B8")]
		public enum TargetPoint
		{
			[Token(Token = "0x4001F78")]
			Unlit,
			[Token(Token = "0x4001F79")]
			Equivalent,
			[Token(Token = "0x4001F7A")]
			Free
		}

		[Token(Token = "0x20004B9")]
		[CompilerGenerated]
		private sealed class <ExecutePass>d__1 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001F7B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001F7C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001F7D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TargetPoint targetPoint;

			[Token(Token = "0x4001F7E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public MagicLightProbes parent;

			[Token(Token = "0x4001F7F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public MLPVolume currentVolume;

			[Token(Token = "0x4001F80")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public bool realtimeEditing;

			[Token(Token = "0x4001F81")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private List<MLPPointData> <tempList>5__2;

			[Token(Token = "0x4001F82")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private List<Vector3> <realTimeEditingList>5__3;

			[Token(Token = "0x4001F83")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private List<Vector3> <targetPoints>5__4;

			[Token(Token = "0x4001F84")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private float <fillingRate>5__5;

			[Token(Token = "0x4001F85")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private Vector3[] <exit>5__6;

			[Token(Token = "0x4001F86")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			private int <i>5__7;

			[Token(Token = "0x170003AF")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001C69")]
				[Address(RVA = "0xB0A1E0", Offset = "0xB0A1E0", VA = "0xB0A1E0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003B0")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001C6B")]
				[Address(RVA = "0xB0A228", Offset = "0xB0A228", VA = "0xB0A228", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001C66")]
			[Address(RVA = "0xB09220", Offset = "0xB09220", VA = "0xB09220")]
			[DebuggerHidden]
			public <ExecutePass>d__1(int <>1__state)
			{
			}

			[Token(Token = "0x6001C67")]
			[Address(RVA = "0xB09250", Offset = "0xB09250", VA = "0xB09250", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001C68")]
			[Address(RVA = "0xB09254", Offset = "0xB09254", VA = "0xB09254", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001C6A")]
			[Address(RVA = "0xB0A1E8", Offset = "0xB0A1E8", VA = "0xB0A1E8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x6001C64")]
		[Address(RVA = "0xB09190", Offset = "0xB09190", VA = "0xB09190")]
		[IteratorStateMachine(typeof(<ExecutePass>d__1))]
		public IEnumerator ExecutePass(MagicLightProbes parent, TargetPoint targetPoint, [Optional] MLPVolume currentVolume, bool realtimeEditing = false)
		{
			return null;
		}

		[Token(Token = "0x6001C65")]
		[Address(RVA = "0xB09248", Offset = "0xB09248", VA = "0xB09248")]
		public PartialVolumeFilling()
		{
		}
	}
	[Token(Token = "0x20004BA")]
	public class RemoveUnusedPoints
	{
		[Token(Token = "0x20004BB")]
		[CompilerGenerated]
		private sealed class <ExecutePass>d__0 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001F87")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001F88")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001F89")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MagicLightProbes parent;

			[Token(Token = "0x4001F8A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private List<MLPPointData> <pointsToRemove>5__2;

			[Token(Token = "0x4001F8B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private int <i>5__3;

			[Token(Token = "0x170003B1")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001C71")]
				[Address(RVA = "0xB0A80C", Offset = "0xB0A80C", VA = "0xB0A80C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003B2")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001C73")]
				[Address(RVA = "0xB0A854", Offset = "0xB0A854", VA = "0xB0A854", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001C6E")]
			[Address(RVA = "0xB0A298", Offset = "0xB0A298", VA = "0xB0A298")]
			[DebuggerHidden]
			public <ExecutePass>d__0(int <>1__state)
			{
			}

			[Token(Token = "0x6001C6F")]
			[Address(RVA = "0xB0A2C8", Offset = "0xB0A2C8", VA = "0xB0A2C8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001C70")]
			[Address(RVA = "0xB0A2CC", Offset = "0xB0A2CC", VA = "0xB0A2CC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001C72")]
			[Address(RVA = "0xB0A814", Offset = "0xB0A814", VA = "0xB0A814", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x6001C6C")]
		[Address(RVA = "0xB0A230", Offset = "0xB0A230", VA = "0xB0A230")]
		[IteratorStateMachine(typeof(<ExecutePass>d__0))]
		public IEnumerator ExecutePass(MagicLightProbes parent)
		{
			return null;
		}

		[Token(Token = "0x6001C6D")]
		[Address(RVA = "0xB0A2C0", Offset = "0xB0A2C0", VA = "0xB0A2C0")]
		public RemoveUnusedPoints()
		{
		}
	}
	[Token(Token = "0x20004BC")]
	public class SetDistanceFromGeometry
	{
		[Token(Token = "0x20004BD")]
		[CompilerGenerated]
		private sealed class <ExecutePass>d__0 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001F8C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001F8D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001F8E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MLPVolume currentVolume;

			[Token(Token = "0x4001F8F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public MagicLightProbes parent;

			[Token(Token = "0x4001F90")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Vector3[] <exit>5__2;

			[Token(Token = "0x4001F91")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int <i>5__3;

			[Token(Token = "0x170003B3")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001C79")]
				[Address(RVA = "0xB0AE88", Offset = "0xB0AE88", VA = "0xB0AE88", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003B4")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001C7B")]
				[Address(RVA = "0xB0AED0", Offset = "0xB0AED0", VA = "0xB0AED0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001C76")]
			[Address(RVA = "0xB0A8D0", Offset = "0xB0A8D0", VA = "0xB0A8D0")]
			[DebuggerHidden]
			public <ExecutePass>d__0(int <>1__state)
			{
			}

			[Token(Token = "0x6001C77")]
			[Address(RVA = "0xB0A900", Offset = "0xB0A900", VA = "0xB0A900", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001C78")]
			[Address(RVA = "0xB0A904", Offset = "0xB0A904", VA = "0xB0A904", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001C7A")]
			[Address(RVA = "0xB0AE90", Offset = "0xB0AE90", VA = "0xB0AE90", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x6001C74")]
		[Address(RVA = "0xB0A85C", Offset = "0xB0A85C", VA = "0xB0A85C")]
		[IteratorStateMachine(typeof(<ExecutePass>d__0))]
		public IEnumerator ExecutePass(MagicLightProbes parent, MLPVolume currentVolume)
		{
			return null;
		}

		[Token(Token = "0x6001C75")]
		[Address(RVA = "0xB0A8F8", Offset = "0xB0A8F8", VA = "0xB0A8F8")]
		public SetDistanceFromGeometry()
		{
		}
	}
}
namespace FlatKit
{
	[Token(Token = "0x20004BE")]
	public class UvScroller : MonoBehaviour
	{
		[Token(Token = "0x4001F92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Material targetMaterial;

		[Token(Token = "0x4001F93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float speedX;

		[Token(Token = "0x4001F94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float speedY;

		[Token(Token = "0x4001F95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector2 offset;

		[Token(Token = "0x4001F96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector2 initOffset;

		[Token(Token = "0x6001C7C")]
		[Address(RVA = "0xB0AED8", Offset = "0xB0AED8", VA = "0xB0AED8")]
		private void Start()
		{
		}

		[Token(Token = "0x6001C7D")]
		[Address(RVA = "0xB0AF14", Offset = "0xB0AF14", VA = "0xB0AF14")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001C7E")]
		[Address(RVA = "0xB0AF38", Offset = "0xB0AF38", VA = "0xB0AF38")]
		private void Update()
		{
		}

		[Token(Token = "0x6001C7F")]
		[Address(RVA = "0xB0AFA4", Offset = "0xB0AFA4", VA = "0xB0AFA4")]
		public UvScroller()
		{
		}
	}
	[Token(Token = "0x20004BF")]
	[RequireComponent(typeof(Camera))]
	[ExecuteInEditMode]
	[ImageEffectAllowedInSceneView]
	public class FogImageEffect : MonoBehaviour
	{
		[Token(Token = "0x4001F97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool useDistance;

		[Token(Token = "0x4001F98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Gradient distanceGradient;

		[Token(Token = "0x4001F99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float near;

		[Token(Token = "0x4001F9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float far;

		[Token(Token = "0x4001F9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Range(0f, 1f)]
		public float distanceFogIntensity;

		[Token(Token = "0x4001F9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool useDistanceFogOnSky;

		[Token(Token = "0x4001F9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		[Space]
		public bool useHeight;

		[Token(Token = "0x4001F9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Gradient heightGradient;

		[Token(Token = "0x4001F9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float low;

		[Token(Token = "0x4001FA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float high;

		[Token(Token = "0x4001FA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Range(0f, 1f)]
		public float heightFogIntensity;

		[Token(Token = "0x4001FA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool useHeightFogOnSky;

		[Token(Token = "0x4001FA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Space]
		[Range(0f, 1f)]
		public float distanceHeightBlend;

		[Token(Token = "0x4001FA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HideInInspector]
		public Material material;

		[Token(Token = "0x4001FA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Camera _camera;

		[Token(Token = "0x4001FA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Texture2D _lutDepth;

		[Token(Token = "0x4001FA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Texture2D _lutHeight;

		[Token(Token = "0x4001FA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly string ShaderName;

		[Token(Token = "0x4001FA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly int DistanceLut;

		[Token(Token = "0x4001FAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static readonly int Near;

		[Token(Token = "0x4001FAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly int Far;

		[Token(Token = "0x4001FAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private static readonly int UseDistanceFog;

		[Token(Token = "0x4001FAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static readonly int UseDistanceFogOnSky;

		[Token(Token = "0x4001FAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private static readonly int DistanceFogIntensity;

		[Token(Token = "0x4001FAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static readonly int HeightLut;

		[Token(Token = "0x4001FB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private static readonly int LowWorldY;

		[Token(Token = "0x4001FB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static readonly int HighWorldY;

		[Token(Token = "0x4001FB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private static readonly int UseHeightFog;

		[Token(Token = "0x4001FB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static readonly int UseHeightFogOnSky;

		[Token(Token = "0x4001FB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private static readonly int HeightFogIntensity;

		[Token(Token = "0x4001FB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static readonly int DistanceHeightBlend;

		[Token(Token = "0x6001C80")]
		[Address(RVA = "0xB0AFAC", Offset = "0xB0AFAC", VA = "0xB0AFAC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001C81")]
		[Address(RVA = "0xB0B088", Offset = "0xB0B088", VA = "0xB0B088")]
		private void Start()
		{
		}

		[Token(Token = "0x6001C82")]
		[Address(RVA = "0xB0B31C", Offset = "0xB0B31C", VA = "0xB0B31C")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6001C83")]
		[Address(RVA = "0xB0B400", Offset = "0xB0B400", VA = "0xB0B400")]
		[ImageEffectOpaque]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6001C84")]
		[Address(RVA = "0xB0B08C", Offset = "0xB0B08C", VA = "0xB0B08C")]
		private void UpdateShader()
		{
		}

		[Token(Token = "0x6001C85")]
		[Address(RVA = "0xB0B530", Offset = "0xB0B530", VA = "0xB0B530")]
		private void UpdateDistanceLut()
		{
		}

		[Token(Token = "0x6001C86")]
		[Address(RVA = "0xB0B74C", Offset = "0xB0B74C", VA = "0xB0B74C")]
		private void UpdateHeightLut()
		{
		}

		[Token(Token = "0x6001C87")]
		[Address(RVA = "0xB0B968", Offset = "0xB0B968", VA = "0xB0B968")]
		public FogImageEffect()
		{
		}
	}
	[Token(Token = "0x20004C0")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(Camera))]
	[ImageEffectAllowedInSceneView]
	public class OutlineImageEffect : MonoBehaviour
	{
		[Token(Token = "0x4001FB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Color edgeColor;

		[Token(Token = "0x4001FB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Range(0f, 5f)]
		public int thickness;

		[Token(Token = "0x4001FB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Space]
		public bool useDepth;

		[Token(Token = "0x4001FB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		public bool useNormals;

		[Token(Token = "0x4001FBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Advanced settings")]
		[Space]
		public float minDepthThreshold;

		[Token(Token = "0x4001FBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float maxDepthThreshold;

		[Token(Token = "0x4001FBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Space]
		public float minNormalsThreshold;

		[Token(Token = "0x4001FBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float maxNormalsThreshold;

		[Token(Token = "0x4001FBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public Material material;

		[Token(Token = "0x4001FBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Camera _camera;

		[Token(Token = "0x4001FC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly string ShaderName;

		[Token(Token = "0x4001FC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly int EdgeColorProperty;

		[Token(Token = "0x4001FC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static readonly int ThicknessProperty;

		[Token(Token = "0x4001FC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly int DepthThresholdsProperty;

		[Token(Token = "0x4001FC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private static readonly int NormalsThresholdsProperty;

		[Token(Token = "0x6001C89")]
		[Address(RVA = "0xB0BC54", Offset = "0xB0BC54", VA = "0xB0BC54")]
		private void Start()
		{
		}

		[Token(Token = "0x6001C8A")]
		[Address(RVA = "0xB0BEBC", Offset = "0xB0BEBC", VA = "0xB0BEBC")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6001C8B")]
		[Address(RVA = "0xB0BFF4", Offset = "0xB0BFF4", VA = "0xB0BFF4")]
		[ImageEffectOpaque]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6001C8C")]
		[Address(RVA = "0xB0BD28", Offset = "0xB0BD28", VA = "0xB0BD28")]
		private void UpdateShader()
		{
		}

		[Token(Token = "0x6001C8D")]
		[Address(RVA = "0xB0C178", Offset = "0xB0C178", VA = "0xB0C178")]
		public OutlineImageEffect()
		{
		}
	}
}
namespace ECE
{
	[Token(Token = "0x20004C1")]
	public class EasyColliderCreator
	{
		[Token(Token = "0x20004C2")]
		private struct BestFitSphere
		{
			[Token(Token = "0x4001FC5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3 Center;

			[Token(Token = "0x4001FC6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public float Radius;

			[Token(Token = "0x6001CB0")]
			[Address(RVA = "0xB0C9DC", Offset = "0xB0C9DC", VA = "0xB0C9DC")]
			public BestFitSphere(Vector3 center, float radius)
			{
			}
		}

		[Token(Token = "0x6001C8F")]
		[Address(RVA = "0xB0C2C0", Offset = "0xB0C2C0", VA = "0xB0C2C0")]
		private BestFitSphere CalculateBestFitSphere(List<Vector3> localVertices)
		{
			return default(BestFitSphere);
		}

		[Token(Token = "0x6001C90")]
		[Address(RVA = "0xB0C9E8", Offset = "0xB0C9E8", VA = "0xB0C9E8")]
		public BoxColliderData CalculateBox(List<Vector3> worldVertices, Transform attachTo, bool isRotated = false)
		{
			return null;
		}

		[Token(Token = "0x6001C91")]
		[Address(RVA = "0xB0D03C", Offset = "0xB0D03C", VA = "0xB0D03C")]
		public BoxColliderData CalculateBoxLocal(List<Vector3> vertices)
		{
			return null;
		}

		[Token(Token = "0x6001C92")]
		[Address(RVA = "0xB0D254", Offset = "0xB0D254", VA = "0xB0D254")]
		public CapsuleColliderData CalculateCapsuleBestFit(List<Vector3> worldVertices, Transform attachTo, bool isRotated)
		{
			return null;
		}

		[Token(Token = "0x6001C93")]
		[Address(RVA = "0xB0D648", Offset = "0xB0D648", VA = "0xB0D648")]
		public CapsuleColliderData CalculateCapsuleBestFitLocal(List<Vector3> localVertices)
		{
			return null;
		}

		[Token(Token = "0x6001C94")]
		[Address(RVA = "0xB0D8EC", Offset = "0xB0D8EC", VA = "0xB0D8EC")]
		public CapsuleColliderData CalculateCapsuleMinMax(List<Vector3> worldVertices, Transform attachTo, CAPSULE_COLLIDER_METHOD method, bool isRotated)
		{
			return null;
		}

		[Token(Token = "0x6001C95")]
		[Address(RVA = "0xB0DCF8", Offset = "0xB0DCF8", VA = "0xB0DCF8")]
		public CapsuleColliderData CalculateCapsuleMinMaxLocal(List<Vector3> localVertices, CAPSULE_COLLIDER_METHOD method)
		{
			return null;
		}

		[Token(Token = "0x6001C96")]
		[Address(RVA = "0xB0E0D4", Offset = "0xB0E0D4", VA = "0xB0E0D4")]
		public MeshColliderData CalculateCylinderCollider(List<Vector3> worldVertices, Transform attachTo, int numberOfSides = 12, CYLINDER_ORIENTATION orientation = CYLINDER_ORIENTATION.Automatic, float cylinderOffset = 0f)
		{
			return null;
		}

		[Token(Token = "0x6001C97")]
		[Address(RVA = "0xB0E888", Offset = "0xB0E888", VA = "0xB0E888")]
		public MeshColliderData CalculateCylinderColliderLocal(List<Vector3> vertices, int numberOfSides = 12, CYLINDER_ORIENTATION orientation = CYLINDER_ORIENTATION.Automatic, float cylinderOffset = 0f)
		{
			return null;
		}

		[Token(Token = "0x6001C98")]
		[Address(RVA = "0xB0E984", Offset = "0xB0E984", VA = "0xB0E984")]
		public MeshColliderData CalculateMeshColliderQuickHull(List<Vector3> vertices, Transform attachTo)
		{
			return null;
		}

		[Token(Token = "0x6001C99")]
		[Address(RVA = "0xB0EA1C", Offset = "0xB0EA1C", VA = "0xB0EA1C")]
		public MeshColliderData CalculateMeshColliderQuickHullLocal(List<Vector3> localVertices)
		{
			return null;
		}

		[Token(Token = "0x6001C9A")]
		[Address(RVA = "0xB0EAD8", Offset = "0xB0EAD8", VA = "0xB0EAD8")]
		public SphereColliderData CalculateSphereBestFit(List<Vector3> worldVertices, Transform attachTo)
		{
			return null;
		}

		[Token(Token = "0x6001C9B")]
		[Address(RVA = "0xB0EBCC", Offset = "0xB0EBCC", VA = "0xB0EBCC")]
		public SphereColliderData CalculateSphereBestFitLocal(List<Vector3> localVertices)
		{
			return null;
		}

		[Token(Token = "0x6001C9C")]
		[Address(RVA = "0xB0EC6C", Offset = "0xB0EC6C", VA = "0xB0EC6C")]
		public SphereColliderData CalculateSphereDistance(List<Vector3> worldVertices, Transform attachTo)
		{
			return null;
		}

		[Token(Token = "0x6001C9D")]
		[Address(RVA = "0xB0ED58", Offset = "0xB0ED58", VA = "0xB0ED58")]
		public SphereColliderData CalculateSphereDistanceLocal(List<Vector3> localVertices)
		{
			return null;
		}

		[Token(Token = "0x6001C9E")]
		[Address(RVA = "0xB0F3B4", Offset = "0xB0F3B4", VA = "0xB0F3B4")]
		public SphereColliderData CalculateSphereMinMax(List<Vector3> worldVertices, Transform attachTo)
		{
			return null;
		}

		[Token(Token = "0x6001C9F")]
		[Address(RVA = "0xB0F4A0", Offset = "0xB0F4A0", VA = "0xB0F4A0")]
		public SphereColliderData CalculateSphereMinMaxLocal(List<Vector3> localVertices)
		{
			return null;
		}

		[Token(Token = "0x6001CA0")]
		[Address(RVA = "0xB0F85C", Offset = "0xB0F85C", VA = "0xB0F85C")]
		private BoxCollider CreateBoxCollider(BoxColliderData data, EasyColliderProperties properties)
		{
			return null;
		}

		[Token(Token = "0x6001CA1")]
		[Address(RVA = "0xB0F9B0", Offset = "0xB0F9B0", VA = "0xB0F9B0")]
		public BoxCollider CreateBoxCollider(List<Vector3> vertices, EasyColliderProperties properties, bool isLocal = false)
		{
			return null;
		}

		[Token(Token = "0x6001CA2")]
		[Address(RVA = "0xB0FD90", Offset = "0xB0FD90", VA = "0xB0FD90")]
		private CapsuleCollider CreateCapsuleCollider(CapsuleColliderData data, EasyColliderProperties properties)
		{
			return null;
		}

		[Token(Token = "0x6001CA3")]
		[Address(RVA = "0xB0FE58", Offset = "0xB0FE58", VA = "0xB0FE58")]
		public CapsuleCollider CreateCapsuleCollider_BestFit(List<Vector3> worldVertices, EasyColliderProperties properties)
		{
			return null;
		}

		[Token(Token = "0x6001CA4")]
		[Address(RVA = "0xB0FFC0", Offset = "0xB0FFC0", VA = "0xB0FFC0")]
		public CapsuleCollider CreateCapsuleCollider_MinMax(List<Vector3> worldVertices, EasyColliderProperties properties, CAPSULE_COLLIDER_METHOD method, bool isLocal = false)
		{
			return null;
		}

		[Token(Token = "0x6001CA5")]
		[Address(RVA = "0xB10140", Offset = "0xB10140", VA = "0xB10140")]
		public MeshCollider CreateConvexMeshCollider(Mesh mesh, GameObject attachToObject, EasyColliderProperties properties)
		{
			return null;
		}

		[Token(Token = "0x6001CA6")]
		[Address(RVA = "0xB101F8", Offset = "0xB101F8", VA = "0xB101F8")]
		private SphereCollider CreateSphereCollider(SphereColliderData data, EasyColliderProperties properties)
		{
			return null;
		}

		[Token(Token = "0x6001CA7")]
		[Address(RVA = "0xB102A0", Offset = "0xB102A0", VA = "0xB102A0")]
		public SphereCollider CreateSphereCollider_BestFit(List<Vector3> worldVertices, EasyColliderProperties properties)
		{
			return null;
		}

		[Token(Token = "0x6001CA8")]
		[Address(RVA = "0xB10340", Offset = "0xB10340", VA = "0xB10340")]
		public SphereCollider CreateSphereCollider_Distance(List<Vector3> worldVertices, EasyColliderProperties properties)
		{
			return null;
		}

		[Token(Token = "0x6001CA9")]
		[Address(RVA = "0xB103E0", Offset = "0xB103E0", VA = "0xB103E0")]
		public SphereCollider CreateSphereCollider_MinMax(List<Vector3> worldVertices, EasyColliderProperties properties, bool isLocal = false)
		{
			return null;
		}

		[Token(Token = "0x6001CAA")]
		[Address(RVA = "0xB0E224", Offset = "0xB0E224", VA = "0xB0E224")]
		public List<Vector3> CalculateCylinderPointsLocal(List<Vector3> vertices, Transform attachTo, int numberOfSides, CYLINDER_ORIENTATION orientation, float cylinderOffset)
		{
			return null;
		}

		[Token(Token = "0x6001CAB")]
		[Address(RVA = "0xB0FB6C", Offset = "0xB0FB6C", VA = "0xB0FB6C")]
		private GameObject CreateGameObjectOrientation(List<Vector3> worldVertices, GameObject parent, string name)
		{
			return null;
		}

		[Token(Token = "0x6001CAC")]
		[Address(RVA = "0xB104A0", Offset = "0xB104A0", VA = "0xB104A0")]
		private void DebugDrawPoint(Vector3 worldLoc, Color color)
		{
		}

		[Token(Token = "0x6001CAD")]
		[Address(RVA = "0xB0F908", Offset = "0xB0F908", VA = "0xB0F908")]
		private void SetPropertiesOnCollider(Collider collider, EasyColliderProperties properties)
		{
		}

		[Token(Token = "0x6001CAE")]
		[Address(RVA = "0xB0CE00", Offset = "0xB0CE00", VA = "0xB0CE00")]
		private List<Vector3> ToLocalVerts(Transform transform, List<Vector3> worldVertices)
		{
			return null;
		}

		[Token(Token = "0x6001CAF")]
		[Address(RVA = "0xB106E4", Offset = "0xB106E4", VA = "0xB106E4")]
		public EasyColliderCreator()
		{
		}
	}
	[Token(Token = "0x20004C3")]
	public class EasyColliderData
	{
		[Token(Token = "0x4001FC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public CREATE_COLLIDER_TYPE ColliderType;

		[Token(Token = "0x4001FC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool IsValid;

		[Token(Token = "0x4001FC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Matrix4x4 Matrix;

		[Token(Token = "0x6001CB1")]
		[Address(RVA = "0xB106EC", Offset = "0xB106EC", VA = "0xB106EC")]
		public void Clone(EasyColliderData data)
		{
		}

		[Token(Token = "0x6001CB2")]
		[Address(RVA = "0xB10730", Offset = "0xB10730", VA = "0xB10730")]
		public EasyColliderData()
		{
		}
	}
	[Token(Token = "0x20004C4")]
	public class SphereColliderData : EasyColliderData
	{
		[Token(Token = "0x4001FCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float Radius;

		[Token(Token = "0x4001FCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public Vector3 Center;

		[Token(Token = "0x6001CB3")]
		[Address(RVA = "0xB10738", Offset = "0xB10738", VA = "0xB10738")]
		public void Clone(SphereColliderData data)
		{
		}

		[Token(Token = "0x6001CB4")]
		[Address(RVA = "0xB0EBC4", Offset = "0xB0EBC4", VA = "0xB0EBC4")]
		public SphereColliderData()
		{
		}
	}
	[Token(Token = "0x20004C5")]
	public class CapsuleColliderData : SphereColliderData
	{
		[Token(Token = "0x4001FCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public int Direction;

		[Token(Token = "0x4001FCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float Height;

		[Token(Token = "0x6001CB5")]
		[Address(RVA = "0xB10794", Offset = "0xB10794", VA = "0xB10794")]
		public void Clone(CapsuleColliderData data)
		{
		}

		[Token(Token = "0x6001CB6")]
		[Address(RVA = "0xB0D8E4", Offset = "0xB0D8E4", VA = "0xB0D8E4")]
		public CapsuleColliderData()
		{
		}
	}
	[Token(Token = "0x20004C6")]
	public class BoxColliderData : EasyColliderData
	{
		[Token(Token = "0x4001FCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Vector3 Center;

		[Token(Token = "0x4001FCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public Vector3 Size;

		[Token(Token = "0x6001CB7")]
		[Address(RVA = "0xB107F8", Offset = "0xB107F8", VA = "0xB107F8")]
		public void Clone(BoxColliderData data)
		{
		}

		[Token(Token = "0x6001CB8")]
		[Address(RVA = "0xB0CDF8", Offset = "0xB0CDF8", VA = "0xB0CDF8")]
		public BoxColliderData()
		{
		}
	}
	[Token(Token = "0x20004C7")]
	public class MeshColliderData : EasyColliderData
	{
		[Token(Token = "0x4001FD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Mesh ConvexMesh;

		[Token(Token = "0x6001CB9")]
		[Address(RVA = "0xB1085C", Offset = "0xB1085C", VA = "0xB1085C")]
		public void Clone(MeshColliderData data)
		{
		}

		[Token(Token = "0x6001CBA")]
		[Address(RVA = "0xB0E21C", Offset = "0xB0E21C", VA = "0xB0E21C")]
		public MeshColliderData()
		{
		}
	}
	[Token(Token = "0x20004C8")]
	public enum CAPSULE_COLLIDER_METHOD
	{
		[Token(Token = "0x4001FD2")]
		BestFit,
		[Token(Token = "0x4001FD3")]
		MinMax,
		[Token(Token = "0x4001FD4")]
		MinMaxPlusRadius,
		[Token(Token = "0x4001FD5")]
		MinMaxPlusDiameter
	}
	[Token(Token = "0x20004C9")]
	public enum CREATE_COLLIDER_TYPE
	{
		[Token(Token = "0x4001FD7")]
		BOX,
		[Token(Token = "0x4001FD8")]
		ROTATED_BOX,
		[Token(Token = "0x4001FD9")]
		SPHERE,
		[Token(Token = "0x4001FDA")]
		CAPSULE,
		[Token(Token = "0x4001FDB")]
		ROTATED_CAPSULE,
		[Token(Token = "0x4001FDC")]
		CONVEX_MESH,
		[Token(Token = "0x4001FDD")]
		CYLINDER
	}
	[Token(Token = "0x20004CA")]
	public enum COLLIDER_ORIENTATION
	{
		[Token(Token = "0x4001FDF")]
		NORMAL,
		[Token(Token = "0x4001FE0")]
		ROTATED
	}
	[Token(Token = "0x20004CB")]
	public enum CYLINDER_ORIENTATION
	{
		[Token(Token = "0x4001FE2")]
		Automatic,
		[Token(Token = "0x4001FE3")]
		LocalX,
		[Token(Token = "0x4001FE4")]
		LocalY,
		[Token(Token = "0x4001FE5")]
		LocalZ
	}
	[Token(Token = "0x20004CC")]
	public enum GIZMO_TYPE
	{
		[Token(Token = "0x4001FE7")]
		CUBE,
		[Token(Token = "0x4001FE8")]
		SPHERE
	}
	[Token(Token = "0x20004CD")]
	public enum RENDER_POINT_TYPE
	{
		[Token(Token = "0x4001FEA")]
		SHADER,
		[Token(Token = "0x4001FEB")]
		GIZMOS
	}
	[Token(Token = "0x20004CE")]
	public enum SKINNED_MESH_COLLIDER_TYPE
	{
		[Token(Token = "0x4001FED")]
		Box,
		[Token(Token = "0x4001FEE")]
		Capsule,
		[Token(Token = "0x4001FEF")]
		Sphere,
		[Token(Token = "0x4001FF0")]
		Convex_Mesh
	}
	[Token(Token = "0x20004CF")]
	public enum SPHERE_COLLIDER_METHOD
	{
		[Token(Token = "0x4001FF2")]
		BestFit,
		[Token(Token = "0x4001FF3")]
		Distance,
		[Token(Token = "0x4001FF4")]
		MinMax
	}
	[Token(Token = "0x20004D0")]
	public enum VHACD_CONVERSION
	{
		[Token(Token = "0x4001FF6")]
		None,
		[Token(Token = "0x4001FF7")]
		Boxes,
		[Token(Token = "0x4001FF8")]
		Spheres,
		[Token(Token = "0x4001FF9")]
		Capsules
	}
	[Token(Token = "0x20004D1")]
	public enum MESH_COLLIDER_METHOD
	{
		[Token(Token = "0x4001FFB")]
		QuickHull,
		[Token(Token = "0x4001FFC")]
		MessyHull
	}
	[Token(Token = "0x20004D2")]
	public enum VERTEX_SNAP_METHOD
	{
		[Token(Token = "0x4001FFE")]
		Add,
		[Token(Token = "0x4001FFF")]
		Remove,
		[Token(Token = "0x4002000")]
		Both
	}
	[Token(Token = "0x20004D3")]
	public enum VHACD_RESULT_METHOD
	{
		[Token(Token = "0x4002002")]
		AttachTo,
		[Token(Token = "0x4002003")]
		ChildObject,
		[Token(Token = "0x4002004")]
		IndividualChildObjects
	}
	[Token(Token = "0x20004D4")]
	public enum ECE_WINDOW_TAB
	{
		[Token(Token = "0x4002006")]
		None = -1,
		[Token(Token = "0x4002007")]
		Creation,
		[Token(Token = "0x4002008")]
		Editing,
		[Token(Token = "0x4002009")]
		VHACD,
		[Token(Token = "0x400200A")]
		AutoSkinned
	}
	[Token(Token = "0x20004D5")]
	public enum COLLIDER_HOLDER
	{
		[Token(Token = "0x400200C")]
		Default,
		[Token(Token = "0x400200D")]
		Once,
		[Token(Token = "0x400200E")]
		Always
	}
	[Token(Token = "0x20004D6")]
	public struct EasyColliderProperties
	{
		[Token(Token = "0x400200F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool IsTrigger;

		[Token(Token = "0x4002010")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int Layer;

		[Token(Token = "0x4002011")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PhysicMaterial PhysicMaterial;

		[Token(Token = "0x4002012")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public COLLIDER_ORIENTATION Orientation;

		[Token(Token = "0x4002013")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject AttachTo;

		[Token(Token = "0x6001CBB")]
		[Address(RVA = "0xB108A8", Offset = "0xB108A8", VA = "0xB108A8")]
		public EasyColliderProperties(bool isTrigger, int layer, PhysicMaterial physicMaterial, GameObject attachTo, COLLIDER_ORIENTATION orientation = COLLIDER_ORIENTATION.NORMAL)
		{
		}
	}
	[Token(Token = "0x20004D7")]
	public class EasyColliderQuickHull
	{
		[Token(Token = "0x20004D8")]
		private class Face
		{
			[Token(Token = "0x4002026")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int F0;

			[Token(Token = "0x4002027")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int F1;

			[Token(Token = "0x4002028")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int F2;

			[Token(Token = "0x4002029")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Vector3 Normal;

			[Token(Token = "0x400202A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public bool OnConvexHull;

			[Token(Token = "0x400202B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public List<int> OutsideVertices;

			[Token(Token = "0x400202C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public int V0;

			[Token(Token = "0x400202D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public int V1;

			[Token(Token = "0x400202E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public int V2;

			[Token(Token = "0x6001CE4")]
			[Address(RVA = "0xB15C00", Offset = "0xB15C00", VA = "0xB15C00")]
			public Face(int v0, int v1, int v2, Vector3 normal, int f0, int f1, int f2)
			{
			}
		}

		[Token(Token = "0x20004D9")]
		private class Horizon
		{
			[Token(Token = "0x400202F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int Face;

			[Token(Token = "0x4002030")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int From;

			[Token(Token = "0x4002031")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public bool OnConvexHull;

			[Token(Token = "0x4002032")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public int V0;

			[Token(Token = "0x4002033")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public int V1;

			[Token(Token = "0x6001CE5")]
			[Address(RVA = "0xB12F18", Offset = "0xB12F18", VA = "0xB12F18")]
			public Horizon(int v0, int v1, int face, int from)
			{
			}
		}

		[Token(Token = "0x4002014")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool DebugHorizon;

		[Token(Token = "0x4002015")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Color DebugHorizonColor;

		[Token(Token = "0x4002016")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int DebugLoopNumber;

		[Token(Token = "0x4002017")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int DebugMaxLoopNumber;

		[Token(Token = "0x4002018")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool DebugNewFaces;

		[Token(Token = "0x4002019")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		public bool DebugNormals;

		[Token(Token = "0x400201A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E")]
		public bool DebugOutsideSet;

		[Token(Token = "0x400201B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Color DebugNormalColor;

		[Token(Token = "0x400201C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float DrawTime;

		[Token(Token = "0x400201D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private HashSet<int> AssignedVertices;

		[Token(Token = "0x400201E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private HashSet<int> ClosedVertices;

		[Token(Token = "0x400201F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private List<Horizon> CurrentHorizon;

		[Token(Token = "0x4002020")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float Epsilon;

		[Token(Token = "0x4002021")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private List<Face> Faces;

		[Token(Token = "0x4002022")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private List<int> NewFaces;

		[Token(Token = "0x4002023")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Mesh Result;

		[Token(Token = "0x4002024")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private HashSet<int> UnAssignedVertices;

		[Token(Token = "0x4002025")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private List<Vector3> VerticesList;

		[Token(Token = "0x170003B5")]
		public bool isFinished
		{
			[Token(Token = "0x6001CD0")]
			[Address(RVA = "0xB15D08", Offset = "0xB15D08", VA = "0xB15D08")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001CBC")]
		[Address(RVA = "0xB0E820", Offset = "0xB0E820", VA = "0xB0E820")]
		public static EasyColliderQuickHull CalculateHull(List<Vector3> points)
		{
			return null;
		}

		[Token(Token = "0x6001CBD")]
		[Address(RVA = "0xB111AC", Offset = "0xB111AC", VA = "0xB111AC")]
		public static EasyColliderQuickHull CalculateHullWorld(List<Vector3> points, Transform attachTo)
		{
			return null;
		}

		[Token(Token = "0x6001CBE")]
		[Address(RVA = "0xB11400", Offset = "0xB11400", VA = "0xB11400")]
		public static MeshColliderData CalculateHullData(List<Vector3> points, Transform attachTo)
		{
			return null;
		}

		[Token(Token = "0x6001CBF")]
		[Address(RVA = "0xB11508", Offset = "0xB11508", VA = "0xB11508")]
		public static MeshColliderData CalculateHullData(List<Vector3> points)
		{
			return null;
		}

		[Token(Token = "0x6001CC0")]
		[Address(RVA = "0xB11594", Offset = "0xB11594", VA = "0xB11594")]
		private void AddToOutsideSet(Face face, HashSet<int> vertices)
		{
		}

		[Token(Token = "0x6001CC1")]
		[Address(RVA = "0xB11A14", Offset = "0xB11A14", VA = "0xB11A14")]
		private bool AreVertsCoincident(Vector3 a, Vector3 b)
		{
			return default(bool);
		}

		[Token(Token = "0x6001CC2")]
		[Address(RVA = "0xB11A48", Offset = "0xB11A48", VA = "0xB11A48")]
		private bool AreVertsCoincident(int a, int b)
		{
			return default(bool);
		}

		[Token(Token = "0x6001CC3")]
		[Address(RVA = "0xB11B60", Offset = "0xB11B60", VA = "0xB11B60")]
		private void CloseUnAssignedVertsOnFaces()
		{
		}

		[Token(Token = "0x6001CC4")]
		[Address(RVA = "0xB11938", Offset = "0xB11938", VA = "0xB11938")]
		private bool IsVertOnFace(int i, Face face)
		{
			return default(bool);
		}

		[Token(Token = "0x6001CC5")]
		[Address(RVA = "0xB12078", Offset = "0xB12078", VA = "0xB12078")]
		private Vector3 CalcNormal(Vector3 a, Vector3 b, Vector3 c)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001CC6")]
		[Address(RVA = "0xB12190", Offset = "0xB12190", VA = "0xB12190")]
		private Vector3 CalcNormal(int a, int b, int c)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001CC7")]
		[Address(RVA = "0xB11ED8", Offset = "0xB11ED8", VA = "0xB11ED8")]
		private float CalcTriangleArea(int v0, int v1, int v2)
		{
			return default(float);
		}

		[Token(Token = "0x6001CC8")]
		[Address(RVA = "0xB1236C", Offset = "0xB1236C", VA = "0xB1236C")]
		private void CalculateHorizon(int eyePoint, Horizon crossedEdge, int currFace, bool firstFace = true)
		{
		}

		[Token(Token = "0x6001CC9")]
		[Address(RVA = "0xB12F60", Offset = "0xB12F60", VA = "0xB12F60")]
		private Mesh CreateMesh(List<Face> allFaces)
		{
			return null;
		}

		[Token(Token = "0x6001CCA")]
		[Address(RVA = "0xB13A10", Offset = "0xB13A10", VA = "0xB13A10")]
		private float DistanceFromLine(Vector3 point, Vector3 line, Vector3 pointOnLine)
		{
			return default(float);
		}

		[Token(Token = "0x6001CCB")]
		[Address(RVA = "0xB13ADC", Offset = "0xB13ADC", VA = "0xB13ADC")]
		private float DistanceFromPlane(Vector3 point, Plane p)
		{
			return default(float);
		}

		[Token(Token = "0x6001CCC")]
		[Address(RVA = "0xB118F8", Offset = "0xB118F8", VA = "0xB118F8")]
		private float DistanceFromPlane(Vector3 point, Vector3 normal, Vector3 pointOnPlane)
		{
			return default(float);
		}

		[Token(Token = "0x6001CCD")]
		[Address(RVA = "0xB13B04", Offset = "0xB13B04", VA = "0xB13B04")]
		private bool FindInitialHull(List<Vector3> points)
		{
			return default(bool);
		}

		[Token(Token = "0x6001CCE")]
		[Address(RVA = "0xB14F74", Offset = "0xB14F74", VA = "0xB14F74")]
		private bool FindInitialPointsFallBack(List<Vector3> points, out List<int> initialPoints)
		{
			return default(bool);
		}

		[Token(Token = "0x6001CCF")]
		[Address(RVA = "0xB148BC", Offset = "0xB148BC", VA = "0xB148BC")]
		private bool FindInitialPoints(List<Vector3> points, out List<int> initialPoints)
		{
			return default(bool);
		}

		[Token(Token = "0x6001CD1")]
		[Address(RVA = "0xB15D68", Offset = "0xB15D68", VA = "0xB15D68")]
		private void CalculateEpsilon(List<Vector3> points)
		{
		}

		[Token(Token = "0x6001CD2")]
		[Address(RVA = "0xB10ABC", Offset = "0xB10ABC", VA = "0xB10ABC")]
		public void GenerateHull(List<Vector3> points)
		{
		}

		[Token(Token = "0x6001CD3")]
		[Address(RVA = "0xB16028", Offset = "0xB16028", VA = "0xB16028")]
		private int GetFurthestPointFromFace(int faceIndex)
		{
			return default(int);
		}

		[Token(Token = "0x6001CD4")]
		[Address(RVA = "0xB15F7C", Offset = "0xB15F7C", VA = "0xB15F7C")]
		private int GetNonEmptyFaceIndex()
		{
			return default(int);
		}

		[Token(Token = "0x6001CD5")]
		[Address(RVA = "0xB1638C", Offset = "0xB1638C", VA = "0xB1638C")]
		private bool HaveNonEmptyFaceSet()
		{
			return default(bool);
		}

		[Token(Token = "0x6001CD6")]
		[Address(RVA = "0xB15BEC", Offset = "0xB15BEC", VA = "0xB15BEC")]
		private bool isAGreaterThanB(float a, float b)
		{
			return default(bool);
		}

		[Token(Token = "0x6001CD7")]
		[Address(RVA = "0xB15CF4", Offset = "0xB15CF4", VA = "0xB15CF4")]
		private bool isALessThanB(float a, float b)
		{
			return default(bool);
		}

		[Token(Token = "0x6001CD8")]
		[Address(RVA = "0xB12064", Offset = "0xB12064", VA = "0xB12064")]
		private bool isApproxEqual(float a, float b)
		{
			return default(bool);
		}

		[Token(Token = "0x6001CD9")]
		[Address(RVA = "0xB11924", Offset = "0xB11924", VA = "0xB11924")]
		private bool IsApproxZero(float a)
		{
			return default(bool);
		}

		[Token(Token = "0x6001CDA")]
		[Address(RVA = "0xB16268", Offset = "0xB16268", VA = "0xB16268")]
		private void UpdateFace(Horizon horizon, int newFace)
		{
		}

		[Token(Token = "0x6001CDB")]
		[Address(RVA = "0xB16518", Offset = "0xB16518", VA = "0xB16518")]
		private Vector3 CalcFaceCenter(Face face)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001CDC")]
		[Address(RVA = "0xB165E4", Offset = "0xB165E4", VA = "0xB165E4")]
		private void DebugInitialPoints(List<Vector3> points, List<int> initialPoints)
		{
		}

		[Token(Token = "0x6001CDD")]
		[Address(RVA = "0xB167F8", Offset = "0xB167F8", VA = "0xB167F8")]
		private void DrawFace(int face, Color color, float size = 0.08f)
		{
		}

		[Token(Token = "0x6001CDE")]
		[Address(RVA = "0xB16B58", Offset = "0xB16B58", VA = "0xB16B58")]
		private void DrawFaceConnections(int face)
		{
		}

		[Token(Token = "0x6001CDF")]
		[Address(RVA = "0xB16C94", Offset = "0xB16C94", VA = "0xB16C94")]
		private void DrawFaceNormal(Face face, Color color, float distance = 1f)
		{
		}

		[Token(Token = "0x6001CE0")]
		[Address(RVA = "0xB16D9C", Offset = "0xB16D9C", VA = "0xB16D9C")]
		private void ForceUpdateFace(int faceIndex)
		{
		}

		[Token(Token = "0x6001CE1")]
		[Address(RVA = "0xB16F40", Offset = "0xB16F40", VA = "0xB16F40")]
		private Color RandomColor()
		{
			return default(Color);
		}

		[Token(Token = "0x6001CE2")]
		[Address(RVA = "0xB16928", Offset = "0xB16928", VA = "0xB16928")]
		private void DrawPoint(Vector3 point, Color color, float size = 0.05f)
		{
		}

		[Token(Token = "0x6001CE3")]
		[Address(RVA = "0xB108C4", Offset = "0xB108C4", VA = "0xB108C4")]
		public EasyColliderQuickHull()
		{
		}
	}
}
namespace Dreamteck
{
	[Token(Token = "0x20004DC")]
	public static class DMath
	{
		[Token(Token = "0x6001CF2")]
		[Address(RVA = "0xB172B4", Offset = "0xB172B4", VA = "0xB172B4")]
		public static double Sin(double a)
		{
			return default(double);
		}

		[Token(Token = "0x6001CF3")]
		[Address(RVA = "0xB17310", Offset = "0xB17310", VA = "0xB17310")]
		public static double Cos(double a)
		{
			return default(double);
		}

		[Token(Token = "0x6001CF4")]
		[Address(RVA = "0xB1736C", Offset = "0xB1736C", VA = "0xB1736C")]
		public static double Tan(double a)
		{
			return default(double);
		}

		[Token(Token = "0x6001CF5")]
		[Address(RVA = "0xB173C8", Offset = "0xB173C8", VA = "0xB173C8")]
		public static double Pow(double x, double y)
		{
			return default(double);
		}

		[Token(Token = "0x6001CF6")]
		[Address(RVA = "0xB17430", Offset = "0xB17430", VA = "0xB17430")]
		public static double Log(double a, double newBase)
		{
			return default(double);
		}

		[Token(Token = "0x6001CF7")]
		[Address(RVA = "0xB17498", Offset = "0xB17498", VA = "0xB17498")]
		public static double Log10(double a)
		{
			return default(double);
		}

		[Token(Token = "0x6001CF8")]
		[Address(RVA = "0xB174F4", Offset = "0xB174F4", VA = "0xB174F4")]
		public static double Clamp01(double a)
		{
			return default(double);
		}

		[Token(Token = "0x6001CF9")]
		[Address(RVA = "0xB17514", Offset = "0xB17514", VA = "0xB17514")]
		public static double Clamp(double a, double min, double max)
		{
			return default(double);
		}

		[Token(Token = "0x6001CFA")]
		[Address(RVA = "0xB17530", Offset = "0xB17530", VA = "0xB17530")]
		public static double Lerp(double a, double b, double t)
		{
			return default(double);
		}

		[Token(Token = "0x6001CFB")]
		[Address(RVA = "0xB17554", Offset = "0xB17554", VA = "0xB17554")]
		public static double InverseLerp(double a, double b, double t)
		{
			return default(double);
		}

		[Token(Token = "0x6001CFC")]
		[Address(RVA = "0xB17588", Offset = "0xB17588", VA = "0xB17588")]
		public static Vector3 LerpVector3(Vector3 a, Vector3 b, double t)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001CFD")]
		[Address(RVA = "0xB175E8", Offset = "0xB175E8", VA = "0xB175E8")]
		public static double Round(double a)
		{
			return default(double);
		}

		[Token(Token = "0x6001CFE")]
		[Address(RVA = "0xB176B0", Offset = "0xB176B0", VA = "0xB176B0")]
		public static int RoundInt(double a)
		{
			return default(int);
		}

		[Token(Token = "0x6001CFF")]
		[Address(RVA = "0xB17790", Offset = "0xB17790", VA = "0xB17790")]
		public static double Ceil(double a)
		{
			return default(double);
		}

		[Token(Token = "0x6001D00")]
		[Address(RVA = "0xB177EC", Offset = "0xB177EC", VA = "0xB177EC")]
		public static int CeilInt(double a)
		{
			return default(int);
		}

		[Token(Token = "0x6001D01")]
		[Address(RVA = "0xB17860", Offset = "0xB17860", VA = "0xB17860")]
		public static double Floor(double a)
		{
			return default(double);
		}

		[Token(Token = "0x6001D02")]
		[Address(RVA = "0xB178BC", Offset = "0xB178BC", VA = "0xB178BC")]
		public static int FloorInt(double a)
		{
			return default(int);
		}

		[Token(Token = "0x6001D03")]
		[Address(RVA = "0xB17930", Offset = "0xB17930", VA = "0xB17930")]
		public static double Move(double current, double target, double amount)
		{
			return default(double);
		}

		[Token(Token = "0x6001D04")]
		[Address(RVA = "0xB17960", Offset = "0xB17960", VA = "0xB17960")]
		public static double Abs(double a)
		{
			return default(double);
		}
	}
	[Token(Token = "0x20004DD")]
	public static class LinearAlgebraUtility
	{
		[Token(Token = "0x6001D05")]
		[Address(RVA = "0xB17970", Offset = "0xB17970", VA = "0xB17970")]
		public static Vector3 ProjectOnLine(Vector3 fromPoint, Vector3 toPoint, Vector3 project)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001D06")]
		[Address(RVA = "0xB17B08", Offset = "0xB17B08", VA = "0xB17B08")]
		public static float InverseLerp(Vector3 a, Vector3 b, Vector3 value)
		{
			return default(float);
		}
	}
	[Token(Token = "0x20004DE")]
	public class MeshUtility
	{
		[Token(Token = "0x400203F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Vector3[] tan1;

		[Token(Token = "0x4002040")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Vector3[] tan2;

		[Token(Token = "0x6001D07")]
		[Address(RVA = "0xB17B5C", Offset = "0xB17B5C", VA = "0xB17B5C")]
		public static int[] GeneratePlaneTriangles(int x, int z, bool flip, int startTriangleIndex = 0, int startVertex = 0)
		{
			return null;
		}

		[Token(Token = "0x6001D08")]
		[Address(RVA = "0xB17C1C", Offset = "0xB17C1C", VA = "0xB17C1C")]
		public static int[] GeneratePlaneTriangles(ref int[] triangles, int x, int z, bool flip, int startTriangleIndex = 0, int startVertex = 0, bool reallocateArray = false)
		{
			return null;
		}

		[Token(Token = "0x6001D09")]
		[Address(RVA = "0xB17E94", Offset = "0xB17E94", VA = "0xB17E94")]
		public static void CalculateTangents(TS_Mesh mesh)
		{
		}

		[Token(Token = "0x6001D0A")]
		[Address(RVA = "0xB184E0", Offset = "0xB184E0", VA = "0xB184E0")]
		public static void MakeDoublesided(Mesh input)
		{
		}

		[Token(Token = "0x6001D0B")]
		[Address(RVA = "0xB18E54", Offset = "0xB18E54", VA = "0xB18E54")]
		public static void MakeDoublesided(TS_Mesh input)
		{
		}

		[Token(Token = "0x6001D0C")]
		[Address(RVA = "0xB19690", Offset = "0xB19690", VA = "0xB19690")]
		public static void MakeDoublesidedHalf(TS_Mesh input)
		{
		}

		[Token(Token = "0x6001D0D")]
		[Address(RVA = "0xB19BA8", Offset = "0xB19BA8", VA = "0xB19BA8")]
		public static void InverseTransformMesh(TS_Mesh input, TS_Transform transform)
		{
		}

		[Token(Token = "0x6001D0E")]
		[Address(RVA = "0xB19C8C", Offset = "0xB19C8C", VA = "0xB19C8C")]
		public static void TransformMesh(TS_Mesh input, TS_Transform transform)
		{
		}

		[Token(Token = "0x6001D0F")]
		[Address(RVA = "0xB19D70", Offset = "0xB19D70", VA = "0xB19D70")]
		public static void InverseTransformMesh(TS_Mesh input, Transform transform)
		{
		}

		[Token(Token = "0x6001D10")]
		[Address(RVA = "0xB19E54", Offset = "0xB19E54", VA = "0xB19E54")]
		public static void TransformMesh(TS_Mesh input, Transform transform)
		{
		}

		[Token(Token = "0x6001D11")]
		[Address(RVA = "0xB19F38", Offset = "0xB19F38", VA = "0xB19F38")]
		public static void InverseTransformMesh(Mesh input, Transform transform)
		{
		}

		[Token(Token = "0x6001D12")]
		[Address(RVA = "0xB1A088", Offset = "0xB1A088", VA = "0xB1A088")]
		public static void TransformMesh(Mesh input, Transform transform)
		{
		}

		[Token(Token = "0x6001D13")]
		[Address(RVA = "0xB1A214", Offset = "0xB1A214", VA = "0xB1A214")]
		public static void TransformVertices(Vector3[] vertices, Transform transform)
		{
		}

		[Token(Token = "0x6001D14")]
		[Address(RVA = "0xB1A29C", Offset = "0xB1A29C", VA = "0xB1A29C")]
		public static void InverseTransformVertices(Vector3[] vertices, Transform transform)
		{
		}

		[Token(Token = "0x6001D15")]
		[Address(RVA = "0xB1A324", Offset = "0xB1A324", VA = "0xB1A324")]
		public static void TransformNormals(Vector3[] normals, Transform transform)
		{
		}

		[Token(Token = "0x6001D16")]
		[Address(RVA = "0xB1A3AC", Offset = "0xB1A3AC", VA = "0xB1A3AC")]
		public static void InverseTransformNormals(Vector3[] normals, Transform transform)
		{
		}

		[Token(Token = "0x6001D17")]
		[Address(RVA = "0xB1A434", Offset = "0xB1A434", VA = "0xB1A434")]
		public static string ToOBJString(Mesh mesh, Material[] materials)
		{
			return null;
		}

		[Token(Token = "0x6001D18")]
		[Address(RVA = "0xB1AD84", Offset = "0xB1AD84", VA = "0xB1AD84")]
		public static Mesh Copy(Mesh input)
		{
			return null;
		}

		[Token(Token = "0x6001D19")]
		[Address(RVA = "0xB1AF70", Offset = "0xB1AF70", VA = "0xB1AF70")]
		public static void Triangulate(Vector2[] points, ref int[] output)
		{
		}

		[Token(Token = "0x6001D1A")]
		[Address(RVA = "0xB1B6B4", Offset = "0xB1B6B4", VA = "0xB1B6B4")]
		public static void FlipTriangles(ref int[] triangles)
		{
		}

		[Token(Token = "0x6001D1B")]
		[Address(RVA = "0xB1B720", Offset = "0xB1B720", VA = "0xB1B720")]
		public static void FlipFaces(TS_Mesh input)
		{
		}

		[Token(Token = "0x6001D1C")]
		[Address(RVA = "0xB1B858", Offset = "0xB1B858", VA = "0xB1B858")]
		public static void BreakMesh(Mesh input, bool keepNormals = true)
		{
		}

		[Token(Token = "0x6001D1D")]
		[Address(RVA = "0xB1B434", Offset = "0xB1B434", VA = "0xB1B434")]
		private static float Area(Vector2[] points, int maxCount)
		{
			return default(float);
		}

		[Token(Token = "0x6001D1E")]
		[Address(RVA = "0xB1B4C0", Offset = "0xB1B4C0", VA = "0xB1B4C0")]
		private static bool Snip(Vector2[] points, int u, int v, int w, int n, int[] V)
		{
			return default(bool);
		}

		[Token(Token = "0x6001D1F")]
		[Address(RVA = "0xB1C258", Offset = "0xB1C258", VA = "0xB1C258")]
		private static bool InsideTriangle(Vector2 A, Vector2 B, Vector2 C, Vector2 P)
		{
			return default(bool);
		}

		[Token(Token = "0x6001D20")]
		[Address(RVA = "0xB1C2D4", Offset = "0xB1C2D4", VA = "0xB1C2D4")]
		public MeshUtility()
		{
		}
	}
	[Token(Token = "0x20004DF")]
	public static class ResourceUtility
	{
		[Token(Token = "0x6001D22")]
		[Address(RVA = "0xB1C35C", Offset = "0xB1C35C", VA = "0xB1C35C")]
		public static string FindFolder(string dir, string folderPattern)
		{
			return null;
		}

		[Token(Token = "0x6001D23")]
		[Address(RVA = "0xB1C72C", Offset = "0xB1C72C", VA = "0xB1C72C")]
		public static Texture2D LoadTexture(string dreamteckPath, string textureFileName)
		{
			return null;
		}

		[Token(Token = "0x6001D24")]
		[Address(RVA = "0xB1C8AC", Offset = "0xB1C8AC", VA = "0xB1C8AC")]
		public static Texture2D LoadTexture(string path)
		{
			return null;
		}
	}
	[Token(Token = "0x20004E0")]
	public static class SceneUtility
	{
		[Token(Token = "0x6001D25")]
		[Address(RVA = "0xB1C9A4", Offset = "0xB1C9A4", VA = "0xB1C9A4")]
		public static void GetChildrenRecursively(Transform current, ref List<Transform> transformList)
		{
		}
	}
	[Token(Token = "0x20004E1")]
	public static class TransformUtility
	{
		[Token(Token = "0x6001D26")]
		[Address(RVA = "0xB1CCE4", Offset = "0xB1CCE4", VA = "0xB1CCE4")]
		public static Vector3 GetPosition(ref Matrix4x4 m)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001D27")]
		[Address(RVA = "0xB1CCF0", Offset = "0xB1CCF0", VA = "0xB1CCF0")]
		public static Quaternion GetRotation(ref Matrix4x4 m)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001D28")]
		[Address(RVA = "0xB1CD54", Offset = "0xB1CD54", VA = "0xB1CD54")]
		public static Vector3 GetScale(ref Matrix4x4 m)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001D29")]
		[Address(RVA = "0xB1CEE8", Offset = "0xB1CEE8", VA = "0xB1CEE8")]
		public static void SetPosition(ref Matrix4x4 m, ref Vector3 p)
		{
		}

		[Token(Token = "0x6001D2A")]
		[Address(RVA = "0xB1CF00", Offset = "0xB1CF00", VA = "0xB1CF00")]
		public static void GetChildCount(Transform parent, ref int count)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20004E2")]
	public class TS_Bounds
	{
		[Token(Token = "0x4002041")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 center;

		[Token(Token = "0x4002042")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 extents;

		[Token(Token = "0x4002043")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 max;

		[Token(Token = "0x4002044")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector3 min;

		[Token(Token = "0x4002045")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector3 size;

		[Token(Token = "0x6001D2B")]
		[Address(RVA = "0xB1D1D8", Offset = "0xB1D1D8", VA = "0xB1D1D8")]
		public TS_Bounds()
		{
		}

		[Token(Token = "0x6001D2C")]
		[Address(RVA = "0xB1D288", Offset = "0xB1D288", VA = "0xB1D288")]
		public TS_Bounds(Bounds bounds)
		{
		}

		[Token(Token = "0x6001D2D")]
		[Address(RVA = "0xB1D3A4", Offset = "0xB1D3A4", VA = "0xB1D3A4")]
		public TS_Bounds(Vector3 c, Vector3 s)
		{
		}

		[Token(Token = "0x6001D2E")]
		[Address(RVA = "0xB1D4D0", Offset = "0xB1D4D0", VA = "0xB1D4D0")]
		public TS_Bounds(Vector3 min, Vector3 max, Vector3 center)
		{
		}

		[Token(Token = "0x6001D2F")]
		[Address(RVA = "0xB1D608", Offset = "0xB1D608", VA = "0xB1D608")]
		public void CreateFromMinMax(Vector3 min, Vector3 max)
		{
		}

		[Token(Token = "0x6001D30")]
		[Address(RVA = "0xB1D654", Offset = "0xB1D654", VA = "0xB1D654")]
		public bool Contains(Vector3 point)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20004E3")]
	public class TS_Mesh
	{
		[Token(Token = "0x4002046")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3[] vertices;

		[Token(Token = "0x4002047")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3[] normals;

		[Token(Token = "0x4002048")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector4[] tangents;

		[Token(Token = "0x4002049")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Color[] colors;

		[Token(Token = "0x400204A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector2[] uv;

		[Token(Token = "0x400204B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector2[] uv2;

		[Token(Token = "0x400204C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector2[] uv3;

		[Token(Token = "0x400204D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector2[] uv4;

		[Token(Token = "0x400204E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int[] triangles;

		[Token(Token = "0x400204F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public List<int[]> subMeshes;

		[Token(Token = "0x4002050")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public TS_Bounds bounds;

		[Token(Token = "0x4002051")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool hasUpdate;

		[Token(Token = "0x170003B6")]
		public int vertexCount
		{
			[Token(Token = "0x6001D31")]
			[Address(RVA = "0xB1D6A8", Offset = "0xB1D6A8", VA = "0xB1D6A8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001D32")]
			[Address(RVA = "0xB1D6C4", Offset = "0xB1D6C4", VA = "0xB1D6C4")]
			set
			{
			}
		}

		[Token(Token = "0x6001D33")]
		[Address(RVA = "0xB1D6C8", Offset = "0xB1D6C8", VA = "0xB1D6C8")]
		public TS_Mesh()
		{
		}

		[Token(Token = "0x6001D34")]
		[Address(RVA = "0xB1D8DC", Offset = "0xB1D8DC", VA = "0xB1D8DC")]
		public TS_Mesh(Mesh mesh)
		{
		}

		[Token(Token = "0x6001D35")]
		[Address(RVA = "0xB1DCEC", Offset = "0xB1DCEC", VA = "0xB1DCEC")]
		public void Clear()
		{
		}

		[Token(Token = "0x6001D36")]
		[Address(RVA = "0xB1DB00", Offset = "0xB1DB00", VA = "0xB1DB00")]
		public void CreateFromMesh(Mesh mesh)
		{
		}

		[Token(Token = "0x6001D37")]
		[Address(RVA = "0xB1DEF8", Offset = "0xB1DEF8", VA = "0xB1DEF8")]
		public void Combine(List<TS_Mesh> newMeshes, bool overwrite = false)
		{
		}

		[Token(Token = "0x6001D38")]
		[Address(RVA = "0xB1F07C", Offset = "0xB1F07C", VA = "0xB1F07C")]
		public void Combine(TS_Mesh newMesh)
		{
		}

		[Token(Token = "0x6001D39")]
		[Address(RVA = "0xB1F778", Offset = "0xB1F778", VA = "0xB1F778")]
		public static TS_Mesh Copy(TS_Mesh input)
		{
			return null;
		}

		[Token(Token = "0x6001D3A")]
		[Address(RVA = "0xB1FBE0", Offset = "0xB1FBE0", VA = "0xB1FBE0")]
		public void Absorb(TS_Mesh input)
		{
		}

		[Token(Token = "0x6001D3B")]
		[Address(RVA = "0xB201F8", Offset = "0xB201F8", VA = "0xB201F8")]
		public void WriteMesh(ref Mesh input)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20004E4")]
	public class TS_Transform
	{
		[Token(Token = "0x4002052")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool setPosition;

		[Token(Token = "0x4002053")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		private bool setRotation;

		[Token(Token = "0x4002054")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		private bool setScale;

		[Token(Token = "0x4002055")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13")]
		private bool setLocalPosition;

		[Token(Token = "0x4002056")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private bool setLocalRotation;

		[Token(Token = "0x4002057")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		[SerializeField]
		private Transform _transform;

		[Token(Token = "0x4002058")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[HideInInspector]
		private float posX;

		[Token(Token = "0x4002059")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[HideInInspector]
		[SerializeField]
		private float posY;

		[Token(Token = "0x400205A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		[SerializeField]
		private float posZ;

		[Token(Token = "0x400205B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		[HideInInspector]
		private float scaleX;

		[Token(Token = "0x400205C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		[HideInInspector]
		private float scaleY;

		[Token(Token = "0x400205D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		[HideInInspector]
		private float scaleZ;

		[Token(Token = "0x400205E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		[SerializeField]
		private float lossyScaleX;

		[Token(Token = "0x400205F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[HideInInspector]
		[SerializeField]
		private float lossyScaleY;

		[Token(Token = "0x4002060")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		[SerializeField]
		private float lossyScaleZ;

		[Token(Token = "0x4002061")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[HideInInspector]
		[SerializeField]
		private float rotX;

		[Token(Token = "0x4002062")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[HideInInspector]
		[SerializeField]
		private float rotY;

		[Token(Token = "0x4002063")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[SerializeField]
		[HideInInspector]
		private float rotZ;

		[Token(Token = "0x4002064")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[HideInInspector]
		[SerializeField]
		private float rotW;

		[Token(Token = "0x4002065")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[HideInInspector]
		[SerializeField]
		private float lposX;

		[Token(Token = "0x4002066")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		[HideInInspector]
		private float lposY;

		[Token(Token = "0x4002067")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[SerializeField]
		[HideInInspector]
		private float lposZ;

		[Token(Token = "0x4002068")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		[HideInInspector]
		private float lrotX;

		[Token(Token = "0x4002069")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[HideInInspector]
		[SerializeField]
		private float lrotY;

		[Token(Token = "0x400206A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[HideInInspector]
		[SerializeField]
		private float lrotZ;

		[Token(Token = "0x400206B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[SerializeField]
		[HideInInspector]
		private float lrotW;

		[Token(Token = "0x170003B7")]
		public Vector3 position
		{
			[Token(Token = "0x6001D3C")]
			[Address(RVA = "0xB204D0", Offset = "0xB204D0", VA = "0xB204D0")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001D3D")]
			[Address(RVA = "0xB20514", Offset = "0xB20514", VA = "0xB20514")]
			set
			{
			}
		}

		[Token(Token = "0x170003B8")]
		public Quaternion rotation
		{
			[Token(Token = "0x6001D3E")]
			[Address(RVA = "0xB20564", Offset = "0xB20564", VA = "0xB20564")]
			get
			{
				return default(Quaternion);
			}
			[Token(Token = "0x6001D3F")]
			[Address(RVA = "0xB205B4", Offset = "0xB205B4", VA = "0xB205B4")]
			set
			{
			}
		}

		[Token(Token = "0x170003B9")]
		public Vector3 scale
		{
			[Token(Token = "0x6001D40")]
			[Address(RVA = "0xB20610", Offset = "0xB20610", VA = "0xB20610")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001D41")]
			[Address(RVA = "0xB20654", Offset = "0xB20654", VA = "0xB20654")]
			set
			{
			}
		}

		[Token(Token = "0x170003BA")]
		public Vector3 lossyScale
		{
			[Token(Token = "0x6001D42")]
			[Address(RVA = "0xB206A0", Offset = "0xB206A0", VA = "0xB206A0")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001D43")]
			[Address(RVA = "0xB206E4", Offset = "0xB206E4", VA = "0xB206E4")]
			set
			{
			}
		}

		[Token(Token = "0x170003BB")]
		public Vector3 localPosition
		{
			[Token(Token = "0x6001D44")]
			[Address(RVA = "0xB20730", Offset = "0xB20730", VA = "0xB20730")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001D45")]
			[Address(RVA = "0xB20774", Offset = "0xB20774", VA = "0xB20774")]
			set
			{
			}
		}

		[Token(Token = "0x170003BC")]
		public Quaternion localRotation
		{
			[Token(Token = "0x6001D46")]
			[Address(RVA = "0xB207C4", Offset = "0xB207C4", VA = "0xB207C4")]
			get
			{
				return default(Quaternion);
			}
			[Token(Token = "0x6001D47")]
			[Address(RVA = "0xB20814", Offset = "0xB20814", VA = "0xB20814")]
			set
			{
			}
		}

		[Token(Token = "0x170003BD")]
		public Transform transform
		{
			[Token(Token = "0x6001D48")]
			[Address(RVA = "0xB20870", Offset = "0xB20870", VA = "0xB20870")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001D49")]
		[Address(RVA = "0xB20878", Offset = "0xB20878", VA = "0xB20878")]
		public TS_Transform(Transform input)
		{
		}

		[Token(Token = "0x6001D4A")]
		[Address(RVA = "0xB208F4", Offset = "0xB208F4", VA = "0xB208F4")]
		public void Update()
		{
		}

		[Token(Token = "0x6001D4B")]
		[Address(RVA = "0xB208E4", Offset = "0xB208E4", VA = "0xB208E4")]
		public void SetTransform(Transform input)
		{
		}

		[Token(Token = "0x6001D4C")]
		[Address(RVA = "0xB20AC4", Offset = "0xB20AC4", VA = "0xB20AC4")]
		public bool HasChange()
		{
			return default(bool);
		}

		[Token(Token = "0x6001D4D")]
		[Address(RVA = "0xB20AF8", Offset = "0xB20AF8", VA = "0xB20AF8")]
		public bool HasPositionChange()
		{
			return default(bool);
		}

		[Token(Token = "0x6001D4E")]
		[Address(RVA = "0xB20B7C", Offset = "0xB20B7C", VA = "0xB20B7C")]
		public bool HasRotationChange()
		{
			return default(bool);
		}

		[Token(Token = "0x6001D4F")]
		[Address(RVA = "0xB20C20", Offset = "0xB20C20", VA = "0xB20C20")]
		public bool HasScaleChange()
		{
			return default(bool);
		}

		[Token(Token = "0x6001D50")]
		[Address(RVA = "0xB20CA4", Offset = "0xB20CA4", VA = "0xB20CA4")]
		public Vector3 TransformPoint(Vector3 point)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001D51")]
		[Address(RVA = "0xB20D38", Offset = "0xB20D38", VA = "0xB20D38")]
		public Vector3 TransformDirection(Vector3 direction)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001D52")]
		[Address(RVA = "0xB20D7C", Offset = "0xB20D7C", VA = "0xB20D7C")]
		public Vector3 InverseTransformPoint(Vector3 point)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001D53")]
		[Address(RVA = "0xB20DBC", Offset = "0xB20DBC", VA = "0xB20DBC")]
		public Vector3 InverseTransformDirection(Vector3 direction)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001D54")]
		public T GetComponent<T>()
		{
			return (T)null;
		}
	}
}
namespace Dreamteck.Splines
{
	[Token(Token = "0x20004E5")]
	public class BlankUser : SplineUser
	{
		[Token(Token = "0x6001D55")]
		[Address(RVA = "0xB20E40", Offset = "0xB20E40", VA = "0xB20E40")]
		private void Start()
		{
		}

		[Token(Token = "0x6001D56")]
		[Address(RVA = "0xB20E44", Offset = "0xB20E44", VA = "0xB20E44", Slot = "19")]
		protected override void LateRun()
		{
		}

		[Token(Token = "0x6001D57")]
		[Address(RVA = "0xB20E4C", Offset = "0xB20E4C", VA = "0xB20E4C", Slot = "20")]
		protected override void Build()
		{
		}

		[Token(Token = "0x6001D58")]
		[Address(RVA = "0xB20E54", Offset = "0xB20E54", VA = "0xB20E54", Slot = "21")]
		protected override void PostBuild()
		{
		}

		[Token(Token = "0x6001D59")]
		[Address(RVA = "0xB20E5C", Offset = "0xB20E5C", VA = "0xB20E5C")]
		public BlankUser()
		{
		}
	}
	[Token(Token = "0x20004E6")]
	[AddComponentMenu("Dreamteck/Splines/Edge Collider Generator")]
	[RequireComponent(typeof(EdgeCollider2D))]
	public class EdgeColliderGenerator : SplineUser
	{
		[Token(Token = "0x400206C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		[HideInInspector]
		private float _offset;

		[Token(Token = "0x400206D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		[HideInInspector]
		protected EdgeCollider2D edgeCollider;

		[Token(Token = "0x400206E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		[HideInInspector]
		protected Vector2[] vertices;

		[Token(Token = "0x400206F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[HideInInspector]
		public float updateRate;

		[Token(Token = "0x4002070")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		protected float lastUpdateTime;

		[Token(Token = "0x4002071")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private bool updateCollider;

		[Token(Token = "0x170003BE")]
		public float offset
		{
			[Token(Token = "0x6001D5A")]
			[Address(RVA = "0xB20E64", Offset = "0xB20E64", VA = "0xB20E64")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001D5B")]
			[Address(RVA = "0xB20E6C", Offset = "0xB20E6C", VA = "0xB20E6C")]
			set
			{
			}
		}

		[Token(Token = "0x6001D5C")]
		[Address(RVA = "0xB20E90", Offset = "0xB20E90", VA = "0xB20E90", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6001D5D")]
		[Address(RVA = "0xB20EEC", Offset = "0xB20EEC", VA = "0xB20EEC", Slot = "5")]
		protected override void Reset()
		{
		}

		[Token(Token = "0x6001D5E")]
		[Address(RVA = "0xB20EF4", Offset = "0xB20EF4", VA = "0xB20EF4", Slot = "6")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6001D5F")]
		[Address(RVA = "0xB20EFC", Offset = "0xB20EFC", VA = "0xB20EFC", Slot = "7")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x6001D60")]
		[Address(RVA = "0xB20F04", Offset = "0xB20F04", VA = "0xB20F04", Slot = "8")]
		protected override void OnDestroy()
		{
		}

		[Token(Token = "0x6001D61")]
		[Address(RVA = "0xB20F0C", Offset = "0xB20F0C", VA = "0xB20F0C", Slot = "19")]
		protected override void LateRun()
		{
		}

		[Token(Token = "0x6001D62")]
		[Address(RVA = "0xB20FD0", Offset = "0xB20FD0", VA = "0xB20FD0", Slot = "20")]
		protected override void Build()
		{
		}

		[Token(Token = "0x6001D63")]
		[Address(RVA = "0xB2127C", Offset = "0xB2127C", VA = "0xB2127C", Slot = "21")]
		protected override void PostBuild()
		{
		}

		[Token(Token = "0x6001D64")]
		[Address(RVA = "0xB213B0", Offset = "0xB213B0", VA = "0xB213B0")]
		public EdgeColliderGenerator()
		{
		}
	}
	[Token(Token = "0x20004E7")]
	[RequireComponent(typeof(MeshFilter))]
	[RequireComponent(typeof(MeshRenderer))]
	[AddComponentMenu("Dreamteck/Splines/Extrude Mesh")]
	public class ExtrudeMesh : MeshGenerator
	{
		[Token(Token = "0x20004E8")]
		public enum Axis
		{
			[Token(Token = "0x4002089")]
			X,
			[Token(Token = "0x400208A")]
			Y,
			[Token(Token = "0x400208B")]
			Z
		}

		[Token(Token = "0x20004E9")]
		public enum Iteration
		{
			[Token(Token = "0x400208D")]
			Ordered,
			[Token(Token = "0x400208E")]
			Random
		}

		[Token(Token = "0x20004EA")]
		public enum MirrorMethod
		{
			[Token(Token = "0x4002090")]
			None,
			[Token(Token = "0x4002091")]
			X,
			[Token(Token = "0x4002092")]
			Y,
			[Token(Token = "0x4002093")]
			Z
		}

		[Token(Token = "0x20004EB")]
		public enum TileUVs
		{
			[Token(Token = "0x4002095")]
			None,
			[Token(Token = "0x4002096")]
			U,
			[Token(Token = "0x4002097")]
			V,
			[Token(Token = "0x4002098")]
			UniformU,
			[Token(Token = "0x4002099")]
			UniformV
		}

		[Serializable]
		[Token(Token = "0x20004EC")]
		internal class ExtrudableMesh
		{
			[Serializable]
			[Token(Token = "0x20004ED")]
			public class VertexGroup
			{
				[Token(Token = "0x40020A4")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				public float value;

				[Token(Token = "0x40020A5")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				public int[] ids;

				[Token(Token = "0x6001D9A")]
				[Address(RVA = "0xB26018", Offset = "0xB26018", VA = "0xB26018")]
				public VertexGroup(float val, int[] vertIds)
				{
				}

				[Token(Token = "0x6001D9B")]
				[Address(RVA = "0xB26050", Offset = "0xB26050", VA = "0xB26050")]
				public void AddId(int id)
				{
				}
			}

			[Serializable]
			[Token(Token = "0x20004EE")]
			public class Submesh
			{
				[Token(Token = "0x40020A6")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				public int[] triangles;

				[Token(Token = "0x6001D9C")]
				[Address(RVA = "0xB260F4", Offset = "0xB260F4", VA = "0xB260F4")]
				public Submesh()
				{
				}

				[Token(Token = "0x6001D9D")]
				[Address(RVA = "0xB2547C", Offset = "0xB2547C", VA = "0xB2547C")]
				public Submesh(int[] input)
				{
				}
			}

			[Token(Token = "0x400209A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3[] vertices;

			[Token(Token = "0x400209B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Vector3[] normals;

			[Token(Token = "0x400209C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector4[] tangents;

			[Token(Token = "0x400209D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Color[] colors;

			[Token(Token = "0x400209E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Vector2[] uv;

			[Token(Token = "0x400209F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public List<Submesh> subMeshes;

			[Token(Token = "0x40020A0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public TS_Bounds bounds;

			[Token(Token = "0x40020A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public List<VertexGroup> vertexGroups;

			[Token(Token = "0x40020A2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[SerializeField]
			private MirrorMethod _mirror;

			[Token(Token = "0x40020A3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			[SerializeField]
			private Axis _axis;

			[Token(Token = "0x170003C8")]
			public MirrorMethod mirror
			{
				[Token(Token = "0x6001D91")]
				[Address(RVA = "0xB24A98", Offset = "0xB24A98", VA = "0xB24A98")]
				get
				{
					return default(MirrorMethod);
				}
				[Token(Token = "0x6001D92")]
				[Address(RVA = "0xB220F0", Offset = "0xB220F0", VA = "0xB220F0")]
				set
				{
				}
			}

			[Token(Token = "0x6001D93")]
			[Address(RVA = "0xB25170", Offset = "0xB25170", VA = "0xB25170")]
			public ExtrudableMesh()
			{
			}

			[Token(Token = "0x6001D94")]
			[Address(RVA = "0xB2249C", Offset = "0xB2249C", VA = "0xB2249C")]
			public ExtrudableMesh(Mesh inputMesh, Axis axis)
			{
			}

			[Token(Token = "0x6001D95")]
			[Address(RVA = "0xB242E4", Offset = "0xB242E4", VA = "0xB242E4")]
			public void Update(Mesh inputMesh, Axis axis)
			{
			}

			[Token(Token = "0x6001D96")]
			[Address(RVA = "0xB24AA0", Offset = "0xB24AA0", VA = "0xB24AA0")]
			private void Mirror(MirrorMethod method)
			{
			}

			[Token(Token = "0x6001D97")]
			[Address(RVA = "0xB2550C", Offset = "0xB2550C", VA = "0xB2550C")]
			private void GroupVertices(Axis axis)
			{
			}

			[Token(Token = "0x6001D98")]
			[Address(RVA = "0xB25F24", Offset = "0xB25F24", VA = "0xB25F24")]
			private int FindInsertIndex(Vector3 pos, float value)
			{
				return default(int);
			}

			[Token(Token = "0x6001D99")]
			[Address(RVA = "0xB25990", Offset = "0xB25990", VA = "0xB25990")]
			private void CalculateTangents()
			{
			}
		}

		[Token(Token = "0x4002072")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[SerializeField]
		[HideInInspector]
		private Mesh _startMesh;

		[Token(Token = "0x4002073")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[SerializeField]
		[HideInInspector]
		private Mesh _endMesh;

		[Token(Token = "0x4002074")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		[SerializeField]
		[HideInInspector]
		private bool _dontStretchCaps;

		[Token(Token = "0x4002075")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
		[SerializeField]
		[HideInInspector]
		private TileUVs _tileUVs;

		[Token(Token = "0x4002076")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		[SerializeField]
		[HideInInspector]
		private Mesh[] _middleMeshes;

		[Token(Token = "0x4002077")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		[SerializeField]
		[HideInInspector]
		private List<ExtrudableMesh> extrudableMeshes;

		[Token(Token = "0x4002078")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		[HideInInspector]
		[SerializeField]
		private Axis _axis;

		[Token(Token = "0x4002079")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
		[HideInInspector]
		[SerializeField]
		private Iteration _iteration;

		[Token(Token = "0x400207A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		[SerializeField]
		[HideInInspector]
		private int _randomSeed;

		[Token(Token = "0x400207B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		[SerializeField]
		[HideInInspector]
		private int _repeat;

		[Token(Token = "0x400207C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		[SerializeField]
		[HideInInspector]
		private double _spacing;

		[Token(Token = "0x400207D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		[HideInInspector]
		[SerializeField]
		private Vector2 _scale;

		[Token(Token = "0x400207E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private SplineResult lastResult;

		[Token(Token = "0x400207F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private bool useLastResult;

		[Token(Token = "0x4002080")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private List<TS_Mesh> combineMeshes;

		[Token(Token = "0x4002081")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		private System.Random random;

		[Token(Token = "0x4002082")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		private int iterations;

		[Token(Token = "0x4002083")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
		private bool _hasAnyMesh;

		[Token(Token = "0x4002084")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19D")]
		private bool _hasStartMesh;

		[Token(Token = "0x4002085")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19E")]
		private bool _hasEndMesh;

		[Token(Token = "0x4002086")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		private Matrix4x4 vertexMatrix;

		[Token(Token = "0x4002087")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		private Matrix4x4 normalMatrix;

		[Token(Token = "0x170003BF")]
		public Axis axis
		{
			[Token(Token = "0x6001D65")]
			[Address(RVA = "0xB21414", Offset = "0xB21414", VA = "0xB21414")]
			get
			{
				return default(Axis);
			}
			[Token(Token = "0x6001D66")]
			[Address(RVA = "0xB2141C", Offset = "0xB2141C", VA = "0xB2141C")]
			set
			{
			}
		}

		[Token(Token = "0x170003C0")]
		public Iteration iteration
		{
			[Token(Token = "0x6001D67")]
			[Address(RVA = "0xB21760", Offset = "0xB21760", VA = "0xB21760")]
			get
			{
				return default(Iteration);
			}
			[Token(Token = "0x6001D68")]
			[Address(RVA = "0xB21768", Offset = "0xB21768", VA = "0xB21768")]
			set
			{
			}
		}

		[Token(Token = "0x170003C1")]
		public int randomSeed
		{
			[Token(Token = "0x6001D69")]
			[Address(RVA = "0xB217A4", Offset = "0xB217A4", VA = "0xB217A4")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001D6A")]
			[Address(RVA = "0xB217AC", Offset = "0xB217AC", VA = "0xB217AC")]
			set
			{
			}
		}

		[Token(Token = "0x170003C2")]
		public int repeat
		{
			[Token(Token = "0x6001D6B")]
			[Address(RVA = "0xB217F8", Offset = "0xB217F8", VA = "0xB217F8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001D6C")]
			[Address(RVA = "0xB21800", Offset = "0xB21800", VA = "0xB21800")]
			set
			{
			}
		}

		[Token(Token = "0x170003C3")]
		public bool dontStretchCaps
		{
			[Token(Token = "0x6001D6D")]
			[Address(RVA = "0xB21B30", Offset = "0xB21B30", VA = "0xB21B30")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001D6E")]
			[Address(RVA = "0xB21B38", Offset = "0xB21B38", VA = "0xB21B38")]
			set
			{
			}
		}

		[Token(Token = "0x170003C4")]
		public TileUVs tileUVs
		{
			[Token(Token = "0x6001D6F")]
			[Address(RVA = "0xB21B60", Offset = "0xB21B60", VA = "0xB21B60")]
			get
			{
				return default(TileUVs);
			}
			[Token(Token = "0x6001D70")]
			[Address(RVA = "0xB21B68", Offset = "0xB21B68", VA = "0xB21B68")]
			set
			{
			}
		}

		[Token(Token = "0x170003C5")]
		public double spacing
		{
			[Token(Token = "0x6001D71")]
			[Address(RVA = "0xB21B8C", Offset = "0xB21B8C", VA = "0xB21B8C")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6001D72")]
			[Address(RVA = "0xB21B94", Offset = "0xB21B94", VA = "0xB21B94")]
			set
			{
			}
		}

		[Token(Token = "0x170003C6")]
		public Vector2 scale
		{
			[Token(Token = "0x6001D73")]
			[Address(RVA = "0xB21C04", Offset = "0xB21C04", VA = "0xB21C04")]
			get
			{
				return default(Vector2);
			}
			[Token(Token = "0x6001D74")]
			[Address(RVA = "0xB21C10", Offset = "0xB21C10", VA = "0xB21C10")]
			set
			{
			}
		}

		[Token(Token = "0x170003C7")]
		public bool hasAnyMesh
		{
			[Token(Token = "0x6001D75")]
			[Address(RVA = "0xB21C58", Offset = "0xB21C58", VA = "0xB21C58")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001D76")]
		[Address(RVA = "0xB21C60", Offset = "0xB21C60", VA = "0xB21C60", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6001D77")]
		[Address(RVA = "0xB21EFC", Offset = "0xB21EFC", VA = "0xB21EFC")]
		public Mesh GetStartMesh()
		{
			return null;
		}

		[Token(Token = "0x6001D78")]
		[Address(RVA = "0xB21F04", Offset = "0xB21F04", VA = "0xB21F04")]
		public Mesh GetEndMesh()
		{
			return null;
		}

		[Token(Token = "0x6001D79")]
		[Address(RVA = "0xB21F0C", Offset = "0xB21F0C", VA = "0xB21F0C")]
		public MirrorMethod GetStartMeshMirror()
		{
			return default(MirrorMethod);
		}

		[Token(Token = "0x6001D7A")]
		[Address(RVA = "0xB21FA0", Offset = "0xB21FA0", VA = "0xB21FA0")]
		public MirrorMethod GetEndMeshMirror()
		{
			return default(MirrorMethod);
		}

		[Token(Token = "0x6001D7B")]
		[Address(RVA = "0xB22038", Offset = "0xB22038", VA = "0xB22038")]
		public void SetStartMeshMirror(MirrorMethod mirror)
		{
		}

		[Token(Token = "0x6001D7C")]
		[Address(RVA = "0xB22138", Offset = "0xB22138", VA = "0xB22138")]
		public void SetEndMeshMirror(MirrorMethod mirror)
		{
		}

		[Token(Token = "0x6001D7D")]
		[Address(RVA = "0xB221F4", Offset = "0xB221F4", VA = "0xB221F4")]
		public void SetMeshMirror(int index, MirrorMethod mirror)
		{
		}

		[Token(Token = "0x6001D7E")]
		[Address(RVA = "0xB222C4", Offset = "0xB222C4", VA = "0xB222C4")]
		public void SetStartMesh(Mesh inputMesh, MirrorMethod mirror = MirrorMethod.None)
		{
		}

		[Token(Token = "0x6001D7F")]
		[Address(RVA = "0xB226C0", Offset = "0xB226C0", VA = "0xB226C0")]
		public void SetEndMesh(Mesh inputMesh, MirrorMethod mirror = MirrorMethod.None)
		{
		}

		[Token(Token = "0x6001D80")]
		[Address(RVA = "0xB22888", Offset = "0xB22888", VA = "0xB22888")]
		public Mesh GetMesh(int index)
		{
			return null;
		}

		[Token(Token = "0x6001D81")]
		[Address(RVA = "0xB228B8", Offset = "0xB228B8", VA = "0xB228B8")]
		public MirrorMethod GetMeshMirror(int index)
		{
			return default(MirrorMethod);
		}

		[Token(Token = "0x6001D82")]
		[Address(RVA = "0xB22938", Offset = "0xB22938", VA = "0xB22938")]
		public void SetMesh(int index, Mesh inputMesh, MirrorMethod mirror = MirrorMethod.None)
		{
		}

		[Token(Token = "0x6001D83")]
		[Address(RVA = "0xB22A70", Offset = "0xB22A70", VA = "0xB22A70")]
		public void RemoveMesh(int index)
		{
		}

		[Token(Token = "0x6001D84")]
		[Address(RVA = "0xB22BF8", Offset = "0xB22BF8", VA = "0xB22BF8")]
		public void AddMesh(Mesh inputMesh)
		{
		}

		[Token(Token = "0x6001D85")]
		[Address(RVA = "0xB21DE0", Offset = "0xB21DE0", VA = "0xB21DE0")]
		private void CheckMeshes()
		{
		}

		[Token(Token = "0x6001D86")]
		[Address(RVA = "0xB22D30", Offset = "0xB22D30", VA = "0xB22D30")]
		public int GetMeshCount()
		{
			return default(int);
		}

		[Token(Token = "0x6001D87")]
		[Address(RVA = "0xB22D4C", Offset = "0xB22D4C", VA = "0xB22D4C", Slot = "29")]
		protected override void BuildMesh()
		{
		}

		[Token(Token = "0x6001D88")]
		[Address(RVA = "0xB22DBC", Offset = "0xB22DBC", VA = "0xB22DBC")]
		private void Generate()
		{
		}

		[Token(Token = "0x6001D89")]
		[Address(RVA = "0xB23200", Offset = "0xB23200", VA = "0xB23200")]
		private int GetMeshIndex(int repeatIndex)
		{
			return default(int);
		}

		[Token(Token = "0x6001D8A")]
		[Address(RVA = "0xB23A54", Offset = "0xB23A54", VA = "0xB23A54")]
		private void TRS(ExtrudableMesh source, TS_Mesh target, double percent)
		{
		}

		[Token(Token = "0x6001D8B")]
		[Address(RVA = "0xB23F04", Offset = "0xB23F04", VA = "0xB23F04")]
		private void CreateTSFromExtrudableMesh(ExtrudableMesh source, ref TS_Mesh target)
		{
		}

		[Token(Token = "0x6001D8C")]
		[Address(RVA = "0xB232DC", Offset = "0xB232DC", VA = "0xB232DC")]
		private void Stretch(ExtrudableMesh source, TS_Mesh target, double from, double to)
		{
		}

		[Token(Token = "0x6001D8D")]
		[Address(RVA = "0xB21458", Offset = "0xB21458", VA = "0xB21458")]
		private void UpdateExtrudableMeshes()
		{
		}

		[Token(Token = "0x6001D8E")]
		[Address(RVA = "0xB245A4", Offset = "0xB245A4", VA = "0xB245A4")]
		private void UpdateStartExtrudeMesh()
		{
		}

		[Token(Token = "0x6001D8F")]
		[Address(RVA = "0xB21844", Offset = "0xB21844", VA = "0xB21844")]
		private void UpdateEndExtrudeMesh()
		{
		}

		[Token(Token = "0x6001D90")]
		[Address(RVA = "0xB247E8", Offset = "0xB247E8", VA = "0xB247E8")]
		public ExtrudeMesh()
		{
		}
	}
	[Token(Token = "0x20004EF")]
	[AddComponentMenu("Dreamteck/Splines/Length Calculator")]
	public class LengthCalculator : SplineUser
	{
		[Serializable]
		[Token(Token = "0x20004F0")]
		public class LengthEvent
		{
			[Token(Token = "0x20004F1")]
			public enum Type
			{
				[Token(Token = "0x40020B0")]
				Growing,
				[Token(Token = "0x40020B1")]
				Shrinking,
				[Token(Token = "0x40020B2")]
				Both
			}

			[Token(Token = "0x40020AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool enabled;

			[Token(Token = "0x40020AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float targetLength;

			[Token(Token = "0x40020AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public SplineAction action;

			[Token(Token = "0x40020AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Type type;

			[Token(Token = "0x6001DAB")]
			[Address(RVA = "0xB26B3C", Offset = "0xB26B3C", VA = "0xB26B3C")]
			public LengthEvent()
			{
			}

			[Token(Token = "0x6001DAC")]
			[Address(RVA = "0xB26BB4", Offset = "0xB26BB4", VA = "0xB26BB4")]
			public LengthEvent(Type t)
			{
			}

			[Token(Token = "0x6001DAD")]
			[Address(RVA = "0xB26498", Offset = "0xB26498", VA = "0xB26498")]
			public LengthEvent(Type t, SplineAction a)
			{
			}

			[Token(Token = "0x6001DAE")]
			[Address(RVA = "0xB26284", Offset = "0xB26284", VA = "0xB26284")]
			public void Check(float fromLength, float toLength)
			{
			}
		}

		[Token(Token = "0x40020A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[HideInInspector]
		public LengthEvent[] lengthEvents;

		[Token(Token = "0x40020A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[HideInInspector]
		public float idealLength;

		[Token(Token = "0x40020A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private float _length;

		[Token(Token = "0x40020AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private float lastLength;

		[Token(Token = "0x170003C9")]
		public float length
		{
			[Token(Token = "0x6001D9E")]
			[Address(RVA = "0xB2614C", Offset = "0xB2614C", VA = "0xB2614C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6001D9F")]
		[Address(RVA = "0xB26154", Offset = "0xB26154", VA = "0xB26154", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6001DA0")]
		[Address(RVA = "0xB261EC", Offset = "0xB261EC", VA = "0xB261EC", Slot = "20")]
		protected override void Build()
		{
		}

		[Token(Token = "0x6001DA1")]
		[Address(RVA = "0xB26308", Offset = "0xB26308", VA = "0xB26308")]
		private void AddEvent(LengthEvent lengthEvent)
		{
		}

		[Token(Token = "0x6001DA2")]
		[Address(RVA = "0xB263D0", Offset = "0xB263D0", VA = "0xB263D0")]
		public void AddEvent(LengthEvent.Type t, UnityAction call, float targetLength = 0f, LengthEvent.Type type = LengthEvent.Type.Both)
		{
		}

		[Token(Token = "0x6001DA3")]
		[Address(RVA = "0xB2652C", Offset = "0xB2652C", VA = "0xB2652C")]
		public void AddEvent(LengthEvent.Type t, UnityAction<int> call, int value, float targetLength = 0f, LengthEvent.Type type = LengthEvent.Type.Both)
		{
		}

		[Token(Token = "0x6001DA4")]
		[Address(RVA = "0xB265FC", Offset = "0xB265FC", VA = "0xB265FC")]
		public void AddEvent(LengthEvent.Type t, UnityAction<float> call, float value, float targetLength = 0f, LengthEvent.Type type = LengthEvent.Type.Both)
		{
		}

		[Token(Token = "0x6001DA5")]
		[Address(RVA = "0xB266CC", Offset = "0xB266CC", VA = "0xB266CC")]
		public void AddEvent(LengthEvent.Type t, UnityAction<double> call, double value, float targetLength = 0f, LengthEvent.Type type = LengthEvent.Type.Both)
		{
		}

		[Token(Token = "0x6001DA6")]
		[Address(RVA = "0xB2679C", Offset = "0xB2679C", VA = "0xB2679C")]
		public void AddTrigger(LengthEvent.Type t, UnityAction<string> call, string value, float targetLength = 0f, LengthEvent.Type type = LengthEvent.Type.Both)
		{
		}

		[Token(Token = "0x6001DA7")]
		[Address(RVA = "0xB2686C", Offset = "0xB2686C", VA = "0xB2686C")]
		public void AddEvent(LengthEvent.Type t, UnityAction<bool> call, bool value, float targetLength = 0f, LengthEvent.Type type = LengthEvent.Type.Both)
		{
		}

		[Token(Token = "0x6001DA8")]
		[Address(RVA = "0xB2693C", Offset = "0xB2693C", VA = "0xB2693C")]
		public void AddEvent(LengthEvent.Type t, UnityAction<GameObject> call, GameObject value, float targetLength = 0f, LengthEvent.Type type = LengthEvent.Type.Both)
		{
		}

		[Token(Token = "0x6001DA9")]
		[Address(RVA = "0xB26A0C", Offset = "0xB26A0C", VA = "0xB26A0C")]
		public void AddEvent(LengthEvent.Type t, UnityAction<Transform> call, Transform value, float targetLength = 0f, LengthEvent.Type type = LengthEvent.Type.Both)
		{
		}

		[Token(Token = "0x6001DAA")]
		[Address(RVA = "0xB26ADC", Offset = "0xB26ADC", VA = "0xB26ADC")]
		public LengthCalculator()
		{
		}
	}
	[Token(Token = "0x20004F2")]
	public class MeshGenerator : SplineUser
	{
		[Token(Token = "0x20004F3")]
		public enum UVMode
		{
			[Token(Token = "0x40020CB")]
			Clip,
			[Token(Token = "0x40020CC")]
			UniformClip,
			[Token(Token = "0x40020CD")]
			Clamp,
			[Token(Token = "0x40020CE")]
			UniformClamp
		}

		[Token(Token = "0x40020B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		[HideInInspector]
		private bool _baked;

		[Token(Token = "0x40020B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[SerializeField]
		[HideInInspector]
		private float _size;

		[Token(Token = "0x40020B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		[HideInInspector]
		private Color _color;

		[Token(Token = "0x40020B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		[HideInInspector]
		private Vector3 _offset;

		[Token(Token = "0x40020B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[SerializeField]
		[HideInInspector]
		private int _normalMethod;

		[Token(Token = "0x40020B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		[HideInInspector]
		private bool _tangents;

		[Token(Token = "0x40020B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		[SerializeField]
		[HideInInspector]
		private float _rotation;

		[Token(Token = "0x40020BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		[HideInInspector]
		private bool _flipFaces;

		[Token(Token = "0x40020BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD9")]
		[SerializeField]
		[HideInInspector]
		private bool _doubleSided;

		[Token(Token = "0x40020BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[SerializeField]
		[HideInInspector]
		private UVMode _uvMode;

		[Token(Token = "0x40020BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[SerializeField]
		[HideInInspector]
		private Vector2 _uvScale;

		[Token(Token = "0x40020BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[SerializeField]
		[HideInInspector]
		private Vector2 _uvOffset;

		[Token(Token = "0x40020BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[SerializeField]
		[HideInInspector]
		private float _uvRotation;

		[Token(Token = "0x40020C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[HideInInspector]
		[SerializeField]
		protected MeshCollider meshCollider;

		[Token(Token = "0x40020C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[SerializeField]
		[HideInInspector]
		protected MeshFilter filter;

		[Token(Token = "0x40020C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[SerializeField]
		[HideInInspector]
		protected MeshRenderer meshRenderer;

		[Token(Token = "0x40020C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[SerializeField]
		[HideInInspector]
		protected TS_Mesh tsMesh;

		[Token(Token = "0x40020C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[SerializeField]
		[HideInInspector]
		protected Mesh mesh;

		[Token(Token = "0x40020C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[HideInInspector]
		public float colliderUpdateRate;

		[Token(Token = "0x40020C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		protected bool updateCollider;

		[Token(Token = "0x40020C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		protected float lastUpdateTime;

		[Token(Token = "0x40020C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		private float vDist;

		[Token(Token = "0x40020C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected static Vector2 uvs;

		[Token(Token = "0x170003CA")]
		public float size
		{
			[Token(Token = "0x6001DAF")]
			[Address(RVA = "0xB26C40", Offset = "0xB26C40", VA = "0xB26C40")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001DB0")]
			[Address(RVA = "0xB26C48", Offset = "0xB26C48", VA = "0xB26C48")]
			set
			{
			}
		}

		[Token(Token = "0x170003CB")]
		public Color color
		{
			[Token(Token = "0x6001DB1")]
			[Address(RVA = "0xB26C6C", Offset = "0xB26C6C", VA = "0xB26C6C")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6001DB2")]
			[Address(RVA = "0xB26C78", Offset = "0xB26C78", VA = "0xB26C78")]
			set
			{
			}
		}

		[Token(Token = "0x170003CC")]
		public Vector3 offset
		{
			[Token(Token = "0x6001DB3")]
			[Address(RVA = "0xB26CD8", Offset = "0xB26CD8", VA = "0xB26CD8")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001DB4")]
			[Address(RVA = "0xB26CE4", Offset = "0xB26CE4", VA = "0xB26CE4")]
			set
			{
			}
		}

		[Token(Token = "0x170003CD")]
		public int normalMethod
		{
			[Token(Token = "0x6001DB5")]
			[Address(RVA = "0xB26D38", Offset = "0xB26D38", VA = "0xB26D38")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001DB6")]
			[Address(RVA = "0xB26D40", Offset = "0xB26D40", VA = "0xB26D40")]
			set
			{
			}
		}

		[Token(Token = "0x170003CE")]
		public bool calculateTangents
		{
			[Token(Token = "0x6001DB7")]
			[Address(RVA = "0xB26D64", Offset = "0xB26D64", VA = "0xB26D64")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001DB8")]
			[Address(RVA = "0xB26D6C", Offset = "0xB26D6C", VA = "0xB26D6C")]
			set
			{
			}
		}

		[Token(Token = "0x170003CF")]
		public float rotation
		{
			[Token(Token = "0x6001DB9")]
			[Address(RVA = "0xB26D94", Offset = "0xB26D94", VA = "0xB26D94")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001DBA")]
			[Address(RVA = "0xB26D9C", Offset = "0xB26D9C", VA = "0xB26D9C")]
			set
			{
			}
		}

		[Token(Token = "0x170003D0")]
		public bool flipFaces
		{
			[Token(Token = "0x6001DBB")]
			[Address(RVA = "0xB26DC0", Offset = "0xB26DC0", VA = "0xB26DC0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001DBC")]
			[Address(RVA = "0xB26DC8", Offset = "0xB26DC8", VA = "0xB26DC8")]
			set
			{
			}
		}

		[Token(Token = "0x170003D1")]
		public bool doubleSided
		{
			[Token(Token = "0x6001DBD")]
			[Address(RVA = "0xB26DF0", Offset = "0xB26DF0", VA = "0xB26DF0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001DBE")]
			[Address(RVA = "0xB26DF8", Offset = "0xB26DF8", VA = "0xB26DF8")]
			set
			{
			}
		}

		[Token(Token = "0x170003D2")]
		public UVMode uvMode
		{
			[Token(Token = "0x6001DBF")]
			[Address(RVA = "0xB26E20", Offset = "0xB26E20", VA = "0xB26E20")]
			get
			{
				return default(UVMode);
			}
			[Token(Token = "0x6001DC0")]
			[Address(RVA = "0xB26E28", Offset = "0xB26E28", VA = "0xB26E28")]
			set
			{
			}
		}

		[Token(Token = "0x170003D3")]
		public Vector2 uvScale
		{
			[Token(Token = "0x6001DC1")]
			[Address(RVA = "0xB26E4C", Offset = "0xB26E4C", VA = "0xB26E4C")]
			get
			{
				return default(Vector2);
			}
			[Token(Token = "0x6001DC2")]
			[Address(RVA = "0xB26E54", Offset = "0xB26E54", VA = "0xB26E54")]
			set
			{
			}
		}

		[Token(Token = "0x170003D4")]
		public Vector2 uvOffset
		{
			[Token(Token = "0x6001DC3")]
			[Address(RVA = "0xB26E94", Offset = "0xB26E94", VA = "0xB26E94")]
			get
			{
				return default(Vector2);
			}
			[Token(Token = "0x6001DC4")]
			[Address(RVA = "0xB26E9C", Offset = "0xB26E9C", VA = "0xB26E9C")]
			set
			{
			}
		}

		[Token(Token = "0x170003D5")]
		public float uvRotation
		{
			[Token(Token = "0x6001DC5")]
			[Address(RVA = "0xB26EDC", Offset = "0xB26EDC", VA = "0xB26EDC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001DC6")]
			[Address(RVA = "0xB26EE4", Offset = "0xB26EE4", VA = "0xB26EE4")]
			set
			{
			}
		}

		[Token(Token = "0x170003D6")]
		public bool baked
		{
			[Token(Token = "0x6001DC7")]
			[Address(RVA = "0xB26F08", Offset = "0xB26F08", VA = "0xB26F08")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001DC8")]
		[Address(RVA = "0xB21CC4", Offset = "0xB21CC4", VA = "0xB21CC4", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6001DC9")]
		[Address(RVA = "0xB26F10", Offset = "0xB26F10", VA = "0xB26F10", Slot = "5")]
		protected override void Reset()
		{
		}

		[Token(Token = "0x6001DCA")]
		[Address(RVA = "0xB27034", Offset = "0xB27034", VA = "0xB27034")]
		public void CloneMesh()
		{
		}

		[Token(Token = "0x6001DCB")]
		[Address(RVA = "0xB2714C", Offset = "0xB2714C", VA = "0xB2714C", Slot = "11")]
		public override void Rebuild(bool sampleComputer)
		{
		}

		[Token(Token = "0x6001DCC")]
		[Address(RVA = "0xB27164", Offset = "0xB27164", VA = "0xB27164", Slot = "12")]
		public override void RebuildImmediate(bool sampleComputer)
		{
		}

		[Token(Token = "0x6001DCD")]
		[Address(RVA = "0xB2717C", Offset = "0xB2717C", VA = "0xB2717C", Slot = "6")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6001DCE")]
		[Address(RVA = "0xB27184", Offset = "0xB27184", VA = "0xB27184", Slot = "7")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x6001DCF")]
		[Address(RVA = "0xB2718C", Offset = "0xB2718C", VA = "0xB2718C", Slot = "8")]
		protected override void OnDestroy()
		{
		}

		[Token(Token = "0x6001DD0")]
		[Address(RVA = "0xB272AC", Offset = "0xB272AC", VA = "0xB272AC")]
		public void UpdateCollider()
		{
		}

		[Token(Token = "0x6001DD1")]
		[Address(RVA = "0xB273A0", Offset = "0xB273A0", VA = "0xB273A0", Slot = "19")]
		protected override void LateRun()
		{
		}

		[Token(Token = "0x6001DD2")]
		[Address(RVA = "0xB27484", Offset = "0xB27484", VA = "0xB27484", Slot = "20")]
		protected override void Build()
		{
		}

		[Token(Token = "0x6001DD3")]
		[Address(RVA = "0xB274D0", Offset = "0xB274D0", VA = "0xB274D0", Slot = "21")]
		protected override void PostBuild()
		{
		}

		[Token(Token = "0x6001DD4")]
		[Address(RVA = "0xB22DB8", Offset = "0xB22DB8", VA = "0xB22DB8", Slot = "29")]
		protected virtual void BuildMesh()
		{
		}

		[Token(Token = "0x6001DD5")]
		[Address(RVA = "0xB274F8", Offset = "0xB274F8", VA = "0xB274F8", Slot = "30")]
		protected virtual void WriteMesh()
		{
		}

		[Token(Token = "0x6001DD6")]
		[Address(RVA = "0xB27860", Offset = "0xB27860", VA = "0xB27860", Slot = "31")]
		protected virtual void AllocateMesh(int vertexCount, int trisCount)
		{
		}

		[Token(Token = "0x6001DD7")]
		[Address(RVA = "0xB279CC", Offset = "0xB279CC", VA = "0xB279CC")]
		protected void ResetUVDistance()
		{
		}

		[Token(Token = "0x6001DD8")]
		[Address(RVA = "0xB27A30", Offset = "0xB27A30", VA = "0xB27A30")]
		protected void AddUVDistance(int sampleIndex)
		{
		}

		[Token(Token = "0x6001DD9")]
		[Address(RVA = "0xB27B40", Offset = "0xB27B40", VA = "0xB27B40")]
		protected void CalculateUVs(double percent, float u)
		{
		}

		[Token(Token = "0x6001DDA")]
		[Address(RVA = "0xB24968", Offset = "0xB24968", VA = "0xB24968")]
		public MeshGenerator()
		{
		}
	}
	[Token(Token = "0x20004F4")]
	public class Node : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20004F5")]
		public class Connection
		{
			[Token(Token = "0x40020D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool invertTangents;

			[Token(Token = "0x40020D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[SerializeField]
			private int _pointIndex;

			[Token(Token = "0x40020D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[SerializeField]
			private SplineComputer _computer;

			[Token(Token = "0x40020D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[SerializeField]
			[HideInInspector]
			internal SplinePoint point;

			[Token(Token = "0x170003DA")]
			public SplineComputer computer
			{
				[Token(Token = "0x6001DF6")]
				[Address(RVA = "0xB297A8", Offset = "0xB297A8", VA = "0xB297A8")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003DB")]
			public int pointIndex
			{
				[Token(Token = "0x6001DF7")]
				[Address(RVA = "0xB297B0", Offset = "0xB297B0", VA = "0xB297B0")]
				get
				{
					return default(int);
				}
			}

			[Token(Token = "0x170003DC")]
			internal bool isValid
			{
				[Token(Token = "0x6001DF8")]
				[Address(RVA = "0xB28D4C", Offset = "0xB28D4C", VA = "0xB28D4C")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6001DF9")]
			[Address(RVA = "0xB29438", Offset = "0xB29438", VA = "0xB29438")]
			internal Connection(SplineComputer comp, int index, SplinePoint inputPoint)
			{
			}
		}

		[Token(Token = "0x20004F6")]
		public enum Type
		{
			[Token(Token = "0x40020DA")]
			Smooth,
			[Token(Token = "0x40020DB")]
			Free
		}

		[Token(Token = "0x40020CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Type type;

		[Token(Token = "0x40020D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		protected Connection[] connections;

		[Token(Token = "0x40020D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private bool _transformSize;

		[Token(Token = "0x40020D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		[SerializeField]
		private bool _transformNormals;

		[Token(Token = "0x40020D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		[SerializeField]
		private bool _transformTangents;

		[Token(Token = "0x40020D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private TS_Transform tsTransform;

		[Token(Token = "0x170003D7")]
		public bool transformNormals
		{
			[Token(Token = "0x6001DDC")]
			[Address(RVA = "0xB27D1C", Offset = "0xB27D1C", VA = "0xB27D1C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001DDD")]
			[Address(RVA = "0xB27D24", Offset = "0xB27D24", VA = "0xB27D24")]
			set
			{
			}
		}

		[Token(Token = "0x170003D8")]
		public bool transformSize
		{
			[Token(Token = "0x6001DDE")]
			[Address(RVA = "0xB27E6C", Offset = "0xB27E6C", VA = "0xB27E6C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001DDF")]
			[Address(RVA = "0xB27E74", Offset = "0xB27E74", VA = "0xB27E74")]
			set
			{
			}
		}

		[Token(Token = "0x170003D9")]
		public bool transformTangents
		{
			[Token(Token = "0x6001DE0")]
			[Address(RVA = "0xB27E90", Offset = "0xB27E90", VA = "0xB27E90")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001DE1")]
			[Address(RVA = "0xB27E98", Offset = "0xB27E98", VA = "0xB27E98")]
			set
			{
			}
		}

		[Token(Token = "0x6001DE2")]
		[Address(RVA = "0xB27EB4", Offset = "0xB27EB4", VA = "0xB27EB4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001DE3")]
		[Address(RVA = "0xB27F28", Offset = "0xB27F28", VA = "0xB27F28")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001DE4")]
		[Address(RVA = "0xB27F6C", Offset = "0xB27F6C", VA = "0xB27F6C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001DE5")]
		[Address(RVA = "0xB27F2C", Offset = "0xB27F2C", VA = "0xB27F2C")]
		private void Run()
		{
		}

		[Token(Token = "0x6001DE6")]
		[Address(RVA = "0xB282F4", Offset = "0xB282F4", VA = "0xB282F4")]
		public SplinePoint GetPoint(int connectionIndex, bool swapTangents)
		{
			return default(SplinePoint);
		}

		[Token(Token = "0x6001DE7")]
		[Address(RVA = "0xB2854C", Offset = "0xB2854C", VA = "0xB2854C")]
		public void SetPoint(int connectionIndex, SplinePoint worldPoint, bool swappedTangents)
		{
		}

		[Token(Token = "0x6001DE8")]
		[Address(RVA = "0xB28C3C", Offset = "0xB28C3C", VA = "0xB28C3C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001DE9")]
		[Address(RVA = "0xB28C40", Offset = "0xB28C40", VA = "0xB28C40")]
		public void ClearConnections()
		{
		}

		[Token(Token = "0x6001DEA")]
		[Address(RVA = "0xB27F70", Offset = "0xB27F70", VA = "0xB27F70")]
		public void UpdateConnectedComputers([Optional] SplineComputer excludeComputer)
		{
		}

		[Token(Token = "0x6001DEB")]
		[Address(RVA = "0xB28FB8", Offset = "0xB28FB8", VA = "0xB28FB8")]
		public void UpdatePoint(SplineComputer computer, int pointIndex, SplinePoint point, bool updatePosition = true)
		{
		}

		[Token(Token = "0x6001DEC")]
		[Address(RVA = "0xB27D40", Offset = "0xB27D40", VA = "0xB27D40")]
		private void UpdatePoints()
		{
		}

		[Token(Token = "0x6001DED")]
		[Address(RVA = "0xB290F8", Offset = "0xB290F8", VA = "0xB290F8")]
		protected void RemoveInvalidConnections()
		{
		}

		[Token(Token = "0x6001DEE")]
		[Address(RVA = "0xB29174", Offset = "0xB29174", VA = "0xB29174", Slot = "4")]
		public virtual void AddConnection(SplineComputer computer, int pointIndex)
		{
		}

		[Token(Token = "0x6001DEF")]
		[Address(RVA = "0xB28AD0", Offset = "0xB28AD0", VA = "0xB28AD0")]
		protected SplinePoint PointToLocal(SplinePoint worldPoint)
		{
			return default(SplinePoint);
		}

		[Token(Token = "0x6001DF0")]
		[Address(RVA = "0xB2840C", Offset = "0xB2840C", VA = "0xB2840C")]
		protected SplinePoint PointToWorld(SplinePoint localPoint)
		{
			return default(SplinePoint);
		}

		[Token(Token = "0x6001DF1")]
		[Address(RVA = "0xB29484", Offset = "0xB29484", VA = "0xB29484", Slot = "5")]
		public virtual void RemoveConnection(SplineComputer computer, int pointIndex)
		{
		}

		[Token(Token = "0x6001DF2")]
		[Address(RVA = "0xB28DDC", Offset = "0xB28DDC", VA = "0xB28DDC")]
		private void RemoveConnection(int index)
		{
		}

		[Token(Token = "0x6001DF3")]
		[Address(RVA = "0xB29604", Offset = "0xB29604", VA = "0xB29604", Slot = "6")]
		public virtual bool HasConnection(SplineComputer computer, int pointIndex)
		{
			return default(bool);
		}

		[Token(Token = "0x6001DF4")]
		[Address(RVA = "0xB29738", Offset = "0xB29738", VA = "0xB29738")]
		public Connection[] GetConnections()
		{
			return null;
		}

		[Token(Token = "0x6001DF5")]
		[Address(RVA = "0xB29740", Offset = "0xB29740", VA = "0xB29740")]
		public Node()
		{
		}
	}
	[Token(Token = "0x20004F7")]
	[AddComponentMenu("Dreamteck/Splines/Object Bender")]
	public class ObjectBender : SplineUser
	{
		[Token(Token = "0x20004F8")]
		public enum Axis
		{
			[Token(Token = "0x40020E8")]
			X,
			[Token(Token = "0x40020E9")]
			Y,
			[Token(Token = "0x40020EA")]
			Z
		}

		[Token(Token = "0x20004F9")]
		public enum NormalMode
		{
			[Token(Token = "0x40020EC")]
			Spline,
			[Token(Token = "0x40020ED")]
			Auto,
			[Token(Token = "0x40020EE")]
			Custom
		}

		[Token(Token = "0x20004FA")]
		public enum ForwardMode
		{
			[Token(Token = "0x40020F0")]
			Spline,
			[Token(Token = "0x40020F1")]
			Custom
		}

		[Serializable]
		[Token(Token = "0x20004FB")]
		public class BendProperty
		{
			[Token(Token = "0x40020F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool enabled;

			[Token(Token = "0x40020F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public TS_Transform transform;

			[Token(Token = "0x40020F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public bool applyRotation;

			[Token(Token = "0x40020F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
			public bool applyScale;

			[Token(Token = "0x40020F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
			public bool generateLightmapUVs;

			[Token(Token = "0x40020F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x23")]
			[HideInInspector]
			[SerializeField]
			private bool _bendMesh;

			[Token(Token = "0x40020F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[HideInInspector]
			[SerializeField]
			private bool _bendSpline;

			[Token(Token = "0x40020F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
			[SerializeField]
			[HideInInspector]
			private bool _bendCollider;

			[Token(Token = "0x40020FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float colliderUpdateDue;

			[Token(Token = "0x40020FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float colliderUpdateRate;

			[Token(Token = "0x40020FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private bool updateCollider;

			[Token(Token = "0x40020FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public Vector3 originalPosition;

			[Token(Token = "0x40020FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public Vector3 originalScale;

			[Token(Token = "0x40020FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			public Quaternion originalRotation;

			[Token(Token = "0x4002100")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public Quaternion parentRotation;

			[Token(Token = "0x4002101")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			public Vector3 positionPercent;

			[Token(Token = "0x4002102")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			public Vector3[] vertexPercents;

			[Token(Token = "0x4002103")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			public Vector3[] normals;

			[Token(Token = "0x4002104")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			public Vector3[] colliderVertexPercents;

			[Token(Token = "0x4002105")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			public Vector3[] colliderNormals;

			[Token(Token = "0x4002106")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			[SerializeField]
			[HideInInspector]
			private Mesh originalMesh;

			[Token(Token = "0x4002107")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			[SerializeField]
			[HideInInspector]
			private Mesh originalColliderMesh;

			[Token(Token = "0x4002108")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			private Spline _originalSpline;

			[Token(Token = "0x4002109")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			[HideInInspector]
			[SerializeField]
			private Mesh destinationMesh;

			[Token(Token = "0x400210A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
			[HideInInspector]
			[SerializeField]
			private Mesh destinationColliderMesh;

			[Token(Token = "0x400210B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			public Spline destinationSpline;

			[Token(Token = "0x400210C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
			public TS_Mesh _editMesh;

			[Token(Token = "0x400210D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
			public TS_Mesh _editColliderMesh;

			[Token(Token = "0x400210E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
			public MeshFilter filter;

			[Token(Token = "0x400210F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
			public MeshCollider collider;

			[Token(Token = "0x4002110")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
			public SplineComputer splineComputer;

			[Token(Token = "0x4002111")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
			public Vector3[] splinePointPercents;

			[Token(Token = "0x4002112")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
			public Vector3[] primaryTangentPercents;

			[Token(Token = "0x4002113")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
			public Vector3[] secondaryTangentPercents;

			[Token(Token = "0x4002114")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
			[SerializeField]
			[HideInInspector]
			private bool parent;

			[Token(Token = "0x170003E3")]
			public bool isValid
			{
				[Token(Token = "0x6001E18")]
				[Address(RVA = "0xB41144", Offset = "0xB41144", VA = "0xB41144")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x170003E4")]
			public bool bendMesh
			{
				[Token(Token = "0x6001E19")]
				[Address(RVA = "0xB411BC", Offset = "0xB411BC", VA = "0xB411BC")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6001E1A")]
				[Address(RVA = "0xB411C4", Offset = "0xB411C4", VA = "0xB411C4")]
				set
				{
				}
			}

			[Token(Token = "0x170003E5")]
			public bool bendCollider
			{
				[Token(Token = "0x6001E1B")]
				[Address(RVA = "0xB413AC", Offset = "0xB413AC", VA = "0xB413AC")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6001E1C")]
				[Address(RVA = "0xB413B4", Offset = "0xB413B4", VA = "0xB413B4")]
				set
				{
				}
			}

			[Token(Token = "0x170003E6")]
			public bool bendSpline
			{
				[Token(Token = "0x6001E1D")]
				[Address(RVA = "0xB41570", Offset = "0xB41570", VA = "0xB41570")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6001E1E")]
				[Address(RVA = "0xB41578", Offset = "0xB41578", VA = "0xB41578")]
				set
				{
				}
			}

			[Token(Token = "0x170003E7")]
			public TS_Mesh editMesh
			{
				[Token(Token = "0x6001E1F")]
				[Address(RVA = "0xB41584", Offset = "0xB41584", VA = "0xB41584")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003E8")]
			public TS_Mesh editColliderMesh
			{
				[Token(Token = "0x6001E20")]
				[Address(RVA = "0xB41678", Offset = "0xB41678", VA = "0xB41678")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003E9")]
			public Spline originalSpline
			{
				[Token(Token = "0x6001E21")]
				[Address(RVA = "0xB41788", Offset = "0xB41788", VA = "0xB41788")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001E22")]
			[Address(RVA = "0xB41A70", Offset = "0xB41A70", VA = "0xB41A70")]
			public BendProperty(Transform t, bool isParent = false)
			{
			}

			[Token(Token = "0x6001E23")]
			[Address(RVA = "0xB421D4", Offset = "0xB421D4", VA = "0xB421D4")]
			public void Revert()
			{
			}

			[Token(Token = "0x6001E24")]
			[Address(RVA = "0xB41328", Offset = "0xB41328", VA = "0xB41328")]
			private void RevertMesh()
			{
			}

			[Token(Token = "0x6001E25")]
			[Address(RVA = "0xB42288", Offset = "0xB42288", VA = "0xB42288")]
			private void RevertTransform()
			{
			}

			[Token(Token = "0x6001E26")]
			[Address(RVA = "0xB414EC", Offset = "0xB414EC", VA = "0xB414EC")]
			private void RevertCollider()
			{
			}

			[Token(Token = "0x6001E27")]
			[Address(RVA = "0xB426EC", Offset = "0xB426EC", VA = "0xB426EC")]
			public void Apply(bool applyTransform)
			{
			}

			[Token(Token = "0x6001E28")]
			[Address(RVA = "0xB429F4", Offset = "0xB429F4", VA = "0xB429F4")]
			public void Update()
			{
			}

			[Token(Token = "0x6001E29")]
			[Address(RVA = "0xB4284C", Offset = "0xB4284C", VA = "0xB4284C")]
			private void ApplyMesh()
			{
			}

			[Token(Token = "0x6001E2A")]
			[Address(RVA = "0xB42A30", Offset = "0xB42A30", VA = "0xB42A30")]
			private void ApplyCollider()
			{
			}

			[Token(Token = "0x6001E2B")]
			[Address(RVA = "0xB429C4", Offset = "0xB429C4", VA = "0xB429C4")]
			private void ApplySpline()
			{
			}
		}

		[Token(Token = "0x40020DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[HideInInspector]
		[SerializeField]
		private bool _bend;

		[Token(Token = "0x40020DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[HideInInspector]
		public BendProperty[] bendProperties;

		[Token(Token = "0x40020DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		[HideInInspector]
		private TS_Bounds bounds;

		[Token(Token = "0x40020DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		[HideInInspector]
		private Axis _axis;

		[Token(Token = "0x40020E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[SerializeField]
		[HideInInspector]
		private NormalMode _normalMode;

		[Token(Token = "0x40020E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		[HideInInspector]
		private ForwardMode _forwardMode;

		[Token(Token = "0x40020E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[HideInInspector]
		[FormerlySerializedAs("_upVector")]
		[SerializeField]
		private Vector3 _customNormal;

		[Token(Token = "0x40020E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[HideInInspector]
		[SerializeField]
		private Vector3 _customForward;

		[Token(Token = "0x40020E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private SplineResult bendResult;

		[Token(Token = "0x40020E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Matrix4x4 normalMatrix;

		[Token(Token = "0x40020E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private Quaternion bendRotation;

		[Token(Token = "0x170003DD")]
		public bool bend
		{
			[Token(Token = "0x6001DFA")]
			[Address(RVA = "0xB297B8", Offset = "0xB297B8", VA = "0xB297B8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001DFB")]
			[Address(RVA = "0xB297C0", Offset = "0xB297C0", VA = "0xB297C0")]
			set
			{
			}
		}

		[Token(Token = "0x170003DE")]
		public Axis axis
		{
			[Token(Token = "0x6001DFC")]
			[Address(RVA = "0xB29A18", Offset = "0xB29A18", VA = "0xB29A18")]
			get
			{
				return default(Axis);
			}
			[Token(Token = "0x6001DFD")]
			[Address(RVA = "0xB29A20", Offset = "0xB29A20", VA = "0xB29A20")]
			set
			{
			}
		}

		[Token(Token = "0x170003DF")]
		public NormalMode upMode
		{
			[Token(Token = "0x6001DFE")]
			[Address(RVA = "0xB29AE0", Offset = "0xB29AE0", VA = "0xB29AE0")]
			get
			{
				return default(NormalMode);
			}
			[Token(Token = "0x6001DFF")]
			[Address(RVA = "0xB29AE8", Offset = "0xB29AE8", VA = "0xB29AE8")]
			set
			{
			}
		}

		[Token(Token = "0x170003E0")]
		public Vector3 customNormal
		{
			[Token(Token = "0x6001E00")]
			[Address(RVA = "0xB29BA0", Offset = "0xB29BA0", VA = "0xB29BA0")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001E01")]
			[Address(RVA = "0xB29BAC", Offset = "0xB29BAC", VA = "0xB29BAC")]
			set
			{
			}
		}

		[Token(Token = "0x170003E1")]
		public ForwardMode forwardMode
		{
			[Token(Token = "0x6001E02")]
			[Address(RVA = "0xB29CAC", Offset = "0xB29CAC", VA = "0xB29CAC")]
			get
			{
				return default(ForwardMode);
			}
			[Token(Token = "0x6001E03")]
			[Address(RVA = "0xB29CB4", Offset = "0xB29CB4", VA = "0xB29CB4")]
			set
			{
			}
		}

		[Token(Token = "0x170003E2")]
		public Vector3 customForward
		{
			[Token(Token = "0x6001E04")]
			[Address(RVA = "0xB29D6C", Offset = "0xB29D6C", VA = "0xB29D6C")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001E05")]
			[Address(RVA = "0xB29D78", Offset = "0xB29D78", VA = "0xB29D78")]
			set
			{
			}
		}

		[Token(Token = "0x6001E06")]
		[Address(RVA = "0xB29E78", Offset = "0xB29E78", VA = "0xB29E78")]
		private void GetTransformsRecursively(Transform current, ref List<Transform> transformList)
		{
		}

		[Token(Token = "0x6001E07")]
		[Address(RVA = "0xB2A1D0", Offset = "0xB2A1D0", VA = "0xB2A1D0")]
		private void GetObjects()
		{
		}

		[Token(Token = "0x6001E08")]
		[Address(RVA = "0xB2A624", Offset = "0xB2A624", VA = "0xB2A624")]
		public TS_Bounds GetBounds()
		{
			return null;
		}

		[Token(Token = "0x6001E09")]
		[Address(RVA = "0xB2A318", Offset = "0xB2A318", VA = "0xB2A318")]
		private void CreateProperty(ref BendProperty property, Transform t)
		{
		}

		[Token(Token = "0x6001E0A")]
		[Address(RVA = "0xB2A6E8", Offset = "0xB2A6E8", VA = "0xB2A6E8")]
		private void CalculateBounds()
		{
		}

		[Token(Token = "0x6001E0B")]
		[Address(RVA = "0xB2A878", Offset = "0xB2A878", VA = "0xB2A878")]
		private void CalculatePropertyBounds(ref BendProperty property)
		{
		}

		[Token(Token = "0x6001E0C")]
		[Address(RVA = "0xB2AD40", Offset = "0xB2AD40", VA = "0xB2AD40")]
		public void CalculatePercents(BendProperty property)
		{
		}

		[Token(Token = "0x6001E0D")]
		[Address(RVA = "0xB299B8", Offset = "0xB299B8", VA = "0xB299B8")]
		private void Revert()
		{
		}

		[Token(Token = "0x6001E0E")]
		[Address(RVA = "0xB29814", Offset = "0xB29814", VA = "0xB29814")]
		public void UpdateReferences()
		{
		}

		[Token(Token = "0x6001E0F")]
		[Address(RVA = "0xB2B380", Offset = "0xB2B380", VA = "0xB2B380")]
		private void GetBendResult(Vector3 percentage)
		{
		}

		[Token(Token = "0x6001E10")]
		[Address(RVA = "0xB2B24C", Offset = "0xB2B24C", VA = "0xB2B24C")]
		private Vector3 GetPercentage(Vector3 point)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001E11")]
		[Address(RVA = "0xB2B900", Offset = "0xB2B900", VA = "0xB2B900", Slot = "20")]
		protected override void Build()
		{
		}

		[Token(Token = "0x6001E12")]
		[Address(RVA = "0xB2B2FC", Offset = "0xB2B2FC", VA = "0xB2B2FC")]
		private void Bend()
		{
		}

		[Token(Token = "0x6001E13")]
		[Address(RVA = "0xB2B92C", Offset = "0xB2B92C", VA = "0xB2B92C")]
		public void BendObject(BendProperty p)
		{
		}

		[Token(Token = "0x6001E14")]
		[Address(RVA = "0xB2BFE0", Offset = "0xB2BFE0", VA = "0xB2BFE0")]
		private void BendMesh(Vector3[] vertexPercents, Vector3[] originalNormals, TS_Mesh mesh, Matrix4x4 worldToLocalMatrix)
		{
		}

		[Token(Token = "0x6001E15")]
		[Address(RVA = "0xB2C1B4", Offset = "0xB2C1B4", VA = "0xB2C1B4", Slot = "21")]
		protected override void PostBuild()
		{
		}

		[Token(Token = "0x6001E16")]
		[Address(RVA = "0xB2C2F0", Offset = "0xB2C2F0", VA = "0xB2C2F0", Slot = "19")]
		protected override void LateRun()
		{
		}

		[Token(Token = "0x6001E17")]
		[Address(RVA = "0xB2C358", Offset = "0xB2C358", VA = "0xB2C358")]
		public ObjectBender()
		{
		}
	}
	[Token(Token = "0x20004FC")]
	[AddComponentMenu("Dreamteck/Splines/Object Controller")]
	public class ObjectController : SplineUser
	{
		[Serializable]
		[Token(Token = "0x20004FD")]
		internal class ObjectControl
		{
			[Token(Token = "0x4002132")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public GameObject gameObject;

			[Token(Token = "0x4002133")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Vector3 position;

			[Token(Token = "0x4002134")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public Quaternion rotation;

			[Token(Token = "0x4002135")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public Vector3 scale;

			[Token(Token = "0x4002136")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public bool active;

			[Token(Token = "0x4002137")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			public Vector3 baseScale;

			[Token(Token = "0x170003FF")]
			public bool isNull
			{
				[Token(Token = "0x6001E62")]
				[Address(RVA = "0xB4513C", Offset = "0xB4513C", VA = "0xB4513C")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x17000400")]
			public Transform transform
			{
				[Token(Token = "0x6001E63")]
				[Address(RVA = "0xB435D4", Offset = "0xB435D4", VA = "0xB435D4")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001E64")]
			[Address(RVA = "0xB43D44", Offset = "0xB43D44", VA = "0xB43D44")]
			public ObjectControl(GameObject input)
			{
			}

			[Token(Token = "0x6001E65")]
			[Address(RVA = "0xB4365C", Offset = "0xB4365C", VA = "0xB4365C")]
			public void Destroy()
			{
			}

			[Token(Token = "0x6001E66")]
			[Address(RVA = "0xB436EC", Offset = "0xB436EC", VA = "0xB436EC")]
			public void DestroyImmediate()
			{
			}

			[Token(Token = "0x6001E67")]
			[Address(RVA = "0xB44E9C", Offset = "0xB44E9C", VA = "0xB44E9C")]
			public void Apply()
			{
			}
		}

		[Token(Token = "0x20004FE")]
		public enum ObjectMethod
		{
			[Token(Token = "0x4002139")]
			Instantiate,
			[Token(Token = "0x400213A")]
			GetChildren
		}

		[Token(Token = "0x20004FF")]
		public enum Positioning
		{
			[Token(Token = "0x400213C")]
			Stretch,
			[Token(Token = "0x400213D")]
			Clip
		}

		[Token(Token = "0x2000500")]
		public enum Iteration
		{
			[Token(Token = "0x400213F")]
			Ordered,
			[Token(Token = "0x4002140")]
			Random
		}

		[Token(Token = "0x2000501")]
		[CompilerGenerated]
		private sealed class <InstantiateAllWithDelay>d__101 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002141")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002142")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002143")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ObjectController <>4__this;

			[Token(Token = "0x4002144")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <i>5__2;

			[Token(Token = "0x17000401")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001E6B")]
				[Address(RVA = "0xB452DC", Offset = "0xB452DC", VA = "0xB452DC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000402")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001E6D")]
				[Address(RVA = "0xB45324", Offset = "0xB45324", VA = "0xB45324", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001E68")]
			[Address(RVA = "0xB44008", Offset = "0xB44008", VA = "0xB44008")]
			[DebuggerHidden]
			public <InstantiateAllWithDelay>d__101(int <>1__state)
			{
			}

			[Token(Token = "0x6001E69")]
			[Address(RVA = "0xB4519C", Offset = "0xB4519C", VA = "0xB4519C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001E6A")]
			[Address(RVA = "0xB451A0", Offset = "0xB451A0", VA = "0xB451A0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001E6C")]
			[Address(RVA = "0xB452E4", Offset = "0xB452E4", VA = "0xB452E4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002115")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[HideInInspector]
		[SerializeField]
		public GameObject[] objects;

		[Token(Token = "0x4002116")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[HideInInspector]
		[SerializeField]
		private float _positionOffset;

		[Token(Token = "0x4002117")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[HideInInspector]
		[SerializeField]
		private int _spawnCount;

		[Token(Token = "0x4002118")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[HideInInspector]
		[SerializeField]
		private Positioning _objectPositioning;

		[Token(Token = "0x4002119")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[SerializeField]
		[HideInInspector]
		private Iteration _iteration;

		[Token(Token = "0x400211A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		[HideInInspector]
		private int _randomSeed;

		[Token(Token = "0x400211B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[SerializeField]
		[HideInInspector]
		private Vector2 _randomSize;

		[Token(Token = "0x400211C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[SerializeField]
		[HideInInspector]
		private Vector3 _offset;

		[Token(Token = "0x400211D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		[HideInInspector]
		private bool _offsetUseWorldCoords;

		[Token(Token = "0x400211E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[SerializeField]
		[HideInInspector]
		private Vector3 _minRotationOffset;

		[Token(Token = "0x400211F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[HideInInspector]
		[SerializeField]
		private Vector3 _maxRotationOffset;

		[Token(Token = "0x4002120")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		[SerializeField]
		[HideInInspector]
		private Vector3 _minScaleMultiplier;

		[Token(Token = "0x4002121")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[SerializeField]
		[HideInInspector]
		private Vector3 _maxScaleMultiplier;

		[Token(Token = "0x4002122")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		[SerializeField]
		[HideInInspector]
		private bool _randomizeOffset;

		[Token(Token = "0x4002123")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10D")]
		[SerializeField]
		[HideInInspector]
		private bool _useRandomOffsetRotation;

		[Token(Token = "0x4002124")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10E")]
		[SerializeField]
		[HideInInspector]
		private bool _shellOffset;

		[Token(Token = "0x4002125")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10F")]
		[HideInInspector]
		[SerializeField]
		private bool _randomOffset;

		[Token(Token = "0x4002126")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[HideInInspector]
		[SerializeField]
		private bool _applyRotation;

		[Token(Token = "0x4002127")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x111")]
		[HideInInspector]
		[SerializeField]
		private bool _applyScale;

		[Token(Token = "0x4002128")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		[HideInInspector]
		[SerializeField]
		private ObjectMethod _objectMethod;

		[Token(Token = "0x4002129")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[HideInInspector]
		public bool delayedSpawn;

		[Token(Token = "0x400212A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		[HideInInspector]
		public float spawnDelay;

		[Token(Token = "0x400212B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[HideInInspector]
		[SerializeField]
		private int lastChildCount;

		[Token(Token = "0x400212C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[HideInInspector]
		[SerializeField]
		private ObjectControl[] spawned;

		[Token(Token = "0x400212D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private SplineResult evaluateResult;

		[Token(Token = "0x400212E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private System.Random randomizer;

		[Token(Token = "0x400212F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private System.Random randomizer2;

		[Token(Token = "0x4002130")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private System.Random rotationRandomizer;

		[Token(Token = "0x4002131")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private System.Random scaleRandomizer;

		[Token(Token = "0x170003EA")]
		public ObjectMethod objectMethod
		{
			[Token(Token = "0x6001E2C")]
			[Address(RVA = "0xB42BF4", Offset = "0xB42BF4", VA = "0xB42BF4")]
			get
			{
				return default(ObjectMethod);
			}
			[Token(Token = "0x6001E2D")]
			[Address(RVA = "0xB42BFC", Offset = "0xB42BFC", VA = "0xB42BFC")]
			set
			{
			}
		}

		[Token(Token = "0x170003EB")]
		public int spawnCount
		{
			[Token(Token = "0x6001E2E")]
			[Address(RVA = "0xB42CC8", Offset = "0xB42CC8", VA = "0xB42CC8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001E2F")]
			[Address(RVA = "0xB42CD0", Offset = "0xB42CD0", VA = "0xB42CD0")]
			set
			{
			}
		}

		[Token(Token = "0x170003EC")]
		public Positioning objectPositioning
		{
			[Token(Token = "0x6001E30")]
			[Address(RVA = "0xB42F18", Offset = "0xB42F18", VA = "0xB42F18")]
			get
			{
				return default(Positioning);
			}
			[Token(Token = "0x6001E31")]
			[Address(RVA = "0xB42F20", Offset = "0xB42F20", VA = "0xB42F20")]
			set
			{
			}
		}

		[Token(Token = "0x170003ED")]
		public Iteration iteration
		{
			[Token(Token = "0x6001E32")]
			[Address(RVA = "0xB42F44", Offset = "0xB42F44", VA = "0xB42F44")]
			get
			{
				return default(Iteration);
			}
			[Token(Token = "0x6001E33")]
			[Address(RVA = "0xB42F4C", Offset = "0xB42F4C", VA = "0xB42F4C")]
			set
			{
			}
		}

		[Token(Token = "0x170003EE")]
		public int randomSeed
		{
			[Token(Token = "0x6001E34")]
			[Address(RVA = "0xB42F70", Offset = "0xB42F70", VA = "0xB42F70")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001E35")]
			[Address(RVA = "0xB42F78", Offset = "0xB42F78", VA = "0xB42F78")]
			set
			{
			}
		}

		[Token(Token = "0x170003EF")]
		public Vector3 offset
		{
			[Token(Token = "0x6001E36")]
			[Address(RVA = "0xB42F9C", Offset = "0xB42F9C", VA = "0xB42F9C")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001E37")]
			[Address(RVA = "0xB42FA8", Offset = "0xB42FA8", VA = "0xB42FA8")]
			set
			{
			}
		}

		[Token(Token = "0x170003F0")]
		public bool offsetUseWorldCoords
		{
			[Token(Token = "0x6001E38")]
			[Address(RVA = "0xB42FFC", Offset = "0xB42FFC", VA = "0xB42FFC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001E39")]
			[Address(RVA = "0xB43004", Offset = "0xB43004", VA = "0xB43004")]
			set
			{
			}
		}

		[Token(Token = "0x170003F1")]
		public Vector3 minRotationOffset
		{
			[Token(Token = "0x6001E3A")]
			[Address(RVA = "0xB4302C", Offset = "0xB4302C", VA = "0xB4302C")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001E3B")]
			[Address(RVA = "0xB43038", Offset = "0xB43038", VA = "0xB43038")]
			set
			{
			}
		}

		[Token(Token = "0x170003F2")]
		public Vector3 maxRotationOffset
		{
			[Token(Token = "0x6001E3C")]
			[Address(RVA = "0xB4308C", Offset = "0xB4308C", VA = "0xB4308C")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001E3D")]
			[Address(RVA = "0xB43098", Offset = "0xB43098", VA = "0xB43098")]
			set
			{
			}
		}

		[Token(Token = "0x170003F3")]
		public Vector3 rotationOffset
		{
			[Token(Token = "0x6001E3E")]
			[Address(RVA = "0xB430EC", Offset = "0xB430EC", VA = "0xB430EC")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001E3F")]
			[Address(RVA = "0xB4311C", Offset = "0xB4311C", VA = "0xB4311C")]
			set
			{
			}
		}

		[Token(Token = "0x170003F4")]
		public Vector3 minScaleMultiplier
		{
			[Token(Token = "0x6001E40")]
			[Address(RVA = "0xB431A4", Offset = "0xB431A4", VA = "0xB431A4")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001E41")]
			[Address(RVA = "0xB431B0", Offset = "0xB431B0", VA = "0xB431B0")]
			set
			{
			}
		}

		[Token(Token = "0x170003F5")]
		public Vector3 maxScaleMultiplier
		{
			[Token(Token = "0x6001E42")]
			[Address(RVA = "0xB43204", Offset = "0xB43204", VA = "0xB43204")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001E43")]
			[Address(RVA = "0xB43214", Offset = "0xB43214", VA = "0xB43214")]
			set
			{
			}
		}

		[Token(Token = "0x170003F6")]
		public Vector3 scaleMultiplier
		{
			[Token(Token = "0x6001E44")]
			[Address(RVA = "0xB43270", Offset = "0xB43270", VA = "0xB43270")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001E45")]
			[Address(RVA = "0xB432A0", Offset = "0xB432A0", VA = "0xB432A0")]
			set
			{
			}
		}

		[Token(Token = "0x170003F7")]
		public bool randomizeOffset
		{
			[Token(Token = "0x6001E46")]
			[Address(RVA = "0xB43330", Offset = "0xB43330", VA = "0xB43330")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001E47")]
			[Address(RVA = "0xB43338", Offset = "0xB43338", VA = "0xB43338")]
			set
			{
			}
		}

		[Token(Token = "0x170003F8")]
		public bool useRandomOffsetRotation
		{
			[Token(Token = "0x6001E48")]
			[Address(RVA = "0xB43360", Offset = "0xB43360", VA = "0xB43360")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001E49")]
			[Address(RVA = "0xB43368", Offset = "0xB43368", VA = "0xB43368")]
			set
			{
			}
		}

		[Token(Token = "0x170003F9")]
		public bool shellOffset
		{
			[Token(Token = "0x6001E4A")]
			[Address(RVA = "0xB43390", Offset = "0xB43390", VA = "0xB43390")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001E4B")]
			[Address(RVA = "0xB43398", Offset = "0xB43398", VA = "0xB43398")]
			set
			{
			}
		}

		[Token(Token = "0x170003FA")]
		public bool randomOffset
		{
			[Token(Token = "0x6001E4C")]
			[Address(RVA = "0xB433C0", Offset = "0xB433C0", VA = "0xB433C0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001E4D")]
			[Address(RVA = "0xB433C8", Offset = "0xB433C8", VA = "0xB433C8")]
			set
			{
			}
		}

		[Token(Token = "0x170003FB")]
		public bool applyRotation
		{
			[Token(Token = "0x6001E4E")]
			[Address(RVA = "0xB433F0", Offset = "0xB433F0", VA = "0xB433F0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001E4F")]
			[Address(RVA = "0xB433F8", Offset = "0xB433F8", VA = "0xB433F8")]
			set
			{
			}
		}

		[Token(Token = "0x170003FC")]
		public bool applyScale
		{
			[Token(Token = "0x6001E50")]
			[Address(RVA = "0xB43420", Offset = "0xB43420", VA = "0xB43420")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001E51")]
			[Address(RVA = "0xB43428", Offset = "0xB43428", VA = "0xB43428")]
			set
			{
			}
		}

		[Token(Token = "0x170003FD")]
		public Vector2 randomSize
		{
			[Token(Token = "0x6001E52")]
			[Address(RVA = "0xB43450", Offset = "0xB43450", VA = "0xB43450")]
			get
			{
				return default(Vector2);
			}
			[Token(Token = "0x6001E53")]
			[Address(RVA = "0xB43458", Offset = "0xB43458", VA = "0xB43458")]
			set
			{
			}
		}

		[Token(Token = "0x170003FE")]
		public float positionOffset
		{
			[Token(Token = "0x6001E54")]
			[Address(RVA = "0xB43498", Offset = "0xB43498", VA = "0xB43498")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001E55")]
			[Address(RVA = "0xB434A0", Offset = "0xB434A0", VA = "0xB434A0")]
			set
			{
			}
		}

		[Token(Token = "0x6001E56")]
		[Address(RVA = "0xB434C4", Offset = "0xB434C4", VA = "0xB434C4")]
		public void Clear()
		{
		}

		[Token(Token = "0x6001E57")]
		[Address(RVA = "0xB42D04", Offset = "0xB42D04", VA = "0xB42D04")]
		private void Remove()
		{
		}

		[Token(Token = "0x6001E58")]
		[Address(RVA = "0xB4377C", Offset = "0xB4377C", VA = "0xB4377C")]
		public void GetAll()
		{
		}

		[Token(Token = "0x6001E59")]
		[Address(RVA = "0xB42C1C", Offset = "0xB42C1C", VA = "0xB42C1C")]
		public void Spawn()
		{
		}

		[Token(Token = "0x6001E5A")]
		[Address(RVA = "0xB43F90", Offset = "0xB43F90", VA = "0xB43F90", Slot = "19")]
		protected override void LateRun()
		{
		}

		[Token(Token = "0x6001E5B")]
		[Address(RVA = "0xB43E6C", Offset = "0xB43E6C", VA = "0xB43E6C")]
		[IteratorStateMachine(typeof(<InstantiateAllWithDelay>d__101))]
		private IEnumerator InstantiateAllWithDelay()
		{
			return null;
		}

		[Token(Token = "0x6001E5C")]
		[Address(RVA = "0xB43ED4", Offset = "0xB43ED4", VA = "0xB43ED4")]
		private void InstantiateAll()
		{
		}

		[Token(Token = "0x6001E5D")]
		[Address(RVA = "0xB44030", Offset = "0xB44030", VA = "0xB44030")]
		private void InstantiateSingle()
		{
		}

		[Token(Token = "0x6001E5E")]
		[Address(RVA = "0xB44320", Offset = "0xB44320", VA = "0xB44320", Slot = "20")]
		protected override void Build()
		{
		}

		[Token(Token = "0x6001E5F")]
		[Address(RVA = "0xB44E38", Offset = "0xB44E38", VA = "0xB44E38", Slot = "21")]
		protected override void PostBuild()
		{
		}

		[Token(Token = "0x6001E60")]
		[Address(RVA = "0xB44F78", Offset = "0xB44F78", VA = "0xB44F78", Slot = "8")]
		protected override void OnDestroy()
		{
		}

		[Token(Token = "0x6001E61")]
		[Address(RVA = "0xB44F80", Offset = "0xB44F80", VA = "0xB44F80")]
		public ObjectController()
		{
		}
	}
	[Token(Token = "0x2000502")]
	[ExecuteInEditMode]
	[AddComponentMenu("Dreamteck/Splines/Particle Controller")]
	public class ParticleController : SplineUser
	{
		[Token(Token = "0x2000503")]
		public enum EmitPoint
		{
			[Token(Token = "0x4002154")]
			Beginning,
			[Token(Token = "0x4002155")]
			Ending,
			[Token(Token = "0x4002156")]
			Random,
			[Token(Token = "0x4002157")]
			Ordered
		}

		[Token(Token = "0x2000504")]
		public enum MotionType
		{
			[Token(Token = "0x4002159")]
			None,
			[Token(Token = "0x400215A")]
			UseParticleSystem,
			[Token(Token = "0x400215B")]
			FollowForward,
			[Token(Token = "0x400215C")]
			FollowBackward,
			[Token(Token = "0x400215D")]
			ByNormal,
			[Token(Token = "0x400215E")]
			ByNormalRandomized
		}

		[Token(Token = "0x2000505")]
		public enum Wrap
		{
			[Token(Token = "0x4002160")]
			Default,
			[Token(Token = "0x4002161")]
			Loop
		}

		[Token(Token = "0x2000506")]
		public class Particle
		{
			[Token(Token = "0x4002162")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal Vector2 startOffset;

			[Token(Token = "0x4002163")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal Vector2 endOffset;

			[Token(Token = "0x4002164")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal float cycleSpeed;

			[Token(Token = "0x4002165")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			internal float startLifetime;

			[Token(Token = "0x4002166")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal Color startColor;

			[Token(Token = "0x4002167")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			internal float remainingLifetime;

			[Token(Token = "0x4002168")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			internal float lifeTime;

			[Token(Token = "0x4002169")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			internal double startPercent;

			[Token(Token = "0x6001E76")]
			[Address(RVA = "0xB46C5C", Offset = "0xB46C5C", VA = "0xB46C5C")]
			internal double GetSplinePercent(Wrap wrap, ParticleSystem.Particle particle)
			{
				return default(double);
			}

			[Token(Token = "0x6001E77")]
			[Address(RVA = "0xB45800", Offset = "0xB45800", VA = "0xB45800")]
			public Particle()
			{
			}
		}

		[Token(Token = "0x4002145")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[HideInInspector]
		public ParticleSystem _particleSystem;

		[Token(Token = "0x4002146")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[HideInInspector]
		public bool volumetric;

		[Token(Token = "0x4002147")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB1")]
		[HideInInspector]
		public bool emitFromShell;

		[Token(Token = "0x4002148")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[HideInInspector]
		public Vector2 scale;

		[Token(Token = "0x4002149")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[HideInInspector]
		public EmitPoint emitPoint;

		[Token(Token = "0x400214A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[HideInInspector]
		public MotionType motionType;

		[Token(Token = "0x400214B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[HideInInspector]
		public Wrap wrapMode;

		[Token(Token = "0x400214C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[HideInInspector]
		public float minCycles;

		[Token(Token = "0x400214D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[HideInInspector]
		public float maxCycles;

		[Token(Token = "0x400214E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private ParticleSystem.Particle[] particles;

		[Token(Token = "0x400214F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Particle[] controllers;

		[Token(Token = "0x4002150")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private int particleCount;

		[Token(Token = "0x4002151")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private int birthIndex;

		[Token(Token = "0x4002152")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private SplineResult evalResult;

		[Token(Token = "0x6001E6E")]
		[Address(RVA = "0xB4532C", Offset = "0xB4532C", VA = "0xB4532C", Slot = "19")]
		protected override void LateRun()
		{
		}

		[Token(Token = "0x6001E6F")]
		[Address(RVA = "0xB45798", Offset = "0xB45798", VA = "0xB45798")]
		private void TransformParticle(ref ParticleSystem.Particle particle, Transform trs)
		{
		}

		[Token(Token = "0x6001E70")]
		[Address(RVA = "0xB46450", Offset = "0xB46450", VA = "0xB46450")]
		private void InverseTransformParticle(ref ParticleSystem.Particle particle, Transform trs)
		{
		}

		[Token(Token = "0x6001E71")]
		[Address(RVA = "0xB46BBC", Offset = "0xB46BBC", VA = "0xB46BBC", Slot = "5")]
		protected override void Reset()
		{
		}

		[Token(Token = "0x6001E72")]
		[Address(RVA = "0xB464B8", Offset = "0xB464B8", VA = "0xB464B8")]
		private void HandleParticle(int index)
		{
		}

		[Token(Token = "0x6001E73")]
		[Address(RVA = "0xB46D90", Offset = "0xB46D90", VA = "0xB46D90")]
		private void OnParticleDie(int index)
		{
		}

		[Token(Token = "0x6001E74")]
		[Address(RVA = "0xB4586C", Offset = "0xB4586C", VA = "0xB4586C")]
		private void OnParticleBorn(int index)
		{
		}

		[Token(Token = "0x6001E75")]
		[Address(RVA = "0xB46D94", Offset = "0xB46D94", VA = "0xB46D94")]
		public ParticleController()
		{
		}
	}
	[Token(Token = "0x2000507")]
	[RequireComponent(typeof(MeshRenderer))]
	[RequireComponent(typeof(MeshFilter))]
	[AddComponentMenu("Dreamteck/Splines/Path Generator")]
	public class PathGenerator : MeshGenerator
	{
		[Token(Token = "0x400216A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[HideInInspector]
		[SerializeField]
		private int _slices;

		[Token(Token = "0x400216B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		[SerializeField]
		[HideInInspector]
		private bool _useShapeCurve;

		[Token(Token = "0x400216C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[HideInInspector]
		[SerializeField]
		private AnimationCurve _shape;

		[Token(Token = "0x400216D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		[HideInInspector]
		[SerializeField]
		private AnimationCurve _lastShape;

		[Token(Token = "0x400216E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		[HideInInspector]
		[SerializeField]
		private float _shapeExposure;

		[Token(Token = "0x17000403")]
		public int slices
		{
			[Token(Token = "0x6001E78")]
			[Address(RVA = "0xB46E98", Offset = "0xB46E98", VA = "0xB46E98")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001E79")]
			[Address(RVA = "0xB46EA0", Offset = "0xB46EA0", VA = "0xB46EA0")]
			set
			{
			}
		}

		[Token(Token = "0x17000404")]
		public bool useShapeCurve
		{
			[Token(Token = "0x6001E7A")]
			[Address(RVA = "0xB46ECC", Offset = "0xB46ECC", VA = "0xB46ECC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001E7B")]
			[Address(RVA = "0xB46ED4", Offset = "0xB46ED4", VA = "0xB46ED4")]
			set
			{
			}
		}

		[Token(Token = "0x17000405")]
		public float shapeExposure
		{
			[Token(Token = "0x6001E7C")]
			[Address(RVA = "0xB47004", Offset = "0xB47004", VA = "0xB47004")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001E7D")]
			[Address(RVA = "0xB4700C", Offset = "0xB4700C", VA = "0xB4700C")]
			set
			{
			}
		}

		[Token(Token = "0x17000406")]
		public AnimationCurve shape
		{
			[Token(Token = "0x6001E7E")]
			[Address(RVA = "0xB470C0", Offset = "0xB470C0", VA = "0xB470C0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001E7F")]
			[Address(RVA = "0xB470C8", Offset = "0xB470C8", VA = "0xB470C8")]
			set
			{
			}
		}

		[Token(Token = "0x6001E80")]
		[Address(RVA = "0xB47428", Offset = "0xB47428", VA = "0xB47428", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6001E81")]
		[Address(RVA = "0xB47488", Offset = "0xB47488", VA = "0xB47488", Slot = "5")]
		protected override void Reset()
		{
		}

		[Token(Token = "0x6001E82")]
		[Address(RVA = "0xB47490", Offset = "0xB47490", VA = "0xB47490", Slot = "29")]
		protected override void BuildMesh()
		{
		}

		[Token(Token = "0x6001E83")]
		[Address(RVA = "0xB47560", Offset = "0xB47560", VA = "0xB47560")]
		private void GenerateVertices()
		{
		}

		[Token(Token = "0x6001E84")]
		[Address(RVA = "0xB48538", Offset = "0xB48538", VA = "0xB48538")]
		public PathGenerator()
		{
		}
	}
	[Token(Token = "0x2000508")]
	[RequireComponent(typeof(PolygonCollider2D))]
	[AddComponentMenu("Dreamteck/Splines/Polygon Collider Generator")]
	public class PolygonColliderGenerator : SplineUser
	{
		[Token(Token = "0x2000509")]
		public enum Type
		{
			[Token(Token = "0x4002178")]
			Path,
			[Token(Token = "0x4002179")]
			Shape
		}

		[Token(Token = "0x400216F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		[HideInInspector]
		private Type _type;

		[Token(Token = "0x4002170")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[HideInInspector]
		[SerializeField]
		private float _size;

		[Token(Token = "0x4002171")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		[HideInInspector]
		private float _offset;

		[Token(Token = "0x4002172")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		[HideInInspector]
		protected PolygonCollider2D polygonCollider;

		[Token(Token = "0x4002173")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		[HideInInspector]
		protected Vector2[] vertices;

		[Token(Token = "0x4002174")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[HideInInspector]
		public float updateRate;

		[Token(Token = "0x4002175")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		protected float lastUpdateTime;

		[Token(Token = "0x4002176")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private bool updateCollider;

		[Token(Token = "0x17000407")]
		public Type type
		{
			[Token(Token = "0x6001E85")]
			[Address(RVA = "0xB485A0", Offset = "0xB485A0", VA = "0xB485A0")]
			get
			{
				return default(Type);
			}
			[Token(Token = "0x6001E86")]
			[Address(RVA = "0xB485A8", Offset = "0xB485A8", VA = "0xB485A8")]
			set
			{
			}
		}

		[Token(Token = "0x17000408")]
		public float size
		{
			[Token(Token = "0x6001E87")]
			[Address(RVA = "0xB485CC", Offset = "0xB485CC", VA = "0xB485CC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001E88")]
			[Address(RVA = "0xB485D4", Offset = "0xB485D4", VA = "0xB485D4")]
			set
			{
			}
		}

		[Token(Token = "0x17000409")]
		public float offset
		{
			[Token(Token = "0x6001E89")]
			[Address(RVA = "0xB485F8", Offset = "0xB485F8", VA = "0xB485F8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001E8A")]
			[Address(RVA = "0xB48600", Offset = "0xB48600", VA = "0xB48600")]
			set
			{
			}
		}

		[Token(Token = "0x6001E8B")]
		[Address(RVA = "0xB48624", Offset = "0xB48624", VA = "0xB48624", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6001E8C")]
		[Address(RVA = "0xB48680", Offset = "0xB48680", VA = "0xB48680", Slot = "5")]
		protected override void Reset()
		{
		}

		[Token(Token = "0x6001E8D")]
		[Address(RVA = "0xB48688", Offset = "0xB48688", VA = "0xB48688", Slot = "6")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6001E8E")]
		[Address(RVA = "0xB48690", Offset = "0xB48690", VA = "0xB48690", Slot = "7")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x6001E8F")]
		[Address(RVA = "0xB48698", Offset = "0xB48698", VA = "0xB48698", Slot = "8")]
		protected override void OnDestroy()
		{
		}

		[Token(Token = "0x6001E90")]
		[Address(RVA = "0xB486A0", Offset = "0xB486A0", VA = "0xB486A0", Slot = "19")]
		protected override void LateRun()
		{
		}

		[Token(Token = "0x6001E91")]
		[Address(RVA = "0xB48768", Offset = "0xB48768", VA = "0xB48768", Slot = "20")]
		protected override void Build()
		{
		}

		[Token(Token = "0x6001E92")]
		[Address(RVA = "0xB48DE8", Offset = "0xB48DE8", VA = "0xB48DE8", Slot = "21")]
		protected override void PostBuild()
		{
		}

		[Token(Token = "0x6001E93")]
		[Address(RVA = "0xB487C4", Offset = "0xB487C4", VA = "0xB487C4")]
		private void GeneratePath()
		{
		}

		[Token(Token = "0x6001E94")]
		[Address(RVA = "0xB48B60", Offset = "0xB48B60", VA = "0xB48B60")]
		private void GenerateShape()
		{
		}

		[Token(Token = "0x6001E95")]
		[Address(RVA = "0xB48F20", Offset = "0xB48F20", VA = "0xB48F20")]
		public PolygonColliderGenerator()
		{
		}
	}
	[Token(Token = "0x200050A")]
	public delegate void EmptySplineHandler();
	[Token(Token = "0x200050B")]
	[AddComponentMenu("Dreamteck/Splines/Spline Computer")]
	public class SplineComputer : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200050C")]
		public class NodeLink
		{
			[Token(Token = "0x4002185")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Node node;

			[Token(Token = "0x4002186")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int pointIndex;

			[Token(Token = "0x6001EF7")]
			[Address(RVA = "0xB4A248", Offset = "0xB4A248", VA = "0xB4A248")]
			public NodeLink()
			{
			}
		}

		[Token(Token = "0x200050D")]
		public enum Space
		{
			[Token(Token = "0x4002188")]
			World,
			[Token(Token = "0x4002189")]
			Local
		}

		[Serializable]
		[Token(Token = "0x200050E")]
		public class Morph
		{
			[Serializable]
			[Token(Token = "0x200050F")]
			internal class SplineMorphState
			{
				[Token(Token = "0x400218D")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				public SplinePoint[] points;

				[Token(Token = "0x400218E")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				public float percent;

				[Token(Token = "0x400218F")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
				public string name;

				[Token(Token = "0x6001F09")]
				[Address(RVA = "0xB4E8A4", Offset = "0xB4E8A4", VA = "0xB4E8A4")]
				public SplineMorphState()
				{
				}
			}

			[Token(Token = "0x400218A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[SerializeField]
			private SplineComputer computer;

			[Token(Token = "0x400218B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[SerializeField]
			private SplineMorphState[] morphStates;

			[Token(Token = "0x400218C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[SerializeField]
			internal bool initialized;

			[Token(Token = "0x6001EF8")]
			[Address(RVA = "0xB492A4", Offset = "0xB492A4", VA = "0xB492A4")]
			public Morph(SplineComputer input)
			{
			}

			[Token(Token = "0x6001EF9")]
			[Address(RVA = "0xB4D66C", Offset = "0xB4D66C", VA = "0xB4D66C")]
			public void SetWeight(int index, float weight)
			{
			}

			[Token(Token = "0x6001EFA")]
			[Address(RVA = "0xB4E2F8", Offset = "0xB4E2F8", VA = "0xB4E2F8")]
			public void SetWeight(string name, float weight)
			{
			}

			[Token(Token = "0x6001EFB")]
			[Address(RVA = "0xB4E44C", Offset = "0xB4E44C", VA = "0xB4E44C")]
			public void CaptureSnapshot(int index)
			{
			}

			[Token(Token = "0x6001EFC")]
			[Address(RVA = "0xB4E5A0", Offset = "0xB4E5A0", VA = "0xB4E5A0")]
			public void CaptureSnapshot(string name)
			{
			}

			[Token(Token = "0x6001EFD")]
			[Address(RVA = "0xB4E5BC", Offset = "0xB4E5BC", VA = "0xB4E5BC")]
			public void Clear()
			{
			}

			[Token(Token = "0x6001EFE")]
			[Address(RVA = "0xB4E60C", Offset = "0xB4E60C", VA = "0xB4E60C")]
			public SplinePoint[] GetSnapshot(int index)
			{
				return null;
			}

			[Token(Token = "0x6001EFF")]
			[Address(RVA = "0xB4E644", Offset = "0xB4E644", VA = "0xB4E644")]
			public SplinePoint[] GetSnapshot(string name)
			{
				return null;
			}

			[Token(Token = "0x6001F00")]
			[Address(RVA = "0xB4D9C8", Offset = "0xB4D9C8", VA = "0xB4D9C8")]
			public float GetWeight(int index)
			{
				return default(float);
			}

			[Token(Token = "0x6001F01")]
			[Address(RVA = "0xB4E684", Offset = "0xB4E684", VA = "0xB4E684")]
			public float GetWeight(string name)
			{
				return default(float);
			}

			[Token(Token = "0x6001F02")]
			[Address(RVA = "0xB4E6C4", Offset = "0xB4E6C4", VA = "0xB4E6C4")]
			public void AddChannel(string name)
			{
			}

			[Token(Token = "0x6001F03")]
			[Address(RVA = "0xB4E928", Offset = "0xB4E928", VA = "0xB4E928")]
			public void RemoveChannel(string name)
			{
			}

			[Token(Token = "0x6001F04")]
			[Address(RVA = "0xB4E944", Offset = "0xB4E944", VA = "0xB4E944")]
			public void RemoveChannel(int index)
			{
			}

			[Token(Token = "0x6001F05")]
			[Address(RVA = "0xB4E0A0", Offset = "0xB4E0A0", VA = "0xB4E0A0")]
			private void Update()
			{
			}

			[Token(Token = "0x6001F06")]
			[Address(RVA = "0xB4E35C", Offset = "0xB4E35C", VA = "0xB4E35C")]
			private int GetChannelIndex(string name)
			{
				return default(int);
			}

			[Token(Token = "0x6001F07")]
			[Address(RVA = "0xB49348", Offset = "0xB49348", VA = "0xB49348")]
			public int GetChannelCount()
			{
				return default(int);
			}

			[Token(Token = "0x6001F08")]
			[Address(RVA = "0xB4D7FC", Offset = "0xB4D7FC", VA = "0xB4D7FC")]
			public string[] GetChannelNames()
			{
				return null;
			}
		}

		[Token(Token = "0x400217A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[HideInInspector]
		private Spline spline;

		[Token(Token = "0x400217B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[HideInInspector]
		private Morph _morph;

		[Token(Token = "0x400217C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		[SerializeField]
		private Space _space;

		[Token(Token = "0x400217D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[HideInInspector]
		[SerializeField]
		private SplineUser[] subscribers;

		[Token(Token = "0x400217E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[HideInInspector]
		private NodeLink[] _nodeLinks;

		[Token(Token = "0x400217F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool rebuildPending;

		[Token(Token = "0x4002180")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private TS_Transform tsTransform;

		[Token(Token = "0x4002181")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool updateRebuild;

		[Token(Token = "0x4002182")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		private bool lateUpdateRebuild;

		[Token(Token = "0x4002183")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private SplineUser.UpdateMethod method;

		[Token(Token = "0x1700040A")]
		public Space space
		{
			[Token(Token = "0x6001E9A")]
			[Address(RVA = "0xB49088", Offset = "0xB49088", VA = "0xB49088")]
			get
			{
				return default(Space);
			}
			[Token(Token = "0x6001E9B")]
			[Address(RVA = "0xB49090", Offset = "0xB49090", VA = "0xB49090")]
			set
			{
			}
		}

		[Token(Token = "0x1700040B")]
		public Spline.Type type
		{
			[Token(Token = "0x6001E9C")]
			[Address(RVA = "0xB41894", Offset = "0xB41894", VA = "0xB41894")]
			get
			{
				return default(Spline.Type);
			}
			[Token(Token = "0x6001E9D")]
			[Address(RVA = "0xB490B8", Offset = "0xB490B8", VA = "0xB490B8")]
			set
			{
			}
		}

		[Token(Token = "0x1700040C")]
		public double precision
		{
			[Token(Token = "0x6001E9E")]
			[Address(RVA = "0xB490E8", Offset = "0xB490E8", VA = "0xB490E8")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6001E9F")]
			[Address(RVA = "0xB49104", Offset = "0xB49104", VA = "0xB49104")]
			set
			{
			}
		}

		[Token(Token = "0x1700040D")]
		public AnimationCurve customValueInterpolation
		{
			[Token(Token = "0x6001EA0")]
			[Address(RVA = "0xB49150", Offset = "0xB49150", VA = "0xB49150")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001EA1")]
			[Address(RVA = "0xB4916C", Offset = "0xB4916C", VA = "0xB4916C")]
			set
			{
			}
		}

		[Token(Token = "0x1700040E")]
		public AnimationCurve customNormalInterpolation
		{
			[Token(Token = "0x6001EA2")]
			[Address(RVA = "0xB49190", Offset = "0xB49190", VA = "0xB49190")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001EA3")]
			[Address(RVA = "0xB491AC", Offset = "0xB491AC", VA = "0xB491AC")]
			set
			{
			}
		}

		[Token(Token = "0x1700040F")]
		public int iterations
		{
			[Token(Token = "0x6001EA4")]
			[Address(RVA = "0xB491D0", Offset = "0xB491D0", VA = "0xB491D0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000410")]
		public double moveStep
		{
			[Token(Token = "0x6001EA5")]
			[Address(RVA = "0xB491EC", Offset = "0xB491EC", VA = "0xB491EC")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000411")]
		public bool isClosed
		{
			[Token(Token = "0x6001EA6")]
			[Address(RVA = "0xB421B8", Offset = "0xB421B8", VA = "0xB421B8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000412")]
		public int pointCount
		{
			[Token(Token = "0x6001EA7")]
			[Address(RVA = "0xB49208", Offset = "0xB49208", VA = "0xB49208")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000413")]
		public Morph morph
		{
			[Token(Token = "0x6001EA8")]
			[Address(RVA = "0xB4922C", Offset = "0xB4922C", VA = "0xB4922C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000414")]
		public NodeLink[] nodeLinks
		{
			[Token(Token = "0x6001EA9")]
			[Address(RVA = "0xB49318", Offset = "0xB49318", VA = "0xB49318")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000415")]
		public bool hasMorph
		{
			[Token(Token = "0x6001EAA")]
			[Address(RVA = "0xB49320", Offset = "0xB49320", VA = "0xB49320")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000416")]
		public Vector3 position
		{
			[Token(Token = "0x6001EAB")]
			[Address(RVA = "0xB49360", Offset = "0xB49360", VA = "0xB49360")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000417")]
		public Quaternion rotation
		{
			[Token(Token = "0x6001EAC")]
			[Address(RVA = "0xB49398", Offset = "0xB49398", VA = "0xB49398")]
			get
			{
				return default(Quaternion);
			}
		}

		[Token(Token = "0x17000418")]
		public Vector3 scale
		{
			[Token(Token = "0x6001EAD")]
			[Address(RVA = "0xB493D0", Offset = "0xB493D0", VA = "0xB493D0")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000419")]
		public int subscriberCount
		{
			[Token(Token = "0x6001EAE")]
			[Address(RVA = "0xB49408", Offset = "0xB49408", VA = "0xB49408")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x14000024")]
		public event EmptySplineHandler onRebuild
		{
			[Token(Token = "0x6001EAF")]
			[Address(RVA = "0xB49424", Offset = "0xB49424", VA = "0xB49424")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001EB0")]
			[Address(RVA = "0xB494C0", Offset = "0xB494C0", VA = "0xB494C0")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6001EB1")]
		[Address(RVA = "0xB4955C", Offset = "0xB4955C", VA = "0xB4955C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001EB2")]
		[Address(RVA = "0xB495D4", Offset = "0xB495D4", VA = "0xB495D4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001EB3")]
		[Address(RVA = "0xB497FC", Offset = "0xB497FC", VA = "0xB497FC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001EB4")]
		[Address(RVA = "0xB49604", Offset = "0xB49604", VA = "0xB49604")]
		private void Run()
		{
		}

		[Token(Token = "0x6001EB5")]
		[Address(RVA = "0xB499C4", Offset = "0xB499C4", VA = "0xB499C4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001EB6")]
		[Address(RVA = "0xB499A8", Offset = "0xB499A8", VA = "0xB499A8")]
		public void ResampleTransform()
		{
		}

		[Token(Token = "0x6001EB7")]
		[Address(RVA = "0xB499DC", Offset = "0xB499DC", VA = "0xB499DC")]
		public void Subscribe(SplineUser input)
		{
		}

		[Token(Token = "0x6001EB8")]
		[Address(RVA = "0xB49BA8", Offset = "0xB49BA8", VA = "0xB49BA8")]
		public void Unsubscribe(SplineUser input)
		{
		}

		[Token(Token = "0x6001EB9")]
		[Address(RVA = "0xB49D54", Offset = "0xB49D54", VA = "0xB49D54")]
		public bool IsSubscribed(SplineUser user)
		{
			return default(bool);
		}

		[Token(Token = "0x6001EBA")]
		[Address(RVA = "0xB49E0C", Offset = "0xB49E0C", VA = "0xB49E0C")]
		public SplineUser[] GetSubscribers()
		{
			return null;
		}

		[Token(Token = "0x6001EBB")]
		[Address(RVA = "0xB49E14", Offset = "0xB49E14", VA = "0xB49E14")]
		public void AddNodeLink(Node node, int pointIndex)
		{
		}

		[Token(Token = "0x6001EBC")]
		[Address(RVA = "0xB4A250", Offset = "0xB4A250", VA = "0xB4A250")]
		public void RemoveNodeLink(int pointIndex)
		{
		}

		[Token(Token = "0x6001EBD")]
		[Address(RVA = "0xB418B0", Offset = "0xB418B0", VA = "0xB418B0")]
		public SplinePoint[] GetPoints(Space getSpace = Space.World)
		{
			return null;
		}

		[Token(Token = "0x6001EBE")]
		[Address(RVA = "0xB4A8F4", Offset = "0xB4A8F4", VA = "0xB4A8F4")]
		public SplinePoint GetPoint(int index, Space getSpace = Space.World)
		{
			return default(SplinePoint);
		}

		[Token(Token = "0x6001EBF")]
		[Address(RVA = "0xB4AA94", Offset = "0xB4AA94", VA = "0xB4AA94")]
		public Vector3 GetPointPosition(int index, Space getSpace = Space.World)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001EC0")]
		[Address(RVA = "0xB4AB14", Offset = "0xB4AB14", VA = "0xB4AB14")]
		public Vector3 GetPointNormal(int index, Space getSpace = Space.World)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001EC1")]
		[Address(RVA = "0xB4AC38", Offset = "0xB4AC38", VA = "0xB4AC38")]
		public Vector3 GetPointTangent(int index, Space getSpace = Space.World)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001EC2")]
		[Address(RVA = "0xB4ACB8", Offset = "0xB4ACB8", VA = "0xB4ACB8")]
		public Vector3 GetPointTangent2(int index, Space getSpace = Space.World)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001EC3")]
		[Address(RVA = "0xB4AD38", Offset = "0xB4AD38", VA = "0xB4AD38")]
		public float GetPointSize(int index, Space getSpace = Space.World)
		{
			return default(float);
		}

		[Token(Token = "0x6001EC4")]
		[Address(RVA = "0xB4AD74", Offset = "0xB4AD74", VA = "0xB4AD74")]
		public Color GetPointColor(int index, Space getSpace = Space.World)
		{
			return default(Color);
		}

		[Token(Token = "0x6001EC5")]
		[Address(RVA = "0xB42300", Offset = "0xB42300", VA = "0xB42300")]
		public void SetPoints(SplinePoint[] points, Space setSpace = Space.World)
		{
		}

		[Token(Token = "0x6001EC6")]
		[Address(RVA = "0xB4B1B0", Offset = "0xB4B1B0", VA = "0xB4B1B0")]
		public void SetPointPosition(int index, Vector3 pos, Space setSpace = Space.World)
		{
		}

		[Token(Token = "0x6001EC7")]
		[Address(RVA = "0xB4B458", Offset = "0xB4B458", VA = "0xB4B458")]
		public void SetPointTangents(int index, Vector3 tan1, Vector3 tan2, Space setSpace = Space.World)
		{
		}

		[Token(Token = "0x6001EC8")]
		[Address(RVA = "0xB4B674", Offset = "0xB4B674", VA = "0xB4B674")]
		public void SetPointNormal(int index, Vector3 nrm, Space setSpace = Space.World)
		{
		}

		[Token(Token = "0x6001EC9")]
		[Address(RVA = "0xB4B7C0", Offset = "0xB4B7C0", VA = "0xB4B7C0")]
		public void SetPointSize(int index, float size)
		{
		}

		[Token(Token = "0x6001ECA")]
		[Address(RVA = "0xB4B888", Offset = "0xB4B888", VA = "0xB4B888")]
		public void SetPointColor(int index, Color color)
		{
		}

		[Token(Token = "0x6001ECB")]
		[Address(RVA = "0xB4B9BC", Offset = "0xB4B9BC", VA = "0xB4B9BC")]
		public void SetPoint(int index, SplinePoint point, Space setSpace = Space.World)
		{
		}

		[Token(Token = "0x6001ECC")]
		[Address(RVA = "0xB4B2FC", Offset = "0xB4B2FC", VA = "0xB4B2FC")]
		private void AppendPoints(int count)
		{
		}

		[Token(Token = "0x6001ECD")]
		[Address(RVA = "0xB4BCF0", Offset = "0xB4BCF0", VA = "0xB4BCF0")]
		public double GetPointPercent(int pointIndex)
		{
			return default(double);
		}

		[Token(Token = "0x6001ECE")]
		[Address(RVA = "0xB4BD18", Offset = "0xB4BD18", VA = "0xB4BD18")]
		public Vector3 EvaluatePosition(double percent)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001ECF")]
		[Address(RVA = "0xB4BD50", Offset = "0xB4BD50", VA = "0xB4BD50")]
		public SplineResult Evaluate(double percent)
		{
			return null;
		}

		[Token(Token = "0x6001ED0")]
		[Address(RVA = "0xB4BE1C", Offset = "0xB4BE1C", VA = "0xB4BE1C")]
		public SplineResult Evaluate(int pointIndex)
		{
			return null;
		}

		[Token(Token = "0x6001ED1")]
		[Address(RVA = "0xB4BEB4", Offset = "0xB4BEB4", VA = "0xB4BEB4")]
		public void Evaluate(SplineResult result, int pointIndex)
		{
		}

		[Token(Token = "0x6001ED2")]
		[Address(RVA = "0xB4BDCC", Offset = "0xB4BDCC", VA = "0xB4BDCC")]
		public void Evaluate(SplineResult result, double percent)
		{
		}

		[Token(Token = "0x6001ED3")]
		[Address(RVA = "0xB4BF78", Offset = "0xB4BF78", VA = "0xB4BF78")]
		public void Evaluate(ref SplineResult[] samples, double from = 0.0, double to = 1.0)
		{
		}

		[Token(Token = "0x6001ED4")]
		[Address(RVA = "0xB4BFF4", Offset = "0xB4BFF4", VA = "0xB4BFF4")]
		public void EvaluatePositions(ref Vector3[] positions, double from = 0.0, double to = 1.0)
		{
		}

		[Token(Token = "0x6001ED5")]
		[Address(RVA = "0xB4C0A0", Offset = "0xB4C0A0", VA = "0xB4C0A0")]
		public double Travel(double start, float distance, Spline.Direction direction)
		{
			return default(double);
		}

		[Token(Token = "0x6001ED6")]
		[Address(RVA = "0xB4BEF8", Offset = "0xB4BEF8", VA = "0xB4BEF8")]
		private void TransformResult(SplineResult result)
		{
		}

		[Token(Token = "0x6001ED7")]
		[Address(RVA = "0xB490AC", Offset = "0xB490AC", VA = "0xB490AC")]
		public void Rebuild()
		{
		}

		[Token(Token = "0x6001ED8")]
		[Address(RVA = "0xB4C300", Offset = "0xB4C300", VA = "0xB4C300")]
		public void RebuildImmediate()
		{
		}

		[Token(Token = "0x6001ED9")]
		[Address(RVA = "0xB4C4B8", Offset = "0xB4C4B8", VA = "0xB4C4B8")]
		private void RemoveSubscriber(int index)
		{
		}

		[Token(Token = "0x6001EDA")]
		[Address(RVA = "0xB49660", Offset = "0xB49660", VA = "0xB49660")]
		private void RebuildOnUpdate()
		{
		}

		[Token(Token = "0x6001EDB")]
		[Address(RVA = "0xB4C5D4", Offset = "0xB4C5D4", VA = "0xB4C5D4")]
		public void RebuildConnectedUsers()
		{
		}

		[Token(Token = "0x6001EDC")]
		[Address(RVA = "0xB4C5D8", Offset = "0xB4C5D8", VA = "0xB4C5D8")]
		private void RebuildUser(int index)
		{
		}

		[Token(Token = "0x6001EDD")]
		[Address(RVA = "0xB4C6E8", Offset = "0xB4C6E8", VA = "0xB4C6E8")]
		public double Project(Vector3 point, int subdivide = 3, double from = 0.0, double to = 1.0)
		{
			return default(double);
		}

		[Token(Token = "0x6001EDE")]
		[Address(RVA = "0xB4ADB4", Offset = "0xB4ADB4", VA = "0xB4ADB4")]
		public void Break()
		{
		}

		[Token(Token = "0x6001EDF")]
		[Address(RVA = "0xB4C744", Offset = "0xB4C744", VA = "0xB4C744")]
		public void Break(int at)
		{
		}

		[Token(Token = "0x6001EE0")]
		[Address(RVA = "0xB4C794", Offset = "0xB4C794", VA = "0xB4C794")]
		public void Close()
		{
		}

		[Token(Token = "0x6001EE1")]
		[Address(RVA = "0xB4C7D4", Offset = "0xB4C7D4", VA = "0xB4C7D4")]
		public void ConvertToBezier()
		{
		}

		[Token(Token = "0x6001EE2")]
		[Address(RVA = "0xB4C7F0", Offset = "0xB4C7F0", VA = "0xB4C7F0")]
		public float CalculateLength(double from = 0.0, double to = 1.0, double resolution = 1.0)
		{
			return default(float);
		}

		[Token(Token = "0x6001EE3")]
		[Address(RVA = "0xB4C970", Offset = "0xB4C970", VA = "0xB4C970")]
		public bool Raycast(out RaycastHit hit, out double hitPercent, LayerMask layerMask, double resolution = 1.0, double from = 0.0, double to = 1.0, QueryTriggerInteraction hitTriggers = QueryTriggerInteraction.UseGlobal)
		{
			return default(bool);
		}

		[Token(Token = "0x6001EE4")]
		[Address(RVA = "0xB4CB28", Offset = "0xB4CB28", VA = "0xB4CB28")]
		public bool RaycastAll(out RaycastHit[] hits, out double[] hitPercents, LayerMask layerMask, double resolution = 1.0, double from = 0.0, double to = 1.0, QueryTriggerInteraction hitTriggers = QueryTriggerInteraction.UseGlobal)
		{
			return default(bool);
		}

		[Token(Token = "0x6001EE5")]
		[Address(RVA = "0xB4CFD0", Offset = "0xB4CFD0", VA = "0xB4CFD0")]
		public int[] GetAvailableNodeLinksAtPosition(double percent, Spline.Direction direction)
		{
			return null;
		}

		[Token(Token = "0x6001EE6")]
		[Address(RVA = "0xB4D15C", Offset = "0xB4D15C", VA = "0xB4D15C")]
		public void GetConnectedComputers(List<SplineComputer> computers, List<int> connectionIndices, List<int> connectedIndices, double percent, Spline.Direction direction, bool includeEqual)
		{
		}

		[Token(Token = "0x6001EE7")]
		[Address(RVA = "0xB4D5D8", Offset = "0xB4D5D8", VA = "0xB4D5D8")]
		public void SetMorphState(int index)
		{
		}

		[Token(Token = "0x6001EE8")]
		[Address(RVA = "0xB4D6B8", Offset = "0xB4D6B8", VA = "0xB4D6B8")]
		public void SetMorphState(string morphName)
		{
		}

		[Token(Token = "0x6001EE9")]
		[Address(RVA = "0xB4D8FC", Offset = "0xB4D8FC", VA = "0xB4D8FC")]
		public void SetMorphState(int index, float percent)
		{
		}

		[Token(Token = "0x6001EEA")]
		[Address(RVA = "0xB4DA00", Offset = "0xB4DA00", VA = "0xB4DA00")]
		public void SetMorphState(string morphName, float percent)
		{
		}

		[Token(Token = "0x6001EEB")]
		[Address(RVA = "0xB4DB5C", Offset = "0xB4DB5C", VA = "0xB4DB5C")]
		public void SetMorphState(float percent)
		{
		}

		[Token(Token = "0x6001EEC")]
		[Address(RVA = "0xB4DC00", Offset = "0xB4DC00", VA = "0xB4DC00")]
		public List<SplineComputer> GetConnectedComputers()
		{
			return null;
		}

		[Token(Token = "0x6001EED")]
		[Address(RVA = "0xB4DD0C", Offset = "0xB4DD0C", VA = "0xB4DD0C")]
		private void GetConnectedComputers(ref List<SplineComputer> computers)
		{
		}

		[Token(Token = "0x6001EEE")]
		[Address(RVA = "0xB4A3BC", Offset = "0xB4A3BC", VA = "0xB4A3BC")]
		private void RemoveNodeLinkAt(int index)
		{
		}

		[Token(Token = "0x6001EEF")]
		[Address(RVA = "0xB4B39C", Offset = "0xB4B39C", VA = "0xB4B39C")]
		private void SetNodeForPoint(int index, SplinePoint worldPoint)
		{
		}

		[Token(Token = "0x6001EF0")]
		[Address(RVA = "0xB4AF74", Offset = "0xB4AF74", VA = "0xB4AF74")]
		private void UpdateConnectedNodes(SplinePoint[] worldPoints)
		{
		}

		[Token(Token = "0x6001EF1")]
		[Address(RVA = "0xB49828", Offset = "0xB49828", VA = "0xB49828")]
		private void UpdateConnectedNodes()
		{
		}

		[Token(Token = "0x6001EF2")]
		[Address(RVA = "0xB4A73C", Offset = "0xB4A73C", VA = "0xB4A73C")]
		public Vector3 TransformPoint(Vector3 point)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001EF3")]
		[Address(RVA = "0xB4ADBC", Offset = "0xB4ADBC", VA = "0xB4ADBC")]
		public Vector3 InverseTransformPoint(Vector3 point)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001EF4")]
		[Address(RVA = "0xB4A818", Offset = "0xB4A818", VA = "0xB4A818")]
		public Vector3 TransformDirection(Vector3 direction)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001EF5")]
		[Address(RVA = "0xB4AE98", Offset = "0xB4AE98", VA = "0xB4AE98")]
		public Vector3 InverseTransformDirection(Vector3 direction)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001EF6")]
		[Address(RVA = "0xB4DFDC", Offset = "0xB4DFDC", VA = "0xB4DFDC")]
		public SplineComputer()
		{
		}
	}
	[Token(Token = "0x2000510")]
	public delegate void SplineReachHandler();
	[Token(Token = "0x2000511")]
	[AddComponentMenu("Dreamteck/Splines/Spline Follower")]
	public class SplineFollower : SplineTracer
	{
		[Token(Token = "0x2000512")]
		public enum FollowMode
		{
			[Token(Token = "0x400219D")]
			Uniform,
			[Token(Token = "0x400219E")]
			Time
		}

		[Token(Token = "0x2000513")]
		public enum Wrap
		{
			[Token(Token = "0x40021A0")]
			Default,
			[Token(Token = "0x40021A1")]
			Loop,
			[Token(Token = "0x40021A2")]
			PingPong
		}

		[Token(Token = "0x4002190")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[HideInInspector]
		public Wrap wrapMode;

		[Token(Token = "0x4002191")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		[HideInInspector]
		public FollowMode followMode;

		[Token(Token = "0x4002192")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[HideInInspector]
		public bool autoStartPosition;

		[Token(Token = "0x4002193")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x121")]
		[HideInInspector]
		public bool autoFollow;

		[Token(Token = "0x4002196")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[SerializeField]
		[HideInInspector]
		private float _followSpeed;

		[Token(Token = "0x4002197")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		[HideInInspector]
		[SerializeField]
		private float _followDuration;

		[Token(Token = "0x4002198")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private double lastClippedPercent;

		[Token(Token = "0x4002199")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private SplineResult from;

		[Token(Token = "0x400219A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private SplineResult to;

		[Token(Token = "0x400219B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private bool followStarted;

		[Token(Token = "0x1700041A")]
		public float followSpeed
		{
			[Token(Token = "0x6001F0E")]
			[Address(RVA = "0xB4EB68", Offset = "0xB4EB68", VA = "0xB4EB68")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001F0F")]
			[Address(RVA = "0xB4EB70", Offset = "0xB4EB70", VA = "0xB4EB70")]
			set
			{
			}
		}

		[Token(Token = "0x1700041B")]
		public float followDuration
		{
			[Token(Token = "0x6001F10")]
			[Address(RVA = "0xB4EB8C", Offset = "0xB4EB8C", VA = "0xB4EB8C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001F11")]
			[Address(RVA = "0xB4EB94", Offset = "0xB4EB94", VA = "0xB4EB94")]
			set
			{
			}
		}

		[Token(Token = "0x1700041C")]
		[Obsolete("Deprecated in 1.0.8. Use result instead")]
		public SplineResult followResult
		{
			[Token(Token = "0x6001F12")]
			[Address(RVA = "0xB4EBB0", Offset = "0xB4EBB0", VA = "0xB4EBB0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700041D")]
		[Obsolete("Deprecated in 1.0.8. Use offsettedResult instead")]
		public SplineResult offsettedFollowResult
		{
			[Token(Token = "0x6001F13")]
			[Address(RVA = "0xB4EBB8", Offset = "0xB4EBB8", VA = "0xB4EBB8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x14000025")]
		public event SplineReachHandler onEndReached
		{
			[Token(Token = "0x6001F14")]
			[Address(RVA = "0xB4EBC0", Offset = "0xB4EBC0", VA = "0xB4EBC0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001F15")]
			[Address(RVA = "0xB4EC60", Offset = "0xB4EC60", VA = "0xB4EC60")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000026")]
		public event SplineReachHandler onBeginningReached
		{
			[Token(Token = "0x6001F16")]
			[Address(RVA = "0xB4ED00", Offset = "0xB4ED00", VA = "0xB4ED00")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001F17")]
			[Address(RVA = "0xB4EDA0", Offset = "0xB4EDA0", VA = "0xB4EDA0")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6001F18")]
		[Address(RVA = "0xB4EE40", Offset = "0xB4EE40", VA = "0xB4EE40", Slot = "29")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6001F19")]
		[Address(RVA = "0xB4EECC", Offset = "0xB4EECC", VA = "0xB4EECC", Slot = "19")]
		protected override void LateRun()
		{
		}

		[Token(Token = "0x6001F1A")]
		[Address(RVA = "0xB4EFDC", Offset = "0xB4EFDC", VA = "0xB4EFDC", Slot = "21")]
		protected override void PostBuild()
		{
		}

		[Token(Token = "0x6001F1B")]
		[Address(RVA = "0xB4EEF8", Offset = "0xB4EEF8", VA = "0xB4EEF8")]
		private void AutoFollow()
		{
		}

		[Token(Token = "0x6001F1C")]
		[Address(RVA = "0xB4FE9C", Offset = "0xB4FE9C", VA = "0xB4FE9C")]
		public void Restart(double startPosition = 0.0)
		{
		}

		[Token(Token = "0x6001F1D")]
		[Address(RVA = "0xB4FEDC", Offset = "0xB4FEDC", VA = "0xB4FEDC", Slot = "30")]
		public override void SetPercent(double percent, bool checkTriggers = false)
		{
		}

		[Token(Token = "0x6001F1E")]
		[Address(RVA = "0xB4FF40", Offset = "0xB4FF40", VA = "0xB4FF40", Slot = "31")]
		public override void SetDistance(float distance, bool checkTriggers = false)
		{
		}

		[Token(Token = "0x6001F1F")]
		[Address(RVA = "0xB4FAF4", Offset = "0xB4FAF4", VA = "0xB4FAF4")]
		public void Move(double percent)
		{
		}

		[Token(Token = "0x6001F20")]
		[Address(RVA = "0xB4F064", Offset = "0xB4F064", VA = "0xB4F064")]
		public void Move(float distance)
		{
		}

		[Token(Token = "0x6001F21")]
		[Address(RVA = "0xB4FFC0", Offset = "0xB4FFC0", VA = "0xB4FFC0")]
		public SplineFollower()
		{
		}
	}
	[Token(Token = "0x2000514")]
	[RequireComponent(typeof(MeshFilter))]
	[RequireComponent(typeof(MeshRenderer))]
	[AddComponentMenu("Dreamteck/Splines/Spline Mesh")]
	public class SplineMesh : MeshGenerator
	{
		[Serializable]
		[Token(Token = "0x2000515")]
		public class Channel
		{
			[Token(Token = "0x2000516")]
			public delegate float FloatHandler(double percent);

			[Token(Token = "0x2000517")]
			public delegate Vector2 Vector2Handler(double percent);

			[Token(Token = "0x2000518")]
			public delegate Vector3 Vector3Handler(double percent);

			[Token(Token = "0x2000519")]
			public delegate Quaternion QuaternionHandler(double percent);

			[Token(Token = "0x200051A")]
			public enum Type
			{
				[Token(Token = "0x40021D2")]
				Extrude,
				[Token(Token = "0x40021D3")]
				Place
			}

			[Token(Token = "0x200051B")]
			public enum UVOverride
			{
				[Token(Token = "0x40021D5")]
				None,
				[Token(Token = "0x40021D6")]
				ClampU,
				[Token(Token = "0x40021D7")]
				ClampV,
				[Token(Token = "0x40021D8")]
				UniformU,
				[Token(Token = "0x40021D9")]
				UniformV
			}

			[Serializable]
			[Token(Token = "0x200051C")]
			public class MeshDefinition
			{
				[Token(Token = "0x200051D")]
				public enum MirrorMethod
				{
					[Token(Token = "0x40021F1")]
					None,
					[Token(Token = "0x40021F2")]
					X,
					[Token(Token = "0x40021F3")]
					Y,
					[Token(Token = "0x40021F4")]
					Z
				}

				[Serializable]
				[Token(Token = "0x200051E")]
				public class Submesh
				{
					[Token(Token = "0x40021F5")]
					[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
					public int[] triangles;

					[Token(Token = "0x6001FB0")]
					[Address(RVA = "0xB56CA0", Offset = "0xB56CA0", VA = "0xB56CA0")]
					public Submesh()
					{
					}

					[Token(Token = "0x6001FB1")]
					[Address(RVA = "0xB54CE0", Offset = "0xB54CE0", VA = "0xB54CE0")]
					public Submesh(int[] input)
					{
					}
				}

				[Serializable]
				[Token(Token = "0x200051F")]
				public class VertexGroup
				{
					[Token(Token = "0x40021F6")]
					[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
					public float value;

					[Token(Token = "0x40021F7")]
					[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
					public double percent;

					[Token(Token = "0x40021F8")]
					[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
					public int[] ids;

					[Token(Token = "0x6001FB2")]
					[Address(RVA = "0xB56BBC", Offset = "0xB56BBC", VA = "0xB56BBC")]
					public VertexGroup(float val, double perc, int[] vertIds)
					{
					}

					[Token(Token = "0x6001FB3")]
					[Address(RVA = "0xB56BFC", Offset = "0xB56BFC", VA = "0xB56BFC")]
					public void AddId(int id)
					{
					}
				}

				[Token(Token = "0x40021DA")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[SerializeField]
				[HideInInspector]
				internal Vector3[] vertices;

				[Token(Token = "0x40021DB")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				[SerializeField]
				[HideInInspector]
				internal Vector3[] normals;

				[Token(Token = "0x40021DC")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
				[SerializeField]
				[HideInInspector]
				internal Vector4[] tangents;

				[Token(Token = "0x40021DD")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
				[SerializeField]
				[HideInInspector]
				internal Color[] colors;

				[Token(Token = "0x40021DE")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
				[SerializeField]
				[HideInInspector]
				internal Vector2[] uv;

				[Token(Token = "0x40021DF")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
				[HideInInspector]
				[SerializeField]
				internal Vector2[] uv2;

				[Token(Token = "0x40021E0")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
				[HideInInspector]
				[SerializeField]
				internal Vector2[] uv3;

				[Token(Token = "0x40021E1")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
				[SerializeField]
				[HideInInspector]
				internal Vector2[] uv4;

				[Token(Token = "0x40021E2")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
				[HideInInspector]
				[SerializeField]
				internal int[] triangles;

				[Token(Token = "0x40021E3")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
				[HideInInspector]
				[SerializeField]
				internal List<Submesh> subMeshes;

				[Token(Token = "0x40021E4")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
				[SerializeField]
				[HideInInspector]
				internal TS_Bounds bounds;

				[Token(Token = "0x40021E5")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
				[SerializeField]
				[HideInInspector]
				internal List<VertexGroup> vertexGroups;

				[Token(Token = "0x40021E6")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
				[SerializeField]
				[HideInInspector]
				private Mesh _mesh;

				[Token(Token = "0x40021E7")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
				[SerializeField]
				[HideInInspector]
				private Vector3 _rotation;

				[Token(Token = "0x40021E8")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
				[SerializeField]
				[HideInInspector]
				private Vector2 _offset;

				[Token(Token = "0x40021E9")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
				[SerializeField]
				[HideInInspector]
				private Vector3 _scale;

				[Token(Token = "0x40021EA")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
				[HideInInspector]
				[SerializeField]
				private Vector2 _uvScale;

				[Token(Token = "0x40021EB")]
				[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
				[HideInInspector]
				[SerializeField]
				private Vector2 _uvOffset;

				[Token(Token = "0x40021EC")]
				[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
				[HideInInspector]
				[SerializeField]
				private float _uvRotation;

				[Token(Token = "0x40021ED")]
				[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
				[HideInInspector]
				[SerializeField]
				private MirrorMethod _mirror;

				[Token(Token = "0x40021EE")]
				[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
				[HideInInspector]
				[SerializeField]
				private bool _flipFaces;

				[Token(Token = "0x40021EF")]
				[Il2CppDummyDll.FieldOffset(Offset = "0xB1")]
				[HideInInspector]
				[SerializeField]
				private bool _doubleSided;

				[Token(Token = "0x1700043D")]
				public Mesh mesh
				{
					[Token(Token = "0x6001F90")]
					[Address(RVA = "0xB54A68", Offset = "0xB54A68", VA = "0xB54A68")]
					get
					{
						return null;
					}
					[Token(Token = "0x6001F91")]
					[Address(RVA = "0xB54A70", Offset = "0xB54A70", VA = "0xB54A70")]
					set
					{
					}
				}

				[Token(Token = "0x1700043E")]
				public Vector3 rotation
				{
					[Token(Token = "0x6001F92")]
					[Address(RVA = "0xB54AFC", Offset = "0xB54AFC", VA = "0xB54AFC")]
					get
					{
						return default(Vector3);
					}
					[Token(Token = "0x6001F93")]
					[Address(RVA = "0xB54B08", Offset = "0xB54B08", VA = "0xB54B08")]
					set
					{
					}
				}

				[Token(Token = "0x1700043F")]
				public Vector2 offset
				{
					[Token(Token = "0x6001F94")]
					[Address(RVA = "0xB54B50", Offset = "0xB54B50", VA = "0xB54B50")]
					get
					{
						return default(Vector2);
					}
					[Token(Token = "0x6001F95")]
					[Address(RVA = "0xB54B58", Offset = "0xB54B58", VA = "0xB54B58")]
					set
					{
					}
				}

				[Token(Token = "0x17000440")]
				public Vector3 scale
				{
					[Token(Token = "0x6001F96")]
					[Address(RVA = "0xB54B8C", Offset = "0xB54B8C", VA = "0xB54B8C")]
					get
					{
						return default(Vector3);
					}
					[Token(Token = "0x6001F97")]
					[Address(RVA = "0xB54B98", Offset = "0xB54B98", VA = "0xB54B98")]
					set
					{
					}
				}

				[Token(Token = "0x17000441")]
				public Vector2 uvScale
				{
					[Token(Token = "0x6001F98")]
					[Address(RVA = "0xB54BE0", Offset = "0xB54BE0", VA = "0xB54BE0")]
					get
					{
						return default(Vector2);
					}
					[Token(Token = "0x6001F99")]
					[Address(RVA = "0xB54BE8", Offset = "0xB54BE8", VA = "0xB54BE8")]
					set
					{
					}
				}

				[Token(Token = "0x17000442")]
				public Vector2 uvOffset
				{
					[Token(Token = "0x6001F9A")]
					[Address(RVA = "0xB54C1C", Offset = "0xB54C1C", VA = "0xB54C1C")]
					get
					{
						return default(Vector2);
					}
					[Token(Token = "0x6001F9B")]
					[Address(RVA = "0xB54C24", Offset = "0xB54C24", VA = "0xB54C24")]
					set
					{
					}
				}

				[Token(Token = "0x17000443")]
				public float uvRotation
				{
					[Token(Token = "0x6001F9C")]
					[Address(RVA = "0xB54C58", Offset = "0xB54C58", VA = "0xB54C58")]
					get
					{
						return default(float);
					}
					[Token(Token = "0x6001F9D")]
					[Address(RVA = "0xB54C60", Offset = "0xB54C60", VA = "0xB54C60")]
					set
					{
					}
				}

				[Token(Token = "0x17000444")]
				public MirrorMethod mirror
				{
					[Token(Token = "0x6001F9E")]
					[Address(RVA = "0xB54C78", Offset = "0xB54C78", VA = "0xB54C78")]
					get
					{
						return default(MirrorMethod);
					}
					[Token(Token = "0x6001F9F")]
					[Address(RVA = "0xB54C80", Offset = "0xB54C80", VA = "0xB54C80")]
					set
					{
					}
				}

				[Token(Token = "0x17000445")]
				public bool flipFaces
				{
					[Token(Token = "0x6001FA0")]
					[Address(RVA = "0xB54C98", Offset = "0xB54C98", VA = "0xB54C98")]
					get
					{
						return default(bool);
					}
					[Token(Token = "0x6001FA1")]
					[Address(RVA = "0xB54CA0", Offset = "0xB54CA0", VA = "0xB54CA0")]
					set
					{
					}
				}

				[Token(Token = "0x17000446")]
				public bool doubleSided
				{
					[Token(Token = "0x6001FA2")]
					[Address(RVA = "0xB54CBC", Offset = "0xB54CBC", VA = "0xB54CBC")]
					get
					{
						return default(bool);
					}
					[Token(Token = "0x6001FA3")]
					[Address(RVA = "0xB54CC4", Offset = "0xB54CC4", VA = "0xB54CC4")]
					set
					{
					}
				}

				[Token(Token = "0x6001FA4")]
				[Address(RVA = "0xB52B68", Offset = "0xB52B68", VA = "0xB52B68")]
				internal MeshDefinition Copy()
				{
					return null;
				}

				[Token(Token = "0x6001FA5")]
				[Address(RVA = "0xB525BC", Offset = "0xB525BC", VA = "0xB525BC")]
				public MeshDefinition(Mesh input)
				{
				}

				[Token(Token = "0x6001FA6")]
				[Address(RVA = "0xB53BFC", Offset = "0xB53BFC", VA = "0xB53BFC")]
				public void Refresh()
				{
				}

				[Token(Token = "0x6001FA7")]
				[Address(RVA = "0xB55320", Offset = "0xB55320", VA = "0xB55320")]
				private void FlipFaces()
				{
				}

				[Token(Token = "0x6001FA8")]
				[Address(RVA = "0xB550F8", Offset = "0xB550F8", VA = "0xB550F8")]
				private void DoubleSided()
				{
				}

				[Token(Token = "0x6001FA9")]
				[Address(RVA = "0xB55DF8", Offset = "0xB55DF8", VA = "0xB55DF8")]
				public void Write(TS_Mesh target, int forceMaterialId = -1)
				{
				}

				[Token(Token = "0x6001FAA")]
				[Address(RVA = "0xB5585C", Offset = "0xB5585C", VA = "0xB5585C")]
				private void CalculateBounds()
				{
				}

				[Token(Token = "0x6001FAB")]
				[Address(RVA = "0xB54D70", Offset = "0xB54D70", VA = "0xB54D70")]
				private void Mirror()
				{
				}

				[Token(Token = "0x6001FAC")]
				[Address(RVA = "0xB55490", Offset = "0xB55490", VA = "0xB55490")]
				private void TransformVertices()
				{
				}

				[Token(Token = "0x6001FAD")]
				[Address(RVA = "0xB55978", Offset = "0xB55978", VA = "0xB55978")]
				private void GroupVertices()
				{
				}

				[Token(Token = "0x6001FAE")]
				[Address(RVA = "0xB56AC8", Offset = "0xB56AC8", VA = "0xB56AC8")]
				private int FindInsertIndex(Vector3 pos, float value)
				{
					return default(int);
				}

				[Token(Token = "0x6001FAF")]
				[Address(RVA = "0xB56534", Offset = "0xB56534", VA = "0xB56534")]
				private void CalculateTangents()
				{
				}
			}

			[Token(Token = "0x40021AA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string name;

			[Token(Token = "0x40021AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private System.Random iterationRandom;

			[Token(Token = "0x40021AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[SerializeField]
			[HideInInspector]
			private int _iterationSeed;

			[Token(Token = "0x40021AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[SerializeField]
			[HideInInspector]
			private int _offsetSeed;

			[Token(Token = "0x40021AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private System.Random offsetRandom;

			[Token(Token = "0x40021AF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Vector2Handler _offsetHandler;

			[Token(Token = "0x40021B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[SerializeField]
			[HideInInspector]
			private int _rotationSeed;

			[Token(Token = "0x40021B1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private System.Random rotationRandom;

			[Token(Token = "0x40021B2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private QuaternionHandler _placeRotationHandler;

			[Token(Token = "0x40021B3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private FloatHandler _extrudeRotationHandler;

			[Token(Token = "0x40021B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[HideInInspector]
			[SerializeField]
			private int _scaleSeed;

			[Token(Token = "0x40021B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private System.Random scaleRandom;

			[Token(Token = "0x40021B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			private Vector3Handler _scaleHandler;

			[Token(Token = "0x40021B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			[SerializeField]
			internal SplineMesh owner;

			[Token(Token = "0x40021B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			[HideInInspector]
			[SerializeField]
			private List<MeshDefinition> meshes;

			[Token(Token = "0x40021B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			[SerializeField]
			[HideInInspector]
			private double _clipFrom;

			[Token(Token = "0x40021BA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			[SerializeField]
			[HideInInspector]
			private double _clipTo;

			[Token(Token = "0x40021BB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			[SerializeField]
			[HideInInspector]
			private bool _randomOrder;

			[Token(Token = "0x40021BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
			[HideInInspector]
			[SerializeField]
			private UVOverride _overrideUVs;

			[Token(Token = "0x40021BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			[HideInInspector]
			[SerializeField]
			private Vector2 _uvScale;

			[Token(Token = "0x40021BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			[SerializeField]
			[HideInInspector]
			private Vector2 _uvOffset;

			[Token(Token = "0x40021BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			[SerializeField]
			[HideInInspector]
			private bool _overrideNormal;

			[Token(Token = "0x40021C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
			[SerializeField]
			[HideInInspector]
			private Vector3 _customNormal;

			[Token(Token = "0x40021C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
			[SerializeField]
			[HideInInspector]
			private Type _type;

			[Token(Token = "0x40021C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
			[HideInInspector]
			[SerializeField]
			private int _count;

			[Token(Token = "0x40021C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			[SerializeField]
			[HideInInspector]
			private double _spacing;

			[Token(Token = "0x40021C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
			[SerializeField]
			[HideInInspector]
			private bool _randomRotation;

			[Token(Token = "0x40021C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
			[SerializeField]
			[HideInInspector]
			private Vector3 _minRotation;

			[Token(Token = "0x40021C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
			[SerializeField]
			[HideInInspector]
			private Vector3 _maxRotation;

			[Token(Token = "0x40021C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
			[SerializeField]
			[HideInInspector]
			private bool _randomOffset;

			[Token(Token = "0x40021C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
			[SerializeField]
			[HideInInspector]
			private Vector2 _minOffset;

			[Token(Token = "0x40021C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
			[SerializeField]
			[HideInInspector]
			private Vector2 _maxOffset;

			[Token(Token = "0x40021CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
			[SerializeField]
			[HideInInspector]
			private bool _randomScale;

			[Token(Token = "0x40021CB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF9")]
			[SerializeField]
			[HideInInspector]
			private bool _uniformRandomScale;

			[Token(Token = "0x40021CC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
			[HideInInspector]
			[SerializeField]
			private Vector3 _minScale;

			[Token(Token = "0x40021CD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
			[SerializeField]
			[HideInInspector]
			private Vector3 _maxScale;

			[Token(Token = "0x40021CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
			private int iterator;

			[Token(Token = "0x40021CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
			[HideInInspector]
			[SerializeField]
			private bool _overrideMaterialID;

			[Token(Token = "0x40021D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
			[HideInInspector]
			[SerializeField]
			private int _targetMaterialID;

			[Token(Token = "0x1700041E")]
			public double clipFrom
			{
				[Token(Token = "0x6001F2F")]
				[Address(RVA = "0xB518FC", Offset = "0xB518FC", VA = "0xB518FC")]
				get
				{
					return default(double);
				}
				[Token(Token = "0x6001F30")]
				[Address(RVA = "0xB51904", Offset = "0xB51904", VA = "0xB51904")]
				set
				{
				}
			}

			[Token(Token = "0x1700041F")]
			public double clipTo
			{
				[Token(Token = "0x6001F31")]
				[Address(RVA = "0xB519A8", Offset = "0xB519A8", VA = "0xB519A8")]
				get
				{
					return default(double);
				}
				[Token(Token = "0x6001F32")]
				[Address(RVA = "0xB519B0", Offset = "0xB519B0", VA = "0xB519B0")]
				set
				{
				}
			}

			[Token(Token = "0x17000420")]
			public bool randomOffset
			{
				[Token(Token = "0x6001F33")]
				[Address(RVA = "0xB519C8", Offset = "0xB519C8", VA = "0xB519C8")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6001F34")]
				[Address(RVA = "0xB519D0", Offset = "0xB519D0", VA = "0xB519D0")]
				set
				{
				}
			}

			[Token(Token = "0x17000421")]
			public Vector2Handler offsetHandler
			{
				[Token(Token = "0x6001F35")]
				[Address(RVA = "0xB519EC", Offset = "0xB519EC", VA = "0xB519EC")]
				get
				{
					return null;
				}
				[Token(Token = "0x6001F36")]
				[Address(RVA = "0xB519F4", Offset = "0xB519F4", VA = "0xB519F4")]
				set
				{
				}
			}

			[Token(Token = "0x17000422")]
			public bool overrideMaterialID
			{
				[Token(Token = "0x6001F37")]
				[Address(RVA = "0xB51A3C", Offset = "0xB51A3C", VA = "0xB51A3C")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6001F38")]
				[Address(RVA = "0xB51A44", Offset = "0xB51A44", VA = "0xB51A44")]
				set
				{
				}
			}

			[Token(Token = "0x17000423")]
			public int targetMaterialID
			{
				[Token(Token = "0x6001F39")]
				[Address(RVA = "0xB51A60", Offset = "0xB51A60", VA = "0xB51A60")]
				get
				{
					return default(int);
				}
				[Token(Token = "0x6001F3A")]
				[Address(RVA = "0xB51A68", Offset = "0xB51A68", VA = "0xB51A68")]
				set
				{
				}
			}

			[Token(Token = "0x17000424")]
			public bool randomRotation
			{
				[Token(Token = "0x6001F3B")]
				[Address(RVA = "0xB51A80", Offset = "0xB51A80", VA = "0xB51A80")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6001F3C")]
				[Address(RVA = "0xB51A88", Offset = "0xB51A88", VA = "0xB51A88")]
				set
				{
				}
			}

			[Token(Token = "0x17000425")]
			public QuaternionHandler placeRotationHandler
			{
				[Token(Token = "0x6001F3D")]
				[Address(RVA = "0xB51AA4", Offset = "0xB51AA4", VA = "0xB51AA4")]
				get
				{
					return null;
				}
				[Token(Token = "0x6001F3E")]
				[Address(RVA = "0xB51AAC", Offset = "0xB51AAC", VA = "0xB51AAC")]
				set
				{
				}
			}

			[Token(Token = "0x17000426")]
			public FloatHandler extrudeRotationHandler
			{
				[Token(Token = "0x6001F3F")]
				[Address(RVA = "0xB51AF4", Offset = "0xB51AF4", VA = "0xB51AF4")]
				get
				{
					return null;
				}
				[Token(Token = "0x6001F40")]
				[Address(RVA = "0xB51AFC", Offset = "0xB51AFC", VA = "0xB51AFC")]
				set
				{
				}
			}

			[Token(Token = "0x17000427")]
			public bool randomScale
			{
				[Token(Token = "0x6001F41")]
				[Address(RVA = "0xB51B44", Offset = "0xB51B44", VA = "0xB51B44")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6001F42")]
				[Address(RVA = "0xB51B4C", Offset = "0xB51B4C", VA = "0xB51B4C")]
				set
				{
				}
			}

			[Token(Token = "0x17000428")]
			public Vector3Handler scaleHandler
			{
				[Token(Token = "0x6001F43")]
				[Address(RVA = "0xB51B68", Offset = "0xB51B68", VA = "0xB51B68")]
				get
				{
					return null;
				}
				[Token(Token = "0x6001F44")]
				[Address(RVA = "0xB51B70", Offset = "0xB51B70", VA = "0xB51B70")]
				set
				{
				}
			}

			[Token(Token = "0x17000429")]
			public bool uniformRandomScale
			{
				[Token(Token = "0x6001F45")]
				[Address(RVA = "0xB51BB8", Offset = "0xB51BB8", VA = "0xB51BB8")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6001F46")]
				[Address(RVA = "0xB51BC0", Offset = "0xB51BC0", VA = "0xB51BC0")]
				set
				{
				}
			}

			[Token(Token = "0x1700042A")]
			public int offsetSeed
			{
				[Token(Token = "0x6001F47")]
				[Address(RVA = "0xB51BDC", Offset = "0xB51BDC", VA = "0xB51BDC")]
				get
				{
					return default(int);
				}
				[Token(Token = "0x6001F48")]
				[Address(RVA = "0xB51BE4", Offset = "0xB51BE4", VA = "0xB51BE4")]
				set
				{
				}
			}

			[Token(Token = "0x1700042B")]
			public int rotationSeed
			{
				[Token(Token = "0x6001F49")]
				[Address(RVA = "0xB51BFC", Offset = "0xB51BFC", VA = "0xB51BFC")]
				get
				{
					return default(int);
				}
				[Token(Token = "0x6001F4A")]
				[Address(RVA = "0xB51C04", Offset = "0xB51C04", VA = "0xB51C04")]
				set
				{
				}
			}

			[Token(Token = "0x1700042C")]
			public int scaleSeed
			{
				[Token(Token = "0x6001F4B")]
				[Address(RVA = "0xB51C1C", Offset = "0xB51C1C", VA = "0xB51C1C")]
				get
				{
					return default(int);
				}
				[Token(Token = "0x6001F4C")]
				[Address(RVA = "0xB51C24", Offset = "0xB51C24", VA = "0xB51C24")]
				set
				{
				}
			}

			[Token(Token = "0x1700042D")]
			public double spacing
			{
				[Token(Token = "0x6001F4D")]
				[Address(RVA = "0xB51C3C", Offset = "0xB51C3C", VA = "0xB51C3C")]
				get
				{
					return default(double);
				}
				[Token(Token = "0x6001F4E")]
				[Address(RVA = "0xB51C44", Offset = "0xB51C44", VA = "0xB51C44")]
				set
				{
				}
			}

			[Token(Token = "0x1700042E")]
			public Vector2 minOffset
			{
				[Token(Token = "0x6001F4F")]
				[Address(RVA = "0xB51C5C", Offset = "0xB51C5C", VA = "0xB51C5C")]
				get
				{
					return default(Vector2);
				}
				[Token(Token = "0x6001F50")]
				[Address(RVA = "0xB51C64", Offset = "0xB51C64", VA = "0xB51C64")]
				set
				{
				}
			}

			[Token(Token = "0x1700042F")]
			public Vector2 maxOffset
			{
				[Token(Token = "0x6001F51")]
				[Address(RVA = "0xB51C98", Offset = "0xB51C98", VA = "0xB51C98")]
				get
				{
					return default(Vector2);
				}
				[Token(Token = "0x6001F52")]
				[Address(RVA = "0xB51CA0", Offset = "0xB51CA0", VA = "0xB51CA0")]
				set
				{
				}
			}

			[Token(Token = "0x17000430")]
			public Vector3 minRotation
			{
				[Token(Token = "0x6001F53")]
				[Address(RVA = "0xB51CD4", Offset = "0xB51CD4", VA = "0xB51CD4")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6001F54")]
				[Address(RVA = "0xB51CE0", Offset = "0xB51CE0", VA = "0xB51CE0")]
				set
				{
				}
			}

			[Token(Token = "0x17000431")]
			public Vector3 maxRotation
			{
				[Token(Token = "0x6001F55")]
				[Address(RVA = "0xB51D28", Offset = "0xB51D28", VA = "0xB51D28")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6001F56")]
				[Address(RVA = "0xB51D34", Offset = "0xB51D34", VA = "0xB51D34")]
				set
				{
				}
			}

			[Token(Token = "0x17000432")]
			public Vector3 minScale
			{
				[Token(Token = "0x6001F57")]
				[Address(RVA = "0xB51D7C", Offset = "0xB51D7C", VA = "0xB51D7C")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6001F58")]
				[Address(RVA = "0xB51D88", Offset = "0xB51D88", VA = "0xB51D88")]
				set
				{
				}
			}

			[Token(Token = "0x17000433")]
			public Vector3 maxScale
			{
				[Token(Token = "0x6001F59")]
				[Address(RVA = "0xB51DD0", Offset = "0xB51DD0", VA = "0xB51DD0")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6001F5A")]
				[Address(RVA = "0xB51DE0", Offset = "0xB51DE0", VA = "0xB51DE0")]
				set
				{
				}
			}

			[Token(Token = "0x17000434")]
			public Type type
			{
				[Token(Token = "0x6001F5B")]
				[Address(RVA = "0xB51E30", Offset = "0xB51E30", VA = "0xB51E30")]
				get
				{
					return default(Type);
				}
				[Token(Token = "0x6001F5C")]
				[Address(RVA = "0xB51E38", Offset = "0xB51E38", VA = "0xB51E38")]
				set
				{
				}
			}

			[Token(Token = "0x17000435")]
			public bool randomOrder
			{
				[Token(Token = "0x6001F5D")]
				[Address(RVA = "0xB51E50", Offset = "0xB51E50", VA = "0xB51E50")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6001F5E")]
				[Address(RVA = "0xB51E58", Offset = "0xB51E58", VA = "0xB51E58")]
				set
				{
				}
			}

			[Token(Token = "0x17000436")]
			public int randomSeed
			{
				[Token(Token = "0x6001F5F")]
				[Address(RVA = "0xB51E74", Offset = "0xB51E74", VA = "0xB51E74")]
				get
				{
					return default(int);
				}
				[Token(Token = "0x6001F60")]
				[Address(RVA = "0xB51E7C", Offset = "0xB51E7C", VA = "0xB51E7C")]
				set
				{
				}
			}

			[Token(Token = "0x17000437")]
			public int count
			{
				[Token(Token = "0x6001F61")]
				[Address(RVA = "0xB51E9C", Offset = "0xB51E9C", VA = "0xB51E9C")]
				get
				{
					return default(int);
				}
				[Token(Token = "0x6001F62")]
				[Address(RVA = "0xB51EA4", Offset = "0xB51EA4", VA = "0xB51EA4")]
				set
				{
				}
			}

			[Token(Token = "0x17000438")]
			public UVOverride overrideUVs
			{
				[Token(Token = "0x6001F63")]
				[Address(RVA = "0xB51EC4", Offset = "0xB51EC4", VA = "0xB51EC4")]
				get
				{
					return default(UVOverride);
				}
				[Token(Token = "0x6001F64")]
				[Address(RVA = "0xB51ECC", Offset = "0xB51ECC", VA = "0xB51ECC")]
				set
				{
				}
			}

			[Token(Token = "0x17000439")]
			public Vector2 uvOffset
			{
				[Token(Token = "0x6001F65")]
				[Address(RVA = "0xB51EE4", Offset = "0xB51EE4", VA = "0xB51EE4")]
				get
				{
					return default(Vector2);
				}
				[Token(Token = "0x6001F66")]
				[Address(RVA = "0xB51EEC", Offset = "0xB51EEC", VA = "0xB51EEC")]
				set
				{
				}
			}

			[Token(Token = "0x1700043A")]
			public Vector2 uvScale
			{
				[Token(Token = "0x6001F67")]
				[Address(RVA = "0xB51F20", Offset = "0xB51F20", VA = "0xB51F20")]
				get
				{
					return default(Vector2);
				}
				[Token(Token = "0x6001F68")]
				[Address(RVA = "0xB51F28", Offset = "0xB51F28", VA = "0xB51F28")]
				set
				{
				}
			}

			[Token(Token = "0x1700043B")]
			public bool overrideNormal
			{
				[Token(Token = "0x6001F69")]
				[Address(RVA = "0xB51F5C", Offset = "0xB51F5C", VA = "0xB51F5C")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6001F6A")]
				[Address(RVA = "0xB51F64", Offset = "0xB51F64", VA = "0xB51F64")]
				set
				{
				}
			}

			[Token(Token = "0x1700043C")]
			public Vector3 customNormal
			{
				[Token(Token = "0x6001F6B")]
				[Address(RVA = "0xB51F80", Offset = "0xB51F80", VA = "0xB51F80")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6001F6C")]
				[Address(RVA = "0xB51F8C", Offset = "0xB51F8C", VA = "0xB51F8C")]
				set
				{
				}
			}

			[Token(Token = "0x6001F6D")]
			[Address(RVA = "0xB51FD4", Offset = "0xB51FD4", VA = "0xB51FD4")]
			public Channel(string n, SplineMesh parent)
			{
			}

			[Token(Token = "0x6001F6E")]
			[Address(RVA = "0xB522C8", Offset = "0xB522C8", VA = "0xB522C8")]
			public Channel(string n, Mesh inputMesh, SplineMesh parent)
			{
			}

			[Token(Token = "0x6001F6F")]
			[Address(RVA = "0xB5221C", Offset = "0xB5221C", VA = "0xB5221C")]
			private void Init()
			{
			}

			[Token(Token = "0x6001F70")]
			[Address(RVA = "0xB52924", Offset = "0xB52924", VA = "0xB52924")]
			public void CopyTo(Channel target)
			{
			}

			[Token(Token = "0x6001F71")]
			[Address(RVA = "0xB53074", Offset = "0xB53074", VA = "0xB53074")]
			public int GetMeshCount()
			{
				return default(int);
			}

			[Token(Token = "0x6001F72")]
			[Address(RVA = "0xB530BC", Offset = "0xB530BC", VA = "0xB530BC")]
			public void SwapMeshes(int a, int b)
			{
			}

			[Token(Token = "0x6001F73")]
			[Address(RVA = "0xB531C8", Offset = "0xB531C8", VA = "0xB531C8")]
			public void DuplicateMesh(int index)
			{
			}

			[Token(Token = "0x6001F74")]
			[Address(RVA = "0xB532C8", Offset = "0xB532C8", VA = "0xB532C8")]
			public MeshDefinition GetMesh(int index)
			{
				return null;
			}

			[Token(Token = "0x6001F75")]
			[Address(RVA = "0xB53320", Offset = "0xB53320", VA = "0xB53320")]
			public void AddMesh(Mesh input)
			{
			}

			[Token(Token = "0x6001F76")]
			[Address(RVA = "0xB53400", Offset = "0xB53400", VA = "0xB53400")]
			public void RemoveMesh(int index)
			{
			}

			[Token(Token = "0x6001F77")]
			[Address(RVA = "0xB53460", Offset = "0xB53460", VA = "0xB53460")]
			public void ResetIteration()
			{
			}

			[Token(Token = "0x6001F78")]
			[Address(RVA = "0xB53560", Offset = "0xB53560", VA = "0xB53560")]
			public Vector2 NextOffset(double percent)
			{
				return default(Vector2);
			}

			[Token(Token = "0x6001F79")]
			[Address(RVA = "0xB53638", Offset = "0xB53638", VA = "0xB53638")]
			public Quaternion NextPlaceRotation(double percent)
			{
				return default(Quaternion);
			}

			[Token(Token = "0x6001F7A")]
			[Address(RVA = "0xB5377C", Offset = "0xB5377C", VA = "0xB5377C")]
			public float NextExtrudeRotation(double percent)
			{
				return default(float);
			}

			[Token(Token = "0x6001F7B")]
			[Address(RVA = "0xB53804", Offset = "0xB53804", VA = "0xB53804")]
			public Vector3 NextExtrudeScale(double percent)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6001F7C")]
			[Address(RVA = "0xB5394C", Offset = "0xB5394C", VA = "0xB5394C")]
			public Vector3 NextPlaceScale()
			{
				return default(Vector3);
			}

			[Token(Token = "0x6001F7D")]
			[Address(RVA = "0xB53AC0", Offset = "0xB53AC0", VA = "0xB53AC0")]
			public MeshDefinition NextMesh()
			{
				return null;
			}

			[Token(Token = "0x6001F7E")]
			[Address(RVA = "0xB5191C", Offset = "0xB5191C", VA = "0xB5191C")]
			internal void Rebuild()
			{
			}

			[Token(Token = "0x6001F7F")]
			[Address(RVA = "0xB53B70", Offset = "0xB53B70", VA = "0xB53B70")]
			private void Refresh()
			{
			}
		}

		[Token(Token = "0x40021A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[SerializeField]
		[HideInInspector]
		private List<Channel> channels;

		[Token(Token = "0x40021A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private SplineResult lastResult;

		[Token(Token = "0x40021A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private bool useLastResult;

		[Token(Token = "0x40021A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private List<TS_Mesh> combineMeshes;

		[Token(Token = "0x40021A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private int meshCount;

		[Token(Token = "0x40021A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
		private Matrix4x4 vertexMatrix;

		[Token(Token = "0x40021A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
		private Matrix4x4 normalMatrix;

		[Token(Token = "0x6001F22")]
		[Address(RVA = "0xB5005C", Offset = "0xB5005C", VA = "0xB5005C", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6001F23")]
		[Address(RVA = "0xB500BC", Offset = "0xB500BC", VA = "0xB500BC", Slot = "5")]
		protected override void Reset()
		{
		}

		[Token(Token = "0x6001F24")]
		[Address(RVA = "0xB501F4", Offset = "0xB501F4", VA = "0xB501F4")]
		public void RemoveChannel(int index)
		{
		}

		[Token(Token = "0x6001F25")]
		[Address(RVA = "0xB50260", Offset = "0xB50260", VA = "0xB50260")]
		public void SwapChannels(int a, int b)
		{
		}

		[Token(Token = "0x6001F26")]
		[Address(RVA = "0xB50378", Offset = "0xB50378", VA = "0xB50378")]
		public Channel AddChannel(Mesh inputMesh, string name)
		{
			return null;
		}

		[Token(Token = "0x6001F27")]
		[Address(RVA = "0xB50110", Offset = "0xB50110", VA = "0xB50110")]
		public Channel AddChannel(string name)
		{
			return null;
		}

		[Token(Token = "0x6001F28")]
		[Address(RVA = "0xB50464", Offset = "0xB50464", VA = "0xB50464")]
		public int GetChannelCount()
		{
			return default(int);
		}

		[Token(Token = "0x6001F29")]
		[Address(RVA = "0xB504AC", Offset = "0xB504AC", VA = "0xB504AC")]
		public Channel GetChannel(int index)
		{
			return null;
		}

		[Token(Token = "0x6001F2A")]
		[Address(RVA = "0xB50504", Offset = "0xB50504", VA = "0xB50504", Slot = "29")]
		protected override void BuildMesh()
		{
		}

		[Token(Token = "0x6001F2B")]
		[Address(RVA = "0xB50544", Offset = "0xB50544", VA = "0xB50544")]
		private void Generate()
		{
		}

		[Token(Token = "0x6001F2C")]
		[Address(RVA = "0xB5127C", Offset = "0xB5127C", VA = "0xB5127C")]
		private void Place(Channel channel, TS_Mesh target, double percent)
		{
		}

		[Token(Token = "0x6001F2D")]
		[Address(RVA = "0xB50B78", Offset = "0xB50B78", VA = "0xB50B78")]
		private void Stretch(Channel channel, TS_Mesh target, double from, double to)
		{
		}

		[Token(Token = "0x6001F2E")]
		[Address(RVA = "0xB517E8", Offset = "0xB517E8", VA = "0xB517E8")]
		public SplineMesh()
		{
		}
	}
	[Token(Token = "0x2000520")]
	[AddComponentMenu("Dreamteck/Splines/Spline Positioner")]
	public class SplinePositioner : SplineTracer
	{
		[Token(Token = "0x2000521")]
		public enum Mode
		{
			[Token(Token = "0x40021FF")]
			Percent,
			[Token(Token = "0x4002200")]
			Distance
		}

		[Token(Token = "0x40021F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[SerializeField]
		[HideInInspector]
		private Transform _applyTransform;

		[Token(Token = "0x40021FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[HideInInspector]
		[SerializeField]
		private GameObject _targetObject;

		[Token(Token = "0x40021FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[SerializeField]
		[HideInInspector]
		private double _position;

		[Token(Token = "0x40021FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[SerializeField]
		[HideInInspector]
		private float animPosition;

		[Token(Token = "0x40021FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		[SerializeField]
		[HideInInspector]
		private Mode _mode;

		[Token(Token = "0x17000447")]
		[Obsolete("Deprecated in 1.0.8. Use targetObject instead")]
		public Transform applyTransform
		{
			[Token(Token = "0x6001FB4")]
			[Address(RVA = "0xB56CF8", Offset = "0xB56CF8", VA = "0xB56CF8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001FB5")]
			[Address(RVA = "0xB56DD8", Offset = "0xB56DD8", VA = "0xB56DD8")]
			set
			{
			}
		}

		[Token(Token = "0x17000448")]
		public GameObject targetObject
		{
			[Token(Token = "0x6001FB6")]
			[Address(RVA = "0xB56D14", Offset = "0xB56D14", VA = "0xB56D14")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001FB7")]
			[Address(RVA = "0xB56E68", Offset = "0xB56E68", VA = "0xB56E68")]
			set
			{
			}
		}

		[Token(Token = "0x17000449")]
		public double position
		{
			[Token(Token = "0x6001FB8")]
			[Address(RVA = "0xB56F80", Offset = "0xB56F80", VA = "0xB56F80")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6001FB9")]
			[Address(RVA = "0xB56F88", Offset = "0xB56F88", VA = "0xB56F88")]
			set
			{
			}
		}

		[Token(Token = "0x1700044A")]
		public Mode mode
		{
			[Token(Token = "0x6001FBA")]
			[Address(RVA = "0xB56FD8", Offset = "0xB56FD8", VA = "0xB56FD8")]
			get
			{
				return default(Mode);
			}
			[Token(Token = "0x6001FBB")]
			[Address(RVA = "0xB56FE0", Offset = "0xB56FE0", VA = "0xB56FE0")]
			set
			{
			}
		}

		[Token(Token = "0x1700044B")]
		[Obsolete("Deprecated in 1.0.8. Use result instead")]
		public SplineResult positionResult
		{
			[Token(Token = "0x6001FBC")]
			[Address(RVA = "0xB57004", Offset = "0xB57004", VA = "0xB57004")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700044C")]
		[Obsolete("Deprecated in 1.0.8. Use offsettedResult instead")]
		public SplineResult offsettedPositionResult
		{
			[Token(Token = "0x6001FBD")]
			[Address(RVA = "0xB5700C", Offset = "0xB5700C", VA = "0xB5700C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001FBE")]
		[Address(RVA = "0xB573EC", Offset = "0xB573EC", VA = "0xB573EC", Slot = "10")]
		protected override void OnDidApplyAnimationProperties()
		{
		}

		[Token(Token = "0x6001FBF")]
		[Address(RVA = "0xB574B4", Offset = "0xB574B4", VA = "0xB574B4", Slot = "34")]
		protected override Transform GetTransform()
		{
			return null;
		}

		[Token(Token = "0x6001FC0")]
		[Address(RVA = "0xB574D0", Offset = "0xB574D0", VA = "0xB574D0", Slot = "32")]
		protected override Rigidbody GetRigidbody()
		{
			return null;
		}

		[Token(Token = "0x6001FC1")]
		[Address(RVA = "0xB57524", Offset = "0xB57524", VA = "0xB57524", Slot = "33")]
		protected override Rigidbody2D GetRigidbody2D()
		{
			return null;
		}

		[Token(Token = "0x6001FC2")]
		[Address(RVA = "0xB57578", Offset = "0xB57578", VA = "0xB57578", Slot = "21")]
		protected override void PostBuild()
		{
		}

		[Token(Token = "0x6001FC3")]
		[Address(RVA = "0xB57628", Offset = "0xB57628", VA = "0xB57628", Slot = "30")]
		public override void SetPercent(double percent, bool checkTriggers = false)
		{
		}

		[Token(Token = "0x6001FC4")]
		[Address(RVA = "0xB57708", Offset = "0xB57708", VA = "0xB57708", Slot = "31")]
		public override void SetDistance(float distance, bool checkTriggers = false)
		{
		}

		[Token(Token = "0x6001FC5")]
		[Address(RVA = "0xB57800", Offset = "0xB57800", VA = "0xB57800")]
		public SplinePositioner()
		{
		}
	}
	[Token(Token = "0x2000522")]
	[AddComponentMenu("Dreamteck/Splines/Spline Projector")]
	public class SplineProjector : SplineTracer
	{
		[Token(Token = "0x2000523")]
		public enum Mode
		{
			[Token(Token = "0x4002210")]
			Accurate,
			[Token(Token = "0x4002211")]
			Cached
		}

		[Token(Token = "0x4002201")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[HideInInspector]
		[SerializeField]
		private Mode _mode;

		[Token(Token = "0x4002202")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		[HideInInspector]
		[SerializeField]
		private bool _autoProject;

		[Token(Token = "0x4002203")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[SerializeField]
		[HideInInspector]
		private int _subdivide;

		[Token(Token = "0x4002204")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[HideInInspector]
		[SerializeField]
		private Transform _projectTarget;

		[Token(Token = "0x4002205")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[HideInInspector]
		[SerializeField]
		private Transform applyTarget;

		[Token(Token = "0x4002206")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[SerializeField]
		[HideInInspector]
		private GameObject _targetObject;

		[Token(Token = "0x4002207")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		[HideInInspector]
		[SerializeField]
		private TS_Transform finalTarget;

		[Token(Token = "0x4002208")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private double traceFromA;

		[Token(Token = "0x4002209")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private double traceToA;

		[Token(Token = "0x400220A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private double traceFromB;

		[Token(Token = "0x400220B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		[SerializeField]
		[HideInInspector]
		public Vector2 _offset;

		[Token(Token = "0x400220C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		[SerializeField]
		[HideInInspector]
		public Vector3 _rotationOffset;

		[Token(Token = "0x1700044D")]
		public Mode mode
		{
			[Token(Token = "0x6001FC6")]
			[Address(RVA = "0xB57934", Offset = "0xB57934", VA = "0xB57934")]
			get
			{
				return default(Mode);
			}
			[Token(Token = "0x6001FC7")]
			[Address(RVA = "0xB5793C", Offset = "0xB5793C", VA = "0xB5793C")]
			set
			{
			}
		}

		[Token(Token = "0x1700044E")]
		public bool autoProject
		{
			[Token(Token = "0x6001FC8")]
			[Address(RVA = "0xB57960", Offset = "0xB57960", VA = "0xB57960")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001FC9")]
			[Address(RVA = "0xB57968", Offset = "0xB57968", VA = "0xB57968")]
			set
			{
			}
		}

		[Token(Token = "0x1700044F")]
		public int subdivide
		{
			[Token(Token = "0x6001FCA")]
			[Address(RVA = "0xB57994", Offset = "0xB57994", VA = "0xB57994")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001FCB")]
			[Address(RVA = "0xB5799C", Offset = "0xB5799C", VA = "0xB5799C")]
			set
			{
			}
		}

		[Token(Token = "0x17000450")]
		public Transform projectTarget
		{
			[Token(Token = "0x6001FCC")]
			[Address(RVA = "0xB579C8", Offset = "0xB579C8", VA = "0xB579C8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001FCD")]
			[Address(RVA = "0xB57A48", Offset = "0xB57A48", VA = "0xB57A48")]
			set
			{
			}
		}

		[Token(Token = "0x17000451")]
		[Obsolete("Deprecated in 1.0.8. Use targetObject instead")]
		public Transform target
		{
			[Token(Token = "0x6001FCE")]
			[Address(RVA = "0xB57B18", Offset = "0xB57B18", VA = "0xB57B18")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001FCF")]
			[Address(RVA = "0xB57BE0", Offset = "0xB57BE0", VA = "0xB57BE0")]
			set
			{
			}
		}

		[Token(Token = "0x17000452")]
		public GameObject targetObject
		{
			[Token(Token = "0x6001FD0")]
			[Address(RVA = "0xB57B34", Offset = "0xB57B34", VA = "0xB57B34")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001FD1")]
			[Address(RVA = "0xB57C78", Offset = "0xB57C78", VA = "0xB57C78")]
			set
			{
			}
		}

		[Token(Token = "0x17000453")]
		[Obsolete("Deprecated in 1.0.8. Use result instead.")]
		public SplineResult projectResult
		{
			[Token(Token = "0x6001FD2")]
			[Address(RVA = "0xB57D18", Offset = "0xB57D18", VA = "0xB57D18")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x14000027")]
		public event SplineReachHandler onEndReached
		{
			[Token(Token = "0x6001FD3")]
			[Address(RVA = "0xB57D20", Offset = "0xB57D20", VA = "0xB57D20")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001FD4")]
			[Address(RVA = "0xB57DC0", Offset = "0xB57DC0", VA = "0xB57DC0")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000028")]
		public event SplineReachHandler onBeginningReached
		{
			[Token(Token = "0x6001FD5")]
			[Address(RVA = "0xB57E60", Offset = "0xB57E60", VA = "0xB57E60")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001FD6")]
			[Address(RVA = "0xB57F00", Offset = "0xB57F00", VA = "0xB57F00")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6001FD7")]
		[Address(RVA = "0xB57FA0", Offset = "0xB57FA0", VA = "0xB57FA0", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6001FD8")]
		[Address(RVA = "0xB581B8", Offset = "0xB581B8", VA = "0xB581B8", Slot = "34")]
		protected override Transform GetTransform()
		{
			return null;
		}

		[Token(Token = "0x6001FD9")]
		[Address(RVA = "0xB58250", Offset = "0xB58250", VA = "0xB58250", Slot = "32")]
		protected override Rigidbody GetRigidbody()
		{
			return null;
		}

		[Token(Token = "0x6001FDA")]
		[Address(RVA = "0xB582FC", Offset = "0xB582FC", VA = "0xB582FC", Slot = "33")]
		protected override Rigidbody2D GetRigidbody2D()
		{
			return null;
		}

		[Token(Token = "0x6001FDB")]
		[Address(RVA = "0xB580F8", Offset = "0xB580F8", VA = "0xB580F8")]
		private void GetProjectTarget()
		{
		}

		[Token(Token = "0x6001FDC")]
		[Address(RVA = "0xB583A8", Offset = "0xB583A8", VA = "0xB583A8", Slot = "19")]
		protected override void LateRun()
		{
		}

		[Token(Token = "0x6001FDD")]
		[Address(RVA = "0xB58470", Offset = "0xB58470", VA = "0xB58470", Slot = "21")]
		protected override void PostBuild()
		{
		}

		[Token(Token = "0x6001FDE")]
		[Address(RVA = "0xB58AC4", Offset = "0xB58AC4", VA = "0xB58AC4")]
		private void CheckTriggers()
		{
		}

		[Token(Token = "0x6001FDF")]
		[Address(RVA = "0xB58CC8", Offset = "0xB58CC8", VA = "0xB58CC8")]
		public void CalculateProjection()
		{
		}

		[Token(Token = "0x6001FE0")]
		[Address(RVA = "0xB58528", Offset = "0xB58528", VA = "0xB58528")]
		private void InternalCalculateProjection()
		{
		}

		[Token(Token = "0x6001FE1")]
		[Address(RVA = "0xB58D3C", Offset = "0xB58D3C", VA = "0xB58D3C")]
		public SplineProjector()
		{
		}
	}
	[Token(Token = "0x2000524")]
	[RequireComponent(typeof(MeshRenderer))]
	[RequireComponent(typeof(MeshFilter))]
	[AddComponentMenu("Dreamteck/Splines/Spline Renderer")]
	[ExecuteInEditMode]
	public class SplineRenderer : MeshGenerator
	{
		[Token(Token = "0x4002212")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[HideInInspector]
		public bool autoOrient;

		[Token(Token = "0x4002213")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		[HideInInspector]
		public int updateFrameInterval;

		[Token(Token = "0x4002214")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private int currentFrame;

		[Token(Token = "0x4002215")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		[HideInInspector]
		[SerializeField]
		private int _slices;

		[Token(Token = "0x4002216")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		[HideInInspector]
		[SerializeField]
		private Vector3 vertexDirection;

		[Token(Token = "0x4002217")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		private bool orthographic;

		[Token(Token = "0x4002218")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14D")]
		private bool init;

		[Token(Token = "0x17000454")]
		public int slices
		{
			[Token(Token = "0x6001FE2")]
			[Address(RVA = "0xB58DB8", Offset = "0xB58DB8", VA = "0xB58DB8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001FE3")]
			[Address(RVA = "0xB58DC0", Offset = "0xB58DC0", VA = "0xB58DC0")]
			set
			{
			}
		}

		[Token(Token = "0x6001FE4")]
		[Address(RVA = "0xB58DEC", Offset = "0xB58DEC", VA = "0xB58DEC", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6001FE5")]
		[Address(RVA = "0xB58E4C", Offset = "0xB58E4C", VA = "0xB58E4C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001FE6")]
		[Address(RVA = "0xB58EE0", Offset = "0xB58EE0", VA = "0xB58EE0", Slot = "19")]
		protected override void LateRun()
		{
		}

		[Token(Token = "0x6001FE7")]
		[Address(RVA = "0xB58F04", Offset = "0xB58F04", VA = "0xB58F04", Slot = "29")]
		protected override void BuildMesh()
		{
		}

		[Token(Token = "0x6001FE8")]
		[Address(RVA = "0xB59854", Offset = "0xB59854", VA = "0xB59854")]
		public void RenderWithCamera(Camera cam)
		{
		}

		[Token(Token = "0x6001FE9")]
		[Address(RVA = "0xB59980", Offset = "0xB59980", VA = "0xB59980")]
		private void OnWillRenderObject()
		{
		}

		[Token(Token = "0x6001FEA")]
		[Address(RVA = "0xB58FBC", Offset = "0xB58FBC", VA = "0xB58FBC")]
		public void GenerateVertices(Vector3 vertexDirection, bool orthoGraphic)
		{
		}

		[Token(Token = "0x6001FEB")]
		[Address(RVA = "0xB599F0", Offset = "0xB599F0", VA = "0xB599F0")]
		public SplineRenderer()
		{
		}
	}
	[Token(Token = "0x2000525")]
	public class SplineTracer : SplineUser
	{
		[Token(Token = "0x2000526")]
		public enum PhysicsMode
		{
			[Token(Token = "0x400222A")]
			Transform,
			[Token(Token = "0x400222B")]
			Rigidbody,
			[Token(Token = "0x400222C")]
			Rigidbody2D
		}

		[Token(Token = "0x4002219")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Trigger[] triggerInvokeQueue;

		[Token(Token = "0x400221A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private int addTriggerIndex;

		[Token(Token = "0x400221B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[HideInInspector]
		public bool applyDirectionRotation;

		[Token(Token = "0x400221C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		[HideInInspector]
		protected Spline.Direction _direction;

		[Token(Token = "0x400221D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[SerializeField]
		[HideInInspector]
		protected PhysicsMode _physicsMode;

		[Token(Token = "0x400221E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		[HideInInspector]
		protected TransformModule _motion;

		[Token(Token = "0x400221F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[FormerlySerializedAs("triggers")]
		[SerializeField]
		[HideInInspector]
		protected SplineTrigger[] triggers_old;

		[Token(Token = "0x4002220")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[HideInInspector]
		public Trigger[] triggers;

		[Token(Token = "0x4002221")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[HideInInspector]
		[SerializeField]
		protected CustomRotationModule _customRotations;

		[Token(Token = "0x4002222")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[HideInInspector]
		[SerializeField]
		protected CustomOffsetModule _customOffsets;

		[Token(Token = "0x4002223")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[HideInInspector]
		[SerializeField]
		protected Rigidbody targetRigidbody;

		[Token(Token = "0x4002224")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[HideInInspector]
		[SerializeField]
		protected Rigidbody2D targetRigidbody2D;

		[Token(Token = "0x4002225")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[HideInInspector]
		[SerializeField]
		protected Transform targetTransform;

		[Token(Token = "0x4002226")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[HideInInspector]
		[SerializeField]
		protected SplineResult _result;

		[Token(Token = "0x4002227")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private bool setPercentOnRebuild;

		[Token(Token = "0x4002228")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private double targetPercentOnRebuild;

		[Token(Token = "0x17000455")]
		public PhysicsMode physicsMode
		{
			[Token(Token = "0x6001FEC")]
			[Address(RVA = "0xB59A98", Offset = "0xB59A98", VA = "0xB59A98")]
			get
			{
				return default(PhysicsMode);
			}
			[Token(Token = "0x6001FED")]
			[Address(RVA = "0xB59AA0", Offset = "0xB59AA0", VA = "0xB59AA0")]
			set
			{
			}
		}

		[Token(Token = "0x17000456")]
		public TransformModule motion
		{
			[Token(Token = "0x6001FEE")]
			[Address(RVA = "0xB59AA8", Offset = "0xB59AA8", VA = "0xB59AA8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000457")]
		public CustomRotationModule customRotations
		{
			[Token(Token = "0x6001FEF")]
			[Address(RVA = "0xB59B14", Offset = "0xB59B14", VA = "0xB59B14")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000458")]
		public CustomOffsetModule customOffsets
		{
			[Token(Token = "0x6001FF0")]
			[Address(RVA = "0xB59B80", Offset = "0xB59B80", VA = "0xB59B80")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000459")]
		public SplineResult result
		{
			[Token(Token = "0x6001FF1")]
			[Address(RVA = "0xB59BEC", Offset = "0xB59BEC", VA = "0xB59BEC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700045A")]
		public SplineResult offsettedResult
		{
			[Token(Token = "0x6001FF2")]
			[Address(RVA = "0xB57010", Offset = "0xB57010", VA = "0xB57010")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700045B")]
		public Spline.Direction direction
		{
			[Token(Token = "0x6001FF3")]
			[Address(RVA = "0xB59BF4", Offset = "0xB59BF4", VA = "0xB59BF4")]
			get
			{
				return default(Spline.Direction);
			}
			[Token(Token = "0x6001FF4")]
			[Address(RVA = "0xB59BFC", Offset = "0xB59BFC", VA = "0xB59BFC")]
			set
			{
			}
		}

		[Token(Token = "0x1700045C")]
		public double clampedPercent
		{
			[Token(Token = "0x6001FF5")]
			[Address(RVA = "0xB59C14", Offset = "0xB59C14", VA = "0xB59C14")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x1700045D")]
		[Obsolete("Deprecated in version 1.0.7. Use motion.applyPosition instead")]
		public bool applyPosition
		{
			[Token(Token = "0x6001FF6")]
			[Address(RVA = "0xB59C5C", Offset = "0xB59C5C", VA = "0xB59C5C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001FF7")]
			[Address(RVA = "0xB59C78", Offset = "0xB59C78", VA = "0xB59C78")]
			set
			{
			}
		}

		[Token(Token = "0x1700045E")]
		[Obsolete("Deprecated in version 1.0.7. Use motion.applyRotation instead")]
		public bool applyRotation
		{
			[Token(Token = "0x6001FF8")]
			[Address(RVA = "0xB59C9C", Offset = "0xB59C9C", VA = "0xB59C9C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001FF9")]
			[Address(RVA = "0xB59CB8", Offset = "0xB59CB8", VA = "0xB59CB8")]
			set
			{
			}
		}

		[Token(Token = "0x1700045F")]
		[Obsolete("Deprecated in version 1.0.7. Use motion.applyScale instead")]
		public bool applyScale
		{
			[Token(Token = "0x6001FFA")]
			[Address(RVA = "0xB59CDC", Offset = "0xB59CDC", VA = "0xB59CDC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001FFB")]
			[Address(RVA = "0xB59CF8", Offset = "0xB59CF8", VA = "0xB59CF8")]
			set
			{
			}
		}

		[Token(Token = "0x17000460")]
		[Obsolete("Deprecated in version 1.0.7. User motion.offset instead")]
		public Vector2 offset
		{
			[Token(Token = "0x6001FFC")]
			[Address(RVA = "0xB59D1C", Offset = "0xB59D1C", VA = "0xB59D1C")]
			get
			{
				return default(Vector2);
			}
			[Token(Token = "0x6001FFD")]
			[Address(RVA = "0xB59D38", Offset = "0xB59D38", VA = "0xB59D38")]
			set
			{
			}
		}

		[Token(Token = "0x17000461")]
		[Obsolete("Deprecated in version 1.0.7. User motion.rotationOffset instead")]
		public Vector3 rotationOffset
		{
			[Token(Token = "0x6001FFE")]
			[Address(RVA = "0xB59D6C", Offset = "0xB59D6C", VA = "0xB59D6C")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001FFF")]
			[Address(RVA = "0xB59D8C", Offset = "0xB59D8C", VA = "0xB59D8C")]
			set
			{
			}
		}

		[Token(Token = "0x6002000")]
		[Address(RVA = "0xB59DD0", Offset = "0xB59DD0", VA = "0xB59DD0", Slot = "29")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6002001")]
		[Address(RVA = "0xB59DD4", Offset = "0xB59DD4", VA = "0xB59DD4")]
		public Node GetNextNode()
		{
			return null;
		}

		[Token(Token = "0x6002002")]
		[Address(RVA = "0xB59FA4", Offset = "0xB59FA4", VA = "0xB59FA4")]
		public void GetCurrentComputer(out SplineComputer comp, out double percent, out Spline.Direction dir)
		{
		}

		[Token(Token = "0x6002003")]
		[Address(RVA = "0xB59FCC", Offset = "0xB59FCC", VA = "0xB59FCC")]
		public void ResetTriggers()
		{
		}

		[Token(Token = "0x6002004")]
		[Address(RVA = "0xB57650", Offset = "0xB57650", VA = "0xB57650", Slot = "30")]
		public virtual void SetPercent(double percent, bool checkTriggers = false)
		{
		}

		[Token(Token = "0x6002005")]
		[Address(RVA = "0xB57734", Offset = "0xB57734", VA = "0xB57734", Slot = "31")]
		public virtual void SetDistance(float distance, bool checkTriggers = false)
		{
		}

		[Token(Token = "0x6002006")]
		[Address(RVA = "0xB575F4", Offset = "0xB575F4", VA = "0xB575F4", Slot = "21")]
		protected override void PostBuild()
		{
		}

		[Token(Token = "0x6002007")]
		[Address(RVA = "0xB5A470", Offset = "0xB5A470", VA = "0xB5A470", Slot = "13")]
		public override void EnterAddress(Node node, int pointIndex, Spline.Direction direction = Spline.Direction.Forward)
		{
		}

		[Token(Token = "0x6002008")]
		[Address(RVA = "0xB5A5C8", Offset = "0xB5A5C8", VA = "0xB5A5C8", Slot = "14")]
		public override void AddComputer(SplineComputer computer, int connectionIndex, int connectedIndex, Spline.Direction direction = Spline.Direction.Forward)
		{
		}

		[Token(Token = "0x6002009")]
		[Address(RVA = "0xB5A744", Offset = "0xB5A744", VA = "0xB5A744", Slot = "17")]
		public override void ExitAddress(int depth)
		{
		}

		[Token(Token = "0x600200A")]
		[Address(RVA = "0xB5A868", Offset = "0xB5A868", VA = "0xB5A868", Slot = "32")]
		protected virtual Rigidbody GetRigidbody()
		{
			return null;
		}

		[Token(Token = "0x600200B")]
		[Address(RVA = "0xB5A8B0", Offset = "0xB5A8B0", VA = "0xB5A8B0", Slot = "33")]
		protected virtual Rigidbody2D GetRigidbody2D()
		{
			return null;
		}

		[Token(Token = "0x600200C")]
		[Address(RVA = "0xB5A8F8", Offset = "0xB5A8F8", VA = "0xB5A8F8", Slot = "34")]
		protected virtual Transform GetTransform()
		{
			return null;
		}

		[Token(Token = "0x600200D")]
		[Address(RVA = "0xB587E8", Offset = "0xB587E8", VA = "0xB587E8")]
		protected void ApplyMotion()
		{
		}

		[Token(Token = "0x600200E")]
		[Address(RVA = "0xB58C2C", Offset = "0xB58C2C", VA = "0xB58C2C")]
		protected void CheckTriggers(double from, double to)
		{
		}

		[Token(Token = "0x600200F")]
		[Address(RVA = "0xB5A9F4", Offset = "0xB5A9F4", VA = "0xB5A9F4")]
		protected void CheckTriggersClipped(double from, double to)
		{
		}

		[Token(Token = "0x6002010")]
		[Address(RVA = "0xB58BC0", Offset = "0xB58BC0", VA = "0xB58BC0")]
		protected void InvokeTriggers()
		{
		}

		[Token(Token = "0x6002011")]
		[Address(RVA = "0xB5AA58", Offset = "0xB5AA58", VA = "0xB5AA58")]
		private bool MigrateTriggers()
		{
			return default(bool);
		}

		[Token(Token = "0x6002012")]
		[Address(RVA = "0xB56F08", Offset = "0xB56F08", VA = "0xB56F08")]
		protected void RefreshTargets()
		{
		}

		[Token(Token = "0x6002013")]
		[Address(RVA = "0xB5A900", Offset = "0xB5A900", VA = "0xB5A900")]
		private void AddTriggerToQueue(Trigger trigger)
		{
		}

		[Token(Token = "0x6002014")]
		[Address(RVA = "0xB5ACA4", Offset = "0xB5ACA4", VA = "0xB5ACA4")]
		private void AddTrigger(Trigger trigger)
		{
		}

		[Token(Token = "0x6002015")]
		[Address(RVA = "0xB5AD6C", Offset = "0xB5AD6C", VA = "0xB5AD6C")]
		public void AddTrigger(UnityAction call, double position = 0.0, Trigger.Type type = Trigger.Type.Double)
		{
		}

		[Token(Token = "0x6002016")]
		[Address(RVA = "0xB5AE08", Offset = "0xB5AE08", VA = "0xB5AE08")]
		public void AddTrigger(UnityAction<int> call, int value, double position = 0.0, Trigger.Type type = Trigger.Type.Double)
		{
		}

		[Token(Token = "0x6002017")]
		[Address(RVA = "0xB5AEB4", Offset = "0xB5AEB4", VA = "0xB5AEB4")]
		public void AddTrigger(UnityAction<float> call, float value, double position = 0.0, Trigger.Type type = Trigger.Type.Double)
		{
		}

		[Token(Token = "0x6002018")]
		[Address(RVA = "0xB5AF58", Offset = "0xB5AF58", VA = "0xB5AF58")]
		public void AddTrigger(UnityAction<double> call, double value, double position = 0.0, Trigger.Type type = Trigger.Type.Double)
		{
		}

		[Token(Token = "0x6002019")]
		[Address(RVA = "0xB5AFFC", Offset = "0xB5AFFC", VA = "0xB5AFFC")]
		public void AddTrigger(UnityAction<string> call, string value, double position = 0.0, Trigger.Type type = Trigger.Type.Double)
		{
		}

		[Token(Token = "0x600201A")]
		[Address(RVA = "0xB5B0A8", Offset = "0xB5B0A8", VA = "0xB5B0A8")]
		public void AddTrigger(UnityAction<bool> call, bool value, double position = 0.0, Trigger.Type type = Trigger.Type.Double)
		{
		}

		[Token(Token = "0x600201B")]
		[Address(RVA = "0xB5B154", Offset = "0xB5B154", VA = "0xB5B154")]
		public void AddTrigger(UnityAction<GameObject> call, GameObject value, double position = 0.0, Trigger.Type type = Trigger.Type.Double)
		{
		}

		[Token(Token = "0x600201C")]
		[Address(RVA = "0xB5B200", Offset = "0xB5B200", VA = "0xB5B200")]
		public void AddTrigger(UnityAction<Transform> call, Transform value, double position = 0.0, Trigger.Type type = Trigger.Type.Double)
		{
		}

		[Token(Token = "0x600201D")]
		[Address(RVA = "0xB5A430", Offset = "0xB5A430", VA = "0xB5A430")]
		public void EvaluateClipped(SplineResult result, double clippedPercent)
		{
		}

		[Token(Token = "0x600201E")]
		[Address(RVA = "0xB5B2C8", Offset = "0xB5B2C8", VA = "0xB5B2C8")]
		public Vector3 EvaluatePositionClipped(double clippedPercent)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600201F")]
		[Address(RVA = "0xB5A164", Offset = "0xB5A164", VA = "0xB5A164")]
		public double TravelClipped(double start, float distance, Spline.Direction direction)
		{
			return default(double);
		}

		[Token(Token = "0x6002020")]
		[Address(RVA = "0xB5B304", Offset = "0xB5B304", VA = "0xB5B304")]
		public SplineResult ProjectClipped(Vector3 point)
		{
			return null;
		}

		[Token(Token = "0x6002021")]
		[Address(RVA = "0xB57804", Offset = "0xB57804", VA = "0xB57804")]
		public SplineTracer()
		{
		}
	}
	[Token(Token = "0x2000527")]
	public class SplineUser : MonoBehaviour
	{
		[Token(Token = "0x2000528")]
		public enum UpdateMethod
		{
			[Token(Token = "0x400224C")]
			Update,
			[Token(Token = "0x400224D")]
			FixedUpdate,
			[Token(Token = "0x400224E")]
			LateUpdate
		}

		[Token(Token = "0x2000529")]
		[CompilerGenerated]
		private sealed class <UpdateSubscribersRoutine>d__82 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400224F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002250")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002251")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SplineUser <>4__this;

			[Token(Token = "0x17000473")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600206E")]
				[Address(RVA = "0xB60708", Offset = "0xB60708", VA = "0xB60708", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000474")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002070")]
				[Address(RVA = "0xB60750", Offset = "0xB60750", VA = "0xB60750", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600206B")]
			[Address(RVA = "0xB5CF40", Offset = "0xB5CF40", VA = "0xB5CF40")]
			[DebuggerHidden]
			public <UpdateSubscribersRoutine>d__82(int <>1__state)
			{
			}

			[Token(Token = "0x600206C")]
			[Address(RVA = "0xB606B0", Offset = "0xB606B0", VA = "0xB606B0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600206D")]
			[Address(RVA = "0xB606B4", Offset = "0xB606B4", VA = "0xB606B4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600206F")]
			[Address(RVA = "0xB60710", Offset = "0xB60710", VA = "0xB60710", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400222D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public SplineAddress _address;

		[Token(Token = "0x400222E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[HideInInspector]
		private SplineUser[] subscribers;

		[Token(Token = "0x400222F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public UpdateMethod updateMethod;

		[Token(Token = "0x4002230")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[HideInInspector]
		[SerializeField]
		private SplineUser _user;

		[Token(Token = "0x4002231")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[HideInInspector]
		private double _resolution;

		[Token(Token = "0x4002232")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		[SerializeField]
		private double _clipTo;

		[Token(Token = "0x4002233")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[HideInInspector]
		[SerializeField]
		private double _clipFrom;

		[Token(Token = "0x4002234")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		[HideInInspector]
		private bool _autoUpdate;

		[Token(Token = "0x4002235")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		[SerializeField]
		[HideInInspector]
		private bool _loopSamples;

		[Token(Token = "0x4002236")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
		[SerializeField]
		[HideInInspector]
		private bool _uniformSample;

		[Token(Token = "0x4002237")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x53")]
		[SerializeField]
		[HideInInspector]
		private bool _uniformPreserveClipRange;

		[Token(Token = "0x4002238")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		[HideInInspector]
		private SplineResult[] _samples;

		[Token(Token = "0x4002239")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		[HideInInspector]
		private SplineResult[] _clippedSamples;

		[Token(Token = "0x400223A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		[HideInInspector]
		private float animClipFrom;

		[Token(Token = "0x400223B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[SerializeField]
		[HideInInspector]
		private float animClipTo;

		[Token(Token = "0x400223C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		[HideInInspector]
		private double animResolution;

		[Token(Token = "0x400223D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		[HideInInspector]
		protected bool sampleUser;

		[Token(Token = "0x400223E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
		private bool rebuild;

		[Token(Token = "0x400223F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7A")]
		private bool sample;

		[Token(Token = "0x4002240")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7B")]
		private bool getClippedSamples;

		[Token(Token = "0x4002241")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected Transform trs;

		[Token(Token = "0x4002242")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[HideInInspector]
		public bool multithreaded;

		[Token(Token = "0x4002243")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x89")]
		[HideInInspector]
		public bool buildOnAwake;

		[Token(Token = "0x4002244")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8A")]
		[HideInInspector]
		public bool buildOnEnable;

		[Token(Token = "0x4002245")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Thread buildThread;

		[Token(Token = "0x4002246")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private bool postThread;

		[Token(Token = "0x4002247")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x99")]
		private bool threadSample;

		[Token(Token = "0x4002248")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9A")]
		private bool threadWork;

		[Token(Token = "0x4002249")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9B")]
		private bool _threadWorking;

		[Token(Token = "0x400224A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private object locker;

		[Token(Token = "0x17000462")]
		public SplineUser user
		{
			[Token(Token = "0x6002022")]
			[Address(RVA = "0xB5B400", Offset = "0xB5B400", VA = "0xB5B400")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002023")]
			[Address(RVA = "0xB5B408", Offset = "0xB5B408", VA = "0xB5B408")]
			set
			{
			}
		}

		[Token(Token = "0x17000463")]
		public SplineUser rootUser
		{
			[Token(Token = "0x6002024")]
			[Address(RVA = "0xB5B664", Offset = "0xB5B664", VA = "0xB5B664")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000464")]
		public SplineComputer computer
		{
			[Token(Token = "0x6002025")]
			[Address(RVA = "0xB58CFC", Offset = "0xB58CFC", VA = "0xB58CFC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002026")]
			[Address(RVA = "0xB5B754", Offset = "0xB5B754", VA = "0xB5B754")]
			set
			{
			}
		}

		[Token(Token = "0x17000465")]
		public double resolution
		{
			[Token(Token = "0x6002027")]
			[Address(RVA = "0xB5BDAC", Offset = "0xB5BDAC", VA = "0xB5BDAC")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6002028")]
			[Address(RVA = "0xB5BDB4", Offset = "0xB5BDB4", VA = "0xB5BDB4")]
			set
			{
			}
		}

		[Token(Token = "0x17000466")]
		public double clipFrom
		{
			[Token(Token = "0x6002029")]
			[Address(RVA = "0xB5BDEC", Offset = "0xB5BDEC", VA = "0xB5BDEC")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x600202A")]
			[Address(RVA = "0xB5BDF4", Offset = "0xB5BDF4", VA = "0xB5BDF4")]
			set
			{
			}
		}

		[Token(Token = "0x17000467")]
		public double clipTo
		{
			[Token(Token = "0x600202B")]
			[Address(RVA = "0xB5BE80", Offset = "0xB5BE80", VA = "0xB5BE80")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x600202C")]
			[Address(RVA = "0xB5BE88", Offset = "0xB5BE88", VA = "0xB5BE88")]
			set
			{
			}
		}

		[Token(Token = "0x17000468")]
		public bool autoUpdate
		{
			[Token(Token = "0x600202D")]
			[Address(RVA = "0xB5BF14", Offset = "0xB5BF14", VA = "0xB5BF14")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600202E")]
			[Address(RVA = "0xB5BF1C", Offset = "0xB5BF1C", VA = "0xB5BF1C")]
			set
			{
			}
		}

		[Token(Token = "0x17000469")]
		public bool loopSamples
		{
			[Token(Token = "0x600202F")]
			[Address(RVA = "0xB5BF48", Offset = "0xB5BF48", VA = "0xB5BF48")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002030")]
			[Address(RVA = "0xB5BF50", Offset = "0xB5BF50", VA = "0xB5BF50")]
			set
			{
			}
		}

		[Token(Token = "0x1700046A")]
		public bool uniformSample
		{
			[Token(Token = "0x6002031")]
			[Address(RVA = "0xB5BF7C", Offset = "0xB5BF7C", VA = "0xB5BF7C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002032")]
			[Address(RVA = "0xB5BF84", Offset = "0xB5BF84", VA = "0xB5BF84")]
			set
			{
			}
		}

		[Token(Token = "0x1700046B")]
		public bool uniformPreserveClipRange
		{
			[Token(Token = "0x6002033")]
			[Address(RVA = "0xB5BFAC", Offset = "0xB5BFAC", VA = "0xB5BFAC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002034")]
			[Address(RVA = "0xB5BFB4", Offset = "0xB5BFB4", VA = "0xB5BFB4")]
			set
			{
			}
		}

		[Token(Token = "0x1700046C")]
		public double span
		{
			[Token(Token = "0x6002035")]
			[Address(RVA = "0xB5BFDC", Offset = "0xB5BFDC", VA = "0xB5BFDC")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x1700046D")]
		public SplineAddress address
		{
			[Token(Token = "0x6002036")]
			[Address(RVA = "0xB5BD3C", Offset = "0xB5BD3C", VA = "0xB5BD3C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700046E")]
		public bool samplesAreLooped
		{
			[Token(Token = "0x6002037")]
			[Address(RVA = "0xB5C010", Offset = "0xB5C010", VA = "0xB5C010")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700046F")]
		public SplineResult[] samples
		{
			[Token(Token = "0x6002038")]
			[Address(RVA = "0xB58D18", Offset = "0xB58D18", VA = "0xB58D18")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000470")]
		public SplineResult[] clippedSamples
		{
			[Token(Token = "0x6002039")]
			[Address(RVA = "0xB59814", Offset = "0xB59814", VA = "0xB59814")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000471")]
		protected bool willRebuild
		{
			[Token(Token = "0x600203A")]
			[Address(RVA = "0xB5CBE4", Offset = "0xB5CBE4", VA = "0xB5CBE4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000472")]
		public bool threadWorking
		{
			[Token(Token = "0x600203B")]
			[Address(RVA = "0xB5CBEC", Offset = "0xB5CBEC", VA = "0xB5CBEC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600203C")]
		[Address(RVA = "0xB57FB8", Offset = "0xB57FB8", VA = "0xB57FB8", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x600203D")]
		[Address(RVA = "0xB5CCAC", Offset = "0xB5CCAC", VA = "0xB5CCAC", Slot = "5")]
		protected virtual void Reset()
		{
		}

		[Token(Token = "0x600203E")]
		[Address(RVA = "0xB5CCB0", Offset = "0xB5CCB0", VA = "0xB5CCB0", Slot = "6")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x600203F")]
		[Address(RVA = "0xB5CD64", Offset = "0xB5CD64", VA = "0xB5CD64", Slot = "7")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6002040")]
		[Address(RVA = "0xB5CDFC", Offset = "0xB5CDFC", VA = "0xB5CDFC", Slot = "8")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6002041")]
		[Address(RVA = "0xB5CE38", Offset = "0xB5CE38", VA = "0xB5CE38", Slot = "9")]
		protected virtual void OnApplicationQuit()
		{
		}

		[Token(Token = "0x6002042")]
		[Address(RVA = "0xB5741C", Offset = "0xB5741C", VA = "0xB5741C", Slot = "10")]
		protected virtual void OnDidApplyAnimationProperties()
		{
		}

		[Token(Token = "0x6002043")]
		[Address(RVA = "0xB5CE74", Offset = "0xB5CE74", VA = "0xB5CE74", Slot = "11")]
		public virtual void Rebuild(bool sampleComputer)
		{
		}

		[Token(Token = "0x6002044")]
		[Address(RVA = "0xB5CED8", Offset = "0xB5CED8", VA = "0xB5CED8")]
		[IteratorStateMachine(typeof(<UpdateSubscribersRoutine>d__82))]
		private IEnumerator UpdateSubscribersRoutine()
		{
			return null;
		}

		[Token(Token = "0x6002045")]
		[Address(RVA = "0xB5CF68", Offset = "0xB5CF68", VA = "0xB5CF68", Slot = "12")]
		public virtual void RebuildImmediate(bool sampleComputer)
		{
		}

		[Token(Token = "0x6002046")]
		[Address(RVA = "0xB5D78C", Offset = "0xB5D78C", VA = "0xB5D78C")]
		public void GetClippedSamplesImmediate()
		{
		}

		[Token(Token = "0x6002047")]
		[Address(RVA = "0xB5A524", Offset = "0xB5A524", VA = "0xB5A524", Slot = "13")]
		public virtual void EnterAddress(Node node, int connectionIndex, Spline.Direction direction = Spline.Direction.Forward)
		{
		}

		[Token(Token = "0x6002048")]
		[Address(RVA = "0xB5A68C", Offset = "0xB5A68C", VA = "0xB5A68C", Slot = "14")]
		public virtual void AddComputer(SplineComputer computer, int connectionIndex, int connectedIndex, Spline.Direction direction = Spline.Direction.Forward)
		{
		}

		[Token(Token = "0x6002049")]
		[Address(RVA = "0xB5D7B4", Offset = "0xB5D7B4", VA = "0xB5D7B4", Slot = "15")]
		public virtual void CollapseAddress()
		{
		}

		[Token(Token = "0x600204A")]
		[Address(RVA = "0xB5D7F8", Offset = "0xB5D7F8", VA = "0xB5D7F8", Slot = "16")]
		public virtual void ClearAddress()
		{
		}

		[Token(Token = "0x600204B")]
		[Address(RVA = "0xB5A7E0", Offset = "0xB5A7E0", VA = "0xB5A7E0", Slot = "17")]
		public virtual void ExitAddress(int depth)
		{
		}

		[Token(Token = "0x600204C")]
		[Address(RVA = "0xB5D878", Offset = "0xB5D878", VA = "0xB5D878")]
		private void Update()
		{
		}

		[Token(Token = "0x600204D")]
		[Address(RVA = "0xB5DAF0", Offset = "0xB5DAF0", VA = "0xB5DAF0")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600204E")]
		[Address(RVA = "0xB5DB04", Offset = "0xB5DB04", VA = "0xB5DB04")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x600204F")]
		[Address(RVA = "0xB5D690", Offset = "0xB5D690", VA = "0xB5D690")]
		private void UpdateSubscribers()
		{
		}

		[Token(Token = "0x6002050")]
		[Address(RVA = "0xB5D888", Offset = "0xB5D888", VA = "0xB5D888")]
		private void RunMain()
		{
		}

		[Token(Token = "0x6002051")]
		[Address(RVA = "0xB5DC34", Offset = "0xB5DC34", VA = "0xB5DC34")]
		private void RunThread()
		{
		}

		[Token(Token = "0x6002052")]
		[Address(RVA = "0xB5DE98", Offset = "0xB5DE98", VA = "0xB5DE98", Slot = "18")]
		protected virtual void Run()
		{
		}

		[Token(Token = "0x6002053")]
		[Address(RVA = "0xB5846C", Offset = "0xB5846C", VA = "0xB5846C", Slot = "19")]
		protected virtual void LateRun()
		{
		}

		[Token(Token = "0x6002054")]
		[Address(RVA = "0xB5DE9C", Offset = "0xB5DE9C", VA = "0xB5DE9C", Slot = "20")]
		protected virtual void Build()
		{
		}

		[Token(Token = "0x6002055")]
		[Address(RVA = "0xB5DEA0", Offset = "0xB5DEA0", VA = "0xB5DEA0", Slot = "21")]
		protected virtual void PostBuild()
		{
		}

		[Token(Token = "0x6002056")]
		[Address(RVA = "0xB5DEA4", Offset = "0xB5DEA4", VA = "0xB5DEA4")]
		public void SetClipRange(double from, double to)
		{
		}

		[Token(Token = "0x6002057")]
		[Address(RVA = "0xB5D048", Offset = "0xB5D048", VA = "0xB5D048")]
		private void SampleComputer()
		{
		}

		[Token(Token = "0x6002058")]
		[Address(RVA = "0xB5C0CC", Offset = "0xB5C0CC", VA = "0xB5C0CC")]
		private void GetClippedSamples()
		{
		}

		[Token(Token = "0x6002059")]
		[Address(RVA = "0xB5DF28", Offset = "0xB5DF28", VA = "0xB5DF28", Slot = "22")]
		public virtual SplineResult Evaluate(double percent)
		{
			return null;
		}

		[Token(Token = "0x600205A")]
		[Address(RVA = "0xB5E4B4", Offset = "0xB5E4B4", VA = "0xB5E4B4", Slot = "23")]
		public virtual void Evaluate(SplineResult result, double percent)
		{
		}

		[Token(Token = "0x600205B")]
		[Address(RVA = "0xB5EA08", Offset = "0xB5EA08", VA = "0xB5EA08", Slot = "24")]
		public virtual Vector3 EvaluatePosition(double percent, bool overrideUniformClipRange = false)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600205C")]
		[Address(RVA = "0xB59C40", Offset = "0xB59C40", VA = "0xB59C40")]
		public double ClipPercent(double percent)
		{
			return default(double);
		}

		[Token(Token = "0x600205D")]
		[Address(RVA = "0xB5EF9C", Offset = "0xB5EF9C", VA = "0xB5EF9C")]
		public void ClipPercent(ref double percent)
		{
		}

		[Token(Token = "0x600205E")]
		[Address(RVA = "0xB5B2AC", Offset = "0xB5B2AC", VA = "0xB5B2AC")]
		public double UnclipPercent(double percent)
		{
			return default(double);
		}

		[Token(Token = "0x600205F")]
		[Address(RVA = "0xB5A02C", Offset = "0xB5A02C", VA = "0xB5A02C")]
		public void UnclipPercent(ref double percent)
		{
		}

		[Token(Token = "0x6002060")]
		[Address(RVA = "0xB5E478", Offset = "0xB5E478", VA = "0xB5E478")]
		public int GetSampleIndex(double percent)
		{
			return default(int);
		}

		[Token(Token = "0x6002061")]
		[Address(RVA = "0xB5F0D4", Offset = "0xB5F0D4", VA = "0xB5F0D4")]
		public int GetClippedSampleIndex(double percent)
		{
			return default(int);
		}

		[Token(Token = "0x6002062")]
		[Address(RVA = "0xB5F10C", Offset = "0xB5F10C", VA = "0xB5F10C", Slot = "25")]
		public virtual SplineResult Project(Vector3 point, double from = 0.0, double to = 1.0)
		{
			return null;
		}

		[Token(Token = "0x6002063")]
		[Address(RVA = "0xB5F1C4", Offset = "0xB5F1C4", VA = "0xB5F1C4", Slot = "26")]
		public virtual void Project(SplineResult result, Vector3 point, double from = 0.0, double to = 1.0)
		{
		}

		[Token(Token = "0x6002064")]
		[Address(RVA = "0xB60110", Offset = "0xB60110", VA = "0xB60110", Slot = "27")]
		public virtual double Travel(double start, float distance, Spline.Direction direction)
		{
			return default(double);
		}

		[Token(Token = "0x6002065")]
		[Address(RVA = "0xB5BB4C", Offset = "0xB5BB4C", VA = "0xB5BB4C")]
		private void Subscribe(SplineUser input)
		{
		}

		[Token(Token = "0x6002066")]
		[Address(RVA = "0xB5B980", Offset = "0xB5B980", VA = "0xB5B980")]
		private void Unsubscribe(SplineUser input)
		{
		}

		[Token(Token = "0x6002067")]
		[Address(RVA = "0xB60474", Offset = "0xB60474", VA = "0xB60474", Slot = "28")]
		public virtual float CalculateLength(double from = 0.0, double to = 1.0)
		{
			return default(float);
		}

		[Token(Token = "0x6002068")]
		[Address(RVA = "0xB5DB18", Offset = "0xB5DB18", VA = "0xB5DB18")]
		private void RemoveSubscriber(int index)
		{
		}

		[Token(Token = "0x6002069")]
		[Address(RVA = "0xB5CBF4", Offset = "0xB5CBF4", VA = "0xB5CBF4")]
		private bool IsSubscribed(SplineUser user)
		{
			return default(bool);
		}

		[Token(Token = "0x600206A")]
		[Address(RVA = "0xB5B318", Offset = "0xB5B318", VA = "0xB5B318")]
		public SplineUser()
		{
		}
	}
	[Token(Token = "0x200052A")]
	[RequireComponent(typeof(MeshFilter))]
	[RequireComponent(typeof(MeshRenderer))]
	[AddComponentMenu("Dreamteck/Splines/Surface Generator")]
	public class SurfaceGenerator : MeshGenerator
	{
		[Token(Token = "0x4002252")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[HideInInspector]
		[SerializeField]
		private float _expand;

		[Token(Token = "0x4002253")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		[SerializeField]
		[HideInInspector]
		private float _extrude;

		[Token(Token = "0x4002254")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[SerializeField]
		[HideInInspector]
		private Vector2 _sideUvScale;

		[Token(Token = "0x4002255")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		[SerializeField]
		[HideInInspector]
		private Vector2 _sideUvOffset;

		[Token(Token = "0x4002256")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		[SerializeField]
		[HideInInspector]
		private SplineComputer _extrudeComputer;

		[Token(Token = "0x4002257")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		[SerializeField]
		[HideInInspector]
		private SplineResult[] extrudeResults;

		[Token(Token = "0x4002258")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		[HideInInspector]
		[SerializeField]
		private Vector3[] identityVertices;

		[Token(Token = "0x4002259")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		[SerializeField]
		[HideInInspector]
		private Vector3[] identityNormals;

		[Token(Token = "0x400225A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		[SerializeField]
		[HideInInspector]
		private Vector2[] projectedVerts;

		[Token(Token = "0x400225B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		[HideInInspector]
		[SerializeField]
		private int[] capTris;

		[Token(Token = "0x400225C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		[SerializeField]
		[HideInInspector]
		private int[] wallTris;

		[Token(Token = "0x400225D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		[SerializeField]
		[HideInInspector]
		private double _extrudeFrom;

		[Token(Token = "0x400225E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		[HideInInspector]
		[SerializeField]
		private double _extrudeTo;

		[Token(Token = "0x400225F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		[HideInInspector]
		[SerializeField]
		private bool _uniformUvs;

		[Token(Token = "0x17000475")]
		public float expand
		{
			[Token(Token = "0x6002071")]
			[Address(RVA = "0xB60758", Offset = "0xB60758", VA = "0xB60758")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002072")]
			[Address(RVA = "0xB60760", Offset = "0xB60760", VA = "0xB60760")]
			set
			{
			}
		}

		[Token(Token = "0x17000476")]
		public float extrude
		{
			[Token(Token = "0x6002073")]
			[Address(RVA = "0xB60784", Offset = "0xB60784", VA = "0xB60784")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002074")]
			[Address(RVA = "0xB6078C", Offset = "0xB6078C", VA = "0xB6078C")]
			set
			{
			}
		}

		[Token(Token = "0x17000477")]
		public double extrudeClipFrom
		{
			[Token(Token = "0x6002075")]
			[Address(RVA = "0xB607B0", Offset = "0xB607B0", VA = "0xB607B0")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6002076")]
			[Address(RVA = "0xB607B8", Offset = "0xB607B8", VA = "0xB607B8")]
			set
			{
			}
		}

		[Token(Token = "0x17000478")]
		public double extrudeClipTo
		{
			[Token(Token = "0x6002077")]
			[Address(RVA = "0xB607DC", Offset = "0xB607DC", VA = "0xB607DC")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6002078")]
			[Address(RVA = "0xB607E4", Offset = "0xB607E4", VA = "0xB607E4")]
			set
			{
			}
		}

		[Token(Token = "0x17000479")]
		public Vector2 sideUvScale
		{
			[Token(Token = "0x6002079")]
			[Address(RVA = "0xB60808", Offset = "0xB60808", VA = "0xB60808")]
			get
			{
				return default(Vector2);
			}
			[Token(Token = "0x600207A")]
			[Address(RVA = "0xB60814", Offset = "0xB60814", VA = "0xB60814")]
			set
			{
			}
		}

		[Token(Token = "0x1700047A")]
		public Vector2 sideUvOffset
		{
			[Token(Token = "0x600207B")]
			[Address(RVA = "0xB6085C", Offset = "0xB6085C", VA = "0xB6085C")]
			get
			{
				return default(Vector2);
			}
			[Token(Token = "0x600207C")]
			[Address(RVA = "0xB60868", Offset = "0xB60868", VA = "0xB60868")]
			set
			{
			}
		}

		[Token(Token = "0x1700047B")]
		public SplineComputer extrudeComputer
		{
			[Token(Token = "0x600207D")]
			[Address(RVA = "0xB608B0", Offset = "0xB608B0", VA = "0xB608B0")]
			get
			{
				return null;
			}
			[Token(Token = "0x600207E")]
			[Address(RVA = "0xB608B8", Offset = "0xB608B8", VA = "0xB608B8")]
			set
			{
			}
		}

		[Token(Token = "0x1700047C")]
		public bool uniformUvs
		{
			[Token(Token = "0x600207F")]
			[Address(RVA = "0xB609C8", Offset = "0xB609C8", VA = "0xB609C8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002080")]
			[Address(RVA = "0xB609D0", Offset = "0xB609D0", VA = "0xB609D0")]
			set
			{
			}
		}

		[Token(Token = "0x6002081")]
		[Address(RVA = "0xB609F8", Offset = "0xB609F8", VA = "0xB609F8", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6002082")]
		[Address(RVA = "0xB60A58", Offset = "0xB60A58", VA = "0xB60A58", Slot = "29")]
		protected override void BuildMesh()
		{
		}

		[Token(Token = "0x6002083")]
		[Address(RVA = "0xB60A98", Offset = "0xB60A98", VA = "0xB60A98")]
		public void Generate()
		{
		}

		[Token(Token = "0x6002084")]
		[Address(RVA = "0xB628C0", Offset = "0xB628C0", VA = "0xB628C0")]
		private void GenerateCapTris(bool flip)
		{
		}

		[Token(Token = "0x6002085")]
		[Address(RVA = "0xB62C10", Offset = "0xB62C10", VA = "0xB62C10")]
		private int WriteTris(ref int[] tris, ref int[] target, int vertexOffset, int trisOffset, bool flip)
		{
			return default(int);
		}

		[Token(Token = "0x6002086")]
		[Address(RVA = "0xB62804", Offset = "0xB62804", VA = "0xB62804")]
		private bool IsClockwise(Vector2[] points2D)
		{
			return default(bool);
		}

		[Token(Token = "0x6002087")]
		[Address(RVA = "0xB62960", Offset = "0xB62960", VA = "0xB62960")]
		private void GetIdentityVerts(Vector3 center, Vector3 normal, bool clockwise)
		{
		}

		[Token(Token = "0x6002088")]
		[Address(RVA = "0xB62370", Offset = "0xB62370", VA = "0xB62370")]
		private void GetProjectedVertices(Vector3[] points, Vector3 normal, Vector3 center, int count = 0)
		{
		}

		[Token(Token = "0x6002089")]
		[Address(RVA = "0xB62D6C", Offset = "0xB62D6C", VA = "0xB62D6C")]
		public SurfaceGenerator()
		{
		}
	}
	[Token(Token = "0x200052B")]
	[RequireComponent(typeof(MeshFilter))]
	[RequireComponent(typeof(MeshRenderer))]
	[AddComponentMenu("Dreamteck/Splines/Tube Generator")]
	public class TubeGenerator : MeshGenerator
	{
		[Token(Token = "0x200052C")]
		public enum CapMethod
		{
			[Token(Token = "0x400226A")]
			None,
			[Token(Token = "0x400226B")]
			Flat,
			[Token(Token = "0x400226C")]
			Round
		}

		[Token(Token = "0x4002260")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[HideInInspector]
		[SerializeField]
		private int _sides;

		[Token(Token = "0x4002261")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		[HideInInspector]
		[SerializeField]
		private int _roundCapLatitude;

		[Token(Token = "0x4002262")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[HideInInspector]
		[SerializeField]
		private CapMethod _capMode;

		[Token(Token = "0x4002263")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		[SerializeField]
		[HideInInspector]
		private float _integrity;

		[Token(Token = "0x4002264")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		[SerializeField]
		[HideInInspector]
		private float _capUVScale;

		[Token(Token = "0x4002265")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
		private int bodyVertexCount;

		[Token(Token = "0x4002266")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private int bodyTrisCount;

		[Token(Token = "0x4002267")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		private int capVertexCount;

		[Token(Token = "0x4002268")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private int capTrisCount;

		[Token(Token = "0x1700047D")]
		public int sides
		{
			[Token(Token = "0x600208A")]
			[Address(RVA = "0xB62EF8", Offset = "0xB62EF8", VA = "0xB62EF8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600208B")]
			[Address(RVA = "0xB62F00", Offset = "0xB62F00", VA = "0xB62F00")]
			set
			{
			}
		}

		[Token(Token = "0x1700047E")]
		public CapMethod capMode
		{
			[Token(Token = "0x600208C")]
			[Address(RVA = "0xB62F30", Offset = "0xB62F30", VA = "0xB62F30")]
			get
			{
				return default(CapMethod);
			}
			[Token(Token = "0x600208D")]
			[Address(RVA = "0xB62F38", Offset = "0xB62F38", VA = "0xB62F38")]
			set
			{
			}
		}

		[Token(Token = "0x1700047F")]
		public int roundCapLatitude
		{
			[Token(Token = "0x600208E")]
			[Address(RVA = "0xB62F5C", Offset = "0xB62F5C", VA = "0xB62F5C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600208F")]
			[Address(RVA = "0xB62F64", Offset = "0xB62F64", VA = "0xB62F64")]
			set
			{
			}
		}

		[Token(Token = "0x17000480")]
		public float integrity
		{
			[Token(Token = "0x6002090")]
			[Address(RVA = "0xB62F9C", Offset = "0xB62F9C", VA = "0xB62F9C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002091")]
			[Address(RVA = "0xB62FA4", Offset = "0xB62FA4", VA = "0xB62FA4")]
			set
			{
			}
		}

		[Token(Token = "0x17000481")]
		public float capUVScale
		{
			[Token(Token = "0x6002092")]
			[Address(RVA = "0xB62FC8", Offset = "0xB62FC8", VA = "0xB62FC8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002093")]
			[Address(RVA = "0xB62FD0", Offset = "0xB62FD0", VA = "0xB62FD0")]
			set
			{
			}
		}

		[Token(Token = "0x17000482")]
		private bool useCap
		{
			[Token(Token = "0x6002094")]
			[Address(RVA = "0xB62FF4", Offset = "0xB62FF4", VA = "0xB62FF4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6002095")]
		[Address(RVA = "0xB63164", Offset = "0xB63164", VA = "0xB63164", Slot = "5")]
		protected override void Reset()
		{
		}

		[Token(Token = "0x6002096")]
		[Address(RVA = "0xB6316C", Offset = "0xB6316C", VA = "0xB6316C", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6002097")]
		[Address(RVA = "0xB631CC", Offset = "0xB631CC", VA = "0xB631CC", Slot = "29")]
		protected override void BuildMesh()
		{
		}

		[Token(Token = "0x6002098")]
		[Address(RVA = "0xB63348", Offset = "0xB63348", VA = "0xB63348")]
		private void Generate()
		{
		}

		[Token(Token = "0x6002099")]
		[Address(RVA = "0xB63A44", Offset = "0xB63A44", VA = "0xB63A44")]
		private void GenerateFlatCaps()
		{
		}

		[Token(Token = "0x600209A")]
		[Address(RVA = "0xB64120", Offset = "0xB64120", VA = "0xB64120")]
		private void GenerateRoundCaps()
		{
		}

		[Token(Token = "0x600209B")]
		[Address(RVA = "0xB653EC", Offset = "0xB653EC", VA = "0xB653EC")]
		public TubeGenerator()
		{
		}
	}
	[Token(Token = "0x200052D")]
	[RequireComponent(typeof(MeshRenderer))]
	[RequireComponent(typeof(MeshFilter))]
	[AddComponentMenu("Dreamteck/Splines/Waveform Generator")]
	public class WaveformGenerator : MeshGenerator
	{
		[Token(Token = "0x200052E")]
		public enum Axis
		{
			[Token(Token = "0x4002272")]
			X,
			[Token(Token = "0x4002273")]
			Y,
			[Token(Token = "0x4002274")]
			Z
		}

		[Token(Token = "0x200052F")]
		public enum Space
		{
			[Token(Token = "0x4002276")]
			World,
			[Token(Token = "0x4002277")]
			Local
		}

		[Token(Token = "0x2000530")]
		public enum UVWrapMode
		{
			[Token(Token = "0x4002279")]
			Clamp,
			[Token(Token = "0x400227A")]
			UniformX,
			[Token(Token = "0x400227B")]
			UniformY,
			[Token(Token = "0x400227C")]
			Uniform
		}

		[Token(Token = "0x400226D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[SerializeField]
		[HideInInspector]
		private Axis _axis;

		[Token(Token = "0x400226E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		[SerializeField]
		[HideInInspector]
		private bool _symmetry;

		[Token(Token = "0x400226F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[SerializeField]
		[HideInInspector]
		private UVWrapMode _uvWrapMode;

		[Token(Token = "0x4002270")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		[SerializeField]
		[HideInInspector]
		private int _slices;

		[Token(Token = "0x17000483")]
		public Axis axis
		{
			[Token(Token = "0x600209C")]
			[Address(RVA = "0xB65460", Offset = "0xB65460", VA = "0xB65460")]
			get
			{
				return default(Axis);
			}
			[Token(Token = "0x600209D")]
			[Address(RVA = "0xB65468", Offset = "0xB65468", VA = "0xB65468")]
			set
			{
			}
		}

		[Token(Token = "0x17000484")]
		public bool symmetry
		{
			[Token(Token = "0x600209E")]
			[Address(RVA = "0xB6548C", Offset = "0xB6548C", VA = "0xB6548C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600209F")]
			[Address(RVA = "0xB65494", Offset = "0xB65494", VA = "0xB65494")]
			set
			{
			}
		}

		[Token(Token = "0x17000485")]
		public UVWrapMode uvWrapMode
		{
			[Token(Token = "0x60020A0")]
			[Address(RVA = "0xB654BC", Offset = "0xB654BC", VA = "0xB654BC")]
			get
			{
				return default(UVWrapMode);
			}
			[Token(Token = "0x60020A1")]
			[Address(RVA = "0xB654C4", Offset = "0xB654C4", VA = "0xB654C4")]
			set
			{
			}
		}

		[Token(Token = "0x17000486")]
		public int slices
		{
			[Token(Token = "0x60020A2")]
			[Address(RVA = "0xB654E8", Offset = "0xB654E8", VA = "0xB654E8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60020A3")]
			[Address(RVA = "0xB654F0", Offset = "0xB654F0", VA = "0xB654F0")]
			set
			{
			}
		}

		[Token(Token = "0x60020A4")]
		[Address(RVA = "0xB6551C", Offset = "0xB6551C", VA = "0xB6551C", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x60020A5")]
		[Address(RVA = "0xB6557C", Offset = "0xB6557C", VA = "0xB6557C", Slot = "29")]
		protected override void BuildMesh()
		{
		}

		[Token(Token = "0x60020A6")]
		[Address(RVA = "0xB65EAC", Offset = "0xB65EAC", VA = "0xB65EAC", Slot = "20")]
		protected override void Build()
		{
		}

		[Token(Token = "0x60020A7")]
		[Address(RVA = "0xB65EB4", Offset = "0xB65EB4", VA = "0xB65EB4", Slot = "19")]
		protected override void LateRun()
		{
		}

		[Token(Token = "0x60020A8")]
		[Address(RVA = "0xB65598", Offset = "0xB65598", VA = "0xB65598")]
		private void Generate()
		{
		}

		[Token(Token = "0x60020A9")]
		[Address(RVA = "0xB65EBC", Offset = "0xB65EBC", VA = "0xB65EBC")]
		public WaveformGenerator()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000531")]
	public class CustomOffsetModule
	{
		[Serializable]
		[Token(Token = "0x2000532")]
		public class Key
		{
			[Token(Token = "0x400227F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[SerializeField]
			private Vector2 _offset;

			[Token(Token = "0x4002280")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[SerializeField]
			private double _from;

			[Token(Token = "0x4002281")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[SerializeField]
			private double _to;

			[Token(Token = "0x4002282")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[SerializeField]
			private double _center;

			[Token(Token = "0x4002283")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[SerializeField]
			private bool _loop;

			[Token(Token = "0x4002284")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public AnimationCurve interpolation;

			[Token(Token = "0x17000488")]
			public Vector2 offset
			{
				[Token(Token = "0x60020AF")]
				[Address(RVA = "0xB665D8", Offset = "0xB665D8", VA = "0xB665D8")]
				get
				{
					return default(Vector2);
				}
				[Token(Token = "0x60020B0")]
				[Address(RVA = "0xB665E0", Offset = "0xB665E0", VA = "0xB665E0")]
				set
				{
				}
			}

			[Token(Token = "0x17000489")]
			public double center
			{
				[Token(Token = "0x60020B1")]
				[Address(RVA = "0xB665E8", Offset = "0xB665E8", VA = "0xB665E8")]
				get
				{
					return default(double);
				}
				[Token(Token = "0x60020B2")]
				[Address(RVA = "0xB665F0", Offset = "0xB665F0", VA = "0xB665F0")]
				set
				{
				}
			}

			[Token(Token = "0x1700048A")]
			public double from
			{
				[Token(Token = "0x60020B3")]
				[Address(RVA = "0xB6660C", Offset = "0xB6660C", VA = "0xB6660C")]
				get
				{
					return default(double);
				}
				[Token(Token = "0x60020B4")]
				[Address(RVA = "0xB66614", Offset = "0xB66614", VA = "0xB66614")]
				set
				{
				}
			}

			[Token(Token = "0x1700048B")]
			public double to
			{
				[Token(Token = "0x60020B5")]
				[Address(RVA = "0xB66630", Offset = "0xB66630", VA = "0xB66630")]
				get
				{
					return default(double);
				}
				[Token(Token = "0x60020B6")]
				[Address(RVA = "0xB66638", Offset = "0xB66638", VA = "0xB66638")]
				set
				{
				}
			}

			[Token(Token = "0x1700048C")]
			public bool loop
			{
				[Token(Token = "0x60020B7")]
				[Address(RVA = "0xB66654", Offset = "0xB66654", VA = "0xB66654")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x60020B8")]
				[Address(RVA = "0xB6665C", Offset = "0xB6665C", VA = "0xB6665C")]
				set
				{
				}
			}

			[Token(Token = "0x1700048D")]
			public double position
			{
				[Token(Token = "0x60020B9")]
				[Address(RVA = "0xB66558", Offset = "0xB66558", VA = "0xB66558")]
				get
				{
					return default(double);
				}
				[Token(Token = "0x60020BA")]
				[Address(RVA = "0xB66668", Offset = "0xB66668", VA = "0xB66668")]
				set
				{
				}
			}

			[Token(Token = "0x60020BB")]
			[Address(RVA = "0xB6610C", Offset = "0xB6610C", VA = "0xB6610C")]
			public Key(Vector2 o, double f, double t, double c)
			{
			}

			[Token(Token = "0x60020BC")]
			[Address(RVA = "0xB665BC", Offset = "0xB665BC", VA = "0xB665BC")]
			public float Evaluate(float t)
			{
				return default(float);
			}
		}

		[Token(Token = "0x400227D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<Key> keys;

		[Token(Token = "0x400227E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float _blend;

		[Token(Token = "0x17000487")]
		public float blend
		{
			[Token(Token = "0x60020AA")]
			[Address(RVA = "0xB65F20", Offset = "0xB65F20", VA = "0xB65F20")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60020AB")]
			[Address(RVA = "0xB65F28", Offset = "0xB65F28", VA = "0xB65F28")]
			set
			{
			}
		}

		[Token(Token = "0x60020AC")]
		[Address(RVA = "0xB65F44", Offset = "0xB65F44", VA = "0xB65F44")]
		public CustomOffsetModule()
		{
		}

		[Token(Token = "0x60020AD")]
		[Address(RVA = "0xB65FF0", Offset = "0xB65FF0", VA = "0xB65FF0")]
		public void AddKey(Vector2 offset, double f, double t, double c)
		{
		}

		[Token(Token = "0x60020AE")]
		[Address(RVA = "0xB661E4", Offset = "0xB661E4", VA = "0xB661E4")]
		public Vector2 Evaluate(double time)
		{
			return default(Vector2);
		}
	}
	[Serializable]
	[Token(Token = "0x2000533")]
	public class CustomRotationModule
	{
		[Serializable]
		[Token(Token = "0x2000534")]
		public class Key
		{
			[Token(Token = "0x4002287")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[SerializeField]
			private Vector3 _rotation;

			[Token(Token = "0x4002288")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[SerializeField]
			private double _from;

			[Token(Token = "0x4002289")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[SerializeField]
			private double _to;

			[Token(Token = "0x400228A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[SerializeField]
			private double _center;

			[Token(Token = "0x400228B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[SerializeField]
			private bool _loop;

			[Token(Token = "0x400228C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public AnimationCurve interpolation;

			[Token(Token = "0x1700048F")]
			public Vector3 rotation
			{
				[Token(Token = "0x60020C2")]
				[Address(RVA = "0xB66ED4", Offset = "0xB66ED4", VA = "0xB66ED4")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x60020C3")]
				[Address(RVA = "0xB66EE0", Offset = "0xB66EE0", VA = "0xB66EE0")]
				set
				{
				}
			}

			[Token(Token = "0x17000490")]
			public double center
			{
				[Token(Token = "0x60020C4")]
				[Address(RVA = "0xB66EEC", Offset = "0xB66EEC", VA = "0xB66EEC")]
				get
				{
					return default(double);
				}
				[Token(Token = "0x60020C5")]
				[Address(RVA = "0xB66EF4", Offset = "0xB66EF4", VA = "0xB66EF4")]
				set
				{
				}
			}

			[Token(Token = "0x17000491")]
			public double from
			{
				[Token(Token = "0x60020C6")]
				[Address(RVA = "0xB66F10", Offset = "0xB66F10", VA = "0xB66F10")]
				get
				{
					return default(double);
				}
				[Token(Token = "0x60020C7")]
				[Address(RVA = "0xB66F18", Offset = "0xB66F18", VA = "0xB66F18")]
				set
				{
				}
			}

			[Token(Token = "0x17000492")]
			public double to
			{
				[Token(Token = "0x60020C8")]
				[Address(RVA = "0xB66F34", Offset = "0xB66F34", VA = "0xB66F34")]
				get
				{
					return default(double);
				}
				[Token(Token = "0x60020C9")]
				[Address(RVA = "0xB66F3C", Offset = "0xB66F3C", VA = "0xB66F3C")]
				set
				{
				}
			}

			[Token(Token = "0x17000493")]
			public bool loop
			{
				[Token(Token = "0x60020CA")]
				[Address(RVA = "0xB66F58", Offset = "0xB66F58", VA = "0xB66F58")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x60020CB")]
				[Address(RVA = "0xB66F60", Offset = "0xB66F60", VA = "0xB66F60")]
				set
				{
				}
			}

			[Token(Token = "0x17000494")]
			public double position
			{
				[Token(Token = "0x60020CC")]
				[Address(RVA = "0xB66E54", Offset = "0xB66E54", VA = "0xB66E54")]
				get
				{
					return default(double);
				}
				[Token(Token = "0x60020CD")]
				[Address(RVA = "0xB66F6C", Offset = "0xB66F6C", VA = "0xB66F6C")]
				set
				{
				}
			}

			[Token(Token = "0x60020CE")]
			[Address(RVA = "0xB668D0", Offset = "0xB668D0", VA = "0xB668D0")]
			public Key(Vector3 r, double f, double t, double c)
			{
			}

			[Token(Token = "0x60020CF")]
			[Address(RVA = "0xB66EB8", Offset = "0xB66EB8", VA = "0xB66EB8")]
			public float Evaluate(float t)
			{
				return default(float);
			}
		}

		[Token(Token = "0x4002285")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<Key> keys;

		[Token(Token = "0x4002286")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float _blend;

		[Token(Token = "0x1700048E")]
		public float blend
		{
			[Token(Token = "0x60020BD")]
			[Address(RVA = "0xB666DC", Offset = "0xB666DC", VA = "0xB666DC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60020BE")]
			[Address(RVA = "0xB666E4", Offset = "0xB666E4", VA = "0xB666E4")]
			set
			{
			}
		}

		[Token(Token = "0x60020BF")]
		[Address(RVA = "0xB66700", Offset = "0xB66700", VA = "0xB66700")]
		public CustomRotationModule()
		{
		}

		[Token(Token = "0x60020C0")]
		[Address(RVA = "0xB667AC", Offset = "0xB667AC", VA = "0xB667AC")]
		public void AddKey(Vector3 rotation, double f, double t, double c)
		{
		}

		[Token(Token = "0x60020C1")]
		[Address(RVA = "0xB669B8", Offset = "0xB669B8", VA = "0xB669B8")]
		public Quaternion Evaluate(Quaternion baseRotation, double time)
		{
			return default(Quaternion);
		}
	}
	[Serializable]
	[Token(Token = "0x2000535")]
	public class ObjectSequence<T>
	{
		[Token(Token = "0x2000536")]
		public enum Iteration
		{
			[Token(Token = "0x4002295")]
			Ordered,
			[Token(Token = "0x4002296")]
			Random
		}

		[Token(Token = "0x400228D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T startObject;

		[Token(Token = "0x400228E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T endObject;

		[Token(Token = "0x400228F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T[] objects;

		[Token(Token = "0x4002290")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Iteration iteration;

		[Token(Token = "0x4002291")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[HideInInspector]
		[SerializeField]
		private int _randomSeed;

		[Token(Token = "0x4002292")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[HideInInspector]
		[SerializeField]
		private int index;

		[Token(Token = "0x4002293")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[HideInInspector]
		[SerializeField]
		private System.Random randomizer;

		[Token(Token = "0x17000495")]
		public int randomSeed
		{
			[Token(Token = "0x60020D0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60020D1")]
			set
			{
			}
		}

		[Token(Token = "0x60020D2")]
		public ObjectSequence()
		{
		}

		[Token(Token = "0x60020D3")]
		public T GetFirst()
		{
			return (T)null;
		}

		[Token(Token = "0x60020D4")]
		public T GetLast()
		{
			return (T)null;
		}

		[Token(Token = "0x60020D5")]
		public T Next()
		{
			return (T)null;
		}
	}
	[Serializable]
	[Token(Token = "0x2000537")]
	public class Spline
	{
		[Token(Token = "0x2000538")]
		public enum Direction
		{
			[Token(Token = "0x400229F")]
			Forward = 1,
			[Token(Token = "0x40022A0")]
			Backward = -1
		}

		[Token(Token = "0x2000539")]
		public enum Type
		{
			[Token(Token = "0x40022A2")]
			Hermite,
			[Token(Token = "0x40022A3")]
			BSpline,
			[Token(Token = "0x40022A4")]
			Bezier,
			[Token(Token = "0x40022A5")]
			Linear
		}

		[Token(Token = "0x4002297")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public SplinePoint[] points;

		[Token(Token = "0x4002298")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private bool closed;

		[Token(Token = "0x4002299")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Type type;

		[Token(Token = "0x400229A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AnimationCurve customValueInterpolation;

		[Token(Token = "0x400229B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimationCurve customNormalInterpolation;

		[Token(Token = "0x400229C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Range(0f, 0.9999f)]
		public double precision;

		[Token(Token = "0x400229D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3[] hermitePoints;

		[Token(Token = "0x17000496")]
		public bool isClosed
		{
			[Token(Token = "0x60020D6")]
			[Address(RVA = "0xB66FE0", Offset = "0xB66FE0", VA = "0xB66FE0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60020D7")]
			[Address(RVA = "0xB67014", Offset = "0xB67014", VA = "0xB67014")]
			set
			{
			}
		}

		[Token(Token = "0x17000497")]
		public double moveStep
		{
			[Token(Token = "0x60020D8")]
			[Address(RVA = "0xB67018", Offset = "0xB67018", VA = "0xB67018")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x60020D9")]
			[Address(RVA = "0xB670B8", Offset = "0xB670B8", VA = "0xB670B8")]
			set
			{
			}
		}

		[Token(Token = "0x17000498")]
		public int iterations
		{
			[Token(Token = "0x60020DA")]
			[Address(RVA = "0xB6705C", Offset = "0xB6705C", VA = "0xB6705C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60020DB")]
			[Address(RVA = "0xB670BC", Offset = "0xB670BC", VA = "0xB670BC")]
			set
			{
			}
		}

		[Token(Token = "0x60020DC")]
		[Address(RVA = "0xB670C0", Offset = "0xB670C0", VA = "0xB670C0")]
		public Spline(Type t)
		{
		}

		[Token(Token = "0x60020DD")]
		[Address(RVA = "0xB67178", Offset = "0xB67178", VA = "0xB67178")]
		public Spline(Type t, double p)
		{
		}

		[Token(Token = "0x60020DE")]
		[Address(RVA = "0xB67240", Offset = "0xB67240", VA = "0xB67240")]
		public float CalculateLength(double from = 0.0, double to = 1.0, double resolution = 1.0)
		{
			return default(float);
		}

		[Token(Token = "0x60020DF")]
		[Address(RVA = "0xB67448", Offset = "0xB67448", VA = "0xB67448")]
		public double Project(Vector3 point, int subdivide = 3, double from = 0.0, double to = 1.0)
		{
			return default(double);
		}

		[Token(Token = "0x60020E0")]
		[Address(RVA = "0xB679B4", Offset = "0xB679B4", VA = "0xB679B4")]
		public bool Raycast(out RaycastHit hit, out double hitPercent, LayerMask layerMask, double resolution = 1.0, double from = 0.0, double to = 1.0, QueryTriggerInteraction hitTriggers = QueryTriggerInteraction.UseGlobal)
		{
			return default(bool);
		}

		[Token(Token = "0x60020E1")]
		[Address(RVA = "0xB67B90", Offset = "0xB67B90", VA = "0xB67B90")]
		public bool RaycastAll(out RaycastHit[] hits, out double[] hitPercents, LayerMask layerMask, double resolution = 1.0, double from = 0.0, double to = 1.0, QueryTriggerInteraction hitTriggers = QueryTriggerInteraction.UseGlobal)
		{
			return default(bool);
		}

		[Token(Token = "0x60020E2")]
		[Address(RVA = "0xB68084", Offset = "0xB68084", VA = "0xB68084")]
		public double GetPointPercent(int pointIndex)
		{
			return default(double);
		}

		[Token(Token = "0x60020E3")]
		[Address(RVA = "0xB673BC", Offset = "0xB673BC", VA = "0xB673BC")]
		public Vector3 EvaluatePosition(double percent)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60020E4")]
		[Address(RVA = "0xB68150", Offset = "0xB68150", VA = "0xB68150")]
		public SplineResult Evaluate(double percent)
		{
			return null;
		}

		[Token(Token = "0x60020E5")]
		[Address(RVA = "0xB689A0", Offset = "0xB689A0", VA = "0xB689A0")]
		public SplineResult Evaluate(int pointIndex)
		{
			return null;
		}

		[Token(Token = "0x60020E6")]
		[Address(RVA = "0xB68A20", Offset = "0xB68A20", VA = "0xB68A20")]
		public void Evaluate(SplineResult result, int pointIndex)
		{
		}

		[Token(Token = "0x60020E7")]
		[Address(RVA = "0xB682A0", Offset = "0xB682A0", VA = "0xB682A0")]
		public void Evaluate(SplineResult result, double percent)
		{
		}

		[Token(Token = "0x60020E8")]
		[Address(RVA = "0xB68AE8", Offset = "0xB68AE8", VA = "0xB68AE8")]
		public void Evaluate(ref SplineResult[] samples, double from = 0.0, double to = 1.0)
		{
		}

		[Token(Token = "0x60020E9")]
		[Address(RVA = "0xB68CC4", Offset = "0xB68CC4", VA = "0xB68CC4")]
		public void EvaluatePositions(ref Vector3[] positions, double from = 0.0, double to = 1.0)
		{
		}

		[Token(Token = "0x60020EA")]
		[Address(RVA = "0xB68E64", Offset = "0xB68E64", VA = "0xB68E64")]
		public double Travel(double start, float distance, Direction direction)
		{
			return default(double);
		}

		[Token(Token = "0x60020EB")]
		[Address(RVA = "0xB680B4", Offset = "0xB680B4", VA = "0xB680B4")]
		public void EvaluatePosition(ref Vector3 point, double percent)
		{
		}

		[Token(Token = "0x60020EC")]
		[Address(RVA = "0xB68A4C", Offset = "0xB68A4C", VA = "0xB68A4C")]
		public void EvaluateTangent(ref Vector3 tangent, double percent)
		{
		}

		[Token(Token = "0x60020ED")]
		[Address(RVA = "0xB677A8", Offset = "0xB677A8", VA = "0xB677A8")]
		private double GetClosestPoint(int iterations, Vector3 point, double start, double end, int slices)
		{
			return default(double);
		}

		[Token(Token = "0x60020EE")]
		[Address(RVA = "0xB69230", Offset = "0xB69230", VA = "0xB69230")]
		public void Break()
		{
		}

		[Token(Token = "0x60020EF")]
		[Address(RVA = "0xB69238", Offset = "0xB69238", VA = "0xB69238")]
		public void Break(int at)
		{
		}

		[Token(Token = "0x60020F0")]
		[Address(RVA = "0xB69470", Offset = "0xB69470", VA = "0xB69470")]
		public void Close()
		{
		}

		[Token(Token = "0x60020F1")]
		[Address(RVA = "0xB69508", Offset = "0xB69508", VA = "0xB69508")]
		public void ConvertToBezier()
		{
		}

		[Token(Token = "0x60020F2")]
		[Address(RVA = "0xB690AC", Offset = "0xB690AC", VA = "0xB690AC")]
		private void GetPoint(ref Vector3 point, double percent, int pointIndex)
		{
		}

		[Token(Token = "0x60020F3")]
		[Address(RVA = "0xB69208", Offset = "0xB69208", VA = "0xB69208")]
		private void GetTangent(ref Vector3 tangent, double percent, int pointIndex)
		{
		}

		[Token(Token = "0x60020F4")]
		[Address(RVA = "0xB69FFC", Offset = "0xB69FFC", VA = "0xB69FFC")]
		private void LinearGetPoint(ref Vector3 point, double t, int i)
		{
		}

		[Token(Token = "0x60020F5")]
		[Address(RVA = "0xB6A44C", Offset = "0xB6A44C", VA = "0xB6A44C")]
		private void LinearGetTangent(ref Vector3 tangent, double t, int i)
		{
		}

		[Token(Token = "0x60020F6")]
		[Address(RVA = "0xB69E60", Offset = "0xB69E60", VA = "0xB69E60")]
		private void BSPGetPoint(ref Vector3 point, double time, int i)
		{
		}

		[Token(Token = "0x60020F7")]
		[Address(RVA = "0xB69D14", Offset = "0xB69D14", VA = "0xB69D14")]
		private void BezierGetPoint(ref Vector3 point, double t, int i)
		{
		}

		[Token(Token = "0x60020F8")]
		[Address(RVA = "0xB6A2D8", Offset = "0xB6A2D8", VA = "0xB6A2D8")]
		private void BezierGetTangent(ref Vector3 tangent, double t, int i)
		{
		}

		[Token(Token = "0x60020F9")]
		[Address(RVA = "0xB69B80", Offset = "0xB69B80", VA = "0xB69B80")]
		private void HermiteGetPoint(ref Vector3 point, double t, int i)
		{
		}

		[Token(Token = "0x60020FA")]
		[Address(RVA = "0xB6A138", Offset = "0xB6A138", VA = "0xB6A138")]
		private void GetHermiteTangent(ref Vector3 direction, double t, int i)
		{
		}

		[Token(Token = "0x60020FB")]
		[Address(RVA = "0xB698BC", Offset = "0xB698BC", VA = "0xB698BC")]
		private void GetHermitePoints(int i)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200053A")]
	public class SplineAddress
	{
		[Serializable]
		[Token(Token = "0x200053B")]
		public class Element
		{
			[Token(Token = "0x40022A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public SplineComputer computer;

			[Token(Token = "0x40022A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[SerializeField]
			private int _startPoint;

			[Token(Token = "0x40022A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[SerializeField]
			private int _endPoint;

			[Token(Token = "0x1700049D")]
			public int startPoint
			{
				[Token(Token = "0x6002117")]
				[Address(RVA = "0xB6CC4C", Offset = "0xB6CC4C", VA = "0xB6CC4C")]
				get
				{
					return default(int);
				}
				[Token(Token = "0x6002118")]
				[Address(RVA = "0xB6C43C", Offset = "0xB6C43C", VA = "0xB6C43C")]
				set
				{
				}
			}

			[Token(Token = "0x1700049E")]
			public int endPoint
			{
				[Token(Token = "0x6002119")]
				[Address(RVA = "0xB6C40C", Offset = "0xB6C40C", VA = "0xB6C40C")]
				get
				{
					return default(int);
				}
				[Token(Token = "0x600211A")]
				[Address(RVA = "0xB6A67C", Offset = "0xB6A67C", VA = "0xB6A67C")]
				set
				{
				}
			}

			[Token(Token = "0x1700049F")]
			public double startPercent
			{
				[Token(Token = "0x600211B")]
				[Address(RVA = "0xB6B364", Offset = "0xB6B364", VA = "0xB6B364")]
				get
				{
					return default(double);
				}
			}

			[Token(Token = "0x170004A0")]
			public double endPercent
			{
				[Token(Token = "0x600211C")]
				[Address(RVA = "0xB6B39C", Offset = "0xB6B39C", VA = "0xB6B39C")]
				get
				{
					return default(double);
				}
			}

			[Token(Token = "0x170004A1")]
			public int span
			{
				[Token(Token = "0x600211D")]
				[Address(RVA = "0xB6B2CC", Offset = "0xB6B2CC", VA = "0xB6B2CC")]
				get
				{
					return default(int);
				}
			}

			[Token(Token = "0x600211E")]
			[Address(RVA = "0xB6A66C", Offset = "0xB6A66C", VA = "0xB6A66C")]
			public Element()
			{
			}
		}

		[Token(Token = "0x40022A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Element[] _elements;

		[Token(Token = "0x17000499")]
		public int depth
		{
			[Token(Token = "0x60020FC")]
			[Address(RVA = "0xB6A528", Offset = "0xB6A528", VA = "0xB6A528")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700049A")]
		public SplineComputer root
		{
			[Token(Token = "0x60020FD")]
			[Address(RVA = "0xB6A540", Offset = "0xB6A540", VA = "0xB6A540")]
			get
			{
				return null;
			}
			[Token(Token = "0x60020FE")]
			[Address(RVA = "0xB6A578", Offset = "0xB6A578", VA = "0xB6A578")]
			set
			{
			}
		}

		[Token(Token = "0x1700049B")]
		public Element[] elements
		{
			[Token(Token = "0x60020FF")]
			[Address(RVA = "0xB6A7D8", Offset = "0xB6A7D8", VA = "0xB6A7D8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700049C")]
		public double moveStep
		{
			[Token(Token = "0x6002100")]
			[Address(RVA = "0xB6A7E0", Offset = "0xB6A7E0", VA = "0xB6A7E0")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x6002101")]
		[Address(RVA = "0xB6A9D8", Offset = "0xB6A9D8", VA = "0xB6A9D8")]
		public SplineAddress(SplineComputer rootComp)
		{
		}

		[Token(Token = "0x6002102")]
		[Address(RVA = "0xB6AAE0", Offset = "0xB6AAE0", VA = "0xB6AAE0")]
		public SplineAddress(SplineAddress copy)
		{
		}

		[Token(Token = "0x6002103")]
		[Address(RVA = "0xB6AC6C", Offset = "0xB6AC6C", VA = "0xB6AC6C")]
		public SplineResult Evaluate(double percent)
		{
			return null;
		}

		[Token(Token = "0x6002104")]
		[Address(RVA = "0xB6ACE4", Offset = "0xB6ACE4", VA = "0xB6ACE4")]
		public void Evaluate(SplineResult result, double percent)
		{
		}

		[Token(Token = "0x6002105")]
		[Address(RVA = "0xB6AFF8", Offset = "0xB6AFF8", VA = "0xB6AFF8")]
		public Vector3 EvaluatePosition(double percent)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002106")]
		[Address(RVA = "0xB6B3DC", Offset = "0xB6B3DC", VA = "0xB6B3DC")]
		public double Project(Vector3 point, int subdivide = 4, double from = 0.0, double to = 1.0)
		{
			return default(double);
		}

		[Token(Token = "0x6002107")]
		[Address(RVA = "0xB6B9A8", Offset = "0xB6B9A8", VA = "0xB6B9A8")]
		public float CalculateLength(double from = 0.0, double to = 1.0)
		{
			return default(float);
		}

		[Token(Token = "0x6002108")]
		[Address(RVA = "0xB6BADC", Offset = "0xB6BADC", VA = "0xB6BADC")]
		public double Travel(double start, float distance, Spline.Direction direction, int iterations)
		{
			return default(double);
		}

		[Token(Token = "0x6002109")]
		[Address(RVA = "0xB6BCCC", Offset = "0xB6BCCC", VA = "0xB6BCCC")]
		public int GetElementIndex(double percent)
		{
			return default(int);
		}

		[Token(Token = "0x600210A")]
		[Address(RVA = "0xB6B5F0", Offset = "0xB6B5F0", VA = "0xB6B5F0")]
		public double PathToLocalPercent(double pathPercent, int elementIndex)
		{
			return default(double);
		}

		[Token(Token = "0x600210B")]
		[Address(RVA = "0xB6B7DC", Offset = "0xB6B7DC", VA = "0xB6B7DC")]
		public double LocalToPathPercent(double localPercent, int elementIndex)
		{
			return default(double);
		}

		[Token(Token = "0x600210C")]
		[Address(RVA = "0xB6A8D4", Offset = "0xB6A8D4", VA = "0xB6A8D4")]
		public int GetTotalPointCount()
		{
			return default(int);
		}

		[Token(Token = "0x600210D")]
		[Address(RVA = "0xB6ADEC", Offset = "0xB6ADEC", VA = "0xB6ADEC")]
		public void GetEvaluationValues(double inputPercent, out SplineComputer computer, out double percent, out Spline.Direction direction)
		{
		}

		[Token(Token = "0x600210E")]
		[Address(RVA = "0xB6BE94", Offset = "0xB6BE94", VA = "0xB6BE94")]
		private int LocalToPathPoint(int point, int elementIndex)
		{
			return default(int);
		}

		[Token(Token = "0x600210F")]
		[Address(RVA = "0xB6BF7C", Offset = "0xB6BF7C", VA = "0xB6BF7C")]
		private void PathToLocalPoint(int point, out int computerIndex, out int localPoint)
		{
		}

		[Token(Token = "0x6002110")]
		[Address(RVA = "0xB6C070", Offset = "0xB6C070", VA = "0xB6C070")]
		[Obsolete("Enter is obsolete, use AddSpline instead")]
		public void Enter(Node node, int connectionIndex, Spline.Direction direction = Spline.Direction.Forward)
		{
		}

		[Token(Token = "0x6002111")]
		[Address(RVA = "0xB6C074", Offset = "0xB6C074", VA = "0xB6C074")]
		public void AddSpline(Node node, int connectionIndex, Spline.Direction direction = Spline.Direction.Forward)
		{
		}

		[Token(Token = "0x6002112")]
		[Address(RVA = "0xB6C55C", Offset = "0xB6C55C", VA = "0xB6C55C")]
		public void AddSpline(SplineComputer computer, int connectionIndex, int connectedIndex, Spline.Direction direction = Spline.Direction.Forward)
		{
		}

		[Token(Token = "0x6002113")]
		[Address(RVA = "0xB6C8F4", Offset = "0xB6C8F4", VA = "0xB6C8F4")]
		public void Exit(int exitDepth)
		{
		}

		[Token(Token = "0x6002114")]
		[Address(RVA = "0xB6CA3C", Offset = "0xB6CA3C", VA = "0xB6CA3C")]
		public void Collapse()
		{
		}

		[Token(Token = "0x6002115")]
		[Address(RVA = "0xB6CB8C", Offset = "0xB6CB8C", VA = "0xB6CB8C")]
		public void Clear()
		{
		}

		[Token(Token = "0x6002116")]
		[Address(RVA = "0xB6ABA4", Offset = "0xB6ABA4", VA = "0xB6ABA4")]
		private void AddElement(Element element)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200053C")]
	public struct SplinePoint
	{
		[Token(Token = "0x200053D")]
		public enum Type
		{
			[Token(Token = "0x40022B2")]
			SmoothMirrored,
			[Token(Token = "0x40022B3")]
			Broken,
			[Token(Token = "0x40022B4")]
			SmoothFree
		}

		[Token(Token = "0x40022AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[FormerlySerializedAs("type")]
		public Type _type;

		[Token(Token = "0x40022AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public Vector3 position;

		[Token(Token = "0x40022AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Color color;

		[Token(Token = "0x40022AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 normal;

		[Token(Token = "0x40022AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float size;

		[Token(Token = "0x40022AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 tangent;

		[Token(Token = "0x40022B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector3 tangent2;

		[Token(Token = "0x170004A2")]
		public Type type
		{
			[Token(Token = "0x600211F")]
			[Address(RVA = "0xB6CC54", Offset = "0xB6CC54", VA = "0xB6CC54")]
			get
			{
				return default(Type);
			}
			[Token(Token = "0x6002120")]
			[Address(RVA = "0xB697FC", Offset = "0xB697FC", VA = "0xB697FC")]
			set
			{
			}
		}

		[Token(Token = "0x6002121")]
		[Address(RVA = "0xB6CC88", Offset = "0xB6CC88", VA = "0xB6CC88")]
		public static SplinePoint Lerp(SplinePoint a, SplinePoint b, float t)
		{
			return default(SplinePoint);
		}

		[Token(Token = "0x6002122")]
		[Address(RVA = "0xB6CE34", Offset = "0xB6CE34", VA = "0xB6CE34")]
		private static void GetInterpolatedTangents(SplinePoint a, SplinePoint b, float t, out Vector3 t1, out Vector3 t2)
		{
		}

		[Token(Token = "0x6002123")]
		[Address(RVA = "0xB6CEE8", Offset = "0xB6CEE8", VA = "0xB6CEE8")]
		public void SetPosition(Vector3 pos)
		{
		}

		[Token(Token = "0x6002124")]
		[Address(RVA = "0xB69834", Offset = "0xB69834", VA = "0xB69834")]
		public void SetTangentPosition(Vector3 pos)
		{
		}

		[Token(Token = "0x6002125")]
		[Address(RVA = "0xB69878", Offset = "0xB69878", VA = "0xB69878")]
		public void SetTangent2Position(Vector3 pos)
		{
		}

		[Token(Token = "0x6002126")]
		[Address(RVA = "0xB6D26C", Offset = "0xB6D26C", VA = "0xB6D26C")]
		public SplinePoint(Vector3 p)
		{
		}

		[Token(Token = "0x6002127")]
		[Address(RVA = "0xB6D320", Offset = "0xB6D320", VA = "0xB6D320")]
		public SplinePoint(Vector3 p, Vector3 t)
		{
		}

		[Token(Token = "0x6002128")]
		[Address(RVA = "0xB6D3E0", Offset = "0xB6D3E0", VA = "0xB6D3E0")]
		public SplinePoint(Vector3 pos, Vector3 tan, Vector3 nor, float s, Color col)
		{
		}

		[Token(Token = "0x6002129")]
		[Address(RVA = "0xB6D430", Offset = "0xB6D430", VA = "0xB6D430")]
		public SplinePoint(Vector3 pos, Vector3 tan, Vector3 tan2, Vector3 nor, float s, Color col)
		{
		}

		[Token(Token = "0x600212A")]
		[Address(RVA = "0xB6D478", Offset = "0xB6D478", VA = "0xB6D478")]
		public SplinePoint(SplinePoint source)
		{
		}

		[Token(Token = "0x600212B")]
		[Address(RVA = "0xB6CC5C", Offset = "0xB6CC5C", VA = "0xB6CC5C")]
		private void SmoothMirrorTangent2()
		{
		}

		[Token(Token = "0x600212C")]
		[Address(RVA = "0xB6D0B8", Offset = "0xB6D0B8", VA = "0xB6D0B8")]
		private void SmoothMirrorTangent()
		{
		}

		[Token(Token = "0x600212D")]
		[Address(RVA = "0xB6CF30", Offset = "0xB6CF30", VA = "0xB6CF30")]
		private void SmoothFreeTangent2()
		{
		}

		[Token(Token = "0x600212E")]
		[Address(RVA = "0xB6D0E4", Offset = "0xB6D0E4", VA = "0xB6D0E4")]
		private void SmoothFreeTangent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200053E")]
	public class SplineResult
	{
		[Token(Token = "0x40022B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 position;

		[Token(Token = "0x40022B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 normal;

		[Token(Token = "0x40022B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 direction;

		[Token(Token = "0x40022B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Color color;

		[Token(Token = "0x40022B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float size;

		[Token(Token = "0x40022BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public double percent;

		[Token(Token = "0x170004A3")]
		public Quaternion rotation
		{
			[Token(Token = "0x600212F")]
			[Address(RVA = "0xB6D598", Offset = "0xB6D598", VA = "0xB6D598")]
			get
			{
				return default(Quaternion);
			}
		}

		[Token(Token = "0x170004A4")]
		public Vector3 right
		{
			[Token(Token = "0x6002130")]
			[Address(RVA = "0xB65168", Offset = "0xB65168", VA = "0xB65168")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6002131")]
		[Address(RVA = "0xB6D6D8", Offset = "0xB6D6D8", VA = "0xB6D6D8")]
		public static SplineResult Lerp(SplineResult a, SplineResult b, float t)
		{
			return null;
		}

		[Token(Token = "0x6002132")]
		[Address(RVA = "0xB6D868", Offset = "0xB6D868", VA = "0xB6D868")]
		public static SplineResult Lerp(SplineResult a, SplineResult b, double t)
		{
			return null;
		}

		[Token(Token = "0x6002133")]
		[Address(RVA = "0xB6D8F0", Offset = "0xB6D8F0", VA = "0xB6D8F0")]
		public static void Lerp(SplineResult a, SplineResult b, double t, SplineResult target)
		{
		}

		[Token(Token = "0x6002134")]
		[Address(RVA = "0xB6D760", Offset = "0xB6D760", VA = "0xB6D760")]
		public static void Lerp(SplineResult a, SplineResult b, float t, SplineResult target)
		{
		}

		[Token(Token = "0x6002135")]
		[Address(RVA = "0xB6D9F8", Offset = "0xB6D9F8", VA = "0xB6D9F8")]
		public void Lerp(SplineResult b, double t)
		{
		}

		[Token(Token = "0x6002136")]
		[Address(RVA = "0xB6DA00", Offset = "0xB6DA00", VA = "0xB6DA00")]
		public void Lerp(SplineResult b, float t)
		{
		}

		[Token(Token = "0x6002137")]
		[Address(RVA = "0xB6DA08", Offset = "0xB6DA08", VA = "0xB6DA08")]
		public void CopyFrom(SplineResult input)
		{
		}

		[Token(Token = "0x6002138")]
		[Address(RVA = "0xB681C8", Offset = "0xB681C8", VA = "0xB681C8")]
		public SplineResult()
		{
		}

		[Token(Token = "0x6002139")]
		[Address(RVA = "0xB6DA64", Offset = "0xB6DA64", VA = "0xB6DA64")]
		public SplineResult(Vector3 p, Vector3 n, Vector3 d, Color c, float s, double t)
		{
		}

		[Token(Token = "0x600213A")]
		[Address(RVA = "0xB6DBDC", Offset = "0xB6DBDC", VA = "0xB6DBDC")]
		public SplineResult(SplineResult input)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200053F")]
	public class SplineAction
	{
		[Token(Token = "0x40022BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		public UnityEngine.Object target;

		[Token(Token = "0x40022BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int intValue;

		[Token(Token = "0x40022BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float floatValue;

		[Token(Token = "0x40022BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public double doubleValue;

		[Token(Token = "0x40022BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string stringValue;

		[Token(Token = "0x40022C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool boolValue;

		[Token(Token = "0x40022C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject goValue;

		[Token(Token = "0x40022C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform transformValue;

		[Token(Token = "0x40022C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private UnityAction action;

		[Token(Token = "0x40022C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private UnityAction<int> intAction;

		[Token(Token = "0x40022C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private UnityAction<float> floatAction;

		[Token(Token = "0x40022C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private UnityAction<double> doubleAction;

		[Token(Token = "0x40022C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private UnityAction<string> stringAction;

		[Token(Token = "0x40022C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private UnityAction<bool> boolAction;

		[Token(Token = "0x40022C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private UnityAction<GameObject> goAction;

		[Token(Token = "0x40022CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private UnityAction<Transform> transformAction;

		[Token(Token = "0x40022CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private MethodInfo methodInfo;

		[Token(Token = "0x40022CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		private string methodName;

		[Token(Token = "0x40022CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		private int paramType;

		[Token(Token = "0x600213B")]
		[Address(RVA = "0xB6DD14", Offset = "0xB6DD14", VA = "0xB6DD14")]
		public SplineAction()
		{
		}

		[Token(Token = "0x600213C")]
		[Address(RVA = "0xB6DD64", Offset = "0xB6DD64", VA = "0xB6DD64")]
		public SplineAction(UnityAction call)
		{
		}

		[Token(Token = "0x600213D")]
		[Address(RVA = "0xB6DDCC", Offset = "0xB6DDCC", VA = "0xB6DDCC")]
		public SplineAction(UnityAction<int> call, int value)
		{
		}

		[Token(Token = "0x600213E")]
		[Address(RVA = "0xB6DE40", Offset = "0xB6DE40", VA = "0xB6DE40")]
		public SplineAction(UnityAction<float> call, float value)
		{
		}

		[Token(Token = "0x600213F")]
		[Address(RVA = "0xB6DEBC", Offset = "0xB6DEBC", VA = "0xB6DEBC")]
		public SplineAction(UnityAction<double> call, double value)
		{
		}

		[Token(Token = "0x6002140")]
		[Address(RVA = "0xB6DF38", Offset = "0xB6DF38", VA = "0xB6DF38")]
		public SplineAction(UnityAction<string> call, string value)
		{
		}

		[Token(Token = "0x6002141")]
		[Address(RVA = "0xB6DFAC", Offset = "0xB6DFAC", VA = "0xB6DFAC")]
		public SplineAction(UnityAction<bool> call, bool value)
		{
		}

		[Token(Token = "0x6002142")]
		[Address(RVA = "0xB6E020", Offset = "0xB6E020", VA = "0xB6E020")]
		public SplineAction(UnityAction<GameObject> call, GameObject value)
		{
		}

		[Token(Token = "0x6002143")]
		[Address(RVA = "0xB6E094", Offset = "0xB6E094", VA = "0xB6E094")]
		public SplineAction(UnityAction<Transform> call, Transform value)
		{
		}

		[Token(Token = "0x6002144")]
		[Address(RVA = "0xB6E108", Offset = "0xB6E108", VA = "0xB6E108")]
		public void SetMethod(MethodInfo newMethod)
		{
		}

		[Token(Token = "0x6002145")]
		[Address(RVA = "0xB6E9E4", Offset = "0xB6E9E4", VA = "0xB6E9E4")]
		private Type GetParamType()
		{
			return null;
		}

		[Token(Token = "0x6002146")]
		[Address(RVA = "0xB6EB34", Offset = "0xB6EB34", VA = "0xB6EB34")]
		public MethodInfo GetMethod()
		{
			return null;
		}

		[Token(Token = "0x6002147")]
		[Address(RVA = "0xB6E524", Offset = "0xB6E524", VA = "0xB6E524")]
		private void ConstructUnityAction()
		{
		}

		[Token(Token = "0x6002148")]
		[Address(RVA = "0xB6ECEC", Offset = "0xB6ECEC", VA = "0xB6ECEC")]
		public void Invoke()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000540")]
	public class SplineTrigger : ScriptableObject
	{
		[Token(Token = "0x2000541")]
		public enum Type
		{
			[Token(Token = "0x40022D5")]
			Double,
			[Token(Token = "0x40022D6")]
			Forward,
			[Token(Token = "0x40022D7")]
			Backward
		}

		[Token(Token = "0x40022CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public Type type;

		[Token(Token = "0x40022CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 1f)]
		public double position;

		[Token(Token = "0x40022D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		public bool enabled;

		[Token(Token = "0x40022D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		public Color color;

		[Token(Token = "0x40022D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[HideInInspector]
		public SplineAction[] actions;

		[Token(Token = "0x40022D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject[] gameObjects;

		[Token(Token = "0x6002149")]
		[Address(RVA = "0xB6EE70", Offset = "0xB6EE70", VA = "0xB6EE70")]
		public SplineTrigger()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000542")]
	public class Trigger
	{
		[Token(Token = "0x2000543")]
		public enum Type
		{
			[Token(Token = "0x40022E2")]
			Double,
			[Token(Token = "0x40022E3")]
			Forward,
			[Token(Token = "0x40022E4")]
			Backward
		}

		[Token(Token = "0x40022D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x40022D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public Type type;

		[Token(Token = "0x40022DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool workOnce;

		[Token(Token = "0x40022DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		private bool worked;

		[Token(Token = "0x40022DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 1f)]
		public double position;

		[Token(Token = "0x40022DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		public bool enabled;

		[Token(Token = "0x40022DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		public Color color;

		[Token(Token = "0x40022DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[HideInInspector]
		public SplineAction[] actions;

		[Token(Token = "0x40022E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject[] gameObjects;

		[Token(Token = "0x600214A")]
		[Address(RVA = "0xB6EEE0", Offset = "0xB6EEE0", VA = "0xB6EEE0")]
		public void Create(Type t, UnityAction call)
		{
		}

		[Token(Token = "0x600214B")]
		[Address(RVA = "0xB6F014", Offset = "0xB6F014", VA = "0xB6F014")]
		public void Create(Type t, UnityAction<int> call, int value)
		{
		}

		[Token(Token = "0x600214C")]
		[Address(RVA = "0xB6F08C", Offset = "0xB6F08C", VA = "0xB6F08C")]
		public void Create(Type t, UnityAction<float> call, float value)
		{
		}

		[Token(Token = "0x600214D")]
		[Address(RVA = "0xB6F10C", Offset = "0xB6F10C", VA = "0xB6F10C")]
		public void Create(Type t, UnityAction<double> call, double value)
		{
		}

		[Token(Token = "0x600214E")]
		[Address(RVA = "0xB6F18C", Offset = "0xB6F18C", VA = "0xB6F18C")]
		public void Create(Type t, UnityAction<string> call, string value)
		{
		}

		[Token(Token = "0x600214F")]
		[Address(RVA = "0xB6F204", Offset = "0xB6F204", VA = "0xB6F204")]
		public void Create(Type t, UnityAction<bool> call, bool value)
		{
		}

		[Token(Token = "0x6002150")]
		[Address(RVA = "0xB6F27C", Offset = "0xB6F27C", VA = "0xB6F27C")]
		public void Create(Type t, UnityAction<Transform> call, Transform value)
		{
		}

		[Token(Token = "0x6002151")]
		[Address(RVA = "0xB6F2F4", Offset = "0xB6F2F4", VA = "0xB6F2F4")]
		public void Create(Type t, UnityAction<GameObject> call, GameObject value)
		{
		}

		[Token(Token = "0x6002152")]
		[Address(RVA = "0xB6EF60", Offset = "0xB6EF60", VA = "0xB6EF60")]
		public void Create(Type t)
		{
		}

		[Token(Token = "0x6002153")]
		[Address(RVA = "0xB6F36C", Offset = "0xB6F36C", VA = "0xB6F36C")]
		public void ResetWorkOnce()
		{
		}

		[Token(Token = "0x6002154")]
		[Address(RVA = "0xB6F374", Offset = "0xB6F374", VA = "0xB6F374")]
		public bool Check(double previousPercent, double currentPercent)
		{
			return default(bool);
		}

		[Token(Token = "0x6002155")]
		[Address(RVA = "0xB6F408", Offset = "0xB6F408", VA = "0xB6F408")]
		public void Invoke()
		{
		}

		[Token(Token = "0x6002156")]
		[Address(RVA = "0xB6F464", Offset = "0xB6F464", VA = "0xB6F464")]
		private void AddAction()
		{
		}

		[Token(Token = "0x6002157")]
		[Address(RVA = "0xB6F54C", Offset = "0xB6F54C", VA = "0xB6F54C")]
		public void AddListener(MonoBehaviour behavior, string method, object arg)
		{
		}

		[Token(Token = "0x6002158")]
		[Address(RVA = "0xB6EFA8", Offset = "0xB6EFA8", VA = "0xB6EFA8")]
		public void AddAction(SplineAction action)
		{
		}

		[Token(Token = "0x6002159")]
		[Address(RVA = "0xB70124", Offset = "0xB70124", VA = "0xB70124")]
		public Trigger()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000544")]
	public class TransformModule
	{
		[Token(Token = "0x2000545")]
		public enum VelocityHandleMode
		{
			[Token(Token = "0x40022FA")]
			Zero,
			[Token(Token = "0x40022FB")]
			Preserve,
			[Token(Token = "0x40022FC")]
			Align,
			[Token(Token = "0x40022FD")]
			AlignRealistic
		}

		[Token(Token = "0x40022E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		[FormerlySerializedAs("offset")]
		[HideInInspector]
		private Vector2 _offset;

		[Token(Token = "0x40022E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[HideInInspector]
		[FormerlySerializedAs("rotationOffset")]
		private Vector3 _rotationOffset;

		[Token(Token = "0x40022E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[HideInInspector]
		[SerializeField]
		[FormerlySerializedAs("baseScale")]
		private Vector3 _baseScale;

		[Token(Token = "0x40022E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public VelocityHandleMode velocityHandleMode;

		[Token(Token = "0x40022E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private SplineResult _splineResult;

		[Token(Token = "0x40022EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public CustomRotationModule customRotation;

		[Token(Token = "0x40022EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public CustomOffsetModule customOffset;

		[Token(Token = "0x40022EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool applyPositionX;

		[Token(Token = "0x40022ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		public bool applyPositionY;

		[Token(Token = "0x40022EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
		public bool applyPositionZ;

		[Token(Token = "0x40022EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public Spline.Direction direction;

		[Token(Token = "0x40022F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool applyRotationX;

		[Token(Token = "0x40022F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		public bool applyRotationY;

		[Token(Token = "0x40022F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5A")]
		public bool applyRotationZ;

		[Token(Token = "0x40022F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5B")]
		public bool applyScaleX;

		[Token(Token = "0x40022F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public bool applyScaleY;

		[Token(Token = "0x40022F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5D")]
		public bool applyScaleZ;

		[Token(Token = "0x40022F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HideInInspector]
		public SplineUser targetUser;

		[Token(Token = "0x40022F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Vector3 position;

		[Token(Token = "0x40022F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static Quaternion rotation;

		[Token(Token = "0x170004A5")]
		public Vector2 offset
		{
			[Token(Token = "0x600215A")]
			[Address(RVA = "0xB701B8", Offset = "0xB701B8", VA = "0xB701B8")]
			get
			{
				return default(Vector2);
			}
			[Token(Token = "0x600215B")]
			[Address(RVA = "0xB701C0", Offset = "0xB701C0", VA = "0xB701C0")]
			set
			{
			}
		}

		[Token(Token = "0x170004A6")]
		public Vector3 rotationOffset
		{
			[Token(Token = "0x600215C")]
			[Address(RVA = "0xB7028C", Offset = "0xB7028C", VA = "0xB7028C")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x600215D")]
			[Address(RVA = "0xB70298", Offset = "0xB70298", VA = "0xB70298")]
			set
			{
			}
		}

		[Token(Token = "0x170004A7")]
		public Vector3 baseScale
		{
			[Token(Token = "0x600215E")]
			[Address(RVA = "0xB70388", Offset = "0xB70388", VA = "0xB70388")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x600215F")]
			[Address(RVA = "0xB70394", Offset = "0xB70394", VA = "0xB70394")]
			set
			{
			}
		}

		[Token(Token = "0x170004A8")]
		public SplineResult splineResult
		{
			[Token(Token = "0x6002160")]
			[Address(RVA = "0xB70484", Offset = "0xB70484", VA = "0xB70484")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002161")]
			[Address(RVA = "0xB704EC", Offset = "0xB704EC", VA = "0xB704EC")]
			set
			{
			}
		}

		[Token(Token = "0x170004A9")]
		public bool applyPosition
		{
			[Token(Token = "0x6002162")]
			[Address(RVA = "0xB705A8", Offset = "0xB705A8", VA = "0xB705A8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002163")]
			[Address(RVA = "0xB705D0", Offset = "0xB705D0", VA = "0xB705D0")]
			set
			{
			}
		}

		[Token(Token = "0x170004AA")]
		public bool applyRotation
		{
			[Token(Token = "0x6002164")]
			[Address(RVA = "0xB705E4", Offset = "0xB705E4", VA = "0xB705E4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002165")]
			[Address(RVA = "0xB7060C", Offset = "0xB7060C", VA = "0xB7060C")]
			set
			{
			}
		}

		[Token(Token = "0x170004AB")]
		public bool applyScale
		{
			[Token(Token = "0x6002166")]
			[Address(RVA = "0xB70620", Offset = "0xB70620", VA = "0xB70620")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002167")]
			[Address(RVA = "0xB70648", Offset = "0xB70648", VA = "0xB70648")]
			set
			{
			}
		}

		[Token(Token = "0x6002168")]
		[Address(RVA = "0xB7065C", Offset = "0xB7065C", VA = "0xB7065C")]
		public void ApplyTransform(Transform input)
		{
		}

		[Token(Token = "0x6002169")]
		[Address(RVA = "0xB70D28", Offset = "0xB70D28", VA = "0xB70D28")]
		public void ApplyRigidbody(Rigidbody input)
		{
		}

		[Token(Token = "0x600216A")]
		[Address(RVA = "0xB71118", Offset = "0xB71118", VA = "0xB71118")]
		public void ApplyRigidbody2D(Rigidbody2D input)
		{
		}

		[Token(Token = "0x600216B")]
		[Address(RVA = "0xB70E40", Offset = "0xB70E40", VA = "0xB70E40")]
		private Vector3 HandleVelocity(Vector3 velocity)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600216C")]
		[Address(RVA = "0xB706DC", Offset = "0xB706DC", VA = "0xB706DC")]
		private Vector3 GetPosition(Vector3 inputPosition)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600216D")]
		[Address(RVA = "0xB70920", Offset = "0xB70920", VA = "0xB70920")]
		private Quaternion GetRotation(Quaternion inputRotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600216E")]
		[Address(RVA = "0xB70CC4", Offset = "0xB70CC4", VA = "0xB70CC4")]
		private Vector3 GetScale(Vector3 inputScale)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600216F")]
		[Address(RVA = "0xB71248", Offset = "0xB71248", VA = "0xB71248")]
		public TransformModule()
		{
		}
	}
}
namespace Dreamteck.Splines.Primitives
{
	[Token(Token = "0x2000546")]
	public class Capsule : SplinePrimitive
	{
		[Token(Token = "0x40022FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float radius;

		[Token(Token = "0x40022FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float height;

		[Token(Token = "0x6002171")]
		[Address(RVA = "0xB713BC", Offset = "0xB713BC", VA = "0xB713BC", Slot = "4")]
		protected override void Generate()
		{
		}

		[Token(Token = "0x6002172")]
		[Address(RVA = "0xB71BA0", Offset = "0xB71BA0", VA = "0xB71BA0")]
		public Capsule()
		{
		}
	}
	[Token(Token = "0x2000547")]
	public class Ellipse : SplinePrimitive
	{
		[Token(Token = "0x4002300")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float xRadius;

		[Token(Token = "0x4002301")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float yRadius;

		[Token(Token = "0x6002173")]
		[Address(RVA = "0xB71BB4", Offset = "0xB71BB4", VA = "0xB71BB4", Slot = "4")]
		protected override void Generate()
		{
		}

		[Token(Token = "0x6002174")]
		[Address(RVA = "0xB72034", Offset = "0xB72034", VA = "0xB72034")]
		public Ellipse()
		{
		}
	}
	[Token(Token = "0x2000548")]
	public class Line : SplinePrimitive
	{
		[Token(Token = "0x4002302")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool mirror;

		[Token(Token = "0x4002303")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float length;

		[Token(Token = "0x4002304")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public int segments;

		[Token(Token = "0x6002175")]
		[Address(RVA = "0xB73044", Offset = "0xB73044", VA = "0xB73044", Slot = "4")]
		protected override void Generate()
		{
		}

		[Token(Token = "0x6002176")]
		[Address(RVA = "0xB73358", Offset = "0xB73358", VA = "0xB73358")]
		public Line()
		{
		}
	}
	[Token(Token = "0x2000549")]
	public class Ngon : SplinePrimitive
	{
		[Token(Token = "0x4002305")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float radius;

		[Token(Token = "0x4002306")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public int sides;

		[Token(Token = "0x6002177")]
		[Address(RVA = "0xB73428", Offset = "0xB73428", VA = "0xB73428", Slot = "4")]
		protected override void Generate()
		{
		}

		[Token(Token = "0x6002178")]
		[Address(RVA = "0xB735B8", Offset = "0xB735B8", VA = "0xB735B8")]
		public Ngon()
		{
		}
	}
	[Token(Token = "0x200054A")]
	public class Rectangle : SplinePrimitive
	{
		[Token(Token = "0x4002307")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector2 size;

		[Token(Token = "0x6002179")]
		[Address(RVA = "0xB735C8", Offset = "0xB735C8", VA = "0xB735C8", Slot = "4")]
		protected override void Generate()
		{
		}

		[Token(Token = "0x600217A")]
		[Address(RVA = "0xB7395C", Offset = "0xB7395C", VA = "0xB7395C")]
		public Rectangle()
		{
		}
	}
	[Token(Token = "0x200054B")]
	public class RoundedRectangle : SplinePrimitive
	{
		[Token(Token = "0x4002308")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector2 size;

		[Token(Token = "0x4002309")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float xRadius;

		[Token(Token = "0x400230A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float yRadius;

		[Token(Token = "0x600217B")]
		[Address(RVA = "0xB739B0", Offset = "0xB739B0", VA = "0xB739B0", Slot = "4")]
		protected override void Generate()
		{
		}

		[Token(Token = "0x600217C")]
		[Address(RVA = "0xB74418", Offset = "0xB74418", VA = "0xB74418")]
		public RoundedRectangle()
		{
		}
	}
	[Token(Token = "0x200054C")]
	public class Spiral : SplinePrimitive
	{
		[Token(Token = "0x400230B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float startRadius;

		[Token(Token = "0x400230C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float endRadius;

		[Token(Token = "0x400230D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float stretch;

		[Token(Token = "0x400230E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public int iterations;

		[Token(Token = "0x400230F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AnimationCurve curve;

		[Token(Token = "0x600217D")]
		[Address(RVA = "0xB74474", Offset = "0xB74474", VA = "0xB74474", Slot = "4")]
		protected override void Generate()
		{
		}

		[Token(Token = "0x600217E")]
		[Address(RVA = "0xB74978", Offset = "0xB74978", VA = "0xB74978")]
		public Spiral()
		{
		}
	}
	[Token(Token = "0x200054D")]
	public class SplinePrimitive
	{
		[Token(Token = "0x200054E")]
		public enum Axis
		{
			[Token(Token = "0x4002317")]
			X,
			[Token(Token = "0x4002318")]
			Y,
			[Token(Token = "0x4002319")]
			Z,
			[Token(Token = "0x400231A")]
			nX,
			[Token(Token = "0x400231B")]
			nY,
			[Token(Token = "0x400231C")]
			nZ
		}

		[Token(Token = "0x4002310")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected bool closed;

		[Token(Token = "0x4002311")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected SplinePoint[] points;

		[Token(Token = "0x4002312")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected Spline.Type type;

		[Token(Token = "0x4002313")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Axis axis;

		[Token(Token = "0x4002314")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 offset;

		[Token(Token = "0x4002315")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector3 rotation;

		[Token(Token = "0x600217F")]
		[Address(RVA = "0xB731F8", Offset = "0xB731F8", VA = "0xB731F8", Slot = "4")]
		protected virtual void Generate()
		{
		}

		[Token(Token = "0x6002180")]
		[Address(RVA = "0xB749F0", Offset = "0xB749F0", VA = "0xB749F0")]
		public Spline GetSpline()
		{
			return null;
		}

		[Token(Token = "0x6002181")]
		[Address(RVA = "0xB74D58", Offset = "0xB74D58", VA = "0xB74D58")]
		public void UpdateSpline(Spline spline)
		{
		}

		[Token(Token = "0x6002182")]
		[Address(RVA = "0xB74DE4", Offset = "0xB74DE4", VA = "0xB74DE4")]
		public SplineComputer CreateSplineComputer(string name, Vector3 position, Quaternion rotation)
		{
			return null;
		}

		[Token(Token = "0x6002183")]
		[Address(RVA = "0xB74F50", Offset = "0xB74F50", VA = "0xB74F50")]
		public void UpdateSplineComputer(SplineComputer comp)
		{
		}

		[Token(Token = "0x6002184")]
		[Address(RVA = "0xB74A8C", Offset = "0xB74A8C", VA = "0xB74A8C")]
		private void ApplyOffset()
		{
		}

		[Token(Token = "0x6002185")]
		[Address(RVA = "0xB731FC", Offset = "0xB731FC", VA = "0xB731FC")]
		protected void CreatePoints(int count, SplinePoint.Type type)
		{
		}

		[Token(Token = "0x6002186")]
		[Address(RVA = "0xB74FF0", Offset = "0xB74FF0", VA = "0xB74FF0")]
		protected Vector3 GetNormal()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002187")]
		[Address(RVA = "0xB73370", Offset = "0xB73370", VA = "0xB73370")]
		public SplinePrimitive()
		{
		}
	}
	[Token(Token = "0x200054F")]
	public class Star : SplinePrimitive
	{
		[Token(Token = "0x400231D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float radius;

		[Token(Token = "0x400231E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float depth;

		[Token(Token = "0x400231F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public int sides;

		[Token(Token = "0x6002188")]
		[Address(RVA = "0xB751A8", Offset = "0xB751A8", VA = "0xB751A8", Slot = "4")]
		protected override void Generate()
		{
		}

		[Token(Token = "0x6002189")]
		[Address(RVA = "0xB75390", Offset = "0xB75390", VA = "0xB75390")]
		public Star()
		{
		}
	}
}
namespace Dreamteck.Splines.IO
{
	[Token(Token = "0x2000550")]
	public class CSV : SplineParser
	{
		[Token(Token = "0x2000551")]
		public enum ColumnType
		{
			[Token(Token = "0x4002322")]
			Position,
			[Token(Token = "0x4002323")]
			Tangent,
			[Token(Token = "0x4002324")]
			Tangent2,
			[Token(Token = "0x4002325")]
			Normal,
			[Token(Token = "0x4002326")]
			Size,
			[Token(Token = "0x4002327")]
			Color
		}

		[Token(Token = "0x4002320")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<ColumnType> columns;

		[Token(Token = "0x600218A")]
		[Address(RVA = "0xB753A8", Offset = "0xB753A8", VA = "0xB753A8")]
		public CSV(SplineComputer computer)
		{
		}

		[Token(Token = "0x600218B")]
		[Address(RVA = "0xB75890", Offset = "0xB75890", VA = "0xB75890")]
		public CSV(string filePath, [Optional] List<ColumnType> customColumns)
		{
		}

		[Token(Token = "0x600218C")]
		[Address(RVA = "0xB75E60", Offset = "0xB75E60", VA = "0xB75E60")]
		private void Read(string[] lines)
		{
		}

		[Token(Token = "0x600218D")]
		[Address(RVA = "0xB76960", Offset = "0xB76960", VA = "0xB76960")]
		public SplineComputer CreateSplineComputer(Vector3 position, Quaternion rotation)
		{
			return null;
		}

		[Token(Token = "0x600218E")]
		[Address(RVA = "0xB76B98", Offset = "0xB76B98", VA = "0xB76B98")]
		public Spline CreateSpline()
		{
			return null;
		}

		[Token(Token = "0x600218F")]
		[Address(RVA = "0xB76C54", Offset = "0xB76C54", VA = "0xB76C54")]
		public void FlatX()
		{
		}

		[Token(Token = "0x6002190")]
		[Address(RVA = "0xB76E48", Offset = "0xB76E48", VA = "0xB76E48")]
		public void FlatY()
		{
		}

		[Token(Token = "0x6002191")]
		[Address(RVA = "0xB76FF8", Offset = "0xB76FF8", VA = "0xB76FF8")]
		public void FlatZ()
		{
		}

		[Token(Token = "0x6002192")]
		[Address(RVA = "0xB771E0", Offset = "0xB771E0", VA = "0xB771E0")]
		private void AddTitle(ref string[] content, string title)
		{
		}

		[Token(Token = "0x6002193")]
		[Address(RVA = "0xB77294", Offset = "0xB77294", VA = "0xB77294")]
		private void AddVector3Title(ref string[] content, string prefix)
		{
		}

		[Token(Token = "0x6002194")]
		[Address(RVA = "0xB77450", Offset = "0xB77450", VA = "0xB77450")]
		private void AddColorTitle(ref string[] content, string prefix)
		{
		}

		[Token(Token = "0x6002195")]
		[Address(RVA = "0xB77674", Offset = "0xB77674", VA = "0xB77674")]
		private void AddVector3(ref string[] content, int index, Vector3 vector)
		{
		}

		[Token(Token = "0x6002196")]
		[Address(RVA = "0xB777AC", Offset = "0xB777AC", VA = "0xB777AC")]
		private void AddColor(ref string[] content, int index, Color color)
		{
		}

		[Token(Token = "0x6002197")]
		[Address(RVA = "0xB776C0", Offset = "0xB776C0", VA = "0xB776C0")]
		private void AddFloat(ref string[] content, int index, float value)
		{
		}

		[Token(Token = "0x6002198")]
		[Address(RVA = "0xB77814", Offset = "0xB77814", VA = "0xB77814")]
		public void Write(string filePath)
		{
		}
	}
	[Token(Token = "0x2000552")]
	public class SplineParser
	{
		[Token(Token = "0x2000553")]
		internal class Transformation
		{
			[Token(Token = "0x400232A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			protected static Matrix4x4 matrix;

			[Token(Token = "0x600219F")]
			[Address(RVA = "0xB783F0", Offset = "0xB783F0", VA = "0xB783F0")]
			internal static void ResetMatrix()
			{
			}

			[Token(Token = "0x60021A0")]
			[Address(RVA = "0xB78538", Offset = "0xB78538", VA = "0xB78538", Slot = "4")]
			internal virtual void Push()
			{
			}

			[Token(Token = "0x60021A1")]
			[Address(RVA = "0xB7853C", Offset = "0xB7853C", VA = "0xB7853C")]
			internal static void Apply(SplinePoint[] points)
			{
			}

			[Token(Token = "0x60021A2")]
			[Address(RVA = "0xB786D4", Offset = "0xB786D4", VA = "0xB786D4")]
			public Transformation()
			{
			}
		}

		[Token(Token = "0x2000554")]
		internal class Translate : Transformation
		{
			[Token(Token = "0x400232B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private Vector2 offset;

			[Token(Token = "0x60021A4")]
			[Address(RVA = "0xB786E0", Offset = "0xB786E0", VA = "0xB786E0")]
			public Translate(Vector2 o)
			{
			}

			[Token(Token = "0x60021A5")]
			[Address(RVA = "0xB78788", Offset = "0xB78788", VA = "0xB78788", Slot = "4")]
			internal override void Push()
			{
			}
		}

		[Token(Token = "0x2000555")]
		internal class Rotate : Transformation
		{
			[Token(Token = "0x400232C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private float angle;

			[Token(Token = "0x60021A6")]
			[Address(RVA = "0xB78918", Offset = "0xB78918", VA = "0xB78918")]
			public Rotate(float a)
			{
			}

			[Token(Token = "0x60021A7")]
			[Address(RVA = "0xB78984", Offset = "0xB78984", VA = "0xB78984", Slot = "4")]
			internal override void Push()
			{
			}
		}

		[Token(Token = "0x2000556")]
		internal class Scale : Transformation
		{
			[Token(Token = "0x400232D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private Vector2 multiplier;

			[Token(Token = "0x60021A8")]
			[Address(RVA = "0xB78B60", Offset = "0xB78B60", VA = "0xB78B60")]
			public Scale(Vector2 s)
			{
			}

			[Token(Token = "0x60021A9")]
			[Address(RVA = "0xB78C08", Offset = "0xB78C08", VA = "0xB78C08", Slot = "4")]
			internal override void Push()
			{
			}
		}

		[Token(Token = "0x2000557")]
		internal class SkewX : Transformation
		{
			[Token(Token = "0x400232E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private float amount;

			[Token(Token = "0x60021AA")]
			[Address(RVA = "0xB78D84", Offset = "0xB78D84", VA = "0xB78D84")]
			public SkewX(float a)
			{
			}

			[Token(Token = "0x60021AB")]
			[Address(RVA = "0xB78DF0", Offset = "0xB78DF0", VA = "0xB78DF0", Slot = "4")]
			internal override void Push()
			{
			}
		}

		[Token(Token = "0x2000558")]
		internal class SkewY : Transformation
		{
			[Token(Token = "0x400232F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private float amount;

			[Token(Token = "0x60021AC")]
			[Address(RVA = "0xB78F48", Offset = "0xB78F48", VA = "0xB78F48")]
			public SkewY(float a)
			{
			}

			[Token(Token = "0x60021AD")]
			[Address(RVA = "0xB78FB4", Offset = "0xB78FB4", VA = "0xB78FB4", Slot = "4")]
			internal override void Push()
			{
			}
		}

		[Token(Token = "0x2000559")]
		internal class MatrixTransform : Transformation
		{
			[Token(Token = "0x4002330")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private Matrix4x4 transformMatrix;

			[Token(Token = "0x60021AE")]
			[Address(RVA = "0xB7910C", Offset = "0xB7910C", VA = "0xB7910C")]
			public MatrixTransform(float a, float b, float c, float d, float e, float f)
			{
			}

			[Token(Token = "0x60021AF")]
			[Address(RVA = "0xB7921C", Offset = "0xB7921C", VA = "0xB7921C", Slot = "4")]
			internal override void Push()
			{
			}
		}

		[Token(Token = "0x200055A")]
		internal class SplineDefinition
		{
			[Token(Token = "0x4002331")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal string name;

			[Token(Token = "0x4002332")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal Spline.Type type;

			[Token(Token = "0x4002333")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal List<SplinePoint> points;

			[Token(Token = "0x4002334")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal bool closed;

			[Token(Token = "0x4002335")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			internal Vector3 position;

			[Token(Token = "0x4002336")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			internal Vector3 tangent;

			[Token(Token = "0x4002337")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			internal Vector3 tangent2;

			[Token(Token = "0x4002338")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			internal Vector3 normal;

			[Token(Token = "0x4002339")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			internal float size;

			[Token(Token = "0x400233A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			internal Color color;

			[Token(Token = "0x170004AD")]
			internal int pointCount
			{
				[Token(Token = "0x60021B0")]
				[Address(RVA = "0xB76E00", Offset = "0xB76E00", VA = "0xB76E00")]
				get
				{
					return default(int);
				}
			}

			[Token(Token = "0x60021B1")]
			[Address(RVA = "0xB75CF0", Offset = "0xB75CF0", VA = "0xB75CF0")]
			internal SplineDefinition(string n, Spline.Type t)
			{
			}

			[Token(Token = "0x60021B2")]
			[Address(RVA = "0xB756CC", Offset = "0xB756CC", VA = "0xB756CC")]
			internal SplineDefinition(string n, Spline spline)
			{
			}

			[Token(Token = "0x60021B3")]
			[Address(RVA = "0xB792E8", Offset = "0xB792E8", VA = "0xB792E8")]
			internal SplinePoint GetLastPoint()
			{
				return default(SplinePoint);
			}

			[Token(Token = "0x60021B4")]
			[Address(RVA = "0xB79388", Offset = "0xB79388", VA = "0xB79388")]
			internal void SetLastPoint(SplinePoint point)
			{
			}

			[Token(Token = "0x60021B5")]
			[Address(RVA = "0xB79438", Offset = "0xB79438", VA = "0xB79438")]
			internal void CreateClosingPoint()
			{
			}

			[Token(Token = "0x60021B6")]
			[Address(RVA = "0xB76824", Offset = "0xB76824", VA = "0xB76824")]
			internal void CreateSmooth()
			{
			}

			[Token(Token = "0x60021B7")]
			[Address(RVA = "0xB7958C", Offset = "0xB7958C", VA = "0xB7958C")]
			internal void CreateBroken()
			{
			}

			[Token(Token = "0x60021B8")]
			[Address(RVA = "0xB7974C", Offset = "0xB7974C", VA = "0xB7974C")]
			internal void CreateLinear()
			{
			}

			[Token(Token = "0x60021B9")]
			[Address(RVA = "0xB76978", Offset = "0xB76978", VA = "0xB76978")]
			internal SplineComputer CreateSplineComputer(Vector3 position, Quaternion rotation)
			{
				return null;
			}

			[Token(Token = "0x60021BA")]
			[Address(RVA = "0xB76BB0", Offset = "0xB76BB0", VA = "0xB76BB0")]
			internal Spline CreateSpline()
			{
				return null;
			}

			[Token(Token = "0x60021BB")]
			[Address(RVA = "0xB79760", Offset = "0xB79760", VA = "0xB79760")]
			internal void Transform(List<Transformation> trs)
			{
			}
		}

		[Token(Token = "0x4002328")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected string fileName;

		[Token(Token = "0x4002329")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal SplineDefinition buffer;

		[Token(Token = "0x170004AC")]
		public string name
		{
			[Token(Token = "0x6002199")]
			[Address(RVA = "0xB77D94", Offset = "0xB77D94", VA = "0xB77D94")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600219A")]
		[Address(RVA = "0xB77D9C", Offset = "0xB77D9C", VA = "0xB77D9C")]
		internal Vector2[] ParseVector2(string coord)
		{
			return null;
		}

		[Token(Token = "0x600219B")]
		[Address(RVA = "0xB78230", Offset = "0xB78230", VA = "0xB78230")]
		internal float[] ParseFloat(string coord)
		{
			return null;
		}

		[Token(Token = "0x600219C")]
		[Address(RVA = "0xB77F90", Offset = "0xB77F90", VA = "0xB77F90")]
		internal List<float> ParseFloatArray(string content)
		{
			return null;
		}

		[Token(Token = "0x600219D")]
		[Address(RVA = "0xB7833C", Offset = "0xB7833C", VA = "0xB7833C")]
		public bool IsWHiteSpace(string s)
		{
			return default(bool);
		}

		[Token(Token = "0x600219E")]
		[Address(RVA = "0xB7567C", Offset = "0xB7567C", VA = "0xB7567C")]
		public SplineParser()
		{
		}
	}
	[Token(Token = "0x200055B")]
	public class SVG : SplineParser
	{
		[Token(Token = "0x200055C")]
		public enum Axis
		{
			[Token(Token = "0x4002342")]
			X,
			[Token(Token = "0x4002343")]
			Y,
			[Token(Token = "0x4002344")]
			Z
		}

		[Token(Token = "0x200055D")]
		internal class PathSegment
		{
			[Token(Token = "0x200055E")]
			internal enum Type
			{
				[Token(Token = "0x4002349")]
				Cubic,
				[Token(Token = "0x400234A")]
				CubicShort,
				[Token(Token = "0x400234B")]
				Quadratic,
				[Token(Token = "0x400234C")]
				QuadraticShort
			}

			[Token(Token = "0x4002345")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal Vector3 startTangent;

			[Token(Token = "0x4002346")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			internal Vector3 endTangent;

			[Token(Token = "0x4002347")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal Vector3 endPoint;

			[Token(Token = "0x60021D6")]
			[Address(RVA = "0xB7F440", Offset = "0xB7F440", VA = "0xB7F440")]
			internal PathSegment(Vector2 s, Vector2 e, Vector2 c)
			{
			}

			[Token(Token = "0x60021D7")]
			[Address(RVA = "0xB7F3B8", Offset = "0xB7F3B8", VA = "0xB7F3B8")]
			internal PathSegment()
			{
			}
		}

		[Token(Token = "0x200055F")]
		public enum Element
		{
			[Token(Token = "0x400234E")]
			All,
			[Token(Token = "0x400234F")]
			Path,
			[Token(Token = "0x4002350")]
			Polygon,
			[Token(Token = "0x4002351")]
			Ellipse,
			[Token(Token = "0x4002352")]
			Rectangle,
			[Token(Token = "0x4002353")]
			Line
		}

		[Token(Token = "0x400233B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<SplineDefinition> paths;

		[Token(Token = "0x400233C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<SplineDefinition> polygons;

		[Token(Token = "0x400233D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<SplineDefinition> ellipses;

		[Token(Token = "0x400233E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<SplineDefinition> rectangles;

		[Token(Token = "0x400233F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<SplineDefinition> lines;

		[Token(Token = "0x4002340")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<Transformation> transformBuffer;

		[Token(Token = "0x60021BC")]
		[Address(RVA = "0xB79A28", Offset = "0xB79A28", VA = "0xB79A28")]
		public SVG(string filePath)
		{
		}

		[Token(Token = "0x60021BD")]
		[Address(RVA = "0xB79E08", Offset = "0xB79E08", VA = "0xB79E08")]
		public SVG(List<SplineComputer> computers)
		{
		}

		[Token(Token = "0x60021BE")]
		[Address(RVA = "0xB7A1D8", Offset = "0xB7A1D8", VA = "0xB7A1D8")]
		public void Write(string filePath, Axis ax = Axis.Z)
		{
		}

		[Token(Token = "0x60021BF")]
		[Address(RVA = "0xB7AF5C", Offset = "0xB7AF5C", VA = "0xB7AF5C")]
		private Vector2 MapPoint(Vector3 original, Axis ax)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60021C0")]
		[Address(RVA = "0xB79D80", Offset = "0xB79D80", VA = "0xB79D80")]
		private void Read(XmlDocument doc)
		{
		}

		[Token(Token = "0x60021C1")]
		[Address(RVA = "0xB7AF8C", Offset = "0xB7AF8C", VA = "0xB7AF8C")]
		private void Traverse(XmlNodeList nodes)
		{
		}

		[Token(Token = "0x60021C2")]
		[Address(RVA = "0xB7CBD0", Offset = "0xB7CBD0", VA = "0xB7CBD0")]
		public List<SplineComputer> CreateSplineComputers(Vector3 position, Quaternion rotation, Element elements = Element.All)
		{
			return null;
		}

		[Token(Token = "0x60021C3")]
		[Address(RVA = "0xB7D328", Offset = "0xB7D328", VA = "0xB7D328")]
		public List<Spline> CreateSplines(Element elements = Element.All)
		{
			return null;
		}

		[Token(Token = "0x60021C4")]
		[Address(RVA = "0xB7C794", Offset = "0xB7C794", VA = "0xB7C794")]
		private int ReadRectangle(XmlNode rectNode)
		{
			return default(int);
		}

		[Token(Token = "0x60021C5")]
		[Address(RVA = "0xB7C4C0", Offset = "0xB7C4C0", VA = "0xB7C4C0")]
		private int ReadLine(XmlNode lineNode)
		{
			return default(int);
		}

		[Token(Token = "0x60021C6")]
		[Address(RVA = "0xB7C168", Offset = "0xB7C168", VA = "0xB7C168")]
		private int ReadEllipse(XmlNode ellipseNode)
		{
			return default(int);
		}

		[Token(Token = "0x60021C7")]
		[Address(RVA = "0xB7BE6C", Offset = "0xB7BE6C", VA = "0xB7BE6C")]
		private int ReadPolygon(XmlNode polyNode, bool closed)
		{
			return default(int);
		}

		[Token(Token = "0x60021C8")]
		[Address(RVA = "0xB7B5C0", Offset = "0xB7B5C0", VA = "0xB7B5C0")]
		private int ParseTransformation(XmlNode node)
		{
			return default(int);
		}

		[Token(Token = "0x60021C9")]
		[Address(RVA = "0xB7DBA0", Offset = "0xB7DBA0", VA = "0xB7DBA0")]
		private List<Transformation> ParseTransformations(string transformContent)
		{
			return null;
		}

		[Token(Token = "0x60021CA")]
		[Address(RVA = "0xB7B698", Offset = "0xB7B698", VA = "0xB7B698")]
		private int ReadPath(XmlNode pathNode)
		{
			return default(int);
		}

		[Token(Token = "0x60021CB")]
		[Address(RVA = "0xB7E858", Offset = "0xB7E858", VA = "0xB7E858")]
		private void PathStart(string name, string coords, bool relative)
		{
		}

		[Token(Token = "0x60021CC")]
		[Address(RVA = "0xB7E988", Offset = "0xB7E988", VA = "0xB7E988")]
		private void PathClose()
		{
		}

		[Token(Token = "0x60021CD")]
		[Address(RVA = "0xB7E9A8", Offset = "0xB7E9A8", VA = "0xB7E9A8")]
		private void PathLineTo(string coords, bool relative)
		{
		}

		[Token(Token = "0x60021CE")]
		[Address(RVA = "0xB7EA6C", Offset = "0xB7EA6C", VA = "0xB7EA6C")]
		private void PathHorizontalLineTo(string coords, bool relative)
		{
		}

		[Token(Token = "0x60021CF")]
		[Address(RVA = "0xB7EB04", Offset = "0xB7EB04", VA = "0xB7EB04")]
		private void PathVerticalLineTo(string coords, bool relative)
		{
		}

		[Token(Token = "0x60021D0")]
		[Address(RVA = "0xB7EBA4", Offset = "0xB7EBA4", VA = "0xB7EBA4")]
		private void PathCurveTo(string coords, PathSegment.Type type, bool relative)
		{
		}

		[Token(Token = "0x60021D1")]
		[Address(RVA = "0xB7DAE8", Offset = "0xB7DAE8", VA = "0xB7DAE8")]
		private void WriteBufferTo(List<SplineDefinition> list)
		{
		}

		[Token(Token = "0x60021D2")]
		[Address(RVA = "0xB7EE3C", Offset = "0xB7EE3C", VA = "0xB7EE3C")]
		private PathSegment[] ParsePathSegment(string coord, PathSegment.Type type)
		{
			return null;
		}

		[Token(Token = "0x60021D3")]
		[Address(RVA = "0xB7AA30", Offset = "0xB7AA30", VA = "0xB7AA30")]
		private string EncodePath(SplineDefinition definition, Axis ax)
		{
			return null;
		}

		[Token(Token = "0x60021D4")]
		[Address(RVA = "0xB7A8A4", Offset = "0xB7A8A4", VA = "0xB7A8A4")]
		private string EncodePolygon(SplineDefinition definition, Axis ax)
		{
			return null;
		}

		[Token(Token = "0x60021D5")]
		[Address(RVA = "0xB7D9B8", Offset = "0xB7D9B8", VA = "0xB7D9B8")]
		private string GetAttributeContent(XmlNode node, string attributeName)
		{
			return null;
		}
	}
}
namespace Bhaptics.Tact.Unity
{
	[Token(Token = "0x2000561")]
	public class HapticApi
	{
		[Token(Token = "0x2000562")]
		public struct point
		{
			[Token(Token = "0x4002356")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public float x;

			[Token(Token = "0x4002357")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public float y;

			[Token(Token = "0x4002358")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public int intensity;

			[Token(Token = "0x4002359")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public int motorCount;
		}

		[Token(Token = "0x2000563")]
		public struct status
		{
			[Token(Token = "0x400235A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int[] values;
		}

		[PreserveSig]
		[Token(Token = "0x60021DB")]
		[Address(RVA = "0xB7F5A0", Offset = "0xB7F5A0", VA = "0xB7F5A0")]
		public static extern bool TryGetExePath(byte[] buf, ref int size);

		[PreserveSig]
		[Token(Token = "0x60021DC")]
		[Address(RVA = "0xB7F634", Offset = "0xB7F634", VA = "0xB7F634")]
		public static extern void Initialise(string appId, string appName);

		[PreserveSig]
		[Token(Token = "0x60021DD")]
		[Address(RVA = "0xB7F6E0", Offset = "0xB7F6E0", VA = "0xB7F6E0")]
		public static extern void Destroy();

		[PreserveSig]
		[Token(Token = "0x60021DE")]
		[Address(RVA = "0xB7F744", Offset = "0xB7F744", VA = "0xB7F744")]
		public static extern void RegisterFeedback(string str, string projectJson);

		[PreserveSig]
		[Token(Token = "0x60021DF")]
		[Address(RVA = "0xB7F7EC", Offset = "0xB7F7EC", VA = "0xB7F7EC")]
		public static extern void RegisterFeedbackFromTactFile(string str, string tactFileStr);

		[PreserveSig]
		[Token(Token = "0x60021E0")]
		[Address(RVA = "0xB7F898", Offset = "0xB7F898", VA = "0xB7F898")]
		public static extern void RegisterFeedbackFromTactFileReflected(string str, string tactFileStr);

		[PreserveSig]
		[Token(Token = "0x60021E1")]
		[Address(RVA = "0xB7F944", Offset = "0xB7F944", VA = "0xB7F944")]
		public static extern void SubmitRegistered(string key);

		[PreserveSig]
		[Token(Token = "0x60021E2")]
		[Address(RVA = "0xB7F9D0", Offset = "0xB7F9D0", VA = "0xB7F9D0")]
		public static extern void SubmitRegisteredStartMillis(string key, int startTimeMillis);

		[PreserveSig]
		[Token(Token = "0x60021E3")]
		[Address(RVA = "0xB7FA64", Offset = "0xB7FA64", VA = "0xB7FA64")]
		public static extern void SubmitRegisteredWithOption(string key, string altKey, float intensity, float duration, float offsetX, float offsetY);

		[PreserveSig]
		[Token(Token = "0x60021E4")]
		[Address(RVA = "0xB7FB40", Offset = "0xB7FB40", VA = "0xB7FB40")]
		public static extern void SubmitByteArray(string key, PositionType pos, byte[] charPtr, int length, int durationMillis);

		[PreserveSig]
		[Token(Token = "0x60021E5")]
		[Address(RVA = "0xB7FC04", Offset = "0xB7FC04", VA = "0xB7FC04")]
		public static extern void SubmitPathArray(string key, PositionType pos, point[] charPtr, int length, int durationMillis);

		[PreserveSig]
		[Token(Token = "0x60021E6")]
		[Address(RVA = "0xB7FCC8", Offset = "0xB7FCC8", VA = "0xB7FCC8")]
		public static extern bool IsFeedbackRegistered(string key);

		[PreserveSig]
		[Token(Token = "0x60021E7")]
		[Address(RVA = "0xB7FD60", Offset = "0xB7FD60", VA = "0xB7FD60")]
		public static extern bool IsPlaying();

		[PreserveSig]
		[Token(Token = "0x60021E8")]
		[Address(RVA = "0xB7FDD0", Offset = "0xB7FDD0", VA = "0xB7FDD0")]
		public static extern bool IsPlayingKey(string key);

		[PreserveSig]
		[Token(Token = "0x60021E9")]
		[Address(RVA = "0xB7FE68", Offset = "0xB7FE68", VA = "0xB7FE68")]
		public static extern void TurnOff();

		[PreserveSig]
		[Token(Token = "0x60021EA")]
		[Address(RVA = "0xB7FECC", Offset = "0xB7FECC", VA = "0xB7FECC")]
		public static extern void TurnOffKey(string key);

		[PreserveSig]
		[Token(Token = "0x60021EB")]
		[Address(RVA = "0xB7FF58", Offset = "0xB7FF58", VA = "0xB7FF58")]
		public static extern void EnableFeedback();

		[PreserveSig]
		[Token(Token = "0x60021EC")]
		[Address(RVA = "0xB7FFB8", Offset = "0xB7FFB8", VA = "0xB7FFB8")]
		public static extern void DisableFeedback();

		[PreserveSig]
		[Token(Token = "0x60021ED")]
		[Address(RVA = "0xB8001C", Offset = "0xB8001C", VA = "0xB8001C")]
		public static extern void ToggleFeedback();

		[PreserveSig]
		[Token(Token = "0x60021EE")]
		[Address(RVA = "0xB8007C", Offset = "0xB8007C", VA = "0xB8007C")]
		public static extern bool IsDevicePlaying(PositionType pos);

		[PreserveSig]
		[Token(Token = "0x60021EF")]
		[Address(RVA = "0xB80100", Offset = "0xB80100", VA = "0xB80100")]
		public static extern bool TryGetResponseForPosition(PositionType pos, out status status);

		[Token(Token = "0x60021F0")]
		[Address(RVA = "0xB801B8", Offset = "0xB801B8", VA = "0xB801B8")]
		public HapticApi()
		{
		}
	}
	[Token(Token = "0x2000564")]
	public class AndroidHaptic : IHaptic
	{
		[Token(Token = "0x400235B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected static AndroidJavaObject androidJavaObject;

		[Token(Token = "0x400235C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected List<HapticDevice> deviceList;

		[Token(Token = "0x400235D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private List<string> registeredCache;

		[Token(Token = "0x400235E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly object[] SubmitRegisteredParams;

		[Token(Token = "0x400235F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly int[] Empty;

		[Token(Token = "0x4002360")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static readonly object[] EmptyParams;

		[Token(Token = "0x4002361")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static readonly RotationOption DefaultRotationOption;

		[Token(Token = "0x4002362")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly object syncLock;

		[Token(Token = "0x4002363")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Dictionary<PositionType, int[]> updatedList;

		[Token(Token = "0x4002364")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected IntPtr AndroidJavaObjectPtr;

		[Token(Token = "0x4002365")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected IntPtr SubmitRegisteredPtr;

		[Token(Token = "0x4002366")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected IntPtr SubmitRegisteredWithTimePtr;

		[Token(Token = "0x4002367")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected IntPtr RegisterPtr;

		[Token(Token = "0x4002368")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected IntPtr RegisterReflectedPtr;

		[Token(Token = "0x4002369")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected IntPtr PingPtr;

		[Token(Token = "0x400236A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected IntPtr PingAllPtr;

		[Token(Token = "0x400236B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected IntPtr IsRegisteredPtr;

		[Token(Token = "0x400236C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected IntPtr IsPlayingPtr;

		[Token(Token = "0x400236D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected IntPtr IsPlayingAnythingPtr;

		[Token(Token = "0x400236E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected IntPtr ToggleStreamPtr;

		[Token(Token = "0x400236F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected IntPtr IsStreamingEnablePtr;

		[Token(Token = "0x4002370")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected IntPtr GetStreamingHostsPtr;

		[Token(Token = "0x4002371")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected IntPtr ShowBluetoothPtr;

		[Token(Token = "0x4002372")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected IntPtr RefreshPairingInfoPtr;

		[Token(Token = "0x4002373")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		protected IntPtr EnableDevicePtr;

		[Token(Token = "0x60021F1")]
		[Address(RVA = "0xB801C0", Offset = "0xB801C0", VA = "0xB801C0")]
		public AndroidHaptic()
		{
		}

		[Token(Token = "0x60021F2")]
		[Address(RVA = "0xB80B4C", Offset = "0xB80B4C", VA = "0xB80B4C")]
		public List<AndroidUtils.StreamHost> GetStreamingHosts()
		{
			return null;
		}

		[Token(Token = "0x60021F3")]
		[Address(RVA = "0xB80F34", Offset = "0xB80F34", VA = "0xB80F34")]
		public bool IsStreamingEnable()
		{
			return default(bool);
		}

		[Token(Token = "0x60021F4")]
		[Address(RVA = "0xB8102C", Offset = "0xB8102C", VA = "0xB8102C")]
		public void ToggleStreaming()
		{
		}

		[Token(Token = "0x60021F5")]
		[Address(RVA = "0xB81148", Offset = "0xB81148", VA = "0xB81148", Slot = "4")]
		public bool IsConnect(PositionType type)
		{
			return default(bool);
		}

		[Token(Token = "0x60021F6")]
		[Address(RVA = "0xB812B4", Offset = "0xB812B4", VA = "0xB812B4", Slot = "5")]
		public bool IsConnect(HapticDeviceType type, bool isLeft = true)
		{
			return default(bool);
		}

		[Token(Token = "0x60021F7")]
		[Address(RVA = "0xB8144C", Offset = "0xB8144C", VA = "0xB8144C", Slot = "6")]
		public bool IsPlaying(string key)
		{
			return default(bool);
		}

		[Token(Token = "0x60021F8")]
		[Address(RVA = "0xB8153C", Offset = "0xB8153C", VA = "0xB8153C", Slot = "7")]
		public bool IsFeedbackRegistered(string key)
		{
			return default(bool);
		}

		[Token(Token = "0x60021F9")]
		[Address(RVA = "0xB816CC", Offset = "0xB816CC", VA = "0xB816CC", Slot = "8")]
		public bool IsPlaying()
		{
			return default(bool);
		}

		[Token(Token = "0x60021FA")]
		[Address(RVA = "0xB81760", Offset = "0xB81760", VA = "0xB81760", Slot = "9")]
		public void RegisterTactFileStr(string key, string tactFileStr)
		{
		}

		[Token(Token = "0x60021FB")]
		[Address(RVA = "0xB81878", Offset = "0xB81878", VA = "0xB81878", Slot = "10")]
		public void RegisterTactFileStrReflected(string key, string tactFileStr)
		{
		}

		[Token(Token = "0x60021FC")]
		[Address(RVA = "0xB81990", Offset = "0xB81990", VA = "0xB81990", Slot = "11")]
		public void Submit(string key, PositionType position, List<DotPoint> points, int durationMillis)
		{
		}

		[Token(Token = "0x60021FD")]
		[Address(RVA = "0xB81E50", Offset = "0xB81E50", VA = "0xB81E50", Slot = "12")]
		public void Submit(string key, PositionType position, List<PathPoint> points, int durationMillis)
		{
		}

		[Token(Token = "0x60021FE")]
		[Address(RVA = "0xB823C8", Offset = "0xB823C8", VA = "0xB823C8", Slot = "13")]
		public void SubmitRegistered(string key, string altKey, ScaleOption option)
		{
		}

		[Token(Token = "0x60021FF")]
		[Address(RVA = "0xB82450", Offset = "0xB82450", VA = "0xB82450", Slot = "14")]
		public void SubmitRegistered(string key, string altKey, RotationOption rOption, ScaleOption sOption)
		{
		}

		[Token(Token = "0x6002200")]
		[Address(RVA = "0xB826F0", Offset = "0xB826F0", VA = "0xB826F0", Slot = "15")]
		public void SubmitRegistered(string key)
		{
		}

		[Token(Token = "0x6002201")]
		[Address(RVA = "0xB82708", Offset = "0xB82708", VA = "0xB82708", Slot = "16")]
		public void SubmitRegistered(string key, int startTimeMillis)
		{
		}

		[Token(Token = "0x6002202")]
		[Address(RVA = "0xB82818", Offset = "0xB82818", VA = "0xB82818", Slot = "17")]
		public void TurnOff(string key)
		{
		}

		[Token(Token = "0x6002203")]
		[Address(RVA = "0xB82A3C", Offset = "0xB82A3C", VA = "0xB82A3C", Slot = "18")]
		public void TurnOff()
		{
		}

		[Token(Token = "0x6002204")]
		[Address(RVA = "0xB82C48", Offset = "0xB82C48", VA = "0xB82C48", Slot = "19")]
		public void Dispose()
		{
		}

		[Token(Token = "0x6002205")]
		[Address(RVA = "0xB82470", Offset = "0xB82470", VA = "0xB82470")]
		private void SubmitRequest(string key, string altKey, float intensity, float duration, float offsetAngleX, float offsetY)
		{
		}

		[Token(Token = "0x6002206")]
		[Address(RVA = "0xB82D48", Offset = "0xB82D48", VA = "0xB82D48", Slot = "20")]
		public int[] GetCurrentFeedback(PositionType pos)
		{
			return null;
		}

		[Token(Token = "0x6002207")]
		[Address(RVA = "0xB80A50", Offset = "0xB80A50", VA = "0xB80A50")]
		public List<HapticDevice> GetDevices()
		{
			return null;
		}

		[Token(Token = "0x6002208")]
		[Address(RVA = "0xB83180", Offset = "0xB83180", VA = "0xB83180")]
		public void TogglePosition(string address)
		{
		}

		[Token(Token = "0x6002209")]
		[Address(RVA = "0xB832B4", Offset = "0xB832B4", VA = "0xB832B4")]
		public void PingAll()
		{
		}

		[Token(Token = "0x600220A")]
		[Address(RVA = "0xB83344", Offset = "0xB83344", VA = "0xB83344")]
		public void Ping(string address)
		{
		}

		[Token(Token = "0x600220B")]
		[Address(RVA = "0xB83430", Offset = "0xB83430", VA = "0xB83430")]
		public void ShowBluetoothSetting()
		{
		}

		[Token(Token = "0x600220C")]
		[Address(RVA = "0xB834CC", Offset = "0xB834CC", VA = "0xB834CC")]
		public void EnableDevice(string address, bool boo)
		{
		}

		[Token(Token = "0x600220D")]
		[Address(RVA = "0xB8360C", Offset = "0xB8360C", VA = "0xB8360C")]
		public void RefreshPairingInfo()
		{
		}

		[Token(Token = "0x600220E")]
		[Address(RVA = "0xB810BC", Offset = "0xB810BC", VA = "0xB810BC")]
		private void CallNativeVoidMethod(IntPtr methodPtr, object[] param)
		{
		}

		[Token(Token = "0x600220F")]
		[Address(RVA = "0xB80F9C", Offset = "0xB80F9C", VA = "0xB80F9C")]
		private bool CallNativeBoolMethod(IntPtr methodPtr, object[] param)
		{
			return default(bool);
		}
	}
	[Serializable]
	[Token(Token = "0x2000565")]
	public class HapticDevice
	{
		[Token(Token = "0x4002374")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool IsPaired;

		[Token(Token = "0x4002375")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool IsConnected;

		[Token(Token = "0x4002376")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string DeviceName;

		[Token(Token = "0x4002377")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PositionType Position;

		[Token(Token = "0x4002378")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string Address;

		[Token(Token = "0x4002379")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public PositionType[] Candidates;

		[Token(Token = "0x400237A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool IsEnable;

		[Token(Token = "0x400237B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		public bool IsAudioJack;

		[Token(Token = "0x400237C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public int Battery;

		[Token(Token = "0x6002211")]
		[Address(RVA = "0xB83BA0", Offset = "0xB83BA0", VA = "0xB83BA0")]
		public HapticDevice()
		{
		}
	}
	[Token(Token = "0x2000566")]
	public static class AndroidUtils
	{
		[Serializable]
		[Token(Token = "0x2000567")]
		private class Wrapper<T>
		{
			[Token(Token = "0x400237D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public T[] array;

			[Token(Token = "0x600221B")]
			public Wrapper()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000568")]
		private class Device
		{
			[Token(Token = "0x400237E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool paired;

			[Token(Token = "0x400237F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string deviceName;

			[Token(Token = "0x4002380")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public int position;

			[Token(Token = "0x4002381")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public bool connected;

			[Token(Token = "0x4002382")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string address;

			[Token(Token = "0x4002383")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public int battery;

			[Token(Token = "0x4002384")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public bool enable;

			[Token(Token = "0x4002385")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
			public bool audioJackIn;

			[Token(Token = "0x600221C")]
			[Address(RVA = "0xB83E44", Offset = "0xB83E44", VA = "0xB83E44")]
			public Device()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000569")]
		public class StreamHost
		{
			[Token(Token = "0x4002386")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string ip;

			[Token(Token = "0x4002387")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public bool connected;

			[Token(Token = "0x600221D")]
			[Address(RVA = "0xB83E4C", Offset = "0xB83E4C", VA = "0xB83E4C")]
			public StreamHost()
			{
			}
		}

		[Token(Token = "0x6002212")]
		[Address(RVA = "0xB83BA8", Offset = "0xB83BA8", VA = "0xB83BA8")]
		private static PositionType ToDeviceType(int type)
		{
			return default(PositionType);
		}

		[Token(Token = "0x6002213")]
		[Address(RVA = "0xB83BCC", Offset = "0xB83BCC", VA = "0xB83BCC")]
		private static PositionType[] ToCandidates(int type)
		{
			return null;
		}

		[Token(Token = "0x6002214")]
		[Address(RVA = "0xB83D40", Offset = "0xB83D40", VA = "0xB83D40")]
		public static bool IsLeft(PositionType pos)
		{
			return default(bool);
		}

		[Token(Token = "0x6002215")]
		[Address(RVA = "0xB83D68", Offset = "0xB83D68", VA = "0xB83D68")]
		public static bool CanChangePosition(PositionType pos)
		{
			return default(bool);
		}

		[Token(Token = "0x6002216")]
		public static T[] GetJsonArray<T>(string json)
		{
			return null;
		}

		[Token(Token = "0x6002217")]
		[Address(RVA = "0xB83D78", Offset = "0xB83D78", VA = "0xB83D78")]
		private static HapticDevice Convert(Device d)
		{
			return null;
		}

		[Token(Token = "0x6002218")]
		[Address(RVA = "0xB83034", Offset = "0xB83034", VA = "0xB83034")]
		public static List<HapticDevice> ConvertToBhapticsDevices(string[] deviceJson)
		{
			return null;
		}

		[Token(Token = "0x6002219")]
		[Address(RVA = "0xB836A8", Offset = "0xB836A8", VA = "0xB836A8")]
		public static void CallNativeVoidMethod(IntPtr androidObjPtr, IntPtr methodPtr, object[] param)
		{
		}

		[Token(Token = "0x600221A")]
		[Address(RVA = "0xB838A4", Offset = "0xB838A4", VA = "0xB838A4")]
		public static bool CallNativeBoolMethod(IntPtr androidObjPtr, IntPtr methodPtr, object[] param)
		{
			return default(bool);
		}
	}
	[Serializable]
	[Token(Token = "0x200056A")]
	public class PositonIconSetting
	{
		[Token(Token = "0x4002388")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Sprite connect;

		[Token(Token = "0x4002389")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Sprite disconnect;

		[Token(Token = "0x600221E")]
		[Address(RVA = "0xB83E54", Offset = "0xB83E54", VA = "0xB83E54")]
		public PositonIconSetting()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200056B")]
	public class IconSetting
	{
		[Token(Token = "0x400238A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Header("[Setting Icons]")]
		public PositonIconSetting Vest;

		[Token(Token = "0x400238B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PositonIconSetting Head;

		[Token(Token = "0x400238C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PositonIconSetting Arm;

		[Token(Token = "0x400238D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public PositonIconSetting Foot;

		[Token(Token = "0x400238E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public PositonIconSetting Hand;

		[Token(Token = "0x400238F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public PositonIconSetting GloveL;

		[Token(Token = "0x4002390")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public PositonIconSetting GloveR;

		[Token(Token = "0x600221F")]
		[Address(RVA = "0xB83E5C", Offset = "0xB83E5C", VA = "0xB83E5C")]
		public IconSetting()
		{
		}
	}
	[Token(Token = "0x200056C")]
	public class Android_DeviceController : MonoBehaviour
	{
		[Token(Token = "0x4002391")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[Header("UI")]
		private Image icon;

		[Token(Token = "0x4002392")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private IconSetting widgetSetting;

		[Token(Token = "0x4002393")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Sprite TactsuitWiredIcon;

		[Token(Token = "0x4002394")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Image batteryLowImage;

		[Token(Token = "0x4002395")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Connect Menu")]
		[SerializeField]
		private GameObject ConnectMenu;

		[Token(Token = "0x4002396")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Button pingButton;

		[Token(Token = "0x4002397")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private Button lButton;

		[Token(Token = "0x4002398")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private Button rButton;

		[Token(Token = "0x4002399")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private GameObject wiredNotification;

		[Token(Token = "0x400239A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		[Header("Disconnect Menu")]
		private GameObject DisconnectMenu;

		[Token(Token = "0x400239B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static string SelectHexColor;

		[Token(Token = "0x400239C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static string SelectHoverHexColor;

		[Token(Token = "0x400239D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static string DisableHexColor;

		[Token(Token = "0x400239E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static string DisableHoverHexColor;

		[Token(Token = "0x400239F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private HapticDevice device;

		[Token(Token = "0x6002220")]
		[Address(RVA = "0xB83E64", Offset = "0xB83E64", VA = "0xB83E64")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002221")]
		[Address(RVA = "0xB84044", Offset = "0xB84044", VA = "0xB84044")]
		public void RefreshDevice(HapticDevice d)
		{
		}

		[Token(Token = "0x6002222")]
		[Address(RVA = "0xB8421C", Offset = "0xB8421C", VA = "0xB8421C")]
		private void RenderConnectMenu()
		{
		}

		[Token(Token = "0x6002223")]
		[Address(RVA = "0xB842A4", Offset = "0xB842A4", VA = "0xB842A4")]
		private void RenderDisconnectMenu()
		{
		}

		[Token(Token = "0x6002224")]
		[Address(RVA = "0xB84314", Offset = "0xB84314", VA = "0xB84314")]
		private void UpdateButtons()
		{
		}

		[Token(Token = "0x6002225")]
		[Address(RVA = "0xB840DC", Offset = "0xB840DC", VA = "0xB840DC")]
		private void UpdateIcon(HapticDevice d)
		{
		}

		[Token(Token = "0x6002226")]
		[Address(RVA = "0xB846F8", Offset = "0xB846F8", VA = "0xB846F8")]
		private Sprite GetSprite(PositonIconSetting icon, bool connected)
		{
			return null;
		}

		[Token(Token = "0x6002227")]
		[Address(RVA = "0xB8471C", Offset = "0xB8471C", VA = "0xB8471C")]
		private void Ping()
		{
		}

		[Token(Token = "0x6002228")]
		[Address(RVA = "0xB848EC", Offset = "0xB848EC", VA = "0xB848EC")]
		private void ToLeft()
		{
		}

		[Token(Token = "0x6002229")]
		[Address(RVA = "0xB84A40", Offset = "0xB84A40", VA = "0xB84A40")]
		private void ToRight()
		{
		}

		[Token(Token = "0x600222A")]
		[Address(RVA = "0xB84B0C", Offset = "0xB84B0C", VA = "0xB84B0C")]
		private Color ToColor(string hex)
		{
			return default(Color);
		}

		[Token(Token = "0x600222B")]
		[Address(RVA = "0xB845C4", Offset = "0xB845C4", VA = "0xB845C4")]
		private void ChangeButtonColor(Button targetButton, bool isSelect)
		{
		}

		[Token(Token = "0x600222C")]
		[Address(RVA = "0xB8457C", Offset = "0xB8457C", VA = "0xB8457C")]
		private static bool IsLeft(PositionType pos)
		{
			return default(bool);
		}

		[Token(Token = "0x600222D")]
		[Address(RVA = "0xB845A0", Offset = "0xB845A0", VA = "0xB845A0")]
		private static bool IsRight(PositionType pos)
		{
			return default(bool);
		}

		[Token(Token = "0x600222E")]
		[Address(RVA = "0xB84B40", Offset = "0xB84B40", VA = "0xB84B40")]
		public Android_DeviceController()
		{
		}
	}
	[Token(Token = "0x200056D")]
	public class Android_UIController : MonoBehaviour
	{
		[Token(Token = "0x40023A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private RectTransform mainPanel;

		[Token(Token = "0x40023A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Transform devicesContainer;

		[Token(Token = "0x40023A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Transform deviceListPageUi;

		[Token(Token = "0x40023A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Button deviceListNextPageButton;

		[Token(Token = "0x40023A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Button deviceListBackPageButton;

		[Token(Token = "0x40023A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Text deviceListPageText;

		[Token(Token = "0x40023A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private Android_DeviceController devicePrefab;

		[Token(Token = "0x40023A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("No Paired Device UI")]
		[SerializeField]
		private GameObject noPairedDeviceUi;

		[Token(Token = "0x40023A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private Button helpButton;

		[Token(Token = "0x40023A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private Button bHpaticsLinkButton;

		[Token(Token = "0x40023AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private GameObject helpUi;

		[Token(Token = "0x40023AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private Button helpCloseButton;

		[Token(Token = "0x40023AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private List<Android_DeviceController> controllers;

		[Token(Token = "0x40023AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private BoxCollider mainPanelCollider;

		[Token(Token = "0x40023AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Vector2 defaultMainPanelSize;

		[Token(Token = "0x40023AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector2 defaultDeviceContainerSize;

		[Token(Token = "0x40023B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private int deviceListSize;

		[Token(Token = "0x40023B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private int deviceListPageIndex;

		[Token(Token = "0x40023B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private int expandHeight;

		[Token(Token = "0x40023B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private int expandDeviceCount;

		[Token(Token = "0x40023B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private int pageActivateDeviceCount;

		[Token(Token = "0x40023B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private int pageExpandHeight;

		[Token(Token = "0x40023B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private int maxPageIndex;

		[Token(Token = "0x6002230")]
		[Address(RVA = "0xB84C14", Offset = "0xB84C14", VA = "0xB84C14")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002231")]
		[Address(RVA = "0xB851F0", Offset = "0xB851F0", VA = "0xB851F0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6002232")]
		[Address(RVA = "0xB85360", Offset = "0xB85360", VA = "0xB85360")]
		private void Refresh()
		{
		}

		[Token(Token = "0x6002233")]
		[Address(RVA = "0xB85AC0", Offset = "0xB85AC0", VA = "0xB85AC0")]
		private void OnHelp()
		{
		}

		[Token(Token = "0x6002234")]
		[Address(RVA = "0xB85B48", Offset = "0xB85B48", VA = "0xB85B48")]
		private void CloseHelpNotification()
		{
		}

		[Token(Token = "0x6002235")]
		[Address(RVA = "0xB85BD0", Offset = "0xB85BD0", VA = "0xB85BD0")]
		private void OpenLink()
		{
		}

		[Token(Token = "0x6002236")]
		[Address(RVA = "0xB85C14", Offset = "0xB85C14", VA = "0xB85C14")]
		private void NextPage()
		{
		}

		[Token(Token = "0x6002237")]
		[Address(RVA = "0xB85C38", Offset = "0xB85C38", VA = "0xB85C38")]
		private void BackPage()
		{
		}

		[Token(Token = "0x6002238")]
		[Address(RVA = "0xB85C5C", Offset = "0xB85C5C", VA = "0xB85C5C")]
		public Android_UIController()
		{
		}
	}
	[Token(Token = "0x200056E")]
	public class BhapticsAndroidManager : MonoBehaviour
	{
		[Token(Token = "0x40023B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static BhapticsAndroidManager Instance;

		[Token(Token = "0x40023B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static bool pcAndoidTestMode;

		[Token(Token = "0x40023B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private List<HapticDevice> Devices;

		[Token(Token = "0x40023BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static List<UnityAction> refreshActions;

		[Token(Token = "0x6002239")]
		[Address(RVA = "0xB85CEC", Offset = "0xB85CEC", VA = "0xB85CEC")]
		private void Awake()
		{
		}

		[Token(Token = "0x600223A")]
		[Address(RVA = "0xB85DF0", Offset = "0xB85DF0", VA = "0xB85DF0")]
		private void Start()
		{
		}

		[Token(Token = "0x600223B")]
		[Address(RVA = "0xB85E88", Offset = "0xB85E88", VA = "0xB85E88")]
		private void RefreshDevices()
		{
		}

		[Token(Token = "0x600223C")]
		[Address(RVA = "0xB86320", Offset = "0xB86320", VA = "0xB86320")]
		public static void Ping(PositionType pos)
		{
		}

		[Token(Token = "0x600223D")]
		[Address(RVA = "0xB849B8", Offset = "0xB849B8", VA = "0xB849B8")]
		public static void TogglePosition(string address)
		{
		}

		[Token(Token = "0x600223E")]
		[Address(RVA = "0xB84784", Offset = "0xB84784", VA = "0xB84784")]
		public static void Ping(HapticDevice device)
		{
		}

		[Token(Token = "0x600223F")]
		[Address(RVA = "0xB86780", Offset = "0xB86780", VA = "0xB86780")]
		public static void PingAll()
		{
		}

		[Token(Token = "0x6002240")]
		[Address(RVA = "0xB859BC", Offset = "0xB859BC", VA = "0xB859BC")]
		public static List<HapticDevice> GetDevices()
		{
			return null;
		}

		[Token(Token = "0x6002241")]
		[Address(RVA = "0xB86530", Offset = "0xB86530", VA = "0xB86530")]
		public static List<HapticDevice> GetConnectedDevices(PositionType pos)
		{
			return null;
		}

		[Token(Token = "0x6002242")]
		[Address(RVA = "0xB86800", Offset = "0xB86800", VA = "0xB86800")]
		public static List<HapticDevice> GetPairedDevices(PositionType pos)
		{
			return null;
		}

		[Token(Token = "0x6002243")]
		[Address(RVA = "0xB850DC", Offset = "0xB850DC", VA = "0xB850DC")]
		public static void AddRefreshAction(UnityAction action)
		{
		}

		[Token(Token = "0x6002244")]
		[Address(RVA = "0xB85290", Offset = "0xB85290", VA = "0xB85290")]
		public static void RemoveRefreshAction(UnityAction action)
		{
		}

		[Token(Token = "0x6002245")]
		[Address(RVA = "0xB86A48", Offset = "0xB86A48", VA = "0xB86A48")]
		public static void ClearRefreshAction()
		{
		}

		[Token(Token = "0x6002246")]
		[Address(RVA = "0xB86AE0", Offset = "0xB86AE0", VA = "0xB86AE0")]
		public static bool IsStreaming()
		{
			return default(bool);
		}

		[Token(Token = "0x6002247")]
		[Address(RVA = "0xB86B64", Offset = "0xB86B64", VA = "0xB86B64")]
		public static void ToggleStreaming()
		{
		}

		[Token(Token = "0x6002248")]
		[Address(RVA = "0xB86BE4", Offset = "0xB86BE4", VA = "0xB86BE4")]
		public static List<AndroidUtils.StreamHost> GetStreamingHosts()
		{
			return null;
		}

		[Token(Token = "0x6002249")]
		[Address(RVA = "0xB86CA0", Offset = "0xB86CA0", VA = "0xB86CA0")]
		public static void ShowBluetoothSetting()
		{
		}

		[Token(Token = "0x600224A")]
		[Address(RVA = "0xB86D20", Offset = "0xB86D20", VA = "0xB86D20")]
		public static void ToggleEnableDevice(HapticDevice device)
		{
		}

		[Token(Token = "0x600224B")]
		[Address(RVA = "0xB86DC4", Offset = "0xB86DC4", VA = "0xB86DC4")]
		private void OnApplicationFocus(bool pauseStatus)
		{
		}

		[Token(Token = "0x600224C")]
		[Address(RVA = "0xB86E58", Offset = "0xB86E58", VA = "0xB86E58")]
		public BhapticsAndroidManager()
		{
		}
	}
	[Token(Token = "0x200056F")]
	public class ArmsHapticClip : FileHapticClip
	{
		[Token(Token = "0x40023BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public bool IsReflect;

		[Token(Token = "0x600224E")]
		[Address(RVA = "0xB86F6C", Offset = "0xB86F6C", VA = "0xB86F6C", Slot = "12")]
		public override void Play(float intensity, float duration, float vestRotationAngleX, float vestRotationOffsetY, string identifier = "")
		{
		}

		[Token(Token = "0x600224F")]
		[Address(RVA = "0xB87314", Offset = "0xB87314", VA = "0xB87314", Slot = "17")]
		public override void ResetValues()
		{
		}

		[Token(Token = "0x6002250")]
		[Address(RVA = "0xB87330", Offset = "0xB87330", VA = "0xB87330")]
		public ArmsHapticClip()
		{
		}
	}
	[Token(Token = "0x2000570")]
	public class BhapticsHaptic : IHaptic
	{
		[Token(Token = "0x6002251")]
		[Address(RVA = "0xB87338", Offset = "0xB87338", VA = "0xB87338")]
		public BhapticsHaptic()
		{
		}

		[Token(Token = "0x6002252")]
		[Address(RVA = "0xB87368", Offset = "0xB87368", VA = "0xB87368", Slot = "4")]
		public bool IsConnect(PositionType type)
		{
			return default(bool);
		}

		[Token(Token = "0x6002253")]
		[Address(RVA = "0xB87370", Offset = "0xB87370", VA = "0xB87370", Slot = "5")]
		public bool IsConnect(HapticDeviceType type, bool isLeft = true)
		{
			return default(bool);
		}

		[Token(Token = "0x6002254")]
		[Address(RVA = "0xB8738C", Offset = "0xB8738C", VA = "0xB8738C", Slot = "6")]
		public bool IsPlaying(string key)
		{
			return default(bool);
		}

		[Token(Token = "0x6002255")]
		[Address(RVA = "0xB87394", Offset = "0xB87394", VA = "0xB87394", Slot = "7")]
		public bool IsFeedbackRegistered(string key)
		{
			return default(bool);
		}

		[Token(Token = "0x6002256")]
		[Address(RVA = "0xB8739C", Offset = "0xB8739C", VA = "0xB8739C", Slot = "8")]
		public bool IsPlaying()
		{
			return default(bool);
		}

		[Token(Token = "0x6002257")]
		[Address(RVA = "0xB873A0", Offset = "0xB873A0", VA = "0xB873A0", Slot = "9")]
		public void RegisterTactFileStr(string key, string tactFileStr)
		{
		}

		[Token(Token = "0x6002258")]
		[Address(RVA = "0xB873AC", Offset = "0xB873AC", VA = "0xB873AC", Slot = "10")]
		public void RegisterTactFileStrReflected(string key, string tactFileStr)
		{
		}

		[Token(Token = "0x6002259")]
		[Address(RVA = "0xB873B8", Offset = "0xB873B8", VA = "0xB873B8", Slot = "11")]
		public void Submit(string key, PositionType position, List<DotPoint> points, int durationMillis)
		{
		}

		[Token(Token = "0x600225A")]
		[Address(RVA = "0xB874B8", Offset = "0xB874B8", VA = "0xB874B8", Slot = "12")]
		public void Submit(string key, PositionType position, List<PathPoint> points, int durationMillis)
		{
		}

		[Token(Token = "0x600225B")]
		[Address(RVA = "0xB87638", Offset = "0xB87638", VA = "0xB87638", Slot = "13")]
		public void SubmitRegistered(string key, string altKey, ScaleOption option)
		{
		}

		[Token(Token = "0x600225C")]
		[Address(RVA = "0xB87660", Offset = "0xB87660", VA = "0xB87660", Slot = "14")]
		public void SubmitRegistered(string key, string altKey, RotationOption rOption, ScaleOption sOption)
		{
		}

		[Token(Token = "0x600225D")]
		[Address(RVA = "0xB87688", Offset = "0xB87688", VA = "0xB87688", Slot = "15")]
		public void SubmitRegistered(string key)
		{
		}

		[Token(Token = "0x600225E")]
		[Address(RVA = "0xB87690", Offset = "0xB87690", VA = "0xB87690", Slot = "16")]
		public void SubmitRegistered(string key, int startTimeMillis)
		{
		}

		[Token(Token = "0x600225F")]
		[Address(RVA = "0xB8769C", Offset = "0xB8769C", VA = "0xB8769C", Slot = "17")]
		public void TurnOff(string key)
		{
		}

		[Token(Token = "0x6002260")]
		[Address(RVA = "0xB876A4", Offset = "0xB876A4", VA = "0xB876A4", Slot = "18")]
		public void TurnOff()
		{
		}

		[Token(Token = "0x6002261")]
		[Address(RVA = "0xB876A8", Offset = "0xB876A8", VA = "0xB876A8", Slot = "19")]
		public void Dispose()
		{
		}

		[Token(Token = "0x6002262")]
		[Address(RVA = "0xB876AC", Offset = "0xB876AC", VA = "0xB876AC", Slot = "20")]
		public int[] GetCurrentFeedback(PositionType pos)
		{
			return null;
		}
	}
	[Token(Token = "0x2000571")]
	public class BhapticsProject
	{
		[Token(Token = "0x170004AE")]
		public Track[] Tracks
		{
			[Token(Token = "0x6002263")]
			[Address(RVA = "0xB876CC", Offset = "0xB876CC", VA = "0xB876CC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002264")]
			[Address(RVA = "0xB876D4", Offset = "0xB876D4", VA = "0xB876D4")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170004AF")]
		public Layout Layout
		{
			[Token(Token = "0x6002265")]
			[Address(RVA = "0xB876DC", Offset = "0xB876DC", VA = "0xB876DC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002266")]
			[Address(RVA = "0xB876E4", Offset = "0xB876E4", VA = "0xB876E4")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6002267")]
		[Address(RVA = "0xB876EC", Offset = "0xB876EC", VA = "0xB876EC")]
		public static BhapticsProject ToProject(JSONObject jsonObject)
		{
			return null;
		}

		[Token(Token = "0x6002268")]
		[Address(RVA = "0xB87F28", Offset = "0xB87F28", VA = "0xB87F28")]
		public JSONObject ToJsonObject()
		{
			return null;
		}

		[Token(Token = "0x6002269")]
		[Address(RVA = "0xB8792C", Offset = "0xB8792C", VA = "0xB8792C")]
		public BhapticsProject()
		{
		}
	}
	[Token(Token = "0x2000572")]
	public class HapticFeedbackFile
	{
		[Token(Token = "0x40023BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public BhapticsProject Project;

		[Token(Token = "0x600226A")]
		[Address(RVA = "0xB884A8", Offset = "0xB884A8", VA = "0xB884A8")]
		public static HapticFeedbackFile ToHapticFeedbackFile(string jsonStr)
		{
			return null;
		}

		[Token(Token = "0x600226B")]
		[Address(RVA = "0xB8856C", Offset = "0xB8856C", VA = "0xB8856C")]
		public HapticFeedbackFile()
		{
		}
	}
	[Token(Token = "0x2000573")]
	public class Track
	{
		[Token(Token = "0x170004B0")]
		public HapticEffect[] Effects
		{
			[Token(Token = "0x600226C")]
			[Address(RVA = "0xB88574", Offset = "0xB88574", VA = "0xB88574")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600226D")]
			[Address(RVA = "0xB8857C", Offset = "0xB8857C", VA = "0xB8857C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x600226E")]
		[Address(RVA = "0xB88584", Offset = "0xB88584", VA = "0xB88584", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x600226F")]
		[Address(RVA = "0xB87934", Offset = "0xB87934", VA = "0xB87934")]
		internal static Track ToTrack(JSONObject jsonObj)
		{
			return null;
		}

		[Token(Token = "0x6002270")]
		[Address(RVA = "0xB8807C", Offset = "0xB8807C", VA = "0xB8807C")]
		internal JSONObject ToJsonObject()
		{
			return null;
		}

		[Token(Token = "0x6002271")]
		[Address(RVA = "0xB88608", Offset = "0xB88608", VA = "0xB88608")]
		public Track()
		{
		}
	}
	[Token(Token = "0x2000574")]
	public class HapticEffect
	{
		[Token(Token = "0x170004B1")]
		public int StartTime
		{
			[Token(Token = "0x6002272")]
			[Address(RVA = "0xB88B34", Offset = "0xB88B34", VA = "0xB88B34")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002273")]
			[Address(RVA = "0xB88B3C", Offset = "0xB88B3C", VA = "0xB88B3C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170004B2")]
		public int OffsetTime
		{
			[Token(Token = "0x6002274")]
			[Address(RVA = "0xB88B44", Offset = "0xB88B44", VA = "0xB88B44")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002275")]
			[Address(RVA = "0xB88B4C", Offset = "0xB88B4C", VA = "0xB88B4C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170004B3")]
		public Dictionary<string, HapticEffectMode> Modes
		{
			[Token(Token = "0x6002276")]
			[Address(RVA = "0xB88B54", Offset = "0xB88B54", VA = "0xB88B54")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002277")]
			[Address(RVA = "0xB88B5C", Offset = "0xB88B5C", VA = "0xB88B5C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6002278")]
		[Address(RVA = "0xB88B64", Offset = "0xB88B64", VA = "0xB88B64", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6002279")]
		[Address(RVA = "0xB88610", Offset = "0xB88610", VA = "0xB88610")]
		internal static HapticEffect ToEffect(JSONObject jsonObj)
		{
			return null;
		}

		[Token(Token = "0x600227A")]
		[Address(RVA = "0xB888A8", Offset = "0xB888A8", VA = "0xB888A8")]
		internal JSONObject ToJsonObject()
		{
			return null;
		}

		[Token(Token = "0x600227B")]
		[Address(RVA = "0xB88DA8", Offset = "0xB88DA8", VA = "0xB88DA8")]
		public HapticEffect()
		{
		}
	}
	[Token(Token = "0x2000575")]
	public class Layout
	{
		[Token(Token = "0x170004B4")]
		public string Type
		{
			[Token(Token = "0x600227C")]
			[Address(RVA = "0xB89088", Offset = "0xB89088", VA = "0xB89088")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600227D")]
			[Address(RVA = "0xB89090", Offset = "0xB89090", VA = "0xB89090")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170004B5")]
		public Dictionary<string, LayoutObject[]> Layouts
		{
			[Token(Token = "0x600227E")]
			[Address(RVA = "0xB89098", Offset = "0xB89098", VA = "0xB89098")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600227F")]
			[Address(RVA = "0xB890A0", Offset = "0xB890A0", VA = "0xB890A0")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6002280")]
		[Address(RVA = "0xB87B64", Offset = "0xB87B64", VA = "0xB87B64")]
		internal static Layout ToLayout(JSONObject jsonObj)
		{
			return null;
		}

		[Token(Token = "0x6002281")]
		[Address(RVA = "0xB88198", Offset = "0xB88198", VA = "0xB88198")]
		internal JSONObject ToJsonObject()
		{
			return null;
		}

		[Token(Token = "0x6002282")]
		[Address(RVA = "0xB890A8", Offset = "0xB890A8", VA = "0xB890A8")]
		public Layout()
		{
		}
	}
	[Token(Token = "0x2000576")]
	public class LayoutObject
	{
		[Token(Token = "0x170004B6")]
		public int Index
		{
			[Token(Token = "0x6002283")]
			[Address(RVA = "0xB89328", Offset = "0xB89328", VA = "0xB89328")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002284")]
			[Address(RVA = "0xB89330", Offset = "0xB89330", VA = "0xB89330")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170004B7")]
		public float X
		{
			[Token(Token = "0x6002285")]
			[Address(RVA = "0xB89338", Offset = "0xB89338", VA = "0xB89338")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002286")]
			[Address(RVA = "0xB89340", Offset = "0xB89340", VA = "0xB89340")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170004B8")]
		public float Y
		{
			[Token(Token = "0x6002287")]
			[Address(RVA = "0xB89348", Offset = "0xB89348", VA = "0xB89348")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002288")]
			[Address(RVA = "0xB89350", Offset = "0xB89350", VA = "0xB89350")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6002289")]
		[Address(RVA = "0xB890B0", Offset = "0xB890B0", VA = "0xB890B0")]
		internal static LayoutObject ToLayoutObject(JSONObject jsonObj)
		{
			return null;
		}

		[Token(Token = "0x600228A")]
		[Address(RVA = "0xB891E8", Offset = "0xB891E8", VA = "0xB891E8")]
		internal JSONObject ToJsonObject()
		{
			return null;
		}

		[Token(Token = "0x600228B")]
		[Address(RVA = "0xB89358", Offset = "0xB89358", VA = "0xB89358")]
		public LayoutObject()
		{
		}
	}
	[Token(Token = "0x2000577")]
	public class HapticEffectMode
	{
		[Token(Token = "0x170004B9")]
		public FeedbackMode Mode
		{
			[Token(Token = "0x600228C")]
			[Address(RVA = "0xB89360", Offset = "0xB89360", VA = "0xB89360")]
			[CompilerGenerated]
			get
			{
				return default(FeedbackMode);
			}
			[Token(Token = "0x600228D")]
			[Address(RVA = "0xB89368", Offset = "0xB89368", VA = "0xB89368")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170004BA")]
		public DotMode DotMode
		{
			[Token(Token = "0x600228E")]
			[Address(RVA = "0xB89370", Offset = "0xB89370", VA = "0xB89370")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600228F")]
			[Address(RVA = "0xB89378", Offset = "0xB89378", VA = "0xB89378")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170004BB")]
		public PathMode PathMode
		{
			[Token(Token = "0x6002290")]
			[Address(RVA = "0xB89380", Offset = "0xB89380", VA = "0xB89380")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002291")]
			[Address(RVA = "0xB89388", Offset = "0xB89388", VA = "0xB89388")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6002292")]
		[Address(RVA = "0xB88DB0", Offset = "0xB88DB0", VA = "0xB88DB0")]
		internal static HapticEffectMode ToMode(JSONObject jsonObj)
		{
			return null;
		}

		[Token(Token = "0x6002293")]
		[Address(RVA = "0xB88F10", Offset = "0xB88F10", VA = "0xB88F10")]
		internal JSONObject ToJsonObject()
		{
			return null;
		}

		[Token(Token = "0x6002294")]
		[Address(RVA = "0xB89390", Offset = "0xB89390", VA = "0xB89390")]
		public HapticEffectMode()
		{
		}
	}
	[Token(Token = "0x2000578")]
	public class DotMode
	{
		[Token(Token = "0x170004BC")]
		public bool DotConnected
		{
			[Token(Token = "0x6002295")]
			[Address(RVA = "0xB89AA0", Offset = "0xB89AA0", VA = "0xB89AA0")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002296")]
			[Address(RVA = "0xB89AA8", Offset = "0xB89AA8", VA = "0xB89AA8")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170004BD")]
		public DotModeObjectCollection[] Feedback
		{
			[Token(Token = "0x6002297")]
			[Address(RVA = "0xB89AB4", Offset = "0xB89AB4", VA = "0xB89AB4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002298")]
			[Address(RVA = "0xB89ABC", Offset = "0xB89ABC", VA = "0xB89ABC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6002299")]
		[Address(RVA = "0xB89398", Offset = "0xB89398", VA = "0xB89398")]
		internal static DotMode ToDotMode(JSONObject jsonObj)
		{
			return null;
		}

		[Token(Token = "0x600229A")]
		[Address(RVA = "0xB89804", Offset = "0xB89804", VA = "0xB89804")]
		internal JSONObject ToJsonObject()
		{
			return null;
		}

		[Token(Token = "0x600229B")]
		[Address(RVA = "0xB89AC4", Offset = "0xB89AC4", VA = "0xB89AC4")]
		public DotMode()
		{
		}
	}
	[Token(Token = "0x2000579")]
	public class DotModeObjectCollection
	{
		[Token(Token = "0x40023CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PlaybackType PlaybackType;

		[Token(Token = "0x170004BE")]
		public int StartTime
		{
			[Token(Token = "0x600229C")]
			[Address(RVA = "0xB89FE4", Offset = "0xB89FE4", VA = "0xB89FE4")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600229D")]
			[Address(RVA = "0xB89FEC", Offset = "0xB89FEC", VA = "0xB89FEC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170004BF")]
		public int EndTime
		{
			[Token(Token = "0x600229E")]
			[Address(RVA = "0xB89FF4", Offset = "0xB89FF4", VA = "0xB89FF4")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600229F")]
			[Address(RVA = "0xB89FFC", Offset = "0xB89FFC", VA = "0xB89FFC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170004C0")]
		public DotModeObject[] PointList
		{
			[Token(Token = "0x60022A0")]
			[Address(RVA = "0xB8A004", Offset = "0xB8A004", VA = "0xB8A004")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60022A1")]
			[Address(RVA = "0xB8A00C", Offset = "0xB8A00C", VA = "0xB8A00C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x60022A2")]
		[Address(RVA = "0xB89ACC", Offset = "0xB89ACC", VA = "0xB89ACC")]
		internal static DotModeObjectCollection ToObject(JSONObject val)
		{
			return null;
		}

		[Token(Token = "0x60022A3")]
		[Address(RVA = "0xB89DB0", Offset = "0xB89DB0", VA = "0xB89DB0")]
		internal JSONObject ToJsonObject()
		{
			return null;
		}

		[Token(Token = "0x60022A4")]
		[Address(RVA = "0xB8A014", Offset = "0xB8A014", VA = "0xB8A014")]
		public DotModeObjectCollection()
		{
		}
	}
	[Token(Token = "0x200057A")]
	public class DotModeObject
	{
		[Token(Token = "0x170004C1")]
		public int Index
		{
			[Token(Token = "0x60022A5")]
			[Address(RVA = "0xB8A1DC", Offset = "0xB8A1DC", VA = "0xB8A1DC")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60022A6")]
			[Address(RVA = "0xB8A1E4", Offset = "0xB8A1E4", VA = "0xB8A1E4")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170004C2")]
		public float Intensity
		{
			[Token(Token = "0x60022A7")]
			[Address(RVA = "0xB8A1EC", Offset = "0xB8A1EC", VA = "0xB8A1EC")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60022A8")]
			[Address(RVA = "0xB8A1F4", Offset = "0xB8A1F4", VA = "0xB8A1F4")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x60022A9")]
		[Address(RVA = "0xB8A01C", Offset = "0xB8A01C", VA = "0xB8A01C")]
		internal static DotModeObject ToObject(JSONObject jsonObject)
		{
			return null;
		}

		[Token(Token = "0x60022AA")]
		[Address(RVA = "0xB8A0DC", Offset = "0xB8A0DC", VA = "0xB8A0DC")]
		internal JSONObject ToJsonObject()
		{
			return null;
		}

		[Token(Token = "0x60022AB")]
		[Address(RVA = "0xB8A1FC", Offset = "0xB8A1FC", VA = "0xB8A1FC")]
		public DotModeObject()
		{
		}
	}
	[Token(Token = "0x200057B")]
	public class PathMode
	{
		[Token(Token = "0x170004C3")]
		public PathModeObjectCollection[] Feedback
		{
			[Token(Token = "0x60022AC")]
			[Address(RVA = "0xB8A204", Offset = "0xB8A204", VA = "0xB8A204")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60022AD")]
			[Address(RVA = "0xB8A20C", Offset = "0xB8A20C", VA = "0xB8A20C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x60022AE")]
		[Address(RVA = "0xB895FC", Offset = "0xB895FC", VA = "0xB895FC")]
		internal static PathMode ToPathMode(JSONObject jsonObject)
		{
			return null;
		}

		[Token(Token = "0x60022AF")]
		[Address(RVA = "0xB89984", Offset = "0xB89984", VA = "0xB89984")]
		internal JSONObject ToJsonObject()
		{
			return null;
		}

		[Token(Token = "0x60022B0")]
		[Address(RVA = "0xB8A214", Offset = "0xB8A214", VA = "0xB8A214")]
		public PathMode()
		{
		}
	}
	[Token(Token = "0x200057C")]
	public class PathModeObjectCollection
	{
		[Token(Token = "0x40023D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PlaybackType PlaybackType;

		[Token(Token = "0x40023D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public PathMovingPattern MovingPattern;

		[Token(Token = "0x170004C4")]
		public PathModeObject[] PointList
		{
			[Token(Token = "0x60022B1")]
			[Address(RVA = "0xB8A748", Offset = "0xB8A748", VA = "0xB8A748")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60022B2")]
			[Address(RVA = "0xB8A750", Offset = "0xB8A750", VA = "0xB8A750")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x60022B3")]
		[Address(RVA = "0xB8A21C", Offset = "0xB8A21C", VA = "0xB8A21C")]
		internal static PathModeObjectCollection ToObject(JSONObject jsonObject)
		{
			return null;
		}

		[Token(Token = "0x60022B4")]
		[Address(RVA = "0xB8A518", Offset = "0xB8A518", VA = "0xB8A518")]
		internal JSONObject ToJsonObject()
		{
			return null;
		}

		[Token(Token = "0x60022B5")]
		[Address(RVA = "0xB8A758", Offset = "0xB8A758", VA = "0xB8A758")]
		public PathModeObjectCollection()
		{
		}
	}
	[Token(Token = "0x200057D")]
	public class PathModeObject
	{
		[Token(Token = "0x170004C5")]
		public float X
		{
			[Token(Token = "0x60022B6")]
			[Address(RVA = "0xB8AA14", Offset = "0xB8AA14", VA = "0xB8AA14")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60022B7")]
			[Address(RVA = "0xB8AA1C", Offset = "0xB8AA1C", VA = "0xB8AA1C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170004C6")]
		public float Y
		{
			[Token(Token = "0x60022B8")]
			[Address(RVA = "0xB8AA24", Offset = "0xB8AA24", VA = "0xB8AA24")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60022B9")]
			[Address(RVA = "0xB8AA2C", Offset = "0xB8AA2C", VA = "0xB8AA2C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170004C7")]
		public float Intensity
		{
			[Token(Token = "0x60022BA")]
			[Address(RVA = "0xB8AA34", Offset = "0xB8AA34", VA = "0xB8AA34")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60022BB")]
			[Address(RVA = "0xB8AA3C", Offset = "0xB8AA3C", VA = "0xB8AA3C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170004C8")]
		public int Time
		{
			[Token(Token = "0x60022BC")]
			[Address(RVA = "0xB8AA44", Offset = "0xB8AA44", VA = "0xB8AA44")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60022BD")]
			[Address(RVA = "0xB8AA4C", Offset = "0xB8AA4C", VA = "0xB8AA4C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x60022BE")]
		[Address(RVA = "0xB8A768", Offset = "0xB8A768", VA = "0xB8A768")]
		internal static PathModeObject ToObject(JSONObject jsonObject)
		{
			return null;
		}

		[Token(Token = "0x60022BF")]
		[Address(RVA = "0xB8A894", Offset = "0xB8A894", VA = "0xB8A894")]
		internal JSONObject ToJsonObject()
		{
			return null;
		}

		[Token(Token = "0x60022C0")]
		[Address(RVA = "0xB8AA54", Offset = "0xB8AA54", VA = "0xB8AA54")]
		public PathModeObject()
		{
		}
	}
	[Token(Token = "0x200057E")]
	internal class ParseUtil
	{
		[Token(Token = "0x60022C1")]
		[Address(RVA = "0xB8BA5C", Offset = "0xB8BA5C", VA = "0xB8BA5C")]
		internal static float GetFloat(JSONObject obj, string key, float defaultValue = -1f)
		{
			return default(float);
		}

		[Token(Token = "0x60022C2")]
		[Address(RVA = "0xB8BBB0", Offset = "0xB8BBB0", VA = "0xB8BBB0")]
		internal static int GetInt(JSONObject obj, string key, int defaultValue = -1)
		{
			return default(int);
		}

		[Token(Token = "0x60022C3")]
		[Address(RVA = "0xB8BCF4", Offset = "0xB8BCF4", VA = "0xB8BCF4")]
		public ParseUtil()
		{
		}
	}
	[Token(Token = "0x200057F")]
	public class BhapticsUtils
	{
		[Token(Token = "0x40023DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool isInit;

		[Token(Token = "0x40023DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static string exeFilePath;

		[Token(Token = "0x40023DD")]
		public const string TypeHead = "Head";

		[Token(Token = "0x40023DE")]
		public const string TypeTactal = "Tactal";

		[Token(Token = "0x40023DF")]
		public const string TypeVest = "Vest";

		[Token(Token = "0x40023E0")]
		public const string TypeTactot = "Tactot";

		[Token(Token = "0x40023E1")]
		public const string TypeTactosy = "Tactosy";

		[Token(Token = "0x40023E2")]
		public const string TypeTactosy2 = "Tactosy2";

		[Token(Token = "0x40023E3")]
		public const string TypeHand = "Hand";

		[Token(Token = "0x40023E4")]
		public const string TypeFoot = "Foot";

		[Token(Token = "0x40023E5")]
		public const string TypeGlove = "Glove";

		[Token(Token = "0x60022C4")]
		private static T[] SubArray<T>(T[] data, int index, int length)
		{
			return null;
		}

		[Token(Token = "0x60022C5")]
		[Address(RVA = "0xB8BCFC", Offset = "0xB8BCFC", VA = "0xB8BCFC")]
		public static string GetExePath()
		{
			return null;
		}

		[Token(Token = "0x60022C6")]
		[Address(RVA = "0xB8BD3C", Offset = "0xB8BD3C", VA = "0xB8BD3C")]
		public static bool IsPlayerInstalled()
		{
			return default(bool);
		}

		[Token(Token = "0x60022C7")]
		[Address(RVA = "0xB8BD44", Offset = "0xB8BD44", VA = "0xB8BD44")]
		public static bool IsPlayerRunning()
		{
			return default(bool);
		}

		[Token(Token = "0x60022C8")]
		[Address(RVA = "0xB8BD4C", Offset = "0xB8BD4C", VA = "0xB8BD4C")]
		private static bool Is64BitBuild()
		{
			return default(bool);
		}

		[Token(Token = "0x60022C9")]
		[Address(RVA = "0xB8BD68", Offset = "0xB8BD68", VA = "0xB8BD68")]
		public static void LaunchPlayer(bool tryLaunch)
		{
		}

		[Token(Token = "0x60022CA")]
		[Address(RVA = "0xB8BD6C", Offset = "0xB8BD6C", VA = "0xB8BD6C")]
		public static float Angle(Vector3 fwd, Vector3 targetDir)
		{
			return default(float);
		}

		[Token(Token = "0x60022CB")]
		[Address(RVA = "0xB8BF10", Offset = "0xB8BF10", VA = "0xB8BF10")]
		private static int AngleDir(Vector3 fwd, Vector3 targetDir, Vector3 up)
		{
			return default(int);
		}

		[Token(Token = "0x60022CC")]
		[Address(RVA = "0xB8BF68", Offset = "0xB8BF68", VA = "0xB8BF68")]
		public static PositionType ToPositionType(HapticClipPositionType pos)
		{
			return default(PositionType);
		}

		[Token(Token = "0x60022CD")]
		[Address(RVA = "0xB8BF88", Offset = "0xB8BF88", VA = "0xB8BF88")]
		public static PositionType ToPositionType(HapticDeviceType pos, bool isLeft = true)
		{
			return default(PositionType);
		}

		[Token(Token = "0x60022CE")]
		[Address(RVA = "0xB8BFF0", Offset = "0xB8BFF0", VA = "0xB8BFF0")]
		public BhapticsUtils()
		{
		}
	}
	[Token(Token = "0x2000580")]
	public class FeetHapticClip : ArmsHapticClip
	{
		[Token(Token = "0x60022CF")]
		[Address(RVA = "0xB8BFF8", Offset = "0xB8BFF8", VA = "0xB8BFF8")]
		public FeetHapticClip()
		{
		}
	}
	[Token(Token = "0x2000581")]
	public class FileHapticClip : HapticClip
	{
		[Token(Token = "0x40023E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Range(0.2f, 5f)]
		[Tooltip("Value applied by multiplying")]
		public float Intensity;

		[Token(Token = "0x40023E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Range(0.2f, 5f)]
		[Tooltip("Value applied by multiplying")]
		public float Duration;

		[Token(Token = "0x40023E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public HapticDeviceType ClipType;

		[Token(Token = "0x40023E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string JsonValue;

		[Token(Token = "0x40023EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		protected int _clipDurationTime;

		[Token(Token = "0x170004C9")]
		public int ClipDurationTime
		{
			[Token(Token = "0x60022D0")]
			[Address(RVA = "0xB8C000", Offset = "0xB8C000", VA = "0xB8C000")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60022D1")]
		[Address(RVA = "0xB8C0C8", Offset = "0xB8C0C8", VA = "0xB8C0C8", Slot = "4")]
		public override void Play()
		{
		}

		[Token(Token = "0x60022D2")]
		[Address(RVA = "0xB8C124", Offset = "0xB8C124", VA = "0xB8C124", Slot = "5")]
		public override void Play(string identifier)
		{
		}

		[Token(Token = "0x60022D3")]
		[Address(RVA = "0xB8C13C", Offset = "0xB8C13C", VA = "0xB8C13C", Slot = "6")]
		public override void Play(float intensity, string identifier = "")
		{
		}

		[Token(Token = "0x60022D4")]
		[Address(RVA = "0xB8C154", Offset = "0xB8C154", VA = "0xB8C154", Slot = "7")]
		public override void Play(float intensity, float duration, string identifier = "")
		{
		}

		[Token(Token = "0x60022D5")]
		[Address(RVA = "0xB8C168", Offset = "0xB8C168", VA = "0xB8C168", Slot = "8")]
		public override void Play(float intensity, float duration, float vestRotationAngleX, string identifier = "")
		{
		}

		[Token(Token = "0x60022D6")]
		[Address(RVA = "0xB8C178", Offset = "0xB8C178", VA = "0xB8C178", Slot = "9")]
		public override void Play(Vector3 contactPos, Collider targetCollider, string identifier = "")
		{
		}

		[Token(Token = "0x60022D7")]
		[Address(RVA = "0xB8C29C", Offset = "0xB8C29C", VA = "0xB8C29C", Slot = "10")]
		public override void Play(Vector3 contactPos, Vector3 targetPos, Vector3 targetForward, float targetHeight, string identifier = "")
		{
		}

		[Token(Token = "0x60022D8")]
		[Address(RVA = "0xB8C310", Offset = "0xB8C310", VA = "0xB8C310", Slot = "12")]
		public override void Play(float intensity, float duration, float vestRotationAngleX, float vestRotationOffsetY, string identifier = "")
		{
		}

		[Token(Token = "0x60022D9")]
		[Address(RVA = "0xB8C550", Offset = "0xB8C550", VA = "0xB8C550", Slot = "17")]
		public override void ResetValues()
		{
		}

		[Token(Token = "0x60022DA")]
		[Address(RVA = "0xB8C030", Offset = "0xB8C030", VA = "0xB8C030")]
		private int CalculateClipDutationTime(HapticFeedbackFile hapticFeedbackFile)
		{
			return default(int);
		}

		[Token(Token = "0x60022DB")]
		[Address(RVA = "0xB8C560", Offset = "0xB8C560", VA = "0xB8C560")]
		public FileHapticClip()
		{
		}
	}
	[Token(Token = "0x2000582")]
	public class GloveHapticClip : ArmsHapticClip
	{
		[Token(Token = "0x60022DC")]
		[Address(RVA = "0xB8C5D0", Offset = "0xB8C5D0", VA = "0xB8C5D0")]
		public GloveHapticClip()
		{
		}
	}
	[Token(Token = "0x2000583")]
	public class HandsHapticClip : ArmsHapticClip
	{
		[Token(Token = "0x60022DD")]
		[Address(RVA = "0xB8C5D8", Offset = "0xB8C5D8", VA = "0xB8C5D8")]
		public HandsHapticClip()
		{
		}
	}
	[Token(Token = "0x2000584")]
	public enum HapticDeviceType
	{
		[Token(Token = "0x40023EC")]
		None,
		[Token(Token = "0x40023ED")]
		Tactal,
		[Token(Token = "0x40023EE")]
		TactSuit,
		[Token(Token = "0x40023EF")]
		Tactosy_arms,
		[Token(Token = "0x40023F0")]
		Tactosy_hands,
		[Token(Token = "0x40023F1")]
		Tactosy_feet,
		[Token(Token = "0x40023F2")]
		TactGlove
	}
	[Serializable]
	[Token(Token = "0x2000585")]
	public enum HapticClipPositionType
	{
		[Token(Token = "0x40023F4")]
		VestFront,
		[Token(Token = "0x40023F5")]
		VestBack,
		[Token(Token = "0x40023F6")]
		Head,
		[Token(Token = "0x40023F7")]
		RightForearm,
		[Token(Token = "0x40023F8")]
		LeftForearm,
		[Token(Token = "0x40023F9")]
		LeftHand,
		[Token(Token = "0x40023FA")]
		RightHand,
		[Token(Token = "0x40023FB")]
		LeftFoot,
		[Token(Token = "0x40023FC")]
		RightFoot,
		[Token(Token = "0x40023FD")]
		LeftGlove,
		[Token(Token = "0x40023FE")]
		RightGlove
	}
	[Token(Token = "0x2000586")]
	public class HapticClip : ScriptableObject
	{
		[NonSerialized]
		[Token(Token = "0x40023FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected string assetId;

		[NonSerialized]
		[Token(Token = "0x4002400")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string keyId;

		[Token(Token = "0x60022DE")]
		[Address(RVA = "0xB8C5E0", Offset = "0xB8C5E0", VA = "0xB8C5E0", Slot = "4")]
		public virtual void Play()
		{
		}

		[Token(Token = "0x60022DF")]
		[Address(RVA = "0xB8C640", Offset = "0xB8C640", VA = "0xB8C640", Slot = "5")]
		public virtual void Play(string identifier)
		{
		}

		[Token(Token = "0x60022E0")]
		[Address(RVA = "0xB8C65C", Offset = "0xB8C65C", VA = "0xB8C65C", Slot = "6")]
		public virtual void Play(float intensity, string identifier = "")
		{
		}

		[Token(Token = "0x60022E1")]
		[Address(RVA = "0xB8C674", Offset = "0xB8C674", VA = "0xB8C674", Slot = "7")]
		public virtual void Play(float intensity, float duration, string identifier = "")
		{
		}

		[Token(Token = "0x60022E2")]
		[Address(RVA = "0xB8C688", Offset = "0xB8C688", VA = "0xB8C688", Slot = "8")]
		public virtual void Play(float intensity, float duration, float vestRotationAngleX, string identifier = "")
		{
		}

		[Token(Token = "0x60022E3")]
		[Address(RVA = "0xB8C698", Offset = "0xB8C698", VA = "0xB8C698", Slot = "9")]
		public virtual void Play(Vector3 contactPos, Collider targetCollider, string identifier = "")
		{
		}

		[Token(Token = "0x60022E4")]
		[Address(RVA = "0xB8C7BC", Offset = "0xB8C7BC", VA = "0xB8C7BC", Slot = "10")]
		public virtual void Play(Vector3 contactPos, Vector3 targetPos, Vector3 targetForward, float targetHeight, string identifier = "")
		{
		}

		[Token(Token = "0x60022E5")]
		[Address(RVA = "0xB8C82C", Offset = "0xB8C82C", VA = "0xB8C82C", Slot = "11")]
		public virtual void Play(float intensity, float duration, Vector3 contactPos, Vector3 targetPos, Vector3 targetForward, float targetHeight, string identifier = "")
		{
		}

		[Token(Token = "0x60022E6")]
		[Address(RVA = "0xB8C8AC", Offset = "0xB8C8AC", VA = "0xB8C8AC", Slot = "12")]
		public virtual void Play(float intensity, float duration, float vestRotationAngleX, float vestRotationOffsetY, string identifier = "")
		{
		}

		[Token(Token = "0x60022E7")]
		[Address(RVA = "0xB8C8B0", Offset = "0xB8C8B0", VA = "0xB8C8B0", Slot = "13")]
		public virtual void Stop()
		{
		}

		[Token(Token = "0x60022E8")]
		[Address(RVA = "0xB8C954", Offset = "0xB8C954", VA = "0xB8C954", Slot = "14")]
		public virtual void Stop(string identifier)
		{
		}

		[Token(Token = "0x60022E9")]
		[Address(RVA = "0xB8CA24", Offset = "0xB8CA24", VA = "0xB8CA24", Slot = "15")]
		public virtual bool IsPlaying()
		{
			return default(bool);
		}

		[Token(Token = "0x60022EA")]
		[Address(RVA = "0xB8CAE0", Offset = "0xB8CAE0", VA = "0xB8CAE0", Slot = "16")]
		public virtual bool IsPlaying(string identifier)
		{
			return default(bool);
		}

		[Token(Token = "0x60022EB")]
		[Address(RVA = "0xB8C55C", Offset = "0xB8C55C", VA = "0xB8C55C", Slot = "17")]
		public virtual void ResetValues()
		{
		}

		[Token(Token = "0x60022EC")]
		[Address(RVA = "0xB8CBB0", Offset = "0xB8CBB0", VA = "0xB8CBB0")]
		public string GetAssetID()
		{
			return null;
		}

		[Token(Token = "0x60022ED")]
		[Address(RVA = "0xB8C574", Offset = "0xB8C574", VA = "0xB8C574")]
		public HapticClip()
		{
		}
	}
	[Token(Token = "0x2000587")]
	public class HapticReceiver : MonoBehaviour
	{
		[Token(Token = "0x4002401")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool IsActive;

		[Token(Token = "0x4002402")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public PositionTag PositionTag;

		[Token(Token = "0x60022EE")]
		[Address(RVA = "0xB8CBB8", Offset = "0xB8CBB8", VA = "0xB8CBB8")]
		private void Awake()
		{
		}

		[Token(Token = "0x60022EF")]
		[Address(RVA = "0xB8CCF8", Offset = "0xB8CCF8", VA = "0xB8CCF8")]
		private void OnTriggerEnter(Collider bullet)
		{
		}

		[Token(Token = "0x60022F0")]
		[Address(RVA = "0xB8CE98", Offset = "0xB8CE98", VA = "0xB8CE98")]
		private void OnCollisionEnter(Collision bullet)
		{
		}

		[Token(Token = "0x60022F1")]
		[Address(RVA = "0xB8CDB4", Offset = "0xB8CDB4", VA = "0xB8CDB4")]
		private void Handle(Vector3 contactPoint, HapticSender tactSender)
		{
		}

		[Token(Token = "0x60022F2")]
		[Address(RVA = "0xB8D07C", Offset = "0xB8D07C", VA = "0xB8D07C")]
		public HapticReceiver()
		{
		}
	}
	[Token(Token = "0x2000588")]
	public class HapticSender : MonoBehaviour
	{
		[Token(Token = "0x4002403")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HapticClip[] DefaultClips;

		[Token(Token = "0x4002404")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HeadHapticClip[] HeadClips;

		[Token(Token = "0x4002405")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public VestHapticClip[] BodyClips;

		[Token(Token = "0x4002406")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ArmsHapticClip[] LeftArmClips;

		[Token(Token = "0x4002407")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public ArmsHapticClip[] RightArmClips;

		[Token(Token = "0x4002408")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float yOffsetMultiplier;

		[Token(Token = "0x60022F3")]
		[Address(RVA = "0xB8D08C", Offset = "0xB8D08C", VA = "0xB8D08C")]
		public void Play(PositionTag posTag = PositionTag.Default)
		{
		}

		[Token(Token = "0x60022F4")]
		[Address(RVA = "0xB8CF70", Offset = "0xB8CF70", VA = "0xB8CF70")]
		public void Play(PositionTag posTag, Vector3 contactPos, Collider targetCollider)
		{
		}

		[Token(Token = "0x60022F5")]
		[Address(RVA = "0xB8D2E4", Offset = "0xB8D2E4", VA = "0xB8D2E4")]
		private void Play(PositionTag posTag, Vector3 contactPos, Vector3 targetPos, Vector3 targetForward, float targetHeight)
		{
		}

		[Token(Token = "0x60022F6")]
		[Address(RVA = "0xB8D358", Offset = "0xB8D358", VA = "0xB8D358")]
		public void Play(PositionTag posTag, RaycastHit hit)
		{
		}

		[Token(Token = "0x60022F7")]
		[Address(RVA = "0xB8D488", Offset = "0xB8D488", VA = "0xB8D488")]
		private HapticClip GetClip(PositionTag posTag)
		{
			return null;
		}

		[Token(Token = "0x60022F8")]
		[Address(RVA = "0xB8D5A0", Offset = "0xB8D5A0", VA = "0xB8D5A0")]
		public bool IsPlaying()
		{
			return default(bool);
		}

		[Token(Token = "0x60022F9")]
		[Address(RVA = "0xB8D098", Offset = "0xB8D098", VA = "0xB8D098")]
		public void Play(PositionTag posTag, float angleX, float offsetY)
		{
		}

		[Token(Token = "0x60022FA")]
		[Address(RVA = "0xB8D5A8", Offset = "0xB8D5A8", VA = "0xB8D5A8")]
		public HapticSender()
		{
		}
	}
	[Token(Token = "0x2000589")]
	public enum PositionTag
	{
		[Token(Token = "0x400240A")]
		Body,
		[Token(Token = "0x400240B")]
		Head,
		[Token(Token = "0x400240C")]
		LeftArm,
		[Token(Token = "0x400240D")]
		RightArm,
		[Token(Token = "0x400240E")]
		Default
	}
	[Token(Token = "0x200058A")]
	public class HapticSource : MonoBehaviour
	{
		[Token(Token = "0x200058B")]
		[CompilerGenerated]
		private sealed class <PlayCoroutine>d__15 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002416")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002417")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002418")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float delaySecond;

			[Token(Token = "0x4002419")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public HapticSource <>4__this;

			[Token(Token = "0x170004CA")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600230A")]
				[Address(RVA = "0xB8DF38", Offset = "0xB8DF38", VA = "0xB8DF38", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004CB")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600230C")]
				[Address(RVA = "0xB8DF80", Offset = "0xB8DF80", VA = "0xB8DF80", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002307")]
			[Address(RVA = "0xB8DE14", Offset = "0xB8DE14", VA = "0xB8DE14")]
			[DebuggerHidden]
			public <PlayCoroutine>d__15(int <>1__state)
			{
			}

			[Token(Token = "0x6002308")]
			[Address(RVA = "0xB8DE6C", Offset = "0xB8DE6C", VA = "0xB8DE6C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002309")]
			[Address(RVA = "0xB8DE70", Offset = "0xB8DE70", VA = "0xB8DE70", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600230B")]
			[Address(RVA = "0xB8DF40", Offset = "0xB8DF40", VA = "0xB8DF40", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200058C")]
		[CompilerGenerated]
		private sealed class <PlayLoopCoroutine>d__17 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400241A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400241B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400241C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HapticSource <>4__this;

			[Token(Token = "0x400241D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private WaitForSeconds <duration>5__2;

			[Token(Token = "0x170004CC")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002310")]
				[Address(RVA = "0xB8E154", Offset = "0xB8E154", VA = "0xB8E154", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004CD")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002312")]
				[Address(RVA = "0xB8E19C", Offset = "0xB8E19C", VA = "0xB8E19C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600230D")]
			[Address(RVA = "0xB8DE3C", Offset = "0xB8DE3C", VA = "0xB8DE3C")]
			[DebuggerHidden]
			public <PlayLoopCoroutine>d__17(int <>1__state)
			{
			}

			[Token(Token = "0x600230E")]
			[Address(RVA = "0xB8DF88", Offset = "0xB8DF88", VA = "0xB8DF88", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600230F")]
			[Address(RVA = "0xB8DF8C", Offset = "0xB8DF8C", VA = "0xB8DF8C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002311")]
			[Address(RVA = "0xB8E15C", Offset = "0xB8E15C", VA = "0xB8E15C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400240F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HapticClip clip;

		[Token(Token = "0x4002410")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool playOnAwake;

		[Token(Token = "0x4002411")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool loop;

		[Token(Token = "0x4002412")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float loopDelaySeconds;

		[Token(Token = "0x4002413")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Coroutine currentCoroutine;

		[Token(Token = "0x4002414")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Coroutine loopCoroutine;

		[Token(Token = "0x4002415")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool isLooping;

		[Token(Token = "0x60022FB")]
		[Address(RVA = "0xB8D5B8", Offset = "0xB8D5B8", VA = "0xB8D5B8")]
		private void Awake()
		{
		}

		[Token(Token = "0x60022FC")]
		[Address(RVA = "0xB8D828", Offset = "0xB8D828", VA = "0xB8D828")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60022FD")]
		[Address(RVA = "0xB8DA9C", Offset = "0xB8DA9C", VA = "0xB8DA9C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60022FE")]
		[Address(RVA = "0xB8DB60", Offset = "0xB8DB60", VA = "0xB8DB60")]
		public void Play()
		{
		}

		[Token(Token = "0x60022FF")]
		[Address(RVA = "0xB8D844", Offset = "0xB8D844", VA = "0xB8D844")]
		public void PlayLoop()
		{
		}

		[Token(Token = "0x6002300")]
		[Address(RVA = "0xB8DBCC", Offset = "0xB8DBCC", VA = "0xB8DBCC")]
		public void PlayDelayed(float delaySecond = 0f)
		{
		}

		[Token(Token = "0x6002301")]
		[Address(RVA = "0xB8DAA0", Offset = "0xB8DAA0", VA = "0xB8DAA0")]
		public void Stop()
		{
		}

		[Token(Token = "0x6002302")]
		[Address(RVA = "0xB8DD84", Offset = "0xB8DD84", VA = "0xB8DD84")]
		public bool IsPlaying()
		{
			return default(bool);
		}

		[Token(Token = "0x6002303")]
		[Address(RVA = "0xB8DD0C", Offset = "0xB8DD0C", VA = "0xB8DD0C")]
		[IteratorStateMachine(typeof(<PlayCoroutine>d__15))]
		private IEnumerator PlayCoroutine(float delaySecond)
		{
			return null;
		}

		[Token(Token = "0x6002304")]
		[Address(RVA = "0xB8D978", Offset = "0xB8D978", VA = "0xB8D978")]
		private void PlayHapticClip()
		{
		}

		[Token(Token = "0x6002305")]
		[Address(RVA = "0xB8DB64", Offset = "0xB8DB64", VA = "0xB8DB64")]
		[IteratorStateMachine(typeof(<PlayLoopCoroutine>d__17))]
		private IEnumerator PlayLoopCoroutine()
		{
			return null;
		}

		[Token(Token = "0x6002306")]
		[Address(RVA = "0xB8DE64", Offset = "0xB8DE64", VA = "0xB8DE64")]
		public HapticSource()
		{
		}
	}
	[Token(Token = "0x200058D")]
	public class HeadHapticClip : FileHapticClip
	{
		[Token(Token = "0x6002313")]
		[Address(RVA = "0xB8E1A4", Offset = "0xB8E1A4", VA = "0xB8E1A4")]
		public HeadHapticClip()
		{
		}
	}
	[Token(Token = "0x200058E")]
	public interface IHaptic
	{
		[Token(Token = "0x6002314")]
		bool IsConnect(PositionType type);

		[Token(Token = "0x6002315")]
		bool IsConnect(HapticDeviceType type, bool isLeft = true);

		[Token(Token = "0x6002316")]
		bool IsPlaying(string key);

		[Token(Token = "0x6002317")]
		bool IsFeedbackRegistered(string key);

		[Token(Token = "0x6002318")]
		bool IsPlaying();

		[Token(Token = "0x6002319")]
		void RegisterTactFileStr(string key, string tactFileStr);

		[Token(Token = "0x600231A")]
		void RegisterTactFileStrReflected(string key, string tactFileStr);

		[Token(Token = "0x600231B")]
		void Submit(string key, PositionType position, List<DotPoint> points, int durationMillis);

		[Token(Token = "0x600231C")]
		void Submit(string key, PositionType position, List<PathPoint> points, int durationMillis);

		[Token(Token = "0x600231D")]
		void SubmitRegistered(string key, string altKey, ScaleOption option);

		[Token(Token = "0x600231E")]
		void SubmitRegistered(string key, string altKey, RotationOption rOption, ScaleOption sOption);

		[Token(Token = "0x600231F")]
		void SubmitRegistered(string key);

		[Token(Token = "0x6002320")]
		void SubmitRegistered(string key, int startTimeMillis);

		[Token(Token = "0x6002321")]
		void TurnOff(string key);

		[Token(Token = "0x6002322")]
		void TurnOff();

		[Token(Token = "0x6002323")]
		void Dispose();

		[Token(Token = "0x6002324")]
		int[] GetCurrentFeedback(PositionType pos);
	}
	[Token(Token = "0x200058F")]
	[CreateAssetMenu(fileName = "SimpleHapticClip", menuName = "Bhaptics/Create Simple HapticClip")]
	public class SimpleHapticClip : HapticClip
	{
		[Token(Token = "0x400241E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private HapticClipPositionType Position;

		[Token(Token = "0x400241F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private SimpleHapticType Mode;

		[Token(Token = "0x4002420")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private int[] DotPoints;

		[Token(Token = "0x4002421")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Point[] Points;

		[Token(Token = "0x4002422")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Range(20f, 10000f)]
		public int TimeMillis;

		[Token(Token = "0x6002325")]
		[Address(RVA = "0xB8E1B8", Offset = "0xB8E1B8", VA = "0xB8E1B8", Slot = "12")]
		public override void Play(float intensity, float duration, float vestRotationAngleX, float vestRotationOffsetY, string identifier = "")
		{
		}

		[Token(Token = "0x6002326")]
		[Address(RVA = "0xB8E644", Offset = "0xB8E644", VA = "0xB8E644", Slot = "17")]
		public override void ResetValues()
		{
		}

		[Token(Token = "0x6002327")]
		[Address(RVA = "0xB8E35C", Offset = "0xB8E35C", VA = "0xB8E35C")]
		private static List<DotPoint> Convert(int[] points)
		{
			return null;
		}

		[Token(Token = "0x6002328")]
		[Address(RVA = "0xB8E4CC", Offset = "0xB8E4CC", VA = "0xB8E4CC")]
		private static List<PathPoint> Convert(Point[] points)
		{
			return null;
		}

		[Token(Token = "0x6002329")]
		[Address(RVA = "0xB8E784", Offset = "0xB8E784", VA = "0xB8E784")]
		public SimpleHapticClip()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000590")]
	public class Point
	{
		[Token(Token = "0x4002423")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Range(0f, 1f)]
		public float X;

		[Token(Token = "0x4002424")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[Range(0f, 1f)]
		public float Y;

		[Token(Token = "0x4002425")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0f, 100f)]
		public int Intensity;

		[Token(Token = "0x600232A")]
		[Address(RVA = "0xB8E748", Offset = "0xB8E748", VA = "0xB8E748")]
		public Point(float x, float y, int intensity)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000591")]
	public enum SimpleHapticType
	{
		[Token(Token = "0x4002427")]
		DotMode = 1,
		[Token(Token = "0x4002428")]
		PathMode
	}
	[Token(Token = "0x2000592")]
	public class VestHapticClip : FileHapticClip
	{
		[Token(Token = "0x4002429")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[SerializeField]
		[Range(0f, 360f)]
		protected float TactFileAngleX;

		[Token(Token = "0x400242A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		[Range(-0.5f, 0.5f)]
		protected float TactFileOffsetY;

		[Token(Token = "0x400242B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private RotationOption _rotationOption;

		[Token(Token = "0x400242C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private ScaleOption _scaleOption;

		[Token(Token = "0x600232B")]
		[Address(RVA = "0xB8E890", Offset = "0xB8E890", VA = "0xB8E890", Slot = "4")]
		public override void Play()
		{
		}

		[Token(Token = "0x600232C")]
		[Address(RVA = "0xB8E8EC", Offset = "0xB8E8EC", VA = "0xB8E8EC", Slot = "5")]
		public override void Play(string identifier)
		{
		}

		[Token(Token = "0x600232D")]
		[Address(RVA = "0xB8E904", Offset = "0xB8E904", VA = "0xB8E904", Slot = "6")]
		public override void Play(float intensity, string identifier = "")
		{
		}

		[Token(Token = "0x600232E")]
		[Address(RVA = "0xB8E91C", Offset = "0xB8E91C", VA = "0xB8E91C", Slot = "7")]
		public override void Play(float intensity, float duration, string identifier = "")
		{
		}

		[Token(Token = "0x600232F")]
		[Address(RVA = "0xB8E930", Offset = "0xB8E930", VA = "0xB8E930", Slot = "8")]
		public override void Play(float intensity, float duration, float vestRotationAngleX, string identifier = "")
		{
		}

		[Token(Token = "0x6002330")]
		[Address(RVA = "0xB8E940", Offset = "0xB8E940", VA = "0xB8E940", Slot = "12")]
		public override void Play(float intensity, float duration, float vestRotationAngleX, float vestRotationOffsetY, string identifier = "")
		{
		}

		[Token(Token = "0x6002331")]
		[Address(RVA = "0xB8EB8C", Offset = "0xB8EB8C", VA = "0xB8EB8C", Slot = "17")]
		public override void ResetValues()
		{
		}

		[Token(Token = "0x6002332")]
		[Address(RVA = "0xB8EB9C", Offset = "0xB8EB9C", VA = "0xB8EB9C")]
		public VestHapticClip()
		{
		}
	}
	[Token(Token = "0x2000593")]
	public class VisualFeedback : MonoBehaviour
	{
		[Token(Token = "0x400242D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HapticClipPositionType devicePos;

		[Token(Token = "0x400242E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform motorContainer;

		[Token(Token = "0x400242F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Gradient motorFeedbackGradient;

		[Token(Token = "0x4002430")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform[] motors;

		[Token(Token = "0x4002431")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float motorScaleOffset;

		[Token(Token = "0x6002333")]
		[Address(RVA = "0xB8EC50", Offset = "0xB8EC50", VA = "0xB8EC50")]
		private void Start()
		{
		}

		[Token(Token = "0x6002334")]
		[Address(RVA = "0xB8EFD4", Offset = "0xB8EFD4", VA = "0xB8EFD4")]
		public void UpdateFeedback(HapticFeedback feedback)
		{
		}

		[Token(Token = "0x6002335")]
		[Address(RVA = "0xB8F08C", Offset = "0xB8F08C", VA = "0xB8F08C")]
		public void UpdateFeedback(int[] feedbackValues)
		{
		}

		[Token(Token = "0x6002336")]
		[Address(RVA = "0xB8F26C", Offset = "0xB8F26C", VA = "0xB8F26C")]
		public VisualFeedback()
		{
		}
	}
}
