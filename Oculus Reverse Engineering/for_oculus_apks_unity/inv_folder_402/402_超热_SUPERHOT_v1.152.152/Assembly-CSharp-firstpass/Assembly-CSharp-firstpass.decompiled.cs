using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Formatters;
using System.Security;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Xml;
using Edelweiss.DecalSystem;
using Il2CppDummyDll;
using MP;
using Microsoft.Win32.SafeHandles;
using Newtonsoft.Json;
using Newtonsoft.Json.Bson;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json.Schema;
using Newtonsoft.Json.Serialization;
using Newtonsoft.Json.Utilities;
using UnityEngine;
using UnityEngine.Audio;

[assembly: AssemblyVersion("0.0.0.0")]
[Token(Token = "0x2000002")]
[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB46CF4", Offset = "0xB46CF4")]
internal sealed class <>f__AnonymousType0<<Count>j__TPar, <Members>j__TPar>
{
	[Token(Token = "0x4000001")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xB49FCC", Offset = "0xB49FCC")]
	private readonly <Count>j__TPar <Count>i__Field;

	[Token(Token = "0x4000002")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xB49FE0", Offset = "0xB49FE0")]
	private readonly <Members>j__TPar <Members>i__Field;

	[Token(Token = "0x17000001")]
	public <Count>j__TPar Count
	{
		[Token(Token = "0x6000001")]
		get
		{
			return (<Count>j__TPar)null;
		}
	}

	[Token(Token = "0x17000002")]
	public <Members>j__TPar Members
	{
		[Token(Token = "0x6000002")]
		get
		{
			return (<Members>j__TPar)null;
		}
	}

	[Token(Token = "0x6000003")]
	[DebuggerHidden]
	public <>f__AnonymousType0(<Count>j__TPar Count, <Members>j__TPar Members)
	{
	}

	[Token(Token = "0x6000004")]
	[DebuggerHidden]
	public override bool Equals(object value)
	{
		return default(bool);
	}

	[Token(Token = "0x6000005")]
	[DebuggerHidden]
	public override int GetHashCode()
	{
		return default(int);
	}

	[Token(Token = "0x6000006")]
	[DebuggerHidden]
	public override string ToString()
	{
		return null;
	}
}
[Token(Token = "0x2000003")]
public class DS_DecalProjector : DecalProjectorComponent
{
	[Token(Token = "0x6000007")]
	[Address(RVA = "0x1E142B0", Offset = "0x1E142B0", VA = "0x1E142B0")]
	public DS_DecalProjector()
	{
	}
}
[Token(Token = "0x2000004")]
public class DS_DecalProjectorGroup : DecalProjectorGroup
{
	[Token(Token = "0x6000008")]
	[Address(RVA = "0x1E142B8", Offset = "0x1E142B8", VA = "0x1E142B8")]
	public DS_DecalProjectorGroup()
	{
	}
}
[Token(Token = "0x2000005")]
public class DS_Decals : Decals
{
	[Token(Token = "0x6000009")]
	[Address(RVA = "0x1E142C0", Offset = "0x1E142C0", VA = "0x1E142C0", Slot = "20")]
	protected override DecalsMeshRenderer AddDecalsMeshRendererComponentToGameObject(GameObject a_GameObject)
	{
		return null;
	}

	[Token(Token = "0x600000A")]
	[Address(RVA = "0x1E1431C", Offset = "0x1E1431C", VA = "0x1E1431C")]
	public DS_Decals()
	{
	}
}
[Token(Token = "0x2000006")]
public class DS_DecalsMeshRenderer : DecalsMeshRenderer
{
	[Token(Token = "0x600000B")]
	[Address(RVA = "0x1E14324", Offset = "0x1E14324", VA = "0x1E14324")]
	public DS_DecalsMeshRenderer()
	{
	}
}
[Token(Token = "0x2000007")]
public class DS_SkinnedDecalProjector : SkinnedDecalProjectorComponent
{
	[Token(Token = "0x600000C")]
	[Address(RVA = "0x1E1432C", Offset = "0x1E1432C", VA = "0x1E1432C")]
	public DS_SkinnedDecalProjector()
	{
	}
}
[Token(Token = "0x2000008")]
public class DS_SkinnedDecalProjectorGroup : SkinnedDecalProjectorGroup
{
	[Token(Token = "0x600000D")]
	[Address(RVA = "0x1E14334", Offset = "0x1E14334", VA = "0x1E14334")]
	public DS_SkinnedDecalProjectorGroup()
	{
	}
}
[Token(Token = "0x2000009")]
public class DS_SkinnedDecals : SkinnedDecals
{
	[Token(Token = "0x600000E")]
	[Address(RVA = "0x1E1433C", Offset = "0x1E1433C", VA = "0x1E1433C", Slot = "20")]
	protected override SkinnedDecalsMeshRenderer AddSkinnedDecalsMeshRendererComponentToGameObject(GameObject a_GameObject)
	{
		return null;
	}

	[Token(Token = "0x600000F")]
	[Address(RVA = "0x1E14398", Offset = "0x1E14398", VA = "0x1E14398")]
	public DS_SkinnedDecals()
	{
	}
}
[Token(Token = "0x200000A")]
public class DS_SkinnedDecalsMeshRenderer : SkinnedDecalsMeshRenderer
{
	[Token(Token = "0x6000010")]
	[Address(RVA = "0x1E143A0", Offset = "0x1E143A0", VA = "0x1E143A0")]
	public DS_SkinnedDecalsMeshRenderer()
	{
	}
}
[Token(Token = "0x200000B")]
public static class ExtensionMethods
{
	[Serializable]
	[Token(Token = "0x200029D")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49A14", Offset = "0xB49A14")]
	private sealed class <>c__2<T> where T : ICloneable
	{
		[Token(Token = "0x4000D59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly <>c__2<T> <>9;

		[Token(Token = "0x4000D5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Func<T, T> <>9__2_0;

		[Token(Token = "0x60014DE")]
		public <>c__2()
		{
		}

		[Token(Token = "0x60014DF")]
		internal T <Clone>b__2_0(T item)
		{
			return (T)null;
		}
	}

	[Token(Token = "0x6000011")]
	public static T GetCopyOf<T>(this UnityEngine.Component comp, T other) where T : UnityEngine.Component
	{
		return null;
	}

	[Token(Token = "0x6000012")]
	public static T AddComponent<T>(this GameObject go, T toAdd) where T : UnityEngine.Component
	{
		return null;
	}

	[Token(Token = "0x6000013")]
	public static IList<T> Clone<T>(this IList<T> listToClone) where T : ICloneable
	{
		return null;
	}

	[Token(Token = "0x6000014")]
	[Address(RVA = "0x1E14420", Offset = "0x1E14420", VA = "0x1E14420")]
	public static void SetLayerRecursively(this GameObject go, int layer)
	{
	}

	[Token(Token = "0x6000015")]
	[Address(RVA = "0x1E144F8", Offset = "0x1E144F8", VA = "0x1E144F8")]
	public static Transform FindChildRecursive(this Transform t, string name, bool onlyActive = false)
	{
		return null;
	}

	[Token(Token = "0x6000016")]
	public static T FindComponent<T>(this GameObject gameObject)
	{
		return (T)null;
	}

	[Token(Token = "0x6000017")]
	[Address(RVA = "0x1E1466C", Offset = "0x1E1466C", VA = "0x1E1466C")]
	public static object FindComponent(this GameObject gameObject, Type type)
	{
		return null;
	}

	[Token(Token = "0x6000018")]
	[Address(RVA = "0x1E1473C", Offset = "0x1E1473C", VA = "0x1E1473C")]
	public static void ResetLocalTransform(this Transform transform)
	{
	}
}
[Token(Token = "0x200000C")]
public static class AnimationHelpers
{
	[Token(Token = "0x4000003")]
	public const float defaultSamplingFrequency = 1E-05f;

	[Token(Token = "0x6000019")]
	[Address(RVA = "0x1DFB3D4", Offset = "0x1DFB3D4", VA = "0x1DFB3D4")]
	public static bool AreCurvesEqual(AnimationCurve c1, AnimationCurve c2)
	{
		return default(bool);
	}

	[Token(Token = "0x600001A")]
	[Address(RVA = "0x1DFB484", Offset = "0x1DFB484", VA = "0x1DFB484")]
	public static bool AreKeyframesEqual(Keyframe[] k1, Keyframe[] k2)
	{
		return default(bool);
	}

	[Token(Token = "0x600001B")]
	[Address(RVA = "0x1DFB694", Offset = "0x1DFB694", VA = "0x1DFB694")]
	public static void ReverseCurve(AnimationCurve curve)
	{
	}

	[Token(Token = "0x600001C")]
	[Address(RVA = "0x1DFBC80", Offset = "0x1DFBC80", VA = "0x1DFBC80")]
	public static void NormalizeCurveDomain(AnimationCurve curve)
	{
	}

	[Token(Token = "0x600001D")]
	[Address(RVA = "0x1DFB834", Offset = "0x1DFB834", VA = "0x1DFB834")]
	public static void TransformCurveDomain(AnimationCurve curve, float min, float max)
	{
	}

	[Token(Token = "0x600001E")]
	[Address(RVA = "0x1DFBC8C", Offset = "0x1DFBC8C", VA = "0x1DFBC8C")]
	public static void FlipCurve(AnimationCurve curve, float samplingFrequency)
	{
	}

	[Token(Token = "0x600001F")]
	[Address(RVA = "0x1DFC278", Offset = "0x1DFC278", VA = "0x1DFC278")]
	public static void NormalizeCurveRange(AnimationCurve curve, float samplingFrequency)
	{
	}

	[Token(Token = "0x6000020")]
	[Address(RVA = "0x1DFC288", Offset = "0x1DFC288", VA = "0x1DFC288")]
	public static void TransformCurveRange(AnimationCurve curve, float min, float max, float samplingFrequency)
	{
	}

	[Token(Token = "0x6000021")]
	[Address(RVA = "0x1DFC034", Offset = "0x1DFC034", VA = "0x1DFC034")]
	private static void TransformCurveRange(AnimationCurve curve, float min, float max, float low, float high)
	{
	}

	[Token(Token = "0x6000022")]
	[Address(RVA = "0x1DFBCD4", Offset = "0x1DFBCD4", VA = "0x1DFBCD4")]
	public static void GetCurveRange(AnimationCurve curve, ref float high, ref float low, float samplingFrequency)
	{
	}

	[Token(Token = "0x6000023")]
	[Address(RVA = "0x1DFC2DC", Offset = "0x1DFC2DC", VA = "0x1DFC2DC")]
	public static float GetTimeAtParameter(AnimationCurve curve, float t)
	{
		return default(float);
	}

	[Token(Token = "0x6000024")]
	[Address(RVA = "0x1DFC440", Offset = "0x1DFC440", VA = "0x1DFC440")]
	public static Keyframe[] ReorderKeyframes(Keyframe[] keys)
	{
		return null;
	}

	[Token(Token = "0x6000025")]
	[Address(RVA = "0x1DFC4B4", Offset = "0x1DFC4B4", VA = "0x1DFC4B4")]
	public static void SmoothAnimationCurveTangents(AnimationCurve curve)
	{
	}

	[Token(Token = "0x6000026")]
	[Address(RVA = "0x1DFC954", Offset = "0x1DFC954", VA = "0x1DFC954")]
	public static AnimationClip CreatePoseSnapshot(Animation relativeTo)
	{
		return null;
	}

	[Token(Token = "0x6000027")]
	[Address(RVA = "0x1DFCFA8", Offset = "0x1DFCFA8", VA = "0x1DFCFA8")]
	private static void AddPoseKey(AnimationClip clip, string pathTo, string propertyName, float val)
	{
	}

	[Token(Token = "0x6000028")]
	[Address(RVA = "0x1DFD174", Offset = "0x1DFD174", VA = "0x1DFD174")]
	public static AnimationCurve GetTrimmedCurve(AnimationCurve curve, int startFrame, int endFrame, float frameRate, float tangentSamplingFrequency = 1E-05f)
	{
		return null;
	}

	[Token(Token = "0x6000029")]
	[Address(RVA = "0x1DFD190", Offset = "0x1DFD190", VA = "0x1DFD190")]
	public static AnimationCurve GetTrimmedCurve(AnimationCurve curve, float startTime, float endTime, float tangentSamplingFrequency = 1E-05f)
	{
		return null;
	}
}
[Token(Token = "0x200000D")]
public class CenterOfMassDistributionAttribute : Attribute
{
	[Token(Token = "0x4000004")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public readonly float parameter;

	[Token(Token = "0x4000005")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private readonly string childPartName;

	[Token(Token = "0x600002A")]
	[Address(RVA = "0x1E126FC", Offset = "0x1E126FC", VA = "0x1E126FC")]
	public CenterOfMassDistributionAttribute(float parameter, string childPartName)
	{
	}

	[Token(Token = "0x600002B")]
	[Address(RVA = "0x1E09654", Offset = "0x1E09654", VA = "0x1E09654")]
	public BodyPart GetChildPart(Biped instance)
	{
		return null;
	}

	[Token(Token = "0x600002C")]
	[Address(RVA = "0x1E09568", Offset = "0x1E09568", VA = "0x1E09568")]
	public static CenterOfMassDistributionAttribute ForField(FieldInfo field)
	{
		return null;
	}
}
[Token(Token = "0x200000E")]
public class DefaultJointLimitsAttribute : Attribute
{
	[Token(Token = "0x4000006")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public readonly float xMin;

	[Token(Token = "0x4000007")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public readonly float xMax;

	[Token(Token = "0x4000008")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public readonly float yMax;

	[Token(Token = "0x4000009")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public readonly float zMax;

	[Token(Token = "0x600002D")]
	[Address(RVA = "0x1E143A8", Offset = "0x1E143A8", VA = "0x1E143A8")]
	public DefaultJointLimitsAttribute(float xMin, float xMax, float yMax, float zMax)
	{
	}

	[Token(Token = "0x600002E")]
	[Address(RVA = "0x1E08BF0", Offset = "0x1E08BF0", VA = "0x1E08BF0")]
	public static DefaultJointLimitsAttribute ForField(FieldInfo field)
	{
		return null;
	}
}
[Token(Token = "0x200000F")]
public enum ShapeType
{
	[Token(Token = "0x400000B")]
	None,
	[Token(Token = "0x400000C")]
	Box,
	[Token(Token = "0x400000D")]
	Capsule,
	[Token(Token = "0x400000E")]
	Sphere
}
[Token(Token = "0x2000010")]
public class DefaultShapeTypeAttribute : Attribute
{
	[Token(Token = "0x400000F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public readonly ShapeType shapeType;

	[Token(Token = "0x600002F")]
	[Address(RVA = "0x1E143F4", Offset = "0x1E143F4", VA = "0x1E143F4")]
	public DefaultShapeTypeAttribute(ShapeType shapeType)
	{
	}

	[Token(Token = "0x6000030")]
	[Address(RVA = "0x1E05358", Offset = "0x1E05358", VA = "0x1E05358")]
	public static DefaultShapeTypeAttribute ForField(FieldInfo field)
	{
		return null;
	}
}
[Token(Token = "0x2000011")]
public class MassPercentageAttribute : Attribute
{
	[Token(Token = "0x4000010")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public readonly float percentage;

	[Token(Token = "0x4000011")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private readonly string redistributeTo;

	[Token(Token = "0x6000031")]
	[Address(RVA = "0x1A33198", Offset = "0x1A33198", VA = "0x1A33198")]
	public MassPercentageAttribute(float percentage)
	{
	}

	[Token(Token = "0x6000032")]
	[Address(RVA = "0x1A33204", Offset = "0x1A33204", VA = "0x1A33204")]
	public MassPercentageAttribute(float percentage, string redistributeTo)
	{
	}

	[Token(Token = "0x6000033")]
	[Address(RVA = "0x1A33240", Offset = "0x1A33240", VA = "0x1A33240")]
	public BodyPart GetPartToRedistributeTo(Biped instance)
	{
		return null;
	}

	[Token(Token = "0x6000034")]
	[Address(RVA = "0x1A3339C", Offset = "0x1A3339C", VA = "0x1A3339C")]
	public static MassPercentageAttribute ForField(FieldInfo field)
	{
		return null;
	}
}
[Token(Token = "0x2000012")]
public class NonfunctionalPartAttribute : Attribute
{
	[Token(Token = "0x6000035")]
	[Address(RVA = "0x1B26988", Offset = "0x1B26988", VA = "0x1B26988")]
	public NonfunctionalPartAttribute()
	{
	}
}
[Token(Token = "0x2000013")]
public enum DefinitionRequirement
{
	[Token(Token = "0x4000013")]
	Mandatory,
	[Token(Token = "0x4000014")]
	Optional
}
[Token(Token = "0x2000014")]
public class RequirementAttribute : Attribute
{
	[Token(Token = "0x4000015")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public readonly DefinitionRequirement type;

	[Token(Token = "0x6000036")]
	[Address(RVA = "0x1B26D94", Offset = "0x1B26D94", VA = "0x1B26D94")]
	public RequirementAttribute(DefinitionRequirement requirementType)
	{
	}

	[Token(Token = "0x6000037")]
	[Address(RVA = "0x1B26DC0", Offset = "0x1B26DC0", VA = "0x1B26DC0")]
	public static RequirementAttribute ForField(FieldInfo field)
	{
		return null;
	}

	[Token(Token = "0x6000038")]
	[Address(RVA = "0x1B26EAC", Offset = "0x1B26EAC", VA = "0x1B26EAC")]
	public static bool IsMandatory(FieldInfo field)
	{
		return default(bool);
	}
}
[Token(Token = "0x2000015")]
public class RequireXLimitCalculationAttribute : Attribute
{
	[Token(Token = "0x4000016")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public readonly string childName;

	[Token(Token = "0x6000039")]
	[Address(RVA = "0x1B26C7C", Offset = "0x1B26C7C", VA = "0x1B26C7C")]
	public RequireXLimitCalculationAttribute(string childName)
	{
	}

	[Token(Token = "0x600003A")]
	[Address(RVA = "0x1B26CA8", Offset = "0x1B26CA8", VA = "0x1B26CA8")]
	public static RequireXLimitCalculationAttribute ForField(FieldInfo field)
	{
		return null;
	}
}
[Token(Token = "0x2000016")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB46D14", Offset = "0xB46D14")]
public class Biped : MonoBehaviour
{
	[Token(Token = "0x200029E")]
	public class DefinitionException : Exception
	{
		[Token(Token = "0x60014E0")]
		[Address(RVA = "0x1E019D8", Offset = "0x1E019D8", VA = "0x1E019D8")]
		public DefinitionException(Biped biped)
		{
		}
	}

	[Token(Token = "0x200029F")]
	public enum CharacterizationMode
	{
		[Token(Token = "0x4000D5C")]
		Simple,
		[Token(Token = "0x4000D5D")]
		Advanced
	}

	[Serializable]
	[Token(Token = "0x20002A0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49A24", Offset = "0xB49A24")]
	private sealed class <>c
	{
		[Token(Token = "0x4000D5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly <>c <>9;

		[Token(Token = "0x4000D5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Comparison<GameObject> <>9__70_0;

		[Token(Token = "0x60014E2")]
		[Address(RVA = "0x1E0CE1C", Offset = "0x1E0CE1C", VA = "0x1E0CE1C")]
		public <>c()
		{
		}

		[Token(Token = "0x60014E3")]
		[Address(RVA = "0x1E0CE24", Offset = "0x1E0CE24", VA = "0x1E0CE24")]
		internal int <PopulateAxialChainBonesUsingNamingConvention>b__70_0(GameObject x, GameObject y)
		{
			return default(int);
		}
	}

	[Token(Token = "0x20002A1")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49A34", Offset = "0xB49A34")]
	private sealed class <>c__DisplayClass88_0
	{
		[Token(Token = "0x4000D60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform rootBone;

		[Token(Token = "0x60014E4")]
		[Address(RVA = "0x1E08624", Offset = "0x1E08624", VA = "0x1E08624")]
		public <>c__DisplayClass88_0()
		{
		}

		[Token(Token = "0x60014E5")]
		[Address(RVA = "0x1E0CE94", Offset = "0x1E0CE94", VA = "0x1E0CE94")]
		internal bool <GetHeightEstimate>b__0(Transform item)
		{
			return default(bool);
		}
	}

	[Token(Token = "0x20002A2")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49A44", Offset = "0xB49A44")]
	private sealed class <GetUp>d__113 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000D61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000D62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000D63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Biped <>4__this;

		[Token(Token = "0x4000D64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float crossFadeTime;

		[Token(Token = "0x4000D65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float energyLevel;

		[Token(Token = "0x4000D66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string nextAnimation;

		[Token(Token = "0x1700022E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60014E9")]
			[Address(RVA = "0x1E0D068", Offset = "0x1E0D068", VA = "0x1E0D068", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700022F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60014EB")]
			[Address(RVA = "0x1E0D0D8", Offset = "0x1E0D0D8", VA = "0x1E0D0D8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60014E6")]
		[Address(RVA = "0x1E0BD7C", Offset = "0x1E0BD7C", VA = "0x1E0BD7C")]
		[DebuggerHidden]
		public <GetUp>d__113(int <>1__state)
		{
		}

		[Token(Token = "0x60014E7")]
		[Address(RVA = "0x1E0CF10", Offset = "0x1E0CF10", VA = "0x1E0CF10", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60014E8")]
		[Address(RVA = "0x1E0CF14", Offset = "0x1E0CF14", VA = "0x1E0CF14", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60014EA")]
		[Address(RVA = "0x1E0D070", Offset = "0x1E0D070", VA = "0x1E0D070", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002A3")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49A54", Offset = "0xB49A54")]
	private sealed class <GetUpWithAnimation>d__117 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000D67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000D68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000D69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Biped <>4__this;

		[Token(Token = "0x4000D6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float energyLevel;

		[Token(Token = "0x4000D6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float crossFadeTime;

		[Token(Token = "0x4000D6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string nextAnimation;

		[Token(Token = "0x4000D6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private GetUpAnimation <getUp>5__2;

		[Token(Token = "0x4000D6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float <transitionTime>5__3;

		[Token(Token = "0x4000D6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float <div>5__4;

		[Token(Token = "0x4000D70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float <targetBlendWeight>5__5;

		[Token(Token = "0x17000230")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60014EF")]
			[Address(RVA = "0x1E0D7DC", Offset = "0x1E0D7DC", VA = "0x1E0D7DC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000231")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60014F1")]
			[Address(RVA = "0x1E0D84C", Offset = "0x1E0D84C", VA = "0x1E0D84C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60014EC")]
		[Address(RVA = "0x1E0C520", Offset = "0x1E0C520", VA = "0x1E0C520")]
		[DebuggerHidden]
		public <GetUpWithAnimation>d__117(int <>1__state)
		{
		}

		[Token(Token = "0x60014ED")]
		[Address(RVA = "0x1E0D0E0", Offset = "0x1E0D0E0", VA = "0x1E0D0E0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60014EE")]
		[Address(RVA = "0x1E0D0E4", Offset = "0x1E0D0E4", VA = "0x1E0D0E4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60014F0")]
		[Address(RVA = "0x1E0D7E4", Offset = "0x1E0D7E4", VA = "0x1E0D7E4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002A4")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49A64", Offset = "0xB49A64")]
	private sealed class <GetUpWithAnimator>d__121 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000D71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000D72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000D73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Biped <>4__this;

		[Token(Token = "0x4000D74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float energyLevel;

		[Token(Token = "0x4000D75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float crossFadeTime;

		[Token(Token = "0x4000D76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 <newPosition>5__2;

		[Token(Token = "0x4000D77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Quaternion <newOrientation>5__3;

		[Token(Token = "0x4000D78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private bool <applyRootMotion>5__4;

		[Token(Token = "0x4000D79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Biped <rd>5__5;

		[Token(Token = "0x4000D7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float <transitionTime>5__6;

		[Token(Token = "0x4000D7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float <div>5__7;

		[Token(Token = "0x17000232")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60014F5")]
			[Address(RVA = "0x1E0E02C", Offset = "0x1E0E02C", VA = "0x1E0E02C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000233")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60014F7")]
			[Address(RVA = "0x1E0E09C", Offset = "0x1E0E09C", VA = "0x1E0E09C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60014F2")]
		[Address(RVA = "0x1E0CB8C", Offset = "0x1E0CB8C", VA = "0x1E0CB8C")]
		[DebuggerHidden]
		public <GetUpWithAnimator>d__121(int <>1__state)
		{
		}

		[Token(Token = "0x60014F3")]
		[Address(RVA = "0x1E0D854", Offset = "0x1E0D854", VA = "0x1E0D854", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60014F4")]
		[Address(RVA = "0x1E0D858", Offset = "0x1E0D858", VA = "0x1E0D858", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60014F6")]
		[Address(RVA = "0x1E0E034", Offset = "0x1E0E034", VA = "0x1E0E034", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000017")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static FieldInfo[] m_bodyPartAndChainFields;

	[Token(Token = "0x4000018")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public BipedNamingConvention namingConvention;

	[Token(Token = "0x4000019")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "RequirementAttribute", RVA = "0xB49FF4", Offset = "0xB49FF4")]
	[AttributeAttribute(Name = "DefaultShapeTypeAttribute", RVA = "0xB49FF4", Offset = "0xB49FF4")]
	[AttributeAttribute(Name = "DefaultJointLimitsAttribute", RVA = "0xB49FF4", Offset = "0xB49FF4")]
	[AttributeAttribute(Name = "MassPercentageAttribute", RVA = "0xB49FF4", Offset = "0xB49FF4")]
	public BodyPart pelvis;

	[Token(Token = "0x400001A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "RequirementAttribute", RVA = "0xB4A06C", Offset = "0xB4A06C")]
	[AttributeAttribute(Name = "DefaultShapeTypeAttribute", RVA = "0xB4A06C", Offset = "0xB4A06C")]
	[AttributeAttribute(Name = "DefaultJointLimitsAttribute", RVA = "0xB4A06C", Offset = "0xB4A06C")]
	[AttributeAttribute(Name = "MassPercentageAttribute", RVA = "0xB4A06C", Offset = "0xB4A06C")]
	[AttributeAttribute(Name = "CenterOfMassDistributionAttribute", RVA = "0xB4A06C", Offset = "0xB4A06C")]
	public BodyPart leftHip;

	[Token(Token = "0x400001B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "RequirementAttribute", RVA = "0xB4A11C", Offset = "0xB4A11C")]
	[AttributeAttribute(Name = "DefaultShapeTypeAttribute", RVA = "0xB4A11C", Offset = "0xB4A11C")]
	[AttributeAttribute(Name = "DefaultJointLimitsAttribute", RVA = "0xB4A11C", Offset = "0xB4A11C")]
	[AttributeAttribute(Name = "RequireXLimitCalculationAttribute", RVA = "0xB4A11C", Offset = "0xB4A11C")]
	[AttributeAttribute(Name = "MassPercentageAttribute", RVA = "0xB4A11C", Offset = "0xB4A11C")]
	[AttributeAttribute(Name = "CenterOfMassDistributionAttribute", RVA = "0xB4A11C", Offset = "0xB4A11C")]
	public BodyPart leftLowerLeg;

	[Token(Token = "0x400001C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "RequirementAttribute", RVA = "0xB4A1F0", Offset = "0xB4A1F0")]
	[AttributeAttribute(Name = "DefaultShapeTypeAttribute", RVA = "0xB4A1F0", Offset = "0xB4A1F0")]
	[AttributeAttribute(Name = "DefaultJointLimitsAttribute", RVA = "0xB4A1F0", Offset = "0xB4A1F0")]
	[AttributeAttribute(Name = "MassPercentageAttribute", RVA = "0xB4A1F0", Offset = "0xB4A1F0")]
	public BodyPart leftFoot;

	[Token(Token = "0x400001D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "RequirementAttribute", RVA = "0xB4A26C", Offset = "0xB4A26C")]
	[NonfunctionalPart]
	[AttributeAttribute(Name = "DefaultShapeTypeAttribute", RVA = "0xB4A26C", Offset = "0xB4A26C")]
	[AttributeAttribute(Name = "DefaultJointLimitsAttribute", RVA = "0xB4A26C", Offset = "0xB4A26C")]
	[AttributeAttribute(Name = "MassPercentageAttribute", RVA = "0xB4A26C", Offset = "0xB4A26C")]
	public BodyPart leftToe;

	[Token(Token = "0x400001E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[AttributeAttribute(Name = "RequirementAttribute", RVA = "0xB4A308", Offset = "0xB4A308")]
	[AttributeAttribute(Name = "DefaultShapeTypeAttribute", RVA = "0xB4A308", Offset = "0xB4A308")]
	[AttributeAttribute(Name = "DefaultJointLimitsAttribute", RVA = "0xB4A308", Offset = "0xB4A308")]
	[AttributeAttribute(Name = "MassPercentageAttribute", RVA = "0xB4A308", Offset = "0xB4A308")]
	[AttributeAttribute(Name = "CenterOfMassDistributionAttribute", RVA = "0xB4A308", Offset = "0xB4A308")]
	public BodyPart rightHip;

	[Token(Token = "0x400001F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[AttributeAttribute(Name = "RequirementAttribute", RVA = "0xB4A3B8", Offset = "0xB4A3B8")]
	[AttributeAttribute(Name = "DefaultShapeTypeAttribute", RVA = "0xB4A3B8", Offset = "0xB4A3B8")]
	[AttributeAttribute(Name = "DefaultJointLimitsAttribute", RVA = "0xB4A3B8", Offset = "0xB4A3B8")]
	[AttributeAttribute(Name = "RequireXLimitCalculationAttribute", RVA = "0xB4A3B8", Offset = "0xB4A3B8")]
	[AttributeAttribute(Name = "MassPercentageAttribute", RVA = "0xB4A3B8", Offset = "0xB4A3B8")]
	[AttributeAttribute(Name = "CenterOfMassDistributionAttribute", RVA = "0xB4A3B8", Offset = "0xB4A3B8")]
	public BodyPart rightLowerLeg;

	[Token(Token = "0x4000020")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[AttributeAttribute(Name = "RequirementAttribute", RVA = "0xB4A48C", Offset = "0xB4A48C")]
	[AttributeAttribute(Name = "DefaultShapeTypeAttribute", RVA = "0xB4A48C", Offset = "0xB4A48C")]
	[AttributeAttribute(Name = "DefaultJointLimitsAttribute", RVA = "0xB4A48C", Offset = "0xB4A48C")]
	[AttributeAttribute(Name = "MassPercentageAttribute", RVA = "0xB4A48C", Offset = "0xB4A48C")]
	public BodyPart rightFoot;

	[Token(Token = "0x4000021")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[AttributeAttribute(Name = "RequirementAttribute", RVA = "0xB4A508", Offset = "0xB4A508")]
	[NonfunctionalPart]
	[AttributeAttribute(Name = "DefaultShapeTypeAttribute", RVA = "0xB4A508", Offset = "0xB4A508")]
	[AttributeAttribute(Name = "DefaultJointLimitsAttribute", RVA = "0xB4A508", Offset = "0xB4A508")]
	[AttributeAttribute(Name = "MassPercentageAttribute", RVA = "0xB4A508", Offset = "0xB4A508")]
	public BodyPart rightToe;

	[Token(Token = "0x4000022")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[AttributeAttribute(Name = "RequirementAttribute", RVA = "0xB4A5A4", Offset = "0xB4A5A4")]
	[AttributeAttribute(Name = "DefaultShapeTypeAttribute", RVA = "0xB4A5A4", Offset = "0xB4A5A4")]
	[AttributeAttribute(Name = "DefaultJointLimitsAttribute", RVA = "0xB4A5A4", Offset = "0xB4A5A4")]
	[AttributeAttribute(Name = "MassPercentageAttribute", RVA = "0xB4A5A4", Offset = "0xB4A5A4")]
	public BodyPartChain spine;

	[Token(Token = "0x4000023")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[AttributeAttribute(Name = "RequirementAttribute", RVA = "0xB4A62C", Offset = "0xB4A62C")]
	[AttributeAttribute(Name = "DefaultShapeTypeAttribute", RVA = "0xB4A62C", Offset = "0xB4A62C")]
	[AttributeAttribute(Name = "DefaultJointLimitsAttribute", RVA = "0xB4A62C", Offset = "0xB4A62C")]
	[AttributeAttribute(Name = "MassPercentageAttribute", RVA = "0xB4A62C", Offset = "0xB4A62C")]
	[AttributeAttribute(Name = "CenterOfMassDistributionAttribute", RVA = "0xB4A62C", Offset = "0xB4A62C")]
	public BodyPart leftCollar;

	[Token(Token = "0x4000024")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[AttributeAttribute(Name = "RequirementAttribute", RVA = "0xB4A6E0", Offset = "0xB4A6E0")]
	[AttributeAttribute(Name = "DefaultShapeTypeAttribute", RVA = "0xB4A6E0", Offset = "0xB4A6E0")]
	[AttributeAttribute(Name = "DefaultJointLimitsAttribute", RVA = "0xB4A6E0", Offset = "0xB4A6E0")]
	[AttributeAttribute(Name = "MassPercentageAttribute", RVA = "0xB4A6E0", Offset = "0xB4A6E0")]
	[AttributeAttribute(Name = "CenterOfMassDistributionAttribute", RVA = "0xB4A6E0", Offset = "0xB4A6E0")]
	public BodyPart leftUpperArm;

	[Token(Token = "0x4000025")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[AttributeAttribute(Name = "RequirementAttribute", RVA = "0xB4A790", Offset = "0xB4A790")]
	[AttributeAttribute(Name = "DefaultShapeTypeAttribute", RVA = "0xB4A790", Offset = "0xB4A790")]
	[AttributeAttribute(Name = "DefaultJointLimitsAttribute", RVA = "0xB4A790", Offset = "0xB4A790")]
	[AttributeAttribute(Name = "RequireXLimitCalculationAttribute", RVA = "0xB4A790", Offset = "0xB4A790")]
	[AttributeAttribute(Name = "MassPercentageAttribute", RVA = "0xB4A790", Offset = "0xB4A790")]
	[AttributeAttribute(Name = "CenterOfMassDistributionAttribute", RVA = "0xB4A790", Offset = "0xB4A790")]
	public BodyPart leftForearm;

	[Token(Token = "0x4000026")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[AttributeAttribute(Name = "RequirementAttribute", RVA = "0xB4A864", Offset = "0xB4A864")]
	[AttributeAttribute(Name = "DefaultShapeTypeAttribute", RVA = "0xB4A864", Offset = "0xB4A864")]
	[AttributeAttribute(Name = "DefaultJointLimitsAttribute", RVA = "0xB4A864", Offset = "0xB4A864")]
	[AttributeAttribute(Name = "MassPercentageAttribute", RVA = "0xB4A864", Offset = "0xB4A864")]
	public BodyPart leftHand;

	[Token(Token = "0x4000027")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[AttributeAttribute(Name = "RequirementAttribute", RVA = "0xB4A8E4", Offset = "0xB4A8E4")]
	[AttributeAttribute(Name = "DefaultShapeTypeAttribute", RVA = "0xB4A8E4", Offset = "0xB4A8E4")]
	[AttributeAttribute(Name = "DefaultJointLimitsAttribute", RVA = "0xB4A8E4", Offset = "0xB4A8E4")]
	[AttributeAttribute(Name = "MassPercentageAttribute", RVA = "0xB4A8E4", Offset = "0xB4A8E4")]
	[AttributeAttribute(Name = "CenterOfMassDistributionAttribute", RVA = "0xB4A8E4", Offset = "0xB4A8E4")]
	public BodyPart rightCollar;

	[Token(Token = "0x4000028")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[AttributeAttribute(Name = "RequirementAttribute", RVA = "0xB4A998", Offset = "0xB4A998")]
	[AttributeAttribute(Name = "DefaultShapeTypeAttribute", RVA = "0xB4A998", Offset = "0xB4A998")]
	[AttributeAttribute(Name = "DefaultJointLimitsAttribute", RVA = "0xB4A998", Offset = "0xB4A998")]
	[AttributeAttribute(Name = "MassPercentageAttribute", RVA = "0xB4A998", Offset = "0xB4A998")]
	[AttributeAttribute(Name = "CenterOfMassDistributionAttribute", RVA = "0xB4A998", Offset = "0xB4A998")]
	public BodyPart rightUpperArm;

	[Token(Token = "0x4000029")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[AttributeAttribute(Name = "RequirementAttribute", RVA = "0xB4AA48", Offset = "0xB4AA48")]
	[AttributeAttribute(Name = "DefaultShapeTypeAttribute", RVA = "0xB4AA48", Offset = "0xB4AA48")]
	[AttributeAttribute(Name = "DefaultJointLimitsAttribute", RVA = "0xB4AA48", Offset = "0xB4AA48")]
	[AttributeAttribute(Name = "RequireXLimitCalculationAttribute", RVA = "0xB4AA48", Offset = "0xB4AA48")]
	[AttributeAttribute(Name = "MassPercentageAttribute", RVA = "0xB4AA48", Offset = "0xB4AA48")]
	[AttributeAttribute(Name = "CenterOfMassDistributionAttribute", RVA = "0xB4AA48", Offset = "0xB4AA48")]
	public BodyPart rightForearm;

	[Token(Token = "0x400002A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[AttributeAttribute(Name = "RequirementAttribute", RVA = "0xB4AB1C", Offset = "0xB4AB1C")]
	[AttributeAttribute(Name = "DefaultShapeTypeAttribute", RVA = "0xB4AB1C", Offset = "0xB4AB1C")]
	[AttributeAttribute(Name = "DefaultJointLimitsAttribute", RVA = "0xB4AB1C", Offset = "0xB4AB1C")]
	[AttributeAttribute(Name = "MassPercentageAttribute", RVA = "0xB4AB1C", Offset = "0xB4AB1C")]
	public BodyPart rightHand;

	[Token(Token = "0x400002B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[AttributeAttribute(Name = "RequirementAttribute", RVA = "0xB4AB9C", Offset = "0xB4AB9C")]
	[AttributeAttribute(Name = "DefaultShapeTypeAttribute", RVA = "0xB4AB9C", Offset = "0xB4AB9C")]
	[AttributeAttribute(Name = "DefaultJointLimitsAttribute", RVA = "0xB4AB9C", Offset = "0xB4AB9C")]
	[AttributeAttribute(Name = "MassPercentageAttribute", RVA = "0xB4AB9C", Offset = "0xB4AB9C")]
	public BodyPartChain neck;

	[Token(Token = "0x400002C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[AttributeAttribute(Name = "RequirementAttribute", RVA = "0xB4AC28", Offset = "0xB4AC28")]
	[AttributeAttribute(Name = "DefaultShapeTypeAttribute", RVA = "0xB4AC28", Offset = "0xB4AC28")]
	[AttributeAttribute(Name = "DefaultJointLimitsAttribute", RVA = "0xB4AC28", Offset = "0xB4AC28")]
	[AttributeAttribute(Name = "MassPercentageAttribute", RVA = "0xB4AC28", Offset = "0xB4AC28")]
	public BodyPart head;

	[Token(Token = "0x400002D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public float mass;

	[Token(Token = "0x400002E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	public bool autoDistributeMass;

	[Token(Token = "0x400002F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC5")]
	public bool addCollidersOnStart;

	[Token(Token = "0x4000030")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4ACA0", Offset = "0xB4ACA0")]
	private Biped <ragdoll>k__BackingField;

	[Token(Token = "0x4000031")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private Biped previousRagdoll;

	[Token(Token = "0x4000032")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private MimicBiped m_mimic;

	[Token(Token = "0x4000033")]
	public const string tempPoseClipName = "Temporary Ragdoll Pose";

	[Token(Token = "0x4000034")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public Animation anim;

	[Token(Token = "0x4000035")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public LayerMask walkableSurfaces;

	[Token(Token = "0x4000036")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	public float getUpRaycastHeightOffset;

	[Token(Token = "0x4000037")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public GetUpAnimation[] proneGetUpAnimations;

	[Token(Token = "0x4000038")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public GetUpAnimation[] supineGetUpAnimations;

	[Token(Token = "0x4000039")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public string isRagdollAnimatorParam;

	[Token(Token = "0x400003A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public Animator animator;

	[Token(Token = "0x400003B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public string isSupineAnimatorParam;

	[Token(Token = "0x400003C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public string energyLevelAnimatorParam;

	[Token(Token = "0x400003D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public GetUpAnimation.RootLocation defaultProneGetUpLocation;

	[Token(Token = "0x400003E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
	public GetUpAnimation.RootLocation defaultSupineGetUpLocation;

	[Token(Token = "0x17000003")]
	public static FieldInfo[] bodyPartAndChainFields
	{
		[Token(Token = "0x600003B")]
		[Address(RVA = "0x1DFDC60", Offset = "0x1DFDC60", VA = "0x1DFDC60")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000004")]
	public BodyPart[] allParts
	{
		[Token(Token = "0x600003C")]
		[Address(RVA = "0x1DFDF14", Offset = "0x1DFDF14", VA = "0x1DFDF14")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000005")]
	public bool satisfiesMinimumDefinition
	{
		[Token(Token = "0x600003D")]
		[Address(RVA = "0x1DFE72C", Offset = "0x1DFE72C", VA = "0x1DFE72C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000006")]
	public bool isCharacterized
	{
		[Token(Token = "0x600003E")]
		[Address(RVA = "0x1DFE944", Offset = "0x1DFE944", VA = "0x1DFE944")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000007")]
	public bool isRagdoll
	{
		[Token(Token = "0x600003F")]
		[Address(RVA = "0x1DFEA74", Offset = "0x1DFEA74", VA = "0x1DFEA74")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000008")]
	public Biped ragdoll
	{
		[Token(Token = "0x6000040")]
		[Address(RVA = "0x1DFEAE4", Offset = "0x1DFEAE4", VA = "0x1DFEAE4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4BCE0", Offset = "0xB4BCE0")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000041")]
		[Address(RVA = "0x1DFEAEC", Offset = "0x1DFEAEC", VA = "0x1DFEAEC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4BCF0", Offset = "0xB4BCF0")]
		private set
		{
		}
	}

	[Token(Token = "0x17000009")]
	public MimicBiped mimic
	{
		[Token(Token = "0x6000042")]
		[Address(RVA = "0x1DFEAF4", Offset = "0x1DFEAF4", VA = "0x1DFEAF4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700000A")]
	public bool satisfiesGetUpRequirements
	{
		[Token(Token = "0x6000043")]
		[Address(RVA = "0x1DFEBFC", Offset = "0x1DFEBFC", VA = "0x1DFEBFC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700000B")]
	public bool hasAnimatorWithValidHumanAvatar
	{
		[Token(Token = "0x6000044")]
		[Address(RVA = "0x1DFEE10", Offset = "0x1DFEE10", VA = "0x1DFEE10")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000045")]
	[Address(RVA = "0x1DFEF5C", Offset = "0x1DFEF5C", VA = "0x1DFEF5C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000046")]
	[Address(RVA = "0x1DFF6C0", Offset = "0x1DFF6C0", VA = "0x1DFF6C0")]
	public void RemoveColliders()
	{
	}

	[Token(Token = "0x6000047")]
	[Address(RVA = "0x1DFF36C", Offset = "0x1DFF36C", VA = "0x1DFF36C")]
	public void AddColliders()
	{
	}

	[Token(Token = "0x6000048")]
	[Address(RVA = "0x1DFF4BC", Offset = "0x1DFF4BC", VA = "0x1DFF4BC")]
	private void AddGetupAnimationsToAnimationComponentIfNecessary()
	{
	}

	[Token(Token = "0x6000049")]
	[Address(RVA = "0x1DFFE78", Offset = "0x1DFFE78", VA = "0x1DFFE78")]
	public void AutoDetectNamingConvention()
	{
	}

	[Token(Token = "0x600004A")]
	[Address(RVA = "0x1E00858", Offset = "0x1E00858", VA = "0x1E00858")]
	public void FindBodyPartsUsingNamingConvention(BipedNamingConvention.DCCApplication fromApplication = BipedNamingConvention.DCCApplication.Custom)
	{
	}

	[Token(Token = "0x600004B")]
	[Address(RVA = "0x1E016D8", Offset = "0x1E016D8", VA = "0x1E016D8")]
	public void Characterize(AxisAlignmentMode symmetryAlignmentMode = AxisAlignmentMode.Cardinal, CharacterizationMode characterizationMode = CharacterizationMode.Simple)
	{
	}

	[Token(Token = "0x600004C")]
	[Address(RVA = "0x1E00F4C", Offset = "0x1E00F4C", VA = "0x1E00F4C")]
	private BodyPart GetBodyPartOnTransformWithName(string boneName, Transform[] hierarchy)
	{
		return null;
	}

	[Token(Token = "0x600004D")]
	[Address(RVA = "0x1E046E0", Offset = "0x1E046E0", VA = "0x1E046E0")]
	private BodyPart GetBodyPartOnTransform(Transform bone)
	{
		return null;
	}

	[Token(Token = "0x600004E")]
	[Address(RVA = "0x1E00F90", Offset = "0x1E00F90", VA = "0x1E00F90")]
	private void PopulateAxialChainBonesUsingNamingConvention(BodyPartChain axialSkeletonChain, string searchPattern, BodyPart head)
	{
	}

	[Token(Token = "0x600004F")]
	[Address(RVA = "0x1E04884", Offset = "0x1E04884", VA = "0x1E04884")]
	private BodyPart GetDefaultLimbTip(BodyPart tipParent)
	{
		return null;
	}

	[Token(Token = "0x6000050")]
	[Address(RVA = "0x1E0496C", Offset = "0x1E0496C", VA = "0x1E0496C")]
	private void InitializeDefaultPartProperties(BodyPart part)
	{
	}

	[Token(Token = "0x6000051")]
	[Address(RVA = "0x1E04B18", Offset = "0x1E04B18", VA = "0x1E04B18")]
	private void SetDefaultFunctionalPartPropertyOverrides(BodyPart part)
	{
	}

	[Token(Token = "0x6000052")]
	[Address(RVA = "0x1E01A8C", Offset = "0x1E01A8C", VA = "0x1E01A8C")]
	private void InitializeDefaultPartPropertiesBasedOnFunctionality()
	{
	}

	[Token(Token = "0x6000053")]
	[Address(RVA = "0x1E01DD0", Offset = "0x1E01DD0", VA = "0x1E01DD0")]
	private void MapSymmetry(AxisAlignmentMode alignMode = AxisAlignmentMode.Cardinal)
	{
	}

	[Token(Token = "0x6000054")]
	[Address(RVA = "0x1E0526C", Offset = "0x1E0526C", VA = "0x1E0526C")]
	private void AssignParentPart(BodyPart part, BodyPart parent)
	{
	}

	[Token(Token = "0x6000055")]
	[Address(RVA = "0x1E0201C", Offset = "0x1E0201C", VA = "0x1E0201C")]
	private void SetParentParts()
	{
	}

	[Token(Token = "0x6000056")]
	[Address(RVA = "0x1E02454", Offset = "0x1E02454", VA = "0x1E02454")]
	private void SetDefaultShapeTypes()
	{
	}

	[Token(Token = "0x6000057")]
	[Address(RVA = "0x1E02758", Offset = "0x1E02758", VA = "0x1E02758")]
	private void SetDefaultCapsuleDirections()
	{
	}

	[Token(Token = "0x6000058")]
	[Address(RVA = "0x1E05444", Offset = "0x1E05444", VA = "0x1E05444")]
	private void SetDefaultHeadColliderShapeSizeAndCenter(float characterHeight)
	{
	}

	[Token(Token = "0x6000059")]
	[Address(RVA = "0x1E057D4", Offset = "0x1E057D4", VA = "0x1E057D4")]
	private void SetDefaultNeckColliderShapeSizeAndCenter(float characterHeight)
	{
	}

	[Token(Token = "0x600005A")]
	[Address(RVA = "0x1E05C90", Offset = "0x1E05C90", VA = "0x1E05C90")]
	private void SetDefaultSpineColliderShapeSizeAndCenter(float characterHeight)
	{
	}

	[Token(Token = "0x600005B")]
	[Address(RVA = "0x1E06490", Offset = "0x1E06490", VA = "0x1E06490")]
	private void CleanUpSpineColliderOverlap(float characterHeight)
	{
	}

	[Token(Token = "0x600005C")]
	[Address(RVA = "0x1E06730", Offset = "0x1E06730", VA = "0x1E06730")]
	private float ComputeSphereColliderOverlap(BodyPart p1, BodyPart p2)
	{
		return default(float);
	}

	[Token(Token = "0x600005D")]
	[Address(RVA = "0x1E068BC", Offset = "0x1E068BC", VA = "0x1E068BC")]
	private void SetDefaultPelvisColliderShapeSizeAndCenter(float characterHeight)
	{
	}

	[Token(Token = "0x600005E")]
	[Address(RVA = "0x1E06A48", Offset = "0x1E06A48", VA = "0x1E06A48")]
	private void SetDefaultLegColliderShapeSizeAndCenter(BodyPart hip, BodyPart lowerLeg, BodyPart foot, BodyPart toe, float characterHeight)
	{
	}

	[Token(Token = "0x600005F")]
	[Address(RVA = "0x1E07430", Offset = "0x1E07430", VA = "0x1E07430")]
	private void SetDefaultArmColliderShapeSizeAndCenter(BodyPart collarBone, BodyPart upperArm, BodyPart forearm, BodyPart hand, float characterHeight)
	{
	}

	[Token(Token = "0x6000060")]
	[Address(RVA = "0x1E07E60", Offset = "0x1E07E60", VA = "0x1E07E60")]
	public float GetHeightEstimate()
	{
		return default(float);
	}

	[Token(Token = "0x6000061")]
	[Address(RVA = "0x1E044A4", Offset = "0x1E044A4", VA = "0x1E044A4")]
	private void SetDefaultColliderSizeAndCenter()
	{
	}

	[Token(Token = "0x6000062")]
	[Address(RVA = "0x1E02A30", Offset = "0x1E02A30", VA = "0x1E02A30")]
	private void StoreInitialRotations()
	{
	}

	[Token(Token = "0x6000063")]
	[Address(RVA = "0x1E02AB4", Offset = "0x1E02AB4", VA = "0x1E02AB4")]
	private void SetDefaultJointAxes(AxisAlignmentMode alignMode)
	{
	}

	[Token(Token = "0x6000064")]
	[Address(RVA = "0x1E0871C", Offset = "0x1E0871C", VA = "0x1E0871C")]
	private void SetBodyPartDefaultJointLimits(BodyPart part, DefaultJointLimitsAttribute jointLimits)
	{
	}

	[Token(Token = "0x6000065")]
	[Address(RVA = "0x1E0881C", Offset = "0x1E0881C", VA = "0x1E0881C")]
	private void SetBodyPartChainDefaultJointLimits(BodyPartChain chain, DefaultJointLimitsAttribute jointLimits)
	{
	}

	[Token(Token = "0x6000066")]
	[Address(RVA = "0x1E0405C", Offset = "0x1E0405C", VA = "0x1E0405C")]
	private void SetDefaultJointLimits()
	{
	}

	[Token(Token = "0x6000067")]
	[Address(RVA = "0x1DFF1FC", Offset = "0x1DFF1FC", VA = "0x1DFF1FC")]
	public void DistributeMass()
	{
	}

	[Token(Token = "0x6000068")]
	[Address(RVA = "0x1E08CDC", Offset = "0x1E08CDC", VA = "0x1E08CDC")]
	private void AssignMassToPartOrChain(FieldInfo field)
	{
	}

	[Token(Token = "0x6000069")]
	[Address(RVA = "0x1E09000", Offset = "0x1E09000", VA = "0x1E09000")]
	private void AssignCenterOfMassToPartOrChain(FieldInfo field)
	{
	}

	[Token(Token = "0x600006A")]
	[Address(RVA = "0x1E096B4", Offset = "0x1E096B4", VA = "0x1E096B4")]
	public void FindBodyPartsUsingAvatarDefinition()
	{
	}

	[Token(Token = "0x600006B")]
	[Address(RVA = "0x1E09B24", Offset = "0x1E09B24", VA = "0x1E09B24")]
	private BodyPart GetBodyPartOnHumanBone(HumanBodyBones bone)
	{
		return null;
	}

	[Token(Token = "0x600006C")]
	[Address(RVA = "0x1E09B64", Offset = "0x1E09B64", VA = "0x1E09B64")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600006D")]
	[Address(RVA = "0x1E09D10", Offset = "0x1E09D10", VA = "0x1E09D10")]
	public void RestorePoseToSnapshot()
	{
	}

	[Token(Token = "0x600006E")]
	[Address(RVA = "0x1E0A084", Offset = "0x1E0A084", VA = "0x1E0A084")]
	public void SetRagdollPhysicalProperties(float resistance, float maxForce)
	{
	}

	[Token(Token = "0x600006F")]
	[Address(RVA = "0x1E0A190", Offset = "0x1E0A190", VA = "0x1E0A190")]
	public void EnableRagdoll()
	{
	}

	[Token(Token = "0x6000070")]
	[Address(RVA = "0x1E0A6CC", Offset = "0x1E0A6CC", VA = "0x1E0A6CC")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xB4BD00", Offset = "0xB4BD00")]
	public void EnableRagdoll(float resistance, float maxForce)
	{
	}

	[Token(Token = "0x6000071")]
	[Address(RVA = "0x1E0A1A0", Offset = "0x1E0A1A0", VA = "0x1E0A1A0")]
	private void EnableRagdoll(float resistance = 15f, float maxForce = 85f, bool overridePhysicalProperties = false)
	{
	}

	[Token(Token = "0x6000072")]
	[Address(RVA = "0x1E0AD74", Offset = "0x1E0AD74", VA = "0x1E0AD74")]
	private BodyPart GetCorrespondingPart(BodyPart sourcePart, List<Transform> sourceHierarchy, List<Transform> duplicateHierarchy, int indexOffset)
	{
		return null;
	}

	[Token(Token = "0x6000073")]
	[Address(RVA = "0x1E0AE90", Offset = "0x1E0AE90", VA = "0x1E0AE90")]
	private BodyPartChain GetCorrespondingChain(BodyPartChain sourceChain, List<Transform> sourceHierarchy, List<Transform> duplicateHierarchy, int indexOffset)
	{
		return null;
	}

	[Token(Token = "0x6000074")]
	[Address(RVA = "0x1E0A6EC", Offset = "0x1E0A6EC", VA = "0x1E0A6EC")]
	private Biped SetUpBipedOnDuplicateHierarchy(List<Transform> sourceHierarchy, List<Transform> duplicateHierarchy)
	{
		return null;
	}

	[Token(Token = "0x6000075")]
	[Address(RVA = "0x1E0B214", Offset = "0x1E0B214", VA = "0x1E0B214")]
	public void DisableRagdoll(DisableRagdollMode disableMode = DisableRagdollMode.Normal)
	{
	}

	[Token(Token = "0x6000076")]
	[Address(RVA = "0x1E0B258", Offset = "0x1E0B258", VA = "0x1E0B258")]
	public void DisableRagdoll(RemoveRagdollMode removeMode, DisableRagdollMode disableMode = DisableRagdollMode.Normal)
	{
	}

	[Token(Token = "0x6000077")]
	[Address(RVA = "0x1E0BBB8", Offset = "0x1E0BBB8", VA = "0x1E0BBB8")]
	public void GetUp(float crossFadeTime = 1f, string nextAnimation = "")
	{
	}

	[Token(Token = "0x6000078")]
	[Address(RVA = "0x1E0BD74", Offset = "0x1E0BD74", VA = "0x1E0BD74")]
	public void GetUp(string nextAnimation)
	{
	}

	[Token(Token = "0x6000079")]
	[Address(RVA = "0x1E0BCAC", Offset = "0x1E0BCAC", VA = "0x1E0BCAC")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB4BD38", Offset = "0xB4BD38")]
	public IEnumerator GetUp(float crossFadeTime, float energyLevel, string nextAnimation = "")
	{
		return null;
	}

	[Token(Token = "0x600007A")]
	[Address(RVA = "0x1E0BDA8", Offset = "0x1E0BDA8", VA = "0x1E0BDA8")]
	private static void GetNewRootPositionAndOrientationForGetUp(Biped biped, Vector3 raycastFrom, out Vector3 newPosition, out Quaternion newOrientation)
	{
	}

	[Token(Token = "0x600007B")]
	[Address(RVA = "0x1E0C0A0", Offset = "0x1E0C0A0", VA = "0x1E0C0A0")]
	private static Vector3 GetFeetMidpoint(Biped biped)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600007C")]
	[Address(RVA = "0x1E0C270", Offset = "0x1E0C270", VA = "0x1E0C270")]
	private GetUpAnimation SelectBestGetUpAnimation(float energyLevel)
	{
		return null;
	}

	[Token(Token = "0x600007D")]
	[Address(RVA = "0x1E0C458", Offset = "0x1E0C458", VA = "0x1E0C458")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB4BD9C", Offset = "0xB4BD9C")]
	private IEnumerator GetUpWithAnimation(float crossFadeTime, float energyLevel, string nextAnimation)
	{
		return null;
	}

	[Token(Token = "0x600007E")]
	[Address(RVA = "0x1E0C54C", Offset = "0x1E0C54C", VA = "0x1E0C54C")]
	public Vector3 GetCharacterPelvisForwardDirection()
	{
		return default(Vector3);
	}

	[Token(Token = "0x600007F")]
	[Address(RVA = "0x1E0C1BC", Offset = "0x1E0C1BC", VA = "0x1E0C1BC")]
	public LyingOrientation GetCharacterLyingOrientation()
	{
		return default(LyingOrientation);
	}

	[Token(Token = "0x6000080")]
	[Address(RVA = "0x1E0C97C", Offset = "0x1E0C97C", VA = "0x1E0C97C")]
	private void SetAnimatorGetUpParameters(float energyLevel, LyingOrientation lyingOrientation)
	{
	}

	[Token(Token = "0x6000081")]
	[Address(RVA = "0x1E0CAE0", Offset = "0x1E0CAE0", VA = "0x1E0CAE0")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB4BE00", Offset = "0xB4BE00")]
	private IEnumerator GetUpWithAnimator(float crossFadeTime, float energyLevel, DisableRagdollMode disableMode = DisableRagdollMode.Normal)
	{
		return null;
	}

	[Token(Token = "0x6000082")]
	[Address(RVA = "0x1E0CBB8", Offset = "0x1E0CBB8", VA = "0x1E0CBB8")]
	public Biped()
	{
	}
}
[Serializable]
[Token(Token = "0x2000017")]
public class BipedNamingConvention
{
	[Token(Token = "0x20002A5")]
	public enum DCCApplication
	{
		[Token(Token = "0x4000D7D")]
		Max,
		[Token(Token = "0x4000D7E")]
		Maya,
		[Token(Token = "0x4000D7F")]
		HumanIK,
		[Token(Token = "0x4000D80")]
		Custom
	}

	[Token(Token = "0x400003F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string characterNamePrefix;

	[Token(Token = "0x4000040")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string centerPrefix;

	[Token(Token = "0x4000041")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string leftPrefix;

	[Token(Token = "0x4000042")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string rightPrefix;

	[Token(Token = "0x4000043")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public string head;

	[Token(Token = "0x4000044")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public string neck;

	[Token(Token = "0x4000045")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public string spine;

	[Token(Token = "0x4000046")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public string pelvis;

	[Token(Token = "0x4000047")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public string upperLeg;

	[Token(Token = "0x4000048")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public string lowerLeg;

	[Token(Token = "0x4000049")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public string foot;

	[Token(Token = "0x400004A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public string toe;

	[Token(Token = "0x400004B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public string collar;

	[Token(Token = "0x400004C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public string upperArm;

	[Token(Token = "0x400004D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public string forearm;

	[Token(Token = "0x400004E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public string hand;

	[Token(Token = "0x1700000C")]
	public string expectedHeadName
	{
		[Token(Token = "0x6000084")]
		[Address(RVA = "0x1E00F38", Offset = "0x1E00F38", VA = "0x1E00F38")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700000D")]
	public string expectedNeckName
	{
		[Token(Token = "0x6000085")]
		[Address(RVA = "0x1E00F7C", Offset = "0x1E00F7C", VA = "0x1E00F7C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700000E")]
	public string expectedSpineName
	{
		[Token(Token = "0x6000086")]
		[Address(RVA = "0x1E0156C", Offset = "0x1E0156C", VA = "0x1E0156C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700000F")]
	public string expectedPelvisName
	{
		[Token(Token = "0x6000087")]
		[Address(RVA = "0x1E00844", Offset = "0x1E00844", VA = "0x1E00844")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000010")]
	public string expectedLeftUpperLegName
	{
		[Token(Token = "0x6000088")]
		[Address(RVA = "0x1E01598", Offset = "0x1E01598", VA = "0x1E01598")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000011")]
	public string expectedLeftLowerLegName
	{
		[Token(Token = "0x6000089")]
		[Address(RVA = "0x1E015AC", Offset = "0x1E015AC", VA = "0x1E015AC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000012")]
	public string expectedLeftFootName
	{
		[Token(Token = "0x600008A")]
		[Address(RVA = "0x1E015C0", Offset = "0x1E015C0", VA = "0x1E015C0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000013")]
	public string expectedLeftToeName
	{
		[Token(Token = "0x600008B")]
		[Address(RVA = "0x1E015D4", Offset = "0x1E015D4", VA = "0x1E015D4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000014")]
	public string expectedRightUpperLegName
	{
		[Token(Token = "0x600008C")]
		[Address(RVA = "0x1E015E8", Offset = "0x1E015E8", VA = "0x1E015E8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000015")]
	public string expectedRightLowerLegName
	{
		[Token(Token = "0x600008D")]
		[Address(RVA = "0x1E015FC", Offset = "0x1E015FC", VA = "0x1E015FC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000016")]
	public string expectedRightFootName
	{
		[Token(Token = "0x600008E")]
		[Address(RVA = "0x1E01610", Offset = "0x1E01610", VA = "0x1E01610")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000017")]
	public string expectedRightToeName
	{
		[Token(Token = "0x600008F")]
		[Address(RVA = "0x1E01624", Offset = "0x1E01624", VA = "0x1E01624")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000018")]
	public string expectedLeftCollarName
	{
		[Token(Token = "0x6000090")]
		[Address(RVA = "0x1E01638", Offset = "0x1E01638", VA = "0x1E01638")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000019")]
	public string expectedLeftUpperArmName
	{
		[Token(Token = "0x6000091")]
		[Address(RVA = "0x1E0164C", Offset = "0x1E0164C", VA = "0x1E0164C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700001A")]
	public string expectedLeftForearmName
	{
		[Token(Token = "0x6000092")]
		[Address(RVA = "0x1E01660", Offset = "0x1E01660", VA = "0x1E01660")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700001B")]
	public string expectedLeftHandName
	{
		[Token(Token = "0x6000093")]
		[Address(RVA = "0x1E01674", Offset = "0x1E01674", VA = "0x1E01674")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700001C")]
	public string expectedRightCollarName
	{
		[Token(Token = "0x6000094")]
		[Address(RVA = "0x1E01688", Offset = "0x1E01688", VA = "0x1E01688")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700001D")]
	public string expectedRightUpperArmName
	{
		[Token(Token = "0x6000095")]
		[Address(RVA = "0x1E0169C", Offset = "0x1E0169C", VA = "0x1E0169C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700001E")]
	public string expectedRightForearmName
	{
		[Token(Token = "0x6000096")]
		[Address(RVA = "0x1E016B0", Offset = "0x1E016B0", VA = "0x1E016B0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700001F")]
	public string expectedRightHandName
	{
		[Token(Token = "0x6000097")]
		[Address(RVA = "0x1E016C4", Offset = "0x1E016C4", VA = "0x1E016C4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000098")]
	[Address(RVA = "0x1E0E0A4", Offset = "0x1E0E0A4", VA = "0x1E0E0A4", Slot = "4")]
	protected virtual string GetExpectedName(string sidePrefix, string partName)
	{
		return null;
	}

	[Token(Token = "0x6000099")]
	[Address(RVA = "0x1E00538", Offset = "0x1E00538", VA = "0x1E00538")]
	public static BipedNamingConvention Max(Biped biped)
	{
		return null;
	}

	[Token(Token = "0x600009A")]
	[Address(RVA = "0x1E0E480", Offset = "0x1E0E480", VA = "0x1E0E480")]
	public static BipedNamingConvention Max(string characterNamePrefix)
	{
		return null;
	}

	[Token(Token = "0x600009B")]
	[Address(RVA = "0x1E0E8B0", Offset = "0x1E0E8B0", VA = "0x1E0E8B0")]
	public static BipedNamingConvention Maya(Biped biped)
	{
		return null;
	}

	[Token(Token = "0x600009C")]
	[Address(RVA = "0x1E0054C", Offset = "0x1E0054C", VA = "0x1E0054C")]
	public static BipedNamingConvention Maya(string characterNamePrefix = "")
	{
		return null;
	}

	[Token(Token = "0x600009D")]
	[Address(RVA = "0x1E0E8C4", Offset = "0x1E0E8C4", VA = "0x1E0E8C4")]
	public static BipedNamingConvention HumanIK(Biped biped)
	{
		return null;
	}

	[Token(Token = "0x600009E")]
	[Address(RVA = "0x1E00240", Offset = "0x1E00240", VA = "0x1E00240")]
	public static BipedNamingConvention HumanIK(string characterNamePrefix = "")
	{
		return null;
	}

	[Token(Token = "0x600009F")]
	[Address(RVA = "0x1E0E8D8", Offset = "0x1E0E8D8", VA = "0x1E0E8D8")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xB4BE64", Offset = "0xB4BE64")]
	public static string GetCharacterNamePrefixOn3DSMaxBiped(Biped biped)
	{
		return null;
	}

	[Token(Token = "0x60000A0")]
	[Address(RVA = "0x1E0E110", Offset = "0x1E0E110", VA = "0x1E0E110")]
	public static string GetCharacterNamePrefix(Biped biped)
	{
		return null;
	}

	[Token(Token = "0x60000A1")]
	[Address(RVA = "0x1E0E8DC", Offset = "0x1E0E8DC", VA = "0x1E0E8DC")]
	public BipedNamingConvention Clone()
	{
		return null;
	}

	[Token(Token = "0x60000A2")]
	[Address(RVA = "0x1E0E778", Offset = "0x1E0E778", VA = "0x1E0E778")]
	public BipedNamingConvention()
	{
	}
}
[Token(Token = "0x2000018")]
public enum CapsuleDirection
{
	[Token(Token = "0x4000050")]
	X,
	[Token(Token = "0x4000051")]
	Y,
	[Token(Token = "0x4000052")]
	Z
}
[Token(Token = "0x2000019")]
public enum DisableRagdollMode
{
	[Token(Token = "0x4000054")]
	Normal,
	[Token(Token = "0x4000055")]
	Kill
}
[Token(Token = "0x200001A")]
public enum EnableRagdollMode
{
	[Token(Token = "0x4000057")]
	Normal,
	[Token(Token = "0x4000058")]
	Duplicate
}
[Token(Token = "0x200001B")]
public enum RemoveRagdollMode
{
	[Token(Token = "0x400005A")]
	RemoveCollidersAndRigidbodies,
	[Token(Token = "0x400005B")]
	RetainColliders,
	[Token(Token = "0x400005C")]
	RetainCollidersAndRigidbodies
}
[Token(Token = "0x200001C")]
public enum RigidbodyMode
{
	[Token(Token = "0x400005E")]
	NotKinematic,
	[Token(Token = "0x400005F")]
	Kinematic
}
[Token(Token = "0x200001D")]
public enum SymmetryMode
{
	[Token(Token = "0x4000061")]
	Normal,
	[Token(Token = "0x4000062")]
	MatchScale
}
[Token(Token = "0x200001E")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB46D4C", Offset = "0xB46D4C")]
public class BodyPart : MonoBehaviour
{
	[Token(Token = "0x4000063")]
	public const string ragdollDuplicateSuffix = " (Ragdoll Duplicate)";

	[Token(Token = "0x4000064")]
	public const float minimumMass = 0.05f;

	[Token(Token = "0x4000065")]
	public const float defaultMaxResistance = 15f;

	[Token(Token = "0x4000066")]
	public const float defaultMaxForce = 85f;

	[Token(Token = "0x4000067")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static FieldInfo[] fieldsToCopy;

	[Token(Token = "0x4000068")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static PropertyInfo[] propertiesToCopy;

	[Token(Token = "0x4000069")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Transform m_bone;

	[Token(Token = "0x400006A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Quaternion m_initialRotation;

	[Token(Token = "0x400006B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Vector3 positionSnapshot;

	[Token(Token = "0x400006C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private Quaternion rotationSnapshot;

	[Token(Token = "0x400006D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float mass;

	[Token(Token = "0x400006E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool isCenterOfMassManual;

	[Token(Token = "0x400006F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[SerializeField]
	private Vector3 m_centerOfMass;

	[Token(Token = "0x4000070")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public bool isRigidbody;

	[Token(Token = "0x4000071")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public ShapeType shapeType;

	[Token(Token = "0x4000072")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public CapsuleDirection capsuleDirection;

	[Token(Token = "0x4000073")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public Vector3 shapeCenter;

	[Token(Token = "0x4000074")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Vector3 shapeSize;

	[Token(Token = "0x4000075")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public Quaternion shapeRotation;

	[Token(Token = "0x4000076")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	public bool isCollider;

	[Token(Token = "0x4000077")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4ACC0", Offset = "0xB4ACC0")]
	private Collider <generatedCollider>k__BackingField;

	[Token(Token = "0x4000078")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private MimicBodyPart m_mimic;

	[Token(Token = "0x4000079")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4ACD0", Offset = "0xB4ACD0")]
	private BodyPart <ragdoll>k__BackingField;

	[Token(Token = "0x400007A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[SerializeField]
	private float m_resistance;

	[Token(Token = "0x400007B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	[SerializeField]
	private float m_maxForce;

	[Token(Token = "0x400007C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4AD00", Offset = "0xB4AD00")]
	private CharacterJoint <joint>k__BackingField;

	[Token(Token = "0x400007D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public Vector3 jointAxis;

	[Token(Token = "0x400007E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	public Vector3 jointSecondaryAxis;

	[Token(Token = "0x400007F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public float xMin;

	[Token(Token = "0x4000080")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	public float xMax;

	[Token(Token = "0x4000081")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public float yMax;

	[Token(Token = "0x4000082")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	public float zMax;

	[Token(Token = "0x4000083")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public BodyPart parentPart;

	[Token(Token = "0x4000084")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public BodyPart oppositePart;

	[Token(Token = "0x4000085")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public Vector3 oppositeRight;

	[Token(Token = "0x4000086")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	public Vector3 oppositeUp;

	[Token(Token = "0x4000087")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public Vector3 oppositeForward;

	[Token(Token = "0x17000020")]
	public Transform bone
	{
		[Token(Token = "0x60000A3")]
		[Address(RVA = "0x1E047F4", Offset = "0x1E047F4", VA = "0x1E047F4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000021")]
	public Quaternion parentRotation
	{
		[Token(Token = "0x60000A4")]
		[Address(RVA = "0x1E0F23C", Offset = "0x1E0F23C", VA = "0x1E0F23C")]
		get
		{
			return default(Quaternion);
		}
	}

	[Token(Token = "0x17000022")]
	public Quaternion initialRotation
	{
		[Token(Token = "0x60000A5")]
		[Address(RVA = "0x1E0F33C", Offset = "0x1E0F33C", VA = "0x1E0F33C")]
		get
		{
			return default(Quaternion);
		}
	}

	[Token(Token = "0x17000023")]
	public Vector3 centerOfMass
	{
		[Token(Token = "0x60000A6")]
		[Address(RVA = "0x1E0F39C", Offset = "0x1E0F39C", VA = "0x1E0F39C")]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x60000A7")]
		[Address(RVA = "0x1E04B0C", Offset = "0x1E04B0C", VA = "0x1E04B0C")]
		set
		{
		}
	}

	[Token(Token = "0x17000024")]
	public bool isRagdoll
	{
		[Token(Token = "0x60000A8")]
		[Address(RVA = "0x1E0F430", Offset = "0x1E0F430", VA = "0x1E0F430")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000025")]
	public Collider generatedCollider
	{
		[Token(Token = "0x60000A9")]
		[Address(RVA = "0x1E0BBB0", Offset = "0x1E0BBB0", VA = "0x1E0BBB0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4BE9C", Offset = "0xB4BE9C")]
		get
		{
			return null;
		}
		[Token(Token = "0x60000AA")]
		[Address(RVA = "0x1E0F4A8", Offset = "0x1E0F4A8", VA = "0x1E0F4A8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4BEAC", Offset = "0xB4BEAC")]
		private set
		{
		}
	}

	[Token(Token = "0x17000026")]
	public MimicBodyPart mimic
	{
		[Token(Token = "0x60000AB")]
		[Address(RVA = "0x1E046D8", Offset = "0x1E046D8", VA = "0x1E046D8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000027")]
	public BodyPart ragdoll
	{
		[Token(Token = "0x60000AC")]
		[Address(RVA = "0x1E0F4A0", Offset = "0x1E0F4A0", VA = "0x1E0F4A0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4BEBC", Offset = "0xB4BEBC")]
		get
		{
			return null;
		}
		[Token(Token = "0x60000AD")]
		[Address(RVA = "0x1E0F4B0", Offset = "0x1E0F4B0", VA = "0x1E0F4B0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4BECC", Offset = "0xB4BECC")]
		private set
		{
		}
	}

	[Token(Token = "0x17000028")]
	public bool canRagdollBeDisabledOnSelf
	{
		[Token(Token = "0x60000AE")]
		[Address(RVA = "0x1E0F4B8", Offset = "0x1E0F4B8", VA = "0x1E0F4B8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000029")]
	public BodyPart topMostRagdollParent
	{
		[Token(Token = "0x60000AF")]
		[Address(RVA = "0x1E0F56C", Offset = "0x1E0F56C", VA = "0x1E0F56C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700002A")]
	public float resistance
	{
		[Token(Token = "0x60000B0")]
		[Address(RVA = "0x1E0F5C4", Offset = "0x1E0F5C4", VA = "0x1E0F5C4")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60000B1")]
		[Address(RVA = "0x1E0F5CC", Offset = "0x1E0F5CC", VA = "0x1E0F5CC")]
		set
		{
		}
	}

	[Token(Token = "0x1700002B")]
	public float maxForce
	{
		[Token(Token = "0x60000B2")]
		[Address(RVA = "0x1E0F600", Offset = "0x1E0F600", VA = "0x1E0F600")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60000B3")]
		[Address(RVA = "0x1E0F608", Offset = "0x1E0F608", VA = "0x1E0F608")]
		set
		{
		}
	}

	[Token(Token = "0x1700002C")]
	public CharacterJoint joint
	{
		[Token(Token = "0x60000B4")]
		[Address(RVA = "0x1E0F63C", Offset = "0x1E0F63C", VA = "0x1E0F63C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4BEDC", Offset = "0xB4BEDC")]
		get
		{
			return null;
		}
		[Token(Token = "0x60000B5")]
		[Address(RVA = "0x1E0F644", Offset = "0x1E0F644", VA = "0x1E0F644")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4BEEC", Offset = "0xB4BEEC")]
		private set
		{
		}
	}

	[Token(Token = "0x1700002D")]
	public Quaternion jointFrameOffset
	{
		[Token(Token = "0x60000B6")]
		[Address(RVA = "0x1E0F64C", Offset = "0x1E0F64C", VA = "0x1E0F64C")]
		get
		{
			return default(Quaternion);
		}
	}

	[Token(Token = "0x60000B7")]
	[Address(RVA = "0x1E0F6EC", Offset = "0x1E0F6EC", VA = "0x1E0F6EC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000B8")]
	[Address(RVA = "0x1E0F898", Offset = "0x1E0F898", VA = "0x1E0F898")]
	public JointAngularLimits GetJointAngularLimits()
	{
		return null;
	}

	[Token(Token = "0x60000B9")]
	[Address(RVA = "0x1E0F970", Offset = "0x1E0F970", VA = "0x1E0F970")]
	public void SetJointAngularLimits(JointAngularLimits limits)
	{
	}

	[Token(Token = "0x60000BA")]
	[Address(RVA = "0x1E0862C", Offset = "0x1E0862C", VA = "0x1E0862C")]
	public void StoreInitialRotation()
	{
	}

	[Token(Token = "0x60000BB")]
	[Address(RVA = "0x1E0F9FC", Offset = "0x1E0F9FC", VA = "0x1E0F9FC")]
	public void StoreInitialRotation(Quaternion localRotation)
	{
	}

	[Token(Token = "0x60000BC")]
	[Address(RVA = "0x1E0F7D8", Offset = "0x1E0F7D8", VA = "0x1E0F7D8")]
	public void StoreRotationSnapshot()
	{
	}

	[Token(Token = "0x60000BD")]
	[Address(RVA = "0x1E09F94", Offset = "0x1E09F94", VA = "0x1E09F94")]
	public void ResetToRotationSnapshot()
	{
	}

	[Token(Token = "0x60000BE")]
	[Address(RVA = "0x1E0F718", Offset = "0x1E0F718", VA = "0x1E0F718")]
	public void StorePositionSnapshot()
	{
	}

	[Token(Token = "0x60000BF")]
	[Address(RVA = "0x1E09EAC", Offset = "0x1E09EAC", VA = "0x1E09EAC")]
	public void ResetToPositionSnapshot()
	{
	}

	[Token(Token = "0x60000C0")]
	[Address(RVA = "0x1E0FA08", Offset = "0x1E0FA08", VA = "0x1E0FA08")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xB4BEFC", Offset = "0xB4BEFC")]
	public void FindParentPart()
	{
	}

	[Token(Token = "0x60000C1")]
	[Address(RVA = "0x1E05B30", Offset = "0x1E05B30", VA = "0x1E05B30")]
	public void SetParentShapeCenter()
	{
	}

	[Token(Token = "0x60000C2")]
	[Address(RVA = "0x1E0866C", Offset = "0x1E0866C", VA = "0x1E0866C")]
	public void SetJointAxesFromWorldVectors(Vector3 axis, Vector3 secondaryAxis)
	{
	}

	[Token(Token = "0x60000C3")]
	[Address(RVA = "0x1E0FB24", Offset = "0x1E0FB24", VA = "0x1E0FB24")]
	public void FlipCapsule(CapsuleDirection toDirection)
	{
	}

	[Token(Token = "0x60000C4")]
	[Address(RVA = "0x1E07404", Offset = "0x1E07404", VA = "0x1E07404")]
	public void SetCapsuleLength(float length)
	{
	}

	[Token(Token = "0x60000C5")]
	[Address(RVA = "0x1E04B68", Offset = "0x1E04B68", VA = "0x1E04B68")]
	public void MatchTo(BodyPart other, AxisAlignmentMode alignMode)
	{
	}

	[Token(Token = "0x60000C6")]
	[Address(RVA = "0x1E0FBC8", Offset = "0x1E0FBC8", VA = "0x1E0FBC8")]
	public Quaternion TransformRotationToOpposite(Quaternion q)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x60000C7")]
	[Address(RVA = "0x1E0FD28", Offset = "0x1E0FD28", VA = "0x1E0FD28")]
	public Vector3 TransformPointToOpposite(Vector3 p, SymmetryMode scaleMode)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60000C8")]
	[Address(RVA = "0x1E10018", Offset = "0x1E10018", VA = "0x1E10018")]
	public void PasteShapeSizeToOpposite(SymmetryMode scaleMode)
	{
	}

	[Token(Token = "0x60000C9")]
	[Address(RVA = "0x1E10260", Offset = "0x1E10260", VA = "0x1E10260")]
	public static void CopyBodyPartComponentsInHierarchy(List<Transform> sourceHierarchy, List<Transform> destinationHierarchy)
	{
	}

	[Token(Token = "0x60000CA")]
	[Address(RVA = "0x1E10438", Offset = "0x1E10438", VA = "0x1E10438")]
	private static BodyPart CreateDuplicateBodyPart(BodyPart source, GameObject destinationGameObject)
	{
		return null;
	}

	[Token(Token = "0x60000CB")]
	[Address(RVA = "0x1E10708", Offset = "0x1E10708", VA = "0x1E10708")]
	private static BodyPart CopyBodyPartFieldValue(BodyPart sourceFieldValue, List<Transform> sourceHierarchy, List<Transform> destinationHierarchy)
	{
		return null;
	}

	[Token(Token = "0x60000CC")]
	[Address(RVA = "0x1E108D4", Offset = "0x1E108D4", VA = "0x1E108D4")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60000CD")]
	[Address(RVA = "0x1E0AD0C", Offset = "0x1E0AD0C", VA = "0x1E0AD0C")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xB4BF34", Offset = "0xB4BF34")]
	public BodyPart[] EnableRagdoll(float resistance, float maxForce, EnableRagdollMode ragdollMode = EnableRagdollMode.Duplicate)
	{
		return null;
	}

	[Token(Token = "0x60000CE")]
	[Address(RVA = "0x1E0AD3C", Offset = "0x1E0AD3C", VA = "0x1E0AD3C")]
	public BodyPart[] EnableRagdoll(EnableRagdollMode ragdollMode = EnableRagdollMode.Duplicate)
	{
		return null;
	}

	[Token(Token = "0x60000CF")]
	[Address(RVA = "0x1E0A6D4", Offset = "0x1E0A6D4", VA = "0x1E0A6D4")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xB4BF6C", Offset = "0xB4BF6C")]
	public BodyPart[] EnableRagdoll(out List<Transform> ragdollHierarchy, float resistance = 15f, float maxForce = 85f, EnableRagdollMode ragdollMode = EnableRagdollMode.Duplicate)
	{
		return null;
	}

	[Token(Token = "0x60000D0")]
	[Address(RVA = "0x1E0A6DC", Offset = "0x1E0A6DC", VA = "0x1E0A6DC")]
	public BodyPart[] EnableRagdoll(out List<Transform> ragdollHierarchy, EnableRagdollMode ragdollMode = EnableRagdollMode.Duplicate)
	{
		return null;
	}

	[Token(Token = "0x60000D1")]
	[Address(RVA = "0x1E109D8", Offset = "0x1E109D8", VA = "0x1E109D8")]
	private BodyPart[] EnableRagdoll(out List<Transform> ragdollHierarchy, float resistance = 15f, float maxForce = 85f, EnableRagdollMode ragdollMode = EnableRagdollMode.Duplicate, bool overridePhysicalProperties = false)
	{
		return null;
	}

	[Token(Token = "0x60000D2")]
	[Address(RVA = "0x1E1161C", Offset = "0x1E1161C", VA = "0x1E1161C")]
	private static void StopRigidbody(Rigidbody rigidbody)
	{
	}

	[Token(Token = "0x60000D3")]
	[Address(RVA = "0x1DFFA70", Offset = "0x1DFFA70", VA = "0x1DFFA70")]
	public void ConnectToParent()
	{
	}

	[Token(Token = "0x60000D4")]
	[Address(RVA = "0x1E0B790", Offset = "0x1E0B790", VA = "0x1E0B790")]
	public bool DisableRagdoll(RemoveRagdollMode removeMode)
	{
		return default(bool);
	}

	[Token(Token = "0x60000D5")]
	[Address(RVA = "0x1E11030", Offset = "0x1E11030", VA = "0x1E11030")]
	private void DestroyRagdollDuplicate(BodyPart[] hierarchy)
	{
	}

	[Token(Token = "0x60000D6")]
	[Address(RVA = "0x1E0A188", Offset = "0x1E0A188", VA = "0x1E0A188")]
	public void SetRagdollPhysicalProperties(float resistance, float maxForce)
	{
	}

	[Token(Token = "0x60000D7")]
	[Address(RVA = "0x1E11708", Offset = "0x1E11708", VA = "0x1E11708")]
	private GameObject GetGameObjectForCollider()
	{
		return null;
	}

	[Token(Token = "0x60000D8")]
	[Address(RVA = "0x1E112D0", Offset = "0x1E112D0", VA = "0x1E112D0")]
	public void AddCollider(RigidbodyMode rigidbodyMode = RigidbodyMode.Kinematic)
	{
	}

	[Token(Token = "0x60000D9")]
	[Address(RVA = "0x1E119B4", Offset = "0x1E119B4", VA = "0x1E119B4")]
	private void AddBoxCollider(GameObject colliderHolder)
	{
	}

	[Token(Token = "0x60000DA")]
	[Address(RVA = "0x1E11B14", Offset = "0x1E11B14", VA = "0x1E11B14")]
	private void AddCapsuleCollider(GameObject colliderHolder)
	{
	}

	[Token(Token = "0x60000DB")]
	[Address(RVA = "0x1E11D7C", Offset = "0x1E11D7C", VA = "0x1E11D7C")]
	private void AddSphereCollider(GameObject colliderHolder)
	{
	}

	[Token(Token = "0x60000DC")]
	[Address(RVA = "0x1DFF940", Offset = "0x1DFF940", VA = "0x1DFF940")]
	public void RemoveCollider()
	{
	}

	[Token(Token = "0x60000DD")]
	[Address(RVA = "0x1E11F88", Offset = "0x1E11F88", VA = "0x1E11F88")]
	public BodyPart()
	{
	}
}
[Serializable]
[Token(Token = "0x200001F")]
public class BodyPartChain
{
	[Token(Token = "0x4000088")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public BodyPart[] parts;

	[Token(Token = "0x4000089")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public BodyPart terminalJoint;

	[Token(Token = "0x400008A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AngularLimitDistribution angularLimitDistribution;

	[Token(Token = "0x1700002E")]
	public BodyPart lastPart
	{
		[Token(Token = "0x60000DF")]
		[Address(RVA = "0x1E052FC", Offset = "0x1E052FC", VA = "0x1E052FC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700002F")]
	public float length
	{
		[Token(Token = "0x60000E0")]
		[Address(RVA = "0x1E121AC", Offset = "0x1E121AC", VA = "0x1E121AC")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000030")]
	public int Count
	{
		[Token(Token = "0x60000E1")]
		[Address(RVA = "0x1E01580", Offset = "0x1E01580", VA = "0x1E01580")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000031")]
	public bool isValid
	{
		[Token(Token = "0x60000E2")]
		[Address(RVA = "0x1E124DC", Offset = "0x1E124DC", VA = "0x1E124DC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60000E3")]
	[Address(RVA = "0x1E125EC", Offset = "0x1E125EC", VA = "0x1E125EC")]
	public BodyPartChain()
	{
	}

	[Token(Token = "0x60000E4")]
	[Address(RVA = "0x1E0B028", Offset = "0x1E0B028", VA = "0x1E0B028")]
	public BodyPartChain(BodyPart[] parts, BodyPart terminalJoint, AngularLimitDistribution angularLimitDistribution)
	{
	}

	[Token(Token = "0x60000E5")]
	[Address(RVA = "0x1E0CC7C", Offset = "0x1E0CC7C", VA = "0x1E0CC7C")]
	public static BodyPartChain GetDefaultSpineChain()
	{
		return null;
	}

	[Token(Token = "0x60000E6")]
	[Address(RVA = "0x1E0CD18", Offset = "0x1E0CD18", VA = "0x1E0CD18")]
	public static BodyPartChain GetDefaultNeckChain()
	{
		return null;
	}

	[Token(Token = "0x60000E7")]
	[Address(RVA = "0x1E061F0", Offset = "0x1E061F0", VA = "0x1E061F0")]
	public float[] GetChainParameterValues(float parameterOffset)
	{
		return null;
	}

	[Token(Token = "0x60000E8")]
	[Address(RVA = "0x1E08910", Offset = "0x1E08910", VA = "0x1E08910")]
	public void ApplyAngularLimitsToJointChain()
	{
	}

	[Token(Token = "0x60000E9")]
	[Address(RVA = "0x1E092D8", Offset = "0x1E092D8", VA = "0x1E092D8")]
	public void DistributeMassToChainParts(float mass)
	{
	}

	[Token(Token = "0x60000EA")]
	[Address(RVA = "0x1E125F4", Offset = "0x1E125F4", VA = "0x1E125F4")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xB4BFA4", Offset = "0xB4BFA4")]
	public void EnableRagdoll(float resistance = 15f, float maxForce = 85f, EnableRagdollMode ragdollMode = EnableRagdollMode.Duplicate)
	{
	}

	[Token(Token = "0x60000EB")]
	[Address(RVA = "0x1E12680", Offset = "0x1E12680", VA = "0x1E12680")]
	public void EnableRagdoll(EnableRagdollMode ragdollMode = EnableRagdollMode.Duplicate)
	{
	}
}
[Token(Token = "0x2000020")]
public enum LyingOrientation
{
	[Token(Token = "0x400008C")]
	Supine,
	[Token(Token = "0x400008D")]
	Prone
}
[Serializable]
[Token(Token = "0x2000021")]
public class GetUpAnimation
{
	[Token(Token = "0x20002A6")]
	public enum RootLocation
	{
		[Token(Token = "0x4000D82")]
		Feet,
		[Token(Token = "0x4000D83")]
		Pelvis
	}

	[Token(Token = "0x400008E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string name;

	[Token(Token = "0x400008F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationClip clip;

	[Token(Token = "0x4000090")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public RootLocation rootStartLocation;

	[Token(Token = "0x4000091")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float energyLevel;

	[Token(Token = "0x60000EC")]
	[Address(RVA = "0x1E14E04", Offset = "0x1E14E04", VA = "0x1E14E04")]
	public GetUpAnimation()
	{
	}
}
[Token(Token = "0x2000022")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0xB46D84", Offset = "0xB46D84")]
public class MimicBiped : MonoBehaviour
{
	[Token(Token = "0x20002A7")]
	public class MismatchException : Exception
	{
		[Token(Token = "0x60014F8")]
		[Address(RVA = "0x1A34168", Offset = "0x1A34168", VA = "0x1A34168")]
		public MismatchException(string[] mismatches)
		{
		}

		[Token(Token = "0x60014F9")]
		[Address(RVA = "0x1A353DC", Offset = "0x1A353DC", VA = "0x1A353DC")]
		public static string GetErrorMessage(string[] mismatches)
		{
			return null;
		}
	}

	[Token(Token = "0x4000092")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[HideInInspector]
	private Biped m_biped;

	[Token(Token = "0x4000093")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Biped m_target;

	[Token(Token = "0x4000094")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float m_blendWeight;

	[Token(Token = "0x4000095")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private MimicTransformationMode m_pelvisTransformationMode;

	[Token(Token = "0x17000032")]
	public Biped biped
	{
		[Token(Token = "0x60000ED")]
		[Address(RVA = "0x1A336F8", Offset = "0x1A336F8", VA = "0x1A336F8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000033")]
	public Biped target
	{
		[Token(Token = "0x60000EE")]
		[Address(RVA = "0x1A33790", Offset = "0x1A33790", VA = "0x1A33790")]
		get
		{
			return null;
		}
		[Token(Token = "0x60000EF")]
		[Address(RVA = "0x1A33798", Offset = "0x1A33798", VA = "0x1A33798")]
		set
		{
		}
	}

	[Token(Token = "0x17000034")]
	public bool isTargetValid
	{
		[Token(Token = "0x60000F0")]
		[Address(RVA = "0x1A339D4", Offset = "0x1A339D4", VA = "0x1A339D4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000035")]
	public float blendWeight
	{
		[Token(Token = "0x60000F1")]
		[Address(RVA = "0x1A345E8", Offset = "0x1A345E8", VA = "0x1A345E8")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60000F2")]
		[Address(RVA = "0x1A345F0", Offset = "0x1A345F0", VA = "0x1A345F0")]
		set
		{
		}
	}

	[Token(Token = "0x17000036")]
	public MimicTransformationMode pelvisTransformationMode
	{
		[Token(Token = "0x60000F3")]
		[Address(RVA = "0x1A3479C", Offset = "0x1A3479C", VA = "0x1A3479C")]
		get
		{
			return default(MimicTransformationMode);
		}
		[Token(Token = "0x60000F4")]
		[Address(RVA = "0x1A347A4", Offset = "0x1A347A4", VA = "0x1A347A4")]
		set
		{
		}
	}

	[Token(Token = "0x60000F5")]
	[Address(RVA = "0x1A34800", Offset = "0x1A34800", VA = "0x1A34800")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000F6")]
	[Address(RVA = "0x1A34838", Offset = "0x1A34838", VA = "0x1A34838")]
	private void Start()
	{
	}

	[Token(Token = "0x60000F7")]
	[Address(RVA = "0x1A3492C", Offset = "0x1A3492C", VA = "0x1A3492C")]
	public void CopySettingsFrom(MimicBiped other)
	{
	}

	[Token(Token = "0x60000F8")]
	[Address(RVA = "0x1A339F8", Offset = "0x1A339F8", VA = "0x1A339F8")]
	public string[] GetProblems()
	{
		return null;
	}

	[Token(Token = "0x60000F9")]
	[Address(RVA = "0x1A349E0", Offset = "0x1A349E0", VA = "0x1A349E0")]
	private void OnAnimatorIK(int layerIndex)
	{
	}

	[Token(Token = "0x60000FA")]
	[Address(RVA = "0x1A34E38", Offset = "0x1A34E38", VA = "0x1A34E38")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60000FB")]
	[Address(RVA = "0x1A353C8", Offset = "0x1A353C8", VA = "0x1A353C8")]
	public MimicBiped()
	{
	}
}
[Token(Token = "0x2000023")]
public enum MimicPropagationMode
{
	[Token(Token = "0x4000097")]
	Self,
	[Token(Token = "0x4000098")]
	Hierarchy
}
[Token(Token = "0x2000024")]
public enum MimicTransformationMode
{
	[Token(Token = "0x400009A")]
	LocalRotation,
	[Token(Token = "0x400009B")]
	WorldPositionAndRotation
}
[Token(Token = "0x2000025")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0xB46DE8", Offset = "0xB46DE8")]
public class MimicBodyPart : MonoBehaviour
{
	[Token(Token = "0x400009C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[HideInInspector]
	private BodyPart m_bodyPart;

	[Token(Token = "0x400009D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private BodyPart m_target;

	[Token(Token = "0x400009E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float m_blendWeight;

	[Token(Token = "0x400009F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4ADD0", Offset = "0xB4ADD0")]
	private Vector3 <currentMimicTargetPosition>k__BackingField;

	[Token(Token = "0x40000A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4ADE0", Offset = "0xB4ADE0")]
	private Quaternion <currentMimicTargetRotation>k__BackingField;

	[Token(Token = "0x40000A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public MimicTransformationMode transformationMode;

	[Token(Token = "0x17000037")]
	public BodyPart bodyPart
	{
		[Token(Token = "0x60000FC")]
		[Address(RVA = "0x1A354F4", Offset = "0x1A354F4", VA = "0x1A354F4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000038")]
	public BodyPart target
	{
		[Token(Token = "0x60000FD")]
		[Address(RVA = "0x1A3558C", Offset = "0x1A3558C", VA = "0x1A3558C")]
		get
		{
			return null;
		}
		[Token(Token = "0x60000FE")]
		[Address(RVA = "0x1A341F0", Offset = "0x1A341F0", VA = "0x1A341F0")]
		set
		{
		}
	}

	[Token(Token = "0x17000039")]
	public float blendWeight
	{
		[Token(Token = "0x60000FF")]
		[Address(RVA = "0x1A35594", Offset = "0x1A35594", VA = "0x1A35594")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000100")]
		[Address(RVA = "0x1A34720", Offset = "0x1A34720", VA = "0x1A34720")]
		set
		{
		}
	}

	[Token(Token = "0x1700003A")]
	public Vector3 currentMimicTargetPosition
	{
		[Token(Token = "0x6000101")]
		[Address(RVA = "0x1A3559C", Offset = "0x1A3559C", VA = "0x1A3559C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4BFDC", Offset = "0xB4BFDC")]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x6000102")]
		[Address(RVA = "0x1A355A8", Offset = "0x1A355A8", VA = "0x1A355A8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4BFEC", Offset = "0xB4BFEC")]
		private set
		{
		}
	}

	[Token(Token = "0x1700003B")]
	public Quaternion currentMimicTargetRotation
	{
		[Token(Token = "0x6000103")]
		[Address(RVA = "0x1A355B4", Offset = "0x1A355B4", VA = "0x1A355B4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4BFFC", Offset = "0xB4BFFC")]
		get
		{
			return default(Quaternion);
		}
		[Token(Token = "0x6000104")]
		[Address(RVA = "0x1A355C0", Offset = "0x1A355C0", VA = "0x1A355C0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C00C", Offset = "0xB4C00C")]
		private set
		{
		}
	}

	[Token(Token = "0x6000105")]
	[Address(RVA = "0x1A355CC", Offset = "0x1A355CC", VA = "0x1A355CC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000106")]
	[Address(RVA = "0x1A355D4", Offset = "0x1A355D4", VA = "0x1A355D4")]
	public void SetBlendWeight(float weight, MimicPropagationMode mode = MimicPropagationMode.Self)
	{
	}

	[Token(Token = "0x6000107")]
	[Address(RVA = "0x1A356B4", Offset = "0x1A356B4", VA = "0x1A356B4")]
	public void CopySettingsFrom(MimicBodyPart other)
	{
	}

	[Token(Token = "0x6000108")]
	[Address(RVA = "0x1A34908", Offset = "0x1A34908", VA = "0x1A34908")]
	public void ApplyMimicTransformationsNow()
	{
	}

	[Token(Token = "0x6000109")]
	[Address(RVA = "0x1A3511C", Offset = "0x1A3511C", VA = "0x1A3511C")]
	public void ApplyMimicTransformations()
	{
	}

	[Token(Token = "0x600010A")]
	[Address(RVA = "0x1A34ADC", Offset = "0x1A34ADC", VA = "0x1A34ADC")]
	public void ComputeMimicTransformations()
	{
	}

	[Token(Token = "0x600010B")]
	[Address(RVA = "0x1A35760", Offset = "0x1A35760", VA = "0x1A35760")]
	public MimicBodyPart()
	{
	}

	[Token(Token = "0x600010C")]
	[Address(RVA = "0x1A35770", Offset = "0x1A35770", VA = "0x1A35770")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C01C", Offset = "0xB4C01C")]
	private bool <set_target>b__5_0(CollisionBroadcaster item)
	{
		return default(bool);
	}
}
[Token(Token = "0x2000026")]
public enum GUIAnchor
{
	[Token(Token = "0x40000A3")]
	LowerLeft,
	[Token(Token = "0x40000A4")]
	LowerRight,
	[Token(Token = "0x40000A5")]
	TopLeft,
	[Token(Token = "0x40000A6")]
	TopRight
}
[Token(Token = "0x2000027")]
public enum MouseState
{
	[Token(Token = "0x40000A8")]
	None,
	[Token(Token = "0x40000A9")]
	LeftButtonDown,
	[Token(Token = "0x40000AA")]
	LeftButtonHeld,
	[Token(Token = "0x40000AB")]
	RightButtonDown,
	[Token(Token = "0x40000AC")]
	RightButtonHeld
}
[Token(Token = "0x2000028")]
public static class GUIHelpers
{
	[Token(Token = "0x40000AD")]
	public const float defaultLineHeight = 22f;

	[Token(Token = "0x600010D")]
	[Address(RVA = "0x1E14878", Offset = "0x1E14878", VA = "0x1E14878")]
	public static MouseState GetCurrentMouseState()
	{
		return default(MouseState);
	}

	[Token(Token = "0x600010E")]
	[Address(RVA = "0x1E1498C", Offset = "0x1E1498C", VA = "0x1E1498C")]
	public static Vector3 MouseToGUIPosition(Vector3 inputPosition)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600010F")]
	[Address(RVA = "0x1E149D0", Offset = "0x1E149D0", VA = "0x1E149D0")]
	public static Vector3 GUIToMousePosition(Vector3 guiPosition)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000110")]
	[Address(RVA = "0x1E14A14", Offset = "0x1E14A14", VA = "0x1E14A14")]
	public static float GetHeightOfOnePixelInWorldSpace(Camera camera, float depth)
	{
		return default(float);
	}

	[Token(Token = "0x6000111")]
	[Address(RVA = "0x1E14BB8", Offset = "0x1E14BB8", VA = "0x1E14BB8")]
	public static GUIStyleState CopyGUIStyleState(GUIStyleState source)
	{
		return null;
	}

	[Token(Token = "0x6000112")]
	[Address(RVA = "0x1E14CB8", Offset = "0x1E14CB8", VA = "0x1E14CB8")]
	public static int GetFontSizeFromFontNameSuffix(Font font)
	{
		return default(int);
	}
}
[Token(Token = "0x2000029")]
public struct AxisTripod
{
	[Token(Token = "0x40000AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public Vector3 right;

	[Token(Token = "0x40000AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Vector3 up;

	[Token(Token = "0x40000B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 forward;

	[Token(Token = "0x1700003C")]
	public Vector3 left
	{
		[Token(Token = "0x6000113")]
		[Address(RVA = "0xC3D2CC", Offset = "0xC3D2CC", VA = "0xC3D2CC")]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x6000114")]
		[Address(RVA = "0xC3D2D4", Offset = "0xC3D2D4", VA = "0xC3D2D4")]
		set
		{
		}
	}

	[Token(Token = "0x1700003D")]
	public Vector3 down
	{
		[Token(Token = "0x6000115")]
		[Address(RVA = "0xC3D2DC", Offset = "0xC3D2DC", VA = "0xC3D2DC")]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x6000116")]
		[Address(RVA = "0xC3D2E4", Offset = "0xC3D2E4", VA = "0xC3D2E4")]
		set
		{
		}
	}

	[Token(Token = "0x1700003E")]
	public Vector3 back
	{
		[Token(Token = "0x6000117")]
		[Address(RVA = "0xC3D2EC", Offset = "0xC3D2EC", VA = "0xC3D2EC")]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x6000118")]
		[Address(RVA = "0xC3D2F4", Offset = "0xC3D2F4", VA = "0xC3D2F4")]
		set
		{
		}
	}

	[Token(Token = "0x6000119")]
	[Address(RVA = "0x1DFD980", Offset = "0x1DFD980", VA = "0x1DFD980")]
	public static AxisTripod FromForwardAndUpVectors(Vector3 forward, Vector3 up)
	{
		return default(AxisTripod);
	}

	[Token(Token = "0x600011A")]
	[Address(RVA = "0x1DFDB24", Offset = "0x1DFDB24", VA = "0x1DFDB24")]
	public static AxisTripod FromQuaternion(Quaternion quat)
	{
		return default(AxisTripod);
	}
}
[Token(Token = "0x200002A")]
public class Interpolate
{
	[Token(Token = "0x20002A8")]
	public enum EaseType
	{
		[Token(Token = "0x4000D85")]
		Linear,
		[Token(Token = "0x4000D86")]
		EaseInQuad,
		[Token(Token = "0x4000D87")]
		EaseOutQuad,
		[Token(Token = "0x4000D88")]
		EaseInOutQuad,
		[Token(Token = "0x4000D89")]
		EaseInCubic,
		[Token(Token = "0x4000D8A")]
		EaseOutCubic,
		[Token(Token = "0x4000D8B")]
		EaseInOutCubic,
		[Token(Token = "0x4000D8C")]
		EaseInQuart,
		[Token(Token = "0x4000D8D")]
		EaseOutQuart,
		[Token(Token = "0x4000D8E")]
		EaseInOutQuart,
		[Token(Token = "0x4000D8F")]
		EaseInQuint,
		[Token(Token = "0x4000D90")]
		EaseOutQuint,
		[Token(Token = "0x4000D91")]
		EaseInOutQuint,
		[Token(Token = "0x4000D92")]
		EaseInSine,
		[Token(Token = "0x4000D93")]
		EaseOutSine,
		[Token(Token = "0x4000D94")]
		EaseInOutSine,
		[Token(Token = "0x4000D95")]
		EaseInExpo,
		[Token(Token = "0x4000D96")]
		EaseOutExpo,
		[Token(Token = "0x4000D97")]
		EaseInOutExpo,
		[Token(Token = "0x4000D98")]
		EaseInCirc,
		[Token(Token = "0x4000D99")]
		EaseOutCirc,
		[Token(Token = "0x4000D9A")]
		EaseInOutCirc
	}

	[Token(Token = "0x20002A9")]
	public delegate Vector3 ToVector3<T>(T v);

	[Token(Token = "0x20002AA")]
	public delegate float Function(float a, float b, float c, float d);

	[Token(Token = "0x20002AB")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49A74", Offset = "0xB49A74")]
	private sealed class <NewTimer>d__3 : IEnumerable<float>, IEnumerable, IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000D9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000D9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000D9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int <>l__initialThreadId;

		[Token(Token = "0x4000D9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float duration;

		[Token(Token = "0x4000D9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float <>3__duration;

		[Token(Token = "0x4000DA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float <elapsedTime>5__2;

		[Token(Token = "0x17000234")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6001505")]
			[Address(RVA = "0x1E18300", Offset = "0x1E18300", VA = "0x1E18300", Slot = "6")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000235")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001507")]
			[Address(RVA = "0x1E18370", Offset = "0x1E18370", VA = "0x1E18370", Slot = "9")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001502")]
		[Address(RVA = "0x1E16110", Offset = "0x1E16110", VA = "0x1E16110")]
		[DebuggerHidden]
		public <NewTimer>d__3(int <>1__state)
		{
		}

		[Token(Token = "0x6001503")]
		[Address(RVA = "0x1E18240", Offset = "0x1E18240", VA = "0x1E18240", Slot = "7")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001504")]
		[Address(RVA = "0x1E18244", Offset = "0x1E18244", VA = "0x1E18244", Slot = "8")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001506")]
		[Address(RVA = "0x1E18308", Offset = "0x1E18308", VA = "0x1E18308", Slot = "10")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}

		[Token(Token = "0x6001508")]
		[Address(RVA = "0x1E183D4", Offset = "0x1E183D4", VA = "0x1E183D4", Slot = "4")]
		[DebuggerHidden]
		private IEnumerator<float> System.Collections.Generic.IEnumerable<System.Single>.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6001509")]
		[Address(RVA = "0x1E18484", Offset = "0x1E18484", VA = "0x1E18484", Slot = "5")]
		[DebuggerHidden]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}
	}

	[Token(Token = "0x20002AC")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49A84", Offset = "0xB49A84")]
	private sealed class <NewCounter>d__6 : IEnumerable<float>, IEnumerable, IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000DA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000DA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000DA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int <>l__initialThreadId;

		[Token(Token = "0x4000DA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private int start;

		[Token(Token = "0x4000DA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int <>3__start;

		[Token(Token = "0x4000DA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int step;

		[Token(Token = "0x4000DA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int <>3__step;

		[Token(Token = "0x4000DA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int end;

		[Token(Token = "0x4000DA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int <>3__end;

		[Token(Token = "0x4000DAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int <i>5__2;

		[Token(Token = "0x17000236")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x600150D")]
			[Address(RVA = "0x1E17C0C", Offset = "0x1E17C0C", VA = "0x1E17C0C", Slot = "6")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000237")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600150F")]
			[Address(RVA = "0x1E17C7C", Offset = "0x1E17C7C", VA = "0x1E17C7C", Slot = "9")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600150A")]
		[Address(RVA = "0x1E16208", Offset = "0x1E16208", VA = "0x1E16208")]
		[DebuggerHidden]
		public <NewCounter>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x600150B")]
		[Address(RVA = "0x1E17BA4", Offset = "0x1E17BA4", VA = "0x1E17BA4", Slot = "7")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600150C")]
		[Address(RVA = "0x1E17BA8", Offset = "0x1E17BA8", VA = "0x1E17BA8", Slot = "8")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600150E")]
		[Address(RVA = "0x1E17C14", Offset = "0x1E17C14", VA = "0x1E17C14", Slot = "10")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}

		[Token(Token = "0x6001510")]
		[Address(RVA = "0x1E17CE0", Offset = "0x1E17CE0", VA = "0x1E17CE0", Slot = "4")]
		[DebuggerHidden]
		private IEnumerator<float> System.Collections.Generic.IEnumerable<System.Single>.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6001511")]
		[Address(RVA = "0x1E17DCC", Offset = "0x1E17DCC", VA = "0x1E17DCC", Slot = "5")]
		[DebuggerHidden]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}
	}

	[Token(Token = "0x20002AD")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49A94", Offset = "0xB49A94")]
	private sealed class <NewEase>d__9 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000DAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000DAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000DAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 end;

		[Token(Token = "0x4000DAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 start;

		[Token(Token = "0x4000DAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IEnumerable<float> driver;

		[Token(Token = "0x4000DB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Function ease;

		[Token(Token = "0x4000DB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float total;

		[Token(Token = "0x4000DB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 <distance>5__2;

		[Token(Token = "0x4000DB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private IEnumerator<float> <>7__wrap2;

		[Token(Token = "0x17000238")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001516")]
			[Address(RVA = "0x1E181C8", Offset = "0x1E181C8", VA = "0x1E181C8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000239")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001518")]
			[Address(RVA = "0x1E18238", Offset = "0x1E18238", VA = "0x1E18238", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001512")]
		[Address(RVA = "0x1E1646C", Offset = "0x1E1646C", VA = "0x1E1646C")]
		[DebuggerHidden]
		public <NewEase>d__9(int <>1__state)
		{
		}

		[Token(Token = "0x6001513")]
		[Address(RVA = "0x1E17DD0", Offset = "0x1E17DD0", VA = "0x1E17DD0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001514")]
		[Address(RVA = "0x1E17EAC", Offset = "0x1E17EAC", VA = "0x1E17EAC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001515")]
		[Address(RVA = "0x1E17DEC", Offset = "0x1E17DEC", VA = "0x1E17DEC")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x6001517")]
		[Address(RVA = "0x1E181D0", Offset = "0x1E181D0", VA = "0x1E181D0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002AE")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49AA4", Offset = "0xB49AA4")]
	private sealed class <NewBezier>d__16<T> : IEnumerable<Vector3>, IEnumerable, IEnumerator<Vector3>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000DB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int <>1__state;

		[Token(Token = "0x4000DB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Vector3 <>2__current;

		[Token(Token = "0x4000DB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int <>l__initialThreadId;

		[Token(Token = "0x4000DB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IList nodes;

		[Token(Token = "0x4000DB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IList <>3__nodes;

		[Token(Token = "0x4000DB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IEnumerable<float> steps;

		[Token(Token = "0x4000DBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IEnumerable<float> <>3__steps;

		[Token(Token = "0x4000DBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private ToVector3<T> toVector3;

		[Token(Token = "0x4000DBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ToVector3<T> <>3__toVector3;

		[Token(Token = "0x4000DBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Function ease;

		[Token(Token = "0x4000DBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Function <>3__ease;

		[Token(Token = "0x4000DBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private float maxStep;

		[Token(Token = "0x4000DC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float <>3__maxStep;

		[Token(Token = "0x4000DC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Vector3[] <points>5__2;

		[Token(Token = "0x4000DC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IEnumerator<float> <>7__wrap2;

		[Token(Token = "0x1700023A")]
		private Vector3 System.Collections.Generic.IEnumerator<UnityEngine.Vector3>.Current
		{
			[Token(Token = "0x600151D")]
			[DebuggerHidden]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700023B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600151F")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001519")]
		[DebuggerHidden]
		public <NewBezier>d__16(int <>1__state)
		{
		}

		[Token(Token = "0x600151A")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600151B")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600151C")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x600151E")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}

		[Token(Token = "0x6001520")]
		[DebuggerHidden]
		private IEnumerator<Vector3> System.Collections.Generic.IEnumerable<UnityEngine.Vector3>.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6001521")]
		[DebuggerHidden]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}
	}

	[Token(Token = "0x20002AF")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49AB4", Offset = "0xB49AB4")]
	private sealed class <NewCatmullRom>d__20<T> : IEnumerable<Vector3>, IEnumerable, IEnumerator<Vector3>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000DC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int <>1__state;

		[Token(Token = "0x4000DC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Vector3 <>2__current;

		[Token(Token = "0x4000DC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int <>l__initialThreadId;

		[Token(Token = "0x4000DC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IList nodes;

		[Token(Token = "0x4000DC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IList <>3__nodes;

		[Token(Token = "0x4000DC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private ToVector3<T> toVector3;

		[Token(Token = "0x4000DC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ToVector3<T> <>3__toVector3;

		[Token(Token = "0x4000DCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool loop;

		[Token(Token = "0x4000DCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool <>3__loop;

		[Token(Token = "0x4000DCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int slices;

		[Token(Token = "0x4000DCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int <>3__slices;

		[Token(Token = "0x4000DCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int <last>5__2;

		[Token(Token = "0x4000DCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int <current>5__3;

		[Token(Token = "0x4000DD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int <previous>5__4;

		[Token(Token = "0x4000DD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int <start>5__5;

		[Token(Token = "0x4000DD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int <end>5__6;

		[Token(Token = "0x4000DD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int <next>5__7;

		[Token(Token = "0x4000DD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int <stepCount>5__8;

		[Token(Token = "0x4000DD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int <step>5__9;

		[Token(Token = "0x1700023C")]
		private Vector3 System.Collections.Generic.IEnumerator<UnityEngine.Vector3>.Current
		{
			[Token(Token = "0x6001525")]
			[DebuggerHidden]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700023D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001527")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001522")]
		[DebuggerHidden]
		public <NewCatmullRom>d__20(int <>1__state)
		{
		}

		[Token(Token = "0x6001523")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001524")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001526")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}

		[Token(Token = "0x6001528")]
		[DebuggerHidden]
		private IEnumerator<Vector3> System.Collections.Generic.IEnumerable<UnityEngine.Vector3>.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6001529")]
		[DebuggerHidden]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}
	}

	[Token(Token = "0x600011B")]
	[Address(RVA = "0x1E16054", Offset = "0x1E16054", VA = "0x1E16054")]
	private static Vector3 Identity(Vector3 v)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600011C")]
	[Address(RVA = "0x1E16058", Offset = "0x1E16058", VA = "0x1E16058")]
	private static Vector3 TransformDotPosition(Transform t)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600011D")]
	[Address(RVA = "0x1E16084", Offset = "0x1E16084", VA = "0x1E16084")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB4C02C", Offset = "0xB4C02C")]
	private static IEnumerable<float> NewTimer(float duration)
	{
		return null;
	}

	[Token(Token = "0x600011E")]
	[Address(RVA = "0x1E16148", Offset = "0x1E16148", VA = "0x1E16148")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB4C090", Offset = "0xB4C090")]
	private static IEnumerable<float> NewCounter(int start, int end, int step)
	{
		return null;
	}

	[Token(Token = "0x600011F")]
	[Address(RVA = "0x1E16240", Offset = "0x1E16240", VA = "0x1E16240")]
	public static IEnumerator NewEase(Function ease, Vector3 start, Vector3 end, float duration)
	{
		return null;
	}

	[Token(Token = "0x6000120")]
	[Address(RVA = "0x1E163E8", Offset = "0x1E163E8", VA = "0x1E163E8")]
	public static IEnumerator NewEase(Function ease, Vector3 start, Vector3 end, int slices)
	{
		return null;
	}

	[Token(Token = "0x6000121")]
	[Address(RVA = "0x1E162C4", Offset = "0x1E162C4", VA = "0x1E162C4")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB4C0F4", Offset = "0xB4C0F4")]
	private static IEnumerator NewEase(Function ease, Vector3 start, Vector3 end, float total, IEnumerable<float> driver)
	{
		return null;
	}

	[Token(Token = "0x6000122")]
	[Address(RVA = "0x1E16498", Offset = "0x1E16498", VA = "0x1E16498")]
	private static Vector3 Ease(Function ease, Vector3 start, Vector3 distance, float elapsedTime, float duration)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000123")]
	[Address(RVA = "0x1E165B8", Offset = "0x1E165B8", VA = "0x1E165B8")]
	public static Function Ease(EaseType type)
	{
		return null;
	}

	[Token(Token = "0x6000124")]
	[Address(RVA = "0x1E1689C", Offset = "0x1E1689C", VA = "0x1E1689C")]
	public static IEnumerable<Vector3> NewBezier(Function ease, Transform[] nodes, float duration)
	{
		return null;
	}

	[Token(Token = "0x6000125")]
	[Address(RVA = "0x1E16958", Offset = "0x1E16958", VA = "0x1E16958")]
	public static IEnumerable<Vector3> NewBezier(Function ease, Transform[] nodes, int slices)
	{
		return null;
	}

	[Token(Token = "0x6000126")]
	[Address(RVA = "0x1E16A20", Offset = "0x1E16A20", VA = "0x1E16A20")]
	public static IEnumerable<Vector3> NewBezier(Function ease, Vector3[] points, float duration)
	{
		return null;
	}

	[Token(Token = "0x6000127")]
	[Address(RVA = "0x1E16ADC", Offset = "0x1E16ADC", VA = "0x1E16ADC")]
	public static IEnumerable<Vector3> NewBezier(Function ease, Vector3[] points, int slices)
	{
		return null;
	}

	[Token(Token = "0x6000128")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB4C158", Offset = "0xB4C158")]
	private static IEnumerable<Vector3> NewBezier<T>(Function ease, IList nodes, ToVector3<T> toVector3, float maxStep, IEnumerable<float> steps)
	{
		return null;
	}

	[Token(Token = "0x6000129")]
	[Address(RVA = "0x1E16BA4", Offset = "0x1E16BA4", VA = "0x1E16BA4")]
	private static Vector3 Bezier(Function ease, Vector3[] points, float elapsedTime, float duration)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600012A")]
	[Address(RVA = "0x1E16E78", Offset = "0x1E16E78", VA = "0x1E16E78")]
	public static IEnumerable<Vector3> NewCatmullRom(Transform[] nodes, int slices, bool loop)
	{
		return null;
	}

	[Token(Token = "0x600012B")]
	[Address(RVA = "0x1E16F18", Offset = "0x1E16F18", VA = "0x1E16F18")]
	public static IEnumerable<Vector3> NewCatmullRom(Vector3[] points, int slices, bool loop)
	{
		return null;
	}

	[Token(Token = "0x600012C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB4C1BC", Offset = "0xB4C1BC")]
	private static IEnumerable<Vector3> NewCatmullRom<T>(IList nodes, ToVector3<T> toVector3, int slices, bool loop)
	{
		return null;
	}

	[Token(Token = "0x600012D")]
	[Address(RVA = "0x1E16FB8", Offset = "0x1E16FB8", VA = "0x1E16FB8")]
	public static Vector3 CatmullRom(Vector3 previous, Vector3 start, Vector3 end, Vector3 next, float elapsedTime, float duration)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600012E")]
	[Address(RVA = "0x1E171A0", Offset = "0x1E171A0", VA = "0x1E171A0")]
	private static float Linear(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x600012F")]
	[Address(RVA = "0x1E171B8", Offset = "0x1E171B8", VA = "0x1E171B8")]
	private static float EaseInQuad(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x6000130")]
	[Address(RVA = "0x1E171D8", Offset = "0x1E171D8", VA = "0x1E171D8")]
	private static float EaseOutQuad(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x6000131")]
	[Address(RVA = "0x1E17200", Offset = "0x1E17200", VA = "0x1E17200")]
	private static float EaseInOutQuad(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x6000132")]
	[Address(RVA = "0x1E17264", Offset = "0x1E17264", VA = "0x1E17264")]
	private static float EaseInCubic(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x6000133")]
	[Address(RVA = "0x1E17288", Offset = "0x1E17288", VA = "0x1E17288")]
	private static float EaseOutCubic(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x6000134")]
	[Address(RVA = "0x1E172BC", Offset = "0x1E172BC", VA = "0x1E172BC")]
	private static float EaseInOutCubic(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x6000135")]
	[Address(RVA = "0x1E17320", Offset = "0x1E17320", VA = "0x1E17320")]
	private static float EaseInQuart(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x6000136")]
	[Address(RVA = "0x1E17348", Offset = "0x1E17348", VA = "0x1E17348")]
	private static float EaseOutQuart(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x6000137")]
	[Address(RVA = "0x1E1737C", Offset = "0x1E1737C", VA = "0x1E1737C")]
	private static float EaseInOutQuart(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x6000138")]
	[Address(RVA = "0x1E173E8", Offset = "0x1E173E8", VA = "0x1E173E8")]
	private static float EaseInQuint(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x6000139")]
	[Address(RVA = "0x1E17414", Offset = "0x1E17414", VA = "0x1E17414")]
	private static float EaseOutQuint(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x600013A")]
	[Address(RVA = "0x1E17450", Offset = "0x1E17450", VA = "0x1E17450")]
	private static float EaseInOutQuint(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x600013B")]
	[Address(RVA = "0x1E174C4", Offset = "0x1E174C4", VA = "0x1E174C4")]
	private static float EaseInSine(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x600013C")]
	[Address(RVA = "0x1E17568", Offset = "0x1E17568", VA = "0x1E17568")]
	private static float EaseOutSine(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x600013D")]
	[Address(RVA = "0x1E17608", Offset = "0x1E17608", VA = "0x1E17608")]
	private static float EaseInOutSine(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x600013E")]
	[Address(RVA = "0x1E176B8", Offset = "0x1E176B8", VA = "0x1E176B8")]
	private static float EaseInExpo(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x600013F")]
	[Address(RVA = "0x1E1775C", Offset = "0x1E1775C", VA = "0x1E1775C")]
	private static float EaseOutExpo(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x6000140")]
	[Address(RVA = "0x1E17800", Offset = "0x1E17800", VA = "0x1E17800")]
	private static float EaseInOutExpo(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x6000141")]
	[Address(RVA = "0x1E17914", Offset = "0x1E17914", VA = "0x1E17914")]
	private static float EaseInCirc(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x6000142")]
	[Address(RVA = "0x1E179CC", Offset = "0x1E179CC", VA = "0x1E179CC")]
	private static float EaseOutCirc(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x6000143")]
	[Address(RVA = "0x1E17A88", Offset = "0x1E17A88", VA = "0x1E17A88")]
	private static float EaseInOutCirc(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x6000144")]
	[Address(RVA = "0x1E17B9C", Offset = "0x1E17B9C", VA = "0x1E17B9C")]
	public Interpolate()
	{
	}
}
[Token(Token = "0x200002B")]
public static class MatrixHelpers
{
	[Token(Token = "0x6000145")]
	[Address(RVA = "0x1A33488", Offset = "0x1A33488", VA = "0x1A33488")]
	public static Vector3 GetPosition(Matrix4x4 matrix)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000146")]
	[Address(RVA = "0x1A334F8", Offset = "0x1A334F8", VA = "0x1A334F8")]
	public static Quaternion GetRotation(Matrix4x4 matrix)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x6000147")]
	[Address(RVA = "0x1A335EC", Offset = "0x1A335EC", VA = "0x1A335EC")]
	public static Vector3 GetScale(Matrix4x4 matrix)
	{
		return default(Vector3);
	}
}
[Token(Token = "0x200002C")]
public enum VectorComparisonMode
{
	[Token(Token = "0x40000B2")]
	Dot,
	[Token(Token = "0x40000B3")]
	Angle
}
[Token(Token = "0x200002D")]
public enum VectorInterpolationMode
{
	[Token(Token = "0x40000B5")]
	Lerp,
	[Token(Token = "0x40000B6")]
	Slerp
}
[Token(Token = "0x200002E")]
public enum AxisAlignmentMode
{
	[Token(Token = "0x40000B8")]
	None,
	[Token(Token = "0x40000B9")]
	Cardinal
}
[Token(Token = "0x200002F")]
public static class VectorHelpers
{
	[Token(Token = "0x40000BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static readonly Vector3[] cardinalAxes;

	[Token(Token = "0x40000BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static float intersectionDistance;

	[Token(Token = "0x6000148")]
	[Address(RVA = "0x26A8E74", Offset = "0x26A8E74", VA = "0x26A8E74")]
	public static Vector3 FindNearestCardinalAxis(Vector3 testVector)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000149")]
	[Address(RVA = "0x26A9064", Offset = "0x26A9064", VA = "0x26A9064")]
	public static Vector3 MirrorPointAcrossPlane(Vector3 p, Vector3 n)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600014A")]
	[Address(RVA = "0x26A917C", Offset = "0x26A917C", VA = "0x26A917C")]
	public static bool GetIntersectionOnPlane(Vector3 origin, Vector3 direction, Plane p, out Vector3 intersectionPoint)
	{
		return default(bool);
	}

	[Token(Token = "0x600014B")]
	[Address(RVA = "0x26A9288", Offset = "0x26A9288", VA = "0x26A9288")]
	public static bool GetIntersectionOnPlane(Ray ray, Plane p, out Vector3 intersectionPoint)
	{
		return default(bool);
	}

	[Token(Token = "0x600014C")]
	[Address(RVA = "0x26A9368", Offset = "0x26A9368", VA = "0x26A9368")]
	public static Vector3 GetProjectionOnPlane(Vector3 v, Plane p)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600014D")]
	[Address(RVA = "0x26A94F0", Offset = "0x26A94F0", VA = "0x26A94F0")]
	public static float GetMinValue(Vector2 v)
	{
		return default(float);
	}

	[Token(Token = "0x600014E")]
	[Address(RVA = "0x26A9568", Offset = "0x26A9568", VA = "0x26A9568")]
	public static float GetMinValue(Vector3 v)
	{
		return default(float);
	}

	[Token(Token = "0x600014F")]
	[Address(RVA = "0x26A9664", Offset = "0x26A9664", VA = "0x26A9664")]
	public static float GetMinValue(Vector4 v)
	{
		return default(float);
	}

	[Token(Token = "0x6000150")]
	[Address(RVA = "0x26A9784", Offset = "0x26A9784", VA = "0x26A9784")]
	public static float GetMaxValue(Vector2 v)
	{
		return default(float);
	}

	[Token(Token = "0x6000151")]
	[Address(RVA = "0x26A97FC", Offset = "0x26A97FC", VA = "0x26A97FC")]
	public static float GetMaxValue(Vector3 v)
	{
		return default(float);
	}

	[Token(Token = "0x6000152")]
	[Address(RVA = "0x26A98F8", Offset = "0x26A98F8", VA = "0x26A98F8")]
	public static float GetMaxValue(Vector4 v)
	{
		return default(float);
	}

	[Token(Token = "0x6000153")]
	[Address(RVA = "0x26A9A18", Offset = "0x26A9A18", VA = "0x26A9A18")]
	public static AxisTripod GetAxisTripodFromUpVector(Vector3 up)
	{
		return default(AxisTripod);
	}
}
[Serializable]
[Token(Token = "0x2000030")]
public class AngularLimitDistribution
{
	[Token(Token = "0x40000BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float xMin;

	[Token(Token = "0x40000BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float xMax;

	[Token(Token = "0x40000BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float yMax;

	[Token(Token = "0x40000BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float zMax;

	[Token(Token = "0x40000C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AnimationCurve curve;

	[Token(Token = "0x6000155")]
	[Address(RVA = "0x1DFB268", Offset = "0x1DFB268", VA = "0x1DFB268")]
	public AngularLimitDistribution()
	{
	}

	[Token(Token = "0x6000156")]
	[Address(RVA = "0x1DFB2A8", Offset = "0x1DFB2A8", VA = "0x1DFB2A8")]
	public AngularLimitDistribution(float xMin, float xMax, float yMax, float zMax)
	{
	}

	[Token(Token = "0x6000157")]
	[Address(RVA = "0x1DFB33C", Offset = "0x1DFB33C", VA = "0x1DFB33C")]
	public void Evaluate(float t, out float xMin, out float xMax, out float yMax, out float zMax)
	{
	}
}
[Token(Token = "0x2000031")]
public class CollisionBroadcaster : MonoBehaviour
{
	[Token(Token = "0x40000C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject target;

	[Token(Token = "0x6000158")]
	[Address(RVA = "0x1E12738", Offset = "0x1E12738", VA = "0x1E12738")]
	public void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6000159")]
	[Address(RVA = "0x1E127E4", Offset = "0x1E127E4", VA = "0x1E127E4")]
	public void OnCollisionExit(Collision collision)
	{
	}

	[Token(Token = "0x600015A")]
	[Address(RVA = "0x1E12798", Offset = "0x1E12798", VA = "0x1E12798")]
	private void BroadcastToTarget(Collision collision, string msg)
	{
	}

	[Token(Token = "0x600015B")]
	[Address(RVA = "0x1E12844", Offset = "0x1E12844", VA = "0x1E12844")]
	public CollisionBroadcaster()
	{
	}
}
[Token(Token = "0x2000032")]
public class CylinderProperties
{
	[Token(Token = "0x40000C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float height;

	[Token(Token = "0x40000C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float radius;

	[Token(Token = "0x600015C")]
	[Address(RVA = "0x1E14214", Offset = "0x1E14214", VA = "0x1E14214")]
	public CylinderProperties()
	{
	}

	[Token(Token = "0x600015D")]
	[Address(RVA = "0x1E1421C", Offset = "0x1E1421C", VA = "0x1E1421C")]
	public CylinderProperties(float height, float radius)
	{
	}

	[Token(Token = "0x600015E")]
	[Address(RVA = "0x1E14254", Offset = "0x1E14254", VA = "0x1E14254")]
	public CylinderProperties(CylinderProperties properties)
	{
	}
}
[Token(Token = "0x2000033")]
public class JointAngularLimits
{
	[Token(Token = "0x40000C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float xMin;

	[Token(Token = "0x40000C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float xMax;

	[Token(Token = "0x40000C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float yMax;

	[Token(Token = "0x40000C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float zMax;

	[Token(Token = "0x600015F")]
	[Address(RVA = "0x1A21260", Offset = "0x1A21260", VA = "0x1A21260")]
	public JointAngularLimits()
	{
	}

	[Token(Token = "0x6000160")]
	[Address(RVA = "0x1A21268", Offset = "0x1A21268", VA = "0x1A21268")]
	public JointAngularLimits(JointAngularLimits limits)
	{
	}

	[Token(Token = "0x6000161")]
	[Address(RVA = "0x1A212FC", Offset = "0x1A212FC", VA = "0x1A212FC")]
	public JointAngularLimits(CharacterJoint joint)
	{
	}

	[Token(Token = "0x6000162")]
	[Address(RVA = "0x1A21418", Offset = "0x1A21418", VA = "0x1A21418")]
	public JointAngularLimits(ConfigurableJoint joint)
	{
	}

	[Token(Token = "0x6000163")]
	[Address(RVA = "0x1A21534", Offset = "0x1A21534", VA = "0x1A21534")]
	public void ApplyToJoint(CharacterJoint joint)
	{
	}

	[Token(Token = "0x6000164")]
	[Address(RVA = "0x1A2172C", Offset = "0x1A2172C", VA = "0x1A2172C")]
	public void ApplyToJoint(ConfigurableJoint joint)
	{
	}
}
[Token(Token = "0x2000034")]
public static class JointHelpers
{
	[Token(Token = "0x20002B0")]
	public enum WarningMode
	{
		[Token(Token = "0x4000DD7")]
		Default,
		[Token(Token = "0x4000DD8")]
		Silent
	}

	[Token(Token = "0x40000C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Vector3 workingAxis;

	[Token(Token = "0x40000C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static Vector3 workingSecondaryAxis;

	[Token(Token = "0x40000CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static Vector3 workingTertiaryAxis;

	[Token(Token = "0x6000165")]
	[Address(RVA = "0x1A21924", Offset = "0x1A21924", VA = "0x1A21924")]
	public static void SetAllTranslationMotion(ConfigurableJoint joint, ConfigurableJointMotion motion)
	{
	}

	[Token(Token = "0x6000166")]
	[Address(RVA = "0x1A219AC", Offset = "0x1A219AC", VA = "0x1A219AC")]
	public static void SetAllAngularMotion(ConfigurableJoint joint, ConfigurableJointMotion motion)
	{
	}

	[Token(Token = "0x6000167")]
	public static Dictionary<T, Matrix4x4> GetBindposesOfJointsInScene<T>(WarningMode warningMode = WarningMode.Silent) where T : Joint
	{
		return null;
	}

	[Token(Token = "0x6000168")]
	[Address(RVA = "0x1A21A34", Offset = "0x1A21A34", VA = "0x1A21A34")]
	private static Matrix4x4 GetParentWorldMatrix(Joint joint)
	{
		return default(Matrix4x4);
	}

	[Token(Token = "0x6000169")]
	[Address(RVA = "0x1A21D3C", Offset = "0x1A21D3C", VA = "0x1A21D3C")]
	public static Matrix4x4 GetJointLinearWorldMatrix(Joint joint, Matrix4x4 bindPose)
	{
		return default(Matrix4x4);
	}

	[Token(Token = "0x600016A")]
	[Address(RVA = "0x1A21F78", Offset = "0x1A21F78", VA = "0x1A21F78")]
	public static Matrix4x4 GetJointAngularWorldMatrix(Joint joint, Matrix4x4 bindPose)
	{
		return default(Matrix4x4);
	}

	[Token(Token = "0x600016B")]
	[Address(RVA = "0x1A221B4", Offset = "0x1A221B4", VA = "0x1A221B4")]
	public static Matrix4x4 GetBindPoseLocalMatrix(Joint joint, WarningMode warningMode = WarningMode.Default)
	{
		return default(Matrix4x4);
	}

	[Token(Token = "0x600016C")]
	[Address(RVA = "0x1A2261C", Offset = "0x1A2261C", VA = "0x1A2261C")]
	public static Quaternion GetJointFrameOffset(CharacterJoint j)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x600016D")]
	[Address(RVA = "0x1A227FC", Offset = "0x1A227FC", VA = "0x1A227FC")]
	public static Quaternion GetJointFrameOffset(ConfigurableJoint j)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x600016E")]
	[Address(RVA = "0x1A226F4", Offset = "0x1A226F4", VA = "0x1A226F4")]
	public static Quaternion GetJointFrameOffset(Vector3 axis, Vector3 secondaryAxis)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x600016F")]
	[Address(RVA = "0x1A22A14", Offset = "0x1A22A14", VA = "0x1A22A14")]
	public static Vector3[] GetActualCharacterJointAxes(CharacterJoint j)
	{
		return null;
	}

	[Token(Token = "0x6000170")]
	[Address(RVA = "0x1A22B94", Offset = "0x1A22B94", VA = "0x1A22B94")]
	public static Vector3[] GetActualConfigurableJointAxes(ConfigurableJoint j)
	{
		return null;
	}

	[Token(Token = "0x6000171")]
	[Address(RVA = "0x1A228D4", Offset = "0x1A228D4", VA = "0x1A228D4")]
	public static void GetActualConfigurableJointAxes(Vector3 axis, Vector3 secondaryAxis, out Vector3 actualAxis, out Vector3 actualSecondaryAxis, out Vector3 actualTertiaryAxis)
	{
	}

	[Token(Token = "0x6000172")]
	[Address(RVA = "0x1A22D14", Offset = "0x1A22D14", VA = "0x1A22D14")]
	public static void TransformTargetRotation(ConfigurableJoint joint, Quaternion offset)
	{
	}

	[Token(Token = "0x6000173")]
	[Address(RVA = "0x1A22DB0", Offset = "0x1A22DB0", VA = "0x1A22DB0")]
	public static void TransformTargetRotation(ConfigurableJoint joint, Quaternion jointFrame, Quaternion offset)
	{
	}

	[Token(Token = "0x6000174")]
	[Address(RVA = "0x1A22ECC", Offset = "0x1A22ECC", VA = "0x1A22ECC")]
	public static void SetJointTargetRotationUsingLocalRotation(ConfigurableJoint joint, Quaternion bindPose, Quaternion targetLocalRotation)
	{
	}

	[Token(Token = "0x6000175")]
	[Address(RVA = "0x1A22FAC", Offset = "0x1A22FAC", VA = "0x1A22FAC")]
	public static void SetJointTargetRotationUsingLocalRotation(ConfigurableJoint joint, Quaternion bindPose, Quaternion jointFrame, Quaternion targetLocalRotation)
	{
	}
}
[Token(Token = "0x2000035")]
public static class TransformHelpers
{
	[Token(Token = "0x20002B1")]
	public enum SearchNamespacesMode
	{
		[Token(Token = "0x4000DDA")]
		Ignore,
		[Token(Token = "0x4000DDB")]
		Respect
	}

	[Token(Token = "0x40000CB")]
	public const char defaultNamespaceDelimiter = ':';

	[Token(Token = "0x6000177")]
	[Address(RVA = "0x1E214F0", Offset = "0x1E214F0", VA = "0x1E214F0")]
	public static List<Transform> CreateDuplicateHierarchy(Transform root, string suffix = " (Duplicate)")
	{
		return null;
	}

	[Token(Token = "0x6000178")]
	[Address(RVA = "0x1E21AA0", Offset = "0x1E21AA0", VA = "0x1E21AA0")]
	public static Regex GetTransformNameMatch(string transformName, char namespaceDelimiter = ':')
	{
		return null;
	}

	[Token(Token = "0x6000179")]
	[Address(RVA = "0x1E21B74", Offset = "0x1E21B74", VA = "0x1E21B74")]
	public static Transform GetTransformInHierarchy(string transformName, Transform root, SearchNamespacesMode searchMode = SearchNamespacesMode.Respect, char namespaceDelimiter = ':')
	{
		return null;
	}

	[Token(Token = "0x600017A")]
	[Address(RVA = "0x1E21BF8", Offset = "0x1E21BF8", VA = "0x1E21BF8")]
	public static Transform GetTransformInHierarchy(string transformName, Transform[] hierarchy, SearchNamespacesMode searchMode = SearchNamespacesMode.Respect, char namespaceDelimiter = ':')
	{
		return null;
	}

	[Token(Token = "0x600017B")]
	[Address(RVA = "0x1E21CC4", Offset = "0x1E21CC4", VA = "0x1E21CC4")]
	public static void ClearNamespace(Transform transform, char namespaceDelimiter = ':')
	{
	}

	[Token(Token = "0x600017C")]
	[Address(RVA = "0x1E21D94", Offset = "0x1E21D94", VA = "0x1E21D94")]
	public static void ClearNamespace(UnityEngine.Component[] hierarchy, char namespaceDelimiter = ':')
	{
	}

	[Token(Token = "0x600017D")]
	[Address(RVA = "0x1E21EB8", Offset = "0x1E21EB8", VA = "0x1E21EB8")]
	public static void SetNamespace(Transform transform, string namespaceString, char namespaceDelimiter = ':')
	{
	}

	[Token(Token = "0x600017E")]
	[Address(RVA = "0x1E21F94", Offset = "0x1E21F94", VA = "0x1E21F94")]
	public static void SetNamespace(UnityEngine.Component[] hierarchy, string namespaceString, char namespaceDelimiter = ':')
	{
	}
}
[Token(Token = "0x2000036")]
public static class ReflectionX
{
	[Token(Token = "0x600017F")]
	public static T[] GetCustomAttributes<T>(this ICustomAttributeProvider provider, bool inherit = false) where T : Attribute
	{
		return null;
	}

	[Token(Token = "0x6000180")]
	public static T GetFieldValue<T>(object provider, string fieldName)
	{
		return (T)null;
	}

	[Token(Token = "0x6000181")]
	public static T GetFieldValue<T>(object provider, string fieldName, BindingFlags bindingAttr)
	{
		return (T)null;
	}

	[Token(Token = "0x6000182")]
	public static T GetPropertyValue<T>(object provider, string propertyName, [Optional] object[] index)
	{
		return (T)null;
	}

	[Token(Token = "0x6000183")]
	public static T GetPropertyValue<T>(object provider, string propertyName, BindingFlags bindingAttr, [Optional] object[] index)
	{
		return (T)null;
	}
}
[Token(Token = "0x2000037")]
public static class StringHelpers
{
	[Token(Token = "0x6000184")]
	[Address(RVA = "0x1E20DEC", Offset = "0x1E20DEC", VA = "0x1E20DEC")]
	public static string CamelCaseToWords(string camelCase)
	{
		return null;
	}

	[Token(Token = "0x6000185")]
	[Address(RVA = "0x1E20F00", Offset = "0x1E20F00", VA = "0x1E20F00")]
	public static string FloatToTimeString(float time)
	{
		return null;
	}

	[Token(Token = "0x6000186")]
	[Address(RVA = "0x1E20FE8", Offset = "0x1E20FE8", VA = "0x1E20FE8")]
	public static string MetersToFeetInches(float meters)
	{
		return null;
	}

	[Token(Token = "0x6000187")]
	[Address(RVA = "0x1E210B8", Offset = "0x1E210B8", VA = "0x1E210B8")]
	public static string Wrap(string inString, int atColumn)
	{
		return null;
	}
}
[Token(Token = "0x2000038")]
public struct UnityVersion
{
	[Token(Token = "0x40000CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4ADF0", Offset = "0xB4ADF0")]
	private int <majorVersion>k__BackingField;

	[Token(Token = "0x40000CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4AE00", Offset = "0xB4AE00")]
	private int <minorVersion>k__BackingField;

	[Token(Token = "0x40000CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4AE10", Offset = "0xB4AE10")]
	private int <maintenanceVersion>k__BackingField;

	[Token(Token = "0x1700003F")]
	public static UnityVersion current
	{
		[Token(Token = "0x6000188")]
		[Address(RVA = "0x26A88C8", Offset = "0x26A88C8", VA = "0x26A88C8")]
		get
		{
			return default(UnityVersion);
		}
	}

	[Token(Token = "0x17000040")]
	public int majorVersion
	{
		[Token(Token = "0x6000189")]
		[Address(RVA = "0xC52808", Offset = "0xC52808", VA = "0xC52808")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C230", Offset = "0xB4C230")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x600018A")]
		[Address(RVA = "0xC52810", Offset = "0xC52810", VA = "0xC52810")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C240", Offset = "0xB4C240")]
		private set
		{
		}
	}

	[Token(Token = "0x17000041")]
	public int minorVersion
	{
		[Token(Token = "0x600018B")]
		[Address(RVA = "0xC52818", Offset = "0xC52818", VA = "0xC52818")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C250", Offset = "0xB4C250")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x600018C")]
		[Address(RVA = "0xC52820", Offset = "0xC52820", VA = "0xC52820")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C260", Offset = "0xB4C260")]
		private set
		{
		}
	}

	[Token(Token = "0x17000042")]
	public int maintenanceVersion
	{
		[Token(Token = "0x600018D")]
		[Address(RVA = "0xC52828", Offset = "0xC52828", VA = "0xC52828")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C270", Offset = "0xB4C270")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x600018E")]
		[Address(RVA = "0xC52830", Offset = "0xC52830", VA = "0xC52830")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C280", Offset = "0xB4C280")]
		private set
		{
		}
	}

	[Token(Token = "0x600018F")]
	[Address(RVA = "0xC52838", Offset = "0xC52838", VA = "0xC52838")]
	public UnityVersion(int major, int minor, int maintenance)
	{
	}

	[Token(Token = "0x6000190")]
	[Address(RVA = "0x26A8AAC", Offset = "0x26A8AAC", VA = "0x26A8AAC")]
	public static bool operator <(UnityVersion v1, UnityVersion v2)
	{
		return default(bool);
	}

	[Token(Token = "0x6000191")]
	[Address(RVA = "0x26A8B5C", Offset = "0x26A8B5C", VA = "0x26A8B5C")]
	public static bool operator >(UnityVersion v1, UnityVersion v2)
	{
		return default(bool);
	}

	[Token(Token = "0x6000192")]
	[Address(RVA = "0x26A8B98", Offset = "0x26A8B98", VA = "0x26A8B98")]
	public static bool operator ==(UnityVersion v1, UnityVersion v2)
	{
		return default(bool);
	}

	[Token(Token = "0x6000193")]
	[Address(RVA = "0x26A8BD4", Offset = "0x26A8BD4", VA = "0x26A8BD4")]
	public static bool operator !=(UnityVersion v1, UnityVersion v2)
	{
		return default(bool);
	}

	[Token(Token = "0x6000194")]
	[Address(RVA = "0x26A8C10", Offset = "0x26A8C10", VA = "0x26A8C10")]
	public static bool operator <=(UnityVersion v1, UnityVersion v2)
	{
		return default(bool);
	}

	[Token(Token = "0x6000195")]
	[Address(RVA = "0x26A8C4C", Offset = "0x26A8C4C", VA = "0x26A8C4C")]
	public static bool operator >=(UnityVersion v1, UnityVersion v2)
	{
		return default(bool);
	}

	[Token(Token = "0x6000196")]
	[Address(RVA = "0xC52844", Offset = "0xC52844", VA = "0xC52844", Slot = "0")]
	public override bool Equals(object obj)
	{
		return default(bool);
	}

	[Token(Token = "0x6000197")]
	[Address(RVA = "0xC5284C", Offset = "0xC5284C", VA = "0xC5284C", Slot = "2")]
	public override int GetHashCode()
	{
		return default(int);
	}

	[Token(Token = "0x6000198")]
	[Address(RVA = "0xC52854", Offset = "0xC52854", VA = "0xC52854")]
	public int CompareTo(UnityVersion other)
	{
		return default(int);
	}

	[Token(Token = "0x6000199")]
	[Address(RVA = "0xC52860", Offset = "0xC52860", VA = "0xC52860", Slot = "3")]
	public override string ToString()
	{
		return null;
	}
}
[Serializable]
[Token(Token = "0x2000039")]
public struct ColorGradient
{
	[Token(Token = "0x20002B2")]
	public enum InterpolationSpace
	{
		[Token(Token = "0x4000DDD")]
		RGB,
		[Token(Token = "0x4000DDE")]
		HSV
	}

	[Token(Token = "0x40000CF")]
	private const InterpolationSpace defaultInterpolation = InterpolationSpace.RGB;

	[Token(Token = "0x40000D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public Color minColor;

	[Token(Token = "0x40000D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Color maxColor;

	[Token(Token = "0x40000D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public InterpolationSpace interpolationSpace;

	[Token(Token = "0x600019A")]
	[Address(RVA = "0xC3D2FC", Offset = "0xC3D2FC", VA = "0xC3D2FC")]
	public ColorGradient(Color minColor, Color maxColor)
	{
	}

	[Token(Token = "0x600019B")]
	[Address(RVA = "0xC3D314", Offset = "0xC3D314", VA = "0xC3D314")]
	public ColorGradient(Color minColor, Color maxColor, InterpolationSpace interpolationSpace)
	{
	}

	[Token(Token = "0x600019C")]
	[Address(RVA = "0xC3D32C", Offset = "0xC3D32C", VA = "0xC3D32C")]
	public Color Evaluate(float t)
	{
		return default(Color);
	}

	[Token(Token = "0x600019D")]
	[Address(RVA = "0xC3D334", Offset = "0xC3D334", VA = "0xC3D334", Slot = "0")]
	public override bool Equals(object obj)
	{
		return default(bool);
	}

	[Token(Token = "0x600019E")]
	[Address(RVA = "0xC3D33C", Offset = "0xC3D33C", VA = "0xC3D33C", Slot = "2")]
	public override int GetHashCode()
	{
		return default(int);
	}

	[Token(Token = "0x600019F")]
	[Address(RVA = "0x1E12C2C", Offset = "0x1E12C2C", VA = "0x1E12C2C")]
	public static bool operator ==(ColorGradient cg1, ColorGradient cg2)
	{
		return default(bool);
	}

	[Token(Token = "0x60001A0")]
	[Address(RVA = "0x1E12CB4", Offset = "0x1E12CB4", VA = "0x1E12CB4")]
	public static bool operator !=(ColorGradient cg1, ColorGradient cg2)
	{
		return default(bool);
	}
}
[Serializable]
[Token(Token = "0x200003A")]
public class ColorHSV
{
	[Token(Token = "0x40000D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float h;

	[Token(Token = "0x40000D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float s;

	[Token(Token = "0x40000D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float v;

	[Token(Token = "0x40000D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float a;

	[Token(Token = "0x60001A1")]
	[Address(RVA = "0x1E12D20", Offset = "0x1E12D20", VA = "0x1E12D20")]
	public ColorHSV(float h, float s, float v)
	{
	}

	[Token(Token = "0x60001A2")]
	[Address(RVA = "0x1E12DD0", Offset = "0x1E12DD0", VA = "0x1E12DD0")]
	public ColorHSV(float h, float s, float v, float a)
	{
	}

	[Token(Token = "0x60001A3")]
	[Address(RVA = "0x1E12E7C", Offset = "0x1E12E7C", VA = "0x1E12E7C")]
	public ColorHSV(Color color)
	{
	}

	[Token(Token = "0x60001A4")]
	[Address(RVA = "0x1E12FE0", Offset = "0x1E12FE0", VA = "0x1E12FE0")]
	public Color ToColor()
	{
		return default(Color);
	}

	[Token(Token = "0x60001A5")]
	[Address(RVA = "0x1E13174", Offset = "0x1E13174", VA = "0x1E13174", Slot = "3")]
	public override string ToString()
	{
		return null;
	}

	[Token(Token = "0x60001A6")]
	[Address(RVA = "0x1E1338C", Offset = "0x1E1338C", VA = "0x1E1338C")]
	private static ColorHSV Lerp(ColorHSV color1, ColorHSV color2, float t)
	{
		return null;
	}

	[Token(Token = "0x60001A7")]
	[Address(RVA = "0x1E12A70", Offset = "0x1E12A70", VA = "0x1E12A70")]
	public static Color Lerp(Color color1, Color color2, float t)
	{
		return default(Color);
	}
}
[Token(Token = "0x200003B")]
public class MoviePlayer : MoviePlayerBase
{
	[Token(Token = "0x40000D7")]
	public const string PACKAGE_VERSION = "v0.7";

	[Token(Token = "0x40000D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public TextAsset source;

	[Token(Token = "0x40000D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public AudioClip audioSource;

	[Token(Token = "0x40000DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public LoadOptions loadOptions;

	[Token(Token = "0x40000DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public float videoTime;

	[Token(Token = "0x40000DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	public int videoFrame;

	[Token(Token = "0x40000DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public bool loop;

	[Token(Token = "0x40000DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC1")]
	public bool unscaledDelta;

	[Token(Token = "0x40000E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	protected float lastVideoTime;

	[Token(Token = "0x40000E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	protected int lastVideoFrame;

	[Token(Token = "0x14000001")]
	public event MovieEvent OnLoop
	{
		[Token(Token = "0x60001A8")]
		[Address(RVA = "0x1A36040", Offset = "0x1A36040", VA = "0x1A36040")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C290", Offset = "0xB4C290")]
		add
		{
		}
		[Token(Token = "0x60001A9")]
		[Address(RVA = "0x1A3612C", Offset = "0x1A3612C", VA = "0x1A3612C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C2A0", Offset = "0xB4C2A0")]
		remove
		{
		}
	}

	[Token(Token = "0x60001AA")]
	[Address(RVA = "0x1A36218", Offset = "0x1A36218", VA = "0x1A36218")]
	public bool Load(byte[] bytes, [Optional] LoadOptions loadOptions)
	{
		return default(bool);
	}

	[Token(Token = "0x60001AB")]
	[Address(RVA = "0x1A364A8", Offset = "0x1A364A8", VA = "0x1A364A8")]
	public bool Load(TextAsset textAsset, [Optional] LoadOptions loadOptions)
	{
		return default(bool);
	}

	[Token(Token = "0x60001AC")]
	[Address(RVA = "0x1A36548", Offset = "0x1A36548", VA = "0x1A36548")]
	public bool Load(string path, [Optional] LoadOptions loadOptions)
	{
		return default(bool);
	}

	[Token(Token = "0x60001AD")]
	[Address(RVA = "0x1A36294", Offset = "0x1A36294", VA = "0x1A36294")]
	public bool Load(Stream srcStream, [Optional] LoadOptions loadOptions)
	{
		return default(bool);
	}

	[Token(Token = "0x60001AE")]
	[Address(RVA = "0x1A365F8", Offset = "0x1A365F8", VA = "0x1A365F8")]
	[AttributeAttribute(Name = "ContextMenu", RVA = "0xB4C2B0", Offset = "0xB4C2B0")]
	public bool Reload()
	{
		return default(bool);
	}

	[Token(Token = "0x60001AF")]
	[Address(RVA = "0x1A366B0", Offset = "0x1A366B0", VA = "0x1A366B0")]
	private void Start()
	{
	}

	[Token(Token = "0x60001B0")]
	[Address(RVA = "0x1A366B4", Offset = "0x1A366B4", VA = "0x1A366B4")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x60001B1")]
	[Address(RVA = "0x1A36CA0", Offset = "0x1A36CA0", VA = "0x1A36CA0")]
	private void Update()
	{
	}

	[Token(Token = "0x60001B2")]
	[Address(RVA = "0x1A36FC4", Offset = "0x1A36FC4", VA = "0x1A36FC4")]
	protected bool HandlePlayheadMove()
	{
		return default(bool);
	}

	[Token(Token = "0x60001B3")]
	[Address(RVA = "0x1A37074", Offset = "0x1A37074", VA = "0x1A37074")]
	protected void HandleFrameDecode(bool wasSeeked)
	{
	}

	[Token(Token = "0x60001B4")]
	[Address(RVA = "0x1A371C4", Offset = "0x1A371C4", VA = "0x1A371C4")]
	protected void HandleAudioSync()
	{
	}

	[Token(Token = "0x60001B5")]
	[Address(RVA = "0x1A37434", Offset = "0x1A37434", VA = "0x1A37434")]
	protected void HandleLoop()
	{
	}

	[Token(Token = "0x60001B6")]
	[Address(RVA = "0x1A37BE8", Offset = "0x1A37BE8", VA = "0x1A37BE8")]
	public MoviePlayer()
	{
	}
}
[Token(Token = "0x200003C")]
public abstract class MoviePlayerBase : MonoBehaviour
{
	[Token(Token = "0x20002B3")]
	public enum ScreenMode
	{
		[Token(Token = "0x4000DE0")]
		Crop,
		[Token(Token = "0x4000DE1")]
		Fill,
		[Token(Token = "0x4000DE2")]
		Stretch,
		[Token(Token = "0x4000DE3")]
		CustomRect
	}

	[Token(Token = "0x20002B4")]
	public delegate void MovieEvent(MoviePlayerBase caller);

	[Token(Token = "0x40000E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Texture2D framebuffer;

	[Token(Token = "0x40000E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioClip audiobuffer;

	[Token(Token = "0x40000E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool drawToScreen;

	[Token(Token = "0x40000E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xB4AE30", Offset = "0xB4AE30")]
	public Material otherMaterial;

	[Token(Token = "0x40000E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Material material;

	[Token(Token = "0x40000E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Renderer rendererToSetVideoOn;

	[Token(Token = "0x40000E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public string texturePropertyName;

	[Token(Token = "0x40000E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public ScreenMode screenMode;

	[Token(Token = "0x40000EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public int screenGuiDepth;

	[Token(Token = "0x40000EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Rect customScreenRect;

	[Token(Token = "0x40000EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public bool play;

	[Token(Token = "0x40000ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Movie movie;

	[Token(Token = "0x40000EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public int maxSyncErrorFrames;

	[Token(Token = "0x40000F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	protected int _framesDropped;

	[Token(Token = "0x40000F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	protected int _syncEvents;

	[Token(Token = "0x40000F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	protected bool lastPlay;

	[Token(Token = "0x17000043")]
	public int framesSkipped
	{
		[Token(Token = "0x60001BB")]
		[Address(RVA = "0x1A38070", Offset = "0x1A38070", VA = "0x1A38070")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000044")]
	public int syncEvents
	{
		[Token(Token = "0x60001BC")]
		[Address(RVA = "0x1A38078", Offset = "0x1A38078", VA = "0x1A38078")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000045")]
	public float framerate
	{
		[Token(Token = "0x60001BD")]
		[Address(RVA = "0x1A37490", Offset = "0x1A37490", VA = "0x1A37490")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000046")]
	public float lengthSeconds
	{
		[Token(Token = "0x60001BE")]
		[Address(RVA = "0x1A38080", Offset = "0x1A38080", VA = "0x1A38080")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x14000002")]
	public event MovieEvent OnPlay
	{
		[Token(Token = "0x60001B7")]
		[Address(RVA = "0x1A37CC0", Offset = "0x1A37CC0", VA = "0x1A37CC0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C2E8", Offset = "0xB4C2E8")]
		add
		{
		}
		[Token(Token = "0x60001B8")]
		[Address(RVA = "0x1A37DAC", Offset = "0x1A37DAC", VA = "0x1A37DAC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C2F8", Offset = "0xB4C2F8")]
		remove
		{
		}
	}

	[Token(Token = "0x14000003")]
	public event MovieEvent OnStop
	{
		[Token(Token = "0x60001B9")]
		[Address(RVA = "0x1A37E98", Offset = "0x1A37E98", VA = "0x1A37E98")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C308", Offset = "0xB4C308")]
		add
		{
		}
		[Token(Token = "0x60001BA")]
		[Address(RVA = "0x1A37F84", Offset = "0x1A37F84", VA = "0x1A37F84")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C318", Offset = "0xB4C318")]
		remove
		{
		}
	}

	[Token(Token = "0x60001BF")]
	[Address(RVA = "0x1A36580", Offset = "0x1A36580", VA = "0x1A36580")]
	protected void Load(MovieSource source, [Optional] LoadOptions loadOptions)
	{
	}

	[Token(Token = "0x60001C0")]
	[Address(RVA = "0x1A38368", Offset = "0x1A38368", VA = "0x1A38368")]
	[AttributeAttribute(Name = "ContextMenu", RVA = "0xB4C328", Offset = "0xB4C328")]
	public void Unload()
	{
	}

	[Token(Token = "0x60001C1")]
	[Address(RVA = "0x1A380B0", Offset = "0x1A380B0", VA = "0x1A380B0")]
	protected void Bind()
	{
	}

	[Token(Token = "0x60001C2")]
	[Address(RVA = "0x1A3675C", Offset = "0x1A3675C", VA = "0x1A3675C")]
	protected void DrawFramebufferToScreen()
	{
	}

	[Token(Token = "0x60001C3")]
	[Address(RVA = "0x1A36CF4", Offset = "0x1A36CF4", VA = "0x1A36CF4")]
	protected void HandlePlayStop()
	{
	}

	[Token(Token = "0x60001C4")]
	[Address(RVA = "0x1A37C18", Offset = "0x1A37C18", VA = "0x1A37C18")]
	protected MoviePlayerBase()
	{
	}
}
[Token(Token = "0x200003D")]
public class MovieStreamer : MoviePlayerBase
{
	[Token(Token = "0x40000F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public string sourceUrl;

	[Token(Token = "0x40000F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public LoadOptions loadOptions;

	[Token(Token = "0x40000F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public string status;

	[Token(Token = "0x40000F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public long bytesReceived;

	[Token(Token = "0x40000F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private int lastVideoFrame;

	[Token(Token = "0x17000047")]
	public bool IsConnected
	{
		[Token(Token = "0x60001C5")]
		[Address(RVA = "0x1A38478", Offset = "0x1A38478", VA = "0x1A38478")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60001C6")]
	[Address(RVA = "0x1A385D4", Offset = "0x1A385D4", VA = "0x1A385D4")]
	public bool Load(string srcUrl, [Optional] LoadOptions loadOptions)
	{
		return default(bool);
	}

	[Token(Token = "0x60001C7")]
	[Address(RVA = "0x1A38728", Offset = "0x1A38728", VA = "0x1A38728")]
	[AttributeAttribute(Name = "ContextMenu", RVA = "0xB4C360", Offset = "0xB4C360")]
	public bool ReConnect()
	{
		return default(bool);
	}

	[Token(Token = "0x60001C8")]
	[Address(RVA = "0x1A3876C", Offset = "0x1A3876C", VA = "0x1A3876C")]
	private void Start()
	{
	}

	[Token(Token = "0x60001C9")]
	[Address(RVA = "0x1A38770", Offset = "0x1A38770", VA = "0x1A38770")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x60001CA")]
	[Address(RVA = "0x1A3894C", Offset = "0x1A3894C", VA = "0x1A3894C")]
	private void Update()
	{
	}

	[Token(Token = "0x60001CB")]
	[Address(RVA = "0x1A38B10", Offset = "0x1A38B10", VA = "0x1A38B10")]
	protected void HandleFrameDecode()
	{
	}

	[Token(Token = "0x60001CC")]
	[Address(RVA = "0x1A38D00", Offset = "0x1A38D00", VA = "0x1A38D00")]
	public MovieStreamer()
	{
	}
}
[Token(Token = "0x200003E")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB46E5C", Offset = "0xB46E5C")]
public class AlwaysSelectMyParent : MonoBehaviour
{
	[Token(Token = "0x60001CD")]
	[Address(RVA = "0x1DFB260", Offset = "0x1DFB260", VA = "0x1DFB260")]
	public AlwaysSelectMyParent()
	{
	}
}
[Token(Token = "0x200003F")]
public class ShowInDebug : PropertyAttribute
{
	[Token(Token = "0x60001CE")]
	[Address(RVA = "0x1B2F684", Offset = "0x1B2F684", VA = "0x1B2F684")]
	public ShowInDebug()
	{
	}
}
[Token(Token = "0x2000040")]
public class SfxrAudioPlayer : MonoBehaviour
{
	[Token(Token = "0x40000F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool isDestroyed;

	[Token(Token = "0x40000FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	private bool needsToDestroy;

	[Token(Token = "0x40000FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	private bool runningInEditMode;

	[Token(Token = "0x40000FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private SfxrSynth sfxrSynth;

	[Token(Token = "0x60001CF")]
	[Address(RVA = "0x1B27B0C", Offset = "0x1B27B0C", VA = "0x1B27B0C")]
	private void Start()
	{
	}

	[Token(Token = "0x60001D0")]
	[Address(RVA = "0x1B27C18", Offset = "0x1B27C18", VA = "0x1B27C18")]
	private void Update()
	{
	}

	[Token(Token = "0x60001D1")]
	[Address(RVA = "0x1B27D34", Offset = "0x1B27D34", VA = "0x1B27D34")]
	private void OnAudioFilterRead(float[] __data, int __channels)
	{
	}

	[Token(Token = "0x60001D2")]
	[Address(RVA = "0x1B27FDC", Offset = "0x1B27FDC", VA = "0x1B27FDC")]
	public void SetSfxrSynth(SfxrSynth __sfxrSynth)
	{
	}

	[Token(Token = "0x60001D3")]
	[Address(RVA = "0x1B27FE4", Offset = "0x1B27FE4", VA = "0x1B27FE4")]
	public void SetRunningInEditMode(bool __runningInEditMode)
	{
	}

	[Token(Token = "0x60001D4")]
	[Address(RVA = "0x1B27C3C", Offset = "0x1B27C3C", VA = "0x1B27C3C")]
	public void Destroy()
	{
	}

	[Token(Token = "0x60001D5")]
	[Address(RVA = "0x1B27FF0", Offset = "0x1B27FF0", VA = "0x1B27FF0")]
	public SfxrAudioPlayer()
	{
	}
}
[Token(Token = "0x2000041")]
public class SfxrCacheSurrogate : MonoBehaviour
{
	[Token(Token = "0x20002B5")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49AC4", Offset = "0xB49AC4")]
	private sealed class <CacheSoundAsynchronously>d__1 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000DE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000DE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000DE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SfxrSynth __synth;

		[Token(Token = "0x4000DE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action __callback;

		[Token(Token = "0x4000DE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public SfxrCacheSurrogate <>4__this;

		[Token(Token = "0x1700023E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001531")]
			[Address(RVA = "0x1B288D8", Offset = "0x1B288D8", VA = "0x1B288D8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700023F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001533")]
			[Address(RVA = "0x1B28948", Offset = "0x1B28948", VA = "0x1B28948", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600152E")]
		[Address(RVA = "0x1B280D4", Offset = "0x1B280D4", VA = "0x1B280D4")]
		[DebuggerHidden]
		public <CacheSoundAsynchronously>d__1(int <>1__state)
		{
		}

		[Token(Token = "0x600152F")]
		[Address(RVA = "0x1B2865C", Offset = "0x1B2865C", VA = "0x1B2865C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001530")]
		[Address(RVA = "0x1B28660", Offset = "0x1B28660", VA = "0x1B28660", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001532")]
		[Address(RVA = "0x1B288E0", Offset = "0x1B288E0", VA = "0x1B288E0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002B6")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49AD4", Offset = "0xB49AD4")]
	private sealed class <CacheMutationsAsynchronously>d__3 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000DE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000DEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000DEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SfxrSynth __synth;

		[Token(Token = "0x4000DEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public uint __mutationsNum;

		[Token(Token = "0x4000DED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float __mutationAmount;

		[Token(Token = "0x4000DEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Action __callback;

		[Token(Token = "0x4000DEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public SfxrCacheSurrogate <>4__this;

		[Token(Token = "0x17000240")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001537")]
			[Address(RVA = "0x1B285E4", Offset = "0x1B285E4", VA = "0x1B285E4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000241")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001539")]
			[Address(RVA = "0x1B28654", Offset = "0x1B28654", VA = "0x1B28654", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001534")]
		[Address(RVA = "0x1B28218", Offset = "0x1B28218", VA = "0x1B28218")]
		[DebuggerHidden]
		public <CacheMutationsAsynchronously>d__3(int <>1__state)
		{
		}

		[Token(Token = "0x6001535")]
		[Address(RVA = "0x1B2824C", Offset = "0x1B2824C", VA = "0x1B2824C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001536")]
		[Address(RVA = "0x1B28250", Offset = "0x1B28250", VA = "0x1B28250", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001538")]
		[Address(RVA = "0x1B285EC", Offset = "0x1B285EC", VA = "0x1B285EC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x60001D6")]
	[Address(RVA = "0x1B27FF8", Offset = "0x1B27FF8", VA = "0x1B27FF8")]
	public void CacheSound(SfxrSynth __synth, Action __callback)
	{
	}

	[Token(Token = "0x60001D7")]
	[Address(RVA = "0x1B28024", Offset = "0x1B28024", VA = "0x1B28024")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB4C398", Offset = "0xB4C398")]
	private IEnumerator CacheSoundAsynchronously(SfxrSynth __synth, Action __callback)
	{
		return null;
	}

	[Token(Token = "0x60001D8")]
	[Address(RVA = "0x1B28100", Offset = "0x1B28100", VA = "0x1B28100")]
	public void CacheMutations(SfxrSynth __synth, uint __mutationsNum, float __mutationAmount, Action __callback)
	{
	}

	[Token(Token = "0x60001D9")]
	[Address(RVA = "0x1B2812C", Offset = "0x1B2812C", VA = "0x1B2812C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB4C3FC", Offset = "0xB4C3FC")]
	private IEnumerator CacheMutationsAsynchronously(SfxrSynth __synth, uint __mutationsNum, float __mutationAmount, Action __callback)
	{
		return null;
	}

	[Token(Token = "0x60001DA")]
	[Address(RVA = "0x1B28244", Offset = "0x1B28244", VA = "0x1B28244")]
	public SfxrCacheSurrogate()
	{
	}
}
[Token(Token = "0x2000042")]
public class SfxrParams
{
	[Token(Token = "0x40000FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool paramsDirty;

	[Token(Token = "0x40000FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private uint _waveType;

	[Token(Token = "0x40000FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float _masterVolume;

	[Token(Token = "0x4000100")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float _attackTime;

	[Token(Token = "0x4000101")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float _sustainTime;

	[Token(Token = "0x4000102")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float _sustainPunch;

	[Token(Token = "0x4000103")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float _decayTime;

	[Token(Token = "0x4000104")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float _startFrequency;

	[Token(Token = "0x4000105")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float _minFrequency;

	[Token(Token = "0x4000106")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float _slide;

	[Token(Token = "0x4000107")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float _deltaSlide;

	[Token(Token = "0x4000108")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float _vibratoDepth;

	[Token(Token = "0x4000109")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float _vibratoSpeed;

	[Token(Token = "0x400010A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float _changeAmount;

	[Token(Token = "0x400010B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float _changeSpeed;

	[Token(Token = "0x400010C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float _squareDuty;

	[Token(Token = "0x400010D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float _dutySweep;

	[Token(Token = "0x400010E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private float _repeatSpeed;

	[Token(Token = "0x400010F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float _phaserOffset;

	[Token(Token = "0x4000110")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float _phaserSweep;

	[Token(Token = "0x4000111")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float _lpFilterCutoff;

	[Token(Token = "0x4000112")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private float _lpFilterCutoffSweep;

	[Token(Token = "0x4000113")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float _lpFilterResonance;

	[Token(Token = "0x4000114")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private float _hpFilterCutoff;

	[Token(Token = "0x4000115")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float _hpFilterCutoffSweep;

	[Token(Token = "0x4000116")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private float _changeRepeat;

	[Token(Token = "0x4000117")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float _changeAmount2;

	[Token(Token = "0x4000118")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private float _changeSpeed2;

	[Token(Token = "0x4000119")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private float _compressionAmount;

	[Token(Token = "0x400011A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private float _overtones;

	[Token(Token = "0x400011B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private float _overtoneFalloff;

	[Token(Token = "0x400011C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private float _bitCrush;

	[Token(Token = "0x400011D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private float _bitCrushSweep;

	[Token(Token = "0x17000048")]
	public uint waveType
	{
		[Token(Token = "0x60001DB")]
		[Address(RVA = "0x1B28950", Offset = "0x1B28950", VA = "0x1B28950")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x60001DC")]
		[Address(RVA = "0x1B28958", Offset = "0x1B28958", VA = "0x1B28958")]
		set
		{
		}
	}

	[Token(Token = "0x17000049")]
	public float masterVolume
	{
		[Token(Token = "0x60001DD")]
		[Address(RVA = "0x1B28990", Offset = "0x1B28990", VA = "0x1B28990")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60001DE")]
		[Address(RVA = "0x1B28998", Offset = "0x1B28998", VA = "0x1B28998")]
		set
		{
		}
	}

	[Token(Token = "0x1700004A")]
	public float attackTime
	{
		[Token(Token = "0x60001DF")]
		[Address(RVA = "0x1B28A24", Offset = "0x1B28A24", VA = "0x1B28A24")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60001E0")]
		[Address(RVA = "0x1B28A2C", Offset = "0x1B28A2C", VA = "0x1B28A2C")]
		set
		{
		}
	}

	[Token(Token = "0x1700004B")]
	public float sustainTime
	{
		[Token(Token = "0x60001E1")]
		[Address(RVA = "0x1B28AB8", Offset = "0x1B28AB8", VA = "0x1B28AB8")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60001E2")]
		[Address(RVA = "0x1B28AC0", Offset = "0x1B28AC0", VA = "0x1B28AC0")]
		set
		{
		}
	}

	[Token(Token = "0x1700004C")]
	public float sustainPunch
	{
		[Token(Token = "0x60001E3")]
		[Address(RVA = "0x1B28B4C", Offset = "0x1B28B4C", VA = "0x1B28B4C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60001E4")]
		[Address(RVA = "0x1B28B54", Offset = "0x1B28B54", VA = "0x1B28B54")]
		set
		{
		}
	}

	[Token(Token = "0x1700004D")]
	public float decayTime
	{
		[Token(Token = "0x60001E5")]
		[Address(RVA = "0x1B28BE0", Offset = "0x1B28BE0", VA = "0x1B28BE0")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60001E6")]
		[Address(RVA = "0x1B28BE8", Offset = "0x1B28BE8", VA = "0x1B28BE8")]
		set
		{
		}
	}

	[Token(Token = "0x1700004E")]
	public float startFrequency
	{
		[Token(Token = "0x60001E7")]
		[Address(RVA = "0x1B28C74", Offset = "0x1B28C74", VA = "0x1B28C74")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60001E8")]
		[Address(RVA = "0x1B28C7C", Offset = "0x1B28C7C", VA = "0x1B28C7C")]
		set
		{
		}
	}

	[Token(Token = "0x1700004F")]
	public float minFrequency
	{
		[Token(Token = "0x60001E9")]
		[Address(RVA = "0x1B28D08", Offset = "0x1B28D08", VA = "0x1B28D08")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60001EA")]
		[Address(RVA = "0x1B28D10", Offset = "0x1B28D10", VA = "0x1B28D10")]
		set
		{
		}
	}

	[Token(Token = "0x17000050")]
	public float slide
	{
		[Token(Token = "0x60001EB")]
		[Address(RVA = "0x1B28D9C", Offset = "0x1B28D9C", VA = "0x1B28D9C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60001EC")]
		[Address(RVA = "0x1B28DA4", Offset = "0x1B28DA4", VA = "0x1B28DA4")]
		set
		{
		}
	}

	[Token(Token = "0x17000051")]
	public float deltaSlide
	{
		[Token(Token = "0x60001ED")]
		[Address(RVA = "0x1B28E30", Offset = "0x1B28E30", VA = "0x1B28E30")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60001EE")]
		[Address(RVA = "0x1B28E38", Offset = "0x1B28E38", VA = "0x1B28E38")]
		set
		{
		}
	}

	[Token(Token = "0x17000052")]
	public float vibratoDepth
	{
		[Token(Token = "0x60001EF")]
		[Address(RVA = "0x1B28EC4", Offset = "0x1B28EC4", VA = "0x1B28EC4")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60001F0")]
		[Address(RVA = "0x1B28ECC", Offset = "0x1B28ECC", VA = "0x1B28ECC")]
		set
		{
		}
	}

	[Token(Token = "0x17000053")]
	public float vibratoSpeed
	{
		[Token(Token = "0x60001F1")]
		[Address(RVA = "0x1B28F58", Offset = "0x1B28F58", VA = "0x1B28F58")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60001F2")]
		[Address(RVA = "0x1B28F60", Offset = "0x1B28F60", VA = "0x1B28F60")]
		set
		{
		}
	}

	[Token(Token = "0x17000054")]
	public float changeAmount
	{
		[Token(Token = "0x60001F3")]
		[Address(RVA = "0x1B28FEC", Offset = "0x1B28FEC", VA = "0x1B28FEC")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60001F4")]
		[Address(RVA = "0x1B28FF4", Offset = "0x1B28FF4", VA = "0x1B28FF4")]
		set
		{
		}
	}

	[Token(Token = "0x17000055")]
	public float changeSpeed
	{
		[Token(Token = "0x60001F5")]
		[Address(RVA = "0x1B29080", Offset = "0x1B29080", VA = "0x1B29080")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60001F6")]
		[Address(RVA = "0x1B29088", Offset = "0x1B29088", VA = "0x1B29088")]
		set
		{
		}
	}

	[Token(Token = "0x17000056")]
	public float squareDuty
	{
		[Token(Token = "0x60001F7")]
		[Address(RVA = "0x1B29114", Offset = "0x1B29114", VA = "0x1B29114")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60001F8")]
		[Address(RVA = "0x1B2911C", Offset = "0x1B2911C", VA = "0x1B2911C")]
		set
		{
		}
	}

	[Token(Token = "0x17000057")]
	public float dutySweep
	{
		[Token(Token = "0x60001F9")]
		[Address(RVA = "0x1B291A8", Offset = "0x1B291A8", VA = "0x1B291A8")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60001FA")]
		[Address(RVA = "0x1B291B0", Offset = "0x1B291B0", VA = "0x1B291B0")]
		set
		{
		}
	}

	[Token(Token = "0x17000058")]
	public float repeatSpeed
	{
		[Token(Token = "0x60001FB")]
		[Address(RVA = "0x1B2923C", Offset = "0x1B2923C", VA = "0x1B2923C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60001FC")]
		[Address(RVA = "0x1B29244", Offset = "0x1B29244", VA = "0x1B29244")]
		set
		{
		}
	}

	[Token(Token = "0x17000059")]
	public float phaserOffset
	{
		[Token(Token = "0x60001FD")]
		[Address(RVA = "0x1B292D0", Offset = "0x1B292D0", VA = "0x1B292D0")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60001FE")]
		[Address(RVA = "0x1B292D8", Offset = "0x1B292D8", VA = "0x1B292D8")]
		set
		{
		}
	}

	[Token(Token = "0x1700005A")]
	public float phaserSweep
	{
		[Token(Token = "0x60001FF")]
		[Address(RVA = "0x1B29364", Offset = "0x1B29364", VA = "0x1B29364")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000200")]
		[Address(RVA = "0x1B2936C", Offset = "0x1B2936C", VA = "0x1B2936C")]
		set
		{
		}
	}

	[Token(Token = "0x1700005B")]
	public float lpFilterCutoff
	{
		[Token(Token = "0x6000201")]
		[Address(RVA = "0x1B293F8", Offset = "0x1B293F8", VA = "0x1B293F8")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000202")]
		[Address(RVA = "0x1B29400", Offset = "0x1B29400", VA = "0x1B29400")]
		set
		{
		}
	}

	[Token(Token = "0x1700005C")]
	public float lpFilterCutoffSweep
	{
		[Token(Token = "0x6000203")]
		[Address(RVA = "0x1B2948C", Offset = "0x1B2948C", VA = "0x1B2948C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000204")]
		[Address(RVA = "0x1B29494", Offset = "0x1B29494", VA = "0x1B29494")]
		set
		{
		}
	}

	[Token(Token = "0x1700005D")]
	public float lpFilterResonance
	{
		[Token(Token = "0x6000205")]
		[Address(RVA = "0x1B29520", Offset = "0x1B29520", VA = "0x1B29520")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000206")]
		[Address(RVA = "0x1B29528", Offset = "0x1B29528", VA = "0x1B29528")]
		set
		{
		}
	}

	[Token(Token = "0x1700005E")]
	public float hpFilterCutoff
	{
		[Token(Token = "0x6000207")]
		[Address(RVA = "0x1B295B4", Offset = "0x1B295B4", VA = "0x1B295B4")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000208")]
		[Address(RVA = "0x1B295BC", Offset = "0x1B295BC", VA = "0x1B295BC")]
		set
		{
		}
	}

	[Token(Token = "0x1700005F")]
	public float hpFilterCutoffSweep
	{
		[Token(Token = "0x6000209")]
		[Address(RVA = "0x1B29648", Offset = "0x1B29648", VA = "0x1B29648")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600020A")]
		[Address(RVA = "0x1B29650", Offset = "0x1B29650", VA = "0x1B29650")]
		set
		{
		}
	}

	[Token(Token = "0x17000060")]
	public float changeRepeat
	{
		[Token(Token = "0x600020B")]
		[Address(RVA = "0x1B296DC", Offset = "0x1B296DC", VA = "0x1B296DC")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600020C")]
		[Address(RVA = "0x1B296E4", Offset = "0x1B296E4", VA = "0x1B296E4")]
		set
		{
		}
	}

	[Token(Token = "0x17000061")]
	public float changeAmount2
	{
		[Token(Token = "0x600020D")]
		[Address(RVA = "0x1B29770", Offset = "0x1B29770", VA = "0x1B29770")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600020E")]
		[Address(RVA = "0x1B29778", Offset = "0x1B29778", VA = "0x1B29778")]
		set
		{
		}
	}

	[Token(Token = "0x17000062")]
	public float changeSpeed2
	{
		[Token(Token = "0x600020F")]
		[Address(RVA = "0x1B29804", Offset = "0x1B29804", VA = "0x1B29804")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000210")]
		[Address(RVA = "0x1B2980C", Offset = "0x1B2980C", VA = "0x1B2980C")]
		set
		{
		}
	}

	[Token(Token = "0x17000063")]
	public float compressionAmount
	{
		[Token(Token = "0x6000211")]
		[Address(RVA = "0x1B29898", Offset = "0x1B29898", VA = "0x1B29898")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000212")]
		[Address(RVA = "0x1B298A0", Offset = "0x1B298A0", VA = "0x1B298A0")]
		set
		{
		}
	}

	[Token(Token = "0x17000064")]
	public float overtones
	{
		[Token(Token = "0x6000213")]
		[Address(RVA = "0x1B2992C", Offset = "0x1B2992C", VA = "0x1B2992C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000214")]
		[Address(RVA = "0x1B29934", Offset = "0x1B29934", VA = "0x1B29934")]
		set
		{
		}
	}

	[Token(Token = "0x17000065")]
	public float overtoneFalloff
	{
		[Token(Token = "0x6000215")]
		[Address(RVA = "0x1B299C0", Offset = "0x1B299C0", VA = "0x1B299C0")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000216")]
		[Address(RVA = "0x1B299C8", Offset = "0x1B299C8", VA = "0x1B299C8")]
		set
		{
		}
	}

	[Token(Token = "0x17000066")]
	public float bitCrush
	{
		[Token(Token = "0x6000217")]
		[Address(RVA = "0x1B29A54", Offset = "0x1B29A54", VA = "0x1B29A54")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000218")]
		[Address(RVA = "0x1B29A5C", Offset = "0x1B29A5C", VA = "0x1B29A5C")]
		set
		{
		}
	}

	[Token(Token = "0x17000067")]
	public float bitCrushSweep
	{
		[Token(Token = "0x6000219")]
		[Address(RVA = "0x1B29AE8", Offset = "0x1B29AE8", VA = "0x1B29AE8")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600021A")]
		[Address(RVA = "0x1B29AF0", Offset = "0x1B29AF0", VA = "0x1B29AF0")]
		set
		{
		}
	}

	[Token(Token = "0x600021B")]
	[Address(RVA = "0x1B29B7C", Offset = "0x1B29B7C", VA = "0x1B29B7C")]
	public void GeneratePickupCoin()
	{
	}

	[Token(Token = "0x600021C")]
	[Address(RVA = "0x1B29DC0", Offset = "0x1B29DC0", VA = "0x1B29DC0")]
	public void GenerateLaserShoot()
	{
	}

	[Token(Token = "0x600021D")]
	[Address(RVA = "0x1B2A12C", Offset = "0x1B2A12C", VA = "0x1B2A12C")]
	public void GenerateExplosion()
	{
	}

	[Token(Token = "0x600021E")]
	[Address(RVA = "0x1B2A404", Offset = "0x1B2A404", VA = "0x1B2A404")]
	public void GeneratePowerup()
	{
	}

	[Token(Token = "0x600021F")]
	[Address(RVA = "0x1B2A608", Offset = "0x1B2A608", VA = "0x1B2A608")]
	public void GenerateHitHurt()
	{
	}

	[Token(Token = "0x6000220")]
	[Address(RVA = "0x1B2A7C0", Offset = "0x1B2A7C0", VA = "0x1B2A7C0")]
	public void GenerateJump()
	{
	}

	[Token(Token = "0x6000221")]
	[Address(RVA = "0x1B2A954", Offset = "0x1B2A954", VA = "0x1B2A954")]
	public void GenerateBlipSelect()
	{
	}

	[Token(Token = "0x6000222")]
	[Address(RVA = "0x1B29D20", Offset = "0x1B29D20", VA = "0x1B29D20")]
	protected void resetParams()
	{
	}

	[Token(Token = "0x6000223")]
	[Address(RVA = "0x1B2AA98", Offset = "0x1B2AA98", VA = "0x1B2AA98")]
	public void Mutate(float __mutation = 0.05f)
	{
	}

	[Token(Token = "0x6000224")]
	[Address(RVA = "0x1B2B1E4", Offset = "0x1B2B1E4", VA = "0x1B2B1E4")]
	public void Randomize()
	{
	}

	[Token(Token = "0x6000225")]
	[Address(RVA = "0x1B2B774", Offset = "0x1B2B774", VA = "0x1B2B774")]
	public string GetSettingsStringLegacy()
	{
		return null;
	}

	[Token(Token = "0x6000226")]
	[Address(RVA = "0x1B2BB70", Offset = "0x1B2BB70", VA = "0x1B2BB70")]
	public string GetSettingsString()
	{
		return null;
	}

	[Token(Token = "0x6000227")]
	[Address(RVA = "0x1B2BFD0", Offset = "0x1B2BFD0", VA = "0x1B2BFD0")]
	public bool SetSettingsString(string __string)
	{
		return default(bool);
	}

	[Token(Token = "0x6000228")]
	[Address(RVA = "0x1B2CC18", Offset = "0x1B2CC18", VA = "0x1B2CC18")]
	public SfxrParams Clone()
	{
		return null;
	}

	[Token(Token = "0x6000229")]
	[Address(RVA = "0x1B2CCB4", Offset = "0x1B2CCB4", VA = "0x1B2CCB4")]
	public void CopyFrom(SfxrParams __params, bool __makeDirty = false)
	{
	}

	[Token(Token = "0x600022A")]
	[Address(RVA = "0x1B2B72C", Offset = "0x1B2B72C", VA = "0x1B2B72C")]
	private float Pow(float __pbase, int __power)
	{
		return default(float);
	}

	[Token(Token = "0x600022B")]
	[Address(RVA = "0x1B2BAD4", Offset = "0x1B2BAD4", VA = "0x1B2BAD4")]
	private string To4DP(float __value)
	{
		return null;
	}

	[Token(Token = "0x600022C")]
	[Address(RVA = "0x1B2CB7C", Offset = "0x1B2CB7C", VA = "0x1B2CB7C")]
	private uint ParseUint(string __value)
	{
		return default(uint);
	}

	[Token(Token = "0x600022D")]
	[Address(RVA = "0x1B2CBC8", Offset = "0x1B2CBC8", VA = "0x1B2CBC8")]
	private float ParseFloat(string __value)
	{
		return default(float);
	}

	[Token(Token = "0x600022E")]
	[Address(RVA = "0x1B29D80", Offset = "0x1B29D80", VA = "0x1B29D80")]
	private float GetRandom()
	{
		return default(float);
	}

	[Token(Token = "0x600022F")]
	[Address(RVA = "0x1B29D9C", Offset = "0x1B29D9C", VA = "0x1B29D9C")]
	private bool GetRandomBool()
	{
		return default(bool);
	}

	[Token(Token = "0x6000230")]
	[Address(RVA = "0x1B2CCA4", Offset = "0x1B2CCA4", VA = "0x1B2CCA4")]
	public SfxrParams()
	{
	}
}
[Token(Token = "0x2000043")]
public class SfxrSynth
{
	[Token(Token = "0x20002B7")]
	private enum Endian
	{
		[Token(Token = "0x4000DF1")]
		BIG_ENDIAN,
		[Token(Token = "0x4000DF2")]
		LITTLE_ENDIAN
	}

	[Token(Token = "0x400011E")]
	private const int LO_RES_NOISE_PERIOD = 8;

	[Token(Token = "0x400011F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private SfxrParams _params;

	[Token(Token = "0x4000120")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private GameObject _gameObject;

	[Token(Token = "0x4000121")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private SfxrAudioPlayer _audioPlayer;

	[Token(Token = "0x4000122")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Transform _parentTransform;

	[Token(Token = "0x4000123")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool _mutation;

	[Token(Token = "0x4000124")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float[] _cachedWave;

	[Token(Token = "0x4000125")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private uint _cachedWavePos;

	[Token(Token = "0x4000126")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private bool _cachingNormal;

	[Token(Token = "0x4000127")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int _cachingMutation;

	[Token(Token = "0x4000128")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float[] _cachedMutation;

	[Token(Token = "0x4000129")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private uint _cachedMutationPos;

	[Token(Token = "0x400012A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float[][] _cachedMutations;

	[Token(Token = "0x400012B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private uint _cachedMutationsNum;

	[Token(Token = "0x400012C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private float _cachedMutationAmount;

	[Token(Token = "0x400012D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private bool _cachingAsync;

	[Token(Token = "0x400012E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float[] _waveData;

	[Token(Token = "0x400012F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private uint _waveDataPos;

	[Token(Token = "0x4000130")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private SfxrParams _original;

	[Token(Token = "0x4000131")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private bool _finished;

	[Token(Token = "0x4000132")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private float _masterVolume;

	[Token(Token = "0x4000133")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private uint _waveType;

	[Token(Token = "0x4000134")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private float _envelopeVolume;

	[Token(Token = "0x4000135")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private int _envelopeStage;

	[Token(Token = "0x4000136")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private float _envelopeTime;

	[Token(Token = "0x4000137")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private float _envelopeLength;

	[Token(Token = "0x4000138")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private float _envelopeLength0;

	[Token(Token = "0x4000139")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private float _envelopeLength1;

	[Token(Token = "0x400013A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	private float _envelopeLength2;

	[Token(Token = "0x400013B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private float _envelopeOverLength0;

	[Token(Token = "0x400013C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private float _envelopeOverLength1;

	[Token(Token = "0x400013D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private float _envelopeOverLength2;

	[Token(Token = "0x400013E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	private uint _envelopeFullLength;

	[Token(Token = "0x400013F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private float _sustainPunch;

	[Token(Token = "0x4000140")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	private int _phase;

	[Token(Token = "0x4000141")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private float _pos;

	[Token(Token = "0x4000142")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	private float _period;

	[Token(Token = "0x4000143")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private float _periodTemp;

	[Token(Token = "0x4000144")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	private int _periodTempInt;

	[Token(Token = "0x4000145")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private float _maxPeriod;

	[Token(Token = "0x4000146")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	private float _slide;

	[Token(Token = "0x4000147")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private float _deltaSlide;

	[Token(Token = "0x4000148")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	private float _minFrequency;

	[Token(Token = "0x4000149")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private float _vibratoPhase;

	[Token(Token = "0x400014A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	private float _vibratoSpeed;

	[Token(Token = "0x400014B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private float _vibratoAmplitude;

	[Token(Token = "0x400014C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
	private float _changeAmount;

	[Token(Token = "0x400014D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private int _changeTime;

	[Token(Token = "0x400014E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	private int _changeLimit;

	[Token(Token = "0x400014F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private float _squareDuty;

	[Token(Token = "0x4000150")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
	private float _dutySweep;

	[Token(Token = "0x4000151")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private int _repeatTime;

	[Token(Token = "0x4000152")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
	private int _repeatLimit;

	[Token(Token = "0x4000153")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private bool _phaser;

	[Token(Token = "0x4000154")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
	private float _phaserOffset;

	[Token(Token = "0x4000155")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private float _phaserDeltaOffset;

	[Token(Token = "0x4000156")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
	private int _phaserInt;

	[Token(Token = "0x4000157")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private int _phaserPos;

	[Token(Token = "0x4000158")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private float[] _phaserBuffer;

	[Token(Token = "0x4000159")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private bool _filters;

	[Token(Token = "0x400015A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
	private float _lpFilterPos;

	[Token(Token = "0x400015B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private float _lpFilterOldPos;

	[Token(Token = "0x400015C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
	private float _lpFilterDeltaPos;

	[Token(Token = "0x400015D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private float _lpFilterCutoff;

	[Token(Token = "0x400015E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
	private float _lpFilterDeltaCutoff;

	[Token(Token = "0x400015F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	private float _lpFilterDamping;

	[Token(Token = "0x4000160")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
	private bool _lpFilterOn;

	[Token(Token = "0x4000161")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	private float _hpFilterPos;

	[Token(Token = "0x4000162")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
	private float _hpFilterCutoff;

	[Token(Token = "0x4000163")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	private float _hpFilterDeltaCutoff;

	[Token(Token = "0x4000164")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
	private float _changePeriod;

	[Token(Token = "0x4000165")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	private int _changePeriodTime;

	[Token(Token = "0x4000166")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
	private bool _changeReached;

	[Token(Token = "0x4000167")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	private float _changeAmount2;

	[Token(Token = "0x4000168")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
	private int _changeTime2;

	[Token(Token = "0x4000169")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	private int _changeLimit2;

	[Token(Token = "0x400016A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
	private bool _changeReached2;

	[Token(Token = "0x400016B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	private int _overtones;

	[Token(Token = "0x400016C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
	private float _overtoneFalloff;

	[Token(Token = "0x400016D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	private float _bitcrushFreq;

	[Token(Token = "0x400016E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
	private float _bitcrushFreqSweep;

	[Token(Token = "0x400016F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	private float _bitcrushPhase;

	[Token(Token = "0x4000170")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
	private float _bitcrushLast;

	[Token(Token = "0x4000171")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	private float _compressionFactor;

	[Token(Token = "0x4000172")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	private float[] _noiseBuffer;

	[Token(Token = "0x4000173")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	private float[] _pinkNoiseBuffer;

	[Token(Token = "0x4000174")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	private PinkNumber _pinkNumber;

	[Token(Token = "0x4000175")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	private float[] _loResNoiseBuffer;

	[Token(Token = "0x4000176")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	private float _superSample;

	[Token(Token = "0x4000177")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C4")]
	private float _sample;

	[Token(Token = "0x4000178")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
	private float _sample2;

	[Token(Token = "0x4000179")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
	private float amp;

	[Token(Token = "0x400017A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
	private System.Random randomGenerator;

	[Token(Token = "0x17000068")]
	public SfxrParams parameters
	{
		[Token(Token = "0x6000231")]
		[Address(RVA = "0x1B2CD04", Offset = "0x1B2CD04", VA = "0x1B2CD04")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000232")]
		[Address(RVA = "0x1B2CD0C", Offset = "0x1B2CD0C", VA = "0x1B2CD0C")]
		set
		{
		}
	}

	[Token(Token = "0x6000233")]
	[Address(RVA = "0x1B2CD40", Offset = "0x1B2CD40", VA = "0x1B2CD40")]
	public static AudioClip Clip(string data)
	{
		return null;
	}

	[Token(Token = "0x6000234")]
	[Address(RVA = "0x1B2CF08", Offset = "0x1B2CF08", VA = "0x1B2CF08")]
	public static GameObject SoundObject(string data, [Optional] AudioMixerGroup mixer, float volume = 1f, int priority = 128, float maxDistance = 30f, bool loop = false)
	{
		return null;
	}

	[Token(Token = "0x6000235")]
	[Address(RVA = "0x1B2D1FC", Offset = "0x1B2D1FC", VA = "0x1B2D1FC")]
	public void Play()
	{
	}

	[Token(Token = "0x6000236")]
	[Address(RVA = "0x1B2DDD0", Offset = "0x1B2DDD0", VA = "0x1B2DDD0")]
	public void PlayMutated(float __mutationAmount = 0.05f, uint __mutationsNum = 15u)
	{
	}

	[Token(Token = "0x6000237")]
	[Address(RVA = "0x1B2D2C8", Offset = "0x1B2D2C8", VA = "0x1B2D2C8")]
	public void Stop()
	{
	}

	[Token(Token = "0x6000238")]
	[Address(RVA = "0x1B2E010", Offset = "0x1B2E010", VA = "0x1B2E010")]
	private int WriteSamples(float[] __originSamples, int __originPos, float[] __targetSamples, int __targetChannels)
	{
		return default(int);
	}

	[Token(Token = "0x6000239")]
	[Address(RVA = "0x1B27D7C", Offset = "0x1B27D7C", VA = "0x1B27D7C")]
	public bool GenerateAudioFilterData(float[] __data, int __channels)
	{
		return default(bool);
	}

	[Token(Token = "0x600023A")]
	[Address(RVA = "0x1B28760", Offset = "0x1B28760", VA = "0x1B28760")]
	public void CacheSound([Optional] Action __callback, bool __isFromCoroutine = false)
	{
	}

	[Token(Token = "0x600023B")]
	[Address(RVA = "0x1B28368", Offset = "0x1B28368", VA = "0x1B28368")]
	public void CacheMutations(uint __mutationsNum = 15u, float __mutationAmount = 0.05f, [Optional] Action __callback, bool __isFromCoroutine = false)
	{
	}

	[Token(Token = "0x600023C")]
	[Address(RVA = "0x1B2ED10", Offset = "0x1B2ED10", VA = "0x1B2ED10")]
	public void SetParentTransform(Transform __transform)
	{
	}

	[Token(Token = "0x600023D")]
	[Address(RVA = "0x1B2ED18", Offset = "0x1B2ED18", VA = "0x1B2ED18")]
	public byte[] GetWavFile(uint __sampleRate = 44100u, uint __bitDepth = 16u)
	{
		return null;
	}

	[Token(Token = "0x600023E")]
	[Address(RVA = "0x1B2CFCC", Offset = "0x1B2CFCC", VA = "0x1B2CFCC")]
	public GameObject GetSoundObject([Optional] AudioMixerGroup mixer, float volume = 1f, int priority = 128, float maxDistance = 30f, bool loop = false)
	{
		return null;
	}

	[Token(Token = "0x600023F")]
	[Address(RVA = "0x1B2CE5C", Offset = "0x1B2CE5C", VA = "0x1B2CE5C")]
	public AudioClip GetAudioClip()
	{
		return null;
	}

	[Token(Token = "0x6000240")]
	[Address(RVA = "0x1B2F490", Offset = "0x1B2F490", VA = "0x1B2F490")]
	private float[] GetWavData()
	{
		return null;
	}

	[Token(Token = "0x6000241")]
	[Address(RVA = "0x1B2D39C", Offset = "0x1B2D39C", VA = "0x1B2D39C")]
	private void Reset(bool __totalReset)
	{
	}

	[Token(Token = "0x6000242")]
	[Address(RVA = "0x1B2E134", Offset = "0x1B2E134", VA = "0x1B2E134")]
	private bool SynthWave(float[] __buffer, int __bufferPos, uint __length)
	{
		return default(bool);
	}

	[Token(Token = "0x6000243")]
	[Address(RVA = "0x1B2DCA4", Offset = "0x1B2DCA4", VA = "0x1B2DCA4")]
	private void createGameObject()
	{
	}

	[Token(Token = "0x6000244")]
	[Address(RVA = "0x1B2F514", Offset = "0x1B2F514", VA = "0x1B2F514")]
	private void fixGameObjectParent()
	{
	}

	[Token(Token = "0x6000245")]
	[Address(RVA = "0x1B2DFCC", Offset = "0x1B2DFCC", VA = "0x1B2DFCC")]
	private float getRandom()
	{
		return default(float);
	}

	[Token(Token = "0x6000246")]
	[Address(RVA = "0x1B2F2E8", Offset = "0x1B2F2E8", VA = "0x1B2F2E8")]
	private void writeShortToBytes(byte[] __bytes, ref int __position, short __newShort, Endian __endian)
	{
	}

	[Token(Token = "0x6000247")]
	[Address(RVA = "0x1B2F1D4", Offset = "0x1B2F1D4", VA = "0x1B2F1D4")]
	private void writeUintToBytes(byte[] __bytes, ref int __position, uint __newUint, Endian __endian)
	{
	}

	[Token(Token = "0x6000248")]
	[Address(RVA = "0x1B2F3B4", Offset = "0x1B2F3B4", VA = "0x1B2F3B4")]
	private void writeBytes(byte[] __bytes, ref int __position, byte[] __newBytes, Endian __endian)
	{
	}

	[Token(Token = "0x6000249")]
	[Address(RVA = "0x1B2CDCC", Offset = "0x1B2CDCC", VA = "0x1B2CDCC")]
	public SfxrSynth()
	{
	}
}
[Token(Token = "0x2000044")]
public class PinkNumber
{
	[Token(Token = "0x400017B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private int max_key;

	[Token(Token = "0x400017C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private int key;

	[Token(Token = "0x400017D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private uint[] white_values;

	[Token(Token = "0x400017E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private uint range;

	[Token(Token = "0x400017F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private System.Random randomGenerator;

	[Token(Token = "0x4000180")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float rangeBy5;

	[Token(Token = "0x4000181")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private int last_key;

	[Token(Token = "0x4000182")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private uint sum;

	[Token(Token = "0x4000183")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private int diff;

	[Token(Token = "0x4000184")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int i;

	[Token(Token = "0x600024A")]
	[Address(RVA = "0x1B26990", Offset = "0x1B26990", VA = "0x1B26990")]
	public PinkNumber()
	{
	}

	[Token(Token = "0x600024B")]
	[Address(RVA = "0x1B26AF8", Offset = "0x1B26AF8", VA = "0x1B26AF8")]
	public float getNextValue()
	{
		return default(float);
	}
}
[Token(Token = "0x2000045")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB46E94", Offset = "0xB46E94")]
public class MouseLook : MonoBehaviour
{
	[Token(Token = "0x20002B8")]
	public enum RotationAxes
	{
		[Token(Token = "0x4000DF4")]
		MouseXAndY,
		[Token(Token = "0x4000DF5")]
		MouseX,
		[Token(Token = "0x4000DF6")]
		MouseY
	}

	[Token(Token = "0x4000185")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public RotationAxes axes;

	[Token(Token = "0x4000186")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float sensitivityX;

	[Token(Token = "0x4000187")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float sensitivityY;

	[Token(Token = "0x4000188")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float minimumX;

	[Token(Token = "0x4000189")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float maximumX;

	[Token(Token = "0x400018A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float minimumY;

	[Token(Token = "0x400018B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float maximumY;

	[Token(Token = "0x400018C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float rotationY;

	[Token(Token = "0x600024C")]
	[Address(RVA = "0x1A35CD4", Offset = "0x1A35CD4", VA = "0x1A35CD4")]
	private void Update()
	{
	}

	[Token(Token = "0x600024D")]
	[Address(RVA = "0x1A35F58", Offset = "0x1A35F58", VA = "0x1A35F58")]
	private void Start()
	{
	}

	[Token(Token = "0x600024E")]
	[Address(RVA = "0x1A36020", Offset = "0x1A36020", VA = "0x1A36020")]
	public MouseLook()
	{
	}
}
[Token(Token = "0x2000046")]
[ExecuteInEditMode]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB46ECC", Offset = "0xB46ECC")]
public class BlurEffect : MonoBehaviour
{
	[Token(Token = "0x400018D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int iterations;

	[Token(Token = "0x400018E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float blurSpread;

	[Token(Token = "0x400018F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Shader blurShader;

	[Token(Token = "0x4000190")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Material m_Material;

	[Token(Token = "0x17000069")]
	protected Material material
	{
		[Token(Token = "0x600024F")]
		[Address(RVA = "0x1E0EA00", Offset = "0x1E0EA00", VA = "0x1E0EA00")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000250")]
	[Address(RVA = "0x1E0EB40", Offset = "0x1E0EB40", VA = "0x1E0EB40")]
	protected void OnDisable()
	{
	}

	[Token(Token = "0x6000251")]
	[Address(RVA = "0x1E0EC3C", Offset = "0x1E0EC3C", VA = "0x1E0EC3C")]
	protected void Start()
	{
	}

	[Token(Token = "0x6000252")]
	[Address(RVA = "0x1E0ED10", Offset = "0x1E0ED10", VA = "0x1E0ED10")]
	public void FourTapCone(RenderTexture source, RenderTexture dest, int iteration)
	{
	}

	[Token(Token = "0x6000253")]
	[Address(RVA = "0x1E0EEEC", Offset = "0x1E0EEEC", VA = "0x1E0EEEC")]
	private void DownSample4x(RenderTexture source, RenderTexture dest)
	{
	}

	[Token(Token = "0x6000254")]
	[Address(RVA = "0x1E0F0A4", Offset = "0x1E0F0A4", VA = "0x1E0F0A4")]
	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
	}

	[Token(Token = "0x6000255")]
	[Address(RVA = "0x1E0F220", Offset = "0x1E0F220", VA = "0x1E0F220")]
	public BlurEffect()
	{
	}
}
[Token(Token = "0x2000047")]
[ExecuteInEditMode]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB46F18", Offset = "0xB46F18")]
public class ColorCorrectionEffect : ImageEffectBase
{
	[Token(Token = "0x4000191")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Texture textureRamp;

	[Token(Token = "0x6000257")]
	[Address(RVA = "0x1E1284C", Offset = "0x1E1284C", VA = "0x1E1284C")]
	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
	}

	[Token(Token = "0x6000258")]
	[Address(RVA = "0x1E129E0", Offset = "0x1E129E0", VA = "0x1E129E0")]
	public ColorCorrectionEffect()
	{
	}
}
[Token(Token = "0x2000048")]
[ExecuteInEditMode]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB46F64", Offset = "0xB46F64")]
public class ContrastStretchEffect : MonoBehaviour
{
	[Token(Token = "0x4000192")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float adaptationSpeed;

	[Token(Token = "0x4000193")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float limitMinimum;

	[Token(Token = "0x4000194")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float limitMaximum;

	[Token(Token = "0x4000195")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private RenderTexture[] adaptRenderTex;

	[Token(Token = "0x4000196")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int curAdaptIndex;

	[Token(Token = "0x4000197")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Shader shaderLum;

	[Token(Token = "0x4000198")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Material m_materialLum;

	[Token(Token = "0x4000199")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Shader shaderReduce;

	[Token(Token = "0x400019A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Material m_materialReduce;

	[Token(Token = "0x400019B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Shader shaderAdapt;

	[Token(Token = "0x400019C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Material m_materialAdapt;

	[Token(Token = "0x400019D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Shader shaderApply;

	[Token(Token = "0x400019E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Material m_materialApply;

	[Token(Token = "0x1700006A")]
	protected Material materialLum
	{
		[Token(Token = "0x6000259")]
		[Address(RVA = "0x1E134C4", Offset = "0x1E134C4", VA = "0x1E134C4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700006B")]
	protected Material materialReduce
	{
		[Token(Token = "0x600025A")]
		[Address(RVA = "0x1E1358C", Offset = "0x1E1358C", VA = "0x1E1358C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700006C")]
	protected Material materialAdapt
	{
		[Token(Token = "0x600025B")]
		[Address(RVA = "0x1E13654", Offset = "0x1E13654", VA = "0x1E13654")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700006D")]
	protected Material materialApply
	{
		[Token(Token = "0x600025C")]
		[Address(RVA = "0x1E1371C", Offset = "0x1E1371C", VA = "0x1E1371C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600025D")]
	[Address(RVA = "0x1E137E4", Offset = "0x1E137E4", VA = "0x1E137E4")]
	private void Start()
	{
	}

	[Token(Token = "0x600025E")]
	[Address(RVA = "0x1E138A4", Offset = "0x1E138A4", VA = "0x1E138A4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600025F")]
	[Address(RVA = "0x1E13A44", Offset = "0x1E13A44", VA = "0x1E13A44")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000260")]
	[Address(RVA = "0x1E13C94", Offset = "0x1E13C94", VA = "0x1E13C94")]
	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
	}

	[Token(Token = "0x6000261")]
	[Address(RVA = "0x1E13F28", Offset = "0x1E13F28", VA = "0x1E13F28")]
	private void CalculateAdaptation(Texture curTexture)
	{
	}

	[Token(Token = "0x6000262")]
	[Address(RVA = "0x1E14194", Offset = "0x1E14194", VA = "0x1E14194")]
	public ContrastStretchEffect()
	{
	}
}
[Token(Token = "0x2000049")]
[ExecuteInEditMode]
[AttributeAttribute(Name = "RequireComponent", RVA = "0xB46FB0", Offset = "0xB46FB0")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB46FB0", Offset = "0xB46FB0")]
public class GlowEffect : MonoBehaviour
{
	[Token(Token = "0x400019F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float glowIntensity;

	[Token(Token = "0x40001A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int blurIterations;

	[Token(Token = "0x40001A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float blurSpread;

	[Token(Token = "0x40001A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Color glowTint;

	[Token(Token = "0x40001A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Shader compositeShader;

	[Token(Token = "0x40001A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Material m_CompositeMaterial;

	[Token(Token = "0x40001A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Shader blurShader;

	[Token(Token = "0x40001A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Material m_BlurMaterial;

	[Token(Token = "0x40001A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Shader downsampleShader;

	[Token(Token = "0x40001A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Material m_DownsampleMaterial;

	[Token(Token = "0x1700006E")]
	protected Material compositeMaterial
	{
		[Token(Token = "0x6000263")]
		[Address(RVA = "0x1E14E14", Offset = "0x1E14E14", VA = "0x1E14E14")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700006F")]
	protected Material blurMaterial
	{
		[Token(Token = "0x6000264")]
		[Address(RVA = "0x1E14EDC", Offset = "0x1E14EDC", VA = "0x1E14EDC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000070")]
	protected Material downsampleMaterial
	{
		[Token(Token = "0x6000265")]
		[Address(RVA = "0x1E14FA4", Offset = "0x1E14FA4", VA = "0x1E14FA4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000266")]
	[Address(RVA = "0x1E1506C", Offset = "0x1E1506C", VA = "0x1E1506C")]
	protected void OnDisable()
	{
	}

	[Token(Token = "0x6000267")]
	[Address(RVA = "0x1E151C4", Offset = "0x1E151C4", VA = "0x1E151C4")]
	protected void Start()
	{
	}

	[Token(Token = "0x6000268")]
	[Address(RVA = "0x1E1536C", Offset = "0x1E1536C", VA = "0x1E1536C")]
	public void FourTapCone(RenderTexture source, RenderTexture dest, int iteration)
	{
	}

	[Token(Token = "0x6000269")]
	[Address(RVA = "0x1E15548", Offset = "0x1E15548", VA = "0x1E15548")]
	private void DownSample4x(RenderTexture source, RenderTexture dest)
	{
	}

	[Token(Token = "0x600026A")]
	[Address(RVA = "0x1E15630", Offset = "0x1E15630", VA = "0x1E15630")]
	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
	}

	[Token(Token = "0x600026B")]
	[Address(RVA = "0x1E158A8", Offset = "0x1E158A8", VA = "0x1E158A8")]
	public void BlitGlow(RenderTexture source, RenderTexture dest)
	{
	}

	[Token(Token = "0x600026C")]
	[Address(RVA = "0x1E159CC", Offset = "0x1E159CC", VA = "0x1E159CC")]
	public GlowEffect()
	{
	}
}
[Token(Token = "0x200004A")]
[ExecuteInEditMode]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB47048", Offset = "0xB47048")]
public class GrayscaleEffect : ImageEffectBase
{
	[Token(Token = "0x40001A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Texture textureRamp;

	[Token(Token = "0x40001AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float rampOffset;

	[Token(Token = "0x600026D")]
	[Address(RVA = "0x1E15A4C", Offset = "0x1E15A4C", VA = "0x1E15A4C")]
	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
	}

	[Token(Token = "0x600026E")]
	[Address(RVA = "0x1E15B54", Offset = "0x1E15B54", VA = "0x1E15B54")]
	public GrayscaleEffect()
	{
	}
}
[Token(Token = "0x200004B")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0xB47094", Offset = "0xB47094")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB47094", Offset = "0xB47094")]
public class ImageEffectBase : MonoBehaviour
{
	[Token(Token = "0x40001AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Shader shader;

	[Token(Token = "0x40001AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Material m_Material;

	[Token(Token = "0x17000071")]
	protected Material material
	{
		[Token(Token = "0x6000270")]
		[Address(RVA = "0x1E12918", Offset = "0x1E12918", VA = "0x1E12918")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600026F")]
	[Address(RVA = "0x1E15B5C", Offset = "0x1E15B5C", VA = "0x1E15B5C", Slot = "4")]
	protected virtual void Start()
	{
	}

	[Token(Token = "0x6000271")]
	[Address(RVA = "0x1E15C14", Offset = "0x1E15C14", VA = "0x1E15C14", Slot = "5")]
	protected virtual void OnDisable()
	{
	}

	[Token(Token = "0x6000272")]
	[Address(RVA = "0x1E129E8", Offset = "0x1E129E8", VA = "0x1E129E8")]
	public ImageEffectBase()
	{
	}
}
[Token(Token = "0x200004C")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB4711C", Offset = "0xB4711C")]
public class ImageEffects
{
	[Token(Token = "0x6000273")]
	[Address(RVA = "0x1E15CC4", Offset = "0x1E15CC4", VA = "0x1E15CC4")]
	public static void RenderDistortion(Material material, RenderTexture source, RenderTexture destination, float angle, Vector2 center, Vector2 radius)
	{
	}

	[Token(Token = "0x6000274")]
	[Address(RVA = "0x1E15F54", Offset = "0x1E15F54", VA = "0x1E15F54")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xB4C460", Offset = "0xB4C460")]
	public static void Blit(RenderTexture source, RenderTexture dest)
	{
	}

	[Token(Token = "0x6000275")]
	[Address(RVA = "0x1E15FCC", Offset = "0x1E15FCC", VA = "0x1E15FCC")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xB4C498", Offset = "0xB4C498")]
	public static void BlitWithMaterial(Material material, RenderTexture source, RenderTexture dest)
	{
	}

	[Token(Token = "0x6000276")]
	[Address(RVA = "0x1E1604C", Offset = "0x1E1604C", VA = "0x1E1604C")]
	public ImageEffects()
	{
	}
}
[Token(Token = "0x200004D")]
[ExecuteInEditMode]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB47154", Offset = "0xB47154")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0xB47154", Offset = "0xB47154")]
public class MotionBlur : ImageEffectBase
{
	[Token(Token = "0x40001AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float blurAmount;

	[Token(Token = "0x40001AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool extraBlur;

	[Token(Token = "0x40001AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private RenderTexture accumTexture;

	[Token(Token = "0x6000277")]
	[Address(RVA = "0x1A35808", Offset = "0x1A35808", VA = "0x1A35808", Slot = "4")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000278")]
	[Address(RVA = "0x1A35850", Offset = "0x1A35850", VA = "0x1A35850", Slot = "5")]
	protected override void OnDisable()
	{
	}

	[Token(Token = "0x6000279")]
	[Address(RVA = "0x1A358C8", Offset = "0x1A358C8", VA = "0x1A358C8")]
	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
	}

	[Token(Token = "0x600027A")]
	[Address(RVA = "0x1A35CC0", Offset = "0x1A35CC0", VA = "0x1A35CC0")]
	public MotionBlur()
	{
	}
}
[Token(Token = "0x200004E")]
[ExecuteInEditMode]
[AttributeAttribute(Name = "RequireComponent", RVA = "0xB471EC", Offset = "0xB471EC")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB471EC", Offset = "0xB471EC")]
public class NoiseEffect : MonoBehaviour
{
	[Token(Token = "0x40001B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool monochrome;

	[Token(Token = "0x40001B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	private bool rgbFallback;

	[Token(Token = "0x40001B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float grainIntensityMin;

	[Token(Token = "0x40001B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float grainIntensityMax;

	[Token(Token = "0x40001B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float grainSize;

	[Token(Token = "0x40001B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float scratchIntensityMin;

	[Token(Token = "0x40001B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float scratchIntensityMax;

	[Token(Token = "0x40001B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float scratchFPS;

	[Token(Token = "0x40001B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float scratchJitter;

	[Token(Token = "0x40001B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Texture grainTexture;

	[Token(Token = "0x40001BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Texture scratchTexture;

	[Token(Token = "0x40001BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Shader shaderRGB;

	[Token(Token = "0x40001BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Shader shaderYUV;

	[Token(Token = "0x40001BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Material m_MaterialRGB;

	[Token(Token = "0x40001BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Material m_MaterialYUV;

	[Token(Token = "0x40001BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float scratchTimeLeft;

	[Token(Token = "0x40001C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private float scratchX;

	[Token(Token = "0x40001C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float scratchY;

	[Token(Token = "0x17000072")]
	protected Material material
	{
		[Token(Token = "0x600027C")]
		[Address(RVA = "0x1B26208", Offset = "0x1B26208", VA = "0x1B26208")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600027B")]
	[Address(RVA = "0x1B260B4", Offset = "0x1B260B4", VA = "0x1B260B4")]
	protected void Start()
	{
	}

	[Token(Token = "0x600027D")]
	[Address(RVA = "0x1B26370", Offset = "0x1B26370", VA = "0x1B26370")]
	protected void OnDisable()
	{
	}

	[Token(Token = "0x600027E")]
	[Address(RVA = "0x1B26474", Offset = "0x1B26474", VA = "0x1B26474")]
	private void SanitizeParameters()
	{
	}

	[Token(Token = "0x600027F")]
	[Address(RVA = "0x1B265B0", Offset = "0x1B265B0", VA = "0x1B265B0")]
	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
	}

	[Token(Token = "0x6000280")]
	[Address(RVA = "0x1B26954", Offset = "0x1B26954", VA = "0x1B26954")]
	public NoiseEffect()
	{
	}
}
[Token(Token = "0x200004F")]
[ExecuteInEditMode]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB47284", Offset = "0xB47284")]
public class SepiaToneEffect : ImageEffectBase
{
	[Token(Token = "0x6000281")]
	[Address(RVA = "0x1B27A70", Offset = "0x1B27A70", VA = "0x1B27A70")]
	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
	}

	[Token(Token = "0x6000282")]
	[Address(RVA = "0x1B27B04", Offset = "0x1B27B04", VA = "0x1B27B04")]
	public SepiaToneEffect()
	{
	}
}
[Token(Token = "0x2000050")]
[ExecuteInEditMode]
[AttributeAttribute(Name = "RequireComponent", RVA = "0xB472D0", Offset = "0xB472D0")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB472D0", Offset = "0xB472D0")]
public class SSAOEffect : MonoBehaviour
{
	[Token(Token = "0x20002B9")]
	public enum SSAOSamples
	{
		[Token(Token = "0x4000DF8")]
		Low,
		[Token(Token = "0x4000DF9")]
		Medium,
		[Token(Token = "0x4000DFA")]
		High
	}

	[Token(Token = "0x40001C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float m_Radius;

	[Token(Token = "0x40001C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public SSAOSamples m_SampleCount;

	[Token(Token = "0x40001C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float m_OcclusionIntensity;

	[Token(Token = "0x40001C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int m_Blur;

	[Token(Token = "0x40001C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int m_Downsampling;

	[Token(Token = "0x40001C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float m_OcclusionAttenuation;

	[Token(Token = "0x40001C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float m_MinZ;

	[Token(Token = "0x40001C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Shader m_SSAOShader;

	[Token(Token = "0x40001CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Material m_SSAOMaterial;

	[Token(Token = "0x40001CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Texture2D m_RandomTexture;

	[Token(Token = "0x40001CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool m_Supported;

	[Token(Token = "0x6000283")]
	[Address(RVA = "0x1B26ED0", Offset = "0x1B26ED0", VA = "0x1B26ED0")]
	private static Material CreateMaterial(Shader shader)
	{
		return null;
	}

	[Token(Token = "0x6000284")]
	[Address(RVA = "0x1B26F84", Offset = "0x1B26F84", VA = "0x1B26F84")]
	private static void DestroyMaterial(Material mat)
	{
	}

	[Token(Token = "0x6000285")]
	[Address(RVA = "0x1B27020", Offset = "0x1B27020", VA = "0x1B27020")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000286")]
	[Address(RVA = "0x1B27028", Offset = "0x1B27028", VA = "0x1B27028")]
	private void Start()
	{
	}

	[Token(Token = "0x6000287")]
	[Address(RVA = "0x1B271E8", Offset = "0x1B271E8", VA = "0x1B271E8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000288")]
	[Address(RVA = "0x1B27108", Offset = "0x1B27108", VA = "0x1B27108")]
	private void CreateMaterials()
	{
	}

	[Token(Token = "0x6000289")]
	[Address(RVA = "0x1B27280", Offset = "0x1B27280", VA = "0x1B27280")]
	[ImageEffectOpaque]
	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
	}

	[Token(Token = "0x600028A")]
	[Address(RVA = "0x1B27A38", Offset = "0x1B27A38", VA = "0x1B27A38")]
	public SSAOEffect()
	{
	}
}
[Token(Token = "0x2000051")]
[ExecuteInEditMode]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB47368", Offset = "0xB47368")]
public class TwirlEffect : ImageEffectBase
{
	[Token(Token = "0x40001CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Vector2 radius;

	[Token(Token = "0x40001CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float angle;

	[Token(Token = "0x40001CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public Vector2 center;

	[Token(Token = "0x600028B")]
	[Address(RVA = "0x1E220C8", Offset = "0x1E220C8", VA = "0x1E220C8")]
	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
	}

	[Token(Token = "0x600028C")]
	[Address(RVA = "0x1E22114", Offset = "0x1E22114", VA = "0x1E22114")]
	public TwirlEffect()
	{
	}
}
[Token(Token = "0x2000052")]
[ExecuteInEditMode]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB473B4", Offset = "0xB473B4")]
public class VortexEffect : ImageEffectBase
{
	[Token(Token = "0x40001D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Vector2 radius;

	[Token(Token = "0x40001D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float angle;

	[Token(Token = "0x40001D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public Vector2 center;

	[Token(Token = "0x600028D")]
	[Address(RVA = "0x26A9DDC", Offset = "0x26A9DDC", VA = "0x26A9DDC")]
	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
	}

	[Token(Token = "0x600028E")]
	[Address(RVA = "0x26A9E28", Offset = "0x26A9E28", VA = "0x26A9E28")]
	public VortexEffect()
	{
	}
}
namespace UnityStandardAssets.ImageEffects
{
	[Token(Token = "0x2000053")]
	public enum AAMode
	{
		[Token(Token = "0x40001D4")]
		FXAA2,
		[Token(Token = "0x40001D5")]
		FXAA3Console,
		[Token(Token = "0x40001D6")]
		FXAA1PresetA,
		[Token(Token = "0x40001D7")]
		FXAA1PresetB,
		[Token(Token = "0x40001D8")]
		NFAA,
		[Token(Token = "0x40001D9")]
		SSAA,
		[Token(Token = "0x40001DA")]
		DLAA
	}
	[Token(Token = "0x2000054")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB47400", Offset = "0xB47400")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB47400", Offset = "0xB47400")]
	public class Antialiasing : PostEffectsBase
	{
		[Token(Token = "0x40001DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public AAMode mode;

		[Token(Token = "0x40001DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool showGeneratedNormals;

		[Token(Token = "0x40001DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float offsetScale;

		[Token(Token = "0x40001DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float blurRadius;

		[Token(Token = "0x40001DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float edgeThresholdMin;

		[Token(Token = "0x40001E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float edgeThreshold;

		[Token(Token = "0x40001E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float edgeSharpness;

		[Token(Token = "0x40001E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool dlaaSharp;

		[Token(Token = "0x40001E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Shader ssaaShader;

		[Token(Token = "0x40001E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Material ssaa;

		[Token(Token = "0x40001E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Shader dlaaShader;

		[Token(Token = "0x40001E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Material dlaa;

		[Token(Token = "0x40001E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Shader nfaaShader;

		[Token(Token = "0x40001E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Material nfaa;

		[Token(Token = "0x40001E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Shader shaderFXAAPreset2;

		[Token(Token = "0x40001EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Material materialFXAAPreset2;

		[Token(Token = "0x40001EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Shader shaderFXAAPreset3;

		[Token(Token = "0x40001EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Material materialFXAAPreset3;

		[Token(Token = "0x40001ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Shader shaderFXAAII;

		[Token(Token = "0x40001EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Material materialFXAAII;

		[Token(Token = "0x40001EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Shader shaderFXAAIII;

		[Token(Token = "0x40001F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Material materialFXAAIII;

		[Token(Token = "0x600028F")]
		[Address(RVA = "0x1E22190", Offset = "0x1E22190", VA = "0x1E22190")]
		public Material CurrentAAMaterial()
		{
			return null;
		}

		[Token(Token = "0x6000290")]
		[Address(RVA = "0x1E221F4", Offset = "0x1E221F4", VA = "0x1E221F4", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000291")]
		[Address(RVA = "0x1E222E4", Offset = "0x1E222E4", VA = "0x1E222E4")]
		public void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000292")]
		[Address(RVA = "0x1E228F0", Offset = "0x1E228F0", VA = "0x1E228F0")]
		public Antialiasing()
		{
		}
	}
	[Token(Token = "0x2000055")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB47498", Offset = "0xB47498")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB47498", Offset = "0xB47498")]
	public class Bloom : PostEffectsBase
	{
		[Token(Token = "0x20002BA")]
		public enum LensFlareStyle
		{
			[Token(Token = "0x4000DFC")]
			Ghosting,
			[Token(Token = "0x4000DFD")]
			Anamorphic,
			[Token(Token = "0x4000DFE")]
			Combined
		}

		[Token(Token = "0x20002BB")]
		public enum TweakMode
		{
			[Token(Token = "0x4000E00")]
			Basic,
			[Token(Token = "0x4000E01")]
			Complex
		}

		[Token(Token = "0x20002BC")]
		public enum HDRBloomMode
		{
			[Token(Token = "0x4000E03")]
			Auto,
			[Token(Token = "0x4000E04")]
			On,
			[Token(Token = "0x4000E05")]
			Off
		}

		[Token(Token = "0x20002BD")]
		public enum BloomScreenBlendMode
		{
			[Token(Token = "0x4000E07")]
			Screen,
			[Token(Token = "0x4000E08")]
			Add
		}

		[Token(Token = "0x20002BE")]
		public enum BloomQuality
		{
			[Token(Token = "0x4000E0A")]
			Cheap,
			[Token(Token = "0x4000E0B")]
			High
		}

		[Token(Token = "0x40001F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public new string name;

		[Token(Token = "0x40001F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool showBoring;

		[Token(Token = "0x40001F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public TweakMode tweakMode;

		[Token(Token = "0x40001F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public BloomScreenBlendMode screenBlendMode;

		[Token(Token = "0x40001F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public HDRBloomMode hdr;

		[Token(Token = "0x40001F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool doHdr;

		[Token(Token = "0x40001F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float sepBlurSpread;

		[Token(Token = "0x40001F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public BloomQuality quality;

		[Token(Token = "0x40001F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float bloomIntensity;

		[Token(Token = "0x40001FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float bloomThreshold;

		[Token(Token = "0x40001FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public Color bloomThresholdColor;

		[Token(Token = "0x40001FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public int bloomBlurIterations;

		[Token(Token = "0x40001FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public int hollywoodFlareBlurIterations;

		[Token(Token = "0x40001FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float flareRotation;

		[Token(Token = "0x40001FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public LensFlareStyle lensflareMode;

		[Token(Token = "0x4000200")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float hollyStretchWidth;

		[Token(Token = "0x4000201")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float lensflareIntensity;

		[Token(Token = "0x4000202")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public float lensflareThreshold;

		[Token(Token = "0x4000203")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float lensFlareSaturation;

		[Token(Token = "0x4000204")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public Color flareColorA;

		[Token(Token = "0x4000205")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public Color flareColorB;

		[Token(Token = "0x4000206")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public Color flareColorC;

		[Token(Token = "0x4000207")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public Color flareColorD;

		[Token(Token = "0x4000208")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public Texture2D lensFlareVignetteMask;

		[Token(Token = "0x4000209")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public Shader lensFlareShader;

		[Token(Token = "0x400020A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Material lensFlareMaterial;

		[Token(Token = "0x400020B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public Shader screenBlendShader;

		[Token(Token = "0x400020C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Material screenBlend;

		[Token(Token = "0x400020D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public Shader blurAndFlaresShader;

		[Token(Token = "0x400020E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Material blurAndFlaresMaterial;

		[Token(Token = "0x400020F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public Shader brightPassFilterShader;

		[Token(Token = "0x4000210")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private Material brightPassFilterMaterial;

		[Token(Token = "0x4000211")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public bool useRedOnly;

		[Token(Token = "0x6000293")]
		[Address(RVA = "0x1E22914", Offset = "0x1E22914", VA = "0x1E22914", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000294")]
		[Address(RVA = "0x1E229B4", Offset = "0x1E229B4", VA = "0x1E229B4")]
		public void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000295")]
		[Address(RVA = "0x1E240B8", Offset = "0x1E240B8", VA = "0x1E240B8")]
		private void AddTo(float intensity_, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x6000296")]
		[Address(RVA = "0x1E23E0C", Offset = "0x1E23E0C", VA = "0x1E23E0C")]
		private void BlendFlares(RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x6000297")]
		[Address(RVA = "0x1E23AA8", Offset = "0x1E23AA8", VA = "0x1E23AA8")]
		private void BrightFilter(float thresh, RenderTexture from, RenderTexture to, float readOnly = 0f)
		{
		}

		[Token(Token = "0x6000298")]
		[Address(RVA = "0x1E23938", Offset = "0x1E23938", VA = "0x1E23938")]
		private void BrightFilter(Color threshColor, RenderTexture from, RenderTexture to, float readOnly = 0f)
		{
		}

		[Token(Token = "0x6000299")]
		[Address(RVA = "0x1E23BEC", Offset = "0x1E23BEC", VA = "0x1E23BEC")]
		private void Vignette(float amount, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x600029A")]
		[Address(RVA = "0x1E24190", Offset = "0x1E24190", VA = "0x1E24190")]
		public Bloom()
		{
		}
	}
	[Token(Token = "0x2000056")]
	public enum LensflareStyle34
	{
		[Token(Token = "0x4000213")]
		Ghosting,
		[Token(Token = "0x4000214")]
		Anamorphic,
		[Token(Token = "0x4000215")]
		Combined
	}
	[Token(Token = "0x2000057")]
	public enum TweakMode34
	{
		[Token(Token = "0x4000217")]
		Basic,
		[Token(Token = "0x4000218")]
		Complex
	}
	[Token(Token = "0x2000058")]
	public enum HDRBloomMode
	{
		[Token(Token = "0x400021A")]
		Auto,
		[Token(Token = "0x400021B")]
		On,
		[Token(Token = "0x400021C")]
		Off
	}
	[Token(Token = "0x2000059")]
	public enum BloomScreenBlendMode
	{
		[Token(Token = "0x400021E")]
		Screen,
		[Token(Token = "0x400021F")]
		Add
	}
	[Token(Token = "0x200005A")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB47530", Offset = "0xB47530")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB47530", Offset = "0xB47530")]
	public class BloomAndFlares : PostEffectsBase
	{
		[Token(Token = "0x4000220")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public TweakMode34 tweakMode;

		[Token(Token = "0x4000221")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BloomScreenBlendMode screenBlendMode;

		[Token(Token = "0x4000222")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public HDRBloomMode hdr;

		[Token(Token = "0x4000223")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool doHdr;

		[Token(Token = "0x4000224")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float sepBlurSpread;

		[Token(Token = "0x4000225")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float useSrcAlphaAsMask;

		[Token(Token = "0x4000226")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float bloomIntensity;

		[Token(Token = "0x4000227")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float bloomThreshold;

		[Token(Token = "0x4000228")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public int bloomBlurIterations;

		[Token(Token = "0x4000229")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool lensflares;

		[Token(Token = "0x400022A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public int hollywoodFlareBlurIterations;

		[Token(Token = "0x400022B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public LensflareStyle34 lensflareMode;

		[Token(Token = "0x400022C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float hollyStretchWidth;

		[Token(Token = "0x400022D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float lensflareIntensity;

		[Token(Token = "0x400022E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float lensflareThreshold;

		[Token(Token = "0x400022F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Color flareColorA;

		[Token(Token = "0x4000230")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Color flareColorB;

		[Token(Token = "0x4000231")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Color flareColorC;

		[Token(Token = "0x4000232")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Color flareColorD;

		[Token(Token = "0x4000233")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Texture2D lensFlareVignetteMask;

		[Token(Token = "0x4000234")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Shader lensFlareShader;

		[Token(Token = "0x4000235")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Material lensFlareMaterial;

		[Token(Token = "0x4000236")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public Shader vignetteShader;

		[Token(Token = "0x4000237")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Material vignetteMaterial;

		[Token(Token = "0x4000238")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public Shader separableBlurShader;

		[Token(Token = "0x4000239")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Material separableBlurMaterial;

		[Token(Token = "0x400023A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Shader addBrightStuffOneOneShader;

		[Token(Token = "0x400023B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Material addBrightStuffBlendOneOneMaterial;

		[Token(Token = "0x400023C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public Shader screenBlendShader;

		[Token(Token = "0x400023D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Material screenBlend;

		[Token(Token = "0x400023E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public Shader hollywoodFlaresShader;

		[Token(Token = "0x400023F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Material hollywoodFlaresMaterial;

		[Token(Token = "0x4000240")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public Shader brightPassFilterShader;

		[Token(Token = "0x4000241")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Material brightPassFilterMaterial;

		[Token(Token = "0x600029B")]
		[Address(RVA = "0x1E24344", Offset = "0x1E24344", VA = "0x1E24344", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x600029C")]
		[Address(RVA = "0x1E24420", Offset = "0x1E24420", VA = "0x1E24420")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600029D")]
		[Address(RVA = "0x1E25618", Offset = "0x1E25618", VA = "0x1E25618")]
		private void AddTo(float intensity_, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x600029E")]
		[Address(RVA = "0x1E25384", Offset = "0x1E25384", VA = "0x1E25384")]
		private void BlendFlares(RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x600029F")]
		[Address(RVA = "0x1E250D4", Offset = "0x1E250D4", VA = "0x1E250D4")]
		private void BrightFilter(float thresh, float useAlphaAsMask, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x60002A0")]
		[Address(RVA = "0x1E2520C", Offset = "0x1E2520C", VA = "0x1E2520C")]
		private void Vignette(float amount, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x60002A1")]
		[Address(RVA = "0x1E256D4", Offset = "0x1E256D4", VA = "0x1E256D4")]
		public BloomAndFlares()
		{
		}
	}
	[Token(Token = "0x200005B")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB475C8", Offset = "0xB475C8")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB475C8", Offset = "0xB475C8")]
	public class BloomHotswitch : PostEffectsBase
	{
		[Token(Token = "0x20002BF")]
		public enum LensFlareStyle
		{
			[Token(Token = "0x4000E0D")]
			Ghosting,
			[Token(Token = "0x4000E0E")]
			Anamorphic,
			[Token(Token = "0x4000E0F")]
			Combined
		}

		[Token(Token = "0x20002C0")]
		public enum TweakMode
		{
			[Token(Token = "0x4000E11")]
			Basic,
			[Token(Token = "0x4000E12")]
			Complex
		}

		[Token(Token = "0x20002C1")]
		public enum HDRBloomMode
		{
			[Token(Token = "0x4000E14")]
			Auto,
			[Token(Token = "0x4000E15")]
			On,
			[Token(Token = "0x4000E16")]
			Off
		}

		[Token(Token = "0x20002C2")]
		public enum BloomScreenBlendMode
		{
			[Token(Token = "0x4000E18")]
			Screen,
			[Token(Token = "0x4000E19")]
			Add
		}

		[Token(Token = "0x20002C3")]
		public enum BloomQuality
		{
			[Token(Token = "0x4000E1B")]
			Cheap,
			[Token(Token = "0x4000E1C")]
			High
		}

		[Token(Token = "0x4000242")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public new string name;

		[Token(Token = "0x4000243")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float power;

		[Token(Token = "0x4000244")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public TweakMode tweakMode;

		[Token(Token = "0x4000245")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public BloomScreenBlendMode screenBlendMode;

		[Token(Token = "0x4000246")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public HDRBloomMode hdr;

		[Token(Token = "0x4000247")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool doHdr;

		[Token(Token = "0x4000248")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float sepBlurSpread;

		[Token(Token = "0x4000249")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public BloomQuality quality;

		[Token(Token = "0x400024A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float bloomIntensity;

		[Token(Token = "0x400024B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float bloomThreshold;

		[Token(Token = "0x400024C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public Color bloomThresholdColor;

		[Token(Token = "0x400024D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public int bloomBlurIterations;

		[Token(Token = "0x400024E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public int hollywoodFlareBlurIterations;

		[Token(Token = "0x400024F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float flareRotation;

		[Token(Token = "0x4000250")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public LensFlareStyle lensflareMode;

		[Token(Token = "0x4000251")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float hollyStretchWidth;

		[Token(Token = "0x4000252")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float lensflareIntensity;

		[Token(Token = "0x4000253")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public float lensflareThreshold;

		[Token(Token = "0x4000254")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float lensFlareSaturation;

		[Token(Token = "0x4000255")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public Color flareColorA;

		[Token(Token = "0x4000256")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public Color flareColorB;

		[Token(Token = "0x4000257")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public Color flareColorC;

		[Token(Token = "0x4000258")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public Color flareColorD;

		[Token(Token = "0x4000259")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public Texture2D lensFlareVignetteMask;

		[Token(Token = "0x400025A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public Shader lensFlareShader;

		[Token(Token = "0x400025B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Material lensFlareMaterial;

		[Token(Token = "0x400025C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public Shader screenBlendShader;

		[Token(Token = "0x400025D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Material screenBlend;

		[Token(Token = "0x400025E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public Shader AlphaToRedScreenBlendShader;

		[Token(Token = "0x400025F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Material AlphaToRedScreenBlendMaterial;

		[Token(Token = "0x4000260")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public Shader blurAndFlaresShader;

		[Token(Token = "0x4000261")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private Material blurAndFlaresMaterial;

		[Token(Token = "0x4000262")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public Shader brightPassFilterShader;

		[Token(Token = "0x4000263")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private Material brightPassFilterMaterial;

		[Token(Token = "0x4000264")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public Shader alphaToRedFinalMaskFilterShader;

		[Token(Token = "0x4000265")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Material alphaToRedFinalMaskFilterMaterial;

		[Token(Token = "0x4000266")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public Shader alphaToRedBrightPassFilterShader;

		[Token(Token = "0x4000267")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private Material alphaToRedBrightPassFilterMaterial;

		[Token(Token = "0x4000268")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		public Texture2D alphaToRedBloomMask;

		[Token(Token = "0x60002A2")]
		[Address(RVA = "0x1E25840", Offset = "0x1E25840", VA = "0x1E25840", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60002A3")]
		[Address(RVA = "0x1E2591C", Offset = "0x1E2591C", VA = "0x1E2591C")]
		public void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60002A4")]
		[Address(RVA = "0x1E26FBC", Offset = "0x1E26FBC", VA = "0x1E26FBC")]
		private void AddTo(float intensity_, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x60002A5")]
		[Address(RVA = "0x1E26D10", Offset = "0x1E26D10", VA = "0x1E26D10")]
		private void BlendFlares(RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x60002A6")]
		[Address(RVA = "0x1E269AC", Offset = "0x1E269AC", VA = "0x1E269AC")]
		private void BrightFilter(float thresh, RenderTexture from, RenderTexture to, float readOnly = 0f)
		{
		}

		[Token(Token = "0x60002A7")]
		[Address(RVA = "0x1E27094", Offset = "0x1E27094", VA = "0x1E27094")]
		private void BrightFilter(Color threshColor, RenderTexture from, RenderTexture to, float readOnly = 0f)
		{
		}

		[Token(Token = "0x60002A8")]
		[Address(RVA = "0x1E268F0", Offset = "0x1E268F0", VA = "0x1E268F0")]
		private void AlphaToRedFilter(RenderTexture from, RenderTexture to, float power)
		{
		}

		[Token(Token = "0x60002A9")]
		[Address(RVA = "0x1E26AF0", Offset = "0x1E26AF0", VA = "0x1E26AF0")]
		private void Vignette(float amount, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x60002AA")]
		[Address(RVA = "0x1E27204", Offset = "0x1E27204", VA = "0x1E27204")]
		public BloomHotswitch()
		{
		}
	}
	[Token(Token = "0x200005C")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB47660", Offset = "0xB47660")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB47660", Offset = "0xB47660")]
	public class BloomOptimized : PostEffectsBase
	{
		[Token(Token = "0x20002C4")]
		public enum Resolution
		{
			[Token(Token = "0x4000E1E")]
			Low,
			[Token(Token = "0x4000E1F")]
			High
		}

		[Token(Token = "0x20002C5")]
		public enum BlurType
		{
			[Token(Token = "0x4000E21")]
			Standard,
			[Token(Token = "0x4000E22")]
			Sgx
		}

		[Token(Token = "0x4000269")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4AE88", Offset = "0xB4AE88")]
		public float threshold;

		[Token(Token = "0x400026A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4AEA0", Offset = "0xB4AEA0")]
		public float intensity;

		[Token(Token = "0x400026B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4AEB8", Offset = "0xB4AEB8")]
		public float blurSize;

		[Token(Token = "0x400026C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Resolution resolution;

		[Token(Token = "0x400026D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4AED0", Offset = "0xB4AED0")]
		public int blurIterations;

		[Token(Token = "0x400026E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public BlurType blurType;

		[Token(Token = "0x400026F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Shader fastBloomShader;

		[Token(Token = "0x4000270")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material fastBloomMaterial;

		[Token(Token = "0x60002AB")]
		[Address(RVA = "0x1E273C0", Offset = "0x1E273C0", VA = "0x1E273C0", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60002AC")]
		[Address(RVA = "0x1E27424", Offset = "0x1E27424", VA = "0x1E27424")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60002AD")]
		[Address(RVA = "0x1E274D4", Offset = "0x1E274D4", VA = "0x1E274D4")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60002AE")]
		[Address(RVA = "0x1E27930", Offset = "0x1E27930", VA = "0x1E27930")]
		public BloomOptimized()
		{
		}
	}
	[Token(Token = "0x200005D")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB476F8", Offset = "0xB476F8")]
	public class Blur : MonoBehaviour
	{
		[Token(Token = "0x4000271")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int iterations;

		[Token(Token = "0x4000272")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float blurSpread;

		[Token(Token = "0x4000273")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Shader blurShader;

		[Token(Token = "0x4000274")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Material m_Material;

		[Token(Token = "0x17000073")]
		protected Material material
		{
			[Token(Token = "0x60002AF")]
			[Address(RVA = "0x1E27954", Offset = "0x1E27954", VA = "0x1E27954")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60002B0")]
		[Address(RVA = "0x1E27A94", Offset = "0x1E27A94", VA = "0x1E27A94")]
		protected void OnDisable()
		{
		}

		[Token(Token = "0x60002B1")]
		[Address(RVA = "0x1E27B90", Offset = "0x1E27B90", VA = "0x1E27B90")]
		protected void Start()
		{
		}

		[Token(Token = "0x60002B2")]
		[Address(RVA = "0x1E27C64", Offset = "0x1E27C64", VA = "0x1E27C64")]
		public void FourTapCone(RenderTexture source, RenderTexture dest, int iteration)
		{
		}

		[Token(Token = "0x60002B3")]
		[Address(RVA = "0x1E27E40", Offset = "0x1E27E40", VA = "0x1E27E40")]
		private void DownSample4x(RenderTexture source, RenderTexture dest)
		{
		}

		[Token(Token = "0x60002B4")]
		[Address(RVA = "0x1E27FF8", Offset = "0x1E27FF8", VA = "0x1E27FF8")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60002B5")]
		[Address(RVA = "0x1E28174", Offset = "0x1E28174", VA = "0x1E28174")]
		public Blur()
		{
		}
	}
	[Token(Token = "0x200005E")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB47744", Offset = "0xB47744")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB47744", Offset = "0xB47744")]
	public class BlurOptimized : PostEffectsBase
	{
		[Token(Token = "0x20002C6")]
		public enum BlurType
		{
			[Token(Token = "0x4000E24")]
			StandardGauss,
			[Token(Token = "0x4000E25")]
			SgxGauss
		}

		[Token(Token = "0x4000275")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4AEE8", Offset = "0xB4AEE8")]
		public int downsample;

		[Token(Token = "0x4000276")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4AF00", Offset = "0xB4AF00")]
		public float blurSize;

		[Token(Token = "0x4000277")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4AF18", Offset = "0xB4AF18")]
		public int blurIterations;

		[Token(Token = "0x4000278")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public BlurType blurType;

		[Token(Token = "0x4000279")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Shader blurShader;

		[Token(Token = "0x400027A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Material blurMaterial;

		[Token(Token = "0x60002B7")]
		[Address(RVA = "0x1E28190", Offset = "0x1E28190", VA = "0x1E28190", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60002B8")]
		[Address(RVA = "0x1E281F4", Offset = "0x1E281F4", VA = "0x1E281F4")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x60002B9")]
		[Address(RVA = "0x1E282A4", Offset = "0x1E282A4", VA = "0x1E282A4")]
		public void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60002BA")]
		[Address(RVA = "0x1E286D4", Offset = "0x1E286D4", VA = "0x1E286D4")]
		public BlurOptimized()
		{
		}
	}
	[Token(Token = "0x200005F")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB477DC", Offset = "0xB477DC")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB477DC", Offset = "0xB477DC")]
	public class CameraMotionBlur : PostEffectsBase
	{
		[Token(Token = "0x20002C7")]
		public enum MotionBlurFilter
		{
			[Token(Token = "0x4000E27")]
			CameraMotion,
			[Token(Token = "0x4000E28")]
			LocalBlur,
			[Token(Token = "0x4000E29")]
			Reconstruction,
			[Token(Token = "0x4000E2A")]
			ReconstructionDX11,
			[Token(Token = "0x4000E2B")]
			ReconstructionDisc
		}

		[Token(Token = "0x400027B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static float MAX_RADIUS;

		[Token(Token = "0x400027C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public MotionBlurFilter filterType;

		[Token(Token = "0x400027D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool preview;

		[Token(Token = "0x400027E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector3 previewScale;

		[Token(Token = "0x400027F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float movementScale;

		[Token(Token = "0x4000280")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float rotationScale;

		[Token(Token = "0x4000281")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float maxVelocity;

		[Token(Token = "0x4000282")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float minVelocity;

		[Token(Token = "0x4000283")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float velocityScale;

		[Token(Token = "0x4000284")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float softZDistance;

		[Token(Token = "0x4000285")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public int velocityDownsample;

		[Token(Token = "0x4000286")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public LayerMask excludeLayers;

		[Token(Token = "0x4000287")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private GameObject tmpCam;

		[Token(Token = "0x4000288")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Shader shader;

		[Token(Token = "0x4000289")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Shader dx11MotionBlurShader;

		[Token(Token = "0x400028A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Shader replacementClear;

		[Token(Token = "0x400028B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Material motionBlurMaterial;

		[Token(Token = "0x400028C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Material dx11MotionBlurMaterial;

		[Token(Token = "0x400028D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Texture2D noiseTexture;

		[Token(Token = "0x400028E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float jitter;

		[Token(Token = "0x400028F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public bool showVelocity;

		[Token(Token = "0x4000290")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float showVelocityScale;

		[Token(Token = "0x4000291")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private Matrix4x4 currentViewProjMat;

		[Token(Token = "0x4000292")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private Matrix4x4 prevViewProjMat;

		[Token(Token = "0x4000293")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		private int prevFrameCount;

		[Token(Token = "0x4000294")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private bool wasActive;

		[Token(Token = "0x4000295")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		private Vector3 prevFrameForward;

		[Token(Token = "0x4000296")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private Vector3 prevFrameUp;

		[Token(Token = "0x4000297")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		private Vector3 prevFramePos;

		[Token(Token = "0x4000298")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private Camera _camera;

		[Token(Token = "0x60002BB")]
		[Address(RVA = "0x1E286F0", Offset = "0x1E286F0", VA = "0x1E286F0")]
		private void CalculateViewProjection()
		{
		}

		[Token(Token = "0x60002BC")]
		[Address(RVA = "0x1E28858", Offset = "0x1E28858", VA = "0x1E28858")]
		private new void Start()
		{
		}

		[Token(Token = "0x60002BD")]
		[Address(RVA = "0x1E28A04", Offset = "0x1E28A04", VA = "0x1E28A04")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60002BE")]
		[Address(RVA = "0x1E28AE4", Offset = "0x1E28AE4", VA = "0x1E28AE4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60002BF")]
		[Address(RVA = "0x1E28C48", Offset = "0x1E28C48", VA = "0x1E28C48", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60002C0")]
		[Address(RVA = "0x1E28CE0", Offset = "0x1E28CE0", VA = "0x1E28CE0")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60002C1")]
		[Address(RVA = "0x1E28938", Offset = "0x1E28938", VA = "0x1E28938")]
		private void Remember()
		{
		}

		[Token(Token = "0x60002C2")]
		[Address(RVA = "0x1E2A66C", Offset = "0x1E2A66C", VA = "0x1E2A66C")]
		private Camera GetTmpCam()
		{
			return null;
		}

		[Token(Token = "0x60002C3")]
		[Address(RVA = "0x1E2A578", Offset = "0x1E2A578", VA = "0x1E2A578")]
		private void StartFrame()
		{
		}

		[Token(Token = "0x60002C4")]
		[Address(RVA = "0x1E2A65C", Offset = "0x1E2A65C", VA = "0x1E2A65C")]
		private static int divRoundUp(int x, int d)
		{
			return default(int);
		}

		[Token(Token = "0x60002C5")]
		[Address(RVA = "0x1E2AB10", Offset = "0x1E2AB10", VA = "0x1E2AB10")]
		public CameraMotionBlur()
		{
		}
	}
	[Token(Token = "0x2000060")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB47874", Offset = "0xB47874")]
	public class ColorCorrectionCurves : PostEffectsBase
	{
		[Token(Token = "0x20002C8")]
		public enum ColorCorrectionMode
		{
			[Token(Token = "0x4000E2D")]
			Simple,
			[Token(Token = "0x4000E2E")]
			Advanced
		}

		[Token(Token = "0x4000299")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AnimationCurve redChannel;

		[Token(Token = "0x400029A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimationCurve greenChannel;

		[Token(Token = "0x400029B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimationCurve blueChannel;

		[Token(Token = "0x400029C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool useDepthCorrection;

		[Token(Token = "0x400029D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AnimationCurve zCurve;

		[Token(Token = "0x400029E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public AnimationCurve depthRedChannel;

		[Token(Token = "0x400029F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AnimationCurve depthGreenChannel;

		[Token(Token = "0x40002A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public AnimationCurve depthBlueChannel;

		[Token(Token = "0x40002A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material ccMaterial;

		[Token(Token = "0x40002A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Material ccDepthMaterial;

		[Token(Token = "0x40002A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Material selectiveCcMaterial;

		[Token(Token = "0x40002A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Texture2D rgbChannelTex;

		[Token(Token = "0x40002A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Texture2D rgbDepthChannelTex;

		[Token(Token = "0x40002A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Texture2D zCurveTex;

		[Token(Token = "0x40002A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float saturation;

		[Token(Token = "0x40002A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public bool selectiveCc;

		[Token(Token = "0x40002A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Color selectiveFromColor;

		[Token(Token = "0x40002AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Color selectiveToColor;

		[Token(Token = "0x40002AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public ColorCorrectionMode mode;

		[Token(Token = "0x40002AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public bool updateTextures;

		[Token(Token = "0x40002AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public Shader colorCorrectionCurvesShader;

		[Token(Token = "0x40002AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public Shader simpleColorCorrectionCurvesShader;

		[Token(Token = "0x40002AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Shader colorCorrectionSelectiveShader;

		[Token(Token = "0x40002B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private bool updateTexturesOnStartup;

		[Token(Token = "0x60002C7")]
		[Address(RVA = "0x1E2AC60", Offset = "0x1E2AC60", VA = "0x1E2AC60")]
		private new void Start()
		{
		}

		[Token(Token = "0x60002C8")]
		[Address(RVA = "0x1E2AC8C", Offset = "0x1E2AC8C", VA = "0x1E2AC8C")]
		private void Awake()
		{
		}

		[Token(Token = "0x60002C9")]
		[Address(RVA = "0x1E2AC90", Offset = "0x1E2AC90", VA = "0x1E2AC90", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60002CA")]
		[Address(RVA = "0x1E2AF48", Offset = "0x1E2AF48", VA = "0x1E2AF48")]
		public void UpdateParameters()
		{
		}

		[Token(Token = "0x60002CB")]
		[Address(RVA = "0x1E2B3EC", Offset = "0x1E2B3EC", VA = "0x1E2B3EC")]
		private void UpdateTextures()
		{
		}

		[Token(Token = "0x60002CC")]
		[Address(RVA = "0x1E2B3F0", Offset = "0x1E2B3F0", VA = "0x1E2B3F0")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60002CD")]
		[Address(RVA = "0x1E2B7DC", Offset = "0x1E2B7DC", VA = "0x1E2B7DC")]
		public ColorCorrectionCurves()
		{
		}
	}
	[Token(Token = "0x2000061")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB478C0", Offset = "0xB478C0")]
	public class ColorCorrectionLookup : PostEffectsBase
	{
		[Token(Token = "0x40002B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Shader shader;

		[Token(Token = "0x40002B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Material material;

		[Token(Token = "0x40002B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Texture3D converted3DLut;

		[Token(Token = "0x40002B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string basedOnTempTex;

		[Token(Token = "0x60002CE")]
		[Address(RVA = "0x1E2BF18", Offset = "0x1E2BF18", VA = "0x1E2BF18", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60002CF")]
		[Address(RVA = "0x1E2BF78", Offset = "0x1E2BF78", VA = "0x1E2BF78")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60002D0")]
		[Address(RVA = "0x1E2C020", Offset = "0x1E2C020", VA = "0x1E2C020")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60002D1")]
		[Address(RVA = "0x1E2C0C8", Offset = "0x1E2C0C8", VA = "0x1E2C0C8")]
		public void SetIdentityLut()
		{
		}

		[Token(Token = "0x60002D2")]
		[Address(RVA = "0x1E2C310", Offset = "0x1E2C310", VA = "0x1E2C310")]
		public bool ValidDimensions(Texture2D tex2d)
		{
			return default(bool);
		}

		[Token(Token = "0x60002D3")]
		[Address(RVA = "0x1E2C414", Offset = "0x1E2C414", VA = "0x1E2C414")]
		public void Convert(Texture2D temp2DTex, string path)
		{
		}

		[Token(Token = "0x60002D4")]
		[Address(RVA = "0x1E2C814", Offset = "0x1E2C814", VA = "0x1E2C814")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60002D5")]
		[Address(RVA = "0x1E2CA40", Offset = "0x1E2CA40", VA = "0x1E2CA40")]
		public ColorCorrectionLookup()
		{
		}
	}
	[Token(Token = "0x2000062")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB4790C", Offset = "0xB4790C")]
	public class ColorCorrectionRamp : ImageEffectBase
	{
		[Token(Token = "0x40002B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Texture textureRamp;

		[Token(Token = "0x60002D6")]
		[Address(RVA = "0x1E2CA98", Offset = "0x1E2CA98", VA = "0x1E2CA98")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60002D7")]
		[Address(RVA = "0x1E2CB6C", Offset = "0x1E2CB6C", VA = "0x1E2CB6C")]
		public ColorCorrectionRamp()
		{
		}
	}
	[Token(Token = "0x2000063")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB47958", Offset = "0xB47958")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB47958", Offset = "0xB47958")]
	internal class ContrastEnhance : PostEffectsBase
	{
		[Token(Token = "0x40002B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float intensity;

		[Token(Token = "0x40002B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float threshold;

		[Token(Token = "0x40002B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Material separableBlurMaterial;

		[Token(Token = "0x40002B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Material contrastCompositeMaterial;

		[Token(Token = "0x40002BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float blurSpread;

		[Token(Token = "0x40002BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Shader separableBlurShader;

		[Token(Token = "0x40002BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader contrastCompositeShader;

		[Token(Token = "0x60002D8")]
		[Address(RVA = "0x1E2CB74", Offset = "0x1E2CB74", VA = "0x1E2CB74", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60002D9")]
		[Address(RVA = "0x1E2CBF4", Offset = "0x1E2CBF4", VA = "0x1E2CBF4")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60002DA")]
		[Address(RVA = "0x1E2CFB0", Offset = "0x1E2CFB0", VA = "0x1E2CFB0")]
		public ContrastEnhance()
		{
		}
	}
	[Token(Token = "0x2000064")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB479F0", Offset = "0xB479F0")]
	public class ContrastStretch : MonoBehaviour
	{
		[Token(Token = "0x40002BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float adaptationSpeed;

		[Token(Token = "0x40002BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float limitMinimum;

		[Token(Token = "0x40002BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float limitMaximum;

		[Token(Token = "0x40002C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private RenderTexture[] adaptRenderTex;

		[Token(Token = "0x40002C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int curAdaptIndex;

		[Token(Token = "0x40002C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Shader shaderLum;

		[Token(Token = "0x40002C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material m_materialLum;

		[Token(Token = "0x40002C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader shaderReduce;

		[Token(Token = "0x40002C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Material m_materialReduce;

		[Token(Token = "0x40002C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Shader shaderAdapt;

		[Token(Token = "0x40002C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material m_materialAdapt;

		[Token(Token = "0x40002C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Shader shaderApply;

		[Token(Token = "0x40002C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Material m_materialApply;

		[Token(Token = "0x17000074")]
		protected Material materialLum
		{
			[Token(Token = "0x60002DB")]
			[Address(RVA = "0x1E2CFC8", Offset = "0x1E2CFC8", VA = "0x1E2CFC8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000075")]
		protected Material materialReduce
		{
			[Token(Token = "0x60002DC")]
			[Address(RVA = "0x1E2D090", Offset = "0x1E2D090", VA = "0x1E2D090")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000076")]
		protected Material materialAdapt
		{
			[Token(Token = "0x60002DD")]
			[Address(RVA = "0x1E2D158", Offset = "0x1E2D158", VA = "0x1E2D158")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000077")]
		protected Material materialApply
		{
			[Token(Token = "0x60002DE")]
			[Address(RVA = "0x1E2D220", Offset = "0x1E2D220", VA = "0x1E2D220")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60002DF")]
		[Address(RVA = "0x1E2D2E8", Offset = "0x1E2D2E8", VA = "0x1E2D2E8")]
		private void Start()
		{
		}

		[Token(Token = "0x60002E0")]
		[Address(RVA = "0x1E2D3A8", Offset = "0x1E2D3A8", VA = "0x1E2D3A8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60002E1")]
		[Address(RVA = "0x1E2D548", Offset = "0x1E2D548", VA = "0x1E2D548")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60002E2")]
		[Address(RVA = "0x1E2D798", Offset = "0x1E2D798", VA = "0x1E2D798")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60002E3")]
		[Address(RVA = "0x1E2DA2C", Offset = "0x1E2DA2C", VA = "0x1E2DA2C")]
		private void CalculateAdaptation(Texture curTexture)
		{
		}

		[Token(Token = "0x60002E4")]
		[Address(RVA = "0x1E2DC98", Offset = "0x1E2DC98", VA = "0x1E2DC98")]
		public ContrastStretch()
		{
		}
	}
	[Token(Token = "0x2000065")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB47A3C", Offset = "0xB47A3C")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB47A3C", Offset = "0xB47A3C")]
	internal class CreaseShading : PostEffectsBase
	{
		[Token(Token = "0x40002CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float intensity;

		[Token(Token = "0x40002CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int softness;

		[Token(Token = "0x40002CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float spread;

		[Token(Token = "0x40002CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Shader blurShader;

		[Token(Token = "0x40002CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Material blurMaterial;

		[Token(Token = "0x40002CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Shader depthFetchShader;

		[Token(Token = "0x40002D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material depthFetchMaterial;

		[Token(Token = "0x40002D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader creaseApplyShader;

		[Token(Token = "0x40002D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Material creaseApplyMaterial;

		[Token(Token = "0x60002E5")]
		[Address(RVA = "0x1E2DD18", Offset = "0x1E2DD18", VA = "0x1E2DD18", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60002E6")]
		[Address(RVA = "0x1E2DDA4", Offset = "0x1E2DDA4", VA = "0x1E2DDA4")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60002E7")]
		[Address(RVA = "0x1E2E194", Offset = "0x1E2E194", VA = "0x1E2E194")]
		public CreaseShading()
		{
		}
	}
	[Token(Token = "0x2000066")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB47AD4", Offset = "0xB47AD4")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB47AD4", Offset = "0xB47AD4")]
	public class DepthOfField : PostEffectsBase
	{
		[Token(Token = "0x20002C9")]
		public enum BlurType
		{
			[Token(Token = "0x4000E30")]
			DiscBlur,
			[Token(Token = "0x4000E31")]
			DX11
		}

		[Token(Token = "0x20002CA")]
		public enum BlurSampleCount
		{
			[Token(Token = "0x4000E33")]
			Low,
			[Token(Token = "0x4000E34")]
			Medium,
			[Token(Token = "0x4000E35")]
			High
		}

		[Token(Token = "0x40002D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
		public bool visualizeFocus;

		[Token(Token = "0x40002D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float focalLength;

		[Token(Token = "0x40002D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float focalSize;

		[Token(Token = "0x40002D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float aperture;

		[Token(Token = "0x40002D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform focalTransform;

		[Token(Token = "0x40002D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float maxBlurSize;

		[Token(Token = "0x40002D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool highResolution;

		[Token(Token = "0x40002DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static DepthOfField Instance;

		[Token(Token = "0x40002DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public BlurType blurType;

		[Token(Token = "0x40002DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public BlurSampleCount blurSampleCount;

		[Token(Token = "0x40002DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool nearBlur;

		[Token(Token = "0x40002DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float foregroundOverlap;

		[Token(Token = "0x40002DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader dofHdrShader;

		[Token(Token = "0x40002E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Material dofHdrMaterial;

		[Token(Token = "0x40002E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Shader dx11BokehShader;

		[Token(Token = "0x40002E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material dx11bokehMaterial;

		[Token(Token = "0x40002E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float dx11BokehThreshold;

		[Token(Token = "0x40002E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float dx11SpawnHeuristic;

		[Token(Token = "0x40002E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Texture2D dx11BokehTexture;

		[Token(Token = "0x40002E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float dx11BokehScale;

		[Token(Token = "0x40002E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float dx11BokehIntensity;

		[Token(Token = "0x40002E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float focalDistance01;

		[Token(Token = "0x40002E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private ComputeBuffer cbDrawArgs;

		[Token(Token = "0x40002EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private ComputeBuffer cbPoints;

		[Token(Token = "0x40002EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float internalBlurWidth;

		[Token(Token = "0x60002E8")]
		[Address(RVA = "0x1E2E1B0", Offset = "0x1E2E1B0", VA = "0x1E2E1B0")]
		private void Awake()
		{
		}

		[Token(Token = "0x60002E9")]
		[Address(RVA = "0x1E2E21C", Offset = "0x1E2E21C", VA = "0x1E2E21C", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60002EA")]
		[Address(RVA = "0x1E2E424", Offset = "0x1E2E424", VA = "0x1E2E424")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60002EB")]
		[Address(RVA = "0x1E2E4BC", Offset = "0x1E2E4BC", VA = "0x1E2E4BC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60002EC")]
		[Address(RVA = "0x1E2E5C4", Offset = "0x1E2E5C4", VA = "0x1E2E5C4")]
		private void ReleaseComputeResources()
		{
		}

		[Token(Token = "0x60002ED")]
		[Address(RVA = "0x1E2E2B0", Offset = "0x1E2E2B0", VA = "0x1E2E2B0")]
		private void CreateComputeResources()
		{
		}

		[Token(Token = "0x60002EE")]
		[Address(RVA = "0x1E2E608", Offset = "0x1E2E608", VA = "0x1E2E608")]
		private float FocalDistance01(float worldDist)
		{
			return default(float);
		}

		[Token(Token = "0x60002EF")]
		[Address(RVA = "0x1E2E81C", Offset = "0x1E2E81C", VA = "0x1E2E81C")]
		private void WriteCoc(RenderTexture fromTo, bool fgDilate)
		{
		}

		[Token(Token = "0x60002F0")]
		[Address(RVA = "0x1E2EBB0", Offset = "0x1E2EBB0", VA = "0x1E2EBB0")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60002F1")]
		[Address(RVA = "0x1E30620", Offset = "0x1E30620", VA = "0x1E30620")]
		public DepthOfField()
		{
		}
	}
	[Token(Token = "0x2000067")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB47B6C", Offset = "0xB47B6C")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB47B6C", Offset = "0xB47B6C")]
	public class DepthOfFieldDeprecated : PostEffectsBase
	{
		[Token(Token = "0x20002CB")]
		public enum Dof34QualitySetting
		{
			[Token(Token = "0x4000E37")]
			OnlyBackground = 1,
			[Token(Token = "0x4000E38")]
			BackgroundAndForeground
		}

		[Token(Token = "0x20002CC")]
		public enum DofResolution
		{
			[Token(Token = "0x4000E3A")]
			High = 2,
			[Token(Token = "0x4000E3B")]
			Medium,
			[Token(Token = "0x4000E3C")]
			Low
		}

		[Token(Token = "0x20002CD")]
		public enum DofBlurriness
		{
			[Token(Token = "0x4000E3E")]
			Low = 1,
			[Token(Token = "0x4000E3F")]
			High = 2,
			[Token(Token = "0x4000E40")]
			VeryHigh = 4
		}

		[Token(Token = "0x20002CE")]
		public enum BokehDestination
		{
			[Token(Token = "0x4000E42")]
			Background = 1,
			[Token(Token = "0x4000E43")]
			Foreground,
			[Token(Token = "0x4000E44")]
			BackgroundAndForeground
		}

		[Token(Token = "0x40002EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int SMOOTH_DOWNSAMPLE_PASS;

		[Token(Token = "0x40002ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static float BOKEH_EXTRA_BLUR;

		[Token(Token = "0x40002EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Dof34QualitySetting quality;

		[Token(Token = "0x40002EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DofResolution resolution;

		[Token(Token = "0x40002F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool simpleTweakMode;

		[Token(Token = "0x40002F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float focalPoint;

		[Token(Token = "0x40002F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float smoothness;

		[Token(Token = "0x40002F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float focalZDistance;

		[Token(Token = "0x40002F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float focalZStartCurve;

		[Token(Token = "0x40002F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float focalZEndCurve;

		[Token(Token = "0x40002F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float focalStartCurve;

		[Token(Token = "0x40002F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float focalEndCurve;

		[Token(Token = "0x40002F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float focalDistance01;

		[Token(Token = "0x40002F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform objectFocus;

		[Token(Token = "0x40002FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float focalSize;

		[Token(Token = "0x40002FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public DofBlurriness bluriness;

		[Token(Token = "0x40002FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float maxBlurSpread;

		[Token(Token = "0x40002FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float foregroundBlurExtrude;

		[Token(Token = "0x40002FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Shader dofBlurShader;

		[Token(Token = "0x40002FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Material dofBlurMaterial;

		[Token(Token = "0x4000300")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Shader dofShader;

		[Token(Token = "0x4000301")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Material dofMaterial;

		[Token(Token = "0x4000302")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public bool visualize;

		[Token(Token = "0x4000303")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public BokehDestination bokehDestination;

		[Token(Token = "0x4000304")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float widthOverHeight;

		[Token(Token = "0x4000305")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float oneOverBaseSize;

		[Token(Token = "0x4000306")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public bool bokeh;

		[Token(Token = "0x4000307")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
		public bool bokehSupport;

		[Token(Token = "0x4000308")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Shader bokehShader;

		[Token(Token = "0x4000309")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Texture2D bokehTexture;

		[Token(Token = "0x400030A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public float bokehScale;

		[Token(Token = "0x400030B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public float bokehIntensity;

		[Token(Token = "0x400030C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public float bokehThresholdContrast;

		[Token(Token = "0x400030D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public float bokehThresholdLuminance;

		[Token(Token = "0x400030E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public int bokehDownsample;

		[Token(Token = "0x400030F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Material bokehMaterial;

		[Token(Token = "0x4000310")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Camera _camera;

		[Token(Token = "0x4000311")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private RenderTexture foregroundTexture;

		[Token(Token = "0x4000312")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private RenderTexture mediumRezWorkTexture;

		[Token(Token = "0x4000313")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private RenderTexture finalDefocus;

		[Token(Token = "0x4000314")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private RenderTexture lowRezWorkTexture;

		[Token(Token = "0x4000315")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private RenderTexture bokehSource;

		[Token(Token = "0x4000316")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private RenderTexture bokehSource2;

		[Token(Token = "0x60002F3")]
		[Address(RVA = "0x1E30688", Offset = "0x1E30688", VA = "0x1E30688")]
		private void CreateMaterials()
		{
		}

		[Token(Token = "0x60002F4")]
		[Address(RVA = "0x1E3076C", Offset = "0x1E3076C", VA = "0x1E3076C", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60002F5")]
		[Address(RVA = "0x1E30888", Offset = "0x1E30888", VA = "0x1E30888")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60002F6")]
		[Address(RVA = "0x1E308E8", Offset = "0x1E308E8", VA = "0x1E308E8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60002F7")]
		[Address(RVA = "0x1E30984", Offset = "0x1E30984", VA = "0x1E30984")]
		private float FocalDistance01(float worldDist)
		{
			return default(float);
		}

		[Token(Token = "0x60002F8")]
		[Address(RVA = "0x1E30B58", Offset = "0x1E30B58", VA = "0x1E30B58")]
		private int GetDividerBasedOnQuality()
		{
			return default(int);
		}

		[Token(Token = "0x60002F9")]
		[Address(RVA = "0x1E30B7C", Offset = "0x1E30B7C", VA = "0x1E30B7C")]
		private int GetLowResolutionDividerBasedOnQuality(int baseDivider)
		{
			return default(int);
		}

		[Token(Token = "0x60002FA")]
		[Address(RVA = "0x1E30BA0", Offset = "0x1E30BA0", VA = "0x1E30BA0")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60002FB")]
		[Address(RVA = "0x1E31B78", Offset = "0x1E31B78", VA = "0x1E31B78")]
		private void Blur(RenderTexture from, RenderTexture to, DofBlurriness iterations, int blurPass, float spread)
		{
		}

		[Token(Token = "0x60002FC")]
		[Address(RVA = "0x1E322F8", Offset = "0x1E322F8", VA = "0x1E322F8")]
		private void BlurFg(RenderTexture from, RenderTexture to, DofBlurriness iterations, int blurPass, float spread)
		{
		}

		[Token(Token = "0x60002FD")]
		[Address(RVA = "0x1E3279C", Offset = "0x1E3279C", VA = "0x1E3279C")]
		private void BlurHex(RenderTexture from, RenderTexture to, int blurPass, float spread, RenderTexture tmp)
		{
		}

		[Token(Token = "0x60002FE")]
		[Address(RVA = "0x1E31A14", Offset = "0x1E31A14", VA = "0x1E31A14")]
		private void Downsample(RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x60002FF")]
		[Address(RVA = "0x1E31E44", Offset = "0x1E31E44", VA = "0x1E31E44")]
		private void AddBokeh(RenderTexture bokehInfo, RenderTexture tempTex, RenderTexture finalTarget)
		{
		}

		[Token(Token = "0x6000300")]
		[Address(RVA = "0x1E325F0", Offset = "0x1E325F0", VA = "0x1E325F0")]
		private void ReleaseTextures()
		{
		}

		[Token(Token = "0x6000301")]
		[Address(RVA = "0x1E31634", Offset = "0x1E31634", VA = "0x1E31634")]
		private void AllocateTextures(bool blurForeground, RenderTexture source, int divider, int lowTexDivider)
		{
		}

		[Token(Token = "0x6000302")]
		[Address(RVA = "0x1E329E0", Offset = "0x1E329E0", VA = "0x1E329E0")]
		public DepthOfFieldDeprecated()
		{
		}
	}
	[Token(Token = "0x2000068")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB47C04", Offset = "0xB47C04")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB47C04", Offset = "0xB47C04")]
	public class EdgeDetection : PostEffectsBase
	{
		[Token(Token = "0x20002CF")]
		public enum EdgeDetectMode
		{
			[Token(Token = "0x4000E46")]
			TriangleDepthNormals,
			[Token(Token = "0x4000E47")]
			RobertsCrossDepthNormals,
			[Token(Token = "0x4000E48")]
			SobelDepth,
			[Token(Token = "0x4000E49")]
			SobelDepthThin,
			[Token(Token = "0x4000E4A")]
			TriangleLuminance
		}

		[Token(Token = "0x4000317")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public EdgeDetectMode mode;

		[Token(Token = "0x4000318")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float sensitivityDepth;

		[Token(Token = "0x4000319")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float sensitivityNormals;

		[Token(Token = "0x400031A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float lumThreshold;

		[Token(Token = "0x400031B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float edgeExp;

		[Token(Token = "0x400031C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float sampleDist;

		[Token(Token = "0x400031D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float edgesOnly;

		[Token(Token = "0x400031E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Color edgesOnlyBgColor;

		[Token(Token = "0x400031F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader edgeDetectShader;

		[Token(Token = "0x4000320")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Material edgeDetectMaterial;

		[Token(Token = "0x4000321")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private EdgeDetectMode oldMode;

		[Token(Token = "0x6000304")]
		[Address(RVA = "0x1E32AC0", Offset = "0x1E32AC0", VA = "0x1E32AC0", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000305")]
		[Address(RVA = "0x1E32C50", Offset = "0x1E32C50", VA = "0x1E32C50")]
		private new void Start()
		{
		}

		[Token(Token = "0x6000306")]
		[Address(RVA = "0x1E32B44", Offset = "0x1E32B44", VA = "0x1E32B44")]
		private void SetCameraFlag()
		{
		}

		[Token(Token = "0x6000307")]
		[Address(RVA = "0x1E32C5C", Offset = "0x1E32C5C", VA = "0x1E32C5C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000308")]
		[Address(RVA = "0x1E32C60", Offset = "0x1E32C60", VA = "0x1E32C60")]
		[ImageEffectOpaque]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000309")]
		[Address(RVA = "0x1E32EC8", Offset = "0x1E32EC8", VA = "0x1E32EC8")]
		public EdgeDetection()
		{
		}
	}
	[Token(Token = "0x2000069")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB47C9C", Offset = "0xB47C9C")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB47C9C", Offset = "0xB47C9C")]
	public class Fisheye : PostEffectsBase
	{
		[Token(Token = "0x4000322")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float strengthX;

		[Token(Token = "0x4000323")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float strengthY;

		[Token(Token = "0x4000324")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Shader fishEyeShader;

		[Token(Token = "0x4000325")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Material fisheyeMaterial;

		[Token(Token = "0x600030A")]
		[Address(RVA = "0x1E32F1C", Offset = "0x1E32F1C", VA = "0x1E32F1C", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x600030B")]
		[Address(RVA = "0x1E32F80", Offset = "0x1E32F80", VA = "0x1E32F80")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600030C")]
		[Address(RVA = "0x1E33108", Offset = "0x1E33108", VA = "0x1E33108")]
		public Fisheye()
		{
		}
	}
	[Token(Token = "0x200006A")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB47D34", Offset = "0xB47D34")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB47D34", Offset = "0xB47D34")]
	internal class GlobalFog : PostEffectsBase
	{
		[Token(Token = "0x4000326")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4AF30", Offset = "0xB4AF30")]
		public bool distanceFog;

		[Token(Token = "0x4000327")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4AF68", Offset = "0xB4AF68")]
		public bool useRadialDistance;

		[Token(Token = "0x4000328")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4AFA0", Offset = "0xB4AFA0")]
		public bool heightFog;

		[Token(Token = "0x4000329")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4AFD8", Offset = "0xB4AFD8")]
		public float height;

		[Token(Token = "0x400032A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4B010", Offset = "0xB4B010")]
		public float heightDensity;

		[Token(Token = "0x400032B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4B02C", Offset = "0xB4B02C")]
		public float startDistance;

		[Token(Token = "0x400032C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Shader fogShader;

		[Token(Token = "0x400032D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Material fogMaterial;

		[Token(Token = "0x600030D")]
		[Address(RVA = "0x269EA30", Offset = "0x269EA30", VA = "0x269EA30", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x600030E")]
		[Address(RVA = "0x269F0B4", Offset = "0x269F0B4", VA = "0x269F0B4")]
		[ImageEffectOpaque]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600030F")]
		[Address(RVA = "0x269F9EC", Offset = "0x269F9EC", VA = "0x269F9EC")]
		private static void CustomGraphicsBlit(RenderTexture source, RenderTexture dest, Material fxMaterial, int passNr)
		{
		}

		[Token(Token = "0x6000310")]
		[Address(RVA = "0x269FB98", Offset = "0x269FB98", VA = "0x269FB98")]
		public GlobalFog()
		{
		}
	}
	[Token(Token = "0x200006B")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB47DCC", Offset = "0xB47DCC")]
	public class Grayscale : ImageEffectBase
	{
		[Token(Token = "0x400032E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Texture textureRamp;

		[Token(Token = "0x400032F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float rampOffset;

		[Token(Token = "0x6000311")]
		[Address(RVA = "0x269FBD4", Offset = "0x269FBD4", VA = "0x269FBD4")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000312")]
		[Address(RVA = "0x269FDA4", Offset = "0x269FDA4", VA = "0x269FDA4")]
		public Grayscale()
		{
		}
	}
	[Token(Token = "0x200006C")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB47E18", Offset = "0xB47E18")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB47E18", Offset = "0xB47E18")]
	public class ImageEffectBase : MonoBehaviour
	{
		[Token(Token = "0x4000330")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Shader shader;

		[Token(Token = "0x4000331")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Material m_Material;

		[Token(Token = "0x17000078")]
		protected Material material
		{
			[Token(Token = "0x6000314")]
			[Address(RVA = "0x269FCDC", Offset = "0x269FCDC", VA = "0x269FCDC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000313")]
		[Address(RVA = "0x269FDB4", Offset = "0x269FDB4", VA = "0x269FDB4", Slot = "4")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000315")]
		[Address(RVA = "0x269FE6C", Offset = "0x269FE6C", VA = "0x269FE6C", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6000316")]
		[Address(RVA = "0x269FDAC", Offset = "0x269FDAC", VA = "0x269FDAC")]
		public ImageEffectBase()
		{
		}
	}
	[Token(Token = "0x200006D")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB47EA0", Offset = "0xB47EA0")]
	public class ImageEffects
	{
		[Token(Token = "0x6000317")]
		[Address(RVA = "0x269FF1C", Offset = "0x269FF1C", VA = "0x269FF1C")]
		public static void RenderDistortion(Material material, RenderTexture source, RenderTexture destination, float angle, Vector2 center, Vector2 radius)
		{
		}

		[Token(Token = "0x6000318")]
		[Address(RVA = "0x26A01AC", Offset = "0x26A01AC", VA = "0x26A01AC")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xB4C500", Offset = "0xB4C500")]
		public static void Blit(RenderTexture source, RenderTexture dest)
		{
		}

		[Token(Token = "0x6000319")]
		[Address(RVA = "0x26A0224", Offset = "0x26A0224", VA = "0x26A0224")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xB4C538", Offset = "0xB4C538")]
		public static void BlitWithMaterial(Material material, RenderTexture source, RenderTexture dest)
		{
		}

		[Token(Token = "0x600031A")]
		[Address(RVA = "0x26A02A4", Offset = "0x26A02A4", VA = "0x26A02A4")]
		public ImageEffects()
		{
		}
	}
	[Token(Token = "0x200006E")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB47ED8", Offset = "0xB47ED8")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB47ED8", Offset = "0xB47ED8")]
	public class MotionBlur : ImageEffectBase
	{
		[Token(Token = "0x4000332")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float blurAmount;

		[Token(Token = "0x4000333")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool extraBlur;

		[Token(Token = "0x4000334")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private RenderTexture accumTexture;

		[Token(Token = "0x600031B")]
		[Address(RVA = "0x26A02AC", Offset = "0x26A02AC", VA = "0x26A02AC", Slot = "4")]
		protected override void Start()
		{
		}

		[Token(Token = "0x600031C")]
		[Address(RVA = "0x26A02F0", Offset = "0x26A02F0", VA = "0x26A02F0", Slot = "5")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x600031D")]
		[Address(RVA = "0x26A0364", Offset = "0x26A0364", VA = "0x26A0364")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600031E")]
		[Address(RVA = "0x26A0750", Offset = "0x26A0750", VA = "0x26A0750")]
		public MotionBlur()
		{
		}
	}
	[Token(Token = "0x200006F")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB47F70", Offset = "0xB47F70")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB47F70", Offset = "0xB47F70")]
	public class NoiseAndGrain : PostEffectsBase
	{
		[Token(Token = "0x4000335")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float intensityMultiplier;

		[Token(Token = "0x4000336")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float generalIntensity;

		[Token(Token = "0x4000337")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float blackIntensity;

		[Token(Token = "0x4000338")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float whiteIntensity;

		[Token(Token = "0x4000339")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float midGrey;

		[Token(Token = "0x400033A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool dx11Grain;

		[Token(Token = "0x400033B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float softness;

		[Token(Token = "0x400033C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool monochrome;

		[Token(Token = "0x400033D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector3 intensities;

		[Token(Token = "0x400033E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector3 tiling;

		[Token(Token = "0x400033F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float monochromeTiling;

		[Token(Token = "0x4000340")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public FilterMode filterMode;

		[Token(Token = "0x4000341")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Texture2D noiseTexture;

		[Token(Token = "0x4000342")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Shader noiseShader;

		[Token(Token = "0x4000343")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Material noiseMaterial;

		[Token(Token = "0x4000344")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Shader dx11NoiseShader;

		[Token(Token = "0x4000345")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Material dx11NoiseMaterial;

		[Token(Token = "0x4000346")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static float TILE_AMOUNT;

		[Token(Token = "0x600031F")]
		[Address(RVA = "0x26A0764", Offset = "0x26A0764", VA = "0x26A0764", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000320")]
		[Address(RVA = "0x26A07DC", Offset = "0x26A07DC", VA = "0x26A07DC")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000321")]
		[Address(RVA = "0x26A12A4", Offset = "0x26A12A4", VA = "0x26A12A4")]
		private static void DrawNoiseQuadGrid(RenderTexture source, RenderTexture dest, Material fxMaterial, Texture2D noise, int passNr)
		{
		}

		[Token(Token = "0x6000322")]
		[Address(RVA = "0x26A1644", Offset = "0x26A1644", VA = "0x26A1644")]
		public NoiseAndGrain()
		{
		}
	}
	[Token(Token = "0x2000070")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB48008", Offset = "0xB48008")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB48008", Offset = "0xB48008")]
	public class NoiseAndScratches : MonoBehaviour
	{
		[Token(Token = "0x4000347")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool monochrome;

		[Token(Token = "0x4000348")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		private bool rgbFallback;

		[Token(Token = "0x4000349")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float grainIntensityMin;

		[Token(Token = "0x400034A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float grainIntensityMax;

		[Token(Token = "0x400034B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float grainSize;

		[Token(Token = "0x400034C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float scratchIntensityMin;

		[Token(Token = "0x400034D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float scratchIntensityMax;

		[Token(Token = "0x400034E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float scratchFPS;

		[Token(Token = "0x400034F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float scratchJitter;

		[Token(Token = "0x4000350")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Texture grainTexture;

		[Token(Token = "0x4000351")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Texture scratchTexture;

		[Token(Token = "0x4000352")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader shaderRGB;

		[Token(Token = "0x4000353")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Shader shaderYUV;

		[Token(Token = "0x4000354")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Material m_MaterialRGB;

		[Token(Token = "0x4000355")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material m_MaterialYUV;

		[Token(Token = "0x4000356")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float scratchTimeLeft;

		[Token(Token = "0x4000357")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float scratchX;

		[Token(Token = "0x4000358")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float scratchY;

		[Token(Token = "0x17000079")]
		protected Material material
		{
			[Token(Token = "0x6000325")]
			[Address(RVA = "0x26A18B0", Offset = "0x26A18B0", VA = "0x26A18B0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000324")]
		[Address(RVA = "0x26A175C", Offset = "0x26A175C", VA = "0x26A175C")]
		protected void Start()
		{
		}

		[Token(Token = "0x6000326")]
		[Address(RVA = "0x26A1A18", Offset = "0x26A1A18", VA = "0x26A1A18")]
		protected void OnDisable()
		{
		}

		[Token(Token = "0x6000327")]
		[Address(RVA = "0x26A1B1C", Offset = "0x26A1B1C", VA = "0x26A1B1C")]
		private void SanitizeParameters()
		{
		}

		[Token(Token = "0x6000328")]
		[Address(RVA = "0x26A1C58", Offset = "0x26A1C58", VA = "0x26A1C58")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000329")]
		[Address(RVA = "0x26A1FFC", Offset = "0x26A1FFC", VA = "0x26A1FFC")]
		public NoiseAndScratches()
		{
		}
	}
	[Token(Token = "0x2000071")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB480A0", Offset = "0xB480A0")]
	public class PostEffectsBase : MonoBehaviour
	{
		[Token(Token = "0x4000359")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected bool supportHDRTextures;

		[Token(Token = "0x400035A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		protected bool supportDX11;

		[Token(Token = "0x400035B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		protected bool isSupported;

		[Token(Token = "0x600032A")]
		[Address(RVA = "0x269EBC0", Offset = "0x269EBC0", VA = "0x269EBC0")]
		protected Material CheckShaderAndCreateMaterial(Shader s, Material m2Create)
		{
			return null;
		}

		[Token(Token = "0x600032B")]
		[Address(RVA = "0x26A205C", Offset = "0x26A205C", VA = "0x26A205C")]
		protected Material CreateMaterial(Shader s, Material m2Create)
		{
			return null;
		}

		[Token(Token = "0x600032C")]
		[Address(RVA = "0x26A2260", Offset = "0x26A2260", VA = "0x26A2260")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600032D")]
		[Address(RVA = "0x26A226C", Offset = "0x26A226C", VA = "0x26A226C")]
		protected bool CheckSupport()
		{
			return default(bool);
		}

		[Token(Token = "0x600032E")]
		[Address(RVA = "0x26A2274", Offset = "0x26A2274", VA = "0x26A2274", Slot = "4")]
		public virtual bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x600032F")]
		[Address(RVA = "0x26A2324", Offset = "0x26A2324", VA = "0x26A2324")]
		protected void Start()
		{
		}

		[Token(Token = "0x6000330")]
		[Address(RVA = "0x269EA88", Offset = "0x269EA88", VA = "0x269EA88")]
		protected bool CheckSupport(bool needDepth)
		{
			return default(bool);
		}

		[Token(Token = "0x6000331")]
		[Address(RVA = "0x26A2330", Offset = "0x26A2330", VA = "0x26A2330")]
		protected bool CheckSupport(bool needDepth, bool needHdr)
		{
			return default(bool);
		}

		[Token(Token = "0x6000332")]
		[Address(RVA = "0x26A238C", Offset = "0x26A238C", VA = "0x26A238C")]
		public bool Dx11Support()
		{
			return default(bool);
		}

		[Token(Token = "0x6000333")]
		[Address(RVA = "0x269F00C", Offset = "0x269F00C", VA = "0x269F00C")]
		protected void ReportAutoDisable()
		{
		}

		[Token(Token = "0x6000334")]
		[Address(RVA = "0x26A2394", Offset = "0x26A2394", VA = "0x26A2394")]
		private bool CheckShader(Shader s)
		{
			return default(bool);
		}

		[Token(Token = "0x6000335")]
		[Address(RVA = "0x26A2030", Offset = "0x26A2030", VA = "0x26A2030")]
		protected void NotSupported()
		{
		}

		[Token(Token = "0x6000336")]
		[Address(RVA = "0x26A2624", Offset = "0x26A2624", VA = "0x26A2624")]
		protected void DrawBorder(RenderTexture dest, Material material)
		{
		}

		[Token(Token = "0x6000337")]
		[Address(RVA = "0x269FBC0", Offset = "0x269FBC0", VA = "0x269FBC0")]
		public PostEffectsBase()
		{
		}
	}
	[Token(Token = "0x2000072")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB48114", Offset = "0xB48114")]
	internal class PostEffectsHelper : MonoBehaviour
	{
		[Token(Token = "0x6000338")]
		[Address(RVA = "0x26A29CC", Offset = "0x26A29CC", VA = "0x26A29CC")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000339")]
		[Address(RVA = "0x26A2A38", Offset = "0x26A2A38", VA = "0x26A2A38")]
		private static void DrawLowLevelPlaneAlignedWithCamera(float dist, RenderTexture source, RenderTexture dest, Material material, Camera cameraForProjectionMatrix)
		{
		}

		[Token(Token = "0x600033A")]
		[Address(RVA = "0x26A2CD0", Offset = "0x26A2CD0", VA = "0x26A2CD0")]
		private static void DrawBorder(RenderTexture dest, Material material)
		{
		}

		[Token(Token = "0x600033B")]
		[Address(RVA = "0x26A3074", Offset = "0x26A3074", VA = "0x26A3074")]
		private static void DrawLowLevelQuad(float x1, float x2, float y1, float y2, RenderTexture source, RenderTexture dest, Material material)
		{
		}

		[Token(Token = "0x600033C")]
		[Address(RVA = "0x26A322C", Offset = "0x26A322C", VA = "0x26A322C")]
		public PostEffectsHelper()
		{
		}
	}
	[Token(Token = "0x2000073")]
	internal class Quads
	{
		[Token(Token = "0x400035C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Mesh[] meshes;

		[Token(Token = "0x400035D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static int currentQuads;

		[Token(Token = "0x600033D")]
		[Address(RVA = "0x26A3234", Offset = "0x26A3234", VA = "0x26A3234")]
		private static bool HasMeshes()
		{
			return default(bool);
		}

		[Token(Token = "0x600033E")]
		[Address(RVA = "0x26A334C", Offset = "0x26A334C", VA = "0x26A334C")]
		public static void Cleanup()
		{
		}

		[Token(Token = "0x600033F")]
		[Address(RVA = "0x26A356C", Offset = "0x26A356C", VA = "0x26A356C")]
		public static Mesh[] GetMeshes(int totalWidth, int totalHeight)
		{
			return null;
		}

		[Token(Token = "0x6000340")]
		[Address(RVA = "0x26A3844", Offset = "0x26A3844", VA = "0x26A3844")]
		private static Mesh GetMesh(int triCount, int triOffset, int totalWidth, int totalHeight)
		{
			return null;
		}

		[Token(Token = "0x6000341")]
		[Address(RVA = "0x26A3F58", Offset = "0x26A3F58", VA = "0x26A3F58")]
		public Quads()
		{
		}
	}
	[Token(Token = "0x2000074")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB48188", Offset = "0xB48188")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB48188", Offset = "0xB48188")]
	public class ScreenOverlay : PostEffectsBase
	{
		[Token(Token = "0x20002D0")]
		public enum OverlayBlendMode
		{
			[Token(Token = "0x4000E4C")]
			Additive,
			[Token(Token = "0x4000E4D")]
			ScreenBlend,
			[Token(Token = "0x4000E4E")]
			Multiply,
			[Token(Token = "0x4000E4F")]
			Overlay,
			[Token(Token = "0x4000E50")]
			AlphaBlend
		}

		[Token(Token = "0x400035E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public OverlayBlendMode blendMode;

		[Token(Token = "0x400035F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float intensity;

		[Token(Token = "0x4000360")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Texture2D texture;

		[Token(Token = "0x4000361")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Shader overlayShader;

		[Token(Token = "0x4000362")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Material overlayMaterial;

		[Token(Token = "0x6000343")]
		[Address(RVA = "0x26A3F64", Offset = "0x26A3F64", VA = "0x26A3F64", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000344")]
		[Address(RVA = "0x26A3FBC", Offset = "0x26A3FBC", VA = "0x26A3FBC")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000345")]
		[Address(RVA = "0x26A4174", Offset = "0x26A4174", VA = "0x26A4174")]
		public ScreenOverlay()
		{
		}
	}
	[Token(Token = "0x2000075")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB48220", Offset = "0xB48220")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB48220", Offset = "0xB48220")]
	internal class ScreenSpaceAmbientObscurance : PostEffectsBase
	{
		[Token(Token = "0x4000363")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4B064", Offset = "0xB4B064")]
		public float intensity;

		[Token(Token = "0x4000364")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4B07C", Offset = "0xB4B07C")]
		public float radius;

		[Token(Token = "0x4000365")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4B098", Offset = "0xB4B098")]
		public int blurIterations;

		[Token(Token = "0x4000366")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4B0B0", Offset = "0xB4B0B0")]
		public float blurFilterDistance;

		[Token(Token = "0x4000367")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4B0C8", Offset = "0xB4B0C8")]
		public int downsample;

		[Token(Token = "0x4000368")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Texture2D rand;

		[Token(Token = "0x4000369")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Shader aoShader;

		[Token(Token = "0x400036A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material aoMaterial;

		[Token(Token = "0x6000346")]
		[Address(RVA = "0x26A4194", Offset = "0x26A4194", VA = "0x26A4194", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000347")]
		[Address(RVA = "0x26A41EC", Offset = "0x26A41EC", VA = "0x26A41EC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000348")]
		[Address(RVA = "0x26A4294", Offset = "0x26A4294", VA = "0x26A4294")]
		[ImageEffectOpaque]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000349")]
		[Address(RVA = "0x26A4954", Offset = "0x26A4954", VA = "0x26A4954")]
		public ScreenSpaceAmbientObscurance()
		{
		}
	}
	[Token(Token = "0x2000076")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB482B8", Offset = "0xB482B8")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB482B8", Offset = "0xB482B8")]
	public class ScreenSpaceAmbientOcclusion : MonoBehaviour
	{
		[Token(Token = "0x20002D1")]
		public enum SSAOSamples
		{
			[Token(Token = "0x4000E52")]
			Low,
			[Token(Token = "0x4000E53")]
			Medium,
			[Token(Token = "0x4000E54")]
			High
		}

		[Token(Token = "0x400036B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float m_Radius;

		[Token(Token = "0x400036C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public SSAOSamples m_SampleCount;

		[Token(Token = "0x400036D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float m_OcclusionIntensity;

		[Token(Token = "0x400036E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int m_Blur;

		[Token(Token = "0x400036F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int m_Downsampling;

		[Token(Token = "0x4000370")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float m_OcclusionAttenuation;

		[Token(Token = "0x4000371")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float m_MinZ;

		[Token(Token = "0x4000372")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Shader m_SSAOShader;

		[Token(Token = "0x4000373")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material m_SSAOMaterial;

		[Token(Token = "0x4000374")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Texture2D m_RandomTexture;

		[Token(Token = "0x4000375")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool m_Supported;

		[Token(Token = "0x600034A")]
		[Address(RVA = "0x26A4984", Offset = "0x26A4984", VA = "0x26A4984")]
		private static Material CreateMaterial(Shader shader)
		{
			return null;
		}

		[Token(Token = "0x600034B")]
		[Address(RVA = "0x26A4A38", Offset = "0x26A4A38", VA = "0x26A4A38")]
		private static void DestroyMaterial(Material mat)
		{
		}

		[Token(Token = "0x600034C")]
		[Address(RVA = "0x26A4AD4", Offset = "0x26A4AD4", VA = "0x26A4AD4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600034D")]
		[Address(RVA = "0x26A4ADC", Offset = "0x26A4ADC", VA = "0x26A4ADC")]
		private void Start()
		{
		}

		[Token(Token = "0x600034E")]
		[Address(RVA = "0x26A4C9C", Offset = "0x26A4C9C", VA = "0x26A4C9C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600034F")]
		[Address(RVA = "0x26A4BBC", Offset = "0x26A4BBC", VA = "0x26A4BBC")]
		private void CreateMaterials()
		{
		}

		[Token(Token = "0x6000350")]
		[Address(RVA = "0x26A4D34", Offset = "0x26A4D34", VA = "0x26A4D34")]
		[ImageEffectOpaque]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000351")]
		[Address(RVA = "0x26A54EC", Offset = "0x26A54EC", VA = "0x26A54EC")]
		public ScreenSpaceAmbientOcclusion()
		{
		}
	}
	[Token(Token = "0x2000077")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB48350", Offset = "0xB48350")]
	public class SepiaTone : ImageEffectBase
	{
		[Token(Token = "0x6000352")]
		[Address(RVA = "0x26A5524", Offset = "0x26A5524", VA = "0x26A5524")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000353")]
		[Address(RVA = "0x26A55B4", Offset = "0x26A55B4", VA = "0x26A55B4")]
		public SepiaTone()
		{
		}
	}
	[Token(Token = "0x2000078")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB4839C", Offset = "0xB4839C")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB4839C", Offset = "0xB4839C")]
	public class SunShafts : PostEffectsBase
	{
		[Token(Token = "0x20002D2")]
		public enum SunShaftsResolution
		{
			[Token(Token = "0x4000E56")]
			Low,
			[Token(Token = "0x4000E57")]
			Normal,
			[Token(Token = "0x4000E58")]
			High
		}

		[Token(Token = "0x20002D3")]
		public enum ShaftsScreenBlendMode
		{
			[Token(Token = "0x4000E5A")]
			Screen,
			[Token(Token = "0x4000E5B")]
			Add
		}

		[Token(Token = "0x4000376")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public SunShaftsResolution resolution;

		[Token(Token = "0x4000377")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ShaftsScreenBlendMode screenBlendMode;

		[Token(Token = "0x4000378")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform sunTransform;

		[Token(Token = "0x4000379")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int radialBlurIterations;

		[Token(Token = "0x400037A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Color sunColor;

		[Token(Token = "0x400037B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Color sunThreshold;

		[Token(Token = "0x400037C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float sunShaftBlurRadius;

		[Token(Token = "0x400037D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float sunShaftIntensity;

		[Token(Token = "0x400037E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float maxRadius;

		[Token(Token = "0x400037F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool useDepthTexture;

		[Token(Token = "0x4000380")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Shader sunShaftsShader;

		[Token(Token = "0x4000381")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Material sunShaftsMaterial;

		[Token(Token = "0x4000382")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Shader simpleClearShader;

		[Token(Token = "0x4000383")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Material simpleClearMaterial;

		[Token(Token = "0x6000354")]
		[Address(RVA = "0x26A55BC", Offset = "0x26A55BC", VA = "0x26A55BC", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000355")]
		[Address(RVA = "0x26A5624", Offset = "0x26A5624", VA = "0x26A5624")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000356")]
		[Address(RVA = "0x26A5F38", Offset = "0x26A5F38", VA = "0x26A5F38")]
		public SunShafts()
		{
		}
	}
	[Token(Token = "0x2000079")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB48434", Offset = "0xB48434")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB48434", Offset = "0xB48434")]
	internal class TiltShift : PostEffectsBase
	{
		[Token(Token = "0x20002D4")]
		public enum TiltShiftMode
		{
			[Token(Token = "0x4000E5D")]
			TiltShiftMode,
			[Token(Token = "0x4000E5E")]
			IrisMode
		}

		[Token(Token = "0x20002D5")]
		public enum TiltShiftQuality
		{
			[Token(Token = "0x4000E60")]
			Preview,
			[Token(Token = "0x4000E61")]
			Normal,
			[Token(Token = "0x4000E62")]
			High
		}

		[Token(Token = "0x4000384")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public TiltShiftMode mode;

		[Token(Token = "0x4000385")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TiltShiftQuality quality;

		[Token(Token = "0x4000386")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4B0E0", Offset = "0xB4B0E0")]
		public float blurArea;

		[Token(Token = "0x4000387")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4B0F8", Offset = "0xB4B0F8")]
		public float maxBlurSize;

		[Token(Token = "0x4000388")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4B110", Offset = "0xB4B110")]
		public int downsample;

		[Token(Token = "0x4000389")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Shader tiltShiftShader;

		[Token(Token = "0x400038A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Material tiltShiftMaterial;

		[Token(Token = "0x6000357")]
		[Address(RVA = "0x26A5FEC", Offset = "0x26A5FEC", VA = "0x26A5FEC", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000358")]
		[Address(RVA = "0x26A6044", Offset = "0x26A6044", VA = "0x26A6044")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000359")]
		[Address(RVA = "0x26A634C", Offset = "0x26A634C", VA = "0x26A634C")]
		public TiltShift()
		{
		}
	}
	[Token(Token = "0x200007A")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB484BC", Offset = "0xB484BC")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB484BC", Offset = "0xB484BC")]
	public class Tonemapping : PostEffectsBase
	{
		[Token(Token = "0x20002D6")]
		public enum TonemapperType
		{
			[Token(Token = "0x4000E64")]
			SimpleReinhard,
			[Token(Token = "0x4000E65")]
			UserCurve,
			[Token(Token = "0x4000E66")]
			Hable,
			[Token(Token = "0x4000E67")]
			Photographic,
			[Token(Token = "0x4000E68")]
			OptimizedHejiDawson,
			[Token(Token = "0x4000E69")]
			AdaptiveReinhard,
			[Token(Token = "0x4000E6A")]
			AdaptiveReinhardAutoWhite
		}

		[Token(Token = "0x20002D7")]
		public enum AdaptiveTexSize
		{
			[Token(Token = "0x4000E6C")]
			Square16 = 0x10,
			[Token(Token = "0x4000E6D")]
			Square32 = 0x20,
			[Token(Token = "0x4000E6E")]
			Square64 = 0x40,
			[Token(Token = "0x4000E6F")]
			Square128 = 0x80,
			[Token(Token = "0x4000E70")]
			Square256 = 0x100,
			[Token(Token = "0x4000E71")]
			Square512 = 0x200,
			[Token(Token = "0x4000E72")]
			Square1024 = 0x400
		}

		[Token(Token = "0x400038B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public TonemapperType type;

		[Token(Token = "0x400038C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AdaptiveTexSize adaptiveTextureSize;

		[Token(Token = "0x400038D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimationCurve remapCurve;

		[Token(Token = "0x400038E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Texture2D curveTex;

		[Token(Token = "0x400038F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float exposureAdjustment;

		[Token(Token = "0x4000390")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float middleGrey;

		[Token(Token = "0x4000391")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float white;

		[Token(Token = "0x4000392")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float adaptionSpeed;

		[Token(Token = "0x4000393")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader tonemapper;

		[Token(Token = "0x4000394")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool validRenderTextureFormat;

		[Token(Token = "0x4000395")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Material tonemapMaterial;

		[Token(Token = "0x4000396")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private RenderTexture rt;

		[Token(Token = "0x4000397")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private RenderTextureFormat rtFormat;

		[Token(Token = "0x600035A")]
		[Address(RVA = "0x26A6370", Offset = "0x26A6370", VA = "0x26A6370", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x600035B")]
		[Address(RVA = "0x26A64C8", Offset = "0x26A64C8", VA = "0x26A64C8")]
		public float UpdateCurve()
		{
			return default(float);
		}

		[Token(Token = "0x600035C")]
		[Address(RVA = "0x26A67E8", Offset = "0x26A67E8", VA = "0x26A67E8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600035D")]
		[Address(RVA = "0x26A6940", Offset = "0x26A6940", VA = "0x26A6940")]
		private bool CreateInternalRenderTexture()
		{
			return default(bool);
		}

		[Token(Token = "0x600035E")]
		[Address(RVA = "0x26A6A34", Offset = "0x26A6A34", VA = "0x26A6A34")]
		[ImageEffectTransformsToLDR]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600035F")]
		[Address(RVA = "0x26A7384", Offset = "0x26A7384", VA = "0x26A7384")]
		public Tonemapping()
		{
		}
	}
	[Token(Token = "0x200007B")]
	internal class Triangles
	{
		[Token(Token = "0x4000398")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Mesh[] meshes;

		[Token(Token = "0x4000399")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static int currentTris;

		[Token(Token = "0x6000360")]
		[Address(RVA = "0x26A73BC", Offset = "0x26A73BC", VA = "0x26A73BC")]
		private static bool HasMeshes()
		{
			return default(bool);
		}

		[Token(Token = "0x6000361")]
		[Address(RVA = "0x26A7518", Offset = "0x26A7518", VA = "0x26A7518")]
		private static void Cleanup()
		{
		}

		[Token(Token = "0x6000362")]
		[Address(RVA = "0x26A7738", Offset = "0x26A7738", VA = "0x26A7738")]
		private static Mesh[] GetMeshes(int totalWidth, int totalHeight)
		{
			return null;
		}

		[Token(Token = "0x6000363")]
		[Address(RVA = "0x26A7A10", Offset = "0x26A7A10", VA = "0x26A7A10")]
		private static Mesh GetMesh(int triCount, int triOffset, int totalWidth, int totalHeight)
		{
			return null;
		}

		[Token(Token = "0x6000364")]
		[Address(RVA = "0x26A7F98", Offset = "0x26A7F98", VA = "0x26A7F98")]
		public Triangles()
		{
		}
	}
	[Token(Token = "0x200007C")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB48554", Offset = "0xB48554")]
	public class Twirl : ImageEffectBase
	{
		[Token(Token = "0x400039A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector2 radius;

		[Token(Token = "0x400039B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float angle;

		[Token(Token = "0x400039C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector2 center;

		[Token(Token = "0x6000366")]
		[Address(RVA = "0x26A7FA4", Offset = "0x26A7FA4", VA = "0x26A7FA4")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000367")]
		[Address(RVA = "0x26A7FE8", Offset = "0x26A7FE8", VA = "0x26A7FE8")]
		public Twirl()
		{
		}
	}
	[Token(Token = "0x200007D")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB485A0", Offset = "0xB485A0")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB485A0", Offset = "0xB485A0")]
	public class VignetteAndChromaticAberration : PostEffectsBase
	{
		[Token(Token = "0x20002D8")]
		public enum AberrationMode
		{
			[Token(Token = "0x4000E74")]
			Simple,
			[Token(Token = "0x4000E75")]
			Advanced
		}

		[Token(Token = "0x400039D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public AberrationMode mode;

		[Token(Token = "0x400039E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float intensity;

		[Token(Token = "0x400039F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float chromaticAberration;

		[Token(Token = "0x40003A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float axialAberration;

		[Token(Token = "0x40003A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float blur;

		[Token(Token = "0x40003A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float blurSpread;

		[Token(Token = "0x40003A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float luminanceDependency;

		[Token(Token = "0x40003A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float blurDistance;

		[Token(Token = "0x40003A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Shader vignetteShader;

		[Token(Token = "0x40003A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader separableBlurShader;

		[Token(Token = "0x40003A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Shader chromAberrationShader;

		[Token(Token = "0x40003A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Material m_VignetteMaterial;

		[Token(Token = "0x40003A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material m_SeparableBlurMaterial;

		[Token(Token = "0x40003AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Material m_ChromAberrationMaterial;

		[Token(Token = "0x6000368")]
		[Address(RVA = "0x26A8064", Offset = "0x26A8064", VA = "0x26A8064", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000369")]
		[Address(RVA = "0x26A80E8", Offset = "0x26A80E8", VA = "0x26A80E8")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600036A")]
		[Address(RVA = "0x26A87C8", Offset = "0x26A87C8", VA = "0x26A87C8")]
		public VignetteAndChromaticAberration()
		{
		}
	}
	[Token(Token = "0x200007E")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB48638", Offset = "0xB48638")]
	public class Vortex : ImageEffectBase
	{
		[Token(Token = "0x40003AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector2 radius;

		[Token(Token = "0x40003AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float angle;

		[Token(Token = "0x40003AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector2 center;

		[Token(Token = "0x600036B")]
		[Address(RVA = "0x26A8808", Offset = "0x26A8808", VA = "0x26A8808")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600036C")]
		[Address(RVA = "0x26A884C", Offset = "0x26A884C", VA = "0x26A884C")]
		public Vortex()
		{
		}
	}
}
namespace Steamworks
{
	[Token(Token = "0x200007F")]
	public static class SteamAppList
	{
		[Token(Token = "0x600036D")]
		[Address(RVA = "0x1EB90E8", Offset = "0x1EB90E8", VA = "0x1EB90E8")]
		public static uint GetNumInstalledApps()
		{
			return default(uint);
		}

		[Token(Token = "0x600036E")]
		[Address(RVA = "0x1EB9104", Offset = "0x1EB9104", VA = "0x1EB9104")]
		public static uint GetInstalledApps(AppId_t[] pvecAppID, uint unMaxAppIDs)
		{
			return default(uint);
		}

		[Token(Token = "0x600036F")]
		[Address(RVA = "0x1EB9138", Offset = "0x1EB9138", VA = "0x1EB9138")]
		public static int GetAppName(AppId_t nAppID, out string pchName, int cchNameMax)
		{
			return default(int);
		}

		[Token(Token = "0x6000370")]
		[Address(RVA = "0x1EB9228", Offset = "0x1EB9228", VA = "0x1EB9228")]
		public static int GetAppInstallDir(AppId_t nAppID, out string pchDirectory, int cchNameMax)
		{
			return default(int);
		}

		[Token(Token = "0x6000371")]
		[Address(RVA = "0x1EB9318", Offset = "0x1EB9318", VA = "0x1EB9318")]
		public static int GetAppBuildId(AppId_t nAppID)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000080")]
	public static class SteamApps
	{
		[Token(Token = "0x6000372")]
		[Address(RVA = "0x1EB9344", Offset = "0x1EB9344", VA = "0x1EB9344")]
		public static bool BIsSubscribed()
		{
			return default(bool);
		}

		[Token(Token = "0x6000373")]
		[Address(RVA = "0x1EB9360", Offset = "0x1EB9360", VA = "0x1EB9360")]
		public static bool BIsLowViolence()
		{
			return default(bool);
		}

		[Token(Token = "0x6000374")]
		[Address(RVA = "0x1EB937C", Offset = "0x1EB937C", VA = "0x1EB937C")]
		public static bool BIsCybercafe()
		{
			return default(bool);
		}

		[Token(Token = "0x6000375")]
		[Address(RVA = "0x1EB9398", Offset = "0x1EB9398", VA = "0x1EB9398")]
		public static bool BIsVACBanned()
		{
			return default(bool);
		}

		[Token(Token = "0x6000376")]
		[Address(RVA = "0x1EB93B4", Offset = "0x1EB93B4", VA = "0x1EB93B4")]
		public static string GetCurrentGameLanguage()
		{
			return null;
		}

		[Token(Token = "0x6000377")]
		[Address(RVA = "0x1EB93D8", Offset = "0x1EB93D8", VA = "0x1EB93D8")]
		public static string GetAvailableGameLanguages()
		{
			return null;
		}

		[Token(Token = "0x6000378")]
		[Address(RVA = "0x1EB93FC", Offset = "0x1EB93FC", VA = "0x1EB93FC")]
		public static bool BIsSubscribedApp(AppId_t appID)
		{
			return default(bool);
		}

		[Token(Token = "0x6000379")]
		[Address(RVA = "0x1EB9428", Offset = "0x1EB9428", VA = "0x1EB9428")]
		public static bool BIsDlcInstalled(AppId_t appID)
		{
			return default(bool);
		}

		[Token(Token = "0x600037A")]
		[Address(RVA = "0x1EB9454", Offset = "0x1EB9454", VA = "0x1EB9454")]
		public static uint GetEarliestPurchaseUnixTime(AppId_t nAppID)
		{
			return default(uint);
		}

		[Token(Token = "0x600037B")]
		[Address(RVA = "0x1EB9480", Offset = "0x1EB9480", VA = "0x1EB9480")]
		public static bool BIsSubscribedFromFreeWeekend()
		{
			return default(bool);
		}

		[Token(Token = "0x600037C")]
		[Address(RVA = "0x1EB949C", Offset = "0x1EB949C", VA = "0x1EB949C")]
		public static int GetDLCCount()
		{
			return default(int);
		}

		[Token(Token = "0x600037D")]
		[Address(RVA = "0x1EB94B8", Offset = "0x1EB94B8", VA = "0x1EB94B8")]
		public static bool BGetDLCDataByIndex(int iDLC, out AppId_t pAppID, out bool pbAvailable, out string pchName, int cchNameBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x600037E")]
		[Address(RVA = "0x1EB95B8", Offset = "0x1EB95B8", VA = "0x1EB95B8")]
		public static void InstallDLC(AppId_t nAppID)
		{
		}

		[Token(Token = "0x600037F")]
		[Address(RVA = "0x1EB95E4", Offset = "0x1EB95E4", VA = "0x1EB95E4")]
		public static void UninstallDLC(AppId_t nAppID)
		{
		}

		[Token(Token = "0x6000380")]
		[Address(RVA = "0x1EB9610", Offset = "0x1EB9610", VA = "0x1EB9610")]
		public static void RequestAppProofOfPurchaseKey(AppId_t nAppID)
		{
		}

		[Token(Token = "0x6000381")]
		[Address(RVA = "0x1EB963C", Offset = "0x1EB963C", VA = "0x1EB963C")]
		public static bool GetCurrentBetaName(out string pchName, int cchNameBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000382")]
		[Address(RVA = "0x1EB9710", Offset = "0x1EB9710", VA = "0x1EB9710")]
		public static bool MarkContentCorrupt(bool bMissingFilesOnly)
		{
			return default(bool);
		}

		[Token(Token = "0x6000383")]
		[Address(RVA = "0x1EB973C", Offset = "0x1EB973C", VA = "0x1EB973C")]
		public static uint GetInstalledDepots(AppId_t appID, DepotId_t[] pvecDepots, uint cMaxDepots)
		{
			return default(uint);
		}

		[Token(Token = "0x6000384")]
		[Address(RVA = "0x1EB9780", Offset = "0x1EB9780", VA = "0x1EB9780")]
		public static uint GetAppInstallDir(AppId_t appID, out string pchFolder, uint cchFolderBufferSize)
		{
			return default(uint);
		}

		[Token(Token = "0x6000385")]
		[Address(RVA = "0x1EB986C", Offset = "0x1EB986C", VA = "0x1EB986C")]
		public static bool BIsAppInstalled(AppId_t appID)
		{
			return default(bool);
		}

		[Token(Token = "0x6000386")]
		[Address(RVA = "0x1EB9898", Offset = "0x1EB9898", VA = "0x1EB9898")]
		public static CSteamID GetAppOwner()
		{
			return default(CSteamID);
		}

		[Token(Token = "0x6000387")]
		[Address(RVA = "0x1EB9914", Offset = "0x1EB9914", VA = "0x1EB9914")]
		public static string GetLaunchQueryParam(string pchKey)
		{
			return null;
		}

		[Token(Token = "0x6000388")]
		[Address(RVA = "0x1EB9A4C", Offset = "0x1EB9A4C", VA = "0x1EB9A4C")]
		public static bool GetDlcDownloadProgress(AppId_t nAppID, out ulong punBytesDownloaded, out ulong punBytesTotal)
		{
			return default(bool);
		}

		[Token(Token = "0x6000389")]
		[Address(RVA = "0x1EB9A90", Offset = "0x1EB9A90", VA = "0x1EB9A90")]
		public static int GetAppBuildId()
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000081")]
	public static class SteamClient
	{
		[Token(Token = "0x600038A")]
		[Address(RVA = "0x1EB9AAC", Offset = "0x1EB9AAC", VA = "0x1EB9AAC")]
		public static HSteamPipe CreateSteamPipe()
		{
			return default(HSteamPipe);
		}

		[Token(Token = "0x600038B")]
		[Address(RVA = "0x1EB9AD8", Offset = "0x1EB9AD8", VA = "0x1EB9AD8")]
		public static bool BReleaseSteamPipe(HSteamPipe hSteamPipe)
		{
			return default(bool);
		}

		[Token(Token = "0x600038C")]
		[Address(RVA = "0x1EB9B04", Offset = "0x1EB9B04", VA = "0x1EB9B04")]
		public static HSteamUser ConnectToGlobalUser(HSteamPipe hSteamPipe)
		{
			return default(HSteamUser);
		}

		[Token(Token = "0x600038D")]
		[Address(RVA = "0x1EB9B40", Offset = "0x1EB9B40", VA = "0x1EB9B40")]
		public static HSteamUser CreateLocalUser(out HSteamPipe phSteamPipe, EAccountType eAccountType)
		{
			return default(HSteamUser);
		}

		[Token(Token = "0x600038E")]
		[Address(RVA = "0x1EB9B84", Offset = "0x1EB9B84", VA = "0x1EB9B84")]
		public static void ReleaseUser(HSteamPipe hSteamPipe, HSteamUser hUser)
		{
		}

		[Token(Token = "0x600038F")]
		[Address(RVA = "0x1EB9BB8", Offset = "0x1EB9BB8", VA = "0x1EB9BB8")]
		public static IntPtr GetISteamUser(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000390")]
		[Address(RVA = "0x1EB9CF4", Offset = "0x1EB9CF4", VA = "0x1EB9CF4")]
		public static IntPtr GetISteamGameServer(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000391")]
		[Address(RVA = "0x1EB9E30", Offset = "0x1EB9E30", VA = "0x1EB9E30")]
		public static void SetLocalIPBinding(uint unIP, ushort usPort)
		{
		}

		[Token(Token = "0x6000392")]
		[Address(RVA = "0x1EB9E64", Offset = "0x1EB9E64", VA = "0x1EB9E64")]
		public static IntPtr GetISteamFriends(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000393")]
		[Address(RVA = "0x1EB9FA0", Offset = "0x1EB9FA0", VA = "0x1EB9FA0")]
		public static IntPtr GetISteamUtils(HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000394")]
		[Address(RVA = "0x1EBA0D4", Offset = "0x1EBA0D4", VA = "0x1EBA0D4")]
		public static IntPtr GetISteamMatchmaking(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000395")]
		[Address(RVA = "0x1EBA210", Offset = "0x1EBA210", VA = "0x1EBA210")]
		public static IntPtr GetISteamMatchmakingServers(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000396")]
		[Address(RVA = "0x1EBA34C", Offset = "0x1EBA34C", VA = "0x1EBA34C")]
		public static IntPtr GetISteamGenericInterface(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000397")]
		[Address(RVA = "0x1EBA488", Offset = "0x1EBA488", VA = "0x1EBA488")]
		public static IntPtr GetISteamUserStats(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000398")]
		[Address(RVA = "0x1EBA5C4", Offset = "0x1EBA5C4", VA = "0x1EBA5C4")]
		public static IntPtr GetISteamGameServerStats(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000399")]
		[Address(RVA = "0x1EBA700", Offset = "0x1EBA700", VA = "0x1EBA700")]
		public static IntPtr GetISteamApps(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600039A")]
		[Address(RVA = "0x1EBA83C", Offset = "0x1EBA83C", VA = "0x1EBA83C")]
		public static IntPtr GetISteamNetworking(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600039B")]
		[Address(RVA = "0x1EBA978", Offset = "0x1EBA978", VA = "0x1EBA978")]
		public static IntPtr GetISteamRemoteStorage(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600039C")]
		[Address(RVA = "0x1EBAAB4", Offset = "0x1EBAAB4", VA = "0x1EBAAB4")]
		public static IntPtr GetISteamScreenshots(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600039D")]
		[Address(RVA = "0x1EBABF0", Offset = "0x1EBABF0", VA = "0x1EBABF0")]
		public static void RunFrame()
		{
		}

		[Token(Token = "0x600039E")]
		[Address(RVA = "0x1EBAC0C", Offset = "0x1EBAC0C", VA = "0x1EBAC0C")]
		public static uint GetIPCCallCount()
		{
			return default(uint);
		}

		[Token(Token = "0x600039F")]
		[Address(RVA = "0x1EBAC28", Offset = "0x1EBAC28", VA = "0x1EBAC28")]
		public static void SetWarningMessageHook(SteamAPIWarningMessageHook_t pFunction)
		{
		}

		[Token(Token = "0x60003A0")]
		[Address(RVA = "0x1EBAC54", Offset = "0x1EBAC54", VA = "0x1EBAC54")]
		public static bool BShutdownIfAllPipesClosed()
		{
			return default(bool);
		}

		[Token(Token = "0x60003A1")]
		[Address(RVA = "0x1EBAC70", Offset = "0x1EBAC70", VA = "0x1EBAC70")]
		public static IntPtr GetISteamHTTP(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60003A2")]
		[Address(RVA = "0x1EBADAC", Offset = "0x1EBADAC", VA = "0x1EBADAC")]
		public static IntPtr GetISteamUnifiedMessages(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60003A3")]
		[Address(RVA = "0x1EBAEE8", Offset = "0x1EBAEE8", VA = "0x1EBAEE8")]
		public static IntPtr GetISteamController(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60003A4")]
		[Address(RVA = "0x1EBB024", Offset = "0x1EBB024", VA = "0x1EBB024")]
		public static IntPtr GetISteamUGC(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60003A5")]
		[Address(RVA = "0x1EBB160", Offset = "0x1EBB160", VA = "0x1EBB160")]
		public static IntPtr GetISteamAppList(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60003A6")]
		[Address(RVA = "0x1EBB29C", Offset = "0x1EBB29C", VA = "0x1EBB29C")]
		public static IntPtr GetISteamMusic(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60003A7")]
		[Address(RVA = "0x1EBB3D8", Offset = "0x1EBB3D8", VA = "0x1EBB3D8")]
		public static IntPtr GetISteamMusicRemote(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60003A8")]
		[Address(RVA = "0x1EBB514", Offset = "0x1EBB514", VA = "0x1EBB514")]
		public static IntPtr GetISteamHTMLSurface(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60003A9")]
		[Address(RVA = "0x1EBB650", Offset = "0x1EBB650", VA = "0x1EBB650")]
		public static void Set_SteamAPI_CPostAPIResultInProcess(SteamAPI_PostAPIResultInProcess_t func)
		{
		}

		[Token(Token = "0x60003AA")]
		[Address(RVA = "0x1EBB67C", Offset = "0x1EBB67C", VA = "0x1EBB67C")]
		public static void Remove_SteamAPI_CPostAPIResultInProcess(SteamAPI_PostAPIResultInProcess_t func)
		{
		}

		[Token(Token = "0x60003AB")]
		[Address(RVA = "0x1EBB6A8", Offset = "0x1EBB6A8", VA = "0x1EBB6A8")]
		public static void Set_SteamAPI_CCheckCallbackRegisteredInProcess(SteamAPI_CheckCallbackRegistered_t func)
		{
		}

		[Token(Token = "0x60003AC")]
		[Address(RVA = "0x1EBB6D4", Offset = "0x1EBB6D4", VA = "0x1EBB6D4")]
		public static IntPtr GetISteamInventory(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60003AD")]
		[Address(RVA = "0x1EBB810", Offset = "0x1EBB810", VA = "0x1EBB810")]
		public static IntPtr GetISteamVideo(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}
	}
	[Token(Token = "0x2000082")]
	public static class SteamController
	{
		[Token(Token = "0x60003AE")]
		[Address(RVA = "0x1EBB94C", Offset = "0x1EBB94C", VA = "0x1EBB94C")]
		public static bool Init(string pchAbsolutePathToControllerConfigVDF)
		{
			return default(bool);
		}

		[Token(Token = "0x60003AF")]
		[Address(RVA = "0x1EBBA78", Offset = "0x1EBBA78", VA = "0x1EBBA78")]
		public static bool Shutdown()
		{
			return default(bool);
		}

		[Token(Token = "0x60003B0")]
		[Address(RVA = "0x1EBBA94", Offset = "0x1EBBA94", VA = "0x1EBBA94")]
		public static void RunFrame()
		{
		}

		[Token(Token = "0x60003B1")]
		[Address(RVA = "0x1EBBAB0", Offset = "0x1EBBAB0", VA = "0x1EBBAB0")]
		public static bool GetControllerState(uint unControllerIndex, out SteamControllerState_t pState)
		{
			return default(bool);
		}

		[Token(Token = "0x60003B2")]
		[Address(RVA = "0x1EBBAE4", Offset = "0x1EBBAE4", VA = "0x1EBBAE4")]
		public static void TriggerHapticPulse(uint unControllerIndex, ESteamControllerPad eTargetPad, ushort usDurationMicroSec)
		{
		}

		[Token(Token = "0x60003B3")]
		[Address(RVA = "0x1EBBB28", Offset = "0x1EBBB28", VA = "0x1EBBB28")]
		public static void SetOverrideMode(string pchMode)
		{
		}
	}
	[Token(Token = "0x2000083")]
	public static class SteamFriends
	{
		[Token(Token = "0x60003B4")]
		[Address(RVA = "0x1EBBEE4", Offset = "0x1EBBEE4", VA = "0x1EBBEE4")]
		public static string GetPersonaName()
		{
			return null;
		}

		[Token(Token = "0x60003B5")]
		[Address(RVA = "0x1EBBF08", Offset = "0x1EBBF08", VA = "0x1EBBF08")]
		public static SteamAPICall_t SetPersonaName(string pchPersonaName)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60003B6")]
		[Address(RVA = "0x1EBC058", Offset = "0x1EBC058", VA = "0x1EBC058")]
		public static EPersonaState GetPersonaState()
		{
			return default(EPersonaState);
		}

		[Token(Token = "0x60003B7")]
		[Address(RVA = "0x1EBC074", Offset = "0x1EBC074", VA = "0x1EBC074")]
		public static int GetFriendCount(EFriendFlags iFriendFlags)
		{
			return default(int);
		}

		[Token(Token = "0x60003B8")]
		[Address(RVA = "0x1EBC0A0", Offset = "0x1EBC0A0", VA = "0x1EBC0A0")]
		public static CSteamID GetFriendByIndex(int iFriend, EFriendFlags iFriendFlags)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x60003B9")]
		[Address(RVA = "0x1EBC134", Offset = "0x1EBC134", VA = "0x1EBC134")]
		public static EFriendRelationship GetFriendRelationship(CSteamID steamIDFriend)
		{
			return default(EFriendRelationship);
		}

		[Token(Token = "0x60003BA")]
		[Address(RVA = "0x1EBC160", Offset = "0x1EBC160", VA = "0x1EBC160")]
		public static EPersonaState GetFriendPersonaState(CSteamID steamIDFriend)
		{
			return default(EPersonaState);
		}

		[Token(Token = "0x60003BB")]
		[Address(RVA = "0x1EBC18C", Offset = "0x1EBC18C", VA = "0x1EBC18C")]
		public static string GetFriendPersonaName(CSteamID steamIDFriend)
		{
			return null;
		}

		[Token(Token = "0x60003BC")]
		[Address(RVA = "0x1EBC1C0", Offset = "0x1EBC1C0", VA = "0x1EBC1C0")]
		public static bool GetFriendGamePlayed(CSteamID steamIDFriend, out FriendGameInfo_t pFriendGameInfo)
		{
			return default(bool);
		}

		[Token(Token = "0x60003BD")]
		[Address(RVA = "0x1EBC1F4", Offset = "0x1EBC1F4", VA = "0x1EBC1F4")]
		public static string GetFriendPersonaNameHistory(CSteamID steamIDFriend, int iPersonaName)
		{
			return null;
		}

		[Token(Token = "0x60003BE")]
		[Address(RVA = "0x1EBC230", Offset = "0x1EBC230", VA = "0x1EBC230")]
		public static int GetFriendSteamLevel(CSteamID steamIDFriend)
		{
			return default(int);
		}

		[Token(Token = "0x60003BF")]
		[Address(RVA = "0x1EBC25C", Offset = "0x1EBC25C", VA = "0x1EBC25C")]
		public static string GetPlayerNickname(CSteamID steamIDPlayer)
		{
			return null;
		}

		[Token(Token = "0x60003C0")]
		[Address(RVA = "0x1EBC290", Offset = "0x1EBC290", VA = "0x1EBC290")]
		public static int GetFriendsGroupCount()
		{
			return default(int);
		}

		[Token(Token = "0x60003C1")]
		[Address(RVA = "0x1EBC2AC", Offset = "0x1EBC2AC", VA = "0x1EBC2AC")]
		public static FriendsGroupID_t GetFriendsGroupIDByIndex(int iFG)
		{
			return default(FriendsGroupID_t);
		}

		[Token(Token = "0x60003C2")]
		[Address(RVA = "0x1EBC338", Offset = "0x1EBC338", VA = "0x1EBC338")]
		public static string GetFriendsGroupName(FriendsGroupID_t friendsGroupID)
		{
			return null;
		}

		[Token(Token = "0x60003C3")]
		[Address(RVA = "0x1EBC36C", Offset = "0x1EBC36C", VA = "0x1EBC36C")]
		public static int GetFriendsGroupMembersCount(FriendsGroupID_t friendsGroupID)
		{
			return default(int);
		}

		[Token(Token = "0x60003C4")]
		[Address(RVA = "0x1EBC398", Offset = "0x1EBC398", VA = "0x1EBC398")]
		public static void GetFriendsGroupMembersList(FriendsGroupID_t friendsGroupID, CSteamID[] pOutSteamIDMembers, int nMembersCount)
		{
		}

		[Token(Token = "0x60003C5")]
		[Address(RVA = "0x1EBC3DC", Offset = "0x1EBC3DC", VA = "0x1EBC3DC")]
		public static bool HasFriend(CSteamID steamIDFriend, EFriendFlags iFriendFlags)
		{
			return default(bool);
		}

		[Token(Token = "0x60003C6")]
		[Address(RVA = "0x1EBC410", Offset = "0x1EBC410", VA = "0x1EBC410")]
		public static int GetClanCount()
		{
			return default(int);
		}

		[Token(Token = "0x60003C7")]
		[Address(RVA = "0x1EBC42C", Offset = "0x1EBC42C", VA = "0x1EBC42C")]
		public static CSteamID GetClanByIndex(int iClan)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x60003C8")]
		[Address(RVA = "0x1EBC4B0", Offset = "0x1EBC4B0", VA = "0x1EBC4B0")]
		public static string GetClanName(CSteamID steamIDClan)
		{
			return null;
		}

		[Token(Token = "0x60003C9")]
		[Address(RVA = "0x1EBC4E4", Offset = "0x1EBC4E4", VA = "0x1EBC4E4")]
		public static string GetClanTag(CSteamID steamIDClan)
		{
			return null;
		}

		[Token(Token = "0x60003CA")]
		[Address(RVA = "0x1EBC518", Offset = "0x1EBC518", VA = "0x1EBC518")]
		public static bool GetClanActivityCounts(CSteamID steamIDClan, out int pnOnline, out int pnInGame, out int pnChatting)
		{
			return default(bool);
		}

		[Token(Token = "0x60003CB")]
		[Address(RVA = "0x1EBC564", Offset = "0x1EBC564", VA = "0x1EBC564")]
		public static SteamAPICall_t DownloadClanActivityCounts(CSteamID[] psteamIDClans, int cClansToRequest)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60003CC")]
		[Address(RVA = "0x1EBC5F4", Offset = "0x1EBC5F4", VA = "0x1EBC5F4")]
		public static int GetFriendCountFromSource(CSteamID steamIDSource)
		{
			return default(int);
		}

		[Token(Token = "0x60003CD")]
		[Address(RVA = "0x1EBC620", Offset = "0x1EBC620", VA = "0x1EBC620")]
		public static CSteamID GetFriendFromSourceByIndex(CSteamID steamIDSource, int iFriend)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x60003CE")]
		[Address(RVA = "0x1EBC6B4", Offset = "0x1EBC6B4", VA = "0x1EBC6B4")]
		public static bool IsUserInSource(CSteamID steamIDUser, CSteamID steamIDSource)
		{
			return default(bool);
		}

		[Token(Token = "0x60003CF")]
		[Address(RVA = "0x1EBC6E8", Offset = "0x1EBC6E8", VA = "0x1EBC6E8")]
		public static void SetInGameVoiceSpeaking(CSteamID steamIDUser, bool bSpeaking)
		{
		}

		[Token(Token = "0x60003D0")]
		[Address(RVA = "0x1EBC71C", Offset = "0x1EBC71C", VA = "0x1EBC71C")]
		public static void ActivateGameOverlay(string pchDialog)
		{
		}

		[Token(Token = "0x60003D1")]
		[Address(RVA = "0x1EBC83C", Offset = "0x1EBC83C", VA = "0x1EBC83C")]
		public static void ActivateGameOverlayToUser(string pchDialog, CSteamID steamID)
		{
		}

		[Token(Token = "0x60003D2")]
		[Address(RVA = "0x1EBC970", Offset = "0x1EBC970", VA = "0x1EBC970")]
		public static void ActivateGameOverlayToWebPage(string pchURL)
		{
		}

		[Token(Token = "0x60003D3")]
		[Address(RVA = "0x1EBCA90", Offset = "0x1EBCA90", VA = "0x1EBCA90")]
		public static void ActivateGameOverlayToStore(AppId_t nAppID, EOverlayToStoreFlag eFlag)
		{
		}

		[Token(Token = "0x60003D4")]
		[Address(RVA = "0x1EBCAC4", Offset = "0x1EBCAC4", VA = "0x1EBCAC4")]
		public static void SetPlayedWith(CSteamID steamIDUserPlayedWith)
		{
		}

		[Token(Token = "0x60003D5")]
		[Address(RVA = "0x1EBCAF0", Offset = "0x1EBCAF0", VA = "0x1EBCAF0")]
		public static void ActivateGameOverlayInviteDialog(CSteamID steamIDLobby)
		{
		}

		[Token(Token = "0x60003D6")]
		[Address(RVA = "0x1EBCB1C", Offset = "0x1EBCB1C", VA = "0x1EBCB1C")]
		public static int GetSmallFriendAvatar(CSteamID steamIDFriend)
		{
			return default(int);
		}

		[Token(Token = "0x60003D7")]
		[Address(RVA = "0x1EBCB48", Offset = "0x1EBCB48", VA = "0x1EBCB48")]
		public static int GetMediumFriendAvatar(CSteamID steamIDFriend)
		{
			return default(int);
		}

		[Token(Token = "0x60003D8")]
		[Address(RVA = "0x1EBCB74", Offset = "0x1EBCB74", VA = "0x1EBCB74")]
		public static int GetLargeFriendAvatar(CSteamID steamIDFriend)
		{
			return default(int);
		}

		[Token(Token = "0x60003D9")]
		[Address(RVA = "0x1EBCBA0", Offset = "0x1EBCBA0", VA = "0x1EBCBA0")]
		public static bool RequestUserInformation(CSteamID steamIDUser, bool bRequireNameOnly)
		{
			return default(bool);
		}

		[Token(Token = "0x60003DA")]
		[Address(RVA = "0x1EBCBD4", Offset = "0x1EBCBD4", VA = "0x1EBCBD4")]
		public static SteamAPICall_t RequestClanOfficerList(CSteamID steamIDClan)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60003DB")]
		[Address(RVA = "0x1EBCC54", Offset = "0x1EBCC54", VA = "0x1EBCC54")]
		public static CSteamID GetClanOwner(CSteamID steamIDClan)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x60003DC")]
		[Address(RVA = "0x1EBCCD8", Offset = "0x1EBCCD8", VA = "0x1EBCCD8")]
		public static int GetClanOfficerCount(CSteamID steamIDClan)
		{
			return default(int);
		}

		[Token(Token = "0x60003DD")]
		[Address(RVA = "0x1EBCD04", Offset = "0x1EBCD04", VA = "0x1EBCD04")]
		public static CSteamID GetClanOfficerByIndex(CSteamID steamIDClan, int iOfficer)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x60003DE")]
		[Address(RVA = "0x1EBCD98", Offset = "0x1EBCD98", VA = "0x1EBCD98")]
		public static uint GetUserRestrictions()
		{
			return default(uint);
		}

		[Token(Token = "0x60003DF")]
		[Address(RVA = "0x1EBCDB4", Offset = "0x1EBCDB4", VA = "0x1EBCDB4")]
		public static bool SetRichPresence(string pchKey, string pchValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60003E0")]
		[Address(RVA = "0x1EBCFE8", Offset = "0x1EBCFE8", VA = "0x1EBCFE8")]
		public static void ClearRichPresence()
		{
		}

		[Token(Token = "0x60003E1")]
		[Address(RVA = "0x1EBD004", Offset = "0x1EBD004", VA = "0x1EBD004")]
		public static string GetFriendRichPresence(CSteamID steamIDFriend, string pchKey)
		{
			return null;
		}

		[Token(Token = "0x60003E2")]
		[Address(RVA = "0x1EBD144", Offset = "0x1EBD144", VA = "0x1EBD144")]
		public static int GetFriendRichPresenceKeyCount(CSteamID steamIDFriend)
		{
			return default(int);
		}

		[Token(Token = "0x60003E3")]
		[Address(RVA = "0x1EBD170", Offset = "0x1EBD170", VA = "0x1EBD170")]
		public static string GetFriendRichPresenceKeyByIndex(CSteamID steamIDFriend, int iKey)
		{
			return null;
		}

		[Token(Token = "0x60003E4")]
		[Address(RVA = "0x1EBD1AC", Offset = "0x1EBD1AC", VA = "0x1EBD1AC")]
		public static void RequestFriendRichPresence(CSteamID steamIDFriend)
		{
		}

		[Token(Token = "0x60003E5")]
		[Address(RVA = "0x1EBD1D8", Offset = "0x1EBD1D8", VA = "0x1EBD1D8")]
		public static bool InviteUserToGame(CSteamID steamIDFriend, string pchConnectString)
		{
			return default(bool);
		}

		[Token(Token = "0x60003E6")]
		[Address(RVA = "0x1EBD30C", Offset = "0x1EBD30C", VA = "0x1EBD30C")]
		public static int GetCoplayFriendCount()
		{
			return default(int);
		}

		[Token(Token = "0x60003E7")]
		[Address(RVA = "0x1EBD328", Offset = "0x1EBD328", VA = "0x1EBD328")]
		public static CSteamID GetCoplayFriend(int iCoplayFriend)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x60003E8")]
		[Address(RVA = "0x1EBD3AC", Offset = "0x1EBD3AC", VA = "0x1EBD3AC")]
		public static int GetFriendCoplayTime(CSteamID steamIDFriend)
		{
			return default(int);
		}

		[Token(Token = "0x60003E9")]
		[Address(RVA = "0x1EBD3D8", Offset = "0x1EBD3D8", VA = "0x1EBD3D8")]
		public static AppId_t GetFriendCoplayGame(CSteamID steamIDFriend)
		{
			return default(AppId_t);
		}

		[Token(Token = "0x60003EA")]
		[Address(RVA = "0x1EBD464", Offset = "0x1EBD464", VA = "0x1EBD464")]
		public static SteamAPICall_t JoinClanChatRoom(CSteamID steamIDClan)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60003EB")]
		[Address(RVA = "0x1EBD4E4", Offset = "0x1EBD4E4", VA = "0x1EBD4E4")]
		public static bool LeaveClanChatRoom(CSteamID steamIDClan)
		{
			return default(bool);
		}

		[Token(Token = "0x60003EC")]
		[Address(RVA = "0x1EBD510", Offset = "0x1EBD510", VA = "0x1EBD510")]
		public static int GetClanChatMemberCount(CSteamID steamIDClan)
		{
			return default(int);
		}

		[Token(Token = "0x60003ED")]
		[Address(RVA = "0x1EBD53C", Offset = "0x1EBD53C", VA = "0x1EBD53C")]
		public static CSteamID GetChatMemberByIndex(CSteamID steamIDClan, int iUser)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x60003EE")]
		[Address(RVA = "0x1EBD5D0", Offset = "0x1EBD5D0", VA = "0x1EBD5D0")]
		public static bool SendClanChatMessage(CSteamID steamIDClanChat, string pchText)
		{
			return default(bool);
		}

		[Token(Token = "0x60003EF")]
		[Address(RVA = "0x1EBD704", Offset = "0x1EBD704", VA = "0x1EBD704")]
		public static int GetClanChatMessage(CSteamID steamIDClanChat, int iMessage, out string prgchText, int cchTextMax, out EChatEntryType peChatEntryType, out CSteamID psteamidChatter)
		{
			return default(int);
		}

		[Token(Token = "0x60003F0")]
		[Address(RVA = "0x1EBD810", Offset = "0x1EBD810", VA = "0x1EBD810")]
		public static bool IsClanChatAdmin(CSteamID steamIDClanChat, CSteamID steamIDUser)
		{
			return default(bool);
		}

		[Token(Token = "0x60003F1")]
		[Address(RVA = "0x1EBD844", Offset = "0x1EBD844", VA = "0x1EBD844")]
		public static bool IsClanChatWindowOpenInSteam(CSteamID steamIDClanChat)
		{
			return default(bool);
		}

		[Token(Token = "0x60003F2")]
		[Address(RVA = "0x1EBD870", Offset = "0x1EBD870", VA = "0x1EBD870")]
		public static bool OpenClanChatWindowInSteam(CSteamID steamIDClanChat)
		{
			return default(bool);
		}

		[Token(Token = "0x60003F3")]
		[Address(RVA = "0x1EBD89C", Offset = "0x1EBD89C", VA = "0x1EBD89C")]
		public static bool CloseClanChatWindowInSteam(CSteamID steamIDClanChat)
		{
			return default(bool);
		}

		[Token(Token = "0x60003F4")]
		[Address(RVA = "0x1EBD8C8", Offset = "0x1EBD8C8", VA = "0x1EBD8C8")]
		public static bool SetListenForFriendsMessages(bool bInterceptEnabled)
		{
			return default(bool);
		}

		[Token(Token = "0x60003F5")]
		[Address(RVA = "0x1EBD8F4", Offset = "0x1EBD8F4", VA = "0x1EBD8F4")]
		public static bool ReplyToFriendMessage(CSteamID steamIDFriend, string pchMsgToSend)
		{
			return default(bool);
		}

		[Token(Token = "0x60003F6")]
		[Address(RVA = "0x1EBDA28", Offset = "0x1EBDA28", VA = "0x1EBDA28")]
		public static int GetFriendMessage(CSteamID steamIDFriend, int iMessageID, out string pvData, int cubData, out EChatEntryType peChatEntryType)
		{
			return default(int);
		}

		[Token(Token = "0x60003F7")]
		[Address(RVA = "0x1EBDB2C", Offset = "0x1EBDB2C", VA = "0x1EBDB2C")]
		public static SteamAPICall_t GetFollowerCount(CSteamID steamID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60003F8")]
		[Address(RVA = "0x1EBDBAC", Offset = "0x1EBDBAC", VA = "0x1EBDBAC")]
		public static SteamAPICall_t IsFollowing(CSteamID steamID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60003F9")]
		[Address(RVA = "0x1EBDC2C", Offset = "0x1EBDC2C", VA = "0x1EBDC2C")]
		public static SteamAPICall_t EnumerateFollowingList(uint unStartIndex)
		{
			return default(SteamAPICall_t);
		}
	}
	[Token(Token = "0x2000084")]
	public static class SteamGameServer
	{
		[Token(Token = "0x60003FA")]
		[Address(RVA = "0x1EBDCAC", Offset = "0x1EBDCAC", VA = "0x1EBDCAC")]
		public static bool InitGameServer(uint unIP, ushort usGamePort, ushort usQueryPort, uint unFlags, AppId_t nGameAppId, string pchVersionString)
		{
			return default(bool);
		}

		[Token(Token = "0x60003FB")]
		[Address(RVA = "0x1EBDE10", Offset = "0x1EBDE10", VA = "0x1EBDE10")]
		public static void SetProduct(string pszProduct)
		{
		}

		[Token(Token = "0x60003FC")]
		[Address(RVA = "0x1EBDF30", Offset = "0x1EBDF30", VA = "0x1EBDF30")]
		public static void SetGameDescription(string pszGameDescription)
		{
		}

		[Token(Token = "0x60003FD")]
		[Address(RVA = "0x1EBE050", Offset = "0x1EBE050", VA = "0x1EBE050")]
		public static void SetModDir(string pszModDir)
		{
		}

		[Token(Token = "0x60003FE")]
		[Address(RVA = "0x1EBE170", Offset = "0x1EBE170", VA = "0x1EBE170")]
		public static void SetDedicatedServer(bool bDedicated)
		{
		}

		[Token(Token = "0x60003FF")]
		[Address(RVA = "0x1EBE19C", Offset = "0x1EBE19C", VA = "0x1EBE19C")]
		public static void LogOn(string pszToken)
		{
		}

		[Token(Token = "0x6000400")]
		[Address(RVA = "0x1EBE2BC", Offset = "0x1EBE2BC", VA = "0x1EBE2BC")]
		public static void LogOnAnonymous()
		{
		}

		[Token(Token = "0x6000401")]
		[Address(RVA = "0x1EBE2D8", Offset = "0x1EBE2D8", VA = "0x1EBE2D8")]
		public static void LogOff()
		{
		}

		[Token(Token = "0x6000402")]
		[Address(RVA = "0x1EBE2F4", Offset = "0x1EBE2F4", VA = "0x1EBE2F4")]
		public static bool BLoggedOn()
		{
			return default(bool);
		}

		[Token(Token = "0x6000403")]
		[Address(RVA = "0x1EBE310", Offset = "0x1EBE310", VA = "0x1EBE310")]
		public static bool BSecure()
		{
			return default(bool);
		}

		[Token(Token = "0x6000404")]
		[Address(RVA = "0x1EBE32C", Offset = "0x1EBE32C", VA = "0x1EBE32C")]
		public static CSteamID GetSteamID()
		{
			return default(CSteamID);
		}

		[Token(Token = "0x6000405")]
		[Address(RVA = "0x1EBE3A8", Offset = "0x1EBE3A8", VA = "0x1EBE3A8")]
		public static bool WasRestartRequested()
		{
			return default(bool);
		}

		[Token(Token = "0x6000406")]
		[Address(RVA = "0x1EBE3C4", Offset = "0x1EBE3C4", VA = "0x1EBE3C4")]
		public static void SetMaxPlayerCount(int cPlayersMax)
		{
		}

		[Token(Token = "0x6000407")]
		[Address(RVA = "0x1EBE3F0", Offset = "0x1EBE3F0", VA = "0x1EBE3F0")]
		public static void SetBotPlayerCount(int cBotplayers)
		{
		}

		[Token(Token = "0x6000408")]
		[Address(RVA = "0x1EBE41C", Offset = "0x1EBE41C", VA = "0x1EBE41C")]
		public static void SetServerName(string pszServerName)
		{
		}

		[Token(Token = "0x6000409")]
		[Address(RVA = "0x1EBE53C", Offset = "0x1EBE53C", VA = "0x1EBE53C")]
		public static void SetMapName(string pszMapName)
		{
		}

		[Token(Token = "0x600040A")]
		[Address(RVA = "0x1EBE65C", Offset = "0x1EBE65C", VA = "0x1EBE65C")]
		public static void SetPasswordProtected(bool bPasswordProtected)
		{
		}

		[Token(Token = "0x600040B")]
		[Address(RVA = "0x1EBE688", Offset = "0x1EBE688", VA = "0x1EBE688")]
		public static void SetSpectatorPort(ushort unSpectatorPort)
		{
		}

		[Token(Token = "0x600040C")]
		[Address(RVA = "0x1EBE6B4", Offset = "0x1EBE6B4", VA = "0x1EBE6B4")]
		public static void SetSpectatorServerName(string pszSpectatorServerName)
		{
		}

		[Token(Token = "0x600040D")]
		[Address(RVA = "0x1EBE7D4", Offset = "0x1EBE7D4", VA = "0x1EBE7D4")]
		public static void ClearAllKeyValues()
		{
		}

		[Token(Token = "0x600040E")]
		[Address(RVA = "0x1EBE7F0", Offset = "0x1EBE7F0", VA = "0x1EBE7F0")]
		public static void SetKeyValue(string pKey, string pValue)
		{
		}

		[Token(Token = "0x600040F")]
		[Address(RVA = "0x1EBEA10", Offset = "0x1EBEA10", VA = "0x1EBEA10")]
		public static void SetGameTags(string pchGameTags)
		{
		}

		[Token(Token = "0x6000410")]
		[Address(RVA = "0x1EBEB30", Offset = "0x1EBEB30", VA = "0x1EBEB30")]
		public static void SetGameData(string pchGameData)
		{
		}

		[Token(Token = "0x6000411")]
		[Address(RVA = "0x1EBEC50", Offset = "0x1EBEC50", VA = "0x1EBEC50")]
		public static void SetRegion(string pszRegion)
		{
		}

		[Token(Token = "0x6000412")]
		[Address(RVA = "0x1EBED70", Offset = "0x1EBED70", VA = "0x1EBED70")]
		public static bool SendUserConnectAndAuthenticate(uint unIPClient, byte[] pvAuthBlob, uint cubAuthBlobSize, out CSteamID pSteamIDUser)
		{
			return default(bool);
		}

		[Token(Token = "0x6000413")]
		[Address(RVA = "0x1EBEDBC", Offset = "0x1EBEDBC", VA = "0x1EBEDBC")]
		public static CSteamID CreateUnauthenticatedUserConnection()
		{
			return default(CSteamID);
		}

		[Token(Token = "0x6000414")]
		[Address(RVA = "0x1EBEE38", Offset = "0x1EBEE38", VA = "0x1EBEE38")]
		public static void SendUserDisconnect(CSteamID steamIDUser)
		{
		}

		[Token(Token = "0x6000415")]
		[Address(RVA = "0x1EBEE64", Offset = "0x1EBEE64", VA = "0x1EBEE64")]
		public static bool BUpdateUserData(CSteamID steamIDUser, string pchPlayerName, uint uScore)
		{
			return default(bool);
		}

		[Token(Token = "0x6000416")]
		[Address(RVA = "0x1EBEFA0", Offset = "0x1EBEFA0", VA = "0x1EBEFA0")]
		public static HAuthTicket GetAuthSessionTicket(byte[] pTicket, int cbMaxTicket, out uint pcbTicket)
		{
			return default(HAuthTicket);
		}

		[Token(Token = "0x6000417")]
		[Address(RVA = "0x1EBF044", Offset = "0x1EBF044", VA = "0x1EBF044")]
		public static EBeginAuthSessionResult BeginAuthSession(byte[] pAuthTicket, int cbAuthTicket, CSteamID steamID)
		{
			return default(EBeginAuthSessionResult);
		}

		[Token(Token = "0x6000418")]
		[Address(RVA = "0x1EBF088", Offset = "0x1EBF088", VA = "0x1EBF088")]
		public static void EndAuthSession(CSteamID steamID)
		{
		}

		[Token(Token = "0x6000419")]
		[Address(RVA = "0x1EBF0B4", Offset = "0x1EBF0B4", VA = "0x1EBF0B4")]
		public static void CancelAuthTicket(HAuthTicket hAuthTicket)
		{
		}

		[Token(Token = "0x600041A")]
		[Address(RVA = "0x1EBF0E0", Offset = "0x1EBF0E0", VA = "0x1EBF0E0")]
		public static EUserHasLicenseForAppResult UserHasLicenseForApp(CSteamID steamID, AppId_t appID)
		{
			return default(EUserHasLicenseForAppResult);
		}

		[Token(Token = "0x600041B")]
		[Address(RVA = "0x1EBF114", Offset = "0x1EBF114", VA = "0x1EBF114")]
		public static bool RequestUserGroupStatus(CSteamID steamIDUser, CSteamID steamIDGroup)
		{
			return default(bool);
		}

		[Token(Token = "0x600041C")]
		[Address(RVA = "0x1EBF148", Offset = "0x1EBF148", VA = "0x1EBF148")]
		public static void GetGameplayStats()
		{
		}

		[Token(Token = "0x600041D")]
		[Address(RVA = "0x1EBF164", Offset = "0x1EBF164", VA = "0x1EBF164")]
		public static SteamAPICall_t GetServerReputation()
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x600041E")]
		[Address(RVA = "0x1EBF1DC", Offset = "0x1EBF1DC", VA = "0x1EBF1DC")]
		public static uint GetPublicIP()
		{
			return default(uint);
		}

		[Token(Token = "0x600041F")]
		[Address(RVA = "0x1EBF1F8", Offset = "0x1EBF1F8", VA = "0x1EBF1F8")]
		public static bool HandleIncomingPacket(byte[] pData, int cbData, uint srcIP, ushort srcPort)
		{
			return default(bool);
		}

		[Token(Token = "0x6000420")]
		[Address(RVA = "0x1EBF244", Offset = "0x1EBF244", VA = "0x1EBF244")]
		public static int GetNextOutgoingPacket(byte[] pOut, int cbMaxOut, out uint pNetAdr, out ushort pPort)
		{
			return default(int);
		}

		[Token(Token = "0x6000421")]
		[Address(RVA = "0x1EBF290", Offset = "0x1EBF290", VA = "0x1EBF290")]
		public static void EnableHeartbeats(bool bActive)
		{
		}

		[Token(Token = "0x6000422")]
		[Address(RVA = "0x1EBF2BC", Offset = "0x1EBF2BC", VA = "0x1EBF2BC")]
		public static void SetHeartbeatInterval(int iHeartbeatInterval)
		{
		}

		[Token(Token = "0x6000423")]
		[Address(RVA = "0x1EBF2E8", Offset = "0x1EBF2E8", VA = "0x1EBF2E8")]
		public static void ForceHeartbeat()
		{
		}

		[Token(Token = "0x6000424")]
		[Address(RVA = "0x1EBF304", Offset = "0x1EBF304", VA = "0x1EBF304")]
		public static SteamAPICall_t AssociateWithClan(CSteamID steamIDClan)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000425")]
		[Address(RVA = "0x1EBF384", Offset = "0x1EBF384", VA = "0x1EBF384")]
		public static SteamAPICall_t ComputeNewPlayerCompatibility(CSteamID steamIDNewPlayer)
		{
			return default(SteamAPICall_t);
		}
	}
	[Token(Token = "0x2000085")]
	public static class SteamGameServerHTTP
	{
		[Token(Token = "0x6000426")]
		[Address(RVA = "0x1EBF404", Offset = "0x1EBF404", VA = "0x1EBF404")]
		public static HTTPRequestHandle CreateHTTPRequest(EHTTPMethod eHTTPRequestMethod, string pchAbsoluteURL)
		{
			return default(HTTPRequestHandle);
		}

		[Token(Token = "0x6000427")]
		[Address(RVA = "0x1EBF56C", Offset = "0x1EBF56C", VA = "0x1EBF56C")]
		public static bool SetHTTPRequestContextValue(HTTPRequestHandle hRequest, ulong ulContextValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000428")]
		[Address(RVA = "0x1EBF5A0", Offset = "0x1EBF5A0", VA = "0x1EBF5A0")]
		public static bool SetHTTPRequestNetworkActivityTimeout(HTTPRequestHandle hRequest, uint unTimeoutSeconds)
		{
			return default(bool);
		}

		[Token(Token = "0x6000429")]
		[Address(RVA = "0x1EBF5D4", Offset = "0x1EBF5D4", VA = "0x1EBF5D4")]
		public static bool SetHTTPRequestHeaderValue(HTTPRequestHandle hRequest, string pchHeaderName, string pchHeaderValue)
		{
			return default(bool);
		}

		[Token(Token = "0x600042A")]
		[Address(RVA = "0x1EBF818", Offset = "0x1EBF818", VA = "0x1EBF818")]
		public static bool SetHTTPRequestGetOrPostParameter(HTTPRequestHandle hRequest, string pchParamName, string pchParamValue)
		{
			return default(bool);
		}

		[Token(Token = "0x600042B")]
		[Address(RVA = "0x1EBFA5C", Offset = "0x1EBFA5C", VA = "0x1EBFA5C")]
		public static bool SendHTTPRequest(HTTPRequestHandle hRequest, out SteamAPICall_t pCallHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x600042C")]
		[Address(RVA = "0x1EBFA90", Offset = "0x1EBFA90", VA = "0x1EBFA90")]
		public static bool SendHTTPRequestAndStreamResponse(HTTPRequestHandle hRequest, out SteamAPICall_t pCallHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x600042D")]
		[Address(RVA = "0x1EBFAC4", Offset = "0x1EBFAC4", VA = "0x1EBFAC4")]
		public static bool DeferHTTPRequest(HTTPRequestHandle hRequest)
		{
			return default(bool);
		}

		[Token(Token = "0x600042E")]
		[Address(RVA = "0x1EBFAF0", Offset = "0x1EBFAF0", VA = "0x1EBFAF0")]
		public static bool PrioritizeHTTPRequest(HTTPRequestHandle hRequest)
		{
			return default(bool);
		}

		[Token(Token = "0x600042F")]
		[Address(RVA = "0x1EBFB1C", Offset = "0x1EBFB1C", VA = "0x1EBFB1C")]
		public static bool GetHTTPResponseHeaderSize(HTTPRequestHandle hRequest, string pchHeaderName, out uint unResponseHeaderSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000430")]
		[Address(RVA = "0x1EBFC58", Offset = "0x1EBFC58", VA = "0x1EBFC58")]
		public static bool GetHTTPResponseHeaderValue(HTTPRequestHandle hRequest, string pchHeaderName, byte[] pHeaderValueBuffer, uint unBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000431")]
		[Address(RVA = "0x1EBFDA4", Offset = "0x1EBFDA4", VA = "0x1EBFDA4")]
		public static bool GetHTTPResponseBodySize(HTTPRequestHandle hRequest, out uint unBodySize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000432")]
		[Address(RVA = "0x1EBFDD8", Offset = "0x1EBFDD8", VA = "0x1EBFDD8")]
		public static bool GetHTTPResponseBodyData(HTTPRequestHandle hRequest, byte[] pBodyDataBuffer, uint unBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000433")]
		[Address(RVA = "0x1EBFE1C", Offset = "0x1EBFE1C", VA = "0x1EBFE1C")]
		public static bool GetHTTPStreamingResponseBodyData(HTTPRequestHandle hRequest, uint cOffset, byte[] pBodyDataBuffer, uint unBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000434")]
		[Address(RVA = "0x1EBFE68", Offset = "0x1EBFE68", VA = "0x1EBFE68")]
		public static bool ReleaseHTTPRequest(HTTPRequestHandle hRequest)
		{
			return default(bool);
		}

		[Token(Token = "0x6000435")]
		[Address(RVA = "0x1EBFE94", Offset = "0x1EBFE94", VA = "0x1EBFE94")]
		public static bool GetHTTPDownloadProgressPct(HTTPRequestHandle hRequest, out float pflPercentOut)
		{
			return default(bool);
		}

		[Token(Token = "0x6000436")]
		[Address(RVA = "0x1EBFEC8", Offset = "0x1EBFEC8", VA = "0x1EBFEC8")]
		public static bool SetHTTPRequestRawPostBody(HTTPRequestHandle hRequest, string pchContentType, byte[] pubBody, uint unBodyLen)
		{
			return default(bool);
		}

		[Token(Token = "0x6000437")]
		[Address(RVA = "0x1EC0014", Offset = "0x1EC0014", VA = "0x1EC0014")]
		public static HTTPCookieContainerHandle CreateCookieContainer(bool bAllowResponsesToModify)
		{
			return default(HTTPCookieContainerHandle);
		}

		[Token(Token = "0x6000438")]
		[Address(RVA = "0x1EC00A0", Offset = "0x1EC00A0", VA = "0x1EC00A0")]
		public static bool ReleaseCookieContainer(HTTPCookieContainerHandle hCookieContainer)
		{
			return default(bool);
		}

		[Token(Token = "0x6000439")]
		[Address(RVA = "0x1EC00CC", Offset = "0x1EC00CC", VA = "0x1EC00CC")]
		public static bool SetCookie(HTTPCookieContainerHandle hCookieContainer, string pchHost, string pchUrl, string pchCookie)
		{
			return default(bool);
		}

		[Token(Token = "0x600043A")]
		[Address(RVA = "0x1EC040C", Offset = "0x1EC040C", VA = "0x1EC040C")]
		public static bool SetHTTPRequestCookieContainer(HTTPRequestHandle hRequest, HTTPCookieContainerHandle hCookieContainer)
		{
			return default(bool);
		}

		[Token(Token = "0x600043B")]
		[Address(RVA = "0x1EC0440", Offset = "0x1EC0440", VA = "0x1EC0440")]
		public static bool SetHTTPRequestUserAgentInfo(HTTPRequestHandle hRequest, string pchUserAgentInfo)
		{
			return default(bool);
		}

		[Token(Token = "0x600043C")]
		[Address(RVA = "0x1EC0574", Offset = "0x1EC0574", VA = "0x1EC0574")]
		public static bool SetHTTPRequestRequiresVerifiedCertificate(HTTPRequestHandle hRequest, bool bRequireVerifiedCertificate)
		{
			return default(bool);
		}

		[Token(Token = "0x600043D")]
		[Address(RVA = "0x1EC05A8", Offset = "0x1EC05A8", VA = "0x1EC05A8")]
		public static bool SetHTTPRequestAbsoluteTimeoutMS(HTTPRequestHandle hRequest, uint unMilliseconds)
		{
			return default(bool);
		}

		[Token(Token = "0x600043E")]
		[Address(RVA = "0x1EC05DC", Offset = "0x1EC05DC", VA = "0x1EC05DC")]
		public static bool GetHTTPRequestWasTimedOut(HTTPRequestHandle hRequest, out bool pbWasTimedOut)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000086")]
	public static class SteamGameServerInventory
	{
		[Token(Token = "0x600043F")]
		[Address(RVA = "0x1EC0610", Offset = "0x1EC0610", VA = "0x1EC0610")]
		public static EResult GetResultStatus(SteamInventoryResult_t resultHandle)
		{
			return default(EResult);
		}

		[Token(Token = "0x6000440")]
		[Address(RVA = "0x1EC063C", Offset = "0x1EC063C", VA = "0x1EC063C")]
		public static bool GetResultItems(SteamInventoryResult_t resultHandle, SteamItemDetails_t[] pOutItemsArray, ref uint punOutItemsArraySize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000441")]
		[Address(RVA = "0x1EC0680", Offset = "0x1EC0680", VA = "0x1EC0680")]
		public static uint GetResultTimestamp(SteamInventoryResult_t resultHandle)
		{
			return default(uint);
		}

		[Token(Token = "0x6000442")]
		[Address(RVA = "0x1EC06AC", Offset = "0x1EC06AC", VA = "0x1EC06AC")]
		public static bool CheckResultSteamID(SteamInventoryResult_t resultHandle, CSteamID steamIDExpected)
		{
			return default(bool);
		}

		[Token(Token = "0x6000443")]
		[Address(RVA = "0x1EC06E0", Offset = "0x1EC06E0", VA = "0x1EC06E0")]
		public static void DestroyResult(SteamInventoryResult_t resultHandle)
		{
		}

		[Token(Token = "0x6000444")]
		[Address(RVA = "0x1EC070C", Offset = "0x1EC070C", VA = "0x1EC070C")]
		public static bool GetAllItems(out SteamInventoryResult_t pResultHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x6000445")]
		[Address(RVA = "0x1EC0738", Offset = "0x1EC0738", VA = "0x1EC0738")]
		public static bool GetItemsByID(out SteamInventoryResult_t pResultHandle, SteamItemInstanceID_t[] pInstanceIDs, uint unCountInstanceIDs)
		{
			return default(bool);
		}

		[Token(Token = "0x6000446")]
		[Address(RVA = "0x1EC077C", Offset = "0x1EC077C", VA = "0x1EC077C")]
		public static bool SerializeResult(SteamInventoryResult_t resultHandle, byte[] pOutBuffer, out uint punOutBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000447")]
		[Address(RVA = "0x1EC07C0", Offset = "0x1EC07C0", VA = "0x1EC07C0")]
		public static bool DeserializeResult(out SteamInventoryResult_t pOutResultHandle, byte[] pBuffer, uint unBufferSize, bool bRESERVED_MUST_BE_FALSE = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6000448")]
		[Address(RVA = "0x1EC080C", Offset = "0x1EC080C", VA = "0x1EC080C")]
		public static bool GenerateItems(out SteamInventoryResult_t pResultHandle, SteamItemDef_t[] pArrayItemDefs, uint[] punArrayQuantity, uint unArrayLength)
		{
			return default(bool);
		}

		[Token(Token = "0x6000449")]
		[Address(RVA = "0x1EC0858", Offset = "0x1EC0858", VA = "0x1EC0858")]
		public static bool GrantPromoItems(out SteamInventoryResult_t pResultHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x600044A")]
		[Address(RVA = "0x1EC0884", Offset = "0x1EC0884", VA = "0x1EC0884")]
		public static bool AddPromoItem(out SteamInventoryResult_t pResultHandle, SteamItemDef_t itemDef)
		{
			return default(bool);
		}

		[Token(Token = "0x600044B")]
		[Address(RVA = "0x1EC08B8", Offset = "0x1EC08B8", VA = "0x1EC08B8")]
		public static bool AddPromoItems(out SteamInventoryResult_t pResultHandle, SteamItemDef_t[] pArrayItemDefs, uint unArrayLength)
		{
			return default(bool);
		}

		[Token(Token = "0x600044C")]
		[Address(RVA = "0x1EC08FC", Offset = "0x1EC08FC", VA = "0x1EC08FC")]
		public static bool ConsumeItem(out SteamInventoryResult_t pResultHandle, SteamItemInstanceID_t itemConsume, uint unQuantity)
		{
			return default(bool);
		}

		[Token(Token = "0x600044D")]
		[Address(RVA = "0x1EC0940", Offset = "0x1EC0940", VA = "0x1EC0940")]
		public static bool ExchangeItems(out SteamInventoryResult_t pResultHandle, SteamItemDef_t[] pArrayGenerate, uint[] punArrayGenerateQuantity, uint unArrayGenerateLength, SteamItemInstanceID_t[] pArrayDestroy, uint[] punArrayDestroyQuantity, uint unArrayDestroyLength)
		{
			return default(bool);
		}

		[Token(Token = "0x600044E")]
		[Address(RVA = "0x1EC09B4", Offset = "0x1EC09B4", VA = "0x1EC09B4")]
		public static bool TransferItemQuantity(out SteamInventoryResult_t pResultHandle, SteamItemInstanceID_t itemIdSource, uint unQuantity, SteamItemInstanceID_t itemIdDest)
		{
			return default(bool);
		}

		[Token(Token = "0x600044F")]
		[Address(RVA = "0x1EC0A00", Offset = "0x1EC0A00", VA = "0x1EC0A00")]
		public static void SendItemDropHeartbeat()
		{
		}

		[Token(Token = "0x6000450")]
		[Address(RVA = "0x1EC0A1C", Offset = "0x1EC0A1C", VA = "0x1EC0A1C")]
		public static bool TriggerItemDrop(out SteamInventoryResult_t pResultHandle, SteamItemDef_t dropListDefinition)
		{
			return default(bool);
		}

		[Token(Token = "0x6000451")]
		[Address(RVA = "0x1EC0A50", Offset = "0x1EC0A50", VA = "0x1EC0A50")]
		public static bool TradeItems(out SteamInventoryResult_t pResultHandle, CSteamID steamIDTradePartner, SteamItemInstanceID_t[] pArrayGive, uint[] pArrayGiveQuantity, uint nArrayGiveLength, SteamItemInstanceID_t[] pArrayGet, uint[] pArrayGetQuantity, uint nArrayGetLength)
		{
			return default(bool);
		}

		[Token(Token = "0x6000452")]
		[Address(RVA = "0x1EC0ACC", Offset = "0x1EC0ACC", VA = "0x1EC0ACC")]
		public static bool LoadItemDefinitions()
		{
			return default(bool);
		}

		[Token(Token = "0x6000453")]
		[Address(RVA = "0x1EC0AE8", Offset = "0x1EC0AE8", VA = "0x1EC0AE8")]
		public static bool GetItemDefinitionIDs(SteamItemDef_t[] pItemDefIDs, out uint punItemDefIDsArraySize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000454")]
		[Address(RVA = "0x1EC0B1C", Offset = "0x1EC0B1C", VA = "0x1EC0B1C")]
		public static bool GetItemDefinitionProperty(SteamItemDef_t iDefinition, string pchPropertyName, out string pchValueBuffer, ref uint punValueBufferSize)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000087")]
	public static class SteamGameServerNetworking
	{
		[Token(Token = "0x6000455")]
		[Address(RVA = "0x1EC0CF0", Offset = "0x1EC0CF0", VA = "0x1EC0CF0")]
		public static bool SendP2PPacket(CSteamID steamIDRemote, byte[] pubData, uint cubData, EP2PSend eP2PSendType, int nChannel = 0)
		{
			return default(bool);
		}

		[Token(Token = "0x6000456")]
		[Address(RVA = "0x1EC0D4C", Offset = "0x1EC0D4C", VA = "0x1EC0D4C")]
		public static bool IsP2PPacketAvailable(out uint pcubMsgSize, int nChannel = 0)
		{
			return default(bool);
		}

		[Token(Token = "0x6000457")]
		[Address(RVA = "0x1EC0D80", Offset = "0x1EC0D80", VA = "0x1EC0D80")]
		public static bool ReadP2PPacket(byte[] pubDest, uint cubDest, out uint pcubMsgSize, out CSteamID psteamIDRemote, int nChannel = 0)
		{
			return default(bool);
		}

		[Token(Token = "0x6000458")]
		[Address(RVA = "0x1EC0DDC", Offset = "0x1EC0DDC", VA = "0x1EC0DDC")]
		public static bool AcceptP2PSessionWithUser(CSteamID steamIDRemote)
		{
			return default(bool);
		}

		[Token(Token = "0x6000459")]
		[Address(RVA = "0x1EC0E08", Offset = "0x1EC0E08", VA = "0x1EC0E08")]
		public static bool CloseP2PSessionWithUser(CSteamID steamIDRemote)
		{
			return default(bool);
		}

		[Token(Token = "0x600045A")]
		[Address(RVA = "0x1EC0E34", Offset = "0x1EC0E34", VA = "0x1EC0E34")]
		public static bool CloseP2PChannelWithUser(CSteamID steamIDRemote, int nChannel)
		{
			return default(bool);
		}

		[Token(Token = "0x600045B")]
		[Address(RVA = "0x1EC0E68", Offset = "0x1EC0E68", VA = "0x1EC0E68")]
		public static bool GetP2PSessionState(CSteamID steamIDRemote, out P2PSessionState_t pConnectionState)
		{
			return default(bool);
		}

		[Token(Token = "0x600045C")]
		[Address(RVA = "0x1EC0E9C", Offset = "0x1EC0E9C", VA = "0x1EC0E9C")]
		public static bool AllowP2PPacketRelay(bool bAllow)
		{
			return default(bool);
		}

		[Token(Token = "0x600045D")]
		[Address(RVA = "0x1EC0EC8", Offset = "0x1EC0EC8", VA = "0x1EC0EC8")]
		public static SNetListenSocket_t CreateListenSocket(int nVirtualP2PPort, uint nIP, ushort nPort, bool bAllowUseOfPacketRelay)
		{
			return default(SNetListenSocket_t);
		}

		[Token(Token = "0x600045E")]
		[Address(RVA = "0x1EC0F1C", Offset = "0x1EC0F1C", VA = "0x1EC0F1C")]
		public static SNetSocket_t CreateP2PConnectionSocket(CSteamID steamIDTarget, int nVirtualPort, int nTimeoutSec, bool bAllowUseOfPacketRelay)
		{
			return default(SNetSocket_t);
		}

		[Token(Token = "0x600045F")]
		[Address(RVA = "0x1EC0F70", Offset = "0x1EC0F70", VA = "0x1EC0F70")]
		public static SNetSocket_t CreateConnectionSocket(uint nIP, ushort nPort, int nTimeoutSec)
		{
			return default(SNetSocket_t);
		}

		[Token(Token = "0x6000460")]
		[Address(RVA = "0x1EC0FBC", Offset = "0x1EC0FBC", VA = "0x1EC0FBC")]
		public static bool DestroySocket(SNetSocket_t hSocket, bool bNotifyRemoteEnd)
		{
			return default(bool);
		}

		[Token(Token = "0x6000461")]
		[Address(RVA = "0x1EC0FF0", Offset = "0x1EC0FF0", VA = "0x1EC0FF0")]
		public static bool DestroyListenSocket(SNetListenSocket_t hSocket, bool bNotifyRemoteEnd)
		{
			return default(bool);
		}

		[Token(Token = "0x6000462")]
		[Address(RVA = "0x1EC1024", Offset = "0x1EC1024", VA = "0x1EC1024")]
		public static bool SendDataOnSocket(SNetSocket_t hSocket, IntPtr pubData, uint cubData, bool bReliable)
		{
			return default(bool);
		}

		[Token(Token = "0x6000463")]
		[Address(RVA = "0x1EC1070", Offset = "0x1EC1070", VA = "0x1EC1070")]
		public static bool IsDataAvailableOnSocket(SNetSocket_t hSocket, out uint pcubMsgSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000464")]
		[Address(RVA = "0x1EC10A4", Offset = "0x1EC10A4", VA = "0x1EC10A4")]
		public static bool RetrieveDataFromSocket(SNetSocket_t hSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000465")]
		[Address(RVA = "0x1EC10F0", Offset = "0x1EC10F0", VA = "0x1EC10F0")]
		public static bool IsDataAvailable(SNetListenSocket_t hListenSocket, out uint pcubMsgSize, out SNetSocket_t phSocket)
		{
			return default(bool);
		}

		[Token(Token = "0x6000466")]
		[Address(RVA = "0x1EC1134", Offset = "0x1EC1134", VA = "0x1EC1134")]
		public static bool RetrieveData(SNetListenSocket_t hListenSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize, out SNetSocket_t phSocket)
		{
			return default(bool);
		}

		[Token(Token = "0x6000467")]
		[Address(RVA = "0x1EC1190", Offset = "0x1EC1190", VA = "0x1EC1190")]
		public static bool GetSocketInfo(SNetSocket_t hSocket, out CSteamID pSteamIDRemote, out int peSocketStatus, out uint punIPRemote, out ushort punPortRemote)
		{
			return default(bool);
		}

		[Token(Token = "0x6000468")]
		[Address(RVA = "0x1EC11EC", Offset = "0x1EC11EC", VA = "0x1EC11EC")]
		public static bool GetListenSocketInfo(SNetListenSocket_t hListenSocket, out uint pnIP, out ushort pnPort)
		{
			return default(bool);
		}

		[Token(Token = "0x6000469")]
		[Address(RVA = "0x1EC1230", Offset = "0x1EC1230", VA = "0x1EC1230")]
		public static ESNetSocketConnectionType GetSocketConnectionType(SNetSocket_t hSocket)
		{
			return default(ESNetSocketConnectionType);
		}

		[Token(Token = "0x600046A")]
		[Address(RVA = "0x1EC125C", Offset = "0x1EC125C", VA = "0x1EC125C")]
		public static int GetMaxPacketSize(SNetSocket_t hSocket)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000088")]
	public static class SteamGameServerStats
	{
		[Token(Token = "0x600046B")]
		[Address(RVA = "0x1EC1288", Offset = "0x1EC1288", VA = "0x1EC1288")]
		public static SteamAPICall_t RequestUserStats(CSteamID steamIDUser)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x600046C")]
		[Address(RVA = "0x1EC1308", Offset = "0x1EC1308", VA = "0x1EC1308")]
		public static bool GetUserStat(CSteamID steamIDUser, string pchName, out int pData)
		{
			return default(bool);
		}

		[Token(Token = "0x600046D")]
		[Address(RVA = "0x1EC1444", Offset = "0x1EC1444", VA = "0x1EC1444")]
		public static bool GetUserStat(CSteamID steamIDUser, string pchName, out float pData)
		{
			return default(bool);
		}

		[Token(Token = "0x600046E")]
		[Address(RVA = "0x1EC1580", Offset = "0x1EC1580", VA = "0x1EC1580")]
		public static bool GetUserAchievement(CSteamID steamIDUser, string pchName, out bool pbAchieved)
		{
			return default(bool);
		}

		[Token(Token = "0x600046F")]
		[Address(RVA = "0x1EC16BC", Offset = "0x1EC16BC", VA = "0x1EC16BC")]
		public static bool SetUserStat(CSteamID steamIDUser, string pchName, int nData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000470")]
		[Address(RVA = "0x1EC17F8", Offset = "0x1EC17F8", VA = "0x1EC17F8")]
		public static bool SetUserStat(CSteamID steamIDUser, string pchName, float fData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000471")]
		[Address(RVA = "0x1EC193C", Offset = "0x1EC193C", VA = "0x1EC193C")]
		public static bool UpdateUserAvgRateStat(CSteamID steamIDUser, string pchName, float flCountThisSession, double dSessionLength)
		{
			return default(bool);
		}

		[Token(Token = "0x6000472")]
		[Address(RVA = "0x1EC1A88", Offset = "0x1EC1A88", VA = "0x1EC1A88")]
		public static bool SetUserAchievement(CSteamID steamIDUser, string pchName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000473")]
		[Address(RVA = "0x1EC1BBC", Offset = "0x1EC1BBC", VA = "0x1EC1BBC")]
		public static bool ClearUserAchievement(CSteamID steamIDUser, string pchName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000474")]
		[Address(RVA = "0x1EC1CF0", Offset = "0x1EC1CF0", VA = "0x1EC1CF0")]
		public static SteamAPICall_t StoreUserStats(CSteamID steamIDUser)
		{
			return default(SteamAPICall_t);
		}
	}
	[Token(Token = "0x2000089")]
	public static class SteamGameServerUGC
	{
		[Token(Token = "0x6000475")]
		[Address(RVA = "0x1EC1D70", Offset = "0x1EC1D70", VA = "0x1EC1D70")]
		public static UGCQueryHandle_t CreateQueryUserUGCRequest(AccountID_t unAccountID, EUserUGCList eListType, EUGCMatchingUGCType eMatchingUGCType, EUserUGCListSortOrder eSortOrder, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint unPage)
		{
			return default(UGCQueryHandle_t);
		}

		[Token(Token = "0x6000476")]
		[Address(RVA = "0x1EC1E3C", Offset = "0x1EC1E3C", VA = "0x1EC1E3C")]
		public static UGCQueryHandle_t CreateQueryAllUGCRequest(EUGCQuery eQueryType, EUGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint unPage)
		{
			return default(UGCQueryHandle_t);
		}

		[Token(Token = "0x6000477")]
		[Address(RVA = "0x1EC1EF0", Offset = "0x1EC1EF0", VA = "0x1EC1EF0")]
		public static UGCQueryHandle_t CreateQueryUGCDetailsRequest(PublishedFileId_t[] pvecPublishedFileID, uint unNumPublishedFileIDs)
		{
			return default(UGCQueryHandle_t);
		}

		[Token(Token = "0x6000478")]
		[Address(RVA = "0x1EC1F84", Offset = "0x1EC1F84", VA = "0x1EC1F84")]
		public static SteamAPICall_t SendQueryUGCRequest(UGCQueryHandle_t handle)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000479")]
		[Address(RVA = "0x1EC2004", Offset = "0x1EC2004", VA = "0x1EC2004")]
		public static bool GetQueryUGCResult(UGCQueryHandle_t handle, uint index, out SteamUGCDetails_t pDetails)
		{
			return default(bool);
		}

		[Token(Token = "0x600047A")]
		[Address(RVA = "0x1EC2048", Offset = "0x1EC2048", VA = "0x1EC2048")]
		public static bool GetQueryUGCPreviewURL(UGCQueryHandle_t handle, uint index, out string pchURL, uint cchURLSize)
		{
			return default(bool);
		}

		[Token(Token = "0x600047B")]
		[Address(RVA = "0x1EC2138", Offset = "0x1EC2138", VA = "0x1EC2138")]
		public static bool GetQueryUGCMetadata(UGCQueryHandle_t handle, uint index, out string pchMetadata, uint cchMetadatasize)
		{
			return default(bool);
		}

		[Token(Token = "0x600047C")]
		[Address(RVA = "0x1EC2228", Offset = "0x1EC2228", VA = "0x1EC2228")]
		public static bool GetQueryUGCChildren(UGCQueryHandle_t handle, uint index, PublishedFileId_t[] pvecPublishedFileID, uint cMaxEntries)
		{
			return default(bool);
		}

		[Token(Token = "0x600047D")]
		[Address(RVA = "0x1EC2274", Offset = "0x1EC2274", VA = "0x1EC2274")]
		public static bool GetQueryUGCStatistic(UGCQueryHandle_t handle, uint index, EItemStatistic eStatType, out uint pStatValue)
		{
			return default(bool);
		}

		[Token(Token = "0x600047E")]
		[Address(RVA = "0x1EC22C0", Offset = "0x1EC22C0", VA = "0x1EC22C0")]
		public static uint GetQueryUGCNumAdditionalPreviews(UGCQueryHandle_t handle, uint index)
		{
			return default(uint);
		}

		[Token(Token = "0x600047F")]
		[Address(RVA = "0x1EC22F4", Offset = "0x1EC22F4", VA = "0x1EC22F4")]
		public static bool GetQueryUGCAdditionalPreview(UGCQueryHandle_t handle, uint index, uint previewIndex, out string pchURLOrVideoID, uint cchURLSize, out bool pbIsImage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000480")]
		[Address(RVA = "0x1EC23FC", Offset = "0x1EC23FC", VA = "0x1EC23FC")]
		public static uint GetQueryUGCNumKeyValueTags(UGCQueryHandle_t handle, uint index)
		{
			return default(uint);
		}

		[Token(Token = "0x6000481")]
		[Address(RVA = "0x1EC2430", Offset = "0x1EC2430", VA = "0x1EC2430")]
		public static bool GetQueryUGCKeyValueTag(UGCQueryHandle_t handle, uint index, uint keyValueTagIndex, out string pchKey, uint cchKeySize, out string pchValue, uint cchValueSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000482")]
		[Address(RVA = "0x1EC2594", Offset = "0x1EC2594", VA = "0x1EC2594")]
		public static bool ReleaseQueryUGCRequest(UGCQueryHandle_t handle)
		{
			return default(bool);
		}

		[Token(Token = "0x6000483")]
		[Address(RVA = "0x1EC25C0", Offset = "0x1EC25C0", VA = "0x1EC25C0")]
		public static bool AddRequiredTag(UGCQueryHandle_t handle, string pTagName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000484")]
		[Address(RVA = "0x1EC26F4", Offset = "0x1EC26F4", VA = "0x1EC26F4")]
		public static bool AddExcludedTag(UGCQueryHandle_t handle, string pTagName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000485")]
		[Address(RVA = "0x1EC2828", Offset = "0x1EC2828", VA = "0x1EC2828")]
		public static bool SetReturnKeyValueTags(UGCQueryHandle_t handle, bool bReturnKeyValueTags)
		{
			return default(bool);
		}

		[Token(Token = "0x6000486")]
		[Address(RVA = "0x1EC285C", Offset = "0x1EC285C", VA = "0x1EC285C")]
		public static bool SetReturnLongDescription(UGCQueryHandle_t handle, bool bReturnLongDescription)
		{
			return default(bool);
		}

		[Token(Token = "0x6000487")]
		[Address(RVA = "0x1EC2890", Offset = "0x1EC2890", VA = "0x1EC2890")]
		public static bool SetReturnMetadata(UGCQueryHandle_t handle, bool bReturnMetadata)
		{
			return default(bool);
		}

		[Token(Token = "0x6000488")]
		[Address(RVA = "0x1EC28C4", Offset = "0x1EC28C4", VA = "0x1EC28C4")]
		public static bool SetReturnChildren(UGCQueryHandle_t handle, bool bReturnChildren)
		{
			return default(bool);
		}

		[Token(Token = "0x6000489")]
		[Address(RVA = "0x1EC28F8", Offset = "0x1EC28F8", VA = "0x1EC28F8")]
		public static bool SetReturnAdditionalPreviews(UGCQueryHandle_t handle, bool bReturnAdditionalPreviews)
		{
			return default(bool);
		}

		[Token(Token = "0x600048A")]
		[Address(RVA = "0x1EC292C", Offset = "0x1EC292C", VA = "0x1EC292C")]
		public static bool SetReturnTotalOnly(UGCQueryHandle_t handle, bool bReturnTotalOnly)
		{
			return default(bool);
		}

		[Token(Token = "0x600048B")]
		[Address(RVA = "0x1EC2960", Offset = "0x1EC2960", VA = "0x1EC2960")]
		public static bool SetLanguage(UGCQueryHandle_t handle, string pchLanguage)
		{
			return default(bool);
		}

		[Token(Token = "0x600048C")]
		[Address(RVA = "0x1EC2A94", Offset = "0x1EC2A94", VA = "0x1EC2A94")]
		public static bool SetAllowCachedResponse(UGCQueryHandle_t handle, uint unMaxAgeSeconds)
		{
			return default(bool);
		}

		[Token(Token = "0x600048D")]
		[Address(RVA = "0x1EC2AC8", Offset = "0x1EC2AC8", VA = "0x1EC2AC8")]
		public static bool SetCloudFileNameFilter(UGCQueryHandle_t handle, string pMatchCloudFileName)
		{
			return default(bool);
		}

		[Token(Token = "0x600048E")]
		[Address(RVA = "0x1EC2BFC", Offset = "0x1EC2BFC", VA = "0x1EC2BFC")]
		public static bool SetMatchAnyTag(UGCQueryHandle_t handle, bool bMatchAnyTag)
		{
			return default(bool);
		}

		[Token(Token = "0x600048F")]
		[Address(RVA = "0x1EC2C30", Offset = "0x1EC2C30", VA = "0x1EC2C30")]
		public static bool SetSearchText(UGCQueryHandle_t handle, string pSearchText)
		{
			return default(bool);
		}

		[Token(Token = "0x6000490")]
		[Address(RVA = "0x1EC2D64", Offset = "0x1EC2D64", VA = "0x1EC2D64")]
		public static bool SetRankedByTrendDays(UGCQueryHandle_t handle, uint unDays)
		{
			return default(bool);
		}

		[Token(Token = "0x6000491")]
		[Address(RVA = "0x1EC2D98", Offset = "0x1EC2D98", VA = "0x1EC2D98")]
		public static bool AddRequiredKeyValueTag(UGCQueryHandle_t handle, string pKey, string pValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000492")]
		[Address(RVA = "0x1EC2FDC", Offset = "0x1EC2FDC", VA = "0x1EC2FDC")]
		public static SteamAPICall_t RequestUGCDetails(PublishedFileId_t nPublishedFileID, uint unMaxAgeSeconds)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000493")]
		[Address(RVA = "0x1EC306C", Offset = "0x1EC306C", VA = "0x1EC306C")]
		public static SteamAPICall_t CreateItem(AppId_t nConsumerAppId, EWorkshopFileType eFileType)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000494")]
		[Address(RVA = "0x1EC30FC", Offset = "0x1EC30FC", VA = "0x1EC30FC")]
		public static UGCUpdateHandle_t StartItemUpdate(AppId_t nConsumerAppId, PublishedFileId_t nPublishedFileID)
		{
			return default(UGCUpdateHandle_t);
		}

		[Token(Token = "0x6000495")]
		[Address(RVA = "0x1EC3190", Offset = "0x1EC3190", VA = "0x1EC3190")]
		public static bool SetItemTitle(UGCUpdateHandle_t handle, string pchTitle)
		{
			return default(bool);
		}

		[Token(Token = "0x6000496")]
		[Address(RVA = "0x1EC32C4", Offset = "0x1EC32C4", VA = "0x1EC32C4")]
		public static bool SetItemDescription(UGCUpdateHandle_t handle, string pchDescription)
		{
			return default(bool);
		}

		[Token(Token = "0x6000497")]
		[Address(RVA = "0x1EC33F8", Offset = "0x1EC33F8", VA = "0x1EC33F8")]
		public static bool SetItemUpdateLanguage(UGCUpdateHandle_t handle, string pchLanguage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000498")]
		[Address(RVA = "0x1EC352C", Offset = "0x1EC352C", VA = "0x1EC352C")]
		public static bool SetItemMetadata(UGCUpdateHandle_t handle, string pchMetaData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000499")]
		[Address(RVA = "0x1EC3660", Offset = "0x1EC3660", VA = "0x1EC3660")]
		public static bool SetItemVisibility(UGCUpdateHandle_t handle, ERemoteStoragePublishedFileVisibility eVisibility)
		{
			return default(bool);
		}

		[Token(Token = "0x600049A")]
		[Address(RVA = "0x1EC3694", Offset = "0x1EC3694", VA = "0x1EC3694")]
		public static bool SetItemTags(UGCUpdateHandle_t updateHandle, IList<string> pTags)
		{
			return default(bool);
		}

		[Token(Token = "0x600049B")]
		[Address(RVA = "0x1EC3720", Offset = "0x1EC3720", VA = "0x1EC3720")]
		public static bool SetItemContent(UGCUpdateHandle_t handle, string pszContentFolder)
		{
			return default(bool);
		}

		[Token(Token = "0x600049C")]
		[Address(RVA = "0x1EC3854", Offset = "0x1EC3854", VA = "0x1EC3854")]
		public static bool SetItemPreview(UGCUpdateHandle_t handle, string pszPreviewFile)
		{
			return default(bool);
		}

		[Token(Token = "0x600049D")]
		[Address(RVA = "0x1EC3988", Offset = "0x1EC3988", VA = "0x1EC3988")]
		public static bool RemoveItemKeyValueTags(UGCUpdateHandle_t handle, string pchKey)
		{
			return default(bool);
		}

		[Token(Token = "0x600049E")]
		[Address(RVA = "0x1EC3ABC", Offset = "0x1EC3ABC", VA = "0x1EC3ABC")]
		public static bool AddItemKeyValueTag(UGCUpdateHandle_t handle, string pchKey, string pchValue)
		{
			return default(bool);
		}

		[Token(Token = "0x600049F")]
		[Address(RVA = "0x1EC3D00", Offset = "0x1EC3D00", VA = "0x1EC3D00")]
		public static SteamAPICall_t SubmitItemUpdate(UGCUpdateHandle_t handle, string pchChangeNote)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60004A0")]
		[Address(RVA = "0x1EC3E58", Offset = "0x1EC3E58", VA = "0x1EC3E58")]
		public static EItemUpdateStatus GetItemUpdateProgress(UGCUpdateHandle_t handle, out ulong punBytesProcessed, out ulong punBytesTotal)
		{
			return default(EItemUpdateStatus);
		}

		[Token(Token = "0x60004A1")]
		[Address(RVA = "0x1EC3E9C", Offset = "0x1EC3E9C", VA = "0x1EC3E9C")]
		public static SteamAPICall_t SetUserItemVote(PublishedFileId_t nPublishedFileID, bool bVoteUp)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60004A2")]
		[Address(RVA = "0x1EC3F2C", Offset = "0x1EC3F2C", VA = "0x1EC3F2C")]
		public static SteamAPICall_t GetUserItemVote(PublishedFileId_t nPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60004A3")]
		[Address(RVA = "0x1EC3FAC", Offset = "0x1EC3FAC", VA = "0x1EC3FAC")]
		public static SteamAPICall_t AddItemToFavorites(AppId_t nAppId, PublishedFileId_t nPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60004A4")]
		[Address(RVA = "0x1EC403C", Offset = "0x1EC403C", VA = "0x1EC403C")]
		public static SteamAPICall_t RemoveItemFromFavorites(AppId_t nAppId, PublishedFileId_t nPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60004A5")]
		[Address(RVA = "0x1EC40CC", Offset = "0x1EC40CC", VA = "0x1EC40CC")]
		public static SteamAPICall_t SubscribeItem(PublishedFileId_t nPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60004A6")]
		[Address(RVA = "0x1EC414C", Offset = "0x1EC414C", VA = "0x1EC414C")]
		public static SteamAPICall_t UnsubscribeItem(PublishedFileId_t nPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60004A7")]
		[Address(RVA = "0x1EC41CC", Offset = "0x1EC41CC", VA = "0x1EC41CC")]
		public static uint GetNumSubscribedItems()
		{
			return default(uint);
		}

		[Token(Token = "0x60004A8")]
		[Address(RVA = "0x1EC41E8", Offset = "0x1EC41E8", VA = "0x1EC41E8")]
		public static uint GetSubscribedItems(PublishedFileId_t[] pvecPublishedFileID, uint cMaxEntries)
		{
			return default(uint);
		}

		[Token(Token = "0x60004A9")]
		[Address(RVA = "0x1EC421C", Offset = "0x1EC421C", VA = "0x1EC421C")]
		public static uint GetItemState(PublishedFileId_t nPublishedFileID)
		{
			return default(uint);
		}

		[Token(Token = "0x60004AA")]
		[Address(RVA = "0x1EC4248", Offset = "0x1EC4248", VA = "0x1EC4248")]
		public static bool GetItemInstallInfo(PublishedFileId_t nPublishedFileID, out ulong punSizeOnDisk, out string pchFolder, uint cchFolderSize, out uint punTimeStamp)
		{
			return default(bool);
		}

		[Token(Token = "0x60004AB")]
		[Address(RVA = "0x1EC4348", Offset = "0x1EC4348", VA = "0x1EC4348")]
		public static bool GetItemDownloadInfo(PublishedFileId_t nPublishedFileID, out ulong punBytesDownloaded, out ulong punBytesTotal)
		{
			return default(bool);
		}

		[Token(Token = "0x60004AC")]
		[Address(RVA = "0x1EC438C", Offset = "0x1EC438C", VA = "0x1EC438C")]
		public static bool DownloadItem(PublishedFileId_t nPublishedFileID, bool bHighPriority)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200008A")]
	public static class SteamGameServerUtils
	{
		[Token(Token = "0x60004AD")]
		[Address(RVA = "0x1EC43C0", Offset = "0x1EC43C0", VA = "0x1EC43C0")]
		public static uint GetSecondsSinceAppActive()
		{
			return default(uint);
		}

		[Token(Token = "0x60004AE")]
		[Address(RVA = "0x1EC43DC", Offset = "0x1EC43DC", VA = "0x1EC43DC")]
		public static uint GetSecondsSinceComputerActive()
		{
			return default(uint);
		}

		[Token(Token = "0x60004AF")]
		[Address(RVA = "0x1EC43F8", Offset = "0x1EC43F8", VA = "0x1EC43F8")]
		public static EUniverse GetConnectedUniverse()
		{
			return default(EUniverse);
		}

		[Token(Token = "0x60004B0")]
		[Address(RVA = "0x1EC4414", Offset = "0x1EC4414", VA = "0x1EC4414")]
		public static uint GetServerRealTime()
		{
			return default(uint);
		}

		[Token(Token = "0x60004B1")]
		[Address(RVA = "0x1EC4430", Offset = "0x1EC4430", VA = "0x1EC4430")]
		public static string GetIPCountry()
		{
			return null;
		}

		[Token(Token = "0x60004B2")]
		[Address(RVA = "0x1EC4454", Offset = "0x1EC4454", VA = "0x1EC4454")]
		public static bool GetImageSize(int iImage, out uint pnWidth, out uint pnHeight)
		{
			return default(bool);
		}

		[Token(Token = "0x60004B3")]
		[Address(RVA = "0x1EC4498", Offset = "0x1EC4498", VA = "0x1EC4498")]
		public static bool GetImageRGBA(int iImage, byte[] pubDest, int nDestBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x60004B4")]
		[Address(RVA = "0x1EC44DC", Offset = "0x1EC44DC", VA = "0x1EC44DC")]
		public static bool GetCSERIPPort(out uint unIP, out ushort usPort)
		{
			return default(bool);
		}

		[Token(Token = "0x60004B5")]
		[Address(RVA = "0x1EC4510", Offset = "0x1EC4510", VA = "0x1EC4510")]
		public static byte GetCurrentBatteryPower()
		{
			return default(byte);
		}

		[Token(Token = "0x60004B6")]
		[Address(RVA = "0x1EC452C", Offset = "0x1EC452C", VA = "0x1EC452C")]
		public static AppId_t GetAppID()
		{
			return default(AppId_t);
		}

		[Token(Token = "0x60004B7")]
		[Address(RVA = "0x1EC45B0", Offset = "0x1EC45B0", VA = "0x1EC45B0")]
		public static void SetOverlayNotificationPosition(ENotificationPosition eNotificationPosition)
		{
		}

		[Token(Token = "0x60004B8")]
		[Address(RVA = "0x1EC45DC", Offset = "0x1EC45DC", VA = "0x1EC45DC")]
		public static bool IsAPICallCompleted(SteamAPICall_t hSteamAPICall, out bool pbFailed)
		{
			return default(bool);
		}

		[Token(Token = "0x60004B9")]
		[Address(RVA = "0x1EC4610", Offset = "0x1EC4610", VA = "0x1EC4610")]
		public static ESteamAPICallFailure GetAPICallFailureReason(SteamAPICall_t hSteamAPICall)
		{
			return default(ESteamAPICallFailure);
		}

		[Token(Token = "0x60004BA")]
		[Address(RVA = "0x1EC463C", Offset = "0x1EC463C", VA = "0x1EC463C")]
		public static bool GetAPICallResult(SteamAPICall_t hSteamAPICall, IntPtr pCallback, int cubCallback, int iCallbackExpected, out bool pbFailed)
		{
			return default(bool);
		}

		[Token(Token = "0x60004BB")]
		[Address(RVA = "0x1EC4698", Offset = "0x1EC4698", VA = "0x1EC4698")]
		public static void RunFrame()
		{
		}

		[Token(Token = "0x60004BC")]
		[Address(RVA = "0x1EC46B4", Offset = "0x1EC46B4", VA = "0x1EC46B4")]
		public static uint GetIPCCallCount()
		{
			return default(uint);
		}

		[Token(Token = "0x60004BD")]
		[Address(RVA = "0x1EC46D0", Offset = "0x1EC46D0", VA = "0x1EC46D0")]
		public static void SetWarningMessageHook(SteamAPIWarningMessageHook_t pFunction)
		{
		}

		[Token(Token = "0x60004BE")]
		[Address(RVA = "0x1EC46FC", Offset = "0x1EC46FC", VA = "0x1EC46FC")]
		public static bool IsOverlayEnabled()
		{
			return default(bool);
		}

		[Token(Token = "0x60004BF")]
		[Address(RVA = "0x1EC4718", Offset = "0x1EC4718", VA = "0x1EC4718")]
		public static bool BOverlayNeedsPresent()
		{
			return default(bool);
		}

		[Token(Token = "0x60004C0")]
		[Address(RVA = "0x1EC4734", Offset = "0x1EC4734", VA = "0x1EC4734")]
		public static SteamAPICall_t CheckFileSignature(string szFileName)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60004C1")]
		[Address(RVA = "0x1EC4884", Offset = "0x1EC4884", VA = "0x1EC4884")]
		public static bool ShowGamepadTextInput(EGamepadTextInputMode eInputMode, EGamepadTextInputLineMode eLineInputMode, string pchDescription, uint unCharMax, string pchExistingText)
		{
			return default(bool);
		}

		[Token(Token = "0x60004C2")]
		[Address(RVA = "0x1EC4AE0", Offset = "0x1EC4AE0", VA = "0x1EC4AE0")]
		public static uint GetEnteredGamepadTextLength()
		{
			return default(uint);
		}

		[Token(Token = "0x60004C3")]
		[Address(RVA = "0x1EC4AFC", Offset = "0x1EC4AFC", VA = "0x1EC4AFC")]
		public static bool GetEnteredGamepadTextInput(out string pchText, uint cchText)
		{
			return default(bool);
		}

		[Token(Token = "0x60004C4")]
		[Address(RVA = "0x1EC4BD0", Offset = "0x1EC4BD0", VA = "0x1EC4BD0")]
		public static string GetSteamUILanguage()
		{
			return null;
		}

		[Token(Token = "0x60004C5")]
		[Address(RVA = "0x1EC4BF4", Offset = "0x1EC4BF4", VA = "0x1EC4BF4")]
		public static bool IsSteamRunningInVR()
		{
			return default(bool);
		}

		[Token(Token = "0x60004C6")]
		[Address(RVA = "0x1EC4C10", Offset = "0x1EC4C10", VA = "0x1EC4C10")]
		public static void SetOverlayNotificationInset(int nHorizontalInset, int nVerticalInset)
		{
		}
	}
	[Token(Token = "0x200008B")]
	public static class SteamHTMLSurface
	{
		[Token(Token = "0x60004C7")]
		[Address(RVA = "0x1EC4C44", Offset = "0x1EC4C44", VA = "0x1EC4C44")]
		public static bool Init()
		{
			return default(bool);
		}

		[Token(Token = "0x60004C8")]
		[Address(RVA = "0x1EC4C60", Offset = "0x1EC4C60", VA = "0x1EC4C60")]
		public static bool Shutdown()
		{
			return default(bool);
		}

		[Token(Token = "0x60004C9")]
		[Address(RVA = "0x1EC4C7C", Offset = "0x1EC4C7C", VA = "0x1EC4C7C")]
		public static SteamAPICall_t CreateBrowser(string pchUserAgent, string pchUserCSS)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60004CA")]
		[Address(RVA = "0x1EC4EC4", Offset = "0x1EC4EC4", VA = "0x1EC4EC4")]
		public static void RemoveBrowser(HHTMLBrowser unBrowserHandle)
		{
		}

		[Token(Token = "0x60004CB")]
		[Address(RVA = "0x1EC4EF0", Offset = "0x1EC4EF0", VA = "0x1EC4EF0")]
		public static void LoadURL(HHTMLBrowser unBrowserHandle, string pchURL, string pchPostData)
		{
		}

		[Token(Token = "0x60004CC")]
		[Address(RVA = "0x1EC5124", Offset = "0x1EC5124", VA = "0x1EC5124")]
		public static void SetSize(HHTMLBrowser unBrowserHandle, uint unWidth, uint unHeight)
		{
		}

		[Token(Token = "0x60004CD")]
		[Address(RVA = "0x1EC5168", Offset = "0x1EC5168", VA = "0x1EC5168")]
		public static void StopLoad(HHTMLBrowser unBrowserHandle)
		{
		}

		[Token(Token = "0x60004CE")]
		[Address(RVA = "0x1EC5194", Offset = "0x1EC5194", VA = "0x1EC5194")]
		public static void Reload(HHTMLBrowser unBrowserHandle)
		{
		}

		[Token(Token = "0x60004CF")]
		[Address(RVA = "0x1EC51C0", Offset = "0x1EC51C0", VA = "0x1EC51C0")]
		public static void GoBack(HHTMLBrowser unBrowserHandle)
		{
		}

		[Token(Token = "0x60004D0")]
		[Address(RVA = "0x1EC51EC", Offset = "0x1EC51EC", VA = "0x1EC51EC")]
		public static void GoForward(HHTMLBrowser unBrowserHandle)
		{
		}

		[Token(Token = "0x60004D1")]
		[Address(RVA = "0x1EC5218", Offset = "0x1EC5218", VA = "0x1EC5218")]
		public static void AddHeader(HHTMLBrowser unBrowserHandle, string pchKey, string pchValue)
		{
		}

		[Token(Token = "0x60004D2")]
		[Address(RVA = "0x1EC544C", Offset = "0x1EC544C", VA = "0x1EC544C")]
		public static void ExecuteJavascript(HHTMLBrowser unBrowserHandle, string pchScript)
		{
		}

		[Token(Token = "0x60004D3")]
		[Address(RVA = "0x1EC5580", Offset = "0x1EC5580", VA = "0x1EC5580")]
		public static void MouseUp(HHTMLBrowser unBrowserHandle, EHTMLMouseButton eMouseButton)
		{
		}

		[Token(Token = "0x60004D4")]
		[Address(RVA = "0x1EC55B4", Offset = "0x1EC55B4", VA = "0x1EC55B4")]
		public static void MouseDown(HHTMLBrowser unBrowserHandle, EHTMLMouseButton eMouseButton)
		{
		}

		[Token(Token = "0x60004D5")]
		[Address(RVA = "0x1EC55E8", Offset = "0x1EC55E8", VA = "0x1EC55E8")]
		public static void MouseDoubleClick(HHTMLBrowser unBrowserHandle, EHTMLMouseButton eMouseButton)
		{
		}

		[Token(Token = "0x60004D6")]
		[Address(RVA = "0x1EC561C", Offset = "0x1EC561C", VA = "0x1EC561C")]
		public static void MouseMove(HHTMLBrowser unBrowserHandle, int x, int y)
		{
		}

		[Token(Token = "0x60004D7")]
		[Address(RVA = "0x1EC5660", Offset = "0x1EC5660", VA = "0x1EC5660")]
		public static void MouseWheel(HHTMLBrowser unBrowserHandle, int nDelta)
		{
		}

		[Token(Token = "0x60004D8")]
		[Address(RVA = "0x1EC5694", Offset = "0x1EC5694", VA = "0x1EC5694")]
		public static void KeyDown(HHTMLBrowser unBrowserHandle, uint nNativeKeyCode, EHTMLKeyModifiers eHTMLKeyModifiers)
		{
		}

		[Token(Token = "0x60004D9")]
		[Address(RVA = "0x1EC56D8", Offset = "0x1EC56D8", VA = "0x1EC56D8")]
		public static void KeyUp(HHTMLBrowser unBrowserHandle, uint nNativeKeyCode, EHTMLKeyModifiers eHTMLKeyModifiers)
		{
		}

		[Token(Token = "0x60004DA")]
		[Address(RVA = "0x1EC571C", Offset = "0x1EC571C", VA = "0x1EC571C")]
		public static void KeyChar(HHTMLBrowser unBrowserHandle, uint cUnicodeChar, EHTMLKeyModifiers eHTMLKeyModifiers)
		{
		}

		[Token(Token = "0x60004DB")]
		[Address(RVA = "0x1EC5760", Offset = "0x1EC5760", VA = "0x1EC5760")]
		public static void SetHorizontalScroll(HHTMLBrowser unBrowserHandle, uint nAbsolutePixelScroll)
		{
		}

		[Token(Token = "0x60004DC")]
		[Address(RVA = "0x1EC5794", Offset = "0x1EC5794", VA = "0x1EC5794")]
		public static void SetVerticalScroll(HHTMLBrowser unBrowserHandle, uint nAbsolutePixelScroll)
		{
		}

		[Token(Token = "0x60004DD")]
		[Address(RVA = "0x1EC57C8", Offset = "0x1EC57C8", VA = "0x1EC57C8")]
		public static void SetKeyFocus(HHTMLBrowser unBrowserHandle, bool bHasKeyFocus)
		{
		}

		[Token(Token = "0x60004DE")]
		[Address(RVA = "0x1EC57FC", Offset = "0x1EC57FC", VA = "0x1EC57FC")]
		public static void ViewSource(HHTMLBrowser unBrowserHandle)
		{
		}

		[Token(Token = "0x60004DF")]
		[Address(RVA = "0x1EC5828", Offset = "0x1EC5828", VA = "0x1EC5828")]
		public static void CopyToClipboard(HHTMLBrowser unBrowserHandle)
		{
		}

		[Token(Token = "0x60004E0")]
		[Address(RVA = "0x1EC5854", Offset = "0x1EC5854", VA = "0x1EC5854")]
		public static void PasteFromClipboard(HHTMLBrowser unBrowserHandle)
		{
		}

		[Token(Token = "0x60004E1")]
		[Address(RVA = "0x1EC5880", Offset = "0x1EC5880", VA = "0x1EC5880")]
		public static void Find(HHTMLBrowser unBrowserHandle, string pchSearchStr, bool bCurrentlyInFind, bool bReverse)
		{
		}

		[Token(Token = "0x60004E2")]
		[Address(RVA = "0x1EC59D0", Offset = "0x1EC59D0", VA = "0x1EC59D0")]
		public static void StopFind(HHTMLBrowser unBrowserHandle)
		{
		}

		[Token(Token = "0x60004E3")]
		[Address(RVA = "0x1EC59FC", Offset = "0x1EC59FC", VA = "0x1EC59FC")]
		public static void GetLinkAtPosition(HHTMLBrowser unBrowserHandle, int x, int y)
		{
		}

		[Token(Token = "0x60004E4")]
		[Address(RVA = "0x1EC5A40", Offset = "0x1EC5A40", VA = "0x1EC5A40")]
		public static void SetCookie(string pchHostname, string pchKey, string pchValue, string pchPath = "/", uint nExpires = 0u, bool bSecure = false, bool bHTTPOnly = false)
		{
		}

		[Token(Token = "0x60004E5")]
		[Address(RVA = "0x1EC5E64", Offset = "0x1EC5E64", VA = "0x1EC5E64")]
		public static void SetPageScaleFactor(HHTMLBrowser unBrowserHandle, float flZoom, int nPointX, int nPointY)
		{
		}

		[Token(Token = "0x60004E6")]
		[Address(RVA = "0x1EC5EB8", Offset = "0x1EC5EB8", VA = "0x1EC5EB8")]
		public static void SetBackgroundMode(HHTMLBrowser unBrowserHandle, bool bBackgroundMode)
		{
		}

		[Token(Token = "0x60004E7")]
		[Address(RVA = "0x1EC5EEC", Offset = "0x1EC5EEC", VA = "0x1EC5EEC")]
		public static void AllowStartRequest(HHTMLBrowser unBrowserHandle, bool bAllowed)
		{
		}

		[Token(Token = "0x60004E8")]
		[Address(RVA = "0x1EC5F20", Offset = "0x1EC5F20", VA = "0x1EC5F20")]
		public static void JSDialogResponse(HHTMLBrowser unBrowserHandle, bool bResult)
		{
		}

		[Token(Token = "0x60004E9")]
		[Address(RVA = "0x1EC5F54", Offset = "0x1EC5F54", VA = "0x1EC5F54")]
		public static void FileLoadDialogResponse(HHTMLBrowser unBrowserHandle, IntPtr pchSelectedFiles)
		{
		}
	}
	[Token(Token = "0x200008C")]
	public static class SteamHTTP
	{
		[Token(Token = "0x60004EA")]
		[Address(RVA = "0x1EC5F88", Offset = "0x1EC5F88", VA = "0x1EC5F88")]
		public static HTTPRequestHandle CreateHTTPRequest(EHTTPMethod eHTTPRequestMethod, string pchAbsoluteURL)
		{
			return default(HTTPRequestHandle);
		}

		[Token(Token = "0x60004EB")]
		[Address(RVA = "0x1EC60F0", Offset = "0x1EC60F0", VA = "0x1EC60F0")]
		public static bool SetHTTPRequestContextValue(HTTPRequestHandle hRequest, ulong ulContextValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60004EC")]
		[Address(RVA = "0x1EC6124", Offset = "0x1EC6124", VA = "0x1EC6124")]
		public static bool SetHTTPRequestNetworkActivityTimeout(HTTPRequestHandle hRequest, uint unTimeoutSeconds)
		{
			return default(bool);
		}

		[Token(Token = "0x60004ED")]
		[Address(RVA = "0x1EC6158", Offset = "0x1EC6158", VA = "0x1EC6158")]
		public static bool SetHTTPRequestHeaderValue(HTTPRequestHandle hRequest, string pchHeaderName, string pchHeaderValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60004EE")]
		[Address(RVA = "0x1EC639C", Offset = "0x1EC639C", VA = "0x1EC639C")]
		public static bool SetHTTPRequestGetOrPostParameter(HTTPRequestHandle hRequest, string pchParamName, string pchParamValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60004EF")]
		[Address(RVA = "0x1EC65E0", Offset = "0x1EC65E0", VA = "0x1EC65E0")]
		public static bool SendHTTPRequest(HTTPRequestHandle hRequest, out SteamAPICall_t pCallHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x60004F0")]
		[Address(RVA = "0x1EC6614", Offset = "0x1EC6614", VA = "0x1EC6614")]
		public static bool SendHTTPRequestAndStreamResponse(HTTPRequestHandle hRequest, out SteamAPICall_t pCallHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x60004F1")]
		[Address(RVA = "0x1EC6648", Offset = "0x1EC6648", VA = "0x1EC6648")]
		public static bool DeferHTTPRequest(HTTPRequestHandle hRequest)
		{
			return default(bool);
		}

		[Token(Token = "0x60004F2")]
		[Address(RVA = "0x1EC6674", Offset = "0x1EC6674", VA = "0x1EC6674")]
		public static bool PrioritizeHTTPRequest(HTTPRequestHandle hRequest)
		{
			return default(bool);
		}

		[Token(Token = "0x60004F3")]
		[Address(RVA = "0x1EC66A0", Offset = "0x1EC66A0", VA = "0x1EC66A0")]
		public static bool GetHTTPResponseHeaderSize(HTTPRequestHandle hRequest, string pchHeaderName, out uint unResponseHeaderSize)
		{
			return default(bool);
		}

		[Token(Token = "0x60004F4")]
		[Address(RVA = "0x1EC67DC", Offset = "0x1EC67DC", VA = "0x1EC67DC")]
		public static bool GetHTTPResponseHeaderValue(HTTPRequestHandle hRequest, string pchHeaderName, byte[] pHeaderValueBuffer, uint unBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x60004F5")]
		[Address(RVA = "0x1EC6928", Offset = "0x1EC6928", VA = "0x1EC6928")]
		public static bool GetHTTPResponseBodySize(HTTPRequestHandle hRequest, out uint unBodySize)
		{
			return default(bool);
		}

		[Token(Token = "0x60004F6")]
		[Address(RVA = "0x1EC695C", Offset = "0x1EC695C", VA = "0x1EC695C")]
		public static bool GetHTTPResponseBodyData(HTTPRequestHandle hRequest, byte[] pBodyDataBuffer, uint unBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x60004F7")]
		[Address(RVA = "0x1EC69A0", Offset = "0x1EC69A0", VA = "0x1EC69A0")]
		public static bool GetHTTPStreamingResponseBodyData(HTTPRequestHandle hRequest, uint cOffset, byte[] pBodyDataBuffer, uint unBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x60004F8")]
		[Address(RVA = "0x1EC69EC", Offset = "0x1EC69EC", VA = "0x1EC69EC")]
		public static bool ReleaseHTTPRequest(HTTPRequestHandle hRequest)
		{
			return default(bool);
		}

		[Token(Token = "0x60004F9")]
		[Address(RVA = "0x1EC6A18", Offset = "0x1EC6A18", VA = "0x1EC6A18")]
		public static bool GetHTTPDownloadProgressPct(HTTPRequestHandle hRequest, out float pflPercentOut)
		{
			return default(bool);
		}

		[Token(Token = "0x60004FA")]
		[Address(RVA = "0x1EC6A4C", Offset = "0x1EC6A4C", VA = "0x1EC6A4C")]
		public static bool SetHTTPRequestRawPostBody(HTTPRequestHandle hRequest, string pchContentType, byte[] pubBody, uint unBodyLen)
		{
			return default(bool);
		}

		[Token(Token = "0x60004FB")]
		[Address(RVA = "0x1EC6B98", Offset = "0x1EC6B98", VA = "0x1EC6B98")]
		public static HTTPCookieContainerHandle CreateCookieContainer(bool bAllowResponsesToModify)
		{
			return default(HTTPCookieContainerHandle);
		}

		[Token(Token = "0x60004FC")]
		[Address(RVA = "0x1EC6C24", Offset = "0x1EC6C24", VA = "0x1EC6C24")]
		public static bool ReleaseCookieContainer(HTTPCookieContainerHandle hCookieContainer)
		{
			return default(bool);
		}

		[Token(Token = "0x60004FD")]
		[Address(RVA = "0x1EC6C50", Offset = "0x1EC6C50", VA = "0x1EC6C50")]
		public static bool SetCookie(HTTPCookieContainerHandle hCookieContainer, string pchHost, string pchUrl, string pchCookie)
		{
			return default(bool);
		}

		[Token(Token = "0x60004FE")]
		[Address(RVA = "0x1EC6F90", Offset = "0x1EC6F90", VA = "0x1EC6F90")]
		public static bool SetHTTPRequestCookieContainer(HTTPRequestHandle hRequest, HTTPCookieContainerHandle hCookieContainer)
		{
			return default(bool);
		}

		[Token(Token = "0x60004FF")]
		[Address(RVA = "0x1EC6FC4", Offset = "0x1EC6FC4", VA = "0x1EC6FC4")]
		public static bool SetHTTPRequestUserAgentInfo(HTTPRequestHandle hRequest, string pchUserAgentInfo)
		{
			return default(bool);
		}

		[Token(Token = "0x6000500")]
		[Address(RVA = "0x1EC70F8", Offset = "0x1EC70F8", VA = "0x1EC70F8")]
		public static bool SetHTTPRequestRequiresVerifiedCertificate(HTTPRequestHandle hRequest, bool bRequireVerifiedCertificate)
		{
			return default(bool);
		}

		[Token(Token = "0x6000501")]
		[Address(RVA = "0x1EC712C", Offset = "0x1EC712C", VA = "0x1EC712C")]
		public static bool SetHTTPRequestAbsoluteTimeoutMS(HTTPRequestHandle hRequest, uint unMilliseconds)
		{
			return default(bool);
		}

		[Token(Token = "0x6000502")]
		[Address(RVA = "0x1EC7160", Offset = "0x1EC7160", VA = "0x1EC7160")]
		public static bool GetHTTPRequestWasTimedOut(HTTPRequestHandle hRequest, out bool pbWasTimedOut)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200008D")]
	public static class SteamInventory
	{
		[Token(Token = "0x6000503")]
		[Address(RVA = "0x1EC7194", Offset = "0x1EC7194", VA = "0x1EC7194")]
		public static EResult GetResultStatus(SteamInventoryResult_t resultHandle)
		{
			return default(EResult);
		}

		[Token(Token = "0x6000504")]
		[Address(RVA = "0x1EC71C0", Offset = "0x1EC71C0", VA = "0x1EC71C0")]
		public static bool GetResultItems(SteamInventoryResult_t resultHandle, SteamItemDetails_t[] pOutItemsArray, ref uint punOutItemsArraySize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000505")]
		[Address(RVA = "0x1EC7204", Offset = "0x1EC7204", VA = "0x1EC7204")]
		public static uint GetResultTimestamp(SteamInventoryResult_t resultHandle)
		{
			return default(uint);
		}

		[Token(Token = "0x6000506")]
		[Address(RVA = "0x1EC7230", Offset = "0x1EC7230", VA = "0x1EC7230")]
		public static bool CheckResultSteamID(SteamInventoryResult_t resultHandle, CSteamID steamIDExpected)
		{
			return default(bool);
		}

		[Token(Token = "0x6000507")]
		[Address(RVA = "0x1EC7264", Offset = "0x1EC7264", VA = "0x1EC7264")]
		public static void DestroyResult(SteamInventoryResult_t resultHandle)
		{
		}

		[Token(Token = "0x6000508")]
		[Address(RVA = "0x1EC7290", Offset = "0x1EC7290", VA = "0x1EC7290")]
		public static bool GetAllItems(out SteamInventoryResult_t pResultHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x6000509")]
		[Address(RVA = "0x1EC72BC", Offset = "0x1EC72BC", VA = "0x1EC72BC")]
		public static bool GetItemsByID(out SteamInventoryResult_t pResultHandle, SteamItemInstanceID_t[] pInstanceIDs, uint unCountInstanceIDs)
		{
			return default(bool);
		}

		[Token(Token = "0x600050A")]
		[Address(RVA = "0x1EC7300", Offset = "0x1EC7300", VA = "0x1EC7300")]
		public static bool SerializeResult(SteamInventoryResult_t resultHandle, byte[] pOutBuffer, out uint punOutBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x600050B")]
		[Address(RVA = "0x1EC7344", Offset = "0x1EC7344", VA = "0x1EC7344")]
		public static bool DeserializeResult(out SteamInventoryResult_t pOutResultHandle, byte[] pBuffer, uint unBufferSize, bool bRESERVED_MUST_BE_FALSE = false)
		{
			return default(bool);
		}

		[Token(Token = "0x600050C")]
		[Address(RVA = "0x1EC7390", Offset = "0x1EC7390", VA = "0x1EC7390")]
		public static bool GenerateItems(out SteamInventoryResult_t pResultHandle, SteamItemDef_t[] pArrayItemDefs, uint[] punArrayQuantity, uint unArrayLength)
		{
			return default(bool);
		}

		[Token(Token = "0x600050D")]
		[Address(RVA = "0x1EC73DC", Offset = "0x1EC73DC", VA = "0x1EC73DC")]
		public static bool GrantPromoItems(out SteamInventoryResult_t pResultHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x600050E")]
		[Address(RVA = "0x1EC7408", Offset = "0x1EC7408", VA = "0x1EC7408")]
		public static bool AddPromoItem(out SteamInventoryResult_t pResultHandle, SteamItemDef_t itemDef)
		{
			return default(bool);
		}

		[Token(Token = "0x600050F")]
		[Address(RVA = "0x1EC743C", Offset = "0x1EC743C", VA = "0x1EC743C")]
		public static bool AddPromoItems(out SteamInventoryResult_t pResultHandle, SteamItemDef_t[] pArrayItemDefs, uint unArrayLength)
		{
			return default(bool);
		}

		[Token(Token = "0x6000510")]
		[Address(RVA = "0x1EC7480", Offset = "0x1EC7480", VA = "0x1EC7480")]
		public static bool ConsumeItem(out SteamInventoryResult_t pResultHandle, SteamItemInstanceID_t itemConsume, uint unQuantity)
		{
			return default(bool);
		}

		[Token(Token = "0x6000511")]
		[Address(RVA = "0x1EC74C4", Offset = "0x1EC74C4", VA = "0x1EC74C4")]
		public static bool ExchangeItems(out SteamInventoryResult_t pResultHandle, SteamItemDef_t[] pArrayGenerate, uint[] punArrayGenerateQuantity, uint unArrayGenerateLength, SteamItemInstanceID_t[] pArrayDestroy, uint[] punArrayDestroyQuantity, uint unArrayDestroyLength)
		{
			return default(bool);
		}

		[Token(Token = "0x6000512")]
		[Address(RVA = "0x1EC7538", Offset = "0x1EC7538", VA = "0x1EC7538")]
		public static bool TransferItemQuantity(out SteamInventoryResult_t pResultHandle, SteamItemInstanceID_t itemIdSource, uint unQuantity, SteamItemInstanceID_t itemIdDest)
		{
			return default(bool);
		}

		[Token(Token = "0x6000513")]
		[Address(RVA = "0x1EC7584", Offset = "0x1EC7584", VA = "0x1EC7584")]
		public static void SendItemDropHeartbeat()
		{
		}

		[Token(Token = "0x6000514")]
		[Address(RVA = "0x1EC75A0", Offset = "0x1EC75A0", VA = "0x1EC75A0")]
		public static bool TriggerItemDrop(out SteamInventoryResult_t pResultHandle, SteamItemDef_t dropListDefinition)
		{
			return default(bool);
		}

		[Token(Token = "0x6000515")]
		[Address(RVA = "0x1EC75D4", Offset = "0x1EC75D4", VA = "0x1EC75D4")]
		public static bool TradeItems(out SteamInventoryResult_t pResultHandle, CSteamID steamIDTradePartner, SteamItemInstanceID_t[] pArrayGive, uint[] pArrayGiveQuantity, uint nArrayGiveLength, SteamItemInstanceID_t[] pArrayGet, uint[] pArrayGetQuantity, uint nArrayGetLength)
		{
			return default(bool);
		}

		[Token(Token = "0x6000516")]
		[Address(RVA = "0x1EC7650", Offset = "0x1EC7650", VA = "0x1EC7650")]
		public static bool LoadItemDefinitions()
		{
			return default(bool);
		}

		[Token(Token = "0x6000517")]
		[Address(RVA = "0x1EC766C", Offset = "0x1EC766C", VA = "0x1EC766C")]
		public static bool GetItemDefinitionIDs(SteamItemDef_t[] pItemDefIDs, out uint punItemDefIDsArraySize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000518")]
		[Address(RVA = "0x1EC76A0", Offset = "0x1EC76A0", VA = "0x1EC76A0")]
		public static bool GetItemDefinitionProperty(SteamItemDef_t iDefinition, string pchPropertyName, out string pchValueBuffer, ref uint punValueBufferSize)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200008E")]
	public static class SteamMatchmaking
	{
		[Token(Token = "0x6000519")]
		[Address(RVA = "0x1EC7E64", Offset = "0x1EC7E64", VA = "0x1EC7E64")]
		public static int GetFavoriteGameCount()
		{
			return default(int);
		}

		[Token(Token = "0x600051A")]
		[Address(RVA = "0x1EC7E80", Offset = "0x1EC7E80", VA = "0x1EC7E80")]
		public static bool GetFavoriteGame(int iGame, out AppId_t pnAppID, out uint pnIP, out ushort pnConnPort, out ushort pnQueryPort, out uint punFlags, out uint pRTime32LastPlayedOnServer)
		{
			return default(bool);
		}

		[Token(Token = "0x600051B")]
		[Address(RVA = "0x1EC7EF4", Offset = "0x1EC7EF4", VA = "0x1EC7EF4")]
		public static int AddFavoriteGame(AppId_t nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags, uint rTime32LastPlayedOnServer)
		{
			return default(int);
		}

		[Token(Token = "0x600051C")]
		[Address(RVA = "0x1EC7F58", Offset = "0x1EC7F58", VA = "0x1EC7F58")]
		public static bool RemoveFavoriteGame(AppId_t nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags)
		{
			return default(bool);
		}

		[Token(Token = "0x600051D")]
		[Address(RVA = "0x1EC7FB4", Offset = "0x1EC7FB4", VA = "0x1EC7FB4")]
		public static SteamAPICall_t RequestLobbyList()
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x600051E")]
		[Address(RVA = "0x1EC802C", Offset = "0x1EC802C", VA = "0x1EC802C")]
		public static void AddRequestLobbyListStringFilter(string pchKeyToMatch, string pchValueToMatch, ELobbyComparison eComparisonType)
		{
		}

		[Token(Token = "0x600051F")]
		[Address(RVA = "0x1EC8260", Offset = "0x1EC8260", VA = "0x1EC8260")]
		public static void AddRequestLobbyListNumericalFilter(string pchKeyToMatch, int nValueToMatch, ELobbyComparison eComparisonType)
		{
		}

		[Token(Token = "0x6000520")]
		[Address(RVA = "0x1EC839C", Offset = "0x1EC839C", VA = "0x1EC839C")]
		public static void AddRequestLobbyListNearValueFilter(string pchKeyToMatch, int nValueToBeCloseTo)
		{
		}

		[Token(Token = "0x6000521")]
		[Address(RVA = "0x1EC84D0", Offset = "0x1EC84D0", VA = "0x1EC84D0")]
		public static void AddRequestLobbyListFilterSlotsAvailable(int nSlotsAvailable)
		{
		}

		[Token(Token = "0x6000522")]
		[Address(RVA = "0x1EC84FC", Offset = "0x1EC84FC", VA = "0x1EC84FC")]
		public static void AddRequestLobbyListDistanceFilter(ELobbyDistanceFilter eLobbyDistanceFilter)
		{
		}

		[Token(Token = "0x6000523")]
		[Address(RVA = "0x1EC8528", Offset = "0x1EC8528", VA = "0x1EC8528")]
		public static void AddRequestLobbyListResultCountFilter(int cMaxResults)
		{
		}

		[Token(Token = "0x6000524")]
		[Address(RVA = "0x1EC8554", Offset = "0x1EC8554", VA = "0x1EC8554")]
		public static void AddRequestLobbyListCompatibleMembersFilter(CSteamID steamIDLobby)
		{
		}

		[Token(Token = "0x6000525")]
		[Address(RVA = "0x1EC8580", Offset = "0x1EC8580", VA = "0x1EC8580")]
		public static CSteamID GetLobbyByIndex(int iLobby)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x6000526")]
		[Address(RVA = "0x1EC8604", Offset = "0x1EC8604", VA = "0x1EC8604")]
		public static SteamAPICall_t CreateLobby(ELobbyType eLobbyType, int cMaxMembers)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000527")]
		[Address(RVA = "0x1EC8694", Offset = "0x1EC8694", VA = "0x1EC8694")]
		public static SteamAPICall_t JoinLobby(CSteamID steamIDLobby)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000528")]
		[Address(RVA = "0x1EC8714", Offset = "0x1EC8714", VA = "0x1EC8714")]
		public static void LeaveLobby(CSteamID steamIDLobby)
		{
		}

		[Token(Token = "0x6000529")]
		[Address(RVA = "0x1EC8740", Offset = "0x1EC8740", VA = "0x1EC8740")]
		public static bool InviteUserToLobby(CSteamID steamIDLobby, CSteamID steamIDInvitee)
		{
			return default(bool);
		}

		[Token(Token = "0x600052A")]
		[Address(RVA = "0x1EC8774", Offset = "0x1EC8774", VA = "0x1EC8774")]
		public static int GetNumLobbyMembers(CSteamID steamIDLobby)
		{
			return default(int);
		}

		[Token(Token = "0x600052B")]
		[Address(RVA = "0x1EC87A0", Offset = "0x1EC87A0", VA = "0x1EC87A0")]
		public static CSteamID GetLobbyMemberByIndex(CSteamID steamIDLobby, int iMember)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x600052C")]
		[Address(RVA = "0x1EC8834", Offset = "0x1EC8834", VA = "0x1EC8834")]
		public static string GetLobbyData(CSteamID steamIDLobby, string pchKey)
		{
			return null;
		}

		[Token(Token = "0x600052D")]
		[Address(RVA = "0x1EC8974", Offset = "0x1EC8974", VA = "0x1EC8974")]
		public static bool SetLobbyData(CSteamID steamIDLobby, string pchKey, string pchValue)
		{
			return default(bool);
		}

		[Token(Token = "0x600052E")]
		[Address(RVA = "0x1EC8BB8", Offset = "0x1EC8BB8", VA = "0x1EC8BB8")]
		public static int GetLobbyDataCount(CSteamID steamIDLobby)
		{
			return default(int);
		}

		[Token(Token = "0x600052F")]
		[Address(RVA = "0x1EC8BE4", Offset = "0x1EC8BE4", VA = "0x1EC8BE4")]
		public static bool GetLobbyDataByIndex(CSteamID steamIDLobby, int iLobbyData, out string pchKey, int cchKeyBufferSize, out string pchValue, int cchValueBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000530")]
		[Address(RVA = "0x1EC8D40", Offset = "0x1EC8D40", VA = "0x1EC8D40")]
		public static bool DeleteLobbyData(CSteamID steamIDLobby, string pchKey)
		{
			return default(bool);
		}

		[Token(Token = "0x6000531")]
		[Address(RVA = "0x1EC8E74", Offset = "0x1EC8E74", VA = "0x1EC8E74")]
		public static string GetLobbyMemberData(CSteamID steamIDLobby, CSteamID steamIDUser, string pchKey)
		{
			return null;
		}

		[Token(Token = "0x6000532")]
		[Address(RVA = "0x1EC8FBC", Offset = "0x1EC8FBC", VA = "0x1EC8FBC")]
		public static void SetLobbyMemberData(CSteamID steamIDLobby, string pchKey, string pchValue)
		{
		}

		[Token(Token = "0x6000533")]
		[Address(RVA = "0x1EC91F0", Offset = "0x1EC91F0", VA = "0x1EC91F0")]
		public static bool SendLobbyChatMsg(CSteamID steamIDLobby, byte[] pvMsgBody, int cubMsgBody)
		{
			return default(bool);
		}

		[Token(Token = "0x6000534")]
		[Address(RVA = "0x1EC9234", Offset = "0x1EC9234", VA = "0x1EC9234")]
		public static int GetLobbyChatEntry(CSteamID steamIDLobby, int iChatID, out CSteamID pSteamIDUser, byte[] pvData, int cubData, out EChatEntryType peChatEntryType)
		{
			return default(int);
		}

		[Token(Token = "0x6000535")]
		[Address(RVA = "0x1EC9298", Offset = "0x1EC9298", VA = "0x1EC9298")]
		public static bool RequestLobbyData(CSteamID steamIDLobby)
		{
			return default(bool);
		}

		[Token(Token = "0x6000536")]
		[Address(RVA = "0x1EC92C4", Offset = "0x1EC92C4", VA = "0x1EC92C4")]
		public static void SetLobbyGameServer(CSteamID steamIDLobby, uint unGameServerIP, ushort unGameServerPort, CSteamID steamIDGameServer)
		{
		}

		[Token(Token = "0x6000537")]
		[Address(RVA = "0x1EC9310", Offset = "0x1EC9310", VA = "0x1EC9310")]
		public static bool GetLobbyGameServer(CSteamID steamIDLobby, out uint punGameServerIP, out ushort punGameServerPort, out CSteamID psteamIDGameServer)
		{
			return default(bool);
		}

		[Token(Token = "0x6000538")]
		[Address(RVA = "0x1EC935C", Offset = "0x1EC935C", VA = "0x1EC935C")]
		public static bool SetLobbyMemberLimit(CSteamID steamIDLobby, int cMaxMembers)
		{
			return default(bool);
		}

		[Token(Token = "0x6000539")]
		[Address(RVA = "0x1EC9390", Offset = "0x1EC9390", VA = "0x1EC9390")]
		public static int GetLobbyMemberLimit(CSteamID steamIDLobby)
		{
			return default(int);
		}

		[Token(Token = "0x600053A")]
		[Address(RVA = "0x1EC93BC", Offset = "0x1EC93BC", VA = "0x1EC93BC")]
		public static bool SetLobbyType(CSteamID steamIDLobby, ELobbyType eLobbyType)
		{
			return default(bool);
		}

		[Token(Token = "0x600053B")]
		[Address(RVA = "0x1EC93F0", Offset = "0x1EC93F0", VA = "0x1EC93F0")]
		public static bool SetLobbyJoinable(CSteamID steamIDLobby, bool bLobbyJoinable)
		{
			return default(bool);
		}

		[Token(Token = "0x600053C")]
		[Address(RVA = "0x1EC9424", Offset = "0x1EC9424", VA = "0x1EC9424")]
		public static CSteamID GetLobbyOwner(CSteamID steamIDLobby)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x600053D")]
		[Address(RVA = "0x1EC94A8", Offset = "0x1EC94A8", VA = "0x1EC94A8")]
		public static bool SetLobbyOwner(CSteamID steamIDLobby, CSteamID steamIDNewOwner)
		{
			return default(bool);
		}

		[Token(Token = "0x600053E")]
		[Address(RVA = "0x1EC94DC", Offset = "0x1EC94DC", VA = "0x1EC94DC")]
		public static bool SetLinkedLobby(CSteamID steamIDLobby, CSteamID steamIDLobbyDependent)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200008F")]
	public static class SteamMatchmakingServers
	{
		[Token(Token = "0x600053F")]
		[Address(RVA = "0x1EC9510", Offset = "0x1EC9510", VA = "0x1EC9510")]
		public static HServerListRequest RequestInternetServerList(AppId_t iApp, MatchMakingKeyValuePair_t[] ppchFilters, uint nFilters, ISteamMatchmakingServerListResponse pRequestServersResponse)
		{
			return default(HServerListRequest);
		}

		[Token(Token = "0x6000540")]
		[Address(RVA = "0x1EC95F8", Offset = "0x1EC95F8", VA = "0x1EC95F8")]
		public static HServerListRequest RequestLANServerList(AppId_t iApp, ISteamMatchmakingServerListResponse pRequestServersResponse)
		{
			return default(HServerListRequest);
		}

		[Token(Token = "0x6000541")]
		[Address(RVA = "0x1EC9698", Offset = "0x1EC9698", VA = "0x1EC9698")]
		public static HServerListRequest RequestFriendsServerList(AppId_t iApp, MatchMakingKeyValuePair_t[] ppchFilters, uint nFilters, ISteamMatchmakingServerListResponse pRequestServersResponse)
		{
			return default(HServerListRequest);
		}

		[Token(Token = "0x6000542")]
		[Address(RVA = "0x1EC9780", Offset = "0x1EC9780", VA = "0x1EC9780")]
		public static HServerListRequest RequestFavoritesServerList(AppId_t iApp, MatchMakingKeyValuePair_t[] ppchFilters, uint nFilters, ISteamMatchmakingServerListResponse pRequestServersResponse)
		{
			return default(HServerListRequest);
		}

		[Token(Token = "0x6000543")]
		[Address(RVA = "0x1EC9868", Offset = "0x1EC9868", VA = "0x1EC9868")]
		public static HServerListRequest RequestHistoryServerList(AppId_t iApp, MatchMakingKeyValuePair_t[] ppchFilters, uint nFilters, ISteamMatchmakingServerListResponse pRequestServersResponse)
		{
			return default(HServerListRequest);
		}

		[Token(Token = "0x6000544")]
		[Address(RVA = "0x1EC9950", Offset = "0x1EC9950", VA = "0x1EC9950")]
		public static HServerListRequest RequestSpectatorServerList(AppId_t iApp, MatchMakingKeyValuePair_t[] ppchFilters, uint nFilters, ISteamMatchmakingServerListResponse pRequestServersResponse)
		{
			return default(HServerListRequest);
		}

		[Token(Token = "0x6000545")]
		[Address(RVA = "0x1EC9A38", Offset = "0x1EC9A38", VA = "0x1EC9A38")]
		public static void ReleaseRequest(HServerListRequest hServerListRequest)
		{
		}

		[Token(Token = "0x6000546")]
		[Address(RVA = "0x1EC9A64", Offset = "0x1EC9A64", VA = "0x1EC9A64")]
		public static gameserveritem_t GetServerDetails(HServerListRequest hRequest, int iServer)
		{
			return null;
		}

		[Token(Token = "0x6000547")]
		[Address(RVA = "0x1EC9BC0", Offset = "0x1EC9BC0", VA = "0x1EC9BC0")]
		public static void CancelQuery(HServerListRequest hRequest)
		{
		}

		[Token(Token = "0x6000548")]
		[Address(RVA = "0x1EC9BEC", Offset = "0x1EC9BEC", VA = "0x1EC9BEC")]
		public static void RefreshQuery(HServerListRequest hRequest)
		{
		}

		[Token(Token = "0x6000549")]
		[Address(RVA = "0x1EC9C18", Offset = "0x1EC9C18", VA = "0x1EC9C18")]
		public static bool IsRefreshing(HServerListRequest hRequest)
		{
			return default(bool);
		}

		[Token(Token = "0x600054A")]
		[Address(RVA = "0x1EC9C44", Offset = "0x1EC9C44", VA = "0x1EC9C44")]
		public static int GetServerCount(HServerListRequest hRequest)
		{
			return default(int);
		}

		[Token(Token = "0x600054B")]
		[Address(RVA = "0x1EC9C70", Offset = "0x1EC9C70", VA = "0x1EC9C70")]
		public static void RefreshServer(HServerListRequest hRequest, int iServer)
		{
		}

		[Token(Token = "0x600054C")]
		[Address(RVA = "0x1EC9CA4", Offset = "0x1EC9CA4", VA = "0x1EC9CA4")]
		public static HServerQuery PingServer(uint unIP, ushort usPort, ISteamMatchmakingPingResponse pRequestServersResponse)
		{
			return default(HServerQuery);
		}

		[Token(Token = "0x600054D")]
		[Address(RVA = "0x1EC9D54", Offset = "0x1EC9D54", VA = "0x1EC9D54")]
		public static HServerQuery PlayerDetails(uint unIP, ushort usPort, ISteamMatchmakingPlayersResponse pRequestServersResponse)
		{
			return default(HServerQuery);
		}

		[Token(Token = "0x600054E")]
		[Address(RVA = "0x1EC9E04", Offset = "0x1EC9E04", VA = "0x1EC9E04")]
		public static HServerQuery ServerRules(uint unIP, ushort usPort, ISteamMatchmakingRulesResponse pRequestServersResponse)
		{
			return default(HServerQuery);
		}

		[Token(Token = "0x600054F")]
		[Address(RVA = "0x1EC9EB4", Offset = "0x1EC9EB4", VA = "0x1EC9EB4")]
		public static void CancelServerQuery(HServerQuery hServerQuery)
		{
		}
	}
	[Token(Token = "0x2000090")]
	public static class SteamMusic
	{
		[Token(Token = "0x6000550")]
		[Address(RVA = "0x1EC9EE0", Offset = "0x1EC9EE0", VA = "0x1EC9EE0")]
		public static bool BIsEnabled()
		{
			return default(bool);
		}

		[Token(Token = "0x6000551")]
		[Address(RVA = "0x1EC9EFC", Offset = "0x1EC9EFC", VA = "0x1EC9EFC")]
		public static bool BIsPlaying()
		{
			return default(bool);
		}

		[Token(Token = "0x6000552")]
		[Address(RVA = "0x1EC9F18", Offset = "0x1EC9F18", VA = "0x1EC9F18")]
		public static AudioPlayback_Status GetPlaybackStatus()
		{
			return default(AudioPlayback_Status);
		}

		[Token(Token = "0x6000553")]
		[Address(RVA = "0x1EC9F34", Offset = "0x1EC9F34", VA = "0x1EC9F34")]
		public static void Play()
		{
		}

		[Token(Token = "0x6000554")]
		[Address(RVA = "0x1EC9F50", Offset = "0x1EC9F50", VA = "0x1EC9F50")]
		public static void Pause()
		{
		}

		[Token(Token = "0x6000555")]
		[Address(RVA = "0x1EC9F6C", Offset = "0x1EC9F6C", VA = "0x1EC9F6C")]
		public static void PlayPrevious()
		{
		}

		[Token(Token = "0x6000556")]
		[Address(RVA = "0x1EC9F88", Offset = "0x1EC9F88", VA = "0x1EC9F88")]
		public static void PlayNext()
		{
		}

		[Token(Token = "0x6000557")]
		[Address(RVA = "0x1EC9FA4", Offset = "0x1EC9FA4", VA = "0x1EC9FA4")]
		public static void SetVolume(float flVolume)
		{
		}

		[Token(Token = "0x6000558")]
		[Address(RVA = "0x1EC9FD0", Offset = "0x1EC9FD0", VA = "0x1EC9FD0")]
		public static float GetVolume()
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000091")]
	public static class SteamMusicRemote
	{
		[Token(Token = "0x6000559")]
		[Address(RVA = "0x1EC9FEC", Offset = "0x1EC9FEC", VA = "0x1EC9FEC")]
		public static bool RegisterSteamMusicRemote(string pchName)
		{
			return default(bool);
		}

		[Token(Token = "0x600055A")]
		[Address(RVA = "0x1ECA118", Offset = "0x1ECA118", VA = "0x1ECA118")]
		public static bool DeregisterSteamMusicRemote()
		{
			return default(bool);
		}

		[Token(Token = "0x600055B")]
		[Address(RVA = "0x1ECA134", Offset = "0x1ECA134", VA = "0x1ECA134")]
		public static bool BIsCurrentMusicRemote()
		{
			return default(bool);
		}

		[Token(Token = "0x600055C")]
		[Address(RVA = "0x1ECA150", Offset = "0x1ECA150", VA = "0x1ECA150")]
		public static bool BActivationSuccess(bool bValue)
		{
			return default(bool);
		}

		[Token(Token = "0x600055D")]
		[Address(RVA = "0x1ECA17C", Offset = "0x1ECA17C", VA = "0x1ECA17C")]
		public static bool SetDisplayName(string pchDisplayName)
		{
			return default(bool);
		}

		[Token(Token = "0x600055E")]
		[Address(RVA = "0x1ECA2A8", Offset = "0x1ECA2A8", VA = "0x1ECA2A8")]
		public static bool SetPNGIcon_64x64(byte[] pvBuffer, uint cbBufferLength)
		{
			return default(bool);
		}

		[Token(Token = "0x600055F")]
		[Address(RVA = "0x1ECA2DC", Offset = "0x1ECA2DC", VA = "0x1ECA2DC")]
		public static bool EnablePlayPrevious(bool bValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000560")]
		[Address(RVA = "0x1ECA308", Offset = "0x1ECA308", VA = "0x1ECA308")]
		public static bool EnablePlayNext(bool bValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000561")]
		[Address(RVA = "0x1ECA334", Offset = "0x1ECA334", VA = "0x1ECA334")]
		public static bool EnableShuffled(bool bValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000562")]
		[Address(RVA = "0x1ECA360", Offset = "0x1ECA360", VA = "0x1ECA360")]
		public static bool EnableLooped(bool bValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000563")]
		[Address(RVA = "0x1ECA38C", Offset = "0x1ECA38C", VA = "0x1ECA38C")]
		public static bool EnableQueue(bool bValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000564")]
		[Address(RVA = "0x1ECA3B8", Offset = "0x1ECA3B8", VA = "0x1ECA3B8")]
		public static bool EnablePlaylists(bool bValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000565")]
		[Address(RVA = "0x1ECA3E4", Offset = "0x1ECA3E4", VA = "0x1ECA3E4")]
		public static bool UpdatePlaybackStatus(AudioPlayback_Status nStatus)
		{
			return default(bool);
		}

		[Token(Token = "0x6000566")]
		[Address(RVA = "0x1ECA410", Offset = "0x1ECA410", VA = "0x1ECA410")]
		public static bool UpdateShuffled(bool bValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000567")]
		[Address(RVA = "0x1ECA43C", Offset = "0x1ECA43C", VA = "0x1ECA43C")]
		public static bool UpdateLooped(bool bValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000568")]
		[Address(RVA = "0x1ECA468", Offset = "0x1ECA468", VA = "0x1ECA468")]
		public static bool UpdateVolume(float flValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000569")]
		[Address(RVA = "0x1ECA494", Offset = "0x1ECA494", VA = "0x1ECA494")]
		public static bool CurrentEntryWillChange()
		{
			return default(bool);
		}

		[Token(Token = "0x600056A")]
		[Address(RVA = "0x1ECA4B0", Offset = "0x1ECA4B0", VA = "0x1ECA4B0")]
		public static bool CurrentEntryIsAvailable(bool bAvailable)
		{
			return default(bool);
		}

		[Token(Token = "0x600056B")]
		[Address(RVA = "0x1ECA4DC", Offset = "0x1ECA4DC", VA = "0x1ECA4DC")]
		public static bool UpdateCurrentEntryText(string pchText)
		{
			return default(bool);
		}

		[Token(Token = "0x600056C")]
		[Address(RVA = "0x1ECA608", Offset = "0x1ECA608", VA = "0x1ECA608")]
		public static bool UpdateCurrentEntryElapsedSeconds(int nValue)
		{
			return default(bool);
		}

		[Token(Token = "0x600056D")]
		[Address(RVA = "0x1ECA634", Offset = "0x1ECA634", VA = "0x1ECA634")]
		public static bool UpdateCurrentEntryCoverArt(byte[] pvBuffer, uint cbBufferLength)
		{
			return default(bool);
		}

		[Token(Token = "0x600056E")]
		[Address(RVA = "0x1ECA668", Offset = "0x1ECA668", VA = "0x1ECA668")]
		public static bool CurrentEntryDidChange()
		{
			return default(bool);
		}

		[Token(Token = "0x600056F")]
		[Address(RVA = "0x1ECA684", Offset = "0x1ECA684", VA = "0x1ECA684")]
		public static bool QueueWillChange()
		{
			return default(bool);
		}

		[Token(Token = "0x6000570")]
		[Address(RVA = "0x1ECA6A0", Offset = "0x1ECA6A0", VA = "0x1ECA6A0")]
		public static bool ResetQueueEntries()
		{
			return default(bool);
		}

		[Token(Token = "0x6000571")]
		[Address(RVA = "0x1ECA6BC", Offset = "0x1ECA6BC", VA = "0x1ECA6BC")]
		public static bool SetQueueEntry(int nID, int nPosition, string pchEntryText)
		{
			return default(bool);
		}

		[Token(Token = "0x6000572")]
		[Address(RVA = "0x1ECA7F8", Offset = "0x1ECA7F8", VA = "0x1ECA7F8")]
		public static bool SetCurrentQueueEntry(int nID)
		{
			return default(bool);
		}

		[Token(Token = "0x6000573")]
		[Address(RVA = "0x1ECA824", Offset = "0x1ECA824", VA = "0x1ECA824")]
		public static bool QueueDidChange()
		{
			return default(bool);
		}

		[Token(Token = "0x6000574")]
		[Address(RVA = "0x1ECA840", Offset = "0x1ECA840", VA = "0x1ECA840")]
		public static bool PlaylistWillChange()
		{
			return default(bool);
		}

		[Token(Token = "0x6000575")]
		[Address(RVA = "0x1ECA85C", Offset = "0x1ECA85C", VA = "0x1ECA85C")]
		public static bool ResetPlaylistEntries()
		{
			return default(bool);
		}

		[Token(Token = "0x6000576")]
		[Address(RVA = "0x1ECA878", Offset = "0x1ECA878", VA = "0x1ECA878")]
		public static bool SetPlaylistEntry(int nID, int nPosition, string pchEntryText)
		{
			return default(bool);
		}

		[Token(Token = "0x6000577")]
		[Address(RVA = "0x1ECA9B4", Offset = "0x1ECA9B4", VA = "0x1ECA9B4")]
		public static bool SetCurrentPlaylistEntry(int nID)
		{
			return default(bool);
		}

		[Token(Token = "0x6000578")]
		[Address(RVA = "0x1ECA9E0", Offset = "0x1ECA9E0", VA = "0x1ECA9E0")]
		public static bool PlaylistDidChange()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000092")]
	public static class SteamNetworking
	{
		[Token(Token = "0x6000579")]
		[Address(RVA = "0x1ECA9FC", Offset = "0x1ECA9FC", VA = "0x1ECA9FC")]
		public static bool SendP2PPacket(CSteamID steamIDRemote, byte[] pubData, uint cubData, EP2PSend eP2PSendType, int nChannel = 0)
		{
			return default(bool);
		}

		[Token(Token = "0x600057A")]
		[Address(RVA = "0x1ECAA58", Offset = "0x1ECAA58", VA = "0x1ECAA58")]
		public static bool IsP2PPacketAvailable(out uint pcubMsgSize, int nChannel = 0)
		{
			return default(bool);
		}

		[Token(Token = "0x600057B")]
		[Address(RVA = "0x1ECAA8C", Offset = "0x1ECAA8C", VA = "0x1ECAA8C")]
		public static bool ReadP2PPacket(byte[] pubDest, uint cubDest, out uint pcubMsgSize, out CSteamID psteamIDRemote, int nChannel = 0)
		{
			return default(bool);
		}

		[Token(Token = "0x600057C")]
		[Address(RVA = "0x1ECAAE8", Offset = "0x1ECAAE8", VA = "0x1ECAAE8")]
		public static bool AcceptP2PSessionWithUser(CSteamID steamIDRemote)
		{
			return default(bool);
		}

		[Token(Token = "0x600057D")]
		[Address(RVA = "0x1ECAB14", Offset = "0x1ECAB14", VA = "0x1ECAB14")]
		public static bool CloseP2PSessionWithUser(CSteamID steamIDRemote)
		{
			return default(bool);
		}

		[Token(Token = "0x600057E")]
		[Address(RVA = "0x1ECAB40", Offset = "0x1ECAB40", VA = "0x1ECAB40")]
		public static bool CloseP2PChannelWithUser(CSteamID steamIDRemote, int nChannel)
		{
			return default(bool);
		}

		[Token(Token = "0x600057F")]
		[Address(RVA = "0x1ECAB74", Offset = "0x1ECAB74", VA = "0x1ECAB74")]
		public static bool GetP2PSessionState(CSteamID steamIDRemote, out P2PSessionState_t pConnectionState)
		{
			return default(bool);
		}

		[Token(Token = "0x6000580")]
		[Address(RVA = "0x1ECABA8", Offset = "0x1ECABA8", VA = "0x1ECABA8")]
		public static bool AllowP2PPacketRelay(bool bAllow)
		{
			return default(bool);
		}

		[Token(Token = "0x6000581")]
		[Address(RVA = "0x1ECABD4", Offset = "0x1ECABD4", VA = "0x1ECABD4")]
		public static SNetListenSocket_t CreateListenSocket(int nVirtualP2PPort, uint nIP, ushort nPort, bool bAllowUseOfPacketRelay)
		{
			return default(SNetListenSocket_t);
		}

		[Token(Token = "0x6000582")]
		[Address(RVA = "0x1ECAC28", Offset = "0x1ECAC28", VA = "0x1ECAC28")]
		public static SNetSocket_t CreateP2PConnectionSocket(CSteamID steamIDTarget, int nVirtualPort, int nTimeoutSec, bool bAllowUseOfPacketRelay)
		{
			return default(SNetSocket_t);
		}

		[Token(Token = "0x6000583")]
		[Address(RVA = "0x1ECAC7C", Offset = "0x1ECAC7C", VA = "0x1ECAC7C")]
		public static SNetSocket_t CreateConnectionSocket(uint nIP, ushort nPort, int nTimeoutSec)
		{
			return default(SNetSocket_t);
		}

		[Token(Token = "0x6000584")]
		[Address(RVA = "0x1ECACC8", Offset = "0x1ECACC8", VA = "0x1ECACC8")]
		public static bool DestroySocket(SNetSocket_t hSocket, bool bNotifyRemoteEnd)
		{
			return default(bool);
		}

		[Token(Token = "0x6000585")]
		[Address(RVA = "0x1ECACFC", Offset = "0x1ECACFC", VA = "0x1ECACFC")]
		public static bool DestroyListenSocket(SNetListenSocket_t hSocket, bool bNotifyRemoteEnd)
		{
			return default(bool);
		}

		[Token(Token = "0x6000586")]
		[Address(RVA = "0x1ECAD30", Offset = "0x1ECAD30", VA = "0x1ECAD30")]
		public static bool SendDataOnSocket(SNetSocket_t hSocket, IntPtr pubData, uint cubData, bool bReliable)
		{
			return default(bool);
		}

		[Token(Token = "0x6000587")]
		[Address(RVA = "0x1ECAD7C", Offset = "0x1ECAD7C", VA = "0x1ECAD7C")]
		public static bool IsDataAvailableOnSocket(SNetSocket_t hSocket, out uint pcubMsgSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000588")]
		[Address(RVA = "0x1ECADB0", Offset = "0x1ECADB0", VA = "0x1ECADB0")]
		public static bool RetrieveDataFromSocket(SNetSocket_t hSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000589")]
		[Address(RVA = "0x1ECADFC", Offset = "0x1ECADFC", VA = "0x1ECADFC")]
		public static bool IsDataAvailable(SNetListenSocket_t hListenSocket, out uint pcubMsgSize, out SNetSocket_t phSocket)
		{
			return default(bool);
		}

		[Token(Token = "0x600058A")]
		[Address(RVA = "0x1ECAE40", Offset = "0x1ECAE40", VA = "0x1ECAE40")]
		public static bool RetrieveData(SNetListenSocket_t hListenSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize, out SNetSocket_t phSocket)
		{
			return default(bool);
		}

		[Token(Token = "0x600058B")]
		[Address(RVA = "0x1ECAE9C", Offset = "0x1ECAE9C", VA = "0x1ECAE9C")]
		public static bool GetSocketInfo(SNetSocket_t hSocket, out CSteamID pSteamIDRemote, out int peSocketStatus, out uint punIPRemote, out ushort punPortRemote)
		{
			return default(bool);
		}

		[Token(Token = "0x600058C")]
		[Address(RVA = "0x1ECAEF8", Offset = "0x1ECAEF8", VA = "0x1ECAEF8")]
		public static bool GetListenSocketInfo(SNetListenSocket_t hListenSocket, out uint pnIP, out ushort pnPort)
		{
			return default(bool);
		}

		[Token(Token = "0x600058D")]
		[Address(RVA = "0x1ECAF3C", Offset = "0x1ECAF3C", VA = "0x1ECAF3C")]
		public static ESNetSocketConnectionType GetSocketConnectionType(SNetSocket_t hSocket)
		{
			return default(ESNetSocketConnectionType);
		}

		[Token(Token = "0x600058E")]
		[Address(RVA = "0x1ECAF68", Offset = "0x1ECAF68", VA = "0x1ECAF68")]
		public static int GetMaxPacketSize(SNetSocket_t hSocket)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000093")]
	public static class SteamRemoteStorage
	{
		[Token(Token = "0x600058F")]
		[Address(RVA = "0x1ECAF94", Offset = "0x1ECAF94", VA = "0x1ECAF94")]
		public static bool FileWrite(string pchFile, byte[] pvData, int cubData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000590")]
		[Address(RVA = "0x1ECB0D0", Offset = "0x1ECB0D0", VA = "0x1ECB0D0")]
		public static int FileRead(string pchFile, byte[] pvData, int cubDataToRead)
		{
			return default(int);
		}

		[Token(Token = "0x6000591")]
		[Address(RVA = "0x1ECB20C", Offset = "0x1ECB20C", VA = "0x1ECB20C")]
		public static bool FileForget(string pchFile)
		{
			return default(bool);
		}

		[Token(Token = "0x6000592")]
		[Address(RVA = "0x1ECB338", Offset = "0x1ECB338", VA = "0x1ECB338")]
		public static bool FileDelete(string pchFile)
		{
			return default(bool);
		}

		[Token(Token = "0x6000593")]
		[Address(RVA = "0x1ECB464", Offset = "0x1ECB464", VA = "0x1ECB464")]
		public static SteamAPICall_t FileShare(string pchFile)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000594")]
		[Address(RVA = "0x1ECB5B4", Offset = "0x1ECB5B4", VA = "0x1ECB5B4")]
		public static bool SetSyncPlatforms(string pchFile, ERemoteStoragePlatform eRemoteStoragePlatform)
		{
			return default(bool);
		}

		[Token(Token = "0x6000595")]
		[Address(RVA = "0x1ECB6E8", Offset = "0x1ECB6E8", VA = "0x1ECB6E8")]
		public static UGCFileWriteStreamHandle_t FileWriteStreamOpen(string pchFile)
		{
			return default(UGCFileWriteStreamHandle_t);
		}

		[Token(Token = "0x6000596")]
		[Address(RVA = "0x1ECB848", Offset = "0x1ECB848", VA = "0x1ECB848")]
		public static bool FileWriteStreamWriteChunk(UGCFileWriteStreamHandle_t writeHandle, byte[] pvData, int cubData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000597")]
		[Address(RVA = "0x1ECB88C", Offset = "0x1ECB88C", VA = "0x1ECB88C")]
		public static bool FileWriteStreamClose(UGCFileWriteStreamHandle_t writeHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x6000598")]
		[Address(RVA = "0x1ECB8B8", Offset = "0x1ECB8B8", VA = "0x1ECB8B8")]
		public static bool FileWriteStreamCancel(UGCFileWriteStreamHandle_t writeHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x6000599")]
		[Address(RVA = "0x1ECB8E4", Offset = "0x1ECB8E4", VA = "0x1ECB8E4")]
		public static bool FileExists(string pchFile)
		{
			return default(bool);
		}

		[Token(Token = "0x600059A")]
		[Address(RVA = "0x1ECBA10", Offset = "0x1ECBA10", VA = "0x1ECBA10")]
		public static bool FilePersisted(string pchFile)
		{
			return default(bool);
		}

		[Token(Token = "0x600059B")]
		[Address(RVA = "0x1ECBB3C", Offset = "0x1ECBB3C", VA = "0x1ECBB3C")]
		public static int GetFileSize(string pchFile)
		{
			return default(int);
		}

		[Token(Token = "0x600059C")]
		[Address(RVA = "0x1ECBC68", Offset = "0x1ECBC68", VA = "0x1ECBC68")]
		public static long GetFileTimestamp(string pchFile)
		{
			return default(long);
		}

		[Token(Token = "0x600059D")]
		[Address(RVA = "0x1ECBD94", Offset = "0x1ECBD94", VA = "0x1ECBD94")]
		public static ERemoteStoragePlatform GetSyncPlatforms(string pchFile)
		{
			return default(ERemoteStoragePlatform);
		}

		[Token(Token = "0x600059E")]
		[Address(RVA = "0x1ECBEC0", Offset = "0x1ECBEC0", VA = "0x1ECBEC0")]
		public static int GetFileCount()
		{
			return default(int);
		}

		[Token(Token = "0x600059F")]
		[Address(RVA = "0x1ECBEDC", Offset = "0x1ECBEDC", VA = "0x1ECBEDC")]
		public static string GetFileNameAndSize(int iFile, out int pnFileSizeInBytes)
		{
			return null;
		}

		[Token(Token = "0x60005A0")]
		[Address(RVA = "0x1ECBF18", Offset = "0x1ECBF18", VA = "0x1ECBF18")]
		public static bool GetQuota(out int pnTotalBytes, out int puAvailableBytes)
		{
			return default(bool);
		}

		[Token(Token = "0x60005A1")]
		[Address(RVA = "0x1ECBF4C", Offset = "0x1ECBF4C", VA = "0x1ECBF4C")]
		public static bool IsCloudEnabledForAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x60005A2")]
		[Address(RVA = "0x1ECBF68", Offset = "0x1ECBF68", VA = "0x1ECBF68")]
		public static bool IsCloudEnabledForApp()
		{
			return default(bool);
		}

		[Token(Token = "0x60005A3")]
		[Address(RVA = "0x1ECBF84", Offset = "0x1ECBF84", VA = "0x1ECBF84")]
		public static void SetCloudEnabledForApp(bool bEnabled)
		{
		}

		[Token(Token = "0x60005A4")]
		[Address(RVA = "0x1ECBFB0", Offset = "0x1ECBFB0", VA = "0x1ECBFB0")]
		public static SteamAPICall_t UGCDownload(UGCHandle_t hContent, uint unPriority)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60005A5")]
		[Address(RVA = "0x1ECC040", Offset = "0x1ECC040", VA = "0x1ECC040")]
		public static bool GetUGCDownloadProgress(UGCHandle_t hContent, out int pnBytesDownloaded, out int pnBytesExpected)
		{
			return default(bool);
		}

		[Token(Token = "0x60005A6")]
		[Address(RVA = "0x1ECC084", Offset = "0x1ECC084", VA = "0x1ECC084")]
		public static bool GetUGCDetails(UGCHandle_t hContent, out AppId_t pnAppID, out string ppchName, out int pnFileSizeInBytes, out CSteamID pSteamIDOwner)
		{
			return default(bool);
		}

		[Token(Token = "0x60005A7")]
		[Address(RVA = "0x1ECC10C", Offset = "0x1ECC10C", VA = "0x1ECC10C")]
		public static int UGCRead(UGCHandle_t hContent, byte[] pvData, int cubDataToRead, uint cOffset, EUGCReadAction eAction)
		{
			return default(int);
		}

		[Token(Token = "0x60005A8")]
		[Address(RVA = "0x1ECC168", Offset = "0x1ECC168", VA = "0x1ECC168")]
		public static int GetCachedUGCCount()
		{
			return default(int);
		}

		[Token(Token = "0x60005A9")]
		[Address(RVA = "0x1ECC184", Offset = "0x1ECC184", VA = "0x1ECC184")]
		public static UGCHandle_t GetCachedUGCHandle(int iCachedContent)
		{
			return default(UGCHandle_t);
		}

		[Token(Token = "0x60005AA")]
		[Address(RVA = "0x1ECC208", Offset = "0x1ECC208", VA = "0x1ECC208")]
		public static SteamAPICall_t PublishWorkshopFile(string pchFile, string pchPreviewFile, AppId_t nConsumerAppId, string pchTitle, string pchDescription, ERemoteStoragePublishedFileVisibility eVisibility, IList<string> pTags, EWorkshopFileType eWorkshopFileType)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60005AB")]
		[Address(RVA = "0x1ECC6A4", Offset = "0x1ECC6A4", VA = "0x1ECC6A4")]
		public static PublishedFileUpdateHandle_t CreatePublishedFileUpdateRequest(PublishedFileId_t unPublishedFileId)
		{
			return default(PublishedFileUpdateHandle_t);
		}

		[Token(Token = "0x60005AC")]
		[Address(RVA = "0x1ECC724", Offset = "0x1ECC724", VA = "0x1ECC724")]
		public static bool UpdatePublishedFileFile(PublishedFileUpdateHandle_t updateHandle, string pchFile)
		{
			return default(bool);
		}

		[Token(Token = "0x60005AD")]
		[Address(RVA = "0x1ECC858", Offset = "0x1ECC858", VA = "0x1ECC858")]
		public static bool UpdatePublishedFilePreviewFile(PublishedFileUpdateHandle_t updateHandle, string pchPreviewFile)
		{
			return default(bool);
		}

		[Token(Token = "0x60005AE")]
		[Address(RVA = "0x1ECC98C", Offset = "0x1ECC98C", VA = "0x1ECC98C")]
		public static bool UpdatePublishedFileTitle(PublishedFileUpdateHandle_t updateHandle, string pchTitle)
		{
			return default(bool);
		}

		[Token(Token = "0x60005AF")]
		[Address(RVA = "0x1ECCAC0", Offset = "0x1ECCAC0", VA = "0x1ECCAC0")]
		public static bool UpdatePublishedFileDescription(PublishedFileUpdateHandle_t updateHandle, string pchDescription)
		{
			return default(bool);
		}

		[Token(Token = "0x60005B0")]
		[Address(RVA = "0x1ECCBF4", Offset = "0x1ECCBF4", VA = "0x1ECCBF4")]
		public static bool UpdatePublishedFileVisibility(PublishedFileUpdateHandle_t updateHandle, ERemoteStoragePublishedFileVisibility eVisibility)
		{
			return default(bool);
		}

		[Token(Token = "0x60005B1")]
		[Address(RVA = "0x1ECCC28", Offset = "0x1ECCC28", VA = "0x1ECCC28")]
		public static bool UpdatePublishedFileTags(PublishedFileUpdateHandle_t updateHandle, IList<string> pTags)
		{
			return default(bool);
		}

		[Token(Token = "0x60005B2")]
		[Address(RVA = "0x1ECCCB4", Offset = "0x1ECCCB4", VA = "0x1ECCCB4")]
		public static SteamAPICall_t CommitPublishedFileUpdate(PublishedFileUpdateHandle_t updateHandle)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60005B3")]
		[Address(RVA = "0x1ECCD34", Offset = "0x1ECCD34", VA = "0x1ECCD34")]
		public static SteamAPICall_t GetPublishedFileDetails(PublishedFileId_t unPublishedFileId, uint unMaxSecondsOld)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60005B4")]
		[Address(RVA = "0x1ECCDC4", Offset = "0x1ECCDC4", VA = "0x1ECCDC4")]
		public static SteamAPICall_t DeletePublishedFile(PublishedFileId_t unPublishedFileId)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60005B5")]
		[Address(RVA = "0x1ECCE44", Offset = "0x1ECCE44", VA = "0x1ECCE44")]
		public static SteamAPICall_t EnumerateUserPublishedFiles(uint unStartIndex)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60005B6")]
		[Address(RVA = "0x1ECCEC4", Offset = "0x1ECCEC4", VA = "0x1ECCEC4")]
		public static SteamAPICall_t SubscribePublishedFile(PublishedFileId_t unPublishedFileId)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60005B7")]
		[Address(RVA = "0x1ECCF44", Offset = "0x1ECCF44", VA = "0x1ECCF44")]
		public static SteamAPICall_t EnumerateUserSubscribedFiles(uint unStartIndex)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60005B8")]
		[Address(RVA = "0x1ECCFC4", Offset = "0x1ECCFC4", VA = "0x1ECCFC4")]
		public static SteamAPICall_t UnsubscribePublishedFile(PublishedFileId_t unPublishedFileId)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60005B9")]
		[Address(RVA = "0x1ECD044", Offset = "0x1ECD044", VA = "0x1ECD044")]
		public static bool UpdatePublishedFileSetChangeDescription(PublishedFileUpdateHandle_t updateHandle, string pchChangeDescription)
		{
			return default(bool);
		}

		[Token(Token = "0x60005BA")]
		[Address(RVA = "0x1ECD178", Offset = "0x1ECD178", VA = "0x1ECD178")]
		public static SteamAPICall_t GetPublishedItemVoteDetails(PublishedFileId_t unPublishedFileId)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60005BB")]
		[Address(RVA = "0x1ECD1F8", Offset = "0x1ECD1F8", VA = "0x1ECD1F8")]
		public static SteamAPICall_t UpdateUserPublishedItemVote(PublishedFileId_t unPublishedFileId, bool bVoteUp)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60005BC")]
		[Address(RVA = "0x1ECD288", Offset = "0x1ECD288", VA = "0x1ECD288")]
		public static SteamAPICall_t GetUserPublishedItemVoteDetails(PublishedFileId_t unPublishedFileId)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60005BD")]
		[Address(RVA = "0x1ECD308", Offset = "0x1ECD308", VA = "0x1ECD308")]
		public static SteamAPICall_t EnumerateUserSharedWorkshopFiles(CSteamID steamId, uint unStartIndex, IList<string> pRequiredTags, IList<string> pExcludedTags)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60005BE")]
		[Address(RVA = "0x1ECD408", Offset = "0x1ECD408", VA = "0x1ECD408")]
		public static SteamAPICall_t PublishVideo(EWorkshopVideoProvider eVideoProvider, string pchVideoAccount, string pchVideoIdentifier, string pchPreviewFile, AppId_t nConsumerAppId, string pchTitle, string pchDescription, ERemoteStoragePublishedFileVisibility eVisibility, IList<string> pTags)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60005BF")]
		[Address(RVA = "0x1ECD988", Offset = "0x1ECD988", VA = "0x1ECD988")]
		public static SteamAPICall_t SetUserPublishedFileAction(PublishedFileId_t unPublishedFileId, EWorkshopFileAction eAction)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60005C0")]
		[Address(RVA = "0x1ECDA18", Offset = "0x1ECDA18", VA = "0x1ECDA18")]
		public static SteamAPICall_t EnumeratePublishedFilesByUserAction(EWorkshopFileAction eAction, uint unStartIndex)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60005C1")]
		[Address(RVA = "0x1ECDAA8", Offset = "0x1ECDAA8", VA = "0x1ECDAA8")]
		public static SteamAPICall_t EnumeratePublishedWorkshopFiles(EWorkshopEnumerationType eEnumerationType, uint unStartIndex, uint unCount, uint unDays, IList<string> pTags, IList<string> pUserTags)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60005C2")]
		[Address(RVA = "0x1ECDBC0", Offset = "0x1ECDBC0", VA = "0x1ECDBC0")]
		public static SteamAPICall_t UGCDownloadToLocation(UGCHandle_t hContent, string pchLocation, uint unPriority)
		{
			return default(SteamAPICall_t);
		}
	}
	[Token(Token = "0x2000094")]
	public static class SteamScreenshots
	{
		[Token(Token = "0x60005C3")]
		[Address(RVA = "0x1E19488", Offset = "0x1E19488", VA = "0x1E19488")]
		public static ScreenshotHandle WriteScreenshot(byte[] pubRGB, uint cubRGB, int nWidth, int nHeight)
		{
			return default(ScreenshotHandle);
		}

		[Token(Token = "0x60005C4")]
		[Address(RVA = "0x1E1953C", Offset = "0x1E1953C", VA = "0x1E1953C")]
		public static ScreenshotHandle AddScreenshotToLibrary(string pchFilename, string pchThumbnailFilename, int nWidth, int nHeight)
		{
			return default(ScreenshotHandle);
		}

		[Token(Token = "0x60005C5")]
		[Address(RVA = "0x1E197B0", Offset = "0x1E197B0", VA = "0x1E197B0")]
		public static void TriggerScreenshot()
		{
		}

		[Token(Token = "0x60005C6")]
		[Address(RVA = "0x1E197CC", Offset = "0x1E197CC", VA = "0x1E197CC")]
		public static void HookScreenshots(bool bHook)
		{
		}

		[Token(Token = "0x60005C7")]
		[Address(RVA = "0x1E197F8", Offset = "0x1E197F8", VA = "0x1E197F8")]
		public static bool SetLocation(ScreenshotHandle hScreenshot, string pchLocation)
		{
			return default(bool);
		}

		[Token(Token = "0x60005C8")]
		[Address(RVA = "0x1E1992C", Offset = "0x1E1992C", VA = "0x1E1992C")]
		public static bool TagUser(ScreenshotHandle hScreenshot, CSteamID steamID)
		{
			return default(bool);
		}

		[Token(Token = "0x60005C9")]
		[Address(RVA = "0x1E19960", Offset = "0x1E19960", VA = "0x1E19960")]
		public static bool TagPublishedFile(ScreenshotHandle hScreenshot, PublishedFileId_t unPublishedFileID)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000095")]
	public static class SteamUGC
	{
		[Token(Token = "0x60005CA")]
		[Address(RVA = "0x1E19994", Offset = "0x1E19994", VA = "0x1E19994")]
		public static UGCQueryHandle_t CreateQueryUserUGCRequest(AccountID_t unAccountID, EUserUGCList eListType, EUGCMatchingUGCType eMatchingUGCType, EUserUGCListSortOrder eSortOrder, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint unPage)
		{
			return default(UGCQueryHandle_t);
		}

		[Token(Token = "0x60005CB")]
		[Address(RVA = "0x1E19A60", Offset = "0x1E19A60", VA = "0x1E19A60")]
		public static UGCQueryHandle_t CreateQueryAllUGCRequest(EUGCQuery eQueryType, EUGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint unPage)
		{
			return default(UGCQueryHandle_t);
		}

		[Token(Token = "0x60005CC")]
		[Address(RVA = "0x1E19B10", Offset = "0x1E19B10", VA = "0x1E19B10")]
		public static UGCQueryHandle_t CreateQueryUGCDetailsRequest(PublishedFileId_t[] pvecPublishedFileID, uint unNumPublishedFileIDs)
		{
			return default(UGCQueryHandle_t);
		}

		[Token(Token = "0x60005CD")]
		[Address(RVA = "0x1E19BA0", Offset = "0x1E19BA0", VA = "0x1E19BA0")]
		public static SteamAPICall_t SendQueryUGCRequest(UGCQueryHandle_t handle)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60005CE")]
		[Address(RVA = "0x1E19C24", Offset = "0x1E19C24", VA = "0x1E19C24")]
		public static bool GetQueryUGCResult(UGCQueryHandle_t handle, uint index, out SteamUGCDetails_t pDetails)
		{
			return default(bool);
		}

		[Token(Token = "0x60005CF")]
		[Address(RVA = "0x1E19C68", Offset = "0x1E19C68", VA = "0x1E19C68")]
		public static bool GetQueryUGCPreviewURL(UGCQueryHandle_t handle, uint index, out string pchURL, uint cchURLSize)
		{
			return default(bool);
		}

		[Token(Token = "0x60005D0")]
		[Address(RVA = "0x1E19D58", Offset = "0x1E19D58", VA = "0x1E19D58")]
		public static bool GetQueryUGCMetadata(UGCQueryHandle_t handle, uint index, out string pchMetadata, uint cchMetadatasize)
		{
			return default(bool);
		}

		[Token(Token = "0x60005D1")]
		[Address(RVA = "0x1E19E48", Offset = "0x1E19E48", VA = "0x1E19E48")]
		public static bool GetQueryUGCChildren(UGCQueryHandle_t handle, uint index, PublishedFileId_t[] pvecPublishedFileID, uint cMaxEntries)
		{
			return default(bool);
		}

		[Token(Token = "0x60005D2")]
		[Address(RVA = "0x1E19E94", Offset = "0x1E19E94", VA = "0x1E19E94")]
		public static bool GetQueryUGCStatistic(UGCQueryHandle_t handle, uint index, EItemStatistic eStatType, out uint pStatValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60005D3")]
		[Address(RVA = "0x1E19EE0", Offset = "0x1E19EE0", VA = "0x1E19EE0")]
		public static uint GetQueryUGCNumAdditionalPreviews(UGCQueryHandle_t handle, uint index)
		{
			return default(uint);
		}

		[Token(Token = "0x60005D4")]
		[Address(RVA = "0x1E19F14", Offset = "0x1E19F14", VA = "0x1E19F14")]
		public static bool GetQueryUGCAdditionalPreview(UGCQueryHandle_t handle, uint index, uint previewIndex, out string pchURLOrVideoID, uint cchURLSize, out bool pbIsImage)
		{
			return default(bool);
		}

		[Token(Token = "0x60005D5")]
		[Address(RVA = "0x1E1A01C", Offset = "0x1E1A01C", VA = "0x1E1A01C")]
		public static uint GetQueryUGCNumKeyValueTags(UGCQueryHandle_t handle, uint index)
		{
			return default(uint);
		}

		[Token(Token = "0x60005D6")]
		[Address(RVA = "0x1E1A050", Offset = "0x1E1A050", VA = "0x1E1A050")]
		public static bool GetQueryUGCKeyValueTag(UGCQueryHandle_t handle, uint index, uint keyValueTagIndex, out string pchKey, uint cchKeySize, out string pchValue, uint cchValueSize)
		{
			return default(bool);
		}

		[Token(Token = "0x60005D7")]
		[Address(RVA = "0x1E1A1B4", Offset = "0x1E1A1B4", VA = "0x1E1A1B4")]
		public static bool ReleaseQueryUGCRequest(UGCQueryHandle_t handle)
		{
			return default(bool);
		}

		[Token(Token = "0x60005D8")]
		[Address(RVA = "0x1E1A1E0", Offset = "0x1E1A1E0", VA = "0x1E1A1E0")]
		public static bool AddRequiredTag(UGCQueryHandle_t handle, string pTagName)
		{
			return default(bool);
		}

		[Token(Token = "0x60005D9")]
		[Address(RVA = "0x1E1A314", Offset = "0x1E1A314", VA = "0x1E1A314")]
		public static bool AddExcludedTag(UGCQueryHandle_t handle, string pTagName)
		{
			return default(bool);
		}

		[Token(Token = "0x60005DA")]
		[Address(RVA = "0x1E1A448", Offset = "0x1E1A448", VA = "0x1E1A448")]
		public static bool SetReturnKeyValueTags(UGCQueryHandle_t handle, bool bReturnKeyValueTags)
		{
			return default(bool);
		}

		[Token(Token = "0x60005DB")]
		[Address(RVA = "0x1E1A47C", Offset = "0x1E1A47C", VA = "0x1E1A47C")]
		public static bool SetReturnLongDescription(UGCQueryHandle_t handle, bool bReturnLongDescription)
		{
			return default(bool);
		}

		[Token(Token = "0x60005DC")]
		[Address(RVA = "0x1E1A4B0", Offset = "0x1E1A4B0", VA = "0x1E1A4B0")]
		public static bool SetReturnMetadata(UGCQueryHandle_t handle, bool bReturnMetadata)
		{
			return default(bool);
		}

		[Token(Token = "0x60005DD")]
		[Address(RVA = "0x1E1A4E4", Offset = "0x1E1A4E4", VA = "0x1E1A4E4")]
		public static bool SetReturnChildren(UGCQueryHandle_t handle, bool bReturnChildren)
		{
			return default(bool);
		}

		[Token(Token = "0x60005DE")]
		[Address(RVA = "0x1E1A518", Offset = "0x1E1A518", VA = "0x1E1A518")]
		public static bool SetReturnAdditionalPreviews(UGCQueryHandle_t handle, bool bReturnAdditionalPreviews)
		{
			return default(bool);
		}

		[Token(Token = "0x60005DF")]
		[Address(RVA = "0x1E1A54C", Offset = "0x1E1A54C", VA = "0x1E1A54C")]
		public static bool SetReturnTotalOnly(UGCQueryHandle_t handle, bool bReturnTotalOnly)
		{
			return default(bool);
		}

		[Token(Token = "0x60005E0")]
		[Address(RVA = "0x1E1A580", Offset = "0x1E1A580", VA = "0x1E1A580")]
		public static bool SetLanguage(UGCQueryHandle_t handle, string pchLanguage)
		{
			return default(bool);
		}

		[Token(Token = "0x60005E1")]
		[Address(RVA = "0x1E1A6B4", Offset = "0x1E1A6B4", VA = "0x1E1A6B4")]
		public static bool SetAllowCachedResponse(UGCQueryHandle_t handle, uint unMaxAgeSeconds)
		{
			return default(bool);
		}

		[Token(Token = "0x60005E2")]
		[Address(RVA = "0x1E1A6E8", Offset = "0x1E1A6E8", VA = "0x1E1A6E8")]
		public static bool SetCloudFileNameFilter(UGCQueryHandle_t handle, string pMatchCloudFileName)
		{
			return default(bool);
		}

		[Token(Token = "0x60005E3")]
		[Address(RVA = "0x1E1A81C", Offset = "0x1E1A81C", VA = "0x1E1A81C")]
		public static bool SetMatchAnyTag(UGCQueryHandle_t handle, bool bMatchAnyTag)
		{
			return default(bool);
		}

		[Token(Token = "0x60005E4")]
		[Address(RVA = "0x1E1A850", Offset = "0x1E1A850", VA = "0x1E1A850")]
		public static bool SetSearchText(UGCQueryHandle_t handle, string pSearchText)
		{
			return default(bool);
		}

		[Token(Token = "0x60005E5")]
		[Address(RVA = "0x1E1A984", Offset = "0x1E1A984", VA = "0x1E1A984")]
		public static bool SetRankedByTrendDays(UGCQueryHandle_t handle, uint unDays)
		{
			return default(bool);
		}

		[Token(Token = "0x60005E6")]
		[Address(RVA = "0x1E1A9B8", Offset = "0x1E1A9B8", VA = "0x1E1A9B8")]
		public static bool AddRequiredKeyValueTag(UGCQueryHandle_t handle, string pKey, string pValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60005E7")]
		[Address(RVA = "0x1E1ABFC", Offset = "0x1E1ABFC", VA = "0x1E1ABFC")]
		public static SteamAPICall_t RequestUGCDetails(PublishedFileId_t nPublishedFileID, uint unMaxAgeSeconds)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60005E8")]
		[Address(RVA = "0x1E1AC90", Offset = "0x1E1AC90", VA = "0x1E1AC90")]
		public static SteamAPICall_t CreateItem(AppId_t nConsumerAppId, EWorkshopFileType eFileType)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60005E9")]
		[Address(RVA = "0x1E1AD24", Offset = "0x1E1AD24", VA = "0x1E1AD24")]
		public static UGCUpdateHandle_t StartItemUpdate(AppId_t nConsumerAppId, PublishedFileId_t nPublishedFileID)
		{
			return default(UGCUpdateHandle_t);
		}

		[Token(Token = "0x60005EA")]
		[Address(RVA = "0x1E1ADB8", Offset = "0x1E1ADB8", VA = "0x1E1ADB8")]
		public static bool SetItemTitle(UGCUpdateHandle_t handle, string pchTitle)
		{
			return default(bool);
		}

		[Token(Token = "0x60005EB")]
		[Address(RVA = "0x1E1AEEC", Offset = "0x1E1AEEC", VA = "0x1E1AEEC")]
		public static bool SetItemDescription(UGCUpdateHandle_t handle, string pchDescription)
		{
			return default(bool);
		}

		[Token(Token = "0x60005EC")]
		[Address(RVA = "0x1E1B020", Offset = "0x1E1B020", VA = "0x1E1B020")]
		public static bool SetItemUpdateLanguage(UGCUpdateHandle_t handle, string pchLanguage)
		{
			return default(bool);
		}

		[Token(Token = "0x60005ED")]
		[Address(RVA = "0x1E1B154", Offset = "0x1E1B154", VA = "0x1E1B154")]
		public static bool SetItemMetadata(UGCUpdateHandle_t handle, string pchMetaData)
		{
			return default(bool);
		}

		[Token(Token = "0x60005EE")]
		[Address(RVA = "0x1E1B288", Offset = "0x1E1B288", VA = "0x1E1B288")]
		public static bool SetItemVisibility(UGCUpdateHandle_t handle, ERemoteStoragePublishedFileVisibility eVisibility)
		{
			return default(bool);
		}

		[Token(Token = "0x60005EF")]
		[Address(RVA = "0x1E1B2BC", Offset = "0x1E1B2BC", VA = "0x1E1B2BC")]
		public static bool SetItemTags(UGCUpdateHandle_t updateHandle, IList<string> pTags)
		{
			return default(bool);
		}

		[Token(Token = "0x60005F0")]
		[Address(RVA = "0x1E1B348", Offset = "0x1E1B348", VA = "0x1E1B348")]
		public static bool SetItemContent(UGCUpdateHandle_t handle, string pszContentFolder)
		{
			return default(bool);
		}

		[Token(Token = "0x60005F1")]
		[Address(RVA = "0x1E1B47C", Offset = "0x1E1B47C", VA = "0x1E1B47C")]
		public static bool SetItemPreview(UGCUpdateHandle_t handle, string pszPreviewFile)
		{
			return default(bool);
		}

		[Token(Token = "0x60005F2")]
		[Address(RVA = "0x1E1B5B0", Offset = "0x1E1B5B0", VA = "0x1E1B5B0")]
		public static bool RemoveItemKeyValueTags(UGCUpdateHandle_t handle, string pchKey)
		{
			return default(bool);
		}

		[Token(Token = "0x60005F3")]
		[Address(RVA = "0x1E1B6E4", Offset = "0x1E1B6E4", VA = "0x1E1B6E4")]
		public static bool AddItemKeyValueTag(UGCUpdateHandle_t handle, string pchKey, string pchValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60005F4")]
		[Address(RVA = "0x1E1B928", Offset = "0x1E1B928", VA = "0x1E1B928")]
		public static SteamAPICall_t SubmitItemUpdate(UGCUpdateHandle_t handle, string pchChangeNote)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60005F5")]
		[Address(RVA = "0x1E1BA90", Offset = "0x1E1BA90", VA = "0x1E1BA90")]
		public static EItemUpdateStatus GetItemUpdateProgress(UGCUpdateHandle_t handle, out ulong punBytesProcessed, out ulong punBytesTotal)
		{
			return default(EItemUpdateStatus);
		}

		[Token(Token = "0x60005F6")]
		[Address(RVA = "0x1E1BAD4", Offset = "0x1E1BAD4", VA = "0x1E1BAD4")]
		public static SteamAPICall_t SetUserItemVote(PublishedFileId_t nPublishedFileID, bool bVoteUp)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60005F7")]
		[Address(RVA = "0x1E1BB68", Offset = "0x1E1BB68", VA = "0x1E1BB68")]
		public static SteamAPICall_t GetUserItemVote(PublishedFileId_t nPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60005F8")]
		[Address(RVA = "0x1E1BBEC", Offset = "0x1E1BBEC", VA = "0x1E1BBEC")]
		public static SteamAPICall_t AddItemToFavorites(AppId_t nAppId, PublishedFileId_t nPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60005F9")]
		[Address(RVA = "0x1E1BC80", Offset = "0x1E1BC80", VA = "0x1E1BC80")]
		public static SteamAPICall_t RemoveItemFromFavorites(AppId_t nAppId, PublishedFileId_t nPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60005FA")]
		[Address(RVA = "0x1E1BD14", Offset = "0x1E1BD14", VA = "0x1E1BD14")]
		public static SteamAPICall_t SubscribeItem(PublishedFileId_t nPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60005FB")]
		[Address(RVA = "0x1E1BD98", Offset = "0x1E1BD98", VA = "0x1E1BD98")]
		public static SteamAPICall_t UnsubscribeItem(PublishedFileId_t nPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60005FC")]
		[Address(RVA = "0x1E1BE1C", Offset = "0x1E1BE1C", VA = "0x1E1BE1C")]
		public static uint GetNumSubscribedItems()
		{
			return default(uint);
		}

		[Token(Token = "0x60005FD")]
		[Address(RVA = "0x1E1BE38", Offset = "0x1E1BE38", VA = "0x1E1BE38")]
		public static uint GetSubscribedItems(PublishedFileId_t[] pvecPublishedFileID, uint cMaxEntries)
		{
			return default(uint);
		}

		[Token(Token = "0x60005FE")]
		[Address(RVA = "0x1E1BE6C", Offset = "0x1E1BE6C", VA = "0x1E1BE6C")]
		public static uint GetItemState(PublishedFileId_t nPublishedFileID)
		{
			return default(uint);
		}

		[Token(Token = "0x60005FF")]
		[Address(RVA = "0x1E1BE98", Offset = "0x1E1BE98", VA = "0x1E1BE98")]
		public static bool GetItemInstallInfo(PublishedFileId_t nPublishedFileID, out ulong punSizeOnDisk, out string pchFolder, uint cchFolderSize, out uint punTimeStamp)
		{
			return default(bool);
		}

		[Token(Token = "0x6000600")]
		[Address(RVA = "0x1E1BF98", Offset = "0x1E1BF98", VA = "0x1E1BF98")]
		public static bool GetItemDownloadInfo(PublishedFileId_t nPublishedFileID, out ulong punBytesDownloaded, out ulong punBytesTotal)
		{
			return default(bool);
		}

		[Token(Token = "0x6000601")]
		[Address(RVA = "0x1E1BFDC", Offset = "0x1E1BFDC", VA = "0x1E1BFDC")]
		public static bool DownloadItem(PublishedFileId_t nPublishedFileID, bool bHighPriority)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000096")]
	public static class SteamUnifiedMessages
	{
		[Token(Token = "0x6000602")]
		[Address(RVA = "0x1E1C010", Offset = "0x1E1C010", VA = "0x1E1C010")]
		public static ClientUnifiedMessageHandle SendMethod(string pchServiceMethod, byte[] pRequestBuffer, uint unRequestBufferSize, ulong unContext)
		{
			return default(ClientUnifiedMessageHandle);
		}

		[Token(Token = "0x6000603")]
		[Address(RVA = "0x1E1C190", Offset = "0x1E1C190", VA = "0x1E1C190")]
		public static bool GetMethodResponseInfo(ClientUnifiedMessageHandle hHandle, out uint punResponseSize, out EResult peResult)
		{
			return default(bool);
		}

		[Token(Token = "0x6000604")]
		[Address(RVA = "0x1E1C1D4", Offset = "0x1E1C1D4", VA = "0x1E1C1D4")]
		public static bool GetMethodResponseData(ClientUnifiedMessageHandle hHandle, byte[] pResponseBuffer, uint unResponseBufferSize, bool bAutoRelease)
		{
			return default(bool);
		}

		[Token(Token = "0x6000605")]
		[Address(RVA = "0x1E1C220", Offset = "0x1E1C220", VA = "0x1E1C220")]
		public static bool ReleaseMethod(ClientUnifiedMessageHandle hHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x6000606")]
		[Address(RVA = "0x1E1C24C", Offset = "0x1E1C24C", VA = "0x1E1C24C")]
		public static bool SendNotification(string pchServiceNotification, byte[] pNotificationBuffer, uint unNotificationBufferSize)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000097")]
	public static class SteamUser
	{
		[Token(Token = "0x6000607")]
		[Address(RVA = "0x1E1C388", Offset = "0x1E1C388", VA = "0x1E1C388")]
		public static HSteamUser GetHSteamUser()
		{
			return default(HSteamUser);
		}

		[Token(Token = "0x6000608")]
		[Address(RVA = "0x1E1C3B4", Offset = "0x1E1C3B4", VA = "0x1E1C3B4")]
		public static bool BLoggedOn()
		{
			return default(bool);
		}

		[Token(Token = "0x6000609")]
		[Address(RVA = "0x1E1C3D0", Offset = "0x1E1C3D0", VA = "0x1E1C3D0")]
		public static CSteamID GetSteamID()
		{
			return default(CSteamID);
		}

		[Token(Token = "0x600060A")]
		[Address(RVA = "0x1E1C44C", Offset = "0x1E1C44C", VA = "0x1E1C44C")]
		public static int InitiateGameConnection(byte[] pAuthBlob, int cbMaxAuthBlob, CSteamID steamIDGameServer, uint unIPServer, ushort usPortServer, bool bSecure)
		{
			return default(int);
		}

		[Token(Token = "0x600060B")]
		[Address(RVA = "0x1E1C4B0", Offset = "0x1E1C4B0", VA = "0x1E1C4B0")]
		public static void TerminateGameConnection(uint unIPServer, ushort usPortServer)
		{
		}

		[Token(Token = "0x600060C")]
		[Address(RVA = "0x1E1C4E4", Offset = "0x1E1C4E4", VA = "0x1E1C4E4")]
		public static void TrackAppUsageEvent(CGameID gameID, int eAppUsageEvent, string pchExtraInfo = "")
		{
		}

		[Token(Token = "0x600060D")]
		[Address(RVA = "0x1E1C620", Offset = "0x1E1C620", VA = "0x1E1C620")]
		public static bool GetUserDataFolder(out string pchBuffer, int cubBuffer)
		{
			return default(bool);
		}

		[Token(Token = "0x600060E")]
		[Address(RVA = "0x1E1C6F4", Offset = "0x1E1C6F4", VA = "0x1E1C6F4")]
		public static void StartVoiceRecording()
		{
		}

		[Token(Token = "0x600060F")]
		[Address(RVA = "0x1E1C710", Offset = "0x1E1C710", VA = "0x1E1C710")]
		public static void StopVoiceRecording()
		{
		}

		[Token(Token = "0x6000610")]
		[Address(RVA = "0x1E1C72C", Offset = "0x1E1C72C", VA = "0x1E1C72C")]
		public static EVoiceResult GetAvailableVoice(out uint pcbCompressed, out uint pcbUncompressed, uint nUncompressedVoiceDesiredSampleRate)
		{
			return default(EVoiceResult);
		}

		[Token(Token = "0x6000611")]
		[Address(RVA = "0x1E1C770", Offset = "0x1E1C770", VA = "0x1E1C770")]
		public static EVoiceResult GetVoice(bool bWantCompressed, byte[] pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten, bool bWantUncompressed, byte[] pUncompressedDestBuffer, uint cbUncompressedDestBufferSize, out uint nUncompressBytesWritten, uint nUncompressedVoiceDesiredSampleRate)
		{
			return default(EVoiceResult);
		}

		[Token(Token = "0x6000612")]
		[Address(RVA = "0x1E1C7FC", Offset = "0x1E1C7FC", VA = "0x1E1C7FC")]
		public static EVoiceResult DecompressVoice(byte[] pCompressed, uint cbCompressed, byte[] pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten, uint nDesiredSampleRate)
		{
			return default(EVoiceResult);
		}

		[Token(Token = "0x6000613")]
		[Address(RVA = "0x1E1C860", Offset = "0x1E1C860", VA = "0x1E1C860")]
		public static uint GetVoiceOptimalSampleRate()
		{
			return default(uint);
		}

		[Token(Token = "0x6000614")]
		[Address(RVA = "0x1E1C87C", Offset = "0x1E1C87C", VA = "0x1E1C87C")]
		public static HAuthTicket GetAuthSessionTicket(byte[] pTicket, int cbMaxTicket, out uint pcbTicket)
		{
			return default(HAuthTicket);
		}

		[Token(Token = "0x6000615")]
		[Address(RVA = "0x1E1C920", Offset = "0x1E1C920", VA = "0x1E1C920")]
		public static EBeginAuthSessionResult BeginAuthSession(byte[] pAuthTicket, int cbAuthTicket, CSteamID steamID)
		{
			return default(EBeginAuthSessionResult);
		}

		[Token(Token = "0x6000616")]
		[Address(RVA = "0x1E1C964", Offset = "0x1E1C964", VA = "0x1E1C964")]
		public static void EndAuthSession(CSteamID steamID)
		{
		}

		[Token(Token = "0x6000617")]
		[Address(RVA = "0x1E1C990", Offset = "0x1E1C990", VA = "0x1E1C990")]
		public static void CancelAuthTicket(HAuthTicket hAuthTicket)
		{
		}

		[Token(Token = "0x6000618")]
		[Address(RVA = "0x1E1C9BC", Offset = "0x1E1C9BC", VA = "0x1E1C9BC")]
		public static EUserHasLicenseForAppResult UserHasLicenseForApp(CSteamID steamID, AppId_t appID)
		{
			return default(EUserHasLicenseForAppResult);
		}

		[Token(Token = "0x6000619")]
		[Address(RVA = "0x1E1C9F0", Offset = "0x1E1C9F0", VA = "0x1E1C9F0")]
		public static bool BIsBehindNAT()
		{
			return default(bool);
		}

		[Token(Token = "0x600061A")]
		[Address(RVA = "0x1E1CA0C", Offset = "0x1E1CA0C", VA = "0x1E1CA0C")]
		public static void AdvertiseGame(CSteamID steamIDGameServer, uint unIPServer, ushort usPortServer)
		{
		}

		[Token(Token = "0x600061B")]
		[Address(RVA = "0x1E1CA50", Offset = "0x1E1CA50", VA = "0x1E1CA50")]
		public static SteamAPICall_t RequestEncryptedAppTicket(byte[] pDataToInclude, int cbDataToInclude)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x600061C")]
		[Address(RVA = "0x1E1CAE4", Offset = "0x1E1CAE4", VA = "0x1E1CAE4")]
		public static bool GetEncryptedAppTicket(byte[] pTicket, int cbMaxTicket, out uint pcbTicket)
		{
			return default(bool);
		}

		[Token(Token = "0x600061D")]
		[Address(RVA = "0x1E1CB28", Offset = "0x1E1CB28", VA = "0x1E1CB28")]
		public static int GetGameBadgeLevel(int nSeries, bool bFoil)
		{
			return default(int);
		}

		[Token(Token = "0x600061E")]
		[Address(RVA = "0x1E1CB5C", Offset = "0x1E1CB5C", VA = "0x1E1CB5C")]
		public static int GetPlayerSteamLevel()
		{
			return default(int);
		}

		[Token(Token = "0x600061F")]
		[Address(RVA = "0x1E1CB78", Offset = "0x1E1CB78", VA = "0x1E1CB78")]
		public static SteamAPICall_t RequestStoreAuthURL(string pchRedirectURL)
		{
			return default(SteamAPICall_t);
		}
	}
	[Token(Token = "0x2000098")]
	public static class SteamUserStats
	{
		[Token(Token = "0x6000620")]
		[Address(RVA = "0x1E1CCD8", Offset = "0x1E1CCD8", VA = "0x1E1CCD8")]
		public static bool RequestCurrentStats()
		{
			return default(bool);
		}

		[Token(Token = "0x6000621")]
		[Address(RVA = "0x1E1CCF4", Offset = "0x1E1CCF4", VA = "0x1E1CCF4")]
		public static bool GetStat(string pchName, out int pData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000622")]
		[Address(RVA = "0x1E1CE28", Offset = "0x1E1CE28", VA = "0x1E1CE28")]
		public static bool GetStat(string pchName, out float pData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000623")]
		[Address(RVA = "0x1E1CF5C", Offset = "0x1E1CF5C", VA = "0x1E1CF5C")]
		public static bool SetStat(string pchName, int nData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000624")]
		[Address(RVA = "0x1E1D090", Offset = "0x1E1D090", VA = "0x1E1D090")]
		public static bool SetStat(string pchName, float fData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000625")]
		[Address(RVA = "0x1E1D1CC", Offset = "0x1E1D1CC", VA = "0x1E1D1CC")]
		public static bool UpdateAvgRateStat(string pchName, float flCountThisSession, double dSessionLength)
		{
			return default(bool);
		}

		[Token(Token = "0x6000626")]
		[Address(RVA = "0x1E1D310", Offset = "0x1E1D310", VA = "0x1E1D310")]
		public static bool GetAchievement(string pchName, out bool pbAchieved)
		{
			return default(bool);
		}

		[Token(Token = "0x6000627")]
		[Address(RVA = "0x1E1D444", Offset = "0x1E1D444", VA = "0x1E1D444")]
		public static bool SetAchievement(string pchName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000628")]
		[Address(RVA = "0x1E1D570", Offset = "0x1E1D570", VA = "0x1E1D570")]
		public static bool ClearAchievement(string pchName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000629")]
		[Address(RVA = "0x1E1D69C", Offset = "0x1E1D69C", VA = "0x1E1D69C")]
		public static bool GetAchievementAndUnlockTime(string pchName, out bool pbAchieved, out uint punUnlockTime)
		{
			return default(bool);
		}

		[Token(Token = "0x600062A")]
		[Address(RVA = "0x1E1D7D8", Offset = "0x1E1D7D8", VA = "0x1E1D7D8")]
		public static bool StoreStats()
		{
			return default(bool);
		}

		[Token(Token = "0x600062B")]
		[Address(RVA = "0x1E1D7F4", Offset = "0x1E1D7F4", VA = "0x1E1D7F4")]
		public static int GetAchievementIcon(string pchName)
		{
			return default(int);
		}

		[Token(Token = "0x600062C")]
		[Address(RVA = "0x1E1D920", Offset = "0x1E1D920", VA = "0x1E1D920")]
		public static string GetAchievementDisplayAttribute(string pchName, string pchKey)
		{
			return null;
		}

		[Token(Token = "0x600062D")]
		[Address(RVA = "0x1E1DB50", Offset = "0x1E1DB50", VA = "0x1E1DB50")]
		public static bool IndicateAchievementProgress(string pchName, uint nCurProgress, uint nMaxProgress)
		{
			return default(bool);
		}

		[Token(Token = "0x600062E")]
		[Address(RVA = "0x1E1DC8C", Offset = "0x1E1DC8C", VA = "0x1E1DC8C")]
		public static uint GetNumAchievements()
		{
			return default(uint);
		}

		[Token(Token = "0x600062F")]
		[Address(RVA = "0x1E1DCA8", Offset = "0x1E1DCA8", VA = "0x1E1DCA8")]
		public static string GetAchievementName(uint iAchievement)
		{
			return null;
		}

		[Token(Token = "0x6000630")]
		[Address(RVA = "0x1E1DCDC", Offset = "0x1E1DCDC", VA = "0x1E1DCDC")]
		public static SteamAPICall_t RequestUserStats(CSteamID steamIDUser)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000631")]
		[Address(RVA = "0x1E1DD60", Offset = "0x1E1DD60", VA = "0x1E1DD60")]
		public static bool GetUserStat(CSteamID steamIDUser, string pchName, out int pData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000632")]
		[Address(RVA = "0x1E1DE9C", Offset = "0x1E1DE9C", VA = "0x1E1DE9C")]
		public static bool GetUserStat(CSteamID steamIDUser, string pchName, out float pData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000633")]
		[Address(RVA = "0x1E1DFD8", Offset = "0x1E1DFD8", VA = "0x1E1DFD8")]
		public static bool GetUserAchievement(CSteamID steamIDUser, string pchName, out bool pbAchieved)
		{
			return default(bool);
		}

		[Token(Token = "0x6000634")]
		[Address(RVA = "0x1E1E114", Offset = "0x1E1E114", VA = "0x1E1E114")]
		public static bool GetUserAchievementAndUnlockTime(CSteamID steamIDUser, string pchName, out bool pbAchieved, out uint punUnlockTime)
		{
			return default(bool);
		}

		[Token(Token = "0x6000635")]
		[Address(RVA = "0x1E1E260", Offset = "0x1E1E260", VA = "0x1E1E260")]
		public static bool ResetAllStats(bool bAchievementsToo)
		{
			return default(bool);
		}

		[Token(Token = "0x6000636")]
		[Address(RVA = "0x1E1E28C", Offset = "0x1E1E28C", VA = "0x1E1E28C")]
		public static SteamAPICall_t FindOrCreateLeaderboard(string pchLeaderboardName, ELeaderboardSortMethod eLeaderboardSortMethod, ELeaderboardDisplayType eLeaderboardDisplayType)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000637")]
		[Address(RVA = "0x1E1E3FC", Offset = "0x1E1E3FC", VA = "0x1E1E3FC")]
		public static SteamAPICall_t FindLeaderboard(string pchLeaderboardName)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000638")]
		[Address(RVA = "0x1E1E55C", Offset = "0x1E1E55C", VA = "0x1E1E55C")]
		public static string GetLeaderboardName(SteamLeaderboard_t hSteamLeaderboard)
		{
			return null;
		}

		[Token(Token = "0x6000639")]
		[Address(RVA = "0x1E1E590", Offset = "0x1E1E590", VA = "0x1E1E590")]
		public static int GetLeaderboardEntryCount(SteamLeaderboard_t hSteamLeaderboard)
		{
			return default(int);
		}

		[Token(Token = "0x600063A")]
		[Address(RVA = "0x1E1E5BC", Offset = "0x1E1E5BC", VA = "0x1E1E5BC")]
		public static ELeaderboardSortMethod GetLeaderboardSortMethod(SteamLeaderboard_t hSteamLeaderboard)
		{
			return default(ELeaderboardSortMethod);
		}

		[Token(Token = "0x600063B")]
		[Address(RVA = "0x1E1E5E8", Offset = "0x1E1E5E8", VA = "0x1E1E5E8")]
		public static ELeaderboardDisplayType GetLeaderboardDisplayType(SteamLeaderboard_t hSteamLeaderboard)
		{
			return default(ELeaderboardDisplayType);
		}

		[Token(Token = "0x600063C")]
		[Address(RVA = "0x1E1E614", Offset = "0x1E1E614", VA = "0x1E1E614")]
		public static SteamAPICall_t DownloadLeaderboardEntries(SteamLeaderboard_t hSteamLeaderboard, ELeaderboardDataRequest eLeaderboardDataRequest, int nRangeStart, int nRangeEnd)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x600063D")]
		[Address(RVA = "0x1E1E6C0", Offset = "0x1E1E6C0", VA = "0x1E1E6C0")]
		public static SteamAPICall_t DownloadLeaderboardEntriesForUsers(SteamLeaderboard_t hSteamLeaderboard, CSteamID[] prgUsers, int cUsers)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x600063E")]
		[Address(RVA = "0x1E1E75C", Offset = "0x1E1E75C", VA = "0x1E1E75C")]
		public static bool GetDownloadedLeaderboardEntry(SteamLeaderboardEntries_t hSteamLeaderboardEntries, int index, out LeaderboardEntry_t pLeaderboardEntry, int[] pDetails, int cDetailsMax)
		{
			return default(bool);
		}

		[Token(Token = "0x600063F")]
		[Address(RVA = "0x1E1E7B8", Offset = "0x1E1E7B8", VA = "0x1E1E7B8")]
		public static SteamAPICall_t UploadLeaderboardScore(SteamLeaderboard_t hSteamLeaderboard, ELeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod, int nScore, int[] pScoreDetails, int cScoreDetailsCount)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000640")]
		[Address(RVA = "0x1E1E86C", Offset = "0x1E1E86C", VA = "0x1E1E86C")]
		public static SteamAPICall_t AttachLeaderboardUGC(SteamLeaderboard_t hSteamLeaderboard, UGCHandle_t hUGC)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000641")]
		[Address(RVA = "0x1E1E900", Offset = "0x1E1E900", VA = "0x1E1E900")]
		public static SteamAPICall_t GetNumberOfCurrentPlayers()
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000642")]
		[Address(RVA = "0x1E1E97C", Offset = "0x1E1E97C", VA = "0x1E1E97C")]
		public static SteamAPICall_t RequestGlobalAchievementPercentages()
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000643")]
		[Address(RVA = "0x1E1E9F8", Offset = "0x1E1E9F8", VA = "0x1E1E9F8")]
		public static int GetMostAchievedAchievementInfo(out string pchName, uint unNameBufLen, out float pflPercent, out bool pbAchieved)
		{
			return default(int);
		}

		[Token(Token = "0x6000644")]
		[Address(RVA = "0x1E1EAEC", Offset = "0x1E1EAEC", VA = "0x1E1EAEC")]
		public static int GetNextMostAchievedAchievementInfo(int iIteratorPrevious, out string pchName, uint unNameBufLen, out float pflPercent, out bool pbAchieved)
		{
			return default(int);
		}

		[Token(Token = "0x6000645")]
		[Address(RVA = "0x1E1EBF4", Offset = "0x1E1EBF4", VA = "0x1E1EBF4")]
		public static bool GetAchievementAchievedPercent(string pchName, out float pflPercent)
		{
			return default(bool);
		}

		[Token(Token = "0x6000646")]
		[Address(RVA = "0x1E1ED28", Offset = "0x1E1ED28", VA = "0x1E1ED28")]
		public static SteamAPICall_t RequestGlobalStats(int nHistoryDays)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000647")]
		[Address(RVA = "0x1E1EDAC", Offset = "0x1E1EDAC", VA = "0x1E1EDAC")]
		public static bool GetGlobalStat(string pchStatName, out long pData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000648")]
		[Address(RVA = "0x1E1EEE0", Offset = "0x1E1EEE0", VA = "0x1E1EEE0")]
		public static bool GetGlobalStat(string pchStatName, out double pData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000649")]
		[Address(RVA = "0x1E1F014", Offset = "0x1E1F014", VA = "0x1E1F014")]
		public static int GetGlobalStatHistory(string pchStatName, long[] pData, uint cubData)
		{
			return default(int);
		}

		[Token(Token = "0x600064A")]
		[Address(RVA = "0x1E1F150", Offset = "0x1E1F150", VA = "0x1E1F150")]
		public static int GetGlobalStatHistory(string pchStatName, double[] pData, uint cubData)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000099")]
	public static class SteamUtils
	{
		[Token(Token = "0x600064B")]
		[Address(RVA = "0x1E1F28C", Offset = "0x1E1F28C", VA = "0x1E1F28C")]
		public static uint GetSecondsSinceAppActive()
		{
			return default(uint);
		}

		[Token(Token = "0x600064C")]
		[Address(RVA = "0x1E1F2A8", Offset = "0x1E1F2A8", VA = "0x1E1F2A8")]
		public static uint GetSecondsSinceComputerActive()
		{
			return default(uint);
		}

		[Token(Token = "0x600064D")]
		[Address(RVA = "0x1E1F2C4", Offset = "0x1E1F2C4", VA = "0x1E1F2C4")]
		public static EUniverse GetConnectedUniverse()
		{
			return default(EUniverse);
		}

		[Token(Token = "0x600064E")]
		[Address(RVA = "0x1E1F2E0", Offset = "0x1E1F2E0", VA = "0x1E1F2E0")]
		public static uint GetServerRealTime()
		{
			return default(uint);
		}

		[Token(Token = "0x600064F")]
		[Address(RVA = "0x1E1F2FC", Offset = "0x1E1F2FC", VA = "0x1E1F2FC")]
		public static string GetIPCountry()
		{
			return null;
		}

		[Token(Token = "0x6000650")]
		[Address(RVA = "0x1E1F320", Offset = "0x1E1F320", VA = "0x1E1F320")]
		public static bool GetImageSize(int iImage, out uint pnWidth, out uint pnHeight)
		{
			return default(bool);
		}

		[Token(Token = "0x6000651")]
		[Address(RVA = "0x1E1F364", Offset = "0x1E1F364", VA = "0x1E1F364")]
		public static bool GetImageRGBA(int iImage, byte[] pubDest, int nDestBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000652")]
		[Address(RVA = "0x1E1F3A8", Offset = "0x1E1F3A8", VA = "0x1E1F3A8")]
		public static bool GetCSERIPPort(out uint unIP, out ushort usPort)
		{
			return default(bool);
		}

		[Token(Token = "0x6000653")]
		[Address(RVA = "0x1E1F3DC", Offset = "0x1E1F3DC", VA = "0x1E1F3DC")]
		public static byte GetCurrentBatteryPower()
		{
			return default(byte);
		}

		[Token(Token = "0x6000654")]
		[Address(RVA = "0x1E1F3F8", Offset = "0x1E1F3F8", VA = "0x1E1F3F8")]
		public static AppId_t GetAppID()
		{
			return default(AppId_t);
		}

		[Token(Token = "0x6000655")]
		[Address(RVA = "0x1E1F47C", Offset = "0x1E1F47C", VA = "0x1E1F47C")]
		public static void SetOverlayNotificationPosition(ENotificationPosition eNotificationPosition)
		{
		}

		[Token(Token = "0x6000656")]
		[Address(RVA = "0x1E1F4A8", Offset = "0x1E1F4A8", VA = "0x1E1F4A8")]
		public static bool IsAPICallCompleted(SteamAPICall_t hSteamAPICall, out bool pbFailed)
		{
			return default(bool);
		}

		[Token(Token = "0x6000657")]
		[Address(RVA = "0x1E1F4DC", Offset = "0x1E1F4DC", VA = "0x1E1F4DC")]
		public static ESteamAPICallFailure GetAPICallFailureReason(SteamAPICall_t hSteamAPICall)
		{
			return default(ESteamAPICallFailure);
		}

		[Token(Token = "0x6000658")]
		[Address(RVA = "0x1E1F508", Offset = "0x1E1F508", VA = "0x1E1F508")]
		public static bool GetAPICallResult(SteamAPICall_t hSteamAPICall, IntPtr pCallback, int cubCallback, int iCallbackExpected, out bool pbFailed)
		{
			return default(bool);
		}

		[Token(Token = "0x6000659")]
		[Address(RVA = "0x1E1F564", Offset = "0x1E1F564", VA = "0x1E1F564")]
		public static void RunFrame()
		{
		}

		[Token(Token = "0x600065A")]
		[Address(RVA = "0x1E1F580", Offset = "0x1E1F580", VA = "0x1E1F580")]
		public static uint GetIPCCallCount()
		{
			return default(uint);
		}

		[Token(Token = "0x600065B")]
		[Address(RVA = "0x1E1F59C", Offset = "0x1E1F59C", VA = "0x1E1F59C")]
		public static void SetWarningMessageHook(SteamAPIWarningMessageHook_t pFunction)
		{
		}

		[Token(Token = "0x600065C")]
		[Address(RVA = "0x1E1F5C8", Offset = "0x1E1F5C8", VA = "0x1E1F5C8")]
		public static bool IsOverlayEnabled()
		{
			return default(bool);
		}

		[Token(Token = "0x600065D")]
		[Address(RVA = "0x1E1F5E4", Offset = "0x1E1F5E4", VA = "0x1E1F5E4")]
		public static bool BOverlayNeedsPresent()
		{
			return default(bool);
		}

		[Token(Token = "0x600065E")]
		[Address(RVA = "0x1E1F600", Offset = "0x1E1F600", VA = "0x1E1F600")]
		public static SteamAPICall_t CheckFileSignature(string szFileName)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x600065F")]
		[Address(RVA = "0x1E1F760", Offset = "0x1E1F760", VA = "0x1E1F760")]
		public static bool ShowGamepadTextInput(EGamepadTextInputMode eInputMode, EGamepadTextInputLineMode eLineInputMode, string pchDescription, uint unCharMax, string pchExistingText)
		{
			return default(bool);
		}

		[Token(Token = "0x6000660")]
		[Address(RVA = "0x1E1F9BC", Offset = "0x1E1F9BC", VA = "0x1E1F9BC")]
		public static uint GetEnteredGamepadTextLength()
		{
			return default(uint);
		}

		[Token(Token = "0x6000661")]
		[Address(RVA = "0x1E1F9D8", Offset = "0x1E1F9D8", VA = "0x1E1F9D8")]
		public static bool GetEnteredGamepadTextInput(out string pchText, uint cchText)
		{
			return default(bool);
		}

		[Token(Token = "0x6000662")]
		[Address(RVA = "0x1E1FAAC", Offset = "0x1E1FAAC", VA = "0x1E1FAAC")]
		public static string GetSteamUILanguage()
		{
			return null;
		}

		[Token(Token = "0x6000663")]
		[Address(RVA = "0x1E1FAD0", Offset = "0x1E1FAD0", VA = "0x1E1FAD0")]
		public static bool IsSteamRunningInVR()
		{
			return default(bool);
		}

		[Token(Token = "0x6000664")]
		[Address(RVA = "0x1E1FAEC", Offset = "0x1E1FAEC", VA = "0x1E1FAEC")]
		public static void SetOverlayNotificationInset(int nHorizontalInset, int nVerticalInset)
		{
		}
	}
	[Token(Token = "0x200009A")]
	public static class SteamVideo
	{
		[Token(Token = "0x6000665")]
		[Address(RVA = "0x1E1FB20", Offset = "0x1E1FB20", VA = "0x1E1FB20")]
		public static void GetVideoURL(AppId_t unVideoAppID)
		{
		}

		[Token(Token = "0x6000666")]
		[Address(RVA = "0x1E1FB4C", Offset = "0x1E1FB4C", VA = "0x1E1FB4C")]
		public static bool IsBroadcasting(out int pnNumViewers)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200009B")]
	internal static class NativeMethods
	{
		[Token(Token = "0x40003AE")]
		internal const string NativeLibraryName = "CSteamworks";

		[PreserveSig]
		[Token(Token = "0x6000667")]
		[Address(RVA = "0x13F8170", Offset = "0x13F8170", VA = "0x13F8170")]
		public static extern void SteamAPI_Shutdown();

		[PreserveSig]
		[Token(Token = "0x6000668")]
		[Address(RVA = "0x13F8200", Offset = "0x13F8200", VA = "0x13F8200")]
		public static extern bool SteamAPI_IsSteamRunning();

		[PreserveSig]
		[Token(Token = "0x6000669")]
		[Address(RVA = "0x13F8298", Offset = "0x13F8298", VA = "0x13F8298")]
		public static extern bool SteamAPI_RestartAppIfNecessary(AppId_t unOwnAppID);

		[PreserveSig]
		[Token(Token = "0x600066A")]
		[Address(RVA = "0x13F8340", Offset = "0x13F8340", VA = "0x13F8340")]
		public static extern void SteamAPI_WriteMiniDump(uint uStructuredExceptionCode, IntPtr pvExceptionInfo, uint uBuildID);

		[PreserveSig]
		[Token(Token = "0x600066B")]
		[Address(RVA = "0x13F83F8", Offset = "0x13F83F8", VA = "0x13F83F8")]
		public static extern void SteamAPI_SetMiniDumpComment(InteropHelp.UTF8StringHandle pchMsg);

		[PreserveSig]
		[Token(Token = "0x600066C")]
		[Address(RVA = "0x13F733C", Offset = "0x13F733C", VA = "0x13F733C")]
		public static extern IntPtr SteamClient();

		[PreserveSig]
		[Token(Token = "0x600066D")]
		[Address(RVA = "0x13F84D4", Offset = "0x13F84D4", VA = "0x13F84D4")]
		public static extern bool SteamAPI_InitSafe();

		[PreserveSig]
		[Token(Token = "0x600066E")]
		[Address(RVA = "0x13F856C", Offset = "0x13F856C", VA = "0x13F856C")]
		public static extern void SteamAPI_RunCallbacks();

		[PreserveSig]
		[Token(Token = "0x600066F")]
		[Address(RVA = "0x13F85FC", Offset = "0x13F85FC", VA = "0x13F85FC")]
		public static extern void SteamAPI_RegisterCallback(IntPtr pCallback, int iCallback);

		[PreserveSig]
		[Token(Token = "0x6000670")]
		[Address(RVA = "0x13F86AC", Offset = "0x13F86AC", VA = "0x13F86AC")]
		public static extern void SteamAPI_UnregisterCallback(IntPtr pCallback);

		[PreserveSig]
		[Token(Token = "0x6000671")]
		[Address(RVA = "0x13F874C", Offset = "0x13F874C", VA = "0x13F874C")]
		public static extern void SteamAPI_RegisterCallResult(IntPtr pCallback, ulong hAPICall);

		[PreserveSig]
		[Token(Token = "0x6000672")]
		[Address(RVA = "0x13F87FC", Offset = "0x13F87FC", VA = "0x13F87FC")]
		public static extern void SteamAPI_UnregisterCallResult(IntPtr pCallback, ulong hAPICall);

		[PreserveSig]
		[Token(Token = "0x6000673")]
		[Address(RVA = "0x13F88AC", Offset = "0x13F88AC", VA = "0x13F88AC")]
		public static extern void Steam_RunCallbacks(HSteamPipe hSteamPipe, bool bGameServerCallbacks);

		[PreserveSig]
		[Token(Token = "0x6000674")]
		[Address(RVA = "0x13F895C", Offset = "0x13F895C", VA = "0x13F895C")]
		public static extern void Steam_RegisterInterfaceFuncs(IntPtr hModule);

		[PreserveSig]
		[Token(Token = "0x6000675")]
		[Address(RVA = "0x13F89FC", Offset = "0x13F89FC", VA = "0x13F89FC")]
		public static extern int Steam_GetHSteamUserCurrent();

		[PreserveSig]
		[Token(Token = "0x6000676")]
		[Address(RVA = "0x13F8A8C", Offset = "0x13F8A8C", VA = "0x13F8A8C")]
		public static extern int SteamAPI_GetSteamInstallPath();

		[PreserveSig]
		[Token(Token = "0x6000677")]
		[Address(RVA = "0x13F8B1C", Offset = "0x13F8B1C", VA = "0x13F8B1C")]
		public static extern int SteamAPI_GetHSteamPipe();

		[PreserveSig]
		[Token(Token = "0x6000678")]
		[Address(RVA = "0x13F8BAC", Offset = "0x13F8BAC", VA = "0x13F8BAC")]
		public static extern void SteamAPI_SetTryCatchCallbacks(bool bTryCatchCallbacks);

		[PreserveSig]
		[Token(Token = "0x6000679")]
		[Address(RVA = "0x13F8C4C", Offset = "0x13F8C4C", VA = "0x13F8C4C")]
		public static extern int SteamAPI_GetHSteamUser();

		[PreserveSig]
		[Token(Token = "0x600067A")]
		[Address(RVA = "0x13F8CDC", Offset = "0x13F8CDC", VA = "0x13F8CDC")]
		public static extern void SteamAPI_UseBreakpadCrashHandler(InteropHelp.UTF8StringHandle pchVersion, InteropHelp.UTF8StringHandle pchDate, InteropHelp.UTF8StringHandle pchTime, bool bFullMemoryDumps, IntPtr pvContext, IntPtr m_pfnPreMinidumpCallback);

		[PreserveSig]
		[Token(Token = "0x600067B")]
		[Address(RVA = "0x13F8E7C", Offset = "0x13F8E7C", VA = "0x13F8E7C")]
		public static extern IntPtr SteamUser();

		[PreserveSig]
		[Token(Token = "0x600067C")]
		[Address(RVA = "0x13F8F0C", Offset = "0x13F8F0C", VA = "0x13F8F0C")]
		public static extern IntPtr SteamFriends();

		[PreserveSig]
		[Token(Token = "0x600067D")]
		[Address(RVA = "0x13F8F9C", Offset = "0x13F8F9C", VA = "0x13F8F9C")]
		public static extern IntPtr SteamUtils();

		[PreserveSig]
		[Token(Token = "0x600067E")]
		[Address(RVA = "0x13F902C", Offset = "0x13F902C", VA = "0x13F902C")]
		public static extern IntPtr SteamMatchmaking();

		[PreserveSig]
		[Token(Token = "0x600067F")]
		[Address(RVA = "0x13F90BC", Offset = "0x13F90BC", VA = "0x13F90BC")]
		public static extern IntPtr SteamUserStats();

		[PreserveSig]
		[Token(Token = "0x6000680")]
		[Address(RVA = "0x13F914C", Offset = "0x13F914C", VA = "0x13F914C")]
		public static extern IntPtr SteamApps();

		[PreserveSig]
		[Token(Token = "0x6000681")]
		[Address(RVA = "0x13F91DC", Offset = "0x13F91DC", VA = "0x13F91DC")]
		public static extern IntPtr SteamNetworking();

		[PreserveSig]
		[Token(Token = "0x6000682")]
		[Address(RVA = "0x13F926C", Offset = "0x13F926C", VA = "0x13F926C")]
		public static extern IntPtr SteamMatchmakingServers();

		[PreserveSig]
		[Token(Token = "0x6000683")]
		[Address(RVA = "0x13F92FC", Offset = "0x13F92FC", VA = "0x13F92FC")]
		public static extern IntPtr SteamRemoteStorage();

		[PreserveSig]
		[Token(Token = "0x6000684")]
		[Address(RVA = "0x13F938C", Offset = "0x13F938C", VA = "0x13F938C")]
		public static extern IntPtr SteamScreenshots();

		[PreserveSig]
		[Token(Token = "0x6000685")]
		[Address(RVA = "0x13F941C", Offset = "0x13F941C", VA = "0x13F941C")]
		public static extern IntPtr SteamHTTP();

		[PreserveSig]
		[Token(Token = "0x6000686")]
		[Address(RVA = "0x13F94AC", Offset = "0x13F94AC", VA = "0x13F94AC")]
		public static extern IntPtr SteamUnifiedMessages();

		[PreserveSig]
		[Token(Token = "0x6000687")]
		[Address(RVA = "0x13F953C", Offset = "0x13F953C", VA = "0x13F953C")]
		public static extern IntPtr SteamController();

		[PreserveSig]
		[Token(Token = "0x6000688")]
		[Address(RVA = "0x13F95CC", Offset = "0x13F95CC", VA = "0x13F95CC")]
		public static extern IntPtr SteamUGC();

		[PreserveSig]
		[Token(Token = "0x6000689")]
		[Address(RVA = "0x13F965C", Offset = "0x13F965C", VA = "0x13F965C")]
		public static extern IntPtr SteamAppList();

		[PreserveSig]
		[Token(Token = "0x600068A")]
		[Address(RVA = "0x13F96EC", Offset = "0x13F96EC", VA = "0x13F96EC")]
		public static extern IntPtr SteamMusic();

		[PreserveSig]
		[Token(Token = "0x600068B")]
		[Address(RVA = "0x13F977C", Offset = "0x13F977C", VA = "0x13F977C")]
		public static extern IntPtr SteamMusicRemote();

		[PreserveSig]
		[Token(Token = "0x600068C")]
		[Address(RVA = "0x13F980C", Offset = "0x13F980C", VA = "0x13F980C")]
		public static extern IntPtr SteamHTMLSurface();

		[PreserveSig]
		[Token(Token = "0x600068D")]
		[Address(RVA = "0x13F989C", Offset = "0x13F989C", VA = "0x13F989C")]
		public static extern IntPtr SteamInventory();

		[PreserveSig]
		[Token(Token = "0x600068E")]
		[Address(RVA = "0x13F992C", Offset = "0x13F992C", VA = "0x13F992C")]
		public static extern IntPtr SteamVideo();

		[PreserveSig]
		[Token(Token = "0x600068F")]
		[Address(RVA = "0x13ED9F4", Offset = "0x13ED9F4", VA = "0x13ED9F4")]
		public static extern bool SteamGameServer_InitSafe(uint unIP, ushort usSteamPort, ushort usGamePort, ushort usQueryPort, EServerMode eServerMode, InteropHelp.UTF8StringHandle pchVersionString);

		[PreserveSig]
		[Token(Token = "0x6000690")]
		[Address(RVA = "0x13EDB5C", Offset = "0x13EDB5C", VA = "0x13EDB5C")]
		public static extern void SteamGameServer_Shutdown();

		[PreserveSig]
		[Token(Token = "0x6000691")]
		[Address(RVA = "0x13EDBF8", Offset = "0x13EDBF8", VA = "0x13EDBF8")]
		public static extern void SteamGameServer_RunCallbacks();

		[PreserveSig]
		[Token(Token = "0x6000692")]
		[Address(RVA = "0x13EDC94", Offset = "0x13EDC94", VA = "0x13EDC94")]
		public static extern bool SteamGameServer_BSecure();

		[PreserveSig]
		[Token(Token = "0x6000693")]
		[Address(RVA = "0x13EDD60", Offset = "0x13EDD60", VA = "0x13EDD60")]
		public static extern ulong SteamGameServer_GetSteamID();

		[PreserveSig]
		[Token(Token = "0x6000694")]
		[Address(RVA = "0x13EDDFC", Offset = "0x13EDDFC", VA = "0x13EDDFC")]
		public static extern int SteamGameServer_GetHSteamPipe();

		[PreserveSig]
		[Token(Token = "0x6000695")]
		[Address(RVA = "0x13EDEA0", Offset = "0x13EDEA0", VA = "0x13EDEA0")]
		public static extern int SteamGameServer_GetHSteamUser();

		[PreserveSig]
		[Token(Token = "0x6000696")]
		[Address(RVA = "0x13F7400", Offset = "0x13F7400", VA = "0x13F7400")]
		public static extern IntPtr SteamClientGameServer();

		[PreserveSig]
		[Token(Token = "0x6000697")]
		[Address(RVA = "0x13F99BC", Offset = "0x13F99BC", VA = "0x13F99BC")]
		public static extern IntPtr SteamGameServer();

		[PreserveSig]
		[Token(Token = "0x6000698")]
		[Address(RVA = "0x13F9A4C", Offset = "0x13F9A4C", VA = "0x13F9A4C")]
		public static extern IntPtr SteamGameServerUtils();

		[PreserveSig]
		[Token(Token = "0x6000699")]
		[Address(RVA = "0x13F9ADC", Offset = "0x13F9ADC", VA = "0x13F9ADC")]
		public static extern IntPtr SteamGameServerNetworking();

		[PreserveSig]
		[Token(Token = "0x600069A")]
		[Address(RVA = "0x13F9B6C", Offset = "0x13F9B6C", VA = "0x13F9B6C")]
		public static extern IntPtr SteamGameServerStats();

		[PreserveSig]
		[Token(Token = "0x600069B")]
		[Address(RVA = "0x13F9BFC", Offset = "0x13F9BFC", VA = "0x13F9BFC")]
		public static extern IntPtr SteamGameServerHTTP();

		[PreserveSig]
		[Token(Token = "0x600069C")]
		[Address(RVA = "0x13F9C8C", Offset = "0x13F9C8C", VA = "0x13F9C8C")]
		public static extern IntPtr SteamGameServerInventory();

		[PreserveSig]
		[Token(Token = "0x600069D")]
		[Address(RVA = "0x13F9D1C", Offset = "0x13F9D1C", VA = "0x13F9D1C")]
		public static extern IntPtr SteamGameServerUGC();

		[PreserveSig]
		[Token(Token = "0x600069E")]
		[Address(RVA = "0x13F9DAC", Offset = "0x13F9DAC", VA = "0x13F9DAC")]
		public static extern bool BDecryptTicket([In][Out] byte[] rgubTicketEncrypted, uint cubTicketEncrypted, [In][Out] byte[] rgubTicketDecrypted, ref uint pcubTicketDecrypted, byte[] rgubKey, int cubKey);

		[PreserveSig]
		[Token(Token = "0x600069F")]
		[Address(RVA = "0x13F9EAC", Offset = "0x13F9EAC", VA = "0x13F9EAC")]
		public static extern bool BIsTicketForApp([In][Out] byte[] rgubTicketDecrypted, uint cubTicketDecrypted, AppId_t nAppID);

		[PreserveSig]
		[Token(Token = "0x60006A0")]
		[Address(RVA = "0x13F9F74", Offset = "0x13F9F74", VA = "0x13F9F74")]
		public static extern uint GetTicketIssueTime([In][Out] byte[] rgubTicketDecrypted, uint cubTicketDecrypted);

		[PreserveSig]
		[Token(Token = "0x60006A1")]
		[Address(RVA = "0x13FA02C", Offset = "0x13FA02C", VA = "0x13FA02C")]
		public static extern void GetTicketSteamID([In][Out] byte[] rgubTicketDecrypted, uint cubTicketDecrypted, out CSteamID psteamID);

		[PreserveSig]
		[Token(Token = "0x60006A2")]
		[Address(RVA = "0x13FA0EC", Offset = "0x13FA0EC", VA = "0x13FA0EC")]
		public static extern uint GetTicketAppID([In][Out] byte[] rgubTicketDecrypted, uint cubTicketDecrypted);

		[PreserveSig]
		[Token(Token = "0x60006A3")]
		[Address(RVA = "0x13FA1A4", Offset = "0x13FA1A4", VA = "0x13FA1A4")]
		public static extern bool BUserOwnsAppInTicket([In][Out] byte[] rgubTicketDecrypted, uint cubTicketDecrypted, AppId_t nAppID);

		[PreserveSig]
		[Token(Token = "0x60006A4")]
		[Address(RVA = "0x13FA26C", Offset = "0x13FA26C", VA = "0x13FA26C")]
		public static extern bool BUserIsVacBanned([In][Out] byte[] rgubTicketDecrypted, uint cubTicketDecrypted);

		[PreserveSig]
		[Token(Token = "0x60006A5")]
		[Address(RVA = "0x13FA32C", Offset = "0x13FA32C", VA = "0x13FA32C")]
		public static extern IntPtr GetUserVariableData([In][Out] byte[] rgubTicketDecrypted, uint cubTicketDecrypted, out uint pcubUserData);

		[PreserveSig]
		[Token(Token = "0x60006A6")]
		[Address(RVA = "0x13FA3EC", Offset = "0x13FA3EC", VA = "0x13FA3EC")]
		public static extern uint ISteamAppList_GetNumInstalledApps();

		[PreserveSig]
		[Token(Token = "0x60006A7")]
		[Address(RVA = "0x13FA47C", Offset = "0x13FA47C", VA = "0x13FA47C")]
		public static extern uint ISteamAppList_GetInstalledApps([In][Out] AppId_t[] pvecAppID, uint unMaxAppIDs);

		[PreserveSig]
		[Token(Token = "0x60006A8")]
		[Address(RVA = "0x13FA534", Offset = "0x13FA534", VA = "0x13FA534")]
		public static extern int ISteamAppList_GetAppName(AppId_t nAppID, IntPtr pchName, int cchNameMax);

		[PreserveSig]
		[Token(Token = "0x60006A9")]
		[Address(RVA = "0x13FA5EC", Offset = "0x13FA5EC", VA = "0x13FA5EC")]
		public static extern int ISteamAppList_GetAppInstallDir(AppId_t nAppID, IntPtr pchDirectory, int cchNameMax);

		[PreserveSig]
		[Token(Token = "0x60006AA")]
		[Address(RVA = "0x13FA6A4", Offset = "0x13FA6A4", VA = "0x13FA6A4")]
		public static extern int ISteamAppList_GetAppBuildId(AppId_t nAppID);

		[PreserveSig]
		[Token(Token = "0x60006AB")]
		[Address(RVA = "0x13FA744", Offset = "0x13FA744", VA = "0x13FA744")]
		public static extern bool ISteamApps_BIsSubscribed();

		[PreserveSig]
		[Token(Token = "0x60006AC")]
		[Address(RVA = "0x13FA7DC", Offset = "0x13FA7DC", VA = "0x13FA7DC")]
		public static extern bool ISteamApps_BIsLowViolence();

		[PreserveSig]
		[Token(Token = "0x60006AD")]
		[Address(RVA = "0x13FA874", Offset = "0x13FA874", VA = "0x13FA874")]
		public static extern bool ISteamApps_BIsCybercafe();

		[PreserveSig]
		[Token(Token = "0x60006AE")]
		[Address(RVA = "0x13FA90C", Offset = "0x13FA90C", VA = "0x13FA90C")]
		public static extern bool ISteamApps_BIsVACBanned();

		[PreserveSig]
		[Token(Token = "0x60006AF")]
		[Address(RVA = "0x13FA9A4", Offset = "0x13FA9A4", VA = "0x13FA9A4")]
		public static extern IntPtr ISteamApps_GetCurrentGameLanguage();

		[PreserveSig]
		[Token(Token = "0x60006B0")]
		[Address(RVA = "0x13FAA34", Offset = "0x13FAA34", VA = "0x13FAA34")]
		public static extern IntPtr ISteamApps_GetAvailableGameLanguages();

		[PreserveSig]
		[Token(Token = "0x60006B1")]
		[Address(RVA = "0x13FAAC4", Offset = "0x13FAAC4", VA = "0x13FAAC4")]
		public static extern bool ISteamApps_BIsSubscribedApp(AppId_t appID);

		[PreserveSig]
		[Token(Token = "0x60006B2")]
		[Address(RVA = "0x13FAB6C", Offset = "0x13FAB6C", VA = "0x13FAB6C")]
		public static extern bool ISteamApps_BIsDlcInstalled(AppId_t appID);

		[PreserveSig]
		[Token(Token = "0x60006B3")]
		[Address(RVA = "0x13FAC14", Offset = "0x13FAC14", VA = "0x13FAC14")]
		public static extern uint ISteamApps_GetEarliestPurchaseUnixTime(AppId_t nAppID);

		[PreserveSig]
		[Token(Token = "0x60006B4")]
		[Address(RVA = "0x13FACB4", Offset = "0x13FACB4", VA = "0x13FACB4")]
		public static extern bool ISteamApps_BIsSubscribedFromFreeWeekend();

		[PreserveSig]
		[Token(Token = "0x60006B5")]
		[Address(RVA = "0x13FAD4C", Offset = "0x13FAD4C", VA = "0x13FAD4C")]
		public static extern int ISteamApps_GetDLCCount();

		[PreserveSig]
		[Token(Token = "0x60006B6")]
		[Address(RVA = "0x13FADDC", Offset = "0x13FADDC", VA = "0x13FADDC")]
		public static extern bool ISteamApps_BGetDLCDataByIndex(int iDLC, out AppId_t pAppID, out bool pbAvailable, IntPtr pchName, int cchNameBufferSize);

		[PreserveSig]
		[Token(Token = "0x60006B7")]
		[Address(RVA = "0x13FAEC8", Offset = "0x13FAEC8", VA = "0x13FAEC8")]
		public static extern void ISteamApps_InstallDLC(AppId_t nAppID);

		[PreserveSig]
		[Token(Token = "0x60006B8")]
		[Address(RVA = "0x13FAF68", Offset = "0x13FAF68", VA = "0x13FAF68")]
		public static extern void ISteamApps_UninstallDLC(AppId_t nAppID);

		[PreserveSig]
		[Token(Token = "0x60006B9")]
		[Address(RVA = "0x13FB008", Offset = "0x13FB008", VA = "0x13FB008")]
		public static extern void ISteamApps_RequestAppProofOfPurchaseKey(AppId_t nAppID);

		[PreserveSig]
		[Token(Token = "0x60006BA")]
		[Address(RVA = "0x13FB0A8", Offset = "0x13FB0A8", VA = "0x13FB0A8")]
		public static extern bool ISteamApps_GetCurrentBetaName(IntPtr pchName, int cchNameBufferSize);

		[PreserveSig]
		[Token(Token = "0x60006BB")]
		[Address(RVA = "0x13FB160", Offset = "0x13FB160", VA = "0x13FB160")]
		public static extern bool ISteamApps_MarkContentCorrupt(bool bMissingFilesOnly);

		[PreserveSig]
		[Token(Token = "0x60006BC")]
		[Address(RVA = "0x13FB208", Offset = "0x13FB208", VA = "0x13FB208")]
		public static extern uint ISteamApps_GetInstalledDepots(AppId_t appID, [In][Out] DepotId_t[] pvecDepots, uint cMaxDepots);

		[PreserveSig]
		[Token(Token = "0x60006BD")]
		[Address(RVA = "0x13FB2C8", Offset = "0x13FB2C8", VA = "0x13FB2C8")]
		public static extern uint ISteamApps_GetAppInstallDir(AppId_t appID, IntPtr pchFolder, uint cchFolderBufferSize);

		[PreserveSig]
		[Token(Token = "0x60006BE")]
		[Address(RVA = "0x13FB380", Offset = "0x13FB380", VA = "0x13FB380")]
		public static extern bool ISteamApps_BIsAppInstalled(AppId_t appID);

		[PreserveSig]
		[Token(Token = "0x60006BF")]
		[Address(RVA = "0x13FB428", Offset = "0x13FB428", VA = "0x13FB428")]
		public static extern ulong ISteamApps_GetAppOwner();

		[PreserveSig]
		[Token(Token = "0x60006C0")]
		[Address(RVA = "0x13FB4B8", Offset = "0x13FB4B8", VA = "0x13FB4B8")]
		public static extern IntPtr ISteamApps_GetLaunchQueryParam(InteropHelp.UTF8StringHandle pchKey);

		[PreserveSig]
		[Token(Token = "0x60006C1")]
		[Address(RVA = "0x13FB59C", Offset = "0x13FB59C", VA = "0x13FB59C")]
		public static extern bool ISteamApps_GetDlcDownloadProgress(AppId_t nAppID, out ulong punBytesDownloaded, out ulong punBytesTotal);

		[PreserveSig]
		[Token(Token = "0x60006C2")]
		[Address(RVA = "0x13FB65C", Offset = "0x13FB65C", VA = "0x13FB65C")]
		public static extern int ISteamApps_GetAppBuildId();

		[PreserveSig]
		[Token(Token = "0x60006C3")]
		[Address(RVA = "0x13FB6EC", Offset = "0x13FB6EC", VA = "0x13FB6EC")]
		public static extern int ISteamClient_CreateSteamPipe();

		[PreserveSig]
		[Token(Token = "0x60006C4")]
		[Address(RVA = "0x13FB77C", Offset = "0x13FB77C", VA = "0x13FB77C")]
		public static extern bool ISteamClient_BReleaseSteamPipe(HSteamPipe hSteamPipe);

		[PreserveSig]
		[Token(Token = "0x60006C5")]
		[Address(RVA = "0x13FB824", Offset = "0x13FB824", VA = "0x13FB824")]
		public static extern int ISteamClient_ConnectToGlobalUser(HSteamPipe hSteamPipe);

		[PreserveSig]
		[Token(Token = "0x60006C6")]
		[Address(RVA = "0x13FB8C4", Offset = "0x13FB8C4", VA = "0x13FB8C4")]
		public static extern int ISteamClient_CreateLocalUser(out HSteamPipe phSteamPipe, EAccountType eAccountType);

		[PreserveSig]
		[Token(Token = "0x60006C7")]
		[Address(RVA = "0x13FB974", Offset = "0x13FB974", VA = "0x13FB974")]
		public static extern void ISteamClient_ReleaseUser(HSteamPipe hSteamPipe, HSteamUser hUser);

		[PreserveSig]
		[Token(Token = "0x60006C8")]
		[Address(RVA = "0x13FBA24", Offset = "0x13FBA24", VA = "0x13FBA24")]
		public static extern IntPtr ISteamClient_GetISteamUser(HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60006C9")]
		[Address(RVA = "0x13FBB20", Offset = "0x13FBB20", VA = "0x13FBB20")]
		public static extern IntPtr ISteamClient_GetISteamGameServer(HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60006CA")]
		[Address(RVA = "0x13FBC1C", Offset = "0x13FBC1C", VA = "0x13FBC1C")]
		public static extern void ISteamClient_SetLocalIPBinding(uint unIP, ushort usPort);

		[PreserveSig]
		[Token(Token = "0x60006CB")]
		[Address(RVA = "0x13FBCCC", Offset = "0x13FBCCC", VA = "0x13FBCCC")]
		public static extern IntPtr ISteamClient_GetISteamFriends(HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60006CC")]
		[Address(RVA = "0x13FBDC8", Offset = "0x13FBDC8", VA = "0x13FBDC8")]
		public static extern IntPtr ISteamClient_GetISteamUtils(HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60006CD")]
		[Address(RVA = "0x13FBEBC", Offset = "0x13FBEBC", VA = "0x13FBEBC")]
		public static extern IntPtr ISteamClient_GetISteamMatchmaking(HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60006CE")]
		[Address(RVA = "0x13FBFB8", Offset = "0x13FBFB8", VA = "0x13FBFB8")]
		public static extern IntPtr ISteamClient_GetISteamMatchmakingServers(HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60006CF")]
		[Address(RVA = "0x13FC0B4", Offset = "0x13FC0B4", VA = "0x13FC0B4")]
		public static extern IntPtr ISteamClient_GetISteamGenericInterface(HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60006D0")]
		[Address(RVA = "0x13FC1B0", Offset = "0x13FC1B0", VA = "0x13FC1B0")]
		public static extern IntPtr ISteamClient_GetISteamUserStats(HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60006D1")]
		[Address(RVA = "0x13FC2AC", Offset = "0x13FC2AC", VA = "0x13FC2AC")]
		public static extern IntPtr ISteamClient_GetISteamGameServerStats(HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60006D2")]
		[Address(RVA = "0x13FC3A8", Offset = "0x13FC3A8", VA = "0x13FC3A8")]
		public static extern IntPtr ISteamClient_GetISteamApps(HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60006D3")]
		[Address(RVA = "0x13FC4A4", Offset = "0x13FC4A4", VA = "0x13FC4A4")]
		public static extern IntPtr ISteamClient_GetISteamNetworking(HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60006D4")]
		[Address(RVA = "0x13FC5A0", Offset = "0x13FC5A0", VA = "0x13FC5A0")]
		public static extern IntPtr ISteamClient_GetISteamRemoteStorage(HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60006D5")]
		[Address(RVA = "0x13FC69C", Offset = "0x13FC69C", VA = "0x13FC69C")]
		public static extern IntPtr ISteamClient_GetISteamScreenshots(HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60006D6")]
		[Address(RVA = "0x13FC798", Offset = "0x13FC798", VA = "0x13FC798")]
		public static extern void ISteamClient_RunFrame();

		[PreserveSig]
		[Token(Token = "0x60006D7")]
		[Address(RVA = "0x13FC828", Offset = "0x13FC828", VA = "0x13FC828")]
		public static extern uint ISteamClient_GetIPCCallCount();

		[PreserveSig]
		[Token(Token = "0x60006D8")]
		[Address(RVA = "0x13FC8B8", Offset = "0x13FC8B8", VA = "0x13FC8B8")]
		public static extern void ISteamClient_SetWarningMessageHook(SteamAPIWarningMessageHook_t pFunction);

		[PreserveSig]
		[Token(Token = "0x60006D9")]
		[Address(RVA = "0x13FC95C", Offset = "0x13FC95C", VA = "0x13FC95C")]
		public static extern bool ISteamClient_BShutdownIfAllPipesClosed();

		[PreserveSig]
		[Token(Token = "0x60006DA")]
		[Address(RVA = "0x13FC9F4", Offset = "0x13FC9F4", VA = "0x13FC9F4")]
		public static extern IntPtr ISteamClient_GetISteamHTTP(HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60006DB")]
		[Address(RVA = "0x13FCAF0", Offset = "0x13FCAF0", VA = "0x13FCAF0")]
		public static extern IntPtr ISteamClient_GetISteamUnifiedMessages(HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60006DC")]
		[Address(RVA = "0x13FCBEC", Offset = "0x13FCBEC", VA = "0x13FCBEC")]
		public static extern IntPtr ISteamClient_GetISteamController(HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60006DD")]
		[Address(RVA = "0x13FCCE8", Offset = "0x13FCCE8", VA = "0x13FCCE8")]
		public static extern IntPtr ISteamClient_GetISteamUGC(HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60006DE")]
		[Address(RVA = "0x13FCDE4", Offset = "0x13FCDE4", VA = "0x13FCDE4")]
		public static extern IntPtr ISteamClient_GetISteamAppList(HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60006DF")]
		[Address(RVA = "0x13FCEE0", Offset = "0x13FCEE0", VA = "0x13FCEE0")]
		public static extern IntPtr ISteamClient_GetISteamMusic(HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60006E0")]
		[Address(RVA = "0x13FCFDC", Offset = "0x13FCFDC", VA = "0x13FCFDC")]
		public static extern IntPtr ISteamClient_GetISteamMusicRemote(HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60006E1")]
		[Address(RVA = "0x13FD0D8", Offset = "0x13FD0D8", VA = "0x13FD0D8")]
		public static extern IntPtr ISteamClient_GetISteamHTMLSurface(HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60006E2")]
		[Address(RVA = "0x13FD1D4", Offset = "0x13FD1D4", VA = "0x13FD1D4")]
		public static extern void ISteamClient_Set_SteamAPI_CPostAPIResultInProcess(SteamAPI_PostAPIResultInProcess_t func);

		[PreserveSig]
		[Token(Token = "0x60006E3")]
		[Address(RVA = "0x13FD278", Offset = "0x13FD278", VA = "0x13FD278")]
		public static extern void ISteamClient_Remove_SteamAPI_CPostAPIResultInProcess(SteamAPI_PostAPIResultInProcess_t func);

		[PreserveSig]
		[Token(Token = "0x60006E4")]
		[Address(RVA = "0x13FD31C", Offset = "0x13FD31C", VA = "0x13FD31C")]
		public static extern void ISteamClient_Set_SteamAPI_CCheckCallbackRegisteredInProcess(SteamAPI_CheckCallbackRegistered_t func);

		[PreserveSig]
		[Token(Token = "0x60006E5")]
		[Address(RVA = "0x13FD3C0", Offset = "0x13FD3C0", VA = "0x13FD3C0")]
		public static extern IntPtr ISteamClient_GetISteamInventory(HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60006E6")]
		[Address(RVA = "0x13FD4BC", Offset = "0x13FD4BC", VA = "0x13FD4BC")]
		public static extern IntPtr ISteamClient_GetISteamVideo(HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60006E7")]
		[Address(RVA = "0x13FD5B8", Offset = "0x13FD5B8", VA = "0x13FD5B8")]
		public static extern bool ISteamController_Init(InteropHelp.UTF8StringHandle pchAbsolutePathToControllerConfigVDF);

		[PreserveSig]
		[Token(Token = "0x60006E8")]
		[Address(RVA = "0x13FD6A0", Offset = "0x13FD6A0", VA = "0x13FD6A0")]
		public static extern bool ISteamController_Shutdown();

		[PreserveSig]
		[Token(Token = "0x60006E9")]
		[Address(RVA = "0x13FD738", Offset = "0x13FD738", VA = "0x13FD738")]
		public static extern void ISteamController_RunFrame();

		[PreserveSig]
		[Token(Token = "0x60006EA")]
		[Address(RVA = "0x13FD7C8", Offset = "0x13FD7C8", VA = "0x13FD7C8")]
		public static extern bool ISteamController_GetControllerState(uint unControllerIndex, out SteamControllerState_t pState);

		[PreserveSig]
		[Token(Token = "0x60006EB")]
		[Address(RVA = "0x13FD880", Offset = "0x13FD880", VA = "0x13FD880")]
		public static extern void ISteamController_TriggerHapticPulse(uint unControllerIndex, ESteamControllerPad eTargetPad, ushort usDurationMicroSec);

		[PreserveSig]
		[Token(Token = "0x60006EC")]
		[Address(RVA = "0x13FD938", Offset = "0x13FD938", VA = "0x13FD938")]
		public static extern void ISteamController_SetOverrideMode(InteropHelp.UTF8StringHandle pchMode);

		[PreserveSig]
		[Token(Token = "0x60006ED")]
		[Address(RVA = "0x13FDA14", Offset = "0x13FDA14", VA = "0x13FDA14")]
		public static extern IntPtr ISteamFriends_GetPersonaName();

		[PreserveSig]
		[Token(Token = "0x60006EE")]
		[Address(RVA = "0x13FDAA4", Offset = "0x13FDAA4", VA = "0x13FDAA4")]
		public static extern ulong ISteamFriends_SetPersonaName(InteropHelp.UTF8StringHandle pchPersonaName);

		[PreserveSig]
		[Token(Token = "0x60006EF")]
		[Address(RVA = "0x13FDB88", Offset = "0x13FDB88", VA = "0x13FDB88")]
		public static extern EPersonaState ISteamFriends_GetPersonaState();

		[PreserveSig]
		[Token(Token = "0x60006F0")]
		[Address(RVA = "0x13FDC18", Offset = "0x13FDC18", VA = "0x13FDC18")]
		public static extern int ISteamFriends_GetFriendCount(EFriendFlags iFriendFlags);

		[PreserveSig]
		[Token(Token = "0x60006F1")]
		[Address(RVA = "0x13FDCB8", Offset = "0x13FDCB8", VA = "0x13FDCB8")]
		public static extern ulong ISteamFriends_GetFriendByIndex(int iFriend, EFriendFlags iFriendFlags);

		[PreserveSig]
		[Token(Token = "0x60006F2")]
		[Address(RVA = "0x13FDD68", Offset = "0x13FDD68", VA = "0x13FDD68")]
		public static extern EFriendRelationship ISteamFriends_GetFriendRelationship(CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x60006F3")]
		[Address(RVA = "0x13FDE08", Offset = "0x13FDE08", VA = "0x13FDE08")]
		public static extern EPersonaState ISteamFriends_GetFriendPersonaState(CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x60006F4")]
		[Address(RVA = "0x13FDEA8", Offset = "0x13FDEA8", VA = "0x13FDEA8")]
		public static extern IntPtr ISteamFriends_GetFriendPersonaName(CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x60006F5")]
		[Address(RVA = "0x13FDF48", Offset = "0x13FDF48", VA = "0x13FDF48")]
		public static extern bool ISteamFriends_GetFriendGamePlayed(CSteamID steamIDFriend, out FriendGameInfo_t pFriendGameInfo);

		[PreserveSig]
		[Token(Token = "0x60006F6")]
		[Address(RVA = "0x13FE000", Offset = "0x13FE000", VA = "0x13FE000")]
		public static extern IntPtr ISteamFriends_GetFriendPersonaNameHistory(CSteamID steamIDFriend, int iPersonaName);

		[PreserveSig]
		[Token(Token = "0x60006F7")]
		[Address(RVA = "0x13FE0B0", Offset = "0x13FE0B0", VA = "0x13FE0B0")]
		public static extern int ISteamFriends_GetFriendSteamLevel(CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x60006F8")]
		[Address(RVA = "0x13FE150", Offset = "0x13FE150", VA = "0x13FE150")]
		public static extern IntPtr ISteamFriends_GetPlayerNickname(CSteamID steamIDPlayer);

		[PreserveSig]
		[Token(Token = "0x60006F9")]
		[Address(RVA = "0x13FE1F0", Offset = "0x13FE1F0", VA = "0x13FE1F0")]
		public static extern int ISteamFriends_GetFriendsGroupCount();

		[PreserveSig]
		[Token(Token = "0x60006FA")]
		[Address(RVA = "0x13FE280", Offset = "0x13FE280", VA = "0x13FE280")]
		public static extern short ISteamFriends_GetFriendsGroupIDByIndex(int iFG);

		[PreserveSig]
		[Token(Token = "0x60006FB")]
		[Address(RVA = "0x13FE320", Offset = "0x13FE320", VA = "0x13FE320")]
		public static extern IntPtr ISteamFriends_GetFriendsGroupName(FriendsGroupID_t friendsGroupID);

		[PreserveSig]
		[Token(Token = "0x60006FC")]
		[Address(RVA = "0x13FE3C0", Offset = "0x13FE3C0", VA = "0x13FE3C0")]
		public static extern int ISteamFriends_GetFriendsGroupMembersCount(FriendsGroupID_t friendsGroupID);

		[PreserveSig]
		[Token(Token = "0x60006FD")]
		[Address(RVA = "0x13FE460", Offset = "0x13FE460", VA = "0x13FE460")]
		public static extern void ISteamFriends_GetFriendsGroupMembersList(FriendsGroupID_t friendsGroupID, [In][Out] CSteamID[] pOutSteamIDMembers, int nMembersCount);

		[PreserveSig]
		[Token(Token = "0x60006FE")]
		[Address(RVA = "0x13FE520", Offset = "0x13FE520", VA = "0x13FE520")]
		public static extern bool ISteamFriends_HasFriend(CSteamID steamIDFriend, EFriendFlags iFriendFlags);

		[PreserveSig]
		[Token(Token = "0x60006FF")]
		[Address(RVA = "0x13FE5D8", Offset = "0x13FE5D8", VA = "0x13FE5D8")]
		public static extern int ISteamFriends_GetClanCount();

		[PreserveSig]
		[Token(Token = "0x6000700")]
		[Address(RVA = "0x13FE668", Offset = "0x13FE668", VA = "0x13FE668")]
		public static extern ulong ISteamFriends_GetClanByIndex(int iClan);

		[PreserveSig]
		[Token(Token = "0x6000701")]
		[Address(RVA = "0x13FE708", Offset = "0x13FE708", VA = "0x13FE708")]
		public static extern IntPtr ISteamFriends_GetClanName(CSteamID steamIDClan);

		[PreserveSig]
		[Token(Token = "0x6000702")]
		[Address(RVA = "0x13FE7A8", Offset = "0x13FE7A8", VA = "0x13FE7A8")]
		public static extern IntPtr ISteamFriends_GetClanTag(CSteamID steamIDClan);

		[PreserveSig]
		[Token(Token = "0x6000703")]
		[Address(RVA = "0x13FE848", Offset = "0x13FE848", VA = "0x13FE848")]
		public static extern bool ISteamFriends_GetClanActivityCounts(CSteamID steamIDClan, out int pnOnline, out int pnInGame, out int pnChatting);

		[PreserveSig]
		[Token(Token = "0x6000704")]
		[Address(RVA = "0x13FE918", Offset = "0x13FE918", VA = "0x13FE918")]
		public static extern ulong ISteamFriends_DownloadClanActivityCounts([In][Out] CSteamID[] psteamIDClans, int cClansToRequest);

		[PreserveSig]
		[Token(Token = "0x6000705")]
		[Address(RVA = "0x13FE9D0", Offset = "0x13FE9D0", VA = "0x13FE9D0")]
		public static extern int ISteamFriends_GetFriendCountFromSource(CSteamID steamIDSource);

		[PreserveSig]
		[Token(Token = "0x6000706")]
		[Address(RVA = "0x13FEA70", Offset = "0x13FEA70", VA = "0x13FEA70")]
		public static extern ulong ISteamFriends_GetFriendFromSourceByIndex(CSteamID steamIDSource, int iFriend);

		[PreserveSig]
		[Token(Token = "0x6000707")]
		[Address(RVA = "0x13FEB20", Offset = "0x13FEB20", VA = "0x13FEB20")]
		public static extern bool ISteamFriends_IsUserInSource(CSteamID steamIDUser, CSteamID steamIDSource);

		[PreserveSig]
		[Token(Token = "0x6000708")]
		[Address(RVA = "0x13FEBD8", Offset = "0x13FEBD8", VA = "0x13FEBD8")]
		public static extern void ISteamFriends_SetInGameVoiceSpeaking(CSteamID steamIDUser, bool bSpeaking);

		[PreserveSig]
		[Token(Token = "0x6000709")]
		[Address(RVA = "0x13FEC88", Offset = "0x13FEC88", VA = "0x13FEC88")]
		public static extern void ISteamFriends_ActivateGameOverlay(InteropHelp.UTF8StringHandle pchDialog);

		[PreserveSig]
		[Token(Token = "0x600070A")]
		[Address(RVA = "0x13FED64", Offset = "0x13FED64", VA = "0x13FED64")]
		public static extern void ISteamFriends_ActivateGameOverlayToUser(InteropHelp.UTF8StringHandle pchDialog, CSteamID steamID);

		[PreserveSig]
		[Token(Token = "0x600070B")]
		[Address(RVA = "0x13FEE50", Offset = "0x13FEE50", VA = "0x13FEE50")]
		public static extern void ISteamFriends_ActivateGameOverlayToWebPage(InteropHelp.UTF8StringHandle pchURL);

		[PreserveSig]
		[Token(Token = "0x600070C")]
		[Address(RVA = "0x13FEF2C", Offset = "0x13FEF2C", VA = "0x13FEF2C")]
		public static extern void ISteamFriends_ActivateGameOverlayToStore(AppId_t nAppID, EOverlayToStoreFlag eFlag);

		[PreserveSig]
		[Token(Token = "0x600070D")]
		[Address(RVA = "0x13FEFDC", Offset = "0x13FEFDC", VA = "0x13FEFDC")]
		public static extern void ISteamFriends_SetPlayedWith(CSteamID steamIDUserPlayedWith);

		[PreserveSig]
		[Token(Token = "0x600070E")]
		[Address(RVA = "0x13FF07C", Offset = "0x13FF07C", VA = "0x13FF07C")]
		public static extern void ISteamFriends_ActivateGameOverlayInviteDialog(CSteamID steamIDLobby);

		[PreserveSig]
		[Token(Token = "0x600070F")]
		[Address(RVA = "0x13FF11C", Offset = "0x13FF11C", VA = "0x13FF11C")]
		public static extern int ISteamFriends_GetSmallFriendAvatar(CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x6000710")]
		[Address(RVA = "0x13FF1BC", Offset = "0x13FF1BC", VA = "0x13FF1BC")]
		public static extern int ISteamFriends_GetMediumFriendAvatar(CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x6000711")]
		[Address(RVA = "0x13FF25C", Offset = "0x13FF25C", VA = "0x13FF25C")]
		public static extern int ISteamFriends_GetLargeFriendAvatar(CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x6000712")]
		[Address(RVA = "0x13FF2FC", Offset = "0x13FF2FC", VA = "0x13FF2FC")]
		public static extern bool ISteamFriends_RequestUserInformation(CSteamID steamIDUser, bool bRequireNameOnly);

		[PreserveSig]
		[Token(Token = "0x6000713")]
		[Address(RVA = "0x13FF3B4", Offset = "0x13FF3B4", VA = "0x13FF3B4")]
		public static extern ulong ISteamFriends_RequestClanOfficerList(CSteamID steamIDClan);

		[PreserveSig]
		[Token(Token = "0x6000714")]
		[Address(RVA = "0x13FF454", Offset = "0x13FF454", VA = "0x13FF454")]
		public static extern ulong ISteamFriends_GetClanOwner(CSteamID steamIDClan);

		[PreserveSig]
		[Token(Token = "0x6000715")]
		[Address(RVA = "0x13FF4F4", Offset = "0x13FF4F4", VA = "0x13FF4F4")]
		public static extern int ISteamFriends_GetClanOfficerCount(CSteamID steamIDClan);

		[PreserveSig]
		[Token(Token = "0x6000716")]
		[Address(RVA = "0x13FF594", Offset = "0x13FF594", VA = "0x13FF594")]
		public static extern ulong ISteamFriends_GetClanOfficerByIndex(CSteamID steamIDClan, int iOfficer);

		[PreserveSig]
		[Token(Token = "0x6000717")]
		[Address(RVA = "0x13FF644", Offset = "0x13FF644", VA = "0x13FF644")]
		public static extern uint ISteamFriends_GetUserRestrictions();

		[PreserveSig]
		[Token(Token = "0x6000718")]
		[Address(RVA = "0x13FF6D4", Offset = "0x13FF6D4", VA = "0x13FF6D4")]
		public static extern bool ISteamFriends_SetRichPresence(InteropHelp.UTF8StringHandle pchKey, InteropHelp.UTF8StringHandle pchValue);

		[PreserveSig]
		[Token(Token = "0x6000719")]
		[Address(RVA = "0x13FF808", Offset = "0x13FF808", VA = "0x13FF808")]
		public static extern void ISteamFriends_ClearRichPresence();

		[PreserveSig]
		[Token(Token = "0x600071A")]
		[Address(RVA = "0x13FF898", Offset = "0x13FF898", VA = "0x13FF898")]
		public static extern IntPtr ISteamFriends_GetFriendRichPresence(CSteamID steamIDFriend, InteropHelp.UTF8StringHandle pchKey);

		[PreserveSig]
		[Token(Token = "0x600071B")]
		[Address(RVA = "0x13FF98C", Offset = "0x13FF98C", VA = "0x13FF98C")]
		public static extern int ISteamFriends_GetFriendRichPresenceKeyCount(CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x600071C")]
		[Address(RVA = "0x13FFA2C", Offset = "0x13FFA2C", VA = "0x13FFA2C")]
		public static extern IntPtr ISteamFriends_GetFriendRichPresenceKeyByIndex(CSteamID steamIDFriend, int iKey);

		[PreserveSig]
		[Token(Token = "0x600071D")]
		[Address(RVA = "0x13FFADC", Offset = "0x13FFADC", VA = "0x13FFADC")]
		public static extern void ISteamFriends_RequestFriendRichPresence(CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x600071E")]
		[Address(RVA = "0x13FFB7C", Offset = "0x13FFB7C", VA = "0x13FFB7C")]
		public static extern bool ISteamFriends_InviteUserToGame(CSteamID steamIDFriend, InteropHelp.UTF8StringHandle pchConnectString);

		[PreserveSig]
		[Token(Token = "0x600071F")]
		[Address(RVA = "0x13FFC74", Offset = "0x13FFC74", VA = "0x13FFC74")]
		public static extern int ISteamFriends_GetCoplayFriendCount();

		[PreserveSig]
		[Token(Token = "0x6000720")]
		[Address(RVA = "0x13FFD04", Offset = "0x13FFD04", VA = "0x13FFD04")]
		public static extern ulong ISteamFriends_GetCoplayFriend(int iCoplayFriend);

		[PreserveSig]
		[Token(Token = "0x6000721")]
		[Address(RVA = "0x13FFDA4", Offset = "0x13FFDA4", VA = "0x13FFDA4")]
		public static extern int ISteamFriends_GetFriendCoplayTime(CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x6000722")]
		[Address(RVA = "0x13FFE44", Offset = "0x13FFE44", VA = "0x13FFE44")]
		public static extern uint ISteamFriends_GetFriendCoplayGame(CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x6000723")]
		[Address(RVA = "0x13FFEE4", Offset = "0x13FFEE4", VA = "0x13FFEE4")]
		public static extern ulong ISteamFriends_JoinClanChatRoom(CSteamID steamIDClan);

		[PreserveSig]
		[Token(Token = "0x6000724")]
		[Address(RVA = "0x13FFF84", Offset = "0x13FFF84", VA = "0x13FFF84")]
		public static extern bool ISteamFriends_LeaveClanChatRoom(CSteamID steamIDClan);

		[PreserveSig]
		[Token(Token = "0x6000725")]
		[Address(RVA = "0x140002C", Offset = "0x140002C", VA = "0x140002C")]
		public static extern int ISteamFriends_GetClanChatMemberCount(CSteamID steamIDClan);

		[PreserveSig]
		[Token(Token = "0x6000726")]
		[Address(RVA = "0x14000CC", Offset = "0x14000CC", VA = "0x14000CC")]
		public static extern ulong ISteamFriends_GetChatMemberByIndex(CSteamID steamIDClan, int iUser);

		[PreserveSig]
		[Token(Token = "0x6000727")]
		[Address(RVA = "0x140017C", Offset = "0x140017C", VA = "0x140017C")]
		public static extern bool ISteamFriends_SendClanChatMessage(CSteamID steamIDClanChat, InteropHelp.UTF8StringHandle pchText);

		[PreserveSig]
		[Token(Token = "0x6000728")]
		[Address(RVA = "0x1400274", Offset = "0x1400274", VA = "0x1400274")]
		public static extern int ISteamFriends_GetClanChatMessage(CSteamID steamIDClanChat, int iMessage, IntPtr prgchText, int cchTextMax, out EChatEntryType peChatEntryType, out CSteamID psteamidChatter);

		[PreserveSig]
		[Token(Token = "0x6000729")]
		[Address(RVA = "0x1400354", Offset = "0x1400354", VA = "0x1400354")]
		public static extern bool ISteamFriends_IsClanChatAdmin(CSteamID steamIDClanChat, CSteamID steamIDUser);

		[PreserveSig]
		[Token(Token = "0x600072A")]
		[Address(RVA = "0x140040C", Offset = "0x140040C", VA = "0x140040C")]
		public static extern bool ISteamFriends_IsClanChatWindowOpenInSteam(CSteamID steamIDClanChat);

		[PreserveSig]
		[Token(Token = "0x600072B")]
		[Address(RVA = "0x14004B4", Offset = "0x14004B4", VA = "0x14004B4")]
		public static extern bool ISteamFriends_OpenClanChatWindowInSteam(CSteamID steamIDClanChat);

		[PreserveSig]
		[Token(Token = "0x600072C")]
		[Address(RVA = "0x140055C", Offset = "0x140055C", VA = "0x140055C")]
		public static extern bool ISteamFriends_CloseClanChatWindowInSteam(CSteamID steamIDClanChat);

		[PreserveSig]
		[Token(Token = "0x600072D")]
		[Address(RVA = "0x1400604", Offset = "0x1400604", VA = "0x1400604")]
		public static extern bool ISteamFriends_SetListenForFriendsMessages(bool bInterceptEnabled);

		[PreserveSig]
		[Token(Token = "0x600072E")]
		[Address(RVA = "0x14006AC", Offset = "0x14006AC", VA = "0x14006AC")]
		public static extern bool ISteamFriends_ReplyToFriendMessage(CSteamID steamIDFriend, InteropHelp.UTF8StringHandle pchMsgToSend);

		[PreserveSig]
		[Token(Token = "0x600072F")]
		[Address(RVA = "0x14007A4", Offset = "0x14007A4", VA = "0x14007A4")]
		public static extern int ISteamFriends_GetFriendMessage(CSteamID steamIDFriend, int iMessageID, IntPtr pvData, int cubData, out EChatEntryType peChatEntryType);

		[PreserveSig]
		[Token(Token = "0x6000730")]
		[Address(RVA = "0x1400874", Offset = "0x1400874", VA = "0x1400874")]
		public static extern ulong ISteamFriends_GetFollowerCount(CSteamID steamID);

		[PreserveSig]
		[Token(Token = "0x6000731")]
		[Address(RVA = "0x1400914", Offset = "0x1400914", VA = "0x1400914")]
		public static extern ulong ISteamFriends_IsFollowing(CSteamID steamID);

		[PreserveSig]
		[Token(Token = "0x6000732")]
		[Address(RVA = "0x14009B4", Offset = "0x14009B4", VA = "0x14009B4")]
		public static extern ulong ISteamFriends_EnumerateFollowingList(uint unStartIndex);

		[PreserveSig]
		[Token(Token = "0x6000733")]
		[Address(RVA = "0x1400A54", Offset = "0x1400A54", VA = "0x1400A54")]
		public static extern bool ISteamGameServer_InitGameServer(uint unIP, ushort usGamePort, ushort usQueryPort, uint unFlags, AppId_t nGameAppId, InteropHelp.UTF8StringHandle pchVersionString);

		[PreserveSig]
		[Token(Token = "0x6000734")]
		[Address(RVA = "0x1400B7C", Offset = "0x1400B7C", VA = "0x1400B7C")]
		public static extern void ISteamGameServer_SetProduct(InteropHelp.UTF8StringHandle pszProduct);

		[PreserveSig]
		[Token(Token = "0x6000735")]
		[Address(RVA = "0x1400C58", Offset = "0x1400C58", VA = "0x1400C58")]
		public static extern void ISteamGameServer_SetGameDescription(InteropHelp.UTF8StringHandle pszGameDescription);

		[PreserveSig]
		[Token(Token = "0x6000736")]
		[Address(RVA = "0x1400D34", Offset = "0x1400D34", VA = "0x1400D34")]
		public static extern void ISteamGameServer_SetModDir(InteropHelp.UTF8StringHandle pszModDir);

		[PreserveSig]
		[Token(Token = "0x6000737")]
		[Address(RVA = "0x1400E10", Offset = "0x1400E10", VA = "0x1400E10")]
		public static extern void ISteamGameServer_SetDedicatedServer(bool bDedicated);

		[PreserveSig]
		[Token(Token = "0x6000738")]
		[Address(RVA = "0x1400EB0", Offset = "0x1400EB0", VA = "0x1400EB0")]
		public static extern void ISteamGameServer_LogOn(InteropHelp.UTF8StringHandle pszToken);

		[PreserveSig]
		[Token(Token = "0x6000739")]
		[Address(RVA = "0x1400F8C", Offset = "0x1400F8C", VA = "0x1400F8C")]
		public static extern void ISteamGameServer_LogOnAnonymous();

		[PreserveSig]
		[Token(Token = "0x600073A")]
		[Address(RVA = "0x140101C", Offset = "0x140101C", VA = "0x140101C")]
		public static extern void ISteamGameServer_LogOff();

		[PreserveSig]
		[Token(Token = "0x600073B")]
		[Address(RVA = "0x14010AC", Offset = "0x14010AC", VA = "0x14010AC")]
		public static extern bool ISteamGameServer_BLoggedOn();

		[PreserveSig]
		[Token(Token = "0x600073C")]
		[Address(RVA = "0x1401144", Offset = "0x1401144", VA = "0x1401144")]
		public static extern bool ISteamGameServer_BSecure();

		[PreserveSig]
		[Token(Token = "0x600073D")]
		[Address(RVA = "0x14011DC", Offset = "0x14011DC", VA = "0x14011DC")]
		public static extern ulong ISteamGameServer_GetSteamID();

		[PreserveSig]
		[Token(Token = "0x600073E")]
		[Address(RVA = "0x140126C", Offset = "0x140126C", VA = "0x140126C")]
		public static extern bool ISteamGameServer_WasRestartRequested();

		[PreserveSig]
		[Token(Token = "0x600073F")]
		[Address(RVA = "0x1401304", Offset = "0x1401304", VA = "0x1401304")]
		public static extern void ISteamGameServer_SetMaxPlayerCount(int cPlayersMax);

		[PreserveSig]
		[Token(Token = "0x6000740")]
		[Address(RVA = "0x14013A4", Offset = "0x14013A4", VA = "0x14013A4")]
		public static extern void ISteamGameServer_SetBotPlayerCount(int cBotplayers);

		[PreserveSig]
		[Token(Token = "0x6000741")]
		[Address(RVA = "0x1401444", Offset = "0x1401444", VA = "0x1401444")]
		public static extern void ISteamGameServer_SetServerName(InteropHelp.UTF8StringHandle pszServerName);

		[PreserveSig]
		[Token(Token = "0x6000742")]
		[Address(RVA = "0x1401520", Offset = "0x1401520", VA = "0x1401520")]
		public static extern void ISteamGameServer_SetMapName(InteropHelp.UTF8StringHandle pszMapName);

		[PreserveSig]
		[Token(Token = "0x6000743")]
		[Address(RVA = "0x14015FC", Offset = "0x14015FC", VA = "0x14015FC")]
		public static extern void ISteamGameServer_SetPasswordProtected(bool bPasswordProtected);

		[PreserveSig]
		[Token(Token = "0x6000744")]
		[Address(RVA = "0x140169C", Offset = "0x140169C", VA = "0x140169C")]
		public static extern void ISteamGameServer_SetSpectatorPort(ushort unSpectatorPort);

		[PreserveSig]
		[Token(Token = "0x6000745")]
		[Address(RVA = "0x140173C", Offset = "0x140173C", VA = "0x140173C")]
		public static extern void ISteamGameServer_SetSpectatorServerName(InteropHelp.UTF8StringHandle pszSpectatorServerName);

		[PreserveSig]
		[Token(Token = "0x6000746")]
		[Address(RVA = "0x1401818", Offset = "0x1401818", VA = "0x1401818")]
		public static extern void ISteamGameServer_ClearAllKeyValues();

		[PreserveSig]
		[Token(Token = "0x6000747")]
		[Address(RVA = "0x14018A8", Offset = "0x14018A8", VA = "0x14018A8")]
		public static extern void ISteamGameServer_SetKeyValue(InteropHelp.UTF8StringHandle pKey, InteropHelp.UTF8StringHandle pValue);

		[PreserveSig]
		[Token(Token = "0x6000748")]
		[Address(RVA = "0x14019D0", Offset = "0x14019D0", VA = "0x14019D0")]
		public static extern void ISteamGameServer_SetGameTags(InteropHelp.UTF8StringHandle pchGameTags);

		[PreserveSig]
		[Token(Token = "0x6000749")]
		[Address(RVA = "0x1401AAC", Offset = "0x1401AAC", VA = "0x1401AAC")]
		public static extern void ISteamGameServer_SetGameData(InteropHelp.UTF8StringHandle pchGameData);

		[PreserveSig]
		[Token(Token = "0x600074A")]
		[Address(RVA = "0x1401B88", Offset = "0x1401B88", VA = "0x1401B88")]
		public static extern void ISteamGameServer_SetRegion(InteropHelp.UTF8StringHandle pszRegion);

		[PreserveSig]
		[Token(Token = "0x600074B")]
		[Address(RVA = "0x1401C64", Offset = "0x1401C64", VA = "0x1401C64")]
		public static extern bool ISteamGameServer_SendUserConnectAndAuthenticate(uint unIPClient, [In][Out] byte[] pvAuthBlob, uint cubAuthBlobSize, out CSteamID pSteamIDUser);

		[PreserveSig]
		[Token(Token = "0x600074C")]
		[Address(RVA = "0x1401D3C", Offset = "0x1401D3C", VA = "0x1401D3C")]
		public static extern ulong ISteamGameServer_CreateUnauthenticatedUserConnection();

		[PreserveSig]
		[Token(Token = "0x600074D")]
		[Address(RVA = "0x1401DCC", Offset = "0x1401DCC", VA = "0x1401DCC")]
		public static extern void ISteamGameServer_SendUserDisconnect(CSteamID steamIDUser);

		[PreserveSig]
		[Token(Token = "0x600074E")]
		[Address(RVA = "0x1401E6C", Offset = "0x1401E6C", VA = "0x1401E6C")]
		public static extern bool ISteamGameServer_BUpdateUserData(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchPlayerName, uint uScore);

		[PreserveSig]
		[Token(Token = "0x600074F")]
		[Address(RVA = "0x1401F6C", Offset = "0x1401F6C", VA = "0x1401F6C")]
		public static extern uint ISteamGameServer_GetAuthSessionTicket([In][Out] byte[] pTicket, int cbMaxTicket, out uint pcbTicket);

		[PreserveSig]
		[Token(Token = "0x6000750")]
		[Address(RVA = "0x140202C", Offset = "0x140202C", VA = "0x140202C")]
		public static extern EBeginAuthSessionResult ISteamGameServer_BeginAuthSession([In][Out] byte[] pAuthTicket, int cbAuthTicket, CSteamID steamID);

		[PreserveSig]
		[Token(Token = "0x6000751")]
		[Address(RVA = "0x14020EC", Offset = "0x14020EC", VA = "0x14020EC")]
		public static extern void ISteamGameServer_EndAuthSession(CSteamID steamID);

		[PreserveSig]
		[Token(Token = "0x6000752")]
		[Address(RVA = "0x140218C", Offset = "0x140218C", VA = "0x140218C")]
		public static extern void ISteamGameServer_CancelAuthTicket(HAuthTicket hAuthTicket);

		[PreserveSig]
		[Token(Token = "0x6000753")]
		[Address(RVA = "0x140222C", Offset = "0x140222C", VA = "0x140222C")]
		public static extern EUserHasLicenseForAppResult ISteamGameServer_UserHasLicenseForApp(CSteamID steamID, AppId_t appID);

		[PreserveSig]
		[Token(Token = "0x6000754")]
		[Address(RVA = "0x14022DC", Offset = "0x14022DC", VA = "0x14022DC")]
		public static extern bool ISteamGameServer_RequestUserGroupStatus(CSteamID steamIDUser, CSteamID steamIDGroup);

		[PreserveSig]
		[Token(Token = "0x6000755")]
		[Address(RVA = "0x1402394", Offset = "0x1402394", VA = "0x1402394")]
		public static extern void ISteamGameServer_GetGameplayStats();

		[PreserveSig]
		[Token(Token = "0x6000756")]
		[Address(RVA = "0x1402424", Offset = "0x1402424", VA = "0x1402424")]
		public static extern ulong ISteamGameServer_GetServerReputation();

		[PreserveSig]
		[Token(Token = "0x6000757")]
		[Address(RVA = "0x14024B4", Offset = "0x14024B4", VA = "0x14024B4")]
		public static extern uint ISteamGameServer_GetPublicIP();

		[PreserveSig]
		[Token(Token = "0x6000758")]
		[Address(RVA = "0x1402544", Offset = "0x1402544", VA = "0x1402544")]
		public static extern bool ISteamGameServer_HandleIncomingPacket([In][Out] byte[] pData, int cbData, uint srcIP, ushort srcPort);

		[PreserveSig]
		[Token(Token = "0x6000759")]
		[Address(RVA = "0x140261C", Offset = "0x140261C", VA = "0x140261C")]
		public static extern int ISteamGameServer_GetNextOutgoingPacket([In][Out] byte[] pOut, int cbMaxOut, out uint pNetAdr, out ushort pPort);

		[PreserveSig]
		[Token(Token = "0x600075A")]
		[Address(RVA = "0x14026EC", Offset = "0x14026EC", VA = "0x14026EC")]
		public static extern void ISteamGameServer_EnableHeartbeats(bool bActive);

		[PreserveSig]
		[Token(Token = "0x600075B")]
		[Address(RVA = "0x140278C", Offset = "0x140278C", VA = "0x140278C")]
		public static extern void ISteamGameServer_SetHeartbeatInterval(int iHeartbeatInterval);

		[PreserveSig]
		[Token(Token = "0x600075C")]
		[Address(RVA = "0x140282C", Offset = "0x140282C", VA = "0x140282C")]
		public static extern void ISteamGameServer_ForceHeartbeat();

		[PreserveSig]
		[Token(Token = "0x600075D")]
		[Address(RVA = "0x14028BC", Offset = "0x14028BC", VA = "0x14028BC")]
		public static extern ulong ISteamGameServer_AssociateWithClan(CSteamID steamIDClan);

		[PreserveSig]
		[Token(Token = "0x600075E")]
		[Address(RVA = "0x140295C", Offset = "0x140295C", VA = "0x140295C")]
		public static extern ulong ISteamGameServer_ComputeNewPlayerCompatibility(CSteamID steamIDNewPlayer);

		[PreserveSig]
		[Token(Token = "0x600075F")]
		[Address(RVA = "0x14029FC", Offset = "0x14029FC", VA = "0x14029FC")]
		public static extern ulong ISteamGameServerStats_RequestUserStats(CSteamID steamIDUser);

		[PreserveSig]
		[Token(Token = "0x6000760")]
		[Address(RVA = "0x1402A9C", Offset = "0x1402A9C", VA = "0x1402A9C")]
		public static extern bool ISteamGameServerStats_GetUserStat(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, out int pData);

		[PreserveSig]
		[Token(Token = "0x6000761")]
		[Address(RVA = "0x1402B9C", Offset = "0x1402B9C", VA = "0x1402B9C")]
		public static extern bool ISteamGameServerStats_GetUserStat_(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, out float pData);

		[PreserveSig]
		[Token(Token = "0x6000762")]
		[Address(RVA = "0x1402C9C", Offset = "0x1402C9C", VA = "0x1402C9C")]
		public static extern bool ISteamGameServerStats_GetUserAchievement(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, out bool pbAchieved);

		[PreserveSig]
		[Token(Token = "0x6000763")]
		[Address(RVA = "0x1402DB0", Offset = "0x1402DB0", VA = "0x1402DB0")]
		public static extern bool ISteamGameServerStats_SetUserStat(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, int nData);

		[PreserveSig]
		[Token(Token = "0x6000764")]
		[Address(RVA = "0x1402EB0", Offset = "0x1402EB0", VA = "0x1402EB0")]
		public static extern bool ISteamGameServerStats_SetUserStat_(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, float fData);

		[PreserveSig]
		[Token(Token = "0x6000765")]
		[Address(RVA = "0x1402FB8", Offset = "0x1402FB8", VA = "0x1402FB8")]
		public static extern bool ISteamGameServerStats_UpdateUserAvgRateStat(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, float flCountThisSession, double dSessionLength);

		[PreserveSig]
		[Token(Token = "0x6000766")]
		[Address(RVA = "0x14030C8", Offset = "0x14030C8", VA = "0x14030C8")]
		public static extern bool ISteamGameServerStats_SetUserAchievement(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName);

		[PreserveSig]
		[Token(Token = "0x6000767")]
		[Address(RVA = "0x14031C0", Offset = "0x14031C0", VA = "0x14031C0")]
		public static extern bool ISteamGameServerStats_ClearUserAchievement(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName);

		[PreserveSig]
		[Token(Token = "0x6000768")]
		[Address(RVA = "0x14032B8", Offset = "0x14032B8", VA = "0x14032B8")]
		public static extern ulong ISteamGameServerStats_StoreUserStats(CSteamID steamIDUser);

		[PreserveSig]
		[Token(Token = "0x6000769")]
		[Address(RVA = "0x1403358", Offset = "0x1403358", VA = "0x1403358")]
		public static extern bool ISteamHTMLSurface_Init();

		[PreserveSig]
		[Token(Token = "0x600076A")]
		[Address(RVA = "0x14033F0", Offset = "0x14033F0", VA = "0x14033F0")]
		public static extern bool ISteamHTMLSurface_Shutdown();

		[PreserveSig]
		[Token(Token = "0x600076B")]
		[Address(RVA = "0x1403488", Offset = "0x1403488", VA = "0x1403488")]
		public static extern ulong ISteamHTMLSurface_CreateBrowser(InteropHelp.UTF8StringHandle pchUserAgent, InteropHelp.UTF8StringHandle pchUserCSS);

		[PreserveSig]
		[Token(Token = "0x600076C")]
		[Address(RVA = "0x14035B8", Offset = "0x14035B8", VA = "0x14035B8")]
		public static extern void ISteamHTMLSurface_RemoveBrowser(HHTMLBrowser unBrowserHandle);

		[PreserveSig]
		[Token(Token = "0x600076D")]
		[Address(RVA = "0x1403658", Offset = "0x1403658", VA = "0x1403658")]
		public static extern void ISteamHTMLSurface_LoadURL(HHTMLBrowser unBrowserHandle, InteropHelp.UTF8StringHandle pchURL, InteropHelp.UTF8StringHandle pchPostData);

		[PreserveSig]
		[Token(Token = "0x600076E")]
		[Address(RVA = "0x1403790", Offset = "0x1403790", VA = "0x1403790")]
		public static extern void ISteamHTMLSurface_SetSize(HHTMLBrowser unBrowserHandle, uint unWidth, uint unHeight);

		[PreserveSig]
		[Token(Token = "0x600076F")]
		[Address(RVA = "0x1403848", Offset = "0x1403848", VA = "0x1403848")]
		public static extern void ISteamHTMLSurface_StopLoad(HHTMLBrowser unBrowserHandle);

		[PreserveSig]
		[Token(Token = "0x6000770")]
		[Address(RVA = "0x14038E8", Offset = "0x14038E8", VA = "0x14038E8")]
		public static extern void ISteamHTMLSurface_Reload(HHTMLBrowser unBrowserHandle);

		[PreserveSig]
		[Token(Token = "0x6000771")]
		[Address(RVA = "0x1403988", Offset = "0x1403988", VA = "0x1403988")]
		public static extern void ISteamHTMLSurface_GoBack(HHTMLBrowser unBrowserHandle);

		[PreserveSig]
		[Token(Token = "0x6000772")]
		[Address(RVA = "0x1403A28", Offset = "0x1403A28", VA = "0x1403A28")]
		public static extern void ISteamHTMLSurface_GoForward(HHTMLBrowser unBrowserHandle);

		[PreserveSig]
		[Token(Token = "0x6000773")]
		[Address(RVA = "0x1403AC8", Offset = "0x1403AC8", VA = "0x1403AC8")]
		public static extern void ISteamHTMLSurface_AddHeader(HHTMLBrowser unBrowserHandle, InteropHelp.UTF8StringHandle pchKey, InteropHelp.UTF8StringHandle pchValue);

		[PreserveSig]
		[Token(Token = "0x6000774")]
		[Address(RVA = "0x1403C00", Offset = "0x1403C00", VA = "0x1403C00")]
		public static extern void ISteamHTMLSurface_ExecuteJavascript(HHTMLBrowser unBrowserHandle, InteropHelp.UTF8StringHandle pchScript);

		[PreserveSig]
		[Token(Token = "0x6000775")]
		[Address(RVA = "0x1403CEC", Offset = "0x1403CEC", VA = "0x1403CEC")]
		public static extern void ISteamHTMLSurface_MouseUp(HHTMLBrowser unBrowserHandle, EHTMLMouseButton eMouseButton);

		[PreserveSig]
		[Token(Token = "0x6000776")]
		[Address(RVA = "0x1403D9C", Offset = "0x1403D9C", VA = "0x1403D9C")]
		public static extern void ISteamHTMLSurface_MouseDown(HHTMLBrowser unBrowserHandle, EHTMLMouseButton eMouseButton);

		[PreserveSig]
		[Token(Token = "0x6000777")]
		[Address(RVA = "0x1403E4C", Offset = "0x1403E4C", VA = "0x1403E4C")]
		public static extern void ISteamHTMLSurface_MouseDoubleClick(HHTMLBrowser unBrowserHandle, EHTMLMouseButton eMouseButton);

		[PreserveSig]
		[Token(Token = "0x6000778")]
		[Address(RVA = "0x1403EFC", Offset = "0x1403EFC", VA = "0x1403EFC")]
		public static extern void ISteamHTMLSurface_MouseMove(HHTMLBrowser unBrowserHandle, int x, int y);

		[PreserveSig]
		[Token(Token = "0x6000779")]
		[Address(RVA = "0x1403FB4", Offset = "0x1403FB4", VA = "0x1403FB4")]
		public static extern void ISteamHTMLSurface_MouseWheel(HHTMLBrowser unBrowserHandle, int nDelta);

		[PreserveSig]
		[Token(Token = "0x600077A")]
		[Address(RVA = "0x1404064", Offset = "0x1404064", VA = "0x1404064")]
		public static extern void ISteamHTMLSurface_KeyDown(HHTMLBrowser unBrowserHandle, uint nNativeKeyCode, EHTMLKeyModifiers eHTMLKeyModifiers);

		[PreserveSig]
		[Token(Token = "0x600077B")]
		[Address(RVA = "0x140411C", Offset = "0x140411C", VA = "0x140411C")]
		public static extern void ISteamHTMLSurface_KeyUp(HHTMLBrowser unBrowserHandle, uint nNativeKeyCode, EHTMLKeyModifiers eHTMLKeyModifiers);

		[PreserveSig]
		[Token(Token = "0x600077C")]
		[Address(RVA = "0x14041D4", Offset = "0x14041D4", VA = "0x14041D4")]
		public static extern void ISteamHTMLSurface_KeyChar(HHTMLBrowser unBrowserHandle, uint cUnicodeChar, EHTMLKeyModifiers eHTMLKeyModifiers);

		[PreserveSig]
		[Token(Token = "0x600077D")]
		[Address(RVA = "0x140428C", Offset = "0x140428C", VA = "0x140428C")]
		public static extern void ISteamHTMLSurface_SetHorizontalScroll(HHTMLBrowser unBrowserHandle, uint nAbsolutePixelScroll);

		[PreserveSig]
		[Token(Token = "0x600077E")]
		[Address(RVA = "0x140433C", Offset = "0x140433C", VA = "0x140433C")]
		public static extern void ISteamHTMLSurface_SetVerticalScroll(HHTMLBrowser unBrowserHandle, uint nAbsolutePixelScroll);

		[PreserveSig]
		[Token(Token = "0x600077F")]
		[Address(RVA = "0x14043EC", Offset = "0x14043EC", VA = "0x14043EC")]
		public static extern void ISteamHTMLSurface_SetKeyFocus(HHTMLBrowser unBrowserHandle, bool bHasKeyFocus);

		[PreserveSig]
		[Token(Token = "0x6000780")]
		[Address(RVA = "0x140449C", Offset = "0x140449C", VA = "0x140449C")]
		public static extern void ISteamHTMLSurface_ViewSource(HHTMLBrowser unBrowserHandle);

		[PreserveSig]
		[Token(Token = "0x6000781")]
		[Address(RVA = "0x140453C", Offset = "0x140453C", VA = "0x140453C")]
		public static extern void ISteamHTMLSurface_CopyToClipboard(HHTMLBrowser unBrowserHandle);

		[PreserveSig]
		[Token(Token = "0x6000782")]
		[Address(RVA = "0x14045DC", Offset = "0x14045DC", VA = "0x14045DC")]
		public static extern void ISteamHTMLSurface_PasteFromClipboard(HHTMLBrowser unBrowserHandle);

		[PreserveSig]
		[Token(Token = "0x6000783")]
		[Address(RVA = "0x140467C", Offset = "0x140467C", VA = "0x140467C")]
		public static extern void ISteamHTMLSurface_Find(HHTMLBrowser unBrowserHandle, InteropHelp.UTF8StringHandle pchSearchStr, bool bCurrentlyInFind, bool bReverse);

		[PreserveSig]
		[Token(Token = "0x6000784")]
		[Address(RVA = "0x1404788", Offset = "0x1404788", VA = "0x1404788")]
		public static extern void ISteamHTMLSurface_StopFind(HHTMLBrowser unBrowserHandle);

		[PreserveSig]
		[Token(Token = "0x6000785")]
		[Address(RVA = "0x1404828", Offset = "0x1404828", VA = "0x1404828")]
		public static extern void ISteamHTMLSurface_GetLinkAtPosition(HHTMLBrowser unBrowserHandle, int x, int y);

		[PreserveSig]
		[Token(Token = "0x6000786")]
		[Address(RVA = "0x14048E0", Offset = "0x14048E0", VA = "0x14048E0")]
		public static extern void ISteamHTMLSurface_SetCookie(InteropHelp.UTF8StringHandle pchHostname, InteropHelp.UTF8StringHandle pchKey, InteropHelp.UTF8StringHandle pchValue, InteropHelp.UTF8StringHandle pchPath, uint nExpires, bool bSecure, bool bHTTPOnly);

		[PreserveSig]
		[Token(Token = "0x6000787")]
		[Address(RVA = "0x1404ACC", Offset = "0x1404ACC", VA = "0x1404ACC")]
		public static extern void ISteamHTMLSurface_SetPageScaleFactor(HHTMLBrowser unBrowserHandle, float flZoom, int nPointX, int nPointY);

		[PreserveSig]
		[Token(Token = "0x6000788")]
		[Address(RVA = "0x1404B94", Offset = "0x1404B94", VA = "0x1404B94")]
		public static extern void ISteamHTMLSurface_SetBackgroundMode(HHTMLBrowser unBrowserHandle, bool bBackgroundMode);

		[PreserveSig]
		[Token(Token = "0x6000789")]
		[Address(RVA = "0x1404C44", Offset = "0x1404C44", VA = "0x1404C44")]
		public static extern void ISteamHTMLSurface_AllowStartRequest(HHTMLBrowser unBrowserHandle, bool bAllowed);

		[PreserveSig]
		[Token(Token = "0x600078A")]
		[Address(RVA = "0x1404CF4", Offset = "0x1404CF4", VA = "0x1404CF4")]
		public static extern void ISteamHTMLSurface_JSDialogResponse(HHTMLBrowser unBrowserHandle, bool bResult);

		[PreserveSig]
		[Token(Token = "0x600078B")]
		[Address(RVA = "0x1404DA4", Offset = "0x1404DA4", VA = "0x1404DA4")]
		public static extern void ISteamHTMLSurface_FileLoadDialogResponse(HHTMLBrowser unBrowserHandle, IntPtr pchSelectedFiles);

		[PreserveSig]
		[Token(Token = "0x600078C")]
		[Address(RVA = "0x1404E54", Offset = "0x1404E54", VA = "0x1404E54")]
		public static extern uint ISteamHTTP_CreateHTTPRequest(EHTTPMethod eHTTPRequestMethod, InteropHelp.UTF8StringHandle pchAbsoluteURL);

		[PreserveSig]
		[Token(Token = "0x600078D")]
		[Address(RVA = "0x1404F48", Offset = "0x1404F48", VA = "0x1404F48")]
		public static extern bool ISteamHTTP_SetHTTPRequestContextValue(HTTPRequestHandle hRequest, ulong ulContextValue);

		[PreserveSig]
		[Token(Token = "0x600078E")]
		[Address(RVA = "0x1405000", Offset = "0x1405000", VA = "0x1405000")]
		public static extern bool ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(HTTPRequestHandle hRequest, uint unTimeoutSeconds);

		[PreserveSig]
		[Token(Token = "0x600078F")]
		[Address(RVA = "0x14050B8", Offset = "0x14050B8", VA = "0x14050B8")]
		public static extern bool ISteamHTTP_SetHTTPRequestHeaderValue(HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchHeaderName, InteropHelp.UTF8StringHandle pchHeaderValue);

		[PreserveSig]
		[Token(Token = "0x6000790")]
		[Address(RVA = "0x14051FC", Offset = "0x14051FC", VA = "0x14051FC")]
		public static extern bool ISteamHTTP_SetHTTPRequestGetOrPostParameter(HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchParamName, InteropHelp.UTF8StringHandle pchParamValue);

		[PreserveSig]
		[Token(Token = "0x6000791")]
		[Address(RVA = "0x1405340", Offset = "0x1405340", VA = "0x1405340")]
		public static extern bool ISteamHTTP_SendHTTPRequest(HTTPRequestHandle hRequest, out SteamAPICall_t pCallHandle);

		[PreserveSig]
		[Token(Token = "0x6000792")]
		[Address(RVA = "0x14053F8", Offset = "0x14053F8", VA = "0x14053F8")]
		public static extern bool ISteamHTTP_SendHTTPRequestAndStreamResponse(HTTPRequestHandle hRequest, out SteamAPICall_t pCallHandle);

		[PreserveSig]
		[Token(Token = "0x6000793")]
		[Address(RVA = "0x14054B0", Offset = "0x14054B0", VA = "0x14054B0")]
		public static extern bool ISteamHTTP_DeferHTTPRequest(HTTPRequestHandle hRequest);

		[PreserveSig]
		[Token(Token = "0x6000794")]
		[Address(RVA = "0x1405558", Offset = "0x1405558", VA = "0x1405558")]
		public static extern bool ISteamHTTP_PrioritizeHTTPRequest(HTTPRequestHandle hRequest);

		[PreserveSig]
		[Token(Token = "0x6000795")]
		[Address(RVA = "0x1405600", Offset = "0x1405600", VA = "0x1405600")]
		public static extern bool ISteamHTTP_GetHTTPResponseHeaderSize(HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchHeaderName, out uint unResponseHeaderSize);

		[PreserveSig]
		[Token(Token = "0x6000796")]
		[Address(RVA = "0x1405700", Offset = "0x1405700", VA = "0x1405700")]
		public static extern bool ISteamHTTP_GetHTTPResponseHeaderValue(HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchHeaderName, [In][Out] byte[] pHeaderValueBuffer, uint unBufferSize);

		[PreserveSig]
		[Token(Token = "0x6000797")]
		[Address(RVA = "0x1405818", Offset = "0x1405818", VA = "0x1405818")]
		public static extern bool ISteamHTTP_GetHTTPResponseBodySize(HTTPRequestHandle hRequest, out uint unBodySize);

		[PreserveSig]
		[Token(Token = "0x6000798")]
		[Address(RVA = "0x14058D0", Offset = "0x14058D0", VA = "0x14058D0")]
		public static extern bool ISteamHTTP_GetHTTPResponseBodyData(HTTPRequestHandle hRequest, [In][Out] byte[] pBodyDataBuffer, uint unBufferSize);

		[PreserveSig]
		[Token(Token = "0x6000799")]
		[Address(RVA = "0x1405998", Offset = "0x1405998", VA = "0x1405998")]
		public static extern bool ISteamHTTP_GetHTTPStreamingResponseBodyData(HTTPRequestHandle hRequest, uint cOffset, [In][Out] byte[] pBodyDataBuffer, uint unBufferSize);

		[PreserveSig]
		[Token(Token = "0x600079A")]
		[Address(RVA = "0x1405A70", Offset = "0x1405A70", VA = "0x1405A70")]
		public static extern bool ISteamHTTP_ReleaseHTTPRequest(HTTPRequestHandle hRequest);

		[PreserveSig]
		[Token(Token = "0x600079B")]
		[Address(RVA = "0x1405B18", Offset = "0x1405B18", VA = "0x1405B18")]
		public static extern bool ISteamHTTP_GetHTTPDownloadProgressPct(HTTPRequestHandle hRequest, out float pflPercentOut);

		[PreserveSig]
		[Token(Token = "0x600079C")]
		[Address(RVA = "0x1405BD0", Offset = "0x1405BD0", VA = "0x1405BD0")]
		public static extern bool ISteamHTTP_SetHTTPRequestRawPostBody(HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchContentType, [In][Out] byte[] pubBody, uint unBodyLen);

		[PreserveSig]
		[Token(Token = "0x600079D")]
		[Address(RVA = "0x1405CE8", Offset = "0x1405CE8", VA = "0x1405CE8")]
		public static extern uint ISteamHTTP_CreateCookieContainer(bool bAllowResponsesToModify);

		[PreserveSig]
		[Token(Token = "0x600079E")]
		[Address(RVA = "0x1405D88", Offset = "0x1405D88", VA = "0x1405D88")]
		public static extern bool ISteamHTTP_ReleaseCookieContainer(HTTPCookieContainerHandle hCookieContainer);

		[PreserveSig]
		[Token(Token = "0x600079F")]
		[Address(RVA = "0x1405E30", Offset = "0x1405E30", VA = "0x1405E30")]
		public static extern bool ISteamHTTP_SetCookie(HTTPCookieContainerHandle hCookieContainer, InteropHelp.UTF8StringHandle pchHost, InteropHelp.UTF8StringHandle pchUrl, InteropHelp.UTF8StringHandle pchCookie);

		[PreserveSig]
		[Token(Token = "0x60007A0")]
		[Address(RVA = "0x1405FC0", Offset = "0x1405FC0", VA = "0x1405FC0")]
		public static extern bool ISteamHTTP_SetHTTPRequestCookieContainer(HTTPRequestHandle hRequest, HTTPCookieContainerHandle hCookieContainer);

		[PreserveSig]
		[Token(Token = "0x60007A1")]
		[Address(RVA = "0x1406078", Offset = "0x1406078", VA = "0x1406078")]
		public static extern bool ISteamHTTP_SetHTTPRequestUserAgentInfo(HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchUserAgentInfo);

		[PreserveSig]
		[Token(Token = "0x60007A2")]
		[Address(RVA = "0x1406170", Offset = "0x1406170", VA = "0x1406170")]
		public static extern bool ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(HTTPRequestHandle hRequest, bool bRequireVerifiedCertificate);

		[PreserveSig]
		[Token(Token = "0x60007A3")]
		[Address(RVA = "0x1406228", Offset = "0x1406228", VA = "0x1406228")]
		public static extern bool ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(HTTPRequestHandle hRequest, uint unMilliseconds);

		[PreserveSig]
		[Token(Token = "0x60007A4")]
		[Address(RVA = "0x14062E0", Offset = "0x14062E0", VA = "0x14062E0")]
		public static extern bool ISteamHTTP_GetHTTPRequestWasTimedOut(HTTPRequestHandle hRequest, out bool pbWasTimedOut);

		[PreserveSig]
		[Token(Token = "0x60007A5")]
		[Address(RVA = "0x14063AC", Offset = "0x14063AC", VA = "0x14063AC")]
		public static extern EResult ISteamInventory_GetResultStatus(SteamInventoryResult_t resultHandle);

		[PreserveSig]
		[Token(Token = "0x60007A6")]
		[Address(RVA = "0x140644C", Offset = "0x140644C", VA = "0x140644C")]
		public static extern bool ISteamInventory_GetResultItems(SteamInventoryResult_t resultHandle, [In][Out] SteamItemDetails_t[] pOutItemsArray, ref uint punOutItemsArraySize);

		[PreserveSig]
		[Token(Token = "0x60007A7")]
		[Address(RVA = "0x1406514", Offset = "0x1406514", VA = "0x1406514")]
		public static extern uint ISteamInventory_GetResultTimestamp(SteamInventoryResult_t resultHandle);

		[PreserveSig]
		[Token(Token = "0x60007A8")]
		[Address(RVA = "0x14065B4", Offset = "0x14065B4", VA = "0x14065B4")]
		public static extern bool ISteamInventory_CheckResultSteamID(SteamInventoryResult_t resultHandle, CSteamID steamIDExpected);

		[PreserveSig]
		[Token(Token = "0x60007A9")]
		[Address(RVA = "0x140666C", Offset = "0x140666C", VA = "0x140666C")]
		public static extern void ISteamInventory_DestroyResult(SteamInventoryResult_t resultHandle);

		[PreserveSig]
		[Token(Token = "0x60007AA")]
		[Address(RVA = "0x140670C", Offset = "0x140670C", VA = "0x140670C")]
		public static extern bool ISteamInventory_GetAllItems(out SteamInventoryResult_t pResultHandle);

		[PreserveSig]
		[Token(Token = "0x60007AB")]
		[Address(RVA = "0x14067B4", Offset = "0x14067B4", VA = "0x14067B4")]
		public static extern bool ISteamInventory_GetItemsByID(out SteamInventoryResult_t pResultHandle, [In][Out] SteamItemInstanceID_t[] pInstanceIDs, uint unCountInstanceIDs);

		[PreserveSig]
		[Token(Token = "0x60007AC")]
		[Address(RVA = "0x140687C", Offset = "0x140687C", VA = "0x140687C")]
		public static extern bool ISteamInventory_SerializeResult(SteamInventoryResult_t resultHandle, [In][Out] byte[] pOutBuffer, out uint punOutBufferSize);

		[PreserveSig]
		[Token(Token = "0x60007AD")]
		[Address(RVA = "0x1406944", Offset = "0x1406944", VA = "0x1406944")]
		public static extern bool ISteamInventory_DeserializeResult(out SteamInventoryResult_t pOutResultHandle, [In][Out] byte[] pBuffer, uint unBufferSize, bool bRESERVED_MUST_BE_FALSE);

		[PreserveSig]
		[Token(Token = "0x60007AE")]
		[Address(RVA = "0x1406A1C", Offset = "0x1406A1C", VA = "0x1406A1C")]
		public static extern bool ISteamInventory_GenerateItems(out SteamInventoryResult_t pResultHandle, [In][Out] SteamItemDef_t[] pArrayItemDefs, [In][Out] uint[] punArrayQuantity, uint unArrayLength);

		[PreserveSig]
		[Token(Token = "0x60007AF")]
		[Address(RVA = "0x1406AFC", Offset = "0x1406AFC", VA = "0x1406AFC")]
		public static extern bool ISteamInventory_GrantPromoItems(out SteamInventoryResult_t pResultHandle);

		[PreserveSig]
		[Token(Token = "0x60007B0")]
		[Address(RVA = "0x1406BA4", Offset = "0x1406BA4", VA = "0x1406BA4")]
		public static extern bool ISteamInventory_AddPromoItem(out SteamInventoryResult_t pResultHandle, SteamItemDef_t itemDef);

		[PreserveSig]
		[Token(Token = "0x60007B1")]
		[Address(RVA = "0x1406C5C", Offset = "0x1406C5C", VA = "0x1406C5C")]
		public static extern bool ISteamInventory_AddPromoItems(out SteamInventoryResult_t pResultHandle, [In][Out] SteamItemDef_t[] pArrayItemDefs, uint unArrayLength);

		[PreserveSig]
		[Token(Token = "0x60007B2")]
		[Address(RVA = "0x1406D24", Offset = "0x1406D24", VA = "0x1406D24")]
		public static extern bool ISteamInventory_ConsumeItem(out SteamInventoryResult_t pResultHandle, SteamItemInstanceID_t itemConsume, uint unQuantity);

		[PreserveSig]
		[Token(Token = "0x60007B3")]
		[Address(RVA = "0x1406DE4", Offset = "0x1406DE4", VA = "0x1406DE4")]
		public static extern bool ISteamInventory_ExchangeItems(out SteamInventoryResult_t pResultHandle, [In][Out] SteamItemDef_t[] pArrayGenerate, [In][Out] uint[] punArrayGenerateQuantity, uint unArrayGenerateLength, [In][Out] SteamItemInstanceID_t[] pArrayDestroy, [In][Out] uint[] punArrayDestroyQuantity, uint unArrayDestroyLength);

		[PreserveSig]
		[Token(Token = "0x60007B4")]
		[Address(RVA = "0x1406EF4", Offset = "0x1406EF4", VA = "0x1406EF4")]
		public static extern bool ISteamInventory_TransferItemQuantity(out SteamInventoryResult_t pResultHandle, SteamItemInstanceID_t itemIdSource, uint unQuantity, SteamItemInstanceID_t itemIdDest);

		[PreserveSig]
		[Token(Token = "0x60007B5")]
		[Address(RVA = "0x1406FC4", Offset = "0x1406FC4", VA = "0x1406FC4")]
		public static extern void ISteamInventory_SendItemDropHeartbeat();

		[PreserveSig]
		[Token(Token = "0x60007B6")]
		[Address(RVA = "0x1407054", Offset = "0x1407054", VA = "0x1407054")]
		public static extern bool ISteamInventory_TriggerItemDrop(out SteamInventoryResult_t pResultHandle, SteamItemDef_t dropListDefinition);

		[PreserveSig]
		[Token(Token = "0x60007B7")]
		[Address(RVA = "0x140710C", Offset = "0x140710C", VA = "0x140710C")]
		public static extern bool ISteamInventory_TradeItems(out SteamInventoryResult_t pResultHandle, CSteamID steamIDTradePartner, [In][Out] SteamItemInstanceID_t[] pArrayGive, [In][Out] uint[] pArrayGiveQuantity, uint nArrayGiveLength, [In][Out] SteamItemInstanceID_t[] pArrayGet, [In][Out] uint[] pArrayGetQuantity, uint nArrayGetLength);

		[PreserveSig]
		[Token(Token = "0x60007B8")]
		[Address(RVA = "0x140722C", Offset = "0x140722C", VA = "0x140722C")]
		public static extern bool ISteamInventory_LoadItemDefinitions();

		[PreserveSig]
		[Token(Token = "0x60007B9")]
		[Address(RVA = "0x14072C4", Offset = "0x14072C4", VA = "0x14072C4")]
		public static extern bool ISteamInventory_GetItemDefinitionIDs([In][Out] SteamItemDef_t[] pItemDefIDs, out uint punItemDefIDsArraySize);

		[PreserveSig]
		[Token(Token = "0x60007BA")]
		[Address(RVA = "0x1407384", Offset = "0x1407384", VA = "0x1407384")]
		public static extern bool ISteamInventory_GetItemDefinitionProperty(SteamItemDef_t iDefinition, InteropHelp.UTF8StringHandle pchPropertyName, IntPtr pchValueBuffer, ref uint punValueBufferSize);

		[PreserveSig]
		[Token(Token = "0x60007BB")]
		[Address(RVA = "0x1407494", Offset = "0x1407494", VA = "0x1407494")]
		public static extern int ISteamMatchmaking_GetFavoriteGameCount();

		[PreserveSig]
		[Token(Token = "0x60007BC")]
		[Address(RVA = "0x1407524", Offset = "0x1407524", VA = "0x1407524")]
		public static extern bool ISteamMatchmaking_GetFavoriteGame(int iGame, out AppId_t pnAppID, out uint pnIP, out ushort pnConnPort, out ushort pnQueryPort, out uint punFlags, out uint pRTime32LastPlayedOnServer);

		[PreserveSig]
		[Token(Token = "0x60007BD")]
		[Address(RVA = "0x1407614", Offset = "0x1407614", VA = "0x1407614")]
		public static extern int ISteamMatchmaking_AddFavoriteGame(AppId_t nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags, uint rTime32LastPlayedOnServer);

		[PreserveSig]
		[Token(Token = "0x60007BE")]
		[Address(RVA = "0x14076F4", Offset = "0x14076F4", VA = "0x14076F4")]
		public static extern bool ISteamMatchmaking_RemoveFavoriteGame(AppId_t nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags);

		[PreserveSig]
		[Token(Token = "0x60007BF")]
		[Address(RVA = "0x14077CC", Offset = "0x14077CC", VA = "0x14077CC")]
		public static extern ulong ISteamMatchmaking_RequestLobbyList();

		[PreserveSig]
		[Token(Token = "0x60007C0")]
		[Address(RVA = "0x140785C", Offset = "0x140785C", VA = "0x140785C")]
		public static extern void ISteamMatchmaking_AddRequestLobbyListStringFilter(InteropHelp.UTF8StringHandle pchKeyToMatch, InteropHelp.UTF8StringHandle pchValueToMatch, ELobbyComparison eComparisonType);

		[PreserveSig]
		[Token(Token = "0x60007C1")]
		[Address(RVA = "0x1407994", Offset = "0x1407994", VA = "0x1407994")]
		public static extern void ISteamMatchmaking_AddRequestLobbyListNumericalFilter(InteropHelp.UTF8StringHandle pchKeyToMatch, int nValueToMatch, ELobbyComparison eComparisonType);

		[PreserveSig]
		[Token(Token = "0x60007C2")]
		[Address(RVA = "0x1407A88", Offset = "0x1407A88", VA = "0x1407A88")]
		public static extern void ISteamMatchmaking_AddRequestLobbyListNearValueFilter(InteropHelp.UTF8StringHandle pchKeyToMatch, int nValueToBeCloseTo);

		[PreserveSig]
		[Token(Token = "0x60007C3")]
		[Address(RVA = "0x1407B74", Offset = "0x1407B74", VA = "0x1407B74")]
		public static extern void ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(int nSlotsAvailable);

		[PreserveSig]
		[Token(Token = "0x60007C4")]
		[Address(RVA = "0x1407C14", Offset = "0x1407C14", VA = "0x1407C14")]
		public static extern void ISteamMatchmaking_AddRequestLobbyListDistanceFilter(ELobbyDistanceFilter eLobbyDistanceFilter);

		[PreserveSig]
		[Token(Token = "0x60007C5")]
		[Address(RVA = "0x1407CB4", Offset = "0x1407CB4", VA = "0x1407CB4")]
		public static extern void ISteamMatchmaking_AddRequestLobbyListResultCountFilter(int cMaxResults);

		[PreserveSig]
		[Token(Token = "0x60007C6")]
		[Address(RVA = "0x1407D54", Offset = "0x1407D54", VA = "0x1407D54")]
		public static extern void ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(CSteamID steamIDLobby);

		[PreserveSig]
		[Token(Token = "0x60007C7")]
		[Address(RVA = "0x1407DF4", Offset = "0x1407DF4", VA = "0x1407DF4")]
		public static extern ulong ISteamMatchmaking_GetLobbyByIndex(int iLobby);

		[PreserveSig]
		[Token(Token = "0x60007C8")]
		[Address(RVA = "0x1407E94", Offset = "0x1407E94", VA = "0x1407E94")]
		public static extern ulong ISteamMatchmaking_CreateLobby(ELobbyType eLobbyType, int cMaxMembers);

		[PreserveSig]
		[Token(Token = "0x60007C9")]
		[Address(RVA = "0x1407F44", Offset = "0x1407F44", VA = "0x1407F44")]
		public static extern ulong ISteamMatchmaking_JoinLobby(CSteamID steamIDLobby);

		[PreserveSig]
		[Token(Token = "0x60007CA")]
		[Address(RVA = "0x1407FE4", Offset = "0x1407FE4", VA = "0x1407FE4")]
		public static extern void ISteamMatchmaking_LeaveLobby(CSteamID steamIDLobby);

		[PreserveSig]
		[Token(Token = "0x60007CB")]
		[Address(RVA = "0x1408084", Offset = "0x1408084", VA = "0x1408084")]
		public static extern bool ISteamMatchmaking_InviteUserToLobby(CSteamID steamIDLobby, CSteamID steamIDInvitee);

		[PreserveSig]
		[Token(Token = "0x60007CC")]
		[Address(RVA = "0x140813C", Offset = "0x140813C", VA = "0x140813C")]
		public static extern int ISteamMatchmaking_GetNumLobbyMembers(CSteamID steamIDLobby);

		[PreserveSig]
		[Token(Token = "0x60007CD")]
		[Address(RVA = "0x14081DC", Offset = "0x14081DC", VA = "0x14081DC")]
		public static extern ulong ISteamMatchmaking_GetLobbyMemberByIndex(CSteamID steamIDLobby, int iMember);

		[PreserveSig]
		[Token(Token = "0x60007CE")]
		[Address(RVA = "0x140828C", Offset = "0x140828C", VA = "0x140828C")]
		public static extern IntPtr ISteamMatchmaking_GetLobbyData(CSteamID steamIDLobby, InteropHelp.UTF8StringHandle pchKey);

		[PreserveSig]
		[Token(Token = "0x60007CF")]
		[Address(RVA = "0x1408380", Offset = "0x1408380", VA = "0x1408380")]
		public static extern bool ISteamMatchmaking_SetLobbyData(CSteamID steamIDLobby, InteropHelp.UTF8StringHandle pchKey, InteropHelp.UTF8StringHandle pchValue);

		[PreserveSig]
		[Token(Token = "0x60007D0")]
		[Address(RVA = "0x14084C4", Offset = "0x14084C4", VA = "0x14084C4")]
		public static extern int ISteamMatchmaking_GetLobbyDataCount(CSteamID steamIDLobby);

		[PreserveSig]
		[Token(Token = "0x60007D1")]
		[Address(RVA = "0x1408564", Offset = "0x1408564", VA = "0x1408564")]
		public static extern bool ISteamMatchmaking_GetLobbyDataByIndex(CSteamID steamIDLobby, int iLobbyData, IntPtr pchKey, int cchKeyBufferSize, IntPtr pchValue, int cchValueBufferSize);

		[PreserveSig]
		[Token(Token = "0x60007D2")]
		[Address(RVA = "0x140864C", Offset = "0x140864C", VA = "0x140864C")]
		public static extern bool ISteamMatchmaking_DeleteLobbyData(CSteamID steamIDLobby, InteropHelp.UTF8StringHandle pchKey);

		[PreserveSig]
		[Token(Token = "0x60007D3")]
		[Address(RVA = "0x1408744", Offset = "0x1408744", VA = "0x1408744")]
		public static extern IntPtr ISteamMatchmaking_GetLobbyMemberData(CSteamID steamIDLobby, CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchKey);

		[PreserveSig]
		[Token(Token = "0x60007D4")]
		[Address(RVA = "0x1408840", Offset = "0x1408840", VA = "0x1408840")]
		public static extern void ISteamMatchmaking_SetLobbyMemberData(CSteamID steamIDLobby, InteropHelp.UTF8StringHandle pchKey, InteropHelp.UTF8StringHandle pchValue);

		[PreserveSig]
		[Token(Token = "0x60007D5")]
		[Address(RVA = "0x1408978", Offset = "0x1408978", VA = "0x1408978")]
		public static extern bool ISteamMatchmaking_SendLobbyChatMsg(CSteamID steamIDLobby, [In][Out] byte[] pvMsgBody, int cubMsgBody);

		[PreserveSig]
		[Token(Token = "0x60007D6")]
		[Address(RVA = "0x1408A40", Offset = "0x1408A40", VA = "0x1408A40")]
		public static extern int ISteamMatchmaking_GetLobbyChatEntry(CSteamID steamIDLobby, int iChatID, out CSteamID pSteamIDUser, [In][Out] byte[] pvData, int cubData, out EChatEntryType peChatEntryType);

		[PreserveSig]
		[Token(Token = "0x60007D7")]
		[Address(RVA = "0x1408B28", Offset = "0x1408B28", VA = "0x1408B28")]
		public static extern bool ISteamMatchmaking_RequestLobbyData(CSteamID steamIDLobby);

		[PreserveSig]
		[Token(Token = "0x60007D8")]
		[Address(RVA = "0x1408BD0", Offset = "0x1408BD0", VA = "0x1408BD0")]
		public static extern void ISteamMatchmaking_SetLobbyGameServer(CSteamID steamIDLobby, uint unGameServerIP, ushort unGameServerPort, CSteamID steamIDGameServer);

		[PreserveSig]
		[Token(Token = "0x60007D9")]
		[Address(RVA = "0x1408C98", Offset = "0x1408C98", VA = "0x1408C98")]
		public static extern bool ISteamMatchmaking_GetLobbyGameServer(CSteamID steamIDLobby, out uint punGameServerIP, out ushort punGameServerPort, out CSteamID psteamIDGameServer);

		[PreserveSig]
		[Token(Token = "0x60007DA")]
		[Address(RVA = "0x1408D68", Offset = "0x1408D68", VA = "0x1408D68")]
		public static extern bool ISteamMatchmaking_SetLobbyMemberLimit(CSteamID steamIDLobby, int cMaxMembers);

		[PreserveSig]
		[Token(Token = "0x60007DB")]
		[Address(RVA = "0x1408E20", Offset = "0x1408E20", VA = "0x1408E20")]
		public static extern int ISteamMatchmaking_GetLobbyMemberLimit(CSteamID steamIDLobby);

		[PreserveSig]
		[Token(Token = "0x60007DC")]
		[Address(RVA = "0x1408EC0", Offset = "0x1408EC0", VA = "0x1408EC0")]
		public static extern bool ISteamMatchmaking_SetLobbyType(CSteamID steamIDLobby, ELobbyType eLobbyType);

		[PreserveSig]
		[Token(Token = "0x60007DD")]
		[Address(RVA = "0x1408F78", Offset = "0x1408F78", VA = "0x1408F78")]
		public static extern bool ISteamMatchmaking_SetLobbyJoinable(CSteamID steamIDLobby, bool bLobbyJoinable);

		[PreserveSig]
		[Token(Token = "0x60007DE")]
		[Address(RVA = "0x1409030", Offset = "0x1409030", VA = "0x1409030")]
		public static extern ulong ISteamMatchmaking_GetLobbyOwner(CSteamID steamIDLobby);

		[PreserveSig]
		[Token(Token = "0x60007DF")]
		[Address(RVA = "0x14090D0", Offset = "0x14090D0", VA = "0x14090D0")]
		public static extern bool ISteamMatchmaking_SetLobbyOwner(CSteamID steamIDLobby, CSteamID steamIDNewOwner);

		[PreserveSig]
		[Token(Token = "0x60007E0")]
		[Address(RVA = "0x1409188", Offset = "0x1409188", VA = "0x1409188")]
		public static extern bool ISteamMatchmaking_SetLinkedLobby(CSteamID steamIDLobby, CSteamID steamIDLobbyDependent);

		[PreserveSig]
		[Token(Token = "0x60007E1")]
		[Address(RVA = "0x1409240", Offset = "0x1409240", VA = "0x1409240")]
		public static extern IntPtr ISteamMatchmakingServers_RequestInternetServerList(AppId_t iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

		[PreserveSig]
		[Token(Token = "0x60007E2")]
		[Address(RVA = "0x1409308", Offset = "0x1409308", VA = "0x1409308")]
		public static extern IntPtr ISteamMatchmakingServers_RequestLANServerList(AppId_t iApp, IntPtr pRequestServersResponse);

		[PreserveSig]
		[Token(Token = "0x60007E3")]
		[Address(RVA = "0x14093B8", Offset = "0x14093B8", VA = "0x14093B8")]
		public static extern IntPtr ISteamMatchmakingServers_RequestFriendsServerList(AppId_t iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

		[PreserveSig]
		[Token(Token = "0x60007E4")]
		[Address(RVA = "0x1409480", Offset = "0x1409480", VA = "0x1409480")]
		public static extern IntPtr ISteamMatchmakingServers_RequestFavoritesServerList(AppId_t iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

		[PreserveSig]
		[Token(Token = "0x60007E5")]
		[Address(RVA = "0x1409548", Offset = "0x1409548", VA = "0x1409548")]
		public static extern IntPtr ISteamMatchmakingServers_RequestHistoryServerList(AppId_t iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

		[PreserveSig]
		[Token(Token = "0x60007E6")]
		[Address(RVA = "0x1409610", Offset = "0x1409610", VA = "0x1409610")]
		public static extern IntPtr ISteamMatchmakingServers_RequestSpectatorServerList(AppId_t iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

		[PreserveSig]
		[Token(Token = "0x60007E7")]
		[Address(RVA = "0x14096D8", Offset = "0x14096D8", VA = "0x14096D8")]
		public static extern void ISteamMatchmakingServers_ReleaseRequest(HServerListRequest hServerListRequest);

		[PreserveSig]
		[Token(Token = "0x60007E8")]
		[Address(RVA = "0x1409778", Offset = "0x1409778", VA = "0x1409778")]
		public static extern IntPtr ISteamMatchmakingServers_GetServerDetails(HServerListRequest hRequest, int iServer);

		[PreserveSig]
		[Token(Token = "0x60007E9")]
		[Address(RVA = "0x1409828", Offset = "0x1409828", VA = "0x1409828")]
		public static extern void ISteamMatchmakingServers_CancelQuery(HServerListRequest hRequest);

		[PreserveSig]
		[Token(Token = "0x60007EA")]
		[Address(RVA = "0x14098C8", Offset = "0x14098C8", VA = "0x14098C8")]
		public static extern void ISteamMatchmakingServers_RefreshQuery(HServerListRequest hRequest);

		[PreserveSig]
		[Token(Token = "0x60007EB")]
		[Address(RVA = "0x1409968", Offset = "0x1409968", VA = "0x1409968")]
		public static extern bool ISteamMatchmakingServers_IsRefreshing(HServerListRequest hRequest);

		[PreserveSig]
		[Token(Token = "0x60007EC")]
		[Address(RVA = "0x1409A10", Offset = "0x1409A10", VA = "0x1409A10")]
		public static extern int ISteamMatchmakingServers_GetServerCount(HServerListRequest hRequest);

		[PreserveSig]
		[Token(Token = "0x60007ED")]
		[Address(RVA = "0x1409AB0", Offset = "0x1409AB0", VA = "0x1409AB0")]
		public static extern void ISteamMatchmakingServers_RefreshServer(HServerListRequest hRequest, int iServer);

		[PreserveSig]
		[Token(Token = "0x60007EE")]
		[Address(RVA = "0x1409B60", Offset = "0x1409B60", VA = "0x1409B60")]
		public static extern int ISteamMatchmakingServers_PingServer(uint unIP, ushort usPort, IntPtr pRequestServersResponse);

		[PreserveSig]
		[Token(Token = "0x60007EF")]
		[Address(RVA = "0x1409C18", Offset = "0x1409C18", VA = "0x1409C18")]
		public static extern int ISteamMatchmakingServers_PlayerDetails(uint unIP, ushort usPort, IntPtr pRequestServersResponse);

		[PreserveSig]
		[Token(Token = "0x60007F0")]
		[Address(RVA = "0x1409CD0", Offset = "0x1409CD0", VA = "0x1409CD0")]
		public static extern int ISteamMatchmakingServers_ServerRules(uint unIP, ushort usPort, IntPtr pRequestServersResponse);

		[PreserveSig]
		[Token(Token = "0x60007F1")]
		[Address(RVA = "0x1409D88", Offset = "0x1409D88", VA = "0x1409D88")]
		public static extern void ISteamMatchmakingServers_CancelServerQuery(HServerQuery hServerQuery);

		[PreserveSig]
		[Token(Token = "0x60007F2")]
		[Address(RVA = "0x1409E28", Offset = "0x1409E28", VA = "0x1409E28")]
		public static extern bool ISteamMusic_BIsEnabled();

		[PreserveSig]
		[Token(Token = "0x60007F3")]
		[Address(RVA = "0x1409EC0", Offset = "0x1409EC0", VA = "0x1409EC0")]
		public static extern bool ISteamMusic_BIsPlaying();

		[PreserveSig]
		[Token(Token = "0x60007F4")]
		[Address(RVA = "0x1409F58", Offset = "0x1409F58", VA = "0x1409F58")]
		public static extern AudioPlayback_Status ISteamMusic_GetPlaybackStatus();

		[PreserveSig]
		[Token(Token = "0x60007F5")]
		[Address(RVA = "0x1409FE8", Offset = "0x1409FE8", VA = "0x1409FE8")]
		public static extern void ISteamMusic_Play();

		[PreserveSig]
		[Token(Token = "0x60007F6")]
		[Address(RVA = "0x140A078", Offset = "0x140A078", VA = "0x140A078")]
		public static extern void ISteamMusic_Pause();

		[PreserveSig]
		[Token(Token = "0x60007F7")]
		[Address(RVA = "0x140A108", Offset = "0x140A108", VA = "0x140A108")]
		public static extern void ISteamMusic_PlayPrevious();

		[PreserveSig]
		[Token(Token = "0x60007F8")]
		[Address(RVA = "0x140A198", Offset = "0x140A198", VA = "0x140A198")]
		public static extern void ISteamMusic_PlayNext();

		[PreserveSig]
		[Token(Token = "0x60007F9")]
		[Address(RVA = "0x140A228", Offset = "0x140A228", VA = "0x140A228")]
		public static extern void ISteamMusic_SetVolume(float flVolume);

		[PreserveSig]
		[Token(Token = "0x60007FA")]
		[Address(RVA = "0x140A2CC", Offset = "0x140A2CC", VA = "0x140A2CC")]
		public static extern float ISteamMusic_GetVolume();

		[PreserveSig]
		[Token(Token = "0x60007FB")]
		[Address(RVA = "0x140A35C", Offset = "0x140A35C", VA = "0x140A35C")]
		public static extern bool ISteamMusicRemote_RegisterSteamMusicRemote(InteropHelp.UTF8StringHandle pchName);

		[PreserveSig]
		[Token(Token = "0x60007FC")]
		[Address(RVA = "0x140A444", Offset = "0x140A444", VA = "0x140A444")]
		public static extern bool ISteamMusicRemote_DeregisterSteamMusicRemote();

		[PreserveSig]
		[Token(Token = "0x60007FD")]
		[Address(RVA = "0x140A4DC", Offset = "0x140A4DC", VA = "0x140A4DC")]
		public static extern bool ISteamMusicRemote_BIsCurrentMusicRemote();

		[PreserveSig]
		[Token(Token = "0x60007FE")]
		[Address(RVA = "0x140A574", Offset = "0x140A574", VA = "0x140A574")]
		public static extern bool ISteamMusicRemote_BActivationSuccess(bool bValue);

		[PreserveSig]
		[Token(Token = "0x60007FF")]
		[Address(RVA = "0x140A61C", Offset = "0x140A61C", VA = "0x140A61C")]
		public static extern bool ISteamMusicRemote_SetDisplayName(InteropHelp.UTF8StringHandle pchDisplayName);

		[PreserveSig]
		[Token(Token = "0x6000800")]
		[Address(RVA = "0x140A704", Offset = "0x140A704", VA = "0x140A704")]
		public static extern bool ISteamMusicRemote_SetPNGIcon_64x64([In][Out] byte[] pvBuffer, uint cbBufferLength);

		[PreserveSig]
		[Token(Token = "0x6000801")]
		[Address(RVA = "0x140A7C4", Offset = "0x140A7C4", VA = "0x140A7C4")]
		public static extern bool ISteamMusicRemote_EnablePlayPrevious(bool bValue);

		[PreserveSig]
		[Token(Token = "0x6000802")]
		[Address(RVA = "0x140A86C", Offset = "0x140A86C", VA = "0x140A86C")]
		public static extern bool ISteamMusicRemote_EnablePlayNext(bool bValue);

		[PreserveSig]
		[Token(Token = "0x6000803")]
		[Address(RVA = "0x140A914", Offset = "0x140A914", VA = "0x140A914")]
		public static extern bool ISteamMusicRemote_EnableShuffled(bool bValue);

		[PreserveSig]
		[Token(Token = "0x6000804")]
		[Address(RVA = "0x140A9BC", Offset = "0x140A9BC", VA = "0x140A9BC")]
		public static extern bool ISteamMusicRemote_EnableLooped(bool bValue);

		[PreserveSig]
		[Token(Token = "0x6000805")]
		[Address(RVA = "0x140AA64", Offset = "0x140AA64", VA = "0x140AA64")]
		public static extern bool ISteamMusicRemote_EnableQueue(bool bValue);

		[PreserveSig]
		[Token(Token = "0x6000806")]
		[Address(RVA = "0x140AB0C", Offset = "0x140AB0C", VA = "0x140AB0C")]
		public static extern bool ISteamMusicRemote_EnablePlaylists(bool bValue);

		[PreserveSig]
		[Token(Token = "0x6000807")]
		[Address(RVA = "0x140ABB4", Offset = "0x140ABB4", VA = "0x140ABB4")]
		public static extern bool ISteamMusicRemote_UpdatePlaybackStatus(AudioPlayback_Status nStatus);

		[PreserveSig]
		[Token(Token = "0x6000808")]
		[Address(RVA = "0x140AC5C", Offset = "0x140AC5C", VA = "0x140AC5C")]
		public static extern bool ISteamMusicRemote_UpdateShuffled(bool bValue);

		[PreserveSig]
		[Token(Token = "0x6000809")]
		[Address(RVA = "0x140AD04", Offset = "0x140AD04", VA = "0x140AD04")]
		public static extern bool ISteamMusicRemote_UpdateLooped(bool bValue);

		[PreserveSig]
		[Token(Token = "0x600080A")]
		[Address(RVA = "0x140ADAC", Offset = "0x140ADAC", VA = "0x140ADAC")]
		public static extern bool ISteamMusicRemote_UpdateVolume(float flValue);

		[PreserveSig]
		[Token(Token = "0x600080B")]
		[Address(RVA = "0x140AE58", Offset = "0x140AE58", VA = "0x140AE58")]
		public static extern bool ISteamMusicRemote_CurrentEntryWillChange();

		[PreserveSig]
		[Token(Token = "0x600080C")]
		[Address(RVA = "0x140AEF0", Offset = "0x140AEF0", VA = "0x140AEF0")]
		public static extern bool ISteamMusicRemote_CurrentEntryIsAvailable(bool bAvailable);

		[PreserveSig]
		[Token(Token = "0x600080D")]
		[Address(RVA = "0x140AF98", Offset = "0x140AF98", VA = "0x140AF98")]
		public static extern bool ISteamMusicRemote_UpdateCurrentEntryText(InteropHelp.UTF8StringHandle pchText);

		[PreserveSig]
		[Token(Token = "0x600080E")]
		[Address(RVA = "0x140B080", Offset = "0x140B080", VA = "0x140B080")]
		public static extern bool ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(int nValue);

		[PreserveSig]
		[Token(Token = "0x600080F")]
		[Address(RVA = "0x140B128", Offset = "0x140B128", VA = "0x140B128")]
		public static extern bool ISteamMusicRemote_UpdateCurrentEntryCoverArt([In][Out] byte[] pvBuffer, uint cbBufferLength);

		[PreserveSig]
		[Token(Token = "0x6000810")]
		[Address(RVA = "0x140B1E8", Offset = "0x140B1E8", VA = "0x140B1E8")]
		public static extern bool ISteamMusicRemote_CurrentEntryDidChange();

		[PreserveSig]
		[Token(Token = "0x6000811")]
		[Address(RVA = "0x140B280", Offset = "0x140B280", VA = "0x140B280")]
		public static extern bool ISteamMusicRemote_QueueWillChange();

		[PreserveSig]
		[Token(Token = "0x6000812")]
		[Address(RVA = "0x140B318", Offset = "0x140B318", VA = "0x140B318")]
		public static extern bool ISteamMusicRemote_ResetQueueEntries();

		[PreserveSig]
		[Token(Token = "0x6000813")]
		[Address(RVA = "0x140B3B0", Offset = "0x140B3B0", VA = "0x140B3B0")]
		public static extern bool ISteamMusicRemote_SetQueueEntry(int nID, int nPosition, InteropHelp.UTF8StringHandle pchEntryText);

		[PreserveSig]
		[Token(Token = "0x6000814")]
		[Address(RVA = "0x140B4B0", Offset = "0x140B4B0", VA = "0x140B4B0")]
		public static extern bool ISteamMusicRemote_SetCurrentQueueEntry(int nID);

		[PreserveSig]
		[Token(Token = "0x6000815")]
		[Address(RVA = "0x140B558", Offset = "0x140B558", VA = "0x140B558")]
		public static extern bool ISteamMusicRemote_QueueDidChange();

		[PreserveSig]
		[Token(Token = "0x6000816")]
		[Address(RVA = "0x140B5F0", Offset = "0x140B5F0", VA = "0x140B5F0")]
		public static extern bool ISteamMusicRemote_PlaylistWillChange();

		[PreserveSig]
		[Token(Token = "0x6000817")]
		[Address(RVA = "0x140B688", Offset = "0x140B688", VA = "0x140B688")]
		public static extern bool ISteamMusicRemote_ResetPlaylistEntries();

		[PreserveSig]
		[Token(Token = "0x6000818")]
		[Address(RVA = "0x140B720", Offset = "0x140B720", VA = "0x140B720")]
		public static extern bool ISteamMusicRemote_SetPlaylistEntry(int nID, int nPosition, InteropHelp.UTF8StringHandle pchEntryText);

		[PreserveSig]
		[Token(Token = "0x6000819")]
		[Address(RVA = "0x140B820", Offset = "0x140B820", VA = "0x140B820")]
		public static extern bool ISteamMusicRemote_SetCurrentPlaylistEntry(int nID);

		[PreserveSig]
		[Token(Token = "0x600081A")]
		[Address(RVA = "0x140B8C8", Offset = "0x140B8C8", VA = "0x140B8C8")]
		public static extern bool ISteamMusicRemote_PlaylistDidChange();

		[PreserveSig]
		[Token(Token = "0x600081B")]
		[Address(RVA = "0x140B960", Offset = "0x140B960", VA = "0x140B960")]
		public static extern bool ISteamNetworking_SendP2PPacket(CSteamID steamIDRemote, [In][Out] byte[] pubData, uint cubData, EP2PSend eP2PSendType, int nChannel);

		[PreserveSig]
		[Token(Token = "0x600081C")]
		[Address(RVA = "0x140BA40", Offset = "0x140BA40", VA = "0x140BA40")]
		public static extern bool ISteamNetworking_IsP2PPacketAvailable(out uint pcubMsgSize, int nChannel);

		[PreserveSig]
		[Token(Token = "0x600081D")]
		[Address(RVA = "0x140BAF8", Offset = "0x140BAF8", VA = "0x140BAF8")]
		public static extern bool ISteamNetworking_ReadP2PPacket([In][Out] byte[] pubDest, uint cubDest, out uint pcubMsgSize, out CSteamID psteamIDRemote, int nChannel);

		[PreserveSig]
		[Token(Token = "0x600081E")]
		[Address(RVA = "0x140BBD8", Offset = "0x140BBD8", VA = "0x140BBD8")]
		public static extern bool ISteamNetworking_AcceptP2PSessionWithUser(CSteamID steamIDRemote);

		[PreserveSig]
		[Token(Token = "0x600081F")]
		[Address(RVA = "0x140BC80", Offset = "0x140BC80", VA = "0x140BC80")]
		public static extern bool ISteamNetworking_CloseP2PSessionWithUser(CSteamID steamIDRemote);

		[PreserveSig]
		[Token(Token = "0x6000820")]
		[Address(RVA = "0x140BD28", Offset = "0x140BD28", VA = "0x140BD28")]
		public static extern bool ISteamNetworking_CloseP2PChannelWithUser(CSteamID steamIDRemote, int nChannel);

		[PreserveSig]
		[Token(Token = "0x6000821")]
		[Address(RVA = "0x140BDE0", Offset = "0x140BDE0", VA = "0x140BDE0")]
		public static extern bool ISteamNetworking_GetP2PSessionState(CSteamID steamIDRemote, out P2PSessionState_t pConnectionState);

		[PreserveSig]
		[Token(Token = "0x6000822")]
		[Address(RVA = "0x140BE98", Offset = "0x140BE98", VA = "0x140BE98")]
		public static extern bool ISteamNetworking_AllowP2PPacketRelay(bool bAllow);

		[PreserveSig]
		[Token(Token = "0x6000823")]
		[Address(RVA = "0x140BF40", Offset = "0x140BF40", VA = "0x140BF40")]
		public static extern uint ISteamNetworking_CreateListenSocket(int nVirtualP2PPort, uint nIP, ushort nPort, bool bAllowUseOfPacketRelay);

		[PreserveSig]
		[Token(Token = "0x6000824")]
		[Address(RVA = "0x140C008", Offset = "0x140C008", VA = "0x140C008")]
		public static extern uint ISteamNetworking_CreateP2PConnectionSocket(CSteamID steamIDTarget, int nVirtualPort, int nTimeoutSec, bool bAllowUseOfPacketRelay);

		[PreserveSig]
		[Token(Token = "0x6000825")]
		[Address(RVA = "0x140C0D0", Offset = "0x140C0D0", VA = "0x140C0D0")]
		public static extern uint ISteamNetworking_CreateConnectionSocket(uint nIP, ushort nPort, int nTimeoutSec);

		[PreserveSig]
		[Token(Token = "0x6000826")]
		[Address(RVA = "0x140C188", Offset = "0x140C188", VA = "0x140C188")]
		public static extern bool ISteamNetworking_DestroySocket(SNetSocket_t hSocket, bool bNotifyRemoteEnd);

		[PreserveSig]
		[Token(Token = "0x6000827")]
		[Address(RVA = "0x140C240", Offset = "0x140C240", VA = "0x140C240")]
		public static extern bool ISteamNetworking_DestroyListenSocket(SNetListenSocket_t hSocket, bool bNotifyRemoteEnd);

		[PreserveSig]
		[Token(Token = "0x6000828")]
		[Address(RVA = "0x140C2F8", Offset = "0x140C2F8", VA = "0x140C2F8")]
		public static extern bool ISteamNetworking_SendDataOnSocket(SNetSocket_t hSocket, IntPtr pubData, uint cubData, bool bReliable);

		[PreserveSig]
		[Token(Token = "0x6000829")]
		[Address(RVA = "0x140C3C8", Offset = "0x140C3C8", VA = "0x140C3C8")]
		public static extern bool ISteamNetworking_IsDataAvailableOnSocket(SNetSocket_t hSocket, out uint pcubMsgSize);

		[PreserveSig]
		[Token(Token = "0x600082A")]
		[Address(RVA = "0x140C480", Offset = "0x140C480", VA = "0x140C480")]
		public static extern bool ISteamNetworking_RetrieveDataFromSocket(SNetSocket_t hSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize);

		[PreserveSig]
		[Token(Token = "0x600082B")]
		[Address(RVA = "0x140C550", Offset = "0x140C550", VA = "0x140C550")]
		public static extern bool ISteamNetworking_IsDataAvailable(SNetListenSocket_t hListenSocket, out uint pcubMsgSize, out SNetSocket_t phSocket);

		[PreserveSig]
		[Token(Token = "0x600082C")]
		[Address(RVA = "0x140C610", Offset = "0x140C610", VA = "0x140C610")]
		public static extern bool ISteamNetworking_RetrieveData(SNetListenSocket_t hListenSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize, out SNetSocket_t phSocket);

		[PreserveSig]
		[Token(Token = "0x600082D")]
		[Address(RVA = "0x140C6E8", Offset = "0x140C6E8", VA = "0x140C6E8")]
		public static extern bool ISteamNetworking_GetSocketInfo(SNetSocket_t hSocket, out CSteamID pSteamIDRemote, out int peSocketStatus, out uint punIPRemote, out ushort punPortRemote);

		[PreserveSig]
		[Token(Token = "0x600082E")]
		[Address(RVA = "0x140C7C0", Offset = "0x140C7C0", VA = "0x140C7C0")]
		public static extern bool ISteamNetworking_GetListenSocketInfo(SNetListenSocket_t hListenSocket, out uint pnIP, out ushort pnPort);

		[PreserveSig]
		[Token(Token = "0x600082F")]
		[Address(RVA = "0x140C880", Offset = "0x140C880", VA = "0x140C880")]
		public static extern ESNetSocketConnectionType ISteamNetworking_GetSocketConnectionType(SNetSocket_t hSocket);

		[PreserveSig]
		[Token(Token = "0x6000830")]
		[Address(RVA = "0x140C920", Offset = "0x140C920", VA = "0x140C920")]
		public static extern int ISteamNetworking_GetMaxPacketSize(SNetSocket_t hSocket);

		[PreserveSig]
		[Token(Token = "0x6000831")]
		[Address(RVA = "0x140C9C0", Offset = "0x140C9C0", VA = "0x140C9C0")]
		public static extern bool ISteamRemoteStorage_FileWrite(InteropHelp.UTF8StringHandle pchFile, [In][Out] byte[] pvData, int cubData);

		[PreserveSig]
		[Token(Token = "0x6000832")]
		[Address(RVA = "0x140CAC8", Offset = "0x140CAC8", VA = "0x140CAC8")]
		public static extern int ISteamRemoteStorage_FileRead(InteropHelp.UTF8StringHandle pchFile, [In][Out] byte[] pvData, int cubDataToRead);

		[PreserveSig]
		[Token(Token = "0x6000833")]
		[Address(RVA = "0x140CBCC", Offset = "0x140CBCC", VA = "0x140CBCC")]
		public static extern bool ISteamRemoteStorage_FileForget(InteropHelp.UTF8StringHandle pchFile);

		[PreserveSig]
		[Token(Token = "0x6000834")]
		[Address(RVA = "0x140CCB4", Offset = "0x140CCB4", VA = "0x140CCB4")]
		public static extern bool ISteamRemoteStorage_FileDelete(InteropHelp.UTF8StringHandle pchFile);

		[PreserveSig]
		[Token(Token = "0x6000835")]
		[Address(RVA = "0x140CD9C", Offset = "0x140CD9C", VA = "0x140CD9C")]
		public static extern ulong ISteamRemoteStorage_FileShare(InteropHelp.UTF8StringHandle pchFile);

		[PreserveSig]
		[Token(Token = "0x6000836")]
		[Address(RVA = "0x140CE80", Offset = "0x140CE80", VA = "0x140CE80")]
		public static extern bool ISteamRemoteStorage_SetSyncPlatforms(InteropHelp.UTF8StringHandle pchFile, ERemoteStoragePlatform eRemoteStoragePlatform);

		[PreserveSig]
		[Token(Token = "0x6000837")]
		[Address(RVA = "0x140CF78", Offset = "0x140CF78", VA = "0x140CF78")]
		public static extern ulong ISteamRemoteStorage_FileWriteStreamOpen(InteropHelp.UTF8StringHandle pchFile);

		[PreserveSig]
		[Token(Token = "0x6000838")]
		[Address(RVA = "0x140D05C", Offset = "0x140D05C", VA = "0x140D05C")]
		public static extern bool ISteamRemoteStorage_FileWriteStreamWriteChunk(UGCFileWriteStreamHandle_t writeHandle, [In][Out] byte[] pvData, int cubData);

		[PreserveSig]
		[Token(Token = "0x6000839")]
		[Address(RVA = "0x140D124", Offset = "0x140D124", VA = "0x140D124")]
		public static extern bool ISteamRemoteStorage_FileWriteStreamClose(UGCFileWriteStreamHandle_t writeHandle);

		[PreserveSig]
		[Token(Token = "0x600083A")]
		[Address(RVA = "0x140D1CC", Offset = "0x140D1CC", VA = "0x140D1CC")]
		public static extern bool ISteamRemoteStorage_FileWriteStreamCancel(UGCFileWriteStreamHandle_t writeHandle);

		[PreserveSig]
		[Token(Token = "0x600083B")]
		[Address(RVA = "0x140D274", Offset = "0x140D274", VA = "0x140D274")]
		public static extern bool ISteamRemoteStorage_FileExists(InteropHelp.UTF8StringHandle pchFile);

		[PreserveSig]
		[Token(Token = "0x600083C")]
		[Address(RVA = "0x140D35C", Offset = "0x140D35C", VA = "0x140D35C")]
		public static extern bool ISteamRemoteStorage_FilePersisted(InteropHelp.UTF8StringHandle pchFile);

		[PreserveSig]
		[Token(Token = "0x600083D")]
		[Address(RVA = "0x140D444", Offset = "0x140D444", VA = "0x140D444")]
		public static extern int ISteamRemoteStorage_GetFileSize(InteropHelp.UTF8StringHandle pchFile);

		[PreserveSig]
		[Token(Token = "0x600083E")]
		[Address(RVA = "0x140D528", Offset = "0x140D528", VA = "0x140D528")]
		public static extern long ISteamRemoteStorage_GetFileTimestamp(InteropHelp.UTF8StringHandle pchFile);

		[PreserveSig]
		[Token(Token = "0x600083F")]
		[Address(RVA = "0x140D60C", Offset = "0x140D60C", VA = "0x140D60C")]
		public static extern ERemoteStoragePlatform ISteamRemoteStorage_GetSyncPlatforms(InteropHelp.UTF8StringHandle pchFile);

		[PreserveSig]
		[Token(Token = "0x6000840")]
		[Address(RVA = "0x140D6F0", Offset = "0x140D6F0", VA = "0x140D6F0")]
		public static extern int ISteamRemoteStorage_GetFileCount();

		[PreserveSig]
		[Token(Token = "0x6000841")]
		[Address(RVA = "0x140D780", Offset = "0x140D780", VA = "0x140D780")]
		public static extern IntPtr ISteamRemoteStorage_GetFileNameAndSize(int iFile, out int pnFileSizeInBytes);

		[PreserveSig]
		[Token(Token = "0x6000842")]
		[Address(RVA = "0x140D830", Offset = "0x140D830", VA = "0x140D830")]
		public static extern bool ISteamRemoteStorage_GetQuota(out int pnTotalBytes, out int puAvailableBytes);

		[PreserveSig]
		[Token(Token = "0x6000843")]
		[Address(RVA = "0x140D8E8", Offset = "0x140D8E8", VA = "0x140D8E8")]
		public static extern bool ISteamRemoteStorage_IsCloudEnabledForAccount();

		[PreserveSig]
		[Token(Token = "0x6000844")]
		[Address(RVA = "0x140D980", Offset = "0x140D980", VA = "0x140D980")]
		public static extern bool ISteamRemoteStorage_IsCloudEnabledForApp();

		[PreserveSig]
		[Token(Token = "0x6000845")]
		[Address(RVA = "0x140DA18", Offset = "0x140DA18", VA = "0x140DA18")]
		public static extern void ISteamRemoteStorage_SetCloudEnabledForApp(bool bEnabled);

		[PreserveSig]
		[Token(Token = "0x6000846")]
		[Address(RVA = "0x140DAB8", Offset = "0x140DAB8", VA = "0x140DAB8")]
		public static extern ulong ISteamRemoteStorage_UGCDownload(UGCHandle_t hContent, uint unPriority);

		[PreserveSig]
		[Token(Token = "0x6000847")]
		[Address(RVA = "0x140DB68", Offset = "0x140DB68", VA = "0x140DB68")]
		public static extern bool ISteamRemoteStorage_GetUGCDownloadProgress(UGCHandle_t hContent, out int pnBytesDownloaded, out int pnBytesExpected);

		[PreserveSig]
		[Token(Token = "0x6000848")]
		[Address(RVA = "0x140DC28", Offset = "0x140DC28", VA = "0x140DC28")]
		public static extern bool ISteamRemoteStorage_GetUGCDetails(UGCHandle_t hContent, out AppId_t pnAppID, out IntPtr ppchName, out int pnFileSizeInBytes, out CSteamID pSteamIDOwner);

		[PreserveSig]
		[Token(Token = "0x6000849")]
		[Address(RVA = "0x140DD00", Offset = "0x140DD00", VA = "0x140DD00")]
		public static extern int ISteamRemoteStorage_UGCRead(UGCHandle_t hContent, [In][Out] byte[] pvData, int cubDataToRead, uint cOffset, EUGCReadAction eAction);

		[PreserveSig]
		[Token(Token = "0x600084A")]
		[Address(RVA = "0x140DDD8", Offset = "0x140DDD8", VA = "0x140DDD8")]
		public static extern int ISteamRemoteStorage_GetCachedUGCCount();

		[PreserveSig]
		[Token(Token = "0x600084B")]
		[Address(RVA = "0x140DE68", Offset = "0x140DE68", VA = "0x140DE68")]
		public static extern ulong ISteamRemoteStorage_GetCachedUGCHandle(int iCachedContent);

		[PreserveSig]
		[Token(Token = "0x600084C")]
		[Address(RVA = "0x140DF08", Offset = "0x140DF08", VA = "0x140DF08")]
		public static extern ulong ISteamRemoteStorage_PublishWorkshopFile(InteropHelp.UTF8StringHandle pchFile, InteropHelp.UTF8StringHandle pchPreviewFile, AppId_t nConsumerAppId, InteropHelp.UTF8StringHandle pchTitle, InteropHelp.UTF8StringHandle pchDescription, ERemoteStoragePublishedFileVisibility eVisibility, IntPtr pTags, EWorkshopFileType eWorkshopFileType);

		[PreserveSig]
		[Token(Token = "0x600084D")]
		[Address(RVA = "0x140E104", Offset = "0x140E104", VA = "0x140E104")]
		public static extern ulong ISteamRemoteStorage_CreatePublishedFileUpdateRequest(PublishedFileId_t unPublishedFileId);

		[PreserveSig]
		[Token(Token = "0x600084E")]
		[Address(RVA = "0x140E1A4", Offset = "0x140E1A4", VA = "0x140E1A4")]
		public static extern bool ISteamRemoteStorage_UpdatePublishedFileFile(PublishedFileUpdateHandle_t updateHandle, InteropHelp.UTF8StringHandle pchFile);

		[PreserveSig]
		[Token(Token = "0x600084F")]
		[Address(RVA = "0x140E29C", Offset = "0x140E29C", VA = "0x140E29C")]
		public static extern bool ISteamRemoteStorage_UpdatePublishedFilePreviewFile(PublishedFileUpdateHandle_t updateHandle, InteropHelp.UTF8StringHandle pchPreviewFile);

		[PreserveSig]
		[Token(Token = "0x6000850")]
		[Address(RVA = "0x140E394", Offset = "0x140E394", VA = "0x140E394")]
		public static extern bool ISteamRemoteStorage_UpdatePublishedFileTitle(PublishedFileUpdateHandle_t updateHandle, InteropHelp.UTF8StringHandle pchTitle);

		[PreserveSig]
		[Token(Token = "0x6000851")]
		[Address(RVA = "0x140E48C", Offset = "0x140E48C", VA = "0x140E48C")]
		public static extern bool ISteamRemoteStorage_UpdatePublishedFileDescription(PublishedFileUpdateHandle_t updateHandle, InteropHelp.UTF8StringHandle pchDescription);

		[PreserveSig]
		[Token(Token = "0x6000852")]
		[Address(RVA = "0x140E584", Offset = "0x140E584", VA = "0x140E584")]
		public static extern bool ISteamRemoteStorage_UpdatePublishedFileVisibility(PublishedFileUpdateHandle_t updateHandle, ERemoteStoragePublishedFileVisibility eVisibility);

		[PreserveSig]
		[Token(Token = "0x6000853")]
		[Address(RVA = "0x140E63C", Offset = "0x140E63C", VA = "0x140E63C")]
		public static extern bool ISteamRemoteStorage_UpdatePublishedFileTags(PublishedFileUpdateHandle_t updateHandle, IntPtr pTags);

		[PreserveSig]
		[Token(Token = "0x6000854")]
		[Address(RVA = "0x140E6F4", Offset = "0x140E6F4", VA = "0x140E6F4")]
		public static extern ulong ISteamRemoteStorage_CommitPublishedFileUpdate(PublishedFileUpdateHandle_t updateHandle);

		[PreserveSig]
		[Token(Token = "0x6000855")]
		[Address(RVA = "0x140E794", Offset = "0x140E794", VA = "0x140E794")]
		public static extern ulong ISteamRemoteStorage_GetPublishedFileDetails(PublishedFileId_t unPublishedFileId, uint unMaxSecondsOld);

		[PreserveSig]
		[Token(Token = "0x6000856")]
		[Address(RVA = "0x140E844", Offset = "0x140E844", VA = "0x140E844")]
		public static extern ulong ISteamRemoteStorage_DeletePublishedFile(PublishedFileId_t unPublishedFileId);

		[PreserveSig]
		[Token(Token = "0x6000857")]
		[Address(RVA = "0x140E8E4", Offset = "0x140E8E4", VA = "0x140E8E4")]
		public static extern ulong ISteamRemoteStorage_EnumerateUserPublishedFiles(uint unStartIndex);

		[PreserveSig]
		[Token(Token = "0x6000858")]
		[Address(RVA = "0x140E984", Offset = "0x140E984", VA = "0x140E984")]
		public static extern ulong ISteamRemoteStorage_SubscribePublishedFile(PublishedFileId_t unPublishedFileId);

		[PreserveSig]
		[Token(Token = "0x6000859")]
		[Address(RVA = "0x140EA24", Offset = "0x140EA24", VA = "0x140EA24")]
		public static extern ulong ISteamRemoteStorage_EnumerateUserSubscribedFiles(uint unStartIndex);

		[PreserveSig]
		[Token(Token = "0x600085A")]
		[Address(RVA = "0x140EAC4", Offset = "0x140EAC4", VA = "0x140EAC4")]
		public static extern ulong ISteamRemoteStorage_UnsubscribePublishedFile(PublishedFileId_t unPublishedFileId);

		[PreserveSig]
		[Token(Token = "0x600085B")]
		[Address(RVA = "0x140EB64", Offset = "0x140EB64", VA = "0x140EB64")]
		public static extern bool ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(PublishedFileUpdateHandle_t updateHandle, InteropHelp.UTF8StringHandle pchChangeDescription);

		[PreserveSig]
		[Token(Token = "0x600085C")]
		[Address(RVA = "0x140EC5C", Offset = "0x140EC5C", VA = "0x140EC5C")]
		public static extern ulong ISteamRemoteStorage_GetPublishedItemVoteDetails(PublishedFileId_t unPublishedFileId);

		[PreserveSig]
		[Token(Token = "0x600085D")]
		[Address(RVA = "0x140ECFC", Offset = "0x140ECFC", VA = "0x140ECFC")]
		public static extern ulong ISteamRemoteStorage_UpdateUserPublishedItemVote(PublishedFileId_t unPublishedFileId, bool bVoteUp);

		[PreserveSig]
		[Token(Token = "0x600085E")]
		[Address(RVA = "0x140EDAC", Offset = "0x140EDAC", VA = "0x140EDAC")]
		public static extern ulong ISteamRemoteStorage_GetUserPublishedItemVoteDetails(PublishedFileId_t unPublishedFileId);

		[PreserveSig]
		[Token(Token = "0x600085F")]
		[Address(RVA = "0x140EE4C", Offset = "0x140EE4C", VA = "0x140EE4C")]
		public static extern ulong ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(CSteamID steamId, uint unStartIndex, IntPtr pRequiredTags, IntPtr pExcludedTags);

		[PreserveSig]
		[Token(Token = "0x6000860")]
		[Address(RVA = "0x140EF14", Offset = "0x140EF14", VA = "0x140EF14")]
		public static extern ulong ISteamRemoteStorage_PublishVideo(EWorkshopVideoProvider eVideoProvider, InteropHelp.UTF8StringHandle pchVideoAccount, InteropHelp.UTF8StringHandle pchVideoIdentifier, InteropHelp.UTF8StringHandle pchPreviewFile, AppId_t nConsumerAppId, InteropHelp.UTF8StringHandle pchTitle, InteropHelp.UTF8StringHandle pchDescription, ERemoteStoragePublishedFileVisibility eVisibility, IntPtr pTags);

		[PreserveSig]
		[Token(Token = "0x6000861")]
		[Address(RVA = "0x140F16C", Offset = "0x140F16C", VA = "0x140F16C")]
		public static extern ulong ISteamRemoteStorage_SetUserPublishedFileAction(PublishedFileId_t unPublishedFileId, EWorkshopFileAction eAction);

		[PreserveSig]
		[Token(Token = "0x6000862")]
		[Address(RVA = "0x140F21C", Offset = "0x140F21C", VA = "0x140F21C")]
		public static extern ulong ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(EWorkshopFileAction eAction, uint unStartIndex);

		[PreserveSig]
		[Token(Token = "0x6000863")]
		[Address(RVA = "0x140F2CC", Offset = "0x140F2CC", VA = "0x140F2CC")]
		public static extern ulong ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(EWorkshopEnumerationType eEnumerationType, uint unStartIndex, uint unCount, uint unDays, IntPtr pTags, IntPtr pUserTags);

		[PreserveSig]
		[Token(Token = "0x6000864")]
		[Address(RVA = "0x140F3AC", Offset = "0x140F3AC", VA = "0x140F3AC")]
		public static extern ulong ISteamRemoteStorage_UGCDownloadToLocation(UGCHandle_t hContent, InteropHelp.UTF8StringHandle pchLocation, uint unPriority);

		[PreserveSig]
		[Token(Token = "0x6000865")]
		[Address(RVA = "0x140F4A8", Offset = "0x140F4A8", VA = "0x140F4A8")]
		public static extern uint ISteamScreenshots_WriteScreenshot([In][Out] byte[] pubRGB, uint cubRGB, int nWidth, int nHeight);

		[PreserveSig]
		[Token(Token = "0x6000866")]
		[Address(RVA = "0x140F578", Offset = "0x140F578", VA = "0x140F578")]
		public static extern uint ISteamScreenshots_AddScreenshotToLibrary(InteropHelp.UTF8StringHandle pchFilename, InteropHelp.UTF8StringHandle pchThumbnailFilename, int nWidth, int nHeight);

		[PreserveSig]
		[Token(Token = "0x6000867")]
		[Address(RVA = "0x140F6C0", Offset = "0x140F6C0", VA = "0x140F6C0")]
		public static extern void ISteamScreenshots_TriggerScreenshot();

		[PreserveSig]
		[Token(Token = "0x6000868")]
		[Address(RVA = "0x140F750", Offset = "0x140F750", VA = "0x140F750")]
		public static extern void ISteamScreenshots_HookScreenshots(bool bHook);

		[PreserveSig]
		[Token(Token = "0x6000869")]
		[Address(RVA = "0x140F7F0", Offset = "0x140F7F0", VA = "0x140F7F0")]
		public static extern bool ISteamScreenshots_SetLocation(ScreenshotHandle hScreenshot, InteropHelp.UTF8StringHandle pchLocation);

		[PreserveSig]
		[Token(Token = "0x600086A")]
		[Address(RVA = "0x140F8E8", Offset = "0x140F8E8", VA = "0x140F8E8")]
		public static extern bool ISteamScreenshots_TagUser(ScreenshotHandle hScreenshot, CSteamID steamID);

		[PreserveSig]
		[Token(Token = "0x600086B")]
		[Address(RVA = "0x140F9A0", Offset = "0x140F9A0", VA = "0x140F9A0")]
		public static extern bool ISteamScreenshots_TagPublishedFile(ScreenshotHandle hScreenshot, PublishedFileId_t unPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x600086C")]
		[Address(RVA = "0x140FA58", Offset = "0x140FA58", VA = "0x140FA58")]
		public static extern ulong ISteamUGC_CreateQueryUserUGCRequest(AccountID_t unAccountID, EUserUGCList eListType, EUGCMatchingUGCType eMatchingUGCType, EUserUGCListSortOrder eSortOrder, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint unPage);

		[PreserveSig]
		[Token(Token = "0x600086D")]
		[Address(RVA = "0x140FB40", Offset = "0x140FB40", VA = "0x140FB40")]
		public static extern ulong ISteamUGC_CreateQueryAllUGCRequest(EUGCQuery eQueryType, EUGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint unPage);

		[PreserveSig]
		[Token(Token = "0x600086E")]
		[Address(RVA = "0x140FC10", Offset = "0x140FC10", VA = "0x140FC10")]
		public static extern ulong ISteamUGC_CreateQueryUGCDetailsRequest([In][Out] PublishedFileId_t[] pvecPublishedFileID, uint unNumPublishedFileIDs);

		[PreserveSig]
		[Token(Token = "0x600086F")]
		[Address(RVA = "0x140FCC8", Offset = "0x140FCC8", VA = "0x140FCC8")]
		public static extern ulong ISteamUGC_SendQueryUGCRequest(UGCQueryHandle_t handle);

		[PreserveSig]
		[Token(Token = "0x6000870")]
		[Address(RVA = "0x140FD68", Offset = "0x140FD68", VA = "0x140FD68")]
		public static extern bool ISteamUGC_GetQueryUGCResult(UGCQueryHandle_t handle, uint index, out SteamUGCDetails_t pDetails);

		[PreserveSig]
		[Token(Token = "0x6000871")]
		[Address(RVA = "0x140FE80", Offset = "0x140FE80", VA = "0x140FE80")]
		public static extern bool ISteamUGC_GetQueryUGCPreviewURL(UGCQueryHandle_t handle, uint index, IntPtr pchURL, uint cchURLSize);

		[PreserveSig]
		[Token(Token = "0x6000872")]
		[Address(RVA = "0x140FF50", Offset = "0x140FF50", VA = "0x140FF50")]
		public static extern bool ISteamUGC_GetQueryUGCMetadata(UGCQueryHandle_t handle, uint index, IntPtr pchMetadata, uint cchMetadatasize);

		[PreserveSig]
		[Token(Token = "0x6000873")]
		[Address(RVA = "0x1410020", Offset = "0x1410020", VA = "0x1410020")]
		public static extern bool ISteamUGC_GetQueryUGCChildren(UGCQueryHandle_t handle, uint index, [In][Out] PublishedFileId_t[] pvecPublishedFileID, uint cMaxEntries);

		[PreserveSig]
		[Token(Token = "0x6000874")]
		[Address(RVA = "0x14100F8", Offset = "0x14100F8", VA = "0x14100F8")]
		public static extern bool ISteamUGC_GetQueryUGCStatistic(UGCQueryHandle_t handle, uint index, EItemStatistic eStatType, out uint pStatValue);

		[PreserveSig]
		[Token(Token = "0x6000875")]
		[Address(RVA = "0x14101C8", Offset = "0x14101C8", VA = "0x14101C8")]
		public static extern uint ISteamUGC_GetQueryUGCNumAdditionalPreviews(UGCQueryHandle_t handle, uint index);

		[PreserveSig]
		[Token(Token = "0x6000876")]
		[Address(RVA = "0x1410278", Offset = "0x1410278", VA = "0x1410278")]
		public static extern bool ISteamUGC_GetQueryUGCAdditionalPreview(UGCQueryHandle_t handle, uint index, uint previewIndex, IntPtr pchURLOrVideoID, uint cchURLSize, out bool pbIsImage);

		[PreserveSig]
		[Token(Token = "0x6000877")]
		[Address(RVA = "0x1410374", Offset = "0x1410374", VA = "0x1410374")]
		public static extern uint ISteamUGC_GetQueryUGCNumKeyValueTags(UGCQueryHandle_t handle, uint index);

		[PreserveSig]
		[Token(Token = "0x6000878")]
		[Address(RVA = "0x1410424", Offset = "0x1410424", VA = "0x1410424")]
		public static extern bool ISteamUGC_GetQueryUGCKeyValueTag(UGCQueryHandle_t handle, uint index, uint keyValueTagIndex, IntPtr pchKey, uint cchKeySize, IntPtr pchValue, uint cchValueSize);

		[PreserveSig]
		[Token(Token = "0x6000879")]
		[Address(RVA = "0x1410514", Offset = "0x1410514", VA = "0x1410514")]
		public static extern bool ISteamUGC_ReleaseQueryUGCRequest(UGCQueryHandle_t handle);

		[PreserveSig]
		[Token(Token = "0x600087A")]
		[Address(RVA = "0x14105BC", Offset = "0x14105BC", VA = "0x14105BC")]
		public static extern bool ISteamUGC_AddRequiredTag(UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pTagName);

		[PreserveSig]
		[Token(Token = "0x600087B")]
		[Address(RVA = "0x14106B4", Offset = "0x14106B4", VA = "0x14106B4")]
		public static extern bool ISteamUGC_AddExcludedTag(UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pTagName);

		[PreserveSig]
		[Token(Token = "0x600087C")]
		[Address(RVA = "0x14107AC", Offset = "0x14107AC", VA = "0x14107AC")]
		public static extern bool ISteamUGC_SetReturnKeyValueTags(UGCQueryHandle_t handle, bool bReturnKeyValueTags);

		[PreserveSig]
		[Token(Token = "0x600087D")]
		[Address(RVA = "0x1410864", Offset = "0x1410864", VA = "0x1410864")]
		public static extern bool ISteamUGC_SetReturnLongDescription(UGCQueryHandle_t handle, bool bReturnLongDescription);

		[PreserveSig]
		[Token(Token = "0x600087E")]
		[Address(RVA = "0x141091C", Offset = "0x141091C", VA = "0x141091C")]
		public static extern bool ISteamUGC_SetReturnMetadata(UGCQueryHandle_t handle, bool bReturnMetadata);

		[PreserveSig]
		[Token(Token = "0x600087F")]
		[Address(RVA = "0x14109D4", Offset = "0x14109D4", VA = "0x14109D4")]
		public static extern bool ISteamUGC_SetReturnChildren(UGCQueryHandle_t handle, bool bReturnChildren);

		[PreserveSig]
		[Token(Token = "0x6000880")]
		[Address(RVA = "0x1410A8C", Offset = "0x1410A8C", VA = "0x1410A8C")]
		public static extern bool ISteamUGC_SetReturnAdditionalPreviews(UGCQueryHandle_t handle, bool bReturnAdditionalPreviews);

		[PreserveSig]
		[Token(Token = "0x6000881")]
		[Address(RVA = "0x1410B44", Offset = "0x1410B44", VA = "0x1410B44")]
		public static extern bool ISteamUGC_SetReturnTotalOnly(UGCQueryHandle_t handle, bool bReturnTotalOnly);

		[PreserveSig]
		[Token(Token = "0x6000882")]
		[Address(RVA = "0x1410BFC", Offset = "0x1410BFC", VA = "0x1410BFC")]
		public static extern bool ISteamUGC_SetLanguage(UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pchLanguage);

		[PreserveSig]
		[Token(Token = "0x6000883")]
		[Address(RVA = "0x1410CF4", Offset = "0x1410CF4", VA = "0x1410CF4")]
		public static extern bool ISteamUGC_SetAllowCachedResponse(UGCQueryHandle_t handle, uint unMaxAgeSeconds);

		[PreserveSig]
		[Token(Token = "0x6000884")]
		[Address(RVA = "0x1410DAC", Offset = "0x1410DAC", VA = "0x1410DAC")]
		public static extern bool ISteamUGC_SetCloudFileNameFilter(UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pMatchCloudFileName);

		[PreserveSig]
		[Token(Token = "0x6000885")]
		[Address(RVA = "0x1410EA4", Offset = "0x1410EA4", VA = "0x1410EA4")]
		public static extern bool ISteamUGC_SetMatchAnyTag(UGCQueryHandle_t handle, bool bMatchAnyTag);

		[PreserveSig]
		[Token(Token = "0x6000886")]
		[Address(RVA = "0x1410F5C", Offset = "0x1410F5C", VA = "0x1410F5C")]
		public static extern bool ISteamUGC_SetSearchText(UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pSearchText);

		[PreserveSig]
		[Token(Token = "0x6000887")]
		[Address(RVA = "0x1411054", Offset = "0x1411054", VA = "0x1411054")]
		public static extern bool ISteamUGC_SetRankedByTrendDays(UGCQueryHandle_t handle, uint unDays);

		[PreserveSig]
		[Token(Token = "0x6000888")]
		[Address(RVA = "0x141110C", Offset = "0x141110C", VA = "0x141110C")]
		public static extern bool ISteamUGC_AddRequiredKeyValueTag(UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pKey, InteropHelp.UTF8StringHandle pValue);

		[PreserveSig]
		[Token(Token = "0x6000889")]
		[Address(RVA = "0x1411250", Offset = "0x1411250", VA = "0x1411250")]
		public static extern ulong ISteamUGC_RequestUGCDetails(PublishedFileId_t nPublishedFileID, uint unMaxAgeSeconds);

		[PreserveSig]
		[Token(Token = "0x600088A")]
		[Address(RVA = "0x1411300", Offset = "0x1411300", VA = "0x1411300")]
		public static extern ulong ISteamUGC_CreateItem(AppId_t nConsumerAppId, EWorkshopFileType eFileType);

		[PreserveSig]
		[Token(Token = "0x600088B")]
		[Address(RVA = "0x14113B0", Offset = "0x14113B0", VA = "0x14113B0")]
		public static extern ulong ISteamUGC_StartItemUpdate(AppId_t nConsumerAppId, PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x600088C")]
		[Address(RVA = "0x1411460", Offset = "0x1411460", VA = "0x1411460")]
		public static extern bool ISteamUGC_SetItemTitle(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchTitle);

		[PreserveSig]
		[Token(Token = "0x600088D")]
		[Address(RVA = "0x1411558", Offset = "0x1411558", VA = "0x1411558")]
		public static extern bool ISteamUGC_SetItemDescription(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchDescription);

		[PreserveSig]
		[Token(Token = "0x600088E")]
		[Address(RVA = "0x1411650", Offset = "0x1411650", VA = "0x1411650")]
		public static extern bool ISteamUGC_SetItemUpdateLanguage(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchLanguage);

		[PreserveSig]
		[Token(Token = "0x600088F")]
		[Address(RVA = "0x1411748", Offset = "0x1411748", VA = "0x1411748")]
		public static extern bool ISteamUGC_SetItemMetadata(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchMetaData);

		[PreserveSig]
		[Token(Token = "0x6000890")]
		[Address(RVA = "0x1411840", Offset = "0x1411840", VA = "0x1411840")]
		public static extern bool ISteamUGC_SetItemVisibility(UGCUpdateHandle_t handle, ERemoteStoragePublishedFileVisibility eVisibility);

		[PreserveSig]
		[Token(Token = "0x6000891")]
		[Address(RVA = "0x14118F8", Offset = "0x14118F8", VA = "0x14118F8")]
		public static extern bool ISteamUGC_SetItemTags(UGCUpdateHandle_t updateHandle, IntPtr pTags);

		[PreserveSig]
		[Token(Token = "0x6000892")]
		[Address(RVA = "0x14119B0", Offset = "0x14119B0", VA = "0x14119B0")]
		public static extern bool ISteamUGC_SetItemContent(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pszContentFolder);

		[PreserveSig]
		[Token(Token = "0x6000893")]
		[Address(RVA = "0x1411AA8", Offset = "0x1411AA8", VA = "0x1411AA8")]
		public static extern bool ISteamUGC_SetItemPreview(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pszPreviewFile);

		[PreserveSig]
		[Token(Token = "0x6000894")]
		[Address(RVA = "0x1411BA0", Offset = "0x1411BA0", VA = "0x1411BA0")]
		public static extern bool ISteamUGC_RemoveItemKeyValueTags(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchKey);

		[PreserveSig]
		[Token(Token = "0x6000895")]
		[Address(RVA = "0x1411C98", Offset = "0x1411C98", VA = "0x1411C98")]
		public static extern bool ISteamUGC_AddItemKeyValueTag(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchKey, InteropHelp.UTF8StringHandle pchValue);

		[PreserveSig]
		[Token(Token = "0x6000896")]
		[Address(RVA = "0x1411DDC", Offset = "0x1411DDC", VA = "0x1411DDC")]
		public static extern ulong ISteamUGC_SubmitItemUpdate(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchChangeNote);

		[PreserveSig]
		[Token(Token = "0x6000897")]
		[Address(RVA = "0x1411ED0", Offset = "0x1411ED0", VA = "0x1411ED0")]
		public static extern EItemUpdateStatus ISteamUGC_GetItemUpdateProgress(UGCUpdateHandle_t handle, out ulong punBytesProcessed, out ulong punBytesTotal);

		[PreserveSig]
		[Token(Token = "0x6000898")]
		[Address(RVA = "0x1411F88", Offset = "0x1411F88", VA = "0x1411F88")]
		public static extern ulong ISteamUGC_SetUserItemVote(PublishedFileId_t nPublishedFileID, bool bVoteUp);

		[PreserveSig]
		[Token(Token = "0x6000899")]
		[Address(RVA = "0x1412038", Offset = "0x1412038", VA = "0x1412038")]
		public static extern ulong ISteamUGC_GetUserItemVote(PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x600089A")]
		[Address(RVA = "0x14120D8", Offset = "0x14120D8", VA = "0x14120D8")]
		public static extern ulong ISteamUGC_AddItemToFavorites(AppId_t nAppId, PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x600089B")]
		[Address(RVA = "0x1412188", Offset = "0x1412188", VA = "0x1412188")]
		public static extern ulong ISteamUGC_RemoveItemFromFavorites(AppId_t nAppId, PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x600089C")]
		[Address(RVA = "0x1412238", Offset = "0x1412238", VA = "0x1412238")]
		public static extern ulong ISteamUGC_SubscribeItem(PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x600089D")]
		[Address(RVA = "0x14122D8", Offset = "0x14122D8", VA = "0x14122D8")]
		public static extern ulong ISteamUGC_UnsubscribeItem(PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x600089E")]
		[Address(RVA = "0x1412378", Offset = "0x1412378", VA = "0x1412378")]
		public static extern uint ISteamUGC_GetNumSubscribedItems();

		[PreserveSig]
		[Token(Token = "0x600089F")]
		[Address(RVA = "0x1412408", Offset = "0x1412408", VA = "0x1412408")]
		public static extern uint ISteamUGC_GetSubscribedItems([In][Out] PublishedFileId_t[] pvecPublishedFileID, uint cMaxEntries);

		[PreserveSig]
		[Token(Token = "0x60008A0")]
		[Address(RVA = "0x14124C0", Offset = "0x14124C0", VA = "0x14124C0")]
		public static extern uint ISteamUGC_GetItemState(PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x60008A1")]
		[Address(RVA = "0x1412560", Offset = "0x1412560", VA = "0x1412560")]
		public static extern bool ISteamUGC_GetItemInstallInfo(PublishedFileId_t nPublishedFileID, out ulong punSizeOnDisk, IntPtr pchFolder, uint cchFolderSize, out uint punTimeStamp);

		[PreserveSig]
		[Token(Token = "0x60008A2")]
		[Address(RVA = "0x1412638", Offset = "0x1412638", VA = "0x1412638")]
		public static extern bool ISteamUGC_GetItemDownloadInfo(PublishedFileId_t nPublishedFileID, out ulong punBytesDownloaded, out ulong punBytesTotal);

		[PreserveSig]
		[Token(Token = "0x60008A3")]
		[Address(RVA = "0x14126F8", Offset = "0x14126F8", VA = "0x14126F8")]
		public static extern bool ISteamUGC_DownloadItem(PublishedFileId_t nPublishedFileID, bool bHighPriority);

		[PreserveSig]
		[Token(Token = "0x60008A4")]
		[Address(RVA = "0x14127B0", Offset = "0x14127B0", VA = "0x14127B0")]
		public static extern ulong ISteamUnifiedMessages_SendMethod(InteropHelp.UTF8StringHandle pchServiceMethod, [In][Out] byte[] pRequestBuffer, uint unRequestBufferSize, ulong unContext);

		[PreserveSig]
		[Token(Token = "0x60008A5")]
		[Address(RVA = "0x14128C4", Offset = "0x14128C4", VA = "0x14128C4")]
		public static extern bool ISteamUnifiedMessages_GetMethodResponseInfo(ClientUnifiedMessageHandle hHandle, out uint punResponseSize, out EResult peResult);

		[PreserveSig]
		[Token(Token = "0x60008A6")]
		[Address(RVA = "0x1412984", Offset = "0x1412984", VA = "0x1412984")]
		public static extern bool ISteamUnifiedMessages_GetMethodResponseData(ClientUnifiedMessageHandle hHandle, [In][Out] byte[] pResponseBuffer, uint unResponseBufferSize, bool bAutoRelease);

		[PreserveSig]
		[Token(Token = "0x60008A7")]
		[Address(RVA = "0x1412A5C", Offset = "0x1412A5C", VA = "0x1412A5C")]
		public static extern bool ISteamUnifiedMessages_ReleaseMethod(ClientUnifiedMessageHandle hHandle);

		[PreserveSig]
		[Token(Token = "0x60008A8")]
		[Address(RVA = "0x1412B04", Offset = "0x1412B04", VA = "0x1412B04")]
		public static extern bool ISteamUnifiedMessages_SendNotification(InteropHelp.UTF8StringHandle pchServiceNotification, [In][Out] byte[] pNotificationBuffer, uint unNotificationBufferSize);

		[PreserveSig]
		[Token(Token = "0x60008A9")]
		[Address(RVA = "0x1412C0C", Offset = "0x1412C0C", VA = "0x1412C0C")]
		public static extern int ISteamUser_GetHSteamUser();

		[PreserveSig]
		[Token(Token = "0x60008AA")]
		[Address(RVA = "0x1412C9C", Offset = "0x1412C9C", VA = "0x1412C9C")]
		public static extern bool ISteamUser_BLoggedOn();

		[PreserveSig]
		[Token(Token = "0x60008AB")]
		[Address(RVA = "0x1412D34", Offset = "0x1412D34", VA = "0x1412D34")]
		public static extern ulong ISteamUser_GetSteamID();

		[PreserveSig]
		[Token(Token = "0x60008AC")]
		[Address(RVA = "0x1412DC4", Offset = "0x1412DC4", VA = "0x1412DC4")]
		public static extern int ISteamUser_InitiateGameConnection([In][Out] byte[] pAuthBlob, int cbMaxAuthBlob, CSteamID steamIDGameServer, uint unIPServer, ushort usPortServer, bool bSecure);

		[PreserveSig]
		[Token(Token = "0x60008AD")]
		[Address(RVA = "0x1412EAC", Offset = "0x1412EAC", VA = "0x1412EAC")]
		public static extern void ISteamUser_TerminateGameConnection(uint unIPServer, ushort usPortServer);

		[PreserveSig]
		[Token(Token = "0x60008AE")]
		[Address(RVA = "0x1412F5C", Offset = "0x1412F5C", VA = "0x1412F5C")]
		public static extern void ISteamUser_TrackAppUsageEvent(CGameID gameID, int eAppUsageEvent, InteropHelp.UTF8StringHandle pchExtraInfo);

		[PreserveSig]
		[Token(Token = "0x60008AF")]
		[Address(RVA = "0x1413050", Offset = "0x1413050", VA = "0x1413050")]
		public static extern bool ISteamUser_GetUserDataFolder(IntPtr pchBuffer, int cubBuffer);

		[PreserveSig]
		[Token(Token = "0x60008B0")]
		[Address(RVA = "0x1413108", Offset = "0x1413108", VA = "0x1413108")]
		public static extern void ISteamUser_StartVoiceRecording();

		[PreserveSig]
		[Token(Token = "0x60008B1")]
		[Address(RVA = "0x1413198", Offset = "0x1413198", VA = "0x1413198")]
		public static extern void ISteamUser_StopVoiceRecording();

		[PreserveSig]
		[Token(Token = "0x60008B2")]
		[Address(RVA = "0x1413228", Offset = "0x1413228", VA = "0x1413228")]
		public static extern EVoiceResult ISteamUser_GetAvailableVoice(out uint pcbCompressed, out uint pcbUncompressed, uint nUncompressedVoiceDesiredSampleRate);

		[PreserveSig]
		[Token(Token = "0x60008B3")]
		[Address(RVA = "0x14132E0", Offset = "0x14132E0", VA = "0x14132E0")]
		public static extern EVoiceResult ISteamUser_GetVoice(bool bWantCompressed, [In][Out] byte[] pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten, bool bWantUncompressed, [In][Out] byte[] pUncompressedDestBuffer, uint cbUncompressedDestBufferSize, out uint nUncompressBytesWritten, uint nUncompressedVoiceDesiredSampleRate);

		[PreserveSig]
		[Token(Token = "0x60008B4")]
		[Address(RVA = "0x14133F0", Offset = "0x14133F0", VA = "0x14133F0")]
		public static extern EVoiceResult ISteamUser_DecompressVoice([In][Out] byte[] pCompressed, uint cbCompressed, [In][Out] byte[] pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten, uint nDesiredSampleRate);

		[PreserveSig]
		[Token(Token = "0x60008B5")]
		[Address(RVA = "0x14134E0", Offset = "0x14134E0", VA = "0x14134E0")]
		public static extern uint ISteamUser_GetVoiceOptimalSampleRate();

		[PreserveSig]
		[Token(Token = "0x60008B6")]
		[Address(RVA = "0x1413570", Offset = "0x1413570", VA = "0x1413570")]
		public static extern uint ISteamUser_GetAuthSessionTicket([In][Out] byte[] pTicket, int cbMaxTicket, out uint pcbTicket);

		[PreserveSig]
		[Token(Token = "0x60008B7")]
		[Address(RVA = "0x1413630", Offset = "0x1413630", VA = "0x1413630")]
		public static extern EBeginAuthSessionResult ISteamUser_BeginAuthSession([In][Out] byte[] pAuthTicket, int cbAuthTicket, CSteamID steamID);

		[PreserveSig]
		[Token(Token = "0x60008B8")]
		[Address(RVA = "0x14136F0", Offset = "0x14136F0", VA = "0x14136F0")]
		public static extern void ISteamUser_EndAuthSession(CSteamID steamID);

		[PreserveSig]
		[Token(Token = "0x60008B9")]
		[Address(RVA = "0x1413790", Offset = "0x1413790", VA = "0x1413790")]
		public static extern void ISteamUser_CancelAuthTicket(HAuthTicket hAuthTicket);

		[PreserveSig]
		[Token(Token = "0x60008BA")]
		[Address(RVA = "0x1413830", Offset = "0x1413830", VA = "0x1413830")]
		public static extern EUserHasLicenseForAppResult ISteamUser_UserHasLicenseForApp(CSteamID steamID, AppId_t appID);

		[PreserveSig]
		[Token(Token = "0x60008BB")]
		[Address(RVA = "0x14138E0", Offset = "0x14138E0", VA = "0x14138E0")]
		public static extern bool ISteamUser_BIsBehindNAT();

		[PreserveSig]
		[Token(Token = "0x60008BC")]
		[Address(RVA = "0x1413978", Offset = "0x1413978", VA = "0x1413978")]
		public static extern void ISteamUser_AdvertiseGame(CSteamID steamIDGameServer, uint unIPServer, ushort usPortServer);

		[PreserveSig]
		[Token(Token = "0x60008BD")]
		[Address(RVA = "0x1413A30", Offset = "0x1413A30", VA = "0x1413A30")]
		public static extern ulong ISteamUser_RequestEncryptedAppTicket([In][Out] byte[] pDataToInclude, int cbDataToInclude);

		[PreserveSig]
		[Token(Token = "0x60008BE")]
		[Address(RVA = "0x1413AE8", Offset = "0x1413AE8", VA = "0x1413AE8")]
		public static extern bool ISteamUser_GetEncryptedAppTicket([In][Out] byte[] pTicket, int cbMaxTicket, out uint pcbTicket);

		[PreserveSig]
		[Token(Token = "0x60008BF")]
		[Address(RVA = "0x1413BB0", Offset = "0x1413BB0", VA = "0x1413BB0")]
		public static extern int ISteamUser_GetGameBadgeLevel(int nSeries, bool bFoil);

		[PreserveSig]
		[Token(Token = "0x60008C0")]
		[Address(RVA = "0x1413C60", Offset = "0x1413C60", VA = "0x1413C60")]
		public static extern int ISteamUser_GetPlayerSteamLevel();

		[PreserveSig]
		[Token(Token = "0x60008C1")]
		[Address(RVA = "0x1413CF0", Offset = "0x1413CF0", VA = "0x1413CF0")]
		public static extern ulong ISteamUser_RequestStoreAuthURL(InteropHelp.UTF8StringHandle pchRedirectURL);

		[PreserveSig]
		[Token(Token = "0x60008C2")]
		[Address(RVA = "0x1413DD4", Offset = "0x1413DD4", VA = "0x1413DD4")]
		public static extern bool ISteamUserStats_RequestCurrentStats();

		[PreserveSig]
		[Token(Token = "0x60008C3")]
		[Address(RVA = "0x1413E6C", Offset = "0x1413E6C", VA = "0x1413E6C")]
		public static extern bool ISteamUserStats_GetStat(InteropHelp.UTF8StringHandle pchName, out int pData);

		[PreserveSig]
		[Token(Token = "0x60008C4")]
		[Address(RVA = "0x1413F64", Offset = "0x1413F64", VA = "0x1413F64")]
		public static extern bool ISteamUserStats_GetStat_(InteropHelp.UTF8StringHandle pchName, out float pData);

		[PreserveSig]
		[Token(Token = "0x60008C5")]
		[Address(RVA = "0x141405C", Offset = "0x141405C", VA = "0x141405C")]
		public static extern bool ISteamUserStats_SetStat(InteropHelp.UTF8StringHandle pchName, int nData);

		[PreserveSig]
		[Token(Token = "0x60008C6")]
		[Address(RVA = "0x1414154", Offset = "0x1414154", VA = "0x1414154")]
		public static extern bool ISteamUserStats_SetStat_(InteropHelp.UTF8StringHandle pchName, float fData);

		[PreserveSig]
		[Token(Token = "0x60008C7")]
		[Address(RVA = "0x141424C", Offset = "0x141424C", VA = "0x141424C")]
		public static extern bool ISteamUserStats_UpdateAvgRateStat(InteropHelp.UTF8StringHandle pchName, float flCountThisSession, double dSessionLength);

		[PreserveSig]
		[Token(Token = "0x60008C8")]
		[Address(RVA = "0x141434C", Offset = "0x141434C", VA = "0x141434C")]
		public static extern bool ISteamUserStats_GetAchievement(InteropHelp.UTF8StringHandle pchName, out bool pbAchieved);

		[PreserveSig]
		[Token(Token = "0x60008C9")]
		[Address(RVA = "0x1414458", Offset = "0x1414458", VA = "0x1414458")]
		public static extern bool ISteamUserStats_SetAchievement(InteropHelp.UTF8StringHandle pchName);

		[PreserveSig]
		[Token(Token = "0x60008CA")]
		[Address(RVA = "0x1414540", Offset = "0x1414540", VA = "0x1414540")]
		public static extern bool ISteamUserStats_ClearAchievement(InteropHelp.UTF8StringHandle pchName);

		[PreserveSig]
		[Token(Token = "0x60008CB")]
		[Address(RVA = "0x1414628", Offset = "0x1414628", VA = "0x1414628")]
		public static extern bool ISteamUserStats_GetAchievementAndUnlockTime(InteropHelp.UTF8StringHandle pchName, out bool pbAchieved, out uint punUnlockTime);

		[PreserveSig]
		[Token(Token = "0x60008CC")]
		[Address(RVA = "0x141473C", Offset = "0x141473C", VA = "0x141473C")]
		public static extern bool ISteamUserStats_StoreStats();

		[PreserveSig]
		[Token(Token = "0x60008CD")]
		[Address(RVA = "0x14147D4", Offset = "0x14147D4", VA = "0x14147D4")]
		public static extern int ISteamUserStats_GetAchievementIcon(InteropHelp.UTF8StringHandle pchName);

		[PreserveSig]
		[Token(Token = "0x60008CE")]
		[Address(RVA = "0x14148B8", Offset = "0x14148B8", VA = "0x14148B8")]
		public static extern IntPtr ISteamUserStats_GetAchievementDisplayAttribute(InteropHelp.UTF8StringHandle pchName, InteropHelp.UTF8StringHandle pchKey);

		[PreserveSig]
		[Token(Token = "0x60008CF")]
		[Address(RVA = "0x14149E8", Offset = "0x14149E8", VA = "0x14149E8")]
		public static extern bool ISteamUserStats_IndicateAchievementProgress(InteropHelp.UTF8StringHandle pchName, uint nCurProgress, uint nMaxProgress);

		[PreserveSig]
		[Token(Token = "0x60008D0")]
		[Address(RVA = "0x1414AE8", Offset = "0x1414AE8", VA = "0x1414AE8")]
		public static extern uint ISteamUserStats_GetNumAchievements();

		[PreserveSig]
		[Token(Token = "0x60008D1")]
		[Address(RVA = "0x1414B78", Offset = "0x1414B78", VA = "0x1414B78")]
		public static extern IntPtr ISteamUserStats_GetAchievementName(uint iAchievement);

		[PreserveSig]
		[Token(Token = "0x60008D2")]
		[Address(RVA = "0x1414C18", Offset = "0x1414C18", VA = "0x1414C18")]
		public static extern ulong ISteamUserStats_RequestUserStats(CSteamID steamIDUser);

		[PreserveSig]
		[Token(Token = "0x60008D3")]
		[Address(RVA = "0x1414CB8", Offset = "0x1414CB8", VA = "0x1414CB8")]
		public static extern bool ISteamUserStats_GetUserStat(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, out int pData);

		[PreserveSig]
		[Token(Token = "0x60008D4")]
		[Address(RVA = "0x1414DB8", Offset = "0x1414DB8", VA = "0x1414DB8")]
		public static extern bool ISteamUserStats_GetUserStat_(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, out float pData);

		[PreserveSig]
		[Token(Token = "0x60008D5")]
		[Address(RVA = "0x1414EB8", Offset = "0x1414EB8", VA = "0x1414EB8")]
		public static extern bool ISteamUserStats_GetUserAchievement(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, out bool pbAchieved);

		[PreserveSig]
		[Token(Token = "0x60008D6")]
		[Address(RVA = "0x1414FCC", Offset = "0x1414FCC", VA = "0x1414FCC")]
		public static extern bool ISteamUserStats_GetUserAchievementAndUnlockTime(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, out bool pbAchieved, out uint punUnlockTime);

		[PreserveSig]
		[Token(Token = "0x60008D7")]
		[Address(RVA = "0x14150F0", Offset = "0x14150F0", VA = "0x14150F0")]
		public static extern bool ISteamUserStats_ResetAllStats(bool bAchievementsToo);

		[PreserveSig]
		[Token(Token = "0x60008D8")]
		[Address(RVA = "0x1415198", Offset = "0x1415198", VA = "0x1415198")]
		public static extern ulong ISteamUserStats_FindOrCreateLeaderboard(InteropHelp.UTF8StringHandle pchLeaderboardName, ELeaderboardSortMethod eLeaderboardSortMethod, ELeaderboardDisplayType eLeaderboardDisplayType);

		[PreserveSig]
		[Token(Token = "0x60008D9")]
		[Address(RVA = "0x1415294", Offset = "0x1415294", VA = "0x1415294")]
		public static extern ulong ISteamUserStats_FindLeaderboard(InteropHelp.UTF8StringHandle pchLeaderboardName);

		[PreserveSig]
		[Token(Token = "0x60008DA")]
		[Address(RVA = "0x1415378", Offset = "0x1415378", VA = "0x1415378")]
		public static extern IntPtr ISteamUserStats_GetLeaderboardName(SteamLeaderboard_t hSteamLeaderboard);

		[PreserveSig]
		[Token(Token = "0x60008DB")]
		[Address(RVA = "0x1415418", Offset = "0x1415418", VA = "0x1415418")]
		public static extern int ISteamUserStats_GetLeaderboardEntryCount(SteamLeaderboard_t hSteamLeaderboard);

		[PreserveSig]
		[Token(Token = "0x60008DC")]
		[Address(RVA = "0x14154B8", Offset = "0x14154B8", VA = "0x14154B8")]
		public static extern ELeaderboardSortMethod ISteamUserStats_GetLeaderboardSortMethod(SteamLeaderboard_t hSteamLeaderboard);

		[PreserveSig]
		[Token(Token = "0x60008DD")]
		[Address(RVA = "0x1415558", Offset = "0x1415558", VA = "0x1415558")]
		public static extern ELeaderboardDisplayType ISteamUserStats_GetLeaderboardDisplayType(SteamLeaderboard_t hSteamLeaderboard);

		[PreserveSig]
		[Token(Token = "0x60008DE")]
		[Address(RVA = "0x14155F8", Offset = "0x14155F8", VA = "0x14155F8")]
		public static extern ulong ISteamUserStats_DownloadLeaderboardEntries(SteamLeaderboard_t hSteamLeaderboard, ELeaderboardDataRequest eLeaderboardDataRequest, int nRangeStart, int nRangeEnd);

		[PreserveSig]
		[Token(Token = "0x60008DF")]
		[Address(RVA = "0x14156C0", Offset = "0x14156C0", VA = "0x14156C0")]
		public static extern ulong ISteamUserStats_DownloadLeaderboardEntriesForUsers(SteamLeaderboard_t hSteamLeaderboard, [In][Out] CSteamID[] prgUsers, int cUsers);

		[PreserveSig]
		[Token(Token = "0x60008E0")]
		[Address(RVA = "0x1415780", Offset = "0x1415780", VA = "0x1415780")]
		public static extern bool ISteamUserStats_GetDownloadedLeaderboardEntry(SteamLeaderboardEntries_t hSteamLeaderboardEntries, int index, out LeaderboardEntry_t pLeaderboardEntry, [In][Out] int[] pDetails, int cDetailsMax);

		[PreserveSig]
		[Token(Token = "0x60008E1")]
		[Address(RVA = "0x1415860", Offset = "0x1415860", VA = "0x1415860")]
		public static extern ulong ISteamUserStats_UploadLeaderboardScore(SteamLeaderboard_t hSteamLeaderboard, ELeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod, int nScore, [In][Out] int[] pScoreDetails, int cScoreDetailsCount);

		[PreserveSig]
		[Token(Token = "0x60008E2")]
		[Address(RVA = "0x1415938", Offset = "0x1415938", VA = "0x1415938")]
		public static extern ulong ISteamUserStats_AttachLeaderboardUGC(SteamLeaderboard_t hSteamLeaderboard, UGCHandle_t hUGC);

		[PreserveSig]
		[Token(Token = "0x60008E3")]
		[Address(RVA = "0x14159E8", Offset = "0x14159E8", VA = "0x14159E8")]
		public static extern ulong ISteamUserStats_GetNumberOfCurrentPlayers();

		[PreserveSig]
		[Token(Token = "0x60008E4")]
		[Address(RVA = "0x1415A78", Offset = "0x1415A78", VA = "0x1415A78")]
		public static extern ulong ISteamUserStats_RequestGlobalAchievementPercentages();

		[PreserveSig]
		[Token(Token = "0x60008E5")]
		[Address(RVA = "0x1415B08", Offset = "0x1415B08", VA = "0x1415B08")]
		public static extern int ISteamUserStats_GetMostAchievedAchievementInfo(IntPtr pchName, uint unNameBufLen, out float pflPercent, out bool pbAchieved);

		[PreserveSig]
		[Token(Token = "0x60008E6")]
		[Address(RVA = "0x1415BE4", Offset = "0x1415BE4", VA = "0x1415BE4")]
		public static extern int ISteamUserStats_GetNextMostAchievedAchievementInfo(int iIteratorPrevious, IntPtr pchName, uint unNameBufLen, out float pflPercent, out bool pbAchieved);

		[PreserveSig]
		[Token(Token = "0x60008E7")]
		[Address(RVA = "0x1415CC8", Offset = "0x1415CC8", VA = "0x1415CC8")]
		public static extern bool ISteamUserStats_GetAchievementAchievedPercent(InteropHelp.UTF8StringHandle pchName, out float pflPercent);

		[PreserveSig]
		[Token(Token = "0x60008E8")]
		[Address(RVA = "0x1415DC0", Offset = "0x1415DC0", VA = "0x1415DC0")]
		public static extern ulong ISteamUserStats_RequestGlobalStats(int nHistoryDays);

		[PreserveSig]
		[Token(Token = "0x60008E9")]
		[Address(RVA = "0x1415E60", Offset = "0x1415E60", VA = "0x1415E60")]
		public static extern bool ISteamUserStats_GetGlobalStat(InteropHelp.UTF8StringHandle pchStatName, out long pData);

		[PreserveSig]
		[Token(Token = "0x60008EA")]
		[Address(RVA = "0x1415F58", Offset = "0x1415F58", VA = "0x1415F58")]
		public static extern bool ISteamUserStats_GetGlobalStat_(InteropHelp.UTF8StringHandle pchStatName, out double pData);

		[PreserveSig]
		[Token(Token = "0x60008EB")]
		[Address(RVA = "0x1416050", Offset = "0x1416050", VA = "0x1416050")]
		public static extern int ISteamUserStats_GetGlobalStatHistory(InteropHelp.UTF8StringHandle pchStatName, [In][Out] long[] pData, uint cubData);

		[PreserveSig]
		[Token(Token = "0x60008EC")]
		[Address(RVA = "0x1416154", Offset = "0x1416154", VA = "0x1416154")]
		public static extern int ISteamUserStats_GetGlobalStatHistory_(InteropHelp.UTF8StringHandle pchStatName, [In][Out] double[] pData, uint cubData);

		[PreserveSig]
		[Token(Token = "0x60008ED")]
		[Address(RVA = "0x1416258", Offset = "0x1416258", VA = "0x1416258")]
		public static extern uint ISteamUtils_GetSecondsSinceAppActive();

		[PreserveSig]
		[Token(Token = "0x60008EE")]
		[Address(RVA = "0x14162E8", Offset = "0x14162E8", VA = "0x14162E8")]
		public static extern uint ISteamUtils_GetSecondsSinceComputerActive();

		[PreserveSig]
		[Token(Token = "0x60008EF")]
		[Address(RVA = "0x1416378", Offset = "0x1416378", VA = "0x1416378")]
		public static extern EUniverse ISteamUtils_GetConnectedUniverse();

		[PreserveSig]
		[Token(Token = "0x60008F0")]
		[Address(RVA = "0x1416408", Offset = "0x1416408", VA = "0x1416408")]
		public static extern uint ISteamUtils_GetServerRealTime();

		[PreserveSig]
		[Token(Token = "0x60008F1")]
		[Address(RVA = "0x1416498", Offset = "0x1416498", VA = "0x1416498")]
		public static extern IntPtr ISteamUtils_GetIPCountry();

		[PreserveSig]
		[Token(Token = "0x60008F2")]
		[Address(RVA = "0x1416528", Offset = "0x1416528", VA = "0x1416528")]
		public static extern bool ISteamUtils_GetImageSize(int iImage, out uint pnWidth, out uint pnHeight);

		[PreserveSig]
		[Token(Token = "0x60008F3")]
		[Address(RVA = "0x14165E8", Offset = "0x14165E8", VA = "0x14165E8")]
		public static extern bool ISteamUtils_GetImageRGBA(int iImage, [In][Out] byte[] pubDest, int nDestBufferSize);

		[PreserveSig]
		[Token(Token = "0x60008F4")]
		[Address(RVA = "0x14166B0", Offset = "0x14166B0", VA = "0x14166B0")]
		public static extern bool ISteamUtils_GetCSERIPPort(out uint unIP, out ushort usPort);

		[PreserveSig]
		[Token(Token = "0x60008F5")]
		[Address(RVA = "0x1416768", Offset = "0x1416768", VA = "0x1416768")]
		public static extern byte ISteamUtils_GetCurrentBatteryPower();

		[PreserveSig]
		[Token(Token = "0x60008F6")]
		[Address(RVA = "0x14167F8", Offset = "0x14167F8", VA = "0x14167F8")]
		public static extern uint ISteamUtils_GetAppID();

		[PreserveSig]
		[Token(Token = "0x60008F7")]
		[Address(RVA = "0x1416888", Offset = "0x1416888", VA = "0x1416888")]
		public static extern void ISteamUtils_SetOverlayNotificationPosition(ENotificationPosition eNotificationPosition);

		[PreserveSig]
		[Token(Token = "0x60008F8")]
		[Address(RVA = "0x1416928", Offset = "0x1416928", VA = "0x1416928")]
		public static extern bool ISteamUtils_IsAPICallCompleted(SteamAPICall_t hSteamAPICall, out bool pbFailed);

		[PreserveSig]
		[Token(Token = "0x60008F9")]
		[Address(RVA = "0x14169F4", Offset = "0x14169F4", VA = "0x14169F4")]
		public static extern ESteamAPICallFailure ISteamUtils_GetAPICallFailureReason(SteamAPICall_t hSteamAPICall);

		[PreserveSig]
		[Token(Token = "0x60008FA")]
		[Address(RVA = "0x1416A94", Offset = "0x1416A94", VA = "0x1416A94")]
		public static extern bool ISteamUtils_GetAPICallResult(SteamAPICall_t hSteamAPICall, IntPtr pCallback, int cubCallback, int iCallbackExpected, out bool pbFailed);

		[PreserveSig]
		[Token(Token = "0x60008FB")]
		[Address(RVA = "0x1416B80", Offset = "0x1416B80", VA = "0x1416B80")]
		public static extern void ISteamUtils_RunFrame();

		[PreserveSig]
		[Token(Token = "0x60008FC")]
		[Address(RVA = "0x1416C10", Offset = "0x1416C10", VA = "0x1416C10")]
		public static extern uint ISteamUtils_GetIPCCallCount();

		[PreserveSig]
		[Token(Token = "0x60008FD")]
		[Address(RVA = "0x1416CA0", Offset = "0x1416CA0", VA = "0x1416CA0")]
		public static extern void ISteamUtils_SetWarningMessageHook(SteamAPIWarningMessageHook_t pFunction);

		[PreserveSig]
		[Token(Token = "0x60008FE")]
		[Address(RVA = "0x1416D44", Offset = "0x1416D44", VA = "0x1416D44")]
		public static extern bool ISteamUtils_IsOverlayEnabled();

		[PreserveSig]
		[Token(Token = "0x60008FF")]
		[Address(RVA = "0x1416DDC", Offset = "0x1416DDC", VA = "0x1416DDC")]
		public static extern bool ISteamUtils_BOverlayNeedsPresent();

		[PreserveSig]
		[Token(Token = "0x6000900")]
		[Address(RVA = "0x1416E74", Offset = "0x1416E74", VA = "0x1416E74")]
		public static extern ulong ISteamUtils_CheckFileSignature(InteropHelp.UTF8StringHandle szFileName);

		[PreserveSig]
		[Token(Token = "0x6000901")]
		[Address(RVA = "0x1416F58", Offset = "0x1416F58", VA = "0x1416F58")]
		public static extern bool ISteamUtils_ShowGamepadTextInput(EGamepadTextInputMode eInputMode, EGamepadTextInputLineMode eLineInputMode, InteropHelp.UTF8StringHandle pchDescription, uint unCharMax, InteropHelp.UTF8StringHandle pchExistingText);

		[PreserveSig]
		[Token(Token = "0x6000902")]
		[Address(RVA = "0x14170B4", Offset = "0x14170B4", VA = "0x14170B4")]
		public static extern uint ISteamUtils_GetEnteredGamepadTextLength();

		[PreserveSig]
		[Token(Token = "0x6000903")]
		[Address(RVA = "0x1417144", Offset = "0x1417144", VA = "0x1417144")]
		public static extern bool ISteamUtils_GetEnteredGamepadTextInput(IntPtr pchText, uint cchText);

		[PreserveSig]
		[Token(Token = "0x6000904")]
		[Address(RVA = "0x14171FC", Offset = "0x14171FC", VA = "0x14171FC")]
		public static extern IntPtr ISteamUtils_GetSteamUILanguage();

		[PreserveSig]
		[Token(Token = "0x6000905")]
		[Address(RVA = "0x141728C", Offset = "0x141728C", VA = "0x141728C")]
		public static extern bool ISteamUtils_IsSteamRunningInVR();

		[PreserveSig]
		[Token(Token = "0x6000906")]
		[Address(RVA = "0x1417324", Offset = "0x1417324", VA = "0x1417324")]
		public static extern void ISteamUtils_SetOverlayNotificationInset(int nHorizontalInset, int nVerticalInset);

		[PreserveSig]
		[Token(Token = "0x6000907")]
		[Address(RVA = "0x14173D4", Offset = "0x14173D4", VA = "0x14173D4")]
		public static extern void ISteamVideo_GetVideoURL(AppId_t unVideoAppID);

		[PreserveSig]
		[Token(Token = "0x6000908")]
		[Address(RVA = "0x1417474", Offset = "0x1417474", VA = "0x1417474")]
		public static extern bool ISteamVideo_IsBroadcasting(out int pnNumViewers);

		[PreserveSig]
		[Token(Token = "0x6000909")]
		[Address(RVA = "0x141751C", Offset = "0x141751C", VA = "0x141751C")]
		public static extern uint ISteamGameServerHTTP_CreateHTTPRequest(EHTTPMethod eHTTPRequestMethod, InteropHelp.UTF8StringHandle pchAbsoluteURL);

		[PreserveSig]
		[Token(Token = "0x600090A")]
		[Address(RVA = "0x1417610", Offset = "0x1417610", VA = "0x1417610")]
		public static extern bool ISteamGameServerHTTP_SetHTTPRequestContextValue(HTTPRequestHandle hRequest, ulong ulContextValue);

		[PreserveSig]
		[Token(Token = "0x600090B")]
		[Address(RVA = "0x14176C8", Offset = "0x14176C8", VA = "0x14176C8")]
		public static extern bool ISteamGameServerHTTP_SetHTTPRequestNetworkActivityTimeout(HTTPRequestHandle hRequest, uint unTimeoutSeconds);

		[PreserveSig]
		[Token(Token = "0x600090C")]
		[Address(RVA = "0x1417780", Offset = "0x1417780", VA = "0x1417780")]
		public static extern bool ISteamGameServerHTTP_SetHTTPRequestHeaderValue(HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchHeaderName, InteropHelp.UTF8StringHandle pchHeaderValue);

		[PreserveSig]
		[Token(Token = "0x600090D")]
		[Address(RVA = "0x14178C4", Offset = "0x14178C4", VA = "0x14178C4")]
		public static extern bool ISteamGameServerHTTP_SetHTTPRequestGetOrPostParameter(HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchParamName, InteropHelp.UTF8StringHandle pchParamValue);

		[PreserveSig]
		[Token(Token = "0x600090E")]
		[Address(RVA = "0x1417A08", Offset = "0x1417A08", VA = "0x1417A08")]
		public static extern bool ISteamGameServerHTTP_SendHTTPRequest(HTTPRequestHandle hRequest, out SteamAPICall_t pCallHandle);

		[PreserveSig]
		[Token(Token = "0x600090F")]
		[Address(RVA = "0x1417AC0", Offset = "0x1417AC0", VA = "0x1417AC0")]
		public static extern bool ISteamGameServerHTTP_SendHTTPRequestAndStreamResponse(HTTPRequestHandle hRequest, out SteamAPICall_t pCallHandle);

		[PreserveSig]
		[Token(Token = "0x6000910")]
		[Address(RVA = "0x1417B78", Offset = "0x1417B78", VA = "0x1417B78")]
		public static extern bool ISteamGameServerHTTP_DeferHTTPRequest(HTTPRequestHandle hRequest);

		[PreserveSig]
		[Token(Token = "0x6000911")]
		[Address(RVA = "0x1417C20", Offset = "0x1417C20", VA = "0x1417C20")]
		public static extern bool ISteamGameServerHTTP_PrioritizeHTTPRequest(HTTPRequestHandle hRequest);

		[PreserveSig]
		[Token(Token = "0x6000912")]
		[Address(RVA = "0x1417CC8", Offset = "0x1417CC8", VA = "0x1417CC8")]
		public static extern bool ISteamGameServerHTTP_GetHTTPResponseHeaderSize(HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchHeaderName, out uint unResponseHeaderSize);

		[PreserveSig]
		[Token(Token = "0x6000913")]
		[Address(RVA = "0x1417DC8", Offset = "0x1417DC8", VA = "0x1417DC8")]
		public static extern bool ISteamGameServerHTTP_GetHTTPResponseHeaderValue(HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchHeaderName, [In][Out] byte[] pHeaderValueBuffer, uint unBufferSize);

		[PreserveSig]
		[Token(Token = "0x6000914")]
		[Address(RVA = "0x1417EE0", Offset = "0x1417EE0", VA = "0x1417EE0")]
		public static extern bool ISteamGameServerHTTP_GetHTTPResponseBodySize(HTTPRequestHandle hRequest, out uint unBodySize);

		[PreserveSig]
		[Token(Token = "0x6000915")]
		[Address(RVA = "0x1417F98", Offset = "0x1417F98", VA = "0x1417F98")]
		public static extern bool ISteamGameServerHTTP_GetHTTPResponseBodyData(HTTPRequestHandle hRequest, [In][Out] byte[] pBodyDataBuffer, uint unBufferSize);

		[PreserveSig]
		[Token(Token = "0x6000916")]
		[Address(RVA = "0x1418060", Offset = "0x1418060", VA = "0x1418060")]
		public static extern bool ISteamGameServerHTTP_GetHTTPStreamingResponseBodyData(HTTPRequestHandle hRequest, uint cOffset, [In][Out] byte[] pBodyDataBuffer, uint unBufferSize);

		[PreserveSig]
		[Token(Token = "0x6000917")]
		[Address(RVA = "0x1418138", Offset = "0x1418138", VA = "0x1418138")]
		public static extern bool ISteamGameServerHTTP_ReleaseHTTPRequest(HTTPRequestHandle hRequest);

		[PreserveSig]
		[Token(Token = "0x6000918")]
		[Address(RVA = "0x14181E0", Offset = "0x14181E0", VA = "0x14181E0")]
		public static extern bool ISteamGameServerHTTP_GetHTTPDownloadProgressPct(HTTPRequestHandle hRequest, out float pflPercentOut);

		[PreserveSig]
		[Token(Token = "0x6000919")]
		[Address(RVA = "0x1418298", Offset = "0x1418298", VA = "0x1418298")]
		public static extern bool ISteamGameServerHTTP_SetHTTPRequestRawPostBody(HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchContentType, [In][Out] byte[] pubBody, uint unBodyLen);

		[PreserveSig]
		[Token(Token = "0x600091A")]
		[Address(RVA = "0x14183B0", Offset = "0x14183B0", VA = "0x14183B0")]
		public static extern uint ISteamGameServerHTTP_CreateCookieContainer(bool bAllowResponsesToModify);

		[PreserveSig]
		[Token(Token = "0x600091B")]
		[Address(RVA = "0x1418450", Offset = "0x1418450", VA = "0x1418450")]
		public static extern bool ISteamGameServerHTTP_ReleaseCookieContainer(HTTPCookieContainerHandle hCookieContainer);

		[PreserveSig]
		[Token(Token = "0x600091C")]
		[Address(RVA = "0x14184F8", Offset = "0x14184F8", VA = "0x14184F8")]
		public static extern bool ISteamGameServerHTTP_SetCookie(HTTPCookieContainerHandle hCookieContainer, InteropHelp.UTF8StringHandle pchHost, InteropHelp.UTF8StringHandle pchUrl, InteropHelp.UTF8StringHandle pchCookie);

		[PreserveSig]
		[Token(Token = "0x600091D")]
		[Address(RVA = "0x1418688", Offset = "0x1418688", VA = "0x1418688")]
		public static extern bool ISteamGameServerHTTP_SetHTTPRequestCookieContainer(HTTPRequestHandle hRequest, HTTPCookieContainerHandle hCookieContainer);

		[PreserveSig]
		[Token(Token = "0x600091E")]
		[Address(RVA = "0x1418740", Offset = "0x1418740", VA = "0x1418740")]
		public static extern bool ISteamGameServerHTTP_SetHTTPRequestUserAgentInfo(HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchUserAgentInfo);

		[PreserveSig]
		[Token(Token = "0x600091F")]
		[Address(RVA = "0x1418838", Offset = "0x1418838", VA = "0x1418838")]
		public static extern bool ISteamGameServerHTTP_SetHTTPRequestRequiresVerifiedCertificate(HTTPRequestHandle hRequest, bool bRequireVerifiedCertificate);

		[PreserveSig]
		[Token(Token = "0x6000920")]
		[Address(RVA = "0x14188F0", Offset = "0x14188F0", VA = "0x14188F0")]
		public static extern bool ISteamGameServerHTTP_SetHTTPRequestAbsoluteTimeoutMS(HTTPRequestHandle hRequest, uint unMilliseconds);

		[PreserveSig]
		[Token(Token = "0x6000921")]
		[Address(RVA = "0x14189A8", Offset = "0x14189A8", VA = "0x14189A8")]
		public static extern bool ISteamGameServerHTTP_GetHTTPRequestWasTimedOut(HTTPRequestHandle hRequest, out bool pbWasTimedOut);

		[PreserveSig]
		[Token(Token = "0x6000922")]
		[Address(RVA = "0x1418A74", Offset = "0x1418A74", VA = "0x1418A74")]
		public static extern EResult ISteamGameServerInventory_GetResultStatus(SteamInventoryResult_t resultHandle);

		[PreserveSig]
		[Token(Token = "0x6000923")]
		[Address(RVA = "0x1418B14", Offset = "0x1418B14", VA = "0x1418B14")]
		public static extern bool ISteamGameServerInventory_GetResultItems(SteamInventoryResult_t resultHandle, [In][Out] SteamItemDetails_t[] pOutItemsArray, ref uint punOutItemsArraySize);

		[PreserveSig]
		[Token(Token = "0x6000924")]
		[Address(RVA = "0x1418BDC", Offset = "0x1418BDC", VA = "0x1418BDC")]
		public static extern uint ISteamGameServerInventory_GetResultTimestamp(SteamInventoryResult_t resultHandle);

		[PreserveSig]
		[Token(Token = "0x6000925")]
		[Address(RVA = "0x1418C7C", Offset = "0x1418C7C", VA = "0x1418C7C")]
		public static extern bool ISteamGameServerInventory_CheckResultSteamID(SteamInventoryResult_t resultHandle, CSteamID steamIDExpected);

		[PreserveSig]
		[Token(Token = "0x6000926")]
		[Address(RVA = "0x1418D34", Offset = "0x1418D34", VA = "0x1418D34")]
		public static extern void ISteamGameServerInventory_DestroyResult(SteamInventoryResult_t resultHandle);

		[PreserveSig]
		[Token(Token = "0x6000927")]
		[Address(RVA = "0x1418DD4", Offset = "0x1418DD4", VA = "0x1418DD4")]
		public static extern bool ISteamGameServerInventory_GetAllItems(out SteamInventoryResult_t pResultHandle);

		[PreserveSig]
		[Token(Token = "0x6000928")]
		[Address(RVA = "0x1418E7C", Offset = "0x1418E7C", VA = "0x1418E7C")]
		public static extern bool ISteamGameServerInventory_GetItemsByID(out SteamInventoryResult_t pResultHandle, [In][Out] SteamItemInstanceID_t[] pInstanceIDs, uint unCountInstanceIDs);

		[PreserveSig]
		[Token(Token = "0x6000929")]
		[Address(RVA = "0x1418F44", Offset = "0x1418F44", VA = "0x1418F44")]
		public static extern bool ISteamGameServerInventory_SerializeResult(SteamInventoryResult_t resultHandle, [In][Out] byte[] pOutBuffer, out uint punOutBufferSize);

		[PreserveSig]
		[Token(Token = "0x600092A")]
		[Address(RVA = "0x141900C", Offset = "0x141900C", VA = "0x141900C")]
		public static extern bool ISteamGameServerInventory_DeserializeResult(out SteamInventoryResult_t pOutResultHandle, [In][Out] byte[] pBuffer, uint unBufferSize, bool bRESERVED_MUST_BE_FALSE);

		[PreserveSig]
		[Token(Token = "0x600092B")]
		[Address(RVA = "0x14190E4", Offset = "0x14190E4", VA = "0x14190E4")]
		public static extern bool ISteamGameServerInventory_GenerateItems(out SteamInventoryResult_t pResultHandle, [In][Out] SteamItemDef_t[] pArrayItemDefs, [In][Out] uint[] punArrayQuantity, uint unArrayLength);

		[PreserveSig]
		[Token(Token = "0x600092C")]
		[Address(RVA = "0x14191C4", Offset = "0x14191C4", VA = "0x14191C4")]
		public static extern bool ISteamGameServerInventory_GrantPromoItems(out SteamInventoryResult_t pResultHandle);

		[PreserveSig]
		[Token(Token = "0x600092D")]
		[Address(RVA = "0x141926C", Offset = "0x141926C", VA = "0x141926C")]
		public static extern bool ISteamGameServerInventory_AddPromoItem(out SteamInventoryResult_t pResultHandle, SteamItemDef_t itemDef);

		[PreserveSig]
		[Token(Token = "0x600092E")]
		[Address(RVA = "0x1419324", Offset = "0x1419324", VA = "0x1419324")]
		public static extern bool ISteamGameServerInventory_AddPromoItems(out SteamInventoryResult_t pResultHandle, [In][Out] SteamItemDef_t[] pArrayItemDefs, uint unArrayLength);

		[PreserveSig]
		[Token(Token = "0x600092F")]
		[Address(RVA = "0x14193EC", Offset = "0x14193EC", VA = "0x14193EC")]
		public static extern bool ISteamGameServerInventory_ConsumeItem(out SteamInventoryResult_t pResultHandle, SteamItemInstanceID_t itemConsume, uint unQuantity);

		[PreserveSig]
		[Token(Token = "0x6000930")]
		[Address(RVA = "0x14194AC", Offset = "0x14194AC", VA = "0x14194AC")]
		public static extern bool ISteamGameServerInventory_ExchangeItems(out SteamInventoryResult_t pResultHandle, [In][Out] SteamItemDef_t[] pArrayGenerate, [In][Out] uint[] punArrayGenerateQuantity, uint unArrayGenerateLength, [In][Out] SteamItemInstanceID_t[] pArrayDestroy, [In][Out] uint[] punArrayDestroyQuantity, uint unArrayDestroyLength);

		[PreserveSig]
		[Token(Token = "0x6000931")]
		[Address(RVA = "0x14195BC", Offset = "0x14195BC", VA = "0x14195BC")]
		public static extern bool ISteamGameServerInventory_TransferItemQuantity(out SteamInventoryResult_t pResultHandle, SteamItemInstanceID_t itemIdSource, uint unQuantity, SteamItemInstanceID_t itemIdDest);

		[PreserveSig]
		[Token(Token = "0x6000932")]
		[Address(RVA = "0x141968C", Offset = "0x141968C", VA = "0x141968C")]
		public static extern void ISteamGameServerInventory_SendItemDropHeartbeat();

		[PreserveSig]
		[Token(Token = "0x6000933")]
		[Address(RVA = "0x141971C", Offset = "0x141971C", VA = "0x141971C")]
		public static extern bool ISteamGameServerInventory_TriggerItemDrop(out SteamInventoryResult_t pResultHandle, SteamItemDef_t dropListDefinition);

		[PreserveSig]
		[Token(Token = "0x6000934")]
		[Address(RVA = "0x14197D4", Offset = "0x14197D4", VA = "0x14197D4")]
		public static extern bool ISteamGameServerInventory_TradeItems(out SteamInventoryResult_t pResultHandle, CSteamID steamIDTradePartner, [In][Out] SteamItemInstanceID_t[] pArrayGive, [In][Out] uint[] pArrayGiveQuantity, uint nArrayGiveLength, [In][Out] SteamItemInstanceID_t[] pArrayGet, [In][Out] uint[] pArrayGetQuantity, uint nArrayGetLength);

		[PreserveSig]
		[Token(Token = "0x6000935")]
		[Address(RVA = "0x14198F4", Offset = "0x14198F4", VA = "0x14198F4")]
		public static extern bool ISteamGameServerInventory_LoadItemDefinitions();

		[PreserveSig]
		[Token(Token = "0x6000936")]
		[Address(RVA = "0x141998C", Offset = "0x141998C", VA = "0x141998C")]
		public static extern bool ISteamGameServerInventory_GetItemDefinitionIDs([In][Out] SteamItemDef_t[] pItemDefIDs, out uint punItemDefIDsArraySize);

		[PreserveSig]
		[Token(Token = "0x6000937")]
		[Address(RVA = "0x1419A4C", Offset = "0x1419A4C", VA = "0x1419A4C")]
		public static extern bool ISteamGameServerInventory_GetItemDefinitionProperty(SteamItemDef_t iDefinition, InteropHelp.UTF8StringHandle pchPropertyName, IntPtr pchValueBuffer, ref uint punValueBufferSize);

		[PreserveSig]
		[Token(Token = "0x6000938")]
		[Address(RVA = "0x1419B5C", Offset = "0x1419B5C", VA = "0x1419B5C")]
		public static extern bool ISteamGameServerNetworking_SendP2PPacket(CSteamID steamIDRemote, [In][Out] byte[] pubData, uint cubData, EP2PSend eP2PSendType, int nChannel);

		[PreserveSig]
		[Token(Token = "0x6000939")]
		[Address(RVA = "0x1419C3C", Offset = "0x1419C3C", VA = "0x1419C3C")]
		public static extern bool ISteamGameServerNetworking_IsP2PPacketAvailable(out uint pcubMsgSize, int nChannel);

		[PreserveSig]
		[Token(Token = "0x600093A")]
		[Address(RVA = "0x1419CF4", Offset = "0x1419CF4", VA = "0x1419CF4")]
		public static extern bool ISteamGameServerNetworking_ReadP2PPacket([In][Out] byte[] pubDest, uint cubDest, out uint pcubMsgSize, out CSteamID psteamIDRemote, int nChannel);

		[PreserveSig]
		[Token(Token = "0x600093B")]
		[Address(RVA = "0x1419DD4", Offset = "0x1419DD4", VA = "0x1419DD4")]
		public static extern bool ISteamGameServerNetworking_AcceptP2PSessionWithUser(CSteamID steamIDRemote);

		[PreserveSig]
		[Token(Token = "0x600093C")]
		[Address(RVA = "0x1419E7C", Offset = "0x1419E7C", VA = "0x1419E7C")]
		public static extern bool ISteamGameServerNetworking_CloseP2PSessionWithUser(CSteamID steamIDRemote);

		[PreserveSig]
		[Token(Token = "0x600093D")]
		[Address(RVA = "0x1419F24", Offset = "0x1419F24", VA = "0x1419F24")]
		public static extern bool ISteamGameServerNetworking_CloseP2PChannelWithUser(CSteamID steamIDRemote, int nChannel);

		[PreserveSig]
		[Token(Token = "0x600093E")]
		[Address(RVA = "0x1419FDC", Offset = "0x1419FDC", VA = "0x1419FDC")]
		public static extern bool ISteamGameServerNetworking_GetP2PSessionState(CSteamID steamIDRemote, out P2PSessionState_t pConnectionState);

		[PreserveSig]
		[Token(Token = "0x600093F")]
		[Address(RVA = "0x141A094", Offset = "0x141A094", VA = "0x141A094")]
		public static extern bool ISteamGameServerNetworking_AllowP2PPacketRelay(bool bAllow);

		[PreserveSig]
		[Token(Token = "0x6000940")]
		[Address(RVA = "0x141A13C", Offset = "0x141A13C", VA = "0x141A13C")]
		public static extern uint ISteamGameServerNetworking_CreateListenSocket(int nVirtualP2PPort, uint nIP, ushort nPort, bool bAllowUseOfPacketRelay);

		[PreserveSig]
		[Token(Token = "0x6000941")]
		[Address(RVA = "0x141A204", Offset = "0x141A204", VA = "0x141A204")]
		public static extern uint ISteamGameServerNetworking_CreateP2PConnectionSocket(CSteamID steamIDTarget, int nVirtualPort, int nTimeoutSec, bool bAllowUseOfPacketRelay);

		[PreserveSig]
		[Token(Token = "0x6000942")]
		[Address(RVA = "0x141A2CC", Offset = "0x141A2CC", VA = "0x141A2CC")]
		public static extern uint ISteamGameServerNetworking_CreateConnectionSocket(uint nIP, ushort nPort, int nTimeoutSec);

		[PreserveSig]
		[Token(Token = "0x6000943")]
		[Address(RVA = "0x141A384", Offset = "0x141A384", VA = "0x141A384")]
		public static extern bool ISteamGameServerNetworking_DestroySocket(SNetSocket_t hSocket, bool bNotifyRemoteEnd);

		[PreserveSig]
		[Token(Token = "0x6000944")]
		[Address(RVA = "0x141A43C", Offset = "0x141A43C", VA = "0x141A43C")]
		public static extern bool ISteamGameServerNetworking_DestroyListenSocket(SNetListenSocket_t hSocket, bool bNotifyRemoteEnd);

		[PreserveSig]
		[Token(Token = "0x6000945")]
		[Address(RVA = "0x141A4F4", Offset = "0x141A4F4", VA = "0x141A4F4")]
		public static extern bool ISteamGameServerNetworking_SendDataOnSocket(SNetSocket_t hSocket, IntPtr pubData, uint cubData, bool bReliable);

		[PreserveSig]
		[Token(Token = "0x6000946")]
		[Address(RVA = "0x141A5C4", Offset = "0x141A5C4", VA = "0x141A5C4")]
		public static extern bool ISteamGameServerNetworking_IsDataAvailableOnSocket(SNetSocket_t hSocket, out uint pcubMsgSize);

		[PreserveSig]
		[Token(Token = "0x6000947")]
		[Address(RVA = "0x141A67C", Offset = "0x141A67C", VA = "0x141A67C")]
		public static extern bool ISteamGameServerNetworking_RetrieveDataFromSocket(SNetSocket_t hSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize);

		[PreserveSig]
		[Token(Token = "0x6000948")]
		[Address(RVA = "0x141A74C", Offset = "0x141A74C", VA = "0x141A74C")]
		public static extern bool ISteamGameServerNetworking_IsDataAvailable(SNetListenSocket_t hListenSocket, out uint pcubMsgSize, out SNetSocket_t phSocket);

		[PreserveSig]
		[Token(Token = "0x6000949")]
		[Address(RVA = "0x141A80C", Offset = "0x141A80C", VA = "0x141A80C")]
		public static extern bool ISteamGameServerNetworking_RetrieveData(SNetListenSocket_t hListenSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize, out SNetSocket_t phSocket);

		[PreserveSig]
		[Token(Token = "0x600094A")]
		[Address(RVA = "0x141A8E4", Offset = "0x141A8E4", VA = "0x141A8E4")]
		public static extern bool ISteamGameServerNetworking_GetSocketInfo(SNetSocket_t hSocket, out CSteamID pSteamIDRemote, out int peSocketStatus, out uint punIPRemote, out ushort punPortRemote);

		[PreserveSig]
		[Token(Token = "0x600094B")]
		[Address(RVA = "0x141A9BC", Offset = "0x141A9BC", VA = "0x141A9BC")]
		public static extern bool ISteamGameServerNetworking_GetListenSocketInfo(SNetListenSocket_t hListenSocket, out uint pnIP, out ushort pnPort);

		[PreserveSig]
		[Token(Token = "0x600094C")]
		[Address(RVA = "0x141AA7C", Offset = "0x141AA7C", VA = "0x141AA7C")]
		public static extern ESNetSocketConnectionType ISteamGameServerNetworking_GetSocketConnectionType(SNetSocket_t hSocket);

		[PreserveSig]
		[Token(Token = "0x600094D")]
		[Address(RVA = "0x141AB1C", Offset = "0x141AB1C", VA = "0x141AB1C")]
		public static extern int ISteamGameServerNetworking_GetMaxPacketSize(SNetSocket_t hSocket);

		[PreserveSig]
		[Token(Token = "0x600094E")]
		[Address(RVA = "0x141ABBC", Offset = "0x141ABBC", VA = "0x141ABBC")]
		public static extern ulong ISteamGameServerUGC_CreateQueryUserUGCRequest(AccountID_t unAccountID, EUserUGCList eListType, EUGCMatchingUGCType eMatchingUGCType, EUserUGCListSortOrder eSortOrder, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint unPage);

		[PreserveSig]
		[Token(Token = "0x600094F")]
		[Address(RVA = "0x141ACA4", Offset = "0x141ACA4", VA = "0x141ACA4")]
		public static extern ulong ISteamGameServerUGC_CreateQueryAllUGCRequest(EUGCQuery eQueryType, EUGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint unPage);

		[PreserveSig]
		[Token(Token = "0x6000950")]
		[Address(RVA = "0x141AD74", Offset = "0x141AD74", VA = "0x141AD74")]
		public static extern ulong ISteamGameServerUGC_CreateQueryUGCDetailsRequest([In][Out] PublishedFileId_t[] pvecPublishedFileID, uint unNumPublishedFileIDs);

		[PreserveSig]
		[Token(Token = "0x6000951")]
		[Address(RVA = "0x141AE2C", Offset = "0x141AE2C", VA = "0x141AE2C")]
		public static extern ulong ISteamGameServerUGC_SendQueryUGCRequest(UGCQueryHandle_t handle);

		[PreserveSig]
		[Token(Token = "0x6000952")]
		[Address(RVA = "0x141AECC", Offset = "0x141AECC", VA = "0x141AECC")]
		public static extern bool ISteamGameServerUGC_GetQueryUGCResult(UGCQueryHandle_t handle, uint index, out SteamUGCDetails_t pDetails);

		[PreserveSig]
		[Token(Token = "0x6000953")]
		[Address(RVA = "0x141AFE4", Offset = "0x141AFE4", VA = "0x141AFE4")]
		public static extern bool ISteamGameServerUGC_GetQueryUGCPreviewURL(UGCQueryHandle_t handle, uint index, IntPtr pchURL, uint cchURLSize);

		[PreserveSig]
		[Token(Token = "0x6000954")]
		[Address(RVA = "0x141B0B4", Offset = "0x141B0B4", VA = "0x141B0B4")]
		public static extern bool ISteamGameServerUGC_GetQueryUGCMetadata(UGCQueryHandle_t handle, uint index, IntPtr pchMetadata, uint cchMetadatasize);

		[PreserveSig]
		[Token(Token = "0x6000955")]
		[Address(RVA = "0x141B184", Offset = "0x141B184", VA = "0x141B184")]
		public static extern bool ISteamGameServerUGC_GetQueryUGCChildren(UGCQueryHandle_t handle, uint index, [In][Out] PublishedFileId_t[] pvecPublishedFileID, uint cMaxEntries);

		[PreserveSig]
		[Token(Token = "0x6000956")]
		[Address(RVA = "0x141B25C", Offset = "0x141B25C", VA = "0x141B25C")]
		public static extern bool ISteamGameServerUGC_GetQueryUGCStatistic(UGCQueryHandle_t handle, uint index, EItemStatistic eStatType, out uint pStatValue);

		[PreserveSig]
		[Token(Token = "0x6000957")]
		[Address(RVA = "0x141B32C", Offset = "0x141B32C", VA = "0x141B32C")]
		public static extern uint ISteamGameServerUGC_GetQueryUGCNumAdditionalPreviews(UGCQueryHandle_t handle, uint index);

		[PreserveSig]
		[Token(Token = "0x6000958")]
		[Address(RVA = "0x141B3DC", Offset = "0x141B3DC", VA = "0x141B3DC")]
		public static extern bool ISteamGameServerUGC_GetQueryUGCAdditionalPreview(UGCQueryHandle_t handle, uint index, uint previewIndex, IntPtr pchURLOrVideoID, uint cchURLSize, out bool pbIsImage);

		[PreserveSig]
		[Token(Token = "0x6000959")]
		[Address(RVA = "0x141B4D8", Offset = "0x141B4D8", VA = "0x141B4D8")]
		public static extern uint ISteamGameServerUGC_GetQueryUGCNumKeyValueTags(UGCQueryHandle_t handle, uint index);

		[PreserveSig]
		[Token(Token = "0x600095A")]
		[Address(RVA = "0x141B588", Offset = "0x141B588", VA = "0x141B588")]
		public static extern bool ISteamGameServerUGC_GetQueryUGCKeyValueTag(UGCQueryHandle_t handle, uint index, uint keyValueTagIndex, IntPtr pchKey, uint cchKeySize, IntPtr pchValue, uint cchValueSize);

		[PreserveSig]
		[Token(Token = "0x600095B")]
		[Address(RVA = "0x141B678", Offset = "0x141B678", VA = "0x141B678")]
		public static extern bool ISteamGameServerUGC_ReleaseQueryUGCRequest(UGCQueryHandle_t handle);

		[PreserveSig]
		[Token(Token = "0x600095C")]
		[Address(RVA = "0x141B720", Offset = "0x141B720", VA = "0x141B720")]
		public static extern bool ISteamGameServerUGC_AddRequiredTag(UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pTagName);

		[PreserveSig]
		[Token(Token = "0x600095D")]
		[Address(RVA = "0x141B818", Offset = "0x141B818", VA = "0x141B818")]
		public static extern bool ISteamGameServerUGC_AddExcludedTag(UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pTagName);

		[PreserveSig]
		[Token(Token = "0x600095E")]
		[Address(RVA = "0x141B910", Offset = "0x141B910", VA = "0x141B910")]
		public static extern bool ISteamGameServerUGC_SetReturnKeyValueTags(UGCQueryHandle_t handle, bool bReturnKeyValueTags);

		[PreserveSig]
		[Token(Token = "0x600095F")]
		[Address(RVA = "0x141B9C8", Offset = "0x141B9C8", VA = "0x141B9C8")]
		public static extern bool ISteamGameServerUGC_SetReturnLongDescription(UGCQueryHandle_t handle, bool bReturnLongDescription);

		[PreserveSig]
		[Token(Token = "0x6000960")]
		[Address(RVA = "0x141BA80", Offset = "0x141BA80", VA = "0x141BA80")]
		public static extern bool ISteamGameServerUGC_SetReturnMetadata(UGCQueryHandle_t handle, bool bReturnMetadata);

		[PreserveSig]
		[Token(Token = "0x6000961")]
		[Address(RVA = "0x141BB38", Offset = "0x141BB38", VA = "0x141BB38")]
		public static extern bool ISteamGameServerUGC_SetReturnChildren(UGCQueryHandle_t handle, bool bReturnChildren);

		[PreserveSig]
		[Token(Token = "0x6000962")]
		[Address(RVA = "0x141BBF0", Offset = "0x141BBF0", VA = "0x141BBF0")]
		public static extern bool ISteamGameServerUGC_SetReturnAdditionalPreviews(UGCQueryHandle_t handle, bool bReturnAdditionalPreviews);

		[PreserveSig]
		[Token(Token = "0x6000963")]
		[Address(RVA = "0x141BCA8", Offset = "0x141BCA8", VA = "0x141BCA8")]
		public static extern bool ISteamGameServerUGC_SetReturnTotalOnly(UGCQueryHandle_t handle, bool bReturnTotalOnly);

		[PreserveSig]
		[Token(Token = "0x6000964")]
		[Address(RVA = "0x141BD60", Offset = "0x141BD60", VA = "0x141BD60")]
		public static extern bool ISteamGameServerUGC_SetLanguage(UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pchLanguage);

		[PreserveSig]
		[Token(Token = "0x6000965")]
		[Address(RVA = "0x141BE58", Offset = "0x141BE58", VA = "0x141BE58")]
		public static extern bool ISteamGameServerUGC_SetAllowCachedResponse(UGCQueryHandle_t handle, uint unMaxAgeSeconds);

		[PreserveSig]
		[Token(Token = "0x6000966")]
		[Address(RVA = "0x141BF10", Offset = "0x141BF10", VA = "0x141BF10")]
		public static extern bool ISteamGameServerUGC_SetCloudFileNameFilter(UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pMatchCloudFileName);

		[PreserveSig]
		[Token(Token = "0x6000967")]
		[Address(RVA = "0x141C008", Offset = "0x141C008", VA = "0x141C008")]
		public static extern bool ISteamGameServerUGC_SetMatchAnyTag(UGCQueryHandle_t handle, bool bMatchAnyTag);

		[PreserveSig]
		[Token(Token = "0x6000968")]
		[Address(RVA = "0x141C0C0", Offset = "0x141C0C0", VA = "0x141C0C0")]
		public static extern bool ISteamGameServerUGC_SetSearchText(UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pSearchText);

		[PreserveSig]
		[Token(Token = "0x6000969")]
		[Address(RVA = "0x141C1B8", Offset = "0x141C1B8", VA = "0x141C1B8")]
		public static extern bool ISteamGameServerUGC_SetRankedByTrendDays(UGCQueryHandle_t handle, uint unDays);

		[PreserveSig]
		[Token(Token = "0x600096A")]
		[Address(RVA = "0x141C270", Offset = "0x141C270", VA = "0x141C270")]
		public static extern bool ISteamGameServerUGC_AddRequiredKeyValueTag(UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pKey, InteropHelp.UTF8StringHandle pValue);

		[PreserveSig]
		[Token(Token = "0x600096B")]
		[Address(RVA = "0x141C3B4", Offset = "0x141C3B4", VA = "0x141C3B4")]
		public static extern ulong ISteamGameServerUGC_RequestUGCDetails(PublishedFileId_t nPublishedFileID, uint unMaxAgeSeconds);

		[PreserveSig]
		[Token(Token = "0x600096C")]
		[Address(RVA = "0x141C464", Offset = "0x141C464", VA = "0x141C464")]
		public static extern ulong ISteamGameServerUGC_CreateItem(AppId_t nConsumerAppId, EWorkshopFileType eFileType);

		[PreserveSig]
		[Token(Token = "0x600096D")]
		[Address(RVA = "0x141C514", Offset = "0x141C514", VA = "0x141C514")]
		public static extern ulong ISteamGameServerUGC_StartItemUpdate(AppId_t nConsumerAppId, PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x600096E")]
		[Address(RVA = "0x141C5C4", Offset = "0x141C5C4", VA = "0x141C5C4")]
		public static extern bool ISteamGameServerUGC_SetItemTitle(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchTitle);

		[PreserveSig]
		[Token(Token = "0x600096F")]
		[Address(RVA = "0x141C6BC", Offset = "0x141C6BC", VA = "0x141C6BC")]
		public static extern bool ISteamGameServerUGC_SetItemDescription(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchDescription);

		[PreserveSig]
		[Token(Token = "0x6000970")]
		[Address(RVA = "0x141C7B4", Offset = "0x141C7B4", VA = "0x141C7B4")]
		public static extern bool ISteamGameServerUGC_SetItemUpdateLanguage(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchLanguage);

		[PreserveSig]
		[Token(Token = "0x6000971")]
		[Address(RVA = "0x141C8AC", Offset = "0x141C8AC", VA = "0x141C8AC")]
		public static extern bool ISteamGameServerUGC_SetItemMetadata(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchMetaData);

		[PreserveSig]
		[Token(Token = "0x6000972")]
		[Address(RVA = "0x141C9A4", Offset = "0x141C9A4", VA = "0x141C9A4")]
		public static extern bool ISteamGameServerUGC_SetItemVisibility(UGCUpdateHandle_t handle, ERemoteStoragePublishedFileVisibility eVisibility);

		[PreserveSig]
		[Token(Token = "0x6000973")]
		[Address(RVA = "0x141CA5C", Offset = "0x141CA5C", VA = "0x141CA5C")]
		public static extern bool ISteamGameServerUGC_SetItemTags(UGCUpdateHandle_t updateHandle, IntPtr pTags);

		[PreserveSig]
		[Token(Token = "0x6000974")]
		[Address(RVA = "0x141CB14", Offset = "0x141CB14", VA = "0x141CB14")]
		public static extern bool ISteamGameServerUGC_SetItemContent(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pszContentFolder);

		[PreserveSig]
		[Token(Token = "0x6000975")]
		[Address(RVA = "0x141CC0C", Offset = "0x141CC0C", VA = "0x141CC0C")]
		public static extern bool ISteamGameServerUGC_SetItemPreview(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pszPreviewFile);

		[PreserveSig]
		[Token(Token = "0x6000976")]
		[Address(RVA = "0x141CD04", Offset = "0x141CD04", VA = "0x141CD04")]
		public static extern bool ISteamGameServerUGC_RemoveItemKeyValueTags(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchKey);

		[PreserveSig]
		[Token(Token = "0x6000977")]
		[Address(RVA = "0x141CDFC", Offset = "0x141CDFC", VA = "0x141CDFC")]
		public static extern bool ISteamGameServerUGC_AddItemKeyValueTag(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchKey, InteropHelp.UTF8StringHandle pchValue);

		[PreserveSig]
		[Token(Token = "0x6000978")]
		[Address(RVA = "0x141CF40", Offset = "0x141CF40", VA = "0x141CF40")]
		public static extern ulong ISteamGameServerUGC_SubmitItemUpdate(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchChangeNote);

		[PreserveSig]
		[Token(Token = "0x6000979")]
		[Address(RVA = "0x141D034", Offset = "0x141D034", VA = "0x141D034")]
		public static extern EItemUpdateStatus ISteamGameServerUGC_GetItemUpdateProgress(UGCUpdateHandle_t handle, out ulong punBytesProcessed, out ulong punBytesTotal);

		[PreserveSig]
		[Token(Token = "0x600097A")]
		[Address(RVA = "0x141D0EC", Offset = "0x141D0EC", VA = "0x141D0EC")]
		public static extern ulong ISteamGameServerUGC_SetUserItemVote(PublishedFileId_t nPublishedFileID, bool bVoteUp);

		[PreserveSig]
		[Token(Token = "0x600097B")]
		[Address(RVA = "0x141D19C", Offset = "0x141D19C", VA = "0x141D19C")]
		public static extern ulong ISteamGameServerUGC_GetUserItemVote(PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x600097C")]
		[Address(RVA = "0x141D23C", Offset = "0x141D23C", VA = "0x141D23C")]
		public static extern ulong ISteamGameServerUGC_AddItemToFavorites(AppId_t nAppId, PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x600097D")]
		[Address(RVA = "0x141D2EC", Offset = "0x141D2EC", VA = "0x141D2EC")]
		public static extern ulong ISteamGameServerUGC_RemoveItemFromFavorites(AppId_t nAppId, PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x600097E")]
		[Address(RVA = "0x141D39C", Offset = "0x141D39C", VA = "0x141D39C")]
		public static extern ulong ISteamGameServerUGC_SubscribeItem(PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x600097F")]
		[Address(RVA = "0x141D43C", Offset = "0x141D43C", VA = "0x141D43C")]
		public static extern ulong ISteamGameServerUGC_UnsubscribeItem(PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x6000980")]
		[Address(RVA = "0x141D4DC", Offset = "0x141D4DC", VA = "0x141D4DC")]
		public static extern uint ISteamGameServerUGC_GetNumSubscribedItems();

		[PreserveSig]
		[Token(Token = "0x6000981")]
		[Address(RVA = "0x141D56C", Offset = "0x141D56C", VA = "0x141D56C")]
		public static extern uint ISteamGameServerUGC_GetSubscribedItems([In][Out] PublishedFileId_t[] pvecPublishedFileID, uint cMaxEntries);

		[PreserveSig]
		[Token(Token = "0x6000982")]
		[Address(RVA = "0x141D624", Offset = "0x141D624", VA = "0x141D624")]
		public static extern uint ISteamGameServerUGC_GetItemState(PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x6000983")]
		[Address(RVA = "0x141D6C4", Offset = "0x141D6C4", VA = "0x141D6C4")]
		public static extern bool ISteamGameServerUGC_GetItemInstallInfo(PublishedFileId_t nPublishedFileID, out ulong punSizeOnDisk, IntPtr pchFolder, uint cchFolderSize, out uint punTimeStamp);

		[PreserveSig]
		[Token(Token = "0x6000984")]
		[Address(RVA = "0x141D79C", Offset = "0x141D79C", VA = "0x141D79C")]
		public static extern bool ISteamGameServerUGC_GetItemDownloadInfo(PublishedFileId_t nPublishedFileID, out ulong punBytesDownloaded, out ulong punBytesTotal);

		[PreserveSig]
		[Token(Token = "0x6000985")]
		[Address(RVA = "0x141D85C", Offset = "0x141D85C", VA = "0x141D85C")]
		public static extern bool ISteamGameServerUGC_DownloadItem(PublishedFileId_t nPublishedFileID, bool bHighPriority);

		[PreserveSig]
		[Token(Token = "0x6000986")]
		[Address(RVA = "0x141D914", Offset = "0x141D914", VA = "0x141D914")]
		public static extern uint ISteamGameServerUtils_GetSecondsSinceAppActive();

		[PreserveSig]
		[Token(Token = "0x6000987")]
		[Address(RVA = "0x141D9A4", Offset = "0x141D9A4", VA = "0x141D9A4")]
		public static extern uint ISteamGameServerUtils_GetSecondsSinceComputerActive();

		[PreserveSig]
		[Token(Token = "0x6000988")]
		[Address(RVA = "0x141DA34", Offset = "0x141DA34", VA = "0x141DA34")]
		public static extern EUniverse ISteamGameServerUtils_GetConnectedUniverse();

		[PreserveSig]
		[Token(Token = "0x6000989")]
		[Address(RVA = "0x141DAC4", Offset = "0x141DAC4", VA = "0x141DAC4")]
		public static extern uint ISteamGameServerUtils_GetServerRealTime();

		[PreserveSig]
		[Token(Token = "0x600098A")]
		[Address(RVA = "0x141DB54", Offset = "0x141DB54", VA = "0x141DB54")]
		public static extern IntPtr ISteamGameServerUtils_GetIPCountry();

		[PreserveSig]
		[Token(Token = "0x600098B")]
		[Address(RVA = "0x141DBE4", Offset = "0x141DBE4", VA = "0x141DBE4")]
		public static extern bool ISteamGameServerUtils_GetImageSize(int iImage, out uint pnWidth, out uint pnHeight);

		[PreserveSig]
		[Token(Token = "0x600098C")]
		[Address(RVA = "0x141DCA4", Offset = "0x141DCA4", VA = "0x141DCA4")]
		public static extern bool ISteamGameServerUtils_GetImageRGBA(int iImage, [In][Out] byte[] pubDest, int nDestBufferSize);

		[PreserveSig]
		[Token(Token = "0x600098D")]
		[Address(RVA = "0x141DD6C", Offset = "0x141DD6C", VA = "0x141DD6C")]
		public static extern bool ISteamGameServerUtils_GetCSERIPPort(out uint unIP, out ushort usPort);

		[PreserveSig]
		[Token(Token = "0x600098E")]
		[Address(RVA = "0x141DE24", Offset = "0x141DE24", VA = "0x141DE24")]
		public static extern byte ISteamGameServerUtils_GetCurrentBatteryPower();

		[PreserveSig]
		[Token(Token = "0x600098F")]
		[Address(RVA = "0x141DEB4", Offset = "0x141DEB4", VA = "0x141DEB4")]
		public static extern uint ISteamGameServerUtils_GetAppID();

		[PreserveSig]
		[Token(Token = "0x6000990")]
		[Address(RVA = "0x141DF44", Offset = "0x141DF44", VA = "0x141DF44")]
		public static extern void ISteamGameServerUtils_SetOverlayNotificationPosition(ENotificationPosition eNotificationPosition);

		[PreserveSig]
		[Token(Token = "0x6000991")]
		[Address(RVA = "0x141DFE4", Offset = "0x141DFE4", VA = "0x141DFE4")]
		public static extern bool ISteamGameServerUtils_IsAPICallCompleted(SteamAPICall_t hSteamAPICall, out bool pbFailed);

		[PreserveSig]
		[Token(Token = "0x6000992")]
		[Address(RVA = "0x141E0B0", Offset = "0x141E0B0", VA = "0x141E0B0")]
		public static extern ESteamAPICallFailure ISteamGameServerUtils_GetAPICallFailureReason(SteamAPICall_t hSteamAPICall);

		[PreserveSig]
		[Token(Token = "0x6000993")]
		[Address(RVA = "0x141E150", Offset = "0x141E150", VA = "0x141E150")]
		public static extern bool ISteamGameServerUtils_GetAPICallResult(SteamAPICall_t hSteamAPICall, IntPtr pCallback, int cubCallback, int iCallbackExpected, out bool pbFailed);

		[PreserveSig]
		[Token(Token = "0x6000994")]
		[Address(RVA = "0x141E23C", Offset = "0x141E23C", VA = "0x141E23C")]
		public static extern void ISteamGameServerUtils_RunFrame();

		[PreserveSig]
		[Token(Token = "0x6000995")]
		[Address(RVA = "0x141E2CC", Offset = "0x141E2CC", VA = "0x141E2CC")]
		public static extern uint ISteamGameServerUtils_GetIPCCallCount();

		[PreserveSig]
		[Token(Token = "0x6000996")]
		[Address(RVA = "0x141E35C", Offset = "0x141E35C", VA = "0x141E35C")]
		public static extern void ISteamGameServerUtils_SetWarningMessageHook(SteamAPIWarningMessageHook_t pFunction);

		[PreserveSig]
		[Token(Token = "0x6000997")]
		[Address(RVA = "0x141E400", Offset = "0x141E400", VA = "0x141E400")]
		public static extern bool ISteamGameServerUtils_IsOverlayEnabled();

		[PreserveSig]
		[Token(Token = "0x6000998")]
		[Address(RVA = "0x141E498", Offset = "0x141E498", VA = "0x141E498")]
		public static extern bool ISteamGameServerUtils_BOverlayNeedsPresent();

		[PreserveSig]
		[Token(Token = "0x6000999")]
		[Address(RVA = "0x141E530", Offset = "0x141E530", VA = "0x141E530")]
		public static extern ulong ISteamGameServerUtils_CheckFileSignature(InteropHelp.UTF8StringHandle szFileName);

		[PreserveSig]
		[Token(Token = "0x600099A")]
		[Address(RVA = "0x141E614", Offset = "0x141E614", VA = "0x141E614")]
		public static extern bool ISteamGameServerUtils_ShowGamepadTextInput(EGamepadTextInputMode eInputMode, EGamepadTextInputLineMode eLineInputMode, InteropHelp.UTF8StringHandle pchDescription, uint unCharMax, InteropHelp.UTF8StringHandle pchExistingText);

		[PreserveSig]
		[Token(Token = "0x600099B")]
		[Address(RVA = "0x141E770", Offset = "0x141E770", VA = "0x141E770")]
		public static extern uint ISteamGameServerUtils_GetEnteredGamepadTextLength();

		[PreserveSig]
		[Token(Token = "0x600099C")]
		[Address(RVA = "0x141E800", Offset = "0x141E800", VA = "0x141E800")]
		public static extern bool ISteamGameServerUtils_GetEnteredGamepadTextInput(IntPtr pchText, uint cchText);

		[PreserveSig]
		[Token(Token = "0x600099D")]
		[Address(RVA = "0x141E8B8", Offset = "0x141E8B8", VA = "0x141E8B8")]
		public static extern IntPtr ISteamGameServerUtils_GetSteamUILanguage();

		[PreserveSig]
		[Token(Token = "0x600099E")]
		[Address(RVA = "0x141E948", Offset = "0x141E948", VA = "0x141E948")]
		public static extern bool ISteamGameServerUtils_IsSteamRunningInVR();

		[PreserveSig]
		[Token(Token = "0x600099F")]
		[Address(RVA = "0x141E9E0", Offset = "0x141E9E0", VA = "0x141E9E0")]
		public static extern void ISteamGameServerUtils_SetOverlayNotificationInset(int nHorizontalInset, int nVerticalInset);
	}
	[Token(Token = "0x200009C")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48684", Offset = "0xB48684")]
	public struct SteamAppInstalled_t
	{
		[Token(Token = "0x40003AF")]
		public const int k_iCallback = 3901;

		[Token(Token = "0x40003B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AppId_t m_nAppID;
	}
	[Token(Token = "0x200009D")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48698", Offset = "0xB48698")]
	public struct SteamAppUninstalled_t
	{
		[Token(Token = "0x40003B1")]
		public const int k_iCallback = 3902;

		[Token(Token = "0x40003B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AppId_t m_nAppID;
	}
	[Token(Token = "0x200009E")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB486AC", Offset = "0xB486AC")]
	public struct DlcInstalled_t
	{
		[Token(Token = "0x40003B3")]
		public const int k_iCallback = 1005;

		[Token(Token = "0x40003B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AppId_t m_nAppID;
	}
	[Token(Token = "0x200009F")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB486C0", Offset = "0xB486C0")]
	public struct RegisterActivationCodeResponse_t
	{
		[Token(Token = "0x40003B5")]
		public const int k_iCallback = 1008;

		[Token(Token = "0x40003B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ERegisterActivationCodeResult m_eResult;

		[Token(Token = "0x40003B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint m_unPackageRegistered;
	}
	[Token(Token = "0x20000A0")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB486D4", Offset = "0xB486D4")]
	public struct AppProofOfPurchaseKeyResponse_t
	{
		[Token(Token = "0x40003B8")]
		public const int k_iCallback = 1013;

		[Token(Token = "0x40003B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x40003BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint m_nAppID;

		[Token(Token = "0x40003BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string m_rgchKey;
	}
	[Token(Token = "0x20000A1")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB486E8", Offset = "0xB486E8")]
	public struct NewLaunchQueryParameters_t
	{
		[Token(Token = "0x40003BC")]
		public const int k_iCallback = 1014;
	}
	[Token(Token = "0x20000A2")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB486FC", Offset = "0xB486FC")]
	public struct PersonaStateChange_t
	{
		[Token(Token = "0x40003BD")]
		public const int k_iCallback = 304;

		[Token(Token = "0x40003BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ulSteamID;

		[Token(Token = "0x40003BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EPersonaChange m_nChangeFlags;
	}
	[Token(Token = "0x20000A3")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48710", Offset = "0xB48710")]
	public struct GameOverlayActivated_t
	{
		[Token(Token = "0x40003C0")]
		public const int k_iCallback = 331;

		[Token(Token = "0x40003C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte m_bActive;
	}
	[Token(Token = "0x20000A4")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48724", Offset = "0xB48724")]
	public struct GameServerChangeRequested_t
	{
		[Token(Token = "0x40003C2")]
		public const int k_iCallback = 332;

		[Token(Token = "0x40003C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string m_rgchServer;

		[Token(Token = "0x40003C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string m_rgchPassword;
	}
	[Token(Token = "0x20000A5")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48738", Offset = "0xB48738")]
	public struct GameLobbyJoinRequested_t
	{
		[Token(Token = "0x40003C5")]
		public const int k_iCallback = 333;

		[Token(Token = "0x40003C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDLobby;

		[Token(Token = "0x40003C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public CSteamID m_steamIDFriend;
	}
	[Token(Token = "0x20000A6")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB4874C", Offset = "0xB4874C")]
	public struct AvatarImageLoaded_t
	{
		[Token(Token = "0x40003C8")]
		public const int k_iCallback = 334;

		[Token(Token = "0x40003C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamID;

		[Token(Token = "0x40003CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_iImage;

		[Token(Token = "0x40003CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int m_iWide;

		[Token(Token = "0x40003CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_iTall;
	}
	[Token(Token = "0x20000A7")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48760", Offset = "0xB48760")]
	public struct ClanOfficerListResponse_t
	{
		[Token(Token = "0x40003CD")]
		public const int k_iCallback = 335;

		[Token(Token = "0x40003CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDClan;

		[Token(Token = "0x40003CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_cOfficers;

		[Token(Token = "0x40003D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public byte m_bSuccess;
	}
	[Token(Token = "0x20000A8")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48774", Offset = "0xB48774")]
	public struct FriendRichPresenceUpdate_t
	{
		[Token(Token = "0x40003D1")]
		public const int k_iCallback = 336;

		[Token(Token = "0x40003D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDFriend;

		[Token(Token = "0x40003D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AppId_t m_nAppID;
	}
	[Token(Token = "0x20000A9")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48788", Offset = "0xB48788")]
	public struct GameRichPresenceJoinRequested_t
	{
		[Token(Token = "0x40003D4")]
		public const int k_iCallback = 337;

		[Token(Token = "0x40003D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDFriend;

		[Token(Token = "0x40003D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string m_rgchConnect;
	}
	[Token(Token = "0x20000AA")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB4879C", Offset = "0xB4879C")]
	public struct GameConnectedClanChatMsg_t
	{
		[Token(Token = "0x40003D7")]
		public const int k_iCallback = 338;

		[Token(Token = "0x40003D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDClanChat;

		[Token(Token = "0x40003D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public CSteamID m_steamIDUser;

		[Token(Token = "0x40003DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_iMessageID;
	}
	[Token(Token = "0x20000AB")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB487B0", Offset = "0xB487B0")]
	public struct GameConnectedChatJoin_t
	{
		[Token(Token = "0x40003DB")]
		public const int k_iCallback = 339;

		[Token(Token = "0x40003DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDClanChat;

		[Token(Token = "0x40003DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public CSteamID m_steamIDUser;
	}
	[Token(Token = "0x20000AC")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB487C4", Offset = "0xB487C4")]
	public struct GameConnectedChatLeave_t
	{
		[Token(Token = "0x40003DE")]
		public const int k_iCallback = 340;

		[Token(Token = "0x40003DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDClanChat;

		[Token(Token = "0x40003E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public CSteamID m_steamIDUser;

		[Token(Token = "0x40003E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool m_bKicked;

		[Token(Token = "0x40003E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool m_bDropped;
	}
	[Token(Token = "0x20000AD")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB487D8", Offset = "0xB487D8")]
	public struct DownloadClanActivityCountsResult_t
	{
		[Token(Token = "0x40003E3")]
		public const int k_iCallback = 341;

		[Token(Token = "0x40003E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool m_bSuccess;
	}
	[Token(Token = "0x20000AE")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB487EC", Offset = "0xB487EC")]
	public struct JoinClanChatRoomCompletionResult_t
	{
		[Token(Token = "0x40003E5")]
		public const int k_iCallback = 342;

		[Token(Token = "0x40003E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDClanChat;

		[Token(Token = "0x40003E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EChatRoomEnterResponse m_eChatRoomEnterResponse;
	}
	[Token(Token = "0x20000AF")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48800", Offset = "0xB48800")]
	public struct GameConnectedFriendChatMsg_t
	{
		[Token(Token = "0x40003E8")]
		public const int k_iCallback = 343;

		[Token(Token = "0x40003E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDUser;

		[Token(Token = "0x40003EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_iMessageID;
	}
	[Token(Token = "0x20000B0")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48814", Offset = "0xB48814")]
	public struct FriendsGetFollowerCount_t
	{
		[Token(Token = "0x40003EB")]
		public const int k_iCallback = 344;

		[Token(Token = "0x40003EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x40003ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public CSteamID m_steamID;

		[Token(Token = "0x40003EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int m_nCount;
	}
	[Token(Token = "0x20000B1")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48828", Offset = "0xB48828")]
	public struct FriendsIsFollowing_t
	{
		[Token(Token = "0x40003EF")]
		public const int k_iCallback = 345;

		[Token(Token = "0x40003F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x40003F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public CSteamID m_steamID;

		[Token(Token = "0x40003F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool m_bIsFollowing;
	}
	[Token(Token = "0x20000B2")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB4883C", Offset = "0xB4883C")]
	public struct FriendsEnumerateFollowingList_t
	{
		[Token(Token = "0x40003F3")]
		public const int k_iCallback = 346;

		[Token(Token = "0x40003F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x40003F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public CSteamID[] m_rgSteamID;

		[Token(Token = "0x40003F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_nResultsReturned;

		[Token(Token = "0x40003F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int m_nTotalResultCount;
	}
	[Token(Token = "0x20000B3")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48850", Offset = "0xB48850")]
	public struct SetPersonaNameResponse_t
	{
		[Token(Token = "0x40003F8")]
		public const int k_iCallback = 347;

		[Token(Token = "0x40003F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool m_bSuccess;

		[Token(Token = "0x40003FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		public bool m_bLocalSuccess;

		[Token(Token = "0x40003FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public EResult m_result;
	}
	[Token(Token = "0x20000B4")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48864", Offset = "0xB48864")]
	public struct GCMessageAvailable_t
	{
		[Token(Token = "0x40003FC")]
		public const int k_iCallback = 1701;

		[Token(Token = "0x40003FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_nMessageSize;
	}
	[Token(Token = "0x20000B5")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48878", Offset = "0xB48878")]
	public struct GCMessageFailed_t
	{
		[Token(Token = "0x40003FE")]
		public const int k_iCallback = 1702;
	}
	[Token(Token = "0x20000B6")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB4888C", Offset = "0xB4888C")]
	public struct GSClientApprove_t
	{
		[Token(Token = "0x40003FF")]
		public const int k_iCallback = 201;

		[Token(Token = "0x4000400")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_SteamID;

		[Token(Token = "0x4000401")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public CSteamID m_OwnerSteamID;
	}
	[Token(Token = "0x20000B7")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB488A0", Offset = "0xB488A0")]
	public struct GSClientDeny_t
	{
		[Token(Token = "0x4000402")]
		public const int k_iCallback = 202;

		[Token(Token = "0x4000403")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_SteamID;

		[Token(Token = "0x4000404")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EDenyReason m_eDenyReason;

		[Token(Token = "0x4000405")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string m_rgchOptionalText;
	}
	[Token(Token = "0x20000B8")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB488B4", Offset = "0xB488B4")]
	public struct GSClientKick_t
	{
		[Token(Token = "0x4000406")]
		public const int k_iCallback = 203;

		[Token(Token = "0x4000407")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_SteamID;

		[Token(Token = "0x4000408")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EDenyReason m_eDenyReason;
	}
	[Token(Token = "0x20000B9")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB488C8", Offset = "0xB488C8")]
	public struct GSClientAchievementStatus_t
	{
		[Token(Token = "0x4000409")]
		public const int k_iCallback = 206;

		[Token(Token = "0x400040A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_SteamID;

		[Token(Token = "0x400040B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string m_pchAchievement;

		[Token(Token = "0x400040C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool m_bUnlocked;
	}
	[Token(Token = "0x20000BA")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB488DC", Offset = "0xB488DC")]
	public struct GSPolicyResponse_t
	{
		[Token(Token = "0x400040D")]
		public const int k_iCallback = 115;

		[Token(Token = "0x400040E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte m_bSecure;
	}
	[Token(Token = "0x20000BB")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB488F0", Offset = "0xB488F0")]
	public struct GSGameplayStats_t
	{
		[Token(Token = "0x400040F")]
		public const int k_iCallback = 207;

		[Token(Token = "0x4000410")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000411")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int m_nRank;

		[Token(Token = "0x4000412")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint m_unTotalConnects;

		[Token(Token = "0x4000413")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_unTotalMinutesPlayed;
	}
	[Token(Token = "0x20000BC")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48904", Offset = "0xB48904")]
	public struct GSClientGroupStatus_t
	{
		[Token(Token = "0x4000414")]
		public const int k_iCallback = 208;

		[Token(Token = "0x4000415")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_SteamIDUser;

		[Token(Token = "0x4000416")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public CSteamID m_SteamIDGroup;

		[Token(Token = "0x4000417")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool m_bMember;

		[Token(Token = "0x4000418")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool m_bOfficer;
	}
	[Token(Token = "0x20000BD")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48918", Offset = "0xB48918")]
	public struct GSReputation_t
	{
		[Token(Token = "0x4000419")]
		public const int k_iCallback = 209;

		[Token(Token = "0x400041A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x400041B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint m_unReputationScore;

		[Token(Token = "0x400041C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool m_bBanned;

		[Token(Token = "0x400041D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_unBannedIP;

		[Token(Token = "0x400041E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ushort m_usBannedPort;

		[Token(Token = "0x400041F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ulong m_ulBannedGameID;

		[Token(Token = "0x4000420")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public uint m_unBanExpires;
	}
	[Token(Token = "0x20000BE")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB4892C", Offset = "0xB4892C")]
	public struct AssociateWithClanResult_t
	{
		[Token(Token = "0x4000421")]
		public const int k_iCallback = 210;

		[Token(Token = "0x4000422")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;
	}
	[Token(Token = "0x20000BF")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48940", Offset = "0xB48940")]
	public struct ComputeNewPlayerCompatibilityResult_t
	{
		[Token(Token = "0x4000423")]
		public const int k_iCallback = 211;

		[Token(Token = "0x4000424")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000425")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int m_cPlayersThatDontLikeCandidate;

		[Token(Token = "0x4000426")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_cPlayersThatCandidateDoesntLike;

		[Token(Token = "0x4000427")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int m_cClanPlayersThatDontLikeCandidate;

		[Token(Token = "0x4000428")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public CSteamID m_SteamIDCandidate;
	}
	[Token(Token = "0x20000C0")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48954", Offset = "0xB48954")]
	public struct GSStatsReceived_t
	{
		[Token(Token = "0x4000429")]
		public const int k_iCallback = 1800;

		[Token(Token = "0x400042A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x400042B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public CSteamID m_steamIDUser;
	}
	[Token(Token = "0x20000C1")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48968", Offset = "0xB48968")]
	public struct GSStatsStored_t
	{
		[Token(Token = "0x400042C")]
		public const int k_iCallback = 1801;

		[Token(Token = "0x400042D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x400042E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public CSteamID m_steamIDUser;
	}
	[Token(Token = "0x20000C2")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB4897C", Offset = "0xB4897C")]
	public struct GSStatsUnloaded_t
	{
		[Token(Token = "0x400042F")]
		public const int k_iCallback = 1108;

		[Token(Token = "0x4000430")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDUser;
	}
	[Token(Token = "0x20000C3")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48990", Offset = "0xB48990")]
	public struct HTML_BrowserReady_t
	{
		[Token(Token = "0x4000431")]
		public const int k_iCallback = 4501;

		[Token(Token = "0x4000432")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;
	}
	[Token(Token = "0x20000C4")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB489A4", Offset = "0xB489A4")]
	public struct HTML_NeedsPaint_t
	{
		[Token(Token = "0x4000433")]
		public const int k_iCallback = 4502;

		[Token(Token = "0x4000434")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x4000435")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public IntPtr pBGRA;

		[Token(Token = "0x4000436")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint unWide;

		[Token(Token = "0x4000437")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint unTall;

		[Token(Token = "0x4000438")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint unUpdateX;

		[Token(Token = "0x4000439")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public uint unUpdateY;

		[Token(Token = "0x400043A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public uint unUpdateWide;

		[Token(Token = "0x400043B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public uint unUpdateTall;

		[Token(Token = "0x400043C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public uint unScrollX;

		[Token(Token = "0x400043D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public uint unScrollY;

		[Token(Token = "0x400043E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float flPageScale;

		[Token(Token = "0x400043F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public uint unPageSerial;
	}
	[Token(Token = "0x20000C5")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB489B8", Offset = "0xB489B8")]
	public struct HTML_StartRequest_t
	{
		[Token(Token = "0x4000440")]
		public const int k_iCallback = 4503;

		[Token(Token = "0x4000441")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x4000442")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchURL;

		[Token(Token = "0x4000443")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string pchTarget;

		[Token(Token = "0x4000444")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string pchPostData;

		[Token(Token = "0x4000445")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool bIsRedirect;
	}
	[Token(Token = "0x20000C6")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB489CC", Offset = "0xB489CC")]
	public struct HTML_CloseBrowser_t
	{
		[Token(Token = "0x4000446")]
		public const int k_iCallback = 4504;

		[Token(Token = "0x4000447")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;
	}
	[Token(Token = "0x20000C7")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB489E0", Offset = "0xB489E0")]
	public struct HTML_URLChanged_t
	{
		[Token(Token = "0x4000448")]
		public const int k_iCallback = 4505;

		[Token(Token = "0x4000449")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x400044A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchURL;

		[Token(Token = "0x400044B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string pchPostData;

		[Token(Token = "0x400044C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool bIsRedirect;

		[Token(Token = "0x400044D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string pchPageTitle;

		[Token(Token = "0x400044E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool bNewNavigation;
	}
	[Token(Token = "0x20000C8")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB489F4", Offset = "0xB489F4")]
	public struct HTML_FinishedRequest_t
	{
		[Token(Token = "0x400044F")]
		public const int k_iCallback = 4506;

		[Token(Token = "0x4000450")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x4000451")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchURL;

		[Token(Token = "0x4000452")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string pchPageTitle;
	}
	[Token(Token = "0x20000C9")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48A08", Offset = "0xB48A08")]
	public struct HTML_OpenLinkInNewTab_t
	{
		[Token(Token = "0x4000453")]
		public const int k_iCallback = 4507;

		[Token(Token = "0x4000454")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x4000455")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchURL;
	}
	[Token(Token = "0x20000CA")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48A1C", Offset = "0xB48A1C")]
	public struct HTML_ChangedTitle_t
	{
		[Token(Token = "0x4000456")]
		public const int k_iCallback = 4508;

		[Token(Token = "0x4000457")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x4000458")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchTitle;
	}
	[Token(Token = "0x20000CB")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48A30", Offset = "0xB48A30")]
	public struct HTML_SearchResults_t
	{
		[Token(Token = "0x4000459")]
		public const int k_iCallback = 4509;

		[Token(Token = "0x400045A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x400045B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint unResults;

		[Token(Token = "0x400045C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint unCurrentMatch;
	}
	[Token(Token = "0x20000CC")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48A44", Offset = "0xB48A44")]
	public struct HTML_CanGoBackAndForward_t
	{
		[Token(Token = "0x400045D")]
		public const int k_iCallback = 4510;

		[Token(Token = "0x400045E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x400045F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public bool bCanGoBack;

		[Token(Token = "0x4000460")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5")]
		public bool bCanGoForward;
	}
	[Token(Token = "0x20000CD")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48A58", Offset = "0xB48A58")]
	public struct HTML_HorizontalScroll_t
	{
		[Token(Token = "0x4000461")]
		public const int k_iCallback = 4511;

		[Token(Token = "0x4000462")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x4000463")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint unScrollMax;

		[Token(Token = "0x4000464")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint unScrollCurrent;

		[Token(Token = "0x4000465")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float flPageScale;

		[Token(Token = "0x4000466")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool bVisible;

		[Token(Token = "0x4000467")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint unPageSize;
	}
	[Token(Token = "0x20000CE")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48A6C", Offset = "0xB48A6C")]
	public struct HTML_VerticalScroll_t
	{
		[Token(Token = "0x4000468")]
		public const int k_iCallback = 4512;

		[Token(Token = "0x4000469")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x400046A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint unScrollMax;

		[Token(Token = "0x400046B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint unScrollCurrent;

		[Token(Token = "0x400046C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float flPageScale;

		[Token(Token = "0x400046D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool bVisible;

		[Token(Token = "0x400046E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint unPageSize;
	}
	[Token(Token = "0x20000CF")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48A80", Offset = "0xB48A80")]
	public struct HTML_LinkAtPosition_t
	{
		[Token(Token = "0x400046F")]
		public const int k_iCallback = 4513;

		[Token(Token = "0x4000470")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x4000471")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint x;

		[Token(Token = "0x4000472")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint y;

		[Token(Token = "0x4000473")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string pchURL;

		[Token(Token = "0x4000474")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool bInput;

		[Token(Token = "0x4000475")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool bLiveLink;
	}
	[Token(Token = "0x20000D0")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48A94", Offset = "0xB48A94")]
	public struct HTML_JSAlert_t
	{
		[Token(Token = "0x4000476")]
		public const int k_iCallback = 4514;

		[Token(Token = "0x4000477")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x4000478")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchMessage;
	}
	[Token(Token = "0x20000D1")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48AA8", Offset = "0xB48AA8")]
	public struct HTML_JSConfirm_t
	{
		[Token(Token = "0x4000479")]
		public const int k_iCallback = 4515;

		[Token(Token = "0x400047A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x400047B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchMessage;
	}
	[Token(Token = "0x20000D2")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48ABC", Offset = "0xB48ABC")]
	public struct HTML_FileOpenDialog_t
	{
		[Token(Token = "0x400047C")]
		public const int k_iCallback = 4516;

		[Token(Token = "0x400047D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x400047E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchTitle;

		[Token(Token = "0x400047F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string pchInitialFile;
	}
	[Token(Token = "0x20000D3")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48AD0", Offset = "0xB48AD0")]
	public struct HTML_NewWindow_t
	{
		[Token(Token = "0x4000480")]
		public const int k_iCallback = 4521;

		[Token(Token = "0x4000481")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x4000482")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchURL;

		[Token(Token = "0x4000483")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint unX;

		[Token(Token = "0x4000484")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint unY;

		[Token(Token = "0x4000485")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint unWide;

		[Token(Token = "0x4000486")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public uint unTall;

		[Token(Token = "0x4000487")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HHTMLBrowser unNewWindow_BrowserHandle;
	}
	[Token(Token = "0x20000D4")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48AE4", Offset = "0xB48AE4")]
	public struct HTML_SetCursor_t
	{
		[Token(Token = "0x4000488")]
		public const int k_iCallback = 4522;

		[Token(Token = "0x4000489")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x400048A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint eMouseCursor;
	}
	[Token(Token = "0x20000D5")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48AF8", Offset = "0xB48AF8")]
	public struct HTML_StatusText_t
	{
		[Token(Token = "0x400048B")]
		public const int k_iCallback = 4523;

		[Token(Token = "0x400048C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x400048D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchMsg;
	}
	[Token(Token = "0x20000D6")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48B0C", Offset = "0xB48B0C")]
	public struct HTML_ShowToolTip_t
	{
		[Token(Token = "0x400048E")]
		public const int k_iCallback = 4524;

		[Token(Token = "0x400048F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x4000490")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchMsg;
	}
	[Token(Token = "0x20000D7")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48B20", Offset = "0xB48B20")]
	public struct HTML_UpdateToolTip_t
	{
		[Token(Token = "0x4000491")]
		public const int k_iCallback = 4525;

		[Token(Token = "0x4000492")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x4000493")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchMsg;
	}
	[Token(Token = "0x20000D8")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48B34", Offset = "0xB48B34")]
	public struct HTML_HideToolTip_t
	{
		[Token(Token = "0x4000494")]
		public const int k_iCallback = 4526;

		[Token(Token = "0x4000495")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;
	}
	[Token(Token = "0x20000D9")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48B48", Offset = "0xB48B48")]
	public struct HTTPRequestCompleted_t
	{
		[Token(Token = "0x4000496")]
		public const int k_iCallback = 2101;

		[Token(Token = "0x4000497")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HTTPRequestHandle m_hRequest;

		[Token(Token = "0x4000498")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_ulContextValue;

		[Token(Token = "0x4000499")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool m_bRequestSuccessful;

		[Token(Token = "0x400049A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public EHTTPStatusCode m_eStatusCode;

		[Token(Token = "0x400049B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint m_unBodySize;
	}
	[Token(Token = "0x20000DA")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48B5C", Offset = "0xB48B5C")]
	public struct HTTPRequestHeadersReceived_t
	{
		[Token(Token = "0x400049C")]
		public const int k_iCallback = 2102;

		[Token(Token = "0x400049D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HTTPRequestHandle m_hRequest;

		[Token(Token = "0x400049E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_ulContextValue;
	}
	[Token(Token = "0x20000DB")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48B70", Offset = "0xB48B70")]
	public struct HTTPRequestDataReceived_t
	{
		[Token(Token = "0x400049F")]
		public const int k_iCallback = 2103;

		[Token(Token = "0x40004A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HTTPRequestHandle m_hRequest;

		[Token(Token = "0x40004A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_ulContextValue;

		[Token(Token = "0x40004A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint m_cOffset;

		[Token(Token = "0x40004A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint m_cBytesReceived;
	}
	[Token(Token = "0x20000DC")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48B84", Offset = "0xB48B84")]
	public struct SteamInventoryResultReady_t
	{
		[Token(Token = "0x40004A4")]
		public const int k_iCallback = 4700;

		[Token(Token = "0x40004A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SteamInventoryResult_t m_handle;

		[Token(Token = "0x40004A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public EResult m_result;
	}
	[Token(Token = "0x20000DD")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48B98", Offset = "0xB48B98")]
	public struct SteamInventoryFullUpdate_t
	{
		[Token(Token = "0x40004A7")]
		public const int k_iCallback = 4701;

		[Token(Token = "0x40004A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SteamInventoryResult_t m_handle;
	}
	[Token(Token = "0x20000DE")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48BAC", Offset = "0xB48BAC")]
	public struct SteamInventoryDefinitionUpdate_t
	{
		[Token(Token = "0x40004A9")]
		public const int k_iCallback = 4702;
	}
	[Token(Token = "0x20000DF")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48BC0", Offset = "0xB48BC0")]
	public struct FavoritesListChanged_t
	{
		[Token(Token = "0x40004AA")]
		public const int k_iCallback = 502;

		[Token(Token = "0x40004AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_nIP;

		[Token(Token = "0x40004AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint m_nQueryPort;

		[Token(Token = "0x40004AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint m_nConnPort;

		[Token(Token = "0x40004AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_nAppID;

		[Token(Token = "0x40004AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint m_nFlags;

		[Token(Token = "0x40004B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool m_bAdd;

		[Token(Token = "0x40004B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AccountID_t m_unAccountId;
	}
	[Token(Token = "0x20000E0")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48BD4", Offset = "0xB48BD4")]
	public struct LobbyInvite_t
	{
		[Token(Token = "0x40004B2")]
		public const int k_iCallback = 503;

		[Token(Token = "0x40004B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ulSteamIDUser;

		[Token(Token = "0x40004B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_ulSteamIDLobby;

		[Token(Token = "0x40004B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ulong m_ulGameID;
	}
	[Token(Token = "0x20000E1")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48BE8", Offset = "0xB48BE8")]
	public struct LobbyEnter_t
	{
		[Token(Token = "0x40004B6")]
		public const int k_iCallback = 504;

		[Token(Token = "0x40004B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ulSteamIDLobby;

		[Token(Token = "0x40004B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint m_rgfChatPermissions;

		[Token(Token = "0x40004B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool m_bLocked;

		[Token(Token = "0x40004BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint m_EChatRoomEnterResponse;
	}
	[Token(Token = "0x20000E2")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48BFC", Offset = "0xB48BFC")]
	public struct LobbyDataUpdate_t
	{
		[Token(Token = "0x40004BB")]
		public const int k_iCallback = 505;

		[Token(Token = "0x40004BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ulSteamIDLobby;

		[Token(Token = "0x40004BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_ulSteamIDMember;

		[Token(Token = "0x40004BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public byte m_bSuccess;
	}
	[Token(Token = "0x20000E3")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48C10", Offset = "0xB48C10")]
	public struct LobbyChatUpdate_t
	{
		[Token(Token = "0x40004BF")]
		public const int k_iCallback = 506;

		[Token(Token = "0x40004C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ulSteamIDLobby;

		[Token(Token = "0x40004C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_ulSteamIDUserChanged;

		[Token(Token = "0x40004C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ulong m_ulSteamIDMakingChange;

		[Token(Token = "0x40004C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint m_rgfChatMemberStateChange;
	}
	[Token(Token = "0x20000E4")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48C24", Offset = "0xB48C24")]
	public struct LobbyChatMsg_t
	{
		[Token(Token = "0x40004C4")]
		public const int k_iCallback = 507;

		[Token(Token = "0x40004C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ulSteamIDLobby;

		[Token(Token = "0x40004C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_ulSteamIDUser;

		[Token(Token = "0x40004C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public byte m_eChatEntryType;

		[Token(Token = "0x40004C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint m_iChatID;
	}
	[Token(Token = "0x20000E5")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48C38", Offset = "0xB48C38")]
	public struct LobbyGameCreated_t
	{
		[Token(Token = "0x40004C9")]
		public const int k_iCallback = 509;

		[Token(Token = "0x40004CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ulSteamIDLobby;

		[Token(Token = "0x40004CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_ulSteamIDGameServer;

		[Token(Token = "0x40004CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint m_unIP;

		[Token(Token = "0x40004CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public ushort m_usPort;
	}
	[Token(Token = "0x20000E6")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48C4C", Offset = "0xB48C4C")]
	public struct LobbyMatchList_t
	{
		[Token(Token = "0x40004CE")]
		public const int k_iCallback = 510;

		[Token(Token = "0x40004CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_nLobbiesMatching;
	}
	[Token(Token = "0x20000E7")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48C60", Offset = "0xB48C60")]
	public struct LobbyKicked_t
	{
		[Token(Token = "0x40004D0")]
		public const int k_iCallback = 512;

		[Token(Token = "0x40004D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ulSteamIDLobby;

		[Token(Token = "0x40004D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_ulSteamIDAdmin;

		[Token(Token = "0x40004D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public byte m_bKickedDueToDisconnect;
	}
	[Token(Token = "0x20000E8")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48C74", Offset = "0xB48C74")]
	public struct LobbyCreated_t
	{
		[Token(Token = "0x40004D4")]
		public const int k_iCallback = 513;

		[Token(Token = "0x40004D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x40004D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_ulSteamIDLobby;
	}
	[Token(Token = "0x20000E9")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48C88", Offset = "0xB48C88")]
	public struct FavoritesListAccountsUpdated_t
	{
		[Token(Token = "0x40004D7")]
		public const int k_iCallback = 516;

		[Token(Token = "0x40004D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;
	}
	[Token(Token = "0x20000EA")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48C9C", Offset = "0xB48C9C")]
	public struct PlaybackStatusHasChanged_t
	{
		[Token(Token = "0x40004D9")]
		public const int k_iCallback = 4001;
	}
	[Token(Token = "0x20000EB")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48CB0", Offset = "0xB48CB0")]
	public struct VolumeHasChanged_t
	{
		[Token(Token = "0x40004DA")]
		public const int k_iCallback = 4002;

		[Token(Token = "0x40004DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float m_flNewVolume;
	}
	[Token(Token = "0x20000EC")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48CC4", Offset = "0xB48CC4")]
	public struct MusicPlayerRemoteWillActivate_t
	{
		[Token(Token = "0x40004DC")]
		public const int k_iCallback = 4101;
	}
	[Token(Token = "0x20000ED")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48CD8", Offset = "0xB48CD8")]
	public struct MusicPlayerRemoteWillDeactivate_t
	{
		[Token(Token = "0x40004DD")]
		public const int k_iCallback = 4102;
	}
	[Token(Token = "0x20000EE")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48CEC", Offset = "0xB48CEC")]
	public struct MusicPlayerRemoteToFront_t
	{
		[Token(Token = "0x40004DE")]
		public const int k_iCallback = 4103;
	}
	[Token(Token = "0x20000EF")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48D00", Offset = "0xB48D00")]
	public struct MusicPlayerWillQuit_t
	{
		[Token(Token = "0x40004DF")]
		public const int k_iCallback = 4104;
	}
	[Token(Token = "0x20000F0")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48D14", Offset = "0xB48D14")]
	public struct MusicPlayerWantsPlay_t
	{
		[Token(Token = "0x40004E0")]
		public const int k_iCallback = 4105;
	}
	[Token(Token = "0x20000F1")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48D28", Offset = "0xB48D28")]
	public struct MusicPlayerWantsPause_t
	{
		[Token(Token = "0x40004E1")]
		public const int k_iCallback = 4106;
	}
	[Token(Token = "0x20000F2")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48D3C", Offset = "0xB48D3C")]
	public struct MusicPlayerWantsPlayPrevious_t
	{
		[Token(Token = "0x40004E2")]
		public const int k_iCallback = 4107;
	}
	[Token(Token = "0x20000F3")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48D50", Offset = "0xB48D50")]
	public struct MusicPlayerWantsPlayNext_t
	{
		[Token(Token = "0x40004E3")]
		public const int k_iCallback = 4108;
	}
	[Token(Token = "0x20000F4")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48D64", Offset = "0xB48D64")]
	public struct MusicPlayerWantsShuffled_t
	{
		[Token(Token = "0x40004E4")]
		public const int k_iCallback = 4109;

		[Token(Token = "0x40004E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool m_bShuffled;
	}
	[Token(Token = "0x20000F5")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48D78", Offset = "0xB48D78")]
	public struct MusicPlayerWantsLooped_t
	{
		[Token(Token = "0x40004E6")]
		public const int k_iCallback = 4110;

		[Token(Token = "0x40004E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool m_bLooped;
	}
	[Token(Token = "0x20000F6")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48D8C", Offset = "0xB48D8C")]
	public struct MusicPlayerWantsVolume_t
	{
		[Token(Token = "0x40004E8")]
		public const int k_iCallback = 4011;

		[Token(Token = "0x40004E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float m_flNewVolume;
	}
	[Token(Token = "0x20000F7")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48DA0", Offset = "0xB48DA0")]
	public struct MusicPlayerSelectsQueueEntry_t
	{
		[Token(Token = "0x40004EA")]
		public const int k_iCallback = 4012;

		[Token(Token = "0x40004EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int nID;
	}
	[Token(Token = "0x20000F8")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48DB4", Offset = "0xB48DB4")]
	public struct MusicPlayerSelectsPlaylistEntry_t
	{
		[Token(Token = "0x40004EC")]
		public const int k_iCallback = 4013;

		[Token(Token = "0x40004ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int nID;
	}
	[Token(Token = "0x20000F9")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48DC8", Offset = "0xB48DC8")]
	public struct MusicPlayerWantsPlayingRepeatStatus_t
	{
		[Token(Token = "0x40004EE")]
		public const int k_iCallback = 4114;

		[Token(Token = "0x40004EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int m_nPlayingRepeatStatus;
	}
	[Token(Token = "0x20000FA")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48DDC", Offset = "0xB48DDC")]
	public struct P2PSessionRequest_t
	{
		[Token(Token = "0x40004F0")]
		public const int k_iCallback = 1202;

		[Token(Token = "0x40004F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDRemote;
	}
	[Token(Token = "0x20000FB")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48DF0", Offset = "0xB48DF0")]
	public struct P2PSessionConnectFail_t
	{
		[Token(Token = "0x40004F2")]
		public const int k_iCallback = 1203;

		[Token(Token = "0x40004F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDRemote;

		[Token(Token = "0x40004F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public byte m_eP2PSessionError;
	}
	[Token(Token = "0x20000FC")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48E04", Offset = "0xB48E04")]
	public struct SocketStatusCallback_t
	{
		[Token(Token = "0x40004F5")]
		public const int k_iCallback = 1201;

		[Token(Token = "0x40004F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SNetSocket_t m_hSocket;

		[Token(Token = "0x40004F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public SNetListenSocket_t m_hListenSocket;

		[Token(Token = "0x40004F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public CSteamID m_steamIDRemote;

		[Token(Token = "0x40004F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_eSNetSocketState;
	}
	[Token(Token = "0x20000FD")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48E18", Offset = "0xB48E18")]
	public struct RemoteStorageAppSyncedClient_t
	{
		[Token(Token = "0x40004FA")]
		public const int k_iCallback = 1301;

		[Token(Token = "0x40004FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AppId_t m_nAppID;

		[Token(Token = "0x40004FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public EResult m_eResult;

		[Token(Token = "0x40004FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_unNumDownloads;
	}
	[Token(Token = "0x20000FE")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48E2C", Offset = "0xB48E2C")]
	public struct RemoteStorageAppSyncedServer_t
	{
		[Token(Token = "0x40004FE")]
		public const int k_iCallback = 1302;

		[Token(Token = "0x40004FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AppId_t m_nAppID;

		[Token(Token = "0x4000500")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public EResult m_eResult;

		[Token(Token = "0x4000501")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_unNumUploads;
	}
	[Token(Token = "0x20000FF")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48E40", Offset = "0xB48E40")]
	public struct RemoteStorageAppSyncProgress_t
	{
		[Token(Token = "0x4000502")]
		public const int k_iCallback = 1303;

		[Token(Token = "0x4000503")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string m_rgchCurrentFile;

		[Token(Token = "0x4000504")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AppId_t m_nAppID;

		[Token(Token = "0x4000505")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_uBytesTransferredThisChunk;

		[Token(Token = "0x4000506")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public double m_dAppPercentComplete;

		[Token(Token = "0x4000507")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool m_bUploading;
	}
	[Token(Token = "0x2000100")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48E54", Offset = "0xB48E54")]
	public struct RemoteStorageAppSyncStatusCheck_t
	{
		[Token(Token = "0x4000508")]
		public const int k_iCallback = 1305;

		[Token(Token = "0x4000509")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AppId_t m_nAppID;

		[Token(Token = "0x400050A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public EResult m_eResult;
	}
	[Token(Token = "0x2000101")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48E68", Offset = "0xB48E68")]
	public struct RemoteStorageConflictResolution_t
	{
		[Token(Token = "0x400050B")]
		public const int k_iCallback = 1306;

		[Token(Token = "0x400050C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AppId_t m_nAppID;

		[Token(Token = "0x400050D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public EResult m_eResult;
	}
	[Token(Token = "0x2000102")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48E7C", Offset = "0xB48E7C")]
	public struct RemoteStorageFileShareResult_t
	{
		[Token(Token = "0x400050E")]
		public const int k_iCallback = 1307;

		[Token(Token = "0x400050F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000510")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public UGCHandle_t m_hFile;

		[Token(Token = "0x4000511")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string m_rgchFilename;
	}
	[Token(Token = "0x2000103")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48E90", Offset = "0xB48E90")]
	public struct RemoteStoragePublishFileResult_t
	{
		[Token(Token = "0x4000512")]
		public const int k_iCallback = 1309;

		[Token(Token = "0x4000513")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000514")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x4000515")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool m_bUserNeedsToAcceptWorkshopLegalAgreement;
	}
	[Token(Token = "0x2000104")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48EA4", Offset = "0xB48EA4")]
	public struct RemoteStorageDeletePublishedFileResult_t
	{
		[Token(Token = "0x4000516")]
		public const int k_iCallback = 1311;

		[Token(Token = "0x4000517")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000518")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PublishedFileId_t m_nPublishedFileId;
	}
	[Token(Token = "0x2000105")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48EB8", Offset = "0xB48EB8")]
	public struct RemoteStorageEnumerateUserPublishedFilesResult_t
	{
		[Token(Token = "0x4000519")]
		public const int k_iCallback = 1312;

		[Token(Token = "0x400051A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x400051B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int m_nResultsReturned;

		[Token(Token = "0x400051C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_nTotalResultCount;

		[Token(Token = "0x400051D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PublishedFileId_t[] m_rgPublishedFileId;
	}
	[Token(Token = "0x2000106")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48ECC", Offset = "0xB48ECC")]
	public struct RemoteStorageSubscribePublishedFileResult_t
	{
		[Token(Token = "0x400051E")]
		public const int k_iCallback = 1313;

		[Token(Token = "0x400051F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000520")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PublishedFileId_t m_nPublishedFileId;
	}
	[Token(Token = "0x2000107")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48EE0", Offset = "0xB48EE0")]
	public struct RemoteStorageEnumerateUserSubscribedFilesResult_t
	{
		[Token(Token = "0x4000521")]
		public const int k_iCallback = 1314;

		[Token(Token = "0x4000522")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000523")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int m_nResultsReturned;

		[Token(Token = "0x4000524")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_nTotalResultCount;

		[Token(Token = "0x4000525")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PublishedFileId_t[] m_rgPublishedFileId;

		[Token(Token = "0x4000526")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint[] m_rgRTimeSubscribed;
	}
	[Token(Token = "0x2000108")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48EF4", Offset = "0xB48EF4")]
	public struct RemoteStorageUnsubscribePublishedFileResult_t
	{
		[Token(Token = "0x4000527")]
		public const int k_iCallback = 1315;

		[Token(Token = "0x4000528")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000529")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PublishedFileId_t m_nPublishedFileId;
	}
	[Token(Token = "0x2000109")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48F08", Offset = "0xB48F08")]
	public struct RemoteStorageUpdatePublishedFileResult_t
	{
		[Token(Token = "0x400052A")]
		public const int k_iCallback = 1316;

		[Token(Token = "0x400052B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x400052C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x400052D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool m_bUserNeedsToAcceptWorkshopLegalAgreement;
	}
	[Token(Token = "0x200010A")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48F1C", Offset = "0xB48F1C")]
	public struct RemoteStorageDownloadUGCResult_t
	{
		[Token(Token = "0x400052E")]
		public const int k_iCallback = 1317;

		[Token(Token = "0x400052F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000530")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public UGCHandle_t m_hFile;

		[Token(Token = "0x4000531")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AppId_t m_nAppID;

		[Token(Token = "0x4000532")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int m_nSizeInBytes;

		[Token(Token = "0x4000533")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string m_pchFileName;

		[Token(Token = "0x4000534")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ulong m_ulSteamIDOwner;
	}
	[Token(Token = "0x200010B")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48F30", Offset = "0xB48F30")]
	public struct RemoteStorageGetPublishedFileDetailsResult_t
	{
		[Token(Token = "0x4000535")]
		public const int k_iCallback = 1318;

		[Token(Token = "0x4000536")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000537")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x4000538")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AppId_t m_nCreatorAppID;

		[Token(Token = "0x4000539")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public AppId_t m_nConsumerAppID;

		[Token(Token = "0x400053A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string m_rgchTitle;

		[Token(Token = "0x400053B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string m_rgchDescription;

		[Token(Token = "0x400053C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UGCHandle_t m_hFile;

		[Token(Token = "0x400053D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UGCHandle_t m_hPreviewFile;

		[Token(Token = "0x400053E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public ulong m_ulSteamIDOwner;

		[Token(Token = "0x400053F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public uint m_rtimeCreated;

		[Token(Token = "0x4000540")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public uint m_rtimeUpdated;

		[Token(Token = "0x4000541")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public ERemoteStoragePublishedFileVisibility m_eVisibility;

		[Token(Token = "0x4000542")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool m_bBanned;

		[Token(Token = "0x4000543")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public string m_rgchTags;

		[Token(Token = "0x4000544")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool m_bTagsTruncated;

		[Token(Token = "0x4000545")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public string m_pchFileName;

		[Token(Token = "0x4000546")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public int m_nFileSize;

		[Token(Token = "0x4000547")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public int m_nPreviewFileSize;

		[Token(Token = "0x4000548")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public string m_rgchURL;

		[Token(Token = "0x4000549")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public EWorkshopFileType m_eFileType;

		[Token(Token = "0x400054A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public bool m_bAcceptedForUse;
	}
	[Token(Token = "0x200010C")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48F44", Offset = "0xB48F44")]
	public struct RemoteStorageEnumerateWorkshopFilesResult_t
	{
		[Token(Token = "0x400054B")]
		public const int k_iCallback = 1319;

		[Token(Token = "0x400054C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x400054D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int m_nResultsReturned;

		[Token(Token = "0x400054E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_nTotalResultCount;

		[Token(Token = "0x400054F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PublishedFileId_t[] m_rgPublishedFileId;

		[Token(Token = "0x4000550")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float[] m_rgScore;

		[Token(Token = "0x4000551")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AppId_t m_nAppId;

		[Token(Token = "0x4000552")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public uint m_unStartIndex;
	}
	[Token(Token = "0x200010D")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48F58", Offset = "0xB48F58")]
	public struct RemoteStorageGetPublishedItemVoteDetailsResult_t
	{
		[Token(Token = "0x4000553")]
		public const int k_iCallback = 1320;

		[Token(Token = "0x4000554")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000555")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PublishedFileId_t m_unPublishedFileId;

		[Token(Token = "0x4000556")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_nVotesFor;

		[Token(Token = "0x4000557")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int m_nVotesAgainst;

		[Token(Token = "0x4000558")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int m_nReports;

		[Token(Token = "0x4000559")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float m_fScore;
	}
	[Token(Token = "0x200010E")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48F6C", Offset = "0xB48F6C")]
	public struct RemoteStoragePublishedFileSubscribed_t
	{
		[Token(Token = "0x400055A")]
		public const int k_iCallback = 1321;

		[Token(Token = "0x400055B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x400055C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AppId_t m_nAppID;
	}
	[Token(Token = "0x200010F")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48F80", Offset = "0xB48F80")]
	public struct RemoteStoragePublishedFileUnsubscribed_t
	{
		[Token(Token = "0x400055D")]
		public const int k_iCallback = 1322;

		[Token(Token = "0x400055E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x400055F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AppId_t m_nAppID;
	}
	[Token(Token = "0x2000110")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48F94", Offset = "0xB48F94")]
	public struct RemoteStoragePublishedFileDeleted_t
	{
		[Token(Token = "0x4000560")]
		public const int k_iCallback = 1323;

		[Token(Token = "0x4000561")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x4000562")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AppId_t m_nAppID;
	}
	[Token(Token = "0x2000111")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48FA8", Offset = "0xB48FA8")]
	public struct RemoteStorageUpdateUserPublishedItemVoteResult_t
	{
		[Token(Token = "0x4000563")]
		public const int k_iCallback = 1324;

		[Token(Token = "0x4000564")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000565")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PublishedFileId_t m_nPublishedFileId;
	}
	[Token(Token = "0x2000112")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48FBC", Offset = "0xB48FBC")]
	public struct RemoteStorageUserVoteDetails_t
	{
		[Token(Token = "0x4000566")]
		public const int k_iCallback = 1325;

		[Token(Token = "0x4000567")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000568")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x4000569")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public EWorkshopVote m_eVote;
	}
	[Token(Token = "0x2000113")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48FD0", Offset = "0xB48FD0")]
	public struct RemoteStorageEnumerateUserSharedWorkshopFilesResult_t
	{
		[Token(Token = "0x400056A")]
		public const int k_iCallback = 1326;

		[Token(Token = "0x400056B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x400056C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int m_nResultsReturned;

		[Token(Token = "0x400056D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_nTotalResultCount;

		[Token(Token = "0x400056E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PublishedFileId_t[] m_rgPublishedFileId;
	}
	[Token(Token = "0x2000114")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48FE4", Offset = "0xB48FE4")]
	public struct RemoteStorageSetUserPublishedFileActionResult_t
	{
		[Token(Token = "0x400056F")]
		public const int k_iCallback = 1327;

		[Token(Token = "0x4000570")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000571")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x4000572")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public EWorkshopFileAction m_eAction;
	}
	[Token(Token = "0x2000115")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB48FF8", Offset = "0xB48FF8")]
	public struct RemoteStorageEnumeratePublishedFilesByUserActionResult_t
	{
		[Token(Token = "0x4000573")]
		public const int k_iCallback = 1328;

		[Token(Token = "0x4000574")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000575")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public EWorkshopFileAction m_eAction;

		[Token(Token = "0x4000576")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_nResultsReturned;

		[Token(Token = "0x4000577")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int m_nTotalResultCount;

		[Token(Token = "0x4000578")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PublishedFileId_t[] m_rgPublishedFileId;

		[Token(Token = "0x4000579")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint[] m_rgRTimeUpdated;
	}
	[Token(Token = "0x2000116")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB4900C", Offset = "0xB4900C")]
	public struct RemoteStoragePublishFileProgress_t
	{
		[Token(Token = "0x400057A")]
		public const int k_iCallback = 1329;

		[Token(Token = "0x400057B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public double m_dPercentFile;

		[Token(Token = "0x400057C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool m_bPreview;
	}
	[Token(Token = "0x2000117")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB49020", Offset = "0xB49020")]
	public struct RemoteStoragePublishedFileUpdated_t
	{
		[Token(Token = "0x400057D")]
		public const int k_iCallback = 1330;

		[Token(Token = "0x400057E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x400057F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AppId_t m_nAppID;

		[Token(Token = "0x4000580")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public UGCHandle_t m_hFile;
	}
	[Token(Token = "0x2000118")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB49034", Offset = "0xB49034")]
	public struct ScreenshotReady_t
	{
		[Token(Token = "0x4000581")]
		public const int k_iCallback = 2301;

		[Token(Token = "0x4000582")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ScreenshotHandle m_hLocal;

		[Token(Token = "0x4000583")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public EResult m_eResult;
	}
	[Token(Token = "0x2000119")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB49048", Offset = "0xB49048")]
	public struct ScreenshotRequested_t
	{
		[Token(Token = "0x4000584")]
		public const int k_iCallback = 2302;
	}
	[Token(Token = "0x200011A")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB4905C", Offset = "0xB4905C")]
	public struct SteamUGCQueryCompleted_t
	{
		[Token(Token = "0x4000585")]
		public const int k_iCallback = 3401;

		[Token(Token = "0x4000586")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public UGCQueryHandle_t m_handle;

		[Token(Token = "0x4000587")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EResult m_eResult;

		[Token(Token = "0x4000588")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_unNumResultsReturned;

		[Token(Token = "0x4000589")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint m_unTotalMatchingResults;

		[Token(Token = "0x400058A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool m_bCachedData;
	}
	[Token(Token = "0x200011B")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB49070", Offset = "0xB49070")]
	public struct SteamUGCRequestUGCDetailsResult_t
	{
		[Token(Token = "0x400058B")]
		public const int k_iCallback = 3402;

		[Token(Token = "0x400058C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SteamUGCDetails_t m_details;

		[Token(Token = "0x400058D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public bool m_bCachedData;
	}
	[Token(Token = "0x200011C")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB49084", Offset = "0xB49084")]
	public struct CreateItemResult_t
	{
		[Token(Token = "0x400058E")]
		public const int k_iCallback = 3403;

		[Token(Token = "0x400058F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000590")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x4000591")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool m_bUserNeedsToAcceptWorkshopLegalAgreement;
	}
	[Token(Token = "0x200011D")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB49098", Offset = "0xB49098")]
	public struct SubmitItemUpdateResult_t
	{
		[Token(Token = "0x4000592")]
		public const int k_iCallback = 3404;

		[Token(Token = "0x4000593")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000594")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public bool m_bUserNeedsToAcceptWorkshopLegalAgreement;
	}
	[Token(Token = "0x200011E")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB490AC", Offset = "0xB490AC")]
	public struct ItemInstalled_t
	{
		[Token(Token = "0x4000595")]
		public const int k_iCallback = 3405;

		[Token(Token = "0x4000596")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AppId_t m_unAppID;

		[Token(Token = "0x4000597")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PublishedFileId_t m_nPublishedFileId;
	}
	[Token(Token = "0x200011F")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB490C0", Offset = "0xB490C0")]
	public struct DownloadItemResult_t
	{
		[Token(Token = "0x4000598")]
		public const int k_iCallback = 3406;

		[Token(Token = "0x4000599")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AppId_t m_unAppID;

		[Token(Token = "0x400059A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x400059B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public EResult m_eResult;
	}
	[Token(Token = "0x2000120")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB490D4", Offset = "0xB490D4")]
	public struct UserFavoriteItemsListChanged_t
	{
		[Token(Token = "0x400059C")]
		public const int k_iCallback = 3407;

		[Token(Token = "0x400059D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x400059E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EResult m_eResult;

		[Token(Token = "0x400059F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool m_bWasAddRequest;
	}
	[Token(Token = "0x2000121")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB490E8", Offset = "0xB490E8")]
	public struct SetUserItemVoteResult_t
	{
		[Token(Token = "0x40005A0")]
		public const int k_iCallback = 3408;

		[Token(Token = "0x40005A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x40005A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EResult m_eResult;

		[Token(Token = "0x40005A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool m_bVoteUp;
	}
	[Token(Token = "0x2000122")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB490FC", Offset = "0xB490FC")]
	public struct GetUserItemVoteResult_t
	{
		[Token(Token = "0x40005A4")]
		public const int k_iCallback = 3409;

		[Token(Token = "0x40005A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x40005A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EResult m_eResult;

		[Token(Token = "0x40005A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool m_bVotedUp;

		[Token(Token = "0x40005A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
		public bool m_bVotedDown;

		[Token(Token = "0x40005A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE")]
		public bool m_bVoteSkipped;
	}
	[Token(Token = "0x2000123")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB49110", Offset = "0xB49110")]
	public struct SteamUnifiedMessagesSendMethodResult_t
	{
		[Token(Token = "0x40005AA")]
		public const int k_iCallback = 2501;

		[Token(Token = "0x40005AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ClientUnifiedMessageHandle m_hHandle;

		[Token(Token = "0x40005AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_unContext;

		[Token(Token = "0x40005AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public EResult m_eResult;

		[Token(Token = "0x40005AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint m_unResponseSize;
	}
	[Token(Token = "0x2000124")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB49124", Offset = "0xB49124")]
	public struct SteamServersConnected_t
	{
		[Token(Token = "0x40005AF")]
		public const int k_iCallback = 101;
	}
	[Token(Token = "0x2000125")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB49138", Offset = "0xB49138")]
	public struct SteamServerConnectFailure_t
	{
		[Token(Token = "0x40005B0")]
		public const int k_iCallback = 102;

		[Token(Token = "0x40005B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;
	}
	[Token(Token = "0x2000126")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB4914C", Offset = "0xB4914C")]
	public struct SteamServersDisconnected_t
	{
		[Token(Token = "0x40005B2")]
		public const int k_iCallback = 103;

		[Token(Token = "0x40005B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;
	}
	[Token(Token = "0x2000127")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB49160", Offset = "0xB49160")]
	public struct ClientGameServerDeny_t
	{
		[Token(Token = "0x40005B4")]
		public const int k_iCallback = 113;

		[Token(Token = "0x40005B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_uAppID;

		[Token(Token = "0x40005B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint m_unGameServerIP;

		[Token(Token = "0x40005B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ushort m_usGameServerPort;

		[Token(Token = "0x40005B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA")]
		public ushort m_bSecure;

		[Token(Token = "0x40005B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_uReason;
	}
	[Token(Token = "0x2000128")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB49174", Offset = "0xB49174")]
	public struct IPCFailure_t
	{
		[Token(Token = "0x40005BA")]
		public const int k_iCallback = 117;

		[Token(Token = "0x40005BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte m_eFailureType;
	}
	[Token(Token = "0x2000129")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB49188", Offset = "0xB49188")]
	public struct LicensesUpdated_t
	{
		[Token(Token = "0x40005BC")]
		public const int k_iCallback = 125;
	}
	[Token(Token = "0x200012A")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB4919C", Offset = "0xB4919C")]
	public struct ValidateAuthTicketResponse_t
	{
		[Token(Token = "0x40005BD")]
		public const int k_iCallback = 143;

		[Token(Token = "0x40005BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_SteamID;

		[Token(Token = "0x40005BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EAuthSessionResponse m_eAuthSessionResponse;

		[Token(Token = "0x40005C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public CSteamID m_OwnerSteamID;
	}
	[Token(Token = "0x200012B")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB491B0", Offset = "0xB491B0")]
	public struct MicroTxnAuthorizationResponse_t
	{
		[Token(Token = "0x40005C1")]
		public const int k_iCallback = 152;

		[Token(Token = "0x40005C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_unAppID;

		[Token(Token = "0x40005C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_ulOrderID;

		[Token(Token = "0x40005C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public byte m_bAuthorized;
	}
	[Token(Token = "0x200012C")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB491C4", Offset = "0xB491C4")]
	public struct EncryptedAppTicketResponse_t
	{
		[Token(Token = "0x40005C5")]
		public const int k_iCallback = 154;

		[Token(Token = "0x40005C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;
	}
	[Token(Token = "0x200012D")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB491D8", Offset = "0xB491D8")]
	public struct GetAuthSessionTicketResponse_t
	{
		[Token(Token = "0x40005C7")]
		public const int k_iCallback = 163;

		[Token(Token = "0x40005C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HAuthTicket m_hAuthTicket;

		[Token(Token = "0x40005C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public EResult m_eResult;
	}
	[Token(Token = "0x200012E")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB491EC", Offset = "0xB491EC")]
	public struct GameWebCallback_t
	{
		[Token(Token = "0x40005CA")]
		public const int k_iCallback = 164;

		[Token(Token = "0x40005CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string m_szURL;
	}
	[Token(Token = "0x200012F")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB49200", Offset = "0xB49200")]
	public struct StoreAuthURLResponse_t
	{
		[Token(Token = "0x40005CC")]
		public const int k_iCallback = 165;

		[Token(Token = "0x40005CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string m_szURL;
	}
	[StructLayout(2)]
	[Token(Token = "0x2000130")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB49214", Offset = "0xB49214")]
	public struct UserStatsReceived_t
	{
		[Token(Token = "0x40005CE")]
		public const int k_iCallback = 1101;

		[Token(Token = "0x40005CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_nGameID;

		[Token(Token = "0x40005D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EResult m_eResult;

		[Token(Token = "0x40005D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public CSteamID m_steamIDUser;
	}
	[Token(Token = "0x2000131")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB49228", Offset = "0xB49228")]
	public struct UserStatsStored_t
	{
		[Token(Token = "0x40005D2")]
		public const int k_iCallback = 1102;

		[Token(Token = "0x40005D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_nGameID;

		[Token(Token = "0x40005D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EResult m_eResult;
	}
	[Token(Token = "0x2000132")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB4923C", Offset = "0xB4923C")]
	public struct UserAchievementStored_t
	{
		[Token(Token = "0x40005D5")]
		public const int k_iCallback = 1103;

		[Token(Token = "0x40005D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_nGameID;

		[Token(Token = "0x40005D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool m_bGroupAchievement;

		[Token(Token = "0x40005D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string m_rgchAchievementName;

		[Token(Token = "0x40005D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint m_nCurProgress;

		[Token(Token = "0x40005DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public uint m_nMaxProgress;
	}
	[Token(Token = "0x2000133")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB49250", Offset = "0xB49250")]
	public struct LeaderboardFindResult_t
	{
		[Token(Token = "0x40005DB")]
		public const int k_iCallback = 1104;

		[Token(Token = "0x40005DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SteamLeaderboard_t m_hSteamLeaderboard;

		[Token(Token = "0x40005DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public byte m_bLeaderboardFound;
	}
	[Token(Token = "0x2000134")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB49264", Offset = "0xB49264")]
	public struct LeaderboardScoresDownloaded_t
	{
		[Token(Token = "0x40005DE")]
		public const int k_iCallback = 1105;

		[Token(Token = "0x40005DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SteamLeaderboard_t m_hSteamLeaderboard;

		[Token(Token = "0x40005E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public SteamLeaderboardEntries_t m_hSteamLeaderboardEntries;

		[Token(Token = "0x40005E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_cEntryCount;
	}
	[Token(Token = "0x2000135")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB49278", Offset = "0xB49278")]
	public struct LeaderboardScoreUploaded_t
	{
		[Token(Token = "0x40005E2")]
		public const int k_iCallback = 1106;

		[Token(Token = "0x40005E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte m_bSuccess;

		[Token(Token = "0x40005E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public SteamLeaderboard_t m_hSteamLeaderboard;

		[Token(Token = "0x40005E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_nScore;

		[Token(Token = "0x40005E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public byte m_bScoreChanged;

		[Token(Token = "0x40005E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int m_nGlobalRankNew;

		[Token(Token = "0x40005E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int m_nGlobalRankPrevious;
	}
	[Token(Token = "0x2000136")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB4928C", Offset = "0xB4928C")]
	public struct NumberOfCurrentPlayers_t
	{
		[Token(Token = "0x40005E9")]
		public const int k_iCallback = 1107;

		[Token(Token = "0x40005EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte m_bSuccess;

		[Token(Token = "0x40005EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int m_cPlayers;
	}
	[Token(Token = "0x2000137")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB492A0", Offset = "0xB492A0")]
	public struct UserStatsUnloaded_t
	{
		[Token(Token = "0x40005EC")]
		public const int k_iCallback = 1108;

		[Token(Token = "0x40005ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDUser;
	}
	[Token(Token = "0x2000138")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB492B4", Offset = "0xB492B4")]
	public struct UserAchievementIconFetched_t
	{
		[Token(Token = "0x40005EE")]
		public const int k_iCallback = 1109;

		[Token(Token = "0x40005EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CGameID m_nGameID;

		[Token(Token = "0x40005F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string m_rgchAchievementName;

		[Token(Token = "0x40005F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool m_bAchieved;

		[Token(Token = "0x40005F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int m_nIconHandle;
	}
	[Token(Token = "0x2000139")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB492C8", Offset = "0xB492C8")]
	public struct GlobalAchievementPercentagesReady_t
	{
		[Token(Token = "0x40005F3")]
		public const int k_iCallback = 1110;

		[Token(Token = "0x40005F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_nGameID;

		[Token(Token = "0x40005F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EResult m_eResult;
	}
	[Token(Token = "0x200013A")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB492DC", Offset = "0xB492DC")]
	public struct LeaderboardUGCSet_t
	{
		[Token(Token = "0x40005F6")]
		public const int k_iCallback = 1111;

		[Token(Token = "0x40005F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x40005F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public SteamLeaderboard_t m_hSteamLeaderboard;
	}
	[Token(Token = "0x200013B")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB492F0", Offset = "0xB492F0")]
	public struct GlobalStatsReceived_t
	{
		[Token(Token = "0x40005F9")]
		public const int k_iCallback = 1112;

		[Token(Token = "0x40005FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_nGameID;

		[Token(Token = "0x40005FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EResult m_eResult;
	}
	[Token(Token = "0x200013C")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB49304", Offset = "0xB49304")]
	public struct IPCountry_t
	{
		[Token(Token = "0x40005FC")]
		public const int k_iCallback = 701;
	}
	[Token(Token = "0x200013D")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB49318", Offset = "0xB49318")]
	public struct LowBatteryPower_t
	{
		[Token(Token = "0x40005FD")]
		public const int k_iCallback = 702;

		[Token(Token = "0x40005FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte m_nMinutesBatteryLeft;
	}
	[Token(Token = "0x200013E")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB4932C", Offset = "0xB4932C")]
	public struct SteamAPICallCompleted_t
	{
		[Token(Token = "0x40005FF")]
		public const int k_iCallback = 703;

		[Token(Token = "0x4000600")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SteamAPICall_t m_hAsyncCall;
	}
	[Token(Token = "0x200013F")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB49340", Offset = "0xB49340")]
	public struct SteamShutdown_t
	{
		[Token(Token = "0x4000601")]
		public const int k_iCallback = 704;
	}
	[Token(Token = "0x2000140")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB49354", Offset = "0xB49354")]
	public struct CheckFileSignature_t
	{
		[Token(Token = "0x4000602")]
		public const int k_iCallback = 705;

		[Token(Token = "0x4000603")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ECheckFileSignature m_eCheckFileSignature;
	}
	[Token(Token = "0x2000141")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB49368", Offset = "0xB49368")]
	public struct GamepadTextInputDismissed_t
	{
		[Token(Token = "0x4000604")]
		public const int k_iCallback = 714;

		[Token(Token = "0x4000605")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool m_bSubmitted;

		[Token(Token = "0x4000606")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint m_unSubmittedText;
	}
	[Token(Token = "0x2000142")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB4937C", Offset = "0xB4937C")]
	public struct BroadcastUploadStart_t
	{
		[Token(Token = "0x4000607")]
		public const int k_iCallback = 4604;
	}
	[Token(Token = "0x2000143")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB49390", Offset = "0xB49390")]
	public struct BroadcastUploadStop_t
	{
		[Token(Token = "0x4000608")]
		public const int k_iCallback = 4605;

		[Token(Token = "0x4000609")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EBroadcastUploadResult m_eResult;
	}
	[Token(Token = "0x2000144")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB493A4", Offset = "0xB493A4")]
	public struct GetVideoURLResult_t
	{
		[Token(Token = "0x400060A")]
		public const int k_iCallback = 4611;

		[Token(Token = "0x400060B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x400060C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public AppId_t m_unVideoAppID;

		[Token(Token = "0x400060D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string m_rgchURL;
	}
	[Token(Token = "0x2000145")]
	public static class Constants
	{
		[Token(Token = "0x400060E")]
		public const string STEAMAPPLIST_INTERFACE_VERSION = "STEAMAPPLIST_INTERFACE_VERSION001";

		[Token(Token = "0x400060F")]
		public const string STEAMAPPS_INTERFACE_VERSION = "STEAMAPPS_INTERFACE_VERSION007";

		[Token(Token = "0x4000610")]
		public const string STEAMAPPTICKET_INTERFACE_VERSION = "STEAMAPPTICKET_INTERFACE_VERSION001";

		[Token(Token = "0x4000611")]
		public const string STEAMCLIENT_INTERFACE_VERSION = "SteamClient017";

		[Token(Token = "0x4000612")]
		public const string STEAMCONTROLLER_INTERFACE_VERSION = "STEAMCONTROLLER_INTERFACE_VERSION";

		[Token(Token = "0x4000613")]
		public const string STEAMFRIENDS_INTERFACE_VERSION = "SteamFriends015";

		[Token(Token = "0x4000614")]
		public const string STEAMGAMECOORDINATOR_INTERFACE_VERSION = "SteamGameCoordinator001";

		[Token(Token = "0x4000615")]
		public const string STEAMGAMESERVER_INTERFACE_VERSION = "SteamGameServer012";

		[Token(Token = "0x4000616")]
		public const string STEAMGAMESERVERSTATS_INTERFACE_VERSION = "SteamGameServerStats001";

		[Token(Token = "0x4000617")]
		public const string STEAMHTMLSURFACE_INTERFACE_VERSION = "STEAMHTMLSURFACE_INTERFACE_VERSION_003";

		[Token(Token = "0x4000618")]
		public const string STEAMHTTP_INTERFACE_VERSION = "STEAMHTTP_INTERFACE_VERSION002";

		[Token(Token = "0x4000619")]
		public const string STEAMINVENTORY_INTERFACE_VERSION = "STEAMINVENTORY_INTERFACE_V001";

		[Token(Token = "0x400061A")]
		public const string STEAMMATCHMAKING_INTERFACE_VERSION = "SteamMatchMaking009";

		[Token(Token = "0x400061B")]
		public const string STEAMMATCHMAKINGSERVERS_INTERFACE_VERSION = "SteamMatchMakingServers002";

		[Token(Token = "0x400061C")]
		public const string STEAMMUSIC_INTERFACE_VERSION = "STEAMMUSIC_INTERFACE_VERSION001";

		[Token(Token = "0x400061D")]
		public const string STEAMMUSICREMOTE_INTERFACE_VERSION = "STEAMMUSICREMOTE_INTERFACE_VERSION001";

		[Token(Token = "0x400061E")]
		public const string STEAMNETWORKING_INTERFACE_VERSION = "SteamNetworking005";

		[Token(Token = "0x400061F")]
		public const string STEAMREMOTESTORAGE_INTERFACE_VERSION = "STEAMREMOTESTORAGE_INTERFACE_VERSION012";

		[Token(Token = "0x4000620")]
		public const string STEAMSCREENSHOTS_INTERFACE_VERSION = "STEAMSCREENSHOTS_INTERFACE_VERSION002";

		[Token(Token = "0x4000621")]
		public const string STEAMUGC_INTERFACE_VERSION = "STEAMUGC_INTERFACE_VERSION007";

		[Token(Token = "0x4000622")]
		public const string STEAMUNIFIEDMESSAGES_INTERFACE_VERSION = "STEAMUNIFIEDMESSAGES_INTERFACE_VERSION001";

		[Token(Token = "0x4000623")]
		public const string STEAMUSER_INTERFACE_VERSION = "SteamUser018";

		[Token(Token = "0x4000624")]
		public const string STEAMUSERSTATS_INTERFACE_VERSION = "STEAMUSERSTATS_INTERFACE_VERSION011";

		[Token(Token = "0x4000625")]
		public const string STEAMUTILS_INTERFACE_VERSION = "SteamUtils007";

		[Token(Token = "0x4000626")]
		public const string STEAMVIDEO_INTERFACE_VERSION = "STEAMVIDEO_INTERFACE_V001";

		[Token(Token = "0x4000627")]
		public const int k_cubAppProofOfPurchaseKeyMax = 64;

		[Token(Token = "0x4000628")]
		public const int k_iSteamUserCallbacks = 100;

		[Token(Token = "0x4000629")]
		public const int k_iSteamGameServerCallbacks = 200;

		[Token(Token = "0x400062A")]
		public const int k_iSteamFriendsCallbacks = 300;

		[Token(Token = "0x400062B")]
		public const int k_iSteamBillingCallbacks = 400;

		[Token(Token = "0x400062C")]
		public const int k_iSteamMatchmakingCallbacks = 500;

		[Token(Token = "0x400062D")]
		public const int k_iSteamContentServerCallbacks = 600;

		[Token(Token = "0x400062E")]
		public const int k_iSteamUtilsCallbacks = 700;

		[Token(Token = "0x400062F")]
		public const int k_iClientFriendsCallbacks = 800;

		[Token(Token = "0x4000630")]
		public const int k_iClientUserCallbacks = 900;

		[Token(Token = "0x4000631")]
		public const int k_iSteamAppsCallbacks = 1000;

		[Token(Token = "0x4000632")]
		public const int k_iSteamUserStatsCallbacks = 1100;

		[Token(Token = "0x4000633")]
		public const int k_iSteamNetworkingCallbacks = 1200;

		[Token(Token = "0x4000634")]
		public const int k_iClientRemoteStorageCallbacks = 1300;

		[Token(Token = "0x4000635")]
		public const int k_iClientDepotBuilderCallbacks = 1400;

		[Token(Token = "0x4000636")]
		public const int k_iSteamGameServerItemsCallbacks = 1500;

		[Token(Token = "0x4000637")]
		public const int k_iClientUtilsCallbacks = 1600;

		[Token(Token = "0x4000638")]
		public const int k_iSteamGameCoordinatorCallbacks = 1700;

		[Token(Token = "0x4000639")]
		public const int k_iSteamGameServerStatsCallbacks = 1800;

		[Token(Token = "0x400063A")]
		public const int k_iSteam2AsyncCallbacks = 1900;

		[Token(Token = "0x400063B")]
		public const int k_iSteamGameStatsCallbacks = 2000;

		[Token(Token = "0x400063C")]
		public const int k_iClientHTTPCallbacks = 2100;

		[Token(Token = "0x400063D")]
		public const int k_iClientScreenshotsCallbacks = 2200;

		[Token(Token = "0x400063E")]
		public const int k_iSteamScreenshotsCallbacks = 2300;

		[Token(Token = "0x400063F")]
		public const int k_iClientAudioCallbacks = 2400;

		[Token(Token = "0x4000640")]
		public const int k_iClientUnifiedMessagesCallbacks = 2500;

		[Token(Token = "0x4000641")]
		public const int k_iSteamStreamLauncherCallbacks = 2600;

		[Token(Token = "0x4000642")]
		public const int k_iClientControllerCallbacks = 2700;

		[Token(Token = "0x4000643")]
		public const int k_iSteamControllerCallbacks = 2800;

		[Token(Token = "0x4000644")]
		public const int k_iClientParentalSettingsCallbacks = 2900;

		[Token(Token = "0x4000645")]
		public const int k_iClientDeviceAuthCallbacks = 3000;

		[Token(Token = "0x4000646")]
		public const int k_iClientNetworkDeviceManagerCallbacks = 3100;

		[Token(Token = "0x4000647")]
		public const int k_iClientMusicCallbacks = 3200;

		[Token(Token = "0x4000648")]
		public const int k_iClientRemoteClientManagerCallbacks = 3300;

		[Token(Token = "0x4000649")]
		public const int k_iClientUGCCallbacks = 3400;

		[Token(Token = "0x400064A")]
		public const int k_iSteamStreamClientCallbacks = 3500;

		[Token(Token = "0x400064B")]
		public const int k_IClientProductBuilderCallbacks = 3600;

		[Token(Token = "0x400064C")]
		public const int k_iClientShortcutsCallbacks = 3700;

		[Token(Token = "0x400064D")]
		public const int k_iClientRemoteControlManagerCallbacks = 3800;

		[Token(Token = "0x400064E")]
		public const int k_iSteamAppListCallbacks = 3900;

		[Token(Token = "0x400064F")]
		public const int k_iSteamMusicCallbacks = 4000;

		[Token(Token = "0x4000650")]
		public const int k_iSteamMusicRemoteCallbacks = 4100;

		[Token(Token = "0x4000651")]
		public const int k_iClientVRCallbacks = 4200;

		[Token(Token = "0x4000652")]
		public const int k_iClientReservedCallbacks = 4300;

		[Token(Token = "0x4000653")]
		public const int k_iSteamReservedCallbacks = 4400;

		[Token(Token = "0x4000654")]
		public const int k_iSteamHTMLSurfaceCallbacks = 4500;

		[Token(Token = "0x4000655")]
		public const int k_iClientVideoCallbacks = 4600;

		[Token(Token = "0x4000656")]
		public const int k_iClientInventoryCallbacks = 4700;

		[Token(Token = "0x4000657")]
		public const int k_cchMaxFriendsGroupName = 64;

		[Token(Token = "0x4000658")]
		public const int k_cFriendsGroupLimit = 100;

		[Token(Token = "0x4000659")]
		public const int k_cEnumerateFollowersMax = 50;

		[Token(Token = "0x400065A")]
		public const int k_cchPersonaNameMax = 128;

		[Token(Token = "0x400065B")]
		public const int k_cwchPersonaNameMax = 32;

		[Token(Token = "0x400065C")]
		public const int k_cubChatMetadataMax = 8192;

		[Token(Token = "0x400065D")]
		public const int k_cchMaxRichPresenceKeys = 20;

		[Token(Token = "0x400065E")]
		public const int k_cchMaxRichPresenceKeyLength = 64;

		[Token(Token = "0x400065F")]
		public const int k_cchMaxRichPresenceValueLength = 256;

		[Token(Token = "0x4000660")]
		public const int k_unServerFlagNone = 0;

		[Token(Token = "0x4000661")]
		public const int k_unServerFlagActive = 1;

		[Token(Token = "0x4000662")]
		public const int k_unServerFlagSecure = 2;

		[Token(Token = "0x4000663")]
		public const int k_unServerFlagDedicated = 4;

		[Token(Token = "0x4000664")]
		public const int k_unServerFlagLinux = 8;

		[Token(Token = "0x4000665")]
		public const int k_unServerFlagPassworded = 16;

		[Token(Token = "0x4000666")]
		public const int k_unServerFlagPrivate = 32;

		[Token(Token = "0x4000667")]
		public const int k_unFavoriteFlagNone = 0;

		[Token(Token = "0x4000668")]
		public const int k_unFavoriteFlagFavorite = 1;

		[Token(Token = "0x4000669")]
		public const int k_unFavoriteFlagHistory = 2;

		[Token(Token = "0x400066A")]
		public const int k_unMaxCloudFileChunkSize = 104857600;

		[Token(Token = "0x400066B")]
		public const int k_cchPublishedDocumentTitleMax = 129;

		[Token(Token = "0x400066C")]
		public const int k_cchPublishedDocumentDescriptionMax = 8000;

		[Token(Token = "0x400066D")]
		public const int k_cchPublishedDocumentChangeDescriptionMax = 8000;

		[Token(Token = "0x400066E")]
		public const int k_unEnumeratePublishedFilesMaxResults = 50;

		[Token(Token = "0x400066F")]
		public const int k_cchTagListMax = 1025;

		[Token(Token = "0x4000670")]
		public const int k_cchFilenameMax = 260;

		[Token(Token = "0x4000671")]
		public const int k_cchPublishedFileURLMax = 256;

		[Token(Token = "0x4000672")]
		public const int k_nScreenshotMaxTaggedUsers = 32;

		[Token(Token = "0x4000673")]
		public const int k_nScreenshotMaxTaggedPublishedFiles = 32;

		[Token(Token = "0x4000674")]
		public const int k_cubUFSTagTypeMax = 255;

		[Token(Token = "0x4000675")]
		public const int k_cubUFSTagValueMax = 255;

		[Token(Token = "0x4000676")]
		public const int k_ScreenshotThumbWidth = 200;

		[Token(Token = "0x4000677")]
		public const int kNumUGCResultsPerPage = 50;

		[Token(Token = "0x4000678")]
		public const int k_cchDeveloperMetadataMax = 5000;

		[Token(Token = "0x4000679")]
		public const int k_cchStatNameMax = 128;

		[Token(Token = "0x400067A")]
		public const int k_cchLeaderboardNameMax = 128;

		[Token(Token = "0x400067B")]
		public const int k_cLeaderboardDetailsMax = 64;

		[Token(Token = "0x400067C")]
		public const int k_cbMaxGameServerGameDir = 32;

		[Token(Token = "0x400067D")]
		public const int k_cbMaxGameServerMapName = 32;

		[Token(Token = "0x400067E")]
		public const int k_cbMaxGameServerGameDescription = 64;

		[Token(Token = "0x400067F")]
		public const int k_cbMaxGameServerName = 64;

		[Token(Token = "0x4000680")]
		public const int k_cbMaxGameServerTags = 128;

		[Token(Token = "0x4000681")]
		public const int k_cbMaxGameServerGameData = 2048;

		[Token(Token = "0x4000682")]
		public const int k_unSteamAccountIDMask = -1;

		[Token(Token = "0x4000683")]
		public const int k_unSteamAccountInstanceMask = 1048575;

		[Token(Token = "0x4000684")]
		public const int k_unSteamUserDesktopInstance = 1;

		[Token(Token = "0x4000685")]
		public const int k_unSteamUserConsoleInstance = 2;

		[Token(Token = "0x4000686")]
		public const int k_unSteamUserWebInstance = 4;

		[Token(Token = "0x4000687")]
		public const int k_cchGameExtraInfoMax = 64;

		[Token(Token = "0x4000688")]
		public const int k_nSteamEncryptedAppTicketSymmetricKeyLen = 32;

		[Token(Token = "0x4000689")]
		public const int k_cubSaltSize = 8;

		[Token(Token = "0x400068A")]
		public const ulong k_GIDNil = ulong.MaxValue;

		[Token(Token = "0x400068B")]
		public const ulong k_TxnIDNil = ulong.MaxValue;

		[Token(Token = "0x400068C")]
		public const ulong k_TxnIDUnknown = 0uL;

		[Token(Token = "0x400068D")]
		public const int k_uPackageIdFreeSub = 0;

		[Token(Token = "0x400068E")]
		public const int k_uPackageIdInvalid = -1;

		[Token(Token = "0x400068F")]
		public const ulong k_ulAssetClassIdInvalid = 0uL;

		[Token(Token = "0x4000690")]
		public const int k_uPhysicalItemIdInvalid = 0;

		[Token(Token = "0x4000691")]
		public const int k_uCellIDInvalid = -1;

		[Token(Token = "0x4000692")]
		public const int k_uPartnerIdInvalid = 0;

		[Token(Token = "0x4000693")]
		public const int MAX_STEAM_CONTROLLERS = 16;

		[Token(Token = "0x4000694")]
		public const int STEAM_RIGHT_TRIGGER_MASK = 1;

		[Token(Token = "0x4000695")]
		public const int STEAM_LEFT_TRIGGER_MASK = 2;

		[Token(Token = "0x4000696")]
		public const int STEAM_RIGHT_BUMPER_MASK = 4;

		[Token(Token = "0x4000697")]
		public const int STEAM_LEFT_BUMPER_MASK = 8;

		[Token(Token = "0x4000698")]
		public const int STEAM_BUTTON_0_MASK = 16;

		[Token(Token = "0x4000699")]
		public const int STEAM_BUTTON_1_MASK = 32;

		[Token(Token = "0x400069A")]
		public const int STEAM_BUTTON_2_MASK = 64;

		[Token(Token = "0x400069B")]
		public const int STEAM_BUTTON_3_MASK = 128;

		[Token(Token = "0x400069C")]
		public const int STEAM_TOUCH_0_MASK = 256;

		[Token(Token = "0x400069D")]
		public const int STEAM_TOUCH_1_MASK = 512;

		[Token(Token = "0x400069E")]
		public const int STEAM_TOUCH_2_MASK = 1024;

		[Token(Token = "0x400069F")]
		public const int STEAM_TOUCH_3_MASK = 2048;

		[Token(Token = "0x40006A0")]
		public const int STEAM_BUTTON_MENU_MASK = 4096;

		[Token(Token = "0x40006A1")]
		public const int STEAM_BUTTON_STEAM_MASK = 8192;

		[Token(Token = "0x40006A2")]
		public const int STEAM_BUTTON_ESCAPE_MASK = 16384;

		[Token(Token = "0x40006A3")]
		public const int STEAM_BUTTON_BACK_LEFT_MASK = 32768;

		[Token(Token = "0x40006A4")]
		public const int STEAM_BUTTON_BACK_RIGHT_MASK = 65536;

		[Token(Token = "0x40006A5")]
		public const int STEAM_BUTTON_LEFTPAD_CLICKED_MASK = 131072;

		[Token(Token = "0x40006A6")]
		public const int STEAM_BUTTON_RIGHTPAD_CLICKED_MASK = 262144;

		[Token(Token = "0x40006A7")]
		public const int STEAM_LEFTPAD_FINGERDOWN_MASK = 524288;

		[Token(Token = "0x40006A8")]
		public const int STEAM_RIGHTPAD_FINGERDOWN_MASK = 1048576;

		[Token(Token = "0x40006A9")]
		public const int STEAM_JOYSTICK_BUTTON_MASK = 4194304;

		[Token(Token = "0x40006AA")]
		public const short MASTERSERVERUPDATERPORT_USEGAMESOCKETSHARE = -1;

		[Token(Token = "0x40006AB")]
		public const int INVALID_HTTPREQUEST_HANDLE = 0;

		[Token(Token = "0x40006AC")]
		public const byte k_nMaxLobbyKeyLength = byte.MaxValue;

		[Token(Token = "0x40006AD")]
		public const int k_SteamMusicNameMaxLength = 255;

		[Token(Token = "0x40006AE")]
		public const int k_SteamMusicPNGMaxLength = 65535;

		[Token(Token = "0x40006AF")]
		public const int QUERY_PORT_NOT_INITIALIZED = 65535;

		[Token(Token = "0x40006B0")]
		public const int QUERY_PORT_ERROR = 65534;
	}
	[Token(Token = "0x2000146")]
	public enum ERegisterActivationCodeResult
	{
		[Token(Token = "0x40006B2")]
		k_ERegisterActivationCodeResultOK,
		[Token(Token = "0x40006B3")]
		k_ERegisterActivationCodeResultFail,
		[Token(Token = "0x40006B4")]
		k_ERegisterActivationCodeResultAlreadyRegistered,
		[Token(Token = "0x40006B5")]
		k_ERegisterActivationCodeResultTimeout,
		[Token(Token = "0x40006B6")]
		k_ERegisterActivationCodeAlreadyOwned
	}
	[Token(Token = "0x2000147")]
	public enum ESteamControllerPad
	{
		[Token(Token = "0x40006B8")]
		k_ESteamControllerPad_Left,
		[Token(Token = "0x40006B9")]
		k_ESteamControllerPad_Right
	}
	[Token(Token = "0x2000148")]
	public enum EFriendRelationship
	{
		[Token(Token = "0x40006BB")]
		k_EFriendRelationshipNone,
		[Token(Token = "0x40006BC")]
		k_EFriendRelationshipBlocked,
		[Token(Token = "0x40006BD")]
		k_EFriendRelationshipRequestRecipient,
		[Token(Token = "0x40006BE")]
		k_EFriendRelationshipFriend,
		[Token(Token = "0x40006BF")]
		k_EFriendRelationshipRequestInitiator,
		[Token(Token = "0x40006C0")]
		k_EFriendRelationshipIgnored,
		[Token(Token = "0x40006C1")]
		k_EFriendRelationshipIgnoredFriend,
		[Token(Token = "0x40006C2")]
		k_EFriendRelationshipSuggested,
		[Token(Token = "0x40006C3")]
		k_EFriendRelationshipMax
	}
	[Token(Token = "0x2000149")]
	public enum EPersonaState
	{
		[Token(Token = "0x40006C5")]
		k_EPersonaStateOffline,
		[Token(Token = "0x40006C6")]
		k_EPersonaStateOnline,
		[Token(Token = "0x40006C7")]
		k_EPersonaStateBusy,
		[Token(Token = "0x40006C8")]
		k_EPersonaStateAway,
		[Token(Token = "0x40006C9")]
		k_EPersonaStateSnooze,
		[Token(Token = "0x40006CA")]
		k_EPersonaStateLookingToTrade,
		[Token(Token = "0x40006CB")]
		k_EPersonaStateLookingToPlay,
		[Token(Token = "0x40006CC")]
		k_EPersonaStateMax
	}
	[Token(Token = "0x200014A")]
	[Flags]
	public enum EFriendFlags
	{
		[Token(Token = "0x40006CE")]
		k_EFriendFlagNone = 0,
		[Token(Token = "0x40006CF")]
		k_EFriendFlagBlocked = 1,
		[Token(Token = "0x40006D0")]
		k_EFriendFlagFriendshipRequested = 2,
		[Token(Token = "0x40006D1")]
		k_EFriendFlagImmediate = 4,
		[Token(Token = "0x40006D2")]
		k_EFriendFlagClanMember = 8,
		[Token(Token = "0x40006D3")]
		k_EFriendFlagOnGameServer = 0x10,
		[Token(Token = "0x40006D4")]
		k_EFriendFlagRequestingFriendship = 0x80,
		[Token(Token = "0x40006D5")]
		k_EFriendFlagRequestingInfo = 0x100,
		[Token(Token = "0x40006D6")]
		k_EFriendFlagIgnored = 0x200,
		[Token(Token = "0x40006D7")]
		k_EFriendFlagIgnoredFriend = 0x400,
		[Token(Token = "0x40006D8")]
		k_EFriendFlagSuggested = 0x800,
		[Token(Token = "0x40006D9")]
		k_EFriendFlagAll = 0xFFFF
	}
	[Token(Token = "0x200014B")]
	public enum EUserRestriction
	{
		[Token(Token = "0x40006DB")]
		k_nUserRestrictionNone = 0,
		[Token(Token = "0x40006DC")]
		k_nUserRestrictionUnknown = 1,
		[Token(Token = "0x40006DD")]
		k_nUserRestrictionAnyChat = 2,
		[Token(Token = "0x40006DE")]
		k_nUserRestrictionVoiceChat = 4,
		[Token(Token = "0x40006DF")]
		k_nUserRestrictionGroupChat = 8,
		[Token(Token = "0x40006E0")]
		k_nUserRestrictionRating = 0x10,
		[Token(Token = "0x40006E1")]
		k_nUserRestrictionGameInvites = 0x20,
		[Token(Token = "0x40006E2")]
		k_nUserRestrictionTrading = 0x40
	}
	[Token(Token = "0x200014C")]
	public enum EOverlayToStoreFlag
	{
		[Token(Token = "0x40006E4")]
		k_EOverlayToStoreFlag_None,
		[Token(Token = "0x40006E5")]
		k_EOverlayToStoreFlag_AddToCart,
		[Token(Token = "0x40006E6")]
		k_EOverlayToStoreFlag_AddToCartAndShow
	}
	[Token(Token = "0x200014D")]
	[Flags]
	public enum EPersonaChange
	{
		[Token(Token = "0x40006E8")]
		k_EPersonaChangeName = 1,
		[Token(Token = "0x40006E9")]
		k_EPersonaChangeStatus = 2,
		[Token(Token = "0x40006EA")]
		k_EPersonaChangeComeOnline = 4,
		[Token(Token = "0x40006EB")]
		k_EPersonaChangeGoneOffline = 8,
		[Token(Token = "0x40006EC")]
		k_EPersonaChangeGamePlayed = 0x10,
		[Token(Token = "0x40006ED")]
		k_EPersonaChangeGameServer = 0x20,
		[Token(Token = "0x40006EE")]
		k_EPersonaChangeAvatar = 0x40,
		[Token(Token = "0x40006EF")]
		k_EPersonaChangeJoinedSource = 0x80,
		[Token(Token = "0x40006F0")]
		k_EPersonaChangeLeftSource = 0x100,
		[Token(Token = "0x40006F1")]
		k_EPersonaChangeRelationshipChanged = 0x200,
		[Token(Token = "0x40006F2")]
		k_EPersonaChangeNameFirstSet = 0x400,
		[Token(Token = "0x40006F3")]
		k_EPersonaChangeFacebookInfo = 0x800,
		[Token(Token = "0x40006F4")]
		k_EPersonaChangeNickname = 0x1000,
		[Token(Token = "0x40006F5")]
		k_EPersonaChangeSteamLevel = 0x2000
	}
	[Token(Token = "0x200014E")]
	public enum EGCResults
	{
		[Token(Token = "0x40006F7")]
		k_EGCResultOK,
		[Token(Token = "0x40006F8")]
		k_EGCResultNoMessage,
		[Token(Token = "0x40006F9")]
		k_EGCResultBufferTooSmall,
		[Token(Token = "0x40006FA")]
		k_EGCResultNotLoggedOn,
		[Token(Token = "0x40006FB")]
		k_EGCResultInvalidMessage
	}
	[Token(Token = "0x200014F")]
	public enum EHTMLMouseButton
	{
		[Token(Token = "0x40006FD")]
		eHTMLMouseButton_Left,
		[Token(Token = "0x40006FE")]
		eHTMLMouseButton_Right,
		[Token(Token = "0x40006FF")]
		eHTMLMouseButton_Middle
	}
	[Token(Token = "0x2000150")]
	public enum EMouseCursor
	{
		[Token(Token = "0x4000701")]
		dc_user,
		[Token(Token = "0x4000702")]
		dc_none,
		[Token(Token = "0x4000703")]
		dc_arrow,
		[Token(Token = "0x4000704")]
		dc_ibeam,
		[Token(Token = "0x4000705")]
		dc_hourglass,
		[Token(Token = "0x4000706")]
		dc_waitarrow,
		[Token(Token = "0x4000707")]
		dc_crosshair,
		[Token(Token = "0x4000708")]
		dc_up,
		[Token(Token = "0x4000709")]
		dc_sizenw,
		[Token(Token = "0x400070A")]
		dc_sizese,
		[Token(Token = "0x400070B")]
		dc_sizene,
		[Token(Token = "0x400070C")]
		dc_sizesw,
		[Token(Token = "0x400070D")]
		dc_sizew,
		[Token(Token = "0x400070E")]
		dc_sizee,
		[Token(Token = "0x400070F")]
		dc_sizen,
		[Token(Token = "0x4000710")]
		dc_sizes,
		[Token(Token = "0x4000711")]
		dc_sizewe,
		[Token(Token = "0x4000712")]
		dc_sizens,
		[Token(Token = "0x4000713")]
		dc_sizeall,
		[Token(Token = "0x4000714")]
		dc_no,
		[Token(Token = "0x4000715")]
		dc_hand,
		[Token(Token = "0x4000716")]
		dc_blank,
		[Token(Token = "0x4000717")]
		dc_middle_pan,
		[Token(Token = "0x4000718")]
		dc_north_pan,
		[Token(Token = "0x4000719")]
		dc_north_east_pan,
		[Token(Token = "0x400071A")]
		dc_east_pan,
		[Token(Token = "0x400071B")]
		dc_south_east_pan,
		[Token(Token = "0x400071C")]
		dc_south_pan,
		[Token(Token = "0x400071D")]
		dc_south_west_pan,
		[Token(Token = "0x400071E")]
		dc_west_pan,
		[Token(Token = "0x400071F")]
		dc_north_west_pan,
		[Token(Token = "0x4000720")]
		dc_alias,
		[Token(Token = "0x4000721")]
		dc_cell,
		[Token(Token = "0x4000722")]
		dc_colresize,
		[Token(Token = "0x4000723")]
		dc_copycur,
		[Token(Token = "0x4000724")]
		dc_verticaltext,
		[Token(Token = "0x4000725")]
		dc_rowresize,
		[Token(Token = "0x4000726")]
		dc_zoomin,
		[Token(Token = "0x4000727")]
		dc_zoomout,
		[Token(Token = "0x4000728")]
		dc_help,
		[Token(Token = "0x4000729")]
		dc_custom,
		[Token(Token = "0x400072A")]
		dc_last
	}
	[Token(Token = "0x2000151")]
	[Flags]
	public enum EHTMLKeyModifiers
	{
		[Token(Token = "0x400072C")]
		k_eHTMLKeyModifier_None = 0,
		[Token(Token = "0x400072D")]
		k_eHTMLKeyModifier_AltDown = 1,
		[Token(Token = "0x400072E")]
		k_eHTMLKeyModifier_CtrlDown = 2,
		[Token(Token = "0x400072F")]
		k_eHTMLKeyModifier_ShiftDown = 4
	}
	[Token(Token = "0x2000152")]
	[Flags]
	public enum ESteamItemFlags
	{
		[Token(Token = "0x4000731")]
		k_ESteamItemNoTrade = 1,
		[Token(Token = "0x4000732")]
		k_ESteamItemRemoved = 0x100,
		[Token(Token = "0x4000733")]
		k_ESteamItemConsumed = 0x200
	}
	[Token(Token = "0x2000153")]
	public enum ELobbyType
	{
		[Token(Token = "0x4000735")]
		k_ELobbyTypePrivate,
		[Token(Token = "0x4000736")]
		k_ELobbyTypeFriendsOnly,
		[Token(Token = "0x4000737")]
		k_ELobbyTypePublic,
		[Token(Token = "0x4000738")]
		k_ELobbyTypeInvisible
	}
	[Token(Token = "0x2000154")]
	public enum ELobbyComparison
	{
		[Token(Token = "0x400073A")]
		k_ELobbyComparisonEqualToOrLessThan = -2,
		[Token(Token = "0x400073B")]
		k_ELobbyComparisonLessThan,
		[Token(Token = "0x400073C")]
		k_ELobbyComparisonEqual,
		[Token(Token = "0x400073D")]
		k_ELobbyComparisonGreaterThan,
		[Token(Token = "0x400073E")]
		k_ELobbyComparisonEqualToOrGreaterThan,
		[Token(Token = "0x400073F")]
		k_ELobbyComparisonNotEqual
	}
	[Token(Token = "0x2000155")]
	public enum ELobbyDistanceFilter
	{
		[Token(Token = "0x4000741")]
		k_ELobbyDistanceFilterClose,
		[Token(Token = "0x4000742")]
		k_ELobbyDistanceFilterDefault,
		[Token(Token = "0x4000743")]
		k_ELobbyDistanceFilterFar,
		[Token(Token = "0x4000744")]
		k_ELobbyDistanceFilterWorldwide
	}
	[Token(Token = "0x2000156")]
	[Flags]
	public enum EChatMemberStateChange
	{
		[Token(Token = "0x4000746")]
		k_EChatMemberStateChangeEntered = 1,
		[Token(Token = "0x4000747")]
		k_EChatMemberStateChangeLeft = 2,
		[Token(Token = "0x4000748")]
		k_EChatMemberStateChangeDisconnected = 4,
		[Token(Token = "0x4000749")]
		k_EChatMemberStateChangeKicked = 8,
		[Token(Token = "0x400074A")]
		k_EChatMemberStateChangeBanned = 0x10
	}
	[Token(Token = "0x2000157")]
	public enum AudioPlayback_Status
	{
		[Token(Token = "0x400074C")]
		AudioPlayback_Undefined,
		[Token(Token = "0x400074D")]
		AudioPlayback_Playing,
		[Token(Token = "0x400074E")]
		AudioPlayback_Paused,
		[Token(Token = "0x400074F")]
		AudioPlayback_Idle
	}
	[Token(Token = "0x2000158")]
	public enum EP2PSessionError
	{
		[Token(Token = "0x4000751")]
		k_EP2PSessionErrorNone,
		[Token(Token = "0x4000752")]
		k_EP2PSessionErrorNotRunningApp,
		[Token(Token = "0x4000753")]
		k_EP2PSessionErrorNoRightsToApp,
		[Token(Token = "0x4000754")]
		k_EP2PSessionErrorDestinationNotLoggedIn,
		[Token(Token = "0x4000755")]
		k_EP2PSessionErrorTimeout,
		[Token(Token = "0x4000756")]
		k_EP2PSessionErrorMax
	}
	[Token(Token = "0x2000159")]
	public enum EP2PSend
	{
		[Token(Token = "0x4000758")]
		k_EP2PSendUnreliable,
		[Token(Token = "0x4000759")]
		k_EP2PSendUnreliableNoDelay,
		[Token(Token = "0x400075A")]
		k_EP2PSendReliable,
		[Token(Token = "0x400075B")]
		k_EP2PSendReliableWithBuffering
	}
	[Token(Token = "0x200015A")]
	public enum ESNetSocketState
	{
		[Token(Token = "0x400075D")]
		k_ESNetSocketStateInvalid = 0,
		[Token(Token = "0x400075E")]
		k_ESNetSocketStateConnected = 1,
		[Token(Token = "0x400075F")]
		k_ESNetSocketStateInitiated = 10,
		[Token(Token = "0x4000760")]
		k_ESNetSocketStateLocalCandidatesFound = 11,
		[Token(Token = "0x4000761")]
		k_ESNetSocketStateReceivedRemoteCandidates = 12,
		[Token(Token = "0x4000762")]
		k_ESNetSocketStateChallengeHandshake = 15,
		[Token(Token = "0x4000763")]
		k_ESNetSocketStateDisconnecting = 21,
		[Token(Token = "0x4000764")]
		k_ESNetSocketStateLocalDisconnect = 22,
		[Token(Token = "0x4000765")]
		k_ESNetSocketStateTimeoutDuringConnect = 23,
		[Token(Token = "0x4000766")]
		k_ESNetSocketStateRemoteEndDisconnected = 24,
		[Token(Token = "0x4000767")]
		k_ESNetSocketStateConnectionBroken = 25
	}
	[Token(Token = "0x200015B")]
	public enum ESNetSocketConnectionType
	{
		[Token(Token = "0x4000769")]
		k_ESNetSocketConnectionTypeNotConnected,
		[Token(Token = "0x400076A")]
		k_ESNetSocketConnectionTypeUDP,
		[Token(Token = "0x400076B")]
		k_ESNetSocketConnectionTypeUDPRelay
	}
	[Token(Token = "0x200015C")]
	public enum EResolveConflict
	{
		[Token(Token = "0x400076D")]
		k_EResolveConflictKeepClient = 1,
		[Token(Token = "0x400076E")]
		k_EResolveConflictKeepServer
	}
	[Token(Token = "0x200015D")]
	[Flags]
	public enum ERemoteStoragePlatform
	{
		[Token(Token = "0x4000770")]
		k_ERemoteStoragePlatformNone = 0,
		[Token(Token = "0x4000771")]
		k_ERemoteStoragePlatformWindows = 1,
		[Token(Token = "0x4000772")]
		k_ERemoteStoragePlatformOSX = 2,
		[Token(Token = "0x4000773")]
		k_ERemoteStoragePlatformPS3 = 4,
		[Token(Token = "0x4000774")]
		k_ERemoteStoragePlatformLinux = 8,
		[Token(Token = "0x4000775")]
		k_ERemoteStoragePlatformReserved2 = 0x10,
		[Token(Token = "0x4000776")]
		k_ERemoteStoragePlatformAll = -1
	}
	[Token(Token = "0x200015E")]
	public enum ERemoteStoragePublishedFileVisibility
	{
		[Token(Token = "0x4000778")]
		k_ERemoteStoragePublishedFileVisibilityPublic,
		[Token(Token = "0x4000779")]
		k_ERemoteStoragePublishedFileVisibilityFriendsOnly,
		[Token(Token = "0x400077A")]
		k_ERemoteStoragePublishedFileVisibilityPrivate
	}
	[Token(Token = "0x200015F")]
	public enum EWorkshopFileType
	{
		[Token(Token = "0x400077C")]
		k_EWorkshopFileTypeFirst = 0,
		[Token(Token = "0x400077D")]
		k_EWorkshopFileTypeCommunity = 0,
		[Token(Token = "0x400077E")]
		k_EWorkshopFileTypeMicrotransaction = 1,
		[Token(Token = "0x400077F")]
		k_EWorkshopFileTypeCollection = 2,
		[Token(Token = "0x4000780")]
		k_EWorkshopFileTypeArt = 3,
		[Token(Token = "0x4000781")]
		k_EWorkshopFileTypeVideo = 4,
		[Token(Token = "0x4000782")]
		k_EWorkshopFileTypeScreenshot = 5,
		[Token(Token = "0x4000783")]
		k_EWorkshopFileTypeGame = 6,
		[Token(Token = "0x4000784")]
		k_EWorkshopFileTypeSoftware = 7,
		[Token(Token = "0x4000785")]
		k_EWorkshopFileTypeConcept = 8,
		[Token(Token = "0x4000786")]
		k_EWorkshopFileTypeWebGuide = 9,
		[Token(Token = "0x4000787")]
		k_EWorkshopFileTypeIntegratedGuide = 10,
		[Token(Token = "0x4000788")]
		k_EWorkshopFileTypeMerch = 11,
		[Token(Token = "0x4000789")]
		k_EWorkshopFileTypeControllerBinding = 12,
		[Token(Token = "0x400078A")]
		k_EWorkshopFileTypeSteamworksAccessInvite = 13,
		[Token(Token = "0x400078B")]
		k_EWorkshopFileTypeSteamVideo = 14,
		[Token(Token = "0x400078C")]
		k_EWorkshopFileTypeGameManagedItem = 15,
		[Token(Token = "0x400078D")]
		k_EWorkshopFileTypeMax = 16
	}
	[Token(Token = "0x2000160")]
	public enum EWorkshopVote
	{
		[Token(Token = "0x400078F")]
		k_EWorkshopVoteUnvoted,
		[Token(Token = "0x4000790")]
		k_EWorkshopVoteFor,
		[Token(Token = "0x4000791")]
		k_EWorkshopVoteAgainst,
		[Token(Token = "0x4000792")]
		k_EWorkshopVoteLater
	}
	[Token(Token = "0x2000161")]
	public enum EWorkshopFileAction
	{
		[Token(Token = "0x4000794")]
		k_EWorkshopFileActionPlayed,
		[Token(Token = "0x4000795")]
		k_EWorkshopFileActionCompleted
	}
	[Token(Token = "0x2000162")]
	public enum EWorkshopEnumerationType
	{
		[Token(Token = "0x4000797")]
		k_EWorkshopEnumerationTypeRankedByVote,
		[Token(Token = "0x4000798")]
		k_EWorkshopEnumerationTypeRecent,
		[Token(Token = "0x4000799")]
		k_EWorkshopEnumerationTypeTrending,
		[Token(Token = "0x400079A")]
		k_EWorkshopEnumerationTypeFavoritesOfFriends,
		[Token(Token = "0x400079B")]
		k_EWorkshopEnumerationTypeVotedByFriends,
		[Token(Token = "0x400079C")]
		k_EWorkshopEnumerationTypeContentByFriends,
		[Token(Token = "0x400079D")]
		k_EWorkshopEnumerationTypeRecentFromFollowedUsers
	}
	[Token(Token = "0x2000163")]
	public enum EWorkshopVideoProvider
	{
		[Token(Token = "0x400079F")]
		k_EWorkshopVideoProviderNone,
		[Token(Token = "0x40007A0")]
		k_EWorkshopVideoProviderYoutube
	}
	[Token(Token = "0x2000164")]
	public enum EUGCReadAction
	{
		[Token(Token = "0x40007A2")]
		k_EUGCRead_ContinueReadingUntilFinished,
		[Token(Token = "0x40007A3")]
		k_EUGCRead_ContinueReading,
		[Token(Token = "0x40007A4")]
		k_EUGCRead_Close
	}
	[Token(Token = "0x2000165")]
	public enum EUGCMatchingUGCType
	{
		[Token(Token = "0x40007A6")]
		k_EUGCMatchingUGCType_Items,
		[Token(Token = "0x40007A7")]
		k_EUGCMatchingUGCType_Items_Mtx,
		[Token(Token = "0x40007A8")]
		k_EUGCMatchingUGCType_Items_ReadyToUse,
		[Token(Token = "0x40007A9")]
		k_EUGCMatchingUGCType_Collections,
		[Token(Token = "0x40007AA")]
		k_EUGCMatchingUGCType_Artwork,
		[Token(Token = "0x40007AB")]
		k_EUGCMatchingUGCType_Videos,
		[Token(Token = "0x40007AC")]
		k_EUGCMatchingUGCType_Screenshots,
		[Token(Token = "0x40007AD")]
		k_EUGCMatchingUGCType_AllGuides,
		[Token(Token = "0x40007AE")]
		k_EUGCMatchingUGCType_WebGuides,
		[Token(Token = "0x40007AF")]
		k_EUGCMatchingUGCType_IntegratedGuides,
		[Token(Token = "0x40007B0")]
		k_EUGCMatchingUGCType_UsableInGame,
		[Token(Token = "0x40007B1")]
		k_EUGCMatchingUGCType_ControllerBindings,
		[Token(Token = "0x40007B2")]
		k_EUGCMatchingUGCType_GameManagedItems
	}
	[Token(Token = "0x2000166")]
	public enum EUserUGCList
	{
		[Token(Token = "0x40007B4")]
		k_EUserUGCList_Published,
		[Token(Token = "0x40007B5")]
		k_EUserUGCList_VotedOn,
		[Token(Token = "0x40007B6")]
		k_EUserUGCList_VotedUp,
		[Token(Token = "0x40007B7")]
		k_EUserUGCList_VotedDown,
		[Token(Token = "0x40007B8")]
		k_EUserUGCList_WillVoteLater,
		[Token(Token = "0x40007B9")]
		k_EUserUGCList_Favorited,
		[Token(Token = "0x40007BA")]
		k_EUserUGCList_Subscribed,
		[Token(Token = "0x40007BB")]
		k_EUserUGCList_UsedOrPlayed,
		[Token(Token = "0x40007BC")]
		k_EUserUGCList_Followed
	}
	[Token(Token = "0x2000167")]
	public enum EUserUGCListSortOrder
	{
		[Token(Token = "0x40007BE")]
		k_EUserUGCListSortOrder_CreationOrderDesc,
		[Token(Token = "0x40007BF")]
		k_EUserUGCListSortOrder_CreationOrderAsc,
		[Token(Token = "0x40007C0")]
		k_EUserUGCListSortOrder_TitleAsc,
		[Token(Token = "0x40007C1")]
		k_EUserUGCListSortOrder_LastUpdatedDesc,
		[Token(Token = "0x40007C2")]
		k_EUserUGCListSortOrder_SubscriptionDateDesc,
		[Token(Token = "0x40007C3")]
		k_EUserUGCListSortOrder_VoteScoreDesc,
		[Token(Token = "0x40007C4")]
		k_EUserUGCListSortOrder_ForModeration
	}
	[Token(Token = "0x2000168")]
	public enum EUGCQuery
	{
		[Token(Token = "0x40007C6")]
		k_EUGCQuery_RankedByVote,
		[Token(Token = "0x40007C7")]
		k_EUGCQuery_RankedByPublicationDate,
		[Token(Token = "0x40007C8")]
		k_EUGCQuery_AcceptedForGameRankedByAcceptanceDate,
		[Token(Token = "0x40007C9")]
		k_EUGCQuery_RankedByTrend,
		[Token(Token = "0x40007CA")]
		k_EUGCQuery_FavoritedByFriendsRankedByPublicationDate,
		[Token(Token = "0x40007CB")]
		k_EUGCQuery_CreatedByFriendsRankedByPublicationDate,
		[Token(Token = "0x40007CC")]
		k_EUGCQuery_RankedByNumTimesReported,
		[Token(Token = "0x40007CD")]
		k_EUGCQuery_CreatedByFollowedUsersRankedByPublicationDate,
		[Token(Token = "0x40007CE")]
		k_EUGCQuery_NotYetRated,
		[Token(Token = "0x40007CF")]
		k_EUGCQuery_RankedByTotalVotesAsc,
		[Token(Token = "0x40007D0")]
		k_EUGCQuery_RankedByVotesUp,
		[Token(Token = "0x40007D1")]
		k_EUGCQuery_RankedByTextSearch,
		[Token(Token = "0x40007D2")]
		k_EUGCQuery_RankedByTotalUniqueSubscriptions
	}
	[Token(Token = "0x2000169")]
	public enum EItemUpdateStatus
	{
		[Token(Token = "0x40007D4")]
		k_EItemUpdateStatusInvalid,
		[Token(Token = "0x40007D5")]
		k_EItemUpdateStatusPreparingConfig,
		[Token(Token = "0x40007D6")]
		k_EItemUpdateStatusPreparingContent,
		[Token(Token = "0x40007D7")]
		k_EItemUpdateStatusUploadingContent,
		[Token(Token = "0x40007D8")]
		k_EItemUpdateStatusUploadingPreviewFile,
		[Token(Token = "0x40007D9")]
		k_EItemUpdateStatusCommittingChanges
	}
	[Token(Token = "0x200016A")]
	[Flags]
	public enum EItemState
	{
		[Token(Token = "0x40007DB")]
		k_EItemStateNone = 0,
		[Token(Token = "0x40007DC")]
		k_EItemStateSubscribed = 1,
		[Token(Token = "0x40007DD")]
		k_EItemStateLegacyItem = 2,
		[Token(Token = "0x40007DE")]
		k_EItemStateInstalled = 4,
		[Token(Token = "0x40007DF")]
		k_EItemStateNeedsUpdate = 8,
		[Token(Token = "0x40007E0")]
		k_EItemStateDownloading = 0x10,
		[Token(Token = "0x40007E1")]
		k_EItemStateDownloadPending = 0x20
	}
	[Token(Token = "0x200016B")]
	public enum EItemStatistic
	{
		[Token(Token = "0x40007E3")]
		k_EItemStatistic_NumSubscriptions,
		[Token(Token = "0x40007E4")]
		k_EItemStatistic_NumFavorites,
		[Token(Token = "0x40007E5")]
		k_EItemStatistic_NumFollowers,
		[Token(Token = "0x40007E6")]
		k_EItemStatistic_NumUniqueSubscriptions,
		[Token(Token = "0x40007E7")]
		k_EItemStatistic_NumUniqueFavorites,
		[Token(Token = "0x40007E8")]
		k_EItemStatistic_NumUniqueFollowers,
		[Token(Token = "0x40007E9")]
		k_EItemStatistic_NumUniqueWebsiteViews,
		[Token(Token = "0x40007EA")]
		k_EItemStatistic_ReportScore
	}
	[Token(Token = "0x200016C")]
	public enum EFailureType
	{
		[Token(Token = "0x40007EC")]
		k_EFailureFlushedCallbackQueue,
		[Token(Token = "0x40007ED")]
		k_EFailurePipeFail
	}
	[Token(Token = "0x200016D")]
	public enum ELeaderboardDataRequest
	{
		[Token(Token = "0x40007EF")]
		k_ELeaderboardDataRequestGlobal,
		[Token(Token = "0x40007F0")]
		k_ELeaderboardDataRequestGlobalAroundUser,
		[Token(Token = "0x40007F1")]
		k_ELeaderboardDataRequestFriends,
		[Token(Token = "0x40007F2")]
		k_ELeaderboardDataRequestUsers
	}
	[Token(Token = "0x200016E")]
	public enum ELeaderboardSortMethod
	{
		[Token(Token = "0x40007F4")]
		k_ELeaderboardSortMethodNone,
		[Token(Token = "0x40007F5")]
		k_ELeaderboardSortMethodAscending,
		[Token(Token = "0x40007F6")]
		k_ELeaderboardSortMethodDescending
	}
	[Token(Token = "0x200016F")]
	public enum ELeaderboardDisplayType
	{
		[Token(Token = "0x40007F8")]
		k_ELeaderboardDisplayTypeNone,
		[Token(Token = "0x40007F9")]
		k_ELeaderboardDisplayTypeNumeric,
		[Token(Token = "0x40007FA")]
		k_ELeaderboardDisplayTypeTimeSeconds,
		[Token(Token = "0x40007FB")]
		k_ELeaderboardDisplayTypeTimeMilliSeconds
	}
	[Token(Token = "0x2000170")]
	public enum ELeaderboardUploadScoreMethod
	{
		[Token(Token = "0x40007FD")]
		k_ELeaderboardUploadScoreMethodNone,
		[Token(Token = "0x40007FE")]
		k_ELeaderboardUploadScoreMethodKeepBest,
		[Token(Token = "0x40007FF")]
		k_ELeaderboardUploadScoreMethodForceUpdate
	}
	[Token(Token = "0x2000171")]
	public enum ESteamAPICallFailure
	{
		[Token(Token = "0x4000801")]
		k_ESteamAPICallFailureNone = -1,
		[Token(Token = "0x4000802")]
		k_ESteamAPICallFailureSteamGone,
		[Token(Token = "0x4000803")]
		k_ESteamAPICallFailureNetworkFailure,
		[Token(Token = "0x4000804")]
		k_ESteamAPICallFailureInvalidHandle,
		[Token(Token = "0x4000805")]
		k_ESteamAPICallFailureMismatchedCallback
	}
	[Token(Token = "0x2000172")]
	public enum EGamepadTextInputMode
	{
		[Token(Token = "0x4000807")]
		k_EGamepadTextInputModeNormal,
		[Token(Token = "0x4000808")]
		k_EGamepadTextInputModePassword
	}
	[Token(Token = "0x2000173")]
	public enum EGamepadTextInputLineMode
	{
		[Token(Token = "0x400080A")]
		k_EGamepadTextInputLineModeSingleLine,
		[Token(Token = "0x400080B")]
		k_EGamepadTextInputLineModeMultipleLines
	}
	[Token(Token = "0x2000174")]
	public enum ECheckFileSignature
	{
		[Token(Token = "0x400080D")]
		k_ECheckFileSignatureInvalidSignature,
		[Token(Token = "0x400080E")]
		k_ECheckFileSignatureValidSignature,
		[Token(Token = "0x400080F")]
		k_ECheckFileSignatureFileNotFound,
		[Token(Token = "0x4000810")]
		k_ECheckFileSignatureNoSignaturesFoundForThisApp,
		[Token(Token = "0x4000811")]
		k_ECheckFileSignatureNoSignaturesFoundForThisFile
	}
	[Token(Token = "0x2000175")]
	public enum EMatchMakingServerResponse
	{
		[Token(Token = "0x4000813")]
		eServerResponded,
		[Token(Token = "0x4000814")]
		eServerFailedToRespond,
		[Token(Token = "0x4000815")]
		eNoServersListedOnMasterServer
	}
	[Token(Token = "0x2000176")]
	public enum EServerMode
	{
		[Token(Token = "0x4000817")]
		eServerModeInvalid,
		[Token(Token = "0x4000818")]
		eServerModeNoAuthentication,
		[Token(Token = "0x4000819")]
		eServerModeAuthentication,
		[Token(Token = "0x400081A")]
		eServerModeAuthenticationAndSecure
	}
	[Token(Token = "0x2000177")]
	public enum EResult
	{
		[Token(Token = "0x400081C")]
		k_EResultOK = 1,
		[Token(Token = "0x400081D")]
		k_EResultFail = 2,
		[Token(Token = "0x400081E")]
		k_EResultNoConnection = 3,
		[Token(Token = "0x400081F")]
		k_EResultInvalidPassword = 5,
		[Token(Token = "0x4000820")]
		k_EResultLoggedInElsewhere = 6,
		[Token(Token = "0x4000821")]
		k_EResultInvalidProtocolVer = 7,
		[Token(Token = "0x4000822")]
		k_EResultInvalidParam = 8,
		[Token(Token = "0x4000823")]
		k_EResultFileNotFound = 9,
		[Token(Token = "0x4000824")]
		k_EResultBusy = 10,
		[Token(Token = "0x4000825")]
		k_EResultInvalidState = 11,
		[Token(Token = "0x4000826")]
		k_EResultInvalidName = 12,
		[Token(Token = "0x4000827")]
		k_EResultInvalidEmail = 13,
		[Token(Token = "0x4000828")]
		k_EResultDuplicateName = 14,
		[Token(Token = "0x4000829")]
		k_EResultAccessDenied = 15,
		[Token(Token = "0x400082A")]
		k_EResultTimeout = 16,
		[Token(Token = "0x400082B")]
		k_EResultBanned = 17,
		[Token(Token = "0x400082C")]
		k_EResultAccountNotFound = 18,
		[Token(Token = "0x400082D")]
		k_EResultInvalidSteamID = 19,
		[Token(Token = "0x400082E")]
		k_EResultServiceUnavailable = 20,
		[Token(Token = "0x400082F")]
		k_EResultNotLoggedOn = 21,
		[Token(Token = "0x4000830")]
		k_EResultPending = 22,
		[Token(Token = "0x4000831")]
		k_EResultEncryptionFailure = 23,
		[Token(Token = "0x4000832")]
		k_EResultInsufficientPrivilege = 24,
		[Token(Token = "0x4000833")]
		k_EResultLimitExceeded = 25,
		[Token(Token = "0x4000834")]
		k_EResultRevoked = 26,
		[Token(Token = "0x4000835")]
		k_EResultExpired = 27,
		[Token(Token = "0x4000836")]
		k_EResultAlreadyRedeemed = 28,
		[Token(Token = "0x4000837")]
		k_EResultDuplicateRequest = 29,
		[Token(Token = "0x4000838")]
		k_EResultAlreadyOwned = 30,
		[Token(Token = "0x4000839")]
		k_EResultIPNotFound = 31,
		[Token(Token = "0x400083A")]
		k_EResultPersistFailed = 32,
		[Token(Token = "0x400083B")]
		k_EResultLockingFailed = 33,
		[Token(Token = "0x400083C")]
		k_EResultLogonSessionReplaced = 34,
		[Token(Token = "0x400083D")]
		k_EResultConnectFailed = 35,
		[Token(Token = "0x400083E")]
		k_EResultHandshakeFailed = 36,
		[Token(Token = "0x400083F")]
		k_EResultIOFailure = 37,
		[Token(Token = "0x4000840")]
		k_EResultRemoteDisconnect = 38,
		[Token(Token = "0x4000841")]
		k_EResultShoppingCartNotFound = 39,
		[Token(Token = "0x4000842")]
		k_EResultBlocked = 40,
		[Token(Token = "0x4000843")]
		k_EResultIgnored = 41,
		[Token(Token = "0x4000844")]
		k_EResultNoMatch = 42,
		[Token(Token = "0x4000845")]
		k_EResultAccountDisabled = 43,
		[Token(Token = "0x4000846")]
		k_EResultServiceReadOnly = 44,
		[Token(Token = "0x4000847")]
		k_EResultAccountNotFeatured = 45,
		[Token(Token = "0x4000848")]
		k_EResultAdministratorOK = 46,
		[Token(Token = "0x4000849")]
		k_EResultContentVersion = 47,
		[Token(Token = "0x400084A")]
		k_EResultTryAnotherCM = 48,
		[Token(Token = "0x400084B")]
		k_EResultPasswordRequiredToKickSession = 49,
		[Token(Token = "0x400084C")]
		k_EResultAlreadyLoggedInElsewhere = 50,
		[Token(Token = "0x400084D")]
		k_EResultSuspended = 51,
		[Token(Token = "0x400084E")]
		k_EResultCancelled = 52,
		[Token(Token = "0x400084F")]
		k_EResultDataCorruption = 53,
		[Token(Token = "0x4000850")]
		k_EResultDiskFull = 54,
		[Token(Token = "0x4000851")]
		k_EResultRemoteCallFailed = 55,
		[Token(Token = "0x4000852")]
		k_EResultPasswordUnset = 56,
		[Token(Token = "0x4000853")]
		k_EResultExternalAccountUnlinked = 57,
		[Token(Token = "0x4000854")]
		k_EResultPSNTicketInvalid = 58,
		[Token(Token = "0x4000855")]
		k_EResultExternalAccountAlreadyLinked = 59,
		[Token(Token = "0x4000856")]
		k_EResultRemoteFileConflict = 60,
		[Token(Token = "0x4000857")]
		k_EResultIllegalPassword = 61,
		[Token(Token = "0x4000858")]
		k_EResultSameAsPreviousValue = 62,
		[Token(Token = "0x4000859")]
		k_EResultAccountLogonDenied = 63,
		[Token(Token = "0x400085A")]
		k_EResultCannotUseOldPassword = 64,
		[Token(Token = "0x400085B")]
		k_EResultInvalidLoginAuthCode = 65,
		[Token(Token = "0x400085C")]
		k_EResultAccountLogonDeniedNoMail = 66,
		[Token(Token = "0x400085D")]
		k_EResultHardwareNotCapableOfIPT = 67,
		[Token(Token = "0x400085E")]
		k_EResultIPTInitError = 68,
		[Token(Token = "0x400085F")]
		k_EResultParentalControlRestricted = 69,
		[Token(Token = "0x4000860")]
		k_EResultFacebookQueryError = 70,
		[Token(Token = "0x4000861")]
		k_EResultExpiredLoginAuthCode = 71,
		[Token(Token = "0x4000862")]
		k_EResultIPLoginRestrictionFailed = 72,
		[Token(Token = "0x4000863")]
		k_EResultAccountLockedDown = 73,
		[Token(Token = "0x4000864")]
		k_EResultAccountLogonDeniedVerifiedEmailRequired = 74,
		[Token(Token = "0x4000865")]
		k_EResultNoMatchingURL = 75,
		[Token(Token = "0x4000866")]
		k_EResultBadResponse = 76,
		[Token(Token = "0x4000867")]
		k_EResultRequirePasswordReEntry = 77,
		[Token(Token = "0x4000868")]
		k_EResultValueOutOfRange = 78,
		[Token(Token = "0x4000869")]
		k_EResultUnexpectedError = 79,
		[Token(Token = "0x400086A")]
		k_EResultDisabled = 80,
		[Token(Token = "0x400086B")]
		k_EResultInvalidCEGSubmission = 81,
		[Token(Token = "0x400086C")]
		k_EResultRestrictedDevice = 82,
		[Token(Token = "0x400086D")]
		k_EResultRegionLocked = 83,
		[Token(Token = "0x400086E")]
		k_EResultRateLimitExceeded = 84,
		[Token(Token = "0x400086F")]
		k_EResultAccountLoginDeniedNeedTwoFactor = 85,
		[Token(Token = "0x4000870")]
		k_EResultItemDeleted = 86,
		[Token(Token = "0x4000871")]
		k_EResultAccountLoginDeniedThrottle = 87,
		[Token(Token = "0x4000872")]
		k_EResultTwoFactorCodeMismatch = 88,
		[Token(Token = "0x4000873")]
		k_EResultTwoFactorActivationCodeMismatch = 89,
		[Token(Token = "0x4000874")]
		k_EResultAccountAssociatedToMultiplePartners = 90,
		[Token(Token = "0x4000875")]
		k_EResultNotModified = 91,
		[Token(Token = "0x4000876")]
		k_EResultNoMobileDevice = 92,
		[Token(Token = "0x4000877")]
		k_EResultTimeNotSynced = 93,
		[Token(Token = "0x4000878")]
		k_EResultSmsCodeFailed = 94,
		[Token(Token = "0x4000879")]
		k_EResultAccountLimitExceeded = 95,
		[Token(Token = "0x400087A")]
		k_EResultAccountActivityLimitExceeded = 96,
		[Token(Token = "0x400087B")]
		k_EResultPhoneActivityLimitExceeded = 97,
		[Token(Token = "0x400087C")]
		k_EResultRefundToWallet = 98,
		[Token(Token = "0x400087D")]
		k_EResultEmailSendFailure = 99,
		[Token(Token = "0x400087E")]
		k_EResultNotSettled = 100
	}
	[Token(Token = "0x2000178")]
	public enum EVoiceResult
	{
		[Token(Token = "0x4000880")]
		k_EVoiceResultOK,
		[Token(Token = "0x4000881")]
		k_EVoiceResultNotInitialized,
		[Token(Token = "0x4000882")]
		k_EVoiceResultNotRecording,
		[Token(Token = "0x4000883")]
		k_EVoiceResultNoData,
		[Token(Token = "0x4000884")]
		k_EVoiceResultBufferTooSmall,
		[Token(Token = "0x4000885")]
		k_EVoiceResultDataCorrupted,
		[Token(Token = "0x4000886")]
		k_EVoiceResultRestricted,
		[Token(Token = "0x4000887")]
		k_EVoiceResultUnsupportedCodec,
		[Token(Token = "0x4000888")]
		k_EVoiceResultReceiverOutOfDate,
		[Token(Token = "0x4000889")]
		k_EVoiceResultReceiverDidNotAnswer
	}
	[Token(Token = "0x2000179")]
	public enum EDenyReason
	{
		[Token(Token = "0x400088B")]
		k_EDenyInvalid,
		[Token(Token = "0x400088C")]
		k_EDenyInvalidVersion,
		[Token(Token = "0x400088D")]
		k_EDenyGeneric,
		[Token(Token = "0x400088E")]
		k_EDenyNotLoggedOn,
		[Token(Token = "0x400088F")]
		k_EDenyNoLicense,
		[Token(Token = "0x4000890")]
		k_EDenyCheater,
		[Token(Token = "0x4000891")]
		k_EDenyLoggedInElseWhere,
		[Token(Token = "0x4000892")]
		k_EDenyUnknownText,
		[Token(Token = "0x4000893")]
		k_EDenyIncompatibleAnticheat,
		[Token(Token = "0x4000894")]
		k_EDenyMemoryCorruption,
		[Token(Token = "0x4000895")]
		k_EDenyIncompatibleSoftware,
		[Token(Token = "0x4000896")]
		k_EDenySteamConnectionLost,
		[Token(Token = "0x4000897")]
		k_EDenySteamConnectionError,
		[Token(Token = "0x4000898")]
		k_EDenySteamResponseTimedOut,
		[Token(Token = "0x4000899")]
		k_EDenySteamValidationStalled,
		[Token(Token = "0x400089A")]
		k_EDenySteamOwnerLeftGuestUser
	}
	[Token(Token = "0x200017A")]
	public enum EBeginAuthSessionResult
	{
		[Token(Token = "0x400089C")]
		k_EBeginAuthSessionResultOK,
		[Token(Token = "0x400089D")]
		k_EBeginAuthSessionResultInvalidTicket,
		[Token(Token = "0x400089E")]
		k_EBeginAuthSessionResultDuplicateRequest,
		[Token(Token = "0x400089F")]
		k_EBeginAuthSessionResultInvalidVersion,
		[Token(Token = "0x40008A0")]
		k_EBeginAuthSessionResultGameMismatch,
		[Token(Token = "0x40008A1")]
		k_EBeginAuthSessionResultExpiredTicket
	}
	[Token(Token = "0x200017B")]
	public enum EAuthSessionResponse
	{
		[Token(Token = "0x40008A3")]
		k_EAuthSessionResponseOK,
		[Token(Token = "0x40008A4")]
		k_EAuthSessionResponseUserNotConnectedToSteam,
		[Token(Token = "0x40008A5")]
		k_EAuthSessionResponseNoLicenseOrExpired,
		[Token(Token = "0x40008A6")]
		k_EAuthSessionResponseVACBanned,
		[Token(Token = "0x40008A7")]
		k_EAuthSessionResponseLoggedInElseWhere,
		[Token(Token = "0x40008A8")]
		k_EAuthSessionResponseVACCheckTimedOut,
		[Token(Token = "0x40008A9")]
		k_EAuthSessionResponseAuthTicketCanceled,
		[Token(Token = "0x40008AA")]
		k_EAuthSessionResponseAuthTicketInvalidAlreadyUsed,
		[Token(Token = "0x40008AB")]
		k_EAuthSessionResponseAuthTicketInvalid,
		[Token(Token = "0x40008AC")]
		k_EAuthSessionResponsePublisherIssuedBan
	}
	[Token(Token = "0x200017C")]
	public enum EUserHasLicenseForAppResult
	{
		[Token(Token = "0x40008AE")]
		k_EUserHasLicenseResultHasLicense,
		[Token(Token = "0x40008AF")]
		k_EUserHasLicenseResultDoesNotHaveLicense,
		[Token(Token = "0x40008B0")]
		k_EUserHasLicenseResultNoAuth
	}
	[Token(Token = "0x200017D")]
	public enum EAccountType
	{
		[Token(Token = "0x40008B2")]
		k_EAccountTypeInvalid,
		[Token(Token = "0x40008B3")]
		k_EAccountTypeIndividual,
		[Token(Token = "0x40008B4")]
		k_EAccountTypeMultiseat,
		[Token(Token = "0x40008B5")]
		k_EAccountTypeGameServer,
		[Token(Token = "0x40008B6")]
		k_EAccountTypeAnonGameServer,
		[Token(Token = "0x40008B7")]
		k_EAccountTypePending,
		[Token(Token = "0x40008B8")]
		k_EAccountTypeContentServer,
		[Token(Token = "0x40008B9")]
		k_EAccountTypeClan,
		[Token(Token = "0x40008BA")]
		k_EAccountTypeChat,
		[Token(Token = "0x40008BB")]
		k_EAccountTypeConsoleUser,
		[Token(Token = "0x40008BC")]
		k_EAccountTypeAnonUser,
		[Token(Token = "0x40008BD")]
		k_EAccountTypeMax
	}
	[Token(Token = "0x200017E")]
	public enum EAppReleaseState
	{
		[Token(Token = "0x40008BF")]
		k_EAppReleaseState_Unknown,
		[Token(Token = "0x40008C0")]
		k_EAppReleaseState_Unavailable,
		[Token(Token = "0x40008C1")]
		k_EAppReleaseState_Prerelease,
		[Token(Token = "0x40008C2")]
		k_EAppReleaseState_PreloadOnly,
		[Token(Token = "0x40008C3")]
		k_EAppReleaseState_Released
	}
	[Token(Token = "0x200017F")]
	[Flags]
	public enum EAppOwnershipFlags
	{
		[Token(Token = "0x40008C5")]
		k_EAppOwnershipFlags_None = 0,
		[Token(Token = "0x40008C6")]
		k_EAppOwnershipFlags_OwnsLicense = 1,
		[Token(Token = "0x40008C7")]
		k_EAppOwnershipFlags_FreeLicense = 2,
		[Token(Token = "0x40008C8")]
		k_EAppOwnershipFlags_RegionRestricted = 4,
		[Token(Token = "0x40008C9")]
		k_EAppOwnershipFlags_LowViolence = 8,
		[Token(Token = "0x40008CA")]
		k_EAppOwnershipFlags_InvalidPlatform = 0x10,
		[Token(Token = "0x40008CB")]
		k_EAppOwnershipFlags_SharedLicense = 0x20,
		[Token(Token = "0x40008CC")]
		k_EAppOwnershipFlags_FreeWeekend = 0x40,
		[Token(Token = "0x40008CD")]
		k_EAppOwnershipFlags_RetailLicense = 0x80,
		[Token(Token = "0x40008CE")]
		k_EAppOwnershipFlags_LicenseLocked = 0x100,
		[Token(Token = "0x40008CF")]
		k_EAppOwnershipFlags_LicensePending = 0x200,
		[Token(Token = "0x40008D0")]
		k_EAppOwnershipFlags_LicenseExpired = 0x400,
		[Token(Token = "0x40008D1")]
		k_EAppOwnershipFlags_LicensePermanent = 0x800,
		[Token(Token = "0x40008D2")]
		k_EAppOwnershipFlags_LicenseRecurring = 0x1000,
		[Token(Token = "0x40008D3")]
		k_EAppOwnershipFlags_LicenseCanceled = 0x2000,
		[Token(Token = "0x40008D4")]
		k_EAppOwnershipFlags_AutoGrant = 0x4000
	}
	[Token(Token = "0x2000180")]
	[Flags]
	public enum EAppType
	{
		[Token(Token = "0x40008D6")]
		k_EAppType_Invalid = 0,
		[Token(Token = "0x40008D7")]
		k_EAppType_Game = 1,
		[Token(Token = "0x40008D8")]
		k_EAppType_Application = 2,
		[Token(Token = "0x40008D9")]
		k_EAppType_Tool = 4,
		[Token(Token = "0x40008DA")]
		k_EAppType_Demo = 8,
		[Token(Token = "0x40008DB")]
		k_EAppType_Media_DEPRECATED = 0x10,
		[Token(Token = "0x40008DC")]
		k_EAppType_DLC = 0x20,
		[Token(Token = "0x40008DD")]
		k_EAppType_Guide = 0x40,
		[Token(Token = "0x40008DE")]
		k_EAppType_Driver = 0x80,
		[Token(Token = "0x40008DF")]
		k_EAppType_Config = 0x100,
		[Token(Token = "0x40008E0")]
		k_EAppType_Hardware = 0x200,
		[Token(Token = "0x40008E1")]
		k_EAppType_Video = 0x800,
		[Token(Token = "0x40008E2")]
		k_EAppType_Plugin = 0x1000,
		[Token(Token = "0x40008E3")]
		k_EAppType_Music = 0x2000,
		[Token(Token = "0x40008E4")]
		k_EAppType_Shortcut = 0x40000000,
		[Token(Token = "0x40008E5")]
		k_EAppType_DepotOnly = -2147483647
	}
	[Token(Token = "0x2000181")]
	public enum ESteamUserStatType
	{
		[Token(Token = "0x40008E7")]
		k_ESteamUserStatTypeINVALID,
		[Token(Token = "0x40008E8")]
		k_ESteamUserStatTypeINT,
		[Token(Token = "0x40008E9")]
		k_ESteamUserStatTypeFLOAT,
		[Token(Token = "0x40008EA")]
		k_ESteamUserStatTypeAVGRATE,
		[Token(Token = "0x40008EB")]
		k_ESteamUserStatTypeACHIEVEMENTS,
		[Token(Token = "0x40008EC")]
		k_ESteamUserStatTypeGROUPACHIEVEMENTS,
		[Token(Token = "0x40008ED")]
		k_ESteamUserStatTypeMAX
	}
	[Token(Token = "0x2000182")]
	public enum EChatEntryType
	{
		[Token(Token = "0x40008EF")]
		k_EChatEntryTypeInvalid = 0,
		[Token(Token = "0x40008F0")]
		k_EChatEntryTypeChatMsg = 1,
		[Token(Token = "0x40008F1")]
		k_EChatEntryTypeTyping = 2,
		[Token(Token = "0x40008F2")]
		k_EChatEntryTypeInviteGame = 3,
		[Token(Token = "0x40008F3")]
		k_EChatEntryTypeEmote = 4,
		[Token(Token = "0x40008F4")]
		k_EChatEntryTypeLeftConversation = 6,
		[Token(Token = "0x40008F5")]
		k_EChatEntryTypeEntered = 7,
		[Token(Token = "0x40008F6")]
		k_EChatEntryTypeWasKicked = 8,
		[Token(Token = "0x40008F7")]
		k_EChatEntryTypeWasBanned = 9,
		[Token(Token = "0x40008F8")]
		k_EChatEntryTypeDisconnected = 10,
		[Token(Token = "0x40008F9")]
		k_EChatEntryTypeHistoricalChat = 11,
		[Token(Token = "0x40008FA")]
		k_EChatEntryTypeReserved1 = 12,
		[Token(Token = "0x40008FB")]
		k_EChatEntryTypeReserved2 = 13,
		[Token(Token = "0x40008FC")]
		k_EChatEntryTypeLinkBlocked = 14
	}
	[Token(Token = "0x2000183")]
	public enum EChatRoomEnterResponse
	{
		[Token(Token = "0x40008FE")]
		k_EChatRoomEnterResponseSuccess = 1,
		[Token(Token = "0x40008FF")]
		k_EChatRoomEnterResponseDoesntExist,
		[Token(Token = "0x4000900")]
		k_EChatRoomEnterResponseNotAllowed,
		[Token(Token = "0x4000901")]
		k_EChatRoomEnterResponseFull,
		[Token(Token = "0x4000902")]
		k_EChatRoomEnterResponseError,
		[Token(Token = "0x4000903")]
		k_EChatRoomEnterResponseBanned,
		[Token(Token = "0x4000904")]
		k_EChatRoomEnterResponseLimited,
		[Token(Token = "0x4000905")]
		k_EChatRoomEnterResponseClanDisabled,
		[Token(Token = "0x4000906")]
		k_EChatRoomEnterResponseCommunityBan,
		[Token(Token = "0x4000907")]
		k_EChatRoomEnterResponseMemberBlockedYou,
		[Token(Token = "0x4000908")]
		k_EChatRoomEnterResponseYouBlockedMember
	}
	[Token(Token = "0x2000184")]
	[Flags]
	public enum EChatSteamIDInstanceFlags
	{
		[Token(Token = "0x400090A")]
		k_EChatAccountInstanceMask = 0xFFF,
		[Token(Token = "0x400090B")]
		k_EChatInstanceFlagClan = 0x80000,
		[Token(Token = "0x400090C")]
		k_EChatInstanceFlagLobby = 0x40000,
		[Token(Token = "0x400090D")]
		k_EChatInstanceFlagMMSLobby = 0x20000
	}
	[Token(Token = "0x2000185")]
	[Flags]
	public enum EMarketingMessageFlags
	{
		[Token(Token = "0x400090F")]
		k_EMarketingMessageFlagsNone = 0,
		[Token(Token = "0x4000910")]
		k_EMarketingMessageFlagsHighPriority = 1,
		[Token(Token = "0x4000911")]
		k_EMarketingMessageFlagsPlatformWindows = 2,
		[Token(Token = "0x4000912")]
		k_EMarketingMessageFlagsPlatformMac = 4,
		[Token(Token = "0x4000913")]
		k_EMarketingMessageFlagsPlatformLinux = 8,
		[Token(Token = "0x4000914")]
		k_EMarketingMessageFlagsPlatformRestrictions = 0xE
	}
	[Token(Token = "0x2000186")]
	public enum ENotificationPosition
	{
		[Token(Token = "0x4000916")]
		k_EPositionTopLeft,
		[Token(Token = "0x4000917")]
		k_EPositionTopRight,
		[Token(Token = "0x4000918")]
		k_EPositionBottomLeft,
		[Token(Token = "0x4000919")]
		k_EPositionBottomRight
	}
	[Token(Token = "0x2000187")]
	public enum EBroadcastUploadResult
	{
		[Token(Token = "0x400091B")]
		k_EBroadcastUploadResultNone,
		[Token(Token = "0x400091C")]
		k_EBroadcastUploadResultOK,
		[Token(Token = "0x400091D")]
		k_EBroadcastUploadResultInitFailed,
		[Token(Token = "0x400091E")]
		k_EBroadcastUploadResultFrameFailed,
		[Token(Token = "0x400091F")]
		k_EBroadcastUploadResultTimeout,
		[Token(Token = "0x4000920")]
		k_EBroadcastUploadResultBandwidthExceeded,
		[Token(Token = "0x4000921")]
		k_EBroadcastUploadResultLowFPS,
		[Token(Token = "0x4000922")]
		k_EBroadcastUploadResultMissingKeyFrames,
		[Token(Token = "0x4000923")]
		k_EBroadcastUploadResultNoConnection,
		[Token(Token = "0x4000924")]
		k_EBroadcastUploadResultRelayFailed,
		[Token(Token = "0x4000925")]
		k_EBroadcastUploadResultSettingsChanged,
		[Token(Token = "0x4000926")]
		k_EBroadcastUploadResultMissingAudio,
		[Token(Token = "0x4000927")]
		k_EBroadcastUploadResultTooFarBehind
	}
	[Token(Token = "0x2000188")]
	public enum EHTTPMethod
	{
		[Token(Token = "0x4000929")]
		k_EHTTPMethodInvalid,
		[Token(Token = "0x400092A")]
		k_EHTTPMethodGET,
		[Token(Token = "0x400092B")]
		k_EHTTPMethodHEAD,
		[Token(Token = "0x400092C")]
		k_EHTTPMethodPOST,
		[Token(Token = "0x400092D")]
		k_EHTTPMethodPUT,
		[Token(Token = "0x400092E")]
		k_EHTTPMethodDELETE,
		[Token(Token = "0x400092F")]
		k_EHTTPMethodOPTIONS
	}
	[Token(Token = "0x2000189")]
	public enum EHTTPStatusCode
	{
		[Token(Token = "0x4000931")]
		k_EHTTPStatusCodeInvalid = 0,
		[Token(Token = "0x4000932")]
		k_EHTTPStatusCode100Continue = 100,
		[Token(Token = "0x4000933")]
		k_EHTTPStatusCode101SwitchingProtocols = 101,
		[Token(Token = "0x4000934")]
		k_EHTTPStatusCode200OK = 200,
		[Token(Token = "0x4000935")]
		k_EHTTPStatusCode201Created = 201,
		[Token(Token = "0x4000936")]
		k_EHTTPStatusCode202Accepted = 202,
		[Token(Token = "0x4000937")]
		k_EHTTPStatusCode203NonAuthoritative = 203,
		[Token(Token = "0x4000938")]
		k_EHTTPStatusCode204NoContent = 204,
		[Token(Token = "0x4000939")]
		k_EHTTPStatusCode205ResetContent = 205,
		[Token(Token = "0x400093A")]
		k_EHTTPStatusCode206PartialContent = 206,
		[Token(Token = "0x400093B")]
		k_EHTTPStatusCode300MultipleChoices = 300,
		[Token(Token = "0x400093C")]
		k_EHTTPStatusCode301MovedPermanently = 301,
		[Token(Token = "0x400093D")]
		k_EHTTPStatusCode302Found = 302,
		[Token(Token = "0x400093E")]
		k_EHTTPStatusCode303SeeOther = 303,
		[Token(Token = "0x400093F")]
		k_EHTTPStatusCode304NotModified = 304,
		[Token(Token = "0x4000940")]
		k_EHTTPStatusCode305UseProxy = 305,
		[Token(Token = "0x4000941")]
		k_EHTTPStatusCode307TemporaryRedirect = 307,
		[Token(Token = "0x4000942")]
		k_EHTTPStatusCode400BadRequest = 400,
		[Token(Token = "0x4000943")]
		k_EHTTPStatusCode401Unauthorized = 401,
		[Token(Token = "0x4000944")]
		k_EHTTPStatusCode402PaymentRequired = 402,
		[Token(Token = "0x4000945")]
		k_EHTTPStatusCode403Forbidden = 403,
		[Token(Token = "0x4000946")]
		k_EHTTPStatusCode404NotFound = 404,
		[Token(Token = "0x4000947")]
		k_EHTTPStatusCode405MethodNotAllowed = 405,
		[Token(Token = "0x4000948")]
		k_EHTTPStatusCode406NotAcceptable = 406,
		[Token(Token = "0x4000949")]
		k_EHTTPStatusCode407ProxyAuthRequired = 407,
		[Token(Token = "0x400094A")]
		k_EHTTPStatusCode408RequestTimeout = 408,
		[Token(Token = "0x400094B")]
		k_EHTTPStatusCode409Conflict = 409,
		[Token(Token = "0x400094C")]
		k_EHTTPStatusCode410Gone = 410,
		[Token(Token = "0x400094D")]
		k_EHTTPStatusCode411LengthRequired = 411,
		[Token(Token = "0x400094E")]
		k_EHTTPStatusCode412PreconditionFailed = 412,
		[Token(Token = "0x400094F")]
		k_EHTTPStatusCode413RequestEntityTooLarge = 413,
		[Token(Token = "0x4000950")]
		k_EHTTPStatusCode414RequestURITooLong = 414,
		[Token(Token = "0x4000951")]
		k_EHTTPStatusCode415UnsupportedMediaType = 415,
		[Token(Token = "0x4000952")]
		k_EHTTPStatusCode416RequestedRangeNotSatisfiable = 416,
		[Token(Token = "0x4000953")]
		k_EHTTPStatusCode417ExpectationFailed = 417,
		[Token(Token = "0x4000954")]
		k_EHTTPStatusCode4xxUnknown = 418,
		[Token(Token = "0x4000955")]
		k_EHTTPStatusCode429TooManyRequests = 429,
		[Token(Token = "0x4000956")]
		k_EHTTPStatusCode500InternalServerError = 500,
		[Token(Token = "0x4000957")]
		k_EHTTPStatusCode501NotImplemented = 501,
		[Token(Token = "0x4000958")]
		k_EHTTPStatusCode502BadGateway = 502,
		[Token(Token = "0x4000959")]
		k_EHTTPStatusCode503ServiceUnavailable = 503,
		[Token(Token = "0x400095A")]
		k_EHTTPStatusCode504GatewayTimeout = 504,
		[Token(Token = "0x400095B")]
		k_EHTTPStatusCode505HTTPVersionNotSupported = 505,
		[Token(Token = "0x400095C")]
		k_EHTTPStatusCode5xxUnknown = 599
	}
	[Token(Token = "0x200018A")]
	public enum EUniverse
	{
		[Token(Token = "0x400095E")]
		k_EUniverseInvalid,
		[Token(Token = "0x400095F")]
		k_EUniversePublic,
		[Token(Token = "0x4000960")]
		k_EUniverseBeta,
		[Token(Token = "0x4000961")]
		k_EUniverseInternal,
		[Token(Token = "0x4000962")]
		k_EUniverseDev,
		[Token(Token = "0x4000963")]
		k_EUniverseMax
	}
	[Token(Token = "0x200018B")]
	public struct SteamControllerState_t
	{
		[Token(Token = "0x4000964")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint unPacketNum;

		[Token(Token = "0x4000965")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public ulong ulButtons;

		[Token(Token = "0x4000966")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public short sLeftPadX;

		[Token(Token = "0x4000967")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE")]
		public short sLeftPadY;

		[Token(Token = "0x4000968")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public short sRightPadX;

		[Token(Token = "0x4000969")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		public short sRightPadY;
	}
	[Token(Token = "0x200018C")]
	public struct FriendGameInfo_t
	{
		[Token(Token = "0x400096A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CGameID m_gameID;

		[Token(Token = "0x400096B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint m_unGameIP;

		[Token(Token = "0x400096C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public ushort m_usGamePort;

		[Token(Token = "0x400096D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE")]
		public ushort m_usQueryPort;

		[Token(Token = "0x400096E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public CSteamID m_steamIDLobby;
	}
	[Token(Token = "0x200018D")]
	public struct FriendSessionStateInfo_t
	{
		[Token(Token = "0x400096F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_uiOnlineSessionInstances;

		[Token(Token = "0x4000970")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public byte m_uiPublishedToFriendsSessionInstance;
	}
	[Token(Token = "0x200018E")]
	public struct SteamItemDetails_t
	{
		[Token(Token = "0x4000971")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SteamItemInstanceID_t m_itemId;

		[Token(Token = "0x4000972")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public SteamItemDef_t m_iDefinition;

		[Token(Token = "0x4000973")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public ushort m_unQuantity;

		[Token(Token = "0x4000974")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE")]
		public ushort m_unFlags;
	}
	[Token(Token = "0x200018F")]
	public struct P2PSessionState_t
	{
		[Token(Token = "0x4000975")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte m_bConnectionActive;

		[Token(Token = "0x4000976")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		public byte m_bConnecting;

		[Token(Token = "0x4000977")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		public byte m_eP2PSessionError;

		[Token(Token = "0x4000978")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3")]
		public byte m_bUsingRelay;

		[Token(Token = "0x4000979")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int m_nBytesQueuedForSend;

		[Token(Token = "0x400097A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_nPacketsQueuedForSend;

		[Token(Token = "0x400097B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_nRemoteIP;

		[Token(Token = "0x400097C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ushort m_nRemotePort;
	}
	[Token(Token = "0x2000190")]
	public struct SteamParamStringArray_t
	{
		[Token(Token = "0x400097D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr m_ppStrings;

		[Token(Token = "0x400097E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_nNumStrings;
	}
	[Token(Token = "0x2000191")]
	public struct SteamUGCDetails_t
	{
		[Token(Token = "0x400097F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x4000980")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EResult m_eResult;

		[Token(Token = "0x4000981")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public EWorkshopFileType m_eFileType;

		[Token(Token = "0x4000982")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AppId_t m_nCreatorAppID;

		[Token(Token = "0x4000983")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public AppId_t m_nConsumerAppID;

		[Token(Token = "0x4000984")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string m_rgchTitle;

		[Token(Token = "0x4000985")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string m_rgchDescription;

		[Token(Token = "0x4000986")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ulong m_ulSteamIDOwner;

		[Token(Token = "0x4000987")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public uint m_rtimeCreated;

		[Token(Token = "0x4000988")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public uint m_rtimeUpdated;

		[Token(Token = "0x4000989")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public uint m_rtimeAddedToUserList;

		[Token(Token = "0x400098A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public ERemoteStoragePublishedFileVisibility m_eVisibility;

		[Token(Token = "0x400098B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool m_bBanned;

		[Token(Token = "0x400098C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		public bool m_bAcceptedForUse;

		[Token(Token = "0x400098D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
		public bool m_bTagsTruncated;

		[Token(Token = "0x400098E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string m_rgchTags;

		[Token(Token = "0x400098F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public UGCHandle_t m_hFile;

		[Token(Token = "0x4000990")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public UGCHandle_t m_hPreviewFile;

		[Token(Token = "0x4000991")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public string m_pchFileName;

		[Token(Token = "0x4000992")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public int m_nFileSize;

		[Token(Token = "0x4000993")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public int m_nPreviewFileSize;

		[Token(Token = "0x4000994")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public string m_rgchURL;

		[Token(Token = "0x4000995")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public uint m_unVotesUp;

		[Token(Token = "0x4000996")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public uint m_unVotesDown;

		[Token(Token = "0x4000997")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float m_flScore;

		[Token(Token = "0x4000998")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public uint m_unNumChildren;
	}
	[Token(Token = "0x2000192")]
	public struct CallbackMsg_t
	{
		[Token(Token = "0x4000999")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int m_hSteamUser;

		[Token(Token = "0x400099A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int m_iCallback;

		[Token(Token = "0x400099B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public IntPtr m_pubParam;

		[Token(Token = "0x400099C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_cubParam;
	}
	[Token(Token = "0x2000193")]
	public struct LeaderboardEntry_t
	{
		[Token(Token = "0x400099D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDUser;

		[Token(Token = "0x400099E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_nGlobalRank;

		[Token(Token = "0x400099F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int m_nScore;

		[Token(Token = "0x40009A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_cDetails;

		[Token(Token = "0x40009A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UGCHandle_t m_hUGC;
	}
	[Token(Token = "0x2000194")]
	public struct MatchMakingKeyValuePair_t
	{
		[Token(Token = "0x40009A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string m_szKey;

		[Token(Token = "0x40009A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string m_szValue;

		[Token(Token = "0x60009A0")]
		[Address(RVA = "0xC27A08", Offset = "0xC27A08", VA = "0xC27A08")]
		private MatchMakingKeyValuePair_t(string strKey, string strValue)
		{
		}
	}
	[Token(Token = "0x2000195")]
	public static class CallbackDispatcher
	{
		[Token(Token = "0x60009A1")]
		[Address(RVA = "0x13ECE34", Offset = "0x13ECE34", VA = "0x13ECE34")]
		public static void ExceptionHandler(Exception e)
		{
		}
	}
	[Token(Token = "0x2000196")]
	public sealed class Callback<T>
	{
		[Token(Token = "0x20002D9")]
		public delegate void DispatchDelegate(T param);

		[Token(Token = "0x40009A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private CCallbackBaseVTable VTable;

		[Token(Token = "0x40009A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IntPtr m_pVTable;

		[Token(Token = "0x40009A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private CCallbackBase m_CCallbackBase;

		[Token(Token = "0x40009A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private GCHandle m_pCCallbackBase;

		[Token(Token = "0x40009A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool m_bGameServer;

		[Token(Token = "0x40009AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly int m_size;

		[Token(Token = "0x14000004")]
		private event DispatchDelegate m_Func
		{
			[Token(Token = "0x60009A2")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C5A0", Offset = "0xB4C5A0")]
			add
			{
			}
			[Token(Token = "0x60009A3")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C5B0", Offset = "0xB4C5B0")]
			remove
			{
			}
		}

		[Token(Token = "0x60009A4")]
		public static Callback<T> Create(DispatchDelegate func)
		{
			return null;
		}

		[Token(Token = "0x60009A5")]
		public static Callback<T> CreateGameServer(DispatchDelegate func)
		{
			return null;
		}

		[Token(Token = "0x60009A6")]
		public Callback(DispatchDelegate func, bool bGameServer = false)
		{
		}

		[Token(Token = "0x60009A7")]
		~Callback()
		{
		}

		[Token(Token = "0x60009A8")]
		public void Register(DispatchDelegate func)
		{
		}

		[Token(Token = "0x60009A9")]
		public void Unregister()
		{
		}

		[Token(Token = "0x60009AA")]
		public void SetGameserverFlag()
		{
		}

		[Token(Token = "0x60009AB")]
		private void OnRunCallback(IntPtr thisptr, IntPtr pvParam)
		{
		}

		[Token(Token = "0x60009AC")]
		private void OnRunCallResult(IntPtr thisptr, IntPtr pvParam, bool bFailed, ulong hSteamAPICall)
		{
		}

		[Token(Token = "0x60009AD")]
		private int OnGetCallbackSizeBytes(IntPtr thisptr)
		{
			return default(int);
		}

		[Token(Token = "0x60009AE")]
		private void BuildCCallbackBase()
		{
		}
	}
	[Token(Token = "0x2000197")]
	public sealed class CallResult<T>
	{
		[Token(Token = "0x20002DA")]
		public delegate void APIDispatchDelegate(T param, bool bIOFailure);

		[Token(Token = "0x40009AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private CCallbackBaseVTable VTable;

		[Token(Token = "0x40009AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IntPtr m_pVTable;

		[Token(Token = "0x40009AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private CCallbackBase m_CCallbackBase;

		[Token(Token = "0x40009AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private GCHandle m_pCCallbackBase;

		[Token(Token = "0x40009B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private SteamAPICall_t m_hAPICall;

		[Token(Token = "0x40009B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly int m_size;

		[Token(Token = "0x1700007A")]
		public SteamAPICall_t Handle
		{
			[Token(Token = "0x60009B1")]
			get
			{
				return default(SteamAPICall_t);
			}
		}

		[Token(Token = "0x14000005")]
		private event APIDispatchDelegate m_Func
		{
			[Token(Token = "0x60009AF")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C5C0", Offset = "0xB4C5C0")]
			add
			{
			}
			[Token(Token = "0x60009B0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C5D0", Offset = "0xB4C5D0")]
			remove
			{
			}
		}

		[Token(Token = "0x60009B2")]
		public static CallResult<T> Create([Optional] APIDispatchDelegate func)
		{
			return null;
		}

		[Token(Token = "0x60009B3")]
		public CallResult([Optional] APIDispatchDelegate func)
		{
		}

		[Token(Token = "0x60009B4")]
		~CallResult()
		{
		}

		[Token(Token = "0x60009B5")]
		public void Set(SteamAPICall_t hAPICall, [Optional] APIDispatchDelegate func)
		{
		}

		[Token(Token = "0x60009B6")]
		public bool IsActive()
		{
			return default(bool);
		}

		[Token(Token = "0x60009B7")]
		public void Cancel()
		{
		}

		[Token(Token = "0x60009B8")]
		public void SetGameserverFlag()
		{
		}

		[Token(Token = "0x60009B9")]
		private void OnRunCallback(IntPtr thisptr, IntPtr pvParam)
		{
		}

		[Token(Token = "0x60009BA")]
		private void OnRunCallResult(IntPtr thisptr, IntPtr pvParam, bool bFailed, ulong hSteamAPICall)
		{
		}

		[Token(Token = "0x60009BB")]
		private int OnGetCallbackSizeBytes(IntPtr thisptr)
		{
			return default(int);
		}

		[Token(Token = "0x60009BC")]
		private void BuildCCallbackBase()
		{
		}
	}
	[StructLayout(0)]
	[Token(Token = "0x2000198")]
	internal class CCallbackBase
	{
		[Token(Token = "0x40009B2")]
		public const byte k_ECallbackFlagsRegistered = 1;

		[Token(Token = "0x40009B3")]
		public const byte k_ECallbackFlagsGameServer = 2;

		[Token(Token = "0x40009B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public IntPtr m_vfptr;

		[Token(Token = "0x40009B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public byte m_nCallbackFlags;

		[Token(Token = "0x40009B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int m_iCallback;

		[Token(Token = "0x60009BD")]
		[Address(RVA = "0x1B2F918", Offset = "0x1B2F918", VA = "0x1B2F918")]
		public CCallbackBase()
		{
		}
	}
	[StructLayout(0)]
	[Token(Token = "0x2000199")]
	internal class CCallbackBaseVTable
	{
		[Token(Token = "0x20002DB")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0xB49AE4", Offset = "0xB49AE4")]
		public delegate void RunCBDel(IntPtr thisptr, IntPtr pvParam);

		[Token(Token = "0x20002DC")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0xB49AF8", Offset = "0xB49AF8")]
		public delegate void RunCRDel(IntPtr thisptr, IntPtr pvParam, bool bIOFailure, ulong hSteamAPICall);

		[Token(Token = "0x20002DD")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0xB49B0C", Offset = "0xB49B0C")]
		public delegate int GetCallbackSizeBytesDel(IntPtr thisptr);

		[Token(Token = "0x40009B7")]
		private const CallingConvention cc = CallingConvention.Cdecl;

		[NonSerialized]
		[Token(Token = "0x40009B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public RunCBDel m_RunCallback;

		[NonSerialized]
		[Token(Token = "0x40009B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RunCRDel m_RunCallResult;

		[NonSerialized]
		[Token(Token = "0x40009BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GetCallbackSizeBytesDel m_GetCallbackSizeBytes;

		[Token(Token = "0x60009BE")]
		[Address(RVA = "0x1B2F920", Offset = "0x1B2F920", VA = "0x1B2F920")]
		public CCallbackBaseVTable()
		{
		}
	}
	[Token(Token = "0x200019A")]
	internal class CallbackIdentities
	{
		[Token(Token = "0x60009BF")]
		[Address(RVA = "0x13ECEC0", Offset = "0x13ECEC0", VA = "0x13ECEC0")]
		public static int GetCallbackIdentity(Type callbackStruct)
		{
			return default(int);
		}

		[Token(Token = "0x60009C0")]
		[Address(RVA = "0x13ED0DC", Offset = "0x13ED0DC", VA = "0x13ED0DC")]
		public CallbackIdentities()
		{
		}
	}
	[Token(Token = "0x200019B")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB49468", Offset = "0xB49468")]
	internal class CallbackIdentityAttribute : Attribute
	{
		[Token(Token = "0x40009BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B148", Offset = "0xB4B148")]
		private int <Identity>k__BackingField;

		[Token(Token = "0x1700007B")]
		public int Identity
		{
			[Token(Token = "0x60009C1")]
			[Address(RVA = "0x13ED0D4", Offset = "0x13ED0D4", VA = "0x13ED0D4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C5E0", Offset = "0xB4C5E0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60009C2")]
			[Address(RVA = "0x13ED0E4", Offset = "0x13ED0E4", VA = "0x13ED0E4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C5F0", Offset = "0xB4C5F0")]
			set
			{
			}
		}

		[Token(Token = "0x60009C3")]
		[Address(RVA = "0x13ED0EC", Offset = "0x13ED0EC", VA = "0x13ED0EC")]
		public CallbackIdentityAttribute(int callbackNum)
		{
		}
	}
	[Token(Token = "0x200019C")]
	public class InteropHelp
	{
		[Token(Token = "0x20002DE")]
		public class UTF8StringHandle : SafeHandleZeroOrMinusOneIsInvalid
		{
			[Token(Token = "0x600154E")]
			[Address(RVA = "0x13ED880", Offset = "0x13ED880", VA = "0x13ED880")]
			public UTF8StringHandle(string str)
			{
			}

			[Token(Token = "0x600154F")]
			[Address(RVA = "0x13F7BD4", Offset = "0x13F7BD4", VA = "0x13F7BD4", Slot = "7")]
			protected override bool ReleaseHandle()
			{
				return default(bool);
			}
		}

		[Token(Token = "0x20002DF")]
		public class SteamParamStringArray
		{
			[Token(Token = "0x4000E76")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private IntPtr[] m_Strings;

			[Token(Token = "0x4000E77")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private IntPtr m_ptrStrings;

			[Token(Token = "0x4000E78")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private IntPtr m_pSteamParamStringArray;

			[Token(Token = "0x6001550")]
			[Address(RVA = "0x13F7498", Offset = "0x13F7498", VA = "0x13F7498")]
			public SteamParamStringArray(IList<string> strings)
			{
			}

			[Token(Token = "0x6001551")]
			[Address(RVA = "0x13F79F0", Offset = "0x13F79F0", VA = "0x13F79F0", Slot = "1")]
			~SteamParamStringArray()
			{
			}

			[Token(Token = "0x6001552")]
			[Address(RVA = "0x13F7BAC", Offset = "0x13F7BAC", VA = "0x13F7BAC")]
			public static implicit operator IntPtr(SteamParamStringArray that)
			{
				return default(IntPtr);
			}
		}

		[Token(Token = "0x60009C4")]
		[Address(RVA = "0x13ED80C", Offset = "0x13ED80C", VA = "0x13ED80C")]
		public static void TestIfPlatformSupported()
		{
		}

		[Token(Token = "0x60009C5")]
		[Address(RVA = "0x13F7308", Offset = "0x13F7308", VA = "0x13F7308")]
		public static void TestIfAvailableClient()
		{
		}

		[Token(Token = "0x60009C6")]
		[Address(RVA = "0x13F73CC", Offset = "0x13F73CC", VA = "0x13F73CC")]
		public static void TestIfAvailableGameServer()
		{
		}

		[Token(Token = "0x60009C7")]
		[Address(RVA = "0x13F0850", Offset = "0x13F0850", VA = "0x13F0850")]
		public static string PtrToStringUTF8(IntPtr nativeUtf8)
		{
			return null;
		}

		[Token(Token = "0x60009C8")]
		[Address(RVA = "0x13F7490", Offset = "0x13F7490", VA = "0x13F7490")]
		public InteropHelp()
		{
		}
	}
	[Token(Token = "0x200019D")]
	public class MMKVPMarshaller
	{
		[Token(Token = "0x40009BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IntPtr m_pNativeArray;

		[Token(Token = "0x40009BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private IntPtr m_pArrayEntries;

		[Token(Token = "0x60009C9")]
		[Address(RVA = "0x13F7C5C", Offset = "0x13F7C5C", VA = "0x13F7C5C")]
		public MMKVPMarshaller(MatchMakingKeyValuePair_t[] filters)
		{
		}

		[Token(Token = "0x60009CA")]
		[Address(RVA = "0x13F7E6C", Offset = "0x13F7E6C", VA = "0x13F7E6C", Slot = "1")]
		~MMKVPMarshaller()
		{
		}

		[Token(Token = "0x60009CB")]
		[Address(RVA = "0x13F7F94", Offset = "0x13F7F94", VA = "0x13F7F94")]
		public static implicit operator IntPtr(MMKVPMarshaller that)
		{
			return default(IntPtr);
		}
	}
	[Token(Token = "0x200019E")]
	public class DllCheck
	{
		[PreserveSig]
		[Token(Token = "0x60009CC")]
		[Address(RVA = "0x13ED474", Offset = "0x13ED474", VA = "0x13ED474")]
		public static extern IntPtr GetModuleHandle(string lpModuleName);

		[PreserveSig]
		[Token(Token = "0x60009CD")]
		[Address(RVA = "0x13ED528", Offset = "0x13ED528", VA = "0x13ED528")]
		private static extern int GetModuleFileName(IntPtr hModule, StringBuilder strFullPath, int nSize);

		[Token(Token = "0x60009CE")]
		[Address(RVA = "0x13ED604", Offset = "0x13ED604", VA = "0x13ED604")]
		public static bool Test()
		{
			return default(bool);
		}

		[Token(Token = "0x60009CF")]
		[Address(RVA = "0x13ED60C", Offset = "0x13ED60C", VA = "0x13ED60C")]
		private static bool CheckSteamAPIDLL()
		{
			return default(bool);
		}

		[Token(Token = "0x60009D0")]
		[Address(RVA = "0x13ED614", Offset = "0x13ED614", VA = "0x13ED614")]
		public DllCheck()
		{
		}
	}
	[Token(Token = "0x200019F")]
	public class ISteamMatchmakingServerListResponse
	{
		[Token(Token = "0x20002E0")]
		public delegate void ServerResponded(HServerListRequest hRequest, int iServer);

		[Token(Token = "0x20002E1")]
		public delegate void ServerFailedToRespond(HServerListRequest hRequest, int iServer);

		[Token(Token = "0x20002E2")]
		public delegate void RefreshComplete(HServerListRequest hRequest, EMatchMakingServerResponse response);

		[Token(Token = "0x20002E3")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0xB49B20", Offset = "0xB49B20")]
		private delegate void InternalServerResponded(IntPtr thisptr, HServerListRequest hRequest, int iServer);

		[Token(Token = "0x20002E4")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0xB49B34", Offset = "0xB49B34")]
		private delegate void InternalServerFailedToRespond(IntPtr thisptr, HServerListRequest hRequest, int iServer);

		[Token(Token = "0x20002E5")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0xB49B48", Offset = "0xB49B48")]
		private delegate void InternalRefreshComplete(IntPtr thisptr, HServerListRequest hRequest, EMatchMakingServerResponse response);

		[StructLayout(0)]
		[Token(Token = "0x20002E6")]
		private class VTable
		{
			[NonSerialized]
			[Token(Token = "0x4000E79")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public InternalServerResponded m_VTServerResponded;

			[NonSerialized]
			[Token(Token = "0x4000E7A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public InternalServerFailedToRespond m_VTServerFailedToRespond;

			[NonSerialized]
			[Token(Token = "0x4000E7B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public InternalRefreshComplete m_VTRefreshComplete;

			[Token(Token = "0x600156B")]
			[Address(RVA = "0x13F50DC", Offset = "0x13F50DC", VA = "0x13F50DC")]
			public VTable()
			{
			}
		}

		[Token(Token = "0x40009BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private VTable m_VTable;

		[Token(Token = "0x40009BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private IntPtr m_pVTable;

		[Token(Token = "0x40009C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GCHandle m_pGCHandle;

		[Token(Token = "0x40009C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ServerResponded m_ServerResponded;

		[Token(Token = "0x40009C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private ServerFailedToRespond m_ServerFailedToRespond;

		[Token(Token = "0x40009C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private RefreshComplete m_RefreshComplete;

		[Token(Token = "0x60009D1")]
		[Address(RVA = "0x13F4E90", Offset = "0x13F4E90", VA = "0x13F4E90")]
		public ISteamMatchmakingServerListResponse(ServerResponded onServerResponded, ServerFailedToRespond onServerFailedToRespond, RefreshComplete onRefreshComplete)
		{
		}

		[Token(Token = "0x60009D2")]
		[Address(RVA = "0x13F5114", Offset = "0x13F5114", VA = "0x13F5114", Slot = "1")]
		~ISteamMatchmakingServerListResponse()
		{
		}

		[Token(Token = "0x60009D3")]
		[Address(RVA = "0x13F5218", Offset = "0x13F5218", VA = "0x13F5218")]
		private void InternalOnServerResponded(IntPtr thisptr, HServerListRequest hRequest, int iServer)
		{
		}

		[Token(Token = "0x60009D4")]
		[Address(RVA = "0x13F56C4", Offset = "0x13F56C4", VA = "0x13F56C4")]
		private void InternalOnServerFailedToRespond(IntPtr thisptr, HServerListRequest hRequest, int iServer)
		{
		}

		[Token(Token = "0x60009D5")]
		[Address(RVA = "0x13F5B70", Offset = "0x13F5B70", VA = "0x13F5B70")]
		private void InternalOnRefreshComplete(IntPtr thisptr, HServerListRequest hRequest, EMatchMakingServerResponse response)
		{
		}

		[Token(Token = "0x60009D6")]
		[Address(RVA = "0x13F601C", Offset = "0x13F601C", VA = "0x13F601C")]
		public static explicit operator IntPtr(ISteamMatchmakingServerListResponse that)
		{
			return default(IntPtr);
		}
	}
	[Token(Token = "0x20001A0")]
	public class ISteamMatchmakingPingResponse
	{
		[Token(Token = "0x20002E7")]
		public delegate void ServerResponded(gameserveritem_t server);

		[Token(Token = "0x20002E8")]
		public delegate void ServerFailedToRespond();

		[Token(Token = "0x20002E9")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0xB49B5C", Offset = "0xB49B5C")]
		private delegate void InternalServerResponded(IntPtr thisptr, gameserveritem_t server);

		[Token(Token = "0x20002EA")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0xB49B70", Offset = "0xB49B70")]
		private delegate void InternalServerFailedToRespond(IntPtr thisptr);

		[StructLayout(0)]
		[Token(Token = "0x20002EB")]
		private class VTable
		{
			[NonSerialized]
			[Token(Token = "0x4000E7C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public InternalServerResponded m_VTServerResponded;

			[NonSerialized]
			[Token(Token = "0x4000E7D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public InternalServerFailedToRespond m_VTServerFailedToRespond;

			[Token(Token = "0x600157C")]
			[Address(RVA = "0x13EED10", Offset = "0x13EED10", VA = "0x13EED10")]
			public VTable()
			{
			}
		}

		[Token(Token = "0x40009C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private VTable m_VTable;

		[Token(Token = "0x40009C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private IntPtr m_pVTable;

		[Token(Token = "0x40009C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GCHandle m_pGCHandle;

		[Token(Token = "0x40009C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ServerResponded m_ServerResponded;

		[Token(Token = "0x40009C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private ServerFailedToRespond m_ServerFailedToRespond;

		[Token(Token = "0x60009D7")]
		[Address(RVA = "0x13EEB0C", Offset = "0x13EEB0C", VA = "0x13EEB0C")]
		public ISteamMatchmakingPingResponse(ServerResponded onServerResponded, ServerFailedToRespond onServerFailedToRespond)
		{
		}

		[Token(Token = "0x60009D8")]
		[Address(RVA = "0x13EED38", Offset = "0x13EED38", VA = "0x13EED38", Slot = "1")]
		~ISteamMatchmakingPingResponse()
		{
		}

		[Token(Token = "0x60009D9")]
		[Address(RVA = "0x13EEE3C", Offset = "0x13EEE3C", VA = "0x13EEE3C")]
		private void InternalOnServerResponded(IntPtr thisptr, gameserveritem_t server)
		{
		}

		[Token(Token = "0x60009DA")]
		[Address(RVA = "0x13EF5A4", Offset = "0x13EF5A4", VA = "0x13EF5A4")]
		private void InternalOnServerFailedToRespond(IntPtr thisptr)
		{
		}

		[Token(Token = "0x60009DB")]
		[Address(RVA = "0x13EF9D0", Offset = "0x13EF9D0", VA = "0x13EF9D0")]
		public static explicit operator IntPtr(ISteamMatchmakingPingResponse that)
		{
			return default(IntPtr);
		}
	}
	[Token(Token = "0x20001A1")]
	public class ISteamMatchmakingPlayersResponse
	{
		[Token(Token = "0x20002EC")]
		public delegate void AddPlayerToList(string pchName, int nScore, float flTimePlayed);

		[Token(Token = "0x20002ED")]
		public delegate void PlayersFailedToRespond();

		[Token(Token = "0x20002EE")]
		public delegate void PlayersRefreshComplete();

		[Token(Token = "0x20002EF")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0xB49B84", Offset = "0xB49B84")]
		public delegate void InternalAddPlayerToList(IntPtr thisptr, IntPtr pchName, int nScore, float flTimePlayed);

		[Token(Token = "0x20002F0")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0xB49B98", Offset = "0xB49B98")]
		public delegate void InternalPlayersFailedToRespond(IntPtr thisptr);

		[Token(Token = "0x20002F1")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0xB49BAC", Offset = "0xB49BAC")]
		public delegate void InternalPlayersRefreshComplete(IntPtr thisptr);

		[StructLayout(0)]
		[Token(Token = "0x20002F2")]
		private class VTable
		{
			[NonSerialized]
			[Token(Token = "0x4000E7E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public InternalAddPlayerToList m_VTAddPlayerToList;

			[NonSerialized]
			[Token(Token = "0x4000E7F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public InternalPlayersFailedToRespond m_VTPlayersFailedToRespond;

			[NonSerialized]
			[Token(Token = "0x4000E80")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public InternalPlayersRefreshComplete m_VTPlayersRefreshComplete;

			[Token(Token = "0x6001595")]
			[Address(RVA = "0x13F06B8", Offset = "0x13F06B8", VA = "0x13F06B8")]
			public VTable()
			{
			}
		}

		[Token(Token = "0x40009C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private VTable m_VTable;

		[Token(Token = "0x40009CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private IntPtr m_pVTable;

		[Token(Token = "0x40009CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GCHandle m_pGCHandle;

		[Token(Token = "0x40009CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private AddPlayerToList m_AddPlayerToList;

		[Token(Token = "0x40009CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private PlayersFailedToRespond m_PlayersFailedToRespond;

		[Token(Token = "0x40009CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private PlayersRefreshComplete m_PlayersRefreshComplete;

		[Token(Token = "0x60009DC")]
		[Address(RVA = "0x13F046C", Offset = "0x13F046C", VA = "0x13F046C")]
		public ISteamMatchmakingPlayersResponse(AddPlayerToList onAddPlayerToList, PlayersFailedToRespond onPlayersFailedToRespond, PlayersRefreshComplete onPlayersRefreshComplete)
		{
		}

		[Token(Token = "0x60009DD")]
		[Address(RVA = "0x13F06F0", Offset = "0x13F06F0", VA = "0x13F06F0", Slot = "1")]
		~ISteamMatchmakingPlayersResponse()
		{
		}

		[Token(Token = "0x60009DE")]
		[Address(RVA = "0x13F07F4", Offset = "0x13F07F4", VA = "0x13F07F4")]
		private void InternalOnAddPlayerToList(IntPtr thisptr, IntPtr pchName, int nScore, float flTimePlayed)
		{
		}

		[Token(Token = "0x60009DF")]
		[Address(RVA = "0x13F1148", Offset = "0x13F1148", VA = "0x13F1148")]
		private void InternalOnPlayersFailedToRespond(IntPtr thisptr)
		{
		}

		[Token(Token = "0x60009E0")]
		[Address(RVA = "0x13F1574", Offset = "0x13F1574", VA = "0x13F1574")]
		private void InternalOnPlayersRefreshComplete(IntPtr thisptr)
		{
		}

		[Token(Token = "0x60009E1")]
		[Address(RVA = "0x13F19A0", Offset = "0x13F19A0", VA = "0x13F19A0")]
		public static explicit operator IntPtr(ISteamMatchmakingPlayersResponse that)
		{
			return default(IntPtr);
		}
	}
	[Token(Token = "0x20001A2")]
	public class ISteamMatchmakingRulesResponse
	{
		[Token(Token = "0x20002F3")]
		public delegate void RulesResponded(string pchRule, string pchValue);

		[Token(Token = "0x20002F4")]
		public delegate void RulesFailedToRespond();

		[Token(Token = "0x20002F5")]
		public delegate void RulesRefreshComplete();

		[Token(Token = "0x20002F6")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0xB49BC0", Offset = "0xB49BC0")]
		public delegate void InternalRulesResponded(IntPtr thisptr, IntPtr pchRule, IntPtr pchValue);

		[Token(Token = "0x20002F7")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0xB49BD4", Offset = "0xB49BD4")]
		public delegate void InternalRulesFailedToRespond(IntPtr thisptr);

		[Token(Token = "0x20002F8")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0xB49BE8", Offset = "0xB49BE8")]
		public delegate void InternalRulesRefreshComplete(IntPtr thisptr);

		[StructLayout(0)]
		[Token(Token = "0x20002F9")]
		private class VTable
		{
			[NonSerialized]
			[Token(Token = "0x4000E81")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public InternalRulesResponded m_VTRulesResponded;

			[NonSerialized]
			[Token(Token = "0x4000E82")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public InternalRulesFailedToRespond m_VTRulesFailedToRespond;

			[NonSerialized]
			[Token(Token = "0x4000E83")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public InternalRulesRefreshComplete m_VTRulesRefreshComplete;

			[Token(Token = "0x60015AE")]
			[Address(RVA = "0x13F2CF8", Offset = "0x13F2CF8", VA = "0x13F2CF8")]
			public VTable()
			{
			}
		}

		[Token(Token = "0x40009CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private VTable m_VTable;

		[Token(Token = "0x40009D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private IntPtr m_pVTable;

		[Token(Token = "0x40009D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GCHandle m_pGCHandle;

		[Token(Token = "0x40009D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private RulesResponded m_RulesResponded;

		[Token(Token = "0x40009D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private RulesFailedToRespond m_RulesFailedToRespond;

		[Token(Token = "0x40009D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private RulesRefreshComplete m_RulesRefreshComplete;

		[Token(Token = "0x60009E2")]
		[Address(RVA = "0x13F2AAC", Offset = "0x13F2AAC", VA = "0x13F2AAC")]
		public ISteamMatchmakingRulesResponse(RulesResponded onRulesResponded, RulesFailedToRespond onRulesFailedToRespond, RulesRefreshComplete onRulesRefreshComplete)
		{
		}

		[Token(Token = "0x60009E3")]
		[Address(RVA = "0x13F2D30", Offset = "0x13F2D30", VA = "0x13F2D30", Slot = "1")]
		~ISteamMatchmakingRulesResponse()
		{
		}

		[Token(Token = "0x60009E4")]
		[Address(RVA = "0x13F2E34", Offset = "0x13F2E34", VA = "0x13F2E34")]
		private void InternalOnRulesResponded(IntPtr thisptr, IntPtr pchRule, IntPtr pchValue)
		{
		}

		[Token(Token = "0x60009E5")]
		[Address(RVA = "0x13F360C", Offset = "0x13F360C", VA = "0x13F360C")]
		private void InternalOnRulesFailedToRespond(IntPtr thisptr)
		{
		}

		[Token(Token = "0x60009E6")]
		[Address(RVA = "0x13F3A38", Offset = "0x13F3A38", VA = "0x13F3A38")]
		private void InternalOnRulesRefreshComplete(IntPtr thisptr)
		{
		}

		[Token(Token = "0x60009E7")]
		[Address(RVA = "0x13F3E64", Offset = "0x13F3E64", VA = "0x13F3E64")]
		public static explicit operator IntPtr(ISteamMatchmakingRulesResponse that)
		{
			return default(IntPtr);
		}
	}
	[Token(Token = "0x20001A3")]
	public static class Packsize
	{
		[Token(Token = "0x20002FA")]
		private struct ValvePackingSentinel_t
		{
			[Token(Token = "0x4000E84")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private uint m_u32;

			[Token(Token = "0x4000E85")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private ulong m_u64;

			[Token(Token = "0x4000E86")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private ushort m_u16;

			[Token(Token = "0x4000E87")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private double m_d;
		}

		[Token(Token = "0x40009D5")]
		public const int value = 8;

		[Token(Token = "0x60009E8")]
		[Address(RVA = "0x1EB7680", Offset = "0x1EB7680", VA = "0x1EB7680")]
		public static bool Test()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20001A4")]
	public static class Version
	{
		[Token(Token = "0x40009D6")]
		public const string SteamworksNETVersion = "7.0.0";

		[Token(Token = "0x40009D7")]
		public const string SteamworksSDKVersion = "1.34";

		[Token(Token = "0x40009D8")]
		public const string SteamAPIDLLVersion = "02.89.45.04";

		[Token(Token = "0x40009D9")]
		public const int SteamAPIDLLSize = 186560;

		[Token(Token = "0x40009DA")]
		public const int SteamAPI64DLLSize = 206760;
	}
	[Token(Token = "0x20001A5")]
	public static class SteamAPI
	{
		[Token(Token = "0x60009E9")]
		[Address(RVA = "0x1EB7E28", Offset = "0x1EB7E28", VA = "0x1EB7E28")]
		public static bool RestartAppIfNecessary(AppId_t unOwnAppID)
		{
			return default(bool);
		}

		[Token(Token = "0x60009EA")]
		[Address(RVA = "0x1EB7E54", Offset = "0x1EB7E54", VA = "0x1EB7E54")]
		public static bool InitSafe()
		{
			return default(bool);
		}

		[Token(Token = "0x60009EB")]
		[Address(RVA = "0x1EB7E70", Offset = "0x1EB7E70", VA = "0x1EB7E70")]
		public static bool Init()
		{
			return default(bool);
		}

		[Token(Token = "0x60009EC")]
		[Address(RVA = "0x1EB7E8C", Offset = "0x1EB7E8C", VA = "0x1EB7E8C")]
		public static void Shutdown()
		{
		}

		[Token(Token = "0x60009ED")]
		[Address(RVA = "0x1EB7EA8", Offset = "0x1EB7EA8", VA = "0x1EB7EA8")]
		public static void RunCallbacks()
		{
		}

		[Token(Token = "0x60009EE")]
		[Address(RVA = "0x1EB7EC4", Offset = "0x1EB7EC4", VA = "0x1EB7EC4")]
		public static bool IsSteamRunning()
		{
			return default(bool);
		}

		[Token(Token = "0x60009EF")]
		[Address(RVA = "0x1EB7EE0", Offset = "0x1EB7EE0", VA = "0x1EB7EE0")]
		public static HSteamUser GetHSteamUserCurrent()
		{
			return default(HSteamUser);
		}

		[Token(Token = "0x60009F0")]
		[Address(RVA = "0x1EB7F0C", Offset = "0x1EB7F0C", VA = "0x1EB7F0C")]
		public static HSteamPipe GetHSteamPipe()
		{
			return default(HSteamPipe);
		}

		[Token(Token = "0x60009F1")]
		[Address(RVA = "0x1EB7F38", Offset = "0x1EB7F38", VA = "0x1EB7F38")]
		public static HSteamUser GetHSteamUser()
		{
			return default(HSteamUser);
		}
	}
	[Token(Token = "0x20001A6")]
	public static class GameServer
	{
		[Token(Token = "0x60009F2")]
		[Address(RVA = "0x13ED7D8", Offset = "0x13ED7D8", VA = "0x13ED7D8")]
		public static bool InitSafe(uint unIP, ushort usSteamPort, ushort usGamePort, ushort usQueryPort, EServerMode eServerMode, string pchVersionString)
		{
			return default(bool);
		}

		[Token(Token = "0x60009F3")]
		[Address(RVA = "0x13EDB1C", Offset = "0x13EDB1C", VA = "0x13EDB1C")]
		public static bool Init(uint unIP, ushort usSteamPort, ushort usGamePort, ushort usQueryPort, EServerMode eServerMode, string pchVersionString)
		{
			return default(bool);
		}

		[Token(Token = "0x60009F4")]
		[Address(RVA = "0x13EDB50", Offset = "0x13EDB50", VA = "0x13EDB50")]
		public static void Shutdown()
		{
		}

		[Token(Token = "0x60009F5")]
		[Address(RVA = "0x13EDBEC", Offset = "0x13EDBEC", VA = "0x13EDBEC")]
		public static void RunCallbacks()
		{
		}

		[Token(Token = "0x60009F6")]
		[Address(RVA = "0x13EDC88", Offset = "0x13EDC88", VA = "0x13EDC88")]
		public static bool BSecure()
		{
			return default(bool);
		}

		[Token(Token = "0x60009F7")]
		[Address(RVA = "0x13EDD2C", Offset = "0x13EDD2C", VA = "0x13EDD2C")]
		public static CSteamID GetSteamID()
		{
			return default(CSteamID);
		}

		[Token(Token = "0x60009F8")]
		[Address(RVA = "0x13EDDF0", Offset = "0x13EDDF0", VA = "0x13EDDF0")]
		public static HSteamPipe GetHSteamPipe()
		{
			return default(HSteamPipe);
		}

		[Token(Token = "0x60009F9")]
		[Address(RVA = "0x13EDE94", Offset = "0x13EDE94", VA = "0x13EDE94")]
		public static HSteamUser GetHSteamUser()
		{
			return default(HSteamUser);
		}
	}
	[Token(Token = "0x20001A7")]
	public static class SteamEncryptedAppTicket
	{
		[Token(Token = "0x60009FA")]
		[Address(RVA = "0x1EBBC48", Offset = "0x1EBBC48", VA = "0x1EBBC48")]
		public static bool BDecryptTicket(byte[] rgubTicketEncrypted, uint cubTicketEncrypted, byte[] rgubTicketDecrypted, ref uint pcubTicketDecrypted, byte[] rgubKey, int cubKey)
		{
			return default(bool);
		}

		[Token(Token = "0x60009FB")]
		[Address(RVA = "0x1EBBCAC", Offset = "0x1EBBCAC", VA = "0x1EBBCAC")]
		public static bool BIsTicketForApp(byte[] rgubTicketDecrypted, uint cubTicketDecrypted, AppId_t nAppID)
		{
			return default(bool);
		}

		[Token(Token = "0x60009FC")]
		[Address(RVA = "0x1EBBCF0", Offset = "0x1EBBCF0", VA = "0x1EBBCF0")]
		public static uint GetTicketIssueTime(byte[] rgubTicketDecrypted, uint cubTicketDecrypted)
		{
			return default(uint);
		}

		[Token(Token = "0x60009FD")]
		[Address(RVA = "0x1EBBD24", Offset = "0x1EBBD24", VA = "0x1EBBD24")]
		public static void GetTicketSteamID(byte[] rgubTicketDecrypted, uint cubTicketDecrypted, out CSteamID psteamID)
		{
		}

		[Token(Token = "0x60009FE")]
		[Address(RVA = "0x1EBBD68", Offset = "0x1EBBD68", VA = "0x1EBBD68")]
		public static uint GetTicketAppID(byte[] rgubTicketDecrypted, uint cubTicketDecrypted)
		{
			return default(uint);
		}

		[Token(Token = "0x60009FF")]
		[Address(RVA = "0x1EBBD9C", Offset = "0x1EBBD9C", VA = "0x1EBBD9C")]
		public static bool BUserOwnsAppInTicket(byte[] rgubTicketDecrypted, uint cubTicketDecrypted, AppId_t nAppID)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A00")]
		[Address(RVA = "0x1EBBDE0", Offset = "0x1EBBDE0", VA = "0x1EBBDE0")]
		public static bool BUserIsVacBanned(byte[] rgubTicketDecrypted, uint cubTicketDecrypted)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A01")]
		[Address(RVA = "0x1EBBE14", Offset = "0x1EBBE14", VA = "0x1EBBE14")]
		public static byte[] GetUserVariableData(byte[] rgubTicketDecrypted, uint cubTicketDecrypted, out uint pcubUserData)
		{
			return null;
		}
	}
	[StructLayout(0)]
	[Token(Token = "0x20001A8")]
	public class gameserveritem_t
	{
		[Token(Token = "0x40009DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public servernetadr_t m_NetAdr;

		[Token(Token = "0x40009DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int m_nPing;

		[Token(Token = "0x40009DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool m_bHadSuccessfulResponse;

		[Token(Token = "0x40009DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		public bool m_bDoNotRefresh;

		[Token(Token = "0x40009DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private byte[] m_szGameDir;

		[Token(Token = "0x40009E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private byte[] m_szMap;

		[Token(Token = "0x40009E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private byte[] m_szGameDescription;

		[Token(Token = "0x40009E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public uint m_nAppID;

		[Token(Token = "0x40009E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public int m_nPlayers;

		[Token(Token = "0x40009E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int m_nMaxPlayers;

		[Token(Token = "0x40009E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public int m_nBotPlayers;

		[Token(Token = "0x40009E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool m_bPassword;

		[Token(Token = "0x40009E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		public bool m_bSecure;

		[Token(Token = "0x40009E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public uint m_ulTimeLastPlayed;

		[Token(Token = "0x40009E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int m_nServerVersion;

		[Token(Token = "0x40009EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private byte[] m_szServerName;

		[Token(Token = "0x40009EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private byte[] m_szGameTags;

		[Token(Token = "0x40009EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public CSteamID m_steamID;

		[Token(Token = "0x6000A02")]
		[Address(RVA = "0x1E20230", Offset = "0x1E20230", VA = "0x1E20230")]
		public string GetGameDir()
		{
			return null;
		}

		[Token(Token = "0x6000A03")]
		[Address(RVA = "0x1E202CC", Offset = "0x1E202CC", VA = "0x1E202CC")]
		public void SetGameDir(string dir)
		{
		}

		[Token(Token = "0x6000A04")]
		[Address(RVA = "0x1E20368", Offset = "0x1E20368", VA = "0x1E20368")]
		public string GetMap()
		{
			return null;
		}

		[Token(Token = "0x6000A05")]
		[Address(RVA = "0x1E20404", Offset = "0x1E20404", VA = "0x1E20404")]
		public void SetMap(string map)
		{
		}

		[Token(Token = "0x6000A06")]
		[Address(RVA = "0x1E204A0", Offset = "0x1E204A0", VA = "0x1E204A0")]
		public string GetGameDescription()
		{
			return null;
		}

		[Token(Token = "0x6000A07")]
		[Address(RVA = "0x1E2053C", Offset = "0x1E2053C", VA = "0x1E2053C")]
		public void SetGameDescription(string desc)
		{
		}

		[Token(Token = "0x6000A08")]
		[Address(RVA = "0x1E205D8", Offset = "0x1E205D8", VA = "0x1E205D8")]
		public string GetServerName()
		{
			return null;
		}

		[Token(Token = "0x6000A09")]
		[Address(RVA = "0x1E206CC", Offset = "0x1E206CC", VA = "0x1E206CC")]
		public void SetServerName(string name)
		{
		}

		[Token(Token = "0x6000A0A")]
		[Address(RVA = "0x1E20768", Offset = "0x1E20768", VA = "0x1E20768")]
		public string GetGameTags()
		{
			return null;
		}

		[Token(Token = "0x6000A0B")]
		[Address(RVA = "0x1E20804", Offset = "0x1E20804", VA = "0x1E20804")]
		public void SetGameTags(string tags)
		{
		}

		[Token(Token = "0x6000A0C")]
		[Address(RVA = "0x1E208A0", Offset = "0x1E208A0", VA = "0x1E208A0")]
		public gameserveritem_t()
		{
		}
	}
	[Token(Token = "0x20001A9")]
	public struct servernetadr_t
	{
		[Token(Token = "0x40009ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private ushort m_usConnectionPort;

		[Token(Token = "0x40009EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		private ushort m_usQueryPort;

		[Token(Token = "0x40009EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private uint m_unIP;

		[Token(Token = "0x6000A0D")]
		[Address(RVA = "0xC3DCDC", Offset = "0xC3DCDC", VA = "0xC3DCDC")]
		public void Init(uint ip, ushort usQueryPort, ushort usConnectionPort)
		{
		}

		[Token(Token = "0x6000A0E")]
		[Address(RVA = "0xC3DCEC", Offset = "0xC3DCEC", VA = "0xC3DCEC")]
		public ushort GetQueryPort()
		{
			return default(ushort);
		}

		[Token(Token = "0x6000A0F")]
		[Address(RVA = "0xC3DCF4", Offset = "0xC3DCF4", VA = "0xC3DCF4")]
		public void SetQueryPort(ushort usPort)
		{
		}

		[Token(Token = "0x6000A10")]
		[Address(RVA = "0xC3DCFC", Offset = "0xC3DCFC", VA = "0xC3DCFC")]
		public ushort GetConnectionPort()
		{
			return default(ushort);
		}

		[Token(Token = "0x6000A11")]
		[Address(RVA = "0xC3DD04", Offset = "0xC3DD04", VA = "0xC3DD04")]
		public void SetConnectionPort(ushort usPort)
		{
		}

		[Token(Token = "0x6000A12")]
		[Address(RVA = "0xC3DD0C", Offset = "0xC3DD0C", VA = "0xC3DD0C")]
		public uint GetIP()
		{
			return default(uint);
		}

		[Token(Token = "0x6000A13")]
		[Address(RVA = "0xC3DD14", Offset = "0xC3DD14", VA = "0xC3DD14")]
		public void SetIP(uint unIP)
		{
		}

		[Token(Token = "0x6000A14")]
		[Address(RVA = "0xC3DD1C", Offset = "0xC3DD1C", VA = "0xC3DD1C")]
		public string GetConnectionAddressString()
		{
			return null;
		}

		[Token(Token = "0x6000A15")]
		[Address(RVA = "0xC3DD2C", Offset = "0xC3DD2C", VA = "0xC3DD2C")]
		public string GetQueryAddressString()
		{
			return null;
		}

		[Token(Token = "0x6000A16")]
		[Address(RVA = "0x1E208E8", Offset = "0x1E208E8", VA = "0x1E208E8")]
		public static string ToString(uint unIP, ushort usPort)
		{
			return null;
		}

		[Token(Token = "0x6000A17")]
		[Address(RVA = "0x1E20B80", Offset = "0x1E20B80", VA = "0x1E20B80")]
		public static bool operator <(servernetadr_t x, servernetadr_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A18")]
		[Address(RVA = "0x1E20BB4", Offset = "0x1E20BB4", VA = "0x1E20BB4")]
		public static bool operator >(servernetadr_t x, servernetadr_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A19")]
		[Address(RVA = "0xC3DD3C", Offset = "0xC3DD3C", VA = "0xC3DD3C", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A1A")]
		[Address(RVA = "0xC3DD44", Offset = "0xC3DD44", VA = "0xC3DD44", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000A1B")]
		[Address(RVA = "0x1E20C90", Offset = "0x1E20C90", VA = "0x1E20C90")]
		public static bool operator ==(servernetadr_t x, servernetadr_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A1C")]
		[Address(RVA = "0x1E20D1C", Offset = "0x1E20D1C", VA = "0x1E20D1C")]
		public static bool operator !=(servernetadr_t x, servernetadr_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A1D")]
		[Address(RVA = "0xC3DD4C", Offset = "0xC3DD4C", VA = "0xC3DD4C")]
		public bool Equals(servernetadr_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A1E")]
		[Address(RVA = "0xC3DD80", Offset = "0xC3DD80", VA = "0xC3DD80")]
		public int CompareTo(servernetadr_t other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001AA")]
	public struct HSteamPipe : IEquatable<HSteamPipe>, IComparable<HSteamPipe>
	{
		[Token(Token = "0x40009F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int m_HSteamPipe;

		[Token(Token = "0x6000A1F")]
		[Address(RVA = "0xC26948", Offset = "0xC26948", VA = "0xC26948")]
		public HSteamPipe(int value)
		{
		}

		[Token(Token = "0x6000A20")]
		[Address(RVA = "0xC26950", Offset = "0xC26950", VA = "0xC26950", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000A21")]
		[Address(RVA = "0xC2695C", Offset = "0xC2695C", VA = "0xC2695C", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A22")]
		[Address(RVA = "0xC26964", Offset = "0xC26964", VA = "0xC26964", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000A23")]
		[Address(RVA = "0x13EE69C", Offset = "0x13EE69C", VA = "0x13EE69C")]
		public static bool operator ==(HSteamPipe x, HSteamPipe y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A24")]
		[Address(RVA = "0x13EE6B0", Offset = "0x13EE6B0", VA = "0x13EE6B0")]
		public static bool operator !=(HSteamPipe x, HSteamPipe y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A25")]
		[Address(RVA = "0x13EDE8C", Offset = "0x13EDE8C", VA = "0x13EDE8C")]
		public static explicit operator HSteamPipe(int value)
		{
			return default(HSteamPipe);
		}

		[Token(Token = "0x6000A26")]
		[Address(RVA = "0x13EE6BC", Offset = "0x13EE6BC", VA = "0x13EE6BC")]
		public static explicit operator int(HSteamPipe that)
		{
			return default(int);
		}

		[Token(Token = "0x6000A27")]
		[Address(RVA = "0xC26970", Offset = "0xC26970", VA = "0xC26970", Slot = "4")]
		public bool Equals(HSteamPipe other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A28")]
		[Address(RVA = "0xC26980", Offset = "0xC26980", VA = "0xC26980", Slot = "5")]
		public int CompareTo(HSteamPipe other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001AB")]
	public struct HSteamUser : IEquatable<HSteamUser>, IComparable<HSteamUser>
	{
		[Token(Token = "0x40009F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int m_HSteamUser;

		[Token(Token = "0x6000A29")]
		[Address(RVA = "0xC2698C", Offset = "0xC2698C", VA = "0xC2698C")]
		public HSteamUser(int value)
		{
		}

		[Token(Token = "0x6000A2A")]
		[Address(RVA = "0xC26994", Offset = "0xC26994", VA = "0xC26994", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000A2B")]
		[Address(RVA = "0xC269A0", Offset = "0xC269A0", VA = "0xC269A0", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A2C")]
		[Address(RVA = "0xC269A8", Offset = "0xC269A8", VA = "0xC269A8", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000A2D")]
		[Address(RVA = "0x13EE770", Offset = "0x13EE770", VA = "0x13EE770")]
		public static bool operator ==(HSteamUser x, HSteamUser y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A2E")]
		[Address(RVA = "0x13EE784", Offset = "0x13EE784", VA = "0x13EE784")]
		public static bool operator !=(HSteamUser x, HSteamUser y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A2F")]
		[Address(RVA = "0x13EDF30", Offset = "0x13EDF30", VA = "0x13EDF30")]
		public static explicit operator HSteamUser(int value)
		{
			return default(HSteamUser);
		}

		[Token(Token = "0x6000A30")]
		[Address(RVA = "0x13EE790", Offset = "0x13EE790", VA = "0x13EE790")]
		public static explicit operator int(HSteamUser that)
		{
			return default(int);
		}

		[Token(Token = "0x6000A31")]
		[Address(RVA = "0xC269B4", Offset = "0xC269B4", VA = "0xC269B4", Slot = "4")]
		public bool Equals(HSteamUser other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A32")]
		[Address(RVA = "0xC269C4", Offset = "0xC269C4", VA = "0xC269C4", Slot = "5")]
		public int CompareTo(HSteamUser other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001AC")]
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0xB494A4", Offset = "0xB494A4")]
	public delegate void SteamAPI_CheckCallbackRegistered_t(int iCallbackNum);
	[Token(Token = "0x20001AD")]
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0xB494B8", Offset = "0xB494B8")]
	public delegate void SteamAPI_PostAPIResultInProcess_t(SteamAPICall_t callHandle, IntPtr pUnknown, uint unCallbackSize, int iCallbackNum);
	[Token(Token = "0x20001AE")]
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0xB494CC", Offset = "0xB494CC")]
	public delegate void SteamAPIWarningMessageHook_t(int nSeverity, StringBuilder pchDebugText);
	[Token(Token = "0x20001AF")]
	public struct CGameID : IEquatable<CGameID>, IComparable<CGameID>
	{
		[Token(Token = "0x20002FB")]
		public enum EGameIDType
		{
			[Token(Token = "0x4000E89")]
			k_EGameIDTypeApp,
			[Token(Token = "0x4000E8A")]
			k_EGameIDTypeGameMod,
			[Token(Token = "0x4000E8B")]
			k_EGameIDTypeShortcut,
			[Token(Token = "0x4000E8C")]
			k_EGameIDTypeP2P
		}

		[Token(Token = "0x40009F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_GameID;

		[Token(Token = "0x6000A3F")]
		[Address(RVA = "0xC37308", Offset = "0xC37308", VA = "0xC37308")]
		public CGameID(ulong GameID)
		{
		}

		[Token(Token = "0x6000A40")]
		[Address(RVA = "0xC37310", Offset = "0xC37310", VA = "0xC37310")]
		public CGameID(AppId_t nAppID)
		{
		}

		[Token(Token = "0x6000A41")]
		[Address(RVA = "0xC3731C", Offset = "0xC3731C", VA = "0xC3731C")]
		public CGameID(AppId_t nAppID, uint nModID)
		{
		}

		[Token(Token = "0x6000A42")]
		[Address(RVA = "0xC37360", Offset = "0xC37360", VA = "0xC37360")]
		public bool IsSteamApp()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A43")]
		[Address(RVA = "0xC37370", Offset = "0xC37370", VA = "0xC37370")]
		public bool IsMod()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A44")]
		[Address(RVA = "0xC37388", Offset = "0xC37388", VA = "0xC37388")]
		public bool IsShortcut()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A45")]
		[Address(RVA = "0xC373A0", Offset = "0xC373A0", VA = "0xC373A0")]
		public bool IsP2PFile()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A46")]
		[Address(RVA = "0xC373B8", Offset = "0xC373B8", VA = "0xC373B8")]
		public AppId_t AppID()
		{
			return default(AppId_t);
		}

		[Token(Token = "0x6000A47")]
		[Address(RVA = "0xC373C4", Offset = "0xC373C4", VA = "0xC373C4")]
		public EGameIDType Type()
		{
			return default(EGameIDType);
		}

		[Token(Token = "0x6000A48")]
		[Address(RVA = "0xC373CC", Offset = "0xC373CC", VA = "0xC373CC")]
		public uint ModID()
		{
			return default(uint);
		}

		[Token(Token = "0x6000A49")]
		[Address(RVA = "0xC373D4", Offset = "0xC373D4", VA = "0xC373D4")]
		public bool IsValid()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A4A")]
		[Address(RVA = "0xC373DC", Offset = "0xC373DC", VA = "0xC373DC")]
		public void Reset()
		{
		}

		[Token(Token = "0x6000A4B")]
		[Address(RVA = "0xC373E4", Offset = "0xC373E4", VA = "0xC373E4")]
		public void Set(ulong GameID)
		{
		}

		[Token(Token = "0x6000A4C")]
		[Address(RVA = "0xC373EC", Offset = "0xC373EC", VA = "0xC373EC")]
		private void SetAppID(AppId_t other)
		{
		}

		[Token(Token = "0x6000A4D")]
		[Address(RVA = "0xC373F8", Offset = "0xC373F8", VA = "0xC373F8")]
		private void SetType(EGameIDType other)
		{
		}

		[Token(Token = "0x6000A4E")]
		[Address(RVA = "0xC37400", Offset = "0xC37400", VA = "0xC37400")]
		private void SetModID(uint other)
		{
		}

		[Token(Token = "0x6000A4F")]
		[Address(RVA = "0xC37408", Offset = "0xC37408", VA = "0xC37408", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000A50")]
		[Address(RVA = "0xC37414", Offset = "0xC37414", VA = "0xC37414", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A51")]
		[Address(RVA = "0xC3741C", Offset = "0xC3741C", VA = "0xC3741C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000A52")]
		[Address(RVA = "0x1B30C70", Offset = "0x1B30C70", VA = "0x1B30C70")]
		public static bool operator ==(CGameID x, CGameID y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A53")]
		[Address(RVA = "0x1B30C84", Offset = "0x1B30C84", VA = "0x1B30C84")]
		public static bool operator !=(CGameID x, CGameID y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A54")]
		[Address(RVA = "0x1B30C90", Offset = "0x1B30C90", VA = "0x1B30C90")]
		public static explicit operator CGameID(ulong value)
		{
			return default(CGameID);
		}

		[Token(Token = "0x6000A55")]
		[Address(RVA = "0x1B30C94", Offset = "0x1B30C94", VA = "0x1B30C94")]
		public static explicit operator ulong(CGameID that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000A56")]
		[Address(RVA = "0xC37428", Offset = "0xC37428", VA = "0xC37428", Slot = "4")]
		public bool Equals(CGameID other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A57")]
		[Address(RVA = "0xC37438", Offset = "0xC37438", VA = "0xC37438", Slot = "5")]
		public int CompareTo(CGameID other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001B0")]
	public struct CSteamID : IEquatable<CSteamID>, IComparable<CSteamID>
	{
		[Token(Token = "0x40009F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly CSteamID Nil;

		[Token(Token = "0x40009F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly CSteamID OutofDateGS;

		[Token(Token = "0x40009F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly CSteamID LanModeGS;

		[Token(Token = "0x40009F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly CSteamID NotInitYetGS;

		[Token(Token = "0x40009F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly CSteamID NonSteamGS;

		[Token(Token = "0x40009F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_SteamID;

		[Token(Token = "0x6000A58")]
		[Address(RVA = "0xC37444", Offset = "0xC37444", VA = "0xC37444")]
		public CSteamID(AccountID_t unAccountID, EUniverse eUniverse, EAccountType eAccountType)
		{
		}

		[Token(Token = "0x6000A59")]
		[Address(RVA = "0xC37470", Offset = "0xC37470", VA = "0xC37470")]
		public CSteamID(AccountID_t unAccountID, uint unAccountInstance, EUniverse eUniverse, EAccountType eAccountType)
		{
		}

		[Token(Token = "0x6000A5A")]
		[Address(RVA = "0xC37490", Offset = "0xC37490", VA = "0xC37490")]
		public CSteamID(ulong ulSteamID)
		{
		}

		[Token(Token = "0x6000A5B")]
		[Address(RVA = "0xC37498", Offset = "0xC37498", VA = "0xC37498")]
		public void Set(AccountID_t unAccountID, EUniverse eUniverse, EAccountType eAccountType)
		{
		}

		[Token(Token = "0x6000A5C")]
		[Address(RVA = "0xC374D0", Offset = "0xC374D0", VA = "0xC374D0")]
		public void InstancedSet(AccountID_t unAccountID, uint unInstance, EUniverse eUniverse, EAccountType eAccountType)
		{
		}

		[Token(Token = "0x6000A5D")]
		[Address(RVA = "0xC374F0", Offset = "0xC374F0", VA = "0xC374F0")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000A5E")]
		[Address(RVA = "0xC374F8", Offset = "0xC374F8", VA = "0xC374F8")]
		public void CreateBlankAnonLogon(EUniverse eUniverse)
		{
		}

		[Token(Token = "0x6000A5F")]
		[Address(RVA = "0xC37508", Offset = "0xC37508", VA = "0xC37508")]
		public void CreateBlankAnonUserLogon(EUniverse eUniverse)
		{
		}

		[Token(Token = "0x6000A60")]
		[Address(RVA = "0xC37518", Offset = "0xC37518", VA = "0xC37518")]
		public bool BBlankAnonAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A61")]
		[Address(RVA = "0xC37548", Offset = "0xC37548", VA = "0xC37548")]
		public bool BGameServerAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A62")]
		[Address(RVA = "0xC37560", Offset = "0xC37560", VA = "0xC37560")]
		public bool BPersistentGameServerAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A63")]
		[Address(RVA = "0xC37578", Offset = "0xC37578", VA = "0xC37578")]
		public bool BAnonGameServerAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A64")]
		[Address(RVA = "0xC37590", Offset = "0xC37590", VA = "0xC37590")]
		public bool BContentServerAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A65")]
		[Address(RVA = "0xC375A8", Offset = "0xC375A8", VA = "0xC375A8")]
		public bool BClanAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A66")]
		[Address(RVA = "0xC375C0", Offset = "0xC375C0", VA = "0xC375C0")]
		public bool BChatAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A67")]
		[Address(RVA = "0xC375D8", Offset = "0xC375D8", VA = "0xC375D8")]
		public bool IsLobby()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A68")]
		[Address(RVA = "0xC375F4", Offset = "0xC375F4", VA = "0xC375F4")]
		public bool BIndividualAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A69")]
		[Address(RVA = "0xC3760C", Offset = "0xC3760C", VA = "0xC3760C")]
		public bool BAnonAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A6A")]
		[Address(RVA = "0xC3762C", Offset = "0xC3762C", VA = "0xC3762C")]
		public bool BAnonUserAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A6B")]
		[Address(RVA = "0xC37644", Offset = "0xC37644", VA = "0xC37644")]
		public bool BConsoleUserAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A6C")]
		[Address(RVA = "0xC3765C", Offset = "0xC3765C", VA = "0xC3765C")]
		public void SetAccountID(AccountID_t other)
		{
		}

		[Token(Token = "0x6000A6D")]
		[Address(RVA = "0xC37664", Offset = "0xC37664", VA = "0xC37664")]
		public void SetAccountInstance(uint other)
		{
		}

		[Token(Token = "0x6000A6E")]
		[Address(RVA = "0xC37678", Offset = "0xC37678", VA = "0xC37678")]
		public void SetEAccountType(EAccountType other)
		{
		}

		[Token(Token = "0x6000A6F")]
		[Address(RVA = "0xC3768C", Offset = "0xC3768C", VA = "0xC3768C")]
		public void SetEUniverse(EUniverse other)
		{
		}

		[Token(Token = "0x6000A70")]
		[Address(RVA = "0xC37694", Offset = "0xC37694", VA = "0xC37694")]
		public void ClearIndividualInstance()
		{
		}

		[Token(Token = "0x6000A71")]
		[Address(RVA = "0xC376B4", Offset = "0xC376B4", VA = "0xC376B4")]
		public bool HasNoIndividualInstance()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A72")]
		[Address(RVA = "0xC376D8", Offset = "0xC376D8", VA = "0xC376D8")]
		public AccountID_t GetAccountID()
		{
			return default(AccountID_t);
		}

		[Token(Token = "0x6000A73")]
		[Address(RVA = "0xC376E0", Offset = "0xC376E0", VA = "0xC376E0")]
		public uint GetUnAccountInstance()
		{
			return default(uint);
		}

		[Token(Token = "0x6000A74")]
		[Address(RVA = "0xC376EC", Offset = "0xC376EC", VA = "0xC376EC")]
		public EAccountType GetEAccountType()
		{
			return default(EAccountType);
		}

		[Token(Token = "0x6000A75")]
		[Address(RVA = "0xC376F8", Offset = "0xC376F8", VA = "0xC376F8")]
		public EUniverse GetEUniverse()
		{
			return default(EUniverse);
		}

		[Token(Token = "0x6000A76")]
		[Address(RVA = "0xC37700", Offset = "0xC37700", VA = "0xC37700")]
		public bool IsValid()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A77")]
		[Address(RVA = "0xC37708", Offset = "0xC37708", VA = "0xC37708", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000A78")]
		[Address(RVA = "0xC37714", Offset = "0xC37714", VA = "0xC37714", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A79")]
		[Address(RVA = "0xC3771C", Offset = "0xC3771C", VA = "0xC3771C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000A7A")]
		[Address(RVA = "0x1B31098", Offset = "0x1B31098", VA = "0x1B31098")]
		public static bool operator ==(CSteamID x, CSteamID y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A7B")]
		[Address(RVA = "0x1B310AC", Offset = "0x1B310AC", VA = "0x1B310AC")]
		public static bool operator !=(CSteamID x, CSteamID y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A7C")]
		[Address(RVA = "0x1B31120", Offset = "0x1B31120", VA = "0x1B31120")]
		public static explicit operator CSteamID(ulong value)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x6000A7D")]
		[Address(RVA = "0x1B31124", Offset = "0x1B31124", VA = "0x1B31124")]
		public static explicit operator ulong(CSteamID that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000A7E")]
		[Address(RVA = "0xC37728", Offset = "0xC37728", VA = "0xC37728", Slot = "4")]
		public bool Equals(CSteamID other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A7F")]
		[Address(RVA = "0xC37738", Offset = "0xC37738", VA = "0xC37738", Slot = "5")]
		public int CompareTo(CSteamID other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001B1")]
	public struct HAuthTicket : IEquatable<HAuthTicket>, IComparable<HAuthTicket>
	{
		[Token(Token = "0x40009F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly HAuthTicket Invalid;

		[Token(Token = "0x40009FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_HAuthTicket;

		[Token(Token = "0x6000A81")]
		[Address(RVA = "0xC26848", Offset = "0xC26848", VA = "0xC26848")]
		public HAuthTicket(uint value)
		{
		}

		[Token(Token = "0x6000A82")]
		[Address(RVA = "0xC26850", Offset = "0xC26850", VA = "0xC26850", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000A83")]
		[Address(RVA = "0xC2685C", Offset = "0xC2685C", VA = "0xC2685C", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A84")]
		[Address(RVA = "0xC26864", Offset = "0xC26864", VA = "0xC26864", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000A85")]
		[Address(RVA = "0x13EDFEC", Offset = "0x13EDFEC", VA = "0x13EDFEC")]
		public static bool operator ==(HAuthTicket x, HAuthTicket y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A86")]
		[Address(RVA = "0x13EE000", Offset = "0x13EE000", VA = "0x13EE000")]
		public static bool operator !=(HAuthTicket x, HAuthTicket y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A87")]
		[Address(RVA = "0x13EE074", Offset = "0x13EE074", VA = "0x13EE074")]
		public static explicit operator HAuthTicket(uint value)
		{
			return default(HAuthTicket);
		}

		[Token(Token = "0x6000A88")]
		[Address(RVA = "0x13EE07C", Offset = "0x13EE07C", VA = "0x13EE07C")]
		public static explicit operator uint(HAuthTicket that)
		{
			return default(uint);
		}

		[Token(Token = "0x6000A89")]
		[Address(RVA = "0xC26870", Offset = "0xC26870", VA = "0xC26870", Slot = "4")]
		public bool Equals(HAuthTicket other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A8A")]
		[Address(RVA = "0xC26880", Offset = "0xC26880", VA = "0xC26880", Slot = "5")]
		public int CompareTo(HAuthTicket other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001B2")]
	public struct FriendsGroupID_t : IEquatable<FriendsGroupID_t>, IComparable<FriendsGroupID_t>
	{
		[Token(Token = "0x40009FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly FriendsGroupID_t Invalid;

		[Token(Token = "0x40009FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public short m_FriendsGroupID;

		[Token(Token = "0x6000A8C")]
		[Address(RVA = "0xC265DC", Offset = "0xC265DC", VA = "0xC265DC")]
		public FriendsGroupID_t(short value)
		{
		}

		[Token(Token = "0x6000A8D")]
		[Address(RVA = "0xC265E4", Offset = "0xC265E4", VA = "0xC265E4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000A8E")]
		[Address(RVA = "0xC265F0", Offset = "0xC265F0", VA = "0xC265F0", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A8F")]
		[Address(RVA = "0xC265F8", Offset = "0xC265F8", VA = "0xC265F8", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000A90")]
		[Address(RVA = "0x13ED6D0", Offset = "0x13ED6D0", VA = "0x13ED6D0")]
		public static bool operator ==(FriendsGroupID_t x, FriendsGroupID_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A91")]
		[Address(RVA = "0x13ED6E8", Offset = "0x13ED6E8", VA = "0x13ED6E8")]
		public static bool operator !=(FriendsGroupID_t x, FriendsGroupID_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A92")]
		[Address(RVA = "0x13ED760", Offset = "0x13ED760", VA = "0x13ED760")]
		public static explicit operator FriendsGroupID_t(short value)
		{
			return default(FriendsGroupID_t);
		}

		[Token(Token = "0x6000A93")]
		[Address(RVA = "0x13ED768", Offset = "0x13ED768", VA = "0x13ED768")]
		public static explicit operator short(FriendsGroupID_t that)
		{
			return default(short);
		}

		[Token(Token = "0x6000A94")]
		[Address(RVA = "0xC26604", Offset = "0xC26604", VA = "0xC26604", Slot = "4")]
		public bool Equals(FriendsGroupID_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A95")]
		[Address(RVA = "0xC26614", Offset = "0xC26614", VA = "0xC26614", Slot = "5")]
		public int CompareTo(FriendsGroupID_t other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001B3")]
	public struct HHTMLBrowser : IEquatable<HHTMLBrowser>, IComparable<HHTMLBrowser>
	{
		[Token(Token = "0x40009FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly HHTMLBrowser Invalid;

		[Token(Token = "0x40009FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_HHTMLBrowser;

		[Token(Token = "0x6000A97")]
		[Address(RVA = "0xC2688C", Offset = "0xC2688C", VA = "0xC2688C")]
		public HHTMLBrowser(uint value)
		{
		}

		[Token(Token = "0x6000A98")]
		[Address(RVA = "0xC26894", Offset = "0xC26894", VA = "0xC26894", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000A99")]
		[Address(RVA = "0xC268A0", Offset = "0xC268A0", VA = "0xC268A0", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A9A")]
		[Address(RVA = "0xC268A8", Offset = "0xC268A8", VA = "0xC268A8", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000A9B")]
		[Address(RVA = "0x13EE19C", Offset = "0x13EE19C", VA = "0x13EE19C")]
		public static bool operator ==(HHTMLBrowser x, HHTMLBrowser y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A9C")]
		[Address(RVA = "0x13EE1B0", Offset = "0x13EE1B0", VA = "0x13EE1B0")]
		public static bool operator !=(HHTMLBrowser x, HHTMLBrowser y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A9D")]
		[Address(RVA = "0x13EE224", Offset = "0x13EE224", VA = "0x13EE224")]
		public static explicit operator HHTMLBrowser(uint value)
		{
			return default(HHTMLBrowser);
		}

		[Token(Token = "0x6000A9E")]
		[Address(RVA = "0x13EE22C", Offset = "0x13EE22C", VA = "0x13EE22C")]
		public static explicit operator uint(HHTMLBrowser that)
		{
			return default(uint);
		}

		[Token(Token = "0x6000A9F")]
		[Address(RVA = "0xC268B4", Offset = "0xC268B4", VA = "0xC268B4", Slot = "4")]
		public bool Equals(HHTMLBrowser other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AA0")]
		[Address(RVA = "0xC268C4", Offset = "0xC268C4", VA = "0xC268C4", Slot = "5")]
		public int CompareTo(HHTMLBrowser other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001B4")]
	public struct HTTPCookieContainerHandle : IEquatable<HTTPCookieContainerHandle>, IComparable<HTTPCookieContainerHandle>
	{
		[Token(Token = "0x40009FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly HTTPCookieContainerHandle Invalid;

		[Token(Token = "0x4000A00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_HTTPCookieContainerHandle;

		[Token(Token = "0x6000AA2")]
		[Address(RVA = "0xC272A8", Offset = "0xC272A8", VA = "0xC272A8")]
		public HTTPCookieContainerHandle(uint value)
		{
		}

		[Token(Token = "0x6000AA3")]
		[Address(RVA = "0xC272B0", Offset = "0xC272B0", VA = "0xC272B0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000AA4")]
		[Address(RVA = "0xC272BC", Offset = "0xC272BC", VA = "0xC272BC", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AA5")]
		[Address(RVA = "0xC272C4", Offset = "0xC272C4", VA = "0xC272C4", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000AA6")]
		[Address(RVA = "0x13EE860", Offset = "0x13EE860", VA = "0x13EE860")]
		public static bool operator ==(HTTPCookieContainerHandle x, HTTPCookieContainerHandle y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AA7")]
		[Address(RVA = "0x13EE874", Offset = "0x13EE874", VA = "0x13EE874")]
		public static bool operator !=(HTTPCookieContainerHandle x, HTTPCookieContainerHandle y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AA8")]
		[Address(RVA = "0x13EE8E8", Offset = "0x13EE8E8", VA = "0x13EE8E8")]
		public static explicit operator HTTPCookieContainerHandle(uint value)
		{
			return default(HTTPCookieContainerHandle);
		}

		[Token(Token = "0x6000AA9")]
		[Address(RVA = "0x13EE8F0", Offset = "0x13EE8F0", VA = "0x13EE8F0")]
		public static explicit operator uint(HTTPCookieContainerHandle that)
		{
			return default(uint);
		}

		[Token(Token = "0x6000AAA")]
		[Address(RVA = "0xC272D0", Offset = "0xC272D0", VA = "0xC272D0", Slot = "4")]
		public bool Equals(HTTPCookieContainerHandle other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AAB")]
		[Address(RVA = "0xC272E0", Offset = "0xC272E0", VA = "0xC272E0", Slot = "5")]
		public int CompareTo(HTTPCookieContainerHandle other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001B5")]
	public struct HTTPRequestHandle : IEquatable<HTTPRequestHandle>, IComparable<HTTPRequestHandle>
	{
		[Token(Token = "0x4000A01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly HTTPRequestHandle Invalid;

		[Token(Token = "0x4000A02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_HTTPRequestHandle;

		[Token(Token = "0x6000AAD")]
		[Address(RVA = "0xC272EC", Offset = "0xC272EC", VA = "0xC272EC")]
		public HTTPRequestHandle(uint value)
		{
		}

		[Token(Token = "0x6000AAE")]
		[Address(RVA = "0xC272F4", Offset = "0xC272F4", VA = "0xC272F4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000AAF")]
		[Address(RVA = "0xC27300", Offset = "0xC27300", VA = "0xC27300", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AB0")]
		[Address(RVA = "0xC27308", Offset = "0xC27308", VA = "0xC27308", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000AB1")]
		[Address(RVA = "0x13EEA10", Offset = "0x13EEA10", VA = "0x13EEA10")]
		public static bool operator ==(HTTPRequestHandle x, HTTPRequestHandle y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AB2")]
		[Address(RVA = "0x13EEA24", Offset = "0x13EEA24", VA = "0x13EEA24")]
		public static bool operator !=(HTTPRequestHandle x, HTTPRequestHandle y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AB3")]
		[Address(RVA = "0x13EEA98", Offset = "0x13EEA98", VA = "0x13EEA98")]
		public static explicit operator HTTPRequestHandle(uint value)
		{
			return default(HTTPRequestHandle);
		}

		[Token(Token = "0x6000AB4")]
		[Address(RVA = "0x13EEAA0", Offset = "0x13EEAA0", VA = "0x13EEAA0")]
		public static explicit operator uint(HTTPRequestHandle that)
		{
			return default(uint);
		}

		[Token(Token = "0x6000AB5")]
		[Address(RVA = "0xC27314", Offset = "0xC27314", VA = "0xC27314", Slot = "4")]
		public bool Equals(HTTPRequestHandle other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AB6")]
		[Address(RVA = "0xC27324", Offset = "0xC27324", VA = "0xC27324", Slot = "5")]
		public int CompareTo(HTTPRequestHandle other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001B6")]
	public struct SteamInventoryResult_t : IEquatable<SteamInventoryResult_t>, IComparable<SteamInventoryResult_t>
	{
		[Token(Token = "0x4000A03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly SteamInventoryResult_t Invalid;

		[Token(Token = "0x4000A04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int m_SteamInventoryResult;

		[Token(Token = "0x6000AB8")]
		[Address(RVA = "0xC40150", Offset = "0xC40150", VA = "0xC40150")]
		public SteamInventoryResult_t(int value)
		{
		}

		[Token(Token = "0x6000AB9")]
		[Address(RVA = "0xC40158", Offset = "0xC40158", VA = "0xC40158", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000ABA")]
		[Address(RVA = "0xC40164", Offset = "0xC40164", VA = "0xC40164", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ABB")]
		[Address(RVA = "0xC4016C", Offset = "0xC4016C", VA = "0xC4016C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000ABC")]
		[Address(RVA = "0x1EC7928", Offset = "0x1EC7928", VA = "0x1EC7928")]
		public static bool operator ==(SteamInventoryResult_t x, SteamInventoryResult_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ABD")]
		[Address(RVA = "0x1EC793C", Offset = "0x1EC793C", VA = "0x1EC793C")]
		public static bool operator !=(SteamInventoryResult_t x, SteamInventoryResult_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ABE")]
		[Address(RVA = "0x1EC79B0", Offset = "0x1EC79B0", VA = "0x1EC79B0")]
		public static explicit operator SteamInventoryResult_t(int value)
		{
			return default(SteamInventoryResult_t);
		}

		[Token(Token = "0x6000ABF")]
		[Address(RVA = "0x1EC79B8", Offset = "0x1EC79B8", VA = "0x1EC79B8")]
		public static explicit operator int(SteamInventoryResult_t that)
		{
			return default(int);
		}

		[Token(Token = "0x6000AC0")]
		[Address(RVA = "0xC40178", Offset = "0xC40178", VA = "0xC40178", Slot = "4")]
		public bool Equals(SteamInventoryResult_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AC1")]
		[Address(RVA = "0xC40188", Offset = "0xC40188", VA = "0xC40188", Slot = "5")]
		public int CompareTo(SteamInventoryResult_t other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001B7")]
	public struct SteamItemDef_t : IEquatable<SteamItemDef_t>, IComparable<SteamItemDef_t>
	{
		[Token(Token = "0x4000A05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int m_SteamItemDef;

		[Token(Token = "0x6000AC3")]
		[Address(RVA = "0xC40194", Offset = "0xC40194", VA = "0xC40194")]
		public SteamItemDef_t(int value)
		{
		}

		[Token(Token = "0x6000AC4")]
		[Address(RVA = "0xC4019C", Offset = "0xC4019C", VA = "0xC4019C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000AC5")]
		[Address(RVA = "0xC401A8", Offset = "0xC401A8", VA = "0xC401A8", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AC6")]
		[Address(RVA = "0xC401B0", Offset = "0xC401B0", VA = "0xC401B0", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000AC7")]
		[Address(RVA = "0x1EC7AC0", Offset = "0x1EC7AC0", VA = "0x1EC7AC0")]
		public static bool operator ==(SteamItemDef_t x, SteamItemDef_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AC8")]
		[Address(RVA = "0x1EC7AD4", Offset = "0x1EC7AD4", VA = "0x1EC7AD4")]
		public static bool operator !=(SteamItemDef_t x, SteamItemDef_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AC9")]
		[Address(RVA = "0x1EC7AE0", Offset = "0x1EC7AE0", VA = "0x1EC7AE0")]
		public static explicit operator SteamItemDef_t(int value)
		{
			return default(SteamItemDef_t);
		}

		[Token(Token = "0x6000ACA")]
		[Address(RVA = "0x1EC7AE8", Offset = "0x1EC7AE8", VA = "0x1EC7AE8")]
		public static explicit operator int(SteamItemDef_t that)
		{
			return default(int);
		}

		[Token(Token = "0x6000ACB")]
		[Address(RVA = "0xC401BC", Offset = "0xC401BC", VA = "0xC401BC", Slot = "4")]
		public bool Equals(SteamItemDef_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ACC")]
		[Address(RVA = "0xC401CC", Offset = "0xC401CC", VA = "0xC401CC", Slot = "5")]
		public int CompareTo(SteamItemDef_t other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001B8")]
	public struct SteamItemInstanceID_t : IEquatable<SteamItemInstanceID_t>, IComparable<SteamItemInstanceID_t>
	{
		[Token(Token = "0x4000A06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly SteamItemInstanceID_t Invalid;

		[Token(Token = "0x4000A07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_SteamItemInstanceID;

		[Token(Token = "0x6000ACD")]
		[Address(RVA = "0xC401D8", Offset = "0xC401D8", VA = "0xC401D8")]
		public SteamItemInstanceID_t(ulong value)
		{
		}

		[Token(Token = "0x6000ACE")]
		[Address(RVA = "0xC401E0", Offset = "0xC401E0", VA = "0xC401E0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000ACF")]
		[Address(RVA = "0xC401EC", Offset = "0xC401EC", VA = "0xC401EC", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AD0")]
		[Address(RVA = "0xC401F4", Offset = "0xC401F4", VA = "0xC401F4", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000AD1")]
		[Address(RVA = "0x1EC7BB8", Offset = "0x1EC7BB8", VA = "0x1EC7BB8")]
		public static bool operator ==(SteamItemInstanceID_t x, SteamItemInstanceID_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AD2")]
		[Address(RVA = "0x1EC7BCC", Offset = "0x1EC7BCC", VA = "0x1EC7BCC")]
		public static bool operator !=(SteamItemInstanceID_t x, SteamItemInstanceID_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AD3")]
		[Address(RVA = "0x1EC7C40", Offset = "0x1EC7C40", VA = "0x1EC7C40")]
		public static explicit operator SteamItemInstanceID_t(ulong value)
		{
			return default(SteamItemInstanceID_t);
		}

		[Token(Token = "0x6000AD4")]
		[Address(RVA = "0x1EC7C44", Offset = "0x1EC7C44", VA = "0x1EC7C44")]
		public static explicit operator ulong(SteamItemInstanceID_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000AD5")]
		[Address(RVA = "0xC40200", Offset = "0xC40200", VA = "0xC40200", Slot = "4")]
		public bool Equals(SteamItemInstanceID_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AD6")]
		[Address(RVA = "0xC40210", Offset = "0xC40210", VA = "0xC40210", Slot = "5")]
		public int CompareTo(SteamItemInstanceID_t other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001B9")]
	public struct HServerListRequest : IEquatable<HServerListRequest>
	{
		[Token(Token = "0x4000A08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly HServerListRequest Invalid;

		[Token(Token = "0x4000A09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr m_HServerListRequest;

		[Token(Token = "0x6000AD8")]
		[Address(RVA = "0xC268D0", Offset = "0xC268D0", VA = "0xC268D0")]
		public HServerListRequest(IntPtr value)
		{
		}

		[Token(Token = "0x6000AD9")]
		[Address(RVA = "0xC268D8", Offset = "0xC268D8", VA = "0xC268D8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000ADA")]
		[Address(RVA = "0xC268E4", Offset = "0xC268E4", VA = "0xC268E4", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ADB")]
		[Address(RVA = "0xC268EC", Offset = "0xC268EC", VA = "0xC268EC", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000ADC")]
		[Address(RVA = "0x13EE358", Offset = "0x13EE358", VA = "0x13EE358")]
		public static bool operator ==(HServerListRequest x, HServerListRequest y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ADD")]
		[Address(RVA = "0x13EE368", Offset = "0x13EE368", VA = "0x13EE368")]
		public static bool operator !=(HServerListRequest x, HServerListRequest y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ADE")]
		[Address(RVA = "0x13EE3EC", Offset = "0x13EE3EC", VA = "0x13EE3EC")]
		public static explicit operator HServerListRequest(IntPtr value)
		{
			return default(HServerListRequest);
		}

		[Token(Token = "0x6000ADF")]
		[Address(RVA = "0x13EE3F0", Offset = "0x13EE3F0", VA = "0x13EE3F0")]
		public static explicit operator IntPtr(HServerListRequest that)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000AE0")]
		[Address(RVA = "0xC268F8", Offset = "0xC268F8", VA = "0xC268F8", Slot = "4")]
		public bool Equals(HServerListRequest other)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20001BA")]
	public struct HServerQuery : IEquatable<HServerQuery>, IComparable<HServerQuery>
	{
		[Token(Token = "0x4000A0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly HServerQuery Invalid;

		[Token(Token = "0x4000A0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int m_HServerQuery;

		[Token(Token = "0x6000AE2")]
		[Address(RVA = "0xC26904", Offset = "0xC26904", VA = "0xC26904")]
		public HServerQuery(int value)
		{
		}

		[Token(Token = "0x6000AE3")]
		[Address(RVA = "0xC2690C", Offset = "0xC2690C", VA = "0xC2690C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000AE4")]
		[Address(RVA = "0xC26918", Offset = "0xC26918", VA = "0xC26918", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AE5")]
		[Address(RVA = "0xC26920", Offset = "0xC26920", VA = "0xC26920", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000AE6")]
		[Address(RVA = "0x13EE504", Offset = "0x13EE504", VA = "0x13EE504")]
		public static bool operator ==(HServerQuery x, HServerQuery y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AE7")]
		[Address(RVA = "0x13EE518", Offset = "0x13EE518", VA = "0x13EE518")]
		public static bool operator !=(HServerQuery x, HServerQuery y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AE8")]
		[Address(RVA = "0x13EE58C", Offset = "0x13EE58C", VA = "0x13EE58C")]
		public static explicit operator HServerQuery(int value)
		{
			return default(HServerQuery);
		}

		[Token(Token = "0x6000AE9")]
		[Address(RVA = "0x13EE594", Offset = "0x13EE594", VA = "0x13EE594")]
		public static explicit operator int(HServerQuery that)
		{
			return default(int);
		}

		[Token(Token = "0x6000AEA")]
		[Address(RVA = "0xC2692C", Offset = "0xC2692C", VA = "0xC2692C", Slot = "4")]
		public bool Equals(HServerQuery other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AEB")]
		[Address(RVA = "0xC2693C", Offset = "0xC2693C", VA = "0xC2693C", Slot = "5")]
		public int CompareTo(HServerQuery other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001BB")]
	public struct SNetListenSocket_t : IEquatable<SNetListenSocket_t>, IComparable<SNetListenSocket_t>
	{
		[Token(Token = "0x4000A0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_SNetListenSocket;

		[Token(Token = "0x6000AED")]
		[Address(RVA = "0xC3FFBC", Offset = "0xC3FFBC", VA = "0xC3FFBC")]
		public SNetListenSocket_t(uint value)
		{
		}

		[Token(Token = "0x6000AEE")]
		[Address(RVA = "0xC3FFC4", Offset = "0xC3FFC4", VA = "0xC3FFC4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000AEF")]
		[Address(RVA = "0xC3FFD0", Offset = "0xC3FFD0", VA = "0xC3FFD0", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AF0")]
		[Address(RVA = "0xC3FFD8", Offset = "0xC3FFD8", VA = "0xC3FFD8", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000AF1")]
		[Address(RVA = "0x1EB7B58", Offset = "0x1EB7B58", VA = "0x1EB7B58")]
		public static bool operator ==(SNetListenSocket_t x, SNetListenSocket_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AF2")]
		[Address(RVA = "0x1EB7B6C", Offset = "0x1EB7B6C", VA = "0x1EB7B6C")]
		public static bool operator !=(SNetListenSocket_t x, SNetListenSocket_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AF3")]
		[Address(RVA = "0x1EB7B78", Offset = "0x1EB7B78", VA = "0x1EB7B78")]
		public static explicit operator SNetListenSocket_t(uint value)
		{
			return default(SNetListenSocket_t);
		}

		[Token(Token = "0x6000AF4")]
		[Address(RVA = "0x1EB7B80", Offset = "0x1EB7B80", VA = "0x1EB7B80")]
		public static explicit operator uint(SNetListenSocket_t that)
		{
			return default(uint);
		}

		[Token(Token = "0x6000AF5")]
		[Address(RVA = "0xC3FFE4", Offset = "0xC3FFE4", VA = "0xC3FFE4", Slot = "4")]
		public bool Equals(SNetListenSocket_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AF6")]
		[Address(RVA = "0xC3FFF4", Offset = "0xC3FFF4", VA = "0xC3FFF4", Slot = "5")]
		public int CompareTo(SNetListenSocket_t other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001BC")]
	public struct SNetSocket_t : IEquatable<SNetSocket_t>, IComparable<SNetSocket_t>
	{
		[Token(Token = "0x4000A0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_SNetSocket;

		[Token(Token = "0x6000AF7")]
		[Address(RVA = "0xC40000", Offset = "0xC40000", VA = "0xC40000")]
		public SNetSocket_t(uint value)
		{
		}

		[Token(Token = "0x6000AF8")]
		[Address(RVA = "0xC40008", Offset = "0xC40008", VA = "0xC40008", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000AF9")]
		[Address(RVA = "0xC40014", Offset = "0xC40014", VA = "0xC40014", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AFA")]
		[Address(RVA = "0xC4001C", Offset = "0xC4001C", VA = "0xC4001C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000AFB")]
		[Address(RVA = "0x1EB7C34", Offset = "0x1EB7C34", VA = "0x1EB7C34")]
		public static bool operator ==(SNetSocket_t x, SNetSocket_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AFC")]
		[Address(RVA = "0x1EB7C48", Offset = "0x1EB7C48", VA = "0x1EB7C48")]
		public static bool operator !=(SNetSocket_t x, SNetSocket_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AFD")]
		[Address(RVA = "0x1EB7C54", Offset = "0x1EB7C54", VA = "0x1EB7C54")]
		public static explicit operator SNetSocket_t(uint value)
		{
			return default(SNetSocket_t);
		}

		[Token(Token = "0x6000AFE")]
		[Address(RVA = "0x1EB7C5C", Offset = "0x1EB7C5C", VA = "0x1EB7C5C")]
		public static explicit operator uint(SNetSocket_t that)
		{
			return default(uint);
		}

		[Token(Token = "0x6000AFF")]
		[Address(RVA = "0xC40028", Offset = "0xC40028", VA = "0xC40028", Slot = "4")]
		public bool Equals(SNetSocket_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B00")]
		[Address(RVA = "0xC40038", Offset = "0xC40038", VA = "0xC40038", Slot = "5")]
		public int CompareTo(SNetSocket_t other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001BD")]
	public struct PublishedFileId_t : IEquatable<PublishedFileId_t>, IComparable<PublishedFileId_t>
	{
		[Token(Token = "0x4000A0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly PublishedFileId_t Invalid;

		[Token(Token = "0x4000A0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_PublishedFileId;

		[Token(Token = "0x6000B01")]
		[Address(RVA = "0xC3F3A4", Offset = "0xC3F3A4", VA = "0xC3F3A4")]
		public PublishedFileId_t(ulong value)
		{
		}

		[Token(Token = "0x6000B02")]
		[Address(RVA = "0xC3F3AC", Offset = "0xC3F3AC", VA = "0xC3F3AC", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000B03")]
		[Address(RVA = "0xC3F3B8", Offset = "0xC3F3B8", VA = "0xC3F3B8", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B04")]
		[Address(RVA = "0xC3F3C0", Offset = "0xC3F3C0", VA = "0xC3F3C0", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000B05")]
		[Address(RVA = "0x1EB7818", Offset = "0x1EB7818", VA = "0x1EB7818")]
		public static bool operator ==(PublishedFileId_t x, PublishedFileId_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B06")]
		[Address(RVA = "0x1EB782C", Offset = "0x1EB782C", VA = "0x1EB782C")]
		public static bool operator !=(PublishedFileId_t x, PublishedFileId_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B07")]
		[Address(RVA = "0x1EB78A0", Offset = "0x1EB78A0", VA = "0x1EB78A0")]
		public static explicit operator PublishedFileId_t(ulong value)
		{
			return default(PublishedFileId_t);
		}

		[Token(Token = "0x6000B08")]
		[Address(RVA = "0x1EB78A4", Offset = "0x1EB78A4", VA = "0x1EB78A4")]
		public static explicit operator ulong(PublishedFileId_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000B09")]
		[Address(RVA = "0xC3F3CC", Offset = "0xC3F3CC", VA = "0xC3F3CC", Slot = "4")]
		public bool Equals(PublishedFileId_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B0A")]
		[Address(RVA = "0xC3F3DC", Offset = "0xC3F3DC", VA = "0xC3F3DC", Slot = "5")]
		public int CompareTo(PublishedFileId_t other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001BE")]
	public struct PublishedFileUpdateHandle_t : IEquatable<PublishedFileUpdateHandle_t>, IComparable<PublishedFileUpdateHandle_t>
	{
		[Token(Token = "0x4000A10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly PublishedFileUpdateHandle_t Invalid;

		[Token(Token = "0x4000A11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_PublishedFileUpdateHandle;

		[Token(Token = "0x6000B0C")]
		[Address(RVA = "0xC3F3E8", Offset = "0xC3F3E8", VA = "0xC3F3E8")]
		public PublishedFileUpdateHandle_t(ulong value)
		{
		}

		[Token(Token = "0x6000B0D")]
		[Address(RVA = "0xC3F3F0", Offset = "0xC3F3F0", VA = "0xC3F3F0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000B0E")]
		[Address(RVA = "0xC3F3FC", Offset = "0xC3F3FC", VA = "0xC3F3FC", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B0F")]
		[Address(RVA = "0xC3F404", Offset = "0xC3F404", VA = "0xC3F404", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000B10")]
		[Address(RVA = "0x1EB79C4", Offset = "0x1EB79C4", VA = "0x1EB79C4")]
		public static bool operator ==(PublishedFileUpdateHandle_t x, PublishedFileUpdateHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B11")]
		[Address(RVA = "0x1EB79D8", Offset = "0x1EB79D8", VA = "0x1EB79D8")]
		public static bool operator !=(PublishedFileUpdateHandle_t x, PublishedFileUpdateHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B12")]
		[Address(RVA = "0x1EB7A4C", Offset = "0x1EB7A4C", VA = "0x1EB7A4C")]
		public static explicit operator PublishedFileUpdateHandle_t(ulong value)
		{
			return default(PublishedFileUpdateHandle_t);
		}

		[Token(Token = "0x6000B13")]
		[Address(RVA = "0x1EB7A50", Offset = "0x1EB7A50", VA = "0x1EB7A50")]
		public static explicit operator ulong(PublishedFileUpdateHandle_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000B14")]
		[Address(RVA = "0xC3F410", Offset = "0xC3F410", VA = "0xC3F410", Slot = "4")]
		public bool Equals(PublishedFileUpdateHandle_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B15")]
		[Address(RVA = "0xC3F420", Offset = "0xC3F420", VA = "0xC3F420", Slot = "5")]
		public int CompareTo(PublishedFileUpdateHandle_t other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001BF")]
	public struct UGCFileWriteStreamHandle_t : IEquatable<UGCFileWriteStreamHandle_t>, IComparable<UGCFileWriteStreamHandle_t>
	{
		[Token(Token = "0x4000A12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly UGCFileWriteStreamHandle_t Invalid;

		[Token(Token = "0x4000A13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_UGCFileWriteStreamHandle;

		[Token(Token = "0x6000B17")]
		[Address(RVA = "0xC3D69C", Offset = "0xC3D69C", VA = "0xC3D69C")]
		public UGCFileWriteStreamHandle_t(ulong value)
		{
		}

		[Token(Token = "0x6000B18")]
		[Address(RVA = "0xC3D6A4", Offset = "0xC3D6A4", VA = "0xC3D6A4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000B19")]
		[Address(RVA = "0xC3D6B0", Offset = "0xC3D6B0", VA = "0xC3D6B0", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B1A")]
		[Address(RVA = "0xC3D6B8", Offset = "0xC3D6B8", VA = "0xC3D6B8", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000B1B")]
		[Address(RVA = "0x1E1FC2C", Offset = "0x1E1FC2C", VA = "0x1E1FC2C")]
		public static bool operator ==(UGCFileWriteStreamHandle_t x, UGCFileWriteStreamHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B1C")]
		[Address(RVA = "0x1E1FC40", Offset = "0x1E1FC40", VA = "0x1E1FC40")]
		public static bool operator !=(UGCFileWriteStreamHandle_t x, UGCFileWriteStreamHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B1D")]
		[Address(RVA = "0x1E1FCB4", Offset = "0x1E1FCB4", VA = "0x1E1FCB4")]
		public static explicit operator UGCFileWriteStreamHandle_t(ulong value)
		{
			return default(UGCFileWriteStreamHandle_t);
		}

		[Token(Token = "0x6000B1E")]
		[Address(RVA = "0x1E1FCB8", Offset = "0x1E1FCB8", VA = "0x1E1FCB8")]
		public static explicit operator ulong(UGCFileWriteStreamHandle_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000B1F")]
		[Address(RVA = "0xC3D6C4", Offset = "0xC3D6C4", VA = "0xC3D6C4", Slot = "4")]
		public bool Equals(UGCFileWriteStreamHandle_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B20")]
		[Address(RVA = "0xC3D6D4", Offset = "0xC3D6D4", VA = "0xC3D6D4", Slot = "5")]
		public int CompareTo(UGCFileWriteStreamHandle_t other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001C0")]
	public struct UGCHandle_t : IEquatable<UGCHandle_t>, IComparable<UGCHandle_t>
	{
		[Token(Token = "0x4000A14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly UGCHandle_t Invalid;

		[Token(Token = "0x4000A15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_UGCHandle;

		[Token(Token = "0x6000B22")]
		[Address(RVA = "0xC3D6E0", Offset = "0xC3D6E0", VA = "0xC3D6E0")]
		public UGCHandle_t(ulong value)
		{
		}

		[Token(Token = "0x6000B23")]
		[Address(RVA = "0xC3D6E8", Offset = "0xC3D6E8", VA = "0xC3D6E8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000B24")]
		[Address(RVA = "0xC3D6F4", Offset = "0xC3D6F4", VA = "0xC3D6F4", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B25")]
		[Address(RVA = "0xC3D6FC", Offset = "0xC3D6FC", VA = "0xC3D6FC", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000B26")]
		[Address(RVA = "0x1E1FDDC", Offset = "0x1E1FDDC", VA = "0x1E1FDDC")]
		public static bool operator ==(UGCHandle_t x, UGCHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B27")]
		[Address(RVA = "0x1E1FDF0", Offset = "0x1E1FDF0", VA = "0x1E1FDF0")]
		public static bool operator !=(UGCHandle_t x, UGCHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B28")]
		[Address(RVA = "0x1E1FE64", Offset = "0x1E1FE64", VA = "0x1E1FE64")]
		public static explicit operator UGCHandle_t(ulong value)
		{
			return default(UGCHandle_t);
		}

		[Token(Token = "0x6000B29")]
		[Address(RVA = "0x1E1FE68", Offset = "0x1E1FE68", VA = "0x1E1FE68")]
		public static explicit operator ulong(UGCHandle_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000B2A")]
		[Address(RVA = "0xC3D708", Offset = "0xC3D708", VA = "0xC3D708", Slot = "4")]
		public bool Equals(UGCHandle_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B2B")]
		[Address(RVA = "0xC3D718", Offset = "0xC3D718", VA = "0xC3D718", Slot = "5")]
		public int CompareTo(UGCHandle_t other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001C1")]
	public struct ScreenshotHandle : IEquatable<ScreenshotHandle>, IComparable<ScreenshotHandle>
	{
		[Token(Token = "0x4000A16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly ScreenshotHandle Invalid;

		[Token(Token = "0x4000A17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_ScreenshotHandle;

		[Token(Token = "0x6000B2D")]
		[Address(RVA = "0xC40044", Offset = "0xC40044", VA = "0xC40044")]
		public ScreenshotHandle(uint value)
		{
		}

		[Token(Token = "0x6000B2E")]
		[Address(RVA = "0xC4004C", Offset = "0xC4004C", VA = "0xC4004C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000B2F")]
		[Address(RVA = "0xC40058", Offset = "0xC40058", VA = "0xC40058", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B30")]
		[Address(RVA = "0xC40060", Offset = "0xC40060", VA = "0xC40060", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000B31")]
		[Address(RVA = "0x1EB7D2C", Offset = "0x1EB7D2C", VA = "0x1EB7D2C")]
		public static bool operator ==(ScreenshotHandle x, ScreenshotHandle y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B32")]
		[Address(RVA = "0x1EB7D40", Offset = "0x1EB7D40", VA = "0x1EB7D40")]
		public static bool operator !=(ScreenshotHandle x, ScreenshotHandle y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B33")]
		[Address(RVA = "0x1EB7DB4", Offset = "0x1EB7DB4", VA = "0x1EB7DB4")]
		public static explicit operator ScreenshotHandle(uint value)
		{
			return default(ScreenshotHandle);
		}

		[Token(Token = "0x6000B34")]
		[Address(RVA = "0x1EB7DBC", Offset = "0x1EB7DBC", VA = "0x1EB7DBC")]
		public static explicit operator uint(ScreenshotHandle that)
		{
			return default(uint);
		}

		[Token(Token = "0x6000B35")]
		[Address(RVA = "0xC4006C", Offset = "0xC4006C", VA = "0xC4006C", Slot = "4")]
		public bool Equals(ScreenshotHandle other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B36")]
		[Address(RVA = "0xC4007C", Offset = "0xC4007C", VA = "0xC4007C", Slot = "5")]
		public int CompareTo(ScreenshotHandle other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001C2")]
	public struct AccountID_t : IEquatable<AccountID_t>, IComparable<AccountID_t>
	{
		[Token(Token = "0x4000A18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_AccountID;

		[Token(Token = "0x6000B38")]
		[Address(RVA = "0xC370C8", Offset = "0xC370C8", VA = "0xC370C8")]
		public AccountID_t(uint value)
		{
		}

		[Token(Token = "0x6000B39")]
		[Address(RVA = "0xC370D0", Offset = "0xC370D0", VA = "0xC370D0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000B3A")]
		[Address(RVA = "0xC370DC", Offset = "0xC370DC", VA = "0xC370DC", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B3B")]
		[Address(RVA = "0xC370E4", Offset = "0xC370E4", VA = "0xC370E4", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000B3C")]
		[Address(RVA = "0x1B2F724", Offset = "0x1B2F724", VA = "0x1B2F724")]
		public static bool operator ==(AccountID_t x, AccountID_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B3D")]
		[Address(RVA = "0x1B2F738", Offset = "0x1B2F738", VA = "0x1B2F738")]
		public static bool operator !=(AccountID_t x, AccountID_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B3E")]
		[Address(RVA = "0x1B2F744", Offset = "0x1B2F744", VA = "0x1B2F744")]
		public static explicit operator AccountID_t(uint value)
		{
			return default(AccountID_t);
		}

		[Token(Token = "0x6000B3F")]
		[Address(RVA = "0x1B2F74C", Offset = "0x1B2F74C", VA = "0x1B2F74C")]
		public static explicit operator uint(AccountID_t that)
		{
			return default(uint);
		}

		[Token(Token = "0x6000B40")]
		[Address(RVA = "0xC370F0", Offset = "0xC370F0", VA = "0xC370F0", Slot = "4")]
		public bool Equals(AccountID_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B41")]
		[Address(RVA = "0xC37100", Offset = "0xC37100", VA = "0xC37100", Slot = "5")]
		public int CompareTo(AccountID_t other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001C3")]
	public struct AppId_t : IEquatable<AppId_t>, IComparable<AppId_t>
	{
		[Token(Token = "0x4000A19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly AppId_t Invalid;

		[Token(Token = "0x4000A1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_AppId;

		[Token(Token = "0x6000B42")]
		[Address(RVA = "0xC3710C", Offset = "0xC3710C", VA = "0xC3710C")]
		public AppId_t(uint value)
		{
		}

		[Token(Token = "0x6000B43")]
		[Address(RVA = "0xC37114", Offset = "0xC37114", VA = "0xC37114", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000B44")]
		[Address(RVA = "0xC37120", Offset = "0xC37120", VA = "0xC37120", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B45")]
		[Address(RVA = "0xC37128", Offset = "0xC37128", VA = "0xC37128", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000B46")]
		[Address(RVA = "0x1B2F81C", Offset = "0x1B2F81C", VA = "0x1B2F81C")]
		public static bool operator ==(AppId_t x, AppId_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B47")]
		[Address(RVA = "0x1B2F830", Offset = "0x1B2F830", VA = "0x1B2F830")]
		public static bool operator !=(AppId_t x, AppId_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B48")]
		[Address(RVA = "0x1B2F8A4", Offset = "0x1B2F8A4", VA = "0x1B2F8A4")]
		public static explicit operator AppId_t(uint value)
		{
			return default(AppId_t);
		}

		[Token(Token = "0x6000B49")]
		[Address(RVA = "0x1B2F8AC", Offset = "0x1B2F8AC", VA = "0x1B2F8AC")]
		public static explicit operator uint(AppId_t that)
		{
			return default(uint);
		}

		[Token(Token = "0x6000B4A")]
		[Address(RVA = "0xC37134", Offset = "0xC37134", VA = "0xC37134", Slot = "4")]
		public bool Equals(AppId_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B4B")]
		[Address(RVA = "0xC37144", Offset = "0xC37144", VA = "0xC37144", Slot = "5")]
		public int CompareTo(AppId_t other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001C4")]
	public struct DepotId_t : IEquatable<DepotId_t>, IComparable<DepotId_t>
	{
		[Token(Token = "0x4000A1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly DepotId_t Invalid;

		[Token(Token = "0x4000A1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_DepotId;

		[Token(Token = "0x6000B4D")]
		[Address(RVA = "0xC26464", Offset = "0xC26464", VA = "0xC26464")]
		public DepotId_t(uint value)
		{
		}

		[Token(Token = "0x6000B4E")]
		[Address(RVA = "0xC2646C", Offset = "0xC2646C", VA = "0xC2646C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000B4F")]
		[Address(RVA = "0xC26478", Offset = "0xC26478", VA = "0xC26478", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B50")]
		[Address(RVA = "0xC26480", Offset = "0xC26480", VA = "0xC26480", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000B51")]
		[Address(RVA = "0x13ED378", Offset = "0x13ED378", VA = "0x13ED378")]
		public static bool operator ==(DepotId_t x, DepotId_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B52")]
		[Address(RVA = "0x13ED38C", Offset = "0x13ED38C", VA = "0x13ED38C")]
		public static bool operator !=(DepotId_t x, DepotId_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B53")]
		[Address(RVA = "0x13ED400", Offset = "0x13ED400", VA = "0x13ED400")]
		public static explicit operator DepotId_t(uint value)
		{
			return default(DepotId_t);
		}

		[Token(Token = "0x6000B54")]
		[Address(RVA = "0x13ED408", Offset = "0x13ED408", VA = "0x13ED408")]
		public static explicit operator uint(DepotId_t that)
		{
			return default(uint);
		}

		[Token(Token = "0x6000B55")]
		[Address(RVA = "0xC2648C", Offset = "0xC2648C", VA = "0xC2648C", Slot = "4")]
		public bool Equals(DepotId_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B56")]
		[Address(RVA = "0xC2649C", Offset = "0xC2649C", VA = "0xC2649C", Slot = "5")]
		public int CompareTo(DepotId_t other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001C5")]
	public struct ManifestId_t : IEquatable<ManifestId_t>, IComparable<ManifestId_t>
	{
		[Token(Token = "0x4000A1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly ManifestId_t Invalid;

		[Token(Token = "0x4000A1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ManifestId;

		[Token(Token = "0x6000B58")]
		[Address(RVA = "0xC27954", Offset = "0xC27954", VA = "0xC27954")]
		public ManifestId_t(ulong value)
		{
		}

		[Token(Token = "0x6000B59")]
		[Address(RVA = "0xC2795C", Offset = "0xC2795C", VA = "0xC2795C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000B5A")]
		[Address(RVA = "0xC27968", Offset = "0xC27968", VA = "0xC27968", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B5B")]
		[Address(RVA = "0xC27970", Offset = "0xC27970", VA = "0xC27970", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000B5C")]
		[Address(RVA = "0x13F8070", Offset = "0x13F8070", VA = "0x13F8070")]
		public static bool operator ==(ManifestId_t x, ManifestId_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B5D")]
		[Address(RVA = "0x13F8084", Offset = "0x13F8084", VA = "0x13F8084")]
		public static bool operator !=(ManifestId_t x, ManifestId_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B5E")]
		[Address(RVA = "0x13F80F8", Offset = "0x13F80F8", VA = "0x13F80F8")]
		public static explicit operator ManifestId_t(ulong value)
		{
			return default(ManifestId_t);
		}

		[Token(Token = "0x6000B5F")]
		[Address(RVA = "0x13F80FC", Offset = "0x13F80FC", VA = "0x13F80FC")]
		public static explicit operator ulong(ManifestId_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000B60")]
		[Address(RVA = "0xC2797C", Offset = "0xC2797C", VA = "0xC2797C", Slot = "4")]
		public bool Equals(ManifestId_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B61")]
		[Address(RVA = "0xC2798C", Offset = "0xC2798C", VA = "0xC2798C", Slot = "5")]
		public int CompareTo(ManifestId_t other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001C6")]
	public struct SteamAPICall_t : IEquatable<SteamAPICall_t>, IComparable<SteamAPICall_t>
	{
		[Token(Token = "0x4000A1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly SteamAPICall_t Invalid;

		[Token(Token = "0x4000A20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_SteamAPICall;

		[Token(Token = "0x6000B63")]
		[Address(RVA = "0xC40088", Offset = "0xC40088", VA = "0xC40088")]
		public SteamAPICall_t(ulong value)
		{
		}

		[Token(Token = "0x6000B64")]
		[Address(RVA = "0xC40090", Offset = "0xC40090", VA = "0xC40090", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000B65")]
		[Address(RVA = "0xC4009C", Offset = "0xC4009C", VA = "0xC4009C", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B66")]
		[Address(RVA = "0xC400A4", Offset = "0xC400A4", VA = "0xC400A4", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000B67")]
		[Address(RVA = "0x1EB8018", Offset = "0x1EB8018", VA = "0x1EB8018")]
		public static bool operator ==(SteamAPICall_t x, SteamAPICall_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B68")]
		[Address(RVA = "0x1EB802C", Offset = "0x1EB802C", VA = "0x1EB802C")]
		public static bool operator !=(SteamAPICall_t x, SteamAPICall_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B69")]
		[Address(RVA = "0x1EB80A0", Offset = "0x1EB80A0", VA = "0x1EB80A0")]
		public static explicit operator SteamAPICall_t(ulong value)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000B6A")]
		[Address(RVA = "0x1EB80A4", Offset = "0x1EB80A4", VA = "0x1EB80A4")]
		public static explicit operator ulong(SteamAPICall_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000B6B")]
		[Address(RVA = "0xC400B0", Offset = "0xC400B0", VA = "0xC400B0", Slot = "4")]
		public bool Equals(SteamAPICall_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B6C")]
		[Address(RVA = "0xC400C0", Offset = "0xC400C0", VA = "0xC400C0", Slot = "5")]
		public int CompareTo(SteamAPICall_t other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001C7")]
	public struct UGCQueryHandle_t : IEquatable<UGCQueryHandle_t>, IComparable<UGCQueryHandle_t>
	{
		[Token(Token = "0x4000A21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly UGCQueryHandle_t Invalid;

		[Token(Token = "0x4000A22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_UGCQueryHandle;

		[Token(Token = "0x6000B6E")]
		[Address(RVA = "0xC3D724", Offset = "0xC3D724", VA = "0xC3D724")]
		public UGCQueryHandle_t(ulong value)
		{
		}

		[Token(Token = "0x6000B6F")]
		[Address(RVA = "0xC3D72C", Offset = "0xC3D72C", VA = "0xC3D72C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000B70")]
		[Address(RVA = "0xC3D738", Offset = "0xC3D738", VA = "0xC3D738", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B71")]
		[Address(RVA = "0xC3D740", Offset = "0xC3D740", VA = "0xC3D740", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000B72")]
		[Address(RVA = "0x1E1FF8C", Offset = "0x1E1FF8C", VA = "0x1E1FF8C")]
		public static bool operator ==(UGCQueryHandle_t x, UGCQueryHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B73")]
		[Address(RVA = "0x1E1FFA0", Offset = "0x1E1FFA0", VA = "0x1E1FFA0")]
		public static bool operator !=(UGCQueryHandle_t x, UGCQueryHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B74")]
		[Address(RVA = "0x1E19A5C", Offset = "0x1E19A5C", VA = "0x1E19A5C")]
		public static explicit operator UGCQueryHandle_t(ulong value)
		{
			return default(UGCQueryHandle_t);
		}

		[Token(Token = "0x6000B75")]
		[Address(RVA = "0x1E20014", Offset = "0x1E20014", VA = "0x1E20014")]
		public static explicit operator ulong(UGCQueryHandle_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000B76")]
		[Address(RVA = "0xC3D74C", Offset = "0xC3D74C", VA = "0xC3D74C", Slot = "4")]
		public bool Equals(UGCQueryHandle_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B77")]
		[Address(RVA = "0xC3D75C", Offset = "0xC3D75C", VA = "0xC3D75C", Slot = "5")]
		public int CompareTo(UGCQueryHandle_t other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001C8")]
	public struct UGCUpdateHandle_t : IEquatable<UGCUpdateHandle_t>, IComparable<UGCUpdateHandle_t>
	{
		[Token(Token = "0x4000A23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly UGCUpdateHandle_t Invalid;

		[Token(Token = "0x4000A24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_UGCUpdateHandle;

		[Token(Token = "0x6000B79")]
		[Address(RVA = "0xC3D768", Offset = "0xC3D768", VA = "0xC3D768")]
		public UGCUpdateHandle_t(ulong value)
		{
		}

		[Token(Token = "0x6000B7A")]
		[Address(RVA = "0xC3D770", Offset = "0xC3D770", VA = "0xC3D770", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000B7B")]
		[Address(RVA = "0xC3D77C", Offset = "0xC3D77C", VA = "0xC3D77C", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B7C")]
		[Address(RVA = "0xC3D784", Offset = "0xC3D784", VA = "0xC3D784", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000B7D")]
		[Address(RVA = "0x1E20138", Offset = "0x1E20138", VA = "0x1E20138")]
		public static bool operator ==(UGCUpdateHandle_t x, UGCUpdateHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B7E")]
		[Address(RVA = "0x1E2014C", Offset = "0x1E2014C", VA = "0x1E2014C")]
		public static bool operator !=(UGCUpdateHandle_t x, UGCUpdateHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B7F")]
		[Address(RVA = "0x1E1ADB4", Offset = "0x1E1ADB4", VA = "0x1E1ADB4")]
		public static explicit operator UGCUpdateHandle_t(ulong value)
		{
			return default(UGCUpdateHandle_t);
		}

		[Token(Token = "0x6000B80")]
		[Address(RVA = "0x1E201C0", Offset = "0x1E201C0", VA = "0x1E201C0")]
		public static explicit operator ulong(UGCUpdateHandle_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000B81")]
		[Address(RVA = "0xC3D790", Offset = "0xC3D790", VA = "0xC3D790", Slot = "4")]
		public bool Equals(UGCUpdateHandle_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B82")]
		[Address(RVA = "0xC3D7A0", Offset = "0xC3D7A0", VA = "0xC3D7A0", Slot = "5")]
		public int CompareTo(UGCUpdateHandle_t other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001C9")]
	public struct ClientUnifiedMessageHandle : IEquatable<ClientUnifiedMessageHandle>, IComparable<ClientUnifiedMessageHandle>
	{
		[Token(Token = "0x4000A25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly ClientUnifiedMessageHandle Invalid;

		[Token(Token = "0x4000A26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ClientUnifiedMessageHandle;

		[Token(Token = "0x6000B84")]
		[Address(RVA = "0xC26420", Offset = "0xC26420", VA = "0xC26420")]
		public ClientUnifiedMessageHandle(ulong value)
		{
		}

		[Token(Token = "0x6000B85")]
		[Address(RVA = "0xC26428", Offset = "0xC26428", VA = "0xC26428", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000B86")]
		[Address(RVA = "0xC26434", Offset = "0xC26434", VA = "0xC26434", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B87")]
		[Address(RVA = "0xC2643C", Offset = "0xC2643C", VA = "0xC2643C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000B88")]
		[Address(RVA = "0x13ED1CC", Offset = "0x13ED1CC", VA = "0x13ED1CC")]
		public static bool operator ==(ClientUnifiedMessageHandle x, ClientUnifiedMessageHandle y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B89")]
		[Address(RVA = "0x13ED1E0", Offset = "0x13ED1E0", VA = "0x13ED1E0")]
		public static bool operator !=(ClientUnifiedMessageHandle x, ClientUnifiedMessageHandle y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B8A")]
		[Address(RVA = "0x13ED254", Offset = "0x13ED254", VA = "0x13ED254")]
		public static explicit operator ClientUnifiedMessageHandle(ulong value)
		{
			return default(ClientUnifiedMessageHandle);
		}

		[Token(Token = "0x6000B8B")]
		[Address(RVA = "0x13ED258", Offset = "0x13ED258", VA = "0x13ED258")]
		public static explicit operator ulong(ClientUnifiedMessageHandle that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000B8C")]
		[Address(RVA = "0xC26448", Offset = "0xC26448", VA = "0xC26448", Slot = "4")]
		public bool Equals(ClientUnifiedMessageHandle other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B8D")]
		[Address(RVA = "0xC26458", Offset = "0xC26458", VA = "0xC26458", Slot = "5")]
		public int CompareTo(ClientUnifiedMessageHandle other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001CA")]
	public struct SteamLeaderboard_t : IEquatable<SteamLeaderboard_t>, IComparable<SteamLeaderboard_t>
	{
		[Token(Token = "0x4000A27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_SteamLeaderboard;

		[Token(Token = "0x6000B8F")]
		[Address(RVA = "0xC40260", Offset = "0xC40260", VA = "0xC40260")]
		public SteamLeaderboard_t(ulong value)
		{
		}

		[Token(Token = "0x6000B90")]
		[Address(RVA = "0xC40268", Offset = "0xC40268", VA = "0xC40268", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000B91")]
		[Address(RVA = "0xC40274", Offset = "0xC40274", VA = "0xC40274", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B92")]
		[Address(RVA = "0xC4027C", Offset = "0xC4027C", VA = "0xC4027C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000B93")]
		[Address(RVA = "0x1EC7E24", Offset = "0x1EC7E24", VA = "0x1EC7E24")]
		public static bool operator ==(SteamLeaderboard_t x, SteamLeaderboard_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B94")]
		[Address(RVA = "0x1EC7E38", Offset = "0x1EC7E38", VA = "0x1EC7E38")]
		public static bool operator !=(SteamLeaderboard_t x, SteamLeaderboard_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B95")]
		[Address(RVA = "0x1EC7E44", Offset = "0x1EC7E44", VA = "0x1EC7E44")]
		public static explicit operator SteamLeaderboard_t(ulong value)
		{
			return default(SteamLeaderboard_t);
		}

		[Token(Token = "0x6000B96")]
		[Address(RVA = "0x1EC7E48", Offset = "0x1EC7E48", VA = "0x1EC7E48")]
		public static explicit operator ulong(SteamLeaderboard_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000B97")]
		[Address(RVA = "0xC40288", Offset = "0xC40288", VA = "0xC40288", Slot = "4")]
		public bool Equals(SteamLeaderboard_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B98")]
		[Address(RVA = "0xC40298", Offset = "0xC40298", VA = "0xC40298", Slot = "5")]
		public int CompareTo(SteamLeaderboard_t other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001CB")]
	public struct SteamLeaderboardEntries_t : IEquatable<SteamLeaderboardEntries_t>, IComparable<SteamLeaderboardEntries_t>
	{
		[Token(Token = "0x4000A28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_SteamLeaderboardEntries;

		[Token(Token = "0x6000B99")]
		[Address(RVA = "0xC4021C", Offset = "0xC4021C", VA = "0xC4021C")]
		public SteamLeaderboardEntries_t(ulong value)
		{
		}

		[Token(Token = "0x6000B9A")]
		[Address(RVA = "0xC40224", Offset = "0xC40224", VA = "0xC40224", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000B9B")]
		[Address(RVA = "0xC40230", Offset = "0xC40230", VA = "0xC40230", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B9C")]
		[Address(RVA = "0xC40238", Offset = "0xC40238", VA = "0xC40238", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000B9D")]
		[Address(RVA = "0x1EC7D4C", Offset = "0x1EC7D4C", VA = "0x1EC7D4C")]
		public static bool operator ==(SteamLeaderboardEntries_t x, SteamLeaderboardEntries_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B9E")]
		[Address(RVA = "0x1EC7D60", Offset = "0x1EC7D60", VA = "0x1EC7D60")]
		public static bool operator !=(SteamLeaderboardEntries_t x, SteamLeaderboardEntries_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B9F")]
		[Address(RVA = "0x1EC7D6C", Offset = "0x1EC7D6C", VA = "0x1EC7D6C")]
		public static explicit operator SteamLeaderboardEntries_t(ulong value)
		{
			return default(SteamLeaderboardEntries_t);
		}

		[Token(Token = "0x6000BA0")]
		[Address(RVA = "0x1EC7D70", Offset = "0x1EC7D70", VA = "0x1EC7D70")]
		public static explicit operator ulong(SteamLeaderboardEntries_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000BA1")]
		[Address(RVA = "0xC40244", Offset = "0xC40244", VA = "0xC40244", Slot = "4")]
		public bool Equals(SteamLeaderboardEntries_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BA2")]
		[Address(RVA = "0xC40254", Offset = "0xC40254", VA = "0xC40254", Slot = "5")]
		public int CompareTo(SteamLeaderboardEntries_t other)
		{
			return default(int);
		}
	}
}
namespace MP
{
	[Token(Token = "0x20001CC")]
	public class AtomicBinaryReader
	{
		[Token(Token = "0x4000A29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly object locker;

		[Token(Token = "0x4000A2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private BinaryReader reader;

		[Token(Token = "0x1700007C")]
		public long StreamLength
		{
			[Token(Token = "0x6000BA6")]
			[Address(RVA = "0x1A2B0C4", Offset = "0x1A2B0C4", VA = "0x1A2B0C4")]
			get
			{
				return default(long);
			}
		}

		[Token(Token = "0x6000BA3")]
		[Address(RVA = "0x1A25138", Offset = "0x1A25138", VA = "0x1A25138")]
		public AtomicBinaryReader(Stream stream)
		{
		}

		[Token(Token = "0x6000BA4")]
		[Address(RVA = "0x1A2B008", Offset = "0x1A2B008", VA = "0x1A2B008")]
		public AtomicBinaryReader(Stream stream, Encoding encoding)
		{
		}

		[Token(Token = "0x6000BA5")]
		[Address(RVA = "0x1A2B0AC", Offset = "0x1A2B0AC", VA = "0x1A2B0AC")]
		public void Close()
		{
		}

		[Token(Token = "0x6000BA7")]
		[Address(RVA = "0x1A2B114", Offset = "0x1A2B114", VA = "0x1A2B114")]
		public long BytesLeft(long offset)
		{
			return default(long);
		}

		[Token(Token = "0x6000BA8")]
		[Address(RVA = "0x1A25D04", Offset = "0x1A25D04", VA = "0x1A25D04")]
		public int Read(ref long offset, byte[] buffer, int index, int count)
		{
			return default(int);
		}

		[Token(Token = "0x6000BA9")]
		[Address(RVA = "0x1A27170", Offset = "0x1A27170", VA = "0x1A27170")]
		public int Read(ref long offset, uint[] buffer, int index, int count)
		{
			return default(int);
		}

		[Token(Token = "0x6000BAA")]
		[Address(RVA = "0x1A277CC", Offset = "0x1A277CC", VA = "0x1A277CC")]
		public byte ReadByte(ref long offset)
		{
			return default(byte);
		}

		[Token(Token = "0x6000BAB")]
		[Address(RVA = "0x1A2B170", Offset = "0x1A2B170", VA = "0x1A2B170")]
		public sbyte ReadSByte(ref long offset)
		{
			return default(sbyte);
		}

		[Token(Token = "0x6000BAC")]
		[Address(RVA = "0x1A269E4", Offset = "0x1A269E4", VA = "0x1A269E4")]
		public short ReadInt16(ref long offset)
		{
			return default(short);
		}

		[Token(Token = "0x6000BAD")]
		[Address(RVA = "0x1A2687C", Offset = "0x1A2687C", VA = "0x1A2687C")]
		public ushort ReadUInt16(ref long offset)
		{
			return default(ushort);
		}

		[Token(Token = "0x6000BAE")]
		[Address(RVA = "0x1A26D70", Offset = "0x1A26D70", VA = "0x1A26D70")]
		public int ReadInt32(ref long offset)
		{
			return default(int);
		}

		[Token(Token = "0x6000BAF")]
		[Address(RVA = "0x1A26404", Offset = "0x1A26404", VA = "0x1A26404")]
		public uint ReadUInt32(ref long offset)
		{
			return default(uint);
		}

		[Token(Token = "0x6000BB0")]
		[Address(RVA = "0x1A27930", Offset = "0x1A27930", VA = "0x1A27930")]
		public long ReadInt64(ref long offset)
		{
			return default(long);
		}

		[Token(Token = "0x6000BB1")]
		[Address(RVA = "0x1A2B2D4", Offset = "0x1A2B2D4", VA = "0x1A2B2D4")]
		public ulong ReadUInt64(ref long offset)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000BB2")]
		[Address(RVA = "0x1A2B43C", Offset = "0x1A2B43C", VA = "0x1A2B43C")]
		public byte[] ReadBytes(ref long offset, int count)
		{
			return null;
		}
	}
	[Token(Token = "0x20001CD")]
	public abstract class AudioDecoder
	{
		[Token(Token = "0x1700007D")]
		public abstract int Position
		{
			[Token(Token = "0x6000BB6")]
			get;
			[Token(Token = "0x6000BB7")]
			set;
		}

		[Token(Token = "0x1700007E")]
		public abstract float totalDecodeTime
		{
			[Token(Token = "0x6000BB9")]
			get;
		}

		[Token(Token = "0x6000BB3")]
		[Address(RVA = "0x1A2B5B4", Offset = "0x1A2B5B4", VA = "0x1A2B5B4")]
		public static AudioDecoder CreateFor(AudioStreamInfo streamInfo)
		{
			return null;
		}

		[Token(Token = "0x6000BB4")]
		public abstract void Init(out AudioClip audioClip, Demux demux, [Optional] LoadOptions loadOptions);

		[Token(Token = "0x6000BB5")]
		public abstract void Shutdown();

		[Token(Token = "0x6000BB8")]
		public abstract void DecodeNext(float[] data, int sampleCount);

		[Token(Token = "0x6000BBA")]
		[Address(RVA = "0x1A2B988", Offset = "0x1A2B988", VA = "0x1A2B988")]
		protected AudioDecoder()
		{
		}
	}
	[Token(Token = "0x20001CE")]
	public class AudioStreamInfo
	{
		[Token(Token = "0x4000A2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint codecFourCC;

		[Token(Token = "0x4000A2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint audioFormat;

		[Token(Token = "0x4000A2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int sampleCount;

		[Token(Token = "0x4000A2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int sampleSize;

		[Token(Token = "0x4000A2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int channels;

		[Token(Token = "0x4000A30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int sampleRate;

		[Token(Token = "0x4000A31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public long lengthBytes;

		[Token(Token = "0x1700007F")]
		public float lengthSeconds
		{
			[Token(Token = "0x6000BBB")]
			[Address(RVA = "0x1A2B990", Offset = "0x1A2B990", VA = "0x1A2B990")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000BBC")]
		[Address(RVA = "0x1A25594", Offset = "0x1A25594", VA = "0x1A25594")]
		public AudioStreamInfo()
		{
		}

		[Token(Token = "0x6000BBD")]
		[Address(RVA = "0x1A2B9A8", Offset = "0x1A2B9A8", VA = "0x1A2B9A8")]
		public AudioStreamInfo(AudioStreamInfo ai)
		{
		}
	}
	[Token(Token = "0x20001CF")]
	public abstract class Demux
	{
		[Token(Token = "0x4000A32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B158", Offset = "0xB4B158")]
		private VideoStreamInfo <videoStreamInfo>k__BackingField;

		[Token(Token = "0x4000A33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B168", Offset = "0xB4B168")]
		private AudioStreamInfo <audioStreamInfo>k__BackingField;

		[Token(Token = "0x17000080")]
		public VideoStreamInfo videoStreamInfo
		{
			[Token(Token = "0x6000BC1")]
			[Address(RVA = "0x1A2558C", Offset = "0x1A2558C", VA = "0x1A2558C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C600", Offset = "0xB4C600")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000BC2")]
			[Address(RVA = "0x1A25584", Offset = "0x1A25584", VA = "0x1A25584")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C610", Offset = "0xB4C610")]
			protected set
			{
			}
		}

		[Token(Token = "0x17000081")]
		public AudioStreamInfo audioStreamInfo
		{
			[Token(Token = "0x6000BC3")]
			[Address(RVA = "0x1A255A4", Offset = "0x1A255A4", VA = "0x1A255A4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C620", Offset = "0xB4C620")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000BC4")]
			[Address(RVA = "0x1A2559C", Offset = "0x1A2559C", VA = "0x1A2559C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C630", Offset = "0xB4C630")]
			protected set
			{
			}
		}

		[Token(Token = "0x17000082")]
		public bool hasVideo
		{
			[Token(Token = "0x6000BC5")]
			[Address(RVA = "0x1A255AC", Offset = "0x1A255AC", VA = "0x1A255AC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000083")]
		public bool hasAudio
		{
			[Token(Token = "0x6000BC6")]
			[Address(RVA = "0x1A259D0", Offset = "0x1A259D0", VA = "0x1A259D0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000084")]
		public abstract int VideoPosition
		{
			[Token(Token = "0x6000BC7")]
			get;
			[Token(Token = "0x6000BC8")]
			set;
		}

		[Token(Token = "0x17000085")]
		public abstract int AudioPosition
		{
			[Token(Token = "0x6000BCA")]
			get;
			[Token(Token = "0x6000BCB")]
			set;
		}

		[Token(Token = "0x6000BBE")]
		[Address(RVA = "0x1A2D96C", Offset = "0x1A2D96C", VA = "0x1A2D96C")]
		public static Demux forSource(Stream sourceStream)
		{
			return null;
		}

		[Token(Token = "0x6000BBF")]
		public abstract void Init(Stream sourceStream, [Optional] LoadOptions loadOptions);

		[Token(Token = "0x6000BC0")]
		public abstract void Shutdown(bool force = false);

		[Token(Token = "0x6000BC9")]
		public abstract int ReadVideoFrame(out byte[] targetBuf);

		[Token(Token = "0x6000BCC")]
		public abstract int ReadAudioSamples(out byte[] targetBuf, int sampleCount);

		[Token(Token = "0x6000BCD")]
		[Address(RVA = "0x1A28888", Offset = "0x1A28888", VA = "0x1A28888")]
		protected Demux()
		{
		}
	}
	[Token(Token = "0x20001D0")]
	public class DuplicateFrameFinder
	{
		[Token(Token = "0x20002FC")]
		public class Options
		{
			[Token(Token = "0x4000E8D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float maxImageDiff;

			[Token(Token = "0x4000E8E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int maxPixelDiff;

			[Token(Token = "0x4000E8F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int maxLookbackFrames;

			[Token(Token = "0x4000E90")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public int toneCompareDistrust;

			[Token(Token = "0x4000E91")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public int pixelCacheSize;

			[Token(Token = "0x4000E92")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public bool otherStreamsAvailable;

			[Token(Token = "0x17000242")]
			public static Options Default
			{
				[Token(Token = "0x60015AF")]
				[Address(RVA = "0x1A2DD78", Offset = "0x1A2DD78", VA = "0x1A2DD78")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60015B0")]
			[Address(RVA = "0x1A2E7E8", Offset = "0x1A2E7E8", VA = "0x1A2E7E8")]
			public Options()
			{
			}
		}

		[Token(Token = "0x20002FD")]
		public struct Stats
		{
			[Token(Token = "0x4000E93")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public long totalFramesCompared;

			[Token(Token = "0x4000E94")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public long framesPartiallyCompared;

			[Token(Token = "0x4000E95")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public long framesFullyCompared;

			[Token(Token = "0x4000E96")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public long pixelCacheQueries;

			[Token(Token = "0x4000E97")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public long pixelCacheHits;

			[Token(Token = "0x4000E98")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public int duplicateCount;

			[Token(Token = "0x17000243")]
			public float framesPartiallyComparedPercent
			{
				[Token(Token = "0x60015B1")]
				[Address(RVA = "0xC356EC", Offset = "0xC356EC", VA = "0xC356EC")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x17000244")]
			public float framesFullyComparedPercent
			{
				[Token(Token = "0x60015B2")]
				[Address(RVA = "0xC3570C", Offset = "0xC3570C", VA = "0xC3570C")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x17000245")]
			public float pixelCacheHitPercent
			{
				[Token(Token = "0x60015B3")]
				[Address(RVA = "0xC35730", Offset = "0xC35730", VA = "0xC35730")]
				get
				{
					return default(float);
				}
			}
		}

		[Token(Token = "0x4000A34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Stats stats;

		[Token(Token = "0x4000A35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int[] duplicateOf;

		[Token(Token = "0x4000A36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Color32[] frameTones;

		[Token(Token = "0x4000A37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Color32[][] pixelCache;

		[Token(Token = "0x4000A38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int currentFrame;

		[Token(Token = "0x4000A39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private VideoDecoder videoDecoder;

		[Token(Token = "0x4000A3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Texture2D framebuffer;

		[Token(Token = "0x4000A3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private int frameOffset;

		[Token(Token = "0x4000A3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private int frameCount;

		[Token(Token = "0x4000A3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Options options;

		[Token(Token = "0x17000086")]
		public int framesProcessed
		{
			[Token(Token = "0x6000BCE")]
			[Address(RVA = "0x1A2DCF8", Offset = "0x1A2DCF8", VA = "0x1A2DCF8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000087")]
		public int[] duplicates
		{
			[Token(Token = "0x6000BCF")]
			[Address(RVA = "0x1A2DD00", Offset = "0x1A2DD00", VA = "0x1A2DD00")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000BD0")]
		[Address(RVA = "0x1A2DD08", Offset = "0x1A2DD08", VA = "0x1A2DD08")]
		public DuplicateFrameFinder(VideoDecoder videoDecoder, Texture2D framebuffer, int frameOffset, int frameCount, [Optional] Options options)
		{
		}

		[Token(Token = "0x6000BD1")]
		[Address(RVA = "0x1A2DDE8", Offset = "0x1A2DDE8", VA = "0x1A2DDE8")]
		public void Reset()
		{
		}

		[Token(Token = "0x6000BD2")]
		[Address(RVA = "0x1A2DDF4", Offset = "0x1A2DDF4", VA = "0x1A2DDF4")]
		public void Reset(int frameOffset, int frameCount, [Optional] Options options)
		{
		}

		[Token(Token = "0x6000BD3")]
		[Address(RVA = "0x1A2DF28", Offset = "0x1A2DF28", VA = "0x1A2DF28")]
		public bool Progress()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BD4")]
		[Address(RVA = "0x1A2E540", Offset = "0x1A2E540", VA = "0x1A2E540")]
		private static int SqrPixelDiff(Color32 c1, Color32 c2)
		{
			return default(int);
		}

		[Token(Token = "0x6000BD5")]
		[Address(RVA = "0x1A2E57C", Offset = "0x1A2E57C", VA = "0x1A2E57C")]
		private static void ImageDiff(out float sqrImageDiff, out int maxPixelDiff, Color32[] a, Color32[] b, bool fasterPixelCompare = false, int considerEveryNthPixel = 1)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001D1")]
	public class LoadOptions
	{
		[Token(Token = "0x4000A3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool _3DSound;

		[Token(Token = "0x4000A3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool preloadAudio;

		[Token(Token = "0x4000A40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		public bool skipVideo;

		[Token(Token = "0x4000A41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13")]
		public bool skipAudio;

		[Token(Token = "0x4000A42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioStreamInfo audioStreamInfo;

		[Token(Token = "0x4000A43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public VideoStreamInfo videoStreamInfo;

		[Token(Token = "0x4000A44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float connectTimeout;

		[Token(Token = "0x17000088")]
		public static LoadOptions Default
		{
			[Token(Token = "0x6000BD6")]
			[Address(RVA = "0x1A2BCA0", Offset = "0x1A2BCA0", VA = "0x1A2BCA0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000BD7")]
		[Address(RVA = "0x1A2E868", Offset = "0x1A2E868", VA = "0x1A2E868")]
		public LoadOptions()
		{
		}
	}
	[Token(Token = "0x20001D2")]
	public class MovieSource
	{
		[Token(Token = "0x4000A45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Stream stream;

		[Token(Token = "0x4000A46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string url;

		[Token(Token = "0x6000BD8")]
		[Address(RVA = "0x1A2E91C", Offset = "0x1A2E91C", VA = "0x1A2E91C")]
		public MovieSource()
		{
		}
	}
	[Token(Token = "0x20001D3")]
	public class Movie
	{
		[Token(Token = "0x4000A47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Stream sourceStream;

		[Token(Token = "0x4000A48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Demux demux;

		[Token(Token = "0x4000A49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public VideoDecoder videoDecoder;

		[Token(Token = "0x4000A4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AudioDecoder audioDecoder;

		[Token(Token = "0x6000BD9")]
		[Address(RVA = "0x1A2E878", Offset = "0x1A2E878", VA = "0x1A2E878")]
		public Movie()
		{
		}
	}
	[Token(Token = "0x20001D4")]
	public class MoviePlayerUtil
	{
		[Token(Token = "0x6000BDA")]
		[Address(RVA = "0x1A2E880", Offset = "0x1A2E880", VA = "0x1A2E880")]
		public static Movie Load(Stream srcStream, out Texture2D targetFramebuffer, [Optional] LoadOptions loadOptions)
		{
			return null;
		}

		[Token(Token = "0x6000BDB")]
		[Address(RVA = "0x1A2EC88", Offset = "0x1A2EC88", VA = "0x1A2EC88")]
		public static Movie Load(Stream srcStream, out Texture2D targetFramebuffer, out AudioClip targetAudioBuffer, [Optional] LoadOptions loadOptions)
		{
			return null;
		}

		[Token(Token = "0x6000BDC")]
		[Address(RVA = "0x1A2ED20", Offset = "0x1A2ED20", VA = "0x1A2ED20")]
		public static Movie Load(string srcUrl, out Texture2D targetFramebuffer, [Optional] LoadOptions loadOptions)
		{
			return null;
		}

		[Token(Token = "0x6000BDD")]
		[Address(RVA = "0x1A2EDBC", Offset = "0x1A2EDBC", VA = "0x1A2EDBC")]
		public static Movie Load(string srcUrl, out Texture2D targetFramebuffer, out AudioClip targetAudioBuffer, [Optional] LoadOptions loadOptions)
		{
			return null;
		}

		[Token(Token = "0x6000BDE")]
		[Address(RVA = "0x1A2E924", Offset = "0x1A2E924", VA = "0x1A2E924")]
		public static Movie Load(MovieSource source, out Texture2D targetFramebuffer, out AudioClip targetAudioBuffer, [Optional] LoadOptions loadOptions)
		{
			return null;
		}

		[Token(Token = "0x6000BDF")]
		[Address(RVA = "0x1A2F208", Offset = "0x1A2F208", VA = "0x1A2F208")]
		public static void Unload(Movie movie)
		{
		}

		[Token(Token = "0x6000BE0")]
		[Address(RVA = "0x1A2F290", Offset = "0x1A2F290", VA = "0x1A2F290")]
		public static byte[] ExtractRawAudio(Stream sourceStream)
		{
			return null;
		}

		[Token(Token = "0x6000BE1")]
		[Address(RVA = "0x1A2F2B4", Offset = "0x1A2F2B4", VA = "0x1A2F2B4")]
		public static byte[] ExtractRawAudio(Stream sourceStream, out Demux demux)
		{
			return null;
		}

		[Token(Token = "0x6000BE2")]
		[Address(RVA = "0x1A2F3C8", Offset = "0x1A2F3C8", VA = "0x1A2F3C8")]
		public static byte[] ExtractRawVideo(Stream sourceStream)
		{
			return null;
		}

		[Token(Token = "0x6000BE3")]
		[Address(RVA = "0x1A2F3EC", Offset = "0x1A2F3EC", VA = "0x1A2F3EC")]
		public static byte[] ExtractRawVideo(Stream sourceStream, out Demux demux)
		{
			return null;
		}

		[Token(Token = "0x6000BE4")]
		[Address(RVA = "0x1A2F528", Offset = "0x1A2F528", VA = "0x1A2F528")]
		public MoviePlayerUtil()
		{
		}
	}
	[Token(Token = "0x20001D5")]
	public class MpException : ApplicationException
	{
		[Token(Token = "0x6000BE5")]
		[Address(RVA = "0x1A2F530", Offset = "0x1A2F530", VA = "0x1A2F530")]
		public MpException()
		{
		}

		[Token(Token = "0x6000BE6")]
		[Address(RVA = "0x1A25854", Offset = "0x1A25854", VA = "0x1A25854")]
		public MpException(string msg)
		{
		}

		[Token(Token = "0x6000BE7")]
		[Address(RVA = "0x1A2F538", Offset = "0x1A2F538", VA = "0x1A2F538")]
		public MpException(string msg, Exception inner)
		{
		}

		[Token(Token = "0x6000BE8")]
		[Address(RVA = "0x1A2F540", Offset = "0x1A2F540", VA = "0x1A2F540")]
		public MpException(SerializationInfo info, StreamingContext ctx)
		{
		}
	}
	[Token(Token = "0x20001D6")]
	public abstract class Remux
	{
		[Token(Token = "0x4000A4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected Stream dstStream;

		[Token(Token = "0x4000A4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private VideoStreamInfo _videoStreamInfo;

		[Token(Token = "0x4000A4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private AudioStreamInfo _audioStreamInfo;

		[Token(Token = "0x17000089")]
		public VideoStreamInfo videoStreamInfo
		{
			[Token(Token = "0x6000BEF")]
			[Address(RVA = "0x1A30F98", Offset = "0x1A30F98", VA = "0x1A30F98")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700008A")]
		public AudioStreamInfo audioStreamInfo
		{
			[Token(Token = "0x6000BF0")]
			[Address(RVA = "0x1A288A0", Offset = "0x1A288A0", VA = "0x1A288A0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000BE9")]
		[Address(RVA = "0x1A28C58", Offset = "0x1A28C58", VA = "0x1A28C58", Slot = "4")]
		public virtual void Init(Stream dstStream, VideoStreamInfo videoStreamInfo, AudioStreamInfo audioStreamInfo)
		{
		}

		[Token(Token = "0x6000BEA")]
		public abstract void Shutdown();

		[Token(Token = "0x6000BEB")]
		public abstract void WriteNextVideoFrame(byte[] frameBytes, int size = -1);

		[Token(Token = "0x6000BEC")]
		public abstract void WriteVideoFrame(int frameOffset, byte[] frameBytes, int size = -1);

		[Token(Token = "0x6000BED")]
		public abstract void WriteNextAudioSamples(byte[] sampleBytes, int size = -1);

		[Token(Token = "0x6000BEE")]
		public abstract void WriteAudioSamples(int sampleOffset, byte[] sampleBytes, int size = -1);

		[Token(Token = "0x6000BF1")]
		[Address(RVA = "0x1A288E0", Offset = "0x1A288E0", VA = "0x1A288E0")]
		protected Remux()
		{
		}
	}
	[Token(Token = "0x20001D7")]
	public class RiffParserException : ApplicationException
	{
		[Token(Token = "0x6000BF2")]
		[Address(RVA = "0x1A32B4C", Offset = "0x1A32B4C", VA = "0x1A32B4C")]
		public RiffParserException()
		{
		}

		[Token(Token = "0x6000BF3")]
		[Address(RVA = "0x1A30FA0", Offset = "0x1A30FA0", VA = "0x1A30FA0")]
		public RiffParserException(string msg)
		{
		}

		[Token(Token = "0x6000BF4")]
		[Address(RVA = "0x1A32B54", Offset = "0x1A32B54", VA = "0x1A32B54")]
		public RiffParserException(string msg, Exception inner)
		{
		}

		[Token(Token = "0x6000BF5")]
		[Address(RVA = "0x1A32B5C", Offset = "0x1A32B5C", VA = "0x1A32B5C")]
		public RiffParserException(SerializationInfo info, StreamingContext ctx)
		{
		}
	}
	[Token(Token = "0x20001D8")]
	public class RiffParser
	{
		[Token(Token = "0x20002FE")]
		public delegate bool ProcessRiffElement(RiffParser rp, uint fourCC, int length);

		[Token(Token = "0x20002FF")]
		public delegate bool ProcessListElement(RiffParser rp, uint fourCC, int length);

		[Token(Token = "0x2000300")]
		public delegate void ProcessChunkElement(RiffParser rp, uint fourCC, int unpaddedLength, int paddedLength);

		[Token(Token = "0x4000A4E")]
		public const uint RIFF4CC = 1179011410u;

		[Token(Token = "0x4000A4F")]
		public const uint RIFX4CC = 1481001298u;

		[Token(Token = "0x4000A50")]
		public const uint LIST4CC = 1414744396u;

		[Token(Token = "0x4000A51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private long nextElementOffset;

		[Token(Token = "0x4000A52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly AtomicBinaryReader reader;

		[Token(Token = "0x4000A53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private uint streamRiff;

		[Token(Token = "0x1700008B")]
		public uint StreamRIFF
		{
			[Token(Token = "0x6000BF9")]
			[Address(RVA = "0x1A32778", Offset = "0x1A32778", VA = "0x1A32778")]
			get
			{
				return default(uint);
			}
		}

		[Token(Token = "0x1700008C")]
		public long Position
		{
			[Token(Token = "0x6000BFA")]
			[Address(RVA = "0x1A2853C", Offset = "0x1A2853C", VA = "0x1A2853C")]
			get
			{
				return default(long);
			}
		}

		[Token(Token = "0x6000BF6")]
		[Address(RVA = "0x1A2516C", Offset = "0x1A2516C", VA = "0x1A2516C")]
		public RiffParser(AtomicBinaryReader reader)
		{
		}

		[Token(Token = "0x6000BF7")]
		[Address(RVA = "0x1A2527C", Offset = "0x1A2527C", VA = "0x1A2527C")]
		public bool ReadNext(ProcessChunkElement chunkCallback, [Optional] ProcessListElement listCallback, [Optional] ProcessRiffElement riffCallback)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BF8")]
		[Address(RVA = "0x1A32770", Offset = "0x1A32770", VA = "0x1A32770")]
		public void Rewind()
		{
		}

		[Token(Token = "0x6000BFB")]
		[Address(RVA = "0x1A28170", Offset = "0x1A28170", VA = "0x1A28170")]
		public static string FromFourCC(uint fourCC)
		{
			return null;
		}

		[Token(Token = "0x6000BFC")]
		[Address(RVA = "0x1A28270", Offset = "0x1A28270", VA = "0x1A28270")]
		public static uint ToFourCC(string fourCC)
		{
			return default(uint);
		}

		[Token(Token = "0x6000BFD")]
		[Address(RVA = "0x1A32780", Offset = "0x1A32780", VA = "0x1A32780")]
		public static uint ToFourCC(char[] fourCC)
		{
			return default(uint);
		}

		[Token(Token = "0x6000BFE")]
		[Address(RVA = "0x1A32868", Offset = "0x1A32868", VA = "0x1A32868")]
		public static uint ToFourCC(char c0, char c1, char c2, char c3)
		{
			return default(uint);
		}
	}
	[Token(Token = "0x20001D9")]
	public class RiffWriterException : ApplicationException
	{
		[Token(Token = "0x6000BFF")]
		[Address(RVA = "0x1A32F18", Offset = "0x1A32F18", VA = "0x1A32F18")]
		public RiffWriterException()
		{
		}

		[Token(Token = "0x6000C00")]
		[Address(RVA = "0x1A32F10", Offset = "0x1A32F10", VA = "0x1A32F10")]
		public RiffWriterException(string msg)
		{
		}

		[Token(Token = "0x6000C01")]
		[Address(RVA = "0x1A32F20", Offset = "0x1A32F20", VA = "0x1A32F20")]
		public RiffWriterException(string msg, Exception inner)
		{
		}

		[Token(Token = "0x6000C02")]
		[Address(RVA = "0x1A32F28", Offset = "0x1A32F28", VA = "0x1A32F28")]
		public RiffWriterException(SerializationInfo info, StreamingContext ctx)
		{
		}
	}
	[Token(Token = "0x20001DA")]
	public class RiffWriter
	{
		[Token(Token = "0x4000A54")]
		public const uint RIFF4CC = 1179011410u;

		[Token(Token = "0x4000A55")]
		public const uint LIST4CC = 1414744396u;

		[Token(Token = "0x4000A56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private BinaryWriter writer;

		[Token(Token = "0x4000A57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Stack<long> stack;

		[Token(Token = "0x1700008D")]
		public BinaryWriter binaryWriter
		{
			[Token(Token = "0x6000C0C")]
			[Address(RVA = "0x1A29BB4", Offset = "0x1A29BB4", VA = "0x1A29BB4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700008E")]
		public long currentElementSize
		{
			[Token(Token = "0x6000C0D")]
			[Address(RVA = "0x1A29D5C", Offset = "0x1A29D5C", VA = "0x1A29D5C")]
			get
			{
				return default(long);
			}
		}

		[Token(Token = "0x6000C03")]
		[Address(RVA = "0x1A28C64", Offset = "0x1A28C64", VA = "0x1A28C64")]
		public RiffWriter(Stream stream)
		{
		}

		[Token(Token = "0x6000C04")]
		[Address(RVA = "0x1A32B64", Offset = "0x1A32B64", VA = "0x1A32B64")]
		public RiffWriter(BinaryWriter writer)
		{
		}

		[Token(Token = "0x6000C05")]
		[Address(RVA = "0x1A28D08", Offset = "0x1A28D08", VA = "0x1A28D08")]
		public void BeginRiff(uint fourCC)
		{
		}

		[Token(Token = "0x6000C06")]
		[Address(RVA = "0x1A28D1C", Offset = "0x1A28D1C", VA = "0x1A28D1C")]
		public void BeginList(uint fourCC)
		{
		}

		[Token(Token = "0x6000C07")]
		[Address(RVA = "0x1A2ADF0", Offset = "0x1A2ADF0", VA = "0x1A2ADF0")]
		public void BeginChunk(uint fourCC)
		{
		}

		[Token(Token = "0x6000C08")]
		[Address(RVA = "0x1A2AD18", Offset = "0x1A2AD18", VA = "0x1A2AD18")]
		public void EndRiff()
		{
		}

		[Token(Token = "0x6000C09")]
		[Address(RVA = "0x1A29714", Offset = "0x1A29714", VA = "0x1A29714")]
		public void EndList()
		{
		}

		[Token(Token = "0x6000C0A")]
		[Address(RVA = "0x1A2AEEC", Offset = "0x1A2AEEC", VA = "0x1A2AEEC")]
		public void EndChunk()
		{
		}

		[Token(Token = "0x6000C0B")]
		[Address(RVA = "0x1A29FBC", Offset = "0x1A29FBC", VA = "0x1A29FBC")]
		public void WriteChunk(uint fourCC, byte[] data, int size = -1)
		{
		}

		[Token(Token = "0x6000C0E")]
		[Address(RVA = "0x1A2AD1C", Offset = "0x1A2AD1C", VA = "0x1A2AD1C")]
		public void Close()
		{
		}

		[Token(Token = "0x6000C0F")]
		[Address(RVA = "0x1A32BE8", Offset = "0x1A32BE8", VA = "0x1A32BE8")]
		private void Begin(uint what, uint fourCC)
		{
		}

		[Token(Token = "0x6000C10")]
		[Address(RVA = "0x1A32D10", Offset = "0x1A32D10", VA = "0x1A32D10")]
		private void End()
		{
		}
	}
	[Token(Token = "0x20001DB")]
	public abstract class Streamer : Demux
	{
		[Token(Token = "0x1700008F")]
		public abstract bool IsConnected
		{
			[Token(Token = "0x6000C13")]
			get;
		}

		[Token(Token = "0x6000C11")]
		[Address(RVA = "0x1A2EE54", Offset = "0x1A2EE54", VA = "0x1A2EE54")]
		public static Streamer forUrl(string url)
		{
			return null;
		}

		[Token(Token = "0x6000C12")]
		public abstract void Connect(string url, [Optional] LoadOptions loadOptions);

		[Token(Token = "0x6000C14")]
		[Address(RVA = "0x1A32F30", Offset = "0x1A32F30", VA = "0x1A32F30", Slot = "4")]
		public override void Init(Stream stream, [Optional] LoadOptions loadOptions)
		{
		}

		[Token(Token = "0x6000C15")]
		[Address(RVA = "0x1A32FA4", Offset = "0x1A32FA4", VA = "0x1A32FA4", Slot = "8")]
		public override int ReadVideoFrame(out byte[] targetBuf)
		{
			return default(int);
		}

		[Token(Token = "0x6000C16")]
		[Address(RVA = "0x1A33018", Offset = "0x1A33018", VA = "0x1A33018", Slot = "11")]
		public override int ReadAudioSamples(out byte[] targetBuf, int sampleCount)
		{
			return default(int);
		}

		[Token(Token = "0x6000C17")]
		[Address(RVA = "0x1A3052C", Offset = "0x1A3052C", VA = "0x1A3052C")]
		protected Streamer()
		{
		}
	}
	[Token(Token = "0x20001DC")]
	public abstract class VideoDecoder
	{
		[Token(Token = "0x17000090")]
		public abstract int Position
		{
			[Token(Token = "0x6000C1B")]
			get;
			[Token(Token = "0x6000C1C")]
			set;
		}

		[Token(Token = "0x17000091")]
		public abstract float lastFrameDecodeTime
		{
			[Token(Token = "0x6000C1F")]
			get;
		}

		[Token(Token = "0x17000092")]
		public abstract int lastFrameSizeBytes
		{
			[Token(Token = "0x6000C20")]
			get;
		}

		[Token(Token = "0x17000093")]
		public abstract float totalDecodeTime
		{
			[Token(Token = "0x6000C21")]
			get;
		}

		[Token(Token = "0x17000094")]
		public abstract long totalSizeBytes
		{
			[Token(Token = "0x6000C22")]
			get;
		}

		[Token(Token = "0x6000C18")]
		[Address(RVA = "0x1A2EF34", Offset = "0x1A2EF34", VA = "0x1A2EF34")]
		public static VideoDecoder CreateFor(VideoStreamInfo streamInfo)
		{
			return null;
		}

		[Token(Token = "0x6000C19")]
		public abstract void Init(out Texture2D framebuffer, Demux demux, [Optional] LoadOptions loadOptions);

		[Token(Token = "0x6000C1A")]
		public abstract void Shutdown();

		[Token(Token = "0x6000C1D")]
		public abstract void DecodeNext();

		[Token(Token = "0x6000C1E")]
		[Address(RVA = "0x1A2E50C", Offset = "0x1A2E50C", VA = "0x1A2E50C")]
		public void Decode(int frame)
		{
		}

		[Token(Token = "0x6000C23")]
		[Address(RVA = "0x1A2C6F8", Offset = "0x1A2C6F8", VA = "0x1A2C6F8")]
		protected VideoDecoder()
		{
		}
	}
	[Token(Token = "0x20001DD")]
	public class VideoStreamInfo
	{
		[Token(Token = "0x4000A58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint codecFourCC;

		[Token(Token = "0x4000A59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int bitsPerPixel;

		[Token(Token = "0x4000A5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int frameCount;

		[Token(Token = "0x4000A5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int width;

		[Token(Token = "0x4000A5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int height;

		[Token(Token = "0x4000A5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float framerate;

		[Token(Token = "0x4000A5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public long lengthBytes;

		[Token(Token = "0x17000095")]
		public float lengthSeconds
		{
			[Token(Token = "0x6000C24")]
			[Address(RVA = "0x1A3308C", Offset = "0x1A3308C", VA = "0x1A3308C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000C25")]
		[Address(RVA = "0x1A2556C", Offset = "0x1A2556C", VA = "0x1A2556C")]
		public VideoStreamInfo()
		{
		}

		[Token(Token = "0x6000C26")]
		[Address(RVA = "0x1A330A0", Offset = "0x1A330A0", VA = "0x1A330A0")]
		public VideoStreamInfo(VideoStreamInfo vi)
		{
		}
	}
}
namespace MP.RAW
{
	[Token(Token = "0x20001DE")]
	public class RawMjpegDemux : Demux
	{
		[Token(Token = "0x4000A5F")]
		private const int FILE_READ_BUFFER_SIZE = 8096;

		[Token(Token = "0x4000A60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private AtomicBinaryReader reader;

		[Token(Token = "0x4000A61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<long> frameStartIndex;

		[Token(Token = "0x4000A62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<int> frameSize;

		[Token(Token = "0x4000A63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private byte[] rawJpgBuffer;

		[Token(Token = "0x4000A64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int nextVideoFrame;

		[Token(Token = "0x17000096")]
		public override int VideoPosition
		{
			[Token(Token = "0x6000C29")]
			[Address(RVA = "0x1A30924", Offset = "0x1A30924", VA = "0x1A30924", Slot = "6")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000C2A")]
			[Address(RVA = "0x1A3092C", Offset = "0x1A3092C", VA = "0x1A3092C", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x17000097")]
		public override int AudioPosition
		{
			[Token(Token = "0x6000C2C")]
			[Address(RVA = "0x1A30A50", Offset = "0x1A30A50", VA = "0x1A30A50", Slot = "9")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000C2D")]
			[Address(RVA = "0x1A30AC4", Offset = "0x1A30AC4", VA = "0x1A30AC4", Slot = "10")]
			set
			{
			}
		}

		[Token(Token = "0x6000C27")]
		[Address(RVA = "0x1A30534", Offset = "0x1A30534", VA = "0x1A30534", Slot = "4")]
		public override void Init(Stream sourceStream, [Optional] LoadOptions loadOptions)
		{
		}

		[Token(Token = "0x6000C28")]
		[Address(RVA = "0x1A30920", Offset = "0x1A30920", VA = "0x1A30920", Slot = "5")]
		public override void Shutdown(bool force = false)
		{
		}

		[Token(Token = "0x6000C2B")]
		[Address(RVA = "0x1A30934", Offset = "0x1A30934", VA = "0x1A30934", Slot = "8")]
		public override int ReadVideoFrame(out byte[] targetBuf)
		{
			return default(int);
		}

		[Token(Token = "0x6000C2E")]
		[Address(RVA = "0x1A30B38", Offset = "0x1A30B38", VA = "0x1A30B38", Slot = "11")]
		public override int ReadAudioSamples(out byte[] targetBuf, int sampleCount)
		{
			return default(int);
		}

		[Token(Token = "0x6000C2F")]
		[Address(RVA = "0x1A2DC60", Offset = "0x1A2DC60", VA = "0x1A2DC60")]
		public RawMjpegDemux()
		{
		}
	}
	[Token(Token = "0x20001DF")]
	public class RawPcmDemux : Demux
	{
		[Token(Token = "0x4000A65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private AtomicBinaryReader reader;

		[Token(Token = "0x4000A66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private byte[] rawAudioBuf;

		[Token(Token = "0x4000A67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int nextAudioSample;

		[Token(Token = "0x17000098")]
		public override int VideoPosition
		{
			[Token(Token = "0x6000C32")]
			[Address(RVA = "0x1A30CB8", Offset = "0x1A30CB8", VA = "0x1A30CB8", Slot = "6")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000C33")]
			[Address(RVA = "0x1A30D2C", Offset = "0x1A30D2C", VA = "0x1A30D2C", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x17000099")]
		public override int AudioPosition
		{
			[Token(Token = "0x6000C35")]
			[Address(RVA = "0x1A30E14", Offset = "0x1A30E14", VA = "0x1A30E14", Slot = "9")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000C36")]
			[Address(RVA = "0x1A30E1C", Offset = "0x1A30E1C", VA = "0x1A30E1C", Slot = "10")]
			set
			{
			}
		}

		[Token(Token = "0x6000C30")]
		[Address(RVA = "0x1A30BAC", Offset = "0x1A30BAC", VA = "0x1A30BAC", Slot = "4")]
		public override void Init(Stream sourceStream, [Optional] LoadOptions loadOptions)
		{
		}

		[Token(Token = "0x6000C31")]
		[Address(RVA = "0x1A30CB4", Offset = "0x1A30CB4", VA = "0x1A30CB4", Slot = "5")]
		public override void Shutdown(bool force = false)
		{
		}

		[Token(Token = "0x6000C34")]
		[Address(RVA = "0x1A30DA0", Offset = "0x1A30DA0", VA = "0x1A30DA0", Slot = "8")]
		public override int ReadVideoFrame(out byte[] targetBuf)
		{
			return default(int);
		}

		[Token(Token = "0x6000C37")]
		[Address(RVA = "0x1A30E24", Offset = "0x1A30E24", VA = "0x1A30E24", Slot = "11")]
		public override int ReadAudioSamples(out byte[] targetBuf, int sampleCount)
		{
			return default(int);
		}

		[Token(Token = "0x6000C38")]
		[Address(RVA = "0x1A30F90", Offset = "0x1A30F90", VA = "0x1A30F90")]
		public RawPcmDemux()
		{
		}
	}
}
namespace MP.Net
{
	[Token(Token = "0x20001E0")]
	public class HttpMjpegStreamer : Streamer
	{
		[Token(Token = "0x4000A68")]
		private const int INITIAL_BYTE_BUFFER_SIZE = 131072;

		[Token(Token = "0x4000A69")]
		private const int MAX_BYTE_BUFFER_SIZE = 1048576;

		[Token(Token = "0x4000A6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private object locker;

		[Token(Token = "0x4000A6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Thread thread;

		[Token(Token = "0x4000A6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float timeout;

		[Token(Token = "0x4000A6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private byte[][] frameRingBuffer;

		[Token(Token = "0x4000A6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int receivedFrameCount;

		[Token(Token = "0x4000A6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private string _status;

		[Token(Token = "0x4000A70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private long _bytesReceived;

		[Token(Token = "0x4000A71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool shouldStop;

		[Token(Token = "0x4000A72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		private bool connected;

		[Token(Token = "0x1700009A")]
		public string Status
		{
			[Token(Token = "0x6000C39")]
			[Address(RVA = "0x1A2F548", Offset = "0x1A2F548", VA = "0x1A2F548")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C3A")]
			[Address(RVA = "0x1A2F5D8", Offset = "0x1A2F5D8", VA = "0x1A2F5D8")]
			private set
			{
			}
		}

		[Token(Token = "0x1700009B")]
		public long BytesReceived
		{
			[Token(Token = "0x6000C3B")]
			[Address(RVA = "0x1A2F66C", Offset = "0x1A2F66C", VA = "0x1A2F66C")]
			get
			{
				return default(long);
			}
			[Token(Token = "0x6000C3C")]
			[Address(RVA = "0x1A2F6FC", Offset = "0x1A2F6FC", VA = "0x1A2F6FC")]
			private set
			{
			}
		}

		[Token(Token = "0x1700009C")]
		public override bool IsConnected
		{
			[Token(Token = "0x6000C3F")]
			[Address(RVA = "0x1A2F998", Offset = "0x1A2F998", VA = "0x1A2F998", Slot = "13")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700009D")]
		public override int VideoPosition
		{
			[Token(Token = "0x6000C40")]
			[Address(RVA = "0x1A2F9E4", Offset = "0x1A2F9E4", VA = "0x1A2F9E4", Slot = "6")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000C41")]
			[Address(RVA = "0x1A2F9EC", Offset = "0x1A2F9EC", VA = "0x1A2F9EC", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x1700009E")]
		public override int AudioPosition
		{
			[Token(Token = "0x6000C43")]
			[Address(RVA = "0x1A2FB6C", Offset = "0x1A2FB6C", VA = "0x1A2FB6C", Slot = "9")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000C44")]
			[Address(RVA = "0x1A2FBE0", Offset = "0x1A2FBE0", VA = "0x1A2FBE0", Slot = "10")]
			set
			{
			}
		}

		[Token(Token = "0x6000C3D")]
		[Address(RVA = "0x1A2F790", Offset = "0x1A2F790", VA = "0x1A2F790", Slot = "12")]
		public override void Connect(string url, [Optional] LoadOptions loadOptions)
		{
		}

		[Token(Token = "0x6000C3E")]
		[Address(RVA = "0x1A2F954", Offset = "0x1A2F954", VA = "0x1A2F954", Slot = "5")]
		public override void Shutdown(bool force = false)
		{
		}

		[Token(Token = "0x6000C42")]
		[Address(RVA = "0x1A2FA60", Offset = "0x1A2FA60", VA = "0x1A2FA60", Slot = "8")]
		public override int ReadVideoFrame(out byte[] targetBuf)
		{
			return default(int);
		}

		[Token(Token = "0x6000C45")]
		[Address(RVA = "0x1A2FC54", Offset = "0x1A2FC54", VA = "0x1A2FC54", Slot = "11")]
		public override int ReadAudioSamples(out byte[] targetBuf, int sampleCount)
		{
			return default(int);
		}

		[Token(Token = "0x6000C46")]
		[Address(RVA = "0x1A2FCC8", Offset = "0x1A2FCC8", VA = "0x1A2FCC8")]
		private void FrameReceived(byte[] bytes)
		{
		}

		[Token(Token = "0x6000C47")]
		[Address(RVA = "0x1A2FE50", Offset = "0x1A2FE50", VA = "0x1A2FE50")]
		private void ThreadRun(object url)
		{
		}

		[Token(Token = "0x6000C48")]
		[Address(RVA = "0x1A303F0", Offset = "0x1A303F0", VA = "0x1A303F0")]
		private static string ReadLine(BinaryReader reader)
		{
			return null;
		}

		[Token(Token = "0x6000C49")]
		[Address(RVA = "0x1A304C4", Offset = "0x1A304C4", VA = "0x1A304C4")]
		public HttpMjpegStreamer()
		{
		}
	}
}
namespace MP.Decoder
{
	[Token(Token = "0x20001E1")]
	public class AudioDecoderPCM : AudioDecoder
	{
		[Token(Token = "0x4000A73")]
		public const uint FOURCC_MS = 1u;

		[Token(Token = "0x4000A74")]
		public const uint FORMAT_UNCOMPRESSED = 1u;

		[Token(Token = "0x4000A75")]
		public const uint FORMAT_ALAW = 6u;

		[Token(Token = "0x4000A76")]
		public const uint FORMAT_ULAW = 7u;

		[Token(Token = "0x4000A77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private AudioStreamInfo streamInfo;

		[Token(Token = "0x4000A78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Demux demux;

		[Token(Token = "0x4000A79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private AudioClip audioClip;

		[Token(Token = "0x4000A7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float _totalDecodeTime;

		[Token(Token = "0x4000A7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Stopwatch watch;

		[Token(Token = "0x4000A7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static float[] ALawExpandLookupTable;

		[Token(Token = "0x4000A7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static float[] uLawExpandLookupTable;

		[Token(Token = "0x1700009F")]
		public override float totalDecodeTime
		{
			[Token(Token = "0x6000C4D")]
			[Address(RVA = "0x1A2BDF4", Offset = "0x1A2BDF4", VA = "0x1A2BDF4", Slot = "9")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000A0")]
		public override int Position
		{
			[Token(Token = "0x6000C4E")]
			[Address(RVA = "0x1A2BDFC", Offset = "0x1A2BDFC", VA = "0x1A2BDFC", Slot = "6")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000C4F")]
			[Address(RVA = "0x1A2BE30", Offset = "0x1A2BE30", VA = "0x1A2BE30", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x6000C4A")]
		[Address(RVA = "0x1A2B7F0", Offset = "0x1A2B7F0", VA = "0x1A2B7F0")]
		public AudioDecoderPCM(AudioStreamInfo streamInfo)
		{
		}

		[Token(Token = "0x6000C4B")]
		[Address(RVA = "0x1A2BA90", Offset = "0x1A2BA90", VA = "0x1A2BA90", Slot = "4")]
		public override void Init(out AudioClip audioClip, Demux demux, [Optional] LoadOptions loadOptions)
		{
		}

		[Token(Token = "0x6000C4C")]
		[Address(RVA = "0x1A2BD04", Offset = "0x1A2BD04", VA = "0x1A2BD04", Slot = "5")]
		public override void Shutdown()
		{
		}

		[Token(Token = "0x6000C50")]
		[Address(RVA = "0x1A2BE6C", Offset = "0x1A2BE6C", VA = "0x1A2BE6C", Slot = "8")]
		public override void DecodeNext(float[] data, int sampleCount)
		{
		}

		[Token(Token = "0x6000C51")]
		[Address(RVA = "0x1A2C510", Offset = "0x1A2C510", VA = "0x1A2C510")]
		public void OnAudioRead(float[] data)
		{
		}

		[Token(Token = "0x6000C52")]
		[Address(RVA = "0x1A2C570", Offset = "0x1A2C570", VA = "0x1A2C570")]
		public void OnAudioSeek(int newPosition)
		{
		}
	}
	[Token(Token = "0x20001E2")]
	public class VideoDecoderMJPEG : VideoDecoderUnity
	{
		[Token(Token = "0x4000A7E")]
		public const uint FOURCC_MJPG = 1196444237u;

		[Token(Token = "0x4000A7F")]
		public const uint FOURCC_CJPG = 1196444227u;

		[Token(Token = "0x4000A80")]
		public const uint FOURCC_ffds = 1935959654u;

		[Token(Token = "0x6000C54")]
		[Address(RVA = "0x1A2C630", Offset = "0x1A2C630", VA = "0x1A2C630")]
		public VideoDecoderMJPEG([Optional] VideoStreamInfo streamInfo)
		{
		}
	}
	[Token(Token = "0x20001E3")]
	public class VideoDecoderMPNG : VideoDecoderUnity
	{
		[Token(Token = "0x4000A81")]
		public const uint FOURCC_MPNG = 1196314701u;

		[Token(Token = "0x6000C55")]
		[Address(RVA = "0x1A2C698", Offset = "0x1A2C698", VA = "0x1A2C698")]
		public VideoDecoderMPNG([Optional] VideoStreamInfo streamInfo)
		{
		}
	}
	[Token(Token = "0x20001E4")]
	public class VideoDecoderRGB : VideoDecoder
	{
		[Token(Token = "0x4000A82")]
		public const uint FOURCC_NULL = 0u;

		[Token(Token = "0x4000A83")]
		public const uint FOURCC_DIB_ = 541215044u;

		[Token(Token = "0x4000A84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Texture2D framebuffer;

		[Token(Token = "0x4000A85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Color32[] rgbBuffer;

		[Token(Token = "0x4000A86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Demux demux;

		[Token(Token = "0x4000A87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private VideoStreamInfo info;

		[Token(Token = "0x4000A88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float _lastFrameDecodeTime;

		[Token(Token = "0x4000A89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int _lastFrameSizeBytes;

		[Token(Token = "0x4000A8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float _totalDecodeTime;

		[Token(Token = "0x4000A8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private long _totalSizeBytes;

		[Token(Token = "0x4000A8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Stopwatch watch;

		[Token(Token = "0x170000A1")]
		public override int Position
		{
			[Token(Token = "0x6000C59")]
			[Address(RVA = "0x1A2C9C8", Offset = "0x1A2C9C8", VA = "0x1A2C9C8", Slot = "6")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000C5A")]
			[Address(RVA = "0x1A2C9FC", Offset = "0x1A2C9FC", VA = "0x1A2C9FC", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x170000A2")]
		public override float lastFrameDecodeTime
		{
			[Token(Token = "0x6000C5C")]
			[Address(RVA = "0x1A2D218", Offset = "0x1A2D218", VA = "0x1A2D218", Slot = "9")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000A3")]
		public override int lastFrameSizeBytes
		{
			[Token(Token = "0x6000C5D")]
			[Address(RVA = "0x1A2D220", Offset = "0x1A2D220", VA = "0x1A2D220", Slot = "10")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000A4")]
		public override float totalDecodeTime
		{
			[Token(Token = "0x6000C5E")]
			[Address(RVA = "0x1A2D228", Offset = "0x1A2D228", VA = "0x1A2D228", Slot = "11")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000A5")]
		public override long totalSizeBytes
		{
			[Token(Token = "0x6000C5F")]
			[Address(RVA = "0x1A2D230", Offset = "0x1A2D230", VA = "0x1A2D230", Slot = "12")]
			get
			{
				return default(long);
			}
		}

		[Token(Token = "0x6000C56")]
		[Address(RVA = "0x1A2C6CC", Offset = "0x1A2C6CC", VA = "0x1A2C6CC")]
		public VideoDecoderRGB([Optional] VideoStreamInfo info)
		{
		}

		[Token(Token = "0x6000C57")]
		[Address(RVA = "0x1A2C700", Offset = "0x1A2C700", VA = "0x1A2C700", Slot = "4")]
		public override void Init(out Texture2D framebuffer, Demux demux, [Optional] LoadOptions loadOptions)
		{
		}

		[Token(Token = "0x6000C58")]
		[Address(RVA = "0x1A2C8D8", Offset = "0x1A2C8D8", VA = "0x1A2C8D8", Slot = "5")]
		public override void Shutdown()
		{
		}

		[Token(Token = "0x6000C5B")]
		[Address(RVA = "0x1A2CA38", Offset = "0x1A2CA38", VA = "0x1A2CA38", Slot = "8")]
		public override void DecodeNext()
		{
		}
	}
	[Token(Token = "0x20001E5")]
	public abstract class VideoDecoderUnity : VideoDecoder
	{
		[Token(Token = "0x4000A8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected Texture2D framebuffer;

		[Token(Token = "0x4000A8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected VideoStreamInfo streamInfo;

		[Token(Token = "0x4000A8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected Demux demux;

		[Token(Token = "0x4000A90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float _lastFrameDecodeTime;

		[Token(Token = "0x4000A91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int _lastFrameSizeBytes;

		[Token(Token = "0x4000A92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float _totalDecodeTime;

		[Token(Token = "0x4000A93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private long _totalSizeBytes;

		[Token(Token = "0x4000A94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Stopwatch watch;

		[Token(Token = "0x4000A95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int lastFbWidth;

		[Token(Token = "0x4000A96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private int lastFbHeight;

		[Token(Token = "0x170000A6")]
		public override int Position
		{
			[Token(Token = "0x6000C63")]
			[Address(RVA = "0x1A2D420", Offset = "0x1A2D420", VA = "0x1A2D420", Slot = "6")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000C64")]
			[Address(RVA = "0x1A2D454", Offset = "0x1A2D454", VA = "0x1A2D454", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x170000A7")]
		public override float lastFrameDecodeTime
		{
			[Token(Token = "0x6000C66")]
			[Address(RVA = "0x1A2D94C", Offset = "0x1A2D94C", VA = "0x1A2D94C", Slot = "9")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000A8")]
		public override int lastFrameSizeBytes
		{
			[Token(Token = "0x6000C67")]
			[Address(RVA = "0x1A2D954", Offset = "0x1A2D954", VA = "0x1A2D954", Slot = "10")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000A9")]
		public override float totalDecodeTime
		{
			[Token(Token = "0x6000C68")]
			[Address(RVA = "0x1A2D95C", Offset = "0x1A2D95C", VA = "0x1A2D95C", Slot = "11")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000AA")]
		public override long totalSizeBytes
		{
			[Token(Token = "0x6000C69")]
			[Address(RVA = "0x1A2D964", Offset = "0x1A2D964", VA = "0x1A2D964", Slot = "12")]
			get
			{
				return default(long);
			}
		}

		[Token(Token = "0x6000C60")]
		[Address(RVA = "0x1A2C664", Offset = "0x1A2C664", VA = "0x1A2C664")]
		public VideoDecoderUnity([Optional] VideoStreamInfo streamInfo)
		{
		}

		[Token(Token = "0x6000C61")]
		[Address(RVA = "0x1A2D238", Offset = "0x1A2D238", VA = "0x1A2D238", Slot = "4")]
		public override void Init(out Texture2D framebuffer, Demux demux, [Optional] LoadOptions loadOptions)
		{
		}

		[Token(Token = "0x6000C62")]
		[Address(RVA = "0x1A2D330", Offset = "0x1A2D330", VA = "0x1A2D330", Slot = "5")]
		public override void Shutdown()
		{
		}

		[Token(Token = "0x6000C65")]
		[Address(RVA = "0x1A2D490", Offset = "0x1A2D490", VA = "0x1A2D490", Slot = "8")]
		public override void DecodeNext()
		{
		}
	}
}
namespace MP.AVI
{
	[Token(Token = "0x20001E6")]
	public class AVIMainHeader
	{
		[Token(Token = "0x4000A97")]
		public const uint AVIF_COPYRIGHTED = 131072u;

		[Token(Token = "0x4000A98")]
		public const uint AVIF_HASINDEX = 16u;

		[Token(Token = "0x4000A99")]
		public const uint AVIF_ISINTERLEAVED = 256u;

		[Token(Token = "0x4000A9A")]
		public const uint AVIF_MUSTUSEINDEX = 32u;

		[Token(Token = "0x4000A9B")]
		public const uint AVIF_TRUSTCKTYPE = 2048u;

		[Token(Token = "0x4000A9C")]
		public const uint AVIF_WASCAPTUREFILE = 65536u;

		[Token(Token = "0x4000A9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint dwMicroSecPerFrame;

		[Token(Token = "0x4000A9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint dwMaxBytesPerSec;

		[Token(Token = "0x4000A9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint dwPaddingGranularity;

		[Token(Token = "0x4000AA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public uint dwFlags;

		[Token(Token = "0x4000AA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public uint dwTotalFrames;

		[Token(Token = "0x4000AA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public uint dwInitialFrames;

		[Token(Token = "0x4000AA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public uint dwStreams;

		[Token(Token = "0x4000AA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public uint dwSuggestedBufferSize;

		[Token(Token = "0x4000AA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public uint dwWidth;

		[Token(Token = "0x4000AA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public uint dwHeight;

		[Token(Token = "0x4000AA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public uint dwReserved0;

		[Token(Token = "0x4000AA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public uint dwReserved1;

		[Token(Token = "0x4000AA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public uint dwReserved2;

		[Token(Token = "0x4000AAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public uint dwReserved3;

		[Token(Token = "0x6000C6A")]
		[Address(RVA = "0x1A24954", Offset = "0x1A24954", VA = "0x1A24954")]
		public AVIMainHeader()
		{
		}
	}
	[Token(Token = "0x20001E7")]
	public class AVIStreamHeader
	{
		[Token(Token = "0x4000AAB")]
		public const uint AVISF_DISABLED = 1u;

		[Token(Token = "0x4000AAC")]
		public const uint AVISF_VIDEO_PALCHANGES = 65536u;

		[Token(Token = "0x4000AAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint fccType;

		[Token(Token = "0x4000AAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint fccHandler;

		[Token(Token = "0x4000AAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint dwFlags;

		[Token(Token = "0x4000AB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public ushort wPriority;

		[Token(Token = "0x4000AB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
		public ushort wLanguage;

		[Token(Token = "0x4000AB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public uint dwInitialFrames;

		[Token(Token = "0x4000AB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public uint dwScale;

		[Token(Token = "0x4000AB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public uint dwRate;

		[Token(Token = "0x4000AB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public uint dwStart;

		[Token(Token = "0x4000AB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public uint dwLength;

		[Token(Token = "0x4000AB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public uint dwSuggestedBufferSize;

		[Token(Token = "0x4000AB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public uint dwQuality;

		[Token(Token = "0x4000AB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public uint dwSampleSize;

		[Token(Token = "0x4000ABA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public short rcFrameLeft;

		[Token(Token = "0x4000ABB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
		public short rcFrameTop;

		[Token(Token = "0x4000ABC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public short rcFrameRight;

		[Token(Token = "0x4000ABD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x46")]
		public short rcFrameBottom;

		[Token(Token = "0x6000C6B")]
		[Address(RVA = "0x1A2495C", Offset = "0x1A2495C", VA = "0x1A2495C")]
		public AVIStreamHeader()
		{
		}
	}
	[Token(Token = "0x20001E8")]
	public class ODMLHeader
	{
		[Token(Token = "0x4000ABE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint dwTotalFrames;

		[Token(Token = "0x6000C6C")]
		[Address(RVA = "0x1A270F8", Offset = "0x1A270F8", VA = "0x1A270F8")]
		public ODMLHeader()
		{
		}
	}
	[Token(Token = "0x20001E9")]
	public class BitmapInfoHeader
	{
		[Token(Token = "0x4000ABF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint biSize;

		[Token(Token = "0x4000AC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int biWidth;

		[Token(Token = "0x4000AC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int biHeight;

		[Token(Token = "0x4000AC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public ushort biPlanes;

		[Token(Token = "0x4000AC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
		public ushort biBitCount;

		[Token(Token = "0x4000AC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public uint biCompression;

		[Token(Token = "0x4000AC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public uint biSizeImage;

		[Token(Token = "0x4000AC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int biXPelsPerMeter;

		[Token(Token = "0x4000AC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int biYPelsPerMeter;

		[Token(Token = "0x4000AC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public uint biClrUsed;

		[Token(Token = "0x4000AC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public uint biClrImportant;

		[Token(Token = "0x6000C6D")]
		[Address(RVA = "0x1A26D68", Offset = "0x1A26D68", VA = "0x1A26D68")]
		public BitmapInfoHeader()
		{
		}
	}
	[Token(Token = "0x20001EA")]
	public class WaveFormatEx
	{
		[Token(Token = "0x4000ACA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ushort wFormatTag;

		[Token(Token = "0x4000ACB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		public ushort nChannels;

		[Token(Token = "0x4000ACC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint nSamplesPerSec;

		[Token(Token = "0x4000ACD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint nAvgBytesPerSec;

		[Token(Token = "0x4000ACE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public ushort nBlockAlign;

		[Token(Token = "0x4000ACF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
		public ushort wBitsPerSample;

		[Token(Token = "0x4000AD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ushort cbSize;

		[Token(Token = "0x6000C6E")]
		[Address(RVA = "0x1A27058", Offset = "0x1A27058", VA = "0x1A27058")]
		public WaveFormatEx()
		{
		}
	}
	[Token(Token = "0x20001EB")]
	public class AviStreamIndex
	{
		[Token(Token = "0x2000301")]
		public class Entry
		{
			[Token(Token = "0x4000E99")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public long chunkOffset;

			[Token(Token = "0x4000E9A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int chunkLength;

			[Token(Token = "0x4000E9B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public bool isKeyframe;

			[Token(Token = "0x60015C0")]
			[Address(RVA = "0x1A273C0", Offset = "0x1A273C0", VA = "0x1A273C0")]
			public Entry()
			{
			}
		}

		[Token(Token = "0x2000302")]
		public enum Type
		{
			[Token(Token = "0x4000E9D")]
			SUPERINDEX = 0,
			[Token(Token = "0x4000E9E")]
			CHUNKS = 1,
			[Token(Token = "0x4000E9F")]
			DATA = 0x80
		}

		[Token(Token = "0x4000AD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint streamId;

		[Token(Token = "0x4000AD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<Entry> entries;

		[Token(Token = "0x4000AD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int globalOffset;

		[Token(Token = "0x6000C6F")]
		[Address(RVA = "0x1A27100", Offset = "0x1A27100", VA = "0x1A27100")]
		public AviStreamIndex()
		{
		}
	}
	[Token(Token = "0x20001EC")]
	public class AVIFile
	{
		[Token(Token = "0x4000AD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AVIMainHeader avih;

		[Token(Token = "0x4000AD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AVIStreamHeader strhVideo;

		[Token(Token = "0x4000AD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BitmapInfoHeader strfVideo;

		[Token(Token = "0x4000AD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AVIStreamHeader strhAudio;

		[Token(Token = "0x4000AD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public WaveFormatEx strfAudio;

		[Token(Token = "0x4000AD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public ODMLHeader odml;

		[Token(Token = "0x4000ADA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AviStreamIndex videoIndex;

		[Token(Token = "0x4000ADB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public AviStreamIndex audioIndex;

		[Token(Token = "0x6000C70")]
		[Address(RVA = "0x1A2494C", Offset = "0x1A2494C", VA = "0x1A2494C")]
		public AVIFile()
		{
		}
	}
	[Token(Token = "0x20001ED")]
	public class AviDemux : Demux
	{
		[Token(Token = "0x4000ADC")]
		public const uint ID_AVI_ = 541677121u;

		[Token(Token = "0x4000ADD")]
		public const uint ID_AVIX = 1481201217u;

		[Token(Token = "0x4000ADE")]
		public const uint ID_hdrl = 1819436136u;

		[Token(Token = "0x4000ADF")]
		public const uint ID_avih = 1751742049u;

		[Token(Token = "0x4000AE0")]
		public const uint ID_strl = 1819440243u;

		[Token(Token = "0x4000AE1")]
		public const uint ID_strh = 1752331379u;

		[Token(Token = "0x4000AE2")]
		public const uint ID_strf = 1718776947u;

		[Token(Token = "0x4000AE3")]
		public const uint ID_odml = 1819108463u;

		[Token(Token = "0x4000AE4")]
		public const uint ID_dmlh = 1751936356u;

		[Token(Token = "0x4000AE5")]
		public const uint ID_movi = 1769369453u;

		[Token(Token = "0x4000AE6")]
		public const uint ID_00dc = 1667510320u;

		[Token(Token = "0x4000AE7")]
		public const uint ID_00db = 1650733104u;

		[Token(Token = "0x4000AE8")]
		public const uint ID_01wb = 1651978544u;

		[Token(Token = "0x4000AE9")]
		public const uint ID_idx1 = 829973609u;

		[Token(Token = "0x4000AEA")]
		public const uint ID_indx = 2019847785u;

		[Token(Token = "0x4000AEB")]
		public const uint FCC_vids = 1935960438u;

		[Token(Token = "0x4000AEC")]
		public const uint FCC_auds = 1935963489u;

		[Token(Token = "0x4000AED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AVIFile avi;

		[Token(Token = "0x4000AEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private AtomicBinaryReader reader;

		[Token(Token = "0x4000AEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private uint currentStrh4CC;

		[Token(Token = "0x4000AF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private long idx1EntryOffset;

		[Token(Token = "0x4000AF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private long idx1Offset;

		[Token(Token = "0x4000AF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int idx1Size;

		[Token(Token = "0x4000AF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private byte[] rawVideoBuf;

		[Token(Token = "0x4000AF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private byte[] rawAudioBuf;

		[Token(Token = "0x4000AF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private long[] audioByteIndex;

		[Token(Token = "0x4000AF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int nextVideoFrame;

		[Token(Token = "0x4000AF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private int nextAudioSample;

		[Token(Token = "0x170000AB")]
		public override int VideoPosition
		{
			[Token(Token = "0x6000C73")]
			[Address(RVA = "0x1A25BB8", Offset = "0x1A25BB8", VA = "0x1A25BB8", Slot = "6")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000C74")]
			[Address(RVA = "0x1A25BC0", Offset = "0x1A25BC0", VA = "0x1A25BC0", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x170000AC")]
		public override int AudioPosition
		{
			[Token(Token = "0x6000C76")]
			[Address(RVA = "0x1A25E54", Offset = "0x1A25E54", VA = "0x1A25E54", Slot = "9")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000C77")]
			[Address(RVA = "0x1A25E5C", Offset = "0x1A25E5C", VA = "0x1A25E5C", Slot = "10")]
			set
			{
			}
		}

		[Token(Token = "0x6000C71")]
		[Address(RVA = "0x1A24964", Offset = "0x1A24964", VA = "0x1A24964", Slot = "4")]
		public override void Init(Stream sourceStream, [Optional] LoadOptions loadOptions)
		{
		}

		[Token(Token = "0x6000C72")]
		[Address(RVA = "0x1A25BB4", Offset = "0x1A25BB4", VA = "0x1A25BB4", Slot = "5")]
		public override void Shutdown(bool force = false)
		{
		}

		[Token(Token = "0x6000C75")]
		[Address(RVA = "0x1A25BC8", Offset = "0x1A25BC8", VA = "0x1A25BC8", Slot = "8")]
		public override int ReadVideoFrame(out byte[] targetBuf)
		{
			return default(int);
		}

		[Token(Token = "0x6000C78")]
		[Address(RVA = "0x1A25E64", Offset = "0x1A25E64", VA = "0x1A25E64", Slot = "11")]
		public override int ReadAudioSamples(out byte[] targetBuf, int sampleCount)
		{
			return default(int);
		}

		[Token(Token = "0x6000C79")]
		[Address(RVA = "0x1A2616C", Offset = "0x1A2616C", VA = "0x1A2616C")]
		private static AVIMainHeader ParseMainHeader(AtomicBinaryReader br, long p)
		{
			return null;
		}

		[Token(Token = "0x6000C7A")]
		[Address(RVA = "0x1A2656C", Offset = "0x1A2656C", VA = "0x1A2656C")]
		private static AVIStreamHeader ParseStreamHeader(AtomicBinaryReader br, long p)
		{
			return null;
		}

		[Token(Token = "0x6000C7B")]
		[Address(RVA = "0x1A26B48", Offset = "0x1A26B48", VA = "0x1A26B48")]
		private static BitmapInfoHeader ParseVideoFormatHeader(AtomicBinaryReader br, long p)
		{
			return null;
		}

		[Token(Token = "0x6000C7C")]
		[Address(RVA = "0x1A26ED8", Offset = "0x1A26ED8", VA = "0x1A26ED8")]
		private static WaveFormatEx ParseAudioFormatHeader(AtomicBinaryReader br, long p)
		{
			return null;
		}

		[Token(Token = "0x6000C7D")]
		[Address(RVA = "0x1A27060", Offset = "0x1A27060", VA = "0x1A27060")]
		private static ODMLHeader ParseOdmlHeader(AtomicBinaryReader br, long p)
		{
			return null;
		}

		[Token(Token = "0x6000C7E")]
		[Address(RVA = "0x1A255BC", Offset = "0x1A255BC", VA = "0x1A255BC")]
		private static AviStreamIndex ParseOldIndex(long idx1Offset, AtomicBinaryReader abr, int size, uint streamId, long idx1EntryOffset)
		{
			return null;
		}

		[Token(Token = "0x6000C7F")]
		[Address(RVA = "0x1A273C8", Offset = "0x1A273C8", VA = "0x1A273C8")]
		private static AviStreamIndex ParseOdmlIndex(AtomicBinaryReader reader, long p, out uint streamId)
		{
			return null;
		}

		[Token(Token = "0x6000C80")]
		[Address(RVA = "0x1A27A98", Offset = "0x1A27A98", VA = "0x1A27A98")]
		private static void ParseChunkIndex(AtomicBinaryReader reader, long p, ref AviStreamIndex index)
		{
		}

		[Token(Token = "0x6000C81")]
		[Address(RVA = "0x1A283FC", Offset = "0x1A283FC", VA = "0x1A283FC")]
		private bool ProcessAviRiff(RiffParser rp, uint fourCC, int length)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C82")]
		[Address(RVA = "0x1A284A4", Offset = "0x1A284A4", VA = "0x1A284A4")]
		private bool ProcessAviList(RiffParser rp, uint fourCC, int length)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C83")]
		[Address(RVA = "0x1A28544", Offset = "0x1A28544", VA = "0x1A28544")]
		private void ProcessAviChunk(RiffParser rp, uint fourCC, int unpaddedLength, int paddedLength)
		{
		}

		[Token(Token = "0x6000C84")]
		[Address(RVA = "0x1A259E0", Offset = "0x1A259E0", VA = "0x1A259E0")]
		private void PrepareAudioStream()
		{
		}

		[Token(Token = "0x6000C85")]
		[Address(RVA = "0x1A2585C", Offset = "0x1A2585C", VA = "0x1A2585C")]
		private void PrepareVideoStream()
		{
		}

		[Token(Token = "0x6000C86")]
		[Address(RVA = "0x1A28880", Offset = "0x1A28880", VA = "0x1A28880")]
		public AviDemux()
		{
		}
	}
	[Token(Token = "0x20001EE")]
	public class AviRemux : Remux
	{
		[Token(Token = "0x2000303")]
		private struct ByteOffsets
		{
			[Token(Token = "0x4000EA0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public long indexBase;

			[Token(Token = "0x4000EA1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public int avih;

			[Token(Token = "0x4000EA2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public int videoStrh;

			[Token(Token = "0x4000EA3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int videoIndx;

			[Token(Token = "0x4000EA4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int audioStrh;

			[Token(Token = "0x4000EA5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int audioIndx;

			[Token(Token = "0x4000EA6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public int dmlh;
		}

		[Token(Token = "0x4000AF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int maxSuperindexEntries;

		[Token(Token = "0x4000AF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int maxRiffElementSize;

		[Token(Token = "0x4000AFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private RiffWriter writer;

		[Token(Token = "0x4000AFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private AviStreamIndex videoIndex;

		[Token(Token = "0x4000AFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int videoSuperIndexEntryCount;

		[Token(Token = "0x4000AFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private AviStreamIndex audioIndex;

		[Token(Token = "0x4000AFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int audioSuperIndexEntryCount;

		[Token(Token = "0x4000AFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private bool usingMultipleRiffs;

		[Token(Token = "0x4000B00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int totalFramesOld;

		[Token(Token = "0x4000B01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private int totalFrames;

		[Token(Token = "0x4000B02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int totalSamples;

		[Token(Token = "0x4000B03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private ByteOffsets offsets;

		[Token(Token = "0x170000AD")]
		private bool hasAudioStream
		{
			[Token(Token = "0x6000C87")]
			[Address(RVA = "0x1A28890", Offset = "0x1A28890", VA = "0x1A28890")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000C88")]
		[Address(RVA = "0x1A288A8", Offset = "0x1A288A8", VA = "0x1A288A8")]
		public AviRemux(int maxSuperindexEntries = 32, int maxRiffElementSize = 2000000000)
		{
		}

		[Token(Token = "0x6000C89")]
		[Address(RVA = "0x1A288E8", Offset = "0x1A288E8", VA = "0x1A288E8", Slot = "4")]
		public override void Init(Stream dstStream, VideoStreamInfo videoStreamInfo, AudioStreamInfo audioStreamInfo)
		{
		}

		[Token(Token = "0x6000C8A")]
		[Address(RVA = "0x1A29BBC", Offset = "0x1A29BBC", VA = "0x1A29BBC", Slot = "6")]
		public override void WriteNextVideoFrame(byte[] frameBytes, int size = -1)
		{
		}

		[Token(Token = "0x6000C8B")]
		[Address(RVA = "0x1A2A0C0", Offset = "0x1A2A0C0", VA = "0x1A2A0C0", Slot = "7")]
		public override void WriteVideoFrame(int frameOffset, byte[] frameBytes, int size = -1)
		{
		}

		[Token(Token = "0x6000C8C")]
		[Address(RVA = "0x1A2A134", Offset = "0x1A2A134", VA = "0x1A2A134")]
		public bool WriteLookbackVideoFrame(int frame)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C8D")]
		[Address(RVA = "0x1A2A2E8", Offset = "0x1A2A2E8", VA = "0x1A2A2E8", Slot = "8")]
		public override void WriteNextAudioSamples(byte[] sampleBytes, int size = -1)
		{
		}

		[Token(Token = "0x6000C8E")]
		[Address(RVA = "0x1A2A48C", Offset = "0x1A2A48C", VA = "0x1A2A48C", Slot = "9")]
		public override void WriteAudioSamples(int sampleOffset, byte[] frameBytes, int size = -1)
		{
		}

		[Token(Token = "0x6000C8F")]
		[Address(RVA = "0x1A2A500", Offset = "0x1A2A500", VA = "0x1A2A500", Slot = "5")]
		public override void Shutdown()
		{
		}

		[Token(Token = "0x6000C90")]
		[Address(RVA = "0x1A29E04", Offset = "0x1A29E04", VA = "0x1A29E04")]
		private void StartNewRiff()
		{
		}

		[Token(Token = "0x6000C91")]
		[Address(RVA = "0x1A28D30", Offset = "0x1A28D30", VA = "0x1A28D30")]
		private static int WriteMainHeader(RiffWriter rw, VideoStreamInfo vsi, bool hasAudioStream)
		{
			return default(int);
		}

		[Token(Token = "0x6000C92")]
		[Address(RVA = "0x1A29074", Offset = "0x1A29074", VA = "0x1A29074")]
		private static int WriteVideoStreamHeader(RiffWriter rw, VideoStreamInfo vsi)
		{
			return default(int);
		}

		[Token(Token = "0x6000C93")]
		[Address(RVA = "0x1A29718", Offset = "0x1A29718", VA = "0x1A29718")]
		private static int WriteAudioStreamHeader(RiffWriter rw, AudioStreamInfo asi)
		{
			return default(int);
		}

		[Token(Token = "0x6000C94")]
		[Address(RVA = "0x1A2AEF0", Offset = "0x1A2AEF0", VA = "0x1A2AEF0")]
		private static void FindScaleAndRate(out int scale, out int rate, float framerate)
		{
		}

		[Token(Token = "0x6000C95")]
		[Address(RVA = "0x1A29328", Offset = "0x1A29328", VA = "0x1A29328")]
		private static void WriteVideoFormatHeader(RiffWriter rw, VideoStreamInfo vsi)
		{
		}

		[Token(Token = "0x6000C96")]
		[Address(RVA = "0x1A29940", Offset = "0x1A29940", VA = "0x1A29940")]
		private static void WriteAudioFormatHeader(RiffWriter rw, AudioStreamInfo asi)
		{
		}

		[Token(Token = "0x6000C97")]
		[Address(RVA = "0x1A29AF8", Offset = "0x1A29AF8", VA = "0x1A29AF8")]
		private static int WriteDmlhHeader(RiffWriter rw, int totalFrames)
		{
			return default(int);
		}

		[Token(Token = "0x6000C98")]
		[Address(RVA = "0x1A29534", Offset = "0x1A29534", VA = "0x1A29534")]
		private static int WriteDummySuperIndex(RiffWriter rw, uint streamId, int entriesToReserve)
		{
			return default(int);
		}

		[Token(Token = "0x6000C99")]
		[Address(RVA = "0x1A2A7D8", Offset = "0x1A2A7D8", VA = "0x1A2A7D8")]
		private static void WriteChunkIndex(RiffWriter rw, AviStreamIndex index, int superIndexChunkOffset, ref int superIndexEntryCount, long indexBaseOffset, int maxSuperindexEntries)
		{
		}
	}
}
namespace System.Runtime.Serialization
{
	[Token(Token = "0x20001EF")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB494E0", Offset = "0xB494E0")]
	public sealed class DataContractAttribute : Attribute
	{
		[Token(Token = "0x4000B04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private string name;

		[Token(Token = "0x4000B05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string ns;

		[Token(Token = "0x4000B06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B178", Offset = "0xB4B178")]
		private bool <IsReference>k__BackingField;

		[Token(Token = "0x170000AE")]
		public string Name
		{
			[Token(Token = "0x6000C9B")]
			[Address(RVA = "0x1E21444", Offset = "0x1E21444", VA = "0x1E21444")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C9C")]
			[Address(RVA = "0x1E2144C", Offset = "0x1E2144C", VA = "0x1E2144C")]
			set
			{
			}
		}

		[Token(Token = "0x170000AF")]
		public string Namespace
		{
			[Token(Token = "0x6000C9D")]
			[Address(RVA = "0x1E21454", Offset = "0x1E21454", VA = "0x1E21454")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C9E")]
			[Address(RVA = "0x1E2145C", Offset = "0x1E2145C", VA = "0x1E2145C")]
			set
			{
			}
		}

		[Token(Token = "0x170000B0")]
		public bool IsReference
		{
			[Token(Token = "0x6000C9F")]
			[Address(RVA = "0x1E21464", Offset = "0x1E21464", VA = "0x1E21464")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C640", Offset = "0xB4C640")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000CA0")]
			[Address(RVA = "0x1E2146C", Offset = "0x1E2146C", VA = "0x1E2146C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C650", Offset = "0xB4C650")]
			set
			{
			}
		}

		[Token(Token = "0x6000C9A")]
		[Address(RVA = "0x1E2143C", Offset = "0x1E2143C", VA = "0x1E2143C")]
		public DataContractAttribute()
		{
		}
	}
	[Token(Token = "0x20001F0")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB4952C", Offset = "0xB4952C")]
	public sealed class DataMemberAttribute : Attribute
	{
		[Token(Token = "0x4000B07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool is_required;

		[Token(Token = "0x4000B08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		private bool emit_default;

		[Token(Token = "0x4000B09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string name;

		[Token(Token = "0x4000B0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int order;

		[Token(Token = "0x170000B1")]
		public bool EmitDefaultValue
		{
			[Token(Token = "0x6000CA2")]
			[Address(RVA = "0x1E21490", Offset = "0x1E21490", VA = "0x1E21490")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000CA3")]
			[Address(RVA = "0x1E21498", Offset = "0x1E21498", VA = "0x1E21498")]
			set
			{
			}
		}

		[Token(Token = "0x170000B2")]
		public bool IsRequired
		{
			[Token(Token = "0x6000CA4")]
			[Address(RVA = "0x1E214A4", Offset = "0x1E214A4", VA = "0x1E214A4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000CA5")]
			[Address(RVA = "0x1E214AC", Offset = "0x1E214AC", VA = "0x1E214AC")]
			set
			{
			}
		}

		[Token(Token = "0x170000B3")]
		public string Name
		{
			[Token(Token = "0x6000CA6")]
			[Address(RVA = "0x1E214B8", Offset = "0x1E214B8", VA = "0x1E214B8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CA7")]
			[Address(RVA = "0x1E214C0", Offset = "0x1E214C0", VA = "0x1E214C0")]
			set
			{
			}
		}

		[Token(Token = "0x170000B4")]
		public int Order
		{
			[Token(Token = "0x6000CA8")]
			[Address(RVA = "0x1E214C8", Offset = "0x1E214C8", VA = "0x1E214C8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000CA9")]
			[Address(RVA = "0x1E214D0", Offset = "0x1E214D0", VA = "0x1E214D0")]
			set
			{
			}
		}

		[Token(Token = "0x6000CA1")]
		[Address(RVA = "0x1E21478", Offset = "0x1E21478", VA = "0x1E21478")]
		public DataMemberAttribute()
		{
		}
	}
	[Token(Token = "0x20001F1")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB49578", Offset = "0xB49578")]
	public sealed class EnumMemberAttribute : Attribute
	{
		[Token(Token = "0x4000B0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private string value;

		[Token(Token = "0x170000B5")]
		public string Value
		{
			[Token(Token = "0x6000CAB")]
			[Address(RVA = "0x1E214E0", Offset = "0x1E214E0", VA = "0x1E214E0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CAC")]
			[Address(RVA = "0x1E214E8", Offset = "0x1E214E8", VA = "0x1E214E8")]
			set
			{
			}
		}

		[Token(Token = "0x6000CAA")]
		[Address(RVA = "0x1E214D8", Offset = "0x1E214D8", VA = "0x1E214D8")]
		public EnumMemberAttribute()
		{
		}
	}
}
namespace Newtonsoft.Json
{
	[Token(Token = "0x20001F2")]
	public enum ConstructorHandling
	{
		[Token(Token = "0x4000B0D")]
		Default,
		[Token(Token = "0x4000B0E")]
		AllowNonPublicDefaultConstructor
	}
	[Token(Token = "0x20001F3")]
	[Flags]
	public enum DefaultValueHandling
	{
		[Token(Token = "0x4000B10")]
		Include = 0,
		[Token(Token = "0x4000B11")]
		Ignore = 1,
		[Token(Token = "0x4000B12")]
		Populate = 2,
		[Token(Token = "0x4000B13")]
		IgnoreAndPopulate = 3
	}
	[Token(Token = "0x20001F4")]
	public interface IJsonLineInfo
	{
		[Token(Token = "0x170000B6")]
		int LineNumber
		{
			[Token(Token = "0x6000CAE")]
			get;
		}

		[Token(Token = "0x170000B7")]
		int LinePosition
		{
			[Token(Token = "0x6000CAF")]
			get;
		}

		[Token(Token = "0x6000CAD")]
		bool HasLineInfo();
	}
	[Token(Token = "0x20001F5")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB495D4", Offset = "0xB495D4")]
	public sealed class JsonArrayAttribute : JsonContainerAttribute
	{
		[Token(Token = "0x4000B14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		private bool _allowNullItems;

		[Token(Token = "0x170000B8")]
		public bool AllowNullItems
		{
			[Token(Token = "0x6000CB0")]
			[Address(RVA = "0x166FEF0", Offset = "0x166FEF0", VA = "0x166FEF0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000CB1")]
			[Address(RVA = "0x166FEF8", Offset = "0x166FEF8", VA = "0x166FEF8")]
			set
			{
			}
		}

		[Token(Token = "0x6000CB2")]
		[Address(RVA = "0x166FF04", Offset = "0x166FF04", VA = "0x166FF04")]
		public JsonArrayAttribute()
		{
		}

		[Token(Token = "0x6000CB3")]
		[Address(RVA = "0x166FF14", Offset = "0x166FF14", VA = "0x166FF14")]
		public JsonArrayAttribute(bool allowNullItems)
		{
		}

		[Token(Token = "0x6000CB4")]
		[Address(RVA = "0x166FF44", Offset = "0x166FF44", VA = "0x166FF44")]
		public JsonArrayAttribute(string id)
		{
		}
	}
	[Token(Token = "0x20001F6")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB49610", Offset = "0xB49610")]
	public sealed class JsonConstructorAttribute : Attribute
	{
		[Token(Token = "0x6000CB5")]
		[Address(RVA = "0x166FF9C", Offset = "0x166FF9C", VA = "0x166FF9C")]
		public JsonConstructorAttribute()
		{
		}
	}
	[Token(Token = "0x20001F7")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB4964C", Offset = "0xB4964C")]
	public abstract class JsonContainerAttribute : Attribute
	{
		[Token(Token = "0x4000B15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B188", Offset = "0xB4B188")]
		private string <Id>k__BackingField;

		[Token(Token = "0x4000B16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B198", Offset = "0xB4B198")]
		private string <Title>k__BackingField;

		[Token(Token = "0x4000B17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B1A8", Offset = "0xB4B1A8")]
		private string <Description>k__BackingField;

		[Token(Token = "0x4000B18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal bool? _isReference;

		[Token(Token = "0x170000B9")]
		public string Id
		{
			[Token(Token = "0x6000CB6")]
			[Address(RVA = "0x166FFA4", Offset = "0x166FFA4", VA = "0x166FFA4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C660", Offset = "0xB4C660")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CB7")]
			[Address(RVA = "0x166FFAC", Offset = "0x166FFAC", VA = "0x166FFAC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C670", Offset = "0xB4C670")]
			set
			{
			}
		}

		[Token(Token = "0x170000BA")]
		public string Title
		{
			[Token(Token = "0x6000CB8")]
			[Address(RVA = "0x166FFB4", Offset = "0x166FFB4", VA = "0x166FFB4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C680", Offset = "0xB4C680")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CB9")]
			[Address(RVA = "0x166FFBC", Offset = "0x166FFBC", VA = "0x166FFBC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C690", Offset = "0xB4C690")]
			set
			{
			}
		}

		[Token(Token = "0x170000BB")]
		public string Description
		{
			[Token(Token = "0x6000CBA")]
			[Address(RVA = "0x166FFC4", Offset = "0x166FFC4", VA = "0x166FFC4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C6A0", Offset = "0xB4C6A0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CBB")]
			[Address(RVA = "0x166FFCC", Offset = "0x166FFCC", VA = "0x166FFCC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C6B0", Offset = "0xB4C6B0")]
			set
			{
			}
		}

		[Token(Token = "0x170000BC")]
		public bool IsReference
		{
			[Token(Token = "0x6000CBC")]
			[Address(RVA = "0x166FFD4", Offset = "0x166FFD4", VA = "0x166FFD4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000CBD")]
			[Address(RVA = "0x167005C", Offset = "0x167005C", VA = "0x167005C")]
			set
			{
			}
		}

		[Token(Token = "0x6000CBE")]
		[Address(RVA = "0x166FF0C", Offset = "0x166FF0C", VA = "0x166FF0C")]
		protected JsonContainerAttribute()
		{
		}

		[Token(Token = "0x6000CBF")]
		[Address(RVA = "0x166FF70", Offset = "0x166FF70", VA = "0x166FF70")]
		protected JsonContainerAttribute(string id)
		{
		}
	}
	[Token(Token = "0x20001F8")]
	public static class JsonConvert
	{
		[Token(Token = "0x4000B19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly string True;

		[Token(Token = "0x4000B1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly string False;

		[Token(Token = "0x4000B1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly string Null;

		[Token(Token = "0x4000B1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly string Undefined;

		[Token(Token = "0x4000B1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly string PositiveInfinity;

		[Token(Token = "0x4000B1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static readonly string NegativeInfinity;

		[Token(Token = "0x4000B1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static readonly string NaN;

		[Token(Token = "0x4000B20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal static readonly long InitialJavaScriptDateTicks;

		[Token(Token = "0x6000CC0")]
		[Address(RVA = "0x16700CC", Offset = "0x16700CC", VA = "0x16700CC")]
		public static string ToString(DateTime value)
		{
			return null;
		}

		[Token(Token = "0x6000CC1")]
		[Address(RVA = "0x16704F8", Offset = "0x16704F8", VA = "0x16704F8")]
		public static string ToString(DateTimeOffset value)
		{
			return null;
		}

		[Token(Token = "0x6000CC2")]
		[Address(RVA = "0x167024C", Offset = "0x167024C", VA = "0x167024C")]
		private static TimeSpan GetUtcOffset(DateTime dateTime)
		{
			return default(TimeSpan);
		}

		[Token(Token = "0x6000CC3")]
		[Address(RVA = "0x1670680", Offset = "0x1670680", VA = "0x1670680")]
		internal static void WriteDateTimeString(TextWriter writer, DateTime value)
		{
		}

		[Token(Token = "0x6000CC4")]
		[Address(RVA = "0x16702D0", Offset = "0x16702D0", VA = "0x16702D0")]
		internal static void WriteDateTimeString(TextWriter writer, DateTime value, TimeSpan offset, DateTimeKind kind)
		{
		}

		[Token(Token = "0x6000CC5")]
		[Address(RVA = "0x1670794", Offset = "0x1670794", VA = "0x1670794")]
		private static long ToUniversalTicks(DateTime dateTime)
		{
			return default(long);
		}

		[Token(Token = "0x6000CC6")]
		[Address(RVA = "0x1670830", Offset = "0x1670830", VA = "0x1670830")]
		private static long ToUniversalTicks(DateTime dateTime, TimeSpan offset)
		{
			return default(long);
		}

		[Token(Token = "0x6000CC7")]
		[Address(RVA = "0x167071C", Offset = "0x167071C", VA = "0x167071C")]
		internal static long ConvertDateTimeToJavaScriptTicks(DateTime dateTime, TimeSpan offset)
		{
			return default(long);
		}

		[Token(Token = "0x6000CC8")]
		[Address(RVA = "0x16664E0", Offset = "0x16664E0", VA = "0x16664E0")]
		internal static long ConvertDateTimeToJavaScriptTicks(DateTime dateTime)
		{
			return default(long);
		}

		[Token(Token = "0x6000CC9")]
		[Address(RVA = "0x1670944", Offset = "0x1670944", VA = "0x1670944")]
		internal static long ConvertDateTimeToJavaScriptTicks(DateTime dateTime, bool convertToUtc)
		{
			return default(long);
		}

		[Token(Token = "0x6000CCA")]
		[Address(RVA = "0x16708B8", Offset = "0x16708B8", VA = "0x16708B8")]
		private static long UniversialTicksToJavaScriptTicks(long universialTicks)
		{
			return default(long);
		}

		[Token(Token = "0x6000CCB")]
		[Address(RVA = "0x1666ADC", Offset = "0x1666ADC", VA = "0x1666ADC")]
		internal static DateTime ConvertJavaScriptTicksToDateTime(long javaScriptTicks)
		{
			return default(DateTime);
		}

		[Token(Token = "0x6000CCC")]
		[Address(RVA = "0x16709FC", Offset = "0x16709FC", VA = "0x16709FC")]
		public static string ToString(bool value)
		{
			return null;
		}

		[Token(Token = "0x6000CCD")]
		[Address(RVA = "0x1670A8C", Offset = "0x1670A8C", VA = "0x1670A8C")]
		public static string ToString(char value)
		{
			return null;
		}

		[Token(Token = "0x6000CCE")]
		[Address(RVA = "0x1670B94", Offset = "0x1670B94", VA = "0x1670B94")]
		public static string ToString(Enum value)
		{
			return null;
		}

		[Token(Token = "0x6000CCF")]
		[Address(RVA = "0x1670BF4", Offset = "0x1670BF4", VA = "0x1670BF4")]
		public static string ToString(int value)
		{
			return null;
		}

		[Token(Token = "0x6000CD0")]
		[Address(RVA = "0x1670C70", Offset = "0x1670C70", VA = "0x1670C70")]
		public static string ToString(short value)
		{
			return null;
		}

		[Token(Token = "0x6000CD1")]
		[Address(RVA = "0x1670CEC", Offset = "0x1670CEC", VA = "0x1670CEC")]
		public static string ToString(ushort value)
		{
			return null;
		}

		[Token(Token = "0x6000CD2")]
		[Address(RVA = "0x1670D68", Offset = "0x1670D68", VA = "0x1670D68")]
		public static string ToString(uint value)
		{
			return null;
		}

		[Token(Token = "0x6000CD3")]
		[Address(RVA = "0x1670DE4", Offset = "0x1670DE4", VA = "0x1670DE4")]
		public static string ToString(long value)
		{
			return null;
		}

		[Token(Token = "0x6000CD4")]
		[Address(RVA = "0x1670E60", Offset = "0x1670E60", VA = "0x1670E60")]
		public static string ToString(ulong value)
		{
			return null;
		}

		[Token(Token = "0x6000CD5")]
		[Address(RVA = "0x1670EDC", Offset = "0x1670EDC", VA = "0x1670EDC")]
		public static string ToString(float value)
		{
			return null;
		}

		[Token(Token = "0x6000CD6")]
		[Address(RVA = "0x16710BC", Offset = "0x16710BC", VA = "0x16710BC")]
		public static string ToString(double value)
		{
			return null;
		}

		[Token(Token = "0x6000CD7")]
		[Address(RVA = "0x1670FA8", Offset = "0x1670FA8", VA = "0x1670FA8")]
		private static string EnsureDecimalPlace(double value, string text)
		{
			return null;
		}

		[Token(Token = "0x6000CD8")]
		[Address(RVA = "0x1671188", Offset = "0x1671188", VA = "0x1671188")]
		private static string EnsureDecimalPlace(string text)
		{
			return null;
		}

		[Token(Token = "0x6000CD9")]
		[Address(RVA = "0x1671210", Offset = "0x1671210", VA = "0x1671210")]
		public static string ToString(byte value)
		{
			return null;
		}

		[Token(Token = "0x6000CDA")]
		[Address(RVA = "0x167128C", Offset = "0x167128C", VA = "0x167128C")]
		public static string ToString(sbyte value)
		{
			return null;
		}

		[Token(Token = "0x6000CDB")]
		[Address(RVA = "0x1671308", Offset = "0x1671308", VA = "0x1671308")]
		public static string ToString(decimal value)
		{
			return null;
		}

		[Token(Token = "0x6000CDC")]
		[Address(RVA = "0x16713BC", Offset = "0x16713BC", VA = "0x16713BC")]
		public static string ToString(Guid value)
		{
			return null;
		}

		[Token(Token = "0x6000CDD")]
		[Address(RVA = "0x1671468", Offset = "0x1671468", VA = "0x1671468")]
		public static string ToString(TimeSpan value)
		{
			return null;
		}

		[Token(Token = "0x6000CDE")]
		[Address(RVA = "0x16714D4", Offset = "0x16714D4", VA = "0x16714D4")]
		public static string ToString(Uri value)
		{
			return null;
		}

		[Token(Token = "0x6000CDF")]
		[Address(RVA = "0x1670B24", Offset = "0x1670B24", VA = "0x1670B24")]
		public static string ToString(string value)
		{
			return null;
		}

		[Token(Token = "0x6000CE0")]
		[Address(RVA = "0x167154C", Offset = "0x167154C", VA = "0x167154C")]
		public static string ToString(string value, char delimter)
		{
			return null;
		}

		[Token(Token = "0x6000CE1")]
		[Address(RVA = "0x1671558", Offset = "0x1671558", VA = "0x1671558")]
		public static string ToString(object value)
		{
			return null;
		}

		[Token(Token = "0x6000CE2")]
		[Address(RVA = "0x1672604", Offset = "0x1672604", VA = "0x1672604")]
		private static bool IsJsonPrimitiveTypeCode(TypeCode typeCode)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CE3")]
		[Address(RVA = "0x1672624", Offset = "0x1672624", VA = "0x1672624")]
		internal static bool IsJsonPrimitiveType(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CE4")]
		[Address(RVA = "0x1672854", Offset = "0x1672854", VA = "0x1672854")]
		internal static bool IsJsonPrimitive(object value)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CE5")]
		[Address(RVA = "0x1672A10", Offset = "0x1672A10", VA = "0x1672A10")]
		public static string SerializeObject(object value)
		{
			return null;
		}

		[Token(Token = "0x6000CE6")]
		[Address(RVA = "0x1672C68", Offset = "0x1672C68", VA = "0x1672C68")]
		public static string SerializeObject(object value, Formatting formatting)
		{
			return null;
		}

		[Token(Token = "0x6000CE7")]
		[Address(RVA = "0x1672CE0", Offset = "0x1672CE0", VA = "0x1672CE0")]
		public static string SerializeObject(object value, params JsonConverter[] converters)
		{
			return null;
		}

		[Token(Token = "0x6000CE8")]
		[Address(RVA = "0x1672D58", Offset = "0x1672D58", VA = "0x1672D58")]
		public static string SerializeObject(object value, Formatting formatting, params JsonConverter[] converters)
		{
			return null;
		}

		[Token(Token = "0x6000CE9")]
		[Address(RVA = "0x1672A7C", Offset = "0x1672A7C", VA = "0x1672A7C")]
		public static string SerializeObject(object value, Formatting formatting, JsonSerializerSettings settings)
		{
			return null;
		}

		[Token(Token = "0x6000CEA")]
		[Address(RVA = "0x167327C", Offset = "0x167327C", VA = "0x167327C")]
		public static object DeserializeObject(string value)
		{
			return null;
		}

		[Token(Token = "0x6000CEB")]
		[Address(RVA = "0x16734E4", Offset = "0x16734E4", VA = "0x16734E4")]
		public static object DeserializeObject(string value, JsonSerializerSettings settings)
		{
			return null;
		}

		[Token(Token = "0x6000CEC")]
		[Address(RVA = "0x167355C", Offset = "0x167355C", VA = "0x167355C")]
		public static object DeserializeObject(string value, Type type)
		{
			return null;
		}

		[Token(Token = "0x6000CED")]
		public static T DeserializeObject<T>(string value)
		{
			return (T)null;
		}

		[Token(Token = "0x6000CEE")]
		public static T DeserializeAnonymousType<T>(string value, T anonymousTypeObject)
		{
			return (T)null;
		}

		[Token(Token = "0x6000CEF")]
		public static T DeserializeObject<T>(string value, params JsonConverter[] converters)
		{
			return (T)null;
		}

		[Token(Token = "0x6000CF0")]
		public static T DeserializeObject<T>(string value, JsonSerializerSettings settings)
		{
			return (T)null;
		}

		[Token(Token = "0x6000CF1")]
		[Address(RVA = "0x16735D4", Offset = "0x16735D4", VA = "0x16735D4")]
		public static object DeserializeObject(string value, Type type, params JsonConverter[] converters)
		{
			return null;
		}

		[Token(Token = "0x6000CF2")]
		[Address(RVA = "0x16732E8", Offset = "0x16732E8", VA = "0x16732E8")]
		public static object DeserializeObject(string value, Type type, JsonSerializerSettings settings)
		{
			return null;
		}

		[Token(Token = "0x6000CF3")]
		[Address(RVA = "0x1673758", Offset = "0x1673758", VA = "0x1673758")]
		public static void PopulateObject(string value, object target)
		{
		}

		[Token(Token = "0x6000CF4")]
		[Address(RVA = "0x16737D0", Offset = "0x16737D0", VA = "0x16737D0")]
		public static void PopulateObject(string value, object target, JsonSerializerSettings settings)
		{
		}

		[Token(Token = "0x6000CF5")]
		[Address(RVA = "0x16739DC", Offset = "0x16739DC", VA = "0x16739DC")]
		public static string SerializeXmlNode(XmlNode node)
		{
			return null;
		}

		[Token(Token = "0x6000CF6")]
		[Address(RVA = "0x1673A44", Offset = "0x1673A44", VA = "0x1673A44")]
		public static string SerializeXmlNode(XmlNode node, Formatting formatting)
		{
			return null;
		}

		[Token(Token = "0x6000CF7")]
		[Address(RVA = "0x1673B44", Offset = "0x1673B44", VA = "0x1673B44")]
		public static string SerializeXmlNode(XmlNode node, Formatting formatting, bool omitRootObject)
		{
			return null;
		}

		[Token(Token = "0x6000CF8")]
		[Address(RVA = "0x1673C50", Offset = "0x1673C50", VA = "0x1673C50")]
		public static XmlDocument DeserializeXmlNode(string value)
		{
			return null;
		}

		[Token(Token = "0x6000CF9")]
		[Address(RVA = "0x1673CB8", Offset = "0x1673CB8", VA = "0x1673CB8")]
		public static XmlDocument DeserializeXmlNode(string value, string deserializeRootElementName)
		{
			return null;
		}

		[Token(Token = "0x6000CFA")]
		[Address(RVA = "0x1673D30", Offset = "0x1673D30", VA = "0x1673D30")]
		public static XmlDocument DeserializeXmlNode(string value, string deserializeRootElementName, bool writeArrayAttribute)
		{
			return null;
		}
	}
	[Token(Token = "0x20001F9")]
	public abstract class JsonConverter
	{
		[Token(Token = "0x170000BD")]
		public virtual bool CanRead
		{
			[Token(Token = "0x6000D00")]
			[Address(RVA = "0x1674018", Offset = "0x1674018", VA = "0x1674018", Slot = "8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000BE")]
		public virtual bool CanWrite
		{
			[Token(Token = "0x6000D01")]
			[Address(RVA = "0x1674020", Offset = "0x1674020", VA = "0x1674020", Slot = "9")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000CFC")]
		public abstract void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);

		[Token(Token = "0x6000CFD")]
		public abstract object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);

		[Token(Token = "0x6000CFE")]
		public abstract bool CanConvert(Type objectType);

		[Token(Token = "0x6000CFF")]
		[Address(RVA = "0x1674010", Offset = "0x1674010", VA = "0x1674010", Slot = "7")]
		public virtual JsonSchema GetSchema()
		{
			return null;
		}

		[Token(Token = "0x6000D02")]
		[Address(RVA = "0x1665988", Offset = "0x1665988", VA = "0x1665988")]
		protected JsonConverter()
		{
		}
	}
	[Token(Token = "0x20001FA")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB49688", Offset = "0xB49688")]
	public sealed class JsonConverterAttribute : Attribute
	{
		[Token(Token = "0x4000B21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly Type _converterType;

		[Token(Token = "0x170000BF")]
		public Type ConverterType
		{
			[Token(Token = "0x6000D03")]
			[Address(RVA = "0x1674028", Offset = "0x1674028", VA = "0x1674028")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D04")]
		[Address(RVA = "0x1674030", Offset = "0x1674030", VA = "0x1674030")]
		public JsonConverterAttribute(Type converterType)
		{
		}

		[Token(Token = "0x6000D05")]
		[Address(RVA = "0x1674104", Offset = "0x1674104", VA = "0x1674104")]
		internal static JsonConverter CreateJsonConverterInstance(Type converterType)
		{
			return null;
		}
	}
	[Token(Token = "0x20001FB")]
	public class JsonConverterCollection : Collection<JsonConverter>
	{
		[Token(Token = "0x6000D06")]
		[Address(RVA = "0x167431C", Offset = "0x167431C", VA = "0x167431C")]
		public JsonConverterCollection()
		{
		}
	}
	[Token(Token = "0x20001FC")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB496C4", Offset = "0xB496C4")]
	public sealed class JsonIgnoreAttribute : Attribute
	{
		[Token(Token = "0x6000D07")]
		[Address(RVA = "0x167436C", Offset = "0x167436C", VA = "0x167436C")]
		public JsonIgnoreAttribute()
		{
		}
	}
	[Token(Token = "0x20001FD")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB49700", Offset = "0xB49700")]
	public sealed class JsonObjectAttribute : JsonContainerAttribute
	{
		[Token(Token = "0x4000B22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private MemberSerialization _memberSerialization;

		[Token(Token = "0x170000C0")]
		public MemberSerialization MemberSerialization
		{
			[Token(Token = "0x6000D08")]
			[Address(RVA = "0x1674374", Offset = "0x1674374", VA = "0x1674374")]
			get
			{
				return default(MemberSerialization);
			}
			[Token(Token = "0x6000D09")]
			[Address(RVA = "0x167437C", Offset = "0x167437C", VA = "0x167437C")]
			set
			{
			}
		}

		[Token(Token = "0x6000D0A")]
		[Address(RVA = "0x1674384", Offset = "0x1674384", VA = "0x1674384")]
		public JsonObjectAttribute()
		{
		}

		[Token(Token = "0x6000D0B")]
		[Address(RVA = "0x167438C", Offset = "0x167438C", VA = "0x167438C")]
		public JsonObjectAttribute(MemberSerialization memberSerialization)
		{
		}

		[Token(Token = "0x6000D0C")]
		[Address(RVA = "0x16743B8", Offset = "0x16743B8", VA = "0x16743B8")]
		public JsonObjectAttribute(string id)
		{
		}
	}
	[Token(Token = "0x20001FE")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB4973C", Offset = "0xB4973C")]
	public sealed class JsonPropertyAttribute : Attribute
	{
		[Token(Token = "0x4000B23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal NullValueHandling? _nullValueHandling;

		[Token(Token = "0x4000B24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal DefaultValueHandling? _defaultValueHandling;

		[Token(Token = "0x4000B25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal ReferenceLoopHandling? _referenceLoopHandling;

		[Token(Token = "0x4000B26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal ObjectCreationHandling? _objectCreationHandling;

		[Token(Token = "0x4000B27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal TypeNameHandling? _typeNameHandling;

		[Token(Token = "0x4000B28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal bool? _isReference;

		[Token(Token = "0x4000B29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		internal int? _order;

		[Token(Token = "0x4000B2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B1B8", Offset = "0xB4B1B8")]
		private string <PropertyName>k__BackingField;

		[Token(Token = "0x4000B2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B1C8", Offset = "0xB4B1C8")]
		private Required <Required>k__BackingField;

		[Token(Token = "0x170000C1")]
		public NullValueHandling NullValueHandling
		{
			[Token(Token = "0x6000D0D")]
			[Address(RVA = "0x16743E4", Offset = "0x16743E4", VA = "0x16743E4")]
			get
			{
				return default(NullValueHandling);
			}
			[Token(Token = "0x6000D0E")]
			[Address(RVA = "0x1674468", Offset = "0x1674468", VA = "0x1674468")]
			set
			{
			}
		}

		[Token(Token = "0x170000C2")]
		public DefaultValueHandling DefaultValueHandling
		{
			[Token(Token = "0x6000D0F")]
			[Address(RVA = "0x16744D8", Offset = "0x16744D8", VA = "0x16744D8")]
			get
			{
				return default(DefaultValueHandling);
			}
			[Token(Token = "0x6000D10")]
			[Address(RVA = "0x167455C", Offset = "0x167455C", VA = "0x167455C")]
			set
			{
			}
		}

		[Token(Token = "0x170000C3")]
		public ReferenceLoopHandling ReferenceLoopHandling
		{
			[Token(Token = "0x6000D11")]
			[Address(RVA = "0x16745CC", Offset = "0x16745CC", VA = "0x16745CC")]
			get
			{
				return default(ReferenceLoopHandling);
			}
			[Token(Token = "0x6000D12")]
			[Address(RVA = "0x1674650", Offset = "0x1674650", VA = "0x1674650")]
			set
			{
			}
		}

		[Token(Token = "0x170000C4")]
		public ObjectCreationHandling ObjectCreationHandling
		{
			[Token(Token = "0x6000D13")]
			[Address(RVA = "0x16746C0", Offset = "0x16746C0", VA = "0x16746C0")]
			get
			{
				return default(ObjectCreationHandling);
			}
			[Token(Token = "0x6000D14")]
			[Address(RVA = "0x1674744", Offset = "0x1674744", VA = "0x1674744")]
			set
			{
			}
		}

		[Token(Token = "0x170000C5")]
		public TypeNameHandling TypeNameHandling
		{
			[Token(Token = "0x6000D15")]
			[Address(RVA = "0x16747B4", Offset = "0x16747B4", VA = "0x16747B4")]
			get
			{
				return default(TypeNameHandling);
			}
			[Token(Token = "0x6000D16")]
			[Address(RVA = "0x1674838", Offset = "0x1674838", VA = "0x1674838")]
			set
			{
			}
		}

		[Token(Token = "0x170000C6")]
		public bool IsReference
		{
			[Token(Token = "0x6000D17")]
			[Address(RVA = "0x16748A8", Offset = "0x16748A8", VA = "0x16748A8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D18")]
			[Address(RVA = "0x1674930", Offset = "0x1674930", VA = "0x1674930")]
			set
			{
			}
		}

		[Token(Token = "0x170000C7")]
		public int Order
		{
			[Token(Token = "0x6000D19")]
			[Address(RVA = "0x16749A0", Offset = "0x16749A0", VA = "0x16749A0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000D1A")]
			[Address(RVA = "0x1674A24", Offset = "0x1674A24", VA = "0x1674A24")]
			set
			{
			}
		}

		[Token(Token = "0x170000C8")]
		public string PropertyName
		{
			[Token(Token = "0x6000D1B")]
			[Address(RVA = "0x1674A94", Offset = "0x1674A94", VA = "0x1674A94")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C6C0", Offset = "0xB4C6C0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D1C")]
			[Address(RVA = "0x1674A9C", Offset = "0x1674A9C", VA = "0x1674A9C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C6D0", Offset = "0xB4C6D0")]
			set
			{
			}
		}

		[Token(Token = "0x170000C9")]
		public Required Required
		{
			[Token(Token = "0x6000D1D")]
			[Address(RVA = "0x1674AA4", Offset = "0x1674AA4", VA = "0x1674AA4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C6E0", Offset = "0xB4C6E0")]
			get
			{
				return default(Required);
			}
			[Token(Token = "0x6000D1E")]
			[Address(RVA = "0x1674AAC", Offset = "0x1674AAC", VA = "0x1674AAC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C6F0", Offset = "0xB4C6F0")]
			set
			{
			}
		}

		[Token(Token = "0x6000D1F")]
		[Address(RVA = "0x1674AB4", Offset = "0x1674AB4", VA = "0x1674AB4")]
		public JsonPropertyAttribute()
		{
		}

		[Token(Token = "0x6000D20")]
		[Address(RVA = "0x1674ABC", Offset = "0x1674ABC", VA = "0x1674ABC")]
		public JsonPropertyAttribute(string propertyName)
		{
		}
	}
	[Token(Token = "0x20001FF")]
	public abstract class JsonReader : IDisposable
	{
		[Token(Token = "0x2000304")]
		protected enum State
		{
			[Token(Token = "0x4000EA8")]
			Start,
			[Token(Token = "0x4000EA9")]
			Complete,
			[Token(Token = "0x4000EAA")]
			Property,
			[Token(Token = "0x4000EAB")]
			ObjectStart,
			[Token(Token = "0x4000EAC")]
			Object,
			[Token(Token = "0x4000EAD")]
			ArrayStart,
			[Token(Token = "0x4000EAE")]
			Array,
			[Token(Token = "0x4000EAF")]
			Closed,
			[Token(Token = "0x4000EB0")]
			PostValue,
			[Token(Token = "0x4000EB1")]
			ConstructorStart,
			[Token(Token = "0x4000EB2")]
			Constructor,
			[Token(Token = "0x4000EB3")]
			Error,
			[Token(Token = "0x4000EB4")]
			Finished
		}

		[Token(Token = "0x4000B2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private JsonToken _token;

		[Token(Token = "0x4000B2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object _value;

		[Token(Token = "0x4000B2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Type _valueType;

		[Token(Token = "0x4000B2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private char _quoteChar;

		[Token(Token = "0x4000B30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private State _currentState;

		[Token(Token = "0x4000B31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private JTokenType _currentTypeContext;

		[Token(Token = "0x4000B32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int _top;

		[Token(Token = "0x4000B33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly List<JTokenType> _stack;

		[Token(Token = "0x4000B34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B1D8", Offset = "0xB4B1D8")]
		private bool <CloseInput>k__BackingField;

		[Token(Token = "0x170000CA")]
		protected State CurrentState
		{
			[Token(Token = "0x6000D21")]
			[Address(RVA = "0x1674AE8", Offset = "0x1674AE8", VA = "0x1674AE8")]
			get
			{
				return default(State);
			}
		}

		[Token(Token = "0x170000CB")]
		public bool CloseInput
		{
			[Token(Token = "0x6000D22")]
			[Address(RVA = "0x1674AF0", Offset = "0x1674AF0", VA = "0x1674AF0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C700", Offset = "0xB4C700")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D23")]
			[Address(RVA = "0x1674AF8", Offset = "0x1674AF8", VA = "0x1674AF8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C710", Offset = "0xB4C710")]
			set
			{
			}
		}

		[Token(Token = "0x170000CC")]
		public virtual char QuoteChar
		{
			[Token(Token = "0x6000D24")]
			[Address(RVA = "0x1674B04", Offset = "0x1674B04", VA = "0x1674B04", Slot = "5")]
			get
			{
				return default(char);
			}
			[Token(Token = "0x6000D25")]
			[Address(RVA = "0x1674B0C", Offset = "0x1674B0C", VA = "0x1674B0C", Slot = "6")]
			protected internal set
			{
			}
		}

		[Token(Token = "0x170000CD")]
		public virtual JsonToken TokenType
		{
			[Token(Token = "0x6000D26")]
			[Address(RVA = "0x1674B14", Offset = "0x1674B14", VA = "0x1674B14", Slot = "7")]
			get
			{
				return default(JsonToken);
			}
		}

		[Token(Token = "0x170000CE")]
		public virtual object Value
		{
			[Token(Token = "0x6000D27")]
			[Address(RVA = "0x1674B1C", Offset = "0x1674B1C", VA = "0x1674B1C", Slot = "8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000CF")]
		public virtual Type ValueType
		{
			[Token(Token = "0x6000D28")]
			[Address(RVA = "0x1674B24", Offset = "0x1674B24", VA = "0x1674B24", Slot = "9")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000D0")]
		public virtual int Depth
		{
			[Token(Token = "0x6000D29")]
			[Address(RVA = "0x1674B2C", Offset = "0x1674B2C", VA = "0x1674B2C", Slot = "10")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000D2A")]
		[Address(RVA = "0x1674C20", Offset = "0x1674C20", VA = "0x1674C20")]
		protected JsonReader()
		{
		}

		[Token(Token = "0x6000D2B")]
		[Address(RVA = "0x1674CA8", Offset = "0x1674CA8", VA = "0x1674CA8")]
		private void Push(JTokenType value)
		{
		}

		[Token(Token = "0x6000D2C")]
		[Address(RVA = "0x1674D28", Offset = "0x1674D28", VA = "0x1674D28")]
		private JTokenType Pop()
		{
			return default(JTokenType);
		}

		[Token(Token = "0x6000D2D")]
		[Address(RVA = "0x1674E14", Offset = "0x1674E14", VA = "0x1674E14")]
		private JTokenType Peek()
		{
			return default(JTokenType);
		}

		[Token(Token = "0x6000D2E")]
		public abstract bool Read();

		[Token(Token = "0x6000D2F")]
		public abstract byte[] ReadAsBytes();

		[Token(Token = "0x6000D30")]
		public abstract decimal? ReadAsDecimal();

		[Token(Token = "0x6000D31")]
		public abstract DateTimeOffset? ReadAsDateTimeOffset();

		[Token(Token = "0x6000D32")]
		[Address(RVA = "0x1674E1C", Offset = "0x1674E1C", VA = "0x1674E1C")]
		public void Skip()
		{
		}

		[Token(Token = "0x6000D33")]
		[Address(RVA = "0x1674E8C", Offset = "0x1674E8C", VA = "0x1674E8C")]
		protected void SetToken(JsonToken newToken)
		{
		}

		[Token(Token = "0x6000D34")]
		[Address(RVA = "0x1674EA0", Offset = "0x1674EA0", VA = "0x1674EA0", Slot = "15")]
		protected virtual void SetToken(JsonToken newToken, object value)
		{
		}

		[Token(Token = "0x6000D35")]
		[Address(RVA = "0x1674F94", Offset = "0x1674F94", VA = "0x1674F94")]
		private void ValidateEnd(JsonToken endToken)
		{
		}

		[Token(Token = "0x6000D36")]
		[Address(RVA = "0x16752E8", Offset = "0x16752E8", VA = "0x16752E8")]
		protected void SetStateBasedOnCurrent()
		{
		}

		[Token(Token = "0x6000D37")]
		[Address(RVA = "0x1675438", Offset = "0x1675438", VA = "0x1675438")]
		internal static bool IsPrimitiveToken(JsonToken token)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D38")]
		[Address(RVA = "0x1674B68", Offset = "0x1674B68", VA = "0x1674B68")]
		internal static bool IsStartToken(JsonToken token)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D39")]
		[Address(RVA = "0x1675130", Offset = "0x1675130", VA = "0x1675130")]
		private JTokenType GetTypeForCloseToken(JsonToken token)
		{
			return default(JTokenType);
		}

		[Token(Token = "0x6000D3A")]
		[Address(RVA = "0x167545C", Offset = "0x167545C", VA = "0x167545C", Slot = "4")]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000D3B")]
		[Address(RVA = "0x1675470", Offset = "0x1675470", VA = "0x1675470", Slot = "16")]
		protected virtual void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x6000D3C")]
		[Address(RVA = "0x1675494", Offset = "0x1675494", VA = "0x1675494", Slot = "17")]
		public virtual void Close()
		{
		}
	}
	[Token(Token = "0x2000200")]
	public class JsonReaderException : Exception
	{
		[Token(Token = "0x4000B35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B1E8", Offset = "0xB4B1E8")]
		private int <LineNumber>k__BackingField;

		[Token(Token = "0x4000B36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B1F8", Offset = "0xB4B1F8")]
		private int <LinePosition>k__BackingField;

		[Token(Token = "0x170000D1")]
		public int LineNumber
		{
			[Token(Token = "0x6000D3D")]
			[Address(RVA = "0x16754A8", Offset = "0x16754A8", VA = "0x16754A8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C720", Offset = "0xB4C720")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000D3E")]
			[Address(RVA = "0x16754B0", Offset = "0x16754B0", VA = "0x16754B0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C730", Offset = "0xB4C730")]
			private set
			{
			}
		}

		[Token(Token = "0x170000D2")]
		public int LinePosition
		{
			[Token(Token = "0x6000D3F")]
			[Address(RVA = "0x16754B8", Offset = "0x16754B8", VA = "0x16754B8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C740", Offset = "0xB4C740")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000D40")]
			[Address(RVA = "0x16754C0", Offset = "0x16754C0", VA = "0x16754C0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C750", Offset = "0xB4C750")]
			private set
			{
			}
		}

		[Token(Token = "0x6000D41")]
		[Address(RVA = "0x16754C8", Offset = "0x16754C8", VA = "0x16754C8")]
		public JsonReaderException()
		{
		}

		[Token(Token = "0x6000D42")]
		[Address(RVA = "0x1675270", Offset = "0x1675270", VA = "0x1675270")]
		public JsonReaderException(string message)
		{
		}

		[Token(Token = "0x6000D43")]
		[Address(RVA = "0x1675530", Offset = "0x1675530", VA = "0x1675530")]
		public JsonReaderException(string message, Exception innerException)
		{
		}

		[Token(Token = "0x6000D44")]
		[Address(RVA = "0x16755B0", Offset = "0x16755B0", VA = "0x16755B0")]
		internal JsonReaderException(string message, Exception innerException, int lineNumber, int linePosition)
		{
		}
	}
	[Token(Token = "0x2000201")]
	public class JsonSerializationException : Exception
	{
		[Token(Token = "0x6000D45")]
		[Address(RVA = "0x1675648", Offset = "0x1675648", VA = "0x1675648")]
		public JsonSerializationException()
		{
		}

		[Token(Token = "0x6000D46")]
		[Address(RVA = "0x1665884", Offset = "0x1665884", VA = "0x1665884")]
		public JsonSerializationException(string message)
		{
		}

		[Token(Token = "0x6000D47")]
		[Address(RVA = "0x16756B0", Offset = "0x16756B0", VA = "0x16756B0")]
		public JsonSerializationException(string message, Exception innerException)
		{
		}
	}
	[Token(Token = "0x2000202")]
	public class JsonSerializer
	{
		[Token(Token = "0x4000B37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private TypeNameHandling _typeNameHandling;

		[Token(Token = "0x4000B38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private FormatterAssemblyStyle _typeNameAssemblyFormat;

		[Token(Token = "0x4000B39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private PreserveReferencesHandling _preserveReferencesHandling;

		[Token(Token = "0x4000B3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private ReferenceLoopHandling _referenceLoopHandling;

		[Token(Token = "0x4000B3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private MissingMemberHandling _missingMemberHandling;

		[Token(Token = "0x4000B3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private ObjectCreationHandling _objectCreationHandling;

		[Token(Token = "0x4000B3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private NullValueHandling _nullValueHandling;

		[Token(Token = "0x4000B3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private DefaultValueHandling _defaultValueHandling;

		[Token(Token = "0x4000B3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private ConstructorHandling _constructorHandling;

		[Token(Token = "0x4000B40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private JsonConverterCollection _converters;

		[Token(Token = "0x4000B41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private IContractResolver _contractResolver;

		[Token(Token = "0x4000B42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private IReferenceResolver _referenceResolver;

		[Token(Token = "0x4000B43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private SerializationBinder _binder;

		[Token(Token = "0x4000B44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private StreamingContext _context;

		[Token(Token = "0x170000D3")]
		public virtual IReferenceResolver ReferenceResolver
		{
			[Token(Token = "0x6000D4A")]
			[Address(RVA = "0x1675908", Offset = "0x1675908", VA = "0x1675908", Slot = "6")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D4B")]
			[Address(RVA = "0x1675974", Offset = "0x1675974", VA = "0x1675974", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x170000D4")]
		public virtual SerializationBinder Binder
		{
			[Token(Token = "0x6000D4C")]
			[Address(RVA = "0x1675A18", Offset = "0x1675A18", VA = "0x1675A18", Slot = "8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D4D")]
			[Address(RVA = "0x1675A20", Offset = "0x1675A20", VA = "0x1675A20", Slot = "9")]
			set
			{
			}
		}

		[Token(Token = "0x170000D5")]
		public virtual TypeNameHandling TypeNameHandling
		{
			[Token(Token = "0x6000D4E")]
			[Address(RVA = "0x1675AC4", Offset = "0x1675AC4", VA = "0x1675AC4", Slot = "10")]
			get
			{
				return default(TypeNameHandling);
			}
			[Token(Token = "0x6000D4F")]
			[Address(RVA = "0x1675ACC", Offset = "0x1675ACC", VA = "0x1675ACC", Slot = "11")]
			set
			{
			}
		}

		[Token(Token = "0x170000D6")]
		public virtual FormatterAssemblyStyle TypeNameAssemblyFormat
		{
			[Token(Token = "0x6000D50")]
			[Address(RVA = "0x1675B68", Offset = "0x1675B68", VA = "0x1675B68", Slot = "12")]
			get
			{
				return default(FormatterAssemblyStyle);
			}
			[Token(Token = "0x6000D51")]
			[Address(RVA = "0x1675B70", Offset = "0x1675B70", VA = "0x1675B70", Slot = "13")]
			set
			{
			}
		}

		[Token(Token = "0x170000D7")]
		public virtual PreserveReferencesHandling PreserveReferencesHandling
		{
			[Token(Token = "0x6000D52")]
			[Address(RVA = "0x1675C0C", Offset = "0x1675C0C", VA = "0x1675C0C", Slot = "14")]
			get
			{
				return default(PreserveReferencesHandling);
			}
			[Token(Token = "0x6000D53")]
			[Address(RVA = "0x1675C14", Offset = "0x1675C14", VA = "0x1675C14", Slot = "15")]
			set
			{
			}
		}

		[Token(Token = "0x170000D8")]
		public virtual ReferenceLoopHandling ReferenceLoopHandling
		{
			[Token(Token = "0x6000D54")]
			[Address(RVA = "0x1675CB0", Offset = "0x1675CB0", VA = "0x1675CB0", Slot = "16")]
			get
			{
				return default(ReferenceLoopHandling);
			}
			[Token(Token = "0x6000D55")]
			[Address(RVA = "0x1675CB8", Offset = "0x1675CB8", VA = "0x1675CB8", Slot = "17")]
			set
			{
			}
		}

		[Token(Token = "0x170000D9")]
		public virtual MissingMemberHandling MissingMemberHandling
		{
			[Token(Token = "0x6000D56")]
			[Address(RVA = "0x1675D54", Offset = "0x1675D54", VA = "0x1675D54", Slot = "18")]
			get
			{
				return default(MissingMemberHandling);
			}
			[Token(Token = "0x6000D57")]
			[Address(RVA = "0x1675D5C", Offset = "0x1675D5C", VA = "0x1675D5C", Slot = "19")]
			set
			{
			}
		}

		[Token(Token = "0x170000DA")]
		public virtual NullValueHandling NullValueHandling
		{
			[Token(Token = "0x6000D58")]
			[Address(RVA = "0x1675DF8", Offset = "0x1675DF8", VA = "0x1675DF8", Slot = "20")]
			get
			{
				return default(NullValueHandling);
			}
			[Token(Token = "0x6000D59")]
			[Address(RVA = "0x1675E00", Offset = "0x1675E00", VA = "0x1675E00", Slot = "21")]
			set
			{
			}
		}

		[Token(Token = "0x170000DB")]
		public virtual DefaultValueHandling DefaultValueHandling
		{
			[Token(Token = "0x6000D5A")]
			[Address(RVA = "0x1675E9C", Offset = "0x1675E9C", VA = "0x1675E9C", Slot = "22")]
			get
			{
				return default(DefaultValueHandling);
			}
			[Token(Token = "0x6000D5B")]
			[Address(RVA = "0x1675EA4", Offset = "0x1675EA4", VA = "0x1675EA4", Slot = "23")]
			set
			{
			}
		}

		[Token(Token = "0x170000DC")]
		public virtual ObjectCreationHandling ObjectCreationHandling
		{
			[Token(Token = "0x6000D5C")]
			[Address(RVA = "0x1675F40", Offset = "0x1675F40", VA = "0x1675F40", Slot = "24")]
			get
			{
				return default(ObjectCreationHandling);
			}
			[Token(Token = "0x6000D5D")]
			[Address(RVA = "0x1675F48", Offset = "0x1675F48", VA = "0x1675F48", Slot = "25")]
			set
			{
			}
		}

		[Token(Token = "0x170000DD")]
		public virtual ConstructorHandling ConstructorHandling
		{
			[Token(Token = "0x6000D5E")]
			[Address(RVA = "0x1675FE4", Offset = "0x1675FE4", VA = "0x1675FE4", Slot = "26")]
			get
			{
				return default(ConstructorHandling);
			}
			[Token(Token = "0x6000D5F")]
			[Address(RVA = "0x1675FEC", Offset = "0x1675FEC", VA = "0x1675FEC", Slot = "27")]
			set
			{
			}
		}

		[Token(Token = "0x170000DE")]
		public virtual JsonConverterCollection Converters
		{
			[Token(Token = "0x6000D60")]
			[Address(RVA = "0x1676088", Offset = "0x1676088", VA = "0x1676088", Slot = "28")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000DF")]
		public virtual IContractResolver ContractResolver
		{
			[Token(Token = "0x6000D61")]
			[Address(RVA = "0x16760F0", Offset = "0x16760F0", VA = "0x16760F0", Slot = "29")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D62")]
			[Address(RVA = "0x1676164", Offset = "0x1676164", VA = "0x1676164", Slot = "30")]
			set
			{
			}
		}

		[Token(Token = "0x170000E0")]
		public virtual StreamingContext Context
		{
			[Token(Token = "0x6000D63")]
			[Address(RVA = "0x167616C", Offset = "0x167616C", VA = "0x167616C", Slot = "31")]
			get
			{
				return default(StreamingContext);
			}
			[Token(Token = "0x6000D64")]
			[Address(RVA = "0x1676178", Offset = "0x1676178", VA = "0x1676178", Slot = "32")]
			set
			{
			}
		}

		[Token(Token = "0x14000006")]
		public virtual event EventHandler<ErrorEventArgs> Error
		{
			[Token(Token = "0x6000D48")]
			[Address(RVA = "0x1675730", Offset = "0x1675730", VA = "0x1675730", Slot = "4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C760", Offset = "0xB4C760")]
			add
			{
			}
			[Token(Token = "0x6000D49")]
			[Address(RVA = "0x167581C", Offset = "0x167581C", VA = "0x167581C", Slot = "5")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C770", Offset = "0xB4C770")]
			remove
			{
			}
		}

		[Token(Token = "0x6000D65")]
		[Address(RVA = "0x1676180", Offset = "0x1676180", VA = "0x1676180")]
		public JsonSerializer()
		{
		}

		[Token(Token = "0x6000D66")]
		[Address(RVA = "0x1672ECC", Offset = "0x1672ECC", VA = "0x1672ECC")]
		public static JsonSerializer Create(JsonSerializerSettings settings)
		{
			return null;
		}

		[Token(Token = "0x6000D67")]
		[Address(RVA = "0x16762B8", Offset = "0x16762B8", VA = "0x16762B8")]
		public void Populate(TextReader reader, object target)
		{
		}

		[Token(Token = "0x6000D68")]
		[Address(RVA = "0x16739CC", Offset = "0x16739CC", VA = "0x16739CC")]
		public void Populate(JsonReader reader, object target)
		{
		}

		[Token(Token = "0x6000D69")]
		[Address(RVA = "0x167633C", Offset = "0x167633C", VA = "0x167633C", Slot = "33")]
		internal virtual void PopulateInternal(JsonReader reader, object target)
		{
		}

		[Token(Token = "0x6000D6A")]
		[Address(RVA = "0x16763F8", Offset = "0x16763F8", VA = "0x16763F8")]
		public object Deserialize(JsonReader reader)
		{
			return null;
		}

		[Token(Token = "0x6000D6B")]
		[Address(RVA = "0x167640C", Offset = "0x167640C", VA = "0x167640C")]
		public object Deserialize(TextReader reader, Type objectType)
		{
			return null;
		}

		[Token(Token = "0x6000D6C")]
		public T Deserialize<T>(JsonReader reader)
		{
			return (T)null;
		}

		[Token(Token = "0x6000D6D")]
		[Address(RVA = "0x166702C", Offset = "0x166702C", VA = "0x166702C")]
		public object Deserialize(JsonReader reader, Type objectType)
		{
			return null;
		}

		[Token(Token = "0x6000D6E")]
		[Address(RVA = "0x1676490", Offset = "0x1676490", VA = "0x1676490", Slot = "34")]
		internal virtual object DeserializeInternal(JsonReader reader, Type objectType)
		{
			return null;
		}

		[Token(Token = "0x6000D6F")]
		[Address(RVA = "0x1676534", Offset = "0x1676534", VA = "0x1676534")]
		public void Serialize(TextWriter textWriter, object value)
		{
		}

		[Token(Token = "0x6000D70")]
		[Address(RVA = "0x1666D34", Offset = "0x1666D34", VA = "0x1666D34")]
		public void Serialize(JsonWriter jsonWriter, object value)
		{
		}

		[Token(Token = "0x6000D71")]
		[Address(RVA = "0x16765B8", Offset = "0x16765B8", VA = "0x16765B8", Slot = "35")]
		internal virtual void SerializeInternal(JsonWriter jsonWriter, object value)
		{
		}

		[Token(Token = "0x6000D72")]
		[Address(RVA = "0x167665C", Offset = "0x167665C", VA = "0x167665C")]
		internal JsonConverter GetMatchingConverter(Type type)
		{
			return null;
		}

		[Token(Token = "0x6000D73")]
		[Address(RVA = "0x1676664", Offset = "0x1676664", VA = "0x1676664")]
		internal static JsonConverter GetMatchingConverter(IList<JsonConverter> converters, Type objectType)
		{
			return null;
		}

		[Token(Token = "0x6000D74")]
		[Address(RVA = "0x16767E8", Offset = "0x16767E8", VA = "0x16767E8")]
		internal void OnError(ErrorEventArgs e)
		{
		}
	}
	[Token(Token = "0x2000203")]
	public class JsonSerializerSettings
	{
		[Token(Token = "0x4000B46")]
		internal const ReferenceLoopHandling DefaultReferenceLoopHandling = ReferenceLoopHandling.Error;

		[Token(Token = "0x4000B47")]
		internal const MissingMemberHandling DefaultMissingMemberHandling = MissingMemberHandling.Ignore;

		[Token(Token = "0x4000B48")]
		internal const NullValueHandling DefaultNullValueHandling = NullValueHandling.Include;

		[Token(Token = "0x4000B49")]
		internal const DefaultValueHandling DefaultDefaultValueHandling = DefaultValueHandling.Include;

		[Token(Token = "0x4000B4A")]
		internal const ObjectCreationHandling DefaultObjectCreationHandling = ObjectCreationHandling.Auto;

		[Token(Token = "0x4000B4B")]
		internal const PreserveReferencesHandling DefaultPreserveReferencesHandling = PreserveReferencesHandling.None;

		[Token(Token = "0x4000B4C")]
		internal const ConstructorHandling DefaultConstructorHandling = ConstructorHandling.Default;

		[Token(Token = "0x4000B4D")]
		internal const TypeNameHandling DefaultTypeNameHandling = TypeNameHandling.None;

		[Token(Token = "0x4000B4E")]
		internal const FormatterAssemblyStyle DefaultTypeNameAssemblyFormat = FormatterAssemblyStyle.Simple;

		[Token(Token = "0x4000B4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static readonly StreamingContext DefaultContext;

		[Token(Token = "0x4000B50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B218", Offset = "0xB4B218")]
		private ReferenceLoopHandling <ReferenceLoopHandling>k__BackingField;

		[Token(Token = "0x4000B51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B228", Offset = "0xB4B228")]
		private MissingMemberHandling <MissingMemberHandling>k__BackingField;

		[Token(Token = "0x4000B52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B238", Offset = "0xB4B238")]
		private ObjectCreationHandling <ObjectCreationHandling>k__BackingField;

		[Token(Token = "0x4000B53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B248", Offset = "0xB4B248")]
		private NullValueHandling <NullValueHandling>k__BackingField;

		[Token(Token = "0x4000B54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B258", Offset = "0xB4B258")]
		private DefaultValueHandling <DefaultValueHandling>k__BackingField;

		[Token(Token = "0x4000B55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B268", Offset = "0xB4B268")]
		private IList<JsonConverter> <Converters>k__BackingField;

		[Token(Token = "0x4000B56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B278", Offset = "0xB4B278")]
		private PreserveReferencesHandling <PreserveReferencesHandling>k__BackingField;

		[Token(Token = "0x4000B57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B288", Offset = "0xB4B288")]
		private TypeNameHandling <TypeNameHandling>k__BackingField;

		[Token(Token = "0x4000B58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B298", Offset = "0xB4B298")]
		private FormatterAssemblyStyle <TypeNameAssemblyFormat>k__BackingField;

		[Token(Token = "0x4000B59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B2A8", Offset = "0xB4B2A8")]
		private ConstructorHandling <ConstructorHandling>k__BackingField;

		[Token(Token = "0x4000B5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B2B8", Offset = "0xB4B2B8")]
		private IContractResolver <ContractResolver>k__BackingField;

		[Token(Token = "0x4000B5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B2C8", Offset = "0xB4B2C8")]
		private IReferenceResolver <ReferenceResolver>k__BackingField;

		[Token(Token = "0x4000B5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B2D8", Offset = "0xB4B2D8")]
		private SerializationBinder <Binder>k__BackingField;

		[Token(Token = "0x4000B5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B2E8", Offset = "0xB4B2E8")]
		private EventHandler<ErrorEventArgs> <Error>k__BackingField;

		[Token(Token = "0x4000B5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B2F8", Offset = "0xB4B2F8")]
		private StreamingContext <Context>k__BackingField;

		[Token(Token = "0x170000E1")]
		public ReferenceLoopHandling ReferenceLoopHandling
		{
			[Token(Token = "0x6000D75")]
			[Address(RVA = "0x167625C", Offset = "0x167625C", VA = "0x167625C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C780", Offset = "0xB4C780")]
			get
			{
				return default(ReferenceLoopHandling);
			}
			[Token(Token = "0x6000D76")]
			[Address(RVA = "0x1676860", Offset = "0x1676860", VA = "0x1676860")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C790", Offset = "0xB4C790")]
			set
			{
			}
		}

		[Token(Token = "0x170000E2")]
		public MissingMemberHandling MissingMemberHandling
		{
			[Token(Token = "0x6000D77")]
			[Address(RVA = "0x1676264", Offset = "0x1676264", VA = "0x1676264")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C7A0", Offset = "0xB4C7A0")]
			get
			{
				return default(MissingMemberHandling);
			}
			[Token(Token = "0x6000D78")]
			[Address(RVA = "0x1676868", Offset = "0x1676868", VA = "0x1676868")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C7B0", Offset = "0xB4C7B0")]
			set
			{
			}
		}

		[Token(Token = "0x170000E3")]
		public ObjectCreationHandling ObjectCreationHandling
		{
			[Token(Token = "0x6000D79")]
			[Address(RVA = "0x167626C", Offset = "0x167626C", VA = "0x167626C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C7C0", Offset = "0xB4C7C0")]
			get
			{
				return default(ObjectCreationHandling);
			}
			[Token(Token = "0x6000D7A")]
			[Address(RVA = "0x1676870", Offset = "0x1676870", VA = "0x1676870")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C7D0", Offset = "0xB4C7D0")]
			set
			{
			}
		}

		[Token(Token = "0x170000E4")]
		public NullValueHandling NullValueHandling
		{
			[Token(Token = "0x6000D7B")]
			[Address(RVA = "0x1676274", Offset = "0x1676274", VA = "0x1676274")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C7E0", Offset = "0xB4C7E0")]
			get
			{
				return default(NullValueHandling);
			}
			[Token(Token = "0x6000D7C")]
			[Address(RVA = "0x1676878", Offset = "0x1676878", VA = "0x1676878")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C7F0", Offset = "0xB4C7F0")]
			set
			{
			}
		}

		[Token(Token = "0x170000E5")]
		public DefaultValueHandling DefaultValueHandling
		{
			[Token(Token = "0x6000D7D")]
			[Address(RVA = "0x167627C", Offset = "0x167627C", VA = "0x167627C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C800", Offset = "0xB4C800")]
			get
			{
				return default(DefaultValueHandling);
			}
			[Token(Token = "0x6000D7E")]
			[Address(RVA = "0x1676880", Offset = "0x1676880", VA = "0x1676880")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C810", Offset = "0xB4C810")]
			set
			{
			}
		}

		[Token(Token = "0x170000E6")]
		public IList<JsonConverter> Converters
		{
			[Token(Token = "0x6000D7F")]
			[Address(RVA = "0x167623C", Offset = "0x167623C", VA = "0x167623C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C820", Offset = "0xB4C820")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D80")]
			[Address(RVA = "0x1672EC4", Offset = "0x1672EC4", VA = "0x1672EC4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C830", Offset = "0xB4C830")]
			set
			{
			}
		}

		[Token(Token = "0x170000E7")]
		public PreserveReferencesHandling PreserveReferencesHandling
		{
			[Token(Token = "0x6000D81")]
			[Address(RVA = "0x1676254", Offset = "0x1676254", VA = "0x1676254")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C840", Offset = "0xB4C840")]
			get
			{
				return default(PreserveReferencesHandling);
			}
			[Token(Token = "0x6000D82")]
			[Address(RVA = "0x1676888", Offset = "0x1676888", VA = "0x1676888")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C850", Offset = "0xB4C850")]
			set
			{
			}
		}

		[Token(Token = "0x170000E8")]
		public TypeNameHandling TypeNameHandling
		{
			[Token(Token = "0x6000D83")]
			[Address(RVA = "0x1676244", Offset = "0x1676244", VA = "0x1676244")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C860", Offset = "0xB4C860")]
			get
			{
				return default(TypeNameHandling);
			}
			[Token(Token = "0x6000D84")]
			[Address(RVA = "0x1676890", Offset = "0x1676890", VA = "0x1676890")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C870", Offset = "0xB4C870")]
			set
			{
			}
		}

		[Token(Token = "0x170000E9")]
		public FormatterAssemblyStyle TypeNameAssemblyFormat
		{
			[Token(Token = "0x6000D85")]
			[Address(RVA = "0x167624C", Offset = "0x167624C", VA = "0x167624C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C880", Offset = "0xB4C880")]
			get
			{
				return default(FormatterAssemblyStyle);
			}
			[Token(Token = "0x6000D86")]
			[Address(RVA = "0x1676898", Offset = "0x1676898", VA = "0x1676898")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C890", Offset = "0xB4C890")]
			set
			{
			}
		}

		[Token(Token = "0x170000EA")]
		public ConstructorHandling ConstructorHandling
		{
			[Token(Token = "0x6000D87")]
			[Address(RVA = "0x1676284", Offset = "0x1676284", VA = "0x1676284")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C8A0", Offset = "0xB4C8A0")]
			get
			{
				return default(ConstructorHandling);
			}
			[Token(Token = "0x6000D88")]
			[Address(RVA = "0x16768A0", Offset = "0x16768A0", VA = "0x16768A0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C8B0", Offset = "0xB4C8B0")]
			set
			{
			}
		}

		[Token(Token = "0x170000EB")]
		public IContractResolver ContractResolver
		{
			[Token(Token = "0x6000D89")]
			[Address(RVA = "0x16762A0", Offset = "0x16762A0", VA = "0x16762A0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C8C0", Offset = "0xB4C8C0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D8A")]
			[Address(RVA = "0x16768A8", Offset = "0x16768A8", VA = "0x16768A8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C8D0", Offset = "0xB4C8D0")]
			set
			{
			}
		}

		[Token(Token = "0x170000EC")]
		public IReferenceResolver ReferenceResolver
		{
			[Token(Token = "0x6000D8B")]
			[Address(RVA = "0x16762A8", Offset = "0x16762A8", VA = "0x16762A8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C8E0", Offset = "0xB4C8E0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D8C")]
			[Address(RVA = "0x16768B0", Offset = "0x16768B0", VA = "0x16768B0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C8F0", Offset = "0xB4C8F0")]
			set
			{
			}
		}

		[Token(Token = "0x170000ED")]
		public SerializationBinder Binder
		{
			[Token(Token = "0x6000D8D")]
			[Address(RVA = "0x16762B0", Offset = "0x16762B0", VA = "0x16762B0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C900", Offset = "0xB4C900")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D8E")]
			[Address(RVA = "0x16768B8", Offset = "0x16768B8", VA = "0x16768B8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C910", Offset = "0xB4C910")]
			set
			{
			}
		}

		[Token(Token = "0x170000EE")]
		public EventHandler<ErrorEventArgs> Error
		{
			[Token(Token = "0x6000D8F")]
			[Address(RVA = "0x1676298", Offset = "0x1676298", VA = "0x1676298")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C920", Offset = "0xB4C920")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D90")]
			[Address(RVA = "0x16768C0", Offset = "0x16768C0", VA = "0x16768C0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C930", Offset = "0xB4C930")]
			set
			{
			}
		}

		[Token(Token = "0x170000EF")]
		public StreamingContext Context
		{
			[Token(Token = "0x6000D91")]
			[Address(RVA = "0x167628C", Offset = "0x167628C", VA = "0x167628C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C940", Offset = "0xB4C940")]
			get
			{
				return default(StreamingContext);
			}
			[Token(Token = "0x6000D92")]
			[Address(RVA = "0x16768C8", Offset = "0x16768C8", VA = "0x16768C8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C950", Offset = "0xB4C950")]
			set
			{
			}
		}

		[Token(Token = "0x6000D93")]
		[Address(RVA = "0x1672E10", Offset = "0x1672E10", VA = "0x1672E10")]
		public JsonSerializerSettings()
		{
		}
	}
	[Token(Token = "0x2000204")]
	public class JsonTextReader : JsonReader, IJsonLineInfo
	{
		[Token(Token = "0x2000305")]
		private enum ReadType
		{
			[Token(Token = "0x4000EB6")]
			Read,
			[Token(Token = "0x4000EB7")]
			ReadAsBytes,
			[Token(Token = "0x4000EB8")]
			ReadAsDecimal,
			[Token(Token = "0x4000EB9")]
			ReadAsDateTimeOffset
		}

		[Token(Token = "0x4000B5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly TextReader _reader;

		[Token(Token = "0x4000B60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly StringBuffer _buffer;

		[Token(Token = "0x4000B61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private char? _lastChar;

		[Token(Token = "0x4000B62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private int _currentLinePosition;

		[Token(Token = "0x4000B63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int _currentLineNumber;

		[Token(Token = "0x4000B64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private bool _end;

		[Token(Token = "0x4000B65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private ReadType _readType;

		[Token(Token = "0x4000B66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private CultureInfo _culture;

		[Token(Token = "0x4000B67")]
		private const int LineFeedValue = 10;

		[Token(Token = "0x4000B68")]
		private const int CarriageReturnValue = 13;

		[Token(Token = "0x170000F0")]
		public CultureInfo Culture
		{
			[Token(Token = "0x6000D95")]
			[Address(RVA = "0x16768D4", Offset = "0x16768D4", VA = "0x16768D4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D96")]
			[Address(RVA = "0x167694C", Offset = "0x167694C", VA = "0x167694C")]
			set
			{
			}
		}

		[Token(Token = "0x170000F1")]
		public int LineNumber
		{
			[Token(Token = "0x6000DBB")]
			[Address(RVA = "0x167B10C", Offset = "0x167B10C", VA = "0x167B10C", Slot = "19")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000F2")]
		public int LinePosition
		{
			[Token(Token = "0x6000DBC")]
			[Address(RVA = "0x167B124", Offset = "0x167B124", VA = "0x167B124", Slot = "20")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000D97")]
		[Address(RVA = "0x167368C", Offset = "0x167368C", VA = "0x167368C")]
		public JsonTextReader(TextReader reader)
		{
		}

		[Token(Token = "0x6000D98")]
		[Address(RVA = "0x1676954", Offset = "0x1676954", VA = "0x1676954")]
		private void ParseString(char quote)
		{
		}

		[Token(Token = "0x6000D99")]
		[Address(RVA = "0x1676B88", Offset = "0x1676B88", VA = "0x1676B88")]
		private void ReadStringIntoBuffer(char quote)
		{
		}

		[Token(Token = "0x6000D9A")]
		[Address(RVA = "0x16774EC", Offset = "0x16774EC", VA = "0x16774EC")]
		private JsonReaderException CreateJsonReaderException(string format, params object[] args)
		{
			return null;
		}

		[Token(Token = "0x6000D9B")]
		[Address(RVA = "0x16775B0", Offset = "0x16775B0", VA = "0x16775B0")]
		private TimeSpan ReadOffset(string offsetText)
		{
			return default(TimeSpan);
		}

		[Token(Token = "0x6000D9C")]
		[Address(RVA = "0x1677178", Offset = "0x1677178", VA = "0x1677178")]
		private void ParseDate(string text)
		{
		}

		[Token(Token = "0x6000D9D")]
		[Address(RVA = "0x1677414", Offset = "0x1677414", VA = "0x1677414")]
		private char MoveNext()
		{
			return default(char);
		}

		[Token(Token = "0x6000D9E")]
		[Address(RVA = "0x1677790", Offset = "0x1677790", VA = "0x1677790")]
		private bool HasNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D9F")]
		[Address(RVA = "0x16777D0", Offset = "0x16777D0", VA = "0x16777D0")]
		private int PeekNext()
		{
			return default(int);
		}

		[Token(Token = "0x6000DA0")]
		[Address(RVA = "0x1677804", Offset = "0x1677804", VA = "0x1677804", Slot = "11")]
		public override bool Read()
		{
			return default(bool);
		}

		[Token(Token = "0x6000DA1")]
		[Address(RVA = "0x1677A50", Offset = "0x1677A50", VA = "0x1677A50", Slot = "12")]
		public override byte[] ReadAsBytes()
		{
			return null;
		}

		[Token(Token = "0x6000DA2")]
		[Address(RVA = "0x1677ECC", Offset = "0x1677ECC", VA = "0x1677ECC", Slot = "13")]
		public override decimal? ReadAsDecimal()
		{
			return null;
		}

		[Token(Token = "0x6000DA3")]
		[Address(RVA = "0x1678334", Offset = "0x1678334", VA = "0x1678334", Slot = "14")]
		public override DateTimeOffset? ReadAsDateTimeOffset()
		{
			return null;
		}

		[Token(Token = "0x6000DA4")]
		[Address(RVA = "0x167780C", Offset = "0x167780C", VA = "0x167780C")]
		private bool ReadInternal()
		{
			return default(bool);
		}

		[Token(Token = "0x6000DA5")]
		[Address(RVA = "0x1678E74", Offset = "0x1678E74", VA = "0x1678E74")]
		private bool ParsePostValue(char currentChar)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DA6")]
		[Address(RVA = "0x1678D50", Offset = "0x1678D50", VA = "0x1678D50")]
		private bool ParseObject(char currentChar)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DA7")]
		[Address(RVA = "0x1679308", Offset = "0x1679308", VA = "0x1679308")]
		private bool ParseProperty(char firstChar)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DA8")]
		[Address(RVA = "0x1679668", Offset = "0x1679668", VA = "0x1679668")]
		private bool ValidIdentifierChar(char value)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DA9")]
		[Address(RVA = "0x16796F8", Offset = "0x16796F8", VA = "0x16796F8")]
		private char ParseUnquotedProperty(char firstChar)
		{
			return default(char);
		}

		[Token(Token = "0x6000DAA")]
		[Address(RVA = "0x1678730", Offset = "0x1678730", VA = "0x1678730")]
		private bool ParseValue(char currentChar)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DAB")]
		[Address(RVA = "0x16799B4", Offset = "0x16799B4", VA = "0x16799B4")]
		private bool EatWhitespace(char initialChar, bool oneOrMore, out char finalChar)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DAC")]
		[Address(RVA = "0x1679F20", Offset = "0x1679F20", VA = "0x1679F20")]
		private void ParseConstructor()
		{
		}

		[Token(Token = "0x6000DAD")]
		[Address(RVA = "0x167A678", Offset = "0x167A678", VA = "0x167A678")]
		private void ParseNumber(char firstChar)
		{
		}

		[Token(Token = "0x6000DAE")]
		[Address(RVA = "0x16790F0", Offset = "0x16790F0", VA = "0x16790F0")]
		private void ParseComment()
		{
		}

		[Token(Token = "0x6000DAF")]
		[Address(RVA = "0x167AFC4", Offset = "0x167AFC4", VA = "0x167AFC4")]
		private bool MatchValue(char firstChar, string value)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DB0")]
		[Address(RVA = "0x167ADE4", Offset = "0x167ADE4", VA = "0x167ADE4")]
		private bool MatchValue(char firstChar, string value, bool noTrailingNonSeperatorCharacters)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DB1")]
		[Address(RVA = "0x167AE74", Offset = "0x167AE74", VA = "0x167AE74")]
		private bool IsSeperator(char c)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DB2")]
		[Address(RVA = "0x1679A7C", Offset = "0x1679A7C", VA = "0x1679A7C")]
		private void ParseTrue()
		{
		}

		[Token(Token = "0x6000DB3")]
		[Address(RVA = "0x1679DA8", Offset = "0x1679DA8", VA = "0x1679DA8")]
		private void ParseNull()
		{
		}

		[Token(Token = "0x6000DB4")]
		[Address(RVA = "0x167AC6C", Offset = "0x167AC6C", VA = "0x167AC6C")]
		private void ParseUndefined()
		{
		}

		[Token(Token = "0x6000DB5")]
		[Address(RVA = "0x1679C14", Offset = "0x1679C14", VA = "0x1679C14")]
		private void ParseFalse()
		{
		}

		[Token(Token = "0x6000DB6")]
		[Address(RVA = "0x167A4E0", Offset = "0x167A4E0", VA = "0x167A4E0")]
		private void ParseNumberNegativeInfinity()
		{
		}

		[Token(Token = "0x6000DB7")]
		[Address(RVA = "0x167A348", Offset = "0x167A348", VA = "0x167A348")]
		private void ParseNumberPositiveInfinity()
		{
		}

		[Token(Token = "0x6000DB8")]
		[Address(RVA = "0x167A1B0", Offset = "0x167A1B0", VA = "0x167A1B0")]
		private void ParseNumberNaN()
		{
		}

		[Token(Token = "0x6000DB9")]
		[Address(RVA = "0x167B0A4", Offset = "0x167B0A4", VA = "0x167B0A4", Slot = "17")]
		public override void Close()
		{
		}

		[Token(Token = "0x6000DBA")]
		[Address(RVA = "0x167B104", Offset = "0x167B104", VA = "0x167B104", Slot = "18")]
		public bool HasLineInfo()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000205")]
	public class JsonTextWriter : JsonWriter
	{
		[Token(Token = "0x4000B69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly TextWriter _writer;

		[Token(Token = "0x4000B6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Base64Encoder _base64Encoder;

		[Token(Token = "0x4000B6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private char _indentChar;

		[Token(Token = "0x4000B6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private int _indentation;

		[Token(Token = "0x4000B6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private char _quoteChar;

		[Token(Token = "0x4000B6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
		private bool _quoteName;

		[Token(Token = "0x170000F3")]
		private Base64Encoder Base64Encoder
		{
			[Token(Token = "0x6000DBD")]
			[Address(RVA = "0x167B12C", Offset = "0x167B12C", VA = "0x167B12C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000F4")]
		public int Indentation
		{
			[Token(Token = "0x6000DBE")]
			[Address(RVA = "0x167B1A8", Offset = "0x167B1A8", VA = "0x167B1A8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000DBF")]
			[Address(RVA = "0x167B1B0", Offset = "0x167B1B0", VA = "0x167B1B0")]
			set
			{
			}
		}

		[Token(Token = "0x170000F5")]
		public char QuoteChar
		{
			[Token(Token = "0x6000DC0")]
			[Address(RVA = "0x167B248", Offset = "0x167B248", VA = "0x167B248")]
			get
			{
				return default(char);
			}
			[Token(Token = "0x6000DC1")]
			[Address(RVA = "0x167B250", Offset = "0x167B250", VA = "0x167B250")]
			set
			{
			}
		}

		[Token(Token = "0x170000F6")]
		public char IndentChar
		{
			[Token(Token = "0x6000DC2")]
			[Address(RVA = "0x167B2F8", Offset = "0x167B2F8", VA = "0x167B2F8")]
			get
			{
				return default(char);
			}
			[Token(Token = "0x6000DC3")]
			[Address(RVA = "0x167B300", Offset = "0x167B300", VA = "0x167B300")]
			set
			{
			}
		}

		[Token(Token = "0x170000F7")]
		public bool QuoteName
		{
			[Token(Token = "0x6000DC4")]
			[Address(RVA = "0x167B308", Offset = "0x167B308", VA = "0x167B308")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000DC5")]
			[Address(RVA = "0x167B310", Offset = "0x167B310", VA = "0x167B310")]
			set
			{
			}
		}

		[Token(Token = "0x6000DC6")]
		[Address(RVA = "0x1673194", Offset = "0x1673194", VA = "0x1673194")]
		public JsonTextWriter(TextWriter textWriter)
		{
		}

		[Token(Token = "0x6000DC7")]
		[Address(RVA = "0x167B31C", Offset = "0x167B31C", VA = "0x167B31C", Slot = "5")]
		public override void Flush()
		{
		}

		[Token(Token = "0x6000DC8")]
		[Address(RVA = "0x167B350", Offset = "0x167B350", VA = "0x167B350", Slot = "6")]
		public override void Close()
		{
		}

		[Token(Token = "0x6000DC9")]
		[Address(RVA = "0x167B3BC", Offset = "0x167B3BC", VA = "0x167B3BC", Slot = "7")]
		public override void WriteStartObject()
		{
		}

		[Token(Token = "0x6000DCA")]
		[Address(RVA = "0x167B440", Offset = "0x167B440", VA = "0x167B440", Slot = "9")]
		public override void WriteStartArray()
		{
		}

		[Token(Token = "0x6000DCB")]
		[Address(RVA = "0x167B4C4", Offset = "0x167B4C4", VA = "0x167B4C4", Slot = "11")]
		public override void WriteStartConstructor(string name)
		{
		}

		[Token(Token = "0x6000DCC")]
		[Address(RVA = "0x167B5D8", Offset = "0x167B5D8", VA = "0x167B5D8", Slot = "15")]
		protected override void WriteEnd(JsonToken token)
		{
		}

		[Token(Token = "0x6000DCD")]
		[Address(RVA = "0x167B720", Offset = "0x167B720", VA = "0x167B720", Slot = "13")]
		public override void WritePropertyName(string name)
		{
		}

		[Token(Token = "0x6000DCE")]
		[Address(RVA = "0x167B780", Offset = "0x167B780", VA = "0x167B780", Slot = "16")]
		protected override void WriteIndent()
		{
		}

		[Token(Token = "0x6000DCF")]
		[Address(RVA = "0x167B830", Offset = "0x167B830", VA = "0x167B830", Slot = "17")]
		protected override void WriteValueDelimiter()
		{
		}

		[Token(Token = "0x6000DD0")]
		[Address(RVA = "0x167B868", Offset = "0x167B868", VA = "0x167B868", Slot = "18")]
		protected override void WriteIndentSpace()
		{
		}

		[Token(Token = "0x6000DD1")]
		[Address(RVA = "0x167B8A0", Offset = "0x167B8A0", VA = "0x167B8A0")]
		private void WriteValueInternal(string value, JsonToken token)
		{
		}

		[Token(Token = "0x6000DD2")]
		[Address(RVA = "0x167B8E0", Offset = "0x167B8E0", VA = "0x167B8E0", Slot = "19")]
		public override void WriteNull()
		{
		}

		[Token(Token = "0x6000DD3")]
		[Address(RVA = "0x167B97C", Offset = "0x167B97C", VA = "0x167B97C", Slot = "20")]
		public override void WriteUndefined()
		{
		}

		[Token(Token = "0x6000DD4")]
		[Address(RVA = "0x167BA18", Offset = "0x167BA18", VA = "0x167BA18", Slot = "21")]
		public override void WriteRaw(string json)
		{
		}

		[Token(Token = "0x6000DD5")]
		[Address(RVA = "0x167BA5C", Offset = "0x167BA5C", VA = "0x167BA5C", Slot = "23")]
		public override void WriteValue(string value)
		{
		}

		[Token(Token = "0x6000DD6")]
		[Address(RVA = "0x167BB2C", Offset = "0x167BB2C", VA = "0x167BB2C", Slot = "24")]
		public override void WriteValue(int value)
		{
		}

		[Token(Token = "0x6000DD7")]
		[Address(RVA = "0x167BBD4", Offset = "0x167BBD4", VA = "0x167BBD4", Slot = "25")]
		public override void WriteValue(uint value)
		{
		}

		[Token(Token = "0x6000DD8")]
		[Address(RVA = "0x167BC7C", Offset = "0x167BC7C", VA = "0x167BC7C", Slot = "26")]
		public override void WriteValue(long value)
		{
		}

		[Token(Token = "0x6000DD9")]
		[Address(RVA = "0x167BD24", Offset = "0x167BD24", VA = "0x167BD24", Slot = "27")]
		public override void WriteValue(ulong value)
		{
		}

		[Token(Token = "0x6000DDA")]
		[Address(RVA = "0x167BDCC", Offset = "0x167BDCC", VA = "0x167BDCC", Slot = "28")]
		public override void WriteValue(float value)
		{
		}

		[Token(Token = "0x6000DDB")]
		[Address(RVA = "0x167BE74", Offset = "0x167BE74", VA = "0x167BE74", Slot = "29")]
		public override void WriteValue(double value)
		{
		}

		[Token(Token = "0x6000DDC")]
		[Address(RVA = "0x167BF1C", Offset = "0x167BF1C", VA = "0x167BF1C", Slot = "30")]
		public override void WriteValue(bool value)
		{
		}

		[Token(Token = "0x6000DDD")]
		[Address(RVA = "0x167BFC4", Offset = "0x167BFC4", VA = "0x167BFC4", Slot = "31")]
		public override void WriteValue(short value)
		{
		}

		[Token(Token = "0x6000DDE")]
		[Address(RVA = "0x167C06C", Offset = "0x167C06C", VA = "0x167C06C", Slot = "32")]
		public override void WriteValue(ushort value)
		{
		}

		[Token(Token = "0x6000DDF")]
		[Address(RVA = "0x167C114", Offset = "0x167C114", VA = "0x167C114", Slot = "33")]
		public override void WriteValue(char value)
		{
		}

		[Token(Token = "0x6000DE0")]
		[Address(RVA = "0x167C1BC", Offset = "0x167C1BC", VA = "0x167C1BC", Slot = "34")]
		public override void WriteValue(byte value)
		{
		}

		[Token(Token = "0x6000DE1")]
		[Address(RVA = "0x167C264", Offset = "0x167C264", VA = "0x167C264", Slot = "35")]
		public override void WriteValue(sbyte value)
		{
		}

		[Token(Token = "0x6000DE2")]
		[Address(RVA = "0x167C30C", Offset = "0x167C30C", VA = "0x167C30C", Slot = "36")]
		public override void WriteValue(decimal value)
		{
		}

		[Token(Token = "0x6000DE3")]
		[Address(RVA = "0x167C3BC", Offset = "0x167C3BC", VA = "0x167C3BC", Slot = "37")]
		public override void WriteValue(DateTime value)
		{
		}

		[Token(Token = "0x6000DE4")]
		[Address(RVA = "0x167C440", Offset = "0x167C440", VA = "0x167C440", Slot = "58")]
		public override void WriteValue(byte[] value)
		{
		}

		[Token(Token = "0x6000DE5")]
		[Address(RVA = "0x167C530", Offset = "0x167C530", VA = "0x167C530", Slot = "38")]
		public override void WriteValue(DateTimeOffset value)
		{
		}

		[Token(Token = "0x6000DE6")]
		[Address(RVA = "0x167C5E0", Offset = "0x167C5E0", VA = "0x167C5E0", Slot = "39")]
		public override void WriteValue(Guid value)
		{
		}

		[Token(Token = "0x6000DE7")]
		[Address(RVA = "0x167C690", Offset = "0x167C690", VA = "0x167C690", Slot = "40")]
		public override void WriteValue(TimeSpan value)
		{
		}

		[Token(Token = "0x6000DE8")]
		[Address(RVA = "0x167C738", Offset = "0x167C738", VA = "0x167C738", Slot = "59")]
		public override void WriteValue(Uri value)
		{
		}

		[Token(Token = "0x6000DE9")]
		[Address(RVA = "0x167C7E0", Offset = "0x167C7E0", VA = "0x167C7E0", Slot = "61")]
		public override void WriteComment(string text)
		{
		}

		[Token(Token = "0x6000DEA")]
		[Address(RVA = "0x167C8C4", Offset = "0x167C8C4", VA = "0x167C8C4", Slot = "62")]
		public override void WriteWhitespace(string ws)
		{
		}
	}
	[Token(Token = "0x2000206")]
	public enum JsonToken
	{
		[Token(Token = "0x4000B70")]
		None,
		[Token(Token = "0x4000B71")]
		StartObject,
		[Token(Token = "0x4000B72")]
		StartArray,
		[Token(Token = "0x4000B73")]
		StartConstructor,
		[Token(Token = "0x4000B74")]
		PropertyName,
		[Token(Token = "0x4000B75")]
		Comment,
		[Token(Token = "0x4000B76")]
		Raw,
		[Token(Token = "0x4000B77")]
		Integer,
		[Token(Token = "0x4000B78")]
		Float,
		[Token(Token = "0x4000B79")]
		String,
		[Token(Token = "0x4000B7A")]
		Boolean,
		[Token(Token = "0x4000B7B")]
		Null,
		[Token(Token = "0x4000B7C")]
		Undefined,
		[Token(Token = "0x4000B7D")]
		EndObject,
		[Token(Token = "0x4000B7E")]
		EndArray,
		[Token(Token = "0x4000B7F")]
		EndConstructor,
		[Token(Token = "0x4000B80")]
		Date,
		[Token(Token = "0x4000B81")]
		Bytes
	}
	[Token(Token = "0x2000207")]
	public class JsonValidatingReader : JsonReader, IJsonLineInfo
	{
		[Token(Token = "0x2000306")]
		private class SchemaScope
		{
			[Serializable]
			[Token(Token = "0x2000351")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49FBC", Offset = "0xB49FBC")]
			private sealed class <>c
			{
				[Token(Token = "0x4000F7C")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public static readonly <>c <>9;

				[Token(Token = "0x4000F7D")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
				public static Func<string, string> <>9__17_0;

				[Token(Token = "0x4000F7E")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				public static Func<string, bool> <>9__17_1;

				[Token(Token = "0x4000F7F")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				public static Func<KeyValuePair<string, JsonSchemaModel>, bool> <>9__18_0;

				[Token(Token = "0x4000F80")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
				public static Func<KeyValuePair<string, JsonSchemaModel>, string> <>9__18_1;

				[Token(Token = "0x60016C3")]
				[Address(RVA = "0x1683B88", Offset = "0x1683B88", VA = "0x1683B88")]
				public <>c()
				{
				}

				[Token(Token = "0x60016C4")]
				[Address(RVA = "0x1683B90", Offset = "0x1683B90", VA = "0x1683B90")]
				internal string <.ctor>b__17_0(string p)
				{
					return null;
				}

				[Token(Token = "0x60016C5")]
				[Address(RVA = "0x1683B98", Offset = "0x1683B98", VA = "0x1683B98")]
				internal bool <.ctor>b__17_1(string p)
				{
					return default(bool);
				}

				[Token(Token = "0x60016C6")]
				[Address(RVA = "0x1683BA0", Offset = "0x1683BA0", VA = "0x1683BA0")]
				internal bool <GetRequiredProperties>b__18_0(KeyValuePair<string, JsonSchemaModel> p)
				{
					return default(bool);
				}

				[Token(Token = "0x60016C7")]
				[Address(RVA = "0x1683C18", Offset = "0x1683C18", VA = "0x1683C18")]
				internal string <GetRequiredProperties>b__18_1(KeyValuePair<string, JsonSchemaModel> p)
				{
					return null;
				}
			}

			[Token(Token = "0x4000EBA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly JTokenType _tokenType;

			[Token(Token = "0x4000EBB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private readonly IList<JsonSchemaModel> _schemas;

			[Token(Token = "0x4000EBC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private readonly Dictionary<string, bool> _requiredProperties;

			[Token(Token = "0x4000EBD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4BBE0", Offset = "0xB4BBE0")]
			private string <CurrentPropertyName>k__BackingField;

			[Token(Token = "0x4000EBE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4BBF0", Offset = "0xB4BBF0")]
			private int <ArrayItemCount>k__BackingField;

			[Token(Token = "0x17000246")]
			public string CurrentPropertyName
			{
				[Token(Token = "0x60015C1")]
				[Address(RVA = "0x167E0EC", Offset = "0x167E0EC", VA = "0x167E0EC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4E3FC", Offset = "0xB4E3FC")]
				get
				{
					return null;
				}
				[Token(Token = "0x60015C2")]
				[Address(RVA = "0x1683594", Offset = "0x1683594", VA = "0x1683594")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4E40C", Offset = "0xB4E40C")]
				set
				{
				}
			}

			[Token(Token = "0x17000247")]
			public int ArrayItemCount
			{
				[Token(Token = "0x60015C3")]
				[Address(RVA = "0x167E0F4", Offset = "0x167E0F4", VA = "0x167E0F4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4E41C", Offset = "0xB4E41C")]
				get
				{
					return default(int);
				}
				[Token(Token = "0x60015C4")]
				[Address(RVA = "0x1683120", Offset = "0x1683120", VA = "0x1683120")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4E42C", Offset = "0xB4E42C")]
				set
				{
				}
			}

			[Token(Token = "0x17000248")]
			public IList<JsonSchemaModel> Schemas
			{
				[Token(Token = "0x60015C5")]
				[Address(RVA = "0x167CDF4", Offset = "0x167CDF4", VA = "0x167CDF4")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000249")]
			public Dictionary<string, bool> RequiredProperties
			{
				[Token(Token = "0x60015C6")]
				[Address(RVA = "0x1682E94", Offset = "0x1682E94", VA = "0x1682E94")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700024A")]
			public JTokenType TokenType
			{
				[Token(Token = "0x60015C7")]
				[Address(RVA = "0x167E0E4", Offset = "0x167E0E4", VA = "0x167E0E4")]
				get
				{
					return default(JTokenType);
				}
			}

			[Token(Token = "0x60015C8")]
			[Address(RVA = "0x16807C8", Offset = "0x16807C8", VA = "0x16807C8")]
			public SchemaScope(JTokenType tokenType, IList<JsonSchemaModel> schemas)
			{
			}

			[Token(Token = "0x60015C9")]
			[Address(RVA = "0x1683944", Offset = "0x1683944", VA = "0x1683944")]
			private IEnumerable<string> GetRequiredProperties(JsonSchemaModel schema)
			{
				return null;
			}
		}

		[Serializable]
		[Token(Token = "0x2000307")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49BFC", Offset = "0xB49BFC")]
		private sealed class <>c
		{
			[Token(Token = "0x4000EBF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000EC0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<KeyValuePair<string, bool>, bool> <>9__41_0;

			[Token(Token = "0x4000EC1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<KeyValuePair<string, bool>, string> <>9__41_1;

			[Token(Token = "0x60015CB")]
			[Address(RVA = "0x168387C", Offset = "0x168387C", VA = "0x168387C")]
			public <>c()
			{
			}

			[Token(Token = "0x60015CC")]
			[Address(RVA = "0x1683884", Offset = "0x1683884", VA = "0x1683884")]
			internal bool <ValidateEndObject>b__41_0(KeyValuePair<string, bool> kv)
			{
				return default(bool);
			}

			[Token(Token = "0x60015CD")]
			[Address(RVA = "0x16838E8", Offset = "0x16838E8", VA = "0x16838E8")]
			internal string <ValidateEndObject>b__41_1(KeyValuePair<string, bool> kv)
			{
				return null;
			}
		}

		[Token(Token = "0x4000B82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly JsonReader _reader;

		[Token(Token = "0x4000B83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly Stack<SchemaScope> _stack;

		[Token(Token = "0x4000B84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private JsonSchema _schema;

		[Token(Token = "0x4000B85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private JsonSchemaModel _model;

		[Token(Token = "0x4000B86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private SchemaScope _currentScope;

		[Token(Token = "0x170000F8")]
		public override object Value
		{
			[Token(Token = "0x6000DED")]
			[Address(RVA = "0x167CB7C", Offset = "0x167CB7C", VA = "0x167CB7C", Slot = "8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000F9")]
		public override int Depth
		{
			[Token(Token = "0x6000DEE")]
			[Address(RVA = "0x167CBB0", Offset = "0x167CBB0", VA = "0x167CBB0", Slot = "10")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000FA")]
		public override char QuoteChar
		{
			[Token(Token = "0x6000DEF")]
			[Address(RVA = "0x167CBE4", Offset = "0x167CBE4", VA = "0x167CBE4", Slot = "5")]
			get
			{
				return default(char);
			}
			[Token(Token = "0x6000DF0")]
			[Address(RVA = "0x167CC18", Offset = "0x167CC18", VA = "0x167CC18", Slot = "6")]
			protected internal set
			{
			}
		}

		[Token(Token = "0x170000FB")]
		public override JsonToken TokenType
		{
			[Token(Token = "0x6000DF1")]
			[Address(RVA = "0x167CC1C", Offset = "0x167CC1C", VA = "0x167CC1C", Slot = "7")]
			get
			{
				return default(JsonToken);
			}
		}

		[Token(Token = "0x170000FC")]
		public override Type ValueType
		{
			[Token(Token = "0x6000DF2")]
			[Address(RVA = "0x167CC50", Offset = "0x167CC50", VA = "0x167CC50", Slot = "9")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000FD")]
		private IEnumerable<JsonSchemaModel> CurrentSchemas
		{
			[Token(Token = "0x6000DF5")]
			[Address(RVA = "0x167CDC8", Offset = "0x167CDC8", VA = "0x167CDC8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000FE")]
		private IEnumerable<JsonSchemaModel> CurrentMemberSchemas
		{
			[Token(Token = "0x6000DF6")]
			[Address(RVA = "0x167CDFC", Offset = "0x167CDFC", VA = "0x167CDFC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000FF")]
		public JsonSchema Schema
		{
			[Token(Token = "0x6000DFA")]
			[Address(RVA = "0x167E660", Offset = "0x167E660", VA = "0x167E660")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000DFB")]
			[Address(RVA = "0x167E668", Offset = "0x167E668", VA = "0x167E668")]
			set
			{
			}
		}

		[Token(Token = "0x17000100")]
		public JsonReader Reader
		{
			[Token(Token = "0x6000DFC")]
			[Address(RVA = "0x167E710", Offset = "0x167E710", VA = "0x167E710")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000101")]
		private int Newtonsoft.Json.IJsonLineInfo.LineNumber
		{
			[Token(Token = "0x6000E13")]
			[Address(RVA = "0x1683688", Offset = "0x1683688", VA = "0x1683688", Slot = "19")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000102")]
		private int Newtonsoft.Json.IJsonLineInfo.LinePosition
		{
			[Token(Token = "0x6000E14")]
			[Address(RVA = "0x1683750", Offset = "0x1683750", VA = "0x1683750", Slot = "20")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x14000007")]
		public event ValidationEventHandler ValidationEventHandler
		{
			[Token(Token = "0x6000DEB")]
			[Address(RVA = "0x167C9A4", Offset = "0x167C9A4", VA = "0x167C9A4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C960", Offset = "0xB4C960")]
			add
			{
			}
			[Token(Token = "0x6000DEC")]
			[Address(RVA = "0x167CA90", Offset = "0x167CA90", VA = "0x167CA90")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C970", Offset = "0xB4C970")]
			remove
			{
			}
		}

		[Token(Token = "0x6000DF3")]
		[Address(RVA = "0x167CC84", Offset = "0x167CC84", VA = "0x167CC84")]
		private void Push(SchemaScope scope)
		{
		}

		[Token(Token = "0x6000DF4")]
		[Address(RVA = "0x167CCFC", Offset = "0x167CCFC", VA = "0x167CCFC")]
		private SchemaScope Pop()
		{
			return null;
		}

		[Token(Token = "0x6000DF7")]
		[Address(RVA = "0x167E0FC", Offset = "0x167E0FC", VA = "0x167E0FC")]
		private void RaiseError(string message, JsonSchemaModel schema)
		{
		}

		[Token(Token = "0x6000DF8")]
		[Address(RVA = "0x167E528", Offset = "0x167E528", VA = "0x167E528")]
		private void OnValidationEvent(JsonSchemaException exception)
		{
		}

		[Token(Token = "0x6000DF9")]
		[Address(RVA = "0x167E5C8", Offset = "0x167E5C8", VA = "0x167E5C8")]
		public JsonValidatingReader(JsonReader reader)
		{
		}

		[Token(Token = "0x6000DFD")]
		[Address(RVA = "0x167E718", Offset = "0x167E718", VA = "0x167E718")]
		private void ValidateInEnumAndNotDisallowed(JsonSchemaModel schema)
		{
		}

		[Token(Token = "0x6000DFE")]
		[Address(RVA = "0x167EB04", Offset = "0x167EB04", VA = "0x167EB04")]
		private JsonSchemaType? GetCurrentNodeSchemaType()
		{
			return null;
		}

		[Token(Token = "0x6000DFF")]
		[Address(RVA = "0x167EC2C", Offset = "0x167EC2C", VA = "0x167EC2C", Slot = "12")]
		public override byte[] ReadAsBytes()
		{
			return null;
		}

		[Token(Token = "0x6000E00")]
		[Address(RVA = "0x168017C", Offset = "0x168017C", VA = "0x168017C", Slot = "13")]
		public override decimal? ReadAsDecimal()
		{
			return null;
		}

		[Token(Token = "0x6000E01")]
		[Address(RVA = "0x16801CC", Offset = "0x16801CC", VA = "0x16801CC", Slot = "14")]
		public override DateTimeOffset? ReadAsDateTimeOffset()
		{
			return null;
		}

		[Token(Token = "0x6000E02")]
		[Address(RVA = "0x1680220", Offset = "0x1680220", VA = "0x1680220", Slot = "11")]
		public override bool Read()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E03")]
		[Address(RVA = "0x167EC78", Offset = "0x167EC78", VA = "0x167EC78")]
		private void ValidateCurrentToken()
		{
		}

		[Token(Token = "0x6000E04")]
		[Address(RVA = "0x16827A0", Offset = "0x16827A0", VA = "0x16827A0")]
		private void ValidateEndObject(JsonSchemaModel schema)
		{
		}

		[Token(Token = "0x6000E05")]
		[Address(RVA = "0x1682AAC", Offset = "0x1682AAC", VA = "0x1682AAC")]
		private void ValidateEndArray(JsonSchemaModel schema)
		{
		}

		[Token(Token = "0x6000E06")]
		[Address(RVA = "0x1682754", Offset = "0x1682754", VA = "0x1682754")]
		private void ValidateNull(JsonSchemaModel schema)
		{
		}

		[Token(Token = "0x6000E07")]
		[Address(RVA = "0x1682708", Offset = "0x1682708", VA = "0x1682708")]
		private void ValidateBoolean(JsonSchemaModel schema)
		{
		}

		[Token(Token = "0x6000E08")]
		[Address(RVA = "0x1681F54", Offset = "0x1681F54", VA = "0x1681F54")]
		private void ValidateString(JsonSchemaModel schema)
		{
		}

		[Token(Token = "0x6000E09")]
		[Address(RVA = "0x1680C1C", Offset = "0x1680C1C", VA = "0x1680C1C")]
		private void ValidateInteger(JsonSchemaModel schema)
		{
		}

		[Token(Token = "0x6000E0A")]
		[Address(RVA = "0x168029C", Offset = "0x168029C", VA = "0x168029C")]
		private void ProcessValue()
		{
		}

		[Token(Token = "0x6000E0B")]
		[Address(RVA = "0x1681598", Offset = "0x1681598", VA = "0x1681598")]
		private void ValidateFloat(JsonSchemaModel schema)
		{
		}

		[Token(Token = "0x6000E0C")]
		[Address(RVA = "0x16830A4", Offset = "0x16830A4", VA = "0x16830A4")]
		private static bool IsZero(double value)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E0D")]
		[Address(RVA = "0x16809D8", Offset = "0x16809D8", VA = "0x16809D8")]
		private void ValidatePropertyName(JsonSchemaModel schema)
		{
		}

		[Token(Token = "0x6000E0E")]
		[Address(RVA = "0x1683128", Offset = "0x1683128", VA = "0x1683128")]
		private bool IsPropertyDefinied(JsonSchemaModel schema, string propertyName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E0F")]
		[Address(RVA = "0x168359C", Offset = "0x168359C", VA = "0x168359C")]
		private bool ValidateArray(JsonSchemaModel schema)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E10")]
		[Address(RVA = "0x16835B0", Offset = "0x16835B0", VA = "0x16835B0")]
		private bool ValidateObject(JsonSchemaModel schema)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E11")]
		[Address(RVA = "0x1682E9C", Offset = "0x1682E9C", VA = "0x1682E9C")]
		private bool TestType(JsonSchemaModel currentSchema, JsonSchemaType currentType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E12")]
		[Address(RVA = "0x16835C4", Offset = "0x16835C4", VA = "0x16835C4", Slot = "18")]
		private bool Newtonsoft.Json.IJsonLineInfo.HasLineInfo()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000208")]
	public enum WriteState
	{
		[Token(Token = "0x4000B89")]
		Error,
		[Token(Token = "0x4000B8A")]
		Closed,
		[Token(Token = "0x4000B8B")]
		Object,
		[Token(Token = "0x4000B8C")]
		Array,
		[Token(Token = "0x4000B8D")]
		Constructor,
		[Token(Token = "0x4000B8E")]
		Property,
		[Token(Token = "0x4000B8F")]
		Start
	}
	[Token(Token = "0x2000209")]
	public enum Formatting
	{
		[Token(Token = "0x4000B91")]
		None,
		[Token(Token = "0x4000B92")]
		Indented
	}
	[Token(Token = "0x200020A")]
	public abstract class JsonWriter : IDisposable
	{
		[Token(Token = "0x2000308")]
		private enum State
		{
			[Token(Token = "0x4000EC3")]
			Start,
			[Token(Token = "0x4000EC4")]
			Property,
			[Token(Token = "0x4000EC5")]
			ObjectStart,
			[Token(Token = "0x4000EC6")]
			Object,
			[Token(Token = "0x4000EC7")]
			ArrayStart,
			[Token(Token = "0x4000EC8")]
			Array,
			[Token(Token = "0x4000EC9")]
			ConstructorStart,
			[Token(Token = "0x4000ECA")]
			Constructor,
			[Token(Token = "0x4000ECB")]
			Bytes,
			[Token(Token = "0x4000ECC")]
			Closed,
			[Token(Token = "0x4000ECD")]
			Error
		}

		[Token(Token = "0x4000B93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly State[][] stateArray;

		[Token(Token = "0x4000B94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int _top;

		[Token(Token = "0x4000B95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly List<JTokenType> _stack;

		[Token(Token = "0x4000B96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private State _currentState;

		[Token(Token = "0x4000B97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Formatting _formatting;

		[Token(Token = "0x4000B98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B318", Offset = "0xB4B318")]
		private bool <CloseOutput>k__BackingField;

		[Token(Token = "0x17000103")]
		public bool CloseOutput
		{
			[Token(Token = "0x6000E15")]
			[Address(RVA = "0x1663FA0", Offset = "0x1663FA0", VA = "0x1663FA0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C980", Offset = "0xB4C980")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000E16")]
			[Address(RVA = "0x1683C74", Offset = "0x1683C74", VA = "0x1683C74")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C990", Offset = "0xB4C990")]
			set
			{
			}
		}

		[Token(Token = "0x17000104")]
		protected internal int Top
		{
			[Token(Token = "0x6000E17")]
			[Address(RVA = "0x1663B5C", Offset = "0x1663B5C", VA = "0x1663B5C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000105")]
		public WriteState WriteState
		{
			[Token(Token = "0x6000E18")]
			[Address(RVA = "0x1683C80", Offset = "0x1683C80", VA = "0x1683C80")]
			get
			{
				return default(WriteState);
			}
		}

		[Token(Token = "0x17000106")]
		public Formatting Formatting
		{
			[Token(Token = "0x6000E19")]
			[Address(RVA = "0x167B828", Offset = "0x167B828", VA = "0x167B828")]
			get
			{
				return default(Formatting);
			}
			[Token(Token = "0x6000E1A")]
			[Address(RVA = "0x1673274", Offset = "0x1673274", VA = "0x1673274")]
			set
			{
			}
		}

		[Token(Token = "0x6000E1B")]
		[Address(RVA = "0x16639E4", Offset = "0x16639E4", VA = "0x16639E4")]
		protected JsonWriter()
		{
		}

		[Token(Token = "0x6000E1C")]
		[Address(RVA = "0x1683D6C", Offset = "0x1683D6C", VA = "0x1683D6C")]
		private void Push(JTokenType value)
		{
		}

		[Token(Token = "0x6000E1D")]
		[Address(RVA = "0x1683E4C", Offset = "0x1683E4C", VA = "0x1683E4C")]
		private JTokenType Pop()
		{
			return default(JTokenType);
		}

		[Token(Token = "0x6000E1E")]
		[Address(RVA = "0x1683E78", Offset = "0x1683E78", VA = "0x1683E78")]
		private JTokenType Peek()
		{
			return default(JTokenType);
		}

		[Token(Token = "0x6000E1F")]
		public abstract void Flush();

		[Token(Token = "0x6000E20")]
		[Address(RVA = "0x1663F58", Offset = "0x1663F58", VA = "0x1663F58", Slot = "6")]
		public virtual void Close()
		{
		}

		[Token(Token = "0x6000E21")]
		[Address(RVA = "0x1663E90", Offset = "0x1663E90", VA = "0x1663E90", Slot = "7")]
		public virtual void WriteStartObject()
		{
		}

		[Token(Token = "0x6000E22")]
		[Address(RVA = "0x1683F28", Offset = "0x1683F28", VA = "0x1683F28", Slot = "8")]
		public virtual void WriteEndObject()
		{
		}

		[Token(Token = "0x6000E23")]
		[Address(RVA = "0x1663DB8", Offset = "0x1663DB8", VA = "0x1663DB8", Slot = "9")]
		public virtual void WriteStartArray()
		{
		}

		[Token(Token = "0x6000E24")]
		[Address(RVA = "0x1684130", Offset = "0x1684130", VA = "0x1684130", Slot = "10")]
		public virtual void WriteEndArray()
		{
		}

		[Token(Token = "0x6000E25")]
		[Address(RVA = "0x167B5AC", Offset = "0x167B5AC", VA = "0x167B5AC", Slot = "11")]
		public virtual void WriteStartConstructor(string name)
		{
		}

		[Token(Token = "0x6000E26")]
		[Address(RVA = "0x1684138", Offset = "0x1684138", VA = "0x1684138", Slot = "12")]
		public virtual void WriteEndConstructor()
		{
		}

		[Token(Token = "0x6000E27")]
		[Address(RVA = "0x1663EE8", Offset = "0x1663EE8", VA = "0x1663EE8", Slot = "13")]
		public virtual void WritePropertyName(string name)
		{
		}

		[Token(Token = "0x6000E28")]
		[Address(RVA = "0x1684140", Offset = "0x1684140", VA = "0x1684140", Slot = "14")]
		public virtual void WriteEnd()
		{
		}

		[Token(Token = "0x6000E29")]
		[Address(RVA = "0x1684268", Offset = "0x1684268", VA = "0x1684268")]
		public void WriteToken(JsonReader reader)
		{
		}

		[Token(Token = "0x6000E2A")]
		[Address(RVA = "0x1684338", Offset = "0x1684338", VA = "0x1684338")]
		internal void WriteToken(JsonReader reader, int initialDepth)
		{
		}

		[Token(Token = "0x6000E2B")]
		[Address(RVA = "0x168494C", Offset = "0x168494C", VA = "0x168494C")]
		private void WriteConstructorDate(JsonReader reader)
		{
		}

		[Token(Token = "0x6000E2C")]
		[Address(RVA = "0x1684B6C", Offset = "0x1684B6C", VA = "0x1684B6C")]
		private bool IsEndToken(JsonToken token)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E2D")]
		[Address(RVA = "0x1684328", Offset = "0x1684328", VA = "0x1684328")]
		private bool IsStartToken(JsonToken token)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E2E")]
		[Address(RVA = "0x1684168", Offset = "0x1684168", VA = "0x1684168")]
		private void WriteEnd(JTokenType type)
		{
		}

		[Token(Token = "0x6000E2F")]
		[Address(RVA = "0x1683EE0", Offset = "0x1683EE0", VA = "0x1683EE0")]
		private void AutoCompleteAll()
		{
		}

		[Token(Token = "0x6000E30")]
		[Address(RVA = "0x1684B7C", Offset = "0x1684B7C", VA = "0x1684B7C")]
		private JTokenType GetTypeForCloseToken(JsonToken token)
		{
			return default(JTokenType);
		}

		[Token(Token = "0x6000E31")]
		[Address(RVA = "0x1684C4C", Offset = "0x1684C4C", VA = "0x1684C4C")]
		private JsonToken GetCloseTokenForType(JTokenType type)
		{
			return default(JsonToken);
		}

		[Token(Token = "0x6000E32")]
		[Address(RVA = "0x1683F30", Offset = "0x1683F30", VA = "0x1683F30")]
		private void AutoCompleteClose(JsonToken tokenBeingClosed)
		{
		}

		[Token(Token = "0x6000E33")]
		[Address(RVA = "0x1663B24", Offset = "0x1663B24", VA = "0x1663B24", Slot = "15")]
		protected virtual void WriteEnd(JsonToken token)
		{
		}

		[Token(Token = "0x6000E34")]
		[Address(RVA = "0x1684D1C", Offset = "0x1684D1C", VA = "0x1684D1C", Slot = "16")]
		protected virtual void WriteIndent()
		{
		}

		[Token(Token = "0x6000E35")]
		[Address(RVA = "0x1684D20", Offset = "0x1684D20", VA = "0x1684D20", Slot = "17")]
		protected virtual void WriteValueDelimiter()
		{
		}

		[Token(Token = "0x6000E36")]
		[Address(RVA = "0x1684D24", Offset = "0x1684D24", VA = "0x1684D24", Slot = "18")]
		protected virtual void WriteIndentSpace()
		{
		}

		[Token(Token = "0x6000E37")]
		[Address(RVA = "0x1665114", Offset = "0x1665114", VA = "0x1665114")]
		internal void AutoComplete(JsonToken tokenBeingWritten)
		{
		}

		[Token(Token = "0x6000E38")]
		[Address(RVA = "0x1664348", Offset = "0x1664348", VA = "0x1664348", Slot = "19")]
		public virtual void WriteNull()
		{
		}

		[Token(Token = "0x6000E39")]
		[Address(RVA = "0x1664380", Offset = "0x1664380", VA = "0x1664380", Slot = "20")]
		public virtual void WriteUndefined()
		{
		}

		[Token(Token = "0x6000E3A")]
		[Address(RVA = "0x167BA58", Offset = "0x167BA58", VA = "0x167BA58", Slot = "21")]
		public virtual void WriteRaw(string json)
		{
		}

		[Token(Token = "0x6000E3B")]
		[Address(RVA = "0x1684D28", Offset = "0x1684D28", VA = "0x1684D28", Slot = "22")]
		public virtual void WriteRawValue(string json)
		{
		}

		[Token(Token = "0x6000E3C")]
		[Address(RVA = "0x1664438", Offset = "0x1664438", VA = "0x1664438", Slot = "23")]
		public virtual void WriteValue(string value)
		{
		}

		[Token(Token = "0x6000E3D")]
		[Address(RVA = "0x16644C0", Offset = "0x16644C0", VA = "0x16644C0", Slot = "24")]
		public virtual void WriteValue(int value)
		{
		}

		[Token(Token = "0x6000E3E")]
		[Address(RVA = "0x1664590", Offset = "0x1664590", VA = "0x1664590", Slot = "25")]
		public virtual void WriteValue(uint value)
		{
		}

		[Token(Token = "0x6000E3F")]
		[Address(RVA = "0x1664618", Offset = "0x1664618", VA = "0x1664618", Slot = "26")]
		public virtual void WriteValue(long value)
		{
		}

		[Token(Token = "0x6000E40")]
		[Address(RVA = "0x16646E8", Offset = "0x16646E8", VA = "0x16646E8", Slot = "27")]
		public virtual void WriteValue(ulong value)
		{
		}

		[Token(Token = "0x6000E41")]
		[Address(RVA = "0x1664770", Offset = "0x1664770", VA = "0x1664770", Slot = "28")]
		public virtual void WriteValue(float value)
		{
		}

		[Token(Token = "0x6000E42")]
		[Address(RVA = "0x16647F8", Offset = "0x16647F8", VA = "0x16647F8", Slot = "29")]
		public virtual void WriteValue(double value)
		{
		}

		[Token(Token = "0x6000E43")]
		[Address(RVA = "0x1664880", Offset = "0x1664880", VA = "0x1664880", Slot = "30")]
		public virtual void WriteValue(bool value)
		{
		}

		[Token(Token = "0x6000E44")]
		[Address(RVA = "0x1664908", Offset = "0x1664908", VA = "0x1664908", Slot = "31")]
		public virtual void WriteValue(short value)
		{
		}

		[Token(Token = "0x6000E45")]
		[Address(RVA = "0x1664990", Offset = "0x1664990", VA = "0x1664990", Slot = "32")]
		public virtual void WriteValue(ushort value)
		{
		}

		[Token(Token = "0x6000E46")]
		[Address(RVA = "0x1664A40", Offset = "0x1664A40", VA = "0x1664A40", Slot = "33")]
		public virtual void WriteValue(char value)
		{
		}

		[Token(Token = "0x6000E47")]
		[Address(RVA = "0x1664AC8", Offset = "0x1664AC8", VA = "0x1664AC8", Slot = "34")]
		public virtual void WriteValue(byte value)
		{
		}

		[Token(Token = "0x6000E48")]
		[Address(RVA = "0x1664B50", Offset = "0x1664B50", VA = "0x1664B50", Slot = "35")]
		public virtual void WriteValue(sbyte value)
		{
		}

		[Token(Token = "0x6000E49")]
		[Address(RVA = "0x1664BE4", Offset = "0x1664BE4", VA = "0x1664BE4", Slot = "36")]
		public virtual void WriteValue(decimal value)
		{
		}

		[Token(Token = "0x6000E4A")]
		[Address(RVA = "0x1664C6C", Offset = "0x1664C6C", VA = "0x1664C6C", Slot = "37")]
		public virtual void WriteValue(DateTime value)
		{
		}

		[Token(Token = "0x6000E4B")]
		[Address(RVA = "0x1664D00", Offset = "0x1664D00", VA = "0x1664D00", Slot = "38")]
		public virtual void WriteValue(DateTimeOffset value)
		{
		}

		[Token(Token = "0x6000E4C")]
		[Address(RVA = "0x1664E28", Offset = "0x1664E28", VA = "0x1664E28", Slot = "39")]
		public virtual void WriteValue(Guid value)
		{
		}

		[Token(Token = "0x6000E4D")]
		[Address(RVA = "0x1664ED8", Offset = "0x1664ED8", VA = "0x1664ED8", Slot = "40")]
		public virtual void WriteValue(TimeSpan value)
		{
		}

		[Token(Token = "0x6000E4E")]
		[Address(RVA = "0x1684D64", Offset = "0x1684D64", VA = "0x1684D64", Slot = "41")]
		public virtual void WriteValue(int? value)
		{
		}

		[Token(Token = "0x6000E4F")]
		[Address(RVA = "0x1684E0C", Offset = "0x1684E0C", VA = "0x1684E0C", Slot = "42")]
		public virtual void WriteValue(uint? value)
		{
		}

		[Token(Token = "0x6000E50")]
		[Address(RVA = "0x1684EB4", Offset = "0x1684EB4", VA = "0x1684EB4", Slot = "43")]
		public virtual void WriteValue(long? value)
		{
		}

		[Token(Token = "0x6000E51")]
		[Address(RVA = "0x1684F5C", Offset = "0x1684F5C", VA = "0x1684F5C", Slot = "44")]
		public virtual void WriteValue(ulong? value)
		{
		}

		[Token(Token = "0x6000E52")]
		[Address(RVA = "0x1685004", Offset = "0x1685004", VA = "0x1685004", Slot = "45")]
		public virtual void WriteValue(float? value)
		{
		}

		[Token(Token = "0x6000E53")]
		[Address(RVA = "0x16850A8", Offset = "0x16850A8", VA = "0x16850A8", Slot = "46")]
		public virtual void WriteValue(double? value)
		{
		}

		[Token(Token = "0x6000E54")]
		[Address(RVA = "0x168514C", Offset = "0x168514C", VA = "0x168514C", Slot = "47")]
		public virtual void WriteValue(bool? value)
		{
		}

		[Token(Token = "0x6000E55")]
		[Address(RVA = "0x16851F4", Offset = "0x16851F4", VA = "0x16851F4", Slot = "48")]
		public virtual void WriteValue(short? value)
		{
		}

		[Token(Token = "0x6000E56")]
		[Address(RVA = "0x168529C", Offset = "0x168529C", VA = "0x168529C", Slot = "49")]
		public virtual void WriteValue(ushort? value)
		{
		}

		[Token(Token = "0x6000E57")]
		[Address(RVA = "0x1685344", Offset = "0x1685344", VA = "0x1685344", Slot = "50")]
		public virtual void WriteValue(char? value)
		{
		}

		[Token(Token = "0x6000E58")]
		[Address(RVA = "0x16853EC", Offset = "0x16853EC", VA = "0x16853EC", Slot = "51")]
		public virtual void WriteValue(byte? value)
		{
		}

		[Token(Token = "0x6000E59")]
		[Address(RVA = "0x1685494", Offset = "0x1685494", VA = "0x1685494", Slot = "52")]
		public virtual void WriteValue(sbyte? value)
		{
		}

		[Token(Token = "0x6000E5A")]
		[Address(RVA = "0x168553C", Offset = "0x168553C", VA = "0x168553C", Slot = "53")]
		public virtual void WriteValue(decimal? value)
		{
		}

		[Token(Token = "0x6000E5B")]
		[Address(RVA = "0x16855F4", Offset = "0x16855F4", VA = "0x16855F4", Slot = "54")]
		public virtual void WriteValue(DateTime? value)
		{
		}

		[Token(Token = "0x6000E5C")]
		[Address(RVA = "0x168569C", Offset = "0x168569C", VA = "0x168569C", Slot = "55")]
		public virtual void WriteValue(DateTimeOffset? value)
		{
		}

		[Token(Token = "0x6000E5D")]
		[Address(RVA = "0x1685754", Offset = "0x1685754", VA = "0x1685754", Slot = "56")]
		public virtual void WriteValue(Guid? value)
		{
		}

		[Token(Token = "0x6000E5E")]
		[Address(RVA = "0x168580C", Offset = "0x168580C", VA = "0x168580C", Slot = "57")]
		public virtual void WriteValue(TimeSpan? value)
		{
		}

		[Token(Token = "0x6000E5F")]
		[Address(RVA = "0x1664D5C", Offset = "0x1664D5C", VA = "0x1664D5C", Slot = "58")]
		public virtual void WriteValue(byte[] value)
		{
		}

		[Token(Token = "0x6000E60")]
		[Address(RVA = "0x1664F94", Offset = "0x1664F94", VA = "0x1664F94", Slot = "59")]
		public virtual void WriteValue(Uri value)
		{
		}

		[Token(Token = "0x6000E61")]
		[Address(RVA = "0x16858B4", Offset = "0x16858B4", VA = "0x16858B4", Slot = "60")]
		public virtual void WriteValue(object value)
		{
		}

		[Token(Token = "0x6000E62")]
		[Address(RVA = "0x167C8BC", Offset = "0x167C8BC", VA = "0x167C8BC", Slot = "61")]
		public virtual void WriteComment(string text)
		{
		}

		[Token(Token = "0x6000E63")]
		[Address(RVA = "0x167C90C", Offset = "0x167C90C", VA = "0x167C90C", Slot = "62")]
		public virtual void WriteWhitespace(string ws)
		{
		}

		[Token(Token = "0x6000E64")]
		[Address(RVA = "0x1686730", Offset = "0x1686730", VA = "0x1686730", Slot = "4")]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000E65")]
		[Address(RVA = "0x1686770", Offset = "0x1686770", VA = "0x1686770")]
		private void Dispose(bool disposing)
		{
		}
	}
	[Token(Token = "0x200020B")]
	public class JsonWriterException : Exception
	{
		[Token(Token = "0x6000E67")]
		[Address(RVA = "0x1C1C104", Offset = "0x1C1C104", VA = "0x1C1C104")]
		public JsonWriterException()
		{
		}

		[Token(Token = "0x6000E68")]
		[Address(RVA = "0x1C1C16C", Offset = "0x1C1C16C", VA = "0x1C1C16C")]
		public JsonWriterException(string message)
		{
		}

		[Token(Token = "0x6000E69")]
		[Address(RVA = "0x1C1C1E4", Offset = "0x1C1C1E4", VA = "0x1C1C1E4")]
		public JsonWriterException(string message, Exception innerException)
		{
		}
	}
	[Token(Token = "0x200020C")]
	public enum MemberSerialization
	{
		[Token(Token = "0x4000B9A")]
		OptOut,
		[Token(Token = "0x4000B9B")]
		OptIn
	}
	[Token(Token = "0x200020D")]
	public enum MissingMemberHandling
	{
		[Token(Token = "0x4000B9D")]
		Ignore,
		[Token(Token = "0x4000B9E")]
		Error
	}
	[Token(Token = "0x200020E")]
	public enum NullValueHandling
	{
		[Token(Token = "0x4000BA0")]
		Include,
		[Token(Token = "0x4000BA1")]
		Ignore
	}
	[Token(Token = "0x200020F")]
	public enum ObjectCreationHandling
	{
		[Token(Token = "0x4000BA3")]
		Auto,
		[Token(Token = "0x4000BA4")]
		Reuse,
		[Token(Token = "0x4000BA5")]
		Replace
	}
	[Token(Token = "0x2000210")]
	[Flags]
	public enum PreserveReferencesHandling
	{
		[Token(Token = "0x4000BA7")]
		None = 0,
		[Token(Token = "0x4000BA8")]
		Objects = 1,
		[Token(Token = "0x4000BA9")]
		Arrays = 2,
		[Token(Token = "0x4000BAA")]
		All = 3
	}
	[Token(Token = "0x2000211")]
	public enum ReferenceLoopHandling
	{
		[Token(Token = "0x4000BAC")]
		Error,
		[Token(Token = "0x4000BAD")]
		Ignore,
		[Token(Token = "0x4000BAE")]
		Serialize
	}
	[Token(Token = "0x2000212")]
	public enum Required
	{
		[Token(Token = "0x4000BB0")]
		Default,
		[Token(Token = "0x4000BB1")]
		AllowNull,
		[Token(Token = "0x4000BB2")]
		Always
	}
	[Token(Token = "0x2000213")]
	[Flags]
	public enum TypeNameHandling
	{
		[Token(Token = "0x4000BB4")]
		None = 0,
		[Token(Token = "0x4000BB5")]
		Objects = 1,
		[Token(Token = "0x4000BB6")]
		Arrays = 2,
		[Token(Token = "0x4000BB7")]
		Auto = 4,
		[Token(Token = "0x4000BB8")]
		All = 3
	}
}
namespace Newtonsoft.Json.Utilities
{
	[Token(Token = "0x2000214")]
	internal class Base64Encoder
	{
		[Token(Token = "0x4000BB9")]
		private const int Base64LineSize = 76;

		[Token(Token = "0x4000BBA")]
		private const int LineSizeInBytes = 57;

		[Token(Token = "0x4000BBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly char[] _charsLine;

		[Token(Token = "0x4000BBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly TextWriter _writer;

		[Token(Token = "0x4000BBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private byte[] _leftOverBytes;

		[Token(Token = "0x4000BBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int _leftOverBytesCount;

		[Token(Token = "0x6000E6A")]
		[Address(RVA = "0x1B17FAC", Offset = "0x1B17FAC", VA = "0x1B17FAC")]
		public Base64Encoder(TextWriter writer)
		{
		}

		[Token(Token = "0x6000E6B")]
		[Address(RVA = "0x1B18034", Offset = "0x1B18034", VA = "0x1B18034")]
		public void Encode(byte[] buffer, int index, int count)
		{
		}

		[Token(Token = "0x6000E6C")]
		[Address(RVA = "0x1B18440", Offset = "0x1B18440", VA = "0x1B18440")]
		public void Flush()
		{
		}

		[Token(Token = "0x6000E6D")]
		[Address(RVA = "0x1B183E8", Offset = "0x1B183E8", VA = "0x1B183E8")]
		private void WriteChars(char[] chars, int index, int count)
		{
		}
	}
	[Token(Token = "0x2000215")]
	internal class BidirectionalDictionary<TFirst, TSecond>
	{
		[Token(Token = "0x4000BBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IDictionary<TFirst, TSecond> _firstToSecond;

		[Token(Token = "0x4000BC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IDictionary<TSecond, TFirst> _secondToFirst;

		[Token(Token = "0x6000E6E")]
		public BidirectionalDictionary()
		{
		}

		[Token(Token = "0x6000E6F")]
		public BidirectionalDictionary(IEqualityComparer<TFirst> firstEqualityComparer, IEqualityComparer<TSecond> secondEqualityComparer)
		{
		}

		[Token(Token = "0x6000E70")]
		public void Add(TFirst first, TSecond second)
		{
		}

		[Token(Token = "0x6000E71")]
		public bool TryGetByFirst(TFirst first, out TSecond second)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E72")]
		public bool TryGetBySecond(TSecond second, out TFirst first)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000216")]
	internal static class CollectionUtils
	{
		[Serializable]
		[Token(Token = "0x2000309")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49C0C", Offset = "0xB49C0C")]
		private sealed class <>c__0<T>
		{
			[Token(Token = "0x4000ECE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c__0<T> <>9;

			[Token(Token = "0x4000ECF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static Func<object, bool> <>9__0_0;

			[Token(Token = "0x60015CF")]
			public <>c__0()
			{
			}

			[Token(Token = "0x60015D0")]
			internal bool <CastValid>b__0_0(object o)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x200030A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49C1C", Offset = "0xB49C1C")]
		private sealed class <>c__DisplayClass16_0<T>
		{
			[Token(Token = "0x4000ED0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IList<T> list;

			[Token(Token = "0x4000ED1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool returnDefaultIfEmpty;

			[Token(Token = "0x60015D1")]
			public <>c__DisplayClass16_0()
			{
			}

			[Token(Token = "0x60015D2")]
			internal T <TryGetSingleItem>b__0()
			{
				return (T)null;
			}
		}

		[Token(Token = "0x200030B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49C2C", Offset = "0xB49C2C")]
		private sealed class <>c__DisplayClass25_0
		{
			[Token(Token = "0x4000ED2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Type collectionDefinition;

			[Token(Token = "0x4000ED3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public object list;

			[Token(Token = "0x60015D3")]
			[Address(RVA = "0x1B192B0", Offset = "0x1B192B0", VA = "0x1B192B0")]
			public <>c__DisplayClass25_0()
			{
			}

			[Token(Token = "0x60015D4")]
			[Address(RVA = "0x1B1C1F4", Offset = "0x1B1C1F4", VA = "0x1B1C1F4")]
			internal object <CreateCollectionWrapper>b__0(Type t, IList<object> a)
			{
				return null;
			}
		}

		[Token(Token = "0x200030C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49C3C", Offset = "0xB49C3C")]
		private sealed class <>c__DisplayClass26_0
		{
			[Token(Token = "0x4000ED4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Type listDefinition;

			[Token(Token = "0x4000ED5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public object list;

			[Token(Token = "0x60015D5")]
			[Address(RVA = "0x1B19E40", Offset = "0x1B19E40", VA = "0x1B19E40")]
			public <>c__DisplayClass26_0()
			{
			}

			[Token(Token = "0x60015D6")]
			[Address(RVA = "0x1B1C35C", Offset = "0x1B1C35C", VA = "0x1B1C35C")]
			internal object <CreateListWrapper>b__0(Type t, IList<object> a)
			{
				return null;
			}
		}

		[Token(Token = "0x200030D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49C4C", Offset = "0xB49C4C")]
		private sealed class <>c__DisplayClass27_0
		{
			[Token(Token = "0x4000ED6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Type dictionaryDefinition;

			[Token(Token = "0x4000ED7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public object dictionary;

			[Token(Token = "0x60015D7")]
			[Address(RVA = "0x1B1A3D4", Offset = "0x1B1A3D4", VA = "0x1B1A3D4")]
			public <>c__DisplayClass27_0()
			{
			}

			[Token(Token = "0x60015D8")]
			[Address(RVA = "0x1B1C4C4", Offset = "0x1B1C4C4", VA = "0x1B1C4C4")]
			internal object <CreateDictionaryWrapper>b__0(Type t, IList<object> a)
			{
				return null;
			}
		}

		[Token(Token = "0x6000E73")]
		public static IEnumerable<T> CastValid<T>(this IEnumerable enumerable)
		{
			return null;
		}

		[Token(Token = "0x6000E74")]
		public static List<T> CreateList<T>(params T[] values)
		{
			return null;
		}

		[Token(Token = "0x6000E75")]
		[Address(RVA = "0x1B18510", Offset = "0x1B18510", VA = "0x1B18510")]
		public static bool IsNullOrEmpty(ICollection collection)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E76")]
		public static bool IsNullOrEmpty<T>(ICollection<T> collection)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E77")]
		public static bool IsNullOrEmptyOrDefault<T>(IList<T> list)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E78")]
		public static IList<T> Slice<T>(IList<T> list, int? start, int? end)
		{
			return null;
		}

		[Token(Token = "0x6000E79")]
		public static IList<T> Slice<T>(IList<T> list, int? start, int? end, int? step)
		{
			return null;
		}

		[Token(Token = "0x6000E7A")]
		public static Dictionary<K, List<V>> GroupBy<K, V>(ICollection<V> source, Func<V, K> keySelector)
		{
			return null;
		}

		[Token(Token = "0x6000E7B")]
		public static void AddRange<T>(this IList<T> initial, IEnumerable<T> collection)
		{
		}

		[Token(Token = "0x6000E7C")]
		[Address(RVA = "0x1B185D0", Offset = "0x1B185D0", VA = "0x1B185D0")]
		public static void AddRange(this IList initial, IEnumerable collection)
		{
		}

		[Token(Token = "0x6000E7D")]
		public static List<T> Distinct<T>(List<T> collection)
		{
			return null;
		}

		[Token(Token = "0x6000E7E")]
		public static List<List<T>> Flatten<T>(params IList<T>[] lists)
		{
			return null;
		}

		[Token(Token = "0x6000E7F")]
		private static void Recurse<T>(IList<IList<T>> global, int current, Dictionary<int, T> currentSet, List<List<T>> flattenedResult)
		{
		}

		[Token(Token = "0x6000E80")]
		public static List<T> CreateList<T>(ICollection collection)
		{
			return null;
		}

		[Token(Token = "0x6000E81")]
		public static bool ListEquals<T>(IList<T> a, IList<T> b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E82")]
		public static bool TryGetSingleItem<T>(IList<T> list, out T value)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E83")]
		public static bool TryGetSingleItem<T>(IList<T> list, bool returnDefaultIfEmpty, out T value)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E84")]
		public static T GetSingleItem<T>(IList<T> list)
		{
			return (T)null;
		}

		[Token(Token = "0x6000E85")]
		public static T GetSingleItem<T>(IList<T> list, bool returnDefaultIfEmpty)
		{
			return (T)null;
		}

		[Token(Token = "0x6000E86")]
		public static IList<T> Minus<T>(IList<T> list, IList<T> minus)
		{
			return null;
		}

		[Token(Token = "0x6000E87")]
		[Address(RVA = "0x1B18680", Offset = "0x1B18680", VA = "0x1B18680")]
		public static IList CreateGenericList(Type listType)
		{
			return null;
		}

		[Token(Token = "0x6000E88")]
		[Address(RVA = "0x1B18878", Offset = "0x1B18878", VA = "0x1B18878")]
		public static IDictionary CreateGenericDictionary(Type keyType, Type valueType)
		{
			return null;
		}

		[Token(Token = "0x6000E89")]
		[Address(RVA = "0x1B18A1C", Offset = "0x1B18A1C", VA = "0x1B18A1C")]
		public static bool IsListType(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E8A")]
		[Address(RVA = "0x1B18B6C", Offset = "0x1B18B6C", VA = "0x1B18B6C")]
		public static bool IsCollectionType(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E8B")]
		[Address(RVA = "0x1B18C94", Offset = "0x1B18C94", VA = "0x1B18C94")]
		public static bool IsDictionaryType(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E8C")]
		[Address(RVA = "0x1B18DA0", Offset = "0x1B18DA0", VA = "0x1B18DA0")]
		public static IWrappedCollection CreateCollectionWrapper(object list)
		{
			return null;
		}

		[Token(Token = "0x6000E8D")]
		[Address(RVA = "0x1B19930", Offset = "0x1B19930", VA = "0x1B19930")]
		public static IWrappedList CreateListWrapper(object list)
		{
			return null;
		}

		[Token(Token = "0x6000E8E")]
		[Address(RVA = "0x1B19E48", Offset = "0x1B19E48", VA = "0x1B19E48")]
		public static IWrappedDictionary CreateDictionaryWrapper(object dictionary)
		{
			return null;
		}

		[Token(Token = "0x6000E8F")]
		[Address(RVA = "0x1B1A434", Offset = "0x1B1A434", VA = "0x1B1A434")]
		public static object CreateAndPopulateList(Type listType, Action<IList, bool> populateList)
		{
			return null;
		}

		[Token(Token = "0x6000E90")]
		[Address(RVA = "0x1B1B7C4", Offset = "0x1B1B7C4", VA = "0x1B1B7C4")]
		public static Array ToArray(Array initial, Type type)
		{
			return null;
		}

		[Token(Token = "0x6000E91")]
		[Address(RVA = "0x1B1B980", Offset = "0x1B1B980", VA = "0x1B1B980")]
		private static IList<int> GetDimensions(IList values)
		{
			return null;
		}

		[Token(Token = "0x6000E92")]
		[Address(RVA = "0x1B1B618", Offset = "0x1B1B618", VA = "0x1B1B618")]
		public static Array ToMultidimensionalArray(IList values, Type type, int rank)
		{
			return null;
		}

		[Token(Token = "0x6000E93")]
		[Address(RVA = "0x1B1C04C", Offset = "0x1B1C04C", VA = "0x1B1C04C")]
		private static object JaggedArrayGetValue(IList values, int[] indices)
		{
			return null;
		}

		[Token(Token = "0x6000E94")]
		[Address(RVA = "0x1B1BC68", Offset = "0x1B1BC68", VA = "0x1B1BC68")]
		private static void CopyFromJaggedToMultidimensionalArray(IList values, Array multidimensionalArray, int[] indices)
		{
		}

		[Token(Token = "0x6000E95")]
		public static bool AddDistinct<T>(this IList<T> list, T value)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E96")]
		public static bool AddDistinct<T>(this IList<T> list, T value, IEqualityComparer<T> comparer)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E97")]
		public static bool ContainsValue<TSource>(this IEnumerable<TSource> source, TSource value, IEqualityComparer<TSource> comparer)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E98")]
		public static bool AddRangeDistinct<T>(this IList<T> list, IEnumerable<T> values)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E99")]
		public static bool AddRangeDistinct<T>(this IList<T> list, IEnumerable<T> values, IEqualityComparer<T> comparer)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E9A")]
		public static int IndexOf<T>(this IEnumerable<T> collection, Func<T, bool> predicate)
		{
			return default(int);
		}

		[Token(Token = "0x6000E9B")]
		public static int IndexOf<TSource>(this IEnumerable<TSource> list, TSource value) where TSource : IEquatable<TSource>
		{
			return default(int);
		}

		[Token(Token = "0x6000E9C")]
		public static int IndexOf<TSource>(this IEnumerable<TSource> list, TSource value, IEqualityComparer<TSource> comparer)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000217")]
	internal interface IWrappedCollection : IList, ICollection, IEnumerable
	{
		[Token(Token = "0x17000107")]
		object UnderlyingCollection
		{
			[Token(Token = "0x6000E9D")]
			get;
		}
	}
	[Token(Token = "0x2000218")]
	internal class CollectionWrapper<T> : ICollection<T>, IEnumerable<T>, IEnumerable, IWrappedCollection, IList, ICollection
	{
		[Token(Token = "0x4000BC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IList _list;

		[Token(Token = "0x4000BC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly ICollection<T> _genericCollection;

		[Token(Token = "0x4000BC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private object _syncRoot;

		[Token(Token = "0x17000108")]
		public virtual int Count
		{
			[Token(Token = "0x6000EA4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000109")]
		public virtual bool IsReadOnly
		{
			[Token(Token = "0x6000EA5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700010A")]
		private bool System.Collections.IList.IsFixedSize
		{
			[Token(Token = "0x6000EAF")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700010B")]
		private object System.Collections.IList.Item
		{
			[Token(Token = "0x6000EB1")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000EB2")]
			set
			{
			}
		}

		[Token(Token = "0x1700010C")]
		private bool System.Collections.ICollection.IsSynchronized
		{
			[Token(Token = "0x6000EB4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700010D")]
		private object System.Collections.ICollection.SyncRoot
		{
			[Token(Token = "0x6000EB5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700010E")]
		public object UnderlyingCollection
		{
			[Token(Token = "0x6000EB8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E9E")]
		public CollectionWrapper(IList list)
		{
		}

		[Token(Token = "0x6000E9F")]
		public CollectionWrapper(ICollection<T> list)
		{
		}

		[Token(Token = "0x6000EA0")]
		public virtual void Add(T item)
		{
		}

		[Token(Token = "0x6000EA1")]
		public virtual void Clear()
		{
		}

		[Token(Token = "0x6000EA2")]
		public virtual bool Contains(T item)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EA3")]
		public virtual void CopyTo(T[] array, int arrayIndex)
		{
		}

		[Token(Token = "0x6000EA6")]
		public virtual bool Remove(T item)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EA7")]
		public virtual IEnumerator<T> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000EA8")]
		public bool IsGenericCollection()
		{
			return default(bool);
		}

		[Token(Token = "0x6000EA9")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000EAA")]
		private int System.Collections.IList.Add(object value)
		{
			return default(int);
		}

		[Token(Token = "0x6000EAB")]
		private bool System.Collections.IList.Contains(object value)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EAC")]
		private int System.Collections.IList.IndexOf(object value)
		{
			return default(int);
		}

		[Token(Token = "0x6000EAD")]
		private void System.Collections.IList.RemoveAt(int index)
		{
		}

		[Token(Token = "0x6000EAE")]
		private void System.Collections.IList.Insert(int index, object value)
		{
		}

		[Token(Token = "0x6000EB0")]
		private void System.Collections.IList.Remove(object value)
		{
		}

		[Token(Token = "0x6000EB3")]
		private void System.Collections.ICollection.CopyTo(Array array, int arrayIndex)
		{
		}

		[Token(Token = "0x6000EB6")]
		private static void VerifyValueType(object value)
		{
		}

		[Token(Token = "0x6000EB7")]
		private static bool IsCompatibleObject(object value)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000219")]
	internal static class ConvertUtils
	{
		[Token(Token = "0x200030E")]
		internal struct TypeConvertKey : IEquatable<TypeConvertKey>
		{
			[Token(Token = "0x4000ED8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly Type _initialType;

			[Token(Token = "0x4000ED9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private readonly Type _targetType;

			[Token(Token = "0x1700024B")]
			public Type InitialType
			{
				[Token(Token = "0x60015D9")]
				[Address(RVA = "0xC37098", Offset = "0xC37098", VA = "0xC37098")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700024C")]
			public Type TargetType
			{
				[Token(Token = "0x60015DA")]
				[Address(RVA = "0xC370A0", Offset = "0xC370A0", VA = "0xC370A0")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60015DB")]
			[Address(RVA = "0xC370A8", Offset = "0xC370A8", VA = "0xC370A8")]
			public TypeConvertKey(Type initialType, Type targetType)
			{
			}

			[Token(Token = "0x60015DC")]
			[Address(RVA = "0xC370B0", Offset = "0xC370B0", VA = "0xC370B0", Slot = "2")]
			public override int GetHashCode()
			{
				return default(int);
			}

			[Token(Token = "0x60015DD")]
			[Address(RVA = "0xC370B8", Offset = "0xC370B8", VA = "0xC370B8", Slot = "0")]
			public override bool Equals(object obj)
			{
				return default(bool);
			}

			[Token(Token = "0x60015DE")]
			[Address(RVA = "0xC370C0", Offset = "0xC370C0", VA = "0xC370C0", Slot = "4")]
			public bool Equals(TypeConvertKey other)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x200030F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49C5C", Offset = "0xB49C5C")]
		private sealed class <>c__DisplayClass2_0
		{
			[Token(Token = "0x4000EDA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public MethodCall<object, object> call;

			[Token(Token = "0x60015DF")]
			[Address(RVA = "0x1B1C898", Offset = "0x1B1C898", VA = "0x1B1C898")]
			public <>c__DisplayClass2_0()
			{
			}

			[Token(Token = "0x60015E0")]
			[Address(RVA = "0x1B1E2B4", Offset = "0x1B1E2B4", VA = "0x1B1E2B4")]
			internal object <CreateCastConverter>b__0(object o)
			{
				return null;
			}
		}

		[Token(Token = "0x2000310")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49C6C", Offset = "0xB49C6C")]
		private sealed class <>c__DisplayClass9_0<T>
		{
			[Token(Token = "0x4000EDB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public object initialValue;

			[Token(Token = "0x60015E1")]
			public <>c__DisplayClass9_0()
			{
			}

			[Token(Token = "0x60015E2")]
			internal T <TryConvert>b__0()
			{
				return (T)null;
			}
		}

		[Token(Token = "0x2000311")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49C7C", Offset = "0xB49C7C")]
		private sealed class <>c__DisplayClass10_0
		{
			[Token(Token = "0x4000EDC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public object initialValue;

			[Token(Token = "0x4000EDD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public CultureInfo culture;

			[Token(Token = "0x4000EDE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Type targetType;

			[Token(Token = "0x60015E3")]
			[Address(RVA = "0x1B1DEA4", Offset = "0x1B1DEA4", VA = "0x1B1DEA4")]
			public <>c__DisplayClass10_0()
			{
			}

			[Token(Token = "0x60015E4")]
			[Address(RVA = "0x1B1E1BC", Offset = "0x1B1E1BC", VA = "0x1B1E1BC")]
			internal object <TryConvert>b__0()
			{
				return null;
			}
		}

		[Token(Token = "0x2000312")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49C8C", Offset = "0xB49C8C")]
		private sealed class <>c__DisplayClass15_0<T>
		{
			[Token(Token = "0x4000EDF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public object initialValue;

			[Token(Token = "0x60015E5")]
			public <>c__DisplayClass15_0()
			{
			}

			[Token(Token = "0x60015E6")]
			internal T <TryConvertOrCast>b__0()
			{
				return (T)null;
			}
		}

		[Token(Token = "0x2000313")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49C9C", Offset = "0xB49C9C")]
		private sealed class <>c__DisplayClass16_0
		{
			[Token(Token = "0x4000EE0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public object initialValue;

			[Token(Token = "0x4000EE1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public CultureInfo culture;

			[Token(Token = "0x4000EE2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Type targetType;

			[Token(Token = "0x60015E7")]
			[Address(RVA = "0x1B1E100", Offset = "0x1B1E100", VA = "0x1B1E100")]
			public <>c__DisplayClass16_0()
			{
			}

			[Token(Token = "0x60015E8")]
			[Address(RVA = "0x1B1E238", Offset = "0x1B1E238", VA = "0x1B1E238")]
			internal object <TryConvertOrCast>b__0()
			{
				return null;
			}
		}

		[Token(Token = "0x4000BC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly ThreadSafeStore<TypeConvertKey, Func<object, object>> CastConverters;

		[Token(Token = "0x6000EB9")]
		[Address(RVA = "0x1B1C62C", Offset = "0x1B1C62C", VA = "0x1B1C62C")]
		private static Func<object, object> CreateCastConverter(TypeConvertKey t)
		{
			return null;
		}

		[Token(Token = "0x6000EBA")]
		[Address(RVA = "0x1B1C8B0", Offset = "0x1B1C8B0", VA = "0x1B1C8B0")]
		public static bool CanConvertType(Type initialType, Type targetType, bool allowTypeNameToString)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EBB")]
		[Address(RVA = "0x1B1CEC8", Offset = "0x1B1CEC8", VA = "0x1B1CEC8")]
		private static bool IsComponentConverter(TypeConverter converter)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EBC")]
		public static T Convert<T>(object initialValue)
		{
			return (T)null;
		}

		[Token(Token = "0x6000EBD")]
		public static T Convert<T>(object initialValue, CultureInfo culture)
		{
			return (T)null;
		}

		[Token(Token = "0x6000EBE")]
		[Address(RVA = "0x1B1CFCC", Offset = "0x1B1CFCC", VA = "0x1B1CFCC")]
		public static object Convert(object initialValue, CultureInfo culture, Type targetType)
		{
			return null;
		}

		[Token(Token = "0x6000EBF")]
		public static bool TryConvert<T>(object initialValue, out T convertedValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EC0")]
		public static bool TryConvert<T>(object initialValue, CultureInfo culture, out T convertedValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EC1")]
		[Address(RVA = "0x1B1DDAC", Offset = "0x1B1DDAC", VA = "0x1B1DDAC")]
		public static bool TryConvert(object initialValue, CultureInfo culture, Type targetType, out object convertedValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EC2")]
		public static T ConvertOrCast<T>(object initialValue)
		{
			return (T)null;
		}

		[Token(Token = "0x6000EC3")]
		public static T ConvertOrCast<T>(object initialValue, CultureInfo culture)
		{
			return (T)null;
		}

		[Token(Token = "0x6000EC4")]
		[Address(RVA = "0x1B1DEAC", Offset = "0x1B1DEAC", VA = "0x1B1DEAC")]
		public static object ConvertOrCast(object initialValue, CultureInfo culture, Type targetType)
		{
			return null;
		}

		[Token(Token = "0x6000EC5")]
		public static bool TryConvertOrCast<T>(object initialValue, out T convertedValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EC6")]
		public static bool TryConvertOrCast<T>(object initialValue, CultureInfo culture, out T convertedValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EC7")]
		[Address(RVA = "0x1B1E008", Offset = "0x1B1E008", VA = "0x1B1E008")]
		public static bool TryConvertOrCast(object initialValue, CultureInfo culture, Type targetType, out object convertedValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EC8")]
		[Address(RVA = "0x1B1DB28", Offset = "0x1B1DB28", VA = "0x1B1DB28")]
		private static object EnsureTypeAssignable(object value, Type initialType, Type targetType)
		{
			return null;
		}

		[Token(Token = "0x6000EC9")]
		[Address(RVA = "0x1B1CE64", Offset = "0x1B1CE64", VA = "0x1B1CE64")]
		internal static TypeConverter GetConverter(Type t)
		{
			return null;
		}

		[Token(Token = "0x6000ECA")]
		[Address(RVA = "0x1B1DAB0", Offset = "0x1B1DAB0", VA = "0x1B1DAB0")]
		public static bool IsInteger(object value)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200021A")]
	internal static class DateTimeUtils
	{
		[Token(Token = "0x6000ECC")]
		[Address(RVA = "0x1B1E9C0", Offset = "0x1B1E9C0", VA = "0x1B1E9C0")]
		public static string GetLocalOffset(this DateTime d)
		{
			return null;
		}

		[Token(Token = "0x6000ECD")]
		[Address(RVA = "0x1B1EAE4", Offset = "0x1B1EAE4", VA = "0x1B1EAE4")]
		public static XmlDateTimeSerializationMode ToSerializationMode(DateTimeKind kind)
		{
			return default(XmlDateTimeSerializationMode);
		}
	}
	[Token(Token = "0x200021B")]
	internal interface IWrappedDictionary : IDictionary, ICollection, IEnumerable
	{
		[Token(Token = "0x1700010F")]
		object UnderlyingDictionary
		{
			[Token(Token = "0x6000ECE")]
			get;
		}
	}
	[Token(Token = "0x200021C")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0xB497B8", Offset = "0xB497B8")]
	internal class DictionaryWrapper<TKey, TValue> : IDictionary<TKey, TValue>, ICollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable, IWrappedDictionary, IDictionary, ICollection
	{
		[Token(Token = "0x2000314")]
		private struct DictionaryEnumerator<TEnumeratorKey, TEnumeratorValue> : IDictionaryEnumerator, IEnumerator
		{
			[Token(Token = "0x4000EE3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly IEnumerator<KeyValuePair<TEnumeratorKey, TEnumeratorValue>> _e;

			[Token(Token = "0x1700024D")]
			public DictionaryEntry Entry
			{
				[Token(Token = "0x60015EA")]
				get
				{
					return default(DictionaryEntry);
				}
			}

			[Token(Token = "0x1700024E")]
			public object Key
			{
				[Token(Token = "0x60015EB")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700024F")]
			public object Value
			{
				[Token(Token = "0x60015EC")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000250")]
			public object Current
			{
				[Token(Token = "0x60015ED")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60015E9")]
			public DictionaryEnumerator(IEnumerator<KeyValuePair<TEnumeratorKey, TEnumeratorValue>> e)
			{
			}

			[Token(Token = "0x60015EE")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60015EF")]
			public void Reset()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000315")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49CAC", Offset = "0xB49CAC")]
		private sealed class <>c
		{
			[Token(Token = "0x4000EE4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000EE5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static Func<DictionaryEntry, KeyValuePair<TKey, TValue>> <>9__25_0;

			[Token(Token = "0x60015F1")]
			public <>c()
			{
			}

			[Token(Token = "0x60015F2")]
			internal KeyValuePair<TKey, TValue> <GetEnumerator>b__25_0(DictionaryEntry de)
			{
				return default(KeyValuePair<TKey, TValue>);
			}
		}

		[Token(Token = "0x4000BC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IDictionary _dictionary;

		[Token(Token = "0x4000BC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IDictionary<TKey, TValue> _genericDictionary;

		[Token(Token = "0x4000BC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private object _syncRoot;

		[Token(Token = "0x17000110")]
		public ICollection<TKey> Keys
		{
			[Token(Token = "0x6000ED3")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000111")]
		public ICollection<TValue> Values
		{
			[Token(Token = "0x6000ED6")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000112")]
		public TValue Item
		{
			[Token(Token = "0x6000ED7")]
			get
			{
				return (TValue)null;
			}
			[Token(Token = "0x6000ED8")]
			set
			{
			}
		}

		[Token(Token = "0x17000113")]
		public int Count
		{
			[Token(Token = "0x6000EDD")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000114")]
		public bool IsReadOnly
		{
			[Token(Token = "0x6000EDE")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000115")]
		private bool System.Collections.IDictionary.IsFixedSize
		{
			[Token(Token = "0x6000EE5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000116")]
		private ICollection System.Collections.IDictionary.Keys
		{
			[Token(Token = "0x6000EE6")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000117")]
		private ICollection System.Collections.IDictionary.Values
		{
			[Token(Token = "0x6000EE8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000118")]
		private object System.Collections.IDictionary.Item
		{
			[Token(Token = "0x6000EE9")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000EEA")]
			set
			{
			}
		}

		[Token(Token = "0x17000119")]
		private bool System.Collections.ICollection.IsSynchronized
		{
			[Token(Token = "0x6000EEC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700011A")]
		private object System.Collections.ICollection.SyncRoot
		{
			[Token(Token = "0x6000EED")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700011B")]
		public object UnderlyingDictionary
		{
			[Token(Token = "0x6000EEE")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000ECF")]
		public DictionaryWrapper(IDictionary dictionary)
		{
		}

		[Token(Token = "0x6000ED0")]
		public DictionaryWrapper(IDictionary<TKey, TValue> dictionary)
		{
		}

		[Token(Token = "0x6000ED1")]
		public void Add(TKey key, TValue value)
		{
		}

		[Token(Token = "0x6000ED2")]
		public bool ContainsKey(TKey key)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ED4")]
		public bool Remove(TKey key)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ED5")]
		public bool TryGetValue(TKey key, out TValue value)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ED9")]
		public void Add(KeyValuePair<TKey, TValue> item)
		{
		}

		[Token(Token = "0x6000EDA")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000EDB")]
		public bool Contains(KeyValuePair<TKey, TValue> item)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EDC")]
		public void CopyTo(KeyValuePair<TKey, TValue>[] array, int arrayIndex)
		{
		}

		[Token(Token = "0x6000EDF")]
		public bool Remove(KeyValuePair<TKey, TValue> item)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EE0")]
		public IEnumerator<KeyValuePair<TKey, TValue>> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000EE1")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000EE2")]
		private void System.Collections.IDictionary.Add(object key, object value)
		{
		}

		[Token(Token = "0x6000EE3")]
		private bool System.Collections.IDictionary.Contains(object key)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EE4")]
		private IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000EE7")]
		public void Remove(object key)
		{
		}

		[Token(Token = "0x6000EEB")]
		private void System.Collections.ICollection.CopyTo(Array array, int index)
		{
		}
	}
	[Token(Token = "0x200021D")]
	internal static class EnumUtils
	{
		[Token(Token = "0x2000316")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49CBC", Offset = "0xB49CBC")]
		private sealed class <>c__DisplayClass2_0<T> where T : struct
		{
			[Token(Token = "0x4000EE6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public string enumMemberName;

			[Token(Token = "0x4000EE7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool ignoreCase;

			[Token(Token = "0x60015F3")]
			public <>c__DisplayClass2_0()
			{
			}

			[Token(Token = "0x60015F4")]
			internal T <TryParse>b__0()
			{
				return (T)null;
			}
		}

		[Serializable]
		[Token(Token = "0x2000317")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49CCC", Offset = "0xB49CCC")]
		private sealed class <>c__3<T> where T : struct
		{
			[Token(Token = "0x4000EE8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c__3<T> <>9;

			[Token(Token = "0x4000EE9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static Func<EnumValue<ulong>, bool> <>9__3_0;

			[Token(Token = "0x60015F6")]
			public <>c__3()
			{
			}

			[Token(Token = "0x60015F7")]
			internal bool <GetFlagsValues>b__3_0(EnumValue<ulong> v)
			{
				return default(bool);
			}
		}

		[Serializable]
		[Token(Token = "0x2000318")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49CDC", Offset = "0xB49CDC")]
		private sealed class <>c
		{
			[Token(Token = "0x4000EEA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000EEB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<FieldInfo, bool> <>9__8_0;

			[Token(Token = "0x4000EEC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<FieldInfo, bool> <>9__10_0;

			[Token(Token = "0x60015F9")]
			[Address(RVA = "0x1B1F5EC", Offset = "0x1B1F5EC", VA = "0x1B1F5EC")]
			public <>c()
			{
			}

			[Token(Token = "0x60015FA")]
			[Address(RVA = "0x1B1F5F4", Offset = "0x1B1F5F4", VA = "0x1B1F5F4")]
			internal bool <GetValues>b__8_0(FieldInfo field)
			{
				return default(bool);
			}

			[Token(Token = "0x60015FB")]
			[Address(RVA = "0x1B1F624", Offset = "0x1B1F624", VA = "0x1B1F624")]
			internal bool <GetNames>b__10_0(FieldInfo field)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000EEF")]
		public static T Parse<T>(string enumMemberName) where T : struct
		{
			return (T)null;
		}

		[Token(Token = "0x6000EF0")]
		public static T Parse<T>(string enumMemberName, bool ignoreCase) where T : struct
		{
			return (T)null;
		}

		[Token(Token = "0x6000EF1")]
		public static bool TryParse<T>(string enumMemberName, bool ignoreCase, out T value) where T : struct
		{
			return default(bool);
		}

		[Token(Token = "0x6000EF2")]
		public static IList<T> GetFlagsValues<T>(T value) where T : struct
		{
			return null;
		}

		[Token(Token = "0x6000EF3")]
		public static EnumValues<ulong> GetNamesAndValues<T>() where T : struct
		{
			return null;
		}

		[Token(Token = "0x6000EF4")]
		public static EnumValues<TUnderlyingType> GetNamesAndValues<TEnum, TUnderlyingType>() where TEnum : struct where TUnderlyingType : struct
		{
			return null;
		}

		[Token(Token = "0x6000EF5")]
		public static EnumValues<TUnderlyingType> GetNamesAndValues<TUnderlyingType>(Type enumType) where TUnderlyingType : struct
		{
			return null;
		}

		[Token(Token = "0x6000EF6")]
		public static IList<T> GetValues<T>()
		{
			return null;
		}

		[Token(Token = "0x6000EF7")]
		[Address(RVA = "0x1B1ECF0", Offset = "0x1B1ECF0", VA = "0x1B1ECF0")]
		public static IList<object> GetValues(Type enumType)
		{
			return null;
		}

		[Token(Token = "0x6000EF8")]
		public static IList<string> GetNames<T>()
		{
			return null;
		}

		[Token(Token = "0x6000EF9")]
		[Address(RVA = "0x1B1F144", Offset = "0x1B1F144", VA = "0x1B1F144")]
		public static IList<string> GetNames(Type enumType)
		{
			return null;
		}

		[Token(Token = "0x6000EFA")]
		public static TEnumType GetMaximumValue<TEnumType>(Type enumType) where TEnumType : IConvertible, IComparable<TEnumType>
		{
			return (TEnumType)null;
		}
	}
	[Token(Token = "0x200021E")]
	internal class EnumValue<T> where T : struct
	{
		[Token(Token = "0x4000BC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private string _name;

		[Token(Token = "0x4000BC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T _value;

		[Token(Token = "0x1700011C")]
		public string Name
		{
			[Token(Token = "0x6000EFB")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700011D")]
		public T Value
		{
			[Token(Token = "0x6000EFC")]
			get
			{
				return (T)null;
			}
		}

		[Token(Token = "0x6000EFD")]
		public EnumValue(string name, T value)
		{
		}
	}
	[Token(Token = "0x200021F")]
	internal class EnumValues<T> : KeyedCollection<string, EnumValue<T>> where T : struct
	{
		[Token(Token = "0x6000EFE")]
		protected override string GetKeyForItem(EnumValue<T> item)
		{
			return null;
		}

		[Token(Token = "0x6000EFF")]
		public EnumValues()
		{
		}
	}
	[Token(Token = "0x2000220")]
	internal static class JavaScriptUtils
	{
		[Token(Token = "0x6000F00")]
		[Address(RVA = "0x1B1F654", Offset = "0x1B1F654", VA = "0x1B1F654")]
		public static void WriteEscapedJavaScriptString(TextWriter writer, string value, char delimiter, bool appendDelimiters)
		{
		}

		[Token(Token = "0x6000F01")]
		[Address(RVA = "0x1B1FB60", Offset = "0x1B1FB60", VA = "0x1B1FB60")]
		public static string ToEscapedJavaScriptString(string value)
		{
			return null;
		}

		[Token(Token = "0x6000F02")]
		[Address(RVA = "0x1B1FB6C", Offset = "0x1B1FB6C", VA = "0x1B1FB6C")]
		public static string ToEscapedJavaScriptString(string value, char delimiter, bool appendDelimiters)
		{
			return null;
		}
	}
	[Token(Token = "0x2000221")]
	internal class LateBoundReflectionDelegateFactory : ReflectionDelegateFactory
	{
		[Token(Token = "0x2000319")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49CEC", Offset = "0xB49CEC")]
		private sealed class <>c__DisplayClass3_0<T>
		{
			[Token(Token = "0x4000EED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public ConstructorInfo c;

			[Token(Token = "0x4000EEE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public MethodBase method;

			[Token(Token = "0x60015FC")]
			public <>c__DisplayClass3_0()
			{
			}

			[Token(Token = "0x60015FD")]
			internal object <CreateMethodCall>b__0(T o, object[] a)
			{
				return null;
			}

			[Token(Token = "0x60015FE")]
			internal object <CreateMethodCall>b__1(T o, object[] a)
			{
				return null;
			}
		}

		[Token(Token = "0x200031A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49CFC", Offset = "0xB49CFC")]
		private sealed class <>c__DisplayClass4_0<T>
		{
			[Token(Token = "0x4000EEF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Type type;

			[Token(Token = "0x4000EF0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public ConstructorInfo constructorInfo;

			[Token(Token = "0x60015FF")]
			public <>c__DisplayClass4_0()
			{
			}

			[Token(Token = "0x6001600")]
			internal T <CreateDefaultConstructor>b__0()
			{
				return (T)null;
			}

			[Token(Token = "0x6001601")]
			internal T <CreateDefaultConstructor>b__1()
			{
				return (T)null;
			}
		}

		[Token(Token = "0x200031B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49D0C", Offset = "0xB49D0C")]
		private sealed class <>c__DisplayClass5_0<T>
		{
			[Token(Token = "0x4000EF1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public PropertyInfo propertyInfo;

			[Token(Token = "0x6001602")]
			public <>c__DisplayClass5_0()
			{
			}

			[Token(Token = "0x6001603")]
			internal object <CreateGet>b__0(T o)
			{
				return null;
			}
		}

		[Token(Token = "0x200031C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49D1C", Offset = "0xB49D1C")]
		private sealed class <>c__DisplayClass6_0<T>
		{
			[Token(Token = "0x4000EF2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public FieldInfo fieldInfo;

			[Token(Token = "0x6001604")]
			public <>c__DisplayClass6_0()
			{
			}

			[Token(Token = "0x6001605")]
			internal object <CreateGet>b__0(T o)
			{
				return null;
			}
		}

		[Token(Token = "0x200031D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49D2C", Offset = "0xB49D2C")]
		private sealed class <>c__DisplayClass7_0<T>
		{
			[Token(Token = "0x4000EF3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public FieldInfo fieldInfo;

			[Token(Token = "0x6001606")]
			public <>c__DisplayClass7_0()
			{
			}

			[Token(Token = "0x6001607")]
			internal void <CreateSet>b__0(T o, object v)
			{
			}
		}

		[Token(Token = "0x200031E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49D3C", Offset = "0xB49D3C")]
		private sealed class <>c__DisplayClass8_0<T>
		{
			[Token(Token = "0x4000EF4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public PropertyInfo propertyInfo;

			[Token(Token = "0x6001608")]
			public <>c__DisplayClass8_0()
			{
			}

			[Token(Token = "0x6001609")]
			internal void <CreateSet>b__0(T o, object v)
			{
			}
		}

		[Token(Token = "0x4000BCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly LateBoundReflectionDelegateFactory _instance;

		[Token(Token = "0x1700011E")]
		internal static ReflectionDelegateFactory Instance
		{
			[Token(Token = "0x6000F03")]
			[Address(RVA = "0x1B16D80", Offset = "0x1B16D80", VA = "0x1B16D80")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F04")]
		public override MethodCall<T, object> CreateMethodCall<T>(MethodBase method)
		{
			return null;
		}

		[Token(Token = "0x6000F05")]
		public override Func<T> CreateDefaultConstructor<T>(Type type)
		{
			return null;
		}

		[Token(Token = "0x6000F06")]
		public override Func<T, object> CreateGet<T>(PropertyInfo propertyInfo)
		{
			return null;
		}

		[Token(Token = "0x6000F07")]
		public override Func<T, object> CreateGet<T>(FieldInfo fieldInfo)
		{
			return null;
		}

		[Token(Token = "0x6000F08")]
		public override Action<T, object> CreateSet<T>(FieldInfo fieldInfo)
		{
			return null;
		}

		[Token(Token = "0x6000F09")]
		public override Action<T, object> CreateSet<T>(PropertyInfo propertyInfo)
		{
			return null;
		}

		[Token(Token = "0x6000F0A")]
		[Address(RVA = "0x1B1FE2C", Offset = "0x1B1FE2C", VA = "0x1B1FE2C")]
		public LateBoundReflectionDelegateFactory()
		{
		}
	}
	[Token(Token = "0x2000222")]
	internal interface IWrappedList : IList, ICollection, IEnumerable
	{
		[Token(Token = "0x1700011F")]
		object UnderlyingList
		{
			[Token(Token = "0x6000F0C")]
			get;
		}
	}
	[Token(Token = "0x2000223")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0xB497F0", Offset = "0xB497F0")]
	internal class ListWrapper<T> : CollectionWrapper<T>, IList<T>, ICollection<T>, IEnumerable<T>, IEnumerable, IWrappedList, IList, ICollection
	{
		[Token(Token = "0x4000BCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IList<T> _genericList;

		[Token(Token = "0x17000120")]
		public T Item
		{
			[Token(Token = "0x6000F12")]
			get
			{
				return (T)null;
			}
			[Token(Token = "0x6000F13")]
			set
			{
			}
		}

		[Token(Token = "0x17000121")]
		public override int Count
		{
			[Token(Token = "0x6000F18")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000122")]
		public override bool IsReadOnly
		{
			[Token(Token = "0x6000F19")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000123")]
		public object UnderlyingList
		{
			[Token(Token = "0x6000F1C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F0D")]
		public ListWrapper(IList list)
		{
		}

		[Token(Token = "0x6000F0E")]
		public ListWrapper(IList<T> list)
		{
		}

		[Token(Token = "0x6000F0F")]
		public int IndexOf(T item)
		{
			return default(int);
		}

		[Token(Token = "0x6000F10")]
		public void Insert(int index, T item)
		{
		}

		[Token(Token = "0x6000F11")]
		public void RemoveAt(int index)
		{
		}

		[Token(Token = "0x6000F14")]
		public override void Add(T item)
		{
		}

		[Token(Token = "0x6000F15")]
		public override void Clear()
		{
		}

		[Token(Token = "0x6000F16")]
		public override bool Contains(T item)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F17")]
		public override void CopyTo(T[] array, int arrayIndex)
		{
		}

		[Token(Token = "0x6000F1A")]
		public override bool Remove(T item)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F1B")]
		public override IEnumerator<T> GetEnumerator()
		{
			return null;
		}
	}
	[Token(Token = "0x2000224")]
	internal class MathUtils
	{
		[Token(Token = "0x6000F1D")]
		[Address(RVA = "0x1B1FEA0", Offset = "0x1B1FEA0", VA = "0x1B1FEA0")]
		public static int IntLength(int i)
		{
			return default(int);
		}

		[Token(Token = "0x6000F1E")]
		[Address(RVA = "0x1B1FF58", Offset = "0x1B1FF58", VA = "0x1B1FF58")]
		public static int HexToInt(char h)
		{
			return default(int);
		}

		[Token(Token = "0x6000F1F")]
		[Address(RVA = "0x1B1FFA8", Offset = "0x1B1FFA8", VA = "0x1B1FFA8")]
		public static char IntToHex(int n)
		{
			return default(char);
		}

		[Token(Token = "0x6000F20")]
		[Address(RVA = "0x1B1FFC0", Offset = "0x1B1FFC0", VA = "0x1B1FFC0")]
		public static int GetDecimalPlaces(double value)
		{
			return default(int);
		}

		[Token(Token = "0x6000F21")]
		[Address(RVA = "0x1B20088", Offset = "0x1B20088", VA = "0x1B20088")]
		public static int? Min(int? val1, int? val2)
		{
			return null;
		}

		[Token(Token = "0x6000F22")]
		[Address(RVA = "0x1B20188", Offset = "0x1B20188", VA = "0x1B20188")]
		public static int? Max(int? val1, int? val2)
		{
			return null;
		}

		[Token(Token = "0x6000F23")]
		[Address(RVA = "0x1B20288", Offset = "0x1B20288", VA = "0x1B20288")]
		public static double? Min(double? val1, double? val2)
		{
			return null;
		}

		[Token(Token = "0x6000F24")]
		[Address(RVA = "0x1B2038C", Offset = "0x1B2038C", VA = "0x1B2038C")]
		public static double? Max(double? val1, double? val2)
		{
			return null;
		}

		[Token(Token = "0x6000F25")]
		[Address(RVA = "0x1B20490", Offset = "0x1B20490", VA = "0x1B20490")]
		public static bool ApproxEquals(double d1, double d2)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F26")]
		[Address(RVA = "0x1B2051C", Offset = "0x1B2051C", VA = "0x1B2051C")]
		public MathUtils()
		{
		}
	}
	[Token(Token = "0x2000225")]
	internal delegate TResult MethodCall<T, TResult>(T target, params object[] args);
	[Token(Token = "0x2000226")]
	internal delegate T Creator<T>();
	[Token(Token = "0x2000227")]
	internal static class MiscellaneousUtils
	{
		[Token(Token = "0x6000F2F")]
		[Address(RVA = "0x1B20524", Offset = "0x1B20524", VA = "0x1B20524")]
		public static bool ValueEquals(object objA, object objB)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F30")]
		[Address(RVA = "0x1B1EB90", Offset = "0x1B1EB90", VA = "0x1B1EB90")]
		public static ArgumentOutOfRangeException CreateArgumentOutOfRangeException(string paramName, object actualValue, string message)
		{
			return null;
		}

		[Token(Token = "0x6000F31")]
		public static bool TryAction<T>(Creator<T> creator, out T output)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F32")]
		[Address(RVA = "0x1B207EC", Offset = "0x1B207EC", VA = "0x1B207EC")]
		public static string ToString(object value)
		{
			return null;
		}

		[Token(Token = "0x6000F33")]
		[Address(RVA = "0x1B20898", Offset = "0x1B20898", VA = "0x1B20898")]
		public static byte[] HexToBytes(string hex)
		{
			return null;
		}

		[Token(Token = "0x6000F34")]
		[Address(RVA = "0x1B20A34", Offset = "0x1B20A34", VA = "0x1B20A34")]
		public static string BytesToHex(byte[] bytes)
		{
			return null;
		}

		[Token(Token = "0x6000F35")]
		[Address(RVA = "0x1B20A3C", Offset = "0x1B20A3C", VA = "0x1B20A3C")]
		public static string BytesToHex(byte[] bytes, bool removeDashes)
		{
			return null;
		}

		[Token(Token = "0x6000F36")]
		[Address(RVA = "0x1B20AFC", Offset = "0x1B20AFC", VA = "0x1B20AFC")]
		public static int ByteArrayCompare(byte[] a1, byte[] a2)
		{
			return default(int);
		}

		[Token(Token = "0x6000F37")]
		[Address(RVA = "0x1B20BE0", Offset = "0x1B20BE0", VA = "0x1B20BE0")]
		public static string GetPrefix(string qualifiedName)
		{
			return null;
		}

		[Token(Token = "0x6000F38")]
		[Address(RVA = "0x1B20CEC", Offset = "0x1B20CEC", VA = "0x1B20CEC")]
		public static string GetLocalName(string qualifiedName)
		{
			return null;
		}

		[Token(Token = "0x6000F39")]
		[Address(RVA = "0x1B20C0C", Offset = "0x1B20C0C", VA = "0x1B20C0C")]
		public static void GetQualifiedNameParts(string qualifiedName, out string prefix, out string localName)
		{
		}
	}
	[Token(Token = "0x2000228")]
	internal abstract class ReflectionDelegateFactory
	{
		[Token(Token = "0x6000F3A")]
		public Func<T, object> CreateGet<T>(MemberInfo memberInfo)
		{
			return null;
		}

		[Token(Token = "0x6000F3B")]
		public Action<T, object> CreateSet<T>(MemberInfo memberInfo)
		{
			return null;
		}

		[Token(Token = "0x6000F3C")]
		public abstract MethodCall<T, object> CreateMethodCall<T>(MethodBase method);

		[Token(Token = "0x6000F3D")]
		public abstract Func<T> CreateDefaultConstructor<T>(Type type);

		[Token(Token = "0x6000F3E")]
		public abstract Func<T, object> CreateGet<T>(PropertyInfo propertyInfo);

		[Token(Token = "0x6000F3F")]
		public abstract Func<T, object> CreateGet<T>(FieldInfo fieldInfo);

		[Token(Token = "0x6000F40")]
		public abstract Action<T, object> CreateSet<T>(FieldInfo fieldInfo);

		[Token(Token = "0x6000F41")]
		public abstract Action<T, object> CreateSet<T>(PropertyInfo propertyInfo);

		[Token(Token = "0x6000F42")]
		[Address(RVA = "0x1B1FE34", Offset = "0x1B1FE34", VA = "0x1B1FE34")]
		protected ReflectionDelegateFactory()
		{
		}
	}
	[Token(Token = "0x2000229")]
	public delegate object D1();
	[Token(Token = "0x200022A")]
	internal static class ReflectionUtils
	{
		[Token(Token = "0x200031F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49D4C", Offset = "0xB49D4C")]
		private sealed class <>c__DisplayClass36_0
		{
			[Token(Token = "0x4000EF5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public BindingFlags bindingAttr;

			[Token(Token = "0x4000EF6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Func<MemberInfo, bool> <>9__2;

			[Token(Token = "0x600160A")]
			[Address(RVA = "0x1B22884", Offset = "0x1B22884", VA = "0x1B22884")]
			public <>c__DisplayClass36_0()
			{
			}

			[Token(Token = "0x600160B")]
			[Address(RVA = "0x1B239A4", Offset = "0x1B239A4", VA = "0x1B239A4")]
			internal bool <GetFieldsAndProperties>b__2(MemberInfo m)
			{
				return default(bool);
			}
		}

		[Serializable]
		[Token(Token = "0x2000320")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49D5C", Offset = "0xB49D5C")]
		private sealed class <>c
		{
			[Token(Token = "0x4000EF7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000EF8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<MemberInfo, string> <>9__36_0;

			[Token(Token = "0x4000EF9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<IGrouping<string, MemberInfo>, <>f__AnonymousType0<int, IEnumerable<MemberInfo>>> <>9__36_1;

			[Token(Token = "0x4000EFA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public static Func<Type, IList<object>, object> <>9__44_0;

			[Token(Token = "0x4000EFB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public static Func<ParameterInfo, Type> <>9__50_0;

			[Token(Token = "0x4000EFC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public static Func<FieldInfo, bool> <>9__52_0;

			[Token(Token = "0x600160D")]
			[Address(RVA = "0x1B237F0", Offset = "0x1B237F0", VA = "0x1B237F0")]
			public <>c()
			{
			}

			[Token(Token = "0x600160E")]
			[Address(RVA = "0x1B237F8", Offset = "0x1B237F8", VA = "0x1B237F8")]
			internal string <GetFieldsAndProperties>b__36_0(MemberInfo m)
			{
				return null;
			}

			[Token(Token = "0x600160F")]
			[Address(RVA = "0x1B2382C", Offset = "0x1B2382C", VA = "0x1B2382C")]
			internal <>f__AnonymousType0<int, IEnumerable<MemberInfo>> <GetFieldsAndProperties>b__36_1(IGrouping<string, MemberInfo> g)
			{
				return null;
			}

			[Token(Token = "0x6001610")]
			[Address(RVA = "0x1B238D8", Offset = "0x1B238D8", VA = "0x1B238D8")]
			internal object <CreateGeneric>b__44_0(Type t, IList<object> a)
			{
				return null;
			}

			[Token(Token = "0x6001611")]
			[Address(RVA = "0x1B23940", Offset = "0x1B23940", VA = "0x1B23940")]
			internal Type <GetMemberInfoFromType>b__50_0(ParameterInfo p)
			{
				return null;
			}

			[Token(Token = "0x6001612")]
			[Address(RVA = "0x1B23974", Offset = "0x1B23974", VA = "0x1B23974")]
			internal bool <GetChildPrivateFields>b__52_0(FieldInfo f)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x2000321")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49D6C", Offset = "0xB49D6C")]
		private sealed class <>c__DisplayClass55_0
		{
			[Token(Token = "0x4000EFD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public PropertyInfo nonPublicProperty;

			[Token(Token = "0x6001613")]
			[Address(RVA = "0x1B23784", Offset = "0x1B23784", VA = "0x1B23784")]
			public <>c__DisplayClass55_0()
			{
			}

			[Token(Token = "0x6001614")]
			[Address(RVA = "0x1B23A40", Offset = "0x1B23A40", VA = "0x1B23A40")]
			internal bool <GetChildPrivateProperties>b__0(PropertyInfo p)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000F47")]
		[Address(RVA = "0x1B16004", Offset = "0x1B16004", VA = "0x1B16004")]
		public static bool IsVirtual(this PropertyInfo propertyInfo)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F48")]
		[Address(RVA = "0x1B1DFF8", Offset = "0x1B1DFF8", VA = "0x1B1DFF8")]
		public static Type GetObjectType(object v)
		{
			return null;
		}

		[Token(Token = "0x6000F49")]
		[Address(RVA = "0x1B20D18", Offset = "0x1B20D18", VA = "0x1B20D18")]
		public static string GetTypeName(Type t, FormatterAssemblyStyle assemblyFormat)
		{
			return null;
		}

		[Token(Token = "0x6000F4A")]
		[Address(RVA = "0x1B20D1C", Offset = "0x1B20D1C", VA = "0x1B20D1C")]
		public static string GetTypeName(Type t, FormatterAssemblyStyle assemblyFormat, SerializationBinder binder)
		{
			return null;
		}

		[Token(Token = "0x6000F4B")]
		[Address(RVA = "0x1B20DEC", Offset = "0x1B20DEC", VA = "0x1B20DEC")]
		private static string RemoveAssemblyDetails(string fullyQualifiedTypeName)
		{
			return null;
		}

		[Token(Token = "0x6000F4C")]
		[Address(RVA = "0x1B1B4E8", Offset = "0x1B1B4E8", VA = "0x1B1B4E8")]
		public static bool IsInstantiatableType(Type t)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F4D")]
		[Address(RVA = "0x1B20F80", Offset = "0x1B20F80", VA = "0x1B20F80")]
		public static bool HasDefaultConstructor(Type t)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F4E")]
		[Address(RVA = "0x1B20F88", Offset = "0x1B20F88", VA = "0x1B20F88")]
		public static bool HasDefaultConstructor(Type t, bool nonPublic)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F4F")]
		[Address(RVA = "0x1B210F0", Offset = "0x1B210F0", VA = "0x1B210F0")]
		public static ConstructorInfo GetDefaultConstructor(Type t)
		{
			return null;
		}

		[Token(Token = "0x6000F50")]
		[Address(RVA = "0x1B21058", Offset = "0x1B21058", VA = "0x1B21058")]
		public static ConstructorInfo GetDefaultConstructor(Type t, bool nonPublic)
		{
			return null;
		}

		[Token(Token = "0x6000F51")]
		[Address(RVA = "0x1B1CF48", Offset = "0x1B1CF48", VA = "0x1B1CF48")]
		public static bool IsNullable(Type t)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F52")]
		[Address(RVA = "0x1B1CD7C", Offset = "0x1B1CD7C", VA = "0x1B1CD7C")]
		public static bool IsNullableType(Type t)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F53")]
		[Address(RVA = "0x1B210F8", Offset = "0x1B210F8", VA = "0x1B210F8")]
		public static Type EnsureNotNullableType(Type t)
		{
			return null;
		}

		[Token(Token = "0x6000F54")]
		[Address(RVA = "0x1B21134", Offset = "0x1B21134", VA = "0x1B21134")]
		public static bool IsUnitializedValue(object value)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F55")]
		[Address(RVA = "0x1B21184", Offset = "0x1B21184", VA = "0x1B21184")]
		public static object CreateUnitializedValue(Type type)
		{
			return null;
		}

		[Token(Token = "0x6000F56")]
		[Address(RVA = "0x1B213E8", Offset = "0x1B213E8", VA = "0x1B213E8")]
		public static bool IsPropertyIndexed(PropertyInfo property)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F57")]
		[Address(RVA = "0x1B18B44", Offset = "0x1B18B44", VA = "0x1B18B44")]
		public static bool ImplementsGenericDefinition(Type type, Type genericInterfaceDefinition)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F58")]
		[Address(RVA = "0x1B192B8", Offset = "0x1B192B8", VA = "0x1B192B8")]
		public static bool ImplementsGenericDefinition(Type type, Type genericInterfaceDefinition, out Type implementingType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F59")]
		[Address(RVA = "0x1B21474", Offset = "0x1B21474", VA = "0x1B21474")]
		public static bool AssignableToTypeName(this Type type, string fullTypeName, out Type match)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F5A")]
		[Address(RVA = "0x1B21610", Offset = "0x1B21610", VA = "0x1B21610")]
		public static bool AssignableToTypeName(this Type type, string fullTypeName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F5B")]
		[Address(RVA = "0x1B1B8EC", Offset = "0x1B1B8EC", VA = "0x1B1B8EC")]
		public static bool InheritsGenericDefinition(Type type, Type genericClassDefinition)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F5C")]
		[Address(RVA = "0x1B1B1E0", Offset = "0x1B1B1E0", VA = "0x1B1B1E0")]
		public static bool InheritsGenericDefinition(Type type, Type genericClassDefinition, out Type implementingType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F5D")]
		[Address(RVA = "0x1B21638", Offset = "0x1B21638", VA = "0x1B21638")]
		private static bool InheritsGenericDefinitionInternal(Type currentType, Type genericClassDefinition, out Type implementingType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F5E")]
		[Address(RVA = "0x1B195CC", Offset = "0x1B195CC", VA = "0x1B195CC")]
		public static Type GetCollectionItemType(Type type)
		{
			return null;
		}

		[Token(Token = "0x6000F5F")]
		[Address(RVA = "0x1B21788", Offset = "0x1B21788", VA = "0x1B21788")]
		public static void GetDictionaryKeyValueTypes(Type dictionaryType, out Type keyType, out Type valueType)
		{
		}

		[Token(Token = "0x6000F60")]
		[Address(RVA = "0x1B1A408", Offset = "0x1B1A408", VA = "0x1B1A408")]
		public static Type GetDictionaryValueType(Type dictionaryType)
		{
			return null;
		}

		[Token(Token = "0x6000F61")]
		[Address(RVA = "0x1B1A3DC", Offset = "0x1B1A3DC", VA = "0x1B1A3DC")]
		public static Type GetDictionaryKeyType(Type dictionaryType)
		{
			return null;
		}

		[Token(Token = "0x6000F62")]
		public static bool ItemsUnitializedValue<T>(IList<T> list)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F63")]
		[Address(RVA = "0x1B219FC", Offset = "0x1B219FC", VA = "0x1B219FC")]
		public static Type GetMemberUnderlyingType(MemberInfo member)
		{
			return null;
		}

		[Token(Token = "0x6000F64")]
		[Address(RVA = "0x1B21CFC", Offset = "0x1B21CFC", VA = "0x1B21CFC")]
		public static bool IsIndexedProperty(MemberInfo member)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F65")]
		[Address(RVA = "0x1B21DB8", Offset = "0x1B21DB8", VA = "0x1B21DB8")]
		public static bool IsIndexedProperty(PropertyInfo property)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F66")]
		[Address(RVA = "0x1B17050", Offset = "0x1B17050", VA = "0x1B17050")]
		public static object GetMemberValue(MemberInfo member, object target)
		{
			return null;
		}

		[Token(Token = "0x6000F67")]
		[Address(RVA = "0x1B17824", Offset = "0x1B17824", VA = "0x1B17824")]
		public static void SetMemberValue(MemberInfo member, object target, object value)
		{
		}

		[Token(Token = "0x6000F68")]
		[Address(RVA = "0x1B21E44", Offset = "0x1B21E44", VA = "0x1B21E44")]
		public static bool CanReadMemberValue(MemberInfo member, bool nonPublic)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F69")]
		[Address(RVA = "0x1B2202C", Offset = "0x1B2202C", VA = "0x1B2202C")]
		public static bool CanSetMemberValue(MemberInfo member, bool nonPublic, bool canSetReadOnly)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F6A")]
		public static List<MemberInfo> GetFieldsAndProperties<T>(BindingFlags bindingAttr)
		{
			return null;
		}

		[Token(Token = "0x6000F6B")]
		[Address(RVA = "0x1B22248", Offset = "0x1B22248", VA = "0x1B22248")]
		public static List<MemberInfo> GetFieldsAndProperties(Type type, BindingFlags bindingAttr)
		{
			return null;
		}

		[Token(Token = "0x6000F6C")]
		[Address(RVA = "0x1B22BBC", Offset = "0x1B22BBC", VA = "0x1B22BBC")]
		private static bool IsOverridenGenericMember(MemberInfo memberInfo, BindingFlags bindingAttr)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F6D")]
		public static T GetAttribute<T>(ICustomAttributeProvider attributeProvider) where T : Attribute
		{
			return null;
		}

		[Token(Token = "0x6000F6E")]
		public static T GetAttribute<T>(ICustomAttributeProvider attributeProvider, bool inherit) where T : Attribute
		{
			return null;
		}

		[Token(Token = "0x6000F6F")]
		public static T[] GetAttributes<T>(ICustomAttributeProvider attributeProvider, bool inherit) where T : Attribute
		{
			return null;
		}

		[Token(Token = "0x6000F70")]
		[Address(RVA = "0x1B22DA8", Offset = "0x1B22DA8", VA = "0x1B22DA8")]
		public static string GetNameAndAssessmblyName(Type t)
		{
			return null;
		}

		[Token(Token = "0x6000F71")]
		[Address(RVA = "0x1B1B36C", Offset = "0x1B1B36C", VA = "0x1B1B36C")]
		public static Type MakeGenericType(Type genericTypeDefinition, params Type[] innerTypes)
		{
			return null;
		}

		[Token(Token = "0x6000F72")]
		[Address(RVA = "0x1B187B0", Offset = "0x1B187B0", VA = "0x1B187B0")]
		public static object CreateGeneric(Type genericTypeDefinition, Type innerType, params object[] args)
		{
			return null;
		}

		[Token(Token = "0x6000F73")]
		[Address(RVA = "0x1B22F24", Offset = "0x1B22F24", VA = "0x1B22F24")]
		public static object CreateGeneric(Type genericTypeDefinition, IList<Type> innerTypes, params object[] args)
		{
			return null;
		}

		[Token(Token = "0x6000F74")]
		[Address(RVA = "0x1B19844", Offset = "0x1B19844", VA = "0x1B19844")]
		public static object CreateGeneric(Type genericTypeDefinition, IList<Type> innerTypes, Func<Type, IList<object>, object> instanceCreator, params object[] args)
		{
			return null;
		}

		[Token(Token = "0x6000F75")]
		[Address(RVA = "0x1B2301C", Offset = "0x1B2301C", VA = "0x1B2301C")]
		public static bool IsCompatibleValue(object value, Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F76")]
		[Address(RVA = "0x1B1B914", Offset = "0x1B1B914", VA = "0x1B1B914")]
		public static object CreateInstance(Type type, params object[] args)
		{
			return null;
		}

		[Token(Token = "0x6000F77")]
		[Address(RVA = "0x1B23078", Offset = "0x1B23078", VA = "0x1B23078")]
		public static void SplitFullyQualifiedTypeName(string fullyQualifiedTypeName, out string typeName, out string assemblyName)
		{
		}

		[Token(Token = "0x6000F78")]
		[Address(RVA = "0x1B231D0", Offset = "0x1B231D0", VA = "0x1B231D0")]
		private static int? GetAssemblyDelimiterIndex(string fullyQualifiedTypeName)
		{
			return null;
		}

		[Token(Token = "0x6000F79")]
		[Address(RVA = "0x1B160F4", Offset = "0x1B160F4", VA = "0x1B160F4")]
		public static MemberInfo GetMemberInfoFromType(Type targetType, MemberInfo memberInfo)
		{
			return null;
		}

		[Token(Token = "0x6000F7A")]
		[Address(RVA = "0x1B2288C", Offset = "0x1B2288C", VA = "0x1B2288C")]
		public static IEnumerable<FieldInfo> GetFields(Type targetType, BindingFlags bindingAttr)
		{
			return null;
		}

		[Token(Token = "0x6000F7B")]
		[Address(RVA = "0x1B232C0", Offset = "0x1B232C0", VA = "0x1B232C0")]
		private static void GetChildPrivateFields(IList<MemberInfo> initialFields, Type targetType, BindingFlags bindingAttr)
		{
		}

		[Token(Token = "0x6000F7C")]
		[Address(RVA = "0x1B22960", Offset = "0x1B22960", VA = "0x1B22960")]
		public static IEnumerable<PropertyInfo> GetProperties(Type targetType, BindingFlags bindingAttr)
		{
			return null;
		}

		[Token(Token = "0x6000F7D")]
		[Address(RVA = "0x1B23498", Offset = "0x1B23498", VA = "0x1B23498")]
		public static BindingFlags RemoveFlag(this BindingFlags bindingAttr, BindingFlags flag)
		{
			return default(BindingFlags);
		}

		[Token(Token = "0x6000F7E")]
		[Address(RVA = "0x1B234A8", Offset = "0x1B234A8", VA = "0x1B234A8")]
		private static void GetChildPrivateProperties(IList<PropertyInfo> initialProperties, Type targetType, BindingFlags bindingAttr)
		{
		}
	}
	[Token(Token = "0x200022B")]
	internal class StringBuffer
	{
		[Token(Token = "0x4000BCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private char[] _buffer;

		[Token(Token = "0x4000BCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int _position;

		[Token(Token = "0x4000BCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly char[] _emptyBuffer;

		[Token(Token = "0x17000124")]
		public int Position
		{
			[Token(Token = "0x6000F7F")]
			[Address(RVA = "0x1B23AAC", Offset = "0x1B23AAC", VA = "0x1B23AAC")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000F80")]
			[Address(RVA = "0x1B23AB4", Offset = "0x1B23AB4", VA = "0x1B23AB4")]
			set
			{
			}
		}

		[Token(Token = "0x6000F81")]
		[Address(RVA = "0x1B23ABC", Offset = "0x1B23ABC", VA = "0x1B23ABC")]
		public StringBuffer()
		{
		}

		[Token(Token = "0x6000F82")]
		[Address(RVA = "0x1B23B38", Offset = "0x1B23B38", VA = "0x1B23B38")]
		public StringBuffer(int initalSize)
		{
		}

		[Token(Token = "0x6000F83")]
		[Address(RVA = "0x1B23BA8", Offset = "0x1B23BA8", VA = "0x1B23BA8")]
		public void Append(char value)
		{
		}

		[Token(Token = "0x6000F84")]
		[Address(RVA = "0x1B23CC4", Offset = "0x1B23CC4", VA = "0x1B23CC4")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000F85")]
		[Address(RVA = "0x1B23C3C", Offset = "0x1B23C3C", VA = "0x1B23C3C")]
		private void EnsureSize(int appendLength)
		{
		}

		[Token(Token = "0x6000F86")]
		[Address(RVA = "0x1B23D38", Offset = "0x1B23D38", VA = "0x1B23D38", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000F87")]
		[Address(RVA = "0x1B23D50", Offset = "0x1B23D50", VA = "0x1B23D50")]
		public string ToString(int start, int length)
		{
			return null;
		}

		[Token(Token = "0x6000F88")]
		[Address(RVA = "0x1B23D74", Offset = "0x1B23D74", VA = "0x1B23D74")]
		public char[] GetInternalBuffer()
		{
			return null;
		}
	}
	[Token(Token = "0x200022C")]
	internal static class StringUtils
	{
		[Token(Token = "0x2000322")]
		private delegate void ActionLine(TextWriter textWriter, string line);

		[Token(Token = "0x2000323")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49D7C", Offset = "0xB49D7C")]
		private sealed class <>c__DisplayClass13_0
		{
			[Token(Token = "0x4000EFE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public char indentChar;

			[Token(Token = "0x4000EFF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int indentation;

			[Token(Token = "0x6001619")]
			[Address(RVA = "0x1B244A0", Offset = "0x1B244A0", VA = "0x1B244A0")]
			public <>c__DisplayClass13_0()
			{
			}

			[Token(Token = "0x600161A")]
			[Address(RVA = "0x1B254C8", Offset = "0x1B254C8", VA = "0x1B254C8")]
			internal void <Indent>b__0(TextWriter tw, string line)
			{
			}
		}

		[Token(Token = "0x2000324")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49D8C", Offset = "0xB49D8C")]
		private sealed class <>c__DisplayClass16_0
		{
			[Token(Token = "0x4000F00")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int lineNumber;

			[Token(Token = "0x600161B")]
			[Address(RVA = "0x1B24E60", Offset = "0x1B24E60", VA = "0x1B24E60")]
			public <>c__DisplayClass16_0()
			{
			}

			[Token(Token = "0x600161C")]
			[Address(RVA = "0x1B25550", Offset = "0x1B25550", VA = "0x1B25550")]
			internal void <NumberLines>b__0(TextWriter tw, string line)
			{
			}
		}

		[Token(Token = "0x2000325")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49D9C", Offset = "0xB49D9C")]
		private sealed class <>c__DisplayClass25_0<TSource>
		{
			[Token(Token = "0x4000F01")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Func<TSource, string> valueSelector;

			[Token(Token = "0x4000F02")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public string testValue;

			[Token(Token = "0x600161D")]
			public <>c__DisplayClass25_0()
			{
			}

			[Token(Token = "0x600161E")]
			internal bool <ForgivingCaseSensitiveFind>b__0(TSource s)
			{
				return default(bool);
			}

			[Token(Token = "0x600161F")]
			internal bool <ForgivingCaseSensitiveFind>b__1(TSource s)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4000BCF")]
		public const string CarriageReturnLineFeed = "\r\n";

		[Token(Token = "0x4000BD0")]
		public const string Empty = "";

		[Token(Token = "0x4000BD1")]
		public const char CarriageReturn = '\r';

		[Token(Token = "0x4000BD2")]
		public const char LineFeed = '\n';

		[Token(Token = "0x4000BD3")]
		public const char Tab = '\t';

		[Token(Token = "0x6000F8A")]
		[Address(RVA = "0x1B167B4", Offset = "0x1B167B4", VA = "0x1B167B4")]
		public static string FormatWith(this string format, IFormatProvider provider, params object[] args)
		{
			return null;
		}

		[Token(Token = "0x6000F8B")]
		[Address(RVA = "0x1B23DE0", Offset = "0x1B23DE0", VA = "0x1B23DE0")]
		public static bool ContainsWhiteSpace(string s)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F8C")]
		[Address(RVA = "0x1B23EF4", Offset = "0x1B23EF4", VA = "0x1B23EF4")]
		public static bool IsWhiteSpace(string s)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F8D")]
		[Address(RVA = "0x1B24018", Offset = "0x1B24018", VA = "0x1B24018")]
		public static string EnsureEndsWith(string target, string value)
		{
			return null;
		}

		[Token(Token = "0x6000F8E")]
		[Address(RVA = "0x1B241D8", Offset = "0x1B241D8", VA = "0x1B241D8")]
		public static bool IsNullOrEmptyOrWhiteSpace(string s)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F8F")]
		[Address(RVA = "0x1B24214", Offset = "0x1B24214", VA = "0x1B24214")]
		public static void IfNotNullOrEmpty(string value, Action<string> action)
		{
		}

		[Token(Token = "0x6000F90")]
		[Address(RVA = "0x1B2421C", Offset = "0x1B2421C", VA = "0x1B2421C")]
		private static void IfNotNullOrEmpty(string value, Action<string> trueAction, Action<string> falseAction)
		{
		}

		[Token(Token = "0x6000F91")]
		[Address(RVA = "0x1B242B8", Offset = "0x1B242B8", VA = "0x1B242B8")]
		public static string Indent(string s, int indentation)
		{
			return null;
		}

		[Token(Token = "0x6000F92")]
		[Address(RVA = "0x1B242C0", Offset = "0x1B242C0", VA = "0x1B242C0")]
		public static string Indent(string s, int indentation, char indentChar)
		{
			return null;
		}

		[Token(Token = "0x6000F93")]
		[Address(RVA = "0x1B244B8", Offset = "0x1B244B8", VA = "0x1B244B8")]
		private static void ActionTextReaderLine(TextReader textReader, TextWriter textWriter, ActionLine lineAction)
		{
		}

		[Token(Token = "0x6000F94")]
		[Address(RVA = "0x1B24CDC", Offset = "0x1B24CDC", VA = "0x1B24CDC")]
		public static string NumberLines(string s)
		{
			return null;
		}

		[Token(Token = "0x6000F95")]
		[Address(RVA = "0x1B24E68", Offset = "0x1B24E68", VA = "0x1B24E68")]
		public static string NullEmptyString(string s)
		{
			return null;
		}

		[Token(Token = "0x6000F96")]
		[Address(RVA = "0x1B24E94", Offset = "0x1B24E94", VA = "0x1B24E94")]
		public static string ReplaceNewLines(string s, string replacement)
		{
			return null;
		}

		[Token(Token = "0x6000F97")]
		[Address(RVA = "0x1B24FA8", Offset = "0x1B24FA8", VA = "0x1B24FA8")]
		public static string Truncate(string s, int maximumLength)
		{
			return null;
		}

		[Token(Token = "0x6000F98")]
		[Address(RVA = "0x1B25008", Offset = "0x1B25008", VA = "0x1B25008")]
		public static string Truncate(string s, int maximumLength, string suffix)
		{
			return null;
		}

		[Token(Token = "0x6000F99")]
		[Address(RVA = "0x1B1FD6C", Offset = "0x1B1FD6C", VA = "0x1B1FD6C")]
		public static StringWriter CreateStringWriter(int capacity)
		{
			return null;
		}

		[Token(Token = "0x6000F9A")]
		[Address(RVA = "0x1B1FCE8", Offset = "0x1B1FCE8", VA = "0x1B1FCE8")]
		public static int? GetLength(string value)
		{
			return null;
		}

		[Token(Token = "0x6000F9B")]
		[Address(RVA = "0x1B1F9C8", Offset = "0x1B1F9C8", VA = "0x1B1F9C8")]
		public static string ToCharAsUnicode(char c)
		{
			return null;
		}

		[Token(Token = "0x6000F9C")]
		[Address(RVA = "0x1B25184", Offset = "0x1B25184", VA = "0x1B25184")]
		public static void WriteCharAsUnicode(TextWriter writer, char c)
		{
		}

		[Token(Token = "0x6000F9D")]
		public static TSource ForgivingCaseSensitiveFind<TSource>(this IEnumerable<TSource> source, Func<TSource, string> valueSelector, string testValue)
		{
			return (TSource)null;
		}

		[Token(Token = "0x6000F9E")]
		[Address(RVA = "0x1B25320", Offset = "0x1B25320", VA = "0x1B25320")]
		public static string ToCamelCase(string s)
		{
			return null;
		}
	}
	[Token(Token = "0x200022D")]
	internal class ThreadSafeStore<TKey, TValue>
	{
		[Token(Token = "0x4000BD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly object _lock;

		[Token(Token = "0x4000BD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Dictionary<TKey, TValue> _store;

		[Token(Token = "0x4000BD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Func<TKey, TValue> _creator;

		[Token(Token = "0x6000F9F")]
		public ThreadSafeStore(Func<TKey, TValue> creator)
		{
		}

		[Token(Token = "0x6000FA0")]
		public TValue Get(TKey key)
		{
			return (TValue)null;
		}

		[Token(Token = "0x6000FA1")]
		private TValue AddValue(TKey key)
		{
			return (TValue)null;
		}
	}
	[Token(Token = "0x200022E")]
	internal static class ValidationUtils
	{
		[Token(Token = "0x4000BD7")]
		public const string EmailAddressRegex = "^([a-zA-Z0-9_'+*$%\\^&!\\.\\-])+\\@(([a-zA-Z0-9\\-])+\\.)+([a-zA-Z0-9:]{2,4})+$";

		[Token(Token = "0x4000BD8")]
		public const string CurrencyRegex = "(^\\$?(?!0,?\\d)\\d{1,3}(,?\\d{3})*(\\.\\d\\d)?)$";

		[Token(Token = "0x4000BD9")]
		public const string DateRegex = "^(((0?[1-9]|[12]\\d|3[01])[\\.\\-\\/](0?[13578]|1[02])[\\.\\-\\/]((1[6-9]|[2-9]\\d)?\\d{2}|\\d))|((0?[1-9]|[12]\\d|30)[\\.\\-\\/](0?[13456789]|1[012])[\\.\\-\\/]((1[6-9]|[2-9]\\d)?\\d{2}|\\d))|((0?[1-9]|1\\d|2[0-8])[\\.\\-\\/]0?2[\\.\\-\\/]((1[6-9]|[2-9]\\d)?\\d{2}|\\d))|(29[\\.\\-\\/]0?2[\\.\\-\\/]((1[6-9]|[2-9]\\d)?(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)|00|[048])))$";

		[Token(Token = "0x4000BDA")]
		public const string NumericRegex = "\\d*";

		[Token(Token = "0x6000FA2")]
		[Address(RVA = "0x1B256D8", Offset = "0x1B256D8", VA = "0x1B256D8")]
		public static void ArgumentNotNullOrEmpty(string value, string parameterName)
		{
		}

		[Token(Token = "0x6000FA3")]
		[Address(RVA = "0x1B25834", Offset = "0x1B25834", VA = "0x1B25834")]
		public static void ArgumentNotNullOrEmptyOrWhitespace(string value, string parameterName)
		{
		}

		[Token(Token = "0x6000FA4")]
		[Address(RVA = "0x1B25964", Offset = "0x1B25964", VA = "0x1B25964")]
		public static void ArgumentTypeIsEnum(Type enumType, string parameterName)
		{
		}

		[Token(Token = "0x6000FA5")]
		public static void ArgumentNotNullOrEmpty<T>(ICollection<T> collection, string parameterName)
		{
		}

		[Token(Token = "0x6000FA6")]
		public static void ArgumentNotNullOrEmpty<T>(ICollection<T> collection, string parameterName, string message)
		{
		}

		[Token(Token = "0x6000FA7")]
		[Address(RVA = "0x1B25AB4", Offset = "0x1B25AB4", VA = "0x1B25AB4")]
		public static void ArgumentNotNullOrEmpty(ICollection collection, string parameterName)
		{
		}

		[Token(Token = "0x6000FA8")]
		[Address(RVA = "0x1B25BC0", Offset = "0x1B25BC0", VA = "0x1B25BC0")]
		public static void ArgumentNotNullOrEmpty(ICollection collection, string parameterName, string message)
		{
		}

		[Token(Token = "0x6000FA9")]
		[Address(RVA = "0x1B15844", Offset = "0x1B15844", VA = "0x1B15844")]
		public static void ArgumentNotNull(object value, string parameterName)
		{
		}

		[Token(Token = "0x6000FAA")]
		[Address(RVA = "0x1B25CF4", Offset = "0x1B25CF4", VA = "0x1B25CF4")]
		public static void ArgumentNotNegative(int value, string parameterName)
		{
		}

		[Token(Token = "0x6000FAB")]
		[Address(RVA = "0x1B25D90", Offset = "0x1B25D90", VA = "0x1B25D90")]
		public static void ArgumentNotNegative(int value, string parameterName, string message)
		{
		}

		[Token(Token = "0x6000FAC")]
		[Address(RVA = "0x1B25E30", Offset = "0x1B25E30", VA = "0x1B25E30")]
		public static void ArgumentNotZero(int value, string parameterName)
		{
		}

		[Token(Token = "0x6000FAD")]
		[Address(RVA = "0x1B25EC8", Offset = "0x1B25EC8", VA = "0x1B25EC8")]
		public static void ArgumentNotZero(int value, string parameterName, string message)
		{
		}

		[Token(Token = "0x6000FAE")]
		public static void ArgumentIsPositive<T>(T value, string parameterName) where T : struct, IComparable<T>
		{
		}

		[Token(Token = "0x6000FAF")]
		[Address(RVA = "0x1B25F64", Offset = "0x1B25F64", VA = "0x1B25F64")]
		public static void ArgumentIsPositive(int value, string parameterName, string message)
		{
		}

		[Token(Token = "0x6000FB0")]
		[Address(RVA = "0x1B26004", Offset = "0x1B26004", VA = "0x1B26004")]
		public static void ObjectNotDisposed(bool disposed, Type objectType)
		{
		}

		[Token(Token = "0x6000FB1")]
		[Address(RVA = "0x1B22E90", Offset = "0x1B22E90", VA = "0x1B22E90")]
		public static void ArgumentConditionTrue(bool condition, string parameterName, string message)
		{
		}
	}
}
namespace Newtonsoft.Json.Serialization
{
	[Token(Token = "0x200022F")]
	internal static class CachedAttributeGetter<T> where T : Attribute
	{
		[Token(Token = "0x4000BDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly ThreadSafeStore<ICustomAttributeProvider, T> TypeAttributeCache;

		[Token(Token = "0x6000FB2")]
		public static T GetAttribute(ICustomAttributeProvider type)
		{
			return null;
		}
	}
	[Token(Token = "0x2000230")]
	public class CamelCasePropertyNamesContractResolver : DefaultContractResolver
	{
		[Token(Token = "0x6000FB4")]
		[Address(RVA = "0x18376FC", Offset = "0x18376FC", VA = "0x18376FC")]
		public CamelCasePropertyNamesContractResolver()
		{
		}

		[Token(Token = "0x6000FB5")]
		[Address(RVA = "0x18377B0", Offset = "0x18377B0", VA = "0x18377B0", Slot = "21")]
		protected internal override string ResolvePropertyName(string propertyName)
		{
			return null;
		}
	}
	[Token(Token = "0x2000231")]
	internal struct ResolverContractKey : IEquatable<ResolverContractKey>
	{
		[Token(Token = "0x4000BDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Type _resolverType;

		[Token(Token = "0x4000BDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private readonly Type _contractType;

		[Token(Token = "0x6000FB6")]
		[Address(RVA = "0xC3702C", Offset = "0xC3702C", VA = "0xC3702C")]
		public ResolverContractKey(Type resolverType, Type contractType)
		{
		}

		[Token(Token = "0x6000FB7")]
		[Address(RVA = "0xC37034", Offset = "0xC37034", VA = "0xC37034", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000FB8")]
		[Address(RVA = "0xC3703C", Offset = "0xC3703C", VA = "0xC3703C", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FB9")]
		[Address(RVA = "0xC37044", Offset = "0xC37044", VA = "0xC37044", Slot = "4")]
		public bool Equals(ResolverContractKey other)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000232")]
	public class DefaultContractResolver : IContractResolver
	{
		[Serializable]
		[Token(Token = "0x2000326")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49DAC", Offset = "0xB49DAC")]
		private sealed class <>c
		{
			[Token(Token = "0x4000F03")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000F04")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<MemberInfo, bool> <>9__23_0;

			[Token(Token = "0x4000F05")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<MemberInfo, bool> <>9__23_1;

			[Token(Token = "0x4000F06")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public static Func<ConstructorInfo, bool> <>9__25_0;

			[Token(Token = "0x4000F07")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public static Func<ConstructorInfo, bool> <>9__26_0;

			[Token(Token = "0x4000F08")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public static Func<JsonProperty, int> <>9__45_0;

			[Token(Token = "0x6001621")]
			[Address(RVA = "0x183CC08", Offset = "0x183CC08", VA = "0x183CC08")]
			public <>c()
			{
			}

			[Token(Token = "0x6001622")]
			[Address(RVA = "0x183CC10", Offset = "0x183CC10", VA = "0x183CC10")]
			internal bool <GetSerializableMembers>b__23_0(MemberInfo m)
			{
				return default(bool);
			}

			[Token(Token = "0x6001623")]
			[Address(RVA = "0x183CC34", Offset = "0x183CC34", VA = "0x183CC34")]
			internal bool <GetSerializableMembers>b__23_1(MemberInfo m)
			{
				return default(bool);
			}

			[Token(Token = "0x6001624")]
			[Address(RVA = "0x183CC58", Offset = "0x183CC58", VA = "0x183CC58")]
			internal bool <CreateObjectContract>b__25_0(ConstructorInfo c)
			{
				return default(bool);
			}

			[Token(Token = "0x6001625")]
			[Address(RVA = "0x183CCF4", Offset = "0x183CCF4", VA = "0x183CCF4")]
			internal bool <GetAttributeConstructor>b__26_0(ConstructorInfo c)
			{
				return default(bool);
			}

			[Token(Token = "0x6001626")]
			[Address(RVA = "0x183CD90", Offset = "0x183CD90", VA = "0x183CD90")]
			internal int <CreateProperties>b__45_0(JsonProperty p)
			{
				return default(int);
			}
		}

		[Token(Token = "0x2000327")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49DBC", Offset = "0xB49DBC")]
		private sealed class <>c__DisplayClass39_0
		{
			[Token(Token = "0x4000F09")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public MethodCall<object, object> methodCall;

			[Token(Token = "0x6001627")]
			[Address(RVA = "0x183B918", Offset = "0x183B918", VA = "0x183B918")]
			public <>c__DisplayClass39_0()
			{
			}

			[Token(Token = "0x6001628")]
			[Address(RVA = "0x183CE2C", Offset = "0x183CE2C", VA = "0x183CE2C")]
			internal object <CreateISerializableContract>b__0(object[] args)
			{
				return null;
			}
		}

		[Token(Token = "0x2000328")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49DCC", Offset = "0xB49DCC")]
		private sealed class <>c__DisplayClass49_0
		{
			[Token(Token = "0x4000F0A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public MethodCall<object, object> shouldSerializeCall;

			[Token(Token = "0x6001629")]
			[Address(RVA = "0x183CA30", Offset = "0x183CA30", VA = "0x183CA30")]
			public <>c__DisplayClass49_0()
			{
			}

			[Token(Token = "0x600162A")]
			[Address(RVA = "0x183CEA0", Offset = "0x183CEA0", VA = "0x183CEA0")]
			internal bool <CreateShouldSerializeTest>b__0(object o)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x2000329")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49DDC", Offset = "0xB49DDC")]
		private sealed class <>c__DisplayClass50_0
		{
			[Token(Token = "0x4000F0B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Func<object, object> specifiedPropertyGet;

			[Token(Token = "0x600162B")]
			[Address(RVA = "0x183CA38", Offset = "0x183CA38", VA = "0x183CA38")]
			public <>c__DisplayClass50_0()
			{
			}

			[Token(Token = "0x600162C")]
			[Address(RVA = "0x183CF40", Offset = "0x183CF40", VA = "0x183CF40")]
			internal bool <SetIsSpecifiedActions>b__0(object o)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4000BDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly IContractResolver _instance;

		[Token(Token = "0x4000BDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly IList<JsonConverter> BuiltInConverters;

		[Token(Token = "0x4000BE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static Dictionary<ResolverContractKey, JsonContract> _sharedContractCache;

		[Token(Token = "0x4000BE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static readonly object _typeContractCacheLock;

		[Token(Token = "0x4000BE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Dictionary<ResolverContractKey, JsonContract> _instanceContractCache;

		[Token(Token = "0x4000BE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly bool _sharedCache;

		[Token(Token = "0x4000BE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B328", Offset = "0xB4B328")]
		private BindingFlags <DefaultMembersSearchFlags>k__BackingField;

		[Token(Token = "0x4000BE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B338", Offset = "0xB4B338")]
		private bool <SerializeCompilerGeneratedMembers>k__BackingField;

		[Token(Token = "0x17000125")]
		internal static IContractResolver Instance
		{
			[Token(Token = "0x6000FBA")]
			[Address(RVA = "0x18377BC", Offset = "0x18377BC", VA = "0x18377BC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000126")]
		public bool DynamicCodeGeneration
		{
			[Token(Token = "0x6000FBB")]
			[Address(RVA = "0x1837824", Offset = "0x1837824", VA = "0x1837824")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000127")]
		public BindingFlags DefaultMembersSearchFlags
		{
			[Token(Token = "0x6000FBC")]
			[Address(RVA = "0x1837884", Offset = "0x1837884", VA = "0x1837884")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CAC0", Offset = "0xB4CAC0")]
			get
			{
				return default(BindingFlags);
			}
			[Token(Token = "0x6000FBD")]
			[Address(RVA = "0x183788C", Offset = "0x183788C", VA = "0x183788C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CAD0", Offset = "0xB4CAD0")]
			set
			{
			}
		}

		[Token(Token = "0x17000128")]
		public bool SerializeCompilerGeneratedMembers
		{
			[Token(Token = "0x6000FBE")]
			[Address(RVA = "0x1837894", Offset = "0x1837894", VA = "0x1837894")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CAE0", Offset = "0xB4CAE0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000FBF")]
			[Address(RVA = "0x183789C", Offset = "0x183789C", VA = "0x183789C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CAF0", Offset = "0xB4CAF0")]
			set
			{
			}
		}

		[Token(Token = "0x6000FC0")]
		[Address(RVA = "0x18378A8", Offset = "0x18378A8", VA = "0x18378A8")]
		public DefaultContractResolver()
		{
		}

		[Token(Token = "0x6000FC1")]
		[Address(RVA = "0x1837778", Offset = "0x1837778", VA = "0x1837778")]
		public DefaultContractResolver(bool shareCache)
		{
		}

		[Token(Token = "0x6000FC2")]
		[Address(RVA = "0x18378D8", Offset = "0x18378D8", VA = "0x18378D8")]
		private Dictionary<ResolverContractKey, JsonContract> GetCache()
		{
			return null;
		}

		[Token(Token = "0x6000FC3")]
		[Address(RVA = "0x1837958", Offset = "0x1837958", VA = "0x1837958")]
		private void UpdateCache(Dictionary<ResolverContractKey, JsonContract> cache)
		{
		}

		[Token(Token = "0x6000FC4")]
		[Address(RVA = "0x18379E4", Offset = "0x18379E4", VA = "0x18379E4", Slot = "5")]
		public virtual JsonContract ResolveContract(Type type)
		{
			return null;
		}

		[Token(Token = "0x6000FC5")]
		[Address(RVA = "0x1837C6C", Offset = "0x1837C6C", VA = "0x1837C6C", Slot = "6")]
		protected virtual List<MemberInfo> GetSerializableMembers(Type objectType)
		{
			return null;
		}

		[Token(Token = "0x6000FC6")]
		[Address(RVA = "0x18381B8", Offset = "0x18381B8", VA = "0x18381B8")]
		private bool ShouldSerializeEntityMember(MemberInfo memberInfo)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FC7")]
		[Address(RVA = "0x1838308", Offset = "0x1838308", VA = "0x1838308", Slot = "7")]
		protected virtual JsonObjectContract CreateObjectContract(Type objectType)
		{
			return null;
		}

		[Token(Token = "0x6000FC8")]
		[Address(RVA = "0x183890C", Offset = "0x183890C", VA = "0x183890C")]
		private ConstructorInfo GetAttributeConstructor(Type objectType)
		{
			return null;
		}

		[Token(Token = "0x6000FC9")]
		[Address(RVA = "0x1838C18", Offset = "0x1838C18", VA = "0x1838C18")]
		private ConstructorInfo GetParametrizedConstructor(Type objectType)
		{
			return null;
		}

		[Token(Token = "0x6000FCA")]
		[Address(RVA = "0x1838D84", Offset = "0x1838D84", VA = "0x1838D84", Slot = "8")]
		protected virtual IList<JsonProperty> CreateConstructorParameters(ConstructorInfo constructor, JsonPropertyCollection memberProperties)
		{
			return null;
		}

		[Token(Token = "0x6000FCB")]
		[Address(RVA = "0x1839230", Offset = "0x1839230", VA = "0x1839230", Slot = "9")]
		protected virtual JsonProperty CreatePropertyFromConstructorParameter(JsonProperty matchingMemberProperty, ParameterInfo parameterInfo)
		{
			return null;
		}

		[Token(Token = "0x6000FCC")]
		[Address(RVA = "0x1839A40", Offset = "0x1839A40", VA = "0x1839A40", Slot = "10")]
		protected virtual JsonConverter ResolveContractConverter(Type objectType)
		{
			return null;
		}

		[Token(Token = "0x6000FCD")]
		[Address(RVA = "0x1839AAC", Offset = "0x1839AAC", VA = "0x1839AAC")]
		private Func<object> GetDefaultCreator(Type createdType)
		{
			return null;
		}

		[Token(Token = "0x6000FCE")]
		[Address(RVA = "0x18386D8", Offset = "0x18386D8", VA = "0x18386D8")]
		private void InitializeContract(JsonContract contract)
		{
		}

		[Token(Token = "0x6000FCF")]
		[Address(RVA = "0x1839B88", Offset = "0x1839B88", VA = "0x1839B88")]
		private void ResolveCallbackMethods(JsonContract contract, Type t)
		{
		}

		[Token(Token = "0x6000FD0")]
		[Address(RVA = "0x1839D50", Offset = "0x1839D50", VA = "0x1839D50")]
		private void GetCallbackMethodsForType(Type type, out MethodInfo onSerializing, out MethodInfo onSerialized, out MethodInfo onDeserializing, out MethodInfo onDeserialized, out MethodInfo onError)
		{
		}

		[Token(Token = "0x6000FD1")]
		[Address(RVA = "0x183AD28", Offset = "0x183AD28", VA = "0x183AD28", Slot = "11")]
		protected virtual JsonDictionaryContract CreateDictionaryContract(Type objectType)
		{
			return null;
		}

		[Token(Token = "0x6000FD2")]
		[Address(RVA = "0x183B13C", Offset = "0x183B13C", VA = "0x183B13C", Slot = "12")]
		protected virtual JsonArrayContract CreateArrayContract(Type objectType)
		{
			return null;
		}

		[Token(Token = "0x6000FD3")]
		[Address(RVA = "0x183B550", Offset = "0x183B550", VA = "0x183B550", Slot = "13")]
		protected virtual JsonPrimitiveContract CreatePrimitiveContract(Type objectType)
		{
			return null;
		}

		[Token(Token = "0x6000FD4")]
		[Address(RVA = "0x183B5CC", Offset = "0x183B5CC", VA = "0x183B5CC", Slot = "14")]
		protected virtual JsonLinqContract CreateLinqContract(Type objectType)
		{
			return null;
		}

		[Token(Token = "0x6000FD5")]
		[Address(RVA = "0x183B648", Offset = "0x183B648", VA = "0x183B648", Slot = "15")]
		protected virtual JsonISerializableContract CreateISerializableContract(Type objectType)
		{
			return null;
		}

		[Token(Token = "0x6000FD6")]
		[Address(RVA = "0x183B928", Offset = "0x183B928", VA = "0x183B928", Slot = "16")]
		protected virtual JsonStringContract CreateStringContract(Type objectType)
		{
			return null;
		}

		[Token(Token = "0x6000FD7")]
		[Address(RVA = "0x183B9A4", Offset = "0x183B9A4", VA = "0x183B9A4", Slot = "17")]
		protected virtual JsonContract CreateContract(Type objectType)
		{
			return null;
		}

		[Token(Token = "0x6000FD8")]
		[Address(RVA = "0x183BC88", Offset = "0x183BC88", VA = "0x183BC88")]
		internal static bool CanConvertToString(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FD9")]
		[Address(RVA = "0x183A140", Offset = "0x183A140", VA = "0x183A140")]
		private static bool IsValidCallback(MethodInfo method, ParameterInfo[] parameters, Type attributeType, MethodInfo currentCallback, ref Type prevAttributeType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FDA")]
		[Address(RVA = "0x183BEC0", Offset = "0x183BEC0", VA = "0x183BEC0")]
		internal static string GetClrTypeFullName(Type type)
		{
			return null;
		}

		[Token(Token = "0x6000FDB")]
		[Address(RVA = "0x183C088", Offset = "0x183C088", VA = "0x183C088", Slot = "18")]
		protected virtual IList<JsonProperty> CreateProperties(Type type, MemberSerialization memberSerialization)
		{
			return null;
		}

		[Token(Token = "0x6000FDC")]
		[Address(RVA = "0x183C308", Offset = "0x183C308", VA = "0x183C308", Slot = "19")]
		protected virtual IValueProvider CreateMemberValueProvider(MemberInfo member)
		{
			return null;
		}

		[Token(Token = "0x6000FDD")]
		[Address(RVA = "0x183C36C", Offset = "0x183C36C", VA = "0x183C36C", Slot = "20")]
		protected virtual JsonProperty CreateProperty(MemberInfo member, MemberSerialization memberSerialization)
		{
			return null;
		}

		[Token(Token = "0x6000FDE")]
		[Address(RVA = "0x1839528", Offset = "0x1839528", VA = "0x1839528")]
		private void SetPropertySettingsFromAttributes(JsonProperty property, ICustomAttributeProvider attributeProvider, string name, Type declaringType, MemberSerialization memberSerialization, out bool allowNonPublicAccess, out bool hasExplicitAttribute)
		{
		}

		[Token(Token = "0x6000FDF")]
		[Address(RVA = "0x183C4FC", Offset = "0x183C4FC", VA = "0x183C4FC")]
		private Predicate<object> CreateShouldSerializeTest(MemberInfo member)
		{
			return null;
		}

		[Token(Token = "0x6000FE0")]
		[Address(RVA = "0x183C748", Offset = "0x183C748", VA = "0x183C748")]
		private void SetIsSpecifiedActions(JsonProperty property, MemberInfo member, bool allowNonPublicAccess)
		{
		}

		[Token(Token = "0x6000FE1")]
		[Address(RVA = "0x183CA50", Offset = "0x183CA50", VA = "0x183CA50", Slot = "21")]
		protected internal virtual string ResolvePropertyName(string propertyName)
		{
			return null;
		}
	}
	[Token(Token = "0x2000233")]
	internal class DefaultReferenceResolver : IReferenceResolver
	{
		[Token(Token = "0x4000BE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int _referenceCount;

		[Token(Token = "0x6000FE3")]
		[Address(RVA = "0x183CFC8", Offset = "0x183CFC8", VA = "0x183CFC8")]
		private BidirectionalDictionary<string, object> GetMappings(object context)
		{
			return null;
		}

		[Token(Token = "0x6000FE4")]
		[Address(RVA = "0x183D18C", Offset = "0x183D18C", VA = "0x183D18C", Slot = "4")]
		public object ResolveReference(object context, string reference)
		{
			return null;
		}

		[Token(Token = "0x6000FE5")]
		[Address(RVA = "0x183D210", Offset = "0x183D210", VA = "0x183D210", Slot = "5")]
		public string GetReference(object context, object value)
		{
			return null;
		}

		[Token(Token = "0x6000FE6")]
		[Address(RVA = "0x183D318", Offset = "0x183D318", VA = "0x183D318", Slot = "7")]
		public void AddReference(object context, string reference, object value)
		{
		}

		[Token(Token = "0x6000FE7")]
		[Address(RVA = "0x183D394", Offset = "0x183D394", VA = "0x183D394", Slot = "6")]
		public bool IsReferenced(object context, object value)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FE8")]
		[Address(RVA = "0x183D418", Offset = "0x183D418", VA = "0x183D418")]
		public DefaultReferenceResolver()
		{
		}
	}
	[Token(Token = "0x2000234")]
	public class DefaultSerializationBinder : SerializationBinder
	{
		[Token(Token = "0x200032A")]
		internal struct TypeNameKey
		{
			[Token(Token = "0x4000F0C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal readonly string AssemblyName;

			[Token(Token = "0x4000F0D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal readonly string TypeName;

			[Token(Token = "0x600162D")]
			[Address(RVA = "0xC3223C", Offset = "0xC3223C", VA = "0xC3223C")]
			public TypeNameKey(string assemblyName, string typeName)
			{
			}

			[Token(Token = "0x600162E")]
			[Address(RVA = "0xC32244", Offset = "0xC32244", VA = "0xC32244", Slot = "2")]
			public override int GetHashCode()
			{
				return default(int);
			}

			[Token(Token = "0x600162F")]
			[Address(RVA = "0xC3224C", Offset = "0xC3224C", VA = "0xC3224C", Slot = "0")]
			public override bool Equals(object obj)
			{
				return default(bool);
			}

			[Token(Token = "0x6001630")]
			[Address(RVA = "0xC32254", Offset = "0xC32254", VA = "0xC32254")]
			public bool Equals(TypeNameKey other)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4000BE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static readonly DefaultSerializationBinder Instance;

		[Token(Token = "0x4000BE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly ThreadSafeStore<TypeNameKey, Type> _typeCache;

		[Token(Token = "0x6000FE9")]
		[Address(RVA = "0x183D420", Offset = "0x183D420", VA = "0x183D420")]
		private static Type GetTypeFromTypeNameKey(TypeNameKey typeNameKey)
		{
			return null;
		}

		[Token(Token = "0x6000FEA")]
		[Address(RVA = "0x183D6E0", Offset = "0x183D6E0", VA = "0x183D6E0", Slot = "5")]
		public override Type BindToType(string assemblyName, string typeName)
		{
			return null;
		}

		[Token(Token = "0x6000FEB")]
		[Address(RVA = "0x183D760", Offset = "0x183D760", VA = "0x183D760")]
		public DefaultSerializationBinder()
		{
		}
	}
	[Token(Token = "0x2000235")]
	public class ErrorContext
	{
		[Token(Token = "0x4000BE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B348", Offset = "0xB4B348")]
		private Exception <Error>k__BackingField;

		[Token(Token = "0x4000BEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B358", Offset = "0xB4B358")]
		private object <OriginalObject>k__BackingField;

		[Token(Token = "0x4000BEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B368", Offset = "0xB4B368")]
		private object <Member>k__BackingField;

		[Token(Token = "0x4000BEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B378", Offset = "0xB4B378")]
		private bool <Handled>k__BackingField;

		[Token(Token = "0x17000129")]
		public Exception Error
		{
			[Token(Token = "0x6000FEE")]
			[Address(RVA = "0x183D9F4", Offset = "0x183D9F4", VA = "0x183D9F4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CB00", Offset = "0xB4CB00")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FEF")]
			[Address(RVA = "0x183D9EC", Offset = "0x183D9EC", VA = "0x183D9EC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CB10", Offset = "0xB4CB10")]
			private set
			{
			}
		}

		[Token(Token = "0x1700012A")]
		public object OriginalObject
		{
			[Token(Token = "0x6000FF0")]
			[Address(RVA = "0x183D9FC", Offset = "0x183D9FC", VA = "0x183D9FC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CB20", Offset = "0xB4CB20")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FF1")]
			[Address(RVA = "0x183D9DC", Offset = "0x183D9DC", VA = "0x183D9DC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CB30", Offset = "0xB4CB30")]
			private set
			{
			}
		}

		[Token(Token = "0x1700012B")]
		public object Member
		{
			[Token(Token = "0x6000FF2")]
			[Address(RVA = "0x183DA04", Offset = "0x183DA04", VA = "0x183DA04")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CB40", Offset = "0xB4CB40")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FF3")]
			[Address(RVA = "0x183D9E4", Offset = "0x183D9E4", VA = "0x183D9E4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CB50", Offset = "0xB4CB50")]
			private set
			{
			}
		}

		[Token(Token = "0x1700012C")]
		public bool Handled
		{
			[Token(Token = "0x6000FF4")]
			[Address(RVA = "0x183DA0C", Offset = "0x183DA0C", VA = "0x183DA0C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CB60", Offset = "0xB4CB60")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000FF5")]
			[Address(RVA = "0x183DA14", Offset = "0x183DA14", VA = "0x183DA14")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CB70", Offset = "0xB4CB70")]
			set
			{
			}
		}

		[Token(Token = "0x6000FED")]
		[Address(RVA = "0x183D99C", Offset = "0x183D99C", VA = "0x183D99C")]
		internal ErrorContext(object originalObject, object member, Exception error)
		{
		}
	}
	[Token(Token = "0x2000236")]
	public class ErrorEventArgs : EventArgs
	{
		[Token(Token = "0x4000BED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B388", Offset = "0xB4B388")]
		private object <CurrentObject>k__BackingField;

		[Token(Token = "0x4000BEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B398", Offset = "0xB4B398")]
		private ErrorContext <ErrorContext>k__BackingField;

		[Token(Token = "0x1700012D")]
		public object CurrentObject
		{
			[Token(Token = "0x6000FF6")]
			[Address(RVA = "0x183DA20", Offset = "0x183DA20", VA = "0x183DA20")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CB80", Offset = "0xB4CB80")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FF7")]
			[Address(RVA = "0x183DA28", Offset = "0x183DA28", VA = "0x183DA28")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CB90", Offset = "0xB4CB90")]
			private set
			{
			}
		}

		[Token(Token = "0x1700012E")]
		public ErrorContext ErrorContext
		{
			[Token(Token = "0x6000FF8")]
			[Address(RVA = "0x183DA30", Offset = "0x183DA30", VA = "0x183DA30")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CBA0", Offset = "0xB4CBA0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FF9")]
			[Address(RVA = "0x183DA38", Offset = "0x183DA38", VA = "0x183DA38")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CBB0", Offset = "0xB4CBB0")]
			private set
			{
			}
		}

		[Token(Token = "0x6000FFA")]
		[Address(RVA = "0x183DA40", Offset = "0x183DA40", VA = "0x183DA40")]
		public ErrorEventArgs(object currentObject, ErrorContext errorContext)
		{
		}
	}
	[Token(Token = "0x2000237")]
	public interface IContractResolver
	{
		[Token(Token = "0x6000FFB")]
		JsonContract ResolveContract(Type type);
	}
	[Token(Token = "0x2000238")]
	public interface IReferenceResolver
	{
		[Token(Token = "0x6000FFC")]
		object ResolveReference(object context, string reference);

		[Token(Token = "0x6000FFD")]
		string GetReference(object context, object value);

		[Token(Token = "0x6000FFE")]
		bool IsReferenced(object context, object value);

		[Token(Token = "0x6000FFF")]
		void AddReference(object context, string reference, object value);
	}
	[Token(Token = "0x2000239")]
	public interface IValueProvider
	{
		[Token(Token = "0x6001000")]
		void SetValue(object target, object value);

		[Token(Token = "0x6001001")]
		object GetValue(object target);
	}
	[Token(Token = "0x200023A")]
	public class JsonArrayContract : JsonContract
	{
		[Token(Token = "0x4000BEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B3A8", Offset = "0xB4B3A8")]
		private Type <CollectionItemType>k__BackingField;

		[Token(Token = "0x4000BF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B3B8", Offset = "0xB4B3B8")]
		private bool <IsMultidimensionalArray>k__BackingField;

		[Token(Token = "0x4000BF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
		private readonly bool _isCollectionItemTypeNullableType;

		[Token(Token = "0x4000BF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private readonly Type _genericCollectionDefinitionType;

		[Token(Token = "0x4000BF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Type _genericWrapperType;

		[Token(Token = "0x4000BF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private MethodCall<object, object> _genericWrapperCreator;

		[Token(Token = "0x1700012F")]
		internal Type CollectionItemType
		{
			[Token(Token = "0x6001002")]
			[Address(RVA = "0x183DAC0", Offset = "0x183DAC0", VA = "0x183DAC0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CBC0", Offset = "0xB4CBC0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001003")]
			[Address(RVA = "0x183DAC8", Offset = "0x183DAC8", VA = "0x183DAC8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CBD0", Offset = "0xB4CBD0")]
			private set
			{
			}
		}

		[Token(Token = "0x17000130")]
		public bool IsMultidimensionalArray
		{
			[Token(Token = "0x6001004")]
			[Address(RVA = "0x183DAD0", Offset = "0x183DAD0", VA = "0x183DAD0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CBE0", Offset = "0xB4CBE0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001005")]
			[Address(RVA = "0x183DAD8", Offset = "0x183DAD8", VA = "0x183DAD8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CBF0", Offset = "0xB4CBF0")]
			private set
			{
			}
		}

		[Token(Token = "0x6001006")]
		[Address(RVA = "0x183B1B4", Offset = "0x183B1B4", VA = "0x183B1B4")]
		public JsonArrayContract(Type underlyingType)
		{
		}

		[Token(Token = "0x6001007")]
		[Address(RVA = "0x183DCD0", Offset = "0x183DCD0", VA = "0x183DCD0")]
		internal IWrappedCollection CreateWrapper(object list)
		{
			return null;
		}

		[Token(Token = "0x6001008")]
		[Address(RVA = "0x183E218", Offset = "0x183E218", VA = "0x183E218")]
		private void EnsureGenericWrapperCreator()
		{
		}

		[Token(Token = "0x6001009")]
		[Address(RVA = "0x183DB58", Offset = "0x183DB58", VA = "0x183DB58")]
		private bool IsTypeGenericCollectionInterface(Type type)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200023B")]
	public abstract class JsonContract
	{
		[Token(Token = "0x4000BF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B3C8", Offset = "0xB4B3C8")]
		private Type <UnderlyingType>k__BackingField;

		[Token(Token = "0x4000BF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B3D8", Offset = "0xB4B3D8")]
		private Type <CreatedType>k__BackingField;

		[Token(Token = "0x4000BF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B3E8", Offset = "0xB4B3E8")]
		private bool? <IsReference>k__BackingField;

		[Token(Token = "0x4000BF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B3F8", Offset = "0xB4B3F8")]
		private JsonConverter <Converter>k__BackingField;

		[Token(Token = "0x4000BF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B408", Offset = "0xB4B408")]
		private JsonConverter <InternalConverter>k__BackingField;

		[Token(Token = "0x4000BFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B418", Offset = "0xB4B418")]
		private MethodInfo <OnDeserialized>k__BackingField;

		[Token(Token = "0x4000BFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B428", Offset = "0xB4B428")]
		private MethodInfo <OnDeserializing>k__BackingField;

		[Token(Token = "0x4000BFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B438", Offset = "0xB4B438")]
		private MethodInfo <OnSerialized>k__BackingField;

		[Token(Token = "0x4000BFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B448", Offset = "0xB4B448")]
		private MethodInfo <OnSerializing>k__BackingField;

		[Token(Token = "0x4000BFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B458", Offset = "0xB4B458")]
		private Func<object> <DefaultCreator>k__BackingField;

		[Token(Token = "0x4000BFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B468", Offset = "0xB4B468")]
		private bool <DefaultCreatorNonPublic>k__BackingField;

		[Token(Token = "0x4000C00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B478", Offset = "0xB4B478")]
		private MethodInfo <OnError>k__BackingField;

		[Token(Token = "0x17000131")]
		public Type UnderlyingType
		{
			[Token(Token = "0x600100A")]
			[Address(RVA = "0x18388FC", Offset = "0x18388FC", VA = "0x18388FC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CC00", Offset = "0xB4CC00")]
			get
			{
				return null;
			}
			[Token(Token = "0x600100B")]
			[Address(RVA = "0x183E598", Offset = "0x183E598", VA = "0x183E598")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CC10", Offset = "0xB4CC10")]
			private set
			{
			}
		}

		[Token(Token = "0x17000132")]
		public Type CreatedType
		{
			[Token(Token = "0x600100C")]
			[Address(RVA = "0x1839B6C", Offset = "0x1839B6C", VA = "0x1839B6C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CC20", Offset = "0xB4CC20")]
			get
			{
				return null;
			}
			[Token(Token = "0x600100D")]
			[Address(RVA = "0x183DCC8", Offset = "0x183DCC8", VA = "0x183DCC8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CC30", Offset = "0xB4CC30")]
			set
			{
			}
		}

		[Token(Token = "0x17000133")]
		public bool? IsReference
		{
			[Token(Token = "0x600100E")]
			[Address(RVA = "0x183E5A0", Offset = "0x183E5A0", VA = "0x183E5A0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CC40", Offset = "0xB4CC40")]
			get
			{
				return null;
			}
			[Token(Token = "0x600100F")]
			[Address(RVA = "0x1839B54", Offset = "0x1839B54", VA = "0x1839B54")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CC50", Offset = "0xB4CC50")]
			set
			{
			}
		}

		[Token(Token = "0x17000134")]
		public JsonConverter Converter
		{
			[Token(Token = "0x6001010")]
			[Address(RVA = "0x183E5A8", Offset = "0x183E5A8", VA = "0x183E5A8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CC60", Offset = "0xB4CC60")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001011")]
			[Address(RVA = "0x1839B5C", Offset = "0x1839B5C", VA = "0x1839B5C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CC70", Offset = "0xB4CC70")]
			set
			{
			}
		}

		[Token(Token = "0x17000135")]
		internal JsonConverter InternalConverter
		{
			[Token(Token = "0x6001012")]
			[Address(RVA = "0x183E5B0", Offset = "0x183E5B0", VA = "0x183E5B0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CC80", Offset = "0xB4CC80")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001013")]
			[Address(RVA = "0x1839B64", Offset = "0x1839B64", VA = "0x1839B64")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CC90", Offset = "0xB4CC90")]
			set
			{
			}
		}

		[Token(Token = "0x17000136")]
		public MethodInfo OnDeserialized
		{
			[Token(Token = "0x6001014")]
			[Address(RVA = "0x183E5B8", Offset = "0x183E5B8", VA = "0x183E5B8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CCA0", Offset = "0xB4CCA0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001015")]
			[Address(RVA = "0x183A130", Offset = "0x183A130", VA = "0x183A130")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CCB0", Offset = "0xB4CCB0")]
			set
			{
			}
		}

		[Token(Token = "0x17000137")]
		public MethodInfo OnDeserializing
		{
			[Token(Token = "0x6001016")]
			[Address(RVA = "0x183E5C0", Offset = "0x183E5C0", VA = "0x183E5C0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CCC0", Offset = "0xB4CCC0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001017")]
			[Address(RVA = "0x183A128", Offset = "0x183A128", VA = "0x183A128")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CCD0", Offset = "0xB4CCD0")]
			set
			{
			}
		}

		[Token(Token = "0x17000138")]
		public MethodInfo OnSerialized
		{
			[Token(Token = "0x6001018")]
			[Address(RVA = "0x183E5C8", Offset = "0x183E5C8", VA = "0x183E5C8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CCE0", Offset = "0xB4CCE0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001019")]
			[Address(RVA = "0x183A120", Offset = "0x183A120", VA = "0x183A120")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CCF0", Offset = "0xB4CCF0")]
			set
			{
			}
		}

		[Token(Token = "0x17000139")]
		public MethodInfo OnSerializing
		{
			[Token(Token = "0x600101A")]
			[Address(RVA = "0x183E5D0", Offset = "0x183E5D0", VA = "0x183E5D0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CD00", Offset = "0xB4CD00")]
			get
			{
				return null;
			}
			[Token(Token = "0x600101B")]
			[Address(RVA = "0x183A118", Offset = "0x183A118", VA = "0x183A118")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CD10", Offset = "0xB4CD10")]
			set
			{
			}
		}

		[Token(Token = "0x1700013A")]
		public Func<object> DefaultCreator
		{
			[Token(Token = "0x600101C")]
			[Address(RVA = "0x1838C08", Offset = "0x1838C08", VA = "0x1838C08")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CD20", Offset = "0xB4CD20")]
			get
			{
				return null;
			}
			[Token(Token = "0x600101D")]
			[Address(RVA = "0x1839B74", Offset = "0x1839B74", VA = "0x1839B74")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CD30", Offset = "0xB4CD30")]
			set
			{
			}
		}

		[Token(Token = "0x1700013B")]
		public bool DefaultCreatorNonPublic
		{
			[Token(Token = "0x600101E")]
			[Address(RVA = "0x1838C10", Offset = "0x1838C10", VA = "0x1838C10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CD40", Offset = "0xB4CD40")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600101F")]
			[Address(RVA = "0x1839B7C", Offset = "0x1839B7C", VA = "0x1839B7C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CD50", Offset = "0xB4CD50")]
			set
			{
			}
		}

		[Token(Token = "0x1700013C")]
		public MethodInfo OnError
		{
			[Token(Token = "0x6001020")]
			[Address(RVA = "0x183E5D8", Offset = "0x183E5D8", VA = "0x183E5D8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CD60", Offset = "0xB4CD60")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001021")]
			[Address(RVA = "0x183A138", Offset = "0x183A138", VA = "0x183A138")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CD70", Offset = "0xB4CD70")]
			set
			{
			}
		}

		[Token(Token = "0x6001022")]
		[Address(RVA = "0x183E5E0", Offset = "0x183E5E0", VA = "0x183E5E0")]
		internal void InvokeOnSerializing(object o, StreamingContext context)
		{
		}

		[Token(Token = "0x6001023")]
		[Address(RVA = "0x183E700", Offset = "0x183E700", VA = "0x183E700")]
		internal void InvokeOnSerialized(object o, StreamingContext context)
		{
		}

		[Token(Token = "0x6001024")]
		[Address(RVA = "0x183E820", Offset = "0x183E820", VA = "0x183E820")]
		internal void InvokeOnDeserializing(object o, StreamingContext context)
		{
		}

		[Token(Token = "0x6001025")]
		[Address(RVA = "0x183E940", Offset = "0x183E940", VA = "0x183E940")]
		internal void InvokeOnDeserialized(object o, StreamingContext context)
		{
		}

		[Token(Token = "0x6001026")]
		[Address(RVA = "0x183EA60", Offset = "0x183EA60", VA = "0x183EA60")]
		internal void InvokeOnError(object o, StreamingContext context, ErrorContext errorContext)
		{
		}

		[Token(Token = "0x6001027")]
		[Address(RVA = "0x183DAE4", Offset = "0x183DAE4", VA = "0x183DAE4")]
		internal JsonContract(Type underlyingType)
		{
		}
	}
	[Token(Token = "0x200023C")]
	public class JsonDictionaryContract : JsonContract
	{
		[Token(Token = "0x4000C01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B488", Offset = "0xB4B488")]
		private Func<string, string> <PropertyNameResolver>k__BackingField;

		[Token(Token = "0x4000C02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B498", Offset = "0xB4B498")]
		private Type <DictionaryKeyType>k__BackingField;

		[Token(Token = "0x4000C03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B4A8", Offset = "0xB4B4A8")]
		private Type <DictionaryValueType>k__BackingField;

		[Token(Token = "0x4000C04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private readonly bool _isDictionaryValueTypeNullableType;

		[Token(Token = "0x4000C05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private readonly Type _genericCollectionDefinitionType;

		[Token(Token = "0x4000C06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Type _genericWrapperType;

		[Token(Token = "0x4000C07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private MethodCall<object, object> _genericWrapperCreator;

		[Token(Token = "0x1700013D")]
		public Func<string, string> PropertyNameResolver
		{
			[Token(Token = "0x6001028")]
			[Address(RVA = "0x183EBCC", Offset = "0x183EBCC", VA = "0x183EBCC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CD80", Offset = "0xB4CD80")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001029")]
			[Address(RVA = "0x183B134", Offset = "0x183B134", VA = "0x183B134")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CD90", Offset = "0xB4CD90")]
			set
			{
			}
		}

		[Token(Token = "0x1700013E")]
		internal Type DictionaryKeyType
		{
			[Token(Token = "0x600102A")]
			[Address(RVA = "0x183EBD4", Offset = "0x183EBD4", VA = "0x183EBD4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CDA0", Offset = "0xB4CDA0")]
			get
			{
				return null;
			}
			[Token(Token = "0x600102B")]
			[Address(RVA = "0x183EBDC", Offset = "0x183EBDC", VA = "0x183EBDC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CDB0", Offset = "0xB4CDB0")]
			private set
			{
			}
		}

		[Token(Token = "0x1700013F")]
		internal Type DictionaryValueType
		{
			[Token(Token = "0x600102C")]
			[Address(RVA = "0x183EBE4", Offset = "0x183EBE4", VA = "0x183EBE4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CDC0", Offset = "0xB4CDC0")]
			get
			{
				return null;
			}
			[Token(Token = "0x600102D")]
			[Address(RVA = "0x183EBEC", Offset = "0x183EBEC", VA = "0x183EBEC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CDD0", Offset = "0xB4CDD0")]
			private set
			{
			}
		}

		[Token(Token = "0x600102E")]
		[Address(RVA = "0x183ADF0", Offset = "0x183ADF0", VA = "0x183ADF0")]
		public JsonDictionaryContract(Type underlyingType)
		{
		}

		[Token(Token = "0x600102F")]
		[Address(RVA = "0x183ECC8", Offset = "0x183ECC8", VA = "0x183ECC8")]
		internal IWrappedDictionary CreateWrapper(object dictionary)
		{
			return null;
		}

		[Token(Token = "0x6001030")]
		[Address(RVA = "0x183EBF4", Offset = "0x183EBF4", VA = "0x183EBF4")]
		private bool IsTypeGenericDictionaryInterface(Type type)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200023D")]
	internal class JsonFormatterConverter : IFormatterConverter
	{
		[Token(Token = "0x4000C08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly JsonSerializer _serializer;

		[Token(Token = "0x6001031")]
		[Address(RVA = "0x183F154", Offset = "0x183F154", VA = "0x183F154")]
		public JsonFormatterConverter(JsonSerializer serializer)
		{
		}

		[Token(Token = "0x6001032")]
		private T GetTokenValue<T>(object value)
		{
			return (T)null;
		}

		[Token(Token = "0x6001033")]
		[Address(RVA = "0x183F1C8", Offset = "0x183F1C8", VA = "0x183F1C8", Slot = "4")]
		public object Convert(object value, Type type)
		{
			return null;
		}

		[Token(Token = "0x6001034")]
		[Address(RVA = "0x183F2E0", Offset = "0x183F2E0", VA = "0x183F2E0", Slot = "10")]
		public object Convert(object value, TypeCode typeCode)
		{
			return null;
		}

		[Token(Token = "0x6001035")]
		[Address(RVA = "0x183F3F0", Offset = "0x183F3F0", VA = "0x183F3F0", Slot = "5")]
		public bool ToBoolean(object value)
		{
			return default(bool);
		}

		[Token(Token = "0x6001036")]
		[Address(RVA = "0x183F450", Offset = "0x183F450", VA = "0x183F450", Slot = "11")]
		public byte ToByte(object value)
		{
			return default(byte);
		}

		[Token(Token = "0x6001037")]
		[Address(RVA = "0x183F4B0", Offset = "0x183F4B0", VA = "0x183F4B0", Slot = "12")]
		public char ToChar(object value)
		{
			return default(char);
		}

		[Token(Token = "0x6001038")]
		[Address(RVA = "0x183F510", Offset = "0x183F510", VA = "0x183F510", Slot = "13")]
		public DateTime ToDateTime(object value)
		{
			return default(DateTime);
		}

		[Token(Token = "0x6001039")]
		[Address(RVA = "0x183F570", Offset = "0x183F570", VA = "0x183F570", Slot = "14")]
		public decimal ToDecimal(object value)
		{
			return default(decimal);
		}

		[Token(Token = "0x600103A")]
		[Address(RVA = "0x183F5D0", Offset = "0x183F5D0", VA = "0x183F5D0", Slot = "15")]
		public double ToDouble(object value)
		{
			return default(double);
		}

		[Token(Token = "0x600103B")]
		[Address(RVA = "0x183F630", Offset = "0x183F630", VA = "0x183F630", Slot = "16")]
		public short ToInt16(object value)
		{
			return default(short);
		}

		[Token(Token = "0x600103C")]
		[Address(RVA = "0x183F690", Offset = "0x183F690", VA = "0x183F690", Slot = "6")]
		public int ToInt32(object value)
		{
			return default(int);
		}

		[Token(Token = "0x600103D")]
		[Address(RVA = "0x183F6F0", Offset = "0x183F6F0", VA = "0x183F6F0", Slot = "7")]
		public long ToInt64(object value)
		{
			return default(long);
		}

		[Token(Token = "0x600103E")]
		[Address(RVA = "0x183F750", Offset = "0x183F750", VA = "0x183F750", Slot = "17")]
		public sbyte ToSByte(object value)
		{
			return default(sbyte);
		}

		[Token(Token = "0x600103F")]
		[Address(RVA = "0x183F7B0", Offset = "0x183F7B0", VA = "0x183F7B0", Slot = "8")]
		public float ToSingle(object value)
		{
			return default(float);
		}

		[Token(Token = "0x6001040")]
		[Address(RVA = "0x183F810", Offset = "0x183F810", VA = "0x183F810", Slot = "9")]
		public string ToString(object value)
		{
			return null;
		}

		[Token(Token = "0x6001041")]
		[Address(RVA = "0x183F870", Offset = "0x183F870", VA = "0x183F870", Slot = "18")]
		public ushort ToUInt16(object value)
		{
			return default(ushort);
		}

		[Token(Token = "0x6001042")]
		[Address(RVA = "0x183F8D0", Offset = "0x183F8D0", VA = "0x183F8D0", Slot = "19")]
		public uint ToUInt32(object value)
		{
			return default(uint);
		}

		[Token(Token = "0x6001043")]
		[Address(RVA = "0x183F930", Offset = "0x183F930", VA = "0x183F930", Slot = "20")]
		public ulong ToUInt64(object value)
		{
			return default(ulong);
		}
	}
	[Token(Token = "0x200023E")]
	public class JsonISerializableContract : JsonContract
	{
		[Token(Token = "0x4000C09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B4B8", Offset = "0xB4B4B8")]
		private ObjectConstructor<object> <ISerializableCreator>k__BackingField;

		[Token(Token = "0x17000140")]
		public ObjectConstructor<object> ISerializableCreator
		{
			[Token(Token = "0x6001044")]
			[Address(RVA = "0x183F990", Offset = "0x183F990", VA = "0x183F990")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CDE0", Offset = "0xB4CDE0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001045")]
			[Address(RVA = "0x183B920", Offset = "0x183B920", VA = "0x183B920")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CDF0", Offset = "0xB4CDF0")]
			set
			{
			}
		}

		[Token(Token = "0x6001046")]
		[Address(RVA = "0x183B914", Offset = "0x183B914", VA = "0x183B914")]
		public JsonISerializableContract(Type underlyingType)
		{
		}
	}
	[Token(Token = "0x200023F")]
	public class JsonLinqContract : JsonContract
	{
		[Token(Token = "0x6001047")]
		[Address(RVA = "0x183B644", Offset = "0x183B644", VA = "0x183B644")]
		public JsonLinqContract(Type underlyingType)
		{
		}
	}
	[Token(Token = "0x2000240")]
	public class JsonObjectContract : JsonContract
	{
		[Token(Token = "0x4000C0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B4C8", Offset = "0xB4B4C8")]
		private MemberSerialization <MemberSerialization>k__BackingField;

		[Token(Token = "0x4000C0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B4D8", Offset = "0xB4B4D8")]
		private JsonPropertyCollection <Properties>k__BackingField;

		[Token(Token = "0x4000C0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B4E8", Offset = "0xB4B4E8")]
		private JsonPropertyCollection <ConstructorParameters>k__BackingField;

		[Token(Token = "0x4000C0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B4F8", Offset = "0xB4B4F8")]
		private ConstructorInfo <OverrideConstructor>k__BackingField;

		[Token(Token = "0x4000C0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B508", Offset = "0xB4B508")]
		private ConstructorInfo <ParametrizedConstructor>k__BackingField;

		[Token(Token = "0x17000141")]
		public MemberSerialization MemberSerialization
		{
			[Token(Token = "0x6001048")]
			[Address(RVA = "0x1838904", Offset = "0x1838904", VA = "0x1838904")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CE00", Offset = "0xB4CE00")]
			get
			{
				return default(MemberSerialization);
			}
			[Token(Token = "0x6001049")]
			[Address(RVA = "0x18388EC", Offset = "0x18388EC", VA = "0x18388EC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CE10", Offset = "0xB4CE10")]
			set
			{
			}
		}

		[Token(Token = "0x17000142")]
		public JsonPropertyCollection Properties
		{
			[Token(Token = "0x600104A")]
			[Address(RVA = "0x18388F4", Offset = "0x18388F4", VA = "0x18388F4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CE20", Offset = "0xB4CE20")]
			get
			{
				return null;
			}
			[Token(Token = "0x600104B")]
			[Address(RVA = "0x183F998", Offset = "0x183F998", VA = "0x183F998")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CE30", Offset = "0xB4CE30")]
			private set
			{
			}
		}

		[Token(Token = "0x17000143")]
		public JsonPropertyCollection ConstructorParameters
		{
			[Token(Token = "0x600104C")]
			[Address(RVA = "0x1838C00", Offset = "0x1838C00", VA = "0x1838C00")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CE40", Offset = "0xB4CE40")]
			get
			{
				return null;
			}
			[Token(Token = "0x600104D")]
			[Address(RVA = "0x183F9A0", Offset = "0x183F9A0", VA = "0x183F9A0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CE50", Offset = "0xB4CE50")]
			private set
			{
			}
		}

		[Token(Token = "0x17000144")]
		public ConstructorInfo OverrideConstructor
		{
			[Token(Token = "0x600104E")]
			[Address(RVA = "0x183F9A8", Offset = "0x183F9A8", VA = "0x183F9A8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CE60", Offset = "0xB4CE60")]
			get
			{
				return null;
			}
			[Token(Token = "0x600104F")]
			[Address(RVA = "0x1838BF8", Offset = "0x1838BF8", VA = "0x1838BF8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CE70", Offset = "0xB4CE70")]
			set
			{
			}
		}

		[Token(Token = "0x17000145")]
		public ConstructorInfo ParametrizedConstructor
		{
			[Token(Token = "0x6001050")]
			[Address(RVA = "0x183F9B0", Offset = "0x183F9B0", VA = "0x183F9B0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CE80", Offset = "0xB4CE80")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001051")]
			[Address(RVA = "0x1838D7C", Offset = "0x1838D7C", VA = "0x1838D7C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CE90", Offset = "0xB4CE90")]
			set
			{
			}
		}

		[Token(Token = "0x6001052")]
		[Address(RVA = "0x1838640", Offset = "0x1838640", VA = "0x1838640")]
		public JsonObjectContract(Type underlyingType)
		{
		}
	}
	[Token(Token = "0x2000241")]
	public class JsonPrimitiveContract : JsonContract
	{
		[Token(Token = "0x6001053")]
		[Address(RVA = "0x183B5C8", Offset = "0x183B5C8", VA = "0x183B5C8")]
		public JsonPrimitiveContract(Type underlyingType)
		{
		}
	}
	[Token(Token = "0x2000242")]
	public class JsonProperty
	{
		[Token(Token = "0x4000C0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B518", Offset = "0xB4B518")]
		private string <PropertyName>k__BackingField;

		[Token(Token = "0x4000C10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B528", Offset = "0xB4B528")]
		private int? <Order>k__BackingField;

		[Token(Token = "0x4000C11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B538", Offset = "0xB4B538")]
		private string <UnderlyingName>k__BackingField;

		[Token(Token = "0x4000C12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B548", Offset = "0xB4B548")]
		private IValueProvider <ValueProvider>k__BackingField;

		[Token(Token = "0x4000C13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B558", Offset = "0xB4B558")]
		private Type <PropertyType>k__BackingField;

		[Token(Token = "0x4000C14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B568", Offset = "0xB4B568")]
		private JsonConverter <Converter>k__BackingField;

		[Token(Token = "0x4000C15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B578", Offset = "0xB4B578")]
		private JsonConverter <MemberConverter>k__BackingField;

		[Token(Token = "0x4000C16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B588", Offset = "0xB4B588")]
		private bool <Ignored>k__BackingField;

		[Token(Token = "0x4000C17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B598", Offset = "0xB4B598")]
		private bool <Readable>k__BackingField;

		[Token(Token = "0x4000C18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B5A8", Offset = "0xB4B5A8")]
		private bool <Writable>k__BackingField;

		[Token(Token = "0x4000C19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B5B8", Offset = "0xB4B5B8")]
		private object <DefaultValue>k__BackingField;

		[Token(Token = "0x4000C1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B5C8", Offset = "0xB4B5C8")]
		private Required <Required>k__BackingField;

		[Token(Token = "0x4000C1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B5D8", Offset = "0xB4B5D8")]
		private bool? <IsReference>k__BackingField;

		[Token(Token = "0x4000C1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B5E8", Offset = "0xB4B5E8")]
		private NullValueHandling? <NullValueHandling>k__BackingField;

		[Token(Token = "0x4000C1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B5F8", Offset = "0xB4B5F8")]
		private DefaultValueHandling? <DefaultValueHandling>k__BackingField;

		[Token(Token = "0x4000C1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B608", Offset = "0xB4B608")]
		private ReferenceLoopHandling? <ReferenceLoopHandling>k__BackingField;

		[Token(Token = "0x4000C1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B618", Offset = "0xB4B618")]
		private ObjectCreationHandling? <ObjectCreationHandling>k__BackingField;

		[Token(Token = "0x4000C20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B628", Offset = "0xB4B628")]
		private TypeNameHandling? <TypeNameHandling>k__BackingField;

		[Token(Token = "0x4000C21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B638", Offset = "0xB4B638")]
		private Predicate<object> <ShouldSerialize>k__BackingField;

		[Token(Token = "0x4000C22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B648", Offset = "0xB4B648")]
		private Predicate<object> <GetIsSpecified>k__BackingField;

		[Token(Token = "0x4000C23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B658", Offset = "0xB4B658")]
		private Action<object, object> <SetIsSpecified>k__BackingField;

		[Token(Token = "0x17000146")]
		public string PropertyName
		{
			[Token(Token = "0x6001054")]
			[Address(RVA = "0x1839990", Offset = "0x1839990", VA = "0x1839990")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CEA0", Offset = "0xB4CEA0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001055")]
			[Address(RVA = "0x1839998", Offset = "0x1839998", VA = "0x1839998")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CEB0", Offset = "0xB4CEB0")]
			set
			{
			}
		}

		[Token(Token = "0x17000147")]
		public int? Order
		{
			[Token(Token = "0x6001056")]
			[Address(RVA = "0x183CE24", Offset = "0x183CE24", VA = "0x183CE24")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CEC0", Offset = "0xB4CEC0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001057")]
			[Address(RVA = "0x183CA1C", Offset = "0x183CA1C", VA = "0x183CA1C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CED0", Offset = "0xB4CED0")]
			set
			{
			}
		}

		[Token(Token = "0x17000148")]
		public string UnderlyingName
		{
			[Token(Token = "0x6001058")]
			[Address(RVA = "0x183F9B8", Offset = "0x183F9B8", VA = "0x183F9B8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CEE0", Offset = "0xB4CEE0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001059")]
			[Address(RVA = "0x183CA14", Offset = "0x183CA14", VA = "0x183CA14")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CEF0", Offset = "0xB4CEF0")]
			set
			{
			}
		}

		[Token(Token = "0x17000149")]
		public IValueProvider ValueProvider
		{
			[Token(Token = "0x600105A")]
			[Address(RVA = "0x183F9C0", Offset = "0x183F9C0", VA = "0x183F9C0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CF00", Offset = "0xB4CF00")]
			get
			{
				return null;
			}
			[Token(Token = "0x600105B")]
			[Address(RVA = "0x183C4F4", Offset = "0x183C4F4", VA = "0x183C4F4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CF10", Offset = "0xB4CF10")]
			set
			{
			}
		}

		[Token(Token = "0x1700014A")]
		public Type PropertyType
		{
			[Token(Token = "0x600105C")]
			[Address(RVA = "0x183902C", Offset = "0x183902C", VA = "0x183902C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CF20", Offset = "0xB4CF20")]
			get
			{
				return null;
			}
			[Token(Token = "0x600105D")]
			[Address(RVA = "0x1839520", Offset = "0x1839520", VA = "0x1839520")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CF30", Offset = "0xB4CF30")]
			set
			{
			}
		}

		[Token(Token = "0x1700014B")]
		public JsonConverter Converter
		{
			[Token(Token = "0x600105E")]
			[Address(RVA = "0x18399A0", Offset = "0x18399A0", VA = "0x18399A0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CF40", Offset = "0xB4CF40")]
			get
			{
				return null;
			}
			[Token(Token = "0x600105F")]
			[Address(RVA = "0x18399A8", Offset = "0x18399A8", VA = "0x18399A8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CF50", Offset = "0xB4CF50")]
			set
			{
			}
		}

		[Token(Token = "0x1700014C")]
		public JsonConverter MemberConverter
		{
			[Token(Token = "0x6001060")]
			[Address(RVA = "0x18399B0", Offset = "0x18399B0", VA = "0x18399B0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CF60", Offset = "0xB4CF60")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001061")]
			[Address(RVA = "0x18399B8", Offset = "0x18399B8", VA = "0x18399B8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CF70", Offset = "0xB4CF70")]
			set
			{
			}
		}

		[Token(Token = "0x1700014D")]
		public bool Ignored
		{
			[Token(Token = "0x6001062")]
			[Address(RVA = "0x183F9C8", Offset = "0x183F9C8", VA = "0x183F9C8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CF80", Offset = "0xB4CF80")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001063")]
			[Address(RVA = "0x183CA24", Offset = "0x183CA24", VA = "0x183CA24")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CF90", Offset = "0xB4CF90")]
			set
			{
			}
		}

		[Token(Token = "0x1700014E")]
		public bool Readable
		{
			[Token(Token = "0x6001064")]
			[Address(RVA = "0x183F9D0", Offset = "0x183F9D0", VA = "0x183F9D0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CFA0", Offset = "0xB4CFA0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001065")]
			[Address(RVA = "0x1839978", Offset = "0x1839978", VA = "0x1839978")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CFB0", Offset = "0xB4CFB0")]
			set
			{
			}
		}

		[Token(Token = "0x1700014F")]
		public bool Writable
		{
			[Token(Token = "0x6001066")]
			[Address(RVA = "0x183F9D8", Offset = "0x183F9D8", VA = "0x183F9D8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CFC0", Offset = "0xB4CFC0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001067")]
			[Address(RVA = "0x1839984", Offset = "0x1839984", VA = "0x1839984")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CFD0", Offset = "0xB4CFD0")]
			set
			{
			}
		}

		[Token(Token = "0x17000150")]
		public object DefaultValue
		{
			[Token(Token = "0x6001068")]
			[Address(RVA = "0x18399C0", Offset = "0x18399C0", VA = "0x18399C0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CFE0", Offset = "0xB4CFE0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001069")]
			[Address(RVA = "0x18399C8", Offset = "0x18399C8", VA = "0x18399C8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CFF0", Offset = "0xB4CFF0")]
			set
			{
			}
		}

		[Token(Token = "0x17000151")]
		public Required Required
		{
			[Token(Token = "0x600106A")]
			[Address(RVA = "0x18399D0", Offset = "0x18399D0", VA = "0x18399D0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D000", Offset = "0xB4D000")]
			get
			{
				return default(Required);
			}
			[Token(Token = "0x600106B")]
			[Address(RVA = "0x18399D8", Offset = "0x18399D8", VA = "0x18399D8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D010", Offset = "0xB4D010")]
			set
			{
			}
		}

		[Token(Token = "0x17000152")]
		public bool? IsReference
		{
			[Token(Token = "0x600106C")]
			[Address(RVA = "0x18399E0", Offset = "0x18399E0", VA = "0x18399E0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D020", Offset = "0xB4D020")]
			get
			{
				return null;
			}
			[Token(Token = "0x600106D")]
			[Address(RVA = "0x18399E8", Offset = "0x18399E8", VA = "0x18399E8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D030", Offset = "0xB4D030")]
			set
			{
			}
		}

		[Token(Token = "0x17000153")]
		public NullValueHandling? NullValueHandling
		{
			[Token(Token = "0x600106E")]
			[Address(RVA = "0x18399F0", Offset = "0x18399F0", VA = "0x18399F0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D040", Offset = "0xB4D040")]
			get
			{
				return null;
			}
			[Token(Token = "0x600106F")]
			[Address(RVA = "0x18399F8", Offset = "0x18399F8", VA = "0x18399F8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D050", Offset = "0xB4D050")]
			set
			{
			}
		}

		[Token(Token = "0x17000154")]
		public DefaultValueHandling? DefaultValueHandling
		{
			[Token(Token = "0x6001070")]
			[Address(RVA = "0x1839A00", Offset = "0x1839A00", VA = "0x1839A00")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D060", Offset = "0xB4D060")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001071")]
			[Address(RVA = "0x1839A08", Offset = "0x1839A08", VA = "0x1839A08")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D070", Offset = "0xB4D070")]
			set
			{
			}
		}

		[Token(Token = "0x17000155")]
		public ReferenceLoopHandling? ReferenceLoopHandling
		{
			[Token(Token = "0x6001072")]
			[Address(RVA = "0x1839A10", Offset = "0x1839A10", VA = "0x1839A10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D080", Offset = "0xB4D080")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001073")]
			[Address(RVA = "0x1839A18", Offset = "0x1839A18", VA = "0x1839A18")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D090", Offset = "0xB4D090")]
			set
			{
			}
		}

		[Token(Token = "0x17000156")]
		public ObjectCreationHandling? ObjectCreationHandling
		{
			[Token(Token = "0x6001074")]
			[Address(RVA = "0x1839A20", Offset = "0x1839A20", VA = "0x1839A20")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D0A0", Offset = "0xB4D0A0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001075")]
			[Address(RVA = "0x1839A28", Offset = "0x1839A28", VA = "0x1839A28")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D0B0", Offset = "0xB4D0B0")]
			set
			{
			}
		}

		[Token(Token = "0x17000157")]
		public TypeNameHandling? TypeNameHandling
		{
			[Token(Token = "0x6001076")]
			[Address(RVA = "0x1839A30", Offset = "0x1839A30", VA = "0x1839A30")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D0C0", Offset = "0xB4D0C0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001077")]
			[Address(RVA = "0x1839A38", Offset = "0x1839A38", VA = "0x1839A38")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D0D0", Offset = "0xB4D0D0")]
			set
			{
			}
		}

		[Token(Token = "0x17000158")]
		public Predicate<object> ShouldSerialize
		{
			[Token(Token = "0x6001078")]
			[Address(RVA = "0x183F9E0", Offset = "0x183F9E0", VA = "0x183F9E0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D0E0", Offset = "0xB4D0E0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001079")]
			[Address(RVA = "0x183C740", Offset = "0x183C740", VA = "0x183C740")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D0F0", Offset = "0xB4D0F0")]
			set
			{
			}
		}

		[Token(Token = "0x17000159")]
		public Predicate<object> GetIsSpecified
		{
			[Token(Token = "0x600107A")]
			[Address(RVA = "0x183F9E8", Offset = "0x183F9E8", VA = "0x183F9E8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D100", Offset = "0xB4D100")]
			get
			{
				return null;
			}
			[Token(Token = "0x600107B")]
			[Address(RVA = "0x183CA40", Offset = "0x183CA40", VA = "0x183CA40")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D110", Offset = "0xB4D110")]
			set
			{
			}
		}

		[Token(Token = "0x1700015A")]
		public Action<object, object> SetIsSpecified
		{
			[Token(Token = "0x600107C")]
			[Address(RVA = "0x183F9F0", Offset = "0x183F9F0", VA = "0x183F9F0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D120", Offset = "0xB4D120")]
			get
			{
				return null;
			}
			[Token(Token = "0x600107D")]
			[Address(RVA = "0x183CA48", Offset = "0x183CA48", VA = "0x183CA48")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D130", Offset = "0xB4D130")]
			set
			{
			}
		}

		[Token(Token = "0x600107E")]
		[Address(RVA = "0x183F9F8", Offset = "0x183F9F8", VA = "0x183F9F8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x600107F")]
		[Address(RVA = "0x1839518", Offset = "0x1839518", VA = "0x1839518")]
		public JsonProperty()
		{
		}
	}
	[Token(Token = "0x2000243")]
	public class JsonPropertyCollection : KeyedCollection<string, JsonProperty>
	{
		[Token(Token = "0x4000C24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly Type _type;

		[Token(Token = "0x6001080")]
		[Address(RVA = "0x1838F6C", Offset = "0x1838F6C", VA = "0x1838F6C")]
		public JsonPropertyCollection(Type type)
		{
		}

		[Token(Token = "0x6001081")]
		[Address(RVA = "0x183FA00", Offset = "0x183FA00", VA = "0x183FA00", Slot = "39")]
		protected override string GetKeyForItem(JsonProperty item)
		{
			return null;
		}

		[Token(Token = "0x6001082")]
		[Address(RVA = "0x1839034", Offset = "0x1839034", VA = "0x1839034")]
		public void AddProperty(JsonProperty property)
		{
		}

		[Token(Token = "0x6001083")]
		[Address(RVA = "0x1838FE8", Offset = "0x1838FE8", VA = "0x1838FE8")]
		public JsonProperty GetClosestMatchProperty(string propertyName)
		{
			return null;
		}

		[Token(Token = "0x6001084")]
		[Address(RVA = "0x183FA2C", Offset = "0x183FA2C", VA = "0x183FA2C")]
		public JsonProperty GetProperty(string propertyName, StringComparison comparisonType)
		{
			return null;
		}
	}
	[Token(Token = "0x2000244")]
	internal abstract class JsonSerializerInternalBase
	{
		[Token(Token = "0x200032B")]
		private class ReferenceEqualsEqualityComparer : IEqualityComparer<object>
		{
			[Token(Token = "0x6001631")]
			[Address(RVA = "0x183FFF8", Offset = "0x183FFF8", VA = "0x183FFF8", Slot = "4")]
			private bool System.Collections.Generic.IEqualityComparer<System.Object>.Equals(object x, object y)
			{
				return default(bool);
			}

			[Token(Token = "0x6001632")]
			[Address(RVA = "0x1840004", Offset = "0x1840004", VA = "0x1840004", Slot = "5")]
			private int System.Collections.Generic.IEqualityComparer<System.Object>.GetHashCode(object obj)
			{
				return default(int);
			}

			[Token(Token = "0x6001633")]
			[Address(RVA = "0x183FD44", Offset = "0x183FD44", VA = "0x183FD44")]
			public ReferenceEqualsEqualityComparer()
			{
			}
		}

		[Token(Token = "0x4000C25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private ErrorContext _currentErrorContext;

		[Token(Token = "0x4000C26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private BidirectionalDictionary<string, object> _mappings;

		[Token(Token = "0x4000C27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B668", Offset = "0xB4B668")]
		private JsonSerializer <Serializer>k__BackingField;

		[Token(Token = "0x1700015B")]
		internal JsonSerializer Serializer
		{
			[Token(Token = "0x6001085")]
			[Address(RVA = "0x183FCC0", Offset = "0x183FCC0", VA = "0x183FCC0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D140", Offset = "0xB4D140")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001086")]
			[Address(RVA = "0x183FCC8", Offset = "0x183FCC8", VA = "0x183FCC8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D150", Offset = "0xB4D150")]
			private set
			{
			}
		}

		[Token(Token = "0x1700015C")]
		internal BidirectionalDictionary<string, object> DefaultReferenceMappings
		{
			[Token(Token = "0x6001088")]
			[Address(RVA = "0x183D0D4", Offset = "0x183D0D4", VA = "0x183D0D4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001087")]
		[Address(RVA = "0x183FCD0", Offset = "0x183FCD0", VA = "0x183FCD0")]
		protected JsonSerializerInternalBase(JsonSerializer serializer)
		{
		}

		[Token(Token = "0x6001089")]
		[Address(RVA = "0x183FD4C", Offset = "0x183FD4C", VA = "0x183FD4C")]
		protected ErrorContext GetErrorContext(object currentObject, object member, Exception error)
		{
			return null;
		}

		[Token(Token = "0x600108A")]
		[Address(RVA = "0x183FE38", Offset = "0x183FE38", VA = "0x183FE38")]
		protected void ClearErrorContext()
		{
		}

		[Token(Token = "0x600108B")]
		[Address(RVA = "0x183FEC8", Offset = "0x183FEC8", VA = "0x183FEC8")]
		protected bool IsErrorHandled(object currentObject, JsonContract contract, object keyValue, Exception ex)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000245")]
	internal class JsonSerializerInternalReader : JsonSerializerInternalBase
	{
		[Token(Token = "0x200032C")]
		internal enum PropertyPresence
		{
			[Token(Token = "0x4000F0F")]
			None,
			[Token(Token = "0x4000F10")]
			Null,
			[Token(Token = "0x4000F11")]
			Value
		}

		[Token(Token = "0x200032D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49DEC", Offset = "0xB49DEC")]
		private sealed class <>c__DisplayClass27_0
		{
			[Token(Token = "0x4000F12")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string reference;

			[Token(Token = "0x4000F13")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public JsonArrayContract contract;

			[Token(Token = "0x4000F14")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public JsonSerializerInternalReader <>4__this;

			[Token(Token = "0x4000F15")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public JsonReader reader;

			[Token(Token = "0x6001634")]
			[Address(RVA = "0x1845D14", Offset = "0x1845D14", VA = "0x1845D14")]
			public <>c__DisplayClass27_0()
			{
			}

			[Token(Token = "0x6001635")]
			[Address(RVA = "0x1848160", Offset = "0x1848160", VA = "0x1848160")]
			internal void <CreateAndPopulateList>b__0(IList l, bool isTemporaryListReference)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200032E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49DFC", Offset = "0xB49DFC")]
		private sealed class <>c
		{
			[Token(Token = "0x4000F16")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000F17")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<ParameterInfo, ParameterInfo> <>9__33_0;

			[Token(Token = "0x4000F18")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<ParameterInfo, object> <>9__33_1;

			[Token(Token = "0x4000F19")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public static Func<KeyValuePair<ParameterInfo, object>, string> <>9__33_2;

			[Token(Token = "0x4000F1A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public static Func<JsonProperty, JsonProperty> <>9__36_0;

			[Token(Token = "0x4000F1B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public static Func<JsonProperty, PropertyPresence> <>9__36_1;

			[Token(Token = "0x6001637")]
			[Address(RVA = "0x18480C0", Offset = "0x18480C0", VA = "0x18480C0")]
			public <>c()
			{
			}

			[Token(Token = "0x6001638")]
			[Address(RVA = "0x18480C8", Offset = "0x18480C8", VA = "0x18480C8")]
			internal ParameterInfo <CreateObjectFromNonDefaultConstructor>b__33_0(ParameterInfo p)
			{
				return null;
			}

			[Token(Token = "0x6001639")]
			[Address(RVA = "0x18480D0", Offset = "0x18480D0", VA = "0x18480D0")]
			internal object <CreateObjectFromNonDefaultConstructor>b__33_1(ParameterInfo p)
			{
				return null;
			}

			[Token(Token = "0x600163A")]
			[Address(RVA = "0x18480D8", Offset = "0x18480D8", VA = "0x18480D8")]
			internal string <CreateObjectFromNonDefaultConstructor>b__33_2(KeyValuePair<ParameterInfo, object> kv)
			{
				return null;
			}

			[Token(Token = "0x600163B")]
			[Address(RVA = "0x1848150", Offset = "0x1848150", VA = "0x1848150")]
			internal JsonProperty <PopulateObject>b__36_0(JsonProperty m)
			{
				return null;
			}

			[Token(Token = "0x600163C")]
			[Address(RVA = "0x1848158", Offset = "0x1848158", VA = "0x1848158")]
			internal PropertyPresence <PopulateObject>b__36_1(JsonProperty m)
			{
				return default(PropertyPresence);
			}
		}

		[Token(Token = "0x4000C28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private JsonSerializerProxy _internalSerializer;

		[Token(Token = "0x4000C29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private JsonFormatterConverter _formatterConverter;

		[Token(Token = "0x600108C")]
		[Address(RVA = "0x1840010", Offset = "0x1840010", VA = "0x1840010")]
		public JsonSerializerInternalReader(JsonSerializer serializer)
		{
		}

		[Token(Token = "0x600108D")]
		[Address(RVA = "0x1840014", Offset = "0x1840014", VA = "0x1840014")]
		public void Populate(JsonReader reader, object target)
		{
		}

		[Token(Token = "0x600108E")]
		[Address(RVA = "0x1842344", Offset = "0x1842344", VA = "0x1842344")]
		private JsonContract GetContractSafe(Type type)
		{
			return null;
		}

		[Token(Token = "0x600108F")]
		[Address(RVA = "0x1842470", Offset = "0x1842470", VA = "0x1842470")]
		private JsonContract GetContractSafe(Type type, object value)
		{
			return null;
		}

		[Token(Token = "0x6001090")]
		[Address(RVA = "0x1842588", Offset = "0x1842588", VA = "0x1842588")]
		public object Deserialize(JsonReader reader, Type objectType)
		{
			return null;
		}

		[Token(Token = "0x6001091")]
		[Address(RVA = "0x18429E4", Offset = "0x18429E4", VA = "0x18429E4")]
		private JsonSerializerProxy GetInternalSerializer()
		{
			return null;
		}

		[Token(Token = "0x6001092")]
		[Address(RVA = "0x1842A54", Offset = "0x1842A54", VA = "0x1842A54")]
		private JsonFormatterConverter GetFormatterConverter()
		{
			return null;
		}

		[Token(Token = "0x6001093")]
		[Address(RVA = "0x1842AD8", Offset = "0x1842AD8", VA = "0x1842AD8")]
		private JToken CreateJToken(JsonReader reader, JsonContract contract)
		{
			return null;
		}

		[Token(Token = "0x6001094")]
		[Address(RVA = "0x1842CAC", Offset = "0x1842CAC", VA = "0x1842CAC")]
		private JToken CreateJObject(JsonReader reader)
		{
			return null;
		}

		[Token(Token = "0x6001095")]
		[Address(RVA = "0x1842E6C", Offset = "0x1842E6C", VA = "0x1842E6C")]
		private object CreateValueProperty(JsonReader reader, JsonProperty property, object target, bool gottenCurrentValue, object currentValue)
		{
			return null;
		}

		[Token(Token = "0x6001096")]
		[Address(RVA = "0x1842934", Offset = "0x1842934", VA = "0x1842934")]
		private object CreateValueNonProperty(JsonReader reader, Type objectType, JsonContract contract)
		{
			return null;
		}

		[Token(Token = "0x6001097")]
		[Address(RVA = "0x18430C4", Offset = "0x18430C4", VA = "0x18430C4")]
		private object CreateValueInternal(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, object existingValue)
		{
			return null;
		}

		[Token(Token = "0x6001098")]
		[Address(RVA = "0x184304C", Offset = "0x184304C", VA = "0x184304C")]
		private JsonConverter GetConverter(JsonContract contract, JsonConverter memberConverter)
		{
			return null;
		}

		[Token(Token = "0x6001099")]
		[Address(RVA = "0x18436A4", Offset = "0x18436A4", VA = "0x18436A4")]
		private object CreateObject(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, object existingValue)
		{
			return null;
		}

		[Token(Token = "0x600109A")]
		[Address(RVA = "0x184531C", Offset = "0x184531C", VA = "0x184531C")]
		private JsonArrayContract EnsureArrayContract(Type objectType, JsonContract contract)
		{
			return null;
		}

		[Token(Token = "0x600109B")]
		[Address(RVA = "0x1840C38", Offset = "0x1840C38", VA = "0x1840C38")]
		private void CheckedRead(JsonReader reader)
		{
		}

		[Token(Token = "0x600109C")]
		[Address(RVA = "0x18442E0", Offset = "0x18442E0", VA = "0x18442E0")]
		private object CreateList(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, object existingValue, string reference)
		{
			return null;
		}

		[Token(Token = "0x600109D")]
		[Address(RVA = "0x18446A8", Offset = "0x18446A8", VA = "0x18446A8")]
		private bool HasDefinedType(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x600109E")]
		[Address(RVA = "0x184442C", Offset = "0x184442C", VA = "0x184442C")]
		private object EnsureType(object value, CultureInfo culture, Type targetType)
		{
			return null;
		}

		[Token(Token = "0x600109F")]
		[Address(RVA = "0x1845610", Offset = "0x1845610", VA = "0x1845610")]
		private string FormatValueForPrint(object value)
		{
			return null;
		}

		[Token(Token = "0x60010A0")]
		[Address(RVA = "0x18456B0", Offset = "0x18456B0", VA = "0x18456B0")]
		private void SetPropertyValue(JsonProperty property, JsonReader reader, object target)
		{
		}

		[Token(Token = "0x60010A1")]
		[Address(RVA = "0x1845B68", Offset = "0x1845B68", VA = "0x1845B68")]
		private bool HasFlag(DefaultValueHandling value, DefaultValueHandling flag)
		{
			return default(bool);
		}

		[Token(Token = "0x60010A2")]
		[Address(RVA = "0x1845B74", Offset = "0x1845B74", VA = "0x1845B74")]
		private bool ShouldSetPropertyValue(JsonProperty property, object value)
		{
			return default(bool);
		}

		[Token(Token = "0x60010A3")]
		[Address(RVA = "0x18447CC", Offset = "0x18447CC", VA = "0x18447CC")]
		private object CreateAndPopulateDictionary(JsonReader reader, JsonDictionaryContract contract, string id)
		{
			return null;
		}

		[Token(Token = "0x60010A4")]
		[Address(RVA = "0x1840CDC", Offset = "0x1840CDC", VA = "0x1840CDC")]
		private object PopulateDictionary(IWrappedDictionary dictionary, JsonReader reader, JsonDictionaryContract contract, string id)
		{
			return null;
		}

		[Token(Token = "0x60010A5")]
		[Address(RVA = "0x18454E8", Offset = "0x18454E8", VA = "0x18454E8")]
		private object CreateAndPopulateList(JsonReader reader, string reference, JsonArrayContract contract)
		{
			return null;
		}

		[Token(Token = "0x60010A6")]
		[Address(RVA = "0x1845D1C", Offset = "0x1845D1C", VA = "0x1845D1C")]
		private bool ReadForTypeArrayHack(JsonReader reader, Type t)
		{
			return default(bool);
		}

		[Token(Token = "0x60010A7")]
		[Address(RVA = "0x1840670", Offset = "0x1840670", VA = "0x1840670")]
		private object PopulateList(IWrappedCollection wrappedList, JsonReader reader, string reference, JsonArrayContract contract)
		{
			return null;
		}

		[Token(Token = "0x60010A8")]
		[Address(RVA = "0x1845E38", Offset = "0x1845E38", VA = "0x1845E38")]
		private object PopulateMultidimensionalArray(IList list, JsonReader reader, string reference, JsonArrayContract contract)
		{
			return null;
		}

		[Token(Token = "0x60010A9")]
		[Address(RVA = "0x1844D94", Offset = "0x1844D94", VA = "0x1844D94")]
		private object CreateISerializable(JsonReader reader, JsonISerializableContract contract, string id)
		{
			return null;
		}

		[Token(Token = "0x60010AA")]
		[Address(RVA = "0x1844A08", Offset = "0x1844A08", VA = "0x1844A08")]
		private object CreateAndPopulateObject(JsonReader reader, JsonObjectContract contract, string id)
		{
			return null;
		}

		[Token(Token = "0x60010AB")]
		[Address(RVA = "0x18465AC", Offset = "0x18465AC", VA = "0x18465AC")]
		private object CreateObjectFromNonDefaultConstructor(JsonReader reader, JsonObjectContract contract, ConstructorInfo constructorInfo, string id)
		{
			return null;
		}

		[Token(Token = "0x60010AC")]
		[Address(RVA = "0x1847B18", Offset = "0x1847B18", VA = "0x1847B18")]
		private IDictionary<JsonProperty, object> ResolvePropertyAndConstructorValues(JsonObjectContract contract, JsonReader reader, Type objectType)
		{
			return null;
		}

		[Token(Token = "0x60010AD")]
		[Address(RVA = "0x184267C", Offset = "0x184267C", VA = "0x184267C")]
		private bool ReadForType(JsonReader reader, Type t, JsonConverter propertyConverter)
		{
			return default(bool);
		}

		[Token(Token = "0x60010AE")]
		[Address(RVA = "0x18415EC", Offset = "0x18415EC", VA = "0x18415EC")]
		private object PopulateObject(object newObject, JsonReader reader, JsonObjectContract contract, string id)
		{
			return null;
		}

		[Token(Token = "0x60010AF")]
		[Address(RVA = "0x1847F88", Offset = "0x1847F88", VA = "0x1847F88")]
		private void SetPropertyPresence(JsonReader reader, JsonProperty property, Dictionary<JsonProperty, PropertyPresence> requiredProperties)
		{
		}

		[Token(Token = "0x60010B0")]
		[Address(RVA = "0x1845C9C", Offset = "0x1845C9C", VA = "0x1845C9C")]
		private void HandleError(JsonReader reader, int initialDepth)
		{
		}
	}
	[Token(Token = "0x2000246")]
	internal class JsonSerializerInternalWriter : JsonSerializerInternalBase
	{
		[Token(Token = "0x4000C2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private JsonSerializerProxy _internalSerializer;

		[Token(Token = "0x4000C2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<object> _serializeStack;

		[Token(Token = "0x1700015D")]
		private List<object> SerializeStack
		{
			[Token(Token = "0x60010B1")]
			[Address(RVA = "0x18484C0", Offset = "0x18484C0", VA = "0x18484C0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60010B2")]
		[Address(RVA = "0x1848534", Offset = "0x1848534", VA = "0x1848534")]
		public JsonSerializerInternalWriter(JsonSerializer serializer)
		{
		}

		[Token(Token = "0x60010B3")]
		[Address(RVA = "0x1848538", Offset = "0x1848538", VA = "0x1848538")]
		public void Serialize(JsonWriter jsonWriter, object value)
		{
		}

		[Token(Token = "0x60010B4")]
		[Address(RVA = "0x1848D64", Offset = "0x1848D64", VA = "0x1848D64")]
		private JsonSerializerProxy GetInternalSerializer()
		{
			return null;
		}

		[Token(Token = "0x60010B5")]
		[Address(RVA = "0x18485F4", Offset = "0x18485F4", VA = "0x18485F4")]
		private JsonContract GetContractSafe(object value)
		{
			return null;
		}

		[Token(Token = "0x60010B6")]
		[Address(RVA = "0x1848DD4", Offset = "0x1848DD4", VA = "0x1848DD4")]
		private void SerializePrimitive(JsonWriter writer, object value, JsonPrimitiveContract contract, JsonProperty member, JsonContract collectionValueContract)
		{
		}

		[Token(Token = "0x60010B7")]
		[Address(RVA = "0x1848704", Offset = "0x1848704", VA = "0x1848704")]
		private void SerializeValue(JsonWriter writer, object value, JsonContract valueContract, JsonProperty member, JsonContract collectionValueContract)
		{
		}

		[Token(Token = "0x60010B8")]
		[Address(RVA = "0x184BAA8", Offset = "0x184BAA8", VA = "0x184BAA8")]
		private bool ShouldWriteReference(object value, JsonProperty property, JsonContract contract)
		{
			return default(bool);
		}

		[Token(Token = "0x60010B9")]
		[Address(RVA = "0x184BCEC", Offset = "0x184BCEC", VA = "0x184BCEC")]
		private void WriteMemberInfoProperty(JsonWriter writer, object memberValue, JsonProperty property, JsonContract contract)
		{
		}

		[Token(Token = "0x60010BA")]
		[Address(RVA = "0x184C17C", Offset = "0x184C17C", VA = "0x184C17C")]
		private bool CheckForCircularReference(object value, ReferenceLoopHandling? referenceLoopHandling, JsonContract contract)
		{
			return default(bool);
		}

		[Token(Token = "0x60010BB")]
		[Address(RVA = "0x184BFF0", Offset = "0x184BFF0", VA = "0x184BFF0")]
		private void WriteReference(JsonWriter writer, object value)
		{
		}

		[Token(Token = "0x60010BC")]
		[Address(RVA = "0x184C4F4", Offset = "0x184C4F4", VA = "0x184C4F4")]
		internal static bool TryConvertToString(object value, Type type, out string s)
		{
			return default(bool);
		}

		[Token(Token = "0x60010BD")]
		[Address(RVA = "0x18494E0", Offset = "0x18494E0", VA = "0x18494E0")]
		private void SerializeString(JsonWriter writer, object value, JsonStringContract contract)
		{
		}

		[Token(Token = "0x60010BE")]
		[Address(RVA = "0x1849608", Offset = "0x1849608", VA = "0x1849608")]
		private void SerializeObject(JsonWriter writer, object value, JsonObjectContract contract, JsonProperty member, JsonContract collectionValueContract)
		{
		}

		[Token(Token = "0x60010BF")]
		[Address(RVA = "0x1849280", Offset = "0x1849280", VA = "0x1849280")]
		private void WriteTypeProperty(JsonWriter writer, Type type)
		{
		}

		[Token(Token = "0x60010C0")]
		[Address(RVA = "0x184BFE4", Offset = "0x184BFE4", VA = "0x184BFE4")]
		private bool HasFlag(DefaultValueHandling value, DefaultValueHandling flag)
		{
			return default(bool);
		}

		[Token(Token = "0x60010C1")]
		[Address(RVA = "0x184BCE0", Offset = "0x184BCE0", VA = "0x184BCE0")]
		private bool HasFlag(PreserveReferencesHandling value, PreserveReferencesHandling flag)
		{
			return default(bool);
		}

		[Token(Token = "0x60010C2")]
		[Address(RVA = "0x184C83C", Offset = "0x184C83C", VA = "0x184C83C")]
		private bool HasFlag(TypeNameHandling value, TypeNameHandling flag)
		{
			return default(bool);
		}

		[Token(Token = "0x60010C3")]
		[Address(RVA = "0x1849364", Offset = "0x1849364", VA = "0x1849364")]
		private void SerializeConvertable(JsonWriter writer, JsonConverter converter, object value, JsonContract contract)
		{
		}

		[Token(Token = "0x60010C4")]
		[Address(RVA = "0x184A8B4", Offset = "0x184A8B4", VA = "0x184A8B4")]
		private void SerializeList(JsonWriter writer, IWrappedCollection values, JsonArrayContract contract, JsonProperty member, JsonContract collectionValueContract)
		{
		}

		[Token(Token = "0x60010C5")]
		[Address(RVA = "0x184B4E4", Offset = "0x184B4E4", VA = "0x184B4E4")]
		private void SerializeMultidimensionalArray(JsonWriter writer, Array values, JsonArrayContract contract, JsonProperty member, JsonContract collectionContract)
		{
		}

		[Token(Token = "0x60010C6")]
		[Address(RVA = "0x184CA00", Offset = "0x184CA00", VA = "0x184CA00")]
		private void SerializeMultidimensionalArray(JsonWriter writer, Array values, JsonArrayContract contract, JsonProperty member, int initialDepth, int[] indices)
		{
		}

		[Token(Token = "0x60010C7")]
		[Address(RVA = "0x184CD98", Offset = "0x184CD98", VA = "0x184CD98")]
		private string GetReference(JsonWriter writer, object value)
		{
			return null;
		}

		[Token(Token = "0x60010C8")]
		[Address(RVA = "0x184C848", Offset = "0x184C848", VA = "0x184C848")]
		private bool WriteStartArray(JsonWriter writer, object values, JsonArrayContract contract, JsonProperty member, JsonContract containerContract)
		{
			return default(bool);
		}

		[Token(Token = "0x60010C9")]
		[Address(RVA = "0x184B704", Offset = "0x184B704", VA = "0x184B704")]
		[SecuritySafeCritical]
		private void SerializeISerializable(JsonWriter writer, ISerializable value, JsonISerializableContract contract)
		{
		}

		[Token(Token = "0x60010CA")]
		[Address(RVA = "0x1848F9C", Offset = "0x1848F9C", VA = "0x1848F9C")]
		private bool ShouldWriteType(TypeNameHandling typeNameHandlingFlag, JsonContract contract, JsonProperty member, JsonContract collectionValueContract)
		{
			return default(bool);
		}

		[Token(Token = "0x60010CB")]
		[Address(RVA = "0x1849D38", Offset = "0x1849D38", VA = "0x1849D38")]
		private void SerializeDictionary(JsonWriter writer, IWrappedDictionary values, JsonDictionaryContract contract, JsonProperty member, JsonContract collectionValueContract)
		{
		}

		[Token(Token = "0x60010CC")]
		[Address(RVA = "0x184CFE8", Offset = "0x184CFE8", VA = "0x184CFE8")]
		private string GetPropertyName(DictionaryEntry entry)
		{
			return null;
		}

		[Token(Token = "0x60010CD")]
		[Address(RVA = "0x184C7D4", Offset = "0x184C7D4", VA = "0x184C7D4")]
		private void HandleError(JsonWriter writer, int initialDepth)
		{
		}

		[Token(Token = "0x60010CE")]
		[Address(RVA = "0x184C6CC", Offset = "0x184C6CC", VA = "0x184C6CC")]
		private bool ShouldSerialize(JsonProperty property, object target)
		{
			return default(bool);
		}

		[Token(Token = "0x60010CF")]
		[Address(RVA = "0x184C750", Offset = "0x184C750", VA = "0x184C750")]
		private bool IsSpecified(JsonProperty property, object target)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000247")]
	internal class JsonSerializerProxy : JsonSerializer
	{
		[Token(Token = "0x4000C2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private readonly JsonSerializerInternalReader _serializerReader;

		[Token(Token = "0x4000C2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private readonly JsonSerializerInternalWriter _serializerWriter;

		[Token(Token = "0x4000C2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private readonly JsonSerializer _serializer;

		[Token(Token = "0x1700015E")]
		public override IReferenceResolver ReferenceResolver
		{
			[Token(Token = "0x60010D2")]
			[Address(RVA = "0x1B15160", Offset = "0x1B15160", VA = "0x1B15160", Slot = "6")]
			get
			{
				return null;
			}
			[Token(Token = "0x60010D3")]
			[Address(RVA = "0x1B15194", Offset = "0x1B15194", VA = "0x1B15194", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x1700015F")]
		public override JsonConverterCollection Converters
		{
			[Token(Token = "0x60010D4")]
			[Address(RVA = "0x1B151D0", Offset = "0x1B151D0", VA = "0x1B151D0", Slot = "28")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000160")]
		public override DefaultValueHandling DefaultValueHandling
		{
			[Token(Token = "0x60010D5")]
			[Address(RVA = "0x1B15208", Offset = "0x1B15208", VA = "0x1B15208", Slot = "22")]
			get
			{
				return default(DefaultValueHandling);
			}
			[Token(Token = "0x60010D6")]
			[Address(RVA = "0x1B15240", Offset = "0x1B15240", VA = "0x1B15240", Slot = "23")]
			set
			{
			}
		}

		[Token(Token = "0x17000161")]
		public override IContractResolver ContractResolver
		{
			[Token(Token = "0x60010D7")]
			[Address(RVA = "0x1B15280", Offset = "0x1B15280", VA = "0x1B15280", Slot = "29")]
			get
			{
				return null;
			}
			[Token(Token = "0x60010D8")]
			[Address(RVA = "0x1B152B8", Offset = "0x1B152B8", VA = "0x1B152B8", Slot = "30")]
			set
			{
			}
		}

		[Token(Token = "0x17000162")]
		public override MissingMemberHandling MissingMemberHandling
		{
			[Token(Token = "0x60010D9")]
			[Address(RVA = "0x1B152F8", Offset = "0x1B152F8", VA = "0x1B152F8", Slot = "18")]
			get
			{
				return default(MissingMemberHandling);
			}
			[Token(Token = "0x60010DA")]
			[Address(RVA = "0x1B15330", Offset = "0x1B15330", VA = "0x1B15330", Slot = "19")]
			set
			{
			}
		}

		[Token(Token = "0x17000163")]
		public override NullValueHandling NullValueHandling
		{
			[Token(Token = "0x60010DB")]
			[Address(RVA = "0x1B15370", Offset = "0x1B15370", VA = "0x1B15370", Slot = "20")]
			get
			{
				return default(NullValueHandling);
			}
			[Token(Token = "0x60010DC")]
			[Address(RVA = "0x1B153A8", Offset = "0x1B153A8", VA = "0x1B153A8", Slot = "21")]
			set
			{
			}
		}

		[Token(Token = "0x17000164")]
		public override ObjectCreationHandling ObjectCreationHandling
		{
			[Token(Token = "0x60010DD")]
			[Address(RVA = "0x1B153E8", Offset = "0x1B153E8", VA = "0x1B153E8", Slot = "24")]
			get
			{
				return default(ObjectCreationHandling);
			}
			[Token(Token = "0x60010DE")]
			[Address(RVA = "0x1B15420", Offset = "0x1B15420", VA = "0x1B15420", Slot = "25")]
			set
			{
			}
		}

		[Token(Token = "0x17000165")]
		public override ReferenceLoopHandling ReferenceLoopHandling
		{
			[Token(Token = "0x60010DF")]
			[Address(RVA = "0x1B15460", Offset = "0x1B15460", VA = "0x1B15460", Slot = "16")]
			get
			{
				return default(ReferenceLoopHandling);
			}
			[Token(Token = "0x60010E0")]
			[Address(RVA = "0x1B15498", Offset = "0x1B15498", VA = "0x1B15498", Slot = "17")]
			set
			{
			}
		}

		[Token(Token = "0x17000166")]
		public override PreserveReferencesHandling PreserveReferencesHandling
		{
			[Token(Token = "0x60010E1")]
			[Address(RVA = "0x1B154D8", Offset = "0x1B154D8", VA = "0x1B154D8", Slot = "14")]
			get
			{
				return default(PreserveReferencesHandling);
			}
			[Token(Token = "0x60010E2")]
			[Address(RVA = "0x1B15510", Offset = "0x1B15510", VA = "0x1B15510", Slot = "15")]
			set
			{
			}
		}

		[Token(Token = "0x17000167")]
		public override TypeNameHandling TypeNameHandling
		{
			[Token(Token = "0x60010E3")]
			[Address(RVA = "0x1B15550", Offset = "0x1B15550", VA = "0x1B15550", Slot = "10")]
			get
			{
				return default(TypeNameHandling);
			}
			[Token(Token = "0x60010E4")]
			[Address(RVA = "0x1B15584", Offset = "0x1B15584", VA = "0x1B15584", Slot = "11")]
			set
			{
			}
		}

		[Token(Token = "0x17000168")]
		public override FormatterAssemblyStyle TypeNameAssemblyFormat
		{
			[Token(Token = "0x60010E5")]
			[Address(RVA = "0x1B155C0", Offset = "0x1B155C0", VA = "0x1B155C0", Slot = "12")]
			get
			{
				return default(FormatterAssemblyStyle);
			}
			[Token(Token = "0x60010E6")]
			[Address(RVA = "0x1B155F4", Offset = "0x1B155F4", VA = "0x1B155F4", Slot = "13")]
			set
			{
			}
		}

		[Token(Token = "0x17000169")]
		public override ConstructorHandling ConstructorHandling
		{
			[Token(Token = "0x60010E7")]
			[Address(RVA = "0x1B15630", Offset = "0x1B15630", VA = "0x1B15630", Slot = "26")]
			get
			{
				return default(ConstructorHandling);
			}
			[Token(Token = "0x60010E8")]
			[Address(RVA = "0x1B15668", Offset = "0x1B15668", VA = "0x1B15668", Slot = "27")]
			set
			{
			}
		}

		[Token(Token = "0x1700016A")]
		public override SerializationBinder Binder
		{
			[Token(Token = "0x60010E9")]
			[Address(RVA = "0x1B156A8", Offset = "0x1B156A8", VA = "0x1B156A8", Slot = "8")]
			get
			{
				return null;
			}
			[Token(Token = "0x60010EA")]
			[Address(RVA = "0x1B156DC", Offset = "0x1B156DC", VA = "0x1B156DC", Slot = "9")]
			set
			{
			}
		}

		[Token(Token = "0x1700016B")]
		public override StreamingContext Context
		{
			[Token(Token = "0x60010EB")]
			[Address(RVA = "0x1B15718", Offset = "0x1B15718", VA = "0x1B15718", Slot = "31")]
			get
			{
				return default(StreamingContext);
			}
			[Token(Token = "0x60010EC")]
			[Address(RVA = "0x1B15750", Offset = "0x1B15750", VA = "0x1B15750", Slot = "32")]
			set
			{
			}
		}

		[Token(Token = "0x14000008")]
		public override event EventHandler<ErrorEventArgs> Error
		{
			[Token(Token = "0x60010D0")]
			[Address(RVA = "0x1B150E8", Offset = "0x1B150E8", VA = "0x1B150E8", Slot = "4")]
			add
			{
			}
			[Token(Token = "0x60010D1")]
			[Address(RVA = "0x1B15124", Offset = "0x1B15124", VA = "0x1B15124", Slot = "5")]
			remove
			{
			}
		}

		[Token(Token = "0x60010ED")]
		[Address(RVA = "0x1B157A0", Offset = "0x1B157A0", VA = "0x1B157A0")]
		internal JsonSerializerInternalBase GetInternalSerializer()
		{
			return null;
		}

		[Token(Token = "0x60010EE")]
		[Address(RVA = "0x1B157B8", Offset = "0x1B157B8", VA = "0x1B157B8")]
		public JsonSerializerProxy(JsonSerializerInternalReader serializerReader)
		{
		}

		[Token(Token = "0x60010EF")]
		[Address(RVA = "0x1B158D0", Offset = "0x1B158D0", VA = "0x1B158D0")]
		public JsonSerializerProxy(JsonSerializerInternalWriter serializerWriter)
		{
		}

		[Token(Token = "0x60010F0")]
		[Address(RVA = "0x1B1595C", Offset = "0x1B1595C", VA = "0x1B1595C", Slot = "34")]
		internal override object DeserializeInternal(JsonReader reader, Type objectType)
		{
			return null;
		}

		[Token(Token = "0x60010F1")]
		[Address(RVA = "0x1B159CC", Offset = "0x1B159CC", VA = "0x1B159CC", Slot = "33")]
		internal override void PopulateInternal(JsonReader reader, object target)
		{
		}

		[Token(Token = "0x60010F2")]
		[Address(RVA = "0x1B15A3C", Offset = "0x1B15A3C", VA = "0x1B15A3C", Slot = "35")]
		internal override void SerializeInternal(JsonWriter jsonWriter, object value)
		{
		}
	}
	[Token(Token = "0x2000248")]
	public class JsonStringContract : JsonContract
	{
		[Token(Token = "0x60010F3")]
		[Address(RVA = "0x1B15AAC", Offset = "0x1B15AAC", VA = "0x1B15AAC")]
		public JsonStringContract(Type underlyingType)
		{
		}
	}
	[Token(Token = "0x2000249")]
	internal interface IMetadataTypeAttribute
	{
		[Token(Token = "0x1700016C")]
		Type MetadataClassType
		{
			[Token(Token = "0x60010F4")]
			get;
		}
	}
	[Token(Token = "0x200024A")]
	internal static class JsonTypeReflector
	{
		[Token(Token = "0x4000C2F")]
		public const string IdPropertyName = "$id";

		[Token(Token = "0x4000C30")]
		public const string RefPropertyName = "$ref";

		[Token(Token = "0x4000C31")]
		public const string TypePropertyName = "$type";

		[Token(Token = "0x4000C32")]
		public const string ValuePropertyName = "$value";

		[Token(Token = "0x4000C33")]
		public const string ArrayValuesPropertyName = "$values";

		[Token(Token = "0x4000C34")]
		public const string ShouldSerializePrefix = "ShouldSerialize";

		[Token(Token = "0x4000C35")]
		public const string SpecifiedPostfix = "Specified";

		[Token(Token = "0x4000C36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly ThreadSafeStore<ICustomAttributeProvider, Type> JsonConverterTypeCache;

		[Token(Token = "0x4000C37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly ThreadSafeStore<Type, Type> AssociatedMetadataTypesCache;

		[Token(Token = "0x4000C38")]
		private const string MetadataTypeAttributeTypeName = "System.ComponentModel.DataAnnotations.MetadataTypeAttribute, System.ComponentModel.DataAnnotations, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35";

		[Token(Token = "0x4000C39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static Type _cachedMetadataTypeAttributeType;

		[Token(Token = "0x4000C3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static bool? _dynamicCodeGeneration;

		[Token(Token = "0x1700016D")]
		public static bool DynamicCodeGeneration
		{
			[Token(Token = "0x6001105")]
			[Address(RVA = "0x1B16C28", Offset = "0x1B16C28", VA = "0x1B16C28")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700016E")]
		public static ReflectionDelegateFactory ReflectionDelegateFactory
		{
			[Token(Token = "0x6001106")]
			[Address(RVA = "0x1B16D24", Offset = "0x1B16D24", VA = "0x1B16D24")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60010F5")]
		[Address(RVA = "0x1B15AB4", Offset = "0x1B15AB4", VA = "0x1B15AB4")]
		public static JsonContainerAttribute GetJsonContainerAttribute(Type type)
		{
			return null;
		}

		[Token(Token = "0x60010F6")]
		[Address(RVA = "0x1B15B24", Offset = "0x1B15B24", VA = "0x1B15B24")]
		public static JsonObjectAttribute GetJsonObjectAttribute(Type type)
		{
			return null;
		}

		[Token(Token = "0x60010F7")]
		[Address(RVA = "0x1B15BA8", Offset = "0x1B15BA8", VA = "0x1B15BA8")]
		public static JsonArrayAttribute GetJsonArrayAttribute(Type type)
		{
			return null;
		}

		[Token(Token = "0x60010F8")]
		[Address(RVA = "0x1B15C2C", Offset = "0x1B15C2C", VA = "0x1B15C2C")]
		public static DataContractAttribute GetDataContractAttribute(Type type)
		{
			return null;
		}

		[Token(Token = "0x60010F9")]
		[Address(RVA = "0x1B15D18", Offset = "0x1B15D18", VA = "0x1B15D18")]
		public static DataMemberAttribute GetDataMemberAttribute(MemberInfo memberInfo)
		{
			return null;
		}

		[Token(Token = "0x60010FA")]
		[Address(RVA = "0x1B16398", Offset = "0x1B16398", VA = "0x1B16398")]
		public static MemberSerialization GetObjectMemberSerialization(Type objectType)
		{
			return default(MemberSerialization);
		}

		[Token(Token = "0x60010FB")]
		[Address(RVA = "0x1B1643C", Offset = "0x1B1643C", VA = "0x1B1643C")]
		private static Type GetJsonConverterType(ICustomAttributeProvider attributeProvider)
		{
			return null;
		}

		[Token(Token = "0x60010FC")]
		[Address(RVA = "0x1B164C8", Offset = "0x1B164C8", VA = "0x1B164C8")]
		private static Type GetJsonConverterTypeFromAttribute(ICustomAttributeProvider attributeProvider)
		{
			return null;
		}

		[Token(Token = "0x60010FD")]
		[Address(RVA = "0x1B16550", Offset = "0x1B16550", VA = "0x1B16550")]
		public static JsonConverter GetJsonConverter(ICustomAttributeProvider attributeProvider, Type targetConvertedType)
		{
			return null;
		}

		[Token(Token = "0x60010FE")]
		[Address(RVA = "0x1B16828", Offset = "0x1B16828", VA = "0x1B16828")]
		public static TypeConverter GetTypeConverter(Type type)
		{
			return null;
		}

		[Token(Token = "0x60010FF")]
		[Address(RVA = "0x1B16890", Offset = "0x1B16890", VA = "0x1B16890")]
		private static Type GetAssociatedMetadataType(Type type)
		{
			return null;
		}

		[Token(Token = "0x6001100")]
		[Address(RVA = "0x1B1691C", Offset = "0x1B1691C", VA = "0x1B1691C")]
		private static Type GetAssociateMetadataTypeFromAttribute(Type type)
		{
			return null;
		}

		[Token(Token = "0x6001101")]
		[Address(RVA = "0x1B16A98", Offset = "0x1B16A98", VA = "0x1B16A98")]
		private static Type GetMetadataTypeAttributeType()
		{
			return null;
		}

		[Token(Token = "0x6001102")]
		private static T GetAttribute<T>(Type type) where T : Attribute
		{
			return null;
		}

		[Token(Token = "0x6001103")]
		private static T GetAttribute<T>(MemberInfo memberInfo) where T : Attribute
		{
			return null;
		}

		[Token(Token = "0x6001104")]
		public static T GetAttribute<T>(ICustomAttributeProvider attributeProvider) where T : Attribute
		{
			return null;
		}
	}
	[Token(Token = "0x200024B")]
	internal class LateBoundMetadataTypeAttribute : IMetadataTypeAttribute
	{
		[Token(Token = "0x4000C3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static PropertyInfo _metadataClassTypeProperty;

		[Token(Token = "0x4000C3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly object _attribute;

		[Token(Token = "0x1700016F")]
		public Type MetadataClassType
		{
			[Token(Token = "0x6001109")]
			[Address(RVA = "0x1B16F04", Offset = "0x1B16F04", VA = "0x1B16F04", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001108")]
		[Address(RVA = "0x1B16BFC", Offset = "0x1B16BFC", VA = "0x1B16BFC")]
		public LateBoundMetadataTypeAttribute(object attribute)
		{
		}
	}
	[Token(Token = "0x200024C")]
	public delegate object ObjectConstructor<T>(params object[] args);
	[Token(Token = "0x200024D")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB49848", Offset = "0xB49848")]
	public sealed class OnErrorAttribute : Attribute
	{
		[Token(Token = "0x600110E")]
		[Address(RVA = "0x1B17594", Offset = "0x1B17594", VA = "0x1B17594")]
		public OnErrorAttribute()
		{
		}
	}
	[Token(Token = "0x200024E")]
	public class ReflectionValueProvider : IValueProvider
	{
		[Token(Token = "0x4000C3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly MemberInfo _memberInfo;

		[Token(Token = "0x600110F")]
		[Address(RVA = "0x1B1759C", Offset = "0x1B1759C", VA = "0x1B1759C")]
		public ReflectionValueProvider(MemberInfo memberInfo)
		{
		}

		[Token(Token = "0x6001110")]
		[Address(RVA = "0x1B1760C", Offset = "0x1B1760C", VA = "0x1B1760C", Slot = "4")]
		public void SetValue(object target, object value)
		{
		}

		[Token(Token = "0x6001111")]
		[Address(RVA = "0x1B17BD4", Offset = "0x1B17BD4", VA = "0x1B17BD4", Slot = "5")]
		public object GetValue(object target)
		{
			return null;
		}
	}
}
namespace Newtonsoft.Json.Schema
{
	[Token(Token = "0x200024F")]
	public class JsonSchema
	{
		[Token(Token = "0x4000C3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B678", Offset = "0xB4B678")]
		private string <Id>k__BackingField;

		[Token(Token = "0x4000C3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B688", Offset = "0xB4B688")]
		private string <Title>k__BackingField;

		[Token(Token = "0x4000C40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B698", Offset = "0xB4B698")]
		private bool? <Required>k__BackingField;

		[Token(Token = "0x4000C41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B6A8", Offset = "0xB4B6A8")]
		private bool? <ReadOnly>k__BackingField;

		[Token(Token = "0x4000C42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B6B8", Offset = "0xB4B6B8")]
		private bool? <Hidden>k__BackingField;

		[Token(Token = "0x4000C43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B6C8", Offset = "0xB4B6C8")]
		private bool? <Transient>k__BackingField;

		[Token(Token = "0x4000C44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B6D8", Offset = "0xB4B6D8")]
		private string <Description>k__BackingField;

		[Token(Token = "0x4000C45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B6E8", Offset = "0xB4B6E8")]
		private JsonSchemaType? <Type>k__BackingField;

		[Token(Token = "0x4000C46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B6F8", Offset = "0xB4B6F8")]
		private string <Pattern>k__BackingField;

		[Token(Token = "0x4000C47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B708", Offset = "0xB4B708")]
		private int? <MinimumLength>k__BackingField;

		[Token(Token = "0x4000C48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B718", Offset = "0xB4B718")]
		private int? <MaximumLength>k__BackingField;

		[Token(Token = "0x4000C49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B728", Offset = "0xB4B728")]
		private double? <DivisibleBy>k__BackingField;

		[Token(Token = "0x4000C4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B738", Offset = "0xB4B738")]
		private double? <Minimum>k__BackingField;

		[Token(Token = "0x4000C4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B748", Offset = "0xB4B748")]
		private double? <Maximum>k__BackingField;

		[Token(Token = "0x4000C4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B758", Offset = "0xB4B758")]
		private bool? <ExclusiveMinimum>k__BackingField;

		[Token(Token = "0x4000C4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x82")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B768", Offset = "0xB4B768")]
		private bool? <ExclusiveMaximum>k__BackingField;

		[Token(Token = "0x4000C4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B778", Offset = "0xB4B778")]
		private int? <MinimumItems>k__BackingField;

		[Token(Token = "0x4000C4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B788", Offset = "0xB4B788")]
		private int? <MaximumItems>k__BackingField;

		[Token(Token = "0x4000C50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B798", Offset = "0xB4B798")]
		private IList<JsonSchema> <Items>k__BackingField;

		[Token(Token = "0x4000C51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B7A8", Offset = "0xB4B7A8")]
		private IDictionary<string, JsonSchema> <Properties>k__BackingField;

		[Token(Token = "0x4000C52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B7B8", Offset = "0xB4B7B8")]
		private JsonSchema <AdditionalProperties>k__BackingField;

		[Token(Token = "0x4000C53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B7C8", Offset = "0xB4B7C8")]
		private IDictionary<string, JsonSchema> <PatternProperties>k__BackingField;

		[Token(Token = "0x4000C54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B7D8", Offset = "0xB4B7D8")]
		private bool <AllowAdditionalProperties>k__BackingField;

		[Token(Token = "0x4000C55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B7E8", Offset = "0xB4B7E8")]
		private string <Requires>k__BackingField;

		[Token(Token = "0x4000C56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B7F8", Offset = "0xB4B7F8")]
		private IList<string> <Identity>k__BackingField;

		[Token(Token = "0x4000C57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B808", Offset = "0xB4B808")]
		private IList<JToken> <Enum>k__BackingField;

		[Token(Token = "0x4000C58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B818", Offset = "0xB4B818")]
		private IDictionary<JToken, string> <Options>k__BackingField;

		[Token(Token = "0x4000C59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B828", Offset = "0xB4B828")]
		private JsonSchemaType? <Disallow>k__BackingField;

		[Token(Token = "0x4000C5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B838", Offset = "0xB4B838")]
		private JToken <Default>k__BackingField;

		[Token(Token = "0x4000C5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B848", Offset = "0xB4B848")]
		private JsonSchema <Extends>k__BackingField;

		[Token(Token = "0x4000C5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B858", Offset = "0xB4B858")]
		private string <Format>k__BackingField;

		[Token(Token = "0x4000C5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private readonly string _internalId;

		[Token(Token = "0x17000170")]
		public string Id
		{
			[Token(Token = "0x6001112")]
			[Address(RVA = "0x1C344FC", Offset = "0x1C344FC", VA = "0x1C344FC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D170", Offset = "0xB4D170")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001113")]
			[Address(RVA = "0x1C34504", Offset = "0x1C34504", VA = "0x1C34504")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D180", Offset = "0xB4D180")]
			set
			{
			}
		}

		[Token(Token = "0x17000171")]
		public string Title
		{
			[Token(Token = "0x6001114")]
			[Address(RVA = "0x1C3450C", Offset = "0x1C3450C", VA = "0x1C3450C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D190", Offset = "0xB4D190")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001115")]
			[Address(RVA = "0x1C34514", Offset = "0x1C34514", VA = "0x1C34514")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D1A0", Offset = "0xB4D1A0")]
			set
			{
			}
		}

		[Token(Token = "0x17000172")]
		public bool? Required
		{
			[Token(Token = "0x6001116")]
			[Address(RVA = "0x1C3451C", Offset = "0x1C3451C", VA = "0x1C3451C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D1B0", Offset = "0xB4D1B0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001117")]
			[Address(RVA = "0x1C34524", Offset = "0x1C34524", VA = "0x1C34524")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D1C0", Offset = "0xB4D1C0")]
			set
			{
			}
		}

		[Token(Token = "0x17000173")]
		public bool? ReadOnly
		{
			[Token(Token = "0x6001118")]
			[Address(RVA = "0x1C3452C", Offset = "0x1C3452C", VA = "0x1C3452C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D1D0", Offset = "0xB4D1D0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001119")]
			[Address(RVA = "0x1C34534", Offset = "0x1C34534", VA = "0x1C34534")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D1E0", Offset = "0xB4D1E0")]
			set
			{
			}
		}

		[Token(Token = "0x17000174")]
		public bool? Hidden
		{
			[Token(Token = "0x600111A")]
			[Address(RVA = "0x1C3453C", Offset = "0x1C3453C", VA = "0x1C3453C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D1F0", Offset = "0xB4D1F0")]
			get
			{
				return null;
			}
			[Token(Token = "0x600111B")]
			[Address(RVA = "0x1C34544", Offset = "0x1C34544", VA = "0x1C34544")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D200", Offset = "0xB4D200")]
			set
			{
			}
		}

		[Token(Token = "0x17000175")]
		public bool? Transient
		{
			[Token(Token = "0x600111C")]
			[Address(RVA = "0x1C3454C", Offset = "0x1C3454C", VA = "0x1C3454C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D210", Offset = "0xB4D210")]
			get
			{
				return null;
			}
			[Token(Token = "0x600111D")]
			[Address(RVA = "0x1C34554", Offset = "0x1C34554", VA = "0x1C34554")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D220", Offset = "0xB4D220")]
			set
			{
			}
		}

		[Token(Token = "0x17000176")]
		public string Description
		{
			[Token(Token = "0x600111E")]
			[Address(RVA = "0x1C3455C", Offset = "0x1C3455C", VA = "0x1C3455C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D230", Offset = "0xB4D230")]
			get
			{
				return null;
			}
			[Token(Token = "0x600111F")]
			[Address(RVA = "0x1C34564", Offset = "0x1C34564", VA = "0x1C34564")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D240", Offset = "0xB4D240")]
			set
			{
			}
		}

		[Token(Token = "0x17000177")]
		public JsonSchemaType? Type
		{
			[Token(Token = "0x6001120")]
			[Address(RVA = "0x1C3456C", Offset = "0x1C3456C", VA = "0x1C3456C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D250", Offset = "0xB4D250")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001121")]
			[Address(RVA = "0x1C34574", Offset = "0x1C34574", VA = "0x1C34574")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D260", Offset = "0xB4D260")]
			set
			{
			}
		}

		[Token(Token = "0x17000178")]
		public string Pattern
		{
			[Token(Token = "0x6001122")]
			[Address(RVA = "0x1C3457C", Offset = "0x1C3457C", VA = "0x1C3457C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D270", Offset = "0xB4D270")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001123")]
			[Address(RVA = "0x1C34584", Offset = "0x1C34584", VA = "0x1C34584")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D280", Offset = "0xB4D280")]
			set
			{
			}
		}

		[Token(Token = "0x17000179")]
		public int? MinimumLength
		{
			[Token(Token = "0x6001124")]
			[Address(RVA = "0x1C3458C", Offset = "0x1C3458C", VA = "0x1C3458C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D290", Offset = "0xB4D290")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001125")]
			[Address(RVA = "0x1C34594", Offset = "0x1C34594", VA = "0x1C34594")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D2A0", Offset = "0xB4D2A0")]
			set
			{
			}
		}

		[Token(Token = "0x1700017A")]
		public int? MaximumLength
		{
			[Token(Token = "0x6001126")]
			[Address(RVA = "0x1C3459C", Offset = "0x1C3459C", VA = "0x1C3459C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D2B0", Offset = "0xB4D2B0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001127")]
			[Address(RVA = "0x1C345A4", Offset = "0x1C345A4", VA = "0x1C345A4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D2C0", Offset = "0xB4D2C0")]
			set
			{
			}
		}

		[Token(Token = "0x1700017B")]
		public double? DivisibleBy
		{
			[Token(Token = "0x6001128")]
			[Address(RVA = "0x1C345AC", Offset = "0x1C345AC", VA = "0x1C345AC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D2D0", Offset = "0xB4D2D0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001129")]
			[Address(RVA = "0x1C345B8", Offset = "0x1C345B8", VA = "0x1C345B8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D2E0", Offset = "0xB4D2E0")]
			set
			{
			}
		}

		[Token(Token = "0x1700017C")]
		public double? Minimum
		{
			[Token(Token = "0x600112A")]
			[Address(RVA = "0x1C345C0", Offset = "0x1C345C0", VA = "0x1C345C0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D2F0", Offset = "0xB4D2F0")]
			get
			{
				return null;
			}
			[Token(Token = "0x600112B")]
			[Address(RVA = "0x1C345CC", Offset = "0x1C345CC", VA = "0x1C345CC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D300", Offset = "0xB4D300")]
			set
			{
			}
		}

		[Token(Token = "0x1700017D")]
		public double? Maximum
		{
			[Token(Token = "0x600112C")]
			[Address(RVA = "0x1C345D4", Offset = "0x1C345D4", VA = "0x1C345D4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D310", Offset = "0xB4D310")]
			get
			{
				return null;
			}
			[Token(Token = "0x600112D")]
			[Address(RVA = "0x1C345E0", Offset = "0x1C345E0", VA = "0x1C345E0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D320", Offset = "0xB4D320")]
			set
			{
			}
		}

		[Token(Token = "0x1700017E")]
		public bool? ExclusiveMinimum
		{
			[Token(Token = "0x600112E")]
			[Address(RVA = "0x1C345E8", Offset = "0x1C345E8", VA = "0x1C345E8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D330", Offset = "0xB4D330")]
			get
			{
				return null;
			}
			[Token(Token = "0x600112F")]
			[Address(RVA = "0x1C345F0", Offset = "0x1C345F0", VA = "0x1C345F0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D340", Offset = "0xB4D340")]
			set
			{
			}
		}

		[Token(Token = "0x1700017F")]
		public bool? ExclusiveMaximum
		{
			[Token(Token = "0x6001130")]
			[Address(RVA = "0x1C345F8", Offset = "0x1C345F8", VA = "0x1C345F8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D350", Offset = "0xB4D350")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001131")]
			[Address(RVA = "0x1C34600", Offset = "0x1C34600", VA = "0x1C34600")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D360", Offset = "0xB4D360")]
			set
			{
			}
		}

		[Token(Token = "0x17000180")]
		public int? MinimumItems
		{
			[Token(Token = "0x6001132")]
			[Address(RVA = "0x1C34608", Offset = "0x1C34608", VA = "0x1C34608")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D370", Offset = "0xB4D370")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001133")]
			[Address(RVA = "0x1C34610", Offset = "0x1C34610", VA = "0x1C34610")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D380", Offset = "0xB4D380")]
			set
			{
			}
		}

		[Token(Token = "0x17000181")]
		public int? MaximumItems
		{
			[Token(Token = "0x6001134")]
			[Address(RVA = "0x1C34618", Offset = "0x1C34618", VA = "0x1C34618")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D390", Offset = "0xB4D390")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001135")]
			[Address(RVA = "0x1C34620", Offset = "0x1C34620", VA = "0x1C34620")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D3A0", Offset = "0xB4D3A0")]
			set
			{
			}
		}

		[Token(Token = "0x17000182")]
		public IList<JsonSchema> Items
		{
			[Token(Token = "0x6001136")]
			[Address(RVA = "0x1C34628", Offset = "0x1C34628", VA = "0x1C34628")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D3B0", Offset = "0xB4D3B0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001137")]
			[Address(RVA = "0x1C34630", Offset = "0x1C34630", VA = "0x1C34630")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D3C0", Offset = "0xB4D3C0")]
			set
			{
			}
		}

		[Token(Token = "0x17000183")]
		public IDictionary<string, JsonSchema> Properties
		{
			[Token(Token = "0x6001138")]
			[Address(RVA = "0x1C34638", Offset = "0x1C34638", VA = "0x1C34638")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D3D0", Offset = "0xB4D3D0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001139")]
			[Address(RVA = "0x1C34640", Offset = "0x1C34640", VA = "0x1C34640")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D3E0", Offset = "0xB4D3E0")]
			set
			{
			}
		}

		[Token(Token = "0x17000184")]
		public JsonSchema AdditionalProperties
		{
			[Token(Token = "0x600113A")]
			[Address(RVA = "0x1C34648", Offset = "0x1C34648", VA = "0x1C34648")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D3F0", Offset = "0xB4D3F0")]
			get
			{
				return null;
			}
			[Token(Token = "0x600113B")]
			[Address(RVA = "0x1C34650", Offset = "0x1C34650", VA = "0x1C34650")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D400", Offset = "0xB4D400")]
			set
			{
			}
		}

		[Token(Token = "0x17000185")]
		public IDictionary<string, JsonSchema> PatternProperties
		{
			[Token(Token = "0x600113C")]
			[Address(RVA = "0x1C34658", Offset = "0x1C34658", VA = "0x1C34658")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D410", Offset = "0xB4D410")]
			get
			{
				return null;
			}
			[Token(Token = "0x600113D")]
			[Address(RVA = "0x1C34660", Offset = "0x1C34660", VA = "0x1C34660")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D420", Offset = "0xB4D420")]
			set
			{
			}
		}

		[Token(Token = "0x17000186")]
		public bool AllowAdditionalProperties
		{
			[Token(Token = "0x600113E")]
			[Address(RVA = "0x1C34668", Offset = "0x1C34668", VA = "0x1C34668")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D430", Offset = "0xB4D430")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600113F")]
			[Address(RVA = "0x1C34670", Offset = "0x1C34670", VA = "0x1C34670")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D440", Offset = "0xB4D440")]
			set
			{
			}
		}

		[Token(Token = "0x17000187")]
		public string Requires
		{
			[Token(Token = "0x6001140")]
			[Address(RVA = "0x1C3467C", Offset = "0x1C3467C", VA = "0x1C3467C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D450", Offset = "0xB4D450")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001141")]
			[Address(RVA = "0x1C34684", Offset = "0x1C34684", VA = "0x1C34684")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D460", Offset = "0xB4D460")]
			set
			{
			}
		}

		[Token(Token = "0x17000188")]
		public IList<string> Identity
		{
			[Token(Token = "0x6001142")]
			[Address(RVA = "0x1C3468C", Offset = "0x1C3468C", VA = "0x1C3468C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D470", Offset = "0xB4D470")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001143")]
			[Address(RVA = "0x1C34694", Offset = "0x1C34694", VA = "0x1C34694")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D480", Offset = "0xB4D480")]
			set
			{
			}
		}

		[Token(Token = "0x17000189")]
		public IList<JToken> Enum
		{
			[Token(Token = "0x6001144")]
			[Address(RVA = "0x1C3469C", Offset = "0x1C3469C", VA = "0x1C3469C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D490", Offset = "0xB4D490")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001145")]
			[Address(RVA = "0x1C346A4", Offset = "0x1C346A4", VA = "0x1C346A4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D4A0", Offset = "0xB4D4A0")]
			set
			{
			}
		}

		[Token(Token = "0x1700018A")]
		public IDictionary<JToken, string> Options
		{
			[Token(Token = "0x6001146")]
			[Address(RVA = "0x1C346AC", Offset = "0x1C346AC", VA = "0x1C346AC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D4B0", Offset = "0xB4D4B0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001147")]
			[Address(RVA = "0x1C346B4", Offset = "0x1C346B4", VA = "0x1C346B4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D4C0", Offset = "0xB4D4C0")]
			set
			{
			}
		}

		[Token(Token = "0x1700018B")]
		public JsonSchemaType? Disallow
		{
			[Token(Token = "0x6001148")]
			[Address(RVA = "0x1C346BC", Offset = "0x1C346BC", VA = "0x1C346BC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D4D0", Offset = "0xB4D4D0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001149")]
			[Address(RVA = "0x1C346C4", Offset = "0x1C346C4", VA = "0x1C346C4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D4E0", Offset = "0xB4D4E0")]
			set
			{
			}
		}

		[Token(Token = "0x1700018C")]
		public JToken Default
		{
			[Token(Token = "0x600114A")]
			[Address(RVA = "0x1C346CC", Offset = "0x1C346CC", VA = "0x1C346CC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D4F0", Offset = "0xB4D4F0")]
			get
			{
				return null;
			}
			[Token(Token = "0x600114B")]
			[Address(RVA = "0x1C346D4", Offset = "0x1C346D4", VA = "0x1C346D4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D500", Offset = "0xB4D500")]
			set
			{
			}
		}

		[Token(Token = "0x1700018D")]
		public JsonSchema Extends
		{
			[Token(Token = "0x600114C")]
			[Address(RVA = "0x1C346DC", Offset = "0x1C346DC", VA = "0x1C346DC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D510", Offset = "0xB4D510")]
			get
			{
				return null;
			}
			[Token(Token = "0x600114D")]
			[Address(RVA = "0x1C346E4", Offset = "0x1C346E4", VA = "0x1C346E4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D520", Offset = "0xB4D520")]
			set
			{
			}
		}

		[Token(Token = "0x1700018E")]
		public string Format
		{
			[Token(Token = "0x600114E")]
			[Address(RVA = "0x1C346EC", Offset = "0x1C346EC", VA = "0x1C346EC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D530", Offset = "0xB4D530")]
			get
			{
				return null;
			}
			[Token(Token = "0x600114F")]
			[Address(RVA = "0x1C346F4", Offset = "0x1C346F4", VA = "0x1C346F4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D540", Offset = "0xB4D540")]
			set
			{
			}
		}

		[Token(Token = "0x1700018F")]
		internal string InternalId
		{
			[Token(Token = "0x6001150")]
			[Address(RVA = "0x1C346FC", Offset = "0x1C346FC", VA = "0x1C346FC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001151")]
		[Address(RVA = "0x1C34704", Offset = "0x1C34704", VA = "0x1C34704")]
		public JsonSchema()
		{
		}

		[Token(Token = "0x6001152")]
		[Address(RVA = "0x1C347B0", Offset = "0x1C347B0", VA = "0x1C347B0")]
		public static JsonSchema Read(JsonReader reader)
		{
			return null;
		}

		[Token(Token = "0x6001153")]
		[Address(RVA = "0x1C34814", Offset = "0x1C34814", VA = "0x1C34814")]
		public static JsonSchema Read(JsonReader reader, JsonSchemaResolver resolver)
		{
			return null;
		}

		[Token(Token = "0x6001154")]
		[Address(RVA = "0x1C349A8", Offset = "0x1C349A8", VA = "0x1C349A8")]
		public static JsonSchema Parse(string json)
		{
			return null;
		}

		[Token(Token = "0x6001155")]
		[Address(RVA = "0x1C34A0C", Offset = "0x1C34A0C", VA = "0x1C34A0C")]
		public static JsonSchema Parse(string json, JsonSchemaResolver resolver)
		{
			return null;
		}

		[Token(Token = "0x6001156")]
		[Address(RVA = "0x1C34AB8", Offset = "0x1C34AB8", VA = "0x1C34AB8")]
		public void WriteTo(JsonWriter writer)
		{
		}

		[Token(Token = "0x6001157")]
		[Address(RVA = "0x1C34B2C", Offset = "0x1C34B2C", VA = "0x1C34B2C")]
		public void WriteTo(JsonWriter writer, JsonSchemaResolver resolver)
		{
		}

		[Token(Token = "0x6001158")]
		[Address(RVA = "0x1C34BE8", Offset = "0x1C34BE8", VA = "0x1C34BE8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000250")]
	internal class JsonSchemaBuilder
	{
		[Token(Token = "0x200032F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49E0C", Offset = "0xB49E0C")]
		private sealed class <>c__DisplayClass23_0
		{
			[Token(Token = "0x4000F1C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public JsonSchemaType type;

			[Token(Token = "0x600163D")]
			[Address(RVA = "0x1C3895C", Offset = "0x1C3895C", VA = "0x1C3895C")]
			public <>c__DisplayClass23_0()
			{
			}

			[Token(Token = "0x600163E")]
			[Address(RVA = "0x1C38964", Offset = "0x1C38964", VA = "0x1C38964")]
			internal bool <MapType>b__0(KeyValuePair<string, JsonSchemaType> kv)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4000C5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private JsonReader _reader;

		[Token(Token = "0x4000C5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly IList<JsonSchema> _stack;

		[Token(Token = "0x4000C60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly JsonSchemaResolver _resolver;

		[Token(Token = "0x4000C61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private JsonSchema _currentSchema;

		[Token(Token = "0x17000190")]
		private JsonSchema CurrentSchema
		{
			[Token(Token = "0x600115B")]
			[Address(RVA = "0x1C34FA0", Offset = "0x1C34FA0", VA = "0x1C34FA0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001159")]
		[Address(RVA = "0x1C34CE0", Offset = "0x1C34CE0", VA = "0x1C34CE0")]
		private void Push(JsonSchema value)
		{
		}

		[Token(Token = "0x600115A")]
		[Address(RVA = "0x1C34E3C", Offset = "0x1C34E3C", VA = "0x1C34E3C")]
		private JsonSchema Pop()
		{
			return null;
		}

		[Token(Token = "0x600115C")]
		[Address(RVA = "0x1C348C0", Offset = "0x1C348C0", VA = "0x1C348C0")]
		public JsonSchemaBuilder(JsonSchemaResolver resolver)
		{
		}

		[Token(Token = "0x600115D")]
		[Address(RVA = "0x1C34940", Offset = "0x1C34940", VA = "0x1C34940")]
		internal JsonSchema Parse(JsonReader reader)
		{
			return null;
		}

		[Token(Token = "0x600115E")]
		[Address(RVA = "0x1C34FA8", Offset = "0x1C34FA8", VA = "0x1C34FA8")]
		private JsonSchema BuildSchema()
		{
			return null;
		}

		[Token(Token = "0x600115F")]
		[Address(RVA = "0x1C355B4", Offset = "0x1C355B4", VA = "0x1C355B4")]
		private void ProcessSchemaProperty(string propertyName)
		{
		}

		[Token(Token = "0x6001160")]
		[Address(RVA = "0x1C38648", Offset = "0x1C38648", VA = "0x1C38648")]
		private void ProcessExtends()
		{
		}

		[Token(Token = "0x6001161")]
		[Address(RVA = "0x1C3839C", Offset = "0x1C3839C", VA = "0x1C3839C")]
		private void ProcessEnum()
		{
		}

		[Token(Token = "0x6001162")]
		[Address(RVA = "0x1C37C4C", Offset = "0x1C37C4C", VA = "0x1C37C4C")]
		private void ProcessOptions()
		{
		}

		[Token(Token = "0x6001163")]
		[Address(RVA = "0x1C37C14", Offset = "0x1C37C14", VA = "0x1C37C14")]
		private void ProcessDefault()
		{
		}

		[Token(Token = "0x6001164")]
		[Address(RVA = "0x1C37768", Offset = "0x1C37768", VA = "0x1C37768")]
		private void ProcessIdentity()
		{
		}

		[Token(Token = "0x6001165")]
		[Address(RVA = "0x1C37384", Offset = "0x1C37384", VA = "0x1C37384")]
		private void ProcessAdditionalProperties()
		{
		}

		[Token(Token = "0x6001166")]
		[Address(RVA = "0x1C3745C", Offset = "0x1C3745C", VA = "0x1C3745C")]
		private void ProcessPatternProperties()
		{
		}

		[Token(Token = "0x6001167")]
		[Address(RVA = "0x1C37024", Offset = "0x1C37024", VA = "0x1C37024")]
		private void ProcessItems()
		{
		}

		[Token(Token = "0x6001168")]
		[Address(RVA = "0x1C36BE4", Offset = "0x1C36BE4", VA = "0x1C36BE4")]
		private void ProcessProperties()
		{
		}

		[Token(Token = "0x6001169")]
		[Address(RVA = "0x1C367F4", Offset = "0x1C367F4", VA = "0x1C367F4")]
		private JsonSchemaType? ProcessType()
		{
			return null;
		}

		[Token(Token = "0x600116A")]
		[Address(RVA = "0x1C3867C", Offset = "0x1C3867C", VA = "0x1C3867C")]
		internal static JsonSchemaType MapType(string type)
		{
			return default(JsonSchemaType);
		}

		[Token(Token = "0x600116B")]
		[Address(RVA = "0x1C38848", Offset = "0x1C38848", VA = "0x1C38848")]
		internal static string MapType(JsonSchemaType type)
		{
			return null;
		}
	}
	[Token(Token = "0x2000251")]
	internal static class JsonSchemaConstants
	{
		[Token(Token = "0x4000C62")]
		public const string TypePropertyName = "type";

		[Token(Token = "0x4000C63")]
		public const string PropertiesPropertyName = "properties";

		[Token(Token = "0x4000C64")]
		public const string ItemsPropertyName = "items";

		[Token(Token = "0x4000C65")]
		public const string RequiredPropertyName = "required";

		[Token(Token = "0x4000C66")]
		public const string PatternPropertiesPropertyName = "patternProperties";

		[Token(Token = "0x4000C67")]
		public const string AdditionalPropertiesPropertyName = "additionalProperties";

		[Token(Token = "0x4000C68")]
		public const string RequiresPropertyName = "requires";

		[Token(Token = "0x4000C69")]
		public const string IdentityPropertyName = "identity";

		[Token(Token = "0x4000C6A")]
		public const string MinimumPropertyName = "minimum";

		[Token(Token = "0x4000C6B")]
		public const string MaximumPropertyName = "maximum";

		[Token(Token = "0x4000C6C")]
		public const string ExclusiveMinimumPropertyName = "exclusiveMinimum";

		[Token(Token = "0x4000C6D")]
		public const string ExclusiveMaximumPropertyName = "exclusiveMaximum";

		[Token(Token = "0x4000C6E")]
		public const string MinimumItemsPropertyName = "minItems";

		[Token(Token = "0x4000C6F")]
		public const string MaximumItemsPropertyName = "maxItems";

		[Token(Token = "0x4000C70")]
		public const string PatternPropertyName = "pattern";

		[Token(Token = "0x4000C71")]
		public const string MaximumLengthPropertyName = "maxLength";

		[Token(Token = "0x4000C72")]
		public const string MinimumLengthPropertyName = "minLength";

		[Token(Token = "0x4000C73")]
		public const string EnumPropertyName = "enum";

		[Token(Token = "0x4000C74")]
		public const string OptionsPropertyName = "options";

		[Token(Token = "0x4000C75")]
		public const string ReadOnlyPropertyName = "readonly";

		[Token(Token = "0x4000C76")]
		public const string TitlePropertyName = "title";

		[Token(Token = "0x4000C77")]
		public const string DescriptionPropertyName = "description";

		[Token(Token = "0x4000C78")]
		public const string FormatPropertyName = "format";

		[Token(Token = "0x4000C79")]
		public const string DefaultPropertyName = "default";

		[Token(Token = "0x4000C7A")]
		public const string TransientPropertyName = "transient";

		[Token(Token = "0x4000C7B")]
		public const string DivisibleByPropertyName = "divisibleBy";

		[Token(Token = "0x4000C7C")]
		public const string HiddenPropertyName = "hidden";

		[Token(Token = "0x4000C7D")]
		public const string DisallowPropertyName = "disallow";

		[Token(Token = "0x4000C7E")]
		public const string ExtendsPropertyName = "extends";

		[Token(Token = "0x4000C7F")]
		public const string IdPropertyName = "id";

		[Token(Token = "0x4000C80")]
		public const string OptionValuePropertyName = "value";

		[Token(Token = "0x4000C81")]
		public const string OptionLabelPropertyName = "label";

		[Token(Token = "0x4000C82")]
		public const string ReferencePropertyName = "$ref";

		[Token(Token = "0x4000C83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly IDictionary<string, JsonSchemaType> JsonSchemaTypeMapping;
	}
	[Token(Token = "0x2000252")]
	public class JsonSchemaException : Exception
	{
		[Token(Token = "0x4000C84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B868", Offset = "0xB4B868")]
		private int <LineNumber>k__BackingField;

		[Token(Token = "0x4000C85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B878", Offset = "0xB4B878")]
		private int <LinePosition>k__BackingField;

		[Token(Token = "0x17000191")]
		public int LineNumber
		{
			[Token(Token = "0x600116D")]
			[Address(RVA = "0x1C38C0C", Offset = "0x1C38C0C", VA = "0x1C38C0C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D550", Offset = "0xB4D550")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600116E")]
			[Address(RVA = "0x1C38C14", Offset = "0x1C38C14", VA = "0x1C38C14")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D560", Offset = "0xB4D560")]
			private set
			{
			}
		}

		[Token(Token = "0x17000192")]
		public int LinePosition
		{
			[Token(Token = "0x600116F")]
			[Address(RVA = "0x1C38C1C", Offset = "0x1C38C1C", VA = "0x1C38C1C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D570", Offset = "0xB4D570")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001170")]
			[Address(RVA = "0x1C38C24", Offset = "0x1C38C24", VA = "0x1C38C24")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D580", Offset = "0xB4D580")]
			private set
			{
			}
		}

		[Token(Token = "0x6001171")]
		[Address(RVA = "0x1C38C2C", Offset = "0x1C38C2C", VA = "0x1C38C2C")]
		public JsonSchemaException()
		{
		}

		[Token(Token = "0x6001172")]
		[Address(RVA = "0x1C38C94", Offset = "0x1C38C94", VA = "0x1C38C94")]
		public JsonSchemaException(string message)
		{
		}

		[Token(Token = "0x6001173")]
		[Address(RVA = "0x1C38D0C", Offset = "0x1C38D0C", VA = "0x1C38D0C")]
		public JsonSchemaException(string message, Exception innerException)
		{
		}

		[Token(Token = "0x6001174")]
		[Address(RVA = "0x1C38D8C", Offset = "0x1C38D8C", VA = "0x1C38D8C")]
		internal JsonSchemaException(string message, Exception innerException, int lineNumber, int linePosition)
		{
		}
	}
	[Token(Token = "0x2000253")]
	public class JsonSchemaGenerator
	{
		[Token(Token = "0x2000330")]
		private class TypeSchema
		{
			[Token(Token = "0x4000F1D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4BC00", Offset = "0xB4BC00")]
			private Type <Type>k__BackingField;

			[Token(Token = "0x4000F1E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4BC10", Offset = "0xB4BC10")]
			private JsonSchema <Schema>k__BackingField;

			[Token(Token = "0x17000251")]
			public Type Type
			{
				[Token(Token = "0x600163F")]
				[Address(RVA = "0x183240C", Offset = "0x183240C", VA = "0x183240C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4E43C", Offset = "0xB4E43C")]
				get
				{
					return null;
				}
				[Token(Token = "0x6001640")]
				[Address(RVA = "0x1832414", Offset = "0x1832414", VA = "0x1832414")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4E44C", Offset = "0xB4E44C")]
				private set
				{
				}
			}

			[Token(Token = "0x17000252")]
			public JsonSchema Schema
			{
				[Token(Token = "0x6001641")]
				[Address(RVA = "0x183241C", Offset = "0x183241C", VA = "0x183241C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4E45C", Offset = "0xB4E45C")]
				get
				{
					return null;
				}
				[Token(Token = "0x6001642")]
				[Address(RVA = "0x1832424", Offset = "0x1832424", VA = "0x1832424")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4E46C", Offset = "0xB4E46C")]
				private set
				{
				}
			}

			[Token(Token = "0x6001643")]
			[Address(RVA = "0x183242C", Offset = "0x183242C", VA = "0x183242C")]
			public TypeSchema(Type type, JsonSchema schema)
			{
			}
		}

		[Token(Token = "0x2000331")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49E1C", Offset = "0xB49E1C")]
		private sealed class <>c__DisplayClass23_0
		{
			[Token(Token = "0x4000F1F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Type type;

			[Token(Token = "0x6001644")]
			[Address(RVA = "0x1832378", Offset = "0x1832378", VA = "0x1832378")]
			public <>c__DisplayClass23_0()
			{
			}

			[Token(Token = "0x6001645")]
			[Address(RVA = "0x1832380", Offset = "0x1832380", VA = "0x1832380")]
			internal bool <GenerateInternal>b__0(TypeSchema tc)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4000C86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B888", Offset = "0xB4B888")]
		private UndefinedSchemaIdHandling <UndefinedSchemaIdHandling>k__BackingField;

		[Token(Token = "0x4000C87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private IContractResolver _contractResolver;

		[Token(Token = "0x4000C88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private JsonSchemaResolver _resolver;

		[Token(Token = "0x4000C89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private IList<TypeSchema> _stack;

		[Token(Token = "0x4000C8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private JsonSchema _currentSchema;

		[Token(Token = "0x17000193")]
		public UndefinedSchemaIdHandling UndefinedSchemaIdHandling
		{
			[Token(Token = "0x6001175")]
			[Address(RVA = "0x1C38E24", Offset = "0x1C38E24", VA = "0x1C38E24")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D590", Offset = "0xB4D590")]
			get
			{
				return default(UndefinedSchemaIdHandling);
			}
			[Token(Token = "0x6001176")]
			[Address(RVA = "0x1C38E2C", Offset = "0x1C38E2C", VA = "0x1C38E2C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D5A0", Offset = "0xB4D5A0")]
			set
			{
			}
		}

		[Token(Token = "0x17000194")]
		public IContractResolver ContractResolver
		{
			[Token(Token = "0x6001177")]
			[Address(RVA = "0x1C38E34", Offset = "0x1C38E34", VA = "0x1C38E34")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001178")]
			[Address(RVA = "0x1C38EAC", Offset = "0x1C38EAC", VA = "0x1C38EAC")]
			set
			{
			}
		}

		[Token(Token = "0x17000195")]
		private JsonSchema CurrentSchema
		{
			[Token(Token = "0x6001179")]
			[Address(RVA = "0x1C38EB4", Offset = "0x1C38EB4", VA = "0x1C38EB4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600117A")]
		[Address(RVA = "0x1C38EBC", Offset = "0x1C38EBC", VA = "0x1C38EBC")]
		private void Push(TypeSchema typeSchema)
		{
		}

		[Token(Token = "0x600117B")]
		[Address(RVA = "0x1C39058", Offset = "0x1C39058", VA = "0x1C39058")]
		private TypeSchema Pop()
		{
			return null;
		}

		[Token(Token = "0x600117C")]
		[Address(RVA = "0x1C392B8", Offset = "0x1C392B8", VA = "0x1C392B8")]
		public JsonSchema Generate(Type type)
		{
			return null;
		}

		[Token(Token = "0x600117D")]
		[Address(RVA = "0x1C393E8", Offset = "0x1C393E8", VA = "0x1C393E8")]
		public JsonSchema Generate(Type type, JsonSchemaResolver resolver)
		{
			return null;
		}

		[Token(Token = "0x600117E")]
		[Address(RVA = "0x1C393F0", Offset = "0x1C393F0", VA = "0x1C393F0")]
		public JsonSchema Generate(Type type, bool rootSchemaNullable)
		{
			return null;
		}

		[Token(Token = "0x600117F")]
		[Address(RVA = "0x1C39330", Offset = "0x1C39330", VA = "0x1C39330")]
		public JsonSchema Generate(Type type, JsonSchemaResolver resolver, bool rootSchemaNullable)
		{
			return null;
		}

		[Token(Token = "0x6001180")]
		[Address(RVA = "0x1C3A728", Offset = "0x1C3A728", VA = "0x1C3A728")]
		private string GetTitle(Type type)
		{
			return null;
		}

		[Token(Token = "0x6001181")]
		[Address(RVA = "0x1C3A7CC", Offset = "0x1C3A7CC", VA = "0x1C3A7CC")]
		private string GetDescription(Type type)
		{
			return null;
		}

		[Token(Token = "0x6001182")]
		[Address(RVA = "0x1C3A898", Offset = "0x1C3A898", VA = "0x1C3A898")]
		private string GetTypeId(Type type, bool explicitOnly)
		{
			return null;
		}

		[Token(Token = "0x6001183")]
		[Address(RVA = "0x1C3946C", Offset = "0x1C3946C", VA = "0x1C3946C")]
		private JsonSchema GenerateInternal(Type type, Required valueRequired, bool required)
		{
			return null;
		}

		[Token(Token = "0x6001184")]
		[Address(RVA = "0x1C3AAA8", Offset = "0x1C3AAA8", VA = "0x1C3AAA8")]
		private JsonSchemaType AddNullType(JsonSchemaType type, Required valueRequired)
		{
			return default(JsonSchemaType);
		}

		[Token(Token = "0x6001185")]
		[Address(RVA = "0x1C3B244", Offset = "0x1C3B244", VA = "0x1C3B244")]
		private bool HasFlag(DefaultValueHandling value, DefaultValueHandling flag)
		{
			return default(bool);
		}

		[Token(Token = "0x6001186")]
		[Address(RVA = "0x1C3ACD8", Offset = "0x1C3ACD8", VA = "0x1C3ACD8")]
		private void GenerateObjectSchema(Type type, JsonObjectContract contract)
		{
		}

		[Token(Token = "0x6001187")]
		[Address(RVA = "0x1C3B214", Offset = "0x1C3B214", VA = "0x1C3B214")]
		private void GenerateISerializableContract(Type type, JsonISerializableContract contract)
		{
		}

		[Token(Token = "0x6001188")]
		[Address(RVA = "0x1C3A9B0", Offset = "0x1C3A9B0", VA = "0x1C3A9B0")]
		internal static bool HasFlag(JsonSchemaType? value, JsonSchemaType flag)
		{
			return default(bool);
		}

		[Token(Token = "0x6001189")]
		[Address(RVA = "0x1C3AAB8", Offset = "0x1C3AAB8", VA = "0x1C3AAB8")]
		private JsonSchemaType GetJsonSchemaType(Type type, Required valueRequired)
		{
			return default(JsonSchemaType);
		}

		[Token(Token = "0x600118A")]
		[Address(RVA = "0x1C3B250", Offset = "0x1C3B250", VA = "0x1C3B250")]
		public JsonSchemaGenerator()
		{
		}
	}
	[Token(Token = "0x2000254")]
	internal class JsonSchemaModel
	{
		[Token(Token = "0x4000C8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B898", Offset = "0xB4B898")]
		private bool <Required>k__BackingField;

		[Token(Token = "0x4000C8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B8A8", Offset = "0xB4B8A8")]
		private JsonSchemaType <Type>k__BackingField;

		[Token(Token = "0x4000C8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B8B8", Offset = "0xB4B8B8")]
		private int? <MinimumLength>k__BackingField;

		[Token(Token = "0x4000C8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B8C8", Offset = "0xB4B8C8")]
		private int? <MaximumLength>k__BackingField;

		[Token(Token = "0x4000C8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B8D8", Offset = "0xB4B8D8")]
		private double? <DivisibleBy>k__BackingField;

		[Token(Token = "0x4000C90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B8E8", Offset = "0xB4B8E8")]
		private double? <Minimum>k__BackingField;

		[Token(Token = "0x4000C91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B8F8", Offset = "0xB4B8F8")]
		private double? <Maximum>k__BackingField;

		[Token(Token = "0x4000C92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B908", Offset = "0xB4B908")]
		private bool <ExclusiveMinimum>k__BackingField;

		[Token(Token = "0x4000C93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B918", Offset = "0xB4B918")]
		private bool <ExclusiveMaximum>k__BackingField;

		[Token(Token = "0x4000C94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B928", Offset = "0xB4B928")]
		private int? <MinimumItems>k__BackingField;

		[Token(Token = "0x4000C95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B938", Offset = "0xB4B938")]
		private int? <MaximumItems>k__BackingField;

		[Token(Token = "0x4000C96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B948", Offset = "0xB4B948")]
		private IList<string> <Patterns>k__BackingField;

		[Token(Token = "0x4000C97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B958", Offset = "0xB4B958")]
		private IList<JsonSchemaModel> <Items>k__BackingField;

		[Token(Token = "0x4000C98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B968", Offset = "0xB4B968")]
		private IDictionary<string, JsonSchemaModel> <Properties>k__BackingField;

		[Token(Token = "0x4000C99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B978", Offset = "0xB4B978")]
		private IDictionary<string, JsonSchemaModel> <PatternProperties>k__BackingField;

		[Token(Token = "0x4000C9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B988", Offset = "0xB4B988")]
		private JsonSchemaModel <AdditionalProperties>k__BackingField;

		[Token(Token = "0x4000C9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B998", Offset = "0xB4B998")]
		private bool <AllowAdditionalProperties>k__BackingField;

		[Token(Token = "0x4000C9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B9A8", Offset = "0xB4B9A8")]
		private IList<JToken> <Enum>k__BackingField;

		[Token(Token = "0x4000C9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B9B8", Offset = "0xB4B9B8")]
		private JsonSchemaType <Disallow>k__BackingField;

		[Token(Token = "0x17000196")]
		public bool Required
		{
			[Token(Token = "0x600118B")]
			[Address(RVA = "0x18324BC", Offset = "0x18324BC", VA = "0x18324BC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D5B0", Offset = "0xB4D5B0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600118C")]
			[Address(RVA = "0x18324C4", Offset = "0x18324C4", VA = "0x18324C4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D5C0", Offset = "0xB4D5C0")]
			set
			{
			}
		}

		[Token(Token = "0x17000197")]
		public JsonSchemaType Type
		{
			[Token(Token = "0x600118D")]
			[Address(RVA = "0x18324D0", Offset = "0x18324D0", VA = "0x18324D0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D5D0", Offset = "0xB4D5D0")]
			get
			{
				return default(JsonSchemaType);
			}
			[Token(Token = "0x600118E")]
			[Address(RVA = "0x18324D8", Offset = "0x18324D8", VA = "0x18324D8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D5E0", Offset = "0xB4D5E0")]
			set
			{
			}
		}

		[Token(Token = "0x17000198")]
		public int? MinimumLength
		{
			[Token(Token = "0x600118F")]
			[Address(RVA = "0x18324E0", Offset = "0x18324E0", VA = "0x18324E0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D5F0", Offset = "0xB4D5F0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001190")]
			[Address(RVA = "0x18324E8", Offset = "0x18324E8", VA = "0x18324E8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D600", Offset = "0xB4D600")]
			set
			{
			}
		}

		[Token(Token = "0x17000199")]
		public int? MaximumLength
		{
			[Token(Token = "0x6001191")]
			[Address(RVA = "0x18324F0", Offset = "0x18324F0", VA = "0x18324F0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D610", Offset = "0xB4D610")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001192")]
			[Address(RVA = "0x18324F8", Offset = "0x18324F8", VA = "0x18324F8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D620", Offset = "0xB4D620")]
			set
			{
			}
		}

		[Token(Token = "0x1700019A")]
		public double? DivisibleBy
		{
			[Token(Token = "0x6001193")]
			[Address(RVA = "0x1832500", Offset = "0x1832500", VA = "0x1832500")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D630", Offset = "0xB4D630")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001194")]
			[Address(RVA = "0x183250C", Offset = "0x183250C", VA = "0x183250C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D640", Offset = "0xB4D640")]
			set
			{
			}
		}

		[Token(Token = "0x1700019B")]
		public double? Minimum
		{
			[Token(Token = "0x6001195")]
			[Address(RVA = "0x1832514", Offset = "0x1832514", VA = "0x1832514")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D650", Offset = "0xB4D650")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001196")]
			[Address(RVA = "0x1832520", Offset = "0x1832520", VA = "0x1832520")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D660", Offset = "0xB4D660")]
			set
			{
			}
		}

		[Token(Token = "0x1700019C")]
		public double? Maximum
		{
			[Token(Token = "0x6001197")]
			[Address(RVA = "0x1832528", Offset = "0x1832528", VA = "0x1832528")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D670", Offset = "0xB4D670")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001198")]
			[Address(RVA = "0x1832534", Offset = "0x1832534", VA = "0x1832534")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D680", Offset = "0xB4D680")]
			set
			{
			}
		}

		[Token(Token = "0x1700019D")]
		public bool ExclusiveMinimum
		{
			[Token(Token = "0x6001199")]
			[Address(RVA = "0x183253C", Offset = "0x183253C", VA = "0x183253C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D690", Offset = "0xB4D690")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600119A")]
			[Address(RVA = "0x1832544", Offset = "0x1832544", VA = "0x1832544")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D6A0", Offset = "0xB4D6A0")]
			set
			{
			}
		}

		[Token(Token = "0x1700019E")]
		public bool ExclusiveMaximum
		{
			[Token(Token = "0x600119B")]
			[Address(RVA = "0x1832550", Offset = "0x1832550", VA = "0x1832550")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D6B0", Offset = "0xB4D6B0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600119C")]
			[Address(RVA = "0x1832558", Offset = "0x1832558", VA = "0x1832558")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D6C0", Offset = "0xB4D6C0")]
			set
			{
			}
		}

		[Token(Token = "0x1700019F")]
		public int? MinimumItems
		{
			[Token(Token = "0x600119D")]
			[Address(RVA = "0x1832564", Offset = "0x1832564", VA = "0x1832564")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D6D0", Offset = "0xB4D6D0")]
			get
			{
				return null;
			}
			[Token(Token = "0x600119E")]
			[Address(RVA = "0x183256C", Offset = "0x183256C", VA = "0x183256C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D6E0", Offset = "0xB4D6E0")]
			set
			{
			}
		}

		[Token(Token = "0x170001A0")]
		public int? MaximumItems
		{
			[Token(Token = "0x600119F")]
			[Address(RVA = "0x1832574", Offset = "0x1832574", VA = "0x1832574")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D6F0", Offset = "0xB4D6F0")]
			get
			{
				return null;
			}
			[Token(Token = "0x60011A0")]
			[Address(RVA = "0x183257C", Offset = "0x183257C", VA = "0x183257C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D700", Offset = "0xB4D700")]
			set
			{
			}
		}

		[Token(Token = "0x170001A1")]
		public IList<string> Patterns
		{
			[Token(Token = "0x60011A1")]
			[Address(RVA = "0x1832584", Offset = "0x1832584", VA = "0x1832584")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D710", Offset = "0xB4D710")]
			get
			{
				return null;
			}
			[Token(Token = "0x60011A2")]
			[Address(RVA = "0x183258C", Offset = "0x183258C", VA = "0x183258C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D720", Offset = "0xB4D720")]
			set
			{
			}
		}

		[Token(Token = "0x170001A2")]
		public IList<JsonSchemaModel> Items
		{
			[Token(Token = "0x60011A3")]
			[Address(RVA = "0x1832594", Offset = "0x1832594", VA = "0x1832594")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D730", Offset = "0xB4D730")]
			get
			{
				return null;
			}
			[Token(Token = "0x60011A4")]
			[Address(RVA = "0x183259C", Offset = "0x183259C", VA = "0x183259C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D740", Offset = "0xB4D740")]
			set
			{
			}
		}

		[Token(Token = "0x170001A3")]
		public IDictionary<string, JsonSchemaModel> Properties
		{
			[Token(Token = "0x60011A5")]
			[Address(RVA = "0x18325A4", Offset = "0x18325A4", VA = "0x18325A4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D750", Offset = "0xB4D750")]
			get
			{
				return null;
			}
			[Token(Token = "0x60011A6")]
			[Address(RVA = "0x18325AC", Offset = "0x18325AC", VA = "0x18325AC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D760", Offset = "0xB4D760")]
			set
			{
			}
		}

		[Token(Token = "0x170001A4")]
		public IDictionary<string, JsonSchemaModel> PatternProperties
		{
			[Token(Token = "0x60011A7")]
			[Address(RVA = "0x18325B4", Offset = "0x18325B4", VA = "0x18325B4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D770", Offset = "0xB4D770")]
			get
			{
				return null;
			}
			[Token(Token = "0x60011A8")]
			[Address(RVA = "0x18325BC", Offset = "0x18325BC", VA = "0x18325BC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D780", Offset = "0xB4D780")]
			set
			{
			}
		}

		[Token(Token = "0x170001A5")]
		public JsonSchemaModel AdditionalProperties
		{
			[Token(Token = "0x60011A9")]
			[Address(RVA = "0x18325C4", Offset = "0x18325C4", VA = "0x18325C4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D790", Offset = "0xB4D790")]
			get
			{
				return null;
			}
			[Token(Token = "0x60011AA")]
			[Address(RVA = "0x18325CC", Offset = "0x18325CC", VA = "0x18325CC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D7A0", Offset = "0xB4D7A0")]
			set
			{
			}
		}

		[Token(Token = "0x170001A6")]
		public bool AllowAdditionalProperties
		{
			[Token(Token = "0x60011AB")]
			[Address(RVA = "0x18325D4", Offset = "0x18325D4", VA = "0x18325D4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D7B0", Offset = "0xB4D7B0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60011AC")]
			[Address(RVA = "0x18325DC", Offset = "0x18325DC", VA = "0x18325DC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D7C0", Offset = "0xB4D7C0")]
			set
			{
			}
		}

		[Token(Token = "0x170001A7")]
		public IList<JToken> Enum
		{
			[Token(Token = "0x60011AD")]
			[Address(RVA = "0x18325E8", Offset = "0x18325E8", VA = "0x18325E8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D7D0", Offset = "0xB4D7D0")]
			get
			{
				return null;
			}
			[Token(Token = "0x60011AE")]
			[Address(RVA = "0x18325F0", Offset = "0x18325F0", VA = "0x18325F0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D7E0", Offset = "0xB4D7E0")]
			set
			{
			}
		}

		[Token(Token = "0x170001A8")]
		public JsonSchemaType Disallow
		{
			[Token(Token = "0x60011AF")]
			[Address(RVA = "0x18325F8", Offset = "0x18325F8", VA = "0x18325F8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D7F0", Offset = "0xB4D7F0")]
			get
			{
				return default(JsonSchemaType);
			}
			[Token(Token = "0x60011B0")]
			[Address(RVA = "0x1832600", Offset = "0x1832600", VA = "0x1832600")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D800", Offset = "0xB4D800")]
			set
			{
			}
		}

		[Token(Token = "0x60011B1")]
		[Address(RVA = "0x1832608", Offset = "0x1832608", VA = "0x1832608")]
		public JsonSchemaModel()
		{
		}

		[Token(Token = "0x60011B2")]
		[Address(RVA = "0x1832640", Offset = "0x1832640", VA = "0x1832640")]
		public static JsonSchemaModel Create(IList<JsonSchema> schemata)
		{
			return null;
		}

		[Token(Token = "0x60011B3")]
		[Address(RVA = "0x18328DC", Offset = "0x18328DC", VA = "0x18328DC")]
		private static void Combine(JsonSchemaModel model, JsonSchema schema)
		{
		}
	}
	[Token(Token = "0x2000255")]
	internal class JsonSchemaModelBuilder
	{
		[Token(Token = "0x4000C9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private JsonSchemaNodeCollection _nodes;

		[Token(Token = "0x4000C9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Dictionary<JsonSchemaNode, JsonSchemaModel> _nodeModels;

		[Token(Token = "0x4000CA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private JsonSchemaNode _node;

		[Token(Token = "0x60011B4")]
		[Address(RVA = "0x1832DF4", Offset = "0x1832DF4", VA = "0x1832DF4")]
		public JsonSchemaModel Build(JsonSchema schema)
		{
			return null;
		}

		[Token(Token = "0x60011B5")]
		[Address(RVA = "0x1832EF0", Offset = "0x1832EF0", VA = "0x1832EF0")]
		public JsonSchemaNode AddSchema(JsonSchemaNode existingNode, JsonSchema schema)
		{
			return null;
		}

		[Token(Token = "0x60011B6")]
		[Address(RVA = "0x1833E04", Offset = "0x1833E04", VA = "0x1833E04")]
		public void AddProperties(IDictionary<string, JsonSchema> source, IDictionary<string, JsonSchemaNode> target)
		{
		}

		[Token(Token = "0x60011B7")]
		[Address(RVA = "0x1834298", Offset = "0x1834298", VA = "0x1834298")]
		public void AddProperty(IDictionary<string, JsonSchemaNode> target, string propertyName, JsonSchema schema)
		{
		}

		[Token(Token = "0x60011B8")]
		[Address(RVA = "0x18340D4", Offset = "0x18340D4", VA = "0x18340D4")]
		public void AddItem(JsonSchemaNode parentNode, int index, JsonSchema schema)
		{
		}

		[Token(Token = "0x60011B9")]
		[Address(RVA = "0x1834224", Offset = "0x1834224", VA = "0x1834224")]
		public void AddAdditionalProperties(JsonSchemaNode parentNode, JsonSchema schema)
		{
		}

		[Token(Token = "0x60011BA")]
		[Address(RVA = "0x18333A8", Offset = "0x18333A8", VA = "0x18333A8")]
		private JsonSchemaModel BuildNodeModel(JsonSchemaNode node)
		{
			return null;
		}

		[Token(Token = "0x60011BB")]
		[Address(RVA = "0x183441C", Offset = "0x183441C", VA = "0x183441C")]
		public JsonSchemaModelBuilder()
		{
		}
	}
	[Token(Token = "0x2000256")]
	internal class JsonSchemaNode
	{
		[Serializable]
		[Token(Token = "0x2000332")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49E2C", Offset = "0xB49E2C")]
		private sealed class <>c
		{
			[Token(Token = "0x4000F20")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000F21")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<JsonSchema, string> <>9__27_0;

			[Token(Token = "0x4000F22")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<string, string> <>9__27_1;

			[Token(Token = "0x6001647")]
			[Address(RVA = "0x183470C", Offset = "0x183470C", VA = "0x183470C")]
			public <>c()
			{
			}

			[Token(Token = "0x6001648")]
			[Address(RVA = "0x1834714", Offset = "0x1834714", VA = "0x1834714")]
			internal string <GetId>b__27_0(JsonSchema s)
			{
				return null;
			}

			[Token(Token = "0x6001649")]
			[Address(RVA = "0x1834744", Offset = "0x1834744", VA = "0x1834744")]
			internal string <GetId>b__27_1(string id)
			{
				return null;
			}
		}

		[Token(Token = "0x4000CA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B9C8", Offset = "0xB4B9C8")]
		private string <Id>k__BackingField;

		[Token(Token = "0x4000CA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B9D8", Offset = "0xB4B9D8")]
		private ReadOnlyCollection<JsonSchema> <Schemas>k__BackingField;

		[Token(Token = "0x4000CA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B9E8", Offset = "0xB4B9E8")]
		private Dictionary<string, JsonSchemaNode> <Properties>k__BackingField;

		[Token(Token = "0x4000CA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B9F8", Offset = "0xB4B9F8")]
		private Dictionary<string, JsonSchemaNode> <PatternProperties>k__BackingField;

		[Token(Token = "0x4000CA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4BA08", Offset = "0xB4BA08")]
		private List<JsonSchemaNode> <Items>k__BackingField;

		[Token(Token = "0x4000CA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4BA18", Offset = "0xB4BA18")]
		private JsonSchemaNode <AdditionalProperties>k__BackingField;

		[Token(Token = "0x170001A9")]
		public string Id
		{
			[Token(Token = "0x60011BC")]
			[Address(RVA = "0x18344A8", Offset = "0x18344A8", VA = "0x18344A8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D810", Offset = "0xB4D810")]
			get
			{
				return null;
			}
			[Token(Token = "0x60011BD")]
			[Address(RVA = "0x18344B0", Offset = "0x18344B0", VA = "0x18344B0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D820", Offset = "0xB4D820")]
			private set
			{
			}
		}

		[Token(Token = "0x170001AA")]
		public ReadOnlyCollection<JsonSchema> Schemas
		{
			[Token(Token = "0x60011BE")]
			[Address(RVA = "0x1833A28", Offset = "0x1833A28", VA = "0x1833A28")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D830", Offset = "0xB4D830")]
			get
			{
				return null;
			}
			[Token(Token = "0x60011BF")]
			[Address(RVA = "0x18344B8", Offset = "0x18344B8", VA = "0x18344B8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D840", Offset = "0xB4D840")]
			private set
			{
			}
		}

		[Token(Token = "0x170001AB")]
		public Dictionary<string, JsonSchemaNode> Properties
		{
			[Token(Token = "0x60011C0")]
			[Address(RVA = "0x1833DFC", Offset = "0x1833DFC", VA = "0x1833DFC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D850", Offset = "0xB4D850")]
			get
			{
				return null;
			}
			[Token(Token = "0x60011C1")]
			[Address(RVA = "0x18344C0", Offset = "0x18344C0", VA = "0x18344C0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D860", Offset = "0xB4D860")]
			private set
			{
			}
		}

		[Token(Token = "0x170001AC")]
		public Dictionary<string, JsonSchemaNode> PatternProperties
		{
			[Token(Token = "0x60011C2")]
			[Address(RVA = "0x18340CC", Offset = "0x18340CC", VA = "0x18340CC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D870", Offset = "0xB4D870")]
			get
			{
				return null;
			}
			[Token(Token = "0x60011C3")]
			[Address(RVA = "0x18344C8", Offset = "0x18344C8", VA = "0x18344C8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D880", Offset = "0xB4D880")]
			private set
			{
			}
		}

		[Token(Token = "0x170001AD")]
		public List<JsonSchemaNode> Items
		{
			[Token(Token = "0x60011C4")]
			[Address(RVA = "0x1834404", Offset = "0x1834404", VA = "0x1834404")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D890", Offset = "0xB4D890")]
			get
			{
				return null;
			}
			[Token(Token = "0x60011C5")]
			[Address(RVA = "0x18344D0", Offset = "0x18344D0", VA = "0x18344D0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D8A0", Offset = "0xB4D8A0")]
			private set
			{
			}
		}

		[Token(Token = "0x170001AE")]
		public JsonSchemaNode AdditionalProperties
		{
			[Token(Token = "0x60011C6")]
			[Address(RVA = "0x183440C", Offset = "0x183440C", VA = "0x183440C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D8B0", Offset = "0xB4D8B0")]
			get
			{
				return null;
			}
			[Token(Token = "0x60011C7")]
			[Address(RVA = "0x1834414", Offset = "0x1834414", VA = "0x1834414")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D8C0", Offset = "0xB4D8C0")]
			set
			{
			}
		}

		[Token(Token = "0x60011C8")]
		[Address(RVA = "0x1833C28", Offset = "0x1833C28", VA = "0x1833C28")]
		public JsonSchemaNode(JsonSchema schema)
		{
		}

		[Token(Token = "0x60011C9")]
		[Address(RVA = "0x18344D8", Offset = "0x18344D8", VA = "0x18344D8")]
		private JsonSchemaNode(JsonSchemaNode source, JsonSchema schema)
		{
		}

		[Token(Token = "0x60011CA")]
		[Address(RVA = "0x1833D8C", Offset = "0x1833D8C", VA = "0x1833D8C")]
		public JsonSchemaNode Combine(JsonSchema schema)
		{
			return null;
		}

		[Token(Token = "0x60011CB")]
		[Address(RVA = "0x1833A30", Offset = "0x1833A30", VA = "0x1833A30")]
		public static string GetId(IEnumerable<JsonSchema> schemata)
		{
			return null;
		}
	}
	[Token(Token = "0x2000257")]
	internal class JsonSchemaNodeCollection : KeyedCollection<string, JsonSchemaNode>
	{
		[Token(Token = "0x60011CC")]
		[Address(RVA = "0x183474C", Offset = "0x183474C", VA = "0x183474C", Slot = "39")]
		protected override string GetKeyForItem(JsonSchemaNode item)
		{
			return null;
		}

		[Token(Token = "0x60011CD")]
		[Address(RVA = "0x1832EA0", Offset = "0x1832EA0", VA = "0x1832EA0")]
		public JsonSchemaNodeCollection()
		{
		}
	}
	[Token(Token = "0x2000258")]
	public class JsonSchemaResolver
	{
		[Token(Token = "0x2000333")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49E3C", Offset = "0xB49E3C")]
		private sealed class <>c__DisplayClass5_0
		{
			[Token(Token = "0x4000F23")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string id;

			[Token(Token = "0x600164A")]
			[Address(RVA = "0x18348C0", Offset = "0x18348C0", VA = "0x18348C0")]
			public <>c__DisplayClass5_0()
			{
			}

			[Token(Token = "0x600164B")]
			[Address(RVA = "0x18348C8", Offset = "0x18348C8", VA = "0x18348C8")]
			internal bool <GetSchema>b__0(JsonSchema s)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4000CA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4BA28", Offset = "0xB4BA28")]
		private IList<JsonSchema> <LoadedSchemas>k__BackingField;

		[Token(Token = "0x170001AF")]
		public IList<JsonSchema> LoadedSchemas
		{
			[Token(Token = "0x60011CE")]
			[Address(RVA = "0x1834778", Offset = "0x1834778", VA = "0x1834778")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D8D0", Offset = "0xB4D8D0")]
			get
			{
				return null;
			}
			[Token(Token = "0x60011CF")]
			[Address(RVA = "0x1834780", Offset = "0x1834780", VA = "0x1834780")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D8E0", Offset = "0xB4D8E0")]
			protected set
			{
			}
		}

		[Token(Token = "0x60011D0")]
		[Address(RVA = "0x1834788", Offset = "0x1834788", VA = "0x1834788")]
		public JsonSchemaResolver()
		{
		}

		[Token(Token = "0x60011D1")]
		[Address(RVA = "0x18347FC", Offset = "0x18347FC", VA = "0x18347FC", Slot = "4")]
		public virtual JsonSchema GetSchema(string id)
		{
			return null;
		}
	}
	[Token(Token = "0x2000259")]
	[Flags]
	public enum JsonSchemaType
	{
		[Token(Token = "0x4000CA9")]
		None = 0,
		[Token(Token = "0x4000CAA")]
		String = 1,
		[Token(Token = "0x4000CAB")]
		Float = 2,
		[Token(Token = "0x4000CAC")]
		Integer = 4,
		[Token(Token = "0x4000CAD")]
		Boolean = 8,
		[Token(Token = "0x4000CAE")]
		Object = 0x10,
		[Token(Token = "0x4000CAF")]
		Array = 0x20,
		[Token(Token = "0x4000CB0")]
		Null = 0x40,
		[Token(Token = "0x4000CB1")]
		Any = 0x7F
	}
	[Token(Token = "0x200025A")]
	internal class JsonSchemaWriter
	{
		[Serializable]
		[Token(Token = "0x2000334")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49E4C", Offset = "0xB49E4C")]
		private sealed class <>c
		{
			[Token(Token = "0x4000F24")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000F25")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<JsonSchemaType, bool> <>9__7_0;

			[Token(Token = "0x600164D")]
			[Address(RVA = "0x1836B9C", Offset = "0x1836B9C", VA = "0x1836B9C")]
			public <>c()
			{
			}

			[Token(Token = "0x600164E")]
			[Address(RVA = "0x1836BA4", Offset = "0x1836BA4", VA = "0x1836BA4")]
			internal bool <WriteType>b__7_0(JsonSchemaType v)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4000CB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly JsonWriter _writer;

		[Token(Token = "0x4000CB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly JsonSchemaResolver _resolver;

		[Token(Token = "0x60011D2")]
		[Address(RVA = "0x1834908", Offset = "0x1834908", VA = "0x1834908")]
		public JsonSchemaWriter(JsonWriter writer, JsonSchemaResolver resolver)
		{
		}

		[Token(Token = "0x60011D3")]
		[Address(RVA = "0x1834980", Offset = "0x1834980", VA = "0x1834980")]
		private void ReferenceOrWriteSchema(JsonSchema schema)
		{
		}

		[Token(Token = "0x60011D4")]
		[Address(RVA = "0x1834AF0", Offset = "0x1834AF0", VA = "0x1834AF0")]
		public void WriteSchema(JsonSchema schema)
		{
		}

		[Token(Token = "0x60011D5")]
		[Address(RVA = "0x1836398", Offset = "0x1836398", VA = "0x1836398")]
		private void WriteSchemaDictionaryIfNotNull(JsonWriter writer, string propertyName, IDictionary<string, JsonSchema> properties)
		{
		}

		[Token(Token = "0x60011D6")]
		[Address(RVA = "0x18366D4", Offset = "0x18366D4", VA = "0x18366D4")]
		private void WriteItems(JsonSchema schema)
		{
		}

		[Token(Token = "0x60011D7")]
		[Address(RVA = "0x1835D44", Offset = "0x1835D44", VA = "0x1835D44")]
		private void WriteType(string propertyName, JsonWriter writer, JsonSchemaType type)
		{
		}

		[Token(Token = "0x60011D8")]
		[Address(RVA = "0x1835CC4", Offset = "0x1835CC4", VA = "0x1835CC4")]
		private void WritePropertyIfNotNull(JsonWriter writer, string propertyName, object value)
		{
		}
	}
	[Token(Token = "0x200025B")]
	public static class SchemaExtensions
	{
		[Token(Token = "0x2000335")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49E5C", Offset = "0xB49E5C")]
		private sealed class <>c__DisplayClass0_0
		{
			[Token(Token = "0x4000F26")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool valid;

			[Token(Token = "0x600164F")]
			[Address(RVA = "0x1836C78", Offset = "0x1836C78", VA = "0x1836C78")]
			public <>c__DisplayClass0_0()
			{
			}

			[Token(Token = "0x6001650")]
			[Address(RVA = "0x1836E68", Offset = "0x1836E68", VA = "0x1836E68")]
			internal void <IsValid>b__0(object sender, ValidationEventArgs args)
			{
			}
		}

		[Token(Token = "0x60011D9")]
		[Address(RVA = "0x1836BB0", Offset = "0x1836BB0", VA = "0x1836BB0")]
		public static bool IsValid(this JToken source, JsonSchema schema)
		{
			return default(bool);
		}

		[Token(Token = "0x60011DA")]
		[Address(RVA = "0x1836E60", Offset = "0x1836E60", VA = "0x1836E60")]
		public static void Validate(this JToken source, JsonSchema schema)
		{
		}

		[Token(Token = "0x60011DB")]
		[Address(RVA = "0x1836C90", Offset = "0x1836C90", VA = "0x1836C90")]
		public static void Validate(this JToken source, JsonSchema schema, ValidationEventHandler validationEventHandler)
		{
		}
	}
	[Token(Token = "0x200025C")]
	public enum UndefinedSchemaIdHandling
	{
		[Token(Token = "0x4000CB5")]
		None,
		[Token(Token = "0x4000CB6")]
		UseTypeName,
		[Token(Token = "0x4000CB7")]
		UseAssemblyQualifiedName
	}
	[Token(Token = "0x200025D")]
	public class ValidationEventArgs : EventArgs
	{
		[Token(Token = "0x4000CB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly JsonSchemaException _ex;

		[Token(Token = "0x170001B0")]
		public JsonSchemaException Exception
		{
			[Token(Token = "0x60011DD")]
			[Address(RVA = "0x1836F04", Offset = "0x1836F04", VA = "0x1836F04")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001B1")]
		public string Message
		{
			[Token(Token = "0x60011DE")]
			[Address(RVA = "0x1836F0C", Offset = "0x1836F0C", VA = "0x1836F0C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60011DC")]
		[Address(RVA = "0x1836E70", Offset = "0x1836E70", VA = "0x1836E70")]
		internal ValidationEventArgs(JsonSchemaException ex)
		{
		}
	}
	[Token(Token = "0x200025E")]
	public delegate void ValidationEventHandler(object sender, ValidationEventArgs e);
}
namespace Newtonsoft.Json.ObservableSupport
{
	[Token(Token = "0x200025F")]
	public class AddingNewEventArgs
	{
		[Token(Token = "0x4000CB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4BA38", Offset = "0xB4BA38")]
		private object <NewObject>k__BackingField;

		[Token(Token = "0x170001B2")]
		public object NewObject
		{
			[Token(Token = "0x60011E3")]
			[Address(RVA = "0x1C328E8", Offset = "0x1C328E8", VA = "0x1C328E8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D920", Offset = "0xB4D920")]
			get
			{
				return null;
			}
			[Token(Token = "0x60011E4")]
			[Address(RVA = "0x1C328F0", Offset = "0x1C328F0", VA = "0x1C328F0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D930", Offset = "0xB4D930")]
			set
			{
			}
		}

		[Token(Token = "0x60011E5")]
		[Address(RVA = "0x1C328F8", Offset = "0x1C328F8", VA = "0x1C328F8")]
		public AddingNewEventArgs()
		{
		}

		[Token(Token = "0x60011E6")]
		[Address(RVA = "0x1C32900", Offset = "0x1C32900", VA = "0x1C32900")]
		public AddingNewEventArgs(object newObject)
		{
		}
	}
	[Token(Token = "0x2000260")]
	public delegate void AddingNewEventHandler(object sender, AddingNewEventArgs e);
	[Token(Token = "0x2000261")]
	public interface INotifyCollectionChanged
	{
		[Token(Token = "0x14000009")]
		event NotifyCollectionChangedEventHandler CollectionChanged;
	}
	[Token(Token = "0x2000262")]
	public interface INotifyPropertyChanging
	{
		[Token(Token = "0x1400000A")]
		event PropertyChangingEventHandler PropertyChanging;
	}
	[Token(Token = "0x2000263")]
	public enum NotifyCollectionChangedAction
	{
		[Token(Token = "0x4000CBB")]
		Add,
		[Token(Token = "0x4000CBC")]
		Remove,
		[Token(Token = "0x4000CBD")]
		Replace,
		[Token(Token = "0x4000CBE")]
		Move,
		[Token(Token = "0x4000CBF")]
		Reset
	}
	[Token(Token = "0x2000264")]
	public class NotifyCollectionChangedEventArgs
	{
		[Token(Token = "0x4000CC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4BA48", Offset = "0xB4BA48")]
		private NotifyCollectionChangedAction <Action>k__BackingField;

		[Token(Token = "0x4000CC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4BA58", Offset = "0xB4BA58")]
		private IList <NewItems>k__BackingField;

		[Token(Token = "0x4000CC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4BA68", Offset = "0xB4BA68")]
		private int <NewStartingIndex>k__BackingField;

		[Token(Token = "0x4000CC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4BA78", Offset = "0xB4BA78")]
		private IList <OldItems>k__BackingField;

		[Token(Token = "0x4000CC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4BA88", Offset = "0xB4BA88")]
		private int <OldStartingIndex>k__BackingField;

		[Token(Token = "0x170001B3")]
		internal NotifyCollectionChangedAction Action
		{
			[Token(Token = "0x60011EF")]
			[Address(RVA = "0x1C330F8", Offset = "0x1C330F8", VA = "0x1C330F8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D980", Offset = "0xB4D980")]
			get
			{
				return default(NotifyCollectionChangedAction);
			}
			[Token(Token = "0x60011F0")]
			[Address(RVA = "0x1C33100", Offset = "0x1C33100", VA = "0x1C33100")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D990", Offset = "0xB4D990")]
			set
			{
			}
		}

		[Token(Token = "0x170001B4")]
		internal IList NewItems
		{
			[Token(Token = "0x60011F1")]
			[Address(RVA = "0x1C33108", Offset = "0x1C33108", VA = "0x1C33108")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D9A0", Offset = "0xB4D9A0")]
			get
			{
				return null;
			}
			[Token(Token = "0x60011F2")]
			[Address(RVA = "0x1C33110", Offset = "0x1C33110", VA = "0x1C33110")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D9B0", Offset = "0xB4D9B0")]
			set
			{
			}
		}

		[Token(Token = "0x170001B5")]
		internal int NewStartingIndex
		{
			[Token(Token = "0x60011F3")]
			[Address(RVA = "0x1C33118", Offset = "0x1C33118", VA = "0x1C33118")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D9C0", Offset = "0xB4D9C0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60011F4")]
			[Address(RVA = "0x1C33120", Offset = "0x1C33120", VA = "0x1C33120")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D9D0", Offset = "0xB4D9D0")]
			set
			{
			}
		}

		[Token(Token = "0x170001B6")]
		internal IList OldItems
		{
			[Token(Token = "0x60011F5")]
			[Address(RVA = "0x1C33128", Offset = "0x1C33128", VA = "0x1C33128")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D9E0", Offset = "0xB4D9E0")]
			get
			{
				return null;
			}
			[Token(Token = "0x60011F6")]
			[Address(RVA = "0x1C33130", Offset = "0x1C33130", VA = "0x1C33130")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D9F0", Offset = "0xB4D9F0")]
			set
			{
			}
		}

		[Token(Token = "0x170001B7")]
		internal int OldStartingIndex
		{
			[Token(Token = "0x60011F7")]
			[Address(RVA = "0x1C33138", Offset = "0x1C33138", VA = "0x1C33138")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4DA00", Offset = "0xB4DA00")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60011F8")]
			[Address(RVA = "0x1C33140", Offset = "0x1C33140", VA = "0x1C33140")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4DA10", Offset = "0xB4DA10")]
			set
			{
			}
		}

		[Token(Token = "0x60011F9")]
		[Address(RVA = "0x1C33148", Offset = "0x1C33148", VA = "0x1C33148")]
		internal NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action)
		{
		}

		[Token(Token = "0x60011FA")]
		[Address(RVA = "0x1C33174", Offset = "0x1C33174", VA = "0x1C33174")]
		internal NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, IList changedItems)
		{
		}

		[Token(Token = "0x60011FB")]
		[Address(RVA = "0x1C331B0", Offset = "0x1C331B0", VA = "0x1C331B0")]
		internal NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, object changedItem)
		{
		}

		[Token(Token = "0x60011FC")]
		[Address(RVA = "0x1C3325C", Offset = "0x1C3325C", VA = "0x1C3325C")]
		internal NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, IList newItems, IList oldItems)
		{
		}

		[Token(Token = "0x60011FD")]
		[Address(RVA = "0x1C332A0", Offset = "0x1C332A0", VA = "0x1C332A0")]
		internal NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, IList changedItems, int startingIndex)
		{
		}

		[Token(Token = "0x60011FE")]
		[Address(RVA = "0x1C332E4", Offset = "0x1C332E4", VA = "0x1C332E4")]
		internal NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, object changedItem, int index)
		{
		}

		[Token(Token = "0x60011FF")]
		[Address(RVA = "0x1C3330C", Offset = "0x1C3330C", VA = "0x1C3330C")]
		internal NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, object newItem, object oldItem)
		{
		}

		[Token(Token = "0x6001200")]
		[Address(RVA = "0x1C333C4", Offset = "0x1C333C4", VA = "0x1C333C4")]
		internal NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, IList newItems, IList oldItems, int startingIndex)
		{
		}

		[Token(Token = "0x6001201")]
		[Address(RVA = "0x1C33418", Offset = "0x1C33418", VA = "0x1C33418")]
		internal NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, IList changedItems, int index, int oldIndex)
		{
		}

		[Token(Token = "0x6001202")]
		[Address(RVA = "0x1C3346C", Offset = "0x1C3346C", VA = "0x1C3346C")]
		internal NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, object changedItem, int index, int oldIndex)
		{
		}

		[Token(Token = "0x6001203")]
		[Address(RVA = "0x1C334A4", Offset = "0x1C334A4", VA = "0x1C334A4")]
		internal NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, object newItem, object oldItem, int index)
		{
		}
	}
	[Token(Token = "0x2000265")]
	public delegate void NotifyCollectionChangedEventHandler(object sender, NotifyCollectionChangedEventArgs e);
	[Token(Token = "0x2000266")]
	public class PropertyChangingEventArgs : EventArgs
	{
		[Token(Token = "0x4000CC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4BA98", Offset = "0xB4BA98")]
		private string <PropertyName>k__BackingField;

		[Token(Token = "0x170001B8")]
		public virtual string PropertyName
		{
			[Token(Token = "0x6001209")]
			[Address(RVA = "0x1C33D20", Offset = "0x1C33D20", VA = "0x1C33D20", Slot = "4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4DA20", Offset = "0xB4DA20")]
			get
			{
				return null;
			}
			[Token(Token = "0x600120A")]
			[Address(RVA = "0x1C33D28", Offset = "0x1C33D28", VA = "0x1C33D28", Slot = "5")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4DA30", Offset = "0xB4DA30")]
			set
			{
			}
		}

		[Token(Token = "0x6001208")]
		[Address(RVA = "0x1C33C98", Offset = "0x1C33C98", VA = "0x1C33C98")]
		public PropertyChangingEventArgs(string propertyName)
		{
		}
	}
	[Token(Token = "0x2000267")]
	public delegate void PropertyChangingEventHandler(object sender, PropertyChangingEventArgs e);
}
namespace Newtonsoft.Json.Linq
{
	[Token(Token = "0x2000268")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0xB498A4", Offset = "0xB498A4")]
	public interface IJEnumerable<T> : IEnumerable<T>, IEnumerable where T : JToken
	{
		[Token(Token = "0x170001B9")]
		IJEnumerable<JToken> Item
		{
			[Token(Token = "0x600120F")]
			get;
		}
	}
	[Token(Token = "0x2000269")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0xB498DC", Offset = "0xB498DC")]
	public class JArray : JContainer, IList<JToken>, ICollection<JToken>, IEnumerable<JToken>, IEnumerable
	{
		[Token(Token = "0x4000CC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private IList<JToken> _values;

		[Token(Token = "0x170001BA")]
		protected override IList<JToken> ChildrenTokens
		{
			[Token(Token = "0x6001210")]
			[Address(RVA = "0x1C1C264", Offset = "0x1C1C264", VA = "0x1C1C264", Slot = "51")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001BB")]
		public override JTokenType Type
		{
			[Token(Token = "0x6001211")]
			[Address(RVA = "0x1C1C26C", Offset = "0x1C1C26C", VA = "0x1C1C26C", Slot = "13")]
			get
			{
				return default(JTokenType);
			}
		}

		[Token(Token = "0x170001BC")]
		public override JToken Item
		{
			[Token(Token = "0x600121D")]
			[Address(RVA = "0x1C1D664", Offset = "0x1C1D664", VA = "0x1C1D664", Slot = "15")]
			get
			{
				return null;
			}
			[Token(Token = "0x600121E")]
			[Address(RVA = "0x1C1D7E0", Offset = "0x1C1D7E0", VA = "0x1C1D7E0", Slot = "16")]
			set
			{
			}
		}

		[Token(Token = "0x170001BD")]
		public new JToken Item
		{
			[Token(Token = "0x600121F")]
			[Address(RVA = "0x1C1D964", Offset = "0x1C1D964", VA = "0x1C1D964", Slot = "24")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001220")]
			[Address(RVA = "0x1C1D974", Offset = "0x1C1D974", VA = "0x1C1D974", Slot = "25")]
			set
			{
			}
		}

		[Token(Token = "0x170001BE")]
		private bool System.Collections.Generic.ICollection<Newtonsoft.Json.Linq.JToken>.IsReadOnly
		{
			[Token(Token = "0x6001228")]
			[Address(RVA = "0x1C1DA90", Offset = "0x1C1DA90", VA = "0x1C1DA90", Slot = "30")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001212")]
		[Address(RVA = "0x1C1C274", Offset = "0x1C1C274", VA = "0x1C1C274")]
		public JArray()
		{
		}

		[Token(Token = "0x6001213")]
		[Address(RVA = "0x1C1C2EC", Offset = "0x1C1C2EC", VA = "0x1C1C2EC")]
		public JArray(JArray other)
		{
		}

		[Token(Token = "0x6001214")]
		[Address(RVA = "0x1C1C610", Offset = "0x1C1C610", VA = "0x1C1C610")]
		public JArray(params object[] content)
		{
		}

		[Token(Token = "0x6001215")]
		[Address(RVA = "0x1C1C614", Offset = "0x1C1C614", VA = "0x1C1C614")]
		public JArray(object content)
		{
		}

		[Token(Token = "0x6001216")]
		[Address(RVA = "0x1C1C6A8", Offset = "0x1C1C6A8", VA = "0x1C1C6A8", Slot = "12")]
		internal override bool DeepEquals(JToken node)
		{
			return default(bool);
		}

		[Token(Token = "0x6001217")]
		[Address(RVA = "0x1C1C864", Offset = "0x1C1C864", VA = "0x1C1C864", Slot = "11")]
		internal override JToken CloneToken()
		{
			return null;
		}

		[Token(Token = "0x6001218")]
		[Address(RVA = "0x1C1C8C4", Offset = "0x1C1C8C4", VA = "0x1C1C8C4")]
		public new static JArray Load(JsonReader reader)
		{
			return null;
		}

		[Token(Token = "0x6001219")]
		[Address(RVA = "0x1C1CF14", Offset = "0x1C1CF14", VA = "0x1C1CF14")]
		public new static JArray Parse(string json)
		{
			return null;
		}

		[Token(Token = "0x600121A")]
		[Address(RVA = "0x1C1CF98", Offset = "0x1C1CF98", VA = "0x1C1CF98")]
		public new static JArray FromObject(object o)
		{
			return null;
		}

		[Token(Token = "0x600121B")]
		[Address(RVA = "0x1C1CFFC", Offset = "0x1C1CFFC", VA = "0x1C1CFFC")]
		public new static JArray FromObject(object o, JsonSerializer jsonSerializer)
		{
			return null;
		}

		[Token(Token = "0x600121C")]
		[Address(RVA = "0x1C1D384", Offset = "0x1C1D384", VA = "0x1C1D384", Slot = "22")]
		public override void WriteTo(JsonWriter writer, params JsonConverter[] converters)
		{
		}

		[Token(Token = "0x6001221")]
		[Address(RVA = "0x1C1D984", Offset = "0x1C1D984", VA = "0x1C1D984", Slot = "26")]
		public int IndexOf(JToken item)
		{
			return default(int);
		}

		[Token(Token = "0x6001222")]
		[Address(RVA = "0x1C1DA30", Offset = "0x1C1DA30", VA = "0x1C1DA30", Slot = "27")]
		public void Insert(int index, JToken item)
		{
		}

		[Token(Token = "0x6001223")]
		[Address(RVA = "0x1C1DA40", Offset = "0x1C1DA40", VA = "0x1C1DA40", Slot = "28")]
		public void RemoveAt(int index)
		{
		}

		[Token(Token = "0x6001224")]
		[Address(RVA = "0x1C1DA50", Offset = "0x1C1DA50", VA = "0x1C1DA50", Slot = "31")]
		public void Add(JToken item)
		{
		}

		[Token(Token = "0x6001225")]
		[Address(RVA = "0x1C1DA60", Offset = "0x1C1DA60", VA = "0x1C1DA60", Slot = "32")]
		public void Clear()
		{
		}

		[Token(Token = "0x6001226")]
		[Address(RVA = "0x1C1DA70", Offset = "0x1C1DA70", VA = "0x1C1DA70", Slot = "33")]
		public bool Contains(JToken item)
		{
			return default(bool);
		}

		[Token(Token = "0x6001227")]
		[Address(RVA = "0x1C1DA80", Offset = "0x1C1DA80", VA = "0x1C1DA80", Slot = "34")]
		private void System.Collections.Generic.ICollection<Newtonsoft.Json.Linq.JToken>.CopyTo(JToken[] array, int arrayIndex)
		{
		}

		[Token(Token = "0x6001229")]
		[Address(RVA = "0x1C1DA98", Offset = "0x1C1DA98", VA = "0x1C1DA98", Slot = "35")]
		public bool Remove(JToken item)
		{
			return default(bool);
		}

		[Token(Token = "0x600122A")]
		[Address(RVA = "0x1C1DAA8", Offset = "0x1C1DAA8", VA = "0x1C1DAA8", Slot = "23")]
		internal override int GetDeepHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x200026A")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0xB49914", Offset = "0xB49914")]
	public class JConstructor : JContainer
	{
		[Token(Token = "0x4000CC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private string _name;

		[Token(Token = "0x4000CC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private IList<JToken> _values;

		[Token(Token = "0x170001BF")]
		protected override IList<JToken> ChildrenTokens
		{
			[Token(Token = "0x600122B")]
			[Address(RVA = "0x1C1DD54", Offset = "0x1C1DD54", VA = "0x1C1DD54", Slot = "51")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001C0")]
		public string Name
		{
			[Token(Token = "0x600122C")]
			[Address(RVA = "0x1C1DD5C", Offset = "0x1C1DD5C", VA = "0x1C1DD5C")]
			get
			{
				return null;
			}
			[Token(Token = "0x600122D")]
			[Address(RVA = "0x1C1DD64", Offset = "0x1C1DD64", VA = "0x1C1DD64")]
			set
			{
			}
		}

		[Token(Token = "0x170001C1")]
		public override JTokenType Type
		{
			[Token(Token = "0x600122E")]
			[Address(RVA = "0x1C1DD6C", Offset = "0x1C1DD6C", VA = "0x1C1DD6C", Slot = "13")]
			get
			{
				return default(JTokenType);
			}
		}

		[Token(Token = "0x170001C2")]
		public override JToken Item
		{
			[Token(Token = "0x6001237")]
			[Address(RVA = "0x1C1E348", Offset = "0x1C1E348", VA = "0x1C1E348", Slot = "15")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001238")]
			[Address(RVA = "0x1C1E4C4", Offset = "0x1C1E4C4", VA = "0x1C1E4C4", Slot = "16")]
			set
			{
			}
		}

		[Token(Token = "0x600122F")]
		[Address(RVA = "0x1C1DD74", Offset = "0x1C1DD74", VA = "0x1C1DD74")]
		public JConstructor()
		{
		}

		[Token(Token = "0x6001230")]
		[Address(RVA = "0x1C1DDE4", Offset = "0x1C1DDE4", VA = "0x1C1DDE4")]
		public JConstructor(JConstructor other)
		{
		}

		[Token(Token = "0x6001231")]
		[Address(RVA = "0x1C1DE78", Offset = "0x1C1DE78", VA = "0x1C1DE78")]
		public JConstructor(string name, params object[] content)
		{
		}

		[Token(Token = "0x6001232")]
		[Address(RVA = "0x1C1DEB0", Offset = "0x1C1DEB0", VA = "0x1C1DEB0")]
		public JConstructor(string name, object content)
		{
		}

		[Token(Token = "0x6001233")]
		[Address(RVA = "0x1C1DEE8", Offset = "0x1C1DEE8", VA = "0x1C1DEE8")]
		public JConstructor(string name)
		{
		}

		[Token(Token = "0x6001234")]
		[Address(RVA = "0x1C1DF84", Offset = "0x1C1DF84", VA = "0x1C1DF84", Slot = "12")]
		internal override bool DeepEquals(JToken node)
		{
			return default(bool);
		}

		[Token(Token = "0x6001235")]
		[Address(RVA = "0x1C1E04C", Offset = "0x1C1E04C", VA = "0x1C1E04C", Slot = "11")]
		internal override JToken CloneToken()
		{
			return null;
		}

		[Token(Token = "0x6001236")]
		[Address(RVA = "0x1C1E0AC", Offset = "0x1C1E0AC", VA = "0x1C1E0AC", Slot = "22")]
		public override void WriteTo(JsonWriter writer, params JsonConverter[] converters)
		{
		}

		[Token(Token = "0x6001239")]
		[Address(RVA = "0x1C1E648", Offset = "0x1C1E648", VA = "0x1C1E648", Slot = "23")]
		internal override int GetDeepHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x600123A")]
		[Address(RVA = "0x1C1E694", Offset = "0x1C1E694", VA = "0x1C1E694")]
		public new static JConstructor Load(JsonReader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x200026B")]
	public abstract class JContainer : JToken, IList<JToken>, ICollection<JToken>, IEnumerable<JToken>, IEnumerable, IList, ICollection
	{
		[Token(Token = "0x2000336")]
		private class JTokenReferenceEqualityComparer : IEqualityComparer<JToken>
		{
			[Token(Token = "0x4000F27")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly JTokenReferenceEqualityComparer Instance;

			[Token(Token = "0x6001651")]
			[Address(RVA = "0x1C22668", Offset = "0x1C22668", VA = "0x1C22668", Slot = "4")]
			public bool Equals(JToken x, JToken y)
			{
				return default(bool);
			}

			[Token(Token = "0x6001652")]
			[Address(RVA = "0x1C22674", Offset = "0x1C22674", VA = "0x1C22674", Slot = "5")]
			public int GetHashCode(JToken obj)
			{
				return default(int);
			}

			[Token(Token = "0x6001653")]
			[Address(RVA = "0x1C22694", Offset = "0x1C22694", VA = "0x1C22694")]
			public JTokenReferenceEqualityComparer()
			{
			}
		}

		[Token(Token = "0x2000337")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49E6C", Offset = "0xB49E6C")]
		private sealed class <Descendants>d__16 : IEnumerable<JToken>, IEnumerable, IEnumerator<JToken>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000F28")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000F29")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private JToken <>2__current;

			[Token(Token = "0x4000F2A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4000F2B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public JContainer <>4__this;

			[Token(Token = "0x4000F2C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private IEnumerator<JToken> <>7__wrap1;

			[Token(Token = "0x4000F2D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private JToken <o>5__3;

			[Token(Token = "0x4000F2E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private IEnumerator<JToken> <>7__wrap3;

			[Token(Token = "0x17000253")]
			private JToken System.Collections.Generic.IEnumerator<Newtonsoft.Json.Linq.JToken>.Current
			{
				[Token(Token = "0x600165A")]
				[Address(RVA = "0x1C2253C", Offset = "0x1C2253C", VA = "0x1C2253C", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000254")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600165C")]
				[Address(RVA = "0x1C225AC", Offset = "0x1C225AC", VA = "0x1C225AC", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001655")]
			[Address(RVA = "0x1C1ED48", Offset = "0x1C1ED48", VA = "0x1C1ED48")]
			[DebuggerHidden]
			public <Descendants>d__16(int <>1__state)
			{
			}

			[Token(Token = "0x6001656")]
			[Address(RVA = "0x1C21E94", Offset = "0x1C21E94", VA = "0x1C21E94", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001657")]
			[Address(RVA = "0x1C220A8", Offset = "0x1C220A8", VA = "0x1C220A8", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001658")]
			[Address(RVA = "0x1C21FE8", Offset = "0x1C21FE8", VA = "0x1C21FE8")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6001659")]
			[Address(RVA = "0x1C21F28", Offset = "0x1C21F28", VA = "0x1C21F28")]
			private void <>m__Finally2()
			{
			}

			[Token(Token = "0x600165B")]
			[Address(RVA = "0x1C22544", Offset = "0x1C22544", VA = "0x1C22544", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x600165D")]
			[Address(RVA = "0x1C225B4", Offset = "0x1C225B4", VA = "0x1C225B4", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<JToken> System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x600165E")]
			[Address(RVA = "0x1C22664", Offset = "0x1C22664", VA = "0x1C22664", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x4000CC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private object _syncRoot;

		[Token(Token = "0x4000CCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool _busy;

		[Token(Token = "0x170001C3")]
		protected abstract IList<JToken> ChildrenTokens
		{
			[Token(Token = "0x600123B")]
			get;
		}

		[Token(Token = "0x170001C4")]
		public override bool HasValues
		{
			[Token(Token = "0x600123F")]
			[Address(RVA = "0x1C1EAB0", Offset = "0x1C1EAB0", VA = "0x1C1EAB0", Slot = "14")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001C5")]
		public override JToken First
		{
			[Token(Token = "0x6001241")]
			[Address(RVA = "0x1C1EB88", Offset = "0x1C1EB88", VA = "0x1C1EB88", Slot = "18")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001C6")]
		public override JToken Last
		{
			[Token(Token = "0x6001242")]
			[Address(RVA = "0x1C1EBE8", Offset = "0x1C1EBE8", VA = "0x1C1EBE8", Slot = "19")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001C7")]
		private JToken System.Collections.Generic.IList<Newtonsoft.Json.Linq.JToken>.Item
		{
			[Token(Token = "0x6001261")]
			[Address(RVA = "0x1C21B34", Offset = "0x1C21B34", VA = "0x1C21B34", Slot = "24")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001262")]
			[Address(RVA = "0x1C21B44", Offset = "0x1C21B44", VA = "0x1C21B44", Slot = "25")]
			set
			{
			}
		}

		[Token(Token = "0x170001C8")]
		private bool System.Collections.Generic.ICollection<Newtonsoft.Json.Linq.JToken>.IsReadOnly
		{
			[Token(Token = "0x6001267")]
			[Address(RVA = "0x1C21B94", Offset = "0x1C21B94", VA = "0x1C21B94", Slot = "30")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001C9")]
		private bool System.Collections.IList.IsFixedSize
		{
			[Token(Token = "0x600126F")]
			[Address(RVA = "0x1C21D5C", Offset = "0x1C21D5C", VA = "0x1C21D5C", Slot = "42")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001CA")]
		private bool System.Collections.IList.IsReadOnly
		{
			[Token(Token = "0x6001270")]
			[Address(RVA = "0x1C21D64", Offset = "0x1C21D64", VA = "0x1C21D64", Slot = "41")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001CB")]
		private object System.Collections.IList.Item
		{
			[Token(Token = "0x6001273")]
			[Address(RVA = "0x1C21DB0", Offset = "0x1C21DB0", VA = "0x1C21DB0", Slot = "36")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001274")]
			[Address(RVA = "0x1C21DC0", Offset = "0x1C21DC0", VA = "0x1C21DC0", Slot = "37")]
			set
			{
			}
		}

		[Token(Token = "0x170001CC")]
		public int Count
		{
			[Token(Token = "0x6001276")]
			[Address(RVA = "0x1C20678", Offset = "0x1C20678", VA = "0x1C20678", Slot = "48")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001CD")]
		private bool System.Collections.ICollection.IsSynchronized
		{
			[Token(Token = "0x6001277")]
			[Address(RVA = "0x1C21E10", Offset = "0x1C21E10", VA = "0x1C21E10", Slot = "50")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001CE")]
		private object System.Collections.ICollection.SyncRoot
		{
			[Token(Token = "0x6001278")]
			[Address(RVA = "0x1C21E18", Offset = "0x1C21E18", VA = "0x1C21E18", Slot = "49")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600123C")]
		[Address(RVA = "0x1C1C2E4", Offset = "0x1C1C2E4", VA = "0x1C1C2E4")]
		internal JContainer()
		{
		}

		[Token(Token = "0x600123D")]
		[Address(RVA = "0x1C1C368", Offset = "0x1C1C368", VA = "0x1C1C368")]
		internal JContainer(JContainer other)
		{
		}

		[Token(Token = "0x600123E")]
		[Address(RVA = "0x1C1E980", Offset = "0x1C1E980", VA = "0x1C1E980")]
		internal void CheckReentrancy()
		{
		}

		[Token(Token = "0x6001240")]
		[Address(RVA = "0x1C1C748", Offset = "0x1C1C748", VA = "0x1C1C748")]
		internal bool ContentsEqual(JContainer container)
		{
			return default(bool);
		}

		[Token(Token = "0x6001243")]
		[Address(RVA = "0x1C1EC48", Offset = "0x1C1EC48", VA = "0x1C1EC48", Slot = "20")]
		public override JEnumerable<JToken> Children()
		{
			return default(JEnumerable<JToken>);
		}

		[Token(Token = "0x6001244")]
		public override IEnumerable<T> Values<T>()
		{
			return null;
		}

		[Token(Token = "0x6001245")]
		[Address(RVA = "0x1C1ECC4", Offset = "0x1C1ECC4", VA = "0x1C1ECC4")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB4DA40", Offset = "0xB4DA40")]
		public IEnumerable<JToken> Descendants()
		{
			return null;
		}

		[Token(Token = "0x6001246")]
		[Address(RVA = "0x1C1ED80", Offset = "0x1C1ED80", VA = "0x1C1ED80")]
		internal bool IsMultiContent(object content)
		{
			return default(bool);
		}

		[Token(Token = "0x6001247")]
		[Address(RVA = "0x1C1EE48", Offset = "0x1C1EE48", VA = "0x1C1EE48")]
		internal JToken EnsureParentToken(JToken item)
		{
			return null;
		}

		[Token(Token = "0x6001248")]
		[Address(RVA = "0x1C1D988", Offset = "0x1C1D988", VA = "0x1C1D988")]
		internal int IndexOfItem(JToken item)
		{
			return default(int);
		}

		[Token(Token = "0x6001249")]
		[Address(RVA = "0x1C1EF84", Offset = "0x1C1EF84", VA = "0x1C1EF84", Slot = "52")]
		internal virtual void InsertItem(int index, JToken item)
		{
		}

		[Token(Token = "0x600124A")]
		[Address(RVA = "0x1C1F394", Offset = "0x1C1F394", VA = "0x1C1F394", Slot = "53")]
		internal virtual void RemoveItemAt(int index)
		{
		}

		[Token(Token = "0x600124B")]
		[Address(RVA = "0x1C1F814", Offset = "0x1C1F814", VA = "0x1C1F814", Slot = "54")]
		internal virtual bool RemoveItem(JToken item)
		{
			return default(bool);
		}

		[Token(Token = "0x600124C")]
		[Address(RVA = "0x1C1F860", Offset = "0x1C1F860", VA = "0x1C1F860", Slot = "55")]
		internal virtual JToken GetItem(int index)
		{
			return null;
		}

		[Token(Token = "0x600124D")]
		[Address(RVA = "0x1C1F934", Offset = "0x1C1F934", VA = "0x1C1F934", Slot = "56")]
		internal virtual void SetItem(int index, JToken item)
		{
		}

		[Token(Token = "0x600124E")]
		[Address(RVA = "0x1C1FF00", Offset = "0x1C1FF00", VA = "0x1C1FF00", Slot = "57")]
		internal virtual void ClearItems()
		{
		}

		[Token(Token = "0x600124F")]
		[Address(RVA = "0x1C20250", Offset = "0x1C20250", VA = "0x1C20250", Slot = "58")]
		internal virtual void ReplaceItem(JToken existing, JToken replacement)
		{
		}

		[Token(Token = "0x6001250")]
		[Address(RVA = "0x1C202AC", Offset = "0x1C202AC", VA = "0x1C202AC", Slot = "59")]
		internal virtual bool ContainsItem(JToken item)
		{
			return default(bool);
		}

		[Token(Token = "0x6001251")]
		[Address(RVA = "0x1C202C8", Offset = "0x1C202C8", VA = "0x1C202C8", Slot = "60")]
		internal virtual void CopyItemsTo(Array array, int arrayIndex)
		{
		}

		[Token(Token = "0x6001252")]
		[Address(RVA = "0x1C1FE24", Offset = "0x1C1FE24", VA = "0x1C1FE24")]
		internal static bool IsTokenUnchanged(JToken currentValue, JToken newValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6001253")]
		[Address(RVA = "0x1C2073C", Offset = "0x1C2073C", VA = "0x1C2073C", Slot = "61")]
		internal virtual void ValidateToken(JToken o, JToken existing)
		{
		}

		[Token(Token = "0x6001254")]
		[Address(RVA = "0x1C208E8", Offset = "0x1C208E8", VA = "0x1C208E8", Slot = "62")]
		public virtual void Add(object content)
		{
		}

		[Token(Token = "0x6001255")]
		[Address(RVA = "0x1C20D78", Offset = "0x1C20D78", VA = "0x1C20D78")]
		public void AddFirst(object content)
		{
		}

		[Token(Token = "0x6001256")]
		[Address(RVA = "0x1C209C8", Offset = "0x1C209C8", VA = "0x1C209C8")]
		internal void AddInternal(int index, object content)
		{
		}

		[Token(Token = "0x6001257")]
		[Address(RVA = "0x1C20D88", Offset = "0x1C20D88", VA = "0x1C20D88")]
		internal JToken CreateFromContent(object content)
		{
			return null;
		}

		[Token(Token = "0x6001258")]
		[Address(RVA = "0x1C20E48", Offset = "0x1C20E48", VA = "0x1C20E48")]
		public JsonWriter CreateWriter()
		{
			return null;
		}

		[Token(Token = "0x6001259")]
		[Address(RVA = "0x1C20F3C", Offset = "0x1C20F3C", VA = "0x1C20F3C")]
		public void ReplaceAll(object content)
		{
		}

		[Token(Token = "0x600125A")]
		[Address(RVA = "0x1C20F84", Offset = "0x1C20F84", VA = "0x1C20F84")]
		public void RemoveAll()
		{
		}

		[Token(Token = "0x600125B")]
		[Address(RVA = "0x1C1CCC0", Offset = "0x1C1CCC0", VA = "0x1C1CCC0")]
		internal void ReadTokenFrom(JsonReader r)
		{
		}

		[Token(Token = "0x600125C")]
		[Address(RVA = "0x1C20F94", Offset = "0x1C20F94", VA = "0x1C20F94")]
		internal void ReadContentFrom(JsonReader r)
		{
		}

		[Token(Token = "0x600125D")]
		[Address(RVA = "0x1C1DAAC", Offset = "0x1C1DAAC", VA = "0x1C1DAAC")]
		internal int ContentsHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x600125E")]
		[Address(RVA = "0x1C21B10", Offset = "0x1C21B10", VA = "0x1C21B10", Slot = "26")]
		private int System.Collections.Generic.IList<Newtonsoft.Json.Linq.JToken>.IndexOf(JToken item)
		{
			return default(int);
		}

		[Token(Token = "0x600125F")]
		[Address(RVA = "0x1C21B14", Offset = "0x1C21B14", VA = "0x1C21B14", Slot = "27")]
		private void System.Collections.Generic.IList<Newtonsoft.Json.Linq.JToken>.Insert(int index, JToken item)
		{
		}

		[Token(Token = "0x6001260")]
		[Address(RVA = "0x1C21B24", Offset = "0x1C21B24", VA = "0x1C21B24", Slot = "28")]
		private void System.Collections.Generic.IList<Newtonsoft.Json.Linq.JToken>.RemoveAt(int index)
		{
		}

		[Token(Token = "0x6001263")]
		[Address(RVA = "0x1C21B54", Offset = "0x1C21B54", VA = "0x1C21B54", Slot = "31")]
		private void System.Collections.Generic.ICollection<Newtonsoft.Json.Linq.JToken>.Add(JToken item)
		{
		}

		[Token(Token = "0x6001264")]
		[Address(RVA = "0x1C21B64", Offset = "0x1C21B64", VA = "0x1C21B64", Slot = "32")]
		private void System.Collections.Generic.ICollection<Newtonsoft.Json.Linq.JToken>.Clear()
		{
		}

		[Token(Token = "0x6001265")]
		[Address(RVA = "0x1C21B74", Offset = "0x1C21B74", VA = "0x1C21B74", Slot = "33")]
		private bool System.Collections.Generic.ICollection<Newtonsoft.Json.Linq.JToken>.Contains(JToken item)
		{
			return default(bool);
		}

		[Token(Token = "0x6001266")]
		[Address(RVA = "0x1C21B84", Offset = "0x1C21B84", VA = "0x1C21B84", Slot = "34")]
		private void System.Collections.Generic.ICollection<Newtonsoft.Json.Linq.JToken>.CopyTo(JToken[] array, int arrayIndex)
		{
		}

		[Token(Token = "0x6001268")]
		[Address(RVA = "0x1C21B9C", Offset = "0x1C21B9C", VA = "0x1C21B9C", Slot = "35")]
		private bool System.Collections.Generic.ICollection<Newtonsoft.Json.Linq.JToken>.Remove(JToken item)
		{
			return default(bool);
		}

		[Token(Token = "0x6001269")]
		[Address(RVA = "0x1C21BAC", Offset = "0x1C21BAC", VA = "0x1C21BAC")]
		private JToken EnsureValue(object value)
		{
			return null;
		}

		[Token(Token = "0x600126A")]
		[Address(RVA = "0x1C21C6C", Offset = "0x1C21C6C", VA = "0x1C21C6C", Slot = "38")]
		private int System.Collections.IList.Add(object value)
		{
			return default(int);
		}

		[Token(Token = "0x600126B")]
		[Address(RVA = "0x1C21CB0", Offset = "0x1C21CB0", VA = "0x1C21CB0", Slot = "40")]
		private void System.Collections.IList.Clear()
		{
		}

		[Token(Token = "0x600126C")]
		[Address(RVA = "0x1C21CC0", Offset = "0x1C21CC0", VA = "0x1C21CC0", Slot = "39")]
		private bool System.Collections.IList.Contains(object value)
		{
			return default(bool);
		}

		[Token(Token = "0x600126D")]
		[Address(RVA = "0x1C21CF4", Offset = "0x1C21CF4", VA = "0x1C21CF4", Slot = "43")]
		private int System.Collections.IList.IndexOf(object value)
		{
			return default(int);
		}

		[Token(Token = "0x600126E")]
		[Address(RVA = "0x1C21D1C", Offset = "0x1C21D1C", VA = "0x1C21D1C", Slot = "44")]
		private void System.Collections.IList.Insert(int index, object value)
		{
		}

		[Token(Token = "0x6001271")]
		[Address(RVA = "0x1C21D6C", Offset = "0x1C21D6C", VA = "0x1C21D6C", Slot = "45")]
		private void System.Collections.IList.Remove(object value)
		{
		}

		[Token(Token = "0x6001272")]
		[Address(RVA = "0x1C21DA0", Offset = "0x1C21DA0", VA = "0x1C21DA0", Slot = "46")]
		private void System.Collections.IList.RemoveAt(int index)
		{
		}

		[Token(Token = "0x6001275")]
		[Address(RVA = "0x1C21E00", Offset = "0x1C21E00", VA = "0x1C21E00", Slot = "47")]
		private void System.Collections.ICollection.CopyTo(Array array, int index)
		{
		}
	}
	[Token(Token = "0x200026C")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0xB4994C", Offset = "0xB4994C")]
	public struct JEnumerable<T> : IJEnumerable<T>, IEnumerable<T>, IEnumerable where T : JToken
	{
		[Token(Token = "0x4000CCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly JEnumerable<T> Empty;

		[Token(Token = "0x4000CCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IEnumerable<T> _enumerable;

		[Token(Token = "0x170001CF")]
		public IJEnumerable<JToken> Item
		{
			[Token(Token = "0x600127C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001279")]
		public JEnumerable(IEnumerable<T> enumerable)
		{
		}

		[Token(Token = "0x600127A")]
		public IEnumerator<T> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x600127B")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x600127D")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x600127E")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x200026D")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0xB49984", Offset = "0xB49984")]
	public class JObject : JContainer, IDictionary<string, JToken>, ICollection<KeyValuePair<string, JToken>>, IEnumerable<KeyValuePair<string, JToken>>, IEnumerable, INotifyPropertyChanged, ICustomTypeDescriptor
	{
		[Token(Token = "0x2000338")]
		public class JPropertKeyedCollection : KeyedCollection<string, JToken>
		{
			[Token(Token = "0x17000255")]
			public new IDictionary<string, JToken> Dictionary
			{
				[Token(Token = "0x6001662")]
				[Address(RVA = "0x1C23020", Offset = "0x1C23020", VA = "0x1C23020")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600165F")]
			[Address(RVA = "0x1C228E0", Offset = "0x1C228E0", VA = "0x1C228E0")]
			public JPropertKeyedCollection(IEqualityComparer<string> comparer)
			{
			}

			[Token(Token = "0x6001660")]
			[Address(RVA = "0x1C25B90", Offset = "0x1C25B90", VA = "0x1C25B90", Slot = "39")]
			protected override string GetKeyForItem(JToken item)
			{
				return null;
			}

			[Token(Token = "0x6001661")]
			[Address(RVA = "0x1C25CCC", Offset = "0x1C25CCC", VA = "0x1C25CCC", Slot = "36")]
			protected override void InsertItem(int index, JToken item)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000339")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49E7C", Offset = "0xB49E7C")]
		private sealed class <>c
		{
			[Token(Token = "0x4000F2F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000F30")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<JProperty, JToken> <>9__21_0;

			[Token(Token = "0x6001664")]
			[Address(RVA = "0x1C25630", Offset = "0x1C25630", VA = "0x1C25630")]
			public <>c()
			{
			}

			[Token(Token = "0x6001665")]
			[Address(RVA = "0x1C25638", Offset = "0x1C25638", VA = "0x1C25638")]
			internal JToken <PropertyValues>b__21_0(JProperty p)
			{
				return null;
			}
		}

		[Token(Token = "0x200033A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49E8C", Offset = "0xB49E8C")]
		private sealed class <GetEnumerator>d__49 : IEnumerator<KeyValuePair<string, JToken>>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000F31")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000F32")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private KeyValuePair<string, JToken> <>2__current;

			[Token(Token = "0x4000F33")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public JObject <>4__this;

			[Token(Token = "0x4000F34")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private IEnumerator<JToken> <>7__wrap1;

			[Token(Token = "0x17000256")]
			private KeyValuePair<string, JToken> System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<System.String,Newtonsoft.Json.Linq.JToken>>.Current
			{
				[Token(Token = "0x600166A")]
				[Address(RVA = "0x1C25AB8", Offset = "0x1C25AB8", VA = "0x1C25AB8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(KeyValuePair<string, JToken>);
				}
			}

			[Token(Token = "0x17000257")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600166C")]
				[Address(RVA = "0x1C25B2C", Offset = "0x1C25B2C", VA = "0x1C25B2C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001666")]
			[Address(RVA = "0x1C24E58", Offset = "0x1C24E58", VA = "0x1C24E58")]
			[DebuggerHidden]
			public <GetEnumerator>d__49(int <>1__state)
			{
			}

			[Token(Token = "0x6001667")]
			[Address(RVA = "0x1C25664", Offset = "0x1C25664", VA = "0x1C25664", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001668")]
			[Address(RVA = "0x1C25740", Offset = "0x1C25740", VA = "0x1C25740", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001669")]
			[Address(RVA = "0x1C25680", Offset = "0x1C25680", VA = "0x1C25680")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x600166B")]
			[Address(RVA = "0x1C25AC4", Offset = "0x1C25AC4", VA = "0x1C25AC4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000CCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private JPropertKeyedCollection _properties;

		[Token(Token = "0x170001D0")]
		protected override IList<JToken> ChildrenTokens
		{
			[Token(Token = "0x6001280")]
			[Address(RVA = "0x1C22700", Offset = "0x1C22700", VA = "0x1C22700", Slot = "51")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001D1")]
		public override JTokenType Type
		{
			[Token(Token = "0x600128D")]
			[Address(RVA = "0x1C23114", Offset = "0x1C23114", VA = "0x1C23114", Slot = "13")]
			get
			{
				return default(JTokenType);
			}
		}

		[Token(Token = "0x170001D2")]
		public override JToken Item
		{
			[Token(Token = "0x6001291")]
			[Address(RVA = "0x1C232A8", Offset = "0x1C232A8", VA = "0x1C232A8", Slot = "15")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001292")]
			[Address(RVA = "0x1C23494", Offset = "0x1C23494", VA = "0x1C23494", Slot = "16")]
			set
			{
			}
		}

		[Token(Token = "0x170001D3")]
		public new JToken Item
		{
			[Token(Token = "0x6001293")]
			[Address(RVA = "0x1C23410", Offset = "0x1C23410", VA = "0x1C23410", Slot = "63")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001294")]
			[Address(RVA = "0x1C23604", Offset = "0x1C23604", VA = "0x1C23604", Slot = "64")]
			set
			{
			}
		}

		[Token(Token = "0x170001D4")]
		private ICollection<string> System.Collections.Generic.IDictionary<System.String,Newtonsoft.Json.Linq.JToken>.Keys
		{
			[Token(Token = "0x600129C")]
			[Address(RVA = "0x1C243DC", Offset = "0x1C243DC", VA = "0x1C243DC", Slot = "65")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001D5")]
		private ICollection<JToken> System.Collections.Generic.IDictionary<System.String,Newtonsoft.Json.Linq.JToken>.Values
		{
			[Token(Token = "0x600129F")]
			[Address(RVA = "0x1C245A0", Offset = "0x1C245A0", VA = "0x1C245A0", Slot = "66")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001D6")]
		private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Newtonsoft.Json.Linq.JToken>>.IsReadOnly
		{
			[Token(Token = "0x60012A4")]
			[Address(RVA = "0x1C24C70", Offset = "0x1C24C70", VA = "0x1C24C70", Slot = "72")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1400000B")]
		public event PropertyChangedEventHandler PropertyChanged
		{
			[Token(Token = "0x6001281")]
			[Address(RVA = "0x1C22708", Offset = "0x1C22708", VA = "0x1C22708", Slot = "91")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4DAA4", Offset = "0xB4DAA4")]
			add
			{
			}
			[Token(Token = "0x6001282")]
			[Address(RVA = "0x1C227F4", Offset = "0x1C227F4", VA = "0x1C227F4", Slot = "92")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4DAB4", Offset = "0xB4DAB4")]
			remove
			{
			}
		}

		[Token(Token = "0x6001283")]
		[Address(RVA = "0x1C216E4", Offset = "0x1C216E4", VA = "0x1C216E4")]
		public JObject()
		{
		}

		[Token(Token = "0x6001284")]
		[Address(RVA = "0x1C22940", Offset = "0x1C22940", VA = "0x1C22940")]
		public JObject(JObject other)
		{
		}

		[Token(Token = "0x6001285")]
		[Address(RVA = "0x1C229E4", Offset = "0x1C229E4", VA = "0x1C229E4")]
		public JObject(params object[] content)
		{
		}

		[Token(Token = "0x6001286")]
		[Address(RVA = "0x1C229E8", Offset = "0x1C229E8", VA = "0x1C229E8")]
		public JObject(object content)
		{
		}

		[Token(Token = "0x6001287")]
		[Address(RVA = "0x1C22AA4", Offset = "0x1C22AA4", VA = "0x1C22AA4", Slot = "12")]
		internal override bool DeepEquals(JToken node)
		{
			return default(bool);
		}

		[Token(Token = "0x6001288")]
		[Address(RVA = "0x1C22B44", Offset = "0x1C22B44", VA = "0x1C22B44", Slot = "52")]
		internal override void InsertItem(int index, JToken item)
		{
		}

		[Token(Token = "0x6001289")]
		[Address(RVA = "0x1C22BA8", Offset = "0x1C22BA8", VA = "0x1C22BA8", Slot = "61")]
		internal override void ValidateToken(JToken o, JToken existing)
		{
		}

		[Token(Token = "0x600128A")]
		[Address(RVA = "0x1C23070", Offset = "0x1C23070", VA = "0x1C23070")]
		internal void InternalPropertyChanged(JProperty childProperty)
		{
		}

		[Token(Token = "0x600128B")]
		[Address(RVA = "0x1C230B0", Offset = "0x1C230B0", VA = "0x1C230B0")]
		internal void InternalPropertyChanging(JProperty childProperty)
		{
		}

		[Token(Token = "0x600128C")]
		[Address(RVA = "0x1C230B4", Offset = "0x1C230B4", VA = "0x1C230B4", Slot = "11")]
		internal override JToken CloneToken()
		{
			return null;
		}

		[Token(Token = "0x600128E")]
		[Address(RVA = "0x1C2311C", Offset = "0x1C2311C", VA = "0x1C2311C")]
		public IEnumerable<JProperty> Properties()
		{
			return null;
		}

		[Token(Token = "0x600128F")]
		[Address(RVA = "0x1C218C8", Offset = "0x1C218C8", VA = "0x1C218C8")]
		public JProperty Property(string name)
		{
			return null;
		}

		[Token(Token = "0x6001290")]
		[Address(RVA = "0x1C2317C", Offset = "0x1C2317C", VA = "0x1C2317C")]
		public JEnumerable<JToken> PropertyValues()
		{
			return default(JEnumerable<JToken>);
		}

		[Token(Token = "0x6001295")]
		[Address(RVA = "0x1C238FC", Offset = "0x1C238FC", VA = "0x1C238FC")]
		public new static JObject Load(JsonReader reader)
		{
			return null;
		}

		[Token(Token = "0x6001296")]
		[Address(RVA = "0x1C23B6C", Offset = "0x1C23B6C", VA = "0x1C23B6C")]
		public new static JObject Parse(string json)
		{
			return null;
		}

		[Token(Token = "0x6001297")]
		[Address(RVA = "0x1C23BF0", Offset = "0x1C23BF0", VA = "0x1C23BF0")]
		public new static JObject FromObject(object o)
		{
			return null;
		}

		[Token(Token = "0x6001298")]
		[Address(RVA = "0x1C23C54", Offset = "0x1C23C54", VA = "0x1C23C54")]
		public new static JObject FromObject(object o, JsonSerializer jsonSerializer)
		{
			return null;
		}

		[Token(Token = "0x6001299")]
		[Address(RVA = "0x1C23E60", Offset = "0x1C23E60", VA = "0x1C23E60", Slot = "22")]
		public override void WriteTo(JsonWriter writer, params JsonConverter[] converters)
		{
		}

		[Token(Token = "0x600129A")]
		[Address(RVA = "0x1C24250", Offset = "0x1C24250", VA = "0x1C24250", Slot = "68")]
		public void Add(string propertyName, JToken value)
		{
		}

		[Token(Token = "0x600129B")]
		[Address(RVA = "0x1C242D4", Offset = "0x1C242D4", VA = "0x1C242D4", Slot = "67")]
		private bool System.Collections.Generic.IDictionary<System.String,Newtonsoft.Json.Linq.JToken>.ContainsKey(string key)
		{
			return default(bool);
		}

		[Token(Token = "0x600129D")]
		[Address(RVA = "0x1C244A8", Offset = "0x1C244A8", VA = "0x1C244A8", Slot = "69")]
		public bool Remove(string propertyName)
		{
			return default(bool);
		}

		[Token(Token = "0x600129E")]
		[Address(RVA = "0x1C24564", Offset = "0x1C24564", VA = "0x1C24564", Slot = "70")]
		public bool TryGetValue(string propertyName, out JToken value)
		{
			return default(bool);
		}

		[Token(Token = "0x60012A0")]
		[Address(RVA = "0x1C2466C", Offset = "0x1C2466C", VA = "0x1C2466C", Slot = "73")]
		private void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Newtonsoft.Json.Linq.JToken>>.Add(KeyValuePair<string, JToken> item)
		{
		}

		[Token(Token = "0x60012A1")]
		[Address(RVA = "0x1C2472C", Offset = "0x1C2472C", VA = "0x1C2472C", Slot = "74")]
		private void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Newtonsoft.Json.Linq.JToken>>.Clear()
		{
		}

		[Token(Token = "0x60012A2")]
		[Address(RVA = "0x1C2473C", Offset = "0x1C2473C", VA = "0x1C2473C", Slot = "75")]
		private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Newtonsoft.Json.Linq.JToken>>.Contains(KeyValuePair<string, JToken> item)
		{
			return default(bool);
		}

		[Token(Token = "0x60012A3")]
		[Address(RVA = "0x1C247D0", Offset = "0x1C247D0", VA = "0x1C247D0", Slot = "76")]
		private void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Newtonsoft.Json.Linq.JToken>>.CopyTo(KeyValuePair<string, JToken>[] array, int arrayIndex)
		{
		}

		[Token(Token = "0x60012A5")]
		[Address(RVA = "0x1C24C78", Offset = "0x1C24C78", VA = "0x1C24C78", Slot = "77")]
		private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Newtonsoft.Json.Linq.JToken>>.Remove(KeyValuePair<string, JToken> item)
		{
			return default(bool);
		}

		[Token(Token = "0x60012A6")]
		[Address(RVA = "0x1C24DE0", Offset = "0x1C24DE0", VA = "0x1C24DE0", Slot = "23")]
		internal override int GetDeepHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60012A7")]
		[Address(RVA = "0x1C24DE4", Offset = "0x1C24DE4", VA = "0x1C24DE4", Slot = "78")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB4DAC4", Offset = "0xB4DAC4")]
		public IEnumerator<KeyValuePair<string, JToken>> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x60012A8")]
		[Address(RVA = "0x1C24E84", Offset = "0x1C24E84", VA = "0x1C24E84", Slot = "93")]
		protected virtual void OnPropertyChanged(string propertyName)
		{
		}

		[Token(Token = "0x60012A9")]
		[Address(RVA = "0x1C24F18", Offset = "0x1C24F18", VA = "0x1C24F18", Slot = "88")]
		private PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties()
		{
			return null;
		}

		[Token(Token = "0x60012AA")]
		[Address(RVA = "0x1C24FC4", Offset = "0x1C24FC4", VA = "0x1C24FC4")]
		private static Type GetTokenPropertyType(JToken token)
		{
			return null;
		}

		[Token(Token = "0x60012AB")]
		[Address(RVA = "0x1C250AC", Offset = "0x1C250AC", VA = "0x1C250AC", Slot = "89")]
		private PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties(Attribute[] attributes)
		{
			return null;
		}

		[Token(Token = "0x60012AC")]
		[Address(RVA = "0x1C25408", Offset = "0x1C25408", VA = "0x1C25408", Slot = "79")]
		private AttributeCollection System.ComponentModel.ICustomTypeDescriptor.GetAttributes()
		{
			return null;
		}

		[Token(Token = "0x60012AD")]
		[Address(RVA = "0x1C25470", Offset = "0x1C25470", VA = "0x1C25470", Slot = "80")]
		private string System.ComponentModel.ICustomTypeDescriptor.GetClassName()
		{
			return null;
		}

		[Token(Token = "0x60012AE")]
		[Address(RVA = "0x1C25478", Offset = "0x1C25478", VA = "0x1C25478", Slot = "81")]
		private string System.ComponentModel.ICustomTypeDescriptor.GetComponentName()
		{
			return null;
		}

		[Token(Token = "0x60012AF")]
		[Address(RVA = "0x1C25480", Offset = "0x1C25480", VA = "0x1C25480", Slot = "82")]
		private TypeConverter System.ComponentModel.ICustomTypeDescriptor.GetConverter()
		{
			return null;
		}

		[Token(Token = "0x60012B0")]
		[Address(RVA = "0x1C254DC", Offset = "0x1C254DC", VA = "0x1C254DC", Slot = "83")]
		private EventDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent()
		{
			return null;
		}

		[Token(Token = "0x60012B1")]
		[Address(RVA = "0x1C254E4", Offset = "0x1C254E4", VA = "0x1C254E4", Slot = "84")]
		private PropertyDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty()
		{
			return null;
		}

		[Token(Token = "0x60012B2")]
		[Address(RVA = "0x1C254EC", Offset = "0x1C254EC", VA = "0x1C254EC", Slot = "85")]
		private object System.ComponentModel.ICustomTypeDescriptor.GetEditor(Type editorBaseType)
		{
			return null;
		}

		[Token(Token = "0x60012B3")]
		[Address(RVA = "0x1C254F4", Offset = "0x1C254F4", VA = "0x1C254F4", Slot = "87")]
		private EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents(Attribute[] attributes)
		{
			return null;
		}

		[Token(Token = "0x60012B4")]
		[Address(RVA = "0x1C2555C", Offset = "0x1C2555C", VA = "0x1C2555C", Slot = "86")]
		private EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents()
		{
			return null;
		}

		[Token(Token = "0x60012B5")]
		[Address(RVA = "0x1C255C4", Offset = "0x1C255C4", VA = "0x1C255C4", Slot = "90")]
		private object System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor pd)
		{
			return null;
		}
	}
	[Token(Token = "0x200026E")]
	internal class JPath
	{
		[Token(Token = "0x4000CCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly string _expression;

		[Token(Token = "0x4000CD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4BAB8", Offset = "0xB4BAB8")]
		private List<object> <Parts>k__BackingField;

		[Token(Token = "0x4000CD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int _currentIndex;

		[Token(Token = "0x170001D7")]
		public List<object> Parts
		{
			[Token(Token = "0x60012B6")]
			[Address(RVA = "0x1C25E90", Offset = "0x1C25E90", VA = "0x1C25E90")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4DB28", Offset = "0xB4DB28")]
			get
			{
				return null;
			}
			[Token(Token = "0x60012B7")]
			[Address(RVA = "0x1C25E98", Offset = "0x1C25E98", VA = "0x1C25E98")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4DB38", Offset = "0xB4DB38")]
			private set
			{
			}
		}

		[Token(Token = "0x60012B8")]
		[Address(RVA = "0x1C25EA0", Offset = "0x1C25EA0", VA = "0x1C25EA0")]
		public JPath(string expression)
		{
		}

		[Token(Token = "0x60012B9")]
		[Address(RVA = "0x1C25F40", Offset = "0x1C25F40", VA = "0x1C25F40")]
		private void ParseMain()
		{
		}

		[Token(Token = "0x60012BA")]
		[Address(RVA = "0x1C261F4", Offset = "0x1C261F4", VA = "0x1C261F4")]
		private void ParseIndexer(char indexerOpenChar)
		{
		}

		[Token(Token = "0x60012BB")]
		[Address(RVA = "0x1C264C0", Offset = "0x1C264C0", VA = "0x1C264C0")]
		internal JToken Evaluate(JToken root, bool errorWhenNoMatch)
		{
			return null;
		}
	}
	[Token(Token = "0x200026F")]
	public class JProperty : JContainer
	{
		[Token(Token = "0x4000CD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly List<JToken> _content;

		[Token(Token = "0x4000CD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly string _name;

		[Token(Token = "0x170001D8")]
		protected override IList<JToken> ChildrenTokens
		{
			[Token(Token = "0x60012BC")]
			[Address(RVA = "0x1C26C74", Offset = "0x1C26C74", VA = "0x1C26C74", Slot = "51")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001D9")]
		public string Name
		{
			[Token(Token = "0x60012BD")]
			[Address(RVA = "0x1C23018", Offset = "0x1C23018", VA = "0x1C23018")]
			[DebuggerStepThrough]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001DA")]
		public new JToken Value
		{
			[Token(Token = "0x60012BE")]
			[Address(RVA = "0x1C2157C", Offset = "0x1C2157C", VA = "0x1C2157C")]
			[DebuggerStepThrough]
			get
			{
				return null;
			}
			[Token(Token = "0x60012BF")]
			[Address(RVA = "0x1C236C4", Offset = "0x1C236C4", VA = "0x1C236C4")]
			set
			{
			}
		}

		[Token(Token = "0x170001DB")]
		public override JTokenType Type
		{
			[Token(Token = "0x60012CA")]
			[Address(RVA = "0x1C276E4", Offset = "0x1C276E4", VA = "0x1C276E4", Slot = "13")]
			[DebuggerStepThrough]
			get
			{
				return default(JTokenType);
			}
		}

		[Token(Token = "0x60012C0")]
		[Address(RVA = "0x1C26C7C", Offset = "0x1C26C7C", VA = "0x1C26C7C")]
		public JProperty(JProperty other)
		{
		}

		[Token(Token = "0x60012C1")]
		[Address(RVA = "0x1C26D10", Offset = "0x1C26D10", VA = "0x1C26D10", Slot = "55")]
		internal override JToken GetItem(int index)
		{
			return null;
		}

		[Token(Token = "0x60012C2")]
		[Address(RVA = "0x1C26D9C", Offset = "0x1C26D9C", VA = "0x1C26D9C", Slot = "56")]
		internal override void SetItem(int index, JToken item)
		{
		}

		[Token(Token = "0x60012C3")]
		[Address(RVA = "0x1C27054", Offset = "0x1C27054", VA = "0x1C27054", Slot = "54")]
		internal override bool RemoveItem(JToken item)
		{
			return default(bool);
		}

		[Token(Token = "0x60012C4")]
		[Address(RVA = "0x1C27198", Offset = "0x1C27198", VA = "0x1C27198", Slot = "53")]
		internal override void RemoveItemAt(int index)
		{
		}

		[Token(Token = "0x60012C5")]
		[Address(RVA = "0x1C272DC", Offset = "0x1C272DC", VA = "0x1C272DC", Slot = "52")]
		internal override void InsertItem(int index, JToken item)
		{
		}

		[Token(Token = "0x60012C6")]
		[Address(RVA = "0x1C27450", Offset = "0x1C27450", VA = "0x1C27450", Slot = "59")]
		internal override bool ContainsItem(JToken item)
		{
			return default(bool);
		}

		[Token(Token = "0x60012C7")]
		[Address(RVA = "0x1C27478", Offset = "0x1C27478", VA = "0x1C27478", Slot = "57")]
		internal override void ClearItems()
		{
		}

		[Token(Token = "0x60012C8")]
		[Address(RVA = "0x1C275BC", Offset = "0x1C275BC", VA = "0x1C275BC", Slot = "12")]
		internal override bool DeepEquals(JToken node)
		{
			return default(bool);
		}

		[Token(Token = "0x60012C9")]
		[Address(RVA = "0x1C27684", Offset = "0x1C27684", VA = "0x1C27684", Slot = "11")]
		internal override JToken CloneToken()
		{
			return null;
		}

		[Token(Token = "0x60012CB")]
		[Address(RVA = "0x1C2182C", Offset = "0x1C2182C", VA = "0x1C2182C")]
		internal JProperty(string name)
		{
		}

		[Token(Token = "0x60012CC")]
		[Address(RVA = "0x1C276EC", Offset = "0x1C276EC", VA = "0x1C276EC")]
		public JProperty(string name, params object[] content)
		{
		}

		[Token(Token = "0x60012CD")]
		[Address(RVA = "0x1C2381C", Offset = "0x1C2381C", VA = "0x1C2381C")]
		public JProperty(string name, object content)
		{
		}

		[Token(Token = "0x60012CE")]
		[Address(RVA = "0x1C276F0", Offset = "0x1C276F0", VA = "0x1C276F0", Slot = "22")]
		public override void WriteTo(JsonWriter writer, params JsonConverter[] converters)
		{
		}

		[Token(Token = "0x60012CF")]
		[Address(RVA = "0x1C2776C", Offset = "0x1C2776C", VA = "0x1C2776C", Slot = "23")]
		internal override int GetDeepHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60012D0")]
		[Address(RVA = "0x1C277E4", Offset = "0x1C277E4", VA = "0x1C277E4")]
		public new static JProperty Load(JsonReader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000270")]
	public class JPropertyDescriptor : PropertyDescriptor
	{
		[Token(Token = "0x4000CD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private readonly Type _propertyType;

		[Token(Token = "0x170001DC")]
		public override Type ComponentType
		{
			[Token(Token = "0x60012D8")]
			[Address(RVA = "0x1C27D00", Offset = "0x1C27D00", VA = "0x1C27D00", Slot = "13")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001DD")]
		public override bool IsReadOnly
		{
			[Token(Token = "0x60012D9")]
			[Address(RVA = "0x1C27D70", Offset = "0x1C27D70", VA = "0x1C27D70", Slot = "14")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001DE")]
		public override Type PropertyType
		{
			[Token(Token = "0x60012DA")]
			[Address(RVA = "0x1C27D78", Offset = "0x1C27D78", VA = "0x1C27D78", Slot = "15")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001DF")]
		protected override int NameHashCode
		{
			[Token(Token = "0x60012DB")]
			[Address(RVA = "0x1C27D80", Offset = "0x1C27D80", VA = "0x1C27D80", Slot = "8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60012D1")]
		[Address(RVA = "0x1C25370", Offset = "0x1C25370", VA = "0x1C25370")]
		public JPropertyDescriptor(string name, Type propertyType)
		{
		}

		[Token(Token = "0x60012D2")]
		[Address(RVA = "0x1C27AC8", Offset = "0x1C27AC8", VA = "0x1C27AC8")]
		private static JObject CastInstance(object instance)
		{
			return null;
		}

		[Token(Token = "0x60012D3")]
		[Address(RVA = "0x1C27B94", Offset = "0x1C27B94", VA = "0x1C27B94", Slot = "16")]
		public override bool CanResetValue(object component)
		{
			return default(bool);
		}

		[Token(Token = "0x60012D4")]
		[Address(RVA = "0x1C27B9C", Offset = "0x1C27B9C", VA = "0x1C27B9C", Slot = "17")]
		public override object GetValue(object component)
		{
			return null;
		}

		[Token(Token = "0x60012D5")]
		[Address(RVA = "0x1C27BEC", Offset = "0x1C27BEC", VA = "0x1C27BEC", Slot = "19")]
		public override void ResetValue(object component)
		{
		}

		[Token(Token = "0x60012D6")]
		[Address(RVA = "0x1C27BF0", Offset = "0x1C27BF0", VA = "0x1C27BF0", Slot = "20")]
		public override void SetValue(object component, object value)
		{
		}

		[Token(Token = "0x60012D7")]
		[Address(RVA = "0x1C27CF8", Offset = "0x1C27CF8", VA = "0x1C27CF8", Slot = "21")]
		public override bool ShouldSerializeValue(object component)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000271")]
	public class JRaw : JValue
	{
		[Token(Token = "0x60012DC")]
		[Address(RVA = "0x1C27D88", Offset = "0x1C27D88", VA = "0x1C27D88")]
		public JRaw(JRaw other)
		{
		}

		[Token(Token = "0x60012DD")]
		[Address(RVA = "0x1C27E00", Offset = "0x1C27E00", VA = "0x1C27E00")]
		public JRaw(object rawJson)
		{
		}

		[Token(Token = "0x60012DE")]
		[Address(RVA = "0x1C27E34", Offset = "0x1C27E34", VA = "0x1C27E34")]
		public static JRaw Create(JsonReader reader)
		{
			return null;
		}

		[Token(Token = "0x60012DF")]
		[Address(RVA = "0x1C280F0", Offset = "0x1C280F0", VA = "0x1C280F0", Slot = "11")]
		internal override JToken CloneToken()
		{
			return null;
		}
	}
	[Token(Token = "0x2000272")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0xB499BC", Offset = "0xB499BC")]
	public abstract class JToken : IJEnumerable<JToken>, IEnumerable<JToken>, IEnumerable, IJsonLineInfo, ICloneable
	{
		[Token(Token = "0x200033B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49E9C", Offset = "0xB49E9C")]
		private sealed class <Ancestors>d__29 : IEnumerable<JToken>, IEnumerable, IEnumerator<JToken>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000F35")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000F36")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private JToken <>2__current;

			[Token(Token = "0x4000F37")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4000F38")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public JToken <>4__this;

			[Token(Token = "0x4000F39")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private JToken <parent>5__2;

			[Token(Token = "0x17000258")]
			private JToken System.Collections.Generic.IEnumerator<Newtonsoft.Json.Linq.JToken>.Current
			{
				[Token(Token = "0x6001670")]
				[Address(RVA = "0x1C2DA90", Offset = "0x1C2DA90", VA = "0x1C2DA90", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000259")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001672")]
				[Address(RVA = "0x1C2DB00", Offset = "0x1C2DB00", VA = "0x1C2DB00", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600166D")]
			[Address(RVA = "0x1C2842C", Offset = "0x1C2842C", VA = "0x1C2842C")]
			[DebuggerHidden]
			public <Ancestors>d__29(int <>1__state)
			{
			}

			[Token(Token = "0x600166E")]
			[Address(RVA = "0x1C2D9E8", Offset = "0x1C2D9E8", VA = "0x1C2D9E8", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600166F")]
			[Address(RVA = "0x1C2D9EC", Offset = "0x1C2D9EC", VA = "0x1C2D9EC", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001671")]
			[Address(RVA = "0x1C2DA98", Offset = "0x1C2DA98", VA = "0x1C2DA98", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6001673")]
			[Address(RVA = "0x1C2DB08", Offset = "0x1C2DB08", VA = "0x1C2DB08", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<JToken> System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6001674")]
			[Address(RVA = "0x1C2DBB8", Offset = "0x1C2DBB8", VA = "0x1C2DBB8", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x200033C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49EAC", Offset = "0xB49EAC")]
		private sealed class <AfterSelf>d__30 : IEnumerable<JToken>, IEnumerable, IEnumerator<JToken>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000F3A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000F3B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private JToken <>2__current;

			[Token(Token = "0x4000F3C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4000F3D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public JToken <>4__this;

			[Token(Token = "0x4000F3E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private JToken <o>5__2;

			[Token(Token = "0x1700025A")]
			private JToken System.Collections.Generic.IEnumerator<Newtonsoft.Json.Linq.JToken>.Current
			{
				[Token(Token = "0x6001678")]
				[Address(RVA = "0x1C2D8BC", Offset = "0x1C2D8BC", VA = "0x1C2D8BC", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700025B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600167A")]
				[Address(RVA = "0x1C2D92C", Offset = "0x1C2D92C", VA = "0x1C2D92C", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001675")]
			[Address(RVA = "0x1C284E8", Offset = "0x1C284E8", VA = "0x1C284E8")]
			[DebuggerHidden]
			public <AfterSelf>d__30(int <>1__state)
			{
			}

			[Token(Token = "0x6001676")]
			[Address(RVA = "0x1C2D81C", Offset = "0x1C2D81C", VA = "0x1C2D81C", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001677")]
			[Address(RVA = "0x1C2D820", Offset = "0x1C2D820", VA = "0x1C2D820", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001679")]
			[Address(RVA = "0x1C2D8C4", Offset = "0x1C2D8C4", VA = "0x1C2D8C4", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x600167B")]
			[Address(RVA = "0x1C2D934", Offset = "0x1C2D934", VA = "0x1C2D934", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<JToken> System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x600167C")]
			[Address(RVA = "0x1C2D9E4", Offset = "0x1C2D9E4", VA = "0x1C2D9E4", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x200033D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49EBC", Offset = "0xB49EBC")]
		private sealed class <BeforeSelf>d__31 : IEnumerable<JToken>, IEnumerable, IEnumerator<JToken>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000F3F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000F40")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private JToken <>2__current;

			[Token(Token = "0x4000F41")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4000F42")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public JToken <>4__this;

			[Token(Token = "0x4000F43")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private JToken <o>5__2;

			[Token(Token = "0x1700025C")]
			private JToken System.Collections.Generic.IEnumerator<Newtonsoft.Json.Linq.JToken>.Current
			{
				[Token(Token = "0x6001680")]
				[Address(RVA = "0x1C2DC88", Offset = "0x1C2DC88", VA = "0x1C2DC88", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700025D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001682")]
				[Address(RVA = "0x1C2DCF8", Offset = "0x1C2DCF8", VA = "0x1C2DCF8", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600167D")]
			[Address(RVA = "0x1C285A4", Offset = "0x1C285A4", VA = "0x1C285A4")]
			[DebuggerHidden]
			public <BeforeSelf>d__31(int <>1__state)
			{
			}

			[Token(Token = "0x600167E")]
			[Address(RVA = "0x1C2DBBC", Offset = "0x1C2DBBC", VA = "0x1C2DBBC", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600167F")]
			[Address(RVA = "0x1C2DBC0", Offset = "0x1C2DBC0", VA = "0x1C2DBC0", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001681")]
			[Address(RVA = "0x1C2DC90", Offset = "0x1C2DC90", VA = "0x1C2DC90", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6001683")]
			[Address(RVA = "0x1C2DD00", Offset = "0x1C2DD00", VA = "0x1C2DD00", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<JToken> System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6001684")]
			[Address(RVA = "0x1C2DDB0", Offset = "0x1C2DDB0", VA = "0x1C2DDB0", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x4000CD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private JContainer _parent;

		[Token(Token = "0x4000CD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private JToken _previous;

		[Token(Token = "0x4000CD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private JToken _next;

		[Token(Token = "0x4000CD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static JTokenEqualityComparer _equalityComparer;

		[Token(Token = "0x4000CD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int? _lineNumber;

		[Token(Token = "0x4000CDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int? _linePosition;

		[Token(Token = "0x170001E0")]
		public static JTokenEqualityComparer EqualityComparer
		{
			[Token(Token = "0x60012E0")]
			[Address(RVA = "0x1C28150", Offset = "0x1C28150", VA = "0x1C28150")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001E1")]
		public JContainer Parent
		{
			[Token(Token = "0x60012E1")]
			[Address(RVA = "0x1C1EF7C", Offset = "0x1C1EF7C", VA = "0x1C1EF7C")]
			[DebuggerStepThrough]
			get
			{
				return null;
			}
			[Token(Token = "0x60012E2")]
			[Address(RVA = "0x1C1F37C", Offset = "0x1C1F37C", VA = "0x1C1F37C")]
			internal set
			{
			}
		}

		[Token(Token = "0x170001E2")]
		public JToken Root
		{
			[Token(Token = "0x60012E3")]
			[Address(RVA = "0x1C281E0", Offset = "0x1C281E0", VA = "0x1C281E0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001E3")]
		public abstract JTokenType Type
		{
			[Token(Token = "0x60012E6")]
			get;
		}

		[Token(Token = "0x170001E4")]
		public abstract bool HasValues
		{
			[Token(Token = "0x60012E7")]
			get;
		}

		[Token(Token = "0x170001E5")]
		public JToken Next
		{
			[Token(Token = "0x60012E9")]
			[Address(RVA = "0x1C1EB80", Offset = "0x1C1EB80", VA = "0x1C1EB80")]
			get
			{
				return null;
			}
			[Token(Token = "0x60012EA")]
			[Address(RVA = "0x1C1F38C", Offset = "0x1C1F38C", VA = "0x1C1F38C")]
			internal set
			{
			}
		}

		[Token(Token = "0x170001E6")]
		public JToken Previous
		{
			[Token(Token = "0x60012EB")]
			[Address(RVA = "0x1C28220", Offset = "0x1C28220", VA = "0x1C28220")]
			get
			{
				return null;
			}
			[Token(Token = "0x60012EC")]
			[Address(RVA = "0x1C1F384", Offset = "0x1C1F384", VA = "0x1C1F384")]
			internal set
			{
			}
		}

		[Token(Token = "0x170001E7")]
		public virtual JToken Item
		{
			[Token(Token = "0x60012F3")]
			[Address(RVA = "0x1C285DC", Offset = "0x1C285DC", VA = "0x1C285DC", Slot = "15")]
			get
			{
				return null;
			}
			[Token(Token = "0x60012F4")]
			[Address(RVA = "0x1C286F4", Offset = "0x1C286F4", VA = "0x1C286F4", Slot = "16")]
			set
			{
			}
		}

		[Token(Token = "0x170001E8")]
		public virtual JToken First
		{
			[Token(Token = "0x60012F6")]
			[Address(RVA = "0x1C2880C", Offset = "0x1C2880C", VA = "0x1C2880C", Slot = "18")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001E9")]
		public virtual JToken Last
		{
			[Token(Token = "0x60012F7")]
			[Address(RVA = "0x1C28924", Offset = "0x1C28924", VA = "0x1C28924", Slot = "19")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001EA")]
		private IJEnumerable<JToken> Newtonsoft.Json.Linq.IJEnumerable<Newtonsoft.Json.Linq.JToken>.Item
		{
			[Token(Token = "0x6001340")]
			[Address(RVA = "0x1C2D028", Offset = "0x1C2D028", VA = "0x1C2D028", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001EB")]
		private int Newtonsoft.Json.IJsonLineInfo.LineNumber
		{
			[Token(Token = "0x600134D")]
			[Address(RVA = "0x1C2D670", Offset = "0x1C2D670", VA = "0x1C2D670", Slot = "8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001EC")]
		private int Newtonsoft.Json.IJsonLineInfo.LinePosition
		{
			[Token(Token = "0x600134E")]
			[Address(RVA = "0x1C2D6F4", Offset = "0x1C2D6F4", VA = "0x1C2D6F4", Slot = "9")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60012E4")]
		internal abstract JToken CloneToken();

		[Token(Token = "0x60012E5")]
		internal abstract bool DeepEquals(JToken node);

		[Token(Token = "0x60012E8")]
		[Address(RVA = "0x1C281F4", Offset = "0x1C281F4", VA = "0x1C281F4")]
		public static bool DeepEquals(JToken t1, JToken t2)
		{
			return default(bool);
		}

		[Token(Token = "0x60012ED")]
		[Address(RVA = "0x1C1E978", Offset = "0x1C1E978", VA = "0x1C1E978")]
		internal JToken()
		{
		}

		[Token(Token = "0x60012EE")]
		[Address(RVA = "0x1C28228", Offset = "0x1C28228", VA = "0x1C28228")]
		public void AddAfterSelf(object content)
		{
		}

		[Token(Token = "0x60012EF")]
		[Address(RVA = "0x1C282E8", Offset = "0x1C282E8", VA = "0x1C282E8")]
		public void AddBeforeSelf(object content)
		{
		}

		[Token(Token = "0x60012F0")]
		[Address(RVA = "0x1C283A8", Offset = "0x1C283A8", VA = "0x1C283A8")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB4DB88", Offset = "0xB4DB88")]
		public IEnumerable<JToken> Ancestors()
		{
			return null;
		}

		[Token(Token = "0x60012F1")]
		[Address(RVA = "0x1C28464", Offset = "0x1C28464", VA = "0x1C28464")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB4DBEC", Offset = "0xB4DBEC")]
		public IEnumerable<JToken> AfterSelf()
		{
			return null;
		}

		[Token(Token = "0x60012F2")]
		[Address(RVA = "0x1C28520", Offset = "0x1C28520", VA = "0x1C28520")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB4DC50", Offset = "0xB4DC50")]
		public IEnumerable<JToken> BeforeSelf()
		{
			return null;
		}

		[Token(Token = "0x60012F5")]
		public virtual T Value<T>(object key)
		{
			return (T)null;
		}

		[Token(Token = "0x60012F8")]
		[Address(RVA = "0x1C28A3C", Offset = "0x1C28A3C", VA = "0x1C28A3C", Slot = "20")]
		public virtual JEnumerable<JToken> Children()
		{
			return default(JEnumerable<JToken>);
		}

		[Token(Token = "0x60012F9")]
		public JEnumerable<T> Children<T>() where T : JToken
		{
			return default(JEnumerable<T>);
		}

		[Token(Token = "0x60012FA")]
		public virtual IEnumerable<T> Values<T>()
		{
			return null;
		}

		[Token(Token = "0x60012FB")]
		[Address(RVA = "0x1C244C8", Offset = "0x1C244C8", VA = "0x1C244C8")]
		public void Remove()
		{
		}

		[Token(Token = "0x60012FC")]
		[Address(RVA = "0x1C21A64", Offset = "0x1C21A64", VA = "0x1C21A64")]
		public void Replace(JToken value)
		{
		}

		[Token(Token = "0x60012FD")]
		public abstract void WriteTo(JsonWriter writer, params JsonConverter[] converters);

		[Token(Token = "0x60012FE")]
		[Address(RVA = "0x1C28AA4", Offset = "0x1C28AA4", VA = "0x1C28AA4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60012FF")]
		[Address(RVA = "0x1C28B00", Offset = "0x1C28B00", VA = "0x1C28B00")]
		public string ToString(Formatting formatting, params JsonConverter[] converters)
		{
			return null;
		}

		[Token(Token = "0x6001300")]
		[Address(RVA = "0x1C28CDC", Offset = "0x1C28CDC", VA = "0x1C28CDC")]
		private static JValue EnsureValue(JToken value)
		{
			return null;
		}

		[Token(Token = "0x6001301")]
		[Address(RVA = "0x1C28DE4", Offset = "0x1C28DE4", VA = "0x1C28DE4")]
		private static string GetType(JToken token)
		{
			return null;
		}

		[Token(Token = "0x6001302")]
		[Address(RVA = "0x1C28F00", Offset = "0x1C28F00", VA = "0x1C28F00")]
		private static bool IsNullable(JToken o)
		{
			return default(bool);
		}

		[Token(Token = "0x6001303")]
		[Address(RVA = "0x1C28F5C", Offset = "0x1C28F5C", VA = "0x1C28F5C")]
		private static bool ValidateFloat(JToken o, bool nullable)
		{
			return default(bool);
		}

		[Token(Token = "0x6001304")]
		[Address(RVA = "0x1C28FD4", Offset = "0x1C28FD4", VA = "0x1C28FD4")]
		private static bool ValidateInteger(JToken o, bool nullable)
		{
			return default(bool);
		}

		[Token(Token = "0x6001305")]
		[Address(RVA = "0x1C29030", Offset = "0x1C29030", VA = "0x1C29030")]
		private static bool ValidateDate(JToken o, bool nullable)
		{
			return default(bool);
		}

		[Token(Token = "0x6001306")]
		[Address(RVA = "0x1C2908C", Offset = "0x1C2908C", VA = "0x1C2908C")]
		private static bool ValidateBoolean(JToken o, bool nullable)
		{
			return default(bool);
		}

		[Token(Token = "0x6001307")]
		[Address(RVA = "0x1C290E8", Offset = "0x1C290E8", VA = "0x1C290E8")]
		private static bool ValidateString(JToken o)
		{
			return default(bool);
		}

		[Token(Token = "0x6001308")]
		[Address(RVA = "0x1C29168", Offset = "0x1C29168", VA = "0x1C29168")]
		private static bool ValidateBytes(JToken o)
		{
			return default(bool);
		}

		[Token(Token = "0x6001309")]
		[Address(RVA = "0x1C291B8", Offset = "0x1C291B8", VA = "0x1C291B8")]
		public static explicit operator bool(JToken value)
		{
			return default(bool);
		}

		[Token(Token = "0x600130A")]
		[Address(RVA = "0x1C29314", Offset = "0x1C29314", VA = "0x1C29314")]
		public static explicit operator DateTimeOffset(JToken value)
		{
			return default(DateTimeOffset);
		}

		[Token(Token = "0x600130B")]
		[Address(RVA = "0x1C29474", Offset = "0x1C29474", VA = "0x1C29474")]
		public static explicit operator bool?(JToken value)
		{
			return null;
		}

		[Token(Token = "0x600130C")]
		[Address(RVA = "0x1C29650", Offset = "0x1C29650", VA = "0x1C29650")]
		public static explicit operator long(JToken value)
		{
			return default(long);
		}

		[Token(Token = "0x600130D")]
		[Address(RVA = "0x1C297AC", Offset = "0x1C297AC", VA = "0x1C297AC")]
		public static explicit operator DateTime?(JToken value)
		{
			return null;
		}

		[Token(Token = "0x600130E")]
		[Address(RVA = "0x1C2999C", Offset = "0x1C2999C", VA = "0x1C2999C")]
		public static explicit operator DateTimeOffset?(JToken value)
		{
			return null;
		}

		[Token(Token = "0x600130F")]
		[Address(RVA = "0x1C29B90", Offset = "0x1C29B90", VA = "0x1C29B90")]
		public static explicit operator decimal?(JToken value)
		{
			return null;
		}

		[Token(Token = "0x6001310")]
		[Address(RVA = "0x1C29D84", Offset = "0x1C29D84", VA = "0x1C29D84")]
		public static explicit operator double?(JToken value)
		{
			return null;
		}

		[Token(Token = "0x6001311")]
		[Address(RVA = "0x1C29F74", Offset = "0x1C29F74", VA = "0x1C29F74")]
		public static explicit operator int(JToken value)
		{
			return default(int);
		}

		[Token(Token = "0x6001312")]
		[Address(RVA = "0x1C2A118", Offset = "0x1C2A118", VA = "0x1C2A118")]
		public static explicit operator short(JToken value)
		{
			return default(short);
		}

		[Token(Token = "0x6001313")]
		[Address(RVA = "0x1C2A2BC", Offset = "0x1C2A2BC", VA = "0x1C2A2BC")]
		public static explicit operator ushort(JToken value)
		{
			return default(ushort);
		}

		[Token(Token = "0x6001314")]
		[Address(RVA = "0x1C2A460", Offset = "0x1C2A460", VA = "0x1C2A460")]
		public static explicit operator int?(JToken value)
		{
			return null;
		}

		[Token(Token = "0x6001315")]
		[Address(RVA = "0x1C2A63C", Offset = "0x1C2A63C", VA = "0x1C2A63C")]
		public static explicit operator short?(JToken value)
		{
			return null;
		}

		[Token(Token = "0x6001316")]
		[Address(RVA = "0x1C2A818", Offset = "0x1C2A818", VA = "0x1C2A818")]
		public static explicit operator ushort?(JToken value)
		{
			return null;
		}

		[Token(Token = "0x6001317")]
		[Address(RVA = "0x1C2A9F4", Offset = "0x1C2A9F4", VA = "0x1C2A9F4")]
		public static explicit operator DateTime(JToken value)
		{
			return default(DateTime);
		}

		[Token(Token = "0x6001318")]
		[Address(RVA = "0x1C2AB50", Offset = "0x1C2AB50", VA = "0x1C2AB50")]
		public static explicit operator long?(JToken value)
		{
			return null;
		}

		[Token(Token = "0x6001319")]
		[Address(RVA = "0x1C2AD40", Offset = "0x1C2AD40", VA = "0x1C2AD40")]
		public static explicit operator float?(JToken value)
		{
			return null;
		}

		[Token(Token = "0x600131A")]
		[Address(RVA = "0x1C2AF18", Offset = "0x1C2AF18", VA = "0x1C2AF18")]
		public static explicit operator decimal(JToken value)
		{
			return default(decimal);
		}

		[Token(Token = "0x600131B")]
		[Address(RVA = "0x1C2B0BC", Offset = "0x1C2B0BC", VA = "0x1C2B0BC")]
		public static explicit operator uint?(JToken value)
		{
			return null;
		}

		[Token(Token = "0x600131C")]
		[Address(RVA = "0x1C2B298", Offset = "0x1C2B298", VA = "0x1C2B298")]
		public static explicit operator ulong?(JToken value)
		{
			return null;
		}

		[Token(Token = "0x600131D")]
		[Address(RVA = "0x1C2B488", Offset = "0x1C2B488", VA = "0x1C2B488")]
		public static explicit operator double(JToken value)
		{
			return default(double);
		}

		[Token(Token = "0x600131E")]
		[Address(RVA = "0x1C2B5E4", Offset = "0x1C2B5E4", VA = "0x1C2B5E4")]
		public static explicit operator float(JToken value)
		{
			return default(float);
		}

		[Token(Token = "0x600131F")]
		[Address(RVA = "0x1C2B788", Offset = "0x1C2B788", VA = "0x1C2B788")]
		public static explicit operator string(JToken value)
		{
			return null;
		}

		[Token(Token = "0x6001320")]
		[Address(RVA = "0x1C2B934", Offset = "0x1C2B934", VA = "0x1C2B934")]
		public static explicit operator uint(JToken value)
		{
			return default(uint);
		}

		[Token(Token = "0x6001321")]
		[Address(RVA = "0x1C2BAD8", Offset = "0x1C2BAD8", VA = "0x1C2BAD8")]
		public static explicit operator ulong(JToken value)
		{
			return default(ulong);
		}

		[Token(Token = "0x6001322")]
		[Address(RVA = "0x1C2BC7C", Offset = "0x1C2BC7C", VA = "0x1C2BC7C")]
		public static explicit operator byte[](JToken value)
		{
			return null;
		}

		[Token(Token = "0x6001323")]
		[Address(RVA = "0x1C2BE30", Offset = "0x1C2BE30", VA = "0x1C2BE30")]
		public static implicit operator JToken(bool value)
		{
			return null;
		}

		[Token(Token = "0x6001324")]
		[Address(RVA = "0x1C2BF10", Offset = "0x1C2BF10", VA = "0x1C2BF10")]
		public static implicit operator JToken(DateTimeOffset value)
		{
			return null;
		}

		[Token(Token = "0x6001325")]
		[Address(RVA = "0x1C2BFC0", Offset = "0x1C2BFC0", VA = "0x1C2BFC0")]
		public static implicit operator JToken(bool? value)
		{
			return null;
		}

		[Token(Token = "0x6001326")]
		[Address(RVA = "0x1C2C064", Offset = "0x1C2C064", VA = "0x1C2C064")]
		public static implicit operator JToken(long value)
		{
			return null;
		}

		[Token(Token = "0x6001327")]
		[Address(RVA = "0x1C2C144", Offset = "0x1C2C144", VA = "0x1C2C144")]
		public static implicit operator JToken(DateTime? value)
		{
			return null;
		}

		[Token(Token = "0x6001328")]
		[Address(RVA = "0x1C2C1F4", Offset = "0x1C2C1F4", VA = "0x1C2C1F4")]
		public static implicit operator JToken(DateTimeOffset? value)
		{
			return null;
		}

		[Token(Token = "0x6001329")]
		[Address(RVA = "0x1C2C2AC", Offset = "0x1C2C2AC", VA = "0x1C2C2AC")]
		public static implicit operator JToken(decimal? value)
		{
			return null;
		}

		[Token(Token = "0x600132A")]
		[Address(RVA = "0x1C2C364", Offset = "0x1C2C364", VA = "0x1C2C364")]
		public static implicit operator JToken(double? value)
		{
			return null;
		}

		[Token(Token = "0x600132B")]
		[Address(RVA = "0x1C2C414", Offset = "0x1C2C414", VA = "0x1C2C414")]
		public static implicit operator JToken(short value)
		{
			return null;
		}

		[Token(Token = "0x600132C")]
		[Address(RVA = "0x1C2C474", Offset = "0x1C2C474", VA = "0x1C2C474")]
		public static implicit operator JToken(ushort value)
		{
			return null;
		}

		[Token(Token = "0x600132D")]
		[Address(RVA = "0x1C2C4D4", Offset = "0x1C2C4D4", VA = "0x1C2C4D4")]
		public static implicit operator JToken(int value)
		{
			return null;
		}

		[Token(Token = "0x600132E")]
		[Address(RVA = "0x1C2C534", Offset = "0x1C2C534", VA = "0x1C2C534")]
		public static implicit operator JToken(int? value)
		{
			return null;
		}

		[Token(Token = "0x600132F")]
		[Address(RVA = "0x1C2C5D8", Offset = "0x1C2C5D8", VA = "0x1C2C5D8")]
		public static implicit operator JToken(DateTime value)
		{
			return null;
		}

		[Token(Token = "0x6001330")]
		[Address(RVA = "0x1C2C6B8", Offset = "0x1C2C6B8", VA = "0x1C2C6B8")]
		public static implicit operator JToken(long? value)
		{
			return null;
		}

		[Token(Token = "0x6001331")]
		[Address(RVA = "0x1C2C768", Offset = "0x1C2C768", VA = "0x1C2C768")]
		public static implicit operator JToken(float? value)
		{
			return null;
		}

		[Token(Token = "0x6001332")]
		[Address(RVA = "0x1C2C80C", Offset = "0x1C2C80C", VA = "0x1C2C80C")]
		public static implicit operator JToken(decimal value)
		{
			return null;
		}

		[Token(Token = "0x6001333")]
		[Address(RVA = "0x1C2C8BC", Offset = "0x1C2C8BC", VA = "0x1C2C8BC")]
		public static implicit operator JToken(short? value)
		{
			return null;
		}

		[Token(Token = "0x6001334")]
		[Address(RVA = "0x1C2C960", Offset = "0x1C2C960", VA = "0x1C2C960")]
		public static implicit operator JToken(ushort? value)
		{
			return null;
		}

		[Token(Token = "0x6001335")]
		[Address(RVA = "0x1C2CA04", Offset = "0x1C2CA04", VA = "0x1C2CA04")]
		public static implicit operator JToken(uint? value)
		{
			return null;
		}

		[Token(Token = "0x6001336")]
		[Address(RVA = "0x1C2CAA8", Offset = "0x1C2CAA8", VA = "0x1C2CAA8")]
		public static implicit operator JToken(ulong? value)
		{
			return null;
		}

		[Token(Token = "0x6001337")]
		[Address(RVA = "0x1C2CB58", Offset = "0x1C2CB58", VA = "0x1C2CB58")]
		public static implicit operator JToken(double value)
		{
			return null;
		}

		[Token(Token = "0x6001338")]
		[Address(RVA = "0x1C2CC40", Offset = "0x1C2CC40", VA = "0x1C2CC40")]
		public static implicit operator JToken(float value)
		{
			return null;
		}

		[Token(Token = "0x6001339")]
		[Address(RVA = "0x1C2CCA8", Offset = "0x1C2CCA8", VA = "0x1C2CCA8")]
		public static implicit operator JToken(string value)
		{
			return null;
		}

		[Token(Token = "0x600133A")]
		[Address(RVA = "0x1C2CD48", Offset = "0x1C2CD48", VA = "0x1C2CD48")]
		public static implicit operator JToken(uint value)
		{
			return null;
		}

		[Token(Token = "0x600133B")]
		[Address(RVA = "0x1C2CDA8", Offset = "0x1C2CDA8", VA = "0x1C2CDA8")]
		public static implicit operator JToken(ulong value)
		{
			return null;
		}

		[Token(Token = "0x600133C")]
		[Address(RVA = "0x1C2CE88", Offset = "0x1C2CE88", VA = "0x1C2CE88")]
		public static implicit operator JToken(byte[] value)
		{
			return null;
		}

		[Token(Token = "0x600133D")]
		[Address(RVA = "0x1C2CF0C", Offset = "0x1C2CF0C", VA = "0x1C2CF0C", Slot = "6")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x600133E")]
		[Address(RVA = "0x1C2CFB0", Offset = "0x1C2CFB0", VA = "0x1C2CFB0", Slot = "5")]
		private IEnumerator<JToken> System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x600133F")]
		internal abstract int GetDeepHashCode();

		[Token(Token = "0x6001341")]
		[Address(RVA = "0x1C2D038", Offset = "0x1C2D038", VA = "0x1C2D038")]
		public JsonReader CreateReader()
		{
			return null;
		}

		[Token(Token = "0x6001342")]
		[Address(RVA = "0x1C1D20C", Offset = "0x1C1D20C", VA = "0x1C1D20C")]
		internal static JToken FromObjectInternal(object o, JsonSerializer jsonSerializer)
		{
			return null;
		}

		[Token(Token = "0x6001343")]
		[Address(RVA = "0x1C2D190", Offset = "0x1C2D190", VA = "0x1C2D190")]
		public static JToken FromObject(object o)
		{
			return null;
		}

		[Token(Token = "0x6001344")]
		[Address(RVA = "0x1C2D1F4", Offset = "0x1C2D1F4", VA = "0x1C2D1F4")]
		public static JToken FromObject(object o, JsonSerializer jsonSerializer)
		{
			return null;
		}

		[Token(Token = "0x6001345")]
		public T ToObject<T>()
		{
			return (T)null;
		}

		[Token(Token = "0x6001346")]
		public T ToObject<T>(JsonSerializer jsonSerializer)
		{
			return (T)null;
		}

		[Token(Token = "0x6001347")]
		[Address(RVA = "0x1C2D1F8", Offset = "0x1C2D1F8", VA = "0x1C2D1F8")]
		public static JToken ReadFrom(JsonReader reader)
		{
			return null;
		}

		[Token(Token = "0x6001348")]
		[Address(RVA = "0x1C2D4E0", Offset = "0x1C2D4E0", VA = "0x1C2D4E0")]
		public static JToken Parse(string json)
		{
			return null;
		}

		[Token(Token = "0x6001349")]
		[Address(RVA = "0x1C2D564", Offset = "0x1C2D564", VA = "0x1C2D564")]
		public static JToken Load(JsonReader reader)
		{
			return null;
		}

		[Token(Token = "0x600134A")]
		[Address(RVA = "0x1C1CB1C", Offset = "0x1C1CB1C", VA = "0x1C1CB1C")]
		internal void SetLineInfo(IJsonLineInfo lineInfo)
		{
		}

		[Token(Token = "0x600134B")]
		[Address(RVA = "0x1C2D568", Offset = "0x1C2D568", VA = "0x1C2D568")]
		internal void SetLineInfo(int lineNumber, int linePosition)
		{
		}

		[Token(Token = "0x600134C")]
		[Address(RVA = "0x1C2D600", Offset = "0x1C2D600", VA = "0x1C2D600", Slot = "7")]
		private bool Newtonsoft.Json.IJsonLineInfo.HasLineInfo()
		{
			return default(bool);
		}

		[Token(Token = "0x600134F")]
		[Address(RVA = "0x1C2D778", Offset = "0x1C2D778", VA = "0x1C2D778")]
		public JToken SelectToken(string path)
		{
			return null;
		}

		[Token(Token = "0x6001350")]
		[Address(RVA = "0x1C2D780", Offset = "0x1C2D780", VA = "0x1C2D780")]
		public JToken SelectToken(string path, bool errorWhenNoMatch)
		{
			return null;
		}

		[Token(Token = "0x6001351")]
		[Address(RVA = "0x1C2D804", Offset = "0x1C2D804", VA = "0x1C2D804", Slot = "10")]
		private object System.ICloneable.Clone()
		{
			return null;
		}

		[Token(Token = "0x6001352")]
		[Address(RVA = "0x1C2D810", Offset = "0x1C2D810", VA = "0x1C2D810")]
		public JToken DeepClone()
		{
			return null;
		}
	}
	[Token(Token = "0x2000273")]
	public class JTokenEqualityComparer : IEqualityComparer<JToken>
	{
		[Token(Token = "0x6001353")]
		[Address(RVA = "0x1C2DDB4", Offset = "0x1C2DDB4", VA = "0x1C2DDB4", Slot = "4")]
		public bool Equals(JToken x, JToken y)
		{
			return default(bool);
		}

		[Token(Token = "0x6001354")]
		[Address(RVA = "0x1C2DDEC", Offset = "0x1C2DDEC", VA = "0x1C2DDEC", Slot = "5")]
		public int GetHashCode(JToken obj)
		{
			return default(int);
		}

		[Token(Token = "0x6001355")]
		[Address(RVA = "0x1C281D8", Offset = "0x1C281D8", VA = "0x1C281D8")]
		public JTokenEqualityComparer()
		{
		}
	}
	[Token(Token = "0x2000274")]
	public class JTokenReader : JsonReader, IJsonLineInfo
	{
		[Token(Token = "0x4000CDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly JToken _root;

		[Token(Token = "0x4000CDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private JToken _parent;

		[Token(Token = "0x4000CDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private JToken _current;

		[Token(Token = "0x170001ED")]
		private bool IsEndElement
		{
			[Token(Token = "0x600135D")]
			[Address(RVA = "0x1C2F750", Offset = "0x1C2F750", VA = "0x1C2F750")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001EE")]
		private int Newtonsoft.Json.IJsonLineInfo.LineNumber
		{
			[Token(Token = "0x6001364")]
			[Address(RVA = "0x1C2F9A8", Offset = "0x1C2F9A8", VA = "0x1C2F9A8", Slot = "19")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001EF")]
		private int Newtonsoft.Json.IJsonLineInfo.LinePosition
		{
			[Token(Token = "0x6001365")]
			[Address(RVA = "0x1C2FA80", Offset = "0x1C2FA80", VA = "0x1C2FA80", Slot = "20")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001356")]
		[Address(RVA = "0x1C2D098", Offset = "0x1C2D098", VA = "0x1C2D098")]
		public JTokenReader(JToken token)
		{
		}

		[Token(Token = "0x6001357")]
		[Address(RVA = "0x1C2DE10", Offset = "0x1C2DE10", VA = "0x1C2DE10", Slot = "12")]
		public override byte[] ReadAsBytes()
		{
			return null;
		}

		[Token(Token = "0x6001358")]
		[Address(RVA = "0x1C2E128", Offset = "0x1C2E128", VA = "0x1C2E128", Slot = "13")]
		public override decimal? ReadAsDecimal()
		{
			return null;
		}

		[Token(Token = "0x6001359")]
		[Address(RVA = "0x1C2E3C8", Offset = "0x1C2E3C8", VA = "0x1C2E3C8", Slot = "14")]
		public override DateTimeOffset? ReadAsDateTimeOffset()
		{
			return null;
		}

		[Token(Token = "0x600135A")]
		[Address(RVA = "0x1C2E60C", Offset = "0x1C2E60C", VA = "0x1C2E60C", Slot = "11")]
		public override bool Read()
		{
			return default(bool);
		}

		[Token(Token = "0x600135B")]
		[Address(RVA = "0x1C2E74C", Offset = "0x1C2E74C", VA = "0x1C2E74C")]
		private bool ReadOver(JToken t)
		{
			return default(bool);
		}

		[Token(Token = "0x600135C")]
		[Address(RVA = "0x1C2F698", Offset = "0x1C2F698", VA = "0x1C2F698")]
		private bool ReadToEnd()
		{
			return default(bool);
		}

		[Token(Token = "0x600135E")]
		[Address(RVA = "0x1C2F760", Offset = "0x1C2F760", VA = "0x1C2F760")]
		private JsonToken? GetEndToken(JContainer c)
		{
			return null;
		}

		[Token(Token = "0x600135F")]
		[Address(RVA = "0x1C2E6D0", Offset = "0x1C2E6D0", VA = "0x1C2E6D0")]
		private bool ReadInto(JContainer c)
		{
			return default(bool);
		}

		[Token(Token = "0x6001360")]
		[Address(RVA = "0x1C2F6A0", Offset = "0x1C2F6A0", VA = "0x1C2F6A0")]
		private bool SetEnd(JContainer c)
		{
			return default(bool);
		}

		[Token(Token = "0x6001361")]
		[Address(RVA = "0x1C2E800", Offset = "0x1C2E800", VA = "0x1C2E800")]
		private void SetToken(JToken token)
		{
		}

		[Token(Token = "0x6001362")]
		[Address(RVA = "0x1C2F8B4", Offset = "0x1C2F8B4", VA = "0x1C2F8B4")]
		private string SafeToString(object value)
		{
			return null;
		}

		[Token(Token = "0x6001363")]
		[Address(RVA = "0x1C2F8D4", Offset = "0x1C2F8D4", VA = "0x1C2F8D4", Slot = "18")]
		private bool Newtonsoft.Json.IJsonLineInfo.HasLineInfo()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000275")]
	public enum JTokenType
	{
		[Token(Token = "0x4000CDF")]
		None,
		[Token(Token = "0x4000CE0")]
		Object,
		[Token(Token = "0x4000CE1")]
		Array,
		[Token(Token = "0x4000CE2")]
		Constructor,
		[Token(Token = "0x4000CE3")]
		Property,
		[Token(Token = "0x4000CE4")]
		Comment,
		[Token(Token = "0x4000CE5")]
		Integer,
		[Token(Token = "0x4000CE6")]
		Float,
		[Token(Token = "0x4000CE7")]
		String,
		[Token(Token = "0x4000CE8")]
		Boolean,
		[Token(Token = "0x4000CE9")]
		Null,
		[Token(Token = "0x4000CEA")]
		Undefined,
		[Token(Token = "0x4000CEB")]
		Date,
		[Token(Token = "0x4000CEC")]
		Raw,
		[Token(Token = "0x4000CED")]
		Bytes,
		[Token(Token = "0x4000CEE")]
		Guid,
		[Token(Token = "0x4000CEF")]
		Uri,
		[Token(Token = "0x4000CF0")]
		TimeSpan
	}
	[Token(Token = "0x2000276")]
	public class JTokenWriter : JsonWriter
	{
		[Token(Token = "0x4000CF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private JContainer _token;

		[Token(Token = "0x4000CF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private JContainer _parent;

		[Token(Token = "0x4000CF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private JValue _value;

		[Token(Token = "0x170001F0")]
		public JToken Token
		{
			[Token(Token = "0x6001366")]
			[Address(RVA = "0x1C2D178", Offset = "0x1C2D178", VA = "0x1C2D178")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001367")]
		[Address(RVA = "0x1C20EA8", Offset = "0x1C20EA8", VA = "0x1C20EA8")]
		public JTokenWriter(JContainer container)
		{
		}

		[Token(Token = "0x6001368")]
		[Address(RVA = "0x1C2D110", Offset = "0x1C2D110", VA = "0x1C2D110")]
		public JTokenWriter()
		{
		}

		[Token(Token = "0x6001369")]
		[Address(RVA = "0x1C2FB58", Offset = "0x1C2FB58", VA = "0x1C2FB58", Slot = "5")]
		public override void Flush()
		{
		}

		[Token(Token = "0x600136A")]
		[Address(RVA = "0x1C2FB5C", Offset = "0x1C2FB5C", VA = "0x1C2FB5C", Slot = "6")]
		public override void Close()
		{
		}

		[Token(Token = "0x600136B")]
		[Address(RVA = "0x1C2FB64", Offset = "0x1C2FB64", VA = "0x1C2FB64", Slot = "7")]
		public override void WriteStartObject()
		{
		}

		[Token(Token = "0x600136C")]
		[Address(RVA = "0x1C2FBF0", Offset = "0x1C2FBF0", VA = "0x1C2FBF0")]
		private void AddParent(JContainer container)
		{
		}

		[Token(Token = "0x600136D")]
		[Address(RVA = "0x1C2FC38", Offset = "0x1C2FC38", VA = "0x1C2FC38")]
		private void RemoveParent()
		{
		}

		[Token(Token = "0x600136E")]
		[Address(RVA = "0x1C2FC9C", Offset = "0x1C2FC9C", VA = "0x1C2FC9C", Slot = "9")]
		public override void WriteStartArray()
		{
		}

		[Token(Token = "0x600136F")]
		[Address(RVA = "0x1C2FD28", Offset = "0x1C2FD28", VA = "0x1C2FD28", Slot = "11")]
		public override void WriteStartConstructor(string name)
		{
		}

		[Token(Token = "0x6001370")]
		[Address(RVA = "0x1C2FDC8", Offset = "0x1C2FDC8", VA = "0x1C2FDC8", Slot = "15")]
		protected override void WriteEnd(JsonToken token)
		{
		}

		[Token(Token = "0x6001371")]
		[Address(RVA = "0x1C2FDCC", Offset = "0x1C2FDCC", VA = "0x1C2FDCC", Slot = "13")]
		public override void WritePropertyName(string name)
		{
		}

		[Token(Token = "0x6001372")]
		[Address(RVA = "0x1C2FE6C", Offset = "0x1C2FE6C", VA = "0x1C2FE6C")]
		private void AddValue(object value, JsonToken token)
		{
		}

		[Token(Token = "0x6001373")]
		[Address(RVA = "0x1C2FEF8", Offset = "0x1C2FEF8", VA = "0x1C2FEF8")]
		internal void AddValue(JValue value, JsonToken token)
		{
		}

		[Token(Token = "0x6001374")]
		[Address(RVA = "0x1C2FF74", Offset = "0x1C2FF74", VA = "0x1C2FF74", Slot = "19")]
		public override void WriteNull()
		{
		}

		[Token(Token = "0x6001375")]
		[Address(RVA = "0x1C2FFA0", Offset = "0x1C2FFA0", VA = "0x1C2FFA0", Slot = "20")]
		public override void WriteUndefined()
		{
		}

		[Token(Token = "0x6001376")]
		[Address(RVA = "0x1C2FFCC", Offset = "0x1C2FFCC", VA = "0x1C2FFCC", Slot = "21")]
		public override void WriteRaw(string json)
		{
		}

		[Token(Token = "0x6001377")]
		[Address(RVA = "0x1C30058", Offset = "0x1C30058", VA = "0x1C30058", Slot = "61")]
		public override void WriteComment(string text)
		{
		}

		[Token(Token = "0x6001378")]
		[Address(RVA = "0x1C30090", Offset = "0x1C30090", VA = "0x1C30090", Slot = "23")]
		public override void WriteValue(string value)
		{
		}

		[Token(Token = "0x6001379")]
		[Address(RVA = "0x1C30124", Offset = "0x1C30124", VA = "0x1C30124", Slot = "24")]
		public override void WriteValue(int value)
		{
		}

		[Token(Token = "0x600137A")]
		[Address(RVA = "0x1C301A8", Offset = "0x1C301A8", VA = "0x1C301A8", Slot = "25")]
		public override void WriteValue(uint value)
		{
		}

		[Token(Token = "0x600137B")]
		[Address(RVA = "0x1C3022C", Offset = "0x1C3022C", VA = "0x1C3022C", Slot = "26")]
		public override void WriteValue(long value)
		{
		}

		[Token(Token = "0x600137C")]
		[Address(RVA = "0x1C302B0", Offset = "0x1C302B0", VA = "0x1C302B0", Slot = "27")]
		public override void WriteValue(ulong value)
		{
		}

		[Token(Token = "0x600137D")]
		[Address(RVA = "0x1C30334", Offset = "0x1C30334", VA = "0x1C30334", Slot = "28")]
		public override void WriteValue(float value)
		{
		}

		[Token(Token = "0x600137E")]
		[Address(RVA = "0x1C303B8", Offset = "0x1C303B8", VA = "0x1C303B8", Slot = "29")]
		public override void WriteValue(double value)
		{
		}

		[Token(Token = "0x600137F")]
		[Address(RVA = "0x1C3043C", Offset = "0x1C3043C", VA = "0x1C3043C", Slot = "30")]
		public override void WriteValue(bool value)
		{
		}

		[Token(Token = "0x6001380")]
		[Address(RVA = "0x1C304C0", Offset = "0x1C304C0", VA = "0x1C304C0", Slot = "31")]
		public override void WriteValue(short value)
		{
		}

		[Token(Token = "0x6001381")]
		[Address(RVA = "0x1C30544", Offset = "0x1C30544", VA = "0x1C30544", Slot = "32")]
		public override void WriteValue(ushort value)
		{
		}

		[Token(Token = "0x6001382")]
		[Address(RVA = "0x1C305C8", Offset = "0x1C305C8", VA = "0x1C305C8", Slot = "33")]
		public override void WriteValue(char value)
		{
		}

		[Token(Token = "0x6001383")]
		[Address(RVA = "0x1C3060C", Offset = "0x1C3060C", VA = "0x1C3060C", Slot = "34")]
		public override void WriteValue(byte value)
		{
		}

		[Token(Token = "0x6001384")]
		[Address(RVA = "0x1C30690", Offset = "0x1C30690", VA = "0x1C30690", Slot = "35")]
		public override void WriteValue(sbyte value)
		{
		}

		[Token(Token = "0x6001385")]
		[Address(RVA = "0x1C30714", Offset = "0x1C30714", VA = "0x1C30714", Slot = "36")]
		public override void WriteValue(decimal value)
		{
		}

		[Token(Token = "0x6001386")]
		[Address(RVA = "0x1C307A8", Offset = "0x1C307A8", VA = "0x1C307A8", Slot = "37")]
		public override void WriteValue(DateTime value)
		{
		}

		[Token(Token = "0x6001387")]
		[Address(RVA = "0x1C3082C", Offset = "0x1C3082C", VA = "0x1C3082C", Slot = "38")]
		public override void WriteValue(DateTimeOffset value)
		{
		}

		[Token(Token = "0x6001388")]
		[Address(RVA = "0x1C308C0", Offset = "0x1C308C0", VA = "0x1C308C0", Slot = "58")]
		public override void WriteValue(byte[] value)
		{
		}

		[Token(Token = "0x6001389")]
		[Address(RVA = "0x1C308F4", Offset = "0x1C308F4", VA = "0x1C308F4", Slot = "40")]
		public override void WriteValue(TimeSpan value)
		{
		}

		[Token(Token = "0x600138A")]
		[Address(RVA = "0x1C30978", Offset = "0x1C30978", VA = "0x1C30978", Slot = "39")]
		public override void WriteValue(Guid value)
		{
		}

		[Token(Token = "0x600138B")]
		[Address(RVA = "0x1C30A0C", Offset = "0x1C30A0C", VA = "0x1C30A0C", Slot = "59")]
		public override void WriteValue(Uri value)
		{
		}
	}
	[Token(Token = "0x2000277")]
	public class JValue : JToken, IEquatable<JValue>, IFormattable, IComparable, IComparable<JValue>
	{
		[Token(Token = "0x4000CF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private JTokenType _valueType;

		[Token(Token = "0x4000CF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private object _value;

		[Token(Token = "0x170001F1")]
		public override bool HasValues
		{
			[Token(Token = "0x6001399")]
			[Address(RVA = "0x1C31038", Offset = "0x1C31038", VA = "0x1C31038", Slot = "14")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001F2")]
		public override JTokenType Type
		{
			[Token(Token = "0x60013A1")]
			[Address(RVA = "0x1C31B7C", Offset = "0x1C31B7C", VA = "0x1C31B7C", Slot = "13")]
			get
			{
				return default(JTokenType);
			}
		}

		[Token(Token = "0x170001F3")]
		public new object Value
		{
			[Token(Token = "0x60013A2")]
			[Address(RVA = "0x1C250A4", Offset = "0x1C250A4", VA = "0x1C250A4")]
			get
			{
				return null;
			}
			[Token(Token = "0x60013A3")]
			[Address(RVA = "0x1C31B84", Offset = "0x1C31B84", VA = "0x1C31B84")]
			set
			{
			}
		}

		[Token(Token = "0x600138C")]
		[Address(RVA = "0x1C217F0", Offset = "0x1C217F0", VA = "0x1C217F0")]
		internal JValue(object value, JTokenType type)
		{
		}

		[Token(Token = "0x600138D")]
		[Address(RVA = "0x1C27D8C", Offset = "0x1C27D8C", VA = "0x1C27D8C")]
		public JValue(JValue other)
		{
		}

		[Token(Token = "0x600138E")]
		[Address(RVA = "0x1C2C0C4", Offset = "0x1C2C0C4", VA = "0x1C2C0C4")]
		public JValue(long value)
		{
		}

		[Token(Token = "0x600138F")]
		[Address(RVA = "0x1C2CE08", Offset = "0x1C2CE08", VA = "0x1C2CE08")]
		public JValue(ulong value)
		{
		}

		[Token(Token = "0x6001390")]
		[Address(RVA = "0x1C2CBC0", Offset = "0x1C2CBC0", VA = "0x1C2CBC0")]
		public JValue(double value)
		{
		}

		[Token(Token = "0x6001391")]
		[Address(RVA = "0x1C2C638", Offset = "0x1C2C638", VA = "0x1C2C638")]
		public JValue(DateTime value)
		{
		}

		[Token(Token = "0x6001392")]
		[Address(RVA = "0x1C2BE90", Offset = "0x1C2BE90", VA = "0x1C2BE90")]
		public JValue(bool value)
		{
		}

		[Token(Token = "0x6001393")]
		[Address(RVA = "0x1C2CD14", Offset = "0x1C2CD14", VA = "0x1C2CD14")]
		public JValue(string value)
		{
		}

		[Token(Token = "0x6001394")]
		[Address(RVA = "0x1C30A40", Offset = "0x1C30A40", VA = "0x1C30A40")]
		public JValue(Guid value)
		{
		}

		[Token(Token = "0x6001395")]
		[Address(RVA = "0x1C30ACC", Offset = "0x1C30ACC", VA = "0x1C30ACC")]
		public JValue(Uri value)
		{
		}

		[Token(Token = "0x6001396")]
		[Address(RVA = "0x1C30B00", Offset = "0x1C30B00", VA = "0x1C30B00")]
		public JValue(TimeSpan value)
		{
		}

		[Token(Token = "0x6001397")]
		[Address(RVA = "0x1C1EF34", Offset = "0x1C1EF34", VA = "0x1C1EF34")]
		public JValue(object value)
		{
		}

		[Token(Token = "0x6001398")]
		[Address(RVA = "0x1C30F18", Offset = "0x1C30F18", VA = "0x1C30F18", Slot = "12")]
		internal override bool DeepEquals(JToken node)
		{
			return default(bool);
		}

		[Token(Token = "0x600139A")]
		[Address(RVA = "0x1C31040", Offset = "0x1C31040", VA = "0x1C31040")]
		private static int Compare(JTokenType valueType, object objA, object objB)
		{
			return default(int);
		}

		[Token(Token = "0x600139B")]
		[Address(RVA = "0x1C31904", Offset = "0x1C31904", VA = "0x1C31904")]
		private static int CompareFloat(object objA, object objB)
		{
			return default(int);
		}

		[Token(Token = "0x600139C")]
		[Address(RVA = "0x1C31A0C", Offset = "0x1C31A0C", VA = "0x1C31A0C", Slot = "11")]
		internal override JToken CloneToken()
		{
			return null;
		}

		[Token(Token = "0x600139D")]
		[Address(RVA = "0x1C21784", Offset = "0x1C21784", VA = "0x1C21784")]
		public static JValue CreateComment(string value)
		{
			return null;
		}

		[Token(Token = "0x600139E")]
		[Address(RVA = "0x1C31A6C", Offset = "0x1C31A6C", VA = "0x1C31A6C")]
		public static JValue CreateString(string value)
		{
			return null;
		}

		[Token(Token = "0x600139F")]
		[Address(RVA = "0x1C30B80", Offset = "0x1C30B80", VA = "0x1C30B80")]
		private static JTokenType GetValueType(JTokenType? current, object value)
		{
			return default(JTokenType);
		}

		[Token(Token = "0x60013A0")]
		[Address(RVA = "0x1C31AD8", Offset = "0x1C31AD8", VA = "0x1C31AD8")]
		private static JTokenType GetStringValueType(JTokenType? current)
		{
			return default(JTokenType);
		}

		[Token(Token = "0x60013A4")]
		[Address(RVA = "0x1C31C74", Offset = "0x1C31C74", VA = "0x1C31C74", Slot = "22")]
		public override void WriteTo(JsonWriter writer, params JsonConverter[] converters)
		{
		}

		[Token(Token = "0x60013A5")]
		[Address(RVA = "0x1C32258", Offset = "0x1C32258", VA = "0x1C32258", Slot = "23")]
		internal override int GetDeepHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60013A6")]
		[Address(RVA = "0x1C30FB8", Offset = "0x1C30FB8", VA = "0x1C30FB8")]
		private static bool ValuesEquals(JValue v1, JValue v2)
		{
			return default(bool);
		}

		[Token(Token = "0x60013A7")]
		[Address(RVA = "0x1C322A4", Offset = "0x1C322A4", VA = "0x1C322A4", Slot = "24")]
		public bool Equals(JValue other)
		{
			return default(bool);
		}

		[Token(Token = "0x60013A8")]
		[Address(RVA = "0x1C322B4", Offset = "0x1C322B4", VA = "0x1C322B4", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60013A9")]
		[Address(RVA = "0x1C32370", Offset = "0x1C32370", VA = "0x1C32370", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60013AA")]
		[Address(RVA = "0x1C32388", Offset = "0x1C32388", VA = "0x1C32388", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60013AB")]
		[Address(RVA = "0x1C323F8", Offset = "0x1C323F8", VA = "0x1C323F8")]
		public string ToString(string format)
		{
			return null;
		}

		[Token(Token = "0x60013AC")]
		[Address(RVA = "0x1C325AC", Offset = "0x1C325AC", VA = "0x1C325AC")]
		public string ToString(IFormatProvider formatProvider)
		{
			return null;
		}

		[Token(Token = "0x60013AD")]
		[Address(RVA = "0x1C32478", Offset = "0x1C32478", VA = "0x1C32478", Slot = "25")]
		public string ToString(string format, IFormatProvider formatProvider)
		{
			return null;
		}

		[Token(Token = "0x60013AE")]
		[Address(RVA = "0x1C325BC", Offset = "0x1C325BC", VA = "0x1C325BC", Slot = "26")]
		private int System.IComparable.CompareTo(object obj)
		{
			return default(int);
		}

		[Token(Token = "0x60013AF")]
		[Address(RVA = "0x1C3265C", Offset = "0x1C3265C", VA = "0x1C3265C", Slot = "27")]
		public int CompareTo(JValue obj)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000278")]
	public static class LinqExtensions
	{
		[Serializable]
		[Token(Token = "0x200033E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49ECC", Offset = "0xB49ECC")]
		private sealed class <>c__0<T> where T : JToken
		{
			[Token(Token = "0x4000F44")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c__0<T> <>9;

			[Token(Token = "0x4000F45")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static Func<T, IEnumerable<JToken>> <>9__0_0;

			[Token(Token = "0x6001686")]
			public <>c__0()
			{
			}

			[Token(Token = "0x6001687")]
			internal IEnumerable<JToken> <Ancestors>b__0_0(T j)
			{
				return null;
			}
		}

		[Serializable]
		[Token(Token = "0x200033F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49EDC", Offset = "0xB49EDC")]
		private sealed class <>c__1<T> where T : JContainer
		{
			[Token(Token = "0x4000F46")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c__1<T> <>9;

			[Token(Token = "0x4000F47")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static Func<T, IEnumerable<JToken>> <>9__1_0;

			[Token(Token = "0x6001689")]
			public <>c__1()
			{
			}

			[Token(Token = "0x600168A")]
			internal IEnumerable<JToken> <Descendants>b__1_0(T j)
			{
				return null;
			}
		}

		[Serializable]
		[Token(Token = "0x2000340")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49EEC", Offset = "0xB49EEC")]
		private sealed class <>c
		{
			[Token(Token = "0x4000F48")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000F49")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<JObject, IEnumerable<JProperty>> <>9__2_0;

			[Token(Token = "0x600168C")]
			[Address(RVA = "0x1C328B4", Offset = "0x1C328B4", VA = "0x1C328B4")]
			public <>c()
			{
			}

			[Token(Token = "0x600168D")]
			[Address(RVA = "0x1C328BC", Offset = "0x1C328BC", VA = "0x1C328BC")]
			internal IEnumerable<JProperty> <Properties>b__2_0(JObject d)
			{
				return null;
			}
		}

		[Token(Token = "0x2000341")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49EFC", Offset = "0xB49EFC")]
		private sealed class <Values>d__9<T, U> : IEnumerable<U>, IEnumerable, IEnumerator<U>, IEnumerator, IDisposable where T : JToken
		{
			[Token(Token = "0x4000F4A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>1__state;

			[Token(Token = "0x4000F4B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private U <>2__current;

			[Token(Token = "0x4000F4C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4000F4D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private IEnumerable<T> source;

			[Token(Token = "0x4000F4E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IEnumerable<T> <>3__source;

			[Token(Token = "0x4000F4F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private object key;

			[Token(Token = "0x4000F50")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public object <>3__key;

			[Token(Token = "0x4000F51")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private IEnumerator<T> <>7__wrap1;

			[Token(Token = "0x4000F52")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private IEnumerator<JToken> <>7__wrap2;

			[Token(Token = "0x1700025E")]
			private U System.Collections.Generic.IEnumerator<U>.Current
			{
				[Token(Token = "0x6001693")]
				[DebuggerHidden]
				get
				{
					return (U)null;
				}
			}

			[Token(Token = "0x1700025F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001695")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600168E")]
			[DebuggerHidden]
			public <Values>d__9(int <>1__state)
			{
			}

			[Token(Token = "0x600168F")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001690")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001691")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6001692")]
			private void <>m__Finally2()
			{
			}

			[Token(Token = "0x6001694")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6001696")]
			[DebuggerHidden]
			private IEnumerator<U> System.Collections.Generic.IEnumerable<U>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6001697")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Serializable]
		[Token(Token = "0x2000342")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49F0C", Offset = "0xB49F0C")]
		private sealed class <>c__11<T, U> where T : JToken
		{
			[Token(Token = "0x4000F53")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c__11<T, U> <>9;

			[Token(Token = "0x4000F54")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static Func<T, IEnumerable<JToken>> <>9__11_0;

			[Token(Token = "0x6001699")]
			public <>c__11()
			{
			}

			[Token(Token = "0x600169A")]
			internal IEnumerable<JToken> <Children>b__11_0(T c)
			{
				return null;
			}
		}

		[Token(Token = "0x2000343")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49F1C", Offset = "0xB49F1C")]
		private sealed class <Convert>d__12<T, U> : IEnumerable<U>, IEnumerable, IEnumerator<U>, IEnumerator, IDisposable where T : JToken
		{
			[Token(Token = "0x4000F55")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>1__state;

			[Token(Token = "0x4000F56")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private U <>2__current;

			[Token(Token = "0x4000F57")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4000F58")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private IEnumerable<T> source;

			[Token(Token = "0x4000F59")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IEnumerable<T> <>3__source;

			[Token(Token = "0x4000F5A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private IEnumerator<T> <>7__wrap1;

			[Token(Token = "0x17000260")]
			private U System.Collections.Generic.IEnumerator<U>.Current
			{
				[Token(Token = "0x600169F")]
				[DebuggerHidden]
				get
				{
					return (U)null;
				}
			}

			[Token(Token = "0x17000261")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60016A1")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600169B")]
			[DebuggerHidden]
			public <Convert>d__12(int <>1__state)
			{
			}

			[Token(Token = "0x600169C")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600169D")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600169E")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x60016A0")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x60016A2")]
			[DebuggerHidden]
			private IEnumerator<U> System.Collections.Generic.IEnumerable<U>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x60016A3")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x60013B0")]
		public static IJEnumerable<JToken> Ancestors<T>(this IEnumerable<T> source) where T : JToken
		{
			return null;
		}

		[Token(Token = "0x60013B1")]
		public static IJEnumerable<JToken> Descendants<T>(this IEnumerable<T> source) where T : JContainer
		{
			return null;
		}

		[Token(Token = "0x60013B2")]
		[Address(RVA = "0x1C32680", Offset = "0x1C32680", VA = "0x1C32680")]
		public static IJEnumerable<JProperty> Properties(this IEnumerable<JObject> source)
		{
			return null;
		}

		[Token(Token = "0x60013B3")]
		[Address(RVA = "0x1C32794", Offset = "0x1C32794", VA = "0x1C32794")]
		public static IJEnumerable<JToken> Values(this IEnumerable<JToken> source, object key)
		{
			return null;
		}

		[Token(Token = "0x60013B4")]
		[Address(RVA = "0x1C32848", Offset = "0x1C32848", VA = "0x1C32848")]
		public static IJEnumerable<JToken> Values(this IEnumerable<JToken> source)
		{
			return null;
		}

		[Token(Token = "0x60013B5")]
		public static IEnumerable<U> Values<U>(this IEnumerable<JToken> source, object key)
		{
			return null;
		}

		[Token(Token = "0x60013B6")]
		public static IEnumerable<U> Values<U>(this IEnumerable<JToken> source)
		{
			return null;
		}

		[Token(Token = "0x60013B7")]
		public static U Value<U>(this IEnumerable<JToken> value)
		{
			return (U)null;
		}

		[Token(Token = "0x60013B8")]
		public static U Value<T, U>(this IEnumerable<T> value) where T : JToken
		{
			return (U)null;
		}

		[Token(Token = "0x60013B9")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB4DD44", Offset = "0xB4DD44")]
		internal static IEnumerable<U> Values<T, U>(this IEnumerable<T> source, object key) where T : JToken
		{
			return null;
		}

		[Token(Token = "0x60013BA")]
		public static IJEnumerable<JToken> Children<T>(this IEnumerable<T> source) where T : JToken
		{
			return null;
		}

		[Token(Token = "0x60013BB")]
		public static IEnumerable<U> Children<T, U>(this IEnumerable<T> source) where T : JToken
		{
			return null;
		}

		[Token(Token = "0x60013BC")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB4DDD8", Offset = "0xB4DDD8")]
		internal static IEnumerable<U> Convert<T, U>(this IEnumerable<T> source) where T : JToken
		{
			return null;
		}

		[Token(Token = "0x60013BD")]
		internal static U Convert<T, U>(this T token) where T : JToken
		{
			return (U)null;
		}

		[Token(Token = "0x60013BE")]
		[Address(RVA = "0x1C327F8", Offset = "0x1C327F8", VA = "0x1C327F8")]
		public static IJEnumerable<JToken> AsJEnumerable(this IEnumerable<JToken> source)
		{
			return null;
		}

		[Token(Token = "0x60013BF")]
		public static IJEnumerable<T> AsJEnumerable<T>(this IEnumerable<T> source) where T : JToken
		{
			return null;
		}
	}
}
namespace Newtonsoft.Json.Converters
{
	[Token(Token = "0x2000279")]
	public class BsonObjectIdConverter : JsonConverter
	{
		[Token(Token = "0x60013C0")]
		[Address(RVA = "0x16654F4", Offset = "0x16654F4", VA = "0x16654F4", Slot = "4")]
		public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
		{
		}

		[Token(Token = "0x60013C1")]
		[Address(RVA = "0x1665658", Offset = "0x1665658", VA = "0x1665658", Slot = "5")]
		public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
		{
			return null;
		}

		[Token(Token = "0x60013C2")]
		[Address(RVA = "0x16658FC", Offset = "0x16658FC", VA = "0x16658FC", Slot = "6")]
		public override bool CanConvert(Type objectType)
		{
			return default(bool);
		}

		[Token(Token = "0x60013C3")]
		[Address(RVA = "0x1665980", Offset = "0x1665980", VA = "0x1665980")]
		public BsonObjectIdConverter()
		{
		}
	}
	[Token(Token = "0x200027A")]
	public abstract class CustomCreationConverter<T> : JsonConverter
	{
		[Token(Token = "0x170001F4")]
		public override bool CanWrite
		{
			[Token(Token = "0x60013C8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60013C4")]
		public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
		{
		}

		[Token(Token = "0x60013C5")]
		public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
		{
			return null;
		}

		[Token(Token = "0x60013C6")]
		public abstract T Create(Type objectType);

		[Token(Token = "0x60013C7")]
		public override bool CanConvert(Type objectType)
		{
			return default(bool);
		}

		[Token(Token = "0x60013C9")]
		protected CustomCreationConverter()
		{
		}
	}
	[Token(Token = "0x200027B")]
	public abstract class DateTimeConverterBase : JsonConverter
	{
		[Token(Token = "0x60013CA")]
		[Address(RVA = "0x1665990", Offset = "0x1665990", VA = "0x1665990", Slot = "6")]
		public override bool CanConvert(Type objectType)
		{
			return default(bool);
		}

		[Token(Token = "0x60013CB")]
		[Address(RVA = "0x1665AFC", Offset = "0x1665AFC", VA = "0x1665AFC")]
		protected DateTimeConverterBase()
		{
		}
	}
	[Token(Token = "0x200027C")]
	public class IsoDateTimeConverter : DateTimeConverterBase
	{
		[Token(Token = "0x4000CF6")]
		private const string DefaultDateTimeFormat = "yyyy'-'MM'-'dd'T'HH':'mm':'ss.FFFFFFFK";

		[Token(Token = "0x4000CF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private DateTimeStyles _dateTimeStyles;

		[Token(Token = "0x4000CF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string _dateTimeFormat;

		[Token(Token = "0x4000CF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private CultureInfo _culture;

		[Token(Token = "0x170001F5")]
		public DateTimeStyles DateTimeStyles
		{
			[Token(Token = "0x60013CC")]
			[Address(RVA = "0x1665B04", Offset = "0x1665B04", VA = "0x1665B04")]
			get
			{
				return default(DateTimeStyles);
			}
			[Token(Token = "0x60013CD")]
			[Address(RVA = "0x1665B0C", Offset = "0x1665B0C", VA = "0x1665B0C")]
			set
			{
			}
		}

		[Token(Token = "0x170001F6")]
		public string DateTimeFormat
		{
			[Token(Token = "0x60013CE")]
			[Address(RVA = "0x1665B14", Offset = "0x1665B14", VA = "0x1665B14")]
			get
			{
				return null;
			}
			[Token(Token = "0x60013CF")]
			[Address(RVA = "0x1665B70", Offset = "0x1665B70", VA = "0x1665B70")]
			set
			{
			}
		}

		[Token(Token = "0x170001F7")]
		public CultureInfo Culture
		{
			[Token(Token = "0x60013D0")]
			[Address(RVA = "0x1665B9C", Offset = "0x1665B9C", VA = "0x1665B9C")]
			get
			{
				return null;
			}
			[Token(Token = "0x60013D1")]
			[Address(RVA = "0x1665C14", Offset = "0x1665C14", VA = "0x1665C14")]
			set
			{
			}
		}

		[Token(Token = "0x60013D2")]
		[Address(RVA = "0x1665C1C", Offset = "0x1665C1C", VA = "0x1665C1C", Slot = "4")]
		public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
		{
		}

		[Token(Token = "0x60013D3")]
		[Address(RVA = "0x1665E84", Offset = "0x1665E84", VA = "0x1665E84", Slot = "5")]
		public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
		{
			return null;
		}

		[Token(Token = "0x60013D4")]
		[Address(RVA = "0x16662F8", Offset = "0x16662F8", VA = "0x16662F8")]
		public IsoDateTimeConverter()
		{
		}
	}
	[Token(Token = "0x200027D")]
	public class JavaScriptDateTimeConverter : DateTimeConverterBase
	{
		[Token(Token = "0x60013D5")]
		[Address(RVA = "0x1666308", Offset = "0x1666308", VA = "0x1666308", Slot = "4")]
		public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
		{
		}

		[Token(Token = "0x60013D6")]
		[Address(RVA = "0x1666548", Offset = "0x1666548", VA = "0x1666548", Slot = "5")]
		public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
		{
			return null;
		}

		[Token(Token = "0x60013D7")]
		[Address(RVA = "0x1666B74", Offset = "0x1666B74", VA = "0x1666B74")]
		public JavaScriptDateTimeConverter()
		{
		}
	}
	[Token(Token = "0x200027E")]
	public enum JsonDateTimeSerializationMode
	{
		[Token(Token = "0x4000CFB")]
		Local,
		[Token(Token = "0x4000CFC")]
		Utc,
		[Token(Token = "0x4000CFD")]
		Unspecified,
		[Token(Token = "0x4000CFE")]
		RoundtripKind
	}
	[Token(Token = "0x200027F")]
	public class KeyValuePairConverter : JsonConverter
	{
		[Token(Token = "0x60013D8")]
		[Address(RVA = "0x1666B7C", Offset = "0x1666B7C", VA = "0x1666B7C", Slot = "4")]
		public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
		{
		}

		[Token(Token = "0x60013D9")]
		[Address(RVA = "0x1666D44", Offset = "0x1666D44", VA = "0x1666D44", Slot = "5")]
		public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
		{
			return null;
		}

		[Token(Token = "0x60013DA")]
		[Address(RVA = "0x166703C", Offset = "0x166703C", VA = "0x166703C", Slot = "6")]
		public override bool CanConvert(Type objectType)
		{
			return default(bool);
		}

		[Token(Token = "0x60013DB")]
		[Address(RVA = "0x166712C", Offset = "0x166712C", VA = "0x166712C")]
		public KeyValuePairConverter()
		{
		}
	}
	[Token(Token = "0x2000280")]
	public class RegexConverter : JsonConverter
	{
		[Token(Token = "0x60013DC")]
		[Address(RVA = "0x1667134", Offset = "0x1667134", VA = "0x1667134", Slot = "4")]
		public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
		{
		}

		[Token(Token = "0x60013DD")]
		[Address(RVA = "0x1667524", Offset = "0x1667524", VA = "0x1667524")]
		private bool HasFlag(RegexOptions options, RegexOptions flag)
		{
			return default(bool);
		}

		[Token(Token = "0x60013DE")]
		[Address(RVA = "0x1667264", Offset = "0x1667264", VA = "0x1667264")]
		private void WriteBson(BsonWriter writer, Regex regex)
		{
		}

		[Token(Token = "0x60013DF")]
		[Address(RVA = "0x16673E8", Offset = "0x16673E8", VA = "0x16673E8")]
		private void WriteJson(JsonWriter writer, Regex regex)
		{
		}

		[Token(Token = "0x60013E0")]
		[Address(RVA = "0x1667530", Offset = "0x1667530", VA = "0x1667530", Slot = "5")]
		public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
		{
			return null;
		}

		[Token(Token = "0x60013E1")]
		[Address(RVA = "0x16675BC", Offset = "0x16675BC", VA = "0x16675BC")]
		private object ReadBson(BsonReader reader)
		{
			return null;
		}

		[Token(Token = "0x60013E2")]
		[Address(RVA = "0x16677E4", Offset = "0x16677E4", VA = "0x16677E4")]
		private Regex ReadJson(JsonReader reader)
		{
			return null;
		}

		[Token(Token = "0x60013E3")]
		[Address(RVA = "0x1667A0C", Offset = "0x1667A0C", VA = "0x1667A0C", Slot = "6")]
		public override bool CanConvert(Type objectType)
		{
			return default(bool);
		}

		[Token(Token = "0x60013E4")]
		[Address(RVA = "0x1667A90", Offset = "0x1667A90", VA = "0x1667A90")]
		public RegexConverter()
		{
		}
	}
	[Token(Token = "0x2000281")]
	public class StringEnumConverter : JsonConverter
	{
		[Serializable]
		[Token(Token = "0x2000344")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49F2C", Offset = "0xB49F2C")]
		private sealed class <>c
		{
			[Token(Token = "0x4000F5B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000F5C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<EnumMemberAttribute, string> <>9__7_0;

			[Token(Token = "0x60016A5")]
			[Address(RVA = "0x166886C", Offset = "0x166886C", VA = "0x166886C")]
			public <>c()
			{
			}

			[Token(Token = "0x60016A6")]
			[Address(RVA = "0x1668874", Offset = "0x1668874", VA = "0x1668874")]
			internal string <GetEnumNameMap>b__7_0(EnumMemberAttribute a)
			{
				return null;
			}
		}

		[Token(Token = "0x4000CFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly Dictionary<Type, BidirectionalDictionary<string, string>> _enumMemberNamesPerType;

		[Token(Token = "0x4000D00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4BAC8", Offset = "0xB4BAC8")]
		private bool <CamelCaseText>k__BackingField;

		[Token(Token = "0x170001F8")]
		public bool CamelCaseText
		{
			[Token(Token = "0x60013E5")]
			[Address(RVA = "0x1667A98", Offset = "0x1667A98", VA = "0x1667A98")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4DE7C", Offset = "0xB4DE7C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60013E6")]
			[Address(RVA = "0x1667AA0", Offset = "0x1667AA0", VA = "0x1667AA0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4DE8C", Offset = "0xB4DE8C")]
			set
			{
			}
		}

		[Token(Token = "0x60013E7")]
		[Address(RVA = "0x1667AAC", Offset = "0x1667AAC", VA = "0x1667AAC", Slot = "4")]
		public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
		{
		}

		[Token(Token = "0x60013E8")]
		[Address(RVA = "0x1668370", Offset = "0x1668370", VA = "0x1668370", Slot = "5")]
		public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
		{
			return null;
		}

		[Token(Token = "0x60013E9")]
		[Address(RVA = "0x1667D20", Offset = "0x1667D20", VA = "0x1667D20")]
		private BidirectionalDictionary<string, string> GetEnumNameMap(Type t)
		{
			return null;
		}

		[Token(Token = "0x60013EA")]
		[Address(RVA = "0x1668740", Offset = "0x1668740", VA = "0x1668740", Slot = "6")]
		public override bool CanConvert(Type objectType)
		{
			return default(bool);
		}

		[Token(Token = "0x60013EB")]
		[Address(RVA = "0x1668798", Offset = "0x1668798", VA = "0x1668798")]
		public StringEnumConverter()
		{
		}
	}
	[Token(Token = "0x2000282")]
	internal class XmlDocumentWrapper : XmlNodeWrapper, IXmlDocument, IXmlNode
	{
		[Token(Token = "0x4000D01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private XmlDocument _document;

		[Token(Token = "0x170001F9")]
		public IXmlElement DocumentElement
		{
			[Token(Token = "0x60013F8")]
			[Address(RVA = "0x1669200", Offset = "0x1669200", VA = "0x1669200", Slot = "25")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60013EC")]
		[Address(RVA = "0x16689FC", Offset = "0x16689FC", VA = "0x16689FC")]
		public XmlDocumentWrapper(XmlDocument document)
		{
		}

		[Token(Token = "0x60013ED")]
		[Address(RVA = "0x1668A28", Offset = "0x1668A28", VA = "0x1668A28", Slot = "14")]
		public IXmlNode CreateComment(string data)
		{
			return null;
		}

		[Token(Token = "0x60013EE")]
		[Address(RVA = "0x1668AC8", Offset = "0x1668AC8", VA = "0x1668AC8", Slot = "15")]
		public IXmlNode CreateTextNode(string text)
		{
			return null;
		}

		[Token(Token = "0x60013EF")]
		[Address(RVA = "0x1668B68", Offset = "0x1668B68", VA = "0x1668B68", Slot = "16")]
		public IXmlNode CreateCDataSection(string data)
		{
			return null;
		}

		[Token(Token = "0x60013F0")]
		[Address(RVA = "0x1668C08", Offset = "0x1668C08", VA = "0x1668C08", Slot = "17")]
		public IXmlNode CreateWhitespace(string text)
		{
			return null;
		}

		[Token(Token = "0x60013F1")]
		[Address(RVA = "0x1668CA8", Offset = "0x1668CA8", VA = "0x1668CA8", Slot = "18")]
		public IXmlNode CreateSignificantWhitespace(string text)
		{
			return null;
		}

		[Token(Token = "0x60013F2")]
		[Address(RVA = "0x1668D48", Offset = "0x1668D48", VA = "0x1668D48", Slot = "19")]
		public IXmlNode CreateXmlDeclaration(string version, string encoding, string standalone)
		{
			return null;
		}

		[Token(Token = "0x60013F3")]
		[Address(RVA = "0x1668E00", Offset = "0x1668E00", VA = "0x1668E00", Slot = "20")]
		public IXmlNode CreateProcessingInstruction(string target, string data)
		{
			return null;
		}

		[Token(Token = "0x60013F4")]
		[Address(RVA = "0x1668EA8", Offset = "0x1668EA8", VA = "0x1668EA8", Slot = "21")]
		public IXmlElement CreateElement(string elementName)
		{
			return null;
		}

		[Token(Token = "0x60013F5")]
		[Address(RVA = "0x1668F6C", Offset = "0x1668F6C", VA = "0x1668F6C", Slot = "22")]
		public IXmlElement CreateElement(string qualifiedName, string namespaceURI)
		{
			return null;
		}

		[Token(Token = "0x60013F6")]
		[Address(RVA = "0x166900C", Offset = "0x166900C", VA = "0x166900C", Slot = "23")]
		public IXmlNode CreateAttribute(string name, string value)
		{
			return null;
		}

		[Token(Token = "0x60013F7")]
		[Address(RVA = "0x166911C", Offset = "0x166911C", VA = "0x166911C", Slot = "24")]
		public IXmlNode CreateAttribute(string qualifiedName, string namespaceURI, string value)
		{
			return null;
		}
	}
	[Token(Token = "0x2000283")]
	internal class XmlElementWrapper : XmlNodeWrapper, IXmlElement, IXmlNode
	{
		[Token(Token = "0x4000D02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private XmlElement _element;

		[Token(Token = "0x60013F9")]
		[Address(RVA = "0x1668F40", Offset = "0x1668F40", VA = "0x1668F40")]
		public XmlElementWrapper(XmlElement element)
		{
		}

		[Token(Token = "0x60013FA")]
		[Address(RVA = "0x16692B0", Offset = "0x16692B0", VA = "0x16692B0", Slot = "14")]
		public void SetAttributeNode(IXmlNode attribute)
		{
		}

		[Token(Token = "0x60013FB")]
		[Address(RVA = "0x1669438", Offset = "0x1669438", VA = "0x1669438", Slot = "15")]
		public string GetPrefixOfNamespace(string namespaceURI)
		{
			return null;
		}
	}
	[Token(Token = "0x2000284")]
	internal class XmlDeclarationWrapper : XmlNodeWrapper, IXmlDeclaration, IXmlNode
	{
		[Token(Token = "0x4000D03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private XmlDeclaration _declaration;

		[Token(Token = "0x170001FA")]
		public string Version
		{
			[Token(Token = "0x60013FD")]
			[Address(RVA = "0x16688FC", Offset = "0x16688FC", VA = "0x16688FC", Slot = "14")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001FB")]
		public string Encoding
		{
			[Token(Token = "0x60013FE")]
			[Address(RVA = "0x166892C", Offset = "0x166892C", VA = "0x166892C", Slot = "15")]
			get
			{
				return null;
			}
			[Token(Token = "0x60013FF")]
			[Address(RVA = "0x166895C", Offset = "0x166895C", VA = "0x166895C", Slot = "16")]
			set
			{
			}
		}

		[Token(Token = "0x170001FC")]
		public string Standalone
		{
			[Token(Token = "0x6001400")]
			[Address(RVA = "0x1668994", Offset = "0x1668994", VA = "0x1668994", Slot = "17")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001401")]
			[Address(RVA = "0x16689C4", Offset = "0x16689C4", VA = "0x16689C4", Slot = "18")]
			set
			{
			}
		}

		[Token(Token = "0x60013FC")]
		[Address(RVA = "0x16688A4", Offset = "0x16688A4", VA = "0x16688A4")]
		public XmlDeclarationWrapper(XmlDeclaration declaration)
		{
		}
	}
	[Token(Token = "0x2000285")]
	internal class XmlNodeWrapper : IXmlNode
	{
		[Token(Token = "0x4000D04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly XmlNode _node;

		[Token(Token = "0x170001FD")]
		public object WrappedNode
		{
			[Token(Token = "0x6001403")]
			[Address(RVA = "0x1669430", Offset = "0x1669430", VA = "0x1669430", Slot = "13")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001FE")]
		public XmlNodeType NodeType
		{
			[Token(Token = "0x6001404")]
			[Address(RVA = "0x166F858", Offset = "0x166F858", VA = "0x166F858", Slot = "4")]
			get
			{
				return default(XmlNodeType);
			}
		}

		[Token(Token = "0x170001FF")]
		public string Name
		{
			[Token(Token = "0x6001405")]
			[Address(RVA = "0x166F88C", Offset = "0x166F88C", VA = "0x166F88C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000200")]
		public string LocalName
		{
			[Token(Token = "0x6001406")]
			[Address(RVA = "0x166F8C0", Offset = "0x166F8C0", VA = "0x166F8C0", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000201")]
		public IList<IXmlNode> ChildNodes
		{
			[Token(Token = "0x6001407")]
			[Address(RVA = "0x166F8F8", Offset = "0x166F8F8", VA = "0x166F8F8", Slot = "6")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000202")]
		public IList<IXmlNode> Attributes
		{
			[Token(Token = "0x6001409")]
			[Address(RVA = "0x166FB90", Offset = "0x166FB90", VA = "0x166FB90", Slot = "7")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000203")]
		public IXmlNode ParentNode
		{
			[Token(Token = "0x600140A")]
			[Address(RVA = "0x166FC98", Offset = "0x166FC98", VA = "0x166FC98", Slot = "8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000204")]
		public string Value
		{
			[Token(Token = "0x600140B")]
			[Address(RVA = "0x166FD44", Offset = "0x166FD44", VA = "0x166FD44", Slot = "9")]
			get
			{
				return null;
			}
			[Token(Token = "0x600140C")]
			[Address(RVA = "0x16690E0", Offset = "0x16690E0", VA = "0x16690E0", Slot = "10")]
			set
			{
			}
		}

		[Token(Token = "0x17000205")]
		public string Prefix
		{
			[Token(Token = "0x600140E")]
			[Address(RVA = "0x166FE78", Offset = "0x166FE78", VA = "0x166FE78")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000206")]
		public string NamespaceURI
		{
			[Token(Token = "0x600140F")]
			[Address(RVA = "0x166FEB0", Offset = "0x166FEB0", VA = "0x166FEB0", Slot = "12")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001402")]
		[Address(RVA = "0x16688D0", Offset = "0x16688D0", VA = "0x16688D0")]
		public XmlNodeWrapper(XmlNode node)
		{
		}

		[Token(Token = "0x6001408")]
		[Address(RVA = "0x166F9D0", Offset = "0x166F9D0", VA = "0x166F9D0")]
		private IXmlNode WrapNode(XmlNode node)
		{
			return null;
		}

		[Token(Token = "0x600140D")]
		[Address(RVA = "0x166FD78", Offset = "0x166FD78", VA = "0x166FD78", Slot = "11")]
		public IXmlNode AppendChild(IXmlNode newChild)
		{
			return null;
		}

		[Token(Token = "0x6001410")]
		[Address(RVA = "0x166FEE8", Offset = "0x166FEE8", VA = "0x166FEE8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4DE9C", Offset = "0xB4DE9C")]
		private IXmlNode <get_ChildNodes>b__11_0(XmlNode n)
		{
			return null;
		}

		[Token(Token = "0x6001411")]
		[Address(RVA = "0x166FEEC", Offset = "0x166FEEC", VA = "0x166FEEC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4DEAC", Offset = "0xB4DEAC")]
		private IXmlNode <get_Attributes>b__14_0(XmlAttribute a)
		{
			return null;
		}
	}
	[Token(Token = "0x2000286")]
	internal interface IXmlDocument : IXmlNode
	{
		[Token(Token = "0x17000207")]
		IXmlElement DocumentElement
		{
			[Token(Token = "0x600141D")]
			get;
		}

		[Token(Token = "0x6001412")]
		IXmlNode CreateComment(string text);

		[Token(Token = "0x6001413")]
		IXmlNode CreateTextNode(string text);

		[Token(Token = "0x6001414")]
		IXmlNode CreateCDataSection(string data);

		[Token(Token = "0x6001415")]
		IXmlNode CreateWhitespace(string text);

		[Token(Token = "0x6001416")]
		IXmlNode CreateSignificantWhitespace(string text);

		[Token(Token = "0x6001417")]
		IXmlNode CreateXmlDeclaration(string version, string encoding, string standalone);

		[Token(Token = "0x6001418")]
		IXmlNode CreateProcessingInstruction(string target, string data);

		[Token(Token = "0x6001419")]
		IXmlElement CreateElement(string elementName);

		[Token(Token = "0x600141A")]
		IXmlElement CreateElement(string qualifiedName, string namespaceURI);

		[Token(Token = "0x600141B")]
		IXmlNode CreateAttribute(string name, string value);

		[Token(Token = "0x600141C")]
		IXmlNode CreateAttribute(string qualifiedName, string namespaceURI, string value);
	}
	[Token(Token = "0x2000287")]
	internal interface IXmlDeclaration : IXmlNode
	{
		[Token(Token = "0x17000208")]
		string Version
		{
			[Token(Token = "0x600141E")]
			get;
		}

		[Token(Token = "0x17000209")]
		string Encoding
		{
			[Token(Token = "0x600141F")]
			get;
			[Token(Token = "0x6001420")]
			set;
		}

		[Token(Token = "0x1700020A")]
		string Standalone
		{
			[Token(Token = "0x6001421")]
			get;
			[Token(Token = "0x6001422")]
			set;
		}
	}
	[Token(Token = "0x2000288")]
	internal interface IXmlElement : IXmlNode
	{
		[Token(Token = "0x6001423")]
		void SetAttributeNode(IXmlNode attribute);

		[Token(Token = "0x6001424")]
		string GetPrefixOfNamespace(string namespaceURI);
	}
	[Token(Token = "0x2000289")]
	internal interface IXmlNode
	{
		[Token(Token = "0x1700020B")]
		XmlNodeType NodeType
		{
			[Token(Token = "0x6001425")]
			get;
		}

		[Token(Token = "0x1700020C")]
		string LocalName
		{
			[Token(Token = "0x6001426")]
			get;
		}

		[Token(Token = "0x1700020D")]
		IList<IXmlNode> ChildNodes
		{
			[Token(Token = "0x6001427")]
			get;
		}

		[Token(Token = "0x1700020E")]
		IList<IXmlNode> Attributes
		{
			[Token(Token = "0x6001428")]
			get;
		}

		[Token(Token = "0x1700020F")]
		IXmlNode ParentNode
		{
			[Token(Token = "0x6001429")]
			get;
		}

		[Token(Token = "0x17000210")]
		string Value
		{
			[Token(Token = "0x600142A")]
			get;
			[Token(Token = "0x600142B")]
			set;
		}

		[Token(Token = "0x17000211")]
		string NamespaceURI
		{
			[Token(Token = "0x600142D")]
			get;
		}

		[Token(Token = "0x17000212")]
		object WrappedNode
		{
			[Token(Token = "0x600142E")]
			get;
		}

		[Token(Token = "0x600142C")]
		IXmlNode AppendChild(IXmlNode newChild);
	}
	[Token(Token = "0x200028A")]
	public class XmlNodeConverter : JsonConverter
	{
		[Serializable]
		[Token(Token = "0x2000345")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49F3C", Offset = "0xB49F3C")]
		private sealed class <>c
		{
			[Token(Token = "0x4000F5D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000F5E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<IXmlNode, bool> <>9__24_0;

			[Token(Token = "0x4000F5F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<IXmlNode, bool> <>9__37_0;

			[Token(Token = "0x60016A8")]
			[Address(RVA = "0x166F348", Offset = "0x166F348", VA = "0x166F348")]
			public <>c()
			{
			}

			[Token(Token = "0x60016A9")]
			[Address(RVA = "0x166F350", Offset = "0x166F350", VA = "0x166F350")]
			internal bool <IsArray>b__24_0(IXmlNode a)
			{
				return default(bool);
			}

			[Token(Token = "0x60016AA")]
			[Address(RVA = "0x166F4B0", Offset = "0x166F4B0", VA = "0x166F4B0")]
			internal bool <ValueAttributes>b__37_0(IXmlNode a)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x2000346")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49F4C", Offset = "0xB49F4C")]
		private sealed class <>c__DisplayClass26_0
		{
			[Token(Token = "0x4000F60")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public IXmlNode node;

			[Token(Token = "0x60016AB")]
			[Address(RVA = "0x166C6AC", Offset = "0x166C6AC", VA = "0x166C6AC")]
			public <>c__DisplayClass26_0()
			{
			}

			[Token(Token = "0x60016AC")]
			[Address(RVA = "0x166F578", Offset = "0x166F578", VA = "0x166F578")]
			internal bool <SerializeNode>b__0(IXmlNode n)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x2000347")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49F5C", Offset = "0xB49F5C")]
		private sealed class <>c__DisplayClass30_0
		{
			[Token(Token = "0x4000F61")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string propertyName;

			[Token(Token = "0x60016AD")]
			[Address(RVA = "0x166F014", Offset = "0x166F014", VA = "0x166F014")]
			public <>c__DisplayClass30_0()
			{
			}

			[Token(Token = "0x60016AE")]
			[Address(RVA = "0x166F6C0", Offset = "0x166F6C0", VA = "0x166F6C0")]
			internal bool <ReadArrayElements>b__0(IXmlElement n)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x2000348")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49F6C", Offset = "0xB49F6C")]
		private sealed class <>c__DisplayClass35_0
		{
			[Token(Token = "0x4000F62")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string propertyName;

			[Token(Token = "0x60016AF")]
			[Address(RVA = "0x166F2CC", Offset = "0x166F2CC", VA = "0x166F2CC")]
			public <>c__DisplayClass35_0()
			{
			}

			[Token(Token = "0x60016B0")]
			[Address(RVA = "0x166F78C", Offset = "0x166F78C", VA = "0x166F78C")]
			internal bool <DeserializeNode>b__0(IXmlElement n)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4000D05")]
		private const string TextName = "#text";

		[Token(Token = "0x4000D06")]
		private const string CommentName = "#comment";

		[Token(Token = "0x4000D07")]
		private const string CDataName = "#cdata-section";

		[Token(Token = "0x4000D08")]
		private const string WhitespaceName = "#whitespace";

		[Token(Token = "0x4000D09")]
		private const string SignificantWhitespaceName = "#significant-whitespace";

		[Token(Token = "0x4000D0A")]
		private const string DeclarationName = "?xml";

		[Token(Token = "0x4000D0B")]
		private const string JsonNamespaceUri = "http://james.newtonking.com/projects/json";

		[Token(Token = "0x4000D0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4BAD8", Offset = "0xB4BAD8")]
		private string <DeserializeRootElementName>k__BackingField;

		[Token(Token = "0x4000D0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4BAE8", Offset = "0xB4BAE8")]
		private bool <WriteArrayAttribute>k__BackingField;

		[Token(Token = "0x4000D0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4BAF8", Offset = "0xB4BAF8")]
		private bool <OmitRootObject>k__BackingField;

		[Token(Token = "0x17000213")]
		public string DeserializeRootElementName
		{
			[Token(Token = "0x600142F")]
			[Address(RVA = "0x1669478", Offset = "0x1669478", VA = "0x1669478")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4DEBC", Offset = "0xB4DEBC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001430")]
			[Address(RVA = "0x1669480", Offset = "0x1669480", VA = "0x1669480")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4DECC", Offset = "0xB4DECC")]
			set
			{
			}
		}

		[Token(Token = "0x17000214")]
		public bool WriteArrayAttribute
		{
			[Token(Token = "0x6001431")]
			[Address(RVA = "0x1669488", Offset = "0x1669488", VA = "0x1669488")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4DEDC", Offset = "0xB4DEDC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001432")]
			[Address(RVA = "0x1669490", Offset = "0x1669490", VA = "0x1669490")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4DEEC", Offset = "0xB4DEEC")]
			set
			{
			}
		}

		[Token(Token = "0x17000215")]
		public bool OmitRootObject
		{
			[Token(Token = "0x6001433")]
			[Address(RVA = "0x166949C", Offset = "0x166949C", VA = "0x166949C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4DEFC", Offset = "0xB4DEFC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001434")]
			[Address(RVA = "0x16694A4", Offset = "0x16694A4", VA = "0x16694A4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4DF0C", Offset = "0xB4DF0C")]
			set
			{
			}
		}

		[Token(Token = "0x6001435")]
		[Address(RVA = "0x16694B0", Offset = "0x16694B0", VA = "0x16694B0", Slot = "4")]
		public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
		{
		}

		[Token(Token = "0x6001436")]
		[Address(RVA = "0x16694E4", Offset = "0x16694E4", VA = "0x16694E4")]
		private IXmlNode WrapXml(object value)
		{
			return null;
		}

		[Token(Token = "0x6001437")]
		[Address(RVA = "0x1669564", Offset = "0x1669564", VA = "0x1669564")]
		private void PushParentNamespaces(IXmlNode node, XmlNamespaceManager manager)
		{
		}

		[Token(Token = "0x6001438")]
		[Address(RVA = "0x166B7A8", Offset = "0x166B7A8", VA = "0x166B7A8")]
		private string ResolveFullName(IXmlNode node, XmlNamespaceManager manager)
		{
			return null;
		}

		[Token(Token = "0x6001439")]
		[Address(RVA = "0x166BAD8", Offset = "0x166BAD8", VA = "0x166BAD8")]
		private string GetPropertyName(IXmlNode node, XmlNamespaceManager manager)
		{
			return null;
		}

		[Token(Token = "0x600143A")]
		[Address(RVA = "0x166BDFC", Offset = "0x166BDFC", VA = "0x166BDFC")]
		private bool IsArray(IXmlNode node)
		{
			return default(bool);
		}

		[Token(Token = "0x600143B")]
		[Address(RVA = "0x166C0A0", Offset = "0x166C0A0", VA = "0x166C0A0")]
		private void SerializeGroupedNodes(JsonWriter writer, IXmlNode node, XmlNamespaceManager manager, bool writePropertyName)
		{
		}

		[Token(Token = "0x600143C")]
		[Address(RVA = "0x1669D18", Offset = "0x1669D18", VA = "0x1669D18")]
		private void SerializeNode(JsonWriter writer, IXmlNode node, XmlNamespaceManager manager, bool writePropertyName)
		{
		}

		[Token(Token = "0x600143D")]
		[Address(RVA = "0x166C7A0", Offset = "0x166C7A0", VA = "0x166C7A0", Slot = "5")]
		public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
		{
			return null;
		}

		[Token(Token = "0x600143E")]
		[Address(RVA = "0x166DB60", Offset = "0x166DB60", VA = "0x166DB60")]
		private void DeserializeValue(JsonReader reader, IXmlDocument document, XmlNamespaceManager manager, string propertyName, IXmlNode currentNode)
		{
		}

		[Token(Token = "0x600143F")]
		[Address(RVA = "0x166C864", Offset = "0x166C864", VA = "0x166C864")]
		private void ReadElement(JsonReader reader, IXmlDocument document, IXmlNode currentNode, string propertyName, XmlNamespaceManager manager)
		{
		}

		[Token(Token = "0x6001440")]
		[Address(RVA = "0x166E628", Offset = "0x166E628", VA = "0x166E628")]
		private void ReadArrayElements(JsonReader reader, IXmlDocument document, string propertyName, IXmlNode currentNode, XmlNamespaceManager manager)
		{
		}

		[Token(Token = "0x6001441")]
		[Address(RVA = "0x166F01C", Offset = "0x166F01C", VA = "0x166F01C")]
		private void AddJsonArrayAttribute(IXmlElement element, IXmlDocument document)
		{
		}

		[Token(Token = "0x6001442")]
		[Address(RVA = "0x166E920", Offset = "0x166E920", VA = "0x166E920")]
		private Dictionary<string, string> ReadAttributeElements(JsonReader reader, XmlNamespaceManager manager)
		{
			return null;
		}

		[Token(Token = "0x6001443")]
		[Address(RVA = "0x166E178", Offset = "0x166E178", VA = "0x166E178")]
		private void CreateInstruction(JsonReader reader, IXmlDocument document, IXmlNode currentNode, string propertyName)
		{
		}

		[Token(Token = "0x6001444")]
		[Address(RVA = "0x166EE78", Offset = "0x166EE78", VA = "0x166EE78")]
		private IXmlElement CreateElement(string elementName, IXmlDocument document, string elementPrefix, XmlNamespaceManager manager)
		{
			return null;
		}

		[Token(Token = "0x6001445")]
		[Address(RVA = "0x166D498", Offset = "0x166D498", VA = "0x166D498")]
		private void DeserializeNode(JsonReader reader, IXmlDocument document, XmlNamespaceManager manager, IXmlNode currentNode)
		{
		}

		[Token(Token = "0x6001446")]
		[Address(RVA = "0x166F190", Offset = "0x166F190", VA = "0x166F190")]
		private bool IsNamespaceAttribute(string attributeName, out string prefix)
		{
			return default(bool);
		}

		[Token(Token = "0x6001447")]
		[Address(RVA = "0x166C6B4", Offset = "0x166C6B4", VA = "0x166C6B4")]
		private IEnumerable<IXmlNode> ValueAttributes(IEnumerable<IXmlNode> c)
		{
			return null;
		}

		[Token(Token = "0x6001448")]
		[Address(RVA = "0x166F2D4", Offset = "0x166F2D4", VA = "0x166F2D4", Slot = "6")]
		public override bool CanConvert(Type valueType)
		{
			return default(bool);
		}

		[Token(Token = "0x6001449")]
		[Address(RVA = "0x166F2DC", Offset = "0x166F2DC", VA = "0x166F2DC")]
		public XmlNodeConverter()
		{
		}
	}
}
namespace Newtonsoft.Json.Bson
{
	[Token(Token = "0x200028B")]
	internal enum BsonBinaryType : byte
	{
		[Token(Token = "0x4000D10")]
		Binary = 0,
		[Token(Token = "0x4000D11")]
		Function = 1,
		[Token(Token = "0x4000D12")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xB4BB08", Offset = "0xB4BB08")]
		Data = 2,
		[Token(Token = "0x4000D13")]
		Uuid = 3,
		[Token(Token = "0x4000D14")]
		Md5 = 5,
		[Token(Token = "0x4000D15")]
		UserDefined = 128
	}
	[Token(Token = "0x200028C")]
	internal class BsonBinaryWriter
	{
		[Token(Token = "0x4000D16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Encoding Encoding;

		[Token(Token = "0x4000D17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly BinaryWriter _writer;

		[Token(Token = "0x4000D18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private byte[] _largeByteBuffer;

		[Token(Token = "0x4000D19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int _maxChars;

		[Token(Token = "0x4000D1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4BB40", Offset = "0xB4BB40")]
		private DateTimeKind <DateTimeKindHandling>k__BackingField;

		[Token(Token = "0x17000216")]
		public DateTimeKind DateTimeKindHandling
		{
			[Token(Token = "0x600144A")]
			[Address(RVA = "0x1A38ECC", Offset = "0x1A38ECC", VA = "0x1A38ECC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4DF1C", Offset = "0xB4DF1C")]
			get
			{
				return default(DateTimeKind);
			}
			[Token(Token = "0x600144B")]
			[Address(RVA = "0x1A38ED4", Offset = "0x1A38ED4", VA = "0x1A38ED4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4DF2C", Offset = "0xB4DF2C")]
			set
			{
			}
		}

		[Token(Token = "0x600144C")]
		[Address(RVA = "0x1A38EDC", Offset = "0x1A38EDC", VA = "0x1A38EDC")]
		public BsonBinaryWriter(Stream stream)
		{
		}

		[Token(Token = "0x600144D")]
		[Address(RVA = "0x1A38F60", Offset = "0x1A38F60", VA = "0x1A38F60")]
		public void Flush()
		{
		}

		[Token(Token = "0x600144E")]
		[Address(RVA = "0x1A38F94", Offset = "0x1A38F94", VA = "0x1A38F94")]
		public void Close()
		{
		}

		[Token(Token = "0x600144F")]
		[Address(RVA = "0x1A38FC8", Offset = "0x1A38FC8", VA = "0x1A38FC8")]
		public void WriteToken(BsonToken t)
		{
		}

		[Token(Token = "0x6001450")]
		[Address(RVA = "0x1A39B64", Offset = "0x1A39B64", VA = "0x1A39B64")]
		private void WriteTokenInternal(BsonToken t)
		{
		}

		[Token(Token = "0x6001451")]
		[Address(RVA = "0x1A3B22C", Offset = "0x1A3B22C", VA = "0x1A3B22C")]
		private void WriteString(string s, int byteCount, int? calculatedlengthPrefix)
		{
		}

		[Token(Token = "0x6001452")]
		[Address(RVA = "0x1A3B514", Offset = "0x1A3B514", VA = "0x1A3B514")]
		private int CalculateSize(int stringByteCount)
		{
			return default(int);
		}

		[Token(Token = "0x6001453")]
		[Address(RVA = "0x1A3B51C", Offset = "0x1A3B51C", VA = "0x1A3B51C")]
		private int CalculateSizeWithLength(int stringByteCount, bool includeSize)
		{
			return default(int);
		}

		[Token(Token = "0x6001454")]
		[Address(RVA = "0x1A38FF4", Offset = "0x1A38FF4", VA = "0x1A38FF4")]
		private int CalculateSize(BsonToken t)
		{
			return default(int);
		}
	}
	[Token(Token = "0x200028D")]
	public class BsonObjectId
	{
		[Token(Token = "0x4000D1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4BB50", Offset = "0xB4BB50")]
		private byte[] <Value>k__BackingField;

		[Token(Token = "0x17000217")]
		public byte[] Value
		{
			[Token(Token = "0x6001456")]
			[Address(RVA = "0x1A3B71C", Offset = "0x1A3B71C", VA = "0x1A3B71C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4DF3C", Offset = "0xB4DF3C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001457")]
			[Address(RVA = "0x1A3B724", Offset = "0x1A3B724", VA = "0x1A3B724")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4DF4C", Offset = "0xB4DF4C")]
			private set
			{
			}
		}

		[Token(Token = "0x6001458")]
		[Address(RVA = "0x1A3B72C", Offset = "0x1A3B72C", VA = "0x1A3B72C")]
		public BsonObjectId(byte[] value)
		{
		}
	}
	[Token(Token = "0x200028E")]
	public class BsonReader : JsonReader
	{
		[Token(Token = "0x2000349")]
		private enum BsonReaderState
		{
			[Token(Token = "0x4000F64")]
			Normal,
			[Token(Token = "0x4000F65")]
			ReferenceStart,
			[Token(Token = "0x4000F66")]
			ReferenceRef,
			[Token(Token = "0x4000F67")]
			ReferenceId,
			[Token(Token = "0x4000F68")]
			CodeWScopeStart,
			[Token(Token = "0x4000F69")]
			CodeWScopeCode,
			[Token(Token = "0x4000F6A")]
			CodeWScopeScope,
			[Token(Token = "0x4000F6B")]
			CodeWScopeScopeObject,
			[Token(Token = "0x4000F6C")]
			CodeWScopeScopeEnd
		}

		[Token(Token = "0x200034A")]
		private class ContainerContext
		{
			[Token(Token = "0x4000F6D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public readonly BsonType Type;

			[Token(Token = "0x4000F6E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int Length;

			[Token(Token = "0x4000F6F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int Position;

			[Token(Token = "0x60016B1")]
			[Address(RVA = "0x16636E0", Offset = "0x16636E0", VA = "0x16636E0")]
			public ContainerContext(BsonType type)
			{
			}
		}

		[Token(Token = "0x4000D1C")]
		private const int MaxCharBytesSize = 128;

		[Token(Token = "0x4000D1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly byte[] _seqRange1;

		[Token(Token = "0x4000D1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly byte[] _seqRange2;

		[Token(Token = "0x4000D1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly byte[] _seqRange3;

		[Token(Token = "0x4000D20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static readonly byte[] _seqRange4;

		[Token(Token = "0x4000D21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly BinaryReader _reader;

		[Token(Token = "0x4000D22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly List<ContainerContext> _stack;

		[Token(Token = "0x4000D23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private byte[] _byteBuffer;

		[Token(Token = "0x4000D24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private char[] _charBuffer;

		[Token(Token = "0x4000D25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private BsonType _currentElementType;

		[Token(Token = "0x4000D26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private BsonReaderState _bsonReaderState;

		[Token(Token = "0x4000D27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private ContainerContext _currentContext;

		[Token(Token = "0x4000D28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private bool _readRootValueAsArray;

		[Token(Token = "0x4000D29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
		private bool _jsonNet35BinaryCompatibility;

		[Token(Token = "0x4000D2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private DateTimeKind _dateTimeKindHandling;

		[Token(Token = "0x17000218")]
		public bool JsonNet35BinaryCompatibility
		{
			[Token(Token = "0x6001459")]
			[Address(RVA = "0x1A3B7FC", Offset = "0x1A3B7FC", VA = "0x1A3B7FC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600145A")]
			[Address(RVA = "0x1A3B804", Offset = "0x1A3B804", VA = "0x1A3B804")]
			set
			{
			}
		}

		[Token(Token = "0x17000219")]
		public bool ReadRootValueAsArray
		{
			[Token(Token = "0x600145B")]
			[Address(RVA = "0x1A3B810", Offset = "0x1A3B810", VA = "0x1A3B810")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600145C")]
			[Address(RVA = "0x1A3B818", Offset = "0x1A3B818", VA = "0x1A3B818")]
			set
			{
			}
		}

		[Token(Token = "0x1700021A")]
		public DateTimeKind DateTimeKindHandling
		{
			[Token(Token = "0x600145D")]
			[Address(RVA = "0x1A3B824", Offset = "0x1A3B824", VA = "0x1A3B824")]
			get
			{
				return default(DateTimeKind);
			}
			[Token(Token = "0x600145E")]
			[Address(RVA = "0x1A3B82C", Offset = "0x1A3B82C", VA = "0x1A3B82C")]
			set
			{
			}
		}

		[Token(Token = "0x600145F")]
		[Address(RVA = "0x1A3B834", Offset = "0x1A3B834", VA = "0x1A3B834")]
		public BsonReader(Stream stream)
		{
		}

		[Token(Token = "0x6001460")]
		[Address(RVA = "0x1A3B840", Offset = "0x1A3B840", VA = "0x1A3B840")]
		public BsonReader(Stream stream, bool readRootValueAsArray, DateTimeKind dateTimeKindHandling)
		{
		}

		[Token(Token = "0x6001461")]
		[Address(RVA = "0x1A3B918", Offset = "0x1A3B918", VA = "0x1A3B918")]
		private string ReadElement()
		{
			return null;
		}

		[Token(Token = "0x6001462")]
		[Address(RVA = "0x1A3BC64", Offset = "0x1A3BC64", VA = "0x1A3BC64", Slot = "12")]
		public override byte[] ReadAsBytes()
		{
			return null;
		}

		[Token(Token = "0x6001463")]
		[Address(RVA = "0x1A3BE80", Offset = "0x1A3BE80", VA = "0x1A3BE80", Slot = "13")]
		public override decimal? ReadAsDecimal()
		{
			return null;
		}

		[Token(Token = "0x6001464")]
		[Address(RVA = "0x1A3C120", Offset = "0x1A3C120", VA = "0x1A3C120", Slot = "14")]
		public override DateTimeOffset? ReadAsDateTimeOffset()
		{
			return null;
		}

		[Token(Token = "0x6001465")]
		[Address(RVA = "0x1A3C364", Offset = "0x1A3C364", VA = "0x1A3C364", Slot = "11")]
		public override bool Read()
		{
			return default(bool);
		}

		[Token(Token = "0x6001466")]
		[Address(RVA = "0x1A3CBA8", Offset = "0x1A3CBA8", VA = "0x1A3CBA8", Slot = "17")]
		public override void Close()
		{
		}

		[Token(Token = "0x6001467")]
		[Address(RVA = "0x1A3C9BC", Offset = "0x1A3C9BC", VA = "0x1A3C9BC")]
		private bool ReadCodeWScope()
		{
			return default(bool);
		}

		[Token(Token = "0x6001468")]
		[Address(RVA = "0x1A3C7B8", Offset = "0x1A3C7B8", VA = "0x1A3C7B8")]
		private bool ReadReference()
		{
			return default(bool);
		}

		[Token(Token = "0x6001469")]
		[Address(RVA = "0x1A3C590", Offset = "0x1A3C590", VA = "0x1A3C590")]
		private bool ReadNormal()
		{
			return default(bool);
		}

		[Token(Token = "0x600146A")]
		[Address(RVA = "0x1A3D1B4", Offset = "0x1A3D1B4", VA = "0x1A3D1B4")]
		private void PopContext()
		{
		}

		[Token(Token = "0x600146B")]
		[Address(RVA = "0x1A3CCA0", Offset = "0x1A3CCA0", VA = "0x1A3CCA0")]
		private void PushContext(ContainerContext newContext)
		{
		}

		[Token(Token = "0x600146C")]
		[Address(RVA = "0x1A3D174", Offset = "0x1A3D174", VA = "0x1A3D174")]
		private byte ReadByte()
		{
			return default(byte);
		}

		[Token(Token = "0x600146D")]
		[Address(RVA = "0x1A3CD60", Offset = "0x1A3CD60", VA = "0x1A3CD60")]
		private void ReadType(BsonType type)
		{
		}

		[Token(Token = "0x600146E")]
		[Address(RVA = "0x1A3D380", Offset = "0x1A3D380", VA = "0x1A3D380")]
		private byte[] ReadBinary()
		{
			return null;
		}

		[Token(Token = "0x600146F")]
		[Address(RVA = "0x1A3B980", Offset = "0x1A3B980", VA = "0x1A3B980")]
		private string ReadString()
		{
			return null;
		}

		[Token(Token = "0x6001470")]
		[Address(RVA = "0x1A3CC3C", Offset = "0x1A3CC3C", VA = "0x1A3CC3C")]
		private string ReadLengthString()
		{
			return null;
		}

		[Token(Token = "0x6001471")]
		[Address(RVA = "0x1A3D568", Offset = "0x1A3D568", VA = "0x1A3D568")]
		private string GetString(int length)
		{
			return null;
		}

		[Token(Token = "0x6001472")]
		[Address(RVA = "0x1A3D4C8", Offset = "0x1A3D4C8", VA = "0x1A3D4C8")]
		private int GetLastFullCharStop(int start)
		{
			return default(int);
		}

		[Token(Token = "0x6001473")]
		[Address(RVA = "0x1A3D864", Offset = "0x1A3D864", VA = "0x1A3D864")]
		private int BytesInSequence(byte b)
		{
			return default(int);
		}

		[Token(Token = "0x6001474")]
		[Address(RVA = "0x1A3D418", Offset = "0x1A3D418", VA = "0x1A3D418")]
		private void EnsureBuffers()
		{
		}

		[Token(Token = "0x6001475")]
		[Address(RVA = "0x1A3D33C", Offset = "0x1A3D33C", VA = "0x1A3D33C")]
		private double ReadDouble()
		{
			return default(double);
		}

		[Token(Token = "0x6001476")]
		[Address(RVA = "0x1A3CBF8", Offset = "0x1A3CBF8", VA = "0x1A3CBF8")]
		private int ReadInt32()
		{
			return default(int);
		}

		[Token(Token = "0x6001477")]
		[Address(RVA = "0x1A3D3D4", Offset = "0x1A3D3D4", VA = "0x1A3D3D4")]
		private long ReadInt64()
		{
			return default(long);
		}

		[Token(Token = "0x6001478")]
		[Address(RVA = "0x1A3B940", Offset = "0x1A3B940", VA = "0x1A3B940")]
		private BsonType ReadType()
		{
			return default(BsonType);
		}

		[Token(Token = "0x6001479")]
		[Address(RVA = "0x1A3D2E8", Offset = "0x1A3D2E8", VA = "0x1A3D2E8")]
		private void MovePosition(int count)
		{
		}

		[Token(Token = "0x600147A")]
		[Address(RVA = "0x1A3CD18", Offset = "0x1A3CD18", VA = "0x1A3CD18")]
		private byte[] ReadBytes(int count)
		{
			return null;
		}
	}
	[Token(Token = "0x200028F")]
	internal abstract class BsonToken
	{
		[Token(Token = "0x4000D2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4BB60", Offset = "0xB4BB60")]
		private BsonToken <Parent>k__BackingField;

		[Token(Token = "0x4000D2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4BB70", Offset = "0xB4BB70")]
		private int <CalculatedSize>k__BackingField;

		[Token(Token = "0x1700021B")]
		public abstract BsonType Type
		{
			[Token(Token = "0x600147C")]
			get;
		}

		[Token(Token = "0x1700021C")]
		public BsonToken Parent
		{
			[Token(Token = "0x600147D")]
			[Address(RVA = "0x166389C", Offset = "0x166389C", VA = "0x166389C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4DF5C", Offset = "0xB4DF5C")]
			get
			{
				return null;
			}
			[Token(Token = "0x600147E")]
			[Address(RVA = "0x16638A4", Offset = "0x16638A4", VA = "0x16638A4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4DF6C", Offset = "0xB4DF6C")]
			set
			{
			}
		}

		[Token(Token = "0x1700021D")]
		public int CalculatedSize
		{
			[Token(Token = "0x600147F")]
			[Address(RVA = "0x16638AC", Offset = "0x16638AC", VA = "0x16638AC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4DF7C", Offset = "0xB4DF7C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001480")]
			[Address(RVA = "0x16638B4", Offset = "0x16638B4", VA = "0x16638B4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4DF8C", Offset = "0xB4DF8C")]
			set
			{
			}
		}

		[Token(Token = "0x6001481")]
		[Address(RVA = "0x16637E4", Offset = "0x16637E4", VA = "0x16637E4")]
		protected BsonToken()
		{
		}
	}
	[Token(Token = "0x2000290")]
	internal class BsonObject : BsonToken, IEnumerable<BsonProperty>, IEnumerable
	{
		[Token(Token = "0x4000D2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly List<BsonProperty> _children;

		[Token(Token = "0x1700021E")]
		public override BsonType Type
		{
			[Token(Token = "0x6001483")]
			[Address(RVA = "0x1A3B6A0", Offset = "0x1A3B6A0", VA = "0x1A3B6A0", Slot = "4")]
			get
			{
				return default(BsonType);
			}
		}

		[Token(Token = "0x6001482")]
		[Address(RVA = "0x1A3B588", Offset = "0x1A3B588", VA = "0x1A3B588")]
		public void Add(string name, BsonToken token)
		{
		}

		[Token(Token = "0x6001484")]
		[Address(RVA = "0x1A3B188", Offset = "0x1A3B188", VA = "0x1A3B188", Slot = "5")]
		public IEnumerator<BsonProperty> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6001485")]
		[Address(RVA = "0x1A3B6A8", Offset = "0x1A3B6A8", VA = "0x1A3B6A8", Slot = "6")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6001486")]
		[Address(RVA = "0x1A3B6AC", Offset = "0x1A3B6AC", VA = "0x1A3B6AC")]
		public BsonObject()
		{
		}
	}
	[Token(Token = "0x2000291")]
	internal class BsonArray : BsonToken, IEnumerable<BsonToken>, IEnumerable
	{
		[Token(Token = "0x4000D2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly List<BsonToken> _children;

		[Token(Token = "0x1700021F")]
		public override BsonType Type
		{
			[Token(Token = "0x6001488")]
			[Address(RVA = "0x1A38DBC", Offset = "0x1A38DBC", VA = "0x1A38DBC", Slot = "4")]
			get
			{
				return default(BsonType);
			}
		}

		[Token(Token = "0x6001487")]
		[Address(RVA = "0x1A38D30", Offset = "0x1A38D30", VA = "0x1A38D30")]
		public void Add(BsonToken token)
		{
		}

		[Token(Token = "0x6001489")]
		[Address(RVA = "0x1A38DC4", Offset = "0x1A38DC4", VA = "0x1A38DC4", Slot = "5")]
		public IEnumerator<BsonToken> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x600148A")]
		[Address(RVA = "0x1A38E58", Offset = "0x1A38E58", VA = "0x1A38E58", Slot = "6")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x600148B")]
		[Address(RVA = "0x1A38E5C", Offset = "0x1A38E5C", VA = "0x1A38E5C")]
		public BsonArray()
		{
		}
	}
	[Token(Token = "0x2000292")]
	internal class BsonValue : BsonToken
	{
		[Token(Token = "0x4000D2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private object _value;

		[Token(Token = "0x4000D30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private BsonType _type;

		[Token(Token = "0x17000220")]
		public object Value
		{
			[Token(Token = "0x600148D")]
			[Address(RVA = "0x16638BC", Offset = "0x16638BC", VA = "0x16638BC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000221")]
		public override BsonType Type
		{
			[Token(Token = "0x600148E")]
			[Address(RVA = "0x16638C4", Offset = "0x16638C4", VA = "0x16638C4", Slot = "4")]
			get
			{
				return default(BsonType);
			}
		}

		[Token(Token = "0x600148C")]
		[Address(RVA = "0x1663860", Offset = "0x1663860", VA = "0x1663860")]
		public BsonValue(object value, BsonType type)
		{
		}
	}
	[Token(Token = "0x2000293")]
	internal class BsonString : BsonValue
	{
		[Token(Token = "0x4000D31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4BB80", Offset = "0xB4BB80")]
		private int <ByteCount>k__BackingField;

		[Token(Token = "0x4000D32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4BB90", Offset = "0xB4BB90")]
		private bool <IncludeLength>k__BackingField;

		[Token(Token = "0x17000222")]
		public int ByteCount
		{
			[Token(Token = "0x600148F")]
			[Address(RVA = "0x166383C", Offset = "0x166383C", VA = "0x166383C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4DF9C", Offset = "0xB4DF9C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001490")]
			[Address(RVA = "0x1663844", Offset = "0x1663844", VA = "0x1663844")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4DFAC", Offset = "0xB4DFAC")]
			set
			{
			}
		}

		[Token(Token = "0x17000223")]
		public bool IncludeLength
		{
			[Token(Token = "0x6001491")]
			[Address(RVA = "0x166384C", Offset = "0x166384C", VA = "0x166384C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4DFBC", Offset = "0xB4DFBC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001492")]
			[Address(RVA = "0x1663854", Offset = "0x1663854", VA = "0x1663854")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4DFCC", Offset = "0xB4DFCC")]
			set
			{
			}
		}

		[Token(Token = "0x6001493")]
		[Address(RVA = "0x16637EC", Offset = "0x16637EC", VA = "0x16637EC")]
		public BsonString(object value, bool includeLength)
		{
		}
	}
	[Token(Token = "0x2000294")]
	internal class BsonRegex : BsonToken
	{
		[Token(Token = "0x4000D33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4BBA0", Offset = "0xB4BBA0")]
		private BsonString <Pattern>k__BackingField;

		[Token(Token = "0x4000D34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4BBB0", Offset = "0xB4BBB0")]
		private BsonString <Options>k__BackingField;

		[Token(Token = "0x17000224")]
		public BsonString Pattern
		{
			[Token(Token = "0x6001494")]
			[Address(RVA = "0x166370C", Offset = "0x166370C", VA = "0x166370C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4DFDC", Offset = "0xB4DFDC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001495")]
			[Address(RVA = "0x1663714", Offset = "0x1663714", VA = "0x1663714")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4DFEC", Offset = "0xB4DFEC")]
			set
			{
			}
		}

		[Token(Token = "0x17000225")]
		public BsonString Options
		{
			[Token(Token = "0x6001496")]
			[Address(RVA = "0x166371C", Offset = "0x166371C", VA = "0x166371C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4DFFC", Offset = "0xB4DFFC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001497")]
			[Address(RVA = "0x1663724", Offset = "0x1663724", VA = "0x1663724")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4E00C", Offset = "0xB4E00C")]
			set
			{
			}
		}

		[Token(Token = "0x17000226")]
		public override BsonType Type
		{
			[Token(Token = "0x6001499")]
			[Address(RVA = "0x1663834", Offset = "0x1663834", VA = "0x1663834", Slot = "4")]
			get
			{
				return default(BsonType);
			}
		}

		[Token(Token = "0x6001498")]
		[Address(RVA = "0x166372C", Offset = "0x166372C", VA = "0x166372C")]
		public BsonRegex(string pattern, string options)
		{
		}
	}
	[Token(Token = "0x2000295")]
	internal class BsonProperty
	{
		[Token(Token = "0x4000D35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4BBC0", Offset = "0xB4BBC0")]
		private BsonString <Name>k__BackingField;

		[Token(Token = "0x4000D36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4BBD0", Offset = "0xB4BBD0")]
		private BsonToken <Value>k__BackingField;

		[Token(Token = "0x17000227")]
		public BsonString Name
		{
			[Token(Token = "0x600149A")]
			[Address(RVA = "0x1A3B224", Offset = "0x1A3B224", VA = "0x1A3B224")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4E01C", Offset = "0xB4E01C")]
			get
			{
				return null;
			}
			[Token(Token = "0x600149B")]
			[Address(RVA = "0x1A3B690", Offset = "0x1A3B690", VA = "0x1A3B690")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4E02C", Offset = "0xB4E02C")]
			set
			{
			}
		}

		[Token(Token = "0x17000228")]
		public BsonToken Value
		{
			[Token(Token = "0x600149C")]
			[Address(RVA = "0x1A3B21C", Offset = "0x1A3B21C", VA = "0x1A3B21C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4E03C", Offset = "0xB4E03C")]
			get
			{
				return null;
			}
			[Token(Token = "0x600149D")]
			[Address(RVA = "0x1A3B698", Offset = "0x1A3B698", VA = "0x1A3B698")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4E04C", Offset = "0xB4E04C")]
			set
			{
			}
		}

		[Token(Token = "0x600149E")]
		[Address(RVA = "0x1A3B688", Offset = "0x1A3B688", VA = "0x1A3B688")]
		public BsonProperty()
		{
		}
	}
	[Token(Token = "0x2000296")]
	internal enum BsonType : sbyte
	{
		[Token(Token = "0x4000D38")]
		Number = 1,
		[Token(Token = "0x4000D39")]
		String = 2,
		[Token(Token = "0x4000D3A")]
		Object = 3,
		[Token(Token = "0x4000D3B")]
		Array = 4,
		[Token(Token = "0x4000D3C")]
		Binary = 5,
		[Token(Token = "0x4000D3D")]
		Undefined = 6,
		[Token(Token = "0x4000D3E")]
		Oid = 7,
		[Token(Token = "0x4000D3F")]
		Boolean = 8,
		[Token(Token = "0x4000D40")]
		Date = 9,
		[Token(Token = "0x4000D41")]
		Null = 10,
		[Token(Token = "0x4000D42")]
		Regex = 11,
		[Token(Token = "0x4000D43")]
		Reference = 12,
		[Token(Token = "0x4000D44")]
		Code = 13,
		[Token(Token = "0x4000D45")]
		Symbol = 14,
		[Token(Token = "0x4000D46")]
		CodeWScope = 15,
		[Token(Token = "0x4000D47")]
		Integer = 16,
		[Token(Token = "0x4000D48")]
		TimeStamp = 17,
		[Token(Token = "0x4000D49")]
		Long = 18,
		[Token(Token = "0x4000D4A")]
		MinKey = -1,
		[Token(Token = "0x4000D4B")]
		MaxKey = sbyte.MaxValue
	}
	[Token(Token = "0x2000297")]
	public class BsonWriter : JsonWriter
	{
		[Token(Token = "0x4000D4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly BsonBinaryWriter _writer;

		[Token(Token = "0x4000D4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private BsonToken _root;

		[Token(Token = "0x4000D4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private BsonToken _parent;

		[Token(Token = "0x4000D4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private string _propertyName;

		[Token(Token = "0x17000229")]
		public DateTimeKind DateTimeKindHandling
		{
			[Token(Token = "0x600149F")]
			[Address(RVA = "0x16638CC", Offset = "0x16638CC", VA = "0x16638CC")]
			get
			{
				return default(DateTimeKind);
			}
			[Token(Token = "0x60014A0")]
			[Address(RVA = "0x16638FC", Offset = "0x16638FC", VA = "0x16638FC")]
			set
			{
			}
		}

		[Token(Token = "0x60014A1")]
		[Address(RVA = "0x1663934", Offset = "0x1663934", VA = "0x1663934")]
		public BsonWriter(Stream stream)
		{
		}

		[Token(Token = "0x60014A2")]
		[Address(RVA = "0x1663A8C", Offset = "0x1663A8C", VA = "0x1663A8C", Slot = "5")]
		public override void Flush()
		{
		}

		[Token(Token = "0x60014A3")]
		[Address(RVA = "0x1663ABC", Offset = "0x1663ABC", VA = "0x1663ABC", Slot = "15")]
		protected override void WriteEnd(JsonToken token)
		{
		}

		[Token(Token = "0x60014A4")]
		[Address(RVA = "0x1663B64", Offset = "0x1663B64", VA = "0x1663B64", Slot = "61")]
		public override void WriteComment(string text)
		{
		}

		[Token(Token = "0x60014A5")]
		[Address(RVA = "0x1663BD8", Offset = "0x1663BD8", VA = "0x1663BD8", Slot = "11")]
		public override void WriteStartConstructor(string name)
		{
		}

		[Token(Token = "0x60014A6")]
		[Address(RVA = "0x1663C4C", Offset = "0x1663C4C", VA = "0x1663C4C", Slot = "21")]
		public override void WriteRaw(string json)
		{
		}

		[Token(Token = "0x60014A7")]
		[Address(RVA = "0x1663CC0", Offset = "0x1663CC0", VA = "0x1663CC0", Slot = "22")]
		public override void WriteRawValue(string json)
		{
		}

		[Token(Token = "0x60014A8")]
		[Address(RVA = "0x1663D34", Offset = "0x1663D34", VA = "0x1663D34", Slot = "9")]
		public override void WriteStartArray()
		{
		}

		[Token(Token = "0x60014A9")]
		[Address(RVA = "0x1663E0C", Offset = "0x1663E0C", VA = "0x1663E0C", Slot = "7")]
		public override void WriteStartObject()
		{
		}

		[Token(Token = "0x60014AA")]
		[Address(RVA = "0x1663EBC", Offset = "0x1663EBC", VA = "0x1663EBC", Slot = "13")]
		public override void WritePropertyName(string name)
		{
		}

		[Token(Token = "0x60014AB")]
		[Address(RVA = "0x1663EF0", Offset = "0x1663EF0", VA = "0x1663EF0", Slot = "6")]
		public override void Close()
		{
		}

		[Token(Token = "0x60014AC")]
		[Address(RVA = "0x1663DE4", Offset = "0x1663DE4", VA = "0x1663DE4")]
		private void AddParent(BsonToken container)
		{
		}

		[Token(Token = "0x60014AD")]
		[Address(RVA = "0x1663B28", Offset = "0x1663B28", VA = "0x1663B28")]
		private void RemoveParent()
		{
		}

		[Token(Token = "0x60014AE")]
		[Address(RVA = "0x166429C", Offset = "0x166429C", VA = "0x166429C")]
		private void AddValue(object value, BsonType type)
		{
		}

		[Token(Token = "0x60014AF")]
		[Address(RVA = "0x1663FA8", Offset = "0x1663FA8", VA = "0x1663FA8")]
		internal void AddToken(BsonToken token)
		{
		}

		[Token(Token = "0x60014B0")]
		[Address(RVA = "0x1664318", Offset = "0x1664318", VA = "0x1664318", Slot = "19")]
		public override void WriteNull()
		{
		}

		[Token(Token = "0x60014B1")]
		[Address(RVA = "0x1664350", Offset = "0x1664350", VA = "0x1664350", Slot = "20")]
		public override void WriteUndefined()
		{
		}

		[Token(Token = "0x60014B2")]
		[Address(RVA = "0x1664388", Offset = "0x1664388", VA = "0x1664388", Slot = "23")]
		public override void WriteValue(string value)
		{
		}

		[Token(Token = "0x60014B3")]
		[Address(RVA = "0x1664440", Offset = "0x1664440", VA = "0x1664440", Slot = "24")]
		public override void WriteValue(int value)
		{
		}

		[Token(Token = "0x60014B4")]
		[Address(RVA = "0x16644C8", Offset = "0x16644C8", VA = "0x16644C8", Slot = "25")]
		public override void WriteValue(uint value)
		{
		}

		[Token(Token = "0x60014B5")]
		[Address(RVA = "0x1664598", Offset = "0x1664598", VA = "0x1664598", Slot = "26")]
		public override void WriteValue(long value)
		{
		}

		[Token(Token = "0x60014B6")]
		[Address(RVA = "0x1664620", Offset = "0x1664620", VA = "0x1664620", Slot = "27")]
		public override void WriteValue(ulong value)
		{
		}

		[Token(Token = "0x60014B7")]
		[Address(RVA = "0x16646F0", Offset = "0x16646F0", VA = "0x16646F0", Slot = "28")]
		public override void WriteValue(float value)
		{
		}

		[Token(Token = "0x60014B8")]
		[Address(RVA = "0x1664778", Offset = "0x1664778", VA = "0x1664778", Slot = "29")]
		public override void WriteValue(double value)
		{
		}

		[Token(Token = "0x60014B9")]
		[Address(RVA = "0x1664800", Offset = "0x1664800", VA = "0x1664800", Slot = "30")]
		public override void WriteValue(bool value)
		{
		}

		[Token(Token = "0x60014BA")]
		[Address(RVA = "0x1664888", Offset = "0x1664888", VA = "0x1664888", Slot = "31")]
		public override void WriteValue(short value)
		{
		}

		[Token(Token = "0x60014BB")]
		[Address(RVA = "0x1664910", Offset = "0x1664910", VA = "0x1664910", Slot = "32")]
		public override void WriteValue(ushort value)
		{
		}

		[Token(Token = "0x60014BC")]
		[Address(RVA = "0x1664998", Offset = "0x1664998", VA = "0x1664998", Slot = "33")]
		public override void WriteValue(char value)
		{
		}

		[Token(Token = "0x60014BD")]
		[Address(RVA = "0x1664A48", Offset = "0x1664A48", VA = "0x1664A48", Slot = "34")]
		public override void WriteValue(byte value)
		{
		}

		[Token(Token = "0x60014BE")]
		[Address(RVA = "0x1664AD0", Offset = "0x1664AD0", VA = "0x1664AD0", Slot = "35")]
		public override void WriteValue(sbyte value)
		{
		}

		[Token(Token = "0x60014BF")]
		[Address(RVA = "0x1664B58", Offset = "0x1664B58", VA = "0x1664B58", Slot = "36")]
		public override void WriteValue(decimal value)
		{
		}

		[Token(Token = "0x60014C0")]
		[Address(RVA = "0x1664BEC", Offset = "0x1664BEC", VA = "0x1664BEC", Slot = "37")]
		public override void WriteValue(DateTime value)
		{
		}

		[Token(Token = "0x60014C1")]
		[Address(RVA = "0x1664C74", Offset = "0x1664C74", VA = "0x1664C74", Slot = "38")]
		public override void WriteValue(DateTimeOffset value)
		{
		}

		[Token(Token = "0x60014C2")]
		[Address(RVA = "0x1664D08", Offset = "0x1664D08", VA = "0x1664D08", Slot = "58")]
		public override void WriteValue(byte[] value)
		{
		}

		[Token(Token = "0x60014C3")]
		[Address(RVA = "0x1664D78", Offset = "0x1664D78", VA = "0x1664D78", Slot = "39")]
		public override void WriteValue(Guid value)
		{
		}

		[Token(Token = "0x60014C4")]
		[Address(RVA = "0x1664E30", Offset = "0x1664E30", VA = "0x1664E30", Slot = "40")]
		public override void WriteValue(TimeSpan value)
		{
		}

		[Token(Token = "0x60014C5")]
		[Address(RVA = "0x1664EE0", Offset = "0x1664EE0", VA = "0x1664EE0", Slot = "59")]
		public override void WriteValue(Uri value)
		{
		}

		[Token(Token = "0x60014C6")]
		[Address(RVA = "0x166503C", Offset = "0x166503C", VA = "0x166503C")]
		public void WriteObjectId(byte[] value)
		{
		}

		[Token(Token = "0x60014C7")]
		[Address(RVA = "0x1665458", Offset = "0x1665458", VA = "0x1665458")]
		public void WriteRegex(string pattern, string options)
		{
		}
	}
}
namespace JsonDotNet.Extras.CustomConverters
{
	[Token(Token = "0x2000298")]
	public class Matrix4x4Converter : JsonConverter
	{
		[Serializable]
		[Token(Token = "0x200034B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49F7C", Offset = "0xB49F7C")]
		private sealed class <>c
		{
			[Token(Token = "0x4000F70")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000F71")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<JProperty, bool> <>9__0_0;

			[Token(Token = "0x4000F72")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<JProperty, string> <>9__0_1;

			[Token(Token = "0x60016B3")]
			[Address(RVA = "0x1A2366C", Offset = "0x1A2366C", VA = "0x1A2366C")]
			public <>c()
			{
			}

			[Token(Token = "0x60016B4")]
			[Address(RVA = "0x1A23674", Offset = "0x1A23674", VA = "0x1A23674")]
			internal bool <WriteJson>b__0_0(JProperty p)
			{
				return default(bool);
			}

			[Token(Token = "0x60016B5")]
			[Address(RVA = "0x1A2371C", Offset = "0x1A2371C", VA = "0x1A2371C")]
			internal string <WriteJson>b__0_1(JProperty p)
			{
				return null;
			}
		}

		[Token(Token = "0x1700022A")]
		public override bool CanRead
		{
			[Token(Token = "0x60014CA")]
			[Address(RVA = "0x1A23574", Offset = "0x1A23574", VA = "0x1A23574", Slot = "8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60014C8")]
		[Address(RVA = "0x1A2317C", Offset = "0x1A2317C", VA = "0x1A2317C", Slot = "4")]
		public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
		{
		}

		[Token(Token = "0x60014C9")]
		[Address(RVA = "0x1A23500", Offset = "0x1A23500", VA = "0x1A23500", Slot = "5")]
		public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
		{
			return null;
		}

		[Token(Token = "0x60014CB")]
		[Address(RVA = "0x1A2357C", Offset = "0x1A2357C", VA = "0x1A2357C", Slot = "6")]
		public override bool CanConvert(Type objectType)
		{
			return default(bool);
		}

		[Token(Token = "0x60014CC")]
		[Address(RVA = "0x1A23600", Offset = "0x1A23600", VA = "0x1A23600")]
		public Matrix4x4Converter()
		{
		}
	}
	[Token(Token = "0x2000299")]
	public class Vector2Converter : JsonConverter
	{
		[Serializable]
		[Token(Token = "0x200034C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49F8C", Offset = "0xB49F8C")]
		private sealed class <>c
		{
			[Token(Token = "0x4000F73")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000F74")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<JProperty, bool> <>9__0_0;

			[Token(Token = "0x4000F75")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<JProperty, string> <>9__0_1;

			[Token(Token = "0x60016B7")]
			[Address(RVA = "0x1A23C3C", Offset = "0x1A23C3C", VA = "0x1A23C3C")]
			public <>c()
			{
			}

			[Token(Token = "0x60016B8")]
			[Address(RVA = "0x1A23C44", Offset = "0x1A23C44", VA = "0x1A23C44")]
			internal bool <WriteJson>b__0_0(JProperty p)
			{
				return default(bool);
			}

			[Token(Token = "0x60016B9")]
			[Address(RVA = "0x1A23CEC", Offset = "0x1A23CEC", VA = "0x1A23CEC")]
			internal string <WriteJson>b__0_1(JProperty p)
			{
				return null;
			}
		}

		[Token(Token = "0x1700022B")]
		public override bool CanRead
		{
			[Token(Token = "0x60014CF")]
			[Address(RVA = "0x1A23B44", Offset = "0x1A23B44", VA = "0x1A23B44", Slot = "8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60014CD")]
		[Address(RVA = "0x1A2374C", Offset = "0x1A2374C", VA = "0x1A2374C", Slot = "4")]
		public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
		{
		}

		[Token(Token = "0x60014CE")]
		[Address(RVA = "0x1A23AD0", Offset = "0x1A23AD0", VA = "0x1A23AD0", Slot = "5")]
		public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
		{
			return null;
		}

		[Token(Token = "0x60014D0")]
		[Address(RVA = "0x1A23B4C", Offset = "0x1A23B4C", VA = "0x1A23B4C", Slot = "6")]
		public override bool CanConvert(Type objectType)
		{
			return default(bool);
		}

		[Token(Token = "0x60014D1")]
		[Address(RVA = "0x1A23BD0", Offset = "0x1A23BD0", VA = "0x1A23BD0")]
		public Vector2Converter()
		{
		}
	}
	[Token(Token = "0x200029A")]
	public class Vector3Converter : JsonConverter
	{
		[Serializable]
		[Token(Token = "0x200034D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49F9C", Offset = "0xB49F9C")]
		private sealed class <>c
		{
			[Token(Token = "0x4000F76")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000F77")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<JProperty, bool> <>9__0_0;

			[Token(Token = "0x4000F78")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<JProperty, string> <>9__0_1;

			[Token(Token = "0x60016BB")]
			[Address(RVA = "0x1A2420C", Offset = "0x1A2420C", VA = "0x1A2420C")]
			public <>c()
			{
			}

			[Token(Token = "0x60016BC")]
			[Address(RVA = "0x1A24214", Offset = "0x1A24214", VA = "0x1A24214")]
			internal bool <WriteJson>b__0_0(JProperty p)
			{
				return default(bool);
			}

			[Token(Token = "0x60016BD")]
			[Address(RVA = "0x1A242EC", Offset = "0x1A242EC", VA = "0x1A242EC")]
			internal string <WriteJson>b__0_1(JProperty p)
			{
				return null;
			}
		}

		[Token(Token = "0x1700022C")]
		public override bool CanRead
		{
			[Token(Token = "0x60014D4")]
			[Address(RVA = "0x1A24114", Offset = "0x1A24114", VA = "0x1A24114", Slot = "8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60014D2")]
		[Address(RVA = "0x1A23D1C", Offset = "0x1A23D1C", VA = "0x1A23D1C", Slot = "4")]
		public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
		{
		}

		[Token(Token = "0x60014D3")]
		[Address(RVA = "0x1A240A0", Offset = "0x1A240A0", VA = "0x1A240A0", Slot = "5")]
		public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
		{
			return null;
		}

		[Token(Token = "0x60014D5")]
		[Address(RVA = "0x1A2411C", Offset = "0x1A2411C", VA = "0x1A2411C", Slot = "6")]
		public override bool CanConvert(Type objectType)
		{
			return default(bool);
		}

		[Token(Token = "0x60014D6")]
		[Address(RVA = "0x1A241A0", Offset = "0x1A241A0", VA = "0x1A241A0")]
		public Vector3Converter()
		{
		}
	}
	[Token(Token = "0x200029B")]
	public class Vector4Converter : JsonConverter
	{
		[Serializable]
		[Token(Token = "0x200034E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49FAC", Offset = "0xB49FAC")]
		private sealed class <>c
		{
			[Token(Token = "0x4000F79")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000F7A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<JProperty, bool> <>9__0_0;

			[Token(Token = "0x4000F7B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<JProperty, string> <>9__0_1;

			[Token(Token = "0x60016BF")]
			[Address(RVA = "0x1A2480C", Offset = "0x1A2480C", VA = "0x1A2480C")]
			public <>c()
			{
			}

			[Token(Token = "0x60016C0")]
			[Address(RVA = "0x1A24814", Offset = "0x1A24814", VA = "0x1A24814")]
			internal bool <WriteJson>b__0_0(JProperty p)
			{
				return default(bool);
			}

			[Token(Token = "0x60016C1")]
			[Address(RVA = "0x1A2491C", Offset = "0x1A2491C", VA = "0x1A2491C")]
			internal string <WriteJson>b__0_1(JProperty p)
			{
				return null;
			}
		}

		[Token(Token = "0x1700022D")]
		public override bool CanRead
		{
			[Token(Token = "0x60014D9")]
			[Address(RVA = "0x1A24714", Offset = "0x1A24714", VA = "0x1A24714", Slot = "8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60014D7")]
		[Address(RVA = "0x1A2431C", Offset = "0x1A2431C", VA = "0x1A2431C", Slot = "4")]
		public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
		{
		}

		[Token(Token = "0x60014D8")]
		[Address(RVA = "0x1A246A0", Offset = "0x1A246A0", VA = "0x1A246A0", Slot = "5")]
		public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
		{
			return null;
		}

		[Token(Token = "0x60014DA")]
		[Address(RVA = "0x1A2471C", Offset = "0x1A2471C", VA = "0x1A2471C", Slot = "6")]
		public override bool CanConvert(Type objectType)
		{
			return default(bool);
		}

		[Token(Token = "0x60014DB")]
		[Address(RVA = "0x1A247A0", Offset = "0x1A247A0", VA = "0x1A247A0")]
		public Vector4Converter()
		{
		}
	}
}
