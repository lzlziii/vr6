using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using System.Xml;
using Camouflaj.AssetSystem;
using Camouflaj.SimpleProfiler;
using Camouflaj.Toolkit.Cinematics;
using DG.Tweening.Core;
using DG.Tweening.Plugins.Core.PathCore;
using DG.Tweening.Plugins.Options;
using Darkwind.Attributes;
using Darkwind.Development;
using Darkwind.Tweening;
using Darkwind.Utilities;
using Darkwind.VR.Core;
using Darkwind.VR.EventSystems;
using Darkwind.VR.Interact;
using Dreamteck.Splines;
using GuidSystem;
using Il2CppDummyDll;
using MeshCombineStudio;
using Oculus.Platform;
using Oculus.Platform.Models;
using ProBuilder2.Common;
using Rewired;
using RootMotion.FinalIK;
using Unity.Burst;
using Unity.Collections;
using Unity.Jobs;
using Unity.Mathematics;
using UnityEngine;
using UnityEngine.AI;
using UnityEngine.Audio;
using UnityEngine.Events;
using UnityEngine.LowLevel;
using UnityEngine.Playables;
using UnityEngine.Profiling;
using UnityEngine.Rendering;
using UnityEngine.SceneManagement;
using UnityEngine.Scripting;
using UnityEngine.Serialization;
using UnityEngine.Timeline;
using UnityEngine.UI;
using UnityEngine.Video;
using UnluckSoftware;

[assembly: AssemblyVersion("0.0.0.0")]
[Token(Token = "0x2000002")]
public static class NativeVideoPlayer
{
	[Token(Token = "0x2000003")]
	public enum PlaybackState
	{
		[Token(Token = "0x4000019")]
		Idle = 1,
		[Token(Token = "0x400001A")]
		Preparing,
		[Token(Token = "0x400001B")]
		Buffering,
		[Token(Token = "0x400001C")]
		Ready,
		[Token(Token = "0x400001D")]
		Ended
	}

	[Token(Token = "0x2000004")]
	public enum StereoMode
	{
		[Token(Token = "0x400001F")]
		Unknown = -1,
		[Token(Token = "0x4000020")]
		Mono,
		[Token(Token = "0x4000021")]
		TopBottom,
		[Token(Token = "0x4000022")]
		LeftRight,
		[Token(Token = "0x4000023")]
		Mesh
	}

	[Token(Token = "0x4000001")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static IntPtr? _Activity;

	[Token(Token = "0x4000002")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static IntPtr? _VideoPlayerClass;

	[Token(Token = "0x4000003")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static readonly jvalue[] EmptyParams;

	[Token(Token = "0x4000004")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static IntPtr getIsPlayingMethodId;

	[Token(Token = "0x4000005")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private static IntPtr getCurrentPlaybackStateMethodId;

	[Token(Token = "0x4000006")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private static IntPtr getDurationMethodId;

	[Token(Token = "0x4000007")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private static IntPtr getStereoModeMethodId;

	[Token(Token = "0x4000008")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private static IntPtr getWidthMethodId;

	[Token(Token = "0x4000009")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private static IntPtr getHeightMethodId;

	[Token(Token = "0x400000A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private static IntPtr getPlaybackPositionMethodId;

	[Token(Token = "0x400000B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private static IntPtr setPlaybackPositionMethodId;

	[Token(Token = "0x400000C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private static jvalue[] setPlaybackPositionParams;

	[Token(Token = "0x400000D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private static IntPtr playVideoMethodId;

	[Token(Token = "0x400000E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private static jvalue[] playVideoParams;

	[Token(Token = "0x400000F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private static IntPtr stopMethodId;

	[Token(Token = "0x4000010")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private static IntPtr resumeMethodId;

	[Token(Token = "0x4000011")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private static IntPtr pauseMethodId;

	[Token(Token = "0x4000012")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private static IntPtr setPlaybackSpeedMethodId;

	[Token(Token = "0x4000013")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private static jvalue[] setPlaybackSpeedParams;

	[Token(Token = "0x4000014")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private static IntPtr setLoopingMethodId;

	[Token(Token = "0x4000015")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private static jvalue[] setLoopingParams;

	[Token(Token = "0x4000016")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private static IntPtr setListenerRotationQuaternionMethodId;

	[Token(Token = "0x4000017")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private static jvalue[] setListenerRotationQuaternionParams;

	[Token(Token = "0x17000001")]
	private static IntPtr VideoPlayerClass
	{
		[Token(Token = "0x6000001")]
		[Address(RVA = "0xF9F010", Offset = "0xF9F010", VA = "0xF9F010")]
		get
		{
			return default(IntPtr);
		}
	}

	[Token(Token = "0x17000002")]
	private static IntPtr Activity
	{
		[Token(Token = "0x6000002")]
		[Address(RVA = "0xF9F2CC", Offset = "0xF9F2CC", VA = "0xF9F2CC")]
		get
		{
			return default(IntPtr);
		}
	}

	[Token(Token = "0x17000003")]
	public static bool IsAvailable
	{
		[Token(Token = "0x6000003")]
		[Address(RVA = "0xF9F538", Offset = "0xF9F538", VA = "0xF9F538")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000004")]
	public static bool IsPlaying
	{
		[Token(Token = "0x6000004")]
		[Address(RVA = "0xF9F59C", Offset = "0xF9F59C", VA = "0xF9F59C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000005")]
	public static PlaybackState CurrentPlaybackState
	{
		[Token(Token = "0x6000005")]
		[Address(RVA = "0xF9F690", Offset = "0xF9F690", VA = "0xF9F690")]
		get
		{
			return default(PlaybackState);
		}
	}

	[Token(Token = "0x17000006")]
	public static long Duration
	{
		[Token(Token = "0x6000006")]
		[Address(RVA = "0xF9F788", Offset = "0xF9F788", VA = "0xF9F788")]
		get
		{
			return default(long);
		}
	}

	[Token(Token = "0x17000007")]
	public static StereoMode VideoStereoMode
	{
		[Token(Token = "0x6000007")]
		[Address(RVA = "0xF9F880", Offset = "0xF9F880", VA = "0xF9F880")]
		get
		{
			return default(StereoMode);
		}
	}

	[Token(Token = "0x17000008")]
	public static int VideoWidth
	{
		[Token(Token = "0x6000008")]
		[Address(RVA = "0xF9F978", Offset = "0xF9F978", VA = "0xF9F978")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000009")]
	public static int VideoHeight
	{
		[Token(Token = "0x6000009")]
		[Address(RVA = "0xF9FA70", Offset = "0xF9FA70", VA = "0xF9FA70")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700000A")]
	public static long PlaybackPosition
	{
		[Token(Token = "0x600000A")]
		[Address(RVA = "0xF9FB68", Offset = "0xF9FB68", VA = "0xF9FB68")]
		get
		{
			return default(long);
		}
		[Token(Token = "0x600000B")]
		[Address(RVA = "0xF9FC60", Offset = "0xF9FC60", VA = "0xF9FC60")]
		set
		{
		}
	}

	[Token(Token = "0x600000C")]
	[Address(RVA = "0xF9FDB8", Offset = "0xF9FDB8", VA = "0xF9FDB8")]
	public static void PlayVideo(string path, string drmLicenseUrl, IntPtr surfaceObj)
	{
	}

	[Token(Token = "0x600000D")]
	[Address(RVA = "0xF9FFC0", Offset = "0xF9FFC0", VA = "0xF9FFC0")]
	public static void Stop()
	{
	}

	[Token(Token = "0x600000E")]
	[Address(RVA = "0xFA00B8", Offset = "0xFA00B8", VA = "0xFA00B8")]
	public static void Play()
	{
	}

	[Token(Token = "0x600000F")]
	[Address(RVA = "0xFA01B0", Offset = "0xFA01B0", VA = "0xFA01B0")]
	public static void Pause()
	{
	}

	[Token(Token = "0x6000010")]
	[Address(RVA = "0xFA02A8", Offset = "0xFA02A8", VA = "0xFA02A8")]
	public static void SetPlaybackSpeed(float speed)
	{
	}

	[Token(Token = "0x6000011")]
	[Address(RVA = "0xFA0408", Offset = "0xFA0408", VA = "0xFA0408")]
	public static void SetLooping(bool looping)
	{
	}

	[Token(Token = "0x6000012")]
	[Address(RVA = "0xFA0564", Offset = "0xFA0564", VA = "0xFA0564")]
	public static void SetListenerRotation(Quaternion rotation)
	{
	}
}
[Token(Token = "0x2000005")]
public class BillboardImposter : ScriptableObject
{
	[Token(Token = "0x4000024")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int AtlasResolution;

	[Token(Token = "0x4000025")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Texture2D BaseTexture;

	[Token(Token = "0x4000026")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int Frames;

	[Token(Token = "0x4000027")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool IsHalf;

	[Token(Token = "0x4000028")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Material Material;

	[Token(Token = "0x4000029")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Mesh Mesh;

	[Token(Token = "0x400002A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Vector3 Offset;

	[Token(Token = "0x400002B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Texture2D PackTexture;

	[Token(Token = "0x400002C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject Prefab;

	[Token(Token = "0x400002D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public string PrefabSuffix;

	[Token(Token = "0x400002E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float Radius;

	[Token(Token = "0x400002F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly int SrcBlend;

	[Token(Token = "0x4000030")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static readonly int DstBlend;

	[Token(Token = "0x4000031")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static readonly int ImposterBaseTex;

	[Token(Token = "0x4000032")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static readonly int ImposterWorldNormalDepthTex;

	[Token(Token = "0x4000033")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static readonly int ImposterFrames;

	[Token(Token = "0x4000034")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private static readonly int ImposterSize;

	[Token(Token = "0x4000035")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static readonly int ImposterOffset;

	[Token(Token = "0x4000036")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private static readonly int ImposterBorderClamp;

	[Token(Token = "0x4000037")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static readonly int Metal;

	[Token(Token = "0x4000038")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private static readonly int Roughness;

	[Token(Token = "0x4000039")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static readonly int Specularity;

	[Token(Token = "0x400003A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private static readonly int SpecularHighlights;

	[Token(Token = "0x400003B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private static readonly int ImposterFullSphere;

	[Token(Token = "0x400003C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private static readonly int ImposterOriginalTexSize;

	[Token(Token = "0x6000014")]
	[Address(RVA = "0xFA07A8", Offset = "0xFA07A8", VA = "0xFA07A8")]
	public BillboardImposter()
	{
	}
}
[Token(Token = "0x2000006")]
public class SimpleTerrainTile : ScriptableObject
{
	[Token(Token = "0x400003D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Texture2DArray _texture2DArray;

	[Token(Token = "0x400003E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Texture2D[] _normalMaps;

	[Token(Token = "0x400003F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Texture2D[] _heightMaps;

	[Token(Token = "0x4000040")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Texture2D[] _textureMaps;

	[Token(Token = "0x4000041")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Texture2D[] _albedoMaps;

	[Token(Token = "0x4000042")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private int _dimension;

	[Token(Token = "0x4000043")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	private int _widthHeight;

	[Token(Token = "0x4000044")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private string path;

	[Token(Token = "0x1700000B")]
	public Texture2DArray Texture2DArray
	{
		[Token(Token = "0x6000016")]
		[Address(RVA = "0xFA0A74", Offset = "0xFA0A74", VA = "0xFA0A74")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700000C")]
	public Texture2D[] NormalMaps
	{
		[Token(Token = "0x6000017")]
		[Address(RVA = "0xFA0A7C", Offset = "0xFA0A7C", VA = "0xFA0A7C")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000018")]
		[Address(RVA = "0xFA0A84", Offset = "0xFA0A84", VA = "0xFA0A84")]
		private set
		{
		}
	}

	[Token(Token = "0x1700000D")]
	public Texture2D[] HeightMaps
	{
		[Token(Token = "0x6000019")]
		[Address(RVA = "0xFA0A8C", Offset = "0xFA0A8C", VA = "0xFA0A8C")]
		get
		{
			return null;
		}
		[Token(Token = "0x600001A")]
		[Address(RVA = "0xFA0A94", Offset = "0xFA0A94", VA = "0xFA0A94")]
		private set
		{
		}
	}

	[Token(Token = "0x1700000E")]
	public Texture2D[] TextureMaps
	{
		[Token(Token = "0x600001B")]
		[Address(RVA = "0xFA0A9C", Offset = "0xFA0A9C", VA = "0xFA0A9C")]
		get
		{
			return null;
		}
		[Token(Token = "0x600001C")]
		[Address(RVA = "0xFA0AA4", Offset = "0xFA0AA4", VA = "0xFA0AA4")]
		private set
		{
		}
	}

	[Token(Token = "0x1700000F")]
	public Texture2D[] AlbedoMaps
	{
		[Token(Token = "0x600001D")]
		[Address(RVA = "0xFA0AAC", Offset = "0xFA0AAC", VA = "0xFA0AAC")]
		get
		{
			return null;
		}
		[Token(Token = "0x600001E")]
		[Address(RVA = "0xFA0AB4", Offset = "0xFA0AB4", VA = "0xFA0AB4")]
		private set
		{
		}
	}

	[Token(Token = "0x17000010")]
	public int Dimension
	{
		[Token(Token = "0x600001F")]
		[Address(RVA = "0xFA0ABC", Offset = "0xFA0ABC", VA = "0xFA0ABC")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000020")]
		[Address(RVA = "0xFA0AC4", Offset = "0xFA0AC4", VA = "0xFA0AC4")]
		set
		{
		}
	}

	[Token(Token = "0x17000011")]
	public int WidthHeight
	{
		[Token(Token = "0x6000021")]
		[Address(RVA = "0xFA0ACC", Offset = "0xFA0ACC", VA = "0xFA0ACC")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000022")]
		[Address(RVA = "0xFA0AD4", Offset = "0xFA0AD4", VA = "0xFA0AD4")]
		private set
		{
		}
	}

	[Token(Token = "0x6000023")]
	[Address(RVA = "0xFA0ADC", Offset = "0xFA0ADC", VA = "0xFA0ADC")]
	public SimpleTerrainTile()
	{
	}
}
[Token(Token = "0x2000007")]
public enum PaddingMode
{
	[Token(Token = "0x4000046")]
	Simple,
	[Token(Token = "0x4000047")]
	Diagonal
}
[Token(Token = "0x2000008")]
public static class TextureUtils
{
	[Token(Token = "0x6000024")]
	[Address(RVA = "0xFA0AE4", Offset = "0xFA0AE4", VA = "0xFA0AE4")]
	public static void ApplyPadding(this Texture2D texture, PaddingMode paddingMode = PaddingMode.Simple, int trimIterations = 0, int maxPaddingIterations = 0)
	{
	}

	[Token(Token = "0x6000025")]
	[Address(RVA = "0xFA0F88", Offset = "0xFA0F88", VA = "0xFA0F88")]
	private static Shader LoadShader(string shaderName)
	{
		return null;
	}

	[Token(Token = "0x6000026")]
	[Address(RVA = "0xFA10BC", Offset = "0xFA10BC", VA = "0xFA10BC")]
	private static RenderTexture GetTemporaryRT(Texture2D texture)
	{
		return null;
	}

	[Token(Token = "0x6000027")]
	[Address(RVA = "0xFA1124", Offset = "0xFA1124", VA = "0xFA1124")]
	private static RenderTexture GetTemporaryRT(RenderTexture texture)
	{
		return null;
	}

	[Token(Token = "0x6000028")]
	[Address(RVA = "0xFA118C", Offset = "0xFA118C", VA = "0xFA118C")]
	public static Texture2D Clone(this Texture2D texture)
	{
		return null;
	}

	[Token(Token = "0x6000029")]
	[Address(RVA = "0xFA13BC", Offset = "0xFA13BC", VA = "0xFA13BC")]
	public static void ApplyPadding(this RenderTexture texture, PaddingMode paddingMode = PaddingMode.Simple, int trimIterations = 0, int maxPaddingIterations = 0)
	{
	}
}
[Token(Token = "0x2000009")]
public class VerTexAnimData : ScriptableObject
{
	[Token(Token = "0x4000048")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Texture2D _dataTexture;

	[Token(Token = "0x4000049")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Texture2D _data2Texture;

	[Token(Token = "0x400004A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Texture2D _data3Texture;

	[Token(Token = "0x400004B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Mesh _mesh;

	[Token(Token = "0x400004C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Material _material;

	[Token(Token = "0x400004D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private int _frames;

	[Token(Token = "0x400004E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	private int _vertexCount;

	[Token(Token = "0x400004F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private float _framerate;

	[Token(Token = "0x4000050")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[SerializeField]
	private float _duration;

	[Token(Token = "0x4000051")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private float _debugPlayback;

	[Token(Token = "0x4000052")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[SerializeField]
	private bool _interpolation;

	[Token(Token = "0x4000053")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
	[SerializeField]
	private bool _rotateToVelocity;

	[Token(Token = "0x17000012")]
	public Mesh Mesh
	{
		[Token(Token = "0x600002A")]
		[Address(RVA = "0xFA17EC", Offset = "0xFA17EC", VA = "0xFA17EC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000013")]
	public int Frames
	{
		[Token(Token = "0x600002B")]
		[Address(RVA = "0xFA17F4", Offset = "0xFA17F4", VA = "0xFA17F4")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000014")]
	public int VertexCount
	{
		[Token(Token = "0x600002C")]
		[Address(RVA = "0xFA17FC", Offset = "0xFA17FC", VA = "0xFA17FC")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000015")]
	public float Duration
	{
		[Token(Token = "0x600002D")]
		[Address(RVA = "0xFA1804", Offset = "0xFA1804", VA = "0xFA1804")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000016")]
	public float Framerate
	{
		[Token(Token = "0x600002E")]
		[Address(RVA = "0xFA180C", Offset = "0xFA180C", VA = "0xFA180C")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000017")]
	public Texture2D PositionTexture
	{
		[Token(Token = "0x600002F")]
		[Address(RVA = "0xFA1814", Offset = "0xFA1814", VA = "0xFA1814")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000018")]
	public Texture2D ExtraDataTexture
	{
		[Token(Token = "0x6000030")]
		[Address(RVA = "0xFA181C", Offset = "0xFA181C", VA = "0xFA181C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000031")]
	[Address(RVA = "0xFA1824", Offset = "0xFA1824", VA = "0xFA1824")]
	public VerTexAnimData()
	{
	}
}
[Token(Token = "0x200000A")]
[ExecuteInEditMode]
public class ShaderWindSettings : MonoBehaviour
{
	[Token(Token = "0x4000054")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("General Parameters")]
	[Tooltip("Wind Speed in Miles per hour")]
	public float WindSpeed;

	[Token(Token = "0x4000055")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Tooltip("Wind Turbulence in percentage of wind Speed")]
	[Range(0f, 2f)]
	public float Turbulence;

	[Token(Token = "0x4000056")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Header("Noise Parameters")]
	[Tooltip("Texture used for volumetric fog")]
	public Texture3D NoiseVolumeTexture;

	[Token(Token = "0x4000057")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("Texture used for wind turbulence")]
	public Texture2D NoiseTexture;

	[Token(Token = "0x4000058")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("Size of one world tiling patch of the Noise Texture, for bending trees")]
	public float FlexNoiseWorldSize;

	[Token(Token = "0x4000059")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[Tooltip("Size of one world tiling patch of the Noise Texture, for leaf shivering")]
	public float ShiverNoiseWorldSize;

	[Token(Token = "0x400005A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Tooltip("Texture used for wind gusts")]
	[Header("Gust Parameters")]
	public Texture2D GustMaskTexture;

	[Token(Token = "0x400005B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("Size of one world tiling patch of the Gust Texture, for leaf shivering")]
	public float GustWorldSize;

	[Token(Token = "0x400005C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[Tooltip("Wind Gust Speed in Miles per hour")]
	public float GustSpeed;

	[Token(Token = "0x400005D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Tooltip("Wind Gust Influence on trees")]
	public float GustScale;

	[Token(Token = "0x400005E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly int WindSettingsTexNoise;

	[Token(Token = "0x400005F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static readonly int WindSettingsTexNoiseVolume;

	[Token(Token = "0x4000060")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static readonly int WindSettingsTexGust;

	[Token(Token = "0x4000061")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static readonly int WindSettingsWorldDirectionAndSpeed;

	[Token(Token = "0x4000062")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static readonly int WindSettingsFlexNoiseScale;

	[Token(Token = "0x4000063")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private static readonly int WindSettingsShiverNoiseScale;

	[Token(Token = "0x4000064")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static readonly int WindSettingsTurbulence;

	[Token(Token = "0x4000065")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private static readonly int WindSettingsGustSpeed;

	[Token(Token = "0x4000066")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static readonly int WindSettingsGustScale;

	[Token(Token = "0x4000067")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private static readonly int WindSettingsGustWorldScale;

	[Token(Token = "0x4000068")]
	private const float mphToKph = 1.60934f;

	[Token(Token = "0x6000032")]
	[Address(RVA = "0xFA182C", Offset = "0xFA182C", VA = "0xFA182C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000033")]
	[Address(RVA = "0xFA19BC", Offset = "0xFA19BC", VA = "0xFA19BC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000034")]
	[Address(RVA = "0xFA1B30", Offset = "0xFA1B30", VA = "0xFA1B30")]
	private void Update()
	{
	}

	[Token(Token = "0x6000035")]
	[Address(RVA = "0xFA1B34", Offset = "0xFA1B34", VA = "0xFA1B34")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x6000036")]
	[Address(RVA = "0xFA1830", Offset = "0xFA1830", VA = "0xFA1830")]
	private void ApplySettings()
	{
	}

	[Token(Token = "0x6000037")]
	[Address(RVA = "0xFA19C0", Offset = "0xFA19C0", VA = "0xFA19C0")]
	private void ClearSettings()
	{
	}

	[Token(Token = "0x6000038")]
	[Address(RVA = "0xFA1B38", Offset = "0xFA1B38", VA = "0xFA1B38")]
	private Vector4 GetDirectionAndSpeed()
	{
		return default(Vector4);
	}

	[Token(Token = "0x6000039")]
	[Address(RVA = "0xFA1C48", Offset = "0xFA1C48", VA = "0xFA1C48")]
	public ShaderWindSettings()
	{
	}
}
[Token(Token = "0x200000B")]
public class AboutInfo : MonoBehaviour
{
	[Token(Token = "0x4000069")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[DrawAsHelpBox]
	public string message;

	[Token(Token = "0x400006A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[TextArea(5, 10)]
	public string notes;

	[Token(Token = "0x600003B")]
	[Address(RVA = "0xFA1E90", Offset = "0xFA1E90", VA = "0xFA1E90")]
	public AboutInfo()
	{
	}
}
[Token(Token = "0x200000C")]
[DeveloperMenuClass]
public class CenterOfMassExample : MonoBehaviour
{
	[Token(Token = "0x400006B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject referenceObject;

	[Token(Token = "0x400006C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected GameObject instanceObject;

	[Token(Token = "0x600003C")]
	[Address(RVA = "0xFA1E98", Offset = "0xFA1E98", VA = "0xFA1E98")]
	private void Start()
	{
	}

	[Token(Token = "0x600003D")]
	[Address(RVA = "0xFA1F9C", Offset = "0xFA1F9C", VA = "0xFA1F9C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600003E")]
	[Address(RVA = "0xFA1E9C", Offset = "0xFA1E9C", VA = "0xFA1E9C")]
	[DeveloperMenu("Reset Hammer", new object[] { })]
	private void ResetHammer()
	{
	}

	[Token(Token = "0x600003F")]
	[Address(RVA = "0xFA1FA0", Offset = "0xFA1FA0", VA = "0xFA1FA0")]
	public CenterOfMassExample()
	{
	}
}
[Token(Token = "0x200000D")]
[RequireComponent(typeof(LineRenderer))]
public class CenterOfMassTrail : MonoBehaviour
{
	[Token(Token = "0x400006D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private List<Vector3> m_CachedPoints;

	[Token(Token = "0x400006E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Rigidbody m_Rigidbody;

	[Token(Token = "0x400006F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private LineRenderer m_LineRenderer;

	[Token(Token = "0x4000070")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int capacity;

	[Token(Token = "0x4000071")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public int frameDelta;

	[Token(Token = "0x6000040")]
	[Address(RVA = "0xFA1FA8", Offset = "0xFA1FA8", VA = "0xFA1FA8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000041")]
	[Address(RVA = "0xFA2054", Offset = "0xFA2054", VA = "0xFA2054")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000042")]
	[Address(RVA = "0xFA21A4", Offset = "0xFA21A4", VA = "0xFA21A4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000043")]
	[Address(RVA = "0xFA21C4", Offset = "0xFA21C4", VA = "0xFA21C4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000044")]
	[Address(RVA = "0xFA2300", Offset = "0xFA2300", VA = "0xFA2300")]
	public CenterOfMassTrail()
	{
	}
}
[Token(Token = "0x200000E")]
public class ConsolePanelTest : MonoBehaviour
{
	[Token(Token = "0x4000072")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private StringBuilder _builder;

	[Token(Token = "0x4000073")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private bool _foo;

	[Token(Token = "0x4000074")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	[SerializeField]
	private bool _bar;

	[Token(Token = "0x4000075")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	[Range(0f, 1f)]
	private float _rangedFloat;

	[Token(Token = "0x4000076")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float _unboundFloat;

	[Token(Token = "0x4000077")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Range(-100f, 100f)]
	[SerializeField]
	private int _rangedInt;

	[Token(Token = "0x4000078")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private int _unboundInt;

	[Token(Token = "0x4000079")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	private RichTextStyle _style;

	[Token(Token = "0x400007A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private List<int> _randomValues;

	[Token(Token = "0x6000045")]
	[Address(RVA = "0xFA2310", Offset = "0xFA2310", VA = "0xFA2310")]
	private void Update()
	{
	}

	[Token(Token = "0x6000046")]
	[Address(RVA = "0xFA29C0", Offset = "0xFA29C0", VA = "0xFA29C0")]
	public ConsolePanelTest()
	{
	}
}
[Token(Token = "0x200000F")]
public class ExampleVRGUIPanel : VROnGUIPanel
{
	[Token(Token = "0x400007B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[TextArea]
	public string exampleText;

	[Token(Token = "0x6000047")]
	[Address(RVA = "0xFA2A84", Offset = "0xFA2A84", VA = "0xFA2A84", Slot = "5")]
	protected override string GetPath()
	{
		return null;
	}

	[Token(Token = "0x6000048")]
	[Address(RVA = "0xFA2AC4", Offset = "0xFA2AC4", VA = "0xFA2AC4", Slot = "4")]
	protected override string GetName()
	{
		return null;
	}

	[Token(Token = "0x6000049")]
	[Address(RVA = "0xFA2B04", Offset = "0xFA2B04", VA = "0xFA2B04")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x600004A")]
	[Address(RVA = "0xFA2BA8", Offset = "0xFA2BA8", VA = "0xFA2BA8")]
	public ExampleVRGUIPanel()
	{
	}
}
[Token(Token = "0x2000010")]
public class FadeExample : MonoBehaviour
{
	[Token(Token = "0x600004B")]
	[Address(RVA = "0xFA2C00", Offset = "0xFA2C00", VA = "0xFA2C00")]
	public void SetR(float r)
	{
	}

	[Token(Token = "0x600004C")]
	[Address(RVA = "0xFA2E2C", Offset = "0xFA2E2C", VA = "0xFA2E2C")]
	public void SetG(float g)
	{
	}

	[Token(Token = "0x600004D")]
	[Address(RVA = "0xFA3058", Offset = "0xFA3058", VA = "0xFA3058")]
	public void SetB(float b)
	{
	}

	[Token(Token = "0x600004E")]
	[Address(RVA = "0xFA3284", Offset = "0xFA3284", VA = "0xFA3284")]
	public void SetA(float a)
	{
	}

	[Token(Token = "0x600004F")]
	[Address(RVA = "0xFA34B0", Offset = "0xFA34B0", VA = "0xFA34B0")]
	public FadeExample()
	{
	}
}
[Token(Token = "0x2000011")]
[DeveloperMenuClass]
public class InputModulesExample : MonoBehaviour
{
	[Token(Token = "0x2000012")]
	public enum ModuleType
	{
		[Token(Token = "0x4000080")]
		Raycast,
		[Token(Token = "0x4000081")]
		Trigger
	}

	[Token(Token = "0x2000013")]
	[CompilerGenerated]
	private sealed class <Start>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000082")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000083")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000084")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InputModulesExample <>4__this;

		[Token(Token = "0x17000019")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600005E")]
			[Address(RVA = "0xFA419C", Offset = "0xFA419C", VA = "0xFA419C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700001A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000060")]
			[Address(RVA = "0xFA41E4", Offset = "0xFA41E4", VA = "0xFA41E4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600005B")]
		[Address(RVA = "0xFA352C", Offset = "0xFA352C", VA = "0xFA352C")]
		[DebuggerHidden]
		public <Start>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x600005C")]
		[Address(RVA = "0xFA3B98", Offset = "0xFA3B98", VA = "0xFA3B98", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600005D")]
		[Address(RVA = "0xFA3B9C", Offset = "0xFA3B9C", VA = "0xFA3B9C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600005F")]
		[Address(RVA = "0xFA41A4", Offset = "0xFA41A4", VA = "0xFA41A4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400007C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ModuleType initialModuleType;

	[Token(Token = "0x400007D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected TrackedColliderInputModule[] m_TrackedColliderInputModules;

	[Token(Token = "0x400007E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected RaycastInputModule[] m_RaycastInputModules;

	[Token(Token = "0x6000050")]
	[Address(RVA = "0xFA34B8", Offset = "0xFA34B8", VA = "0xFA34B8")]
	[IteratorStateMachine(typeof(<Start>d__4))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x6000051")]
	[Address(RVA = "0xFA3554", Offset = "0xFA3554", VA = "0xFA3554")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000052")]
	[Address(RVA = "0xFA3558", Offset = "0xFA3558", VA = "0xFA3558")]
	[DeveloperMenu("Input Module Example/Left Controller/Activate {0}", new object[] { VRController.DeviceHand.Left })]
	[DeveloperMenu("Input Module Example/Right Controller/Activate {0}", new object[] { VRController.DeviceHand.Right })]
	public void ToggleInputModule(VRController.DeviceHand deviceHand)
	{
	}

	[Token(Token = "0x6000053")]
	[Address(RVA = "0xFA3614", Offset = "0xFA3614", VA = "0xFA3614")]
	public string ToggleInputModule_GetName(DeveloperMenuAttribute attr)
	{
		return null;
	}

	[Token(Token = "0x6000054")]
	[Address(RVA = "0xFA3710", Offset = "0xFA3710", VA = "0xFA3710")]
	[DeveloperMenu("Input Module Example/Right Controller/Set Attach Mode {0}", new object[] { VRController.DeviceHand.Right })]
	[DeveloperMenu("Input Module Example/Left Controller/Set Attach Mode {0}", new object[] { VRController.DeviceHand.Left })]
	public void ToggleRaycastAttachMode(VRController.DeviceHand deviceHand)
	{
	}

	[Token(Token = "0x6000055")]
	[Address(RVA = "0xFA3764", Offset = "0xFA3764", VA = "0xFA3764")]
	public string ToggleRaycastAttachMode_GetName(DeveloperMenuAttribute attr)
	{
		return null;
	}

	[Token(Token = "0x6000056")]
	[Address(RVA = "0xFA3860", Offset = "0xFA3860", VA = "0xFA3860")]
	[DeveloperMenu("Input Module Example/Left Controller/Set Selection Mode {0}", new object[] { VRController.DeviceHand.Left })]
	[DeveloperMenu("Input Module Example/Right Controller/Set Selection Mode {0}", new object[] { VRController.DeviceHand.Right })]
	public void ToggleRaycastSelectMode(VRController.DeviceHand deviceHand)
	{
	}

	[Token(Token = "0x6000057")]
	[Address(RVA = "0xFA38B4", Offset = "0xFA38B4", VA = "0xFA38B4")]
	public string ToggleRaycastSelectMode_GetName(DeveloperMenuAttribute attr)
	{
		return null;
	}

	[Token(Token = "0x6000058")]
	[Address(RVA = "0xFA39B0", Offset = "0xFA39B0", VA = "0xFA39B0")]
	[DeveloperMenu("Input Module Example/Left Controller/Turn Ray Blocking Objects {0}", new object[] { VRController.DeviceHand.Left })]
	[DeveloperMenu("Input Module Example/Right Controller/Turn Ray Blocking Objects {0}", new object[] { VRController.DeviceHand.Right })]
	public void ToggleRaycastBlockingObjects(VRController.DeviceHand deviceHand)
	{
	}

	[Token(Token = "0x6000059")]
	[Address(RVA = "0xFA3A00", Offset = "0xFA3A00", VA = "0xFA3A00")]
	public string ToggleRaycastBlockingObjects_GetName(DeveloperMenuAttribute attr)
	{
		return null;
	}

	[Token(Token = "0x600005A")]
	[Address(RVA = "0xFA3AFC", Offset = "0xFA3AFC", VA = "0xFA3AFC")]
	public InputModulesExample()
	{
	}
}
[Token(Token = "0x2000014")]
public class PhysicsChainTest : MonoBehaviour
{
	[Token(Token = "0x4000085")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform[] links;

	[Token(Token = "0x4000086")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public LineRenderer line;

	[Token(Token = "0x6000061")]
	[Address(RVA = "0xFA41EC", Offset = "0xFA41EC", VA = "0xFA41EC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000062")]
	[Address(RVA = "0xFA4214", Offset = "0xFA4214", VA = "0xFA4214")]
	private void Update()
	{
	}

	[Token(Token = "0x6000063")]
	[Address(RVA = "0xFA4298", Offset = "0xFA4298", VA = "0xFA4298")]
	public PhysicsChainTest()
	{
	}
}
[Token(Token = "0x2000015")]
public class PitchingCannon : MonoBehaviour
{
	[Token(Token = "0x2000016")]
	[CompilerGenerated]
	private sealed class <PitchCoroutine>d__8 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400008D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400008E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400008F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PitchingCannon <>4__this;

		[Token(Token = "0x4000090")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private WaitForSeconds <waitForCooldown>5__2;

		[Token(Token = "0x1700001B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600006C")]
			[Address(RVA = "0xFA479C", Offset = "0xFA479C", VA = "0xFA479C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700001C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600006E")]
			[Address(RVA = "0xFA47E4", Offset = "0xFA47E4", VA = "0xFA47E4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000069")]
		[Address(RVA = "0xFA43BC", Offset = "0xFA43BC", VA = "0xFA43BC")]
		[DebuggerHidden]
		public <PitchCoroutine>d__8(int <>1__state)
		{
		}

		[Token(Token = "0x600006A")]
		[Address(RVA = "0xFA46C8", Offset = "0xFA46C8", VA = "0xFA46C8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600006B")]
		[Address(RVA = "0xFA46CC", Offset = "0xFA46CC", VA = "0xFA46CC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600006D")]
		[Address(RVA = "0xFA47A4", Offset = "0xFA47A4", VA = "0xFA47A4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000087")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject prefab;

	[Token(Token = "0x4000088")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float cooldown;

	[Token(Token = "0x4000089")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float speed;

	[Token(Token = "0x400008A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Vector3 exitNoise;

	[Token(Token = "0x400008B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float lifetime;

	[Token(Token = "0x400008C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Coroutine pitchCoroutine;

	[Token(Token = "0x6000064")]
	[Address(RVA = "0xFA42A0", Offset = "0xFA42A0", VA = "0xFA42A0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000065")]
	[Address(RVA = "0xFA4378", Offset = "0xFA4378", VA = "0xFA4378")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000066")]
	[Address(RVA = "0xFA4304", Offset = "0xFA4304", VA = "0xFA4304")]
	[IteratorStateMachine(typeof(<PitchCoroutine>d__8))]
	private IEnumerator PitchCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000067")]
	[Address(RVA = "0xFA43E4", Offset = "0xFA43E4", VA = "0xFA43E4")]
	private void Fire()
	{
	}

	[Token(Token = "0x6000068")]
	[Address(RVA = "0xFA4658", Offset = "0xFA4658", VA = "0xFA4658")]
	public PitchingCannon()
	{
	}
}
[Token(Token = "0x2000017")]
[DeveloperMenuClass]
public class PlayAreaScalingExample : MonoBehaviour
{
	[Token(Token = "0x4000091")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Range(0f, 0.1f)]
	public float scaleSpeed;

	[Token(Token = "0x4000092")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float minScale;

	[Token(Token = "0x4000093")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float maxScale;

	[Token(Token = "0x4000094")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Range(-0.01f, 0.01f)]
	public float m_CurrentSpeed;

	[Token(Token = "0x4000095")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private VRPlayer m_Player;

	[Token(Token = "0x4000096")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Tween m_CurrentTween;

	[Token(Token = "0x4000097")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Text outputText;

	[Token(Token = "0x600006F")]
	[Address(RVA = "0xFA47EC", Offset = "0xFA47EC", VA = "0xFA47EC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000070")]
	[Address(RVA = "0xFA4864", Offset = "0xFA4864", VA = "0xFA4864")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000071")]
	[Address(RVA = "0xFA4868", Offset = "0xFA4868", VA = "0xFA4868")]
	private void Update()
	{
	}

	[Token(Token = "0x6000072")]
	[Address(RVA = "0xFA4A28", Offset = "0xFA4A28", VA = "0xFA4A28")]
	[DeveloperMenu("Scaling Example/Reset Scale", new object[] { })]
	private void ResetScale()
	{
	}

	[Token(Token = "0x6000073")]
	[Address(RVA = "0xFA4A90", Offset = "0xFA4A90", VA = "0xFA4A90")]
	[DeveloperMenu("Scaling Example/{0} Scaling Up", new object[] { }, _parameters = new object[] { 1 })]
	[DeveloperMenu("Scaling Example/{0} Scaling Down", new object[] { }, _parameters = new object[] { -1 })]
	public void Scale(int direction)
	{
	}

	[Token(Token = "0x6000074")]
	[Address(RVA = "0xFA4AC0", Offset = "0xFA4AC0", VA = "0xFA4AC0")]
	public string Scale_GetName(DeveloperMenuAttribute attribute)
	{
		return null;
	}

	[Token(Token = "0x6000075")]
	[Address(RVA = "0xFA4BB4", Offset = "0xFA4BB4", VA = "0xFA4BB4")]
	public bool Scale_Validate(DeveloperMenuAttribute attribute)
	{
		return default(bool);
	}

	[Token(Token = "0x6000076")]
	[Address(RVA = "0xFA4D34", Offset = "0xFA4D34", VA = "0xFA4D34")]
	[DeveloperMenu("Scaling Example/Animate Up", new object[] { 10f })]
	[DeveloperMenu("Scaling Example/Animate Down", new object[] { 0.25f })]
	public void AnimateScale(float amount)
	{
	}

	[Token(Token = "0x6000077")]
	[Address(RVA = "0xFA4F28", Offset = "0xFA4F28", VA = "0xFA4F28")]
	public PlayAreaScalingExample()
	{
	}
}
[Token(Token = "0x2000019")]
public class Rotate : MonoBehaviour
{
	[Token(Token = "0x400009A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float rotationSpeed;

	[Token(Token = "0x600007B")]
	[Address(RVA = "0xFA51F4", Offset = "0xFA51F4", VA = "0xFA51F4")]
	private void Update()
	{
	}

	[Token(Token = "0x600007C")]
	[Address(RVA = "0xFA5290", Offset = "0xFA5290", VA = "0xFA5290")]
	public Rotate()
	{
	}
}
[Token(Token = "0x200001A")]
public class SlenderController : MonoBehaviour
{
	[Token(Token = "0x400009B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform target;

	[Token(Token = "0x400009C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float m_ApproachSpeed;

	[Token(Token = "0x400009D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private float m_ApproachDistance;

	[Token(Token = "0x400009E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private bool m_MoveEnabled;

	[Token(Token = "0x400009F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Renderer[] renderers;

	[Token(Token = "0x1700001D")]
	public float ApproachSpeed
	{
		[Token(Token = "0x600007D")]
		[Address(RVA = "0xFA5298", Offset = "0xFA5298", VA = "0xFA5298")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600007E")]
		[Address(RVA = "0xFA52A0", Offset = "0xFA52A0", VA = "0xFA52A0")]
		set
		{
		}
	}

	[Token(Token = "0x1700001E")]
	public float ApproachDistance
	{
		[Token(Token = "0x600007F")]
		[Address(RVA = "0xFA52A8", Offset = "0xFA52A8", VA = "0xFA52A8")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000080")]
		[Address(RVA = "0xFA52B0", Offset = "0xFA52B0", VA = "0xFA52B0")]
		set
		{
		}
	}

	[Token(Token = "0x1700001F")]
	public bool MoveEnabled
	{
		[Token(Token = "0x6000081")]
		[Address(RVA = "0xFA52B8", Offset = "0xFA52B8", VA = "0xFA52B8")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000082")]
		[Address(RVA = "0xFA52C0", Offset = "0xFA52C0", VA = "0xFA52C0")]
		set
		{
		}
	}

	[Token(Token = "0x6000083")]
	[Address(RVA = "0xFA52CC", Offset = "0xFA52CC", VA = "0xFA52CC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000084")]
	[Address(RVA = "0xFA52D0", Offset = "0xFA52D0", VA = "0xFA52D0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000085")]
	[Address(RVA = "0xFA52E0", Offset = "0xFA52E0", VA = "0xFA52E0")]
	private void ApproachTarget()
	{
	}

	[Token(Token = "0x6000086")]
	[Address(RVA = "0xFA56B0", Offset = "0xFA56B0", VA = "0xFA56B0")]
	public void ToggleRenderersEnabled()
	{
	}

	[Token(Token = "0x6000087")]
	[Address(RVA = "0xFA5728", Offset = "0xFA5728", VA = "0xFA5728")]
	public SlenderController()
	{
	}
}
[Token(Token = "0x200001B")]
[RequireComponent(typeof(TrackedProp))]
public class TelevisionRemote : MonoBehaviour
{
	[Token(Token = "0x200001C")]
	public enum TurnOnFunction
	{
		[Token(Token = "0x40000AD")]
		FromBeginning,
		[Token(Token = "0x40000AE")]
		Resume,
		[Token(Token = "0x40000AF")]
		AlwaysPlayingInBackground
	}

	[Token(Token = "0x200001D")]
	[CompilerGenerated]
	private sealed class <UpdateDynamicGI>d__20 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40000B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40000B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40000B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TelevisionRemote <>4__this;

		[Token(Token = "0x17000020")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000094")]
			[Address(RVA = "0xFA5DE4", Offset = "0xFA5DE4", VA = "0xFA5DE4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000021")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000096")]
			[Address(RVA = "0xFA5E2C", Offset = "0xFA5E2C", VA = "0xFA5E2C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000091")]
		[Address(RVA = "0xFA5CF0", Offset = "0xFA5CF0", VA = "0xFA5CF0")]
		[DebuggerHidden]
		public <UpdateDynamicGI>d__20(int <>1__state)
		{
		}

		[Token(Token = "0x6000092")]
		[Address(RVA = "0xFA5D34", Offset = "0xFA5D34", VA = "0xFA5D34", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000093")]
		[Address(RVA = "0xFA5D38", Offset = "0xFA5D38", VA = "0xFA5D38", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000095")]
		[Address(RVA = "0xFA5DEC", Offset = "0xFA5DEC", VA = "0xFA5DEC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40000A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[RewiredAction]
	public int powerButtonAction;

	[Token(Token = "0x40000A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MeshRenderer televisionScreen;

	[Token(Token = "0x40000A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public VideoPlayer videoPlayer;

	[Token(Token = "0x40000A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Material m_TelevisionMaterial;

	[Token(Token = "0x40000A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private TrackedProp m_TrackedProp;

	[Token(Token = "0x40000A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool m_WasOn;

	[Token(Token = "0x40000A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	private bool m_IsOn;

	[Token(Token = "0x40000A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Player m_InputPlayer;

	[Token(Token = "0x40000A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private IEffector m_Effector;

	[Token(Token = "0x40000A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Range(0f, 1f)]
	public float hapticStrength;

	[Token(Token = "0x40000AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[Range(0f, 1f)]
	public float hapticDuration;

	[Token(Token = "0x40000AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public TurnOnFunction turnOnFunction;

	[Token(Token = "0x6000088")]
	[Address(RVA = "0xFA573C", Offset = "0xFA573C", VA = "0xFA573C")]
	public void Awake()
	{
	}

	[Token(Token = "0x6000089")]
	[Address(RVA = "0xFA5910", Offset = "0xFA5910", VA = "0xFA5910")]
	private void OnLastGrabEnd(IEffector effector, Prop prop)
	{
	}

	[Token(Token = "0x600008A")]
	[Address(RVA = "0xFA5978", Offset = "0xFA5978", VA = "0xFA5978")]
	private void OnFirstGrabStart(IEffector effector, Prop prop)
	{
	}

	[Token(Token = "0x600008B")]
	[Address(RVA = "0xFA59CC", Offset = "0xFA59CC", VA = "0xFA59CC")]
	private void Update()
	{
	}

	[Token(Token = "0x600008C")]
	[Address(RVA = "0xFA5C0C", Offset = "0xFA5C0C", VA = "0xFA5C0C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600008D")]
	[Address(RVA = "0xFA5B60", Offset = "0xFA5B60", VA = "0xFA5B60")]
	private void PerformHaptic()
	{
	}

	[Token(Token = "0x600008E")]
	[Address(RVA = "0xFA5A10", Offset = "0xFA5A10", VA = "0xFA5A10")]
	private void TogglePower()
	{
	}

	[Token(Token = "0x600008F")]
	[Address(RVA = "0xFA5C7C", Offset = "0xFA5C7C", VA = "0xFA5C7C")]
	[IteratorStateMachine(typeof(<UpdateDynamicGI>d__20))]
	private IEnumerator UpdateDynamicGI()
	{
		return null;
	}

	[Token(Token = "0x6000090")]
	[Address(RVA = "0xFA5D18", Offset = "0xFA5D18", VA = "0xFA5D18")]
	public TelevisionRemote()
	{
	}
}
[Token(Token = "0x200001E")]
[RequireComponent(typeof(Light))]
public class ToggleLight : MonoBehaviour
{
	[Token(Token = "0x40000B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected Light m_Light;

	[Token(Token = "0x6000097")]
	[Address(RVA = "0xFA5E34", Offset = "0xFA5E34", VA = "0xFA5E34")]
	public void Toggle()
	{
	}

	[Token(Token = "0x6000098")]
	[Address(RVA = "0xFA5F00", Offset = "0xFA5F00", VA = "0xFA5F00")]
	public ToggleLight()
	{
	}
}
[Token(Token = "0x200001F")]
[RequireComponent(typeof(MeshRenderer))]
public class ToggleMaterial : MonoBehaviour
{
	[Token(Token = "0x40000B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected MeshRenderer m_MeshRenderer;

	[Token(Token = "0x40000B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Material materialA;

	[Token(Token = "0x40000B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Material materialB;

	[Token(Token = "0x6000099")]
	[Address(RVA = "0xFA5F08", Offset = "0xFA5F08", VA = "0xFA5F08")]
	[ContextMenu("Toggle")]
	public void Toggle()
	{
	}

	[Token(Token = "0x600009A")]
	[Address(RVA = "0xFA6014", Offset = "0xFA6014", VA = "0xFA6014")]
	public ToggleMaterial()
	{
	}
}
[Token(Token = "0x2000020")]
[RequireComponent(typeof(MeshRenderer))]
public class ToggleMeshRenderer : MonoBehaviour
{
	[Token(Token = "0x40000B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected MeshRenderer m_MeshRenderer;

	[Token(Token = "0x600009B")]
	[Address(RVA = "0xFA601C", Offset = "0xFA601C", VA = "0xFA601C")]
	public void Toggle()
	{
	}

	[Token(Token = "0x600009C")]
	[Address(RVA = "0xFA60E8", Offset = "0xFA60E8", VA = "0xFA60E8")]
	public ToggleMeshRenderer()
	{
	}
}
[Token(Token = "0x2000021")]
public class TurbulenceExample : MonoBehaviour
{
	[Token(Token = "0x40000B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public VRCameraTurbulence cameraTurbulence;

	[Token(Token = "0x40000B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float maxAmplitude;

	[Token(Token = "0x40000BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float maxSpeed;

	[Token(Token = "0x600009D")]
	[Address(RVA = "0xFA60F0", Offset = "0xFA60F0", VA = "0xFA60F0")]
	public void SetAmplitude(float normalizedAmplitude)
	{
	}

	[Token(Token = "0x600009E")]
	[Address(RVA = "0xFA612C", Offset = "0xFA612C", VA = "0xFA612C")]
	public void SetSpeed(float normalizedSpeed)
	{
	}

	[Token(Token = "0x600009F")]
	[Address(RVA = "0xFA6168", Offset = "0xFA6168", VA = "0xFA6168")]
	public void SetWeight(float normalizedWeight)
	{
	}

	[Token(Token = "0x60000A0")]
	[Address(RVA = "0xFA6184", Offset = "0xFA6184", VA = "0xFA6184")]
	public void SetTurbulenceX(float x)
	{
	}

	[Token(Token = "0x60000A1")]
	[Address(RVA = "0xFA61A0", Offset = "0xFA61A0", VA = "0xFA61A0")]
	public void SetTurbulenceY(float y)
	{
	}

	[Token(Token = "0x60000A2")]
	[Address(RVA = "0xFA61BC", Offset = "0xFA61BC", VA = "0xFA61BC")]
	public void SetTurbulenceZ(float z)
	{
	}

	[Token(Token = "0x60000A3")]
	[Address(RVA = "0xFA61D8", Offset = "0xFA61D8", VA = "0xFA61D8")]
	public TurbulenceExample()
	{
	}
}
[Token(Token = "0x2000022")]
[DeveloperMenuClass]
public class UIInputExample : MonoBehaviour
{
	[Token(Token = "0x40000BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[DrawAsHelpBox]
	[SerializeField]
	private string description;

	[Token(Token = "0x40000BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public VRGraphicRaycaster raycaster;

	[Token(Token = "0x60000A4")]
	[Address(RVA = "0xFA61EC", Offset = "0xFA61EC", VA = "0xFA61EC")]
	[DeveloperMenu("UI Example/Raycaster/Set Blocking Mode {0}", new object[] { GraphicRaycaster.BlockingObjects.All })]
	[DeveloperMenu("UI Example/Raycaster/Set Blocking Mode {0}", new object[] { GraphicRaycaster.BlockingObjects.ThreeD })]
	[DeveloperMenu("UI Example/Raycaster/Set Blocking Mode {0}", new object[] { GraphicRaycaster.BlockingObjects.TwoD })]
	[DeveloperMenu("UI Example/Raycaster/Set Blocking Mode {0}", new object[] { GraphicRaycaster.BlockingObjects.None })]
	public void SwitchBlockingMode(GraphicRaycaster.BlockingObjects blockingObjectMode)
	{
	}

	[Token(Token = "0x60000A5")]
	[Address(RVA = "0xFA6208", Offset = "0xFA6208", VA = "0xFA6208")]
	public string SwitchBlockingMode_GetName(DeveloperMenuAttribute attribute)
	{
		return null;
	}

	[Token(Token = "0x60000A6")]
	[Address(RVA = "0xFA6254", Offset = "0xFA6254", VA = "0xFA6254")]
	public bool SwitchBlockingMode_Validate(DeveloperMenuAttribute attribute)
	{
		return default(bool);
	}

	[Token(Token = "0x60000A7")]
	[Address(RVA = "0xFA62F4", Offset = "0xFA62F4", VA = "0xFA62F4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000A8")]
	[Address(RVA = "0xFA62F8", Offset = "0xFA62F8", VA = "0xFA62F8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60000A9")]
	[Address(RVA = "0xFA62FC", Offset = "0xFA62FC", VA = "0xFA62FC")]
	public UIInputExample()
	{
	}
}
[Serializable]
[Token(Token = "0x2000023")]
public class LightControlBehaviour : PlayableBehaviour
{
	[Token(Token = "0x40000BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Color color;

	[Token(Token = "0x40000BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float intensity;

	[Token(Token = "0x40000BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float bounceIntensity;

	[Token(Token = "0x40000C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float range;

	[Token(Token = "0x60000AA")]
	[Address(RVA = "0xFA6304", Offset = "0xFA6304", VA = "0xFA6304")]
	public LightControlBehaviour()
	{
	}
}
[Serializable]
[Token(Token = "0x2000024")]
public class LightControlClip : PlayableAsset, ITimelineClipAsset
{
	[Token(Token = "0x40000C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LightControlBehaviour template;

	[Token(Token = "0x17000022")]
	public ClipCaps clipCaps
	{
		[Token(Token = "0x60000AB")]
		[Address(RVA = "0xFA6324", Offset = "0xFA6324", VA = "0xFA6324", Slot = "9")]
		get
		{
			return default(ClipCaps);
		}
	}

	[Token(Token = "0x60000AC")]
	[Address(RVA = "0xFA632C", Offset = "0xFA632C", VA = "0xFA632C", Slot = "6")]
	public override Playable CreatePlayable(PlayableGraph graph, GameObject owner)
	{
		return default(Playable);
	}

	[Token(Token = "0x60000AD")]
	[Address(RVA = "0xFA63D4", Offset = "0xFA63D4", VA = "0xFA63D4")]
	public LightControlClip()
	{
	}
}
[Token(Token = "0x2000025")]
public class LightControlMixerBehaviour : PlayableBehaviour
{
	[Token(Token = "0x40000C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Color m_DefaultColor;

	[Token(Token = "0x40000C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float m_DefaultIntensity;

	[Token(Token = "0x40000C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float m_DefaultBounceIntensity;

	[Token(Token = "0x40000C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float m_DefaultRange;

	[Token(Token = "0x40000C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Light m_TrackBinding;

	[Token(Token = "0x40000C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool m_FirstFrameHappened;

	[Token(Token = "0x60000AE")]
	[Address(RVA = "0xFA6460", Offset = "0xFA6460", VA = "0xFA6460", Slot = "20")]
	public override void ProcessFrame(Playable playable, FrameData info, object playerData)
	{
	}

	[Token(Token = "0x60000AF")]
	[Address(RVA = "0xFA6828", Offset = "0xFA6828", VA = "0xFA6828", Slot = "16")]
	public override void OnPlayableDestroy(Playable playable)
	{
	}

	[Token(Token = "0x60000B0")]
	[Address(RVA = "0xFA68F4", Offset = "0xFA68F4", VA = "0xFA68F4")]
	public LightControlMixerBehaviour()
	{
	}
}
[Token(Token = "0x2000026")]
[TrackBindingType(typeof(Light))]
[TrackColor(0.9454092f, 0.9779412f, 0.3883002f)]
[TrackClipType(typeof(LightControlClip))]
public class LightControlTrack : TrackAsset
{
	[Token(Token = "0x60000B1")]
	[Address(RVA = "0xFA68FC", Offset = "0xFA68FC", VA = "0xFA68FC", Slot = "24")]
	public override Playable CreateTrackMixer(PlayableGraph graph, GameObject go, int inputCount)
	{
		return default(Playable);
	}

	[Token(Token = "0x60000B2")]
	[Address(RVA = "0xFA699C", Offset = "0xFA699C", VA = "0xFA699C", Slot = "29")]
	public override void GatherProperties(PlayableDirector director, IPropertyCollector driver)
	{
	}

	[Token(Token = "0x60000B3")]
	[Address(RVA = "0xFA69A4", Offset = "0xFA69A4", VA = "0xFA69A4")]
	public LightControlTrack()
	{
	}
}
[Serializable]
[Token(Token = "0x2000027")]
public class NavMeshAgentControlBehaviour : PlayableBehaviour
{
	[Token(Token = "0x40000C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Transform destination;

	[Token(Token = "0x40000C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool destinationSet;

	[Token(Token = "0x60000B4")]
	[Address(RVA = "0xFA69FC", Offset = "0xFA69FC", VA = "0xFA69FC", Slot = "15")]
	public override void OnPlayableCreate(Playable playable)
	{
	}

	[Token(Token = "0x60000B5")]
	[Address(RVA = "0xFA6A04", Offset = "0xFA6A04", VA = "0xFA6A04")]
	public NavMeshAgentControlBehaviour()
	{
	}
}
[Serializable]
[Token(Token = "0x2000028")]
public class NavMeshAgentControlClip : PlayableAsset, ITimelineClipAsset
{
	[Token(Token = "0x40000CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ExposedReference<Transform> destination;

	[Token(Token = "0x40000CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[HideInInspector]
	public NavMeshAgentControlBehaviour template;

	[Token(Token = "0x17000023")]
	public ClipCaps clipCaps
	{
		[Token(Token = "0x60000B6")]
		[Address(RVA = "0xFA6A0C", Offset = "0xFA6A0C", VA = "0xFA6A0C", Slot = "9")]
		get
		{
			return default(ClipCaps);
		}
	}

	[Token(Token = "0x60000B7")]
	[Address(RVA = "0xFA6A14", Offset = "0xFA6A14", VA = "0xFA6A14", Slot = "6")]
	public override Playable CreatePlayable(PlayableGraph graph, GameObject owner)
	{
		return default(Playable);
	}

	[Token(Token = "0x60000B8")]
	[Address(RVA = "0xFA6B54", Offset = "0xFA6B54", VA = "0xFA6B54")]
	public NavMeshAgentControlClip()
	{
	}
}
[Token(Token = "0x2000029")]
public class NavMeshAgentControlMixerBehaviour : PlayableBehaviour
{
	[Token(Token = "0x60000B9")]
	[Address(RVA = "0xFA6BC8", Offset = "0xFA6BC8", VA = "0xFA6BC8", Slot = "20")]
	public override void ProcessFrame(Playable playable, FrameData info, object playerData)
	{
	}

	[Token(Token = "0x60000BA")]
	[Address(RVA = "0xFA6E2C", Offset = "0xFA6E2C", VA = "0xFA6E2C")]
	public NavMeshAgentControlMixerBehaviour()
	{
	}
}
[Token(Token = "0x200002A")]
[TrackClipType(typeof(NavMeshAgentControlClip))]
[TrackBindingType(typeof(NavMeshAgent))]
[TrackColor(0.855f, 0.8623f, 0.87f)]
public class NavMeshAgentControlTrack : TrackAsset
{
	[Token(Token = "0x60000BB")]
	[Address(RVA = "0xFA6E34", Offset = "0xFA6E34", VA = "0xFA6E34", Slot = "24")]
	public override Playable CreateTrackMixer(PlayableGraph graph, GameObject go, int inputCount)
	{
		return default(Playable);
	}

	[Token(Token = "0x60000BC")]
	[Address(RVA = "0xFA6ED4", Offset = "0xFA6ED4", VA = "0xFA6ED4")]
	public NavMeshAgentControlTrack()
	{
	}
}
[Serializable]
[Token(Token = "0x200002B")]
public class ScreenFaderBehaviour : PlayableBehaviour
{
	[Token(Token = "0x40000CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Color color;

	[Token(Token = "0x60000BD")]
	[Address(RVA = "0xFA6F2C", Offset = "0xFA6F2C", VA = "0xFA6F2C")]
	public ScreenFaderBehaviour()
	{
	}
}
[Serializable]
[Token(Token = "0x200002C")]
public class ScreenFaderClip : PlayableAsset, ITimelineClipAsset
{
	[Token(Token = "0x40000CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ScreenFaderBehaviour template;

	[Token(Token = "0x17000024")]
	public ClipCaps clipCaps
	{
		[Token(Token = "0x60000BE")]
		[Address(RVA = "0xFA6F40", Offset = "0xFA6F40", VA = "0xFA6F40", Slot = "9")]
		get
		{
			return default(ClipCaps);
		}
	}

	[Token(Token = "0x60000BF")]
	[Address(RVA = "0xFA6F48", Offset = "0xFA6F48", VA = "0xFA6F48", Slot = "6")]
	public override Playable CreatePlayable(PlayableGraph graph, GameObject owner)
	{
		return default(Playable);
	}

	[Token(Token = "0x60000C0")]
	[Address(RVA = "0xFA6FF0", Offset = "0xFA6FF0", VA = "0xFA6FF0")]
	public ScreenFaderClip()
	{
	}
}
[Token(Token = "0x200002D")]
public class ScreenFaderMixerBehaviour : PlayableBehaviour
{
	[Token(Token = "0x40000CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Color m_DefaultColor;

	[Token(Token = "0x40000CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Image m_TrackBinding;

	[Token(Token = "0x40000D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool m_FirstFrameHappened;

	[Token(Token = "0x60000C1")]
	[Address(RVA = "0xFA7070", Offset = "0xFA7070", VA = "0xFA7070", Slot = "20")]
	public override void ProcessFrame(Playable playable, FrameData info, object playerData)
	{
	}

	[Token(Token = "0x60000C2")]
	[Address(RVA = "0xFA73B0", Offset = "0xFA73B0", VA = "0xFA73B0", Slot = "16")]
	public override void OnPlayableDestroy(Playable playable)
	{
	}

	[Token(Token = "0x60000C3")]
	[Address(RVA = "0xFA7448", Offset = "0xFA7448", VA = "0xFA7448")]
	public ScreenFaderMixerBehaviour()
	{
	}
}
[Token(Token = "0x200002E")]
[TrackClipType(typeof(ScreenFaderClip))]
[TrackBindingType(typeof(Image))]
[TrackColor(0.875f, 0.5944853f, 0.1737132f)]
public class ScreenFaderTrack : TrackAsset
{
	[Token(Token = "0x60000C4")]
	[Address(RVA = "0xFA7450", Offset = "0xFA7450", VA = "0xFA7450", Slot = "24")]
	public override Playable CreateTrackMixer(PlayableGraph graph, GameObject go, int inputCount)
	{
		return default(Playable);
	}

	[Token(Token = "0x60000C5")]
	[Address(RVA = "0xFA74F0", Offset = "0xFA74F0", VA = "0xFA74F0", Slot = "29")]
	public override void GatherProperties(PlayableDirector director, IPropertyCollector driver)
	{
	}

	[Token(Token = "0x60000C6")]
	[Address(RVA = "0xFA74F8", Offset = "0xFA74F8", VA = "0xFA74F8")]
	public ScreenFaderTrack()
	{
	}
}
[Serializable]
[Token(Token = "0x200002F")]
public class TextSwitcherBehaviour : PlayableBehaviour
{
	[Token(Token = "0x40000D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Color color;

	[Token(Token = "0x40000D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int fontSize;

	[Token(Token = "0x40000D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string text;

	[Token(Token = "0x60000C7")]
	[Address(RVA = "0xFA7550", Offset = "0xFA7550", VA = "0xFA7550")]
	public TextSwitcherBehaviour()
	{
	}
}
[Serializable]
[Token(Token = "0x2000030")]
public class TextSwitcherClip : PlayableAsset, ITimelineClipAsset
{
	[Token(Token = "0x40000D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TextSwitcherBehaviour template;

	[Token(Token = "0x17000025")]
	public ClipCaps clipCaps
	{
		[Token(Token = "0x60000C8")]
		[Address(RVA = "0xFA7568", Offset = "0xFA7568", VA = "0xFA7568", Slot = "9")]
		get
		{
			return default(ClipCaps);
		}
	}

	[Token(Token = "0x60000C9")]
	[Address(RVA = "0xFA7570", Offset = "0xFA7570", VA = "0xFA7570", Slot = "6")]
	public override Playable CreatePlayable(PlayableGraph graph, GameObject owner)
	{
		return default(Playable);
	}

	[Token(Token = "0x60000CA")]
	[Address(RVA = "0xFA7618", Offset = "0xFA7618", VA = "0xFA7618")]
	public TextSwitcherClip()
	{
	}
}
[Token(Token = "0x2000031")]
public class TextSwitcherMixerBehaviour : PlayableBehaviour
{
	[Token(Token = "0x40000D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Color m_DefaultColor;

	[Token(Token = "0x40000D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int m_DefaultFontSize;

	[Token(Token = "0x40000D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private string m_DefaultText;

	[Token(Token = "0x40000D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Text m_TrackBinding;

	[Token(Token = "0x40000D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool m_FirstFrameHappened;

	[Token(Token = "0x60000CB")]
	[Address(RVA = "0xFA769C", Offset = "0xFA769C", VA = "0xFA769C", Slot = "20")]
	public override void ProcessFrame(Playable playable, FrameData info, object playerData)
	{
	}

	[Token(Token = "0x60000CC")]
	[Address(RVA = "0xFA7BF8", Offset = "0xFA7BF8", VA = "0xFA7BF8", Slot = "16")]
	public override void OnPlayableDestroy(Playable playable)
	{
	}

	[Token(Token = "0x60000CD")]
	[Address(RVA = "0xFA7CC0", Offset = "0xFA7CC0", VA = "0xFA7CC0")]
	public TextSwitcherMixerBehaviour()
	{
	}
}
[Token(Token = "0x2000032")]
[TrackColor(0.1394896f, 0.4411765f, 0.3413077f)]
[TrackClipType(typeof(TextSwitcherClip))]
[TrackBindingType(typeof(Text))]
public class TextSwitcherTrack : TrackAsset
{
	[Token(Token = "0x60000CE")]
	[Address(RVA = "0xFA7CC8", Offset = "0xFA7CC8", VA = "0xFA7CC8", Slot = "24")]
	public override Playable CreateTrackMixer(PlayableGraph graph, GameObject go, int inputCount)
	{
		return default(Playable);
	}

	[Token(Token = "0x60000CF")]
	[Address(RVA = "0xFA7D68", Offset = "0xFA7D68", VA = "0xFA7D68", Slot = "29")]
	public override void GatherProperties(PlayableDirector director, IPropertyCollector driver)
	{
	}

	[Token(Token = "0x60000D0")]
	[Address(RVA = "0xFA7D70", Offset = "0xFA7D70", VA = "0xFA7D70")]
	public TextSwitcherTrack()
	{
	}
}
[Serializable]
[Token(Token = "0x2000033")]
public class TimeDilationBehaviour : PlayableBehaviour
{
	[Token(Token = "0x40000DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float timeScale;

	[Token(Token = "0x60000D1")]
	[Address(RVA = "0xFA7DC8", Offset = "0xFA7DC8", VA = "0xFA7DC8")]
	public TimeDilationBehaviour()
	{
	}
}
[Serializable]
[Token(Token = "0x2000034")]
public class TimeDilationClip : PlayableAsset, ITimelineClipAsset
{
	[Token(Token = "0x40000DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TimeDilationBehaviour template;

	[Token(Token = "0x17000026")]
	public ClipCaps clipCaps
	{
		[Token(Token = "0x60000D2")]
		[Address(RVA = "0xFA7DD8", Offset = "0xFA7DD8", VA = "0xFA7DD8", Slot = "9")]
		get
		{
			return default(ClipCaps);
		}
	}

	[Token(Token = "0x60000D3")]
	[Address(RVA = "0xFA7DE0", Offset = "0xFA7DE0", VA = "0xFA7DE0", Slot = "6")]
	public override Playable CreatePlayable(PlayableGraph graph, GameObject owner)
	{
		return default(Playable);
	}

	[Token(Token = "0x60000D4")]
	[Address(RVA = "0xFA7E88", Offset = "0xFA7E88", VA = "0xFA7E88")]
	public TimeDilationClip()
	{
	}
}
[Token(Token = "0x2000035")]
public class TimeDilationMixerBehaviour : PlayableBehaviour
{
	[Token(Token = "0x40000DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private readonly float defaultTimeScale;

	[Token(Token = "0x40000DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private HashSet<int> dirtiedPlayables;

	[Token(Token = "0x60000D5")]
	[Address(RVA = "0xFA7F04", Offset = "0xFA7F04", VA = "0xFA7F04", Slot = "20")]
	public override void ProcessFrame(Playable playable, FrameData info, object playerData)
	{
	}

	[Token(Token = "0x60000D6")]
	[Address(RVA = "0xFA8248", Offset = "0xFA8248", VA = "0xFA8248", Slot = "18")]
	public override void OnBehaviourPause(Playable playable, FrameData info)
	{
	}

	[Token(Token = "0x60000D7")]
	[Address(RVA = "0xFA8378", Offset = "0xFA8378", VA = "0xFA8378", Slot = "14")]
	public override void OnGraphStop(Playable playable)
	{
	}

	[Token(Token = "0x60000D8")]
	[Address(RVA = "0xFA84A8", Offset = "0xFA84A8", VA = "0xFA84A8", Slot = "16")]
	public override void OnPlayableDestroy(Playable playable)
	{
	}

	[Token(Token = "0x60000D9")]
	[Address(RVA = "0xFA8604", Offset = "0xFA8604", VA = "0xFA8604")]
	public TimeDilationMixerBehaviour()
	{
	}
}
[Token(Token = "0x2000036")]
[TrackColor(0.855f, 0.8623f, 0.87f)]
[TrackClipType(typeof(TimeDilationClip))]
public class TimeDilationTrack : TrackAsset
{
	[Token(Token = "0x60000DA")]
	[Address(RVA = "0xFA8694", Offset = "0xFA8694", VA = "0xFA8694", Slot = "24")]
	public override Playable CreateTrackMixer(PlayableGraph graph, GameObject go, int inputCount)
	{
		return default(Playable);
	}

	[Token(Token = "0x60000DB")]
	[Address(RVA = "0xFA8734", Offset = "0xFA8734", VA = "0xFA8734")]
	public TimeDilationTrack()
	{
	}
}
[Serializable]
[Token(Token = "0x2000037")]
public class TransformTweenBehaviour : PlayableBehaviour
{
	[Token(Token = "0x2000038")]
	public enum TweenType
	{
		[Token(Token = "0x40000EB")]
		Linear,
		[Token(Token = "0x40000EC")]
		Deceleration,
		[Token(Token = "0x40000ED")]
		Harmonic,
		[Token(Token = "0x40000EE")]
		Custom
	}

	[Token(Token = "0x40000DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Transform startLocation;

	[Token(Token = "0x40000DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform endLocation;

	[Token(Token = "0x40000E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool tweenPosition;

	[Token(Token = "0x40000E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool tweenRotation;

	[Token(Token = "0x40000E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public TweenType tweenType;

	[Token(Token = "0x40000E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AnimationCurve customCurve;

	[Token(Token = "0x40000E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector3 startingPosition;

	[Token(Token = "0x40000E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public Quaternion startingRotation;

	[Token(Token = "0x40000E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private AnimationCurve m_LinearCurve;

	[Token(Token = "0x40000E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private AnimationCurve m_DecelerationCurve;

	[Token(Token = "0x40000E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private AnimationCurve m_HarmonicCurve;

	[Token(Token = "0x40000E9")]
	private const float k_RightAngleInRads = (float)Math.PI / 2f;

	[Token(Token = "0x60000DC")]
	[Address(RVA = "0xFA878C", Offset = "0xFA878C", VA = "0xFA878C", Slot = "19")]
	public override void PrepareFrame(Playable playable, FrameData info)
	{
	}

	[Token(Token = "0x60000DD")]
	[Address(RVA = "0xFA8824", Offset = "0xFA8824", VA = "0xFA8824")]
	public float EvaluateCurrentCurve(float time)
	{
		return default(float);
	}

	[Token(Token = "0x60000DE")]
	[Address(RVA = "0xFA8878", Offset = "0xFA8878", VA = "0xFA8878")]
	private bool IsCustomCurveNormalised()
	{
		return default(bool);
	}

	[Token(Token = "0x60000DF")]
	[Address(RVA = "0xFA8B1C", Offset = "0xFA8B1C", VA = "0xFA8B1C")]
	public TransformTweenBehaviour()
	{
	}
}
[Serializable]
[Token(Token = "0x2000039")]
public class TransformTweenClip : PlayableAsset, ITimelineClipAsset
{
	[Token(Token = "0x40000EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TransformTweenBehaviour template;

	[Token(Token = "0x40000F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ExposedReference<Transform> startLocation;

	[Token(Token = "0x40000F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ExposedReference<Transform> endLocation;

	[Token(Token = "0x17000027")]
	public ClipCaps clipCaps
	{
		[Token(Token = "0x60000E0")]
		[Address(RVA = "0xFA8D30", Offset = "0xFA8D30", VA = "0xFA8D30", Slot = "9")]
		get
		{
			return default(ClipCaps);
		}
	}

	[Token(Token = "0x60000E1")]
	[Address(RVA = "0xFA8D38", Offset = "0xFA8D38", VA = "0xFA8D38", Slot = "6")]
	public override Playable CreatePlayable(PlayableGraph graph, GameObject owner)
	{
		return default(Playable);
	}

	[Token(Token = "0x60000E2")]
	[Address(RVA = "0xFA8EA8", Offset = "0xFA8EA8", VA = "0xFA8EA8")]
	public TransformTweenClip()
	{
	}
}
[Token(Token = "0x200003A")]
public class TransformTweenMixerBehaviour : PlayableBehaviour
{
	[Token(Token = "0x40000F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private bool[] m_FirstFrameHappened;

	[Token(Token = "0x60000E3")]
	[Address(RVA = "0xFA8F18", Offset = "0xFA8F18", VA = "0xFA8F18", Slot = "20")]
	public override void ProcessFrame(Playable playable, FrameData info, object playerData)
	{
	}

	[Token(Token = "0x60000E4")]
	[Address(RVA = "0xFA9724", Offset = "0xFA9724", VA = "0xFA9724", Slot = "16")]
	public override void OnPlayableDestroy(Playable playable)
	{
	}

	[Token(Token = "0x60000E5")]
	[Address(RVA = "0xFA9730", Offset = "0xFA9730", VA = "0xFA9730", Slot = "18")]
	public override void OnBehaviourPause(Playable playable, FrameData info)
	{
	}

	[Token(Token = "0x60000E6")]
	[Address(RVA = "0xFA973C", Offset = "0xFA973C", VA = "0xFA973C", Slot = "15")]
	public override void OnPlayableCreate(Playable playable)
	{
	}

	[Token(Token = "0x60000E7")]
	[Address(RVA = "0xFA9710", Offset = "0xFA9710", VA = "0xFA9710")]
	private static Quaternion AddQuaternions(Quaternion first, Quaternion second)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x60000E8")]
	[Address(RVA = "0xFA96FC", Offset = "0xFA96FC", VA = "0xFA96FC")]
	private static Quaternion ScaleQuaternion(Quaternion rotation, float multiplier)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x60000E9")]
	[Address(RVA = "0xFA9748", Offset = "0xFA9748", VA = "0xFA9748")]
	private static float QuaternionMagnitude(Quaternion rotation)
	{
		return default(float);
	}

	[Token(Token = "0x60000EA")]
	[Address(RVA = "0xFA95FC", Offset = "0xFA95FC", VA = "0xFA95FC")]
	private static Quaternion NormalizeQuaternion(Quaternion rotation)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x60000EB")]
	[Address(RVA = "0xFA976C", Offset = "0xFA976C", VA = "0xFA976C")]
	public TransformTweenMixerBehaviour()
	{
	}
}
[Token(Token = "0x200003B")]
[TrackColor(0.855f, 0.8623f, 0.87f)]
[TrackClipType(typeof(TransformTweenClip))]
[TrackBindingType(typeof(Transform))]
public class TransformTweenTrack : TrackAsset
{
	[Token(Token = "0x60000EC")]
	[Address(RVA = "0xFA9774", Offset = "0xFA9774", VA = "0xFA9774", Slot = "24")]
	public override Playable CreateTrackMixer(PlayableGraph graph, GameObject go, int inputCount)
	{
		return default(Playable);
	}

	[Token(Token = "0x60000ED")]
	[Address(RVA = "0xFA9814", Offset = "0xFA9814", VA = "0xFA9814", Slot = "29")]
	public override void GatherProperties(PlayableDirector director, IPropertyCollector driver)
	{
	}

	[Token(Token = "0x60000EE")]
	[Address(RVA = "0xFA981C", Offset = "0xFA981C", VA = "0xFA981C")]
	public TransformTweenTrack()
	{
	}
}
[Token(Token = "0x200003C")]
[ExecuteInEditMode]
public class ListMeshVertCount : MonoBehaviour
{
	[Token(Token = "0x40000F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool includeInActive;

	[Token(Token = "0x40000F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool listVertCount;

	[Token(Token = "0x60000EF")]
	[Address(RVA = "0xFA9874", Offset = "0xFA9874", VA = "0xFA9874")]
	private void Update()
	{
	}

	[Token(Token = "0x60000F0")]
	[Address(RVA = "0xFA9888", Offset = "0xFA9888", VA = "0xFA9888")]
	private void ListVertCount()
	{
	}

	[Token(Token = "0x60000F1")]
	[Address(RVA = "0xFA9BC0", Offset = "0xFA9BC0", VA = "0xFA9BC0")]
	public ListMeshVertCount()
	{
	}
}
[Token(Token = "0x200003D")]
[ExecuteInEditMode]
public class RaycastTest : MonoBehaviour
{
	[Token(Token = "0x40000F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public MeshRenderer mr;

	[Token(Token = "0x40000F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public LayerMask layerMask;

	[Token(Token = "0x40000F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool createTriangle;

	[Token(Token = "0x40000F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int triangleIndex;

	[Token(Token = "0x40000F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private RaycastHit hitInfo;

	[Token(Token = "0x40000FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public bool step2;

	[Token(Token = "0x40000FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
	public bool drawTriangle;

	[Token(Token = "0x60000F2")]
	[Address(RVA = "0xFA9BC8", Offset = "0xFA9BC8", VA = "0xFA9BC8")]
	private void Update()
	{
	}

	[Token(Token = "0x60000F3")]
	[Address(RVA = "0xFA9BDC", Offset = "0xFA9BDC", VA = "0xFA9BDC")]
	private void CreateTriangle()
	{
	}

	[Token(Token = "0x60000F4")]
	private void Swap<T>(ref T v1, ref T v2)
	{
	}

	[Token(Token = "0x60000F5")]
	[Address(RVA = "0xFA9DD8", Offset = "0xFA9DD8", VA = "0xFA9DD8")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x60000F6")]
	[Address(RVA = "0xFAA8A4", Offset = "0xFAA8A4", VA = "0xFAA8A4")]
	public RaycastTest()
	{
	}
}
[Token(Token = "0x200003E")]
public struct TriangleTest
{
	[Token(Token = "0x40000FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public Vector3 a;

	[Token(Token = "0x40000FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Vector3 b;

	[Token(Token = "0x40000FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 c;

	[Token(Token = "0x40000FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Vector3 dirAb;

	[Token(Token = "0x4000100")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector3 dirAc;

	[Token(Token = "0x4000101")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public Vector3 dirBc;

	[Token(Token = "0x4000102")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Vector3 h1;

	[Token(Token = "0x4000103")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float ab;

	[Token(Token = "0x4000104")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float ac;

	[Token(Token = "0x4000105")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float bc;

	[Token(Token = "0x4000106")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public float area;

	[Token(Token = "0x4000107")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public float h;

	[Token(Token = "0x4000108")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float ah;

	[Token(Token = "0x4000109")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public float hb;

	[Token(Token = "0x60000F7")]
	[Address(RVA = "0xFAA47C", Offset = "0xFAA47C", VA = "0xFAA47C")]
	public void Calc()
	{
	}

	[Token(Token = "0x60000F8")]
	private void Swap<T>(ref T v1, ref T v2)
	{
	}
}
[Token(Token = "0x200003F")]
public class VisualizeMesh : MonoBehaviour
{
	[Token(Token = "0x400010A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float sphereRadius;

	[Token(Token = "0x400010B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private MeshFilter mf;

	[Token(Token = "0x400010C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Mesh m;

	[Token(Token = "0x60000F9")]
	[Address(RVA = "0xFAA8AC", Offset = "0xFAA8AC", VA = "0xFAA8AC")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x60000FA")]
	[Address(RVA = "0xFAAC58", Offset = "0xFAAC58", VA = "0xFAAC58")]
	public VisualizeMesh()
	{
	}
}
[Token(Token = "0x2000040")]
[ExecuteInEditMode]
public class Voxelize : MonoBehaviour
{
	[Token(Token = "0x2000041")]
	public class VoxelizedMesh
	{
		[Token(Token = "0x4000115")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public byte[,,] volume;

		[Token(Token = "0x4000116")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Bounds bounds;

		[Token(Token = "0x4000117")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Int3 voxels;

		[Token(Token = "0x6000104")]
		[Address(RVA = "0xFABD64", Offset = "0xFABD64", VA = "0xFABD64")]
		public VoxelizedMesh()
		{
		}
	}

	[Token(Token = "0x2000042")]
	public struct Int3
	{
		[Token(Token = "0x4000118")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int x;

		[Token(Token = "0x4000119")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int y;

		[Token(Token = "0x400011A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int z;

		[Token(Token = "0x6000105")]
		[Address(RVA = "0xFABD6C", Offset = "0xFABD6C", VA = "0xFABD6C")]
		public Int3(int x, int y, int z)
		{
		}

		[Token(Token = "0x6000106")]
		[Address(RVA = "0xFABD78", Offset = "0xFABD78", VA = "0xFABD78")]
		public static Int3 operator +(Int3 a, Int3 b)
		{
			return default(Int3);
		}

		[Token(Token = "0x6000107")]
		[Address(RVA = "0xFAC04C", Offset = "0xFAC04C", VA = "0xFAC04C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}

	[Token(Token = "0x400010D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly byte[] bits;

	[Token(Token = "0x400010E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static Dictionary<Mesh, VoxelizedMesh> voxelizedLookup;

	[Token(Token = "0x400010F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static List<float> intersectList;

	[Token(Token = "0x4000110")]
	private const byte insideVoxel = 1;

	[Token(Token = "0x4000111")]
	private const byte outsideVoxel = 2;

	[Token(Token = "0x4000112")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int voxelizeLayer;

	[Token(Token = "0x4000113")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float voxelResolution;

	[Token(Token = "0x4000114")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool voxelize;

	[Token(Token = "0x60000FB")]
	[Address(RVA = "0xFAAC6C", Offset = "0xFAAC6C", VA = "0xFAAC6C")]
	public void Update()
	{
	}

	[Token(Token = "0x60000FC")]
	[Address(RVA = "0xFAACA4", Offset = "0xFAACA4", VA = "0xFAACA4")]
	private VoxelizedMesh VoxelizeMesh(Transform t, float voxelResolution, int voxelizeLayer)
	{
		return null;
	}

	[Token(Token = "0x60000FD")]
	[Address(RVA = "0xFABD94", Offset = "0xFABD94", VA = "0xFABD94")]
	private static string PrintVector3(Vector3 v)
	{
		return null;
	}

	[Token(Token = "0x60000FE")]
	[Address(RVA = "0xFAC2E8", Offset = "0xFAC2E8", VA = "0xFAC2E8")]
	private static void MultiCast(Ray ray, List<float> points, float hitOffset, float maxDistance, LayerMask voxelizeLayerMask)
	{
	}

	[Token(Token = "0x60000FF")]
	[Address(RVA = "0xFAC458", Offset = "0xFAC458", VA = "0xFAC458")]
	private static void Report(VoxelizedMesh vm, float voxelResolution)
	{
	}

	[Token(Token = "0x6000100")]
	[Address(RVA = "0xFAC5D4", Offset = "0xFAC5D4", VA = "0xFAC5D4")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6000101")]
	[Address(RVA = "0xFAC634", Offset = "0xFAC634", VA = "0xFAC634")]
	public void DrawVolume(Transform t, float voxelResolution)
	{
	}

	[Token(Token = "0x6000102")]
	[Address(RVA = "0xFACAA8", Offset = "0xFACAA8", VA = "0xFACAA8")]
	public Voxelize()
	{
	}
}
[Token(Token = "0x2000043")]
[ExecuteInEditMode]
public class EnableChildrenMeshRenderers : MonoBehaviour
{
	[Token(Token = "0x400011B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool execute;

	[Token(Token = "0x6000108")]
	[Address(RVA = "0xFACBFC", Offset = "0xFACBFC", VA = "0xFACBFC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000109")]
	[Address(RVA = "0xFACC10", Offset = "0xFACC10", VA = "0xFACC10")]
	private void Execute()
	{
	}

	[Token(Token = "0x600010A")]
	[Address(RVA = "0xFACCAC", Offset = "0xFACCAC", VA = "0xFACCAC")]
	public EnableChildrenMeshRenderers()
	{
	}
}
[Token(Token = "0x2000044")]
public class ShadowDistance : MonoBehaviour
{
	[Token(Token = "0x400011C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float shadowDistance;

	[Token(Token = "0x600010B")]
	[Address(RVA = "0xFACCB4", Offset = "0xFACCB4", VA = "0xFACCB4")]
	private void Awake()
	{
	}

	[Token(Token = "0x600010C")]
	[Address(RVA = "0xFACCC0", Offset = "0xFACCC0", VA = "0xFACCC0")]
	public ShadowDistance()
	{
	}
}
[Token(Token = "0x2000045")]
public class MCS_RemoveOverlappingTris : MCS_RemoveTris
{
	[Token(Token = "0x600010D")]
	[Address(RVA = "0xFACCD0", Offset = "0xFACCD0", VA = "0xFACCD0")]
	public MCS_RemoveOverlappingTris()
	{
	}
}
[Token(Token = "0x2000046")]
public class MCS_RemoveTrisBelowSurface : MCS_RemoveTris
{
	[Token(Token = "0x600010E")]
	[Address(RVA = "0xFACCD8", Offset = "0xFACCD8", VA = "0xFACCD8")]
	public MCS_RemoveTrisBelowSurface()
	{
	}
}
[Token(Token = "0x2000047")]
public class HighlightNearestFace : MonoBehaviour
{
	[Token(Token = "0x400011D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float travel;

	[Token(Token = "0x400011E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float speed;

	[Token(Token = "0x400011F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private pb_Object target;

	[Token(Token = "0x4000120")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private pb_Face nearest;

	[Token(Token = "0x600010F")]
	[Address(RVA = "0xFACCE0", Offset = "0xFACCE0", VA = "0xFACCE0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000110")]
	[Address(RVA = "0xFACF54", Offset = "0xFACF54", VA = "0xFACF54")]
	private void Update()
	{
	}

	[Token(Token = "0x6000111")]
	[Address(RVA = "0xFAD39C", Offset = "0xFAD39C", VA = "0xFAD39C")]
	private Vector3 FaceCenter(pb_Object pb, pb_Face face)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000112")]
	[Address(RVA = "0xFAD570", Offset = "0xFAD570", VA = "0xFAD570")]
	public HighlightNearestFace()
	{
	}
}
[Token(Token = "0x2000048")]
[AddComponentMenu("")]
public class pb_DummyScript : MonoBehaviour
{
	[Token(Token = "0x6000113")]
	[Address(RVA = "0xFAD584", Offset = "0xFAD584", VA = "0xFAD584")]
	public pb_DummyScript()
	{
	}
}
[Token(Token = "0x2000049")]
[AddComponentMenu("")]
[DisallowMultipleComponent]
public class pb_Entity : MonoBehaviour
{
	[Token(Token = "0x4000121")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	[SerializeField]
	private EntityType _entityType;

	[Token(Token = "0x17000028")]
	public EntityType entityType
	{
		[Token(Token = "0x6000114")]
		[Address(RVA = "0xFAD58C", Offset = "0xFAD58C", VA = "0xFAD58C")]
		get
		{
			return default(EntityType);
		}
	}

	[Token(Token = "0x6000115")]
	[Address(RVA = "0xFAD594", Offset = "0xFAD594", VA = "0xFAD594")]
	public void Awake()
	{
	}

	[Token(Token = "0x6000116")]
	[Address(RVA = "0xFAD65C", Offset = "0xFAD65C", VA = "0xFAD65C")]
	public void SetEntity(EntityType t)
	{
	}

	[Token(Token = "0x6000117")]
	[Address(RVA = "0xFAD664", Offset = "0xFAD664", VA = "0xFAD664")]
	public pb_Entity()
	{
	}
}
[Token(Token = "0x200004A")]
[ExecuteInEditMode]
[AddComponentMenu("")]
[DisallowMultipleComponent]
[RequireComponent(typeof(MeshFilter))]
[RequireComponent(typeof(MeshRenderer))]
[RequireComponent(typeof(pb_Entity))]
public class pb_Object : MonoBehaviour
{
	[Token(Token = "0x4000122")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private pb_Face[] _quads;

	[Token(Token = "0x4000123")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private pb_IntArray[] _sharedIndices;

	[Token(Token = "0x4000124")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Vector3[] _vertices;

	[Token(Token = "0x4000125")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Vector2[] _uv;

	[Token(Token = "0x4000126")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private List<Vector4> _uv3;

	[Token(Token = "0x4000127")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private List<Vector4> _uv4;

	[Token(Token = "0x4000128")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Vector4[] _tangents;

	[Token(Token = "0x4000129")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private pb_IntArray[] _sharedIndicesUV;

	[Token(Token = "0x400012A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private Color[] _colors;

	[Token(Token = "0x400012B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public bool userCollisions;

	[Token(Token = "0x400012C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
	public bool isSelectable;

	[Token(Token = "0x400012D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public pb_UnwrapParameters unwrapParameters;

	[Token(Token = "0x400012E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public string asset_guid;

	[Token(Token = "0x4000131")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public bool dontDestroyMeshOnDelete;

	[Token(Token = "0x4000132")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private int[] m_selectedFaces;

	[Token(Token = "0x4000133")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private pb_Edge[] m_SelectedEdges;

	[Token(Token = "0x4000134")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private int[] m_selectedTriangles;

	[Token(Token = "0x17000029")]
	private pb_Face[] _faces
	{
		[Token(Token = "0x600011E")]
		[Address(RVA = "0xFAEA80", Offset = "0xFAEA80", VA = "0xFAEA80")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700002A")]
	public Mesh msh
	{
		[Token(Token = "0x6000123")]
		[Address(RVA = "0xFAD7FC", Offset = "0xFAD7FC", VA = "0xFAD7FC")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000124")]
		[Address(RVA = "0xFAEDC0", Offset = "0xFAEDC0", VA = "0xFAEDC0")]
		set
		{
		}
	}

	[Token(Token = "0x1700002B")]
	public pb_Face[] faces
	{
		[Token(Token = "0x6000125")]
		[Address(RVA = "0xFAEE2C", Offset = "0xFAEE2C", VA = "0xFAEE2C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700002C")]
	public pb_Face[] quads
	{
		[Token(Token = "0x6000126")]
		[Address(RVA = "0xFAEE34", Offset = "0xFAEE34", VA = "0xFAEE34")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700002D")]
	public pb_IntArray[] sharedIndices
	{
		[Token(Token = "0x6000127")]
		[Address(RVA = "0xFAEEA8", Offset = "0xFAEEA8", VA = "0xFAEEA8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700002E")]
	public pb_IntArray[] sharedIndicesUV
	{
		[Token(Token = "0x6000128")]
		[Address(RVA = "0xFAEEB0", Offset = "0xFAEEB0", VA = "0xFAEEB0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700002F")]
	public int id
	{
		[Token(Token = "0x6000129")]
		[Address(RVA = "0xFAEEB8", Offset = "0xFAEEB8", VA = "0xFAEEB8")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000030")]
	public Vector3[] vertices
	{
		[Token(Token = "0x600012A")]
		[Address(RVA = "0xFAEED8", Offset = "0xFAEED8", VA = "0xFAEED8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000031")]
	public Color[] colors
	{
		[Token(Token = "0x600012B")]
		[Address(RVA = "0xFAEEE0", Offset = "0xFAEEE0", VA = "0xFAEEE0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000032")]
	public Vector2[] uv
	{
		[Token(Token = "0x600012C")]
		[Address(RVA = "0xFAEEE8", Offset = "0xFAEEE8", VA = "0xFAEEE8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000033")]
	public bool hasUv3
	{
		[Token(Token = "0x600012D")]
		[Address(RVA = "0xFAEEF0", Offset = "0xFAEEF0", VA = "0xFAEEF0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000034")]
	public bool hasUv4
	{
		[Token(Token = "0x600012E")]
		[Address(RVA = "0xFAEF50", Offset = "0xFAEF50", VA = "0xFAEF50")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000035")]
	public List<Vector4> uv3
	{
		[Token(Token = "0x600012F")]
		[Address(RVA = "0xFAEFB0", Offset = "0xFAEFB0", VA = "0xFAEFB0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000036")]
	public List<Vector4> uv4
	{
		[Token(Token = "0x6000130")]
		[Address(RVA = "0xFAEFB8", Offset = "0xFAEFB8", VA = "0xFAEFB8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000037")]
	public int faceCount
	{
		[Token(Token = "0x6000131")]
		[Address(RVA = "0xFAEFC0", Offset = "0xFAEFC0", VA = "0xFAEFC0")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000038")]
	public int vertexCount
	{
		[Token(Token = "0x6000132")]
		[Address(RVA = "0xFADB30", Offset = "0xFADB30", VA = "0xFADB30")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000039")]
	public int triangleCount
	{
		[Token(Token = "0x6000133")]
		[Address(RVA = "0xFAEFD8", Offset = "0xFAEFD8", VA = "0xFAEFD8")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700003A")]
	public pb_Face[] SelectedFaces
	{
		[Token(Token = "0x6000138")]
		[Address(RVA = "0xFAF3E4", Offset = "0xFAF3E4", VA = "0xFAF3E4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700003B")]
	public int SelectedFaceCount
	{
		[Token(Token = "0x6000139")]
		[Address(RVA = "0xFAF430", Offset = "0xFAF430", VA = "0xFAF430")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700003C")]
	public int[] SelectedTriangles
	{
		[Token(Token = "0x600013A")]
		[Address(RVA = "0xFAF44C", Offset = "0xFAF44C", VA = "0xFAF44C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700003D")]
	public int SelectedTriangleCount
	{
		[Token(Token = "0x600013B")]
		[Address(RVA = "0xFAF454", Offset = "0xFAF454", VA = "0xFAF454")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700003E")]
	public pb_Edge[] SelectedEdges
	{
		[Token(Token = "0x600013C")]
		[Address(RVA = "0xFAF470", Offset = "0xFAF470", VA = "0xFAF470")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700003F")]
	public int SelectedEdgeCount
	{
		[Token(Token = "0x600013D")]
		[Address(RVA = "0xFAF478", Offset = "0xFAF478", VA = "0xFAF478")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x14000001")]
	public static event Action<pb_Object> onDestroyObject
	{
		[Token(Token = "0x600011F")]
		[Address(RVA = "0xFAEA88", Offset = "0xFAEA88", VA = "0xFAEA88")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000120")]
		[Address(RVA = "0xFAEB54", Offset = "0xFAEB54", VA = "0xFAEB54")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000002")]
	internal static event Action<pb_Object> onElementSelectionChanged
	{
		[Token(Token = "0x6000121")]
		[Address(RVA = "0xFAEC20", Offset = "0xFAEC20", VA = "0xFAEC20")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000122")]
		[Address(RVA = "0xFAECF0", Offset = "0xFAECF0", VA = "0xFAECF0")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6000118")]
	[Address(RVA = "0xFAD66C", Offset = "0xFAD66C", VA = "0xFAD66C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000119")]
	[Address(RVA = "0xFAD854", Offset = "0xFAD854", VA = "0xFAD854")]
	public static pb_Object InitWithObject(pb_Object pb)
	{
		return null;
	}

	[Token(Token = "0x600011A")]
	[Address(RVA = "0xFADFF4", Offset = "0xFADFF4", VA = "0xFADFF4")]
	public static pb_Object CreateInstanceWithPoints(Vector3[] vertices)
	{
		return null;
	}

	[Token(Token = "0x600011B")]
	[Address(RVA = "0xFAE450", Offset = "0xFAE450", VA = "0xFAE450")]
	public static pb_Object CreateInstanceWithVerticesFaces(Vector3[] v, pb_Face[] f)
	{
		return null;
	}

	[Token(Token = "0x600011C")]
	[Address(RVA = "0xFADE70", Offset = "0xFADE70", VA = "0xFADE70")]
	public static pb_Object CreateInstanceWithElements(Vector3[] v, Vector2[] u, Color[] c, pb_Face[] f, pb_IntArray[] si, pb_IntArray[] si_uv)
	{
		return null;
	}

	[Token(Token = "0x600011D")]
	[Address(RVA = "0xFAE898", Offset = "0xFAE898", VA = "0xFAE898")]
	public static pb_Object CreateInstanceWithElements(pb_Vertex[] vertices, pb_Face[] faces, pb_IntArray[] si, pb_IntArray[] si_uv)
	{
		return null;
	}

	[Token(Token = "0x6000134")]
	[Address(RVA = "0xFAF0F4", Offset = "0xFAF0F4", VA = "0xFAF0F4")]
	public void Clear()
	{
	}

	[Token(Token = "0x6000135")]
	[Address(RVA = "0xFAF348", Offset = "0xFAF348", VA = "0xFAF348")]
	public Vector3[] GetNormals()
	{
		return null;
	}

	[Token(Token = "0x6000136")]
	[Address(RVA = "0xFADB48", Offset = "0xFADB48", VA = "0xFADB48")]
	public pb_IntArray[] GetSharedIndices()
	{
		return null;
	}

	[Token(Token = "0x6000137")]
	[Address(RVA = "0xFADCDC", Offset = "0xFADCDC", VA = "0xFADCDC")]
	public pb_IntArray[] GetSharedIndicesUV()
	{
		return null;
	}

	[Token(Token = "0x600013E")]
	[Address(RVA = "0xFAF494", Offset = "0xFAF494", VA = "0xFAF494")]
	public void AddToFaceSelection(pb_Face face)
	{
	}

	[Token(Token = "0x600013F")]
	[Address(RVA = "0xFAF6E8", Offset = "0xFAF6E8", VA = "0xFAF6E8")]
	public void SetSelectedFaces(IEnumerable<pb_Face> selected)
	{
	}

	[Token(Token = "0x6000140")]
	[Address(RVA = "0xFAF530", Offset = "0xFAF530", VA = "0xFAF530")]
	public void SetSelectedFaces(IEnumerable<int> selected)
	{
	}

	[Token(Token = "0x6000141")]
	[Address(RVA = "0xFAFAA4", Offset = "0xFAFAA4", VA = "0xFAFAA4")]
	public void SetSelectedEdges(IEnumerable<pb_Edge> edges)
	{
	}

	[Token(Token = "0x6000142")]
	[Address(RVA = "0xFAF248", Offset = "0xFAF248", VA = "0xFAF248")]
	public void SetSelectedTriangles(int[] tris)
	{
	}

	[Token(Token = "0x6000143")]
	[Address(RVA = "0xFAFC6C", Offset = "0xFAFC6C", VA = "0xFAFC6C")]
	public void RemoveFromFaceSelectionAtIndex(int index)
	{
	}

	[Token(Token = "0x6000144")]
	[Address(RVA = "0xFAFCD0", Offset = "0xFAFCD0", VA = "0xFAFCD0")]
	public void RemoveFromFaceSelection(pb_Face face)
	{
	}

	[Token(Token = "0x6000145")]
	[Address(RVA = "0xFAFD6C", Offset = "0xFAFD6C", VA = "0xFAFD6C")]
	public void ClearSelection()
	{
	}

	[Token(Token = "0x6000146")]
	[Address(RVA = "0xFAFE18", Offset = "0xFAFE18", VA = "0xFAFE18")]
	public void SetVertices(Vector3[] v)
	{
	}

	[Token(Token = "0x6000147")]
	[Address(RVA = "0xFAFE20", Offset = "0xFAFE20", VA = "0xFAFE20")]
	public void SetVertices(IList<pb_Vertex> vertices, bool applyMesh = false)
	{
	}

	[Token(Token = "0x6000148")]
	[Address(RVA = "0xFB0078", Offset = "0xFB0078", VA = "0xFB0078")]
	public void SetUV(Vector2[] uvs)
	{
	}

	[Token(Token = "0x6000149")]
	[Address(RVA = "0xFAE67C", Offset = "0xFAE67C", VA = "0xFAE67C")]
	public void SetFaces(IEnumerable<pb_Face> faces)
	{
	}

	[Token(Token = "0x600014A")]
	[Address(RVA = "0xFB0080", Offset = "0xFB0080", VA = "0xFB0080")]
	public void SetSharedIndices(pb_IntArray[] si)
	{
	}

	[Token(Token = "0x600014B")]
	[Address(RVA = "0xFB0088", Offset = "0xFB0088", VA = "0xFB0088")]
	public void SetSharedIndices(IEnumerable<KeyValuePair<int, int>> si)
	{
	}

	[Token(Token = "0x600014C")]
	[Address(RVA = "0xFB00B0", Offset = "0xFB00B0", VA = "0xFB00B0")]
	public void SetSharedIndicesUV(pb_IntArray[] si)
	{
	}

	[Token(Token = "0x600014D")]
	[Address(RVA = "0xFB00B8", Offset = "0xFB00B8", VA = "0xFB00B8")]
	public void SetSharedIndicesUV(IEnumerable<KeyValuePair<int, int>> si)
	{
	}

	[Token(Token = "0x600014E")]
	[Address(RVA = "0xFAE138", Offset = "0xFAE138", VA = "0xFAE138")]
	private void GeometryWithPoints(Vector3[] v)
	{
	}

	[Token(Token = "0x600014F")]
	[Address(RVA = "0xFAE518", Offset = "0xFAE518", VA = "0xFAE518")]
	public void GeometryWithVerticesFaces(Vector3[] v, pb_Face[] f)
	{
	}

	[Token(Token = "0x6000150")]
	[Address(RVA = "0xFB0114", Offset = "0xFB0114", VA = "0xFB0114")]
	private void GeometryWithVerticesFacesIndices(Vector3[] v, pb_Face[] f, pb_IntArray[] s)
	{
	}

	[Token(Token = "0x6000151")]
	[Address(RVA = "0xFB0240", Offset = "0xFB0240", VA = "0xFB0240")]
	public MeshRebuildReason Verify()
	{
		return default(MeshRebuildReason);
	}

	[Token(Token = "0x6000152")]
	[Address(RVA = "0xFACED8", Offset = "0xFACED8", VA = "0xFACED8")]
	public void ToMesh()
	{
	}

	[Token(Token = "0x6000153")]
	[Address(RVA = "0xFB0448", Offset = "0xFB0448", VA = "0xFB0448")]
	public void ToMesh(MeshTopology preferredTopology)
	{
	}

	[Token(Token = "0x6000154")]
	[Address(RVA = "0xFB0800", Offset = "0xFB0800", VA = "0xFB0800")]
	public void MakeUnique()
	{
	}

	[Token(Token = "0x6000155")]
	[Address(RVA = "0xFACEE0", Offset = "0xFACEE0", VA = "0xFACEE0")]
	public void Refresh(RefreshMask mask = RefreshMask.All)
	{
	}

	[Token(Token = "0x6000156")]
	[Address(RVA = "0xFB0C28", Offset = "0xFB0C28", VA = "0xFB0C28")]
	public void RefreshCollisions()
	{
	}

	[Token(Token = "0x6000157")]
	[Address(RVA = "0xFB13CC", Offset = "0xFB13CC", VA = "0xFB13CC")]
	public int GetUnusedTextureGroup(int i = 1)
	{
		return default(int);
	}

	[Token(Token = "0x6000158")]
	[Address(RVA = "0xFB14E4", Offset = "0xFB14E4", VA = "0xFB14E4")]
	public int UnusedElementGroup(int i = 1)
	{
		return default(int);
	}

	[Token(Token = "0x6000159")]
	[Address(RVA = "0xFB0ACC", Offset = "0xFB0ACC", VA = "0xFB0ACC")]
	public void RefreshUV()
	{
	}

	[Token(Token = "0x600015A")]
	[Address(RVA = "0xFB236C", Offset = "0xFB236C", VA = "0xFB236C")]
	public void GetUVs(int channel, List<Vector4> uvs)
	{
	}

	[Token(Token = "0x600015B")]
	[Address(RVA = "0xFB25F4", Offset = "0xFB25F4", VA = "0xFB25F4")]
	public void SetUVs(int channel, List<Vector4> uvs)
	{
	}

	[Token(Token = "0x600015C")]
	[Address(RVA = "0xFB15FC", Offset = "0xFB15FC", VA = "0xFB15FC")]
	public void RefreshUV(IEnumerable<pb_Face> facesToRefresh)
	{
	}

	[Token(Token = "0x600015D")]
	[Address(RVA = "0xFACE70", Offset = "0xFACE70", VA = "0xFACE70")]
	public void SetFaceMaterial(pb_Face[] quad, Material mat)
	{
	}

	[Token(Token = "0x600015E")]
	[Address(RVA = "0xFB26EC", Offset = "0xFB26EC", VA = "0xFB26EC")]
	public void SetUV2(Vector2[] v)
	{
	}

	[Token(Token = "0x600015F")]
	[Address(RVA = "0xFAD48C", Offset = "0xFAD48C", VA = "0xFAD48C")]
	public void RefreshColors()
	{
	}

	[Token(Token = "0x6000160")]
	[Address(RVA = "0xFAE5D8", Offset = "0xFAE5D8", VA = "0xFAE5D8")]
	public void SetColors(Color[] InColors)
	{
	}

	[Token(Token = "0x6000161")]
	[Address(RVA = "0xFAD284", Offset = "0xFAD284", VA = "0xFAD284")]
	public void SetFaceColor(pb_Face face, Color color)
	{
	}

	[Token(Token = "0x6000162")]
	[Address(RVA = "0xFB2760", Offset = "0xFB2760", VA = "0xFB2760")]
	public void SetTangents(Vector4[] tangents)
	{
	}

	[Token(Token = "0x6000163")]
	[Address(RVA = "0xFB0AD4", Offset = "0xFB0AD4", VA = "0xFB0AD4")]
	public void RefreshNormals()
	{
	}

	[Token(Token = "0x6000164")]
	[Address(RVA = "0xFB0B80", Offset = "0xFB0B80", VA = "0xFB0B80")]
	public void RefreshTangents()
	{
	}

	[Token(Token = "0x6000165")]
	[Address(RVA = "0xFB2768", Offset = "0xFB2768", VA = "0xFB2768")]
	public void OnDestroy()
	{
	}

	[Token(Token = "0x6000166")]
	[Address(RVA = "0xFB2884", Offset = "0xFB2884", VA = "0xFB2884")]
	public pb_Object()
	{
	}
}
[Serializable]
[Token(Token = "0x200004E")]
public class pb_UV
{
	[Token(Token = "0x200004F")]
	[Obsolete("See pb_UV.Anchor")]
	public enum Justify
	{
		[Token(Token = "0x4000149")]
		Right,
		[Token(Token = "0x400014A")]
		Left,
		[Token(Token = "0x400014B")]
		Top,
		[Token(Token = "0x400014C")]
		Center,
		[Token(Token = "0x400014D")]
		Bottom,
		[Token(Token = "0x400014E")]
		None
	}

	[Token(Token = "0x2000050")]
	public enum Anchor
	{
		[Token(Token = "0x4000150")]
		UpperLeft,
		[Token(Token = "0x4000151")]
		UpperCenter,
		[Token(Token = "0x4000152")]
		UpperRight,
		[Token(Token = "0x4000153")]
		MiddleLeft,
		[Token(Token = "0x4000154")]
		MiddleCenter,
		[Token(Token = "0x4000155")]
		MiddleRight,
		[Token(Token = "0x4000156")]
		LowerLeft,
		[Token(Token = "0x4000157")]
		LowerCenter,
		[Token(Token = "0x4000158")]
		LowerRight,
		[Token(Token = "0x4000159")]
		None
	}

	[Token(Token = "0x2000051")]
	public enum Fill
	{
		[Token(Token = "0x400015B")]
		Fit,
		[Token(Token = "0x400015C")]
		Tile,
		[Token(Token = "0x400015D")]
		Stretch
	}

	[Token(Token = "0x400013C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool useWorldSpace;

	[Token(Token = "0x400013D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
	public bool flipU;

	[Token(Token = "0x400013E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
	public bool flipV;

	[Token(Token = "0x400013F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13")]
	public bool swapUV;

	[Token(Token = "0x4000140")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Fill fill;

	[Token(Token = "0x4000141")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector2 scale;

	[Token(Token = "0x4000142")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector2 offset;

	[Token(Token = "0x4000143")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float rotation;

	[Token(Token = "0x4000144")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Obsolete("Please use pb_UV.anchor.")]
	public Justify justify;

	[Token(Token = "0x4000145")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector2 localPivot;

	[Token(Token = "0x4000146")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Obsolete("localPivot and localSize are no longer stored.")]
	public Vector2 localSize;

	[Token(Token = "0x4000147")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Anchor anchor;

	[Token(Token = "0x6000171")]
	[Address(RVA = "0xFB00E0", Offset = "0xFB00E0", VA = "0xFB00E0")]
	public pb_UV()
	{
	}

	[Token(Token = "0x6000172")]
	[Address(RVA = "0xFB2ADC", Offset = "0xFB2ADC", VA = "0xFB2ADC")]
	public pb_UV(pb_UV uvs)
	{
	}

	[Token(Token = "0x6000173")]
	[Address(RVA = "0xFB2B50", Offset = "0xFB2B50", VA = "0xFB2B50")]
	public void Reset()
	{
	}

	[Token(Token = "0x6000174")]
	[Address(RVA = "0xFB2B70", Offset = "0xFB2B70", VA = "0xFB2B70", Slot = "3")]
	public override string ToString()
	{
		return null;
	}
}
[Serializable]
[Token(Token = "0x2000052")]
public class pb_Color
{
	[Token(Token = "0x400015E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float r;

	[Token(Token = "0x400015F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float g;

	[Token(Token = "0x4000160")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float b;

	[Token(Token = "0x4000161")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float a;

	[Token(Token = "0x6000175")]
	[Address(RVA = "0xFB32FC", Offset = "0xFB32FC", VA = "0xFB32FC")]
	public static implicit operator Color(pb_Color c)
	{
		return default(Color);
	}

	[Token(Token = "0x6000176")]
	[Address(RVA = "0xFB3318", Offset = "0xFB3318", VA = "0xFB3318")]
	public static implicit operator pb_Color(Color c)
	{
		return null;
	}

	[Token(Token = "0x6000177")]
	[Address(RVA = "0xFB33DC", Offset = "0xFB33DC", VA = "0xFB33DC")]
	public pb_Color()
	{
	}

	[Token(Token = "0x6000178")]
	[Address(RVA = "0xFB339C", Offset = "0xFB339C", VA = "0xFB339C")]
	public pb_Color(Color c)
	{
	}

	[Token(Token = "0x6000179")]
	[Address(RVA = "0xFB33F8", Offset = "0xFB33F8", VA = "0xFB33F8")]
	public pb_Color(float r, float g, float b, float a)
	{
	}
}
[Token(Token = "0x2000053")]
[AddComponentMenu("Mesh Sprite Sorting")]
public class MeshSpriteSorting : MonoBehaviour
{
	[Token(Token = "0x4000162")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("Sprite sorting order.")]
	[Header("Sort Settings")]
	public int sortingOrder;

	[Token(Token = "0x4000163")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Tooltip("Sprite sorting layer.")]
	[SortingLayer]
	public int sortingLayer;

	[Token(Token = "0x4000164")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Renderer targetRenderer;

	[Token(Token = "0x600017A")]
	[Address(RVA = "0xFB3438", Offset = "0xFB3438", VA = "0xFB3438")]
	public MeshSpriteSorting()
	{
	}
}
[Token(Token = "0x2000054")]
[AddComponentMenu("Simple Sprite Combine")]
public class SimpleSpriteCombine : MonoBehaviour
{
	[Token(Token = "0x600017B")]
	[Address(RVA = "0xFB344C", Offset = "0xFB344C", VA = "0xFB344C")]
	public SimpleSpriteCombine()
	{
	}
}
[Token(Token = "0x2000055")]
public class Autorotate : MonoBehaviour
{
	[Token(Token = "0x4000165")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 rotationSpeed;

	[Token(Token = "0x4000166")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Vector3 rotationPos;

	[Token(Token = "0x600017C")]
	[Address(RVA = "0xFB3454", Offset = "0xFB3454", VA = "0xFB3454")]
	private void Update()
	{
	}

	[Token(Token = "0x600017D")]
	[Address(RVA = "0xFB34F0", Offset = "0xFB34F0", VA = "0xFB34F0")]
	public Autorotate()
	{
	}
}
[Token(Token = "0x2000056")]
public class PrefabSpawner : MonoBehaviour
{
	[Token(Token = "0x4000167")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject ObjectToSpawn;

	[Token(Token = "0x4000168")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float TimeBetweenSpawns;

	[Token(Token = "0x4000169")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float SpawnRadius;

	[Token(Token = "0x400016A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float nextSpawnTime;

	[Token(Token = "0x600017E")]
	[Address(RVA = "0xFB3550", Offset = "0xFB3550", VA = "0xFB3550")]
	private void Start()
	{
	}

	[Token(Token = "0x600017F")]
	[Address(RVA = "0xFB3574", Offset = "0xFB3574", VA = "0xFB3574")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000180")]
	[Address(RVA = "0xFB36EC", Offset = "0xFB36EC", VA = "0xFB36EC")]
	public PrefabSpawner()
	{
	}
}
[Token(Token = "0x2000057")]
public class VTP : MonoBehaviour
{
	[Token(Token = "0x6000181")]
	[Address(RVA = "0xFB3700", Offset = "0xFB3700", VA = "0xFB3700")]
	public static Color getSingleVertexColorAtHit(Transform transform, RaycastHit hit)
	{
		return default(Color);
	}

	[Token(Token = "0x6000182")]
	[Address(RVA = "0xFB393C", Offset = "0xFB393C", VA = "0xFB393C")]
	public static Color getFaceVerticesColorAtHit(Transform transform, RaycastHit hit)
	{
		return default(Color);
	}

	[Token(Token = "0x6000183")]
	[Address(RVA = "0xFB3A5C", Offset = "0xFB3A5C", VA = "0xFB3A5C")]
	public static void paintSingleVertexOnHit(Transform transform, RaycastHit hit, Color color, float strength)
	{
	}

	[Token(Token = "0x6000184")]
	[Address(RVA = "0xFB3D68", Offset = "0xFB3D68", VA = "0xFB3D68")]
	public static void paintFaceVerticesOnHit(Transform transform, RaycastHit hit, Color color, float strength)
	{
	}

	[Token(Token = "0x6000185")]
	[Address(RVA = "0xFB3EEC", Offset = "0xFB3EEC", VA = "0xFB3EEC")]
	public static void deformVerticesOnHit(RaycastHit hit, bool up, float strength, float radius, bool linearFalloff, bool recalculateNormals, bool recalculateCollider, bool recalculateFlow)
	{
	}

	[Token(Token = "0x6000186")]
	[Address(RVA = "0xFB4AAC", Offset = "0xFB4AAC", VA = "0xFB4AAC")]
	public static void deformSingleVertexOnHit(Transform transform, RaycastHit hit, bool up, float strength, bool recalculateNormals, bool recalculateCollider, bool recalculateFlow)
	{
	}

	[Token(Token = "0x6000187")]
	[Address(RVA = "0xFB4ECC", Offset = "0xFB4ECC", VA = "0xFB4ECC")]
	public static void deformFaceVerticesOnHit(Transform transform, RaycastHit hit, bool up, float strength, bool recalculateNormals, bool recalculateCollider, bool recalculateFlow)
	{
	}

	[Token(Token = "0x6000188")]
	[Address(RVA = "0xFB476C", Offset = "0xFB476C", VA = "0xFB476C")]
	private static void recalculateMeshForFlow(Transform transform, Vector3[] currentVertices, Vector3[] currentNormals, Vector4[] currentTangents)
	{
	}

	[Token(Token = "0x6000189")]
	[Address(RVA = "0xFB42F8", Offset = "0xFB42F8", VA = "0xFB42F8")]
	private static Vector4[] calculateMeshTangents(int[] triangles, Vector3[] vertices, Vector2[] uv, Vector3[] normals)
	{
		return null;
	}

	[Token(Token = "0x600018A")]
	[Address(RVA = "0xFB3CF8", Offset = "0xFB3CF8", VA = "0xFB3CF8")]
	public static Color VertexColorLerp(Color colorA, Color colorB, float value)
	{
		return default(Color);
	}

	[Token(Token = "0x600018B")]
	[Address(RVA = "0xFB51C4", Offset = "0xFB51C4", VA = "0xFB51C4")]
	public VTP()
	{
	}
}
[Serializable]
[Token(Token = "0x2000058")]
public class MeshHolder
{
	[Token(Token = "0x400016B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[HideInInspector]
	public Vector3[] _vertices;

	[Token(Token = "0x400016C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	public Vector3[] _normals;

	[Token(Token = "0x400016D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[HideInInspector]
	public int[] _triangles;

	[Token(Token = "0x400016E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[HideInInspector]
	public trisPerSubmesh[] _TrianglesOfSubs;

	[Token(Token = "0x400016F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	public Matrix4x4[] _bindPoses;

	[Token(Token = "0x4000170")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[HideInInspector]
	public BoneWeight[] _boneWeights;

	[Token(Token = "0x4000171")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[HideInInspector]
	public Bounds _bounds;

	[Token(Token = "0x4000172")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[HideInInspector]
	public int _subMeshCount;

	[Token(Token = "0x4000173")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[HideInInspector]
	public Vector4[] _tangents;

	[Token(Token = "0x4000174")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[HideInInspector]
	public Vector2[] _uv;

	[Token(Token = "0x4000175")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[HideInInspector]
	public Vector2[] _uv2;

	[Token(Token = "0x4000176")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[HideInInspector]
	public Vector2[] _uv3;

	[Token(Token = "0x4000177")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[HideInInspector]
	public Color[] _colors;

	[Token(Token = "0x4000178")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[HideInInspector]
	public Vector2[] _uv4;

	[Token(Token = "0x600018C")]
	[Address(RVA = "0xFB61CC", Offset = "0xFB61CC", VA = "0xFB61CC")]
	public void setAnimationData(Mesh mesh)
	{
	}

	[Token(Token = "0x600018D")]
	[Address(RVA = "0xFB61FC", Offset = "0xFB61FC", VA = "0xFB61FC")]
	public MeshHolder()
	{
	}
}
[Serializable]
[Token(Token = "0x2000059")]
public class trisPerSubmesh
{
	[Token(Token = "0x4000179")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int[] triangles;

	[Token(Token = "0x600018E")]
	[Address(RVA = "0xFB6204", Offset = "0xFB6204", VA = "0xFB6204")]
	public trisPerSubmesh()
	{
	}
}
[Token(Token = "0x200005A")]
[ExecuteInEditMode]
public class instanceStream : MonoBehaviour
{
	[Token(Token = "0x400017A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3[] _vertices;

	[Token(Token = "0x400017B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Color[] _colors;

	[Token(Token = "0x400017C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Mesh tmpMesh;

	[Token(Token = "0x600018F")]
	[Address(RVA = "0xFB620C", Offset = "0xFB620C", VA = "0xFB620C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000190")]
	[Address(RVA = "0xFB6318", Offset = "0xFB6318", VA = "0xFB6318")]
	public void rebuildForTerrain()
	{
	}

	[Token(Token = "0x6000191")]
	[Address(RVA = "0xFB6210", Offset = "0xFB6210", VA = "0xFB6210")]
	public void Apply()
	{
	}

	[Token(Token = "0x6000192")]
	[Address(RVA = "0xFB6380", Offset = "0xFB6380", VA = "0xFB6380")]
	public instanceStream()
	{
	}
}
[Token(Token = "0x200005B")]
public class terrainStream : MonoBehaviour
{
	[Token(Token = "0x6000193")]
	[Address(RVA = "0xFB6388", Offset = "0xFB6388", VA = "0xFB6388")]
	public void streamToTerrainTrees()
	{
	}

	[Token(Token = "0x6000194")]
	[Address(RVA = "0xFB64D4", Offset = "0xFB64D4", VA = "0xFB64D4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000195")]
	[Address(RVA = "0xFB6620", Offset = "0xFB6620", VA = "0xFB6620")]
	private void Update()
	{
	}

	[Token(Token = "0x6000196")]
	[Address(RVA = "0xFB6624", Offset = "0xFB6624", VA = "0xFB6624")]
	public terrainStream()
	{
	}
}
[Token(Token = "0x200005C")]
public class VertexColorAnimator : MonoBehaviour
{
	[Token(Token = "0x400017D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<MeshHolder> animationMeshes;

	[Token(Token = "0x400017E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<float> animationKeyframes;

	[Token(Token = "0x400017F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float timeScale;

	[Token(Token = "0x4000180")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int mode;

	[Token(Token = "0x4000181")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float elapsedTime;

	[Token(Token = "0x6000197")]
	[Address(RVA = "0xFB662C", Offset = "0xFB662C", VA = "0xFB662C")]
	public void initLists()
	{
	}

	[Token(Token = "0x6000198")]
	[Address(RVA = "0xFB66F8", Offset = "0xFB66F8", VA = "0xFB66F8")]
	public void addMesh(Mesh mesh, float atPosition)
	{
	}

	[Token(Token = "0x6000199")]
	[Address(RVA = "0xFB6870", Offset = "0xFB6870", VA = "0xFB6870")]
	private void Start()
	{
	}

	[Token(Token = "0x600019A")]
	[Address(RVA = "0xFB6878", Offset = "0xFB6878", VA = "0xFB6878")]
	public void replaceKeyframe(int frameIndex, Mesh mesh)
	{
	}

	[Token(Token = "0x600019B")]
	[Address(RVA = "0xFB68E8", Offset = "0xFB68E8", VA = "0xFB68E8")]
	public void deleteKeyframe(int frameIndex)
	{
	}

	[Token(Token = "0x600019C")]
	[Address(RVA = "0xFB6968", Offset = "0xFB6968", VA = "0xFB6968")]
	public void scrobble(float scrobblePos)
	{
	}

	[Token(Token = "0x600019D")]
	[Address(RVA = "0xFB6CB8", Offset = "0xFB6CB8", VA = "0xFB6CB8")]
	private void Update()
	{
	}

	[Token(Token = "0x600019E")]
	[Address(RVA = "0xFB705C", Offset = "0xFB705C", VA = "0xFB705C")]
	public VertexColorAnimator()
	{
	}
}
[Token(Token = "0x200005D")]
[ExecuteInEditMode]
public class VertexColorStream : MonoBehaviour
{
	[Token(Token = "0x4000182")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	public Mesh originalMesh;

	[Token(Token = "0x4000183")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[HideInInspector]
	public Mesh paintedMesh;

	[Token(Token = "0x4000184")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[HideInInspector]
	public MeshHolder meshHold;

	[Token(Token = "0x4000185")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	public Vector3[] _vertices;

	[Token(Token = "0x4000186")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[HideInInspector]
	public Vector3[] _normals;

	[Token(Token = "0x4000187")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[HideInInspector]
	public int[] _triangles;

	[Token(Token = "0x4000188")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[HideInInspector]
	public int[][] _Subtriangles;

	[Token(Token = "0x4000189")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[HideInInspector]
	public Matrix4x4[] _bindPoses;

	[Token(Token = "0x400018A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[HideInInspector]
	public BoneWeight[] _boneWeights;

	[Token(Token = "0x400018B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[HideInInspector]
	public Bounds _bounds;

	[Token(Token = "0x400018C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[HideInInspector]
	public int _subMeshCount;

	[Token(Token = "0x400018D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[HideInInspector]
	public Vector4[] _tangents;

	[Token(Token = "0x400018E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[HideInInspector]
	public Vector2[] _uv;

	[Token(Token = "0x400018F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[HideInInspector]
	public Vector2[] _uv2;

	[Token(Token = "0x4000190")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[HideInInspector]
	public Vector2[] _uv3;

	[Token(Token = "0x4000191")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[HideInInspector]
	public Color[] _colors;

	[Token(Token = "0x4000192")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[HideInInspector]
	public Vector2[] _uv4;

	[Token(Token = "0x600019F")]
	[Address(RVA = "0xFB706C", Offset = "0xFB706C", VA = "0xFB706C")]
	private void OnDidApplyAnimationProperties()
	{
	}

	[Token(Token = "0x60001A0")]
	[Address(RVA = "0xFB7070", Offset = "0xFB7070", VA = "0xFB7070")]
	public void init(Mesh origMesh, bool destroyOld)
	{
	}

	[Token(Token = "0x60001A1")]
	[Address(RVA = "0xFB75E4", Offset = "0xFB75E4", VA = "0xFB75E4")]
	public void setWholeMesh(Mesh tmpMesh)
	{
	}

	[Token(Token = "0x60001A2")]
	[Address(RVA = "0xFB77FC", Offset = "0xFB77FC", VA = "0xFB77FC")]
	public Vector3[] setVertices(Vector3[] _deformedVertices)
	{
		return null;
	}

	[Token(Token = "0x60001A3")]
	[Address(RVA = "0xFB7984", Offset = "0xFB7984", VA = "0xFB7984")]
	public Vector3[] getVertices()
	{
		return null;
	}

	[Token(Token = "0x60001A4")]
	[Address(RVA = "0xFB79A0", Offset = "0xFB79A0", VA = "0xFB79A0")]
	public Vector3[] getNormals()
	{
		return null;
	}

	[Token(Token = "0x60001A5")]
	[Address(RVA = "0xFB79BC", Offset = "0xFB79BC", VA = "0xFB79BC")]
	public void setNormals(Vector3[] _normals)
	{
	}

	[Token(Token = "0x60001A6")]
	[Address(RVA = "0xFB79FC", Offset = "0xFB79FC", VA = "0xFB79FC")]
	public int[] getTriangles()
	{
		return null;
	}

	[Token(Token = "0x60001A7")]
	[Address(RVA = "0xFB7A18", Offset = "0xFB7A18", VA = "0xFB7A18")]
	public void setTriangles(int[] _triangles)
	{
	}

	[Token(Token = "0x60001A8")]
	[Address(RVA = "0xFB7A58", Offset = "0xFB7A58", VA = "0xFB7A58")]
	public void setTangents(Vector4[] _meshTangents)
	{
	}

	[Token(Token = "0x60001A9")]
	[Address(RVA = "0xFB7A98", Offset = "0xFB7A98", VA = "0xFB7A98")]
	public Vector4[] getTangents()
	{
		return null;
	}

	[Token(Token = "0x60001AA")]
	[Address(RVA = "0xFB6C78", Offset = "0xFB6C78", VA = "0xFB6C78")]
	public void setColors(Color[] _vertexColors)
	{
	}

	[Token(Token = "0x60001AB")]
	[Address(RVA = "0xFB7AB4", Offset = "0xFB7AB4", VA = "0xFB7AB4")]
	public Color[] getColors()
	{
		return null;
	}

	[Token(Token = "0x60001AC")]
	[Address(RVA = "0xFB7AD0", Offset = "0xFB7AD0", VA = "0xFB7AD0")]
	public Vector2[] getUVs()
	{
		return null;
	}

	[Token(Token = "0x60001AD")]
	[Address(RVA = "0xFB7AEC", Offset = "0xFB7AEC", VA = "0xFB7AEC")]
	public void setUVs(Vector2[] _uvs)
	{
	}

	[Token(Token = "0x60001AE")]
	[Address(RVA = "0xFB7B2C", Offset = "0xFB7B2C", VA = "0xFB7B2C")]
	public void setUV2s(Vector2[] _uv2s)
	{
	}

	[Token(Token = "0x60001AF")]
	[Address(RVA = "0xFB7B6C", Offset = "0xFB7B6C", VA = "0xFB7B6C")]
	public Vector2[] getUV2s()
	{
		return null;
	}

	[Token(Token = "0x60001B0")]
	[Address(RVA = "0xFB7B88", Offset = "0xFB7B88", VA = "0xFB7B88")]
	public void setUV3s(Vector2[] _uv3s)
	{
	}

	[Token(Token = "0x60001B1")]
	[Address(RVA = "0xFB7BC8", Offset = "0xFB7BC8", VA = "0xFB7BC8")]
	public Vector2[] getUV3s()
	{
		return null;
	}

	[Token(Token = "0x60001B2")]
	[Address(RVA = "0xFB7BE4", Offset = "0xFB7BE4", VA = "0xFB7BE4")]
	public void setUV4s(Vector2[] _uv4s)
	{
	}

	[Token(Token = "0x60001B3")]
	[Address(RVA = "0xFB7C24", Offset = "0xFB7C24", VA = "0xFB7C24")]
	public Vector2[] getUV4s()
	{
		return null;
	}

	[Token(Token = "0x60001B4")]
	[Address(RVA = "0xFB7C40", Offset = "0xFB7C40", VA = "0xFB7C40")]
	public void unlink()
	{
	}

	[Token(Token = "0x60001B5")]
	[Address(RVA = "0xFB7C4C", Offset = "0xFB7C4C", VA = "0xFB7C4C")]
	public void rebuild()
	{
	}

	[Token(Token = "0x60001B6")]
	[Address(RVA = "0xFB81F4", Offset = "0xFB81F4", VA = "0xFB81F4")]
	private void Start()
	{
	}

	[Token(Token = "0x60001B7")]
	[Address(RVA = "0xFB8270", Offset = "0xFB8270", VA = "0xFB8270")]
	public VertexColorStream()
	{
	}
}
[Token(Token = "0x200005E")]
[ExecuteInEditMode]
public class VertexStreamChildrenRebuilder : MonoBehaviour
{
	[Token(Token = "0x60001B8")]
	[Address(RVA = "0xFB8278", Offset = "0xFB8278", VA = "0xFB8278")]
	public VertexStreamChildrenRebuilder()
	{
	}
}
namespace JangaFX
{
	[Token(Token = "0x200005F")]
	[ExecuteInEditMode]
	[AddComponentMenu("Vector Field/Vector Field")]
	public class VectorField : MonoBehaviour
	{
		[Token(Token = "0x2000060")]
		public enum AutoAnimationType
		{
			[Token(Token = "0x40001B8")]
			Forward,
			[Token(Token = "0x40001B9")]
			Backward,
			[Token(Token = "0x40001BA")]
			PingPong
		}

		[Token(Token = "0x2000061")]
		public enum GizmosShape
		{
			[Token(Token = "0x40001BC")]
			ColoredArrows,
			[Token(Token = "0x40001BD")]
			ScaledArrows,
			[Token(Token = "0x40001BE")]
			ColoredLines,
			[Token(Token = "0x40001BF")]
			ScaledLines,
			[Token(Token = "0x40001C0")]
			None
		}

		[Token(Token = "0x2000062")]
		public enum BoundsType
		{
			[Token(Token = "0x40001C2")]
			Border,
			[Token(Token = "0x40001C3")]
			Repeat,
			[Token(Token = "0x40001C4")]
			Closed,
			[Token(Token = "0x40001C5")]
			Mirror
		}

		[Token(Token = "0x4000193")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool ShowGizmos;

		[Token(Token = "0x4000194")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public GizmosShape ShowVectorFieldAs;

		[Token(Token = "0x4000195")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0.1f, 10f)]
		public float GizmoScale;

		[Token(Token = "0x4000196")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Color VectorFieldColor;

		[Token(Token = "0x4000197")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool AlwaysDisplayVF;

		[Token(Token = "0x4000198")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		public bool SizeFromFile;

		[Token(Token = "0x4000199")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float SizeX;

		[Token(Token = "0x400019A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float SizeY;

		[Token(Token = "0x400019B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float SizeZ;

		[Token(Token = "0x400019C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float Intensity;

		[Token(Token = "0x400019D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool Animate;

		[Token(Token = "0x400019E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public AutoAnimationType AnimationType;

		[Token(Token = "0x400019F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AnimationCurve Curve;

		[Token(Token = "0x40001A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Range(0f, 10f)]
		public float Duration;

		[Token(Token = "0x40001A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public BoundsType Bounds;

		[Token(Token = "0x40001A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool PerAxisBounds;

		[Token(Token = "0x40001A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public BoundsType BoundsX;

		[Token(Token = "0x40001A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public BoundsType BoundsY;

		[Token(Token = "0x40001A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public BoundsType BoundsZ;

		[Token(Token = "0x40001A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Range(0f, 1f)]
		public float ClosedBoundRamp;

		[Token(Token = "0x40001A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public string VFFilename;

		[Token(Token = "0x40001A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public bool GenerateGPUTexture;

		[Token(Token = "0x40001A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[HideInInspector]
		[SerializeField]
		private Texture3D GPUTexture;

		[Token(Token = "0x40001AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		[HideInInspector]
		private int vectorSizeX;

		[Token(Token = "0x40001AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[HideInInspector]
		[SerializeField]
		private int vectorSizeY;

		[Token(Token = "0x40001AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		[HideInInspector]
		private int vectorSizeZ;

		[Token(Token = "0x40001AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[HideInInspector]
		[SerializeField]
		private Vector3 minCorner;

		[Token(Token = "0x40001AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[HideInInspector]
		[SerializeField]
		private Vector3 maxCorner;

		[Token(Token = "0x40001AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[SerializeField]
		[HideInInspector]
		private Vector3 boxSize;

		[Token(Token = "0x40001B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[HideInInspector]
		[SerializeField]
		private Vector3[] vectorData;

		[Token(Token = "0x40001B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[HideInInspector]
		[SerializeField]
		private Vector3[] worldBounds;

		[Token(Token = "0x40001B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[HideInInspector]
		[SerializeField]
		private Vector3[] localBounds;

		[Token(Token = "0x40001B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static List<VectorField> vectorFieldsList;

		[Token(Token = "0x40001B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private float AnimIntensity;

		[Token(Token = "0x40001B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Mesh arrowMesh;

		[Token(Token = "0x40001B6")]
		private const float globalScale = 0.01f;

		[Token(Token = "0x17000040")]
		public Texture3D GetGPUTexture
		{
			[Token(Token = "0x60001B9")]
			[Address(RVA = "0xFB8280", Offset = "0xFB8280", VA = "0xFB8280")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000041")]
		public Vector3 BoxSize
		{
			[Token(Token = "0x60001BA")]
			[Address(RVA = "0xFB8288", Offset = "0xFB8288", VA = "0xFB8288")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x60001BB")]
		[Address(RVA = "0xFB8294", Offset = "0xFB8294", VA = "0xFB8294")]
		public void ClearVF()
		{
		}

		[Token(Token = "0x60001BC")]
		[Address(RVA = "0xFB8324", Offset = "0xFB8324", VA = "0xFB8324")]
		public void ResizeBox()
		{
		}

		[Token(Token = "0x60001BD")]
		[Address(RVA = "0xFB8370", Offset = "0xFB8370", VA = "0xFB8370")]
		private void ComputeBounds()
		{
		}

		[Token(Token = "0x60001BE")]
		[Address(RVA = "0xFB85CC", Offset = "0xFB85CC", VA = "0xFB85CC")]
		public void ReadFile(string filename)
		{
		}

		[Token(Token = "0x60001BF")]
		[Address(RVA = "0xFB8E88", Offset = "0xFB8E88", VA = "0xFB8E88")]
		public void SaveVFAsTexture(string path)
		{
		}

		[Token(Token = "0x60001C0")]
		[Address(RVA = "0xFB8E8C", Offset = "0xFB8E8C", VA = "0xFB8E8C")]
		public Vector3 GetPointInField(float invcoverage)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60001C1")]
		[Address(RVA = "0xFB8F98", Offset = "0xFB8F98", VA = "0xFB8F98")]
		public void GetRandomVector(out Vector3 position, out Vector3 direction)
		{
		}

		[Token(Token = "0x60001C2")]
		[Address(RVA = "0xFB919C", Offset = "0xFB919C", VA = "0xFB919C")]
		public Vector3 GetRandomCorner()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60001C3")]
		[Address(RVA = "0xFB9230", Offset = "0xFB9230", VA = "0xFB9230")]
		public Vector3 GetPointOnEdge(float invcoverage)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60001C4")]
		[Address(RVA = "0xFB9510", Offset = "0xFB9510", VA = "0xFB9510")]
		public Vector3 GetPointOnFace(int faceID, float invcoverage)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60001C5")]
		[Address(RVA = "0xFB98D4", Offset = "0xFB98D4", VA = "0xFB98D4")]
		public Vector3 GetPointOnVolume(float invcoverage)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60001C6")]
		[Address(RVA = "0xFB990C", Offset = "0xFB990C", VA = "0xFB990C")]
		public static Vector3 GetCombinedVectors(Vector3 worldPosition)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60001C7")]
		[Address(RVA = "0xFBA080", Offset = "0xFBA080", VA = "0xFBA080")]
		public static Vector3 GetCombinedVectorsRestricted(Vector3 worldPosition, List<VectorField> vfList)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60001C8")]
		[Address(RVA = "0xFB9A80", Offset = "0xFB9A80", VA = "0xFB9A80")]
		public Vector3 GetVector(Vector3 worldPosition)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60001C9")]
		[Address(RVA = "0xFBA1EC", Offset = "0xFBA1EC", VA = "0xFBA1EC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60001CA")]
		[Address(RVA = "0xFBA314", Offset = "0xFBA314", VA = "0xFBA314")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60001CB")]
		[Address(RVA = "0xFBA3E4", Offset = "0xFBA3E4", VA = "0xFBA3E4")]
		private void GenerateTexture(bool force)
		{
		}

		[Token(Token = "0x60001CC")]
		[Address(RVA = "0xFBA644", Offset = "0xFBA644", VA = "0xFBA644")]
		private void Update()
		{
		}

		[Token(Token = "0x60001CD")]
		[Address(RVA = "0xFB851C", Offset = "0xFB851C", VA = "0xFB851C")]
		private void ComputeWorldBounds()
		{
		}

		[Token(Token = "0x60001CE")]
		[Address(RVA = "0xFBA774", Offset = "0xFBA774", VA = "0xFBA774")]
		private void DisplayVF()
		{
		}

		[Token(Token = "0x60001CF")]
		[Address(RVA = "0xFBB024", Offset = "0xFBB024", VA = "0xFBB024")]
		private void DisplayBBox(Color color)
		{
		}

		[Token(Token = "0x60001D0")]
		[Address(RVA = "0xFBB278", Offset = "0xFBB278", VA = "0xFBB278")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x60001D1")]
		[Address(RVA = "0xFBB2C4", Offset = "0xFBB2C4", VA = "0xFBB2C4")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60001D2")]
		[Address(RVA = "0xFBB31C", Offset = "0xFBB31C", VA = "0xFBB31C")]
		public VectorField()
		{
		}
	}
	[Token(Token = "0x2000063")]
	[ExecuteInEditMode]
	[AddComponentMenu("Vector Field/Particle Controller")]
	[RequireComponent(typeof(ParticleSystem))]
	public class VectorFieldParticleController : MonoBehaviour
	{
		[Token(Token = "0x2000064")]
		public enum ForceBlendingMode
		{
			[Token(Token = "0x40001D2")]
			ReplaceVelocity,
			[Token(Token = "0x40001D3")]
			AddForce
		}

		[Token(Token = "0x40001C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0f, 1f)]
		public float Tightness;

		[Token(Token = "0x40001C7")]
		private const float MinimalInfluence = 0.05f;

		[Token(Token = "0x40001C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float Multiplier;

		[Token(Token = "0x40001C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool AffectedByAllVF;

		[Token(Token = "0x40001CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<VectorField> VFRestrictedList;

		[Token(Token = "0x40001CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool AnimateTightness;

		[Token(Token = "0x40001CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AnimationCurve TightnessOverTime;

		[Token(Token = "0x40001CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool AnimateMultiplier;

		[Token(Token = "0x40001CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public AnimationCurve MultiplierOverTime;

		[Token(Token = "0x40001CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private ParticleSystem.Particle[] particles;

		[Token(Token = "0x40001D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private ParticleSystem ps;

		[Token(Token = "0x60001D4")]
		[Address(RVA = "0xFBB4E4", Offset = "0xFBB4E4", VA = "0xFBB4E4")]
		private void Awake()
		{
		}

		[Token(Token = "0x60001D5")]
		[Address(RVA = "0xFBB574", Offset = "0xFBB574", VA = "0xFBB574")]
		private float hlslSmoothstep(float min, float max, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60001D6")]
		[Address(RVA = "0xFBB5AC", Offset = "0xFBB5AC", VA = "0xFBB5AC")]
		private void Update()
		{
		}

		[Token(Token = "0x60001D7")]
		[Address(RVA = "0xFBB9A0", Offset = "0xFBB9A0", VA = "0xFBB9A0")]
		public VectorFieldParticleController()
		{
		}
	}
	[Token(Token = "0x2000065")]
	[RequireComponent(typeof(ParticleSystem))]
	[AddComponentMenu("Vector Field/Particle Emitter")]
	[ExecuteInEditMode]
	public class VectorFieldParticleEmitter : MonoBehaviour
	{
		[Token(Token = "0x2000066")]
		public enum Emission
		{
			[Token(Token = "0x40001DC")]
			VectorOrigins,
			[Token(Token = "0x40001DD")]
			InsideField,
			[Token(Token = "0x40001DE")]
			Corners,
			[Token(Token = "0x40001DF")]
			Edges,
			[Token(Token = "0x40001E0")]
			Surface,
			[Token(Token = "0x40001E1")]
			FaceXPositive,
			[Token(Token = "0x40001E2")]
			FaceXNegative,
			[Token(Token = "0x40001E3")]
			FaceYPositive,
			[Token(Token = "0x40001E4")]
			FaceYNegative,
			[Token(Token = "0x40001E5")]
			FaceZPositive,
			[Token(Token = "0x40001E6")]
			FaceZNegative
		}

		[Token(Token = "0x40001D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VectorField VectorFieldSource;

		[Token(Token = "0x40001D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Emission EmissionType;

		[Token(Token = "0x40001D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Range(0f, 1f)]
		public float Coverage;

		[Token(Token = "0x40001D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ParticleSystem ps;

		[Token(Token = "0x40001D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private ParticleSystem.EmitParams emitParams;

		[Token(Token = "0x40001D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private float emissionRate;

		[Token(Token = "0x40001DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private float timer;

		[Token(Token = "0x60001D8")]
		[Address(RVA = "0xFBBA9C", Offset = "0xFBBA9C", VA = "0xFBBA9C")]
		private void Awake()
		{
		}

		[Token(Token = "0x60001D9")]
		[Address(RVA = "0xFBBB8C", Offset = "0xFBBB8C", VA = "0xFBBB8C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60001DA")]
		[Address(RVA = "0xFBC214", Offset = "0xFBC214", VA = "0xFBC214")]
		public VectorFieldParticleEmitter()
		{
		}
	}
	[Token(Token = "0x2000067")]
	[RequireComponent(typeof(Rigidbody))]
	[AddComponentMenu("Vector Field/Rigidbody Controller")]
	[ExecuteInEditMode]
	public class VectorFieldRigidBodyController : MonoBehaviour
	{
		[Token(Token = "0x2000068")]
		public enum ForceBlendingMode
		{
			[Token(Token = "0x40001EE")]
			ReplaceVelocity,
			[Token(Token = "0x40001EF")]
			AddForce
		}

		[Token(Token = "0x40001E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0f, 1f)]
		public float Tightness;

		[Token(Token = "0x40001E8")]
		private const float MinimalInfluence = 0.05f;

		[Token(Token = "0x40001E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float Multiplier;

		[Token(Token = "0x40001EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool AffectedByAllVF;

		[Token(Token = "0x40001EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<VectorField> VFRestrictedList;

		[Token(Token = "0x40001EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Rigidbody rb;

		[Token(Token = "0x60001DB")]
		[Address(RVA = "0xFBC224", Offset = "0xFBC224", VA = "0xFBC224")]
		private void Awake()
		{
		}

		[Token(Token = "0x60001DC")]
		[Address(RVA = "0xFBC27C", Offset = "0xFBC27C", VA = "0xFBC27C")]
		private float hlslSmoothstep(float min, float max, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60001DD")]
		[Address(RVA = "0xFBC2B4", Offset = "0xFBC2B4", VA = "0xFBC2B4")]
		private void Update()
		{
		}

		[Token(Token = "0x60001DE")]
		[Address(RVA = "0xFBC49C", Offset = "0xFBC49C", VA = "0xFBC49C")]
		public VectorFieldRigidBodyController()
		{
		}
	}
}
namespace UTJ.Alembic
{
	[Token(Token = "0x2000069")]
	public enum aiAspectRatioMode
	{
		[Token(Token = "0x40001F1")]
		CurrentResolution,
		[Token(Token = "0x40001F2")]
		DefaultResolution,
		[Token(Token = "0x40001F3")]
		CameraAperture
	}
	[Token(Token = "0x200006A")]
	public enum aiNormalsMode
	{
		[Token(Token = "0x40001F5")]
		Import,
		[Token(Token = "0x40001F6")]
		CalculateIfMissing,
		[Token(Token = "0x40001F7")]
		AlwaysCalculate,
		[Token(Token = "0x40001F8")]
		None
	}
	[Token(Token = "0x200006B")]
	public enum aiTangentsMode
	{
		[Token(Token = "0x40001FA")]
		None,
		[Token(Token = "0x40001FB")]
		Calculate
	}
	[Token(Token = "0x200006C")]
	public enum aiTopologyVariance
	{
		[Token(Token = "0x40001FD")]
		Constant,
		[Token(Token = "0x40001FE")]
		Homogeneous,
		[Token(Token = "0x40001FF")]
		Heterogeneous
	}
	[Token(Token = "0x200006D")]
	public enum aiTopology
	{
		[Token(Token = "0x4000201")]
		Points,
		[Token(Token = "0x4000202")]
		Lines,
		[Token(Token = "0x4000203")]
		Triangles,
		[Token(Token = "0x4000204")]
		Quads
	}
	[Token(Token = "0x200006E")]
	public enum aiTimeSamplingType
	{
		[Token(Token = "0x4000206")]
		Uniform,
		[Token(Token = "0x4000207")]
		Cyclic,
		[Token(Token = "0x4000208")]
		Acyclic
	}
	[Token(Token = "0x200006F")]
	public enum aiPropertyType
	{
		[Token(Token = "0x400020A")]
		Unknown = 0,
		[Token(Token = "0x400020B")]
		Bool = 1,
		[Token(Token = "0x400020C")]
		Int = 2,
		[Token(Token = "0x400020D")]
		UInt = 3,
		[Token(Token = "0x400020E")]
		Float = 4,
		[Token(Token = "0x400020F")]
		Float2 = 5,
		[Token(Token = "0x4000210")]
		Float3 = 6,
		[Token(Token = "0x4000211")]
		Float4 = 7,
		[Token(Token = "0x4000212")]
		Float4x4 = 8,
		[Token(Token = "0x4000213")]
		BoolArray = 9,
		[Token(Token = "0x4000214")]
		IntArray = 10,
		[Token(Token = "0x4000215")]
		UIntArray = 11,
		[Token(Token = "0x4000216")]
		FloatArray = 12,
		[Token(Token = "0x4000217")]
		Float2Array = 13,
		[Token(Token = "0x4000218")]
		Float3Array = 14,
		[Token(Token = "0x4000219")]
		Float4Array = 15,
		[Token(Token = "0x400021A")]
		Float4x4Array = 16,
		[Token(Token = "0x400021B")]
		ScalarTypeBegin = 1,
		[Token(Token = "0x400021C")]
		ScalarTypeEnd = 8,
		[Token(Token = "0x400021D")]
		ArrayTypeBegin = 9,
		[Token(Token = "0x400021E")]
		ArrayTypeEnd = 16
	}
	[Token(Token = "0x2000070")]
	public struct aiConfig
	{
		[Token(Token = "0x400021F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public aiNormalsMode normalsMode;

		[Token(Token = "0x4000220")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public aiTangentsMode tangentsMode;

		[Token(Token = "0x4000221")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float scaleFactor;

		[Token(Token = "0x4000222")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float aspectRatio;

		[Token(Token = "0x4000223")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float vertexMotionScale;

		[Token(Token = "0x4000224")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int splitUnit;

		[Token(Token = "0x4000225")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Bool swapHandedness;

		[Token(Token = "0x4000226")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public Bool flipFaces;

		[Token(Token = "0x4000227")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public Bool interpolateSamples;

		[Token(Token = "0x4000228")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
		public Bool turnQuadEdges;

		[Token(Token = "0x4000229")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Bool asyncLoad;

		[Token(Token = "0x400022A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		public Bool importPointPolygon;

		[Token(Token = "0x400022B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
		public Bool importLinePolygon;

		[Token(Token = "0x400022C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F")]
		public Bool importTrianglePolygon;

		[Token(Token = "0x60001DF")]
		[Address(RVA = "0xFBC534", Offset = "0xFBC534", VA = "0xFBC534")]
		public void SetDefaults()
		{
		}
	}
	[Token(Token = "0x2000071")]
	public struct aiSampleSelector
	{
		[Token(Token = "0x400022D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong requestedIndex;

		[Token(Token = "0x400022E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public double requestedTime;

		[Token(Token = "0x400022F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int requestedTimeIndexType;
	}
	[Token(Token = "0x2000072")]
	public struct aiMeshSummary
	{
		[Token(Token = "0x4000230")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public aiTopologyVariance topologyVariance;

		[Token(Token = "0x4000231")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public Bool hasVelocities;

		[Token(Token = "0x4000232")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5")]
		public Bool hasNormals;

		[Token(Token = "0x4000233")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6")]
		public Bool hasTangents;

		[Token(Token = "0x4000234")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7")]
		public Bool hasUV0;

		[Token(Token = "0x4000235")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Bool hasUV1;

		[Token(Token = "0x4000236")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
		public Bool hasColors;

		[Token(Token = "0x4000237")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA")]
		public Bool constantPoints;

		[Token(Token = "0x4000238")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB")]
		public Bool constantVelocities;

		[Token(Token = "0x4000239")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Bool constantNormals;

		[Token(Token = "0x400023A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
		public Bool constantTangents;

		[Token(Token = "0x400023B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE")]
		public Bool constantUV0;

		[Token(Token = "0x400023C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF")]
		public Bool constantUV1;

		[Token(Token = "0x400023D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Bool constantColors;
	}
	[Token(Token = "0x2000073")]
	public struct aiMeshSampleSummary
	{
		[Token(Token = "0x400023E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Bool visibility;

		[Token(Token = "0x400023F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int splitCount;

		[Token(Token = "0x4000240")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int submeshCount;

		[Token(Token = "0x4000241")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int vertexCount;

		[Token(Token = "0x4000242")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int indexCount;

		[Token(Token = "0x4000243")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Bool topologyChanged;
	}
	[Token(Token = "0x2000074")]
	public struct aiMeshSplitSummary
	{
		[Token(Token = "0x4000244")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int submeshCount;

		[Token(Token = "0x4000245")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int submeshOffset;

		[Token(Token = "0x4000246")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int vertexCount;

		[Token(Token = "0x4000247")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int vertexOffset;

		[Token(Token = "0x4000248")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int indexCount;

		[Token(Token = "0x4000249")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int indexOffset;
	}
	[Token(Token = "0x2000075")]
	public struct aiSubmeshSummary
	{
		[Token(Token = "0x400024A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int splitIndex;

		[Token(Token = "0x400024B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int submeshIndex;

		[Token(Token = "0x400024C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int indexCount;

		[Token(Token = "0x400024D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public aiTopology topology;
	}
	[Token(Token = "0x2000076")]
	public struct aiPolyMeshData
	{
		[Token(Token = "0x400024E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr positions;

		[Token(Token = "0x400024F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public IntPtr velocities;

		[Token(Token = "0x4000250")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public IntPtr normals;

		[Token(Token = "0x4000251")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public IntPtr tangents;

		[Token(Token = "0x4000252")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public IntPtr uv0;

		[Token(Token = "0x4000253")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public IntPtr uv1;

		[Token(Token = "0x4000254")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public IntPtr colors;

		[Token(Token = "0x4000255")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IntPtr indices;

		[Token(Token = "0x4000256")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int vertexCount;

		[Token(Token = "0x4000257")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public int indexCount;

		[Token(Token = "0x4000258")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector3 center;

		[Token(Token = "0x4000259")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public Vector3 extents;
	}
	[Token(Token = "0x2000077")]
	public struct aiSubmeshData
	{
		[Token(Token = "0x400025A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr indices;
	}
	[Token(Token = "0x2000078")]
	public struct aiXformData
	{
		[Token(Token = "0x400025B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Bool visibility;

		[Token(Token = "0x400025C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public Vector3 translation;

		[Token(Token = "0x400025D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Quaternion rotation;

		[Token(Token = "0x400025E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 scale;

		[Token(Token = "0x400025F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Bool inherits;
	}
	[Token(Token = "0x2000079")]
	public struct aiCameraData
	{
		[Token(Token = "0x4000260")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Bool visibility;

		[Token(Token = "0x4000261")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float nearClippingPlane;

		[Token(Token = "0x4000262")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float farClippingPlane;

		[Token(Token = "0x4000263")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float fieldOfView;

		[Token(Token = "0x4000264")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float aspectRatio;

		[Token(Token = "0x4000265")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float focusDistance;

		[Token(Token = "0x4000266")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float focalLength;

		[Token(Token = "0x4000267")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float aperture;
	}
	[Token(Token = "0x200007A")]
	public struct aiPointsSummary
	{
		[Token(Token = "0x4000268")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Bool hasVelocities;

		[Token(Token = "0x4000269")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		public Bool hasIDs;

		[Token(Token = "0x400026A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		public Bool constantPoints;

		[Token(Token = "0x400026B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3")]
		public Bool constantVelocities;

		[Token(Token = "0x400026C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public Bool constantIDs;
	}
	[Token(Token = "0x200007B")]
	public struct aiPointsSampleSummary
	{
		[Token(Token = "0x400026D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int count;
	}
	[Token(Token = "0x200007C")]
	public struct aiPointsData
	{
		[Token(Token = "0x400026E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Bool visibility;

		[Token(Token = "0x400026F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public IntPtr points;

		[Token(Token = "0x4000270")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public IntPtr velocities;

		[Token(Token = "0x4000271")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public IntPtr ids;

		[Token(Token = "0x4000272")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int count;

		[Token(Token = "0x4000273")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector3 boundsCenter;

		[Token(Token = "0x4000274")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 boundsExtents;
	}
	[Token(Token = "0x200007D")]
	public struct aiPropertyData
	{
		[Token(Token = "0x4000275")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr data;

		[Token(Token = "0x4000276")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int size;

		[Token(Token = "0x4000277")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private aiPropertyType type;
	}
	[Token(Token = "0x200007E")]
	public struct aiContext
	{
		[Token(Token = "0x4000278")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr self;

		[Token(Token = "0x17000042")]
		public aiObject topObject
		{
			[Token(Token = "0x60001E7")]
			[Address(RVA = "0xFBC964", Offset = "0xFBC964", VA = "0xFBC964")]
			get
			{
				return default(aiObject);
			}
		}

		[Token(Token = "0x17000043")]
		public int timeSamplingCount
		{
			[Token(Token = "0x60001E8")]
			[Address(RVA = "0xFBC9E8", Offset = "0xFBC9E8", VA = "0xFBC9E8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60001E0")]
		[Address(RVA = "0xFBC56C", Offset = "0xFBC56C", VA = "0xFBC56C")]
		public static implicit operator bool(aiContext v)
		{
			return default(bool);
		}

		[Token(Token = "0x60001E1")]
		[Address(RVA = "0xFBC5B0", Offset = "0xFBC5B0", VA = "0xFBC5B0")]
		public static aiContext Create(int uid)
		{
			return default(aiContext);
		}

		[Token(Token = "0x60001E2")]
		[Address(RVA = "0xFBC62C", Offset = "0xFBC62C", VA = "0xFBC62C")]
		public static void DestroyByPath(string path)
		{
		}

		[Token(Token = "0x60001E3")]
		[Address(RVA = "0xFBC6BC", Offset = "0xFBC6BC", VA = "0xFBC6BC")]
		public void Destroy()
		{
		}

		[Token(Token = "0x60001E4")]
		[Address(RVA = "0xFBC77C", Offset = "0xFBC77C", VA = "0xFBC77C")]
		public bool Load(string path)
		{
			return default(bool);
		}

		[Token(Token = "0x60001E5")]
		[Address(RVA = "0xFBC844", Offset = "0xFBC844", VA = "0xFBC844")]
		public void SetConfig(ref aiConfig conf)
		{
		}

		[Token(Token = "0x60001E6")]
		[Address(RVA = "0xFBC8D0", Offset = "0xFBC8D0", VA = "0xFBC8D0")]
		public void UpdateSamples(double time)
		{
		}

		[Token(Token = "0x60001E9")]
		[Address(RVA = "0xFBCA6C", Offset = "0xFBCA6C", VA = "0xFBCA6C")]
		public aiTimeSampling GetTimeSampling(int i)
		{
			return default(aiTimeSampling);
		}

		[Token(Token = "0x60001EA")]
		[Address(RVA = "0xFBCAF8", Offset = "0xFBCAF8", VA = "0xFBCAF8")]
		public void GetTimeRange(ref double begin, ref double end)
		{
		}

		[PreserveSig]
		[Token(Token = "0x60001EB")]
		[Address(RVA = "0xFBC630", Offset = "0xFBC630", VA = "0xFBC630")]
		public static extern void aiClearContextsWithPath(string path);

		[PreserveSig]
		[Token(Token = "0x60001EC")]
		[Address(RVA = "0xFBC5B4", Offset = "0xFBC5B4", VA = "0xFBC5B4")]
		public static extern aiContext aiContextCreate(int uid);

		[PreserveSig]
		[Token(Token = "0x60001ED")]
		[Address(RVA = "0xFBC700", Offset = "0xFBC700", VA = "0xFBC700")]
		public static extern void aiContextDestroy(IntPtr ctx);

		[PreserveSig]
		[Token(Token = "0x60001EE")]
		[Address(RVA = "0xFBC798", Offset = "0xFBC798", VA = "0xFBC798")]
		private static extern Bool aiContextLoad(IntPtr ctx, string path);

		[PreserveSig]
		[Token(Token = "0x60001EF")]
		[Address(RVA = "0xFBC84C", Offset = "0xFBC84C", VA = "0xFBC84C")]
		private static extern void aiContextSetConfig(IntPtr ctx, ref aiConfig conf);

		[PreserveSig]
		[Token(Token = "0x60001F0")]
		[Address(RVA = "0xFBC9F0", Offset = "0xFBC9F0", VA = "0xFBC9F0")]
		private static extern int aiContextGetTimeSamplingCount(IntPtr ctx);

		[PreserveSig]
		[Token(Token = "0x60001F1")]
		[Address(RVA = "0xFBCA74", Offset = "0xFBCA74", VA = "0xFBCA74")]
		private static extern aiTimeSampling aiContextGetTimeSampling(IntPtr ctx, int i);

		[PreserveSig]
		[Token(Token = "0x60001F2")]
		[Address(RVA = "0xFBCB00", Offset = "0xFBCB00", VA = "0xFBCB00")]
		private static extern void aiContextGetTimeRange(IntPtr ctx, ref double begin, ref double end);

		[PreserveSig]
		[Token(Token = "0x60001F3")]
		[Address(RVA = "0xFBC96C", Offset = "0xFBC96C", VA = "0xFBC96C")]
		private static extern aiObject aiContextGetTopObject(IntPtr ctx);

		[PreserveSig]
		[Token(Token = "0x60001F4")]
		[Address(RVA = "0xFBC8D8", Offset = "0xFBC8D8", VA = "0xFBC8D8")]
		private static extern void aiContextUpdateSamples(IntPtr ctx, double time);
	}
	[Token(Token = "0x200007F")]
	public struct aiTimeSampling
	{
		[Token(Token = "0x4000279")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr self;

		[Token(Token = "0x17000044")]
		public int sampleCount
		{
			[Token(Token = "0x60001F5")]
			[Address(RVA = "0xFBCB94", Offset = "0xFBCB94", VA = "0xFBCB94")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60001F6")]
		[Address(RVA = "0xFBCC18", Offset = "0xFBCC18", VA = "0xFBCC18")]
		public double GetTime(int index)
		{
			return default(double);
		}

		[Token(Token = "0x60001F7")]
		[Address(RVA = "0xFBCCA4", Offset = "0xFBCCA4", VA = "0xFBCCA4")]
		public void GetRange(ref double start, ref double end)
		{
		}

		[PreserveSig]
		[Token(Token = "0x60001F8")]
		[Address(RVA = "0xFBCB9C", Offset = "0xFBCB9C", VA = "0xFBCB9C")]
		private static extern int aiTimeSamplingGetSampleCount(IntPtr self);

		[PreserveSig]
		[Token(Token = "0x60001F9")]
		[Address(RVA = "0xFBCC20", Offset = "0xFBCC20", VA = "0xFBCC20")]
		private static extern double aiTimeSamplingGetTime(IntPtr self, int index);

		[PreserveSig]
		[Token(Token = "0x60001FA")]
		[Address(RVA = "0xFBCCAC", Offset = "0xFBCCAC", VA = "0xFBCCAC")]
		private static extern void aiTimeSamplingGetRange(IntPtr self, ref double start, ref double end);
	}
	[Token(Token = "0x2000080")]
	public struct aiObject
	{
		[Token(Token = "0x400027A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr self;

		[Token(Token = "0x17000045")]
		public string name
		{
			[Token(Token = "0x60001FC")]
			[Address(RVA = "0xFBCD84", Offset = "0xFBCD84", VA = "0xFBCD84")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000046")]
		public string fullname
		{
			[Token(Token = "0x60001FD")]
			[Address(RVA = "0xFBCE68", Offset = "0xFBCE68", VA = "0xFBCE68")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000047")]
		public bool enabled
		{
			[Token(Token = "0x60001FE")]
			[Address(RVA = "0xFBCF4C", Offset = "0xFBCF4C", VA = "0xFBCF4C")]
			set
			{
			}
		}

		[Token(Token = "0x17000048")]
		public int childCount
		{
			[Token(Token = "0x60001FF")]
			[Address(RVA = "0xFBCFDC", Offset = "0xFBCFDC", VA = "0xFBCFDC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60001FB")]
		[Address(RVA = "0xFBCD40", Offset = "0xFBCD40", VA = "0xFBCD40")]
		public static implicit operator bool(aiObject v)
		{
			return default(bool);
		}

		[Token(Token = "0x6000200")]
		[Address(RVA = "0xFBD060", Offset = "0xFBD060", VA = "0xFBD060")]
		public aiObject GetChild(int i)
		{
			return default(aiObject);
		}

		[Token(Token = "0x6000201")]
		[Address(RVA = "0xFBD0EC", Offset = "0xFBD0EC", VA = "0xFBD0EC")]
		public aiXform AsXform()
		{
			return default(aiXform);
		}

		[Token(Token = "0x6000202")]
		[Address(RVA = "0xFBD170", Offset = "0xFBD170", VA = "0xFBD170")]
		public aiCamera AsCamera()
		{
			return default(aiCamera);
		}

		[Token(Token = "0x6000203")]
		[Address(RVA = "0xFBD1F4", Offset = "0xFBD1F4", VA = "0xFBD1F4")]
		public aiPoints AsPoints()
		{
			return default(aiPoints);
		}

		[Token(Token = "0x6000204")]
		[Address(RVA = "0xFBD278", Offset = "0xFBD278", VA = "0xFBD278")]
		public aiPolyMesh AsPolyMesh()
		{
			return default(aiPolyMesh);
		}

		[Token(Token = "0x6000205")]
		[Address(RVA = "0xFBD2FC", Offset = "0xFBD2FC", VA = "0xFBD2FC")]
		public void EachChild(Action<aiObject> act)
		{
		}

		[PreserveSig]
		[Token(Token = "0x6000206")]
		[Address(RVA = "0xFBCFE4", Offset = "0xFBCFE4", VA = "0xFBCFE4")]
		private static extern int aiObjectGetNumChildren(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000207")]
		[Address(RVA = "0xFBD068", Offset = "0xFBD068", VA = "0xFBD068")]
		private static extern aiObject aiObjectGetChild(IntPtr obj, int i);

		[PreserveSig]
		[Token(Token = "0x6000208")]
		[Address(RVA = "0xFBCF58", Offset = "0xFBCF58", VA = "0xFBCF58")]
		private static extern void aiObjectSetEnabled(IntPtr obj, Bool v);

		[PreserveSig]
		[Token(Token = "0x6000209")]
		[Address(RVA = "0xFBCDEC", Offset = "0xFBCDEC", VA = "0xFBCDEC")]
		private static extern IntPtr aiObjectGetName(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600020A")]
		[Address(RVA = "0xFBCED0", Offset = "0xFBCED0", VA = "0xFBCED0")]
		private static extern IntPtr aiObjectGetFullName(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600020B")]
		[Address(RVA = "0xFBD0F4", Offset = "0xFBD0F4", VA = "0xFBD0F4")]
		private static extern aiXform aiObjectAsXform(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600020C")]
		[Address(RVA = "0xFBD178", Offset = "0xFBD178", VA = "0xFBD178")]
		private static extern aiCamera aiObjectAsCamera(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600020D")]
		[Address(RVA = "0xFBD1FC", Offset = "0xFBD1FC", VA = "0xFBD1FC")]
		private static extern aiPoints aiObjectAsPoints(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600020E")]
		[Address(RVA = "0xFBD280", Offset = "0xFBD280", VA = "0xFBD280")]
		private static extern aiPolyMesh aiObjectAsPolyMesh(IntPtr obj);
	}
	[Token(Token = "0x2000081")]
	public struct aiSchema
	{
		[Token(Token = "0x400027B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr self;

		[Token(Token = "0x17000049")]
		public bool isConstant
		{
			[Token(Token = "0x6000214")]
			[Address(RVA = "0xFBD3C0", Offset = "0xFBD3C0", VA = "0xFBD3C0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700004A")]
		public bool isDataUpdated
		{
			[Token(Token = "0x6000215")]
			[Address(RVA = "0xFBD45C", Offset = "0xFBD45C", VA = "0xFBD45C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700004B")]
		public aiSample sample
		{
			[Token(Token = "0x6000216")]
			[Address(RVA = "0xFBD580", Offset = "0xFBD580", VA = "0xFBD580")]
			get
			{
				return default(aiSample);
			}
		}

		[Token(Token = "0x600020F")]
		[Address(RVA = "0xFBD36C", Offset = "0xFBD36C", VA = "0xFBD36C")]
		public static implicit operator bool(aiSchema v)
		{
			return default(bool);
		}

		[Token(Token = "0x6000210")]
		[Address(RVA = "0xFBD3B0", Offset = "0xFBD3B0", VA = "0xFBD3B0")]
		public static explicit operator aiXform(aiSchema v)
		{
			return default(aiXform);
		}

		[Token(Token = "0x6000211")]
		[Address(RVA = "0xFBD3B4", Offset = "0xFBD3B4", VA = "0xFBD3B4")]
		public static explicit operator aiCamera(aiSchema v)
		{
			return default(aiCamera);
		}

		[Token(Token = "0x6000212")]
		[Address(RVA = "0xFBD3B8", Offset = "0xFBD3B8", VA = "0xFBD3B8")]
		public static explicit operator aiPolyMesh(aiSchema v)
		{
			return default(aiPolyMesh);
		}

		[Token(Token = "0x6000213")]
		[Address(RVA = "0xFBD3BC", Offset = "0xFBD3BC", VA = "0xFBD3BC")]
		public static explicit operator aiPoints(aiSchema v)
		{
			return default(aiPoints);
		}

		[Token(Token = "0x6000217")]
		[Address(RVA = "0xFBD604", Offset = "0xFBD604", VA = "0xFBD604")]
		public void UpdateSample(ref aiSampleSelector ss)
		{
		}

		[PreserveSig]
		[Token(Token = "0x6000218")]
		[Address(RVA = "0xFBD60C", Offset = "0xFBD60C", VA = "0xFBD60C")]
		private static extern void aiSchemaUpdateSample(IntPtr schema, ref aiSampleSelector ss);

		[PreserveSig]
		[Token(Token = "0x6000219")]
		[Address(RVA = "0xFBD484", Offset = "0xFBD484", VA = "0xFBD484")]
		private static extern void aiSchemaSync(IntPtr schema);

		[PreserveSig]
		[Token(Token = "0x600021A")]
		[Address(RVA = "0xFBD588", Offset = "0xFBD588", VA = "0xFBD588")]
		private static extern aiSample aiSchemaGetSample(IntPtr schema);

		[PreserveSig]
		[Token(Token = "0x600021B")]
		[Address(RVA = "0xFBD3DC", Offset = "0xFBD3DC", VA = "0xFBD3DC")]
		private static extern Bool aiSchemaIsConstant(IntPtr schema);

		[PreserveSig]
		[Token(Token = "0x600021C")]
		[Address(RVA = "0xFBD500", Offset = "0xFBD500", VA = "0xFBD500")]
		private static extern Bool aiSchemaIsDataUpdated(IntPtr schema);

		[PreserveSig]
		[Token(Token = "0x600021D")]
		[Address(RVA = "0xFBD690", Offset = "0xFBD690", VA = "0xFBD690")]
		private static extern int aiSchemaGetNumProperties(IntPtr schema);

		[PreserveSig]
		[Token(Token = "0x600021E")]
		[Address(RVA = "0xFBD70C", Offset = "0xFBD70C", VA = "0xFBD70C")]
		private static extern aiProperty aiSchemaGetPropertyByIndex(IntPtr schema, int i);

		[PreserveSig]
		[Token(Token = "0x600021F")]
		[Address(RVA = "0xFBD790", Offset = "0xFBD790", VA = "0xFBD790")]
		private static extern aiProperty aiSchemaGetPropertyByName(IntPtr schema, string name);
	}
	[StructLayout(2)]
	[Token(Token = "0x2000082")]
	public struct aiXform
	{
		[Token(Token = "0x400027C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr self;

		[Token(Token = "0x400027D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public aiSchema schema;

		[Token(Token = "0x1700004C")]
		public aiXformSample sample
		{
			[Token(Token = "0x6000222")]
			[Address(RVA = "0xFBD878", Offset = "0xFBD878", VA = "0xFBD878")]
			get
			{
				return default(aiXformSample);
			}
		}

		[Token(Token = "0x6000220")]
		[Address(RVA = "0xFBD830", Offset = "0xFBD830", VA = "0xFBD830")]
		public static implicit operator bool(aiXform v)
		{
			return default(bool);
		}

		[Token(Token = "0x6000221")]
		[Address(RVA = "0xFBD874", Offset = "0xFBD874", VA = "0xFBD874")]
		public static implicit operator aiSchema(aiXform v)
		{
			return default(aiSchema);
		}

		[PreserveSig]
		[Token(Token = "0x6000223")]
		[Address(RVA = "0xFBD880", Offset = "0xFBD880", VA = "0xFBD880")]
		private static extern aiXformSample aiSchemaGetSample(IntPtr schema);
	}
	[StructLayout(2)]
	[Token(Token = "0x2000083")]
	public struct aiCamera
	{
		[Token(Token = "0x400027E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr self;

		[Token(Token = "0x400027F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public aiSchema schema;

		[Token(Token = "0x1700004D")]
		public aiCameraSample sample
		{
			[Token(Token = "0x6000226")]
			[Address(RVA = "0xFBD944", Offset = "0xFBD944", VA = "0xFBD944")]
			get
			{
				return default(aiCameraSample);
			}
		}

		[Token(Token = "0x6000224")]
		[Address(RVA = "0xFBD8FC", Offset = "0xFBD8FC", VA = "0xFBD8FC")]
		public static implicit operator bool(aiCamera v)
		{
			return default(bool);
		}

		[Token(Token = "0x6000225")]
		[Address(RVA = "0xFBD940", Offset = "0xFBD940", VA = "0xFBD940")]
		public static implicit operator aiSchema(aiCamera v)
		{
			return default(aiSchema);
		}

		[PreserveSig]
		[Token(Token = "0x6000227")]
		[Address(RVA = "0xFBD94C", Offset = "0xFBD94C", VA = "0xFBD94C")]
		private static extern aiCameraSample aiSchemaGetSample(IntPtr schema);
	}
	[StructLayout(2)]
	[Token(Token = "0x2000084")]
	public struct aiPolyMesh
	{
		[Token(Token = "0x4000280")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr self;

		[Token(Token = "0x4000281")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public aiSchema schema;

		[Token(Token = "0x1700004E")]
		public aiPolyMeshSample sample
		{
			[Token(Token = "0x600022A")]
			[Address(RVA = "0xFBDA10", Offset = "0xFBDA10", VA = "0xFBDA10")]
			get
			{
				return default(aiPolyMeshSample);
			}
		}

		[Token(Token = "0x6000228")]
		[Address(RVA = "0xFBD9C8", Offset = "0xFBD9C8", VA = "0xFBD9C8")]
		public static implicit operator bool(aiPolyMesh v)
		{
			return default(bool);
		}

		[Token(Token = "0x6000229")]
		[Address(RVA = "0xFBDA0C", Offset = "0xFBDA0C", VA = "0xFBDA0C")]
		public static implicit operator aiSchema(aiPolyMesh v)
		{
			return default(aiSchema);
		}

		[Token(Token = "0x600022B")]
		[Address(RVA = "0xFBDA94", Offset = "0xFBDA94", VA = "0xFBDA94")]
		public void GetSummary(ref aiMeshSummary dst)
		{
		}

		[PreserveSig]
		[Token(Token = "0x600022C")]
		[Address(RVA = "0xFBDA9C", Offset = "0xFBDA9C", VA = "0xFBDA9C")]
		private static extern void aiPolyMeshGetSummary(IntPtr schema, ref aiMeshSummary dst);

		[PreserveSig]
		[Token(Token = "0x600022D")]
		[Address(RVA = "0xFBDA18", Offset = "0xFBDA18", VA = "0xFBDA18")]
		private static extern aiPolyMeshSample aiSchemaGetSample(IntPtr schema);
	}
	[StructLayout(2)]
	[Token(Token = "0x2000085")]
	public struct aiPoints
	{
		[Token(Token = "0x4000282")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr self;

		[Token(Token = "0x4000283")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public aiSchema schema;

		[Token(Token = "0x1700004F")]
		public aiPointsSample sample
		{
			[Token(Token = "0x6000230")]
			[Address(RVA = "0xFBDB68", Offset = "0xFBDB68", VA = "0xFBDB68")]
			get
			{
				return default(aiPointsSample);
			}
		}

		[Token(Token = "0x17000050")]
		public bool sort
		{
			[Token(Token = "0x6000231")]
			[Address(RVA = "0xFBDBEC", Offset = "0xFBDBEC", VA = "0xFBDBEC")]
			set
			{
			}
		}

		[Token(Token = "0x17000051")]
		public Vector3 sortBasePosition
		{
			[Token(Token = "0x6000232")]
			[Address(RVA = "0xFBDC7C", Offset = "0xFBDC7C", VA = "0xFBDC7C")]
			set
			{
			}
		}

		[Token(Token = "0x600022E")]
		[Address(RVA = "0xFBDB20", Offset = "0xFBDB20", VA = "0xFBDB20")]
		public static implicit operator bool(aiPoints v)
		{
			return default(bool);
		}

		[Token(Token = "0x600022F")]
		[Address(RVA = "0xFBDB64", Offset = "0xFBDB64", VA = "0xFBDB64")]
		public static implicit operator aiSchema(aiPoints v)
		{
			return default(aiSchema);
		}

		[Token(Token = "0x6000233")]
		[Address(RVA = "0xFBDD28", Offset = "0xFBDD28", VA = "0xFBDD28")]
		public void GetSummary(ref aiPointsSummary dst)
		{
		}

		[PreserveSig]
		[Token(Token = "0x6000234")]
		[Address(RVA = "0xFBDB70", Offset = "0xFBDB70", VA = "0xFBDB70")]
		private static extern aiPointsSample aiSchemaGetSample(IntPtr schema);

		[PreserveSig]
		[Token(Token = "0x6000235")]
		[Address(RVA = "0xFBDBF8", Offset = "0xFBDBF8", VA = "0xFBDBF8")]
		private static extern void aiPointsSetSort(IntPtr schema, Bool v);

		[PreserveSig]
		[Token(Token = "0x6000236")]
		[Address(RVA = "0xFBDC84", Offset = "0xFBDC84", VA = "0xFBDC84")]
		private static extern void aiPointsSetSortBasePosition(IntPtr schema, Vector3 v);

		[PreserveSig]
		[Token(Token = "0x6000237")]
		[Address(RVA = "0xFBDD30", Offset = "0xFBDD30", VA = "0xFBDD30")]
		private static extern void aiPointsGetSummary(IntPtr schema, ref aiPointsSummary dst);
	}
	[Token(Token = "0x2000086")]
	public struct aiSample
	{
		[Token(Token = "0x4000284")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr self;

		[Token(Token = "0x6000238")]
		[Address(RVA = "0xFBDDB4", Offset = "0xFBDDB4", VA = "0xFBDDB4")]
		public static implicit operator bool(aiSample v)
		{
			return default(bool);
		}

		[Token(Token = "0x6000239")]
		[Address(RVA = "0xFBDDF8", Offset = "0xFBDDF8", VA = "0xFBDDF8")]
		public static explicit operator aiXformSample(aiSample v)
		{
			return default(aiXformSample);
		}

		[Token(Token = "0x600023A")]
		[Address(RVA = "0xFBDDFC", Offset = "0xFBDDFC", VA = "0xFBDDFC")]
		public static explicit operator aiCameraSample(aiSample v)
		{
			return default(aiCameraSample);
		}

		[Token(Token = "0x600023B")]
		[Address(RVA = "0xFBDE00", Offset = "0xFBDE00", VA = "0xFBDE00")]
		public static explicit operator aiPolyMeshSample(aiSample v)
		{
			return default(aiPolyMeshSample);
		}

		[Token(Token = "0x600023C")]
		[Address(RVA = "0xFBDE04", Offset = "0xFBDE04", VA = "0xFBDE04")]
		public static explicit operator aiPointsSample(aiSample v)
		{
			return default(aiPointsSample);
		}
	}
	[Token(Token = "0x2000087")]
	public struct aiXformSample
	{
		[Token(Token = "0x4000285")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr self;

		[Token(Token = "0x600023D")]
		[Address(RVA = "0xFBDE08", Offset = "0xFBDE08", VA = "0xFBDE08")]
		public static implicit operator bool(aiXformSample v)
		{
			return default(bool);
		}

		[Token(Token = "0x600023E")]
		[Address(RVA = "0xFBDE4C", Offset = "0xFBDE4C", VA = "0xFBDE4C")]
		public static implicit operator aiSample(aiXformSample v)
		{
			return default(aiSample);
		}

		[Token(Token = "0x600023F")]
		[Address(RVA = "0xFBDE50", Offset = "0xFBDE50", VA = "0xFBDE50")]
		public void GetData(ref aiXformData dst)
		{
		}

		[PreserveSig]
		[Token(Token = "0x6000240")]
		[Address(RVA = "0xFBDE58", Offset = "0xFBDE58", VA = "0xFBDE58")]
		public static extern void aiXformGetData(IntPtr sample, ref aiXformData data);
	}
	[Token(Token = "0x2000088")]
	public struct aiCameraSample
	{
		[Token(Token = "0x4000286")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr self;

		[Token(Token = "0x6000241")]
		[Address(RVA = "0xFBDEDC", Offset = "0xFBDEDC", VA = "0xFBDEDC")]
		public static implicit operator bool(aiCameraSample v)
		{
			return default(bool);
		}

		[Token(Token = "0x6000242")]
		[Address(RVA = "0xFBDF20", Offset = "0xFBDF20", VA = "0xFBDF20")]
		public static implicit operator aiSample(aiCameraSample v)
		{
			return default(aiSample);
		}

		[Token(Token = "0x6000243")]
		[Address(RVA = "0xFBDF24", Offset = "0xFBDF24", VA = "0xFBDF24")]
		public void GetData(ref aiCameraData dst)
		{
		}

		[PreserveSig]
		[Token(Token = "0x6000244")]
		[Address(RVA = "0xFBDF2C", Offset = "0xFBDF2C", VA = "0xFBDF2C")]
		public static extern void aiCameraGetData(IntPtr sample, ref aiCameraData dst);
	}
	[Token(Token = "0x2000089")]
	public struct aiPolyMeshSample
	{
		[Token(Token = "0x4000287")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr self;

		[Token(Token = "0x6000245")]
		[Address(RVA = "0xFBDFB0", Offset = "0xFBDFB0", VA = "0xFBDFB0")]
		public static implicit operator bool(aiPolyMeshSample v)
		{
			return default(bool);
		}

		[Token(Token = "0x6000246")]
		[Address(RVA = "0xFBDFF4", Offset = "0xFBDFF4", VA = "0xFBDFF4")]
		public static implicit operator aiSample(aiPolyMeshSample v)
		{
			return default(aiSample);
		}

		[Token(Token = "0x6000247")]
		[Address(RVA = "0xFBDFF8", Offset = "0xFBDFF8", VA = "0xFBDFF8")]
		public void GetSummary(ref aiMeshSampleSummary dst)
		{
		}

		[Token(Token = "0x6000248")]
		[Address(RVA = "0xFBE084", Offset = "0xFBE084", VA = "0xFBE084")]
		public void GetSplitSummaries(PinnedList<aiMeshSplitSummary> dst)
		{
		}

		[Token(Token = "0x6000249")]
		[Address(RVA = "0xFBE16C", Offset = "0xFBE16C", VA = "0xFBE16C")]
		public void GetSubmeshSummaries(PinnedList<aiSubmeshSummary> dst)
		{
		}

		[Token(Token = "0x600024A")]
		[Address(RVA = "0xFBE254", Offset = "0xFBE254", VA = "0xFBE254")]
		public void FillVertexBuffer(PinnedList<aiPolyMeshData> vbs, PinnedList<aiSubmeshData> ibs)
		{
		}

		[Token(Token = "0x600024B")]
		[Address(RVA = "0xFBE380", Offset = "0xFBE380", VA = "0xFBE380")]
		public void Sync()
		{
		}

		[PreserveSig]
		[Token(Token = "0x600024C")]
		[Address(RVA = "0xFBE000", Offset = "0xFBE000", VA = "0xFBE000")]
		private static extern void aiPolyMeshGetSampleSummary(IntPtr sample, ref aiMeshSampleSummary dst);

		[PreserveSig]
		[Token(Token = "0x600024D")]
		[Address(RVA = "0xFBE0E8", Offset = "0xFBE0E8", VA = "0xFBE0E8")]
		private static extern int aiPolyMeshGetSplitSummaries(IntPtr sample, IntPtr dst);

		[PreserveSig]
		[Token(Token = "0x600024E")]
		[Address(RVA = "0xFBE1D0", Offset = "0xFBE1D0", VA = "0xFBE1D0")]
		private static extern void aiPolyMeshGetSubmeshSummaries(IntPtr sample, IntPtr dst);

		[PreserveSig]
		[Token(Token = "0x600024F")]
		[Address(RVA = "0xFBE2EC", Offset = "0xFBE2EC", VA = "0xFBE2EC")]
		private static extern void aiPolyMeshFillVertexBuffer(IntPtr sample, IntPtr vbs, IntPtr ibs);

		[PreserveSig]
		[Token(Token = "0x6000250")]
		[Address(RVA = "0xFBE388", Offset = "0xFBE388", VA = "0xFBE388")]
		private static extern void aiSampleSync(IntPtr sample);
	}
	[Token(Token = "0x200008A")]
	public struct aiPointsSample
	{
		[Token(Token = "0x4000288")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr self;

		[Token(Token = "0x6000251")]
		[Address(RVA = "0xFBE404", Offset = "0xFBE404", VA = "0xFBE404")]
		public static implicit operator bool(aiPointsSample v)
		{
			return default(bool);
		}

		[Token(Token = "0x6000252")]
		[Address(RVA = "0xFBE448", Offset = "0xFBE448", VA = "0xFBE448")]
		public static implicit operator aiSample(aiPointsSample v)
		{
			return default(aiSample);
		}

		[Token(Token = "0x6000253")]
		[Address(RVA = "0xFBE44C", Offset = "0xFBE44C", VA = "0xFBE44C")]
		public void GetSummary(ref aiPointsSampleSummary dst)
		{
		}

		[Token(Token = "0x6000254")]
		[Address(RVA = "0xFBE4D8", Offset = "0xFBE4D8", VA = "0xFBE4D8")]
		public void FillData(PinnedList<aiPointsData> dst)
		{
		}

		[Token(Token = "0x6000255")]
		[Address(RVA = "0xFBE5BC", Offset = "0xFBE5BC", VA = "0xFBE5BC")]
		public void Sync()
		{
		}

		[PreserveSig]
		[Token(Token = "0x6000256")]
		[Address(RVA = "0xFBE454", Offset = "0xFBE454", VA = "0xFBE454")]
		private static extern void aiPointsGetSampleSummary(IntPtr sample, ref aiPointsSampleSummary dst);

		[PreserveSig]
		[Token(Token = "0x6000257")]
		[Address(RVA = "0xFBE53C", Offset = "0xFBE53C", VA = "0xFBE53C")]
		private static extern void aiPointsFillData(IntPtr sample, IntPtr dst);

		[PreserveSig]
		[Token(Token = "0x6000258")]
		[Address(RVA = "0xFBE5C4", Offset = "0xFBE5C4", VA = "0xFBE5C4")]
		private static extern void aiSampleSync(IntPtr sample);
	}
	[Token(Token = "0x200008B")]
	public struct aiProperty
	{
		[Token(Token = "0x4000289")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr self;

		[Token(Token = "0x6000259")]
		[Address(RVA = "0xFBE640", Offset = "0xFBE640", VA = "0xFBE640")]
		public static implicit operator bool(aiProperty v)
		{
			return default(bool);
		}

		[PreserveSig]
		[Token(Token = "0x600025A")]
		[Address(RVA = "0xFBE684", Offset = "0xFBE684", VA = "0xFBE684")]
		private static extern IntPtr aiPropertyGetName(IntPtr prop);

		[PreserveSig]
		[Token(Token = "0x600025B")]
		[Address(RVA = "0xFBE700", Offset = "0xFBE700", VA = "0xFBE700")]
		private static extern aiPropertyType aiPropertyGetType(IntPtr prop);

		[PreserveSig]
		[Token(Token = "0x600025C")]
		[Address(RVA = "0xFBE77C", Offset = "0xFBE77C", VA = "0xFBE77C")]
		private static extern void aiPropertyGetData(IntPtr prop, aiPropertyData oData);
	}
	[Token(Token = "0x200008C")]
	public class AbcAPI
	{
		[PreserveSig]
		[Token(Token = "0x600025D")]
		[Address(RVA = "0xFBE810", Offset = "0xFBE810", VA = "0xFBE810")]
		public static extern aiSampleSelector aiTimeToSampleSelector(double time);

		[PreserveSig]
		[Token(Token = "0x600025E")]
		[Address(RVA = "0xFBE898", Offset = "0xFBE898", VA = "0xFBE898")]
		public static extern void aiCleanup();

		[Token(Token = "0x600025F")]
		[Address(RVA = "0xFBE8FC", Offset = "0xFBE8FC", VA = "0xFBE8FC")]
		public AbcAPI()
		{
		}
	}
	[Token(Token = "0x200008D")]
	[ExecuteInEditMode]
	public class AlembicCamera : AlembicElement
	{
		[Token(Token = "0x400028A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private aiCamera m_abcSchema;

		[Token(Token = "0x400028B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private aiCameraData m_abcData;

		[Token(Token = "0x400028C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Camera m_camera;

		[Token(Token = "0x400028D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool m_ignoreClippingPlanes;

		[Token(Token = "0x17000052")]
		public override aiSchema abcSchema
		{
			[Token(Token = "0x6000260")]
			[Address(RVA = "0xFBE904", Offset = "0xFBE904", VA = "0xFBE904", Slot = "5")]
			get
			{
				return default(aiSchema);
			}
		}

		[Token(Token = "0x17000053")]
		public override bool visibility
		{
			[Token(Token = "0x6000261")]
			[Address(RVA = "0xFBE90C", Offset = "0xFBE90C", VA = "0xFBE90C", Slot = "6")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000262")]
		[Address(RVA = "0xFBE91C", Offset = "0xFBE91C", VA = "0xFBE91C", Slot = "7")]
		public override void AbcSetup(aiObject abcObj, aiSchema abcSchema)
		{
		}

		[Token(Token = "0x6000263")]
		[Address(RVA = "0xFBE9C4", Offset = "0xFBE9C4", VA = "0xFBE9C4", Slot = "10")]
		public override void AbcSyncDataEnd()
		{
		}

		[Token(Token = "0x6000264")]
		[Address(RVA = "0xFBEA9C", Offset = "0xFBEA9C", VA = "0xFBEA9C")]
		public AlembicCamera()
		{
		}
	}
	[Token(Token = "0x200008E")]
	public abstract class AlembicElement : IDisposable
	{
		[Token(Token = "0x400028E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected aiObject m_abcObj;

		[Token(Token = "0x17000054")]
		public AlembicTreeNode abcTreeNode
		{
			[Token(Token = "0x6000265")]
			[Address(RVA = "0xFBEAAC", Offset = "0xFBEAAC", VA = "0xFBEAAC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000266")]
			[Address(RVA = "0xFBEAB4", Offset = "0xFBEAB4", VA = "0xFBEAB4")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000055")]
		public aiObject abcObject
		{
			[Token(Token = "0x6000267")]
			[Address(RVA = "0xFBEABC", Offset = "0xFBEABC", VA = "0xFBEABC")]
			get
			{
				return default(aiObject);
			}
		}

		[Token(Token = "0x17000056")]
		public abstract aiSchema abcSchema
		{
			[Token(Token = "0x6000268")]
			get;
		}

		[Token(Token = "0x17000057")]
		public abstract bool visibility
		{
			[Token(Token = "0x6000269")]
			get;
		}

		[Token(Token = "0x600026A")]
		public T GetOrAddComponent<T>() where T : Component
		{
			return null;
		}

		[Token(Token = "0x600026B")]
		[Address(RVA = "0xFBEAC4", Offset = "0xFBEAC4", VA = "0xFBEAC4", Slot = "4")]
		public void Dispose()
		{
		}

		[Token(Token = "0x600026C")]
		[Address(RVA = "0xFBEB0C", Offset = "0xFBEB0C", VA = "0xFBEB0C", Slot = "7")]
		public virtual void AbcSetup(aiObject abcObj, aiSchema abcSchema)
		{
		}

		[Token(Token = "0x600026D")]
		[Address(RVA = "0xFBEB14", Offset = "0xFBEB14", VA = "0xFBEB14", Slot = "8")]
		public virtual void AbcPrepareSample()
		{
		}

		[Token(Token = "0x600026E")]
		[Address(RVA = "0xFBEB18", Offset = "0xFBEB18", VA = "0xFBEB18", Slot = "9")]
		public virtual void AbcSyncDataBegin()
		{
		}

		[Token(Token = "0x600026F")]
		[Address(RVA = "0xFBEB1C", Offset = "0xFBEB1C", VA = "0xFBEB1C", Slot = "10")]
		public virtual void AbcSyncDataEnd()
		{
		}

		[Token(Token = "0x6000270")]
		[Address(RVA = "0xFBEAA4", Offset = "0xFBEAA4", VA = "0xFBEAA4")]
		protected AlembicElement()
		{
		}
	}
	[Token(Token = "0x200008F")]
	public class AlembicMesh : AlembicElement
	{
		[Token(Token = "0x2000090")]
		public class Submesh
		{
			[Token(Token = "0x4000299")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public PinnedList<int> indices;

			[Token(Token = "0x400029A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public bool update;

			[Token(Token = "0x600027B")]
			[Address(RVA = "0xFBF75C", Offset = "0xFBF75C", VA = "0xFBF75C")]
			public Submesh()
			{
			}
		}

		[Token(Token = "0x2000091")]
		public class Split
		{
			[Token(Token = "0x400029B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public PinnedList<Vector3> points;

			[Token(Token = "0x400029C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public PinnedList<Vector3> velocities;

			[Token(Token = "0x400029D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PinnedList<Vector3> normals;

			[Token(Token = "0x400029E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public PinnedList<Vector4> tangents;

			[Token(Token = "0x400029F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public PinnedList<Vector2> uv0;

			[Token(Token = "0x40002A0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public PinnedList<Vector2> uv1;

			[Token(Token = "0x40002A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public PinnedList<Color> colors;

			[Token(Token = "0x40002A2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Mesh mesh;

			[Token(Token = "0x40002A3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public GameObject host;

			[Token(Token = "0x40002A4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public bool active;

			[Token(Token = "0x40002A5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public Vector3 center;

			[Token(Token = "0x40002A6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public Vector3 size;

			[Token(Token = "0x600027C")]
			[Address(RVA = "0xFBEDC0", Offset = "0xFBEDC0", VA = "0xFBEDC0")]
			public Split()
			{
			}
		}

		[Token(Token = "0x4000290")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private aiPolyMesh m_abcSchema;

		[Token(Token = "0x4000291")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private aiMeshSummary m_summary;

		[Token(Token = "0x4000292")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private aiMeshSampleSummary m_sampleSummary;

		[Token(Token = "0x4000293")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private PinnedList<aiMeshSplitSummary> m_splitSummaries;

		[Token(Token = "0x4000294")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private PinnedList<aiSubmeshSummary> m_submeshSummaries;

		[Token(Token = "0x4000295")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private PinnedList<aiPolyMeshData> m_splitData;

		[Token(Token = "0x4000296")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private PinnedList<aiSubmeshData> m_submeshData;

		[Token(Token = "0x4000297")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private List<Split> m_splits;

		[Token(Token = "0x4000298")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private List<Submesh> m_submeshes;

		[Token(Token = "0x17000058")]
		public override aiSchema abcSchema
		{
			[Token(Token = "0x6000271")]
			[Address(RVA = "0xFBEB20", Offset = "0xFBEB20", VA = "0xFBEB20", Slot = "5")]
			get
			{
				return default(aiSchema);
			}
		}

		[Token(Token = "0x17000059")]
		public override bool visibility
		{
			[Token(Token = "0x6000272")]
			[Address(RVA = "0xFBEB28", Offset = "0xFBEB28", VA = "0xFBEB28", Slot = "6")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700005A")]
		public aiMeshSummary summary
		{
			[Token(Token = "0x6000273")]
			[Address(RVA = "0xFBEB38", Offset = "0xFBEB38", VA = "0xFBEB38")]
			get
			{
				return default(aiMeshSummary);
			}
		}

		[Token(Token = "0x1700005B")]
		public aiMeshSampleSummary sampleSummary
		{
			[Token(Token = "0x6000274")]
			[Address(RVA = "0xFBEB4C", Offset = "0xFBEB4C", VA = "0xFBEB4C")]
			get
			{
				return default(aiMeshSampleSummary);
			}
		}

		[Token(Token = "0x6000275")]
		[Address(RVA = "0xFBEB60", Offset = "0xFBEB60", VA = "0xFBEB60")]
		private void UpdateSplits(int numSplits)
		{
		}

		[Token(Token = "0x6000276")]
		[Address(RVA = "0xFBEFDC", Offset = "0xFBEFDC", VA = "0xFBEFDC", Slot = "7")]
		public override void AbcSetup(aiObject abcObj, aiSchema abcSchema)
		{
		}

		[Token(Token = "0x6000277")]
		[Address(RVA = "0xFBEFF0", Offset = "0xFBEFF0", VA = "0xFBEFF0", Slot = "9")]
		public override void AbcSyncDataBegin()
		{
		}

		[Token(Token = "0x6000278")]
		[Address(RVA = "0xFBF7F0", Offset = "0xFBF7F0", VA = "0xFBF7F0", Slot = "10")]
		public override void AbcSyncDataEnd()
		{
		}

		[Token(Token = "0x6000279")]
		[Address(RVA = "0xFC003C", Offset = "0xFC003C", VA = "0xFC003C")]
		private Mesh AddMeshComponents(GameObject go)
		{
			return null;
		}

		[Token(Token = "0x600027A")]
		[Address(RVA = "0xFC0390", Offset = "0xFC0390", VA = "0xFC0390")]
		public AlembicMesh()
		{
		}
	}
	[Token(Token = "0x2000092")]
	public class AlembicPoints : AlembicElement
	{
		[Token(Token = "0x40002A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private aiPoints m_abcSchema;

		[Token(Token = "0x40002A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private PinnedList<aiPointsData> m_abcData;

		[Token(Token = "0x40002A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private aiPointsSummary m_summary;

		[Token(Token = "0x40002AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private aiPointsSampleSummary m_sampleSummary;

		[Token(Token = "0x1700005C")]
		public override aiSchema abcSchema
		{
			[Token(Token = "0x600027D")]
			[Address(RVA = "0xFC05B8", Offset = "0xFC05B8", VA = "0xFC05B8", Slot = "5")]
			get
			{
				return default(aiSchema);
			}
		}

		[Token(Token = "0x1700005D")]
		public override bool visibility
		{
			[Token(Token = "0x600027E")]
			[Address(RVA = "0xFC05C0", Offset = "0xFC05C0", VA = "0xFC05C0", Slot = "6")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600027F")]
		[Address(RVA = "0xFC0630", Offset = "0xFC0630", VA = "0xFC0630", Slot = "7")]
		public override void AbcSetup(aiObject abcObj, aiSchema abcSchema)
		{
		}

		[Token(Token = "0x6000280")]
		[Address(RVA = "0xFC0644", Offset = "0xFC0644", VA = "0xFC0644", Slot = "8")]
		public override void AbcPrepareSample()
		{
		}

		[Token(Token = "0x6000281")]
		[Address(RVA = "0xFC0740", Offset = "0xFC0740", VA = "0xFC0740", Slot = "9")]
		public override void AbcSyncDataBegin()
		{
		}

		[Token(Token = "0x6000282")]
		[Address(RVA = "0xFC09E4", Offset = "0xFC09E4", VA = "0xFC09E4", Slot = "10")]
		public override void AbcSyncDataEnd()
		{
		}

		[Token(Token = "0x6000283")]
		[Address(RVA = "0xFC0B98", Offset = "0xFC0B98", VA = "0xFC0B98")]
		public AlembicPoints()
		{
		}
	}
	[Token(Token = "0x2000093")]
	[ExecuteInEditMode]
	public class AlembicPointsCloud : MonoBehaviour
	{
		[Token(Token = "0x40002AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[ReadOnly]
		public PinnedList<Vector3> m_points;

		[Token(Token = "0x40002AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[ReadOnly]
		public PinnedList<Vector3> m_velocities;

		[Token(Token = "0x40002AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[ReadOnly]
		public PinnedList<uint> m_ids;

		[Token(Token = "0x40002AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[ReadOnly]
		public Vector3 m_boundsCenter;

		[Token(Token = "0x40002AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[ReadOnly]
		public Vector3 m_boundsExtents;

		[Token(Token = "0x40002B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public AlembicPoints m_abc;

		[Token(Token = "0x40002B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Sort points by distance from sortFrom object")]
		public bool m_sort;

		[Token(Token = "0x40002B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform m_sortFrom;

		[Token(Token = "0x1700005E")]
		public AlembicPoints abcPoints
		{
			[Token(Token = "0x6000284")]
			[Address(RVA = "0xFC0C24", Offset = "0xFC0C24", VA = "0xFC0C24")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700005F")]
		public PinnedList<Vector3> points
		{
			[Token(Token = "0x6000285")]
			[Address(RVA = "0xFC0C2C", Offset = "0xFC0C2C", VA = "0xFC0C2C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000060")]
		public PinnedList<Vector3> velocities
		{
			[Token(Token = "0x6000286")]
			[Address(RVA = "0xFC0C34", Offset = "0xFC0C34", VA = "0xFC0C34")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000061")]
		public PinnedList<uint> ids
		{
			[Token(Token = "0x6000287")]
			[Address(RVA = "0xFC0C3C", Offset = "0xFC0C3C", VA = "0xFC0C3C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000288")]
		[Address(RVA = "0xFC0C44", Offset = "0xFC0C44", VA = "0xFC0C44")]
		private void Reset()
		{
		}

		[Token(Token = "0x6000289")]
		[Address(RVA = "0xFC0CF8", Offset = "0xFC0CF8", VA = "0xFC0CF8")]
		public AlembicPointsCloud()
		{
		}
	}
	[Token(Token = "0x2000094")]
	public static class VPMatrices
	{
		[Token(Token = "0x40002B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<Camera, Matrix4x4> m_currentVPMatrix;

		[Token(Token = "0x40002B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Dictionary<Camera, Matrix4x4> m_previousVPMatrix;

		[Token(Token = "0x40002B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static int m_frameCount;

		[Token(Token = "0x600028A")]
		[Address(RVA = "0xFC0E0C", Offset = "0xFC0E0C", VA = "0xFC0E0C")]
		public static Matrix4x4 Get(Camera camera)
		{
			return default(Matrix4x4);
		}

		[Token(Token = "0x600028B")]
		[Address(RVA = "0xFC10C8", Offset = "0xFC10C8", VA = "0xFC10C8")]
		public static Matrix4x4 GetPrevious(Camera camera)
		{
			return default(Matrix4x4);
		}

		[Token(Token = "0x600028C")]
		[Address(RVA = "0xFC1008", Offset = "0xFC1008", VA = "0xFC1008")]
		private static void SwapMatrixMap()
		{
		}
	}
	[Token(Token = "0x2000095")]
	[RequireComponent(typeof(AlembicPointsCloud))]
	[ExecuteInEditMode]
	public class AlembicPointsRenderer : MonoBehaviour
	{
		[Token(Token = "0x40002B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Mesh m_mesh;

		[Token(Token = "0x40002B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Material[] m_materials;

		[Token(Token = "0x40002B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Material m_motionVectorMaterial;

		[Token(Token = "0x40002B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private ShadowCastingMode m_castShadows;

		[Token(Token = "0x40002BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private bool m_applyTransform;

		[Token(Token = "0x40002BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		[SerializeField]
		private bool m_receiveShadows;

		[Token(Token = "0x40002BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x36")]
		[SerializeField]
		private bool m_generateMotionVector;

		[Token(Token = "0x40002BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private float m_pointSize;

		[Token(Token = "0x40002BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Mesh m_prevMesh;

		[Token(Token = "0x40002BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private ComputeBuffer m_cbPoints;

		[Token(Token = "0x40002C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private ComputeBuffer m_cbVelocities;

		[Token(Token = "0x40002C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private ComputeBuffer m_cbIDs;

		[Token(Token = "0x40002C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private ComputeBuffer[] m_cbArgs;

		[Token(Token = "0x40002C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private CommandBuffer m_cmdMotionVector;

		[Token(Token = "0x40002C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private int[] m_args;

		[Token(Token = "0x40002C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Bounds m_bounds;

		[Token(Token = "0x40002C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private MaterialPropertyBlock m_mpb;

		[Token(Token = "0x40002C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3 m_position;

		[Token(Token = "0x40002C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private Vector3 m_positionOld;

		[Token(Token = "0x40002C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Quaternion m_rotation;

		[Token(Token = "0x40002CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Quaternion m_rotationOld;

		[Token(Token = "0x40002CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Vector3 m_scale;

		[Token(Token = "0x40002CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private Vector3 m_scaleOld;

		[Token(Token = "0x17000062")]
		public Mesh sharedMesh
		{
			[Token(Token = "0x600028E")]
			[Address(RVA = "0xFC12C4", Offset = "0xFC12C4", VA = "0xFC12C4")]
			get
			{
				return null;
			}
			[Token(Token = "0x600028F")]
			[Address(RVA = "0xFC12CC", Offset = "0xFC12CC", VA = "0xFC12CC")]
			set
			{
			}
		}

		[Token(Token = "0x17000063")]
		public Material[] sharedMaterials
		{
			[Token(Token = "0x6000290")]
			[Address(RVA = "0xFC12D4", Offset = "0xFC12D4", VA = "0xFC12D4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000291")]
			[Address(RVA = "0xFC12DC", Offset = "0xFC12DC", VA = "0xFC12DC")]
			set
			{
			}
		}

		[Token(Token = "0x17000064")]
		public Material motionVectorMaterial
		{
			[Token(Token = "0x6000292")]
			[Address(RVA = "0xFC12E4", Offset = "0xFC12E4", VA = "0xFC12E4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000293")]
			[Address(RVA = "0xFC12EC", Offset = "0xFC12EC", VA = "0xFC12EC")]
			set
			{
			}
		}

		[Token(Token = "0x6000294")]
		[Address(RVA = "0xFC12F4", Offset = "0xFC12F4", VA = "0xFC12F4")]
		public void Flush()
		{
		}

		[Token(Token = "0x6000295")]
		[Address(RVA = "0xFC1FA0", Offset = "0xFC1FA0", VA = "0xFC1FA0")]
		private void FlushMotionVector()
		{
		}

		[Token(Token = "0x6000296")]
		[Address(RVA = "0xFC2378", Offset = "0xFC2378", VA = "0xFC2378")]
		public void Release()
		{
		}

		[Token(Token = "0x6000297")]
		[Address(RVA = "0xFC2490", Offset = "0xFC2490", VA = "0xFC2490")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000298")]
		[Address(RVA = "0xFC2494", Offset = "0xFC2494", VA = "0xFC2494")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000299")]
		[Address(RVA = "0xFC2550", Offset = "0xFC2550", VA = "0xFC2550")]
		private void OnRenderObject()
		{
		}

		[Token(Token = "0x600029A")]
		[Address(RVA = "0xFC2554", Offset = "0xFC2554", VA = "0xFC2554")]
		private void Start()
		{
		}

		[Token(Token = "0x600029B")]
		[Address(RVA = "0xFC25F4", Offset = "0xFC25F4", VA = "0xFC25F4")]
		public AlembicPointsRenderer()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000096")]
	public class AlembicStreamSettings
	{
		[Token(Token = "0x40002CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		public aiNormalsMode normals;

		[Token(Token = "0x40002CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		public aiTangentsMode tangents;

		[Token(Token = "0x40002CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public aiAspectRatioMode cameraAspectRatio;

		[Token(Token = "0x40002D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		public float scaleFactor;

		[Token(Token = "0x40002D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		public bool swapHandedness;

		[Token(Token = "0x40002D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		[SerializeField]
		public bool flipFaces;

		[Token(Token = "0x40002D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		[SerializeField]
		public bool turnQuadEdges;

		[Token(Token = "0x40002D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x23")]
		[SerializeField]
		public bool interpolateSamples;

		[Token(Token = "0x40002D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		public bool importPointPolygon;

		[Token(Token = "0x40002D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		[SerializeField]
		public bool importLinePolygon;

		[Token(Token = "0x40002D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
		[SerializeField]
		public bool importTrianglePolygon;

		[Token(Token = "0x40002D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x27")]
		[SerializeField]
		public bool importXform;

		[Token(Token = "0x40002D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		public bool importCameras;

		[Token(Token = "0x40002DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		[SerializeField]
		public bool importMeshes;

		[Token(Token = "0x40002DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		[SerializeField]
		public bool importPoints;

		[Token(Token = "0x40002DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B")]
		[SerializeField]
		public bool importVisibility;

		[Token(Token = "0x600029C")]
		[Address(RVA = "0xFC2674", Offset = "0xFC2674", VA = "0xFC2674")]
		public AlembicStreamSettings()
		{
		}
	}
	[Token(Token = "0x2000097")]
	public class AlembicStream : IDisposable
	{
		[Token(Token = "0x2000098")]
		private class ImportContext
		{
			[Token(Token = "0x40002E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public AlembicTreeNode alembicTreeNode;

			[Token(Token = "0x40002E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public aiSampleSelector ss;

			[Token(Token = "0x40002E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public bool createMissingNodes;

			[Token(Token = "0x60002B4")]
			[Address(RVA = "0xFC35FC", Offset = "0xFC35FC", VA = "0xFC35FC")]
			public ImportContext()
			{
			}
		}

		[Token(Token = "0x40002DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static List<AlembicStream> s_streams;

		[Token(Token = "0x40002DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private AlembicStreamDescriptor m_streamDesc;

		[Token(Token = "0x40002DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private AlembicTreeNode m_abcTreeRoot;

		[Token(Token = "0x40002E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private aiConfig m_config;

		[Token(Token = "0x40002E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private aiContext m_context;

		[Token(Token = "0x40002E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private double m_time;

		[Token(Token = "0x40002E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool m_loaded;

		[Token(Token = "0x40002E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		private bool m_streamInterupted;

		[Token(Token = "0x40002E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private ImportContext m_importContext;

		[Token(Token = "0x17000065")]
		public AlembicStreamDescriptor streamDescriptor
		{
			[Token(Token = "0x60002A0")]
			[Address(RVA = "0xFC2A20", Offset = "0xFC2A20", VA = "0xFC2A20")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000066")]
		public AlembicTreeNode abcTreeRoot
		{
			[Token(Token = "0x60002A1")]
			[Address(RVA = "0xFC2A28", Offset = "0xFC2A28", VA = "0xFC2A28")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000067")]
		public aiContext abcContext
		{
			[Token(Token = "0x60002A2")]
			[Address(RVA = "0xFC2A30", Offset = "0xFC2A30", VA = "0xFC2A30")]
			get
			{
				return default(aiContext);
			}
		}

		[Token(Token = "0x17000068")]
		public bool abcIsValid
		{
			[Token(Token = "0x60002A3")]
			[Address(RVA = "0xFC2A38", Offset = "0xFC2A38", VA = "0xFC2A38")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000069")]
		public aiConfig config
		{
			[Token(Token = "0x60002A4")]
			[Address(RVA = "0xFC2A40", Offset = "0xFC2A40", VA = "0xFC2A40")]
			get
			{
				return default(aiConfig);
			}
		}

		[Token(Token = "0x1700006A")]
		public float vertexMotionScale
		{
			[Token(Token = "0x60002A5")]
			[Address(RVA = "0xFC2A4C", Offset = "0xFC2A4C", VA = "0xFC2A4C")]
			set
			{
			}
		}

		[Token(Token = "0x1700006B")]
		public bool asyncLoad
		{
			[Token(Token = "0x60002A6")]
			[Address(RVA = "0xFC2A54", Offset = "0xFC2A54", VA = "0xFC2A54")]
			set
			{
			}
		}

		[Token(Token = "0x600029D")]
		[Address(RVA = "0xFC26A8", Offset = "0xFC26A8", VA = "0xFC26A8")]
		public static void DisconnectStreamsWithPath(string path)
		{
		}

		[Token(Token = "0x600029E")]
		[Address(RVA = "0xFC27DC", Offset = "0xFC27DC", VA = "0xFC27DC")]
		public static void RemapStreamsWithPath(string oldPath, string newPath)
		{
		}

		[Token(Token = "0x600029F")]
		[Address(RVA = "0xFC2908", Offset = "0xFC2908", VA = "0xFC2908")]
		public static void ReconnectStreamsWithPath(string path)
		{
		}

		[Token(Token = "0x60002A7")]
		[Address(RVA = "0xFC2A60", Offset = "0xFC2A60", VA = "0xFC2A60")]
		public void GetTimeRange(ref double begin, ref double end)
		{
		}

		[Token(Token = "0x60002A8")]
		[Address(RVA = "0xFC2A68", Offset = "0xFC2A68", VA = "0xFC2A68")]
		public AlembicStream(GameObject rootGo, AlembicStreamDescriptor streamDesc)
		{
		}

		[Token(Token = "0x60002A9")]
		[Address(RVA = "0xFC2BCC", Offset = "0xFC2BCC", VA = "0xFC2BCC")]
		private void AbcBeforeUpdateSamples(AlembicTreeNode node)
		{
		}

		[Token(Token = "0x60002AA")]
		[Address(RVA = "0xFC2D5C", Offset = "0xFC2D5C", VA = "0xFC2D5C")]
		private void AbcBeginSyncData(AlembicTreeNode node)
		{
		}

		[Token(Token = "0x60002AB")]
		[Address(RVA = "0xFC2EEC", Offset = "0xFC2EEC", VA = "0xFC2EEC")]
		private void AbcEndSyncData(AlembicTreeNode node)
		{
		}

		[Token(Token = "0x60002AC")]
		[Address(RVA = "0xFC307C", Offset = "0xFC307C", VA = "0xFC307C")]
		public bool AbcUpdateBegin(double time)
		{
			return default(bool);
		}

		[Token(Token = "0x60002AD")]
		[Address(RVA = "0xFC30EC", Offset = "0xFC30EC", VA = "0xFC30EC")]
		public void AbcUpdateEnd()
		{
		}

		[Token(Token = "0x60002AE")]
		[Address(RVA = "0xFC310C", Offset = "0xFC310C", VA = "0xFC310C")]
		public void AbcLoad(bool createMissingNodes)
		{
		}

		[Token(Token = "0x60002AF")]
		[Address(RVA = "0xFC3508", Offset = "0xFC3508", VA = "0xFC3508", Slot = "4")]
		public void Dispose()
		{
		}

		[Token(Token = "0x60002B0")]
		[Address(RVA = "0xFC33BC", Offset = "0xFC33BC", VA = "0xFC33BC")]
		private void UpdateAbcTree(aiContext ctx, AlembicTreeNode node, double time, bool createMissingNodes)
		{
		}

		[Token(Token = "0x60002B1")]
		[Address(RVA = "0xFC3604", Offset = "0xFC3604", VA = "0xFC3604")]
		private void ImportCallback(aiObject obj)
		{
		}

		[Token(Token = "0x60002B2")]
		[Address(RVA = "0xFC3384", Offset = "0xFC3384", VA = "0xFC3384")]
		public static float GetAspectRatio(aiAspectRatioMode mode)
		{
			return default(float);
		}
	}
	[Token(Token = "0x200009C")]
	public class AlembicStreamDescriptor : ScriptableObject
	{
		[Token(Token = "0x40002ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public string pathToAbc;

		[Token(Token = "0x40002EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		public AlembicStreamSettings settings;

		[Token(Token = "0x40002EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		public bool hasVaryingTopology;

		[Token(Token = "0x40002F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		[SerializeField]
		public bool hasAcyclicFramerate;

		[Token(Token = "0x40002F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		public double abcStartTime;

		[Token(Token = "0x40002F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		public double abcEndTime;

		[Token(Token = "0x1700006C")]
		public double duration
		{
			[Token(Token = "0x60002BB")]
			[Address(RVA = "0xFC3C60", Offset = "0xFC3C60", VA = "0xFC3C60")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x60002BC")]
		[Address(RVA = "0xFC3C6C", Offset = "0xFC3C6C", VA = "0xFC3C6C")]
		public AlembicStreamDescriptor()
		{
		}
	}
	[Token(Token = "0x200009D")]
	[ExecuteInEditMode]
	public class AlembicStreamPlayer : MonoBehaviour
	{
		[Token(Token = "0x40002F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AlembicStream abcStream;

		[Token(Token = "0x40002F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AlembicStreamDescriptor streamDescriptor;

		[Token(Token = "0x40002F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public double startTime;

		[Token(Token = "0x40002F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public double endTime;

		[Token(Token = "0x40002F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float currentTime;

		[Token(Token = "0x40002F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float vertexMotionScale;

		[Token(Token = "0x40002F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool asyncLoad;

		[Token(Token = "0x40002FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float lastUpdateTime;

		[Token(Token = "0x40002FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool forceUpdate;

		[Token(Token = "0x40002FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		private bool updateStarted;

		[Token(Token = "0x1700006D")]
		public double duration
		{
			[Token(Token = "0x60002BD")]
			[Address(RVA = "0xFC3D18", Offset = "0xFC3D18", VA = "0xFC3D18")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x60002BE")]
		[Address(RVA = "0xFC3D24", Offset = "0xFC3D24", VA = "0xFC3D24")]
		private void ClampTime()
		{
		}

		[Token(Token = "0x60002BF")]
		[Address(RVA = "0xFC3D50", Offset = "0xFC3D50", VA = "0xFC3D50")]
		public void LoadStream(bool createMissingNodes)
		{
		}

		[Token(Token = "0x60002C0")]
		[Address(RVA = "0xFC3E3C", Offset = "0xFC3E3C", VA = "0xFC3E3C")]
		private void Start()
		{
		}

		[Token(Token = "0x60002C1")]
		[Address(RVA = "0xFC3E40", Offset = "0xFC3E40", VA = "0xFC3E40")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x60002C2")]
		[Address(RVA = "0xFC3F6C", Offset = "0xFC3F6C", VA = "0xFC3F6C")]
		public void ForceUpdate(float time)
		{
		}

		[Token(Token = "0x60002C3")]
		[Address(RVA = "0xFC410C", Offset = "0xFC410C", VA = "0xFC410C")]
		public void Update()
		{
		}

		[Token(Token = "0x60002C4")]
		[Address(RVA = "0xFC409C", Offset = "0xFC409C", VA = "0xFC409C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60002C5")]
		[Address(RVA = "0xFC4238", Offset = "0xFC4238", VA = "0xFC4238")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60002C6")]
		[Address(RVA = "0xFC424C", Offset = "0xFC424C", VA = "0xFC424C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60002C7")]
		[Address(RVA = "0xFC425C", Offset = "0xFC425C", VA = "0xFC425C")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x60002C8")]
		[Address(RVA = "0xFC4260", Offset = "0xFC4260", VA = "0xFC4260")]
		public AlembicStreamPlayer()
		{
		}
	}
	[Token(Token = "0x200009E")]
	public class AlembicTreeNode : IDisposable
	{
		[Token(Token = "0x40002FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AlembicStream stream;

		[Token(Token = "0x40002FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject gameObject;

		[Token(Token = "0x40002FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AlembicElement abcObject;

		[Token(Token = "0x4000300")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<AlembicTreeNode> children;

		[Token(Token = "0x60002C9")]
		[Address(RVA = "0xFC35DC", Offset = "0xFC35DC", VA = "0xFC35DC", Slot = "4")]
		public void Dispose()
		{
		}

		[Token(Token = "0x60002CA")]
		[Address(RVA = "0xFC4284", Offset = "0xFC4284", VA = "0xFC4284")]
		public void ResetTree()
		{
		}

		[Token(Token = "0x60002CB")]
		public T GetOrAddAlembicObj<T>() where T : AlembicElement, new()
		{
			return null;
		}

		[Token(Token = "0x60002CC")]
		public T GetAlembicObj<T>() where T : AlembicElement, new()
		{
			return null;
		}

		[Token(Token = "0x60002CD")]
		[Address(RVA = "0xFBEAEC", Offset = "0xFBEAEC", VA = "0xFBEAEC")]
		public void RemoveAlembicObject(AlembicElement obj)
		{
		}

		[Token(Token = "0x60002CE")]
		[Address(RVA = "0xFC4468", Offset = "0xFC4468", VA = "0xFC4468")]
		public AlembicTreeNode FindNode(GameObject go)
		{
			return null;
		}

		[Token(Token = "0x60002CF")]
		[Address(RVA = "0xFC2B44", Offset = "0xFC2B44", VA = "0xFC2B44")]
		public AlembicTreeNode()
		{
		}
	}
	[Token(Token = "0x200009F")]
	public class AlembicXform : AlembicElement
	{
		[Token(Token = "0x4000301")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private aiXform m_abcSchema;

		[Token(Token = "0x4000302")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private aiXformData m_abcData;

		[Token(Token = "0x1700006E")]
		public override aiSchema abcSchema
		{
			[Token(Token = "0x60002D0")]
			[Address(RVA = "0xFC4614", Offset = "0xFC4614", VA = "0xFC4614", Slot = "5")]
			get
			{
				return default(aiSchema);
			}
		}

		[Token(Token = "0x1700006F")]
		public override bool visibility
		{
			[Token(Token = "0x60002D1")]
			[Address(RVA = "0xFC461C", Offset = "0xFC461C", VA = "0xFC461C", Slot = "6")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60002D2")]
		[Address(RVA = "0xFC462C", Offset = "0xFC462C", VA = "0xFC462C", Slot = "7")]
		public override void AbcSetup(aiObject abcObj, aiSchema abcSchema)
		{
		}

		[Token(Token = "0x60002D3")]
		[Address(RVA = "0xFC4638", Offset = "0xFC4638", VA = "0xFC4638", Slot = "10")]
		public override void AbcSyncDataEnd()
		{
		}

		[Token(Token = "0x60002D4")]
		[Address(RVA = "0xFC476C", Offset = "0xFC476C", VA = "0xFC476C")]
		public AlembicXform()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000A0")]
	public struct Bool
	{
		[Token(Token = "0x4000303")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		private byte v;

		[Token(Token = "0x60002D5")]
		[Address(RVA = "0xFBC838", Offset = "0xFBC838", VA = "0xFBC838")]
		public static implicit operator bool(Bool v)
		{
			return default(bool);
		}

		[Token(Token = "0x60002D6")]
		[Address(RVA = "0xFBC564", Offset = "0xFBC564", VA = "0xFBC564")]
		public static implicit operator Bool(bool v)
		{
			return default(Bool);
		}
	}
	[Token(Token = "0x20000A1")]
	public class PinnedObject<T> : IDisposable
	{
		[Token(Token = "0x4000304")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T m_data;

		[Token(Token = "0x4000305")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private GCHandle m_gch;

		[Token(Token = "0x17000070")]
		public T Object
		{
			[Token(Token = "0x60002D8")]
			get
			{
				return (T)null;
			}
		}

		[Token(Token = "0x17000071")]
		public IntPtr Pointer
		{
			[Token(Token = "0x60002D9")]
			get
			{
				return default(IntPtr);
			}
		}

		[Token(Token = "0x60002D7")]
		public PinnedObject(T data)
		{
		}

		[Token(Token = "0x60002DA")]
		public void Dispose()
		{
		}

		[Token(Token = "0x60002DB")]
		protected virtual void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x60002DC")]
		public static implicit operator IntPtr(PinnedObject<T> v)
		{
			return default(IntPtr);
		}
	}
	[Token(Token = "0x20000A2")]
	public class PinnedArray<T> : IDisposable, IEnumerable<T>, IEnumerable where T : struct
	{
		[Token(Token = "0x4000306")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T[] m_data;

		[Token(Token = "0x4000307")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private GCHandle m_gch;

		[Token(Token = "0x17000072")]
		public int Length
		{
			[Token(Token = "0x60002DF")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000073")]
		public T this[int i]
		{
			[Token(Token = "0x60002E0")]
			get
			{
				return (T)null;
			}
			[Token(Token = "0x60002E1")]
			set
			{
			}
		}

		[Token(Token = "0x17000074")]
		public T[] Array
		{
			[Token(Token = "0x60002E2")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000075")]
		public IntPtr Pointer
		{
			[Token(Token = "0x60002E3")]
			get
			{
				return default(IntPtr);
			}
		}

		[Token(Token = "0x60002DD")]
		public PinnedArray(int size)
		{
		}

		[Token(Token = "0x60002DE")]
		public PinnedArray(T[] data, bool clone = false)
		{
		}

		[Token(Token = "0x60002E4")]
		public PinnedArray<T> Clone()
		{
			return null;
		}

		[Token(Token = "0x60002E5")]
		public bool Assign(T[] source)
		{
			return default(bool);
		}

		[Token(Token = "0x60002E6")]
		public void Dispose()
		{
		}

		[Token(Token = "0x60002E7")]
		protected virtual void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x60002E8")]
		public IEnumerator<T> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x60002E9")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x60002EA")]
		public static implicit operator IntPtr(PinnedArray<T> v)
		{
			return default(IntPtr);
		}
	}
	[Token(Token = "0x20000A3")]
	public static class PinnedListImpl
	{
		[Token(Token = "0x20000A4")]
		private class ListData
		{
			[Token(Token = "0x4000308")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public object items;

			[Token(Token = "0x4000309")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int size;

			[Token(Token = "0x60002EE")]
			[Address(RVA = "0xFC4774", Offset = "0xFC4774", VA = "0xFC4774")]
			public ListData()
			{
			}
		}

		[StructLayout(2)]
		[Token(Token = "0x20000A5")]
		private struct Caster
		{
			[Token(Token = "0x400030A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public object list;

			[Token(Token = "0x400030B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public ListData data;
		}

		[Token(Token = "0x60002EB")]
		public static T[] GetInternalArray<T>(List<T> list) where T : struct
		{
			return null;
		}

		[Token(Token = "0x60002EC")]
		public static List<T> CreateIntrusiveList<T>(T[] data) where T : struct
		{
			return null;
		}

		[Token(Token = "0x60002ED")]
		public static void SetCount<T>(List<T> list, int count) where T : struct
		{
		}
	}
	[Token(Token = "0x20000A6")]
	public class PinnedList<T> : IDisposable, IEnumerable<T>, IEnumerable where T : struct
	{
		[Token(Token = "0x400030C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private List<T> m_list;

		[Token(Token = "0x400030D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T[] m_data;

		[Token(Token = "0x400030E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private GCHandle m_gch;

		[Token(Token = "0x17000076")]
		public int Capacity
		{
			[Token(Token = "0x60002F2")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000077")]
		public int Count
		{
			[Token(Token = "0x60002F3")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000078")]
		public T this[int i]
		{
			[Token(Token = "0x60002F4")]
			get
			{
				return (T)null;
			}
			[Token(Token = "0x60002F5")]
			set
			{
			}
		}

		[Token(Token = "0x17000079")]
		public T[] Array
		{
			[Token(Token = "0x60002F6")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700007A")]
		public List<T> List
		{
			[Token(Token = "0x60002F7")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700007B")]
		public IntPtr Pointer
		{
			[Token(Token = "0x60002F8")]
			get
			{
				return default(IntPtr);
			}
		}

		[Token(Token = "0x60002EF")]
		public PinnedList(int size = 0)
		{
		}

		[Token(Token = "0x60002F0")]
		public PinnedList(T[] data, bool clone = false)
		{
		}

		[Token(Token = "0x60002F1")]
		public PinnedList(List<T> data, bool clone = false)
		{
		}

		[Token(Token = "0x60002F9")]
		public void LockList(Action<List<T>> body)
		{
		}

		[Token(Token = "0x60002FA")]
		public void Resize(int size)
		{
		}

		[Token(Token = "0x60002FB")]
		public void ResizeDiscard(int size)
		{
		}

		[Token(Token = "0x60002FC")]
		public void Clear()
		{
		}

		[Token(Token = "0x60002FD")]
		public PinnedList<T> Clone()
		{
			return null;
		}

		[Token(Token = "0x60002FE")]
		public void Assign(T[] source)
		{
		}

		[Token(Token = "0x60002FF")]
		public void Assign(List<T> sourceList)
		{
		}

		[Token(Token = "0x6000300")]
		public void Dispose()
		{
		}

		[Token(Token = "0x6000301")]
		protected virtual void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x6000302")]
		public IEnumerator<T> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000303")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000304")]
		public static implicit operator IntPtr(PinnedList<T> v)
		{
			return default(IntPtr);
		}
	}
	[Token(Token = "0x20000A8")]
	public class ReadOnlyAttribute : PropertyAttribute
	{
		[Token(Token = "0x6000307")]
		[Address(RVA = "0xFC477C", Offset = "0xFC477C", VA = "0xFC477C")]
		public ReadOnlyAttribute()
		{
		}
	}
}
namespace Manta
{
	[Token(Token = "0x20000A9")]
	public static class MantaSimpleProfilerFactory
	{
		[Token(Token = "0x6000308")]
		[Address(RVA = "0xFC4784", Offset = "0xFC4784", VA = "0xFC4784")]
		public static Camouflaj.SimpleProfiler.Profiler Create()
		{
			return null;
		}

		[Token(Token = "0x6000309")]
		[Address(RVA = "0xFC4820", Offset = "0xFC4820", VA = "0xFC4820")]
		private static void AddMetrics(Camouflaj.SimpleProfiler.Profiler profiler)
		{
		}
	}
}
namespace UnluckSoftware
{
	[Token(Token = "0x20000AA")]
	public class SortingLayerAttribute : PropertyAttribute
	{
		[Token(Token = "0x600030A")]
		[Address(RVA = "0xFC48C8", Offset = "0xFC48C8", VA = "0xFC48C8")]
		public SortingLayerAttribute()
		{
		}
	}
}
namespace RopeMinikit
{
	[Token(Token = "0x20000AB")]
	public class DisableInPlayModeAttribute : PropertyAttribute
	{
		[Token(Token = "0x600030B")]
		[Address(RVA = "0xFC48D0", Offset = "0xFC48D0", VA = "0xFC48D0")]
		public DisableInPlayModeAttribute()
		{
		}
	}
	[Token(Token = "0x20000AC")]
	public static class PointsExtensions
	{
		[Token(Token = "0x600030C")]
		[Address(RVA = "0xFC48D8", Offset = "0xFC48D8", VA = "0xFC48D8")]
		public static float GetLengthOfCurve(this NativeArray<float3> curve, ref float4x4 transform, bool isLoop = false)
		{
			return default(float);
		}

		[Token(Token = "0x600030D")]
		[Address(RVA = "0xFC4B24", Offset = "0xFC4B24", VA = "0xFC4B24")]
		public static float GetLengthOfCurve(this NativeArray<float3> curve, bool isLoop = false)
		{
			return default(float);
		}

		[Token(Token = "0x600030E")]
		[Address(RVA = "0xFC4BB4", Offset = "0xFC4BB4", VA = "0xFC4BB4")]
		public static float GetLengthOfCurve(this IEnumerable<float3> curve, ref float4x4 transform, bool isLoop = false)
		{
			return default(float);
		}

		[Token(Token = "0x600030F")]
		[Address(RVA = "0xFC4C8C", Offset = "0xFC4C8C", VA = "0xFC4C8C")]
		public static float GetLengthOfCurve(this IEnumerable<float3> curve, bool isLoop = false)
		{
			return default(float);
		}

		[Token(Token = "0x6000310")]
		[Address(RVA = "0xFC4D14", Offset = "0xFC4D14", VA = "0xFC4D14")]
		private static void GetPointAlongCurve(this NativeArray<float3> curve, ref float4x4 transform, float distance, out float3 point, ref int currentTargetIndex, ref float accumulatedLength)
		{
		}

		[Token(Token = "0x6000311")]
		[Address(RVA = "0xFC4F58", Offset = "0xFC4F58", VA = "0xFC4F58")]
		public static void GetPointAlongCurve(this NativeArray<float3> curve, ref float4x4 transform, float distance, out float3 point)
		{
		}

		[Token(Token = "0x6000312")]
		[Address(RVA = "0xFC4F78", Offset = "0xFC4F78", VA = "0xFC4F78")]
		public static void GetPointAlongCurve(this NativeArray<float3> curve, float distance, out float3 point)
		{
		}

		[Token(Token = "0x6000313")]
		[Address(RVA = "0xFC5028", Offset = "0xFC5028", VA = "0xFC5028")]
		public static void GetPointAlongCurve(this IEnumerable<float3> curve, ref float4x4 transform, float distance, out float3 point)
		{
		}

		[Token(Token = "0x6000314")]
		[Address(RVA = "0xFC5110", Offset = "0xFC5110", VA = "0xFC5110")]
		public static void GetPointAlongCurve(this IEnumerable<float3> curve, float distance, out float3 point)
		{
		}

		[Token(Token = "0x6000315")]
		[Address(RVA = "0xFC51A8", Offset = "0xFC51A8", VA = "0xFC51A8")]
		public static void GetPointsAlongCurve(this NativeArray<float3> curve, ref float4x4 transform, float desiredPointDistance, NativeArray<float3> result)
		{
		}

		[Token(Token = "0x6000316")]
		[Address(RVA = "0xFC5250", Offset = "0xFC5250", VA = "0xFC5250")]
		public static void GetPointsAlongCurve(this NativeArray<float3> curve, float desiredPointDistance, NativeArray<float3> result)
		{
		}

		[Token(Token = "0x6000317")]
		[Address(RVA = "0xFC5300", Offset = "0xFC5300", VA = "0xFC5300")]
		public static void GetPointsAlongCurve(this IEnumerable<float3> curve, ref float4x4 transform, float desiredPointDistance, NativeArray<float3> result)
		{
		}

		[Token(Token = "0x6000318")]
		[Address(RVA = "0xFC53E8", Offset = "0xFC53E8", VA = "0xFC53E8")]
		public static void GetPointsAlongCurve(this IEnumerable<float3> curve, float desiredPointDistance, NativeArray<float3> result)
		{
		}

		[Token(Token = "0x6000319")]
		[Address(RVA = "0xFC5488", Offset = "0xFC5488", VA = "0xFC5488")]
		public static void GetClosestPoint(this NativeArray<float3> curve, float3 point, out int index, out float distance)
		{
		}

		[Token(Token = "0x600031A")]
		[Address(RVA = "0xFC5570", Offset = "0xFC5570", VA = "0xFC5570")]
		public static void GetClosestPoint(this NativeArray<float3> curve, Ray ray, out int index, out float distance, out float distanceAlongRay)
		{
		}

		[Token(Token = "0x600031B")]
		[Address(RVA = "0xFC57C0", Offset = "0xFC57C0", VA = "0xFC57C0")]
		public static void KeepAtDistance(this ref float3 point, ref float3 otherPoint, float distance, float stiffness = 1f)
		{
		}
	}
	[Token(Token = "0x20000AD")]
	public static class RigidbodyExtensions
	{
		[Token(Token = "0x600031C")]
		[Address(RVA = "0xFC5908", Offset = "0xFC5908", VA = "0xFC5908")]
		public static void GetLocalInertiaTensor(this Rigidbody rb, out float3x3 localInertiaTensor)
		{
		}

		[Token(Token = "0x600031D")]
		[Address(RVA = "0xFC5A2C", Offset = "0xFC5A2C", VA = "0xFC5A2C")]
		public static void GetInertiaTensor(this Rigidbody rb, out float3x3 inertiaTensor)
		{
		}

		[Token(Token = "0x600031E")]
		[Address(RVA = "0xFC5C84", Offset = "0xFC5C84", VA = "0xFC5C84")]
		public static void ApplyImpulseNow(this Rigidbody rb, ref float3x3 inverseInertiaTensor, float3 point, float3 impulse)
		{
		}

		[Token(Token = "0x600031F")]
		[Address(RVA = "0xFC5E48", Offset = "0xFC5E48", VA = "0xFC5E48")]
		public static void ApplyImpulseNow(this Rigidbody rb, float3 point, float3 impulse)
		{
		}

		[Token(Token = "0x6000320")]
		[Address(RVA = "0xFC5F04", Offset = "0xFC5F04", VA = "0xFC5F04")]
		public static void SetPointVelocityNow(this Rigidbody rb, ref float3x3 inverseInertiaTensor, float3 point, float3 normal, float desiredSpeed, float damping = 1f)
		{
		}

		[Token(Token = "0x6000321")]
		[Address(RVA = "0xFC6118", Offset = "0xFC6118", VA = "0xFC6118")]
		public static void SetPointVelocityNow(this Rigidbody rb, float3 point, float3 normal, float desiredSpeed, float damping = 1f)
		{
		}
	}
	[Token(Token = "0x20000AE")]
	public class AttachToRopeEnd : MonoBehaviour
	{
		[Token(Token = "0x4000310")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Rope _rope;

		[Token(Token = "0x4000311")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 1f)]
		public int _end;

		[Token(Token = "0x6000322")]
		[Address(RVA = "0xFC61F4", Offset = "0xFC61F4", VA = "0xFC61F4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000323")]
		[Address(RVA = "0xFC61F8", Offset = "0xFC61F8", VA = "0xFC61F8")]
		public void MoveToRopeEnd()
		{
		}

		[Token(Token = "0x6000324")]
		[Address(RVA = "0xFC65C0", Offset = "0xFC65C0", VA = "0xFC65C0")]
		public AttachToRopeEnd()
		{
		}
	}
	[Token(Token = "0x20000AF")]
	public class RopeDisconnector : MonoBehaviour
	{
		[Token(Token = "0x4000312")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Rope initialRope;

		[Token(Token = "0x4000313")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 0.5f)]
		public float hyperExtension;

		[Token(Token = "0x4000314")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public RopeRigidbodyConnection rigidbodyConnection;

		[Token(Token = "0x4000315")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityEvent onDisconnect;

		[Token(Token = "0x4000316")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool disconnectRequested;

		[Token(Token = "0x4000317")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		private bool disconnected;

		[Token(Token = "0x6000325")]
		[Address(RVA = "0xFC65C8", Offset = "0xFC65C8", VA = "0xFC65C8")]
		public void Disconnect()
		{
		}

		[Token(Token = "0x6000326")]
		[Address(RVA = "0xFC65E0", Offset = "0xFC65E0", VA = "0xFC65E0")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000327")]
		[Address(RVA = "0xFC6620", Offset = "0xFC6620", VA = "0xFC6620")]
		private void Disconnect_Internal()
		{
		}

		[Token(Token = "0x6000328")]
		[Address(RVA = "0xFC6640", Offset = "0xFC6640", VA = "0xFC6640")]
		private void AlignRopeBetweenPoints(Rope rope, Vector3 pointA, Vector3 pointB)
		{
		}

		[Token(Token = "0x6000329")]
		[Address(RVA = "0xFC67A4", Offset = "0xFC67A4", VA = "0xFC67A4")]
		public RopeDisconnector()
		{
		}
	}
	[Token(Token = "0x20000B0")]
	public class RopeSplitter : MonoBehaviour
	{
		[Token(Token = "0x4000318")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Rope initialRope;

		[Token(Token = "0x4000319")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Rope splitHalf;

		[Token(Token = "0x400031A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public RopeRigidbodyConnection initialRopeBreakingConnection;

		[Token(Token = "0x400031B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Range(0f, 1f)]
		public float splitPoint;

		[Token(Token = "0x400031C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Range(-0.5f, 0.5f)]
		public float splitExtension;

		[Token(Token = "0x400031D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool correctLengthMultiplier;

		[Token(Token = "0x400031E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		public bool setLengthMultiplierOnSplit;

		[Token(Token = "0x400031F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float resultingLengthMultiplier;

		[Token(Token = "0x4000320")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool setStiffnessOnSplit;

		[Token(Token = "0x4000321")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Range(0f, 1f)]
		public float resultingStiffness;

		[Token(Token = "0x4000322")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool setIterationsOnSplit;

		[Token(Token = "0x4000323")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Range(1f, 32f)]
		public int resultingIterations;

		[Token(Token = "0x4000324")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public UnityEvent onSplitComplete;

		[Token(Token = "0x4000325")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool splitCalled;

		[Token(Token = "0x4000326")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		private bool splitComplete;

		[Token(Token = "0x4000327")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5A")]
		public bool _debugDraw;

		[Token(Token = "0x4000328")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public LineRenderer _lineRendererA;

		[Token(Token = "0x4000329")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public LineRenderer _lineRendererB;

		[Token(Token = "0x600032A")]
		[Address(RVA = "0xFC67B8", Offset = "0xFC67B8", VA = "0xFC67B8")]
		private void Start()
		{
		}

		[Token(Token = "0x600032B")]
		[Address(RVA = "0xFC6810", Offset = "0xFC6810", VA = "0xFC6810")]
		public void Split()
		{
		}

		[Token(Token = "0x600032C")]
		[Address(RVA = "0xFC6828", Offset = "0xFC6828", VA = "0xFC6828")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x600032D")]
		[Address(RVA = "0xFC6868", Offset = "0xFC6868", VA = "0xFC6868")]
		private void PerformSplit()
		{
		}

		[Token(Token = "0x600032E")]
		[Address(RVA = "0xFC6B94", Offset = "0xFC6B94", VA = "0xFC6B94")]
		private void AlignRopeBetweenPoints(Rope rope, Vector3 pointA, Vector3 pointB, [Optional] LineRenderer lineRenderer)
		{
		}

		[Token(Token = "0x600032F")]
		[Address(RVA = "0xFC6EB8", Offset = "0xFC6EB8", VA = "0xFC6EB8")]
		public RopeSplitter()
		{
		}
	}
	[Token(Token = "0x20000B1")]
	public struct RopeMeasurements
	{
		[Token(Token = "0x400032A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float spawnCurveLength;

		[Token(Token = "0x400032B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float realCurveLength;

		[Token(Token = "0x400032C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int segmentCount;

		[Token(Token = "0x400032D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int particleCount;

		[Token(Token = "0x400032E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float particleSpacing;
	}
	[Token(Token = "0x20000B2")]
	public class Rope : MonoBehaviour
	{
		[Token(Token = "0x20000B3")]
		public struct EditorColors
		{
			[Token(Token = "0x4000350")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Color ropeSegments;

			[Token(Token = "0x4000351")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Color simulationParticle;

			[Token(Token = "0x4000352")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Color collisionParticle;

			[Token(Token = "0x4000353")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Color spawnPointHandle;
		}

		[Serializable]
		[Token(Token = "0x20000B4")]
		public struct SimulationSettings
		{
			[Token(Token = "0x4000354")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Tooltip("Turns on or off the simulation independently of the rendering of the rope. A use case could be to programmatically disable ropes that are too far away from the camera or ropes that are not visible.")]
			public bool enabled;

			[Token(Token = "0x4000355")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[Tooltip("The number of rope particles per meter. A higher resolution results in a smoother looking rope but requires more compute.")]
			[DisableInPlayMode]
			public float resolution;

			[Token(Token = "0x4000356")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Range(1f, 32f)]
			[Tooltip("The number of solver iterations to run for this rope. High resolution ropes need more iterations to become stiff. More iterations requires more compute.")]
			public int solverIterations;

			[Token(Token = "0x4000357")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[Delayed]
			[Tooltip("The mass per meter of the rope. This value is used when interacting with rigidbodies via RopeRigidbodyConnection components.")]
			public float massPerMeter;

			[Token(Token = "0x4000358")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("A measure of the stiffness of the rope. Note that the actual stiffness is heavily dependent on the number of solver iterations and the size of the physics time step used, if you change one value you problably need to re-tweak the other(s). This particular value does not influence performance.")]
			[Range(0.01f, 1f)]
			public float stiffness;

			[Token(Token = "0x4000359")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("A value that dynamically shortens or lengthens the rope by a multiplicative factor. This can be used to create a retractable grappling hook for example.")]
			[Range(0f, 2f)]
			public float lengthMultiplier;

			[Token(Token = "0x400035A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Range(0f, 1f)]
			[Tooltip("The percentage of energy to remove from the simulation each fixed update. Useful to model air resistance. Does not influence performance.")]
			public float energyLoss;

			[Token(Token = "0x400035B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[Tooltip("The percentage of the gravity force to apply to the rope. A low gravity multiplier might be useful to straighten out ropes that otherwise sack but should be considered a 'hack' as the rope will behave as if it is in space.")]
			[Range(0f, 1f)]
			public float gravityMultiplier;
		}

		[Serializable]
		[Token(Token = "0x20000B5")]
		public struct CollisionSettings
		{
			[Token(Token = "0x400035C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Tooltip("Enables collision handling for the rope so that it reacts to colliders other than the ones it is connected to via RopePins or RopeRigidbodyConnection components. Performance intensive on the main thread.")]
			public bool enabled;

			[Token(Token = "0x400035D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[Tooltip("Check and respond to collisions on every n:th rope particle. A value of one will make every simulated particle react to collisions, a value of two will make every other particle react to collisions and so on. As one sphere-overlap test is performed per particle, a low value is very performance intensive. Collision particles are visualized by yellow spheres when the rope is selected.")]
			[Range(1f, 20f)]
			public int stride;

			[Token(Token = "0x400035E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Range(0f, 20f)]
			[Tooltip("The dynamic friction coefficient of the rope. Used to slow the rope down if it is dragged along the ground for example.")]
			public float friction;

			[Token(Token = "0x400035F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[Range(0f, 1f)]
			[Tooltip("An extra distance (added ontop of the rope radius) that prevents small radius ropes from falling through geometry easily")]
			public float collisionMargin;

			[Token(Token = "0x4000360")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public LayerMask ignoreLayers;
		}

		[Token(Token = "0x20000B6")]
		protected struct CollisionPlane
		{
			[Token(Token = "0x4000361")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public float3 point;

			[Token(Token = "0x4000362")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public float3 normal;

			[Token(Token = "0x4000363")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float3 velocityChange;
		}

		[Token(Token = "0x20000B7")]
		protected struct ParticleTarget
		{
			[Token(Token = "0x4000364")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int particleIndex;

			[Token(Token = "0x4000365")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public float3 position;

			[Token(Token = "0x4000366")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float stiffness;
		}

		[Token(Token = "0x20000B8")]
		protected struct RigidbodyConnection
		{
			[Token(Token = "0x4000367")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Rigidbody rigidbody;

			[Token(Token = "0x4000368")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public float rigidbodyDamping;

			[Token(Token = "0x4000369")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public ParticleTarget target;
		}

		[Token(Token = "0x20000B9")]
		[BurstCompile]
		private struct IntegrateParticlesJob : IJob
		{
			[Token(Token = "0x400036A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Unity.Collections.ReadOnly]
			public float deltaTime;

			[Token(Token = "0x400036B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[Unity.Collections.ReadOnly]
			public float invDeltaTime;

			[Token(Token = "0x400036C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Unity.Collections.ReadOnly]
			public float3 externalAcceleration;

			[Token(Token = "0x400036D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Unity.Collections.ReadOnly]
			public float energyKept;

			[Token(Token = "0x400036E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public NativeArray<float3> positions;

			[Token(Token = "0x400036F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public NativeArray<float3> prevPositions;

			[Token(Token = "0x4000370")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[Unity.Collections.ReadOnly]
			public NativeArray<float> massMultipliers;

			[Token(Token = "0x6000350")]
			[Address(RVA = "0x103E308", Offset = "0x103E308", VA = "0x103E308", Slot = "4")]
			public void Execute()
			{
			}
		}

		[Token(Token = "0x20000BA")]
		[BurstCompile]
		private struct EnforceConstraintsJob : IJob
		{
			[Token(Token = "0x4000371")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public NativeArray<float3> positions;

			[Token(Token = "0x4000372")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public NativeArray<float3> prevPositions;

			[Token(Token = "0x4000373")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Unity.Collections.ReadOnly]
			public NativeArray<float> massMultipliers;

			[Token(Token = "0x4000374")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[Unity.Collections.ReadOnly]
			public bool isLoop;

			[Token(Token = "0x4000375")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			[Unity.Collections.ReadOnly]
			public int solverIterations;

			[Token(Token = "0x4000376")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[Unity.Collections.ReadOnly]
			public float stiffness;

			[Token(Token = "0x4000377")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			[Unity.Collections.ReadOnly]
			public float desiredSpacing;

			[Token(Token = "0x4000378")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			[Unity.Collections.ReadOnly]
			public bool collisionsEnabled;

			[Token(Token = "0x4000379")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			[Unity.Collections.ReadOnly]
			public float radius;

			[Token(Token = "0x400037A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[Unity.Collections.ReadOnly]
			public float friction;

			[Token(Token = "0x400037B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			[Unity.Collections.ReadOnly]
			public int maxCollisionPlanesPerParticle;

			[Token(Token = "0x400037C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[Unity.Collections.ReadOnly]
			public NativeArray<int> activeCollisionPlanes;

			[Token(Token = "0x400037D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[Unity.Collections.ReadOnly]
			public NativeArray<CollisionPlane> collisionPlanes;

			[Token(Token = "0x400037E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			[Unity.Collections.ReadOnly]
			public NativeArray<ParticleTarget> particleTargets;

			[Token(Token = "0x400037F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			public NativeArray<float3> particleTargetFeedbacks;

			[Token(Token = "0x6000351")]
			[Address(RVA = "0x103E3CC", Offset = "0x103E3CC", VA = "0x103E3CC", Slot = "4")]
			public void Execute()
			{
			}

			[Token(Token = "0x6000352")]
			[Address(RVA = "0x103E678", Offset = "0x103E678", VA = "0x103E678")]
			private void ApplyStickConstraint(int idx0, int idx1)
			{
			}

			[Token(Token = "0x6000353")]
			[Address(RVA = "0x103E80C", Offset = "0x103E80C", VA = "0x103E80C")]
			private void ApplyCollisionConstraint(int idx, CollisionPlane plane)
			{
			}
		}

		[Token(Token = "0x20000BB")]
		[BurstCompile]
		private struct OutputVerticesJob : IJob
		{
			[Token(Token = "0x4000380")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Unity.Collections.ReadOnly]
			public NativeArray<float3> positions;

			[Token(Token = "0x4000381")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public NativeArray<float3> bitangents;

			[Token(Token = "0x4000382")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public NativeArray<float3> smoothedBitangents;

			[Token(Token = "0x4000383")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[Unity.Collections.ReadOnly]
			public bool isLoop;

			[Token(Token = "0x4000384")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			[Unity.Collections.ReadOnly]
			public int radialVertices;

			[Token(Token = "0x4000385")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[Unity.Collections.ReadOnly]
			public float radius;

			[Token(Token = "0x4000386")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			[Unity.Collections.ReadOnly]
			public NativeArray<float3> cosLookup;

			[Token(Token = "0x4000387")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[Unity.Collections.ReadOnly]
			public NativeArray<float3> sinLookup;

			[Token(Token = "0x4000388")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[WriteOnly]
			public NativeArray<Vector3> vertices;

			[Token(Token = "0x4000389")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			[WriteOnly]
			public NativeArray<Vector3> normals;

			[Token(Token = "0x6000354")]
			[Address(RVA = "0x103EA18", Offset = "0x103EA18", VA = "0x103EA18", Slot = "4")]
			public void Execute()
			{
			}
		}

		[Token(Token = "0x400032F")]
		protected const int MaxCollisionPlanesPerParticle = 3;

		[Token(Token = "0x4000330")]
		protected const int InitialParticleTargets = 3;

		[Token(Token = "0x4000331")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly EditorColors Colors;

		[Token(Token = "0x4000332")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0.005f, 1f)]
		[Tooltip("The radius of the rope. This value is used both for constructing the visual mesh and handling collisions.")]
		public float radius;

		[Token(Token = "0x4000333")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("The number of vertices to use for each segment of the rope's visual mesh. More vertices results in a rounder looking rope but increases the overall vertex and triangle count of the visual mesh. This value does not influence the simulation of the rope at all.")]
		[Range(3f, 32f)]
		[DisableInPlayMode]
		public int radialVertices;

		[Token(Token = "0x4000334")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Whether or not the rope is a circular loop. If enabled, the last spawn point of the rope will be connected to the first spawn point.")]
		[DisableInPlayMode]
		public bool isLoop;

		[Token(Token = "0x4000335")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The material used to render the rope. This can be any material that uses vertex positions and optionally normals.")]
		public Material material;

		[Token(Token = "0x4000336")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The spawn points used to initially place the rope in the world. Currently, pairs of consequtive spawn points are considered linear line segments.")]
		[DisableInPlayMode]
		public List<float3> spawnPoints;

		[Token(Token = "0x4000337")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Space]
		public SimulationSettings simulation;

		[Token(Token = "0x4000338")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Space]
		public CollisionSettings collisions;

		[Token(Token = "0x4000339")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		protected bool initialized;

		[Token(Token = "0x400033A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6D")]
		protected bool computingSimulationFrame;

		[Token(Token = "0x400033B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected JobHandle simulationFrameHandle;

		[Token(Token = "0x400033C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected NativeArray<float3> positions;

		[Token(Token = "0x400033D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected NativeArray<float3> prevPositions;

		[Token(Token = "0x400033E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected NativeArray<float3> bitangents;

		[Token(Token = "0x400033F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected NativeArray<float3> smoothedBitangents;

		[Token(Token = "0x4000340")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected NativeArray<float> massMultipliers;

		[Token(Token = "0x4000341")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		protected NativeArray<int> activeCollisionPlanes;

		[Token(Token = "0x4000342")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		protected NativeArray<CollisionPlane> collisionPlanes;

		[Token(Token = "0x4000343")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		protected List<RigidbodyConnection> queuedRigidbodyConnections;

		[Token(Token = "0x4000344")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		protected List<RigidbodyConnection> liveRigidbodyConnections;

		[Token(Token = "0x4000345")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		protected NativeArray<ParticleTarget> particleTargets;

		[Token(Token = "0x4000346")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		protected NativeArray<float3> particleTargetFeedbacks;

		[Token(Token = "0x4000347")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		protected NativeArray<Vector3> vertices;

		[Token(Token = "0x4000348")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		protected NativeArray<Vector3> normals;

		[Token(Token = "0x4000349")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		protected NativeArray<float3> cosLookup;

		[Token(Token = "0x400034A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		protected NativeArray<float3> sinLookup;

		[Token(Token = "0x400034B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		protected Vector3[] vertices2;

		[Token(Token = "0x400034C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		protected Vector3[] normals2;

		[Token(Token = "0x400034D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		protected Mesh mesh;

		[Token(Token = "0x400034E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		protected RopeMeasurements _measurements;

		[Token(Token = "0x400034F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		protected Collider[] collisionQueryBuffer;

		[Token(Token = "0x1700007C")]
		public RopeMeasurements measurements
		{
			[Token(Token = "0x6000330")]
			[Address(RVA = "0xFC63EC", Offset = "0xFC63EC", VA = "0xFC63EC")]
			get
			{
				return default(RopeMeasurements);
			}
		}

		[Token(Token = "0x1700007D")]
		public Bounds currentBounds
		{
			[Token(Token = "0x6000331")]
			[Address(RVA = "0xFC7A5C", Offset = "0xFC7A5C", VA = "0xFC7A5C")]
			get
			{
				return default(Bounds);
			}
		}

		[Token(Token = "0x6000332")]
		[Address(RVA = "0xFC7ABC", Offset = "0xFC7ABC", VA = "0xFC7ABC")]
		public void OnValidate()
		{
		}

		[Token(Token = "0x6000333")]
		[Address(RVA = "0xFC7AE0", Offset = "0xFC7AE0", VA = "0xFC7AE0")]
		public void PushSpawnPoint()
		{
		}

		[Token(Token = "0x6000334")]
		[Address(RVA = "0xFC7D68", Offset = "0xFC7D68", VA = "0xFC7D68")]
		public void PopSpawnPoint()
		{
		}

		[Token(Token = "0x6000335")]
		[Address(RVA = "0xFC6430", Offset = "0xFC6430", VA = "0xFC6430")]
		public int GetParticleIndexAt(float distance)
		{
			return default(int);
		}

		[Token(Token = "0x6000336")]
		[Address(RVA = "0xFC6714", Offset = "0xFC6714", VA = "0xFC6714")]
		public int GetParticleCount()
		{
			return default(int);
		}

		[Token(Token = "0x6000337")]
		[Address(RVA = "0xFC7DE0", Offset = "0xFC7DE0", VA = "0xFC7DE0")]
		public float GetScalarDistanceAt(int particleIndex)
		{
			return default(float);
		}

		[Token(Token = "0x6000338")]
		[Address(RVA = "0xFC64A0", Offset = "0xFC64A0", VA = "0xFC64A0")]
		public float3 GetPositionAt(int particleIndex)
		{
			return default(float3);
		}

		[Token(Token = "0x6000339")]
		[Address(RVA = "0xFC6738", Offset = "0xFC6738", VA = "0xFC6738")]
		public void SetPositionAt(int particleIndex, float3 position)
		{
		}

		[Token(Token = "0x600033A")]
		[Address(RVA = "0xFC7F64", Offset = "0xFC7F64", VA = "0xFC7F64")]
		public float3 GetVelocityAt(int particleIndex)
		{
			return default(float3);
		}

		[Token(Token = "0x600033B")]
		[Address(RVA = "0xFC6E14", Offset = "0xFC6E14", VA = "0xFC6E14")]
		public void SetVelocityAt(int particleIndex, float3 velocity)
		{
		}

		[Token(Token = "0x600033C")]
		[Address(RVA = "0xFC8030", Offset = "0xFC8030", VA = "0xFC8030")]
		public float GetMassMultiplierAt(int particleIndex)
		{
			return default(float);
		}

		[Token(Token = "0x600033D")]
		[Address(RVA = "0xFC8078", Offset = "0xFC8078", VA = "0xFC8078")]
		public void SetMassMultiplierAt(int particleIndex, float value)
		{
		}

		[Token(Token = "0x600033E")]
		[Address(RVA = "0xFC80C8", Offset = "0xFC80C8", VA = "0xFC80C8")]
		public void GetClosestParticle(float3 point, out int particleIndex, out float distance)
		{
		}

		[Token(Token = "0x600033F")]
		[Address(RVA = "0xFC814C", Offset = "0xFC814C", VA = "0xFC814C")]
		public void GetClosestParticle(Ray ray, out int particleIndex, out float distance, out float distanceAlongRay)
		{
		}

		[Token(Token = "0x6000340")]
		[Address(RVA = "0xFC81D0", Offset = "0xFC81D0", VA = "0xFC81D0")]
		public void RegisterRigidbodyConnection(int particleIndex, Rigidbody rigidbody, float rigidbodyDamping, float3 pointOnBody, float stiffness)
		{
		}

		[Token(Token = "0x6000341")]
		[Address(RVA = "0xFC6534", Offset = "0xFC6534", VA = "0xFC6534")]
		public float3 GetBitangentAtEnd(bool start)
		{
			return default(float3);
		}

		[Token(Token = "0x6000342")]
		[Address(RVA = "0xFC832C", Offset = "0xFC832C", VA = "0xFC832C")]
		protected void ComputeRealCurve(Allocator allocator, out RopeMeasurements measurements, out NativeArray<float3> points)
		{
		}

		[Token(Token = "0x6000343")]
		[Address(RVA = "0xFC84A0", Offset = "0xFC84A0", VA = "0xFC84A0")]
		public void Start()
		{
		}

		[Token(Token = "0x6000344")]
		[Address(RVA = "0xFC6EEC", Offset = "0xFC6EEC", VA = "0xFC6EEC")]
		protected bool Initialize()
		{
			return default(bool);
		}

		[Token(Token = "0x6000345")]
		[Address(RVA = "0xFC84A4", Offset = "0xFC84A4", VA = "0xFC84A4")]
		public void UpdateCollisionPlanes()
		{
		}

		[Token(Token = "0x6000346")]
		[Address(RVA = "0xFC8BEC", Offset = "0xFC8BEC", VA = "0xFC8BEC")]
		protected void PrepareRigidbodyConnections()
		{
		}

		[Token(Token = "0x6000347")]
		[Address(RVA = "0xFC8ED4", Offset = "0xFC8ED4", VA = "0xFC8ED4")]
		protected void ApplyRigidbodyConnectionFeedback()
		{
		}

		[Token(Token = "0x6000348")]
		[Address(RVA = "0xFC91B8", Offset = "0xFC91B8", VA = "0xFC91B8")]
		protected void ScheduleNextSimulationFrame()
		{
		}

		[Token(Token = "0x6000349")]
		[Address(RVA = "0xFC7F00", Offset = "0xFC7F00", VA = "0xFC7F00")]
		protected void CompletePreviousSimulationFrame()
		{
		}

		[Token(Token = "0x600034A")]
		[Address(RVA = "0xFC9498", Offset = "0xFC9498", VA = "0xFC9498")]
		protected void SubmitToRenderer()
		{
		}

		[Token(Token = "0x600034B")]
		[Address(RVA = "0xFC9624", Offset = "0xFC9624", VA = "0xFC9624")]
		public void FixedUpdate()
		{
		}

		[Token(Token = "0x600034C")]
		[Address(RVA = "0xFC96A0", Offset = "0xFC96A0", VA = "0xFC96A0")]
		public void LateUpdate()
		{
		}

		[Token(Token = "0x600034D")]
		[Address(RVA = "0xFC970C", Offset = "0xFC970C", VA = "0xFC970C")]
		public void OnDestroy()
		{
		}

		[Token(Token = "0x600034E")]
		[Address(RVA = "0xFC98B0", Offset = "0xFC98B0", VA = "0xFC98B0")]
		public Rope()
		{
		}
	}
	[Token(Token = "0x20000BC")]
	public class RopePin : MonoBehaviour
	{
		[Token(Token = "0x400038A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Rope rope;

		[Token(Token = "0x400038B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 1f)]
		[DisableInPlayMode]
		public float ropeLocation;

		[Token(Token = "0x400038C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool automaticallyFindRopeLocation;

		[Token(Token = "0x400038D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public new Transform transform;

		[Token(Token = "0x400038E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 localPoint;

		[Token(Token = "0x400038F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		protected int particleIndex;

		[Token(Token = "0x6000355")]
		[Address(RVA = "0x103EFB4", Offset = "0x103EFB4", VA = "0x103EFB4")]
		public void Start()
		{
		}

		[Token(Token = "0x6000356")]
		[Address(RVA = "0x103F0F0", Offset = "0x103F0F0", VA = "0x103F0F0")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x6000357")]
		[Address(RVA = "0x103F1A4", Offset = "0x103F1A4", VA = "0x103F1A4")]
		public void FixedUpdate()
		{
		}

		[Token(Token = "0x6000358")]
		[Address(RVA = "0x103F27C", Offset = "0x103F27C", VA = "0x103F27C")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x6000359")]
		[Address(RVA = "0x103F330", Offset = "0x103F330", VA = "0x103F330")]
		public RopePin()
		{
		}
	}
	[Token(Token = "0x20000BD")]
	public class RopeRigidbodyConnection : MonoBehaviour
	{
		[Token(Token = "0x4000390")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Rope rope;

		[Token(Token = "0x4000391")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 1f)]
		[DisableInPlayMode]
		public float ropeLocation;

		[Token(Token = "0x4000392")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool automaticallyFindRopeLocation;

		[Token(Token = "0x4000393")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Rigidbody rb;

		[Token(Token = "0x4000394")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 localPointOnBody;

		[Token(Token = "0x4000395")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Range(0f, 1f)]
		[Tooltip("The amount of the rigidbody velocity to remove when the impulse is from the rope is applied to the rigidbody")]
		public float rigidbodyDamping;

		[Token(Token = "0x4000396")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Range(0f, 1f)]
		[Tooltip("A measure of the stiffness of the connection. Lower values are usually more stable.")]
		public float stiffness;

		[Token(Token = "0x4000397")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		protected int particleIndex;

		[Token(Token = "0x600035A")]
		[Address(RVA = "0x103F338", Offset = "0x103F338", VA = "0x103F338")]
		public void Start()
		{
		}

		[Token(Token = "0x600035B")]
		[Address(RVA = "0x103F480", Offset = "0x103F480", VA = "0x103F480")]
		public void FixedUpdate()
		{
		}

		[Token(Token = "0x600035C")]
		[Address(RVA = "0x103F5C8", Offset = "0x103F5C8", VA = "0x103F5C8")]
		public RopeRigidbodyConnection()
		{
		}
	}
}
namespace ProGroups
{
	[Serializable]
	[Token(Token = "0x20000BE")]
	public class Group
	{
		[Token(Token = "0x4000398")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x4000399")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject[] objects;

		[Token(Token = "0x400039A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool frozen;

		[Token(Token = "0x400039B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool hidden;

		[Token(Token = "0x600035D")]
		[Address(RVA = "0x103F5DC", Offset = "0x103F5DC", VA = "0x103F5DC")]
		public Group(string InName, GameObject[] InObjects, bool InFrozen, bool InHidden)
		{
		}

		[Token(Token = "0x600035E")]
		[Address(RVA = "0x103F6A0", Offset = "0x103F6A0", VA = "0x103F6A0")]
		public void RemoveNullOrEmpty()
		{
		}

		[Token(Token = "0x600035F")]
		[Address(RVA = "0x103F804", Offset = "0x103F804", VA = "0x103F804")]
		public void AddObjects(GameObject[] InObjects)
		{
		}

		[Token(Token = "0x6000360")]
		[Address(RVA = "0x103F8B4", Offset = "0x103F8B4", VA = "0x103F8B4")]
		public void RemoveObject(GameObject InObject)
		{
		}

		[Token(Token = "0x6000361")]
		[Address(RVA = "0x103F90C", Offset = "0x103F90C", VA = "0x103F90C")]
		public void RemoveObjects(GameObject[] InObjects)
		{
		}
	}
	[Token(Token = "0x20000C0")]
	internal static class ArrayExt
	{
		[Token(Token = "0x6000365")]
		public static void Add<T>(ref T[] array, T val)
		{
		}

		[Token(Token = "0x6000366")]
		public static void AddRange<T>(ref T[] array, T[] values)
		{
		}

		[Token(Token = "0x6000367")]
		public static void Remove<T>(ref T[] array, T value)
		{
		}

		[Token(Token = "0x6000368")]
		public static void Remove<T>(ref T[] array, T[] values)
		{
		}

		[Token(Token = "0x6000369")]
		public static void RemoveAt<T>(ref T[] array, int index)
		{
		}
	}
	[Token(Token = "0x20000C3")]
	public class GroupContainer : MonoBehaviour
	{
		[Token(Token = "0x40003A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Group[] sceneGroups;

		[Token(Token = "0x600036E")]
		[Address(RVA = "0x103FA38", Offset = "0x103FA38", VA = "0x103FA38")]
		public void NewGroup(string InName, GameObject[] InObjects)
		{
		}

		[Token(Token = "0x600036F")]
		[Address(RVA = "0x103FB58", Offset = "0x103FB58", VA = "0x103FB58")]
		public void ToggleFreeze(Group InGroup)
		{
		}

		[Token(Token = "0x6000370")]
		[Address(RVA = "0x103FC40", Offset = "0x103FC40", VA = "0x103FC40")]
		public void ToggleVis(Group InGroup)
		{
		}

		[Token(Token = "0x6000371")]
		[Address(RVA = "0x103FCDC", Offset = "0x103FCDC", VA = "0x103FCDC")]
		public void HideGroup(Group InGroup)
		{
		}

		[Token(Token = "0x6000372")]
		[Address(RVA = "0x103FC64", Offset = "0x103FC64", VA = "0x103FC64")]
		public void ShowGroup(Group InGroup)
		{
		}

		[Token(Token = "0x6000373")]
		[Address(RVA = "0x103FD88", Offset = "0x103FD88", VA = "0x103FD88")]
		public void Isolate(int i)
		{
		}

		[Token(Token = "0x6000374")]
		[Address(RVA = "0x103FE08", Offset = "0x103FE08", VA = "0x103FE08")]
		public void RemoveGroups(IEnumerable<int> indices)
		{
		}

		[Token(Token = "0x6000375")]
		[Address(RVA = "0x103FF0C", Offset = "0x103FF0C", VA = "0x103FF0C")]
		public void RemoveGroup(int i)
		{
		}

		[Token(Token = "0x6000376")]
		[Address(RVA = "0x1040010", Offset = "0x1040010", VA = "0x1040010")]
		public void UpdateGroup(Group InGroup, GameObject[] InObjects)
		{
		}

		[Token(Token = "0x6000377")]
		[Address(RVA = "0x10400C4", Offset = "0x10400C4", VA = "0x10400C4")]
		public void MoveGroupUp(int InShiftIndex)
		{
		}

		[Token(Token = "0x6000378")]
		[Address(RVA = "0x10401D8", Offset = "0x10401D8", VA = "0x10401D8")]
		public void MoveGroupDown(int InShiftIndex)
		{
		}

		[Token(Token = "0x6000379")]
		[Address(RVA = "0x10402E8", Offset = "0x10402E8", VA = "0x10402E8")]
		public void RemoveNullOrEmpty()
		{
		}

		[Token(Token = "0x600037A")]
		[Address(RVA = "0x1040418", Offset = "0x1040418", VA = "0x1040418")]
		public void Clean()
		{
		}

		[Token(Token = "0x600037B")]
		[Address(RVA = "0x1040474", Offset = "0x1040474", VA = "0x1040474")]
		public GroupContainer()
		{
		}
	}
	[Token(Token = "0x20000C5")]
	public static class ProGroups_Util
	{
		[Token(Token = "0x600037F")]
		[Address(RVA = "0x103FBE8", Offset = "0x103FBE8", VA = "0x103FBE8")]
		public static void Freeze(this GameObject go)
		{
		}

		[Token(Token = "0x6000380")]
		[Address(RVA = "0x103FC14", Offset = "0x103FC14", VA = "0x103FC14")]
		public static void Thaw(this GameObject go)
		{
		}

		[Token(Token = "0x6000381")]
		[Address(RVA = "0x103FD58", Offset = "0x103FD58", VA = "0x103FD58")]
		public static void Hide(this GameObject go)
		{
		}

		[Token(Token = "0x6000382")]
		[Address(RVA = "0x103FD70", Offset = "0x103FD70", VA = "0x103FD70")]
		public static void Show(this GameObject go)
		{
		}
	}
}
namespace ProGrids
{
	[Token(Token = "0x20000C6")]
	public static class pg_Constant
	{
		[Token(Token = "0x40003A3")]
		public const string ProGridsIsEnabled = "pgProGridsIsEnabled";

		[Token(Token = "0x40003A4")]
		public const string ProGridsIsExtended = "pgProGridsIsExtended";

		[Token(Token = "0x40003A5")]
		public const string ProGridsUpgradeURL = "http://u3d.as/content/six-by-seven-studio/pro-grids/3ov";

		[Token(Token = "0x40003A6")]
		public const string SnapValue = "pgSnapValue";

		[Token(Token = "0x40003A7")]
		public const string SnapMultiplier = "pgSnapMultiplier";

		[Token(Token = "0x40003A8")]
		public const string SnapEnabled = "pgSnapEnabled";

		[Token(Token = "0x40003A9")]
		public const string UseAxisConstraints = "pgUseAxisConstraints";

		[Token(Token = "0x40003AA")]
		public const string LastOrthoToggledRotation = "pgLastOrthoToggledRotation";

		[Token(Token = "0x40003AB")]
		public const string BracketIncreaseValue = "pgBracketIncreaseValue";

		[Token(Token = "0x40003AC")]
		public const string GridUnit = "pg_GridUnit";

		[Token(Token = "0x40003AD")]
		public const string LockGrid = "pg_LockGrid";

		[Token(Token = "0x40003AE")]
		public const string LockedGridPivot = "pg_LockedGridPivot";

		[Token(Token = "0x40003AF")]
		public const string PGVersion = "pg_Version";

		[Token(Token = "0x40003B0")]
		public const string GridAxis = "pg_GridAxis";

		[Token(Token = "0x40003B1")]
		public const string PerspGrid = "pg_PerspGrid";

		[Token(Token = "0x40003B2")]
		public const string SnapScale = "pg_SnapOnScale";

		[Token(Token = "0x40003B3")]
		public const string PredictiveGrid = "pg_PredictiveGrid";

		[Token(Token = "0x40003B4")]
		public const string SnapAsGroup = "pg_SnapAsGroup";

		[Token(Token = "0x40003B5")]
		public const string MajorLineIncrement = "pg_MajorLineIncrement";

		[Token(Token = "0x40003B6")]
		public const string SyncUnitySnap = "pg_SyncUnitySnap";

		[Token(Token = "0x40003B7")]
		public const float METER = 1f;

		[Token(Token = "0x40003B8")]
		public const float CENTIMETER = 0.01f;

		[Token(Token = "0x40003B9")]
		public const float MILLIMETER = 0.001f;

		[Token(Token = "0x40003BA")]
		public const float INCH = 0.025399987f;

		[Token(Token = "0x40003BB")]
		public const float FOOT = 0.3048f;

		[Token(Token = "0x40003BC")]
		public const float YARD = 1.09361f;

		[Token(Token = "0x40003BD")]
		public const float PARSEC = 5f;
	}
	[Token(Token = "0x20000C7")]
	public enum Axis
	{
		[Token(Token = "0x40003BF")]
		None = 0,
		[Token(Token = "0x40003C0")]
		X = 1,
		[Token(Token = "0x40003C1")]
		Y = 2,
		[Token(Token = "0x40003C2")]
		Z = 4,
		[Token(Token = "0x40003C3")]
		NegX = 8,
		[Token(Token = "0x40003C4")]
		NegY = 22,
		[Token(Token = "0x40003C5")]
		NegZ = 50
	}
	[Token(Token = "0x20000C8")]
	public enum SnapUnit
	{
		[Token(Token = "0x40003C7")]
		Meter,
		[Token(Token = "0x40003C8")]
		Centimeter,
		[Token(Token = "0x40003C9")]
		Millimeter,
		[Token(Token = "0x40003CA")]
		Inch,
		[Token(Token = "0x40003CB")]
		Foot,
		[Token(Token = "0x40003CC")]
		Yard,
		[Token(Token = "0x40003CD")]
		Parsec
	}
	[Token(Token = "0x20000C9")]
	public static class pg_Enum
	{
		[Token(Token = "0x6000383")]
		[Address(RVA = "0x1040580", Offset = "0x1040580", VA = "0x1040580")]
		public static Vector3 InverseAxisMask(Vector3 v, Axis axis)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000384")]
		[Address(RVA = "0x10405E0", Offset = "0x10405E0", VA = "0x10405E0")]
		public static Vector3 AxisMask(Vector3 v, Axis axis)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000385")]
		[Address(RVA = "0x1040648", Offset = "0x1040648", VA = "0x1040648")]
		public static float SnapUnitValue(SnapUnit su)
		{
			return default(float);
		}
	}
	[Token(Token = "0x20000CA")]
	[AttributeUsage(AttributeTargets.Class, AllowMultiple = false, Inherited = true)]
	public class ProGridsNoSnapAttribute : Attribute
	{
		[Token(Token = "0x6000386")]
		[Address(RVA = "0x104066C", Offset = "0x104066C", VA = "0x104066C")]
		public ProGridsNoSnapAttribute()
		{
		}
	}
	[Token(Token = "0x20000CB")]
	[AttributeUsage(AttributeTargets.Class, AllowMultiple = false, Inherited = true)]
	public class ProGridsConditionalSnapAttribute : Attribute
	{
		[Token(Token = "0x6000387")]
		[Address(RVA = "0x1040674", Offset = "0x1040674", VA = "0x1040674")]
		public ProGridsConditionalSnapAttribute()
		{
		}
	}
	[Token(Token = "0x20000CC")]
	public static class pg_Util
	{
		[Token(Token = "0x20000CD")]
		private abstract class SnapEnabledOverride
		{
			[Token(Token = "0x600039D")]
			public abstract bool IsEnabled();

			[Token(Token = "0x600039E")]
			[Address(RVA = "0x1042478", Offset = "0x1042478", VA = "0x1042478")]
			protected SnapEnabledOverride()
			{
			}
		}

		[Token(Token = "0x20000CE")]
		private class SnapIsEnabledOverride : SnapEnabledOverride
		{
			[Token(Token = "0x40003D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private bool m_SnapIsEnabled;

			[Token(Token = "0x600039F")]
			[Address(RVA = "0x10422E0", Offset = "0x10422E0", VA = "0x10422E0")]
			public SnapIsEnabledOverride(bool snapIsEnabled)
			{
			}

			[Token(Token = "0x60003A0")]
			[Address(RVA = "0x1042480", Offset = "0x1042480", VA = "0x1042480", Slot = "4")]
			public override bool IsEnabled()
			{
				return default(bool);
			}
		}

		[Token(Token = "0x20000CF")]
		private class ConditionalSnapOverride : SnapEnabledOverride
		{
			[Token(Token = "0x40003D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Func<bool> m_IsEnabledDelegate;

			[Token(Token = "0x60003A1")]
			[Address(RVA = "0x1042308", Offset = "0x1042308", VA = "0x1042308")]
			public ConditionalSnapOverride(Func<bool> d)
			{
			}

			[Token(Token = "0x60003A2")]
			[Address(RVA = "0x1042488", Offset = "0x1042488", VA = "0x1042488", Slot = "4")]
			public override bool IsEnabled()
			{
				return default(bool);
			}
		}

		[Token(Token = "0x40003CE")]
		private const float EPSILON = 0.0001f;

		[Token(Token = "0x40003CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<Transform, SnapEnabledOverride> m_SnapOverrideCache;

		[Token(Token = "0x40003D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Dictionary<Type, bool> m_NoSnapAttributeTypeCache;

		[Token(Token = "0x40003D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static Dictionary<Type, MethodInfo> m_ConditionalSnapAttributeCache;

		[Token(Token = "0x6000388")]
		[Address(RVA = "0x104067C", Offset = "0x104067C", VA = "0x104067C")]
		public static Color ColorWithString(string value)
		{
			return default(Color);
		}

		[Token(Token = "0x6000389")]
		[Address(RVA = "0x1040864", Offset = "0x1040864", VA = "0x1040864")]
		private static Vector3 VectorToMask(Vector3 vec)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600038A")]
		[Address(RVA = "0x10408F4", Offset = "0x10408F4", VA = "0x10408F4")]
		private static Axis MaskToAxis(Vector3 vec)
		{
			return default(Axis);
		}

		[Token(Token = "0x600038B")]
		[Address(RVA = "0x1040924", Offset = "0x1040924", VA = "0x1040924")]
		private static Axis BestAxis(Vector3 vec)
		{
			return default(Axis);
		}

		[Token(Token = "0x600038C")]
		[Address(RVA = "0x1040964", Offset = "0x1040964", VA = "0x1040964")]
		public static Axis CalcDragAxis(Vector3 movement, Camera cam)
		{
			return default(Axis);
		}

		[Token(Token = "0x600038D")]
		[Address(RVA = "0x1040DA4", Offset = "0x1040DA4", VA = "0x1040DA4")]
		public static float ValueFromMask(Vector3 val, Vector3 mask)
		{
			return default(float);
		}

		[Token(Token = "0x600038E")]
		[Address(RVA = "0x1040DC8", Offset = "0x1040DC8", VA = "0x1040DC8")]
		public static Vector3 SnapValue(Vector3 val, float snapValue)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600038F")]
		[Address(RVA = "0x1040F00", Offset = "0x1040F00", VA = "0x1040F00")]
		private static Type GetType(string type, [Optional] string assembly)
		{
			return null;
		}

		[Token(Token = "0x6000390")]
		[Address(RVA = "0x10413B8", Offset = "0x10413B8", VA = "0x10413B8")]
		public static void SetUnityGridEnabled(bool isEnabled)
		{
		}

		[Token(Token = "0x6000391")]
		[Address(RVA = "0x1041538", Offset = "0x1041538", VA = "0x1041538")]
		public static bool GetUnityGridEnabled()
		{
			return default(bool);
		}

		[Token(Token = "0x6000392")]
		[Address(RVA = "0x10416B8", Offset = "0x10416B8", VA = "0x10416B8")]
		public static Vector3 SnapValue(Vector3 val, Vector3 mask, float snapValue)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000393")]
		[Address(RVA = "0x10417C0", Offset = "0x10417C0", VA = "0x10417C0")]
		public static Vector3 SnapToCeil(Vector3 val, Vector3 mask, float snapValue)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000394")]
		[Address(RVA = "0x10418CC", Offset = "0x10418CC", VA = "0x10418CC")]
		public static Vector3 SnapToFloor(Vector3 val, float snapValue)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000395")]
		[Address(RVA = "0x104196C", Offset = "0x104196C", VA = "0x104196C")]
		public static Vector3 SnapToFloor(Vector3 val, Vector3 mask, float snapValue)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000396")]
		[Address(RVA = "0x1040E6C", Offset = "0x1040E6C", VA = "0x1040E6C")]
		public static float Snap(float val, float round)
		{
			return default(float);
		}

		[Token(Token = "0x6000397")]
		[Address(RVA = "0x104195C", Offset = "0x104195C", VA = "0x104195C")]
		public static float SnapToFloor(float val, float snapValue)
		{
			return default(float);
		}

		[Token(Token = "0x6000398")]
		[Address(RVA = "0x10418BC", Offset = "0x10418BC", VA = "0x10418BC")]
		public static float SnapToCeil(float val, float snapValue)
		{
			return default(float);
		}

		[Token(Token = "0x6000399")]
		[Address(RVA = "0x1041A68", Offset = "0x1041A68", VA = "0x1041A68")]
		public static Vector3 CeilFloor(Vector3 v)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600039A")]
		[Address(RVA = "0x1041A8C", Offset = "0x1041A8C", VA = "0x1041A8C")]
		public static void ClearSnapEnabledCache()
		{
		}

		[Token(Token = "0x600039B")]
		[Address(RVA = "0x1041B04", Offset = "0x1041B04", VA = "0x1041B04")]
		public static bool SnapIsEnabled(Transform t)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20000D4")]
	public static class PGExtensions
	{
		[Token(Token = "0x60003AE")]
		[Address(RVA = "0x1042768", Offset = "0x1042768", VA = "0x1042768")]
		public static bool Contains(this Transform[] t_arr, Transform t)
		{
			return default(bool);
		}

		[Token(Token = "0x60003AF")]
		[Address(RVA = "0x104282C", Offset = "0x104282C", VA = "0x104282C")]
		public static float Sum(this Vector3 v)
		{
			return default(float);
		}

		[Token(Token = "0x60003B0")]
		[Address(RVA = "0x1042838", Offset = "0x1042838", VA = "0x1042838")]
		public static bool InFrustum(this Camera cam, Vector3 point)
		{
			return default(bool);
		}
	}
}
namespace Parabox.CSG
{
	[Token(Token = "0x20000D5")]
	internal class CSG_Model
	{
		[Token(Token = "0x40003DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<CSG_Vertex> vertices;

		[Token(Token = "0x40003DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<int> indices;

		[Token(Token = "0x60003B1")]
		[Address(RVA = "0x104288C", Offset = "0x104288C", VA = "0x104288C")]
		public CSG_Model()
		{
		}

		[Token(Token = "0x60003B2")]
		[Address(RVA = "0x1042964", Offset = "0x1042964", VA = "0x1042964")]
		public CSG_Model(GameObject go)
		{
		}

		[Token(Token = "0x60003B3")]
		[Address(RVA = "0x1042CD8", Offset = "0x1042CD8", VA = "0x1042CD8")]
		public CSG_Model(List<CSG_Polygon> list)
		{
		}

		[Token(Token = "0x60003B4")]
		[Address(RVA = "0x1043210", Offset = "0x1043210", VA = "0x1043210")]
		public List<CSG_Polygon> ToPolygons()
		{
			return null;
		}

		[Token(Token = "0x60003B5")]
		[Address(RVA = "0x1043798", Offset = "0x1043798", VA = "0x1043798")]
		public Mesh ToMesh()
		{
			return null;
		}
	}
	[Token(Token = "0x20000D6")]
	internal class CSG_Node
	{
		[Token(Token = "0x40003DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<CSG_Polygon> polygons;

		[Token(Token = "0x40003DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public CSG_Node front;

		[Token(Token = "0x40003DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CSG_Node back;

		[Token(Token = "0x40003E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public CSG_Plane plane;

		[Token(Token = "0x60003B6")]
		[Address(RVA = "0x1043A58", Offset = "0x1043A58", VA = "0x1043A58")]
		public CSG_Node()
		{
		}

		[Token(Token = "0x60003B7")]
		[Address(RVA = "0x1043A8C", Offset = "0x1043A8C", VA = "0x1043A8C")]
		public CSG_Node(List<CSG_Polygon> list)
		{
		}

		[Token(Token = "0x60003B8")]
		[Address(RVA = "0x1043D98", Offset = "0x1043D98", VA = "0x1043D98")]
		public CSG_Node(List<CSG_Polygon> list, CSG_Plane plane, CSG_Node front, CSG_Node back)
		{
		}

		[Token(Token = "0x60003B9")]
		[Address(RVA = "0x1043E0C", Offset = "0x1043E0C", VA = "0x1043E0C")]
		public CSG_Node Clone()
		{
			return null;
		}

		[Token(Token = "0x60003BA")]
		[Address(RVA = "0x1043E88", Offset = "0x1043E88", VA = "0x1043E88")]
		public void ClipTo(CSG_Node other)
		{
		}

		[Token(Token = "0x60003BB")]
		[Address(RVA = "0x104409C", Offset = "0x104409C", VA = "0x104409C")]
		public void Invert()
		{
		}

		[Token(Token = "0x60003BC")]
		[Address(RVA = "0x1043AB8", Offset = "0x1043AB8", VA = "0x1043AB8")]
		public void Build(List<CSG_Polygon> list)
		{
		}

		[Token(Token = "0x60003BD")]
		[Address(RVA = "0x1043EE4", Offset = "0x1043EE4", VA = "0x1043EE4")]
		public List<CSG_Polygon> ClipPolygons(List<CSG_Polygon> list)
		{
			return null;
		}

		[Token(Token = "0x60003BE")]
		[Address(RVA = "0x1044C18", Offset = "0x1044C18", VA = "0x1044C18")]
		public List<CSG_Polygon> AllPolygons()
		{
			return null;
		}

		[Token(Token = "0x60003BF")]
		[Address(RVA = "0x1044D08", Offset = "0x1044D08", VA = "0x1044D08")]
		public static CSG_Node Union(CSG_Node a1, CSG_Node b1)
		{
			return null;
		}

		[Token(Token = "0x60003C0")]
		[Address(RVA = "0x1044DF8", Offset = "0x1044DF8", VA = "0x1044DF8")]
		public static CSG_Node Subtract(CSG_Node a1, CSG_Node b1)
		{
			return null;
		}

		[Token(Token = "0x60003C1")]
		[Address(RVA = "0x1044EF8", Offset = "0x1044EF8", VA = "0x1044EF8")]
		public static CSG_Node Intersect(CSG_Node a1, CSG_Node b1)
		{
			return null;
		}
	}
	[Token(Token = "0x20000D7")]
	internal class CSG_Plane
	{
		[Token(Token = "0x20000D8")]
		[Flags]
		private enum EPolygonType
		{
			[Token(Token = "0x40003E4")]
			Coplanar = 0,
			[Token(Token = "0x40003E5")]
			Front = 1,
			[Token(Token = "0x40003E6")]
			Back = 2,
			[Token(Token = "0x40003E7")]
			Spanning = 3
		}

		[Token(Token = "0x40003E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 normal;

		[Token(Token = "0x40003E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float w;

		[Token(Token = "0x60003C2")]
		[Address(RVA = "0x10442DC", Offset = "0x10442DC", VA = "0x10442DC")]
		public CSG_Plane()
		{
		}

		[Token(Token = "0x60003C3")]
		[Address(RVA = "0x1044FF0", Offset = "0x1044FF0", VA = "0x1044FF0")]
		public CSG_Plane(Vector3 a, Vector3 b, Vector3 c)
		{
		}

		[Token(Token = "0x60003C4")]
		[Address(RVA = "0x1044254", Offset = "0x1044254", VA = "0x1044254")]
		public bool Valid()
		{
			return default(bool);
		}

		[Token(Token = "0x60003C5")]
		[Address(RVA = "0x1044244", Offset = "0x1044244", VA = "0x1044244")]
		public void Flip()
		{
		}

		[Token(Token = "0x60003C6")]
		[Address(RVA = "0x104433C", Offset = "0x104433C", VA = "0x104433C")]
		public void SplitPolygon(CSG_Polygon polygon, List<CSG_Polygon> coplanarFront, List<CSG_Polygon> coplanarBack, List<CSG_Polygon> front, List<CSG_Polygon> back)
		{
		}
	}
	[Token(Token = "0x20000D9")]
	internal class CSG_Polygon
	{
		[Token(Token = "0x40003E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<CSG_Vertex> vertices;

		[Token(Token = "0x40003E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public CSG_Plane plane;

		[Token(Token = "0x60003C7")]
		[Address(RVA = "0x1043650", Offset = "0x1043650", VA = "0x1043650")]
		public CSG_Polygon(List<CSG_Vertex> list)
		{
		}

		[Token(Token = "0x60003C8")]
		[Address(RVA = "0x1044180", Offset = "0x1044180", VA = "0x1044180")]
		public void Flip()
		{
		}

		[Token(Token = "0x60003C9")]
		[Address(RVA = "0x1045164", Offset = "0x1045164", VA = "0x1045164", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20000DA")]
	internal struct CSG_Vertex
	{
		[Token(Token = "0x40003EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 position;

		[Token(Token = "0x40003EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Color color;

		[Token(Token = "0x40003EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 normal;

		[Token(Token = "0x40003ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector2 uv;

		[Token(Token = "0x60003CA")]
		[Address(RVA = "0x1042CB8", Offset = "0x1042CB8", VA = "0x1042CB8")]
		public CSG_Vertex(Vector3 position, Vector3 normal, Vector2 uv, Color color)
		{
		}

		[Token(Token = "0x60003CB")]
		[Address(RVA = "0x1045148", Offset = "0x1045148", VA = "0x1045148")]
		public void Flip()
		{
		}

		[Token(Token = "0x60003CC")]
		[Address(RVA = "0x10450AC", Offset = "0x10450AC", VA = "0x10450AC")]
		public static CSG_Vertex Interpolate(CSG_Vertex a, CSG_Vertex b, float t)
		{
			return default(CSG_Vertex);
		}
	}
	[Token(Token = "0x20000DB")]
	public class CSG
	{
		[Token(Token = "0x40003EE")]
		public const float EPSILON = 1E-05f;

		[Token(Token = "0x60003CD")]
		[Address(RVA = "0x10451F0", Offset = "0x10451F0", VA = "0x10451F0")]
		public static Mesh Union(GameObject lhs, GameObject rhs)
		{
			return null;
		}

		[Token(Token = "0x60003CE")]
		[Address(RVA = "0x1045324", Offset = "0x1045324", VA = "0x1045324")]
		public static Mesh Subtract(GameObject lhs, GameObject rhs)
		{
			return null;
		}

		[Token(Token = "0x60003CF")]
		[Address(RVA = "0x1045458", Offset = "0x1045458", VA = "0x1045458")]
		public static Mesh Intersect(GameObject lhs, GameObject rhs)
		{
			return null;
		}

		[Token(Token = "0x60003D0")]
		[Address(RVA = "0x104558C", Offset = "0x104558C", VA = "0x104558C")]
		public CSG()
		{
		}
	}
}
namespace ProBuilder2.MeshOperations
{
	[Token(Token = "0x20000DC")]
	public static class pbMeshOps
	{
		[Token(Token = "0x60003D1")]
		[Address(RVA = "0x1045594", Offset = "0x1045594", VA = "0x1045594")]
		public static void CenterPivot(this pb_Object pb, int[] indices)
		{
		}

		[Token(Token = "0x60003D2")]
		[Address(RVA = "0x10457C0", Offset = "0x10457C0", VA = "0x10457C0")]
		public static void CenterPivot(this pb_Object pb, Vector3 worldPosition)
		{
		}

		[Token(Token = "0x60003D3")]
		[Address(RVA = "0x1045898", Offset = "0x1045898", VA = "0x1045898")]
		public static void FreezeScaleTransform(this pb_Object pb)
		{
		}

		[Token(Token = "0x60003D4")]
		[Address(RVA = "0x1045978", Offset = "0x1045978", VA = "0x1045978")]
		[Obsolete("Please use `bool Extrude(this pb_Object pb, pb_Face[] faces, ExtrudeMethod method, float distance)`")]
		public static bool Extrude(this pb_Object pb, pb_Face[] faces, float extrudeDistance)
		{
			return default(bool);
		}

		[Token(Token = "0x60003D5")]
		[Address(RVA = "0x1045998", Offset = "0x1045998", VA = "0x1045998")]
		[Obsolete("Please use `bool Extrude(this pb_Object pb, pb_Face[] faces, ExtrudeMethod method, float distance)`")]
		public static bool Extrude(this pb_Object pb, pb_Face[] faces, float extrudeDistance, bool extrudeAsGroup, out pb_Face[] appendedFaces)
		{
			return default(bool);
		}

		[Token(Token = "0x60003D6")]
		[Address(RVA = "0x10459A0", Offset = "0x10459A0", VA = "0x10459A0")]
		[Obsolete("Please use `bool Extrude(this pb_Object pb, pb_Face[] faces, ExtrudeMethod method, float distance)`")]
		public static bool Extrude(this pb_Object pb, pb_Face[] faces, ExtrudeMethod method, float extrudeDistance, out pb_Face[] appendedFaces)
		{
			return default(bool);
		}

		[Token(Token = "0x60003D7")]
		[Address(RVA = "0x10483E8", Offset = "0x10483E8", VA = "0x10483E8")]
		private static Vector3 Norm(int[] shared, int[] all, Vector3[] norm)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60003D8")]
		[Address(RVA = "0x10487D8", Offset = "0x10487D8", VA = "0x10487D8")]
		public static bool Extrude(this pb_Object pb, pb_Edge[] edges, float extrudeDistance, bool extrudeAsGroup, bool enableManifoldExtrude, out pb_Edge[] extrudedEdges)
		{
			return default(bool);
		}

		[Token(Token = "0x60003D9")]
		[Address(RVA = "0x10495DC", Offset = "0x10495DC", VA = "0x10495DC")]
		public static List<pb_Face> DetachFaces(this pb_Object pb, IEnumerable<pb_Face> faces)
		{
			return null;
		}

		[Token(Token = "0x60003DA")]
		[Address(RVA = "0x104A06C", Offset = "0x104A06C", VA = "0x104A06C")]
		public static bool Bridge(this pb_Object pb, pb_Edge a, pb_Edge b, bool enforcePerimiterEdgesOnly = false)
		{
			return default(bool);
		}

		[Token(Token = "0x60003DB")]
		[Address(RVA = "0x104B4C0", Offset = "0x104B4C0", VA = "0x104B4C0")]
		public static bool CombineObjects(pb_Object[] pbs, out pb_Object combined)
		{
			return default(bool);
		}

		[Token(Token = "0x60003DC")]
		[Address(RVA = "0x104C21C", Offset = "0x104C21C", VA = "0x104C21C")]
		public static pb_Object CreatePbObjectWithTransform(Transform t, bool preserveFaces)
		{
			return null;
		}

		[Token(Token = "0x60003DD")]
		[Address(RVA = "0x104D3CC", Offset = "0x104D3CC", VA = "0x104D3CC")]
		public static bool ResetPbObjectWithMeshFilter(pb_Object pb, bool preserveFaces)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20000DF")]
	public class pbMeshUtils
	{
		[Token(Token = "0x60003EA")]
		[Address(RVA = "0x104E7A0", Offset = "0x104E7A0", VA = "0x104E7A0")]
		public static List<pb_Face> GetNeighborFaces(pb_Object pb, pb_Face originFace, [Optional] Dictionary<int, int> lookup, [Optional] IEnumerable<pb_Face> mask)
		{
			return null;
		}

		[Token(Token = "0x60003EB")]
		[Address(RVA = "0x104EB6C", Offset = "0x104EB6C", VA = "0x104EB6C")]
		public static Dictionary<pb_Face, List<pb_Face>> GenerateNeighborLookup(pb_Object pb, IList<pb_Face> InFaces)
		{
			return null;
		}

		[Token(Token = "0x60003EC")]
		[Address(RVA = "0x104F3F4", Offset = "0x104F3F4", VA = "0x104F3F4")]
		public static pb_Face[] GetNeighborFaces(pb_Object pb, Dictionary<int, int> sharedIndicesLookup, pb_Face[] selFaces)
		{
			return null;
		}

		[Token(Token = "0x60003ED")]
		[Address(RVA = "0x104B1A0", Offset = "0x104B1A0", VA = "0x104B1A0")]
		public static List<pb_Tuple<pb_Face, pb_Edge>> GetNeighborFaces(pb_Object pb, pb_Edge edge, [Optional] Dictionary<int, int> lookup)
		{
			return null;
		}

		[Token(Token = "0x60003EE")]
		[Address(RVA = "0x104F7B0", Offset = "0x104F7B0", VA = "0x104F7B0")]
		public static pb_Face[] GetNeighborFaces(pb_Object pb, pb_Edge[] edges)
		{
			return null;
		}

		[Token(Token = "0x60003EF")]
		[Address(RVA = "0x104F9A0", Offset = "0x104F9A0", VA = "0x104F9A0")]
		internal static List<pb_Face>[][] GetNeighborFacesJagged(pb_Object pb, pb_Edge[][] selEdges)
		{
			return null;
		}

		[Token(Token = "0x60003F0")]
		[Address(RVA = "0x104FEA8", Offset = "0x104FEA8", VA = "0x104FEA8")]
		public static List<pb_Face> GetNeighborFaces(pb_Object pb, int index)
		{
			return null;
		}

		[Token(Token = "0x60003F1")]
		[Address(RVA = "0x1050058", Offset = "0x1050058", VA = "0x1050058")]
		public static IEnumerable<pb_Face> GetNeighborFaces(pb_Object pb, IEnumerable<int> indices)
		{
			return null;
		}

		[Token(Token = "0x60003F2")]
		[Address(RVA = "0x1050570", Offset = "0x1050570", VA = "0x1050570")]
		public static pb_Edge[] GetConnectedEdges(pb_Object pb, int[] indices)
		{
			return null;
		}

		[Token(Token = "0x60003F3")]
		[Address(RVA = "0x1050920", Offset = "0x1050920", VA = "0x1050920")]
		public static IEnumerable<pb_Edge> GetPerimeterEdges(pb_Object pb, IEnumerable<pb_Face> faces)
		{
			return null;
		}

		[Token(Token = "0x60003F4")]
		[Address(RVA = "0x1047EA0", Offset = "0x1047EA0", VA = "0x1047EA0")]
		public static IEnumerable<pb_Edge> GetPerimeterEdges(Dictionary<int, int> sharedIndicesLookup, IEnumerable<pb_Face> faces)
		{
			return null;
		}

		[Token(Token = "0x60003F5")]
		[Address(RVA = "0x1050948", Offset = "0x1050948", VA = "0x1050948")]
		public static int[] GetPerimeterEdges(pb_Object pb, pb_Edge[] edges)
		{
			return null;
		}

		[Token(Token = "0x60003F6")]
		[Address(RVA = "0x1050CC4", Offset = "0x1050CC4", VA = "0x1050CC4")]
		public static IEnumerable<pb_Face> GetPerimeterFaces(pb_Object pb, IEnumerable<pb_Face> faces)
		{
			return null;
		}

		[Token(Token = "0x60003F7")]
		[Address(RVA = "0x1051468", Offset = "0x1051468", VA = "0x1051468")]
		public static int[] GetPerimeterVertices(pb_Object pb, int[] indices, pb_Edge[] universal_edges_all)
		{
			return null;
		}

		[Token(Token = "0x60003F8")]
		[Address(RVA = "0x10517C0", Offset = "0x10517C0", VA = "0x10517C0")]
		private static pb_WingedEdge EdgeRingNext(pb_WingedEdge edge)
		{
			return null;
		}

		[Token(Token = "0x60003F9")]
		[Address(RVA = "0x1051844", Offset = "0x1051844", VA = "0x1051844")]
		public static IEnumerable<pb_Edge> GetEdgeRing(pb_Object pb, pb_Edge[] edges)
		{
			return null;
		}

		[Token(Token = "0x60003FA")]
		[Address(RVA = "0x1051C74", Offset = "0x1051C74", VA = "0x1051C74")]
		public static bool GetEdgeLoop(pb_Object pb, pb_Edge[] edges, out pb_Edge[] loop)
		{
			return default(bool);
		}

		[Token(Token = "0x60003FB")]
		[Address(RVA = "0x1051F98", Offset = "0x1051F98", VA = "0x1051F98")]
		private static bool GetEdgeLoopInternal(pb_WingedEdge start, int startIndex, HashSet<pb_EdgeLookup> used)
		{
			return default(bool);
		}

		[Token(Token = "0x60003FC")]
		[Address(RVA = "0x1052434", Offset = "0x1052434", VA = "0x1052434")]
		private static pb_WingedEdge NextSpoke(pb_WingedEdge wing, int pivot, bool opp)
		{
			return null;
		}

		[Token(Token = "0x60003FD")]
		[Address(RVA = "0x10521BC", Offset = "0x10521BC", VA = "0x10521BC")]
		public static List<pb_WingedEdge> GetSpokes(pb_WingedEdge wing, int sharedIndex, bool allowHoles = false)
		{
			return null;
		}

		[Token(Token = "0x60003FE")]
		[Address(RVA = "0x10524BC", Offset = "0x10524BC", VA = "0x10524BC")]
		public pbMeshUtils()
		{
		}
	}
	[Token(Token = "0x20000E1")]
	public static class pbTriangleOps
	{
		[Token(Token = "0x6000409")]
		[Address(RVA = "0x1052714", Offset = "0x1052714", VA = "0x1052714")]
		public static void ReverseWindingOrder(this pb_Object pb, pb_Face[] faces)
		{
		}

		[Token(Token = "0x600040A")]
		[Address(RVA = "0x1052774", Offset = "0x1052774", VA = "0x1052774")]
		public static WindingOrder GetWindingOrder(this pb_Object pb, pb_Face face)
		{
			return default(WindingOrder);
		}

		[Token(Token = "0x600040B")]
		[Address(RVA = "0x1052A1C", Offset = "0x1052A1C", VA = "0x1052A1C")]
		public static WindingOrder GetWindingOrder(IList<pb_Vertex> vertices, IList<int> indices)
		{
			return default(WindingOrder);
		}

		[Token(Token = "0x600040C")]
		[Address(RVA = "0x10527E0", Offset = "0x10527E0", VA = "0x10527E0")]
		public static WindingOrder GetWindingOrder(IList<Vector2> points)
		{
			return default(WindingOrder);
		}

		[Token(Token = "0x600040D")]
		[Address(RVA = "0x1052A88", Offset = "0x1052A88", VA = "0x1052A88")]
		public static bool FlipEdge(this pb_Object pb, pb_Face face)
		{
			return default(bool);
		}

		[Token(Token = "0x600040E")]
		[Address(RVA = "0x1052D30", Offset = "0x1052D30", VA = "0x1052D30")]
		public static bool RemoveDegenerateTriangles(this pb_Object pb, out int[] removed)
		{
			return default(bool);
		}

		[Token(Token = "0x600040F")]
		[Address(RVA = "0x105360C", Offset = "0x105360C", VA = "0x105360C")]
		[Obsolete("Please use pb_MergeFaces.Merge(pb_Object target, IEnumerable<pb_Face> faces)")]
		public static pb_Face MergeFaces(this pb_Object pb, pb_Face[] faces)
		{
			return null;
		}
	}
	[Token(Token = "0x20000E2")]
	public static class pbUVOps
	{
		[Token(Token = "0x6000410")]
		[Address(RVA = "0x1053A28", Offset = "0x1053A28", VA = "0x1053A28")]
		public static bool SewUVs(this pb_Object pb, int[] indices, float delta)
		{
			return default(bool);
		}

		[Token(Token = "0x6000411")]
		[Address(RVA = "0x1053DBC", Offset = "0x1053DBC", VA = "0x1053DBC")]
		public static void CollapseUVs(this pb_Object pb, int[] indices)
		{
		}

		[Token(Token = "0x6000412")]
		[Address(RVA = "0x104853C", Offset = "0x104853C", VA = "0x104853C")]
		public static bool SplitUVs(this pb_Object pb, int[] indices)
		{
			return default(bool);
		}

		[Token(Token = "0x6000413")]
		[Address(RVA = "0x1053EC0", Offset = "0x1053EC0", VA = "0x1053EC0")]
		public static void ProjectFacesAuto(pb_Object pb, pb_Face[] faces)
		{
		}

		[Token(Token = "0x6000414")]
		[Address(RVA = "0x105412C", Offset = "0x105412C", VA = "0x105412C")]
		public static void ProjectFacesBox(pb_Object pb, pb_Face[] faces)
		{
		}

		[Token(Token = "0x6000415")]
		[Address(RVA = "0x10546C0", Offset = "0x10546C0", VA = "0x10546C0")]
		public static void ProjectFacesSphere(pb_Object pb, int[] indices)
		{
		}

		[Token(Token = "0x6000416")]
		[Address(RVA = "0x1054848", Offset = "0x1054848", VA = "0x1054848")]
		public static Vector2[] FitUVs(Vector2[] uvs)
		{
			return null;
		}

		[Token(Token = "0x6000417")]
		[Address(RVA = "0x1054904", Offset = "0x1054904", VA = "0x1054904")]
		public static bool AutoStitch(pb_Object pb, pb_Face f1, pb_Face f2)
		{
			return default(bool);
		}

		[Token(Token = "0x6000418")]
		[Address(RVA = "0x1054AD4", Offset = "0x1054AD4", VA = "0x1054AD4")]
		private static bool AlignEdges(pb_Object pb, pb_Face f1, pb_Face f2, pb_Edge edge1, pb_Edge edge2)
		{
			return default(bool);
		}

		[Token(Token = "0x6000419")]
		[Address(RVA = "0x1055560", Offset = "0x1055560", VA = "0x1055560")]
		public static pb_Transform2D MatchCoordinates(Vector2[] points, Vector2[] target)
		{
			return null;
		}

		[Token(Token = "0x600041A")]
		[Address(RVA = "0x10558A4", Offset = "0x10558A4", VA = "0x10558A4")]
		public static void SetAutoUV(pb_Object pb, pb_Face[] faces, bool auto)
		{
		}

		[Token(Token = "0x600041B")]
		[Address(RVA = "0x1055C88", Offset = "0x1055C88", VA = "0x1055C88")]
		public static Vector2 NearestVector2(Vector2 pos, Vector2[] uvs)
		{
			return default(Vector2);
		}
	}
	[Token(Token = "0x20000E4")]
	public static class pbVertexOps
	{
		[Token(Token = "0x600041F")]
		[Address(RVA = "0x1055E78", Offset = "0x1055E78", VA = "0x1055E78")]
		public static bool MergeVertices(this pb_Object pb, int[] indices, out int collapsedIndex, bool collapseToFirst = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6000420")]
		[Address(RVA = "0x10560BC", Offset = "0x10560BC", VA = "0x10560BC")]
		public static bool SplitCommonVertices(this pb_Object pb, int[] indices)
		{
			return default(bool);
		}

		[Token(Token = "0x6000421")]
		[Address(RVA = "0x1056424", Offset = "0x1056424", VA = "0x1056424")]
		public static void SplitVertices(this pb_Object pb, pb_Edge edge)
		{
		}

		[Token(Token = "0x6000422")]
		[Address(RVA = "0x10564AC", Offset = "0x10564AC", VA = "0x10564AC")]
		public static void SplitVertices(this pb_Object pb, IEnumerable<int> indices)
		{
		}

		[Token(Token = "0x6000423")]
		[Address(RVA = "0x10567F8", Offset = "0x10567F8", VA = "0x10567F8")]
		public static bool AppendVerticesToFace(this pb_Object pb, pb_Face face, Vector3[] points, Color[] addColors, out pb_Face newFace)
		{
			return default(bool);
		}

		[Token(Token = "0x6000424")]
		[Address(RVA = "0x1057504", Offset = "0x1057504", VA = "0x1057504")]
		public static pb_ActionResult AppendVerticesToEdge(this pb_Object pb, pb_Edge edge, int count, out List<pb_Edge> newEdges)
		{
			return null;
		}

		[Token(Token = "0x6000425")]
		[Address(RVA = "0x1057594", Offset = "0x1057594", VA = "0x1057594")]
		public static pb_ActionResult AppendVerticesToEdge(this pb_Object pb, IList<pb_Edge> edges, int count, out List<pb_Edge> newEdges)
		{
			return null;
		}

		[Token(Token = "0x6000426")]
		[Address(RVA = "0x10592E0", Offset = "0x10592E0", VA = "0x10592E0")]
		public static pb_FaceRebuildData ExplodeVertex(IList<pb_Vertex> vertices, IList<pb_Tuple<pb_WingedEdge, int>> edgeAndCommonIndex, float distance, out Dictionary<int, List<int>> appendedVertices)
		{
			return null;
		}

		[Token(Token = "0x6000427")]
		[Address(RVA = "0x1059E70", Offset = "0x1059E70", VA = "0x1059E70")]
		private static pb_Edge AlignEdgeWithDirection(pb_EdgeLookup edge, int commonIndex)
		{
			return default(pb_Edge);
		}

		[Token(Token = "0x6000428")]
		[Address(RVA = "0x1059EB0", Offset = "0x1059EB0", VA = "0x1059EB0")]
		public static void Quantize(pb_Object pb, IList<int> indices, Vector3 snap)
		{
		}
	}
	[Token(Token = "0x20000E7")]
	public static class pb_AppendDelete
	{
		[Token(Token = "0x600042E")]
		[Address(RVA = "0x105A218", Offset = "0x105A218", VA = "0x105A218")]
		public static pb_Face AppendFace(this pb_Object pb, Vector3[] v, Color[] c, Vector2[] u, pb_Face face)
		{
			return null;
		}

		[Token(Token = "0x600042F")]
		[Address(RVA = "0x105A2E4", Offset = "0x105A2E4", VA = "0x105A2E4")]
		public static pb_Face AppendFace(this pb_Object pb, Vector3[] v, Color[] c, Vector2[] u, pb_Face face, int[] sharedIndex)
		{
			return null;
		}

		[Token(Token = "0x6000430")]
		[Address(RVA = "0x105A688", Offset = "0x105A688", VA = "0x105A688")]
		public static pb_Face[] AppendFaces(this pb_Object pb, Vector3[][] new_Vertices, Color[][] new_Colors, Vector2[][] new_uvs, pb_Face[] new_Faces, int[][] new_SharedIndices)
		{
			return null;
		}

		[Token(Token = "0x6000431")]
		[Address(RVA = "0x105AC0C", Offset = "0x105AC0C", VA = "0x105AC0C")]
		public static void DuplicateAndFlip(this pb_Object pb, pb_Face[] faces)
		{
		}

		[Token(Token = "0x6000432")]
		[Address(RVA = "0x1057458", Offset = "0x1057458", VA = "0x1057458")]
		public static int[] DeleteFace(this pb_Object pb, pb_Face face)
		{
			return null;
		}

		[Token(Token = "0x6000433")]
		[Address(RVA = "0x105B1F0", Offset = "0x105B1F0", VA = "0x105B1F0")]
		public static int[] DeleteFaces(this pb_Object pb, IEnumerable<pb_Face> faces)
		{
			return null;
		}

		[Token(Token = "0x6000434")]
		[Address(RVA = "0x105B310", Offset = "0x105B310", VA = "0x105B310")]
		public static int[] DeleteFaces(this pb_Object pb, IList<int> faceIndices)
		{
			return null;
		}
	}
	[Token(Token = "0x20000EA")]
	public static class pb_AppendPolygon
	{
		[Token(Token = "0x400040A")]
		private const int MAX_HOLE_ITERATIONS = 2048;

		[Token(Token = "0x600043A")]
		[Address(RVA = "0x105BA00", Offset = "0x105BA00", VA = "0x105BA00")]
		public static pb_ActionResult CreatePolygon(this pb_Object pb, IList<int> indices, bool unordered, out pb_Face face)
		{
			return null;
		}

		[Token(Token = "0x600043B")]
		[Address(RVA = "0x105C088", Offset = "0x105C088", VA = "0x105C088")]
		public static pb_ActionResult CreateShapeFromPolygon(this pb_PolyShape poly)
		{
			return null;
		}

		[Token(Token = "0x600043C")]
		[Address(RVA = "0x105C0B4", Offset = "0x105C0B4", VA = "0x105C0B4")]
		public static pb_ActionResult CreateShapeFromPolygon(this pb_Object pb, IList<Vector3> points, float extrude, bool flipNormals)
		{
			return null;
		}

		[Token(Token = "0x600043D")]
		[Address(RVA = "0x105BF80", Offset = "0x105BF80", VA = "0x105BF80")]
		public static pb_FaceRebuildData FaceWithVertices(List<pb_Vertex> vertices, bool unordered = true)
		{
			return null;
		}

		[Token(Token = "0x600043E")]
		[Address(RVA = "0x105C900", Offset = "0x105C900", VA = "0x105C900")]
		public static List<pb_FaceRebuildData> TentCapWithVertices(List<pb_Vertex> path)
		{
			return null;
		}

		[Token(Token = "0x600043F")]
		[Address(RVA = "0x105CCC8", Offset = "0x105CCC8", VA = "0x105CCC8")]
		public static List<List<pb_Edge>> FindHoles(pb_Object pb, IList<int> indices)
		{
			return null;
		}

		[Token(Token = "0x6000440")]
		[Address(RVA = "0x105D038", Offset = "0x105D038", VA = "0x105D038")]
		public static List<List<pb_WingedEdge>> FindHoles(List<pb_WingedEdge> wings, HashSet<int> common)
		{
			return null;
		}

		[Token(Token = "0x6000441")]
		[Address(RVA = "0x105D914", Offset = "0x105D914", VA = "0x105D914")]
		private static pb_WingedEdge FindNextEdgeInHole(pb_WingedEdge wing, int common)
		{
			return null;
		}
	}
	[Token(Token = "0x20000ED")]
	public static class pb_Bevel
	{
		[Token(Token = "0x4000411")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int[] BRIDGE_INDICES_NRM;

		[Token(Token = "0x6000449")]
		[Address(RVA = "0x105DB1C", Offset = "0x105DB1C", VA = "0x105DB1C")]
		public static pb_ActionResult BevelEdges(pb_Object pb, IList<pb_Edge> edges, float amount, out List<pb_Face> createdFaces)
		{
			return null;
		}

		[Token(Token = "0x600044A")]
		[Address(RVA = "0x1060854", Offset = "0x1060854", VA = "0x1060854")]
		private static List<pb_FaceRebuildData> GetBridgeFaces(IList<pb_Vertex> vertices, pb_WingedEdge left, pb_WingedEdge right, Dictionary<int, List<pb_Tuple<pb_FaceRebuildData, List<int>>>> holes)
		{
			return null;
		}

		[Token(Token = "0x600044B")]
		[Address(RVA = "0x1060464", Offset = "0x1060464", VA = "0x1060464")]
		private static void SlideEdge(IList<pb_Vertex> vertices, pb_WingedEdge we, float amount)
		{
		}

		[Token(Token = "0x600044C")]
		[Address(RVA = "0x10612B8", Offset = "0x10612B8", VA = "0x10612B8")]
		private static pb_Edge GetLeadingEdge(pb_WingedEdge wing, int common)
		{
			return default(pb_Edge);
		}
	}
	[Token(Token = "0x20000F2")]
	public static class pb_ConformNormals
	{
		[Token(Token = "0x600045C")]
		[Address(RVA = "0x10616F8", Offset = "0x10616F8", VA = "0x10616F8")]
		public static pb_ActionResult ConformNormals(this pb_Object pb, IList<pb_Face> faces)
		{
			return null;
		}

		[Token(Token = "0x600045D")]
		[Address(RVA = "0x1061BF0", Offset = "0x1061BF0", VA = "0x1061BF0")]
		private static void GetWindingFlags(pb_WingedEdge edge, bool flag, Dictionary<pb_Face, bool> flags)
		{
		}

		[Token(Token = "0x600045E")]
		[Address(RVA = "0x106119C", Offset = "0x106119C", VA = "0x106119C")]
		public static pb_ActionResult ConformOppositeNormal(pb_WingedEdge source)
		{
			return null;
		}

		[Token(Token = "0x600045F")]
		[Address(RVA = "0x1061CDC", Offset = "0x1061CDC", VA = "0x1061CDC")]
		private static pb_Edge GetCommonEdgeInWindingOrder(pb_WingedEdge wing)
		{
			return default(pb_Edge);
		}

		[Token(Token = "0x6000460")]
		[Address(RVA = "0x1061E50", Offset = "0x1061E50", VA = "0x1061E50")]
		public static void MatchNormal(pb_Face source, pb_Face target, Dictionary<int, int> lookup)
		{
		}
	}
	[Token(Token = "0x20000F3")]
	internal class ConnectFaceRebuildData
	{
		[Token(Token = "0x400041F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public pb_FaceRebuildData faceRebuildData;

		[Token(Token = "0x4000420")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<int> newVertexIndices;

		[Token(Token = "0x6000461")]
		[Address(RVA = "0x1061FD8", Offset = "0x1061FD8", VA = "0x1061FD8")]
		public ConnectFaceRebuildData(pb_FaceRebuildData faceRebuildData, List<int> newVertexIndices)
		{
		}
	}
	[Token(Token = "0x20000F4")]
	public static class pb_ConnectEdges
	{
		[Token(Token = "0x6000462")]
		[Address(RVA = "0x106201C", Offset = "0x106201C", VA = "0x106201C")]
		public static pb_ActionResult Connect(this pb_Object pb, IEnumerable<pb_Face> faces, out pb_Face[] subdividedFaces)
		{
			return null;
		}

		[Token(Token = "0x6000463")]
		[Address(RVA = "0x106374C", Offset = "0x106374C", VA = "0x106374C")]
		public static pb_ActionResult Connect(this pb_Object pb, IEnumerable<pb_Edge> edges, out pb_Face[] faces)
		{
			return null;
		}

		[Token(Token = "0x6000464")]
		[Address(RVA = "0x1063770", Offset = "0x1063770", VA = "0x1063770")]
		public static pb_ActionResult Connect(this pb_Object pb, IEnumerable<pb_Edge> edges, out pb_Edge[] connections)
		{
			return null;
		}

		[Token(Token = "0x6000465")]
		[Address(RVA = "0x10621A0", Offset = "0x10621A0", VA = "0x10621A0")]
		private static pb_ActionResult Connect(this pb_Object pb, IEnumerable<pb_Edge> edges, out pb_Face[] addedFaces, out pb_Edge[] connections, bool returnFaces = false, bool returnEdges = false, [Optional] HashSet<pb_Face> faceMask)
		{
			return null;
		}

		[Token(Token = "0x6000466")]
		[Address(RVA = "0x1064640", Offset = "0x1064640", VA = "0x1064640")]
		private static List<ConnectFaceRebuildData> ConnectEdgesInFace(pb_Face face, pb_WingedEdge a, pb_WingedEdge b, List<pb_Vertex> vertices)
		{
			return null;
		}

		[Token(Token = "0x6000467")]
		[Address(RVA = "0x1063CC4", Offset = "0x1063CC4", VA = "0x1063CC4")]
		private static List<ConnectFaceRebuildData> ConnectEdgesInFace(pb_Face face, List<pb_WingedEdge> edges, List<pb_Vertex> vertices)
		{
			return null;
		}

		[Token(Token = "0x6000468")]
		[Address(RVA = "0x1063798", Offset = "0x1063798", VA = "0x1063798")]
		private static ConnectFaceRebuildData InsertVertices(pb_Face face, List<pb_WingedEdge> edges, List<pb_Vertex> vertices)
		{
			return null;
		}
	}
	[Token(Token = "0x20000F7")]
	public static class pb_ConnectVertices
	{
		[Token(Token = "0x6000476")]
		[Address(RVA = "0x10650E8", Offset = "0x10650E8", VA = "0x10650E8")]
		public static pb_ActionResult Connect(this pb_Object pb, IList<int> indices, out int[] newVertices)
		{
			return null;
		}

		[Token(Token = "0x6000477")]
		[Address(RVA = "0x1066B20", Offset = "0x1066B20", VA = "0x1066B20")]
		private static List<ConnectFaceRebuildData> ConnectIndicesInFace(pb_Face face, int a, int b, List<pb_Vertex> vertices, Dictionary<int, int> lookup)
		{
			return null;
		}

		[Token(Token = "0x6000478")]
		[Address(RVA = "0x106609C", Offset = "0x106609C", VA = "0x106609C")]
		private static List<ConnectFaceRebuildData> ConnectIndicesInFace(pb_Face face, List<int> indices, List<pb_Vertex> vertices, Dictionary<int, int> lookup, int sharedIndexOffset)
		{
			return null;
		}
	}
	[Token(Token = "0x20000FA")]
	public static class pb_DeleteVertices
	{
		[Token(Token = "0x6000483")]
		[Address(RVA = "0x10676A0", Offset = "0x10676A0", VA = "0x10676A0")]
		public static int[] RemoveUnusedVertices(this pb_Object pb)
		{
			return null;
		}

		[Token(Token = "0x6000484")]
		[Address(RVA = "0x1058E60", Offset = "0x1058E60", VA = "0x1058E60")]
		public static void DeleteVerticesWithIndices(this pb_Object pb, IEnumerable<int> distInd)
		{
		}
	}
	[Token(Token = "0x20000FC")]
	public static class pb_Extrude
	{
		[Token(Token = "0x600048A")]
		[Address(RVA = "0x105C8EC", Offset = "0x105C8EC", VA = "0x105C8EC")]
		public static bool Extrude(this pb_Object pb, pb_Face[] faces, ExtrudeMethod method, float distance)
		{
			return default(bool);
		}

		[Token(Token = "0x600048B")]
		[Address(RVA = "0x1067A8C", Offset = "0x1067A8C", VA = "0x1067A8C")]
		private static bool ExtrudePerFace(pb_Object pb, pb_Face[] faces, float distance)
		{
			return default(bool);
		}

		[Token(Token = "0x600048C")]
		[Address(RVA = "0x1068564", Offset = "0x1068564", VA = "0x1068564")]
		private static bool ExtrudeAsGroups(pb_Object pb, pb_Face[] faces, bool compensateAngleVertexDistance, float distance)
		{
			return default(bool);
		}

		[Token(Token = "0x600048D")]
		[Address(RVA = "0x106A034", Offset = "0x106A034", VA = "0x106A034")]
		private static List<HashSet<pb_Face>> GetFaceGroups(List<pb_WingedEdge> wings)
		{
			return null;
		}

		[Token(Token = "0x600048E")]
		[Address(RVA = "0x106A47C", Offset = "0x106A47C", VA = "0x106A47C")]
		private static Dictionary<pb_EdgeLookup, pb_Face> GetPerimeterEdges(HashSet<pb_Face> faces, Dictionary<int, int> lookup)
		{
			return null;
		}
	}
	[Token(Token = "0x20000FD")]
	public static class pb_FaceLoop
	{
		[Token(Token = "0x600048F")]
		[Address(RVA = "0x106A8A0", Offset = "0x106A8A0", VA = "0x106A8A0")]
		public static HashSet<pb_Face> GetFaceLoop(pb_Object pb, pb_Face[] faces, bool ring = false)
		{
			return null;
		}

		[Token(Token = "0x6000490")]
		[Address(RVA = "0x106AB98", Offset = "0x106AB98", VA = "0x106AB98")]
		public static HashSet<pb_Face> GetFaceRingAndLoop(pb_Object pb, pb_Face[] faces)
		{
			return null;
		}

		[Token(Token = "0x6000491")]
		[Address(RVA = "0x106A9B0", Offset = "0x106A9B0", VA = "0x106A9B0")]
		public static HashSet<pb_Face> GetFaceLoop(List<pb_WingedEdge> wings, pb_Face face, bool ring)
		{
			return null;
		}
	}
	[Token(Token = "0x20000FF")]
	[Obsolete("See pb_MeshTopology")]
	public static class pb_Facetize
	{
		[Token(Token = "0x6000494")]
		[Address(RVA = "0x106ACF0", Offset = "0x106ACF0", VA = "0x106ACF0")]
		[Obsolete("Use pb_MeshTopology.ToTriangles")]
		public static pb_ActionResult Facetize(this pb_Object pb, IList<pb_Face> faces, out pb_Face[] newFaces)
		{
			return null;
		}
	}
	[Token(Token = "0x2000100")]
	public static class pb_GrowShrink
	{
		[Token(Token = "0x4000437")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Vector3 Vector3_Zero;

		[Token(Token = "0x6000495")]
		[Address(RVA = "0x106B384", Offset = "0x106B384", VA = "0x106B384")]
		public static HashSet<pb_Face> GrowSelection(pb_Object pb, IList<pb_Face> faces, float maxAngleDiff = -1f)
		{
			return null;
		}

		[Token(Token = "0x6000496")]
		[Address(RVA = "0x106A824", Offset = "0x106A824", VA = "0x106A824")]
		public static void Flood(pb_WingedEdge wing, HashSet<pb_Face> selection)
		{
		}

		[Token(Token = "0x6000497")]
		[Address(RVA = "0x106B8F8", Offset = "0x106B8F8", VA = "0x106B8F8")]
		public static void Flood(pb_Object pb, pb_WingedEdge wing, Vector3 wingNrm, float maxAngle, HashSet<pb_Face> selection)
		{
		}

		[Token(Token = "0x6000498")]
		[Address(RVA = "0x106BB78", Offset = "0x106BB78", VA = "0x106BB78")]
		public static HashSet<pb_Face> FloodSelection(pb_Object pb, IList<pb_Face> faces, float maxAngleDiff)
		{
			return null;
		}
	}
	[Token(Token = "0x2000101")]
	public static class pb_MergeFaces
	{
		[Token(Token = "0x600049A")]
		[Address(RVA = "0x106BE4C", Offset = "0x106BE4C", VA = "0x106BE4C")]
		public static List<pb_Face> MergePairs(pb_Object target, IEnumerable<pb_Tuple<pb_Face, pb_Face>> pairs, bool collapseCoincidentVertices = true)
		{
			return null;
		}

		[Token(Token = "0x600049B")]
		[Address(RVA = "0x106C9C0", Offset = "0x106C9C0", VA = "0x106C9C0")]
		public static pb_Face Merge(pb_Object target, IEnumerable<pb_Face> faces)
		{
			return null;
		}

		[Token(Token = "0x600049C")]
		[Address(RVA = "0x106C51C", Offset = "0x106C51C", VA = "0x106C51C")]
		internal static void CollapseCoincidentVertices(pb_Object pb, IEnumerable<pb_Face> faces)
		{
		}
	}
	[Token(Token = "0x2000104")]
	public class pb_MeshImporter
	{
		[Token(Token = "0x2000105")]
		public class Settings
		{
			[Token(Token = "0x400043E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool quads;

			[Token(Token = "0x400043F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
			public bool smoothing;

			[Token(Token = "0x4000440")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float smoothingThreshold;

			[Token(Token = "0x1700007E")]
			public static Settings Default
			{
				[Token(Token = "0x60004A8")]
				[Address(RVA = "0x106ED2C", Offset = "0x106ED2C", VA = "0x106ED2C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60004A9")]
			[Address(RVA = "0x106EDA0", Offset = "0x106EDA0", VA = "0x106EDA0", Slot = "3")]
			public override string ToString()
			{
				return null;
			}

			[Token(Token = "0x60004AA")]
			[Address(RVA = "0x106ED14", Offset = "0x106ED14", VA = "0x106ED14")]
			public Settings()
			{
			}
		}

		[Token(Token = "0x400043B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Settings DEFAULT_IMPORT_SETTINGS;

		[Token(Token = "0x400043C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private pb_Object m_Mesh;

		[Token(Token = "0x400043D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private pb_Vertex[] m_Vertices;

		[Token(Token = "0x60004A2")]
		[Address(RVA = "0x106CEA0", Offset = "0x106CEA0", VA = "0x106CEA0")]
		public pb_MeshImporter(pb_Object target)
		{
		}

		[Token(Token = "0x60004A3")]
		[Address(RVA = "0x106CED0", Offset = "0x106CED0", VA = "0x106CED0")]
		public bool Import(GameObject go, [Optional] Settings importSettings)
		{
			return default(bool);
		}

		[Token(Token = "0x60004A4")]
		[Address(RVA = "0x106D000", Offset = "0x106D000", VA = "0x106D000")]
		public bool Import(Mesh originalMesh, Material[] materials, [Optional] Settings importSettings)
		{
			return default(bool);
		}

		[Token(Token = "0x60004A5")]
		[Address(RVA = "0x106E9E8", Offset = "0x106E9E8", VA = "0x106E9E8")]
		private pb_Face GetBestQuadConnection(pb_WingedEdge wing, Dictionary<pb_EdgeLookup, float> connections)
		{
			return null;
		}

		[Token(Token = "0x60004A6")]
		[Address(RVA = "0x106E3C4", Offset = "0x106E3C4", VA = "0x106E3C4")]
		private float GetQuadScore(pb_WingedEdge left, pb_WingedEdge right, float normalThreshold = 0.9f)
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000107")]
	public static class pb_MeshTopology
	{
		[Token(Token = "0x60004AE")]
		[Address(RVA = "0x106EF0C", Offset = "0x106EF0C", VA = "0x106EF0C")]
		public static bool ToQuads(pb_Object target)
		{
			return default(bool);
		}

		[Token(Token = "0x60004AF")]
		[Address(RVA = "0x106ACF4", Offset = "0x106ACF4", VA = "0x106ACF4")]
		public static pb_ActionResult ToTriangles(this pb_Object pb, IList<pb_Face> faces, out pb_Face[] newFaces)
		{
			return null;
		}

		[Token(Token = "0x60004B0")]
		[Address(RVA = "0x106EF14", Offset = "0x106EF14", VA = "0x106EF14")]
		private static List<pb_FaceRebuildData> BreakFaceIntoTris(pb_Face face, List<pb_Vertex> vertices, Dictionary<int, int> lookup)
		{
			return null;
		}
	}
	[Token(Token = "0x2000109")]
	public static class pb_Subdivide
	{
		[Token(Token = "0x60004B4")]
		[Address(RVA = "0x106F5FC", Offset = "0x106F5FC", VA = "0x106F5FC")]
		public static pb_ActionResult Subdivide(this pb_Object pb)
		{
			return null;
		}

		[Token(Token = "0x60004B5")]
		[Address(RVA = "0x106F620", Offset = "0x106F620", VA = "0x106F620")]
		public static pb_ActionResult Subdivide(this pb_Object pb, IList<pb_Face> faces, out pb_Face[] subdividedFaces)
		{
			return null;
		}
	}
	[Token(Token = "0x200010A")]
	public static class pb_Triangulation
	{
		[Token(Token = "0x60004B6")]
		[Address(RVA = "0x1058B28", Offset = "0x1058B28", VA = "0x1058B28")]
		public static bool SortAndTriangulate(IList<Vector2> points, out List<int> indices, bool convex = false)
		{
			return default(bool);
		}

		[Token(Token = "0x60004B7")]
		[Address(RVA = "0x105724C", Offset = "0x105724C", VA = "0x105724C")]
		public static bool TriangulateVertices(IList<pb_Vertex> vertices, out List<int> triangles, bool unordered = true, bool convex = false)
		{
			return default(bool);
		}

		[Token(Token = "0x60004B8")]
		[Address(RVA = "0x105C66C", Offset = "0x105C66C", VA = "0x105C66C")]
		public static bool TriangulateVertices(Vector3[] vertices, out List<int> triangles, bool unordered = true, bool convex = false)
		{
			return default(bool);
		}

		[Token(Token = "0x60004B9")]
		[Address(RVA = "0x106F624", Offset = "0x106F624", VA = "0x106F624")]
		public static bool Triangulate(IList<Vector2> points, out List<int> indices, bool convex = false)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200010C")]
	public static class pb_WeldVertices
	{
		[Token(Token = "0x60004BD")]
		[Address(RVA = "0x10701A0", Offset = "0x10701A0", VA = "0x10701A0")]
		public static pb_ActionResult WeldVertices(this pb_Object pb, int[] indices, float neighborRadius, out int[] welds)
		{
			return null;
		}
	}
}
namespace ProBuilder2.Common
{
	[Token(Token = "0x200010D")]
	public static class pbTransformUtil
	{
		[Token(Token = "0x4000446")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<Transform, Transform[]> _childrenStack;

		[Token(Token = "0x60004BE")]
		[Address(RVA = "0x1070E54", Offset = "0x1070E54", VA = "0x1070E54")]
		public static void UnparentChildren(Transform t)
		{
		}

		[Token(Token = "0x60004BF")]
		[Address(RVA = "0x1070FC4", Offset = "0x1070FC4", VA = "0x1070FC4")]
		public static void ReparentChildren(Transform t)
		{
		}
	}
	[Token(Token = "0x200010E")]
	public static class pbUtil
	{
		[Token(Token = "0x200010F")]
		private struct SearchRange
		{
			[Token(Token = "0x4000447")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int begin;

			[Token(Token = "0x4000448")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public int end;

			[Token(Token = "0x60004E9")]
			[Address(RVA = "0x10719B4", Offset = "0x10719B4", VA = "0x10719B4")]
			public SearchRange(int begin, int end)
			{
			}

			[Token(Token = "0x60004EA")]
			[Address(RVA = "0x10719BC", Offset = "0x10719BC", VA = "0x10719BC")]
			public bool Valid()
			{
				return default(bool);
			}

			[Token(Token = "0x60004EB")]
			[Address(RVA = "0x10719D0", Offset = "0x10719D0", VA = "0x10719D0")]
			public int Center()
			{
				return default(int);
			}

			[Token(Token = "0x60004EC")]
			[Address(RVA = "0x10719E8", Offset = "0x10719E8", VA = "0x10719E8", Slot = "3")]
			public override string ToString()
			{
				return null;
			}
		}

		[Token(Token = "0x60004C1")]
		public static T[] GetComponents<T>(this IEnumerable<GameObject> gameObjects) where T : Component
		{
			return null;
		}

		[Token(Token = "0x60004C2")]
		public static T[] GetComponents<T>(GameObject go) where T : Component
		{
			return null;
		}

		[Token(Token = "0x60004C3")]
		public static T[] GetComponents<T>(this IEnumerable<Transform> transforms) where T : Component
		{
			return null;
		}

		[Token(Token = "0x60004C4")]
		[Address(RVA = "0x1071184", Offset = "0x1071184", VA = "0x1071184")]
		public static Vector3[] ToWorldSpace(this Transform t, Vector3[] v)
		{
			return null;
		}

		[Token(Token = "0x60004C5")]
		[Address(RVA = "0x107125C", Offset = "0x107125C", VA = "0x107125C")]
		public static GameObject EmptyGameObjectWithTransform(Transform t)
		{
			return null;
		}

		[Token(Token = "0x60004C6")]
		public static T[] ValuesWithIndices<T>(this T[] arr, int[] indices)
		{
			return null;
		}

		[Token(Token = "0x60004C7")]
		public static List<T> ValuesWithIndices<T>(this IList<T> arr, IList<int> indices)
		{
			return null;
		}

		[Token(Token = "0x60004C8")]
		public static int[] AllIndexesOf<T>(T[] arr, T instance)
		{
			return null;
		}

		[Token(Token = "0x60004C9")]
		public static bool IsEqual<T>(T[] a, T[] b)
		{
			return default(bool);
		}

		[Token(Token = "0x60004CA")]
		public static T[] Add<T>(this T[] arr, T val)
		{
			return null;
		}

		[Token(Token = "0x60004CB")]
		public static T[] AddRange<T>(this T[] arr, T[] val)
		{
			return null;
		}

		[Token(Token = "0x60004CC")]
		public static T[] Remove<T>(this T[] arr, T val)
		{
			return null;
		}

		[Token(Token = "0x60004CD")]
		public static T[] Remove<T>(this T[] arr, IEnumerable<T> val)
		{
			return null;
		}

		[Token(Token = "0x60004CE")]
		public static T[] RemoveAt<T>(this T[] arr, int index)
		{
			return null;
		}

		[Token(Token = "0x60004CF")]
		public static T[] RemoveAt<T>(this IList<T> list, IEnumerable<int> indices)
		{
			return null;
		}

		[Token(Token = "0x60004D0")]
		public static T[] SortedRemoveAt<T>(this IList<T> list, IList<int> sorted_indices)
		{
			return null;
		}

		[Token(Token = "0x60004D1")]
		public static int NearestIndexPriorToValue<T>(IList<T> sorted_list, T value) where T : IComparable<T>
		{
			return default(int);
		}

		[Token(Token = "0x60004D2")]
		public static T[] Fill<T>(T val, int length)
		{
			return null;
		}

		[Token(Token = "0x60004D3")]
		public static List<T> Fill<T>(Func<int, T> ctor, int length)
		{
			return null;
		}

		[Token(Token = "0x60004D4")]
		public static T[] FilledArray<T>(T val, int length)
		{
			return null;
		}

		[Token(Token = "0x60004D5")]
		public static bool ContainsMatch<T>(this T[] a, T[] b)
		{
			return default(bool);
		}

		[Token(Token = "0x60004D6")]
		public static bool ContainsMatch<T>(this T[] a, T[] b, out int index_a, out int index_b)
		{
			return default(bool);
		}

		[Token(Token = "0x60004D7")]
		public static T[] Concat<T>(this T[] x, T[] y)
		{
			return null;
		}

		[Token(Token = "0x60004D8")]
		public static int IndexOf<T>(this List<List<T>> InList, T InValue)
		{
			return default(int);
		}

		[Token(Token = "0x60004D9")]
		public static T[] Fill<T>(int count, Func<int, T> ctor)
		{
			return null;
		}

		[Token(Token = "0x60004DA")]
		public static void AddOrAppend<T, K>(this Dictionary<T, List<K>> dictionary, T key, K value)
		{
		}

		[Token(Token = "0x60004DB")]
		public static void AddOrAppendRange<T, K>(this Dictionary<T, List<K>> dictionary, T key, List<K> value)
		{
		}

		[Token(Token = "0x60004DC")]
		public static IEnumerable<TSource> DistinctBy<TSource, TKey>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector)
		{
			return null;
		}

		[Token(Token = "0x60004DD")]
		[Obsolete]
		public static string ToFormattedString<T>(this T[] t, string _delimiter)
		{
			return null;
		}

		[Token(Token = "0x60004DE")]
		[Obsolete]
		public static string ToFormattedString<T>(this T[] t, string _delimiter, int entriesPerLine, int maxEntries)
		{
			return null;
		}

		[Token(Token = "0x60004DF")]
		[Obsolete]
		public static string ToFormattedString<T>(this List<T> t, string _delimiter)
		{
			return null;
		}

		[Token(Token = "0x60004E0")]
		[Obsolete]
		public static string ToFormattedString<T>(this HashSet<T> t, string _delimiter)
		{
			return null;
		}

		[Token(Token = "0x60004E1")]
		public static string ToString<TKey, TValue>(this Dictionary<TKey, TValue> dict)
		{
			return null;
		}

		[Token(Token = "0x60004E2")]
		public static string ToString<T>(this IEnumerable<T> arr, string separator = ", ")
		{
			return null;
		}

		[Token(Token = "0x60004E3")]
		[Address(RVA = "0x1071344", Offset = "0x1071344", VA = "0x1071344")]
		public static string ControlKeyString(char character)
		{
			return null;
		}

		[Token(Token = "0x60004E4")]
		[Address(RVA = "0x1071434", Offset = "0x1071434", VA = "0x1071434")]
		[Obsolete("ColorWithString is deprecated. Use TryParseColor.")]
		public static bool ColorWithString(string value, out Color col)
		{
			return default(bool);
		}

		[Token(Token = "0x60004E5")]
		[Address(RVA = "0x1071440", Offset = "0x1071440", VA = "0x1071440")]
		public static bool TryParseColor(string value, ref Color col)
		{
			return default(bool);
		}

		[Token(Token = "0x60004E6")]
		[Address(RVA = "0x10716B0", Offset = "0x10716B0", VA = "0x10716B0")]
		public static Vector3[] StringToVector3Array(string str)
		{
			return null;
		}

		[Token(Token = "0x60004E7")]
		[Address(RVA = "0x1071998", Offset = "0x1071998", VA = "0x1071998")]
		public static Vector2 DivideBy(this Vector2 v, Vector2 o)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60004E8")]
		[Address(RVA = "0x10719A4", Offset = "0x10719A4", VA = "0x10719A4")]
		public static Vector3 DivideBy(this Vector3 v, Vector3 o)
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x2000113")]
	public enum Status
	{
		[Token(Token = "0x400044F")]
		Success,
		[Token(Token = "0x4000450")]
		Failure,
		[Token(Token = "0x4000451")]
		Canceled,
		[Token(Token = "0x4000452")]
		NoChange
	}
	[Token(Token = "0x2000114")]
	public class pb_ActionResult
	{
		[Token(Token = "0x4000453")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Status status;

		[Token(Token = "0x4000454")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string notification;

		[Token(Token = "0x1700007F")]
		public static pb_ActionResult Success
		{
			[Token(Token = "0x60004F6")]
			[Address(RVA = "0x1071C98", Offset = "0x1071C98", VA = "0x1071C98")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000080")]
		public static pb_ActionResult NoSelection
		{
			[Token(Token = "0x60004F7")]
			[Address(RVA = "0x1071D0C", Offset = "0x1071D0C", VA = "0x1071D0C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000081")]
		public static pb_ActionResult UserCanceled
		{
			[Token(Token = "0x60004F8")]
			[Address(RVA = "0x1071D80", Offset = "0x1071D80", VA = "0x1071D80")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60004F4")]
		[Address(RVA = "0x1058AA8", Offset = "0x1058AA8", VA = "0x1058AA8")]
		public pb_ActionResult(Status status, string notification)
		{
		}

		[Token(Token = "0x60004F5")]
		[Address(RVA = "0x1071C78", Offset = "0x1071C78", VA = "0x1071C78")]
		public static implicit operator bool(pb_ActionResult res)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000115")]
	[AddComponentMenu("")]
	[DisallowMultipleComponent]
	public class pb_BezierShape : MonoBehaviour
	{
		[Token(Token = "0x4000455")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<pb_BezierPoint> m_Points;

		[Token(Token = "0x4000456")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool m_CloseLoop;

		[Token(Token = "0x4000457")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float m_Radius;

		[Token(Token = "0x4000458")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int m_Rows;

		[Token(Token = "0x4000459")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int m_Columns;

		[Token(Token = "0x400045A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool m_Smooth;

		[Token(Token = "0x400045B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool m_IsEditing;

		[Token(Token = "0x400045C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private pb_Object m_Mesh;

		[Token(Token = "0x17000082")]
		public pb_Object mesh
		{
			[Token(Token = "0x60004F9")]
			[Address(RVA = "0x1071DF4", Offset = "0x1071DF4", VA = "0x1071DF4")]
			get
			{
				return null;
			}
			[Token(Token = "0x60004FA")]
			[Address(RVA = "0x1071E9C", Offset = "0x1071E9C", VA = "0x1071E9C")]
			set
			{
			}
		}

		[Token(Token = "0x60004FB")]
		[Address(RVA = "0x1071EA4", Offset = "0x1071EA4", VA = "0x1071EA4")]
		public void Init()
		{
		}

		[Token(Token = "0x60004FC")]
		[Address(RVA = "0x10721AC", Offset = "0x10721AC", VA = "0x10721AC")]
		public void Refresh()
		{
		}

		[Token(Token = "0x60004FD")]
		[Address(RVA = "0x10721EC", Offset = "0x10721EC", VA = "0x10721EC")]
		public pb_BezierShape()
		{
		}
	}
	[Token(Token = "0x2000116")]
	public class pb_HsvColor
	{
		[Token(Token = "0x400045D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float h;

		[Token(Token = "0x400045E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float s;

		[Token(Token = "0x400045F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float v;

		[Token(Token = "0x60004FE")]
		[Address(RVA = "0x1072290", Offset = "0x1072290", VA = "0x1072290")]
		public pb_HsvColor(float h, float s, float v)
		{
		}

		[Token(Token = "0x60004FF")]
		[Address(RVA = "0x10722CC", Offset = "0x10722CC", VA = "0x10722CC")]
		public pb_HsvColor(float h, float s, float v, float sv_modifier)
		{
		}

		[Token(Token = "0x6000500")]
		[Address(RVA = "0x1072314", Offset = "0x1072314", VA = "0x1072314")]
		public static pb_HsvColor FromRGB(Color col)
		{
			return null;
		}

		[Token(Token = "0x6000501")]
		[Address(RVA = "0x1072394", Offset = "0x1072394", VA = "0x1072394", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000502")]
		[Address(RVA = "0x1072458", Offset = "0x1072458", VA = "0x1072458")]
		public float SqrDistance(pb_HsvColor InColor)
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000117")]
	public class pb_XYZ_Color
	{
		[Token(Token = "0x4000460")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float x;

		[Token(Token = "0x4000461")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float y;

		[Token(Token = "0x4000462")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float z;

		[Token(Token = "0x6000503")]
		[Address(RVA = "0x1085564", Offset = "0x1085564", VA = "0x1085564")]
		public pb_XYZ_Color(float x, float y, float z)
		{
		}

		[Token(Token = "0x6000504")]
		[Address(RVA = "0x10855A0", Offset = "0x10855A0", VA = "0x10855A0")]
		public static pb_XYZ_Color FromRGB(Color col)
		{
			return null;
		}

		[Token(Token = "0x6000505")]
		[Address(RVA = "0x1085690", Offset = "0x1085690", VA = "0x1085690")]
		public static pb_XYZ_Color FromRGB(float R, float G, float B)
		{
			return null;
		}

		[Token(Token = "0x6000506")]
		[Address(RVA = "0x10858A0", Offset = "0x10858A0", VA = "0x10858A0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000118")]
	public class pb_CIE_Lab_Color
	{
		[Token(Token = "0x4000463")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float L;

		[Token(Token = "0x4000464")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float a;

		[Token(Token = "0x4000465")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float b;

		[Token(Token = "0x6000507")]
		[Address(RVA = "0x1085964", Offset = "0x1085964", VA = "0x1085964")]
		public pb_CIE_Lab_Color(float L, float a, float b)
		{
		}

		[Token(Token = "0x6000508")]
		[Address(RVA = "0x10859A0", Offset = "0x10859A0", VA = "0x10859A0")]
		public static pb_CIE_Lab_Color FromXYZ(pb_XYZ_Color xyz)
		{
			return null;
		}

		[Token(Token = "0x6000509")]
		[Address(RVA = "0x1085B58", Offset = "0x1085B58", VA = "0x1085B58")]
		public static pb_CIE_Lab_Color FromRGB(Color col)
		{
			return null;
		}

		[Token(Token = "0x600050A")]
		[Address(RVA = "0x1085BE4", Offset = "0x1085BE4", VA = "0x1085BE4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000119")]
	public static class pb_ColorUtil
	{
		[Token(Token = "0x4000466")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Dictionary<string, pb_CIE_Lab_Color> ColorNameLookup;

		[Token(Token = "0x600050B")]
		[Address(RVA = "0x1085CA8", Offset = "0x1085CA8", VA = "0x1085CA8")]
		private static bool approx(float lhs, float rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x600050C")]
		[Address(RVA = "0x108561C", Offset = "0x108561C", VA = "0x108561C")]
		public static pb_XYZ_Color RGBToXYZ(Color col)
		{
			return null;
		}

		[Token(Token = "0x600050D")]
		[Address(RVA = "0x1085704", Offset = "0x1085704", VA = "0x1085704")]
		public static pb_XYZ_Color RGBToXYZ(float r, float g, float b)
		{
			return null;
		}

		[Token(Token = "0x600050E")]
		[Address(RVA = "0x10859F4", Offset = "0x10859F4", VA = "0x10859F4")]
		public static pb_CIE_Lab_Color XYZToCIE_Lab(pb_XYZ_Color xyz)
		{
			return null;
		}

		[Token(Token = "0x600050F")]
		[Address(RVA = "0x1085D0C", Offset = "0x1085D0C", VA = "0x1085D0C")]
		public static float DeltaE(pb_CIE_Lab_Color lhs, pb_CIE_Lab_Color rhs)
		{
			return default(float);
		}

		[Token(Token = "0x6000510")]
		[Address(RVA = "0x1085D54", Offset = "0x1085D54", VA = "0x1085D54")]
		public static Color HSVtoRGB(pb_HsvColor hsv)
		{
			return default(Color);
		}

		[Token(Token = "0x6000511")]
		[Address(RVA = "0x1085DD0", Offset = "0x1085DD0", VA = "0x1085DD0")]
		public static Color HSVtoRGB(float h, float s, float v)
		{
			return default(Color);
		}

		[Token(Token = "0x6000512")]
		[Address(RVA = "0x1085EB4", Offset = "0x1085EB4", VA = "0x1085EB4")]
		public static pb_HsvColor RGBtoHSV(Color color)
		{
			return null;
		}

		[Token(Token = "0x6000513")]
		[Address(RVA = "0x10860D0", Offset = "0x10860D0", VA = "0x10860D0")]
		public static string GetColorName(Color InColor)
		{
			return null;
		}

		[Token(Token = "0x6000514")]
		[Address(RVA = "0x10862E0", Offset = "0x10862E0", VA = "0x10862E0")]
		private static pb_CIE_Lab_Color CIELabFromRGB(float R, float G, float B, float Scale)
		{
			return null;
		}
	}
	[Token(Token = "0x200011A")]
	public static class pb_Constant
	{
		[Token(Token = "0x4000467")]
		public const string PRODUCT_NAME = "ProBuilder";

		[Token(Token = "0x4000468")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly HideFlags EDITOR_OBJECT_HIDE_FLAGS;

		[Token(Token = "0x4000469")]
		public const float MAX_POINT_DISTANCE_FROM_CONTROL = 20f;

		[Token(Token = "0x400046A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Material _defaultMaterial;

		[Token(Token = "0x400046B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static Material _facePickerMaterial;

		[Token(Token = "0x400046C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static Material _vertexPickerMaterial;

		[Token(Token = "0x400046D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static Shader _selectionPickerShader;

		[Token(Token = "0x400046E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static Material _UnityDefaultDiffuse;

		[Token(Token = "0x400046F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static Material _UnlitVertexColorMaterial;

		[Token(Token = "0x4000470")]
		public const char DEGREE_SYMBOL = '°';

		[Token(Token = "0x4000471")]
		public const char CMD_SUPER = '⌘';

		[Token(Token = "0x4000472")]
		public const char CMD_SHIFT = '⇧';

		[Token(Token = "0x4000473")]
		public const char CMD_OPTION = '⌥';

		[Token(Token = "0x4000474")]
		public const char CMD_ALT = '⎇';

		[Token(Token = "0x4000475")]
		public const char CMD_DELETE = '⌫';

		[Token(Token = "0x4000476")]
		public const string pbDefaultEditLevel = "pbDefaultEditLevel";

		[Token(Token = "0x4000477")]
		public const string pbDefaultSelectionMode = "pbDefaultSelectionMode";

		[Token(Token = "0x4000478")]
		public const string pbHandleAlignment = "pbHandleAlignment";

		[Token(Token = "0x4000479")]
		public const string pbVertexColorTool = "pbVertexColorTool";

		[Token(Token = "0x400047A")]
		public const string pbToolbarLocation = "pbToolbarLocation";

		[Token(Token = "0x400047B")]
		public const string pbDefaultEntity = "pbDefaultEntity";

		[Token(Token = "0x400047C")]
		public const string pbExtrudeMethod = "pbExtrudeMethod";

		[Token(Token = "0x400047D")]
		public const string pbDefaultFaceColor = "pbDefaultFaceColor";

		[Token(Token = "0x400047E")]
		public const string pbDefaultEdgeColor = "pbDefaultEdgeColor";

		[Token(Token = "0x400047F")]
		public const string pbDefaultSelectedVertexColor = "pbDefaultSelectedVertexColor";

		[Token(Token = "0x4000480")]
		public const string pbDefaultVertexColor = "pbDefaultVertexColor";

		[Token(Token = "0x4000481")]
		public const string pbDefaultOpenInDockableWindow = "pbDefaultOpenInDockableWindow";

		[Token(Token = "0x4000482")]
		public const string pbEditorPrefVersion = "pbEditorPrefVersion";

		[Token(Token = "0x4000483")]
		public const string pbEditorShortcutsVersion = "pbEditorShortcutsVersion";

		[Token(Token = "0x4000484")]
		public const string pbDefaultCollider = "pbDefaultCollider";

		[Token(Token = "0x4000485")]
		public const string pbForceConvex = "pbForceConvex";

		[Token(Token = "0x4000486")]
		public const string pbVertexColorPrefs = "pbVertexColorPrefs";

		[Token(Token = "0x4000487")]
		public const string pbShowEditorNotifications = "pbShowEditorNotifications";

		[Token(Token = "0x4000488")]
		public const string pbDragCheckLimit = "pbDragCheckLimit";

		[Token(Token = "0x4000489")]
		public const string pbForceVertexPivot = "pbForceVertexPivot";

		[Token(Token = "0x400048A")]
		public const string pbForceGridPivot = "pbForceGridPivot";

		[Token(Token = "0x400048B")]
		public const string pbManifoldEdgeExtrusion = "pbManifoldEdgeExtrusion";

		[Token(Token = "0x400048C")]
		public const string pbPerimeterEdgeBridgeOnly = "pbPerimeterEdgeBridgeOnly";

		[Token(Token = "0x400048D")]
		public const string pbPBOSelectionOnly = "pbPBOSelectionOnly";

		[Token(Token = "0x400048E")]
		public const string pbCloseShapeWindow = "pbCloseShapeWindow";

		[Token(Token = "0x400048F")]
		public const string pbUVEditorFloating = "pbUVEditorFloating";

		[Token(Token = "0x4000490")]
		public const string pbUVMaterialPreview = "pbUVMaterialPreview";

		[Token(Token = "0x4000491")]
		public const string pbShowSceneToolbar = "pbShowSceneToolbar";

		[Token(Token = "0x4000492")]
		public const string pbNormalizeUVsOnPlanarProjection = "pbNormalizeUVsOnPlanarProjection";

		[Token(Token = "0x4000493")]
		public const string pbStripProBuilderOnBuild = "pbStripProBuilderOnBuild";

		[Token(Token = "0x4000494")]
		public const string pbDisableAutoUV2Generation = "pbDisableAutoUV2Generation";

		[Token(Token = "0x4000495")]
		public const string pbShowSceneInfo = "pbShowSceneInfo";

		[Token(Token = "0x4000496")]
		public const string pbEnableBackfaceSelection = "pbEnableBackfaceSelection";

		[Token(Token = "0x4000497")]
		public const string pbVertexPaletteDockable = "pbVertexPaletteDockable";

		[Token(Token = "0x4000498")]
		public const string pbExtrudeAsGroup = "pbExtrudeAsGroup";

		[Token(Token = "0x4000499")]
		public const string pbUniqueModeShortcuts = "pbUniqueModeShortcuts";

		[Token(Token = "0x400049A")]
		public const string pbMaterialEditorFloating = "pbMaterialEditorFloating";

		[Token(Token = "0x400049B")]
		public const string pbShapeWindowFloating = "pbShapeWindowFloating";

		[Token(Token = "0x400049C")]
		public const string pbIconGUI = "pbIconGUI";

		[Token(Token = "0x400049D")]
		public const string pbShiftOnlyTooltips = "pbShiftOnlyTooltips";

		[Token(Token = "0x400049E")]
		public const string pbDrawAxisLines = "pbDrawAxisLines";

		[Token(Token = "0x400049F")]
		public const string pbCollapseVertexToFirst = "pbCollapseVertexToFirst";

		[Token(Token = "0x40004A0")]
		public const string pbMeshesAreAssets = "pbMeshesAreAssets";

		[Token(Token = "0x40004A1")]
		public const string pbElementSelectIsHamFisted = "pbElementSelectIsHamFisted";

		[Token(Token = "0x40004A2")]
		public const string pbFillHoleSelectsEntirePath = "pbFillHoleSelectsEntirePath";

		[Token(Token = "0x40004A3")]
		public const string pbDetachToNewObject = "pbDetachToNewObject";

		[Token(Token = "0x40004A4")]
		[Obsolete("Use pb_MeshImporter::quads")]
		public const string pbPreserveFaces = "pbPreserveFaces";

		[Token(Token = "0x40004A5")]
		public const string pbDragSelectWholeElement = "pbDragSelectWholeElement";

		[Token(Token = "0x40004A6")]
		public const string pbDragSelectMode = "pbDragSelectMode";

		[Token(Token = "0x40004A7")]
		public const string pbShadowCastingMode = "pbShadowCastingMode";

		[Token(Token = "0x40004A8")]
		public const string pbEnableExperimental = "pbEnableExperimental";

		[Token(Token = "0x40004A9")]
		public const string pbCheckForProBuilderUpdates = "pbCheckForProBuilderUpdates";

		[Token(Token = "0x40004AA")]
		public const string pbManageLightmappingStaticFlag = "pbManageLightmappingStaticFlag";

		[Token(Token = "0x40004AB")]
		public const string pbVertexHandleSize = "pbVertexHandleSize";

		[Token(Token = "0x40004AC")]
		public const string pbUVGridSnapValue = "pbUVGridSnapValue";

		[Token(Token = "0x40004AD")]
		public const string pbUVWeldDistance = "pbUVWeldDistance";

		[Token(Token = "0x40004AE")]
		public const string pbWeldDistance = "pbWeldDistance";

		[Token(Token = "0x40004AF")]
		public const string pbExtrudeDistance = "pbExtrudeDistance";

		[Token(Token = "0x40004B0")]
		public const string pbBevelAmount = "pbBevelAmount";

		[Token(Token = "0x40004B1")]
		public const string pbEdgeSubdivisions = "pbEdgeSubdivisions";

		[Token(Token = "0x40004B2")]
		public const string pbDefaultShortcuts = "pbDefaultShortcuts";

		[Token(Token = "0x40004B3")]
		public const string pbDefaultMaterial = "pbDefaultMaterial";

		[Token(Token = "0x40004B4")]
		public const string pbCurrentMaterialPalette = "pbCurrentMaterialPalette";

		[Token(Token = "0x40004B5")]
		public const string pbGrowSelectionUsingAngle = "pbGrowSelectionUsingAngle";

		[Token(Token = "0x40004B6")]
		public const string pbGrowSelectionAngle = "pbGrowSelectionAngle";

		[Token(Token = "0x40004B7")]
		public const string pbGrowSelectionAngleIterative = "pbGrowSelectionAngleIterative";

		[Token(Token = "0x40004B8")]
		public const string pbShowDetail = "pbShowDetail";

		[Token(Token = "0x40004B9")]
		public const string pbShowOccluder = "pbShowOccluder";

		[Token(Token = "0x40004BA")]
		public const string pbShowMover = "pbShowMover";

		[Token(Token = "0x40004BB")]
		public const string pbShowCollider = "pbShowCollider";

		[Token(Token = "0x40004BC")]
		public const string pbShowTrigger = "pbShowTrigger";

		[Token(Token = "0x40004BD")]
		public const string pbShowNoDraw = "pbShowNoDraw";

		[Token(Token = "0x40004BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static readonly Rect RectZero;

		[Token(Token = "0x40004BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static Color ProBuilderBlue;

		[Token(Token = "0x40004C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public static Color ProBuilderLightGray;

		[Token(Token = "0x40004C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public static Color ProBuilderDarkGray;

		[Token(Token = "0x40004C2")]
		public const int MENU_ABOUT = 0;

		[Token(Token = "0x40004C3")]
		public const int MENU_EDITOR = 100;

		[Token(Token = "0x40004C4")]
		public const int MENU_SELECTION = 200;

		[Token(Token = "0x40004C5")]
		public const int MENU_GEOMETRY = 200;

		[Token(Token = "0x40004C6")]
		public const int MENU_ACTIONS = 300;

		[Token(Token = "0x40004C7")]
		public const int MENU_MATERIAL_COLORS = 400;

		[Token(Token = "0x40004C8")]
		public const int MENU_VERTEX_COLORS = 400;

		[Token(Token = "0x40004C9")]
		public const int MENU_REPAIR = 600;

		[Token(Token = "0x40004CA")]
		public const int MENU_MISC = 600;

		[Token(Token = "0x40004CB")]
		public const int MENU_EXPORT = 800;

		[Token(Token = "0x40004CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public static Vector3[] VERTICES_CUBE;

		[Token(Token = "0x40004CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public static int[] TRIANGLES_CUBE;

		[Token(Token = "0x40004CE")]
		public const int MAX_VERTEX_COUNT = 65000;

		[Token(Token = "0x17000083")]
		public static Material DefaultMaterial
		{
			[Token(Token = "0x6000516")]
			[Address(RVA = "0x1086304", Offset = "0x1086304", VA = "0x1086304")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000084")]
		public static Material FacePickerMaterial
		{
			[Token(Token = "0x6000517")]
			[Address(RVA = "0x1086670", Offset = "0x1086670", VA = "0x1086670")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000085")]
		public static Material VertexPickerMaterial
		{
			[Token(Token = "0x6000518")]
			[Address(RVA = "0x1086870", Offset = "0x1086870", VA = "0x1086870")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000086")]
		public static Shader SelectionPickerShader
		{
			[Token(Token = "0x6000519")]
			[Address(RVA = "0x1086A70", Offset = "0x1086A70", VA = "0x1086A70")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000087")]
		public static Material TriggerMaterial
		{
			[Token(Token = "0x600051A")]
			[Address(RVA = "0x1086B6C", Offset = "0x1086B6C", VA = "0x1086B6C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000088")]
		public static Material ColliderMaterial
		{
			[Token(Token = "0x600051B")]
			[Address(RVA = "0x1086C4C", Offset = "0x1086C4C", VA = "0x1086C4C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000089")]
		public static Material NoDrawMaterial
		{
			[Token(Token = "0x600051C")]
			[Address(RVA = "0x1086D2C", Offset = "0x1086D2C", VA = "0x1086D2C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700008A")]
		public static Material UnityDefaultDiffuse
		{
			[Token(Token = "0x600051D")]
			[Address(RVA = "0x1086530", Offset = "0x1086530", VA = "0x1086530")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700008B")]
		public static Material UnlitVertexColor
		{
			[Token(Token = "0x600051E")]
			[Address(RVA = "0x1086E0C", Offset = "0x1086E0C", VA = "0x1086E0C")]
			get
			{
				return null;
			}
		}
	}
	[Serializable]
	[Token(Token = "0x200011B")]
	public struct pb_Edge : IEquatable<pb_Edge>
	{
		[Token(Token = "0x40004CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int x;

		[Token(Token = "0x40004D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int y;

		[Token(Token = "0x40004D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly pb_Edge Empty;

		[Token(Token = "0x6000520")]
		[Address(RVA = "0x1087200", Offset = "0x1087200", VA = "0x1087200")]
		public pb_Edge(int x, int y)
		{
		}

		[Token(Token = "0x6000521")]
		[Address(RVA = "0x1087208", Offset = "0x1087208", VA = "0x1087208")]
		public pb_Edge(pb_Edge edge)
		{
		}

		[Token(Token = "0x6000522")]
		[Address(RVA = "0x1087214", Offset = "0x1087214", VA = "0x1087214")]
		public bool IsValid()
		{
			return default(bool);
		}

		[Token(Token = "0x6000523")]
		[Address(RVA = "0x1087240", Offset = "0x1087240", VA = "0x1087240", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000524")]
		[Address(RVA = "0x1087450", Offset = "0x1087450", VA = "0x1087450", Slot = "4")]
		public bool Equals(pb_Edge edge)
		{
			return default(bool);
		}

		[Token(Token = "0x6000525")]
		[Address(RVA = "0x1087494", Offset = "0x1087494", VA = "0x1087494", Slot = "0")]
		public override bool Equals(object b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000526")]
		[Address(RVA = "0x1087534", Offset = "0x1087534", VA = "0x1087534", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000527")]
		[Address(RVA = "0x1087558", Offset = "0x1087558", VA = "0x1087558")]
		public static pb_Edge operator +(pb_Edge a, pb_Edge b)
		{
			return default(pb_Edge);
		}

		[Token(Token = "0x6000528")]
		[Address(RVA = "0x1087570", Offset = "0x1087570", VA = "0x1087570")]
		public static pb_Edge operator -(pb_Edge a, pb_Edge b)
		{
			return default(pb_Edge);
		}

		[Token(Token = "0x6000529")]
		[Address(RVA = "0x1087588", Offset = "0x1087588", VA = "0x1087588")]
		public static pb_Edge operator +(pb_Edge a, int b)
		{
			return default(pb_Edge);
		}

		[Token(Token = "0x600052A")]
		[Address(RVA = "0x108759C", Offset = "0x108759C", VA = "0x108759C")]
		public static pb_Edge operator -(pb_Edge a, int b)
		{
			return default(pb_Edge);
		}

		[Token(Token = "0x600052B")]
		[Address(RVA = "0x10875B0", Offset = "0x10875B0", VA = "0x10875B0")]
		public static bool operator ==(pb_Edge a, pb_Edge b)
		{
			return default(bool);
		}

		[Token(Token = "0x600052C")]
		[Address(RVA = "0x10875E8", Offset = "0x10875E8", VA = "0x10875E8")]
		public static bool operator !=(pb_Edge a, pb_Edge b)
		{
			return default(bool);
		}

		[Token(Token = "0x600052D")]
		[Address(RVA = "0x1087678", Offset = "0x1087678", VA = "0x1087678")]
		public int[] ToArray()
		{
			return null;
		}

		[Token(Token = "0x600052E")]
		[Address(RVA = "0x10876F0", Offset = "0x10876F0", VA = "0x10876F0")]
		public bool Equals(pb_Edge b, Dictionary<int, int> lookup)
		{
			return default(bool);
		}

		[Token(Token = "0x600052F")]
		[Address(RVA = "0x10877CC", Offset = "0x10877CC", VA = "0x10877CC")]
		public bool Contains(int a)
		{
			return default(bool);
		}

		[Token(Token = "0x6000530")]
		[Address(RVA = "0x10877F0", Offset = "0x10877F0", VA = "0x10877F0")]
		public bool Contains(pb_Edge b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000531")]
		[Address(RVA = "0x1087820", Offset = "0x1087820", VA = "0x1087820")]
		public bool Contains(int a, pb_IntArray[] sharedIndices)
		{
			return default(bool);
		}

		[Token(Token = "0x6000532")]
		[Address(RVA = "0x10879A0", Offset = "0x10879A0", VA = "0x10879A0")]
		public static pb_Edge[] GetUniversalEdges(pb_Edge[] edges, Dictionary<int, int> sharedIndicesLookup)
		{
			return null;
		}

		[Token(Token = "0x6000533")]
		[Address(RVA = "0x1087AB8", Offset = "0x1087AB8", VA = "0x1087AB8")]
		public static pb_Edge[] GetUniversalEdges(pb_Edge[] edges, pb_IntArray[] sharedIndices)
		{
			return null;
		}

		[Token(Token = "0x6000534")]
		[Address(RVA = "0x1087C8C", Offset = "0x1087C8C", VA = "0x1087C8C")]
		public static pb_Edge GetLocalEdgeFast(pb_Edge edge, pb_IntArray[] sharedIndices)
		{
			return default(pb_Edge);
		}

		[Token(Token = "0x6000535")]
		[Address(RVA = "0x1087D3C", Offset = "0x1087D3C", VA = "0x1087D3C")]
		public static bool ValidateEdge(pb_Object pb, pb_Edge edge, out pb_Tuple<pb_Face, pb_Edge> validEdge)
		{
			return default(bool);
		}

		[Token(Token = "0x6000536")]
		[Address(RVA = "0x1087FE4", Offset = "0x1087FE4", VA = "0x1087FE4")]
		public static List<pb_Edge> ValidateEdges(pb_Object pb, pb_Edge[] edges)
		{
			return null;
		}

		[Token(Token = "0x6000537")]
		[Address(RVA = "0x1088358", Offset = "0x1088358", VA = "0x1088358")]
		public static pb_Edge[] GetLocalEdges_Fast(pb_Edge[] edges, pb_IntArray[] sharedIndices)
		{
			return null;
		}

		[Token(Token = "0x6000538")]
		[Address(RVA = "0x1088478", Offset = "0x1088478", VA = "0x1088478")]
		public static pb_Edge[] AllEdges(pb_Face[] faces)
		{
			return null;
		}

		[Token(Token = "0x6000539")]
		[Address(RVA = "0x1088578", Offset = "0x1088578", VA = "0x1088578")]
		public static bool ContainsDuplicateFast(pb_Edge[] edges, pb_Edge edge)
		{
			return default(bool);
		}

		[Token(Token = "0x600053A")]
		[Address(RVA = "0x108860C", Offset = "0x108860C", VA = "0x108860C")]
		public static Vector3[] VerticesWithEdges(pb_Edge[] edges, Vector3[] vertices)
		{
			return null;
		}

		[Token(Token = "0x600053B")]
		[Address(RVA = "0x1088738", Offset = "0x1088738", VA = "0x1088738")]
		public static pb_Edge[] GetPerimeterEdges(pb_Edge[] edges)
		{
			return null;
		}
	}
	[Token(Token = "0x200011D")]
	public static class EdgeExtensions
	{
		[Token(Token = "0x600053F")]
		[Address(RVA = "0x10889D0", Offset = "0x10889D0", VA = "0x10889D0")]
		public static bool ContainsDuplicate(this List<pb_Edge> edges, pb_Edge edge, Dictionary<int, int> lookup)
		{
			return default(bool);
		}

		[Token(Token = "0x6000540")]
		[Address(RVA = "0x1088AA4", Offset = "0x1088AA4", VA = "0x1088AA4")]
		public static bool Contains(this pb_Edge[] edges, pb_Edge edge)
		{
			return default(bool);
		}

		[Token(Token = "0x6000541")]
		[Address(RVA = "0x1088B2C", Offset = "0x1088B2C", VA = "0x1088B2C")]
		public static bool Contains(this pb_Edge[] edges, int x, int y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000542")]
		[Address(RVA = "0x1088B94", Offset = "0x1088B94", VA = "0x1088B94")]
		public static IEnumerable<pb_Edge> DistinctCommon(this IEnumerable<pb_Edge> edges, Dictionary<int, int> lookup)
		{
			return null;
		}

		[Token(Token = "0x6000543")]
		[Address(RVA = "0x1088D78", Offset = "0x1088D78", VA = "0x1088D78")]
		public static int IndexOf(this IList<pb_Edge> edges, pb_Edge edge, Dictionary<int, int> lookup)
		{
			return default(int);
		}

		[Token(Token = "0x6000544")]
		[Address(RVA = "0x1088ED8", Offset = "0x1088ED8", VA = "0x1088ED8")]
		public static List<int> ToIntList(this List<pb_Edge> edges)
		{
			return null;
		}

		[Token(Token = "0x6000545")]
		[Address(RVA = "0x1089148", Offset = "0x1089148", VA = "0x1089148")]
		public static int[] AllTriangles(this pb_Edge[] edges)
		{
			return null;
		}

		[Token(Token = "0x6000546")]
		[Address(RVA = "0x1089218", Offset = "0x1089218", VA = "0x1089218")]
		public static List<int> AllTriangles(this List<pb_Edge> edges)
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x2000120")]
	[ExecuteInEditMode]
	[AddComponentMenu("")]
	public class pb_ElementGraphics : pb_MonoBehaviourSingleton<pb_ElementGraphics>
	{
		[Token(Token = "0x40004D6")]
		private const string FACE_SHADER = "Hidden/ProBuilder/FaceHighlight";

		[Token(Token = "0x40004D7")]
		private const string EDGE_SHADER = "Hidden/ProBuilder/FaceHighlight";

		[Token(Token = "0x40004D8")]
		private const string VERT_SHADER = "Hidden/ProBuilder/pb_VertexShader";

		[Token(Token = "0x40004D9")]
		private const string PREVIEW_OBJECT_NAME = "ProBuilderSelectionGameObject";

		[Token(Token = "0x40004DA")]
		private const string WIREFRAME_OBJECT_NAME = "ProBuilderWireframeGameObject";

		[Token(Token = "0x40004DB")]
		private const string SELECTION_MESH_NAME = "ProBuilderEditorSelectionMesh";

		[Token(Token = "0x40004DC")]
		private const string WIREFRAME_MESH_NAME = "ProBuilderEditorWireframeMesh";

		[Token(Token = "0x40004DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static float vertexHandleSize;

		[Token(Token = "0x40004DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Material faceMaterial;

		[Token(Token = "0x40004DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Material vertexMaterial;

		[Token(Token = "0x40004E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Material wireframeMaterial;

		[Token(Token = "0x40004E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Color faceSelectionColor;

		[Token(Token = "0x40004E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Color edgeSelectionColor;

		[Token(Token = "0x40004E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private Color vertSelectionColor;

		[Token(Token = "0x40004E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private Color wireframeColor;

		[Token(Token = "0x40004E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private Color vertexDotColor;

		[Token(Token = "0x40004E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static readonly HideFlags PB_EDITOR_GRAPHIC_HIDE_FLAGS;

		[Token(Token = "0x40004E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private pb_ObjectPool<pb_Renderable> pool;

		[Token(Token = "0x40004E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private List<pb_Renderable> activeRenderables;

		[Token(Token = "0x600054C")]
		[Address(RVA = "0x1089510", Offset = "0x1089510", VA = "0x1089510", Slot = "4")]
		public override void Awake()
		{
		}

		[Token(Token = "0x600054D")]
		[Address(RVA = "0x1089878", Offset = "0x1089878", VA = "0x1089878")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600054E")]
		[Address(RVA = "0x10898EC", Offset = "0x10898EC", VA = "0x10898EC", Slot = "5")]
		public override void OnEnable()
		{
		}

		[Token(Token = "0x600054F")]
		[Address(RVA = "0x1089A6C", Offset = "0x1089A6C", VA = "0x1089A6C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000550")]
		[Address(RVA = "0x10897BC", Offset = "0x10897BC", VA = "0x10897BC")]
		private Material CreateMaterial(Shader shader, string materialName)
		{
			return null;
		}

		[Token(Token = "0x6000551")]
		[Address(RVA = "0x1089ABC", Offset = "0x1089ABC", VA = "0x1089ABC")]
		public void LoadPrefs(Color in_faceSelectionColor, Color in_edgeSelectionColor, Color in_vertSelectionColor, Color in_vertexDotColor, float in_vertexHandleSize)
		{
		}

		[Token(Token = "0x6000552")]
		[Address(RVA = "0x1089C58", Offset = "0x1089C58", VA = "0x1089C58")]
		private void AddRenderable(pb_Renderable ren)
		{
		}

		[Token(Token = "0x6000553")]
		[Address(RVA = "0x1089D80", Offset = "0x1089D80", VA = "0x1089D80")]
		public void RebuildGraphics(pb_Object[] selection, pb_Edge[][] universalEdgesDistinct, EditLevel editLevel, SelectMode selectionMode)
		{
		}

		[Token(Token = "0x6000554")]
		[Address(RVA = "0x108A470", Offset = "0x108A470", VA = "0x108A470")]
		private pb_Renderable BuildFaceMesh(pb_Object pb)
		{
			return null;
		}

		[Token(Token = "0x6000555")]
		[Address(RVA = "0x108A5E8", Offset = "0x108A5E8", VA = "0x108A5E8")]
		private pb_Renderable BuildVertexMesh(pb_Object pb)
		{
			return null;
		}

		[Token(Token = "0x6000556")]
		[Address(RVA = "0x108A164", Offset = "0x108A164", VA = "0x108A164")]
		private pb_Renderable BuildEdgeMesh(pb_Object pb, pb_Edge[] universalEdgesDistinct)
		{
			return null;
		}

		[Token(Token = "0x6000557")]
		[Address(RVA = "0x108B164", Offset = "0x108B164", VA = "0x108B164")]
		public pb_ElementGraphics()
		{
		}
	}
	[Token(Token = "0x2000121")]
	[Flags]
	public enum SelectMode
	{
		[Token(Token = "0x40004EA")]
		Vertex = 0,
		[Token(Token = "0x40004EB")]
		Edge = 1,
		[Token(Token = "0x40004EC")]
		Face = 2
	}
	[Token(Token = "0x2000122")]
	[Flags]
	public enum EditLevel
	{
		[Token(Token = "0x40004EE")]
		Top = 0,
		[Token(Token = "0x40004EF")]
		Geometry = 1,
		[Token(Token = "0x40004F0")]
		Texture = 2,
		[Token(Token = "0x40004F1")]
		Plugin = 4
	}
	[Token(Token = "0x2000123")]
	public enum HandleAlignment
	{
		[Token(Token = "0x40004F3")]
		World,
		[Token(Token = "0x40004F4")]
		Local,
		[Token(Token = "0x40004F5")]
		Plane
	}
	[Token(Token = "0x2000124")]
	public enum DragSelectMode
	{
		[Token(Token = "0x40004F7")]
		Add,
		[Token(Token = "0x40004F8")]
		Subtract,
		[Token(Token = "0x40004F9")]
		Difference
	}
	[Token(Token = "0x2000125")]
	public enum EntityType
	{
		[Token(Token = "0x40004FB")]
		Detail,
		[Token(Token = "0x40004FC")]
		Occluder,
		[Token(Token = "0x40004FD")]
		Trigger,
		[Token(Token = "0x40004FE")]
		Collider,
		[Token(Token = "0x40004FF")]
		Mover
	}
	[Token(Token = "0x2000126")]
	[Flags]
	public enum SelectionRenderState
	{
		[Token(Token = "0x4000501")]
		None = 0,
		[Token(Token = "0x4000502")]
		Wireframe = 1,
		[Token(Token = "0x4000503")]
		Outline = 2
	}
	[Token(Token = "0x2000127")]
	public enum ColliderType
	{
		[Token(Token = "0x4000505")]
		None,
		[Token(Token = "0x4000506")]
		BoxCollider,
		[Token(Token = "0x4000507")]
		MeshCollider
	}
	[Token(Token = "0x2000128")]
	public enum ProjectionAxis
	{
		[Token(Token = "0x4000509")]
		X,
		[Token(Token = "0x400050A")]
		Y,
		[Token(Token = "0x400050B")]
		Z,
		[Token(Token = "0x400050C")]
		X_Negative,
		[Token(Token = "0x400050D")]
		Y_Negative,
		[Token(Token = "0x400050E")]
		Z_Negative
	}
	[Token(Token = "0x2000129")]
	public enum Shape
	{
		[Token(Token = "0x4000510")]
		Cube,
		[Token(Token = "0x4000511")]
		Stair,
		[Token(Token = "0x4000512")]
		Prism,
		[Token(Token = "0x4000513")]
		Cylinder,
		[Token(Token = "0x4000514")]
		Plane,
		[Token(Token = "0x4000515")]
		Door,
		[Token(Token = "0x4000516")]
		Pipe,
		[Token(Token = "0x4000517")]
		Cone,
		[Token(Token = "0x4000518")]
		Sprite,
		[Token(Token = "0x4000519")]
		Arch,
		[Token(Token = "0x400051A")]
		Icosahedron,
		[Token(Token = "0x400051B")]
		Torus,
		[Token(Token = "0x400051C")]
		Custom
	}
	[Token(Token = "0x200012A")]
	public enum Axis
	{
		[Token(Token = "0x400051E")]
		Right,
		[Token(Token = "0x400051F")]
		Left,
		[Token(Token = "0x4000520")]
		Up,
		[Token(Token = "0x4000521")]
		Down,
		[Token(Token = "0x4000522")]
		Forward,
		[Token(Token = "0x4000523")]
		Backward
	}
	[Token(Token = "0x200012B")]
	public enum UV2Method
	{
		[Token(Token = "0x4000525")]
		Unity,
		[Token(Token = "0x4000526")]
		BinPack
	}
	[Token(Token = "0x200012C")]
	public enum WindingOrder
	{
		[Token(Token = "0x4000528")]
		Unknown,
		[Token(Token = "0x4000529")]
		Clockwise,
		[Token(Token = "0x400052A")]
		CounterClockwise
	}
	[Token(Token = "0x200012D")]
	public enum SortMethod
	{
		[Token(Token = "0x400052C")]
		Clockwise,
		[Token(Token = "0x400052D")]
		CounterClockwise
	}
	[Token(Token = "0x200012E")]
	public enum Culling
	{
		[Token(Token = "0x400052F")]
		Back,
		[Token(Token = "0x4000530")]
		Front,
		[Token(Token = "0x4000531")]
		FrontBack
	}
	[Token(Token = "0x200012F")]
	public enum MeshRebuildReason
	{
		[Token(Token = "0x4000533")]
		Null,
		[Token(Token = "0x4000534")]
		InstanceIDMismatch,
		[Token(Token = "0x4000535")]
		Lightmap,
		[Token(Token = "0x4000536")]
		None
	}
	[Token(Token = "0x2000130")]
	[Flags]
	public enum AttributeType : ushort
	{
		[Token(Token = "0x4000538")]
		Position = 1,
		[Token(Token = "0x4000539")]
		UV0 = 2,
		[Token(Token = "0x400053A")]
		UV1 = 4,
		[Token(Token = "0x400053B")]
		UV2 = 8,
		[Token(Token = "0x400053C")]
		UV3 = 0x10,
		[Token(Token = "0x400053D")]
		Color = 0x20,
		[Token(Token = "0x400053E")]
		Normal = 0x40,
		[Token(Token = "0x400053F")]
		Tangent = 0x80,
		[Token(Token = "0x4000540")]
		All = 0xFF
	}
	[Token(Token = "0x2000131")]
	public enum IndexFormat
	{
		[Token(Token = "0x4000542")]
		Local,
		[Token(Token = "0x4000543")]
		Common,
		[Token(Token = "0x4000544")]
		Both
	}
	[Token(Token = "0x2000132")]
	[Flags]
	public enum RefreshMask : ushort
	{
		[Token(Token = "0x4000546")]
		All = 0xFF,
		[Token(Token = "0x4000547")]
		UV = 1,
		[Token(Token = "0x4000548")]
		Colors = 2,
		[Token(Token = "0x4000549")]
		Normals = 4,
		[Token(Token = "0x400054A")]
		Tangents = 8,
		[Token(Token = "0x400054B")]
		Collisions = 0x10
	}
	[Token(Token = "0x2000133")]
	public enum ExtrudeMethod
	{
		[Token(Token = "0x400054D")]
		IndividualFaces,
		[Token(Token = "0x400054E")]
		VertexNormal,
		[Token(Token = "0x400054F")]
		FaceNormal
	}
	[Serializable]
	[Token(Token = "0x2000134")]
	public class pb_Face
	{
		[Token(Token = "0x4000550")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private int[] _indices;

		[Token(Token = "0x4000551")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private int[] _distinctIndices;

		[Token(Token = "0x4000552")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private pb_Edge[] _edges;

		[Token(Token = "0x4000553")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private int _smoothingGroup;

		[Token(Token = "0x4000554")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private pb_UV _uv;

		[Token(Token = "0x4000555")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Material _mat;

		[Token(Token = "0x4000556")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool manualUV;

		[Token(Token = "0x4000557")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public int elementGroup;

		[Token(Token = "0x4000558")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public int textureGroup;

		[Token(Token = "0x1700008C")]
		public int[] indices
		{
			[Token(Token = "0x600055E")]
			[Address(RVA = "0x108B6D0", Offset = "0x108B6D0", VA = "0x108B6D0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700008D")]
		public int[] distinctIndices
		{
			[Token(Token = "0x600055F")]
			[Address(RVA = "0x1087FD0", Offset = "0x1087FD0", VA = "0x1087FD0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700008E")]
		public pb_Edge[] edges
		{
			[Token(Token = "0x6000560")]
			[Address(RVA = "0x1088344", Offset = "0x1088344", VA = "0x1088344")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700008F")]
		public int smoothingGroup
		{
			[Token(Token = "0x6000561")]
			[Address(RVA = "0x108BAB4", Offset = "0x108BAB4", VA = "0x108BAB4")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000562")]
			[Address(RVA = "0x108BABC", Offset = "0x108BABC", VA = "0x108BABC")]
			set
			{
			}
		}

		[Token(Token = "0x17000090")]
		public Material material
		{
			[Token(Token = "0x6000563")]
			[Address(RVA = "0x108BAC4", Offset = "0x108BAC4", VA = "0x108BAC4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000564")]
			[Address(RVA = "0x108BACC", Offset = "0x108BACC", VA = "0x108BACC")]
			set
			{
			}
		}

		[Token(Token = "0x17000091")]
		public pb_UV uv
		{
			[Token(Token = "0x6000565")]
			[Address(RVA = "0x108BAD4", Offset = "0x108BAD4", VA = "0x108BAD4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000566")]
			[Address(RVA = "0x108BADC", Offset = "0x108BADC", VA = "0x108BADC")]
			set
			{
			}
		}

		[Token(Token = "0x17000092")]
		public int this[int i]
		{
			[Token(Token = "0x6000567")]
			[Address(RVA = "0x108BAE4", Offset = "0x108BAE4", VA = "0x108BAE4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000559")]
		[Address(RVA = "0x108B288", Offset = "0x108B288", VA = "0x108B288")]
		public pb_Face()
		{
		}

		[Token(Token = "0x600055A")]
		[Address(RVA = "0x108B298", Offset = "0x108B298", VA = "0x108B298")]
		public pb_Face(int[] i)
		{
		}

		[Token(Token = "0x600055B")]
		[Address(RVA = "0x108B398", Offset = "0x108B398", VA = "0x108B398")]
		public pb_Face(int[] i, Material m, pb_UV u, int smoothingGroup, int textureGroup, int elementGroup, bool manualUV)
		{
		}

		[Token(Token = "0x600055C")]
		[Address(RVA = "0x108B484", Offset = "0x108B484", VA = "0x108B484")]
		public pb_Face(pb_Face face)
		{
		}

		[Token(Token = "0x600055D")]
		[Address(RVA = "0x108B5BC", Offset = "0x108B5BC", VA = "0x108B5BC")]
		public void CopyFrom(pb_Face other)
		{
		}

		[Token(Token = "0x6000568")]
		[Address(RVA = "0x108BB14", Offset = "0x108BB14", VA = "0x108BB14")]
		[Obsolete("Use face.material property.")]
		public void SetMaterial(Material material)
		{
		}

		[Token(Token = "0x6000569")]
		[Address(RVA = "0x108BB1C", Offset = "0x108BB1C", VA = "0x108BB1C")]
		[Obsolete("Use face.uv property.")]
		public void SetUV(pb_UV uvs)
		{
		}

		[Token(Token = "0x600056A")]
		[Address(RVA = "0x108BB24", Offset = "0x108BB24", VA = "0x108BB24")]
		[Obsolete("Use face.smoothingGroup property.")]
		public void SetSmoothingGroup(int smoothing)
		{
		}

		[Token(Token = "0x600056B")]
		[Address(RVA = "0x108BB2C", Offset = "0x108BB2C", VA = "0x108BB2C")]
		public bool IsValid()
		{
			return default(bool);
		}

		[Token(Token = "0x600056C")]
		[Address(RVA = "0x108BB50", Offset = "0x108BB50", VA = "0x108BB50")]
		public Vector3[] GetDistinctVertices(Vector3[] verts)
		{
			return null;
		}

		[Token(Token = "0x600056D")]
		[Address(RVA = "0x108BC2C", Offset = "0x108BC2C", VA = "0x108BC2C")]
		public int[] GetTriangle(int index)
		{
			return null;
		}

		[Token(Token = "0x600056E")]
		[Address(RVA = "0x108BD14", Offset = "0x108BD14", VA = "0x108BD14")]
		public pb_Edge[] GetAllEdges()
		{
			return null;
		}

		[Token(Token = "0x600056F")]
		[Address(RVA = "0x108B374", Offset = "0x108B374", VA = "0x108B374")]
		public void SetIndices(int[] i)
		{
		}

		[Token(Token = "0x6000570")]
		[Address(RVA = "0x108BE70", Offset = "0x108BE70", VA = "0x108BE70")]
		public void ShiftIndices(int offset)
		{
		}

		[Token(Token = "0x6000571")]
		[Address(RVA = "0x108BEC8", Offset = "0x108BEC8", VA = "0x108BEC8")]
		public int SmallestIndexValue()
		{
			return default(int);
		}

		[Token(Token = "0x6000572")]
		[Address(RVA = "0x108BF14", Offset = "0x108BF14", VA = "0x108BF14")]
		public void ShiftIndicesToZero()
		{
		}

		[Token(Token = "0x6000573")]
		[Address(RVA = "0x108C000", Offset = "0x108C000", VA = "0x108C000")]
		public void ReverseIndices()
		{
		}

		[Token(Token = "0x6000574")]
		[Address(RVA = "0x108B5A4", Offset = "0x108B5A4", VA = "0x108B5A4")]
		public void RebuildCaches()
		{
		}

		[Token(Token = "0x6000575")]
		[Address(RVA = "0x108B7A4", Offset = "0x108B7A4", VA = "0x108B7A4")]
		private pb_Edge[] CacheEdges()
		{
			return null;
		}

		[Token(Token = "0x6000576")]
		[Address(RVA = "0x108B6D8", Offset = "0x108B6D8", VA = "0x108B6D8")]
		private int[] CacheDistinctIndices()
		{
			return null;
		}

		[Token(Token = "0x6000577")]
		[Address(RVA = "0x108C058", Offset = "0x108C058", VA = "0x108C058")]
		public bool Contains(int[] triangle)
		{
			return default(bool);
		}

		[Token(Token = "0x6000578")]
		[Address(RVA = "0x108B04C", Offset = "0x108B04C", VA = "0x108B04C")]
		public static int[] AllTriangles(pb_Face[] q)
		{
			return null;
		}

		[Token(Token = "0x6000579")]
		[Address(RVA = "0x108C158", Offset = "0x108C158", VA = "0x108C158")]
		public static int[] AllTriangles(List<pb_Face> q)
		{
			return null;
		}

		[Token(Token = "0x600057A")]
		[Address(RVA = "0x108C350", Offset = "0x108C350", VA = "0x108C350")]
		public static int[] AllTrianglesDistinct(pb_Face[] q)
		{
			return null;
		}

		[Token(Token = "0x600057B")]
		[Address(RVA = "0x108C450", Offset = "0x108C450", VA = "0x108C450")]
		public static List<int> AllTrianglesDistinct(List<pb_Face> f)
		{
			return null;
		}

		[Token(Token = "0x600057C")]
		[Address(RVA = "0x108C610", Offset = "0x108C610", VA = "0x108C610")]
		public MeshTopology ToQuadOrTriangles(out int[] quadOrTris)
		{
			return default(MeshTopology);
		}

		[Token(Token = "0x600057D")]
		[Address(RVA = "0x108CACC", Offset = "0x108CACC", VA = "0x108CACC")]
		public int[] ToQuad()
		{
			return null;
		}

		[Token(Token = "0x600057E")]
		[Address(RVA = "0x108C6E8", Offset = "0x108C6E8", VA = "0x108C6E8")]
		public bool ToQuad(out int[] quad)
		{
			return default(bool);
		}

		[Token(Token = "0x600057F")]
		[Address(RVA = "0x108CAE8", Offset = "0x108CAE8", VA = "0x108CAE8")]
		[Obsolete("Please use GetMeshIndices")]
		public static int MeshTriangles(pb_Face[] faces, out int[][] submeshes, out Material[] materials)
		{
			return default(int);
		}

		[Token(Token = "0x6000580")]
		[Address(RVA = "0x108D05C", Offset = "0x108D05C", VA = "0x108D05C")]
		public static int GetMeshIndices(pb_Face[] faces, out pb_Submesh[] submeshes, MeshTopology preferredTopology = MeshTopology.Triangles)
		{
			return default(int);
		}

		[Token(Token = "0x6000581")]
		[Address(RVA = "0x108D760", Offset = "0x108D760", VA = "0x108D760", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000582")]
		[Address(RVA = "0x108D988", Offset = "0x108D988", VA = "0x108D988")]
		public string ToStringDetailed()
		{
			return null;
		}
	}
	[Token(Token = "0x2000135")]
	public static class pb_HandleUtility
	{
		[Token(Token = "0x4000559")]
		private const float MAX_EDGE_SELECT_DISTANCE = 20f;

		[Token(Token = "0x6000583")]
		[Address(RVA = "0x108E154", Offset = "0x108E154", VA = "0x108E154")]
		public static bool FaceRaycast(Ray InWorldRay, pb_Object mesh, out pb_RaycastHit hit, [Optional] HashSet<pb_Face> ignore)
		{
			return default(bool);
		}

		[Token(Token = "0x6000584")]
		[Address(RVA = "0x108E194", Offset = "0x108E194", VA = "0x108E194")]
		public static bool FaceRaycast(Ray InWorldRay, pb_Object mesh, out pb_RaycastHit hit, float distance, Culling cullingMode, [Optional] HashSet<pb_Face> ignore)
		{
			return default(bool);
		}

		[Token(Token = "0x6000585")]
		[Address(RVA = "0x108E974", Offset = "0x108E974", VA = "0x108E974")]
		public static bool FaceRaycast(Ray InWorldRay, pb_Object mesh, out List<pb_RaycastHit> hits, float distance, Culling cullingMode, [Optional] HashSet<pb_Face> ignore)
		{
			return default(bool);
		}

		[Token(Token = "0x6000586")]
		[Address(RVA = "0x108EF04", Offset = "0x108EF04", VA = "0x108EF04")]
		public static Ray InverseTransformRay(this Transform transform, Ray InWorldRay)
		{
			return default(Ray);
		}

		[Token(Token = "0x6000587")]
		[Address(RVA = "0x108F03C", Offset = "0x108F03C", VA = "0x108F03C")]
		public static bool WorldRaycast(Ray InWorldRay, Transform transform, Vector3[] vertices, int[] triangles, out pb_RaycastHit hit, float distance = float.PositiveInfinity, Culling cullingMode = Culling.Front)
		{
			return default(bool);
		}

		[Token(Token = "0x6000588")]
		[Address(RVA = "0x108F0C0", Offset = "0x108F0C0", VA = "0x108F0C0")]
		public static bool MeshRaycast(Ray InRay, Vector3[] vertices, int[] triangles, out pb_RaycastHit hit, float distance = float.PositiveInfinity, Culling cullingMode = Culling.Front)
		{
			return default(bool);
		}

		[Token(Token = "0x6000589")]
		[Address(RVA = "0x108F544", Offset = "0x108F544", VA = "0x108F544")]
		public static bool EdgeRaycast(Camera cam, Vector2 mousePosition, pb_Object mesh, pb_Edge[] edges, Vector3[] verticesInWorldSpace, out pb_Edge edge)
		{
			return default(bool);
		}

		[Token(Token = "0x600058A")]
		[Address(RVA = "0x108FCDC", Offset = "0x108FCDC", VA = "0x108FCDC")]
		public static GameObject ObjectRaycast(Camera cam, Vector2 mousePosition, GameObject[] objects)
		{
			return null;
		}

		[Token(Token = "0x600058B")]
		[Address(RVA = "0x108FCE4", Offset = "0x108FCE4", VA = "0x108FCE4")]
		public static float DistancePoint2DToLine(Camera cam, Vector2 mousePosition, Vector3 worldPosition1, Vector3 worldPosition2)
		{
			return default(float);
		}

		[Token(Token = "0x600058C")]
		[Address(RVA = "0x108FD7C", Offset = "0x108FD7C", VA = "0x108FD7C")]
		public static bool PointIsOccluded(Camera cam, pb_Object pb, Vector3 worldPoint)
		{
			return default(bool);
		}

		[Token(Token = "0x600058D")]
		[Address(RVA = "0x1090328", Offset = "0x1090328", VA = "0x1090328")]
		public static bool IsOccluded(Camera cam, pb_Object pb, pb_Face face)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000137")]
	[AttributeUsage(AttributeTargets.Class, AllowMultiple = false, Inherited = true)]
	public class ProGridsNoSnapAttribute : Attribute
	{
		[Token(Token = "0x6000591")]
		[Address(RVA = "0x109051C", Offset = "0x109051C", VA = "0x109051C")]
		public ProGridsNoSnapAttribute()
		{
		}
	}
	[Token(Token = "0x2000138")]
	[AttributeUsage(AttributeTargets.Class, AllowMultiple = false, Inherited = true)]
	public class ProGridsConditionalSnapAttribute : Attribute
	{
		[Token(Token = "0x6000592")]
		[Address(RVA = "0x1090524", Offset = "0x1090524", VA = "0x1090524")]
		public ProGridsConditionalSnapAttribute()
		{
		}
	}
	[Token(Token = "0x2000139")]
	public interface pb_IHasDefault
	{
		[Token(Token = "0x6000593")]
		void SetDefaultValues();
	}
	[Serializable]
	[Token(Token = "0x200013A")]
	public class pb_IntArray
	{
		[Token(Token = "0x400055C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int[] array;

		[Token(Token = "0x17000093")]
		public int this[int i]
		{
			[Token(Token = "0x6000597")]
			[Address(RVA = "0x1087D0C", Offset = "0x1087D0C", VA = "0x1087D0C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000598")]
			[Address(RVA = "0x1090610", Offset = "0x1090610", VA = "0x1090610")]
			set
			{
			}
		}

		[Token(Token = "0x17000094")]
		public int Length
		{
			[Token(Token = "0x6000599")]
			[Address(RVA = "0x1090640", Offset = "0x1090640", VA = "0x1090640")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000594")]
		[Address(RVA = "0x109052C", Offset = "0x109052C", VA = "0x109052C")]
		public List<int> ToList()
		{
			return null;
		}

		[Token(Token = "0x6000595")]
		[Address(RVA = "0x10905A8", Offset = "0x10905A8", VA = "0x10905A8")]
		public pb_IntArray(int[] intArray)
		{
		}

		[Token(Token = "0x6000596")]
		[Address(RVA = "0x10905D8", Offset = "0x10905D8", VA = "0x10905D8")]
		public pb_IntArray(pb_IntArray intArray)
		{
		}

		[Token(Token = "0x600059A")]
		[Address(RVA = "0x109065C", Offset = "0x109065C", VA = "0x109065C")]
		public static implicit operator int[](pb_IntArray intArr)
		{
			return null;
		}

		[Token(Token = "0x600059B")]
		[Address(RVA = "0x1090674", Offset = "0x1090674", VA = "0x1090674")]
		public static explicit operator pb_IntArray(int[] arr)
		{
			return null;
		}

		[Token(Token = "0x600059C")]
		[Address(RVA = "0x10906E4", Offset = "0x10906E4", VA = "0x10906E4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x600059D")]
		[Address(RVA = "0x109074C", Offset = "0x109074C", VA = "0x109074C")]
		public bool IsEmpty()
		{
			return default(bool);
		}

		[Token(Token = "0x600059E")]
		[Address(RVA = "0x109076C", Offset = "0x109076C", VA = "0x109076C")]
		public static void RemoveEmptyOrNull(ref pb_IntArray[] val)
		{
		}
	}
	[Token(Token = "0x200013B")]
	public static class pb_IntArrayUtility
	{
		[Token(Token = "0x600059F")]
		[Address(RVA = "0x10908DC", Offset = "0x10908DC", VA = "0x10908DC")]
		public static int[][] ToArray(this pb_IntArray[] val)
		{
			return null;
		}

		[Token(Token = "0x60005A0")]
		[Address(RVA = "0x1087B2C", Offset = "0x1087B2C", VA = "0x1087B2C")]
		public static Dictionary<int, int> ToDictionary(this pb_IntArray[] array)
		{
			return null;
		}

		[Token(Token = "0x60005A1")]
		[Address(RVA = "0x10909C8", Offset = "0x10909C8", VA = "0x10909C8")]
		public static pb_IntArray[] ToSharedIndices(this IEnumerable<KeyValuePair<int, int>> lookup)
		{
			return null;
		}

		[Token(Token = "0x60005A2")]
		[Address(RVA = "0x10911F0", Offset = "0x10911F0", VA = "0x10911F0")]
		public static pb_IntArray[] ToPbIntArray(this int[][] val)
		{
			return null;
		}

		[Token(Token = "0x60005A3")]
		[Address(RVA = "0x10910B0", Offset = "0x10910B0", VA = "0x10910B0")]
		public static pb_IntArray[] ToPbIntArray(this List<List<int>> val)
		{
			return null;
		}

		[Token(Token = "0x60005A4")]
		[Address(RVA = "0x10912EC", Offset = "0x10912EC", VA = "0x10912EC")]
		public static List<List<int>> ToList(this pb_IntArray[] val)
		{
			return null;
		}

		[Token(Token = "0x60005A5")]
		[Address(RVA = "0x1091418", Offset = "0x1091418", VA = "0x1091418")]
		public static string ToFormattedString(this pb_IntArray[] arr)
		{
			return null;
		}

		[Token(Token = "0x60005A6")]
		[Address(RVA = "0x1091554", Offset = "0x1091554", VA = "0x1091554")]
		public static int IndexOf(this int[] array, int val, pb_IntArray[] sharedIndices)
		{
			return default(int);
		}

		[Token(Token = "0x60005A7")]
		[Address(RVA = "0x109162C", Offset = "0x109162C", VA = "0x109162C")]
		public static int IndexOf(this IList<int> indices, int triangle, ref Dictionary<int, int> lookup)
		{
			return default(int);
		}

		[Token(Token = "0x60005A8")]
		[Address(RVA = "0x10878EC", Offset = "0x10878EC", VA = "0x10878EC")]
		public static int IndexOf(this pb_IntArray[] intArray, int index)
		{
			return default(int);
		}

		[Token(Token = "0x60005A9")]
		[Address(RVA = "0x1091784", Offset = "0x1091784", VA = "0x1091784")]
		public static IList<int> AllIndicesWithValues(this pb_IntArray[] pbIntArr, IList<int> indices)
		{
			return null;
		}

		[Token(Token = "0x60005AA")]
		[Address(RVA = "0x10918B0", Offset = "0x10918B0", VA = "0x10918B0")]
		public static IList<int> AllIndicesWithValues(this pb_IntArray[] pbIntArr, Dictionary<int, int> lookup, IList<int> indices)
		{
			return null;
		}

		[Token(Token = "0x60005AB")]
		[Address(RVA = "0x1091D54", Offset = "0x1091D54", VA = "0x1091D54")]
		public static IList<int> UniqueIndicesWithValues(this pb_IntArray[] pbIntArr, IList<int> indices)
		{
			return null;
		}

		[Token(Token = "0x60005AC")]
		[Address(RVA = "0x108B14C", Offset = "0x108B14C", VA = "0x108B14C")]
		public static HashSet<int> GetCommonIndices(this pb_IntArray[] pbIntArr, IList<int> indices)
		{
			return null;
		}

		[Token(Token = "0x60005AD")]
		[Address(RVA = "0x10919E4", Offset = "0x10919E4", VA = "0x10919E4")]
		public static HashSet<int> GetCommonIndices(Dictionary<int, int> lookup, IList<int> indices)
		{
			return null;
		}

		[Token(Token = "0x60005AE")]
		[Address(RVA = "0x10922BC", Offset = "0x10922BC", VA = "0x10922BC")]
		public static IEnumerable<int> GetIndicesWithCommon(this pb_IntArray[] pbIntArr, IEnumerable<int> common)
		{
			return null;
		}

		[Token(Token = "0x60005AF")]
		[Address(RVA = "0x10923A4", Offset = "0x10923A4", VA = "0x10923A4")]
		public static pb_IntArray[] ExtractSharedIndices(Vector3[] v)
		{
			return null;
		}

		[Token(Token = "0x60005B0")]
		[Address(RVA = "0x1092838", Offset = "0x1092838", VA = "0x1092838")]
		public static int MergeSharedIndices(ref pb_IntArray[] sharedIndices, int[] indices)
		{
			return default(int);
		}

		[Token(Token = "0x60005B1")]
		[Address(RVA = "0x1092C70", Offset = "0x1092C70", VA = "0x1092C70")]
		public static void MergeSharedIndices(ref pb_IntArray[] sharedIndices, int a, int b)
		{
		}

		[Token(Token = "0x60005B2")]
		[Address(RVA = "0x1092D68", Offset = "0x1092D68", VA = "0x1092D68")]
		public static int AddValueAtIndex(ref pb_IntArray[] sharedIndices, int sharedIndex, int value)
		{
			return default(int);
		}

		[Token(Token = "0x60005B3")]
		[Address(RVA = "0x1092EC0", Offset = "0x1092EC0", VA = "0x1092EC0")]
		public static int AddRangeAtIndex(ref pb_IntArray[] sharedIndices, int sharedIndex, int[] indices)
		{
			return default(int);
		}

		[Token(Token = "0x60005B4")]
		[Address(RVA = "0x1092FE4", Offset = "0x1092FE4", VA = "0x1092FE4")]
		public static void RemoveValues(ref pb_IntArray[] sharedIndices, int[] remove)
		{
		}

		[Token(Token = "0x60005B5")]
		[Address(RVA = "0x109312C", Offset = "0x109312C", VA = "0x109312C")]
		public static void RemoveValuesAndShift(ref pb_IntArray[] sharedIndices, IEnumerable<int> remove)
		{
		}
	}
	[Token(Token = "0x200013E")]
	[ExecuteInEditMode]
	[AddComponentMenu("")]
	public class pb_LineRenderer : pb_MonoBehaviourSingleton<pb_LineRenderer>
	{
		[Token(Token = "0x4000560")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private HideFlags SceneCameraHideFlags;

		[Token(Token = "0x4000561")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private pb_ObjectPool<Mesh> pool;

		[Token(Token = "0x4000562")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public List<Mesh> gizmos;

		[Token(Token = "0x4000563")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[HideInInspector]
		public Material mat;

		[Token(Token = "0x60005BB")]
		[Address(RVA = "0x1093768", Offset = "0x1093768", VA = "0x1093768")]
		private static Mesh MeshConstructor()
		{
			return null;
		}

		[Token(Token = "0x60005BC")]
		[Address(RVA = "0x1093824", Offset = "0x1093824", VA = "0x1093824", Slot = "5")]
		public override void OnEnable()
		{
		}

		[Token(Token = "0x60005BD")]
		[Address(RVA = "0x1093954", Offset = "0x1093954", VA = "0x1093954")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60005BE")]
		[Address(RVA = "0x10939A4", Offset = "0x10939A4", VA = "0x10939A4", Slot = "4")]
		public override void Awake()
		{
		}

		[Token(Token = "0x60005BF")]
		[Address(RVA = "0x1093B18", Offset = "0x1093B18", VA = "0x1093B18")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60005C0")]
		[Address(RVA = "0x1093CC8", Offset = "0x1093CC8", VA = "0x1093CC8")]
		public void AddLineSegments(Vector3[] segments, Color[] colors)
		{
		}

		[Token(Token = "0x60005C1")]
		[Address(RVA = "0x1094078", Offset = "0x1094078", VA = "0x1094078")]
		public void Clear()
		{
		}

		[Token(Token = "0x60005C2")]
		[Address(RVA = "0x1094168", Offset = "0x1094168", VA = "0x1094168")]
		private void OnRenderObject()
		{
		}

		[Token(Token = "0x60005C3")]
		[Address(RVA = "0x10943D4", Offset = "0x10943D4", VA = "0x10943D4")]
		public pb_LineRenderer()
		{
		}
	}
	[Token(Token = "0x200013F")]
	[Flags]
	public enum pb_LogLevel
	{
		[Token(Token = "0x4000565")]
		None = 0,
		[Token(Token = "0x4000566")]
		Error = 1,
		[Token(Token = "0x4000567")]
		Warning = 2,
		[Token(Token = "0x4000568")]
		Info = 4,
		[Token(Token = "0x4000569")]
		All = 0xFF
	}
	[Token(Token = "0x2000140")]
	[Flags]
	public enum pb_LogOutput
	{
		[Token(Token = "0x400056B")]
		None = 0,
		[Token(Token = "0x400056C")]
		Console = 1,
		[Token(Token = "0x400056D")]
		File = 2
	}
	[Token(Token = "0x2000141")]
	public static class pb_Log
	{
		[Token(Token = "0x400056E")]
		public const string DEFAULT_LOG_PATH = "ProBuilderLog.txt";

		[Token(Token = "0x400056F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Stack<pb_LogLevel> m_logStack;

		[Token(Token = "0x4000570")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static pb_LogLevel m_LogLevel;

		[Token(Token = "0x4000571")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static pb_LogOutput m_Output;

		[Token(Token = "0x4000572")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static string m_LogFilePath;

		[Token(Token = "0x60005C4")]
		[Address(RVA = "0x1094478", Offset = "0x1094478", VA = "0x1094478")]
		public static void PushLogLevel(pb_LogLevel level)
		{
		}

		[Token(Token = "0x60005C5")]
		[Address(RVA = "0x1094508", Offset = "0x1094508", VA = "0x1094508")]
		public static void PopLogLevel()
		{
		}

		[Token(Token = "0x60005C6")]
		[Address(RVA = "0x1094590", Offset = "0x1094590", VA = "0x1094590")]
		public static void SetLogLevel(pb_LogLevel level)
		{
		}

		[Token(Token = "0x60005C7")]
		[Address(RVA = "0x10945EC", Offset = "0x10945EC", VA = "0x10945EC")]
		public static void SetOutput(pb_LogOutput output)
		{
		}

		[Token(Token = "0x60005C8")]
		[Address(RVA = "0x1094648", Offset = "0x1094648", VA = "0x1094648")]
		public static void SetLogFile(string path)
		{
		}

		[Token(Token = "0x60005C9")]
		public static void Debug<T>(T value)
		{
		}

		[Token(Token = "0x60005CA")]
		[Address(RVA = "0x10946A8", Offset = "0x10946A8", VA = "0x10946A8")]
		public static void Debug(string message)
		{
		}

		[Token(Token = "0x60005CB")]
		[Address(RVA = "0x10947D0", Offset = "0x10947D0", VA = "0x10947D0")]
		public static void Debug(string format, params object[] values)
		{
		}

		[Token(Token = "0x60005CC")]
		[Address(RVA = "0x1094848", Offset = "0x1094848", VA = "0x1094848")]
		public static void Info(string format, params object[] values)
		{
		}

		[Token(Token = "0x60005CD")]
		[Address(RVA = "0x10948C0", Offset = "0x10948C0", VA = "0x10948C0")]
		public static void Info(string message)
		{
		}

		[Token(Token = "0x60005CE")]
		[Address(RVA = "0x1094940", Offset = "0x1094940", VA = "0x1094940")]
		public static void Warning(string format, params object[] values)
		{
		}

		[Token(Token = "0x60005CF")]
		[Address(RVA = "0x10949B8", Offset = "0x10949B8", VA = "0x10949B8")]
		public static void Warning(string message)
		{
		}

		[Token(Token = "0x60005D0")]
		[Address(RVA = "0x1094A38", Offset = "0x1094A38", VA = "0x1094A38")]
		public static void Error(string format, params object[] values)
		{
		}

		[Token(Token = "0x60005D1")]
		[Address(RVA = "0x1094AB0", Offset = "0x1094AB0", VA = "0x1094AB0")]
		public static void Error(string message)
		{
		}

		[Token(Token = "0x60005D2")]
		public static void Watch<T, K>(T key, K value)
		{
		}

		[Token(Token = "0x60005D3")]
		[Address(RVA = "0x1094700", Offset = "0x1094700", VA = "0x1094700")]
		private static void DoPrint(string message, LogType type)
		{
		}

		[Token(Token = "0x60005D4")]
		[Address(RVA = "0x1094C04", Offset = "0x1094C04", VA = "0x1094C04")]
		public static void PrintToFile(string message, string path)
		{
		}

		[Token(Token = "0x60005D5")]
		[Address(RVA = "0x1094FDC", Offset = "0x1094FDC", VA = "0x1094FDC")]
		public static void ClearLogFile()
		{
		}

		[Token(Token = "0x60005D6")]
		[Address(RVA = "0x1094B30", Offset = "0x1094B30", VA = "0x1094B30")]
		public static void PrintToConsole(string message, LogType type = LogType.Log)
		{
		}
	}
	[Token(Token = "0x2000142")]
	public static class pb_Math
	{
		[Token(Token = "0x4000573")]
		public const float PHI = 1.618034f;

		[Token(Token = "0x4000574")]
		public const float FLT_EPSILON = float.Epsilon;

		[Token(Token = "0x4000575")]
		public const float FLT_COMPARE_EPSILON = 0.0001f;

		[Token(Token = "0x4000576")]
		public const float HANDLE_EPSILON = 0.0001f;

		[Token(Token = "0x4000577")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Vector3 tv1;

		[Token(Token = "0x4000578")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static Vector3 tv2;

		[Token(Token = "0x4000579")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static Vector3 tv3;

		[Token(Token = "0x400057A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private static Vector3 tv4;

		[Token(Token = "0x60005D8")]
		[Address(RVA = "0x1095138", Offset = "0x1095138", VA = "0x1095138")]
		public static Vector2 PointInCircumference(float radius, float angleInDegrees, Vector2 origin)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60005D9")]
		[Address(RVA = "0x1095194", Offset = "0x1095194", VA = "0x1095194")]
		public static Vector3 PointInSphere(float radius, float latitudeAngle, float longitudeAngle)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60005DA")]
		[Address(RVA = "0x109520C", Offset = "0x109520C", VA = "0x109520C")]
		public static float SignedAngle(Vector2 a, Vector2 b)
		{
			return default(float);
		}

		[Token(Token = "0x60005DB")]
		[Address(RVA = "0x1095310", Offset = "0x1095310", VA = "0x1095310")]
		public static float SqrDistance(Vector3 a, Vector3 b)
		{
			return default(float);
		}

		[Token(Token = "0x60005DC")]
		[Address(RVA = "0x1095334", Offset = "0x1095334", VA = "0x1095334")]
		public static float TriangleArea(Vector3 x, Vector3 y, Vector3 z)
		{
			return default(float);
		}

		[Token(Token = "0x60005DD")]
		[Address(RVA = "0x10953E8", Offset = "0x10953E8", VA = "0x10953E8")]
		public static float PolygonArea(Vector3[] vertices, int[] indices)
		{
			return default(float);
		}

		[Token(Token = "0x60005DE")]
		[Address(RVA = "0x10954F8", Offset = "0x10954F8", VA = "0x10954F8")]
		public static Vector2 RotateAroundPoint(this Vector2 v, Vector2 origin, float theta)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60005DF")]
		[Address(RVA = "0x1095568", Offset = "0x1095568", VA = "0x1095568")]
		public static Vector2 ScaleAroundPoint(this Vector2 v, Vector2 origin, Vector2 scale)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60005E0")]
		[Address(RVA = "0x1095584", Offset = "0x1095584", VA = "0x1095584")]
		public static Vector2 Perpendicular(Vector2 a, Vector2 b)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60005E1")]
		[Address(RVA = "0x1095654", Offset = "0x1095654", VA = "0x1095654")]
		public static Vector2 Perpendicular(Vector2 a)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60005E2")]
		[Address(RVA = "0x109570C", Offset = "0x109570C", VA = "0x109570C")]
		public static Vector2 ReflectPoint(Vector2 point, Vector2 a, Vector2 b)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60005E3")]
		[Address(RVA = "0x10901BC", Offset = "0x10901BC", VA = "0x10901BC")]
		public static float DistancePointLineSegment(Vector2 p, Vector2 v, Vector2 w)
		{
			return default(float);
		}

		[Token(Token = "0x60005E4")]
		[Address(RVA = "0x108FF8C", Offset = "0x108FF8C", VA = "0x108FF8C")]
		public static float DistancePointLineSegment(Vector3 p, Vector3 v, Vector3 w)
		{
			return default(float);
		}

		[Token(Token = "0x60005E5")]
		[Address(RVA = "0x1095898", Offset = "0x1095898", VA = "0x1095898")]
		public static Vector3 GetNearestPointRayRay(Vector3 ao, Vector3 ad, Vector3 bo, Vector3 bd)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60005E6")]
		[Address(RVA = "0x1095980", Offset = "0x1095980", VA = "0x1095980")]
		public static bool GetLineSegmentIntersect(Vector2 p0, Vector2 p1, Vector2 p2, Vector2 p3, ref Vector2 intersect)
		{
			return default(bool);
		}

		[Token(Token = "0x60005E7")]
		[Address(RVA = "0x1095A94", Offset = "0x1095A94", VA = "0x1095A94")]
		public static bool GetLineSegmentIntersect(Vector2 p0, Vector2 p1, Vector2 p2, Vector2 p3)
		{
			return default(bool);
		}

		[Token(Token = "0x60005E8")]
		[Address(RVA = "0x1095B0C", Offset = "0x1095B0C", VA = "0x1095B0C")]
		public static bool PointInPolygon(Vector2[] polygon, Vector2 point, [Optional] int[] indices)
		{
			return default(bool);
		}

		[Token(Token = "0x60005E9")]
		[Address(RVA = "0x1095D24", Offset = "0x1095D24", VA = "0x1095D24")]
		public static bool PointInPolygon(Vector2[] polygon, pb_Bounds2D polyBounds, pb_Edge[] edges, Vector2 point)
		{
			return default(bool);
		}

		[Token(Token = "0x60005EA")]
		[Address(RVA = "0x1095E48", Offset = "0x1095E48", VA = "0x1095E48")]
		public static bool RectIntersectsLineSegment(Rect rect, Vector2 a, Vector2 b)
		{
			return default(bool);
		}

		[Token(Token = "0x60005EB")]
		[Address(RVA = "0x108E698", Offset = "0x108E698", VA = "0x108E698")]
		public static bool RayIntersectsTriangle(Ray InRay, Vector3 InTriangleA, Vector3 InTriangleB, Vector3 InTriangleC, out float OutDistance, out Vector3 OutPoint)
		{
			return default(bool);
		}

		[Token(Token = "0x60005EC")]
		[Address(RVA = "0x108F30C", Offset = "0x108F30C", VA = "0x108F30C")]
		public static bool RayIntersectsTriangle2(Vector3 origin, Vector3 dir, Vector3 vert0, Vector3 vert1, Vector3 vert2, ref float distance, ref Vector3 normal)
		{
			return default(bool);
		}

		[Token(Token = "0x60005ED")]
		[Address(RVA = "0x1096014", Offset = "0x1096014", VA = "0x1096014")]
		public static float Secant(float x)
		{
			return default(float);
		}

		[Token(Token = "0x60005EE")]
		[Address(RVA = "0x109602C", Offset = "0x109602C", VA = "0x109602C")]
		public static Vector3 Normal(Vector3 p0, Vector3 p1, Vector3 p2)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60005EF")]
		[Address(RVA = "0x1096244", Offset = "0x1096244", VA = "0x1096244")]
		public static Vector3 Normal(IList<pb_Vertex> vertices, [Optional] IList<int> indices)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60005F0")]
		[Address(RVA = "0x10969C0", Offset = "0x10969C0", VA = "0x10969C0")]
		public static Vector3 Normal(pb_Object pb, pb_Face face)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60005F1")]
		[Address(RVA = "0x1096B70", Offset = "0x1096B70", VA = "0x1096B70")]
		public static Vector3 Normal(IList<Vector3> p)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60005F2")]
		[Address(RVA = "0x1097218", Offset = "0x1097218", VA = "0x1097218")]
		public static void NormalTangentBitangent(pb_Object pb, pb_Face face, out Vector3 normal, out Vector3 tangent, out Vector3 bitangent)
		{
		}

		[Token(Token = "0x60005F3")]
		[Address(RVA = "0x10975DC", Offset = "0x10975DC", VA = "0x10975DC")]
		public static bool IsCardinalAxis(Vector3 v, float epsilon = 1E-05f)
		{
			return default(bool);
		}

		[Token(Token = "0x60005F4")]
		public static T Max<T>(T[] array) where T : IComparable<T>
		{
			return (T)null;
		}

		[Token(Token = "0x60005F5")]
		public static T Min<T>(T[] array) where T : IComparable<T>
		{
			return (T)null;
		}

		[Token(Token = "0x60005F6")]
		[Address(RVA = "0x10977C0", Offset = "0x10977C0", VA = "0x10977C0")]
		public static float LargestValue(Vector3 v)
		{
			return default(float);
		}

		[Token(Token = "0x60005F7")]
		[Address(RVA = "0x10977E4", Offset = "0x10977E4", VA = "0x10977E4")]
		public static float LargestValue(Vector2 v)
		{
			return default(float);
		}

		[Token(Token = "0x60005F8")]
		[Address(RVA = "0x10977F0", Offset = "0x10977F0", VA = "0x10977F0")]
		public static Vector2 SmallestVector2(Vector2[] v)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60005F9")]
		[Address(RVA = "0x1097844", Offset = "0x1097844", VA = "0x1097844")]
		public static Vector2 SmallestVector2(Vector2[] v, int[] indices)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60005FA")]
		[Address(RVA = "0x10978C0", Offset = "0x10978C0", VA = "0x10978C0")]
		public static Vector2 LargestVector2(Vector2[] v)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60005FB")]
		[Address(RVA = "0x1097914", Offset = "0x1097914", VA = "0x1097914")]
		public static Vector2 LargestVector2(Vector2[] v, int[] indices)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60005FC")]
		[Address(RVA = "0x1097990", Offset = "0x1097990", VA = "0x1097990")]
		public static Vector3 BoundsCenter(Vector3[] verts)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60005FD")]
		[Address(RVA = "0x1097A80", Offset = "0x1097A80", VA = "0x1097A80")]
		public static Vector2 Average(IList<Vector2> v, [Optional] IList<int> indices)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60005FE")]
		[Address(RVA = "0x1097D88", Offset = "0x1097D88", VA = "0x1097D88")]
		public static Vector3 Average(IList<Vector3> v, [Optional] IList<int> indices)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60005FF")]
		public static Vector3 Average<T>(this IList<T> v, Func<T, Vector3> selector, [Optional] IList<int> indices)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000600")]
		[Address(RVA = "0x10982E8", Offset = "0x10982E8", VA = "0x10982E8")]
		public static Vector4 Average(IList<Vector4> v, [Optional] IList<int> indices)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6000601")]
		[Address(RVA = "0x1098614", Offset = "0x1098614", VA = "0x1098614")]
		public static Color Average(IList<Color> c, [Optional] IList<int> indices)
		{
			return default(Color);
		}

		[Token(Token = "0x6000602")]
		[Address(RVA = "0x109896C", Offset = "0x109896C", VA = "0x109896C")]
		public static bool Approx2(this Vector2 v, Vector2 b, float delta = 0.0001f)
		{
			return default(bool);
		}

		[Token(Token = "0x6000603")]
		[Address(RVA = "0x1098990", Offset = "0x1098990", VA = "0x1098990")]
		public static bool Approx3(this Vector3 v, Vector3 b, float delta = 0.0001f)
		{
			return default(bool);
		}

		[Token(Token = "0x6000604")]
		[Address(RVA = "0x10989C0", Offset = "0x10989C0", VA = "0x10989C0")]
		public static bool Approx4(this Vector4 v, Vector4 b, float delta = 0.0001f)
		{
			return default(bool);
		}

		[Token(Token = "0x6000605")]
		[Address(RVA = "0x1098A00", Offset = "0x1098A00", VA = "0x1098A00")]
		public static bool ApproxC(this Color a, Color b, float delta = 0.0001f)
		{
			return default(bool);
		}

		[Token(Token = "0x6000606")]
		[Address(RVA = "0x1098A40", Offset = "0x1098A40", VA = "0x1098A40")]
		public static bool Approx(this float a, float b, float delta = 0.0001f)
		{
			return default(bool);
		}

		[Token(Token = "0x6000607")]
		[Address(RVA = "0x1098A54", Offset = "0x1098A54", VA = "0x1098A54")]
		public static bool ContainsApprox(Vector3[] v, Vector3 p, float eps)
		{
			return default(bool);
		}

		[Token(Token = "0x6000608")]
		[Address(RVA = "0x1098ADC", Offset = "0x1098ADC", VA = "0x1098ADC")]
		public static int Wrap(int value, int lowerBound, int upperBound)
		{
			return default(int);
		}

		[Token(Token = "0x6000609")]
		[Address(RVA = "0x1098B0C", Offset = "0x1098B0C", VA = "0x1098B0C")]
		public static int Clamp(int value, int lowerBound, int upperBound)
		{
			return default(int);
		}

		[Token(Token = "0x600060A")]
		[Address(RVA = "0x1098B28", Offset = "0x1098B28", VA = "0x1098B28")]
		public static Vector2 ToMask(this Vector2 vec, float delta = float.Epsilon)
		{
			return default(Vector2);
		}

		[Token(Token = "0x600060B")]
		[Address(RVA = "0x1098B4C", Offset = "0x1098B4C", VA = "0x1098B4C")]
		public static Vector3 ToMask(this Vector3 vec, float delta = float.Epsilon)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600060C")]
		[Address(RVA = "0x1098B7C", Offset = "0x1098B7C", VA = "0x1098B7C")]
		public static Vector3 ToSignedMask(this Vector3 vec, float delta = float.Epsilon)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600060D")]
		[Address(RVA = "0x1098BB4", Offset = "0x1098BB4", VA = "0x1098BB4")]
		public static Vector3 Abs(this Vector3 v)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600060E")]
		[Address(RVA = "0x1098BC4", Offset = "0x1098BC4", VA = "0x1098BC4")]
		public static int IntSum(this Vector3 mask)
		{
			return default(int);
		}

		[Token(Token = "0x600060F")]
		[Address(RVA = "0x1098C0C", Offset = "0x1098C0C", VA = "0x1098C0C")]
		public static void Cross(Vector3 a, Vector3 b, ref float x, ref float y, ref float z)
		{
		}

		[Token(Token = "0x6000610")]
		[Address(RVA = "0x1095FE4", Offset = "0x1095FE4", VA = "0x1095FE4")]
		public static void Cross(Vector3 a, Vector3 b, ref Vector3 res)
		{
		}

		[Token(Token = "0x6000611")]
		[Address(RVA = "0x1096210", Offset = "0x1096210", VA = "0x1096210")]
		public static void Cross(float ax, float ay, float az, float bx, float by, float bz, ref float x, ref float y, ref float z)
		{
		}

		[Token(Token = "0x6000612")]
		[Address(RVA = "0x1095FCC", Offset = "0x1095FCC", VA = "0x1095FCC")]
		public static void Subtract(Vector3 a, Vector3 b, ref Vector3 res)
		{
		}
	}
	[Token(Token = "0x2000143")]
	public static class pb_MeshCompiler
	{
		[Token(Token = "0x6000613")]
		[Address(RVA = "0x1098C40", Offset = "0x1098C40", VA = "0x1098C40")]
		public static void Compile(pb_Object pb, ref Mesh target, out Material[] materials, MeshTopology preferredTopology = MeshTopology.Triangles)
		{
		}

		[Token(Token = "0x6000614")]
		[Address(RVA = "0x1098FB4", Offset = "0x1098FB4", VA = "0x1098FB4")]
		internal static Vector2[] GetUVs(pb_Object pb)
		{
			return null;
		}
	}
	[Token(Token = "0x2000145")]
	[ExecuteInEditMode]
	[AddComponentMenu("")]
	public class pb_MeshRenderer : pb_MonoBehaviourSingleton<pb_MeshRenderer>
	{
		[Token(Token = "0x400057D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private HashSet<pb_Renderable> m_Renderables;

		[Token(Token = "0x400057E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly HideFlags SceneCameraHideFlags;

		[Token(Token = "0x6000618")]
		[Address(RVA = "0x109A448", Offset = "0x109A448", VA = "0x109A448")]
		private int clamp(int val, int min, int max)
		{
			return default(int);
		}

		[Token(Token = "0x6000619")]
		[Address(RVA = "0x1089D0C", Offset = "0x1089D0C", VA = "0x1089D0C")]
		public static void Add(pb_Renderable renderable)
		{
		}

		[Token(Token = "0x600061A")]
		[Address(RVA = "0x108A0AC", Offset = "0x108A0AC", VA = "0x108A0AC")]
		public static void Remove(pb_Renderable renderable)
		{
		}

		[Token(Token = "0x600061B")]
		[Address(RVA = "0x109A464", Offset = "0x109A464", VA = "0x109A464")]
		private void OnRenderObject()
		{
		}

		[Token(Token = "0x600061C")]
		[Address(RVA = "0x109A948", Offset = "0x109A948", VA = "0x109A948")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600061D")]
		[Address(RVA = "0x109AAA8", Offset = "0x109AAA8", VA = "0x109AAA8")]
		public pb_MeshRenderer()
		{
		}
	}
	[Token(Token = "0x2000146")]
	public class pb_MeshUtility
	{
		[Token(Token = "0x600061E")]
		[Address(RVA = "0x109AB4C", Offset = "0x109AB4C", VA = "0x109AB4C")]
		public static pb_Vertex[] GeneratePerTriangleMesh(Mesh m)
		{
			return null;
		}

		[Token(Token = "0x600061F")]
		[Address(RVA = "0x109AE3C", Offset = "0x109AE3C", VA = "0x109AE3C")]
		public static void CollapseSharedVertices(Mesh m, [Optional] pb_Vertex[] vertices)
		{
		}

		[Token(Token = "0x6000620")]
		[Address(RVA = "0x1099EEC", Offset = "0x1099EEC", VA = "0x1099EEC")]
		public static void GenerateTangent(ref Mesh InMesh)
		{
		}

		[Token(Token = "0x6000621")]
		[Address(RVA = "0x109B2B4", Offset = "0x109B2B4", VA = "0x109B2B4")]
		public static Mesh DeepCopy(Mesh mesh)
		{
			return null;
		}

		[Token(Token = "0x6000622")]
		[Address(RVA = "0x109B320", Offset = "0x109B320", VA = "0x109B320")]
		public static void CopyTo(Mesh source, Mesh destination)
		{
		}

		[Token(Token = "0x6000623")]
		[Address(RVA = "0x10997DC", Offset = "0x10997DC", VA = "0x10997DC")]
		public static Vector3[] GenerateNormals(pb_Object pb)
		{
			return null;
		}

		[Token(Token = "0x6000624")]
		[Address(RVA = "0x1099B3C", Offset = "0x1099B3C", VA = "0x1099B3C")]
		public static void SmoothNormals(pb_Object pb, ref Vector3[] normals)
		{
		}

		[Token(Token = "0x6000625")]
		public static T GetMeshAttribute<T>(GameObject go, Func<Mesh, T> attributeGetter) where T : IList
		{
			return (T)null;
		}

		[Token(Token = "0x6000626")]
		[Address(RVA = "0x109B714", Offset = "0x109B714", VA = "0x109B714")]
		public static string Print(Mesh m)
		{
			return null;
		}

		[Token(Token = "0x6000627")]
		[Address(RVA = "0x109CCB0", Offset = "0x109CCB0", VA = "0x109CCB0")]
		public pb_MeshUtility()
		{
		}
	}
	[Token(Token = "0x2000148")]
	public class pb_MonoBehaviourSingleton<T> : MonoBehaviour where T : MonoBehaviour
	{
		[Token(Token = "0x4000581")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static MonoBehaviour _instance;

		[Token(Token = "0x17000095")]
		public static T instance
		{
			[Token(Token = "0x600062B")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000096")]
		public static T nullableInstance
		{
			[Token(Token = "0x600062C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600062D")]
		public static bool Valid()
		{
			return default(bool);
		}

		[Token(Token = "0x600062E")]
		public virtual void Awake()
		{
		}

		[Token(Token = "0x600062F")]
		public virtual void OnEnable()
		{
		}

		[Token(Token = "0x6000630")]
		public pb_MonoBehaviourSingleton()
		{
		}
	}
	[Token(Token = "0x2000149")]
	public class pb_ObjectPool<T> where T : UnityEngine.Object, new()
	{
		[Token(Token = "0x4000582")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int desiredSize;

		[Token(Token = "0x4000583")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Func<T> constructor;

		[Token(Token = "0x4000584")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Action<T> destructor;

		[Token(Token = "0x4000585")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Queue pool;

		[Token(Token = "0x6000631")]
		public pb_ObjectPool(int initialSize, int desiredSize, Func<T> constructor, Action<T> destructor)
		{
		}

		[Token(Token = "0x6000632")]
		public T Get()
		{
			return null;
		}

		[Token(Token = "0x6000633")]
		public void Put(T obj)
		{
		}

		[Token(Token = "0x6000634")]
		public void Empty()
		{
		}

		[Token(Token = "0x6000635")]
		private static void DestroyObject(T obj)
		{
		}

		[Token(Token = "0x6000636")]
		private void OnDestroy()
		{
		}
	}
	[Token(Token = "0x200014A")]
	public static class pb_Object_Utility
	{
		[Token(Token = "0x6000637")]
		[Address(RVA = "0x109DD80", Offset = "0x109DD80", VA = "0x109DD80")]
		public static Vector3[] VerticesInWorldSpace(this pb_Object pb)
		{
			return null;
		}

		[Token(Token = "0x6000638")]
		[Address(RVA = "0x109DE68", Offset = "0x109DE68", VA = "0x109DE68")]
		public static Vector3[] VerticesInWorldSpace(this pb_Object pb, int[] indices)
		{
			return null;
		}

		[Token(Token = "0x6000639")]
		[Address(RVA = "0x109DF90", Offset = "0x109DF90", VA = "0x109DF90")]
		public static void TranslateVertices_World(this pb_Object pb, int[] selectedTriangles, Vector3 offset)
		{
		}

		[Token(Token = "0x600063A")]
		[Address(RVA = "0x109DFA0", Offset = "0x109DFA0", VA = "0x109DFA0")]
		public static void TranslateVertices_World(this pb_Object pb, int[] selectedTriangles, Vector3 offset, float snapValue, bool snapAxisOnly, Dictionary<int, int> lookup)
		{
		}

		[Token(Token = "0x600063B")]
		[Address(RVA = "0x109E524", Offset = "0x109E524", VA = "0x109E524")]
		public static void TranslateVertices(this pb_Object pb, int[] selectedTriangles, Vector3 offset)
		{
		}

		[Token(Token = "0x600063C")]
		[Address(RVA = "0x109E648", Offset = "0x109E648", VA = "0x109E648")]
		public static void SetSharedVertexPosition(this pb_Object pb, int sharedIndex, Vector3 position)
		{
		}

		[Token(Token = "0x600063D")]
		[Address(RVA = "0x109E70C", Offset = "0x109E70C", VA = "0x109E70C")]
		public static void SetSharedVertexValues(this pb_Object pb, int sharedIndex, pb_Vertex vertex)
		{
		}

		[Token(Token = "0x600063E")]
		[Address(RVA = "0x109E804", Offset = "0x109E804", VA = "0x109E804")]
		public static bool FaceWithTriangle(this pb_Object pb, int[] tri, out pb_Face face)
		{
			return default(bool);
		}

		[Token(Token = "0x600063F")]
		[Address(RVA = "0x109E8C8", Offset = "0x109E8C8", VA = "0x109E8C8")]
		public static bool FaceWithTriangle(this pb_Object pb, int[] tri, out int face)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200014B")]
	[ProGridsConditionalSnap]
	[DisallowMultipleComponent]
	[AddComponentMenu("")]
	public class pb_PolyShape : MonoBehaviour
	{
		[Token(Token = "0x200014C")]
		public enum PolyEditMode
		{
			[Token(Token = "0x400058D")]
			None,
			[Token(Token = "0x400058E")]
			Path,
			[Token(Token = "0x400058F")]
			Height,
			[Token(Token = "0x4000590")]
			Edit
		}

		[Token(Token = "0x4000586")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<Vector3> points;

		[Token(Token = "0x4000587")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float extrude;

		[Token(Token = "0x4000588")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public PolyEditMode polyEditMode;

		[Token(Token = "0x4000589")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool flipNormals;

		[Token(Token = "0x400058A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private pb_Object m_Mesh;

		[Token(Token = "0x400058B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool isOnGrid;

		[Token(Token = "0x17000097")]
		public pb_Object mesh
		{
			[Token(Token = "0x6000640")]
			[Address(RVA = "0x109E954", Offset = "0x109E954", VA = "0x109E954")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000641")]
			[Address(RVA = "0x109E9FC", Offset = "0x109E9FC", VA = "0x109E9FC")]
			set
			{
			}
		}

		[Token(Token = "0x6000642")]
		[Address(RVA = "0x109EA04", Offset = "0x109EA04", VA = "0x109EA04")]
		private bool IsSnapEnabled()
		{
			return default(bool);
		}

		[Token(Token = "0x6000643")]
		[Address(RVA = "0x109EA0C", Offset = "0x109EA0C", VA = "0x109EA0C")]
		public pb_PolyShape()
		{
		}
	}
	[Token(Token = "0x200014D")]
	public class pb_PreferenceDictionary : ScriptableObject, IEnumerable, ISerializationCallbackReceiver, pb_IHasDefault
	{
		[Token(Token = "0x4000591")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Dictionary<string, bool> m_Bool;

		[Token(Token = "0x4000592")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Dictionary<string, int> m_Int;

		[Token(Token = "0x4000593")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Dictionary<string, float> m_Float;

		[Token(Token = "0x4000594")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Dictionary<string, string> m_String;

		[Token(Token = "0x4000595")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Dictionary<string, Color> m_Color;

		[Token(Token = "0x4000596")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Dictionary<string, Material> m_Material;

		[Token(Token = "0x4000597")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private List<string> m_Bool_keys;

		[Token(Token = "0x4000598")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private List<string> m_Int_keys;

		[Token(Token = "0x4000599")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private List<string> m_Float_keys;

		[Token(Token = "0x400059A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private List<string> m_String_keys;

		[Token(Token = "0x400059B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private List<string> m_Color_keys;

		[Token(Token = "0x400059C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private List<string> m_Material_keys;

		[Token(Token = "0x400059D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private List<bool> m_Bool_values;

		[Token(Token = "0x400059E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private List<int> m_Int_values;

		[Token(Token = "0x400059F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private List<float> m_Float_values;

		[Token(Token = "0x40005A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		private List<string> m_String_values;

		[Token(Token = "0x40005A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		private List<Color> m_Color_values;

		[Token(Token = "0x40005A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		private List<Material> m_Material_values;

		[Token(Token = "0x17000098")]
		public int Length
		{
			[Token(Token = "0x6000646")]
			[Address(RVA = "0x109F204", Offset = "0x109F204", VA = "0x109F204")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000644")]
		[Address(RVA = "0x109EA9C", Offset = "0x109EA9C", VA = "0x109EA9C", Slot = "5")]
		public void OnBeforeSerialize()
		{
		}

		[Token(Token = "0x6000645")]
		[Address(RVA = "0x109EE3C", Offset = "0x109EE3C", VA = "0x109EE3C", Slot = "6")]
		public void OnAfterDeserialize()
		{
		}

		[Token(Token = "0x6000647")]
		[Address(RVA = "0x109F20C", Offset = "0x109F20C", VA = "0x109F20C", Slot = "4")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000648")]
		[Address(RVA = "0x109F210", Offset = "0x109F210", VA = "0x109F210")]
		public pb_PreferenceDictionaryEnumerator GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000649")]
		[Address(RVA = "0x109F2C0", Offset = "0x109F2C0", VA = "0x109F2C0", Slot = "7")]
		public void SetDefaultValues()
		{
		}

		[Token(Token = "0x600064A")]
		[Address(RVA = "0x109F3C4", Offset = "0x109F3C4", VA = "0x109F3C4")]
		public bool HasKey(string key)
		{
			return default(bool);
		}

		[Token(Token = "0x600064B")]
		public bool HasKey<T>(string key)
		{
			return default(bool);
		}

		[Token(Token = "0x600064C")]
		[Address(RVA = "0x109F508", Offset = "0x109F508", VA = "0x109F508")]
		public void DeleteKey(string key)
		{
		}

		[Token(Token = "0x600064D")]
		public T Get<T>(string key, [Optional] T fallback)
		{
			return (T)null;
		}

		[Token(Token = "0x600064E")]
		public void Set<T>(string key, T value)
		{
		}

		[Token(Token = "0x600064F")]
		[Address(RVA = "0x109F73C", Offset = "0x109F73C", VA = "0x109F73C")]
		public bool GetBool(string key, bool fallback = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6000650")]
		[Address(RVA = "0x109F7C4", Offset = "0x109F7C4", VA = "0x109F7C4")]
		public int GetInt(string key, int fallback = 0)
		{
			return default(int);
		}

		[Token(Token = "0x6000651")]
		[Address(RVA = "0x109F840", Offset = "0x109F840", VA = "0x109F840")]
		public float GetFloat(string key, float fallback = 0f)
		{
			return default(float);
		}

		[Token(Token = "0x6000652")]
		[Address(RVA = "0x109F8BC", Offset = "0x109F8BC", VA = "0x109F8BC")]
		public string GetString(string key, [Optional] string fallback)
		{
			return null;
		}

		[Token(Token = "0x6000653")]
		[Address(RVA = "0x109F938", Offset = "0x109F938", VA = "0x109F938")]
		public Color GetColor(string key, [Optional] Color fallback)
		{
			return default(Color);
		}

		[Token(Token = "0x6000654")]
		[Address(RVA = "0x109F9E0", Offset = "0x109F9E0", VA = "0x109F9E0")]
		public Material GetMaterial(string key, [Optional] Material fallback)
		{
			return null;
		}

		[Token(Token = "0x6000655")]
		[Address(RVA = "0x109FA5C", Offset = "0x109FA5C", VA = "0x109FA5C")]
		public void SetBool(string key, bool value)
		{
		}

		[Token(Token = "0x6000656")]
		[Address(RVA = "0x109FB28", Offset = "0x109FB28", VA = "0x109FB28")]
		public void SetInt(string key, int value)
		{
		}

		[Token(Token = "0x6000657")]
		[Address(RVA = "0x109FBF4", Offset = "0x109FBF4", VA = "0x109FBF4")]
		public void SetFloat(string key, float value)
		{
		}

		[Token(Token = "0x6000658")]
		[Address(RVA = "0x109FCC0", Offset = "0x109FCC0", VA = "0x109FCC0")]
		public void SetString(string key, string value)
		{
		}

		[Token(Token = "0x6000659")]
		[Address(RVA = "0x109FD8C", Offset = "0x109FD8C", VA = "0x109FD8C")]
		public void SetColor(string key, Color value)
		{
		}

		[Token(Token = "0x600065A")]
		[Address(RVA = "0x109FE88", Offset = "0x109FE88", VA = "0x109FE88")]
		public void SetMaterial(string key, Material value)
		{
		}

		[Token(Token = "0x600065B")]
		[Address(RVA = "0x109FF54", Offset = "0x109FF54", VA = "0x109FF54")]
		public Dictionary<string, bool> GetBoolDictionary()
		{
			return null;
		}

		[Token(Token = "0x600065C")]
		[Address(RVA = "0x109FF5C", Offset = "0x109FF5C", VA = "0x109FF5C")]
		public Dictionary<string, int> GetIntDictionary()
		{
			return null;
		}

		[Token(Token = "0x600065D")]
		[Address(RVA = "0x109FF64", Offset = "0x109FF64", VA = "0x109FF64")]
		public Dictionary<string, float> GetFloatDictionary()
		{
			return null;
		}

		[Token(Token = "0x600065E")]
		[Address(RVA = "0x109FF6C", Offset = "0x109FF6C", VA = "0x109FF6C")]
		public Dictionary<string, string> GetStringDictionary()
		{
			return null;
		}

		[Token(Token = "0x600065F")]
		[Address(RVA = "0x109FF74", Offset = "0x109FF74", VA = "0x109FF74")]
		public Dictionary<string, Color> GetColorDictionary()
		{
			return null;
		}

		[Token(Token = "0x6000660")]
		[Address(RVA = "0x109FF7C", Offset = "0x109FF7C", VA = "0x109FF7C")]
		public Dictionary<string, Material> GetMaterialDictionary()
		{
			return null;
		}

		[Token(Token = "0x6000661")]
		[Address(RVA = "0x109FF84", Offset = "0x109FF84", VA = "0x109FF84")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000662")]
		[Address(RVA = "0x10A0064", Offset = "0x10A0064", VA = "0x10A0064")]
		public pb_PreferenceDictionary()
		{
		}
	}
	[Token(Token = "0x200014E")]
	public class pb_PreferenceDictionaryEnumerator : IEnumerator
	{
		[Token(Token = "0x40005A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int m_Position;

		[Token(Token = "0x40005A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private pb_PreferenceDictionary m_Preferences;

		[Token(Token = "0x17000099")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000666")]
			[Address(RVA = "0x10A02B4", Offset = "0x10A02B4", VA = "0x10A02B4", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700009A")]
		public IEnumerable Current
		{
			[Token(Token = "0x6000667")]
			[Address(RVA = "0x10A02B8", Offset = "0x10A02B8", VA = "0x10A02B8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000663")]
		[Address(RVA = "0x109F288", Offset = "0x109F288", VA = "0x109F288")]
		public pb_PreferenceDictionaryEnumerator(pb_PreferenceDictionary dictionary)
		{
		}

		[Token(Token = "0x6000664")]
		[Address(RVA = "0x10A027C", Offset = "0x10A027C", VA = "0x10A027C", Slot = "4")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000665")]
		[Address(RVA = "0x10A02A8", Offset = "0x10A02A8", VA = "0x10A02A8", Slot = "6")]
		public void Reset()
		{
		}
	}
	[Token(Token = "0x200014F")]
	public static class pb_Projection
	{
		[Token(Token = "0x40005A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Vector3 t_uaxis;

		[Token(Token = "0x40005A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static Vector3 t_vaxis;

		[Token(Token = "0x6000668")]
		[Address(RVA = "0x10A0384", Offset = "0x10A0384", VA = "0x10A0384")]
		public static Vector2[] PlanarProject(IList<Vector3> verts, Vector3 planeNormal)
		{
			return null;
		}

		[Token(Token = "0x6000669")]
		[Address(RVA = "0x10A0878", Offset = "0x10A0878", VA = "0x10A0878")]
		public static Vector2[] PlanarProject(pb_Object pb, pb_Face face)
		{
			return null;
		}

		[Token(Token = "0x600066A")]
		[Address(RVA = "0x10A0930", Offset = "0x10A0930", VA = "0x10A0930")]
		public static Vector2[] PlanarProject(IList<pb_Vertex> vertices, IList<int> indices)
		{
			return null;
		}

		[Token(Token = "0x600066B")]
		[Address(RVA = "0x10A049C", Offset = "0x10A049C", VA = "0x10A049C")]
		public static Vector2[] PlanarProject(Vector3[] verts, Vector3 planeNormal, ProjectionAxis projectionAxis, [Optional] int[] indices)
		{
			return null;
		}

		[Token(Token = "0x600066C")]
		[Address(RVA = "0x10A0BC8", Offset = "0x10A0BC8", VA = "0x10A0BC8")]
		public static void PlanarProject(Vector3[] verts, Vector2[] uvs, int[] indices, Vector3 planeNormal, ProjectionAxis projectionAxis)
		{
		}

		[Token(Token = "0x600066D")]
		[Address(RVA = "0x10A0FB8", Offset = "0x10A0FB8", VA = "0x10A0FB8")]
		public static Vector2[] SphericalProject(IList<Vector3> vertices, [Optional] IList<int> indices)
		{
			return null;
		}

		[Token(Token = "0x600066E")]
		[Address(RVA = "0x10A1384", Offset = "0x10A1384", VA = "0x10A1384")]
		public static IList<Vector2> Sort(IList<Vector2> verts, SortMethod method = SortMethod.CounterClockwise)
		{
			return null;
		}

		[Token(Token = "0x600066F")]
		[Address(RVA = "0x10A1894", Offset = "0x10A1894", VA = "0x10A1894")]
		public static Vector3 ProjectionAxisToVector(ProjectionAxis axis)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000670")]
		[Address(RVA = "0x10A0448", Offset = "0x10A0448", VA = "0x10A0448")]
		public static ProjectionAxis VectorToProjectionAxis(Vector3 plane)
		{
			return default(ProjectionAxis);
		}

		[Token(Token = "0x6000671")]
		public static Plane FindBestPlane<T>(IList<T> points, Func<T, Vector3> selector, [Optional] IList<int> indices)
		{
			return default(Plane);
		}

		[Token(Token = "0x6000672")]
		[Address(RVA = "0x10A1A70", Offset = "0x10A1A70", VA = "0x10A1A70")]
		public static Plane FindBestPlane(Vector3[] points, [Optional] int[] indices)
		{
			return default(Plane);
		}
	}
	[Token(Token = "0x2000151")]
	public static class pb_SelectionPicker
	{
		[Token(Token = "0x40005AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool m_Initialized;

		[Token(Token = "0x40005AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static RenderTextureFormat m_RenderTextureFormat;

		[Token(Token = "0x40005AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static RenderTextureFormat[] m_PreferredFormats;

		[Token(Token = "0x1700009B")]
		private static RenderTextureFormat renderTextureFormat
		{
			[Token(Token = "0x6000678")]
			[Address(RVA = "0x10A1FC4", Offset = "0x10A1FC4", VA = "0x10A1FC4")]
			get
			{
				return default(RenderTextureFormat);
			}
		}

		[Token(Token = "0x1700009C")]
		private static TextureFormat textureFormat
		{
			[Token(Token = "0x6000679")]
			[Address(RVA = "0x10A2120", Offset = "0x10A2120", VA = "0x10A2120")]
			get
			{
				return default(TextureFormat);
			}
		}

		[Token(Token = "0x600067A")]
		[Address(RVA = "0x10A2128", Offset = "0x10A2128", VA = "0x10A2128")]
		public static Dictionary<pb_Object, HashSet<pb_Face>> PickFacesInRect(Camera camera, Rect pickerRect, IEnumerable<pb_Object> selection, int renderTextureWidth = -1, int renderTextureHeight = -1)
		{
			return null;
		}

		[Token(Token = "0x600067B")]
		[Address(RVA = "0x10A2A38", Offset = "0x10A2A38", VA = "0x10A2A38")]
		public static Dictionary<pb_Object, HashSet<int>> PickVerticesInRect(Camera camera, Rect pickerRect, IEnumerable<pb_Object> selection, int renderTextureWidth = -1, int renderTextureHeight = -1)
		{
			return null;
		}

		[Token(Token = "0x600067C")]
		[Address(RVA = "0x10A2738", Offset = "0x10A2738", VA = "0x10A2738")]
		public static Texture2D RenderSelectionPickerTexture(Camera camera, IEnumerable<pb_Object> selection, out Dictionary<uint, pb_Tuple<pb_Object, pb_Face>> map, int width = -1, int height = -1)
		{
			return null;
		}

		[Token(Token = "0x600067D")]
		[Address(RVA = "0x10A300C", Offset = "0x10A300C", VA = "0x10A300C")]
		public static Texture2D RenderSelectionPickerTexture(Camera camera, IEnumerable<pb_Object> selection, out Dictionary<uint, pb_Tuple<pb_Object, int>> map, int width = -1, int height = -1)
		{
			return null;
		}

		[Token(Token = "0x600067E")]
		[Address(RVA = "0x10A3288", Offset = "0x10A3288", VA = "0x10A3288")]
		public static List<GameObject> GenerateFaceDepthTestMeshes(IEnumerable<pb_Object> selection, out Dictionary<uint, pb_Tuple<pb_Object, pb_Face>> map)
		{
			return null;
		}

		[Token(Token = "0x600067F")]
		[Address(RVA = "0x10A40F4", Offset = "0x10A40F4", VA = "0x10A40F4")]
		private static List<GameObject> GenerateVertexDepthTestMeshes(IEnumerable<pb_Object> selection, out Dictionary<uint, pb_Tuple<pb_Object, int>> map)
		{
			return null;
		}

		[Token(Token = "0x6000680")]
		[Address(RVA = "0x10A4A24", Offset = "0x10A4A24", VA = "0x10A4A24")]
		private static Mesh BuildVertexMesh(pb_Object pb, Dictionary<uint, pb_Tuple<pb_Object, int>> map, ref uint index)
		{
			return null;
		}

		[Token(Token = "0x6000681")]
		[Address(RVA = "0x10A29B4", Offset = "0x10A29B4", VA = "0x10A29B4")]
		public static uint DecodeRGBA(Color32 color)
		{
			return default(uint);
		}

		[Token(Token = "0x6000682")]
		[Address(RVA = "0x10A499C", Offset = "0x10A499C", VA = "0x10A499C")]
		public static Color32 EncodeRGBA(uint hash)
		{
			return default(Color32);
		}

		[Token(Token = "0x6000683")]
		[Address(RVA = "0x10A3D44", Offset = "0x10A3D44", VA = "0x10A3D44")]
		private static Texture2D RenderWithReplacementShader(Camera camera, Shader shader, string tag, int width = -1, int height = -1)
		{
			return null;
		}
	}
	[Token(Token = "0x2000153")]
	public class pb_ShapeGenerator
	{
		[Token(Token = "0x40005B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Vector3[] ICOSAHEDRON_VERTICES;

		[Token(Token = "0x40005B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly int[] ICOSAHEDRON_TRIANGLES;

		[Token(Token = "0x6000689")]
		[Address(RVA = "0x10A531C", Offset = "0x10A531C", VA = "0x10A531C")]
		public static pb_Object StairGenerator(Vector3 size, int steps, bool buildSides)
		{
			return null;
		}

		[Token(Token = "0x600068A")]
		[Address(RVA = "0x10A5D2C", Offset = "0x10A5D2C", VA = "0x10A5D2C")]
		public static pb_Object CurvedStairGenerator(float stairWidth, float height, float innerRadius, float circumference, int steps, bool buildSides)
		{
			return null;
		}

		[Token(Token = "0x600068B")]
		[Address(RVA = "0x10A6B1C", Offset = "0x10A6B1C", VA = "0x10A6B1C")]
		public static pb_Object StairGenerator(int steps, float width, float height, float depth, bool sidesGoToFloor, bool generateBack, bool platformsOnly)
		{
			return null;
		}

		[Token(Token = "0x600068C")]
		[Address(RVA = "0x10A6FC0", Offset = "0x10A6FC0", VA = "0x10A6FC0")]
		public static pb_Object CubeGenerator(Vector3 size)
		{
			return null;
		}

		[Token(Token = "0x600068D")]
		[Address(RVA = "0x10A7178", Offset = "0x10A7178", VA = "0x10A7178")]
		public static pb_Object CylinderGenerator(int axisDivisions, float radius, float height, int heightCuts, int smoothing = -1)
		{
			return null;
		}

		[Token(Token = "0x600068E")]
		[Address(RVA = "0x10A7AC8", Offset = "0x10A7AC8", VA = "0x10A7AC8")]
		public static pb_Object PrismGenerator(Vector3 size)
		{
			return null;
		}

		[Token(Token = "0x600068F")]
		[Address(RVA = "0x10A8180", Offset = "0x10A8180", VA = "0x10A8180")]
		public static pb_Object DoorGenerator(float totalWidth, float totalHeight, float ledgeHeight, float legWidth, float depth)
		{
			return null;
		}

		[Token(Token = "0x6000690")]
		[Address(RVA = "0x10A9828", Offset = "0x10A9828", VA = "0x10A9828")]
		public static pb_Object PlaneGenerator(float _width, float _height, int widthCuts, int heightCuts, Axis axis, bool smooth)
		{
			return null;
		}

		[Token(Token = "0x6000691")]
		[Address(RVA = "0x10A9F44", Offset = "0x10A9F44", VA = "0x10A9F44")]
		public static pb_Object PipeGenerator(float radius, float height, float thickness, int subdivAxis, int subdivHeight)
		{
			return null;
		}

		[Token(Token = "0x6000692")]
		[Address(RVA = "0x10AA628", Offset = "0x10AA628", VA = "0x10AA628")]
		public static pb_Object ConeGenerator(float radius, float height, int subdivAxis)
		{
			return null;
		}

		[Token(Token = "0x6000693")]
		[Address(RVA = "0x10AADD4", Offset = "0x10AADD4", VA = "0x10AADD4")]
		public static pb_Object ArchGenerator(float angle, float radius, float width, float depth, int radialCuts, bool insideFaces, bool outsideFaces, bool frontFaces, bool backFaces, bool endCaps)
		{
			return null;
		}

		[Token(Token = "0x6000694")]
		[Address(RVA = "0x10AB4FC", Offset = "0x10AB4FC", VA = "0x10AB4FC")]
		public static pb_Object IcosahedronGenerator(float radius, int subdivisions)
		{
			return null;
		}

		[Token(Token = "0x6000695")]
		[Address(RVA = "0x10ABC54", Offset = "0x10ABC54", VA = "0x10ABC54")]
		private static Vector3[] SubdivideIcosahedron(Vector3[] vertices, float radius)
		{
			return null;
		}

		[Token(Token = "0x6000696")]
		[Address(RVA = "0x10AC280", Offset = "0x10AC280", VA = "0x10AC280")]
		private static Vector3[] CircleVertices(int segments, float radius, float circumference, Quaternion rotation, float offset)
		{
			return null;
		}

		[Token(Token = "0x6000697")]
		[Address(RVA = "0x10AC610", Offset = "0x10AC610", VA = "0x10AC610")]
		public static pb_Object TorusGenerator(int InRows, int InColumns, float InRadius, float InTubeRadius, bool InSmooth, float InHorizontalCircumference, float InVerticalCircumference)
		{
			return null;
		}

		[Token(Token = "0x6000698")]
		[Address(RVA = "0x10ACC04", Offset = "0x10ACC04", VA = "0x10ACC04")]
		public pb_ShapeGenerator()
		{
		}
	}
	[Token(Token = "0x2000154")]
	public class pb_Shortcut
	{
		[Token(Token = "0x40005B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string action;

		[Token(Token = "0x40005B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string description;

		[Token(Token = "0x40005B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public KeyCode key;

		[Token(Token = "0x40005B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public EventModifiers eventModifiers;

		[Token(Token = "0x600069A")]
		[Address(RVA = "0x10ACE04", Offset = "0x10ACE04", VA = "0x10ACE04")]
		public pb_Shortcut(string a, string d, KeyCode k, EventModifiers e)
		{
		}

		[Token(Token = "0x600069B")]
		[Address(RVA = "0x10ACE60", Offset = "0x10ACE60", VA = "0x10ACE60")]
		public pb_Shortcut(string str)
		{
		}

		[Token(Token = "0x600069C")]
		[Address(RVA = "0x10AD01C", Offset = "0x10AD01C", VA = "0x10AD01C")]
		public bool Matches(KeyCode key, EventModifiers modifiers)
		{
			return default(bool);
		}

		[Token(Token = "0x600069D")]
		[Address(RVA = "0x10AD040", Offset = "0x10AD040", VA = "0x10AD040")]
		public static int IndexOf(pb_Shortcut[] shortcuts, KeyCode k, EventModifiers e)
		{
			return default(int);
		}

		[Token(Token = "0x600069E")]
		[Address(RVA = "0x10AD09C", Offset = "0x10AD09C", VA = "0x10AD09C")]
		public static IEnumerable<pb_Shortcut> DefaultShortcuts()
		{
			return null;
		}

		[Token(Token = "0x600069F")]
		[Address(RVA = "0x10ADAA4", Offset = "0x10ADAA4", VA = "0x10ADAA4")]
		public static IEnumerable<pb_Shortcut> ParseShortcuts(string str)
		{
			return null;
		}

		[Token(Token = "0x60006A0")]
		[Address(RVA = "0x10ADBF0", Offset = "0x10ADBF0", VA = "0x10ADBF0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60006A1")]
		[Address(RVA = "0x10ADDF8", Offset = "0x10ADDF8", VA = "0x10ADDF8")]
		public string Serialize()
		{
			return null;
		}

		[Token(Token = "0x60006A2")]
		[Address(RVA = "0x10AE134", Offset = "0x10AE134", VA = "0x10AE134")]
		public static string ShortcutsToString(pb_Shortcut[] shortcuts)
		{
			return null;
		}
	}
	[Token(Token = "0x2000155")]
	public static class pb_Smoothing
	{
		[Token(Token = "0x40005B6")]
		public const int SMOOTHING_GROUP_NONE = 0;

		[Token(Token = "0x40005B7")]
		public const int SMOOTH_RANGE_MIN = 1;

		[Token(Token = "0x40005B8")]
		public const int SMOOTH_RANGE_MAX = 24;

		[Token(Token = "0x40005B9")]
		public const int HARD_RANGE_MIN = 25;

		[Token(Token = "0x40005BA")]
		public const int HARD_RANGE_MAX = 42;

		[Token(Token = "0x60006A3")]
		[Address(RVA = "0x10AE214", Offset = "0x10AE214", VA = "0x10AE214")]
		public static int GetUnusedSmoothingGroup(pb_Object pb)
		{
			return default(int);
		}

		[Token(Token = "0x60006A4")]
		[Address(RVA = "0x10AE374", Offset = "0x10AE374", VA = "0x10AE374")]
		private static int GetNextUnusedSmoothingGroup(int start, HashSet<int> used)
		{
			return default(int);
		}

		[Token(Token = "0x60006A5")]
		[Address(RVA = "0x10AE41C", Offset = "0x10AE41C", VA = "0x10AE41C")]
		public static bool IsSmooth(int index)
		{
			return default(bool);
		}

		[Token(Token = "0x60006A6")]
		[Address(RVA = "0x10AE43C", Offset = "0x10AE43C", VA = "0x10AE43C")]
		public static void ApplySmoothingGroups(pb_Object pb, IEnumerable<pb_Face> faces, float angleThreshold, [Optional] Vector3[] normals)
		{
		}

		[Token(Token = "0x60006A7")]
		[Address(RVA = "0x10AEB10", Offset = "0x10AEB10", VA = "0x10AEB10")]
		private static bool FindSoftEdgesRecursive(Vector3[] normals, pb_WingedEdge wing, float angleThreshold, HashSet<pb_Face> processed)
		{
			return default(bool);
		}

		[Token(Token = "0x60006A8")]
		[Address(RVA = "0x10AEDEC", Offset = "0x10AEDEC", VA = "0x10AEDEC")]
		private static bool IsSoftEdge(Vector3[] normals, pb_EdgeLookup left, pb_EdgeLookup right, float threshold)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000157")]
	public static class pb_Snap
	{
		[Token(Token = "0x60006AD")]
		[Address(RVA = "0x10AF2D4", Offset = "0x10AF2D4", VA = "0x10AF2D4")]
		public static Vector3 SnapValue(Vector3 vertex, float snpVal)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60006AE")]
		[Address(RVA = "0x10AF484", Offset = "0x10AF484", VA = "0x10AF484")]
		public static float SnapValue(float val, float snpVal)
		{
			return default(float);
		}

		[Token(Token = "0x60006AF")]
		[Address(RVA = "0x109E33C", Offset = "0x109E33C", VA = "0x109E33C")]
		public static Vector3 SnapValue(Vector3 vertex, Vector3 snap)
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x2000158")]
	public static class pb_Spline
	{
		[Token(Token = "0x60006B0")]
		[Address(RVA = "0x10AF518", Offset = "0x10AF518", VA = "0x10AF518")]
		public static pb_Object Extrude(IList<pb_BezierPoint> points, float radius = 0.5f, int columns = 32, int rows = 16, bool closeLoop = false, bool smooth = true)
		{
			return null;
		}

		[Token(Token = "0x60006B1")]
		[Address(RVA = "0x10AF53C", Offset = "0x10AF53C", VA = "0x10AF53C")]
		public static void Extrude(IList<pb_BezierPoint> bezierPoints, float radius, int columns, int rows, bool closeLoop, bool smooth, ref pb_Object target)
		{
		}

		[Token(Token = "0x60006B2")]
		[Address(RVA = "0x10AF614", Offset = "0x10AF614", VA = "0x10AF614")]
		public static List<Vector3> GetControlPoints(IList<pb_BezierPoint> bezierPoints, int subdivisionsPerSegment, bool closeLoop, List<Quaternion> rotations)
		{
			return null;
		}

		[Token(Token = "0x60006B3")]
		[Address(RVA = "0x10AFB30", Offset = "0x10AFB30", VA = "0x10AFB30")]
		public static void Extrude(IList<Vector3> points, float radius, int radiusRows, bool closeLoop, bool smooth, ref pb_Object target, [Optional] IList<Quaternion> pointRotations)
		{
		}

		[Token(Token = "0x60006B4")]
		[Address(RVA = "0x10B0530", Offset = "0x10B0530", VA = "0x10B0530")]
		private static Quaternion GetRingRotation(IList<Vector3> points, int i, bool closeLoop, out float secant)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60006B5")]
		[Address(RVA = "0x10B0DC0", Offset = "0x10B0DC0", VA = "0x10B0DC0")]
		private static Vector3[] VertexRing(Quaternion orientation, Vector3 offset, float radius, int segments)
		{
			return null;
		}
	}
	[Token(Token = "0x2000159")]
	public class pb_UVUtility
	{
		[Token(Token = "0x40005BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Vector2 tvec2;

		[Token(Token = "0x60006B6")]
		[Address(RVA = "0x10B0FB0", Offset = "0x10B0FB0", VA = "0x10B0FB0")]
		public static void PlanarMap2(Vector3[] verts, Vector2[] uvs, int[] indices, pb_UV uvSettings, Vector3 normal)
		{
		}

		[Token(Token = "0x60006B7")]
		[Address(RVA = "0x10B1098", Offset = "0x10B1098", VA = "0x10B1098")]
		private static void ApplyUVSettings(Vector2[] uvs, int[] indices, pb_UV uvSettings)
		{
		}

		[Token(Token = "0x60006B8")]
		[Address(RVA = "0x10B148C", Offset = "0x10B148C", VA = "0x10B148C")]
		private static Vector2[] StretchUVs(Vector2[] uvs, int[] indices)
		{
			return null;
		}

		[Token(Token = "0x60006B9")]
		[Address(RVA = "0x10B139C", Offset = "0x10B139C", VA = "0x10B139C")]
		private static Vector2[] NormalizeUVs(Vector2[] uvs, int[] indices)
		{
			return null;
		}

		[Token(Token = "0x60006BA")]
		[Address(RVA = "0x10B1878", Offset = "0x10B1878", VA = "0x10B1878")]
		[Obsolete("See ApplyAnchor().")]
		private static Vector2[] JustifyUVs(Vector2[] uvs, pb_UV.Justify j)
		{
			return null;
		}

		[Token(Token = "0x60006BB")]
		[Address(RVA = "0x10B154C", Offset = "0x10B154C", VA = "0x10B154C")]
		private static void ApplyUVAnchor(Vector2[] uvs, int[] indices, pb_UV.Anchor anchor)
		{
		}

		[Token(Token = "0x60006BC")]
		[Address(RVA = "0x10B1988", Offset = "0x10B1988", VA = "0x10B1988")]
		public pb_UVUtility()
		{
		}
	}
	[Token(Token = "0x200015A")]
	public enum pb_BezierTangentMode
	{
		[Token(Token = "0x40005C0")]
		Free,
		[Token(Token = "0x40005C1")]
		Aligned,
		[Token(Token = "0x40005C2")]
		Mirrored
	}
	[Token(Token = "0x200015B")]
	public enum pb_BezierTangentDirection
	{
		[Token(Token = "0x40005C4")]
		In,
		[Token(Token = "0x40005C5")]
		Out
	}
	[Serializable]
	[Token(Token = "0x200015C")]
	public struct pb_BezierPoint
	{
		[Token(Token = "0x40005C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 position;

		[Token(Token = "0x40005C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Vector3 tangentIn;

		[Token(Token = "0x40005C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 tangentOut;

		[Token(Token = "0x40005C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Quaternion rotation;

		[Token(Token = "0x60006BE")]
		[Address(RVA = "0x10B1A0C", Offset = "0x10B1A0C", VA = "0x10B1A0C")]
		public pb_BezierPoint(Vector3 position, Vector3 tangentIn, Vector3 tangentOut, Quaternion rotation)
		{
		}

		[Token(Token = "0x60006BF")]
		[Address(RVA = "0x10B1A34", Offset = "0x10B1A34", VA = "0x10B1A34")]
		public void EnforceTangentMode(pb_BezierTangentDirection master, pb_BezierTangentMode mode)
		{
		}

		[Token(Token = "0x60006C0")]
		[Address(RVA = "0x10B1D4C", Offset = "0x10B1D4C", VA = "0x10B1D4C")]
		public void SetPosition(Vector3 position)
		{
		}

		[Token(Token = "0x60006C1")]
		[Address(RVA = "0x10B1D9C", Offset = "0x10B1D9C", VA = "0x10B1D9C")]
		public void SetTangentIn(Vector3 tangent, pb_BezierTangentMode mode)
		{
		}

		[Token(Token = "0x60006C2")]
		[Address(RVA = "0x10B1DB0", Offset = "0x10B1DB0", VA = "0x10B1DB0")]
		public void SetTangentOut(Vector3 tangent, pb_BezierTangentMode mode)
		{
		}

		[Token(Token = "0x60006C3")]
		[Address(RVA = "0x10B1DC4", Offset = "0x10B1DC4", VA = "0x10B1DC4")]
		public static Vector3 QuadraticPosition(pb_BezierPoint a, pb_BezierPoint b, float t)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60006C4")]
		[Address(RVA = "0x10B0490", Offset = "0x10B0490", VA = "0x10B0490")]
		public static Vector3 CubicPosition(pb_BezierPoint a, pb_BezierPoint b, float t)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60006C5")]
		[Address(RVA = "0x10B1E24", Offset = "0x10B1E24", VA = "0x10B1E24")]
		public static Vector3 GetLookDirection(IList<pb_BezierPoint> points, int index, int previous, int next)
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x200015D")]
	public class pb_Bounds2D
	{
		[Token(Token = "0x40005CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector2 center;

		[Token(Token = "0x40005CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Vector2 _size;

		[Token(Token = "0x40005CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Vector2 _extents;

		[Token(Token = "0x1700009D")]
		public Vector2 size
		{
			[Token(Token = "0x60006C6")]
			[Address(RVA = "0x10B281C", Offset = "0x10B281C", VA = "0x10B281C")]
			get
			{
				return default(Vector2);
			}
			[Token(Token = "0x60006C7")]
			[Address(RVA = "0x10B2824", Offset = "0x10B2824", VA = "0x10B2824")]
			set
			{
			}
		}

		[Token(Token = "0x1700009E")]
		public Vector2 extents
		{
			[Token(Token = "0x60006C8")]
			[Address(RVA = "0x10B283C", Offset = "0x10B283C", VA = "0x10B283C")]
			get
			{
				return default(Vector2);
			}
		}

		[Token(Token = "0x1700009F")]
		public Vector2[] corners
		{
			[Token(Token = "0x60006C9")]
			[Address(RVA = "0x10B2844", Offset = "0x10B2844", VA = "0x10B2844")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60006CA")]
		[Address(RVA = "0x10B290C", Offset = "0x10B290C", VA = "0x10B290C")]
		public pb_Bounds2D()
		{
		}

		[Token(Token = "0x60006CB")]
		[Address(RVA = "0x10B297C", Offset = "0x10B297C", VA = "0x10B297C")]
		public pb_Bounds2D(Vector2 center, Vector2 size)
		{
		}

		[Token(Token = "0x60006CC")]
		[Address(RVA = "0x10B2A28", Offset = "0x10B2A28", VA = "0x10B2A28")]
		public pb_Bounds2D(Vector2[] points)
		{
		}

		[Token(Token = "0x60006CD")]
		[Address(RVA = "0x10B2D98", Offset = "0x10B2D98", VA = "0x10B2D98")]
		public pb_Bounds2D(Vector2[] points, int[] indices)
		{
		}

		[Token(Token = "0x60006CE")]
		[Address(RVA = "0x10B3388", Offset = "0x10B3388", VA = "0x10B3388")]
		public pb_Bounds2D(Vector2[] points, pb_Edge[] edges)
		{
		}

		[Token(Token = "0x60006CF")]
		[Address(RVA = "0x10B3540", Offset = "0x10B3540", VA = "0x10B3540")]
		public pb_Bounds2D(Vector2[] points, int length)
		{
		}

		[Token(Token = "0x60006D0")]
		[Address(RVA = "0x10B368C", Offset = "0x10B368C", VA = "0x10B368C")]
		public bool ContainsPoint(Vector2 point)
		{
			return default(bool);
		}

		[Token(Token = "0x60006D1")]
		[Address(RVA = "0x10B36E0", Offset = "0x10B36E0", VA = "0x10B36E0")]
		public bool IntersectsLineSegment(Vector2 lineStart, Vector2 lineEnd)
		{
			return default(bool);
		}

		[Token(Token = "0x60006D2")]
		[Address(RVA = "0x10B3860", Offset = "0x10B3860", VA = "0x10B3860")]
		public bool Intersects(pb_Bounds2D bounds)
		{
			return default(bool);
		}

		[Token(Token = "0x60006D3")]
		[Address(RVA = "0x10B38C4", Offset = "0x10B38C4", VA = "0x10B38C4")]
		public bool Intersects(Rect rect)
		{
			return default(bool);
		}

		[Token(Token = "0x60006D4")]
		[Address(RVA = "0x10B2AA8", Offset = "0x10B2AA8", VA = "0x10B2AA8")]
		public void SetWithPoints(IList<Vector2> points)
		{
		}

		[Token(Token = "0x60006D5")]
		[Address(RVA = "0x10B2E28", Offset = "0x10B2E28", VA = "0x10B2E28")]
		public void SetWithPoints(IList<Vector2> points, IList<int> indices)
		{
		}

		[Token(Token = "0x60006D6")]
		[Address(RVA = "0x10B3954", Offset = "0x10B3954", VA = "0x10B3954")]
		public static Vector2 Center(Vector2[] points, int length = -1)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60006D7")]
		[Address(RVA = "0x10B17C4", Offset = "0x10B17C4", VA = "0x10B17C4")]
		public static Vector2 Center(Vector2[] points, int[] indices)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60006D8")]
		[Address(RVA = "0x10B3A08", Offset = "0x10B3A08", VA = "0x10B3A08", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x200015E")]
	public class pb_ColorPalette : ScriptableObject, pb_IHasDefault
	{
		[Token(Token = "0x40005CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Color current;

		[Token(Token = "0x40005CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<Color> colors;

		[Token(Token = "0x60006D9")]
		[Address(RVA = "0x10B3C30", Offset = "0x10B3C30", VA = "0x10B3C30", Slot = "4")]
		public void SetDefaultValues()
		{
		}

		[Token(Token = "0x60006DA")]
		[Address(RVA = "0x10B4400", Offset = "0x10B4400", VA = "0x10B4400")]
		public void CopyTo(pb_ColorPalette target)
		{
		}

		[Token(Token = "0x60006DB")]
		[Address(RVA = "0x10B4494", Offset = "0x10B4494", VA = "0x10B4494")]
		public pb_ColorPalette()
		{
		}
	}
	[Token(Token = "0x200015F")]
	[Obsolete("Use pb_ConnectEdges class directly.")]
	public class pb_EdgeConnection : IEquatable<pb_EdgeConnection>
	{
		[Token(Token = "0x40005CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public pb_Face face;

		[Token(Token = "0x40005D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<pb_Edge> edges;

		[Token(Token = "0x170000A0")]
		public bool isValid
		{
			[Token(Token = "0x60006DD")]
			[Address(RVA = "0x10B44E8", Offset = "0x10B44E8", VA = "0x10B44E8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60006DC")]
		[Address(RVA = "0x10B44A4", Offset = "0x10B44A4", VA = "0x10B44A4")]
		public pb_EdgeConnection(pb_Face face, List<pb_Edge> edges)
		{
		}

		[Token(Token = "0x60006DE")]
		[Address(RVA = "0x10B453C", Offset = "0x10B453C", VA = "0x10B453C", Slot = "0")]
		public override bool Equals(object b)
		{
			return default(bool);
		}

		[Token(Token = "0x60006DF")]
		[Address(RVA = "0x10B45C8", Offset = "0x10B45C8", VA = "0x10B45C8", Slot = "4")]
		public bool Equals(pb_EdgeConnection fc)
		{
			return default(bool);
		}

		[Token(Token = "0x60006E0")]
		[Address(RVA = "0x10B45EC", Offset = "0x10B45EC", VA = "0x10B45EC")]
		public static explicit operator pb_Face(pb_EdgeConnection fc)
		{
			return null;
		}

		[Token(Token = "0x60006E1")]
		[Address(RVA = "0x10B4604", Offset = "0x10B4604", VA = "0x10B4604", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60006E2")]
		[Address(RVA = "0x10B460C", Offset = "0x10B460C", VA = "0x10B460C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60006E3")]
		[Address(RVA = "0x10B46BC", Offset = "0x10B46BC", VA = "0x10B46BC")]
		public static List<int> AllTriangles(List<pb_EdgeConnection> ec)
		{
			return null;
		}
	}
	[Token(Token = "0x2000160")]
	public class pb_EdgeLookup : IEquatable<pb_EdgeLookup>
	{
		[Token(Token = "0x40005D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public pb_Edge local;

		[Token(Token = "0x40005D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public pb_Edge common;

		[Token(Token = "0x60006E4")]
		[Address(RVA = "0x10B4878", Offset = "0x10B4878", VA = "0x10B4878")]
		public pb_EdgeLookup(pb_Edge common, pb_Edge local)
		{
		}

		[Token(Token = "0x60006E5")]
		[Address(RVA = "0x10B48A4", Offset = "0x10B48A4", VA = "0x10B48A4")]
		public pb_EdgeLookup(int cx, int cy, int x, int y)
		{
		}

		[Token(Token = "0x60006E6")]
		[Address(RVA = "0x10B4924", Offset = "0x10B4924", VA = "0x10B4924", Slot = "4")]
		public bool Equals(pb_EdgeLookup b)
		{
			return default(bool);
		}

		[Token(Token = "0x60006E7")]
		[Address(RVA = "0x10B499C", Offset = "0x10B499C", VA = "0x10B499C", Slot = "0")]
		public override bool Equals(object b)
		{
			return default(bool);
		}

		[Token(Token = "0x60006E8")]
		[Address(RVA = "0x10B4A38", Offset = "0x10B4A38", VA = "0x10B4A38", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60006E9")]
		[Address(RVA = "0x10B4A44", Offset = "0x10B4A44", VA = "0x10B4A44", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60006EA")]
		[Address(RVA = "0x10B4AE4", Offset = "0x10B4AE4", VA = "0x10B4AE4")]
		public static IEnumerable<pb_EdgeLookup> GetEdgeLookup(IEnumerable<pb_Edge> edges, Dictionary<int, int> lookup)
		{
			return null;
		}
	}
	[Token(Token = "0x2000162")]
	public class pb_FaceRebuildData
	{
		[Token(Token = "0x40005D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public pb_Face face;

		[Token(Token = "0x40005D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<pb_Vertex> vertices;

		[Token(Token = "0x40005D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<int> sharedIndices;

		[Token(Token = "0x40005D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<int> sharedIndicesUV;

		[Token(Token = "0x40005D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int _appliedOffset;

		[Token(Token = "0x60006ED")]
		[Address(RVA = "0x10B4C9C", Offset = "0x10B4C9C", VA = "0x10B4C9C")]
		public int Offset()
		{
			return default(int);
		}

		[Token(Token = "0x60006EE")]
		[Address(RVA = "0x10B4CA4", Offset = "0x10B4CA4", VA = "0x10B4CA4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60006EF")]
		[Address(RVA = "0x10B4D6C", Offset = "0x10B4D6C", VA = "0x10B4D6C")]
		public static void Apply(IEnumerable<pb_FaceRebuildData> newFaces, pb_Object pb, [Optional] List<pb_Vertex> vertices, [Optional] List<pb_Face> faces, [Optional] Dictionary<int, int> lookup, [Optional] Dictionary<int, int> lookupUV)
		{
		}

		[Token(Token = "0x60006F0")]
		[Address(RVA = "0x10B55F8", Offset = "0x10B55F8", VA = "0x10B55F8")]
		public static void Apply(IEnumerable<pb_FaceRebuildData> newFaces, List<pb_Vertex> vertices, List<pb_Face> faces, Dictionary<int, int> sharedIndices, [Optional] Dictionary<int, int> sharedIndicesUV)
		{
		}

		[Token(Token = "0x60006F1")]
		[Address(RVA = "0x10B5B9C", Offset = "0x10B5B9C", VA = "0x10B5B9C")]
		public pb_FaceRebuildData()
		{
		}
	}
	[Token(Token = "0x2000163")]
	public class pb_HandleConstraint2D
	{
		[Token(Token = "0x40005D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int x;

		[Token(Token = "0x40005DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int y;

		[Token(Token = "0x40005DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly pb_HandleConstraint2D None;

		[Token(Token = "0x60006F2")]
		[Address(RVA = "0x10B5BA4", Offset = "0x10B5BA4", VA = "0x10B5BA4")]
		public pb_HandleConstraint2D(int x, int y)
		{
		}

		[Token(Token = "0x60006F3")]
		[Address(RVA = "0x10B5BD0", Offset = "0x10B5BD0", VA = "0x10B5BD0")]
		public pb_HandleConstraint2D Inverse()
		{
			return null;
		}

		[Token(Token = "0x60006F4")]
		[Address(RVA = "0x10B5C50", Offset = "0x10B5C50", VA = "0x10B5C50")]
		public Vector2 Mask(Vector2 v)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60006F5")]
		[Address(RVA = "0x10B5C68", Offset = "0x10B5C68", VA = "0x10B5C68")]
		public Vector2 InverseMask(Vector2 v)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60006F6")]
		[Address(RVA = "0x10B5C90", Offset = "0x10B5C90", VA = "0x10B5C90")]
		public static bool operator ==(pb_HandleConstraint2D a, pb_HandleConstraint2D b)
		{
			return default(bool);
		}

		[Token(Token = "0x60006F7")]
		[Address(RVA = "0x10B5CD0", Offset = "0x10B5CD0", VA = "0x10B5CD0")]
		public static bool operator !=(pb_HandleConstraint2D a, pb_HandleConstraint2D b)
		{
			return default(bool);
		}

		[Token(Token = "0x60006F8")]
		[Address(RVA = "0x10B5D10", Offset = "0x10B5D10", VA = "0x10B5D10", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60006F9")]
		[Address(RVA = "0x10B5D18", Offset = "0x10B5D18", VA = "0x10B5D18", Slot = "0")]
		public override bool Equals(object o)
		{
			return default(bool);
		}

		[Token(Token = "0x60006FA")]
		[Address(RVA = "0x10B5DB4", Offset = "0x10B5DB4", VA = "0x10B5DB4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000164")]
	public struct pb_IntVec3 : IEquatable<pb_IntVec3>
	{
		[Token(Token = "0x40005DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 vec;

		[Token(Token = "0x40005DD")]
		public const float RESOLUTION = 1000f;

		[Token(Token = "0x170000A1")]
		public float x
		{
			[Token(Token = "0x60006FC")]
			[Address(RVA = "0x10B603C", Offset = "0x10B603C", VA = "0x10B603C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000A2")]
		public float y
		{
			[Token(Token = "0x60006FD")]
			[Address(RVA = "0x10B6044", Offset = "0x10B6044", VA = "0x10B6044")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000A3")]
		public float z
		{
			[Token(Token = "0x60006FE")]
			[Address(RVA = "0x10B604C", Offset = "0x10B604C", VA = "0x10B604C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x60006FF")]
		[Address(RVA = "0x10B6054", Offset = "0x10B6054", VA = "0x10B6054")]
		public pb_IntVec3(Vector3 vector)
		{
		}

		[Token(Token = "0x6000700")]
		[Address(RVA = "0x10B6060", Offset = "0x10B6060", VA = "0x10B6060", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000701")]
		[Address(RVA = "0x10B6124", Offset = "0x10B6124", VA = "0x10B6124")]
		public static bool operator ==(pb_IntVec3 a, pb_IntVec3 b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000702")]
		[Address(RVA = "0x10B61EC", Offset = "0x10B61EC", VA = "0x10B61EC")]
		public static bool operator !=(pb_IntVec3 a, pb_IntVec3 b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000703")]
		[Address(RVA = "0x10B6158", Offset = "0x10B6158", VA = "0x10B6158", Slot = "4")]
		public bool Equals(pb_IntVec3 p)
		{
			return default(bool);
		}

		[Token(Token = "0x6000704")]
		[Address(RVA = "0x10B628C", Offset = "0x10B628C", VA = "0x10B628C")]
		public bool Equals(Vector3 p)
		{
			return default(bool);
		}

		[Token(Token = "0x6000705")]
		[Address(RVA = "0x10B6320", Offset = "0x10B6320", VA = "0x10B6320", Slot = "0")]
		public override bool Equals(object b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000706")]
		[Address(RVA = "0x10B63E4", Offset = "0x10B63E4", VA = "0x10B63E4", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000707")]
		[Address(RVA = "0x10B6224", Offset = "0x10B6224", VA = "0x10B6224")]
		private static int round(float v)
		{
			return default(int);
		}

		[Token(Token = "0x6000708")]
		[Address(RVA = "0x10B64A0", Offset = "0x10B64A0", VA = "0x10B64A0")]
		public static implicit operator Vector3(pb_IntVec3 p)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000709")]
		[Address(RVA = "0x10B64A4", Offset = "0x10B64A4", VA = "0x10B64A4")]
		public static implicit operator pb_IntVec3(Vector3 p)
		{
			return default(pb_IntVec3);
		}
	}
	[Token(Token = "0x2000165")]
	public class pb_RaycastHit
	{
		[Token(Token = "0x40005DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float distance;

		[Token(Token = "0x40005DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Vector3 point;

		[Token(Token = "0x40005E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 normal;

		[Token(Token = "0x40005E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int face;

		[Token(Token = "0x600070A")]
		[Address(RVA = "0x10B64A8", Offset = "0x10B64A8", VA = "0x10B64A8")]
		public pb_RaycastHit(float InDistance, Vector3 InPoint, Vector3 InNormal, int InFaceIndex)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000166")]
	public class pb_Renderable : ScriptableObject
	{
		[Token(Token = "0x40005E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Mesh mesh;

		[Token(Token = "0x40005E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Material[] materials;

		[Token(Token = "0x40005E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform transform;

		[Token(Token = "0x600070B")]
		[Address(RVA = "0x10B651C", Offset = "0x10B651C", VA = "0x10B651C")]
		public static pb_Renderable CreateInstance(Mesh InMesh, Material[] InMaterials, [Optional] Transform transform)
		{
			return null;
		}

		[Token(Token = "0x600070C")]
		[Address(RVA = "0x10B65B0", Offset = "0x10B65B0", VA = "0x10B65B0")]
		public static pb_Renderable CreateInstance(Mesh InMesh, Material InMaterial, [Optional] Transform transform)
		{
			return null;
		}

		[Token(Token = "0x600070D")]
		[Address(RVA = "0x10B66AC", Offset = "0x10B66AC", VA = "0x10B66AC")]
		public static pb_Renderable CreateInstance()
		{
			return null;
		}

		[Token(Token = "0x600070E")]
		[Address(RVA = "0x10B677C", Offset = "0x10B677C", VA = "0x10B677C")]
		public static void DestroyInstance(UnityEngine.Object ren)
		{
		}

		[Token(Token = "0x600070F")]
		[Address(RVA = "0x10B67D4", Offset = "0x10B67D4", VA = "0x10B67D4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000710")]
		[Address(RVA = "0x10B6864", Offset = "0x10B6864", VA = "0x10B6864")]
		public pb_Renderable()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000167")]
	public class pb_Submesh
	{
		[Token(Token = "0x40005E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int[] indices;

		[Token(Token = "0x40005E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MeshTopology topology;

		[Token(Token = "0x40005E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Material material;

		[Token(Token = "0x6000711")]
		[Address(RVA = "0x10B686C", Offset = "0x10B686C", VA = "0x10B686C")]
		public pb_Submesh(Material material, MeshTopology topology, int[] indices)
		{
		}

		[Token(Token = "0x6000712")]
		[Address(RVA = "0x10B68C0", Offset = "0x10B68C0", VA = "0x10B68C0")]
		public pb_Submesh(Mesh mesh, int subMeshIndex, Material material)
		{
		}

		[Token(Token = "0x6000713")]
		[Address(RVA = "0x10B693C", Offset = "0x10B693C", VA = "0x10B693C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000168")]
	public class pb_Transform2D
	{
		[Token(Token = "0x40005E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector2 position;

		[Token(Token = "0x40005E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float rotation;

		[Token(Token = "0x40005EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector2 scale;

		[Token(Token = "0x6000714")]
		[Address(RVA = "0x10B6A84", Offset = "0x10B6A84", VA = "0x10B6A84")]
		public pb_Transform2D(Vector2 position, float rotation, Vector2 scale)
		{
		}

		[Token(Token = "0x6000715")]
		[Address(RVA = "0x10B6AD4", Offset = "0x10B6AD4", VA = "0x10B6AD4")]
		public Vector2 TransformPoint(Vector2 p)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000716")]
		[Address(RVA = "0x10B6B38", Offset = "0x10B6B38", VA = "0x10B6B38", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000169")]
	public class pb_Tuple<T1, T2>
	{
		[Token(Token = "0x40005EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T1 Item1;

		[Token(Token = "0x40005EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T2 Item2;

		[Token(Token = "0x6000717")]
		public pb_Tuple()
		{
		}

		[Token(Token = "0x6000718")]
		public pb_Tuple(T1 item1, T2 item2)
		{
		}

		[Token(Token = "0x6000719")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x200016A")]
	public class pb_Tuple<T1, T2, T3>
	{
		[Token(Token = "0x40005ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T1 Item1;

		[Token(Token = "0x40005EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T2 Item2;

		[Token(Token = "0x40005EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T3 Item3;

		[Token(Token = "0x600071A")]
		public pb_Tuple()
		{
		}

		[Token(Token = "0x600071B")]
		public pb_Tuple(T1 item1, T2 item2, T3 item3)
		{
		}

		[Token(Token = "0x600071C")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x200016B")]
	public class pb_Tuple<T1, T2, T3, T4>
	{
		[Token(Token = "0x40005F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T1 Item1;

		[Token(Token = "0x40005F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T2 Item2;

		[Token(Token = "0x40005F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T3 Item3;

		[Token(Token = "0x40005F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T4 Item4;

		[Token(Token = "0x600071D")]
		public pb_Tuple()
		{
		}

		[Token(Token = "0x600071E")]
		public pb_Tuple(T1 item1, T2 item2, T3 item3, T4 item4)
		{
		}

		[Token(Token = "0x600071F")]
		public override string ToString()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x200016C")]
	public class pb_Type : ISerializationCallbackReceiver
	{
		[Token(Token = "0x40005F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private string assemblyQualifiedName;

		[Token(Token = "0x40005F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Type type;

		[Token(Token = "0x6000720")]
		[Address(RVA = "0x10B6DA4", Offset = "0x10B6DA4", VA = "0x10B6DA4")]
		public pb_Type(Type t)
		{
		}

		[Token(Token = "0x6000721")]
		[Address(RVA = "0x10B6DD4", Offset = "0x10B6DD4", VA = "0x10B6DD4", Slot = "4")]
		public void OnBeforeSerialize()
		{
		}

		[Token(Token = "0x6000722")]
		[Address(RVA = "0x10B6E0C", Offset = "0x10B6E0C", VA = "0x10B6E0C", Slot = "5")]
		public void OnAfterDeserialize()
		{
		}

		[Token(Token = "0x6000723")]
		[Address(RVA = "0x10B6EAC", Offset = "0x10B6EAC", VA = "0x10B6EAC")]
		public static implicit operator Type(pb_Type t)
		{
			return null;
		}

		[Token(Token = "0x6000724")]
		[Address(RVA = "0x10B6EC4", Offset = "0x10B6EC4", VA = "0x10B6EC4")]
		public static implicit operator pb_Type(Type t)
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x200016D")]
	public class pb_UnwrapParameters
	{
		[Token(Token = "0x40005F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Tooltip("Angle between neighbor triangles that will generate seam.")]
		[Range(1f, 180f)]
		public float hardAngle;

		[Token(Token = "0x40005F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[Range(1f, 64f)]
		[Tooltip("Measured in pixels, assuming mesh will cover an entire 1024x1024 lightmap.")]
		public float packMargin;

		[Token(Token = "0x40005F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(1f, 75f)]
		[Tooltip("Measured in percents. Angle error measures deviation of UV angles from geometry angles. Area error measures deviation of UV triangles area from geometry triangles if they were uniformly scaled.")]
		public float angleError;

		[Token(Token = "0x40005F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Range(1f, 75f)]
		[Tooltip("Does... something.")]
		public float areaError;

		[Token(Token = "0x6000725")]
		[Address(RVA = "0x10B6F34", Offset = "0x10B6F34", VA = "0x10B6F34")]
		public void Reset()
		{
		}

		[Token(Token = "0x6000726")]
		[Address(RVA = "0x10B6F44", Offset = "0x10B6F44", VA = "0x10B6F44")]
		public pb_UnwrapParameters()
		{
		}
	}
	[Token(Token = "0x200016E")]
	public static class pb_Vector
	{
		[Token(Token = "0x40005FA")]
		public const float FLT_COMPARE_RESOLUTION = 1000f;

		[Token(Token = "0x6000727")]
		[Address(RVA = "0x10B6F58", Offset = "0x10B6F58", VA = "0x10B6F58")]
		private static int HashFloat(float f)
		{
			return default(int);
		}

		[Token(Token = "0x6000728")]
		[Address(RVA = "0x10B6F98", Offset = "0x10B6F98", VA = "0x10B6F98")]
		public static int GetHashCode(Vector2 v)
		{
			return default(int);
		}

		[Token(Token = "0x6000729")]
		[Address(RVA = "0x10B63F0", Offset = "0x10B63F0", VA = "0x10B63F0")]
		public static int GetHashCode(Vector3 v)
		{
			return default(int);
		}

		[Token(Token = "0x600072A")]
		[Address(RVA = "0x10B7014", Offset = "0x10B7014", VA = "0x10B7014")]
		public static int GetHashCode(Vector4 v)
		{
			return default(int);
		}
	}
	[Token(Token = "0x200016F")]
	public class pb_Vertex : IEquatable<pb_Vertex>
	{
		[Token(Token = "0x40005FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 position;

		[Token(Token = "0x40005FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Color color;

		[Token(Token = "0x40005FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 normal;

		[Token(Token = "0x40005FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector4 tangent;

		[Token(Token = "0x40005FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector2 uv0;

		[Token(Token = "0x4000600")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Vector2 uv2;

		[Token(Token = "0x4000601")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Vector4 uv3;

		[Token(Token = "0x4000602")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Vector4 uv4;

		[Token(Token = "0x4000603")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public bool hasPosition;

		[Token(Token = "0x4000604")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
		public bool hasColor;

		[Token(Token = "0x4000605")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7A")]
		public bool hasNormal;

		[Token(Token = "0x4000606")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7B")]
		public bool hasTangent;

		[Token(Token = "0x4000607")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public bool hasUv0;

		[Token(Token = "0x4000608")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7D")]
		public bool hasUv2;

		[Token(Token = "0x4000609")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7E")]
		public bool hasUv3;

		[Token(Token = "0x400060A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7F")]
		public bool hasUv4;

		[Token(Token = "0x600072B")]
		[Address(RVA = "0x10B70F4", Offset = "0x10B70F4", VA = "0x10B70F4")]
		public pb_Vertex(bool hasAllValues = false)
		{
		}

		[Token(Token = "0x600072C")]
		[Address(RVA = "0x10B7128", Offset = "0x10B7128", VA = "0x10B7128", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x600072D")]
		[Address(RVA = "0x10B71B4", Offset = "0x10B71B4", VA = "0x10B71B4", Slot = "4")]
		public bool Equals(pb_Vertex other)
		{
			return default(bool);
		}

		[Token(Token = "0x600072E")]
		[Address(RVA = "0x10B72FC", Offset = "0x10B72FC", VA = "0x10B72FC", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x600072F")]
		[Address(RVA = "0x10B73C0", Offset = "0x10B73C0", VA = "0x10B73C0")]
		public pb_Vertex(pb_Vertex v)
		{
		}

		[Token(Token = "0x6000730")]
		[Address(RVA = "0x10B747C", Offset = "0x10B747C", VA = "0x10B747C")]
		public static pb_Vertex operator +(pb_Vertex a, pb_Vertex b)
		{
			return null;
		}

		[Token(Token = "0x6000731")]
		[Address(RVA = "0x10B74F4", Offset = "0x10B74F4", VA = "0x10B74F4")]
		public void Add(pb_Vertex b)
		{
		}

		[Token(Token = "0x6000732")]
		[Address(RVA = "0x10B75B8", Offset = "0x10B75B8", VA = "0x10B75B8")]
		public static pb_Vertex operator -(pb_Vertex a, pb_Vertex b)
		{
			return null;
		}

		[Token(Token = "0x6000733")]
		[Address(RVA = "0x10B7630", Offset = "0x10B7630", VA = "0x10B7630")]
		public void Subtract(pb_Vertex b)
		{
		}

		[Token(Token = "0x6000734")]
		[Address(RVA = "0x10B76F4", Offset = "0x10B76F4", VA = "0x10B76F4")]
		public static pb_Vertex operator *(pb_Vertex a, float value)
		{
			return null;
		}

		[Token(Token = "0x6000735")]
		[Address(RVA = "0x10B776C", Offset = "0x10B776C", VA = "0x10B776C")]
		public void Multiply(float value)
		{
		}

		[Token(Token = "0x6000736")]
		[Address(RVA = "0x10B77B0", Offset = "0x10B77B0", VA = "0x10B77B0")]
		public static pb_Vertex operator /(pb_Vertex a, float value)
		{
			return null;
		}

		[Token(Token = "0x6000737")]
		[Address(RVA = "0x10B7828", Offset = "0x10B7828", VA = "0x10B7828")]
		public void Divide(float value)
		{
		}

		[Token(Token = "0x6000738")]
		[Address(RVA = "0x10B7870", Offset = "0x10B7870", VA = "0x10B7870")]
		public void Normalize()
		{
		}

		[Token(Token = "0x6000739")]
		[Address(RVA = "0x10B7DC4", Offset = "0x10B7DC4", VA = "0x10B7DC4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x600073A")]
		[Address(RVA = "0x10B4F50", Offset = "0x10B4F50", VA = "0x10B4F50")]
		public static pb_Vertex[] GetVertices(pb_Object pb, [Optional] IList<int> indices)
		{
			return null;
		}

		[Token(Token = "0x600073B")]
		[Address(RVA = "0x10B7DD0", Offset = "0x10B7DD0", VA = "0x10B7DD0")]
		public static pb_Vertex[] GetVertices(Mesh m)
		{
			return null;
		}

		[Token(Token = "0x600073C")]
		[Address(RVA = "0x10B83E8", Offset = "0x10B83E8", VA = "0x10B83E8")]
		public static void GetArrays(IList<pb_Vertex> vertices, out Vector3[] position, out Color[] color, out Vector2[] uv0, out Vector3[] normal, out Vector4[] tangent, out Vector2[] uv2, out List<Vector4> uv3, out List<Vector4> uv4)
		{
		}

		[Token(Token = "0x600073D")]
		[Address(RVA = "0x10B8410", Offset = "0x10B8410", VA = "0x10B8410")]
		public static void GetArrays(IList<pb_Vertex> vertices, out Vector3[] position, out Color[] color, out Vector2[] uv0, out Vector3[] normal, out Vector4[] tangent, out Vector2[] uv2, out List<Vector4> uv3, out List<Vector4> uv4, AttributeType attributes)
		{
		}

		[Token(Token = "0x600073E")]
		[Address(RVA = "0x10B8C00", Offset = "0x10B8C00", VA = "0x10B8C00")]
		public static void SetMesh(Mesh m, IList<pb_Vertex> vertices)
		{
		}

		[Token(Token = "0x600073F")]
		[Address(RVA = "0x10B8DDC", Offset = "0x10B8DDC", VA = "0x10B8DDC")]
		public static pb_Vertex Average(IList<pb_Vertex> vertices, [Optional] IList<int> indices)
		{
			return null;
		}

		[Token(Token = "0x6000740")]
		[Address(RVA = "0x10B96E0", Offset = "0x10B96E0", VA = "0x10B96E0")]
		public static pb_Vertex Mix(pb_Vertex x, pb_Vertex y, float a)
		{
			return null;
		}
	}
	[Token(Token = "0x2000170")]
	public class pb_VertexConnection : IEquatable<pb_VertexConnection>
	{
		[Token(Token = "0x400060B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public pb_Face face;

		[Token(Token = "0x400060C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<int> indices;

		[Token(Token = "0x170000A4")]
		public bool isValid
		{
			[Token(Token = "0x6000742")]
			[Address(RVA = "0x10B9988", Offset = "0x10B9988", VA = "0x10B9988")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000741")]
		[Address(RVA = "0x10B9944", Offset = "0x10B9944", VA = "0x10B9944")]
		public pb_VertexConnection(pb_Face face, List<int> indices)
		{
		}

		[Token(Token = "0x6000743")]
		[Address(RVA = "0x10B99DC", Offset = "0x10B99DC", VA = "0x10B99DC")]
		public pb_VertexConnection Distinct(pb_IntArray[] sharedIndices)
		{
			return null;
		}

		[Token(Token = "0x6000744")]
		[Address(RVA = "0x10B9A80", Offset = "0x10B9A80", VA = "0x10B9A80", Slot = "0")]
		public override bool Equals(object b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000745")]
		[Address(RVA = "0x10B9B0C", Offset = "0x10B9B0C", VA = "0x10B9B0C", Slot = "4")]
		public bool Equals(pb_VertexConnection vc)
		{
			return default(bool);
		}

		[Token(Token = "0x6000746")]
		[Address(RVA = "0x10B9B30", Offset = "0x10B9B30", VA = "0x10B9B30")]
		public static implicit operator pb_Face(pb_VertexConnection vc)
		{
			return null;
		}

		[Token(Token = "0x6000747")]
		[Address(RVA = "0x10B9B48", Offset = "0x10B9B48", VA = "0x10B9B48", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000748")]
		[Address(RVA = "0x10B9B50", Offset = "0x10B9B50", VA = "0x10B9B50", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000749")]
		[Address(RVA = "0x10B9C00", Offset = "0x10B9C00", VA = "0x10B9C00")]
		public static List<int> AllTriangles(List<pb_VertexConnection> vcs)
		{
			return null;
		}
	}
	[Token(Token = "0x2000171")]
	public class pb_WingedEdge : IEquatable<pb_WingedEdge>, IEnumerable
	{
		[Token(Token = "0x400060D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public pb_EdgeLookup edge;

		[Token(Token = "0x400060E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public pb_Face face;

		[Token(Token = "0x400060F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public pb_WingedEdge next;

		[Token(Token = "0x4000610")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public pb_WingedEdge previous;

		[Token(Token = "0x4000611")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public pb_WingedEdge opposite;

		[Token(Token = "0x600074A")]
		[Address(RVA = "0x10B9CF8", Offset = "0x10B9CF8", VA = "0x10B9CF8", Slot = "4")]
		public bool Equals(pb_WingedEdge b)
		{
			return default(bool);
		}

		[Token(Token = "0x600074B")]
		[Address(RVA = "0x10B9D34", Offset = "0x10B9D34", VA = "0x10B9D34", Slot = "0")]
		public override bool Equals(object b)
		{
			return default(bool);
		}

		[Token(Token = "0x600074C")]
		[Address(RVA = "0x10B9E08", Offset = "0x10B9E08", VA = "0x10B9E08", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x600074D")]
		[Address(RVA = "0x10B9E28", Offset = "0x10B9E28", VA = "0x10B9E28", Slot = "5")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x600074E")]
		[Address(RVA = "0x10B9E2C", Offset = "0x10B9E2C", VA = "0x10B9E2C")]
		public pb_WingedEdgeEnumerator GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x600074F")]
		[Address(RVA = "0x10B9ECC", Offset = "0x10B9ECC", VA = "0x10B9ECC")]
		public int Count()
		{
			return default(int);
		}

		[Token(Token = "0x6000750")]
		[Address(RVA = "0x10B9F00", Offset = "0x10B9F00", VA = "0x10B9F00", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000751")]
		[Address(RVA = "0x10BA0E8", Offset = "0x10BA0E8", VA = "0x10BA0E8")]
		public static int[] MakeQuad(pb_WingedEdge left, pb_WingedEdge right)
		{
			return null;
		}

		[Token(Token = "0x6000752")]
		[Address(RVA = "0x10BA5DC", Offset = "0x10BA5DC", VA = "0x10BA5DC")]
		public pb_WingedEdge GetAdjacentEdgeWithCommonIndex(int common)
		{
			return null;
		}

		[Token(Token = "0x6000753")]
		[Address(RVA = "0x10BA654", Offset = "0x10BA654", VA = "0x10BA654")]
		public static List<pb_Edge> SortEdgesByAdjacency(pb_Face face)
		{
			return null;
		}

		[Token(Token = "0x6000754")]
		[Address(RVA = "0x10BA6E4", Offset = "0x10BA6E4", VA = "0x10BA6E4")]
		public static List<pb_Edge> SortEdgesByAdjacency(List<pb_Edge> edges)
		{
			return null;
		}

		[Token(Token = "0x6000755")]
		[Address(RVA = "0x10BA83C", Offset = "0x10BA83C", VA = "0x10BA83C")]
		public static Dictionary<int, List<pb_WingedEdge>> GetSpokes(List<pb_WingedEdge> wings)
		{
			return null;
		}

		[Token(Token = "0x6000756")]
		[Address(RVA = "0x10BAC50", Offset = "0x10BAC50", VA = "0x10BAC50")]
		public static List<int> SortCommonIndicesByAdjacency(List<pb_WingedEdge> wings, HashSet<int> common)
		{
			return null;
		}

		[Token(Token = "0x6000757")]
		[Address(RVA = "0x10BAF64", Offset = "0x10BAF64", VA = "0x10BAF64")]
		public static List<pb_WingedEdge> GetWingedEdges(pb_Object pb, bool oneWingPerFace = false)
		{
			return null;
		}

		[Token(Token = "0x6000758")]
		[Address(RVA = "0x10BAF88", Offset = "0x10BAF88", VA = "0x10BAF88")]
		public static List<pb_WingedEdge> GetWingedEdges(pb_Object pb, IEnumerable<pb_Face> faces, bool oneWingPerFace = false, [Optional] Dictionary<int, int> sharedIndexLookup)
		{
			return null;
		}

		[Token(Token = "0x6000759")]
		[Address(RVA = "0x10BB6F4", Offset = "0x10BB6F4", VA = "0x10BB6F4")]
		public pb_WingedEdge()
		{
		}
	}
	[Token(Token = "0x2000174")]
	public class pb_WingedEdgeEnumerator : IEnumerator
	{
		[Token(Token = "0x4000616")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private pb_WingedEdge _start;

		[Token(Token = "0x4000617")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private pb_WingedEdge _current;

		[Token(Token = "0x170000A5")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000763")]
			[Address(RVA = "0x10BB8A8", Offset = "0x10BB8A8", VA = "0x10BB8A8", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A6")]
		public pb_WingedEdge Current
		{
			[Token(Token = "0x6000764")]
			[Address(RVA = "0x10BB8B0", Offset = "0x10BB8B0", VA = "0x10BB8B0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000760")]
		[Address(RVA = "0x10B9E8C", Offset = "0x10B9E8C", VA = "0x10B9E8C")]
		public pb_WingedEdgeEnumerator(pb_WingedEdge start)
		{
		}

		[Token(Token = "0x6000761")]
		[Address(RVA = "0x10BB830", Offset = "0x10BB830", VA = "0x10BB830", Slot = "4")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000762")]
		[Address(RVA = "0x10BB89C", Offset = "0x10BB89C", VA = "0x10BB89C", Slot = "6")]
		public void Reset()
		{
		}
	}
}
namespace ProBuilder2.Examples
{
	[Token(Token = "0x2000175")]
	public class CameraControls : MonoBehaviour
	{
		[Token(Token = "0x4000618")]
		private const string INPUT_MOUSE_SCROLLWHEEL = "Mouse ScrollWheel";

		[Token(Token = "0x4000619")]
		private const string INPUT_MOUSE_X = "Mouse X";

		[Token(Token = "0x400061A")]
		private const string INPUT_MOUSE_Y = "Mouse Y";

		[Token(Token = "0x400061B")]
		private const float MIN_CAM_DISTANCE = 10f;

		[Token(Token = "0x400061C")]
		private const float MAX_CAM_DISTANCE = 40f;

		[Token(Token = "0x400061D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(2f, 15f)]
		public float orbitSpeed;

		[Token(Token = "0x400061E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Range(0.3f, 2f)]
		public float zoomSpeed;

		[Token(Token = "0x400061F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float distance;

		[Token(Token = "0x4000620")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float idleRotation;

		[Token(Token = "0x4000621")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector2 dir;

		[Token(Token = "0x6000765")]
		[Address(RVA = "0x10BB8B8", Offset = "0x10BB8B8", VA = "0x10BB8B8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000766")]
		[Address(RVA = "0x10BB9A4", Offset = "0x10BB9A4", VA = "0x10BB9A4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000767")]
		[Address(RVA = "0x10BBDD8", Offset = "0x10BBDD8", VA = "0x10BBDD8")]
		public CameraControls()
		{
		}
	}
}
namespace MeshCombineStudio
{
	[Token(Token = "0x2000176")]
	public class CombineRuntime : MonoBehaviour
	{
		[Token(Token = "0x4000622")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MeshCombiner meshCombiner;

		[Token(Token = "0x4000623")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool useSearchConditions;

		[Token(Token = "0x4000624")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject[] gos;

		[Token(Token = "0x6000768")]
		[Address(RVA = "0x10BBE00", Offset = "0x10BBE00", VA = "0x10BBE00")]
		private void Start()
		{
		}

		[Token(Token = "0x6000769")]
		[Address(RVA = "0x10BBE04", Offset = "0x10BBE04", VA = "0x10BBE04")]
		private void Combine()
		{
		}

		[Token(Token = "0x600076A")]
		[Address(RVA = "0x10BBE44", Offset = "0x10BBE44", VA = "0x10BBE44")]
		public CombineRuntime()
		{
		}
	}
	[Token(Token = "0x2000177")]
	public class SelectOriginal : MonoBehaviour
	{
		[Token(Token = "0x4000625")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MeshCombiner meshCombiner;

		[Token(Token = "0x4000626")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Camera mainCamera;

		[Token(Token = "0x4000627")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Material matSelect;

		[Token(Token = "0x4000628")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Material oldMat;

		[Token(Token = "0x4000629")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 oldPos;

		[Token(Token = "0x400062A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private MeshRenderer oldMr;

		[Token(Token = "0x600076B")]
		[Address(RVA = "0x10BBE54", Offset = "0x10BBE54", VA = "0x10BBE54")]
		private void Update()
		{
		}

		[Token(Token = "0x600076C")]
		[Address(RVA = "0x10BC0B0", Offset = "0x10BC0B0", VA = "0x10BC0B0")]
		private void Deselect()
		{
		}

		[Token(Token = "0x600076D")]
		[Address(RVA = "0x10BC13C", Offset = "0x10BC13C", VA = "0x10BC13C")]
		private void SelectOrDeselect(Vector3 position, MeshRenderer mr, Material mat, bool select)
		{
		}

		[Token(Token = "0x600076E")]
		[Address(RVA = "0x10BC26C", Offset = "0x10BC26C", VA = "0x10BC26C")]
		public SelectOriginal()
		{
		}
	}
	[Token(Token = "0x2000178")]
	public class DisabledLODGroup : MonoBehaviour
	{
		[Token(Token = "0x400062B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public MeshCombiner meshCombiner;

		[Token(Token = "0x400062C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LODGroup lodGroup;

		[Token(Token = "0x600076F")]
		[Address(RVA = "0x10BC274", Offset = "0x10BC274", VA = "0x10BC274")]
		public DisabledLODGroup()
		{
		}
	}
	[Token(Token = "0x2000179")]
	[ExecuteInEditMode]
	public class FindLodGroups : MonoBehaviour
	{
		[Token(Token = "0x400062D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool find;

		[Token(Token = "0x6000770")]
		[Address(RVA = "0x10BC27C", Offset = "0x10BC27C", VA = "0x10BC27C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000771")]
		[Address(RVA = "0x10BC3E0", Offset = "0x10BC3E0", VA = "0x10BC3E0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000772")]
		[Address(RVA = "0x10BC280", Offset = "0x10BC280", VA = "0x10BC280")]
		private void FindLods()
		{
		}

		[Token(Token = "0x6000773")]
		[Address(RVA = "0x10BC3F4", Offset = "0x10BC3F4", VA = "0x10BC3F4")]
		public FindLodGroups()
		{
		}
	}
	[Token(Token = "0x200017A")]
	public class LODGroupSetup : MonoBehaviour
	{
		[Token(Token = "0x400062E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MeshCombiner meshCombiner;

		[Token(Token = "0x400062F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LODGroup lodGroup;

		[Token(Token = "0x4000630")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int lodGroupParentIndex;

		[Token(Token = "0x4000631")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int lodCount;

		[Token(Token = "0x4000632")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private LODGroup[] lodGroups;

		[Token(Token = "0x6000774")]
		[Address(RVA = "0x10BC3FC", Offset = "0x10BC3FC", VA = "0x10BC3FC")]
		public void Init(MeshCombiner meshCombiner, int lodGroupParentIndex)
		{
		}

		[Token(Token = "0x6000775")]
		[Address(RVA = "0x10BC4D4", Offset = "0x10BC4D4", VA = "0x10BC4D4")]
		private void GetSetup()
		{
		}

		[Token(Token = "0x6000776")]
		[Address(RVA = "0x10BC600", Offset = "0x10BC600", VA = "0x10BC600")]
		public void ApplySetup()
		{
		}

		[Token(Token = "0x6000777")]
		[Address(RVA = "0x10BC9B4", Offset = "0x10BC9B4", VA = "0x10BC9B4")]
		public void AddLODGroupsToChildren()
		{
		}

		[Token(Token = "0x6000778")]
		[Address(RVA = "0x10BCC78", Offset = "0x10BCC78", VA = "0x10BCC78")]
		public void RemoveLODGroupFromChildren()
		{
		}

		[Token(Token = "0x6000779")]
		[Address(RVA = "0x10BCD90", Offset = "0x10BCD90", VA = "0x10BCD90")]
		public LODGroupSetup()
		{
		}
	}
	[Token(Token = "0x200017B")]
	public class CamGeometryCapture : MonoBehaviour
	{
		[Token(Token = "0x4000633")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ComputeShader computeDepthToArray;

		[Token(Token = "0x4000634")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Int2 resolution;

		[Token(Token = "0x4000635")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Camera cam;

		[Token(Token = "0x4000636")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform t;

		[Token(Token = "0x4000637")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public RenderTexture rtCapture;

		[Token(Token = "0x4000638")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float[] heights;

		[Token(Token = "0x4000639")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Bounds bounds;

		[Token(Token = "0x400063A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float maxSize;

		[Token(Token = "0x600077A")]
		[Address(RVA = "0x10BCD98", Offset = "0x10BCD98", VA = "0x10BCD98")]
		public void Init()
		{
		}

		[Token(Token = "0x600077B")]
		[Address(RVA = "0x10BCE90", Offset = "0x10BCE90", VA = "0x10BCE90")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600077C")]
		[Address(RVA = "0x10BCEC0", Offset = "0x10BCEC0", VA = "0x10BCEC0")]
		private void DisposeRenderTexture(ref RenderTexture rt)
		{
		}

		[Token(Token = "0x600077D")]
		[Address(RVA = "0x10BCE94", Offset = "0x10BCE94", VA = "0x10BCE94")]
		public void DisposeRTCapture()
		{
		}

		[Token(Token = "0x600077E")]
		[Address(RVA = "0x10BCF74", Offset = "0x10BCF74", VA = "0x10BCF74")]
		public void RemoveTrianglesBelowSurface(Transform t, MeshCombineJobManager.MeshCombineJob meshCombineJob, MeshCache.SubMeshCache newMeshCache, ref byte[] vertexIsBelow)
		{
		}

		[Token(Token = "0x600077F")]
		[Address(RVA = "0x10BD2B4", Offset = "0x10BD2B4", VA = "0x10BD2B4")]
		public void Capture(Bounds bounds, int collisionMask, Vector3 direction, Int2 resolution)
		{
		}

		[Token(Token = "0x6000780")]
		[Address(RVA = "0x10BDA08", Offset = "0x10BDA08", VA = "0x10BDA08")]
		public void SetCamera(Vector3 direction)
		{
		}

		[Token(Token = "0x6000781")]
		[Address(RVA = "0x10BD754", Offset = "0x10BD754", VA = "0x10BD754")]
		public float GetHeight(Vector3 pos)
		{
			return default(float);
		}

		[Token(Token = "0x6000782")]
		[Address(RVA = "0x10BDBE4", Offset = "0x10BDBE4", VA = "0x10BDBE4")]
		public CamGeometryCapture()
		{
		}
	}
	[Token(Token = "0x200017C")]
	public class CombinedLODManager : MonoBehaviour
	{
		[Token(Token = "0x200017D")]
		public enum LodMode
		{
			[Token(Token = "0x400064A")]
			Automatic,
			[Token(Token = "0x400064B")]
			DebugLod
		}

		[Token(Token = "0x200017E")]
		public enum LodDistanceMode
		{
			[Token(Token = "0x400064D")]
			Automatic,
			[Token(Token = "0x400064E")]
			Manual
		}

		[Serializable]
		[Token(Token = "0x200017F")]
		public class LOD
		{
			[Token(Token = "0x400064F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform searchParent;

			[Token(Token = "0x4000650")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Sphere3 sphere;

			[Token(Token = "0x600078E")]
			[Address(RVA = "0x10BE1B8", Offset = "0x10BE1B8", VA = "0x10BE1B8")]
			public LOD()
			{
			}

			[Token(Token = "0x600078F")]
			[Address(RVA = "0x10BEAC4", Offset = "0x10BEAC4", VA = "0x10BEAC4")]
			public LOD(Transform searchParent)
			{
			}
		}

		[Token(Token = "0x2000180")]
		public class Cell : BaseOctree.Cell
		{
			[Token(Token = "0x4000651")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public Cell[] cells;

			[Token(Token = "0x4000652")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private AABB3 box;

			[Token(Token = "0x6000790")]
			[Address(RVA = "0x10BEAF4", Offset = "0x10BEAF4", VA = "0x10BEAF4")]
			public Cell()
			{
			}

			[Token(Token = "0x6000791")]
			[Address(RVA = "0x10BDD08", Offset = "0x10BDD08", VA = "0x10BDD08")]
			public Cell(Vector3 position, Vector3 size, int maxLevels)
			{
			}

			[Token(Token = "0x6000792")]
			[Address(RVA = "0x10BE228", Offset = "0x10BE228", VA = "0x10BE228")]
			public void AddMeshRenderer(MeshRenderer mr, Vector3 position, int lodLevel, int lodLevels)
			{
			}

			[Token(Token = "0x6000793")]
			[Address(RVA = "0x10BEAFC", Offset = "0x10BEAFC", VA = "0x10BEAFC")]
			private void AddMeshRendererInternal(MeshRenderer mr, Vector3 position, int lodLevel, int lodLevels)
			{
			}

			[Token(Token = "0x6000794")]
			[Address(RVA = "0x10BE3D8", Offset = "0x10BE3D8", VA = "0x10BE3D8")]
			public void AutoLodInternal(LOD[] lods, float lodCulledDistance)
			{
			}

			[Token(Token = "0x6000795")]
			[Address(RVA = "0x10BE754", Offset = "0x10BE754", VA = "0x10BE754")]
			public void LodInternal(LOD[] lods, int lodLevel)
			{
			}

			[Token(Token = "0x6000796")]
			[Address(RVA = "0x10BE934", Offset = "0x10BE934", VA = "0x10BE934")]
			public void DrawGizmos(LOD[] lods)
			{
			}

			[Token(Token = "0x6000797")]
			[Address(RVA = "0x10BEE58", Offset = "0x10BEE58", VA = "0x10BEE58")]
			public void DrawGizmosInternal()
			{
			}
		}

		[Token(Token = "0x2000181")]
		public class MaxCell : Cell
		{
			[Token(Token = "0x4000653")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			public List<MeshRenderer>[] mrList;

			[Token(Token = "0x4000654")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			public int currentLod;

			[Token(Token = "0x6000798")]
			[Address(RVA = "0x10BF034", Offset = "0x10BF034", VA = "0x10BF034")]
			public MaxCell()
			{
			}
		}

		[Token(Token = "0x400063B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool drawGizmos;

		[Token(Token = "0x400063C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LOD[] lods;

		[Token(Token = "0x400063D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float[] distances;

		[Token(Token = "0x400063E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public LodDistanceMode lodDistanceMode;

		[Token(Token = "0x400063F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public LodMode lodMode;

		[Token(Token = "0x4000640")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int showLod;

		[Token(Token = "0x4000641")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public bool lodCulled;

		[Token(Token = "0x4000642")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float lodCullDistance;

		[Token(Token = "0x4000643")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Vector3 octreeCenter;

		[Token(Token = "0x4000644")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Vector3 octreeSize;

		[Token(Token = "0x4000645")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public int maxLevels;

		[Token(Token = "0x4000646")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool search;

		[Token(Token = "0x4000647")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Cell octree;

		[Token(Token = "0x4000648")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Transform cameraMainT;

		[Token(Token = "0x6000783")]
		[Address(RVA = "0x10BDC28", Offset = "0x10BDC28", VA = "0x10BDC28")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000784")]
		[Address(RVA = "0x10BDC5C", Offset = "0x10BDC5C", VA = "0x10BDC5C")]
		private void InitOctree()
		{
		}

		[Token(Token = "0x6000785")]
		[Address(RVA = "0x10BDD10", Offset = "0x10BDD10", VA = "0x10BDD10")]
		private void Start()
		{
		}

		[Token(Token = "0x6000786")]
		[Address(RVA = "0x10BDE98", Offset = "0x10BDE98", VA = "0x10BDE98")]
		private void Update()
		{
		}

		[Token(Token = "0x6000787")]
		[Address(RVA = "0x10BDFBC", Offset = "0x10BDFBC", VA = "0x10BDFBC")]
		public void UpdateLods(MeshCombiner meshCombiner, int lodAmount)
		{
		}

		[Token(Token = "0x6000788")]
		[Address(RVA = "0x10BE1C0", Offset = "0x10BE1C0", VA = "0x10BE1C0")]
		public void UpdateDistances(MeshCombiner meshCombiner)
		{
		}

		[Token(Token = "0x6000789")]
		[Address(RVA = "0x10BDD3C", Offset = "0x10BDD3C", VA = "0x10BDD3C")]
		public void Search()
		{
		}

		[Token(Token = "0x600078A")]
		[Address(RVA = "0x10BE2B0", Offset = "0x10BE2B0", VA = "0x10BE2B0")]
		public void ResetOctree()
		{
		}

		[Token(Token = "0x600078B")]
		[Address(RVA = "0x10BDEC4", Offset = "0x10BDEC4", VA = "0x10BDEC4")]
		public void Lod(LodMode lodMode)
		{
		}

		[Token(Token = "0x600078C")]
		[Address(RVA = "0x10BE90C", Offset = "0x10BE90C", VA = "0x10BE90C")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x600078D")]
		[Address(RVA = "0x10BEA3C", Offset = "0x10BEA3C", VA = "0x10BEA3C")]
		public CombinedLODManager()
		{
		}
	}
	[Token(Token = "0x2000182")]
	public class MCSDynamicObject : MonoBehaviour
	{
		[Token(Token = "0x6000799")]
		[Address(RVA = "0x10BF03C", Offset = "0x10BF03C", VA = "0x10BF03C")]
		public MCSDynamicObject()
		{
		}
	}
	[Token(Token = "0x2000183")]
	[DefaultExecutionOrder(-94000000)]
	[ExecuteInEditMode]
	public class MeshCombineJobManager : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000184")]
		public class JobSettings
		{
			[Token(Token = "0x4000665")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public CombineJobMode combineJobMode;

			[Token(Token = "0x4000666")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public ThreadAmountMode threadAmountMode;

			[Token(Token = "0x4000667")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int combineMeshesPerFrame;

			[Token(Token = "0x4000668")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public bool useMultiThreading;

			[Token(Token = "0x4000669")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
			public bool useMainThread;

			[Token(Token = "0x400066A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public int customThreadAmount;

			[Token(Token = "0x400066B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public bool showStats;

			[Token(Token = "0x60007AB")]
			[Address(RVA = "0x10C02EC", Offset = "0x10C02EC", VA = "0x10C02EC")]
			public void CopySettings(JobSettings source)
			{
			}

			[Token(Token = "0x60007AC")]
			[Address(RVA = "0x10C2A18", Offset = "0x10C2A18", VA = "0x10C2A18")]
			public void ReportStatus()
			{
			}

			[Token(Token = "0x60007AD")]
			[Address(RVA = "0x10C29F8", Offset = "0x10C29F8", VA = "0x10C29F8")]
			public JobSettings()
			{
			}
		}

		[Token(Token = "0x2000185")]
		public enum CombineJobMode
		{
			[Token(Token = "0x400066D")]
			CombineAtOnce,
			[Token(Token = "0x400066E")]
			CombinePerFrame
		}

		[Token(Token = "0x2000186")]
		public enum ThreadAmountMode
		{
			[Token(Token = "0x4000670")]
			AllThreads,
			[Token(Token = "0x4000671")]
			HalfThreads,
			[Token(Token = "0x4000672")]
			Custom
		}

		[Token(Token = "0x2000187")]
		public enum ThreadState
		{
			[Token(Token = "0x4000674")]
			isFree,
			[Token(Token = "0x4000675")]
			isReady,
			[Token(Token = "0x4000676")]
			isRunning,
			[Token(Token = "0x4000677")]
			hasError
		}

		[Token(Token = "0x2000188")]
		public class MeshCombineJobsThread
		{
			[Token(Token = "0x4000678")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int threadId;

			[Token(Token = "0x4000679")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public ThreadState threadState;

			[Token(Token = "0x400067A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Queue<MeshCombineJob> meshCombineJobs;

			[Token(Token = "0x400067B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Queue<NewMeshObject> newMeshObjectsDone;

			[Token(Token = "0x60007AE")]
			[Address(RVA = "0x10BF734", Offset = "0x10BF734", VA = "0x10BF734")]
			public MeshCombineJobsThread(int threadId)
			{
			}

			[Token(Token = "0x60007AF")]
			[Address(RVA = "0x10C17D4", Offset = "0x10C17D4", VA = "0x10C17D4")]
			public void ExecuteJobsThread(object state)
			{
			}
		}

		[Token(Token = "0x2000189")]
		public class MeshCombineJob
		{
			[Token(Token = "0x400067C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public MeshCombiner meshCombiner;

			[Token(Token = "0x400067D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public MeshObjectsHolder meshObjectsHolder;

			[Token(Token = "0x400067E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Transform parent;

			[Token(Token = "0x400067F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 position;

			[Token(Token = "0x4000680")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public int startIndex;

			[Token(Token = "0x4000681")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public int endIndex;

			[Token(Token = "0x4000682")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public bool firstMesh;

			[Token(Token = "0x4000683")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
			public bool intersectsSurface;

			[Token(Token = "0x4000684")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public int backFaceTrianglesRemoved;

			[Token(Token = "0x4000685")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			public int trianglesRemoved;

			[Token(Token = "0x4000686")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public bool abort;

			[Token(Token = "0x4000687")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public string name;

			[Token(Token = "0x60007B0")]
			[Address(RVA = "0x10C10BC", Offset = "0x10C10BC", VA = "0x10C10BC")]
			public MeshCombineJob(MeshCombiner meshCombiner, MeshObjectsHolder meshObjectsHolder, Transform parent, Vector3 position, int startIndex, int length, bool firstMesh, bool intersectsSurface)
			{
			}
		}

		[Token(Token = "0x200018A")]
		public class NewMeshObject
		{
			[Token(Token = "0x4000688")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static FastList<Vector3> weldVertices;

			[Token(Token = "0x4000689")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public MeshCombineJob meshCombineJob;

			[Token(Token = "0x400068A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public MeshCache.SubMeshCache newMeshCache;

			[Token(Token = "0x400068B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public bool allSkipped;

			[Token(Token = "0x400068C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public Vector3 newPosition;

			[Token(Token = "0x400068D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private byte[] vertexIsBelow;

			[Token(Token = "0x400068E")]
			private const byte belowSurface = 1;

			[Token(Token = "0x400068F")]
			private const byte aboveSurface = 2;

			[Token(Token = "0x60007B1")]
			[Address(RVA = "0x10C2C64", Offset = "0x10C2C64", VA = "0x10C2C64")]
			public NewMeshObject()
			{
			}

			[Token(Token = "0x60007B2")]
			[Address(RVA = "0x10C2CEC", Offset = "0x10C2CEC", VA = "0x10C2CEC")]
			public void Combine(MeshCombineJob meshCombineJob)
			{
			}

			[Token(Token = "0x60007B3")]
			[Address(RVA = "0x10C3D38", Offset = "0x10C3D38", VA = "0x10C3D38")]
			private void PrintMissingArrayWarning(MeshCombiner meshCombiner, GameObject go, Mesh mesh, string text)
			{
			}

			[Token(Token = "0x60007B4")]
			private void HasArray<T>(ref bool hasNewArray, bool hasArray, ref T[] newArray, Array array, int vertexCount, int totalVertices, bool useDefaultValue = false, [Optional] T defaultValue)
			{
			}

			[Token(Token = "0x60007B5")]
			private void FillArray<T>(T[] array, int offset, int length, T value)
			{
			}

			[Token(Token = "0x60007B6")]
			[Address(RVA = "0x10C4058", Offset = "0x10C4058", VA = "0x10C4058")]
			public void RemoveTrianglesBelowSurface(Transform t, MeshCombineJob meshCombineJob)
			{
			}

			[Token(Token = "0x60007B7")]
			[Address(RVA = "0x10C39F4", Offset = "0x10C39F4", VA = "0x10C39F4")]
			public void RemoveBackFaceTriangles()
			{
			}

			[Token(Token = "0x60007B8")]
			[Address(RVA = "0x10C43D4", Offset = "0x10C43D4", VA = "0x10C43D4")]
			public void WeldVertices(MeshCombineJob meshCombineJob)
			{
			}

			[Token(Token = "0x60007B9")]
			[Address(RVA = "0x10C4850", Offset = "0x10C4850", VA = "0x10C4850")]
			private void ArrangeTriangles()
			{
			}

			[Token(Token = "0x60007BA")]
			[Address(RVA = "0x10C1E5C", Offset = "0x10C1E5C", VA = "0x10C1E5C")]
			public void CreateMesh()
			{
			}
		}

		[Token(Token = "0x4000655")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static MeshCombineJobManager instance;

		[Token(Token = "0x4000656")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public JobSettings jobSettings;

		[NonSerialized]
		[Token(Token = "0x4000657")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FastList<NewMeshObject> newMeshObjectsPool;

		[Token(Token = "0x4000658")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Dictionary<Mesh, MeshCache> meshCacheDictionary;

		[NonSerialized]
		[Token(Token = "0x4000659")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int totalNewMeshObjects;

		[Token(Token = "0x400065A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Queue<MeshCombineJob> meshCombineJobs;

		[Token(Token = "0x400065B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public MeshCombineJobsThread[] meshCombineJobsThreads;

		[Token(Token = "0x400065C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public CamGeometryCapture camGeometryCapture;

		[Token(Token = "0x400065D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int cores;

		[Token(Token = "0x400065E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public int threadAmount;

		[Token(Token = "0x400065F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public int startThreadId;

		[Token(Token = "0x4000660")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public int endThreadId;

		[Token(Token = "0x4000661")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool abort;

		[Token(Token = "0x4000662")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private MeshCache.SubMeshCache tempMeshCache;

		[Token(Token = "0x4000663")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Ray ray;

		[Token(Token = "0x4000664")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private RaycastHit hitInfo;

		[Token(Token = "0x600079A")]
		[Address(RVA = "0x10BF044", Offset = "0x10BF044", VA = "0x10BF044")]
		public static MeshCombineJobManager CreateInstance(MeshCombiner meshCombiner, GameObject instantiatePrefab)
		{
			return null;
		}

		[Token(Token = "0x600079B")]
		[Address(RVA = "0x10BF474", Offset = "0x10BF474", VA = "0x10BF474")]
		public static void ResetMeshCache()
		{
		}

		[Token(Token = "0x600079C")]
		[Address(RVA = "0x10BF530", Offset = "0x10BF530", VA = "0x10BF530")]
		private void Awake()
		{
		}

		[Token(Token = "0x600079D")]
		[Address(RVA = "0x10BF588", Offset = "0x10BF588", VA = "0x10BF588")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600079E")]
		[Address(RVA = "0x10BF608", Offset = "0x10BF608", VA = "0x10BF608")]
		public void Init()
		{
		}

		[Token(Token = "0x600079F")]
		[Address(RVA = "0x10BF820", Offset = "0x10BF820", VA = "0x10BF820")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60007A0")]
		[Address(RVA = "0x10BF824", Offset = "0x10BF824", VA = "0x10BF824")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60007A1")]
		[Address(RVA = "0x10BFCC8", Offset = "0x10BFCC8", VA = "0x10BFCC8")]
		private void Update()
		{
		}

		[Token(Token = "0x60007A2")]
		[Address(RVA = "0x10BFCF0", Offset = "0x10BFCF0", VA = "0x10BFCF0")]
		private void MyUpdate()
		{
		}

		[Token(Token = "0x60007A3")]
		[Address(RVA = "0x10BF258", Offset = "0x10BF258", VA = "0x10BF258")]
		public void SetJobMode(JobSettings newJobSettings)
		{
		}

		[Token(Token = "0x60007A4")]
		[Address(RVA = "0x10C0328", Offset = "0x10C0328", VA = "0x10C0328")]
		public void AddJob(MeshCombiner meshCombiner, MeshObjectsHolder meshObjectsHolder, Transform parent, Vector3 position)
		{
		}

		[Token(Token = "0x60007A5")]
		[Address(RVA = "0x10C11D0", Offset = "0x10C11D0", VA = "0x10C11D0")]
		private void EnqueueJob(MeshCombiner meshCombiner, MeshCombineJob meshCombineJob)
		{
		}

		[Token(Token = "0x60007A6")]
		[Address(RVA = "0x10C126C", Offset = "0x10C126C", VA = "0x10C126C")]
		public int MeshIntersectsSurface(MeshCombiner meshCombiner, CachedGameObject cachedGO)
		{
			return default(int);
		}

		[Token(Token = "0x60007A7")]
		[Address(RVA = "0x10BF8E0", Offset = "0x10BF8E0", VA = "0x10BF8E0")]
		public void AbortJobs()
		{
		}

		[Token(Token = "0x60007A8")]
		[Address(RVA = "0x10BFCF4", Offset = "0x10BFCF4", VA = "0x10BFCF4")]
		public void ExecuteJobs()
		{
		}

		[Token(Token = "0x60007A9")]
		[Address(RVA = "0x10C1484", Offset = "0x10C1484", VA = "0x10C1484")]
		public void CombineMeshesDone(MeshCombineJobsThread meshCombineJobThread)
		{
		}

		[Token(Token = "0x60007AA")]
		[Address(RVA = "0x10C27CC", Offset = "0x10C27CC", VA = "0x10C27CC")]
		public MeshCombineJobManager()
		{
		}
	}
	[Token(Token = "0x200018B")]
	public class MeshCache
	{
		[Token(Token = "0x200018C")]
		public class SubMeshCache
		{
			[Token(Token = "0x4000694")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3[] vertices;

			[Token(Token = "0x4000695")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Vector3[] normals;

			[Token(Token = "0x4000696")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector4[] tangents;

			[Token(Token = "0x4000697")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector2[] uv;

			[Token(Token = "0x4000698")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Vector2[] uv2;

			[Token(Token = "0x4000699")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Vector2[] uv3;

			[Token(Token = "0x400069A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public Vector2[] uv4;

			[Token(Token = "0x400069B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Color32[] colors32;

			[Token(Token = "0x400069C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public int[] triangles;

			[Token(Token = "0x400069D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public bool hasNormals;

			[Token(Token = "0x400069E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
			public bool hasTangents;

			[Token(Token = "0x400069F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5A")]
			public bool hasUv;

			[Token(Token = "0x40006A0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5B")]
			public bool hasUv2;

			[Token(Token = "0x40006A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public bool hasUv3;

			[Token(Token = "0x40006A2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5D")]
			public bool hasUv4;

			[Token(Token = "0x40006A3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5E")]
			public bool hasColors;

			[Token(Token = "0x40006A4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public int vertexCount;

			[Token(Token = "0x40006A5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			public int triangleCount;

			[Token(Token = "0x60007BC")]
			[Address(RVA = "0x10C3934", Offset = "0x10C3934", VA = "0x10C3934")]
			public SubMeshCache()
			{
			}

			[Token(Token = "0x60007BD")]
			[Address(RVA = "0x10C491C", Offset = "0x10C491C", VA = "0x10C491C")]
			public void CopySubMeshCache(SubMeshCache source)
			{
			}

			[Token(Token = "0x60007BE")]
			public void CopyArray<T>(Array sourceArray, ref T[] destinationArray, int vertexCount)
			{
			}

			[Token(Token = "0x60007BF")]
			[Address(RVA = "0x10C5334", Offset = "0x10C5334", VA = "0x10C5334")]
			public SubMeshCache(Mesh mesh, int subMeshIndex)
			{
			}

			[Token(Token = "0x60007C0")]
			[Address(RVA = "0x10C5398", Offset = "0x10C5398", VA = "0x10C5398")]
			public SubMeshCache(Mesh mesh, bool assignTriangles)
			{
			}

			[Token(Token = "0x60007C1")]
			[Address(RVA = "0x10C5004", Offset = "0x10C5004", VA = "0x10C5004")]
			public SubMeshCache(Mesh mesh, Mesh additionalMesh, bool assignTriangles)
			{
			}

			[Token(Token = "0x60007C2")]
			[Address(RVA = "0x10C53A4", Offset = "0x10C53A4", VA = "0x10C53A4")]
			public void CheckHasArrays()
			{
			}

			[Token(Token = "0x60007C3")]
			[Address(RVA = "0x10C39E8", Offset = "0x10C39E8", VA = "0x10C39E8")]
			public void ResetHasBooleans()
			{
			}

			[Token(Token = "0x60007C4")]
			[Address(RVA = "0x10C393C", Offset = "0x10C393C", VA = "0x10C393C")]
			public void Init(bool initTriangles = true)
			{
			}

			[Token(Token = "0x60007C5")]
			[Address(RVA = "0x10C4AE4", Offset = "0x10C4AE4", VA = "0x10C4AE4")]
			public void RebuildVertexBuffer(SubMeshCache sub, bool resizeArrays)
			{
			}
		}

		[Token(Token = "0x4000690")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Mesh mesh;

		[Token(Token = "0x4000691")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Mesh additionalMesh;

		[Token(Token = "0x4000692")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SubMeshCache[] subMeshCache;

		[Token(Token = "0x4000693")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int subMeshCount;

		[Token(Token = "0x60007BB")]
		[Address(RVA = "0x10C0EA0", Offset = "0x10C0EA0", VA = "0x10C0EA0")]
		public MeshCache(Mesh mesh, Mesh additionalMesh)
		{
		}
	}
	[Token(Token = "0x200018D")]
	public static class MeshExtensionAlloc
	{
		[Token(Token = "0x60007C6")]
		[Address(RVA = "0x10C5450", Offset = "0x10C5450", VA = "0x10C5450")]
		public static void ApplyVertices(Mesh mesh, Vector3[] vertices, int length)
		{
		}

		[Token(Token = "0x60007C7")]
		[Address(RVA = "0x10C54D8", Offset = "0x10C54D8", VA = "0x10C54D8")]
		public static void ApplyNormals(Mesh mesh, Vector3[] normals, int length)
		{
		}

		[Token(Token = "0x60007C8")]
		[Address(RVA = "0x10C5560", Offset = "0x10C5560", VA = "0x10C5560")]
		public static void ApplyTangents(Mesh mesh, Vector4[] tangents, int length)
		{
		}

		[Token(Token = "0x60007C9")]
		[Address(RVA = "0x10C55E8", Offset = "0x10C55E8", VA = "0x10C55E8")]
		public static void ApplyUvs(Mesh mesh, int channel, Vector2[] uvs, int length)
		{
		}

		[Token(Token = "0x60007CA")]
		[Address(RVA = "0x10C56FC", Offset = "0x10C56FC", VA = "0x10C56FC")]
		public static void ApplyColors32(Mesh mesh, Color32[] colors, int length)
		{
		}

		[Token(Token = "0x60007CB")]
		[Address(RVA = "0x10C5784", Offset = "0x10C5784", VA = "0x10C5784")]
		public static void ApplyTriangles(Mesh mesh, int[] triangles, int length)
		{
		}
	}
	[Token(Token = "0x200018E")]
	public enum CombineMode
	{
		[Token(Token = "0x40006A7")]
		StaticObjects,
		[Token(Token = "0x40006A8")]
		DynamicObjects
	}
	[Token(Token = "0x200018F")]
	[ExecuteInEditMode]
	public class MeshCombiner : MonoBehaviour
	{
		[Token(Token = "0x2000190")]
		public enum ObjectType
		{
			[Token(Token = "0x4000727")]
			Normal,
			[Token(Token = "0x4000728")]
			LodGroup,
			[Token(Token = "0x4000729")]
			LodRenderer
		}

		[Token(Token = "0x2000191")]
		public enum HandleComponent
		{
			[Token(Token = "0x400072B")]
			Disable,
			[Token(Token = "0x400072C")]
			Destroy
		}

		[Token(Token = "0x2000192")]
		public enum ObjectCenter
		{
			[Token(Token = "0x400072E")]
			BoundsCenter,
			[Token(Token = "0x400072F")]
			TransformPosition
		}

		[Token(Token = "0x2000193")]
		public enum BackFaceTriangleMode
		{
			[Token(Token = "0x4000731")]
			Transform,
			[Token(Token = "0x4000732")]
			Box,
			[Token(Token = "0x4000733")]
			Direction,
			[Token(Token = "0x4000734")]
			EulerAngles
		}

		[Token(Token = "0x2000194")]
		public delegate void EventMethod(MeshCombiner meshCombiner);

		[Token(Token = "0x2000195")]
		public enum RebakeLightingMode
		{
			[Token(Token = "0x4000736")]
			CopyLightmapUvs,
			[Token(Token = "0x4000737")]
			RegenarateLightmapUvs
		}

		[Serializable]
		[Token(Token = "0x2000196")]
		public class SearchOptions
		{
			[Token(Token = "0x2000197")]
			public enum ComponentCondition
			{
				[Token(Token = "0x4000754")]
				And,
				[Token(Token = "0x4000755")]
				Or,
				[Token(Token = "0x4000756")]
				Not
			}

			[Token(Token = "0x2000198")]
			public enum LODGroupSearchMode
			{
				[Token(Token = "0x4000758")]
				LodGroup,
				[Token(Token = "0x4000759")]
				LodRenderers
			}

			[Token(Token = "0x4000738")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool foldoutSearchParents;

			[Token(Token = "0x4000739")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
			public bool foldoutSearchConditions;

			[Token(Token = "0x400073A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public GameObject parent;

			[Token(Token = "0x400073B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GameObject[] parentGOs;

			[Token(Token = "0x400073C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public ObjectCenter objectCenter;

			[Token(Token = "0x400073D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public LODGroupSearchMode lodGroupSearchMode;

			[Token(Token = "0x400073E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public bool useSearchBox;

			[Token(Token = "0x400073F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public Bounds searchBoxBounds;

			[Token(Token = "0x4000740")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			public bool searchBoxSquare;

			[Token(Token = "0x4000741")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public Vector3 searchBoxPivot;

			[Token(Token = "0x4000742")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public Vector3 searchBoxSize;

			[Token(Token = "0x4000743")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public bool useMaxBoundsFactor;

			[Token(Token = "0x4000744")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			public float maxBoundsFactor;

			[Token(Token = "0x4000745")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			public bool useVertexInputLimit;

			[Token(Token = "0x4000746")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			public int vertexInputLimit;

			[Token(Token = "0x4000747")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			public bool useLayerMask;

			[Token(Token = "0x4000748")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			public LayerMask layerMask;

			[Token(Token = "0x4000749")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			public bool useTag;

			[Token(Token = "0x400074A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			public string tag;

			[Token(Token = "0x400074B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			public bool useNameContains;

			[Token(Token = "0x400074C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			public List<string> nameContainList;

			[Token(Token = "0x400074D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			public bool onlyActive;

			[Token(Token = "0x400074E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA1")]
			public bool onlyStatic;

			[Token(Token = "0x400074F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA2")]
			public bool onlyActiveMeshRenderers;

			[Token(Token = "0x4000750")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA3")]
			public bool useComponentsFilter;

			[Token(Token = "0x4000751")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
			public ComponentCondition componentCondition;

			[Token(Token = "0x4000752")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			public List<string> componentNameList;

			[Token(Token = "0x60007FF")]
			[Address(RVA = "0x10C80B4", Offset = "0x10C80B4", VA = "0x10C80B4")]
			public void GetSearchBoxBounds()
			{
			}

			[Token(Token = "0x6000800")]
			[Address(RVA = "0x10CB914", Offset = "0x10CB914", VA = "0x10CB914")]
			public SearchOptions()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000199")]
		public class LODGroupSettings
		{
			[Token(Token = "0x400075A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool animateCrossFading;

			[Token(Token = "0x400075B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public LODFadeMode fadeMode;

			[Token(Token = "0x400075C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public LODSettings[] lodSettings;

			[Token(Token = "0x6000801")]
			[Address(RVA = "0x10C75AC", Offset = "0x10C75AC", VA = "0x10C75AC")]
			public LODGroupSettings(int lodParentIndex)
			{
			}

			[Token(Token = "0x6000802")]
			[Address(RVA = "0x10CBA4C", Offset = "0x10CBA4C", VA = "0x10CBA4C")]
			public void CopyFromLodGroup(LODGroup lodGroup, LOD[] lods)
			{
			}

			[Token(Token = "0x6000803")]
			[Address(RVA = "0x10CBAEC", Offset = "0x10CBAEC", VA = "0x10CBAEC")]
			public void CopyToLodGroup(LODGroup lodGroup, LOD[] lods)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200019A")]
		public class LODSettings
		{
			[Token(Token = "0x400075D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float screenRelativeTransitionHeight;

			[Token(Token = "0x400075E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float fadeTransitionWidth;

			[Token(Token = "0x6000804")]
			[Address(RVA = "0x10CBA24", Offset = "0x10CBA24", VA = "0x10CBA24")]
			public LODSettings(float screenRelativeTransitionHeight)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200019B")]
		public class LodParentHolder
		{
			[Token(Token = "0x400075F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public GameObject go;

			[Token(Token = "0x4000760")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Transform t;

			[Token(Token = "0x4000761")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public bool found;

			[Token(Token = "0x4000762")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public int[] lods;

			[Token(Token = "0x6000805")]
			[Address(RVA = "0x10CA070", Offset = "0x10CA070", VA = "0x10CA070")]
			public void Init(int lodCount)
			{
			}

			[Token(Token = "0x6000806")]
			[Address(RVA = "0x10C9E74", Offset = "0x10C9E74", VA = "0x10C9E74")]
			public void Create(MeshCombiner meshCombiner, int lodParentIndex)
			{
			}

			[Token(Token = "0x6000807")]
			[Address(RVA = "0x10CA0D4", Offset = "0x10CA0D4", VA = "0x10CA0D4")]
			public void Reset()
			{
			}

			[Token(Token = "0x6000808")]
			[Address(RVA = "0x10CBB90", Offset = "0x10CBB90", VA = "0x10CBB90")]
			public LodParentHolder()
			{
			}
		}

		[Token(Token = "0x40006A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static EventMethod onInit;

		[Token(Token = "0x40006AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static List<MeshCombiner> instances;

		[Token(Token = "0x40006AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public MeshCombineJobManager.JobSettings jobSettings;

		[Token(Token = "0x40006AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public LODGroupSettings[] lodGroupsSettings;

		[Token(Token = "0x40006B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public ComputeShader computeDepthToArray;

		[Token(Token = "0x40006B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool useCustomInstantiatePrefab;

		[Token(Token = "0x40006B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public GameObject instantiatePrefab;

		[Token(Token = "0x40006B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool instantiatePrefabValid;

		[Token(Token = "0x40006B4")]
		public const int maxLodCount = 8;

		[Token(Token = "0x40006B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public string saveMeshesFolder;

		[Token(Token = "0x40006B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public ObjectOctree.Cell octree;

		[Token(Token = "0x40006B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public List<ObjectOctree.MaxCell> changedCells;

		[NonSerialized]
		[Token(Token = "0x40006B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public bool octreeContainsObjects;

		[Token(Token = "0x40006B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
		public bool unitySettingsFoldout;

		[Token(Token = "0x40006BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public SearchOptions searchOptions;

		[Token(Token = "0x40006BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public bool useOriginalObjectsHideFlags;

		[Token(Token = "0x40006BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public HideFlags orginalObjectsHideFlags;

		[Token(Token = "0x40006BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public CombineConditionSettings combineConditionSettings;

		[Token(Token = "0x40006BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public bool outputSettingsFoldout;

		[Token(Token = "0x40006BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public CombineMode combineMode;

		[Token(Token = "0x40006C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public int cellSize;

		[Token(Token = "0x40006C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public Vector3 cellOffset;

		[Token(Token = "0x40006C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public int cellCount;

		[Token(Token = "0x40006C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public bool removeOriginalMeshReference;

		[Token(Token = "0x40006C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB5")]
		public bool usedRemoveOriginalMeshRederences;

		[Token(Token = "0x40006C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB6")]
		public bool useVertexOutputLimit;

		[Token(Token = "0x40006C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public int vertexOutputLimit;

		[Token(Token = "0x40006C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public RebakeLightingMode rebakeLightingMode;

		[Token(Token = "0x40006C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public bool copyBakedLighting;

		[Token(Token = "0x40006C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC1")]
		public bool validCopyBakedLighting;

		[Token(Token = "0x40006CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC2")]
		public bool applyToLightingDataAsset;

		[Token(Token = "0x40006CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC3")]
		public bool rebakeLighting;

		[Token(Token = "0x40006CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public bool validRebakeLighting;

		[Token(Token = "0x40006CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public float scaleInLightmap;

		[Token(Token = "0x40006CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public bool addMeshColliders;

		[Token(Token = "0x40006CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public PhysicMaterial physicsMaterial;

		[Token(Token = "0x40006D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public bool addMeshCollidersInRange;

		[Token(Token = "0x40006D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		public Bounds addMeshCollidersBounds;

		[Token(Token = "0x40006D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		public bool makeMeshesUnreadable;

		[Token(Token = "0x40006D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF5")]
		public bool excludeSingleMeshes;

		[Token(Token = "0x40006D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF6")]
		public bool removeTrianglesBelowSurface;

		[Token(Token = "0x40006D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF7")]
		public bool noColliders;

		[Token(Token = "0x40006D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public LayerMask surfaceLayerMask;

		[Token(Token = "0x40006D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		public float maxSurfaceHeight;

		[Token(Token = "0x40006D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public bool removeOverlappingTriangles;

		[Token(Token = "0x40006D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x101")]
		public bool removeSamePositionTriangles;

		[Token(Token = "0x40006DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x102")]
		public bool reportFoundObjectsNotOnOverlapLayerMask;

		[Token(Token = "0x40006DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public GameObject overlappingCollidersGO;

		[Token(Token = "0x40006DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public LayerMask overlapLayerMask;

		[Token(Token = "0x40006DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		public int voxelizeLayer;

		[Token(Token = "0x40006DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public int lodGroupLayer;

		[Token(Token = "0x40006DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public GameObject overlappingNonCombineGO;

		[Token(Token = "0x40006E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public bool disableOverlappingNonCombineGO;

		[Token(Token = "0x40006E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x129")]
		public bool removeBackFaceTriangles;

		[Token(Token = "0x40006E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		public BackFaceTriangleMode backFaceTriangleMode;

		[Token(Token = "0x40006E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public Transform backFaceT;

		[Token(Token = "0x40006E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		public Vector3 backFaceDirection;

		[Token(Token = "0x40006E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
		public Vector3 backFaceRotation;

		[Token(Token = "0x40006E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		public Bounds backFaceBounds;

		[Token(Token = "0x40006E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		public bool weldVertices;

		[Token(Token = "0x40006E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x169")]
		public bool weldSnapVertices;

		[Token(Token = "0x40006E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		public float weldSnapSize;

		[Token(Token = "0x40006EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public bool weldIncludeNormals;

		[Token(Token = "0x40006EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x171")]
		public bool jobSettingsFoldout;

		[Token(Token = "0x40006EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x172")]
		public bool runtimeSettingsFoldout;

		[Token(Token = "0x40006ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x173")]
		public bool combineInRuntime;

		[Token(Token = "0x40006EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
		public bool combineOnStart;

		[Token(Token = "0x40006EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x175")]
		public bool useCombineSwapKey;

		[Token(Token = "0x40006F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		public KeyCode combineSwapKey;

		[Token(Token = "0x40006F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
		public HandleComponent originalMeshRenderers;

		[Token(Token = "0x40006F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		public HandleComponent originalLODGroups;

		[Token(Token = "0x40006F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
		public bool meshSaveSettingsFoldout;

		[Token(Token = "0x40006F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x185")]
		public bool deleteFilesFromSaveFolder;

		[Token(Token = "0x40006F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		public Vector3 oldPosition;

		[Token(Token = "0x40006F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
		public Vector3 oldScale;

		[Token(Token = "0x40006F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		public LodParentHolder[] lodParentHolders;

		[Token(Token = "0x40006F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		[HideInInspector]
		public List<GameObject> combinedGameObjects;

		[Token(Token = "0x40006F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		[HideInInspector]
		public List<CachedGameObject> foundObjects;

		[Token(Token = "0x40006FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		[HideInInspector]
		public List<CachedLodGameObject> foundLodObjects;

		[Token(Token = "0x40006FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		[HideInInspector]
		public List<LODGroup> foundLodGroups;

		[Token(Token = "0x40006FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		[HideInInspector]
		public List<Collider> foundColliders;

		[Token(Token = "0x40006FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		public HashSet<LODGroup> uniqueFoundLodGroups;

		[Token(Token = "0x40006FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		public HashSet<Mesh> unreadableMeshes;

		[Token(Token = "0x40006FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		public HashSet<Mesh> selectImportSettingsMeshes;

		[Token(Token = "0x4000700")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		public FoundCombineConditions foundCombineConditions;

		[Token(Token = "0x4000701")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		public HashSet<MeshCombineJobManager.MeshCombineJob> meshCombineJobs;

		[Token(Token = "0x4000702")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		public int totalMeshCombineJobs;

		[Token(Token = "0x4000703")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1FC")]
		public int mrDisabledCount;

		[Token(Token = "0x4000704")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		public bool combined;

		[Token(Token = "0x4000705")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x201")]
		public bool isCombining;

		[Token(Token = "0x4000706")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x202")]
		public bool activeOriginal;

		[Token(Token = "0x4000707")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x203")]
		public bool combinedActive;

		[Token(Token = "0x4000708")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x204")]
		public bool drawGizmos;

		[Token(Token = "0x4000709")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x205")]
		public bool drawMeshBounds;

		[Token(Token = "0x400070A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		public int originalTotalVertices;

		[Token(Token = "0x400070B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20C")]
		public int originalTotalTriangles;

		[Token(Token = "0x400070C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		public int newTotalVertices;

		[Token(Token = "0x400070D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x214")]
		public int newTotalTriangles;

		[Token(Token = "0x400070E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		public int originalDrawCalls;

		[Token(Token = "0x400070F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21C")]
		public int newDrawCalls;

		[Token(Token = "0x4000710")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		public int originalTotalNormalChannels;

		[Token(Token = "0x4000711")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x224")]
		public int originalTotalTangentChannels;

		[Token(Token = "0x4000712")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		public int originalTotalUvChannels;

		[Token(Token = "0x4000713")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22C")]
		public int originalTotalUv2Channels;

		[Token(Token = "0x4000714")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		public int originalTotalUv3Channels;

		[Token(Token = "0x4000715")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x234")]
		public int originalTotalUv4Channels;

		[Token(Token = "0x4000716")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
		public int originalTotalColorChannels;

		[Token(Token = "0x4000717")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x23C")]
		public int newTotalNormalChannels;

		[Token(Token = "0x4000718")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		public int newTotalTangentChannels;

		[Token(Token = "0x4000719")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x244")]
		public int newTotalUvChannels;

		[Token(Token = "0x400071A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
		public int newTotalUv2Channels;

		[Token(Token = "0x400071B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24C")]
		public int newTotalUv3Channels;

		[Token(Token = "0x400071C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
		public int newTotalUv4Channels;

		[Token(Token = "0x400071D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x254")]
		public int newTotalColorChannels;

		[Token(Token = "0x400071E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
		public float combineTime;

		[NonSerialized]
		[Token(Token = "0x400071F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
		public MeshCombinerData data;

		[Token(Token = "0x4000720")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
		public FastList<MeshColliderAdd> addMeshCollidersList;

		[Token(Token = "0x4000721")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
		private HashSet<Transform> uniqueLodObjects;

		[NonSerialized]
		[Token(Token = "0x4000722")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
		private MeshCombiner thisInstance;

		[Token(Token = "0x4000723")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
		private bool hasFoundFirstObject;

		[Token(Token = "0x4000724")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x284")]
		private Bounds bounds;

		[Token(Token = "0x4000725")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
		private Stopwatch stopwatch;

		[Token(Token = "0x14000003")]
		public event EventMethod onCombiningStart
		{
			[Token(Token = "0x60007CC")]
			[Address(RVA = "0x10C580C", Offset = "0x10C580C", VA = "0x10C580C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60007CD")]
			[Address(RVA = "0x10C58A8", Offset = "0x10C58A8", VA = "0x10C58A8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000004")]
		public event EventMethod onCombiningAbort
		{
			[Token(Token = "0x60007CE")]
			[Address(RVA = "0x10C5944", Offset = "0x10C5944", VA = "0x10C5944")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60007CF")]
			[Address(RVA = "0x10C59E0", Offset = "0x10C59E0", VA = "0x10C59E0")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000005")]
		public event EventMethod onCombiningReady
		{
			[Token(Token = "0x60007D0")]
			[Address(RVA = "0x10C5A7C", Offset = "0x10C5A7C", VA = "0x10C5A7C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60007D1")]
			[Address(RVA = "0x10C5B18", Offset = "0x10C5B18", VA = "0x10C5B18")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x60007D2")]
		[Address(RVA = "0x10C5BB4", Offset = "0x10C5BB4", VA = "0x10C5BB4")]
		public void AddMeshColliders()
		{
		}

		[Token(Token = "0x60007D3")]
		[Address(RVA = "0x10C5DEC", Offset = "0x10C5DEC", VA = "0x10C5DEC")]
		public void ExecuteOnCombiningReady()
		{
		}

		[Token(Token = "0x60007D4")]
		[Address(RVA = "0x10C66A0", Offset = "0x10C66A0", VA = "0x10C66A0")]
		private void Awake()
		{
		}

		[Token(Token = "0x60007D5")]
		[Address(RVA = "0x10C6814", Offset = "0x10C6814", VA = "0x10C6814")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60007D6")]
		[Address(RVA = "0x10C66A4", Offset = "0x10C66A4", VA = "0x10C66A4")]
		private void Init()
		{
		}

		[Token(Token = "0x60007D7")]
		[Address(RVA = "0x10C6818", Offset = "0x10C6818", VA = "0x10C6818")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60007D8")]
		[Address(RVA = "0x10C68A8", Offset = "0x10C68A8", VA = "0x10C68A8")]
		public void InitData()
		{
		}

		[Token(Token = "0x60007D9")]
		[Address(RVA = "0x10C6D80", Offset = "0x10C6D80", VA = "0x10C6D80")]
		private void Start()
		{
		}

		[Token(Token = "0x60007DA")]
		[Address(RVA = "0x10C70E8", Offset = "0x10C70E8", VA = "0x10C70E8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60007DB")]
		[Address(RVA = "0x10C7284", Offset = "0x10C7284", VA = "0x10C7284")]
		public static MeshCombiner GetInstance(string name)
		{
			return null;
		}

		[Token(Token = "0x60007DC")]
		[Address(RVA = "0x10C73B8", Offset = "0x10C73B8", VA = "0x10C73B8")]
		public void CopyJobSettingsToAllInstances()
		{
		}

		[Token(Token = "0x60007DD")]
		[Address(RVA = "0x10C6EB8", Offset = "0x10C6EB8", VA = "0x10C6EB8")]
		public void InitMeshCombineJobManager()
		{
		}

		[Token(Token = "0x60007DE")]
		[Address(RVA = "0x10C74A0", Offset = "0x10C74A0", VA = "0x10C74A0")]
		public void CreateLodGroupsSettings()
		{
		}

		[Token(Token = "0x60007DF")]
		[Address(RVA = "0x10C6F60", Offset = "0x10C6F60", VA = "0x10C6F60")]
		private void StartRuntime()
		{
		}

		[Token(Token = "0x60007E0")]
		[Address(RVA = "0x10C7A88", Offset = "0x10C7A88", VA = "0x10C7A88")]
		public void DestroyCombinedObjects()
		{
		}

		[Token(Token = "0x60007E1")]
		[Address(RVA = "0x10C7EB0", Offset = "0x10C7EB0", VA = "0x10C7EB0")]
		public void Reset()
		{
		}

		[Token(Token = "0x60007E2")]
		[Address(RVA = "0x10C7BB0", Offset = "0x10C7BB0", VA = "0x10C7BB0")]
		public void AbortAndClearMeshCombineJobs(bool executeAbortEvent = true)
		{
		}

		[Token(Token = "0x60007E3")]
		[Address(RVA = "0x10C8194", Offset = "0x10C8194", VA = "0x10C8194")]
		public void ClearMeshCombineJobs(bool executeAbortEvent = true)
		{
		}

		[Token(Token = "0x60007E4")]
		[Address(RVA = "0x10C8218", Offset = "0x10C8218", VA = "0x10C8218")]
		public void AddObjects(Transform rootT, List<Transform> transforms, bool useSearchOptions, bool checkForLODGroups = true)
		{
		}

		[Token(Token = "0x60007E5")]
		[Address(RVA = "0x10C8EE4", Offset = "0x10C8EE4", VA = "0x10C8EE4")]
		public void AddObjectsAutomatically(bool useSearchConditions = true)
		{
		}

		[Token(Token = "0x60007E6")]
		[Address(RVA = "0x10C95F4", Offset = "0x10C95F4", VA = "0x10C95F4")]
		public void AddFoundObjectsToOctree()
		{
		}

		[Token(Token = "0x60007E7")]
		[Address(RVA = "0x10C8020", Offset = "0x10C8020", VA = "0x10C8020")]
		public void ResetOctree()
		{
		}

		[Token(Token = "0x60007E8")]
		[Address(RVA = "0x10C9A58", Offset = "0x10C9A58", VA = "0x10C9A58")]
		public void CalcOctreeSize(Bounds bounds)
		{
		}

		[Token(Token = "0x60007E9")]
		[Address(RVA = "0x10C9D74", Offset = "0x10C9D74", VA = "0x10C9D74")]
		public void ApplyChanges()
		{
		}

		[Token(Token = "0x60007EA")]
		[Address(RVA = "0x10C7700", Offset = "0x10C7700", VA = "0x10C7700")]
		public void CombineAll(bool useSearchConditions = true)
		{
		}

		[Token(Token = "0x60007EB")]
		[Address(RVA = "0x10C8118", Offset = "0x10C8118", VA = "0x10C8118")]
		private void InitAndResetLodParentsCount()
		{
		}

		[Token(Token = "0x60007EC")]
		[Address(RVA = "0x10C90D8", Offset = "0x10C90D8", VA = "0x10C90D8")]
		public void AddObjectsFromSearchParent(bool useSearchConditions)
		{
		}

		[Token(Token = "0x60007ED")]
		[Address(RVA = "0x10CA100", Offset = "0x10CA100", VA = "0x10CA100")]
		private void CheckForFoundObjectNotOnOverlapLayerMask(GameObject go)
		{
		}

		[Token(Token = "0x60007EE")]
		[Address(RVA = "0x10C8468", Offset = "0x10C8468", VA = "0x10C8468")]
		private void AddLodGroups(Transform searchParentT, LODGroup[] lodGroups, bool useSearchOptions = true)
		{
		}

		[Token(Token = "0x60007EF")]
		[Address(RVA = "0x10C8C1C", Offset = "0x10C8C1C", VA = "0x10C8C1C")]
		private void AddTransforms(Transform searchParentT, Transform[] transforms, bool useSearchConditions = true)
		{
		}

		[Token(Token = "0x60007F0")]
		[Address(RVA = "0x10CA390", Offset = "0x10CA390", VA = "0x10CA390")]
		private int ValidObject(Transform searchParentT, Transform t, ObjectType objectType, bool useSearchOptions, ref CachedGameObject cachedGameObject)
		{
			return default(int);
		}

		[Token(Token = "0x60007F1")]
		[Address(RVA = "0x10C7260", Offset = "0x10C7260", VA = "0x10C7260")]
		public void RestoreOriginalRenderersAndLODGroups(bool onDestroy)
		{
		}

		[Token(Token = "0x60007F2")]
		[Address(RVA = "0x10CAB80", Offset = "0x10CAB80", VA = "0x10CAB80")]
		public void SwapCombine()
		{
		}

		[Token(Token = "0x60007F3")]
		[Address(RVA = "0x10CABB8", Offset = "0x10CABB8", VA = "0x10CABB8")]
		private void SetOriginalCollidersActive(bool active, bool onDestroy)
		{
		}

		[Token(Token = "0x60007F4")]
		[Address(RVA = "0x10CAD98", Offset = "0x10CAD98", VA = "0x10CAD98")]
		private void ExecuteMeshFilter(bool active, CachedGameObject cachedGO)
		{
		}

		[Token(Token = "0x60007F5")]
		[Address(RVA = "0x10C5E7C", Offset = "0x10C5E7C", VA = "0x10C5E7C")]
		public void ExecuteHandleObjects(bool active, HandleComponent handleOriginalObjects, HandleComponent handleOriginalLodGroups, bool includeColliders = true, bool onDestroy = false)
		{
		}

		[Token(Token = "0x60007F6")]
		[Address(RVA = "0x10CAE90", Offset = "0x10CAE90", VA = "0x10CAE90")]
		private void DrawGizmosCube(Bounds bounds, Color color)
		{
		}

		[Token(Token = "0x60007F7")]
		[Address(RVA = "0x10CAF80", Offset = "0x10CAF80", VA = "0x10CAF80")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60007F8")]
		[Address(RVA = "0x10C9858", Offset = "0x10C9858", VA = "0x10C9858")]
		private void LogOctreeInfo()
		{
		}

		[Token(Token = "0x60007F9")]
		[Address(RVA = "0x10CB24C", Offset = "0x10CB24C", VA = "0x10CB24C")]
		public MeshCombiner()
		{
		}
	}
	[Token(Token = "0x200019C")]
	public struct MeshColliderAdd
	{
		[Token(Token = "0x4000763")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public GameObject go;

		[Token(Token = "0x4000764")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Mesh mesh;

		[Token(Token = "0x6000809")]
		[Address(RVA = "0x10CBB98", Offset = "0x10CBB98", VA = "0x10CBB98")]
		public MeshColliderAdd(GameObject go, Mesh mesh)
		{
		}
	}
	[Token(Token = "0x200019D")]
	[ExecuteInEditMode]
	public class MeshCombinerData : MonoBehaviour
	{
		[Token(Token = "0x4000765")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Dictionary<Collider, CachedGameObject> colliderLookup;

		[Token(Token = "0x4000766")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Dictionary<LODGroup, CachedGameObject> lodGroupLookup;

		[Token(Token = "0x4000767")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public List<GameObject> combinedGameObjects;

		[Token(Token = "0x4000768")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[HideInInspector]
		public List<CachedGameObject> foundObjects;

		[Token(Token = "0x4000769")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		public List<CachedLodGameObject> foundLodObjects;

		[Token(Token = "0x400076A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public List<LODGroup> foundLodGroups;

		[Token(Token = "0x400076B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[HideInInspector]
		public List<Collider> foundColliders;

		[Token(Token = "0x600080A")]
		[Address(RVA = "0x10CBBC8", Offset = "0x10CBBC8", VA = "0x10CBBC8")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x600080B")]
		[Address(RVA = "0x10CBBD4", Offset = "0x10CBBD4", VA = "0x10CBBD4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600080C")]
		[Address(RVA = "0x10C7D24", Offset = "0x10C7D24", VA = "0x10C7D24")]
		public void ClearAll()
		{
		}

		[Token(Token = "0x600080D")]
		[Address(RVA = "0x10CBBE0", Offset = "0x10CBBE0", VA = "0x10CBBE0")]
		public MeshCombinerData()
		{
		}
	}
	[Token(Token = "0x200019E")]
	[ExecuteInEditMode]
	public class ObjectSpawner : MonoBehaviour
	{
		[Token(Token = "0x400076C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject[] objects;

		[Token(Token = "0x400076D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 spawnArea;

		[Token(Token = "0x400076E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float density;

		[Token(Token = "0x400076F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector2 scaleRange;

		[Token(Token = "0x4000770")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector3 rotationRange;

		[Token(Token = "0x4000771")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Vector2 heightRange;

		[Token(Token = "0x4000772")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float scaleMulti;

		[Token(Token = "0x4000773")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float metersBetweenSpawning;

		[Token(Token = "0x4000774")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public bool spawnInRuntime;

		[Token(Token = "0x4000775")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
		public bool spawn;

		[Token(Token = "0x4000776")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x56")]
		public bool deleteChildren;

		[Token(Token = "0x4000777")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform t;

		[Token(Token = "0x600080E")]
		[Address(RVA = "0x10CBE48", Offset = "0x10CBE48", VA = "0x10CBE48")]
		private void Awake()
		{
		}

		[Token(Token = "0x600080F")]
		[Address(RVA = "0x10CC32C", Offset = "0x10CC32C", VA = "0x10CC32C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000810")]
		[Address(RVA = "0x10CC368", Offset = "0x10CC368", VA = "0x10CC368")]
		public void DeleteChildren()
		{
		}

		[Token(Token = "0x6000811")]
		[Address(RVA = "0x10CC4B8", Offset = "0x10CC4B8", VA = "0x10CC4B8")]
		private void SetObjectsActive(bool active)
		{
		}

		[Token(Token = "0x6000812")]
		[Address(RVA = "0x10CBEA0", Offset = "0x10CBEA0", VA = "0x10CBEA0")]
		public void Spawn()
		{
		}

		[Token(Token = "0x6000813")]
		[Address(RVA = "0x10CC520", Offset = "0x10CC520", VA = "0x10CC520")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000814")]
		[Address(RVA = "0x10CC564", Offset = "0x10CC564", VA = "0x10CC564")]
		public ObjectSpawner()
		{
		}
	}
	[Token(Token = "0x200019F")]
	public class RemoveGeometryBelowTerrain : MonoBehaviour
	{
		[Token(Token = "0x4000778")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int totalTriangles;

		[Token(Token = "0x4000779")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private int removeTriangles;

		[Token(Token = "0x400077A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int skippedObjects;

		[Token(Token = "0x400077B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<Transform> terrains;

		[Token(Token = "0x400077C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public List<Transform> meshTerrains;

		[Token(Token = "0x400077D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Bounds[] terrainBounds;

		[Token(Token = "0x400077E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Bounds[] meshBounds;

		[Token(Token = "0x400077F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Terrain[] terrainComponents;

		[Token(Token = "0x4000780")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Terrain[] terrainArray;

		[Token(Token = "0x4000781")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Bounds[] terrainBoundsArray;

		[Token(Token = "0x4000782")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private MeshRenderer[] mrs;

		[Token(Token = "0x4000783")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Mesh[] meshTerrainComponents;

		[Token(Token = "0x4000784")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Mesh[] meshArray;

		[Token(Token = "0x4000785")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public bool runOnStart;

		[Token(Token = "0x6000815")]
		[Address(RVA = "0x10CC5AC", Offset = "0x10CC5AC", VA = "0x10CC5AC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000816")]
		[Address(RVA = "0x10CC5DC", Offset = "0x10CC5DC", VA = "0x10CC5DC")]
		public void Remove(GameObject go)
		{
		}

		[Token(Token = "0x6000817")]
		[Address(RVA = "0x10CC9B0", Offset = "0x10CC9B0", VA = "0x10CC9B0")]
		public void RemoveMesh(Transform t, Mesh mesh)
		{
		}

		[Token(Token = "0x6000818")]
		[Address(RVA = "0x10CCB78", Offset = "0x10CCB78", VA = "0x10CCB78")]
		public bool IsMeshUnderTerrain(Transform t, Mesh mesh)
		{
			return default(bool);
		}

		[Token(Token = "0x6000819")]
		[Address(RVA = "0x10CCF34", Offset = "0x10CCF34", VA = "0x10CCF34")]
		public void GetTerrainComponents()
		{
		}

		[Token(Token = "0x600081A")]
		[Address(RVA = "0x10CD084", Offset = "0x10CD084", VA = "0x10CD084")]
		public void GetMeshRenderersAndComponents()
		{
		}

		[Token(Token = "0x600081B")]
		[Address(RVA = "0x10CD284", Offset = "0x10CD284", VA = "0x10CD284")]
		public void CreateTerrainBounds()
		{
		}

		[Token(Token = "0x600081C")]
		[Address(RVA = "0x10CD520", Offset = "0x10CD520", VA = "0x10CD520")]
		public void MakeIntersectLists(Bounds bounds)
		{
		}

		[Token(Token = "0x600081D")]
		[Address(RVA = "0x10CDAF8", Offset = "0x10CDAF8", VA = "0x10CDAF8")]
		public int InterectTerrain(Vector3 pos)
		{
			return default(int);
		}

		[Token(Token = "0x600081E")]
		[Address(RVA = "0x10CDB8C", Offset = "0x10CDB8C", VA = "0x10CDB8C")]
		public int InterectMesh(Vector3 pos)
		{
			return default(int);
		}

		[Token(Token = "0x600081F")]
		[Address(RVA = "0x10CDC20", Offset = "0x10CDC20", VA = "0x10CDC20")]
		public float GetTerrainHeight(Vector3 pos)
		{
			return default(float);
		}

		[Token(Token = "0x6000820")]
		[Address(RVA = "0x10CCC34", Offset = "0x10CCC34", VA = "0x10CCC34")]
		public void RemoveTriangles(Transform t, List<int> newTriangles, Vector3[] vertices)
		{
		}

		[Token(Token = "0x6000821")]
		[Address(RVA = "0x10CDD04", Offset = "0x10CDD04", VA = "0x10CDD04")]
		public RemoveGeometryBelowTerrain()
		{
		}
	}
	[Token(Token = "0x20001A0")]
	public class SwapCombineKey : MonoBehaviour
	{
		[Token(Token = "0x4000786")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static SwapCombineKey instance;

		[Token(Token = "0x4000787")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<MeshCombiner> meshCombinerList;

		[Token(Token = "0x4000788")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private MeshCombiner meshCombiner;

		[Token(Token = "0x4000789")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GUIStyle textStyle;

		[Token(Token = "0x6000822")]
		[Address(RVA = "0x10CDDBC", Offset = "0x10CDDBC", VA = "0x10CDDBC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000823")]
		[Address(RVA = "0x10CDED4", Offset = "0x10CDED4", VA = "0x10CDED4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000824")]
		[Address(RVA = "0x10CDF28", Offset = "0x10CDF28", VA = "0x10CDF28")]
		private void Update()
		{
		}

		[Token(Token = "0x6000825")]
		[Address(RVA = "0x10CE018", Offset = "0x10CE018", VA = "0x10CE018")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000826")]
		[Address(RVA = "0x10CE4BC", Offset = "0x10CE4BC", VA = "0x10CE4BC")]
		public SwapCombineKey()
		{
		}
	}
	[Token(Token = "0x20001A1")]
	public class CachedComponents : MonoBehaviour
	{
		[Token(Token = "0x400078A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject go;

		[Token(Token = "0x400078B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform t;

		[Token(Token = "0x400078C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public MeshRenderer mr;

		[Token(Token = "0x400078D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public MeshFilter mf;

		[Token(Token = "0x400078E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GarbageCollectMesh garbageCollectMesh;

		[Token(Token = "0x6000827")]
		[Address(RVA = "0x10CE544", Offset = "0x10CE544", VA = "0x10CE544")]
		public CachedComponents()
		{
		}
	}
	[Token(Token = "0x20001A2")]
	public class ObjectHolder<T> : FastIndex
	{
		[Token(Token = "0x400078F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T item;

		[Token(Token = "0x6000828")]
		public ObjectHolder()
		{
		}

		[Token(Token = "0x6000829")]
		public ObjectHolder(T item)
		{
		}
	}
	[Token(Token = "0x20001A3")]
	public abstract class Parent<T>
	{
		[NonSerialized]
		[Token(Token = "0x4000790")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T parent;

		[Token(Token = "0x600082A")]
		protected Parent()
		{
		}
	}
	[Token(Token = "0x20001A4")]
	public abstract class ParentFastHashListIndex<T> : FastIndex
	{
		[NonSerialized]
		[Token(Token = "0x4000791")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T parent;

		[Token(Token = "0x600082B")]
		protected ParentFastHashListIndex()
		{
		}
	}
	[Token(Token = "0x20001A5")]
	public abstract class ParentMono<T> : MonoBehaviour
	{
		[NonSerialized]
		[Token(Token = "0x4000792")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T parent;

		[Token(Token = "0x600082C")]
		protected ParentMono()
		{
		}
	}
	[Token(Token = "0x20001A6")]
	public abstract class ParentMonoHash<T> : MonoBehaviourFastIndex
	{
		[NonSerialized]
		[Token(Token = "0x4000793")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T parent;

		[Token(Token = "0x600082D")]
		protected ParentMonoHash()
		{
		}
	}
	[Token(Token = "0x20001A7")]
	public interface IFastIndexList
	{
		[Token(Token = "0x600082E")]
		bool RemoveAt(int index);

		[Token(Token = "0x600082F")]
		bool Remove(IFastIndex item);
	}
	[Token(Token = "0x20001A8")]
	public interface IFastIndex
	{
		[Token(Token = "0x170000A7")]
		IFastIndexList List
		{
			[Token(Token = "0x6000830")]
			get;
			[Token(Token = "0x6000831")]
			set;
		}

		[Token(Token = "0x170000A8")]
		int ListIndex
		{
			[Token(Token = "0x6000832")]
			get;
			[Token(Token = "0x6000833")]
			set;
		}
	}
	[Token(Token = "0x20001A9")]
	public class FastIndex : IFastIndex
	{
		[Token(Token = "0x170000A9")]
		public IFastIndexList List
		{
			[Token(Token = "0x6000834")]
			[Address(RVA = "0x10CE54C", Offset = "0x10CE54C", VA = "0x10CE54C", Slot = "4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000835")]
			[Address(RVA = "0x10CE554", Offset = "0x10CE554", VA = "0x10CE554", Slot = "5")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170000AA")]
		public int ListIndex
		{
			[Token(Token = "0x6000836")]
			[Address(RVA = "0x10CE55C", Offset = "0x10CE55C", VA = "0x10CE55C", Slot = "6")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000837")]
			[Address(RVA = "0x10CE564", Offset = "0x10CE564", VA = "0x10CE564", Slot = "7")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6000838")]
		[Address(RVA = "0x10CE56C", Offset = "0x10CE56C", VA = "0x10CE56C")]
		public FastIndex()
		{
		}

		[Token(Token = "0x6000839")]
		[Address(RVA = "0x10CE58C", Offset = "0x10CE58C", VA = "0x10CE58C")]
		public void RemoveFromList()
		{
		}
	}
	[Token(Token = "0x20001AA")]
	public class MonoBehaviourFastIndex : MonoBehaviour, IFastIndex
	{
		[Token(Token = "0x170000AB")]
		public IFastIndexList List
		{
			[Token(Token = "0x600083A")]
			[Address(RVA = "0x10CE63C", Offset = "0x10CE63C", VA = "0x10CE63C", Slot = "4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600083B")]
			[Address(RVA = "0x10CE644", Offset = "0x10CE644", VA = "0x10CE644", Slot = "5")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170000AC")]
		public int ListIndex
		{
			[Token(Token = "0x600083C")]
			[Address(RVA = "0x10CE64C", Offset = "0x10CE64C", VA = "0x10CE64C", Slot = "6")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600083D")]
			[Address(RVA = "0x10CE654", Offset = "0x10CE654", VA = "0x10CE654", Slot = "7")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x600083E")]
		[Address(RVA = "0x10CE65C", Offset = "0x10CE65C", VA = "0x10CE65C")]
		public MonoBehaviourFastIndex()
		{
		}

		[Token(Token = "0x600083F")]
		[Address(RVA = "0x10CE67C", Offset = "0x10CE67C", VA = "0x10CE67C")]
		public void RemoveFromList()
		{
		}
	}
	[Token(Token = "0x20001AB")]
	public class FastIndexList<T> : FastList<T>, IFastIndexList where T : IFastIndex
	{
		[Token(Token = "0x6000840")]
		public FastIndexList()
		{
		}

		[Token(Token = "0x6000841")]
		public FastIndexList(int capacity)
		{
		}

		[Token(Token = "0x6000842")]
		public new void Clear()
		{
		}

		[Token(Token = "0x6000843")]
		public void SetItem(int index, T item)
		{
		}

		[Token(Token = "0x6000844")]
		public new int Add(T item)
		{
			return default(int);
		}

		[Token(Token = "0x6000845")]
		public new void AddRange(T[] newItems)
		{
		}

		[Token(Token = "0x6000846")]
		public new bool RemoveAt(int index)
		{
			return default(bool);
		}

		[Token(Token = "0x6000847")]
		public override T Dequeue()
		{
			return (T)null;
		}

		[Token(Token = "0x6000848")]
		public bool Remove(IFastIndex item)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20001AC")]
	public class FastListBase
	{
		[Token(Token = "0x4000798")]
		protected const int defaultCapacity = 4;

		[Token(Token = "0x4000799")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int Count;

		[Token(Token = "0x400079A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		protected int _count;

		[Token(Token = "0x400079B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected int arraySize;

		[Token(Token = "0x6000849")]
		[Address(RVA = "0x10CE72C", Offset = "0x10CE72C", VA = "0x10CE72C")]
		public FastListBase()
		{
		}
	}
	[Token(Token = "0x20001AD")]
	public class FastListBase<T> : FastListBase
	{
		[Token(Token = "0x400079C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T[] items;

		[Token(Token = "0x600084A")]
		protected void DoubleCapacity()
		{
		}

		[Token(Token = "0x600084B")]
		public FastListBase()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001AE")]
	public class FastList<T> : FastListBase<T>
	{
		[Token(Token = "0x600084C")]
		public FastList()
		{
		}

		[Token(Token = "0x600084D")]
		public FastList(bool reserve, int reserved)
		{
		}

		[Token(Token = "0x600084E")]
		public FastList(int capacity)
		{
		}

		[Token(Token = "0x600084F")]
		public FastList(FastList<T> list)
		{
		}

		[Token(Token = "0x6000850")]
		public FastList(T[] items)
		{
		}

		[Token(Token = "0x6000851")]
		protected void SetCapacity(int capacity)
		{
		}

		[Token(Token = "0x6000852")]
		public void SetCount(int count)
		{
		}

		[Token(Token = "0x6000853")]
		public void EnsureCount(int count)
		{
		}

		[Token(Token = "0x6000854")]
		public virtual void SetArray(T[] items)
		{
		}

		[Token(Token = "0x6000855")]
		public int AddUnique(T item)
		{
			return default(int);
		}

		[Token(Token = "0x6000856")]
		public bool Contains(T item)
		{
			return default(bool);
		}

		[Token(Token = "0x6000857")]
		public int IndexOf(T item)
		{
			return default(int);
		}

		[Token(Token = "0x6000858")]
		public T GetIndex(T item)
		{
			return (T)null;
		}

		[Token(Token = "0x6000859")]
		public virtual int Add(T item)
		{
			return default(int);
		}

		[Token(Token = "0x600085A")]
		public virtual int AddThreadSafe(T item)
		{
			return default(int);
		}

		[Token(Token = "0x600085B")]
		public virtual void Add(T item, T item2)
		{
		}

		[Token(Token = "0x600085C")]
		public virtual void Add(T item, T item2, T item3)
		{
		}

		[Token(Token = "0x600085D")]
		public virtual void Add(T item, T item2, T item3, T item4)
		{
		}

		[Token(Token = "0x600085E")]
		public virtual void Add(T item, T item2, T item3, T item4, T item5)
		{
		}

		[Token(Token = "0x600085F")]
		public virtual void Insert(int index, T item)
		{
		}

		[Token(Token = "0x6000860")]
		public virtual void AddRange(T[] arrayItems)
		{
		}

		[Token(Token = "0x6000861")]
		public virtual void AddRange(T[] arrayItems, int startIndex, int length)
		{
		}

		[Token(Token = "0x6000862")]
		public virtual void AddRange(FastList<T> list)
		{
		}

		[Token(Token = "0x6000863")]
		public virtual int GrabListThreadSafe(FastList<T> threadList, bool fastClear = false)
		{
			return default(int);
		}

		[Token(Token = "0x6000864")]
		public virtual void ChangeRange(int startIndex, T[] arrayItems)
		{
		}

		[Token(Token = "0x6000865")]
		public virtual bool Remove(T item, bool weakReference = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6000866")]
		public virtual void RemoveAt(int index)
		{
		}

		[Token(Token = "0x6000867")]
		public virtual void RemoveLast()
		{
		}

		[Token(Token = "0x6000868")]
		public virtual void RemoveRange(int index, int length)
		{
		}

		[Token(Token = "0x6000869")]
		public virtual T Dequeue()
		{
			return (T)null;
		}

		[Token(Token = "0x600086A")]
		public virtual T Dequeue(int index)
		{
			return (T)null;
		}

		[Token(Token = "0x600086B")]
		public virtual void Clear()
		{
		}

		[Token(Token = "0x600086C")]
		public virtual void ClearThreadSafe()
		{
		}

		[Token(Token = "0x600086D")]
		public virtual void ClearRange(int startIndex)
		{
		}

		[Token(Token = "0x600086E")]
		public virtual void FastClear()
		{
		}

		[Token(Token = "0x600086F")]
		public virtual void FastClear(int newCount)
		{
		}

		[Token(Token = "0x6000870")]
		public virtual T[] ToArray()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x20001AF")]
	public class SortedFastList<T> : FastList<T>
	{
		[Token(Token = "0x6000871")]
		public new void RemoveAt(int index)
		{
		}

		[Token(Token = "0x6000872")]
		public new void RemoveRange(int index, int endIndex)
		{
		}

		[Token(Token = "0x6000873")]
		public SortedFastList()
		{
		}
	}
	[Token(Token = "0x20001B0")]
	public class Console : MonoBehaviour
	{
		[Token(Token = "0x20001B1")]
		public class LogEntry
		{
			[Token(Token = "0x40007B2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string logString;

			[Token(Token = "0x40007B3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string stackTrace;

			[Token(Token = "0x40007B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public LogType logType;

			[Token(Token = "0x40007B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public int commandType;

			[Token(Token = "0x40007B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public bool unityLog;

			[Token(Token = "0x40007B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float tStamp;

			[Token(Token = "0x40007B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public GameObject go;

			[Token(Token = "0x40007B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public MeshCombiner meshCombiner;

			[Token(Token = "0x6000894")]
			[Address(RVA = "0x10CF2FC", Offset = "0x10CF2FC", VA = "0x10CF2FC")]
			public LogEntry(string logString, string stackTrace, LogType logType, bool unityLog = false, int commandType = 0, [Optional] GameObject go, [Optional] MeshCombiner meshCombiner)
			{
			}
		}

		[Token(Token = "0x400079D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Console instance;

		[Token(Token = "0x400079E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public KeyCode consoleKey;

		[Token(Token = "0x400079F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool logActive;

		[Token(Token = "0x40007A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		public bool showConsole;

		[Token(Token = "0x40007A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
		public bool showOnError;

		[Token(Token = "0x40007A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F")]
		public bool combineAutomatic;

		[Token(Token = "0x40007A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool showLast;

		[Token(Token = "0x40007A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		private bool setFocus;

		[Token(Token = "0x40007A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GameObject selectGO;

		[Token(Token = "0x40007A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public List<LogEntry> logs;

		[Token(Token = "0x40007A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Rect window;

		[Token(Token = "0x40007A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Rect inputRect;

		[Token(Token = "0x40007A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Rect logRect;

		[Token(Token = "0x40007AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Rect vScrollRect;

		[Token(Token = "0x40007AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private string inputText;

		[Token(Token = "0x40007AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float scrollPos;

		[Token(Token = "0x40007AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private int lines;

		[Token(Token = "0x40007AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private bool showUnityLog;

		[Token(Token = "0x40007AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x89")]
		private bool showInputLog;

		[Token(Token = "0x40007B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private MeshCombiner[] meshCombiners;

		[Token(Token = "0x40007B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private MeshCombiner selectedMeshCombiner;

		[Token(Token = "0x6000874")]
		[Address(RVA = "0x10CE734", Offset = "0x10CE734", VA = "0x10CE734")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000875")]
		[Address(RVA = "0x10CE84C", Offset = "0x10CE84C", VA = "0x10CE84C")]
		private void ReportStartup()
		{
		}

		[Token(Token = "0x6000876")]
		[Address(RVA = "0x10CE7D4", Offset = "0x10CE7D4", VA = "0x10CE7D4")]
		private void FindMeshCombiners()
		{
		}

		[Token(Token = "0x6000877")]
		[Address(RVA = "0x10CEA00", Offset = "0x10CEA00", VA = "0x10CEA00")]
		private void ReportMeshCombiners(bool reportSelected = true)
		{
		}

		[Token(Token = "0x6000878")]
		[Address(RVA = "0x10CEDE0", Offset = "0x10CEDE0", VA = "0x10CEDE0")]
		private void ReportMeshCombiner(MeshCombiner meshCombiner, bool foundText = false)
		{
		}

		[Token(Token = "0x6000879")]
		[Address(RVA = "0x10CEB08", Offset = "0x10CEB08", VA = "0x10CEB08")]
		public int SelectMeshCombiner(string name)
		{
			return default(int);
		}

		[Token(Token = "0x600087A")]
		[Address(RVA = "0x10CF1A8", Offset = "0x10CF1A8", VA = "0x10CF1A8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600087B")]
		[Address(RVA = "0x10CF228", Offset = "0x10CF228", VA = "0x10CF228")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600087C")]
		[Address(RVA = "0x10CF2A8", Offset = "0x10CF2A8", VA = "0x10CF2A8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600087D")]
		[Address(RVA = "0x10CB0F4", Offset = "0x10CB0F4", VA = "0x10CB0F4")]
		public static void Log(string logString, int commandType = 0, [Optional] GameObject go, [Optional] MeshCombiner meshCombiner)
		{
		}

		[Token(Token = "0x600087E")]
		[Address(RVA = "0x10CF394", Offset = "0x10CF394", VA = "0x10CF394")]
		private void HandleLog(string logString, string stackTrace, LogType logType)
		{
		}

		[Token(Token = "0x600087F")]
		[Address(RVA = "0x10CF4F0", Offset = "0x10CF4F0", VA = "0x10CF4F0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000880")]
		[Address(RVA = "0x10CF4D8", Offset = "0x10CF4D8", VA = "0x10CF4D8")]
		private void SetConsoleActive(bool active)
		{
		}

		[Token(Token = "0x6000881")]
		[Address(RVA = "0x10CF528", Offset = "0x10CF528", VA = "0x10CF528")]
		private void ExecuteCommand(string cmd)
		{
		}

		[Token(Token = "0x6000882")]
		[Address(RVA = "0x10D178C", Offset = "0x10D178C", VA = "0x10D178C")]
		private void DirSort()
		{
		}

		[Token(Token = "0x6000883")]
		[Address(RVA = "0x10D15E4", Offset = "0x10D15E4", VA = "0x10D15E4")]
		private void DirSort(string name)
		{
		}

		[Token(Token = "0x6000884")]
		[Address(RVA = "0x10D17E4", Offset = "0x10D17E4", VA = "0x10D17E4")]
		public void SortLog(GameObject[] gos, bool showMeshInfo = false)
		{
		}

		[Token(Token = "0x6000885")]
		[Address(RVA = "0x10D1F08", Offset = "0x10D1F08", VA = "0x10D1F08")]
		private string GetMeshInfo(GameObject go, ref int meshCount)
		{
			return null;
		}

		[Token(Token = "0x6000886")]
		[Address(RVA = "0x10D2268", Offset = "0x10D2268", VA = "0x10D2268")]
		private void TimeStep(string cmd)
		{
		}

		[Token(Token = "0x6000887")]
		[Address(RVA = "0x10D2294", Offset = "0x10D2294", VA = "0x10D2294")]
		private void TimeScale(string cmd)
		{
		}

		[Token(Token = "0x6000888")]
		[Address(RVA = "0x10D0F7C", Offset = "0x10D0F7C", VA = "0x10D0F7C")]
		private void Clear(LogEntry log, string cmd)
		{
		}

		[Token(Token = "0x6000889")]
		[Address(RVA = "0x10D12B8", Offset = "0x10D12B8", VA = "0x10D12B8")]
		private void DirAll()
		{
		}

		[Token(Token = "0x600088A")]
		[Address(RVA = "0x10D0378", Offset = "0x10D0378", VA = "0x10D0378")]
		private void Dir()
		{
		}

		[Token(Token = "0x600088B")]
		[Address(RVA = "0x10D0940", Offset = "0x10D0940", VA = "0x10D0940")]
		private void Components(LogEntry log)
		{
		}

		[Token(Token = "0x600088C")]
		[Address(RVA = "0x10D2414", Offset = "0x10D2414", VA = "0x10D2414")]
		private void ShowPath(bool showLines = true)
		{
		}

		[Token(Token = "0x600088D")]
		[Address(RVA = "0x10D22C0", Offset = "0x10D22C0", VA = "0x10D22C0")]
		private string GetPath(GameObject go)
		{
			return null;
		}

		[Token(Token = "0x600088E")]
		[Address(RVA = "0x10D0AA8", Offset = "0x10D0AA8", VA = "0x10D0AA8")]
		private void CD(LogEntry log, string name)
		{
		}

		[Token(Token = "0x600088F")]
		[Address(RVA = "0x10D0CDC", Offset = "0x10D0CDC", VA = "0x10D0CDC")]
		public void SetActiveContains(string textContains, bool active)
		{
		}

		[Token(Token = "0x6000890")]
		[Address(RVA = "0x10D1170", Offset = "0x10D1170", VA = "0x10D1170")]
		public void DirContains(string textContains)
		{
		}

		[Token(Token = "0x6000891")]
		[Address(RVA = "0x10D24E0", Offset = "0x10D24E0", VA = "0x10D24E0")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000892")]
		[Address(RVA = "0x10D3188", Offset = "0x10D3188", VA = "0x10D3188")]
		private void AnimateColor(Color col, LogEntry log, float multi)
		{
		}

		[Token(Token = "0x6000893")]
		[Address(RVA = "0x10D3274", Offset = "0x10D3274", VA = "0x10D3274")]
		public Console()
		{
		}
	}
	[Token(Token = "0x20001B2")]
	public class DirectDraw : MonoBehaviour
	{
		[Token(Token = "0x40007BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private MeshRenderer[] mrs;

		[Token(Token = "0x40007BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Mesh[] meshes;

		[Token(Token = "0x40007BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Material[] mats;

		[Token(Token = "0x40007BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3[] positions;

		[Token(Token = "0x40007BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Quaternion[] rotations;

		[Token(Token = "0x6000895")]
		[Address(RVA = "0x10D3320", Offset = "0x10D3320", VA = "0x10D3320")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000896")]
		[Address(RVA = "0x10D3664", Offset = "0x10D3664", VA = "0x10D3664")]
		private void SetMeshRenderersEnabled(bool enabled)
		{
		}

		[Token(Token = "0x6000897")]
		[Address(RVA = "0x10D36CC", Offset = "0x10D36CC", VA = "0x10D36CC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000898")]
		[Address(RVA = "0x10D382C", Offset = "0x10D382C", VA = "0x10D382C")]
		public DirectDraw()
		{
		}
	}
	[Token(Token = "0x20001B3")]
	public class DisabledLodMeshRender : MonoBehaviour
	{
		[Token(Token = "0x40007BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public MeshCombiner meshCombiner;

		[Token(Token = "0x40007C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CachedLodGameObject cachedLodGO;

		[Token(Token = "0x6000899")]
		[Address(RVA = "0x10D3834", Offset = "0x10D3834", VA = "0x10D3834")]
		public DisabledLodMeshRender()
		{
		}
	}
	[Token(Token = "0x20001B4")]
	public class DisabledMeshRenderer : MonoBehaviour
	{
		[Token(Token = "0x40007C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public MeshCombiner meshCombiner;

		[Token(Token = "0x40007C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CachedGameObject cachedGO;

		[Token(Token = "0x600089A")]
		[Address(RVA = "0x10D383C", Offset = "0x10D383C", VA = "0x10D383C")]
		public DisabledMeshRenderer()
		{
		}
	}
	[Token(Token = "0x20001B5")]
	[ExecuteInEditMode]
	public class GarbageCollectMesh : MonoBehaviour
	{
		[Token(Token = "0x40007C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Mesh mesh;

		[Token(Token = "0x600089B")]
		[Address(RVA = "0x10D3844", Offset = "0x10D3844", VA = "0x10D3844")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600089C")]
		[Address(RVA = "0x10D38D4", Offset = "0x10D38D4", VA = "0x10D38D4")]
		public GarbageCollectMesh()
		{
		}
	}
	[Token(Token = "0x20001B6")]
	[ExecuteInEditMode]
	public class LightmapSettings : MonoBehaviour
	{
		[Token(Token = "0x40007C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MeshRenderer mr;

		[Token(Token = "0x40007C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int lightmapIndex;

		[Token(Token = "0x40007C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool setLightmapScaleOffset;

		[Token(Token = "0x40007C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector4 lightmapScaleOffset;

		[Token(Token = "0x600089D")]
		[Address(RVA = "0x10D38DC", Offset = "0x10D38DC", VA = "0x10D38DC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600089E")]
		[Address(RVA = "0x10D3980", Offset = "0x10D3980", VA = "0x10D3980")]
		public LightmapSettings()
		{
		}
	}
	[Token(Token = "0x20001B7")]
	public struct AABB3
	{
		[Token(Token = "0x40007C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 min;

		[Token(Token = "0x40007C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Vector3 max;

		[Token(Token = "0x600089F")]
		[Address(RVA = "0x10D3988", Offset = "0x10D3988", VA = "0x10D3988")]
		public AABB3(Vector3 min, Vector3 max)
		{
		}
	}
	[Token(Token = "0x20001B8")]
	public struct Triangle3
	{
		[Token(Token = "0x40007CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 a;

		[Token(Token = "0x40007CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Vector3 b;

		[Token(Token = "0x40007CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 c;

		[Token(Token = "0x40007CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector3 dirAb;

		[Token(Token = "0x40007CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 dirAc;

		[Token(Token = "0x40007CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector3 dirBc;

		[Token(Token = "0x40007D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector3 h1;

		[Token(Token = "0x40007D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float ab;

		[Token(Token = "0x40007D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float ac;

		[Token(Token = "0x40007D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float bc;

		[Token(Token = "0x40007D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float area;

		[Token(Token = "0x40007D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float h;

		[Token(Token = "0x40007D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float ah;

		[Token(Token = "0x40007D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float hb;

		[Token(Token = "0x60008A0")]
		[Address(RVA = "0x10D3998", Offset = "0x10D3998", VA = "0x10D3998")]
		public void Calc()
		{
		}
	}
	[Token(Token = "0x20001B9")]
	public struct Sphere3
	{
		[Token(Token = "0x40007D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 center;

		[Token(Token = "0x40007D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float radius;

		[Token(Token = "0x60008A1")]
		[Address(RVA = "0x10D3DC0", Offset = "0x10D3DC0", VA = "0x10D3DC0")]
		public Sphere3(Vector3 center, float radius)
		{
		}
	}
	[Token(Token = "0x20001BA")]
	public struct Int2
	{
		[Token(Token = "0x40007DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int x;

		[Token(Token = "0x40007DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int y;

		[Token(Token = "0x60008A2")]
		[Address(RVA = "0x10D3DCC", Offset = "0x10D3DCC", VA = "0x10D3DCC")]
		public Int2(int x, int y)
		{
		}
	}
	[Token(Token = "0x20001BB")]
	public struct Int3
	{
		[Token(Token = "0x40007DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int x;

		[Token(Token = "0x40007DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int y;

		[Token(Token = "0x40007DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int z;

		[Token(Token = "0x60008A3")]
		[Address(RVA = "0x10D3DD4", Offset = "0x10D3DD4", VA = "0x10D3DD4")]
		public Int3(int x, int y, int z)
		{
		}

		[Token(Token = "0x60008A4")]
		[Address(RVA = "0x10D3DE0", Offset = "0x10D3DE0", VA = "0x10D3DE0")]
		public static Int3 operator +(Int3 a, Int3 b)
		{
			return default(Int3);
		}
	}
	[Token(Token = "0x20001BC")]
	public static class Mathw
	{
		[Token(Token = "0x40007DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly int[] bits;

		[Token(Token = "0x60008A5")]
		[Address(RVA = "0x10D3DFC", Offset = "0x10D3DFC", VA = "0x10D3DFC")]
		public static Vector3 Clamp(Vector3 v, float min, float max)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60008A6")]
		[Address(RVA = "0x10D3E30", Offset = "0x10D3E30", VA = "0x10D3E30")]
		public static Vector3 FloatToVector3(float v)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60008A7")]
		[Address(RVA = "0x10D3E3C", Offset = "0x10D3E3C", VA = "0x10D3E3C")]
		public static float SinDeg(float angle)
		{
			return default(float);
		}

		[Token(Token = "0x60008A8")]
		[Address(RVA = "0x10C9D60", Offset = "0x10C9D60", VA = "0x10C9D60")]
		public static float GetMax(Vector3 v)
		{
			return default(float);
		}

		[Token(Token = "0x60008A9")]
		[Address(RVA = "0x10D3E4C", Offset = "0x10D3E4C", VA = "0x10D3E4C")]
		public static Vector3 SetMin(Vector3 v, float min)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60008AA")]
		[Address(RVA = "0x10D3E68", Offset = "0x10D3E68", VA = "0x10D3E68")]
		public static Vector3 Snap(Vector3 v, float snapSize)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60008AB")]
		[Address(RVA = "0x10D3E90", Offset = "0x10D3E90", VA = "0x10D3E90")]
		public static Vector3 SnapRound(Vector3 v, float snapSize)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60008AC")]
		[Address(RVA = "0x10D4048", Offset = "0x10D4048", VA = "0x10D4048")]
		public static Vector3 Divide(Vector3 a, Vector3 b)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60008AD")]
		[Address(RVA = "0x10D4058", Offset = "0x10D4058", VA = "0x10D4058")]
		public static Vector3 Divide(float a, Vector3 b)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60008AE")]
		[Address(RVA = "0x10D406C", Offset = "0x10D406C", VA = "0x10D406C")]
		public static Vector3 Scale(Vector3 a, Int3 b)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60008AF")]
		[Address(RVA = "0x10D408C", Offset = "0x10D408C", VA = "0x10D408C")]
		public static Vector3 Abs(Vector3 v)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60008B0")]
		[Address(RVA = "0x10D40B4", Offset = "0x10D40B4", VA = "0x10D40B4")]
		public static bool IntersectAABB3Sphere3(AABB3 box, Sphere3 sphere)
		{
			return default(bool);
		}

		[Token(Token = "0x60008B1")]
		[Address(RVA = "0x10D4148", Offset = "0x10D4148", VA = "0x10D4148")]
		public static bool IntersectAABB3Triangle3(Vector3 boxCenter, Vector3 boxHalfSize, Triangle3 triangle)
		{
			return default(bool);
		}

		[Token(Token = "0x60008B2")]
		[Address(RVA = "0x10D4DB0", Offset = "0x10D4DB0", VA = "0x10D4DB0")]
		private static void GetMinMax(float x0, float x1, float x2, out float min, out float max)
		{
		}

		[Token(Token = "0x60008B3")]
		[Address(RVA = "0x10D4E00", Offset = "0x10D4E00", VA = "0x10D4E00")]
		private static bool PlaneBoxOverlap(Vector3 normal, Vector3 vert, Vector3 maxBox)
		{
			return default(bool);
		}

		[Token(Token = "0x60008B4")]
		[Address(RVA = "0x10D4AF8", Offset = "0x10D4AF8", VA = "0x10D4AF8")]
		private static float Abs(float v)
		{
			return default(float);
		}

		[Token(Token = "0x60008B5")]
		[Address(RVA = "0x10D4B08", Offset = "0x10D4B08", VA = "0x10D4B08")]
		private static bool AxisTest_X01(Vector3 v0, Vector3 v2, Vector3 boxHalfSize, float a, float b, float fa, float fb, out float min, out float max)
		{
			return default(bool);
		}

		[Token(Token = "0x60008B6")]
		[Address(RVA = "0x10D4CCC", Offset = "0x10D4CCC", VA = "0x10D4CCC")]
		private static bool AxisTest_X2(Vector3 v0, Vector3 v1, Vector3 boxHalfSize, float a, float b, float fa, float fb, out float min, out float max)
		{
			return default(bool);
		}

		[Token(Token = "0x60008B7")]
		[Address(RVA = "0x10D4B78", Offset = "0x10D4B78", VA = "0x10D4B78")]
		private static bool AxisTest_Y02(Vector3 v0, Vector3 v2, Vector3 boxHalfSize, float a, float b, float fa, float fb, out float min, out float max)
		{
			return default(bool);
		}

		[Token(Token = "0x60008B8")]
		[Address(RVA = "0x10D4D3C", Offset = "0x10D4D3C", VA = "0x10D4D3C")]
		private static bool AxisTest_Y1(Vector3 v0, Vector3 v1, Vector3 boxHalfSize, float a, float b, float fa, float fb, out float min, out float max)
		{
			return default(bool);
		}

		[Token(Token = "0x60008B9")]
		[Address(RVA = "0x10D4BEC", Offset = "0x10D4BEC", VA = "0x10D4BEC")]
		private static bool AxisTest_Z12(Vector3 v1, Vector3 v2, Vector3 boxHalfSize, float a, float b, float fa, float fb, out float min, out float max)
		{
			return default(bool);
		}

		[Token(Token = "0x60008BA")]
		[Address(RVA = "0x10D4C5C", Offset = "0x10D4C5C", VA = "0x10D4C5C")]
		private static bool AxisTest_Z0(Vector3 v0, Vector3 v1, Vector3 boxHalfSize, float a, float b, float fa, float fb, out float min, out float max)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20001BD")]
	public class MCS_CameraController : MonoBehaviour
	{
		[Token(Token = "0x40007E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float speed;

		[Token(Token = "0x40007E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float mouseMoveSpeed;

		[Token(Token = "0x40007E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float shiftMulti;

		[Token(Token = "0x40007E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float controlMulti;

		[Token(Token = "0x40007E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 oldMousePosition;

		[Token(Token = "0x40007E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private GameObject cameraMountGO;

		[Token(Token = "0x40007E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private GameObject cameraChildGO;

		[Token(Token = "0x40007E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Transform cameraMountT;

		[Token(Token = "0x40007E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Transform cameraChildT;

		[Token(Token = "0x40007E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform t;

		[Token(Token = "0x60008BC")]
		[Address(RVA = "0x10D4FAC", Offset = "0x10D4FAC", VA = "0x10D4FAC")]
		private void Awake()
		{
		}

		[Token(Token = "0x60008BD")]
		[Address(RVA = "0x10D4FD8", Offset = "0x10D4FD8", VA = "0x10D4FD8")]
		private void CreateParents()
		{
		}

		[Token(Token = "0x60008BE")]
		[Address(RVA = "0x10D5154", Offset = "0x10D5154", VA = "0x10D5154")]
		private void Update()
		{
		}

		[Token(Token = "0x60008BF")]
		[Address(RVA = "0x10D5420", Offset = "0x10D5420", VA = "0x10D5420")]
		public MCS_CameraController()
		{
		}
	}
	[Token(Token = "0x20001BE")]
	public class MCS_FPSCounter : MonoBehaviour
	{
		[Token(Token = "0x20001BF")]
		public enum GUIType
		{
			[Token(Token = "0x4000825")]
			DisplayRunning,
			[Token(Token = "0x4000826")]
			DisplayResults,
			[Token(Token = "0x4000827")]
			DisplayNothing
		}

		[Token(Token = "0x40007EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static MCS_FPSCounter instance;

		[Token(Token = "0x40007EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("___ Settings ___________________________________________________________________________________________________________")]
		public float interval;

		[Token(Token = "0x40007EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public GUIType displayType;

		[Token(Token = "0x40007ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector2 gradientRange;

		[Token(Token = "0x40007EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Font fontRun;

		[Token(Token = "0x40007EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Font fontResult;

		[Token(Token = "0x40007F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Texture logo;

		[Token(Token = "0x40007F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool showLogoOnResultsScreen;

		[Token(Token = "0x40007F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public KeyCode showHideButton;

		[Token(Token = "0x40007F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool acceptInput;

		[Token(Token = "0x40007F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		public bool reset;

		[Token(Token = "0x40007F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Header("___ Results ___________________________________________________________________________________________________________")]
		public float currentFPS;

		[Token(Token = "0x40007F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float averageFPS;

		[Token(Token = "0x40007F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float minimumFPS;

		[Token(Token = "0x40007F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float maximumFPS;

		[Token(Token = "0x40007F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private int totalFrameCount;

		[Token(Token = "0x40007FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int tempFrameCount;

		[Token(Token = "0x40007FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private double tStamp;

		[Token(Token = "0x40007FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private double tStampTemp;

		[Token(Token = "0x40007FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private string currentFPSText;

		[Token(Token = "0x40007FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string avgFPSText;

		[Token(Token = "0x40007FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private string minFPSText;

		[Token(Token = "0x4000800")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private string maxFSPText;

		[Token(Token = "0x4000801")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private GUIStyle bigStyle;

		[Token(Token = "0x4000802")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private GUIStyle bigStyleShadow;

		[Token(Token = "0x4000803")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private GUIStyle smallStyle;

		[Token(Token = "0x4000804")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private GUIStyle smallStyleShadow;

		[Token(Token = "0x4000805")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private GUIStyle smallStyleLabel;

		[Token(Token = "0x4000806")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private GUIStyle headerStyle;

		[Token(Token = "0x4000807")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Rect[] rectsRun;

		[Token(Token = "0x4000808")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Rect[] rectsResult;

		[Token(Token = "0x4000809")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Gradient gradient;

		[Token(Token = "0x400080A")]
		private const float line1 = 4f;

		[Token(Token = "0x400080B")]
		private const float line2 = 30f;

		[Token(Token = "0x400080C")]
		private const float line3 = 44f;

		[Token(Token = "0x400080D")]
		private const float line4 = 58f;

		[Token(Token = "0x400080E")]
		private const float labelWidth = 26f;

		[Token(Token = "0x400080F")]
		private const float paddingH = 8f;

		[Token(Token = "0x4000810")]
		private const float lineHeight = 22f;

		[Token(Token = "0x4000811")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private float columnRight;

		[Token(Token = "0x4000812")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private float columnLeft;

		[Token(Token = "0x4000813")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Color fontShadow;

		[Token(Token = "0x4000814")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Color label;

		[Token(Token = "0x4000815")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Color colorCurrent;

		[Token(Token = "0x4000816")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private Color colorAvg;

		[Token(Token = "0x4000817")]
		private const string resultHeader = "BENCHMARK RESULTS";

		[Token(Token = "0x4000818")]
		private const string resultLabelAvg = "AVERAGE FPS:";

		[Token(Token = "0x4000819")]
		private const string resultLabelMin = "MINIMUM FPS:";

		[Token(Token = "0x400081A")]
		private const string resultLabelMax = "MAXIMUM FPS:";

		[Token(Token = "0x400081B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private GUIContent resultHeaderGUI;

		[Token(Token = "0x400081C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private GUIContent reslutLabelAvgGUI;

		[Token(Token = "0x400081D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private GUIContent avgTextGUI;

		[Token(Token = "0x400081E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private GUIContent instructions;

		[Token(Token = "0x400081F")]
		private const string runLabelAvg = "Avg:";

		[Token(Token = "0x4000820")]
		private const string runLabelMin = "Min:";

		[Token(Token = "0x4000821")]
		private const string runLabelMax = "Max:";

		[Token(Token = "0x4000822")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private Vector2 screenSize;

		[Token(Token = "0x4000823")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private GUIType oldDisplayType;

		[Token(Token = "0x60008C0")]
		[Address(RVA = "0x10D5434", Offset = "0x10D5434", VA = "0x10D5434")]
		private void Awake()
		{
		}

		[Token(Token = "0x60008C1")]
		[Address(RVA = "0x10D55E0", Offset = "0x10D55E0", VA = "0x10D55E0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60008C2")]
		[Address(RVA = "0x10D5694", Offset = "0x10D5694", VA = "0x10D5694")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x60008C3")]
		[Address(RVA = "0x10D5CCC", Offset = "0x10D5CCC", VA = "0x10D5CCC")]
		private void SetRectsRun()
		{
		}

		[Token(Token = "0x60008C4")]
		[Address(RVA = "0x10D602C", Offset = "0x10D602C", VA = "0x10D602C")]
		private void SetRectsResult()
		{
		}

		[Token(Token = "0x60008C5")]
		[Address(RVA = "0x10D6568", Offset = "0x10D6568", VA = "0x10D6568")]
		private void Start()
		{
		}

		[Token(Token = "0x60008C6")]
		[Address(RVA = "0x10D6818", Offset = "0x10D6818", VA = "0x10D6818")]
		private void Update()
		{
		}

		[Token(Token = "0x60008C7")]
		[Address(RVA = "0x10D6BD8", Offset = "0x10D6BD8", VA = "0x10D6BD8")]
		public void StartBenchmark()
		{
		}

		[Token(Token = "0x60008C8")]
		[Address(RVA = "0x10D6BF8", Offset = "0x10D6BF8", VA = "0x10D6BF8")]
		public void StopBenchmark()
		{
		}

		[Token(Token = "0x60008C9")]
		[Address(RVA = "0x10D69B8", Offset = "0x10D69B8", VA = "0x10D69B8")]
		private void GetFPS()
		{
		}

		[Token(Token = "0x60008CA")]
		[Address(RVA = "0x10D6978", Offset = "0x10D6978", VA = "0x10D6978")]
		public void Reset()
		{
		}

		[Token(Token = "0x60008CB")]
		[Address(RVA = "0x10D6934", Offset = "0x10D6934", VA = "0x10D6934")]
		private Color EvaluateGradient(float f)
		{
			return default(Color);
		}

		[Token(Token = "0x60008CC")]
		[Address(RVA = "0x10D6C5C", Offset = "0x10D6C5C", VA = "0x10D6C5C")]
		public MCS_FPSCounter()
		{
		}
	}
	[Token(Token = "0x20001C0")]
	public class MeshFilterRevert : MonoBehaviour
	{
		[Token(Token = "0x4000828")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string guid;

		[Token(Token = "0x4000829")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string meshName;

		[Token(Token = "0x60008CD")]
		[Address(RVA = "0x10D7EF8", Offset = "0x10D7EF8", VA = "0x10D7EF8")]
		public bool DestroyAndReferenceMeshFilter(MeshFilter mf)
		{
			return default(bool);
		}

		[Token(Token = "0x60008CE")]
		[Address(RVA = "0x10D7F00", Offset = "0x10D7F00", VA = "0x10D7F00")]
		public void RevertMeshFilter(MeshFilter mf)
		{
		}

		[Token(Token = "0x60008CF")]
		[Address(RVA = "0x10D7F04", Offset = "0x10D7F04", VA = "0x10D7F04")]
		public MeshFilterRevert()
		{
		}
	}
	[Token(Token = "0x20001C1")]
	public enum CustomHideFlags
	{
		[Token(Token = "0x400082B")]
		HideInHierarchy = 1,
		[Token(Token = "0x400082C")]
		HideInInspector = 2,
		[Token(Token = "0x400082D")]
		DontSaveInEditor = 4,
		[Token(Token = "0x400082E")]
		NotEditable = 8,
		[Token(Token = "0x400082F")]
		DontSaveInBuild = 0x10,
		[Token(Token = "0x4000830")]
		DontUnloadUnusedAsset = 0x20
	}
	[Token(Token = "0x20001C2")]
	public static class Methods
	{
		[Token(Token = "0x60008D0")]
		[Address(RVA = "0x10D7F64", Offset = "0x10D7F64", VA = "0x10D7F64")]
		public static HideFlags CustomToHideFlags(CustomHideFlags customHideFlags)
		{
			return default(HideFlags);
		}

		[Token(Token = "0x60008D1")]
		[Address(RVA = "0x10D7F6C", Offset = "0x10D7F6C", VA = "0x10D7F6C")]
		public static CustomHideFlags HideFlagsToCustom(HideFlags hideFlags)
		{
			return default(CustomHideFlags);
		}

		[Token(Token = "0x60008D2")]
		[Address(RVA = "0x10D7F74", Offset = "0x10D7F74", VA = "0x10D7F74")]
		public static int GetFirstLayerOfLayerMask(LayerMask layerMask)
		{
			return default(int);
		}

		[Token(Token = "0x60008D3")]
		[Address(RVA = "0x10D7FC0", Offset = "0x10D7FC0", VA = "0x10D7FC0")]
		public static bool IsLayerInLayerMask(LayerMask layerMask, int layer)
		{
			return default(bool);
		}

		[Token(Token = "0x60008D4")]
		[Address(RVA = "0x10D800C", Offset = "0x10D800C", VA = "0x10D800C")]
		public static void SetMeshRenderersActive(FastList<MeshRenderer> mrs, bool active)
		{
		}

		[Token(Token = "0x60008D5")]
		[Address(RVA = "0x10D8080", Offset = "0x10D8080", VA = "0x10D8080")]
		public static void SetCachedGOSActive(FastList<CachedGameObject> cachedGOS, bool active)
		{
		}

		[Token(Token = "0x60008D6")]
		[Address(RVA = "0x10D80FC", Offset = "0x10D80FC", VA = "0x10D80FC")]
		public static void SetTag(GameObject go, string tag)
		{
		}

		[Token(Token = "0x60008D7")]
		[Address(RVA = "0x10D81A0", Offset = "0x10D81A0", VA = "0x10D81A0")]
		public static void SetTagWhenCollider(GameObject go, string tag)
		{
		}

		[Token(Token = "0x60008D8")]
		[Address(RVA = "0x10D82C4", Offset = "0x10D82C4", VA = "0x10D82C4")]
		public static void SetTagAndLayer(GameObject go, string tag, int layer)
		{
		}

		[Token(Token = "0x60008D9")]
		[Address(RVA = "0x10D83A0", Offset = "0x10D83A0", VA = "0x10D83A0")]
		public static void SetLayer(GameObject go, int layer)
		{
		}

		[Token(Token = "0x60008DA")]
		[Address(RVA = "0x10D8460", Offset = "0x10D8460", VA = "0x10D8460")]
		public static bool LayerMaskContainsLayer(int layerMask, int layer)
		{
			return default(bool);
		}

		[Token(Token = "0x60008DB")]
		[Address(RVA = "0x10D8474", Offset = "0x10D8474", VA = "0x10D8474")]
		public static int GetFirstLayerInLayerMask(int layerMask)
		{
			return default(int);
		}

		[Token(Token = "0x60008DC")]
		[Address(RVA = "0x10D8510", Offset = "0x10D8510", VA = "0x10D8510")]
		public static bool Contains(string compare, string name)
		{
			return default(bool);
		}

		[Token(Token = "0x60008DD")]
		public static T[] Search<T>([Optional] GameObject parentGO)
		{
			return null;
		}

		[Token(Token = "0x60008DE")]
		[Address(RVA = "0x10D8750", Offset = "0x10D8750", VA = "0x10D8750")]
		public static FastList<GameObject> GetAllRootGameObjects()
		{
			return null;
		}

		[Token(Token = "0x60008DF")]
		public static T[] SearchParent<T>(GameObject parentGO, bool searchInActiveGameObjects) where T : Component
		{
			return null;
		}

		[Token(Token = "0x60008E0")]
		public static T[] SearchScene<T>(Scene scene, bool searchInActiveGameObjects) where T : Component
		{
			return null;
		}

		[Token(Token = "0x60008E1")]
		public static FastList<T> SearchAllScenes<T>(bool searchInActiveGameObjects) where T : Component
		{
			return null;
		}

		[Token(Token = "0x60008E2")]
		public static T Find<T>(GameObject parentGO, string name) where T : Component
		{
			return null;
		}

		[Token(Token = "0x60008E3")]
		[Address(RVA = "0x10D885C", Offset = "0x10D885C", VA = "0x10D885C")]
		public static void SetCollidersActive(Collider[] colliders, bool active, string[] nameList)
		{
		}

		[Token(Token = "0x60008E4")]
		[Address(RVA = "0x10D8944", Offset = "0x10D8944", VA = "0x10D8944")]
		public static void SelectChildrenWithMeshRenderer(GameObject[] parentGOs)
		{
		}

		[Token(Token = "0x60008E5")]
		[Address(RVA = "0x10D8948", Offset = "0x10D8948", VA = "0x10D8948")]
		public static void SelectChildrenWithMeshRenderer(Transform t)
		{
		}

		[Token(Token = "0x60008E6")]
		[Address(RVA = "0x10D894C", Offset = "0x10D894C", VA = "0x10D894C")]
		public static void DestroyChildren(Transform t)
		{
		}

		[Token(Token = "0x60008E7")]
		[Address(RVA = "0x10D8A10", Offset = "0x10D8A10", VA = "0x10D8A10")]
		public static void Destroy(GameObject go)
		{
		}

		[Token(Token = "0x60008E8")]
		[Address(RVA = "0x10D8A98", Offset = "0x10D8A98", VA = "0x10D8A98")]
		public static void Destroy(Component c)
		{
		}

		[Token(Token = "0x60008E9")]
		[Address(RVA = "0x10D8B20", Offset = "0x10D8B20", VA = "0x10D8B20")]
		public static void SetChildrenActive(Transform t, bool active)
		{
		}

		[Token(Token = "0x60008EA")]
		[Address(RVA = "0x10D8BA0", Offset = "0x10D8BA0", VA = "0x10D8BA0")]
		public static void SnapBoundsAndPreserveArea(ref Bounds bounds, float snapSize, Vector3 offset)
		{
		}

		[Token(Token = "0x60008EB")]
		public static void ListRemoveAt<T>(List<T> list, int index)
		{
		}

		[Token(Token = "0x60008EC")]
		[Address(RVA = "0x10D8CCC", Offset = "0x10D8CCC", VA = "0x10D8CCC")]
		public static void CopyComponent(Component component, GameObject target)
		{
		}

		[Token(Token = "0x60008ED")]
		[Address(RVA = "0x10D8DCC", Offset = "0x10D8DCC", VA = "0x10D8DCC")]
		public static Transform GetChildRootTransform(Transform t, Transform rootT)
		{
			return null;
		}
	}
	[Token(Token = "0x20001C3")]
	public class ReadMe : MonoBehaviour
	{
		[Token(Token = "0x4000831")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool buttonEdit;

		[Token(Token = "0x4000832")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string readme;

		[Token(Token = "0x60008EE")]
		[Address(RVA = "0x10D8E7C", Offset = "0x10D8E7C", VA = "0x10D8E7C")]
		public ReadMe()
		{
		}
	}
	[Token(Token = "0x20001C4")]
	public class SimpleMove : MonoBehaviour
	{
		[Token(Token = "0x4000833")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 rotDirMulti;

		[Token(Token = "0x4000834")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float moveMulti;

		[Token(Token = "0x4000835")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float rotMulti;

		[Token(Token = "0x4000836")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector3 dir;

		[Token(Token = "0x4000837")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float t;

		[Token(Token = "0x60008EF")]
		[Address(RVA = "0x10D8E84", Offset = "0x10D8E84", VA = "0x10D8E84")]
		private void Start()
		{
		}

		[Token(Token = "0x60008F0")]
		[Address(RVA = "0x10D8EB8", Offset = "0x10D8EB8", VA = "0x10D8EB8")]
		private void Update()
		{
		}

		[Token(Token = "0x60008F1")]
		[Address(RVA = "0x10D8FBC", Offset = "0x10D8FBC", VA = "0x10D8FBC")]
		public SimpleMove()
		{
		}
	}
	[Token(Token = "0x20001C5")]
	public class SwitchMeshCombineManager : MonoBehaviour
	{
		[Token(Token = "0x4000838")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private MeshCombiner[] meshCombiners;

		[Token(Token = "0x4000839")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GameObject[] gos;

		[Token(Token = "0x400083A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Transform t;

		[Token(Token = "0x400083B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private GUIStyle style1;

		[Token(Token = "0x400083C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private GUIStyle style2;

		[Token(Token = "0x400083D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int selectIndex;

		[Token(Token = "0x60008F2")]
		[Address(RVA = "0x10D9028", Offset = "0x10D9028", VA = "0x10D9028")]
		private void Start()
		{
		}

		[Token(Token = "0x60008F3")]
		[Address(RVA = "0x10D9238", Offset = "0x10D9238", VA = "0x10D9238")]
		private void SetGosActive(bool active)
		{
		}

		[Token(Token = "0x60008F4")]
		[Address(RVA = "0x10D92A0", Offset = "0x10D92A0", VA = "0x10D92A0")]
		private void Update()
		{
		}

		[Token(Token = "0x60008F5")]
		[Address(RVA = "0x10D93E4", Offset = "0x10D93E4", VA = "0x10D93E4")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x60008F6")]
		[Address(RVA = "0x10D98C0", Offset = "0x10D98C0", VA = "0x10D98C0")]
		public SwitchMeshCombineManager()
		{
		}
	}
	[Token(Token = "0x20001C6")]
	public static class TriangleAAB3
	{
	}
	[Token(Token = "0x20001C7")]
	public class NavigationCamera : MonoBehaviour
	{
		[Token(Token = "0x400083E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static float fov;

		[Token(Token = "0x400083F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SO_NavigationCamera data;

		[Token(Token = "0x4000840")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Quaternion rot;

		[Token(Token = "0x4000841")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 currentSpeed;

		[Token(Token = "0x4000842")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float tStamp;

		[Token(Token = "0x4000843")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float deltaTime;

		[Token(Token = "0x4000844")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Vector3 startPosition;

		[Token(Token = "0x4000845")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Vector3 position;

		[Token(Token = "0x4000846")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Quaternion startRotation;

		[Token(Token = "0x4000847")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float scrollWheel;

		[Token(Token = "0x60008F7")]
		[Address(RVA = "0x10D98D0", Offset = "0x10D98D0", VA = "0x10D98D0")]
		private void Awake()
		{
		}

		[Token(Token = "0x60008F8")]
		[Address(RVA = "0x10D993C", Offset = "0x10D993C", VA = "0x10D993C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60008F9")]
		[Address(RVA = "0x10D998C", Offset = "0x10D998C", VA = "0x10D998C")]
		private void Update()
		{
		}

		[Token(Token = "0x60008FA")]
		[Address(RVA = "0x10D99BC", Offset = "0x10D99BC", VA = "0x10D99BC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60008FB")]
		[Address(RVA = "0x10D9EE4", Offset = "0x10D9EE4", VA = "0x10D9EE4")]
		public void SetCam()
		{
		}

		[Token(Token = "0x60008FC")]
		[Address(RVA = "0x10D9940", Offset = "0x10D9940", VA = "0x10D9940")]
		public void RestoreCam()
		{
		}

		[Token(Token = "0x60008FD")]
		[Address(RVA = "0x10D9DD8", Offset = "0x10D9DD8", VA = "0x10D9DD8")]
		private float GetSpeedMulti()
		{
			return default(float);
		}

		[Token(Token = "0x60008FE")]
		[Address(RVA = "0x10D9E34", Offset = "0x10D9E34", VA = "0x10D9E34")]
		private void Lerp2Way(ref Vector3 v, Vector3 targetV, float upMulti, float downMulti)
		{
		}

		[Token(Token = "0x60008FF")]
		[Address(RVA = "0x10D9F30", Offset = "0x10D9F30", VA = "0x10D9F30")]
		private void Lerp2Way(ref float v, float targetV, float upMulti, float downMulti)
		{
		}

		[Token(Token = "0x6000900")]
		[Address(RVA = "0x10D9F74", Offset = "0x10D9F74", VA = "0x10D9F74")]
		public NavigationCamera()
		{
		}
	}
	[Token(Token = "0x20001C8")]
	public class SO_NavigationCamera : ScriptableObject
	{
		[Token(Token = "0x4000848")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float mouseSensitity;

		[Token(Token = "0x4000849")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float speedUpLerpMulti;

		[Token(Token = "0x400084A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float speedDownLerpMulti;

		[Token(Token = "0x400084B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float speedSlow;

		[Token(Token = "0x400084C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float speedNormal;

		[Token(Token = "0x400084D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float speedFast;

		[Token(Token = "0x400084E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float mouseScrollWheelMulti;

		[Token(Token = "0x6000901")]
		[Address(RVA = "0x10D9F7C", Offset = "0x10D9F7C", VA = "0x10D9F7C")]
		public SO_NavigationCamera()
		{
		}
	}
	[Token(Token = "0x20001C9")]
	public class BaseOctree
	{
		[Token(Token = "0x20001CA")]
		public class Cell
		{
			[Token(Token = "0x400084F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Cell mainParent;

			[Token(Token = "0x4000850")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Cell parent;

			[Token(Token = "0x4000851")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public bool[] cellsUsed;

			[Token(Token = "0x4000852")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Bounds bounds;

			[Token(Token = "0x4000853")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public int cellIndex;

			[Token(Token = "0x4000854")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			public int cellCount;

			[Token(Token = "0x4000855")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public int level;

			[Token(Token = "0x4000856")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			public int maxLevels;

			[Token(Token = "0x6000903")]
			[Address(RVA = "0x10D9FAC", Offset = "0x10D9FAC", VA = "0x10D9FAC")]
			public Cell()
			{
			}

			[Token(Token = "0x6000904")]
			[Address(RVA = "0x10D9FB4", Offset = "0x10D9FB4", VA = "0x10D9FB4")]
			public Cell(Vector3 position, Vector3 size, int maxLevels)
			{
			}

			[Token(Token = "0x6000905")]
			[Address(RVA = "0x10DA050", Offset = "0x10DA050", VA = "0x10DA050")]
			public Cell(Cell parent, int cellIndex, Bounds bounds)
			{
			}

			[Token(Token = "0x6000906")]
			[Address(RVA = "0x10DA0D4", Offset = "0x10DA0D4", VA = "0x10DA0D4")]
			public void SetCell(Cell parent, int cellIndex, Bounds bounds)
			{
			}

			[Token(Token = "0x6000907")]
			protected int AddCell<T, U>(ref T[] cells, Vector3 position, out bool maxCellCreated) where T : Cell, new() where U : Cell, new()
			{
				return default(int);
			}

			[Token(Token = "0x6000908")]
			protected T GetCell<T>(T[] cells, Vector3 position)
			{
				return (T)null;
			}

			[Token(Token = "0x6000909")]
			protected void AddCell<T, U>(ref T[] cells, int index, int x, int y, int z, out bool maxCellCreated) where T : Cell, new() where U : Cell, new()
			{
			}

			[Token(Token = "0x600090A")]
			[Address(RVA = "0x10DA150", Offset = "0x10DA150", VA = "0x10DA150")]
			public bool InsideBounds(Vector3 position)
			{
				return default(bool);
			}

			[Token(Token = "0x600090B")]
			[Address(RVA = "0x10DA200", Offset = "0x10DA200", VA = "0x10DA200")]
			public void Reset(ref Cell[] cells)
			{
			}
		}

		[Token(Token = "0x6000902")]
		[Address(RVA = "0x10D9FA4", Offset = "0x10D9FA4", VA = "0x10D9FA4")]
		public BaseOctree()
		{
		}
	}
	[Token(Token = "0x20001CB")]
	public class ObjectOctree
	{
		[Token(Token = "0x20001CC")]
		public class LODParent
		{
			[Token(Token = "0x4000857")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public GameObject cellGO;

			[Token(Token = "0x4000858")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Transform cellT;

			[Token(Token = "0x4000859")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public LODGroup lodGroup;

			[Token(Token = "0x400085A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public LODLevel[] lodLevels;

			[Token(Token = "0x400085B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public bool hasChanged;

			[Token(Token = "0x400085C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public int jobsPending;

			[Token(Token = "0x600090D")]
			[Address(RVA = "0x10DA234", Offset = "0x10DA234", VA = "0x10DA234")]
			public LODParent(int lodCount)
			{
			}

			[Token(Token = "0x600090E")]
			[Address(RVA = "0x10DA454", Offset = "0x10DA454", VA = "0x10DA454")]
			public void AssignLODGroup(MeshCombiner meshCombiner)
			{
			}

			[Token(Token = "0x600090F")]
			[Address(RVA = "0x10DA72C", Offset = "0x10DA72C", VA = "0x10DA72C")]
			public void ApplyChanges(MeshCombiner meshCombiner)
			{
			}
		}

		[Token(Token = "0x20001CD")]
		public class LODLevel
		{
			[Token(Token = "0x400085D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public FastList<CachedGameObject> cachedGOs;

			[Token(Token = "0x400085E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Dictionary<CombineCondition, MeshObjectsHolder> meshObjectsHoldersLookup;

			[Token(Token = "0x400085F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public FastList<MeshObjectsHolder> changedMeshObjectsHolders;

			[Token(Token = "0x4000860")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public FastList<MeshRenderer> newMeshRenderers;

			[Token(Token = "0x4000861")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public FastList<MeshRenderer> newMeshLodRenderers;

			[Token(Token = "0x4000862")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public int vertCount;

			[Token(Token = "0x4000863")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public int objectCount;

			[Token(Token = "0x6000910")]
			[Address(RVA = "0x10DA78C", Offset = "0x10DA78C", VA = "0x10DA78C")]
			public void ApplyChanges(MeshCombiner meshCombiner)
			{
			}

			[Token(Token = "0x6000911")]
			[Address(RVA = "0x10DA34C", Offset = "0x10DA34C", VA = "0x10DA34C")]
			public LODLevel()
			{
			}
		}

		[Token(Token = "0x20001CE")]
		public class MaxCell : Cell
		{
			[Token(Token = "0x4000864")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static int maxCellCount;

			[Token(Token = "0x4000865")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public LODParent[] lodParents;

			[Token(Token = "0x4000866")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public List<LODParent> changedLodParents;

			[Token(Token = "0x4000867")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public bool hasChanged;

			[Token(Token = "0x6000912")]
			[Address(RVA = "0x10DA7F4", Offset = "0x10DA7F4", VA = "0x10DA7F4")]
			public void ApplyChanges(MeshCombiner meshCombiner)
			{
			}

			[Token(Token = "0x6000913")]
			[Address(RVA = "0x10DA8C0", Offset = "0x10DA8C0", VA = "0x10DA8C0")]
			public MaxCell()
			{
			}
		}

		[Token(Token = "0x20001CF")]
		public class Cell : BaseOctree.Cell
		{
			[Token(Token = "0x4000868")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public Cell[] cells;

			[Token(Token = "0x6000914")]
			[Address(RVA = "0x10DA8C8", Offset = "0x10DA8C8", VA = "0x10DA8C8")]
			public Cell()
			{
			}

			[Token(Token = "0x6000915")]
			[Address(RVA = "0x10DA8D0", Offset = "0x10DA8D0", VA = "0x10DA8D0")]
			public Cell(Vector3 position, Vector3 size, int maxLevels)
			{
			}

			[Token(Token = "0x6000916")]
			[Address(RVA = "0x10DA96C", Offset = "0x10DA96C", VA = "0x10DA96C")]
			public MaxCell GetCell(Vector3 position)
			{
				return null;
			}

			[Token(Token = "0x6000917")]
			[Address(RVA = "0x10DA9C4", Offset = "0x10DA9C4", VA = "0x10DA9C4")]
			private MaxCell GetCellInternal(Vector3 position)
			{
				return null;
			}

			[Token(Token = "0x6000918")]
			[Address(RVA = "0x10DAAA0", Offset = "0x10DAAA0", VA = "0x10DAAA0")]
			public CachedGameObject AddObject(Vector3 position, MeshCombiner meshCombiner, CachedGameObject cachedGO, int lodParentIndex, int lodLevel, bool isChangeMode = false)
			{
				return null;
			}

			[Token(Token = "0x6000919")]
			[Address(RVA = "0x10DAB34", Offset = "0x10DAB34", VA = "0x10DAB34")]
			private void AddObjectInternal(MeshCombiner meshCombiner, CachedGameObject cachedGO, Vector3 position, int lodParentIndex, int lodLevel, bool isChangeMode)
			{
			}

			[Token(Token = "0x600091A")]
			[Address(RVA = "0x10DB400", Offset = "0x10DB400", VA = "0x10DB400")]
			public void SortObjects(MeshCombiner meshCombiner)
			{
			}

			[Token(Token = "0x600091B")]
			[Address(RVA = "0x10DAF88", Offset = "0x10DAF88", VA = "0x10DAF88")]
			public bool SortObject(MeshCombiner meshCombiner, LODLevel lod, CachedGameObject cachedGO, bool isChangeMode = false)
			{
				return default(bool);
			}

			[Token(Token = "0x600091C")]
			[Address(RVA = "0x10DB9A0", Offset = "0x10DB9A0", VA = "0x10DB9A0")]
			public void CombineMeshes(MeshCombiner meshCombiner, int lodParentIndex)
			{
			}

			[Token(Token = "0x600091D")]
			[Address(RVA = "0x10DC048", Offset = "0x10DC048", VA = "0x10DC048")]
			public void Draw(MeshCombiner meshCombiner, bool onlyMaxLevel, bool drawLevel0)
			{
			}
		}

		[Token(Token = "0x600090C")]
		[Address(RVA = "0x10DA22C", Offset = "0x10DA22C", VA = "0x10DA22C")]
		public ObjectOctree()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001D0")]
	public class MeshObjectsHolder
	{
		[Token(Token = "0x4000869")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public FastList<MeshObject> meshObjects;

		[Token(Token = "0x400086A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ObjectOctree.LODParent lodParent;

		[Token(Token = "0x400086B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FastList<CachedGameObject> newCachedGOs;

		[Token(Token = "0x400086C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int lodLevel;

		[Token(Token = "0x400086D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Material mat;

		[Token(Token = "0x400086E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool hasChanged;

		[Token(Token = "0x400086F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public CombineCondition combineCondition;

		[Token(Token = "0x600091E")]
		[Address(RVA = "0x10DB828", Offset = "0x10DB828", VA = "0x10DB828")]
		public MeshObjectsHolder(ref CombineCondition combineCondition, Material mat)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001D1")]
	public class FoundCombineConditions
	{
		[Token(Token = "0x4000870")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public HashSet<CombineCondition> combineConditions;

		[Token(Token = "0x4000871")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int combineConditionsCount;

		[Token(Token = "0x4000872")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int matCount;

		[Token(Token = "0x4000873")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int lightmapIndexCount;

		[Token(Token = "0x4000874")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int shadowCastingCount;

		[Token(Token = "0x4000875")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int receiveShadowsCount;

		[Token(Token = "0x4000876")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int lightmapScale;

		[Token(Token = "0x4000877")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int receiveGICount;

		[Token(Token = "0x4000878")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public int lightProbeUsageCount;

		[Token(Token = "0x4000879")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int reflectionProbeUsageCount;

		[Token(Token = "0x400087A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public int probeAnchorCount;

		[Token(Token = "0x400087B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int motionVectorGenerationModeCount;

		[Token(Token = "0x400087C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public int layerCount;

		[Token(Token = "0x400087D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public int staticEditorFlagsCount;

		[Token(Token = "0x400087E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public int partOfLodGroupCount;

		[Token(Token = "0x600091F")]
		[Address(RVA = "0x10DC3F0", Offset = "0x10DC3F0", VA = "0x10DC3F0")]
		public FoundCombineConditions()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001D2")]
	public struct CombineCondition
	{
		[Token(Token = "0x400087F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static HashSet<object> countSet;

		[Token(Token = "0x4000880")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int matInstanceId;

		[Token(Token = "0x4000881")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int lightmapIndex;

		[Token(Token = "0x4000882")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ShadowCastingMode shadowCastingMode;

		[Token(Token = "0x4000883")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool receiveShadows;

		[Token(Token = "0x4000884")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float lightmapScale;

		[Token(Token = "0x4000885")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public LightProbeUsage lightProbeUsage;

		[Token(Token = "0x4000886")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ReflectionProbeUsage reflectionProbeUsage;

		[Token(Token = "0x4000887")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform probeAnchor;

		[Token(Token = "0x4000888")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public MotionVectorGenerationMode motionVectorGenerationMode;

		[Token(Token = "0x4000889")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int layer;

		[Token(Token = "0x400088A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool partOfLodGroup;

		[Token(Token = "0x400088B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public int rootInstanceId;

		[Token(Token = "0x170000AD")]
		public static CombineCondition Default
		{
			[Token(Token = "0x6000920")]
			[Address(RVA = "0x10DC478", Offset = "0x10DC478", VA = "0x10DC478")]
			get
			{
				return default(CombineCondition);
			}
		}

		[Token(Token = "0x6000921")]
		[Address(RVA = "0x10DC508", Offset = "0x10DC508", VA = "0x10DC508")]
		public static void MakeFoundReport(FoundCombineConditions fcc)
		{
		}

		[Token(Token = "0x6000922")]
		[Address(RVA = "0x10DB66C", Offset = "0x10DB66C", VA = "0x10DB66C")]
		public void ReadFromGameObject(int rootInstanceId, CombineConditionSettings combineConditions, bool copyBakedLighting, GameObject go, Transform t, MeshRenderer mr, Material mat)
		{
		}

		[Token(Token = "0x6000923")]
		[Address(RVA = "0x10DD530", Offset = "0x10DD530", VA = "0x10DD530")]
		private float GetLightmapScale(MeshRenderer mr)
		{
			return default(float);
		}

		[Token(Token = "0x6000924")]
		[Address(RVA = "0x10DD538", Offset = "0x10DD538", VA = "0x10DD538")]
		private void SetLightmapScale(MeshRenderer mr, float lightmapScale)
		{
		}

		[Token(Token = "0x6000925")]
		[Address(RVA = "0x10DD53C", Offset = "0x10DD53C", VA = "0x10DD53C")]
		public void WriteToGameObject(GameObject go, MeshRenderer mr)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001D3")]
	public class CombineConditionSettings
	{
		[Token(Token = "0x400088C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool foldout;

		[Token(Token = "0x400088D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool sameMaterial;

		[Token(Token = "0x400088E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		public bool sameShadowCastingMode;

		[Token(Token = "0x400088F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13")]
		public bool sameReceiveShadows;

		[Token(Token = "0x4000890")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool sameReceiveGI;

		[Token(Token = "0x4000891")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
		public bool sameLightmapScale;

		[Token(Token = "0x4000892")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16")]
		public bool sameLightProbeUsage;

		[Token(Token = "0x4000893")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17")]
		public bool sameReflectionProbeUsage;

		[Token(Token = "0x4000894")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool sameProbeAnchor;

		[Token(Token = "0x4000895")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool sameMotionVectorGenerationMode;

		[Token(Token = "0x4000896")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public bool sameStaticEditorFlags;

		[Token(Token = "0x4000897")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
		public bool sameLayer;

		[Token(Token = "0x4000898")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Material material;

		[Token(Token = "0x4000899")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public CombineCondition combineCondition;

		[Token(Token = "0x6000927")]
		[Address(RVA = "0x10DD66C", Offset = "0x10DD66C", VA = "0x10DD66C")]
		public CombineConditionSettings()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001D4")]
	public class MeshObject
	{
		[Token(Token = "0x400089A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public CachedGameObject cachedGO;

		[Token(Token = "0x400089B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MeshCache meshCache;

		[Token(Token = "0x400089C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int subMeshIndex;

		[Token(Token = "0x400089D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector3 position;

		[Token(Token = "0x400089E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 scale;

		[Token(Token = "0x400089F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Quaternion rotation;

		[Token(Token = "0x40008A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public Vector4 lightmapScaleOffset;

		[Token(Token = "0x40008A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public bool intersectsSurface;

		[Token(Token = "0x40008A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public int startNewTriangleIndex;

		[Token(Token = "0x40008A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public int newTriangleCount;

		[Token(Token = "0x40008A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool skip;

		[Token(Token = "0x6000928")]
		[Address(RVA = "0x10DB8F4", Offset = "0x10DB8F4", VA = "0x10DB8F4")]
		public MeshObject(CachedGameObject cachedGO, int subMeshIndex)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001D5")]
	public class CachedGameObject
	{
		[Token(Token = "0x40008A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform searchParentT;

		[Token(Token = "0x40008A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject go;

		[Token(Token = "0x40008A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform t;

		[Token(Token = "0x40008A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public MeshRenderer mr;

		[Token(Token = "0x40008A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public MeshFilterRevert mfr;

		[Token(Token = "0x40008AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public MeshFilter mf;

		[Token(Token = "0x40008AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Mesh mesh;

		[Token(Token = "0x40008AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Mesh additionalMesh;

		[Token(Token = "0x40008AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Matrix4x4 mt;

		[Token(Token = "0x40008AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Matrix4x4 mtNormals;

		[Token(Token = "0x40008AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Transform rootT;

		[Token(Token = "0x40008B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public Vector3 rootTLossyScale;

		[Token(Token = "0x40008B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		public int rootInstanceId;

		[Token(Token = "0x40008B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public bool excludeCombine;

		[Token(Token = "0x40008B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE9")]
		public bool mrEnabled;

		[Token(Token = "0x6000929")]
		[Address(RVA = "0x10DD708", Offset = "0x10DD708", VA = "0x10DD708")]
		public CachedGameObject(Transform searchParentT, GameObject go, Transform t, MeshRenderer mr, MeshFilter mf, Mesh mesh)
		{
		}

		[Token(Token = "0x600092A")]
		[Address(RVA = "0x10DD870", Offset = "0x10DD870", VA = "0x10DD870")]
		public CachedGameObject(CachedComponents cachedComponent)
		{
		}

		[Token(Token = "0x600092B")]
		[Address(RVA = "0x10DB600", Offset = "0x10DB600", VA = "0x10DB600")]
		public void GetRoot()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001D6")]
	public class CachedLodGameObject : CachedGameObject
	{
		[Token(Token = "0x40008B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		public Vector3 center;

		[Token(Token = "0x40008B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public int lodCount;

		[Token(Token = "0x40008B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		public int lodLevel;

		[Token(Token = "0x600092C")]
		[Address(RVA = "0x10DD998", Offset = "0x10DD998", VA = "0x10DD998")]
		public CachedLodGameObject(CachedGameObject cachedGO, int lodCount, int lodLevel)
		{
		}
	}
	[Token(Token = "0x20001D7")]
	[ExecuteInEditMode]
	public class CreateOverlapColliders : MonoBehaviour
	{
		[Token(Token = "0x20001D8")]
		public class LodInfo
		{
			[Token(Token = "0x40008C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public FastList<LodLevel> lodLevels;

			[Token(Token = "0x6000938")]
			[Address(RVA = "0x10DE4F0", Offset = "0x10DE4F0", VA = "0x10DE4F0")]
			public void SetActiveOnlyLodLevel(int lodLevel)
			{
			}

			[Token(Token = "0x6000939")]
			[Address(RVA = "0x10DF280", Offset = "0x10DF280", VA = "0x10DF280")]
			public void SetActiveOtherLodLevels(int excludeLevel)
			{
			}

			[Token(Token = "0x600093A")]
			[Address(RVA = "0x10DE564", Offset = "0x10DE564", VA = "0x10DE564")]
			public void SetLayerLodLevel(int lodLevel, int layer, int otherLayer)
			{
			}

			[Token(Token = "0x600093B")]
			[Address(RVA = "0x10DE894", Offset = "0x10DE894", VA = "0x10DE894")]
			public void CreateLodGroupColliders(LODGroup lodGroup, Transform parentT)
			{
			}

			[Token(Token = "0x600093C")]
			[Address(RVA = "0x10DE80C", Offset = "0x10DE80C", VA = "0x10DE80C")]
			public LodInfo()
			{
			}
		}

		[Token(Token = "0x20001D9")]
		public class LodLevel
		{
			[Token(Token = "0x40008C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public FastList<Collider> colliders;

			[Token(Token = "0x40008CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public FastList<GameObject> gos;

			[Token(Token = "0x600093D")]
			[Address(RVA = "0x10DF20C", Offset = "0x10DF20C", VA = "0x10DF20C")]
			public void SetCollidersActive(bool active)
			{
			}

			[Token(Token = "0x600093E")]
			[Address(RVA = "0x10DF2F4", Offset = "0x10DF2F4", VA = "0x10DF2F4")]
			public void SetLayer(int layer)
			{
			}

			[Token(Token = "0x600093F")]
			[Address(RVA = "0x10DF368", Offset = "0x10DF368", VA = "0x10DF368")]
			public LodLevel()
			{
			}
		}

		[Token(Token = "0x40008B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LayerMask layerMask;

		[Token(Token = "0x40008B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool create;

		[Token(Token = "0x40008B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		public bool destroy;

		[Token(Token = "0x40008BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject newGO;

		[Token(Token = "0x40008BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int lodLevel;

		[Token(Token = "0x40008BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool setLayer;

		[Token(Token = "0x40008BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool foundLodGroup;

		[Token(Token = "0x40008BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Dictionary<GameObject, GameObject> lookupOrigCollider;

		[Token(Token = "0x40008BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static Dictionary<GameObject, GameObject> lookupColliderOrig;

		[Token(Token = "0x40008C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static Dictionary<Collider, LodInfo> lodInfoLookup;

		[Token(Token = "0x40008C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static FastList<LodInfo> lodInfos;

		[Token(Token = "0x40008C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static FastList<GameObject> selectGos;

		[Token(Token = "0x40008C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static HashSet<Mesh> lodGroupMeshes;

		[Token(Token = "0x40008C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static Transform newT;

		[Token(Token = "0x40008C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private static int overlapLayer;

		[Token(Token = "0x40008C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private static float colliderScaleMulti;

		[Token(Token = "0x40008C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private static FastList<Collider> colliders;

		[Token(Token = "0x600092D")]
		[Address(RVA = "0x10DD9D8", Offset = "0x10DD9D8", VA = "0x10DD9D8")]
		private void Update()
		{
		}

		[Token(Token = "0x600092E")]
		[Address(RVA = "0x10DE274", Offset = "0x10DE274", VA = "0x10DE274")]
		public static void SaveCollidersState(LayerMask layerMask)
		{
		}

		[Token(Token = "0x600092F")]
		[Address(RVA = "0x10DE3DC", Offset = "0x10DE3DC", VA = "0x10DE3DC")]
		public static void RestoreCollidersState()
		{
		}

		[Token(Token = "0x6000930")]
		[Address(RVA = "0x10DE184", Offset = "0x10DE184", VA = "0x10DE184")]
		public static void EnableLodLevelCollider(int lodLevel, int lodGroupLayer)
		{
		}

		[Token(Token = "0x6000931")]
		[Address(RVA = "0x10DE5E8", Offset = "0x10DE5E8", VA = "0x10DE5E8")]
		public static bool IsAnythingOnFreeLayers(int insideLayer, int lodGroupLayer)
		{
			return default(bool);
		}

		[Token(Token = "0x6000932")]
		[Address(RVA = "0x10DDAD0", Offset = "0x10DDAD0", VA = "0x10DDAD0")]
		public static bool Create(Transform parentT, LayerMask overlapLayerMask, int lodGroupLayer, ref GameObject overlapCollidersGO, bool removeSamePositionTriangles)
		{
			return default(bool);
		}

		[Token(Token = "0x6000933")]
		[Address(RVA = "0x10DECD4", Offset = "0x10DECD4", VA = "0x10DECD4")]
		private static MeshCollider CreateMeshCollider(MeshFilter mf, Transform parentT, string prefixName)
		{
			return null;
		}

		[Token(Token = "0x6000934")]
		[Address(RVA = "0x10DE0E4", Offset = "0x10DE0E4", VA = "0x10DE0E4")]
		public static void DestroyOverlapColliders(GameObject go)
		{
		}

		[Token(Token = "0x6000935")]
		[Address(RVA = "0x10DEEB4", Offset = "0x10DEEB4", VA = "0x10DEEB4")]
		public static void CopyTransform(Transform st, Transform dt)
		{
		}

		[Token(Token = "0x6000936")]
		[Address(RVA = "0x10DEF8C", Offset = "0x10DEF8C", VA = "0x10DEF8C")]
		public CreateOverlapColliders()
		{
		}
	}
	[Token(Token = "0x20001DA")]
	public class ToggleTerrain : MonoBehaviour
	{
		[Token(Token = "0x40008CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject terrainGO;

		[Token(Token = "0x40008CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MeshCombiner meshCombiner;

		[Token(Token = "0x40008CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GUIStyle textStyle;

		[Token(Token = "0x6000940")]
		[Address(RVA = "0x10DF440", Offset = "0x10DF440", VA = "0x10DF440")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000941")]
		[Address(RVA = "0x10DF450", Offset = "0x10DF450", VA = "0x10DF450")]
		private void Update()
		{
		}

		[Token(Token = "0x6000942")]
		[Address(RVA = "0x10DF4B0", Offset = "0x10DF4B0", VA = "0x10DF4B0")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000943")]
		[Address(RVA = "0x10DF700", Offset = "0x10DF700", VA = "0x10DF700")]
		public ToggleTerrain()
		{
		}
	}
	[Token(Token = "0x20001DB")]
	[ExecuteInEditMode]
	public class RandomizeTransform : MonoBehaviour
	{
		[Token(Token = "0x40008CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector2 scaleRange;

		[Token(Token = "0x6000944")]
		[Address(RVA = "0x10DF708", Offset = "0x10DF708", VA = "0x10DF708")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000945")]
		[Address(RVA = "0x10DF7B4", Offset = "0x10DF7B4", VA = "0x10DF7B4")]
		public RandomizeTransform()
		{
		}
	}
	[Token(Token = "0x20001DC")]
	public static class RemoveOverlappingTris
	{
		[Token(Token = "0x20001DD")]
		private struct ColliderInfo
		{
			[Token(Token = "0x40008D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public GameObject go;

			[Token(Token = "0x40008DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public int layer;
		}

		[Token(Token = "0x40008CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static FastList<Triangle3> triangles;

		[Token(Token = "0x40008D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static FastList<ColliderInfo> collidersInfo;

		[Token(Token = "0x40008D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static FastList<Collider> colliders;

		[Token(Token = "0x40008D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static FastList<RaycastHit> hitInfos;

		[Token(Token = "0x40008D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static FastList<RaycastHit> hitInfos2;

		[Token(Token = "0x40008D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static RaycastHit hitInfo;

		[Token(Token = "0x40008D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private static HashSet<GameObject> toCombineGos;

		[Token(Token = "0x40008D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private static Triangle3 tri;

		[Token(Token = "0x40008D7")]
		private const byte insideVoxel = 1;

		[Token(Token = "0x40008D8")]
		private const byte outsideVoxel = 2;

		[Token(Token = "0x6000946")]
		[Address(RVA = "0x10DF7C8", Offset = "0x10DF7C8", VA = "0x10DF7C8")]
		public static void RemoveOverlap(Transform t, MeshCombineJobManager.MeshCombineJob meshCombineJob, MeshCache.SubMeshCache newMeshCache, ref byte[] vertexIsInsideCollider, [Optional] string excludeOverlapRemovalTag)
		{
		}

		[Token(Token = "0x6000947")]
		[Address(RVA = "0x10E0CA4", Offset = "0x10E0CA4", VA = "0x10E0CA4")]
		private static bool CheckAnyInsideOfLodGroups(int layerMask, int lodLevel)
		{
			return default(bool);
		}

		[Token(Token = "0x6000948")]
		[Address(RVA = "0x10E0B1C", Offset = "0x10E0B1C", VA = "0x10E0B1C")]
		private static bool IsOneColliderGOInToCombineGos()
		{
			return default(bool);
		}

		[Token(Token = "0x6000949")]
		[Address(RVA = "0x10E0A28", Offset = "0x10E0A28", VA = "0x10E0A28")]
		private static bool AreAllHitInfosALodGroup()
		{
			return default(bool);
		}

		[Token(Token = "0x600094A")]
		[Address(RVA = "0x10E04D8", Offset = "0x10E04D8", VA = "0x10E04D8")]
		private static bool AnythingInside()
		{
			return default(bool);
		}

		[Token(Token = "0x600094B")]
		[Address(RVA = "0x10E10A4", Offset = "0x10E10A4", VA = "0x10E10A4")]
		private static bool Linecast(Vector3 p1, Vector3 p2, int layerMask)
		{
			return default(bool);
		}

		[Token(Token = "0x600094C")]
		[Address(RVA = "0x10E0670", Offset = "0x10E0670", VA = "0x10E0670")]
		private static bool LinecastAll(Vector3 p1, Vector3 p2, int layerMask)
		{
			return default(bool);
		}

		[Token(Token = "0x600094D")]
		[Address(RVA = "0x10E0844", Offset = "0x10E0844", VA = "0x10E0844")]
		private static bool IntersectAny()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20001DE")]
	public class SectorGrid3D<T>
	{
		[Token(Token = "0x40008DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public FastIndexList<Sector3D<T>> sectorList;

		[Token(Token = "0x40008DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Sector3D<T>[,,] sectors;

		[Token(Token = "0x40008DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Rect rect;

		[Token(Token = "0x40008DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Int3 sectorCount;

		[Token(Token = "0x40008DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 sectorGridOffset;

		[Token(Token = "0x40008E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 sectorSize;

		[Token(Token = "0x40008E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 halfSectorSize;

		[Token(Token = "0x40008E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 invSectorSize;

		[Token(Token = "0x40008E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 totalSize;

		[Token(Token = "0x40008E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 halfTotalSize;

		[Token(Token = "0x600094F")]
		public SectorGrid3D(Int3 sectorCount, Vector3 sectorSize, Vector3 sectorGridOffset)
		{
		}

		[Token(Token = "0x6000950")]
		public void GetSectors(FastList<Sector3D<T>> list, Vector3 pos, float radius)
		{
		}

		[Token(Token = "0x6000951")]
		public void GetOrCreateSector(Vector3 pos, out Sector3D<T> sector)
		{
		}

		[Token(Token = "0x6000952")]
		public Int3 GetSectorIndex(Vector3 pos)
		{
			return default(Int3);
		}

		[Token(Token = "0x6000953")]
		public Sector3D<T> GetSector(Vector3 pos)
		{
			return null;
		}

		[Token(Token = "0x6000954")]
		public Sector3D<T> CreateSector(ref Int3 s)
		{
			return null;
		}

		[Token(Token = "0x6000955")]
		public void RemoveSector(Vector3 pos)
		{
		}

		[Token(Token = "0x6000956")]
		public void RemoveSector(Int3 sectorIndex)
		{
		}

		[Token(Token = "0x6000957")]
		public void Reset()
		{
		}

		[Token(Token = "0x6000958")]
		public void Draw()
		{
		}

		[Token(Token = "0x6000959")]
		public void DrawSectors(FastList<Sector3D<T>> sectors, Color color)
		{
		}
	}
	[Token(Token = "0x20001DF")]
	public class Sector3D<T> : FastIndex
	{
		[Token(Token = "0x40008E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T list;

		[Token(Token = "0x40008E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Bounds bounds;

		[Token(Token = "0x600095A")]
		public Sector3D()
		{
		}
	}
	[Token(Token = "0x20001E0")]
	[ExecuteInEditMode]
	[DefaultExecutionOrder(-99999999)]
	public abstract class MCS_RemoveTris : MonoBehaviour
	{
		[Token(Token = "0x40008E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private HashSet<GameObjectLayer> gos;

		[Token(Token = "0x40008E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool hasRegistered;

		[Token(Token = "0x600095B")]
		[Address(RVA = "0x10E1428", Offset = "0x10E1428", VA = "0x10E1428")]
		private void Awake()
		{
		}

		[Token(Token = "0x600095C")]
		[Address(RVA = "0x10E15F8", Offset = "0x10E15F8", VA = "0x10E15F8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600095D")]
		[Address(RVA = "0x10E1430", Offset = "0x10E1430", VA = "0x10E1430")]
		private void Register(bool first)
		{
		}

		[Token(Token = "0x600095E")]
		[Address(RVA = "0x10E1600", Offset = "0x10E1600", VA = "0x10E1600")]
		private void Init(MeshCombiner meshCombiner)
		{
		}

		[Token(Token = "0x600095F")]
		[Address(RVA = "0x10E1708", Offset = "0x10E1708", VA = "0x10E1708")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000960")]
		[Address(RVA = "0x10E1988", Offset = "0x10E1988", VA = "0x10E1988")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000961")]
		[Address(RVA = "0x10E170C", Offset = "0x10E170C", VA = "0x10E170C")]
		private void Unregister()
		{
		}

		[Token(Token = "0x6000962")]
		[Address(RVA = "0x10E1B10", Offset = "0x10E1B10", VA = "0x10E1B10")]
		private void OnCombine(MeshCombiner meshCombiner)
		{
		}

		[Token(Token = "0x6000963")]
		[Address(RVA = "0x10E198C", Offset = "0x10E198C", VA = "0x10E198C")]
		private void OnCombineReady(MeshCombiner meshCombiner)
		{
		}

		[Token(Token = "0x6000964")]
		[Address(RVA = "0x10E1D1C", Offset = "0x10E1D1C", VA = "0x10E1D1C")]
		protected MCS_RemoveTris()
		{
		}
	}
	[Token(Token = "0x20001E1")]
	public struct GameObjectLayer
	{
		[Token(Token = "0x40008E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public GameObject go;

		[Token(Token = "0x40008EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int layer;

		[Token(Token = "0x6000965")]
		[Address(RVA = "0x10E1CBC", Offset = "0x10E1CBC", VA = "0x10E1CBC")]
		public GameObjectLayer(GameObject go)
		{
		}

		[Token(Token = "0x6000966")]
		[Address(RVA = "0x10E1CF8", Offset = "0x10E1CF8", VA = "0x10E1CF8")]
		public void RestoreLayer()
		{
		}
	}
}
namespace HutongGames.PlayMaker.Actions
{
	[Token(Token = "0x20001E2")]
	[Tooltip("Sets the properties of a MeshGenerator component")]
	[ActionCategory("Dreamteck Splines")]
	public class MeshGeneratorGetProperties : SplineUserSetProperties
	{
		[Token(Token = "0x40008EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private MeshGenerator meshGen;

		[Token(Token = "0x40008EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public FsmFloat size;

		[Token(Token = "0x40008ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public FsmColor color;

		[Token(Token = "0x40008EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public FsmVector3 offset;

		[Token(Token = "0x40008EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Range(-180f, 180f)]
		public FsmFloat rotation;

		[Token(Token = "0x40008F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public FsmBool doubleSided;

		[Token(Token = "0x40008F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public FsmBool flipFaces;

		[Token(Token = "0x6000967")]
		[Address(RVA = "0x10E1DA4", Offset = "0x10E1DA4", VA = "0x10E1DA4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000968")]
		[Address(RVA = "0x10E1F2C", Offset = "0x10E1F2C", VA = "0x10E1F2C", Slot = "63")]
		protected override bool UpdateCache()
		{
			return default(bool);
		}

		[Token(Token = "0x6000969")]
		[Address(RVA = "0x10E2184", Offset = "0x10E2184", VA = "0x10E2184", Slot = "62")]
		protected override void RunAction()
		{
		}

		[Token(Token = "0x600096A")]
		[Address(RVA = "0x10E22D0", Offset = "0x10E22D0", VA = "0x10E22D0")]
		public MeshGeneratorGetProperties()
		{
		}
	}
	[Token(Token = "0x20001E3")]
	[Tooltip("Sets the properties of a MeshGenerator component")]
	[ActionCategory("Dreamteck Splines")]
	public class MeshGeneratorSetProperties : SplineUserSetProperties
	{
		[Token(Token = "0x40008F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private MeshGenerator meshGen;

		[Token(Token = "0x40008F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public FsmFloat size;

		[Token(Token = "0x40008F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public FsmColor color;

		[Token(Token = "0x40008F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public FsmVector3 offset;

		[Token(Token = "0x40008F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Range(-180f, 180f)]
		public FsmFloat rotation;

		[Token(Token = "0x40008F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public FsmBool doubleSided;

		[Token(Token = "0x40008F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public FsmBool flipFaces;

		[Token(Token = "0x40008F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public bool setSize;

		[Token(Token = "0x40008FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC9")]
		public bool setColor;

		[Token(Token = "0x40008FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCA")]
		public bool setOffset;

		[Token(Token = "0x40008FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCB")]
		public bool setRotation;

		[Token(Token = "0x40008FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public bool setDoubleSided;

		[Token(Token = "0x40008FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCD")]
		public bool setFlipFaces;

		[Token(Token = "0x600096B")]
		[Address(RVA = "0x10E22E0", Offset = "0x10E22E0", VA = "0x10E22E0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600096C")]
		[Address(RVA = "0x10E2350", Offset = "0x10E2350", VA = "0x10E2350", Slot = "63")]
		protected override bool UpdateCache()
		{
			return default(bool);
		}

		[Token(Token = "0x600096D")]
		[Address(RVA = "0x10E2414", Offset = "0x10E2414", VA = "0x10E2414", Slot = "62")]
		protected override void RunAction()
		{
		}

		[Token(Token = "0x600096E")]
		[Address(RVA = "0x10E2548", Offset = "0x10E2548", VA = "0x10E2548")]
		public MeshGeneratorSetProperties()
		{
		}
	}
	[Token(Token = "0x20001E4")]
	[Tooltip("Base action for handling SplineComputers.")]
	[ActionCategory("Dreamteck Splines")]
	public abstract class SplineComputerAction : FsmStateAction
	{
		[Token(Token = "0x40008FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(SplineComputer))]
		[Tooltip("The target. A SplineComputer component is required")]
		public FsmOwnerDefault defaultOwner;

		[Token(Token = "0x4000900")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool everyFrame;

		[Token(Token = "0x4000901")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected SplineComputer computer;

		[Token(Token = "0x4000902")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected GameObject gameObject;

		[Token(Token = "0x600096F")]
		[Address(RVA = "0x10E2550", Offset = "0x10E2550", VA = "0x10E2550", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000970")]
		[Address(RVA = "0x10E2578", Offset = "0x10E2578", VA = "0x10E2578", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000971")]
		[Address(RVA = "0x10E25D4", Offset = "0x10E25D4", VA = "0x10E25D4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000972")]
		[Address(RVA = "0x10E261C", Offset = "0x10E261C", VA = "0x10E261C", Slot = "62")]
		protected virtual void RunAction()
		{
		}

		[Token(Token = "0x6000973")]
		[Address(RVA = "0x10E2620", Offset = "0x10E2620", VA = "0x10E2620", Slot = "63")]
		protected virtual bool UpdateCache()
		{
			return default(bool);
		}

		[Token(Token = "0x6000974")]
		[Address(RVA = "0x10E277C", Offset = "0x10E277C", VA = "0x10E277C")]
		protected SplineComputerAction()
		{
		}
	}
	[Token(Token = "0x20001E5")]
	[ActionCategory("Dreamteck Splines")]
	[Tooltip("Calculates the length of the spline")]
	public class SplineComputerCalculateLength : SplineComputerAction
	{
		[Token(Token = "0x4000903")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public FsmFloat from;

		[Token(Token = "0x4000904")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public FsmFloat to;

		[Token(Token = "0x4000905")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public FsmFloat length;

		[Token(Token = "0x6000975")]
		[Address(RVA = "0x10E2784", Offset = "0x10E2784", VA = "0x10E2784", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000976")]
		[Address(RVA = "0x10E2870", Offset = "0x10E2870", VA = "0x10E2870", Slot = "62")]
		protected override void RunAction()
		{
		}

		[Token(Token = "0x6000977")]
		[Address(RVA = "0x10E28E8", Offset = "0x10E28E8", VA = "0x10E28E8")]
		public SplineComputerCalculateLength()
		{
		}
	}
	[Token(Token = "0x20001E6")]
	[ActionCategory("Dreamteck Splines")]
	[Tooltip("Evaluates the SplineComputer and returns the position, rotation, size and color from the evaluation")]
	public class SplineComputerEvaluate : SplineComputerAction
	{
		[Token(Token = "0x4000906")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public FsmFloat percent;

		[Token(Token = "0x4000907")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public FsmVector3 position;

		[Token(Token = "0x4000908")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public FsmVector3 normal;

		[Token(Token = "0x4000909")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public FsmVector3 right;

		[Token(Token = "0x400090A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public FsmVector3 eulerRotation;

		[Token(Token = "0x400090B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public FsmFloat size;

		[Token(Token = "0x400090C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public FsmColor color;

		[Token(Token = "0x6000978")]
		[Address(RVA = "0x10E28F0", Offset = "0x10E28F0", VA = "0x10E28F0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000979")]
		[Address(RVA = "0x10E2978", Offset = "0x10E2978", VA = "0x10E2978", Slot = "62")]
		protected override void RunAction()
		{
		}

		[Token(Token = "0x600097A")]
		[Address(RVA = "0x10E2A7C", Offset = "0x10E2A7C", VA = "0x10E2A7C")]
		public SplineComputerEvaluate()
		{
		}
	}
	[Token(Token = "0x20001E7")]
	[Tooltip("Gets the properties of a point from the spline computer")]
	[ActionCategory("Dreamteck Splines")]
	public class SplineComputerGetPoint : SplineComputerAction
	{
		[Token(Token = "0x400090D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public FsmInt getPointIndex;

		[Token(Token = "0x400090E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public FsmVector3 position;

		[Token(Token = "0x400090F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public FsmVector3 tangent;

		[Token(Token = "0x4000910")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public FsmVector3 tangent2;

		[Token(Token = "0x4000911")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public FsmVector3 normal;

		[Token(Token = "0x4000912")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public FsmColor color;

		[Token(Token = "0x4000913")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public FsmFloat size;

		[Token(Token = "0x600097B")]
		[Address(RVA = "0x10E2A84", Offset = "0x10E2A84", VA = "0x10E2A84", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600097C")]
		[Address(RVA = "0x10E2B1C", Offset = "0x10E2B1C", VA = "0x10E2B1C", Slot = "62")]
		protected override void RunAction()
		{
		}

		[Token(Token = "0x600097D")]
		[Address(RVA = "0x10E2D18", Offset = "0x10E2D18", VA = "0x10E2D18")]
		public SplineComputerGetPoint()
		{
		}
	}
	[Token(Token = "0x20001E8")]
	[ActionCategory("Dreamteck Splines")]
	[Tooltip("Projects a point in space on the spline and returns the evaluation percent")]
	public class SplineComputerProject : SplineComputerAction
	{
		[Token(Token = "0x4000914")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public FsmVector3 point;

		[Token(Token = "0x4000915")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public FsmFloat from;

		[Token(Token = "0x4000916")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public FsmFloat to;

		[Token(Token = "0x4000917")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public FsmFloat percent;

		[Token(Token = "0x600097E")]
		[Address(RVA = "0x10E2D20", Offset = "0x10E2D20", VA = "0x10E2D20", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600097F")]
		[Address(RVA = "0x10E2E1C", Offset = "0x10E2E1C", VA = "0x10E2E1C", Slot = "62")]
		protected override void RunAction()
		{
		}

		[Token(Token = "0x6000980")]
		[Address(RVA = "0x10E2EC4", Offset = "0x10E2EC4", VA = "0x10E2EC4")]
		public SplineComputerProject()
		{
		}
	}
	[Token(Token = "0x20001E9")]
	[ActionCategory("Dreamteck Splines")]
	[Tooltip("Sets the properties of a point from the spline computer")]
	public class SplineComputerSetPoint : SplineComputerAction
	{
		[Token(Token = "0x4000918")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public FsmInt setPointIndex;

		[Token(Token = "0x4000919")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public FsmBool additive;

		[Token(Token = "0x400091A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public FsmVector3 position;

		[Token(Token = "0x400091B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public FsmVector3 tangent;

		[Token(Token = "0x400091C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public FsmVector3 tangent2;

		[Token(Token = "0x400091D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public FsmVector3 normal;

		[Token(Token = "0x400091E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public FsmColor color;

		[Token(Token = "0x400091F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public FsmFloat size;

		[Token(Token = "0x6000981")]
		[Address(RVA = "0x10E2ECC", Offset = "0x10E2ECC", VA = "0x10E2ECC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000982")]
		[Address(RVA = "0x10E3004", Offset = "0x10E3004", VA = "0x10E3004", Slot = "62")]
		protected override void RunAction()
		{
		}

		[Token(Token = "0x6000983")]
		[Address(RVA = "0x10E3604", Offset = "0x10E3604", VA = "0x10E3604")]
		public SplineComputerSetPoint()
		{
		}
	}
	[Token(Token = "0x20001EA")]
	[Tooltip("Calculates the percent from the spline at a given distance from the start point")]
	[ActionCategory("Dreamteck Splines")]
	public class SplineComputerTravel : SplineComputerAction
	{
		[Token(Token = "0x4000920")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public FsmFloat start;

		[Token(Token = "0x4000921")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public FsmFloat distance;

		[Token(Token = "0x4000922")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[ObjectType(typeof(Spline.Direction))]
		public FsmEnum direction;

		[Token(Token = "0x4000923")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public FsmFloat result;

		[Token(Token = "0x6000984")]
		[Address(RVA = "0x10E360C", Offset = "0x10E360C", VA = "0x10E360C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000985")]
		[Address(RVA = "0x10E3720", Offset = "0x10E3720", VA = "0x10E3720", Slot = "62")]
		protected override void RunAction()
		{
		}

		[Token(Token = "0x6000986")]
		[Address(RVA = "0x10E3804", Offset = "0x10E3804", VA = "0x10E3804")]
		public SplineComputerTravel()
		{
		}
	}
	[Token(Token = "0x20001EB")]
	[Tooltip("Gets the result of a spline tracer")]
	[ActionCategory("Dreamteck Splines")]
	public class SplineTracerGetResult : SplineUserAction
	{
		[Token(Token = "0x4000924")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public FsmFloat percent;

		[Token(Token = "0x4000925")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public FsmVector3 position;

		[Token(Token = "0x4000926")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public FsmVector3 direction;

		[Token(Token = "0x4000927")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public FsmVector3 normal;

		[Token(Token = "0x4000928")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public FsmFloat size;

		[Token(Token = "0x4000929")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public FsmColor color;

		[Token(Token = "0x6000987")]
		[Address(RVA = "0x10E380C", Offset = "0x10E380C", VA = "0x10E380C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000988")]
		[Address(RVA = "0x10E39B4", Offset = "0x10E39B4", VA = "0x10E39B4", Slot = "62")]
		protected override void RunAction()
		{
		}

		[Token(Token = "0x6000989")]
		[Address(RVA = "0x10E3ACC", Offset = "0x10E3ACC", VA = "0x10E3ACC")]
		public SplineTracerGetResult()
		{
		}
	}
	[Token(Token = "0x20001EC")]
	[ActionCategory("Dreamteck Splines")]
	[Tooltip("Sets the percent of a SplineTracer")]
	public class SplineTracerSetDistance : SplineUserAction
	{
		[Token(Token = "0x400092A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public FsmFloat distance;

		[Token(Token = "0x400092B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public FsmBool checkTriggers;

		[Token(Token = "0x600098A")]
		[Address(RVA = "0x10E3ADC", Offset = "0x10E3ADC", VA = "0x10E3ADC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600098B")]
		[Address(RVA = "0x10E3BA0", Offset = "0x10E3BA0", VA = "0x10E3BA0", Slot = "62")]
		protected override void RunAction()
		{
		}

		[Token(Token = "0x600098C")]
		[Address(RVA = "0x10E3C9C", Offset = "0x10E3C9C", VA = "0x10E3C9C")]
		public SplineTracerSetDistance()
		{
		}
	}
	[Token(Token = "0x20001ED")]
	[ActionCategory("Dreamteck Splines")]
	[Tooltip("Sets the percent of a SplineTracer")]
	public class SplineTracerSetPercent : SplineUserAction
	{
		[Token(Token = "0x400092C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public FsmFloat percent;

		[Token(Token = "0x400092D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public FsmBool checkTriggers;

		[Token(Token = "0x600098D")]
		[Address(RVA = "0x10E3CA4", Offset = "0x10E3CA4", VA = "0x10E3CA4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600098E")]
		[Address(RVA = "0x10E3D68", Offset = "0x10E3D68", VA = "0x10E3D68", Slot = "62")]
		protected override void RunAction()
		{
		}

		[Token(Token = "0x600098F")]
		[Address(RVA = "0x10E3E64", Offset = "0x10E3E64", VA = "0x10E3E64")]
		public SplineTracerSetPercent()
		{
		}
	}
	[Token(Token = "0x20001EE")]
	[ActionCategory("Dreamteck Splines")]
	[Tooltip("Base action for handling SplineUsers.")]
	public abstract class SplineUserAction : FsmStateAction
	{
		[Token(Token = "0x400092E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(SplineUser))]
		[Tooltip("The target. A SplineUser component is required")]
		public FsmOwnerDefault defaultOwner;

		[Token(Token = "0x400092F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool everyFrame;

		[Token(Token = "0x4000930")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public SplineUser.UpdateMethod updateMethod;

		[Token(Token = "0x4000931")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected SplineUser user;

		[Token(Token = "0x4000932")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected GameObject gameObject;

		[Token(Token = "0x6000990")]
		[Address(RVA = "0x10E398C", Offset = "0x10E398C", VA = "0x10E398C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000991")]
		[Address(RVA = "0x10E3E6C", Offset = "0x10E3E6C", VA = "0x10E3E6C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000992")]
		[Address(RVA = "0x10E3EC8", Offset = "0x10E3EC8", VA = "0x10E3EC8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000993")]
		[Address(RVA = "0x10E3F20", Offset = "0x10E3F20", VA = "0x10E3F20", Slot = "33")]
		public override void OnFixedUpdate()
		{
		}

		[Token(Token = "0x6000994")]
		[Address(RVA = "0x10E3F7C", Offset = "0x10E3F7C", VA = "0x10E3F7C", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x6000995")]
		[Address(RVA = "0x10E3AC8", Offset = "0x10E3AC8", VA = "0x10E3AC8", Slot = "62")]
		protected virtual void RunAction()
		{
		}

		[Token(Token = "0x6000996")]
		[Address(RVA = "0x10E1FF0", Offset = "0x10E1FF0", VA = "0x10E1FF0", Slot = "63")]
		protected virtual bool UpdateCache()
		{
			return default(bool);
		}

		[Token(Token = "0x6000997")]
		[Address(RVA = "0x10E3AD4", Offset = "0x10E3AD4", VA = "0x10E3AD4")]
		protected SplineUserAction()
		{
		}
	}
	[Token(Token = "0x20001EF")]
	[ActionCategory("Dreamteck Splines")]
	[Tooltip("Calculates the length of the sampled spline of a SplineUser")]
	public class SplineUserCalculateLength : SplineUserAction
	{
		[Token(Token = "0x4000933")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public FsmFloat from;

		[Token(Token = "0x4000934")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public FsmFloat to;

		[Token(Token = "0x4000935")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public FsmFloat length;

		[Token(Token = "0x6000998")]
		[Address(RVA = "0x10E3FD8", Offset = "0x10E3FD8", VA = "0x10E3FD8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000999")]
		[Address(RVA = "0x10E40C4", Offset = "0x10E40C4", VA = "0x10E40C4", Slot = "62")]
		protected override void RunAction()
		{
		}

		[Token(Token = "0x600099A")]
		[Address(RVA = "0x10E4140", Offset = "0x10E4140", VA = "0x10E4140")]
		public SplineUserCalculateLength()
		{
		}
	}
	[Token(Token = "0x20001F0")]
	[ActionCategory("Dreamteck Splines")]
	[Tooltip("Evaluates the sampled result of a SplineUser and returns the position, rotation, size and color from the evaluation")]
	public class SplineUserEvaluate : SplineUserAction
	{
		[Token(Token = "0x4000936")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public FsmFloat percent;

		[Token(Token = "0x4000937")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public FsmVector3 position;

		[Token(Token = "0x4000938")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public FsmVector3 normal;

		[Token(Token = "0x4000939")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public FsmVector3 right;

		[Token(Token = "0x400093A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public FsmVector3 eulerRotation;

		[Token(Token = "0x400093B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public FsmFloat size;

		[Token(Token = "0x400093C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public FsmColor color;

		[Token(Token = "0x600099B")]
		[Address(RVA = "0x10E4148", Offset = "0x10E4148", VA = "0x10E4148", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600099C")]
		[Address(RVA = "0x10E41D0", Offset = "0x10E41D0", VA = "0x10E41D0", Slot = "62")]
		protected override void RunAction()
		{
		}

		[Token(Token = "0x600099D")]
		[Address(RVA = "0x10E42D0", Offset = "0x10E42D0", VA = "0x10E42D0")]
		public SplineUserEvaluate()
		{
		}
	}
	[Token(Token = "0x20001F1")]
	[ActionCategory("Dreamteck Splines")]
	[Tooltip("Gets the properties of a SplineUser component")]
	public class SplineUserGetProperties : SplineUserAction
	{
		[Token(Token = "0x400093D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public FsmFloat clipFrom;

		[Token(Token = "0x400093E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public FsmFloat clipTo;

		[Token(Token = "0x400093F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public FsmFloat resolution;

		[Token(Token = "0x600099E")]
		[Address(RVA = "0x10E42D8", Offset = "0x10E42D8", VA = "0x10E42D8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600099F")]
		[Address(RVA = "0x10E4330", Offset = "0x10E4330", VA = "0x10E4330", Slot = "62")]
		protected override void RunAction()
		{
		}

		[Token(Token = "0x60009A0")]
		[Address(RVA = "0x10E4384", Offset = "0x10E4384", VA = "0x10E4384")]
		public SplineUserGetProperties()
		{
		}
	}
	[Token(Token = "0x20001F2")]
	[ActionCategory("Dreamteck Splines")]
	[Tooltip("Projects a point in space on the sampled spline and returns the evaluation percent")]
	public class SplineUserProject : SplineUserAction
	{
		[Token(Token = "0x4000940")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public FsmVector3 point;

		[Token(Token = "0x4000941")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public FsmFloat from;

		[Token(Token = "0x4000942")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public FsmFloat to;

		[Token(Token = "0x4000943")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public FsmFloat percent;

		[Token(Token = "0x60009A1")]
		[Address(RVA = "0x10E438C", Offset = "0x10E438C", VA = "0x10E438C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60009A2")]
		[Address(RVA = "0x10E4488", Offset = "0x10E4488", VA = "0x10E4488", Slot = "62")]
		protected override void RunAction()
		{
		}

		[Token(Token = "0x60009A3")]
		[Address(RVA = "0x10E453C", Offset = "0x10E453C", VA = "0x10E453C")]
		public SplineUserProject()
		{
		}
	}
	[Token(Token = "0x20001F3")]
	[ActionCategory("Dreamteck Splines")]
	[Tooltip("Sets the properties of a MeshGenerator component")]
	public class SplineUserSetProperties : SplineUserAction
	{
		[Token(Token = "0x4000944")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public FsmFloat clipFrom;

		[Token(Token = "0x4000945")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public FsmFloat clipTo;

		[Token(Token = "0x4000946")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public FsmFloat resolution;

		[Token(Token = "0x4000947")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public bool setClipFrom;

		[Token(Token = "0x4000948")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x89")]
		public bool setClipTo;

		[Token(Token = "0x4000949")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8A")]
		public bool setResolution;

		[Token(Token = "0x60009A4")]
		[Address(RVA = "0x10E1E14", Offset = "0x10E1E14", VA = "0x10E1E14", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60009A5")]
		[Address(RVA = "0x10E221C", Offset = "0x10E221C", VA = "0x10E221C", Slot = "62")]
		protected override void RunAction()
		{
		}

		[Token(Token = "0x60009A6")]
		[Address(RVA = "0x10E22D8", Offset = "0x10E22D8", VA = "0x10E22D8")]
		public SplineUserSetProperties()
		{
		}
	}
	[Token(Token = "0x20001F4")]
	[ActionCategory("Dreamteck Splines")]
	[Tooltip("Calculates the percent from the spline at a given distance from the start point")]
	public class SplineUserTravel : SplineUserAction
	{
		[Token(Token = "0x400094A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public FsmFloat start;

		[Token(Token = "0x400094B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public FsmFloat distance;

		[Token(Token = "0x400094C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[ObjectType(typeof(Spline.Direction))]
		public FsmEnum direction;

		[Token(Token = "0x400094D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public FsmFloat result;

		[Token(Token = "0x60009A7")]
		[Address(RVA = "0x10E4544", Offset = "0x10E4544", VA = "0x10E4544", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60009A8")]
		[Address(RVA = "0x10E4658", Offset = "0x10E4658", VA = "0x10E4658", Slot = "62")]
		protected override void RunAction()
		{
		}

		[Token(Token = "0x60009A9")]
		[Address(RVA = "0x10E4744", Offset = "0x10E4744", VA = "0x10E4744")]
		public SplineUserTravel()
		{
		}
	}
}
namespace Dreamteck
{
	[Token(Token = "0x20001F5")]
	public static class DMath
	{
		[Token(Token = "0x60009AA")]
		[Address(RVA = "0x10E474C", Offset = "0x10E474C", VA = "0x10E474C")]
		public static double Sin(double a)
		{
			return default(double);
		}

		[Token(Token = "0x60009AB")]
		[Address(RVA = "0x10E47A8", Offset = "0x10E47A8", VA = "0x10E47A8")]
		public static double Cos(double a)
		{
			return default(double);
		}

		[Token(Token = "0x60009AC")]
		[Address(RVA = "0x10E4804", Offset = "0x10E4804", VA = "0x10E4804")]
		public static double Tan(double a)
		{
			return default(double);
		}

		[Token(Token = "0x60009AD")]
		[Address(RVA = "0x10E4860", Offset = "0x10E4860", VA = "0x10E4860")]
		public static double Pow(double x, double y)
		{
			return default(double);
		}

		[Token(Token = "0x60009AE")]
		[Address(RVA = "0x10E48C8", Offset = "0x10E48C8", VA = "0x10E48C8")]
		public static double Log(double a, double newBase)
		{
			return default(double);
		}

		[Token(Token = "0x60009AF")]
		[Address(RVA = "0x10E4930", Offset = "0x10E4930", VA = "0x10E4930")]
		public static double Log10(double a)
		{
			return default(double);
		}

		[Token(Token = "0x60009B0")]
		[Address(RVA = "0x10E498C", Offset = "0x10E498C", VA = "0x10E498C")]
		public static double Clamp01(double a)
		{
			return default(double);
		}

		[Token(Token = "0x60009B1")]
		[Address(RVA = "0x10E49AC", Offset = "0x10E49AC", VA = "0x10E49AC")]
		public static double Clamp(double a, double min, double max)
		{
			return default(double);
		}

		[Token(Token = "0x60009B2")]
		[Address(RVA = "0x10E49C8", Offset = "0x10E49C8", VA = "0x10E49C8")]
		public static double Lerp(double a, double b, double t)
		{
			return default(double);
		}

		[Token(Token = "0x60009B3")]
		[Address(RVA = "0x10E49EC", Offset = "0x10E49EC", VA = "0x10E49EC")]
		public static double InverseLerp(double a, double b, double t)
		{
			return default(double);
		}

		[Token(Token = "0x60009B4")]
		[Address(RVA = "0x10E4A20", Offset = "0x10E4A20", VA = "0x10E4A20")]
		public static Vector3 LerpVector3(Vector3 a, Vector3 b, double t)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60009B5")]
		[Address(RVA = "0x10E4A80", Offset = "0x10E4A80", VA = "0x10E4A80")]
		public static double Round(double a)
		{
			return default(double);
		}

		[Token(Token = "0x60009B6")]
		[Address(RVA = "0x10E4B48", Offset = "0x10E4B48", VA = "0x10E4B48")]
		public static int RoundInt(double a)
		{
			return default(int);
		}

		[Token(Token = "0x60009B7")]
		[Address(RVA = "0x10E4C28", Offset = "0x10E4C28", VA = "0x10E4C28")]
		public static double Ceil(double a)
		{
			return default(double);
		}

		[Token(Token = "0x60009B8")]
		[Address(RVA = "0x10E4C84", Offset = "0x10E4C84", VA = "0x10E4C84")]
		public static int CeilInt(double a)
		{
			return default(int);
		}

		[Token(Token = "0x60009B9")]
		[Address(RVA = "0x10E4CF8", Offset = "0x10E4CF8", VA = "0x10E4CF8")]
		public static double Floor(double a)
		{
			return default(double);
		}

		[Token(Token = "0x60009BA")]
		[Address(RVA = "0x10E4D54", Offset = "0x10E4D54", VA = "0x10E4D54")]
		public static int FloorInt(double a)
		{
			return default(int);
		}

		[Token(Token = "0x60009BB")]
		[Address(RVA = "0x10E4DC8", Offset = "0x10E4DC8", VA = "0x10E4DC8")]
		public static double Move(double current, double target, double amount)
		{
			return default(double);
		}

		[Token(Token = "0x60009BC")]
		[Address(RVA = "0x10E4DF8", Offset = "0x10E4DF8", VA = "0x10E4DF8")]
		public static double Abs(double a)
		{
			return default(double);
		}
	}
	[Token(Token = "0x20001F6")]
	public static class LinearAlgebraUtility
	{
		[Token(Token = "0x60009BD")]
		[Address(RVA = "0x10E4E08", Offset = "0x10E4E08", VA = "0x10E4E08")]
		public static Vector3 ProjectOnLine(Vector3 fromPoint, Vector3 toPoint, Vector3 project)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60009BE")]
		[Address(RVA = "0x10E4FA0", Offset = "0x10E4FA0", VA = "0x10E4FA0")]
		public static float InverseLerp(Vector3 a, Vector3 b, Vector3 value)
		{
			return default(float);
		}
	}
	[Token(Token = "0x20001F7")]
	public class MeshUtility
	{
		[Token(Token = "0x400094E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Vector3[] tan1;

		[Token(Token = "0x400094F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Vector3[] tan2;

		[Token(Token = "0x4000950")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static Vector4[] meshTangents;

		[Token(Token = "0x60009BF")]
		[Address(RVA = "0x10E4FF4", Offset = "0x10E4FF4", VA = "0x10E4FF4")]
		public static int[] GeneratePlaneTriangles(int x, int z, bool flip, int startTriangleIndex = 0, int startVertex = 0)
		{
			return null;
		}

		[Token(Token = "0x60009C0")]
		[Address(RVA = "0x10E50B4", Offset = "0x10E50B4", VA = "0x10E50B4")]
		public static int[] GeneratePlaneTriangles(ref int[] triangles, int x, int z, bool flip, int startTriangleIndex = 0, int startVertex = 0, bool reallocateArray = false)
		{
			return null;
		}

		[Token(Token = "0x60009C1")]
		[Address(RVA = "0x10E5340", Offset = "0x10E5340", VA = "0x10E5340")]
		public static void CalculateTangents(TS_Mesh mesh)
		{
		}

		[Token(Token = "0x60009C2")]
		[Address(RVA = "0x10E59AC", Offset = "0x10E59AC", VA = "0x10E59AC")]
		public static void MakeDoublesided(TS_Mesh input)
		{
		}

		[Token(Token = "0x60009C3")]
		[Address(RVA = "0x10E622C", Offset = "0x10E622C", VA = "0x10E622C")]
		public static void MakeDoublesidedHalf(TS_Mesh input)
		{
		}

		[Token(Token = "0x60009C4")]
		[Address(RVA = "0x10E6654", Offset = "0x10E6654", VA = "0x10E6654")]
		public static void InverseTransformMesh(TS_Mesh input, TS_Transform transform)
		{
		}

		[Token(Token = "0x60009C5")]
		[Address(RVA = "0x10E6738", Offset = "0x10E6738", VA = "0x10E6738")]
		public static void TransformMesh(TS_Mesh input, TS_Transform transform)
		{
		}

		[Token(Token = "0x60009C6")]
		[Address(RVA = "0x10E681C", Offset = "0x10E681C", VA = "0x10E681C")]
		public static void InverseTransformMesh(TS_Mesh input, Transform transform)
		{
		}

		[Token(Token = "0x60009C7")]
		[Address(RVA = "0x10E6900", Offset = "0x10E6900", VA = "0x10E6900")]
		public static void TransformMesh(TS_Mesh input, Transform transform)
		{
		}

		[Token(Token = "0x60009C8")]
		[Address(RVA = "0x10E69E4", Offset = "0x10E69E4", VA = "0x10E69E4")]
		public static void InverseTransformMesh(Mesh input, Transform transform)
		{
		}

		[Token(Token = "0x60009C9")]
		[Address(RVA = "0x10E6B34", Offset = "0x10E6B34", VA = "0x10E6B34")]
		public static void TransformMesh(Mesh input, Transform transform)
		{
		}

		[Token(Token = "0x60009CA")]
		[Address(RVA = "0x10E6CC0", Offset = "0x10E6CC0", VA = "0x10E6CC0")]
		public static void TransformVertices(Vector3[] vertices, Transform transform)
		{
		}

		[Token(Token = "0x60009CB")]
		[Address(RVA = "0x10E6D48", Offset = "0x10E6D48", VA = "0x10E6D48")]
		public static void InverseTransformVertices(Vector3[] vertices, Transform transform)
		{
		}

		[Token(Token = "0x60009CC")]
		[Address(RVA = "0x10E6DD0", Offset = "0x10E6DD0", VA = "0x10E6DD0")]
		public static void TransformNormals(Vector3[] normals, Transform transform)
		{
		}

		[Token(Token = "0x60009CD")]
		[Address(RVA = "0x10E6E58", Offset = "0x10E6E58", VA = "0x10E6E58")]
		public static void InverseTransformNormals(Vector3[] normals, Transform transform)
		{
		}

		[Token(Token = "0x60009CE")]
		[Address(RVA = "0x10E6EE0", Offset = "0x10E6EE0", VA = "0x10E6EE0")]
		public static string ToOBJString(Mesh mesh, Material[] materials)
		{
			return null;
		}

		[Token(Token = "0x60009CF")]
		[Address(RVA = "0x10E786C", Offset = "0x10E786C", VA = "0x10E786C")]
		public static Mesh Copy(Mesh input)
		{
			return null;
		}

		[Token(Token = "0x60009D0")]
		[Address(RVA = "0x10E7A58", Offset = "0x10E7A58", VA = "0x10E7A58")]
		public static void Triangulate(Vector2[] points, ref int[] output)
		{
		}

		[Token(Token = "0x60009D1")]
		[Address(RVA = "0x10E81BC", Offset = "0x10E81BC", VA = "0x10E81BC")]
		public static void FlipTriangles(ref int[] triangles)
		{
		}

		[Token(Token = "0x60009D2")]
		[Address(RVA = "0x10E8228", Offset = "0x10E8228", VA = "0x10E8228")]
		public static void FlipFaces(TS_Mesh input)
		{
		}

		[Token(Token = "0x60009D3")]
		[Address(RVA = "0x10E8360", Offset = "0x10E8360", VA = "0x10E8360")]
		public static void BreakMesh(Mesh input, bool keepNormals = true)
		{
		}

		[Token(Token = "0x60009D4")]
		[Address(RVA = "0x10E7F3C", Offset = "0x10E7F3C", VA = "0x10E7F3C")]
		private static float Area(Vector2[] points, int maxCount)
		{
			return default(float);
		}

		[Token(Token = "0x60009D5")]
		[Address(RVA = "0x10E7FC8", Offset = "0x10E7FC8", VA = "0x10E7FC8")]
		private static bool Snip(Vector2[] points, int u, int v, int w, int n, int[] V)
		{
			return default(bool);
		}

		[Token(Token = "0x60009D6")]
		[Address(RVA = "0x10E8D60", Offset = "0x10E8D60", VA = "0x10E8D60")]
		private static bool InsideTriangle(Vector2 A, Vector2 B, Vector2 C, Vector2 P)
		{
			return default(bool);
		}

		[Token(Token = "0x60009D7")]
		[Address(RVA = "0x10E8DDC", Offset = "0x10E8DDC", VA = "0x10E8DDC")]
		public MeshUtility()
		{
		}
	}
	[Token(Token = "0x20001F8")]
	public static class ResourceUtility
	{
		[Token(Token = "0x60009D9")]
		[Address(RVA = "0x10E8EBC", Offset = "0x10E8EBC", VA = "0x10E8EBC")]
		public static string FindFolder(string dir, string folderPattern)
		{
			return null;
		}

		[Token(Token = "0x60009DA")]
		[Address(RVA = "0x10E928C", Offset = "0x10E928C", VA = "0x10E928C")]
		public static Texture2D LoadTexture(string dreamteckPath, string textureFileName)
		{
			return null;
		}

		[Token(Token = "0x60009DB")]
		[Address(RVA = "0x10E940C", Offset = "0x10E940C", VA = "0x10E940C")]
		public static Texture2D LoadTexture(string path)
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x20001F9")]
	public class TS_Bounds
	{
		[Token(Token = "0x4000951")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 center;

		[Token(Token = "0x4000952")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 extents;

		[Token(Token = "0x4000953")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 max;

		[Token(Token = "0x4000954")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector3 min;

		[Token(Token = "0x4000955")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector3 size;

		[Token(Token = "0x60009DC")]
		[Address(RVA = "0x10E9504", Offset = "0x10E9504", VA = "0x10E9504")]
		public TS_Bounds()
		{
		}

		[Token(Token = "0x60009DD")]
		[Address(RVA = "0x10E963C", Offset = "0x10E963C", VA = "0x10E963C")]
		public TS_Bounds(Bounds bounds)
		{
		}

		[Token(Token = "0x60009DE")]
		[Address(RVA = "0x10E9758", Offset = "0x10E9758", VA = "0x10E9758")]
		public TS_Bounds(Vector3 c, Vector3 s)
		{
		}

		[Token(Token = "0x60009DF")]
		[Address(RVA = "0x10E9884", Offset = "0x10E9884", VA = "0x10E9884")]
		public TS_Bounds(Vector3 min, Vector3 max, Vector3 center)
		{
		}

		[Token(Token = "0x60009E0")]
		[Address(RVA = "0x10E99BC", Offset = "0x10E99BC", VA = "0x10E99BC")]
		public void CreateFromMinMax(Vector3 min, Vector3 max)
		{
		}

		[Token(Token = "0x60009E1")]
		[Address(RVA = "0x10E9A08", Offset = "0x10E9A08", VA = "0x10E9A08")]
		public bool Contains(Vector3 point)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20001FA")]
	public class TS_Mesh
	{
		[Token(Token = "0x4000956")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3[] vertices;

		[Token(Token = "0x4000957")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3[] normals;

		[Token(Token = "0x4000958")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector4[] tangents;

		[Token(Token = "0x4000959")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Color[] colors;

		[Token(Token = "0x400095A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector2[] uv;

		[Token(Token = "0x400095B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector2[] uv2;

		[Token(Token = "0x400095C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector2[] uv3;

		[Token(Token = "0x400095D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector2[] uv4;

		[Token(Token = "0x400095E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int[] triangles;

		[Token(Token = "0x400095F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public List<int[]> subMeshes;

		[Token(Token = "0x4000960")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public TS_Bounds bounds;

		[Token(Token = "0x4000961")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool hasUpdate;

		[Token(Token = "0x170000AE")]
		public int vertexCount
		{
			[Token(Token = "0x60009E2")]
			[Address(RVA = "0x10E5990", Offset = "0x10E5990", VA = "0x10E5990")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60009E3")]
			[Address(RVA = "0x10E9A5C", Offset = "0x10E9A5C", VA = "0x10E9A5C")]
			set
			{
			}
		}

		[Token(Token = "0x60009E4")]
		[Address(RVA = "0x10E9A60", Offset = "0x10E9A60", VA = "0x10E9A60")]
		public TS_Mesh()
		{
		}

		[Token(Token = "0x60009E5")]
		[Address(RVA = "0x10E9CF8", Offset = "0x10E9CF8", VA = "0x10E9CF8")]
		public TS_Mesh(Mesh mesh)
		{
		}

		[Token(Token = "0x60009E6")]
		[Address(RVA = "0x10EA208", Offset = "0x10EA208", VA = "0x10EA208")]
		public void Clear()
		{
		}

		[Token(Token = "0x60009E7")]
		[Address(RVA = "0x10E9FA0", Offset = "0x10E9FA0", VA = "0x10E9FA0")]
		public void CreateFromMesh(Mesh mesh)
		{
		}

		[Token(Token = "0x60009E8")]
		[Address(RVA = "0x10EA494", Offset = "0x10EA494", VA = "0x10EA494")]
		public void Combine(List<TS_Mesh> newMeshes, bool overwrite = false)
		{
		}

		[Token(Token = "0x60009E9")]
		[Address(RVA = "0x10EB790", Offset = "0x10EB790", VA = "0x10EB790")]
		public void Combine(TS_Mesh newMesh)
		{
		}

		[Token(Token = "0x60009EA")]
		[Address(RVA = "0x10EBF20", Offset = "0x10EBF20", VA = "0x10EBF20")]
		public static TS_Mesh Copy(TS_Mesh input)
		{
			return null;
		}

		[Token(Token = "0x60009EB")]
		[Address(RVA = "0x10EC438", Offset = "0x10EC438", VA = "0x10EC438")]
		public void Absorb(TS_Mesh input)
		{
		}

		[Token(Token = "0x60009EC")]
		[Address(RVA = "0x10ECB28", Offset = "0x10ECB28", VA = "0x10ECB28")]
		public void WriteMesh(ref Mesh input)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001FB")]
	public class TS_Transform
	{
		[Token(Token = "0x4000962")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool setPosition;

		[Token(Token = "0x4000963")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		private bool setRotation;

		[Token(Token = "0x4000964")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		private bool setScale;

		[Token(Token = "0x4000965")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13")]
		private bool setLocalPosition;

		[Token(Token = "0x4000966")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private bool setLocalRotation;

		[Token(Token = "0x4000967")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[HideInInspector]
		private Transform _transform;

		[Token(Token = "0x4000968")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[HideInInspector]
		private float posX;

		[Token(Token = "0x4000969")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		[HideInInspector]
		private float posY;

		[Token(Token = "0x400096A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		[SerializeField]
		private float posZ;

		[Token(Token = "0x400096B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		[HideInInspector]
		private float scaleX;

		[Token(Token = "0x400096C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		[HideInInspector]
		private float scaleY;

		[Token(Token = "0x400096D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		[HideInInspector]
		private float scaleZ;

		[Token(Token = "0x400096E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		[SerializeField]
		private float lossyScaleX;

		[Token(Token = "0x400096F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		[HideInInspector]
		private float lossyScaleY;

		[Token(Token = "0x4000970")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[HideInInspector]
		private float lossyScaleZ;

		[Token(Token = "0x4000971")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[SerializeField]
		[HideInInspector]
		private float rotX;

		[Token(Token = "0x4000972")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[HideInInspector]
		[SerializeField]
		private float rotY;

		[Token(Token = "0x4000973")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[SerializeField]
		[HideInInspector]
		private float rotZ;

		[Token(Token = "0x4000974")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		[HideInInspector]
		private float rotW;

		[Token(Token = "0x4000975")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[SerializeField]
		[HideInInspector]
		private float lposX;

		[Token(Token = "0x4000976")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		[HideInInspector]
		private float lposY;

		[Token(Token = "0x4000977")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[SerializeField]
		[HideInInspector]
		private float lposZ;

		[Token(Token = "0x4000978")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HideInInspector]
		[SerializeField]
		private float lrotX;

		[Token(Token = "0x4000979")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[SerializeField]
		[HideInInspector]
		private float lrotY;

		[Token(Token = "0x400097A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		[HideInInspector]
		private float lrotZ;

		[Token(Token = "0x400097B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[SerializeField]
		[HideInInspector]
		private float lrotW;

		[Token(Token = "0x170000AF")]
		public Vector3 position
		{
			[Token(Token = "0x60009ED")]
			[Address(RVA = "0xFC9A44", Offset = "0xFC9A44", VA = "0xFC9A44")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60009EE")]
			[Address(RVA = "0xFC9A88", Offset = "0xFC9A88", VA = "0xFC9A88")]
			set
			{
			}
		}

		[Token(Token = "0x170000B0")]
		public Quaternion rotation
		{
			[Token(Token = "0x60009EF")]
			[Address(RVA = "0xFC9AD8", Offset = "0xFC9AD8", VA = "0xFC9AD8")]
			get
			{
				return default(Quaternion);
			}
			[Token(Token = "0x60009F0")]
			[Address(RVA = "0xFC9B28", Offset = "0xFC9B28", VA = "0xFC9B28")]
			set
			{
			}
		}

		[Token(Token = "0x170000B1")]
		public Vector3 scale
		{
			[Token(Token = "0x60009F1")]
			[Address(RVA = "0xFC9B84", Offset = "0xFC9B84", VA = "0xFC9B84")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60009F2")]
			[Address(RVA = "0xFC9BC8", Offset = "0xFC9BC8", VA = "0xFC9BC8")]
			set
			{
			}
		}

		[Token(Token = "0x170000B2")]
		public Vector3 lossyScale
		{
			[Token(Token = "0x60009F3")]
			[Address(RVA = "0xFC9C14", Offset = "0xFC9C14", VA = "0xFC9C14")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60009F4")]
			[Address(RVA = "0xFC9C58", Offset = "0xFC9C58", VA = "0xFC9C58")]
			set
			{
			}
		}

		[Token(Token = "0x170000B3")]
		public Vector3 localPosition
		{
			[Token(Token = "0x60009F5")]
			[Address(RVA = "0xFC9CA4", Offset = "0xFC9CA4", VA = "0xFC9CA4")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60009F6")]
			[Address(RVA = "0xFC9CE8", Offset = "0xFC9CE8", VA = "0xFC9CE8")]
			set
			{
			}
		}

		[Token(Token = "0x170000B4")]
		public Quaternion localRotation
		{
			[Token(Token = "0x60009F7")]
			[Address(RVA = "0xFC9D38", Offset = "0xFC9D38", VA = "0xFC9D38")]
			get
			{
				return default(Quaternion);
			}
			[Token(Token = "0x60009F8")]
			[Address(RVA = "0xFC9D88", Offset = "0xFC9D88", VA = "0xFC9D88")]
			set
			{
			}
		}

		[Token(Token = "0x170000B5")]
		public Transform transform
		{
			[Token(Token = "0x60009F9")]
			[Address(RVA = "0xFC9DE4", Offset = "0xFC9DE4", VA = "0xFC9DE4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009FA")]
		[Address(RVA = "0xFC9DEC", Offset = "0xFC9DEC", VA = "0xFC9DEC")]
		public TS_Transform(Transform input)
		{
		}

		[Token(Token = "0x60009FB")]
		[Address(RVA = "0xFC9E88", Offset = "0xFC9E88", VA = "0xFC9E88")]
		public void Update()
		{
		}

		[Token(Token = "0x60009FC")]
		[Address(RVA = "0xFC9E64", Offset = "0xFC9E64", VA = "0xFC9E64")]
		public void SetTransform(Transform input)
		{
		}

		[Token(Token = "0x60009FD")]
		[Address(RVA = "0xFCA058", Offset = "0xFCA058", VA = "0xFCA058")]
		public bool HasChange()
		{
			return default(bool);
		}

		[Token(Token = "0x60009FE")]
		[Address(RVA = "0xFCA08C", Offset = "0xFCA08C", VA = "0xFCA08C")]
		public bool HasPositionChange()
		{
			return default(bool);
		}

		[Token(Token = "0x60009FF")]
		[Address(RVA = "0xFCA110", Offset = "0xFCA110", VA = "0xFCA110")]
		public bool HasRotationChange()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A00")]
		[Address(RVA = "0xFCA1B4", Offset = "0xFCA1B4", VA = "0xFCA1B4")]
		public bool HasScaleChange()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A01")]
		[Address(RVA = "0xFCA238", Offset = "0xFCA238", VA = "0xFCA238")]
		public Vector3 TransformPoint(Vector3 point)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000A02")]
		[Address(RVA = "0xFCA2CC", Offset = "0xFCA2CC", VA = "0xFCA2CC")]
		public Vector3 TransformDirection(Vector3 direction)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000A03")]
		[Address(RVA = "0xFCA310", Offset = "0xFCA310", VA = "0xFCA310")]
		public Vector3 InverseTransformPoint(Vector3 point)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000A04")]
		[Address(RVA = "0xFCA350", Offset = "0xFCA350", VA = "0xFCA350")]
		public Vector3 InverseTransformDirection(Vector3 direction)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000A05")]
		public T GetComponent<T>()
		{
			return (T)null;
		}
	}
}
namespace Dreamteck.Splines
{
	[Token(Token = "0x20001FC")]
	public class BlankUser : SplineUser
	{
		[Token(Token = "0x6000A06")]
		[Address(RVA = "0xFCA3D4", Offset = "0xFCA3D4", VA = "0xFCA3D4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A07")]
		[Address(RVA = "0xFCA3D8", Offset = "0xFCA3D8", VA = "0xFCA3D8", Slot = "19")]
		protected override void LateRun()
		{
		}

		[Token(Token = "0x6000A08")]
		[Address(RVA = "0xFCA3E0", Offset = "0xFCA3E0", VA = "0xFCA3E0", Slot = "20")]
		protected override void Build()
		{
		}

		[Token(Token = "0x6000A09")]
		[Address(RVA = "0xFCA3E8", Offset = "0xFCA3E8", VA = "0xFCA3E8", Slot = "21")]
		protected override void PostBuild()
		{
		}

		[Token(Token = "0x6000A0A")]
		[Address(RVA = "0xFCA3F0", Offset = "0xFCA3F0", VA = "0xFCA3F0")]
		public BlankUser()
		{
		}
	}
	[Token(Token = "0x20001FD")]
	[AddComponentMenu("Dreamteck/Splines/Edge Collider Generator")]
	[RequireComponent(typeof(EdgeCollider2D))]
	public class EdgeColliderGenerator : SplineUser
	{
		[Token(Token = "0x400097C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[HideInInspector]
		[SerializeField]
		private float _offset;

		[Token(Token = "0x400097D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		[HideInInspector]
		protected EdgeCollider2D edgeCollider;

		[Token(Token = "0x400097E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		[HideInInspector]
		protected Vector2[] vertices;

		[Token(Token = "0x400097F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[HideInInspector]
		public float updateRate;

		[Token(Token = "0x4000980")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		protected float lastUpdateTime;

		[Token(Token = "0x4000981")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private bool updateCollider;

		[Token(Token = "0x170000B6")]
		public float offset
		{
			[Token(Token = "0x6000A0B")]
			[Address(RVA = "0xFCA3F8", Offset = "0xFCA3F8", VA = "0xFCA3F8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000A0C")]
			[Address(RVA = "0xFCA400", Offset = "0xFCA400", VA = "0xFCA400")]
			set
			{
			}
		}

		[Token(Token = "0x6000A0D")]
		[Address(RVA = "0xFCA424", Offset = "0xFCA424", VA = "0xFCA424", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000A0E")]
		[Address(RVA = "0xFCA488", Offset = "0xFCA488", VA = "0xFCA488", Slot = "5")]
		protected override void Reset()
		{
		}

		[Token(Token = "0x6000A0F")]
		[Address(RVA = "0xFCA490", Offset = "0xFCA490", VA = "0xFCA490", Slot = "6")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6000A10")]
		[Address(RVA = "0xFCA498", Offset = "0xFCA498", VA = "0xFCA498", Slot = "7")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x6000A11")]
		[Address(RVA = "0xFCA4A0", Offset = "0xFCA4A0", VA = "0xFCA4A0", Slot = "8")]
		protected override void OnDestroy()
		{
		}

		[Token(Token = "0x6000A12")]
		[Address(RVA = "0xFCA4A8", Offset = "0xFCA4A8", VA = "0xFCA4A8", Slot = "19")]
		protected override void LateRun()
		{
		}

		[Token(Token = "0x6000A13")]
		[Address(RVA = "0xFCA56C", Offset = "0xFCA56C", VA = "0xFCA56C", Slot = "20")]
		protected override void Build()
		{
		}

		[Token(Token = "0x6000A14")]
		[Address(RVA = "0xFCA830", Offset = "0xFCA830", VA = "0xFCA830", Slot = "21")]
		protected override void PostBuild()
		{
		}

		[Token(Token = "0x6000A15")]
		[Address(RVA = "0xFCA964", Offset = "0xFCA964", VA = "0xFCA964")]
		public EdgeColliderGenerator()
		{
		}
	}
	[Token(Token = "0x20001FE")]
	[AddComponentMenu("Dreamteck/Splines/Extrude Mesh")]
	[RequireComponent(typeof(MeshRenderer))]
	[RequireComponent(typeof(MeshFilter))]
	public class ExtrudeMesh : MeshGenerator
	{
		[Token(Token = "0x20001FF")]
		public enum Axis
		{
			[Token(Token = "0x4000999")]
			X,
			[Token(Token = "0x400099A")]
			Y,
			[Token(Token = "0x400099B")]
			Z
		}

		[Token(Token = "0x2000200")]
		public enum Iteration
		{
			[Token(Token = "0x400099D")]
			Ordered,
			[Token(Token = "0x400099E")]
			Random
		}

		[Token(Token = "0x2000201")]
		public enum MirrorMethod
		{
			[Token(Token = "0x40009A0")]
			None,
			[Token(Token = "0x40009A1")]
			X,
			[Token(Token = "0x40009A2")]
			Y,
			[Token(Token = "0x40009A3")]
			Z
		}

		[Token(Token = "0x2000202")]
		public enum TileUVs
		{
			[Token(Token = "0x40009A5")]
			None,
			[Token(Token = "0x40009A6")]
			U,
			[Token(Token = "0x40009A7")]
			V,
			[Token(Token = "0x40009A8")]
			UniformU,
			[Token(Token = "0x40009A9")]
			UniformV
		}

		[Serializable]
		[Token(Token = "0x2000203")]
		internal class ExtrudableMesh
		{
			[Serializable]
			[Token(Token = "0x2000204")]
			public class VertexGroup
			{
				[Token(Token = "0x40009B4")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				public float value;

				[Token(Token = "0x40009B5")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				public int[] ids;

				[Token(Token = "0x6000A4B")]
				[Address(RVA = "0xFCFA24", Offset = "0xFCFA24", VA = "0xFCFA24")]
				public VertexGroup(float val, int[] vertIds)
				{
				}

				[Token(Token = "0x6000A4C")]
				[Address(RVA = "0xFCFA64", Offset = "0xFCFA64", VA = "0xFCFA64")]
				public void AddId(int id)
				{
				}
			}

			[Serializable]
			[Token(Token = "0x2000205")]
			public class Submesh
			{
				[Token(Token = "0x40009B6")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				public int[] triangles;

				[Token(Token = "0x6000A4D")]
				[Address(RVA = "0xFCFB10", Offset = "0xFCFB10", VA = "0xFCFB10")]
				public Submesh()
				{
				}

				[Token(Token = "0x6000A4E")]
				[Address(RVA = "0xFCEDF8", Offset = "0xFCEDF8", VA = "0xFCEDF8")]
				public Submesh(int[] input)
				{
				}
			}

			[Token(Token = "0x40009AA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3[] vertices;

			[Token(Token = "0x40009AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Vector3[] normals;

			[Token(Token = "0x40009AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector4[] tangents;

			[Token(Token = "0x40009AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Color[] colors;

			[Token(Token = "0x40009AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Vector2[] uv;

			[Token(Token = "0x40009AF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public List<Submesh> subMeshes;

			[Token(Token = "0x40009B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public TS_Bounds bounds;

			[Token(Token = "0x40009B1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public List<VertexGroup> vertexGroups;

			[Token(Token = "0x40009B2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[SerializeField]
			private MirrorMethod _mirror;

			[Token(Token = "0x40009B3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			[SerializeField]
			private Axis _axis;

			[Token(Token = "0x170000C0")]
			public MirrorMethod mirror
			{
				[Token(Token = "0x6000A42")]
				[Address(RVA = "0xFCE2F4", Offset = "0xFCE2F4", VA = "0xFCE2F4")]
				get
				{
					return default(MirrorMethod);
				}
				[Token(Token = "0x6000A43")]
				[Address(RVA = "0xFCB6E8", Offset = "0xFCB6E8", VA = "0xFCB6E8")]
				set
				{
				}
			}

			[Token(Token = "0x6000A44")]
			[Address(RVA = "0xFCE9CC", Offset = "0xFCE9CC", VA = "0xFCE9CC")]
			public ExtrudableMesh()
			{
			}

			[Token(Token = "0x6000A45")]
			[Address(RVA = "0xFCBAB0", Offset = "0xFCBAB0", VA = "0xFCBAB0")]
			public ExtrudableMesh(Mesh inputMesh, Axis axis)
			{
			}

			[Token(Token = "0x6000A46")]
			[Address(RVA = "0xFCDA7C", Offset = "0xFCDA7C", VA = "0xFCDA7C")]
			public void Update(Mesh inputMesh, Axis axis)
			{
			}

			[Token(Token = "0x6000A47")]
			[Address(RVA = "0xFCE2FC", Offset = "0xFCE2FC", VA = "0xFCE2FC")]
			private void Mirror(MirrorMethod method)
			{
			}

			[Token(Token = "0x6000A48")]
			[Address(RVA = "0xFCEEA4", Offset = "0xFCEEA4", VA = "0xFCEEA4")]
			private void GroupVertices(Axis axis)
			{
			}

			[Token(Token = "0x6000A49")]
			[Address(RVA = "0xFCF930", Offset = "0xFCF930", VA = "0xFCF930")]
			private int FindInsertIndex(Vector3 pos, float value)
			{
				return default(int);
			}

			[Token(Token = "0x6000A4A")]
			[Address(RVA = "0xFCF380", Offset = "0xFCF380", VA = "0xFCF380")]
			private void CalculateTangents()
			{
			}
		}

		[Token(Token = "0x4000982")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[SerializeField]
		[HideInInspector]
		private Mesh _startMesh;

		[Token(Token = "0x4000983")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[SerializeField]
		[HideInInspector]
		private Mesh _endMesh;

		[Token(Token = "0x4000984")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[SerializeField]
		[HideInInspector]
		private bool _dontStretchCaps;

		[Token(Token = "0x4000985")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		[SerializeField]
		[HideInInspector]
		private TileUVs _tileUVs;

		[Token(Token = "0x4000986")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[SerializeField]
		[HideInInspector]
		private Mesh[] _middleMeshes;

		[Token(Token = "0x4000987")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		[HideInInspector]
		[SerializeField]
		private List<ExtrudableMesh> extrudableMeshes;

		[Token(Token = "0x4000988")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		[SerializeField]
		[HideInInspector]
		private Axis _axis;

		[Token(Token = "0x4000989")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		[SerializeField]
		[HideInInspector]
		private Iteration _iteration;

		[Token(Token = "0x400098A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		[HideInInspector]
		[SerializeField]
		private int _randomSeed;

		[Token(Token = "0x400098B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
		[SerializeField]
		[HideInInspector]
		private int _repeat;

		[Token(Token = "0x400098C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		[SerializeField]
		[HideInInspector]
		private double _spacing;

		[Token(Token = "0x400098D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		[SerializeField]
		[HideInInspector]
		private Vector2 _scale;

		[Token(Token = "0x400098E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private SplineResult lastResult;

		[Token(Token = "0x400098F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private bool useLastResult;

		[Token(Token = "0x4000990")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private List<TS_Mesh> combineMeshes;

		[Token(Token = "0x4000991")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private System.Random random;

		[Token(Token = "0x4000992")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private int iterations;

		[Token(Token = "0x4000993")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
		private bool _hasAnyMesh;

		[Token(Token = "0x4000994")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18D")]
		private bool _hasStartMesh;

		[Token(Token = "0x4000995")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18E")]
		private bool _hasEndMesh;

		[Token(Token = "0x4000996")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		private Matrix4x4 vertexMatrix;

		[Token(Token = "0x4000997")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		private Matrix4x4 normalMatrix;

		[Token(Token = "0x170000B7")]
		public Axis axis
		{
			[Token(Token = "0x6000A16")]
			[Address(RVA = "0xFCA9D4", Offset = "0xFCA9D4", VA = "0xFCA9D4")]
			get
			{
				return default(Axis);
			}
			[Token(Token = "0x6000A17")]
			[Address(RVA = "0xFCA9DC", Offset = "0xFCA9DC", VA = "0xFCA9DC")]
			set
			{
			}
		}

		[Token(Token = "0x170000B8")]
		public Iteration iteration
		{
			[Token(Token = "0x6000A18")]
			[Address(RVA = "0xFCAD20", Offset = "0xFCAD20", VA = "0xFCAD20")]
			get
			{
				return default(Iteration);
			}
			[Token(Token = "0x6000A19")]
			[Address(RVA = "0xFCAD28", Offset = "0xFCAD28", VA = "0xFCAD28")]
			set
			{
			}
		}

		[Token(Token = "0x170000B9")]
		public int randomSeed
		{
			[Token(Token = "0x6000A1A")]
			[Address(RVA = "0xFCAD64", Offset = "0xFCAD64", VA = "0xFCAD64")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000A1B")]
			[Address(RVA = "0xFCAD6C", Offset = "0xFCAD6C", VA = "0xFCAD6C")]
			set
			{
			}
		}

		[Token(Token = "0x170000BA")]
		public int repeat
		{
			[Token(Token = "0x6000A1C")]
			[Address(RVA = "0xFCADB8", Offset = "0xFCADB8", VA = "0xFCADB8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000A1D")]
			[Address(RVA = "0xFCADC0", Offset = "0xFCADC0", VA = "0xFCADC0")]
			set
			{
			}
		}

		[Token(Token = "0x170000BB")]
		public bool dontStretchCaps
		{
			[Token(Token = "0x6000A1E")]
			[Address(RVA = "0xFCB0F8", Offset = "0xFCB0F8", VA = "0xFCB0F8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000A1F")]
			[Address(RVA = "0xFCB100", Offset = "0xFCB100", VA = "0xFCB100")]
			set
			{
			}
		}

		[Token(Token = "0x170000BC")]
		public TileUVs tileUVs
		{
			[Token(Token = "0x6000A20")]
			[Address(RVA = "0xFCB128", Offset = "0xFCB128", VA = "0xFCB128")]
			get
			{
				return default(TileUVs);
			}
			[Token(Token = "0x6000A21")]
			[Address(RVA = "0xFCB130", Offset = "0xFCB130", VA = "0xFCB130")]
			set
			{
			}
		}

		[Token(Token = "0x170000BD")]
		public double spacing
		{
			[Token(Token = "0x6000A22")]
			[Address(RVA = "0xFCB154", Offset = "0xFCB154", VA = "0xFCB154")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6000A23")]
			[Address(RVA = "0xFCB15C", Offset = "0xFCB15C", VA = "0xFCB15C")]
			set
			{
			}
		}

		[Token(Token = "0x170000BE")]
		public Vector2 scale
		{
			[Token(Token = "0x6000A24")]
			[Address(RVA = "0xFCB1CC", Offset = "0xFCB1CC", VA = "0xFCB1CC")]
			get
			{
				return default(Vector2);
			}
			[Token(Token = "0x6000A25")]
			[Address(RVA = "0xFCB1D8", Offset = "0xFCB1D8", VA = "0xFCB1D8")]
			set
			{
			}
		}

		[Token(Token = "0x170000BF")]
		public bool hasAnyMesh
		{
			[Token(Token = "0x6000A26")]
			[Address(RVA = "0xFCB220", Offset = "0xFCB220", VA = "0xFCB220")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000A27")]
		[Address(RVA = "0xFCB228", Offset = "0xFCB228", VA = "0xFCB228", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000A28")]
		[Address(RVA = "0xFCB4F4", Offset = "0xFCB4F4", VA = "0xFCB4F4")]
		public Mesh GetStartMesh()
		{
			return null;
		}

		[Token(Token = "0x6000A29")]
		[Address(RVA = "0xFCB4FC", Offset = "0xFCB4FC", VA = "0xFCB4FC")]
		public Mesh GetEndMesh()
		{
			return null;
		}

		[Token(Token = "0x6000A2A")]
		[Address(RVA = "0xFCB504", Offset = "0xFCB504", VA = "0xFCB504")]
		public MirrorMethod GetStartMeshMirror()
		{
			return default(MirrorMethod);
		}

		[Token(Token = "0x6000A2B")]
		[Address(RVA = "0xFCB598", Offset = "0xFCB598", VA = "0xFCB598")]
		public MirrorMethod GetEndMeshMirror()
		{
			return default(MirrorMethod);
		}

		[Token(Token = "0x6000A2C")]
		[Address(RVA = "0xFCB630", Offset = "0xFCB630", VA = "0xFCB630")]
		public void SetStartMeshMirror(MirrorMethod mirror)
		{
		}

		[Token(Token = "0x6000A2D")]
		[Address(RVA = "0xFCB730", Offset = "0xFCB730", VA = "0xFCB730")]
		public void SetEndMeshMirror(MirrorMethod mirror)
		{
		}

		[Token(Token = "0x6000A2E")]
		[Address(RVA = "0xFCB7EC", Offset = "0xFCB7EC", VA = "0xFCB7EC")]
		public void SetMeshMirror(int index, MirrorMethod mirror)
		{
		}

		[Token(Token = "0x6000A2F")]
		[Address(RVA = "0xFCB8BC", Offset = "0xFCB8BC", VA = "0xFCB8BC")]
		public void SetStartMesh(Mesh inputMesh, MirrorMethod mirror = MirrorMethod.None)
		{
		}

		[Token(Token = "0x6000A30")]
		[Address(RVA = "0xFCBD38", Offset = "0xFCBD38", VA = "0xFCBD38")]
		public void SetEndMesh(Mesh inputMesh, MirrorMethod mirror = MirrorMethod.None)
		{
		}

		[Token(Token = "0x6000A31")]
		[Address(RVA = "0xFCBF10", Offset = "0xFCBF10", VA = "0xFCBF10")]
		public Mesh GetMesh(int index)
		{
			return null;
		}

		[Token(Token = "0x6000A32")]
		[Address(RVA = "0xFCBF40", Offset = "0xFCBF40", VA = "0xFCBF40")]
		public MirrorMethod GetMeshMirror(int index)
		{
			return default(MirrorMethod);
		}

		[Token(Token = "0x6000A33")]
		[Address(RVA = "0xFCBFC0", Offset = "0xFCBFC0", VA = "0xFCBFC0")]
		public void SetMesh(int index, Mesh inputMesh, MirrorMethod mirror = MirrorMethod.None)
		{
		}

		[Token(Token = "0x6000A34")]
		[Address(RVA = "0xFCC100", Offset = "0xFCC100", VA = "0xFCC100")]
		public void RemoveMesh(int index)
		{
		}

		[Token(Token = "0x6000A35")]
		[Address(RVA = "0xFCC2B8", Offset = "0xFCC2B8", VA = "0xFCC2B8")]
		public void AddMesh(Mesh inputMesh)
		{
		}

		[Token(Token = "0x6000A36")]
		[Address(RVA = "0xFCB3D8", Offset = "0xFCB3D8", VA = "0xFCB3D8")]
		private void CheckMeshes()
		{
		}

		[Token(Token = "0x6000A37")]
		[Address(RVA = "0xFCC408", Offset = "0xFCC408", VA = "0xFCC408")]
		public int GetMeshCount()
		{
			return default(int);
		}

		[Token(Token = "0x6000A38")]
		[Address(RVA = "0xFCC424", Offset = "0xFCC424", VA = "0xFCC424", Slot = "29")]
		protected override void BuildMesh()
		{
		}

		[Token(Token = "0x6000A39")]
		[Address(RVA = "0xFCC494", Offset = "0xFCC494", VA = "0xFCC494")]
		private void Generate()
		{
		}

		[Token(Token = "0x6000A3A")]
		[Address(RVA = "0xFCC924", Offset = "0xFCC924", VA = "0xFCC924")]
		private int GetMeshIndex(int repeatIndex)
		{
			return default(int);
		}

		[Token(Token = "0x6000A3B")]
		[Address(RVA = "0xFCD178", Offset = "0xFCD178", VA = "0xFCD178")]
		private void TRS(ExtrudableMesh source, TS_Mesh target, double percent)
		{
		}

		[Token(Token = "0x6000A3C")]
		[Address(RVA = "0xFCD63C", Offset = "0xFCD63C", VA = "0xFCD63C")]
		private void CreateTSFromExtrudableMesh(ExtrudableMesh source, ref TS_Mesh target)
		{
		}

		[Token(Token = "0x6000A3D")]
		[Address(RVA = "0xFCCA00", Offset = "0xFCCA00", VA = "0xFCCA00")]
		private void Stretch(ExtrudableMesh source, TS_Mesh target, double from, double to)
		{
		}

		[Token(Token = "0x6000A3E")]
		[Address(RVA = "0xFCAA18", Offset = "0xFCAA18", VA = "0xFCAA18")]
		private void UpdateExtrudableMeshes()
		{
		}

		[Token(Token = "0x6000A3F")]
		[Address(RVA = "0xFCDDB0", Offset = "0xFCDDB0", VA = "0xFCDDB0")]
		private void UpdateStartExtrudeMesh()
		{
		}

		[Token(Token = "0x6000A40")]
		[Address(RVA = "0xFCAE04", Offset = "0xFCAE04", VA = "0xFCAE04")]
		private void UpdateEndExtrudeMesh()
		{
		}

		[Token(Token = "0x6000A41")]
		[Address(RVA = "0xFCE004", Offset = "0xFCE004", VA = "0xFCE004")]
		public ExtrudeMesh()
		{
		}
	}
	[Token(Token = "0x2000206")]
	[AddComponentMenu("Dreamteck/Splines/Length Calculator")]
	public class LengthCalculator : SplineUser
	{
		[Serializable]
		[Token(Token = "0x2000207")]
		public class LengthEvent
		{
			[Token(Token = "0x2000208")]
			public enum Type
			{
				[Token(Token = "0x40009C0")]
				Growing,
				[Token(Token = "0x40009C1")]
				Shrinking,
				[Token(Token = "0x40009C2")]
				Both
			}

			[Token(Token = "0x40009BB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool enabled;

			[Token(Token = "0x40009BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float targetLength;

			[Token(Token = "0x40009BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public SplineAction action;

			[Token(Token = "0x40009BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Type type;

			[Token(Token = "0x6000A5C")]
			[Address(RVA = "0xFD0598", Offset = "0xFD0598", VA = "0xFD0598")]
			public LengthEvent()
			{
			}

			[Token(Token = "0x6000A5D")]
			[Address(RVA = "0xFD061C", Offset = "0xFD061C", VA = "0xFD061C")]
			public LengthEvent(Type t)
			{
			}

			[Token(Token = "0x6000A5E")]
			[Address(RVA = "0xFCFED0", Offset = "0xFCFED0", VA = "0xFCFED0")]
			public LengthEvent(Type t, SplineAction a)
			{
			}

			[Token(Token = "0x6000A5F")]
			[Address(RVA = "0xFCFCAC", Offset = "0xFCFCAC", VA = "0xFCFCAC")]
			public void Check(float fromLength, float toLength)
			{
			}
		}

		[Token(Token = "0x40009B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[HideInInspector]
		public LengthEvent[] lengthEvents;

		[Token(Token = "0x40009B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[HideInInspector]
		public float idealLength;

		[Token(Token = "0x40009B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private float _length;

		[Token(Token = "0x40009BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private float lastLength;

		[Token(Token = "0x170000C1")]
		public float length
		{
			[Token(Token = "0x6000A4F")]
			[Address(RVA = "0xFCFB74", Offset = "0xFCFB74", VA = "0xFCFB74")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000A50")]
		[Address(RVA = "0xFCFB7C", Offset = "0xFCFB7C", VA = "0xFCFB7C", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000A51")]
		[Address(RVA = "0xFCFC14", Offset = "0xFCFC14", VA = "0xFCFC14", Slot = "20")]
		protected override void Build()
		{
		}

		[Token(Token = "0x6000A52")]
		[Address(RVA = "0xFCFD30", Offset = "0xFCFD30", VA = "0xFCFD30")]
		private void AddEvent(LengthEvent lengthEvent)
		{
		}

		[Token(Token = "0x6000A53")]
		[Address(RVA = "0xFCFE08", Offset = "0xFCFE08", VA = "0xFCFE08")]
		public void AddEvent(LengthEvent.Type t, UnityAction call, float targetLength = 0f, LengthEvent.Type type = LengthEvent.Type.Both)
		{
		}

		[Token(Token = "0x6000A54")]
		[Address(RVA = "0xFCFF7C", Offset = "0xFCFF7C", VA = "0xFCFF7C")]
		public void AddEvent(LengthEvent.Type t, UnityAction<int> call, int value, float targetLength = 0f, LengthEvent.Type type = LengthEvent.Type.Both)
		{
		}

		[Token(Token = "0x6000A55")]
		[Address(RVA = "0xFD004C", Offset = "0xFD004C", VA = "0xFD004C")]
		public void AddEvent(LengthEvent.Type t, UnityAction<float> call, float value, float targetLength = 0f, LengthEvent.Type type = LengthEvent.Type.Both)
		{
		}

		[Token(Token = "0x6000A56")]
		[Address(RVA = "0xFD011C", Offset = "0xFD011C", VA = "0xFD011C")]
		public void AddEvent(LengthEvent.Type t, UnityAction<double> call, double value, float targetLength = 0f, LengthEvent.Type type = LengthEvent.Type.Both)
		{
		}

		[Token(Token = "0x6000A57")]
		[Address(RVA = "0xFD01EC", Offset = "0xFD01EC", VA = "0xFD01EC")]
		public void AddTrigger(LengthEvent.Type t, UnityAction<string> call, string value, float targetLength = 0f, LengthEvent.Type type = LengthEvent.Type.Both)
		{
		}

		[Token(Token = "0x6000A58")]
		[Address(RVA = "0xFD02BC", Offset = "0xFD02BC", VA = "0xFD02BC")]
		public void AddEvent(LengthEvent.Type t, UnityAction<bool> call, bool value, float targetLength = 0f, LengthEvent.Type type = LengthEvent.Type.Both)
		{
		}

		[Token(Token = "0x6000A59")]
		[Address(RVA = "0xFD038C", Offset = "0xFD038C", VA = "0xFD038C")]
		public void AddEvent(LengthEvent.Type t, UnityAction<GameObject> call, GameObject value, float targetLength = 0f, LengthEvent.Type type = LengthEvent.Type.Both)
		{
		}

		[Token(Token = "0x6000A5A")]
		[Address(RVA = "0xFD045C", Offset = "0xFD045C", VA = "0xFD045C")]
		public void AddEvent(LengthEvent.Type t, UnityAction<Transform> call, Transform value, float targetLength = 0f, LengthEvent.Type type = LengthEvent.Type.Both)
		{
		}

		[Token(Token = "0x6000A5B")]
		[Address(RVA = "0xFD052C", Offset = "0xFD052C", VA = "0xFD052C")]
		public LengthCalculator()
		{
		}
	}
	[Token(Token = "0x2000209")]
	public class MeshGenerator : SplineUser
	{
		[Token(Token = "0x200020A")]
		public enum UVMode
		{
			[Token(Token = "0x40009DB")]
			Clip,
			[Token(Token = "0x40009DC")]
			UniformClip,
			[Token(Token = "0x40009DD")]
			Clamp,
			[Token(Token = "0x40009DE")]
			UniformClamp
		}

		[Token(Token = "0x40009C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[HideInInspector]
		[SerializeField]
		private bool _baked;

		[Token(Token = "0x40009C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[HideInInspector]
		[SerializeField]
		private float _size;

		[Token(Token = "0x40009C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		[HideInInspector]
		private Color _color;

		[Token(Token = "0x40009C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		[HideInInspector]
		private Vector3 _offset;

		[Token(Token = "0x40009C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[SerializeField]
		[HideInInspector]
		private int _normalMethod;

		[Token(Token = "0x40009C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		[HideInInspector]
		private bool _tangents;

		[Token(Token = "0x40009C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[SerializeField]
		[HideInInspector]
		private float _rotation;

		[Token(Token = "0x40009CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		[HideInInspector]
		private bool _flipFaces;

		[Token(Token = "0x40009CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC9")]
		[HideInInspector]
		[SerializeField]
		private bool _doubleSided;

		[Token(Token = "0x40009CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[HideInInspector]
		[SerializeField]
		private UVMode _uvMode;

		[Token(Token = "0x40009CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[HideInInspector]
		[SerializeField]
		private Vector2 _uvScale;

		[Token(Token = "0x40009CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[HideInInspector]
		[SerializeField]
		private Vector2 _uvOffset;

		[Token(Token = "0x40009CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[HideInInspector]
		[SerializeField]
		private float _uvRotation;

		[Token(Token = "0x40009D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[HideInInspector]
		[SerializeField]
		protected MeshCollider meshCollider;

		[Token(Token = "0x40009D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[HideInInspector]
		[SerializeField]
		protected MeshFilter filter;

		[Token(Token = "0x40009D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[SerializeField]
		[HideInInspector]
		protected MeshRenderer meshRenderer;

		[Token(Token = "0x40009D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[SerializeField]
		[HideInInspector]
		protected TS_Mesh tsMesh;

		[Token(Token = "0x40009D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[SerializeField]
		[HideInInspector]
		protected Mesh mesh;

		[Token(Token = "0x40009D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[HideInInspector]
		public float colliderUpdateRate;

		[Token(Token = "0x40009D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		protected bool updateCollider;

		[Token(Token = "0x40009D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		protected float lastUpdateTime;

		[Token(Token = "0x40009D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		private float vDist;

		[Token(Token = "0x40009D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected static Vector2 uvs;

		[Token(Token = "0x170000C2")]
		public float size
		{
			[Token(Token = "0x6000A60")]
			[Address(RVA = "0xFD06B4", Offset = "0xFD06B4", VA = "0xFD06B4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000A61")]
			[Address(RVA = "0xFD06BC", Offset = "0xFD06BC", VA = "0xFD06BC")]
			set
			{
			}
		}

		[Token(Token = "0x170000C3")]
		public Color color
		{
			[Token(Token = "0x6000A62")]
			[Address(RVA = "0xFD06E0", Offset = "0xFD06E0", VA = "0xFD06E0")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6000A63")]
			[Address(RVA = "0xFD06EC", Offset = "0xFD06EC", VA = "0xFD06EC")]
			set
			{
			}
		}

		[Token(Token = "0x170000C4")]
		public Vector3 offset
		{
			[Token(Token = "0x6000A64")]
			[Address(RVA = "0xFD074C", Offset = "0xFD074C", VA = "0xFD074C")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000A65")]
			[Address(RVA = "0xFD0758", Offset = "0xFD0758", VA = "0xFD0758")]
			set
			{
			}
		}

		[Token(Token = "0x170000C5")]
		public int normalMethod
		{
			[Token(Token = "0x6000A66")]
			[Address(RVA = "0xFD07AC", Offset = "0xFD07AC", VA = "0xFD07AC")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000A67")]
			[Address(RVA = "0xFD07B4", Offset = "0xFD07B4", VA = "0xFD07B4")]
			set
			{
			}
		}

		[Token(Token = "0x170000C6")]
		public bool calculateTangents
		{
			[Token(Token = "0x6000A68")]
			[Address(RVA = "0xFD07D8", Offset = "0xFD07D8", VA = "0xFD07D8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000A69")]
			[Address(RVA = "0xFD07E0", Offset = "0xFD07E0", VA = "0xFD07E0")]
			set
			{
			}
		}

		[Token(Token = "0x170000C7")]
		public float rotation
		{
			[Token(Token = "0x6000A6A")]
			[Address(RVA = "0xFD0808", Offset = "0xFD0808", VA = "0xFD0808")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000A6B")]
			[Address(RVA = "0xFD0810", Offset = "0xFD0810", VA = "0xFD0810")]
			set
			{
			}
		}

		[Token(Token = "0x170000C8")]
		public bool flipFaces
		{
			[Token(Token = "0x6000A6C")]
			[Address(RVA = "0xFD0834", Offset = "0xFD0834", VA = "0xFD0834")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000A6D")]
			[Address(RVA = "0xFD083C", Offset = "0xFD083C", VA = "0xFD083C")]
			set
			{
			}
		}

		[Token(Token = "0x170000C9")]
		public bool doubleSided
		{
			[Token(Token = "0x6000A6E")]
			[Address(RVA = "0xFD0864", Offset = "0xFD0864", VA = "0xFD0864")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000A6F")]
			[Address(RVA = "0xFD086C", Offset = "0xFD086C", VA = "0xFD086C")]
			set
			{
			}
		}

		[Token(Token = "0x170000CA")]
		public UVMode uvMode
		{
			[Token(Token = "0x6000A70")]
			[Address(RVA = "0xFD0894", Offset = "0xFD0894", VA = "0xFD0894")]
			get
			{
				return default(UVMode);
			}
			[Token(Token = "0x6000A71")]
			[Address(RVA = "0xFD089C", Offset = "0xFD089C", VA = "0xFD089C")]
			set
			{
			}
		}

		[Token(Token = "0x170000CB")]
		public Vector2 uvScale
		{
			[Token(Token = "0x6000A72")]
			[Address(RVA = "0xFD08C0", Offset = "0xFD08C0", VA = "0xFD08C0")]
			get
			{
				return default(Vector2);
			}
			[Token(Token = "0x6000A73")]
			[Address(RVA = "0xFD08C8", Offset = "0xFD08C8", VA = "0xFD08C8")]
			set
			{
			}
		}

		[Token(Token = "0x170000CC")]
		public Vector2 uvOffset
		{
			[Token(Token = "0x6000A74")]
			[Address(RVA = "0xFD0908", Offset = "0xFD0908", VA = "0xFD0908")]
			get
			{
				return default(Vector2);
			}
			[Token(Token = "0x6000A75")]
			[Address(RVA = "0xFD0910", Offset = "0xFD0910", VA = "0xFD0910")]
			set
			{
			}
		}

		[Token(Token = "0x170000CD")]
		public float uvRotation
		{
			[Token(Token = "0x6000A76")]
			[Address(RVA = "0xFD0950", Offset = "0xFD0950", VA = "0xFD0950")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000A77")]
			[Address(RVA = "0xFD0958", Offset = "0xFD0958", VA = "0xFD0958")]
			set
			{
			}
		}

		[Token(Token = "0x170000CE")]
		public bool baked
		{
			[Token(Token = "0x6000A78")]
			[Address(RVA = "0xFD097C", Offset = "0xFD097C", VA = "0xFD097C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000A79")]
		[Address(RVA = "0xFCB28C", Offset = "0xFCB28C", VA = "0xFCB28C", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000A7A")]
		[Address(RVA = "0xFD0984", Offset = "0xFD0984", VA = "0xFD0984", Slot = "5")]
		protected override void Reset()
		{
		}

		[Token(Token = "0x6000A7B")]
		[Address(RVA = "0xFD0AA8", Offset = "0xFD0AA8", VA = "0xFD0AA8")]
		public void CloneMesh()
		{
		}

		[Token(Token = "0x6000A7C")]
		[Address(RVA = "0xFD0BF4", Offset = "0xFD0BF4", VA = "0xFD0BF4", Slot = "11")]
		public override void Rebuild(bool sampleComputer)
		{
		}

		[Token(Token = "0x6000A7D")]
		[Address(RVA = "0xFD0C0C", Offset = "0xFD0C0C", VA = "0xFD0C0C", Slot = "12")]
		public override void RebuildImmediate(bool sampleComputer)
		{
		}

		[Token(Token = "0x6000A7E")]
		[Address(RVA = "0xFD0C24", Offset = "0xFD0C24", VA = "0xFD0C24", Slot = "6")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6000A7F")]
		[Address(RVA = "0xFD0C2C", Offset = "0xFD0C2C", VA = "0xFD0C2C", Slot = "7")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x6000A80")]
		[Address(RVA = "0xFD0C34", Offset = "0xFD0C34", VA = "0xFD0C34", Slot = "8")]
		protected override void OnDestroy()
		{
		}

		[Token(Token = "0x6000A81")]
		[Address(RVA = "0xFD0D54", Offset = "0xFD0D54", VA = "0xFD0D54")]
		public void UpdateCollider()
		{
		}

		[Token(Token = "0x6000A82")]
		[Address(RVA = "0xFD0E5C", Offset = "0xFD0E5C", VA = "0xFD0E5C", Slot = "19")]
		protected override void LateRun()
		{
		}

		[Token(Token = "0x6000A83")]
		[Address(RVA = "0xFD0F40", Offset = "0xFD0F40", VA = "0xFD0F40", Slot = "20")]
		protected override void Build()
		{
		}

		[Token(Token = "0x6000A84")]
		[Address(RVA = "0xFD0F8C", Offset = "0xFD0F8C", VA = "0xFD0F8C", Slot = "21")]
		protected override void PostBuild()
		{
		}

		[Token(Token = "0x6000A85")]
		[Address(RVA = "0xFCC490", Offset = "0xFCC490", VA = "0xFCC490", Slot = "29")]
		protected virtual void BuildMesh()
		{
		}

		[Token(Token = "0x6000A86")]
		[Address(RVA = "0xFD0FB4", Offset = "0xFD0FB4", VA = "0xFD0FB4", Slot = "30")]
		protected virtual void WriteMesh()
		{
		}

		[Token(Token = "0x6000A87")]
		[Address(RVA = "0xFD113C", Offset = "0xFD113C", VA = "0xFD113C", Slot = "31")]
		protected virtual void AllocateMesh(int vertexCount, int trisCount)
		{
		}

		[Token(Token = "0x6000A88")]
		[Address(RVA = "0xFD12CC", Offset = "0xFD12CC", VA = "0xFD12CC")]
		protected void ResetUVDistance()
		{
		}

		[Token(Token = "0x6000A89")]
		[Address(RVA = "0xFD1330", Offset = "0xFD1330", VA = "0xFD1330")]
		protected void AddUVDistance(int sampleIndex)
		{
		}

		[Token(Token = "0x6000A8A")]
		[Address(RVA = "0xFD1440", Offset = "0xFD1440", VA = "0xFD1440")]
		protected void CalculateUVs(double percent, float u)
		{
		}

		[Token(Token = "0x6000A8B")]
		[Address(RVA = "0xFCE1B4", Offset = "0xFCE1B4", VA = "0xFCE1B4")]
		public MeshGenerator()
		{
		}
	}
	[Token(Token = "0x200020B")]
	public class Node : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200020C")]
		public class Connection
		{
			[Token(Token = "0x40009E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool invertTangents;

			[Token(Token = "0x40009E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[SerializeField]
			private int _pointIndex;

			[Token(Token = "0x40009E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[SerializeField]
			private SplineComputer _computer;

			[Token(Token = "0x40009E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[SerializeField]
			[HideInInspector]
			internal SplinePoint point;

			[Token(Token = "0x170000D2")]
			public SplineComputer computer
			{
				[Token(Token = "0x6000AA7")]
				[Address(RVA = "0xFD3130", Offset = "0xFD3130", VA = "0xFD3130")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000D3")]
			public int pointIndex
			{
				[Token(Token = "0x6000AA8")]
				[Address(RVA = "0xFD3138", Offset = "0xFD3138", VA = "0xFD3138")]
				get
				{
					return default(int);
				}
			}

			[Token(Token = "0x170000D4")]
			internal bool isValid
			{
				[Token(Token = "0x6000AA9")]
				[Address(RVA = "0xFD265C", Offset = "0xFD265C", VA = "0xFD265C")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6000AAA")]
			[Address(RVA = "0xFD2DA8", Offset = "0xFD2DA8", VA = "0xFD2DA8")]
			internal Connection(SplineComputer comp, int index, SplinePoint inputPoint)
			{
			}
		}

		[Token(Token = "0x200020D")]
		public enum Type
		{
			[Token(Token = "0x40009EA")]
			Smooth,
			[Token(Token = "0x40009EB")]
			Free
		}

		[Token(Token = "0x40009DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Type type;

		[Token(Token = "0x40009E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		protected Connection[] connections;

		[Token(Token = "0x40009E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private bool _transformSize;

		[Token(Token = "0x40009E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		[SerializeField]
		private bool _transformNormals;

		[Token(Token = "0x40009E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		[SerializeField]
		private bool _transformTangents;

		[Token(Token = "0x40009E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private TS_Transform tsTransform;

		[Token(Token = "0x170000CF")]
		public bool transformNormals
		{
			[Token(Token = "0x6000A8D")]
			[Address(RVA = "0xFD161C", Offset = "0xFD161C", VA = "0xFD161C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000A8E")]
			[Address(RVA = "0xFD1624", Offset = "0xFD1624", VA = "0xFD1624")]
			set
			{
			}
		}

		[Token(Token = "0x170000D0")]
		public bool transformSize
		{
			[Token(Token = "0x6000A8F")]
			[Address(RVA = "0xFD176C", Offset = "0xFD176C", VA = "0xFD176C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000A90")]
			[Address(RVA = "0xFD1774", Offset = "0xFD1774", VA = "0xFD1774")]
			set
			{
			}
		}

		[Token(Token = "0x170000D1")]
		public bool transformTangents
		{
			[Token(Token = "0x6000A91")]
			[Address(RVA = "0xFD1790", Offset = "0xFD1790", VA = "0xFD1790")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000A92")]
			[Address(RVA = "0xFD1798", Offset = "0xFD1798", VA = "0xFD1798")]
			set
			{
			}
		}

		[Token(Token = "0x6000A93")]
		[Address(RVA = "0xFD17B4", Offset = "0xFD17B4", VA = "0xFD17B4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000A94")]
		[Address(RVA = "0xFD1830", Offset = "0xFD1830", VA = "0xFD1830")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000A95")]
		[Address(RVA = "0xFD1874", Offset = "0xFD1874", VA = "0xFD1874")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A96")]
		[Address(RVA = "0xFD1834", Offset = "0xFD1834", VA = "0xFD1834")]
		private void Run()
		{
		}

		[Token(Token = "0x6000A97")]
		[Address(RVA = "0xFD1BFC", Offset = "0xFD1BFC", VA = "0xFD1BFC")]
		public SplinePoint GetPoint(int connectionIndex, bool swapTangents)
		{
			return default(SplinePoint);
		}

		[Token(Token = "0x6000A98")]
		[Address(RVA = "0xFD1E54", Offset = "0xFD1E54", VA = "0xFD1E54")]
		public void SetPoint(int connectionIndex, SplinePoint worldPoint, bool swappedTangents)
		{
		}

		[Token(Token = "0x6000A99")]
		[Address(RVA = "0xFD2544", Offset = "0xFD2544", VA = "0xFD2544")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000A9A")]
		[Address(RVA = "0xFD2548", Offset = "0xFD2548", VA = "0xFD2548")]
		public void ClearConnections()
		{
		}

		[Token(Token = "0x6000A9B")]
		[Address(RVA = "0xFD1878", Offset = "0xFD1878", VA = "0xFD1878")]
		public void UpdateConnectedComputers([Optional] SplineComputer excludeComputer)
		{
		}

		[Token(Token = "0x6000A9C")]
		[Address(RVA = "0xFD28EC", Offset = "0xFD28EC", VA = "0xFD28EC")]
		public void UpdatePoint(SplineComputer computer, int pointIndex, SplinePoint point, bool updatePosition = true)
		{
		}

		[Token(Token = "0x6000A9D")]
		[Address(RVA = "0xFD1640", Offset = "0xFD1640", VA = "0xFD1640")]
		private void UpdatePoints()
		{
		}

		[Token(Token = "0x6000A9E")]
		[Address(RVA = "0xFD2A2C", Offset = "0xFD2A2C", VA = "0xFD2A2C")]
		protected void RemoveInvalidConnections()
		{
		}

		[Token(Token = "0x6000A9F")]
		[Address(RVA = "0xFD2AA8", Offset = "0xFD2AA8", VA = "0xFD2AA8", Slot = "4")]
		public virtual void AddConnection(SplineComputer computer, int pointIndex)
		{
		}

		[Token(Token = "0x6000AA0")]
		[Address(RVA = "0xFD23D8", Offset = "0xFD23D8", VA = "0xFD23D8")]
		protected SplinePoint PointToLocal(SplinePoint worldPoint)
		{
			return default(SplinePoint);
		}

		[Token(Token = "0x6000AA1")]
		[Address(RVA = "0xFD1D14", Offset = "0xFD1D14", VA = "0xFD1D14")]
		protected SplinePoint PointToWorld(SplinePoint localPoint)
		{
			return default(SplinePoint);
		}

		[Token(Token = "0x6000AA2")]
		[Address(RVA = "0xFD2E00", Offset = "0xFD2E00", VA = "0xFD2E00", Slot = "5")]
		public virtual void RemoveConnection(SplineComputer computer, int pointIndex)
		{
		}

		[Token(Token = "0x6000AA3")]
		[Address(RVA = "0xFD26EC", Offset = "0xFD26EC", VA = "0xFD26EC")]
		private void RemoveConnection(int index)
		{
		}

		[Token(Token = "0x6000AA4")]
		[Address(RVA = "0xFD2F80", Offset = "0xFD2F80", VA = "0xFD2F80", Slot = "6")]
		public virtual bool HasConnection(SplineComputer computer, int pointIndex)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AA5")]
		[Address(RVA = "0xFD30B4", Offset = "0xFD30B4", VA = "0xFD30B4")]
		public Connection[] GetConnections()
		{
			return null;
		}

		[Token(Token = "0x6000AA6")]
		[Address(RVA = "0xFD30BC", Offset = "0xFD30BC", VA = "0xFD30BC")]
		public Node()
		{
		}
	}
	[Token(Token = "0x200020E")]
	[AddComponentMenu("Dreamteck/Splines/Object Bender")]
	public class ObjectBender : SplineUser
	{
		[Token(Token = "0x200020F")]
		public enum Axis
		{
			[Token(Token = "0x40009F4")]
			X,
			[Token(Token = "0x40009F5")]
			Y,
			[Token(Token = "0x40009F6")]
			Z
		}

		[Serializable]
		[Token(Token = "0x2000210")]
		public class BendProperty
		{
			[Token(Token = "0x40009F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool enabled;

			[Token(Token = "0x40009F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public TS_Transform transform;

			[Token(Token = "0x40009F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public bool applyRotation;

			[Token(Token = "0x40009FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
			public bool applyScale;

			[Token(Token = "0x40009FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
			public bool generateLightmapUVs;

			[Token(Token = "0x40009FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x23")]
			[HideInInspector]
			[SerializeField]
			private bool _bendMesh;

			[Token(Token = "0x40009FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[SerializeField]
			[HideInInspector]
			private bool _bendSpline;

			[Token(Token = "0x40009FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
			[SerializeField]
			[HideInInspector]
			private bool _bendCollider;

			[Token(Token = "0x40009FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float colliderUpdateDue;

			[Token(Token = "0x4000A00")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float colliderUpdateRate;

			[Token(Token = "0x4000A01")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private bool updateCollider;

			[Token(Token = "0x4000A02")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public Vector3 originalPosition;

			[Token(Token = "0x4000A03")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public Vector3 originalScale;

			[Token(Token = "0x4000A04")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			public Quaternion originalRotation;

			[Token(Token = "0x4000A05")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public Vector3 positionPercent;

			[Token(Token = "0x4000A06")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public Vector3[] vertexPercents;

			[Token(Token = "0x4000A07")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			public Vector3[] normals;

			[Token(Token = "0x4000A08")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			public Vector3[] colliderVertexPercents;

			[Token(Token = "0x4000A09")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			public Vector3[] colliderNormals;

			[Token(Token = "0x4000A0A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			[SerializeField]
			[HideInInspector]
			private Mesh originalMesh;

			[Token(Token = "0x4000A0B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			[SerializeField]
			[HideInInspector]
			private Mesh originalColliderMesh;

			[Token(Token = "0x4000A0C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			private Spline _originalSpline;

			[Token(Token = "0x4000A0D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			[HideInInspector]
			[SerializeField]
			private Mesh destinationMesh;

			[Token(Token = "0x4000A0E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			[HideInInspector]
			[SerializeField]
			private Mesh destinationColliderMesh;

			[Token(Token = "0x4000A0F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			public Spline destinationSpline;

			[Token(Token = "0x4000A10")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
			public TS_Mesh _editMesh;

			[Token(Token = "0x4000A11")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			public TS_Mesh _editColliderMesh;

			[Token(Token = "0x4000A12")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
			public MeshFilter filter;

			[Token(Token = "0x4000A13")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
			public MeshCollider collider;

			[Token(Token = "0x4000A14")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
			public SplineComputer splineComputer;

			[Token(Token = "0x4000A15")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
			public Vector3[] splinePointPercents;

			[Token(Token = "0x4000A16")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
			public Vector3[] primaryTangentPercents;

			[Token(Token = "0x4000A17")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
			public Vector3[] secondaryTangentPercents;

			[Token(Token = "0x4000A18")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
			[HideInInspector]
			[SerializeField]
			private bool parent;

			[Token(Token = "0x170000D9")]
			public bool isValid
			{
				[Token(Token = "0x6000AC4")]
				[Address(RVA = "0xFD70C4", Offset = "0xFD70C4", VA = "0xFD70C4")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x170000DA")]
			public bool bendMesh
			{
				[Token(Token = "0x6000AC5")]
				[Address(RVA = "0xFD713C", Offset = "0xFD713C", VA = "0xFD713C")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6000AC6")]
				[Address(RVA = "0xFD469C", Offset = "0xFD469C", VA = "0xFD469C")]
				set
				{
				}
			}

			[Token(Token = "0x170000DB")]
			public bool bendCollider
			{
				[Token(Token = "0x6000AC7")]
				[Address(RVA = "0xFD71D0", Offset = "0xFD71D0", VA = "0xFD71D0")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6000AC8")]
				[Address(RVA = "0xFD481C", Offset = "0xFD481C", VA = "0xFD481C")]
				set
				{
				}
			}

			[Token(Token = "0x170000DC")]
			public bool bendSpline
			{
				[Token(Token = "0x6000AC9")]
				[Address(RVA = "0xFD7264", Offset = "0xFD7264", VA = "0xFD7264")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6000ACA")]
				[Address(RVA = "0xFD726C", Offset = "0xFD726C", VA = "0xFD726C")]
				set
				{
				}
			}

			[Token(Token = "0x170000DD")]
			public TS_Mesh editMesh
			{
				[Token(Token = "0x6000ACB")]
				[Address(RVA = "0xFD55CC", Offset = "0xFD55CC", VA = "0xFD55CC")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000DE")]
			public TS_Mesh editColliderMesh
			{
				[Token(Token = "0x6000ACC")]
				[Address(RVA = "0xFD56D8", Offset = "0xFD56D8", VA = "0xFD56D8")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000DF")]
			public Spline originalSpline
			{
				[Token(Token = "0x6000ACD")]
				[Address(RVA = "0xFD580C", Offset = "0xFD580C", VA = "0xFD580C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000ACE")]
			[Address(RVA = "0xFD3EC8", Offset = "0xFD3EC8", VA = "0xFD3EC8")]
			public BendProperty(Transform t, bool isParent = false)
			{
			}

			[Token(Token = "0x6000ACF")]
			[Address(RVA = "0xFD5B88", Offset = "0xFD5B88", VA = "0xFD5B88")]
			public void Revert()
			{
			}

			[Token(Token = "0x6000AD0")]
			[Address(RVA = "0xFD7144", Offset = "0xFD7144", VA = "0xFD7144")]
			private void RevertMesh()
			{
			}

			[Token(Token = "0x6000AD1")]
			[Address(RVA = "0xFD7278", Offset = "0xFD7278", VA = "0xFD7278")]
			private void RevertTransform()
			{
			}

			[Token(Token = "0x6000AD2")]
			[Address(RVA = "0xFD71D8", Offset = "0xFD71D8", VA = "0xFD71D8")]
			private void RevertCollider()
			{
			}

			[Token(Token = "0x6000AD3")]
			[Address(RVA = "0xFD5CB4", Offset = "0xFD5CB4", VA = "0xFD5CB4")]
			public void Apply(bool applyTransform)
			{
			}

			[Token(Token = "0x6000AD4")]
			[Address(RVA = "0xFD5E10", Offset = "0xFD5E10", VA = "0xFD5E10")]
			public void Update()
			{
			}

			[Token(Token = "0x6000AD5")]
			[Address(RVA = "0xFD72DC", Offset = "0xFD72DC", VA = "0xFD72DC")]
			private void ApplyMesh()
			{
			}

			[Token(Token = "0x6000AD6")]
			[Address(RVA = "0xFD74B8", Offset = "0xFD74B8", VA = "0xFD74B8")]
			private void ApplyCollider()
			{
			}

			[Token(Token = "0x6000AD7")]
			[Address(RVA = "0xFD7484", Offset = "0xFD7484", VA = "0xFD7484")]
			private void ApplySpline()
			{
			}
		}

		[Token(Token = "0x40009EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[HideInInspector]
		[SerializeField]
		private bool _bend;

		[Token(Token = "0x40009ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[HideInInspector]
		public BendProperty[] bendProperties;

		[Token(Token = "0x40009EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[HideInInspector]
		[SerializeField]
		private TS_Bounds bounds;

		[Token(Token = "0x40009EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[HideInInspector]
		[SerializeField]
		private Axis _axis;

		[Token(Token = "0x40009F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[HideInInspector]
		[SerializeField]
		private bool _autoNormals;

		[Token(Token = "0x40009F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[HideInInspector]
		[SerializeField]
		private Vector3 _upVector;

		[Token(Token = "0x40009F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private SplineResult bendResult;

		[Token(Token = "0x170000D5")]
		public bool bend
		{
			[Token(Token = "0x6000AAB")]
			[Address(RVA = "0xFD3140", Offset = "0xFD3140", VA = "0xFD3140")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000AAC")]
			[Address(RVA = "0xFD3148", Offset = "0xFD3148", VA = "0xFD3148")]
			set
			{
			}
		}

		[Token(Token = "0x170000D6")]
		public Axis axis
		{
			[Token(Token = "0x6000AAD")]
			[Address(RVA = "0xFD338C", Offset = "0xFD338C", VA = "0xFD338C")]
			get
			{
				return default(Axis);
			}
			[Token(Token = "0x6000AAE")]
			[Address(RVA = "0xFD3394", Offset = "0xFD3394", VA = "0xFD3394")]
			set
			{
			}
		}

		[Token(Token = "0x170000D7")]
		public bool autoNormals
		{
			[Token(Token = "0x6000AAF")]
			[Address(RVA = "0xFD3454", Offset = "0xFD3454", VA = "0xFD3454")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000AB0")]
			[Address(RVA = "0xFD345C", Offset = "0xFD345C", VA = "0xFD345C")]
			set
			{
			}
		}

		[Token(Token = "0x170000D8")]
		public Vector3 upVector
		{
			[Token(Token = "0x6000AB1")]
			[Address(RVA = "0xFD351C", Offset = "0xFD351C", VA = "0xFD351C")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000AB2")]
			[Address(RVA = "0xFD3528", Offset = "0xFD3528", VA = "0xFD3528")]
			set
			{
			}
		}

		[Token(Token = "0x6000AB3")]
		[Address(RVA = "0xFD3628", Offset = "0xFD3628", VA = "0xFD3628")]
		private void GetTransformsRecursively(Transform current, ref List<Transform> transformList)
		{
		}

		[Token(Token = "0x6000AB4")]
		[Address(RVA = "0xFD398C", Offset = "0xFD398C", VA = "0xFD398C")]
		private void GetObjects()
		{
		}

		[Token(Token = "0x6000AB5")]
		[Address(RVA = "0xFD3E00", Offset = "0xFD3E00", VA = "0xFD3E00")]
		public TS_Bounds GetBounds()
		{
			return null;
		}

		[Token(Token = "0x6000AB6")]
		[Address(RVA = "0xFD3ADC", Offset = "0xFD3ADC", VA = "0xFD3ADC")]
		private void CreateProperty(ref BendProperty property, Transform t)
		{
		}

		[Token(Token = "0x6000AB7")]
		[Address(RVA = "0xFD4968", Offset = "0xFD4968", VA = "0xFD4968")]
		private void CalculateBounds()
		{
		}

		[Token(Token = "0x6000AB8")]
		[Address(RVA = "0xFD4B10", Offset = "0xFD4B10", VA = "0xFD4B10")]
		private void CalculatePropertyBounds(ref BendProperty property)
		{
		}

		[Token(Token = "0x6000AB9")]
		[Address(RVA = "0xFD5028", Offset = "0xFD5028", VA = "0xFD5028")]
		public void GetPercent(BendProperty property)
		{
		}

		[Token(Token = "0x6000ABA")]
		[Address(RVA = "0xFD3330", Offset = "0xFD3330", VA = "0xFD3330")]
		private void Revert()
		{
		}

		[Token(Token = "0x6000ABB")]
		[Address(RVA = "0xFD319C", Offset = "0xFD319C", VA = "0xFD319C")]
		public void UpdateReferences()
		{
		}

		[Token(Token = "0x6000ABC")]
		[Address(RVA = "0xFD5E4C", Offset = "0xFD5E4C", VA = "0xFD5E4C")]
		private void GetBendResult(Vector3 percentage)
		{
		}

		[Token(Token = "0x6000ABD")]
		[Address(RVA = "0xFD5958", Offset = "0xFD5958", VA = "0xFD5958")]
		private Vector3 GetPercentage(Vector3 point)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000ABE")]
		[Address(RVA = "0xFD6224", Offset = "0xFD6224", VA = "0xFD6224", Slot = "20")]
		protected override void Build()
		{
		}

		[Token(Token = "0x6000ABF")]
		[Address(RVA = "0xFD5C40", Offset = "0xFD5C40", VA = "0xFD5C40")]
		private void Bend()
		{
		}

		[Token(Token = "0x6000AC0")]
		[Address(RVA = "0xFD6250", Offset = "0xFD6250", VA = "0xFD6250")]
		public void BendObject(BendProperty p)
		{
		}

		[Token(Token = "0x6000AC1")]
		[Address(RVA = "0xFD6E30", Offset = "0xFD6E30", VA = "0xFD6E30", Slot = "21")]
		protected override void PostBuild()
		{
		}

		[Token(Token = "0x6000AC2")]
		[Address(RVA = "0xFD6F70", Offset = "0xFD6F70", VA = "0xFD6F70", Slot = "19")]
		protected override void LateRun()
		{
		}

		[Token(Token = "0x6000AC3")]
		[Address(RVA = "0xFD6FD4", Offset = "0xFD6FD4", VA = "0xFD6FD4")]
		public ObjectBender()
		{
		}
	}
	[Token(Token = "0x2000211")]
	[AddComponentMenu("Dreamteck/Splines/Object Controller")]
	public class ObjectController : SplineUser
	{
		[Serializable]
		[Token(Token = "0x2000212")]
		internal class ObjectControl
		{
			[Token(Token = "0x4000A35")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public GameObject gameObject;

			[Token(Token = "0x4000A36")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Vector3 position;

			[Token(Token = "0x4000A37")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public Quaternion rotation;

			[Token(Token = "0x4000A38")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public Vector3 scale;

			[Token(Token = "0x4000A39")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public bool active;

			[Token(Token = "0x4000A3A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			public Vector3 baseScale;

			[Token(Token = "0x170000F4")]
			public bool isNull
			{
				[Token(Token = "0x6000B0C")]
				[Address(RVA = "0xFD9950", Offset = "0xFD9950", VA = "0xFD9950")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x170000F5")]
			public Transform transform
			{
				[Token(Token = "0x6000B0D")]
				[Address(RVA = "0xFD99B0", Offset = "0xFD99B0", VA = "0xFD99B0")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000B0E")]
			[Address(RVA = "0xFD9A38", Offset = "0xFD9A38", VA = "0xFD9A38")]
			public ObjectControl(GameObject input)
			{
			}

			[Token(Token = "0x6000B0F")]
			[Address(RVA = "0xFD9B70", Offset = "0xFD9B70", VA = "0xFD9B70")]
			public void Destroy()
			{
			}

			[Token(Token = "0x6000B10")]
			[Address(RVA = "0xFD9C00", Offset = "0xFD9C00", VA = "0xFD9C00")]
			public void DestroyImmediate()
			{
			}

			[Token(Token = "0x6000B11")]
			[Address(RVA = "0xFD9C90", Offset = "0xFD9C90", VA = "0xFD9C90")]
			public void Apply()
			{
			}
		}

		[Token(Token = "0x2000213")]
		public enum ObjectMethod
		{
			[Token(Token = "0x4000A3C")]
			Instantiate,
			[Token(Token = "0x4000A3D")]
			GetChildren
		}

		[Token(Token = "0x2000214")]
		public enum Positioning
		{
			[Token(Token = "0x4000A3F")]
			Stretch,
			[Token(Token = "0x4000A40")]
			Clip
		}

		[Token(Token = "0x2000215")]
		public enum Iteration
		{
			[Token(Token = "0x4000A42")]
			Ordered,
			[Token(Token = "0x4000A43")]
			Random
		}

		[Token(Token = "0x2000216")]
		[CompilerGenerated]
		private sealed class <InstantiateAllWithDelay>d__97 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000A44")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000A45")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000A46")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ObjectController <>4__this;

			[Token(Token = "0x4000A47")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <i>5__2;

			[Token(Token = "0x170000F6")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000B15")]
				[Address(RVA = "0xFD9EE4", Offset = "0xFD9EE4", VA = "0xFD9EE4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000F7")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000B17")]
				[Address(RVA = "0xFD9F2C", Offset = "0xFD9F2C", VA = "0xFD9F2C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000B12")]
			[Address(RVA = "0xFD9D6C", Offset = "0xFD9D6C", VA = "0xFD9D6C")]
			[DebuggerHidden]
			public <InstantiateAllWithDelay>d__97(int <>1__state)
			{
			}

			[Token(Token = "0x6000B13")]
			[Address(RVA = "0xFD9D94", Offset = "0xFD9D94", VA = "0xFD9D94", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000B14")]
			[Address(RVA = "0xFD9D98", Offset = "0xFD9D98", VA = "0xFD9D98", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000B16")]
			[Address(RVA = "0xFD9EEC", Offset = "0xFD9EEC", VA = "0xFD9EEC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000A19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		[HideInInspector]
		public GameObject[] objects;

		[Token(Token = "0x4000A1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		[HideInInspector]
		private float _positionOffset;

		[Token(Token = "0x4000A1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[SerializeField]
		[HideInInspector]
		private int _spawnCount;

		[Token(Token = "0x4000A1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		[HideInInspector]
		private Positioning _objectPositioning;

		[Token(Token = "0x4000A1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[SerializeField]
		[HideInInspector]
		private Iteration _iteration;

		[Token(Token = "0x4000A1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[HideInInspector]
		[SerializeField]
		private int _randomSeed;

		[Token(Token = "0x4000A1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[HideInInspector]
		[SerializeField]
		private Vector2 _randomSize;

		[Token(Token = "0x4000A20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[SerializeField]
		[HideInInspector]
		private Vector2 _offset;

		[Token(Token = "0x4000A21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[HideInInspector]
		[SerializeField]
		private Vector3 _minRotationOffset;

		[Token(Token = "0x4000A22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		[HideInInspector]
		private Vector3 _maxRotationOffset;

		[Token(Token = "0x4000A23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[SerializeField]
		[HideInInspector]
		private Vector3 _minScaleMultiplier;

		[Token(Token = "0x4000A24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[SerializeField]
		[HideInInspector]
		private Vector3 _maxScaleMultiplier;

		[Token(Token = "0x4000A25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		[SerializeField]
		[HideInInspector]
		private bool _randomizeOffset;

		[Token(Token = "0x4000A26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF5")]
		[HideInInspector]
		[SerializeField]
		private bool _useRandomOffsetRotation;

		[Token(Token = "0x4000A27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF6")]
		[SerializeField]
		[HideInInspector]
		private bool _shellOffset;

		[Token(Token = "0x4000A28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF7")]
		[HideInInspector]
		[SerializeField]
		private bool _randomOffset;

		[Token(Token = "0x4000A29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[SerializeField]
		[HideInInspector]
		private bool _applyRotation;

		[Token(Token = "0x4000A2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF9")]
		[SerializeField]
		[HideInInspector]
		private bool _applyScale;

		[Token(Token = "0x4000A2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		[SerializeField]
		[HideInInspector]
		private ObjectMethod _objectMethod;

		[Token(Token = "0x4000A2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[HideInInspector]
		public bool delayedSpawn;

		[Token(Token = "0x4000A2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		[HideInInspector]
		public float spawnDelay;

		[Token(Token = "0x4000A2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[HideInInspector]
		[SerializeField]
		private int lastChildCount;

		[Token(Token = "0x4000A2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[SerializeField]
		[HideInInspector]
		private ObjectControl[] spawned;

		[Token(Token = "0x4000A30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private SplineResult evaluateResult;

		[Token(Token = "0x4000A31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private System.Random randomizer;

		[Token(Token = "0x4000A32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private System.Random randomizer2;

		[Token(Token = "0x4000A33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private System.Random rotationRandomizer;

		[Token(Token = "0x4000A34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private System.Random scaleRandomizer;

		[Token(Token = "0x170000E0")]
		public ObjectMethod objectMethod
		{
			[Token(Token = "0x6000AD8")]
			[Address(RVA = "0xFD76AC", Offset = "0xFD76AC", VA = "0xFD76AC")]
			get
			{
				return default(ObjectMethod);
			}
			[Token(Token = "0x6000AD9")]
			[Address(RVA = "0xFD76B4", Offset = "0xFD76B4", VA = "0xFD76B4")]
			set
			{
			}
		}

		[Token(Token = "0x170000E1")]
		public int spawnCount
		{
			[Token(Token = "0x6000ADA")]
			[Address(RVA = "0xFD7780", Offset = "0xFD7780", VA = "0xFD7780")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000ADB")]
			[Address(RVA = "0xFD7788", Offset = "0xFD7788", VA = "0xFD7788")]
			set
			{
			}
		}

		[Token(Token = "0x170000E2")]
		public Positioning objectPositioning
		{
			[Token(Token = "0x6000ADC")]
			[Address(RVA = "0xFD7A0C", Offset = "0xFD7A0C", VA = "0xFD7A0C")]
			get
			{
				return default(Positioning);
			}
			[Token(Token = "0x6000ADD")]
			[Address(RVA = "0xFD7A14", Offset = "0xFD7A14", VA = "0xFD7A14")]
			set
			{
			}
		}

		[Token(Token = "0x170000E3")]
		public Iteration iteration
		{
			[Token(Token = "0x6000ADE")]
			[Address(RVA = "0xFD7A38", Offset = "0xFD7A38", VA = "0xFD7A38")]
			get
			{
				return default(Iteration);
			}
			[Token(Token = "0x6000ADF")]
			[Address(RVA = "0xFD7A40", Offset = "0xFD7A40", VA = "0xFD7A40")]
			set
			{
			}
		}

		[Token(Token = "0x170000E4")]
		public int randomSeed
		{
			[Token(Token = "0x6000AE0")]
			[Address(RVA = "0xFD7A64", Offset = "0xFD7A64", VA = "0xFD7A64")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000AE1")]
			[Address(RVA = "0xFD7A6C", Offset = "0xFD7A6C", VA = "0xFD7A6C")]
			set
			{
			}
		}

		[Token(Token = "0x170000E5")]
		public Vector2 offset
		{
			[Token(Token = "0x6000AE2")]
			[Address(RVA = "0xFD7A90", Offset = "0xFD7A90", VA = "0xFD7A90")]
			get
			{
				return default(Vector2);
			}
			[Token(Token = "0x6000AE3")]
			[Address(RVA = "0xFD7A98", Offset = "0xFD7A98", VA = "0xFD7A98")]
			set
			{
			}
		}

		[Token(Token = "0x170000E6")]
		public Vector3 minRotationOffset
		{
			[Token(Token = "0x6000AE4")]
			[Address(RVA = "0xFD7AD8", Offset = "0xFD7AD8", VA = "0xFD7AD8")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000AE5")]
			[Address(RVA = "0xFD7AE4", Offset = "0xFD7AE4", VA = "0xFD7AE4")]
			set
			{
			}
		}

		[Token(Token = "0x170000E7")]
		public Vector3 maxRotationOffset
		{
			[Token(Token = "0x6000AE6")]
			[Address(RVA = "0xFD7B38", Offset = "0xFD7B38", VA = "0xFD7B38")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000AE7")]
			[Address(RVA = "0xFD7B44", Offset = "0xFD7B44", VA = "0xFD7B44")]
			set
			{
			}
		}

		[Token(Token = "0x170000E8")]
		public Vector3 rotationOffset
		{
			[Token(Token = "0x6000AE8")]
			[Address(RVA = "0xFD7B98", Offset = "0xFD7B98", VA = "0xFD7B98")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000AE9")]
			[Address(RVA = "0xFD7BC8", Offset = "0xFD7BC8", VA = "0xFD7BC8")]
			set
			{
			}
		}

		[Token(Token = "0x170000E9")]
		public Vector3 minScaleMultiplier
		{
			[Token(Token = "0x6000AEA")]
			[Address(RVA = "0xFD7C50", Offset = "0xFD7C50", VA = "0xFD7C50")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000AEB")]
			[Address(RVA = "0xFD7C5C", Offset = "0xFD7C5C", VA = "0xFD7C5C")]
			set
			{
			}
		}

		[Token(Token = "0x170000EA")]
		public Vector3 maxScaleMultiplier
		{
			[Token(Token = "0x6000AEC")]
			[Address(RVA = "0xFD7CB0", Offset = "0xFD7CB0", VA = "0xFD7CB0")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000AED")]
			[Address(RVA = "0xFD7CBC", Offset = "0xFD7CBC", VA = "0xFD7CBC")]
			set
			{
			}
		}

		[Token(Token = "0x170000EB")]
		public Vector3 scaleMultiplier
		{
			[Token(Token = "0x6000AEE")]
			[Address(RVA = "0xFD7D10", Offset = "0xFD7D10", VA = "0xFD7D10")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000AEF")]
			[Address(RVA = "0xFD7D40", Offset = "0xFD7D40", VA = "0xFD7D40")]
			set
			{
			}
		}

		[Token(Token = "0x170000EC")]
		public bool randomizeOffset
		{
			[Token(Token = "0x6000AF0")]
			[Address(RVA = "0xFD7DC8", Offset = "0xFD7DC8", VA = "0xFD7DC8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000AF1")]
			[Address(RVA = "0xFD7DD0", Offset = "0xFD7DD0", VA = "0xFD7DD0")]
			set
			{
			}
		}

		[Token(Token = "0x170000ED")]
		public bool useRandomOffsetRotation
		{
			[Token(Token = "0x6000AF2")]
			[Address(RVA = "0xFD7DF8", Offset = "0xFD7DF8", VA = "0xFD7DF8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000AF3")]
			[Address(RVA = "0xFD7E00", Offset = "0xFD7E00", VA = "0xFD7E00")]
			set
			{
			}
		}

		[Token(Token = "0x170000EE")]
		public bool shellOffset
		{
			[Token(Token = "0x6000AF4")]
			[Address(RVA = "0xFD7E28", Offset = "0xFD7E28", VA = "0xFD7E28")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000AF5")]
			[Address(RVA = "0xFD7E30", Offset = "0xFD7E30", VA = "0xFD7E30")]
			set
			{
			}
		}

		[Token(Token = "0x170000EF")]
		public bool randomOffset
		{
			[Token(Token = "0x6000AF6")]
			[Address(RVA = "0xFD7E58", Offset = "0xFD7E58", VA = "0xFD7E58")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000AF7")]
			[Address(RVA = "0xFD7E60", Offset = "0xFD7E60", VA = "0xFD7E60")]
			set
			{
			}
		}

		[Token(Token = "0x170000F0")]
		public bool applyRotation
		{
			[Token(Token = "0x6000AF8")]
			[Address(RVA = "0xFD7E88", Offset = "0xFD7E88", VA = "0xFD7E88")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000AF9")]
			[Address(RVA = "0xFD7E90", Offset = "0xFD7E90", VA = "0xFD7E90")]
			set
			{
			}
		}

		[Token(Token = "0x170000F1")]
		public bool applyScale
		{
			[Token(Token = "0x6000AFA")]
			[Address(RVA = "0xFD7EB8", Offset = "0xFD7EB8", VA = "0xFD7EB8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000AFB")]
			[Address(RVA = "0xFD7EC0", Offset = "0xFD7EC0", VA = "0xFD7EC0")]
			set
			{
			}
		}

		[Token(Token = "0x170000F2")]
		public Vector2 randomSize
		{
			[Token(Token = "0x6000AFC")]
			[Address(RVA = "0xFD7EE8", Offset = "0xFD7EE8", VA = "0xFD7EE8")]
			get
			{
				return default(Vector2);
			}
			[Token(Token = "0x6000AFD")]
			[Address(RVA = "0xFD7EF0", Offset = "0xFD7EF0", VA = "0xFD7EF0")]
			set
			{
			}
		}

		[Token(Token = "0x170000F3")]
		public float positionOffset
		{
			[Token(Token = "0x6000AFE")]
			[Address(RVA = "0xFD7F30", Offset = "0xFD7F30", VA = "0xFD7F30")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000AFF")]
			[Address(RVA = "0xFD7F38", Offset = "0xFD7F38", VA = "0xFD7F38")]
			set
			{
			}
		}

		[Token(Token = "0x6000B00")]
		[Address(RVA = "0xFD7F5C", Offset = "0xFD7F5C", VA = "0xFD7F5C")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000B01")]
		[Address(RVA = "0xFD77BC", Offset = "0xFD77BC", VA = "0xFD77BC")]
		private void Remove()
		{
		}

		[Token(Token = "0x6000B02")]
		[Address(RVA = "0xFD8080", Offset = "0xFD8080", VA = "0xFD8080")]
		public void GetAll()
		{
		}

		[Token(Token = "0x6000B03")]
		[Address(RVA = "0xFD76D4", Offset = "0xFD76D4", VA = "0xFD76D4")]
		public void Spawn()
		{
		}

		[Token(Token = "0x6000B04")]
		[Address(RVA = "0xFD87CC", Offset = "0xFD87CC", VA = "0xFD87CC", Slot = "19")]
		protected override void LateRun()
		{
		}

		[Token(Token = "0x6000B05")]
		[Address(RVA = "0xFD869C", Offset = "0xFD869C", VA = "0xFD869C")]
		[IteratorStateMachine(typeof(<InstantiateAllWithDelay>d__97))]
		private IEnumerator InstantiateAllWithDelay()
		{
			return null;
		}

		[Token(Token = "0x6000B06")]
		[Address(RVA = "0xFD8710", Offset = "0xFD8710", VA = "0xFD8710")]
		private void InstantiateAll()
		{
		}

		[Token(Token = "0x6000B07")]
		[Address(RVA = "0xFD8844", Offset = "0xFD8844", VA = "0xFD8844")]
		private void InstantiateSingle()
		{
		}

		[Token(Token = "0x6000B08")]
		[Address(RVA = "0xFD8B88", Offset = "0xFD8B88", VA = "0xFD8B88", Slot = "20")]
		protected override void Build()
		{
		}

		[Token(Token = "0x6000B09")]
		[Address(RVA = "0xFD96C0", Offset = "0xFD96C0", VA = "0xFD96C0", Slot = "21")]
		protected override void PostBuild()
		{
		}

		[Token(Token = "0x6000B0A")]
		[Address(RVA = "0xFD9728", Offset = "0xFD9728", VA = "0xFD9728", Slot = "8")]
		protected override void OnDestroy()
		{
		}

		[Token(Token = "0x6000B0B")]
		[Address(RVA = "0xFD9754", Offset = "0xFD9754", VA = "0xFD9754")]
		public ObjectController()
		{
		}
	}
	[Token(Token = "0x2000217")]
	[ExecuteInEditMode]
	[AddComponentMenu("Dreamteck/Splines/Particle Controller")]
	public class ParticleController : SplineUser
	{
		[Token(Token = "0x2000218")]
		public enum EmitPoint
		{
			[Token(Token = "0x4000A58")]
			Beginning,
			[Token(Token = "0x4000A59")]
			Ending,
			[Token(Token = "0x4000A5A")]
			Random,
			[Token(Token = "0x4000A5B")]
			Ordered
		}

		[Token(Token = "0x2000219")]
		public enum MotionType
		{
			[Token(Token = "0x4000A5D")]
			None,
			[Token(Token = "0x4000A5E")]
			UseParticleSystem,
			[Token(Token = "0x4000A5F")]
			FollowForward,
			[Token(Token = "0x4000A60")]
			FollowBackward,
			[Token(Token = "0x4000A61")]
			ByNormal,
			[Token(Token = "0x4000A62")]
			ByNormalRandomized
		}

		[Token(Token = "0x200021A")]
		public enum Wrap
		{
			[Token(Token = "0x4000A64")]
			Default,
			[Token(Token = "0x4000A65")]
			Loop
		}

		[Token(Token = "0x200021B")]
		public class Particle
		{
			[Token(Token = "0x4000A66")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal Vector2 startOffset;

			[Token(Token = "0x4000A67")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal Vector2 endOffset;

			[Token(Token = "0x4000A68")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal float cycleSpeed;

			[Token(Token = "0x4000A69")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			internal float startLifetime;

			[Token(Token = "0x4000A6A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal Color startColor;

			[Token(Token = "0x4000A6B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			internal float remainingLifetime;

			[Token(Token = "0x4000A6C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			internal double startPercent;

			[Token(Token = "0x6000B1F")]
			[Address(RVA = "0xFDB8E0", Offset = "0xFDB8E0", VA = "0xFDB8E0")]
			internal double GetSplinePercent(Wrap wrap)
			{
				return default(double);
			}

			[Token(Token = "0x6000B20")]
			[Address(RVA = "0xFDB9D4", Offset = "0xFDB9D4", VA = "0xFDB9D4")]
			public Particle()
			{
			}
		}

		[Token(Token = "0x4000A48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[HideInInspector]
		public ParticleSystem _particleSystem;

		[Token(Token = "0x4000A49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[HideInInspector]
		public bool volumetric;

		[Token(Token = "0x4000A4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA1")]
		[HideInInspector]
		public bool emitFromShell;

		[Token(Token = "0x4000A4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[HideInInspector]
		public Vector2 scale;

		[Token(Token = "0x4000A4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[HideInInspector]
		public EmitPoint emitPoint;

		[Token(Token = "0x4000A4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[HideInInspector]
		public MotionType motionType;

		[Token(Token = "0x4000A4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[HideInInspector]
		public Wrap wrapMode;

		[Token(Token = "0x4000A4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[HideInInspector]
		public float minCycles;

		[Token(Token = "0x4000A50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[HideInInspector]
		public float maxCycles;

		[Token(Token = "0x4000A51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private ParticleSystem.Particle[] particles;

		[Token(Token = "0x4000A52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Particle[] controllers;

		[Token(Token = "0x4000A53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private float[] lifetimes;

		[Token(Token = "0x4000A54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private int particleCount;

		[Token(Token = "0x4000A55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private int birthIndex;

		[Token(Token = "0x4000A56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private SplineResult evaluateResult;

		[Token(Token = "0x6000B18")]
		[Address(RVA = "0xFD9F34", Offset = "0xFD9F34", VA = "0xFD9F34", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000B19")]
		[Address(RVA = "0xFD9F54", Offset = "0xFD9F54", VA = "0xFD9F54", Slot = "19")]
		protected override void LateRun()
		{
		}

		[Token(Token = "0x6000B1A")]
		[Address(RVA = "0xFDB824", Offset = "0xFDB824", VA = "0xFDB824", Slot = "5")]
		protected override void Reset()
		{
		}

		[Token(Token = "0x6000B1B")]
		[Address(RVA = "0xFDB1BC", Offset = "0xFDB1BC", VA = "0xFDB1BC")]
		private void HandleParticle(int index)
		{
		}

		[Token(Token = "0x6000B1C")]
		[Address(RVA = "0xFDB9D0", Offset = "0xFDB9D0", VA = "0xFDB9D0")]
		private void OnParticleDie(int index)
		{
		}

		[Token(Token = "0x6000B1D")]
		[Address(RVA = "0xFDA540", Offset = "0xFDA540", VA = "0xFDA540")]
		private void OnParticleBorn(int index)
		{
		}

		[Token(Token = "0x6000B1E")]
		[Address(RVA = "0xFDBA40", Offset = "0xFDBA40", VA = "0xFDBA40")]
		public ParticleController()
		{
		}
	}
	[Token(Token = "0x200021C")]
	[RequireComponent(typeof(MeshFilter))]
	[RequireComponent(typeof(MeshRenderer))]
	[AddComponentMenu("Dreamteck/Splines/Path Generator")]
	public class PathGenerator : MeshGenerator
	{
		[Token(Token = "0x4000A6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[SerializeField]
		[HideInInspector]
		private int _slices;

		[Token(Token = "0x4000A6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		[SerializeField]
		[HideInInspector]
		private bool _useShapeCurve;

		[Token(Token = "0x4000A6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[HideInInspector]
		[SerializeField]
		private AnimationCurve _shape;

		[Token(Token = "0x4000A70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[HideInInspector]
		[SerializeField]
		private AnimationCurve _lastShape;

		[Token(Token = "0x4000A71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[HideInInspector]
		[SerializeField]
		private float _shapeExposure;

		[Token(Token = "0x170000F8")]
		public int slices
		{
			[Token(Token = "0x6000B21")]
			[Address(RVA = "0xFDBBA0", Offset = "0xFDBBA0", VA = "0xFDBBA0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000B22")]
			[Address(RVA = "0xFDBBA8", Offset = "0xFDBBA8", VA = "0xFDBBA8")]
			set
			{
			}
		}

		[Token(Token = "0x170000F9")]
		public bool useShapeCurve
		{
			[Token(Token = "0x6000B23")]
			[Address(RVA = "0xFDBBD4", Offset = "0xFDBBD4", VA = "0xFDBBD4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000B24")]
			[Address(RVA = "0xFDBBDC", Offset = "0xFDBBDC", VA = "0xFDBBDC")]
			set
			{
			}
		}

		[Token(Token = "0x170000FA")]
		public float shapeExposure
		{
			[Token(Token = "0x6000B25")]
			[Address(RVA = "0xFDBD30", Offset = "0xFDBD30", VA = "0xFDBD30")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000B26")]
			[Address(RVA = "0xFDBD38", Offset = "0xFDBD38", VA = "0xFDBD38")]
			set
			{
			}
		}

		[Token(Token = "0x170000FB")]
		public AnimationCurve shape
		{
			[Token(Token = "0x6000B27")]
			[Address(RVA = "0xFDBDEC", Offset = "0xFDBDEC", VA = "0xFDBDEC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B28")]
			[Address(RVA = "0xFDBDF4", Offset = "0xFDBDF4", VA = "0xFDBDF4")]
			set
			{
			}
		}

		[Token(Token = "0x6000B29")]
		[Address(RVA = "0xFDC16C", Offset = "0xFDC16C", VA = "0xFDC16C", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000B2A")]
		[Address(RVA = "0xFDC1CC", Offset = "0xFDC1CC", VA = "0xFDC1CC", Slot = "5")]
		protected override void Reset()
		{
		}

		[Token(Token = "0x6000B2B")]
		[Address(RVA = "0xFDC1D4", Offset = "0xFDC1D4", VA = "0xFDC1D4", Slot = "29")]
		protected override void BuildMesh()
		{
		}

		[Token(Token = "0x6000B2C")]
		[Address(RVA = "0xFDC2A4", Offset = "0xFDC2A4", VA = "0xFDC2A4")]
		private void GenerateVertices()
		{
		}

		[Token(Token = "0x6000B2D")]
		[Address(RVA = "0xFDD27C", Offset = "0xFDD27C", VA = "0xFDD27C")]
		public PathGenerator()
		{
		}
	}
	[Token(Token = "0x200021D")]
	[AddComponentMenu("Dreamteck/Splines/Polygon Collider Generator")]
	[RequireComponent(typeof(PolygonCollider2D))]
	public class PolygonColliderGenerator : SplineUser
	{
		[Token(Token = "0x200021E")]
		public enum Type
		{
			[Token(Token = "0x4000A7B")]
			Path,
			[Token(Token = "0x4000A7C")]
			Shape
		}

		[Token(Token = "0x4000A72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		[HideInInspector]
		private Type _type;

		[Token(Token = "0x4000A73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[SerializeField]
		[HideInInspector]
		private float _size;

		[Token(Token = "0x4000A74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		[HideInInspector]
		private float _offset;

		[Token(Token = "0x4000A75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		[HideInInspector]
		protected PolygonCollider2D polygonCollider;

		[Token(Token = "0x4000A76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[HideInInspector]
		[SerializeField]
		protected Vector2[] vertices;

		[Token(Token = "0x4000A77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[HideInInspector]
		public float updateRate;

		[Token(Token = "0x4000A78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		protected float lastUpdateTime;

		[Token(Token = "0x4000A79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private bool updateCollider;

		[Token(Token = "0x170000FC")]
		public Type type
		{
			[Token(Token = "0x6000B2E")]
			[Address(RVA = "0xFDD2E4", Offset = "0xFDD2E4", VA = "0xFDD2E4")]
			get
			{
				return default(Type);
			}
			[Token(Token = "0x6000B2F")]
			[Address(RVA = "0xFDD2EC", Offset = "0xFDD2EC", VA = "0xFDD2EC")]
			set
			{
			}
		}

		[Token(Token = "0x170000FD")]
		public float size
		{
			[Token(Token = "0x6000B30")]
			[Address(RVA = "0xFDD310", Offset = "0xFDD310", VA = "0xFDD310")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000B31")]
			[Address(RVA = "0xFDD318", Offset = "0xFDD318", VA = "0xFDD318")]
			set
			{
			}
		}

		[Token(Token = "0x170000FE")]
		public float offset
		{
			[Token(Token = "0x6000B32")]
			[Address(RVA = "0xFDD33C", Offset = "0xFDD33C", VA = "0xFDD33C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000B33")]
			[Address(RVA = "0xFDD344", Offset = "0xFDD344", VA = "0xFDD344")]
			set
			{
			}
		}

		[Token(Token = "0x6000B34")]
		[Address(RVA = "0xFDD368", Offset = "0xFDD368", VA = "0xFDD368", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000B35")]
		[Address(RVA = "0xFDD3CC", Offset = "0xFDD3CC", VA = "0xFDD3CC", Slot = "5")]
		protected override void Reset()
		{
		}

		[Token(Token = "0x6000B36")]
		[Address(RVA = "0xFDD3D4", Offset = "0xFDD3D4", VA = "0xFDD3D4", Slot = "6")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6000B37")]
		[Address(RVA = "0xFDD3DC", Offset = "0xFDD3DC", VA = "0xFDD3DC", Slot = "7")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x6000B38")]
		[Address(RVA = "0xFDD3E4", Offset = "0xFDD3E4", VA = "0xFDD3E4", Slot = "8")]
		protected override void OnDestroy()
		{
		}

		[Token(Token = "0x6000B39")]
		[Address(RVA = "0xFDD3EC", Offset = "0xFDD3EC", VA = "0xFDD3EC", Slot = "19")]
		protected override void LateRun()
		{
		}

		[Token(Token = "0x6000B3A")]
		[Address(RVA = "0xFDD4B4", Offset = "0xFDD4B4", VA = "0xFDD4B4", Slot = "20")]
		protected override void Build()
		{
		}

		[Token(Token = "0x6000B3B")]
		[Address(RVA = "0xFDDB5C", Offset = "0xFDDB5C", VA = "0xFDDB5C", Slot = "21")]
		protected override void PostBuild()
		{
		}

		[Token(Token = "0x6000B3C")]
		[Address(RVA = "0xFDD510", Offset = "0xFDD510", VA = "0xFDD510")]
		private void GeneratePath()
		{
		}

		[Token(Token = "0x6000B3D")]
		[Address(RVA = "0xFDD8BC", Offset = "0xFDD8BC", VA = "0xFDD8BC")]
		private void GenerateShape()
		{
		}

		[Token(Token = "0x6000B3E")]
		[Address(RVA = "0xFDDC94", Offset = "0xFDDC94", VA = "0xFDDC94")]
		public PolygonColliderGenerator()
		{
		}
	}
	[Token(Token = "0x200021F")]
	public delegate void EmptySplineHandler();
	[Token(Token = "0x2000220")]
	[AddComponentMenu("Dreamteck/Splines/Spline Computer")]
	public class SplineComputer : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000221")]
		public class NodeLink
		{
			[Token(Token = "0x4000A88")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Node node;

			[Token(Token = "0x4000A89")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int pointIndex;

			[Token(Token = "0x6000BA0")]
			[Address(RVA = "0xFDF134", Offset = "0xFDF134", VA = "0xFDF134")]
			public NodeLink()
			{
			}
		}

		[Token(Token = "0x2000222")]
		public enum Space
		{
			[Token(Token = "0x4000A8B")]
			World,
			[Token(Token = "0x4000A8C")]
			Local
		}

		[Serializable]
		[Token(Token = "0x2000223")]
		public class Morph
		{
			[Serializable]
			[Token(Token = "0x2000224")]
			internal class SplineMorphState
			{
				[Token(Token = "0x4000A90")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				public SplinePoint[] points;

				[Token(Token = "0x4000A91")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				public float percent;

				[Token(Token = "0x4000A92")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
				public string name;

				[Token(Token = "0x6000BB2")]
				[Address(RVA = "0xFE3E00", Offset = "0xFE3E00", VA = "0xFE3E00")]
				public SplineMorphState()
				{
				}
			}

			[Token(Token = "0x4000A8D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[SerializeField]
			private SplineComputer computer;

			[Token(Token = "0x4000A8E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[SerializeField]
			private SplineMorphState[] morphStates;

			[Token(Token = "0x4000A8F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[SerializeField]
			internal bool initialized;

			[Token(Token = "0x6000BA1")]
			[Address(RVA = "0xFDE068", Offset = "0xFDE068", VA = "0xFDE068")]
			public Morph(SplineComputer input)
			{
			}

			[Token(Token = "0x6000BA2")]
			[Address(RVA = "0xFE2B4C", Offset = "0xFE2B4C", VA = "0xFE2B4C")]
			public void SetWeight(int index, float weight)
			{
			}

			[Token(Token = "0x6000BA3")]
			[Address(RVA = "0xFE3818", Offset = "0xFE3818", VA = "0xFE3818")]
			public void SetWeight(string name, float weight)
			{
			}

			[Token(Token = "0x6000BA4")]
			[Address(RVA = "0xFE396C", Offset = "0xFE396C", VA = "0xFE396C")]
			public void CaptureSnapshot(int index)
			{
			}

			[Token(Token = "0x6000BA5")]
			[Address(RVA = "0xFE3AC0", Offset = "0xFE3AC0", VA = "0xFE3AC0")]
			public void CaptureSnapshot(string name)
			{
			}

			[Token(Token = "0x6000BA6")]
			[Address(RVA = "0xFE3ADC", Offset = "0xFE3ADC", VA = "0xFE3ADC")]
			public void Clear()
			{
			}

			[Token(Token = "0x6000BA7")]
			[Address(RVA = "0xFE3B34", Offset = "0xFE3B34", VA = "0xFE3B34")]
			public SplinePoint[] GetSnapshot(int index)
			{
				return null;
			}

			[Token(Token = "0x6000BA8")]
			[Address(RVA = "0xFE3B6C", Offset = "0xFE3B6C", VA = "0xFE3B6C")]
			public SplinePoint[] GetSnapshot(string name)
			{
				return null;
			}

			[Token(Token = "0x6000BA9")]
			[Address(RVA = "0xFE2EB4", Offset = "0xFE2EB4", VA = "0xFE2EB4")]
			public float GetWeight(int index)
			{
				return default(float);
			}

			[Token(Token = "0x6000BAA")]
			[Address(RVA = "0xFE3BAC", Offset = "0xFE3BAC", VA = "0xFE3BAC")]
			public float GetWeight(string name)
			{
				return default(float);
			}

			[Token(Token = "0x6000BAB")]
			[Address(RVA = "0xFE3BEC", Offset = "0xFE3BEC", VA = "0xFE3BEC")]
			public void AddChannel(string name)
			{
			}

			[Token(Token = "0x6000BAC")]
			[Address(RVA = "0xFE3E98", Offset = "0xFE3E98", VA = "0xFE3E98")]
			public void RemoveChannel(string name)
			{
			}

			[Token(Token = "0x6000BAD")]
			[Address(RVA = "0xFE3EB4", Offset = "0xFE3EB4", VA = "0xFE3EB4")]
			public void RemoveChannel(int index)
			{
			}

			[Token(Token = "0x6000BAE")]
			[Address(RVA = "0xFE35C0", Offset = "0xFE35C0", VA = "0xFE35C0")]
			private void Update()
			{
			}

			[Token(Token = "0x6000BAF")]
			[Address(RVA = "0xFE387C", Offset = "0xFE387C", VA = "0xFE387C")]
			private int GetChannelIndex(string name)
			{
				return default(int);
			}

			[Token(Token = "0x6000BB0")]
			[Address(RVA = "0xFDE124", Offset = "0xFDE124", VA = "0xFDE124")]
			public int GetChannelCount()
			{
				return default(int);
			}

			[Token(Token = "0x6000BB1")]
			[Address(RVA = "0xFE2CDC", Offset = "0xFE2CDC", VA = "0xFE2CDC")]
			public string[] GetChannelNames()
			{
				return null;
			}
		}

		[Token(Token = "0x4000A7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[HideInInspector]
		private Spline spline;

		[Token(Token = "0x4000A7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		[SerializeField]
		private Morph _morph;

		[Token(Token = "0x4000A7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		[SerializeField]
		private Space _space;

		[Token(Token = "0x4000A80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		[HideInInspector]
		private SplineUser[] subscribers;

		[Token(Token = "0x4000A81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[HideInInspector]
		private NodeLink[] _nodeLinks;

		[Token(Token = "0x4000A82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool rebuildPending;

		[Token(Token = "0x4000A83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private TS_Transform tsTransform;

		[Token(Token = "0x4000A84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool updateRebuild;

		[Token(Token = "0x4000A85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		private bool lateUpdateRebuild;

		[Token(Token = "0x4000A86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private SplineUser.UpdateMethod method;

		[Token(Token = "0x170000FF")]
		public Space space
		{
			[Token(Token = "0x6000B43")]
			[Address(RVA = "0xFDDDF4", Offset = "0xFDDDF4", VA = "0xFDDDF4")]
			get
			{
				return default(Space);
			}
			[Token(Token = "0x6000B44")]
			[Address(RVA = "0xFDDDFC", Offset = "0xFDDDFC", VA = "0xFDDDFC")]
			set
			{
			}
		}

		[Token(Token = "0x17000100")]
		public Spline.Type type
		{
			[Token(Token = "0x6000B45")]
			[Address(RVA = "0xFDDE24", Offset = "0xFDDE24", VA = "0xFDDE24")]
			get
			{
				return default(Spline.Type);
			}
			[Token(Token = "0x6000B46")]
			[Address(RVA = "0xFDDE40", Offset = "0xFDDE40", VA = "0xFDDE40")]
			set
			{
			}
		}

		[Token(Token = "0x17000101")]
		public double precision
		{
			[Token(Token = "0x6000B47")]
			[Address(RVA = "0xFDDE70", Offset = "0xFDDE70", VA = "0xFDDE70")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6000B48")]
			[Address(RVA = "0xFDDE8C", Offset = "0xFDDE8C", VA = "0xFDDE8C")]
			set
			{
			}
		}

		[Token(Token = "0x17000102")]
		public AnimationCurve customValueInterpolation
		{
			[Token(Token = "0x6000B49")]
			[Address(RVA = "0xFDDED8", Offset = "0xFDDED8", VA = "0xFDDED8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B4A")]
			[Address(RVA = "0xFDDEF4", Offset = "0xFDDEF4", VA = "0xFDDEF4")]
			set
			{
			}
		}

		[Token(Token = "0x17000103")]
		public AnimationCurve customNormalInterpolation
		{
			[Token(Token = "0x6000B4B")]
			[Address(RVA = "0xFDDF20", Offset = "0xFDDF20", VA = "0xFDDF20")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B4C")]
			[Address(RVA = "0xFDDF3C", Offset = "0xFDDF3C", VA = "0xFDDF3C")]
			set
			{
			}
		}

		[Token(Token = "0x17000104")]
		public int iterations
		{
			[Token(Token = "0x6000B4D")]
			[Address(RVA = "0xFDDF68", Offset = "0xFDDF68", VA = "0xFDDF68")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000105")]
		public double moveStep
		{
			[Token(Token = "0x6000B4E")]
			[Address(RVA = "0xFDDF84", Offset = "0xFDDF84", VA = "0xFDDF84")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000106")]
		public bool isClosed
		{
			[Token(Token = "0x6000B4F")]
			[Address(RVA = "0xFDDFA0", Offset = "0xFDDFA0", VA = "0xFDDFA0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000107")]
		public int pointCount
		{
			[Token(Token = "0x6000B50")]
			[Address(RVA = "0xFDDFBC", Offset = "0xFDDFBC", VA = "0xFDDFBC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000108")]
		public Morph morph
		{
			[Token(Token = "0x6000B51")]
			[Address(RVA = "0xFDDFE0", Offset = "0xFDDFE0", VA = "0xFDDFE0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000109")]
		public NodeLink[] nodeLinks
		{
			[Token(Token = "0x6000B52")]
			[Address(RVA = "0xFDE0F4", Offset = "0xFDE0F4", VA = "0xFDE0F4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700010A")]
		public bool hasMorph
		{
			[Token(Token = "0x6000B53")]
			[Address(RVA = "0xFDE0FC", Offset = "0xFDE0FC", VA = "0xFDE0FC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700010B")]
		public Vector3 position
		{
			[Token(Token = "0x6000B54")]
			[Address(RVA = "0xFDE13C", Offset = "0xFDE13C", VA = "0xFDE13C")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700010C")]
		public Quaternion rotation
		{
			[Token(Token = "0x6000B55")]
			[Address(RVA = "0xFDE174", Offset = "0xFDE174", VA = "0xFDE174")]
			get
			{
				return default(Quaternion);
			}
		}

		[Token(Token = "0x1700010D")]
		public Vector3 scale
		{
			[Token(Token = "0x6000B56")]
			[Address(RVA = "0xFDE1AC", Offset = "0xFDE1AC", VA = "0xFDE1AC")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700010E")]
		public int subscriberCount
		{
			[Token(Token = "0x6000B57")]
			[Address(RVA = "0xFDE1E4", Offset = "0xFDE1E4", VA = "0xFDE1E4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x14000006")]
		public event EmptySplineHandler onRebuild
		{
			[Token(Token = "0x6000B58")]
			[Address(RVA = "0xFDE200", Offset = "0xFDE200", VA = "0xFDE200")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000B59")]
			[Address(RVA = "0xFDE29C", Offset = "0xFDE29C", VA = "0xFDE29C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000B5A")]
		[Address(RVA = "0xFDE338", Offset = "0xFDE338", VA = "0xFDE338")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000B5B")]
		[Address(RVA = "0xFDE3B8", Offset = "0xFDE3B8", VA = "0xFDE3B8")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000B5C")]
		[Address(RVA = "0xFDE5E0", Offset = "0xFDE5E0", VA = "0xFDE5E0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B5D")]
		[Address(RVA = "0xFDE3E8", Offset = "0xFDE3E8", VA = "0xFDE3E8")]
		private void Run()
		{
		}

		[Token(Token = "0x6000B5E")]
		[Address(RVA = "0xFDE7A8", Offset = "0xFDE7A8", VA = "0xFDE7A8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000B5F")]
		[Address(RVA = "0xFDE78C", Offset = "0xFDE78C", VA = "0xFDE78C")]
		public void ResampleTransform()
		{
		}

		[Token(Token = "0x6000B60")]
		[Address(RVA = "0xFDE7C0", Offset = "0xFDE7C0", VA = "0xFDE7C0")]
		public void Subscribe(SplineUser input)
		{
		}

		[Token(Token = "0x6000B61")]
		[Address(RVA = "0xFDE9B4", Offset = "0xFDE9B4", VA = "0xFDE9B4")]
		public void Unsubscribe(SplineUser input)
		{
		}

		[Token(Token = "0x6000B62")]
		[Address(RVA = "0xFDEB94", Offset = "0xFDEB94", VA = "0xFDEB94")]
		public bool IsSubscribed(SplineUser user)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B63")]
		[Address(RVA = "0xFDEC4C", Offset = "0xFDEC4C", VA = "0xFDEC4C")]
		public SplineUser[] GetSubscribers()
		{
			return null;
		}

		[Token(Token = "0x6000B64")]
		[Address(RVA = "0xFDEC54", Offset = "0xFDEC54", VA = "0xFDEC54")]
		public void AddNodeLink(Node node, int pointIndex)
		{
		}

		[Token(Token = "0x6000B65")]
		[Address(RVA = "0xFDF13C", Offset = "0xFDF13C", VA = "0xFDF13C")]
		public void RemoveNodeLink(int pointIndex)
		{
		}

		[Token(Token = "0x6000B66")]
		[Address(RVA = "0xFDF63C", Offset = "0xFDF63C", VA = "0xFDF63C")]
		public SplinePoint[] GetPoints(Space getSpace = Space.World)
		{
			return null;
		}

		[Token(Token = "0x6000B67")]
		[Address(RVA = "0xFDF9B4", Offset = "0xFDF9B4", VA = "0xFDF9B4")]
		public SplinePoint GetPoint(int index, Space getSpace = Space.World)
		{
			return default(SplinePoint);
		}

		[Token(Token = "0x6000B68")]
		[Address(RVA = "0xFDFB54", Offset = "0xFDFB54", VA = "0xFDFB54")]
		public Vector3 GetPointPosition(int index, Space getSpace = Space.World)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000B69")]
		[Address(RVA = "0xFDFBD4", Offset = "0xFDFBD4", VA = "0xFDFBD4")]
		public Vector3 GetPointNormal(int index, Space getSpace = Space.World)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000B6A")]
		[Address(RVA = "0xFDFCF8", Offset = "0xFDFCF8", VA = "0xFDFCF8")]
		public Vector3 GetPointTangent(int index, Space getSpace = Space.World)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000B6B")]
		[Address(RVA = "0xFDFD78", Offset = "0xFDFD78", VA = "0xFDFD78")]
		public Vector3 GetPointTangent2(int index, Space getSpace = Space.World)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000B6C")]
		[Address(RVA = "0xFDFDF8", Offset = "0xFDFDF8", VA = "0xFDFDF8")]
		public float GetPointSize(int index, Space getSpace = Space.World)
		{
			return default(float);
		}

		[Token(Token = "0x6000B6D")]
		[Address(RVA = "0xFDFE34", Offset = "0xFDFE34", VA = "0xFDFE34")]
		public Color GetPointColor(int index, Space getSpace = Space.World)
		{
			return default(Color);
		}

		[Token(Token = "0x6000B6E")]
		[Address(RVA = "0xFDFE74", Offset = "0xFDFE74", VA = "0xFDFE74")]
		public void SetPoints(SplinePoint[] points, Space setSpace = Space.World)
		{
		}

		[Token(Token = "0x6000B6F")]
		[Address(RVA = "0xFE0668", Offset = "0xFE0668", VA = "0xFE0668")]
		public void SetPointPosition(int index, Vector3 pos, Space setSpace = Space.World)
		{
		}

		[Token(Token = "0x6000B70")]
		[Address(RVA = "0xFE0918", Offset = "0xFE0918", VA = "0xFE0918")]
		public void SetPointTangents(int index, Vector3 tan1, Vector3 tan2, Space setSpace = Space.World)
		{
		}

		[Token(Token = "0x6000B71")]
		[Address(RVA = "0xFE0B34", Offset = "0xFE0B34", VA = "0xFE0B34")]
		public void SetPointNormal(int index, Vector3 nrm, Space setSpace = Space.World)
		{
		}

		[Token(Token = "0x6000B72")]
		[Address(RVA = "0xFE0C80", Offset = "0xFE0C80", VA = "0xFE0C80")]
		public void SetPointSize(int index, float size)
		{
		}

		[Token(Token = "0x6000B73")]
		[Address(RVA = "0xFE0D48", Offset = "0xFE0D48", VA = "0xFE0D48")]
		public void SetPointColor(int index, Color color)
		{
		}

		[Token(Token = "0x6000B74")]
		[Address(RVA = "0xFE0E7C", Offset = "0xFE0E7C", VA = "0xFE0E7C")]
		public void SetPoint(int index, SplinePoint point, Space setSpace = Space.World)
		{
		}

		[Token(Token = "0x6000B75")]
		[Address(RVA = "0xFE07B4", Offset = "0xFE07B4", VA = "0xFE07B4")]
		private void AppendPoints(int count)
		{
		}

		[Token(Token = "0x6000B76")]
		[Address(RVA = "0xFE11B0", Offset = "0xFE11B0", VA = "0xFE11B0")]
		public double GetPointPercent(int pointIndex)
		{
			return default(double);
		}

		[Token(Token = "0x6000B77")]
		[Address(RVA = "0xFE11D8", Offset = "0xFE11D8", VA = "0xFE11D8")]
		public Vector3 EvaluatePosition(double percent)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000B78")]
		[Address(RVA = "0xFE1210", Offset = "0xFE1210", VA = "0xFE1210")]
		public SplineResult Evaluate(double percent)
		{
			return null;
		}

		[Token(Token = "0x6000B79")]
		[Address(RVA = "0xFE12DC", Offset = "0xFE12DC", VA = "0xFE12DC")]
		public SplineResult Evaluate(int pointIndex)
		{
			return null;
		}

		[Token(Token = "0x6000B7A")]
		[Address(RVA = "0xFE1374", Offset = "0xFE1374", VA = "0xFE1374")]
		public void Evaluate(SplineResult result, int pointIndex)
		{
		}

		[Token(Token = "0x6000B7B")]
		[Address(RVA = "0xFE128C", Offset = "0xFE128C", VA = "0xFE128C")]
		public void Evaluate(SplineResult result, double percent)
		{
		}

		[Token(Token = "0x6000B7C")]
		[Address(RVA = "0xFE1438", Offset = "0xFE1438", VA = "0xFE1438")]
		public void Evaluate(ref SplineResult[] samples, double from = 0.0, double to = 1.0)
		{
		}

		[Token(Token = "0x6000B7D")]
		[Address(RVA = "0xFE14B4", Offset = "0xFE14B4", VA = "0xFE14B4")]
		public void EvaluatePositions(ref Vector3[] positions, double from = 0.0, double to = 1.0)
		{
		}

		[Token(Token = "0x6000B7E")]
		[Address(RVA = "0xFE1560", Offset = "0xFE1560", VA = "0xFE1560")]
		public double Travel(double start, float distance, Spline.Direction direction)
		{
			return default(double);
		}

		[Token(Token = "0x6000B7F")]
		[Address(RVA = "0xFE13B8", Offset = "0xFE13B8", VA = "0xFE13B8")]
		private void TransformResult(SplineResult result)
		{
		}

		[Token(Token = "0x6000B80")]
		[Address(RVA = "0xFDDE18", Offset = "0xFDDE18", VA = "0xFDDE18")]
		public void Rebuild()
		{
		}

		[Token(Token = "0x6000B81")]
		[Address(RVA = "0xFE17C0", Offset = "0xFE17C0", VA = "0xFE17C0")]
		public void RebuildImmediate()
		{
		}

		[Token(Token = "0x6000B82")]
		[Address(RVA = "0xFE1978", Offset = "0xFE1978", VA = "0xFE1978")]
		private void RemoveSubscriber(int index)
		{
		}

		[Token(Token = "0x6000B83")]
		[Address(RVA = "0xFDE444", Offset = "0xFDE444", VA = "0xFDE444")]
		private void RebuildOnUpdate()
		{
		}

		[Token(Token = "0x6000B84")]
		[Address(RVA = "0xFE1AA4", Offset = "0xFE1AA4", VA = "0xFE1AA4")]
		public void RebuildConnectedUsers()
		{
		}

		[Token(Token = "0x6000B85")]
		[Address(RVA = "0xFE1AA8", Offset = "0xFE1AA8", VA = "0xFE1AA8")]
		private void RebuildUser(int index)
		{
		}

		[Token(Token = "0x6000B86")]
		[Address(RVA = "0xFE1BB8", Offset = "0xFE1BB8", VA = "0xFE1BB8")]
		public double Project(Vector3 point, int subdivide = 3, double from = 0.0, double to = 1.0)
		{
			return default(double);
		}

		[Token(Token = "0x6000B87")]
		[Address(RVA = "0xFE026C", Offset = "0xFE026C", VA = "0xFE026C")]
		public void Break()
		{
		}

		[Token(Token = "0x6000B88")]
		[Address(RVA = "0xFE1C14", Offset = "0xFE1C14", VA = "0xFE1C14")]
		public void Break(int at)
		{
		}

		[Token(Token = "0x6000B89")]
		[Address(RVA = "0xFE1C64", Offset = "0xFE1C64", VA = "0xFE1C64")]
		public void Close()
		{
		}

		[Token(Token = "0x6000B8A")]
		[Address(RVA = "0xFE1CA4", Offset = "0xFE1CA4", VA = "0xFE1CA4")]
		public void ConvertToBezier()
		{
		}

		[Token(Token = "0x6000B8B")]
		[Address(RVA = "0xFE1CC0", Offset = "0xFE1CC0", VA = "0xFE1CC0")]
		public float CalculateLength(double from = 0.0, double to = 1.0, double resolution = 1.0)
		{
			return default(float);
		}

		[Token(Token = "0x6000B8C")]
		[Address(RVA = "0xFE1E40", Offset = "0xFE1E40", VA = "0xFE1E40")]
		public bool Raycast(out RaycastHit hit, out double hitPercent, LayerMask layerMask, double resolution = 1.0, double from = 0.0, double to = 1.0, QueryTriggerInteraction hitTriggers = QueryTriggerInteraction.UseGlobal)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B8D")]
		[Address(RVA = "0xFE1FF8", Offset = "0xFE1FF8", VA = "0xFE1FF8")]
		public bool RaycastAll(out RaycastHit[] hits, out double[] hitPercents, LayerMask layerMask, double resolution = 1.0, double from = 0.0, double to = 1.0, QueryTriggerInteraction hitTriggers = QueryTriggerInteraction.UseGlobal)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B8E")]
		[Address(RVA = "0xFE24AC", Offset = "0xFE24AC", VA = "0xFE24AC")]
		public int[] GetAvailableNodeLinksAtPosition(double percent, Spline.Direction direction)
		{
			return null;
		}

		[Token(Token = "0x6000B8F")]
		[Address(RVA = "0xFE2638", Offset = "0xFE2638", VA = "0xFE2638")]
		public void GetConnectedComputers(List<SplineComputer> computers, List<int> connectionIndices, List<int> connectedIndices, double percent, Spline.Direction direction, bool includeEqual)
		{
		}

		[Token(Token = "0x6000B90")]
		[Address(RVA = "0xFE2AB8", Offset = "0xFE2AB8", VA = "0xFE2AB8")]
		public void SetMorphState(int index)
		{
		}

		[Token(Token = "0x6000B91")]
		[Address(RVA = "0xFE2B98", Offset = "0xFE2B98", VA = "0xFE2B98")]
		public void SetMorphState(string morphName)
		{
		}

		[Token(Token = "0x6000B92")]
		[Address(RVA = "0xFE2DE8", Offset = "0xFE2DE8", VA = "0xFE2DE8")]
		public void SetMorphState(int index, float percent)
		{
		}

		[Token(Token = "0x6000B93")]
		[Address(RVA = "0xFE2EEC", Offset = "0xFE2EEC", VA = "0xFE2EEC")]
		public void SetMorphState(string morphName, float percent)
		{
		}

		[Token(Token = "0x6000B94")]
		[Address(RVA = "0xFE3048", Offset = "0xFE3048", VA = "0xFE3048")]
		public void SetMorphState(float percent)
		{
		}

		[Token(Token = "0x6000B95")]
		[Address(RVA = "0xFE30EC", Offset = "0xFE30EC", VA = "0xFE30EC")]
		public List<SplineComputer> GetConnectedComputers()
		{
			return null;
		}

		[Token(Token = "0x6000B96")]
		[Address(RVA = "0xFE3200", Offset = "0xFE3200", VA = "0xFE3200")]
		private void GetConnectedComputers(ref List<SplineComputer> computers)
		{
		}

		[Token(Token = "0x6000B97")]
		[Address(RVA = "0xFDF2A8", Offset = "0xFDF2A8", VA = "0xFDF2A8")]
		private void RemoveNodeLinkAt(int index)
		{
		}

		[Token(Token = "0x6000B98")]
		[Address(RVA = "0xFE085C", Offset = "0xFE085C", VA = "0xFE085C")]
		private void SetNodeForPoint(int index, SplinePoint worldPoint)
		{
		}

		[Token(Token = "0x6000B99")]
		[Address(RVA = "0xFE042C", Offset = "0xFE042C", VA = "0xFE042C")]
		private void UpdateConnectedNodes(SplinePoint[] worldPoints)
		{
		}

		[Token(Token = "0x6000B9A")]
		[Address(RVA = "0xFDE60C", Offset = "0xFDE60C", VA = "0xFDE60C")]
		private void UpdateConnectedNodes()
		{
		}

		[Token(Token = "0x6000B9B")]
		[Address(RVA = "0xFDF7FC", Offset = "0xFDF7FC", VA = "0xFDF7FC")]
		public Vector3 TransformPoint(Vector3 point)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000B9C")]
		[Address(RVA = "0xFE0274", Offset = "0xFE0274", VA = "0xFE0274")]
		public Vector3 InverseTransformPoint(Vector3 point)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000B9D")]
		[Address(RVA = "0xFDF8D8", Offset = "0xFDF8D8", VA = "0xFDF8D8")]
		public Vector3 TransformDirection(Vector3 direction)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000B9E")]
		[Address(RVA = "0xFE0350", Offset = "0xFE0350", VA = "0xFE0350")]
		public Vector3 InverseTransformDirection(Vector3 direction)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000B9F")]
		[Address(RVA = "0xFE34D8", Offset = "0xFE34D8", VA = "0xFE34D8")]
		public SplineComputer()
		{
		}
	}
	[Token(Token = "0x2000225")]
	public delegate void SplineReachHandler();
	[Token(Token = "0x2000226")]
	[AddComponentMenu("Dreamteck/Splines/Spline Follower")]
	public class SplineFollower : SplineTracer
	{
		[Token(Token = "0x2000227")]
		public enum FollowMode
		{
			[Token(Token = "0x4000AA0")]
			Uniform,
			[Token(Token = "0x4000AA1")]
			Time
		}

		[Token(Token = "0x2000228")]
		public enum Wrap
		{
			[Token(Token = "0x4000AA3")]
			Default,
			[Token(Token = "0x4000AA4")]
			Loop,
			[Token(Token = "0x4000AA5")]
			PingPong
		}

		[Token(Token = "0x4000A93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[HideInInspector]
		public Wrap wrapMode;

		[Token(Token = "0x4000A94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		[HideInInspector]
		public FollowMode followMode;

		[Token(Token = "0x4000A95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[HideInInspector]
		public bool autoStartPosition;

		[Token(Token = "0x4000A96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x111")]
		[HideInInspector]
		public bool autoFollow;

		[Token(Token = "0x4000A99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[HideInInspector]
		[SerializeField]
		private float _followSpeed;

		[Token(Token = "0x4000A9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		[HideInInspector]
		[SerializeField]
		private float _followDuration;

		[Token(Token = "0x4000A9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private double lastClippedPercent;

		[Token(Token = "0x4000A9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private SplineResult from;

		[Token(Token = "0x4000A9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private SplineResult to;

		[Token(Token = "0x4000A9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private bool followStarted;

		[Token(Token = "0x1700010F")]
		public float followSpeed
		{
			[Token(Token = "0x6000BB7")]
			[Address(RVA = "0xFE40E8", Offset = "0xFE40E8", VA = "0xFE40E8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000BB8")]
			[Address(RVA = "0xFE40F0", Offset = "0xFE40F0", VA = "0xFE40F0")]
			set
			{
			}
		}

		[Token(Token = "0x17000110")]
		public float followDuration
		{
			[Token(Token = "0x6000BB9")]
			[Address(RVA = "0xFE410C", Offset = "0xFE410C", VA = "0xFE410C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000BBA")]
			[Address(RVA = "0xFE4114", Offset = "0xFE4114", VA = "0xFE4114")]
			set
			{
			}
		}

		[Token(Token = "0x17000111")]
		[Obsolete("Deprecated in 1.0.8. Use result instead")]
		public SplineResult followResult
		{
			[Token(Token = "0x6000BBB")]
			[Address(RVA = "0xFE4130", Offset = "0xFE4130", VA = "0xFE4130")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000112")]
		[Obsolete("Deprecated in 1.0.8. Use offsettedResult instead")]
		public SplineResult offsettedFollowResult
		{
			[Token(Token = "0x6000BBC")]
			[Address(RVA = "0xFE4138", Offset = "0xFE4138", VA = "0xFE4138")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x14000007")]
		public event SplineReachHandler onEndReached
		{
			[Token(Token = "0x6000BBD")]
			[Address(RVA = "0xFE4140", Offset = "0xFE4140", VA = "0xFE4140")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000BBE")]
			[Address(RVA = "0xFE41E0", Offset = "0xFE41E0", VA = "0xFE41E0")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000008")]
		public event SplineReachHandler onBeginningReached
		{
			[Token(Token = "0x6000BBF")]
			[Address(RVA = "0xFE4280", Offset = "0xFE4280", VA = "0xFE4280")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000BC0")]
			[Address(RVA = "0xFE4320", Offset = "0xFE4320", VA = "0xFE4320")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000BC1")]
		[Address(RVA = "0xFE43C0", Offset = "0xFE43C0", VA = "0xFE43C0", Slot = "29")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000BC2")]
		[Address(RVA = "0xFE444C", Offset = "0xFE444C", VA = "0xFE444C", Slot = "19")]
		protected override void LateRun()
		{
		}

		[Token(Token = "0x6000BC3")]
		[Address(RVA = "0xFE455C", Offset = "0xFE455C", VA = "0xFE455C", Slot = "21")]
		protected override void PostBuild()
		{
		}

		[Token(Token = "0x6000BC4")]
		[Address(RVA = "0xFE4478", Offset = "0xFE4478", VA = "0xFE4478")]
		private void AutoFollow()
		{
		}

		[Token(Token = "0x6000BC5")]
		[Address(RVA = "0xFE541C", Offset = "0xFE541C", VA = "0xFE541C")]
		public void Restart(double startPosition = 0.0)
		{
		}

		[Token(Token = "0x6000BC6")]
		[Address(RVA = "0xFE545C", Offset = "0xFE545C", VA = "0xFE545C", Slot = "30")]
		public override void SetPercent(double percent, bool checkTriggers = false)
		{
		}

		[Token(Token = "0x6000BC7")]
		[Address(RVA = "0xFE54C0", Offset = "0xFE54C0", VA = "0xFE54C0", Slot = "31")]
		public override void SetDistance(float distance, bool checkTriggers = false)
		{
		}

		[Token(Token = "0x6000BC8")]
		[Address(RVA = "0xFE5074", Offset = "0xFE5074", VA = "0xFE5074")]
		public void Move(double percent)
		{
		}

		[Token(Token = "0x6000BC9")]
		[Address(RVA = "0xFE45E4", Offset = "0xFE45E4", VA = "0xFE45E4")]
		public void Move(float distance)
		{
		}

		[Token(Token = "0x6000BCA")]
		[Address(RVA = "0xFE5540", Offset = "0xFE5540", VA = "0xFE5540")]
		public SplineFollower()
		{
		}
	}
	[Token(Token = "0x2000229")]
	[AddComponentMenu("Dreamteck/Splines/Spline Mesh")]
	[RequireComponent(typeof(MeshRenderer))]
	[RequireComponent(typeof(MeshFilter))]
	public class SplineMesh : MeshGenerator
	{
		[Serializable]
		[Token(Token = "0x200022A")]
		public class Channel
		{
			[Token(Token = "0x200022B")]
			public delegate float FloatHandler(double percent);

			[Token(Token = "0x200022C")]
			public delegate Vector2 Vector2Handler(double percent);

			[Token(Token = "0x200022D")]
			public delegate Vector3 Vector3Handler(double percent);

			[Token(Token = "0x200022E")]
			public delegate Quaternion QuaternionHandler(double percent);

			[Token(Token = "0x200022F")]
			public enum Type
			{
				[Token(Token = "0x4000AD5")]
				Extrude,
				[Token(Token = "0x4000AD6")]
				Place
			}

			[Token(Token = "0x2000230")]
			public enum UVOverride
			{
				[Token(Token = "0x4000AD8")]
				None,
				[Token(Token = "0x4000AD9")]
				ClampU,
				[Token(Token = "0x4000ADA")]
				ClampV,
				[Token(Token = "0x4000ADB")]
				UniformU,
				[Token(Token = "0x4000ADC")]
				UniformV
			}

			[Serializable]
			[Token(Token = "0x2000231")]
			public class MeshDefinition
			{
				[Token(Token = "0x2000232")]
				public enum MirrorMethod
				{
					[Token(Token = "0x4000AF4")]
					None,
					[Token(Token = "0x4000AF5")]
					X,
					[Token(Token = "0x4000AF6")]
					Y,
					[Token(Token = "0x4000AF7")]
					Z
				}

				[Serializable]
				[Token(Token = "0x2000233")]
				public class Submesh
				{
					[Token(Token = "0x4000AF8")]
					[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
					public int[] triangles;

					[Token(Token = "0x6000C59")]
					[Address(RVA = "0xFEC728", Offset = "0xFEC728", VA = "0xFEC728")]
					public Submesh()
					{
					}

					[Token(Token = "0x6000C5A")]
					[Address(RVA = "0xFEC78C", Offset = "0xFEC78C", VA = "0xFEC78C")]
					public Submesh(int[] input)
					{
					}
				}

				[Serializable]
				[Token(Token = "0x2000234")]
				public class VertexGroup
				{
					[Token(Token = "0x4000AF9")]
					[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
					public float value;

					[Token(Token = "0x4000AFA")]
					[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
					public double percent;

					[Token(Token = "0x4000AFB")]
					[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
					public int[] ids;

					[Token(Token = "0x6000C5B")]
					[Address(RVA = "0xFEC838", Offset = "0xFEC838", VA = "0xFEC838")]
					public VertexGroup(float val, double perc, int[] vertIds)
					{
					}

					[Token(Token = "0x6000C5C")]
					[Address(RVA = "0xFEC880", Offset = "0xFEC880", VA = "0xFEC880")]
					public void AddId(int id)
					{
					}
				}

				[Token(Token = "0x4000ADD")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[SerializeField]
				[HideInInspector]
				internal Vector3[] vertices;

				[Token(Token = "0x4000ADE")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				[SerializeField]
				[HideInInspector]
				internal Vector3[] normals;

				[Token(Token = "0x4000ADF")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
				[SerializeField]
				[HideInInspector]
				internal Vector4[] tangents;

				[Token(Token = "0x4000AE0")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
				[SerializeField]
				[HideInInspector]
				internal Color[] colors;

				[Token(Token = "0x4000AE1")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
				[SerializeField]
				[HideInInspector]
				internal Vector2[] uv;

				[Token(Token = "0x4000AE2")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
				[SerializeField]
				[HideInInspector]
				internal Vector2[] uv2;

				[Token(Token = "0x4000AE3")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
				[SerializeField]
				[HideInInspector]
				internal Vector2[] uv3;

				[Token(Token = "0x4000AE4")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
				[HideInInspector]
				[SerializeField]
				internal Vector2[] uv4;

				[Token(Token = "0x4000AE5")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
				[SerializeField]
				[HideInInspector]
				internal int[] triangles;

				[Token(Token = "0x4000AE6")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
				[SerializeField]
				[HideInInspector]
				internal List<Submesh> subMeshes;

				[Token(Token = "0x4000AE7")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
				[SerializeField]
				[HideInInspector]
				internal TS_Bounds bounds;

				[Token(Token = "0x4000AE8")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
				[HideInInspector]
				[SerializeField]
				internal List<VertexGroup> vertexGroups;

				[Token(Token = "0x4000AE9")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
				[HideInInspector]
				[SerializeField]
				private Mesh _mesh;

				[Token(Token = "0x4000AEA")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
				[SerializeField]
				[HideInInspector]
				private Vector3 _rotation;

				[Token(Token = "0x4000AEB")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
				[SerializeField]
				[HideInInspector]
				private Vector2 _offset;

				[Token(Token = "0x4000AEC")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
				[SerializeField]
				[HideInInspector]
				private Vector3 _scale;

				[Token(Token = "0x4000AED")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
				[SerializeField]
				[HideInInspector]
				private Vector2 _uvScale;

				[Token(Token = "0x4000AEE")]
				[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
				[HideInInspector]
				[SerializeField]
				private Vector2 _uvOffset;

				[Token(Token = "0x4000AEF")]
				[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
				[SerializeField]
				[HideInInspector]
				private float _uvRotation;

				[Token(Token = "0x4000AF0")]
				[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
				[HideInInspector]
				[SerializeField]
				private MirrorMethod _mirror;

				[Token(Token = "0x4000AF1")]
				[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
				[HideInInspector]
				[SerializeField]
				private bool _flipFaces;

				[Token(Token = "0x4000AF2")]
				[Il2CppDummyDll.FieldOffset(Offset = "0xB1")]
				[HideInInspector]
				[SerializeField]
				private bool _doubleSided;

				[Token(Token = "0x17000132")]
				public Mesh mesh
				{
					[Token(Token = "0x6000C39")]
					[Address(RVA = "0xFEABF8", Offset = "0xFEABF8", VA = "0xFEABF8")]
					get
					{
						return null;
					}
					[Token(Token = "0x6000C3A")]
					[Address(RVA = "0xFEAC00", Offset = "0xFEAC00", VA = "0xFEAC00")]
					set
					{
					}
				}

				[Token(Token = "0x17000133")]
				public Vector3 rotation
				{
					[Token(Token = "0x6000C3B")]
					[Address(RVA = "0xFEAC9C", Offset = "0xFEAC9C", VA = "0xFEAC9C")]
					get
					{
						return default(Vector3);
					}
					[Token(Token = "0x6000C3C")]
					[Address(RVA = "0xFEACA8", Offset = "0xFEACA8", VA = "0xFEACA8")]
					set
					{
					}
				}

				[Token(Token = "0x17000134")]
				public Vector2 offset
				{
					[Token(Token = "0x6000C3D")]
					[Address(RVA = "0xFEACF0", Offset = "0xFEACF0", VA = "0xFEACF0")]
					get
					{
						return default(Vector2);
					}
					[Token(Token = "0x6000C3E")]
					[Address(RVA = "0xFEACF8", Offset = "0xFEACF8", VA = "0xFEACF8")]
					set
					{
					}
				}

				[Token(Token = "0x17000135")]
				public Vector3 scale
				{
					[Token(Token = "0x6000C3F")]
					[Address(RVA = "0xFEAD2C", Offset = "0xFEAD2C", VA = "0xFEAD2C")]
					get
					{
						return default(Vector3);
					}
					[Token(Token = "0x6000C40")]
					[Address(RVA = "0xFEAD38", Offset = "0xFEAD38", VA = "0xFEAD38")]
					set
					{
					}
				}

				[Token(Token = "0x17000136")]
				public Vector2 uvScale
				{
					[Token(Token = "0x6000C41")]
					[Address(RVA = "0xFEAD80", Offset = "0xFEAD80", VA = "0xFEAD80")]
					get
					{
						return default(Vector2);
					}
					[Token(Token = "0x6000C42")]
					[Address(RVA = "0xFEAD88", Offset = "0xFEAD88", VA = "0xFEAD88")]
					set
					{
					}
				}

				[Token(Token = "0x17000137")]
				public Vector2 uvOffset
				{
					[Token(Token = "0x6000C43")]
					[Address(RVA = "0xFEADBC", Offset = "0xFEADBC", VA = "0xFEADBC")]
					get
					{
						return default(Vector2);
					}
					[Token(Token = "0x6000C44")]
					[Address(RVA = "0xFEADC4", Offset = "0xFEADC4", VA = "0xFEADC4")]
					set
					{
					}
				}

				[Token(Token = "0x17000138")]
				public float uvRotation
				{
					[Token(Token = "0x6000C45")]
					[Address(RVA = "0xFEADF8", Offset = "0xFEADF8", VA = "0xFEADF8")]
					get
					{
						return default(float);
					}
					[Token(Token = "0x6000C46")]
					[Address(RVA = "0xFEAE00", Offset = "0xFEAE00", VA = "0xFEAE00")]
					set
					{
					}
				}

				[Token(Token = "0x17000139")]
				public MirrorMethod mirror
				{
					[Token(Token = "0x6000C47")]
					[Address(RVA = "0xFEAE18", Offset = "0xFEAE18", VA = "0xFEAE18")]
					get
					{
						return default(MirrorMethod);
					}
					[Token(Token = "0x6000C48")]
					[Address(RVA = "0xFEAE20", Offset = "0xFEAE20", VA = "0xFEAE20")]
					set
					{
					}
				}

				[Token(Token = "0x1700013A")]
				public bool flipFaces
				{
					[Token(Token = "0x6000C49")]
					[Address(RVA = "0xFEAE38", Offset = "0xFEAE38", VA = "0xFEAE38")]
					get
					{
						return default(bool);
					}
					[Token(Token = "0x6000C4A")]
					[Address(RVA = "0xFEAE40", Offset = "0xFEAE40", VA = "0xFEAE40")]
					set
					{
					}
				}

				[Token(Token = "0x1700013B")]
				public bool doubleSided
				{
					[Token(Token = "0x6000C4B")]
					[Address(RVA = "0xFEAE5C", Offset = "0xFEAE5C", VA = "0xFEAE5C")]
					get
					{
						return default(bool);
					}
					[Token(Token = "0x6000C4C")]
					[Address(RVA = "0xFEAE64", Offset = "0xFEAE64", VA = "0xFEAE64")]
					set
					{
					}
				}

				[Token(Token = "0x6000C4D")]
				[Address(RVA = "0xFE9218", Offset = "0xFE9218", VA = "0xFE9218")]
				internal MeshDefinition Copy()
				{
					return null;
				}

				[Token(Token = "0x6000C4E")]
				[Address(RVA = "0xFE8BA0", Offset = "0xFE8BA0", VA = "0xFE8BA0")]
				public MeshDefinition(Mesh input)
				{
				}

				[Token(Token = "0x6000C4F")]
				[Address(RVA = "0xFE9C2C", Offset = "0xFE9C2C", VA = "0xFE9C2C")]
				public void Refresh()
				{
				}

				[Token(Token = "0x6000C50")]
				[Address(RVA = "0xFEB558", Offset = "0xFEB558", VA = "0xFEB558")]
				private void FlipFaces()
				{
				}

				[Token(Token = "0x6000C51")]
				[Address(RVA = "0xFEB208", Offset = "0xFEB208", VA = "0xFEB208")]
				private void DoubleSided()
				{
				}

				[Token(Token = "0x6000C52")]
				[Address(RVA = "0xFE7544", Offset = "0xFE7544", VA = "0xFE7544")]
				public void Write(TS_Mesh target, int forceMaterialId = -1)
				{
				}

				[Token(Token = "0x6000C53")]
				[Address(RVA = "0xFEBAB8", Offset = "0xFEBAB8", VA = "0xFEBAB8")]
				private void CalculateBounds()
				{
				}

				[Token(Token = "0x6000C54")]
				[Address(RVA = "0xFEAE80", Offset = "0xFEAE80", VA = "0xFEAE80")]
				private void Mirror()
				{
				}

				[Token(Token = "0x6000C55")]
				[Address(RVA = "0xFEB6EC", Offset = "0xFEB6EC", VA = "0xFEB6EC")]
				private void TransformVertices()
				{
				}

				[Token(Token = "0x6000C56")]
				[Address(RVA = "0xFEBBD4", Offset = "0xFEBBD4", VA = "0xFEBBD4")]
				private void GroupVertices()
				{
				}

				[Token(Token = "0x6000C57")]
				[Address(RVA = "0xFEC634", Offset = "0xFEC634", VA = "0xFEC634")]
				private int FindInsertIndex(Vector3 pos, float value)
				{
					return default(int);
				}

				[Token(Token = "0x6000C58")]
				[Address(RVA = "0xFEC084", Offset = "0xFEC084", VA = "0xFEC084")]
				private void CalculateTangents()
				{
				}
			}

			[Token(Token = "0x4000AAD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string name;

			[Token(Token = "0x4000AAE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private System.Random iterationRandom;

			[Token(Token = "0x4000AAF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[SerializeField]
			[HideInInspector]
			private int _iterationSeed;

			[Token(Token = "0x4000AB0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[SerializeField]
			[HideInInspector]
			private int _offsetSeed;

			[Token(Token = "0x4000AB1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private System.Random offsetRandom;

			[Token(Token = "0x4000AB2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Vector2Handler _offsetHandler;

			[Token(Token = "0x4000AB3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[SerializeField]
			[HideInInspector]
			private int _rotationSeed;

			[Token(Token = "0x4000AB4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private System.Random rotationRandom;

			[Token(Token = "0x4000AB5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private QuaternionHandler _placeRotationHandler;

			[Token(Token = "0x4000AB6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private FloatHandler _extrudeRotationHandler;

			[Token(Token = "0x4000AB7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[HideInInspector]
			[SerializeField]
			private int _scaleSeed;

			[Token(Token = "0x4000AB8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private System.Random scaleRandom;

			[Token(Token = "0x4000AB9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			private Vector3Handler _scaleHandler;

			[Token(Token = "0x4000ABA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			[SerializeField]
			internal SplineMesh owner;

			[Token(Token = "0x4000ABB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			[SerializeField]
			[HideInInspector]
			private List<MeshDefinition> meshes;

			[Token(Token = "0x4000ABC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			[SerializeField]
			[HideInInspector]
			private double _clipFrom;

			[Token(Token = "0x4000ABD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			[HideInInspector]
			[SerializeField]
			private double _clipTo;

			[Token(Token = "0x4000ABE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			[HideInInspector]
			[SerializeField]
			private bool _randomOrder;

			[Token(Token = "0x4000ABF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
			[SerializeField]
			[HideInInspector]
			private UVOverride _overrideUVs;

			[Token(Token = "0x4000AC0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			[SerializeField]
			[HideInInspector]
			private Vector2 _uvScale;

			[Token(Token = "0x4000AC1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			[SerializeField]
			[HideInInspector]
			private Vector2 _uvOffset;

			[Token(Token = "0x4000AC2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			[SerializeField]
			[HideInInspector]
			private bool _overrideNormal;

			[Token(Token = "0x4000AC3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
			[HideInInspector]
			[SerializeField]
			private Vector3 _customNormal;

			[Token(Token = "0x4000AC4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
			[SerializeField]
			[HideInInspector]
			private Type _type;

			[Token(Token = "0x4000AC5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
			[SerializeField]
			[HideInInspector]
			private int _count;

			[Token(Token = "0x4000AC6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			[SerializeField]
			[HideInInspector]
			private double _spacing;

			[Token(Token = "0x4000AC7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
			[SerializeField]
			[HideInInspector]
			private bool _randomRotation;

			[Token(Token = "0x4000AC8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
			[HideInInspector]
			[SerializeField]
			private Vector3 _minRotation;

			[Token(Token = "0x4000AC9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
			[HideInInspector]
			[SerializeField]
			private Vector3 _maxRotation;

			[Token(Token = "0x4000ACA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
			[HideInInspector]
			[SerializeField]
			private bool _randomOffset;

			[Token(Token = "0x4000ACB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
			[HideInInspector]
			[SerializeField]
			private Vector2 _minOffset;

			[Token(Token = "0x4000ACC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
			[SerializeField]
			[HideInInspector]
			private Vector2 _maxOffset;

			[Token(Token = "0x4000ACD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
			[SerializeField]
			[HideInInspector]
			private bool _randomScale;

			[Token(Token = "0x4000ACE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF9")]
			[SerializeField]
			[HideInInspector]
			private bool _uniformRandomScale;

			[Token(Token = "0x4000ACF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
			[HideInInspector]
			[SerializeField]
			private Vector3 _minScale;

			[Token(Token = "0x4000AD0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
			[HideInInspector]
			[SerializeField]
			private Vector3 _maxScale;

			[Token(Token = "0x4000AD1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
			private int iterator;

			[Token(Token = "0x4000AD2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
			[HideInInspector]
			[SerializeField]
			private bool _overrideMaterialID;

			[Token(Token = "0x4000AD3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
			[HideInInspector]
			[SerializeField]
			private int _targetMaterialID;

			[Token(Token = "0x17000113")]
			public double clipFrom
			{
				[Token(Token = "0x6000BD8")]
				[Address(RVA = "0xFE83DC", Offset = "0xFE83DC", VA = "0xFE83DC")]
				get
				{
					return default(double);
				}
				[Token(Token = "0x6000BD9")]
				[Address(RVA = "0xFE83E4", Offset = "0xFE83E4", VA = "0xFE83E4")]
				set
				{
				}
			}

			[Token(Token = "0x17000114")]
			public double clipTo
			{
				[Token(Token = "0x6000BDA")]
				[Address(RVA = "0xFE8488", Offset = "0xFE8488", VA = "0xFE8488")]
				get
				{
					return default(double);
				}
				[Token(Token = "0x6000BDB")]
				[Address(RVA = "0xFE8490", Offset = "0xFE8490", VA = "0xFE8490")]
				set
				{
				}
			}

			[Token(Token = "0x17000115")]
			public bool randomOffset
			{
				[Token(Token = "0x6000BDC")]
				[Address(RVA = "0xFE84A8", Offset = "0xFE84A8", VA = "0xFE84A8")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6000BDD")]
				[Address(RVA = "0xFE84B0", Offset = "0xFE84B0", VA = "0xFE84B0")]
				set
				{
				}
			}

			[Token(Token = "0x17000116")]
			public Vector2Handler offsetHandler
			{
				[Token(Token = "0x6000BDE")]
				[Address(RVA = "0xFE84CC", Offset = "0xFE84CC", VA = "0xFE84CC")]
				get
				{
					return null;
				}
				[Token(Token = "0x6000BDF")]
				[Address(RVA = "0xFE84D4", Offset = "0xFE84D4", VA = "0xFE84D4")]
				set
				{
				}
			}

			[Token(Token = "0x17000117")]
			public bool overrideMaterialID
			{
				[Token(Token = "0x6000BE0")]
				[Address(RVA = "0xFE852C", Offset = "0xFE852C", VA = "0xFE852C")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6000BE1")]
				[Address(RVA = "0xFE8534", Offset = "0xFE8534", VA = "0xFE8534")]
				set
				{
				}
			}

			[Token(Token = "0x17000118")]
			public int targetMaterialID
			{
				[Token(Token = "0x6000BE2")]
				[Address(RVA = "0xFE8550", Offset = "0xFE8550", VA = "0xFE8550")]
				get
				{
					return default(int);
				}
				[Token(Token = "0x6000BE3")]
				[Address(RVA = "0xFE8558", Offset = "0xFE8558", VA = "0xFE8558")]
				set
				{
				}
			}

			[Token(Token = "0x17000119")]
			public bool randomRotation
			{
				[Token(Token = "0x6000BE4")]
				[Address(RVA = "0xFE8570", Offset = "0xFE8570", VA = "0xFE8570")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6000BE5")]
				[Address(RVA = "0xFE8578", Offset = "0xFE8578", VA = "0xFE8578")]
				set
				{
				}
			}

			[Token(Token = "0x1700011A")]
			public QuaternionHandler placeRotationHandler
			{
				[Token(Token = "0x6000BE6")]
				[Address(RVA = "0xFE8594", Offset = "0xFE8594", VA = "0xFE8594")]
				get
				{
					return null;
				}
				[Token(Token = "0x6000BE7")]
				[Address(RVA = "0xFE859C", Offset = "0xFE859C", VA = "0xFE859C")]
				set
				{
				}
			}

			[Token(Token = "0x1700011B")]
			public FloatHandler extrudeRotationHandler
			{
				[Token(Token = "0x6000BE8")]
				[Address(RVA = "0xFE85F4", Offset = "0xFE85F4", VA = "0xFE85F4")]
				get
				{
					return null;
				}
				[Token(Token = "0x6000BE9")]
				[Address(RVA = "0xFE85FC", Offset = "0xFE85FC", VA = "0xFE85FC")]
				set
				{
				}
			}

			[Token(Token = "0x1700011C")]
			public bool randomScale
			{
				[Token(Token = "0x6000BEA")]
				[Address(RVA = "0xFE8654", Offset = "0xFE8654", VA = "0xFE8654")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6000BEB")]
				[Address(RVA = "0xFE865C", Offset = "0xFE865C", VA = "0xFE865C")]
				set
				{
				}
			}

			[Token(Token = "0x1700011D")]
			public Vector3Handler scaleHandler
			{
				[Token(Token = "0x6000BEC")]
				[Address(RVA = "0xFE8678", Offset = "0xFE8678", VA = "0xFE8678")]
				get
				{
					return null;
				}
				[Token(Token = "0x6000BED")]
				[Address(RVA = "0xFE8680", Offset = "0xFE8680", VA = "0xFE8680")]
				set
				{
				}
			}

			[Token(Token = "0x1700011E")]
			public bool uniformRandomScale
			{
				[Token(Token = "0x6000BEE")]
				[Address(RVA = "0xFE86D8", Offset = "0xFE86D8", VA = "0xFE86D8")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6000BEF")]
				[Address(RVA = "0xFE86E0", Offset = "0xFE86E0", VA = "0xFE86E0")]
				set
				{
				}
			}

			[Token(Token = "0x1700011F")]
			public int offsetSeed
			{
				[Token(Token = "0x6000BF0")]
				[Address(RVA = "0xFE86FC", Offset = "0xFE86FC", VA = "0xFE86FC")]
				get
				{
					return default(int);
				}
				[Token(Token = "0x6000BF1")]
				[Address(RVA = "0xFE8704", Offset = "0xFE8704", VA = "0xFE8704")]
				set
				{
				}
			}

			[Token(Token = "0x17000120")]
			public int rotationSeed
			{
				[Token(Token = "0x6000BF2")]
				[Address(RVA = "0xFE871C", Offset = "0xFE871C", VA = "0xFE871C")]
				get
				{
					return default(int);
				}
				[Token(Token = "0x6000BF3")]
				[Address(RVA = "0xFE8724", Offset = "0xFE8724", VA = "0xFE8724")]
				set
				{
				}
			}

			[Token(Token = "0x17000121")]
			public int scaleSeed
			{
				[Token(Token = "0x6000BF4")]
				[Address(RVA = "0xFE873C", Offset = "0xFE873C", VA = "0xFE873C")]
				get
				{
					return default(int);
				}
				[Token(Token = "0x6000BF5")]
				[Address(RVA = "0xFE8744", Offset = "0xFE8744", VA = "0xFE8744")]
				set
				{
				}
			}

			[Token(Token = "0x17000122")]
			public double spacing
			{
				[Token(Token = "0x6000BF6")]
				[Address(RVA = "0xFE875C", Offset = "0xFE875C", VA = "0xFE875C")]
				get
				{
					return default(double);
				}
				[Token(Token = "0x6000BF7")]
				[Address(RVA = "0xFE8764", Offset = "0xFE8764", VA = "0xFE8764")]
				set
				{
				}
			}

			[Token(Token = "0x17000123")]
			public Vector2 minOffset
			{
				[Token(Token = "0x6000BF8")]
				[Address(RVA = "0xFE877C", Offset = "0xFE877C", VA = "0xFE877C")]
				get
				{
					return default(Vector2);
				}
				[Token(Token = "0x6000BF9")]
				[Address(RVA = "0xFE8784", Offset = "0xFE8784", VA = "0xFE8784")]
				set
				{
				}
			}

			[Token(Token = "0x17000124")]
			public Vector2 maxOffset
			{
				[Token(Token = "0x6000BFA")]
				[Address(RVA = "0xFE87B8", Offset = "0xFE87B8", VA = "0xFE87B8")]
				get
				{
					return default(Vector2);
				}
				[Token(Token = "0x6000BFB")]
				[Address(RVA = "0xFE87C0", Offset = "0xFE87C0", VA = "0xFE87C0")]
				set
				{
				}
			}

			[Token(Token = "0x17000125")]
			public Vector3 minRotation
			{
				[Token(Token = "0x6000BFC")]
				[Address(RVA = "0xFE87F4", Offset = "0xFE87F4", VA = "0xFE87F4")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6000BFD")]
				[Address(RVA = "0xFE8800", Offset = "0xFE8800", VA = "0xFE8800")]
				set
				{
				}
			}

			[Token(Token = "0x17000126")]
			public Vector3 maxRotation
			{
				[Token(Token = "0x6000BFE")]
				[Address(RVA = "0xFE8848", Offset = "0xFE8848", VA = "0xFE8848")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6000BFF")]
				[Address(RVA = "0xFE8854", Offset = "0xFE8854", VA = "0xFE8854")]
				set
				{
				}
			}

			[Token(Token = "0x17000127")]
			public Vector3 minScale
			{
				[Token(Token = "0x6000C00")]
				[Address(RVA = "0xFE889C", Offset = "0xFE889C", VA = "0xFE889C")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6000C01")]
				[Address(RVA = "0xFE88A8", Offset = "0xFE88A8", VA = "0xFE88A8")]
				set
				{
				}
			}

			[Token(Token = "0x17000128")]
			public Vector3 maxScale
			{
				[Token(Token = "0x6000C02")]
				[Address(RVA = "0xFE88F0", Offset = "0xFE88F0", VA = "0xFE88F0")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6000C03")]
				[Address(RVA = "0xFE8900", Offset = "0xFE8900", VA = "0xFE8900")]
				set
				{
				}
			}

			[Token(Token = "0x17000129")]
			public Type type
			{
				[Token(Token = "0x6000C04")]
				[Address(RVA = "0xFE8950", Offset = "0xFE8950", VA = "0xFE8950")]
				get
				{
					return default(Type);
				}
				[Token(Token = "0x6000C05")]
				[Address(RVA = "0xFE8958", Offset = "0xFE8958", VA = "0xFE8958")]
				set
				{
				}
			}

			[Token(Token = "0x1700012A")]
			public bool randomOrder
			{
				[Token(Token = "0x6000C06")]
				[Address(RVA = "0xFE8970", Offset = "0xFE8970", VA = "0xFE8970")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6000C07")]
				[Address(RVA = "0xFE8978", Offset = "0xFE8978", VA = "0xFE8978")]
				set
				{
				}
			}

			[Token(Token = "0x1700012B")]
			public int randomSeed
			{
				[Token(Token = "0x6000C08")]
				[Address(RVA = "0xFE8994", Offset = "0xFE8994", VA = "0xFE8994")]
				get
				{
					return default(int);
				}
				[Token(Token = "0x6000C09")]
				[Address(RVA = "0xFE899C", Offset = "0xFE899C", VA = "0xFE899C")]
				set
				{
				}
			}

			[Token(Token = "0x1700012C")]
			public int count
			{
				[Token(Token = "0x6000C0A")]
				[Address(RVA = "0xFE89BC", Offset = "0xFE89BC", VA = "0xFE89BC")]
				get
				{
					return default(int);
				}
				[Token(Token = "0x6000C0B")]
				[Address(RVA = "0xFE89C4", Offset = "0xFE89C4", VA = "0xFE89C4")]
				set
				{
				}
			}

			[Token(Token = "0x1700012D")]
			public UVOverride overrideUVs
			{
				[Token(Token = "0x6000C0C")]
				[Address(RVA = "0xFE89E4", Offset = "0xFE89E4", VA = "0xFE89E4")]
				get
				{
					return default(UVOverride);
				}
				[Token(Token = "0x6000C0D")]
				[Address(RVA = "0xFE89EC", Offset = "0xFE89EC", VA = "0xFE89EC")]
				set
				{
				}
			}

			[Token(Token = "0x1700012E")]
			public Vector2 uvOffset
			{
				[Token(Token = "0x6000C0E")]
				[Address(RVA = "0xFE8A04", Offset = "0xFE8A04", VA = "0xFE8A04")]
				get
				{
					return default(Vector2);
				}
				[Token(Token = "0x6000C0F")]
				[Address(RVA = "0xFE8A0C", Offset = "0xFE8A0C", VA = "0xFE8A0C")]
				set
				{
				}
			}

			[Token(Token = "0x1700012F")]
			public Vector2 uvScale
			{
				[Token(Token = "0x6000C10")]
				[Address(RVA = "0xFE8A40", Offset = "0xFE8A40", VA = "0xFE8A40")]
				get
				{
					return default(Vector2);
				}
				[Token(Token = "0x6000C11")]
				[Address(RVA = "0xFE8A48", Offset = "0xFE8A48", VA = "0xFE8A48")]
				set
				{
				}
			}

			[Token(Token = "0x17000130")]
			public bool overrideNormal
			{
				[Token(Token = "0x6000C12")]
				[Address(RVA = "0xFE8A7C", Offset = "0xFE8A7C", VA = "0xFE8A7C")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6000C13")]
				[Address(RVA = "0xFE8A84", Offset = "0xFE8A84", VA = "0xFE8A84")]
				set
				{
				}
			}

			[Token(Token = "0x17000131")]
			public Vector3 customNormal
			{
				[Token(Token = "0x6000C14")]
				[Address(RVA = "0xFE8AA0", Offset = "0xFE8AA0", VA = "0xFE8AA0")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6000C15")]
				[Address(RVA = "0xFE8AAC", Offset = "0xFE8AAC", VA = "0xFE8AAC")]
				set
				{
				}
			}

			[Token(Token = "0x6000C16")]
			[Address(RVA = "0xFE5D48", Offset = "0xFE5D48", VA = "0xFE5D48")]
			public Channel(string n, SplineMesh parent)
			{
			}

			[Token(Token = "0x6000C17")]
			[Address(RVA = "0xFE5A0C", Offset = "0xFE5A0C", VA = "0xFE5A0C")]
			public Channel(string n, Mesh inputMesh, SplineMesh parent)
			{
			}

			[Token(Token = "0x6000C18")]
			[Address(RVA = "0xFE8AF4", Offset = "0xFE8AF4", VA = "0xFE8AF4")]
			private void Init()
			{
			}

			[Token(Token = "0x6000C19")]
			[Address(RVA = "0xFE8FA4", Offset = "0xFE8FA4", VA = "0xFE8FA4")]
			public void CopyTo(Channel target)
			{
			}

			[Token(Token = "0x6000C1A")]
			[Address(RVA = "0xFE66D4", Offset = "0xFE66D4", VA = "0xFE66D4")]
			public int GetMeshCount()
			{
				return default(int);
			}

			[Token(Token = "0x6000C1B")]
			[Address(RVA = "0xFE97F0", Offset = "0xFE97F0", VA = "0xFE97F0")]
			public void SwapMeshes(int a, int b)
			{
			}

			[Token(Token = "0x6000C1C")]
			[Address(RVA = "0xFE98FC", Offset = "0xFE98FC", VA = "0xFE98FC")]
			public void DuplicateMesh(int index)
			{
			}

			[Token(Token = "0x6000C1D")]
			[Address(RVA = "0xFE9A00", Offset = "0xFE9A00", VA = "0xFE9A00")]
			public MeshDefinition GetMesh(int index)
			{
				return null;
			}

			[Token(Token = "0x6000C1E")]
			[Address(RVA = "0xFE9A58", Offset = "0xFE9A58", VA = "0xFE9A58")]
			public void AddMesh(Mesh input)
			{
			}

			[Token(Token = "0x6000C1F")]
			[Address(RVA = "0xFE9B40", Offset = "0xFE9B40", VA = "0xFE9B40")]
			public void RemoveMesh(int index)
			{
			}

			[Token(Token = "0x6000C20")]
			[Address(RVA = "0xFE671C", Offset = "0xFE671C", VA = "0xFE671C")]
			public void ResetIteration()
			{
			}

			[Token(Token = "0x6000C21")]
			[Address(RVA = "0xFE7D44", Offset = "0xFE7D44", VA = "0xFE7D44")]
			public Vector2 NextOffset(double percent)
			{
				return default(Vector2);
			}

			[Token(Token = "0x6000C22")]
			[Address(RVA = "0xFE7E1C", Offset = "0xFE7E1C", VA = "0xFE7E1C")]
			public Quaternion NextPlaceRotation(double percent)
			{
				return default(Quaternion);
			}

			[Token(Token = "0x6000C23")]
			[Address(RVA = "0xFE821C", Offset = "0xFE821C", VA = "0xFE821C")]
			public float NextExtrudeRotation(double percent)
			{
				return default(float);
			}

			[Token(Token = "0x6000C24")]
			[Address(RVA = "0xFE80D4", Offset = "0xFE80D4", VA = "0xFE80D4")]
			public Vector3 NextExtrudeScale(double percent)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6000C25")]
			[Address(RVA = "0xFE7F60", Offset = "0xFE7F60", VA = "0xFE7F60")]
			public Vector3 NextPlaceScale()
			{
				return default(Vector3);
			}

			[Token(Token = "0x6000C26")]
			[Address(RVA = "0xFE7494", Offset = "0xFE7494", VA = "0xFE7494")]
			public MeshDefinition NextMesh()
			{
				return null;
			}

			[Token(Token = "0x6000C27")]
			[Address(RVA = "0xFE83FC", Offset = "0xFE83FC", VA = "0xFE83FC")]
			internal void Rebuild()
			{
			}

			[Token(Token = "0x6000C28")]
			[Address(RVA = "0xFE9BA0", Offset = "0xFE9BA0", VA = "0xFE9BA0")]
			private void Refresh()
			{
			}
		}

		[Token(Token = "0x4000AA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[SerializeField]
		[HideInInspector]
		private List<Channel> channels;

		[Token(Token = "0x4000AA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private SplineResult lastResult;

		[Token(Token = "0x4000AA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private bool useLastResult;

		[Token(Token = "0x4000AA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private List<TS_Mesh> combineMeshes;

		[Token(Token = "0x4000AAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private int meshCount;

		[Token(Token = "0x4000AAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
		private Matrix4x4 vertexMatrix;

		[Token(Token = "0x4000AAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
		private Matrix4x4 normalMatrix;

		[Token(Token = "0x6000BCB")]
		[Address(RVA = "0xFE55F4", Offset = "0xFE55F4", VA = "0xFE55F4", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000BCC")]
		[Address(RVA = "0xFE5654", Offset = "0xFE5654", VA = "0xFE5654", Slot = "5")]
		protected override void Reset()
		{
		}

		[Token(Token = "0x6000BCD")]
		[Address(RVA = "0xFE5794", Offset = "0xFE5794", VA = "0xFE5794")]
		public void RemoveChannel(int index)
		{
		}

		[Token(Token = "0x6000BCE")]
		[Address(RVA = "0xFE5800", Offset = "0xFE5800", VA = "0xFE5800")]
		public void SwapChannels(int a, int b)
		{
		}

		[Token(Token = "0x6000BCF")]
		[Address(RVA = "0xFE5918", Offset = "0xFE5918", VA = "0xFE5918")]
		public Channel AddChannel(Mesh inputMesh, string name)
		{
			return null;
		}

		[Token(Token = "0x6000BD0")]
		[Address(RVA = "0xFE56A8", Offset = "0xFE56A8", VA = "0xFE56A8")]
		public Channel AddChannel(string name)
		{
			return null;
		}

		[Token(Token = "0x6000BD1")]
		[Address(RVA = "0xFE5FC4", Offset = "0xFE5FC4", VA = "0xFE5FC4")]
		public int GetChannelCount()
		{
			return default(int);
		}

		[Token(Token = "0x6000BD2")]
		[Address(RVA = "0xFE600C", Offset = "0xFE600C", VA = "0xFE600C")]
		public Channel GetChannel(int index)
		{
			return null;
		}

		[Token(Token = "0x6000BD3")]
		[Address(RVA = "0xFE6064", Offset = "0xFE6064", VA = "0xFE6064", Slot = "29")]
		protected override void BuildMesh()
		{
		}

		[Token(Token = "0x6000BD4")]
		[Address(RVA = "0xFE60A4", Offset = "0xFE60A4", VA = "0xFE60A4")]
		private void Generate()
		{
		}

		[Token(Token = "0x6000BD5")]
		[Address(RVA = "0xFE6F3C", Offset = "0xFE6F3C", VA = "0xFE6F3C")]
		private void Place(Channel channel, TS_Mesh target, double percent)
		{
		}

		[Token(Token = "0x6000BD6")]
		[Address(RVA = "0xFE684C", Offset = "0xFE684C", VA = "0xFE684C")]
		private void Stretch(Channel channel, TS_Mesh target, double from, double to)
		{
		}

		[Token(Token = "0x6000BD7")]
		[Address(RVA = "0xFE82A4", Offset = "0xFE82A4", VA = "0xFE82A4")]
		public SplineMesh()
		{
		}
	}
	[Token(Token = "0x2000235")]
	[AddComponentMenu("Dreamteck/Splines/Spline Positioner")]
	public class SplinePositioner : SplineTracer
	{
		[Token(Token = "0x2000236")]
		public enum Mode
		{
			[Token(Token = "0x4000B02")]
			Percent,
			[Token(Token = "0x4000B03")]
			Distance
		}

		[Token(Token = "0x4000AFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[HideInInspector]
		[SerializeField]
		private Transform _applyTransform;

		[Token(Token = "0x4000AFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[HideInInspector]
		[SerializeField]
		private GameObject _targetObject;

		[Token(Token = "0x4000AFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[HideInInspector]
		[SerializeField]
		private double _position;

		[Token(Token = "0x4000AFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[SerializeField]
		[HideInInspector]
		private float animPosition;

		[Token(Token = "0x4000B00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		[SerializeField]
		[HideInInspector]
		private Mode _mode;

		[Token(Token = "0x1700013C")]
		[Obsolete("Deprecated in 1.0.8. Use targetObject instead")]
		public Transform applyTransform
		{
			[Token(Token = "0x6000C5D")]
			[Address(RVA = "0xFEC92C", Offset = "0xFEC92C", VA = "0xFEC92C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C5E")]
			[Address(RVA = "0xFECA38", Offset = "0xFECA38", VA = "0xFECA38")]
			set
			{
			}
		}

		[Token(Token = "0x1700013D")]
		public GameObject targetObject
		{
			[Token(Token = "0x6000C5F")]
			[Address(RVA = "0xFEC948", Offset = "0xFEC948", VA = "0xFEC948")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C60")]
			[Address(RVA = "0xFECAC8", Offset = "0xFECAC8", VA = "0xFECAC8")]
			set
			{
			}
		}

		[Token(Token = "0x1700013E")]
		public double position
		{
			[Token(Token = "0x6000C61")]
			[Address(RVA = "0xFECC04", Offset = "0xFECC04", VA = "0xFECC04")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6000C62")]
			[Address(RVA = "0xFECC0C", Offset = "0xFECC0C", VA = "0xFECC0C")]
			set
			{
			}
		}

		[Token(Token = "0x1700013F")]
		public Mode mode
		{
			[Token(Token = "0x6000C63")]
			[Address(RVA = "0xFECC5C", Offset = "0xFECC5C", VA = "0xFECC5C")]
			get
			{
				return default(Mode);
			}
			[Token(Token = "0x6000C64")]
			[Address(RVA = "0xFECC64", Offset = "0xFECC64", VA = "0xFECC64")]
			set
			{
			}
		}

		[Token(Token = "0x17000140")]
		[Obsolete("Deprecated in 1.0.8. Use result instead")]
		public SplineResult positionResult
		{
			[Token(Token = "0x6000C65")]
			[Address(RVA = "0xFECC88", Offset = "0xFECC88", VA = "0xFECC88")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000141")]
		[Obsolete("Deprecated in 1.0.8. Use offsettedResult instead")]
		public SplineResult offsettedPositionResult
		{
			[Token(Token = "0x6000C66")]
			[Address(RVA = "0xFECC90", Offset = "0xFECC90", VA = "0xFECC90")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C67")]
		[Address(RVA = "0xFED06C", Offset = "0xFED06C", VA = "0xFED06C", Slot = "10")]
		protected override void OnDidApplyAnimationProperties()
		{
		}

		[Token(Token = "0x6000C68")]
		[Address(RVA = "0xFED134", Offset = "0xFED134", VA = "0xFED134", Slot = "34")]
		protected override Transform GetTransform()
		{
			return null;
		}

		[Token(Token = "0x6000C69")]
		[Address(RVA = "0xFED150", Offset = "0xFED150", VA = "0xFED150", Slot = "32")]
		protected override Rigidbody GetRigidbody()
		{
			return null;
		}

		[Token(Token = "0x6000C6A")]
		[Address(RVA = "0xFED1A4", Offset = "0xFED1A4", VA = "0xFED1A4", Slot = "33")]
		protected override Rigidbody2D GetRigidbody2D()
		{
			return null;
		}

		[Token(Token = "0x6000C6B")]
		[Address(RVA = "0xFED1F8", Offset = "0xFED1F8", VA = "0xFED1F8", Slot = "21")]
		protected override void PostBuild()
		{
		}

		[Token(Token = "0x6000C6C")]
		[Address(RVA = "0xFED2A8", Offset = "0xFED2A8", VA = "0xFED2A8", Slot = "30")]
		public override void SetPercent(double percent, bool checkTriggers = false)
		{
		}

		[Token(Token = "0x6000C6D")]
		[Address(RVA = "0xFED388", Offset = "0xFED388", VA = "0xFED388", Slot = "31")]
		public override void SetDistance(float distance, bool checkTriggers = false)
		{
		}

		[Token(Token = "0x6000C6E")]
		[Address(RVA = "0xFED480", Offset = "0xFED480", VA = "0xFED480")]
		public SplinePositioner()
		{
		}
	}
	[Token(Token = "0x2000237")]
	[AddComponentMenu("Dreamteck/Splines/Spline Projector")]
	public class SplineProjector : SplineTracer
	{
		[Token(Token = "0x2000238")]
		public enum Mode
		{
			[Token(Token = "0x4000B13")]
			Accurate,
			[Token(Token = "0x4000B14")]
			Cached
		}

		[Token(Token = "0x4000B04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[SerializeField]
		[HideInInspector]
		private Mode _mode;

		[Token(Token = "0x4000B05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		[SerializeField]
		[HideInInspector]
		private bool _autoProject;

		[Token(Token = "0x4000B06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[SerializeField]
		[HideInInspector]
		private int _subdivide;

		[Token(Token = "0x4000B07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[HideInInspector]
		[SerializeField]
		private Transform _projectTarget;

		[Token(Token = "0x4000B08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[HideInInspector]
		[SerializeField]
		private Transform applyTarget;

		[Token(Token = "0x4000B09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[HideInInspector]
		[SerializeField]
		private GameObject _targetObject;

		[Token(Token = "0x4000B0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[HideInInspector]
		[SerializeField]
		private TS_Transform finalTarget;

		[Token(Token = "0x4000B0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private double traceFromA;

		[Token(Token = "0x4000B0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private double traceToA;

		[Token(Token = "0x4000B0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private double traceFromB;

		[Token(Token = "0x4000B0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		[SerializeField]
		[HideInInspector]
		public Vector2 _offset;

		[Token(Token = "0x4000B0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		[SerializeField]
		[HideInInspector]
		public Vector3 _rotationOffset;

		[Token(Token = "0x17000142")]
		public Mode mode
		{
			[Token(Token = "0x6000C6F")]
			[Address(RVA = "0xFED5F8", Offset = "0xFED5F8", VA = "0xFED5F8")]
			get
			{
				return default(Mode);
			}
			[Token(Token = "0x6000C70")]
			[Address(RVA = "0xFED600", Offset = "0xFED600", VA = "0xFED600")]
			set
			{
			}
		}

		[Token(Token = "0x17000143")]
		public bool autoProject
		{
			[Token(Token = "0x6000C71")]
			[Address(RVA = "0xFED624", Offset = "0xFED624", VA = "0xFED624")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000C72")]
			[Address(RVA = "0xFED62C", Offset = "0xFED62C", VA = "0xFED62C")]
			set
			{
			}
		}

		[Token(Token = "0x17000144")]
		public int subdivide
		{
			[Token(Token = "0x6000C73")]
			[Address(RVA = "0xFED658", Offset = "0xFED658", VA = "0xFED658")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000C74")]
			[Address(RVA = "0xFED660", Offset = "0xFED660", VA = "0xFED660")]
			set
			{
			}
		}

		[Token(Token = "0x17000145")]
		public Transform projectTarget
		{
			[Token(Token = "0x6000C75")]
			[Address(RVA = "0xFED68C", Offset = "0xFED68C", VA = "0xFED68C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C76")]
			[Address(RVA = "0xFED70C", Offset = "0xFED70C", VA = "0xFED70C")]
			set
			{
			}
		}

		[Token(Token = "0x17000146")]
		[Obsolete("Deprecated in 1.0.8. Use targetObject instead")]
		public Transform target
		{
			[Token(Token = "0x6000C77")]
			[Address(RVA = "0xFED7FC", Offset = "0xFED7FC", VA = "0xFED7FC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C78")]
			[Address(RVA = "0xFED8F0", Offset = "0xFED8F0", VA = "0xFED8F0")]
			set
			{
			}
		}

		[Token(Token = "0x17000147")]
		public GameObject targetObject
		{
			[Token(Token = "0x6000C79")]
			[Address(RVA = "0xFED818", Offset = "0xFED818", VA = "0xFED818")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C7A")]
			[Address(RVA = "0xFED994", Offset = "0xFED994", VA = "0xFED994")]
			set
			{
			}
		}

		[Token(Token = "0x17000148")]
		[Obsolete("Deprecated in 1.0.8. Use result instead.")]
		public SplineResult projectResult
		{
			[Token(Token = "0x6000C7B")]
			[Address(RVA = "0xFEDA40", Offset = "0xFEDA40", VA = "0xFEDA40")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x14000009")]
		public event SplineReachHandler onEndReached
		{
			[Token(Token = "0x6000C7C")]
			[Address(RVA = "0xFEDA48", Offset = "0xFEDA48", VA = "0xFEDA48")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000C7D")]
			[Address(RVA = "0xFEDAE8", Offset = "0xFEDAE8", VA = "0xFEDAE8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400000A")]
		public event SplineReachHandler onBeginningReached
		{
			[Token(Token = "0x6000C7E")]
			[Address(RVA = "0xFEDB88", Offset = "0xFEDB88", VA = "0xFEDB88")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000C7F")]
			[Address(RVA = "0xFEDC28", Offset = "0xFEDC28", VA = "0xFEDC28")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000C80")]
		[Address(RVA = "0xFEDCC8", Offset = "0xFEDCC8", VA = "0xFEDCC8", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000C81")]
		[Address(RVA = "0xFEDED8", Offset = "0xFEDED8", VA = "0xFEDED8", Slot = "34")]
		protected override Transform GetTransform()
		{
			return null;
		}

		[Token(Token = "0x6000C82")]
		[Address(RVA = "0xFEDF70", Offset = "0xFEDF70", VA = "0xFEDF70", Slot = "32")]
		protected override Rigidbody GetRigidbody()
		{
			return null;
		}

		[Token(Token = "0x6000C83")]
		[Address(RVA = "0xFEE01C", Offset = "0xFEE01C", VA = "0xFEE01C", Slot = "33")]
		protected override Rigidbody2D GetRigidbody2D()
		{
			return null;
		}

		[Token(Token = "0x6000C84")]
		[Address(RVA = "0xFEDE10", Offset = "0xFEDE10", VA = "0xFEDE10")]
		private void GetProjectTarget()
		{
		}

		[Token(Token = "0x6000C85")]
		[Address(RVA = "0xFEE0C8", Offset = "0xFEE0C8", VA = "0xFEE0C8", Slot = "19")]
		protected override void LateRun()
		{
		}

		[Token(Token = "0x6000C86")]
		[Address(RVA = "0xFEE190", Offset = "0xFEE190", VA = "0xFEE190", Slot = "21")]
		protected override void PostBuild()
		{
		}

		[Token(Token = "0x6000C87")]
		[Address(RVA = "0xFEE820", Offset = "0xFEE820", VA = "0xFEE820")]
		private void CheckTriggers()
		{
		}

		[Token(Token = "0x6000C88")]
		[Address(RVA = "0xFEEA24", Offset = "0xFEEA24", VA = "0xFEEA24")]
		public void CalculateProjection()
		{
		}

		[Token(Token = "0x6000C89")]
		[Address(RVA = "0xFEE248", Offset = "0xFEE248", VA = "0xFEE248")]
		private void InternalCalculateProjection()
		{
		}

		[Token(Token = "0x6000C8A")]
		[Address(RVA = "0xFEEA98", Offset = "0xFEEA98", VA = "0xFEEA98")]
		public SplineProjector()
		{
		}
	}
	[Token(Token = "0x2000239")]
	[AddComponentMenu("Dreamteck/Splines/Spline Renderer")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(MeshFilter))]
	[RequireComponent(typeof(MeshRenderer))]
	public class SplineRenderer : MeshGenerator
	{
		[Token(Token = "0x4000B15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[HideInInspector]
		public bool autoOrient;

		[Token(Token = "0x4000B16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		[HideInInspector]
		public int updateFrameInterval;

		[Token(Token = "0x4000B17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private int currentFrame;

		[Token(Token = "0x4000B18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		[HideInInspector]
		[SerializeField]
		private int _slices;

		[Token(Token = "0x4000B19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[HideInInspector]
		[SerializeField]
		private Vector3 vertexDirection;

		[Token(Token = "0x4000B1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		private bool orthographic;

		[Token(Token = "0x4000B1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13D")]
		private bool init;

		[Token(Token = "0x17000149")]
		public int slices
		{
			[Token(Token = "0x6000C8B")]
			[Address(RVA = "0xFEEB14", Offset = "0xFEEB14", VA = "0xFEEB14")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000C8C")]
			[Address(RVA = "0xFEEB1C", Offset = "0xFEEB1C", VA = "0xFEEB1C")]
			set
			{
			}
		}

		[Token(Token = "0x6000C8D")]
		[Address(RVA = "0xFEEB48", Offset = "0xFEEB48", VA = "0xFEEB48", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000C8E")]
		[Address(RVA = "0xFEEBA8", Offset = "0xFEEBA8", VA = "0xFEEBA8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000C8F")]
		[Address(RVA = "0xFEEC3C", Offset = "0xFEEC3C", VA = "0xFEEC3C", Slot = "19")]
		protected override void LateRun()
		{
		}

		[Token(Token = "0x6000C90")]
		[Address(RVA = "0xFEEC60", Offset = "0xFEEC60", VA = "0xFEEC60", Slot = "29")]
		protected override void BuildMesh()
		{
		}

		[Token(Token = "0x6000C91")]
		[Address(RVA = "0xFEF5B0", Offset = "0xFEF5B0", VA = "0xFEF5B0")]
		public void RenderWithCamera(Camera cam)
		{
		}

		[Token(Token = "0x6000C92")]
		[Address(RVA = "0xFEF6DC", Offset = "0xFEF6DC", VA = "0xFEF6DC")]
		private void OnWillRenderObject()
		{
		}

		[Token(Token = "0x6000C93")]
		[Address(RVA = "0xFEED18", Offset = "0xFEED18", VA = "0xFEED18")]
		public void GenerateVertices(Vector3 vertexDirection, bool orthoGraphic)
		{
		}

		[Token(Token = "0x6000C94")]
		[Address(RVA = "0xFEF74C", Offset = "0xFEF74C", VA = "0xFEF74C")]
		public SplineRenderer()
		{
		}
	}
	[Token(Token = "0x200023A")]
	public class SplineTracer : SplineUser
	{
		[Token(Token = "0x200023B")]
		public enum PhysicsMode
		{
			[Token(Token = "0x4000B2D")]
			Transform,
			[Token(Token = "0x4000B2E")]
			Rigidbody,
			[Token(Token = "0x4000B2F")]
			Rigidbody2D
		}

		[Token(Token = "0x4000B1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Trigger[] triggerInvokeQueue;

		[Token(Token = "0x4000B1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private int addTriggerIndex;

		[Token(Token = "0x4000B1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[HideInInspector]
		public bool applyDirectionRotation;

		[Token(Token = "0x4000B1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[HideInInspector]
		[SerializeField]
		protected Spline.Direction _direction;

		[Token(Token = "0x4000B20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[HideInInspector]
		[SerializeField]
		protected PhysicsMode _physicsMode;

		[Token(Token = "0x4000B21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		[HideInInspector]
		protected TransformModule _motion;

		[Token(Token = "0x4000B22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[FormerlySerializedAs("triggers")]
		[HideInInspector]
		[SerializeField]
		protected SplineTrigger[] triggers_old;

		[Token(Token = "0x4000B23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[HideInInspector]
		public Trigger[] triggers;

		[Token(Token = "0x4000B24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		[HideInInspector]
		protected CustomRotationModule _customRotations;

		[Token(Token = "0x4000B25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[HideInInspector]
		[SerializeField]
		protected CustomOffsetModule _customOffsets;

		[Token(Token = "0x4000B26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		[HideInInspector]
		protected Rigidbody targetRigidbody;

		[Token(Token = "0x4000B27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[SerializeField]
		[HideInInspector]
		protected Rigidbody2D targetRigidbody2D;

		[Token(Token = "0x4000B28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[SerializeField]
		[HideInInspector]
		protected Transform targetTransform;

		[Token(Token = "0x4000B29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[SerializeField]
		[HideInInspector]
		protected SplineResult _result;

		[Token(Token = "0x4000B2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private bool setPercentOnRebuild;

		[Token(Token = "0x4000B2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private double targetPercentOnRebuild;

		[Token(Token = "0x1700014A")]
		public PhysicsMode physicsMode
		{
			[Token(Token = "0x6000C95")]
			[Address(RVA = "0xFEF7F4", Offset = "0xFEF7F4", VA = "0xFEF7F4")]
			get
			{
				return default(PhysicsMode);
			}
			[Token(Token = "0x6000C96")]
			[Address(RVA = "0xFEF7FC", Offset = "0xFEF7FC", VA = "0xFEF7FC")]
			set
			{
			}
		}

		[Token(Token = "0x1700014B")]
		public TransformModule motion
		{
			[Token(Token = "0x6000C97")]
			[Address(RVA = "0xFEF804", Offset = "0xFEF804", VA = "0xFEF804")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700014C")]
		public CustomRotationModule customRotations
		{
			[Token(Token = "0x6000C98")]
			[Address(RVA = "0xFEF87C", Offset = "0xFEF87C", VA = "0xFEF87C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700014D")]
		public CustomOffsetModule customOffsets
		{
			[Token(Token = "0x6000C99")]
			[Address(RVA = "0xFEF8F4", Offset = "0xFEF8F4", VA = "0xFEF8F4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700014E")]
		public SplineResult result
		{
			[Token(Token = "0x6000C9A")]
			[Address(RVA = "0xFEFA2C", Offset = "0xFEFA2C", VA = "0xFEFA2C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700014F")]
		public SplineResult offsettedResult
		{
			[Token(Token = "0x6000C9B")]
			[Address(RVA = "0xFECC94", Offset = "0xFECC94", VA = "0xFECC94")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000150")]
		public Spline.Direction direction
		{
			[Token(Token = "0x6000C9C")]
			[Address(RVA = "0xFEFDA8", Offset = "0xFEFDA8", VA = "0xFEFDA8")]
			get
			{
				return default(Spline.Direction);
			}
			[Token(Token = "0x6000C9D")]
			[Address(RVA = "0xFEFDB0", Offset = "0xFEFDB0", VA = "0xFEFDB0")]
			set
			{
			}
		}

		[Token(Token = "0x17000151")]
		public double clampedPercent
		{
			[Token(Token = "0x6000C9E")]
			[Address(RVA = "0xFEFDC8", Offset = "0xFEFDC8", VA = "0xFEFDC8")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000152")]
		[Obsolete("Deprecated in version 1.0.7. Use motion.applyPosition instead")]
		public bool applyPosition
		{
			[Token(Token = "0x6000C9F")]
			[Address(RVA = "0xFEFE10", Offset = "0xFEFE10", VA = "0xFEFE10")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000CA0")]
			[Address(RVA = "0xFEFE2C", Offset = "0xFEFE2C", VA = "0xFEFE2C")]
			set
			{
			}
		}

		[Token(Token = "0x17000153")]
		[Obsolete("Deprecated in version 1.0.7. Use motion.applyRotation instead")]
		public bool applyRotation
		{
			[Token(Token = "0x6000CA1")]
			[Address(RVA = "0xFEFE50", Offset = "0xFEFE50", VA = "0xFEFE50")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000CA2")]
			[Address(RVA = "0xFEFE6C", Offset = "0xFEFE6C", VA = "0xFEFE6C")]
			set
			{
			}
		}

		[Token(Token = "0x17000154")]
		[Obsolete("Deprecated in version 1.0.7. Use motion.applyScale instead")]
		public bool applyScale
		{
			[Token(Token = "0x6000CA3")]
			[Address(RVA = "0xFEFE90", Offset = "0xFEFE90", VA = "0xFEFE90")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000CA4")]
			[Address(RVA = "0xFEFEAC", Offset = "0xFEFEAC", VA = "0xFEFEAC")]
			set
			{
			}
		}

		[Token(Token = "0x17000155")]
		[Obsolete("Deprecated in version 1.0.7. User motion.offset instead")]
		public Vector2 offset
		{
			[Token(Token = "0x6000CA5")]
			[Address(RVA = "0xFEFED0", Offset = "0xFEFED0", VA = "0xFEFED0")]
			get
			{
				return default(Vector2);
			}
			[Token(Token = "0x6000CA6")]
			[Address(RVA = "0xFEFEEC", Offset = "0xFEFEEC", VA = "0xFEFEEC")]
			set
			{
			}
		}

		[Token(Token = "0x17000156")]
		[Obsolete("Deprecated in version 1.0.7. User motion.rotationOffset instead")]
		public Vector3 rotationOffset
		{
			[Token(Token = "0x6000CA7")]
			[Address(RVA = "0xFEFF20", Offset = "0xFEFF20", VA = "0xFEFF20")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000CA8")]
			[Address(RVA = "0xFEFF40", Offset = "0xFEFF40", VA = "0xFEFF40")]
			set
			{
			}
		}

		[Token(Token = "0x6000CA9")]
		[Address(RVA = "0xFEFF84", Offset = "0xFEFF84", VA = "0xFEFF84", Slot = "29")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000CAA")]
		[Address(RVA = "0xFEFF88", Offset = "0xFEFF88", VA = "0xFEFF88")]
		public Node GetNextNode()
		{
			return null;
		}

		[Token(Token = "0x6000CAB")]
		[Address(RVA = "0xFF0158", Offset = "0xFF0158", VA = "0xFF0158")]
		public void GetCurrentComputer(out SplineComputer comp, out double percent, out Spline.Direction dir)
		{
		}

		[Token(Token = "0x6000CAC")]
		[Address(RVA = "0xFF0180", Offset = "0xFF0180", VA = "0xFF0180")]
		public void ResetTriggers()
		{
		}

		[Token(Token = "0x6000CAD")]
		[Address(RVA = "0xFED2D0", Offset = "0xFED2D0", VA = "0xFED2D0", Slot = "30")]
		public virtual void SetPercent(double percent, bool checkTriggers = false)
		{
		}

		[Token(Token = "0x6000CAE")]
		[Address(RVA = "0xFED3B4", Offset = "0xFED3B4", VA = "0xFED3B4", Slot = "31")]
		public virtual void SetDistance(float distance, bool checkTriggers = false)
		{
		}

		[Token(Token = "0x6000CAF")]
		[Address(RVA = "0xFED274", Offset = "0xFED274", VA = "0xFED274", Slot = "21")]
		protected override void PostBuild()
		{
		}

		[Token(Token = "0x6000CB0")]
		[Address(RVA = "0xFF0624", Offset = "0xFF0624", VA = "0xFF0624", Slot = "13")]
		public override void EnterAddress(Node node, int pointIndex, Spline.Direction direction = Spline.Direction.Forward)
		{
		}

		[Token(Token = "0x6000CB1")]
		[Address(RVA = "0xFF077C", Offset = "0xFF077C", VA = "0xFF077C", Slot = "14")]
		public override void AddComputer(SplineComputer computer, int connectionIndex, int connectedIndex, Spline.Direction direction = Spline.Direction.Forward)
		{
		}

		[Token(Token = "0x6000CB2")]
		[Address(RVA = "0xFF08F8", Offset = "0xFF08F8", VA = "0xFF08F8", Slot = "17")]
		public override void ExitAddress(int depth)
		{
		}

		[Token(Token = "0x6000CB3")]
		[Address(RVA = "0xFF0A1C", Offset = "0xFF0A1C", VA = "0xFF0A1C", Slot = "32")]
		protected virtual Rigidbody GetRigidbody()
		{
			return null;
		}

		[Token(Token = "0x6000CB4")]
		[Address(RVA = "0xFF0A64", Offset = "0xFF0A64", VA = "0xFF0A64", Slot = "33")]
		protected virtual Rigidbody2D GetRigidbody2D()
		{
			return null;
		}

		[Token(Token = "0x6000CB5")]
		[Address(RVA = "0xFF0AAC", Offset = "0xFF0AAC", VA = "0xFF0AAC", Slot = "34")]
		protected virtual Transform GetTransform()
		{
			return null;
		}

		[Token(Token = "0x6000CB6")]
		[Address(RVA = "0xFEE534", Offset = "0xFEE534", VA = "0xFEE534")]
		protected void ApplyMotion()
		{
		}

		[Token(Token = "0x6000CB7")]
		[Address(RVA = "0xFEE988", Offset = "0xFEE988", VA = "0xFEE988")]
		protected void CheckTriggers(double from, double to)
		{
		}

		[Token(Token = "0x6000CB8")]
		[Address(RVA = "0xFF0BC4", Offset = "0xFF0BC4", VA = "0xFF0BC4")]
		protected void CheckTriggersClipped(double from, double to)
		{
		}

		[Token(Token = "0x6000CB9")]
		[Address(RVA = "0xFEE91C", Offset = "0xFEE91C", VA = "0xFEE91C")]
		protected void InvokeTriggers()
		{
		}

		[Token(Token = "0x6000CBA")]
		[Address(RVA = "0xFF0C28", Offset = "0xFF0C28", VA = "0xFF0C28")]
		private bool MigrateTriggers()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CBB")]
		[Address(RVA = "0xFECB74", Offset = "0xFECB74", VA = "0xFECB74")]
		protected void RefreshTargets()
		{
		}

		[Token(Token = "0x6000CBC")]
		[Address(RVA = "0xFF0AB4", Offset = "0xFF0AB4", VA = "0xFF0AB4")]
		private void AddTriggerToQueue(Trigger trigger)
		{
		}

		[Token(Token = "0x6000CBD")]
		[Address(RVA = "0xFF0F08", Offset = "0xFF0F08", VA = "0xFF0F08")]
		private void AddTrigger(Trigger trigger)
		{
		}

		[Token(Token = "0x6000CBE")]
		[Address(RVA = "0xFF0FE0", Offset = "0xFF0FE0", VA = "0xFF0FE0")]
		public void AddTrigger(Trigger.Type t, UnityAction call, double position = 0.0, Trigger.Type type = Trigger.Type.Double)
		{
		}

		[Token(Token = "0x6000CBF")]
		[Address(RVA = "0xFF1088", Offset = "0xFF1088", VA = "0xFF1088")]
		public void AddTrigger(Trigger.Type t, UnityAction<int> call, int value, double position = 0.0, Trigger.Type type = Trigger.Type.Double)
		{
		}

		[Token(Token = "0x6000CC0")]
		[Address(RVA = "0xFF1138", Offset = "0xFF1138", VA = "0xFF1138")]
		public void AddTrigger(Trigger.Type t, UnityAction<float> call, float value, double position = 0.0, Trigger.Type type = Trigger.Type.Double)
		{
		}

		[Token(Token = "0x6000CC1")]
		[Address(RVA = "0xFF11E8", Offset = "0xFF11E8", VA = "0xFF11E8")]
		public void AddTrigger(Trigger.Type t, UnityAction<double> call, double value, double position = 0.0, Trigger.Type type = Trigger.Type.Double)
		{
		}

		[Token(Token = "0x6000CC2")]
		[Address(RVA = "0xFF1298", Offset = "0xFF1298", VA = "0xFF1298")]
		public void AddTrigger(Trigger.Type t, UnityAction<string> call, string value, double position = 0.0, Trigger.Type type = Trigger.Type.Double)
		{
		}

		[Token(Token = "0x6000CC3")]
		[Address(RVA = "0xFF1348", Offset = "0xFF1348", VA = "0xFF1348")]
		public void AddTrigger(Trigger.Type t, UnityAction<bool> call, bool value, double position = 0.0, Trigger.Type type = Trigger.Type.Double)
		{
		}

		[Token(Token = "0x6000CC4")]
		[Address(RVA = "0xFF13F8", Offset = "0xFF13F8", VA = "0xFF13F8")]
		public void AddTrigger(Trigger.Type t, UnityAction<GameObject> call, GameObject value, double position = 0.0, Trigger.Type type = Trigger.Type.Double)
		{
		}

		[Token(Token = "0x6000CC5")]
		[Address(RVA = "0xFF14A8", Offset = "0xFF14A8", VA = "0xFF14A8")]
		public void AddTrigger(Trigger.Type t, UnityAction<Transform> call, Transform value, double position = 0.0, Trigger.Type type = Trigger.Type.Double)
		{
		}

		[Token(Token = "0x6000CC6")]
		[Address(RVA = "0xFF05E4", Offset = "0xFF05E4", VA = "0xFF05E4")]
		public void EvaluateClipped(SplineResult result, double clippedPercent)
		{
		}

		[Token(Token = "0x6000CC7")]
		[Address(RVA = "0xFF1574", Offset = "0xFF1574", VA = "0xFF1574")]
		public Vector3 EvaluatePositionClipped(double clippedPercent)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000CC8")]
		[Address(RVA = "0xFF0318", Offset = "0xFF0318", VA = "0xFF0318")]
		public double TravelClipped(double start, float distance, Spline.Direction direction)
		{
			return default(double);
		}

		[Token(Token = "0x6000CC9")]
		[Address(RVA = "0xFF15B0", Offset = "0xFF15B0", VA = "0xFF15B0")]
		public SplineResult ProjectClipped(Vector3 point)
		{
			return null;
		}

		[Token(Token = "0x6000CCA")]
		[Address(RVA = "0xFED484", Offset = "0xFED484", VA = "0xFED484")]
		public SplineTracer()
		{
		}
	}
	[Token(Token = "0x200023C")]
	public class SplineUser : MonoBehaviour
	{
		[Token(Token = "0x200023D")]
		public enum UpdateMethod
		{
			[Token(Token = "0x4000B4E")]
			Update,
			[Token(Token = "0x4000B4F")]
			FixedUpdate,
			[Token(Token = "0x4000B50")]
			LateUpdate
		}

		[Token(Token = "0x200023E")]
		[CompilerGenerated]
		private sealed class <UpdateSubscribersRoutine>d__84 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000B51")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000B52")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000B53")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SplineUser <>4__this;

			[Token(Token = "0x17000169")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000D19")]
				[Address(RVA = "0xFF7044", Offset = "0xFF7044", VA = "0xFF7044", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700016A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000D1B")]
				[Address(RVA = "0xFF708C", Offset = "0xFF708C", VA = "0xFF708C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000D16")]
			[Address(RVA = "0xFF33F8", Offset = "0xFF33F8", VA = "0xFF33F8")]
			[DebuggerHidden]
			public <UpdateSubscribersRoutine>d__84(int <>1__state)
			{
			}

			[Token(Token = "0x6000D17")]
			[Address(RVA = "0xFF6FE4", Offset = "0xFF6FE4", VA = "0xFF6FE4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000D18")]
			[Address(RVA = "0xFF6FE8", Offset = "0xFF6FE8", VA = "0xFF6FE8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000D1A")]
			[Address(RVA = "0xFF704C", Offset = "0xFF704C", VA = "0xFF704C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000B30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public SplineAddress _address;

		[Token(Token = "0x4000B31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[HideInInspector]
		private SplineUser[] subscribers;

		[Token(Token = "0x4000B32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public UpdateMethod updateMethod;

		[Token(Token = "0x4000B33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[HideInInspector]
		[SerializeField]
		private SplineUser _user;

		[Token(Token = "0x4000B34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		[SerializeField]
		private double _resolution;

		[Token(Token = "0x4000B35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[HideInInspector]
		private double _clipTo;

		[Token(Token = "0x4000B36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		[HideInInspector]
		private double _clipFrom;

		[Token(Token = "0x4000B37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		[HideInInspector]
		private bool _autoUpdate;

		[Token(Token = "0x4000B38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		[HideInInspector]
		[SerializeField]
		private bool _loopSamples;

		[Token(Token = "0x4000B39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
		[HideInInspector]
		[SerializeField]
		private bool _averageResultVectors;

		[Token(Token = "0x4000B3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x53")]
		[HideInInspector]
		[SerializeField]
		private bool _uniformSample;

		[Token(Token = "0x4000B3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[HideInInspector]
		[SerializeField]
		private bool _uniformPreserveClipRange;

		[Token(Token = "0x4000B3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HideInInspector]
		[SerializeField]
		private SplineResult[] _samples;

		[Token(Token = "0x4000B3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		[HideInInspector]
		private SplineResult[] _clippedSamples;

		[Token(Token = "0x4000B3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[HideInInspector]
		[SerializeField]
		private float animClipFrom;

		[Token(Token = "0x4000B3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[HideInInspector]
		[SerializeField]
		private float animClipTo;

		[Token(Token = "0x4000B40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[HideInInspector]
		[SerializeField]
		private double animResolution;

		[Token(Token = "0x4000B41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[HideInInspector]
		[SerializeField]
		protected bool sampleUser;

		[Token(Token = "0x4000B42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
		private bool rebuild;

		[Token(Token = "0x4000B43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7A")]
		private bool sample;

		[Token(Token = "0x4000B44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7B")]
		private bool getClippedSamples;

		[Token(Token = "0x4000B45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[HideInInspector]
		public bool multithreaded;

		[Token(Token = "0x4000B46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7D")]
		[HideInInspector]
		public bool buildOnAwake;

		[Token(Token = "0x4000B47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Thread buildThread;

		[Token(Token = "0x4000B48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private bool postThread;

		[Token(Token = "0x4000B49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x89")]
		private bool threadSample;

		[Token(Token = "0x4000B4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8A")]
		private bool threadWork;

		[Token(Token = "0x4000B4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8B")]
		private bool _threadWorking;

		[Token(Token = "0x4000B4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private object locker;

		[Token(Token = "0x17000157")]
		public SplineUser user
		{
			[Token(Token = "0x6000CCB")]
			[Address(RVA = "0xFF16E4", Offset = "0xFF16E4", VA = "0xFF16E4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CCC")]
			[Address(RVA = "0xFF16EC", Offset = "0xFF16EC", VA = "0xFF16EC")]
			set
			{
			}
		}

		[Token(Token = "0x17000158")]
		public SplineUser rootUser
		{
			[Token(Token = "0x6000CCD")]
			[Address(RVA = "0xFF1974", Offset = "0xFF1974", VA = "0xFF1974")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000159")]
		public SplineComputer computer
		{
			[Token(Token = "0x6000CCE")]
			[Address(RVA = "0xFEEA58", Offset = "0xFEEA58", VA = "0xFEEA58")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CCF")]
			[Address(RVA = "0xFF1A64", Offset = "0xFF1A64", VA = "0xFF1A64")]
			set
			{
			}
		}

		[Token(Token = "0x1700015A")]
		public double resolution
		{
			[Token(Token = "0x6000CD0")]
			[Address(RVA = "0xFF2148", Offset = "0xFF2148", VA = "0xFF2148")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6000CD1")]
			[Address(RVA = "0xFF2150", Offset = "0xFF2150", VA = "0xFF2150")]
			set
			{
			}
		}

		[Token(Token = "0x1700015B")]
		public double clipFrom
		{
			[Token(Token = "0x6000CD2")]
			[Address(RVA = "0xFF2188", Offset = "0xFF2188", VA = "0xFF2188")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6000CD3")]
			[Address(RVA = "0xFF2190", Offset = "0xFF2190", VA = "0xFF2190")]
			set
			{
			}
		}

		[Token(Token = "0x1700015C")]
		public double clipTo
		{
			[Token(Token = "0x6000CD4")]
			[Address(RVA = "0xFF221C", Offset = "0xFF221C", VA = "0xFF221C")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6000CD5")]
			[Address(RVA = "0xFF2224", Offset = "0xFF2224", VA = "0xFF2224")]
			set
			{
			}
		}

		[Token(Token = "0x1700015D")]
		public bool averageResultVectors
		{
			[Token(Token = "0x6000CD6")]
			[Address(RVA = "0xFF22B0", Offset = "0xFF22B0", VA = "0xFF22B0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000CD7")]
			[Address(RVA = "0xFF22B8", Offset = "0xFF22B8", VA = "0xFF22B8")]
			set
			{
			}
		}

		[Token(Token = "0x1700015E")]
		public bool autoUpdate
		{
			[Token(Token = "0x6000CD8")]
			[Address(RVA = "0xFF22E8", Offset = "0xFF22E8", VA = "0xFF22E8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000CD9")]
			[Address(RVA = "0xFF22F0", Offset = "0xFF22F0", VA = "0xFF22F0")]
			set
			{
			}
		}

		[Token(Token = "0x1700015F")]
		public bool loopSamples
		{
			[Token(Token = "0x6000CDA")]
			[Address(RVA = "0xFF231C", Offset = "0xFF231C", VA = "0xFF231C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000CDB")]
			[Address(RVA = "0xFF2324", Offset = "0xFF2324", VA = "0xFF2324")]
			set
			{
			}
		}

		[Token(Token = "0x17000160")]
		public bool uniformSample
		{
			[Token(Token = "0x6000CDC")]
			[Address(RVA = "0xFF2350", Offset = "0xFF2350", VA = "0xFF2350")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000CDD")]
			[Address(RVA = "0xFF2358", Offset = "0xFF2358", VA = "0xFF2358")]
			set
			{
			}
		}

		[Token(Token = "0x17000161")]
		public bool uniformPreserveClipRange
		{
			[Token(Token = "0x6000CDE")]
			[Address(RVA = "0xFF2380", Offset = "0xFF2380", VA = "0xFF2380")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000CDF")]
			[Address(RVA = "0xFF2388", Offset = "0xFF2388", VA = "0xFF2388")]
			set
			{
			}
		}

		[Token(Token = "0x17000162")]
		public double span
		{
			[Token(Token = "0x6000CE0")]
			[Address(RVA = "0xFF23B0", Offset = "0xFF23B0", VA = "0xFF23B0")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000163")]
		public SplineAddress address
		{
			[Token(Token = "0x6000CE1")]
			[Address(RVA = "0xFF20CC", Offset = "0xFF20CC", VA = "0xFF20CC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000164")]
		public bool samplesAreLooped
		{
			[Token(Token = "0x6000CE2")]
			[Address(RVA = "0xFF23E4", Offset = "0xFF23E4", VA = "0xFF23E4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000165")]
		public SplineResult[] samples
		{
			[Token(Token = "0x6000CE3")]
			[Address(RVA = "0xFEEA74", Offset = "0xFEEA74", VA = "0xFEEA74")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000166")]
		public SplineResult[] clippedSamples
		{
			[Token(Token = "0x6000CE4")]
			[Address(RVA = "0xFEF570", Offset = "0xFEF570", VA = "0xFEF570")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000167")]
		protected bool willRebuild
		{
			[Token(Token = "0x6000CE5")]
			[Address(RVA = "0xFF307C", Offset = "0xFF307C", VA = "0xFF307C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000168")]
		public bool threadWorking
		{
			[Token(Token = "0x6000CE6")]
			[Address(RVA = "0xFF3084", Offset = "0xFF3084", VA = "0xFF3084")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000CE7")]
		[Address(RVA = "0xFEDCE0", Offset = "0xFEDCE0", VA = "0xFEDCE0", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000CE8")]
		[Address(RVA = "0xFF3144", Offset = "0xFF3144", VA = "0xFF3144", Slot = "5")]
		protected virtual void Reset()
		{
		}

		[Token(Token = "0x6000CE9")]
		[Address(RVA = "0xFF3148", Offset = "0xFF3148", VA = "0xFF3148", Slot = "6")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6000CEA")]
		[Address(RVA = "0xFF31E0", Offset = "0xFF31E0", VA = "0xFF31E0", Slot = "7")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6000CEB")]
		[Address(RVA = "0xFF3278", Offset = "0xFF3278", VA = "0xFF3278", Slot = "8")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6000CEC")]
		[Address(RVA = "0xFF32CC", Offset = "0xFF32CC", VA = "0xFF32CC", Slot = "9")]
		protected virtual void OnApplicationQuit()
		{
		}

		[Token(Token = "0x6000CED")]
		[Address(RVA = "0xFED09C", Offset = "0xFED09C", VA = "0xFED09C", Slot = "10")]
		protected virtual void OnDidApplyAnimationProperties()
		{
		}

		[Token(Token = "0x6000CEE")]
		[Address(RVA = "0xFF3320", Offset = "0xFF3320", VA = "0xFF3320", Slot = "11")]
		public virtual void Rebuild(bool sampleComputer)
		{
		}

		[Token(Token = "0x6000CEF")]
		[Address(RVA = "0xFF3384", Offset = "0xFF3384", VA = "0xFF3384")]
		[IteratorStateMachine(typeof(<UpdateSubscribersRoutine>d__84))]
		private IEnumerator UpdateSubscribersRoutine()
		{
			return null;
		}

		[Token(Token = "0x6000CF0")]
		[Address(RVA = "0xFF3420", Offset = "0xFF3420", VA = "0xFF3420", Slot = "12")]
		public virtual void RebuildImmediate(bool sampleComputer)
		{
		}

		[Token(Token = "0x6000CF1")]
		[Address(RVA = "0xFF4084", Offset = "0xFF4084", VA = "0xFF4084")]
		public void GetClippedSamplesImmediate()
		{
		}

		[Token(Token = "0x6000CF2")]
		[Address(RVA = "0xFF06D8", Offset = "0xFF06D8", VA = "0xFF06D8", Slot = "13")]
		public virtual void EnterAddress(Node node, int connectionIndex, Spline.Direction direction = Spline.Direction.Forward)
		{
		}

		[Token(Token = "0x6000CF3")]
		[Address(RVA = "0xFF0840", Offset = "0xFF0840", VA = "0xFF0840", Slot = "14")]
		public virtual void AddComputer(SplineComputer computer, int connectionIndex, int connectedIndex, Spline.Direction direction = Spline.Direction.Forward)
		{
		}

		[Token(Token = "0x6000CF4")]
		[Address(RVA = "0xFF40AC", Offset = "0xFF40AC", VA = "0xFF40AC", Slot = "15")]
		public virtual void CollapseAddress()
		{
		}

		[Token(Token = "0x6000CF5")]
		[Address(RVA = "0xFF40F0", Offset = "0xFF40F0", VA = "0xFF40F0", Slot = "16")]
		public virtual void ClearAddress()
		{
		}

		[Token(Token = "0x6000CF6")]
		[Address(RVA = "0xFF0994", Offset = "0xFF0994", VA = "0xFF0994", Slot = "17")]
		public virtual void ExitAddress(int depth)
		{
		}

		[Token(Token = "0x6000CF7")]
		[Address(RVA = "0xFF4170", Offset = "0xFF4170", VA = "0xFF4170")]
		private void Update()
		{
		}

		[Token(Token = "0x6000CF8")]
		[Address(RVA = "0xFF4414", Offset = "0xFF4414", VA = "0xFF4414")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000CF9")]
		[Address(RVA = "0xFF4428", Offset = "0xFF4428", VA = "0xFF4428")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000CFA")]
		[Address(RVA = "0xFF3F88", Offset = "0xFF3F88", VA = "0xFF3F88")]
		private void UpdateSubscribers()
		{
		}

		[Token(Token = "0x6000CFB")]
		[Address(RVA = "0xFF4180", Offset = "0xFF4180", VA = "0xFF4180")]
		private void RunMain()
		{
		}

		[Token(Token = "0x6000CFC")]
		[Address(RVA = "0xFF4568", Offset = "0xFF4568", VA = "0xFF4568")]
		private void RunThread()
		{
		}

		[Token(Token = "0x6000CFD")]
		[Address(RVA = "0xFF47CC", Offset = "0xFF47CC", VA = "0xFF47CC", Slot = "18")]
		protected virtual void Run()
		{
		}

		[Token(Token = "0x6000CFE")]
		[Address(RVA = "0xFEE18C", Offset = "0xFEE18C", VA = "0xFEE18C", Slot = "19")]
		protected virtual void LateRun()
		{
		}

		[Token(Token = "0x6000CFF")]
		[Address(RVA = "0xFF47D0", Offset = "0xFF47D0", VA = "0xFF47D0", Slot = "20")]
		protected virtual void Build()
		{
		}

		[Token(Token = "0x6000D00")]
		[Address(RVA = "0xFF47D4", Offset = "0xFF47D4", VA = "0xFF47D4", Slot = "21")]
		protected virtual void PostBuild()
		{
		}

		[Token(Token = "0x6000D01")]
		[Address(RVA = "0xFF47D8", Offset = "0xFF47D8", VA = "0xFF47D8")]
		public void SetClipRange(double from, double to)
		{
		}

		[Token(Token = "0x6000D02")]
		[Address(RVA = "0xFF3500", Offset = "0xFF3500", VA = "0xFF3500")]
		private void SampleComputer()
		{
		}

		[Token(Token = "0x6000D03")]
		[Address(RVA = "0xFF24A0", Offset = "0xFF24A0", VA = "0xFF24A0")]
		private void GetClippedSamples()
		{
		}

		[Token(Token = "0x6000D04")]
		[Address(RVA = "0xFF485C", Offset = "0xFF485C", VA = "0xFF485C", Slot = "22")]
		public virtual SplineResult Evaluate(double percent)
		{
			return null;
		}

		[Token(Token = "0x6000D05")]
		[Address(RVA = "0xFF4DE8", Offset = "0xFF4DE8", VA = "0xFF4DE8", Slot = "23")]
		public virtual void Evaluate(SplineResult result, double percent)
		{
		}

		[Token(Token = "0x6000D06")]
		[Address(RVA = "0xFF533C", Offset = "0xFF533C", VA = "0xFF533C", Slot = "24")]
		public virtual Vector3 EvaluatePosition(double percent, bool overrideUniformClipRange = false)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000D07")]
		[Address(RVA = "0xFEFDF4", Offset = "0xFEFDF4", VA = "0xFEFDF4")]
		public double ClipPercent(double percent)
		{
			return default(double);
		}

		[Token(Token = "0x6000D08")]
		[Address(RVA = "0xFF58D0", Offset = "0xFF58D0", VA = "0xFF58D0")]
		public void ClipPercent(ref double percent)
		{
		}

		[Token(Token = "0x6000D09")]
		[Address(RVA = "0xFF1558", Offset = "0xFF1558", VA = "0xFF1558")]
		public double UnclipPercent(double percent)
		{
			return default(double);
		}

		[Token(Token = "0x6000D0A")]
		[Address(RVA = "0xFF01E0", Offset = "0xFF01E0", VA = "0xFF01E0")]
		public void UnclipPercent(ref double percent)
		{
		}

		[Token(Token = "0x6000D0B")]
		[Address(RVA = "0xFF4DAC", Offset = "0xFF4DAC", VA = "0xFF4DAC")]
		public int GetSampleIndex(double percent)
		{
			return default(int);
		}

		[Token(Token = "0x6000D0C")]
		[Address(RVA = "0xFF5A08", Offset = "0xFF5A08", VA = "0xFF5A08")]
		public int GetClippedSampleIndex(double percent)
		{
			return default(int);
		}

		[Token(Token = "0x6000D0D")]
		[Address(RVA = "0xFF5A40", Offset = "0xFF5A40", VA = "0xFF5A40", Slot = "25")]
		public virtual SplineResult Project(Vector3 point, double from = 0.0, double to = 1.0)
		{
			return null;
		}

		[Token(Token = "0x6000D0E")]
		[Address(RVA = "0xFF5AF8", Offset = "0xFF5AF8", VA = "0xFF5AF8", Slot = "26")]
		public virtual void Project(SplineResult result, Vector3 point, double from = 0.0, double to = 1.0)
		{
		}

		[Token(Token = "0x6000D0F")]
		[Address(RVA = "0xFF6A44", Offset = "0xFF6A44", VA = "0xFF6A44", Slot = "27")]
		public virtual double Travel(double start, float distance, Spline.Direction direction)
		{
			return default(double);
		}

		[Token(Token = "0x6000D10")]
		[Address(RVA = "0xFF1EB4", Offset = "0xFF1EB4", VA = "0xFF1EB4")]
		private void Subscribe(SplineUser input)
		{
		}

		[Token(Token = "0x6000D11")]
		[Address(RVA = "0xFF1CB0", Offset = "0xFF1CB0", VA = "0xFF1CB0")]
		private void Unsubscribe(SplineUser input)
		{
		}

		[Token(Token = "0x6000D12")]
		[Address(RVA = "0xFF6DA8", Offset = "0xFF6DA8", VA = "0xFF6DA8", Slot = "28")]
		public virtual float CalculateLength(double from = 0.0, double to = 1.0)
		{
			return default(float);
		}

		[Token(Token = "0x6000D13")]
		[Address(RVA = "0xFF443C", Offset = "0xFF443C", VA = "0xFF443C")]
		private void RemoveSubscriber(int index)
		{
		}

		[Token(Token = "0x6000D14")]
		[Address(RVA = "0xFF308C", Offset = "0xFF308C", VA = "0xFF308C")]
		private bool IsSubscribed(SplineUser user)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D15")]
		[Address(RVA = "0xFF15C4", Offset = "0xFF15C4", VA = "0xFF15C4")]
		public SplineUser()
		{
		}
	}
	[Token(Token = "0x200023F")]
	[RequireComponent(typeof(MeshFilter))]
	[RequireComponent(typeof(MeshRenderer))]
	[AddComponentMenu("Dreamteck/Splines/Surface Generator")]
	public class SurfaceGenerator : MeshGenerator
	{
		[Token(Token = "0x4000B54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[HideInInspector]
		[SerializeField]
		private float _expand;

		[Token(Token = "0x4000B55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		[SerializeField]
		[HideInInspector]
		private float _extrude;

		[Token(Token = "0x4000B56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[SerializeField]
		[HideInInspector]
		private Vector2 _sideUvScale;

		[Token(Token = "0x4000B57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[SerializeField]
		[HideInInspector]
		private Vector2 _sideUvOffset;

		[Token(Token = "0x4000B58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[HideInInspector]
		[SerializeField]
		private SplineComputer _extrudeComputer;

		[Token(Token = "0x4000B59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		[HideInInspector]
		[SerializeField]
		private SplineResult[] extrudeResults;

		[Token(Token = "0x4000B5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		[HideInInspector]
		[SerializeField]
		private Vector3[] identityVertices;

		[Token(Token = "0x4000B5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		[HideInInspector]
		[SerializeField]
		private Vector3[] identityNormals;

		[Token(Token = "0x4000B5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		[SerializeField]
		[HideInInspector]
		private Vector2[] projectedVerts;

		[Token(Token = "0x4000B5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		[SerializeField]
		[HideInInspector]
		private int[] capTris;

		[Token(Token = "0x4000B5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		[SerializeField]
		[HideInInspector]
		private int[] wallTris;

		[Token(Token = "0x4000B5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		[SerializeField]
		[HideInInspector]
		private double _extrudeFrom;

		[Token(Token = "0x4000B60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		[SerializeField]
		[HideInInspector]
		private double _extrudeTo;

		[Token(Token = "0x4000B61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		[SerializeField]
		[HideInInspector]
		private bool _uniformUvs;

		[Token(Token = "0x1700016B")]
		public float expand
		{
			[Token(Token = "0x6000D1C")]
			[Address(RVA = "0xFF7094", Offset = "0xFF7094", VA = "0xFF7094")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D1D")]
			[Address(RVA = "0xFF709C", Offset = "0xFF709C", VA = "0xFF709C")]
			set
			{
			}
		}

		[Token(Token = "0x1700016C")]
		public float extrude
		{
			[Token(Token = "0x6000D1E")]
			[Address(RVA = "0xFF70C0", Offset = "0xFF70C0", VA = "0xFF70C0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D1F")]
			[Address(RVA = "0xFF70C8", Offset = "0xFF70C8", VA = "0xFF70C8")]
			set
			{
			}
		}

		[Token(Token = "0x1700016D")]
		public double extrudeClipFrom
		{
			[Token(Token = "0x6000D20")]
			[Address(RVA = "0xFF70EC", Offset = "0xFF70EC", VA = "0xFF70EC")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6000D21")]
			[Address(RVA = "0xFF70F4", Offset = "0xFF70F4", VA = "0xFF70F4")]
			set
			{
			}
		}

		[Token(Token = "0x1700016E")]
		public double extrudeClipTo
		{
			[Token(Token = "0x6000D22")]
			[Address(RVA = "0xFF7118", Offset = "0xFF7118", VA = "0xFF7118")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6000D23")]
			[Address(RVA = "0xFF7120", Offset = "0xFF7120", VA = "0xFF7120")]
			set
			{
			}
		}

		[Token(Token = "0x1700016F")]
		public Vector2 sideUvScale
		{
			[Token(Token = "0x6000D24")]
			[Address(RVA = "0xFF7144", Offset = "0xFF7144", VA = "0xFF7144")]
			get
			{
				return default(Vector2);
			}
			[Token(Token = "0x6000D25")]
			[Address(RVA = "0xFF7150", Offset = "0xFF7150", VA = "0xFF7150")]
			set
			{
			}
		}

		[Token(Token = "0x17000170")]
		public Vector2 sideUvOffset
		{
			[Token(Token = "0x6000D26")]
			[Address(RVA = "0xFF7198", Offset = "0xFF7198", VA = "0xFF7198")]
			get
			{
				return default(Vector2);
			}
			[Token(Token = "0x6000D27")]
			[Address(RVA = "0xFF71A4", Offset = "0xFF71A4", VA = "0xFF71A4")]
			set
			{
			}
		}

		[Token(Token = "0x17000171")]
		public SplineComputer extrudeComputer
		{
			[Token(Token = "0x6000D28")]
			[Address(RVA = "0xFF71EC", Offset = "0xFF71EC", VA = "0xFF71EC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D29")]
			[Address(RVA = "0xFF71F4", Offset = "0xFF71F4", VA = "0xFF71F4")]
			set
			{
			}
		}

		[Token(Token = "0x17000172")]
		public bool uniformUvs
		{
			[Token(Token = "0x6000D2A")]
			[Address(RVA = "0xFF7314", Offset = "0xFF7314", VA = "0xFF7314")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D2B")]
			[Address(RVA = "0xFF731C", Offset = "0xFF731C", VA = "0xFF731C")]
			set
			{
			}
		}

		[Token(Token = "0x6000D2C")]
		[Address(RVA = "0xFF7344", Offset = "0xFF7344", VA = "0xFF7344", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000D2D")]
		[Address(RVA = "0xFF73A4", Offset = "0xFF73A4", VA = "0xFF73A4", Slot = "29")]
		protected override void BuildMesh()
		{
		}

		[Token(Token = "0x6000D2E")]
		[Address(RVA = "0xFF73E4", Offset = "0xFF73E4", VA = "0xFF73E4")]
		public void Generate()
		{
		}

		[Token(Token = "0x6000D2F")]
		[Address(RVA = "0xFF9244", Offset = "0xFF9244", VA = "0xFF9244")]
		private void GenerateCapTris(bool flip)
		{
		}

		[Token(Token = "0x6000D30")]
		[Address(RVA = "0xFF95B0", Offset = "0xFF95B0", VA = "0xFF95B0")]
		private int WriteTris(ref int[] tris, ref int[] target, int vertexOffset, int trisOffset, bool flip)
		{
			return default(int);
		}

		[Token(Token = "0x6000D31")]
		[Address(RVA = "0xFF9188", Offset = "0xFF9188", VA = "0xFF9188")]
		private bool IsClockwise(Vector2[] points2D)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D32")]
		[Address(RVA = "0xFF92E4", Offset = "0xFF92E4", VA = "0xFF92E4")]
		private void GetIdentityVerts(Vector3 center, Vector3 normal, bool clockwise)
		{
		}

		[Token(Token = "0x6000D33")]
		[Address(RVA = "0xFF8CE0", Offset = "0xFF8CE0", VA = "0xFF8CE0")]
		private void GetProjectedVertices(Vector3[] points, Vector3 normal, Vector3 center, int count = 0)
		{
		}

		[Token(Token = "0x6000D34")]
		[Address(RVA = "0xFF970C", Offset = "0xFF970C", VA = "0xFF970C")]
		public SurfaceGenerator()
		{
		}
	}
	[Token(Token = "0x2000240")]
	[AddComponentMenu("Dreamteck/Splines/Tube Generator")]
	[RequireComponent(typeof(MeshRenderer))]
	[RequireComponent(typeof(MeshFilter))]
	public class TubeGenerator : MeshGenerator
	{
		[Token(Token = "0x2000241")]
		public enum CapMethod
		{
			[Token(Token = "0x4000B6C")]
			None,
			[Token(Token = "0x4000B6D")]
			Flat,
			[Token(Token = "0x4000B6E")]
			Round
		}

		[Token(Token = "0x4000B62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[SerializeField]
		[HideInInspector]
		private int _sides;

		[Token(Token = "0x4000B63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		[SerializeField]
		[HideInInspector]
		private int _roundCapLatitude;

		[Token(Token = "0x4000B64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[HideInInspector]
		[SerializeField]
		private CapMethod _capMode;

		[Token(Token = "0x4000B65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		[SerializeField]
		[HideInInspector]
		private float _integrity;

		[Token(Token = "0x4000B66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[SerializeField]
		[HideInInspector]
		private float _capUVScale;

		[Token(Token = "0x4000B67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		private int bodyVertexCount;

		[Token(Token = "0x4000B68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private int bodyTrisCount;

		[Token(Token = "0x4000B69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		private int capVertexCount;

		[Token(Token = "0x4000B6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private int capTrisCount;

		[Token(Token = "0x17000173")]
		public int sides
		{
			[Token(Token = "0x6000D35")]
			[Address(RVA = "0xFF98E0", Offset = "0xFF98E0", VA = "0xFF98E0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000D36")]
			[Address(RVA = "0xFF98E8", Offset = "0xFF98E8", VA = "0xFF98E8")]
			set
			{
			}
		}

		[Token(Token = "0x17000174")]
		public CapMethod capMode
		{
			[Token(Token = "0x6000D37")]
			[Address(RVA = "0xFF9918", Offset = "0xFF9918", VA = "0xFF9918")]
			get
			{
				return default(CapMethod);
			}
			[Token(Token = "0x6000D38")]
			[Address(RVA = "0xFF9920", Offset = "0xFF9920", VA = "0xFF9920")]
			set
			{
			}
		}

		[Token(Token = "0x17000175")]
		public int roundCapLatitude
		{
			[Token(Token = "0x6000D39")]
			[Address(RVA = "0xFF9944", Offset = "0xFF9944", VA = "0xFF9944")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000D3A")]
			[Address(RVA = "0xFF994C", Offset = "0xFF994C", VA = "0xFF994C")]
			set
			{
			}
		}

		[Token(Token = "0x17000176")]
		public float integrity
		{
			[Token(Token = "0x6000D3B")]
			[Address(RVA = "0xFF9984", Offset = "0xFF9984", VA = "0xFF9984")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D3C")]
			[Address(RVA = "0xFF998C", Offset = "0xFF998C", VA = "0xFF998C")]
			set
			{
			}
		}

		[Token(Token = "0x17000177")]
		public float capUVScale
		{
			[Token(Token = "0x6000D3D")]
			[Address(RVA = "0xFF99B0", Offset = "0xFF99B0", VA = "0xFF99B0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D3E")]
			[Address(RVA = "0xFF99B8", Offset = "0xFF99B8", VA = "0xFF99B8")]
			set
			{
			}
		}

		[Token(Token = "0x17000178")]
		private bool useCap
		{
			[Token(Token = "0x6000D3F")]
			[Address(RVA = "0xFF99DC", Offset = "0xFF99DC", VA = "0xFF99DC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000D40")]
		[Address(RVA = "0xFF9B9C", Offset = "0xFF9B9C", VA = "0xFF9B9C", Slot = "5")]
		protected override void Reset()
		{
		}

		[Token(Token = "0x6000D41")]
		[Address(RVA = "0xFF9BA4", Offset = "0xFF9BA4", VA = "0xFF9BA4", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000D42")]
		[Address(RVA = "0xFF9C04", Offset = "0xFF9C04", VA = "0xFF9C04", Slot = "29")]
		protected override void BuildMesh()
		{
		}

		[Token(Token = "0x6000D43")]
		[Address(RVA = "0xFF9D78", Offset = "0xFF9D78", VA = "0xFF9D78")]
		private void Generate()
		{
		}

		[Token(Token = "0x6000D44")]
		[Address(RVA = "0xFFA44C", Offset = "0xFFA44C", VA = "0xFFA44C")]
		private void GenerateFlatCaps()
		{
		}

		[Token(Token = "0x6000D45")]
		[Address(RVA = "0xFFAB1C", Offset = "0xFFAB1C", VA = "0xFFAB1C")]
		private void GenerateRoundCaps()
		{
		}

		[Token(Token = "0x6000D46")]
		[Address(RVA = "0xFFBB2C", Offset = "0xFFBB2C", VA = "0xFFBB2C")]
		public TubeGenerator()
		{
		}
	}
	[Token(Token = "0x2000242")]
	[AddComponentMenu("Dreamteck/Splines/Waveform Generator")]
	[RequireComponent(typeof(MeshRenderer))]
	[RequireComponent(typeof(MeshFilter))]
	public class WaveformGenerator : MeshGenerator
	{
		[Token(Token = "0x2000243")]
		public enum Axis
		{
			[Token(Token = "0x4000B74")]
			X,
			[Token(Token = "0x4000B75")]
			Y,
			[Token(Token = "0x4000B76")]
			Z
		}

		[Token(Token = "0x2000244")]
		public enum Space
		{
			[Token(Token = "0x4000B78")]
			World,
			[Token(Token = "0x4000B79")]
			Local
		}

		[Token(Token = "0x2000245")]
		public enum UVWrapMode
		{
			[Token(Token = "0x4000B7B")]
			Clamp,
			[Token(Token = "0x4000B7C")]
			UniformX,
			[Token(Token = "0x4000B7D")]
			UniformY,
			[Token(Token = "0x4000B7E")]
			Uniform
		}

		[Token(Token = "0x4000B6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[SerializeField]
		[HideInInspector]
		private Axis _axis;

		[Token(Token = "0x4000B70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		[SerializeField]
		[HideInInspector]
		private bool _symmetry;

		[Token(Token = "0x4000B71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[SerializeField]
		[HideInInspector]
		private UVWrapMode _uvWrapMode;

		[Token(Token = "0x4000B72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		[SerializeField]
		[HideInInspector]
		private int _slices;

		[Token(Token = "0x17000179")]
		public Axis axis
		{
			[Token(Token = "0x6000D47")]
			[Address(RVA = "0xFFBBA0", Offset = "0xFFBBA0", VA = "0xFFBBA0")]
			get
			{
				return default(Axis);
			}
			[Token(Token = "0x6000D48")]
			[Address(RVA = "0xFFBBA8", Offset = "0xFFBBA8", VA = "0xFFBBA8")]
			set
			{
			}
		}

		[Token(Token = "0x1700017A")]
		public bool symmetry
		{
			[Token(Token = "0x6000D49")]
			[Address(RVA = "0xFFBBCC", Offset = "0xFFBBCC", VA = "0xFFBBCC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D4A")]
			[Address(RVA = "0xFFBBD4", Offset = "0xFFBBD4", VA = "0xFFBBD4")]
			set
			{
			}
		}

		[Token(Token = "0x1700017B")]
		public UVWrapMode uvWrapMode
		{
			[Token(Token = "0x6000D4B")]
			[Address(RVA = "0xFFBBFC", Offset = "0xFFBBFC", VA = "0xFFBBFC")]
			get
			{
				return default(UVWrapMode);
			}
			[Token(Token = "0x6000D4C")]
			[Address(RVA = "0xFFBC04", Offset = "0xFFBC04", VA = "0xFFBC04")]
			set
			{
			}
		}

		[Token(Token = "0x1700017C")]
		public int slices
		{
			[Token(Token = "0x6000D4D")]
			[Address(RVA = "0xFFBC28", Offset = "0xFFBC28", VA = "0xFFBC28")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000D4E")]
			[Address(RVA = "0xFFBC30", Offset = "0xFFBC30", VA = "0xFFBC30")]
			set
			{
			}
		}

		[Token(Token = "0x6000D4F")]
		[Address(RVA = "0xFFBC5C", Offset = "0xFFBC5C", VA = "0xFFBC5C", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000D50")]
		[Address(RVA = "0xFFBCBC", Offset = "0xFFBCBC", VA = "0xFFBCBC", Slot = "29")]
		protected override void BuildMesh()
		{
		}

		[Token(Token = "0x6000D51")]
		[Address(RVA = "0xFFC5B0", Offset = "0xFFC5B0", VA = "0xFFC5B0", Slot = "20")]
		protected override void Build()
		{
		}

		[Token(Token = "0x6000D52")]
		[Address(RVA = "0xFFC5B8", Offset = "0xFFC5B8", VA = "0xFFC5B8", Slot = "19")]
		protected override void LateRun()
		{
		}

		[Token(Token = "0x6000D53")]
		[Address(RVA = "0xFFBCD8", Offset = "0xFFBCD8", VA = "0xFFBCD8")]
		private void Generate()
		{
		}

		[Token(Token = "0x6000D54")]
		[Address(RVA = "0xFFC5C0", Offset = "0xFFC5C0", VA = "0xFFC5C0")]
		public WaveformGenerator()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000246")]
	public class CustomOffsetModule
	{
		[Serializable]
		[Token(Token = "0x2000247")]
		public class Key
		{
			[Token(Token = "0x4000B81")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[SerializeField]
			private Vector2 _offset;

			[Token(Token = "0x4000B82")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[SerializeField]
			private double _from;

			[Token(Token = "0x4000B83")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[SerializeField]
			private double _to;

			[Token(Token = "0x4000B84")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[SerializeField]
			private double _center;

			[Token(Token = "0x4000B85")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[SerializeField]
			private bool _loop;

			[Token(Token = "0x4000B86")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public AnimationCurve interpolation;

			[Token(Token = "0x1700017E")]
			public Vector2 offset
			{
				[Token(Token = "0x6000D5A")]
				[Address(RVA = "0xFFC8C8", Offset = "0xFFC8C8", VA = "0xFFC8C8")]
				get
				{
					return default(Vector2);
				}
				[Token(Token = "0x6000D5B")]
				[Address(RVA = "0xFFC8D0", Offset = "0xFFC8D0", VA = "0xFFC8D0")]
				set
				{
				}
			}

			[Token(Token = "0x1700017F")]
			public double center
			{
				[Token(Token = "0x6000D5C")]
				[Address(RVA = "0xFFC8D8", Offset = "0xFFC8D8", VA = "0xFFC8D8")]
				get
				{
					return default(double);
				}
				[Token(Token = "0x6000D5D")]
				[Address(RVA = "0xFFC8E0", Offset = "0xFFC8E0", VA = "0xFFC8E0")]
				set
				{
				}
			}

			[Token(Token = "0x17000180")]
			public double from
			{
				[Token(Token = "0x6000D5E")]
				[Address(RVA = "0xFFC8FC", Offset = "0xFFC8FC", VA = "0xFFC8FC")]
				get
				{
					return default(double);
				}
				[Token(Token = "0x6000D5F")]
				[Address(RVA = "0xFFC904", Offset = "0xFFC904", VA = "0xFFC904")]
				set
				{
				}
			}

			[Token(Token = "0x17000181")]
			public double to
			{
				[Token(Token = "0x6000D60")]
				[Address(RVA = "0xFFC920", Offset = "0xFFC920", VA = "0xFFC920")]
				get
				{
					return default(double);
				}
				[Token(Token = "0x6000D61")]
				[Address(RVA = "0xFFC928", Offset = "0xFFC928", VA = "0xFFC928")]
				set
				{
				}
			}

			[Token(Token = "0x17000182")]
			public bool loop
			{
				[Token(Token = "0x6000D62")]
				[Address(RVA = "0xFFC944", Offset = "0xFFC944", VA = "0xFFC944")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6000D63")]
				[Address(RVA = "0xFFC94C", Offset = "0xFFC94C", VA = "0xFFC94C")]
				set
				{
				}
			}

			[Token(Token = "0x17000183")]
			public double position
			{
				[Token(Token = "0x6000D64")]
				[Address(RVA = "0xFFC848", Offset = "0xFFC848", VA = "0xFFC848")]
				get
				{
					return default(double);
				}
				[Token(Token = "0x6000D65")]
				[Address(RVA = "0xFFC958", Offset = "0xFFC958", VA = "0xFFC958")]
				set
				{
				}
			}

			[Token(Token = "0x6000D66")]
			[Address(RVA = "0xFFC768", Offset = "0xFFC768", VA = "0xFFC768")]
			public Key(Vector2 o, double f, double t, double c)
			{
			}

			[Token(Token = "0x6000D67")]
			[Address(RVA = "0xFFC8AC", Offset = "0xFFC8AC", VA = "0xFFC8AC")]
			public float Evaluate(float t)
			{
				return default(float);
			}
		}

		[Token(Token = "0x4000B7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<Key> keys;

		[Token(Token = "0x4000B80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float _blend;

		[Token(Token = "0x1700017D")]
		public float blend
		{
			[Token(Token = "0x6000D55")]
			[Address(RVA = "0xFFC624", Offset = "0xFFC624", VA = "0xFFC624")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D56")]
			[Address(RVA = "0xFFC62C", Offset = "0xFFC62C", VA = "0xFFC62C")]
			set
			{
			}
		}

		[Token(Token = "0x6000D57")]
		[Address(RVA = "0xFEF968", Offset = "0xFEF968", VA = "0xFEF968")]
		public CustomOffsetModule()
		{
		}

		[Token(Token = "0x6000D58")]
		[Address(RVA = "0xFFC648", Offset = "0xFFC648", VA = "0xFFC648")]
		public void AddKey(Vector2 offset, double f, double t, double c)
		{
		}

		[Token(Token = "0x6000D59")]
		[Address(RVA = "0xFEFA34", Offset = "0xFEFA34", VA = "0xFEFA34")]
		public Vector2 Evaluate(double time)
		{
			return default(Vector2);
		}
	}
	[Serializable]
	[Token(Token = "0x2000248")]
	public class CustomRotationModule
	{
		[Serializable]
		[Token(Token = "0x2000249")]
		public class Key
		{
			[Token(Token = "0x4000B89")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[SerializeField]
			private Vector3 _rotation;

			[Token(Token = "0x4000B8A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[SerializeField]
			private double _from;

			[Token(Token = "0x4000B8B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[SerializeField]
			private double _to;

			[Token(Token = "0x4000B8C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[SerializeField]
			private double _center;

			[Token(Token = "0x4000B8D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[SerializeField]
			private bool _loop;

			[Token(Token = "0x4000B8E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public AnimationCurve interpolation;

			[Token(Token = "0x17000185")]
			public Vector3 rotation
			{
				[Token(Token = "0x6000D6D")]
				[Address(RVA = "0xFFE1E8", Offset = "0xFFE1E8", VA = "0xFFE1E8")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6000D6E")]
				[Address(RVA = "0xFFE1F4", Offset = "0xFFE1F4", VA = "0xFFE1F4")]
				set
				{
				}
			}

			[Token(Token = "0x17000186")]
			public double center
			{
				[Token(Token = "0x6000D6F")]
				[Address(RVA = "0xFFE200", Offset = "0xFFE200", VA = "0xFFE200")]
				get
				{
					return default(double);
				}
				[Token(Token = "0x6000D70")]
				[Address(RVA = "0xFFE208", Offset = "0xFFE208", VA = "0xFFE208")]
				set
				{
				}
			}

			[Token(Token = "0x17000187")]
			public double from
			{
				[Token(Token = "0x6000D71")]
				[Address(RVA = "0xFFE224", Offset = "0xFFE224", VA = "0xFFE224")]
				get
				{
					return default(double);
				}
				[Token(Token = "0x6000D72")]
				[Address(RVA = "0xFFE22C", Offset = "0xFFE22C", VA = "0xFFE22C")]
				set
				{
				}
			}

			[Token(Token = "0x17000188")]
			public double to
			{
				[Token(Token = "0x6000D73")]
				[Address(RVA = "0xFFE248", Offset = "0xFFE248", VA = "0xFFE248")]
				get
				{
					return default(double);
				}
				[Token(Token = "0x6000D74")]
				[Address(RVA = "0xFFE250", Offset = "0xFFE250", VA = "0xFFE250")]
				set
				{
				}
			}

			[Token(Token = "0x17000189")]
			public bool loop
			{
				[Token(Token = "0x6000D75")]
				[Address(RVA = "0xFFE26C", Offset = "0xFFE26C", VA = "0xFFE26C")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6000D76")]
				[Address(RVA = "0xFFE274", Offset = "0xFFE274", VA = "0xFFE274")]
				set
				{
				}
			}

			[Token(Token = "0x1700018A")]
			public double position
			{
				[Token(Token = "0x6000D77")]
				[Address(RVA = "0xFFE168", Offset = "0xFFE168", VA = "0xFFE168")]
				get
				{
					return default(double);
				}
				[Token(Token = "0x6000D78")]
				[Address(RVA = "0xFFE280", Offset = "0xFFE280", VA = "0xFFE280")]
				set
				{
				}
			}

			[Token(Token = "0x6000D79")]
			[Address(RVA = "0xFFDBDC", Offset = "0xFFDBDC", VA = "0xFFDBDC")]
			public Key(Vector3 r, double f, double t, double c)
			{
			}

			[Token(Token = "0x6000D7A")]
			[Address(RVA = "0xFFE1CC", Offset = "0xFFE1CC", VA = "0xFFE1CC")]
			public float Evaluate(float t)
			{
				return default(float);
			}
		}

		[Token(Token = "0x4000B87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<Key> keys;

		[Token(Token = "0x4000B88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float _blend;

		[Token(Token = "0x17000184")]
		public float blend
		{
			[Token(Token = "0x6000D68")]
			[Address(RVA = "0xFFD9CC", Offset = "0xFFD9CC", VA = "0xFFD9CC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D69")]
			[Address(RVA = "0xFFD9D4", Offset = "0xFFD9D4", VA = "0xFFD9D4")]
			set
			{
			}
		}

		[Token(Token = "0x6000D6A")]
		[Address(RVA = "0xFFD9F0", Offset = "0xFFD9F0", VA = "0xFFD9F0")]
		public CustomRotationModule()
		{
		}

		[Token(Token = "0x6000D6B")]
		[Address(RVA = "0xFFDAB4", Offset = "0xFFDAB4", VA = "0xFFDAB4")]
		public void AddKey(Vector3 rotation, double f, double t, double c)
		{
		}

		[Token(Token = "0x6000D6C")]
		[Address(RVA = "0xFFDCCC", Offset = "0xFFDCCC", VA = "0xFFDCCC")]
		public Quaternion Evaluate(Quaternion baseRotation, double time)
		{
			return default(Quaternion);
		}
	}
	[Serializable]
	[Token(Token = "0x200024A")]
	public class ObjectSequence<T>
	{
		[Token(Token = "0x200024B")]
		public enum Iteration
		{
			[Token(Token = "0x4000B97")]
			Ordered,
			[Token(Token = "0x4000B98")]
			Random
		}

		[Token(Token = "0x4000B8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T startObject;

		[Token(Token = "0x4000B90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T endObject;

		[Token(Token = "0x4000B91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T[] objects;

		[Token(Token = "0x4000B92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Iteration iteration;

		[Token(Token = "0x4000B93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		[HideInInspector]
		private int _randomSeed;

		[Token(Token = "0x4000B94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		[HideInInspector]
		private int index;

		[Token(Token = "0x4000B95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		[HideInInspector]
		private System.Random randomizer;

		[Token(Token = "0x1700018B")]
		public int randomSeed
		{
			[Token(Token = "0x6000D7B")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000D7C")]
			set
			{
			}
		}

		[Token(Token = "0x6000D7D")]
		public ObjectSequence()
		{
		}

		[Token(Token = "0x6000D7E")]
		public T GetFirst()
		{
			return (T)null;
		}

		[Token(Token = "0x6000D7F")]
		public T GetLast()
		{
			return (T)null;
		}

		[Token(Token = "0x6000D80")]
		public T Next()
		{
			return (T)null;
		}
	}
	[Serializable]
	[Token(Token = "0x200024C")]
	public class Spline
	{
		[Token(Token = "0x200024D")]
		public enum Direction
		{
			[Token(Token = "0x4000BA1")]
			Forward = 1,
			[Token(Token = "0x4000BA2")]
			Backward = -1
		}

		[Token(Token = "0x200024E")]
		public enum Type
		{
			[Token(Token = "0x4000BA4")]
			Hermite,
			[Token(Token = "0x4000BA5")]
			BSpline,
			[Token(Token = "0x4000BA6")]
			Bezier,
			[Token(Token = "0x4000BA7")]
			Linear
		}

		[Token(Token = "0x4000B99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public SplinePoint[] points;

		[Token(Token = "0x4000B9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private bool closed;

		[Token(Token = "0x4000B9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Type type;

		[Token(Token = "0x4000B9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AnimationCurve customValueInterpolation;

		[Token(Token = "0x4000B9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimationCurve customNormalInterpolation;

		[Token(Token = "0x4000B9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Range(0f, 0.9999f)]
		public double precision;

		[Token(Token = "0x4000B9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3[] hermitePoints;

		[Token(Token = "0x1700018C")]
		public bool isClosed
		{
			[Token(Token = "0x6000D81")]
			[Address(RVA = "0xFFE2F4", Offset = "0xFFE2F4", VA = "0xFFE2F4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D82")]
			[Address(RVA = "0xFFE328", Offset = "0xFFE328", VA = "0xFFE328")]
			set
			{
			}
		}

		[Token(Token = "0x1700018D")]
		public double moveStep
		{
			[Token(Token = "0x6000D83")]
			[Address(RVA = "0xFFE32C", Offset = "0xFFE32C", VA = "0xFFE32C")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6000D84")]
			[Address(RVA = "0xFFE3CC", Offset = "0xFFE3CC", VA = "0xFFE3CC")]
			set
			{
			}
		}

		[Token(Token = "0x1700018E")]
		public int iterations
		{
			[Token(Token = "0x6000D85")]
			[Address(RVA = "0xFFE370", Offset = "0xFFE370", VA = "0xFFE370")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000D86")]
			[Address(RVA = "0xFFE3D0", Offset = "0xFFE3D0", VA = "0xFFE3D0")]
			set
			{
			}
		}

		[Token(Token = "0x6000D87")]
		[Address(RVA = "0xFFE3D4", Offset = "0xFFE3D4", VA = "0xFFE3D4")]
		public Spline(Type t)
		{
		}

		[Token(Token = "0x6000D88")]
		[Address(RVA = "0xFFE4B0", Offset = "0xFFE4B0", VA = "0xFFE4B0")]
		public Spline(Type t, double p)
		{
		}

		[Token(Token = "0x6000D89")]
		[Address(RVA = "0xFFE59C", Offset = "0xFFE59C", VA = "0xFFE59C")]
		public float CalculateLength(double from = 0.0, double to = 1.0, double resolution = 1.0)
		{
			return default(float);
		}

		[Token(Token = "0x6000D8A")]
		[Address(RVA = "0xFFE7A4", Offset = "0xFFE7A4", VA = "0xFFE7A4")]
		public double Project(Vector3 point, int subdivide = 3, double from = 0.0, double to = 1.0)
		{
			return default(double);
		}

		[Token(Token = "0x6000D8B")]
		[Address(RVA = "0xFFED14", Offset = "0xFFED14", VA = "0xFFED14")]
		public bool Raycast(out RaycastHit hit, out double hitPercent, LayerMask layerMask, double resolution = 1.0, double from = 0.0, double to = 1.0, QueryTriggerInteraction hitTriggers = QueryTriggerInteraction.UseGlobal)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D8C")]
		[Address(RVA = "0xFFEEF0", Offset = "0xFFEEF0", VA = "0xFFEEF0")]
		public bool RaycastAll(out RaycastHit[] hits, out double[] hitPercents, LayerMask layerMask, double resolution = 1.0, double from = 0.0, double to = 1.0, QueryTriggerInteraction hitTriggers = QueryTriggerInteraction.UseGlobal)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D8D")]
		[Address(RVA = "0xFFF40C", Offset = "0xFFF40C", VA = "0xFFF40C")]
		public double GetPointPercent(int pointIndex)
		{
			return default(double);
		}

		[Token(Token = "0x6000D8E")]
		[Address(RVA = "0xFFE718", Offset = "0xFFE718", VA = "0xFFE718")]
		public Vector3 EvaluatePosition(double percent)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000D8F")]
		[Address(RVA = "0xFFF4C4", Offset = "0xFFF4C4", VA = "0xFFF4C4")]
		public SplineResult Evaluate(double percent)
		{
			return null;
		}

		[Token(Token = "0x6000D90")]
		[Address(RVA = "0xFFFD14", Offset = "0xFFFD14", VA = "0xFFFD14")]
		public SplineResult Evaluate(int pointIndex)
		{
			return null;
		}

		[Token(Token = "0x6000D91")]
		[Address(RVA = "0xFFFD94", Offset = "0xFFFD94", VA = "0xFFFD94")]
		public void Evaluate(SplineResult result, int pointIndex)
		{
		}

		[Token(Token = "0x6000D92")]
		[Address(RVA = "0xFFF614", Offset = "0xFFF614", VA = "0xFFF614")]
		public void Evaluate(SplineResult result, double percent)
		{
		}

		[Token(Token = "0x6000D93")]
		[Address(RVA = "0xFFFDC0", Offset = "0xFFFDC0", VA = "0xFFFDC0")]
		public void Evaluate(ref SplineResult[] samples, double from = 0.0, double to = 1.0)
		{
		}

		[Token(Token = "0x6000D94")]
		[Address(RVA = "0xFFFFF0", Offset = "0xFFFFF0", VA = "0xFFFFF0")]
		public void EvaluatePositions(ref Vector3[] positions, double from = 0.0, double to = 1.0)
		{
		}

		[Token(Token = "0x6000D95")]
		[Address(RVA = "0x10001BC", Offset = "0x10001BC", VA = "0x10001BC")]
		public double Travel(double start, float distance, Direction direction)
		{
			return default(double);
		}

		[Token(Token = "0x6000D96")]
		[Address(RVA = "0xFFF43C", Offset = "0xFFF43C", VA = "0xFFF43C")]
		private void EvaluatePosition(ref Vector3 point, double percent)
		{
		}

		[Token(Token = "0x6000D97")]
		[Address(RVA = "0xFFEB08", Offset = "0xFFEB08", VA = "0xFFEB08")]
		private double GetClosestPoint(int iterations, Vector3 point, double start, double end, int slices)
		{
			return default(double);
		}

		[Token(Token = "0x6000D98")]
		[Address(RVA = "0x1000560", Offset = "0x1000560", VA = "0x1000560")]
		public void Break()
		{
		}

		[Token(Token = "0x6000D99")]
		[Address(RVA = "0x1000568", Offset = "0x1000568", VA = "0x1000568")]
		public void Break(int at)
		{
		}

		[Token(Token = "0x6000D9A")]
		[Address(RVA = "0x10007A0", Offset = "0x10007A0", VA = "0x10007A0")]
		public void Close()
		{
		}

		[Token(Token = "0x6000D9B")]
		[Address(RVA = "0x1000838", Offset = "0x1000838", VA = "0x1000838")]
		public void ConvertToBezier()
		{
		}

		[Token(Token = "0x6000D9C")]
		[Address(RVA = "0x1000404", Offset = "0x1000404", VA = "0x1000404")]
		private void GetPoint(ref Vector3 point, double percent, int pointIndex)
		{
		}

		[Token(Token = "0x6000D9D")]
		[Address(RVA = "0x1001410", Offset = "0x1001410", VA = "0x1001410")]
		private void LinearGetPoint(ref Vector3 point, double t, int i)
		{
		}

		[Token(Token = "0x6000D9E")]
		[Address(RVA = "0x100124C", Offset = "0x100124C", VA = "0x100124C")]
		private void BSPGetPoint(ref Vector3 point, double t, int i)
		{
		}

		[Token(Token = "0x6000D9F")]
		[Address(RVA = "0x10010B0", Offset = "0x10010B0", VA = "0x10010B0")]
		private void BezierGetPoint(ref Vector3 point, double t, int i)
		{
		}

		[Token(Token = "0x6000DA0")]
		[Address(RVA = "0x1000EB0", Offset = "0x1000EB0", VA = "0x1000EB0")]
		private void HermiteGetPoint(ref Vector3 point, double t, int i)
		{
		}

		[Token(Token = "0x6000DA1")]
		[Address(RVA = "0x1000BEC", Offset = "0x1000BEC", VA = "0x1000BEC")]
		private void GetHermitePoints(int i)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200024F")]
	public class SplineAddress
	{
		[Serializable]
		[Token(Token = "0x2000250")]
		public class Element
		{
			[Token(Token = "0x4000BA9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public SplineComputer computer;

			[Token(Token = "0x4000BAA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[SerializeField]
			private int _startPoint;

			[Token(Token = "0x4000BAB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[SerializeField]
			private int _endPoint;

			[Token(Token = "0x17000193")]
			public int startPoint
			{
				[Token(Token = "0x6000DBD")]
				[Address(RVA = "0x1003DA0", Offset = "0x1003DA0", VA = "0x1003DA0")]
				get
				{
					return default(int);
				}
				[Token(Token = "0x6000DBE")]
				[Address(RVA = "0x1003508", Offset = "0x1003508", VA = "0x1003508")]
				set
				{
				}
			}

			[Token(Token = "0x17000194")]
			public int endPoint
			{
				[Token(Token = "0x6000DBF")]
				[Address(RVA = "0x10034D8", Offset = "0x10034D8", VA = "0x10034D8")]
				get
				{
					return default(int);
				}
				[Token(Token = "0x6000DC0")]
				[Address(RVA = "0x10016D4", Offset = "0x10016D4", VA = "0x10016D4")]
				set
				{
				}
			}

			[Token(Token = "0x17000195")]
			public double startPercent
			{
				[Token(Token = "0x6000DC1")]
				[Address(RVA = "0x100241C", Offset = "0x100241C", VA = "0x100241C")]
				get
				{
					return default(double);
				}
			}

			[Token(Token = "0x17000196")]
			public double endPercent
			{
				[Token(Token = "0x6000DC2")]
				[Address(RVA = "0x1002454", Offset = "0x1002454", VA = "0x1002454")]
				get
				{
					return default(double);
				}
			}

			[Token(Token = "0x17000197")]
			public int span
			{
				[Token(Token = "0x6000DC3")]
				[Address(RVA = "0x1002384", Offset = "0x1002384", VA = "0x1002384")]
				get
				{
					return default(int);
				}
			}

			[Token(Token = "0x6000DC4")]
			[Address(RVA = "0x10016C4", Offset = "0x10016C4", VA = "0x10016C4")]
			public Element()
			{
			}
		}

		[Token(Token = "0x4000BA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Element[] _elements;

		[Token(Token = "0x1700018F")]
		public int depth
		{
			[Token(Token = "0x6000DA2")]
			[Address(RVA = "0x1001550", Offset = "0x1001550", VA = "0x1001550")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000190")]
		public SplineComputer root
		{
			[Token(Token = "0x6000DA3")]
			[Address(RVA = "0x1001568", Offset = "0x1001568", VA = "0x1001568")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000DA4")]
			[Address(RVA = "0x10015A0", Offset = "0x10015A0", VA = "0x10015A0")]
			set
			{
			}
		}

		[Token(Token = "0x17000191")]
		public Element[] elements
		{
			[Token(Token = "0x6000DA5")]
			[Address(RVA = "0x1001830", Offset = "0x1001830", VA = "0x1001830")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000192")]
		public double moveStep
		{
			[Token(Token = "0x6000DA6")]
			[Address(RVA = "0x1001838", Offset = "0x1001838", VA = "0x1001838")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x6000DA7")]
		[Address(RVA = "0x1001A30", Offset = "0x1001A30", VA = "0x1001A30")]
		public SplineAddress(SplineComputer rootComp)
		{
		}

		[Token(Token = "0x6000DA8")]
		[Address(RVA = "0x1001B68", Offset = "0x1001B68", VA = "0x1001B68")]
		public SplineAddress(SplineAddress copy)
		{
		}

		[Token(Token = "0x6000DA9")]
		[Address(RVA = "0x1001D10", Offset = "0x1001D10", VA = "0x1001D10")]
		public SplineResult Evaluate(double percent)
		{
			return null;
		}

		[Token(Token = "0x6000DAA")]
		[Address(RVA = "0x1001D88", Offset = "0x1001D88", VA = "0x1001D88")]
		public void Evaluate(SplineResult result, double percent)
		{
		}

		[Token(Token = "0x6000DAB")]
		[Address(RVA = "0x10020B0", Offset = "0x10020B0", VA = "0x10020B0")]
		public Vector3 EvaluatePosition(double percent)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000DAC")]
		[Address(RVA = "0x1002494", Offset = "0x1002494", VA = "0x1002494")]
		public double Project(Vector3 point, int subdivide = 4, double from = 0.0, double to = 1.0)
		{
			return default(double);
		}

		[Token(Token = "0x6000DAD")]
		[Address(RVA = "0x1002A60", Offset = "0x1002A60", VA = "0x1002A60")]
		public float CalculateLength(double from = 0.0, double to = 1.0)
		{
			return default(float);
		}

		[Token(Token = "0x6000DAE")]
		[Address(RVA = "0x1002B94", Offset = "0x1002B94", VA = "0x1002B94")]
		public double Travel(double start, float distance, Spline.Direction direction, int iterations)
		{
			return default(double);
		}

		[Token(Token = "0x6000DAF")]
		[Address(RVA = "0x1002D84", Offset = "0x1002D84", VA = "0x1002D84")]
		public int GetElementIndex(double percent)
		{
			return default(int);
		}

		[Token(Token = "0x6000DB0")]
		[Address(RVA = "0x10026A8", Offset = "0x10026A8", VA = "0x10026A8")]
		public double PathToLocalPercent(double pathPercent, int elementIndex)
		{
			return default(double);
		}

		[Token(Token = "0x6000DB1")]
		[Address(RVA = "0x1002894", Offset = "0x1002894", VA = "0x1002894")]
		public double LocalToPathPercent(double localPercent, int elementIndex)
		{
			return default(double);
		}

		[Token(Token = "0x6000DB2")]
		[Address(RVA = "0x100192C", Offset = "0x100192C", VA = "0x100192C")]
		public int GetTotalPointCount()
		{
			return default(int);
		}

		[Token(Token = "0x6000DB3")]
		[Address(RVA = "0x1001E90", Offset = "0x1001E90", VA = "0x1001E90")]
		public void GetEvaluationValues(double inputPercent, out SplineComputer computer, out double percent, out Spline.Direction direction)
		{
		}

		[Token(Token = "0x6000DB4")]
		[Address(RVA = "0x1002F4C", Offset = "0x1002F4C", VA = "0x1002F4C")]
		private int LocalToPathPoint(int point, int elementIndex)
		{
			return default(int);
		}

		[Token(Token = "0x6000DB5")]
		[Address(RVA = "0x1003034", Offset = "0x1003034", VA = "0x1003034")]
		private void PathToLocalPoint(int point, out int computerIndex, out int localPoint)
		{
		}

		[Token(Token = "0x6000DB6")]
		[Address(RVA = "0x1003128", Offset = "0x1003128", VA = "0x1003128")]
		[Obsolete("Enter is obsolete, use AddSpline instead")]
		public void Enter(Node node, int connectionIndex, Spline.Direction direction = Spline.Direction.Forward)
		{
		}

		[Token(Token = "0x6000DB7")]
		[Address(RVA = "0x100312C", Offset = "0x100312C", VA = "0x100312C")]
		public void AddSpline(Node node, int connectionIndex, Spline.Direction direction = Spline.Direction.Forward)
		{
		}

		[Token(Token = "0x6000DB8")]
		[Address(RVA = "0x1003628", Offset = "0x1003628", VA = "0x1003628")]
		public void AddSpline(SplineComputer computer, int connectionIndex, int connectedIndex, Spline.Direction direction = Spline.Direction.Forward)
		{
		}

		[Token(Token = "0x6000DB9")]
		[Address(RVA = "0x10039CC", Offset = "0x10039CC", VA = "0x10039CC")]
		public void Exit(int exitDepth)
		{
		}

		[Token(Token = "0x6000DBA")]
		[Address(RVA = "0x1003B48", Offset = "0x1003B48", VA = "0x1003B48")]
		public void Collapse()
		{
		}

		[Token(Token = "0x6000DBB")]
		[Address(RVA = "0x1003CC8", Offset = "0x1003CC8", VA = "0x1003CC8")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000DBC")]
		[Address(RVA = "0x1001C38", Offset = "0x1001C38", VA = "0x1001C38")]
		private void AddElement(Element element)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000251")]
	public struct SplinePoint
	{
		[Token(Token = "0x2000252")]
		public enum Type
		{
			[Token(Token = "0x4000BB4")]
			SmoothMirrored,
			[Token(Token = "0x4000BB5")]
			Broken,
			[Token(Token = "0x4000BB6")]
			SmoothFree
		}

		[Token(Token = "0x4000BAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[FormerlySerializedAs("type")]
		public Type _type;

		[Token(Token = "0x4000BAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public Vector3 position;

		[Token(Token = "0x4000BAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Color color;

		[Token(Token = "0x4000BAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 normal;

		[Token(Token = "0x4000BB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float size;

		[Token(Token = "0x4000BB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 tangent;

		[Token(Token = "0x4000BB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector3 tangent2;

		[Token(Token = "0x17000198")]
		public Type type
		{
			[Token(Token = "0x6000DC5")]
			[Address(RVA = "0x1003DA8", Offset = "0x1003DA8", VA = "0x1003DA8")]
			get
			{
				return default(Type);
			}
			[Token(Token = "0x6000DC6")]
			[Address(RVA = "0x1000B2C", Offset = "0x1000B2C", VA = "0x1000B2C")]
			set
			{
			}
		}

		[Token(Token = "0x6000DC7")]
		[Address(RVA = "0x1003DDC", Offset = "0x1003DDC", VA = "0x1003DDC")]
		public static SplinePoint Lerp(SplinePoint a, SplinePoint b, float t)
		{
			return default(SplinePoint);
		}

		[Token(Token = "0x6000DC8")]
		[Address(RVA = "0x1003F88", Offset = "0x1003F88", VA = "0x1003F88")]
		private static void GetInterpolatedTangents(SplinePoint a, SplinePoint b, float t, out Vector3 t1, out Vector3 t2)
		{
		}

		[Token(Token = "0x6000DC9")]
		[Address(RVA = "0x100403C", Offset = "0x100403C", VA = "0x100403C")]
		public void SetPosition(Vector3 pos)
		{
		}

		[Token(Token = "0x6000DCA")]
		[Address(RVA = "0x1000B64", Offset = "0x1000B64", VA = "0x1000B64")]
		public void SetTangentPosition(Vector3 pos)
		{
		}

		[Token(Token = "0x6000DCB")]
		[Address(RVA = "0x1000BA8", Offset = "0x1000BA8", VA = "0x1000BA8")]
		public void SetTangent2Position(Vector3 pos)
		{
		}

		[Token(Token = "0x6000DCC")]
		[Address(RVA = "0x10043C0", Offset = "0x10043C0", VA = "0x10043C0")]
		public SplinePoint(Vector3 p)
		{
		}

		[Token(Token = "0x6000DCD")]
		[Address(RVA = "0x1004474", Offset = "0x1004474", VA = "0x1004474")]
		public SplinePoint(Vector3 p, Vector3 t)
		{
		}

		[Token(Token = "0x6000DCE")]
		[Address(RVA = "0x1004534", Offset = "0x1004534", VA = "0x1004534")]
		public SplinePoint(Vector3 pos, Vector3 tan, Vector3 nor, float s, Color col)
		{
		}

		[Token(Token = "0x6000DCF")]
		[Address(RVA = "0x1004584", Offset = "0x1004584", VA = "0x1004584")]
		public SplinePoint(Vector3 pos, Vector3 tan, Vector3 tan2, Vector3 nor, float s, Color col)
		{
		}

		[Token(Token = "0x6000DD0")]
		[Address(RVA = "0x10045CC", Offset = "0x10045CC", VA = "0x10045CC")]
		public SplinePoint(SplinePoint source)
		{
		}

		[Token(Token = "0x6000DD1")]
		[Address(RVA = "0x1003DB0", Offset = "0x1003DB0", VA = "0x1003DB0")]
		private void SmoothMirrorTangent2()
		{
		}

		[Token(Token = "0x6000DD2")]
		[Address(RVA = "0x100420C", Offset = "0x100420C", VA = "0x100420C")]
		private void SmoothMirrorTangent()
		{
		}

		[Token(Token = "0x6000DD3")]
		[Address(RVA = "0x1004084", Offset = "0x1004084", VA = "0x1004084")]
		private void SmoothFreeTangent2()
		{
		}

		[Token(Token = "0x6000DD4")]
		[Address(RVA = "0x1004238", Offset = "0x1004238", VA = "0x1004238")]
		private void SmoothFreeTangent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000253")]
	public class SplineResult
	{
		[Token(Token = "0x4000BB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 position;

		[Token(Token = "0x4000BB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 normal;

		[Token(Token = "0x4000BB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 direction;

		[Token(Token = "0x4000BBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Color color;

		[Token(Token = "0x4000BBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float size;

		[Token(Token = "0x4000BBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public double percent;

		[Token(Token = "0x17000199")]
		public Quaternion rotation
		{
			[Token(Token = "0x6000DD5")]
			[Address(RVA = "0x10046EC", Offset = "0x10046EC", VA = "0x10046EC")]
			get
			{
				return default(Quaternion);
			}
		}

		[Token(Token = "0x1700019A")]
		public Vector3 right
		{
			[Token(Token = "0x6000DD6")]
			[Address(RVA = "0x100482C", Offset = "0x100482C", VA = "0x100482C")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6000DD7")]
		[Address(RVA = "0x1004AB0", Offset = "0x1004AB0", VA = "0x1004AB0")]
		public static SplineResult Lerp(SplineResult a, SplineResult b, float t)
		{
			return null;
		}

		[Token(Token = "0x6000DD8")]
		[Address(RVA = "0x1004C40", Offset = "0x1004C40", VA = "0x1004C40")]
		public static SplineResult Lerp(SplineResult a, SplineResult b, double t)
		{
			return null;
		}

		[Token(Token = "0x6000DD9")]
		[Address(RVA = "0x1004CC8", Offset = "0x1004CC8", VA = "0x1004CC8")]
		public static void Lerp(SplineResult a, SplineResult b, double t, SplineResult target)
		{
		}

		[Token(Token = "0x6000DDA")]
		[Address(RVA = "0x1004B38", Offset = "0x1004B38", VA = "0x1004B38")]
		public static void Lerp(SplineResult a, SplineResult b, float t, SplineResult target)
		{
		}

		[Token(Token = "0x6000DDB")]
		[Address(RVA = "0x1004DD0", Offset = "0x1004DD0", VA = "0x1004DD0")]
		public void Lerp(SplineResult b, double t)
		{
		}

		[Token(Token = "0x6000DDC")]
		[Address(RVA = "0x1004DD8", Offset = "0x1004DD8", VA = "0x1004DD8")]
		public void Lerp(SplineResult b, float t)
		{
		}

		[Token(Token = "0x6000DDD")]
		[Address(RVA = "0x1004DE0", Offset = "0x1004DE0", VA = "0x1004DE0")]
		public void CopyFrom(SplineResult input)
		{
		}

		[Token(Token = "0x6000DDE")]
		[Address(RVA = "0xFFF53C", Offset = "0xFFF53C", VA = "0xFFF53C")]
		public SplineResult()
		{
		}

		[Token(Token = "0x6000DDF")]
		[Address(RVA = "0x1004E3C", Offset = "0x1004E3C", VA = "0x1004E3C")]
		public SplineResult(Vector3 p, Vector3 n, Vector3 d, Color c, float s, double t)
		{
		}

		[Token(Token = "0x6000DE0")]
		[Address(RVA = "0x1004FB4", Offset = "0x1004FB4", VA = "0x1004FB4")]
		public SplineResult(SplineResult input)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000254")]
	public class SplineAction
	{
		[Token(Token = "0x4000BBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		public UnityEngine.Object target;

		[Token(Token = "0x4000BBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int intValue;

		[Token(Token = "0x4000BBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float floatValue;

		[Token(Token = "0x4000BC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public double doubleValue;

		[Token(Token = "0x4000BC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string stringValue;

		[Token(Token = "0x4000BC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool boolValue;

		[Token(Token = "0x4000BC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject goValue;

		[Token(Token = "0x4000BC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform transformValue;

		[Token(Token = "0x4000BC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private UnityAction action;

		[Token(Token = "0x4000BC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private UnityAction<int> intAction;

		[Token(Token = "0x4000BC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private UnityAction<float> floatAction;

		[Token(Token = "0x4000BC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private UnityAction<double> doubleAction;

		[Token(Token = "0x4000BC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private UnityAction<string> stringAction;

		[Token(Token = "0x4000BCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private UnityAction<bool> boolAction;

		[Token(Token = "0x4000BCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private UnityAction<GameObject> goAction;

		[Token(Token = "0x4000BCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private UnityAction<Transform> transformAction;

		[Token(Token = "0x4000BCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private MethodInfo methodInfo;

		[Token(Token = "0x4000BCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		private string methodName;

		[Token(Token = "0x4000BCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		private int paramType;

		[Token(Token = "0x6000DE1")]
		[Address(RVA = "0x10050EC", Offset = "0x10050EC", VA = "0x10050EC")]
		public SplineAction()
		{
		}

		[Token(Token = "0x6000DE2")]
		[Address(RVA = "0x1005144", Offset = "0x1005144", VA = "0x1005144")]
		public SplineAction(UnityAction call)
		{
		}

		[Token(Token = "0x6000DE3")]
		[Address(RVA = "0x10051C0", Offset = "0x10051C0", VA = "0x10051C0")]
		public SplineAction(UnityAction<int> call, int value)
		{
		}

		[Token(Token = "0x6000DE4")]
		[Address(RVA = "0x1005248", Offset = "0x1005248", VA = "0x1005248")]
		public SplineAction(UnityAction<float> call, float value)
		{
		}

		[Token(Token = "0x6000DE5")]
		[Address(RVA = "0x10052D8", Offset = "0x10052D8", VA = "0x10052D8")]
		public SplineAction(UnityAction<double> call, double value)
		{
		}

		[Token(Token = "0x6000DE6")]
		[Address(RVA = "0x1005368", Offset = "0x1005368", VA = "0x1005368")]
		public SplineAction(UnityAction<string> call, string value)
		{
		}

		[Token(Token = "0x6000DE7")]
		[Address(RVA = "0x10053FC", Offset = "0x10053FC", VA = "0x10053FC")]
		public SplineAction(UnityAction<bool> call, bool value)
		{
		}

		[Token(Token = "0x6000DE8")]
		[Address(RVA = "0x1005484", Offset = "0x1005484", VA = "0x1005484")]
		public SplineAction(UnityAction<GameObject> call, GameObject value)
		{
		}

		[Token(Token = "0x6000DE9")]
		[Address(RVA = "0x1005518", Offset = "0x1005518", VA = "0x1005518")]
		public SplineAction(UnityAction<Transform> call, Transform value)
		{
		}

		[Token(Token = "0x6000DEA")]
		[Address(RVA = "0x10055AC", Offset = "0x10055AC", VA = "0x10055AC")]
		public void SetMethod(MethodInfo newMethod)
		{
		}

		[Token(Token = "0x6000DEB")]
		[Address(RVA = "0x1006048", Offset = "0x1006048", VA = "0x1006048")]
		private Type GetParamType()
		{
			return null;
		}

		[Token(Token = "0x6000DEC")]
		[Address(RVA = "0x1006198", Offset = "0x1006198", VA = "0x1006198")]
		public MethodInfo GetMethod()
		{
			return null;
		}

		[Token(Token = "0x6000DED")]
		[Address(RVA = "0x10059E8", Offset = "0x10059E8", VA = "0x10059E8")]
		private void ConstructUnityAction()
		{
		}

		[Token(Token = "0x6000DEE")]
		[Address(RVA = "0x100636C", Offset = "0x100636C", VA = "0x100636C")]
		public void Invoke()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000255")]
	public class SplineTrigger : ScriptableObject
	{
		[Token(Token = "0x2000256")]
		public enum Type
		{
			[Token(Token = "0x4000BD7")]
			Double,
			[Token(Token = "0x4000BD8")]
			Forward,
			[Token(Token = "0x4000BD9")]
			Backward
		}

		[Token(Token = "0x4000BD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public Type type;

		[Token(Token = "0x4000BD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 1f)]
		public double position;

		[Token(Token = "0x4000BD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		public bool enabled;

		[Token(Token = "0x4000BD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		public Color color;

		[Token(Token = "0x4000BD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[HideInInspector]
		public SplineAction[] actions;

		[Token(Token = "0x4000BD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject[] gameObjects;

		[Token(Token = "0x6000DEF")]
		[Address(RVA = "0x10064F0", Offset = "0x10064F0", VA = "0x10064F0")]
		public SplineTrigger()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000257")]
	public class Trigger
	{
		[Token(Token = "0x2000258")]
		public enum Type
		{
			[Token(Token = "0x4000BE4")]
			Double,
			[Token(Token = "0x4000BE5")]
			Forward,
			[Token(Token = "0x4000BE6")]
			Backward
		}

		[Token(Token = "0x4000BDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x4000BDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public Type type;

		[Token(Token = "0x4000BDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool workOnce;

		[Token(Token = "0x4000BDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		private bool worked;

		[Token(Token = "0x4000BDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 1f)]
		public double position;

		[Token(Token = "0x4000BDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		public bool enabled;

		[Token(Token = "0x4000BE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		public Color color;

		[Token(Token = "0x4000BE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		[SerializeField]
		public SplineAction[] actions;

		[Token(Token = "0x4000BE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject[] gameObjects;

		[Token(Token = "0x6000DF0")]
		[Address(RVA = "0x100656C", Offset = "0x100656C", VA = "0x100656C")]
		public void Create(Type t, UnityAction call)
		{
		}

		[Token(Token = "0x6000DF1")]
		[Address(RVA = "0x10066A4", Offset = "0x10066A4", VA = "0x10066A4")]
		public void Create(Type t, UnityAction<int> call, int value)
		{
		}

		[Token(Token = "0x6000DF2")]
		[Address(RVA = "0x100671C", Offset = "0x100671C", VA = "0x100671C")]
		public void Create(Type t, UnityAction<float> call, float value)
		{
		}

		[Token(Token = "0x6000DF3")]
		[Address(RVA = "0x100679C", Offset = "0x100679C", VA = "0x100679C")]
		public void Create(Type t, UnityAction<double> call, double value)
		{
		}

		[Token(Token = "0x6000DF4")]
		[Address(RVA = "0x100681C", Offset = "0x100681C", VA = "0x100681C")]
		public void Create(Type t, UnityAction<string> call, string value)
		{
		}

		[Token(Token = "0x6000DF5")]
		[Address(RVA = "0x1006894", Offset = "0x1006894", VA = "0x1006894")]
		public void Create(Type t, UnityAction<bool> call, bool value)
		{
		}

		[Token(Token = "0x6000DF6")]
		[Address(RVA = "0x100690C", Offset = "0x100690C", VA = "0x100690C")]
		public void Create(Type t, UnityAction<Transform> call, Transform value)
		{
		}

		[Token(Token = "0x6000DF7")]
		[Address(RVA = "0x1006984", Offset = "0x1006984", VA = "0x1006984")]
		public void Create(Type t, UnityAction<GameObject> call, GameObject value)
		{
		}

		[Token(Token = "0x6000DF8")]
		[Address(RVA = "0x10065EC", Offset = "0x10065EC", VA = "0x10065EC")]
		public void Create(Type t)
		{
		}

		[Token(Token = "0x6000DF9")]
		[Address(RVA = "0x10069FC", Offset = "0x10069FC", VA = "0x10069FC")]
		public void ResetWorkOnce()
		{
		}

		[Token(Token = "0x6000DFA")]
		[Address(RVA = "0x1006A04", Offset = "0x1006A04", VA = "0x1006A04")]
		public bool Check(double previousPercent, double currentPercent)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DFB")]
		[Address(RVA = "0x1006A98", Offset = "0x1006A98", VA = "0x1006A98")]
		public void Invoke()
		{
		}

		[Token(Token = "0x6000DFC")]
		[Address(RVA = "0x1006AF4", Offset = "0x1006AF4", VA = "0x1006AF4")]
		private void AddAction()
		{
		}

		[Token(Token = "0x6000DFD")]
		[Address(RVA = "0x1006BEC", Offset = "0x1006BEC", VA = "0x1006BEC")]
		public void AddListener(MonoBehaviour behavior, string method, object arg)
		{
		}

		[Token(Token = "0x6000DFE")]
		[Address(RVA = "0x1006634", Offset = "0x1006634", VA = "0x1006634")]
		public void AddAction(SplineAction action)
		{
		}

		[Token(Token = "0x6000DFF")]
		[Address(RVA = "0x1007884", Offset = "0x1007884", VA = "0x1007884")]
		public Trigger()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000259")]
	public class TransformModule
	{
		[Token(Token = "0x200025A")]
		public enum VelocityHandleMode
		{
			[Token(Token = "0x4000BFC")]
			Zero,
			[Token(Token = "0x4000BFD")]
			Preserve,
			[Token(Token = "0x4000BFE")]
			Align,
			[Token(Token = "0x4000BFF")]
			AlignRealistic
		}

		[Token(Token = "0x4000BE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		[HideInInspector]
		[FormerlySerializedAs("offset")]
		private Vector2 _offset;

		[Token(Token = "0x4000BE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[FormerlySerializedAs("rotationOffset")]
		[HideInInspector]
		[SerializeField]
		private Vector3 _rotationOffset;

		[Token(Token = "0x4000BE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[FormerlySerializedAs("baseScale")]
		[HideInInspector]
		[SerializeField]
		private Vector3 _baseScale;

		[Token(Token = "0x4000BEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public VelocityHandleMode velocityHandleMode;

		[Token(Token = "0x4000BEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private SplineResult _splineResult;

		[Token(Token = "0x4000BEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public CustomRotationModule customRotation;

		[Token(Token = "0x4000BED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public CustomOffsetModule customOffset;

		[Token(Token = "0x4000BEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool applyPositionX;

		[Token(Token = "0x4000BEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		public bool applyPositionY;

		[Token(Token = "0x4000BF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
		public bool applyPositionZ;

		[Token(Token = "0x4000BF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public Spline.Direction direction;

		[Token(Token = "0x4000BF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool applyRotationX;

		[Token(Token = "0x4000BF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		public bool applyRotationY;

		[Token(Token = "0x4000BF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5A")]
		public bool applyRotationZ;

		[Token(Token = "0x4000BF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5B")]
		public bool applyScaleX;

		[Token(Token = "0x4000BF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public bool applyScaleY;

		[Token(Token = "0x4000BF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5D")]
		public bool applyScaleZ;

		[Token(Token = "0x4000BF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HideInInspector]
		public SplineUser targetUser;

		[Token(Token = "0x4000BF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Vector3 position;

		[Token(Token = "0x4000BFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static Quaternion rotation;

		[Token(Token = "0x1700019B")]
		public Vector2 offset
		{
			[Token(Token = "0x6000E00")]
			[Address(RVA = "0x100792C", Offset = "0x100792C", VA = "0x100792C")]
			get
			{
				return default(Vector2);
			}
			[Token(Token = "0x6000E01")]
			[Address(RVA = "0x1007934", Offset = "0x1007934", VA = "0x1007934")]
			set
			{
			}
		}

		[Token(Token = "0x1700019C")]
		public Vector3 rotationOffset
		{
			[Token(Token = "0x6000E02")]
			[Address(RVA = "0x1007A00", Offset = "0x1007A00", VA = "0x1007A00")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000E03")]
			[Address(RVA = "0x1007A0C", Offset = "0x1007A0C", VA = "0x1007A0C")]
			set
			{
			}
		}

		[Token(Token = "0x1700019D")]
		public Vector3 baseScale
		{
			[Token(Token = "0x6000E04")]
			[Address(RVA = "0x1007AFC", Offset = "0x1007AFC", VA = "0x1007AFC")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000E05")]
			[Address(RVA = "0x1007B08", Offset = "0x1007B08", VA = "0x1007B08")]
			set
			{
			}
		}

		[Token(Token = "0x1700019E")]
		public SplineResult splineResult
		{
			[Token(Token = "0x6000E06")]
			[Address(RVA = "0x1007BF8", Offset = "0x1007BF8", VA = "0x1007BF8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E07")]
			[Address(RVA = "0x1007C6C", Offset = "0x1007C6C", VA = "0x1007C6C")]
			set
			{
			}
		}

		[Token(Token = "0x1700019F")]
		public bool applyPosition
		{
			[Token(Token = "0x6000E08")]
			[Address(RVA = "0x1007D38", Offset = "0x1007D38", VA = "0x1007D38")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000E09")]
			[Address(RVA = "0x1007D60", Offset = "0x1007D60", VA = "0x1007D60")]
			set
			{
			}
		}

		[Token(Token = "0x170001A0")]
		public bool applyRotation
		{
			[Token(Token = "0x6000E0A")]
			[Address(RVA = "0x1007D74", Offset = "0x1007D74", VA = "0x1007D74")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000E0B")]
			[Address(RVA = "0x1007D9C", Offset = "0x1007D9C", VA = "0x1007D9C")]
			set
			{
			}
		}

		[Token(Token = "0x170001A1")]
		public bool applyScale
		{
			[Token(Token = "0x6000E0C")]
			[Address(RVA = "0x1007DB0", Offset = "0x1007DB0", VA = "0x1007DB0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000E0D")]
			[Address(RVA = "0x1007DD8", Offset = "0x1007DD8", VA = "0x1007DD8")]
			set
			{
			}
		}

		[Token(Token = "0x6000E0E")]
		[Address(RVA = "0x1007DEC", Offset = "0x1007DEC", VA = "0x1007DEC")]
		public void ApplyTransform(Transform input)
		{
		}

		[Token(Token = "0x6000E0F")]
		[Address(RVA = "0x1008798", Offset = "0x1008798", VA = "0x1008798")]
		public void ApplyRigidbody(Rigidbody input)
		{
		}

		[Token(Token = "0x6000E10")]
		[Address(RVA = "0x1008B88", Offset = "0x1008B88", VA = "0x1008B88")]
		public void ApplyRigidbody2D(Rigidbody2D input)
		{
		}

		[Token(Token = "0x6000E11")]
		[Address(RVA = "0x10088B0", Offset = "0x10088B0", VA = "0x10088B0")]
		private Vector3 HandleVelocity(Vector3 velocity)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000E12")]
		[Address(RVA = "0x1007E6C", Offset = "0x1007E6C", VA = "0x1007E6C")]
		private Vector3 GetPosition(Vector3 inputPosition)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000E13")]
		[Address(RVA = "0x10080B4", Offset = "0x10080B4", VA = "0x10080B4")]
		private Quaternion GetRotation(Quaternion inputRotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000E14")]
		[Address(RVA = "0x1008734", Offset = "0x1008734", VA = "0x1008734")]
		private Vector3 GetScale(Vector3 inputScale)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000E15")]
		[Address(RVA = "0x1008CB8", Offset = "0x1008CB8", VA = "0x1008CB8")]
		public TransformModule()
		{
		}
	}
}
namespace Dreamteck.Splines.Primitives
{
	[Token(Token = "0x200025B")]
	public class Capsule : SplinePrimitive
	{
		[Token(Token = "0x4000C00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float radius;

		[Token(Token = "0x4000C01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float height;

		[Token(Token = "0x6000E17")]
		[Address(RVA = "0x1008E2C", Offset = "0x1008E2C", VA = "0x1008E2C", Slot = "4")]
		protected override void Generate()
		{
		}

		[Token(Token = "0x6000E18")]
		[Address(RVA = "0x1009764", Offset = "0x1009764", VA = "0x1009764")]
		public Capsule()
		{
		}
	}
	[Token(Token = "0x200025C")]
	public class Ellipse : SplinePrimitive
	{
		[Token(Token = "0x4000C02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float xRadius;

		[Token(Token = "0x4000C03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float yRadius;

		[Token(Token = "0x6000E19")]
		[Address(RVA = "0x100983C", Offset = "0x100983C", VA = "0x100983C", Slot = "4")]
		protected override void Generate()
		{
		}

		[Token(Token = "0x6000E1A")]
		[Address(RVA = "0x1009CAC", Offset = "0x1009CAC", VA = "0x1009CAC")]
		public Ellipse()
		{
		}
	}
	[Token(Token = "0x200025D")]
	public class Line : SplinePrimitive
	{
		[Token(Token = "0x4000C04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool mirror;

		[Token(Token = "0x4000C05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float length;

		[Token(Token = "0x4000C06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public int segments;

		[Token(Token = "0x6000E1B")]
		[Address(RVA = "0x1009CB8", Offset = "0x1009CB8", VA = "0x1009CB8", Slot = "4")]
		protected override void Generate()
		{
		}

		[Token(Token = "0x6000E1C")]
		[Address(RVA = "0x1009E6C", Offset = "0x1009E6C", VA = "0x1009E6C")]
		public Line()
		{
		}
	}
	[Token(Token = "0x200025E")]
	public class Ngon : SplinePrimitive
	{
		[Token(Token = "0x4000C07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float radius;

		[Token(Token = "0x4000C08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public int sides;

		[Token(Token = "0x6000E1D")]
		[Address(RVA = "0x1009E84", Offset = "0x1009E84", VA = "0x1009E84", Slot = "4")]
		protected override void Generate()
		{
		}

		[Token(Token = "0x6000E1E")]
		[Address(RVA = "0x100A010", Offset = "0x100A010", VA = "0x100A010")]
		public Ngon()
		{
		}
	}
	[Token(Token = "0x200025F")]
	public class Rectangle : SplinePrimitive
	{
		[Token(Token = "0x4000C09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector2 size;

		[Token(Token = "0x6000E1F")]
		[Address(RVA = "0x100A020", Offset = "0x100A020", VA = "0x100A020", Slot = "4")]
		protected override void Generate()
		{
		}

		[Token(Token = "0x6000E20")]
		[Address(RVA = "0x100A3B4", Offset = "0x100A3B4", VA = "0x100A3B4")]
		public Rectangle()
		{
		}
	}
	[Token(Token = "0x2000260")]
	public class RoundedRectangle : SplinePrimitive
	{
		[Token(Token = "0x4000C0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector2 size;

		[Token(Token = "0x4000C0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float xRadius;

		[Token(Token = "0x4000C0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float yRadius;

		[Token(Token = "0x6000E21")]
		[Address(RVA = "0x100A408", Offset = "0x100A408", VA = "0x100A408", Slot = "4")]
		protected override void Generate()
		{
		}

		[Token(Token = "0x6000E22")]
		[Address(RVA = "0x100AE30", Offset = "0x100AE30", VA = "0x100AE30")]
		public RoundedRectangle()
		{
		}
	}
	[Token(Token = "0x2000261")]
	public class Spiral : SplinePrimitive
	{
		[Token(Token = "0x4000C0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float startRadius;

		[Token(Token = "0x4000C0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float endRadius;

		[Token(Token = "0x4000C0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float stretch;

		[Token(Token = "0x4000C10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public int iterations;

		[Token(Token = "0x4000C11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AnimationCurve curve;

		[Token(Token = "0x6000E23")]
		[Address(RVA = "0x100AE8C", Offset = "0x100AE8C", VA = "0x100AE8C", Slot = "4")]
		protected override void Generate()
		{
		}

		[Token(Token = "0x6000E24")]
		[Address(RVA = "0x100B390", Offset = "0x100B390", VA = "0x100B390")]
		public Spiral()
		{
		}
	}
	[Token(Token = "0x2000262")]
	public class SplinePrimitive
	{
		[Token(Token = "0x2000263")]
		public enum Axis
		{
			[Token(Token = "0x4000C19")]
			X,
			[Token(Token = "0x4000C1A")]
			Y,
			[Token(Token = "0x4000C1B")]
			Z,
			[Token(Token = "0x4000C1C")]
			nX,
			[Token(Token = "0x4000C1D")]
			nY,
			[Token(Token = "0x4000C1E")]
			nZ
		}

		[Token(Token = "0x4000C12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected bool closed;

		[Token(Token = "0x4000C13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected SplinePoint[] points;

		[Token(Token = "0x4000C14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected Spline.Type type;

		[Token(Token = "0x4000C15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Axis axis;

		[Token(Token = "0x4000C16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 offset;

		[Token(Token = "0x4000C17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector3 rotation;

		[Token(Token = "0x6000E25")]
		[Address(RVA = "0x1009600", Offset = "0x1009600", VA = "0x1009600", Slot = "4")]
		protected virtual void Generate()
		{
		}

		[Token(Token = "0x6000E26")]
		[Address(RVA = "0x100B414", Offset = "0x100B414", VA = "0x100B414")]
		public Spline GetSpline()
		{
			return null;
		}

		[Token(Token = "0x6000E27")]
		[Address(RVA = "0x100B778", Offset = "0x100B778", VA = "0x100B778")]
		public void UpdateSpline(Spline spline)
		{
		}

		[Token(Token = "0x6000E28")]
		[Address(RVA = "0x100B818", Offset = "0x100B818", VA = "0x100B818")]
		public SplineComputer CreateSplineComputer(string name, Vector3 position, Quaternion rotation)
		{
			return null;
		}

		[Token(Token = "0x6000E29")]
		[Address(RVA = "0x100B984", Offset = "0x100B984", VA = "0x100B984")]
		public void UpdateSplineComputer(SplineComputer comp)
		{
		}

		[Token(Token = "0x6000E2A")]
		[Address(RVA = "0x100B4B0", Offset = "0x100B4B0", VA = "0x100B4B0")]
		private void ApplyOffset()
		{
		}

		[Token(Token = "0x6000E2B")]
		[Address(RVA = "0x1009604", Offset = "0x1009604", VA = "0x1009604")]
		protected void CreatePoints(int count, SplinePoint.Type type)
		{
		}

		[Token(Token = "0x6000E2C")]
		[Address(RVA = "0x100BA24", Offset = "0x100BA24", VA = "0x100BA24")]
		protected Vector3 GetNormal()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000E2D")]
		[Address(RVA = "0x1009774", Offset = "0x1009774", VA = "0x1009774")]
		public SplinePrimitive()
		{
		}
	}
	[Token(Token = "0x2000264")]
	public class Star : SplinePrimitive
	{
		[Token(Token = "0x4000C1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float radius;

		[Token(Token = "0x4000C20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float depth;

		[Token(Token = "0x4000C21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public int sides;

		[Token(Token = "0x6000E2E")]
		[Address(RVA = "0x100BBDC", Offset = "0x100BBDC", VA = "0x100BBDC", Slot = "4")]
		protected override void Generate()
		{
		}

		[Token(Token = "0x6000E2F")]
		[Address(RVA = "0x100BDC0", Offset = "0x100BDC0", VA = "0x100BDC0")]
		public Star()
		{
		}
	}
}
namespace Dreamteck.Splines.IO
{
	[Token(Token = "0x2000265")]
	public class CSV : SplineParser
	{
		[Token(Token = "0x2000266")]
		public enum ColumnType
		{
			[Token(Token = "0x4000C24")]
			Position,
			[Token(Token = "0x4000C25")]
			Tangent,
			[Token(Token = "0x4000C26")]
			Tangent2,
			[Token(Token = "0x4000C27")]
			Normal,
			[Token(Token = "0x4000C28")]
			Size,
			[Token(Token = "0x4000C29")]
			Color
		}

		[Token(Token = "0x4000C22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<ColumnType> columns;

		[Token(Token = "0x6000E30")]
		[Address(RVA = "0x100BDD8", Offset = "0x100BDD8", VA = "0x100BDD8")]
		public CSV(SplineComputer computer)
		{
		}

		[Token(Token = "0x6000E31")]
		[Address(RVA = "0x100C0E0", Offset = "0x100C0E0", VA = "0x100C0E0")]
		public CSV(string filePath, [Optional] List<ColumnType> customColumns)
		{
		}

		[Token(Token = "0x6000E32")]
		[Address(RVA = "0x100C590", Offset = "0x100C590", VA = "0x100C590")]
		private void Read(string[] lines)
		{
		}

		[Token(Token = "0x6000E33")]
		[Address(RVA = "0x100CFE4", Offset = "0x100CFE4", VA = "0x100CFE4")]
		public SplineComputer CreateSplineComputer(Vector3 position, Quaternion rotation)
		{
			return null;
		}

		[Token(Token = "0x6000E34")]
		[Address(RVA = "0x100D000", Offset = "0x100D000", VA = "0x100D000")]
		public Spline CreateSpline()
		{
			return null;
		}

		[Token(Token = "0x6000E35")]
		[Address(RVA = "0x100D01C", Offset = "0x100D01C", VA = "0x100D01C")]
		public void FlatX()
		{
		}

		[Token(Token = "0x6000E36")]
		[Address(RVA = "0x100D1CC", Offset = "0x100D1CC", VA = "0x100D1CC")]
		public void FlatY()
		{
		}

		[Token(Token = "0x6000E37")]
		[Address(RVA = "0x100D380", Offset = "0x100D380", VA = "0x100D380")]
		public void FlatZ()
		{
		}

		[Token(Token = "0x6000E38")]
		[Address(RVA = "0x100D56C", Offset = "0x100D56C", VA = "0x100D56C")]
		private void AddTitle(ref string[] content, string title)
		{
		}

		[Token(Token = "0x6000E39")]
		[Address(RVA = "0x100D634", Offset = "0x100D634", VA = "0x100D634")]
		private void AddVector3Title(ref string[] content, string prefix)
		{
		}

		[Token(Token = "0x6000E3A")]
		[Address(RVA = "0x100D868", Offset = "0x100D868", VA = "0x100D868")]
		private void AddColorTitle(ref string[] content, string prefix)
		{
		}

		[Token(Token = "0x6000E3B")]
		[Address(RVA = "0x100DB2C", Offset = "0x100DB2C", VA = "0x100DB2C")]
		private void AddVector3(ref string[] content, int index, Vector3 vector)
		{
		}

		[Token(Token = "0x6000E3C")]
		[Address(RVA = "0x100DC7C", Offset = "0x100DC7C", VA = "0x100DC7C")]
		private void AddColor(ref string[] content, int index, Color color)
		{
		}

		[Token(Token = "0x6000E3D")]
		[Address(RVA = "0x100DB78", Offset = "0x100DB78", VA = "0x100DB78")]
		private void AddFloat(ref string[] content, int index, float value)
		{
		}

		[Token(Token = "0x6000E3E")]
		[Address(RVA = "0x100DCE4", Offset = "0x100DCE4", VA = "0x100DCE4")]
		public void Write(string filePath)
		{
		}
	}
	[Token(Token = "0x2000267")]
	public class SplineParser
	{
		[Token(Token = "0x2000268")]
		internal class Transformation
		{
			[Token(Token = "0x4000C2C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			protected static Matrix4x4 matrix;

			[Token(Token = "0x6000E45")]
			[Address(RVA = "0x100E918", Offset = "0x100E918", VA = "0x100E918")]
			internal static void ResetMatrix()
			{
			}

			[Token(Token = "0x6000E46")]
			[Address(RVA = "0x100EA60", Offset = "0x100EA60", VA = "0x100EA60", Slot = "4")]
			internal virtual void Push()
			{
			}

			[Token(Token = "0x6000E47")]
			[Address(RVA = "0x100EA64", Offset = "0x100EA64", VA = "0x100EA64")]
			internal static void Apply(SplinePoint[] points)
			{
			}

			[Token(Token = "0x6000E48")]
			[Address(RVA = "0x100EBFC", Offset = "0x100EBFC", VA = "0x100EBFC")]
			public Transformation()
			{
			}
		}

		[Token(Token = "0x2000269")]
		internal class Translate : Transformation
		{
			[Token(Token = "0x4000C2D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private Vector2 offset;

			[Token(Token = "0x6000E4A")]
			[Address(RVA = "0x100EC08", Offset = "0x100EC08", VA = "0x100EC08")]
			public Translate(Vector2 o)
			{
			}

			[Token(Token = "0x6000E4B")]
			[Address(RVA = "0x100ECB0", Offset = "0x100ECB0", VA = "0x100ECB0", Slot = "4")]
			internal override void Push()
			{
			}
		}

		[Token(Token = "0x200026A")]
		internal class Rotate : Transformation
		{
			[Token(Token = "0x4000C2E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private float angle;

			[Token(Token = "0x6000E4C")]
			[Address(RVA = "0x100EE40", Offset = "0x100EE40", VA = "0x100EE40")]
			public Rotate(float a)
			{
			}

			[Token(Token = "0x6000E4D")]
			[Address(RVA = "0x100EEAC", Offset = "0x100EEAC", VA = "0x100EEAC", Slot = "4")]
			internal override void Push()
			{
			}
		}

		[Token(Token = "0x200026B")]
		internal class Scale : Transformation
		{
			[Token(Token = "0x4000C2F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private Vector2 multiplier;

			[Token(Token = "0x6000E4E")]
			[Address(RVA = "0x100F088", Offset = "0x100F088", VA = "0x100F088")]
			public Scale(Vector2 s)
			{
			}

			[Token(Token = "0x6000E4F")]
			[Address(RVA = "0x100F130", Offset = "0x100F130", VA = "0x100F130", Slot = "4")]
			internal override void Push()
			{
			}
		}

		[Token(Token = "0x200026C")]
		internal class SkewX : Transformation
		{
			[Token(Token = "0x4000C30")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private float amount;

			[Token(Token = "0x6000E50")]
			[Address(RVA = "0x100F2AC", Offset = "0x100F2AC", VA = "0x100F2AC")]
			public SkewX(float a)
			{
			}

			[Token(Token = "0x6000E51")]
			[Address(RVA = "0x100F318", Offset = "0x100F318", VA = "0x100F318", Slot = "4")]
			internal override void Push()
			{
			}
		}

		[Token(Token = "0x200026D")]
		internal class SkewY : Transformation
		{
			[Token(Token = "0x4000C31")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private float amount;

			[Token(Token = "0x6000E52")]
			[Address(RVA = "0x100F470", Offset = "0x100F470", VA = "0x100F470")]
			public SkewY(float a)
			{
			}

			[Token(Token = "0x6000E53")]
			[Address(RVA = "0x100F4DC", Offset = "0x100F4DC", VA = "0x100F4DC", Slot = "4")]
			internal override void Push()
			{
			}
		}

		[Token(Token = "0x200026E")]
		internal class MatrixTransform : Transformation
		{
			[Token(Token = "0x4000C32")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private Matrix4x4 transformMatrix;

			[Token(Token = "0x6000E54")]
			[Address(RVA = "0x100F634", Offset = "0x100F634", VA = "0x100F634")]
			public MatrixTransform(float a, float b, float c, float d, float e, float f)
			{
			}

			[Token(Token = "0x6000E55")]
			[Address(RVA = "0x100F744", Offset = "0x100F744", VA = "0x100F744", Slot = "4")]
			internal override void Push()
			{
			}
		}

		[Token(Token = "0x200026F")]
		internal class SplineDefinition
		{
			[Token(Token = "0x4000C33")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal string name;

			[Token(Token = "0x4000C34")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal Spline.Type type;

			[Token(Token = "0x4000C35")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal List<SplinePoint> points;

			[Token(Token = "0x4000C36")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal bool closed;

			[Token(Token = "0x4000C37")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			internal Vector3 position;

			[Token(Token = "0x4000C38")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			internal Vector3 tangent;

			[Token(Token = "0x4000C39")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			internal Vector3 tangent2;

			[Token(Token = "0x4000C3A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			internal Vector3 normal;

			[Token(Token = "0x4000C3B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			internal float size;

			[Token(Token = "0x4000C3C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			internal Color color;

			[Token(Token = "0x170001A3")]
			internal int pointCount
			{
				[Token(Token = "0x6000E56")]
				[Address(RVA = "0x100F810", Offset = "0x100F810", VA = "0x100F810")]
				get
				{
					return default(int);
				}
			}

			[Token(Token = "0x6000E57")]
			[Address(RVA = "0x100F858", Offset = "0x100F858", VA = "0x100F858")]
			internal SplineDefinition(string n, Spline.Type t)
			{
			}

			[Token(Token = "0x6000E58")]
			[Address(RVA = "0x100F9EC", Offset = "0x100F9EC", VA = "0x100F9EC")]
			internal SplineDefinition(string n, Spline spline)
			{
			}

			[Token(Token = "0x6000E59")]
			[Address(RVA = "0x100FBE8", Offset = "0x100FBE8", VA = "0x100FBE8")]
			internal SplinePoint GetLastPoint()
			{
				return default(SplinePoint);
			}

			[Token(Token = "0x6000E5A")]
			[Address(RVA = "0x100FC88", Offset = "0x100FC88", VA = "0x100FC88")]
			internal void SetLastPoint(SplinePoint point)
			{
			}

			[Token(Token = "0x6000E5B")]
			[Address(RVA = "0x100FD38", Offset = "0x100FD38", VA = "0x100FD38")]
			internal void CreateClosingPoint()
			{
			}

			[Token(Token = "0x6000E5C")]
			[Address(RVA = "0x100FE8C", Offset = "0x100FE8C", VA = "0x100FE8C")]
			internal void CreateSmooth()
			{
			}

			[Token(Token = "0x6000E5D")]
			[Address(RVA = "0x100FFC8", Offset = "0x100FFC8", VA = "0x100FFC8")]
			internal void CreateBroken()
			{
			}

			[Token(Token = "0x6000E5E")]
			[Address(RVA = "0x1010188", Offset = "0x1010188", VA = "0x1010188")]
			internal void CreateLinear()
			{
			}

			[Token(Token = "0x6000E5F")]
			[Address(RVA = "0x101019C", Offset = "0x101019C", VA = "0x101019C")]
			internal SplineComputer CreateSplineComputer(Vector3 position, Quaternion rotation)
			{
				return null;
			}

			[Token(Token = "0x6000E60")]
			[Address(RVA = "0x10103BC", Offset = "0x10103BC", VA = "0x10103BC")]
			internal Spline CreateSpline()
			{
				return null;
			}

			[Token(Token = "0x6000E61")]
			[Address(RVA = "0x101046C", Offset = "0x101046C", VA = "0x101046C")]
			internal void Transform(List<Transformation> trs)
			{
			}
		}

		[Token(Token = "0x4000C2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected string fileName;

		[Token(Token = "0x4000C2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal SplineDefinition buffer;

		[Token(Token = "0x170001A2")]
		public string name
		{
			[Token(Token = "0x6000E3F")]
			[Address(RVA = "0x100E264", Offset = "0x100E264", VA = "0x100E264")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E40")]
		[Address(RVA = "0x100E26C", Offset = "0x100E26C", VA = "0x100E26C")]
		internal Vector2[] ParseVector2(string coord)
		{
			return null;
		}

		[Token(Token = "0x6000E41")]
		[Address(RVA = "0x100E700", Offset = "0x100E700", VA = "0x100E700")]
		internal float[] ParseFloat(string coord)
		{
			return null;
		}

		[Token(Token = "0x6000E42")]
		[Address(RVA = "0x100E460", Offset = "0x100E460", VA = "0x100E460")]
		internal List<float> ParseFloatArray(string content)
		{
			return null;
		}

		[Token(Token = "0x6000E43")]
		[Address(RVA = "0x100E80C", Offset = "0x100E80C", VA = "0x100E80C")]
		public bool IsWHiteSpace(string s)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E44")]
		[Address(RVA = "0x100E8C0", Offset = "0x100E8C0", VA = "0x100E8C0")]
		public SplineParser()
		{
		}
	}
	[Token(Token = "0x2000270")]
	public class SVG : SplineParser
	{
		[Token(Token = "0x2000271")]
		public enum Axis
		{
			[Token(Token = "0x4000C44")]
			X,
			[Token(Token = "0x4000C45")]
			Y,
			[Token(Token = "0x4000C46")]
			Z
		}

		[Token(Token = "0x2000272")]
		internal class PathSegment
		{
			[Token(Token = "0x2000273")]
			internal enum Type
			{
				[Token(Token = "0x4000C4B")]
				Cubic,
				[Token(Token = "0x4000C4C")]
				CubicShort,
				[Token(Token = "0x4000C4D")]
				Quadratic,
				[Token(Token = "0x4000C4E")]
				QuadraticShort
			}

			[Token(Token = "0x4000C47")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal Vector3 startTangent;

			[Token(Token = "0x4000C48")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			internal Vector3 endTangent;

			[Token(Token = "0x4000C49")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal Vector3 endPoint;

			[Token(Token = "0x6000E7C")]
			[Address(RVA = "0x1016438", Offset = "0x1016438", VA = "0x1016438")]
			internal PathSegment(Vector2 s, Vector2 e, Vector2 c)
			{
			}

			[Token(Token = "0x6000E7D")]
			[Address(RVA = "0x10163B0", Offset = "0x10163B0", VA = "0x10163B0")]
			internal PathSegment()
			{
			}
		}

		[Token(Token = "0x2000274")]
		public enum Element
		{
			[Token(Token = "0x4000C50")]
			All,
			[Token(Token = "0x4000C51")]
			Path,
			[Token(Token = "0x4000C52")]
			Polygon,
			[Token(Token = "0x4000C53")]
			Ellipse,
			[Token(Token = "0x4000C54")]
			Rectangle,
			[Token(Token = "0x4000C55")]
			Line
		}

		[Token(Token = "0x4000C3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<SplineDefinition> paths;

		[Token(Token = "0x4000C3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<SplineDefinition> polygons;

		[Token(Token = "0x4000C3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<SplineDefinition> ellipses;

		[Token(Token = "0x4000C40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<SplineDefinition> rectangles;

		[Token(Token = "0x4000C41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<SplineDefinition> lines;

		[Token(Token = "0x4000C42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<Transformation> transformBuffer;

		[Token(Token = "0x6000E62")]
		[Address(RVA = "0x1010734", Offset = "0x1010734", VA = "0x1010734")]
		public SVG(string filePath)
		{
		}

		[Token(Token = "0x6000E63")]
		[Address(RVA = "0x1010B68", Offset = "0x1010B68", VA = "0x1010B68")]
		public SVG(List<SplineComputer> computers)
		{
		}

		[Token(Token = "0x6000E64")]
		[Address(RVA = "0x1010FA8", Offset = "0x1010FA8", VA = "0x1010FA8")]
		public void Write(string filePath, Axis ax = Axis.Z)
		{
		}

		[Token(Token = "0x6000E65")]
		[Address(RVA = "0x1011E28", Offset = "0x1011E28", VA = "0x1011E28")]
		private Vector2 MapPoint(Vector3 original, Axis ax)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000E66")]
		[Address(RVA = "0x1010AE0", Offset = "0x1010AE0", VA = "0x1010AE0")]
		private void Read(XmlDocument doc)
		{
		}

		[Token(Token = "0x6000E67")]
		[Address(RVA = "0x1011E58", Offset = "0x1011E58", VA = "0x1011E58")]
		private void Traverse(XmlNodeList nodes)
		{
		}

		[Token(Token = "0x6000E68")]
		[Address(RVA = "0x1013AC8", Offset = "0x1013AC8", VA = "0x1013AC8")]
		public List<SplineComputer> CreateSplineComputers(Vector3 position, Quaternion rotation, Element elements = Element.All)
		{
			return null;
		}

		[Token(Token = "0x6000E69")]
		[Address(RVA = "0x1014234", Offset = "0x1014234", VA = "0x1014234")]
		public List<Spline> CreateSplines(Element elements = Element.All)
		{
			return null;
		}

		[Token(Token = "0x6000E6A")]
		[Address(RVA = "0x1013674", Offset = "0x1013674", VA = "0x1013674")]
		private int ReadRectangle(XmlNode rectNode)
		{
			return default(int);
		}

		[Token(Token = "0x6000E6B")]
		[Address(RVA = "0x1013388", Offset = "0x1013388", VA = "0x1013388")]
		private int ReadLine(XmlNode lineNode)
		{
			return default(int);
		}

		[Token(Token = "0x6000E6C")]
		[Address(RVA = "0x1013020", Offset = "0x1013020", VA = "0x1013020")]
		private int ReadEllipse(XmlNode ellipseNode)
		{
			return default(int);
		}

		[Token(Token = "0x6000E6D")]
		[Address(RVA = "0x1012D40", Offset = "0x1012D40", VA = "0x1012D40")]
		private int ReadPolygon(XmlNode polyNode, bool closed)
		{
			return default(int);
		}

		[Token(Token = "0x6000E6E")]
		[Address(RVA = "0x101248C", Offset = "0x101248C", VA = "0x101248C")]
		private int ParseTransformation(XmlNode node)
		{
			return default(int);
		}

		[Token(Token = "0x6000E6F")]
		[Address(RVA = "0x1014AD0", Offset = "0x1014AD0", VA = "0x1014AD0")]
		private List<Transformation> ParseTransformations(string transformContent)
		{
			return null;
		}

		[Token(Token = "0x6000E70")]
		[Address(RVA = "0x1012564", Offset = "0x1012564", VA = "0x1012564")]
		private int ReadPath(XmlNode pathNode)
		{
			return default(int);
		}

		[Token(Token = "0x6000E71")]
		[Address(RVA = "0x101581C", Offset = "0x101581C", VA = "0x101581C")]
		private void PathStart(string name, string coords, bool relative)
		{
		}

		[Token(Token = "0x6000E72")]
		[Address(RVA = "0x1015964", Offset = "0x1015964", VA = "0x1015964")]
		private void PathClose()
		{
		}

		[Token(Token = "0x6000E73")]
		[Address(RVA = "0x1015984", Offset = "0x1015984", VA = "0x1015984")]
		private void PathLineTo(string coords, bool relative)
		{
		}

		[Token(Token = "0x6000E74")]
		[Address(RVA = "0x1015A48", Offset = "0x1015A48", VA = "0x1015A48")]
		private void PathHorizontalLineTo(string coords, bool relative)
		{
		}

		[Token(Token = "0x6000E75")]
		[Address(RVA = "0x1015AE0", Offset = "0x1015AE0", VA = "0x1015AE0")]
		private void PathVerticalLineTo(string coords, bool relative)
		{
		}

		[Token(Token = "0x6000E76")]
		[Address(RVA = "0x1015B80", Offset = "0x1015B80", VA = "0x1015B80")]
		private void PathCurveTo(string coords, PathSegment.Type type, bool relative)
		{
		}

		[Token(Token = "0x6000E77")]
		[Address(RVA = "0x1014A08", Offset = "0x1014A08", VA = "0x1014A08")]
		private void WriteBufferTo(List<SplineDefinition> list)
		{
		}

		[Token(Token = "0x6000E78")]
		[Address(RVA = "0x1015E18", Offset = "0x1015E18", VA = "0x1015E18")]
		private PathSegment[] ParsePathSegment(string coord, PathSegment.Type type)
		{
			return null;
		}

		[Token(Token = "0x6000E79")]
		[Address(RVA = "0x1011800", Offset = "0x1011800", VA = "0x1011800")]
		private string EncodePath(SplineDefinition definition, Axis ax)
		{
			return null;
		}

		[Token(Token = "0x6000E7A")]
		[Address(RVA = "0x1011674", Offset = "0x1011674", VA = "0x1011674")]
		private string EncodePolygon(SplineDefinition definition, Axis ax)
		{
			return null;
		}

		[Token(Token = "0x6000E7B")]
		[Address(RVA = "0x10148D8", Offset = "0x10148D8", VA = "0x10148D8")]
		private string GetAttributeContent(XmlNode node, string attributeName)
		{
			return null;
		}
	}
}
namespace DG.Tweening
{
	[Token(Token = "0x2000276")]
	public static class DOTweenModuleAudio
	{
		[Token(Token = "0x6000E81")]
		[Address(RVA = "0x10165A4", Offset = "0x10165A4", VA = "0x10165A4")]
		public static TweenerCore<float, float, FloatOptions> DOFade(this AudioSource target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6000E82")]
		[Address(RVA = "0x1016758", Offset = "0x1016758", VA = "0x1016758")]
		public static TweenerCore<float, float, FloatOptions> DOPitch(this AudioSource target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6000E83")]
		[Address(RVA = "0x10168E4", Offset = "0x10168E4", VA = "0x10168E4")]
		public static TweenerCore<float, float, FloatOptions> DOSetFloat(this AudioMixer target, string floatName, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6000E84")]
		[Address(RVA = "0x1016A84", Offset = "0x1016A84", VA = "0x1016A84")]
		public static int DOComplete(this AudioMixer target, bool withCallbacks = false)
		{
			return default(int);
		}

		[Token(Token = "0x6000E85")]
		[Address(RVA = "0x1016AEC", Offset = "0x1016AEC", VA = "0x1016AEC")]
		public static int DOKill(this AudioMixer target, bool complete = false)
		{
			return default(int);
		}

		[Token(Token = "0x6000E86")]
		[Address(RVA = "0x1016B54", Offset = "0x1016B54", VA = "0x1016B54")]
		public static int DOFlip(this AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x6000E87")]
		[Address(RVA = "0x1016BAC", Offset = "0x1016BAC", VA = "0x1016BAC")]
		public static int DOGoto(this AudioMixer target, float to, bool andPlay = false)
		{
			return default(int);
		}

		[Token(Token = "0x6000E88")]
		[Address(RVA = "0x1016C24", Offset = "0x1016C24", VA = "0x1016C24")]
		public static int DOPause(this AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x6000E89")]
		[Address(RVA = "0x1016C7C", Offset = "0x1016C7C", VA = "0x1016C7C")]
		public static int DOPlay(this AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x6000E8A")]
		[Address(RVA = "0x1016CD4", Offset = "0x1016CD4", VA = "0x1016CD4")]
		public static int DOPlayBackwards(this AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x6000E8B")]
		[Address(RVA = "0x1016D2C", Offset = "0x1016D2C", VA = "0x1016D2C")]
		public static int DOPlayForward(this AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x6000E8C")]
		[Address(RVA = "0x1016D84", Offset = "0x1016D84", VA = "0x1016D84")]
		public static int DORestart(this AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x6000E8D")]
		[Address(RVA = "0x1016DE4", Offset = "0x1016DE4", VA = "0x1016DE4")]
		public static int DORewind(this AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x6000E8E")]
		[Address(RVA = "0x1016E40", Offset = "0x1016E40", VA = "0x1016E40")]
		public static int DOSmoothRewind(this AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x6000E8F")]
		[Address(RVA = "0x1016E98", Offset = "0x1016E98", VA = "0x1016E98")]
		public static int DOTogglePause(this AudioMixer target)
		{
			return default(int);
		}
	}
	[Token(Token = "0x200027A")]
	public static class DOTweenModulePhysics
	{
		[Token(Token = "0x6000E99")]
		[Address(RVA = "0x1016FB8", Offset = "0x1016FB8", VA = "0x1016FB8")]
		public static TweenerCore<Vector3, Vector3, VectorOptions> DOMove(this Rigidbody target, Vector3 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6000E9A")]
		[Address(RVA = "0x1017170", Offset = "0x1017170", VA = "0x1017170")]
		public static TweenerCore<Vector3, Vector3, VectorOptions> DOMoveX(this Rigidbody target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6000E9B")]
		[Address(RVA = "0x101731C", Offset = "0x101731C", VA = "0x101731C")]
		public static TweenerCore<Vector3, Vector3, VectorOptions> DOMoveY(this Rigidbody target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6000E9C")]
		[Address(RVA = "0x10174C8", Offset = "0x10174C8", VA = "0x10174C8")]
		public static TweenerCore<Vector3, Vector3, VectorOptions> DOMoveZ(this Rigidbody target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6000E9D")]
		[Address(RVA = "0x1017674", Offset = "0x1017674", VA = "0x1017674")]
		public static TweenerCore<Quaternion, Vector3, QuaternionOptions> DORotate(this Rigidbody target, Vector3 endValue, float duration, RotateMode mode = RotateMode.Fast)
		{
			return null;
		}

		[Token(Token = "0x6000E9E")]
		[Address(RVA = "0x1017828", Offset = "0x1017828", VA = "0x1017828")]
		public static TweenerCore<Quaternion, Vector3, QuaternionOptions> DOLookAt(this Rigidbody target, Vector3 towards, float duration, AxisConstraint axisConstraint = AxisConstraint.None, [Optional] Vector3? up)
		{
			return null;
		}

		[Token(Token = "0x6000E9F")]
		[Address(RVA = "0x1017A90", Offset = "0x1017A90", VA = "0x1017A90")]
		public static Sequence DOJump(this Rigidbody target, Vector3 endValue, float jumpPower, int numJumps, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6000EA0")]
		[Address(RVA = "0x1017F9C", Offset = "0x1017F9C", VA = "0x1017F9C")]
		public static TweenerCore<Vector3, Path, PathOptions> DOPath(this Rigidbody target, Vector3[] path, float duration, PathType pathType = PathType.Linear, PathMode pathMode = PathMode.Full3D, int resolution = 10, [Optional] Color? gizmoColor)
		{
			return null;
		}

		[Token(Token = "0x6000EA1")]
		[Address(RVA = "0x1018210", Offset = "0x1018210", VA = "0x1018210")]
		public static TweenerCore<Vector3, Path, PathOptions> DOLocalPath(this Rigidbody target, Vector3[] path, float duration, PathType pathType = PathType.Linear, PathMode pathMode = PathMode.Full3D, int resolution = 10, [Optional] Color? gizmoColor)
		{
			return null;
		}

		[Token(Token = "0x6000EA2")]
		[Address(RVA = "0x10184A4", Offset = "0x10184A4", VA = "0x10184A4")]
		internal static TweenerCore<Vector3, Path, PathOptions> DOPath(this Rigidbody target, Path path, float duration, PathMode pathMode = PathMode.Full3D)
		{
			return null;
		}

		[Token(Token = "0x6000EA3")]
		[Address(RVA = "0x1018678", Offset = "0x1018678", VA = "0x1018678")]
		internal static TweenerCore<Vector3, Path, PathOptions> DOLocalPath(this Rigidbody target, Path path, float duration, PathMode pathMode = PathMode.Full3D)
		{
			return null;
		}
	}
	[Token(Token = "0x2000286")]
	public static class DOTweenModulePhysics2D
	{
		[Token(Token = "0x6000EC0")]
		[Address(RVA = "0x1018C8C", Offset = "0x1018C8C", VA = "0x1018C8C")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOMove(this Rigidbody2D target, Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6000EC1")]
		[Address(RVA = "0x1018E3C", Offset = "0x1018E3C", VA = "0x1018E3C")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOMoveX(this Rigidbody2D target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6000EC2")]
		[Address(RVA = "0x1018FE4", Offset = "0x1018FE4", VA = "0x1018FE4")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOMoveY(this Rigidbody2D target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6000EC3")]
		[Address(RVA = "0x101918C", Offset = "0x101918C", VA = "0x101918C")]
		public static TweenerCore<float, float, FloatOptions> DORotate(this Rigidbody2D target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6000EC4")]
		[Address(RVA = "0x101931C", Offset = "0x101931C", VA = "0x101931C")]
		public static Sequence DOJump(this Rigidbody2D target, Vector2 endValue, float jumpPower, int numJumps, float duration, bool snapping = false)
		{
			return null;
		}
	}
	[Token(Token = "0x200028C")]
	public static class DOTweenModuleSprite
	{
		[Token(Token = "0x6000ED4")]
		[Address(RVA = "0x1019904", Offset = "0x1019904", VA = "0x1019904")]
		public static TweenerCore<Color, Color, ColorOptions> DOColor(this SpriteRenderer target, Color endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6000ED5")]
		[Address(RVA = "0x1019AB8", Offset = "0x1019AB8", VA = "0x1019AB8")]
		public static TweenerCore<Color, Color, ColorOptions> DOFade(this SpriteRenderer target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6000ED6")]
		[Address(RVA = "0x1019C44", Offset = "0x1019C44", VA = "0x1019C44")]
		public static Sequence DOGradientColor(this SpriteRenderer target, Gradient gradient, float duration)
		{
			return null;
		}

		[Token(Token = "0x6000ED7")]
		[Address(RVA = "0x1019DFC", Offset = "0x1019DFC", VA = "0x1019DFC")]
		public static Tweener DOBlendableColor(this SpriteRenderer target, Color endValue, float duration)
		{
			return null;
		}
	}
	[Token(Token = "0x2000290")]
	public static class DOTweenModuleUI
	{
		[Token(Token = "0x2000291")]
		public static class Utils
		{
			[Token(Token = "0x6000F09")]
			[Address(RVA = "0x101E724", Offset = "0x101E724", VA = "0x101E724")]
			public static Vector2 SwitchToRectTransform(RectTransform from, RectTransform to)
			{
				return default(Vector2);
			}
		}

		[Token(Token = "0x6000EE1")]
		[Address(RVA = "0x101A0F4", Offset = "0x101A0F4", VA = "0x101A0F4")]
		public static TweenerCore<float, float, FloatOptions> DOFade(this CanvasGroup target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6000EE2")]
		[Address(RVA = "0x101A280", Offset = "0x101A280", VA = "0x101A280")]
		public static TweenerCore<Color, Color, ColorOptions> DOColor(this Graphic target, Color endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6000EE3")]
		[Address(RVA = "0x101A434", Offset = "0x101A434", VA = "0x101A434")]
		public static TweenerCore<Color, Color, ColorOptions> DOFade(this Graphic target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6000EE4")]
		[Address(RVA = "0x101A5C0", Offset = "0x101A5C0", VA = "0x101A5C0")]
		public static TweenerCore<Color, Color, ColorOptions> DOColor(this Image target, Color endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6000EE5")]
		[Address(RVA = "0x101A774", Offset = "0x101A774", VA = "0x101A774")]
		public static TweenerCore<Color, Color, ColorOptions> DOFade(this Image target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6000EE6")]
		[Address(RVA = "0x101A900", Offset = "0x101A900", VA = "0x101A900")]
		public static TweenerCore<float, float, FloatOptions> DOFillAmount(this Image target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6000EE7")]
		[Address(RVA = "0x101AAB0", Offset = "0x101AAB0", VA = "0x101AAB0")]
		public static Sequence DOGradientColor(this Image target, Gradient gradient, float duration)
		{
			return null;
		}

		[Token(Token = "0x6000EE8")]
		[Address(RVA = "0x101AC70", Offset = "0x101AC70", VA = "0x101AC70")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOFlexibleSize(this LayoutElement target, Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6000EE9")]
		[Address(RVA = "0x101AE1C", Offset = "0x101AE1C", VA = "0x101AE1C")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOMinSize(this LayoutElement target, Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6000EEA")]
		[Address(RVA = "0x101AFC8", Offset = "0x101AFC8", VA = "0x101AFC8")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOPreferredSize(this LayoutElement target, Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6000EEB")]
		[Address(RVA = "0x101B174", Offset = "0x101B174", VA = "0x101B174")]
		public static TweenerCore<Color, Color, ColorOptions> DOColor(this Outline target, Color endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6000EEC")]
		[Address(RVA = "0x101B328", Offset = "0x101B328", VA = "0x101B328")]
		public static TweenerCore<Color, Color, ColorOptions> DOFade(this Outline target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6000EED")]
		[Address(RVA = "0x101B4B4", Offset = "0x101B4B4", VA = "0x101B4B4")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOScale(this Outline target, Vector2 endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6000EEE")]
		[Address(RVA = "0x101B650", Offset = "0x101B650", VA = "0x101B650")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOAnchorPos(this RectTransform target, Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6000EEF")]
		[Address(RVA = "0x101B7FC", Offset = "0x101B7FC", VA = "0x101B7FC")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOAnchorPosX(this RectTransform target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6000EF0")]
		[Address(RVA = "0x101B9A0", Offset = "0x101B9A0", VA = "0x101B9A0")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOAnchorPosY(this RectTransform target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6000EF1")]
		[Address(RVA = "0x101BB44", Offset = "0x101BB44", VA = "0x101BB44")]
		public static TweenerCore<Vector3, Vector3, VectorOptions> DOAnchorPos3D(this RectTransform target, Vector3 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6000EF2")]
		[Address(RVA = "0x101BCF8", Offset = "0x101BCF8", VA = "0x101BCF8")]
		public static TweenerCore<Vector3, Vector3, VectorOptions> DOAnchorPos3DX(this RectTransform target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6000EF3")]
		[Address(RVA = "0x101BEA0", Offset = "0x101BEA0", VA = "0x101BEA0")]
		public static TweenerCore<Vector3, Vector3, VectorOptions> DOAnchorPos3DY(this RectTransform target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6000EF4")]
		[Address(RVA = "0x101C048", Offset = "0x101C048", VA = "0x101C048")]
		public static TweenerCore<Vector3, Vector3, VectorOptions> DOAnchorPos3DZ(this RectTransform target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6000EF5")]
		[Address(RVA = "0x101C1F0", Offset = "0x101C1F0", VA = "0x101C1F0")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOAnchorMax(this RectTransform target, Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6000EF6")]
		[Address(RVA = "0x101C39C", Offset = "0x101C39C", VA = "0x101C39C")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOAnchorMin(this RectTransform target, Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6000EF7")]
		[Address(RVA = "0x101C548", Offset = "0x101C548", VA = "0x101C548")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOPivot(this RectTransform target, Vector2 endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6000EF8")]
		[Address(RVA = "0x101C6E4", Offset = "0x101C6E4", VA = "0x101C6E4")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOPivotX(this RectTransform target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6000EF9")]
		[Address(RVA = "0x101C884", Offset = "0x101C884", VA = "0x101C884")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOPivotY(this RectTransform target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6000EFA")]
		[Address(RVA = "0x101CA24", Offset = "0x101CA24", VA = "0x101CA24")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOSizeDelta(this RectTransform target, Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6000EFB")]
		[Address(RVA = "0x101CBD0", Offset = "0x101CBD0", VA = "0x101CBD0")]
		public static Tweener DOPunchAnchorPos(this RectTransform target, Vector2 punch, float duration, int vibrato = 10, float elasticity = 1f, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6000EFC")]
		[Address(RVA = "0x101CD8C", Offset = "0x101CD8C", VA = "0x101CD8C")]
		public static Tweener DOShakeAnchorPos(this RectTransform target, float duration, float strength = 100f, int vibrato = 10, float randomness = 90f, bool snapping = false, bool fadeOut = true)
		{
			return null;
		}

		[Token(Token = "0x6000EFD")]
		[Address(RVA = "0x101CF70", Offset = "0x101CF70", VA = "0x101CF70")]
		public static Tweener DOShakeAnchorPos(this RectTransform target, float duration, Vector2 strength, int vibrato = 10, float randomness = 90f, bool snapping = false, bool fadeOut = true)
		{
			return null;
		}

		[Token(Token = "0x6000EFE")]
		[Address(RVA = "0x101D15C", Offset = "0x101D15C", VA = "0x101D15C")]
		public static Sequence DOJumpAnchorPos(this RectTransform target, Vector2 endValue, float jumpPower, int numJumps, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6000EFF")]
		[Address(RVA = "0x101D584", Offset = "0x101D584", VA = "0x101D584")]
		public static Tweener DONormalizedPos(this ScrollRect target, Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6000F00")]
		[Address(RVA = "0x101D724", Offset = "0x101D724", VA = "0x101D724")]
		public static Tweener DOHorizontalNormalizedPos(this ScrollRect target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6000F01")]
		[Address(RVA = "0x101D8B4", Offset = "0x101D8B4", VA = "0x101D8B4")]
		public static Tweener DOVerticalNormalizedPos(this ScrollRect target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6000F02")]
		[Address(RVA = "0x101DA44", Offset = "0x101DA44", VA = "0x101DA44")]
		public static TweenerCore<float, float, FloatOptions> DOValue(this Slider target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6000F03")]
		[Address(RVA = "0x101DBE0", Offset = "0x101DBE0", VA = "0x101DBE0")]
		public static TweenerCore<Color, Color, ColorOptions> DOColor(this Text target, Color endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6000F04")]
		[Address(RVA = "0x101DD94", Offset = "0x101DD94", VA = "0x101DD94")]
		public static TweenerCore<Color, Color, ColorOptions> DOFade(this Text target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6000F05")]
		[Address(RVA = "0x101DF20", Offset = "0x101DF20", VA = "0x101DF20")]
		public static TweenerCore<string, string, StringOptions> DOText(this Text target, string endValue, float duration, bool richTextEnabled = true, ScrambleMode scrambleMode = ScrambleMode.None, [Optional] string scrambleChars)
		{
			return null;
		}

		[Token(Token = "0x6000F06")]
		[Address(RVA = "0x101E0DC", Offset = "0x101E0DC", VA = "0x101E0DC")]
		public static Tweener DOBlendableColor(this Graphic target, Color endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6000F07")]
		[Address(RVA = "0x101E2F4", Offset = "0x101E2F4", VA = "0x101E2F4")]
		public static Tweener DOBlendableColor(this Image target, Color endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6000F08")]
		[Address(RVA = "0x101E50C", Offset = "0x101E50C", VA = "0x101E50C")]
		public static Tweener DOBlendableColor(this Text target, Color endValue, float duration)
		{
			return null;
		}
	}
	[Token(Token = "0x20002B9")]
	public static class DOTweenModuleUnityVersion
	{
		[Token(Token = "0x6000F83")]
		[Address(RVA = "0x101F614", Offset = "0x101F614", VA = "0x101F614")]
		public static Sequence DOGradientColor(this Material target, Gradient gradient, float duration)
		{
			return null;
		}

		[Token(Token = "0x6000F84")]
		[Address(RVA = "0x101F7D0", Offset = "0x101F7D0", VA = "0x101F7D0")]
		public static Sequence DOGradientColor(this Material target, Gradient gradient, string property, float duration)
		{
			return null;
		}

		[Token(Token = "0x6000F85")]
		[Address(RVA = "0x101F998", Offset = "0x101F998", VA = "0x101F998")]
		public static CustomYieldInstruction WaitForCompletion(this Tween t, bool returnCustomYieldInstruction)
		{
			return null;
		}

		[Token(Token = "0x6000F86")]
		[Address(RVA = "0x101FA80", Offset = "0x101FA80", VA = "0x101FA80")]
		public static CustomYieldInstruction WaitForRewind(this Tween t, bool returnCustomYieldInstruction)
		{
			return null;
		}

		[Token(Token = "0x6000F87")]
		[Address(RVA = "0x101FB68", Offset = "0x101FB68", VA = "0x101FB68")]
		public static CustomYieldInstruction WaitForKill(this Tween t, bool returnCustomYieldInstruction)
		{
			return null;
		}

		[Token(Token = "0x6000F88")]
		[Address(RVA = "0x101FC50", Offset = "0x101FC50", VA = "0x101FC50")]
		public static CustomYieldInstruction WaitForElapsedLoops(this Tween t, int elapsedLoops, bool returnCustomYieldInstruction)
		{
			return null;
		}

		[Token(Token = "0x6000F89")]
		[Address(RVA = "0x101FD4C", Offset = "0x101FD4C", VA = "0x101FD4C")]
		public static CustomYieldInstruction WaitForPosition(this Tween t, float position, bool returnCustomYieldInstruction)
		{
			return null;
		}

		[Token(Token = "0x6000F8A")]
		[Address(RVA = "0x101FE58", Offset = "0x101FE58", VA = "0x101FE58")]
		public static CustomYieldInstruction WaitForStart(this Tween t, bool returnCustomYieldInstruction)
		{
			return null;
		}

		[Token(Token = "0x6000F8B")]
		[Address(RVA = "0x101FF40", Offset = "0x101FF40", VA = "0x101FF40")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOOffset(this Material target, Vector2 endValue, int propertyID, float duration)
		{
			return null;
		}

		[Token(Token = "0x6000F8C")]
		[Address(RVA = "0x1020138", Offset = "0x1020138", VA = "0x1020138")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOTiling(this Material target, Vector2 endValue, int propertyID, float duration)
		{
			return null;
		}
	}
	[Token(Token = "0x20002BC")]
	public static class DOTweenCYInstruction
	{
		[Token(Token = "0x20002BD")]
		public class WaitForCompletion : CustomYieldInstruction
		{
			[Token(Token = "0x4000CB1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly Tween t;

			[Token(Token = "0x170001A4")]
			public override bool keepWaiting
			{
				[Token(Token = "0x6000F93")]
				[Address(RVA = "0x10203C0", Offset = "0x10203C0", VA = "0x10203C0", Slot = "7")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6000F94")]
			[Address(RVA = "0x101FA50", Offset = "0x101FA50", VA = "0x101FA50")]
			public WaitForCompletion(Tween tween)
			{
			}
		}

		[Token(Token = "0x20002BE")]
		public class WaitForRewind : CustomYieldInstruction
		{
			[Token(Token = "0x4000CB2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly Tween t;

			[Token(Token = "0x170001A5")]
			public override bool keepWaiting
			{
				[Token(Token = "0x6000F95")]
				[Address(RVA = "0x10203F0", Offset = "0x10203F0", VA = "0x10203F0", Slot = "7")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6000F96")]
			[Address(RVA = "0x101FB38", Offset = "0x101FB38", VA = "0x101FB38")]
			public WaitForRewind(Tween tween)
			{
			}
		}

		[Token(Token = "0x20002BF")]
		public class WaitForKill : CustomYieldInstruction
		{
			[Token(Token = "0x4000CB3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly Tween t;

			[Token(Token = "0x170001A6")]
			public override bool keepWaiting
			{
				[Token(Token = "0x6000F97")]
				[Address(RVA = "0x1020450", Offset = "0x1020450", VA = "0x1020450", Slot = "7")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6000F98")]
			[Address(RVA = "0x101FC20", Offset = "0x101FC20", VA = "0x101FC20")]
			public WaitForKill(Tween tween)
			{
			}
		}

		[Token(Token = "0x20002C0")]
		public class WaitForElapsedLoops : CustomYieldInstruction
		{
			[Token(Token = "0x4000CB4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly Tween t;

			[Token(Token = "0x4000CB5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private readonly int elapsedLoops;

			[Token(Token = "0x170001A7")]
			public override bool keepWaiting
			{
				[Token(Token = "0x6000F99")]
				[Address(RVA = "0x102046C", Offset = "0x102046C", VA = "0x102046C", Slot = "7")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6000F9A")]
			[Address(RVA = "0x101FD10", Offset = "0x101FD10", VA = "0x101FD10")]
			public WaitForElapsedLoops(Tween tween, int elapsedLoops)
			{
			}
		}

		[Token(Token = "0x20002C1")]
		public class WaitForPosition : CustomYieldInstruction
		{
			[Token(Token = "0x4000CB6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly Tween t;

			[Token(Token = "0x4000CB7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private readonly float position;

			[Token(Token = "0x170001A8")]
			public override bool keepWaiting
			{
				[Token(Token = "0x6000F9B")]
				[Address(RVA = "0x10204AC", Offset = "0x10204AC", VA = "0x10204AC", Slot = "7")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6000F9C")]
			[Address(RVA = "0x101FE14", Offset = "0x101FE14", VA = "0x101FE14")]
			public WaitForPosition(Tween tween, float position)
			{
			}
		}

		[Token(Token = "0x20002C2")]
		public class WaitForStart : CustomYieldInstruction
		{
			[Token(Token = "0x4000CB8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly Tween t;

			[Token(Token = "0x170001A9")]
			public override bool keepWaiting
			{
				[Token(Token = "0x6000F9D")]
				[Address(RVA = "0x1020504", Offset = "0x1020504", VA = "0x1020504", Slot = "7")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6000F9E")]
			[Address(RVA = "0x101FF10", Offset = "0x101FF10", VA = "0x101FF10")]
			public WaitForStart(Tween tween)
			{
			}
		}
	}
	[Token(Token = "0x20002C3")]
	public static class DOTweenModuleUtils
	{
		[Token(Token = "0x20002C4")]
		public static class Physics
		{
			[Token(Token = "0x6000FA1")]
			[Address(RVA = "0x1020694", Offset = "0x1020694", VA = "0x1020694")]
			public static void SetOrientationOnPath(PathOptions options, Tween t, Quaternion newRot, Transform trans)
			{
			}

			[Token(Token = "0x6000FA2")]
			[Address(RVA = "0x1020794", Offset = "0x1020794", VA = "0x1020794")]
			public static bool HasRigidbody2D(Component target)
			{
				return default(bool);
			}

			[Token(Token = "0x6000FA3")]
			[Address(RVA = "0x1020820", Offset = "0x1020820", VA = "0x1020820")]
			[Preserve]
			public static bool HasRigidbody(Component target)
			{
				return default(bool);
			}

			[Token(Token = "0x6000FA4")]
			[Address(RVA = "0x10208AC", Offset = "0x10208AC", VA = "0x10208AC")]
			[Preserve]
			public static TweenerCore<Vector3, Path, PathOptions> CreateDOTweenPathTween(MonoBehaviour target, bool tweenRigidbody, bool isLocal, Path path, float duration, PathMode pathMode)
			{
				return null;
			}
		}

		[Token(Token = "0x4000CB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool _initialized;

		[Token(Token = "0x6000F9F")]
		[Address(RVA = "0x1020538", Offset = "0x1020538", VA = "0x1020538")]
		[Preserve]
		public static void Init()
		{
		}

		[Token(Token = "0x6000FA0")]
		[Address(RVA = "0x10205EC", Offset = "0x10205EC", VA = "0x10205EC")]
		[Preserve]
		private static void Preserver()
		{
		}
	}
}
namespace UnityEngine.Timeline
{
	[Token(Token = "0x20002C5")]
	public class VideoPlayableBehaviour : PlayableBehaviour
	{
		[Token(Token = "0x4000CBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public VideoPlayer videoPlayer;

		[Token(Token = "0x4000CBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VideoClip videoClip;

		[Token(Token = "0x4000CBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool mute;

		[Token(Token = "0x4000CBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool loop;

		[Token(Token = "0x4000CBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public double preloadTime;

		[Token(Token = "0x4000CBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public double clipInTime;

		[Token(Token = "0x4000CC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool playedOnce;

		[Token(Token = "0x4000CC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		private bool preparing;

		[Token(Token = "0x6000FA5")]
		[Address(RVA = "0x10209F0", Offset = "0x10209F0", VA = "0x10209F0")]
		public void PrepareVideo()
		{
		}

		[Token(Token = "0x6000FA6")]
		[Address(RVA = "0x1020D94", Offset = "0x1020D94", VA = "0x1020D94")]
		private void LoopPointReached(VideoPlayer vp)
		{
		}

		[Token(Token = "0x6000FA7")]
		[Address(RVA = "0x1020DA4", Offset = "0x1020DA4", VA = "0x1020DA4", Slot = "19")]
		public override void PrepareFrame(Playable playable, FrameData info)
		{
		}

		[Token(Token = "0x6000FA8")]
		[Address(RVA = "0x102105C", Offset = "0x102105C", VA = "0x102105C", Slot = "17")]
		public override void OnBehaviourPlay(Playable playable, FrameData info)
		{
		}

		[Token(Token = "0x6000FA9")]
		[Address(RVA = "0x102119C", Offset = "0x102119C", VA = "0x102119C", Slot = "18")]
		public override void OnBehaviourPause(Playable playable, FrameData info)
		{
		}

		[Token(Token = "0x6000FAA")]
		[Address(RVA = "0x10212B0", Offset = "0x10212B0", VA = "0x10212B0", Slot = "20")]
		public override void ProcessFrame(Playable playable, FrameData info, object playerData)
		{
		}

		[Token(Token = "0x6000FAB")]
		[Address(RVA = "0x102147C", Offset = "0x102147C", VA = "0x102147C", Slot = "13")]
		public override void OnGraphStart(Playable playable)
		{
		}

		[Token(Token = "0x6000FAC")]
		[Address(RVA = "0x1021484", Offset = "0x1021484", VA = "0x1021484", Slot = "14")]
		public override void OnGraphStop(Playable playable)
		{
		}

		[Token(Token = "0x6000FAD")]
		[Address(RVA = "0x10214AC", Offset = "0x10214AC", VA = "0x10214AC", Slot = "16")]
		public override void OnPlayableDestroy(Playable playable)
		{
		}

		[Token(Token = "0x6000FAE")]
		[Address(RVA = "0x1021100", Offset = "0x1021100", VA = "0x1021100")]
		public void PlayVideo()
		{
		}

		[Token(Token = "0x6000FAF")]
		[Address(RVA = "0x1021230", Offset = "0x1021230", VA = "0x1021230")]
		public void PauseVideo()
		{
		}

		[Token(Token = "0x6000FB0")]
		[Address(RVA = "0x1020D10", Offset = "0x1020D10", VA = "0x1020D10")]
		public void StopVideo()
		{
		}

		[Token(Token = "0x6000FB1")]
		[Address(RVA = "0x1020EFC", Offset = "0x1020EFC", VA = "0x1020EFC")]
		private void SyncVideoToPlayable(Playable playable)
		{
		}

		[Token(Token = "0x6000FB2")]
		[Address(RVA = "0x10214B0", Offset = "0x10214B0", VA = "0x10214B0")]
		public VideoPlayableBehaviour()
		{
		}
	}
	[Token(Token = "0x20002C6")]
	public sealed class VideoSchedulerPlayableBehaviour : PlayableBehaviour
	{
		[Token(Token = "0x4000CC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<TimelineClip> m_Clips;

		[Token(Token = "0x4000CC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private PlayableDirector m_Director;

		[Token(Token = "0x170001AA")]
		internal PlayableDirector director
		{
			[Token(Token = "0x6000FB3")]
			[Address(RVA = "0x10214CC", Offset = "0x10214CC", VA = "0x10214CC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FB4")]
			[Address(RVA = "0x10214D4", Offset = "0x10214D4", VA = "0x10214D4")]
			set
			{
			}
		}

		[Token(Token = "0x170001AB")]
		internal IEnumerable<TimelineClip> clips
		{
			[Token(Token = "0x6000FB5")]
			[Address(RVA = "0x10214DC", Offset = "0x10214DC", VA = "0x10214DC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FB6")]
			[Address(RVA = "0x10214E4", Offset = "0x10214E4", VA = "0x10214E4")]
			set
			{
			}
		}

		[Token(Token = "0x6000FB7")]
		[Address(RVA = "0x1021574", Offset = "0x1021574", VA = "0x1021574", Slot = "20")]
		public override void ProcessFrame(Playable playable, FrameData info, object playerData)
		{
		}

		[Token(Token = "0x6000FB8")]
		[Address(RVA = "0x10217A0", Offset = "0x10217A0", VA = "0x10217A0")]
		public VideoSchedulerPlayableBehaviour()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002C7")]
	public class VideoScriptPlayableAsset : PlayableAsset
	{
		[Token(Token = "0x4000CC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ExposedReference<VideoPlayer> videoPlayer;

		[Token(Token = "0x4000CC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[NotKeyable]
		[SerializeField]
		public VideoClip videoClip;

		[Token(Token = "0x4000CC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[NotKeyable]
		[SerializeField]
		public bool mute;

		[Token(Token = "0x4000CC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		[NotKeyable]
		[SerializeField]
		public bool loop;

		[Token(Token = "0x4000CC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[NotKeyable]
		[SerializeField]
		public double preloadTime;

		[Token(Token = "0x4000CC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[NotKeyable]
		[SerializeField]
		public double clipInTime;

		[Token(Token = "0x6000FB9")]
		[Address(RVA = "0x1021828", Offset = "0x1021828", VA = "0x1021828", Slot = "6")]
		public override Playable CreatePlayable(PlayableGraph graph, GameObject go)
		{
			return default(Playable);
		}

		[Token(Token = "0x6000FBA")]
		[Address(RVA = "0x1021988", Offset = "0x1021988", VA = "0x1021988")]
		public VideoScriptPlayableAsset()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002C8")]
	[TrackColor(0.008f, 0.698f, 0.655f)]
	[TrackClipType(typeof(VideoScriptPlayableAsset))]
	public class VideoScriptPlayableTrack : TrackAsset
	{
		[Token(Token = "0x6000FBB")]
		[Address(RVA = "0x10219A4", Offset = "0x10219A4", VA = "0x10219A4", Slot = "24")]
		public override Playable CreateTrackMixer(PlayableGraph graph, GameObject go, int inputCount)
		{
			return default(Playable);
		}

		[Token(Token = "0x6000FBC")]
		[Address(RVA = "0x1021B0C", Offset = "0x1021B0C", VA = "0x1021B0C")]
		public VideoScriptPlayableTrack()
		{
		}
	}
}
namespace DarkwindVR.Examples
{
	[Token(Token = "0x20002C9")]
	public class RewiredButtonExample : MonoBehaviour
	{
		[Token(Token = "0x4000CCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Text text;

		[Token(Token = "0x4000CCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public VRController vrController;

		[Token(Token = "0x6000FBD")]
		[Address(RVA = "0x1021B64", Offset = "0x1021B64", VA = "0x1021B64")]
		private void Update()
		{
		}

		[Token(Token = "0x6000FBE")]
		[Address(RVA = "0x1022454", Offset = "0x1022454", VA = "0x1022454")]
		public RewiredButtonExample()
		{
		}
	}
}
namespace Salmon
{
	[Token(Token = "0x20002CA")]
	public sealed class HairVelocityController : MonoBehaviour
	{
		[Token(Token = "0x4000CCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int kHairLinearVelocity;

		[Token(Token = "0x4000CCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static readonly int kHairAngularVelocity;

		[Token(Token = "0x4000CCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Renderer hairRenderer;

		[Token(Token = "0x4000CCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform headTransform;

		[Token(Token = "0x4000CD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int materialIndex;

		[Token(Token = "0x4000CD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float smoothTime;

		[Token(Token = "0x4000CD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float maxSpeed;

		[Token(Token = "0x4000CD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private MaterialPropertyBlock _props;

		[Token(Token = "0x4000CD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 _prevPosition;

		[Token(Token = "0x4000CD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Quaternion _prevRotation;

		[Token(Token = "0x4000CD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Vector3 _currentLinearVelocity;

		[Token(Token = "0x4000CD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float _prevAngle;

		[Token(Token = "0x4000CD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float _currentAngularVelocity;

		[Token(Token = "0x4000CD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Vector4 _linearVelocity;

		[Token(Token = "0x4000CDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector4 _angularVelocity;

		[Token(Token = "0x6000FBF")]
		[Address(RVA = "0x102245C", Offset = "0x102245C", VA = "0x102245C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000FC0")]
		[Address(RVA = "0x10224C4", Offset = "0x10224C4", VA = "0x10224C4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000FC1")]
		[Address(RVA = "0x1022614", Offset = "0x1022614", VA = "0x1022614")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000FC2")]
		[Address(RVA = "0x1022950", Offset = "0x1022950", VA = "0x1022950")]
		public HairVelocityController()
		{
		}
	}
}
namespace Salmon.StereoVideo
{
	[Token(Token = "0x20002CB")]
	[RequireComponent(typeof(OVROverlay), typeof(VideoPlayer))]
	[DisallowMultipleComponent]
	public class StereoVideoPlayer : MonoBehaviour
	{
		[Token(Token = "0x20002CC")]
		public enum StereoMode
		{
			[Token(Token = "0x4000CEB")]
			Mono,
			[Token(Token = "0x4000CEC")]
			TopBottom,
			[Token(Token = "0x4000CED")]
			LeftRight
		}

		[Token(Token = "0x20002CE")]
		[CompilerGenerated]
		private sealed class <DisableOnFinish>d__29 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000CF0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000CF1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000CF2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public StereoVideoPlayer <>4__this;

			[Token(Token = "0x170001AF")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000FDD")]
				[Address(RVA = "0x1023FBC", Offset = "0x1023FBC", VA = "0x1023FBC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001B0")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000FDF")]
				[Address(RVA = "0x1024004", Offset = "0x1024004", VA = "0x1024004", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000FDA")]
			[Address(RVA = "0x1023B10", Offset = "0x1023B10", VA = "0x1023B10")]
			[DebuggerHidden]
			public <DisableOnFinish>d__29(int <>1__state)
			{
			}

			[Token(Token = "0x6000FDB")]
			[Address(RVA = "0x1023E38", Offset = "0x1023E38", VA = "0x1023E38", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000FDC")]
			[Address(RVA = "0x1023E3C", Offset = "0x1023E3C", VA = "0x1023E3C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000FDE")]
			[Address(RVA = "0x1023FC4", Offset = "0x1023FC4", VA = "0x1023FC4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000CDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string url;

		[Token(Token = "0x4000CDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string assetUrl;

		[Token(Token = "0x4000CDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool isStreamingAsset;

		[Token(Token = "0x4000CDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool isObbAsset;

		[Token(Token = "0x4000CDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		public bool autoDetectStereoLayout;

		[Token(Token = "0x4000CE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public StereoMode stereoMode;

		[Token(Token = "0x4000CE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool displayMono;

		[Token(Token = "0x4000CE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool loop;

		[Token(Token = "0x4000CE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		public bool disableOnFinish;

		[Token(Token = "0x4000CE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Range(0f, 10f)]
		public float playbackSpeed;

		[Token(Token = "0x4000CE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UnityEvent OnVideoBegin;

		[Token(Token = "0x4000CE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public UnityEvent OnVideoStopped;

		[Token(Token = "0x4000CE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private OVROverlay _ovrOverlay;

		[Token(Token = "0x4000CE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private VideoPlayer _videoPlayer;

		[Token(Token = "0x4000CE9")]
		private const string OBB_PATH = "/storage/emulated/0/Android/obb/com.camouflaj.salmon/";

		[Token(Token = "0x170001AC")]
		public bool IsPlaying
		{
			[Token(Token = "0x6000FC4")]
			[Address(RVA = "0x1022A00", Offset = "0x1022A00", VA = "0x1022A00")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001AD")]
		public long Position
		{
			[Token(Token = "0x6000FC5")]
			[Address(RVA = "0x1022A80", Offset = "0x1022A80", VA = "0x1022A80")]
			get
			{
				return default(long);
			}
		}

		[Token(Token = "0x170001AE")]
		public long Duration
		{
			[Token(Token = "0x6000FC6")]
			[Address(RVA = "0x1022B28", Offset = "0x1022B28", VA = "0x1022B28")]
			get
			{
				return default(long);
			}
		}

		[Token(Token = "0x6000FC7")]
		[Address(RVA = "0x1022BD0", Offset = "0x1022BD0", VA = "0x1022BD0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000FC8")]
		[Address(RVA = "0x1022DBC", Offset = "0x1022DBC", VA = "0x1022DBC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000FC9")]
		[Address(RVA = "0x1022DC0", Offset = "0x1022DC0", VA = "0x1022DC0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000FCA")]
		[Address(RVA = "0x1022DD8", Offset = "0x1022DD8", VA = "0x1022DD8")]
		public void UpdateOverlayDimensions()
		{
		}

		[Token(Token = "0x6000FCB")]
		[Address(RVA = "0x1023018", Offset = "0x1023018", VA = "0x1023018")]
		public void UpdateOverlayDisplay()
		{
		}

		[Token(Token = "0x6000FCC")]
		[Address(RVA = "0x10233F0", Offset = "0x10233F0", VA = "0x10233F0")]
		public void Play(string url)
		{
		}

		[Token(Token = "0x6000FCD")]
		[Address(RVA = "0x102340C", Offset = "0x102340C", VA = "0x102340C")]
		public void Play()
		{
		}

		[Token(Token = "0x6000FCE")]
		[Address(RVA = "0x1023960", Offset = "0x1023960", VA = "0x1023960")]
		[IteratorStateMachine(typeof(<DisableOnFinish>d__29))]
		private IEnumerator DisableOnFinish()
		{
			return null;
		}

		[Token(Token = "0x6000FCF")]
		[Address(RVA = "0x1023B38", Offset = "0x1023B38", VA = "0x1023B38")]
		public void Pause()
		{
		}

		[Token(Token = "0x6000FD0")]
		[Address(RVA = "0x1023BB8", Offset = "0x1023BB8", VA = "0x1023BB8")]
		public void Seek(long position)
		{
		}

		[Token(Token = "0x6000FD1")]
		[Address(RVA = "0x10238A8", Offset = "0x10238A8", VA = "0x10238A8")]
		public void Stop()
		{
		}

		[Token(Token = "0x6000FD2")]
		[Address(RVA = "0x1023A74", Offset = "0x1023A74", VA = "0x1023A74")]
		public void SetPlaybackSpeed(float speed)
		{
		}

		[Token(Token = "0x6000FD3")]
		[Address(RVA = "0x10239D4", Offset = "0x10239D4", VA = "0x10239D4")]
		public void SetLooping(bool looping)
		{
		}

		[Token(Token = "0x6000FD4")]
		[Address(RVA = "0x1023CB4", Offset = "0x1023CB4", VA = "0x1023CB4")]
		public static Vector4 ToVector(Rect rect)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6000FD5")]
		[Address(RVA = "0x1023D2C", Offset = "0x1023D2C", VA = "0x1023D2C")]
		public StereoVideoPlayer()
		{
		}
	}
}
namespace BakeryVariants
{
	[Token(Token = "0x20002CF")]
	[Flags]
	public enum LightmapComponents
	{
		[Token(Token = "0x4000CF4")]
		Lightmaps = 1,
		[Token(Token = "0x4000CF5")]
		ReflectionProbes = 2,
		[Token(Token = "0x4000CF6")]
		LightProbes = 4,
		[Token(Token = "0x4000CF7")]
		AllProbes = 6,
		[Token(Token = "0x4000CF8")]
		AllLightingData = 7,
		[Token(Token = "0x4000CF9")]
		GameObjects = 8,
		[Token(Token = "0x4000CFA")]
		All = 0xF
	}
	[Token(Token = "0x20002D0")]
	[CreateAssetMenu(menuName = "Bakery Lightmap Variants/Lightmap Variant")]
	public class BakeryVariant : ScriptableObject
	{
		[Serializable]
		[Token(Token = "0x20002D1")]
		public class SceneData
		{
			[Token(Token = "0x4000D00")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[GuidReferenceType(typeof(BakeryVariantSceneSettings))]
			public GuidReference sceneSettings;

			[Token(Token = "0x6000FE4")]
			[Address(RVA = "0x10245DC", Offset = "0x10245DC", VA = "0x10245DC")]
			public SceneData()
			{
			}
		}

		[Token(Token = "0x4000CFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool isDefault;

		[Token(Token = "0x4000CFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SceneData[] sceneData;

		[Token(Token = "0x4000CFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public SphericalHarmonics[] sphericalHarmonics;

		[Token(Token = "0x4000CFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public long lastBakeTime;

		[Token(Token = "0x4000CFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[FolderFieldGUID]
		public string outputFolderGUID;

		[Token(Token = "0x6000FE0")]
		[Address(RVA = "0x102400C", Offset = "0x102400C", VA = "0x102400C")]
		public static void ApplySphericalHarmonicData(BakeryVariant data)
		{
		}

		[Token(Token = "0x6000FE1")]
		[Address(RVA = "0x10241C4", Offset = "0x10241C4", VA = "0x10241C4")]
		public void Apply(LightmapComponents components = LightmapComponents.All, bool includeBakeStates = false)
		{
		}

		[Token(Token = "0x6000FE2")]
		[Address(RVA = "0x1024374", Offset = "0x1024374", VA = "0x1024374")]
		public void Unload()
		{
		}

		[Token(Token = "0x6000FE3")]
		[Address(RVA = "0x1024540", Offset = "0x1024540", VA = "0x1024540")]
		public BakeryVariant()
		{
		}
	}
	[Token(Token = "0x20002D3")]
	[CreateAssetMenu(menuName = "Bakery Lightmap Variants/Lightmap Variant Collection")]
	public class BakeryVariantCollection : ScriptableObject
	{
		[Token(Token = "0x4000D03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<BakeryVariant> variantData;

		[Token(Token = "0x6000FE8")]
		[Address(RVA = "0x1024750", Offset = "0x1024750", VA = "0x1024750")]
		public BakeryVariantCollection()
		{
		}
	}
	[Token(Token = "0x20002D4")]
	public enum GameObjectState
	{
		[Token(Token = "0x4000D05")]
		Enabled,
		[Token(Token = "0x4000D06")]
		Disabled,
		[Token(Token = "0x4000D07")]
		BakeOnly
	}
	[Serializable]
	[Token(Token = "0x20002D5")]
	public class GameObjectSettings
	{
		[Token(Token = "0x4000D08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GameObject gameObject;

		[Token(Token = "0x4000D09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObjectState gameObjectState;

		[Token(Token = "0x6000FE9")]
		[Address(RVA = "0x10247D8", Offset = "0x10247D8", VA = "0x10247D8")]
		public GameObjectSettings()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002D6")]
	public class ReflectionProbeSettings
	{
		[Token(Token = "0x4000D0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ReflectionProbe reflectionProbe;

		[Token(Token = "0x4000D0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Texture texture;

		[Token(Token = "0x6000FEA")]
		[Address(RVA = "0x10247E0", Offset = "0x10247E0", VA = "0x10247E0")]
		public ReflectionProbeSettings()
		{
		}
	}
	[Token(Token = "0x20002D7")]
	public class BakeryVariantSceneSettings : MonoBehaviour
	{
		[Token(Token = "0x4000D0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<GameObjectSettings> gameObjectStates;

		[Token(Token = "0x4000D0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<ReflectionProbeSettings> reflectionProbeSettings;

		[Token(Token = "0x4000D0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ftLightmapsStorage storage;

		[Token(Token = "0x4000D0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int _refCount;

		[Token(Token = "0x6000FEB")]
		[Address(RVA = "0x1024320", Offset = "0x1024320", VA = "0x1024320")]
		public void Apply(LightmapComponents components = LightmapComponents.All, bool includeBakedGameObjects = false)
		{
		}

		[Token(Token = "0x6000FEC")]
		[Address(RVA = "0x1024C28", Offset = "0x1024C28", VA = "0x1024C28")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000FED")]
		[Address(RVA = "0x102448C", Offset = "0x102448C", VA = "0x102448C")]
		public void Unload()
		{
		}

		[Token(Token = "0x6000FEE")]
		[Address(RVA = "0x10247E8", Offset = "0x10247E8", VA = "0x10247E8")]
		private void ApplyGameObjectStates(bool includeBaking = false)
		{
		}

		[Token(Token = "0x6000FEF")]
		[Address(RVA = "0x1024B1C", Offset = "0x1024B1C", VA = "0x1024B1C")]
		private void ApplyLightmaps()
		{
		}

		[Token(Token = "0x6000FF0")]
		[Address(RVA = "0x1024944", Offset = "0x1024944", VA = "0x1024944")]
		private void ApplyReflectionProbes()
		{
		}

		[Token(Token = "0x6000FF1")]
		[Address(RVA = "0x1024C5C", Offset = "0x1024C5C", VA = "0x1024C5C")]
		public BakeryVariantSceneSettings()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002D8")]
	public class SphericalHarmonics
	{
		[Token(Token = "0x4000D10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float[] coefficients;

		[Token(Token = "0x6000FF2")]
		[Address(RVA = "0x1024CE4", Offset = "0x1024CE4", VA = "0x1024CE4")]
		public SphericalHarmonics()
		{
		}

		[Token(Token = "0x6000FF3")]
		[Address(RVA = "0x1024D48", Offset = "0x1024D48", VA = "0x1024D48")]
		public SphericalHarmonics(SphericalHarmonics other)
		{
		}

		[Token(Token = "0x6000FF4")]
		[Address(RVA = "0x1024690", Offset = "0x1024690", VA = "0x1024690")]
		public static explicit operator SphericalHarmonicsL2(SphericalHarmonics sphericalHarmonics)
		{
			return default(SphericalHarmonicsL2);
		}

		[Token(Token = "0x6000FF5")]
		[Address(RVA = "0x1024E28", Offset = "0x1024E28", VA = "0x1024E28")]
		public static explicit operator SphericalHarmonics(SphericalHarmonicsL2 sphericalHarmonicsL2)
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x20002D9")]
	public class BakeryVariantPlayableAsset : PlayableAsset
	{
		[Token(Token = "0x4000D11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public BakeryVariant variantData;

		[Token(Token = "0x4000D12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[EnumFlags]
		public LightmapComponents lightmapComponents;

		[Token(Token = "0x6000FF6")]
		[Address(RVA = "0x1024EF4", Offset = "0x1024EF4", VA = "0x1024EF4", Slot = "6")]
		public override Playable CreatePlayable(PlayableGraph graph, GameObject myGameObject)
		{
			return default(Playable);
		}

		[Token(Token = "0x6000FF7")]
		[Address(RVA = "0x1024FFC", Offset = "0x1024FFC", VA = "0x1024FFC")]
		public BakeryVariantPlayableAsset()
		{
		}
	}
	[Token(Token = "0x20002DA")]
	public class BakeryLightmapVariantPlayableBehaviour : PlayableBehaviour
	{
		[NonSerialized]
		[Token(Token = "0x4000D13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public BakeryVariant variant;

		[NonSerialized]
		[Token(Token = "0x4000D14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LightmapComponents components;

		[Token(Token = "0x6000FF8")]
		[Address(RVA = "0x102500C", Offset = "0x102500C", VA = "0x102500C", Slot = "17")]
		public override void OnBehaviourPlay(Playable playable, FrameData info)
		{
		}

		[Token(Token = "0x6000FF9")]
		[Address(RVA = "0x1024FF4", Offset = "0x1024FF4", VA = "0x1024FF4")]
		public BakeryLightmapVariantPlayableBehaviour()
		{
		}
	}
}
namespace Darkwind
{
	[Token(Token = "0x20002DB")]
	public abstract class BackgroundInstall : MonoBehaviour
	{
		[Token(Token = "0x20002DC")]
		public class ContentSubscription
		{
			[Token(Token = "0x20002DD")]
			public enum LoadResult
			{
				[Token(Token = "0x4000D20")]
				Error = -1,
				[Token(Token = "0x4000D21")]
				Pending,
				[Token(Token = "0x4000D22")]
				Success
			}

			[Token(Token = "0x20002DE")]
			public delegate void SubscriptionFinishedAction(bool ready);

			[Token(Token = "0x4000D1C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private Dictionary<object, SubscriptionFinishedAction> listeners;

			[Token(Token = "0x4000D1D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			protected float readyPercent;

			[Token(Token = "0x4000D1E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			protected bool cancelled;

			[Token(Token = "0x1400000B")]
			private event SubscriptionFinishedAction OnFinished
			{
				[Token(Token = "0x600100D")]
				[Address(RVA = "0x1025E54", Offset = "0x1025E54", VA = "0x1025E54")]
				[CompilerGenerated]
				add
				{
				}
				[Token(Token = "0x600100E")]
				[Address(RVA = "0x1025EF0", Offset = "0x1025EF0", VA = "0x1025EF0")]
				[CompilerGenerated]
				remove
				{
				}
			}

			[Token(Token = "0x600100F")]
			[Address(RVA = "0x1025E24", Offset = "0x1025E24", VA = "0x1025E24")]
			public ContentSubscription(bool loaded = false)
			{
			}

			[Token(Token = "0x6001010")]
			[Address(RVA = "0x1025F8C", Offset = "0x1025F8C", VA = "0x1025F8C", Slot = "4")]
			public virtual ContentSubscription Requeue(int requestedIndex = 0)
			{
				return null;
			}

			[Token(Token = "0x6001011")]
			[Address(RVA = "0x1025738", Offset = "0x1025738", VA = "0x1025738")]
			public ContentSubscription WhenFinished(SubscriptionFinishedAction onFinished, [Optional] object listener)
			{
				return null;
			}

			[Token(Token = "0x6001012")]
			[Address(RVA = "0x1025F90", Offset = "0x1025F90", VA = "0x1025F90")]
			public bool HasListener(object listener)
			{
				return default(bool);
			}

			[Token(Token = "0x6001013")]
			[Address(RVA = "0x1025FF0", Offset = "0x1025FF0", VA = "0x1025FF0")]
			public bool HasAction()
			{
				return default(bool);
			}

			[Token(Token = "0x6001014")]
			[Address(RVA = "0x10259C4", Offset = "0x10259C4", VA = "0x10259C4")]
			public bool Unregister(object listener)
			{
				return default(bool);
			}

			[Token(Token = "0x6001015")]
			[Address(RVA = "0x1026000", Offset = "0x1026000", VA = "0x1026000", Slot = "5")]
			public virtual float GetPercent()
			{
				return default(float);
			}

			[Token(Token = "0x6001016")]
			[Address(RVA = "0x1026008", Offset = "0x1026008", VA = "0x1026008", Slot = "6")]
			protected virtual LoadResult CheckResult()
			{
				return default(LoadResult);
			}

			[Token(Token = "0x6001017")]
			[Address(RVA = "0x1025C30", Offset = "0x1025C30", VA = "0x1025C30")]
			internal bool CheckFinished()
			{
				return default(bool);
			}

			[Token(Token = "0x6001018")]
			[Address(RVA = "0x1025660", Offset = "0x1025660", VA = "0x1025660")]
			protected internal bool Cancel()
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4000D15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected static readonly ContentSubscription CompletedSubscription;

		[Token(Token = "0x4000D16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Dictionary<string, ContentSubscription> pendingSubscriptions;

		[Token(Token = "0x4000D18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected ContentSubscription intent;

		[Token(Token = "0x4000D19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private string activeLanguage;

		[Token(Token = "0x170001B1")]
		protected LinkedList<string> subscribedNames
		{
			[Token(Token = "0x6000FFB")]
			[Address(RVA = "0x10250A8", Offset = "0x10250A8", VA = "0x10250A8")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FFA")]
			[Address(RVA = "0x10250A0", Offset = "0x10250A0", VA = "0x10250A0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001B2")]
		protected static BackgroundInstall _instance
		{
			[Token(Token = "0x6000FFC")]
			[Address(RVA = "0x10250B0", Offset = "0x10250B0", VA = "0x10250B0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FFD")]
			[Address(RVA = "0x1025108", Offset = "0x1025108", VA = "0x1025108")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001B3")]
		public static BackgroundInstall Instance
		{
			[Token(Token = "0x6000FFE")]
			[Address(RVA = "0x1025168", Offset = "0x1025168", VA = "0x1025168")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000FFF")]
		[Address(RVA = "0x10252D8", Offset = "0x10252D8", VA = "0x10252D8")]
		private static BackgroundInstall CreateInstance()
		{
			return null;
		}

		[Token(Token = "0x6001000")]
		public abstract void Startup();

		[Token(Token = "0x6001001")]
		[Address(RVA = "0x1025394", Offset = "0x1025394", VA = "0x1025394", Slot = "5")]
		public virtual bool SetLanguage(string languageCode)
		{
			return default(bool);
		}

		[Token(Token = "0x6001002")]
		[Address(RVA = "0x10253AC", Offset = "0x10253AC", VA = "0x10253AC", Slot = "6")]
		public virtual string GetLanguage()
		{
			return null;
		}

		[Token(Token = "0x6001003")]
		public abstract bool IsContentReady(string contentName);

		[Token(Token = "0x6001004")]
		protected abstract ContentSubscription CreateSubscription(string formattedName);

		[Token(Token = "0x6001005")]
		[Address(RVA = "0x10253B4", Offset = "0x10253B4", VA = "0x10253B4", Slot = "9")]
		protected virtual string FormatName(string contentName)
		{
			return null;
		}

		[Token(Token = "0x6001006")]
		[Address(RVA = "0x10253BC", Offset = "0x10253BC", VA = "0x10253BC")]
		public ContentSubscription FetchSubscription(string contentName)
		{
			return null;
		}

		[Token(Token = "0x6001007")]
		[Address(RVA = "0x102552C", Offset = "0x102552C", VA = "0x102552C")]
		public bool WaitIntent(ContentSubscription subscription)
		{
			return default(bool);
		}

		[Token(Token = "0x6001008")]
		[Address(RVA = "0x10258DC", Offset = "0x10258DC", VA = "0x10258DC", Slot = "10")]
		protected virtual void ReleaseIntent(bool succ)
		{
		}

		[Token(Token = "0x6001009")]
		[Address(RVA = "0x10258E8", Offset = "0x10258E8", VA = "0x10258E8", Slot = "11")]
		public virtual bool UnregisterSubscriptions(object listener)
		{
			return default(bool);
		}

		[Token(Token = "0x600100A")]
		[Address(RVA = "0x1025B08", Offset = "0x1025B08", VA = "0x1025B08", Slot = "12")]
		public virtual void Update()
		{
		}

		[Token(Token = "0x600100B")]
		[Address(RVA = "0x1025CC0", Offset = "0x1025CC0", VA = "0x1025CC0")]
		protected BackgroundInstall()
		{
		}
	}
	[Token(Token = "0x20002DF")]
	public class CompletedInstall : BackgroundInstall
	{
		[Token(Token = "0x600101D")]
		[Address(RVA = "0x1026110", Offset = "0x1026110", VA = "0x1026110", Slot = "7")]
		public override bool IsContentReady(string contentName)
		{
			return default(bool);
		}

		[Token(Token = "0x600101E")]
		[Address(RVA = "0x1026118", Offset = "0x1026118", VA = "0x1026118", Slot = "4")]
		public override void Startup()
		{
		}

		[Token(Token = "0x600101F")]
		[Address(RVA = "0x102611C", Offset = "0x102611C", VA = "0x102611C", Slot = "12")]
		public override void Update()
		{
		}

		[Token(Token = "0x6001020")]
		[Address(RVA = "0x1026120", Offset = "0x1026120", VA = "0x1026120", Slot = "8")]
		protected override ContentSubscription CreateSubscription(string formattedName)
		{
			return null;
		}

		[Token(Token = "0x6001021")]
		[Address(RVA = "0x1026178", Offset = "0x1026178", VA = "0x1026178")]
		public CompletedInstall()
		{
		}
	}
	[Token(Token = "0x20002E0")]
	public static class PS4Memory
	{
		[Token(Token = "0x4000D23")]
		private const ulong UnityReservedDirect = 268435456uL;

		[Token(Token = "0x4000D24")]
		private const ulong UnityReservedFlexible = 469762048uL;

		[Token(Token = "0x4000D25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static PS4MemoryInfo _memoryInfo;

		[Token(Token = "0x170001B4")]
		public static long MaxDirectMemory
		{
			[Token(Token = "0x6001022")]
			[Address(RVA = "0x10261CC", Offset = "0x10261CC", VA = "0x10261CC")]
			get
			{
				return default(long);
			}
		}

		[Token(Token = "0x170001B5")]
		public static long MaxAvailableDirectMemory
		{
			[Token(Token = "0x6001023")]
			[Address(RVA = "0x1026214", Offset = "0x1026214", VA = "0x1026214")]
			get
			{
				return default(long);
			}
		}

		[Token(Token = "0x170001B6")]
		public static long MaxFlexibleMemory
		{
			[Token(Token = "0x6001024")]
			[Address(RVA = "0x102626C", Offset = "0x102626C", VA = "0x102626C")]
			get
			{
				return default(long);
			}
		}

		[Token(Token = "0x170001B7")]
		public static long UsedDirectMemory
		{
			[Token(Token = "0x6001025")]
			[Address(RVA = "0x10262B4", Offset = "0x10262B4", VA = "0x10262B4")]
			get
			{
				return default(long);
			}
		}

		[Token(Token = "0x170001B8")]
		public static long UsedFlexibleMemory
		{
			[Token(Token = "0x6001026")]
			[Address(RVA = "0x1026334", Offset = "0x1026334", VA = "0x1026334")]
			get
			{
				return default(long);
			}
		}

		[Token(Token = "0x170001B9")]
		public static long UsedGarlicMemory
		{
			[Token(Token = "0x6001027")]
			[Address(RVA = "0x102637C", Offset = "0x102637C", VA = "0x102637C")]
			get
			{
				return default(long);
			}
		}

		[Token(Token = "0x170001BA")]
		public static long UsedOnionMemory
		{
			[Token(Token = "0x6001028")]
			[Address(RVA = "0x10263C4", Offset = "0x10263C4", VA = "0x10263C4")]
			get
			{
				return default(long);
			}
		}

		[Token(Token = "0x6001029")]
		[Address(RVA = "0x102640C", Offset = "0x102640C", VA = "0x102640C")]
		public static void Query()
		{
		}
	}
	[Token(Token = "0x20002E1")]
	internal struct PS4MemoryInfo
	{
		[Token(Token = "0x4000D26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong maxDirectSize;

		[Token(Token = "0x4000D27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong maxFlexibleSize;

		[Token(Token = "0x4000D28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ulong usedDirectSize;

		[Token(Token = "0x4000D29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ulong usedFlexibleSize;

		[Token(Token = "0x4000D2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ulong usedOnionSize;

		[Token(Token = "0x4000D2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ulong usedGarlicSize;
	}
}
namespace Darkwind.RuntimePrefs
{
	[Token(Token = "0x20002E2")]
	public static class RuntimePrefs
	{
		[Serializable]
		[Token(Token = "0x20002E3")]
		public struct Pref
		{
			[Token(Token = "0x4000D2E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public string name;

			[Token(Token = "0x4000D2F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public string value;
		}

		[Serializable]
		[Token(Token = "0x20002E4")]
		public class PrefCollection : IEnumerable<Pref>, IEnumerable, ISerializationCallbackReceiver
		{
			[Token(Token = "0x4000D30")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[SerializeField]
			private List<Pref> _prefs;

			[Token(Token = "0x4000D31")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private Dictionary<string, int> _prefNameCache;

			[Token(Token = "0x170001BB")]
			public int Count
			{
				[Token(Token = "0x6001039")]
				[Address(RVA = "0x1027CCC", Offset = "0x1027CCC", VA = "0x1027CCC")]
				get
				{
					return default(int);
				}
			}

			[Token(Token = "0x600103A")]
			[Address(RVA = "0x1027D14", Offset = "0x1027D14", VA = "0x1027D14")]
			public PrefCollection()
			{
			}

			[Token(Token = "0x600103B")]
			[Address(RVA = "0x1027DEC", Offset = "0x1027DEC", VA = "0x1027DEC")]
			private PrefCollection(List<Pref> prefs)
			{
			}

			[Token(Token = "0x600103C")]
			[Address(RVA = "0x1027FC4", Offset = "0x1027FC4", VA = "0x1027FC4", Slot = "4")]
			public IEnumerator<Pref> GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x600103D")]
			[Address(RVA = "0x1028050", Offset = "0x1028050", VA = "0x1028050", Slot = "5")]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x600103E")]
			[Address(RVA = "0x10280DC", Offset = "0x10280DC", VA = "0x10280DC")]
			public string GetName(int index)
			{
				return null;
			}

			[Token(Token = "0x600103F")]
			[Address(RVA = "0x1028134", Offset = "0x1028134", VA = "0x1028134")]
			public string GetValue(int index)
			{
				return null;
			}

			[Token(Token = "0x6001040")]
			[Address(RVA = "0x1028194", Offset = "0x1028194", VA = "0x1028194")]
			public string GetValue(string name)
			{
				return null;
			}

			[Token(Token = "0x6001041")]
			[Address(RVA = "0x102828C", Offset = "0x102828C", VA = "0x102828C")]
			public bool HasPref(string name)
			{
				return default(bool);
			}

			[Token(Token = "0x6001042")]
			[Address(RVA = "0x1028208", Offset = "0x1028208", VA = "0x1028208")]
			public int IndexOf(string name)
			{
				return default(int);
			}

			[Token(Token = "0x6001043")]
			[Address(RVA = "0x10282E4", Offset = "0x10282E4", VA = "0x10282E4", Slot = "6")]
			private void UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize()
			{
			}

			[Token(Token = "0x6001044")]
			[Address(RVA = "0x10282E8", Offset = "0x10282E8", VA = "0x10282E8", Slot = "7")]
			private void UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize()
			{
			}

			[Token(Token = "0x6001045")]
			[Address(RVA = "0x10282EC", Offset = "0x10282EC", VA = "0x10282EC")]
			public bool TryGet(string name, out string value)
			{
				return default(bool);
			}

			[Token(Token = "0x6001046")]
			[Address(RVA = "0x1027E88", Offset = "0x1027E88", VA = "0x1027E88")]
			private void BuildNameCache()
			{
			}

			[Token(Token = "0x6001047")]
			[Address(RVA = "0x102838C", Offset = "0x102838C", VA = "0x102838C")]
			public static PrefCollection FromFile(string filePath)
			{
				return null;
			}

			[Token(Token = "0x6001048")]
			[Address(RVA = "0x1028558", Offset = "0x1028558", VA = "0x1028558")]
			public static PrefCollection FromJsonString(string json)
			{
				return null;
			}
		}

		[Token(Token = "0x20002E5")]
		private delegate bool TryParseDelegate<T>(string text, out T value);

		[Token(Token = "0x20002E6")]
		[CompilerGenerated]
		private sealed class <GetAllKeys>d__6 : IEnumerable<string>, IEnumerable, IEnumerator<string>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000D32")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000D33")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private string <>2__current;

			[Token(Token = "0x4000D34")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4000D35")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private IEnumerator<Pref> <>7__wrap1;

			[Token(Token = "0x170001BC")]
			private string System.Collections.Generic.IEnumerator<System.String>.Current
			{
				[Token(Token = "0x6001051")]
				[Address(RVA = "0x10288FC", Offset = "0x10288FC", VA = "0x10288FC", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001BD")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001053")]
				[Address(RVA = "0x1028944", Offset = "0x1028944", VA = "0x1028944", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600104D")]
			[Address(RVA = "0x10285A0", Offset = "0x10285A0", VA = "0x10285A0")]
			[DebuggerHidden]
			public <GetAllKeys>d__6(int <>1__state)
			{
			}

			[Token(Token = "0x600104E")]
			[Address(RVA = "0x10285D4", Offset = "0x10285D4", VA = "0x10285D4", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600104F")]
			[Address(RVA = "0x10285F0", Offset = "0x10285F0", VA = "0x10285F0", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001050")]
			[Address(RVA = "0x102884C", Offset = "0x102884C", VA = "0x102884C")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6001052")]
			[Address(RVA = "0x1028904", Offset = "0x1028904", VA = "0x1028904", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6001054")]
			[Address(RVA = "0x102894C", Offset = "0x102894C", VA = "0x102894C", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<string> System.Collections.Generic.IEnumerable<System.String>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6001055")]
			[Address(RVA = "0x10289E4", Offset = "0x10289E4", VA = "0x10289E4", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x4000D2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static PrefCollection _prefCollection;

		[Token(Token = "0x4000D2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly string PrefsFilePath;

		[Token(Token = "0x600102A")]
		[Address(RVA = "0x102645C", Offset = "0x102645C", VA = "0x102645C")]
		static RuntimePrefs()
		{
		}

		[Token(Token = "0x600102B")]
		[Address(RVA = "0x10265F8", Offset = "0x10265F8", VA = "0x10265F8")]
		[IteratorStateMachine(typeof(<GetAllKeys>d__6))]
		public static IEnumerable<string> GetAllKeys()
		{
			return null;
		}

		[Token(Token = "0x600102C")]
		[Address(RVA = "0x1026658", Offset = "0x1026658", VA = "0x1026658")]
		public static bool GetBool(string key, bool defaultValue)
		{
			return default(bool);
		}

		[Token(Token = "0x600102D")]
		[Address(RVA = "0x102674C", Offset = "0x102674C", VA = "0x102674C")]
		public static bool GetBool(string key)
		{
			return default(bool);
		}

		[Token(Token = "0x600102E")]
		[Address(RVA = "0x10267A4", Offset = "0x10267A4", VA = "0x10267A4")]
		public static float GetFloat(string key, float defaultValue)
		{
			return default(float);
		}

		[Token(Token = "0x600102F")]
		[Address(RVA = "0x1026894", Offset = "0x1026894", VA = "0x1026894")]
		public static float GetFloat(string key)
		{
			return default(float);
		}

		[Token(Token = "0x6001030")]
		[Address(RVA = "0x10268EC", Offset = "0x10268EC", VA = "0x10268EC")]
		public static int GetInt(string key, int defaultValue)
		{
			return default(int);
		}

		[Token(Token = "0x6001031")]
		[Address(RVA = "0x10269D4", Offset = "0x10269D4", VA = "0x10269D4")]
		public static int GetInt(string key)
		{
			return default(int);
		}

		[Token(Token = "0x6001032")]
		[Address(RVA = "0x1026A2C", Offset = "0x1026A2C", VA = "0x1026A2C")]
		public static string GetString(string key, string defaultValue)
		{
			return null;
		}

		[Token(Token = "0x6001033")]
		[Address(RVA = "0x1026B14", Offset = "0x1026B14", VA = "0x1026B14")]
		public static string GetString(string key)
		{
			return null;
		}

		[Token(Token = "0x6001034")]
		[Address(RVA = "0x1026B6C", Offset = "0x1026B6C", VA = "0x1026B6C")]
		public static bool HasKey(string key)
		{
			return default(bool);
		}

		[Token(Token = "0x6001035")]
		private static bool TryGetValue<T>(string key, out T value, TryParseDelegate<T> parseDelegate)
		{
			return default(bool);
		}

		[Token(Token = "0x6001036")]
		[Address(RVA = "0x1026BD8", Offset = "0x1026BD8", VA = "0x1026BD8")]
		private static bool TryParseBool(string text, out bool value)
		{
			return default(bool);
		}

		[Token(Token = "0x6001037")]
		[Address(RVA = "0x1026CA8", Offset = "0x1026CA8", VA = "0x1026CA8")]
		private static bool TryParseString(string text, out string value)
		{
			return default(bool);
		}

		[Token(Token = "0x6001038")]
		[Address(RVA = "0x1026508", Offset = "0x1026508", VA = "0x1026508")]
		public static void LoadPreferencesFile()
		{
		}
	}
}
namespace Darkwind.IK
{
	[Token(Token = "0x20002E7")]
	public class IKAnimatorParameterDriver : MonoBehaviour
	{
		[Token(Token = "0x4000D36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Animator _animator;

		[Token(Token = "0x4000D37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private LookAtIK _lookAtIK;

		[Token(Token = "0x4000D38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AnimatorParameterFloat]
		public int parameter;

		[Token(Token = "0x6001056")]
		[Address(RVA = "0x10289E8", Offset = "0x10289E8", VA = "0x10289E8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001057")]
		[Address(RVA = "0x1028A78", Offset = "0x1028A78", VA = "0x1028A78")]
		private void Update()
		{
		}

		[Token(Token = "0x6001058")]
		[Address(RVA = "0x1028AB8", Offset = "0x1028AB8", VA = "0x1028AB8")]
		public IKAnimatorParameterDriver()
		{
		}
	}
}
namespace Darkwind.VR.Examples
{
	[Token(Token = "0x20002E8")]
	public class ClawGameExample : MonoBehaviour
	{
		[Token(Token = "0x20002E9")]
		[CompilerGenerated]
		private sealed class <ClawCoroutine>d__26 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000D4F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000D50")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000D51")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ClawGameExample <>4__this;

			[Token(Token = "0x4000D52")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private WaitForFixedUpdate <waitFixed>5__2;

			[Token(Token = "0x4000D53")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <height>5__3;

			[Token(Token = "0x4000D54")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <time>5__4;

			[Token(Token = "0x4000D55")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private FixedJoint <grab>5__5;

			[Token(Token = "0x4000D56")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private Prop <prop>5__6;

			[Token(Token = "0x170001BE")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001062")]
				[Address(RVA = "0x10298C8", Offset = "0x10298C8", VA = "0x10298C8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001BF")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001064")]
				[Address(RVA = "0x1029910", Offset = "0x1029910", VA = "0x1029910", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600105F")]
			[Address(RVA = "0x1029008", Offset = "0x1029008", VA = "0x1029008")]
			[DebuggerHidden]
			public <ClawCoroutine>d__26(int <>1__state)
			{
			}

			[Token(Token = "0x6001060")]
			[Address(RVA = "0x1029154", Offset = "0x1029154", VA = "0x1029154", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001061")]
			[Address(RVA = "0x1029158", Offset = "0x1029158", VA = "0x1029158", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001063")]
			[Address(RVA = "0x10298D0", Offset = "0x10298D0", VA = "0x10298D0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000D39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PlanarMappingProp joystick;

		[Token(Token = "0x4000D3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Prop button;

		[Token(Token = "0x4000D3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform trolley;

		[Token(Token = "0x4000D3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Rigidbody trolleyBody;

		[Token(Token = "0x4000D3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public SpringJoint spring;

		[Token(Token = "0x4000D3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform claw;

		[Token(Token = "0x4000D3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public LineRenderer line;

		[Token(Token = "0x4000D40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Vector2 min;

		[Token(Token = "0x4000D41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Vector2 max;

		[Token(Token = "0x4000D42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Vector2 exit;

		[Token(Token = "0x4000D43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float speed;

		[Token(Token = "0x4000D44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float dropHeight;

		[Token(Token = "0x4000D45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public LayerMask dropCastMask;

		[Token(Token = "0x4000D46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public float dropDuration;

		[Token(Token = "0x4000D47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float liftDuration;

		[Token(Token = "0x4000D48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float clawGrabRadius;

		[Token(Token = "0x4000D49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Range(0f, 1f)]
		public float deadzoneX;

		[Token(Token = "0x4000D4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[Range(0f, 1f)]
		public float deadzoneY;

		[Token(Token = "0x4000D4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public bool invertX;

		[Token(Token = "0x4000D4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x89")]
		public bool invertY;

		[Token(Token = "0x4000D4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private Vector2 input;

		[Token(Token = "0x4000D4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Coroutine coroutine;

		[Token(Token = "0x6001059")]
		[Address(RVA = "0x1028AC0", Offset = "0x1028AC0", VA = "0x1028AC0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600105A")]
		[Address(RVA = "0x1028BC4", Offset = "0x1028BC4", VA = "0x1028BC4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600105B")]
		[Address(RVA = "0x1028C6C", Offset = "0x1028C6C", VA = "0x1028C6C")]
		private void OnButtonPress(IEffector effector, Prop prop)
		{
		}

		[Token(Token = "0x600105C")]
		[Address(RVA = "0x1028D30", Offset = "0x1028D30", VA = "0x1028D30")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x600105D")]
		[Address(RVA = "0x1028CBC", Offset = "0x1028CBC", VA = "0x1028CBC")]
		[IteratorStateMachine(typeof(<ClawCoroutine>d__26))]
		private IEnumerator ClawCoroutine()
		{
			return null;
		}

		[Token(Token = "0x600105E")]
		[Address(RVA = "0x1029030", Offset = "0x1029030", VA = "0x1029030")]
		public ClawGameExample()
		{
		}
	}
	[Token(Token = "0x20002EA")]
	public class ContinuousHapticsExample : MonoBehaviour
	{
		[Token(Token = "0x4000D57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0f, 31f)]
		[SerializeField]
		private int m_Channel;

		[Token(Token = "0x4000D58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Range(0f, 1f)]
		[SerializeField]
		private float m_Strength;

		[Token(Token = "0x4000D59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public VRController controller;

		[Token(Token = "0x170001C0")]
		public float Strength
		{
			[Token(Token = "0x6001065")]
			[Address(RVA = "0x1029918", Offset = "0x1029918", VA = "0x1029918")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001066")]
			[Address(RVA = "0x1029920", Offset = "0x1029920", VA = "0x1029920")]
			set
			{
			}
		}

		[Token(Token = "0x6001067")]
		[Address(RVA = "0x1029928", Offset = "0x1029928", VA = "0x1029928")]
		private void UpdateHaptics()
		{
		}

		[Token(Token = "0x6001068")]
		[Address(RVA = "0x10299C0", Offset = "0x10299C0", VA = "0x10299C0")]
		public ContinuousHapticsExample()
		{
		}
	}
	[Token(Token = "0x20002EB")]
	public class MagicCarpet : MonoBehaviour
	{
		[Token(Token = "0x4000D5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LinearMappingProp left;

		[Token(Token = "0x4000D5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LinearMappingProp right;

		[Token(Token = "0x4000D5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float turnSpeed;

		[Token(Token = "0x4000D5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float moveSpeed;

		[Token(Token = "0x6001069")]
		[Address(RVA = "0x10299C8", Offset = "0x10299C8", VA = "0x10299C8")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x600106A")]
		[Address(RVA = "0x1029C48", Offset = "0x1029C48", VA = "0x1029C48")]
		public MagicCarpet()
		{
		}
	}
	[Token(Token = "0x20002EC")]
	[DeveloperMenuClass]
	public class MovementAugmentationExample : MonoBehaviour
	{
		[Token(Token = "0x600106B")]
		[Address(RVA = "0x1029C5C", Offset = "0x1029C5C", VA = "0x1029C5C")]
		private void Awake()
		{
		}

		[Token(Token = "0x600106C")]
		[Address(RVA = "0x1029C60", Offset = "0x1029C60", VA = "0x1029C60")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600106D")]
		[Address(RVA = "0x1029C64", Offset = "0x1029C64", VA = "0x1029C64")]
		[DeveloperMenu("Movement Augmentation/Reset", new object[] { }, m_UniqueID = "MOVEMENT_AUGMENTATION_EXAMPLE_RESET")]
		public void ResetMovementAugmentation()
		{
		}

		[Token(Token = "0x600106E")]
		[Address(RVA = "0x1029D1C", Offset = "0x1029D1C", VA = "0x1029D1C")]
		[DeveloperMenu("Movement Augmentation/Decrease", new object[] { -0.1f }, m_UniqueID = "MOVEMENT_AUGMENTATION_EXAMPLE_DECREASE")]
		[DeveloperMenu("Movement Augmentation/Increase", new object[] { 0.1f }, m_UniqueID = "MOVEMENT_AUGMENTATION_EXAMPLE_INCREASE")]
		public void ChangeMovementAugmentation(float amount)
		{
		}

		[Token(Token = "0x600106F")]
		[Address(RVA = "0x1029DBC", Offset = "0x1029DBC", VA = "0x1029DBC")]
		public string ChangeMovementAugmentation_GetName(DeveloperMenuAttribute attr)
		{
			return null;
		}

		[Token(Token = "0x6001070")]
		[Address(RVA = "0x1029F50", Offset = "0x1029F50", VA = "0x1029F50")]
		public MovementAugmentationExample()
		{
		}
	}
	[Token(Token = "0x20002ED")]
	public class PlayerHeightExample : MonoBehaviour
	{
		[Token(Token = "0x4000D5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Text displayText;

		[Token(Token = "0x4000D5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public VRPlayer player;

		[Token(Token = "0x4000D60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private SetPlayerHeight _setPlayerHeight;

		[Token(Token = "0x6001071")]
		[Address(RVA = "0x1029F58", Offset = "0x1029F58", VA = "0x1029F58")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001072")]
		[Address(RVA = "0x1029FB8", Offset = "0x1029FB8", VA = "0x1029FB8")]
		private void Update()
		{
		}

		[Token(Token = "0x6001073")]
		[Address(RVA = "0x102A70C", Offset = "0x102A70C", VA = "0x102A70C")]
		public PlayerHeightExample()
		{
		}
	}
}
namespace Darkwind.PS4
{
	[Token(Token = "0x20002EE")]
	public static class PS4MemoryMarkers
	{
		[Token(Token = "0x20002EF")]
		public enum BookmarkNotification
		{
			[Token(Token = "0x4000D64")]
			None = -1,
			[Token(Token = "0x4000D65")]
			Info,
			[Token(Token = "0x4000D66")]
			Error,
			[Token(Token = "0x4000D67")]
			Warning
		}

		[Token(Token = "0x4000D61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly uint StandardABGR;

		[Token(Token = "0x4000D62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly string EmptyBookmarkDescription;

		[Token(Token = "0x6001074")]
		[Address(RVA = "0x102A714", Offset = "0x102A714", VA = "0x102A714")]
		private static uint ToABGR(this Color color)
		{
			return default(uint);
		}

		[Token(Token = "0x6001075")]
		[Address(RVA = "0x102A77C", Offset = "0x102A77C", VA = "0x102A77C")]
		[System.Diagnostics.Conditional("DEVELOPMENT_BUILD")]
		public static void Push(string label, uint abgr)
		{
		}

		[Token(Token = "0x6001076")]
		[Address(RVA = "0x102A780", Offset = "0x102A780", VA = "0x102A780")]
		[System.Diagnostics.Conditional("DEVELOPMENT_BUILD")]
		public static void Push(string label, Color color)
		{
		}

		[Token(Token = "0x6001077")]
		[Address(RVA = "0x102A784", Offset = "0x102A784", VA = "0x102A784")]
		[System.Diagnostics.Conditional("DEVELOPMENT_BUILD")]
		public static void Push(string label)
		{
		}

		[Token(Token = "0x6001078")]
		[Address(RVA = "0x102A788", Offset = "0x102A788", VA = "0x102A788")]
		[System.Diagnostics.Conditional("DEVELOPMENT_BUILD")]
		public static void Pop()
		{
		}

		[Token(Token = "0x6001079")]
		[Address(RVA = "0x102A78C", Offset = "0x102A78C", VA = "0x102A78C")]
		[System.Diagnostics.Conditional("DEVELOPMENT_BUILD")]
		public static void Bookmark(string label, string description)
		{
		}

		[Token(Token = "0x600107A")]
		[Address(RVA = "0x102A790", Offset = "0x102A790", VA = "0x102A790")]
		[System.Diagnostics.Conditional("DEVELOPMENT_BUILD")]
		public static void Bookmark(BookmarkNotification label, string description)
		{
		}

		[Token(Token = "0x600107B")]
		[Address(RVA = "0x102A794", Offset = "0x102A794", VA = "0x102A794")]
		[System.Diagnostics.Conditional("DEVELOPMENT_BUILD")]
		public static void Bookmark(string label)
		{
		}
	}
}
namespace Darkwind.PlayerLoop
{
	[Token(Token = "0x20002F0")]
	public abstract class CustomPlayerLoopSystem<T> where T : CustomPlayerLoopSystem<T>, new()
	{
		[Token(Token = "0x20002F1")]
		public delegate void UpdateHandler();

		[Token(Token = "0x4000D68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static T _instance;

		[Token(Token = "0x170001C1")]
		public static T Instance
		{
			[Token(Token = "0x600107D")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1400000C")]
		public static event UpdateHandler onUpdate
		{
			[Token(Token = "0x600107E")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600107F")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6001080")]
		public static PlayerLoopSystem Create()
		{
			return default(PlayerLoopSystem);
		}

		[Token(Token = "0x6001081")]
		private void Update()
		{
		}

		[Token(Token = "0x6001082")]
		protected virtual void OnCreate(ref PlayerLoopSystem system)
		{
		}

		[Token(Token = "0x6001083")]
		protected virtual void OnPreUpdate()
		{
		}

		[Token(Token = "0x6001084")]
		protected virtual void OnPostUpdate()
		{
		}

		[Token(Token = "0x6001085")]
		protected CustomPlayerLoopSystem()
		{
		}
	}
	[Token(Token = "0x20002F2")]
	public static class PlayerLoopSystemExtensions
	{
		[Token(Token = "0x600108A")]
		public static bool FindSystem<T>(this PlayerLoopSystem root, out PlayerLoopSystem system, bool recurse = true)
		{
			return default(bool);
		}

		[Token(Token = "0x600108B")]
		public static PlayerLoopSystem RemoveSubSystem<T>(this PlayerLoopSystem root, bool recurse = true)
		{
			return default(PlayerLoopSystem);
		}

		[Token(Token = "0x600108C")]
		public static bool RemoveSubSystem<T>(this PlayerLoopSystem root, out PlayerLoopSystem result, bool recurse = true)
		{
			return default(bool);
		}

		[Token(Token = "0x600108D")]
		[Address(RVA = "0x102A800", Offset = "0x102A800", VA = "0x102A800")]
		public static PlayerLoopSystem PrependSubSystem(this PlayerLoopSystem root, PlayerLoopSystem system)
		{
			return default(PlayerLoopSystem);
		}

		[Token(Token = "0x600108E")]
		[Address(RVA = "0x102A898", Offset = "0x102A898", VA = "0x102A898")]
		public static PlayerLoopSystem AppendSubSystem(this PlayerLoopSystem root, PlayerLoopSystem system)
		{
			return default(PlayerLoopSystem);
		}

		[Token(Token = "0x600108F")]
		public static PlayerLoopSystem InsertBeforeSubSystem<T>(this PlayerLoopSystem root, PlayerLoopSystem system, bool recurse = true)
		{
			return default(PlayerLoopSystem);
		}

		[Token(Token = "0x6001090")]
		public static bool InsertBeforeSubSystem<T>(this PlayerLoopSystem root, PlayerLoopSystem system, out PlayerLoopSystem result, bool recurse = true)
		{
			return default(bool);
		}

		[Token(Token = "0x6001091")]
		public static PlayerLoopSystem InsertAfterSubSystem<T>(this PlayerLoopSystem root, PlayerLoopSystem system, bool recurse = true)
		{
			return default(PlayerLoopSystem);
		}

		[Token(Token = "0x6001092")]
		public static bool InsertAfterSubSystem<T>(this PlayerLoopSystem root, PlayerLoopSystem system, out PlayerLoopSystem result, bool recurse = true)
		{
			return default(bool);
		}

		[Token(Token = "0x6001093")]
		public static int IndexOf<T>(this PlayerLoopSystem[] subSystemList)
		{
			return default(int);
		}

		[Token(Token = "0x6001094")]
		public static PlayerLoopSystem[] Remove<T>(this PlayerLoopSystem[] subSystemList)
		{
			return null;
		}

		[Token(Token = "0x6001095")]
		public static bool Remove<T>(this PlayerLoopSystem[] subSystemList, out PlayerLoopSystem[] result)
		{
			return default(bool);
		}

		[Token(Token = "0x6001096")]
		[Address(RVA = "0x102A98C", Offset = "0x102A98C", VA = "0x102A98C")]
		public static PlayerLoopSystem[] RemoveAtIndex(this PlayerLoopSystem[] subSystemList, int index)
		{
			return null;
		}

		[Token(Token = "0x6001097")]
		[Address(RVA = "0x102A868", Offset = "0x102A868", VA = "0x102A868")]
		public static PlayerLoopSystem[] Prepend(this PlayerLoopSystem[] subSystemList, PlayerLoopSystem system)
		{
			return null;
		}

		[Token(Token = "0x6001098")]
		[Address(RVA = "0x102A8FC", Offset = "0x102A8FC", VA = "0x102A8FC")]
		public static PlayerLoopSystem[] Append(this PlayerLoopSystem[] subSystemList, PlayerLoopSystem system)
		{
			return null;
		}

		[Token(Token = "0x6001099")]
		public static PlayerLoopSystem[] InsertBefore<T>(this PlayerLoopSystem[] subSystemList, PlayerLoopSystem system)
		{
			return null;
		}

		[Token(Token = "0x600109A")]
		public static bool InsertBefore<T>(this PlayerLoopSystem[] subSystemList, PlayerLoopSystem system, out PlayerLoopSystem[] result)
		{
			return default(bool);
		}

		[Token(Token = "0x600109B")]
		public static PlayerLoopSystem[] InsertAfter<T>(this PlayerLoopSystem[] subSystemList, PlayerLoopSystem system)
		{
			return null;
		}

		[Token(Token = "0x600109C")]
		public static bool InsertAfter<T>(this PlayerLoopSystem[] subSystemList, PlayerLoopSystem system, out PlayerLoopSystem[] result)
		{
			return default(bool);
		}

		[Token(Token = "0x600109D")]
		[Address(RVA = "0x102AB50", Offset = "0x102AB50", VA = "0x102AB50")]
		public static PlayerLoopSystem[] InsertAtIndex(this PlayerLoopSystem[] subSystemList, PlayerLoopSystem system, int index)
		{
			return null;
		}
	}
}
namespace Darkwind.Profiling
{
	[Token(Token = "0x20002F3")]
	[DeveloperMenuClass]
	public class ProfileSampleDevMenu : MonoBehaviour
	{
		[Token(Token = "0x20002F4")]
		[CompilerGenerated]
		private sealed class <Start>d__5 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000D6E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000D6F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000D70")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ProfileSampleDevMenu <>4__this;

			[Token(Token = "0x4000D71")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private ProfileSample <>7__wrap1;

			[Token(Token = "0x170001C2")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60010A8")]
				[Address(RVA = "0x102B57C", Offset = "0x102B57C", VA = "0x102B57C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001C3")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60010AA")]
				[Address(RVA = "0x102B5C4", Offset = "0x102B5C4", VA = "0x102B5C4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60010A4")]
			[Address(RVA = "0x102AF04", Offset = "0x102AF04", VA = "0x102AF04")]
			[DebuggerHidden]
			public <Start>d__5(int <>1__state)
			{
			}

			[Token(Token = "0x60010A5")]
			[Address(RVA = "0x102B124", Offset = "0x102B124", VA = "0x102B124", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60010A6")]
			[Address(RVA = "0x102B140", Offset = "0x102B140", VA = "0x102B140", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60010A7")]
			[Address(RVA = "0x102B4CC", Offset = "0x102B4CC", VA = "0x102B4CC")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x60010A9")]
			[Address(RVA = "0x102B584", Offset = "0x102B584", VA = "0x102B584", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000D6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool s_IsActive;

		[Token(Token = "0x4000D6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string activeSceneName;

		[Token(Token = "0x4000D6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float captureTime;

		[Token(Token = "0x4000D6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float delay;

		[Token(Token = "0x600109E")]
		[Address(RVA = "0x102ADE0", Offset = "0x102ADE0", VA = "0x102ADE0")]
		private void Awake()
		{
		}

		[Token(Token = "0x600109F")]
		[Address(RVA = "0x102AE90", Offset = "0x102AE90", VA = "0x102AE90")]
		[IteratorStateMachine(typeof(<Start>d__5))]
		private IEnumerator Start()
		{
			return null;
		}

		[Token(Token = "0x60010A0")]
		[Address(RVA = "0x102AF2C", Offset = "0x102AF2C", VA = "0x102AF2C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60010A1")]
		[Address(RVA = "0x102AF74", Offset = "0x102AF74", VA = "0x102AF74")]
		[DeveloperMenu("Profiling/Capture Sample (1Sec)", new object[] { 1f })]
		[DeveloperMenu("Profiling/Capture Sample (3Sec)", new object[] { 3f })]
		public static void CaptureSample(float captureTime)
		{
		}

		[Token(Token = "0x60010A2")]
		[Address(RVA = "0x102B074", Offset = "0x102B074", VA = "0x102B074")]
		private static bool CaptureSample_Validate(DeveloperMenuAttribute attr)
		{
			return default(bool);
		}

		[Token(Token = "0x60010A3")]
		[Address(RVA = "0x102B0C4", Offset = "0x102B0C4", VA = "0x102B0C4")]
		public ProfileSampleDevMenu()
		{
		}
	}
}
namespace Darkwind.Oculus
{
	[Token(Token = "0x20002F5")]
	public static class OculusAssetFileDownloader
	{
		[Token(Token = "0x20002F6")]
		private class DownloadRequest
		{
			[Token(Token = "0x4000D7A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string name;

			[Token(Token = "0x4000D7B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public ulong id;

			[Token(Token = "0x4000D7C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ulong bytesTotal;

			[Token(Token = "0x4000D7D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public long bytesTransferred;

			[Token(Token = "0x4000D7E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public bool completed;

			[Token(Token = "0x4000D7F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public OnAssetDownloaded completeCallback;

			[Token(Token = "0x60010C9")]
			[Address(RVA = "0x102BD1C", Offset = "0x102BD1C", VA = "0x102BD1C")]
			public DownloadRequest()
			{
			}
		}

		[Token(Token = "0x20002F7")]
		public delegate void OnInitialized(bool success);

		[Token(Token = "0x20002F8")]
		public delegate void OnAssetDownloaded(string assetName, ulong assetId, string assetType, string status, string filepath);

		[Token(Token = "0x4000D72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<ulong, AssetDetails> _assetDictionary;

		[Token(Token = "0x4000D73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Dictionary<string, ulong> _nameToIdDict;

		[Token(Token = "0x4000D74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static List<DownloadRequest> _pendingDownloadRequests;

		[Token(Token = "0x4000D75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static Dictionary<ulong, DownloadRequest> _downloadRequests;

		[Token(Token = "0x4000D76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static bool _initializing;

		[Token(Token = "0x4000D77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		private static bool _initialized;

		[Token(Token = "0x4000D78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static OnInitialized _initializeCallback;

		[Token(Token = "0x4000D79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static Dictionary<string, List<AssetDetails>> _completedDownloads;

		[Token(Token = "0x170001C4")]
		public static bool Initialized
		{
			[Token(Token = "0x60010AB")]
			[Address(RVA = "0x102B5CC", Offset = "0x102B5CC", VA = "0x102B5CC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001C5")]
		public static bool Initializing
		{
			[Token(Token = "0x60010AC")]
			[Address(RVA = "0x102B624", Offset = "0x102B624", VA = "0x102B624")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001C6")]
		public static bool HasAssetFiles
		{
			[Token(Token = "0x60010AD")]
			[Address(RVA = "0x102B67C", Offset = "0x102B67C", VA = "0x102B67C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60010AE")]
		[Address(RVA = "0x102B6EC", Offset = "0x102B6EC", VA = "0x102B6EC")]
		public static void Initialize([Optional] OnInitialized onInitializedCallback)
		{
		}

		[Token(Token = "0x60010AF")]
		[Address(RVA = "0x102B900", Offset = "0x102B900", VA = "0x102B900")]
		public static void DownloadAsset(string assetName, [Optional] OnAssetDownloaded completeCallback)
		{
		}

		[Token(Token = "0x60010B0")]
		[Address(RVA = "0x102BD74", Offset = "0x102BD74", VA = "0x102BD74")]
		public static bool IsAssetInstalled(string assetName)
		{
			return default(bool);
		}

		[Token(Token = "0x60010B1")]
		[Address(RVA = "0x102BEE0", Offset = "0x102BEE0", VA = "0x102BEE0")]
		public static bool IsAssetAvailable(string assetName)
		{
			return default(bool);
		}

		[Token(Token = "0x60010B2")]
		[Address(RVA = "0x102BFD0", Offset = "0x102BFD0", VA = "0x102BFD0")]
		public static string GetAssetPath(string assetName)
		{
			return null;
		}

		[Token(Token = "0x60010B3")]
		[Address(RVA = "0x102C118", Offset = "0x102C118", VA = "0x102C118")]
		public static AssetDetails GetAssetDetails(string assetName)
		{
			return null;
		}

		[Token(Token = "0x60010B4")]
		[Address(RVA = "0x102C258", Offset = "0x102C258", VA = "0x102C258")]
		public static bool IsAssetDownloading(string assetName)
		{
			return default(bool);
		}

		[Token(Token = "0x60010B5")]
		[Address(RVA = "0x102C410", Offset = "0x102C410", VA = "0x102C410")]
		public static bool IsAssetDownloadPending(string assetName)
		{
			return default(bool);
		}

		[Token(Token = "0x60010B6")]
		[Address(RVA = "0x102C5D0", Offset = "0x102C5D0", VA = "0x102C5D0")]
		public static float GetAssetDownloadProgress(string assetName)
		{
			return default(float);
		}

		[Token(Token = "0x60010B7")]
		[Address(RVA = "0x102C74C", Offset = "0x102C74C", VA = "0x102C74C")]
		public static int GetAssetFileListDownloadProgress(IEnumerable<string> assetNames)
		{
			return default(int);
		}

		[Token(Token = "0x60010B8")]
		[Address(RVA = "0x102CC88", Offset = "0x102CC88", VA = "0x102CC88")]
		public static void CancelAllDownloads(bool cancelDownloadsInProgress = true, bool cancelPendingRequests = true)
		{
		}

		[Token(Token = "0x60010B9")]
		[Address(RVA = "0x102D120", Offset = "0x102D120", VA = "0x102D120")]
		public static void CancelAssetDownload(string assetName)
		{
		}

		[Token(Token = "0x60010BA")]
		[Address(RVA = "0x102D3F0", Offset = "0x102D3F0", VA = "0x102D3F0")]
		public static void DeleteAsset(string assetName)
		{
		}

		[Token(Token = "0x60010BB")]
		[Address(RVA = "0x102D5DC", Offset = "0x102D5DC", VA = "0x102D5DC")]
		private static void HandleAssetListRetrieved(Message<AssetDetailsList> message)
		{
		}

		[Token(Token = "0x60010BC")]
		[Address(RVA = "0x102D86C", Offset = "0x102D86C", VA = "0x102D86C")]
		private static void OnDownloadStart(Message<AssetFileDownloadResult> message)
		{
		}

		[Token(Token = "0x60010BD")]
		[Address(RVA = "0x102DA80", Offset = "0x102DA80", VA = "0x102DA80")]
		private static void OnCancelCallback(Message<AssetFileDownloadCancelResult> message)
		{
		}

		[Token(Token = "0x60010BE")]
		[Address(RVA = "0x102DB80", Offset = "0x102DB80", VA = "0x102DB80")]
		private static void OnFileDeleted(Message<AssetFileDeleteResult> message)
		{
		}

		[Token(Token = "0x60010BF")]
		[Address(RVA = "0x102DC5C", Offset = "0x102DC5C", VA = "0x102DC5C")]
		private static void OnStatusUpdate(Message<AssetDetails> message)
		{
		}

		[Token(Token = "0x60010C0")]
		[Address(RVA = "0x102C810", Offset = "0x102C810", VA = "0x102C810")]
		private static int GetAssetFileListDownloadProgressInternal(IEnumerable<string> assetNames)
		{
			return default(int);
		}

		[Token(Token = "0x60010C1")]
		[Address(RVA = "0x102DCF4", Offset = "0x102DCF4", VA = "0x102DCF4")]
		private static void DownloadUpdateCallback(Message<AssetFileDownloadUpdate> message)
		{
		}

		[Token(Token = "0x60010C2")]
		[Address(RVA = "0x102DEF8", Offset = "0x102DEF8", VA = "0x102DEF8")]
		private static void GetStatusForComplete(Message<AssetDetails> message)
		{
		}

		[Token(Token = "0x60010C3")]
		[Address(RVA = "0x102E248", Offset = "0x102E248", VA = "0x102E248")]
		public static string GetAssetLastDownloadStatus(string assetName)
		{
			return null;
		}

		[Token(Token = "0x60010C4")]
		[Address(RVA = "0x102E064", Offset = "0x102E064", VA = "0x102E064")]
		private static void AddToCompletedDownloads(string assetName, AssetDetails assetDetails)
		{
		}

		[Token(Token = "0x60010C5")]
		[Address(RVA = "0x102E390", Offset = "0x102E390", VA = "0x102E390")]
		public static void PrintAssetListToConsole()
		{
		}

		[Token(Token = "0x60010C6")]
		[Address(RVA = "0x102E394", Offset = "0x102E394", VA = "0x102E394")]
		public static void GetLatestAssetFileList()
		{
		}
	}
}
namespace Darkwind.Android
{
	[Token(Token = "0x20002FA")]
	public class AutoLogcat
	{
		[Token(Token = "0x4000D81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private AndroidJavaObject _logcat;

		[Token(Token = "0x170001C7")]
		public bool IsAlive
		{
			[Token(Token = "0x60010D4")]
			[Address(RVA = "0x102EB54", Offset = "0x102EB54", VA = "0x102EB54")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60010D5")]
			[Address(RVA = "0x102EB5C", Offset = "0x102EB5C", VA = "0x102EB5C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60010D6")]
		[Address(RVA = "0x102EB68", Offset = "0x102EB68", VA = "0x102EB68")]
		public void Start(string directory, int numFiles, int fileSizeInKB, bool backupPrev)
		{
		}

		[Token(Token = "0x60010D7")]
		[Address(RVA = "0x102F0D4", Offset = "0x102F0D4", VA = "0x102F0D4")]
		public void Stop()
		{
		}

		[Token(Token = "0x60010D8")]
		[Address(RVA = "0x102F0E4", Offset = "0x102F0E4", VA = "0x102F0E4")]
		public AutoLogcat()
		{
		}
	}
}
namespace TextureStreamingAssetProblem
{
	[Token(Token = "0x20002FB")]
	public static class MeshUtil
	{
		[Token(Token = "0x60010D9")]
		[Address(RVA = "0x102F0EC", Offset = "0x102F0EC", VA = "0x102F0EC")]
		public static int GetUVChannelCount(Mesh m, List<Vector2> dummyList)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20002FC")]
	public enum UVChannel
	{
		[Token(Token = "0x4000D84")]
		UV1,
		[Token(Token = "0x4000D85")]
		UV2,
		[Token(Token = "0x4000D86")]
		UV3
	}
	[Token(Token = "0x20002FD")]
	[Flags]
	public enum UVChannelFlags
	{
		[Token(Token = "0x4000D88")]
		None = 0,
		[Token(Token = "0x4000D89")]
		UV1 = 1,
		[Token(Token = "0x4000D8A")]
		UV2 = 2,
		[Token(Token = "0x4000D8B")]
		UV3 = 4,
		[Token(Token = "0x4000D8C")]
		All = 7
	}
	[Token(Token = "0x20002FE")]
	public static class UVChannelUtil
	{
		[Token(Token = "0x4000D8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly int MAX_SUPPORTED_UV_CHANNELS;

		[Token(Token = "0x60010DA")]
		[Address(RVA = "0x102F178", Offset = "0x102F178", VA = "0x102F178")]
		public static UVChannelFlags UVChannelToFlags(UVChannel channel)
		{
			return default(UVChannelFlags);
		}

		[Token(Token = "0x60010DB")]
		[Address(RVA = "0x102F184", Offset = "0x102F184", VA = "0x102F184")]
		public static UVChannelFlags GetFlagsForChannelCount(int channelCount)
		{
			return default(UVChannelFlags);
		}

		[Token(Token = "0x60010DC")]
		[Address(RVA = "0x102F224", Offset = "0x102F224", VA = "0x102F224")]
		public static int GetChannelCount(UVChannelFlags flags)
		{
			return default(int);
		}
	}
}
namespace Camouflaj
{
	[Token(Token = "0x20002FF")]
	[CreateAssetMenu(fileName = "TextureArrayDefinition", menuName = "Camouflaj/Texture Array Definition")]
	public class TextureArrayDefinition : ScriptableObject
	{
		[Token(Token = "0x2000300")]
		public enum PropertyDeterminationMode
		{
			[Token(Token = "0x4000D8F")]
			MatchInputs,
			[Token(Token = "0x4000D90")]
			Explicit
		}

		[Token(Token = "0x60010DE")]
		[Address(RVA = "0x102F318", Offset = "0x102F318", VA = "0x102F318")]
		public TextureArrayDefinition()
		{
		}
	}
	[Token(Token = "0x2000301")]
	public abstract class RenderDocCaptureCondition : MonoBehaviour
	{
		[Token(Token = "0x60010DF")]
		public abstract bool IsSatisfied();

		[Token(Token = "0x60010E0")]
		[Address(RVA = "0x102F320", Offset = "0x102F320", VA = "0x102F320")]
		protected RenderDocCaptureCondition()
		{
		}
	}
}
namespace Camouflaj.SimpleProfiler
{
	[Token(Token = "0x2000302")]
	public class AggregateStatistics
	{
		[Token(Token = "0x4000D91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int _count;

		[Token(Token = "0x4000D92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float _mean;

		[Token(Token = "0x4000D93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float _standardDeviation;

		[Token(Token = "0x4000D94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float _min;

		[Token(Token = "0x4000D95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float _max;

		[Token(Token = "0x170001C8")]
		public int Count
		{
			[Token(Token = "0x60010E1")]
			[Address(RVA = "0x102F328", Offset = "0x102F328", VA = "0x102F328")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001C9")]
		public float Mean
		{
			[Token(Token = "0x60010E2")]
			[Address(RVA = "0x102F330", Offset = "0x102F330", VA = "0x102F330")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001CA")]
		public float StandardDeviation
		{
			[Token(Token = "0x60010E3")]
			[Address(RVA = "0x102F338", Offset = "0x102F338", VA = "0x102F338")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001CB")]
		public float Min
		{
			[Token(Token = "0x60010E4")]
			[Address(RVA = "0x102F340", Offset = "0x102F340", VA = "0x102F340")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001CC")]
		public float Max
		{
			[Token(Token = "0x60010E5")]
			[Address(RVA = "0x102F348", Offset = "0x102F348", VA = "0x102F348")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x60010E6")]
		[Address(RVA = "0x102F350", Offset = "0x102F350", VA = "0x102F350")]
		public void ComputeFrom(IList<float> measurements)
		{
		}

		[Token(Token = "0x60010E7")]
		[Address(RVA = "0x102F850", Offset = "0x102F850", VA = "0x102F850")]
		public AggregateStatistics()
		{
		}
	}
	[Token(Token = "0x2000303")]
	public class MetricRecorder
	{
		[Token(Token = "0x4000D96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Metric _metric;

		[Token(Token = "0x4000D97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private List<float> _measurements;

		[Token(Token = "0x4000D98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int _framesSinceLastMeasurement;

		[Token(Token = "0x4000D99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private bool _recording;

		[Token(Token = "0x170001CD")]
		public Metric Metric
		{
			[Token(Token = "0x60010E8")]
			[Address(RVA = "0x102F858", Offset = "0x102F858", VA = "0x102F858")]
			get
			{
				return null;
			}
			[Token(Token = "0x60010E9")]
			[Address(RVA = "0x102F860", Offset = "0x102F860", VA = "0x102F860")]
			set
			{
			}
		}

		[Token(Token = "0x170001CE")]
		public List<float> Measurements
		{
			[Token(Token = "0x60010EA")]
			[Address(RVA = "0x102F874", Offset = "0x102F874", VA = "0x102F874")]
			get
			{
				return null;
			}
			[Token(Token = "0x60010EB")]
			[Address(RVA = "0x102F87C", Offset = "0x102F87C", VA = "0x102F87C")]
			set
			{
			}
		}

		[Token(Token = "0x60010EC")]
		[Address(RVA = "0x102F884", Offset = "0x102F884", VA = "0x102F884")]
		public void Begin()
		{
		}

		[Token(Token = "0x60010ED")]
		[Address(RVA = "0x102F8C4", Offset = "0x102F8C4", VA = "0x102F8C4")]
		public void End()
		{
		}

		[Token(Token = "0x60010EE")]
		[Address(RVA = "0x102F8FC", Offset = "0x102F8FC", VA = "0x102F8FC")]
		public void Update()
		{
		}

		[Token(Token = "0x60010EF")]
		[Address(RVA = "0x102F9C8", Offset = "0x102F9C8", VA = "0x102F9C8")]
		private void RecordMeasurement(float measurement)
		{
		}

		[Token(Token = "0x60010F0")]
		[Address(RVA = "0x102FA7C", Offset = "0x102FA7C", VA = "0x102FA7C")]
		public MetricRecorder()
		{
		}
	}
	[Token(Token = "0x2000304")]
	public class DynamicLightCountMetric : Metric
	{
		[Token(Token = "0x170001CF")]
		public override string Name
		{
			[Token(Token = "0x60010F1")]
			[Address(RVA = "0x102FA84", Offset = "0x102FA84", VA = "0x102FA84", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60010F2")]
		[Address(RVA = "0x102FAC4", Offset = "0x102FAC4", VA = "0x102FAC4", Slot = "8")]
		public override float Sample()
		{
			return default(float);
		}

		[Token(Token = "0x60010F3")]
		[Address(RVA = "0x102FACC", Offset = "0x102FACC", VA = "0x102FACC")]
		public DynamicLightCountMetric()
		{
		}
	}
	[Token(Token = "0x2000305")]
	public class FrameTimeMetric : Metric
	{
		[Token(Token = "0x170001D0")]
		public override string Name
		{
			[Token(Token = "0x60010F4")]
			[Address(RVA = "0x102FADC", Offset = "0x102FADC", VA = "0x102FADC", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60010F5")]
		[Address(RVA = "0x102FB1C", Offset = "0x102FB1C", VA = "0x102FB1C", Slot = "8")]
		public override float Sample()
		{
			return default(float);
		}

		[Token(Token = "0x60010F6")]
		[Address(RVA = "0x102FB3C", Offset = "0x102FB3C", VA = "0x102FB3C")]
		public FrameTimeMetric()
		{
		}
	}
	[Token(Token = "0x2000306")]
	public class MainThreadRenderTimeMetric : Metric
	{
		[Token(Token = "0x4000D9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private UnityEngine.Profiling.Recorder _recorder;

		[Token(Token = "0x170001D1")]
		public override string Name
		{
			[Token(Token = "0x60010F7")]
			[Address(RVA = "0x102FB44", Offset = "0x102FB44", VA = "0x102FB44", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60010F8")]
		[Address(RVA = "0x102FB84", Offset = "0x102FB84", VA = "0x102FB84", Slot = "6")]
		public override void Enable()
		{
		}

		[Token(Token = "0x60010F9")]
		[Address(RVA = "0x102FC1C", Offset = "0x102FC1C", VA = "0x102FC1C", Slot = "7")]
		public override void Disable()
		{
		}

		[Token(Token = "0x60010FA")]
		[Address(RVA = "0x102FC54", Offset = "0x102FC54", VA = "0x102FC54", Slot = "8")]
		public override float Sample()
		{
			return default(float);
		}

		[Token(Token = "0x60010FB")]
		[Address(RVA = "0x102FC84", Offset = "0x102FC84", VA = "0x102FC84")]
		public MainThreadRenderTimeMetric()
		{
		}
	}
	[Token(Token = "0x2000307")]
	public abstract class Metric
	{
		[Token(Token = "0x4000D9B")]
		public const int MIN_UPDATE_PERIOD = 1;

		[Token(Token = "0x170001D2")]
		public abstract string Name
		{
			[Token(Token = "0x60010FC")]
			get;
		}

		[Token(Token = "0x170001D3")]
		public virtual int UpdatePeriod
		{
			[Token(Token = "0x60010FD")]
			[Address(RVA = "0x102FC8C", Offset = "0x102FC8C", VA = "0x102FC8C", Slot = "5")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60010FE")]
		[Address(RVA = "0x102FC18", Offset = "0x102FC18", VA = "0x102FC18", Slot = "6")]
		public virtual void Enable()
		{
		}

		[Token(Token = "0x60010FF")]
		[Address(RVA = "0x102FC50", Offset = "0x102FC50", VA = "0x102FC50", Slot = "7")]
		public virtual void Disable()
		{
		}

		[Token(Token = "0x6001100")]
		public abstract float Sample();

		[Token(Token = "0x6001101")]
		[Address(RVA = "0x102FAD4", Offset = "0x102FAD4", VA = "0x102FAD4")]
		protected Metric()
		{
		}
	}
	[Token(Token = "0x2000308")]
	public class OVRGPUTimeMetric : Metric
	{
		[Token(Token = "0x170001D4")]
		public override string Name
		{
			[Token(Token = "0x6001102")]
			[Address(RVA = "0x102FC94", Offset = "0x102FC94", VA = "0x102FC94", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001D5")]
		public override int UpdatePeriod
		{
			[Token(Token = "0x6001103")]
			[Address(RVA = "0x102FCD4", Offset = "0x102FCD4", VA = "0x102FCD4", Slot = "5")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001104")]
		[Address(RVA = "0x102FCDC", Offset = "0x102FCDC", VA = "0x102FCDC", Slot = "8")]
		public override float Sample()
		{
			return default(float);
		}

		[Token(Token = "0x6001105")]
		[Address(RVA = "0x102FD68", Offset = "0x102FD68", VA = "0x102FD68")]
		public OVRGPUTimeMetric()
		{
		}
	}
	[Token(Token = "0x2000309")]
	public class Profiler : MonoBehaviour
	{
		[Token(Token = "0x200030A")]
		private class MetricData
		{
			[Token(Token = "0x4000DA3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private MetricRecorder _recorder;

			[Token(Token = "0x4000DA4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private List<float> _measurements;

			[Token(Token = "0x170001D9")]
			public MetricRecorder Recorder
			{
				[Token(Token = "0x6001115")]
				[Address(RVA = "0x1030824", Offset = "0x1030824", VA = "0x1030824")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001DA")]
			public List<float> Measurements
			{
				[Token(Token = "0x6001116")]
				[Address(RVA = "0x103082C", Offset = "0x103082C", VA = "0x103082C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001DB")]
			public ReadOnlyCollection<float> ReadonlyMeasurements
			{
				[Token(Token = "0x6001117")]
				[Address(RVA = "0x10303D4", Offset = "0x10303D4", VA = "0x10303D4")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001118")]
			[Address(RVA = "0x1030190", Offset = "0x1030190", VA = "0x1030190")]
			public MetricData(Metric metric)
			{
			}

			[Token(Token = "0x6001119")]
			[Address(RVA = "0x10305A8", Offset = "0x10305A8", VA = "0x10305A8")]
			public void EnsureMeasurementsCapacity(int capacity)
			{
			}
		}

		[Token(Token = "0x4000D9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int _framesToMeasure;

		[Token(Token = "0x4000D9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private bool _isMeasuring;

		[Token(Token = "0x4000D9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<Metric> _metrics;

		[Token(Token = "0x4000DA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Dictionary<Metric, MetricData> _metricTable;

		[Token(Token = "0x4000DA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int _remainingBufferFrames;

		[Token(Token = "0x4000DA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private int _remainingFramesToMeasure;

		[Token(Token = "0x170001D6")]
		public int FramesToMeasure
		{
			[Token(Token = "0x6001106")]
			[Address(RVA = "0x102FD70", Offset = "0x102FD70", VA = "0x102FD70")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001107")]
			[Address(RVA = "0x102FD78", Offset = "0x102FD78", VA = "0x102FD78")]
			set
			{
			}
		}

		[Token(Token = "0x170001D7")]
		public bool IsMeasuring
		{
			[Token(Token = "0x6001108")]
			[Address(RVA = "0x102FD88", Offset = "0x102FD88", VA = "0x102FD88")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001D8")]
		public ReadOnlyCollection<Metric> Metrics
		{
			[Token(Token = "0x600110B")]
			[Address(RVA = "0x102FEC8", Offset = "0x102FEC8", VA = "0x102FEC8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1400000D")]
		public event Action OnFinishedMeasuring
		{
			[Token(Token = "0x6001109")]
			[Address(RVA = "0x102FD90", Offset = "0x102FD90", VA = "0x102FD90")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600110A")]
			[Address(RVA = "0x102FE2C", Offset = "0x102FE2C", VA = "0x102FE2C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x600110C")]
		[Address(RVA = "0x102FF18", Offset = "0x102FF18", VA = "0x102FF18")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600110D")]
		[Address(RVA = "0x102FF30", Offset = "0x102FF30", VA = "0x102FF30")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600110E")]
		[Address(RVA = "0x1030038", Offset = "0x1030038", VA = "0x1030038")]
		public bool AddMetric(Metric metric)
		{
			return default(bool);
		}

		[Token(Token = "0x600110F")]
		[Address(RVA = "0x1030294", Offset = "0x1030294", VA = "0x1030294")]
		public bool RemoveMetric(Metric metric)
		{
			return default(bool);
		}

		[Token(Token = "0x6001110")]
		[Address(RVA = "0x103035C", Offset = "0x103035C", VA = "0x103035C")]
		public ReadOnlyCollection<float> GetMeasurementsForMetric(Metric metric)
		{
			return null;
		}

		[Token(Token = "0x6001111")]
		[Address(RVA = "0x1030424", Offset = "0x1030424", VA = "0x1030424")]
		public void StartMeasuring()
		{
		}

		[Token(Token = "0x6001112")]
		[Address(RVA = "0x102FF34", Offset = "0x102FF34", VA = "0x102FF34")]
		public void StopMeasuring()
		{
		}

		[Token(Token = "0x6001113")]
		[Address(RVA = "0x1030638", Offset = "0x1030638", VA = "0x1030638")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001114")]
		[Address(RVA = "0x1030744", Offset = "0x1030744", VA = "0x1030744")]
		public Profiler()
		{
		}
	}
	[Token(Token = "0x200030B")]
	public class ProfilerMetricStatsView : MonoBehaviour
	{
		[Token(Token = "0x4000DA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private ProfilerMetricStatsViewRow _rowPrefab;

		[Token(Token = "0x4000DA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private VerticalLayoutGroup _verticalLayoutGroup;

		[Token(Token = "0x4000DA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float _rowHeight;

		[Token(Token = "0x4000DA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<ProfilerMetricStatsViewRow> _rows;

		[Token(Token = "0x4000DA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private RectTransform _rectTransform;

		[Token(Token = "0x600111A")]
		[Address(RVA = "0x1030834", Offset = "0x1030834", VA = "0x1030834")]
		private void Awake()
		{
		}

		[Token(Token = "0x600111B")]
		[Address(RVA = "0x103088C", Offset = "0x103088C", VA = "0x103088C")]
		public void PopulateFrom(Profiler profiler)
		{
		}

		[Token(Token = "0x600111C")]
		[Address(RVA = "0x10309F4", Offset = "0x10309F4", VA = "0x10309F4")]
		private void SetRowCount(int count)
		{
		}

		[Token(Token = "0x600111D")]
		[Address(RVA = "0x1030DD8", Offset = "0x1030DD8", VA = "0x1030DD8")]
		public ProfilerMetricStatsView()
		{
		}
	}
	[Token(Token = "0x200030C")]
	public class ProfilerMetricStatsViewController : MonoBehaviour
	{
		[Token(Token = "0x4000DAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private ProfilerMetricStatsView _view;

		[Token(Token = "0x170001DC")]
		public ProfilerMetricStatsView View
		{
			[Token(Token = "0x600111E")]
			[Address(RVA = "0x1030E68", Offset = "0x1030E68", VA = "0x1030E68")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600111F")]
		[Address(RVA = "0x1030E70", Offset = "0x1030E70", VA = "0x1030E70")]
		public void PositionInFrontOfCamera(Camera camera, float distance)
		{
		}

		[Token(Token = "0x6001120")]
		[Address(RVA = "0x1030FB4", Offset = "0x1030FB4", VA = "0x1030FB4")]
		public ProfilerMetricStatsViewController()
		{
		}
	}
	[Token(Token = "0x200030D")]
	public class ProfilerMetricStatsViewRow : MonoBehaviour
	{
		[Token(Token = "0x4000DAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Text _metricLabel;

		[Token(Token = "0x4000DAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Text _meanLabel;

		[Token(Token = "0x4000DAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Text _standardDeviationLabel;

		[Token(Token = "0x4000DAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Text _minLabel;

		[Token(Token = "0x4000DAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Text _maxLabel;

		[Token(Token = "0x4000DB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Text _countLabel;

		[Token(Token = "0x6001121")]
		[Address(RVA = "0x1030C34", Offset = "0x1030C34", VA = "0x1030C34")]
		public void PopulateFrom(Metric metric, AggregateStatistics stats)
		{
		}

		[Token(Token = "0x6001122")]
		[Address(RVA = "0x1030FBC", Offset = "0x1030FBC", VA = "0x1030FBC")]
		public ProfilerMetricStatsViewRow()
		{
		}
	}
}
namespace Camouflaj.Wind
{
	[Token(Token = "0x200030E")]
	public class WindProperties
	{
		[Token(Token = "0x4000DB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Vector3 _direction;

		[Token(Token = "0x4000DB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float _strength;

		[Token(Token = "0x4000DB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float _temporalFrequency;

		[Token(Token = "0x170001DD")]
		public Vector3 Direction
		{
			[Token(Token = "0x6001123")]
			[Address(RVA = "0x1030FC4", Offset = "0x1030FC4", VA = "0x1030FC4")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001124")]
			[Address(RVA = "0x1030FD0", Offset = "0x1030FD0", VA = "0x1030FD0")]
			set
			{
			}
		}

		[Token(Token = "0x170001DE")]
		public float Strength
		{
			[Token(Token = "0x6001125")]
			[Address(RVA = "0x1030FDC", Offset = "0x1030FDC", VA = "0x1030FDC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001126")]
			[Address(RVA = "0x1030FE4", Offset = "0x1030FE4", VA = "0x1030FE4")]
			set
			{
			}
		}

		[Token(Token = "0x170001DF")]
		public float TemporalFrequency
		{
			[Token(Token = "0x6001127")]
			[Address(RVA = "0x1031000", Offset = "0x1031000", VA = "0x1031000")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001128")]
			[Address(RVA = "0x1031008", Offset = "0x1031008", VA = "0x1031008")]
			set
			{
			}
		}

		[Token(Token = "0x6001129")]
		[Address(RVA = "0x1031014", Offset = "0x1031014", VA = "0x1031014")]
		public WindProperties()
		{
		}
	}
	[Token(Token = "0x200030F")]
	public class WindReceiver : MonoBehaviour
	{
		[Token(Token = "0x4000DB4")]
		private const string WIND_ON_KEYWORD = "_WIND_ON";

		[Token(Token = "0x4000DB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Renderer _renderer;

		[Token(Token = "0x4000DB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private List<int> _materialIndices;

		[Token(Token = "0x4000DB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Transform _windOrigin;

		[Token(Token = "0x4000DB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private MaterialPropertyBlock _propertyBlock;

		[Token(Token = "0x4000DB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Material[] _materials;

		[Token(Token = "0x4000DBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int WindDirectionWorldSpacePropertyID;

		[Token(Token = "0x4000DBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static readonly int WindOriginWorldSpacePropertyID;

		[Token(Token = "0x4000DBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly int WindStrengthPropertyID;

		[Token(Token = "0x4000DBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static readonly int WindTemporalFrequencyPropertyID;

		[Token(Token = "0x600112A")]
		[Address(RVA = "0x1031080", Offset = "0x1031080", VA = "0x1031080")]
		private void Awake()
		{
		}

		[Token(Token = "0x600112B")]
		[Address(RVA = "0x10310E8", Offset = "0x10310E8", VA = "0x10310E8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600112C")]
		[Address(RVA = "0x103124C", Offset = "0x103124C", VA = "0x103124C")]
		public void EnableWind()
		{
		}

		[Token(Token = "0x600112D")]
		[Address(RVA = "0x103148C", Offset = "0x103148C", VA = "0x103148C")]
		public void DisableWind()
		{
		}

		[Token(Token = "0x600112E")]
		[Address(RVA = "0x1031558", Offset = "0x1031558", VA = "0x1031558")]
		public void UpdateWind(WindProperties windProperties)
		{
		}

		[Token(Token = "0x600112F")]
		[Address(RVA = "0x1031328", Offset = "0x1031328", VA = "0x1031328")]
		private void InitMaterialArray()
		{
		}

		[Token(Token = "0x6001130")]
		[Address(RVA = "0x10316D8", Offset = "0x10316D8", VA = "0x10316D8")]
		public WindReceiver()
		{
		}
	}
	[Token(Token = "0x2000310")]
	public class WindSource : MonoBehaviour
	{
		[Token(Token = "0x4000DBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0f, 1f)]
		[SerializeField]
		private float _strength;

		[Token(Token = "0x4000DBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Frequency in hertz")]
		[SerializeField]
		private float _temporalFrequency;

		[Token(Token = "0x4000DC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private List<WindReceiver> _receivers;

		[Token(Token = "0x4000DC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private WindProperties _properties;

		[Token(Token = "0x170001E0")]
		public float Strength
		{
			[Token(Token = "0x6001132")]
			[Address(RVA = "0x103185C", Offset = "0x103185C", VA = "0x103185C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001133")]
			[Address(RVA = "0x1031864", Offset = "0x1031864", VA = "0x1031864")]
			set
			{
			}
		}

		[Token(Token = "0x170001E1")]
		public float TemporalFrequency
		{
			[Token(Token = "0x6001134")]
			[Address(RVA = "0x1031880", Offset = "0x1031880", VA = "0x1031880")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001135")]
			[Address(RVA = "0x1031888", Offset = "0x1031888", VA = "0x1031888")]
			set
			{
			}
		}

		[Token(Token = "0x6001136")]
		[Address(RVA = "0x1031894", Offset = "0x1031894", VA = "0x1031894")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001137")]
		[Address(RVA = "0x1031A30", Offset = "0x1031A30", VA = "0x1031A30")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001138")]
		[Address(RVA = "0x1031B08", Offset = "0x1031B08", VA = "0x1031B08")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001139")]
		[Address(RVA = "0x1031A34", Offset = "0x1031A34", VA = "0x1031A34")]
		private void EnableWindOnReceivers()
		{
		}

		[Token(Token = "0x600113A")]
		[Address(RVA = "0x1031B0C", Offset = "0x1031B0C", VA = "0x1031B0C")]
		private void DisableWindOnReceivers()
		{
		}

		[Token(Token = "0x600113B")]
		[Address(RVA = "0x1031BE0", Offset = "0x1031BE0", VA = "0x1031BE0")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600113C")]
		[Address(RVA = "0x1031C40", Offset = "0x1031C40", VA = "0x1031C40")]
		private void UpdateProperties()
		{
		}

		[Token(Token = "0x600113D")]
		[Address(RVA = "0x1031CB0", Offset = "0x1031CB0", VA = "0x1031CB0")]
		private void ApplyWindToReceivers()
		{
		}

		[Token(Token = "0x600113E")]
		[Address(RVA = "0x1031D88", Offset = "0x1031D88", VA = "0x1031D88")]
		public WindSource()
		{
		}
	}
}
namespace Camouflaj.WaterSystem
{
	[Serializable]
	[Token(Token = "0x2000311")]
	public class GerstnerWave
	{
		[Token(Token = "0x4000DC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private float _amplitude;

		[Token(Token = "0x4000DC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		private float _wavelength;

		[Token(Token = "0x4000DC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float _speed;

		[Token(Token = "0x4000DC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Range(0f, 1f)]
		[SerializeField]
		private float _steepness;

		[Token(Token = "0x4000DC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[Range(0f, 360f)]
		private float _angle;

		[Token(Token = "0x170001E2")]
		public float Amplitude
		{
			[Token(Token = "0x600113F")]
			[Address(RVA = "0x1031E10", Offset = "0x1031E10", VA = "0x1031E10")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001E3")]
		public float Wavelength
		{
			[Token(Token = "0x6001140")]
			[Address(RVA = "0x1031E18", Offset = "0x1031E18", VA = "0x1031E18")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001E4")]
		public float Speed
		{
			[Token(Token = "0x6001141")]
			[Address(RVA = "0x1031E20", Offset = "0x1031E20", VA = "0x1031E20")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001E5")]
		public float Steepness
		{
			[Token(Token = "0x6001142")]
			[Address(RVA = "0x1031E28", Offset = "0x1031E28", VA = "0x1031E28")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001E6")]
		public float Angle
		{
			[Token(Token = "0x6001143")]
			[Address(RVA = "0x1031E30", Offset = "0x1031E30", VA = "0x1031E30")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001E7")]
		public Vector3 Direction
		{
			[Token(Token = "0x6001144")]
			[Address(RVA = "0x1031E38", Offset = "0x1031E38", VA = "0x1031E38")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6001145")]
		[Address(RVA = "0x1031E68", Offset = "0x1031E68", VA = "0x1031E68")]
		public GerstnerWave()
		{
		}
	}
	[Token(Token = "0x2000312")]
	public class SphericalHarmonicsUtil
	{
		[Token(Token = "0x4000DC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int[] SHA_PROPERTY_IDS;

		[Token(Token = "0x4000DC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly int[] SHB_PROPERTY_IDS;

		[Token(Token = "0x4000DC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly int SHC_PROPERTY_ID;

		[Token(Token = "0x6001146")]
		[Address(RVA = "0x1031E80", Offset = "0x1031E80", VA = "0x1031E80")]
		public static void SetSHCoefficients(MaterialPropertyBlock properties, ref SphericalHarmonicsL2 sh)
		{
		}

		[Token(Token = "0x6001147")]
		[Address(RVA = "0x10320EC", Offset = "0x10320EC", VA = "0x10320EC")]
		public SphericalHarmonicsUtil()
		{
		}
	}
	[Token(Token = "0x2000313")]
	[ExecuteAlways]
	public class Water : MonoBehaviour
	{
		[Token(Token = "0x2000314")]
		public enum WaveMode
		{
			[Token(Token = "0x4000DE2")]
			Center,
			[Token(Token = "0x4000DE3")]
			LowerBound,
			[Token(Token = "0x4000DE4")]
			UpperBound
		}

		[Token(Token = "0x2000315")]
		public enum SHSource
		{
			[Token(Token = "0x4000DE6")]
			Serialized,
			[Token(Token = "0x4000DE7")]
			LightProbes
		}

		[Token(Token = "0x4000DCA")]
		public const int MAX_WAVES = 8;

		[Token(Token = "0x4000DCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int GERSTNER_AMPLITUDE_ID;

		[Token(Token = "0x4000DCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static readonly int GERSTNER_WAVELENGTH_ID;

		[Token(Token = "0x4000DCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly int GERSTNER_SPEED_ID;

		[Token(Token = "0x4000DCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static readonly int GERTSNER_STEEPNESS_ID;

		[Token(Token = "0x4000DCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly int GERSTNER_DIRECTION_ID;

		[Token(Token = "0x4000DD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private static readonly int GERSTNER_WAVE_COUNT_ID;

		[Token(Token = "0x4000DD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static readonly int GERSTNER_AMPLITUDE_ADDITION_FACTOR_ID;

		[Token(Token = "0x4000DD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private static readonly int BAKED_LIGHT_INTENSITY_ID;

		[Token(Token = "0x4000DD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private List<Renderer> _renderers;

		[Token(Token = "0x4000DD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private List<GerstnerWave> _waves;

		[Token(Token = "0x4000DD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private WaveMode _currentWaveMode;

		[Token(Token = "0x4000DD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		[Range(0f, 10f)]
		private float _bakedLightIntensity;

		[Token(Token = "0x4000DD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private bool _overrideSH;

		[Token(Token = "0x4000DD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private SHSource _currentSHSource;

		[Token(Token = "0x4000DD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Transform _lightProbeSamplePoint;

		[Token(Token = "0x4000DDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private SphericalHarmonicsL2 _sh;

		[Token(Token = "0x4000DDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private MaterialPropertyBlock _propertyBlock;

		[Token(Token = "0x4000DDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private float[] _gerstnerAmplitude;

		[Token(Token = "0x4000DDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private float[] _gerstnerWavelength;

		[Token(Token = "0x4000DDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private float[] _gerstnerSpeed;

		[Token(Token = "0x4000DDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private float[] _gerstnerSteepness;

		[Token(Token = "0x4000DE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Vector4[] _gerstnerDirection;

		[Token(Token = "0x170001E8")]
		public WaveMode CurrentWaveMode
		{
			[Token(Token = "0x6001149")]
			[Address(RVA = "0x10322F8", Offset = "0x10322F8", VA = "0x10322F8")]
			get
			{
				return default(WaveMode);
			}
			[Token(Token = "0x600114A")]
			[Address(RVA = "0x1032300", Offset = "0x1032300", VA = "0x1032300")]
			set
			{
			}
		}

		[Token(Token = "0x170001E9")]
		public float BakedLightIntensity
		{
			[Token(Token = "0x600114B")]
			[Address(RVA = "0x1032308", Offset = "0x1032308", VA = "0x1032308")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600114C")]
			[Address(RVA = "0x1032310", Offset = "0x1032310", VA = "0x1032310")]
			set
			{
			}
		}

		[Token(Token = "0x170001EA")]
		public bool OverrideSH
		{
			[Token(Token = "0x600114D")]
			[Address(RVA = "0x1032318", Offset = "0x1032318", VA = "0x1032318")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600114E")]
			[Address(RVA = "0x1032320", Offset = "0x1032320", VA = "0x1032320")]
			set
			{
			}
		}

		[Token(Token = "0x170001EB")]
		public SHSource CurrentSHSource
		{
			[Token(Token = "0x600114F")]
			[Address(RVA = "0x103232C", Offset = "0x103232C", VA = "0x103232C")]
			get
			{
				return default(SHSource);
			}
			[Token(Token = "0x6001150")]
			[Address(RVA = "0x1032334", Offset = "0x1032334", VA = "0x1032334")]
			set
			{
			}
		}

		[Token(Token = "0x170001EC")]
		public Transform LightProbeSamplePoint
		{
			[Token(Token = "0x6001151")]
			[Address(RVA = "0x103233C", Offset = "0x103233C", VA = "0x103233C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001152")]
			[Address(RVA = "0x1032344", Offset = "0x1032344", VA = "0x1032344")]
			set
			{
			}
		}

		[Token(Token = "0x170001ED")]
		public SphericalHarmonicsL2 SH
		{
			[Token(Token = "0x6001153")]
			[Address(RVA = "0x103234C", Offset = "0x103234C", VA = "0x103234C")]
			get
			{
				return default(SphericalHarmonicsL2);
			}
			[Token(Token = "0x6001154")]
			[Address(RVA = "0x103235C", Offset = "0x103235C", VA = "0x103235C")]
			set
			{
			}
		}

		[Token(Token = "0x170001EE")]
		private int EffectiveWaveCount
		{
			[Token(Token = "0x6001155")]
			[Address(RVA = "0x1032374", Offset = "0x1032374", VA = "0x1032374")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001156")]
		[Address(RVA = "0x10323C8", Offset = "0x10323C8", VA = "0x10323C8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001157")]
		[Address(RVA = "0x10324EC", Offset = "0x10324EC", VA = "0x10324EC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001158")]
		[Address(RVA = "0x103263C", Offset = "0x103263C", VA = "0x103263C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001159")]
		[Address(RVA = "0x1032654", Offset = "0x1032654", VA = "0x1032654")]
		private void UpdateWaveArrays()
		{
		}

		[Token(Token = "0x600115A")]
		[Address(RVA = "0x10327CC", Offset = "0x10327CC", VA = "0x10327CC")]
		private void ApplyShaderProperties()
		{
		}

		[Token(Token = "0x600115B")]
		[Address(RVA = "0x1032A64", Offset = "0x1032A64", VA = "0x1032A64")]
		private float GetGerstnerAmplitudeAdditionFactor()
		{
			return default(float);
		}

		[Token(Token = "0x600115C")]
		[Address(RVA = "0x1032AF8", Offset = "0x1032AF8", VA = "0x1032AF8")]
		[ContextMenu("Copy Ambient Probe Into SH")]
		private void CopyAmbientProbeIntoSH()
		{
		}

		[Token(Token = "0x600115D")]
		[Address(RVA = "0x1032B3C", Offset = "0x1032B3C", VA = "0x1032B3C")]
		[ContextMenu("Copy Light Probe SH At Sample Point Into SH")]
		private void CopyLightProbeSHAtSamplePointIntoSH()
		{
		}

		[Token(Token = "0x600115E")]
		[Address(RVA = "0x1032B6C", Offset = "0x1032B6C", VA = "0x1032B6C")]
		public Water()
		{
		}
	}
}
namespace Camouflaj.ShaderPrewarmer
{
	[Token(Token = "0x2000316")]
	[CreateAssetMenu(fileName = "ShaderPrewarmData.asset", menuName = "Shader Prewarm Data")]
	public class ShaderPrewarmData : ScriptableObject
	{
		[Token(Token = "0x4000DE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AssetReferences(typeof(ShaderVariantCollection))]
		public string[] shaderVariantCollections;

		[Token(Token = "0x6001160")]
		[Address(RVA = "0x1032E08", Offset = "0x1032E08", VA = "0x1032E08")]
		public ShaderPrewarmData()
		{
		}
	}
	[Token(Token = "0x2000317")]
	public class ShaderPrewarmer
	{
		[Token(Token = "0x4000DE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private ShaderPrewarmData _data;

		[Token(Token = "0x4000DEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private AssetManager _assetManager;

		[Token(Token = "0x4000DEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Action<bool> _onCompleteCallback;

		[Token(Token = "0x4000DEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Action<IAssetHandle<ShaderVariantCollection>, object> _onVariantLoaded;

		[Token(Token = "0x4000DED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int _count;

		[Token(Token = "0x4000DEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private bool _success;

		[Token(Token = "0x4000DEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<IAssetHandle<ShaderVariantCollection>> _loadedHandles;

		[Token(Token = "0x6001161")]
		[Address(RVA = "0x1032E10", Offset = "0x1032E10", VA = "0x1032E10")]
		public void Setup(AssetManager assetManager)
		{
		}

		[Token(Token = "0x6001162")]
		[Address(RVA = "0x1032EC0", Offset = "0x1032EC0", VA = "0x1032EC0")]
		public void Teardown()
		{
		}

		[Token(Token = "0x6001163")]
		[Address(RVA = "0x1033090", Offset = "0x1033090", VA = "0x1033090")]
		public void Prewarm(ShaderPrewarmData data, Action<bool> onCompleteCallback)
		{
		}

		[Token(Token = "0x6001164")]
		[Address(RVA = "0x1033214", Offset = "0x1033214", VA = "0x1033214")]
		private void OnShaderVariantCollectionLoaded(IAssetHandle<ShaderVariantCollection> handle, object param)
		{
		}

		[Token(Token = "0x6001165")]
		[Address(RVA = "0x103354C", Offset = "0x103354C", VA = "0x103354C")]
		public ShaderPrewarmer()
		{
		}
	}
}
namespace Camouflaj.Utilities
{
	[Token(Token = "0x2000318")]
	public class ColumnMeshGenerator : MonoBehaviour
	{
		[Token(Token = "0x2000319")]
		private class ColumnMesh
		{
			[Token(Token = "0x4000DF5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private Mesh _mesh;

			[Token(Token = "0x4000DF6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private int _segmentCount;

			[Token(Token = "0x4000DF7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			private float _radius;

			[Token(Token = "0x4000DF8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int _verticalOffset;

			[Token(Token = "0x170001F0")]
			public float Radius
			{
				[Token(Token = "0x6001169")]
				[Address(RVA = "0x1033684", Offset = "0x1033684", VA = "0x1033684")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170001F1")]
			public Mesh Mesh
			{
				[Token(Token = "0x600116A")]
				[Address(RVA = "0x103368C", Offset = "0x103368C", VA = "0x103368C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600116B")]
			[Address(RVA = "0x1033638", Offset = "0x1033638", VA = "0x1033638")]
			public ColumnMesh(int segmentCount, float radius, int verticalOffset = 0)
			{
			}

			[Token(Token = "0x600116C")]
			[Address(RVA = "0x10338B0", Offset = "0x10338B0", VA = "0x10338B0")]
			private float GetRadians(int vertexId)
			{
				return default(float);
			}

			[Token(Token = "0x600116D")]
			[Address(RVA = "0x10338E0", Offset = "0x10338E0", VA = "0x10338E0")]
			private void GetVertexPositions(Vector3[] verts, float radius)
			{
			}

			[Token(Token = "0x600116E")]
			[Address(RVA = "0x10339E4", Offset = "0x10339E4", VA = "0x10339E4")]
			private void GetVertexUVs(Vector2[] uvs)
			{
			}

			[Token(Token = "0x600116F")]
			[Address(RVA = "0x1033694", Offset = "0x1033694", VA = "0x1033694")]
			private void MakeMesh()
			{
			}
		}

		[Token(Token = "0x4000DF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float _radius;

		[Token(Token = "0x4000DF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private int _segments;

		[Token(Token = "0x4000DF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private bool _overrideTargetMesh;

		[Token(Token = "0x4000DF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private MeshFilter _targetMeshFilter;

		[Token(Token = "0x4000DF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private ColumnMesh _columnMesh;

		[Token(Token = "0x170001EF")]
		public Mesh Mesh
		{
			[Token(Token = "0x6001166")]
			[Address(RVA = "0x103355C", Offset = "0x103355C", VA = "0x103355C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001167")]
		[Address(RVA = "0x1033578", Offset = "0x1033578", VA = "0x1033578")]
		public void Start()
		{
		}

		[Token(Token = "0x6001168")]
		[Address(RVA = "0x103367C", Offset = "0x103367C", VA = "0x103367C")]
		public ColumnMeshGenerator()
		{
		}
	}
}
namespace Camouflaj.UI.PSVR
{
	[Serializable]
	[Token(Token = "0x200031A")]
	public struct EffectParameters
	{
		[Token(Token = "0x4000DF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public MeshRenderer MeshRenderer;

		[Token(Token = "0x4000DFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float MinDist;

		[Token(Token = "0x4000DFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float MaxDist;

		[Token(Token = "0x4000DFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AnimationCurve Curve;

		[Token(Token = "0x6001170")]
		[Address(RVA = "0x1033ABC", Offset = "0x1033ABC", VA = "0x1033ABC")]
		public float EffectStrength(float drift)
		{
			return default(float);
		}
	}
	[Token(Token = "0x200031B")]
	public class CircleGuardian : MonoBehaviour
	{
		[Token(Token = "0x4000DFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private bool _enabled;

		[Token(Token = "0x4000DFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Transform _playerTransform;

		[Token(Token = "0x4000DFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Transform _playAreaCenter;

		[Token(Token = "0x4000E00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private EffectParameters _lightShaft;

		[Token(Token = "0x4000E01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private EffectParameters _gridWall;

		[Token(Token = "0x4000E02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 _playerPos;

		[Token(Token = "0x4000E03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector3 _driftXZ;

		[Token(Token = "0x4000E04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Transform _cachedTransform;

		[Token(Token = "0x4000E05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private MaterialPropertyBlock _lightBlock;

		[Token(Token = "0x4000E06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private MaterialPropertyBlock _gridBlock;

		[Token(Token = "0x4000E07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int _RawEffectStrength;

		[Token(Token = "0x4000E08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool _isPassedThreshold;

		[Token(Token = "0x4000E09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
		private bool _crossedThresholdThisFrame;

		[Token(Token = "0x170001F2")]
		public bool IsPassedThreshold
		{
			[Token(Token = "0x6001171")]
			[Address(RVA = "0x1033B88", Offset = "0x1033B88", VA = "0x1033B88")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001172")]
			[Address(RVA = "0x1033B90", Offset = "0x1033B90", VA = "0x1033B90")]
			private set
			{
			}
		}

		[Token(Token = "0x170001F3")]
		public bool CrossedThresholdThisFrame
		{
			[Token(Token = "0x6001173")]
			[Address(RVA = "0x1033BB8", Offset = "0x1033BB8", VA = "0x1033BB8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001174")]
		[Address(RVA = "0x1033BC0", Offset = "0x1033BC0", VA = "0x1033BC0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001175")]
		[Address(RVA = "0x1033BF8", Offset = "0x1033BF8", VA = "0x1033BF8")]
		private void Start()
		{
		}

		[Token(Token = "0x6001176")]
		[Address(RVA = "0x1033C30", Offset = "0x1033C30", VA = "0x1033C30")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001177")]
		[Address(RVA = "0x1033C34", Offset = "0x1033C34", VA = "0x1033C34")]
		private void Update()
		{
		}

		[Token(Token = "0x6001178")]
		[Address(RVA = "0x1033C38", Offset = "0x1033C38", VA = "0x1033C38")]
		private float InverseLerpUnclamped(float a, float b, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001179")]
		[Address(RVA = "0x1033C58", Offset = "0x1033C58", VA = "0x1033C58")]
		private float PlayerDrift()
		{
			return default(float);
		}

		[Token(Token = "0x600117A")]
		[Address(RVA = "0x1033D48", Offset = "0x1033D48", VA = "0x1033D48")]
		public CircleGuardian()
		{
		}
	}
}
namespace Camouflaj.Patterns
{
	[Token(Token = "0x200031C")]
	public class Singleton<T> where T : class, new()
	{
		[Token(Token = "0x4000E0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static T _Instance;

		[Token(Token = "0x4000E0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static object _Lock;

		[Token(Token = "0x170001F4")]
		public static T Instance
		{
			[Token(Token = "0x600117C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600117D")]
		public virtual void Startup()
		{
		}

		[Token(Token = "0x600117E")]
		public virtual void Shutdown()
		{
		}

		[Token(Token = "0x600117F")]
		public Singleton()
		{
		}
	}
}
namespace Camouflaj.BuildInfo
{
	[Token(Token = "0x200031D")]
	public static class BuildInfoConstants
	{
		[Token(Token = "0x4000E0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly string WRITE_ON_PLAYMODE_KEY;

		[Token(Token = "0x4000E0D")]
		public const string DISPLAY_TEMPORARY_WARNINGS_KEY = "Camouflaj.BuildInfo.DisplayTemporaryWarnings";

		[Token(Token = "0x4000E0E")]
		public const string BUILD_INFO_FILE_NAME = "BuildInfoSettings.asset";

		[Token(Token = "0x4000E0F")]
		public const string BUILD_INFO_SETTINGS_PATH = "./ProjectSettings/BuildInfoSettings.asset";

		[Token(Token = "0x4000E10")]
		public const string BUILD_INFO_NULL_TEXT = "Build: No Info Found";
	}
	[Serializable]
	[Token(Token = "0x200031E")]
	public class BuildInfoData
	{
		[Token(Token = "0x4000E11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		protected long _buildDateTicks;

		[Token(Token = "0x4000E12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected DateTime _buildDateUTC;

		[Token(Token = "0x4000E13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		protected string _buildMachine;

		[Token(Token = "0x4000E14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		protected bool _externallyManagedBuild;

		[Token(Token = "0x4000E15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		protected string _changelist;

		[Token(Token = "0x4000E16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		protected string _buildName;

		[NonSerialized]
		[Token(Token = "0x4000E17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected string _buildInfoText;

		[Token(Token = "0x170001F5")]
		public DateTime BuildDateUTC
		{
			[Token(Token = "0x6001182")]
			[Address(RVA = "0x1033E44", Offset = "0x1033E44", VA = "0x1033E44")]
			get
			{
				return default(DateTime);
			}
		}

		[Token(Token = "0x170001F6")]
		public string BuildDateUTCShortened
		{
			[Token(Token = "0x6001183")]
			[Address(RVA = "0x1033EE0", Offset = "0x1033EE0", VA = "0x1033EE0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001F7")]
		public string GetLocalBuildTimestamp
		{
			[Token(Token = "0x6001184")]
			[Address(RVA = "0x1033F44", Offset = "0x1033F44", VA = "0x1033F44")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001F8")]
		public DateTime BuildDateLocal
		{
			[Token(Token = "0x6001185")]
			[Address(RVA = "0x1033FB8", Offset = "0x1033FB8", VA = "0x1033FB8")]
			get
			{
				return default(DateTime);
			}
		}

		[Token(Token = "0x170001F9")]
		public string BuildMachine
		{
			[Token(Token = "0x6001186")]
			[Address(RVA = "0x1033FD8", Offset = "0x1033FD8", VA = "0x1033FD8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001FA")]
		public bool ExternallyManagedBuild
		{
			[Token(Token = "0x6001187")]
			[Address(RVA = "0x1033FE0", Offset = "0x1033FE0", VA = "0x1033FE0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001FB")]
		public string Changelist
		{
			[Token(Token = "0x6001188")]
			[Address(RVA = "0x1033FE8", Offset = "0x1033FE8", VA = "0x1033FE8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001189")]
			[Address(RVA = "0x1033FF0", Offset = "0x1033FF0", VA = "0x1033FF0")]
			set
			{
			}
		}

		[Token(Token = "0x170001FC")]
		public string BuildName
		{
			[Token(Token = "0x600118A")]
			[Address(RVA = "0x1033FF8", Offset = "0x1033FF8", VA = "0x1033FF8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001FD")]
		public string BuildInfoText
		{
			[Token(Token = "0x600118B")]
			[Address(RVA = "0x1034000", Offset = "0x1034000", VA = "0x1034000")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001FE")]
		public string UnityVersion
		{
			[Token(Token = "0x600118C")]
			[Address(RVA = "0x1034290", Offset = "0x1034290", VA = "0x1034290")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600118D")]
		[Address(RVA = "0x1034298", Offset = "0x1034298", VA = "0x1034298")]
		public BuildInfoData(string changeList, string buildName, bool externallyManaged = true)
		{
		}

		[Token(Token = "0x600118E")]
		[Address(RVA = "0x1034048", Offset = "0x1034048", VA = "0x1034048")]
		private string GetBuildInfoText()
		{
			return null;
		}

		[Token(Token = "0x600118F")]
		[Address(RVA = "0x10343C0", Offset = "0x10343C0", VA = "0x10343C0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6001190")]
		[Address(RVA = "0x10343C4", Offset = "0x10343C4", VA = "0x10343C4")]
		public static BuildInfoData ReadFromFile()
		{
			return null;
		}

		[Token(Token = "0x6001191")]
		[Address(RVA = "0x1034444", Offset = "0x1034444", VA = "0x1034444")]
		public static BuildInfoData ReadFromFile(string buildInfoFilePath)
		{
			return null;
		}
	}
}
namespace Camouflaj.WrinkleMaps
{
	[Token(Token = "0x200031F")]
	public class BlendShapeWrinkleMapBlendCommandBuilder : IWrinkleMaskWeightCalculator
	{
		[Token(Token = "0x2000320")]
		private class BlendShapeProxy
		{
			[Token(Token = "0x4000E1F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private BlendShapeWrinkleMapBlendCommandBuilder _owner;

			[Token(Token = "0x4000E20")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private int _index;

			[Token(Token = "0x4000E21")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			private SnappersBlendShapeID _blendShapeID;

			[Token(Token = "0x170001FF")]
			public int Index
			{
				[Token(Token = "0x600119A")]
				[Address(RVA = "0x103607C", Offset = "0x103607C", VA = "0x103607C")]
				get
				{
					return default(int);
				}
			}

			[Token(Token = "0x17000200")]
			public SnappersBlendShapeID BlendShapeID
			{
				[Token(Token = "0x600119B")]
				[Address(RVA = "0x1036084", Offset = "0x1036084", VA = "0x1036084")]
				get
				{
					return default(SnappersBlendShapeID);
				}
			}

			[Token(Token = "0x17000201")]
			public float Weight
			{
				[Token(Token = "0x600119C")]
				[Address(RVA = "0x1035B4C", Offset = "0x1035B4C", VA = "0x1035B4C")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x600119D")]
			[Address(RVA = "0x1035874", Offset = "0x1035874", VA = "0x1035874")]
			public BlendShapeProxy(BlendShapeWrinkleMapBlendCommandBuilder owner, int index, SnappersBlendShapeID blendShapeID)
			{
			}
		}

		[Token(Token = "0x2000321")]
		private class BlendShapeProxyWeightComparer : IComparer<BlendShapeProxy>
		{
			[Token(Token = "0x600119E")]
			[Address(RVA = "0x1035F18", Offset = "0x1035F18", VA = "0x1035F18", Slot = "4")]
			public int Compare(BlendShapeProxy lhs, BlendShapeProxy rhs)
			{
				return default(int);
			}

			[Token(Token = "0x600119F")]
			[Address(RVA = "0x1035598", Offset = "0x1035598", VA = "0x1035598")]
			public BlendShapeProxyWeightComparer()
			{
			}
		}

		[Token(Token = "0x4000E18")]
		private const int MAX_SIMULTANEOUS_BLEND_SHAPES = 8;

		[Token(Token = "0x4000E19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private SkinnedMeshRenderer _skinnedMeshRenderer;

		[Token(Token = "0x4000E1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private SnappersBlendShapeIndices _blendShapeIndices;

		[Token(Token = "0x4000E1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<BlendShapeProxy> _blendShapeProxies;

		[Token(Token = "0x4000E1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private BlendShapeProxyWeightComparer _blendShapeWeightComparer;

		[Token(Token = "0x4000E1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private HashSet<BlendShapeProxy> _closedSet;

		[Token(Token = "0x4000E1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private WrinkleMapBlendCommandBuilder _builder;

		[Token(Token = "0x6001192")]
		[Address(RVA = "0x1034870", Offset = "0x1034870", VA = "0x1034870")]
		public void Setup(SkinnedMeshRenderer skinnedMeshRenderer)
		{
		}

		[Token(Token = "0x6001193")]
		[Address(RVA = "0x1035748", Offset = "0x1035748", VA = "0x1035748")]
		public void Teardown()
		{
		}

		[Token(Token = "0x6001194")]
		[Address(RVA = "0x10353E8", Offset = "0x10353E8", VA = "0x10353E8")]
		private void CreateBlendShapeProxies()
		{
		}

		[Token(Token = "0x6001195")]
		[Address(RVA = "0x10358BC", Offset = "0x10358BC", VA = "0x10358BC")]
		public void Build(WrinkleMapBlendCommand command)
		{
		}

		[Token(Token = "0x6001196")]
		[Address(RVA = "0x1035A0C", Offset = "0x1035A0C", VA = "0x1035A0C")]
		private BlendShapeProxy GetNextHighestPriorityBlendShape()
		{
			return null;
		}

		[Token(Token = "0x6001197")]
		[Address(RVA = "0x1035E58", Offset = "0x1035E58", VA = "0x1035E58")]
		private int GetIndexOfFirstBlendShapeNotInClosedSet()
		{
			return default(int);
		}

		[Token(Token = "0x6001198")]
		[Address(RVA = "0x1035F88", Offset = "0x1035F88", VA = "0x1035F88", Slot = "4")]
		public float GetWeightForMask(int maskIndex)
		{
			return default(float);
		}

		[Token(Token = "0x6001199")]
		[Address(RVA = "0x1036074", Offset = "0x1036074", VA = "0x1036074")]
		public BlendShapeWrinkleMapBlendCommandBuilder()
		{
		}
	}
	[Token(Token = "0x2000322")]
	public class SnappersBlendShapeDependencies
	{
		[Token(Token = "0x4000E22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private WrinkleBlendRequestCollection[] _blendShapeBlendRequests;

		[Token(Token = "0x60011A0")]
		[Address(RVA = "0x103608C", Offset = "0x103608C", VA = "0x103608C")]
		public void Initialize(SnappersMasterMaskWeightCalculator maskWeightCalculator)
		{
		}

		[Token(Token = "0x60011A1")]
		[Address(RVA = "0x1036258", Offset = "0x1036258", VA = "0x1036258")]
		private WrinkleBlendRequestCollection CalculateWrinkleBlendRequests(SnappersBlendShapeID id, SnappersMasterMaskWeightCalculator maskWeightCalculator)
		{
			return null;
		}

		[Token(Token = "0x60011A2")]
		[Address(RVA = "0x1035B9C", Offset = "0x1035B9C", VA = "0x1035B9C")]
		public IReadOnlyWrinkleBlendRequestCollection GetWrinkleBlendRequestCollection(SnappersBlendShapeID id)
		{
			return null;
		}

		[Token(Token = "0x60011A3")]
		[Address(RVA = "0x1036634", Offset = "0x1036634", VA = "0x1036634")]
		public SnappersBlendShapeDependencies()
		{
		}
	}
	[Token(Token = "0x2000323")]
	public enum SnappersBlendShapeID
	{
		[Token(Token = "0x4000E24")]
		BROWS_DN_IN_L,
		[Token(Token = "0x4000E25")]
		BROWS_DN_IN_R,
		[Token(Token = "0x4000E26")]
		SNEER_L,
		[Token(Token = "0x4000E27")]
		SNEER_R,
		[Token(Token = "0x4000E28")]
		EYE_SQZ_L,
		[Token(Token = "0x4000E29")]
		EYE_SQZ_R,
		[Token(Token = "0x4000E2A")]
		FROWN_L,
		[Token(Token = "0x4000E2B")]
		FROWN_R,
		[Token(Token = "0x4000E2C")]
		MOUTH_MOV_UP,
		[Token(Token = "0x4000E2D")]
		MOUTH_MOV_UP_2,
		[Token(Token = "0x4000E2E")]
		LIP_LK_DROP,
		[Token(Token = "0x4000E2F")]
		CHIN_UP,
		[Token(Token = "0x4000E30")]
		PUFF_L,
		[Token(Token = "0x4000E31")]
		PUFF_R,
		[Token(Token = "0x4000E32")]
		H_CLOSE,
		[Token(Token = "0x4000E33")]
		DISGUST_CLOSE_L,
		[Token(Token = "0x4000E34")]
		DISGUST_CLOSE_R,
		[Token(Token = "0x4000E35")]
		SNEER_CLOSE_L,
		[Token(Token = "0x4000E36")]
		SNEER_CLOSE_R,
		[Token(Token = "0x4000E37")]
		BROWS_UP_OUT_L,
		[Token(Token = "0x4000E38")]
		BROWS_UP_IN_L,
		[Token(Token = "0x4000E39")]
		BROWS_UP_OUT_R,
		[Token(Token = "0x4000E3A")]
		BROWS_UP_IN_R,
		[Token(Token = "0x4000E3B")]
		PULL_L,
		[Token(Token = "0x4000E3C")]
		PULL_R,
		[Token(Token = "0x4000E3D")]
		NECK_TENSION_L,
		[Token(Token = "0x4000E3E")]
		NECK_TENSION_R,
		[Token(Token = "0x4000E3F")]
		MOUTH_TENSION,
		[Token(Token = "0x4000E40")]
		MOUTH_MOV_L,
		[Token(Token = "0x4000E41")]
		MOUTH_MOV_R,
		[Token(Token = "0x4000E42")]
		O,
		[Token(Token = "0x4000E43")]
		KISS,
		[Token(Token = "0x4000E44")]
		BROWS_SQUEZ_UP,
		[Token(Token = "0x4000E45")]
		H,
		[Token(Token = "0x4000E46")]
		JAW_DROP,
		[Token(Token = "0x4000E47")]
		JAW_DROP_MID,
		[Token(Token = "0x4000E48")]
		EYE_BLINK_L,
		[Token(Token = "0x4000E49")]
		EYE_BLINK_R,
		[Token(Token = "0x4000E4A")]
		SMILE_L,
		[Token(Token = "0x4000E4B")]
		STRETCH_L,
		[Token(Token = "0x4000E4C")]
		GRIN_L,
		[Token(Token = "0x4000E4D")]
		DIMPLE_L,
		[Token(Token = "0x4000E4E")]
		SMILE_R,
		[Token(Token = "0x4000E4F")]
		STRETCH_R,
		[Token(Token = "0x4000E50")]
		GRIN_R,
		[Token(Token = "0x4000E51")]
		DIMPLE_R,
		[Token(Token = "0x4000E52")]
		CHEEK_RAISE_L,
		[Token(Token = "0x4000E53")]
		CHEEK_RAISE_R,
		[Token(Token = "0x4000E54")]
		BROWS_SQUEZ
	}
	[Token(Token = "0x2000324")]
	public static class SnappersBlendShapeNames
	{
		[Token(Token = "0x4000E55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static string[] _blendShapeNames;

		[Token(Token = "0x17000202")]
		public static string BROWS_DN_IN_L
		{
			[Token(Token = "0x60011A6")]
			[Address(RVA = "0x1037BE8", Offset = "0x1037BE8", VA = "0x1037BE8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000203")]
		public static string BROWS_DN_IN_R
		{
			[Token(Token = "0x60011A7")]
			[Address(RVA = "0x1037C38", Offset = "0x1037C38", VA = "0x1037C38")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000204")]
		public static string SNEER_L
		{
			[Token(Token = "0x60011A8")]
			[Address(RVA = "0x1037C88", Offset = "0x1037C88", VA = "0x1037C88")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000205")]
		public static string SNEER_R
		{
			[Token(Token = "0x60011A9")]
			[Address(RVA = "0x1037CD8", Offset = "0x1037CD8", VA = "0x1037CD8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000206")]
		public static string EYE_SQZ_L
		{
			[Token(Token = "0x60011AA")]
			[Address(RVA = "0x1037D28", Offset = "0x1037D28", VA = "0x1037D28")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000207")]
		public static string EYE_SQZ_R
		{
			[Token(Token = "0x60011AB")]
			[Address(RVA = "0x1037D78", Offset = "0x1037D78", VA = "0x1037D78")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000208")]
		public static string FROWN_L
		{
			[Token(Token = "0x60011AC")]
			[Address(RVA = "0x1037DC8", Offset = "0x1037DC8", VA = "0x1037DC8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000209")]
		public static string FROWN_R
		{
			[Token(Token = "0x60011AD")]
			[Address(RVA = "0x1037E18", Offset = "0x1037E18", VA = "0x1037E18")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700020A")]
		public static string MOUTH_MOV_UP
		{
			[Token(Token = "0x60011AE")]
			[Address(RVA = "0x1037E68", Offset = "0x1037E68", VA = "0x1037E68")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700020B")]
		public static string MOUTH_MOV_UP_2
		{
			[Token(Token = "0x60011AF")]
			[Address(RVA = "0x1037EB8", Offset = "0x1037EB8", VA = "0x1037EB8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700020C")]
		public static string LIP_LK_DROP
		{
			[Token(Token = "0x60011B0")]
			[Address(RVA = "0x1037F08", Offset = "0x1037F08", VA = "0x1037F08")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700020D")]
		public static string CHIN_UP
		{
			[Token(Token = "0x60011B1")]
			[Address(RVA = "0x1037F58", Offset = "0x1037F58", VA = "0x1037F58")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700020E")]
		public static string PUFF_L
		{
			[Token(Token = "0x60011B2")]
			[Address(RVA = "0x1037FA8", Offset = "0x1037FA8", VA = "0x1037FA8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700020F")]
		public static string PUFF_R
		{
			[Token(Token = "0x60011B3")]
			[Address(RVA = "0x1037FF8", Offset = "0x1037FF8", VA = "0x1037FF8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000210")]
		public static string H_CLOSE
		{
			[Token(Token = "0x60011B4")]
			[Address(RVA = "0x1038048", Offset = "0x1038048", VA = "0x1038048")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000211")]
		public static string DISGUST_CLOSE_L
		{
			[Token(Token = "0x60011B5")]
			[Address(RVA = "0x1038098", Offset = "0x1038098", VA = "0x1038098")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000212")]
		public static string DISGUST_CLOSE_R
		{
			[Token(Token = "0x60011B6")]
			[Address(RVA = "0x10380E8", Offset = "0x10380E8", VA = "0x10380E8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000213")]
		public static string SNEER_CLOSE_L
		{
			[Token(Token = "0x60011B7")]
			[Address(RVA = "0x1038138", Offset = "0x1038138", VA = "0x1038138")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000214")]
		public static string SNEER_CLOSE_R
		{
			[Token(Token = "0x60011B8")]
			[Address(RVA = "0x1038188", Offset = "0x1038188", VA = "0x1038188")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000215")]
		public static string BROWS_UP_OUT_L
		{
			[Token(Token = "0x60011B9")]
			[Address(RVA = "0x10381D8", Offset = "0x10381D8", VA = "0x10381D8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000216")]
		public static string BROWS_UP_IN_L
		{
			[Token(Token = "0x60011BA")]
			[Address(RVA = "0x1038228", Offset = "0x1038228", VA = "0x1038228")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000217")]
		public static string BROWS_UP_OUT_R
		{
			[Token(Token = "0x60011BB")]
			[Address(RVA = "0x1038278", Offset = "0x1038278", VA = "0x1038278")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000218")]
		public static string BROWS_UP_IN_R
		{
			[Token(Token = "0x60011BC")]
			[Address(RVA = "0x10382C8", Offset = "0x10382C8", VA = "0x10382C8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000219")]
		public static string PULL_L
		{
			[Token(Token = "0x60011BD")]
			[Address(RVA = "0x1038318", Offset = "0x1038318", VA = "0x1038318")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700021A")]
		public static string PULL_R
		{
			[Token(Token = "0x60011BE")]
			[Address(RVA = "0x1038368", Offset = "0x1038368", VA = "0x1038368")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700021B")]
		public static string NECK_TENSION_L
		{
			[Token(Token = "0x60011BF")]
			[Address(RVA = "0x10383B8", Offset = "0x10383B8", VA = "0x10383B8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700021C")]
		public static string NECK_TENSION_R
		{
			[Token(Token = "0x60011C0")]
			[Address(RVA = "0x1038408", Offset = "0x1038408", VA = "0x1038408")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700021D")]
		public static string MOUTH_TENSION
		{
			[Token(Token = "0x60011C1")]
			[Address(RVA = "0x1038458", Offset = "0x1038458", VA = "0x1038458")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700021E")]
		public static string MOUTH_MOV_L
		{
			[Token(Token = "0x60011C2")]
			[Address(RVA = "0x10384A8", Offset = "0x10384A8", VA = "0x10384A8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700021F")]
		public static string MOUTH_MOV_R
		{
			[Token(Token = "0x60011C3")]
			[Address(RVA = "0x10384F8", Offset = "0x10384F8", VA = "0x10384F8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000220")]
		public static string O
		{
			[Token(Token = "0x60011C4")]
			[Address(RVA = "0x1038548", Offset = "0x1038548", VA = "0x1038548")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000221")]
		public static string KISS
		{
			[Token(Token = "0x60011C5")]
			[Address(RVA = "0x1038598", Offset = "0x1038598", VA = "0x1038598")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000222")]
		public static string BROWS_SQUEZ_UP
		{
			[Token(Token = "0x60011C6")]
			[Address(RVA = "0x10385E8", Offset = "0x10385E8", VA = "0x10385E8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000223")]
		public static string H
		{
			[Token(Token = "0x60011C7")]
			[Address(RVA = "0x1038638", Offset = "0x1038638", VA = "0x1038638")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000224")]
		public static string JAW_DROP
		{
			[Token(Token = "0x60011C8")]
			[Address(RVA = "0x1038688", Offset = "0x1038688", VA = "0x1038688")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000225")]
		public static string JAW_DROP_MID
		{
			[Token(Token = "0x60011C9")]
			[Address(RVA = "0x10386D8", Offset = "0x10386D8", VA = "0x10386D8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000226")]
		public static string EYE_BLINK_L
		{
			[Token(Token = "0x60011CA")]
			[Address(RVA = "0x1038728", Offset = "0x1038728", VA = "0x1038728")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000227")]
		public static string EYE_BLINK_R
		{
			[Token(Token = "0x60011CB")]
			[Address(RVA = "0x1038778", Offset = "0x1038778", VA = "0x1038778")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000228")]
		public static string SMILE_L
		{
			[Token(Token = "0x60011CC")]
			[Address(RVA = "0x10387C8", Offset = "0x10387C8", VA = "0x10387C8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000229")]
		public static string STRETCH_L
		{
			[Token(Token = "0x60011CD")]
			[Address(RVA = "0x1038818", Offset = "0x1038818", VA = "0x1038818")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700022A")]
		public static string GRIN_L
		{
			[Token(Token = "0x60011CE")]
			[Address(RVA = "0x1038868", Offset = "0x1038868", VA = "0x1038868")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700022B")]
		public static string DIMPLE_L
		{
			[Token(Token = "0x60011CF")]
			[Address(RVA = "0x10388B8", Offset = "0x10388B8", VA = "0x10388B8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700022C")]
		public static string SMILE_R
		{
			[Token(Token = "0x60011D0")]
			[Address(RVA = "0x1038908", Offset = "0x1038908", VA = "0x1038908")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700022D")]
		public static string STRETCH_R
		{
			[Token(Token = "0x60011D1")]
			[Address(RVA = "0x1038958", Offset = "0x1038958", VA = "0x1038958")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700022E")]
		public static string GRIN_R
		{
			[Token(Token = "0x60011D2")]
			[Address(RVA = "0x10389A8", Offset = "0x10389A8", VA = "0x10389A8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700022F")]
		public static string DIMPLE_R
		{
			[Token(Token = "0x60011D3")]
			[Address(RVA = "0x10389F8", Offset = "0x10389F8", VA = "0x10389F8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000230")]
		public static string CHEEK_RAISE_L
		{
			[Token(Token = "0x60011D4")]
			[Address(RVA = "0x1038A48", Offset = "0x1038A48", VA = "0x1038A48")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000231")]
		public static string CHEEK_RAISE_R
		{
			[Token(Token = "0x60011D5")]
			[Address(RVA = "0x1038A98", Offset = "0x1038A98", VA = "0x1038A98")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000232")]
		public static string BROWS_SQUEZ
		{
			[Token(Token = "0x60011D6")]
			[Address(RVA = "0x1038AE8", Offset = "0x1038AE8", VA = "0x1038AE8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60011A4")]
		[Address(RVA = "0x103663C", Offset = "0x103663C", VA = "0x103663C")]
		static SnappersBlendShapeNames()
		{
		}

		[Token(Token = "0x60011A5")]
		[Address(RVA = "0x1037B6C", Offset = "0x1037B6C", VA = "0x1037B6C")]
		public static string GetName(SnappersBlendShapeID id)
		{
			return null;
		}
	}
	[Token(Token = "0x2000325")]
	public class SnappersBlendShapeIndices
	{
		[Token(Token = "0x4000E56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int[] _indices;

		[Token(Token = "0x17000233")]
		public int Count
		{
			[Token(Token = "0x60011D7")]
			[Address(RVA = "0x1035828", Offset = "0x1035828", VA = "0x1035828")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000234")]
		public int this[int i]
		{
			[Token(Token = "0x60011D8")]
			[Address(RVA = "0x1035844", Offset = "0x1035844", VA = "0x1035844")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60011D9")]
		[Address(RVA = "0x1038B38", Offset = "0x1038B38", VA = "0x1038B38")]
		public int GetIndex(SnappersBlendShapeID id)
		{
			return default(int);
		}

		[Token(Token = "0x60011DA")]
		[Address(RVA = "0x1034A70", Offset = "0x1034A70", VA = "0x1034A70")]
		public void PopulateFromMesh(Mesh mesh)
		{
		}

		[Token(Token = "0x60011DB")]
		[Address(RVA = "0x1034A0C", Offset = "0x1034A0C", VA = "0x1034A0C")]
		public SnappersBlendShapeIndices()
		{
		}
	}
	[Token(Token = "0x2000326")]
	public abstract class SnappersMaskWeightCalculator
	{
		[Token(Token = "0x4000E57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected SnappersBlendShapeID[] _blendshapeDependencies;

		[Token(Token = "0x4000E58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private SkinnedMeshRenderer _skinnedMeshRenderer;

		[Token(Token = "0x4000E59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private SnappersBlendShapeIndices _indices;

		[Token(Token = "0x60011DC")]
		[Address(RVA = "0x1038B68", Offset = "0x1038B68", VA = "0x1038B68")]
		public float CalculateWeight(SkinnedMeshRenderer smr, SnappersBlendShapeIndices indices)
		{
			return default(float);
		}

		[Token(Token = "0x60011DD")]
		[Address(RVA = "0x1038BF0", Offset = "0x1038BF0", VA = "0x1038BF0")]
		public int GetBlendShapeDependencyCount()
		{
			return default(int);
		}

		[Token(Token = "0x60011DE")]
		[Address(RVA = "0x1038C0C", Offset = "0x1038C0C", VA = "0x1038C0C")]
		public SnappersBlendShapeID GetBlendShapeDependency(int index)
		{
			return default(SnappersBlendShapeID);
		}

		[Token(Token = "0x60011DF")]
		[Address(RVA = "0x1038C3C", Offset = "0x1038C3C", VA = "0x1038C3C")]
		public bool MaskDependsOnBlendShape(SnappersBlendShapeID id)
		{
			return default(bool);
		}

		[Token(Token = "0x60011E0")]
		protected abstract float CalculateWeight_Internal();

		[Token(Token = "0x60011E1")]
		[Address(RVA = "0x1038C98", Offset = "0x1038C98", VA = "0x1038C98")]
		protected float Weight(SnappersBlendShapeID id)
		{
			return default(float);
		}

		[Token(Token = "0x60011E2")]
		[Address(RVA = "0x1038CF0", Offset = "0x1038CF0", VA = "0x1038CF0")]
		protected float Hermite(float start, float end, float startTan, float endTan, float t)
		{
			return default(float);
		}

		[Token(Token = "0x60011E3")]
		[Address(RVA = "0x1038D44", Offset = "0x1038D44", VA = "0x1038D44")]
		protected SnappersMaskWeightCalculator()
		{
		}
	}
	[Token(Token = "0x2000327")]
	public class BasicSnappersMaskWeightCalculator : SnappersMaskWeightCalculator
	{
		[Token(Token = "0x60011E4")]
		[Address(RVA = "0x1038D4C", Offset = "0x1038D4C", VA = "0x1038D4C")]
		public BasicSnappersMaskWeightCalculator(SnappersBlendShapeID id)
		{
		}

		[Token(Token = "0x60011E5")]
		[Address(RVA = "0x1038DD4", Offset = "0x1038DD4", VA = "0x1038DD4", Slot = "4")]
		protected override float CalculateWeight_Internal()
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000328")]
	public class SnappersMaskWeightCalculate_Unused : SnappersMaskWeightCalculator
	{
		[Token(Token = "0x60011E6")]
		[Address(RVA = "0x1038DF4", Offset = "0x1038DF4", VA = "0x1038DF4")]
		public SnappersMaskWeightCalculate_Unused()
		{
		}

		[Token(Token = "0x60011E7")]
		[Address(RVA = "0x1038E88", Offset = "0x1038E88", VA = "0x1038E88", Slot = "4")]
		protected override float CalculateWeight_Internal()
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000329")]
	public class SnappersMaskWeightCalculator_Mask1 : SnappersMaskWeightCalculator
	{
		[Token(Token = "0x60011E8")]
		[Address(RVA = "0x1038E90", Offset = "0x1038E90", VA = "0x1038E90")]
		public SnappersMaskWeightCalculator_Mask1()
		{
		}

		[Token(Token = "0x60011E9")]
		[Address(RVA = "0x1038EF4", Offset = "0x1038EF4", VA = "0x1038EF4", Slot = "4")]
		protected override float CalculateWeight_Internal()
		{
			return default(float);
		}
	}
	[Token(Token = "0x200032A")]
	public class SnappersMaskWeightCalculator_Mask2 : SnappersMaskWeightCalculator
	{
		[Token(Token = "0x60011EA")]
		[Address(RVA = "0x1038F54", Offset = "0x1038F54", VA = "0x1038F54")]
		public SnappersMaskWeightCalculator_Mask2()
		{
		}

		[Token(Token = "0x60011EB")]
		[Address(RVA = "0x1038FD4", Offset = "0x1038FD4", VA = "0x1038FD4", Slot = "4")]
		protected override float CalculateWeight_Internal()
		{
			return default(float);
		}
	}
	[Token(Token = "0x200032B")]
	public class SnappersMaskWeightCalculator_Mask3 : BasicSnappersMaskWeightCalculator
	{
		[Token(Token = "0x60011EC")]
		[Address(RVA = "0x1039034", Offset = "0x1039034", VA = "0x1039034")]
		public SnappersMaskWeightCalculator_Mask3()
		{
		}
	}
	[Token(Token = "0x200032C")]
	public class SnappersMaskWeightCalculator_Mask4 : BasicSnappersMaskWeightCalculator
	{
		[Token(Token = "0x60011ED")]
		[Address(RVA = "0x103903C", Offset = "0x103903C", VA = "0x103903C")]
		public SnappersMaskWeightCalculator_Mask4()
		{
		}
	}
	[Token(Token = "0x200032D")]
	public class SnappersMaskWeightCalculator_Mask5 : BasicSnappersMaskWeightCalculator
	{
		[Token(Token = "0x60011EE")]
		[Address(RVA = "0x1039044", Offset = "0x1039044", VA = "0x1039044")]
		public SnappersMaskWeightCalculator_Mask5()
		{
		}
	}
	[Token(Token = "0x200032E")]
	public class SnappersMaskWeightCalculator_Mask6 : BasicSnappersMaskWeightCalculator
	{
		[Token(Token = "0x60011EF")]
		[Address(RVA = "0x103904C", Offset = "0x103904C", VA = "0x103904C")]
		public SnappersMaskWeightCalculator_Mask6()
		{
		}
	}
	[Token(Token = "0x200032F")]
	public class SnappersMaskWeightCalculator_Mask7 : BasicSnappersMaskWeightCalculator
	{
		[Token(Token = "0x60011F0")]
		[Address(RVA = "0x1039054", Offset = "0x1039054", VA = "0x1039054")]
		public SnappersMaskWeightCalculator_Mask7()
		{
		}
	}
	[Token(Token = "0x2000330")]
	public class SnappersMaskWeightCalculator_Mask8 : BasicSnappersMaskWeightCalculator
	{
		[Token(Token = "0x60011F1")]
		[Address(RVA = "0x103905C", Offset = "0x103905C", VA = "0x103905C")]
		public SnappersMaskWeightCalculator_Mask8()
		{
		}
	}
	[Token(Token = "0x2000331")]
	public class SnappersMaskWeightCalculator_Mask9 : SnappersMaskWeightCalculator
	{
		[Token(Token = "0x60011F2")]
		[Address(RVA = "0x1039064", Offset = "0x1039064", VA = "0x1039064")]
		public SnappersMaskWeightCalculator_Mask9()
		{
		}

		[Token(Token = "0x60011F3")]
		[Address(RVA = "0x10390F4", Offset = "0x10390F4", VA = "0x10390F4", Slot = "4")]
		protected override float CalculateWeight_Internal()
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000332")]
	public class SnappersMaskWeightCalculator_Mask10 : BasicSnappersMaskWeightCalculator
	{
		[Token(Token = "0x60011F4")]
		[Address(RVA = "0x1039238", Offset = "0x1039238", VA = "0x1039238")]
		public SnappersMaskWeightCalculator_Mask10()
		{
		}
	}
	[Token(Token = "0x2000333")]
	public class SnappersMaskWeightCalculator_Mask11 : BasicSnappersMaskWeightCalculator
	{
		[Token(Token = "0x60011F5")]
		[Address(RVA = "0x1039240", Offset = "0x1039240", VA = "0x1039240")]
		public SnappersMaskWeightCalculator_Mask11()
		{
		}
	}
	[Token(Token = "0x2000334")]
	public class SnappersMaskWeightCalculator_Mask12 : BasicSnappersMaskWeightCalculator
	{
		[Token(Token = "0x60011F6")]
		[Address(RVA = "0x1039248", Offset = "0x1039248", VA = "0x1039248")]
		public SnappersMaskWeightCalculator_Mask12()
		{
		}
	}
	[Token(Token = "0x2000335")]
	public class SnappersMaskWeightCalculator_Mask13 : BasicSnappersMaskWeightCalculator
	{
		[Token(Token = "0x60011F7")]
		[Address(RVA = "0x1039250", Offset = "0x1039250", VA = "0x1039250")]
		public SnappersMaskWeightCalculator_Mask13()
		{
		}
	}
	[Token(Token = "0x2000336")]
	public class SnappersMaskWeightCalculator_Mask14 : BasicSnappersMaskWeightCalculator
	{
		[Token(Token = "0x60011F8")]
		[Address(RVA = "0x1039258", Offset = "0x1039258", VA = "0x1039258")]
		public SnappersMaskWeightCalculator_Mask14()
		{
		}
	}
	[Token(Token = "0x2000337")]
	public class SnappersMaskWeightCalculator_Mask15 : BasicSnappersMaskWeightCalculator
	{
		[Token(Token = "0x60011F9")]
		[Address(RVA = "0x1039260", Offset = "0x1039260", VA = "0x1039260")]
		public SnappersMaskWeightCalculator_Mask15()
		{
		}
	}
	[Token(Token = "0x2000338")]
	public class SnappersMaskWeightCalculator_Mask16 : BasicSnappersMaskWeightCalculator
	{
		[Token(Token = "0x60011FA")]
		[Address(RVA = "0x1039268", Offset = "0x1039268", VA = "0x1039268")]
		public SnappersMaskWeightCalculator_Mask16()
		{
		}
	}
	[Token(Token = "0x2000339")]
	public class SnappersMaskWeightCalculator_Mask17 : BasicSnappersMaskWeightCalculator
	{
		[Token(Token = "0x60011FB")]
		[Address(RVA = "0x1039270", Offset = "0x1039270", VA = "0x1039270")]
		public SnappersMaskWeightCalculator_Mask17()
		{
		}
	}
	[Token(Token = "0x200033A")]
	public class SnappersMaskWeightCalculator_Mask18 : SnappersMaskWeightCalculator
	{
		[Token(Token = "0x60011FC")]
		[Address(RVA = "0x1039278", Offset = "0x1039278", VA = "0x1039278")]
		public SnappersMaskWeightCalculator_Mask18()
		{
		}

		[Token(Token = "0x60011FD")]
		[Address(RVA = "0x1039308", Offset = "0x1039308", VA = "0x1039308", Slot = "4")]
		protected override float CalculateWeight_Internal()
		{
			return default(float);
		}
	}
	[Token(Token = "0x200033B")]
	public class SnappersMaskWeightCalculator_Mask19 : BasicSnappersMaskWeightCalculator
	{
		[Token(Token = "0x60011FE")]
		[Address(RVA = "0x103939C", Offset = "0x103939C", VA = "0x103939C")]
		public SnappersMaskWeightCalculator_Mask19()
		{
		}
	}
	[Token(Token = "0x200033C")]
	public class SnappersMaskWeightCalculator_Mask20 : SnappersMaskWeightCalculator
	{
		[Token(Token = "0x60011FF")]
		[Address(RVA = "0x10393A4", Offset = "0x10393A4", VA = "0x10393A4")]
		public SnappersMaskWeightCalculator_Mask20()
		{
		}

		[Token(Token = "0x6001200")]
		[Address(RVA = "0x1039434", Offset = "0x1039434", VA = "0x1039434", Slot = "4")]
		protected override float CalculateWeight_Internal()
		{
			return default(float);
		}
	}
	[Token(Token = "0x200033D")]
	public class SnappersMaskWeightCalculator_Mask21 : SnappersMaskWeightCalculator
	{
		[Token(Token = "0x6001201")]
		[Address(RVA = "0x10394B4", Offset = "0x10394B4", VA = "0x10394B4")]
		public SnappersMaskWeightCalculator_Mask21()
		{
		}

		[Token(Token = "0x6001202")]
		[Address(RVA = "0x1039544", Offset = "0x1039544", VA = "0x1039544", Slot = "4")]
		protected override float CalculateWeight_Internal()
		{
			return default(float);
		}
	}
	[Token(Token = "0x200033E")]
	public class SnappersMaskWeightCalculator_Mask22 : BasicSnappersMaskWeightCalculator
	{
		[Token(Token = "0x6001203")]
		[Address(RVA = "0x1039584", Offset = "0x1039584", VA = "0x1039584")]
		public SnappersMaskWeightCalculator_Mask22()
		{
		}
	}
	[Token(Token = "0x200033F")]
	public class SnappersMaskWeightCalculator_Mask23 : BasicSnappersMaskWeightCalculator
	{
		[Token(Token = "0x6001204")]
		[Address(RVA = "0x103958C", Offset = "0x103958C", VA = "0x103958C")]
		public SnappersMaskWeightCalculator_Mask23()
		{
		}
	}
	[Token(Token = "0x2000340")]
	public class SnappersMaskWeightCalculator_Mask25 : BasicSnappersMaskWeightCalculator
	{
		[Token(Token = "0x6001205")]
		[Address(RVA = "0x1039594", Offset = "0x1039594", VA = "0x1039594")]
		public SnappersMaskWeightCalculator_Mask25()
		{
		}
	}
	[Token(Token = "0x2000341")]
	public class SnappersMaskWeightCalculator_Mask26 : BasicSnappersMaskWeightCalculator
	{
		[Token(Token = "0x6001206")]
		[Address(RVA = "0x103959C", Offset = "0x103959C", VA = "0x103959C")]
		public SnappersMaskWeightCalculator_Mask26()
		{
		}
	}
	[Token(Token = "0x2000342")]
	public class SnappersMaskWeightCalculator_Mask28 : SnappersMaskWeightCalculator
	{
		[Token(Token = "0x6001207")]
		[Address(RVA = "0x10395A4", Offset = "0x10395A4", VA = "0x10395A4")]
		public SnappersMaskWeightCalculator_Mask28()
		{
		}

		[Token(Token = "0x6001208")]
		[Address(RVA = "0x1039634", Offset = "0x1039634", VA = "0x1039634", Slot = "4")]
		protected override float CalculateWeight_Internal()
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000343")]
	public class SnappersMaskWeightCalculator_Mask29 : SnappersMaskWeightCalculator
	{
		[Token(Token = "0x6001209")]
		[Address(RVA = "0x10396C0", Offset = "0x10396C0", VA = "0x10396C0")]
		public SnappersMaskWeightCalculator_Mask29()
		{
		}

		[Token(Token = "0x600120A")]
		[Address(RVA = "0x1039750", Offset = "0x1039750", VA = "0x1039750", Slot = "4")]
		protected override float CalculateWeight_Internal()
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000344")]
	public class SnappersMaskWeightCalculator_Mask30 : SnappersMaskWeightCalculator
	{
		[Token(Token = "0x600120B")]
		[Address(RVA = "0x10397DC", Offset = "0x10397DC", VA = "0x10397DC")]
		public SnappersMaskWeightCalculator_Mask30()
		{
		}

		[Token(Token = "0x600120C")]
		[Address(RVA = "0x103986C", Offset = "0x103986C", VA = "0x103986C", Slot = "4")]
		protected override float CalculateWeight_Internal()
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000345")]
	public class SnappersMaskWeightCalculator_Mask31 : SnappersMaskWeightCalculator
	{
		[Token(Token = "0x600120D")]
		[Address(RVA = "0x103991C", Offset = "0x103991C", VA = "0x103991C")]
		public SnappersMaskWeightCalculator_Mask31()
		{
		}

		[Token(Token = "0x600120E")]
		[Address(RVA = "0x10399AC", Offset = "0x10399AC", VA = "0x10399AC", Slot = "4")]
		protected override float CalculateWeight_Internal()
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000346")]
	public class SnappersMaskWeightCalculator_Mask32 : SnappersMaskWeightCalculator
	{
		[Token(Token = "0x600120F")]
		[Address(RVA = "0x10399EC", Offset = "0x10399EC", VA = "0x10399EC")]
		public SnappersMaskWeightCalculator_Mask32()
		{
		}

		[Token(Token = "0x6001210")]
		[Address(RVA = "0x1039A7C", Offset = "0x1039A7C", VA = "0x1039A7C", Slot = "4")]
		protected override float CalculateWeight_Internal()
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000347")]
	public class SnappersMaskWeightCalculator_Mask34 : SnappersMaskWeightCalculator
	{
		[Token(Token = "0x6001211")]
		[Address(RVA = "0x1039ABC", Offset = "0x1039ABC", VA = "0x1039ABC")]
		public SnappersMaskWeightCalculator_Mask34()
		{
		}

		[Token(Token = "0x6001212")]
		[Address(RVA = "0x1039B4C", Offset = "0x1039B4C", VA = "0x1039B4C", Slot = "4")]
		protected override float CalculateWeight_Internal()
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000348")]
	public class SnappersMasterMaskWeightCalculator
	{
		[Token(Token = "0x4000E5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private SnappersMaskWeightCalculator[] _maskWeightCalculators;

		[Token(Token = "0x17000235")]
		public int TotalMasks
		{
			[Token(Token = "0x6001214")]
			[Address(RVA = "0x1036618", Offset = "0x1036618", VA = "0x1036618")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001213")]
		[Address(RVA = "0x1039BCC", Offset = "0x1039BCC", VA = "0x1039BCC")]
		public SnappersMasterMaskWeightCalculator()
		{
		}

		[Token(Token = "0x6001215")]
		[Address(RVA = "0x1036038", Offset = "0x1036038", VA = "0x1036038")]
		public float CalculateWeightForMask(int maskIndex, SkinnedMeshRenderer smr, SnappersBlendShapeIndices indices)
		{
			return default(float);
		}

		[Token(Token = "0x6001216")]
		[Address(RVA = "0x103A86C", Offset = "0x103A86C", VA = "0x103A86C")]
		public int GetBlendShapeDependencyCountForMask(int maskIndex)
		{
			return default(int);
		}

		[Token(Token = "0x6001217")]
		[Address(RVA = "0x103A8AC", Offset = "0x103A8AC", VA = "0x103A8AC")]
		public SnappersBlendShapeID GetBlendShapeDependencyForMask(int maskIndex, int dependencyIndex)
		{
			return default(SnappersBlendShapeID);
		}

		[Token(Token = "0x6001218")]
		[Address(RVA = "0x10363D8", Offset = "0x10363D8", VA = "0x10363D8")]
		public bool MaskDependsOnBlendShape(int maskIndex, SnappersBlendShapeID id)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000349")]
	public class SnappersSchema
	{
		[Token(Token = "0x4000E5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int MASKS_PER_PACKED_MASK;

		[Token(Token = "0x4000E5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static int MASKS_PER_WRINKLE_MAP;

		[Token(Token = "0x4000E5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static SnappersSchema _instance;

		[Token(Token = "0x4000E5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static int _refCount;

		[Token(Token = "0x4000E5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private SnappersMasterMaskWeightCalculator _maskWeightCalculator;

		[Token(Token = "0x4000E60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private SnappersBlendShapeDependencies _blendShapeDependencies;

		[Token(Token = "0x17000236")]
		public static SnappersSchema Instance
		{
			[Token(Token = "0x6001219")]
			[Address(RVA = "0x103A8E4", Offset = "0x103A8E4", VA = "0x103A8E4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000237")]
		public SnappersMasterMaskWeightCalculator MaskWeightCalculator
		{
			[Token(Token = "0x600121C")]
			[Address(RVA = "0x103AA04", Offset = "0x103AA04", VA = "0x103AA04")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000238")]
		public SnappersBlendShapeDependencies BlendShapeDependencies
		{
			[Token(Token = "0x600121D")]
			[Address(RVA = "0x103AA0C", Offset = "0x103AA0C", VA = "0x103AA0C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600121A")]
		[Address(RVA = "0x1035340", Offset = "0x1035340", VA = "0x1035340")]
		public static void AddRef()
		{
		}

		[Token(Token = "0x600121B")]
		[Address(RVA = "0x1035794", Offset = "0x1035794", VA = "0x1035794")]
		public static void RemoveRef()
		{
		}

		[Token(Token = "0x600121E")]
		[Address(RVA = "0x103A93C", Offset = "0x103A93C", VA = "0x103A93C")]
		private SnappersSchema()
		{
		}

		[Token(Token = "0x600121F")]
		[Address(RVA = "0x1036410", Offset = "0x1036410", VA = "0x1036410")]
		public static int GetWrinkleMapIndexForMaskIndex(int maskIndex)
		{
			return default(int);
		}

		[Token(Token = "0x6001220")]
		[Address(RVA = "0x1036470", Offset = "0x1036470", VA = "0x1036470")]
		public static int GetPackedMaskIndexForMaskIndex(int maskIndex)
		{
			return default(int);
		}
	}
	[Token(Token = "0x200034A")]
	public class WrinkleBlendRequest : IReadOnlyWrinkleBlendRequest
	{
		[Token(Token = "0x4000E61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int _wrinkleMapIndex;

		[Token(Token = "0x4000E62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private List<int> _packedMasks;

		[Token(Token = "0x17000239")]
		public int WrinkleMapIndex
		{
			[Token(Token = "0x6001222")]
			[Address(RVA = "0x103AA64", Offset = "0x103AA64", VA = "0x103AA64", Slot = "4")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001223")]
			[Address(RVA = "0x103AA6C", Offset = "0x103AA6C", VA = "0x103AA6C")]
			set
			{
			}
		}

		[Token(Token = "0x1700023A")]
		public int PackedMaskCount
		{
			[Token(Token = "0x6001224")]
			[Address(RVA = "0x103AA74", Offset = "0x103AA74", VA = "0x103AA74", Slot = "5")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001225")]
		[Address(RVA = "0x103AABC", Offset = "0x103AABC", VA = "0x103AABC", Slot = "6")]
		public int GetPackedMaskAtIndex(int index)
		{
			return default(int);
		}

		[Token(Token = "0x6001226")]
		[Address(RVA = "0x103AB14", Offset = "0x103AB14", VA = "0x103AB14")]
		public void TryAddPackedMask(int packedMaskIndex)
		{
		}

		[Token(Token = "0x6001227")]
		[Address(RVA = "0x103ABE8", Offset = "0x103ABE8", VA = "0x103ABE8")]
		public WrinkleBlendRequest()
		{
		}
	}
	[Token(Token = "0x200034B")]
	public class WrinkleBlendRequestCollection : IReadOnlyWrinkleBlendRequestCollection
	{
		[Token(Token = "0x4000E63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<WrinkleBlendRequest> _blendRequests;

		[Token(Token = "0x1700023B")]
		public int Count
		{
			[Token(Token = "0x6001228")]
			[Address(RVA = "0x103AC74", Offset = "0x103AC74", VA = "0x103AC74", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700023C")]
		public IReadOnlyWrinkleBlendRequest this[int index]
		{
			[Token(Token = "0x6001229")]
			[Address(RVA = "0x103ACBC", Offset = "0x103ACBC", VA = "0x103ACBC", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600122A")]
		[Address(RVA = "0x103AD14", Offset = "0x103AD14", VA = "0x103AD14")]
		public int IndexOf(int wrinkleMapIndex)
		{
			return default(int);
		}

		[Token(Token = "0x600122B")]
		[Address(RVA = "0x10364D0", Offset = "0x10364D0", VA = "0x10364D0")]
		public void TryAdd(int wrinkleIndex, int packedMaskIndex)
		{
		}

		[Token(Token = "0x600122C")]
		[Address(RVA = "0x103634C", Offset = "0x103634C", VA = "0x103634C")]
		public WrinkleBlendRequestCollection()
		{
		}
	}
	[Token(Token = "0x200034C")]
	[CreateAssetMenu(fileName = "WrinkleMapAsset", menuName = "Camouflaj/Wrinkle Map/Wrinkle Map Asset")]
	public class WrinkleMapAsset : ScriptableObject
	{
		[Token(Token = "0x4000E64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Texture2DArray _normalArray;

		[Token(Token = "0x4000E65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Texture2DArray _occlusionArray;

		[Token(Token = "0x4000E66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private WrinkleTextureMetaData[] _wrinkleTextureMetaDataArray;

		[Token(Token = "0x4000E67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Texture2DArray _maskArray;

		[Token(Token = "0x1700023D")]
		public Texture2DArray NormalArray
		{
			[Token(Token = "0x600122D")]
			[Address(RVA = "0x103ADB8", Offset = "0x103ADB8", VA = "0x103ADB8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700023E")]
		public Texture2DArray OcclusionArray
		{
			[Token(Token = "0x600122E")]
			[Address(RVA = "0x103ADC0", Offset = "0x103ADC0", VA = "0x103ADC0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700023F")]
		public WrinkleTextureMetaData[] WrinkleTextureMetaDataArray
		{
			[Token(Token = "0x600122F")]
			[Address(RVA = "0x103ADC8", Offset = "0x103ADC8", VA = "0x103ADC8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000240")]
		public Texture2DArray MaskArray
		{
			[Token(Token = "0x6001230")]
			[Address(RVA = "0x103ADD0", Offset = "0x103ADD0", VA = "0x103ADD0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000241")]
		public int MaskCount
		{
			[Token(Token = "0x6001231")]
			[Address(RVA = "0x103ADD8", Offset = "0x103ADD8", VA = "0x103ADD8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001232")]
		[Address(RVA = "0x103ADFC", Offset = "0x103ADFC", VA = "0x103ADFC")]
		public bool IsValid()
		{
			return default(bool);
		}

		[Token(Token = "0x6001233")]
		[Address(RVA = "0x103B02C", Offset = "0x103B02C", VA = "0x103B02C")]
		public string GetErrorStringForSizeMismatch()
		{
			return null;
		}

		[Token(Token = "0x6001234")]
		[Address(RVA = "0x103B188", Offset = "0x103B188", VA = "0x103B188")]
		private void Reset()
		{
		}

		[Token(Token = "0x6001235")]
		[Address(RVA = "0x103B204", Offset = "0x103B204", VA = "0x103B204")]
		public WrinkleMapAsset()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200034D")]
	public struct WrinkleTextureMetaData
	{
		[Token(Token = "0x4000E68")]
		public const int STRIDE = 8;

		[Token(Token = "0x4000E69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		private float _bumpScale;

		[Token(Token = "0x4000E6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		[SerializeField]
		private float _occlusionStrength;

		[Token(Token = "0x17000242")]
		public float BumpScale
		{
			[Token(Token = "0x6001236")]
			[Address(RVA = "0x103B20C", Offset = "0x103B20C", VA = "0x103B20C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001237")]
			[Address(RVA = "0x103B214", Offset = "0x103B214", VA = "0x103B214")]
			set
			{
			}
		}

		[Token(Token = "0x17000243")]
		public float OcclusionStrength
		{
			[Token(Token = "0x6001238")]
			[Address(RVA = "0x103B21C", Offset = "0x103B21C", VA = "0x103B21C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001239")]
			[Address(RVA = "0x103B224", Offset = "0x103B224", VA = "0x103B224")]
			set
			{
			}
		}
	}
	[Token(Token = "0x200034E")]
	public class WrinkleMapBlendCommand
	{
		[Token(Token = "0x4000E6B")]
		public const int MAX_BLEND_INSTRUCTIONS = 3;

		[Token(Token = "0x4000E6C")]
		public const int MAX_MASK_SAMPLE_INSTRUCTIONS = 8;

		[Token(Token = "0x4000E6D")]
		public const int MASK_PACKED_CHANNEL_COUNT = 3;

		[Token(Token = "0x4000E6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private BlendInstruction[] _blendInstructionBuffer;

		[Token(Token = "0x4000E6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int _blendInstructionCount;

		[Token(Token = "0x4000E70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private MaskSampleInstruction[] _maskSampleInstructionBuffer;

		[Token(Token = "0x17000244")]
		public BlendInstruction[] BlendInstructionBuffer
		{
			[Token(Token = "0x600123A")]
			[Address(RVA = "0x103B22C", Offset = "0x103B22C", VA = "0x103B22C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000245")]
		public int BlendInstructionCount
		{
			[Token(Token = "0x600123B")]
			[Address(RVA = "0x103B234", Offset = "0x103B234", VA = "0x103B234")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600123C")]
			[Address(RVA = "0x103B23C", Offset = "0x103B23C", VA = "0x103B23C")]
			set
			{
			}
		}

		[Token(Token = "0x17000246")]
		public MaskSampleInstruction[] MaskSampleInstructionBuffer
		{
			[Token(Token = "0x600123D")]
			[Address(RVA = "0x103B244", Offset = "0x103B244", VA = "0x103B244")]
			get
			{
				return null;
			}
			[Token(Token = "0x600123E")]
			[Address(RVA = "0x103B24C", Offset = "0x103B24C", VA = "0x103B24C")]
			set
			{
			}
		}

		[Token(Token = "0x17000247")]
		public bool IsEmpty
		{
			[Token(Token = "0x600123F")]
			[Address(RVA = "0x103B254", Offset = "0x103B254", VA = "0x103B254")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001240")]
		[Address(RVA = "0x103B264", Offset = "0x103B264", VA = "0x103B264")]
		public void Clear()
		{
		}

		[Token(Token = "0x6001241")]
		[Address(RVA = "0x103B2A8", Offset = "0x103B2A8", VA = "0x103B2A8")]
		public static int GetMaskTexIndexForMaskID(int maskID)
		{
			return default(int);
		}

		[Token(Token = "0x6001242")]
		[Address(RVA = "0x103B2C4", Offset = "0x103B2C4", VA = "0x103B2C4")]
		public static int GetChannelIndexForMaskID(int maskID)
		{
			return default(int);
		}

		[Token(Token = "0x6001243")]
		[Address(RVA = "0x103B2E8", Offset = "0x103B2E8", VA = "0x103B2E8")]
		public WrinkleMapBlendCommand()
		{
		}
	}
	[Token(Token = "0x200034F")]
	public struct BlendInstruction
	{
		[Token(Token = "0x4000E71")]
		public const int STRIDE = 8;

		[Token(Token = "0x17000248")]
		public int WrinkleIndex
		{
			[Token(Token = "0x6001244")]
			[Address(RVA = "0x103B384", Offset = "0x103B384", VA = "0x103B384")]
			[CompilerGenerated]
			readonly get
			{
				return default(int);
			}
			[Token(Token = "0x6001245")]
			[Address(RVA = "0x103B38C", Offset = "0x103B38C", VA = "0x103B38C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000249")]
		public int MaskCount
		{
			[Token(Token = "0x6001246")]
			[Address(RVA = "0x103B394", Offset = "0x103B394", VA = "0x103B394")]
			[CompilerGenerated]
			readonly get
			{
				return default(int);
			}
			[Token(Token = "0x6001247")]
			[Address(RVA = "0x103B39C", Offset = "0x103B39C", VA = "0x103B39C")]
			[CompilerGenerated]
			set
			{
			}
		}
	}
	[Token(Token = "0x2000350")]
	public struct MaskSampleInstruction
	{
		[Token(Token = "0x4000E74")]
		public const int STRIDE = 16;

		[Token(Token = "0x1700024A")]
		public int MaskTexIndex
		{
			[Token(Token = "0x6001248")]
			[Address(RVA = "0x103B3A4", Offset = "0x103B3A4", VA = "0x103B3A4")]
			[CompilerGenerated]
			readonly get
			{
				return default(int);
			}
			[Token(Token = "0x6001249")]
			[Address(RVA = "0x103B3AC", Offset = "0x103B3AC", VA = "0x103B3AC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700024B")]
		public Vector3 Influence
		{
			[Token(Token = "0x600124A")]
			[Address(RVA = "0x103B3B4", Offset = "0x103B3B4", VA = "0x103B3B4")]
			[CompilerGenerated]
			readonly get
			{
				return default(Vector3);
			}
			[Token(Token = "0x600124B")]
			[Address(RVA = "0x103B3C0", Offset = "0x103B3C0", VA = "0x103B3C0")]
			[CompilerGenerated]
			set
			{
			}
		}
	}
	[Token(Token = "0x2000351")]
	public class WrinkleMapBlendCommandBuilder
	{
		[Token(Token = "0x2000352")]
		private class BlendInstructionBuilder
		{
			[Token(Token = "0x1700024E")]
			public int WrinkleIndex
			{
				[Token(Token = "0x6001259")]
				[Address(RVA = "0x103C0E4", Offset = "0x103C0E4", VA = "0x103C0E4")]
				[CompilerGenerated]
				get
				{
					return default(int);
				}
				[Token(Token = "0x600125A")]
				[Address(RVA = "0x103C0EC", Offset = "0x103C0EC", VA = "0x103C0EC")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x1700024F")]
			public List<int> PackedMaskIndicies
			{
				[Token(Token = "0x600125B")]
				[Address(RVA = "0x103C0F4", Offset = "0x103C0F4", VA = "0x103C0F4")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x600125C")]
				[Address(RVA = "0x103C0FC", Offset = "0x103C0FC", VA = "0x103C0FC")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x17000250")]
			public int MaskSampleInstructionCount
			{
				[Token(Token = "0x600125D")]
				[Address(RVA = "0x103B4B4", Offset = "0x103B4B4", VA = "0x103B4B4")]
				get
				{
					return default(int);
				}
			}

			[Token(Token = "0x6001258")]
			[Address(RVA = "0x103B4FC", Offset = "0x103B4FC", VA = "0x103B4FC")]
			public BlendInstructionBuilder()
			{
			}

			[Token(Token = "0x600125E")]
			[Address(RVA = "0x103C104", Offset = "0x103C104", VA = "0x103C104")]
			public int GetSampleInstructionIndexForPackedMaskIndex(int maskTexIndex)
			{
				return default(int);
			}

			[Token(Token = "0x600125F")]
			[Address(RVA = "0x103B9D4", Offset = "0x103B9D4", VA = "0x103B9D4")]
			public int GetNumberOfNewPackedMasks(IReadOnlyWrinkleBlendRequest request)
			{
				return default(int);
			}

			[Token(Token = "0x6001260")]
			[Address(RVA = "0x103BC08", Offset = "0x103BC08", VA = "0x103BC08")]
			public void AddNewMasks(IReadOnlyWrinkleBlendRequest request)
			{
			}

			[Token(Token = "0x6001261")]
			[Address(RVA = "0x103C094", Offset = "0x103C094", VA = "0x103C094")]
			public void Clear()
			{
			}

			[Token(Token = "0x6001262")]
			[Address(RVA = "0x103BFA8", Offset = "0x103BFA8", VA = "0x103BFA8")]
			public void PopulateMaskSampleInstructionBuffer(WrinkleMapBlendCommand blendCommand, int writeOffset, IWrinkleMaskWeightCalculator maskWeightCalculator)
			{
			}

			[Token(Token = "0x6001263")]
			[Address(RVA = "0x103C1A0", Offset = "0x103C1A0", VA = "0x103C1A0")]
			private MaskSampleInstruction GetMaskSampleInstruction(int packedMaskIndex, IWrinkleMaskWeightCalculator maskWeightCalculator)
			{
				return default(MaskSampleInstruction);
			}
		}

		[Token(Token = "0x4000E77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<BlendInstructionBuilder> _blendInstructionsBuilders;

		[Token(Token = "0x4000E78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Stack<BlendInstructionBuilder> _blendInstructionBuilderPool;

		[Token(Token = "0x1700024C")]
		public int CurrentBlendInstructionCount
		{
			[Token(Token = "0x600124C")]
			[Address(RVA = "0x103B3CC", Offset = "0x103B3CC", VA = "0x103B3CC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700024D")]
		public int CurrentMaskSampleInstructionCount
		{
			[Token(Token = "0x600124D")]
			[Address(RVA = "0x103B414", Offset = "0x103B414", VA = "0x103B414")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x600124E")]
		[Address(RVA = "0x10355A0", Offset = "0x10355A0", VA = "0x10355A0")]
		public WrinkleMapBlendCommandBuilder()
		{
		}

		[Token(Token = "0x600124F")]
		[Address(RVA = "0x1035BCC", Offset = "0x1035BCC", VA = "0x1035BCC")]
		public bool TryAdd(IReadOnlyWrinkleBlendRequestCollection requestCollection)
		{
			return default(bool);
		}

		[Token(Token = "0x6001250")]
		[Address(RVA = "0x103B588", Offset = "0x103B588", VA = "0x103B588")]
		private void GetNewInstructionsNeededForRequestCollection(IReadOnlyWrinkleBlendRequestCollection requestCollection, out int blendInstructionsNeeded, out int maskSampleInstructionsNeeded)
		{
		}

		[Token(Token = "0x6001251")]
		[Address(RVA = "0x103B930", Offset = "0x103B930", VA = "0x103B930")]
		private int GetBlendInstructionIndexForWrinkleMap(int wrinkleIndex)
		{
			return default(int);
		}

		[Token(Token = "0x6001252")]
		[Address(RVA = "0x103B804", Offset = "0x103B804", VA = "0x103B804")]
		private void Add(IReadOnlyWrinkleBlendRequestCollection requestCollection)
		{
		}

		[Token(Token = "0x6001253")]
		[Address(RVA = "0x103BB10", Offset = "0x103BB10", VA = "0x103BB10")]
		private void Add(IReadOnlyWrinkleBlendRequest request)
		{
		}

		[Token(Token = "0x6001254")]
		[Address(RVA = "0x103BE18", Offset = "0x103BE18", VA = "0x103BE18")]
		private void AddNewBlendInstructionBuilderForRequest(IReadOnlyWrinkleBlendRequest request)
		{
		}

		[Token(Token = "0x6001255")]
		[Address(RVA = "0x103BF58", Offset = "0x103BF58", VA = "0x103BF58")]
		private BlendInstructionBuilder GetBlendInstructionBuilderFromPool()
		{
			return null;
		}

		[Token(Token = "0x6001256")]
		[Address(RVA = "0x1035C4C", Offset = "0x1035C4C", VA = "0x1035C4C")]
		public void Apply(WrinkleMapBlendCommand command, IWrinkleMaskWeightCalculator maskWeightCalculator)
		{
		}

		[Token(Token = "0x6001257")]
		[Address(RVA = "0x1035D58", Offset = "0x1035D58", VA = "0x1035D58")]
		public void Clear()
		{
		}
	}
	[Token(Token = "0x2000353")]
	public class WrinkleMapBlendShaderInterpreter
	{
		[Token(Token = "0x4000E7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int _wrinkleNormalsArrayPropertyID;

		[Token(Token = "0x4000E7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private int _wrinkleOcclusionArrayPropertyID;

		[Token(Token = "0x4000E7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int _wrinkleMetaDataBufferPropertyID;

		[Token(Token = "0x4000E7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private int _wrinkleMasksArrayPropertyID;

		[Token(Token = "0x4000E7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int _blendInstructionBufferPropertyID;

		[Token(Token = "0x4000E80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int _blendInstructionCountPropertyID;

		[Token(Token = "0x4000E81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int _maskSampleInstructionBufferPropertyID;

		[Token(Token = "0x4000E82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private ComputeBuffer _wrinkleMetaDataBuffer;

		[Token(Token = "0x4000E83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private ComputeBuffer _blendInstructionBuffer;

		[Token(Token = "0x4000E84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private ComputeBuffer _maskSampleInstructionBuffer;

		[Token(Token = "0x4000E85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Material _targetMaterial;

		[Token(Token = "0x6001264")]
		[Address(RVA = "0x103C330", Offset = "0x103C330", VA = "0x103C330")]
		public WrinkleMapBlendShaderInterpreter(Material targetMaterial)
		{
		}

		[Token(Token = "0x6001265")]
		[Address(RVA = "0x103C4A8", Offset = "0x103C4A8", VA = "0x103C4A8")]
		public void Setup(int wrinkleArrayLength)
		{
		}

		[Token(Token = "0x6001266")]
		[Address(RVA = "0x103C5D0", Offset = "0x103C5D0", VA = "0x103C5D0")]
		public void Teardown()
		{
		}

		[Token(Token = "0x6001267")]
		[Address(RVA = "0x103C368", Offset = "0x103C368", VA = "0x103C368")]
		private void CachePropertyIDs()
		{
		}

		[Token(Token = "0x6001268")]
		[Address(RVA = "0x103C658", Offset = "0x103C658", VA = "0x103C658")]
		public void SetWrinkleMapAsset(WrinkleMapAsset wrinkleMapData)
		{
		}

		[Token(Token = "0x6001269")]
		[Address(RVA = "0x103C6D4", Offset = "0x103C6D4", VA = "0x103C6D4")]
		public void SetWrinkleMapBlendCommand(WrinkleMapBlendCommand blendCommand)
		{
		}
	}
	[Token(Token = "0x2000354")]
	[RequireComponent(typeof(SkinnedMeshRenderer))]
	public class WrinkleMapDriver : MonoBehaviour
	{
		[Token(Token = "0x4000E86")]
		private const string WRINKLE_MAP_KEYWORD = "WRINKLE_MAPS";

		[Token(Token = "0x4000E87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private WrinkleMapAsset _wrinkleMapAsset;

		[Token(Token = "0x4000E88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Index of the material in the skinned mesh renderer these wrinkle maps will affect.")]
		[SerializeField]
		private int _materialIndex;

		[Token(Token = "0x4000E89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("Wrinkle maps will only be enabled when renderer is within this distance from the camera.")]
		[SerializeField]
		private float _maxDistance;

		[Token(Token = "0x4000E8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private SkinnedMeshRenderer _skinnedMeshRenderer;

		[Token(Token = "0x4000E8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Material _originalMat;

		[Token(Token = "0x4000E8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Material _materialInstance;

		[Token(Token = "0x4000E8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private BlendShapeWrinkleMapBlendCommandBuilder _blendCommandBuilder;

		[Token(Token = "0x4000E8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private WrinkleMapBlendCommand _wrinkleMapBlendCommand;

		[Token(Token = "0x4000E8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private WrinkleMapBlendShaderInterpreter _shaderInterpreter;

		[Token(Token = "0x4000E90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int _lastFrameRebuilt;

		[Token(Token = "0x4000E91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private bool _isMaterialSamplingWrinkleMap;

		[Token(Token = "0x600126A")]
		[Address(RVA = "0x103C734", Offset = "0x103C734", VA = "0x103C734")]
		private void Awake()
		{
		}

		[Token(Token = "0x600126B")]
		[Address(RVA = "0x103C8A4", Offset = "0x103C8A4", VA = "0x103C8A4")]
		private void CloneRendererMaterial()
		{
		}

		[Token(Token = "0x600126C")]
		[Address(RVA = "0x103C9C0", Offset = "0x103C9C0", VA = "0x103C9C0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600126D")]
		[Address(RVA = "0x103CB2C", Offset = "0x103CB2C", VA = "0x103CB2C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600126E")]
		[Address(RVA = "0x103CBD0", Offset = "0x103CBD0", VA = "0x103CBD0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600126F")]
		[Address(RVA = "0x103CC80", Offset = "0x103CC80", VA = "0x103CC80")]
		private void SetMaterialToSampleWrinkleMaps(bool sampleWrinkleMaps)
		{
		}

		[Token(Token = "0x6001270")]
		[Address(RVA = "0x103CD04", Offset = "0x103CD04", VA = "0x103CD04")]
		private void OnBeginCameraRendering(ScriptableRenderContext context, Camera c)
		{
		}

		[Token(Token = "0x6001271")]
		[Address(RVA = "0x103CD50", Offset = "0x103CD50", VA = "0x103CD50")]
		private bool CloseEnoughForWrinkleMaps(Camera cam)
		{
			return default(bool);
		}

		[Token(Token = "0x6001272")]
		[Address(RVA = "0x103CE0C", Offset = "0x103CE0C", VA = "0x103CE0C")]
		private void RebuildIfNeeded()
		{
		}

		[Token(Token = "0x6001273")]
		[Address(RVA = "0x103CE3C", Offset = "0x103CE3C", VA = "0x103CE3C")]
		private bool NeedsRebuild()
		{
			return default(bool);
		}

		[Token(Token = "0x6001274")]
		[Address(RVA = "0x103CE60", Offset = "0x103CE60", VA = "0x103CE60")]
		private void Rebuild()
		{
		}

		[Token(Token = "0x6001275")]
		[Address(RVA = "0x103CEAC", Offset = "0x103CEAC", VA = "0x103CEAC")]
		public WrinkleMapDriver()
		{
		}
	}
	[Token(Token = "0x2000355")]
	public interface IWrinkleMaskWeightCalculator
	{
		[Token(Token = "0x6001276")]
		float GetWeightForMask(int maskIndex);
	}
	[Token(Token = "0x2000356")]
	public interface IReadOnlyWrinkleBlendRequestCollection
	{
		[Token(Token = "0x17000251")]
		int Count
		{
			[Token(Token = "0x6001277")]
			get;
		}

		[Token(Token = "0x17000252")]
		IReadOnlyWrinkleBlendRequest this[int index]
		{
			[Token(Token = "0x6001278")]
			get;
		}
	}
	[Token(Token = "0x2000357")]
	public interface IReadOnlyWrinkleBlendRequest
	{
		[Token(Token = "0x17000253")]
		int WrinkleMapIndex
		{
			[Token(Token = "0x6001279")]
			get;
		}

		[Token(Token = "0x17000254")]
		int PackedMaskCount
		{
			[Token(Token = "0x600127A")]
			get;
		}

		[Token(Token = "0x600127B")]
		int GetPackedMaskAtIndex(int index);
	}
}
namespace ArtTools.Prefabricator
{
	[Token(Token = "0x2000358")]
	public class PrefabricatorComponent : MonoBehaviour
	{
		[Token(Token = "0x4000E92")]
		public const string RigSkeletonIgnoreWord = "Skeleton";

		[Token(Token = "0x4000E93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool IsSkinnedMesh;

		[Token(Token = "0x4000E94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject RigPrefab;

		[Token(Token = "0x4000E95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string NameWordIgnoreList;

		[Token(Token = "0x4000E96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject GeoPrefab;

		[Token(Token = "0x4000E97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool CopyColliders;

		[Token(Token = "0x4000E98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject[] LodPrefabs;

		[Token(Token = "0x4000E99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool LodCopyColliders;

		[Token(Token = "0x4000E9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public GameObject[] PrefabsToInject;

		[Token(Token = "0x4000E9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public GameObject ResultPrefab;

		[Token(Token = "0x600127C")]
		[Address(RVA = "0x103CEBC", Offset = "0x103CEBC", VA = "0x103CEBC")]
		public void UpdateNameWordIgnoreList()
		{
		}

		[Token(Token = "0x600127D")]
		[Address(RVA = "0x103D0C8", Offset = "0x103D0C8", VA = "0x103D0C8")]
		public PrefabricatorComponent()
		{
		}
	}
}
namespace AttachPoints
{
	[Token(Token = "0x2000359")]
	public class AssetGUIDReferenceAttribute : PropertyAttribute
	{
		[Token(Token = "0x17000255")]
		public Type Type
		{
			[Token(Token = "0x600127E")]
			[Address(RVA = "0x103D120", Offset = "0x103D120", VA = "0x103D120")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600127F")]
			[Address(RVA = "0x103D128", Offset = "0x103D128", VA = "0x103D128")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6001280")]
		[Address(RVA = "0x103D130", Offset = "0x103D130", VA = "0x103D130")]
		public AssetGUIDReferenceAttribute()
		{
		}

		[Token(Token = "0x6001281")]
		[Address(RVA = "0x103D1C4", Offset = "0x103D1C4", VA = "0x103D1C4")]
		public AssetGUIDReferenceAttribute(Type type)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200035A")]
	public class AttachPointConfiguration
	{
		[Token(Token = "0x4000E9D")]
		private const string EnabledName = "_enabled";

		[Token(Token = "0x4000E9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private bool _enabled;

		[Token(Token = "0x4000E9F")]
		private const string AttachPointName = "_attachPoint";

		[Token(Token = "0x4000EA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Transform _attachPoint;

		[Token(Token = "0x4000EA1")]
		private const string ProfileName = "_profile";

		[Token(Token = "0x4000EA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private AttachPointProfile _profile;

		[Token(Token = "0x4000EA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private GameObject _greebleInstance;

		[Token(Token = "0x17000256")]
		public bool Enabled
		{
			[Token(Token = "0x6001282")]
			[Address(RVA = "0x103D1F4", Offset = "0x103D1F4", VA = "0x103D1F4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000257")]
		public Transform AttachPoint
		{
			[Token(Token = "0x6001283")]
			[Address(RVA = "0x103D1FC", Offset = "0x103D1FC", VA = "0x103D1FC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000258")]
		public AttachPointProfile Profile
		{
			[Token(Token = "0x6001284")]
			[Address(RVA = "0x103D204", Offset = "0x103D204", VA = "0x103D204")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001285")]
			[Address(RVA = "0x103D20C", Offset = "0x103D20C", VA = "0x103D20C")]
			set
			{
			}
		}

		[Token(Token = "0x6001286")]
		[Address(RVA = "0x103D214", Offset = "0x103D214", VA = "0x103D214")]
		public AttachPointConfiguration()
		{
		}
	}
	[Token(Token = "0x200035B")]
	[CreateAssetMenu(menuName = "Attach Point Profile")]
	public class AttachPointProfile : ScriptableObject
	{
		[Token(Token = "0x4000EA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AssetGUIDReference(typeof(GameObject))]
		public string[] GreeblePrefabGUIDs;

		[Token(Token = "0x6001287")]
		[Address(RVA = "0x103D224", Offset = "0x103D224", VA = "0x103D224")]
		public AttachPointProfile()
		{
		}
	}
	[Token(Token = "0x200035C")]
	public class GreebleGenerator : MonoBehaviour
	{
		[Token(Token = "0x4000EA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AttachPointProfile DefaultProfile;

		[Token(Token = "0x4000EA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string AttachPointNameRegexPattern;

		[Token(Token = "0x4000EA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<AttachPointConfiguration> Configurations;

		[Token(Token = "0x6001288")]
		[Address(RVA = "0x103D22C", Offset = "0x103D22C", VA = "0x103D22C")]
		public GreebleGenerator()
		{
		}
	}
	[Token(Token = "0x200035D")]
	public static class Utilities
	{
		[Token(Token = "0x200035E")]
		[CompilerGenerated]
		private sealed class <GetAllChildren>d__3 : IEnumerable<Transform>, IEnumerable, IEnumerator<Transform>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000EA8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000EA9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private Transform <>2__current;

			[Token(Token = "0x4000EAA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4000EAB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Transform t;

			[Token(Token = "0x4000EAC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Transform <>3__t;

			[Token(Token = "0x4000EAD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private IEnumerator <>7__wrap1;

			[Token(Token = "0x4000EAE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private IEnumerator<Transform> <enumerator>5__3;

			[Token(Token = "0x17000259")]
			private Transform System.Collections.Generic.IEnumerator<UnityEngine.Transform>.Current
			{
				[Token(Token = "0x6001292")]
				[Address(RVA = "0x103E18C", Offset = "0x103E18C", VA = "0x103E18C", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700025A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001294")]
				[Address(RVA = "0x103E1D4", Offset = "0x103E1D4", VA = "0x103E1D4", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600128D")]
			[Address(RVA = "0x103DAE8", Offset = "0x103DAE8", VA = "0x103DAE8")]
			[DebuggerHidden]
			public <GetAllChildren>d__3(int <>1__state)
			{
			}

			[Token(Token = "0x600128E")]
			[Address(RVA = "0x103DB1C", Offset = "0x103DB1C", VA = "0x103DB1C", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600128F")]
			[Address(RVA = "0x103DBD4", Offset = "0x103DBD4", VA = "0x103DBD4", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001290")]
			[Address(RVA = "0x103E0D0", Offset = "0x103E0D0", VA = "0x103E0D0")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6001291")]
			[Address(RVA = "0x103E020", Offset = "0x103E020", VA = "0x103E020")]
			private void <>m__Finally2()
			{
			}

			[Token(Token = "0x6001293")]
			[Address(RVA = "0x103E194", Offset = "0x103E194", VA = "0x103E194", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6001295")]
			[Address(RVA = "0x103E1DC", Offset = "0x103E1DC", VA = "0x103E1DC", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<Transform> System.Collections.Generic.IEnumerable<UnityEngine.Transform>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6001296")]
			[Address(RVA = "0x103E288", Offset = "0x103E288", VA = "0x103E288", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x6001289")]
		[Address(RVA = "0x103D2E0", Offset = "0x103D2E0", VA = "0x103D2E0")]
		public static void GetAllBoundsForTransform(Transform transform, List<Bounds> result)
		{
		}

		[Token(Token = "0x600128A")]
		[Address(RVA = "0x103D4B0", Offset = "0x103D4B0", VA = "0x103D4B0")]
		public static bool BoundsIntersectsOtherBounds(Bounds bounds, IEnumerable<Bounds> otherBoundsCollection)
		{
			return default(bool);
		}

		[Token(Token = "0x600128B")]
		[Address(RVA = "0x103D7E8", Offset = "0x103D7E8", VA = "0x103D7E8")]
		public static void Shuffle(this IList list)
		{
		}

		[Token(Token = "0x600128C")]
		[Address(RVA = "0x103DA64", Offset = "0x103DA64", VA = "0x103DA64")]
		[IteratorStateMachine(typeof(<GetAllChildren>d__3))]
		public static IEnumerable<Transform> GetAllChildren(this Transform t)
		{
			return null;
		}
	}
}
